;  =========================================================================
; |           Sonic the Hedgehog 2 Disassembly for Sega Mega Drive          |
;  =========================================================================

; originally created by Nemesis in 2004
; sound driver disassembly by Xenowhirl in 2007

; ported to AXM68K/Z80 Macros by Orion Navattan, including documentation
; from Sonic Retro AS and Sonic 1 Hivebrain 2022
		
;  =========================================================================

		opt	l.					; . is the local label symbol
		opt	ae-					; automatic evens disabled by default
		opt oz+						; address register indirect zero-displacement optimization enabled by default (but see the ZeroOffsetOptimization conditional below)	
		opt	an+					; allow Intel/Zilog-style number suffixes (used in the Z80 code and definitions)
		opt	ws+					; allow statements to contain white-spaces
		opt	w+					; print warnings
;		opt	m+					; do not expand macros - if enabled, this can break assembling

; Main section for all 68k code + startup dummy z80 program;
; sound driver and S2 Driver Compress data are seperate sections.

Main:	group word,org(0)					; we have to use the long form of group declaration to avoid triggering an overlay warning during assembly
		section MainProgram,Main

	if ~def(Revision) 
Revision: equ 1
; if 0, builds a REV00 ROM
; if 1, builds a REV01 ROM, which contains some fixes
; if 2, builds a hypothetical standalone REV02 ROM (based on the changes found in all 
; known appearances, without any of the implementation-specific bugs) which contains even more fixes
	endc
	
FixBugs: equ 0 
; If 1, enables a number of engine and gameplay bug-fixes, including some in the music and sound driver.

OptimizeSoundDriver: equ 0	
; If 1, enables a number of optimizations in the sound driver.

AllOptimizations: equ 0 
; If 1, enables all REV02 assembler optimizations as well as optimized leas from REV00 & REV01
; and the zero-displacement optimization.

ZeroOffsetOptimization: equ 0|AllOptimizations
; If 1, enables the zero-displacement optimization for 156 instances of address register 
; indirect displacement instructions that were unoptimized in the original game.
; See the macro definitions for a more complete explanation.

RemoveJmpTos: equ 0|(Revision=2|AllOptimizations) 
; If 1, many unnecessary JmpTos are removed, improving performance. 
; See the jsrto amd jmpto macro definitions for more information.

AddSubOptimize: equ 0|(Revision=2|AllOptimizations)
; If 1, many addi/subi/adda instructions are optimized to addq/subq.

RelativeLea: equ 0|(Revision<>2|AllOptimizations)
; If 1, makes some lea instructions use pc-relative addressing, instead of absolute long.

;SkipChecksumCheck equ 0
; If 1, disables the slow bootup checksum calculation

;UseFullWaterTables equ 0
; If 1, zone offset tables for water levels cover all level slots instead of only slots 8-$F
; If you've shifted level IDs around or you want water in levels with a level slot below 8	
		

		include "Macros - More CPUs.asm"
		cpu 68000

		include "Mega Drive.asm"
		include "Macros.asm"
		include "File List.asm"
		include "SpritePiece.asm"
		include "Constants.asm"
		include "RAM Addresses.asm"
		
		include "sound/Sound Equates.asm"		; variables and constants for the sound driver
		include "sound/Frequency, Note, Envelope, & Sample Definitions.asm" ; definitions used in both the sound driver and SMPS2ASM
		include "sound/Sound Language.asm"		; SMPS2ASM macros and conversion functionality
		include "sound/Sounds.asm"
	
		include "VRAM Addresses.asm"
		include "Object Subtypes.asm"			; object subtype constants
		include "Compatibility.asm"			; compatibility with Sonic 2 AS


ROM_Start:
		if offset(*)<>0
			inform 3,"ROM_Start is at $%h, but it must be 0. Make sure you haven't accidentally defined code in the equate and macro files.",offset(ROM_Start) 
		endc
Vectors:						
		dc.l v_stack_pointer				; Initial stack pointer value
		dc.l EntryPoint					; Start of program
		dc.l ErrorTrap					; Bus error
		dc.l ErrorTrap					; Address error (4)
		dc.l ErrorTrap					; Illegal instruction
		dc.l ErrorTrap					; Division by zero
		dc.l ErrorTrap					; CHK exception
		dc.l ErrorTrap					; TRAPV exception (8)
		dc.l ErrorTrap					; Privilege violation
		dc.l ErrorTrap					; TRACE exception
		dc.l ErrorTrap					; Line-A emulator
		dc.l ErrorTrap					; Line-F emulator (12)
		dcb.l 2,ErrorTrap				; Unused (reserved)
		dc.l ErrorTrap					; Format error
		dc.l ErrorTrap					; Uninitialized interrupt
		dcb.l 8,ErrorTrap				; Unused (reserved)
		dc.l ErrorTrap					; Spurious exception
		dc.l ErrorTrap					; IRQ level 1
		dc.l ErrorTrap					; IRQ level 2 (joypad and EXT /TH pin interrupt, unused here)
		dc.l ErrorTrap					; IRQ level 3 (28)
		dc.l HBlank					; IRQ level 4 (horizontal interrupt)
		dc.l ErrorTrap					; IRQ level 5
		dc.l VBlank					; IRQ level 6 (vertical interrupt)
		dc.l ErrorTrap					; IRQ level 7 (32)
		dcb.l 16,ErrorTrap				; TRAP #00..#15 exceptions
		dcb.l 16,ErrorTrap				; Unused (reserved)
	
Header:		
		dc.b 'SEGA GENESIS    '				; Console name
		dc.b '(C)SEGA 1992.SEP'				; Copyright/Date
		dc.b 'SONIC THE             HEDGEHOG 2                ' ; Domestic name
		dc.b 'SONIC THE             HEDGEHOG 2                ' ; International name
    if Revision=0
		dc.b "GM 00001051-00"				; Version (REV00)
    elseif Revision=1
		dc.b "GM 00001051-01"				; Version (REV01)
    elseif Revision=2
		dc.b "GM 00001051-02"				; Version (REV02)
    endc
Checksum:	dc.w $D951					; Checksum
		dc.b 'J               '				; I/O Support
ROMStartLoc:	dc.l Rom_Start					; ROM Start
ROMEndLoc:	dc.l Rom_End-1					; ROM End
RAMStartLoc:	dc.l $FF0000					; RAM Start
RAMEndLoc:	dc.l $FFFFFF					; RAM End
		dc.b '                                                          ' ; Notes
		dc.b '      '
		dc.b 'JUE             '				; Country
EndOfHeader:		
; ===========================================================================

ErrorTrap:	
		nop	
		nop	
		bra.s	ErrorTrap				; any exceptions are dumped in this infinite loop
; ===========================================================================

EntryPoint:
		; Everything from here to CheckSumCheck is part of a standard Sega library,
		; and its use was mandatory.
		tst.l	(port_1_control_hi).l			; test port 1 control register
		bne.s	.skip					; branch if not 0
		tst.w	(port_e_control_hi).l			; test ext port control register

	.skip:				
		bne.s	SkipSetup				; branch if not 0
		; If both of the above tests return 0, then this is a cold boot or we were handed off 
		; from the TMSS ROM. We need to satisfy the TMSS if necessary, and initialize the VDP
		lea	SetupValues(pc),a5			; load setup values array address
		movem.w	(a5)+,d5-d7				; d5 = VDP reg baseline; d6 = RAM size; d7 = VDP reg diff
		movem.l	(a5)+,a0-a4				; a0 = z80_ram ; a1 = z80_bus_request; a2 = z80_reset; a3 = vdp_data_port; a4 = vdp_control_port
		move.b	console_version-z80_bus_request(a1),d0	; get hardware version (from $A10001)
		andi.b	#console_revision,d0
		beq.s	.no_tmss				; if Model 1 VA4 or earlier (no TMSS), branch
		move.l	#'SEGA',tmss_sega-z80_bus_request(a1)	; move "SEGA" to TMSS register ($A14000)
		
		; Initialize the VDP and clear the RAM, VRAM, VSRAM, and CRAM.	
	.no_tmss:				
		move.w	(a4),d0					; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
		moveq	#0,d0					; clear d0
		movea.l	d0,a6					; clear a6
		move.l	a6,usp					; set usp to $0
		
		moveq	#sizeof_SetupVDP-1,d1			; number of times to loop
	.loop_vdp:				
		move.b	(a5)+,d5				; add $8000 to value
		move.w	d5,(a4)					; move value to VDP register
		add.w	d7,d5					; next register
		dbf	d1,.loop_vdp				; repeat until all registers have been written
		
		move.l	(a5)+,(a4)
		move.w	d0,(a3)					; clear the VRAM
		move.w	d7,(a1)					; stop the Z80
		move.w	d7,(a2)					; reset the Z80

	.waitz80:				
		btst	d0,(a1)					; has the Z80 stopped?
		bne.s	.waitz80				; if not, branch
		moveq	#Z80_Startup_size-1,d2			; load the number of bytes in Z80_Startup program into d2

	.loadz80:				
		move.b	(a5)+,(a0)+				; load the Z80_Startup program byte by byte to Z80 RAM
		dbf	d2,.loadz80					
		
		move.w	d0,(a2)
		move.w	d0,(a1)					; start the z80
		move.w	d7,(a2)					; reset the z80

	.loop_ram:				
		move.l	d0,-(a6)				; clear 4 bytes of RAM and deincrement
		dbf	d6,.loop_ram				; repeat until entire RAM is clear
		move.l	(a5)+,(a4)				; set VDP display mode and increment mode
		move.l	(a5)+,(a4)				; set VDP to CRAM write
		
		moveq	#(sizeof_pal_all/4)-1,d3		; set repeat times
	.loop_cram:				
		move.l	d0,(a3)					; clear 2 palette entries
		dbf	d3,.loop_cram				; repeat until entire CRAM is clear
		move.l	(a5)+,(a4)				; set VDP to VSRAM write
		
		moveq	#(sizeof_vsram/4)-1,d4					
	.loop_vsram:				
		move.l	d0,(a3)					; clear 4 bytes of VSRAM
		dbf	d4,.loop_vsram				; repeat until entire VSRAM is clear
		
		moveq	#countof_music_psg_tracks,d5		; actually four channels, but one is never used
	.loop_psg:				
		move.b	(a5)+,psg_input-vdp_data_port(a3)	; reset PSG0
		dbf	d5,.loop_psg				; repeat for all other channels
		
		move.w	d0,(a2)
		movem.l	(a6),d0-a6				; clear all registers
		disable_ints					; disable interrupts

SkipSetup:				
		bra.s	GameProgram				; begin game
; ===========================================================================
SetupValues:	
		dc.w $8000					; VDP register start number
		dc.w (sizeof_ram/4)-1				; size of RAM/4
		dc.w $100					; VDP register diff

		dc.l z80_ram					; start	of Z80 RAM
		dc.l z80_bus_request				; Z80 bus request
		dc.l z80_reset					; Z80 reset
		dc.l vdp_data_port				; VDP data
		dc.l vdp_control_port				; VDP control

; The following values are overwritten by VDPSetupGame (and later by game modes), so end up basically unused.
SetupVDP:	
		dc.b vdp_md_color&$FF				; VDP $80 - normal color mode
		dc.b (vdp_enable_dma|vdp_md_display)&$FF	; VDP $81 - Mega Drive mode, DMA enable
		dc.b ($C000>>10)				; VDP $82 - foreground nametable address
		dc.b ($F000>>10)				; VDP $83 - window nametable address
		dc.b ($E000>>13)				; VDP $84 - background nametable address
		dc.b ($D800>>9)					; VDP $85 - sprite table address
		dc.b 0						; VDP $86 - unused
		dc.b 0						; VDP $87 - background color
		dc.b 0						; VDP $88 - unused
		dc.b 0						; VDP $89 - unused
		dc.b 255					; VDP $8A - HBlank register
		dc.b vdp_full_hscroll&$FF			; VDP $8B - full screen scroll
		dc.b vdp_320px_screen_width&$FF			; VDP $8C - 40 cell display
		dc.b ($DC00>>10)				; VDP $8D - hscroll table address
		dc.b 0						; VDP $8E - unused
		dc.b 1						; VDP $8F - VDP increment
		dc.b (vdp_plane_width_64|vdp_plane_height_32)&$FF ; VDP $90 - 64x32 cell plane size
		dc.b 0						; VDP $91 - window h position
		dc.b 0						; VDP $92 - window v position
		dc.w $FFFF					; VDP $93/94 - DMA length		
		dc.w 0						; VDP $95/96 - DMA source
		dc.b vdp_dma_vram_fill&$FF			; VDP $97 - DMA fill VRAM
		arraysize	SetupVDP
				
		vdp_comm.l	dc,vram_start,vram,dma		; VRAM DMA write address 0

Z80_Startup:
		cpu	z80
		obj 0

		; fill the Z80 RAM with 00's (with the exception of this program)
		xor	a					; clear a
		ld	bc,2000h-(.end+1)			; load the number of bytes to fill
		ld	de,.end+1				; load the destination address of the RAM fill (1 byte after end of program)
		ld	hl,.end					; load the source address of the RAM fill (a single 00 byte)
		ld	sp,hl					; set stack pointer to end of program(?)
		ld	(hl),a					; clear the first byte after the program code
		ldir						; fill the rest of the Z80 RAM with 00's

		; clear all registers
		pop	ix
		pop	iy
		ld	i,a
		ld	r,a
		pop	de
		pop	hl
		pop	af

		ex	af,af					; swap af with af'
		exx						; swap bc, de, and hl
		pop	bc
		pop	de
		pop	hl
		pop	af
		ld	sp,hl					; clear stack pointer

		; put z80 into an infinite loop
		di						; disable interrupts
		im	1					; set interrupt mode to 1 (the only officially supported interrupt mode on the MD)
		ld	(hl),0E9h				; set the first byte into a jp	(hl) instruction
		jp	(hl)					; jump to the first byte, causing an infinite loop to occur.

	.end:							; the space from here til end of Z80 RAM will be filled with 00's
		even						; align the Z80 start up code to the next even byte. Values below require alignment

Z80_Startup_size:
		cpu	68000
		objend

		dc.w	vdp_md_display				; VDP display mode
		dc.w	vdp_auto_inc+2				; VDP increment
		vdp_comm.l	dc,$0000,cram,write		; CRAM write address 0
		vdp_comm.l	dc,$0000,vsram,write		; VSRAM write address 0
		dc.b tPSG1|$1F,tPSG2|$1F,tPSG3|$1F,tPSG4|$1F	; PSG mute values
; ===========================================================================

GameProgram:				
		tst.w	(vdp_control_port).l

CheckSumCheck:				
		move.w	(vdp_control_port).l,d1			; get status register

	if Revision>0
		btst	#dma_status_bit,d1			; was the console soft reset at the start of a 68K to DMA operation?
		bne.s	CheckSumCheck				; if so, wait until the DMA is completed
	endc

		btst	#6,(port_e_control).l			; was this a soft reset?
		beq.s	ChecksumTest				; if so, branch
		cmpi.l	#'init',(v_checksum_pass).w		; has checksum routine already run?
		beq.w	GameInit				; if it has, branch

ChecksumTest:				
		movea.l	#EndOfHeader,a0				; start checking bytes after the header ($200)
		movea.l	#ROMEndLoc,a1				; stop at end of ROM
		move.l	(a1),d0
		moveq	#0,d1

	.loop:				
		add.w	(a0)+,d1				; add bytes at current address to d1
		cmp.l	a0,d0					; have we reached tne end?
		bcc.s	.loop					; if not, branch
		movea.l	#Checksum,a1				; read the checksum
		cmp.w	(a1),d1					; compare checksum in header to rom
		bne.w	ChecksumError				; if they don't match, branch

;.checksumok:	
		lea	(v_keep_after_reset).w,a6
		moveq	#0,d7
		move.w	#(($FFFFFFFF-v_keep_after_reset+1)/4)-1,d6

	.clearramloop:				
		move.l	d7,(a6)+				; clear RAM ($FE00-$FFFF) only on a cold bot
		dbf	d6,.clearramloop

		move.b	(console_version).l,d0			; get console region
		andi.b	#console_region+console_speed,d0
		move.b	d0,(v_console_region).w			; set region variable in RAM
		move.l	#'init',(v_checksum_pass).w		; set flag so checksum won't run again

GameInit:				
		lea	(RAM_Start&$FFFFFF).l,a6
		moveq	#0,d7
		move.w	#((v_keep_after_reset&$FFFF)/4)-1,d6

	.clearRAM:				
		move.l	d7,(a6)+				; clear RAM ($0000-$FDFF)
		dbf	d6,.clearRAM
		bsr.w	VDPSetupGame
		bsr.w	JmpTo_SoundDriverLoad
		bsr.w	JoypadInit
		move.b	#id_Sega,(v_gamemode).w			; set initial game mode (Sega screen)

MainGameLoop:				
		move.b	(v_gamemode).w,d0			; load game mode
		andi.w	#$3C,d0					; limit to $1C max
		jsr	GameModeArray(pc,d0.w)			; jump to apt location in ROM
		bra.s	MainGameLoop				; infinite loop
; ===========================================================================
gmptr:		macro
		id_\1:	equ offset(*)-GameModeArray
		if narg=1
		bra.w	GM_\1
		else
		bra.w	GM_\2
		endc
		endm

GameModeArray:
		gmptr	Sega					; 0
		gmptr	Title					; 4
		gmptr	Demo, Level				; 8
		gmptr	Level					; $C
		gmptr	SpecialStage				; $10
		gmptr	Continue				; $14
		gmptr	TwoPlayerResults			; $18
		gmptr	LevelSelectMenu2P			; $1C
		gmptr	EndingSequence				; $20
		gmptr	OptionsMenu				; $24
		gmptr	LevelSelectMenu				; $28


ChecksumError:
		move.l	d1,-(sp)				; back up incorrect checksum to stack
		bsr.w	VDPSetupGame
		move.l	(sp)+,d1				; restore incorrect checksum from stack (possibly used when determining what it should be)
		vdp_comm.l move,$0000,cram,write,(vdp_control_port).l ; set VDP to CRAM write
		moveq	#(sizeof_pal_all/2)-1,d7

	.fillred:
		move.w	#cRed,(vdp_data_port).l			; fill palette with red
		dbf	d7,.fillred				; repeat $3F more time

	.endlessloop:				
		bra.s	.endlessloop				; loop forever
; ===========================================================================

GM_LevelSelectMenu2P:				
		jmp	(MenuScreen).l

GM_EndingSequence:				
		jmp	(EndingSequence).l

GM_OptionsMenu:				
		jmp	(MenuScreen).l

GM_LevelSelectMenu:				
		jmp	(MenuScreen).l
		
; ===========================================================================

VBlank:
		pushr.l	d0-a6					; save all registers to stack
		tst.b	(v_vblank_routine).w			; is routine number 0?
		beq.w	VBlank_Lag				; if yes, branch

	.waitvblank:
		move.w	(vdp_control_port).l,d0			; get status register
		andi.w	#8,d0					; is VBlank register set?
		beq.s	.waitvblank				; if not, branch
		vdp_comm.l	move,$0000,vsram,write,(vdp_control_port).l ; set VDP to VSRAM write, destination address 0
		move.l	(v_fg_y_pos_vsram).w,(vdp_data_port).l	; send screen y-axis pos. to VSRAM
		btst	#console_speed_bit,(v_console_region).w	; is Mega Drive PAL?
		beq.s	.notPAL
		move.w	#$700,d0

	.waitPAL:
		dbf	d0,.waitPAL				; wait here in a loop doing nothing for a while...

	.notPAL:
		move.b	(v_vblank_routine).w,d0			; get routine number
		move.b	#0,(v_vblank_routine).w			; reset to 0
		move.w	#1,(f_hblank).w				; set flag to let HBlank know a frame has finished
		andi.w	#$3E,d0					; %0011 1110
		move.w	VBlank_Index(pc,d0.w),d0
		jsr	VBlank_Index(pc,d0.w)			; jsr to relevant VBlank routine

VBlank_Exit:						
		addq.l	#1,(v_vblank_counter).w			; jsr to relevant VBlank routine
		popr	d0-a6					; restore all registers from stack
		rte						; end of VBlank
; ===========================================================================
VBlank_Index:	index offset(*),,2

		ptr	 VBlank_Lag				; 0
		ptr  VBlank_Sega				; 2
		ptr	 VBlank_Title				; 4
		ptr	 VBlank_Unused6				; 6
		ptr  VBlank_Level				; 8
		ptr  VBlank_SpecialStage			; $A
		ptr  VBlank_TitleCard				; $C
		ptr  VBlank_UnusedE				; $E
		ptr	 VBlank_Pause				; $10
		ptr  VBlank_Fade				; $12
		ptr  VBlank_PCM					; $14
		ptr  VBlank_Menu				; $16
		ptr  VBlank_Ending				; $18
		ptr  VBlank_CtrlDMA				; $1A
; ===========================================================================
; ---------------------------------------------------------------------------
; VBlank Routine 0 - runs when a frame ends before the game loop reaches 
; WaitForVBlank - e.g., the game is lagging due to a large number of 
; objects on screen

; If not in level, only update sound; if in a water level, update sound and
; palettes; if in non-water level, update sound, vscroll, and sprite table
; ---------------------------------------------------------------------------
VBlank_Lag:				
					
		cmpi.b	#titlecard_flag|id_Demo,(v_gamemode).w	; is game on level init sequence in demo mode?
		beq.s	.islevel				; if yes, branch
		cmpi.b	#titlecard_flag|id_Level,(v_gamemode).w	; is game on level init in normal play mode?
		beq.s	.islevel				; if yes, branch
		cmpi.b	#id_Demo,(v_gamemode).w			; is game on a level proper in demo mode?
		beq.s	.islevel				; if yes, branch			
		cmpi.b	#id_Level,(v_gamemode).w		; is game on a level proper?
		beq.s	.islevel				; if yes, branch
		
		stopZ80
		waitz80
		bsr.w	SoundDriverInput			; give input to the sound driver
		startZ80
		
		bra.s	VBlank_Exit	
; ===========================================================================
		
	.islevel:				
		tst.b	(f_water).w				; does level have water?
		beq.w	.nowater				; if it does, branch
		move.w	(vdp_control_port).l,d0
		btst	#console_speed_bit,(v_console_region).w	; is console PAL?
		beq.s	.notPAL1				; if not, branch
		
		move.w	#$700,d0
	.waitPAL1:				
		dbf	d0,.waitPAL1

	.notPAL1:				
		move.w	#1,(f_hblank).w				; set flag to let HBlank know a frame has finished
		stopZ80
		waitz80
		tst.b	(f_water_pal_full).w			; is water covering the whole screen?
		bne.s	.allwater				; if so, branch
		dma v_pal_dry,sizeof_pal_all,cram		; DMA normal palette to CRAM (water palette will be copied by HBlank later)
		
		bra.s	.waterbelow
; ===========================================================================

	.allwater:				
		dma	v_pal_water,sizeof_pal_all,cram		; DMA water palette to CRAM

	.waterbelow:				
		move.w	(v_vdp_hint_counter).w,(a5)		; set water palette position by sending VDP register $8Axx to control port (vdp_control_port)
		move.w	#vdp_fg_nametable|(vram_fg>>10),(vdp_control_port).l ; set fg scroll base to $C000
		bsr.w	SoundDriverInput
		startZ80
		bra.w	VBlank_Exit
; ===========================================================================

	.nowater:				
		move.w	(vdp_control_port).l,d0
		vdp_comm.l	move,$0000,vsram,write,(VDP_control_port).l ; set VDP to VSRAM write
		move.l	(v_fg_y_pos_vsram).w,(vdp_data_port).l
		btst	#console_speed_bit,(v_console_region).w
		beq.s	.notPAL2
	
		move.w	#$700,d0
	.waitPAL2:				
		dbf	d0,.waitPAL2

	.notPAL2:				
		move.w	#1,(f_hblank).w				; set flag to let HBlank know a frame has finished
		move.w	(v_vdp_hint_counter).w,(vdp_control_port).l
		move.w	#vdp_fg_nametable|(vram_fg>>10),(vdp_control_port).l ; set fg nametable base to $C000
		move.l	(v_fg_y_pos_vsram_p2).w,(v_hblank_fg_y_pos_vsram_p2).w
		stopZ80
		waitz80

		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites
		
		bsr.w	SoundDriverInput
		startZ80
		bra.w	VBlank_Exit
; ===========================================================================

VBlank_Sega:				
		bsr.w	ReadPad_Palette_Sprites_HScroll
		dma v_hscroll_buffer,sizeof_vram_hscroll,vram_hscroll ; update H-scroll values
		jsrto	SegaScreen_VBlank,JmpTo_SegaScreen_VBlank
		tst.w	(v_countdown).w				; is there time left on the counter?
		beq.w	.end					; if not, return
		subq.w	#1,(v_countdown).w			; subtract 1 from time left

	.end:				
		rts	
; ===========================================================================

VBlank_PCM:				
		move.b	(v_vblank_counter_byte).w,d0		; get frame count
		andi.w	#$F,d0									
		bne.s	.skip					; read joypads every 16 frames
		
		stopZ80
		waitZ80
		bsr.w	ReadJoypads	
		startZ80

	.skip:				
		tst.w	(v_countdown).w				; is there time left on the demo?
		beq.w	.end					; if not, return
		subq.w	#1,(v_countdown).w			; subtract 1 from time left

	.end:				
		rts	
; ===========================================================================

VBlank_Title:				
		bsr.w	ReadPad_Palette_Sprites_HScroll		; update palettes, SAT, and H-scroll
		bsr.w	ProcessPLC				; process pending PLCs				
		tst.w	(v_countdown).w				; is there time left on the demo?
		beq.w	.end					; if not, return
		subq.w	#1,(v_countdown).w			; subtract 1 from time left in demo

	.end:				
		rts	
; ===========================================================================

VBlank_Unused6:				
		bsr.w	ReadPad_Palette_Sprites_HScroll
		rts	
; ===========================================================================

VBlank_Pause:				
		cmpi.b	#id_SpecialStage,(v_gamemode).w
		beq.w	VBlank_Pause_SpecialStage

VBlank_Level:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		tst.b	(v_teleport_timer).w			; is a teleport in progress?
		beq.s	.chkpalettes				; if not, branch
		lea	(vdp_control_port).l,a5	
		tst.w	(f_pause).w				; is the game paused?
		bne.w	.finish					; if so, branch
		subq.b	#1,(v_teleport_timer).w			; subtract one from teleport timer
		bne.s	.notdone				; if time remains, branch
		move.b	#0,(f_teleport_flag).w			; clear teleport flag

	.notdone:				
		cmpi.b	#$10,(v_teleport_timer).w		; 16 frames or fewer left in teleport?
		bcs.s	.chkpalettes				; if so, branch				

		lea	(vdp_data_port).l,a6
		vdp_comm.l move,$0000,cram,write,(VDP_control_port).l ; set VDP to CRAM write
		move.w	#cWhite,d0

		move.w	#(countof_color*2)-1,d1			; two palette lines
	.whiteloop1:				
		move.w	d0,(a6)					; fill first two palette lines with white for teleport effect
		dbf	d1,.whiteloop1				; repeat 31 times

		vdp_comm.l	move,$0042,cram,write,(VDP_control_port).l ; skip one color

	if FixBugs
		move.w	#((countof_color*2)-1)-1,d1		; two palette lines	minus 1
	else
		; This does one more color than necessary: it isn't accounting for
		; the color that was skipped earlier!
		move.w	#(countof_color*2)-1,d1			; two palette lines
	endc

	.whiteloop2:				
		move.w	d0,(a6)
		dbf	d1,.whiteloop2
		bra.s	.finish
; ===========================================================================

	.chkpalettes:						
		tst.b	(f_water_pal_full).w
		bne.s	.allwater
		dma v_pal_dry,sizeof_pal_all,cram		; DMA normal palette to CRAM (water palette will be copied by HBlank later)
		bra.s	.finish
; ===========================================================================

	.allwater:				
		dma	v_pal_water,sizeof_pal_all,cram		; DMA water palette to CRAM

	.finish:					
		move.w	(v_vdp_hint_counter).w,(a5)
		move.w	#vdp_fg_nametable|(vram_fg>>10),(vdp_control_port).l
		dma v_hscroll_buffer,sizeof_vram_hscroll,vram_hscroll ; update HScroll values
		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites ; update sprite attribute table
		
		bsr.w	ProcessDMA				; process pending DMAs
		bsr.w	SoundDriverInput			; update sound

		startZ80
		
		; copy camera position variables to their duplicates used by DrawTilesWhenMoving
		movem.l	(v_camera_x_pos).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_copy).w
		movem.l	(v_camera_x_pos_p2).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_p2_copy).w
		movem.l	(v_fg_redraw_direction).w,d0-d3
		movem.l	d0-d3,(v_fg_redraw_direction_copy).w
		move.l	(v_fg_y_pos_vsram_p2).w,(v_hblank_fg_y_pos_vsram_p2).w

		cmpi.b	#92,(v_vdp_hint_line).w			; is HBlank set to run on scanline 92 or lower?
		bcc.s	DrawTiles_LevelGfx_HUD_PLC		; if so, branch
		move.b	#1,(f_hblank_run_snd).w			; set flag to run sound driver on HBlank
		rts	

; ---------------------------------------------------------------------------
; Subroutine to	update fg/bg, run tile animations, HUD and and decompress up
; to 3 cells of Nemesis graphics
; ---------------------------------------------------------------------------
; Do_Updates:
DrawTiles_LevelGfx_HUD_PLC:						
		jsrto	DrawTilesWhenMoving,JmpTo_DrawTilesWhenMoving
		jsr	HUD_Update
		bsr.w	ProcessPLC2
		tst.w	(v_countdown).w
		beq.w	.end
		subq.w	#1,(v_countdown).w

	.end:				
		rts	

; ===========================================================================
VBlank_Pause_SpecialStage:				
		stopZ80
		waitz80

		bsr.w	ReadJoypads
		jsr	(SoundDriverInput).l			; can be shortened to bsr.w
		tst.b	(v_ss_last_alt_hscroll_buffer).w	; which HScroll buffer was used on the last frame?
		beq.s	.primarybuffer				; if it was the primary one, branch
		
	;.secondarybuffer:
		dma v_ss_hscroll_buffer_2,sizeof_vram_hscroll,vram_hscroll
		bra.s	.end
; ===========================================================================

	.primarybuffer:
		dma v_ss_hscroll_buffer_1,sizeof_vram_hscroll,vram_hscroll

	.end:				
		startZ80
		rts	
; ===========================================================================

VBlank_SpecialStage:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		bsr.w	SS_Set_VScroll				; update VScroll values
		dma v_pal_dry,sizeof_pal_all,cram		; DMA normal palette to CRAM
		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites ; update sprite attribute table
	
		tst.b	(v_ss_alt_hscroll_buffer).w		; which HScroll buffer was used on the last frame?
		beq.s	.primarybuffer				; if it was the primary one, branch

		dma v_ss_hscroll_buffer_2,sizeof_vram_hscroll,vram_hscroll
		bra.s	.continue
; ===========================================================================

	.primarybuffer:
		dma v_ss_hscroll_buffer_1,sizeof_vram_hscroll,vram_hscroll

	.continue:				
		tst.b	(v_ss_track_orientation).w		; is the current track frame flipped?
		beq.s	.not_flipped				; if not, branch
		moveq	#0,d0
		move.b	(v_ss_track_drawing_index).w,d0		; get drawing position
		cmpi.b	#4,d0					; have we finished drawing and streaming track frame?
		bge.s	.not_flipped				; if so, branch (nothing to draw)
		add.b	d0,d0					; convert to index
		tst.b	(f_ss_alternate_fg_table).w		; are we using the primary FG table? [(v_ss_track_drawing_index) * 2] = subroutine
		beq.s	.transfer_table				; if not, branch
		addi_.w	#8,d0					; we're using the secondary FG table ; ([(v_ss_track_drawing_index) * 2] + 8) = subroutine

	.transfer_table:				
		move.w	.SS_FG_Transfer_Table_Index(pc,d0.w),d0
		jsr	.SS_FG_Transfer_Table_Index(pc,d0.w)	; jsr to relevant transfer DMA sub

	.not_flipped:						
		bsr.w	SS_Run_Animation_Timers
		addi_.b	#1,(v_ss_track_drawing_index).w		; run track timer
		move.b	(v_ss_track_drawing_index).w,d0		; get new timer value
		cmp.b	d1,d0					; is it less than the player animation timer?
		blt.s	.tracktrans_done			; if so, branch
		move.b	#0,(v_ss_track_drawing_index).w		; start drawing new frame
		lea	(vdp_control_port).l,a6	
		tst.b	(f_ss_alternate_fg_table).w		; are we using the primary FG table?
		beq.s	.secondarybuffer			; if not, branch
		move.w 	#vdp_fg_nametable|(vram_ss_fg1>>10),(a6) ; primary FG plane table starts at $C000
		bra.s	.switchtables
; ===========================================================================
.SS_FG_Transfer_Table_Index:					; SS_PNTA_Transfer_Table: off_97A
		index offset(*)

		ptr SS_FGTblTrans_2_0		
		ptr SS_FGTblTrans_2_1
		ptr SS_FGTblTrans_2_2
		ptr SS_FGTblTrans_2_3
		ptr SS_FGTblTrans_1_0
		ptr SS_FGTblTrans_1_1
		ptr SS_FGTblTrans_1_2
		ptr SS_FGTblTrans_1_3
; ===========================================================================
	.secondarybuffer:
		move.w 	#vdp_fg_nametable|(vram_ss_fg2>>10),(a6) ; secondary FG plane table starts at $C000

	.switchtables:				
		eori.b	#1,(f_ss_alternate_fg_table).w		; toggle the FG table flag

	.tracktrans_done:				
		bsr.w	ProcessDMA				; process pending DMAs
		jsr	(SoundDriverInput).l			; update sound
		startZ80
		bsr.w	ProcessPLC2
		tst.w	(v_countdown).w
		beq.w	.end
		subq.w	#1,(v_countdown).w

	.end:				
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Each of these functions copies one fourth of the FG plane table into VRAM
; from a buffer in main RAM. $700 bytes are copied each frame, with the target
; area in VRAM depending on the current drawing position.
; ---------------------------------------------------------------------------
SS_FGTblTrans_1_0:				
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg1
		rts	
; ===========================================================================
SS_FGTblTrans_1_1:
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg1+sizeof_v_ss_fg_buffer
		rts	
; ===========================================================================
SS_FGTblTrans_1_2:
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg1+(sizeof_v_ss_fg_buffer*2)
		rts	
; ===========================================================================
SS_FGTblTrans_1_3:
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg1+(sizeof_v_ss_fg_buffer*3)
		rts	
; ===========================================================================
SS_FGTblTrans_2_0:
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg2
		rts	
; ===========================================================================
SS_FGTblTrans_2_1:
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg2+sizeof_v_ss_fg_buffer		
		rts	
; ===========================================================================
SS_FGTblTrans_2_2:
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg2+(sizeof_v_ss_fg_buffer*2)
		rts	
; ===========================================================================

SS_FGTblTrans_2_3:				
		dma v_ss_fg_buffer,sizeof_v_ss_fg_buffer,vram_ss_fg2+(sizeof_v_ss_fg_buffer*3)
		rts	
; ===========================================================================

SS_Set_VScroll:				
		move.w	(vdp_control_port).l,d0
		vdp_comm.l	move,$0000,vsram,write,(vdp_control_port).l ; set VDP to VSRAM write
		move.l	(v_fg_y_pos_vsram).w,(vdp_data_port).l
		rts	

; ===========================================================================

SS_Run_Animation_Timers:				
		move.w	(v_ss_cur_speed_factor).w,d0		; get current speed factor
		cmp.w	(v_ss_new_speed_factor).w,d0		; has the speed factor changed?
		beq.s	.factorchange				; if it has, branch
		move.l	(v_ss_new_speed_factor).w,(v_ss_cur_speed_factor).w ; save new speed factor
		move.b	#0,(v_ss_track_duration_timer).w	; reset timer

	.factorchange:				
		subi_.b	#1,(v_ss_track_duration_timer).w	; run track timer
		bgt.s	.not_expired				; if it has not expired, branch
		lea	(SS_Anim_Base_Duration).l,a0		; load duration array (could be PC relative)
		move.w	(v_ss_cur_speed_factor).w,d0		; current speed factor is the index
		lsr.w	#1,d0
		move.b	(a0,d0.w),d1				; get new duration value
		move.b	d1,(v_ss_player_anim_frame_timer).w	; new player animation length (later halved)
		move.b	d1,(v_ss_track_duration_timer).w	; new track timer
		subq.b	#1,(v_ss_player_anim_frame_timer).w	; subtract 1
		rts	
; ===========================================================================

	.not_expired:				
		move.b	(v_ss_player_anim_frame_timer).w,d1
		addq.b	#1,d1
		rts	

; ===========================================================================
SS_Anim_Base_Duration:	
		dc.b $3C					; 0 
		dc.b $1E					; 1
		dc.b  $F					; 2
		dc.b  $A					; 3
		dc.b   8					; 4
		dc.b   6					; 5
		dc.b   5					; 6
		dc.b   0					; 7
; ===========================================================================

VBlank_CtrlDMA:				
		stopZ80
		waitz80
		jsr	(ProcessDMA).l			; why jsr? every other call to this in the VBlank routines is a bsr.w
		startZ80
		rts	
; ===========================================================================

VBlank_TitleCard:				
		stopZ80
		waitz80

		bsr.w	ReadJoypads
		tst.b	(f_water_pal_full).w			; is water covering the entire screen?
		bne.s	.allwater				; if so, branch

		dma	v_pal_dry,sizeof_pal_all,cram		; update main palette		

		bra.s	.waterbelow
; ===========================================================================

	.allwater:				
		dma	v_pal_water,sizeof_pal_all,cram		; update water palette	

	.waterbelow:			
		move.w	(v_vdp_hint_counter).w,(a5)

		dma v_hscroll_buffer,sizeof_vram_hscroll,vram_hscroll ; update HScroll values
		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites ; update sprite attribute table

		bsr.w	ProcessDMA
		jsr	(DrawLevelTitleCard).l
		jsr	(SoundDriverInput).l			; can be optimized to bsr.w

		startZ80

		movem.l	(v_camera_x_pos).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_copy).w
		movem.l	(v_fg_redraw_direction).w,d0-d1
		movem.l	d0-d1,(v_fg_redraw_direction_copy).w
		move.l	(v_fg_y_pos_vsram_p2).w,(v_hblank_fg_y_pos_vsram_p2).w
		bsr.w	ProcessPLC
		rts	
; ===========================================================================

VBlank_UnusedE:				
		bsr.w	ReadPad_Palette_Sprites_HScroll
		addq.b	#1,(v_vblank_0e_counter).w
		move.b	#id_VBlank_UnusedE,(v_vblank_routine).w
		rts	
; ===========================================================================

VBlank_Fade:				
		bsr.w	ReadPad_Palette_Sprites_HScroll
		move.w	(v_vdp_hint_counter).w,(a5)
		bra.w	ProcessPLC
; ===========================================================================

VBlank_Ending:				
		stopZ80
		waitz80

		bsr.w	ReadJoypads

		dma	v_pal_dry,sizeof_pal_all,cram		; update main palette		
		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites ; update sprite attribute table
		dma v_hscroll_buffer,sizeof_vram_hscroll,vram_hscroll ; update HScroll values

		bsr.w	ProcessDMA
		bsr.w	SoundDriverInput
		movem.l	(v_camera_x_pos).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_copy).w
		movem.l	(v_fg_redraw_direction).w,d0-d3
		movem.l	d0-d3,(v_fg_redraw_direction_copy).w
		jsrto	DrawTilesWhenMoving,JmpTo_DrawTilesWhenMoving

		startZ80

		move.w	(v_ending_vblank_sub).w,d0
		beq.s	.end
		clr.w	(v_ending_vblank_sub).w
		move.w	VBlank_Ending_DMA_Index-2(pc,d0.w),d0	; if index is zero, return
		jsr	VBlank_Ending_DMA_Index(pc,d0.w)

	.end:				
		rts	
; ===========================================================================
VBlank_Ending_DMA_Index:	index offset(*)
		ptr VBlank_Ending_ClearForegound		; 0 			
		ptr VBlank_Ending_VDP_Setup			; 1
; ===========================================================================

VBlank_Ending_ClearForegound:				
		dma_fill	0,sizeof_vram_planetable_64x64,vram_ending_fg
		rts	
; ===========================================================================

VBlank_Ending_VDP_Setup:				
		dma_fill	0,sizeof_vram_planetable_64x64,vram_ending_bg2
		dma_fill	0,sizeof_vram_planetable_64x64,vram_ending_fg
		
		lea	(vdp_control_port).l,a6			; could just use a5 here, as that was set by the preceding DMA fill
		move.w	#vdp_full_vscroll|vdp_full_hscroll,(a6)	; full VScroll and HScroll
		move.w	#vdp_bg_nametable+(vram_ending_bg2>>13),(a6) ; BG table 2 starts at $4000
		move.w	#vdp_plane_height_64|vdp_plane_width_64,(a6) ; 64x64 plane table size
		lea	(v_128x128_tiles).l,a1
		vdp_comm.l	move,(vram_ending_fg+((sizeof_vram_row_64*$21)+(2*$16))),vram,write,d0 ; VRAM write, starting at $D0AC (row $21, column $16)

		moveq	#23-1,d1
		moveq	#15-1,d2
		jsrto	TilemapToVRAM,TilemapToVRAM		; unnecessarily changed from bsr.w to jsr in REV02
		rts	
; ===========================================================================

VBlank_Menu:				
		stopZ80
		waitz80

		bsr.w	ReadJoypads

		dma	v_pal_dry,sizeof_pal_all,cram		; update main palette
		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites ; update sprite attribute table
		dma v_hscroll_buffer,sizeof_vram_hscroll,vram_hscroll ; update H-scroll values

		bsr.w	ProcessDMA				; perform any queued DMAs
		bsr.w	SoundDriverInput			; update sound
		startZ80
		bsr.w	ProcessPLC				; process any pending PLCs
		tst.w	(v_countdown).w
		beq.w	.end
		subq.w	#1,(v_countdown).w

	.end:
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to read joypad and DMA palettes, sprite table and hscroll table
; ---------------------------------------------------------------------------
ReadPad_Palette_Sprites_HScroll:
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		tst.b	(f_water_pal_full).w
		bne.s	.allwater

		dma	v_pal_dry,sizeof_pal_all,cram		; update main palette

		bra.s	.waterbelow
; ===========================================================================

	.allwater:				
		dma	v_pal_water,sizeof_pal_all,cram		; update water palette

	.waterbelow:				
		dma	v_sprite_buffer,sizeof_vram_sprites,vram_sprites ; update sprite attribute table
		dma v_hscroll_buffer,sizeof_vram_hscroll,vram_hscroll ; update H-scroll values

		bsr.w	SoundDriverInput
		startZ80
		rts	

; ===========================================================================

HBlank:				
		tst.w	(f_hblank).w				; is HBlank set to run (water level or 2P mode)?
		beq.w	.end					; if not, exit
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.w	HBlank_PalToCRAM			; if not, branch (change to water palette mid-frame)
		move.w	#0,(f_hblank).w
		pushr.l	a5
		pushr.l	d0

	.wait_hblank1:				
		move.w	(vdp_control_port).l,d0			; get status register
		andi.w	#hblank_bit<<1,d0			; %00000100; is hblank_bit set?
		beq.s	.wait_hblank1				; if not, loop until it is

		; Switch to drawing Player 2's half of the screen.
		disable_display
		move.w	#vdp_fg_nametable|(vram_fg_2p>>10),(VDP_control_port).l ; FG plane table starts at $A000
		vdp_comm.l	move,$0000,vsram,write,(VDP_control_port).l ; set VDP to VSRAM write
		move.l	(v_hblank_fg_y_pos_vsram_p2).w,(vdp_data_port).l ; update VSRAM

		stopZ80
		waitz80

		dma v_sprite_queue_2,sizeof_vram_sprites,vram_sprites ; upload sprite table for player 1's half of screen

		startZ80

	.wait_hblank2:				
		move.w	(vdp_control_port).l,d0			; get status register
		andi.w	#hblank_bit<<1,d0			; %00000100; is hblank_bit set?
		beq.s	.wait_hblank2				; if not, loop until it is

		enable_display
		popr.l	d0
		popr.l	a5

	.end:				
		rte	
; ===========================================================================

HBlank_PalToCRAM:				
		disable_ints
		move.w	#0,(f_hblank).w
		pushr.l	a0-a1
		lea	(vdp_data_port).l,a1
		lea	(v_pal_water).w,a0
		vdp_comm.l	move,$0000,cram,write,vdp_control_port-vdp_data_port(a1) ; set VDP to CRAM write,
		rept 32
		move.l	(a0)+,(a1)				; move water palette to CRAM (all 64 colors at once)
		endr
		move.w	#vdp_hint_counter|(screen_height-1),vdp_control_port-vdp_data_port(a1) ; horizontal interupt every 224th line
		popr	a0-a1
		tst.b	(f_hblank_run_snd).w
		bne.s	.do_updates
		rte	
; ===========================================================================

	.do_updates:				
		clr.b	(f_hblank_run_snd).w
		pushr.l	d0-a6
		bsr.w	DrawTiles_LevelGfx_HUD_PLC
		popr	d0-a6
		rte	

; ===========================================================================

SoundDriverInput:							
		lea	(v_soundqueue&$00FFFFFF).l,a0
		lea	(z80_ram+z_abs_vars).l,a1		; $A01B80

		cmpi.b	#$80,z_soundqueue(a1)			; is sound driver processing a previous sound request?
		bne.s	.doSFX					; if so, branch; we'll try again on the next VBlank

		_move.b	music_0(a0),d0				; is there anything in music queue 0?
		beq.s	.checkmusic2				; if not, branch
		_clr.b	music_0(a0)				; clear queue slot
		bra.s	.playmusic
; ===========================================================================

	.checkmusic2:				
		move.b	music_1(a0),d0				; is there anything in music queue 1?
		beq.s	.doSFX					; if not, branch
		clr.b	music_1(a0)				; clear queue slot

	.playmusic:	
		; If this is 'cmd_Pause' or 'cmd_Unpause', then this isn't a real
		; sound ID, and it shouldn't be passed to the driver. Instead, it
		; should be used here to manually set the driver's pause flag.			
		move.b	d0,d1
		subi.b	#cmd_Pause,d1				; is it the pause command?
		bcs.s	.notpause				; if not, branch
		addi.b	#$7F,d1			
		move.b	d1,f_pause_sound(a1)
		bra.s	.doSFX
; ===========================================================================

	.notpause:				
		move.b	d0,z_soundqueue(a1)			; send the music's sound id to the driver

	.doSFX:	
		; process the SFX queue
    if FixBugs
		moveq	#3-1,d1
    else
		; This is too high: there is only room for three bytes in the
		; driver's queue. This causes the first byte of 'v_music_voice_table' to be
		; overwritten.
		moveq	#4-1,d1
    endc

	.loop:				
		move.b	sfx_0(a0,d1.w),d0			; is a sound queued in this slot?
		beq.s	.skip					; if not, branch
		tst.b	z_queue_0(a1,d1.w)			; is this slot in the driver's queue occupied?
		bne.s	.skip					; if so, branch
		clr.b	sfx_0(a0,d1.w)				; remove this sound from the 68k queue...
		move.b	d0,z_queue_0(a1,d1.w)			; ..and place it in the Z80 queue

	.skip:				
		dbf	d1,.loop				; loop until all three queues have been processed
		rts	


	if RemoveJmpTos=0
JmpTo_DrawTilesWhenMoving:				
		jmp	DrawTilesWhenMoving
JmpTo_SegaScreen_VBlank:				
		jmp	SegaScreen_VBlank

		align 4
	endc
	
; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
;	uses d0
; ---------------------------------------------------------------------------

JoypadInit:
		stopZ80						; unnecessary, this is a workaround for an I/O controller
		waitz80						; bug exposed only by very early mask ROM cartridges
		moveq	#$40,d0
		move.b	d0,(port_1_control).l			; init port 1 (joypad 1)
		move.b	d0,(port_2_control).l			; init port 2 (joypad 2)
		move.b	d0,(port_e_control).l			; init port 3 (EXT port on Model 1 VA6 and older)
		startZ80
		rts	


; ---------------------------------------------------------------------------
; Subroutine to read joypad input, and send it to the RAM
; output:
;	d0 = actual joypad input (SACBRLDU)
;	d1 = actual joypad input, new since last frame only (SACBRLDU)
;	a1 = port_1_data ($A10003)
;	uses a0
; ---------------------------------------------------------------------------


ReadJoypads:
		lea	(v_joypad_hold_actual).w,a0		; address where joypad states are written
		lea	(port_1_data).l,a1			; first joypad port
		bsr.s	.read					; do the first joypad
		addq.w	#2,a1					; do the second	joypad

	.read:
		move.b	#0,(a1)					; set port to read 00SA00DU
		nop	
		nop	
		move.b	(a1),d0					; d0 = 00SA00DU
		lsl.b	#2,d0					; d0 = SA00DU00
		andi.b	#$C0,d0					; d0 = SA000000
		move.b	#$40,(a1)				; set port to read 00CBRLDU
		nop	
		nop	
		move.b	(a1),d1					; d1 = 00CBRLDU
		andi.b	#$3F,d1					; d1 = 00CBRLDU
		or.b	d1,d0					; d0 = SACBRLDU
		not.b	d0					; invert bits, so that 1 = pressed
		move.b	(a0),d1					; d1 = previous joypad state
		eor.b	d0,d1
		move.b	d0,(a0)+				; v_joypad_hold_actual = SACBRLDU
		and.b	d0,d1					; d1 = new joypad inputs only
		move.b	d1,(a0)+				; v_joypad_press_actual = SACBRLDU (new only)
		rts



; ===========================================================================

VDPSetupGame:				
		lea	(vdp_control_port).l,a0
		lea	(vdp_data_port).l,a1
		lea	(VDPSetupArray).l,a2
		moveq	#((sizeof_VDPSetupArray)/2)-1,d7

	.setreg:
		move.w	(a2)+,(a0)
		dbf	d7,.setreg				; set the VDP registers

		move.w	(VDPSetupArray+2).l,d0
		move.w	d0,(v_vdp_mode_buffer).w		; save $8134 to buffer for later use
		move.w	#vdp_hint_counter+(screen_height-1),(v_vdp_hint_counter).w ; H-Blank every 224th scanline
		moveq	#0,d0

		vdp_comm.l	move,$0000,vsram,write,(VDP_control_port).l ; clear the first longword of VSRAM (as that is all the game uses)
		move.w	d0,(a1)
		move.w	d0,(a1)
		
		vdp_comm.l	move,$0000,cram,write,(VDP_control_port).l
		move.w	#(sizeof_pal_all/2)-1,d7

	.loop_cram:
		move.w	d0,(a1)					; clear CRAM
		dbf	d7,.loop_cram

		clr.l	(v_fg_y_pos_vsram).w			; clear VSRAM buffer
		clr.l	(v_unused_ss).w
		move.l	d1,-(sp)
		dma_fill	0,$100000,vram_start		; clear entire VRAM
		move.l	(sp)+,d1
		rts	

; ===========================================================================
VDPSetupArray:	
		dc.w vdp_md_color				; $8004 ; normal color mode, horizontal interrupts disabled
		dc.w vdp_enable_vint|vdp_enable_dma|vdp_ntsc_display|vdp_md_display ; $8134, Mode 5, DMA and vertical interrupts enabled 
		dc.w vdp_fg_nametable+(vram_fg>>10)		; FG nametable at $C000
		dc.w vdp_window_nametable+(vram_window>>10)	; window nametable at $A000 (unused)
		dc.w vdp_bg_nametable+(vram_bg>>13)		; BG nametable at $E000
		dc.w vdp_sprite_table+(vram_sprites>>9)		; sprite attribute table at $F800
		dc.w vdp_sprite_table2				; unused
		dc.w vdp_bg_color+0				; VDP BG color (palete line 0 color 0)
		dc.w vdp_sms_hscroll				; unused
		dc.w vdp_sms_vscroll				; unused
		dc.w vdp_hint_counter				; default horizontal interrupt register
		dc.w vdp_full_vscroll|vdp_full_hscroll		; $8B00 ; full-screen vertical/horizontal scrolling
		dc.w vdp_320px_screen_width			; $8C81 ; 40-cell display mode
		dc.w vdp_hscroll_table+(vram_hscroll/$400)	; HScroll table at $FC00
		dc.w vdp_nametable_hi				; unused
		dc.w vdp_auto_inc+2				; set VDP increment size
		dc.w vdp_plane_width_64|vdp_plane_height_32	; $9001 ; 64x32 cell plane size
		dc.w vdp_window_x_pos				; window horizontal position
		dc.w vdp_window_y_pos				; window horizontal position
		arraysize	VDPSetupArray
; ===========================================================================


ClearScreen:		
		stopZ80
		waitZ80

		dma_fill	0,$40,vram_start		; clear first $40 bytes of VRAM
		dma_fill	0,sizeof_vram_planetable_64x32,vram_fg ; clear foreground nametable
		dma_fill	0,sizeof_vram_planetable_64x32,vram_bg ; clear background nametable

		tst.w	(f_two_player).w			; is it two-player mode?
		beq.s	.not2P					; if not, branch

		dma_fill	0,sizeof_vram_planetable_64x32,vram_fg_2p ; clear player 2's foreground nametable

.not2P:				
		clr.l	(v_fg_y_pos_vsram).w			; clear VSRAM buffer
		clr.l	(v_unused_ss).w

; clear the sprite and hscroll buffers
	if FixBugs
		clear_ram	v_sprite_buffer,v_sprite_buffer_end
		clear_ram	hscroll,hscroll_end
	else
; These '+4's shouldn't be here; clearRAM accidentally clears an additional 4 bytes
		clear_ram	v_sprite_buffer,v_sprite_buffer_end+4
		clear_ram	hscroll,hscroll_end+4
	endc
		startZ80
		rts	


; ===========================================================================

JmpTo_SoundDriverLoad:				
		nop	
		jmp	SoundDriverLoad

; ===========================================================================
; unused Sonic 1 leftover - subroutine to load the DAC driver
; DacDriverLoadS1:
		stopZ80
		resetZ80_release
		lea	(z80_ram).l,a1
		move.b	#$F3,(a1)+				; di
		move.b	#$F3,(a1)+				; di
		move.b	#$C3,(a1)+				; jp
		move.b	#0,(a1)+				; jp address low byte
		move.b	#0,(a1)+				; jp address high byte
		resetZ80_assert
		nop	
		nop	
		nop	
		nop	
		resetZ80_release
		startZ80					; start the Z80
		rts	

; ===========================================================================
; Despite the name, this can actually be used for playing sounds.
; The original source code called this 'bgmset'.
; sub_135E:
PlayMusic:							
		tst.b	(v_soundqueue+music_0).w		; is there something already in music queue 0?
		bne.s	.queue1					; if so, branch
		move.b	d0,(v_soundqueue+music_0).w		; queue sound in music queue 0
		rts	

	.queue1:				
		move.b	d0,(v_soundqueue+music_1).w		; queue sound in music queue 1
		rts	


; ===========================================================================
; Despite the name, this can actually be used for playing music.
; The original source code called this 'sfxset'.
; sub_1370
PlaySound:				
; Curiously, none of these functions write to 'v_soundqueue+sfx_2'...					
		move.b	d0,(v_soundqueue+sfx_0).w		; queue sound in SFX queue 0
		rts	

; ===========================================================================
; Despite the name, this can actually be used for playing music.
; Unfortunately, the original name for this is not known.
; sub_1376: PlaySoundStereo:
PlaySound2:					
		move.b	d0,(v_soundqueue+sfx_1).w		; queue sound in SFX queue 1
		rts	

; ===========================================================================
; Play a sound if the source is on-screen.
; sub_137C:
PlaySoundLocal:				
		tst.b	ost_render(a0)				; is the object requesting this SFX on-screen?
		bpl.s	.exit					; if not, exit
		move.b	d0,(v_soundqueue+sfx_0).w		; queue sound in SFX queue 0

	.exit:				
		rts	


; ===========================================================================

; sub_1388
PauseGame:
		nop	
		tst.b	(v_lives).w				; dooes player 1 have any lives left?
		beq.w	Unpause					; if not, branch
	if FixBugs
; The game still lets you pause if player 2 got a Game Over, or if
; either player got a Time Over. The following code fixes this.
		tst.b	(v_lives_p2).w				; does player 2 have any lives left?
		beq.w	Unpause					; if not, branch
		tst.b	(f_time_over).w				; did player 1 get a time over?
		bne.w	Unpause					; if not, branch
		tst.b   (f_time_over_p2).w			; did player 2 get a time over?
		bne.w   Unpause					; if not, branch
	endc	
		tst.w	(f_pause).w				; is game already paused?
		bne.s	.paused					; if yes, branch			
		move.b	(v_joypad_press_actual).w,d0		; get joypad states
		or.b	(v_joypad2_press_actual).w,d0	
		andi.b	#btnStart,d0				; is start button pressed (either player)?
		beq.s	Pause_DoNothing				; if not, branch

	.paused:				
		move.w	#1,(f_pause).w				; set pause flag (also stops palette/gfx animations, time)
		move.b	#cmd_Pause,(v_soundqueue+music_0).w	; pause music

; loc_13B2:
Pause_Loop:				
		move.b	#id_VBlank_Pause,(v_vblank_routine).w	
		bsr.w	WaitForVBlank
		tst.b	(f_slowmotion_cheat).w			; is slow-motion cheat on?
		beq.s	.chk_start				; if not, branch
		btst	#bitA,(v_joypad_press_actual).w		; is button A pressed?
		beq.s	.chk_bc					; if not, branch
		move.b	#id_Title,(v_gamemode).w		; return to title screen
		nop						; ...pointless
		bra.s	Unpause_Music
; ===========================================================================
; loc_13D4:
	.chk_bc:				
		btst	#bitB,(v_joypad_hold_actual).w		; is button B held?
		bne.s	Pause_SlowMo				; if so, branch
		btst	#bitC,(v_joypad_press_actual).w		; is button C pressed?
		bne.s	Pause_SlowMo				; if so, branch

; loc_13E4:
	.chk_start:				
		move.b	(v_joypad_press_actual).w,d0		; get joypad states
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#btnStart,d0				; is start button pressed (either player)?
		beq.s	Pause_Loop				; if not, branch

; loc_13F2:
	Unpause_Music:				
		move.b	#cmd_Unpause,(v_soundqueue+music_0).w	; unpause the music

	Unpause:				
		move.w	#0,(f_pause).w				; unpause the game
; return_13FE:
	Pause_DoNothing:				
		rts	
; ===========================================================================
; loc_1400:
	Pause_SlowMo:				
		move.w	#1,(f_pause).w				; keep game paused
		move.b	#cmd_Unpause,(v_soundqueue+music_0).w	; unpause the music
		rts						; exit. the game will now run for one frame before returning to the pause loop


; ---------------------------------------------------------------------------
; Subroutine to	copy a tile map from RAM to VRAM fg/bg nametable

; input:
;	d0.l = VRAM fg/bg nametable address (as VDP command)
;	d1.w = width-1 (cells)
;	d2.w = height-1 (cells)
;	a1 = tile map address

; output:
;	a6 = vdp_data_port ($C00000)

;	uses d0.l, d2.w, d3.w, d4.l, a1
; ---------------------------------------------------------------------------

; sub_140E: ShowVDPGraphics: PlaneMapToVRAM: PlaneMapToVRAM_H40:
TilemapToVRAM:							
		lea	(vdp_data_port).l,a6
		move.l	#sizeof_vram_row_64<<16,d4		; d4 = $800000

	.loop_row:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)	; move d0 to vdp_control_port
		move.w	d1,d3

	.loop_cell:				
		move.w	(a1)+,(a6)				; write value to nametable
		dbf	d3,.loop_cell				; next tile
		add.l	d4,d0					; goto next line
		dbf	d2,.loop_row				; next line
		rts	

; ---------------------------------------------------------------------------
; Alternate subroutine to transfer a plane map to VRAM
; This code appears twice in the ROM: a duplicate is used for the SEGA screen 
; ---------------------------------------------------------------------------
; sub_142E: ShowVDPGraphics2: PlaneMapToVRAM2: PlaneMapToVRAM_H80_SpecialStage:
TilemapToVRAM_128_SS:				
		lea	(vdp_data_port).l,a6
		move.l	#sizeof_vram_row_128<<16,d4		; d4 = $1000000

	.loop_row:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)	; move d0 to vdp_control_port
		move.w	d1,d3

	.loop_cell:				
		move.w	(a1)+,(a6)				; write value to nametable
		dbf	d3,.loop_cell				; next tile
		add.l	d4,d0					; goto next line
		dbf	d2,.loop_row				; next line
		rts	


; ---------------------------------------------------------------------------
; Subroutine to add an item to the DMA queue

; input:
;	d1.l = source
;	d2.w = destinatio
;	d3.w = length

;  uses a1 
; ---------------------------------------------------------------------------
; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue: QueueDMATransfer
AddDMA:				
		movea.l	(v_dma_queue_slot).w,a1
		cmpa.w	#v_dma_queue_slot,a1			; are we at the end of the buffer?
		beq.s	.exit					; if so, exit; there's no more room in the buffer
		
		move.w	#vdp_dma_length_low,d0			; specify DMA transfer length low byte
		move.b	d3,d0
		move.w	d0,(a1)+
		
		move.w	#vdp_dma_length_hi,d0			; specify DMA transfer length high byte
		lsr.w	#8,d3
		move.b	d3,d0
		move.w	d0,(a1)+				; store command
		
		move.w	#vdp_dma_source_low,d0			; specify source address low byte
		lsr.l	#1,d1
		move.b	d1,d0
		move.w	d0,(a1)+				; store command
		
		move.w	#vdp_dma_source_mid,d0			; specify source address middle byte
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+				; store command
		
		move.w	#vdp_dma_source_hi,d0			; command to specify source address high byte
		lsr.l	#8,d1
	if FixBugs	
		andi.b	#$7F,d1		; this instruction safely allows source to be in RAM; S3K added this
	endc
		move.b	d1,d0
		move.w	d0,(a1)+				; store command
		
		andi.l	#$FFFF,d2				; specify destination address and start DMA
		lsl.l	#2,d2
		lsr.w	#2,d2
		swap	d2 
		vdp_comm.l	oxi,$0000,vram,dma,d2		; set bits to specify VRAM transfer; oxi = AXM68K mnemonic for ori
		move.l	d2,(a1)+				; store command
		
		move.l	a1,(v_dma_queue_slot).w			; set the next free slot address
		cmpa.w	#v_dma_queue_slot,a1			; are we at the end of the buffer?
		beq.s	.exit					; if so, exit
		move.w	#0,(a1)					; put a stop token at the end of the used part of the buffer
	
	; return_14AA: QueueDMATransfer_Done:
	.exit:				
		rts	

; ---------------------------------------------------------------------------
; Subroutine to run all items stored in the DMA queue and reset the queue

; output:
;	a5 = vdp_control_port

;  uses d0.w, a1, a5
; ---------------------------------------------------------------------------
; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue: ; ProcessDMAQueue:
ProcessDMA:							
		lea	(vdp_control_port).l,a5
		lea	(v_dma_queue).w,a1

	; loc_14B6: ProcessDMAQueue_Loop:
	.process_dma_loop:
		move.w	(a1)+,d0
		beq.s	.done					; exit if we reached a stop token
		move.w	d0,(a5)					; transfer length
		move.w	(a1)+,(a5)				; transfer length
		move.w	(a1)+,(a5)				; source address
		move.w	(a1)+,(a5)				; source address
		move.w	(a1)+,(a5)				; source address
		move.w	(a1)+,(a5)				; destination
		move.w	(a1)+,(a5)				; destination
		cmpa.w	#v_dma_queue_slot,a1			; have we reached the end of the buffer?
		bne.s	.process_dma_loop			; if not, loop

	.done:
		move.w	#0,(v_dma_queue).w
		move.l	#v_dma_queue,(v_dma_queue_slot).w
		rts	


; ---------------------------------------------------------------------------
; Nemesis decompression	subroutine, decompresses art directly to VRAM

; input:
;	a0 = art source address

; usage:
;	locVRAM	destination
;	lea	(source).l,a0
;	bsr.w	NemDec

; See http://info.sonicretro.org/Nemesis_compression for format explanation
; ---------------------------------------------------------------------------

NemDec:
		pushr.l	d0-a1/a3-a5
		lea	(NemPCD_WriteRowToVDP).l,a3		; write all data to the same location
		lea	(vdp_data_port).l,a4			; specifically, to the VDP data port
		bra.s	NemDecMain

; ---------------------------------------------------------------------------
; Nemesis decompression subroutine, decompresses art to RAM (unused)

; input:
;	a0 = art source address
;	a4 = destination RAM address
; ---------------------------------------------------------------------------

NemDecToRAM:
		pushr.l	d0-a1/a3-a5
		lea	(NemPCD_WriteRowToRAM).l,a3		; advance to the next location after each write

NemDecMain:
		lea	(v_nem_gfx_buffer).w,a1
		move.w	(a0)+,d2				; get number of patterns
		lsl.w	#1,d2
		bcc.s	.sign_bit_not_set			; branch if the sign bit isn't set
		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3 ; otherwise the file uses XOR mode

	.sign_bit_not_set:
		lsl.w	#2,d2					; get number of 8-pixel rows in the uncompressed data
		movea.w	d2,a5					; and store it in a5 because there aren't any spare data registers
		moveq	#8,d3					; 8 pixels in a pattern row
		moveq	#0,d2
		moveq	#0,d4
		bsr.w	NemDec_BuildCodeTable
		move.b	(a0)+,d5				; get first byte of compressed data
		asl.w	#8,d5					; shift up by a byte
		move.b	(a0)+,d5				; get second byte of compressed data
		move.w	#$10,d6					; set initial shift value
		bsr.s	NemDec_ProcessCompressedData
		popr	d0-a1/a3-a5
		rts

; ---------------------------------------------------------------------------
; Part of the Nemesis decompressor, processes the actual compressed data
; ---------------------------------------------------------------------------

NemDec_ProcessCompressedData:
		move.w	d6,d7
		subq.w	#8,d7					; get shift value
		move.w	d5,d1
		lsr.w	d7,d1					; shift so that high bit of the code is in bit position 7
		cmpi.b	#$FC,d1					; %11111100; are the high 6 bits set?
		bcc.s	NemPCD_InlineData			; if they are, it signifies inline data
		andi.w	#$FF,d1
		add.w	d1,d1
		move.b	(a1,d1.w),d0				; get the length of the code in bits
		ext.w	d0
		sub.w	d0,d6					; subtract from shift value so that the next code is read next time around
		cmpi.w	#9,d6					; does a new byte need to be read?
		bcc.s	.skip_new_byte				; if not, branch
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5				; read next byte

	.skip_new_byte:
		move.b	1(a1,d1.w),d1
		move.w	d1,d0
		andi.w	#$F,d1					; get palette index for pixel
		andi.w	#$F0,d0

NemPCD_ProcessCompressedData:
		lsr.w	#4,d0					; get repeat count

NemPCD_WritePixel:
		lsl.l	#4,d4					; shift up by a nybble
		or.b	d1,d4					; write pixel
		subq.w	#1,d3					; has an entire 8-pixel row been written?
		bne.s	NemPCD_WritePixel_Loop			; if not, loop
		jmp	(a3)					; otherwise, write the row to its destination, by doing a dynamic jump to NemPCD_WriteRowToVDP, NemDec_WriteAndAdvance, NemPCD_WriteRowToVDP_XOR, or NemDec_WriteAndAdvance_XOR

; ===========================================================================

NemPCD_NewRow:
		moveq	#0,d4					; reset row
		moveq	#8,d3					; reset nybble counter

NemPCD_WritePixel_Loop:
		dbf	d0,NemPCD_WritePixel
		bra.s	NemDec_ProcessCompressedData
; ===========================================================================

NemPCD_InlineData:
		subq.w	#6,d6					; 6 bits needed to signal inline data
		cmpi.w	#9,d6
		bcc.s	loc_14E4
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5

	loc_14E4:
		subq.w	#7,d6					; and 7 bits needed for the inline data itself
		move.w	d5,d1
		lsr.w	d6,d1					; shift so that low bit of the code is in bit position 0
		move.w	d1,d0
		andi.w	#$F,d1					; get palette index for pixel
		andi.w	#$70,d0					; high nybble is repeat count for pixel
		cmpi.w	#9,d6
		bcc.s	NemPCD_ProcessCompressedData
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
		bra.s	NemPCD_ProcessCompressedData

; ===========================================================================

NemPCD_WriteRowToVDP:
		move.l	d4,(a4)					; write 8-pixel row
		subq.w	#1,a5
		move.w	a5,d4					; have all the 8-pixel rows been written?
		bne.s	NemPCD_NewRow				; if not, branch
		rts						; otherwise the decompression is finished
; ===========================================================================
NemPCD_WriteRowToVDP_XOR:
		eor.l	d4,d2					; XOR the previous row by the current row
		move.l	d2,(a4)					; and write the result
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemPCD_NewRow
		rts	
; ===========================================================================

NemPCD_WriteRowToRAM:
		move.l	d4,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemPCD_NewRow
		rts	
; ===========================================================================
NemPCD_WriteRowToRAM_XOR:
		eor.l	d4,d2
		move.l	d2,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemPCD_NewRow
		rts	

; ---------------------------------------------------------------------------
; Part of the Nemesis decompressor, builds the code table (in RAM)
; ---------------------------------------------------------------------------

NemDec_BuildCodeTable:
		move.b	(a0)+,d0				; read first byte

NemBCT_ChkEnd:
		cmpi.b	#$FF,d0					; has the end of the code table description been reached?
		bne.s	NemBCT_NewPALIndex			; if not, branch
		rts						; otherwise, this subroutine's work is done
; ===========================================================================

NemBCT_NewPALIndex:
		move.w	d0,d7

NemBCT_Loop:
		move.b	(a0)+,d0				; read next byte
		cmpi.b	#$80,d0					; sign bit being set signifies a new palette index
		bcc.s	NemBCT_ChkEnd				; a bmi could have been used instead of a compare and bcc
		
		move.b	d0,d1
		andi.w	#$F,d7					; get palette index
		andi.w	#$70,d1					; get repeat count for palette index
		or.w	d1,d7					; combine the two
		andi.w	#$F,d0					; get the length of the code in bits
		move.b	d0,d1
		lsl.w	#8,d1
		or.w	d1,d7					; combine with palette index and repeat count to form code table entry
		moveq	#8,d1
		sub.w	d0,d1					; is the code 8 bits long?
		bne.s	NemBCT_ShortCode			; if not, a bit of extra processing is needed
		move.b	(a0)+,d0				; get code
		add.w	d0,d0					; each code gets a word-sized entry in the table
		move.w	d7,(a1,d0.w)				; store the entry for the code
		bra.s	NemBCT_Loop				; repeat
; ===========================================================================

; the Nemesis decompressor uses prefix-free codes (no valid code is a prefix of a longer code)
; e.g. if 10 is a valid 2-bit code, 110 is a valid 3-bit code but 100 isn't
; also, when the actual compressed data is processed the high bit of each code is in bit position 7
; so the code needs to be bit-shifted appropriately over here before being used as a code table index
; additionally, the code needs multiple entries in the table because no masking is done during compressed data processing
; so if 11000 is a valid code then all indices of the form 11000XXX need to have the same entry
NemBCT_ShortCode:
		move.b	(a0)+,d0				; get code
		lsl.w	d1,d0					; get index into code table
		add.w	d0,d0					; shift so that high bit is in bit position 7
		moveq	#1,d5
		lsl.w	d1,d5
		subq.w	#1,d5					; d5 = 2^1

NemBCT_ShortCode_Loop:
		move.w	d7,(a1,d0.w)				; store entry
		addq.w	#2,d0					; increment index
		dbf	d5,NemBCT_ShortCode_Loop		; repeat for required number of entries
		bra.s	NemBCT_Loop

; ===========================================================================
; ---------------------------------------------------------------------------
; WARNING: AddPLC and NewPLC do not check for buffer overruns, and a bug 
; in ProcessPLC_Finish leaves the $10th and final slot unsafe to use. Assuming
; you've enabled FixBugs, DO NOT PUT MORE THAN $10 LOAD REQUESTS IN A LIST!
; If FixBugs is NOT enabled, you can only do $F requests; see the bugfix 
; in ProcessPLC_Finish.
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (to queue pattern load requests)

; input:
;	d0.w = index of PLC list

;	uses d0.w

; usage:
;		moveq	#id_PLC_Explode,d0
;		jsr	AddPLC
; ---------------------------------------------------------------------------
; sub_161E: PLCLoad: LoadPLC:
AddPLC:	
		pushr.l	a1-a2,-(sp)				; save a1/a2 to stack
		lea	(PatternLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1				; jump to relevant PLC
		lea	(v_plc_buffer).w,a2			; PLC buffer space in RAM

	.findspace:				
		tst.l	(a2)					; is first space available?
		beq.s	.copytoRAM				; if yes, branch
		addq.w	#sizeof_plc,a2				; if not, try next space
		bra.s	.findspace				; repeat until space is found (warning: there are $10 spaces, but it may overflow)
; ===========================================================================

.copytoRAM:				
		move.w	(a1)+,d0				; get PLC item count
		bmi.s	.skip					; branch if -1 (i.e. 0 items)

	.loop:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+				; copy PLC to RAM
		dbf	d0,.loop				; repeat for all items in PLC

	.skip:
		popr	a1-a2					; restore a1/a2 from stack
		rts


; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (to queue pattern load requests) and
; clear the PLC buffer

; input:
;	d0 = index of PLC list

; ---------------------------------------------------------------------------
; sub_1650: LoadPLC2:
NewPLC:
		pushr.l	a1-a2					; save a1/a2 to stack
		lea	(PatternLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1				; jump to relevant PLC
		bsr.s	ClearPLC				; erase any data in PLC buffer space
		lea	(v_plc_buffer).w,a2
		move.w	(a1)+,d0				; get PLC item count
		bmi.s	.skip					; branch if -1 (i.e. 0 items)

	.loop:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+				; copy PLC to RAM
		dbf	d0,.loop				; repeat for all items in PLC	(warning: there are $10 spaces, but it may overflow)

	.skip:
		popr	a1-a2					; restore a1/a2 from stack
		rts

; ---------------------------------------------------------------------------
; Subroutine to	clear the pattern load cue buffer
; Similar to the clear_ram macro, except it uses a2 and clr.l

;	uses d0, a2
; ---------------------------------------------------------------------------

ClearPLC:						
		lea	(v_plc_buffer).w,a2			; PLC buffer space in RAM
		moveq	#(((plc_buffer_and_regs_end-plc_buffer_and_regs)/4)-1),d0

	.loop:				
		clr.l	(a2)+
		dbf	d0,.loop
		rts	


; ---------------------------------------------------------------------------
; Subroutine to	check the PLC buffer and begin decompression if it contains
; anything. ProcessPLC handles the actual decompression during VBlank

;	uses d0.l, d1.w, d2.w, d5.l, d6.l, d7.w, a0, a1, a3
; ---------------------------------------------------------------------------

; sub_168A: RunPLC_RAM:
RunPLC:				
		tst.l	(v_plc_buffer).w			; does PLC buffer contain any items?
		beq.s	.exit					; if not, branch
		tst.w	(v_nem_tile_count).w
		bne.s	.exit
		movea.l	(v_plc_buffer).w,a0			; get pointer for Nemesis compressed graphics
		lea_	NemPCD_WriteRowToVDP,a3
		nop
		lea	(v_nem_gfx_buffer).w,a1
		move.w	(a0)+,d2				; get 1st word of Nemesis graphics header
		bpl.s	.normal_mode				; branch if 0-$7FFF
		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3 ; use XOR mode

	.normal_mode:
		andi.w	#$7FFF,d2				; clear highest bit
    if FixBugs=0
		; This is done too early. This variable is also used as a flag to indicate
		; there are PLCs to process, which means that as soon as this
		; variable is set, PLC processing will occur. If an interrupt
		; occurs between here and the end of this function, then
		; the PLC processor will begin despite it not being fully
		; initialized, causing a crash (as can happen in Sonic 1 at the end of LZ1 & 2). 
		; S3K fixes this bug by moving this instruction to the end of the function.		
		move.w	d2,(v_nem_tile_count).w			; load tile count
	endc	
		bsr.w	NemDec_BuildCodeTable
		move.b	(a0)+,d5				; get next byte of header
		asl.w	#8,d5					; move to high byte of word
		move.b	(a0)+,d5				; get final byte of header
		moveq	#$10,d6
		moveq	#0,d0
		move.l	a0,(v_plc_buffer).w			; save pointer to actual compressed data
		move.l	a3,(v_nem_mode_ptr).w			; save pointer to Nemesis normal/XOR code
		move.l	d0,(v_nem_repeat).w
		move.l	d0,(v_nem_pixel).w
		move.l	d0,(v_nem_d2).w
		move.l	d5,(v_nem_header).w
		move.l	d6,(v_nem_shift).w
	if FixBugs
		; See above.
		move.w	d2,(v_nem_tile_count).w			; load tile count
	endc
	
	.exit:
		rts


; ---------------------------------------------------------------------------
; Subroutine to	decompress graphics listed in the PLC buffer

;	uses d0.l, d1.l, d2.l, d3.l, d4.l, d5.l, d6.l, d7.w, a0, a1, a3, a4, a5
; ---------------------------------------------------------------------------

nem_tile_count:	= 6

ProcessPLC:
		tst.w	(v_nem_tile_count).w			; has PLC execution begun?
		beq.w	ProcessPLC_Exit				; if not, branch
		move.w	#nem_tile_count,(v_nem_tile_count_frame).w ; 9 tiles per frame
		moveq	#0,d0
		move.w	(v_plc_buffer_dest).w,d0		; copy VRAM destination to d0
		addi.w	#nem_tile_count*sizeof_cell,(v_plc_buffer_dest).w ; update for next frame
		bra.s	ProcessPLC_Decompress

nem_tile_count:	= 3

ProcessPLC2:
		tst.w	(v_nem_tile_count).w			; has PLC execution begun?
		beq.s	ProcessPLC_Exit				; if not, branch
		move.w	#nem_tile_count,(v_nem_tile_count_frame).w ; 3 tiles per frame
		moveq	#0,d0
		move.w	(v_plc_buffer_dest).w,d0		; copy VRAM destination to d0
		addi.w	#nem_tile_count*sizeof_cell,(v_plc_buffer_dest).w ; update for next frame

ProcessPLC_Decompress:
		lea	(vdp_control_port).l,a4
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0					; convert VRAM address to VDP format
		move.l	d0,(a4)					; set address via control port
		subq.w	#4,a4					; a4 = vdp_data_port
		movea.l	(v_plc_buffer).w,a0			; load pointer for actual compressed data (sans header)
		movea.l	(v_nem_mode_ptr).w,a3
		move.l	(v_nem_repeat).w,d0
		move.l	(v_nem_pixel).w,d1
		move.l	(v_nem_d2).w,d2
		move.l	(v_nem_header).w,d5
		move.l	(v_nem_shift).w,d6
		lea	(v_nem_gfx_buffer).w,a1

	.loop_tile:
		movea.w	#8,a5
		bsr.w	NemPCD_NewRow
		subq.w	#1,(v_nem_tile_count).w			; decrement tile counter
		beq.s	ProcessPLC_Finish			; branch if 0
		subq.w	#1,(v_nem_tile_count_frame).w		; decrement tile per frame counter
		bne.s	.loop_tile				; branch if not 0

		move.l	a0,(v_plc_buffer).w			; save pointer to latest compressed data
		move.l	a3,(v_nem_mode_ptr).w
		move.l	d0,(v_nem_repeat).w
		move.l	d1,(v_nem_pixel).w
		move.l	d2,(v_nem_d2).w
		move.l	d5,(v_nem_header).w
		move.l	d6,(v_nem_shift).w

ProcessPLC_Exit:
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	shift the PLC buffer contents after an entry is processed
; ---------------------------------------------------------------------------
ProcessPLC_Finish:
		lea	(v_plc_buffer).w,a0
		
	if FixBugs
		; Shift the PLC buffer by the exact number of bytes in each cue (6)
		; using paired longword and word moves, and clear the last slot 
		; when finished, fixing the bugs described below. It is also slightly
		; faster than the original code, requiring just 676 cycles instead of
		; of 758.
		lea sizeof_plc(a0),a1				; start of second slot in the queue
   		moveq   #((sizeof_plc_buffer-sizeof_plc)/sizeof_plc)-1,d0 ; $E, number of loops needed to shift everything

	.loop:
		move.l  (a1)+,(a0)+				; shift the first 4 bytes...
		move.w  (a1)+,(a0)+				; ...then the final 2 bytes of the cue to the next slot
		dbf d0,.loop					; loop until entire buffer has been shifted
 
    	moveq   #0,d0
    	move.l  d0,(a0)+					; clear the first longword... 
    	move.w  d0,(a0)+					; ...and the final word of the last cue to prevent it from being overcopied
    	
	else
		; This shifts the PLC buffer using longword moves alone. However,
		; the total amount of data that needs to be shifted ($5A, the size in
		; bytes of $F PLC slots) is not divisible by a longword. 
		; Consequently, only $58 bytes are shifted; the final word
		; (the VRAM offset of the $10th and final cue) is skipped.
		; Additionally, that $10th cue is not cleared, with the result that
		; if it is used, the part that isn't broken will get copied over 
		; until it fills the entire buffer, causing the PLC processor to get stuck 
		; in an infinite loop.
		
		moveq	#((sizeof_plc_buffer-sizeof_plc)/4)-1,d0 ; $15

	.loop:
		move.l	sizeof_plc(a0),(a0)+			; shift contents of PLC buffer up 6 bytes
		dbf	d0,.loop				; repeat until everything has been shifted (but see the bug above)	
	endc
		rts


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	decompress graphics listed in a pattern load cue in a single
; frame

; input:
;	d0.w = index of PLC list

;	uses d0.l, d1.w, a1
; ---------------------------------------------------------------------------

QuickPLC:				
		lea	(PatternLoadCues).l,a1			; load the PLC index
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,d1				; get length of PLC

	.loop:
		movea.l	(a1)+,a0				; get compressed graphics pointer
		moveq	#0,d0
		move.w	(a1)+,d0				; get VRAM address
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(vdp_control_port).l			; converted VRAM address to VDP format
		bsr.w	NemDec					; decompress
		dbf	d1,.loop				; repeat for length of PLC
		rts

; ---------------------------------------------------------------------------
; Enigma decompression algorithm

; input:
;	d0.w = starting art tile (added to each 8x8 before writing to destination)
;	a0 = source address
;	a1 = destination address

;	uses a0

; usage:
;		lea	(source).l,a0
;		lea	(destination).l,a1
;		move.w	#arttile,d0
;		bsr.w	EniDec

; See http://www.segaretro.org/Enigma_compression for format description
; ---------------------------------------------------------------------------

EniDec:
		pushr.l	d0-d7/a1-a5
		movea.w	d0,a3					; store starting art tile
		move.b	(a0)+,d0
		ext.w	d0
		movea.w	d0,a5					; store number of bits in inline copy value
		move.b	(a0)+,d4
		lsl.b	#3,d4					; store PCCVH flags bitfield
		movea.w	(a0)+,a2
		adda.w	a3,a2					; store incremental copy word
		movea.w	(a0)+,a4
		adda.w	a3,a4					; store literal copy word
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5				; get first word in format list
		moveq	#16,d6					; initial shift value

Eni_Loop:
		moveq	#7,d0					; assume a format list entry is 7 bits
		move.w	d6,d7
		sub.w	d0,d7
		move.w	d5,d1
		lsr.w	d7,d1
		andi.w	#$7F,d1					; get format list entry
		move.w	d1,d2					; and copy it
		cmpi.w	#$40,d1					; is the high bit of the entry set?
		bhs.s	.sevenbitentry
		moveq	#6,d0					; if it isn't, the entry is actually 6 bits
		lsr.w	#1,d2

	.sevenbitentry:
		bsr.w	EniDec_FetchByte
		andi.w	#$F,d2					; get repeat count
		lsr.w	#4,d1
		add.w	d1,d1
		jmp	EniDec_Index(pc,d1.w)

; ===========================================================================

EniDec_00:
	.loop:
		move.w	a2,(a1)+				; copy incremental copy word
		addq.w	#1,a2					; increment it
		dbf	d2,.loop				; repeat
		bra.s	Eni_Loop
; ===========================================================================

EniDec_01:
	.loop:
		move.w	a4,(a1)+				; copy literal copy word
		dbf	d2,.loop				; repeat
		bra.s	Eni_Loop
; ===========================================================================

EniDec_100:
		bsr.w	EniDec_FetchInlineValue
	.loop:
		move.w	d1,(a1)+				; copy inline value
		dbf	d2,.loop				; repeat

		bra.s	Eni_Loop
; ===========================================================================

EniDec_101:
		bsr.w	EniDec_FetchInlineValue
	.loop:
		move.w	d1,(a1)+				; copy inline value
		addq.w	#1,d1					; increment
		dbf	d2,.loop				; repeat

		bra.s	Eni_Loop
; ===========================================================================
EniDec_110:
		bsr.w	EniDec_FetchInlineValue
	.loop:
		move.w	d1,(a1)+				; copy inline value
		subq.w	#1,d1					; decrement
		dbf	d2,.loop				; repeat

		bra.s	Eni_Loop
; ===========================================================================
EniDec_111:
		cmpi.w	#$F,d2
		beq.s	EniDec_Done
	.loop:
		bsr.w	EniDec_FetchInlineValue			; fetch new inline value
		move.w	d1,(a1)+				; copy it
		dbf	d2,.loop				; and repeat

		bra.s	Eni_Loop
; ===========================================================================
EniDec_Index:
		bra.s	EniDec_00
		bra.s	EniDec_00
		bra.s	EniDec_01
		bra.s	EniDec_01
		bra.s	EniDec_100
		bra.s	EniDec_101
		bra.s	EniDec_110
		bra.s	EniDec_111
; ===========================================================================

EniDec_Done:
		subq.w	#1,a0					; go back by one byte
		cmpi.w	#16,d6					; were we going to start on a completely new byte?
		bne.s	.notnewbyte				; if not, branch
		subq.w	#1,a0					; and another one if needed

	.notnewbyte:
		move.w	a0,d0
		lsr.w	#1,d0					; are we on an odd byte?
		bcc.s	.evenbyte				; if not, branch
		addq.w	#1,a0					; ensure we're on an even byte

	.evenbyte:
		popr	d0-d7/a1-a5
		rts	

; ---------------------------------------------------------------------------
; Part of the Enigma decompressor
; Fetches an inline copy value and stores it in d1
; ---------------------------------------------------------------------------

EniDec_FetchInlineValue:
		move.w	a3,d3					; copy starting art tile
		move.b	d4,d1					; copy PCCVH bitfield
		add.b	d1,d1					; is the priority bit set?
		bcc.s	.skippriority				; if not, branch
		subq.w	#1,d6
		btst	d6,d5					; is the priority bit set in the inline render flags?
		beq.s	.skippriority				; if not, branch
		ori.w	#$8000,d3				; otherwise set priority bit in art tile

	.skippriority:
		add.b	d1,d1					; is the high palette line bit set?
		bcc.s	.skiphighpal				; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skiphighpal
		addi.w	#$4000,d3				; set second palette line bit

	.skiphighpal:
		add.b	d1,d1					; is the low palette line bit set?
		bcc.s	.skiplowpal				; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skiplowpal
		addi.w	#$2000,d3				; set first palette line bit

	.skiplowpal:
		add.b	d1,d1					; is the vertical flip flag set?
		bcc.s	.skipyflip				; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skipyflip
		ori.w	#$1000,d3				; set yflip bit

	.skipyflip:
		add.b	d1,d1					; is the horizontal flip flag set?
		bcc.s	.skipxflip				; if not, branch
		subq.w	#1,d6
		btst	d6,d5
		beq.s	.skipxflip
		ori.w	#$800,d3				; set xflip bit

	.skipxflip:
		move.w	d5,d1
		move.w	d6,d7
		sub.w	a5,d7					; subtract length in bits of inline copy value
		bcc.s	.enoughbits				; branch if a new word doesn't need to be read
		move.w	d7,d6
		addi.w	#16,d6
		neg.w	d7					; calculate bit deficit
		lsl.w	d7,d1					; and make space for that many bits
		move.b	(a0),d5					; get next byte
		rol.b	d7,d5					; and rotate the required bits into the lowest positions
		add.w	d7,d7
		and.w	EniDec_Masks-2(pc,d7.w),d5
		add.w	d5,d1					; combine upper bits with lower bits

.maskvalue:
		move.w	a5,d0					; get length in bits of inline copy value
		add.w	d0,d0
		and.w	EniDec_Masks-2(pc,d0.w),d1		; mask value appropriately
		add.w	d3,d1					; add starting art tile
		move.b	(a0)+,d5
		lsl.w	#8,d5
		move.b	(a0)+,d5				; get next word
		rts	
; ===========================================================================

.enoughbits:
		beq.s	.justenough				; if the word has been exactly exhausted, branch
		lsr.w	d7,d1					; get inline copy value
		move.w	a5,d0
		add.w	d0,d0
		and.w	EniDec_Masks-2(pc,d0.w),d1		; and mask it appropriately
		add.w	d3,d1					; add starting art tile
		move.w	a5,d0
		bra.s	EniDec_FetchByte
; ===========================================================================

.justenough:
		moveq	#16,d6					; reset shift value
		bra.s	.maskvalue
; ===========================================================================

EniDec_Masks:
		dc.w	 1,    3,    7,   $F
		dc.w   $1F,  $3F,  $7F,  $FF
		dc.w  $1FF, $3FF, $7FF, $FFF
		dc.w $1FFF,$3FFF,$7FFF,$FFFF
; ===========================================================================

EniDec_FetchByte:
		sub.w	d0,d6					; subtract length of current entry from shift value so that next entry is read next time around
		cmpi.w	#9,d6					; does a new byte need to be read?
		bhs.s	.locret					; if not, branch
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5

	.locret:
		rts

; ---------------------------------------------------------------------------
; Kosinski decompression algorithm

; input:
;	a0 = source address
;	a1 = destination address

;	uses d0.b, d1.w, d2.l, d3.l, d4.l, d5.w, d6.w, a0, a1

; usage:
;		lea	(source).l,a0
;		lea	(destination).l,a1
;		bsr.w	KosDec
; ---------------------------------------------------------------------------

KosDec:
		subq.l	#2,sp					; make space for 2 bytes on the stack
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5					; get first description field
		moveq	#$F,d4					; set to loop for 16 bits

Kos_Loop:
		lsr.w	#1,d5					; shift bit into the c flag
		move	sr,d6
		dbf	d4,.chkbit
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

	.chkbit:
		move	d6,ccr					; was the bit set?
		bcc.s	Kos_RLE					; if not, branch

		move.b	(a0)+,(a1)+				; copy byte as-is
		bra.s	Kos_Loop
; ===========================================================================

Kos_RLE:
		moveq	#0,d3
		lsr.w	#1,d5					; get next bit
		move	sr,d6
		dbf	d4,.chkbit
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

	.chkbit:
		move	d6,ccr					; was the bit set?
		bcs.s	Kos_SeparateRLE				; if yes, branch

		lsr.w	#1,d5					; shift bit into the x flag
		dbf	d4,.loop1
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

	.loop1:
		roxl.w	#1,d3					; get high repeat count bit
		lsr.w	#1,d5
		dbf	d4,.loop2
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

	.loop2:
		roxl.w	#1,d3					; get low repeat count bit
		addq.w	#1,d3					; increment repeat count
		moveq	#-1,d2
		move.b	(a0)+,d2				; calculate offset
		bra.s	Kos_RLELoop
; ===========================================================================

Kos_SeparateRLE:
		move.b	(a0)+,d0				; get first byte
		move.b	(a0)+,d1				; get second byte
		moveq	#-1,d2
		move.b	d1,d2
		lsl.w	#5,d2
		move.b	d0,d2					; calculate offset
		andi.w	#7,d1					; does a third byte need to be read?
		beq.s	Kos_SeparateRLE2			; if yes, branch
		move.b	d1,d3					; copy repeat count
		addq.w	#1,d3					; increment

Kos_RLELoop:
		move.b	(a1,d2.w),d0				; copy appropriate byte
		move.b	d0,(a1)+				; repeat
		dbf	d3,Kos_RLELoop
		bra.s	Kos_Loop
; ===========================================================================

Kos_SeparateRLE2:
		move.b	(a0)+,d1
		beq.s	Kos_Done				; 0 indicates end of compressed data
		cmpi.b	#1,d1
		beq.w	Kos_Loop				; 1 indicates new description to be read
		move.b	d1,d3					; otherwise, copy repeat count
		bra.s	Kos_RLELoop
; ===========================================================================

Kos_Done:
		addq.l	#2,sp					; restore stack pointer
		rts

; ===========================================================================

	if Revision<2
		nop
	endc	

; ===========================================================================


PaletteCycle:				
		bsr.w	PCycle_SuperSonic			; Super Sonic's palette cycle is handled seperately
		moveq	#0,d2
		moveq	#0,d0
		move.b	(v_zone).w,d0				; get zone number
		add.w	d0,d0					; (multiply by element size = 2 bytes)
		move.w	PCycle_Index(pc,d0.w),d0		; use zone number as index
		jmp	PCycle_Index(pc,d0.w)			; jump to relevant palette routine

	; A single instruction of dead code
		rts
		
; ===========================================================================
PCycle_Index:	index offset(*)
		ptr PCycle_EHZ					; 0 			
		ptr PCycle_Null					; 1
		ptr PCycle_WZ					; 2
		ptr PCycle_Null					; 3
		ptr PCycle_MTZ					; 4
		ptr PCycle_MTZ					; 5
		ptr PCycle_WFZ					; 6
		ptr PCycle_HTZ					; 7
		ptr PCycle_HPZ					; 8
		ptr PCycle_Null					; 9
		ptr PCycle_OOZ					; $A
		ptr PCycle_MCZ					; $B
		ptr PCycle_CNZ					; $C
		ptr PCycle_CPZ					; $D
		ptr PCycle_CPZ					; $E
		ptr PCycle_ARZ					; $F
		ptr PCycle_WFZ					; $10
; ===========================================================================

PCycle_Null:				
		rts	
; ===========================================================================

PCycle_EHZ:				
		lea	(Pal_EHZ_ARZWaterCyc).l,a0
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#7,(v_palcycle_time).w			; reset timer to 7 frames
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#1,(v_palcycle_num).w			; increment cycle number
		andi.w	#3,d0					; if greater than 3, reset to 0
		lsl.w	#3,d0					; multiply by 8
		move.l	(a0,d0.w),(v_pal_dry_line2+(3*2)).w	; copy two colors to 2nd line, 3 colors in
		move.l	4(a0,d0.w),(v_pal_dry_line2+(14*2)).w	; copy two colors to 2nd line, 14 colors in

	.exit:				
		rts	
; ===========================================================================
; Unused beta leftover
PCycle_WZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#2,(v_palcycle_time).w			; reset timer to 2 frames
		lea	(Pal_WoodConveyerCyc).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		subq.w	#2,(v_palcycle_num).w			; deincrement cycle number
		bcc.s	.no_reset				; if greater than 0, bramch
		move.w	#6,(v_palcycle_num).w			; reset cycle nummber

	.no_reset:				
		lea	(v_pal_dry_line4+(3*2)).w,a1		; 4th line, 3 colors in
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors

	.exit:				
		rts	
; ===========================================================================

PCycle_MTZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer 1
		bpl.s	.cycle2					; if time remains, branch		
		move.w	#$11,(v_palcycle_time).w		; reset timer to 17 frames
		lea	(Pal_MTZCyc1).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num).w			; increment cycle number
		cmpi.w	#$C,(v_palcycle_num).w			; is it greater than 10?
		bcs.s	.no_reset1				; if not, branch
		move.w	#0,(v_palcycle_num).w			; reset cycle number

	.no_reset1:				
		lea	(v_pal_dry_line3+(5*2)).w,a1		; 3rd line, 5 colors in
		move.w	(a0,d0.w),(a1)				; copy one color

	.cycle2:				
		subq.w	#1,(v_palcycle_time2).w			; deincrement timer 2
		bpl.s	.cycle3					; if time remains, branch	
		move.w	#2,(v_palcycle_time2).w			; reset timer to 2 frames
		lea	(Pal_MTZCyc2).l,a0
		move.w	(v_palcycle_num2).w,d0			; get cycle number		
		addq.w	#2,(v_palcycle_num2).w			; increment cycle number
		cmpi.w	#6,(v_palcycle_num2).w			; is it cycle 6?
		bcs.s	.no_reset2				; if not, branch
		move.w	#0,(v_palcycle_num2).w			; reset cycle number

	.no_reset2:				
		lea	(v_pal_dry_line3+(1*2)).w,a1		; 3rd line, 1 color in
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.w	4(a0,d0.w),(a1)				; copy one more color

	.cycle3:				
		subq.w	#1,(v_palcycle_time3).w			; deincrement timer 3
		bpl.s	.exit					; if time remains, exit
		move.w	#9,(v_palcycle_time3).w			; reset timer to 9 frames
		lea	(Pal_MTZCyc3).l,a0
		move.w	(v_palcycle_num3).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num3).w			; increment cycle number
		cmpi.w	#$14,(v_palcycle_num3).w		; is it greater than 20?
		bcs.s	.no_reset3				; if not, branch
		move.w	#0,(v_palcycle_num3).w			; reset cycle number

	.no_reset3:				
		lea	(v_pal_dry_line3+(15*2)).w,a1		; 3rd line, 15 colors in
		move.w	(a0,d0.w),(a1)				; copy one color

	.exit:				
		rts	
; ===========================================================================

PCycle_HTZ:				
		lea	(Pal_HTZLavaCyc).l,a0
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#0,(v_palcycle_time).w			; clear timer
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#1,(v_palcycle_num).w			; increment cycle number
		andi.w	#$F,d0					; if greater than 16, reset to 0
		move.b	PCycle_HTZ_LavaDelayData(pc,d0.w),(v_palcycle_time+1).w ; reset timer with new value from table
		lsl.w	#3,d0					; multiply by 8
		move.l	(a0,d0.w),(v_pal_dry_line2+(3*2)).w	; copy 2 colors to 2nd line, 3 colors in
		move.l	4(a0,d0.w),(v_pal_dry_line2+(14*2)).w	; copy 2 colors to 2nd line, 14 colors in

	.exit:				
		rts	
; ===========================================================================
PCycle_HTZ_LavaDelayData:					; number of frames between changes of the lava palette
		dc.b	$B, $B, $B, $A
		dc.b	 8, $A, $B, $B
		dc.b	$B, $B, $D, $F
		dc.b	$D, $B, $B, $B
		even
; ===========================================================================
; Unused beta leftover
PCycle_HPZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#4,(v_palcycle_time).w			; reset timer to 4 frames
		lea	(Pal_HPZWaterCyc).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		subq.w	#2,(v_palcycle_num).w			; deincrement cycle number
		bcc.s	.no_reset				; if greater than 0, branch
		move.w	#6,(v_palcycle_num).w			; reset cycle number

	.no_reset:				
		lea	(v_pal_dry_line4+(9*2)).w,a1		; 4th line, 9th color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors
		lea	(Pal_HPZUnderwaterCyc).l,a0		
		lea	(v_pal_water_line4+(9*2)).w,a1		; repeat with corrosponding water palette
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

	.exit:				
		rts	
; ===========================================================================

PCycle_OOZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#7,(v_palcycle_time).w			; reset timer to 7 frames
		lea	(Pal_OOZOilCyc).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num).w			; deincrement cycle number
		andi.w	#6,(v_palcycle_num).w			; if greater than 6, reset to 0
		lea	(v_pal_dry_line3+(10*2)).w,a1		; 3rd line, 10th color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors

	.exit:				
		rts	
; ===========================================================================

PCycle_MCZ:				
		tst.b	(v_current_boss).w			; is the MCZ boss fight in progress?
		bne.s	.exit					; if so, exit
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#1,(v_palcycle_time).w			; reset timer to 1 frame
		lea	(Pal_MCZLanternCyc).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num).w			; increment cycle number
		andi.w	#6,(v_palcycle_num).w			; if greater than 6, reset to 0
		move.w	(a0,d0.w),(v_pal_dry_line2+(11*2)).w	; copy 1 color to 2nd line, 11th color

	.exit:							
		rts	
; ===========================================================================

PCycle_CNZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.w	.chk_boss				; if time remains, branch
		move.w	#7,(v_palcycle_time).w			; reset timer
		lea	(Pal_CNZCyc1_Cyc2).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num).w			; increment cycle number
		cmpi.w	#6,(v_palcycle_num).w			; is it greater than 6?
		bcs.s	.no_reset1				; if not, branch
		move.w	#0,(v_palcycle_num).w			; reset cycle to 0

	.no_reset1:				
		lea	(a0,d0.w),a0
		lea	(v_pal_dry).w,a1
		; copy 6 colors to 3rd line, colors 5-7 and 11-13
		_move.w	0(a0),(v_pal_dry_line3+(5*2))-v_pal_dry(a1) 
		move.w	6(a0),(v_pal_dry_line3+(6*2))-v_pal_dry(a1)
		move.w	$C(a0),(v_pal_dry_line3+(7*2))-v_pal_dry(a1)
		move.w	$12(a0),(v_pal_dry_line3+(11*2))-v_pal_dry(a1) 
		move.w	$18(a0),(v_pal_dry_line3+(12*2))-v_pal_dry(a1)
		move.w	$1E(a0),(v_pal_dry_line3+(13*2))-v_pal_dry(a1)

		lea	(Pal_CNZCyc3).l,a0
		lea	(a0,d0.w),a0
		; copy 3 colors to 4th line, colors 2-4
		_move.w	0(a0),(v_pal_dry_line4+(2*2))-v_pal_dry(a1)
		move.w	6(a0),(v_pal_dry_line4+(3*2))-v_pal_dry(a1)
		move.w	$C(a0),(v_pal_dry_line4+(4*2))-v_pal_dry(a1)

		lea	(Pal_CNZCyc4).l,a0
		move.w	(v_palcycle_num_cnz).w,d0		; get cycle number
		addq.w	#2,(v_palcycle_num_cnz).w		; increment cycle number
		cmpi.w	#$24,(v_palcycle_num_cnz).w		; is it greater than 36?
		bcs.s	.no_reset2				; if not, branch
		move.w	#0,(v_palcycle_num_cnz).w		; reset cycle to 0

	.no_reset2:				
		lea	(v_pal_dry_line4+(9*2)).w,a1		; 4th line, 9th color
		move.w	4(a0,d0.w),(a1)+			; copy two colors
		move.w	2(a0,d0.w),(a1)+			; copy two more colors
		move.w	(a0,d0.w),(a1)+				; copy two final colors

	.chk_boss:				
		tst.b	(v_current_boss).w			; is the boss fight in progress?
		beq.w	.exit					; if not, exit
		subq.w	#1,(v_palcycle_time2).w			; deincrement timer
		bpl.w	.exit					; if time remains, exit
		move.w	#3,(v_palcycle_time2).w			; reset timer to 3 frames
		move.w	(v_palcycle_num2).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num2).w			; increment cycle number 
		cmpi.w	#6,(v_palcycle_num2).w			; is it greater than 6?
		bcs.s	.no_reset3				; if not, branch
		move.w	#0,(v_palcycle_num2).w			; reset cycle to 0

	.no_reset3:				
		lea	(Pal_CNZBossCyc1).l,a0
		lea	(a0,d0.w),a0
		lea	(v_pal_dry).w,a1
		; copy 3 colors to 2nd line, colors 2-4
		_move.w	0(a0),(v_pal_dry_line2+(2*2))-v_pal_dry(a1)
		move.w	6(a0),(v_pal_dry_line2+(3*2))-v_pal_dry(a1)
		move.w	$C(a0),(v_pal_dry_line2+(4*2))-v_pal_dry(a1)

		lea	(Pal_CNZBossCyc2).l,a0
		move.w	(v_palcycle_num3).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num3).w			; increment cycle number
		cmpi.w	#$14,(v_palcycle_num3).w		; is it greater than 20?
		bcs.s	.no_reset4				; if not, branch
		move.w	#0,(v_palcycle_num3).w			; reset cycle to 0

	.no_reset4:				
		move.w	(a0,d0.w),(v_pal_dry_line2+(14*2))-v_pal_dry(a1) ; copy one color to 2nd line, 14th color
		lea	(Pal_CNZBossCyc3).l,a0
		move.w	(v_palcycle_num2_cnz).w,d0		; get cycle number
		addq.w	#2,(v_palcycle_num2_cnz).w		; increment cycle number
		andi.w	#$E,(v_palcycle_num2_cnz).w		; if cycle 14, reset to 0
		move.w	(a0,d0.w),(v_pal_dry_line2+(15*2))-v_pal_dry(a1) ; copy one color to 2nd line, 15th color

	.exit:				
		rts	
; ===========================================================================

PCycle_CPZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.w	#7,(v_palcycle_time).w			; reset timer to 7 frames
		lea	(Pal_CPZCyc1).l,a0
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#6,(v_palcycle_num).w			; increment cycle number
		cmpi.w	#$36,(v_palcycle_num).w			; is it greater than 54?
		bcs.s	.no_reset1				; if not, branch
		move.w	#0,(v_palcycle_num).w			; reset cycle number

	.no_reset1:				
		lea	(v_pal_dry_line4+(12*2)).w,a1		; 4th line, 12th color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.w	4(a0,d0.w),(a1)				; copy one color

		lea	(Pal_CPZCyc2).l,a0
		move.w	(v_palcycle_num2).w,d0			; get cycle number 
		addq.w	#2,(v_palcycle_num2).w			; increment cycle number
		cmpi.w	#$2A,(v_palcycle_num2).w		; is it greater than 42?
		bcs.s	.no_reset2				; if not, branch
		move.w	#0,(v_palcycle_num2).w			; reset cycle to 0

	.no_reset2:				
		move.w	(a0,d0.w),(v_pal_dry_line4+(15*2)).w	; 4th line, 15th color

		lea	(Pal_CPZCyc3).l,a0
		move.w	(v_palcycle_num3).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num3).w			; increment cycle number
		andi.w	#$1E,(v_palcycle_num3).w		; if greater than 30, reset to 0
		move.w	(a0,d0.w),(v_pal_dry_line3+(15*2)).w	; 3rd line, 15th color	

	.exit:				
		rts	
; ===========================================================================

PCycle_ARZ:				
		lea	(Pal_EHZ_ARZWaterCyc).l,a0
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.exit					; branch if time remains
		move.w	#5,(v_palcycle_time).w			; reset timer to 5 frames
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#1,(v_palcycle_num).w			; increment cycle number
		andi.w	#3,d0					; if greater than 3, reset to 0
		lsl.w	#3,d0					; multiply by 8
		lea	(v_pal_dry_line3+(2*2)).w,a1		; 3rd line, 2nd color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two colors

	.exit:				
		rts
; ===========================================================================

PCycle_WFZ:				
		subq.w	#1,(v_palcycle_time).w			; deincrement timer
		bpl.s	.cycle2					; if time remains, branch
		move.w	#1,(v_palcycle_time).w			; reset timer to 1 frame
		lea	(Pal_WFZFireCyc).l,a0
		tst.b	(f_wfz_scz_fire_toggle).w		; is WFZ fire flag set?
		beq.s	.fire					; if not, branch
		move.w	#5,(v_palcycle_time).w			; reset timer to 6
		lea	(Pal_WFZConveyerCyc).l,a0		

	.fire:				
		move.w	(v_palcycle_num).w,d0			; get cycle number
		addq.w	#8,(v_palcycle_num).w			; increment cycle number
		cmpi.w	#$20,(v_palcycle_num).w			; is it greater than 32?
		bcs.s	.no_reset1				; if not, branch
		move.w	#0,(v_palcycle_num).w			; reset cycle to 0

	.no_reset1:				
		lea	(v_pal_dry_line3+(7*2)).w,a1		; 3rd line, 7th color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two colors

	.cycle2:				
		subq.w	#1,(v_palcycle_time2).w			; deincrement timer
		bpl.s	.cycle3					; if time remains, branch
		move.w	#3,(v_palcycle_time2).w			; reset timer to 3 frames
		lea	(Pal_WFZCyc1).l,a0
		move.w	(v_palcycle_num2).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num2).w			; increment cycle number
		cmpi.w	#$44,(v_palcycle_num2).w		; is it greater than 68?
		bcs.s	.no_reset2				; if not, branch
		move.w	#0,(v_palcycle_num2).w			; reset cycle to 0

	.no_reset2:				
		move.w	(a0,d0.w),(v_pal_dry_line3+(14*2)).w	; copy one color to 3rd line, 14th color

	.cycle3:				
		subq.w	#1,(v_palcycle_time3).w			; deincrement timer	
		bpl.s	.exit					; if time remains, exit
		move.w	#5,(v_palcycle_time3).w			; reset timer to 5 frames
		lea	(Pal_WFZCyc2).l,a0
		move.w	(v_palcycle_num3).w,d0			; get cycle number
		addq.w	#2,(v_palcycle_num3).w			; increment cycle number
		cmpi.w	#$18,(v_palcycle_num3).w		; is it greater than 24?
		bcs.s	.no_reset3				; if not, branch
		move.w	#0,(v_palcycle_num3).w			; reset cycle to 0

	.no_reset3:				
		move.w	(a0,d0.w),(v_pal_dry_line3+(15*2)).w	; copy one color to 3rd line, 15th color

	.exit:				
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Palette data & routines
; ---------------------------------------------------------------------------
		incfile Pal_S1TitleCyc				; word_1E5A: Pal_S1TitleCyc: ; unused
		incfile Pal_EHZ_ARZWaterCyc			; word_1E7A: CyclingPal_EHZ_ARZ_Water:
		incfile Pal_HTZLavaCyc				; word_1E9A: CyclingPal_Lava:
		incfile	Pal_WoodConveyerCyc			; word_1F1A: CyclingPal_WoodConveyor:
		incfile	Pal_MTZCyc1				; byte_1F2A: CyclingPal_MTZ1:
		incfile Pal_MTZCyc2				; word_1F36: CyclingPal_MTZ2:
		incfile	Pal_MTZCyc3				; word_1F42: CyclingPal_MTZ3:
		incfile Pal_HPZWaterCyc				; word_1F56: CyclingPal_HPZWater:
		incfile Pal_HPZUnderwaterCyc			; word_1F66: CyclingPal_HPZUnderwater:
		incfile	Pal_OOZOilCyc				; word_1F76: CyclingPal_Oil:
		incfile	Pal_MCZLanternCyc			; word_1F86: CyclingPal_Lantern:
		incfile	Pal_CNZCyc1_Cyc2			; word_1F8E: CyclingPal_CNZ1:Cycle 3
		incfile	Pal_CNZCyc3				; word_1FB2: CyclingPal_CNZ3:
		incfile	Pal_CNZCyc4				; word_1FC4: CyclingPal_CNZ4:
		incfile	Pal_CNZBossCyc1				; word_1FEC: CyclingPal_CNZ1_B:
		incfile	Pal_CNZBossCyc2				; word_1FFE: CyclingPal_CNZ2_B:
		incfile	Pal_CNZBossCyc3				; word_2012: CyclingPal_CNZ3_B:
		incfile	Pal_CPZCyc1				; word_2022: CyclingPal_CPZ1:
		incfile	Pal_CPZCyc2				; word_2058: CyclingPal_CPZ2:
		incfile	Pal_CPZCyc3				; word_2082: CyclingPal_CPZ3:
		incfile	Pal_WFZFireCyc				; word_20A2: CyclingPal_WFZFire:
		incfile	Pal_WFZConveyerCyc			; word_20C2: CyclingPal_WFZBelt:
		incfile	Pal_WFZCyc1				; word_20E2: CyclingPal_CPZ4:
		incfile	Pal_WFZCyc2				; word_2126: CyclingPal_WFZ2:

; ===========================================================================

PCycle_SuperSonic:				
		move.b	(v_super_sonic_palette).w,d0		; get Super Sonic's palette status
		beq.s	.exit					; if Sonic isn't super, exit
		bmi.w	.normal					; if fade-in is done, branch
		subq.b	#1,d0
		bne.s	.revert					; if greater than 1, branch
		
;.fade_in:	
		subq.b	#1,(v_palette_timer).w			; decinrement timer
		bpl.s	.exit					; if time remains, exit
		move.b	#3,(v_palette_timer).w			; reset timer to 3 frames
		
		lea	(Pal_SS_TransformationCyc).l,a0
		move.w	(v_palette_frame).w,d0			; get palette frame
		addq.w	#8,(v_palette_frame).w			; increment frame
		cmpi.w	#$30,(v_palette_frame).w		; has the fade-in cycle reached the 6th frame?
	if FixBugs	
		; Branch to common palette cycle routine.
		bcs.s	.dopalettes				; if not, branch
	else
		bcs.s	.fadein_not_done			; if not, branch
	endc
		
		move.b	#-1,(v_super_sonic_palette).w		; mark fade-in as done
		move.b	#0,(v_ost_player1+ost_obj_control).w ; restore Sonic's movement

	if FixBugs
		; While palettes for transforming underwater are in the ROM, they are only used when reverting to normal;
		; there is no code to use them when transforming into Super Sonic. We can fix this by adding code
		; to make this section that matches the normal cycle and revert cycles, but we can take it a bit farther
		; and eliminate some duplicate code as well.
		bra.s	.dopalettes
	else
	.fadein_not_done:
		lea	(v_pal_dry_line1+(2*2)).w,a1		; 1st line, 2nd color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors
	endc
	
	.exit:
		rts	
; ===========================================================================

.revert:
		; Run the fade-in transition backwards.
		subq.b	#1,(v_palette_timer).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.b	#3,(v_palette_timer).w			; reset timer to 3 frames
		lea	(Pal_SS_TransformationCyc).l,a0
		move.w	(v_palette_frame).w,d0			; get palette frame
		subq.w	#8,(v_palette_frame).w			; deincrement palette frame

	if FixBugs
		; Branch to common palette cycle routine and fix the bug described below.
		bcc.s	.dopalettes				; if we haven't reached the first frame, branch
		move.w	#0,(v_palette_frame).w			; clear v_palette_frame
	else	
		bcc.s	.fadeout_not_done			; if we haven't reached the first frame, branch
		; v_palette_frame is a word, not a byte. This does not clear the full variable, 
		; causing this palette cycle to behave incorrectly if it is activated again
		; in the same level.
		move.b	#0,(v_palette_frame).w			; clear only half of v_palette_frame
	endc	
		move.b	#0,(v_super_sonic_palette).w		; mark Super Sonic's palette as inactive

	if FixBugs
	; Common palette cycle routine.
	.dopalettes:
	else
	.fadeout_not_done:
	endc
		lea	(v_pal_dry_line1+(2*2)).w,a1		; 1st line, 2nd color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors

		lea	(Pal_SS_CPZUWTransformationCyc).l,a0	; use CPZ underwater transformation
		cmpi.b	#id_CPZ,(v_zone).w			; is it CPZ?
		beq.s	.do_underwater_revert			; if so, branch
		cmpi.b	#id_ARZ,(v_zone).w			; is it ARZ?
		bne.s	.exit					; if not, exit
		lea	(Pal_SS_ARZUWTransformationCyc).l,a0	; use ARZ underwater transformation

	.do_underwater_revert:
		lea	(v_pal_water_line1+(2*2)).w,a1		; 1st line, 2nd color
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors
		rts	
; ===========================================================================

.normal:
		subq.b	#1,(v_palette_timer).w			; deincrement timer
		bpl.s	.exit					; if time remains, exit
		move.b	#7,(v_palette_timer).w			; reset timer to 7 frames
		lea	(Pal_SS_TransformationCyc).l,a0
		move.w	(v_palette_frame).w,d0			; get current palette frame
		addq.w	#8,(v_palette_frame).w			; increment palette frame
		cmpi.w	#$78,(v_palette_frame).w		; is it the 120th frame?

	if FixBugs
		; Branch to common palette cycle routine and fix bug described below.
		bls.s	.dopalettes				; if so, branch
	else
		; This is the wrong branch condition to use here; it causes the last frame of the cycle
		; to be skipped.
		bcs.s	.no_reset				; if so, branch
	endc	
		move.w	#$30,(v_palette_frame).w		; reset frame counter

	if FixBugs
		; Branch to common palette cycle routine.
		bra.s	.dopalettes
	else	
	.no_reset:
		lea	(v_pal_dry_line1+(2*2)).w,a1		; 1st line, 2nd color	
		move.l	(a0,d0.w),(a1)+				; copy two colors
		move.l	4(a0,d0.w),(a1)				; copy two more colors
		lea	(Pal_SS_CPZUWTransformationCyc).l,a0	; use CPZ underwater transformation
		cmpi.b	#id_CPZ,(v_zone).w			; is it CPZ?
		beq.s	.do_underwater				; if so, branch
		cmpi.b	#id_ARZ,(v_zone).w			; is it ARZ?
		bne.w	.exit					; if not, exit
		lea	(Pal_SS_ARZUWTransformationCyc).l,a0	; use ARZ underwater transformation

	.do_underwater:
		lea	(v_pal_water_line1+(2*2)).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		rts	
	endc

; ===========================================================================

		incfile	Pal_SS_TransformationCyc		; Pal_2246: CyclingPal_SSTransformation:
		incfile	Pal_SS_CPZUWTransformationCyc		; Pal_22C6: CyclingPal_CPZUWTransformation:
		incfile	Pal_SS_ARZUWTransformationCyc		; Pal_2346: CyclingPal_ARZUWTransformation:

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	fade in from black

;	uses d0.l, d1.l, d2.w, d3.w, d4.w, d5.l, d6.l, d7.w, a0, a1, a3
; ---------------------------------------------------------------------------

PaletteFadeIn:
		move.w	#palfade_all,(v_palfade_start).w	; set start position = 0; size = $40 ($3F)

		moveq	#0,d0
		lea	(v_pal_dry).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		moveq	#cBlack,d1
		move.b	(v_palfade_size).w,d0

	.fill:
		move.w	d1,(a0)+
		dbf	d0,.fill				; fill palette with black

		move.w	#(7*3),d4				; max number of color changes needed (000 to $EEE)

	.mainloop:
		move.b	#id_VBlank_Fade,(v_vblank_routine).w
		bsr.w	WaitForVBlank				; wait for frame to end
		bsr.s	FadeIn_FromBlack			; update palette
		bsr.w	RunPLC					; decompress gfx if PLC contains anything
		dbf	d4,.mainloop
		rts
; ===========================================================================

FadeIn_FromBlack:
		moveq	#0,d0
		lea	(v_pal_dry).w,a0			; current palette (starts as all black)
		lea	(v_pal_dry_next).w,a1			; target palette
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

	.addcolor:
		bsr.s	FadeIn_AddColor				; raise RGB levels (until they match target palette)
		dbf	d0,.addcolor				; repeat for size of palette

		tst.b	(f_water).w				; does level have water?
		beq.s	.exit					; if not, exit

		moveq	#0,d0
		lea	(v_pal_water).w,a0
		lea	(v_pal_water_next).w,a1
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

	.addcolor_water:
		bsr.s	FadeIn_AddColor				; raise RGB levels for underwater palette
		dbf	d0,.addcolor_water			; repeat for size of palette

	.exit:
		rts
; ===========================================================================

FadeIn_AddColor:
.addblue:
		move.w	(a1)+,d2				; d2 = target color
		move.w	(a0),d3					; d3 = current color
		cmp.w	d2,d3
		beq.s	.next					; branch if perfect match

		move.w	d3,d1
		addi.w	#$200,d1				; increase blue	value
		cmp.w	d2,d1
		bhi.s	.addgreen				; branch if blue already matched
		move.w	d1,(a0)+				; update blue
		rts	
; ===========================================================================

	.addgreen:
		move.w	d3,d1
		addi.w	#$20,d1					; increase green value
		cmp.w	d2,d1
		bhi.s	.addred					; branch if green already matched
		move.w	d1,(a0)+				; update green
		rts	
; ===========================================================================

	.addred:
		addq.w	#2,(a0)+				; increase red value
		rts	
; ===========================================================================

	.next:
		addq.w	#2,a0					; next color
		rts

; ---------------------------------------------------------------------------
; Subroutine to fade out to black
;
;	uses d0.l, d1.w, d2.w, d4.w, d5.l, d6.l, d7.w, a0, a1, a3
; ---------------------------------------------------------------------------

PaletteFadeOut:
		move.w	#palfade_all,(v_palfade_start).w	; start position = 0; size = $40 ($3F)
		move.w	#(7*3),d4				; max number of color changes needed ($EEE to 000)

	.mainloop:
		move.b	#id_VBlank_Fade,(v_vblank_routine).w
		bsr.w	WaitForVBlank				; wait for frame to end
		bsr.s	FadeOut_ToBlack				; update palette
		bsr.w	RunPLC					; decompress gfx if PLC contains anything
		dbf	d4,.mainloop
		rts
; ===========================================================================

FadeOut_ToBlack:
		moveq	#0,d0
		lea	(v_pal_dry).w,a0			; current palette
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

	.decolor:
		bsr.s	FadeOut_DecColor			; lower RGB levels
		dbf	d0,.decolor				; repeat for size of palette

	if FixBugs
		; Just for the sake of consistency: no need to do this if
		; if not a water level.	
		tst.b	(f_water).w				; does level have water?
		beq.s	.exit					; if not, exit
	endc

		moveq	#0,d0
		lea	(v_pal_water).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

	.decolor_water:
		bsr.s	FadeOut_DecColor			; lower RGB levels for underwater palette
		dbf	d0,.decolor_water			; repeat for size of palette

	.exit:
		rts
; ===========================================================================

FadeOut_DecColor:
.dered:
		move.w	(a0),d2					; d2 = current color
		beq.s	.next					; branch if already black

		move.w	d2,d1
		andi.w	#$E,d1					; d1 = red value
		beq.s	.degreen				; branch if 0
		subq.w	#2,(a0)+				; decrease red value
		rts	
; ===========================================================================

.degreen:
		move.w	d2,d1
		andi.w	#$E0,d1					; d1 = green value
		beq.s	.deblue					; branch if 0
		subi.w	#$20,(a0)+				; decrease green value
		rts	
; ===========================================================================

.deblue:
		move.w	d2,d1
		andi.w	#$E00,d1				; d1 = blue value
		beq.s	.next					; branch if 0
		subi.w	#$200,(a0)+				; decrease blue	value
		rts	
; ===========================================================================

.next:
		addq.w	#2,a0					; next color
		rts

; ---------------------------------------------------------------------------
; Subroutine to	fade in from white (Special Stage)

;	uses d0.l, d1.w, d2.w, d3.w, d4.w, d5.l, d6.l, d7.w, a0, a1, a3
; ---------------------------------------------------------------------------

PaletteWhiteIn:
		move.w	#palfade_all,(v_palfade_start).w	; start position = 0; size = $40
		moveq	#0,d0
		lea	(v_pal_dry).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.w	#cWhite,d1
		move.b	(v_palfade_size).w,d0

	.fill:
		move.w	d1,(a0)+
		dbf	d0,.fill				; fill palette with white

		move.w	#(7*3),d4				; max number of color changes needed ($EEE to 0)

.mainloop:
		move.b	#id_VBlank_Fade,(v_vblank_routine).w
		bsr.w	WaitForVBlank				; wait for frame to end
		bsr.s	WhiteIn_FromWhite			; update palette
		bsr.w	RunPLC					; decompress gfx if PLC contains anything
		dbf	d4,.mainloop
		rts
; ===========================================================================

WhiteIn_FromWhite:
		moveq	#0,d0
		lea	(v_pal_dry).w,a0			; current palette (starts as all white)
		lea	(v_pal_dry_next).w,a1			; target palette
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

	.decolor:
		bsr.s	WhiteIn_DecColor			; lower RGB levels (until they match target palette)
		dbf	d0,.decolor				; repeat for size of palette

		tst.b	(f_water).w				; does level have water?
		beq.s	.exit					; if not, branch

		moveq	#0,d0
		lea	(v_pal_water).w,a0
		lea	(v_pal_water_next).w,a1
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

	.decolor_water:
		bsr.s	WhiteIn_DecColor			; lower RGB levels for underwater palette
		dbf	d0,.decolor_water			; repeat for size of palette

	.exit:
		rts
; ===========================================================================

WhiteIn_DecColor:
.deblue:
		move.w	(a1)+,d2				; d2 = target color
		move.w	(a0),d3					; d3 = current color
		cmp.w	d2,d3
		beq.s	.next					; branch if perfect match

		move.w	d3,d1
		subi.w	#$200,d1				; decrease blue	value
		bcs.s	.degreen				; branch if already 0
		cmp.w	d2,d1
		blo.s	.degreen				; branch if blue already matched
		move.w	d1,(a0)+				; update blue
		rts	
; ===========================================================================

.degreen:
		move.w	d3,d1
		subi.w	#$20,d1					; decrease green value
		bcs.s	.dered					; branch if already 0
		cmp.w	d2,d1
		blo.s	.dered					; branch if green already matched
		move.w	d1,(a0)+				; update green
		rts	
; ===========================================================================

.dered:
		subq.w	#2,(a0)+				; decrease red value
		rts	
; ===========================================================================

.next:
		addq.w	#2,a0					; next color
		rts

; ---------------------------------------------------------------------------
; Subroutine to fade to white (Special Stage)

;	uses d0.l, d1.w, d2.w, d4.w, d5.l, d6.l, d7.w, a0, a1, a3
; ---------------------------------------------------------------------------

PaletteWhiteOut:
		move.w	#palfade_all,(v_palfade_start).w	; start position = 0; size = $40 ($3F)
		move.w	#(7*3),d4				; max number of color changes needed (000 to $EEE)

	.mainloop:
		move.b	#id_VBlank_Fade,(v_vblank_routine).w
		bsr.w	WaitForVBlank				; wait for frame to end
		bsr.s	WhiteOut_ToWhite			; update palette
		bsr.w	RunPLC					; decompress gfx if PLC contains anything
		dbf	d4,.mainloop
		rts
; ===========================================================================

WhiteOut_ToWhite:
		moveq	#0,d0
		lea	(v_pal_dry).w,a0			; current palette
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

	.addcolor:
		bsr.s	WhiteOut_AddColor			; raise RGB levels
		dbf	d0,.addcolor				; repeat for size of palette

	if FixBugs
		; Just for the sake of consistency: no need to do this if
		; if not a water level.	
		tst.b	(f_water).w				; does level have water?
		beq.s	.exit					; if not, exit
	endc

		moveq	#0,d0
		lea	(v_pal_water).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

	.addcolor_water:
		bsr.s	WhiteOut_AddColor			; raise RGB levels for underwater palette
		dbf	d0,.addcolor_water			; repeat for size of palette
	
	.exit:	
		rts
; ===========================================================================

WhiteOut_AddColor:
.addred:
		move.w	(a0),d2					; d2 = current color
		cmpi.w	#cWhite,d2
		beq.s	.next					; branch if already white

		move.w	d2,d1
		andi.w	#$E,d1					; d1 = red value
		cmpi.w	#cRed,d1
		beq.s	.addgreen				; branch if max value
		addq.w	#2,(a0)+				; increase red value
		rts	
; ===========================================================================

.addgreen:
		move.w	d2,d1
		andi.w	#$E0,d1					; d1 = green value
		cmpi.w	#cGreen,d1
		beq.s	.addblue				; branch if max value
		addi.w	#$20,(a0)+				; increase green value
		rts	
; ===========================================================================

.addblue:
		move.w	d2,d1
		andi.w	#$E00,d1				; d1 = blue value
		cmpi.w	#cBlue,d1
		beq.s	.next					; branch if max value
		addi.w	#$200,(a0)+				; increase blue	value
		rts	
; ===========================================================================

.next:
		addq.w	#2,a0					; next color
		rts

; ===========================================================================
; Unused Sonic 1 leftover: Sega Screen palette cycle routine and palettes
;PalCycle_Sega:
;PalCycle_Sega_Stripe:
		tst.b	(v_palcycle_time+1).w
		bne.s	PalCycle_Sega_Full			; branch if stripe animation is finished
		lea	(v_pal_dry_line2).w,a1			; address for 2nd palette line
		lea	(Pal_S1_Sega1).l,a0			; address of blue gradient palette source
		moveq	#6-1,d1					; 6-1
		move.w	(v_palcycle_num).w,d0			; d0 = -$A (initially)

	.loop_findcolor:
		bpl.s	.loop_colors				; branch if d0 = 0 
		addq.w	#2,a0					; read next colour from source
		subq.w	#1,d1
		addq.w	#2,d0					; increment d0
		bra.s	.loop_findcolor				; repeat until d0 = 0
; ===========================================================================

.loop_colors:
		move.w	d0,d2					; d0 = position within target palette
		andi.w	#$1E,d2
		bne.s	.no_skip
		addq.w	#2,d0					; skip 1 colour if at the start of a line (1st colour is transparent)

	.no_skip:
		cmpi.w	#sizeof_pal*3,d0
		bhs.s	.end_of_pal				; branch if at the end of the palettes
		move.w	(a0)+,(a1,d0.w)				; copy 1 colour from source to target

	.end_of_pal:
		addq.w	#2,d0
		dbf	d1,.loop_colors

		move.w	(v_palcycle_num).w,d0
		addq.w	#2,d0					; increment counter
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	.no_skip2
		addq.w	#2,d0					; skip 1 colour if at the start of a line

	.no_skip2:
		cmpi.w	#(sizeof_pal*3)+4,d0
		blt.s	.not_at_end				; branch if not at the end
		move.w	#$401,(v_palcycle_time).w		; set timer to 4 and set flag f_sega_pal_next
		moveq	#-(($C/2)*2),d0				; -$C

	.not_at_end:
		move.w	d0,(v_palcycle_num).w
		moveq	#1,d0
		rts	
; ===========================================================================

PalCycle_Sega_Full:
		subq.b	#1,(v_palcycle_time).w			; decrement timer
		bpl.s	.wait					; branch if time remains
		move.b	#4,(v_palcycle_time).w
		move.w	(v_palcycle_num).w,d0
		addi.w	#($C/2)*2,d0				; next batch of colours ($C)
		cmpi.w	#($C/2)*2*4,d0				; $30
		blo.s	.update					; branch if animation is incomplete
		moveq	#0,d0					; set flag when animation is complete
		rts	
; ===========================================================================

.update:
		move.w	d0,(v_palcycle_num).w			; update counter
		lea	(Pal_S1_Sega2).l,a0
		lea	(a0,d0.w),a0				; jump to source palette
		lea	(v_pal_dry_line1+(2*2)).w,a1		; start on first palette line, 3rd colour
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.w	(a0)+,(a1)				; write 5 colours
		lea	(v_pal_dry_line2).w,a1
		moveq	#0,d0
		moveq	#((countof_color-1)*3)-1,d1		; colors in 3 lines (without transparent), minus 1 ($2C)

	.loop_fill:
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	.no_skip
		addq.w	#2,d0					; skip 1 colour if at the start of a line

	.no_skip:
		move.w	(a0),(a1,d0.w)				; write colour
		addq.w	#2,d0					; next colour
		dbf	d1,.loop_fill				; repeat for lines 2, 3, and 4 (ignoring transparent)

.wait:
		moveq	#1,d0					; set flag for incomplete animation
		rts
; ===========================================================================

		incfile	Pal_S1_Sega1
		incfile	Pal_S1_Sega2
		
; end of dead code/data

; ---------------------------------------------------------------------------
; Subroutine to load palette that will be used after fading in

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_2712: PalLoad1: PalLoad_ForFade:
PalLoad_Next:						
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		adda.w	#v_pal_dry_next-v_pal_dry,a3		; jump to next palette RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	


; ---------------------------------------------------------------------------
; Subroutine to load palette immediately

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_272E: PalLoad2:
PalLoad_Now:				
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	

; ---------------------------------------------------------------------------
; Subroutines to load underwater palette immediately

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_2746: PalLoad3_Water: PalLoad_Water_Now:
PalLoad_Water:				
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		suba.l	#v_pal_dry-v_pal_water,a3		; jump to underwater palette RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	

; ---------------------------------------------------------------------------
; Subroutines to load underwater palette that will be used after fading in

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_2764: PalLoad4_Water: PalLoad_Water_ForFade:
PalLoad_Water_Next:				
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		suba.l	#v_pal_dry-v_pal_water_next,a3		; jump to next underwater palette RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	

;----------------------------------------------------------------------------
;Palette Pointers
;
;This structure	defines	the palette to use for each level. One entry per level.
;
;0x00 -	0x04: Pointer to palette
;0x04 -	0x06: Location in ram to load palette into
;0x06 -	0x08: Size of palette in (bytes	/ 4)
;----------------------------------------------------------------------------

palp:	macro paladdress,secondpaladdress,alias,ramaddress
	
	ifarg \alias
		id_\alias:	equ (*-PalPointers)/8		; create alternate ID constant for duplicate pointers (used in empty/unused level load table entries)
	else	
		id_\paladdress:	equ (*-PalPointers)/8
	endc	
		dc.l \paladdress
		
	ifarg \secondpaladdress
		dc.w \ramaddress,(sizeof_\paladdress\+sizeof_\secondpaladdress\)/4-1	
	else
		dc.w \ramaddress,sizeof_\paladdress\/4-1
	endc	
	endm	
		
		
PalPointers:	
		palp Pal_Sega,,,v_pal_dry_line1
		palp Pal_Title,,,v_pal_dry_line2
		palp Pal_MenuB,,,v_pal_dry_line1
		palp Pal_Sonic_Miles_BG1,Pal_Sonic_Miles_BG2,,v_pal_dry_line1
		
		palp Pal_EHZ,,,v_pal_dry_line2
		palp Pal_EHZ,,Pal_EHZ2,v_pal_dry_line2
		palp Pal_WZ,,,v_pal_dry_line2
		palp Pal_EHZ,,Pal_EHZ3,v_pal_dry_line2
		palp Pal_MTZ,,,v_pal_dry_line2
		palp Pal_MTZ,,Pal_MTZ2,v_pal_dry_line2
		palp Pal_WFZ,,,v_pal_dry_line2	
		palp Pal_HTZ,,,v_pal_dry_line2
		palp Pal_HPZ,,,v_pal_dry_line2
		palp Pal_EHZ,,Pal_EHZ4,v_pal_dry_line2
		palp Pal_OOZ,,,v_pal_dry_line2
		palp Pal_MCZ,,,v_pal_dry_line2
		palp Pal_CNZ,,,v_pal_dry_line2
		palp Pal_CPZ,,,v_pal_dry_line2		
		palp Pal_DEZ,,,v_pal_dry_line2
		palp Pal_ARZ,,,v_pal_dry_line2
		palp Pal_SCZ,,,v_pal_dry_line2
		
		palp Pal_HPZ_U,,,v_pal_dry_line1
		palp Pal_CPZ_U,,,v_pal_dry_line1
		palp Pal_ARZ_U,,,v_pal_dry_line1
	
		palp Pal_SS,,,v_pal_dry_line1
		palp Pal_MCZ_B,,,v_pal_dry_line2
		palp Pal_CNZ_B,,,v_pal_dry_line2
		palp Pal_SS1,,,v_pal_dry_line4
		palp Pal_SS2,,,v_pal_dry_line4
		palp Pal_SS3,,,v_pal_dry_line4
		palp Pal_SS4,,,v_pal_dry_line4
		palp Pal_SS5,,,v_pal_dry_line4
		palp Pal_SS6,,,v_pal_dry_line4
		palp Pal_SS7,,,v_pal_dry_line4
		
		palp Pal_SS1_2p,,,v_pal_dry_line4
		palp Pal_SS2_2p,,,v_pal_dry_line4
		palp Pal_SS3_2p,,,v_pal_dry_line4
		
		palp Pal_OOZ_B,,,v_pal_dry_line2
		palp Pal_Menu,,,v_pal_dry_line1
		palp Pal_Result,,,v_pal_dry_line1
		


		incfile	Pal_Sega
		incfile	Pal_Title
		incfile	Pal_MenuB
		incfile	Pal_Sonic_Miles_BG1
		incfile	Pal_Sonic_Miles_BG2
		incfile	Pal_EHZ
		incfile	Pal_WZ
		incfile	Pal_MTZ
		incfile	Pal_WFZ
		incfile	Pal_HTZ
		incfile	Pal_HPZ
		incfile	Pal_HPZ_U
		incfile	Pal_OOZ
		incfile	Pal_MCZ
		incfile	Pal_CNZ
		incfile	Pal_CPZ
		incfile	Pal_CPZ_U
		incfile	Pal_DEZ
		incfile	Pal_ARZ
		incfile	Pal_ARZ_U
		incfile	Pal_SCZ
		incfile	Pal_MCZ_B
		incfile	Pal_CNZ_B
		incfile	Pal_OOZ_B
		incfile	Pal_Menu
		incfile	Pal_SS
		incfile	Pal_SS1
		incfile	Pal_SS2
		incfile	Pal_SS3
		incfile	Pal_SS4
		incfile	Pal_SS5
		incfile	Pal_SS6
		incfile	Pal_SS7
		incfile	Pal_SS1_2p
		incfile	Pal_SS2_2p
		incfile	Pal_SS3_2p
		incfile	Pal_Result
		
; ===========================================================================
	if Revision<2
		nop	
	endc
; ===========================================================================

WaitForVBlank:				
		enable_ints

	.wait:				
		tst.b	(v_vblank_routine).w			; has VBlank routine finished?
		bne.s	.wait					; if not, branch
		rts	


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to generate a pseudo-random number

; output:
;	d0 = pseudo-random number  (RNG & $FFFF0000) | ((RNG*41 & $FFFF) + ((RNG*41 & $FFFF0000) >> 16))
;	d1 = d0 with high/low words swapped
;	RNG = ((RNG*41 + ((RNG*41 & $FFFF) << 16)) & $FFFF0000) | (RNG*41 & $FFFF)
; ---------------------------------------------------------------------------
; sub_3390:
RandomNumber:				
		move.l	(v_random).w,d1
		bne.s	.scramble				; if d1 is not 0, branch
		move.l	#$2A6D365A,d1				; if d1 is 0, use this seed number

	.scramble:
		; set the high word of d0 to be the high word of the RNG
		; and multiply the RNG by 41			
		move.l	d1,d0
		asl.l	#2,d1
		add.l	d0,d1
		asl.l	#3,d1
		add.l	d0,d1
		
		; add the low word of the RNG to the high word of the RNG
		; and set the low word of d0 to be the result
		move.w	d1,d0
		swap	d1
		add.w	d1,d0
		move.w	d0,d1
		swap	d1
		
		move.l	d1,(v_random).w
		rts	


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to convert an angle (0 to $FF) to sine and cosine (-$100 to $100)

; input:
;	d0 = angle (360 degrees == 256)

; output:
;	d0 = sine
;	d1 = cosine
; ---------------------------------------------------------------------------
; sub_33B6:
CalcSine:				
		andi.w	#$FF,d0					; read low byte of angle only
		add.w	d0,d0
		addi.w	#$80,d0					; start 90 degrees later for cosine
		move.w	Sine_Data(pc,d0.w),d1			; get cosine
		subi.w	#$80,d0					; start at 0 for sine
		move.w	Sine_Data(pc,d0.w),d0			; get sine
		rts	

; ---------------------------------------------------------------------------
; word_33CE:
Sine_Data:	incbin "misc/Sine & Cosine Waves.bin"
			incbin "misc/Sine & Cosine Waves.bin",,$80 ; First $80 bytes are duplicated at the end of the table!

; ---------------------------------------------------------------------------

; sub_364E:
CalcAngle:				
		pushr.l	d3-d4
		moveq	#0,d3
		moveq	#0,d4
		move.w	d1,d3					; d3 = x distance
		move.w	d2,d4					; d4 = y distance
		or.w	d3,d4
		beq.s	CalcAngle_Both0				; branch if both are 0
		move.w	d2,d4
		tst.w	d3
		bpl.w	.x_positive				; branch if x is positive
		neg.w	d3					; force x positive

	.x_positive:				
		tst.w	d4
		bpl.w	.y_positive				; branch if y is positive
		neg.w	d4					; force y positive

	.y_positive:				
		cmp.w	d3,d4
		bcc.w	.y_larger				; branch if y is larger or same
		lsl.l	#8,d4
		divu.w	d3,d4					; d4 = (y*$100)/x
		moveq	#0,d0
		move.b	Angle_Data(pc,d4.w),d0
		bra.s	CalcAngle_ChkRotation
; ===========================================================================

	.y_larger:				
		lsl.l	#8,d3
		divu.w	d4,d3
		moveq	#$40,d0					; d3 = (x*$100)/y
		sub.b	Angle_Data(pc,d3.w),d0

	CalcAngle_ChkRotation:				
		tst.w	d1
		bpl.w	.x_positive				; branch if x is positive
		neg.w	d0
		addi.w	#$80,d0

	.x_positive:				
		tst.w	d2
		bpl.w	.y_positive				; branch if x is positive
		neg.w	d0
		addi.w	#$100,d0

	.y_positive:				
		popr	d3-d4
		rts	
; ===========================================================================
; loc_36AA:
CalcAngle_Both0:				
		move.w	#$40,d0
		popr	d3-d4
		rts	

Angle_Data:	incbin "misc/Angle Table.bin"
; ===========================================================================

	if Revision<2
		nop	
	endc

; ===========================================================================

GM_Sega:

sega_bg_width:	equ $28						
sega_bg_height:	equ $1C
;sega_fg_width:	equ $28						; fg dimensions - white box with logo cutout
;sega_fg_height:	equ $1C		

		move.b	#cmd_Stop,d0	
		bsr.w	PlayMusic				; stop music
		bsr.w	ClearPLC				; clear the PLC buffer
		bsr.w	PaletteFadeOut				; fade palette to black

		clear_ram misc_variables,misc_variables_end	; clear misc_variables block
		clear_ram ost,ost_end				; clear the OST

		; Configure the VDP for the Sega Screen.
		lea	(vdp_control_port).l,a6
		move.w	#vdp_md_color,(a6)
		move.w	#vdp_fg_nametable+(vram_sega_fg>>10),(a6) ; $8230 ; set fg nametable at $C000
		move.w	#vdp_bg_nametable+(vram_sega_bg>>13),(a6) ; $8405 ; set bg nametable at $A000
		move.w	#vdp_bg_color+0,(a6)
		move.w	#vdp_full_vscroll|vdp_1px_hscroll,(a6)	; vscroll by screen. hscroll by line
		move.w	#vdp_320px_screen_width,(a6)		; H40 mode
		move.w	#vdp_plane_width_128|vdp_plane_height_32,(a6) ; 128x32 plane size
		clr.b	(f_water_pal_full).w
		clr.w	(f_two_player).w
		disable_ints
		disable_display
		bsr.w	ClearScreen				; clear VRAM nametables and sprite, vscroll, and hscroll buffers

		dma_fill	0,sizeof_vram_planetable_128x32,vram_sega_fg ; clear the FG table we just configured
		
		vdp_comm.l	move,vram_SEGA,vram,write,(vdp_control_port).l
		lea	(Nem_SEGA).l,a0				; load Sega logo patterns
		bsr.w	NemDec
		
		vdp_comm.l	move,vram_IntroTrails,vram,write,(vdp_control_port).l
		lea	(Nem_IntroTrails).l,a0			; load blue streaks
		bsr.w	NemDec
		
		; This gets overwritten by the upscaled Sonic sprite. This may have
		; been used to test the Sega screen before the sprite upscaling logic
		; was added.
		vdp_comm.l	move,vram_Giant_Sonic,vram,write,(vdp_control_port).l		
		lea	(Nem_MechaSonic).l,a0			; load Mecha Sonic
		bsr.w	NemDec
		
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_SEGA).l,a0				; load Sega logo mappings
		move.w	#vram_start,d0
		bsr.w	EniDec
		
		lea	(v_128x128_tiles).l,a1
		vdp_comm.l	move,vram_sega_bg,vram,write,d0			
		moveq	#sega_bg_width-1,d1
		moveq	#sega_bg_height-1,d2
		bsr.w	TilemapToVRAM_128_Sega			; copy Sega logo mappings to VRAM
		
		tst.b	(v_console_region).w			; is this a Japanese Mega Drive or Korean Super Gam*Boy?
		bmi.s	.loadpal				; if so, branch

		lea	(v_ost_sega_hide_tm).w,a1		; load extra sprite to hide TM symbol
		move.b	#id_SegaHideTM,ost_id(a1)
		move.b	#$4E,ost_subtype(a1)

	.loadpal:				
		moveq	#id_Pal_Sega,d0
		bsr.w	PalLoad_Now				; load sega logo palette
		move.w	#$FFF6,(v_palcycle_num).w
		move.w	#0,(v_palcycle_time).w
		move.w	#0,(v_segascr_vblank_sub).w
		move.w	#0,(f_segascr_paldone).w
		lea	(v_ost_sega_screen).w,a1
		move.b	#id_SonicSegaScreen,ost_id(a1)		; load Sega Screen Sonic object
		move.b	#$4C,ost_subtype(a1)
		move.w	#4*60,(v_countdown).w
		enable_display

	.waitpal:				
		move.b	#id_VBlank_Sega,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsrto	ExecuteObjects,JmpTo_ExecuteObjects
		jsr	BuildSprites
		tst.b	(f_segascr_paldone).w
		beq.s	.waitpal
	if FixBugs=0
		; This is a leftover from Sonic 1: SonicSegaScreen plays the Sega sound now.
		; Normally, you'll only hear one Sega sound, but the game actually tries
		; to play it twice. The only reason it doesn't is because the sound
		; queue only has room for one sound per frame. Some custom sound
		; drivers don't have this limitation, however, and the sound will
		; indeed play twice in those.	
		move.b	#cmd_Sega,d0
		bsr.w	PlaySound
	endc	
		move.b	#id_VBlank_Sega,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	#3*60,(v_countdown).w			; 3 seconds

	.waitend:				
		move.b	#id_VBlank_PCM,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		tst.w	(v_countdown).w				; is there time left?
		beq.s	.goto_title				; if not, go to title screen
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#btnStart,d0				; is start button pressed on either joypad?
		beq.s	.waitend				; if so, go to title screen

	.goto_title:				
		clr.w	(f_segascr_paldone).w
		clr.w	(v_segascr_vblank_sub).w
		move.b	#id_Title,(v_gamemode).w		; go to Title Screen
		rts	

; ===========================================================================

TilemapToVRAM_128_Sega:
		; Exactly identical to the one used in the Special Stages.				
		lea	(vdp_data_port).l,a6
		move.l	#sizeof_vram_row_128<<16,d4		; d4 = $1000000

	.loop_row:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)	; move d0 to vdp_control_port
		move.w	d1,d3

	.loop_cell:				
		move.w	(a1)+,(a6)				; write value to nametable
		dbf	d3,.loop_cell				; next tile
		add.l	d4,d0					; goto next line
		dbf	d2,.loop_row				; next line
		rts	

; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo_ExecuteObjects:				
		jmp	ExecuteObjects
		
		align 4	
	endc
	
; ===========================================================================

GM_Title:				
		move.b	#cmd_Stop,d0
		bsr.w	PlayMusic				; stop music
		bsr.w	ClearPLC				; clear the PLC quque
		bsr.w	PaletteFadeOut				; fade screen to black
		disable_ints

		; configure the VDP for the Title Screen
		lea	(vdp_control_port).l,a6
		move.w	#vdp_md_color,(a6)			; disable horizontal interrupts
		move.w	#vdp_fg_nametable+(vram_title_fg>>10),(a6) ; set FG nametable at $C000
		move.w	#vdp_bg_nametable+(vram_title_bg>>13),(a6) ; set BG nametable at $E000
		move.w	#vdp_plane_width_64|vdp_plane_height_32,(a6) ; 64x32 plane size
		move.w	#vdp_window_y_pos,(a6)			; disable window plane
		move.w	#vdp_full_vscroll|vdp_1px_hscroll,(a6)	; vscroll by screen. hscroll by line
		move.w	#vdp_bg_color+32,(a6)			; BG color is Line 2, Color 1	
		clr.b	(f_water_pal_full).w
		move.w	#vdp_320px_screen_width,(a6)		; H40 mode
		
		bsr.w	ClearScreen				; clear VRAM nametables and sprite, vscroll, and hscroll buffers

		clear_ram	v_sprite_queue,v_sprite_queue_end
		clear_ram	ost,ost_end
		clear_ram	misc_variables,misc_variables_end
		clear_ram	camera_ram,camera_ram_end

		vdp_comm.l	move,vram_CreditsFont,vram,write,(vdp_control_port).l					
		lea	(Nem_CreditsFont).l,a0			; load the credits font
		bsr.w	NemDec

		lea	(CreditTextPointers).l,a1		; load the "SONIC AND MILES 'TAILS' PROWER IN" text
		jsr	DisplayText		

		clear_ram	palette_fade_buffer,palette_fade_buffer_end ; clear the palette fade buffer (filling it with black)
		moveq	#id_Pal_Sonic_Miles_BG1,d0		; load Sonic and Tails' palette
		bsr.w	PalLoad_Next
		bsr.w	PaletteFadeIn				; fade in, displaying the text that was just loaded

		disable_ints					; disable interrupts again, as PaletteFadeIn enabled then

		; load title screen assets while above text is displayed
		vdp_comm.l	move,vram_Title,vram,write,(vdp_control_port).l			
		lea	(Nem_Title).l,a0
		bsr.w	NemDec
		
		vdp_comm.l	move,vram_TitleSprites,vram,write,(vdp_control_port).l		
		lea	(Nem_TitleSprites).l,a0
		bsr.w	NemDec
		
		vdp_comm.l	move,vram_MenuJunk,vram,write,(vdp_control_port).l			
		lea	(Nem_MenuJunk).l,a0
		bsr.w	NemDec
		
		vdp_comm.l	move,vram_Player1VS2,vram,write,(vdp_control_port).l			
		lea	(Nem_Player1VS2).l,a0
		bsr.w	NemDec
		
		vdp_comm.l	move,vram_StandardFont_TtlScr,vram,write,(vdp_control_port).l			
		lea	(Nem_StandardFont).l,a0
		bsr.w	NemDec

		; clear some variables
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		move.w	#0,(v_debug_active).w
		move.w	#0,(f_demo_mode).w
		move.w	#0,(v_unknown_titlescrn).w
		move.w	#0,(v_palcycle_time).w
		move.w	#0,(f_two_player).w
		move.b	#0,(f_level_started).w

		; fade out
		bsr.w	PaletteFadeOut
		
		disable_ints					; disable interrupts again, as PaletteFadeOut enabled them

		; load more title screen assets
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_TitleScreen).l,a0			; title screen background mappings (sky/island) 
		move.w	#(vram_Title/sizeof_cell)+tile_pal3,d0 
		bsr.w	EniDec
		
		lea	(v_128x128_tiles).l,a1
		vdp_comm.l	move,vram_title_bg,vram,write,d0	
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsrto	TilemapToVRAM,TilemapToVRAM

		lea	(v_128x128_tiles).l,a1
		lea	(Eni_TitleBack).l,a0			; title screen background mappings (horizon/water)
		move.w	#(vram_Title/sizeof_cell)+tile_pal3,d0
		bsr.w	EniDec

		lea	(v_128x128_tiles).l,a1
		vdp_comm.l	move,(vram_title_bg+(2*40)),vram,write,d0 ; VRAM write starting at $E050 (Line 0 Column 40)
		moveq	#24-1,d1
		moveq	#28-1,d2
		jsrto	TilemapToVRAM,TilemapToVRAM

		lea	(v_128x128_tiles).l,a1
		lea	(Eni_TitleLogo).l,a0			; title screen logo mappings
		move.w	#(vram_Title*sizeof_cell)+tile_pal4+tile_hi,d0
		bsr.w	EniDec
		
		lea	(v_128x128_tiles+((sizeof_vram_row_64*16)+(2*44))).l,a1 ; add the copyright text to logo mappings at Line 16, Column 44
		lea	(CopyrightText).l,a2
		moveq	#((sizeof_CopyrightText)/2)-1,d6

	.load_copyright_text:				
		move.w	(a2)+,(a1)+
		dbf	d6,.load_copyright_text
		
		lea	(v_128x128_tiles).l,a1
		vdp_comm.l	move,vram_title_fg,vram,write,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsrto	TilemapToVRAM,TilemapToVRAM
		
		clear_ram	palette_buffer,palette_fade_buffer_end ; clear the entire palette buffer
		
		moveq	#id_Pal_Title,d0			; load title screen palette
		bsr.w	PalLoad_Next
		
		; clear more variables
		move.b	#0,(f_debug_enable).w
		move.w	#0,(f_two_player).w
		
		move.w	#(10*60)+40,(v_countdown).w		; time that the title screen lasts (640 frames)
		
		clr.w	(v_joypad_hold_actual).w		; clear input to prevent leftover input from skipping the intro
		
		move.b	#id_TitleIntro,(v_title_sonic+ost_id).w	; load TitleIntro object (manages the entire intro animation)
		move.b	#type_titleintro_sonic,(v_title_sonic+ost_subtype).w ; set to subtype 2
		
		jsr	ExecuteObjects				; run for a frame to allow it to initialize
		jsr	BuildSprites
		
		moveq	#id_PLC_Main,d0				; load standard PLCs
		bsr.w	NewPLC
		
		move.w	#0,(v_correct_cheat_entries).w		; reset cheat inputs
		move.w	#0,(v_correct_cheat_entries_2).w
		
		rept 6
		nop						; why?
		endr
		
		move.w	#4,(v_sonic_pos_tracker_num).w		; reset Sonic's position recording buffer
		move.w	#0,(v_sonic_pos_tracker).w
		
		lea	(v_ehz_results_2p).w,a1			; fill the 2P results data with 1's
		moveq	#((two_player_results_data_end-two_player_results_data)/2)-1,d0 ; $B

	.fill_2P_results:				
		move.w	#-1,(a1)+
		dbf	d0,.fill_2P_results
		
		move.w	#-$280,(v_camera_x_pos).w		; initialize the camera
		enable_display
		bsr.w	PaletteFadeIn				; fade in the palette

Title_MainLoop:								
		move.b	#4,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsrto	Deform_TitleScreen,JmpTo_Deform_TitleScreen
		jsr	BuildSprites
		
		; Find the masking sprite, and move it to the proper location. The
		; sprite is normally at X 128+128, but in order to perform masking,
		; it must be at X 0.
		; The masking sprite is used to stop Sonic and Tails from overlapping
		; the emblem.
		; You might be wondering why it alternates between 0 and 4 for the X
		; position. That's because masking sprites only work if another
		; sprite rendered before them (or if the previous scanline reached
		; its pixel limit). Because of this, a sprite is placed at X 4 before
		; a second one is placed at X 0.

		lea	(v_sprite_buffer+4).w,a1
		moveq	#0,d0
		
		moveq	#((v_sprite_buffer_end-v_sprite_buffer)/8)-1,d6

	.findmask_loop:				
		tst.w	(a1)					; the masking sprite has its art-tile set to $0000.
		bne.s	.not_mask				; if this isn't it, branch
		bchg	#2,d0					; Alternate between X positions of 0 and 4.
		move.w	d0,2(a1)

	.not_mask:				
		addq.w	#sizeof_sprite,a1			; check the next entry in the sprite buffer
		dbf	d6,.findmask_loop

		bsr.w	RunPLC					; run PLCs
		bsr.w	TailsNameCheat				; check Miles/Tails name cheat
		
		tst.w	(v_countdown).w				; has counter hit 0?  (started at 640)
		beq.w	PlayDemo				; if so, branch
		
		tst.b	(v_title_sonic+ost_titleintro_complete).w ; is intro animation still playing?
		beq.w	Title_MainLoop				; if so, branch (don't want start button starting the game)

		move.b	(v_joypad_press_actual).w,d0		; get joypad states
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#btnStart,d0				; is start button pressed on either pad?
		beq.w	Title_MainLoop				; if not, branch


		; If start button was pressed, it's time to enter enter one player mode, 
		; two player mode, or the options menu.
		move.b	#id_Level,(v_gamemode).w		; set game mode to $C (1P mode) 

		move.b	#3,(v_lives).w				; set lives to 3
		move.b	#3,(v_lives_p2).w			; (both players)
		
		moveq	#0,d0
		move.w	d0,(v_rings).w				; clear rings
		move.l	d0,(v_time).w				; clear time
		move.l	d0,(v_score).w				; clear score
		move.w	d0,(v_rings_p2).w			; (both players for all three)
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.b	d0,(v_continues).w			; clear continues
		
		move.l	#points_for_life,(v_score_next_life).w	; extra life is awarded at 50000 point
		move.l	#points_for_life,(v_score_next_life_p2).w ; (both players)

		move.b	#cmd_Fade,d0				; fade out music
		bsr.w	PlaySound
		
		moveq	#0,d0
		move.b	(v_title_screen_option).w,d0		; get title screen option selection
		
		bne.s	Title_ChkSelection			; if not a 1-player game, branch
		moveq	#0,d0
		move.w	d0,(f_two_player_mode_copy).w		; clear 2P mode flags
		move.w	d0,(f_two_player).w				
		move.w	d0,(v_zone).w				; set level to Emerald Hill Act 1
		tst.b	(f_levelselect_cheat).w			; has level select cheat been entered?
		beq.s	.nocheat				; if not, branch
		btst	#bitA,(v_joypad_hold_actual).w		; is button A held?
		beq.s	.nocheat				; if not, branch
		move.b	#id_LevelSelectMenu,(v_gamemode).w	; set gamemode to $28 (Level Select Menu) 
		rts	
; ===========================================================================

	.nocheat:					
		move.w	d0,(v_special_stage).w			; clear Special Stage index
		move.w	d0,(f_got_emerald).w			; clear got emerald flag
		move.l	d0,(v_emerald_list).w			; clear the emerald list
		move.l	d0,(v_emerald_list+4).w
		rts	
; ===========================================================================

Title_ChkSelection:				
		subq.b	#1,d0					; results in 0 if 2P was selected 		
		bne.s	.chose_options				; if Options was selected, branch
		
		moveq	#1,d1
		move.w	d1,(f_two_player_mode_copy).w		; set 2P mode flags
		move.w	d1,(f_two_player).w
		
		moveq	#0,d0
		move.w	d0,(f_got_emerald).w		
		move.l	d0,(v_emerald_list).w			; clear got emerald flag
		move.l	d0,(v_emerald_list+4).w			; clear the emerald list
		move.b	#id_LevelSelectMenu2P,(v_gamemode).w	; set gamemode to $1C (2P Level Select)
		move.b	#0,(v_zone_2p).w			; clear 2P zone index
		rts	
; ===========================================================================

	.chose_options:				
		move.b	#id_OptionsMenu,(v_gamemode).w		; set gamemode to $24 (Options Menu)
		move.b	#0,(v_options_menu_box).w		; clear Options Menu selection
		rts	
; ===========================================================================

PlayDemo:				
		move.b	#cmd_Fade,d0				; fade out music
		bsr.w	PlaySound	
		move.w	(v_demo_num).w,d0			; load demo number
		andi.w	#7,d0
		add.w	d0,d0
		move.w	DemoLevelArray(pc,d0.w),d0		; load level number for	demo
		move.w	d0,(v_zone).w
		addq.w	#1,(v_demo_num).w			; add 1 to demo number
		cmpi.w	#4,(v_demo_num).w			; is demo number less than 4?
		bcs.s	.demo_0_to_3				; if so, branch
		move.w	#0,(v_demo_num).w

	.demo_0_to_3:				
		move.w	#1,(f_demo_mode).w			; set demo mode flag
		move.b	#id_Demo,(v_gamemode).w			; set gamemode to 8 (demo)
		cmpi.w	#id_EHZ,(v_zone).w			; is it is the EHZ demo?
		bne.s	demo_level				; if not, branch
		move.w	#1,(f_two_player).w			; set 2P mode flag for EHZ 2P demo

	demo_level:				
		move.b	#lives_start,(v_lives).w		; set lives to 3
		move.b	#lives_start,(v_lives_p2).w		; (both players)
		moveq	#0,d0
		move.w	d0,(v_rings).w				; clear rings
		move.l	d0,(v_time).w				; clear time
		move.l	d0,(v_score).w				; clear score
		move.w	d0,(v_rings_p2).w			; (both players for all three)
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.l	#points_for_life,(v_score_next_life).w
		move.l	#points_for_life,(v_score_next_life_p2).w
		rts	
; ===========================================================================

DemoLevelArray:
		dc.w	id_EHZ_act1				; Emerald Hill Zone, Act 1
		dc.w	id_CPZ_act1				; Chemical Plant Zone, Act 1
		dc.w	id_ARZ_act1				; Aquatic Ruin Zone, Act 1
		dc.w	id_CNZ_act1				; Casino Night Zone, Act 1

; sub_3DB4:
TailsNameCheat:
		; If entered successfully, flips console_region_bit between
		; Japan/Korea and international. This affects the presence of 
		; trademark symbols, and causes Tails' name to swap between 'Tails' and 'Miles'.
		
		lea	(TailsNameCode).l,a0			; load cheat button array
		move.w	(v_correct_cheat_entries).w,d0		; get cheat entry counter
		adda.w	d0,a0					; add to address to get position in array
		move.b	(v_joypad_press_actual).w,d0		; get joypad press state
		andi.b	#btnUp|btnDn|btnL|btnR,d0		; only need D-pad presses
		beq.s	.exit					; if D-pad is not pressed, exit
		cmp.b	(a0),d0					; does currently pressed button match current button in array?
		bne.s	.clearcheatentries			; if not, reset cheat entries
		addq.w	#1,(v_correct_cheat_entries).w		; if it does, increment cheat entries
		tst.b	1(a0)					; is next entry the end of the array?
		bne.s	.exit					; if not, exit
		
	;.success:
		bchg	#console_region_bit,(v_console_region).w ; flip console_region_bit
		move.b	#sfx_Ring,d0				; play Ring sound
		bsr.w	PlaySound

	.clearcheatentries:				
		move.w	#0,(v_correct_cheat_entries).w		; clear cheat entry counter

	.exit:				
		rts	

TailsNameCode:	
		dc.b	btnUp,btnDn,btnDn,btnDn,btnUp,0	
		even
		
; ===========================================================================		

		incfile	Nem_Player1VS2				; ArtNem_3DF4:
	
	; Remap ACSII text to the custom character set used by the copyright text
copyrightstr:		macro
		cpyrght_str:	equs \1			

		rept strlen(\1)					; repeat for length of string
		cpyrght_chr:	substr ,1,"\cpyrght_str"	; get current character
		cpyrght_str:	substr 2,,"\cpyrght_str"	; advance to next character in string
	
		if strcmp(" ","\cpyrght_chr")
			dc.w	0
		elseif	instr("0123456789","\cpyrght_chr")
			dc.w	(vram_StandardFont_TtlScr/sizeof_cell)+("\cpyrght_chr"-$30)
		elseif	instr("*","\cpyrght_chr")
			dc.w	(vram_StandardFont_TtlScr/sizeof_cell)+("\cpyrght_chr"-$2A)
		elseif	instr("@","\cpyrght_chr")
			dc.w	(vram_StandardFont_TtlScr/sizeof_cell)+("\cpyrght_chr"-$35) ; @ = copyright symbol	
		elseif	instr(":","\cpyrght_chr")
			dc.w	(vram_StandardFont_TtlScr/sizeof_cell)+("\cpyrght_chr"-$2E)
		elseif	instr(".","\cpyrght_chr")
			dc.w	(vram_StandardFont_TtlScr/sizeof_cell)+("\cpyrght_chr"-$21)		
		elseif	instr("ABCDEFGHIJKLMNOPQRSTUVWXYZ","\cpyrght_chr")
			dc.w	(vram_StandardFont_TtlScr/sizeof_cell)+("\cpyrght_chr"-$33)
		else 	
			inform 3,"Invalid character in Title Screen copyright text (must be uppercase letter, numeral, '*', '@', ' ;', or '.')."
		endc
		endr
		endm
		
CopyrightText:	
		copyrightstr	"@ 1992 SEGA"
		arraysize CopyrightText
; ===========================================================================

	if RemoveJmpTos=0
JmpTo_Deform_TitleScreen:				
		jmp	Deform_TitleScreen

		align 4
	endc

; ===========================================================================		
;----------------------------------------------------------------------------
;1P Music Playlist
;----------------------------------------------------------------------------

MusicList:	
		dc.b mus_EHZ					; EHZ
		dc.b mus_EHZ					; unused
		dc.b mus_MTZ					; unused
		dc.b mus_OOZ					; unused
		dc.b mus_MTZ					; MTZ Acts 1 and 2
		dc.b mus_MTZ					; MTZ Act 3
		dc.b mus_WFZ					; WFZ
		dc.b mus_HTZ					; HTZ
		dc.b mus_HPZ					; unused
		dc.b mus_SCZ					; unused
		dc.b mus_OOZ					; OOZ
		dc.b mus_MCZ					; MCZ
		dc.b mus_CNZ					; CNZ
		dc.b mus_CPZ					; CPZ
		dc.b mus_DEZ					; DEZ
		dc.b mus_ARZ					; ARZ
		dc.b mus_SCZ					; SCZ
		zonewarning MusicList,1
		even
		
;----------------------------------------------------------------------------
;2P Music Playlist
;----------------------------------------------------------------------------

MusicList2:	
		dc.b mus_EHZ_2P					; EHZ 2P
		dc.b mus_EHZ
		dc.b mus_MTZ					
		dc.b mus_OOZ
		dc.b mus_MTZ
		dc.b mus_MTZ
		dc.b mus_WFZ
		dc.b mus_HTZ
		dc.b mus_HPZ
		dc.b mus_SCZ
		dc.b mus_OOZ
		dc.b mus_MCZ_2P					; MCZ 2P
		dc.b mus_CNZ_2P					; CNZ 2P
		dc.b mus_CPZ
		dc.b mus_DEZ
		dc.b mus_ARZ
		dc.b mus_SCZ
		zonewarning MusicList2,1
		even
; ===========================================================================

GM_Level:						
		bset	#titlecard_flag_bit,(v_gamemode).w	; add $80 to gamemode (for pre level sequence)
		tst.w	(f_demo_mode).w				; is this an ending demo? (unused Sonic 1 leftover)
		bmi.s	.keep_music				; if by miracle it is, branch
		move.b	#cmd_Fade,d0				; fade out music
		bsr.w	PlaySound

	.keep_music:				
		bsr.w	ClearPLC				; clear the PLC buffer
		bsr.w	PaletteFadeOut				; fade out from previous gamemode
		tst.w	(f_demo_mode).w				; is this an ending demo? (unused Sonic 1 leftover)
		bmi.s	.clear_ram				; if by miracle it is, branch
		disable_ints
		bsr.w	ClearScreen
		jsr	LoadTitleCard				; load title card graphics
		enable_ints
		moveq	#0,d0
		move.w	d0,(v_frame_counter).w			; clear frame counter
		move.b	(v_zone).w,d0				; get current zone number

		add.w	d0,d0					; multiply by $12, the size of each level header, to get index
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0

		lea	(LevelHeaders).l,a2
		lea	(a2,d0.w),a2				; get the appropriate level header
		moveq	#0,d0
		move.b	(a2),d0					; get 1st PLC id for level
		beq.s	.no_plc					; if 0, branch
		bsr.w	AddPLC					; load the first PLC over the next few frames

	.no_plc:				
		moveq	#id_PLC_Main2,d0
		bsr.w	AddPLC					; load starpost, monitor, power-up, shield, and invincibility star graphics
		
		bsr.w	Level_SetPlayerMode			; set 1P or 2P mode

		moveq	#id_PLC_Miles1Up,d0			; load Miles 1-Up graphics
		tst.w	(f_two_player).w			; is it 2P mode?
		bne.s	.chk_region				; if it is, branch

		cmpi.w	#tails_alone,(v_player_mode).w		; is it a Tails alone game?
		bne.s	.clear_ram				; if not, branch
		addq.w	#id_PLC_MilesLife-id_PLC_Miles1up,d0	; load Miles Life graphics			

	.chk_region:				
		tst.b	(v_console_region).w			; is console Japanese/Korean?
		bpl.s	.notJPKR				; if not, branch
		addq.w	#id_PLC_Tails1Up-id_PLC_Miles1up,d0	; load the Tails version of either the 1-Up or Life graphics 

	.notJPKR:				
	 	bsr.w	AddPLC					; add to PLC queue
	
	; Level_ClrRam:
	.clear_ram:							
		clear_ram	v_sprite_queue,v_sprite_queue_end ; clear the sprite buffer
		clear_ram	ost,ost_level_only_end		; clear all object RAM
		clear_ram	misc_level_variables,misc_level_variables_end ; clear two large blocks of variables
		clear_ram	misc_variables,misc_variables_end
		clear_ram	synctables,synctables_end ; clear oscillating number tables  and synchronized animation counters
	
	if FixBugs
		clear_ram	v_cnz_saucer_data,v_cnz_saucer_data_end ; clear the CNZ saucer bumper data
	else
		; The '+C0' shouldn't be here; v_cnz_saucer_data is only $40 bytes, not $100
		clear_ram	v_cnz_saucer_data,v_cnz_saucer_data_end+$C0 ; clear the CNZ saucer bumper data, plus $C0 unused bytes beyond
	endc

		cmpi.w	#id_CPZ_act2,(v_zone).w			; is it CPZ Act 2?
		beq.s	.init_water				; if so, branch
		cmpi.b	#id_ARZ,(v_zone).w			; is it ARZ?
		beq.s	.init_water				; if so, branch
		cmpi.b	#8,(v_zone).w				; is it HPZ? (unused)
		bne.s	.level_vdp_setup			; if not, branch

	; Level_InitWater:
	.init_water:									
		move.b	#1,(f_water).w
		move.w	#0,(f_two_player).w

	.level_vdp_setup:
		; Configure the VDP for normal gameplay.				
		lea	(vdp_control_port).l,a6
		move.w	#vdp_full_vscroll|vdp_1px_hscroll,(a6)	; full screen vertical scrolling and single pixel horizontal scrolling
		move.w	#vdp_fg_nametable+(vram_fg>>10),(a6)	; foreground nametable at $C000
		move.w	#vdp_bg_nametable+(vram_bg>>13),(a6)	; background nametable at $E000
		move.w	#vdp_sprite_table+(vram_sprites>>9),(a6) ; sprite attribute table at $F800
		move.w	#vdp_plane_width_64|vdp_plane_height_32,(a6) ; 64x32 cell plane size	
		move.w	#vdp_md_color,(a6)			; normal color mode, horizontal interrupts disabled
		move.w	#vdp_bg_color+32,(a6)			; BG color is Line 2, Color 1
		move.w	#vdp_320px_screen_width,(a6)		; H40 mode, no interlace
		
		tst.b	(f_debug_cheat).w			; is debug cheat enabled?
		beq.s	.no_debug				; if not, branch
		btst	#bitC,(v_joypad_hold_actual).w		; is button C being held?
		beq.s	.c_not_held				; if not, branch
		move.w	#vdp_320px_screen_width|vdp_shadow_highlight,(a6) ; H40 mode, no interlace, shadow/highlight enabled

	.c_not_held:				
		btst	#bitA,(v_joypad_hold_actual).w		; is button A being held?
		beq.s	.no_debug				; if not, branch
		move.b	#1,(f_debug_enable).w			; enable debug mode

	.no_debug:								
		move.w	#vdp_hint_counter+(screen_height-1),(v_vdp_hint_counter).w ; horizontal interrupt every 224th scanline (changed appropriately with water level)
		tst.w	(f_two_player).w			; is it 2P mode?
		beq.s	.not_2P					; if not, branch

	;.2P_vdp_setup:
		; Configure VDP for 2P mode.
		move.w	#vdp_hint_counter+(((screen_height/2)-4)-1),(v_vdp_hint_counter).w ; horizontal interrupt every 108th scanline, providing 4 scanlines for HBlank to switch to drawing player 2's half of screen
		move.w	#vdp_md_color|vdp_enable_hint,(a6)	; normal color mode, horizontal interrupts enabled
		move.w	#vdp_320px_screen_width|vdp_interlace_x2,(a6) ; H40 mode, double height interlace

	.not_2P:				
		move.w	(v_vdp_hint_counter).w,(a6)
		reset_dma_queue					; clear and reset the DMA queue
		tst.b	(f_water).w				; does level have water?
		beq.s	.skip_water				; if not, branch
		move.w	#vdp_md_color|vdp_enable_hint,(a6)	; normal color mode, horizontal interrupts enabled
		moveq	#0,d0
		move.w	(v_zone).w,d0				; current zone and act
		subi.w	#id_HPZ_act1,d0	
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0				; make index
		lea	(WaterHeight).l,a1			; load water height array
		move.w	(a1,d0.w),d0
		move.w	d0,(v_water_height_actual).w		; set water heights
		move.w	d0,(v_water_height_normal).w
		move.w	d0,(v_water_height_next).w
		clr.b	(v_water_routine).w			; clear water routine counter
		clr.b	(f_water_pal_full).w			; clear water state
		move.b	#1,(v_water_direction).w		; enable water

	;Level_LoadPal:
	.skip_water:				
		moveq	#id_Pal_Sonic_Miles_BG1,d0
		bsr.w	PalLoad_Now				; load Sonic and Tails' palette
		tst.b	(f_water).w				; does level have water?
		beq.s	.set_bgm				; if not, branch

		moveq	#id_Pal_HPZ_U,d0
		cmpi.b	#id_HPZ,(v_zone).w			; is it HPZ? (unused)
		beq.s	.load_waterpal				; if so, branch
		moveq	#id_Pal_CPZ_U,d0			
		cmpi.b	#id_CPZ,(v_zone).w			; is it CPZ?
		beq.s	.load_waterpal				; if so, branch
		moveq	#id_Pal_ARZ_U,d0			; else, it's ARZ

	; Level_WaterPal:
	.load_waterpal:			
		bsr.w	PalLoad_Water				; load the appropriate water palette
		tst.b	(v_last_lamppost).w			; are we starting from a star post?
		beq.s	.set_bgm				; if not, branch
		move.b	(f_water_pal_full_lampcopy).w,(f_water_pal_full).w ; retrieve flag for whole screen being underwater

	; Level_GetBgm:
	.set_bgm:							
		tst.w	(f_demo_mode).w				; is this an ending demo? (unused Sonic 1 leftover)
		bmi.s	Level_Skip_TtlCard			; if by miracle it is, branch
		moveq	#0,d0
		move.b	(v_zone).w,d0				; get current zone
		lea_	MusicList,a1				; load 1P music playlist
		tst.w	(f_two_player).w			; is it 2P mode?
		beq.s	.not_2P_music				; if not, branch
		lea_	MusicList2,a1				; use 2P mode playlist

	; Level_PlayBgm:
	.not_2P_music:				
		move.b	(a1,d0.w),d0				; get entry from playlist
		move.w	d0,(v_level_music).w
		bsr.w	PlayMusic				; play the appropriate music
		move.b	#id_TitleCard,(v_ost_titlecard+ost_id).w ; load title card object

; Level_TtlCard
Level_TtlCardLoop:								
		move.b	#id_VBlank_TitleCard,(v_vblank_routine).w ; load level title card
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		move.w	(v_ost_titlecard_zonename+ost_x_pos).w,d0
		cmp.w	(v_ost_titlecard_zonename+ost_card_x_stop).w,d0 ; has title card load sequence finished?
		bne.s	Level_TtlCardLoop			; if not, branch
		tst.l	(v_plc_buffer).w			; are there any items in the pattern load cue?
		bne.s	Level_TtlCardLoop			; if yes, branch
		move.b	#id_VBlank_TitleCard,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	HUD_Base				; load HUD graphics

	Level_Skip_TtlCard:				
		moveq	#id_Pal_Sonic_Miles_BG1,d0
		bsr.w	PalLoad_Next				; load Sonic and Tails' palette for fading in
		bsr.w	LevelParameterLoad			; load level boundaries and set Sonic's start position
		jsrto	DeformLayers,JmpTo_DeformLayers		; initialize camera and background scrolling (and CNZ slot machine pics if required)
		clr.w	(v_fg_y_pos_vsram).w
		move.w	#$FF20,(v_fg_y_pos_vsram_p2).w

		clear_ram	hscroll,hscroll_end		; clear the h-scroll buffer
		
		bsr.w	LevelChunksLoad				; load level graphics
		jsrto	LevelBlockMapsLoad,JmpTo_LevelBlockMapsLoad ; load 16x16 and 128x128 block and chunk mappings
		jsr	AnimatedBlocksLoad			; load animated blocks
		jsrto DrawTilesAtStart,JmpTo_DrawTilesAtStart	; draw the initial background state
		jsr	ConvertCollisionArray			; unused development leftover
		bsr.w	SetColIndexPtr				; load collision data
		bsr.w	WaterFeatures				; initialize water if applicable
		bsr.w	InitPlayers				; load player objects

		move.w	#0,(v_joypad_hold).w			; clear joypad states
		move.w	#0,(v_joypad2_hold).w
		move.w	#0,(v_joypad_hold_actual).w
		move.w	#0,(v_joypad2_hold_actual).w
		move.b	#1,(f_lock_controls).w			; clear control lock flags
		move.b	#1,(f_lock_controls_p2).w
		move.b	#0,(f_level_started).w			; clear level start flag
		
	;.load_reserved_level_objs:	
		tst.b	(f_water).w				; does level have water?
		beq.s	.skip_water_surface			; if not, branch
		move.b	#id_WaterSurface,(v_ost_watersurface1).w ; load water surface objects
		move.w	#$60,(v_ost_watersurface1+ost_x_pos).w	; horizontal offset
		move.b	#id_WaterSurface,(v_ost_watersurface2).w
		move.w	#$120,(v_ost_watersurface2+ost_x_pos).w

	.skip_water_surface:				
		cmpi.b	#id_CPZ,(v_zone).w			; is it CPZ?
		bne.s	.not_CPZ				; if not, branch
		move.b	#id_Pylon,(v_ost_cpzpylon).w		; load CPZ foreground pylon

	.not_CPZ:				
		cmpi.b	#id_OOZ,(v_zone).w			; is it OOZ?		
		bne.s	.no_reserved_level_objs			; if not, bramch
		move.b	#id_Oil,(v_ost_oil).w			; load the namesake oil ocean

	.no_reserved_level_objs:				
		moveq	#0,d0
		tst.b	(v_last_lamppost).w			; are we starting from a starpost?
		bne.s	.skip_clear				; if so, branch
		move.w	d0,(v_rings).w				; clear rings
		move.l	d0,(v_time).w				; clear time
		move.b	d0,(v_ring_reward).w			; clear extra life flags
		move.w	d0,(v_rings_p2).w			; (both players)
		move.l	d0,(v_time_p2).w
		move.b	d0,(v_ring_reward_p2).w

	.skip_clear:				
		move.b	d0,(f_time_over).w			; clear time over flags
		move.b	d0,(f_time_over_p2).w			; (both players)
		move.b	d0,(v_slot_routine).w			; clear CNZ slot machine routine counter
		move.w	d0,(f_slot_use).w			; clear CNZ slot machine use flag
		move.w	d0,(v_debug_active).w			; clear debug placement mode flag

		move.w	d0,(f_restart).w			; clear restart flag
		move.b	d0,(v_teleport_timer).w			; clear teleport timer
		move.b	d0,(f_teleport_flag).w			; clear teleport flag
		move.w	d0,(v_rings_collected_p1).w		; clear 2P mode ring and monitor tallies
		move.w	d0,(v_rings_collected_p2).w
		move.w	d0,(v_monitors_broken_p1).w
		move.w	d0,(v_monitors_broken_p2).w
		move.w	d0,(v_loser_time_left).w		; clear 2P mode loser timer
		bsr.w	OscillateNumInit			; initialize oscillating numbers
		move.b	#1,(f_hud_score_update).w		; set all HUD update flags
		move.b	#1,(v_hud_rings_update).w
		move.b	#1,(f_hud_time_update).w
		move.b	#1,(f_hud_time_update_p2).w
		
		jsr	ObjPosLoad				; load initial level objects
		jsr	RingsManager				; initialize the rings manager and load rings
		jsr	SpecialCNZBumpers			; initialize the CNZ bumpers if applicable
		jsr	ExecuteObjects				; run all level objects once to initialize
		jsr	BuildSprites				; render the objects	
		jsrto	AnimateLevelGFX,JmpTo_AnimateLevelGFX	; initialize animated level graphics
		bsr.w	SetLevelEndType				; set f_has_signpost according to level/act
		move.w	#0,(v_demo_input_counter).w
		move.w	#0,(v_demo_input_counter_p2).w
		
		lea	(DemoDataPtr).l,a1			; address of pointers to demo data
		moveq	#0,d0
		move.b	(v_zone).w,d0				; get zone number
		lsl.w	#2,d0					; multiply by 4
		movea.l	(a1,d0.w),a1				; jump to demo data for that zone
		tst.w	(f_demo_mode).w				; is this an ending demo? (unused Sonic 1 leftover) 
		bpl.s	.skip_endingdemo			; if not (and it never will be), branch
		lea	(DemoEndDataPtr).l,a1			; if by miracle we made it here, use ending demo data instead
		move.w	(v_s1_ending_demo_num).w,d0
		subq.w	#1,d0
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1				; jump to non-existent ending demo data

	.skip_endingdemo:				
		move.b	1(a1),(v_demo_input_time).w		; load button press duration
		tst.b	(v_zone).w				; is it the EHZ demo?
		bne.s	.not_EHZ_demo				; if not, branch
		lea	(Demo_EHZ_P2).l,a1			; Tails' demo script for EHZ
		move.b	1(a1),(v_demo_input_time_p2).w		; load button press duration

	.not_EHZ_demo:				
		move.w	#(27*60)+20,(v_countdown).w		; run demo for a little over 27 seconds
		tst.w	(f_demo_mode).w				; is this an ending demo?  (unused Sonic 1 leftover)
		bpl.s	.not_endingdemo				; if not, branch
		move.w	#9*60,(v_countdown).w			; run ending demo for 9 seconds
		cmpi.w	#4,(v_s1_ending_demo_num).w		; is it the SLZ ending demo?
		bne.s	.not_endingdemo				; if not branch
		move.w	#(8*60)+30,(v_countdown).w		; the SLZ ending demo in Sonic 1 only ran for 8.5 seconds

	.not_endingdemo:								
		tst.b	(f_water).w				; is this a water level?
		beq.s	.nowater				; if not, branch		
		moveq	#id_Pal_HPZ_U,d0			; HPZ's underwater palette
		cmpi.b	#id_HPZ,(v_zone).w			; is it HPZ?
		beq.s	.gotunderwaterpal			; if it is (and it never will be), branch
		moveq	#id_Pal_CPZ_U,d0			; CPZ's underwater palette
		cmpi.b	#id_CPZ,(v_zone).w			; is it CPZ?		
		beq.s	.gotunderwaterpal			; if it is, branch
		moveq	#id_Pal_ARZ_U,d0			; ARZ's underwater palette

	.gotunderwaterpal:								
		bsr.w	PalLoad_Water_Next			; load water palette that'll be shown after fading in 

	.nowater:				
		move.w	#-1,(v_ost_titlecard_zonename+ost_card_leaveflag).w 
		move.b	#id_Card_LeftOut,(v_ost_titlecard_left+ost_primary_routine).w ; set title card background to move offscreen
		move.w	#$A,(v_ost_titlecard_left+ost_card_location).w

	.titlecardloop:				
		move.b	#id_VBlank_TitleCard,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.b	(v_ost_titlecard_background+ost_id).w	; is titlecard background still loaded?
		bne.s	.titlecardloop				; if so, loop

		lea	(v_ost_titlecard_zonename).w,a1	
		move.b	#id_Card_WaitAndGoAway,ost_primary_routine(a1) ; set title card zone name to move offscreen
		move.w	#$2D,ost_anim_time(a1)
		move.b	#id_Card_WaitAndGoAway,v_ost_titlecard_zone-v_ost_titlecard_zonename+ost_primary_routine(a1) ; set title card "zone" to move offscreen
		move.w	#$2D,v_ost_titlecard_zone-v_ost_titlecard_zonename+ost_anim_time(a1)

		tst.b	v_ost_titlecard_actnumber-v_ost_titlecard_zonename+ost_id(a1) ; was the act number loaded?
		beq.s	.no_act_num				; if not, branch

		move.b	#id_Card_WaitAndGoAway,v_ost_titlecard_actnumber-v_ost_titlecard_zonename+ost_primary_routine(a1) ; set act number to move offscreen
		move.w	#$2D,v_ost_titlecard_actnumber-v_ost_titlecard_zonename+ost_anim_time(a1)

	.no_act_num:				
		move.b	#0,(f_lock_controls).w			; clear control lock flags
		move.b	#0,(f_lock_controls_p2).w
		move.b	#1,(f_level_started).w			; set level started flag
		
		bclr	#titlecard_flag_bit,(v_gamemode).w	; subtract $80 from gamemode to end pre-level stuff

; ---------------------------------------------------------------------------
; Main level loop (when	all title card and loading sequences are finished)
; ---------------------------------------------------------------------------

Level_MainLoop:						
		bsr.w	PauseGame				; check for pause (enters another loop if paused)
		move.b	#id_VBlank_Level,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		addq.w	#1,(v_frame_counter).w			; increment level timer
		bsr.w	MoveSonicAndTailsInDemo			; move players if this is a demo
		bsr.w	WaterFeatures				; manage water levels, oil slides, and wind tunnels if required
		jsr	ExecuteObjects				; run all objects except rings
		tst.w	(f_restart).w				; is level restart flag set?
		bne.w	GM_Level				; if yes, branch
		jsrto	DeformLayers,JmpTo_DeformLayers		; run background scrolling and update camera
		bsr.w	UpdateWaterSurface			; update water surface if necessary
		jsr	RingsManager				; run rings that are part of layout (debug mode placed rings are handled as individual objects)
		cmpi.b	#id_CNZ,(v_zone).w			; is it CNZ?
		bne.s	.notCNZ					; if not, branch
		jsr	(SpecialCNZBumpers).l			; run the special CNZ bumpers

	.notCNZ:				
		jsrto	AnimateLevelGFX,JmpTo_AnimateLevelGFX	; run dynamic BG/FG animations (EHZ/HT flowers, HTZ distant background mountains, MTZ rotating cylinders, etc.)
		bsr.w	PaletteCycle				; run all palette cycling
		bsr.w	RunPLC					; load any graphics listed in PLC buffer
		bsr.w	OscillateNumDo				; update oscillatory values for objects
		bsr.w	SynchroAnimate				; update values for synchronised object animations (rings are the only ones)
		bsr.w	SignpostArtLoad				; check for level end, and load signpost graphics if needed
		jsr	BuildSprites				; build the sprite table
		jsr	ObjPosLoad				; load objects/update the OST
		cmpi.b	#id_Demo,(v_gamemode).w			; is it demo mode?
		beq.s	Level_Demo				; if so, branch
		cmpi.b	#id_Level,(v_gamemode).w		; is gamemode still Level?
		beq.w	Level_MainLoop				; if so, loop
		rts	
; ===========================================================================

Level_Demo:				
		tst.w	(f_restart).w				; is level set to restart?
		bne.s	.end_of_demo				; if so, branch
		tst.w	(v_countdown).w				; is there time left on the demo?
		beq.s	.end_of_demo				; if not, branch
		cmpi.b	#id_Demo,(v_gamemode).w			; is gamemode still demo?
		beq.w	Level_MainLoop				; if so, loop
		move.b	#id_Sega,(v_gamemode).w			; go to Sega screen
		rts	
; ===========================================================================

	.end_of_demo:						
		cmpi.b	#id_Demo,(v_gamemode).w			; is gamemode still 8 (demo)?
		bne.s	.fade_out				; if not, branch
		move.b	#id_Sega,(v_gamemode).w			; go to Sega screen

	.fade_out:				
		move.w	#60,(v_countdown).w			; set timer to 1 second
		move.w	#palfade_all,(v_palfade_start).w	; fade out all four palette lines
		clr.w	(v_palfade_time).w

	.fade_loop:				
		move.b	#id_VBlank_Level,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	MoveSonicAndTailsInDemo			; continue running objects while fading out
		jsr	ExecuteObjects
		jsr	BuildSprites
		jsr	ObjPosLoad
		subq.w	#1,(v_palfade_time).w			; decrement time until next palette update
		bpl.s	.wait					; branch if positive
		move.w	#2,(v_palfade_time).w			; set timer to 2 frames
		bsr.w	FadeOut_ToBlack				; update palette			

	.wait:				
		tst.w	(v_countdown).w				; has main timer reached zero?
		bne.s	.fade_loop				; if not, loop
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to set the player mode, which is forced to Sonic and Tails in
; demos and in 2P mode
; ---------------------------------------------------------------------------
Level_SetPlayerMode:				
		cmpi.b	#titlecard_flag|id_Demo,(v_gamemode).w	; is it a demo?
		beq.s	.demo_or_2P				; if so, branch
		tst.w	(f_two_player).w			; is it two-player mode?
		bne.s	.demo_or_2P				; if so, branch
		move.w	(v_player_option).w,(v_player_mode).w	; use the option chosen in the Options screen
		rts	

	.demo_or_2P:				
		move.w	#sonic_tails,(v_player_mode).w		; force Sonic and Tails
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load the appropriate player objects
; ---------------------------------------------------------------------------

InitPlayers:				
		move.w	(v_player_mode).w,d0			; is it a Sonic and Tails game?		
		bne.s	InitPlayers_Alone			; if not, branch

		move.b	#id_Sonic,(v_ost_player1+ost_id).w ; load Sonic
		move.b	#id_Splash_SpindashDust,(v_ost_lo_sonic_dust+ost_id).w ; load Sonic's spindash dust

		cmpi.b	#id_WFZ,(v_zone).w	
		beq.s	.exit					; skip loading Tails if this is WFZ...	
		cmpi.b	#id_DEZ,(v_zone).w
		beq.s	.exit					; ...or DEZ...
		cmpi.b	#id_SCZ,(v_zone).w
		beq.s	.exit					; ...or SCZ 
		
		move.b	#id_Tails,(v_ost_player2+ost_id).w	; load Tails
		move.w	(v_ost_player1+ost_x_pos).w,(v_ost_player2+ost_x_pos).w ; copy start position from Sonic's OST to Tails' (this was previously set by LevelParameterLoad)
		move.w	(v_ost_player1+ost_y_pos).w,(v_ost_player2+ost_y_pos).w

		subi.w	#$20,(v_ost_player2+ost_x_pos).w	; Tails starts 32 pixels behind Sonic
		addi_.w	#4,(v_ost_player2+ost_y_pos).w		; Tails is 4 pixels shorter than Sonic
		move.b	#id_Splash_SpindashDust,(v_ost_lo_tails_dust+ost_id).w ; load Tails' spindash dust

	.exit:				
		rts	
; ===========================================================================

InitPlayers_Alone:				
		subq.w	#1,d0				
		bne.s	.tails_alone				; branch if Tails alone
		move.b	#id_Sonic,(v_ost_player1+ost_id).w ; load Sonic
		move.b	#id_Splash_SpindashDust,(v_ost_lo_sonic_dust+ost_id).w ; load Sonic's spindash dust
		rts	
; ===========================================================================

.tails_alone:				
		move.b	#id_Tails,(v_ost_player1+ost_id).w ; load Tails in main character slot
		move.b	#id_Splash_SpindashDust,(v_ost_lo_tails_dust+ost_id).w ; load Tails' spindash dust
		addi_.w	#4,(v_ost_player1+ost_y_pos).w	; Tails is 4 pixels shorter than Sonic
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to move the water or oil surface sprites to where the screen is at
; (first part is fairly similar to Sonic 1's Surf_Action)

;	uses d0.w, d1.w
; ---------------------------------------------------------------------------

UpdateWaterSurface:				
		tst.b	(f_water).w				; does level have water or oil?
		beq.s	.exit					; if not, exit
		move.w	(v_camera_x_pos).w,d1			; get camera x position
		btst	#0,(v_frame_counter+1).w		; is it an even frame?
		beq.s	.even					; if it is, branch
		addi.w	#$20,d1					; add $20 every other frame to create flicker

	.even:				
		move.w	d1,d0
		addi.w	#$60,d0
		move.w	d0,(v_ost_watersurface1+ost_x_pos).w	; set x position of water surface objects
		addi.w	#$120,d1
		move.w	d1,(v_ost_watersurface2+ost_x_pos).w	; (both of them)

	.exit:				
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to run special water effects in CPZ and ARZ, oil slides in OOZ, 
; and wind tunnels in WFZ 

;	uses d0.l, d1.l, d2.w, a1, a2
; ---------------------------------------------------------------------------
WaterFeatures:						
		tst.b	(f_water).w				; does level have water or oil?
		beq.s	.nowater				; if not, branch
		tst.b	(f_disable_scrolling).w			; is Hscroll disabled?
		bne.s	.set_height				; if so, branch
		cmpi.b	#id_Sonic_Death,(v_ost_player1+ost_primary_routine).w ; has main character just died?
		bcc.s	.set_height				; if so, skip other effects
		bsr.w	DynamicWater				; run dynamic water (only used by CPZ 2)

	.set_height:				
		clr.b	(f_water_pal_full).w
		moveq	#0,d0
		cmpi.b	#id_ARZ,(v_zone).w			; is it ARZ?
		beq.s	.notARZ					; if so, branch
		move.b	(v_oscillating_0_to_20).w,d0		; get oscillating value
		lsr.w	#1,d0

	.notARZ:				
		add.w	(v_water_height_normal).w,d0		; add to normal water height
		move.w	d0,(v_water_height_actual).w		; set actual water height
		move.w	(v_water_height_actual).w,d0
		sub.w	(v_camera_y_pos).w,d0			; calculate distance between water surface and top of screen
		bcc.s	.isbelow				; if below top of screen, branch
		tst.w	d0
		bpl.s	.isbelow
		
		move.b	#screen_height-1,(v_vdp_hint_line).w	; HBlank runs at bottom of screen (redundant, as it is set again below)
		move.b	#1,(f_water_pal_full).w			; screen is entirely underwater

	.isbelow:				
		cmpi.w	#screen_height-1,d0			; is water within 223 pixels of top of screen?
		bcs.s	.isvisible				; if so, branch
		move.w	#screen_height-1,d0			; HBlank runs at bottom of screen (but why not just disable it instead?)

	.isvisible:				
		move.b	d0,(v_vdp_hint_line).w			; HBlank runs at water level on screen

.nowater:				
		cmpi.b	#id_OOZ,(v_zone).w			; is it OOZ?
		bne.s	.notOOZ					; if not, branch
		bsr.w	OilSlides				; run oil slides (probably could have been a bra.w)

	.notOOZ:				
		cmpi.b	#id_WFZ,(v_zone).w			; is it WFZ?
		bne.s	.exit					; if not, branch
		bsr.w	WindTunnels				; run wind tunnels

	.exit:				
		rts	

; ---------------------------------------------------------------------------
; Initial water heights
; Only Level slots 8-$F are included here
; ---------------------------------------------------------------------------

WaterHeight:	
		dc.w  $600, $600				; HPZ
		dc.w  $600, $600				; Zone 9
		dc.w  $600, $600				; OOZ
		dc.w  $600, $600				; MCZ
		dc.w  $600, $600				; CNZ
		dc.w  $600, $710				; CPZ
		dc.w  $600, $600				; DEZ
		dc.w  $410, $510				; ARZ


; ---------------------------------------------------------------------------
; Dynamic water height routines
; Only CPZ Act 2 has one, so this could be optimized by removing the index
; altogether if there is no plan to add water to other levels.

;	uses d0.l, d1.l, d2.b
; ---------------------------------------------------------------------------
DynamicWater:				
		moveq	#0,d0
		move.w	(v_zone).w,d0				; get current zone
		subi.w	#$800,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0				; make into index
		move.w	DynWater_Index(pc,d0.w),d0
		jsr	DynWater_Index(pc,d0.w)			; jump to appropriate dynamic water routine
		moveq	#0,d1
		move.b	(v_water_direction).w,d1			
		move.w	(v_water_height_next).w,d0
		sub.w	(v_water_height_normal).w,d0
		beq.s	.exit					; if water level is correct, branch
		bcc.s	.movewater				; if water level is too high, branch
		neg.w	d1					; set water to move up instead

	.movewater:				
		add.w	d1,(v_water_height_normal).w		; move water up or down

	.exit:				
		rts	

; ===========================================================================
DynWater_Index:	index offset(*)
		ptr DynWater_Null				; 0 		
		ptr DynWater_Null				; 1
		ptr DynWater_Null				; 2
		ptr DynWater_Null				; 3
		ptr DynWater_Null				; 4
		ptr DynWater_Null				; 5
		ptr DynWater_Null				; 6
		ptr DynWater_Null				; 7
		ptr DynWater_Null				; 8
		ptr DynWater_Null				; 9
		ptr DynWater_Null				; $A
		ptr DynWater_CPZ2				; $B
		ptr DynWater_Null				; $C
		ptr DynWater_Null				; $D
		ptr DynWater_Null				; $E
		ptr DynWater_Null				; $F
; ===========================================================================

DynWater_Null:				
		rts	
; ===========================================================================

DynWater_CPZ2:				
		cmpi.w	#$1DE0,(v_camera_x_pos).w		; has camera reached $1DE0?
		bcs.s	.exit					; if not, exit
		move.w	#$510,(v_water_height_next).w		; raise level of megamack

	.exit:				
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Wing Fortress Zone "wind tunnels"	subroutine

;	uses d0.l, d1.l, d2.w, a1, a2
; ---------------------------------------------------------------------------
	; displacements for Wind Tunnel data relative to WindTunnel_Data
		rsset	0
	wt_min_x_pos:	rs.w 1					; 0
	wt_min_y_pos:	rs.w 1					; 2
	wt_max_x_pos:	rs.w 1					; 4
	wt_max_y_pos:	rs.w 1					; 6

WindTunnels:				
		tst.w	(v_debug_active).w
		bne.w	.exit					; branch if debug mode is currently in use				
		lea	(WindTunnel_Data).l,a2			; list of tunnel area boundaries

		moveq	#2-1,d1					; two sets of coordinates to check
		lea	(v_ost_player1).w,a1

.tunnel_loop:				
		move.w	ost_x_pos(a1),d0			
		cmp.w	wt_min_x_pos(a2),d0
		bcs.w	.chknext				; branch if character is left of tunnel
		cmp.w	wt_max_x_pos(a2),d0
		bcc.w	.chknext				; branch if character is right of tunnel
		move.w	ost_y_pos(a1),d2
		cmp.w	wt_min_y_pos(a2),d2
		bcs.w	.chknext				; branch if character is above tunnel
		cmp.w	wt_max_y_pos(a2),d2
		bcc.s	.chknext				; branch if character is below tunnel
		tst.b	(f_wind_tunnel_disable).w
		bne.w	.exit					; branch if tunnels are disabled
		cmpi.b	#id_Sonic_Hurt,ost_primary_routine(a1)
		bcc.s	.end_tunnel				; branch if character is hurt or dead
		move.b	#1,(f_wind_tunnel_now).w		; set flag indicating that character is in a tunnel (sets animation; in Sonic 1, this also signaled breathing bubbles to move)


		subi_.w	#4,ost_x_pos(a1)			
		move.w	#-$400,ost_x_vel(a1)			; move character horizontally
		move.w	#0,ost_y_vel(a1)
		move.b	#$F,ost_anim(a1)			; use floating animation
		bset	#status_air_bit,ost_primary_status(a1)	
		btst	#bitUp,(v_joypad_hold_actual).w		; is up pressed?
		beq.s	.down					; if not, branch
		subq.w	#1,ost_y_pos(a1)			; move Sonic up

	.down:				
		btst	#bitDn,(v_joypad_hold_actual).w		; is down presseD?
		beq.s	.end					; if not, branch
		addq.w	#1,ost_y_pos(a1)			; move Sonic down

	.end:				
		rts	
; ===========================================================================
	;WindTunnel_Leave:
	.chknext:				
		addq.w	#8,a2					; check the second set of coordinates
		dbf	d1,.tunnel_loop				
		tst.b	(f_wind_tunnel_now).w	
		beq.s	.exit					; branch if Sonic is still in tunnel
		move.b	#0,ost_anim(a1)				; use walking animation
	
	;WindTunnel_LeaveHurt:
	.end_tunnel:				
		clr.b	(f_wind_tunnel_now).w			; finish tunnel
	
	;WindTunnel_End
	.exit:				
		rts	

; ===========================================================================
WindTunnel_Data:
		; min x, min y, max x, max y	
		dc.w $1510,$400,$1AF0,$580
		dc.w $20F0,$618,$2500,$680
	
; ===========================================================================
; ---------------------------------------------------------------------------
; Oil Ocean Zone oil slide subroutine

;	uses d0.w, d1.l, a1, a2
; ---------------------------------------------------------------------------

OilSlides:
	if FixBugs	
		; Skip the main character if debug mode is active.
		; Sonic 1 did this, but Sonic 2 doesn't.
		tst.w	(v_debug_active).w	
		bne.s	.dosidekick
	endc			
		lea	(v_ost_player1).w,a1
		move.b	(v_joypad_hold).w,d2
		bsr.s	.doslide

	.dosidekick:
		lea	(v_ost_player2).w,a1
		move.b	(v_joypad2_hold).w,d2

.doslide:				
		btst	#status_air_bit,ost_primary_status(a1)	; is character in the air?
		bne.s	.character_in_air			; if so, branch				
		move.w	ost_y_pos(a1),d0
		add.w	d0,d0					; multiply y-pos by 2
		andi.w	#$F00,d0				; only high byte
		move.w	ost_x_pos(a1),d1
		lsr.w	#7,d1					; multiply x-pos by 128				
		andi.w	#$7F,d1					; only high byte
		add.w	d1,d0					; combine for position within layout			
		lea	(v_level_layout).w,a2
		move.b	(a2,d0.w),d0				; get 128x128 tile number
		lea	OilSlide_Chunks+sizeof_OilSlide_Chunks(pc),a2 ; number of slide tiles

		moveq	#sizeof_oilslide_chunks-1,d1

	.loop:				
		cmp.b	-(a2),d0				; compare current 12xx128 tile with those in list
		dbeq	d1,.loop				; check every tile in list			
		beq.s	OilSlide_Move

.character_in_air:				
		tst.b	ost_secondary_status(a1)		; is sliding flag set?
		bpl.s	.exit					; if not, exit
		move.w	#lock_time_slide,ost_lock_time(a1)	; lock controls for 5 frames
		andi.b	#(~status_sliding)&$FF,ost_secondary_status(a1) ; clear sliding flag

	.exit:				
		rts	
; ===========================================================================

OilSlide_Move:				
		lea	(OilSlide_Speeds).l,a2			; slide speeds array
		move.b	(a2,d1.w),d0				; d0 = slide speed
		beq.s	OilSlide_Flat				; if it is a flat section, branch
		move.b	ost_inertia(a1),d1			; current inertia of character
		tst.b	d0					; does slide move to the right?
		bpl.s	.slide_right				; if so, branch
		cmp.b	d0,d1					; is character's inertia already to the left?							
		ble.s	.set_xflip				; if it is, branch
		subi.w	#$40,ost_inertia(a1)			; set inertia to the left		
		bra.s	.set_xflip
; ===========================================================================

	.slide_right:				
		cmp.b	d0,d1					; is character's inertia already to the right?
		bge.s	.set_xflip				; if so, branch
		addi.w	#$40,ost_inertia(a1)			; set inertia to the right

	.set_xflip:				
		bclr	#status_xflip_bit,ost_primary_status(a1) ; face character right
		tst.b	d1											
		bpl.s	.face_right				; branch if inertia is positive
		bset	#status_xflip_bit,ost_primary_status(a1) ; face character left

	.face_right:				
		move.b	#$1B,ost_anim(a1)			; use sliding animation
		ori.b	#status_sliding,ost_secondary_status(a1) ; set sliding flag
		move.b	(v_vblank_counter_byte).w,d0		; get byte that increments every frame
		andi.b	#$1F,d0					; read only bits 0-4
		bne.s	.exit					; if any are set, branch
		move.w	#sfx_OilSlide,d0			; play oil slide sound every 32nd frame	
		jsr	PlaySound				; (could be a jmp or even a bra.w)

	.exit:				
		rts	
; ===========================================================================

OilSlide_Flat:				
		move.w	#4,d1					; could have been a moveq
		move.w	ost_inertia(a1),d0			; current inertia of character	
		btst	#bitL,d2				; is left being held?
		beq.s	.notleft				; if not, branch			
		move.b	#0,ost_anim(a1)				; use walk animation
		bset	#status_xflip_bit,ost_primary_status(a1) ; face character left
		sub.w	d1,d0					; subtract 4 from inertia
		tst.w	d0	
		bpl.s	.notleft				; branch if interia is positive
		sub.w	d1,d0					; subtract 4 from inertia

	.notleft:				
		btst	#bitR,d2				; is right being held?
		beq.s	.notright				; if not, branch
		move.b	#0,ost_anim(a1)				; use walk animation
		bclr	#status_xflip_bit,ost_primary_status(a1) ; face character right
		add.w	d1,d0					; add 4 to inertia
		tst.w	d0
		bmi.s	.notright				; branch if inertia is negative
		add.w	d1,d0					; add 4 to inertia

	.notright:				
		move.w	#4,d1					; redundant
		tst.w	d0						
		beq.s	.set_inertia				; branch if zero
		bmi.s	.isleft					; branch if negative
		sub.w	d1,d0					
		bhi.s	.branchto_set_inertia
		move.w	#0,d0					; could have been a moveq
		move.b	#5,ost_anim(a1)				; waiting animation

	.branchto_set_inertia:				
		bra.s	.set_inertia
; ===========================================================================

	.isleft:				
		add.w	d1,d0
		bhi.s	.set_inertia
		move.w	#0,d0					; could have been a moveq			
		move.b	#5,ost_anim(a1)				; waiting animation

	.set_inertia:							
		move.w	d0,ost_inertia(a1)
		ori.b	#status_sliding,status_secondary(a1)	; set sliding flag
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Oil slide speeds. These values are not so much speeds as they are indicators
; of which direction they should make the character move: 8 = right, -8 = left
; 0 = level section of slide at the top
; ---------------------------------------------------------------------------
OilSlide_Speeds:	
		dc.b  -8, -8, -8,  8,  8,  0,  0,  0, -8, -8,  0,  8,  8,  8,  0,  8
		dc.b   8,  8,  0, -8,  0,  0, -8,  8, -8, -8, -8,  8,  8,  8, -8, -8 ; 16

; ---------------------------------------------------------------------------
; IDs of chunks in OOZ's layout that contain of oil slides
; ---------------------------------------------------------------------------
OilSlide_Chunks:		
		dc.b $2F,$30,$31,$33,$35,$38,$3A,$3C,$63,$64,$83,$90,$91,$93,$A1,$A3 ; 32
		dc.b $BD,$C7,$C8,$CE,$D7,$D8,$E6,$EB,$EC,$ED,$F1,$F2,$F3,$F4,$FA,$FD ; 48
		arraysize	OilSlide_Chunks
		even

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	move Sonic and Tails in demo mode

;	uses d0.l, d1.b, d2.l, a0, a1
; ---------------------------------------------------------------------------

MoveSonicAndTailsInDemo:				
		tst.w	(f_demo_mode).w				; is demo mode on?
		bne.w	MDemo_On				; if so, branch
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused subroutine for recording a demo

; output:
;	a1 = address last written by recorder for player 2

;	uses d0.w
; ---------------------------------------------------------------------------
DemoRecorder:
		lea	(DemoDataPtr).l,a1			; location to record player 1's inputs
		moveq	#0,d0
		move.b	(v_zone).w,d0				; get current zone
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1				; use as index
		move.w	(v_demo_input_counter).w,d0		; get number of inputs so far
		adda.w	d0,a1					; jump to last position in recorded data
		move.b	(v_joypad_hold_actual).w,d0		; get joypad input state
		cmp.b	(a1),d0					; is joypad input same as last frame?
		bne.s	.recordP1				; if not, branch
		addq.b	#1,1(a1)				; increment time for current input
		cmpi.b	#255,1(a1)				; has input timer hit 255 (maximum)?
		beq.s	.recordP1				; if so, branch
		bra.s	.player2				; continue to player 2

	.recordP1:				
		move.b	d0,2(a1)				; write new input state
		move.b	#0,3(a1)				; set time to 0
		addq.w	#2,(v_demo_input_counter).w		; increment counter
		andi.w	#$3FF,(v_demo_input_counter).w		; counter stops at $200 inputs

.player2:				
		cmpi.b	#id_EHZ,(v_zone).w			; is it EHZ?
		bne.s	.exit					; if not, exit
		lea	($FEC000).l,a1				; location to record player 2's inputs (possibly aux ram or a port on a development unit?)
		move.w	(v_demo_input_counter_p2).w,d0		; get number of inputs so far
		adda.w	d0,a1					; jump to last position in recorded data
		move.b	(v_joypad2_hold_actual).w,d0		; get joypad input state
		cmp.b	(a1),d0					; is joypad input same as last frame?
		bne.s	.recordP2				; if not, branch
		addq.b	#1,1(a1)				; increment time for current input
		cmpi.b	#-1,1(a1)				; has input timer hit 255 (maximum)?
		beq.s	.recordP2				; if so, branch
		bra.s	.exit

	.recordP2:				
		move.b	d0,2(a1)				; write new input state
		move.b	#0,3(a1)				; set time to 0
		addq.w	#2,(v_demo_input_counter_p2).w		; increment counter
		andi.w	#$3FF,(v_demo_input_counter_p2).w	; counter stops at $200 inputs

	.exit:				
		rts	
; ===========================================================================

MDemo_On:				
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#btnStart,d0				; is start button pressed on either joypad?
		beq.s	.dontquit				; if not, branch
		tst.w	(f_demo_mode).w				; is this an ending demo (unused Sonic 1 leftover)
		bmi.s	.dontquit				; if by miracle it is, branch
		move.b	#id_Title,(v_gamemode).w		; go to title screen

	.dontquit:				
		lea	(DemoDataPtr).l,a1			; get address of demo pointer list
		moveq	#0,d0
		move.b	(v_zone).w,d0					
		cmpi.b	#id_SpecialStage,(v_gamemode).w		; is this a special stage?  (unused Sonic 1 leftover)
		bne.s	.notspecial				; if not, branch
		moveq	#6,d0					; use demo 6

	.notspecial:				
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1
		move.w	(v_demo_input_counter).w,d0		; get number of inputs so far
		adda.w	d0,a1					; jump to current input
		move.b	(a1),d0					; get joypad state from demo
		lea	(v_joypad_hold_actual).w,a0		; (a0) = actual joypad state
		move.b	d0,d1
    if FixBugs
		; In Revision 0 of Sonic 1, this instruction was 'move.b (a0),d2'. The
		; purpose of this is to XOR the current frame's input with the
		; previous frame's input to determine which inputs had been pressed
		; on the current frame. The usage of '(a0)' for this is a problem
		; because it doesn't hold the *demo* inputs from the previous frame,
		; but rather the *player's* inputs from the *current* frame.
		; This meant that it was possible for the player to influence the
		; demos by pressing buttons on the joypad. In Revision 1 of Sonic 1, this
		; instruction was replaced with a 'moveq #0,d2', effectively
		; dummying-out the process of differentiating newly-pressed inputs
		; from old held inputs, causing every input to be treated as
		; newly-pressed on every frame. While this isn't a problem in this
		; game, it does become a problem if Sonic or Tails is given a
		; double-jump ability, as the ability will constantly be activated
		; when they shouldn't be. While not exactly the intended use for this
		; variable, 'v_joypad_hold' does happen to hold the inputs from
		; the previous frame, so we can use this here instead to fix this bug
		; properly.
		move.b	v_joypad_hold-v_joypad_hold_actual(a0),d2
    else		
		moveq	#0,d2
	endc	
		eor.b	d2,d0					; determine which buttons differ between this frame and the last
		move.b	d1,(a0)+				; write demo input for held buttons
		and.b	d1,d0					; only keep the buttons that were pressed on this frame
		move.b	d0,(a0)+				; write demo input for pressed buttons
		subq.b	#1,(v_demo_input_time).w		; decrement timer for current input
		bcc.s	.moveplayer2				; branch if 0 or higher
		move.b	3(a1),(v_demo_input_time).w		; get time for next input
		addq.w	#2,(v_demo_input_counter).w		; increment counter

.moveplayer2:				
		cmpi.b	#id_EHZ,(v_zone).w			; is it the EHZ demo?
		bne.s	.skip_player2				; if not, exit
		lea	(Demo_EHZ_P2).l,a1			; Tails' demo script
		move.w	(v_demo_input_counter_p2).w,d0		; get number of inputs so far
		adda.w	d0,a1					; jump to current input
		move.b	(a1),d0					; get joypad state from demo
		lea	(v_joypad2_hold_actual).w,a0		; (a0) = actual joypad state
		move.b	d0,d1
	if FixBugs
		; Same fix as above, but for player 2.	
		move.b	v_joypad_hold-v_joypad_hold_actual(a0),d2
    else		
		moveq	#0,d2
	endc
		eor.b	d2,d0					; determine which buttons differ between this frame and the last
		move.b	d1,(a0)+				; write demo input for held buttons
		and.b	d1,d0					; only keep the buttons that were pressed on this frame
		move.b	d0,(a0)+				; write demo input for pressed buttons
		subq.b	#1,(v_demo_input_time_p2).w		; decrement timer for current input
		bcc.s	.end					; branch if 0 or higher
		move.b	3(a1),(v_demo_input_time_p2).w		; get time for next input
		addq.w	#2,(v_demo_input_counter_p2).w		; increment counter

	.end:				
		rts	


.skip_player2:				
		move.w	#0,(v_joypad2_hold_actual).w		; clear player 2's joypad state
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Demo data pointers (these are hardcoded to match zone numbers)
; ---------------------------------------------------------------------------

DemoDataPtr:	index.l 0,,$100					; absolute longword pointers, ids multiplied by $100
		ptr Demo_EHZ					; EHZ (only Sonic's script)		
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_EHZ					; unused
		ptr Demo_CNZ					; CNZ
		ptr Demo_CPZ					; CPZ
		ptr Demo_EHZ					; unused
		ptr Demo_ARZ					; ARZ
		ptr Demo_EHZ					; unused
		
;----------------------------------------------------------------------------
; Unused Sonic 1 leftover: pointers to demo scripts for the ending and credits.
; Here, they just point to random code.
; ---------------------------------------------------------------------------

DemoEndDataPtr:	
		dc.l   $8B0837					; 0 
		dc.l   $42085C					; 1
		dc.l   $6A085F					; 2
		dc.l   $2F082C					; 3
		dc.l   $210803					; 4
		dc.l $28300808					; 5
		dc.l   $2E0815					; 6
		dc.l	$F0846					; 7
		dc.l   $1A08FF					; 8
		dc.l  $8CA0000					; 9
		dc.l	     0					; 10
		dc.l	     0					; 11

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to set collision index pointers and load collision data for 
; current zone

;	uses d0.l, a0, a1
; ---------------------------------------------------------------------------

SetColIndexPtr:				
		moveq	#0,d0
		move.b	(v_zone).w,d0				; current zone
		lsl.w	#2,d0
		move.l	#v_primary_collision,(v_collision_index_ptr).w ; points to primary collision data initially
		move.w	d0,-(sp)
		movea.l	PrimaryColPointers(pc,d0.w),a0		; get primary collision data for current zone
		lea	(v_primary_collision).w,a1
		bsr.w	KosDec					; decompress primary collision data
		move.w	(sp)+,d0
		movea.l	SecondaryColPointers(pc,d0.w),a0	; get secondary collision data for current zone
		lea	(v_secondary_collision).w,a1			
		bra.w	KosDec					; decompress secondary collision data

; ===========================================================================
; ---------------------------------------------------------------------------
; Pointers to primary collision	indexes
;
; Contains an array of pointers	to the primary collision index data for	each
; level. 1 pointer for each level, pointing the	primary	collision index.
; ---------------------------------------------------------------------------
PrimaryColPointers:	
		dc.l ColP_EHZHTZ				; 0
		dc.l LevelIndex					; 1
		dc.l ColP_MTZ					; 2
		dc.l LevelIndex					; 3
		dc.l ColP_MTZ					; 4
		dc.l ColP_MTZ					; 5
		dc.l ColP_WFZSCZ				; 6
		dc.l ColP_EHZHTZ				; 7
		dc.l ColP_OOZ					; 8
		dc.l LevelIndex					; 9
		dc.l ColP_OOZ					; 10
		dc.l ColP_MCZ					; 11
		dc.l ColP_CNZ					; 12
		dc.l ColP_CPZDEZ				; 13
		dc.l ColP_CPZDEZ				; 14
		dc.l ColP_ARZ					; 15
		dc.l ColP_WFZSCZ				; 16
; ---------------------------------------------------------------------------
; Pointers to secondary	collision indexes
;
; Contains an array of pointers	to the secondary collision index data for
; each level. 1	pointer	for each level,	pointing the secondary collision
; index.
; ---------------------------------------------------------------------------
SecondaryColPointers:	
		dc.l ColS_EHZHTZ				; 0
		dc.l LevelIndex					; 1
		dc.l ColP_MTZ					; 2
		dc.l LevelIndex					; 3
		dc.l ColP_MTZ					; 4
		dc.l ColP_MTZ					; 5
		dc.l ColS_WFZSCZ				; 6
		dc.l ColS_EHZHTZ				; 7
		dc.l ColP_OOZ					; 8
		dc.l LevelIndex					; 9
		dc.l ColP_OOZ					; 10
		dc.l ColP_MCZ					; 11
		dc.l ColS_CNZ					; 12
		dc.l ColS_CPZDEZ				; 13
		dc.l ColS_CPZDEZ				; 14
		dc.l ColS_ARZ					; 15
		dc.l ColS_WFZSCZ				; 16

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to initialise oscillating numbers

;	uses d1.l, a1, a2
; ---------------------------------------------------------------------------
OscillateNumInit:				
		lea	(v_oscillating_direction).w,a1
		lea	(OscillateNum_Baselines).l,a2		; why absolute long?
		moveq	#(sizeof_OscillateNum_Baselines/2)-1,d1

	.loop:				
		move.w	(a2)+,(a1)+				; copy baseline values to RAM
		dbf	d1,.loop
		rts	


; ===========================================================================
OscillateNum_Baselines:	
		dc.w  $7D					; direction bitfield
		
		; start value, start rate
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $80, 0
		dc.w $3848, $EE
		dc.w $2080, $B4
		dc.w $3080, $10E
		dc.w $5080, $1C2
		dc.w $7080, $276
		dc.w $80, 0
		dc.w $4000, $FE
	
		arraysize	OscillateNum_Baselines
		even

; ---------------------------------------------------------------------------
; Subroutine to run oscillating numbers

;	uses d0.w, d1.l, d2.w, d3.w, d4.w, a1, a2
; ---------------------------------------------------------------------------


OscillateNumDo:				
		tst.w	(f_two_player).w			; is it two-player mode?
		bne.s	.is2P					; if so, branch
		cmpi.b	#id_Sonic_Death,(v_ost_player1+ost_primary_routine).w ; has main character just died?
		bcc.s	.end					; if so, exit

	.is2P:				
		lea	(v_oscillating_direction).w,a1
		lea	(OscillateNum_Settings).l,a2
		move.w	(a1)+,d3				; get oscillation direction bitfield
		moveq	#$F,d1					; bit to test/store direction

.loop:				
		move.w	(a2)+,d2				; get frequency
		move.w	(a2)+,d4				; get amplitude
		btst	d1,d3					; check oscillation direction
		bne.s	.down					; branch if 1
		
	;.up:	
		move.w	2(a1),d0				; get current rate
		add.w	d2,d0					; add frequency
		move.w	d0,2(a1)				; update rate
		_add.w	d0,0(a1)				; add rate to value
		_cmp.b	0(a1),d4
		bhi.s	.next					; branch if value is below middle value
		bset	d1,d3					; set direction to down
		bra.s	.next

	.down:				
		move.w	2(a1),d0				; get current rate
		sub.w	d2,d0					; subtract frequency
		move.w	d0,2(a1)				; update rate
		_add.w	d0,0(a1)				; add rate to value
		_cmp.b	0(a1),d4
		bls.s	.next					; branch if value is above middle value
		bclr	d1,d3					; set direction to up

	.next:				
		addq.w	#4,a1					; next value/rate
		dbf	d1,.loop				; repeat for all bits in direction bitfield
		move.w	d3,(v_oscillating_direction).w		; update direction bitfield

.end:				
		rts	

; ===========================================================================
OscillateNum_Settings:	
		; frequency, middle values
		dc.w 2, $10
		dc.w 2, $18
		dc.w 2, $20
		dc.w 2, $30
		dc.w 4, $20
		dc.w 8, 8
		dc.w 8, $40
		dc.w 4, $40
		dc.w 2, $38
		dc.w 2, $38
		dc.w 2, $20
		dc.w 3, $30
		dc.w 5, $50
		dc.w 7, $70
		dc.w 2, $40
		dc.w 2, $40
		even

; ===========================================================================


SynchroAnimate:				
		subq.b	#1,(v_syncani_0_time).w
		bpl.s	loc_4B7A
		move.b	#$B,(v_syncani_0_time).w
		subq.b	#1,(v_syncani_0_frame).w
		andi.b	#7,(v_syncani_0_frame).w

loc_4B7A:				
		subq.b	#1,(v_syncani_1_time).w
		bpl.s	loc_4B90
		move.b	#7,(v_syncani_1_time).w
		addq.b	#1,(v_syncani_1_frame).w
		andi.b	#3,(v_syncani_1_frame).w

loc_4B90:				
		subq.b	#1,(v_syncani_2_time).w
		bpl.s	loc_4BAE
		move.b	#7,(v_syncani_2_time).w
		addq.b	#1,(v_syncani_2_frame).w
		cmpi.b	#6,(v_syncani_2_frame).w
		bcs.s	loc_4BAE
		move.b	#0,(v_syncani_2_frame).w

loc_4BAE:				
		tst.b	(v_syncani_3_time).w
		beq.s	locret_4BD0
		moveq	#0,d0
		move.b	(v_syncani_3_time).w,d0
		add.w	(v_syncani_3_accumulator).w,d0
		move.w	d0,(v_syncani_3_accumulator).w
		rol.w	#7,d0
		andi.w	#3,d0
		move.b	d0,(v_syncani_3_frame).w
		subq.b	#1,(v_syncani_3_time).w

locret_4BD0:				
		rts	


; ===========================================================================

; sub_4BD2:
SetLevelEndType:				
		move.w	#0,(f_has_signpost).w			; set level type to non-signpost
		tst.w	(f_two_player).w			; is it two-player mode?
		bne.s	.setsignpost				; if it is, branch
		cmpi.w	#id_EHZ_act2,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_MTZ_act3,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_WFZ_act1,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_HTZ_act2,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_OOZ_act2,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_MCZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_CNZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_CPZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_DEZ_act1,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_ARZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_SCZ_act1,(v_zone).w
		beq.s	.exit

	.setsignpost:				
		move.w	#1,(f_has_signpost).w			; set level type to signpost

	.exit:				
		rts	

; ===========================================================================


SignpostArtLoad:				
		tst.w	(f_has_signpost).w
		beq.s	locret_4CA6
		tst.w	(v_debug_active).w
		bne.s	locret_4CA6
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_boundary_right_next).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	loc_4C80
		tst.b	(f_hud_time_update).w
		beq.s	loc_4C80
		cmp.w	(v_boundary_left_next).w,d1
		beq.s	loc_4C80
		move.w	d1,(v_boundary_left_next).w
		tst.w	(f_two_player).w
		bne.s	locret_4CA6
		moveq	#$27,d0
		bra.w	NewPLC
; ===========================================================================

loc_4C80:				
		tst.w	(f_two_player).w
		beq.s	locret_4CA6
		move.w	(v_camera_x_pos_p2).w,d0
		move.w	(v_boundary_right_next_p2).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	locret_4CA6
		tst.b	(f_hud_time_update_p2).w
		beq.s	locret_4CA6
		cmp.w	(v_boundary_left_next_p2).w,d1
		beq.s	locret_4CA6
		move.w	d1,(v_boundary_left_next_p2).w

locret_4CA6:				
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic's EHZ Demo Script
; ---------------------------------------------------------------------------
Demo_EHZ:	
		dc.b   0,$4B,  8,$42,$28,  8,  8,$3E,$28,  5,  8,$AF,$28,  9,  8,$45 ; 0			
		dc.b   0,$1D,  4, $E,  0,  4,  4,  4,  0,  8,  4,$3E,  0,  4,  8,$66 ; 16
		dc.b   0,$61,  8,$11,  0,$21,  2,  7,$22,  6,  2, $D,  0,$3B,  8,  9 ; 32
		dc.b   0,$1D,  2,  6,$22,  6,  2,  1,  0, $E,  8,$FF,  8,$2E,  0,$22 ; 48
		dc.b $20,  7,$28, $F,  8,  2,  0,$2F,$28,$23,  8,$BD,  0, $B,  4,$13 ; 64
		dc.b   0,$16,  2,  2,$22,  6,  2,  2,  0,$63,$80,  0,$40,  0,  0,  0 ; 80
; ---------------------------------------------------------------------------
; Tails' EHZ Demo Script
; ---------------------------------------------------------------------------
Demo_EHZ_P2:	
		dc.b   0,$3B,  8, $F,  9,$43,$29,  6,  9,  6,  8,$C9,  0,$11,  8,  1 ; 0			
		dc.b $28,  8,  8,$52,  0,$11,  8, $A,$28, $E,  8,$23,  0, $A,$20,  4 ; 16
		dc.b   0, $D,  8,$55,  0,$1E,  8,$5A,  0,$10,  8,$FF,  8,$C0,  0,$20 ; 32
		dc.b   4, $D,  0, $D,$20,  4,$28, $F,$20,  5,  0, $C,  4,  5,  0,$5E ; 48
		dc.b   8,$73,  0,$18,  4,$44,  0,  8,  2,$30,  0,  8,  8, $D,  0,$23 ; 64
		dc.b   8,$27,  0,  4,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 80
; ---------------------------------------------------------------------------
; CNZ Demo Script
; ---------------------------------------------------------------------------
Demo_CNZ:	
		dc.b   0,$48,  8,$10,  9,  0,  8,  1,  9,  6,  8,$60,$28,  5,$20,  1 ; 0		
		dc.b   0,  8,  4,  2,  6,  3,  4,  1,  0,$19,  8,$11,$28,$19,$20,  4 ; 16
		dc.b $28,$23,  8,$1A,  0,  7,  4,$10,  0, $E,  8,$77,$28,$16,$20,  0 ; 32
		dc.b   0, $F,  4,$11,  0,  7,  8,$52,  0,$6F,  8,$74,  0,$37,  8,$16 ; 48
		dc.b   0,  4,  4,$26,  0, $C,  4,$12,  0,$69,$20,$10,$28,  2,$2A,  5 ; 64
		dc.b  $A,$14,  8,  5,  0,  5,  4, $C,  0,$48,  4,  9,  0,$1E,  8,  6 ; 80
		dc.b   0,$2F,  4,  1,  0,$FF,  0,$4F,  8,  0,$28, $B,  8,$2A,  0,$5E ; 96
; ---------------------------------------------------------------------------
; CPZ Demo Script
; ---------------------------------------------------------------------------
Demo_CPZ:	
		dc.b   0,$46,  8,$1B,$28,  7,  8,  9,  0,$1B,  8, $D,$28,$28,  8,$FF ; 0		
		dc.b   8,$E7, $A,  4,  2,  1,  4,$33,  6,$67,  4,  0,  0,$15,$20,  0 ; 16
		dc.b $24,  7,  4, $E,  0,$17,  8,  1, $A,  1,  8, $C,  0,$1F,$28,  6 ; 32
		dc.b   8, $A,  0,$1B,  4, $D,  0,$1C,  4,  6,  0,$FF,  0,$DF,  8, $E ; 48
		dc.b   0,$1C,  4,  2,  0,$25,  8,  6,  0,  6,$20,  4,  0,$28,  4,$11 ; 64
		dc.b   0,$17,  8,$19,  0,$10,  4,$2D,  0,$13,$80,  0,$40,  0,  0,  0 ; 80
; ---------------------------------------------------------------------------
; ARZ Demo Script
; ---------------------------------------------------------------------------
Demo_ARZ:	
		dc.b   0,$42,  8,$4A,$28,  8,  8,$4F,$28, $B,  8,  5,  0,$1A,  8,$60 ; 0			
		dc.b $28,$14,  8,$54,  0,$40,  8,  4,  9,  0,  8,$5B,  0,$46,  8,$3B ; 16
		dc.b $28,  8,  8,$27,  0, $A,  8,$92,$28,$32,  8,$22,  0,$22,  8,$4C ; 32
		dc.b   0,$1E,  4,  1,  5,  2,  4,  0,  0, $A,  4, $C,  0,$10,  8,  5 ; 48
		dc.b   0,$61,  8,  3,$28,  5,  8,$16,  0,$1B,  8,$56,$28, $A,  8,$16 ; 64
		dc.b   0,$15,  8, $C,  0,$2B,$20,  1,$28,$1A,  8,$82,  0, $B,$80,  0 ; 80

; ===========================================================================

; sub_4E98: LoadZoneTiles:
LevelChunksLoad:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelHeaders).l,a2
		lea	(a2,d0.w),a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		movea.l	d0,a0
		lea	(v_128x128_tiles).l,a1
		bsr.w	KosDec
		move.w	a1,d3
		cmpi.b	#7,(v_zone).w
		bne.s	loc_4EE4
		lea	(Kos_HTZ).l,a0
		lea	($FFFF3F80).l,a1
		bsr.w	KosDec
		move.w	#$6FC0,d3

loc_4EE4:				
		cmpi.b	#6,(v_zone).w
		bne.s	loc_4F00
		lea	(Kos_WFZ).l,a0
		lea	($FFFF60E0).l,a1
		bsr.w	KosDec
		move.w	#$6F20,d3

loc_4F00:				
		cmpi.b	#$E,(v_zone).w
		bne.s	loc_4F0C
		move.w	#$64C0,d3

loc_4F0C:				
		move.w	d3,d7
		andi.w	#$FFF,d3
		lsr.w	#1,d3
		rol.w	#4,d7
		andi.w	#$F,d7

loc_4F1A:				
		move.w	d7,d2
		lsl.w	#7,d2
		lsl.w	#5,d2
		move.l	#$FFFFFF,d1
		move.w	d2,d1
		jsr	(AddDMA).l
		move.w	d7,-(sp)
		move.b	#$C,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	RunPLC
		move.w	(sp)+,d7
		move.w	#$800,d3
		dbf	d7,loc_4F1A
		rts	

; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo_LevelBlockMapsLoad:				
		jmp	LevelBlockMapsLoad
JmpTo_DeformLayers:						
		jmp	DeformLayers
JmpTo_AnimateLevelGFX:						
		jmp	AnimateLevelGFX
JmpTo_DrawTilesAtStart:				
		jmp	DrawTilesAtStart
	endc

; ===========================================================================

GM_SpecialStage:				
		cmpi.b	#7,(v_special_stage).w
		bcs.s	.not7
		move.b	#0,(v_special_stage).w

	.not7:				
		move.w	#sfx_EnterSS,d0				; play warp SFX
		bsr.w	PlaySound
		move.b	#cmd_Fade,d0				; fade out current music
		bsr.w	PlayMusic
		bsr.w	PaletteWhiteOut				; fade to white
		tst.w	(f_two_player).w			; is it 2P mode?
		beq.s	.not2P					; if not, branch
		move.w	#0,(f_two_player).w			; clear 2P mode flag
		st.b	(f_ss_2p).w				; set SS 2P flag
		bra.s	.ss_vdp_setup

	.not2P:				
		sf.b	(f_ss_2p).w				; clear 2P SS flag

	.ss_vdp_setup:
		; Configure the VDP for Special Stage mode.			
		disable_ints					; disable interrupts
		lea	(vdp_control_port).l,a6
		move.w	#vdp_full_vscroll|vdp_1px_hscroll,(a6)	; v-scroll by screen, h-scroll by line
		move.w	#vdp_md_color,(a6)			; md color mode, H-int disabled
		move.w	#vdp_hint_counter+(screen_height-1),(v_vdp_hint_counter).w ; H-int every 224 scanlines
		move.w	#vdp_fg_nametable+(vram_ss_fg1>>10),(a6) ; primary FG plane table at $C000
		move.w	#vdp_bg_nametable+(vram_ss_bg>>13),(a6)	; BG plane table at $A000
		move.w	#vdp_256px_screen_width|vdp_shadow_highlight,(a6) ; H32 mode, no interlace, shadow/highlight mode
		move.w	#vdp_plane_height_32|vdp_plane_width_128,(a6) ; 128x32 plane size
		move.w	#vdp_bg_color+0,(a6)			; BG color = line 0 entry 0
		move.w	#vdp_hscroll_table+(vram_hscroll>>10),(a6) ; H-scroll table at $FC00
		move.w	#vdp_sprite_table+(vram_sprites>>9),(a6) ; sprite attribute table at $F800 
		
		disable_display
		
		; Clear the VRAM regions we just configured. As this is done via macro, a lot of 
		; cycles are wasted setting the control port to a5 and setting and resetting
		; the VDP increment every single time. This could be optimized with a 
		; modified macro that only does those tasks if actually required.
		dma_fill	0,sizeof_vram_planetable_128x32,vram_ss_fg2	
		dma_fill	0,sizeof_vram_planetable_128x32,vram_ss_fg1
		dma_fill	0,sizeof_vram_planetable_128x32,vram_ss_bg
		dma_fill	0,sizeof_vram_hscroll,vram_hscroll

		; Clear several variables and main RAM regions.
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	(v_unused_ss).w
		clr.b	(f_ss_started).w

	if FixBugs
		clear_ram 	v_sprite_buffer,v_sprite_buffer_end
		clear_ram	v_ss_hscroll_buffer_1,v_ss_hscroll_buffer_1_end
		clear_ram	ss_shared_ram,ss_shared_ram_end
	else
		; These '+4's shouldn't be here; 'clear_ram' accidentally clears an additional 4 bytes.
		clear_ram 	v_sprite_buffer,v_sprite_buffer_end+4
		clear_ram	v_ss_hscroll_buffer_1,v_ss_hscroll_buffer_1_end+4
		clear_ram	ss_shared_ram,ss_shared_ram_end+4
	endc
		
		clear_ram	v_sprite_queue,v_sprite_queue_end
		clear_ram	ost,ost_end
		
    if FixBugs
		; However, the '+4' after 'ss_shared_ram_end' is very useful, as it resets the
		; DMA queue, avoiding graphical glitches in the Special Stage.
		; In fact, without resetting the DMA queue, Tails sprite DPLCs and other
		; level DPLCs that are still in the queue overwrite the Special Stage graphics the next
		; time 'ProcessDMA' is called.
		; This '+4' doesn't seem to be intentional, because of the other useless '+4' above,
		; and because a '+2' is enough to reset the DMA queue and fix this bug.
		; This is a fortunate accident!
		; Note that this is not a clean way to reset the DMA queue because
		; v_dma_queue_slot should be updated as well.
		reset_dma_queue
    endc
		
		enable_ints
		lea	(vdp_control_port).l,a6
		move.w	#vdp_auto_inc+2,(a6)			; redundant, this was already done by the last dma_fill
		bsr.w	SS_InitHScroll				; set up initial H-scroll values
		bsr.w	SS_LoadCompressedData			; load halfpipe graphics and layout, perspective, and object location data
		move.w	#0,(v_ss_current_segment).w
		moveq	#id_PLC_SpecialStage,d0			; load Special Stage PLCs
		bsr.w	QuickPLC
		clr.b	(f_level_started).w
		move.l	#0,(v_camera_x_pos).w
		move.l	#0,(v_camera_y_pos).w
		move.l	#0,(v_camera_x_pos_copy).w
		move.l	#0,(v_camera_y_pos_copy).w
		cmpi.w	#sonic_alone,(v_player_mode).w		; is this a Sonic alone game?
		bgt.s	.dont_load_sonic			; if not, branch
		move.b	#id_SonicSpecial,(v_ost_player1+ost_id).w ; load Special Stage Sonic
		tst.w	(v_player_mode).w			; is it a Sonic and Tails game?
		bne.s	.dont_load_tails			; if not, branch

	.dont_load_sonic:				
		move.b	#id_TailsSpecial,(v_ost_player2+ost_id).w ; load Special Stage Tails

	.dont_load_tails:			
		move.b	#id_HUDSpecial,(v_ss_hud+ost_id).w	; load Special Stage HUD
		move.b	#id_StartBannerSpecial,(v_ss_start_banner+ost_id).w ; load "START" banner
		move.b	#id_RingCountSpecial,(v_ss_number_of_rings+ost_id).w ; load "GET X RINGS" prompt  
		move.w	#$80,(v_ss_x_offset).w
		move.w	#$36,(v_ss_y_offset).w 
		bsr.w	SS_LoadBackground
		bsr.w	SS_LoadPlayerArt
		bsr.w	SS_LoadPalAndData
		move.l	#$C0000,(v_ss_new_speed_factor).w
		clr.w	(v_joypad_hold).w
		clr.w	(v_joypad2_hold).w

	.draw_initial_1:		
		move.b	#id_VBlank_SpecialStage,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.b	(v_ss_track_drawing_index).w,d0
		bne.s	.draw_initial_1
		
		bsr.w	SS_DrawTrack

	.draw_initial_2:			
		move.b	#id_VBlank_SpecialStage,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	SS_DrawTrack
		bsr.w	SS_LoadCurrentPerspective
		bsr.w	SS_ObjectsManager
		move.b	(v_ss_track_duration_timer).w,d0
		subq.w	#1,d0
		bne.s	.draw_initial_2
		
		jsr	loc_3561E				; Obj5A_CreateRingsToGoText
		bsr.w	SS_ScrollBG
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		move.b	#id_VBlank_CtrlDMA,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	#mus_SpecialStage,d0	
		bsr.w	PlayMusic
		enable_display
		bsr.w	PaletteWhiteIn

; ---------------------------------------------------------------------------
; Initial Special Stage loop (while START banner is displayed)
; ---------------------------------------------------------------------------

SpecialStage_StartLoop:				
		bsr.w	PauseGame
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w			
		move.w	(v_joypad2_hold_actual).w,(v_joypad2_hold).w
		cmpi.b	#id_SpecialStage,(v_gamemode).w
		bne.w	loc_541A
		move.b	#id_VBlank_SpecialStage,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	SS_DrawTrack
		bsr.w	SS_SetGeoOffsets
		bsr.w	SS_LoadCurrentPerspective
		bsr.w	SS_ObjectsManager
		bsr.w	SS_ScrollBG
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.b	(f_ss_started).w			; is start banner still displayed?
		beq.s	SpecialStage_StartLoop			; if so, loop
		
		moveq	#id_PLC_SpecialStageBombs,d0		; load SS bomb graphics
		bsr.w	AddPLC

; ---------------------------------------------------------------------------
; Main Special Stage loop (once START banner has unloaded)
; ---------------------------------------------------------------------------

SpecialStage_MainLoop:				
		bsr.w	PauseGame
		cmpi.b	#id_SpecialStage,(v_gamemode).w
		bne.w	loc_541A
		move.b	#id_VBlank_SpecialStage,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	SS_DrawTrack
		bsr.w	SS_SetGeoOffsets
		bsr.w	SS_LoadCurrentPerspective
		bsr.w	SS_ObjectsManager
		bsr.w	SS_ScrollBG
		bsr.w	SS_PaletteCycle
		tst.b	(f_ss_pause_only).w
		beq.s	loc_52A0
		move.w	(v_joypad_hold_actual).w,d0
		andi.w	#-$7F80,d0
		move.w	d0,(v_joypad_hold).w
		move.w	(v_joypad2_hold_actual).w,d0
		andi.w	#-$7F80,d0
		move.w	d0,(v_joypad2_hold).w
		bra.s	loc_52AC
; ===========================================================================

loc_52A0:				
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w
		move.w	(v_joypad2_hold_actual).w,(v_joypad2_hold).w

loc_52AC:				
		jsr	ExecuteObjects
		tst.b	(f_ss_chk_rings).w
		bne.s	loc_52C4
		jsr	BuildSprites
		bsr.w	RunPLC
		bra.s	SpecialStage_MainLoop
; ===========================================================================

loc_52C4:				
		andi.b	#countof_emeralds,(v_emeralds).w
		tst.b	(f_ss_2p).w
		beq.s	loc_52E2
		lea	(v_ss_2p_ring_buffer).w,a0
		move.w	(a0)+,d0
		rept 5
		add.w	(a0)+,d0
		endr
		bra.s	loc_52EA
; ===========================================================================

loc_52E2:				
		move.w	(v_rings).w,d0
		add.w	(v_rings_p2).w,d0

loc_52EA:				
		cmp.w	(v_ss_perfect_rings_left).w,d0
		bne.s	loc_52F4
		st.b	(f_ss_perfect).w

loc_52F4:				
		bsr.w	PaletteWhiteOut
		tst.w	(f_two_player_mode_copy).w
		bne.w	loc_540C
		disable_ints
		lea	(vdp_control_port).l,a6
		move.w	#vdp_fg_nametable+(vram_menu_fg>>10),(a6)
		move.w	#vdp_bg_nametable+(vram_bg>>13),(a6)
		move.w	#vdp_plane_width_64|vdp_plane_height_32,(a6)
		move.w	#vdp_320px_screen_width,(a6)
		bsr.w	ClearScreen
		jsrto	HUD_Base,JmpTo_HUD_Base
		reset_dma_queue
		enable_ints
		moveq	#$27,d0
		bsr.w	PalLoad_Now
		moveq	#0,d0
		bsr.w	NewPLC
		move.l	#$40400000,d0
		lea	word_7822(pc),a0
		jsrto	LoadTitleCardSS,JmpTo_LoadTitleCardSS
		move.l	#$72000002,(vdp_control_port).l
		lea	(Nem_SpecialStageResults).l,a0
		bsr.w	NemDec
		move.w	(v_player_mode).w,d0
		beq.s	loc_5374
		subq.w	#1,d0
		beq.s	loc_5370
		clr.w	(v_rings).w
		bra.s	loc_5374
; ===========================================================================

loc_5370:				
		clr.w	(v_rings_p2).w

loc_5374:				
					
		move.w	(v_rings).w,(v_bonus_count_1).w
		move.w	(v_rings_p2).w,(v_bonus_count_2).w
		clr.w	(v_total_bonus_countdown).w
		tst.b	(f_got_emerald).w
		beq.s	loc_5390
		move.w	#$3E8,(v_total_bonus_countdown).w

loc_5390:				
		move.b	#1,(f_hud_score_update).w
		move.b	#1,(f_pass_bonus_update).w
		move.w	#$9A,d0	
		jsr	PlaySound
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_53B0:				
		move.l	d0,(a1)+
		dbf	d1,loc_53B0
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_53C0:				
		move.l	d0,(a1)+
		dbf	d1,loc_53C0
		move.b	#$6F,($FFFFB800).w

loc_53CC:				
					
		move.b	#8,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.w	(f_restart).w
		beq.s	loc_53CC
		tst.l	(v_plc_buffer).w
		bne.s	loc_53CC
		move.w	#$CA,d0	
		bsr.w	PlaySound
		bsr.w	PaletteWhiteOut
		tst.w	(f_two_player_mode_copy).w
		bne.s	loc_540C
		move.b	#$C,(v_gamemode).w
		rts	
; ===========================================================================

loc_540C:				
					
		move.w	#3,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_541A:				
					
		move.b	#-1,($FFFFFFE0).w
		move.b	#8,(v_vblank_routine).w
		bra.w	WaitForVBlank
; ===========================================================================

		incfile	Pal_SpecialStageStars			; loc_542A: Pal_UNK8:

; ===========================================================================


SS_PaletteCycle:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#3,d0
		bne.s	loc_5470
		move.b	(v_ss_star_color_1).w,d0
		addi_.b	#1,(v_ss_star_color_1).w
		andi.w	#7,d0
		add.w	d0,d0
		move.w	Pal_SpecialStageStars(pc,d0.w),($FFFFFB1C).w
		move.b	(v_ss_star_color_2).w,d0
		addi_.b	#1,(v_ss_star_color_2).w
		andi.w	#7,d0
		add.w	d0,d0
		move.w	Pal_SpecialStageStars(pc,d0.w),($FFFFFB1E).w

loc_5470:				
		cmpi.b	#6,(v_special_stage).w
		bne.s	loc_5482
		cmpi.b	#3,(v_special_act).w
		beq.w	loc_54DC

loc_5482:				
		tst.b	(f_ss_checkpoint_rainbow).w
		beq.s	locret_54BA
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#7,d0
		bne.s	locret_54BA
		move.b	(v_ss_rainbow_palette).w,d0
		addi_.b	#1,(v_ss_rainbow_palette).w
		andi.b	#3,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	word_54C4(pc,d0.w),($FFFFFB76).w
		move.w	word_54C6(pc,d0.w),($FFFFFB78).w
		move.w	word_54C8(pc,d0.w),($FFFFFB7A).w

locret_54BA:				
		rts	
; ===========================================================================
word_54BC:	dc.w   $EE,  $C0,  $EE,	 $C0			; 0
word_54C4:	dc.w   $EE					; 0
word_54C6:	dc.w   $CC					; 0
word_54C8:	dc.w   $88,  $E0,  $C0,	 $80, $EE0, $CC0, $880,	$E0E, $C0C, $808 ; 0
; ===========================================================================

loc_54DC:				
		tst.b	(f_ss_pause_only).w
		beq.s	loc_5482
		moveq	#0,d0
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#1,d0
		bne.w	loc_5482
		move.w	(v_rings).w,d2
		add.w	(v_rings_p2).w,d2
		cmp.w	(v_ss_ring_requirement).w,d2
		blt.w	loc_5482
		lea	($FFFFFB02).w,a0
		movea.l	a0,a1
		move.w	(a0)+,d0
		moveq	#$B,d1

loc_550A:				
		move.w	(a0)+,(a1)+
		dbf	d1,loc_550A
		move.w	d0,(a1)
		rts	


; ===========================================================================


SS_LoadCurrentPerspective:				
					
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.s	locret_5532
		movea.l	#v_ss_perspective_data,a0
		moveq	#0,d0
		move.b	(v_ss_track_mapping_frame).w,d0
		add.w	d0,d0
		adda.w	(a0,d0.w),a0
		move.l	a0,(v_ss_ctrl_record_buffer_end).w

locret_5532:				
		rts	


; ===========================================================================


SS_ObjectsManager:				
					
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.w	locret_55DC
		moveq	#0,d0
		move.b	(v_ss_current_segment).w,d0
		cmp.b	(v_ss_last_segment_2).w,d0
		beq.w	locret_55DC
		move.b	d0,(v_ss_last_segment_2).w
		movea.l	(v_ss_current_layout).w,a1
		move.b	(a1,d0.w),d3
		andi.w	#$7F,d3
		lea	(byte_55FE).l,a0
		move.b	(a0,d3.w),d3
		add.w	d3,d3
		add.w	d3,d3
		movea.l	(v_ss_current_obj_locations).w,a0

loc_556E:				
		bsr.w	FindFreeObjSpecial
		bne.s	locret_55DC
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	loc_55B2
		move.b	d0,d1
		andi.b	#$40,d1
		bne.s	loc_559A
		addq.w	#1,(v_ss_perfect_rings_left).w
		move.b	#id_RingsSpecial,ost_id(a1)
		add.w	d0,d0
		add.w	d0,d0
		add.w	d3,d0
		move.w	d0,$30(a1)
		move.b	(a0)+,$26(a1)
		bra.s	loc_556E
; ===========================================================================

loc_559A:				
		andi.w	#$3F,d0
		move.b	#id_BombSpecial,ost_id(a1)
		add.w	d0,d0
		add.w	d0,d0
		add.w	d3,d0
		move.w	d0,$30(a1)
		move.b	(a0)+,$26(a1)
		bra.s	loc_556E
; ===========================================================================

loc_55B2:				
		move.l	a0,(v_ss_current_obj_locations).w
		addq.b	#1,d0
		beq.s	locret_55DC
		addq.b	#1,d0
		beq.s	loc_55D8
		addq.b	#1,d0
		beq.s	loc_55CC
		st.b	(f_ss_no_checkpoint).w
		sf.b	(f_ss_no_checkpoint_msg).w
		bra.s	loc_55D8
; ===========================================================================

loc_55CC:				
		tst.b	(f_ss_2p).w
		bne.s	loc_55D8
		move.b	#id_EmeraldSpecial,ost_id(a1)
		rts	
; ===========================================================================

loc_55D8:				
		move.b	#id_MessageSpecial,ost_id(a1)

locret_55DC:				
		rts	

; ===========================================================================
dword_55DE:	
		dc.l $40000002					; 0 
		dc.l $47000002					; 1
		dc.l $4E000002					; 2
		dc.l $55000002					; 3
		dc.l $40000003					; 4
		dc.l $47000003					; 5
		dc.l $4E000003					; 6
		dc.l $55000003					; 7
byte_55FE:	
		dc.b $18					; 0 			
		dc.b $18					; 1
		dc.b  $C					; 2
		dc.b $10					; 3
		dc.b  $B					; 4
		dc.b   0					; 5

; ===========================================================================


SS_DrawTrack:								
		moveq	#0,d0
		move.b	(v_ss_track_drawing_index).w,d0
		cmpi.b	#4,d0
		bge.w	loc_6C0A
		add.w	d0,d0
		add.w	d0,d0
		bne.w	loc_56D2
		move.l	(v_ss_track_last_mappings).w,(v_ss_track_last_mappings_copy).w
		move.b	(v_ss_track_mapping_frame).w,(v_ss_track_last_mapping_frame).w
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		move.b	(v_ss_current_segment).w,d1
		move.b	(v_ss_track_anim_frame).w,d2
		movea.l	(v_ss_current_layout).w,a1
		move.b	(a1,d1.w),d3
		andi.b	#$7F,d3
		move.b	d3,(v_ss_track_anim).w
		move.w	d3,d1
		add.w	d3,d3
		lea	(Ani_SpecialStageTrack).l,a1
		adda.w	(a1,d3.w),a1
		adda.w	d2,a1
		moveq	#0,d4
		move.b	(a1),d4
		move.b	d4,(v_ss_track_mapping_frame).w
		lsl.w	#2,d4
		lea	(off_643E).l,a1
		movea.l	(a1,d4.w),a0
		movea.l	a0,a1
		moveq	#0,d2
		move.b	(a0)+,d2
		move.b	(a0)+,d2
		move.b	(a0)+,d2
		lsl.w	#8,d2
		move.b	(a0)+,d2
		addq.w	#4,d2
		adda.w	d2,a1
		movea.l	a1,a2
		moveq	#0,d2
		move.b	(a1)+,d2
		move.b	(a1)+,d2
		move.b	(a1)+,d2
		lsl.w	#8,d2
		move.b	(a1)+,d2
		addq.w	#4,d2
		adda.w	d2,a2
		move.b	(a2)+,d2
		move.b	(a2)+,d2
		move.b	(a2)+,d2
		move.b	(a2)+,d2
		move.l	a0,(v_ss_track_mappings_bitflags).w
		move.l	a0,(v_ss_track_last_mappings).w
		move.l	a1,(v_ss_track_mappings_uncompressed).w
		move.l	a2,(v_ss_track_mappings_rle).w
		lea_	byte_55FE,a4
		move.b	(a4,d1.w),d2
		move.b	(v_ss_track_anim_frame).w,(v_ss_track_last_anim_frame).w
		addi_.b	#1,(v_ss_track_anim_frame).w
		cmp.b	(v_ss_track_anim_frame).w,d2
		bne.s	loc_56D2
		move.b	#0,(v_ss_track_anim_frame).w
		move.b	(v_ss_current_segment).w,(v_ss_last_segment).w
		addi_.b	#1,(v_ss_current_segment).w

loc_56D2:				
		tst.b	(f_ss_alternate_fg_table).w
		beq.s	loc_56DC
		addi.w	#$10,d0

loc_56DC:				
		lea_	dword_55DE,a3
		movea.l	(a3,d0.w),a3
		move.l	a3,(vdp_control_port).l
		lea	(vdp_data_port).l,a6
		bsr.w	loc_6C0A
		movea.l	(v_ss_track_mappings_bitflags).w,a0
		movea.l	(v_ss_track_mappings_uncompressed).w,a1
		movea.l	(v_ss_track_mappings_rle).w,a2
		lea	(v_ss_draw_reg_buffer).w,a3
		movem.w	(a3)+,d2-d7
		lea	(word_651E).l,a3
		lea	(byte_69E6).l,a4
		movea.w	#$FFF8,a5
		moveq	#0,d0
		tst.b	(v_ss_track_orientation).w
		bne.w	loc_5D8A

loc_5722:				
					
		adda_.w	#1,a5
		cmpa.w	#0,a5
		beq.w	loc_5D58

loc_572E:				
					
		moveq	#0,d1
		subq.w	#1,d7
		bpl.s	loc_5738
		move.b	(a0)+,d6
		moveq	#7,d7

loc_5738:				
		add.b	d6,d6
		bcc.s	loc_5788
		subq.b	#1,d5
		bpl.s	loc_5744
		move.b	(a1)+,d4
		moveq	#7,d5

loc_5744:				
		add.b	d4,d4
		bcc.s	loc_5768
		moveq	#$A,d0
		sub.b	d5,d0
		subq.b	#3,d0
		add.w	d0,d0
		move.w	off_5758(pc,d0.w),d0
		jmp	off_5758(pc,d0.w)
; ===========================================================================
off_5758:	index offset(*)

		ptr loc_58FE					; 0 			
		ptr loc_58D4					; 1
		ptr loc_58AA					; 2
		ptr loc_5880					; 3
		ptr loc_5856					; 4
		ptr loc_5836					; 5
		ptr loc_5806					; 6
		ptr loc_57DE					; 7
; ===========================================================================

loc_5768:				
		moveq	#6,d0
		sub.b	d5,d0
		addq.b	#1,d0
		add.w	d0,d0
		move.w	off_5778(pc,d0.w),d0
		jmp	off_5778(pc,d0.w)
; ===========================================================================
off_5778:	index offset(*)
		ptr loc_5A1A					; 0 		
		ptr loc_5A02					; 1
		ptr loc_59DC					; 2
		ptr loc_59B6					; 3
		ptr loc_5990					; 4
		ptr loc_596A					; 5
		ptr loc_5944					; 6
		ptr loc_5928					; 7
; ===========================================================================
; SSTrackDrawUnc_Read10LUT:
loc_5788:				
		subq.b	#1,d3
		bpl.s	loc_579C
		move.b	(a2)+,d2
		cmpi.b	#-1,d2
		bne.s	loc_579A
		moveq	#0,d3
		bra.w	loc_5722
; ===========================================================================

loc_579A:				
		moveq	#7,d3

loc_579C:				
		add.b	d2,d2
		bcc.s	loc_57BE
		moveq	#7,d0
		sub.b	d3,d0
		add.b	d0,d0
		move.w	off_57AE(pc,d0.w),d0
		jmp	off_57AE(pc,d0.w)
; ===========================================================================
; SSTrackDrawUnc_Read6LUT:
off_57AE:	index offset(*)
		ptr loc_5BCE					; 0 				
		ptr loc_5B92					; 1
		ptr loc_5B56					; 2
		ptr loc_5B1A					; 3
		ptr loc_5ADE					; 4
		ptr loc_5AA2					; 5
		ptr loc_5A66					; 6
		ptr loc_5A34					; 7
; ===========================================================================

loc_57BE:				
		moveq	#6,d0
		sub.b	d3,d0
		addq.b	#1,d0
		add.b	d0,d0
		move.w	off_57CE(pc,d0.w),d0
		jmp	off_57CE(pc,d0.w)
; ===========================================================================
; SSTrackDrawRLE_Read7LUT:
off_57CE:	index offset(*)
		ptr loc_5D34					; 0 			
		ptr loc_5D12					; 1
		ptr loc_5CE2					; 2
		ptr loc_5CB2					; 3
		ptr loc_5C82					; 4
		ptr loc_5C52					; 5
		ptr loc_5C22					; 6
		ptr loc_5BFC					; 7
; ===========================================================================

loc_57DE:				
		moveq	#0,d0
		move.b	(a1)+,d0
		lsl.w	#2,d0
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#6,d5
		bra.w	loc_572E
; ===========================================================================

loc_5806:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$200,d0
		move.b	(a1)+,d1
		lsl.w	#1,d1
		or.w	d1,d0
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#7,d5
		bra.w	loc_572E
; ===========================================================================

loc_5836:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$300,d0
		move.b	(a1)+,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#0,d5
		bra.w	loc_572E
; ===========================================================================

loc_5856:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$380,d0
		move.b	(a1)+,d4
		ror.b	#1,d4
		move.b	d4,d1
		andi.b	#$7F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#1,d5
		bra.w	loc_572E
; ===========================================================================

loc_5880:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3C0,d0
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d1
		andi.b	#$3F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#2,d5
		bra.w	loc_572E
; ===========================================================================

loc_58AA:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3E0,d0
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#3,d5
		bra.w	loc_572E
; ===========================================================================

loc_58D4:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F0,d0
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#4,d5
		bra.w	loc_572E
; ===========================================================================

loc_58FE:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F8,d0
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#5,d5
		bra.w	loc_572E
; ===========================================================================

loc_5928:				
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#2,d5
		bra.w	loc_572E
; ===========================================================================

loc_5944:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$20,d0
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#3,d5
		bra.w	loc_572E
; ===========================================================================

loc_596A:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$30,d0
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#4,d5
		bra.w	loc_572E
; ===========================================================================

loc_5990:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$38,d0
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#5,d5
		bra.w	loc_572E
; ===========================================================================

loc_59B6:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#6,d5
		bra.w	loc_572E
; ===========================================================================

loc_59DC:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#7,d5
		bra.w	loc_572E
; ===========================================================================

loc_5A02:				
		lsr.b	#2,d4
		andi.w	#$3F,d4
		add.w	d4,d4
		move.w	(a3,d4.w),d4
		ori.w	#tile_pal4,d4
		move.w	d4,(a6)
		moveq	#0,d5
		bra.w	loc_572E
; ===========================================================================

loc_5A1A:				
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#tile_pal4,d0
		move.w	d0,(a6)
		moveq	#1,d5
		bra.w	loc_572E
; ===========================================================================

loc_5A34:				
		move.b	(a2)+,d2
		ror.b	#1,d2
		move.b	d2,d0
		andi.w	#$7F,d0
		moveq	#1,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5A5C:				
		move.w	d1,(a6)
		dbf	d0,loc_5A5C
		bra.w	loc_572E
; ===========================================================================

loc_5A66:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$40,d1
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0
		or.b	d1,d0
		moveq	#2,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5A98:				
		move.w	d1,(a6)
		dbf	d0,loc_5A98
		bra.w	loc_572E
; ===========================================================================

loc_5AA2:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$60,d1
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d0
		andi.w	#$1F,d0
		or.b	d1,d0
		moveq	#3,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5AD4:				
		move.w	d1,(a6)
		dbf	d0,loc_5AD4
		bra.w	loc_572E
; ===========================================================================

loc_5ADE:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$70,d1
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d0
		andi.w	#$F,d0
		or.b	d1,d0
		moveq	#4,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5B10:				
		move.w	d1,(a6)
		dbf	d0,loc_5B10
		bra.w	loc_572E
; ===========================================================================

loc_5B1A:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$78,d1
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d0
		andi.w	#7,d0
		or.b	d1,d0
		moveq	#5,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5B4C:				
		move.w	d1,(a6)
		dbf	d0,loc_5B4C
		bra.w	loc_572E
; ===========================================================================

loc_5B56:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7C,d1
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d0
		andi.w	#3,d0
		or.b	d1,d0
		moveq	#6,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5B88:				
		move.w	d1,(a6)
		dbf	d0,loc_5B88
		bra.w	loc_572E
; ===========================================================================

loc_5B92:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7E,d1
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d0
		andi.w	#1,d0
		or.b	d1,d0
		moveq	#7,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5722
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5BC4:				
		move.w	d1,(a6)
		dbf	d0,loc_5BC4
		bra.w	loc_572E
; ===========================================================================

loc_5BCE:				
		lsr.b	#1,d2
		andi.w	#$7F,d2
		moveq	#0,d3
		cmpi.b	#$7F,d2
		beq.w	loc_5722
		addi.w	#$40,d2
		add.w	d2,d2
		add.w	d2,d2
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5BF2:				
		move.w	d1,(a6)
		dbf	d0,loc_5BF2
		bra.w	loc_572E
; ===========================================================================

loc_5BFC:				
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#2,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5C18:				
		move.w	d1,(a6)
		dbf	d0,loc_5C18
		bra.w	loc_572E
; ===========================================================================

loc_5C22:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$20,d0
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		moveq	#3,d3
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5C48:				
		move.w	d1,(a6)
		dbf	d0,loc_5C48
		bra.w	loc_572E
; ===========================================================================

loc_5C52:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$30,d0
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#4,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5C78:				
		move.w	d1,(a6)
		dbf	d0,loc_5C78
		bra.w	loc_572E
; ===========================================================================

loc_5C82:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$38,d0
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#5,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5CA8:				
		move.w	d1,(a6)
		dbf	d0,loc_5CA8
		bra.w	loc_572E
; ===========================================================================

loc_5CB2:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#6,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5CD8:				
		move.w	d1,(a6)
		dbf	d0,loc_5CD8
		bra.w	loc_572E
; ===========================================================================

loc_5CE2:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#7,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5D08:				
		move.w	d1,(a6)
		dbf	d0,loc_5D08
		bra.w	loc_572E
; ===========================================================================

loc_5D12:				
		lsr.b	#2,d2
		andi.w	#$3F,d2
		add.w	d2,d2
		add.w	d2,d2
		moveq	#0,d3
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5D2A:				
		move.w	d1,(a6)
		dbf	d0,loc_5D2A
		bra.w	loc_572E
; ===========================================================================

loc_5D34:				
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#1,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#tile_pal4|tile_hi,d1

loc_5D4E:				
		move.w	d1,(a6)
		dbf	d0,loc_5D4E
		bra.w	loc_572E
; ===========================================================================

loc_5D58:				
					
		cmpi.b	#3,(v_ss_track_drawing_index).w
		beq.s	loc_5D76
		move.l	a0,(v_ss_track_mappings_bitflags).w
		move.l	a1,(v_ss_track_mappings_uncompressed).w
		move.l	a2,(v_ss_track_mappings_rle).w
		lea	(v_ss_draw_reg_buffer_end).w,a3
		movem.w	d2-d7,-(a3)
		rts	
; ===========================================================================

loc_5D76:				
		lea	(v_ss_draw_reg_buffer).w,a2
		moveq	#0,d0
		rept 6
		move.w	d0,(a2)+
		endr
		rts	
; ===========================================================================

loc_5D8A:				
					
		adda_.w	#1,a5
		cmpa.w	#0,a5
		beq.w	loc_5D58
		lea	($FFFFD000).w,a6
		swap	d0
		addi.w	#$100,d0
		andi.w	#$F00,d0
		adda.w	d0,a6
		swap	d0

loc_5DA8:				
					
		moveq	#0,d1
		subq.w	#1,d7
		bpl.s	loc_5DB2
		move.b	(a0)+,d6
		moveq	#7,d7

loc_5DB2:				
		add.b	d6,d6
		bcc.s	loc_5E06
		subq.b	#1,d5
		bpl.s	loc_5DBE
		move.b	(a1)+,d4
		moveq	#7,d5

loc_5DBE:				
		add.b	d4,d4
		bcc.s	loc_5DE4
		move.w	#$A,d0
		sub.b	d5,d0
		subq.b	#3,d0
		add.w	d0,d0
		move.w	off_5DD4(pc,d0.w),d0
		jmp	off_5DD4(pc,d0.w)
; ===========================================================================
off_5DD4:	index offset(*)
		ptr loc_5F82					; 0 		
		ptr loc_5F58					; 1
		ptr loc_5F2E					; 2
		ptr loc_5F04					; 3
		ptr loc_5EDA					; 4
		ptr loc_5EBA					; 5
		ptr loc_5E8A					; 6
		ptr loc_5E60					; 7
; ===========================================================================

loc_5DE4:				
		move.w	#6,d0
		sub.b	d5,d0
		addq.b	#1,d0
		add.w	d0,d0
		move.w	off_5DF6(pc,d0.w),d0
		jmp	off_5DF6(pc,d0.w)
; ===========================================================================
off_5DF6:	index offset(*)
		ptr loc_609E					; 0 
		ptr loc_6086					; 1
		ptr loc_6060					; 2
		ptr loc_603A					; 3
		ptr loc_6014					; 4
		ptr loc_5FEE					; 5
		ptr loc_5FC8					; 6
		ptr loc_5FAC					; 7
; ===========================================================================

loc_5E06:				
		subq.b	#1,d3
		bpl.s	loc_5E1A
		move.b	(a2)+,d2
		cmpi.b	#-1,d2
		bne.s	loc_5E18
		moveq	#0,d3
		bra.w	loc_5D8A
; ===========================================================================

loc_5E18:				
		moveq	#7,d3

loc_5E1A:				
		add.b	d2,d2
		bcc.s	loc_5E3E
		move.w	#7,d0
		sub.b	d3,d0
		add.b	d0,d0
		move.w	off_5E2E(pc,d0.w),d0
		jmp	off_5E2E(pc,d0.w)
; ===========================================================================
off_5E2E:	index offset(*)
		ptr	loc_6252				; 0 		
		ptr loc_6216					; 1
		ptr loc_61DA					; 2
		ptr loc_619E					; 3
		ptr loc_6162					; 4
		ptr loc_6126					; 5
		ptr loc_60EA					; 6
		ptr loc_60B8					; 7
; ===========================================================================

loc_5E3E:				
		move.w	#6,d0
		sub.b	d3,d0
		addq.b	#1,d0
		add.b	d0,d0
		move.w	off_5E50(pc,d0.w),d0
		jmp	off_5E50(pc,d0.w)
; ===========================================================================
off_5E50:	index offset(*)
		ptr loc_63B8					; 0 		
		ptr loc_6396					; 1
		ptr loc_6366					; 2
		ptr loc_6336					; 3
		ptr loc_6306					; 4
		ptr loc_62D6					; 5
		ptr loc_62A6					; 6
		ptr loc_6280					; 7
; ===========================================================================

loc_5E60:				
		move.w	#0,d0
		move.b	(a1)+,d0
		lsl.w	#2,d0
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#6,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5E8A:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$200,d0
		move.b	(a1)+,d1
		lsl.w	#1,d1
		or.w	d1,d0
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#7,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5EBA:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$300,d0
		move.b	(a1)+,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#0,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5EDA:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$380,d0
		move.b	(a1)+,d4
		ror.b	#1,d4
		move.b	d4,d1
		andi.b	#$7F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#1,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F04:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3C0,d0
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d1
		andi.b	#$3F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#2,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F2E:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3E0,d0
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#3,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F58:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F0,d0
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#4,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F82:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F8,d0
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		addi.w	#$40,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#5,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5FAC:				
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#2,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5FC8:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$20,d0
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#3,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5FEE:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$30,d0
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#4,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_6014:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$38,d0
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#5,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_603A:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#6,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_6060:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#7,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_6086:				
		lsr.b	#2,d4
		andi.w	#$3F,d4
		add.w	d4,d4
		move.w	(a3,d4.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#0,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_609E:				
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#1,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_60B8:				
		move.b	(a2)+,d2
		ror.b	#1,d2
		move.b	d2,d0
		andi.w	#$7F,d0
		moveq	#1,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_60E0:				
		move.w	d1,-(a6)
		dbf	d0,loc_60E0
		bra.w	loc_5DA8
; ===========================================================================

loc_60EA:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$40,d1
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0
		or.b	d1,d0
		moveq	#2,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_611C:				
		move.w	d1,-(a6)
		dbf	d0,loc_611C
		bra.w	loc_5DA8
; ===========================================================================

loc_6126:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$60,d1
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d0
		andi.w	#$1F,d0
		or.b	d1,d0
		moveq	#3,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_6158:				
		move.w	d1,-(a6)
		dbf	d0,loc_6158
		bra.w	loc_5DA8
; ===========================================================================

loc_6162:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$70,d1
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d0
		andi.w	#$F,d0
		or.b	d1,d0
		moveq	#4,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_6194:				
		move.w	d1,-(a6)
		dbf	d0,loc_6194
		bra.w	loc_5DA8
; ===========================================================================

loc_619E:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$78,d1
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d0
		andi.w	#7,d0
		or.b	d1,d0
		moveq	#5,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_61D0:				
		move.w	d1,-(a6)
		dbf	d0,loc_61D0
		bra.w	loc_5DA8
; ===========================================================================

loc_61DA:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7C,d1
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d0
		andi.w	#3,d0
		or.b	d1,d0
		moveq	#6,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_620C:				
		move.w	d1,-(a6)
		dbf	d0,loc_620C
		bra.w	loc_5DA8
; ===========================================================================

loc_6216:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7E,d1
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d0
		andi.w	#1,d0
		or.b	d1,d0
		moveq	#7,d3
		cmpi.b	#$7F,d0
		beq.w	loc_5D8A
		addi.w	#$40,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_6248:				
		move.w	d1,-(a6)
		dbf	d0,loc_6248
		bra.w	loc_5DA8
; ===========================================================================

loc_6252:				
		lsr.b	#1,d2
		andi.w	#$7F,d2
		moveq	#0,d3
		cmpi.b	#$7F,d2
		beq.w	loc_5D8A
		addi.w	#$40,d2
		add.w	d2,d2
		add.w	d2,d2
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#-$2000,d1

loc_6276:				
		move.w	d1,-(a6)
		dbf	d0,loc_6276
		bra.w	loc_5DA8
; ===========================================================================

loc_6280:				
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#2,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_629C:				
		move.w	d1,-(a6)
		dbf	d0,loc_629C
		bra.w	loc_5DA8
; ===========================================================================

loc_62A6:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$20,d0
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		moveq	#3,d3
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_62CC:				
		move.w	d1,-(a6)
		dbf	d0,loc_62CC
		bra.w	loc_5DA8
; ===========================================================================

loc_62D6:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$30,d0
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#4,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_62FC:				
		move.w	d1,-(a6)
		dbf	d0,loc_62FC
		bra.w	loc_5DA8
; ===========================================================================

loc_6306:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$38,d0
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#5,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_632C:				
		move.w	d1,-(a6)
		dbf	d0,loc_632C
		bra.w	loc_5DA8
; ===========================================================================

loc_6336:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#6,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_635C:				
		move.w	d1,-(a6)
		dbf	d0,loc_635C
		bra.w	loc_5DA8
; ===========================================================================

loc_6366:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#7,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_638C:				
		move.w	d1,-(a6)
		dbf	d0,loc_638C
		bra.w	loc_5DA8
; ===========================================================================

loc_6396:				
		lsr.b	#2,d2
		andi.w	#$3F,d2
		add.w	d2,d2
		add.w	d2,d2
		moveq	#0,d3
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#-$2000,d1

loc_63AE:				
		move.w	d1,-(a6)
		dbf	d0,loc_63AE
		bra.w	loc_5DA8
; ===========================================================================

loc_63B8:				
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#1,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_63D2:				
		move.w	d1,-(a6)
		dbf	d0,loc_63D2
		bra.w	loc_5DA8
; ===========================================================================

Ani_SpecialStageTrack:	index offset(*)
		ptr byte_63E6					; 0 		
		ptr byte_63FE					; 1
		ptr byte_6416					; 2
		ptr byte_6422					; 3
		ptr byte_6432					; 4

		
byte_63E6:	
		dc.b $26,$27,$28,$29,$2A,$2B,$26		; turning
		dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, $A, $B, $C, $D, $E, $F,$10 ; rise
		arraysize	byte_63E6

byte_63FE:	
		dc.b $26,$27,$28,$29,$2A,$2B,$26		; turning
		dc.b $15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20,$21,$22,$23,$24,$25 ; drop
		arraysize	byte_63FE
		
byte_6416:	
		dc.b $26,$27,$28,$29,$2A,$2B,$26		; turning
		dc.b $2C,$2D,$2E,$2F,$30			; exit turn
		arraysize	byte_6416					

byte_6422:	
		dc.b $11,$12,$13,$14,$11,$12,$13,$14		; straight
		dc.b $11,$12,$13,$14,$11,$12,$13,$14		; straight
		arraysize	byte_6422					
byte_6432:	
		dc.b $11,$12,$13,$14				; straight
		dc.b $31,$32,$33,$34,$35,$36,$37		; enter turn
		arraysize	byte_6432
		even			

off_643E:	
		dc.l MapSpec_Rise1				; 0 
		dc.l MapSpec_Rise2				; 1
		dc.l MapSpec_Rise3				; 2
		dc.l MapSpec_Rise4				; 3
		dc.l MapSpec_Rise5				; 4
		dc.l MapSpec_Rise6				; 5
		dc.l MapSpec_Rise7				; 6
		dc.l MapSpec_Rise8				; 7
		dc.l MapSpec_Rise9				; 8
		dc.l MapSpec_Rise10				; 9
		dc.l MapSpec_Rise11				; 10
		dc.l MapSpec_Rise12				; 11
		dc.l MapSpec_Rise13				; 12
		dc.l MapSpec_Rise14				; 13
		dc.l MapSpec_Rise15				; 14
		dc.l MapSpec_Rise16				; 15
		dc.l MapSpec_Rise17				; 16
		dc.l MapSpec_Straight1				; 17
		dc.l MapSpec_Straight2				; 18
		dc.l MapSpec_Straight3				; 19
		dc.l MapSpec_Straight4				; 20
		dc.l MapSpec_Drop1				; 21
		dc.l MapSpec_Drop2				; 22
		dc.l MapSpec_Drop3				; 23
		dc.l MapSpec_Drop4				; 24
		dc.l MapSpec_Drop5				; 25
		dc.l MapSpec_Drop6				; 26
		dc.l MapSpec_Drop7				; 27
		dc.l MapSpec_Drop8				; 28
		dc.l MapSpec_Drop9				; 29
		dc.l MapSpec_Drop10				; 30
		dc.l MapSpec_Drop11				; 31
		dc.l MapSpec_Drop12				; 32
		dc.l MapSpec_Drop13				; 33
		dc.l MapSpec_Drop14				; 34
		dc.l MapSpec_Drop15				; 35
		dc.l MapSpec_Drop16				; 36
		dc.l MapSpec_Drop17				; 37
		dc.l MapSpec_Turning1				; 38
		dc.l MapSpec_Turning2				; 39
		dc.l MapSpec_Turning3				; 40
		dc.l MapSpec_Turning4				; 41
		dc.l MapSpec_Turning5				; 42
		dc.l MapSpec_Turning6				; 43
		dc.l MapSpec_Unturn1				; 44
		dc.l MapSpec_Unturn2				; 45
		dc.l MapSpec_Unturn3				; 46
		dc.l MapSpec_Unturn4				; 47
		dc.l MapSpec_Unturn5				; 48
		dc.l MapSpec_Turn1				; 49
		dc.l MapSpec_Turn2				; 50
		dc.l MapSpec_Turn3				; 51
		dc.l MapSpec_Turn4				; 52
		dc.l MapSpec_Turn5				; 53
		dc.l MapSpec_Turn6				; 54
		dc.l MapSpec_Turn7				; 55

word_651E:	
		dc.w $8001,$8007,$802C,$800B,$8024,$8824,$8039,$882B ; 0				
		dc.w $805D,$885D,$802B,$804A,$8049,$8037,$8849,$8045 ; 8
		dc.w $8845,$883A,$8048,$8850,$8036,$8837,$803A,$8050 ; 16
		dc.w $8842,$8042,$8815,$801D,$804B,$8817,$8848,$8836 ; 24
		dc.w $8038,$884B,$8015,$8021,$8017,$8033,$801A,$802A ; 32
		dc.w $805E,$8028,$8030,$8821,$8838,$881A,$8025,$885E ; 40
		dc.w $8825,$8833,$8003,$8814,$8014,$8004,$804E,$8803 ; 48
		dc.w $800C,$882A,$8002,$8051,$8040,$803D,$8019,$8052 ; 56
		dc.w $8009,$805A,$8830,$884E,$8852,$8851,$8809,$8840 ; 64
		dc.w $802F,$885A,$8818,$8034,$8819,$882F,$883D,$803E ; 72
		dc.w $8018,$880C,$8012,$8804,$8026,$8834,$8805,$803B ; 80
		dc.w $883E,$883B,$8000,$8802,$8005,$800D,$8055,$80AF ; 88
		dc.w $801C,$801B,$880D,$8016,$8812,$801F,$8832,$8013 ; 96
		dc.w $8092,$8826,$8010,$804D,$8047,$8892,$8800,$8062 ; 104
		dc.w $8066,$8090,$8008,$887C,$8867,$88F7,$800E,$8060 ; 112
		dc.w $8032,$8094,$881C,$8905,$88B0,$8059,$800F,$8067 ; 120
		dc.w $8068,$8894,$807C,$80B0,$80B1,$8006,$8841,$8087 ; 128
		dc.w $8093,$80CC,$881F,$8868,$8041,$808F,$8890,$80C2 ; 136
		dc.w $8813,$88C2,$805C,$8064,$80D8,$881B,$88CC,$8811 ; 144
		dc.w $8855,$88E2,$88F3,$8044,$88D8,$8085,$80A1,$80C1 ; 152
		dc.w $8119,$8889,$880A,$8822			; 160
		
		dc.w $803F,$805B,$807F,$8886,$8808,$8080,$8866,$88E0 ; 0
		dc.w $88C1,$8020,$8022,$8054,$80D2,$8859,$88B1,$8860 ; 8
		dc.w $8919,$88A4,$888F,$800A,$8061,$8075,$8095,$80B6 ; 16
		dc.w $80E0,$8810,$8898,$885B,$88D2,$8816,$8053,$8091 ; 24
		dc.w $8096,$80A4,$80DD,$80E6,$887A,$884D,$88E6,$8011 ; 32
		dc.w $8057,$807A,$8086,$809E,$80DA,$8058,$80DC,$80E3 ; 40
		dc.w $8863,$803C,$8056,$8069,$807E,$80AE,$80B5,$80B8 ; 48
		dc.w $80CD,$80FB,$80FF,$885C,$88CD,$8874,$88EA,$88FF ; 56
		dc.w $88B5,$8043,$806C,$8074,$8077,$8089,$8097,$809F ; 64
		dc.w $80A0,$8113,$811B,$8878,$880F,$88E1,$88FB,$8928 ; 72
		dc.w $8063,$8084,$808D,$80CB,$80D7,$80E9,$8128,$8138 ; 80
		dc.w $88AE,$88EC,$8031,$804C,$80E2,$80EA,$8864,$8029 ; 88
		dc.w $802D,$806D,$8078,$8088,$80B4,$80BE,$80CF,$80E1 ; 96
		dc.w $80E4,$8854,$88D6,$88D7,$8861,$892B,$8847,$8035 ; 104
		dc.w $806A,$8072,$8073,$8098,$80D5,$80D6,$8116,$811E ; 112
		dc.w $8126,$8127,$812F,$815D,$8869,$8888,$8875,$8897 ; 120
		dc.w $88B4,$88D1,$88D4,$88D5,$88CB,$88E4,$8891,$8862 ; 128
		dc.w $8806,$88B8,$8065,$806E,$8071,$807D,$80D1,$80E7 ; 136
		dc.w $80F9,$8108,$812E,$814B,$8881,$8885,$8877,$887E ; 144
		dc.w $8895,$88DF,$8887,$886C,$88F5,$8908,$8879,$886D ; 152
		dc.w $892A,$88AA,$801E,$8027,$8046,$805F,$8070,$8079 ; 160
		dc.w $809A,$80AA,$80C3,$80D3,$80D4,$80DE,$80DF,$80F8 ; 168
		dc.w $8100,$8101,$812B,$8133,$8136,$8143,$8151,$882E ; 176
		dc.w $889E,$8899,$88D3,$88DD,$88DE,$88E9,$88EF,$88F0 ; 184
		dc.w $88F8,$8927,$88BE,$8896,$804F,$806F,$8081,$808B ; 192
		dc.w $808E,$809C,$80A3,$80B3,$80C0,$80CE,$80F0,$80F1 ; 200
		dc.w $80F5,$80F7,$8102,$8104,$8105,$8109,$810C,$8114 ; 208
		dc.w $8118,$8120,$8124,$8125,$812A,$8130,$8132,$8137 ; 216
		dc.w $8159,$8165,$883F,$886B,$8880,$8853,$88C6,$88CF ; 224
		dc.w $88D9,$88DC,$8856,$88B6,$88F9,$8902,$8904,$8915 ; 232
		dc.w $886A,$8913,$8872,$8835,$8938,$895D,$8943,$8023 ; 240
		dc.w $8076,$807B,$808A,$809D,$80A6,$80A8,$80AC,$80B2 ; 248
		dc.w $80B7,$80BB,$80BC,$80BD,$80C6,$80E5,$80E8,$80EE ; 256
		dc.w $80F4,$810A,$810D,$8111,$8115,$811A,$811F,$8122 ; 264
		dc.w $8123,$8139,$813A,$813C,$8142,$8144,$8147,$8148 ; 272
		dc.w $815E,$815F,$8163,$8168,$816A,$816C,$8170,$88E5 ; 280
		dc.w $88CE,$88EE,$88F1,$8884,$88FD,$8900,$88B9,$8917 ; 288
		dc.w $8871,$8909,$890D,$8865,$8925,$8922,$8831,$883C ; 296
		dc.w $890F,$88C5,$8933,$8937,$891F,$802E,$806B,$8082 ; 304
		dc.w $8083,$808C,$8099,$809B,$80A2,$80A5,$80A7,$80A9 ; 312
		dc.w $80AB,$80AD,$80B9,$80BA,$80BF,$80C4,$80C5,$80C7 ; 320
		dc.w $80C8,$80C9,$80CA,$80D0,$80D9,$80DB,$80EB,$80EC ; 328
		dc.w $80ED,$80EF,$80F2,$80F3,$80F6,$80FA,$80FC,$80FD ; 336
		dc.w $80FE,$8103,$8106,$8107,$810B,$810E,$810F,$8110 ; 344
		dc.w $8112,$8117,$811C,$811D,$8121,$8129,$812C,$812D ; 352
		dc.w $8131,$8134,$8135,$813B,$813D,$813E,$813F,$8140 ; 360
		dc.w $8141,$8145,$8146,$8149,$814A,$814C,$814D,$814E ; 368
		dc.w $814F,$8150,$8152,$8153,$8154,$8155,$8156,$8157 ; 376
		dc.w $8158,$815A,$815B,$815C,$8160,$8161,$8162,$8164 ; 384
		dc.w $8166,$8167,$8169,$816B,$816D,$816E,$816F,$8171 ; 392
		dc.w $8172,$8173,$886E,$887D,$88C3,$88DB,$88E7,$88E8 ; 400
		dc.w $88EB,$88ED,$88F2,$88F6,$88FA,$88FC,$88FE,$882D ; 408
		dc.w $8903,$8906,$8907,$890B,$8873,$889A,$8929,$892C ; 416
		dc.w $892D,$8911,$893C,$8920,$8946,$88A9,$889C,$8916 ; 424
		dc.w $894F,$894C,$886F,$8958,$8956,$8959,$895A,$8961 ; 432
		dc.w $887B,$8966,$891C,$8918,$88A0,$88A3,$8967,$88A1 ; 440
byte_69E6:	
		dc.b   0,  7,  0,  1,  0,  1,  0,  1,  0,$4A,  0,  1,  0,$39,  0,  3 ; 0				
		dc.b   0,  1,  0,  5,  0,$28,  0,  7,  0,$2C,  0,  1,  0,  1,  0,  2 ; 16
		dc.b   0,$28,  0,  5,  0,$39,  0,  1,  0,$28,  0,  9,  0,  1,  0,  4 ; 32
		dc.b   0,$28,  0,  6,  0,$28,  0,  3,  0,$4A,  0,  2,  0,  1,  0,  3 ; 48
		dc.b   0,$28,  0,  4,  0,$39,  0,  2,  0,$39,  0,  4,  0,  1,  0,  6 ; 64
		dc.b   0,  7,  0,  2,  0,$2C,  0,  2,  0,$28,  0,  1,  0,$1D,  0,  1 ; 80
		dc.b   0,$28,  0,  8,  0,$28,  0,  2,  0,  7,  0,  3,  0,  1,  0,  7 ; 96
		dc.b   0,$28,  0, $B,  0,$39,  0,  5,  0,$1D,  0,  3,  0,$1D,  0,  4 ; 112
		dc.b   0,$1D,  0,  2,  0,$1D,  0,  5,  0,$28,  0, $D,  0, $B,  0,  1 ; 128
		dc.b   0,$28,  0, $A,  0,$39,  0,  6,  0,$39,  0,  7,  0,$2C,  0,  3 ; 144
		dc.b   0,$1D,  0,  9,  0,$4A,  0,  3,  0,$1D,  0,  7,  0,$28,  0, $F ; 160
		dc.b   0,$1D,  0, $B,  0,$1D,  0,$11,  0,$1D,  0, $D,  0,$1D,  0,  8 ; 176
		dc.b   0,$28,  0,$11,  0,$1D,  0,  6,  0, $B,  0,  2,  0,$1D,  0,$15 ; 192
		dc.b   0,$28,  0, $C,  0,$1D,  0, $A,  0,$28,  0, $E,  0,  1,  0,  8 ; 208
		dc.b   0,$1D,  0, $F,  0,$28,  0,$10,  0,  7,  0,  6,  0,$1D,  0,$13 ; 224
		dc.b   0,$4A,  0,  4,  0,$1D,  0,$17,  0,  7,  0,  4,  0, $B,  0,  3 ; 240
		dc.b   0,$1D,  0,$1B,  0,$4A,  0,  6,  0,$1D,  0,$1D,  0,$4A,  0,  5 ; 256
		dc.b   0,  1,  0,  9,  0,  7,  0,  5,  0,$1D,  0,$1E,  0,$1D,  0,$19 ; 272
		dc.b   0,  1,  0,$11,  0,$1D,  0, $C,  0,$1D,  0,$7F,  0,$2C,  0,  4 ; 288
		dc.b   0,$1D,  0, $E,  0,$1D,  0,$1C,  0,$4A,  0, $A,  0,$1D,  0,$1A ; 304
		dc.b   0,$4A,  0,  7,  0,$1D,  0,$18,  0, $B,  0,  4,  0,$1D,  0,$12 ; 320
		dc.b   0,$1D,  0,$10,  0,  1,  0, $F,  0, $B,  0,  5,  0,  1,  0, $D ; 336
		dc.b   0,  1,  0,$13,  0,$4A,  0,  9,  0,$4A,  0, $B,  0,$4A,  0, $C ; 352
		dc.b   0,$2C,  0,  5,  0,$1D,  0,$14,  0, $B,  0,  7,  0,$1D,  0,$16 ; 368
		dc.b   0,  1,  0, $C,  0,  1,  0, $E,  0,$4A,  0,  8,  0,$1D,  0,$5F ; 384
		dc.b   0,  1,  0, $A,  0, $B,  0,  6,  0, $B,  0,  8,  0, $B,  0, $A ; 400
		dc.b   0,$39,  0,  8,  0, $B,  0,  9,  0,$2C,  0,  6,  0,  1,  0,$10 ; 416
		dc.b   0, $B,  0, $C,  0,  1,  0, $B,  0,  1,  0,$12,  0,  7,  0,  7 ; 432
		dc.b   0,$1D,  0,$1F,  0,$28,  0,$12,  0, $B,  0, $B,  0,$2C,  0,  7 ; 448
		dc.b   0,$2C,  0, $B,  0,$1D,  0,$23,  0,  1,  0,$15,  0,$2C,  0,  8 ; 464
		dc.b   0,$1D,  0,$2E,  0,$1D,  0,$3F,  0,  1,  0,$14,  0, $B,  0, $D ; 480
		dc.b   0,$2C,  0,  9,  0,$2C,  0, $A,  0,$1D,  0,$25,  0,$1D,  0,$55 ; 496
		dc.b   0,$1D,  0,$71,  0,$1D,  0,$7C,  0,$4A,  0, $D,  0,$2C,  0, $C ; 512
		dc.b   0,$2C,  0, $F,  0,$2C,  0,$10,$FF,$FB,$FF,$FB,$FF,$FA,$FF,$FA ; 528
		dc.b $FF,$FA,$FF,$FA				; 544
		even
		
loc_6C0A:				
		move.b	(v_ss_alt_hscroll_buffer).w,(v_ss_last_alt_hscroll_buffer).w
		moveq	#0,d1
		movea.l	(v_ss_track_mappings_bitflags).w,a0
		cmpa.l	#MapSpec_Straight2,a0
		blt.s	loc_6C4A
		cmpa.l	#MapSpec_Straight3,a0
		bge.s	loc_6C4A
		movea.l	(v_ss_current_layout).w,a5
		move.b	(v_ss_current_segment).w,d1
		move.b	(a5,d1.w),d1
		bpl.s	loc_6C88

loc_6C34:				
					
		st.b	(v_ss_track_orientation).w
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	(v_ss_player_anim_frame_timer).w,d0
		blt.w	locret_6C9A
		st.b	(v_ss_alt_hscroll_buffer).w
		rts	
; ===========================================================================

loc_6C4A:				
					
		cmpa.l	#MapSpec_Rise14,a0
		blt.s	loc_6C6A
		cmpa.l	#MapSpec_Rise15,a0
		bge.s	loc_6C6A
		movea.l	(v_ss_current_layout).w,a5
		move.b	(v_ss_current_segment).w,d1
		move.b	(a5,d1.w),d1
		bpl.s	loc_6C88
		bra.s	loc_6C34
; ===========================================================================

loc_6C6A:				
					
		cmpa.l	#MapSpec_Drop6,a0
		blt.s	locret_6C9A
		cmpa.l	#MapSpec_Drop7,a0
		bge.s	locret_6C9A
		movea.l	(v_ss_current_layout).w,a5
		move.b	(v_ss_current_segment).w,d1
		move.b	(a5,d1.w),d1
		bmi.s	loc_6C34

loc_6C88:				
					
		sf.b	(v_ss_track_orientation).w
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	(v_ss_player_anim_frame_timer).w,d0
		blt.s	locret_6C9A
		sf.b	(v_ss_alt_hscroll_buffer).w

locret_6C9A:								
		rts	


; ===========================================================================


SS_InitHScroll:				
		lea	(v_hscroll_buffer).w,a1
		lea	(v_ss_hscroll_buffer_2).w,a2
		moveq	#0,d0					; scroll of 0 for fg & bg on lines 0 & 1 (normal) or lines 6 & 7 (flipped)
		moveq	#0,d1					; scroll of 0 for bg on lines 2 & 3 (normal) or lines 4 & 5 (flipped)
		moveq	#0,d2					; scroll of 0 for bg on lines 4 & 5 (normal) or lines 2 & 3 (flipped)
		moveq	#0,d3					; scroll of 0 for bg on lines 6 & 7 (normal) or lines 0 & 1 (flipped)
		move.w	#-$100,d1				; scroll of 3 screens for fg on lines 2 & 3 (normal) or lines 4 & 5 (flipped)
		move.w	#-$200,d2				; scroll of 2 screens for fg on lines 4 & 5 (normal) or lines 2 & 3 (flipped)
		move.w	#-$300,d3				; scroll of 1 screen for fg on lines 6 & 7 (normal) or lines 0 & 1 (flipped)
		swap	d1
		swap	d2
		swap	d3
		moveq	#(((v_ss_hscroll_buffer_1_end-v_ss_hscroll_buffer_1)/4)/8)-1,d4 ; 8 longwords per table per loop, $100 longwords total per table, $1F loops

	.loop:				
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		move.l	d2,(a1)+
		move.l	d2,(a1)+
		move.l	d3,(a1)+
		move.l	d3,(a1)+
		
		move.l	d3,(a2)+
		move.l	d3,(a2)+
		move.l	d2,(a2)+
		move.l	d2,(a2)+
		move.l	d1,(a2)+
		move.l	d1,(a2)+
		move.l	d0,(a2)+
		move.l	d0,(a2)+
		dbf	d4,.loop
		rts	


; ===========================================================================

SS_LoadCompressedData:				
		lea	(Kos_Special).l,a0
		lea	(v_128x128_tiles).l,a1
		bsr.w	KosDec
		
		vdp_comm.l	move,vram_start,vram,write,(VDP_control_port).l
		lea	(vdp_data_port).l,a1
		movea.l	#v_128x128_tiles,a0
		move.w	(a0)+,d0
		subq.w	#1,d0

	.loop:	
		rept 7			
		move.l	(a0),(a1)
		endr
		move.l	(a0)+,(a1)
		dbf	d0,.loop
		
		lea	(Kos_SpecialPerspective).l,a0
		lea	(v_ss_perspective_data).l,a1
		bsr.w	KosDec
		
		lea	(Nem_SpecialLevelLayouts).l,a0
		lea	(v_ss_level_layout).w,a4
		bsr.w	NemDecToRAM
		
		lea	(Koz_SpecialObjectLocations).l,a0
		lea	(v_ss_object_locations).w,a1
		bsr.w	KosDec
		rts	


; ===========================================================================


SS_LoadBackground:				
		disable_ints
		movea.l	#v_128x128_tiles,a1
		lea	(Eni_SpecialBackBottom).l,a0
		move.w	#$700,d0
		bsr.w	EniDec
		movea.l	#v_128x128_tiles+$400,a1
		lea	(Eni_SpecialBack).l,a0
		move.w	#$700,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_128_SS
		lea	(v_128x128_tiles).l,a1
		move.l	#$60400002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_128_SS
		lea	(v_128x128_tiles).l,a1
		move.l	#$60800002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_128_SS
		lea	(v_128x128_tiles).l,a1
		move.l	#$60C00002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_128_SS
		enable_ints
		rts	



; ===========================================================================


SS_LoadPlayerArt:				
		lea	(Nem_SpecialSonicAndTails).l,a0
		lea	(v_ss_character_art&$FFFFFF).l,a4
		bra.w	NemDecToRAM

; ===========================================================================


SS_ScrollBG:							
		bsr.w	sub_6E3C
		bsr.w	sub_6EE0
		rts	

; ===========================================================================
; special stage background vertical and horizontal scroll offsets
off_6DEE:	index offset(*)

		ptr byte_6E04					; 0 		
		ptr byte_6E09					; 2
		ptr byte_6E0E					; 4
		ptr byte_6E13					; 6
		ptr byte_6E18					; 8
		ptr byte_6E1D					; $A
		ptr byte_6E22					; $C
		ptr byte_6E27					; $E
		ptr byte_6E2C					; $10
		ptr byte_6E31					; $12
		ptr byte_6E36					; $14
		
byte_6E04:	dc.b   2,  2,  2,  2,  2
byte_6E09:	dc.b   4,  4,  5,  4,  5
byte_6E0E:	dc.b  $B, $B, $B, $B, $C
byte_6E13:	dc.b   0,  0,  1,  0,  0
byte_6E18:	dc.b   1,  1,  1,  1,  1
byte_6E1D:	dc.b   9,  9,  8,  9,  9
byte_6E22:	dc.b   9,  9,  9,  9, $A
byte_6E27:	dc.b   7,  7,  6,  7,  7 
byte_6E2C:	dc.b   0,  1,  1,  1,  0
byte_6E31:	dc.b   4,  3,  3,  3,  4
byte_6E36:	dc.b   0,  0,$FF,  0,  0
		even

; ===========================================================================

sub_6E3C:				
		moveq	#0,d7
		moveq	#0,d6
		moveq	#0,d0
		move.b	(v_ss_track_last_anim_frame).w,d2
		move.b	(v_ss_track_anim).w,d0
		add.w	d0,d0
		move.w	off_6E54(pc,d0.w),d0
		jmp	off_6E54(pc,d0.w)

; ===========================================================================
off_6E54:	index offset(*)	
		ptr loc_6E5E					; 0 		
		ptr loc_6E5E					; 2
		ptr loc_6E5E					; 4
		ptr locret_6E86					; 6
		ptr locret_6E86					; 8
; ===========================================================================

loc_6E5E:				
		moveq	#0,d1
		cmpi.b	#1,d2
		blt.s	loc_6E88
		moveq	#2,d1
		cmpi.b	#2,d2
		blt.s	loc_6E88
		moveq	#4,d1
		cmpi.b	#$A,d2
		blt.s	loc_6E88
		moveq	#2,d1
		cmpi.b	#$B,d2
		blt.s	loc_6E88
		moveq	#0,d1
		cmpi.b	#$C,d2
		blt.s	loc_6E88

locret_6E86:				
		rts	
; ===========================================================================

loc_6E88:				
					
		moveq	#0,d0
		moveq	#0,d2
		move.b	(v_ss_track_drawing_index).w,d0
		lea_	off_6DEE,a0
		adda.w	(a0,d1.w),a0
		move.b	(a0,d0.w),d2
		tst.b	(v_ss_last_alt_hscroll_buffer).w
		bne.s	loc_6EAA
		tst.b	(v_ss_alt_hscroll_buffer).w
		beq.s	loc_6EBE
		bra.s	loc_6EB6
; ===========================================================================

loc_6EAA:				
		tst.b	(v_ss_alt_hscroll_buffer).w
		bne.s	loc_6EBE
		lea	($FFFFE002).w,a1
		bra.s	loc_6ECE
; ===========================================================================

loc_6EB6:				
		lea	($FFFFD702).w,a1
		neg.w	d2
		bra.s	loc_6ECE
; ===========================================================================

loc_6EBE:				
					
		lea	($FFFFE002).w,a1
		tst.b	(v_ss_alt_hscroll_buffer).w
		beq.s	loc_6ECE
		lea	($FFFFD702).w,a1
		neg.w	d2

loc_6ECE:				
					
		move.w	#$FF,d0

loc_6ED2:				
		sub.w	d2,(a1)+
		adda_.l	#2,a1
		dbf	d0,loc_6ED2
		rts	

; ===========================================================================


sub_6EE0:				
		move.w	(v_bg_y_pos_vsram).w,(v_ss_track_last_vscroll).w
		moveq	#0,d7
		moveq	#0,d0
		moveq	#0,d2
		move.b	(v_ss_track_last_anim_frame).w,d2
		move.b	(v_ss_track_anim).w,d0
		add.w	d0,d0
		move.w	off_6EFE(pc,d0.w),d0
		jmp	off_6EFE(pc,d0.w)

; ===========================================================================
off_6EFE:	index offset(*)
		ptr loc_6F0A					; 0 					
		ptr loc_6F2A					; 1
		ptr locret_6F08					; 2
		ptr loc_6F4C					; 3
		ptr locret_6F08					; 4
; ===========================================================================

locret_6F08:				
		rts	
; ===========================================================================

loc_6F0A:				
		move.b	byte_6F12(pc,d2.w),d1
		bpl.s	loc_6F6A
		rts	
; ===========================================================================
byte_6F12:	
		dc.b $FF					; 0
		dc.b $FF					; 1
		dc.b $FF					; 2
		dc.b $FF					; 3
		dc.b $FF					; 4
		dc.b $FF					; 5
		dc.b $FF					; 6
		dc.b $FF					; 7
		dc.b $FF					; 8
		dc.b $FF					; 9
		dc.b   8					; 10
		dc.b   8					; 11
		dc.b   2					; 12
		dc.b   4					; 13
		dc.b   4					; 14
		dc.b   4					; 15
		dc.b   4					; 16
		dc.b   4					; 17
		dc.b   4					; 18
		dc.b  $A					; 19
		dc.b  $C					; 20
		dc.b  $E					; 21
		dc.b $12					; 22
		dc.b $10					; 23
; ===========================================================================

loc_6F2A:				
		st.b	d7
		move.b	byte_6F34(pc,d2.w),d1
		bpl.s	loc_6F6A
		rts	
; ===========================================================================
byte_6F34:	
		dc.b $FF					; 0
		dc.b $FF					; 1
		dc.b $FF					; 2
		dc.b $FF					; 3
		dc.b $FF					; 4
		dc.b $FF					; 5
		dc.b $FF					; 6
		dc.b $FF					; 7
		dc.b $FF					; 8
		dc.b $FF					; 9
		dc.b $FF					; 10
		dc.b $10					; 11
		dc.b $12					; 12
		dc.b  $E					; 13
		dc.b  $C					; 14
		dc.b  $A					; 15
		dc.b   4					; 16
		dc.b   4					; 17
		dc.b   4					; 18
		dc.b   4					; 19
		dc.b   4					; 20
		dc.b   4					; 21
		dc.b   2					; 22
		dc.b   0					; 23
; ===========================================================================

loc_6F4C:				
		tst.b	(f_ss_pause_only).w
		bne.s	locret_6F58
		move.b	byte_6F5A(pc,d2.w),d1
		bpl.s	loc_6F6A

locret_6F58:				
		rts	
; ===========================================================================
byte_6F5A:	
		dc.b   6					; 0
		dc.b   6					; 1
		dc.b $14					; 2
		dc.b $14					; 3
		dc.b   6					; 4
		dc.b   6					; 5
		dc.b $14					; 6
		dc.b $14					; 7
		dc.b   6					; 8
		dc.b   6					; 9
		dc.b $14					; 10
		dc.b $14					; 11
		dc.b   6					; 12
		dc.b   6					; 13
		dc.b $14					; 14
		dc.b $14					; 15
; ===========================================================================

loc_6F6A:				
					
		moveq	#0,d0
		moveq	#0,d2
		move.b	(v_ss_track_drawing_index).w,d0
		lea_	off_6DEE,a0
		adda.w	(a0,d1.w),a0
		move.b	(a0,d0.w),d2
		tst.b	d7
		bpl.s	loc_6F88
		add.w	d2,(v_bg_y_pos_vsram).w
		rts	
; ===========================================================================

loc_6F88:				
		sub.w	d2,(v_bg_y_pos_vsram).w
		rts	

; ===========================================================================


FindFreeObjSpecial:								
		lea	(v_ss_dynamic_object_ram).w,a1
		move.w	#(sizeof_v_ss_dynamic_object_ram/sizeof_ost)-1,d5

	.loop:				
		tst.b	ost_id(a1)				; is this slot empty?
		beq.s	.return					; if so, exit
		lea	sizeof_ost(a1),a1			; check the next slot
		dbf	d5,.loop

	.return:				
		rts	

; ===========================================================================

FindNextFreeObjSpecial:				
		movea.l	a0,a1
		move.w	#v_ss_dynamic_object_ram_end,d5
		sub.w	a0,d5
		lsr.w	#6,d5
		subq.w	#1,d5
		bcs.s	.return

	.loop:				
		tst.b	ost_id(a1)
		beq.s	.return
		lea	$40(a1),a1
		dbf	d5,.loop

	.return:									
		rts	
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5E - HUD from Special Stage
; ----------------------------------------------------------------------------

HUDSpecial:				
		move.b	ost_primary_routine(a0),d0
		bne.w	JmpTo_DisplaySprite
		move.l	#Map_SpecialHUD,ost_mappings(a0)
		move.w	#tile_Nem_SpecialHUD,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#0,ost_priority(a0)
		move.b	#1,ost_primary_routine(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		moveq	#0,d1
		tst.b	(f_ss_2p).w
		beq.s	loc_7002
		addq.w	#6,d1
		tst.b	(v_console_region).w
		bpl.s	loc_7012
		addq.w	#1,d1
		bra.s	loc_7012
; ===========================================================================

loc_7002:				
		move.w	(v_player_mode).w,d1
		andi.w	#3,d1
		tst.b	(v_console_region).w
		bpl.s	loc_7012
		addq.w	#3,d1

loc_7012:				
					
		add.w	d1,d1
		moveq	#0,d2
		moveq	#0,d3
		lea	(off_7042).l,a1
		lea	ost_subspr2_x_pos(a0),a2
		adda.w	(a1,d1.w),a1
		move.b	(a1)+,d3
		move.b	d3,ost_mainspr_childsprites(a0)
		subq.w	#1,d3
		moveq	#0,d0
		move.b	(a1)+,d0

loc_7032:				
		move.w	d0,(a2,d2.w)
		move.b	(a1)+,ost_subspr2_frame-ost_subspr2_x_pos(a2,d2.w)
		addq.w	#6,d2
		dbf	d3,loc_7032
		rts	
; ===========================================================================
off_7042:	index offset(*)
		ptr byte_7052					; 0 			
		ptr byte_7057					; 1
		ptr byte_705A					; 2
		ptr byte_705D					; 3
		ptr byte_7062					; 4
		ptr byte_7065					; 5
		ptr byte_7068					; 6
		ptr byte_706C					; 7
		
byte_7052:	dc.b   3,$80,  0,  1,  3			; 0 
byte_7057:	dc.b   1,$D4,  0				; 0 
byte_705A:	dc.b   1,$38,  1				; 0 
byte_705D:	dc.b   3,$80,  0,  2,  3			; 0 
byte_7062:	dc.b   1,$D4,  0				; 0 
byte_7065:	dc.b   1,$38,  2				; 0 
byte_7068:	dc.b   2,$80,  0,  1				; 0 
byte_706C:	dc.b   2,$80,  0,  2				; 0 

		include "mappings/sprite/Special HUD.asm"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5F - Start banner/"Ending controller" from Special Stage
; ----------------------------------------------------------------------------
; Sprite_70F0:
StartBannerSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	SS_StartBanner_Index(pc,d0.w),d1
		jmp	SS_StartBanner_Index(pc,d1.w)
; ===========================================================================
SS_StartBanner_Index:	index offset(*)
		ptr loc_714A					; 0 				
		ptr loc_718A					; 1
		ptr loc_71B4					; 2
		ptr loc_710A					; 3
		ptr locret_723E					; 4
		ptr loc_7218					; 5
; ===========================================================================

loc_710A:				
		moveq	#0,d0
		move.b	$26(a0),d0
		bsr.w	CalcSine
		muls.w	$14(a0),d0
		muls.w	$14(a0),d1
		asr.w	#8,d0
		asr.w	#8,d1
		add.w	d1,ost_x_pos(a0)
		add.w	d0,ost_y_pos(a0)
		cmpi.w	#0,ost_x_pos(a0)			; could be tst.w
		blt.w	JmpTo_DeleteObject
		cmpi.w	#$100,ost_x_pos(a0)
		bgt.w	JmpTo_DeleteObject
		cmpi.w	#0,ost_y_pos(a0)
		blt.w	JmpTo_DeleteObject
		
    if RemoveJmpTos
JmpTo_DisplaySprite:
    endc
    		
		jmpto	DisplaySprite,JmpTo_DisplaySprite
; ===========================================================================

loc_714A:				
		tst.b	(f_ss_2p).w
		beq.s	loc_7158
		move.w	#8,d0
		jsrto	loc_35DAA,JmpTo_loc_35DAA

loc_7158:				
		move.w	#$80,ost_x_pos(a0)
		move.w	#-$40,ost_y_pos(a0)
		move.w	#$100,ost_y_vel(a0)
		move.l	#Map_obj5F_a,ost_mappings(a0)
		move.w	#tile_Nem_SpecialStart,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#1,ost_priority(a0)
		move.b	#2,ost_primary_routine(a0)

loc_718A:				
		jsrto	SpeedToPos,JmpTo_SpeedToPos
		cmpi.w	#$48,ost_y_pos(a0)
		blt.w	JmpTo_DisplaySprite
		move.w	#0,ost_y_vel(a0)
		move.w	#$48,ost_y_pos(a0)
		move.b	#4,ost_primary_routine(a0)
		move.b	#$F,$2A(a0)
		jmpto	DisplaySprite,JmpTo_DisplaySprite
; ===========================================================================

loc_71B4:				
		subi_.b	#1,$2A(a0)
	if RemoveJmpTos
		bne.s	JmpTo_DisplaySprite
	else	
		bne.w	JmpTo_DisplaySprite
	endc
		moveq	#6,d6
		lea	(Map_obj5F_a_004C).l,a2			; could be PC-relative
		moveq	#2,d3
		move.w	#8,$14(a0)
		move.b	#6,ost_primary_routine(a0)

loc_71D4:				
		bsr.w	FindFreeObjSpecial
		bne.s	loc_7206
		moveq	#0,d0

		move.w	#(sizeof_ost/4)-1,d1

loc_71E0:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_71E0
		move.b	d3,ost_frame(a1)
		addq.w	#1,d3
		move.w	#$FFD8,d2
		move.w	8(a2),d1
		bsr.w	CalcAngle
		move.b	d0,ost_angle(a1)
		lea	$A(a2),a2

loc_7206:				
		dbf	d6,loc_71D4
		move.b	#$A,ost_primary_routine(a0)
		move.w	#$1E,$2A(a0)
		rts	
; ===========================================================================

loc_7218:				
		subi_.w	#1,$2A(a0)
		bpl.s	locret_723C
		tst.b	(f_ss_2p).w
		beq.s	loc_7230
		move.w	#$A,d0
		jsrto	loc_35DAA,JmpTo_loc_35DAA
		bra.s	loc_7234
; ===========================================================================

loc_7230:				
		jsrto	loc_35CE2,JmpTo_loc_35CE2

loc_7234:				
		st.b	(f_ss_started).w
		jmpto	DeleteObject,JmpTo_DeleteObject
; ===========================================================================

locret_723C:				
		rts	
; ===========================================================================		
		
   	if RemoveJmpTos
JmpTo_DeleteObject
		jmp	DeleteObject
    endc
    
; ===========================================================================

locret_723E:				
		rts	
; ===========================================================================

		include "mappings/sprite/obj5F_a.asm"
		include "mappings/sprite/obj5F_b.asm"
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 87 - Number of rings in Special Stage
; ----------------------------------------------------------------------------

RingCountSpecial:				
		moveq	#0,d0
		move.b	ost_rcs_routine(a0),d0
		move.w	off_7364(pc,d0.w),d1
		jmp	off_7364(pc,d1.w)
; ===========================================================================
off_7364:	index offset(*)	
		ptr loc_736C					; 0 					
		ptr loc_7480					; 2
		ptr loc_753E					; 4
		ptr loc_75DE					; 6
		
		;rsobj	RingCountSpecial,$A
		ost_rcs_routine: equ $A
; ===========================================================================

loc_736C:				
		move.b	#2,ost_rcs_routine(a0)
		move.l	#Map_obj5F_b,ost_mappings(a0)
		move.w	#tile_Nem_SpecialHUD+tile_pal3,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		bset	#render_subobjects_bit,ost_render(a0)	; these two instructions could instead be "move.b render_rel|render_subobjects,ost_render(a0)
		move.b	#2,ost_mainspr_childsprites(a0)
		move.w	#$20,d0
		moveq	#0,d1
		lea	ost_subspr2_x_pos(a0),a1
		move.w	#$48,(a1)
		move.w	d0,ost_subspr2_y_pos-ost_subspr2_x_pos(a1) 
		move.w	d1,ost_mainspr_height-ost_subspr2_x_pos(a1)
		move.w	#$E0,ost_subspr3_x_pos-ost_subspr2_x_pos(a1)
		move.w	d0,ost_subspr3_y_pos-ost_subspr2_x_pos(a1)
		move.w	d1,ost_frame-ost_subspr2_x_pos(a1)
		move.w	d0,ost_subspr4_y_pos-ost_subspr2_x_pos(a1)
		move.w	d0,ost_subspr5_y_pos-ost_subspr2_x_pos(a1)
		move.w	d0,ost_subspr6_y_pos-ost_subspr2_x_pos(a1)
		move.w	d0,ost_subspr7_y_pos-ost_subspr2_x_pos(a1)
		tst.b	(f_ss_2p).w
		bne.s	loc_742A
		cmpi.w	#sonic_tails,(v_player_mode).w		; could be optimized to tst.w
		beq.s	loc_73E0
		subi_.b	#1,ost_mainspr_childsprites(a0)
		move.w	#$94,(a1)
		rts	
; ===========================================================================

loc_73E0:				
		bsr.w	FindFreeObjSpecial
		bne.s	locret_7428
		move.b	#id_RingCountSpecial,ost_id(a1)
		move.b	#4,ost_rcs_routine(a1)
		move.l	#Map_obj5F_b,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHUD+tile_pal3,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)	; these two instructions could instead be "move.b render_rel|render_subobjects,ost_render(a0)
		move.b	#1,ost_mainspr_childsprites(a1)
		lea	ost_subspr2_x_pos(a1),a2
		move.w	#$80,(a2)		
		move.w	d0,ost_subspr2_y_pos-ost_subspr2_x_pos(a2)
		move.w	d1,ost_mainspr_height-ost_subspr2_x_pos(a2)
		move.w	d0,ost_subspr3_y_pos-ost_subspr2_x_pos(a2)
		move.w	d0,ost_subspr4_y_pos-ost_subspr2_x_pos(a2)

locret_7428:								
		rts	
; ===========================================================================

loc_742A:				
		bsr.w	FindFreeObjSpecial
		bne.s	locret_7428
		move.b	#id_RingCountSpecial,ost_id(a1)
		move.b	#6,ost_rcs_routine(a1)
		move.l	#Map_obj5F_b,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHUD+tile_pal3,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)	; these two instructions could instead be "move.b render_rel|render_subobjects,ost_render(a0)
		move.b	#0,ost_mainspr_childsprites(a1)
		lea	ost_subspr2_x_pos(a1),a2
		move.w	#$2C,d0
		move.w	#$A,d1
		move.w	d0,ost_subspr2_y_pos-ost_subspr2_x_pos(a2) 
		move.w	d1,ost_mainspr_height-ost_subspr2_x_pos(a2)
		move.w	d0,ost_subspr3_y_pos-ost_subspr2_x_pos(a2)
		move.w	d1,ost_frame-ost_subspr2_x_pos(a2)
		move.w	d0,ost_subspr4_y_pos-ost_subspr2_x_pos(a2)
		move.w	d1,ost_subspr4_frame-1-ost_subspr2_x_pos(a2)
		rts	
; ===========================================================================

loc_7480:				
		moveq	#0,d0
		moveq	#0,d3
		moveq	#0,d5
		lea	ost_subspr2_x_pos(a0),a1
		movea.l	a1,a2
		addq.w	#5,a2
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_74EA
		move.b	(v_ost_player1+ost_ss_rings_hundreds).w,d0
		beq.s	loc_74A4
		addq.w	#1,d3
		move.b	d0,(a2)
		lea	next_subspr(a2),a2

loc_74A4:				
		move.b	(v_ost_player1+ost_ss_rings_tens).w,d0
		tst.b	d3
		bne.s	loc_74B0
		tst.b	d0
		beq.s	loc_74B8

loc_74B0:				
		addq.w	#1,d3
		move.b	d0,(a2)
		lea	next_subspr(a2),a2

loc_74B8:				
		addq.w	#1,d3
		move.b	(v_ost_player1+ost_ss_rings_units).w,(a2)
		lea	next_subspr(a2),a2
		move.w	d3,d4
		subq.w	#1,d4
		move.w	#$48,d1
		tst.w	(v_player_mode).w
		beq.s	loc_74D4
		addi.w	#$54,d1

loc_74D4:				
					
		move.w	d1,(a1,d5.w)
		addi_.w	#8,d1
		addq.w	#6,d5
		dbf	d4,loc_74D4
		cmpi.w	#sonic_alone,(v_player_mode).w
		beq.s	loc_7536

loc_74EA:				
		moveq	#0,d0
		moveq	#0,d4
		move.b	(v_ost_player2+ost_ss_rings_hundreds).w,d0
		beq.s	loc_74FC
		addq.w	#1,d4
		move.b	d0,(a2)
		lea	next_subspr(a2),a2

loc_74FC:				
		move.b	(v_ost_player2+ost_ss_rings_tens).w,d0
		tst.b	d4
		bne.s	loc_7508
		tst.b	d0
		beq.s	loc_7510

loc_7508:				
		addq.w	#1,d4
		move.b	d0,(a2)
		lea	next_subspr(a2),a2

loc_7510:				
		move.b	(v_ost_player2+ost_ss_rings_units).w,(a2)
		addq.w	#1,d4
		add.w	d4,d3
		subq.w	#1,d4
		move.w	#$E0,d1	
		tst.w	(v_player_mode).w
		beq.s	loc_7528
		subi.w	#$44,d1

loc_7528:				
					
		move.w	d1,(a1,d5.w)
		addi_.w	#8,d1
		addq.w	#6,d5
		dbf	d4,loc_7528

loc_7536:				
		move.b	d3,ost_mainspr_childsprites(a0)
		jmpto	DisplaySprite,JmpTo_DisplaySprite
; ===========================================================================

loc_753E:				
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#1,d3
		move.b	(v_ost_player1+ost_ss_rings_units).w,d0
		add.b	(v_ost_player2+ost_ss_rings_units).w,d0
		move.b	(v_ost_player1+ost_ss_rings_tens).w,d1
		add.b	(v_ost_player2+ost_ss_rings_tens).w,d1
		move.b	(v_ost_player1+ost_ss_rings_hundreds).w,d2
		add.b	(v_ost_player2+ost_ss_rings_hundreds).w,d2
		cmpi.b	#$A,d0
		bcs.s	loc_756A
		addq.w	#1,d1
		subi.b	#$A,d0

loc_756A:				
		tst.b	d1
		beq.s	loc_7586
		cmpi.b	#$A,d1
		bcs.s	loc_757C
		addi_.b	#1,d2
		subi.b	#$A,d1

loc_757C:				
		addq.w	#1,d3
		tst.b	d2
		beq.s	loc_758C
		addq.w	#1,d3
		bra.s	loc_758C
; ===========================================================================

loc_7586:				
		tst.b	d2
		beq.s	loc_758C
		addq.w	#2,d3

loc_758C:				
					
		lea	ost_subspr2_x_pos(a0),a1
		move.b	d3,ost_mainspr_childsprites(a0)
		cmpi.b	#2,d3
		blt.s	loc_75BC
		beq.s	loc_75C8
		move.w	#$78,(a1)				; sub2_x_pos
		move.b	d2,ost_subspr2_frame-ost_subspr2_x_pos(a1) ; sub2_mapframe
		move.w	#$80,ost_subspr3_x_pos-ost_subspr2_x_pos(a1) ; sub3_x_pos
		move.b	d1,ost_subspr3_frame-ost_subspr2_x_pos(a1) ; sub3_mapframe
		move.w	#$88,ost_subspr4_x_pos-ost_subspr2_x_pos(a1) ; sub4_x_pos
		move.b	d0,ost_subspr4_frame-ost_subspr2_x_pos(a1) ; sub4_mapframe
    if FixBugs
		; Multi-sprite objects cannot use 'ost_priority', so they
		; must use 'DisplaySprite3' instead of 'DisplaySprite'.
		; This object's 'priority' is overwritten by 'ost_subspr3_y_pos', 
		; causing it to display on the wrong layer.
		move.w	#$80,d0
		jmp	DisplaySprite3
	else			
		jmpto	DisplaySprite,JmpTo_DisplaySprite
	endc	
; ===========================================================================

loc_75BC:				
		move.w	#$80,(a1)
		move.b	d0,ost_subspr2_frame-ost_subspr2_x_pos(a1)
    if FixBugs
		; Multi-sprite objects cannot use 'ost_priority', so they
		; must use 'DisplaySprite3' instead of 'DisplaySprite'.
		; This object's 'priority' is overwritten by 'ost_subspr3_y_pos', 
		; causing it to display on the wrong layer..
		move.w	#$80,d0
		jmp	DisplaySprite3
	else			
		jmpto	DisplaySprite,JmpTo_DisplaySprite
	endc
; ===========================================================================

loc_75C8:				
		move.w	#$7C,(a1)
		move.b	d1,ost_subspr2_frame-ost_subspr2_x_pos(a1)
		move.w	#$84,ost_subspr3_x_pos-ost_subspr2_x_pos(a1)
		move.b	d0,ost_subspr3_frame-ost_subspr2_x_pos(a1)
    if FixBugs
		; Multi-sprite objects cannot use 'ost_priority', so they
		; must use 'DisplaySprite3' instead of 'DisplaySprite'.
		; This object's 'priority' is overwritten by 'ost_subspr3_y_pos', 
		; causing it to display on the wrong layer.
		move.w	#$80,d0
		jmp	DisplaySprite3
	else			
		jmpto	DisplaySprite,JmpTo_DisplaySprite
	endc
; ===========================================================================

loc_75DE:				
		move.b	(v_ss_2p_bcd_score).w,d0
		bne.s	loc_75E6
		rts	
; ===========================================================================

loc_75E6:				
		lea	ost_subspr2_x_pos(a0),a1
		moveq	#0,d2
		move.b	d0,d1
		andi.b	#-$10,d0
		beq.s	loc_761C
		addq.w	#1,d2
		move.w	#$20,(a1)
		lea	next_subspr(a1),a1
		subi.b	#$10,d0
		beq.s	loc_761C
		addq.w	#1,d2
		move.w	#$30,(a1)
		lea	next_subspr(a1),a1
		subi.b	#$10,d0
		beq.s	loc_761C
		addq.w	#1,d2
		move.w	#$40,(a1)
		bra.s	loc_7648
; ===========================================================================

loc_761C:				
					
		andi.b	#$F,d1
		beq.s	loc_7648
		addq.w	#1,d2
		move.w	#$B8,(a1)
		lea	next_subspr(a1),a1
		subi_.b	#1,d1
		beq.s	loc_7648
		addq.w	#1,d2
		move.w	#$C8,(a1)
		lea	next_subspr(a1),a1
		subi_.b	#1,d1
		beq.s	loc_7648
		addq.w	#1,d2
		move.w	#$D8,(a1)

loc_7648:				
					
		move.b	d2,ost_mainspr_childsprites(a0)
    if FixBugs
		; Multi-sprite objects cannot use 'ost_priority', so they
		; must use 'DisplaySprite3' instead of 'DisplaySprite'.
		; This object's 'priority' is overwritten by 'ost_subspr3_y_pos', 
		; causing it to display on the wrong layer.
		move.w	#$80,d0
		jmp	DisplaySprite3
	else			
		jmpto	DisplaySprite,JmpTo_DisplaySprite
	endc
; ===========================================================================


SS_SetGeoOffsets:								
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	(v_ss_player_anim_frame_timer).w,d0
		beq.s	loc_765C
		rts	
; ===========================================================================

loc_765C:				
		moveq	#0,d0
		move.b	(v_ss_track_mapping_frame).w,d0
		add.w	d0,d0
		lea	SS_CurveOffsets(pc,d0.w),a2
		move.b	(a2)+,d0
		tst.b	(v_ss_track_orientation).w
		beq.s	loc_7672
		neg.b	d0

loc_7672:				
		ext.w	d0
		addi.w	#$80,d0	
		move.w	d0,(v_ss_x_offset).w
		move.b	(a2),d0
		ext.w	d0
		addi.w	#$36,d0
		move.w	d0,(v_ss_y_offset).w
		rts	

; ===========================================================================
SS_CurveOffsets:	
		dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0 	; $00
		dc.b   9, -$A,     0,-$1C,     0,-$1C,     0,-$20 	; $04
		dc.b   0,-$24,     0,-$2A,     0,-$10,     0,   6	; $08
		dc.b   0,  $E,     0, $10,     0, $12,     0, $12 	; $0C
		dc.b   9, $12										; $10; upward curve
		dc.b   0,   0,     0,   0,     0,   0,     0,   0 	; $11; straight
		dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0 	; $15
		dc.b  $B,  $C,     0,  $C,     0, $12,     0,  $A 	; $19
		dc.b   0,   8,     0,   2,     0, $10,     0,-$20	; $1D
		dc.b   0,-$1F,     0,-$1E,     0,-$1B,     0,-$18 	; $21
		dc.b   0, -$E										; $25; downward curve
		dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0	; $26
		dc.b $13,   0,   $13,   0							; $2B; turning
		dc.b $13,   0,   $13,   0,   $13,   0,   $13,   0 	; $2C
		dc.b  $B,   0										; $30; exit turn
		dc.b   0,   0,     0,   0,     0,   0,     0,   0 	; $31
		dc.b   0,   0,     0,   0,     3,   0				; $35; straight
; ===========================================================================

SS_StartNewAct:				
		moveq	#0,d1
		moveq	#1,d2
		move.w	(v_special_stage).w,d0
		move.b	d0,d1
		lsr.w	#8,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d1,d0
		tst.w	(v_player_mode).w
		bne.s	loc_7718
		move.b	SS_RingReq_Team(pc,d0.w),d1
		bra.s	loc_771C
; ===========================================================================

loc_7718:				
		move.b	SS_RingReq_Alone(pc,d0.w),d1

loc_771C:				
		move.w	d1,(v_ss_ring_requirement).w
		moveq	#0,d0
		cmpi.w	#100,d1
		blt.s	loc_7740
		addq.w	#1,d2
		subi.w	#$64,d1
		move.w	#$100,d0
		cmpi.w	#$64,d1
		blt.s	loc_7740
		subi.w	#$64,d1
		addi.w	#$100,d0

loc_7740:				
					
		divu.w	#10,d1
		lsl.w	#4,d1
		or.b	d1,d0
		swap	d1
		or.b	d1,d0
		move.w	d0,d1
		addi_.w	#1,(v_special_stage).w
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Ring requirement values for Sonic and	Tails games
;
; This array stores the	number of rings	you need to get	to complete each round
; of each special stage, while playing with both sonic and tails. 4 bytes per
; stage, corresponding to the four possible parts of the level.	Last part is
; unused.
; ----------------------------------------------------------------------------
SS_RingReq_Team:	
		dc.b  40, 80,140,120				; 4
		dc.b  50,100,140,150				; 8
		dc.b  60,110,160,170				; 12
		dc.b  40,100,150,160				; 16
		dc.b  55,110,200,200				; 20
		dc.b  80,140,220,220				; 24
		dc.b 100,190,210,210				; 28
		even
; ----------------------------------------------------------------------------
; Ring requirement values for Sonic/Tails alone	games
;
; This array stores the	number of rings	you need to get	to complete each round
; of each special stage, while playing with either sonic or tails. 4 bytes per
; stage, corresponding to the four possible parts of the level.	Last part is
; unused.
; ----------------------------------------------------------------------------
SS_RingReq_Alone:	
		dc.b  30, 70,130,110				; 4
		dc.b  50,100,140,140				; 8
		dc.b  50,110,160,160				; 12
		dc.b  40,110,150,150				; 16
		dc.b  50, 90,160,160				; 20
		dc.b  80,140,210,210				; 24
		dc.b 100,150,190,190				; 28
		even

SS_PaletteTable:	
		dc.w   id_Pal_SS1
		dc.w   id_Pal_SS2
		dc.w   id_Pal_SS3
		dc.w   id_Pal_SS4
		dc.w   id_Pal_SS5
		dc.w   id_Pal_SS6		
		dc.w   id_Pal_SS7
		dc.w   id_Pal_SS1_2p
		dc.w   id_Pal_SS2_2p
		dc.w   id_Pal_SS3_2p

; ===========================================================================


SS_LoadPalAndData:				
		clr.b	(v_special_act).w
		move.b	#-1,(v_ss_last_segment_2).w
		move.w	#0,(v_rings).w
		move.w	#0,(v_rings_p2).w
		move.b	#0,(f_ss_perfect).w
		move.b	#0,(f_got_emerald).w
		move.b	#4,(v_ss_star_color_2).w
		lea	(v_ss_2p_ring_buffer).w,a2
		moveq	#0,d0
		rept 6
		move.w	d0,(a2)+
		endr	
		moveq	#id_Pal_SS,d0				; load common SS palette
		bsr.w	PalLoad_Next
		lea_	SS_PaletteTable,a1
		moveq	#0,d0
		move.b	(v_special_stage).w,d0			; get current Special Stage
		add.w	d0,d0	
		move.w	d0,d1
		tst.b	(f_ss_2p).w				; is it 2P mode?
		beq.s	.not2P					; if not, branch
		cmpi.b	#4,d0					; is it stage 1-3?
		bcs.s	.not2P					; if not, branch
		addi_.w	#6,d0					; add 6 to get pointer to 2P SS palette

	.not2P:				
		move.w	(a1,d0.w),d0
		bsr.w	PalLoad_Next				; load the appropriate palette
		lea	(v_ss_object_locations).w,a0
		adda.w	(a0,d1.w),a0
		move.l	a0,(v_ss_current_obj_locations).w	; set pointer to object locations for current stage
		lea	(v_ss_level_layout).w,a0
		adda.w	(a0,d1.w),a0
		move.l	a0,(v_ss_current_layout).w		; set pointer to layout data for current stage
		rts	

; ===========================================================================
word_7822:	
		dc.w	 4					; 0 
		dc.w  $804					; 1
		dc.w  $C04					; 2
		dc.w $1404					; 3
		dc.w $1804					; 4
		dc.w $1C02					; 5
		dc.w $2604					; 6
		dc.w $2A06					; 7
		dc.w $3004					; 8
		dc.w $3804					; 9
		dc.w $3C04					; 10
		dc.w $4004					; 11
		dc.w $4404					; 12
		dc.w $4C06					; 13
		dc.w $5A02					; 14
		dc.w $FFFF					; 15
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo_DisplaySprite:			
		jmp	DisplaySprite
JmpTo_LoadTitleCardSS:				
		jmp	LoadTitleCardSS
JmpTo_DeleteObject:						
		jmp	DeleteObject
JmpTo_loc_35CE2:				
		jmp	loc_35CE2
JmpTo_loc_35DAA:						
		jmp	loc_35DAA
JmpTo_SpeedToPos:				
		jmp	SpeedToPos
JmpTo_HUD_Base:				
		jmp	HUD_Base
		
		align 4
	endc	

; ===========================================================================

GM_Continue:				
		bsr.w	PaletteFadeOut
		disable_ints
		disable_display
		lea	(vdp_control_port).l,a6
		move.w	#vdp_md_color,(a6)
		move.w	#vdp_bg_color+0,(a6)
		bsr.w	ClearScreen
		clear_ram	ost,ost_end

   	if FixBugs
		; Clear the DMA queue. This fixes the bug where, if you get a
		; Game Over in Hill Top Zone, then Tails' graphics will be corrupted
		; on the Continue screen.
		; This is caused by HTZ's transforming cloud art being loaded over
		; Tails' Continue art: 'Dynamic_HTZ' is responsible for queueing the
		; art to be transferred with 'AddDMA', which takes effect
		; around the next frame. The problem here is, the art is queued, you
		; die, get a Game Over, advance to the Continue screen, and then
		; finally the art is loaded.
		reset_dma_queue
    endc		
		
		bsr.w	LoadContinueText
		vdp_comm.l	move,vram_ContinueTails,vram,write,(vdp_control_port).l
		lea	(Nem_ContinueTails).l,a0
		bsr.w	NemDec
		vdp_comm.l	move,vram_MiniContinue,vram,write,(vdp_control_port).l
		lea	(Nem_MiniSonic).l,a0
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_78DE
		lea	(Nem_MiniTails).l,a0

loc_78DE:				
		bsr.w	NemDec
		moveq	#$A,d1
		jsr	sub_411A4
		moveq	#$1B,d0
		bsr.w	PalLoad_Next
		move.w	#0,(v_pal_dry_next).w
		move.b	#-$64,d0
		bsr.w	PlayMusic
		move.w	#$293,(v_countdown).w
		clr.b	(f_level_started).w
		clr.l	(v_camera_x_pos_copy).w
		move.l	#$1000000,(v_camera_y_pos_copy).w
		move.b	#-$25,(v_ost_player1+ost_id).w
		move.b	#-$25,(v_ost_player2+ost_id).w
		move.b	#6,(v_ost_player2+ost_primary_routine).w
		move.b	#-$26,(v_continue_text+ost_id).w
		move.b	#-$26,(v_continue_icons+ost_id).w
		move.b	#4,(v_continue_icons+ost_primary_routine).w
		jsr	ExecuteObjects
		jsr	BuildSprites
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		enable_display
		bsr.w	PaletteFadeIn

loc_7960:								
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		cmpi.b	#4,($FFFFB024).w
		bcc.s	loc_798E
		disable_ints
		move.w	(v_countdown).w,d1
		divu.w	#$3C,d1
		andi.l	#$F,d1
		jsr	sub_411A4
		enable_ints

loc_798E:				
		jsr	ExecuteObjects
		jsr	BuildSprites
		cmpi.w	#$180,($FFFFB048).w
		bcc.s	loc_79BA
		cmpi.b	#4,($FFFFB024).w
		bcc.s	loc_7960
		tst.w	(v_countdown).w
		bne.w	loc_7960
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================

loc_79BA:				
		move.b	#id_Level,(v_gamemode).w
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.b	d0,(v_last_lamppost).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.b	d0,(v_last_lamppost_p2).w
		move.l	#5000,(v_score_next_life).w
		move.l	#5000,(v_score_next_life_p2).w
		subq.b	#1,(v_continues).w
		rts	

; ===========================================================================


LoadContinueText:				
		vdp_comm.l	move,vram_TitleCard,vram,write,(vdp_control_port).l
		lea	(Nem_TitleCard).l,a0
		bsr.w	NemDec
		lea	(v_level_layout).w,a4
		lea	(Nem_TitleCardFont).l,a0
		bsr.w	NemDecToRAM
		lea	(ContinueText_AdditionalLetters).l,a0
		vdp_comm.l	move,vram_ContinueText_Additional,vram,write,(vdp_control_port).l
		lea	(v_level_layout).w,a1
		lea	(vdp_data_port).l,a6

loc_7A40:				
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	locret_7A5C
		lsl.w	#5,d0
		lea	(a1,d0.w),a2
		moveq	#0,d1
		move.b	(a0)+,d1
		lsl.w	#3,d1
		subq.w	#1,d1

loc_7A54:				
		move.l	(a2)+,(a6)
		dbf	d1,loc_7A54
		bra.s	loc_7A40
; ===========================================================================

locret_7A5C:				
		rts

; ===========================================================================
ContinueText_AdditionalLetters:	
		dc.w  $804					; 0 
		dc.w $4004					; 1
		dc.w $1C02					; 2
		dc.w $4404					; 3
		dc.w $FFFF					; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object DA - Continue text
; ----------------------------------------------------------------------------

ContScrItem:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	ContScrItem_Index(pc,d0.w),d1
		jmp	ContScrItem_Index(pc,d1.w)
; ===========================================================================
ContScrItem_Index:	index offset(*)
		ptr loc_7A7E					; 0 				
		ptr loc_7AAC					; 2
		ptr loc_7AD0					; 4
		ptr loc_7B46					; 6
; ===========================================================================

loc_7A7E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_ContinueScreenItems,ost_mappings(a0)
		move.w	#(vram_ContinueText/sizeof_cell)+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo_Adjust2PArtPointer
		move.b	#render_abs,ost_render(a0)
		move.b	#$3C,$19(a0)
		move.w	#screen_left+160,ost_x_screen(a0)
		move.w	#screen_top+64,ost_y_screen(a0)

loc_7AAC:				
		jmp	DisplaySprite
; ===========================================================================
word_7AB2:
		dc.w	screen_left+150, screen_left+170, screen_left+130, screen_left+190
		dc.w	screen_left+110, screen_left+210, screen_left+90,  screen_left+230			
		dc.w 	screen_left+70,  screen_left+250, screen_left+50,  screen_left+270
		dc.w	screen_left+30,  screen_left+290, screen_left+10
; ===========================================================================

loc_7AD0:				
		movea.l	a0,a1
		lea_	word_7AB2,a2
		moveq	#0,d1
		move.b	(v_continues).w,d1
		subq.b	#2,d1
		bcc.s	loc_7AE6
		jmp	DeleteObject
; ===========================================================================

loc_7AE6:				
		moveq	#1,d3
		cmpi.b	#$E,d1
		bcs.s	loc_7AF2
		moveq	#0,d3
		moveq	#$E,d1

loc_7AF2:				
		move.b	d1,d2
		andi.b	#1,d2

loc_7AF8:				
		_move.b	#id_ContScrItem,ost_id(a1)
		move.w	(a2)+,ost_x_screen(a1)
		tst.b	d2
		beq.s	loc_7B0C
		subi.w	#$A,ost_x_screen(a1)

loc_7B0C:				
		move.w	#screen_top+80,ost_y_screen(a1)
		move.b	#4,$1A(a1)
		move.b	#6,$24(a1)
		move.l	#Map_ContinueScreenItems,ost_mappings(a1)
		move.w	#(vram_ContinueText_2/sizeof_cell)+tile_hi,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo_Adjust2PArtPointer2
		move.b	#render_abs,ost_render(a1)
		lea	$40(a1),a1
		dbf	d1,loc_7AF8
		lea	-$40(a1),a1
		move.b	d3,$28(a1)

loc_7B46:				
		tst.b	$28(a0)
		beq.s	loc_7B66
		cmpi.b	#4,($FFFFB024).w
		bcs.s	loc_7B66
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#1,d0
		bne.s	loc_7B66
		tst.w	($FFFFB010).w
		bne.s	loc_7B7C
		rts	
; ===========================================================================

loc_7B66:				
					
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$F,d0
		bne.s	loc_7B76
		bchg	#0,$1A(a0)

loc_7B76:				
		jmp	DisplaySprite
; ===========================================================================

loc_7B7C:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object DB - Sonic and Tails on the continue screen
; ----------------------------------------------------------------------------

ContinueCharacters:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	ContinueCharacters_Index(pc,d0.w),d1
		jsr	ContinueCharacters_Index(pc,d1.w)
		jmp	DisplaySprite
; ===========================================================================
ContinueCharacters_Index:	index offset(*),,2
		ptr loc_7BA2					; 0 			
		ptr loc_7BD2					; 2
		ptr loc_7BFA					; 4
		ptr loc_7C22					; 6
		ptr loc_7C52					; 8
		ptr loc_7C88					; $A
; ===========================================================================

loc_7BA2:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$9C,ost_x_pos(a0)
		move.w	#$19C,ost_y_pos(a0)
		move.l	#Map_Sonic,ost_mappings(a0)
		move.w	#tile_Sonic,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#2,$18(a0)
		move.b	#$20,$1C(a0)

loc_7BD2:				
		tst.b	(v_joypad_press_actual).w
		bmi.s	loc_7BE4
		jsr	Sonic_Animate
		jmp	Sonic_LoadGFX
; ===========================================================================

loc_7BE4:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$21,$1C(a0)
		clr.w	ost_inertia(a0)
		move.b	#-$20,d0
		bsr.w	PlaySound

loc_7BFA:				
		cmpi.w	#$800,ost_inertia(a0)
		bne.s	loc_7C0A
		move.w	#$1000,ost_x_vel(a0)
		bra.s	loc_7C10
; ===========================================================================

loc_7C0A:				
		addi.w	#$20,ost_inertia(a0)

loc_7C10:				
		jsr	SpeedToPos
		jsr	Sonic_Animate
		jmp	Sonic_LoadGFX
; ===========================================================================

loc_7C22:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$B8,ost_x_pos(a0)
		move.w	#$1A0,ost_y_pos(a0)
		move.l	#Map_ContinueScreenItems,ost_mappings(a0)
		move.w	#vram_ContinueTails/sizeof_cell,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#2,$18(a0)
		move.b	#0,$1C(a0)

loc_7C52:				
		tst.b	(v_joypad_press_actual).w
		bmi.s	loc_7C64
		lea	(Ani_ContinueScreenTails).l,a1
		jmp	AnimateSprite
; ===========================================================================

loc_7C64:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Tails,ost_mappings(a0)
		move.w	#tile_Tails,ost_tile(a0)
		move.b	#0,$1C(a0)
		clr.w	ost_inertia(a0)
		move.b	#-$20,d0
		bsr.w	PlaySound

loc_7C88:				
		cmpi.w	#$720,ost_inertia(a0)
		bne.s	loc_7C98
		move.w	#$1000,ost_x_vel(a0)
		bra.s	loc_7C9E
; ===========================================================================

loc_7C98:				
		addi.w	#$18,ost_inertia(a0)

loc_7C9E:				
		jsr	SpeedToPos
		jsr	Tails_Animate
		jmp	Tails_LoadGFX
; ===========================================================================
Ani_ContinueScreenTails:	index offset(*),,2
		ptr byte_7CB2					; 0 
					
byte_7CB2:	dc.b   9,  2,  3,$FF				; 0 

		include	"mappings/sprite/Continue Screen Items.asm"

; ===========================================================================

	if RemoveJmpTos=0
JmpTo_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
	
		align 4
	endc	

; ===========================================================================

GM_TwoPlayerResults:				
		bsr.w	PaletteFadeOut
		disable_ints
		disable_display
		bsr.w	ClearScreen
		lea	(vdp_control_port).l,a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$8230,(a6)
		move.w	#$8700,(a6)
		move.w	#$8C81,(a6)
		move.w	#$9001,(a6)
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_7D96:				
		move.l	d0,(a1)+
		dbf	d1,loc_7D96
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_7DA6:				
		move.l	d0,(a1)+
		dbf	d1,loc_7DA6
		move.l	#$42000000,(vdp_control_port).l
		lea	(Nem_StandardFont).l,a0
		bsr.w	NemDec
		move.l	#$4E000000,(vdp_control_port).l
		lea	(Nem_1P2PWins).l,a0
		bsr.w	NemDec
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_MenuBack).l,a0
		move.w	#$6000,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		move.w	(v_results_screen_2p).w,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	off_87DC(pc),a2
		movea.l	(a2,d0.w),a0
		movea.l	4(a2,d0.w),a2
		lea	(v_128x128_tiles).l,a1
		move.w	#0,d0
		bsr.w	EniDec
		jsr	(a2)
		lea	(v_128x128_tiles).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		clr.w	(v_dma_queue).w
		move.l	#-$2400,(v_dma_queue_slot).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo_Dynamic_Normal
		moveq	#0,d0
		bsr.w	NewPLC
		moveq	#$26,d0
		bsr.w	PalLoad_Next
		moveq	#0,d0
		move.b	#-$7F,d0
		cmp.w	(v_level_music).w,d0
		beq.s	loc_7E74
		move.w	d0,(v_level_music).w
		bsr.w	PlayMusic

loc_7E74:				
		move.w	#$707,(v_countdown).w
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	(v_fg_y_pos_vsram_p2).w
		clr.l	(v_hblank_fg_y_pos_vsram_p2).w
		move.b	#id_TwoPlayerResultsDisplay,(v_vs_results_hud).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	PaletteFadeIn

loc_7EB4:				
					
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo_Dynamic_Normal
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.l	(v_plc_buffer).w
		bne.s	loc_7EB4
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		beq.s	loc_7EB4
		move.w	(v_results_screen_2p).w,d0
		bne.w	loc_7FB2
		tst.b	(v_act).w
		bne.s	loc_7F3C
		addq.b	#1,(v_act).w
		move.b	#1,(v_act_2p).w
		move.b	#$C,(v_gamemode).w
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		moveq	#0,d0
		move.l	d0,(v_score).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		rts	
; ===========================================================================

loc_7F3C:				
		move.b	#2,(v_act_2p).w
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		bsr.s	sub_7F9A
		bsr.s	sub_7F9A
		move.b	(a4),d1
		sub.b	1(a4),d1
		beq.s	loc_7F66
		move.w	#1,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_7F66:				
		move.b	(v_zone_2p).w,d0
		addq.b	#1,d0
		move.b	d0,(v_special_stage).w
		move.w	#3,(v_results_screen_2p).w
		move.b	#1,(f_unused_ss_flag).w
		move.b	#$10,(v_gamemode).w
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		rts	

; ===========================================================================


sub_7F9A:				
					
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		beq.s	loc_7FAE
		bcs.s	loc_7FAA
		addq.b	#1,(a4)
		bra.s	loc_7FAE
; ===========================================================================

loc_7FAA:				
		addq.b	#1,1(a4)

loc_7FAE:				
		addq.w	#2,a5
		rts	

; ===========================================================================

loc_7FB2:				
		subq.w	#1,d0
		bne.s	loc_8020

loc_7FB6:				
		lea	(v_ehz_results_2p).w,a4
		moveq	#0,d0
		moveq	#0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		addq.w	#2,a4
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		addq.w	#2,a4
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		addq.w	#2,a4
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		swap	d1
		tst.w	d1
		bne.s	loc_7FF8
		move.w	#2,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_7FF8:				
		tst.w	(v_game_over_2p).w
		beq.s	loc_8018
		lea	(v_ehz_results_2p).w,a1
		moveq	#$B,d0

loc_8004:				
		move.w	#-1,(a1)+
		dbf	d0,loc_8004
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w

loc_8018:				
		move.b	#$1C,(v_gamemode).w
		rts	
; ===========================================================================

loc_8020:				
		subq.w	#1,d0
		bne.s	loc_802C
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================

loc_802C:				
		subq.w	#1,d0
		bne.w	loc_80BA
		cmpi.b	#3,(v_zone_2p).w
		beq.s	loc_8048
		move.w	#1,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_8048:				
		tst.b	(v_act_2p).w
		beq.s	loc_806C
		cmpi.b	#2,(v_act_2p).w
		beq.s	loc_80AC
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		bsr.s	sub_8094
		bsr.s	sub_8094
		move.b	(a4),d1
		sub.b	1(a4),d1
		bne.s	loc_80AC

loc_806C:				
		addq.b	#1,(v_act_2p).w
		addq.b	#1,(v_special_stage).w
		move.w	#3,(v_results_screen_2p).w
		move.b	#1,(f_unused_ss_flag).w
		move.b	#$10,(v_gamemode).w
		move.w	#1,(f_two_player).w
		move.w	#0,(v_level_music).w
		rts	

; ===========================================================================


sub_8094:				
					
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		beq.s	loc_80A8
		bcs.s	loc_80A4
		addq.b	#1,(a4)
		bra.s	loc_80A8
; ===========================================================================

loc_80A4:				
		addq.b	#1,1(a4)

loc_80A8:				
		addq.w	#2,a5
		rts	

; ===========================================================================

loc_80AC:				
					
		move.w	#4,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_80BA:				
		bra.w	loc_7FB6
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 21 - Score/Rings/Time display on 2P results screen
; ----------------------------------------------------------------------------

TwoPlayerResultsDisplay:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	TwoPlayerResults_Index(pc,d0.w),d1
		jmp	TwoPlayerResults_Index(pc,d1.w)
; ===========================================================================
TwoPlayerResults_Index:	index offset(*),,2
		ptr loc_80E4					; 0 				
		ptr loc_812C					; 2

TwoPlayerResults_PosData:
		;      x,    y
		dc.w screen_left+112, screen_top+200
		dc.w screen_left+112, screen_top+176
		dc.w screen_left+96, screen_top+200
		dc.w screen_left+112, screen_top+200
		dc.w screen_left+112, screen_top+200

loc_80E4:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	(v_results_screen_2p).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.l	TwoPlayerResults_PosData(pc,d0.w),ost_x_screen(a0) ; and ost_y_screen(a0)
		move.l	#Map_2P_Results_Text,ost_mappings(a0)
		move.w	#vram_1P2PWins/sizeof_cell,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo2_Adjust2PArtPointer
		move.b	#render_abs,ost_render(a0)
		move.b	#0,$18(a0)
		moveq	#2,d1
		move.b	(v_ss_total_won).w,d0
		sub.b	($FFFFFF39).w,d0
		beq.s	loc_8128
		bcs.s	loc_8126
		moveq	#0,d1
		bra.s	loc_8128
; ===========================================================================

loc_8126:				
		moveq	#1,d1

loc_8128:									
		move.b	d1,$1A(a0)

loc_812C:				
		andi.w	#tile_vram,ost_tile(a0)
		btst	#3,(v_vblank_counter_byte).w
		beq.s	JmpTo4_DisplaySprite
		ori.w	#tile_pal2,ost_tile(a0)

JmpTo4_DisplaySprite:				
		jmp	DisplaySprite
; ===========================================================================

		include "mappings/sprite/2P Results Text.asm"
		
; ===========================================================================

loc_819A:				
		move.w	#$1F2,d2
		moveq	#0,d0
		bsr.w	sub_8672
		move.w	#$216,d2
		moveq	#0,d1

loc_81AA:				
		move.b	(v_act_2p).w,d1
		addq.b	#1,d1
		bsr.w	sub_86B0
		move.w	#$33E,d2
		move.l	(v_score).w,d1

loc_81BC:				
		bsr.w	sub_86F6
		move.w	#$352,d2
		move.l	(v_score_p2).w,d1
		bsr.w	sub_86F6
		move.w	#$3DA,d2
		moveq	#0,d0
		move.w	(v_time).w,d1
		bsr.w	sub_86B0
		move.w	#$3E0,d2
		moveq	#0,d1
		move.b	(v_time_sec).w,d1
		bsr.w	sub_86B0
		move.w	#$3E6,d2
		moveq	#0,d1
		move.b	(v_time_frames).w,d1
		mulu.w	#$1B0,d1
		lsr.l	#8,d1
		bsr.w	sub_86B0

loc_81FC:				
		move.w	#$3EE,d2
		moveq	#0,d0
		move.w	(v_time_p2).w,d1
		bsr.w	sub_86B0
		move.w	#$3F4,d2
		moveq	#0,d1
		move.b	(v_time_sec_p2).w,d1

loc_8214:				
		bsr.w	sub_86B0
		move.w	#$3FA,d2
		moveq	#0,d1
		move.b	(v_time_frames_p2).w,d1
		mulu.w	#$1B0,d1
		lsr.l	#8,d1
		bsr.w	sub_86B0
		move.w	#$486,d2
		moveq	#0,d0
		move.w	(v_rings).w,d1
		bsr.w	sub_86B0
		move.w	#$49A,d2
		move.w	(v_rings_p2).w,d1
		bsr.w	sub_86B0
		move.w	#$526,d2
		moveq	#0,d0
		move.w	(v_rings_collected_p1).w,d1
		bsr.w	sub_86B0
		move.w	#$53A,d2
		move.w	(v_rings_collected_p2).w,d1
		bsr.w	sub_86B0
		move.w	#$5C6,d2
		moveq	#0,d0
		move.w	(v_monitors_broken_p1).w,d1
		bsr.w	sub_86B0
		move.w	#$5DA,d2
		move.w	(v_monitors_broken_p2).w,d1
		bsr.w	sub_86B0
		bsr.w	sub_8476
		move.w	#$364,d2
		move.w	#$6000,d0
		move.l	(v_score).w,d1
		sub.l	(v_score_p2).w,d1
		bsr.w	sub_8652
		move.w	#$404,d2
		move.l	(v_time_p2).w,d1
		sub.l	(v_time).w,d1
		bsr.w	sub_8652
		move.w	#$4A4,d2
		moveq	#0,d1
		move.w	(v_rings).w,d1
		sub.w	(v_rings_p2).w,d1
		bsr.w	sub_8652
		move.w	#$544,d2
		moveq	#0,d1
		move.w	(v_rings_collected_p1).w,d1
		sub.w	(v_rings_collected_p2).w,d1
		bsr.w	sub_8652
		move.w	#$5E4,d2
		moveq	#0,d1
		move.w	(v_monitors_broken_p1).w,d1
		sub.w	(v_monitors_broken_p2).w,d1
		bsr.w	sub_8652
		move.w	#$706,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a4),d1
		bsr.w	sub_86B0
		move.w	#$70E,d2
		moveq	#0,d1
		move.b	1(a4),d1
		bsr.w	sub_86B0
		move.w	(a4),(v_ss_total_won).w
		rts	
; ===========================================================================

loc_82FA:				
		move.w	#$242,d2
		moveq	#0,d0
		bsr.w	sub_8672
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		move.w	#$398,d6
		bsr.w	sub_854A
		move.w	#$488,d6
		bsr.w	sub_854A
		move.w	#$618,d6
		bsr.w	sub_854A
		rts	
; ===========================================================================

loc_8328:				
		lea	(v_ehz_results_2p).w,a5
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		move.w	#$208,d6
		bsr.w	sub_84C4
		move.w	#$258,d6
		bsr.w	sub_84C4
		move.w	#$2A8,d6
		bsr.w	sub_84C4
		move.w	#$348,d6
		bsr.w	sub_84C4
		move.w	#$398,d6
		bsr.w	sub_84C4
		move.w	#$3E8,d6
		bsr.w	sub_84C4
		move.w	#$488,d6
		bsr.w	sub_84C4
		move.w	#$4D8,d6
		bsr.w	sub_84C4
		move.w	#$528,d6
		bsr.w	sub_84C4
		move.w	#$5C8,d6
		bsr.w	sub_84C4
		move.w	#$618,d6
		bsr.w	sub_84C4
		move.w	#$668,d6
		bsr.w	sub_84C4
		move.w	#$70A,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a4),d1
		bsr.w	sub_86B0
		move.w	#$710,d2
		moveq	#0,d1
		move.b	1(a4),d1
		bsr.w	sub_86B0
		rts	
; ===========================================================================

loc_83B0:				
		move.w	#$266,d2
		moveq	#0,d1
		move.b	(v_act_2p).w,d1
		addq.b	#1,d1
		bsr.w	sub_86B0
		move.w	#$4D6,d2
		moveq	#0,d0
		move.w	(v_ss_2p_ring_buffer).w,d1
		bsr.w	sub_86B0
		move.w	#$4E6,d2
		move.w	($FFFFFFA2).w,d1
		bsr.w	sub_86B0
		move.w	#$576,d2
		moveq	#0,d0
		move.w	($FFFFFFA4).w,d1
		bsr.w	sub_86B0
		move.w	#$586,d2
		move.w	($FFFFFFA6).w,d1
		bsr.w	sub_86B0
		move.w	#$616,d2
		moveq	#0,d0
		move.w	($FFFFFFA8).w,d1
		bsr.w	sub_86B0
		move.w	#$626,d2
		move.w	($FFFFFFAA).w,d1
		bsr.w	sub_86B0
		bsr.w	sub_8476
		move.w	#$6000,d0
		move.w	#$4F0,d2
		moveq	#0,d1
		move.w	(v_ss_2p_ring_buffer).w,d1
		sub.w	($FFFFFFA2).w,d1
		bsr.w	sub_8652
		move.w	#$590,d2
		moveq	#0,d1
		move.w	($FFFFFFA4).w,d1
		sub.w	($FFFFFFA6).w,d1
		bsr.w	sub_8652
		move.w	#$630,d2
		moveq	#0,d1
		move.w	($FFFFFFA8).w,d1
		sub.w	($FFFFFFAA).w,d1
		bsr.w	sub_8652
		move.w	(a4),(v_ss_total_won).w
		rts	
; ===========================================================================

loc_8452:				
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		move.w	#$4D4,d6
		bsr.w	sub_85CE
		move.w	#$574,d6
		bsr.w	sub_85CE
		move.w	#$614,d6
		bsr.w	sub_85CE
		rts	

; ===========================================================================


sub_8476:				
					
		lea	(v_ehz_results_2p).w,a4
		move.b	(v_zone_2p).w,d0
		beq.s	loc_8494
		lea	(v_mcz_results_2p).w,a4
		subq.b	#1,d0
		beq.s	loc_8494
		lea	(v_cnz_results_2p).w,a4
		subq.b	#1,d0
		beq.s	loc_8494
		lea	(v_ss_results_2p).w,a4

loc_8494:				
		moveq	#0,d0
		move.b	(v_act_2p).w,d0
		add.w	d0,d0
		lea	(a4,d0.w),a4
		clr.w	(a4)
		rts	


; ===========================================================================


sub_84A4:				
					
		lea	(v_ehz_results_2p).w,a5
		move.b	(v_zone_2p).w,d0
		beq.s	locret_84C2
		lea	(v_mcz_results_2p).w,a5
		subq.b	#1,d0
		beq.s	locret_84C2
		lea	(v_cnz_results_2p).w,a5
		subq.b	#1,d0
		beq.s	locret_84C2
		lea	(v_ss_results_2p).w,a5

locret_84C2:				
		rts	


; ===========================================================================


sub_84C4:				
					
		move.w	(a5),d0
		bmi.s	loc_84FC
		move.w	d6,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a5),d1
		bsr.w	sub_86B0
		addq.w	#8,d6
		move.w	d6,d2
		moveq	#0,d1
		move.b	1(a5),d1
		bsr.w	sub_86B0
		addi.w	#$12,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_84FC:				
		addq.w	#4,d6
		not.w	d0
		bne.s	loc_8522
		lea	(Text2P_NoGame).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$16,d6
		move.w	d6,d2
		lea	(Text2P_Blank).l,a1
		bsr.w	loc_8698
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_8522:				
		moveq	#0,d0
		lea	(Text2P_GameOver).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$16,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	


; ===========================================================================

sub_854A:								
		move.w	(a5),d0
		bmi.s	loc_8582
		move.w	d6,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a5),d1
		bsr.w	sub_86B0
		addq.w	#8,d6
		move.w	d6,d2
		moveq	#0,d1
		move.b	1(a5),d1
		bsr.w	sub_86B0
		addi.w	#$C,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_8582:				
		not.w	d0
		bne.s	loc_85A6
		lea	(Text2P_NoGame).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		lea	(Text2P_Blank).l,a1
		bsr.w	loc_8698
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_85A6:				
		moveq	#0,d0
		lea	(Text2P_GameOver).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	


; ===========================================================================


sub_85CE:				
					
		move.w	(a5),d0
		bmi.s	loc_8608
		move.w	d6,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a5),d1
		bsr.w	sub_86B0
		addi.w	#$C,d6
		move.w	d6,d2
		moveq	#0,d1
		move.b	1(a5),d1
		bsr.w	sub_86B0
		addi.w	#$10,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_8608:				
		not.w	d0
		bne.s	loc_862C
		lea	(Text2P_NoGame).l,a1
		move.w	d6,d2
		addq.w	#4,d2
		bsr.w	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		lea	(Text2P_Blank).l,a1
		bsr.s	loc_8698
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_862C:				
		moveq	#0,d0
		lea	(Text2P_GameOver).l,a1
		move.w	d6,d2
		bsr.s	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	


; ===========================================================================


sub_8652:				
					
		lea	(Text2P_Tied).l,a1
		beq.s	loc_8670
		bcs.s	loc_8666
		lea	(Text2P_1P).l,a1
		addq.b	#1,(a4)
		bra.s	loc_8670
; ===========================================================================

loc_8666:				
		lea	(Text2P_2P).l,a1
		addq.b	#1,1(a4)

loc_8670:				
		bra.s	loc_8698


; ===========================================================================


sub_8672:				
					
		lea	(Text2P_EmeraldHill).l,a1
		move.b	(v_zone_2p).w,d1
		beq.s	loc_8698
		lea	(Text2P_MysticCave).l,a1
		subq.b	#1,d1
		beq.s	loc_8698
		lea	(Text2P_CasinoNight).l,a1
		subq.b	#1,d1
		beq.s	loc_8698
		lea	(Text2P_SpecialStage).l,a1

loc_8698:				
		lea	(v_128x128_tiles).l,a2
		lea	(a2,d2.w),a2
		moveq	#0,d1
		move.b	(a1)+,d1

loc_86A6:				
		move.b	(a1)+,d0
		move.w	d0,(a2)+
		dbf	d1,loc_86A6
		rts	


; ===========================================================================


sub_86B0:				
					
		lea	(v_128x128_tiles).l,a2
		lea	(a2,d2.w),a2
		lea	(word_86F0).l,a3
		moveq	#0,d2
		moveq	#2,d5

loc_86C4:				
		moveq	#0,d3
		move.w	(a3)+,d4

loc_86C8:				
		sub.w	d4,d1
		bcs.s	loc_86D0
		addq.w	#1,d3
		bra.s	loc_86C8
; ===========================================================================

loc_86D0:				
		add.w	d4,d1
		tst.w	d5
		beq.s	loc_86E0
		tst.w	d3
		beq.s	loc_86DC
		moveq	#1,d2

loc_86DC:				
		tst.w	d2
		beq.s	loc_86E8

loc_86E0:				
		addi.b	#$10,d3
		move.b	d3,d0
		move.w	d0,(a2)

loc_86E8:				
		addq.w	#2,a2
		dbf	d5,loc_86C4
		rts	

; ===========================================================================
word_86F0:	
		dc.w   $64					; 0 
		dc.w	$A					; 1
		dc.w	 1					; 2

; ===========================================================================


sub_86F6:									
		lea	(v_128x128_tiles).l,a2
		lea	(a2,d2.w),a2
		lea	(word_8732).l,a3
		moveq	#0,d2
		moveq	#5,d5

loc_870A:				
		moveq	#0,d3
		move.l	(a3)+,d4

loc_870E:				
		sub.l	d4,d1
		bcs.s	loc_8716
		addq.w	#1,d3
		bra.s	loc_870E
; ===========================================================================

loc_8716:				
		add.l	d4,d1
		tst.w	d3
		beq.s	loc_871E
		moveq	#1,d2

loc_871E:				
		tst.w	d2
		beq.s	loc_872A
		addi.b	#$10,d3
		move.b	d3,d0
		move.w	d0,(a2)

loc_872A:				
		addq.w	#2,a2
		dbf	d5,loc_870A
		rts	

; ===========================================================================
word_8732:	
		dc.l 100000
		dc.l  10000
		dc.l   1000
		dc.l    100
		dc.l     10
		dc.l      1

		
Text2P_EmeraldHill:		menutxt	"EMERALD HILL"
		rev02even					
Text2P_MysticCave:		menutxt	" MYSTIC CAVE"
		rev02even					
Text2P_CasinoNight:		menutxt	"CASINO NIGHT"				
		rev02even					
Text2P_SpecialStage:	menutxt	"SPECIAL STAGE"
		rev02even					
Text2P_Special:			menutxt	"   SPECIAL  "
		rev02even					
Text2P_Zone:			menutxt	"ZONE "	
		rev02even					
Text2P_Stage:			menutxt	"STAGE"
		rev02even
Text2P_GameOver:		menutxt	"GAME OVER"
		rev02even
Text2P_TimeOver:		menutxt	"TIME OVER"
		rev02even		
Text2P_NoGame:			menutxt	"NO GAME"	
		rev02even					
Text2P_Tied:			menutxt	"TIED"
		rev02even
Text2P_1P:				menutxt	" 1P"
		rev02even
Text2P_2P:				menutxt	" 2P"
		rev02even
Text2P_Blank:			menutxt	"    "
		rev02even
							
; ------------------------------------------------------------------------
; Menu Animation Script
; ------------------------------------------------------------------------
word_87C6:	dc.w   0					; 0 
					
; Sonic/Miles animated background
		dc.l $FF000000+Art_MenuBack
		dc.w $20
		dc.b 6
		dc.b $A
		dc.b   0,$C7					; 0
		dc.b  $A,  5					; 2
		dc.b $14,  5					; 4
		dc.b $1E,$C7					; 6
		dc.b $14,  5					; 8
		dc.b  $A,  5					; 10

off_87DC:	
		dc.l Eni_2PActResults		
		dc.l loc_819A
		dc.l Eni_2PZoneResults
		dc.l loc_82FA
		dc.l Eni_2PGameResults
		dc.l loc_8328
		dc.l Eni_2PSpecialStageActResults
		dc.l loc_83B0
		dc.l Eni_2PSpecialStageZoneResults
		dc.l loc_8452

	

		incfile	Eni_2PActResults			; byte_8804: Map_2PActResults:	
		incfile	Eni_2PZoneResults			; byte_88CE: Map_2PZoneResults:
		incfile	Eni_2PGameResults			; byte_8960: Map_2PGameResults:
		incfile	Eni_2PSpecialStageActResults		; byte_8AA4: Map_2PSpecialStageActResults:
		incfile	Eni_2PSpecialStageZoneResults		; byte_8B30: Map_2PSpecialStageZoneResults:
		
; ===========================================================================

	if RemoveJmpTos=0
JmpTo2_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_Dynamic_Normal:
		jmp	Dynamic_Normal
	endc

; ===========================================================================

MenuScreen:							
		bsr.w	PaletteFadeOut
		disable_ints
		disable_display
		bsr.w	ClearScreen
		lea	(vdp_control_port).l,a6
		move.w	#-$7FFC,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7900,(a6)
		move.w	#-$737F,(a6)
		move.w	#-$6FFF,(a6)

		clear_ram	v_sprite_queue,v_sprite_queue_end
		clear_ram	ost,ost_end
		reset_dma_queue
		
		move.l	#$42000000,(vdp_control_port).l
		lea	(Nem_StandardFont).l,a0
		bsr.w	NemDec
		move.l	#$4E000000,(vdp_control_port).l
		lea	(Nem_MenuBox).l,a0
		bsr.w	NemDec
		move.l	#$52000000,(vdp_control_port).l
		lea	(Nem_LevelSelectPics).l,a0
		bsr.w	NemDec
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_MenuBack).l,a0
		move.w	#$6000,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		jsrto	TilemapToVRAM,JmpTo_TilemapToVRAM
		cmpi.b	#$24,(v_gamemode).w
		beq.w	loc_8FCC
		cmpi.b	#$28,(v_gamemode).w
		beq.w	loc_92F6
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_LevelSelect2P).l,a0
		move.w	#$70,d0
		bsr.w	EniDec
		lea	($FFFF0198).l,a1
		lea	(Eni_LevelSelect2P).l,a0
		move.w	#$2070,d0
		bsr.w	EniDec
		lea	($FFFF0330).l,a1
		lea	(Eni_LevelSelectIcons).l,a0
		move.w	#$90,d0	
		bsr.w	EniDec
		lea	($FFFF0498).l,a2
		moveq	#$F,d1

loc_8CF8:				
		move.w	#$207B,(a2)+
		dbf	d1,loc_8CF8
		bsr.w	sub_8E7E
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		bsr.w	sub_8F1C
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		bsr.w	sub_8F1C
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		bsr.w	sub_8F1C
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		clr.w	(v_player_mode).w
		clr.b	(v_act_2p).w
		clr.w	(v_results_screen_2p).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		clr.w	(v_game_over_2p).w
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo2_Dynamic_Normal
		moveq	#$26,d0
		bsr.w	PalLoad_Next
		lea	(v_pal_dry_line3).w,a1
		lea	($FFFFFBC0).w,a2
		moveq	#7,d1

loc_8D6A:				
		move.l	(a1),(a2)+
		clr.l	(a1)+
		dbf	d1,loc_8D6A
		move.b	#-$6F,d0
		jsrto	PlayMusic,JmpTo_PlayMusic
		move.w	#$707,(v_countdown).w
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	PaletteFadeIn

loc_8DA8:				
					
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		disable_ints
		bsr.w	sub_8F1C
		bsr.w	sub_8E5A
		bsr.w	sub_8E7E
		enable_ints
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo2_Dynamic_Normal
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		bne.s	loc_8DE2
		bra.w	loc_8DA8
; ===========================================================================

loc_8DE2:				
		bsr.w	sub_8EFE
		bmi.s	loc_8DF4
		move.w	#$ED,d0	
		jsrto	PlaySound,JmpTo_PlaySound
		bra.w	loc_8DA8
; ===========================================================================

loc_8DF4:				
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		add.w	d0,d0
		move.w	word_8E52(pc,d0.w),d0
		bmi.s	loc_8E3A
		move.w	d0,(v_zone).w
		move.w	#1,(f_two_player).w
		move.b	#$C,(v_gamemode).w
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		moveq	#0,d0
		move.l	d0,(v_score).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		rts	
; ===========================================================================

loc_8E3A:				
		move.b	#4,(v_special_stage).w
		move.b	#$10,(v_gamemode).w
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		rts	
; ===========================================================================
word_8E52:	
		dc.w	id_EHZ_act1				; 0
		dc.w	id_MCZ_act1				; 2
		dc.w	id_CNZ_act1				; 4
		dc.w	$FFFF					; 6

; ===========================================================================


sub_8E5A:				
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		move.b	d0,d1
		andi.b	#3,d0
		beq.s	loc_8E70
		bchg	#1,(v_zone_2p).w

loc_8E70:				
		andi.b	#$C,d1
		beq.s	locret_8E7C
		bchg	#0,(v_zone_2p).w

locret_8E7C:				
		rts	


; ===========================================================================


sub_8E7E:				
					
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		lsl.w	#4,d0
		lea	(off_8F7E).l,a3
		lea	(a3,d0.w),a3
		move.w	#$6000,d0
		lea	($FFFF0048).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF0094).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF00D8).l,a2
		movea.l	4(a3),a1
		bsr.w	sub_8EFE
		bmi.s	loc_8EC2
		lea	($FFFF0468).l,a1

loc_8EC2:				
		moveq	#2,d1

loc_8EC4:				
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		lea	$1A(a2),a2
		dbf	d1,loc_8EC4
		lea	(v_128x128_tiles).l,a1
		move.l	(a3)+,d0
		moveq	#$10,d1
		moveq	#$B,d2
		jsrto	TilemapToVRAM,JmpTo_TilemapToVRAM
		lea	(Pal_LevelSelectIcons).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a1
		lea	(v_pal_dry_line3).w,a2
		moveq	#7,d1

loc_8EF6:				
		move.l	(a1)+,(a2)+
		dbf	d1,loc_8EF6
		rts	


; ===========================================================================


sub_8EFE:				
					
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		add.w	d0,d0
		lea	(v_ehz_results_2p).w,a5
		lea	(a5,d0.w),a5
		move.w	(a5),d0
		add.w	2(a5),d0
		rts	


; ===========================================================================


sub_8F1C:				
					
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		lsl.w	#4,d0
		lea	(off_8F7E).l,a3
		lea	(a3,d0.w),a3
		moveq	#0,d0
		lea	($FFFF01E0).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF022C).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF0270).l,a2
		lea	($FFFF0498).l,a1
		bsr.w	sub_8EFE
		bmi.s	loc_8F60
		lea	($FFFF0468).l,a1

loc_8F60:				
		moveq	#2,d1

loc_8F62:				
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		lea	$1A(a2),a2
		dbf	d1,loc_8F62
		lea	($FFFF0198).l,a1
		move.l	(a3)+,d0
		moveq	#$10,d1
		moveq	#$B,d2
		jmpto	TilemapToVRAM,JmpTo_TilemapToVRAM

; ===========================================================================
off_8F7E:	
		dc.l Text2P_EmeraldHill		
		dc.l Text2P_Zone
		dc.w $4104
		dc.w 3
		dc.w $FF
		dc.w $330
		dc.l Text2P_MysticCave
		dc.l Text2P_Zone
		dc.w $412C
		dc.w 3
		dc.w $5FF
		dc.w $3A8
		dc.l Text2P_CasinoNight
		dc.l Text2P_Zone
		dc.w $4784
		dc.w 3
		dc.w $6FF
		dc.w $3C0
		dc.l Text2P_Special
		dc.l Text2P_Stage
		dc.w $47AC
		dc.w 3
		dc.w $CFF
		dc.w $450

; ===========================================================================


sub_8FBE:				
		moveq	#0,d1
		move.b	(a1)+,d1

loc_8FC2:				
		move.b	(a1)+,d0
		move.w	d0,(a2)+
		dbf	d1,loc_8FC2
		rts	

; ===========================================================================

loc_8FCC:				
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_Options).l,a0
		move.w	#$70,d0
		bsr.w	EniDec
		lea	($FFFF0160).l,a1
		lea	(Eni_Options).l,a0
		move.w	#$2070,d0
		bsr.w	EniDec
		clr.b	(v_options_menu_box).w
		bsr.w	sub_9186
		addq.b	#1,(v_options_menu_box).w
		bsr.w	loc_91F8
		addq.b	#1,(v_options_menu_box).w
		bsr.w	loc_91F8
		clr.b	(v_options_menu_box).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo2_Dynamic_Normal
		moveq	#$26,d0
		bsr.w	PalLoad_Next
		move.b	#-$6F,d0
		jsrto	PlayMusic,JmpTo_PlayMusic
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		clr.w	(v_correct_cheat_entries).w
		clr.w	(v_correct_cheat_entries_2).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	PaletteFadeIn

loc_9060:				
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		disable_ints
		bsr.w	loc_91F8
		bsr.w	sub_90E0
		bsr.w	sub_9186
		enable_ints
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo2_Dynamic_Normal
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		bne.s	loc_909A
		bra.w	loc_9060
; ===========================================================================

loc_909A:				
		move.b	(v_options_menu_box).w,d0
		bne.s	loc_90B6
		moveq	#0,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		move.w	d0,(v_zone).w
		move.b	#$C,(v_gamemode).w
		rts	
; ===========================================================================

loc_90B6:				
		subq.b	#1,d0
		bne.s	loc_90D8
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		move.b	#$1C,(v_gamemode).w
		move.b	#0,(v_zone_2p).w
		move.w	#sonic_tails,(v_player_mode).w
		rts	
; ===========================================================================

loc_90D8:				
		move.b	#0,(v_gamemode).w
		rts	

; ===========================================================================


sub_90E0:				
		moveq	#0,d2
		move.b	(v_options_menu_box).w,d2
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		btst	#0,d0
		beq.s	loc_90FC
		subq.b	#1,d2
		bcc.s	loc_90FC
		move.b	#2,d2

loc_90FC:				
		btst	#1,d0
		beq.s	loc_910C
		addq.b	#1,d2
		cmpi.b	#3,d2
		bcs.s	loc_910C
		moveq	#0,d2

loc_910C:				
		move.b	d2,(v_options_menu_box).w
		lsl.w	#2,d2
		move.b	word_917A(pc,d2.w),d3
		movea.l	word_917A(pc,d2.w),a1
		move.w	(a1),d2
		btst	#2,d0
		beq.s	loc_9128
		subq.b	#1,d2
		bcc.s	loc_9128
		move.b	d3,d2

loc_9128:				
		btst	#3,d0
		beq.s	loc_9136
		addq.b	#1,d2
		cmp.b	d3,d2
		bls.s	loc_9136
		moveq	#0,d2

loc_9136:				
		btst	#6,d0
		beq.s	loc_9146
		addi.b	#$10,d2
		cmp.b	d3,d2
		bls.s	loc_9146
		moveq	#0,d2

loc_9146:				
		move.w	d2,(a1)
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	locret_9178
		andi.w	#$30,d0
		beq.s	locret_9178
		move.w	($FFFFFF84).w,d0
		addi.w	#$80,d0	
		jsrto	PlayMusic,JmpTo_PlayMusic
		lea	(LevSelCode).l,a0
		lea	(ContinuesCode).l,a2
		lea	(f_levelselect_cheat).w,a1
		moveq	#0,d2
		bsr.w	loc_9746

locret_9178:				
		rts	

; ===========================================================================
word_917A:	
		dc.w  $2FF					; 0 		
		dc.w $FF72					; 1
		dc.w  $1FF					; 2
		dc.w $FF74					; 3
		dc.w $7FFF					; 4
		dc.w $FF84					; 5

; ===========================================================================


sub_9186:				
					
		bsr.w	loc_9268
		moveq	#0,d1
		move.b	(v_options_menu_box).w,d1
		lsl.w	#3,d1
		lea	(off_92BA).l,a3
		lea	(a3,d1.w),a3
		move.w	#$6000,d0
		lea	($FFFF0030).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF00B6).l,a2
		moveq	#0,d1
		cmpi.b	#2,(v_options_menu_box).w
		beq.s	loc_91CE
		move.b	(v_options_menu_box).w,d1
		lsl.w	#2,d1
		lea	word_917A(pc),a1
		movea.l	(a1,d1.w),a1
		move.w	(a1),d1
		lsl.w	#2,d1

loc_91CE:				
		movea.l	(a4,d1.w),a1
		bsr.w	sub_8FBE
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	loc_91E8
		lea	($FFFF00C2).l,a2
		bsr.w	loc_9296

loc_91E8:				
		lea	(v_128x128_tiles).l,a1
		move.l	(a3)+,d0
		moveq	#$15,d1
		moveq	#7,d2
		jmpto	TilemapToVRAM,JmpTo_TilemapToVRAM
; ===========================================================================

loc_91F8:				
					
		bsr.w	loc_9268
		moveq	#0,d1
		move.b	(v_options_menu_box).w,d1
		lsl.w	#3,d1
		lea	(off_92BA).l,a3
		lea	(a3,d1.w),a3
		moveq	#0,d0
		lea	($FFFF0190).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF0216).l,a2
		moveq	#0,d1
		cmpi.b	#2,(v_options_menu_box).w
		beq.s	loc_923E
		move.b	(v_options_menu_box).w,d1
		lsl.w	#2,d1
		lea	word_917A(pc),a1
		movea.l	(a1,d1.w),a1
		move.w	(a1),d1
		lsl.w	#2,d1

loc_923E:				
		movea.l	(a4,d1.w),a1
		bsr.w	sub_8FBE
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	loc_9258
		lea	($FFFF0222).l,a2
		bsr.w	loc_9296

loc_9258:				
		lea	($FFFF0160).l,a1
		move.l	(a3)+,d0
		moveq	#$15,d1
		moveq	#7,d2
		jmpto	TilemapToVRAM,JmpTo_TilemapToVRAM
; ===========================================================================

loc_9268:				
		lea	(off_92D2).l,a4
		tst.b	(v_console_region).w
		bpl.s	loc_927A
		lea	(off_92DE).l,a4

loc_927A:				
		tst.b	(v_options_menu_box).w
		beq.s	loc_9286
		lea	(off_92EA).l,a4

loc_9286:				
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	locret_9294
		lea	(off_92F2).l,a4

locret_9294:				
		rts	
; ===========================================================================

loc_9296:				
		move.w	($FFFFFF84).w,d1
		move.b	d1,d2
		lsr.b	#4,d1
		bsr.s	loc_92A2
		move.b	d2,d1

loc_92A2:				
		andi.w	#$F,d1
		cmpi.b	#$A,d1
		bcs.s	loc_92B0
		addi.b	#4,d1

loc_92B0:				
		addi.b	#$10,d1
		move.b	d1,d0
		move.w	d0,(a2)+
		rts	
; ===========================================================================
off_92BA:	
		dc.l TextOptScr_PlayerSelect		
		dc.w $4192
		dc.w 3
		dc.l TextOptScr_VsModeItems
		dc.w $4592
		dc.w 3
		dc.l TextOptScr_SoundTest
		dc.w $4992
		dc.w 3
off_92D2:	
		dc.l TextOptScr_SonicAndMiles		
		dc.l TextOptScr_SonicAlone
		dc.l TextOptScr_MilesAlone
off_92DE:	
		dc.l TextOptScr_SonicAndTails		
		dc.l TextOptScr_SonicAlone
		dc.l TextOptScr_TailsAlone
off_92EA:	
		dc.l TextOptScr_AllKindsItems		
		dc.l TextOptScr_TeleportOnly
off_92F2:	
		dc.l TextOptScr_0		
; ===========================================================================

loc_92F6:				
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_LevelSelect).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		jsrto	TilemapToVRAM,JmpTo_TilemapToVRAM
		moveq	#0,d3
		bsr.w	loc_965A
		lea	($FFFF08C0).l,a1
		lea	(Eni_LevelSelectIcons).l,a0
		move.w	#$90,d0	
		bsr.w	EniDec
		bsr.w	loc_9688
		clr.w	(v_player_mode).w
		clr.w	(v_results_screen_2p).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo2_Dynamic_Normal
		moveq	#$26,d0
		bsr.w	PalLoad_Next
		lea	(v_pal_dry_line3).w,a1
		lea	($FFFFFBC0).w,a2
		moveq	#7,d1

loc_9366:				
		move.l	(a1),(a2)+
		clr.l	(a1)+
		dbf	d1,loc_9366
		move.b	#-$6F,d0
		jsrto	PlayMusic,JmpTo_PlayMusic
		move.w	#$707,(v_countdown).w
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		clr.w	(v_correct_cheat_entries).w
		clr.w	(v_correct_cheat_entries_2).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	PaletteFadeIn

loc_93AC:				
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		disable_ints
		moveq	#0,d3
		bsr.w	loc_95B8
		bsr.w	loc_94DC
		move.w	#$6000,d3
		bsr.w	loc_95B8
		bsr.w	loc_9688
		enable_ints
		lea	(word_87C6).l,a2
		jsrto	Dynamic_Normal,JmpTo2_Dynamic_Normal
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		bne.s	loc_93F0
		bra.w	loc_93AC
; ===========================================================================

loc_93F0:				
		move.w	(v_level_select_zone).w,d0
		add.w	d0,d0
		move.w	Misc_9454(pc,d0.w),d0
		bmi.w	loc_944C
		cmpi.w	#$4000,d0
		bne.s	loc_9480
		move.b	#$10,(v_gamemode).w
		clr.w	(v_zone).w
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		move.w	(v_player_option).w,(v_player_mode).w
		rts	
; ===========================================================================

loc_944C:				
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================
; -----------------------------------------------------------------------------
; Level	Select Level Order
;
; One entry per	item in	the level select menu. Just set	the value for the item
; you want to link to the level/act number of the level	you want to load when
; the player selects that item.
; -----------------------------------------------------------------------------
Misc_9454:
		dc.w	 0					; 0
		dc.w	 1					; 1
		dc.w  $D00					; 2
		dc.w  $D01					; 3
		dc.w  $F00					; 4
		dc.w  $F01					; 5
		dc.w  $C00					; 6
		dc.w  $C01					; 7
		dc.w  $700					; 8
		dc.w  $701					; 9
		dc.w  $B00					; 10
		dc.w  $B01					; 11
		dc.w  $A00					; 12
		dc.w  $A01					; 13
		dc.w  $400					; 14
		dc.w  $401					; 15
		dc.w  $500					; 16
		dc.w $1000					; 17
		dc.w  $600					; 18
		dc.w  $E00					; 19
		dc.w $4000					; 20
		dc.w $FFFF					; 21
; ===========================================================================

loc_9480:				
		andi.w	#$3FFF,d0
		move.w	d0,(v_zone).w
		move.b	#$C,(v_gamemode).w
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.b	d0,(v_continues).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		move.b	#-7,d0
		jsrto	PlaySound,JmpTo_PlaySound
		moveq	#0,d0
		move.w	d0,(f_two_player_mode_copy).w
		move.w	d0,(f_two_player).w
		rts	
; ===========================================================================

loc_94DC:				
		move.b	(v_joypad_press_actual).w,d1
		andi.b	#3,d1
		bne.s	loc_94EC
		subq.w	#1,(v_levelselect_hold_delay).w
		bpl.s	loc_9522

loc_94EC:				
		move.w	#$B,(v_levelselect_hold_delay).w
		move.b	(v_joypad_hold_actual).w,d1
		andi.b	#3,d1
		beq.s	loc_9522
		move.w	(v_level_select_zone).w,d0
		btst	#0,d1
		beq.s	loc_950C
		subq.w	#1,d0
		bcc.s	loc_950C
		moveq	#$15,d0

loc_950C:				
					
		btst	#1,d1
		beq.s	loc_951C
		addq.w	#1,d0
		cmpi.w	#$16,d0
		bcs.s	loc_951C
		moveq	#0,d0

loc_951C:				
					
		move.w	d0,(v_level_select_zone).w
		rts	
; ===========================================================================

loc_9522:				
					
		cmpi.w	#$15,(v_level_select_zone).w
		bne.s	loc_958A
		move.w	($FFFFFF84).w,d0
		move.b	(v_joypad_press_actual).w,d1
		btst	#2,d1
		beq.s	loc_953E
		subq.b	#1,d0
		bcc.s	loc_953E
		moveq	#$7F,d0

loc_953E:				
					
		btst	#3,d1
		beq.s	loc_954E
		addq.b	#1,d0
		cmpi.w	#$80,d0	
		bcs.s	loc_954E
		moveq	#0,d0

loc_954E:				
					
		btst	#6,d1
		beq.s	loc_955C
		addi.b	#$10,d0
		andi.b	#$7F,d0

loc_955C:				
		move.w	d0,($FFFFFF84).w
		andi.w	#$30,d1
		beq.s	locret_9588
		move.w	($FFFFFF84).w,d0
		addi.w	#$80,d0	
		jsrto	PlayMusic,JmpTo_PlayMusic
		lea	(DebugCode).l,a0
		lea	(SuperSonicCode).l,a2
		lea	(f_debug_cheat).w,a1
		moveq	#1,d2
		bsr.w	loc_9746

locret_9588:				
		rts	
; ===========================================================================

loc_958A:				
		move.b	(v_joypad_press_actual).w,d1
		andi.b	#$C,d1
		beq.s	locret_95A0
		move.w	(v_level_select_zone).w,d0
		move.b	byte_95A2(pc,d0.w),d0
		move.w	d0,(v_level_select_zone).w

locret_95A0:				
		rts	
; ===========================================================================
byte_95A2:	dc.b $E						; 0
		dc.b $F						; 1
		dc.b $11					; 2
		dc.b $11					; 3
		dc.b $12					; 4
		dc.b $12					; 5
		dc.b $13					; 6
		dc.b $13					; 7
		dc.b $14					; 8
		dc.b $14					; 9
		dc.b $15					; 10
		dc.b $15					; 11
		dc.b $C						; 12
		dc.b $D						; 13
		dc.b 0						; 14
		dc.b 1						; 15
		dc.b 1						; 16
		dc.b 2						; 17
		dc.b 4						; 18
		dc.b 6						; 19
		dc.b 8						; 20
		dc.b $A						; 21
; ===========================================================================

loc_95B8:				
					
		lea	(v_128x128_tiles).l,a4
		lea	(byte_96EE).l,a5
		lea	(vdp_data_port).l,a6
		moveq	#0,d0
		move.w	(v_level_select_zone).w,d0
		lsl.w	#2,d0
		lea	(a5,d0.w),a3
		moveq	#0,d0
		move.b	(a3),d0
		mulu.w	#$50,d0
		moveq	#0,d1
		move.b	1(a3),d1
		add.w	d1,d0
		lea	(a4,d0.w),a1
		moveq	#0,d1
		move.b	(a3),d1
		lsl.w	#7,d1
		add.b	1(a3),d1
		addi.w	#-$4000,d1
		lsl.l	#2,d1
		lsr.w	#2,d1
		ori.w	#$4000,d1
		swap	d1
		move.l	d1,vdp_control_port-vdp_data_port(a6)
		moveq	#$D,d2

loc_9608:				
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a6)
		dbf	d2,loc_9608
		addq.w	#2,a3
		moveq	#0,d0
		move.b	(a3),d0
		beq.s	loc_964C
		mulu.w	#$50,d0
		moveq	#0,d1
		move.b	1(a3),d1
		add.w	d1,d0
		lea	(a4,d0.w),a1
		moveq	#0,d1
		move.b	(a3),d1
		lsl.w	#7,d1
		add.b	1(a3),d1
		addi.w	#-$4000,d1
		lsl.l	#2,d1
		lsr.w	#2,d1
		ori.w	#$4000,d1
		swap	d1
		move.l	d1,vdp_control_port-vdp_data_port(a6)
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a6)

loc_964C:				
		cmpi.w	#$15,(v_level_select_zone).w
		bne.s	locret_9658
		bsr.w	loc_965A

locret_9658:				
		rts	
; ===========================================================================

loc_965A:				
					
		move.l	#$49440003,(vdp_control_port).l
		move.w	($FFFFFF84).w,d0
		move.b	d0,d2
		lsr.b	#4,d0
		bsr.s	loc_9670
		move.b	d2,d0

loc_9670:				
		andi.w	#$F,d0
		cmpi.b	#$A,d0
		bcs.s	loc_967E
		addi.b	#4,d0

loc_967E:				
		addi.b	#$10,d0
		add.w	d3,d0
		move.w	d0,(a6)
		rts	
; ===========================================================================

loc_9688:				
					
		move.w	(v_level_select_zone).w,d0
		lea	(byte_96D8).l,a3
		lea	(a3,d0.w),a3
		lea	($FFFF08C0).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#3,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(a1,d0.w),a1
		move.l	#$4B360003,d0
		moveq	#3,d1
		moveq	#2,d2
		jsrto	TilemapToVRAM,JmpTo_TilemapToVRAM
		lea	(Pal_LevelSelectIcons).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a1
		lea	(v_pal_dry_line3).w,a2
		moveq	#7,d1

loc_96D0:				
		move.l	(a1)+,(a2)+
		dbf	d1,loc_96D0
		rts	
; ===========================================================================
byte_96D8:	dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   7					; 2
		dc.b   7					; 3
		dc.b   8					; 4
		dc.b   8					; 5
		dc.b   6					; 6
		dc.b   6					; 7
		dc.b   2					; 8
		dc.b   2					; 9
		dc.b   5					; 10
		dc.b   5					; 11
		dc.b   4					; 12
		dc.b   4					; 13
		dc.b   1					; 14
		dc.b   1					; 15
		dc.b   1					; 16
		dc.b   9					; 17
		dc.b  $A					; 18
		dc.b  $B					; 19
		dc.b  $C					; 20
		dc.b  $E					; 21
byte_96EE:	dc.b   3,  6,  3,$24,  3,  6,  4,$24,  6,  6,  6,$24,  6,  6,  7,$24 ; 0
					
		dc.b   9,  6,  9,$24,  9,  6, $A,$24, $C,  6, $C,$24, $C,  6, $D,$24 ; 16
		dc.b  $F,  6, $F,$24, $F,  6,$10,$24,$12,  6,$12,$24,$12,  6,$13,$24 ; 32
		dc.b $15,  6,$15,$24,$15,  6,$16,$24,  3,$2C,  3,$48,  3,$2C,  4,$48 ; 48
		dc.b   3,$2C,  5,$48,  6,$2C,  0,  0,  9,$2C,  0,  0, $C,$2C,  0,  0 ; 64
		dc.b  $F,$2C,  0,  0,$12,$2C,$12,$48		; 80
; ===========================================================================

loc_9746:				
					
		move.w	(v_correct_cheat_entries).w,d0
		adda.w	d0,a0
		move.w	($FFFFFF84).w,d0
		cmp.b	(a0),d0
		bne.s	loc_976A
		addq.w	#1,(v_correct_cheat_entries).w
		tst.b	1(a0)
		bne.s	loc_9770
		move.w	#$101,(a1)
		move.b	#-$4B,d0
		jsrto	PlaySound,JmpTo_PlaySound

loc_976A:				
		move.w	#0,(v_correct_cheat_entries).w

loc_9770:				
		move.w	(v_correct_cheat_entries_2).w,d0
		adda.w	d0,a2
		move.w	($FFFFFF84).w,d0
		cmp.b	(a2),d0
		bne.s	loc_97AA
		addq.w	#1,(v_correct_cheat_entries_2).w
		tst.b	1(a2)
		bne.s	locret_97B0
		tst.w	d2
		bne.s	loc_979C
		move.b	#$F,(v_continues).w
		move.b	#$3F,d0
		jsrto	PlayMusic,JmpTo_PlayMusic
		bra.s	loc_97AA
; ===========================================================================

loc_979C:				
		move.w	#7,(f_got_emerald).w
		move.b	#-$63,d0
		jsrto	PlayMusic,JmpTo_PlayMusic

loc_97AA:				
					
		move.w	#0,(v_correct_cheat_entries_2).w

locret_97B0:				
		rts	
; ===========================================================================

LevSelCode:
		; 17th September 1965, the birthdate of Sonic 2's lead programmer,
		; Yuji Naka.
		dc.b $19, $65,  9, $17,  0
		rev02even

ContinuesCode:	
		; November 24th, which was Sonic 2's release date outside of Japan.
		dc.b   1,  1,  2,  4,  0
		rev02even
	
DebugCode:	
		; 24th November 1992 (also known as "Sonic 2sday"), which was
		; Sonic 2's release date outside of Japan
		dc.b   1,  9,  9,  2,  1,  1,  2,  4,  0 
		rev02even
		
SuperSonicCode:	
		; A Hebrew Bible verse: Genesis 41:26, which makes frequent reference to the
		; number 7. 7 happens to be the number of Chaos Emeralds.
		; (The Mega Drive is known as the Genesis in North America).
		dc.b   4,  1,  2,  6,  0 
		rev02even

TextOptScr_PlayerSelect:	menutxt	"* PLAYER SELECT *"
TextOptScr_SonicAndMiles:	menutxt	"SONIC AND MILES"				
TextOptScr_SonicAndTails:	menutxt	"SONIC AND TAILS"				
TextOptScr_SonicAlone:		menutxt	"SONIC ALONE    "				
TextOptScr_MilesAlone:		menutxt	"MILES ALONE    "				
TextOptScr_TailsAlone:		menutxt	"TAILS ALONE    "				
TextOptScr_VsModeItems:		menutxt	"* VS MODE ITEMS *"
TextOptScr_AllKindsItems:	menutxt	"ALL KINDS ITEMS"				
TextOptScr_TeleportOnly:	menutxt	"TELEPORT ONLY  "					
TextOptScr_SoundTest:		menutxt	"*  SOUND TEST   *"
TextOptScr_0:				menutxt	"      00       "
	
					
		incfile	Pal_LevelSelectIcons			; byte_9880:  Pal_LevelIcons:
		incfile	Eni_LevelSelect2P			; byte_9A60: MapEng_LevSel2P:
		incfile	Eni_Options				; byte_9AB2: MapEng_Options:
		incfile	Eni_LevelSelect				; byte_9ADE: MapEng_LevSel:
		incfile	Eni_LevelSelectIcons			; byte_9C32: MapEng_LevSelIcon:

; ===========================================================================

	if RemoveJmpTos=0
JmpTo_PlaySound:							
		jmp	PlaySound
JmpTo_PlayMusic:				
		jmp	PlayMusic
JmpTo_TilemapToVRAM:				
		jmp	TilemapToVRAM
JmpTo2_Dynamic_Normal:
		jmp	Dynamic_Normal
		
		align 4
	endc

; ===========================================================================
; loc_9C7C:
EndingSequence:				
		clear_ram	ost,ost_end
		clear_ram	misc_variables,misc_variables_end		
		clear_ram	camera_ram,camera_ram_end	
		disable_ints
		disable_display
		stopZ80
		waitZ80
		
		dma_fill	0,sizeof_vram_planetable_64x32,vram_fg
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	(v_unused_ss).w
		
		startZ80
		lea	(vdp_control_port).l,a6
		move.w	#-$74FD,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$7A84,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$7FFC,(a6)
		move.w	#-$78E0,(a6)
		move.w	#-$7521,(v_vdp_hint_counter).w
		move.w	(v_vdp_hint_counter).w,(a6)
		clr.b	(f_super).w
		cmpi.b	#countof_emeralds,(v_emeralds).w
		bne.s	loc_9D64
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_9D64
		st.b	(f_super).w
		move.b	#-1,(v_super_sonic_palette).w
		move.b	#$F,(v_palette_timer).w
		move.w	#$30,(v_palette_frame).w

loc_9D64:						
		moveq	#0,d0
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_9D78
		tst.b	(f_super).w
		bne.s	loc_9D7A
		bra.w	EndSeq_LoadArt
; ===========================================================================

loc_9D78:				
		addq.w	#2,d0

loc_9D7A:				
		addq.w	#2,d0

EndSeq_LoadArt:				
		move.w	d0,(v_ending_routine).w
		bsr.w	EndSeq_LoadCharacterArt
		bsr.w	EndSeq_LoadBirdArt
		
		vdp_comm.l	move,vram_EndingFinalTornado,vram,write,(vdp_control_port).l
		lea	(Nem_EndingFinalTornado).l,a0
		jsrto	NemDec,JmpTo_NemDec
		
		vdp_comm.l	move,vram_EndingPics,vram,write,(vdp_control_port).l		
		lea	(Nem_EndingStills).l,a0
		jsrto	NemDec,JmpTo_NemDec
		
		vdp_comm.l	move,vram_EndingMiniTornado,vram,write,(vdp_control_port).l				
		lea	(Nem_EndingMiniTornado).l,a0
		jsrto	NemDec,JmpTo_NemDec
		
		vdp_comm.l	move,vram_Tornado,vram,write,(vdp_control_port).l			
		lea	(Nem_Tornado).l,a0
		jsrto	NemDec,JmpTo_NemDec
		
		vdp_comm.l	move,vram_Clouds,vram,write,(vdp_control_port).l			
		lea	(Nem_Clouds).l,a0
		jsrto	NemDec,JmpTo_NemDec
		
		move.w	#id_DEZ_act1,(v_zone).w
		enable_ints
		moveq_	mus_Ending,d0					; play ending music
		jsrto	PlayMusic,JmpTo2_PlayMusic
		move.l	#cWhite<<16|cWhite,d1			; two consecutive palette entries of white

		lea	(v_pal_dry).w,a1
		moveq	#(sizeof_pal_all/4)-1,d0

	.fillwhite:			
		move.l	d1,(a1)+		; fill entire CRAM with white
		dbf	d0,.fillwhite
		
		lea	(Pal_EndingSonic).l,a1
		lea	(v_pal_dry_next).w,a2
		moveq	#(sizeof_pal_all/4)-1,d0

	.loadpal:				
		move.l	(a1)+,(a2)+
		dbf	d0,.loadpal
		
		clr.b	(f_screen_shake).w
		moveq	#0,d0
		move.w	d0,(v_debug_active).w
		move.w	d0,(f_restart).w
		move.w	d0,(v_frame_counter).w
		move.w	d0,(v_camera_x_pos).w
		move.w	d0,(v_camera_y_pos).w
		move.w	d0,(v_camera_x_pos_copy).w
		move.w	d0,(v_camera_y_pos_copy).w
		move.w	d0,(v_bg1_x_pos).w
		move.w	#$C8,(v_bg1_y_pos).w
		move.l	d0,(v_fg_y_pos_vsram).w
		move.b	d0,(v_bg1_x_redraw_flag).w
		move.b	d0,(v_bg1_y_redraw_flag).w
		move.w	d0,(v_ending_vblank_sub).w
		move.w	d0,(f_credits_trigger).w

		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$100,d1
loc_9E6A:				
		move.l	d0,(a1)+
		dbf	d1,loc_9E6A
		
		move.w	#$7FFF,(v_palcycle_time).w
		lea	($FFFFB100).w,a1
		move.b	#id_Cutscene,ost_id(a1)
		move.b	#6,ost_primary_routine(a1)
		move.w	#$60,$3C(a1)
		move.w	#1,$30(a1)
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_9EA4
		move.w	#$10,$2E(a1)
		move.w	#$100,$3C(a1)

loc_9EA4:				
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0
		move.w	d0,(vdp_control_port).l

loc_9EBC:				
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		addq.w	#1,(v_frame_counter).w
		jsr	RandomNumber
		jsr	ExecuteObjects
		jsr	BuildSprites
		tst.b	(f_ending_palcycle).w
		beq.s	loc_9EE6
		jsrto	PaletteCycle,JmpTo_PaletteCycle

loc_9EE6:				
		bsr.w	sub_9EF4
		tst.w	(f_restart).w
		beq.w	loc_9EBC
		rts	

; ===========================================================================


sub_9EF4:				
		tst.b	($FFFFF660).w
		beq.w	locret_A0BE
		bsr.w	PaletteFadeOut
		lea	(vdp_control_port).l,a6
		move.w	#-$7FFC,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$6E00,(a6)
		move.w	#-$74FD,(a6)
		move.w	#-$7900,(a6)
		clr.b	(f_water_pal_full).w
		move.w	#-$737F,(a6)
		jsrto	ClearScreen,JmpTo_ClearScreen
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_9F38:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F38
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_9F48:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F48
		lea	($FFFFF700).w,a1
		moveq	#0,d0
		move.w	#$3F,d1

loc_9F58:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F58
		lea	(v_camera_x_pos).w,a1
		moveq	#0,d0
		move.w	#$3F,d1

loc_9F68:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F68
		clr.b	(f_screen_shake).w
		moveq	#0,d0
		move.w	d0,(f_restart).w
		move.w	d0,(v_frame_counter).w
		move.w	d0,(v_camera_x_pos).w
		move.w	d0,(v_camera_y_pos).w
		move.w	d0,(v_camera_x_pos_copy).w
		move.w	d0,(v_camera_y_pos_copy).w
		move.w	d0,(v_bg1_x_pos).w
		move.w	d0,(v_bg1_y_pos).w
		move.l	d0,(v_fg_y_pos_vsram).w
		move.b	d0,(v_bg1_x_redraw_flag).w
		move.b	d0,(v_bg1_y_redraw_flag).w
		move.w	d0,($FFFFF662).w
		move.w	d0,($FFFFF660).w
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$100,d1

loc_9FB2:				
		move.l	d0,(a1)+
		dbf	d1,loc_9FB2
		moveq	#-$62,d0
		jsrto	PlaySound,JmpTo2_PlaySound
		clr.w	(v_pal_dry_next).w
		move.w	#$EEE,($FFFFFB8C).w
		move.w	#$EE,($FFFFFBAC).w
		move.l	#$40200000,(vdp_control_port).l
		lea	(Nem_CreditsFont).l,a0
		jsrto	NemDec,JmpTo_NemDec
		clr.w	($FFFFFF4C).w

loc_9FE6:				
		jsrto	ClearScreen,JmpTo_ClearScreen
		bsr.w	sub_B262
		bsr.w	PaletteFadeIn
		move.w	#$18E,d0
		btst	#console_speed_bit,(v_console_region).w
		beq.s	loc_A002
		move.w	#$144,d0

loc_A002:				
					
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		dbf	d0,loc_A002
		bsr.w	PaletteFadeOut
		lea	(off_B2CA).l,a1
		addq.w	#1,($FFFFFF4C).w
		move.w	($FFFFFF4C).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),d0
		bpl.s	loc_9FE6
		bsr.w	PaletteFadeOut
		jsrto	ClearScreen,JmpTo_ClearScreen
		move.l	#$40000000,(vdp_control_port).l
		lea	(Nem_EndingLogo).l,a0
		jsrto	NemDec,JmpTo_NemDec
		lea	(Eni_EndGameLogo).l,a0
		lea	(v_128x128_tiles).l,a1
		move.w	#0,d0
		jsrto	EniDec,JmpTo_EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$45980003,d0
		moveq	#$F,d1
		moveq	#5,d2
		jsrto	TilemapToVRAM,JmpTo2_TilemapToVRAM
		clr.w	($FFFFFF4C).w
		bsr.w	sub_A0C0
		move.w	#$3B,d0

loc_A07A:				
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		dbf	d0,loc_A07A
		move.w	#$257,d6

loc_A08C:				
					
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		addq.w	#1,($FFFFFF4C).w
		bsr.w	sub_A0C0
		cmpi.w	#$5E,($FFFFFF4C).w
		bcs.s	loc_A08C
		move.b	(v_joypad_press_actual).w,d1
		andi.b	#-$10,d1
		bne.s	loc_A0B4
		dbf	d6,loc_A08C

loc_A0B4:				
		st.b	(f_restart).w
		move.b	#0,(v_gamemode).w

locret_A0BE:				
		rts	

; ===========================================================================


sub_A0C0:				
					
		lea	($FFFFFB02).w,a2
		move.w	($FFFFFF4C).w,d0
		cmpi.w	#$24,d0
		bcc.s	locret_A0BE
		btst	#0,d0
		bne.s	locret_A0BE
		lsr.w	#1,d0
		move.b	byte_A0EC(pc,d0.w),d0
		mulu.w	#$18,d0
		lea	Pal_EndingLogoCyc(pc,d0.w),a1
		moveq	#5,d0

loc_A0E4:				
		move.l	(a1)+,(a2)+
		dbf	d0,loc_A0E4
		rts	

; ===========================================================================
byte_A0EC:	dc.b   0					; 0
		dc.b   1					; 1
		dc.b   2					; 2
		dc.b   3					; 3
		dc.b   4					; 4
		dc.b   3					; 5
		dc.b   2					; 6
		dc.b   1					; 7
		dc.b   0					; 8
		dc.b   5					; 9
		dc.b   6					; 10
		dc.b   7					; 11
		dc.b   8					; 12
		dc.b   7					; 13
		dc.b   6					; 14
		dc.b   5					; 15
		dc.b   0					; 16
		dc.b   0					; 17


		incfile	Pal_EndingLogoCyc			; pal_A0FE:
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CA - Ending cutscene manager
; ----------------------------------------------------------------------------

Cutscene:				
		addq.w	#1,$32(a0)
		cmpi.w	#4,($FFFFF750).w
		beq.s	loc_A1FA
		cmpi.w	#2,($FFFFF750).w
		bne.s	loc_A1FA
		st.b	(f_super).w
		move.w	#$100,(v_rings).w
		move.b	#-1,(v_super_sonic_palette).w

loc_A1FA:				
					
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_A208(pc,d0.w),d1
		jmp	off_A208(pc,d1.w)
; ===========================================================================
off_A208:	
		dc.w loc_A218-off_A208				; 0 			
		dc.w loc_A240-off_A208				; 1
		dc.w loc_A24E-off_A208				; 2
		dc.w loc_A240-off_A208				; 3
		dc.w loc_A256-off_A208				; 4
		dc.w loc_A30A-off_A208				; 5
		dc.w loc_A34C-off_A208				; 6
		dc.w loc_A38E-off_A208				; 7
; ===========================================================================

loc_A218:				
		moveq	#4,d0
		move.w	#$180,d1
		btst	#console_speed_bit,(v_console_region).w
		beq.s	sub_A22A
		move.w	#$100,d1

; ===========================================================================


sub_A22A:				
					
		lea	($FFFFB0C0).w,a1
		move.b	#id_PalChanger,ost_id(a1)
		move.b	d0,$28(a1)
		addq.b	#2,ost_primary_routine(a0)
		move.w	d1,$3C(a0)
		rts	

; ===========================================================================

loc_A240:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_A248
		rts	
; ===========================================================================

loc_A248:				
		addq.b	#2,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_A24E:				
		moveq	#6,d0
		move.w	#$80,d1	
		bra.s	sub_A22A
; ===========================================================================

loc_A256:				
		move.w	$2E(a0),d0
		cmpi.w	#$10,d0
		bcc.s	loc_A2AC
		addq.w	#4,$2E(a0)
		clr.b	ost_primary_routine(a0)
		move.l	a0,-(sp)
		movea.l	off_A29C(pc,d0.w),a0
		lea	(v_128x128_tiles).l,a1
		move.w	#$328,d0
		jsrto	EniDec,JmpTo_EniDec
		disable_ints
		lea	(v_128x128_tiles).l,a1
		move.l	#$441C0003,d0
		moveq	#$B,d1
		moveq	#8,d2
		jsrto	TilemapToVRAM,JmpTo2_TilemapToVRAM
		enable_ints
		movea.l	(sp)+,a0
		rts	
; ===========================================================================
off_A29C:	
		dc.l Eni_Ending1
		dc.l Eni_Ending2
		dc.l Eni_Ending3
		dc.l Eni_Ending4
; ===========================================================================

loc_A2AC:				
		move.w	#2,($FFFFF662).w
		st.b	(f_lock_controls).w
		st.b	(f_ending_palcycle).w
		lea	($FFFFB000).w,a1
		move.w	($FFFFF750).w,d0
		move.w	off_A2DA(pc,d0.w),d0
		jsr	off_A2DA(pc,d0.w)
		move.w	#$80,d1	
		bsr.w	sub_A22A
		move.w	#$40,$3C(a0)
		rts	
; ===========================================================================
off_A2DA:	
		dc.w loc_A2E0-off_A2DA				; 0 			
		dc.w loc_A2EE-off_A2DA				; 1
		dc.w loc_A2F2-off_A2DA				; 2
; ===========================================================================

loc_A2E0:				
		moveq	#8,d0

loc_A2E2:				
		move.b	#id_Sonic,ost_id(a1)
		move.b	#-$7F,$2A(a1)
		rts	
; ===========================================================================

loc_A2EE:				
		moveq	#$C,d0
		bra.s	loc_A2E2
; ===========================================================================

loc_A2F2:				
		moveq	#$E,d0
		move.b	#id_Tails,ost_id(a1)
		move.b	#-$7F,$2A(a1)
		move.b	#5,($FFFFB080).w
		move.w	a1,($FFFFB0BE).w
		rts	
; ===========================================================================

loc_A30A:				
		subq.w	#1,$3C(a0)
		bpl.s	loc_A320
		moveq	#$A,d0
		move.w	#$80,d1	
		bsr.w	sub_A22A
		move.w	#$C0,$3C(a0)

loc_A320:				
		lea	($FFFFB000).w,a1
		move.b	#$F,$1C(a1)
		move.w	#$A0,ost_x_pos(a1)
		move.w	#$50,ost_y_pos(a1)
		cmpi.w	#2,($FFFFF750).w
		bne.s	locret_A34A
		move.b	#0,$1C(a1)
		move.w	#$1000,ost_inertia(a1)

locret_A34A:				
		rts	
; ===========================================================================

loc_A34C:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_A366
		moveq	#0,d4
		moveq	#0,d5
		move.w	#0,(v_camera_x_diff).w
		move.w	#$100,(v_camera_y_diff).w
		bra.w	Deform_DEZ
; ===========================================================================

loc_A366:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$100,$3C(a0)
		cmpi.w	#4,($FFFFF750).w
		bne.s	locret_A38C
		move.w	#$880,$3C(a0)
		btst	#console_speed_bit,(v_console_region).w
		beq.s	locret_A38C
		move.w	#$660,$3C(a0)

locret_A38C:				
					
		rts	
; ===========================================================================

loc_A38E:				
		btst	#console_speed_bit,(v_console_region).w
		beq.s	loc_A3A2
		cmpi.w	#$E40,$32(a0)
		beq.s	loc_A3BE
		bra.w	loc_A3AA
; ===========================================================================

loc_A3A2:				
		cmpi.w	#$1140,$32(a0)
		beq.s	loc_A3BE

loc_A3AA:				
		subq.w	#1,$3C(a0)
		bne.s	loc_A3BA
		lea	(dword_AD62).l,a2
		jsrto	LoadChild,JmpTo_LoadChild

loc_A3BA:				
		bra.w	loc_AB9C
; ===========================================================================

loc_A3BE:				
					
		addq.b	#2,ost_primary_routine(a0)
		st.b	($FFFFF660).w
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CC - Trigger for Tornado rescue and birds in ending cutscene
; ----------------------------------------------------------------------------

EndingTrigger:				
		jsrto	loc_3AF58,JmpTo_loc_3AF58
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	loc_A3DA(pc,d0.w),d1
		jmp	loc_A3DA(pc,d1.w)
; ===========================================================================

loc_A3DA:
		ori.b	#$7C,d4
		lea	(off_3AFC8).l,a1
		jsrto	LoadSubtypeData_Part3,JmpTo_LoadSubtypeData_Part3
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_A3FC
		move.b	#4,$1A(a0)
		move.b	#1,$1C(a0)

loc_A3FC:				
		move.w	#-$10,ost_x_pos(a0)
		move.w	#$C0,ost_y_pos(a0)
		move.w	#$100,ost_x_vel(a0)
		move.w	#-$80,ost_y_vel(a0)
		move.b	#$14,$35(a0)
		move.b	#3,$18(a0)
		move.w	#4,($FFFFF662).w
		move.l	a0,-(sp)
		lea	(Eni_EndingTailsPlane).l,a0
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_A43C
		lea	(Eni_EndingSonicPlane).l,a0

loc_A43C:				
		lea	(v_128x128_tiles).l,a1
		move.w	#-$7EAA,d0
		jsrto	EniDec,JmpTo_EniDec
		movea.l	(sp)+,a0
		move.w	#$C00,(v_pal_dry_line3).w
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_A468(pc,d0.w),d1
		jsr	off_A468(pc,d1.w)
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================
off_A468:	
		dc.w loc_A474-off_A468				; 0 		
		dc.w loc_A4B6-off_A468				; 1
		dc.w loc_A5A6-off_A468				; 2
		dc.w loc_A6C6-off_A468				; 3
		dc.w loc_A7DE-off_A468				; 4
		dc.w loc_A83E-off_A468				; 5
; ===========================================================================

loc_A474:				
		cmpi.w	#$A0,ost_x_pos(a0)
		beq.s	loc_A48A
		jsrto	SpeedToPos,JmpTo2_SpeedToPos

loc_A480:				
					
		lea	(off_3AFDC).l,a1
		jmpto	AnimateSprite,JmpTo_AnimateSprite
; ===========================================================================

loc_A48A:				
		addq.b	#2,$25(a0)
		move.w	#$480,$3C(a0)
		btst	#console_speed_bit,(v_console_region).w
		beq.s	loc_A4A2
		move.w	#$3D0,$3C(a0)

loc_A4A2:				
		move.w	#$40,$32(a0)
		st.b	($FFFFB134).w
		clr.w	ost_x_vel(a0)
		clr.w	ost_y_vel(a0)
		bra.s	loc_A480
; ===========================================================================

loc_A4B6:				
		bsr.w	sub_ABBA
		bsr.w	sub_A524
		subq.w	#1,$3C(a0)
		bmi.s	loc_A4C6
		bra.s	loc_A480
; ===========================================================================

loc_A4C6:				
		addq.b	#2,$25(a0)
		move.w	#2,$3C(a0)
		clr.w	$32(a0)
		clr.b	$1A(a0)
		cmpi.w	#2,($FFFFF750).w
		beq.s	loc_A4F4
		move.b	#7,$1A(a0)
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_A4F4
		move.b	#$18,$1A(a0)

loc_A4F4:				
					
		clr.b	$1C(a0)
		clr.b	$1B(a0)
		clr.b	$1E(a0)
		move.l	#Map_TornadoHelices,ost_mappings(a0)
		move.w	#0,ost_tile(a0)				; level art
		jsr	Adjust2PArtPointer
		subi.w	#$14,ost_x_pos(a0)
		addi.w	#$14,ost_y_pos(a0)
		bra.w	sub_A58C

; ===========================================================================


sub_A524:				
		lea	($FFFFB000).w,a1
		move.w	($FFFFF750).w,d0
		move.w	off_A534(pc,d0.w),d0
		jmp	off_A534(pc,d0.w)

; ===========================================================================
off_A534:	index offset(*)
		ptr	loc_A53A				; 0				
		ptr loc_A55C					; 2
		ptr loc_A582					; 4
; ===========================================================================

loc_A53A:				
		move.w	ost_y_pos(a0),d0
		subi.w	#$1C,d0

loc_A542:				
		move.w	d0,ost_y_pos(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.l	#$1000505,$1A(a1)
		move.w	#$100,$1E(a1)
		rts	
; ===========================================================================

loc_A55C:				
		tst.w	$32(a0)
		beq.s	loc_A574
		subq.w	#1,$32(a0)
		addi.l	#$8000,ost_x_pos(a1)
		addq.w	#1,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_A574:				
		move.w	#$C0,ost_x_pos(a1)
		move.w	#$90,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_A582:				
		move.w	ost_y_pos(a0),d0
		subi.w	#$18,d0
		bra.s	loc_A542

; ===========================================================================


sub_A58C:				
					
		tst.b	(f_super).w
		bne.w	locret_A38C

loc_A594:				
					
		lea	(v_ost_player1).w,a1
		move.w	#$200,ost_x_pos(a1)
		move.w	#0,ost_y_pos(a1)
		rts	

; ===========================================================================

loc_A5A6:				
		bsr.s	sub_A58C
		subq.w	#1,$3C(a0)
		bpl.s	locret_A5E6
		move.w	#2,$3C(a0)
		move.w	$32(a0),d0
		cmpi.w	#$1C,d0
		bcc.s	loc_A5E8
		addq.w	#1,$32(a0)
		move.w	($FFFFF750).w,d1
		move.w	off_A5FC(pc,d1.w),d1
		lea	off_A5FC(pc,d1.w),a1
		move.b	(a1,d0.w),$1A(a0)
		add.w	d0,d0
		add.w	d0,d0
		move.l	word_A656(pc,d0.w),d1
		move.w	d1,ost_y_pos(a0)
		swap	d1
		move.w	d1,ost_x_pos(a0)

locret_A5E6:				
		rts	
; ===========================================================================

loc_A5E8:				
		addq.b	#2,$25(a0)
		move.w	#$60,$3C(a0)
		clr.b	$31(a0)
		clr.w	$32(a0)
		rts	
; ===========================================================================
off_A5FC:	index offset(*)
		ptr byte_A602					; 0 		
		ptr byte_A61E					; 2
		ptr byte_A63A					; 4
		
byte_A602:	
		dc.b   7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9, $A, $A ; 0			
		dc.b  $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B ; 16
byte_A61E:	
		dc.b   0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3 ; 0			
		dc.b   3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4 ; 16
byte_A63A:	
		dc.b $18,$18,$18,$18,$19,$19,$19,$19,$19,$19,$19,  9,  9,  9, $A, $A ; 0			
		dc.b  $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B ; 16
		
word_A656:	
		dc.w   $A0,  $70,  $B0,	 $70,  $B6,  $71,  $BC,	 $72 ; 0
		dc.w   $C4,  $74,  $C8,	 $75,  $CA,  $76,  $CC,	 $77 ; 8
		dc.w   $CE,  $78,  $D0,	 $79,  $D2,  $7A,  $D4,	 $7B ; 16
		dc.w   $D6,  $7C,  $D9,	 $7E,  $DC,  $81,  $DE,	 $84 ; 24
		dc.w   $E1,  $87,  $E4,	 $8B,  $E7,  $8F,  $EC,	 $94 ; 32
		dc.w   $F0,  $99,  $F5,	 $9D,  $F9,  $A4, $100,	 $AC ; 40
		dc.w  $108,  $B8, $112,	 $C4, $11F,  $D3, $12C,	 $FA ; 48
; ===========================================================================

loc_A6C6:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_A720
		tst.b	(f_super).w
		beq.s	locret_A70A
		subq.b	#1,$31(a0)
		bpl.s	locret_A70A
		addq.b	#3,$31(a0)
		move.w	$32(a0),d0
		addq.w	#4,$32(a0)
		cmpi.w	#$78,d0
		bcc.s	locret_A70A
		cmpi.w	#$C,d0
		bcs.s	loc_A70C
		bsr.w	loc_A594
		move.l	word_A766(pc,d0.w),d1
		move.w	d1,ost_y_pos(a0)
		swap	d1
		move.w	d1,ost_x_pos(a0)
		lsr.w	#2,d0
		move.b	byte_A748(pc,d0.w),$1A(a0)

locret_A70A:				
					
		rts	
; ===========================================================================

loc_A70C:				
		move.l	word_A766(pc,d0.w),d0
		lea	($FFFFB000).w,a1
		move.w	d0,ost_y_pos(a1)
		swap	d0
		move.w	d0,ost_x_pos(a1)
		rts	
; ===========================================================================

loc_A720:				
		addq.b	#2,$25(a0)
		clr.w	$3C(a0)
		clr.w	$32(a0)
		lea	(dword_AD6E).l,a2
		jsrto	LoadChild,JmpTo_LoadChild
		tst.b	(f_super).w
		bne.w	locret_A38C
		lea	(dword_AD6A).l,a2
		jmpto	LoadChild,JmpTo_LoadChild
; ===========================================================================
byte_A748:	
		dc.b $12,$12,$12,$12,$12,$12,$12,$13,$13,$13,$13,$13,$13,$14,$14,$14 ; 0
		dc.b $14,$15,$15,$15,$16,$16,$16,$16,$16,$16,$16,$16,$16,  0 ; 16

word_A766:	
		dc.w   $C0					; 0
		dc.w   $90					; 1
		dc.w   $B0					; 2
		dc.w   $91					; 3
		dc.w   $A8					; 4
		dc.w   $92					; 5
		dc.w   $9B					; 6
		dc.w   $96					; 7
		dc.w   $99					; 8
		dc.w   $98					; 9
		dc.w   $98					; 10
		dc.w   $99					; 11
		dc.w   $99					; 12
		dc.w   $9A					; 13
		dc.w   $9B					; 14
		dc.w   $9C					; 15
		dc.w   $9F					; 16
		dc.w   $9E					; 17
		dc.w   $A4					; 18
		dc.w   $A0					; 19
		dc.w   $AC					; 20
		dc.w   $A2					; 21
		dc.w   $B7					; 22
		dc.w   $A5					; 23
		dc.w   $C4					; 24
		dc.w   $A8					; 25
		dc.w   $D3					; 26
		dc.w   $AB					; 27
		dc.w   $DE					; 28
		dc.w   $AE					; 29
		dc.w   $E8					; 30
		dc.w   $B0					; 31
		dc.w   $EF					; 32
		dc.w   $B2					; 33
		dc.w   $F4					; 34
		dc.w   $B5					; 35
		dc.w   $F9					; 36
		dc.w   $B8					; 37
		dc.w   $FC					; 38
		dc.w   $BB					; 39
		dc.w   $FE					; 40
		dc.w   $BE					; 41
		dc.w   $FF					; 42
		dc.w   $C0					; 43
		dc.w  $100					; 44
		dc.w   $C2					; 45
		dc.w  $101					; 46
		dc.w   $C5					; 47
		dc.w  $102					; 48
		dc.w   $C8					; 49
		dc.w  $102					; 50
		dc.w   $CC					; 51
		dc.w  $101					; 52
		dc.w   $D1					; 53
		dc.w   $FD					; 54
		dc.w   $D7					; 55
		dc.w   $F9					; 56
		dc.w   $DE					; 57
		dc.w   $F9					; 58
		dc.w  $118					; 59
; ===========================================================================

loc_A7DE:				
		bsr.w	loc_A594
		subq.w	#1,$3C(a0)
		bpl.s	locret_A80C
		move.w	#2,$3C(a0)
		move.w	$32(a0),d0
		cmpi.w	#$1C,d0
		bcc.s	loc_A80E
		addq.w	#4,$32(a0)
		lea	word_A822(pc,d0.w),a1
		move.w	(a1)+,d0
		add.w	d0,(v_hscroll_buffer).w
		move.w	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w

locret_A80C:				
		rts	
; ===========================================================================

loc_A80E:				
		addq.b	#2,$25(a0)
		bset	#3,$22(a0)
		clr.b	$31(a0)
		clr.w	$32(a0)
		rts	
; ===========================================================================
word_A822:	dc.w $FFC6					; 0
		dc.w   $88					; 1
		dc.w $FFF4					; 2
		dc.w   $22					; 3
		dc.w $FFF8					; 4
		dc.w   $10					; 5
		dc.w $FFFC					; 6
		dc.w	 8					; 7
		dc.w $FFFE					; 8
		dc.w	 4					; 9
		dc.w $FFFF					; 10
		dc.w	 2					; 11
		dc.w $FFFF					; 12
		dc.w	 2					; 13
; ===========================================================================

loc_A83E:				
		tst.b	(f_super).w
		beq.w	locret_A38C
		move.b	#$17,$1A(a0)
		subq.b	#1,$31(a0)
		bpl.s	locret_A872
		addq.b	#3,$31(a0)
		move.w	$32(a0),d0
		cmpi.w	#$20,d0
		bcc.s	locret_A872
		addq.w	#4,$32(a0)
		move.l	word_A874(pc,d0.w),d1
		move.w	d1,ost_y_pos(a0)
		swap	d1
		move.w	d1,ost_x_pos(a0)

locret_A872:				
					
		rts	
; ===========================================================================
word_A874:	dc.w   $60					; 0
		dc.w   $88					; 1
		dc.w   $50					; 2
		dc.w   $68					; 3
		dc.w   $44					; 4
		dc.w   $46					; 5
		dc.w   $3C					; 6
		dc.w   $36					; 7
		dc.w   $36					; 8
		dc.w   $2A					; 9
		dc.w   $33					; 10
		dc.w   $24					; 11
		dc.w   $31					; 12
		dc.w   $20					; 13
		dc.w   $30					; 14
		dc.w   $1E					; 15
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CE - Sonic or Tails jumping off Tornado in ending cutscene?
; ----------------------------------------------------------------------------

EndingSonicTails:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_A8A2(pc,d0.w),d1
		jmp	off_A8A2(pc,d1.w)
; ===========================================================================
off_A8A2:	
		dc.w loc_A8AA-off_A8A2				; 0 			
		dc.w loc_A902-off_A8A2				; 1
		dc.w loc_A936-off_A8A2				; 2
		dc.w loc_A926-off_A8A2				; 3
; ===========================================================================

loc_A8AA:				
		lea	(off_3B322).l,a1
		jsrto	LoadSubtypeData_Part3,JmpTo_LoadSubtypeData_Part3
		move.l	#Map_TornadoHelices,ost_mappings(a0)
		move.w	#0+tile_hi,ost_tile(a0)			; level art
		move.b	#1,$18(a0)
		jsr	Adjust2PArtPointer
		move.b	#$C,$1A(a0)
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_A8E8
		move.b	#$F,$1A(a0)
		move.w	#0+tile_pal2+tile_hi,ost_tile(a0)

loc_A8E8:				
		move.w	#$E8,d0	
		move.w	d0,ost_x_pos(a0)
		move.w	d0,$30(a0)
		move.w	#$118,d0
		move.w	d0,ost_y_pos(a0)
		move.w	d0,$32(a0)
		rts	
; ===========================================================================

loc_A902:				
		movea.w	$2C(a0),a1
		btst	#3,$22(a1)
		bne.s	loc_A92A

loc_A90E:				
		move.w	$30(a0),d0
		add.w	(v_hscroll_buffer).w,d0
		move.w	d0,ost_x_pos(a0)
		move.w	$32(a0),d0
		sub.w	(v_fg_y_pos_vsram).w,d0
		move.w	d0,ost_y_pos(a0)

loc_A926:				
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================

loc_A92A:				
		addq.b	#2,ost_primary_routine(a0)
		clr.w	$3C(a0)
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================

loc_A936:				
		subq.w	#1,$3C(a0)
		bpl.s	loc_A974
		move.w	#4,$3C(a0)
		move.w	$34(a0),d0
		cmpi.w	#4,d0
		bcc.s	loc_A978
		addq.w	#2,$34(a0)
		lea	byte_A980(pc,d0.w),a1
		cmpi.w	#2,($FFFFF750).w
		bne.s	loc_A960
		lea	byte_A984(pc,d0.w),a1

loc_A960:				
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,ost_x_pos(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,ost_y_pos(a0)
		addq.b	#1,$1A(a0)

loc_A974:				
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================

loc_A978:				
		addq.b	#2,ost_primary_routine(a0)
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================
byte_A980:	dc.b $F8					; 0
		dc.b   0					; 1
		dc.b $BC					; 2
		dc.b $C8					; 3
byte_A984:	dc.b $F8					; 0
		dc.b   0					; 1
		dc.b $B0					; 2
		dc.b $C0					; 3
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CF - Tornado's propeller in ending cutscene?
; ----------------------------------------------------------------------------

TornadoHelicies:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_A996(pc,d0.w),d1
		jmp	off_A996(pc,d1.w)
; ===========================================================================
off_A996:	dc.w loc_A99A-off_A996				; 0 
					
		dc.w loc_A9E4-off_A996				; 1
; ===========================================================================

loc_A99A:				
		lea	(off_3B322).l,a1
		jsrto	LoadSubtypeData_Part3,JmpTo_LoadSubtypeData_Part3
		move.l	#Map_TornadoHelices,ost_mappings(a0)
		move.w	#tile_hi,ost_tile(a0)
		move.b	#3,$18(a0)
		jsr	Adjust2PArtPointer
		move.b	#5,$1A(a0)
		move.b	#2,$1C(a0)
		move.w	#$10F,d0
		move.w	d0,ost_x_pos(a0)
		move.w	d0,$30(a0)
		move.w	#$15E,d0
		move.w	d0,ost_y_pos(a0)
		move.w	d0,$32(a0)
		rts	
; ===========================================================================

loc_A9E4:				
		lea	(off_AD82).l,a1
		jsrto	AnimateSprite,JmpTo_AnimateSprite
		bra.w	loc_A90E
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CB - Clouds in ending cutscene
; ----------------------------------------------------------------------------

EndingClouds:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_AA00(pc,d0.w),d1
		jmp	off_AA00(pc,d1.w)
; ===========================================================================
off_AA00:	dc.w loc_AA06-off_AA00				; 0 
					
		dc.w loc_AA76-off_AA00				; 1
		dc.w loc_AA8A-off_AA00				; 2
; ===========================================================================

loc_AA06:				
		lea	(off_3B322).l,a1
		jsrto	LoadSubtypeData_Part3,JmpTo_LoadSubtypeData_Part3
		move.w	ost_tile(a0),d0
		andi.w	#$1FFF,d0
		ori.w	#$6000,d0
		move.w	d0,ost_tile(a0)
		move.b	#$30,$19(a0)
		move.l	(v_random).w,d0
		ror.l	#1,d0
		move.l	d0,(v_random).w
		move.w	d0,d1
		andi.w	#3,d0
		move.b	byte_AA6A(pc,d0.w),$1A(a0)
		add.w	d0,d0
		move.w	word_AA6E(pc,d0.w),ost_y_vel(a0)
		tst.b	($FFFFB134).w
		beq.s	loc_AA5A
		andi.w	#$FF,d1
		move.w	d1,ost_y_pos(a0)
		move.w	#$150,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_AA5A:				
		andi.w	#$1FF,d1
		move.w	d1,ost_x_pos(a0)
		move.w	#$100,ost_y_pos(a0)
		rts	
; ===========================================================================
byte_AA6A:	dc.b   0					; 0
		dc.b   1					; 1
		dc.b   2					; 2
		dc.b   0					; 3
word_AA6E:	dc.w $FD00					; 0
		dc.w $FE00					; 1
		dc.w $FF00					; 2
		dc.w $FD00					; 3
; ===========================================================================

loc_AA76:				
		tst.b	($FFFFB134).w
		beq.s	loc_AA8A
		addq.b	#2,ost_primary_routine(a0)
		move.w	ost_y_vel(a0),ost_x_vel(a0)
		clr.w	ost_y_vel(a0)

loc_AA8A:				
					
		jsrto	SpeedToPos,JmpTo2_SpeedToPos
		tst.b	($FFFFB134).w
		beq.s	loc_AAA2
		cmpi.w	#-$20,ost_x_pos(a0)
		blt.w	JmpTo3_DeleteObject
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================

loc_AAA2:				
		tst.w	ost_y_pos(a0)
		bmi.w	JmpTo3_DeleteObject
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object CD - Birds in ending cutscene
; ----------------------------------------------------------------------------

EndingFlickies:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_AABC(pc,d0.w),d1
		jmp	off_AABC(pc,d1.w)
; ===========================================================================
off_AABC:	
		dc.w loc_AAC0-off_AABC				; 0 		
		dc.w loc_AB0E-off_AABC				; 1
; ===========================================================================

loc_AAC0:				
		lea	(off_AD72).l,a1
		jsrto	LoadSubtypeData_Part3,JmpTo_LoadSubtypeData_Part3
		move.l	(v_random).w,d0
		ror.l	#3,d0
		move.l	d0,(v_random).w
		move.l	d0,d1
		andi.w	#$7F,d0
		move.w	#-$A0,d2
		add.w	d0,d2
		move.w	d2,ost_x_pos(a0)
		ror.l	#3,d1
		andi.w	#$FF,d1
		moveq	#8,d2
		add.w	d1,d2
		move.w	d2,ost_y_pos(a0)
		move.w	#$100,ost_x_vel(a0)
		moveq	#$20,d0
		cmpi.w	#$20,d1
		bcs.s	loc_AB02
		neg.w	d0

loc_AB02:				
		move.w	d0,ost_y_vel(a0)
		move.w	#$C0,$3C(a0)
		rts	
; ===========================================================================

loc_AB0E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_AB2E(pc,d0.w),d1
		jsr	off_AB2E(pc,d1.w)
		jsrto	SpeedToPos,JmpTo2_SpeedToPos
		lea	(byte_AD7C).l,a1
		jsrto	AnimateSprite,JmpTo_AnimateSprite
		jmpto	DisplaySprite,JmpTo5_DisplaySprite
; ===========================================================================
off_AB2E:	
		dc.w loc_AB34-off_AB2E				; 0 			
		dc.w loc_AB5C-off_AB2E				; 1
		dc.w loc_AB8E-off_AB2E				; 2
; ===========================================================================

loc_AB34:				
		subq.w	#1,$3C(a0)
		bpl.s	locret_AB5A
		addq.b	#2,$25(a0)
		move.w	ost_y_vel(a0),$2E(a0)
		clr.w	ost_x_vel(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.w	#$80,ost_y_vel(a0)
		move.w	#$180,$3C(a0)

locret_AB5A:				
		rts	
; ===========================================================================

loc_AB5C:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_AB76
		move.w	ost_y_pos(a0),d0
		moveq	#-4,d1
		cmp.w	$32(a0),d0
		bcc.s	loc_AB70
		neg.w	d1

loc_AB70:				
		add.w	d1,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_AB76:				
		addq.b	#2,$25(a0)
		move.w	#-$100,ost_x_vel(a0)
		move.w	$2E(a0),ost_y_vel(a0)
		move.w	#$C0,$3C(a0)
		rts	
; ===========================================================================

loc_AB8E:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_AB96
		rts	
; ===========================================================================

loc_AB96:				
		addq.w	#4,sp
	
	if RemoveJmpTos
JmpTo3_DeleteObject:	
	endc		
		jmpto	DeleteObject,JmpTo3_DeleteObject
; ===========================================================================

loc_AB9C:				
		subq.w	#1,$30(a0)
		bpl.s	locret_ABB8
		move.l	(v_random).w,d0
		andi.w	#$1F,d0
		move.w	d0,$30(a0)
		lea	(dword_AD5E).l,a2
		jsrto	LoadChild,JmpTo_LoadChild

locret_ABB8:				
		rts	

; ===========================================================================


sub_ABBA:				
		subq.w	#1,$30(a0)
		bpl.s	locret_ABE0
		tst.b	$35(a0)
		beq.s	locret_ABE0
		subq.b	#1,$35(a0)
		move.l	(v_random).w,d0
		andi.w	#$F,d0
		move.w	d0,$30(a0)
		lea	(dword_AD66).l,a2
		jsrto	LoadChild,JmpTo_LoadChild

locret_ABE0:				
		rts	

; ===========================================================================
; EndSeq_LoadCharacterArt could be optimized down to this:

;EndSeq_LoadCharacterArt:
;		vdp_comm.l	move,vram_EndingCharacter,vram,write,(vdp_control_port).l				
;		move.w	(v_ending_routine).w,d0
;		add.w	d0,d0
;		movea.l	EndSeq_LoadCharacterArt_Ptrs(pc,d0.w),a0
;		jmpto	NemDec,JmpTo_NemDec
		
		
;EndSeq_LoadCharacterArt_Ptrs:
;		dc.l Nem_EndingSonic			; 0
;		dc.l Nem_EndingSuperSonic		; 4
;		dc.l Nem_EndingTails			; 8


EndSeq_LoadCharacterArt:				
		move.w	(v_ending_routine).w,d0
		move.w	EndSeq_LoadCharacterArt_Index(pc,d0.w),d0
		jmp	EndSeq_LoadCharacterArt_Index(pc,d0.w)

; ===========================================================================
EndSeq_LoadCharacterArt_Index:	index offset(*)
		ptr EndSeq_LoadCharacterArt_Sonic			; 0 		
		ptr EndSeq_LoadCharacterArt_SuperSonic		; 2
		ptr EndSeq_LoadCharacterArt_Tails			; 4
; ===========================================================================

EndSeq_LoadCharacterArt_Sonic:				
		vdp_comm.l	move,vram_EndingCharacter,vram,write,(vdp_control_port).l
		lea	(Nem_EndingSonic).l,a0
		jmpto	NemDec,JmpTo_NemDec
; ===========================================================================

EndSeq_LoadCharacterArt_SuperSonic:				
		vdp_comm.l	move,vram_EndingCharacter,vram,write,(vdp_control_port).l
		lea	(Nem_EndingSuperSonic).l,a0
		jmpto	NemDec,JmpTo_NemDec
; ===========================================================================

EndSeq_LoadCharacterArt_Tails:				
		vdp_comm.l	move,vram_EndingCharacter,vram,write,(vdp_control_port).l
		lea	(Nem_EndingTails).l,a0
		jmpto	NemDec,JmpTo_NemDec

; ===========================================================================


EndSeq_LoadBirdArt:				
		move.w	(v_ending_routine).w,d0
		move.w	EndSeq_LoadBirdArt_Index(pc,d0.w),d0
		jmp	EndSeq_LoadBirdArt_Index(pc,d0.w)

; ===========================================================================
EndSeq_LoadBirdArt_Index:	index offset(*)
		ptr	EndSeq_LoadBirdArt_Flicky		; 0 		
		ptr EndSeq_LoadBirdArt_Eagle		; 2
		ptr	EndSeq_LoadBirdArt_Chicken		; 4
; ===========================================================================

EndSeq_LoadBirdArt_Flicky:				
		vdp_comm.l	move,vram_animal_2,vram,write,(vdp_control_port).l
		lea	(Nem_Flicky).l,a0
		jmpto	NemDec,JmpTo_NemDec
; ===========================================================================

EndSeq_LoadBirdArt_Eagle:				
		vdp_comm.l	move,vram_animal_2,vram,write,(vdp_control_port).l
		lea	(Nem_Eagle).l,a0
		jmpto	NemDec,JmpTo_NemDec
; ===========================================================================

EndSeq_LoadBirdArt_Chicken:				
		vdp_comm.l	move,vram_animal_2,vram,write,(vdp_control_port).l
		lea	(Nem_Chicken).l,a0
		jmpto	NemDec,JmpTo_NemDec
; ===========================================================================

		incfile	Pal_EndingSonic				; Pal_AC7E:
		incfile	Pal_EndingSonicFar			; Pal_AC9E:	
		incfile	Pal_EndingBG				; Pal_ACDE:
		incfile	Pal_EndingStills			; Pal_AD1E:
		incfile	Pal_EndingSuperSonic			; Pal_AD3E
					
dword_AD5E:
		childobjdata $3E,id_EndingClouds,0
				
dword_AD62:	
		childobjdata $3E,id_EndingTrigger,0
				
dword_AD66:	
		childobjdata $3E,id_EndingFlickies,0
			
dword_AD6A:	
		childobjdata $3E,id_EndingSonicTails,0	
			
dword_AD6E:	
		childobjdata $3E,id_TornadoHelicies,0	
		
off_AD72:	
		subtypedata Map_Animal1,tile_Nem_Animal_2,4,2,8,0
		
byte_AD7C:	index offset(*)
		ptr byte_AD7E
		
byte_AD7E:
		dc.b   5
		dc.b   0
		dc.b   1
		dc.b afEnd
		even

off_AD82:	index offset(*)	
		ptr byte_AD88			; 0 		
		ptr byte_AD8E			; 2
		ptr byte_AD9E			; 4
		
byte_AD88:	
		dc.b 3
		dc.b 0
		dc.b 0
		dc.b 1
		dc.b af2ndRoutine
		even
		
byte_AD8E:	
		dc.b 3
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 1
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 2
		dc.b 3
		dc.b 3
		dc.b 4
		dc.b af2ndRoutine
		even
					
byte_AD9E:	
		dc.b 1
		dc.b 5
		dc.b 6
		dc.b afEnd
		even 
		

		include "mappings/sprite/Tornado Helices.asm"
		incfile	Eni_EndGameLogo

; ===========================================================================


sub_B262:				
		lea	off_B2CA(pc),a1
		move.w	($FFFFFF4C).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),d0
		movea.l	d0,a1

DisplayText:				
		disable_ints
		lea	(vdp_data_port).l,a6

loc_B27C:				
		move.l	(a1)+,d0
		bmi.s	loc_B298
		movea.l	d0,a2
		move.w	(a1)+,d0
		bsr.s	ConvertVRAMAddToWriteCmd
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		move.b	(a2)+,d0
		lsl.w	#8,d0

loc_B28E:				
		move.b	(a2)+,d0
		bmi.s	loc_B296
		move.w	d0,(a6)
		bra.s	loc_B28E
; ===========================================================================

loc_B296:				
		bra.s	loc_B27C
; ===========================================================================

loc_B298:				
		enable_ints
		rts	


; ===========================================================================


ConvertVRAMAddToWriteCmd:				
		andi.l	#$FFFF,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		vdp_comm.w	oxi,0,vram,write,d0,>>16	; oxi = AXM68K ori
		swap	d0
		rts	

; ===========================================================================
CreditTextPointers:	
		dc.l byte_BD1A		
		dc.w $C49E
		dc.l byte_BCEE
		dc.w $C622
		dc.l byte_BCF6
		dc.w $C786
		dc.l byte_BCE9
		dc.w $C924
		dc.w $FFFF

off_B2CA:	
		dc.l off_B322					; 0 				
		dc.l off_B336					; 1
		dc.l off_B34A					; 2
		dc.l off_B358					; 3
		dc.l off_B366					; 4
		dc.l off_B374					; 5
		dc.l off_B388					; 6
		dc.l off_B3A8					; 7
		dc.l off_B3C2					; 8
		dc.l off_B3DC					; 9
		dc.l off_B3F0					; 10
		dc.l off_B41C					; 11
		dc.l off_B436					; 12
		dc.l off_B450					; 13
		dc.l off_B45E					; 14
		dc.l off_B490					; 15
		dc.l off_B4B0					; 16
		dc.l off_B4C4					; 17
		dc.l off_B4F0					; 18
		dc.l off_B51C					; 19
		dc.l off_B548					; 20
		dc.l $FFFFFFFF					; 21
off_B322:	dc.l byte_BC46		
		dc.w $C59C
		dc.l byte_BC51
		dc.w $C5B0
		dc.l byte_BC55
		dc.w $C784
		dc.w $FFFF
off_B336:	dc.l byte_B55C					; 0 
		dc.w $C586
		dc.l byte_B56F
		dc.w $C5AC
		dc.l byte_B581
		dc.w $C78C
		dc.w $FFFF
off_B34A:	dc.l byte_B56F					; 0 
		dc.w $C598
		dc.l byte_B59F
		dc.w $C78E
		dc.w $FFFF
off_B358:	dc.l byte_B5BC					; 0 
		dc.w $C598
		dc.l byte_B5CD
		dc.w $C78C
		dc.w $FFFF
off_B366:	dc.l byte_B5EB					; 0 
		dc.w $C58A
		dc.l byte_B60C
		dc.w $C78E
		dc.w $FFFF
off_B374:	dc.l byte_B628					; 0 
		dc.w $C510
		dc.l byte_B642
		dc.w $C708
		dc.l byte_B665
		dc.w $C814
		dc.w $FFFF
off_B388:	dc.l byte_B67B					; 0 
		dc.w $C408
		dc.l byte_B69C
		dc.w $C522
		dc.l byte_B6A4
		dc.w $C612
		dc.l byte_B6BC
		dc.w $C808
		dc.l byte_B6DE
		dc.w $C910
		dc.w $FFFF
off_B3A8:	dc.l byte_B6F8					; 0 
		dc.w $C496
		dc.l byte_B70B
		dc.w $C592
		dc.l byte_B723
		dc.w $C794
		dc.l byte_B738
		dc.w $C886
		dc.w $FFFF
off_B3C2:	dc.l byte_B75C					; 0 
		dc.w $C488
		dc.l byte_B642
		dc.w $C688
		dc.l byte_B77E
		dc.w $C78E
		dc.l byte_B799
		dc.w $C88E
		dc.w $FFFF
off_B3DC:	dc.l byte_B7B5					; 0 
		dc.w $C510
		dc.l byte_B75C
		dc.w $C608
		dc.l byte_B799
		dc.w $C80E
		dc.w $FFFF
off_B3F0:	dc.l byte_B7F2					; 0 
		dc.w $C312
		dc.l byte_B6BC
		dc.w $C508
		dc.l byte_B80B
		dc.w $C614
		dc.l byte_B821
		dc.w $C712
		dc.l byte_B839
		dc.w $C80E
		dc.l byte_B855
		dc.w $C916
		dc.l byte_B869
		dc.w $CA16
		dc.w $FFFF
off_B41C:	dc.l byte_B7B5					; 0 
		dc.w $C492
		dc.l byte_B87D
		dc.w $C594
		dc.l byte_B893
		dc.w $C796
		dc.l byte_B8A8
		dc.w $C88E
		dc.w $FFFF
off_B436:	dc.l byte_B8C5					; 0 
		dc.w $C48C
		dc.l byte_B8E2
		dc.w $C68A
		dc.l byte_B902
		dc.w $C786
		dc.l byte_B90F
		dc.w $C888
		dc.w $FFFF
off_B450:	dc.l byte_B932					; 0 
		dc.w $C588
		dc.l byte_B954
		dc.w $C78A
		dc.w $FFFF
off_B45E:	dc.l byte_B974					; 0 
		dc.w $C288
		dc.l byte_B995
		dc.w $C49E
		dc.l byte_B9A1
		dc.w $C59E
		dc.l byte_B9AD
		dc.w $C69E
		dc.l byte_B9B8
		dc.w $C7A0
		dc.l byte_B9C1
		dc.w $C8A2
		dc.l byte_B9C8
		dc.w $C9A2
		dc.l byte_B9D0
		dc.w $CA9E
		dc.w $FFFF
off_B490:	dc.l byte_B9DB					; 0 
		dc.w $C406
		dc.l byte_BA00
		dc.w $C610
		dc.l byte_BA1B
		dc.w $C70C
		dc.l byte_BA3A
		dc.w $C812
		dc.l byte_BA52
		dc.w $C914
		dc.w $FFFF
off_B4B0:	dc.l byte_BA69					; 0 
		dc.w $C512
		dc.l byte_BA81
		dc.w $C70A
		dc.l byte_B7CE
		dc.w $C806
		dc.w $FFFF
off_B4C4:	dc.l byte_B55C					; 0 
		dc.w $C316
		dc.l byte_BAA2
		dc.w $C414
		dc.l byte_BAB8
		dc.w $C606
		dc.l byte_BADC
		dc.w $C70E
		dc.l byte_BAF7
		dc.w $C80A
		dc.l byte_BB16
		dc.w $C90E
		dc.l byte_BB32
		dc.w $CA04
		dc.w $FFFF
off_B4F0:	dc.l byte_BB58					; 0 
		dc.w $C30C
		dc.l byte_BB75
		dc.w $C424
		dc.l byte_BB7B
		dc.w $C60C
		dc.l byte_BC9F
		dc.w $C70A
		dc.l byte_BBD8
		dc.w $C810
		dc.l byte_BBF2
		dc.w $C910
		dc.l byte_BC0C
		dc.w $CA12
		dc.w $FFFF
off_B51C:	dc.l byte_BB58					; 0 
		dc.w $C30C
		dc.l byte_BB75
		dc.w $C424
		dc.l byte_BB98
		dc.w $C606
		dc.l byte_BBBC
		dc.w $C70E
		dc.l byte_BCBE
		dc.w $C80E
		dc.l byte_BCD9
		dc.w $C91A
		dc.l byte_BC25
		dc.w $CA08
		dc.w $FFFF

off_B548:
		dc.l byte_BC7B					; 0 
		dc.w $C496
		dc.l byte_BC8F
		dc.w $C6A4
		dc.l byte_BC95
		dc.w $C8A0
		dc.w $FFFF

byte_B55C:	
		dc.b $20, $A, $B,$2F,$30, $A, $B,  6,  7,$29,$2A,$27,$28,$12,$2B,$2C ; 0
		dc.b  $A, $B,$FF				; 16
			
byte_B56F:	
		dc.b $20,$1F,$20,$23,$24,$1D,$1E,  8,  9,$29,$2A,  6,  7, $A, $B,$23 ; 0	
		dc.b $24,$FF					; 16
		
byte_B581:	
		dc.b   0,$10,$11,  2,  3,$31,$32,  2,  3,$1D,$1E,  0,  0,$1B,$1C,  2 ; 0
		dc.b   3,$15,$16,  2,  3,$31,$32,  2,  3,$19,$1A,  2,  3,$FF ; 16
		
byte_B59F:	
		dc.b   0,$25,$26,$10,$11,$12,$1B,$1C,$1D,$1E,  4,  5,$29,$2A,  0,  0 ; 0
		dc.b $27,$28,$1D,$1E,$31,$32,$1D,$1E,  8,  9,  2,  3,$FF ; 16
		
byte_B5BC:	
		dc.b $20,  8,  9,$12,$23,$24, $A, $B,  6,  7,$27,$28,$1D,$1E,$23,$24 ; 0		
		dc.b $FF					; 16
		
byte_B5CD:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,$10,$11,  2,  3,$23,$24,$29 ; 0
		dc.b $2A,  0,  0,$31,$32,$1D,$1E,$25,$26,$10,$11,$12,$12,$FF ; 16
		
		
byte_B5EB:	
		dc.b $20,  6,  7,$10,$11,$12, $A, $B, $C, $D,  0,  0,$1F,$20,$23,$24 ; 0			
		dc.b $1D,$1E, $E, $F,$23,$24,  2,  3,$19,$1A,$19,$1A, $A, $B,$23,$24 ; 16
		dc.b $FF					; 32
		
byte_B60C:	
		dc.b   0,$31,$32,$29,$2A,$13,$14,$12,  0,  0,$1B,$1C,  2,  3,$15,$16 ; 0
		dc.b   2,  3,  0,$37,$31,$32,$29,$2A,$35,$36,$38,$FF ; 16
		
byte_B628:	
		dc.b $20, $E, $F,  2,  3,$19,$1A, $A, $B,  0,  0,$1F,$20,$17,$18,  2 ; 0
		dc.b   3,$1B,$1C,$1B,$1C, $A, $B,$23,$24,$FF	; 16
		
		
byte_B642:	

		dc.b   0,$10,$11,$12,$23,$24,$1D,$1E,$15,$16,  2,  3,$33,$34,$29,$2A ; 0
		dc.b   0,  0,$31,$32,  2,  3,$25,$26,$29,$2A,$10,$11,  2,  3,$23,$24 ; 16
		dc.b   2,  3,$FF				; 32
		
byte_B665:	
		dc.b   0,$37,  6,  7,  2,  3,$23,$24,$1D,$1E,$17,$18,  0,  0,$31,$32 ; 0			
		dc.b   2,  3,$25,$26,$38,$FF			; 16
		
byte_B67B:	
		dc.b $20,  6,  7,$10,$11,  2,  3,$23,$24,  2,  3,  6,  7,$27,$28, $A ; 0			
		dc.b  $B,$23,$24,  0,  0,  8,  9, $A, $B,$25,$26,$12, $E, $F,$1B,$1C ; 16
		dc.b $FF					; 32
		
byte_B69C:	
		dc.b $20,  2,  3,$1B,$1C,  8,  9,$FF		; 0	

byte_B6A4:	
		dc.b $20,  6,  7,$10,$11,$12, $A, $B, $C, $D,  0,  0,  2,  3,$23,$24 ; 0			
		dc.b $27,$28,$12,$25,$26,$27,$28,$FF		; 16
		
byte_B6BC:	
		dc.b   0,$31,$32,  2,  3,$25,$26,$29,$2A,$25,$26,$10,$11,$12,  0,  0 ; 0			
		dc.b $31,$32,  2,  3,$19,$1A,  2,  3, $E, $F,$29,$2A,  6,  7,$10,$11 ; 16
		dc.b $12,$FF					; 32
		
byte_B6DE:	
		dc.b   0,$37,$13,$14,$29,$2A,  8,  9,$31,$32,  0,  0,$27,$28,$1D,$1E ; 0		
		dc.b $27,$28,$1D,$1E,$31,$32,  2,  3,$38,$FF	; 16
		
byte_B6F8:	
		dc.b $20,  2,  3,$25,$26,$25,$26,$12,$25,$26,$27,$28,  2,  3,$1B,$1C ; 0		
		dc.b $27,$28,$FF				; 16
		
byte_B70B:	
		dc.b $20,$1F,$20,$23,$24,$1D,$1E, $E, $F,$23,$24,  2,  3,$19,$1A,$19 ; 0			
		dc.b $1A, $A, $B,$23,$24,$25,$26,$FF		; 16
		
byte_B723:	
		dc.b   0,  4,  5,$12,$17,$18,$17,$18,  0,  0,$2D,$2E,$12,$17,$18,$17 ; 0		
		dc.b $18,$12,$25,$26,$FF			; 16
		
byte_B738:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,$1B,$1C,$1D,$1E,  4,  5,$29 ; 0		
		dc.b $2A,  0,  0,$31,$32,  2,  3,$19,$1A,  2,  3,$19,$1A,$1D,$1E,$27 ; 16
		dc.b $28,$1D,$1E,$FF				; 32
		
byte_B75C:	
		dc.b $20,$1D,$1E,  4,  5,$13,$14, $A, $B,  6,  7,$27,$28,  0,  0,$1F ; 0		
		dc.b $20,$17,$18,  2,  3,  6,  7, $A, $B,$19,$1A, $A, $B,$1B,$1C,$27 ; 16
		dc.b $28,$FF					; 32
		
byte_B77E:	
		dc.b   0,$27,$28,  2,  3,$15,$16,  2,  3,$10,$11,$12,$23,$24,$1D,$1E ; 0		
		dc.b   0,  0,  2,  3,$1B,$1C,$27,$28,$1D,$1E,$FF ; 16
		
byte_B799:	
		dc.b   0,$31,$32,$29,$2A,$27,$28,  2,  3,$15,$16,  2,  3,  0,  0,$25 ; 0		
		dc.b $26,$29,$2A, $E, $F,  2,  3,$1B,$1C,$1D,$1E,$FF ; 16
		
byte_B7B5:	
		dc.b $20,$25,$26,$1F,$20, $A, $B,  6,  7,$12,  2,  3,$17,$18,$25,$26 ; 0
		dc.b $27,$28,  2,  3, $E, $F, $A, $B,$FF	; 16
		
byte_B7CE:	
		dc.b   0,  6,  7,  2,  3,$23,$24,$1D,$1E,$17,$18,  0,  0,  2,  3,$1B ; 0			
		dc.b $1C,$1B,$1C,  0,  0,$10,$11,  2,  3,$1B,$1C,$25,$26,$10,$11,  2 ; 16
		dc.b   3,$2D,$2E,$FF				; 32
		
byte_B7F2:	
		dc.b $20,$33,$34,$1D,$1E,$1B,$1C, $A, $B,  0,  0,  2,  3,$23,$24,$27 ; 0		
		dc.b $28,$12,$25,$26,$27,$28,$25,$26,$FF	; 16
		
byte_B80B:	
		dc.b   0,  6,  7,$23,$24,  2,  3,$12, $E, $F,  0,  0,$25,$26,$27,$28 ; 0			
		dc.b $12,$27,$28,$27,$28,$FF			; 16
		
byte_B821:	
		dc.b   0,  4,  5,$23,$24, $A, $B,$1B,$1C,  8,  9,  2,  3,  0,  0,$23 ; 0				
		dc.b $24,$1D,$1E,$25,$26,$25,$26,$FF		; 16
		
byte_B839:	
		dc.b   0,$13,$14,$12,$1B,$1C,  2,  3,  0,  0,$12,$25,$26,$10,$11,$12 ; 0			
		dc.b $2D,$2E,  2,  3,$27,$28,  2,  3,$23,$24,$12,$FF ; 16
		
byte_B855:	
		dc.b   0,$27,$28,$1D,$1E,$19,$1A,  0,  0,$1F,$20,  2,  3,$31,$32,$1B ; 0		
		dc.b $1C, $A, $B,$FF				; 16
		
byte_B869:	
		dc.b   0,$1F,$20,$10,$11, $A, $B,$1B,$1C,$12,$2F,$30,  0,  0,$23,$24 ; 0		
		dc.b $12, $A, $B,$FF				; 16
		
byte_B87D:	
		dc.b $20,  2,  3,$23,$24,$27,$28,  0,  0,  2,  3,$1B,$1C,  8,  9,  0 ; 0		
		dc.b   0,  6,  7, $E, $F,$FF			; 16
		
byte_B893:	
		dc.b   0,$27,$28,$12,$19,$1A,  0,  0,$25,$26,$15,$16, $A, $B,$17,$18 ; 0			
		dc.b $17,$18,$31,$32,$FF			; 16
		
byte_B8A8:	
		dc.b   0,$1F,$20, $A, $B,$27,$28, $A, $B,$23,$24,  0,  0,$19,$1A,$1D ; 0			
		dc.b $1E,$23,$24,  2,  3,$2D,$2E,$12, $A, $B,  6,  7,$FF ; 16
		
byte_B8C5:	
		dc.b $20,$19,$1A,$29,$2A,$25,$26,$12,  6,  7,  0,  0,  6,  7,$1D,$1E ; 0		
		dc.b $19,$1A,$1F,$20,$1D,$1E,$25,$26, $A, $B,$23,$24,$FF ; 16
		
byte_B8E2:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,$27,$28,$1D,$1E,  0,  0,$1B ; 0		
		dc.b $1C,  2,  3,$15,$16,  2,  3,$19,$1A,$29,$2A,$23,$24,  2,  3,$FF ; 16
		
byte_B902:	
		dc.b   0,$37,  0,$3B,$3C,$3D,$3E,$3F,$3E,$3F,$35,$36,$FF ; 0
					
byte_B90F:	
		dc.b   0,  8,  9,$23,$24, $A, $B,  2,  3,$19,$1A,$25,$26,  0,  0,  6 ; 0		
		dc.b   7,$1D,$1E,$19,$1A, $A, $B,  0,  0,$27,$28,$23,$24,$29,$2A, $A ; 16
		dc.b  $B,$38,$FF				; 32
		
byte_B932:	
		dc.b $20,$25,$26,$1D,$1E,$29,$2A,$1B,$1C,  8,  9,  0,  0,$1F,$20,$23 ; 0		
		dc.b $24,$1D,$1E, $E, $F,$23,$24,  2,  3,$19,$1A,$19,$1A, $A, $B,$23 ; 16
		dc.b $24,$FF					; 32

byte_B954:	
		dc.b   0,$27,$28,$1D,$1E,$19,$1A,$1D,$1E,$31,$32,$29,$2A,$15,$16,$12 ; 0		
		dc.b   0,  0,$25,$26,$10,$11,$12,$19,$1A,  2,  3,  8,  9,  2,  3,$FF ; 16
		
byte_B974:	
		dc.b $20,$25,$26,$1D,$1E,$29,$2A,$1B,$1C,  8,  9,  0,  0,  2,  3,$25 ; 0			
		dc.b $26,$25,$26,$12,$25,$26,$27,$28,  2,  3,$1B,$1C,$27,$28,$25,$26 ; 16
		dc.b $FF					; 32

byte_B995:	
		dc.b   0,$19,$1A,  2,  3,  6,  7,$15,$16,$31,$32,$FF ; 0
					

byte_B9A1:	
		dc.b   0,$13,$14,$12,$19,$1A,$12,$27,$28,  2,  3,$FF ; 0
					
byte_B9AD:	
		dc.b   0,$19,$1A,$12,$17,$18,$1F,$20,$1D,$1E,$FF ; 0
					
byte_B9B8:	
		dc.b   0,$12,$1F,$20,$1F,$20,$1D,$1E,$FF	; 0 
		
byte_B9C1:	
		dc.b   0,$25,$26,$3A,$1D,$1E,$FF		; 0 

byte_B9C8:	
		dc.b   0,$1D,$1E,$31,$32,$33,$34,$FF		; 0	

byte_B9D0:	
		dc.b   0,$1B,$1C,$3A, $E, $F, $A, $B, $A, $B,$FF ; 0
					
byte_B9DB:	
		dc.b $20,$1F,$20,$23,$24,$1D,$1E,$13,$14, $A, $B,  6,  7,$27,$28,  0 ; 0			
		dc.b   0,  2,  3,$25,$26,$25,$26,$12,$25,$26,$27,$28,  2,  3,$1B,$1C ; 16
		dc.b $27,$28,$25,$26,$FF			; 32

byte_BA00:	
		dc.b   0,$25,$26,$31,$32,$29,$2A,$12,  6,  7,$10,$11,$12,  0,  0,$15 ; 0			
		dc.b $16,  2,  3,$27,$28,  2,  3, $E, $F,$12,$FF ; 16

byte_BA1B:	
		dc.b   0,$27,$28,  2,  3,$15,$16,  2,  3,$10,$11,$12,$23,$24,$1D,$1E ; 0		
		dc.b   0,  0,$10,$11,  2,  3,$19,$1A,  2,  3,$1B,$1C,$1D,$1E,$FF ; 16

byte_BA3A:	
		dc.b   0,$31,$32,$1D,$1E,$25,$26,$10,$11,$12,$15,$16,$12,  0,  0,$1D ; 0	
		dc.b $1E,$1D,$1E,$15,$16,  2,  3,$FF		; 16

byte_BA52:	
		dc.b   0,$25,$26,$27,$28, $A, $B,$2B,$2C, $A, $B,  0,  0,$2D,$2E,$1D ; 0
		dc.b $1E,$12,$27,$28,  2,  3,$FF		; 16

byte_BA69:	
		dc.b $20, $E, $F,  2,  3,$19,$1A, $A, $B,  0,  0,$19,$1A,  2,  3,$1B ; 0	
		dc.b $1C,$29,$2A,  2,  3,$17,$18,$FF		; 16

byte_BA81:	
		dc.b   0,$31,$32,$1D,$1E,$29,$2A,$12,  6,  7,$10,$11,$12,  0,  0,$27 ; 0			
		dc.b $28,  2,  3,$15,$16,  2,  3,$10,$11,  2,  3,$25,$26,$10,$11,$12 ; 16
		dc.b $FF					; 32

byte_BAA2:	
		dc.b $20,$25,$26,$29,$2A,$1F,$20,$1F,$20,$1D,$1E,$23,$24,$27,$28, $A ; 0			
		dc.b  $B,$23,$24,$25,$26,$FF			; 16
		
byte_BAB8:	
		dc.b   0,  8,  9,  2,  3,$12,$33,$34,  2,  3,  4,  5,$29,$2A,$23,$24 ; 0		
		dc.b $1D,$1E,$29,$2A,  0,  0,$25,$26,  2,  3,$15,$16,$29,$2A,$23,$24 ; 16
		dc.b   2,  3,$12,$FF				; 32
		
byte_BADC:	
		dc.b   0,$10,$11,$12,$25,$26,  2,  3,$25,$26,$10,$11,$12,  0,  0,$25 ; 0		
		dc.b $26,$29,$2A,$33,$34,$29,$2A,$15,$16,$12,$FF ; 16
		
byte_BAF7:	
		dc.b   0,$27,$28,$10,$11,$1D,$1E,$19,$1A,  2,  3,$25,$26,  0,  0,$15 ; 0
		dc.b $16,  2,  3,$17,$18,$12,$1B,$1C,$25,$26,$15,$16, $A, $B,$FF ; 16
		
byte_BB16:	
		dc.b   0, $C, $D,$29,$2A,$13,$14,$12,$1D,$1E,  0,  0,$19,$1A,$12,$1B ; 0		
		dc.b $1C, $A, $B, $E, $F,$12,$25,$26,$10,$11,$12,$FF ; 16
		
byte_BB32:	
		dc.b   0,$27,$28,  2,  3,$15,$16,  2,  3,$10,$11,  2,  3,$23,$24,$29 ; 0				
		dc.b $2A,  0,$29,$2A,$27,$28,$25,$26,$29,$2A,$1B,$1C,$1D,$1E,$19,$1A ; 16
		dc.b $12,$31,$32,  2,  3,$FF			; 32

byte_BB58:	
		dc.b $20,$25,$26,$1F,$20, $A, $B,  6,  7,$12,  2,  3,$17,$18,  0,  0 ; 0			
		dc.b $27,$28,$10,$11,  2,  3,$1B,$1C,$15,$16,$25,$26,$FF ; 16

byte_BB75:	
		dc.b $20,$27,$28,$1D,$1E,$FF			; 0	
					
byte_BB7B:	
		dc.b   0,  6,  7,$12,$1B,$1C,  8,  9,$31,$32,  0,  0,  6,  7,$17,$18 ; 0			
		dc.b   2,  3,$2B,$2C, $A, $B,$23,$24,  2,  3,$1B,$1C,$FF ; 16

byte_BB98:	
		dc.b   0,  8,  9, $A, $B,  4,  5,$1D,$1E,$23,$24,  2,  3,$10,$11,  0 ; 0		
		dc.b   0,$19,$1A,  6,  7,  6,  7,$23,$24,  2,  3,  6,  7,$15,$16, $A ; 16
		dc.b  $B,$1B,$1C,$FF				; 32

byte_BBBC:	
		dc.b   0,$27,$28,  2,  3,$27,$28,$25,$26,$29,$2A,$1D,$1E,  0,  0,$31 ; 0			
		dc.b $32,  2,  3,$19,$1A,  2,  3,  8,  9,  2,  3,$FF ; 16

byte_BBD8:	
		dc.b   0,  8,  9,  2,  3,$12,$25,$26,$29,$2A,$15,$16, $A, $B,  0,  0 ; 0	
		dc.b $25,$26,  2,  3,$12,$27,$28,$1D,$1E,$FF	; 16

byte_BBF2:	
		dc.b   0,$15,$16,$29,$2A,$1B,$1C,$12,$27,$28,  2,  3,$15,$16, $A, $B ; 0			
		dc.b   0,  0,  2,  3,$1D,$1E,$15,$16,$12,$FF	; 16

byte_BC0C:	
		dc.b   0,$27,$28,$25,$26,$29,$2A,$1B,$1C, $A, $B,$15,$16,$1D,$1E,  0 ; 0		
		dc.b   0,  2,  3,$1D,$1E,$15,$16,$12,$FF	; 16

byte_BC25:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,  2,  3,$15,$16,$12,  0,  0 ; 0		
		dc.b $15,$16,  2,  3,$2D,$2E,  2,  3,$19,$1A,$29,$2A,$23,$24,  2,  3 ; 16
		dc.b $FF					; 32

byte_BC46:	
		dc.b   0,$25,$26,$1D,$1E,$1B,$1C,$12,  6,  7,$FF ; 0
					
byte_BC51:	
		dc.b $20,$35,$36,$FF				; 0 

byte_BC55:	
		dc.b   0,  6,  7,  2,  3,$25,$26,$27,$28,  0,  0,$1D,$1E, $C, $D,  0 ; 0			
		dc.b   0,  6,  7,$10,$11,  2,  3,$23,$24,  2,  3,  6,  7,$27,$28, $A ; 16
		dc.b  $B,$23,$24,$25,$26,$FF			; 32

byte_BC7B:	
		dc.b   0,$1F,$20,$23,$24, $A, $B,$25,$26, $A, $B,$1B,$1C,$27,$28, $A ; 0			
		dc.b  $B,  8,  9,$FF				; 16

byte_BC8F:	
		dc.b   0,  4,  5,$31,$32,$FF			; 0	

byte_BC95:	
		dc.b   0,$25,$26, $A, $B, $E, $F,  2,  3,$FF	; 0	

byte_BC9F:	
		dc.b   0, $C, $D,$23,$24,  2,  3,$1B,$1C,  6,  7, $A, $B,  0,  0,$27 ; 0			
		dc.b $28,  2,  3,$1B,$1C,$27,$28,$12,  2,  3,  8,  9,$1D,$1E,$FF ; 16

byte_BCBE:	
		dc.b   0,$23,$24,$12,  6,  7,$15,$16,  0,  0,$19,$1A,  2,  3,  6,  7 ; 0		
		dc.b   2,  3,$23,$24,  2,  3, $A, $B, $E, $F,$FF ; 16

byte_BCD9:	
		dc.b   0,$17,$18,$1D,$1E,  6,  7,$15,$16,$31,$32,  0,  0,$1F,$20,$FF ; 0
					

byte_BCE9:	
		dc.b   5,$11,$1A,$1B,$FF			; 0 

byte_BCEE:	
		dc.b   5,  1,  2,$1A,$1B,  7,  8,$FF		; 0	

byte_BCF6:	
		dc.b   5,$18,$19,$11,$16,$17,  9, $A,$24,$25,  0,$38,$26,$27,  1,  2 ; 0		
		dc.b $11,$16,$17,$24,$25,$38,  0,$1E,$1F,$22,$23,$1C,$1D,$2C,$2D,  9 ; 16
		dc.b  $A,$22,$23,$FF				; 32

byte_BD1A:	
		dc.b   5,$24,$25,$1C,$1D,$1A,$1B,$11,  5,  6,$FF,  0 ; 0
					

		incfile	Nem_CreditsFont

; ===========================================================================

	if RemoveJmpTos=0
JmpTo5_DisplaySprite:						
		jmp	DisplaySprite
JmpTo3_DeleteObject:			
		jmp	DeleteObject
JmpTo2_PlaySound:				
		jmp	PlaySound
JmpTo_loc_3AF58:				
		jmp	loc_3AF58				; Tornado_AnimatePilot
JmpTo_AnimateSprite:
		jmp	AnimateSprite
JmpTo_NemDec:					
		jmp	NemDec
JmpTo_EniDec:						
		jmp	EniDec
JmpTo_ClearScreen:				
		jmp	ClearScreen
JmpTo2_PlayMusic:				
		jmp	PlayMusic
JmpTo_LoadChild:	
		jmp	LoadChild
JmpTo2_TilemapToVRAM:	
		jmp	TilemapToVRAM
JmpTo2_SpeedToPos:						
		jmp	SpeedToPos
JmpTo_PaletteCycle:				
		jmp	PaletteCycle		
JmpTo_LoadSubtypeData_Part3:
		jmp	LoadSubtypeData_Part3
		
		align 4
	endc

; ===========================================================================


LevelParameterLoad:		
		clr.w	(v_fg_redraw_direction).w
		clr.w	(v_bg1_redraw_direction).w
		clr.w	(v_bg2_redraw_direction).w
		clr.w	(v_bg3_redraw_direction).w
		clr.w	(v_fg_redraw_direction_p2).w
		clr.w	(v_bg1_redraw_direction_p2).w
		clr.w	(v_bg2_redraw_direction_p2).w
		clr.w	(v_bg3_redraw_direction_p2).w
		clr.w	(v_fg_redraw_direction_copy).w
		clr.w	(v_bg1_redraw_direction_copy).w
		clr.w	(v_bg2_redraw_direction_copy).w
		clr.w	(v_bg3_redraw_direction_copy).w
		clr.w	(v_fg_redraw_direction_p2_copy).w
		clr.w	(v_bg1_redraw_direction_p2_copy).w
		clr.w	(v_bg2_redraw_direction_p2_copy).w
		clr.w	(v_bg3_redraw_direction_p2_copy).w
		clr.b	(f_disable_scrolling).w
		clr.b	(f_screen_shake_htz).w
		clr.b	(f_screen_shake).w
		clr.b	(f_disable_horiz_scroll).w
		clr.b	(f_disable_horiz_scroll_p2).w
		moveq	#0,d0
		move.b	d0,(v_dle_routine).w
	if Revision=2
		move.w	d0,(v_wfz_dle_subrout).w
		move.w	d0,(v_wfz_bg_y_speed).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	d0,(v_camera_7_pos_offset).w
    endc
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		lea	word_C054(pc,d0.w),a0
		move.l	(a0)+,d0
		move.l	d0,(v_boundary_left_next).w
		move.l	d0,(unk_EEC0).w
		move.l	d0,(v_boundary_left_next_p2).w
		move.l	(a0)+,d0
		move.l	d0,(v_boundary_top_next).w
		move.l	d0,(unk_EEC4).w
		move.l	d0,(v_boundary_top_next_p2).w
		move.w	#$1010,(v_fg_x_redraw_flag).w
		move.w	#$60,(v_camera_y_shift).w
		move.w	#$60,(v_camera_y_shift_p2).w
		bra.w	loc_C164
; ===========================================================================
; ----------------------------------------------------------------------------
; Level	size array
;
; This array defines the screen	boundaries for each act	in the game, with 8
; bytes	per act.
;		    xstart xend	 ystart	yend
; ----------------------------------------------------------------------------
word_C054:	dc.w	 0,$29A0,    0,	$320			; 0
		dc.w	 0,$2940,    0,	$420			; 4
		dc.w	 0,$3FFF,    0,	$720			; 8
		dc.w	 0,$3FFF,    0,	$720			; 12
		dc.w	 0,$3FFF,    0,	$720			; 16
		dc.w	 0,$3FFF,    0,	$720			; 20
		dc.w	 0,$3FFF,    0,	$720			; 24
		dc.w	 0,$3FFF,    0,	$720			; 28
		dc.w	 0,$2280,$FF00,	$800			; 32
		dc.w	 0,$1E80,$FF00,	$800			; 36
		dc.w	 0,$2A80,$FF00,	$800			; 40
		dc.w	 0,$3FFF,$FF00,	$800			; 44
		dc.w	 0,$3FFF,    0,	$720			; 48
		dc.w	 0,$3FFF,    0,	$720			; 52
		dc.w	 0,$2800,    0,	$720			; 56
		dc.w	 0,$3280,    0,	$720			; 60
		dc.w	 0,$3FFF,    0,	$720			; 64
		dc.w	 0,$3FFF,    0,	$720			; 68
		dc.w	 0,$3FFF,    0,	$720			; 72
		dc.w	 0,$3FFF,    0,	$720			; 76
		dc.w	 0,$2F80,    0,	$680			; 80
		dc.w	 0,$2D00,    0,	$680			; 84
		dc.w	 0,$2380, $3C0,	$720			; 88
		dc.w	 0,$3FFF,  $60,	$720			; 92
		dc.w	 0,$27A0,    0,	$720			; 96
		dc.w	 0,$2A80,    0,	$720			; 100
		dc.w	 0,$2780,    0,	$720			; 104
		dc.w	 0,$2A80,    0,	$720			; 108
		dc.w	 0,$1000,  $C8,	 $C8			; 112
		dc.w	 0,$1000,  $C8,	 $C8			; 116
		dc.w	 0,$28C0, $200,	$600			; 120
		dc.w	 0,$3FFF, $180,	$710			; 124
		dc.w	 0,$3FFF,    0,	   0			; 128
		dc.w	 0,$3FFF,    0,	$720			; 132
; ===========================================================================

loc_C164:				
		tst.b	(v_last_lamppost).w
		beq.s	loc_C17A
		jsr	loc_1F35E
		move.w	($FFFFB008).w,d1
		move.w	($FFFFB00C).w,d0
		bra.s	loc_C196
; ===========================================================================

loc_C17A:				
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	Misc_C1D0(pc,d0.w),a1
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,($FFFFB008).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,($FFFFB00C).w

loc_C196:				
		subi.w	#$A0,d1	
		bcc.s	loc_C19E
		moveq	#0,d1

loc_C19E:				
		move.w	(v_boundary_right_next).w,d2
		cmp.w	d2,d1
		bcs.s	loc_C1A8
		move.w	d2,d1

loc_C1A8:				
		move.w	d1,(v_camera_x_pos).w
		move.w	d1,(v_camera_x_pos_p2).w
		subi.w	#$60,d0
		bcc.s	loc_C1B8
		moveq	#0,d0

loc_C1B8:				
		cmp.w	(v_boundary_bottom).w,d0
		blt.s	loc_C1C2
		move.w	(v_boundary_bottom).w,d0

loc_C1C2:				
		move.w	d0,(v_camera_y_pos).w
		move.w	d0,(v_camera_y_pos_p2).w
		bsr.w	sub_C258
		rts	

; ===========================================================================
; --------------------------------------------------------------------------------------
; Character start location array
;
; 2 entries per	act, corresponding to the X and	Y locations that you want the player to
; appear at when the level starts.
; --------------------------------------------------------------------------------------
Misc_C1D0:	
		dc.w   $60, $28F				; 0
		dc.w   $60, $2AF				; 2
		dc.w   $60, $28F				; 4
		dc.w   $60, $2AF				; 6
		dc.w   $60, $1AC				; 8
		dc.w   $60, $1AC				; 10
		dc.w   $60, $28F				; 12
		dc.w   $60, $2AF				; 14
		dc.w   $60, $28C				; 16
		dc.w   $60, $5EC				; 18
		dc.w   $60, $20C				; 20
		dc.w   $60, $2AF				; 22
		dc.w   $60, $4CC				; 24
		dc.w  $1E0, $4CC				; 26
		dc.w   $60, $3EF				; 28
		dc.w   $60, $6AF				; 30
		dc.w  $230, $1AC				; 32
		dc.w  $230, $1AC				; 34
		dc.w   $60, $28F				; 36
		dc.w   $60, $2AF				; 38
		dc.w   $60, $6AC				; 40
		dc.w   $60, $56C				; 42
		dc.w   $60, $6AC				; 44
		dc.w   $60, $5AC				; 46
		dc.w   $60, $2AC				; 48
		dc.w   $60, $58C				; 50
		dc.w   $60, $1EC				; 52
		dc.w   $60, $12C				; 54
		dc.w   $60, $12D				; 56
		dc.w   $60, $12D				; 58
		dc.w   $60, $37E				; 60
		dc.w   $60, $37E				; 62
		dc.w  $120,  $70				; 64
		dc.w  $140,  $70				; 66

; ===========================================================================


sub_C258:				
		tst.b	(v_last_lamppost).w
		bne.s	loc_C286
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg2_y_pos).w
		move.w	d1,(v_bg1_x_pos).w
		move.w	d1,(v_bg2_x_pos).w
		move.w	d1,(v_bg3_x_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		move.w	d0,(v_bg2_y_pos_p2).w
		move.w	d1,(v_bg1_x_pos_p2).w
		move.w	d1,(v_bg2_x_pos_p2).w
		move.w	d1,(v_bg3_x_pos_p2).w

loc_C286:				
		moveq	#0,d2
		move.b	(v_zone).w,d2
		add.w	d2,d2
		move.w	off_C296(pc,d2.w),d2
		jmp	off_C296(pc,d2.w)

; ===========================================================================
off_C296:	
		dc.w loc_C2B8-off_C296				; 0 		
		dc.w loc_C2E4-off_C296				; 1
		dc.w loc_C2E4-off_C296				; 2
		dc.w loc_C2E4-off_C296				; 3
		dc.w loc_C2E4-off_C296				; 4
		dc.w loc_C2E4-off_C296				; 5
		dc.w locret_C2F2-off_C296			; 6
		dc.w loc_C2F4-off_C296				; 7
		dc.w locret_C320-off_C296			; 8
		dc.w locret_C320-off_C296			; 9
		dc.w loc_C322-off_C296				; 10
		dc.w loc_C332-off_C296				; 11
		dc.w loc_C364-off_C296				; 12
		dc.w loc_C372-off_C296				; 13
		dc.w locret_C38A-off_C296			; 14
		dc.w loc_C38C-off_C296				; 15
		dc.w loc_C3C6-off_C296				; 16
; ===========================================================================

loc_C2B8:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		clr.l	(v_bg2_y_pos).w
		clr.l	(v_bg3_y_pos).w
		lea	(v_bgscroll_buffer).w,a2
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(v_bg1_x_pos_p2).w
		clr.l	(v_bg1_y_pos_p2).w
		clr.l	(v_bg2_y_pos_p2).w
		clr.l	($FFFFEE3C).w
		rts	
; ===========================================================================

loc_C2E4:				
		asr.w	#2,d0
		move.w	d0,(v_bg1_y_pos).w
		asr.w	#3,d1
		move.w	d1,(v_bg1_x_pos).w
		rts	
; ===========================================================================

locret_C2F2:				
		rts	
; ===========================================================================

loc_C2F4:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		clr.l	(v_bg2_y_pos).w
		clr.l	(v_bg3_y_pos).w
		lea	(v_bgscroll_buffer).w,a2
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(v_bg1_x_pos_p2).w
		clr.l	(v_bg1_y_pos_p2).w
		clr.l	(v_bg2_y_pos_p2).w
		clr.l	($FFFFEE3C).w
		rts	
; ===========================================================================

locret_C320:				
		rts	
; ===========================================================================

loc_C322:				
		lsr.w	#3,d0
		addi.w	#$50,d0
		move.w	d0,(v_bg1_y_pos).w
		clr.l	(v_bg1_x_pos).w
		rts	
; ===========================================================================

loc_C332:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_x_pos_p2).w
		tst.b	(v_act).w
		bne.s	loc_C352
		divu.w	#3,d0
		subi.w	#$140,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		rts	
; ===========================================================================

loc_C352:				
		divu.w	#6,d0
		subi.w	#$10,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		rts	
; ===========================================================================

loc_C364:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		clr.l	(v_bg1_y_pos_p2).w
		rts	
; ===========================================================================

loc_C372:				
		lsr.w	#2,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		lsr.w	#1,d1
		move.w	d1,(v_bg2_x_pos).w
		lsr.w	#2,d1
		move.w	d1,(v_bg1_x_pos).w
		rts	
; ===========================================================================

locret_C38A:				
		rts	
; ===========================================================================

loc_C38C:				
		tst.b	(v_act).w
		beq.s	loc_C39E
		subi.w	#$E0,d0	
		lsr.w	#1,d0
		move.w	d0,(v_bg1_y_pos).w
		bra.s	loc_C3A6
; ===========================================================================

loc_C39E:				
		subi.w	#$180,d0
		move.w	d0,(v_bg1_y_pos).w

loc_C3A6:				
		muls.w	#$119,d1
		asr.l	#8,d1
		move.w	d1,(v_bg1_x_pos).w
		move.w	d1,(v_camera_arz_bg_x_pos).w
		clr.w	($FFFFEE0A).w
		clr.w	($FFFFF674).w
		clr.l	(v_bg2_y_pos).w
		clr.l	(v_bg3_y_pos).w
		rts	
; ===========================================================================

loc_C3C6:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		rts	

; ===========================================================================


DeformLayers:				
		tst.b	(f_disable_scrolling).w			; is scrolling disabled?
		beq.s	.bg_scroll				; if not, branch
		rts	
; ===========================================================================

	.bg_scroll:				
		clr.w	(v_fg_redraw_direction).w
		clr.w	(v_bg1_redraw_direction).w
		clr.w	(v_bg2_redraw_direction).w
		clr.w	(v_bg3_redraw_direction).w
		clr.w	(v_fg_redraw_direction_p2).w
		clr.w	(v_bg1_redraw_direction_p2).w
		clr.w	(v_bg2_redraw_direction_p2).w
		clr.w	(v_bg3_redraw_direction_p2).w
		clr.w	(v_camera_x_diff).w
		clr.w	(v_camera_y_diff).w
		clr.w	(v_camera_x_diff_p2).w
		clr.w	(v_camera_y_diff_p2).w
		cmpi.b	#$10,(v_zone).w
		bne.w	loc_C41A
		tst.w	(v_debug_active).w
		beq.w	loc_C4D0

loc_C41A:				
		tst.b	(f_disable_horiz_scroll).w
		bne.s	loc_C480
		lea	($FFFFB000).w,a0
		lea	(v_camera_x_pos).w,a1
		lea	(v_boundary_left_next).w,a2
		lea	(v_fg_redraw_direction).w,a3
		lea	(v_camera_x_diff).w,a4
		lea	(v_hscroll_delay_val).w,a5
		lea	(v_sonic_pos_tracker).w,a6
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_C44C
		lea	(v_hscroll_delay_val_p2).w,a5
		lea	(v_tails_pos_tracker).w,a6

loc_C44C:				
		bsr.w	sub_D704
		lea	(v_fg_x_redraw_flag).w,a2
		bsr.w	sub_D6E2
		lea	(v_camera_y_pos).w,a1
		lea	(v_boundary_left_next).w,a2
		lea	(v_camera_y_diff).w,a4
		move.w	(v_camera_y_shift).w,d3
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_C474
		move.w	(v_camera_y_shift_p2).w,d3

loc_C474:				
		bsr.w	sub_D77A
		lea	(v_fg_y_redraw_flag).w,a2
		bsr.w	sub_D878

loc_C480:				
		tst.w	(f_two_player).w
		beq.s	loc_C4D0
		tst.b	(f_disable_horiz_scroll_p2).w
		bne.s	loc_C4D0
		lea	($FFFFB040).w,a0
		lea	(v_camera_x_pos_p2).w,a1
		lea	(v_boundary_left_next_p2).w,a2
		lea	(v_fg_redraw_direction_p2).w,a3
		lea	(v_camera_x_diff_p2).w,a4
		lea	(v_hscroll_delay_val_p2).w,a5
		lea	(v_tails_pos_tracker).w,a6
		bsr.w	sub_D704
		lea	(v_fg_x_redraw_flag_p2).w,a2
		bsr.w	sub_D6E2
		lea	(v_camera_y_pos_p2).w,a1
		lea	(v_boundary_left_next_p2).w,a2
		lea	(v_camera_y_diff_p2).w,a4
		move.w	(v_camera_y_shift_p2).w,d3
		bsr.w	sub_D77A
		lea	(v_fg_y_redraw_flag_p2).w,a2
		bsr.w	sub_D878

loc_C4D0:				
		bsr.w	sub_E5D0
		move.w	(v_camera_y_pos).w,(v_fg_y_pos_vsram).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.l	(v_camera_x_pos).w,(v_camera_x_pos_copy).w
		move.l	(v_camera_y_pos).w,(v_camera_y_pos_copy).w
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		move.w	Deform_Index(pc,d0.w),d0
		jmp	Deform_Index(pc,d0.w)

; ===========================================================================

Deform_Index:	index offset(*)
		ptr Deform_EHZ					; 0 		
		ptr Deform_Minimal				; 1
		ptr Deform_Lev2					; 2
		ptr Deform_Minimal				; 3
		ptr Deform_MTZ					; 4
		ptr Deform_MTZ					; 5
		ptr Deform_WFZ					; 6
		ptr Deform_HTZ					; 7
		ptr Deform_HPZ					; 8
		ptr Deform_Minimal				; 9
		ptr Deform_OOZ					; 10
		ptr Deform_MCZ					; 11
		ptr Deform_CNZ					; 12
		ptr Deform_CPZ					; 13
		ptr Deform_DEZ					; 14
		ptr Deform_ARZ					; 15
		ptr Deform_SCZ					; 16
		zonewarning Deform_Index,2
; ===========================================================================

Deform_TitleScreen:				
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		addq.w	#1,(v_camera_x_pos).w
		move.w	(v_camera_x_pos).w,d2
		neg.w	d2
		asr.w	#2,d2
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$9F,d1	

loc_C53A:				
		move.l	d0,(a1)+
		dbf	d1,loc_C53A
		move.w	d2,d0
		move.w	#$1F,d1

loc_C546:				
		move.l	d0,(a1)+
		dbf	d1,loc_C546
		move.w	d0,d3
		move.b	(v_vblank_counter_byte).w,d1
		andi.w	#7,d1
		bne.s	loc_C55C
		subq.w	#1,(v_bgscroll_buffer).w

loc_C55C:				
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea	Deform_Ripple_Data(pc),a2
		lea	(a2,d1.w),a2
		move.w	#$F,d1

loc_C570:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_C570
		rts	
; ===========================================================================

Deform_EHZ:				
		tst.w	(f_two_player).w			; is it 2P mode?
		bne.w	Deform_EHZ_2P				; if so, use its deformation routine insread

		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w	; update background's vertical scrolling		
		
		; Update the background's (and foreground's) horizontal scrolling.
		; This creates an elaborate parallax effect.
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	#0,d0
		
		move.w	#22-1,d1				; 22 lines
	.loop22:				
		move.l	d0,(a1)+
		dbf	d1,.loop22
		
		move.w	d2,d0
		asr.w	#6,d0
		
		move.w	#58-1,d1				; 58 lines.
	.loop58:				
		move.l	d0,(a1)+
		dbf	d1,.loop58
		
		move.w	d0,d3
	
		move.b	(v_vblank_counter_byte).w,d1		; get current frame number
		andi.w	#7,d1				
		bne.s	.skipripple				; if not a multiple of 8, branch
		subq.w	#1,(v_bgscroll_buffer).w		; animate the 'ripple' every 8 frames

	.skipripple:				
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea	(Deform_Ripple_Data).l,a2
		lea	(a2,d1.w),a2
		
		move.w	#21-1,d1				; 21 lines
	.loop21:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,.loop21
		
		move.w	#0,d0

		move.w	#11-1,d1				; 11 lines
	.loop11:				
		move.l	d0,(a1)+
		dbf	d1,.loop11
		
		move.w	d2,d0
		asr.w	#4,d0

		move.w	#16-1,d1				; 16 lines
	.loop16_1:				
		move.l	d0,(a1)+
		dbf	d1,.loop16_1
		
		move.w	d2,d0
		asr.w	#4,d0
		move.w	d0,d1
		asr.w	#1,d1
		add.w	d1,d0
		
		move.w	#16-1,d1				; 16 lines
	.loop16_2:				
		move.l	d0,(a1)+
		dbf	d1,.loop16_2
		
		move.l	d0,d4
		swap	d4
		move.w	d2,d0
		asr.w	#1,d0
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		divs.w	#$30,d0
		ext.l	d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w	#3,d3
	
		move.w	#15-1,d1				; 15 lines
	.loop15:				
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop15
			
		move.w	#18/2-1,d1				; 18 lines
	.loop18:				
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop18
			
		move.w	#45/3-1,d1				; 45 lines
	.loop45:
		rept 3				
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		endr
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop45
		

	; 22+58+21+11+16+16+15+18+45=222.
	; Only 222 out of 224 lines have been processed.

    if FixBugs
	; The bottom two lines haven't had their H-scroll values set.
	; Knuckles in Sonic 2 fixes this with the following code:
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
    endc
		rts	
; ===========================================================================
; horizontal offsets for the water rippling effect
; byte_C682:
Deform_Ripple_Data:
		dc.b   1,  2,  1,  3,  1,  2,  2,  1,  2,  3,  1,  2,  1,  2,  0,  0 ; 16	
		dc.b   2,  0,  3,  2,  2,  3,  2,  2,  1,  3,  0,  0,  1,  0,  1,  3 ; 32
		dc.b   1,  2,  1,  3,  1,  2,  2,  1,  2,  3,  1,  2,  1,  2,  0,  0 ; 48
		dc.b   2,  0,  3,  2,  2,  3,  2,  2,  1,  3,  0,  0,  1,  0,  1,  3 ; 64
		dc.b   1,  2					; 66
; ===========================================================================

Deform_EHZ_2P:
		; Make the 'ripple' animate every 8 frames.				
		move.b	(v_vblank_counter_byte).w,d1
		andi.w	#7,d1					
		bne.s	.player1
		subq.w	#1,(v_bgscroll_buffer).w

	.player1:		
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w	; update vertical scrolling
		andi.l	#$FFFEFFFE,(v_fg_y_pos_vsram).w		; limit v-scroll to two pixels at a time

		; Update the background's (and foreground's) horizontal scrolling.
		; This creates an elaborate parallax effect.
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d0
		
		move.w	#11-1,d1				; do 11 lines.	
		bsr.s	.dobackground
		
	;.player2:
		; Update the background's vertical scrolling.
		moveq	#0,d0
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		
		; Update the foregrounds's vertical scrolling.
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		
		; Only allow the screen to vertically scroll two pixels at a time.
		andi.l	#$FFFEFFFE,(v_fg_y_pos_vsram_p2).w
		
		; Update the background's (and foreground's) horizontal scrolling.
		; This creates an elaborate parallax effect.
		; Tails' screen is slightly taller, to fill the gap between the two
		; screens.
		lea	(v_hscroll_buffer+(112-4)*2*2).w,a1
		move.w	(v_camera_x_pos_p2).w,d0
		
		; Do 15 lines.
		move.w	#11+4-1,d1

; ===========================================================================


.dobackground:				
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	#0,d0

	.loop11or15:						; runs 11 times for player 1, 15 times for player 2			
		move.l	d0,(a1)+
		dbf	d1,.loop11or15
		
		move.w	d2,d0
		asr.w	#6,d0

; Do 29 lines.
		move.w	#29-1,d1
	.loop29:				
		move.l	d0,(a1)+
		dbf	d1,.loop29
		
		move.w	d0,d3
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea_	Deform_Ripple_Data,a2
		lea	(a2,d1.w),a2

; Do 11 lines.		
		move.w	#11-1,d1
	.loop11:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,.loop11
		
		move.w	#0,d0

; Do 5 lines.
		move.w	#5-1,d1
	.loop5:				
		move.l	d0,(a1)+
		dbf	d1,.loop5
		
		move.w	d2,d0
		asr.w	#4,d0
		
; Do 8 lines.		
		move.w	#8-1,d1
	.loop8_1:				
		move.l	d0,(a1)+
		dbf	d1,.loop8_1
		
		move.w	d2,d0
		asr.w	#4,d0
		move.w	d0,d1
		asr.w	#1,d1
		add.w	d1,d0

; Do 8 lines.
		move.w	#8-1,d1
	.loop8_2:				
		move.l	d0,(a1)+
		dbf	d1,.loop8_2
		
		move.w	d2,d0
		asr.w	#1,d0
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		divs.w	#$30,d0
		ext.l	d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w	#3,d3
		
; Do 40 lines.
		move.w	#40-1,d1
	.loop40:				
		move.w	d2,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop40
		
		
; 11+29+11+5+8+8+40=112.
; No missing lines here.
		rts	

; ===========================================================================

Deform_Lev2:
	if Revision<2
	; Just a duplicate of 'SwScrl_Minimal'.				
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	UpdateBG_XY
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_C7EA:				
		move.l	d0,(a1)+
		dbf	d1,loc_C7EA
	endc
		rts	
; ===========================================================================

Deform_MTZ:				
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	UpdateBG_XY
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_C822:				
		move.l	d0,(a1)+
		dbf	d1,loc_C822
		rts	
; ===========================================================================

Deform_WFZ:				
		move.w	(v_bg_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#8,d4
		moveq	#2,d6
		bsr.w	UpdateBG_Y2
		move.w	(v_bg_y_pos_diff).w,d5
		ext.l	d5
		lsl.l	#8,d5
		moveq	#6,d6
		bsr.w	UpdateBG_Y_Absolute
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.l	(v_bg1_x_pos).w,d0
		move.l	d0,d1
		lea	(v_bgscroll_buffer).w,a2
		move.l	d0,(a2)+
		move.l	d1,(a2)+
		addi.l	#$8000,(a2)+
		addi.l	#$4000,(a2)+
		addi.l	#$2000,(a2)+
		lea	(Deform_WFZ_Transition_Array).l,a3
		cmpi.w	#$2700,(v_camera_x_pos).w
		bcc.s	loc_C880
		lea	(Deform_WFZ_Normal_Array).l,a3

loc_C880:				
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		andi.w	#$7FF,d1
		moveq	#0,d0
		moveq	#0,d3

loc_C894:				
		move.b	(a3)+,d0
		addq.w	#1,a3
		sub.w	d0,d1
		bcc.s	loc_C894
		neg.w	d1
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.b	-1(a3),d3
		move.w	(a2,d3.w),d0
		neg.w	d0

loc_C8B4:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_C8C4
		move.b	(a3)+,d1
		move.b	(a3)+,d3
		move.w	(a2,d3.w),d0
		neg.w	d0

loc_C8C4:				
		dbf	d2,loc_C8B4
		rts	
; ===========================================================================
Deform_WFZ_Transition_Array:	
		dc.b $C0,  0
		dc.b $C0,  0
		dc.b $80,  0
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $80,  4
		dc.b $80,  4
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $C0,  0
		dc.b $C0,  0
		dc.b $80,  0

Deform_WFZ_Normal_Array:	
		dc.b $C0,  0
		dc.b $C0,  0
		dc.b $80,  0
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
		dc.b $C0,  0
		dc.b $C0,  0
		dc.b $80,  0
		
	if FixBugs
		; This array is missing data for the last $80 lines compared to the transition array.
		; This causes the lower clouds to read data from the start of SwScrl_HTZ.
		; These are the missing entries:
		dc.b $20,  8
		dc.b $30, $C
		dc.b $30,$10
	endc	
; ===========================================================================

Deform_HTZ:				
		tst.w	(f_two_player).w
		bne.w	Deform_HTZ_2P
		tst.b	(f_screen_shake_htz).w
		bne.w	HTZ_Screen_Shake
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	d2,d0
		asr.w	#3,d0
		move.w	#$7F,d1

loc_C990:				
		move.l	d0,(a1)+
		dbf	d1,loc_C990
		move.l	d0,d4
		move.w	($FFFFA822).w,d0
		addq.w	#4,($FFFFA822).w
		sub.w	d0,d2
		move.w	d2,d0
		move.w	d0,d1
		asr.w	#1,d0
		asr.w	#4,d1
		sub.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		divs.w	#$70,d0
		ext.l	d0
		asl.l	#8,d0
		lea	(v_bgscroll_buffer).w,a2
		moveq	#0,d3
		move.w	d1,d3
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		moveq	#3,d1

loc_C9E4:				
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d1,loc_C9E4
		add.l	d0,d0
		add.l	d0,d0
		move.w	d3,d4
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#6,d1

loc_CA22:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA22
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#7,d1

loc_CA36:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA36
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#9,d1

loc_CA4A:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA4A
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#$E,d1

loc_CA60:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA60
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	#2,d2

loc_CA74:				
		move.w	d3,d4
		move.w	#$F,d1

loc_CA7A:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA7A
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d2,loc_CA74
		rts	
; ===========================================================================

;loc_CA92:
HTZ_Screen_Shake:				
		move.w	(v_bg_x_pos_diff).w,d4
		ext.l	d4
		lsl.l	#8,d4
		moveq	#2,d6
		bsr.w	UpdateBG_Y2
		move.w	(v_bg_y_pos_diff).w,d5
		ext.l	d5
		lsl.l	#8,d5
		moveq	#0,d6
		bsr.w	UpdateBG_Y_Absolute
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.w	(v_camera_y_pos).w,(v_fg_y_pos_vsram).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	loc_CAEE
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0
		lea_	Deform_Ripple_Data,a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

loc_CAEE:				
		lea	(v_hscroll_buffer).w,a1
		move.w	#224-1,d1
		move.w	(v_camera_x_pos).w,d0
		add.w	d2,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		add.w	d2,d0
		neg.w	d0

loc_CB08:				
		move.l	d0,(a1)+
		dbf	d1,loc_CB08
		rts	
; ===========================================================================


Deform_HTZ_2P:				
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#6,d4
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#2,d5
		moveq	#0,d5
		bsr.w	UpdateBG_XY
		move.b	#0,(v_bg1_redraw_direction).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		andi.l	#-$10002,(v_fg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$6F,d1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_CB50:				
		move.l	d0,(a1)+
		dbf	d1,loc_CB50
		move.w	(v_camera_x_diff_p2).w,d4
		ext.l	d4
		asl.l	#6,d4
		add.l	d4,(v_bg1_x_pos_p2).w
		moveq	#0,d0
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		andi.l	#-$10002,(v_fg_y_pos_vsram_p2).w
		lea	($FFFFE1B0).w,a1
		move.w	#$73,d1
		move.w	(v_camera_x_pos_p2).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos_p2).w,d0
		neg.w	d0

loc_CB98:				
		move.l	d0,(a1)+
		dbf	d1,loc_CB98
		rts	
; ===========================================================================

Deform_HPZ:				
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#6,d4
		moveq	#2,d6
		bsr.w	UpdateBG_Y2
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#7,d5
		moveq	#6,d6
		bsr.w	UpdateBG_Y_Absolute
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_bgscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d2
		neg.w	d2
		move.w	d2,d0
		asr.w	#1,d0
		move.w	#7,d1

loc_CBD4:				
		move.w	d0,(a1)+
		dbf	d1,loc_CBD4
		move.w	d2,d0
		asr.w	#3,d0
		sub.w	d2,d0
		ext.l	d0
		asl.l	#3,d0
		divs.w	#8,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w	#1,d3
		lea	($FFFFA860).w,a2
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0
		move.w	#$19,d1

loc_CC36:				
		move.w	d0,(a1)+
		dbf	d1,loc_CC36
		adda.w	#$E,a1
		move.w	d2,d0
		asr.w	#1,d0
		move.w	#$17,d1

loc_CC48:				
		move.w	d0,(a1)+
		dbf	d1,loc_CC48
		lea	(v_bgscroll_buffer).w,a2
		move.w	(v_bg1_y_pos).w,d0
		move.w	d0,d2
		andi.w	#$3F0,d0
		lsr.w	#3,d0
		lea	(a2,d0.w),a2
		bra.w	loc_D69E
; ===========================================================================

Deform_OOZ:				
		move.w	(v_camera_x_diff).w,d0
		ext.l	d0
		asl.l	#5,d0
		add.l	d0,(v_bg1_x_pos).w
		move.w	(v_camera_y_diff).w,d0
		ext.l	d0
		asl.l	#5,d0
		move.l	(v_bg1_y_pos).w,d3
		add.l	d3,d0
		moveq	#4,d6
		bsr.w	UpdateBG_Y_Absolute2
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	($FFFFE380).w,a1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d7
		neg.w	d7
		move.w	(v_bg1_y_pos).w,d1
		subi.w	#$50,d1
		bcc.s	loc_CCAA
		moveq	#0,d1

loc_CCAA:				
		subi.w	#$B0,d1	
		bcs.s	loc_CCB2
		moveq	#0,d1

loc_CCB2:				
		move.w	#$DF,d6	
		add.w	d6,d1
		move.w	d7,d0
		bsr.s	sub_CD1C
		bsr.s	sub_CD10
		bsr.s	sub_CD16
		bsr.s	sub_CD0A
		move.w	d7,d0
		asr.w	#4,d0
		moveq	#6,d1
		bsr.s	sub_CD1C
		move.b	(v_vblank_counter_byte).w,d1
		andi.w	#7,d1
		bne.s	loc_CCD8
		subq.w	#1,(v_bgscroll_buffer).w

loc_CCD8:				
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea	Deform_Ripple_Data(pc),a2
		lea	(a2,d1.w),a2
		moveq	#$20,d1

loc_CCEA:				
		move.b	(a2)+,d0
		ext.w	d0
		move.l	d0,-(a1)
		subq.w	#1,d6
		bmi.s	locret_CD08
		dbf	d1,loc_CCEA
		bsr.s	sub_CD10
		bsr.s	sub_CD16
		bsr.s	sub_CD0A
		bsr.s	sub_CD16
		bsr.s	sub_CD10
		move.w	d7,d0
		moveq	#$47,d1
		bsr.s	sub_CD1C

locret_CD08:				
		rts	

; ===========================================================================


sub_CD0A:								
		move.w	d7,d0
		asr.w	#2,d0
		bra.s	loc_CD1A


; ===========================================================================


sub_CD10:								
		move.w	d7,d0
		asr.w	#3,d0
		bra.s	loc_CD1A


; ===========================================================================


sub_CD16:							
		move.w	d7,d0
		asr.w	#4,d0

loc_CD1A:				
		moveq	#7,d1

; ===========================================================================


sub_CD1C:				
					
		move.l	d0,-(a1)
		subq.w	#1,d6
		bmi.s	loc_CD28
		dbf	d1,sub_CD1C
		rts	
; ===========================================================================

loc_CD28:				
		addq.l	#4,sp
		rts	

; ===========================================================================

Deform_MCZ:				
		tst.w	(f_two_player).w
		bne.w	loc_CE84
		move.w	(v_camera_y_pos).w,d0
		move.l	(v_bg1_y_pos).w,d3
		tst.b	(v_act).w
		bne.s	loc_CD4C
		divu.w	#3,d0
		subi.w	#320,d0
		bra.s	loc_CD54
; ===========================================================================

loc_CD4C:				
		divu.w	#6,d0
		subi.w	#$10,d0

loc_CD54:				
		swap	d0
		moveq	#6,d6
		bsr.w	UpdateBG_Y_Absolute2
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	loc_CD90
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0
		lea_	Deform_Ripple_Data,a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

loc_CD90:				
		lea	(v_bgscroll_buffer).w,a2
		lea	15*2(a2),a3
		move.w	(v_camera_x_pos).w,d0
		
		ext.l	d0
		asl.l	#4,d0
		divs.w	#10,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1

		move.w	d1,(a3)+
		move.w	d1,7*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,5*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,3*2(a2)
		move.w	d1,8*2(a2)
		move.w	d1,14*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2*2(a2)
		move.w	d1,9*2(a2)
		move.w	d1,13*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,1*2(a2)
		move.w	d1,10*2(a2)
		move.w	d1,12*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,0*2(a2)
		move.w	d1,11*2(a2)
		
		lea	(Deform_MCZ_RowHeights).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_CE3E:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_CE3E
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_CE5A:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_CE66
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_CE66:				
		dbf	d2,loc_CE5A
		rts	
; ===========================================================================
Deform_MCZ_RowHeights:	
		dc.b $25					; 0 
		dc.b $17					; 1
		dc.b $12					; 2
		dc.b   7					; 3
		dc.b   7					; 4
		dc.b   2					; 5
		dc.b   2					; 6
		dc.b $30					; 7
		dc.b  $D					; 8
		dc.b $13					; 9
		dc.b $20					; 10
		dc.b $40					; 11
		dc.b $20					; 12
		dc.b $13					; 13
		dc.b  $D					; 14
		dc.b $30					; 15
		dc.b   2					; 16
		dc.b   2					; 17
		dc.b   7					; 18
		dc.b   7					; 19
		dc.b $20					; 20
		dc.b $12					; 21
		dc.b $17					; 22
		dc.b $25					; 23
; ===========================================================================

loc_CE84:				
		moveq	#0,d0
		move.w	(v_camera_y_pos).w,d0
		tst.b	(v_act).w
		bne.s	loc_CE9A
		divu.w	#3,d0
		subi.w	#$140,d0
		bra.s	loc_CEA2
; ===========================================================================

loc_CE9A:				
		divu.w	#6,d0
		subi.w	#$10,d0

loc_CEA2:				
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg_y_pos_vsram).w
		andi.l	#-$10002,(v_fg_y_pos_vsram).w
		lea	(v_bgscroll_buffer).w,a2
		lea	$1E(a2),a3
		move.w	(v_camera_x_pos).w,d0

		ext.l	d0
		asl.l	#4,d0
		divs.w	#10,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1

		move.w	d1,(a3)+
		move.w	d1,7*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,5*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,3*2(a2)
		move.w	d1,8*2(a2)
		move.w	d1,14*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2*2(a2)
		move.w	d1,9*2(a2)
		move.w	d1,13*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,1*2(a2)
		move.w	d1,10*2(a2)
		move.w	d1,12*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,0*2(a2)
		move.w	d1,11*2(a2)
		lea	(byte_CF90).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		lsr.w	#1,d1
		moveq	#0,d0

loc_CF62:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_CF62
		neg.w	d1
		subq.w	#2,a2
		move.w	#$6F,d2
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_CF7E:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_CF8A
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_CF8A:				
		dbf	d2,loc_CF7E
		bra.s	loc_CFA8
; ===========================================================================
byte_CF90:	dc.b $13					; 0 
byte_CF91:	dc.b  $B					; 0 
		dc.b   9					; 1
		dc.b   4					; 2
		dc.b   3					; 3
		dc.b   1					; 4
		dc.b   1					; 5
		dc.b $18					; 6
		dc.b   6					; 7
		dc.b  $A					; 8
		dc.b $10					; 9
		dc.b $20					; 10
		dc.b $10					; 11
		dc.b  $A					; 12
		dc.b   6					; 13
		dc.b $18					; 14
		dc.b   1					; 15
		dc.b   1					; 16
		dc.b   3					; 17
		dc.b   4					; 18
		dc.b $10					; 19
		dc.b   9					; 20
		dc.b  $B					; 21
		dc.b $13					; 22
; ===========================================================================

loc_CFA8:				
		moveq	#0,d0
		move.w	(v_camera_y_pos_p2).w,d0
		tst.b	(v_act).w
		bne.s	loc_CFBE
		divu.w	#3,d0
		subi.w	#$140,d0
		bra.s	loc_CFC6
; ===========================================================================

loc_CFBE:				
		divu.w	#6,d0
		subi.w	#$10,d0

loc_CFC6:				
		move.w	d0,(v_bg1_y_pos_p2).w
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		andi.l	#-$10002,(v_fg_y_pos_vsram_p2).w
		lea	(v_bgscroll_buffer).w,a2
		lea	$1E(a2),a3
		move.w	(v_camera_x_pos_p2).w,d0
		
		ext.l	d0
		asl.l	#4,d0
		divs.w	#10,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1

		move.w	d1,(a3)+
		move.w	d1,7*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,5*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,3*2(a2)
		move.w	d1,8*2(a2)
		move.w	d1,14*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2*2(a2)
		move.w	d1,9*2(a2)
		move.w	d1,13*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,1*2(a2)
		move.w	d1,10*2(a2)
		move.w	d1,12*2(a2)

		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,0*2(a2)
		move.w	d1,11*2(a2)
		
		lea_	byte_CF91,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	($FFFFE1B0).w,a1
		move.w	(v_bg1_y_pos_p2).w,d1
		lsr.w	#1,d1
		moveq	#$17,d0
		bra.s	loc_D09A
; ===========================================================================

loc_D098:				
		move.b	(a3)+,d0

loc_D09A:				
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D098
		neg.w	d1
		subq.w	#2,a2
		move.w	#$73,d2
		move.w	(v_camera_x_pos_p2).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D0B4:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D0C0
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_D0C0:				
		dbf	d2,loc_D0B4
		rts	
; ===========================================================================

Deform_CNZ:				
		tst.w	(f_two_player).w
		bne.w	loc_D194
		move.w	(v_camera_y_pos).w,d0
		lsr.w	#6,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.w	(v_camera_x_pos).w,d2
		bsr.w	sub_D160
		lea	(byte_D156).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_D0FA:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D0FA
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D116:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D124

loc_D11C:				
		move.w	(a2)+,d0
		neg.w	d0
		move.b	(a3)+,d1
		beq.s	loc_D12A

loc_D124:				
		dbf	d2,loc_D116
		rts	
; ===========================================================================

loc_D12A:				
		move.w	#$F,d1
		move.w	d0,d3
		move.b	(v_vblank_counter_byte).w,d0
		lsr.w	#3,d0
		neg.w	d0
		andi.w	#$1F,d0
		lea_	Deform_Ripple_Data,a4
		lea	(a4,d0.w),a4

loc_D144:				
		move.b	(a4)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_D144
		subi.w	#$10,d2
		bra.s	loc_D11C
; ===========================================================================
byte_D156:	
		dc.b $10					; 0 
		dc.b $10					; 1
		dc.b $10					; 2
		dc.b $10					; 3
		dc.b $10					; 4
		dc.b $10					; 5
		dc.b $10					; 6
		dc.b $10					; 7
		dc.b   0					; 8
		dc.b $F0					; 9

; ===========================================================================


sub_D160:				
					
		lea	(v_bgscroll_buffer).w,a1
		move.w	d2,d0
		asr.w	#3,d0
		sub.w	d2,d0
		ext.l	d0
		asl.l	#5,d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		move.w	#6,d1

loc_D178:				
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d1,loc_D178
		move.w	d2,d0
		asr.w	#3,d0
		move.w	d0,4(a1)
		asr.w	#1,d0
		move.w	d0,(a1)+
		move.w	d0,(a1)+
		rts	

; ===========================================================================

loc_D194:				
		move.w	(v_camera_y_pos).w,d0
		lsr.w	#6,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		andi.l	#-$10002,(v_fg_y_pos_vsram).w
		move.w	(v_camera_x_pos).w,d2
		bsr.w	sub_D160
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0
		move.w	(v_camera_x_pos).w,d0
		move.w	#$6F,d2
		lea	(byte_D270+2).l,a3
		bsr.s	sub_D216
		move.w	(v_camera_y_pos_p2).w,d0
		lsr.w	#6,d0
		move.w	d0,(v_bg1_y_pos_p2).w
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		andi.l	#-$10002,(v_fg_y_pos_vsram_p2).w
		move.w	(v_camera_x_pos_p2).w,d2
		bsr.w	sub_D160
		lea	($FFFFE1B0).w,a1
		move.w	(v_bg1_y_pos_p2).w,d1
		moveq	#0,d0
		move.w	(v_camera_x_pos_p2).w,d0
		move.w	#$73,d2
		lea	(byte_D270+1).l,a3

; ===========================================================================


sub_D216:				
		lsr.w	#1,d1
		lea	(v_bgscroll_buffer).w,a2
		moveq	#0,d3

loc_D21E:				
		move.b	(a3)+,d3
		addq.w	#2,a2
		sub.w	d3,d1
		bcc.s	loc_D21E
		neg.w	d1
		subq.w	#2,a2
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D232:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D240

loc_D238:				
		move.w	(a2)+,d0
		neg.w	d0
		move.b	(a3)+,d1
		beq.s	loc_D246

loc_D240:				
		dbf	d2,loc_D232
		rts	
; ===========================================================================

loc_D246:				
		move.w	#7,d1
		move.w	d0,d3
		move.b	(v_vblank_counter_byte).w,d0
		lsr.w	#3,d0
		neg.w	d0
		andi.w	#$1F,d0
		lea_	Deform_Ripple_Data,a4
		lea	(a4,d0.w),a4

loc_D260:				
		move.b	(a4)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_D260
		subq.w	#8,d2
		bra.s	loc_D238

; ===========================================================================
byte_D270:	
		dc.b   4					; 0 			
		dc.b   4					; 1
		dc.b   8					; 2
		dc.b   8					; 3
		dc.b   8					; 4
		dc.b   8					; 5
		dc.b   8					; 6
		dc.b   8					; 7
		dc.b   8					; 8
		dc.b   8					; 9
		dc.b   0					; 10
		dc.b $78					; 11
; ===========================================================================

Deform_CPZ:				
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	UpdateBG_XY
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#7,d4
		moveq	#4,d6
		bsr.w	UpdateBG_X_Block2
		move.w	(v_bg1_y_pos).w,d0
		move.w	d0,(v_bg2_y_pos).w
		move.w	d0,(v_bg_y_pos_vsram).w
		move.b	(v_bg1_redraw_direction).w,d0
		or.b	(v_bg2_redraw_direction).w,d0
		move.b	d0,(v_bg3_redraw_direction).w
		clr.b	(v_bg1_redraw_direction).w
		clr.b	(v_bg2_redraw_direction).w
		move.b	(v_vblank_counter_byte).w,d1
		andi.w	#7,d1
		bne.s	loc_D2CC
		subq.w	#1,(v_bgscroll_buffer).w

loc_D2CC:				
		lea	(byte_DDD1).l,a0
		move.w	(v_bg1_y_pos).w,d0
		move.w	d0,d2
		andi.w	#$3F0,d0
		lsr.w	#4,d0
		lea	(a0,d0.w),a0
		move.w	d0,d4
		lea	(v_hscroll_buffer).w,a1
		move.w	#$E,d1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		andi.w	#$F,d2
		move.w	(v_bg1_x_pos).w,d0
		cmpi.b	#$12,d4
		beq.s	loc_D34A
		bcs.s	loc_D308
		move.w	(v_bg2_x_pos).w,d0

loc_D308:				
		neg.w	d0
		add.w	d2,d2
		jmp	loc_D322(pc,d2.w)
; ===========================================================================

loc_D310:				
					
		move.w	(v_bg1_x_pos).w,d0
		cmpi.b	#$12,d4
		beq.s	loc_D354
		bcs.s	loc_D320
		move.w	(v_bg2_x_pos).w,d0

loc_D320:				
		neg.w	d0

loc_D322:
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		addq.b	#1,d4
		dbf	d1,loc_D310
		rts	
; ===========================================================================

loc_D34A:				
		move.w	#$F,d0
		sub.w	d2,d0
		move.w	d0,d2
		bra.s	loc_D358
; ===========================================================================

loc_D354:				
		move.w	#$F,d2

loc_D358:				
		move.w	(v_bg1_x_pos).w,d3
		neg.w	d3
		move.w	(v_bgscroll_buffer).w,d0
		andi.w	#$1F,d0
		lea_	Deform_Ripple_Data,a2
		lea	(a2,d0.w),a2

loc_D36E:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d2,loc_D36E
		addq.b	#1,d4
		dbf	d1,loc_D310
		rts	
; ===========================================================================

Deform_DEZ:									
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#8,d4
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#8,d5
		bsr.w	UpdateBG_XY
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.w	(v_camera_x_pos).w,d4
		lea	(v_bgscroll_buffer).w,a2
		move.w	d4,(a2)+
		addq.w	#3,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		addq.w	#1,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#2,(a2)+
		addq.w	#6,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#1,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		addq.w	#3,(a2)+
		addq.w	#2,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#1,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#2,(a2)+
		addq.w	#1,(a2)
		move.w	(a2)+,d0
		moveq	#0,d1
		move.w	d0,d1
		lsr.w	#1,d0
		move.w	d0,(a2)+
		addq.w	#3,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		swap	d1
		move.l	d1,d0
		lsr.l	#3,d1
		sub.l	d1,d0
		swap	d0
		move.w	d0,4(a2)
		swap	d0
		sub.l	d1,d0
		swap	d0
		move.w	d0,2(a2)
		swap	d0
		sub.l	d1,d0
		swap	d0
		move.w	d0,(a2)+
		addq.w	#4,a2
		addq.w	#1,(a2)+
		move.w	d4,(a2)+
		move.w	d4,(a2)+
		move.w	d4,(a2)+
		lea	(byte_D48A).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_D424:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D424
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D440:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D44C
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_D44C:				
		dbf	d2,loc_D440
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	locret_D488
		subq.w	#1,($FFFFF660).w
		bpl.s	loc_D462
		clr.b	(f_screen_shake).w

loc_D462:				
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0
		lea_	Deform_Ripple_Data,a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

locret_D488:				
		rts	
; ===========================================================================
byte_D48A:	dc.b $80					; 0 
		dc.b   8					; 1
		dc.b   8					; 2
		dc.b   8					; 3
		dc.b   8					; 4
		dc.b   8					; 5
		dc.b   8					; 6
		dc.b   8					; 7
		dc.b   8					; 8
		dc.b   8					; 9
		dc.b   8					; 10
		dc.b   8					; 11
		dc.b   8					; 12
		dc.b   8					; 13
		dc.b   8					; 14
		dc.b   8					; 15
		dc.b   8					; 16
		dc.b   8					; 17
		dc.b   8					; 18
		dc.b   8					; 19
		dc.b   8					; 20
		dc.b   8					; 21
		dc.b   8					; 22
		dc.b   8					; 23
		dc.b   8					; 24
		dc.b   8					; 25
		dc.b   8					; 26
		dc.b   8					; 27
		dc.b   8					; 28
		dc.b   3					; 29
		dc.b   5					; 30
		dc.b   8					; 31
		dc.b $10					; 32
		dc.b $80					; 33
		dc.b $80					; 34
		dc.b $80					; 35
; ===========================================================================

Deform_ARZ:				
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		muls.w	#$119,d4
		moveq	#2,d6
		bsr.w	UpdateBG_Y_Absolute_ARZ
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#7,d5
		tst.b	(v_act).w
		bne.s	loc_D4CE
		asl.l	#1,d5

loc_D4CE:				
		moveq	#6,d6
		bsr.w	UpdateBG_Y_Absolute
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	loc_D508
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0
		lea_	Deform_Ripple_Data,a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

loc_D508:				
		lea	(v_bgscroll_buffer).w,a2
		lea	6(a2),a3
		move.w	(v_camera_x_pos).w,d0
		ext.l	d0
		asl.l	#4,d0
		divs.w	#$A,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d1,d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,4(a2)
		move.w	(v_bg1_x_pos).w,d0
		move.w	d0,2(a2)
		move.w	d0,$16(a2)
		_move.w	d0,0(a2)
		move.w	d0,4(a2)
		move.w	d0,$18(a2)
		move.w	d0,$1A(a2)
		move.w	d0,$1C(a2)
		move.w	d0,$1E(a2)
		lea	(byte_D5CE).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_D5A0:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D5A0
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D5BC:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D5C8
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_D5C8:				
		dbf	d2,loc_D5BC
		rts	
; ===========================================================================
byte_D5CE:	dc.b $B0					; 0 
		dc.b $70					; 1
		dc.b $30					; 2
		dc.b $60					; 3
		dc.b $15					; 4
		dc.b  $C					; 5
		dc.b  $E					; 6
		dc.b   6					; 7
		dc.b  $C					; 8
		dc.b $1F					; 9
		dc.b $30					; 10
		dc.b $C0					; 11
		dc.b $F0					; 12
		dc.b $F0					; 13
		dc.b $F0					; 14
		dc.b $F0					; 15
; ===========================================================================

Deform_SCZ:				
		tst.w	(v_debug_active).w
		bne.w	Deform_Minimal
		lea	(v_camera_x_pos).w,a1
		lea	(v_fg_redraw_direction).w,a3
		lea	(v_camera_x_diff).w,a4
		move.w	(v_tornado_x_vel).w,d0
		move.w	(a1),d4
		add.w	(a1),d0
		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		lea	(v_fg_x_redraw_flag).w,a2
		bsr.w	sub_D6E2
		lea	(v_camera_y_pos).w,a1
		lea	(v_camera_y_diff).w,a4
		move.w	(v_tornado_y_vel).w,d0
		move.w	(a1),d4
		add.w	(a1),d0
		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		lea	(v_fg_y_redraw_flag).w,a2
		bsr.w	sub_D878
		move.w	(v_camera_x_diff).w,d4
		beq.s	loc_D638
		move.w	#$100,d4

loc_D638:				
		ext.l	d4
		asl.l	#7,d4
		moveq	#0,d5
		bsr.w	UpdateBG_XY
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_D65E:				
		move.l	d0,(a1)+
		dbf	d1,loc_D65E
		rts	
; ===========================================================================

Deform_Minimal:				
					
		move.w	(v_camera_x_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	UpdateBG_XY
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_D696:				
		move.l	d0,(a1)+
		dbf	d1,loc_D696
		rts	
; ===========================================================================

loc_D69E:				
		lea	(v_hscroll_buffer).w,a1
		move.w	#$E,d1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		andi.w	#$F,d2
		add.w	d2,d2
		move.w	(a2)+,d0
		jmp	loc_D6BC(pc,d2.w)
; ===========================================================================

loc_D6BA:				
		move.w	(a2)+,d0

loc_D6BC:
		rept 16
		move.l	d0,(a1)+
		endr
		dbf	d1,loc_D6BA
		rts	

; ===========================================================================


sub_D6E2:				
		move.w	(a1),d0
		andi.w	#$10,d0
		move.b	(a2),d1
		eor.b	d1,d0
		bne.s	locret_D702
		eori.b	#$10,(a2)
		move.w	(a1),d0
		sub.w	d4,d0
		bpl.s	loc_D6FE
		bset	#2,(a3)
		rts	
; ===========================================================================

loc_D6FE:				
		bset	#3,(a3)

locret_D702:				
		rts	


; ===========================================================================


sub_D704:				
		move.w	(a1),d4
		tst.b	(f_teleport_flag).w
		bne.s	locret_D742
		move.w	(a5),d1
		beq.s	loc_D72E
		subi.w	#$100,d1
		move.w	d1,(a5)
		moveq	#0,d1
		move.b	(a5),d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	2(a5),d0
		sub.b	d1,d0
		move.w	(a6,d0.w),d0
		andi.w	#$3FFF,d0
		bra.s	loc_D732
; ===========================================================================

loc_D72E:				
		move.w	ost_x_pos(a0),d0

loc_D732:				
		sub.w	(a1),d0
		subi.w	#$90,d0	
		blt.s	loc_D744
		subi.w	#$10,d0
		bge.s	loc_D758
		clr.w	(a4)

locret_D742:				
		rts	
; ===========================================================================

loc_D744:				
		cmpi.w	#-$10,d0
		bgt.s	loc_D74E
		move.w	#-$10,d0

loc_D74E:				
		add.w	(a1),d0
		cmp.w	(a2),d0
		bgt.s	loc_D76E
		move.w	(a2),d0
		bra.s	loc_D76E
; ===========================================================================

loc_D758:				
		cmpi.w	#$10,d0
		bcs.s	loc_D762
		move.w	#$10,d0

loc_D762:				
		add.w	(a1),d0
		cmp.w	v_boundary_right_next-v_boundary_left_next(a2),d0
		blt.s	loc_D76E
		move.w	v_boundary_right_next-v_boundary_left_next(a2),d0

loc_D76E:				
		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		rts	


; ===========================================================================


sub_D77A:				
		moveq	#0,d1
		move.w	ost_y_pos(a0),d0
		sub.w	(a1),d0
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_D78E
		andi.w	#$7FF,d0

loc_D78E:				
		btst	#2,$22(a0)
		beq.s	loc_D798
		subq.w	#5,d0

loc_D798:				
		btst	#1,$22(a0)
		beq.s	loc_D7B6
		addi.w	#$20,d0
		sub.w	d3,d0
		bcs.s	loc_D7FC
		subi.w	#$40,d0
		bcc.s	loc_D7FC
		tst.b	(f_boundary_bottom_change).w
		bne.s	loc_D80E
		bra.s	loc_D7C0
; ===========================================================================

loc_D7B6:				
		sub.w	d3,d0
		bne.s	loc_D7C4
		tst.b	(f_boundary_bottom_change).w
		bne.s	loc_D80E

loc_D7C0:				
		clr.w	(a4)
		rts	
; ===========================================================================

loc_D7C4:				
		cmpi.w	#$60,d3
		bne.s	loc_D7EA
		move.w	ost_inertia(a0),d1
		bpl.s	loc_D7D2
		neg.w	d1

loc_D7D2:				
		cmpi.w	#$800,d1
		bcc.s	loc_D7FC
		move.w	#$600,d1
		cmpi.w	#6,d0
		bgt.s	loc_D84A
		cmpi.w	#-6,d0
		blt.s	loc_D824
		bra.s	loc_D814
; ===========================================================================

loc_D7EA:				
		move.w	#$200,d1
		cmpi.w	#2,d0
		bgt.s	loc_D84A
		cmpi.w	#-2,d0
		blt.s	loc_D824
		bra.s	loc_D814
; ===========================================================================

loc_D7FC:				
		move.w	#$1000,d1
		cmpi.w	#$10,d0
		bgt.s	loc_D84A
		cmpi.w	#-$10,d0
		blt.s	loc_D824
		bra.s	loc_D814
; ===========================================================================

loc_D80E:				
		moveq	#0,d0
		move.b	d0,(f_boundary_bottom_change).w

loc_D814:				
		moveq	#0,d1
		move.w	d0,d1
		add.w	(a1),d1
		tst.w	d0
		bpl.w	loc_D852
		bra.w	loc_D82E
; ===========================================================================

loc_D824:				
		neg.w	d1
		ext.l	d1
		asl.l	#8,d1
		add.l	(a1),d1
		swap	d1

loc_D82E:				
		cmp.w	v_boundary_top_next-v_boundary_left_next(a2),d1
		bgt.s	loc_D868
		cmpi.w	#-$100,d1
		bgt.s	loc_D844
		andi.w	#$7FF,d1
		andi.w	#$7FF,(a1)
		bra.s	loc_D868
; ===========================================================================

loc_D844:				
		move.w	v_boundary_top_next-v_boundary_left_next(a2),d1
		bra.s	loc_D868
; ===========================================================================

loc_D84A:				
		ext.l	d1
		asl.l	#8,d1
		add.l	(a1),d1
		swap	d1

loc_D852:				
		cmp.w	v_boundary_bottom-v_boundary_left_next(a2),d1
		blt.s	loc_D868
		subi.w	#$800,d1
		bcs.s	loc_D864
		subi.w	#$800,(a1)
		bra.s	loc_D868
; ===========================================================================

loc_D864:				
		move.w	v_boundary_bottom-v_boundary_left_next(a2),d1

loc_D868:				
		move.w	(a1),d4
		swap	d1
		move.l	d1,d3
		sub.l	(a1),d3
		ror.l	#8,d3
		move.w	d3,(a4)
		move.l	d1,(a1)
		rts	


; ===========================================================================


sub_D878:				
		move.w	(a1),d0
		andi.w	#$10,d0
		move.b	(a2),d1
		eor.b	d1,d0
		bne.s	locret_D898
		eori.b	#$10,(a2)
		move.w	(a1),d0
		sub.w	d4,d0
		bpl.s	loc_D894
		bset	#0,(a3)
		rts	
; ===========================================================================

loc_D894:				
		bset	#1,(a3)

locret_D898:				
		rts	


; ===========================================================================

; SetHorizVertiScrollFlagsBG:
UpdateBG_XY:						
		move.l	(v_bg1_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg1_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	UpdateBG_Y
		eori.b	#$10,(v_bg1_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_D8C8
		bset	#2,(v_bg1_redraw_direction).w
		bra.s	UpdateBG_Y

	loc_D8C8:				
		bset	#3,(v_bg1_redraw_direction).w

UpdateBG_Y:				
		move.l	(v_bg1_y_pos).w,d3
		move.l	d3,d0
		add.l	d5,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_y_redraw_flag).w,d2
		eor.b	d2,d1
		bne.s	locret_D902
		eori.b	#$10,(v_bg1_y_redraw_flag).w
		sub.l	d3,d0
		bpl.s	loc_D8FC
		bset	#0,(v_bg1_redraw_direction).w
		rts	

	loc_D8FC:				
		bset	#1,(v_bg1_redraw_direction).w

	locret_D902:				
		rts	


; ===========================================================================

; SetHorizScrollFlagsBG:
UpdateBG_Y2:							
		move.l	(v_bg1_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg1_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_D936
		eori.b	#$10,(v_bg1_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_D930
		bset	d6,(v_bg1_redraw_direction).w
		bra.s	locret_D936

	loc_D930:				
		addq.b	#1,d6
		bset	d6,(v_bg1_redraw_direction).w

	locret_D936:				
		rts	


; ===========================================================================

; SetHorizScrollFlagsBG:
UpdateBG_Y_Absolute:								
		move.l	(v_bg1_y_pos).w,d3
		move.l	d3,d0
		add.l	d5,d0

UpdateBG_Y_Absolute2:							
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_y_redraw_flag).w,d2
		eor.b	d2,d1
		bne.s	locret_D96A
		eori.b	#$10,(v_bg1_y_redraw_flag).w
		sub.l	d3,d0
		bpl.s	loc_D964
		bset	d6,(v_bg1_redraw_direction).w
		rts	

	loc_D964:				
		addq.b	#1,d6
		bset	d6,(v_bg1_redraw_direction).w

	locret_D96A:				
		rts	


; ===========================================================================

;SetHorizScrollFlagsBG_ARZ:
UpdateBG_Y_Absolute_ARZ:				
		move.l	(v_camera_arz_bg_x_pos).w,d0
		add.l	d4,d0
		move.l	d0,(v_camera_arz_bg_x_pos).w
		lea	(v_bg1_x_pos).w,a1
		move.w	(a1),d2
		move.w	(v_camera_arz_bg_x_pos).w,d0
		sub.w	d2,d0
		bcs.s	loc_D988
		bhi.s	loc_D994
		rts	

	loc_D988:				
		cmpi.w	#-$10,d0
		bgt.s	loc_D99E
		move.w	#-$10,d0
		bra.s	loc_D99E


	loc_D994:				
		cmpi.w	#$10,d0
		bcs.s	loc_D99E
		move.w	#$10,d0

	loc_D99E:				
		add.w	(a1),d0
		move.w	d0,(a1)
		move.w	d0,d1
		andi.w	#$10,d1
		move.b	(v_bg1_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_D9C6
		eori.b	#$10,(v_bg1_x_redraw_flag).w
		sub.w	d2,d0
		bpl.s	loc_D9C0
		bset	d6,(v_bg1_redraw_direction).w
		bra.s	locret_D9C6

	loc_D9C0:				
		addq.b	#1,d6
		bset	d6,(v_bg1_redraw_direction).w

	locret_D9C6:				
		rts	


; ===========================================================================
; SetHorizScrollFlagsBG2:
UpdateBG_X_Block2:				
		move.l	(v_bg2_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg2_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg2_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_D9FA
		eori.b	#$10,(v_bg2_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_D9F4
		bset	d6,(v_bg2_redraw_direction).w
		bra.s	locret_D9FA

	loc_D9F4:				
		addq.b	#1,d6
		bset	d6,(v_bg2_redraw_direction).w

	locret_D9FA:				
		rts	


; ===========================================================================
; Unused Sonic 1 leftover - code to update BG block 3
;UpdateBG_X_Block3:
		move.l	(v_bg3_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg3_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg3_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_DA2E
		eori.b	#$10,(v_bg3_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_DA28
		bset	d6,(v_bg3_redraw_direction).w
		bra.s	locret_DA2E

	loc_DA28:				
		addq.b	#1,d6
		bset	d6,(v_bg3_redraw_direction).w

	locret_DA2E:							
		rts	
; ===========================================================================
; Unused Sonic 1 leftover: first ten lines of that game's version of
; DrawTilesWhenMoving.
		lea	(vdp_control_port).l,a5
		lea	(vdp_data_port).l,a6
		lea	(v_bg1_redraw_direction).w,a2
		lea	(v_bg1_x_pos).w,a3
		lea	($FFFF8080).w,a4
		move.w	#$6000,d2
		bsr.w	DrawBGScrollBlock1
		lea	(v_bg2_redraw_direction).w,a2
		lea	(v_bg2_x_pos).w,a3
		bra.w	DrawBGScrollBlock2
; ===========================================================================

; loc_DA5C: LoadTilesAsYouMove:
DrawTilesWhenMoving:				
		lea	(vdp_control_port).l,a5
		lea	(vdp_data_port).l,a6
		lea	(v_bg1_redraw_direction_copy).w,a2
		lea	(v_camera_pos_bg_copy).w,a3
		lea	(v_level_layout+level_max_width).w,a4
		move.w	#$6000,d2
		bsr.w	DrawBGScrollBlock1
		
		lea	(v_bg2_redraw_direction_copy).w,a2
		lea	(v_camera_pos_bg2_copy).w,a3
		bsr.w	DrawBGScrollBlock2
		
		lea	(v_bg3_redraw_direction_copy).w,a2
		lea	(v_camera_pos_bg3_copy).w,a3
		bsr.w	DrawBGScrollBlock3
		
		tst.w	(f_two_player).w
		beq.s	loc_DAAE
		lea	(v_fg_redraw_direction_p2_copy).w,a2
		lea	(v_camera_pos_p2_copy).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$6000,d2
		bsr.w	DrawFG_P2

loc_DAAE:				
		lea	(v_fg_redraw_direction_copy).w,a2
		lea	(v_camera_pos_copy).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$4000,d2
		tst.b	(f_screen_redraw).w
		beq.s	DrawFG
		move.b	#0,(f_screen_redraw).w
		moveq	#-$10,d4
		moveq	#$F,d6

loc_DACE:				
		movem.l	d4-d6,-(sp)
		moveq	#-$10,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P1
		move.w	d1,d4
		moveq	#-$10,d5
		bsr.w	DrawRow
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_DACE
		move.b	#0,(v_fg_redraw_direction_copy).w
		rts	
; ===========================================================================

DrawFG:				
		tst.b	(a2)
		beq.s	locret_DB5A
		bclr	#0,(a2)
		beq.s	loc_DB10
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	DrawRow

loc_DB10:				
		bclr	#1,(a2)
		beq.s	loc_DB2A
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	DrawRow

loc_DB2A:				
		bclr	#2,(a2)
		beq.s	loc_DB40
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	DrawColumn

loc_DB40:				
		bclr	#3,(a2)
		beq.s	locret_DB5A
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	DrawColumn

locret_DB5A:				
					
		rts	

; ===========================================================================


DrawFG_P2:				
		tst.b	(a2)
		beq.s	locret_DBC0
		bclr	#0,(a2)
		beq.s	loc_DB76
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P2
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	DrawRow

loc_DB76:				
		bclr	#1,(a2)
		beq.s	loc_DB90
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P2
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	DrawRow

loc_DB90:				
		bclr	#2,(a2)
		beq.s	loc_DBA6
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P2
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	DrawColumn

loc_DBA6:				
		bclr	#3,(a2)
		beq.s	locret_DBC0
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P2
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	DrawColumn

locret_DBC0:				
		rts	

; ===========================================================================


DrawBGScrollBlock1:								
		tst.b	(a2)
		beq.w	locret_DC90
		bclr	#0,(a2)
		beq.s	loc_DBDE
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	DrawRow

loc_DBDE:				
		bclr	#1,(a2)
		beq.s	loc_DBF8
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	DrawRow

loc_DBF8:				
		bclr	#2,(a2)
		beq.s	loc_DC0E
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	DrawColumn

loc_DC0E:				
		bclr	#3,(a2)
		beq.s	loc_DC28
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	DrawColumn

loc_DC28:				
		bclr	#4,(a2)
		beq.s	loc_DC40
		moveq	#-$10,d4
		moveq	#0,d5
		bsr.w	Calc_VRAM_Pos_AbsoluteX
		moveq	#-$10,d4
		moveq	#0,d5
		moveq	#$1F,d6
		bsr.w	DrawRow_Partial

loc_DC40:				
		bclr	#5,(a2)
		beq.s	loc_DC5C
		move.w	#$E0,d4	
		moveq	#0,d5
		bsr.w	Calc_VRAM_Pos_AbsoluteX
		move.w	#$E0,d4	
		moveq	#0,d5
		moveq	#$1F,d6
		bsr.w	DrawRow_Partial

loc_DC5C:				
		bclr	#6,(a2)
		beq.s	loc_DC74
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A

loc_DC74:				
		bclr	#7,(a2)
		beq.s	locret_DC90
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$E0,d4	
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A

locret_DC90:				
		rts	

; ===========================================================================


DrawBGScrollBlock2:				
					
		tst.b	(a2)
		beq.w	locret_DCD4
		
; Unused Sonic 1 leftover: used by Green Hill and Spring Yard Zones.		
		bclr	#0,(a2)
		beq.s	loc_DCB4
		move.w	#$70,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$70,d4
		moveq	#-$10,d5
		moveq	#2,d6
		bsr.w	DrawColumn_Partial

	loc_DCB4:				
		bclr	#1,(a2)
		beq.s	locret_DCD4
		move.w	#$70,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$70,d4
		move.w	#$140,d5
		moveq	#2,d6
		bsr.w	DrawColumn_Partial

locret_DCD4:				
		rts	

; ===========================================================================
; Unused Sonic 1 leftover - Scrap Brain Zone 1 block positioning array

byte_DCD6:	
		dc.b   0					; 0 
byte_DCD7:	
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b   0					; 3
		dc.b   6					; 4
		dc.b   6					; 5
		dc.b   6					; 6
		dc.b   6					; 7
		dc.b   6					; 8
		dc.b   6					; 9
		dc.b   6					; 10
		dc.b   6					; 11
		dc.b   6					; 12
		dc.b   6					; 13
		dc.b   4					; 14
		dc.b   4					; 15
		dc.b   4					; 16
		dc.b   4					; 17
		dc.b   4					; 18
		dc.b   4					; 19
		dc.b   4					; 20
		dc.b   2					; 21
		dc.b   2					; 22
		dc.b   2					; 23
		dc.b   2					; 24
		dc.b   2					; 25
		dc.b   2					; 26
		dc.b   2					; 27
		dc.b   2					; 28
		dc.b   2					; 29
		dc.b   2					; 30
		dc.b   2					; 31
		dc.b   0					; 32
; ===========================================================================
; Unused Sonic 1 leftover: SBZ1 background drawer

;DrawBGScrollBlock2_SBZ:
		moveq	#-$10,d4
		bclr	#0,(a2)
		bne.s	loc_DD0A
		bclr	#1,(a2)
		beq.s	loc_DD52
		move.w	#$E0,d4	

loc_DD0A:				
		lea_	byte_DCD7,a0
		move.w	(v_bg1_y_pos).w,d0
		add.w	d4,d0
		andi.w	#$1F0,d0
		lsr.w	#4,d0
		move.b	(a0,d0.w),d0
		lea	(word_DE7E).l,a3
		movea.w	(a3,d0.w),a3
		beq.s	loc_DD3E
		moveq	#-$10,d5
		movem.l	d4-d5,-(sp)
		bsr.w	Calc_VRAM_Pos_P1
		movem.l	(sp)+,d4-d5
		bsr.w	DrawRow
		bra.s	loc_DD52
; ===========================================================================

loc_DD3E:				
		moveq	#0,d5
		movem.l	d4-d5,-(sp)
		bsr.w	Calc_VRAM_Pos_AbsoluteX
		movem.l	(sp)+,d4-d5
		moveq	#$1F,d6
		bsr.w	DrawRow_Partial

loc_DD52:				
					
		tst.b	(a2)
		bne.s	loc_DD58
		rts	
; ===========================================================================

loc_DD58:				
		moveq	#-$10,d4
		moveq	#-$10,d5
		move.b	(a2),d0
		andi.b	#-$58,d0
		beq.s	loc_DD6C
		lsr.b	#1,d0
		move.b	d0,(a2)
		move.w	#$140,d5

loc_DD6C:				
		lea_	byte_DCD6,a0
		move.w	(v_bg1_y_pos).w,d0
		andi.w	#$1F0,d0
		lsr.w	#4,d0
		lea	(a0,d0.w),a0
		bra.w	loc_DE86

; ===========================================================================


DrawBGScrollBlock3:				
		tst.b	(a2)
		beq.w	locret_DDCE
		cmpi.b	#id_CPZ,(v_zone).w
		beq.w	loc_DE12
		bclr	#0,(a2)
		beq.s	loc_DDAE
		move.w	#$40,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$40,d4
		moveq	#-$10,d5
		moveq	#2,d6
		bsr.w	DrawColumn_Partial

loc_DDAE:				
		bclr	#1,(a2)
		beq.s	locret_DDCE
		move.w	#$40,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$40,d4
		move.w	#$140,d5
		moveq	#2,d6
		bsr.w	DrawColumn_Partial

locret_DDCE:				
		rts	
; ===========================================================================
byte_DDD0:	dc.b 2			
byte_DDD1:	dc.b   2					; 0 
					
		dc.b   2					; 1
		dc.b   2					; 2
		dc.b   2					; 3
		dc.b   2					; 4
		dc.b   2					; 5
		dc.b   2					; 6
		dc.b   2					; 7
		dc.b   2					; 8
		dc.b   2					; 9
		dc.b   2					; 10
		dc.b   2					; 11
		dc.b   2					; 12
		dc.b   2					; 13
		dc.b   2					; 14
		dc.b   2					; 15
		dc.b   2					; 16
		dc.b   2					; 17
		dc.b   2					; 18
		dc.b   4					; 19
		dc.b   4					; 20
		dc.b   4					; 21
		dc.b   4					; 22
		dc.b   4					; 23
		dc.b   4					; 24
		dc.b   4					; 25
		dc.b   4					; 26
		dc.b   4					; 27
		dc.b   4					; 28
		dc.b   4					; 29
		dc.b   4					; 30
		dc.b   4					; 31
		dc.b   4					; 32
		dc.b   4					; 33
		dc.b   4					; 34
		dc.b   4					; 35
		dc.b   4					; 36
		dc.b   4					; 37
		dc.b   4					; 38
		dc.b   4					; 39
		dc.b   4					; 40
		dc.b   4					; 41
		dc.b   4					; 42
		dc.b   4					; 43
		dc.b   4					; 44
		dc.b   4					; 0
		dc.b   4					; 1
		dc.b   4					; 2
		dc.b   4					; 3
		dc.b   4					; 4
		dc.b   4					; 5
		dc.b   4					; 6
		dc.b   4					; 7
		dc.b   4					; 8
		dc.b   4					; 9
		dc.b   4					; 10
		dc.b   4					; 11
		dc.b   4					; 12
		dc.b   4					; 13
		dc.b   4					; 14
		dc.b   4					; 15
		dc.b   4					; 16
		dc.b   4					; 17
		dc.b   4					; 18
		dc.b   0					; 19
; ===========================================================================

loc_DE12:				
		moveq	#-$10,d4
		bclr	#0,(a2)
		bne.s	loc_DE24
		bclr	#1,(a2)
		beq.s	loc_DE4E
		move.w	#$E0,d4	

loc_DE24:				
		lea_	byte_DDD1,a0
		move.w	(v_bg1_y_pos).w,d0
		add.w	d4,d0
		andi.w	#$3F0,d0
		lsr.w	#4,d0
		move.b	(a0,d0.w),d0
		movea.w	word_DE7E(pc,d0.w),a3
		moveq	#-$10,d5
		movem.l	d4-d5,-(sp)
		bsr.w	Calc_VRAM_Pos_P1
		movem.l	(sp)+,d4-d5
		bsr.w	DrawRow

loc_DE4E:				
		tst.b	(a2)
		bne.s	loc_DE54
		rts	
; ===========================================================================

loc_DE54:				
		moveq	#-$10,d4
		moveq	#-$10,d5
		move.b	(a2),d0
		andi.b	#-$58,d0
		beq.s	loc_DE68
		lsr.b	#1,d0
		move.b	d0,(a2)
		move.w	#$140,d5

loc_DE68:				
		lea_	byte_DDD0,a0
		move.w	(v_bg1_y_pos).w,d0
		andi.w	#$7F0,d0
		lsr.w	#4,d0
		lea	(a0,d0.w),a0
		bra.w	loc_DE86
; ===========================================================================
word_DE7E:	dc.w $EE68					; 0 
		dc.w $EE68					; 1
		dc.w $EE70					; 2
		dc.w $EE78					; 3
; ===========================================================================

loc_DE86:				
					
		tst.w	(f_two_player).w
		bne.s	loc_DEC8
		moveq	#$F,d6
		move.l	#$800000,d7

loc_DE94:				
		moveq	#0,d0
		move.b	(a0)+,d0
		btst	d0,(a2)
		beq.s	loc_DEBC
		movea.w	word_DE7E(pc,d0.w),a3
		movem.l	d4-d5/a0,-(sp)
		movem.l	d4-d5,-(sp)
		bsr.w	GetBlock
		movem.l	(sp)+,d4-d5
		bsr.w	Calc_VRAM_Pos_P1
		bsr.w	DrawBlock_Vertical
		movem.l	(sp)+,d4-d5/a0

loc_DEBC:				
		addi.w	#$10,d4
		dbf	d6,loc_DE94
		clr.b	(a2)
		rts	
; ===========================================================================

loc_DEC8:				
		moveq	#$F,d6
		move.l	#$800000,d7

loc_DED0:				
		moveq	#0,d0
		move.b	(a0)+,d0
		btst	d0,(a2)
		beq.s	loc_DEF8
		movea.w	word_DE7E(pc,d0.w),a3
		movem.l	d4-d5/a0,-(sp)
		movem.l	d4-d5,-(sp)
		bsr.w	GetBlock
		movem.l	(sp)+,d4-d5
		bsr.w	Calc_VRAM_Pos_P1
		bsr.w	sub_E1FA
		movem.l	(sp)+,d4-d5/a0

loc_DEF8:				
		addi.w	#$10,d4

loc_DEFC:
		dbf	d6,loc_DED0
		clr.b	(a2)
		rts	


; ===========================================================================

;DrawBlockColumn:
DrawColumn:								
		moveq	#((screen_height+16+16)/16)-1,d6
DrawColumn_Partial:				
		add.w	(a3),d5
		add.w	4(a3),d4
		move.l	#$800000,d7
		move.l	d0,d1
		bsr.w	sub_E09E
		tst.w	(f_two_player).w
		bne.s	loc_DF54

loc_DF1E:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		move.l	d1,d0
		bsr.w	DrawBlock_Vertical
		adda.w	#$10,a0
		addi.w	#$100,d1
		andi.w	#$FFF,d1
		addi.w	#$10,d4
		move.w	d4,d0
		andi.w	#$70,d0
		bne.s	.notnew128
		bsr.w	sub_E09E

	.notnew128:				
		dbf	d6,loc_DF1E
		rts	
; ===========================================================================

loc_DF54:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		move.l	d1,d0
		bsr.w	sub_E1FA
		adda.w	#$10,a0
		addi.w	#$80,d1	
		andi.w	#$FFF,d1
		addi.w	#$10,d4
		move.w	d4,d0
		andi.w	#$70,d0
		bne.s	loc_DF84
		bsr.w	sub_E09E

loc_DF84:				
		dbf	d6,loc_DF54
		rts	

; ===========================================================================


sub_DF8A:				
		add.w	(a3),d5
		add.w	4(a3),d4
		bra.s	loc_DF9A

; ===========================================================================


DrawRow:									
		moveq	#$15,d6
		add.w	(a3),d5

DrawRow_Partial:				
		add.w	4(a3),d4

loc_DF9A:				
		tst.w	(f_two_player).w
		bne.s	loc_E018
		move.l	a2,-(sp)
		move.w	d6,-(sp)
		lea	(v_block_cache).w,a2
		move.l	d0,d1
		or.w	d2,d1
		swap	d1
		move.l	d1,-(sp)
		move.l	d1,(a5)
		swap	d1
		bsr.w	sub_E09E

loc_DFB8:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		bsr.w	DrawBlock_Horizontal
		addq.w	#2,a0
		addq.b	#4,d1
		bpl.s	loc_DFDA
		andi.b	#$7F,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_DFDA:				
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_DFEA
		bsr.w	sub_E09E

loc_DFEA:				
		dbf	d6,loc_DFB8
		move.l	(sp)+,d1
		addi.l	#$800000,d1
		lea	(v_block_cache).w,a2
		move.l	d1,(a5)
		swap	d1
		move.w	(sp)+,d6

loc_E000:				
		move.l	(a2)+,(a6)
		addq.b	#4,d1
		bmi.s	loc_E010
		ori.b	#-$80,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_E010:				
		dbf	d6,loc_E000
		movea.l	(sp)+,a2
		rts	
; ===========================================================================

loc_E018:				
		move.l	d0,d1
		or.w	d2,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
		tst.b	d1
		bmi.s	loc_E062
		bsr.w	sub_E09E

loc_E02A:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		bsr.w	sub_E136
		addq.w	#2,a0
		addq.b	#4,d1
		bpl.s	loc_E04C
		andi.b	#$7F,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_E04C:				
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_E05C
		bsr.w	sub_E09E

loc_E05C:				
		dbf	d6,loc_E02A
		rts	
; ===========================================================================

loc_E062:				
		bsr.w	sub_E09E

loc_E066:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		bsr.w	sub_E136
		addq.w	#2,a0
		addq.b	#4,d1
		bmi.s	loc_E088
		ori.b	#-$80,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_E088:				
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0
		bne.s	loc_E098
		bsr.w	sub_E09E

loc_E098:				
		dbf	d6,loc_E066
		rts	


; ===========================================================================

sub_E09E:				
		movem.l	d4-d5,-(sp)
		move.w	d4,d3
		add.w	d3,d3
		andi.w	#$F00,d3
		lsr.w	#3,d5
		move.w	d5,d0
		lsr.w	#4,d0
		andi.w	#$7F,d0
		add.w	d3,d0
		moveq	#-1,d3
		clr.w	d3
		move.b	(a4,d0.w),d3
		lsl.w	#7,d3
		andi.w	#$70,d4
		andi.w	#$E,d5
		add.w	d4,d3
		add.w	d5,d3
		movea.l	d3,a0
		movem.l	(sp)+,d4-d5
		rts	


; ===========================================================================

;ProcessAndWriteBlock_Horizontal:
DrawBlock_Horizontal:				
		btst	#3,(a0)
		bne.s	loc_E100
		btst	#2,(a0)
		bne.s	loc_E0E6
		move.l	(a1)+,(a6)
		move.l	(a1)+,(a2)+
		rts	
; ===========================================================================

loc_E0E6:				
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a2)+
		rts	
; ===========================================================================

loc_E100:				
		btst	#2,(a0)
		bne.s	loc_E11C
		move.l	(a1)+,d0
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		eori.l	#$10001000,d0
		move.l	d0,(a2)+
		rts	
; ===========================================================================

loc_E11C:				
		move.l	(a1)+,d0
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		eori.l	#$18001800,d0
		swap	d0
		move.l	d0,(a2)+
		rts	


; ===========================================================================


sub_E136:				
		btst	#3,(a0)
		bne.s	loc_E154
		btst	#2,(a0)
		bne.s	loc_E146
		move.l	(a1)+,(a6)
		rts	
; ===========================================================================

loc_E146:				
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E154:				
		btst	#2,(a0)
		bne.s	loc_E166
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E166:				
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		rts	


; ===========================================================================

; ProcessAndWriteBlock_Vertical:
DrawBlock_Vertical:								
		or.w	d2,d0
		swap	d0
		btst	#3,(a0)
		bne.s	loc_E1B0
		btst	#2,(a0)
		bne.s	loc_E190
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		rts	
; ===========================================================================

loc_E190:				
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E1B0:				
		btst	#2,(a0)
		bne.s	loc_E1D6
		move.l	d5,-(sp)
		move.l	d0,(a5)
		move.l	(a1)+,d5
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		eori.l	#$10001000,d5
		move.l	d5,(a6)
		move.l	(sp)+,d5
		rts	
; ===========================================================================

loc_E1D6:				
		move.l	d5,-(sp)
		move.l	d0,(a5)
		move.l	(a1)+,d5
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		eori.l	#$18001800,d5
		swap	d5
		move.l	d5,(a6)
		move.l	(sp)+,d5
		rts	


; ===========================================================================


sub_E1FA:				
					
		or.w	d2,d0
		swap	d0
		btst	#3,(a0)
		bne.s	loc_E220
		btst	#2,(a0)
		bne.s	loc_E210
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		rts	
; ===========================================================================

loc_E210:				
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E220:				
		btst	#2,(a0)
		bne.s	loc_E234
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E234:				
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		rts	


; ===========================================================================


GetBlock:								
		add.w	(a3),d5
		add.w	4(a3),d4
		lea	(v_16x16_tiles).w,a1
		move.w	d4,d3
		add.w	d3,d3
		andi.w	#$F00,d3
		lsr.w	#3,d5
		move.w	d5,d0
		lsr.w	#4,d0
		andi.w	#$7F,d0
		add.w	d3,d0
		moveq	#-1,d3
		clr.w	d3
		move.b	(a4,d0.w),d3
		lsl.w	#7,d3
		andi.w	#$70,d4
		andi.w	#$E,d5
		add.w	d4,d3
		add.w	d5,d3
		movea.l	d3,a0
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		adda.w	d3,a1
		rts	


; ===========================================================================

; sub_E286: Calc_VRAM_Pos: CalcBlockVRAMPos: CalculateVRAMAddressOfBlockForPlayer1:
Calc_VRAM_Pos_P1:	
		add.w	(a3),d5

; CalcBlockVRAMPos2:
	Calc_VRAM_Pos_AbsoluteX:				
		tst.w	(f_two_player).w			; is it two-player mode?
		bne.s	Calc_VRAM_Pos_AbsoluteX_DoubleResolution ; if so, use the double resolution branch
		add.w	4(a3),d4				; add camera y pos

; CalcBlockVRAMPos_NoCamera: CalculateVRAMAddressOfBlockForPlayer1.AbsoluteXAbsoluteY:		
	Calc_VRAM_Pos_AbsoluteX_AbsoluteY:	
		andi.w	#$F0,d4	
		andi.w	#$1F0,d5
		lsl.w	#4,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#3,d0
		swap	d0
		move.w	d4,d0
		rts	
; ===========================================================================
; loc_E2A8: CalcBlockVRAMPos_2P:
; CalculateVRAMAddressOfBlockForPlayer1.AbsoluteX_DoubleResolution
	Calc_VRAM_Pos_AbsoluteX_DoubleResolution:				
		add.w	4(a3),d4

; loc_E2AC: CalcBlockVRAMPos_2P_NoCamera: 
; CalculateVRAMAddressOfBlockForPlayer1.AbsoluteXAbsoluteY_DoubleResolution
	Calc_VRAM_Pos_AbsoluteX_AbsoluteY_DoubleResolution:				
		andi.w	#$1F0,d4
		andi.w	#$1F0,d5
		lsl.w	#3,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#3,d0
		swap	d0
		move.w	d4,d0
		rts	

; ===========================================================================

;loc_E2C2: CalcBlockVRAMPosB: CalculateVRAMAddressOfBlockForPlayer2:
Calc_VRAM_Pos_P2:					
		tst.w	(f_two_player).w
		bne.s	.double_resolution
		
;.regular_resolution:	
		add.w	4(a3),d4
		add.w	(a3),d5
		andi.w	#$F0,d4
		andi.w	#$1F0,d5
		lsl.w	#4,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#2,d0
		swap	d0
		move.w	d4,d0
		rts	
; ===========================================================================

	.double_resolution:
		add.w	4(a3),d4
		add.w	(a3),d5
		andi.w	#$1F0,d4
		andi.w	#$1F0,d5
		lsl.w	#3,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#2,d0
		swap	d0
		move.w	d4,d0
		rts	

; ===========================================================================

;loc_E300: DrawInitialBG:
DrawTilesAtStart:				
		lea	(vdp_control_port).l,a5
		lea	(vdp_data_port).l,a6
		lea	(v_bg1_x_pos).w,a3
		lea	(v_level_layout+level_max_width).w,a4
		move.w	#$6000,d2
		
;	if FixBugs
		; The purpose of this function is to dynamically load a portion of
		; the background, based on where the BG camera is pointing. This
		; makes plenty of sense for levels that dynamically load their
		; background to Plane B. However, not all levels do this: some 
		; (namely, EHZ, CNZ, and HTZ) are content with just loading their entire 
		; (small) background to Plane B and leaving it there, untouched.
		; Unfortunately, that does not mesh well with this function: if the
		; camera is too high or too low, then only part of the background
		; will be properly loaded. This bug most visibly manifests itself in
		; Casino Night Zone Act 1, where the background abruptly cuts off at
		; the bottom.
		; To work around this, an ugly hack was added, to cause the function
		; to load a portion of the background 16 pixels lower than normal.
		; However, this hack applies to both Act 1 AND Act 2, resulting in
		; Act 2's background being cut off at the top.
		; Sonic 3 & Knuckles fixed this problem for good by giving each zone
		; its own background initialisation function (see 'LevelSetup' in the
		; Sonic & Knuckles Git disassembly). This fix by Clownancy doesn't go quite that far,
		; but it does give these 'static' backgrounds their own
		; initialisation logic, much like two player Mystic Cave Zone does.
;		move.b	(v_zone).w,d0
;		cmpi.b	#emerald_hill_zone,d0
;		beq.w	DrawInitialBG_LoadWholeBackground_512x256
;		cmpi.b	#casino_night_zone,d0
;		beq.w	DrawInitialBG_LoadWholeBackground_512x256
;		cmpi.b	#hill_top_zone,d0
;		beq.w	DrawInitialBG_LoadWholeBackground_512x256
;	else
		; This is a nasty hack to work around the bug described above.
		moveq	#0,d4
		cmpi.b	#$C,(v_zone).w				; is it CNZ?
		beq.w	DrawTilesAtStart_Dynamic		; if it is, branch 
;	endc	
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.w	loc_E336				; if not, branch
		cmpi.b	#$B,(v_zone).w				; is it MCZ 2P?
		beq.w	loc_E396				; if it is, branch

	loc_E336:				
		moveq	#-$10,d4				; draw from 16px above top of screen (skipped by CNZ)

DrawTilesAtStart_Dynamic:
		; Identical to Sonic 1's DrawChunks.			
		moveq	#((224+16+16)/16)-1,d6			; draw entire height of screen; height of plane in blocks minus 1

	.loop:				
		pushr.l	d4-d6
		moveq	#0,d5					; draw from left edge of screen
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P1
		move.w	d1,d4
		moveq	#0,d5
		moveq	#(512/16)-1,d6				; draw full row; width of plane in blocks minus 1.
		disable_ints
		bsr.w	sub_DF8A
		enable_ints
		popr	d4-d6
		addi.w	#16,d4
		dbf	d6,.loop
		rts	
; ===========================================================================
; Dead code for initialising the second player's portion of Plane B.
; I wonder why this is unused?
		moveq	#-$10,d4
		moveq	#$F,d6

	.loop2:				
		movem.l	d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P2
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
		disable_ints
		bsr.w	sub_DF8A
		enable_ints
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,.loop2
		rts	
; ===========================================================================

loc_E396:				
		moveq	#0,d4
		moveq	#$1F,d6

loc_E39A:				
		movem.l	d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_AbsoluteX_AbsoluteY_DoubleResolution
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
		disable_ints
		bsr.w	loc_DF9A
		enable_ints
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_E39A
		rts	
; ===========================================================================

LevelBlockMapsLoad:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelHeaders).l,a2
		lea	(a2,d0.w),a2
		move.l	a2,-(sp)
		addq.w	#4,a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		movea.l	d0,a0
		lea	(v_16x16_tiles).w,a1
		jsrto	KosDec,JmpTo_KosDec
		cmpi.b	#7,(v_zone).w
		bne.s	loc_E40C
		lea	($FFFF9980).w,a1
		lea	(BM16_HTZ).l,a0
		jsrto	KosDec,JmpTo_KosDec

loc_E40C:				
		tst.w	(f_two_player).w
		beq.s	loc_E430
		lea	(v_16x16_tiles).w,a1
		move.w	#$BFF,d2

loc_E41A:				
		move.w	(a1),d0
		move.w	d0,d1
		andi.w	#-$800,d0
		andi.w	#$7FF,d1
		lsr.w	#1,d1
		or.w	d1,d0
		move.w	d0,(a1)+
		dbf	d2,loc_E41A

loc_E430:				
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		movea.l	d0,a0
		lea	(v_128x128_tiles).l,a1
		jsrto	KosDec,JmpTo_KosDec
		bsr.w	sub_E462
		movea.l	(sp)+,a2
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	loc_E456
		jsrto	AddPLC,JmpTo_AddPLC

loc_E456:				
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		jsrto	PalLoad_Now,JmpTo_PalLoad_Now
		rts	

; ===========================================================================


sub_E462:				
		moveq	#0,d0
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(LevelIndex).l,a0
		move.w	(a0,d0.w),d0
		lea	(a0,d0.l),a0
		lea	(v_level_layout).w,a1
		jmpto	KosDec,JmpTo_KosDec

; ===========================================================================
		lea	(v_level_layout).w,a3
		move.w	#$3FF,d1
		moveq	#0,d0

loc_E48C:				
		move.l	d0,(a3)+
		dbf	d1,loc_E48C
		lea	(v_level_layout).w,a3
		moveq	#0,d1
		bsr.w	sub_E4A2
		lea	($FFFF8080).w,a3
		moveq	#2,d1

; ===========================================================================


sub_E4A2:				
		moveq	#0,d0
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		add.w	d1,d0
		lea	(LevelIndex).l,a1
		move.w	(a1,d0.w),d0
		lea	(a1,d0.l),a1
		moveq	#0,d1
		move.w	d1,d2
		move.b	(a1)+,d1
		move.b	(a1)+,d2
		move.l	d1,d5
		addq.l	#1,d5
		moveq	#0,d3
		move.w	#$80,d3	
		divu.w	d5,d3
		subq.w	#1,d3

loc_E4D2:				
		movea.l	a3,a0
		move.w	d3,d4

loc_E4D6:				
		move.l	a1,-(sp)
		move.w	d1,d0

loc_E4DA:				
		move.b	(a1)+,(a0)+
		dbf	d0,loc_E4DA
		movea.l	(sp)+,a1
		dbf	d4,loc_E4D6
		lea	(a1,d5.w),a1
		lea	$100(a3),a3
		dbf	d2,loc_E4D2
		rts	

; ===========================================================================
		lea	($FE0000).l,a1
		lea	($FE0080).l,a2
		lea	(v_128x128_tiles).l,a3
		move.w	#$3F,d1

loc_E50A:				
		bsr.w	sub_E59C
		bsr.w	sub_E59C
		dbf	d1,loc_E50A
		lea	($FE0000).l,a1
		lea	($FF0000).l,a2
		move.w	#$3F,d1

loc_E526:				
		move.w	#0,(a2)+
		dbf	d1,loc_E526
		move.w	#$3FBF,d1

loc_E532:				
		move.w	(a1)+,(a2)+
		dbf	d1,loc_E532
		rts	
; ===========================================================================
		lea	($FE0000).l,a1
		lea	(v_128x128_tiles).l,a3
		moveq	#$1F,d0

loc_E548:				
		move.l	(a1)+,(a3)+
		dbf	d0,loc_E548
		moveq	#0,d7
		lea	($FE0000).l,a1
		move.w	#$FF,d5

loc_E55A:				
					
		lea	(v_128x128_tiles).l,a3
		move.w	d7,d6

loc_E562:				
		movem.l	a1-a3,-(sp)
		move.w	#$3F,d0

loc_E56A:				
		cmpm.w	(a1)+,(a3)+
		bne.s	loc_E580
		dbf	d0,loc_E56A
		movem.l	(sp)+,a1-a3
		adda.w	#$80,a1	
		dbf	d5,loc_E55A
		bra.s	loc_E59A
; ===========================================================================

loc_E580:				
		movem.l	(sp)+,a1-a3
		adda.w	#$80,a3	
		dbf	d6,loc_E562
		moveq	#$1F,d0

loc_E58E:				
		move.l	(a1)+,(a3)+
		dbf	d0,loc_E58E
		addq.l	#1,d7
		dbf	d5,loc_E55A

loc_E59A:				
					
		bra.s	loc_E59A

; ===========================================================================


sub_E59C:				
					
		moveq	#7,d0

loc_E59E:
		rept 4			
		move.l	(a3)+,(a1)+
		endr
		rept 4
		move.l	(a3)+,(a2)+
		endr
		dbf	d0,loc_E59E
		adda.w	#$80,a1	
		adda.w	#$80,a2	
		rts	

; ===========================================================================

	if Revision=0
		nop
	endc
	
		
	if RemoveJmpTos=0
JmpTo_PalLoad_Now:				
		jmp	PalLoad_Now
JmpTo_AddPLC:				
		jmp	AddPLC
JmpTo_KosDec:								
		jmp	KosDec

		align 4
	endc	

; ===========================================================================


sub_E5D0:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		move.w	off_E636(pc,d0.w),d0
		jsr	off_E636(pc,d0.w)
		moveq	#2,d1
		move.w	(v_boundary_bottom_next).w,d0
		sub.w	(v_boundary_bottom).w,d0
		beq.s	locret_E60E
		bcc.s	loc_E610
		neg.w	d1
		move.w	(v_camera_y_pos).w,d0
		cmp.w	(v_boundary_bottom_next).w,d0
		bls.s	loc_E604
		move.w	d0,(v_boundary_bottom).w
		andi.w	#-2,(v_boundary_bottom).w

loc_E604:				
		add.w	d1,(v_boundary_bottom).w
		move.b	#1,(f_boundary_bottom_change).w

locret_E60E:				
		rts	
; ===========================================================================

loc_E610:				
		move.w	(v_camera_y_pos).w,d0
		addi_.w	#8,d0
		cmp.w	(v_boundary_bottom).w,d0
		bcs.s	loc_E62A
		btst	#1,($FFFFB022).w
		beq.s	loc_E62A
		add.w	d1,d1
		add.w	d1,d1

loc_E62A:				
		add.w	d1,(v_boundary_bottom).w
		move.b	#1,(f_boundary_bottom_change).w
		rts	

; ===========================================================================
off_E636:	
		dc.w loc_E658-off_E636				; 0 			
		dc.w locret_E752-off_E636			; 1
		dc.w locret_E754-off_E636			; 2
		dc.w locret_E756-off_E636			; 3
		dc.w locret_E758-off_E636			; 4
		dc.w loc_E75A-off_E636				; 5
		dc.w loc_E842-off_E636				; 6
		dc.w loc_E986-off_E636				; 7
		dc.w locret_F05A-off_E636			; 8
		dc.w locret_F05C-off_E636			; 9
		dc.w loc_F05E-off_E636				; 10
		dc.w loc_F13E-off_E636				; 11
		dc.w loc_F26A-off_E636				; 12
		dc.w loc_F378-off_E636				; 13
		dc.w loc_F446-off_E636				; 14
		dc.w loc_F4D0-off_E636				; 15
		dc.w loc_F59E-off_E636				; 16
; ===========================================================================

loc_E658:				
		tst.b	(v_act).w
		bne.s	loc_E660
		rts	
; ===========================================================================

loc_E660:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E66E(pc,d0.w),d0
		jmp	off_E66E(pc,d0.w)
; ===========================================================================
off_E66E:	dc.w loc_E676-off_E66E				; 0 
					
		dc.w loc_E6B0-off_E66E				; 1
		dc.w loc_E6EE-off_E66E				; 2
		dc.w loc_E738-off_E66E				; 3
; ===========================================================================

loc_E676:				
		tst.w	(f_two_player).w
		bne.s	loc_E6A2
		cmpi.w	#$2780,(v_camera_x_pos).w
		bcs.s	locret_E6A0
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$390,(v_boundary_bottom_next).w
		move.w	#$390,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_E6A0:				
		rts	
; ===========================================================================

loc_E6A2:				
		move.w	#$2920,(v_boundary_right_next).w
		move.w	#$2920,(v_boundary_right_next_p2).w
		rts	
; ===========================================================================

loc_E6B0:				
		cmpi.w	#$28F0,(v_camera_x_pos).w
		bcs.s	locret_E6EC
		move.w	#$28F0,(v_boundary_left_next).w
		move.w	#$2940,(v_boundary_right_next).w
		move.w	#$28F0,(v_boundary_left_next_p2).w
		move.w	#$2940,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.b	#2,(v_current_boss).w
		moveq	#$29,d0
		jsrto	AddPLC,JmpTo2_AddPLC

locret_E6EC:				
		rts	
; ===========================================================================

loc_E6EE:				
		cmpi.w	#$388,(v_camera_y_pos).w
		bcs.s	loc_E702
		move.w	#$388,(v_boundary_top_next).w
		move.w	#$388,(v_boundary_top_next_p2).w

loc_E702:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_E736
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_E72A
		move.b	#id_BossEmeraldHill,ost_id(a1)
		move.b	#-$7F,$28(a1)
		move.w	#$29D0,ost_x_pos(a1)
		move.w	#$426,ost_y_pos(a1)

loc_E72A:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_E736:				
		rts	
; ===========================================================================

loc_E738:				
		tst.b	(v_boss_status).w
		beq.s	locret_E750
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w

locret_E750:				
		rts	
; ===========================================================================

locret_E752:				
		rts	
; ===========================================================================

locret_E754:				
		rts	
; ===========================================================================

locret_E756:				
		rts	
; ===========================================================================

locret_E758:				
		rts	
; ===========================================================================

loc_E75A:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E768(pc,d0.w),d0
		jmp	off_E768(pc,d0.w)
; ===========================================================================
off_E768:	dc.w loc_E772-off_E768				; 0 
					
		dc.w loc_E792-off_E768				; 1
		dc.w loc_E7B8-off_E768				; 2
		dc.w loc_E7F6-off_E768				; 3
		dc.w loc_E82E-off_E768				; 4
; ===========================================================================

loc_E772:				
		cmpi.w	#$2530,(v_camera_x_pos).w
		bcs.s	locret_E790
		move.w	#$500,(v_boundary_bottom).w
		move.w	#$450,(v_boundary_bottom_next).w
		move.w	#$450,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_E790:				
		rts	
; ===========================================================================

loc_E792:				
		cmpi.w	#$2980,(v_camera_x_pos).w
		bcs.s	locret_E7B6
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$400,(v_boundary_bottom_next).w
		move.w	#$400,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_E7B6:				
		rts	
; ===========================================================================

loc_E7B8:				
		cmpi.w	#$2A80,(v_camera_x_pos).w
		bcs.s	locret_E7F4
		move.w	#$2AB0,(v_boundary_left_next).w
		move.w	#$2AB0,(v_boundary_right_next).w
		move.w	#$2AB0,(v_boundary_left_next_p2).w
		move.w	#$2AB0,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.b	#7,(v_current_boss).w
		moveq	#$2E,d0
		jsrto	AddPLC,JmpTo2_AddPLC

locret_E7F4:				
		rts	
; ===========================================================================

loc_E7F6:				
		cmpi.w	#$400,(v_camera_y_pos).w
		bcs.s	loc_E80A
		move.w	#$400,(v_boundary_top_next).w
		move.w	#$400,(v_boundary_top_next_p2).w

loc_E80A:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_E82C
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_E820
		move.b	#id_BossMetropolis,ost_id(a1)

loc_E820:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_E82C:				
		rts	
; ===========================================================================

loc_E82E:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_E842:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E862(pc,d0.w),d0
		jsr	off_E862(pc,d0.w)
		move.w	($FFFFF660).w,d0
		move.w	off_E85C(pc,d0.w),d0
		jmp	off_E85C(pc,d0.w)
; ===========================================================================
off_E85C:	dc.w loc_E94A-off_E85C				; 0 
					
		dc.w loc_E96C-off_E85C				; 1
		dc.w locret_E984-off_E85C			; 2
off_E862:	dc.w loc_E86A-off_E862				; 0 
					
		dc.w loc_E88E-off_E862				; 1
		dc.w loc_E8C0-off_E862				; 2
		dc.w loc_E904-off_E862				; 3
; ===========================================================================

loc_E86A:				
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	d0,(v_camera_y_pos_offset).w
		addq.b	#2,(v_dle_routine).w
		rts	
; ===========================================================================

loc_E88E:				
		cmpi.w	#$2BC0,(v_camera_x_pos).w
		bcs.s	loc_E8A8
		cmpi.w	#$580,(v_camera_y_pos).w
		bcs.s	loc_E8A8
		addq.b	#2,(v_dle_routine).w
		move.w	#0,($FFFFF662).w

loc_E8A8:				
					
		move.w	(v_camera_x_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_E8C0:				
		cmpi.w	#$800,(v_camera_x_pos_offset).w
		beq.s	loc_E8CC
		addq.w	#2,(v_camera_x_pos_offset).w

loc_E8CC:				
		cmpi.w	#$600,(v_camera_x_pos_offset).w
		blt.s	loc_E8EC
		move.w	($FFFFF662).w,d0
		moveq	#4,d1
		cmpi.w	#$840,d0
		bcc.s	loc_E8E6
		add.w	d1,d0
		move.w	d0,($FFFFF662).w

loc_E8E6:				
		lsr.w	#8,d0
		add.w	d0,(v_camera_y_pos_offset).w

loc_E8EC:				
		move.w	(v_camera_x_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_E904:				
		cmpi.w	#-$2C0,(v_camera_x_pos_offset).w
		beq.s	loc_E932
		subi_.w	#2,(v_camera_x_pos_offset).w
		cmpi.w	#$1B81,(v_camera_y_pos_offset).w
		beq.s	loc_E932
		move.w	($FFFFF662).w,d0
		beq.s	loc_E92C
		moveq	#4,d1
		neg.w	d1
		add.w	d1,d0
		move.w	d0,($FFFFF662).w
		lsr.w	#8,d0

loc_E92C:				
		addq.w	#1,d0
		add.w	d0,(v_camera_y_pos_offset).w

loc_E932:				
					
		move.w	(v_camera_x_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_E94A:				
		cmpi.w	#$2880,(v_camera_x_pos).w
		bcs.s	locret_E96A
		cmpi.w	#$400,(v_camera_y_pos).w
		bcs.s	locret_E96A
		addq.w	#2,($FFFFF660).w
		moveq	#$3E,d0
		jsrto	AddPLC,JmpTo2_AddPLC
		move.w	#$2880,(v_boundary_left_next).w

locret_E96A:				
					
		rts	
; ===========================================================================

loc_E96C:				
		cmpi.w	#$500,(v_camera_y_pos).w
		bcs.s	locret_E982
		addq.w	#2,($FFFFF660).w
		st.b	(f_lock_controls).w
		moveq	#$3F,d0
		jsrto	AddPLC,JmpTo2_AddPLC

locret_E982:				
		rts	
; ===========================================================================

locret_E984:				
		rts	
; ===========================================================================

loc_E986:				
		tst.b	(v_act).w
		bne.w	loc_EBEA
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E99C(pc,d0.w),d0
		jmp	off_E99C(pc,d0.w)
; ===========================================================================
off_E99C:	dc.w loc_E9A2-off_E99C				; 0 
					
		dc.w loc_EA0E-off_E99C				; 1
		dc.w loc_EB14-off_E99C				; 2
; ===========================================================================

loc_E9A2:				
		cmpi.w	#$400,(v_camera_y_pos).w
		bcs.s	loc_E9EA
		cmpi.w	#$1800,(v_camera_x_pos).w
		bcs.s	loc_E9EA
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$140,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		addq.b	#2,(v_dle_routine).w

locret_E9E8:				
					
		rts	
; ===========================================================================

loc_E9EA:				
					
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_E9E8
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_E9E8
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================

loc_EA0E:				
		cmpi.w	#$1978,(v_camera_x_pos).w
		bcs.w	loc_EAA0
		cmpi.w	#$1E00,(v_camera_x_pos).w
		bcs.s	loc_EA28
		move.b	#0,(f_screen_shake).w
		bra.s	loc_EAA0
; ===========================================================================

loc_EA28:				
		tst.b	(v_htz_terrain_direction).w
		bne.s	loc_EA58
		cmpi.w	#$140,(v_camera_y_pos_offset).w
		beq.s	loc_EA82
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EAA0
		addq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1
		bne.s	loc_EAA0
		move.w	#$E1,d0	
		jsr	PlaySound
		bra.s	loc_EAA0
; ===========================================================================

loc_EA58:				
		cmpi.w	#$E0,(v_camera_y_pos_offset).w
		beq.s	loc_EA82
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EAA0
		subq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1
		bne.s	loc_EAA0
		move.w	#$E1,d0	
		jsr	PlaySound
		bra.s	loc_EAA0
; ===========================================================================

loc_EA82:				
					
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_htz_terrain_delay).w
		bpl.s	loc_EAA0
		move.w	#$78,(v_htz_terrain_delay).w
		eori.b	#1,(v_htz_terrain_direction).w
		move.b	#1,(f_screen_shake).w

loc_EAA0:				
					
		cmpi.w	#$1800,(v_camera_x_pos).w
		bcs.s	loc_EAC8
		cmpi.w	#$1F00,(v_camera_x_pos).w
		bcc.s	loc_EAEE
		move.w	(v_camera_x_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_EAC8:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		subq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_EAEE:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_EB14:				
		cmpi.w	#$1F00,(v_camera_x_pos).w
		bcc.s	loc_EB54
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$140,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		subq.b	#2,(v_dle_routine).w

locret_EB52:				
					
		rts	
; ===========================================================================

loc_EB54:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EB52
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EB52
		move.b	#0,(f_screen_shake_htz).w
		rts	

; ===========================================================================


sub_EB78:				
					
		sub.w	(v_bg1_x_pos).w,d0
		sub.w	(v_camera_x_pos_offset).w,d0
		bpl.s	loc_EB8E
		cmpi.w	#-$10,d0
		bgt.s	loc_EB8C
		move.w	#-$10,d0

loc_EB8C:				
		bra.s	loc_EB98
; ===========================================================================

loc_EB8E:				
		cmpi.w	#$10,d0
		bcs.s	loc_EB98
		move.w	#$10,d0

loc_EB98:				
		move.b	d0,(v_bg_x_pos_diff).w
		sub.w	(v_bg1_y_pos).w,d1
		sub.w	(v_camera_y_pos_offset).w,d1
		bpl.s	loc_EBB2
		cmpi.w	#-$10,d1
		bgt.s	loc_EBB0
		move.w	#-$10,d1

loc_EBB0:				
		bra.s	loc_EBBC
; ===========================================================================

loc_EBB2:				
		cmpi.w	#$10,d1
		bcs.s	loc_EBBC
		move.w	#$10,d1

loc_EBBC:				
		move.b	d1,(v_bg_y_pos_diff).w
		rts	

; ===========================================================================
		btst	#0,(v_joypad2_hold_actual).w
		beq.s	loc_EBD4
		tst.w	(v_camera_y_pos_offset).w
		beq.s	loc_EBD4
		subq.w	#1,(v_camera_y_pos_offset).w

loc_EBD4:				
					
		btst	#1,(v_joypad2_hold_actual).w
		beq.s	locret_EBE8
		cmpi.w	#$700,(v_camera_y_pos_offset).w
		beq.s	locret_EBE8
		addq.w	#1,(v_camera_y_pos_offset).w

locret_EBE8:				
					
		rts	
; ===========================================================================

loc_EBEA:				
		bsr.w	sub_EF66
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_EBFC(pc,d0.w),d0
		jmp	off_EBFC(pc,d0.w)
; ===========================================================================
off_EBFC:	dc.w loc_EC0E-off_EBFC				; 0 
					
		dc.w loc_EC90-off_EBFC				; 1
		dc.w loc_ED96-off_EBFC				; 2
		dc.w loc_EDFA-off_EBFC				; 3
		dc.w loc_EEF8-off_EBFC				; 4
		dc.w loc_EF84-off_EBFC				; 5
		dc.w loc_EFAA-off_EBFC				; 6
		dc.w loc_EFE8-off_EBFC				; 7
		dc.w loc_F020-off_EBFC				; 8
; ===========================================================================

loc_EC0E:				
		cmpi.w	#$14C0,(v_camera_x_pos).w
		bcs.s	loc_EC6C
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$2C0,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		addq.b	#2,(v_dle_routine).w
		cmpi.w	#$380,(v_camera_y_pos).w
		bcs.s	locret_EC6A
		move.w	#-$680,(v_camera_x_pos_offset).w
		addi.w	#$480,(v_bg1_x_pos).w
		move.w	#$300,(v_camera_y_pos_offset).w
		addq.b	#6,(v_dle_routine).w

locret_EC6A:				
					
		rts	
; ===========================================================================

loc_EC6C:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EC6A
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EC6A
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================

loc_EC90:				
		cmpi.w	#$1678,(v_camera_x_pos).w
		bcs.w	loc_ED22
		cmpi.w	#$1A00,(v_camera_x_pos).w
		bcs.s	loc_ECAA
		move.b	#0,(f_screen_shake).w
		bra.s	loc_ED22
; ===========================================================================

loc_ECAA:				
		tst.b	(v_htz_terrain_direction).w
		bne.s	loc_ECDA
		cmpi.w	#$2C0,(v_camera_y_pos_offset).w
		beq.s	loc_ED04
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_ED22
		addq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1
		bne.s	loc_ED22
		move.w	#$E1,d0	
		jsr	PlaySound
		bra.s	loc_ED22
; ===========================================================================

loc_ECDA:				
		cmpi.w	#0,(v_camera_y_pos_offset).w
		beq.s	loc_ED04
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_ED22
		subq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1
		bne.s	loc_ED22
		move.w	#$E1,d0	
		jsr	PlaySound
		bra.s	loc_ED22
; ===========================================================================

loc_ED04:				
					
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_htz_terrain_delay).w
		bpl.s	loc_ED22
		move.w	#$78,(v_htz_terrain_delay).w
		eori.b	#1,(v_htz_terrain_direction).w
		move.b	#1,(f_screen_shake).w

loc_ED22:				
					
		cmpi.w	#$14C0,(v_camera_x_pos).w
		bcs.s	loc_ED4A
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_ED70
		move.w	(v_camera_x_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_ED4A:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		subq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_ED70:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_ED96:				
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_EDD6
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$2C0,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		subq.b	#2,(v_dle_routine).w

locret_EDD4:				
					
		rts	
; ===========================================================================

loc_EDD6:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EDD4
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EDD4
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================

loc_EDFA:				
		cmpi.w	#$15F0,(v_camera_x_pos).w
		bcs.w	loc_EE84
		cmpi.w	#$1AC0,(v_camera_x_pos).w
		bcc.s	loc_EE84
		tst.b	(v_htz_terrain_direction).w
		bne.s	loc_EE3C
		cmpi.w	#$300,(v_camera_y_pos_offset).w
		beq.s	loc_EE66
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EE84
		addq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1
		bne.s	loc_EE84
		move.w	#$E1,d0	
		jsr	PlaySound
		bra.s	loc_EE84
; ===========================================================================

loc_EE3C:				
		cmpi.w	#0,(v_camera_y_pos_offset).w
		beq.s	loc_EE66
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EE84
		subq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1
		bne.s	loc_EE84
		move.w	#$E1,d0	
		jsr	PlaySound
		bra.s	loc_EE84
; ===========================================================================

loc_EE66:				
					
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_htz_terrain_delay).w
		bpl.s	loc_EE84
		move.w	#$78,(v_htz_terrain_delay).w
		eori.b	#1,(v_htz_terrain_direction).w
		move.b	#1,(f_screen_shake).w

loc_EE84:				
					
		cmpi.w	#$14C0,(v_camera_x_pos).w
		bcs.s	loc_EEAC
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_EED2
		move.w	(v_camera_x_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_EEAC:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		subq.b	#6,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_EED2:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_EEF8:				
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_EF40
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	#-$680,(v_camera_x_pos_offset).w
		addi.w	#$480,(v_bg1_x_pos).w
		move.w	#$300,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		subq.b	#2,(v_dle_routine).w

locret_EF3E:				
					
		rts	
; ===========================================================================

loc_EF40:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EF3E
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EF3E
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================
		rts	

; ===========================================================================


sub_EF66:				
		cmpi.w	#$2B00,(v_camera_x_pos).w
		bcs.s	locret_EF82
		cmpi.b	#$A,(v_dle_routine).w
		bge.s	locret_EF82
		move.b	#$A,(v_dle_routine).w
		move.b	#0,(f_screen_shake_htz).w

locret_EF82:				
		rts	

; ===========================================================================

loc_EF84:				
		cmpi.w	#$2C50,(v_camera_x_pos).w
		bcs.s	locret_EFA8
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$480,(v_boundary_bottom_next).w
		move.w	#$480,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_EFA8:				
		rts	
; ===========================================================================

loc_EFAA:				
		cmpi.w	#$2EDF,(v_camera_x_pos).w
		bcs.s	locret_EFE6
		move.w	#$2EE0,(v_boundary_left_next).w
		move.w	#$2F5E,(v_boundary_right_next).w
		move.w	#$2EE0,(v_boundary_left_next_p2).w
		move.w	#$2F5E,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.b	#3,(v_current_boss).w
		moveq	#$2A,d0
		jmpto	AddPLC,JmpTo2_AddPLC
; ===========================================================================

locret_EFE6:				
		rts	
; ===========================================================================

loc_EFE8:				
		cmpi.w	#$478,(v_camera_y_pos).w
		bcs.s	loc_EFFC
		move.w	#$478,(v_boundary_top_next).w
		move.w	#$478,(v_boundary_top_next_p2).w

loc_EFFC:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w

loc_F006:
		bcs.s	locret_F01E
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_F012    
		move.b	#id_BossHillTop,ost_id(a1)

loc_F012:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_F01E:				
		rts	
; ===========================================================================

loc_F020:				
		tst.b	(v_boss_status).w
		beq.s	locret_F058
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		cmpi.w	#$30E0,(v_camera_x_pos).w
		bcs.s	locret_F058
		cmpi.w	#$428,(v_boundary_top_next).w
		bcs.s	loc_F04C
		subq.w	#2,(v_boundary_top_next).w

loc_F04C:				
		cmpi.w	#$430,(v_boundary_bottom_next).w
		bcs.s	locret_F058
		subq.w	#2,(v_boundary_bottom_next).w

locret_F058:				
					
		rts	
; ===========================================================================

locret_F05A:				
		rts	
; ===========================================================================

locret_F05C:				
		rts	
; ===========================================================================

loc_F05E:				
		tst.b	(v_act).w
		bne.s	loc_F066
		rts	
; ===========================================================================

loc_F066:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F074(pc,d0.w),d0
		jmp	off_F074(pc,d0.w)
; ===========================================================================
off_F074:	dc.w loc_F07C-off_F074				; 0 
					
		dc.w loc_F0A8-off_F074				; 1
		dc.w loc_F0EC-off_F074				; 2
		dc.w loc_F124-off_F074				; 3
; ===========================================================================

loc_F07C:				
		cmpi.w	#$2668,(v_camera_x_pos).w
		bcs.s	locret_F0A6
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$2D8,($FFFFB38C).w
		move.w	#$1E0,(v_boundary_bottom_next).w
		move.w	#$1E0,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_F0A6:				
		rts	
; ===========================================================================

loc_F0A8:				
		cmpi.w	#$2880,(v_camera_x_pos).w
		bcs.s	locret_F0EA
		move.w	#$2880,(v_boundary_left_next).w
		move.w	#$28C0,(v_boundary_right_next).w
		move.w	#$2880,(v_boundary_left_next_p2).w
		move.w	#$28C0,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.b	#8,(v_current_boss).w
		moveq	#$2F,d0
		jsrto	AddPLC,JmpTo2_AddPLC
		moveq	#$25,d0
		jsrto	PalLoad_Now,JmpTo2_PalLoad_Now

locret_F0EA:				
		rts	
; ===========================================================================

loc_F0EC:				
		cmpi.w	#$1D8,(v_camera_y_pos).w
		bcs.s	loc_F100
		move.w	#$1D8,(v_boundary_top_next).w
		move.w	#$1D8,(v_boundary_top_next_p2).w

loc_F100:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_F122
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_F116
		move.b	#id_BossOilOcean,ost_id(a1)

loc_F116:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_F122:				
		rts	
; ===========================================================================

loc_F124:				
		tst.b	(v_boss_status).w
		beq.s	locret_F13C
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w

locret_F13C:				
		rts	
; ===========================================================================

loc_F13E:				
		tst.b	(v_act).w
		bne.s	loc_F146
		rts	
; ===========================================================================

loc_F146:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F154(pc,d0.w),d0
		jmp	off_F154(pc,d0.w)
; ===========================================================================
off_F154:	dc.w loc_F15C-off_F154				; 0 
					
		dc.w loc_F196-off_F154				; 1
		dc.w loc_F206-off_F154				; 2
		dc.w loc_F23E-off_F154				; 3
; ===========================================================================

loc_F15C:				
		tst.w	(f_two_player).w
		bne.s	loc_F188
		cmpi.w	#$2080,(v_camera_x_pos).w
		bcs.s	locret_F186
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$5D0,(v_boundary_bottom_next).w
		move.w	#$5D0,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_F186:				
		rts	
; ===========================================================================

loc_F188:				
		move.w	#$2100,(v_boundary_right_next).w
		move.w	#$2100,(v_boundary_right_next_p2).w
		rts	
; ===========================================================================

loc_F196:				
		cmpi.w	#$20F0,(v_camera_x_pos).w
		bcs.s	locret_F204
		move.w	#$20F0,(v_boundary_right_next).w
		move.w	#$20F0,(v_boundary_left_next).w
		move.w	#$20F0,(v_boundary_right_next_p2).w
		move.w	#$20F0,(v_boundary_left_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.l	#$6C000002,(vdp_control_port).l
		lea	(vdp_data_port).l,a6
		lea	(Art_FallingRocks).l,a2
		moveq	#7,d0

loc_F1DE:				
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		dbf	d0,loc_F1DE
		move.b	#5,(v_current_boss).w
		moveq	#$2C,d0
		jsrto	AddPLC,JmpTo2_AddPLC
		moveq	#$19,d0
		jsrto	PalLoad_Now,JmpTo2_PalLoad_Now

locret_F204:				
		rts	
; ===========================================================================

loc_F206:				
		cmpi.w	#$5C8,(v_camera_y_pos).w
		bcs.s	loc_F21A
		move.w	#$5C8,(v_boundary_top_next).w
		move.w	#$5C8,(v_boundary_top_next_p2).w

loc_F21A:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_F23C
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_F230
		move.b	#id_BossMysticCave,ost_id(a1)

loc_F230:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_F23C:				
		rts	
; ===========================================================================

loc_F23E:				
		tst.b	(f_screen_shake).w
		beq.s	loc_F256
		move.w	(v_frame_counter).w,d0
		andi.w	#$1F,d0
		bne.s	loc_F256
		move.w	#sfx_Rumbling2,d0	
		jsrto	PlaySound,JmpTo3_PlaySound

loc_F256:				
					
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_F26A:				
		jsr	SlotMachine
		tst.b	(v_act).w
		bne.s	loc_F278
		rts	
; ===========================================================================

loc_F278:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F286(pc,d0.w),d0
		jmp	off_F286(pc,d0.w)
; ===========================================================================
off_F286:	dc.w loc_F28E-off_F286				; 0 
					
		dc.w loc_F2CE-off_F286				; 1
		dc.w loc_F318-off_F286				; 2
		dc.w loc_F350-off_F286				; 3
; ===========================================================================

loc_F28E:				
		tst.w	(f_two_player).w
		bne.s	loc_F2C0
		cmpi.w	#$27C0,(v_camera_x_pos).w
		bcs.s	locret_F2BE
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$62E,(v_boundary_bottom_next).w
		move.w	#$62E,(v_boundary_bottom_next_p2).w
		move.b	#-7,($FFFF8C54).w
		addq.b	#2,(v_dle_routine).w

locret_F2BE:				
		rts	
; ===========================================================================

loc_F2C0:				
		move.w	#$26A0,(v_boundary_right_next).w
		move.w	#$26A0,(v_boundary_right_next_p2).w
		rts	
; ===========================================================================

loc_F2CE:				
		cmpi.w	#$2890,(v_camera_x_pos).w
		bcs.s	locret_F316
		move.b	#-7,($FFFF8C50).w
		move.w	#$2860,(v_boundary_left_next).w
		move.w	#$28E0,(v_boundary_right_next).w
		move.w	#$2860,(v_boundary_left_next_p2).w
		move.w	#$28E0,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.b	#6,(v_current_boss).w
		moveq	#$2D,d0
		jsrto	AddPLC,JmpTo2_AddPLC
		moveq	#$1A,d0
		jsrto	PalLoad_Now,JmpTo2_PalLoad_Now

locret_F316:				
		rts	
; ===========================================================================

loc_F318:				
		cmpi.w	#$4E0,(v_camera_y_pos).w
		bcs.s	loc_F32C
		move.w	#$4E0,(v_boundary_top_next).w
		move.w	#$4E0,(v_boundary_top_next_p2).w

loc_F32C:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_F34E
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_F342
		move.b	#id_BossCasinoNight,ost_id(a1)

loc_F342:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_F34E:				
		rts	
; ===========================================================================

loc_F350:				
		cmpi.w	#$2A00,(v_camera_x_pos).w
		bcs.s	locret_F376
		move.w	#$5D0,(v_boundary_bottom_next).w
		move.w	#$5D0,(v_boundary_bottom_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w

locret_F376:				
		rts	
; ===========================================================================

loc_F378:				
		tst.b	(v_act).w
		bne.s	loc_F380
		rts	
; ===========================================================================

loc_F380:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F38E(pc,d0.w),d0
		jmp	off_F38E(pc,d0.w)
; ===========================================================================
off_F38E:	dc.w loc_F396-off_F38E				; 0 
					
		dc.w loc_F3BC-off_F38E				; 1
		dc.w loc_F3FA-off_F38E				; 2
		dc.w loc_F432-off_F38E				; 3
; ===========================================================================

loc_F396:				
		cmpi.w	#$2680,(v_camera_x_pos).w
		bcs.s	locret_F3BA
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$450,(v_boundary_bottom_next).w
		move.w	#$450,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_F3BA:				
		rts	
; ===========================================================================

loc_F3BC:				
		cmpi.w	#$2A20,(v_camera_x_pos).w
		bcs.s	locret_F3F8
		move.w	#$2A20,(v_boundary_left_next).w
		move.w	#$2A20,(v_boundary_right_next).w
		move.w	#$2A20,(v_boundary_left_next_p2).w
		move.w	#$2A20,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		move.b	#1,(v_current_boss).w
		moveq	#$28,d0
		jmpto	AddPLC,JmpTo2_AddPLC
; ===========================================================================

locret_F3F8:				
		rts	
; ===========================================================================

loc_F3FA:				
		cmpi.w	#$448,(v_camera_y_pos).w
		bcs.s	loc_F40E
		move.w	#$448,(v_boundary_top_next).w
		move.w	#$448,(v_boundary_top_next_p2).w

loc_F40E:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_F430
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	loc_F424
		move.b	#id_BossChemicalPlant,ost_id(a1)

loc_F424:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_F430:				
		rts	
; ===========================================================================

loc_F432:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_F446:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F454(pc,d0.w),d0
		jmp	off_F454(pc,d0.w)
; ===========================================================================
off_F454:	dc.w loc_F45E-off_F454				; 0 
					
		dc.w locret_F490-off_F454			; 1
		dc.w loc_F492-off_F454				; 2
		dc.w loc_F4AC-off_F454				; 3
		dc.w locret_F4CE-off_F454			; 4
; ===========================================================================

loc_F45E:				
		move.w	#$140,d0
		cmp.w	(v_camera_x_pos).w,d0
		bhi.s	locret_F48E
		addq.b	#2,(v_dle_routine).w
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	locret_F48E
		move.b	#id_MechaSonic,ost_id(a1)
		move.b	#$48,$28(a1)
		move.w	#$348,ost_x_pos(a1)
		move.w	#$A0,ost_y_pos(a1)
		moveq	#$30,d0
		jmpto	AddPLC,JmpTo2_AddPLC
; ===========================================================================

locret_F48E:				
					
		rts	
; ===========================================================================

locret_F490:				
		rts	
; ===========================================================================

loc_F492:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		cmpi.w	#$300,(v_camera_x_pos).w
		bcs.s	locret_F4AA
		addq.b	#2,(v_dle_routine).w
		moveq	#$31,d0
		jmpto	AddPLC,JmpTo2_AddPLC
; ===========================================================================

locret_F4AA:				
		rts	
; ===========================================================================

loc_F4AC:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	#$680,d0
		cmp.w	(v_camera_x_pos).w,d0
		bhi.s	locret_F4CC
		addq.b	#2,(v_dle_routine).w
		move.w	d0,(v_boundary_left_next).w
		addi.w	#$C0,d0	
		move.w	d0,(v_boundary_right_next).w

locret_F4CC:				
		rts	
; ===========================================================================

locret_F4CE:				
		rts	
; ===========================================================================

loc_F4D0:				
		tst.b	(v_act).w
		bne.s	loc_F4D8
		rts	
; ===========================================================================

loc_F4D8:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F4E6(pc,d0.w),d0
		jmp	off_F4E6(pc,d0.w)
; ===========================================================================
off_F4E6:	dc.w loc_F4EE-off_F4E6				; 0 
					
		dc.w loc_F520-off_F4E6				; 1
		dc.w loc_F55C-off_F4E6				; 2
		dc.w loc_F58A-off_F4E6				; 3
; ===========================================================================

loc_F4EE:				
		cmpi.w	#$2810,(v_camera_x_pos).w
		bcs.s	locret_F51E
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$400,(v_boundary_bottom_next).w
		move.w	#$400,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.b	#4,(v_current_boss).w
		moveq	#$2B,d0
		jsrto	AddPLC,JmpTo2_AddPLC

locret_F51E:				
		rts	
; ===========================================================================

loc_F520:				
		cmpi.w	#$2A40,(v_camera_x_pos).w
		bcs.s	locret_F55A
		move.w	#$2A40,(v_boundary_right_next).w
		move.w	#$2A40,(v_boundary_left_next).w
		move.w	#$2A40,(v_boundary_right_next_p2).w
		move.w	#$2A40,(v_boundary_left_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic
		clr.b	(v_boss_spawn_delay).w
		jsrto	FindFreeObj,JmpTo_FindFreeObj
		bne.s	locret_F55A
		move.b	#id_BossAquaticRuin,ost_id(a1)

locret_F55A:							
		rts	
; ===========================================================================

loc_F55C:				
		cmpi.w	#$3F8,(v_camera_y_pos).w
		bcs.s	loc_F570
		move.w	#$3F8,(v_boundary_top_next).w
		move.w	#$3F8,(v_boundary_top_next_p2).w

loc_F570:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w
		bcs.s	locret_F588
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		jsrto	PlayMusic,JmpTo3_PlayMusic

locret_F588:				
		rts	
; ===========================================================================

loc_F58A:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_F59E:				
		tst.b	(v_act).w
		bne.w	locret_F624
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F5B4(pc,d0.w),d0
		jmp	off_F5B4(pc,d0.w)
; ===========================================================================
off_F5B4:	dc.w loc_F5BE-off_F5B4				; 0 
					
		dc.w loc_F5D0-off_F5B4				; 1
		dc.w loc_F5F0-off_F5B4				; 2
		dc.w loc_F60A-off_F5B4				; 3
		dc.w locret_F622-off_F5B4			; 4
; ===========================================================================

loc_F5BE:				
		move.w	#1,(v_tornado_x_vel).w
		move.w	#0,(v_tornado_y_vel).w
		addq.b	#2,(v_dle_routine).w
		rts	
; ===========================================================================

loc_F5D0:				
		cmpi.w	#$1180,(v_camera_x_pos).w
		bcs.s	locret_F5EE
		move.w	#-1,(v_tornado_x_vel).w
		move.w	#1,(v_tornado_y_vel).w
		move.w	#$500,(v_boundary_bottom_next).w
		addq.b	#2,(v_dle_routine).w

locret_F5EE:				
		rts	
; ===========================================================================

loc_F5F0:				
		cmpi.w	#$500,(v_camera_y_pos).w
		bcs.s	locret_F608
		move.w	#1,(v_tornado_x_vel).w
		move.w	#0,(v_tornado_y_vel).w
		addq.b	#2,(v_dle_routine).w

locret_F608:				
		rts	
; ===========================================================================

loc_F60A:				
		cmpi.w	#$1400,(v_camera_x_pos).w
		bcs.s	locret_F622
		move.w	#0,(v_tornado_x_vel).w
		move.w	#0,(v_tornado_y_vel).w
		addq.b	#2,(v_dle_routine).w

locret_F622:				
					
		rts	
; ===========================================================================

locret_F624:				
		rts	
; ===========================================================================

RestoreLevelMusic:				
		move.w	(v_level_music).w,d0
		jmpto	PlayMusic,JmpTo3_PlayMusic
; ===========================================================================

LoadAnimalExplosionArt:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		lea	(Animal_PLCs).l,a2
		move.b	(a2,d0.w),d0
		jsrto	AddPLC,JmpTo2_AddPLC
		moveq	#$41,d0
		jsrto	AddPLC,JmpTo2_AddPLC
		rts	
; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo_FindFreeObj:								
		jmp	FindFreeObj
JmpTo3_PlaySound:				
		jmp	PlaySound
JmpTo2_PalLoad_Now:				
		jmp	PalLoad_Now
JmpTo2_AddPLC:									
		jmp	AddPLC
JmpTo3_PlayMusic:								
		jmp	PlayMusic

		align 4
	endc	
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 11 - Emerald Hill and Hidden Palace Bridges
; ----------------------------------------------------------------------------

Bridge:				
		btst	#render_subobjects_bit,ost_render(a0)
		bne.w	.ischild
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_F68C(pc,d0.w),d1
		jmp	off_F68C(pc,d1.w)
; ===========================================================================

.ischild:				
		move.w	#$180,d0
		bra.w	DisplaySprite3
; ===========================================================================
off_F68C:	
		dc.w loc_F694-off_F68C				; 0 			
		dc.w loc_F77A-off_F68C				; 1
		dc.w loc_F80C-off_F68C				; 2
		dc.w loc_F810-off_F68C				; 3
; ===========================================================================

loc_F694:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_EmeraldHillBridge,ost_mappings(a0)
		move.w	#tile_Nem_EHZBridge+tile_pal3,ost_tile(a0)
		move.b	#3,$18(a0)
		cmpi.b	#8,(v_zone).w
		bne.s	loc_F6C6
		addq.b	#4,ost_primary_routine(a0)
		move.l	#Map_HiddenPalaceBridge,ost_mappings(a0)
		move.w	#(vram_HiddenPalaceBridge/sizeof_cell)+tile_pal4,ost_tile(a0)

loc_F6C6:				
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#-$80,$19(a0)
		move.w	ost_y_pos(a0),d2
		move.w	d2,$3C(a0)
		move.w	ost_x_pos(a0),d3
		lea	$28(a0),a2
		moveq	#0,d1
		move.b	(a2),d1
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0
		sub.w	d0,d3
		swap	d1
		move.w	#8,d1
		bsr.s	sub_F728
		move.w	ost_subspr6_x_pos(a1),d0
		subq.w	#8,d0
		move.w	d0,ost_x_pos(a1)
		move.l	a1,$30(a0)
		swap	d1
		subq.w	#8,d1
		bls.s	loc_F726
		move.w	d1,d4
		bsr.s	sub_F728
		move.l	a1,$34(a0)
		move.w	d4,d0
		add.w	d0,d0
		add.w	d4,d0
		move.w	ost_subspr2_x_pos(a1,d0.w),d0
		subq.w	#8,d0
		move.w	d0,ost_x_pos(a1)

loc_F726:				
		bra.s	loc_F77A

; ===========================================================================


sub_F728:				
					
		jsrto	FindNextFreeObj,JmpTo_FindNextFreeObj
		bne.s	locret_F778
		_move.b	ost_id(a0),ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	ost_render(a0),ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#$40,ost_mainspr_width(a1)
		move.b	d1,ost_mainspr_childsprites(a1)
		subq.b	#1,d1
		lea	ost_subspr2_x_pos(a1),a2

loc_F768:				
		move.w	d3,(a2)+
		move.w	d2,(a2)+
		move.w	#0,(a2)+
		addi.w	#$10,d3
		dbf	d1,loc_F768

locret_F778:				
		rts	

; ===========================================================================

loc_F77A:				
					
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_F790
		tst.b	$3E(a0)
		beq.s	loc_F7BC
		subq.b	#4,$3E(a0)
		bra.s	loc_F7B8
; ===========================================================================

loc_F790:				
		andi.b	#$10,d0
		beq.s	loc_F7AC
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_F7AC
		bcc.s	loc_F7A8
		addq.b	#1,$3F(a0)
		bra.s	loc_F7AC
; ===========================================================================

loc_F7A8:				
		subq.b	#1,$3F(a0)

loc_F7AC:				
					
		cmpi.b	#$40,$3E(a0)
		beq.s	loc_F7B8
		addq.b	#4,$3E(a0)

loc_F7B8:				
					
		bsr.w	loc_F9E8

loc_F7BC:				
		moveq	#0,d1
		move.b	$28(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	sub_F872

loc_F7D4:				
		tst.w	(f_two_player).w
		beq.s	loc_F7DC
		rts	
; ===========================================================================

loc_F7DC:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_F7F0
		rts	
; ===========================================================================

loc_F7F0:				
		movea.l	$30(a0),a1
		bsr.w	DeleteChild
		cmpi.b	#8,$28(a0)
		bls.s	loc_F808
		movea.l	$34(a0),a1
		bsr.w	DeleteChild

loc_F808:				
		bra.w	DeleteObject
; ===========================================================================

loc_F80C:				
		bra.w	DisplaySprite
; ===========================================================================

loc_F810:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_F826
		tst.b	$3E(a0)
		beq.s	loc_F852
		subq.b	#4,$3E(a0)
		bra.s	loc_F84E
; ===========================================================================

loc_F826:				
		andi.b	#$10,d0
		beq.s	loc_F842
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_F842
		bcc.s	loc_F83E
		addq.b	#1,$3F(a0)
		bra.s	loc_F842
; ===========================================================================

loc_F83E:				
		subq.b	#1,$3F(a0)

loc_F842:				
					
		cmpi.b	#$40,$3E(a0)
		beq.s	loc_F84E
		addq.b	#4,$3E(a0)

loc_F84E:				
					
		bsr.w	loc_F9E8

loc_F852:				
		moveq	#0,d1
		move.b	$28(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	sub_F872
		bsr.w	sub_F912
		bra.w	loc_F7D4

; ===========================================================================


sub_F872:				
					
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		moveq	#$3B,d5
		movem.l	d1-d4,-(sp)
		bsr.s	sub_F88C
		movem.l	(sp)+,d1-d4
		lea	($FFFFB000).w,a1
		subq.b	#1,d6
		moveq	#$3F,d5


; ===========================================================================


sub_F88C:				
		btst	d6,$22(a0)
		beq.s	loc_F8F0
		btst	#1,$22(a1)
		bne.s	loc_F8AC
		moveq	#0,d0
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_F8AC
		cmp.w	d2,d0
		bcs.s	loc_F8BA

loc_F8AC:				
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_F8BA:				
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)
		movea.l	$30(a0),a2
		cmpi.w	#8,d0
		bcs.s	loc_F8D2
		movea.l	$34(a0),a2
		subi_.w	#8,d0

loc_F8D2:				
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	ost_subspr2_y_pos(a2,d0.w),d0
		subq.w	#8,d0
		moveq	#0,d1
		move.b	ost_height(a1),d1
		sub.w	d1,d0
		move.w	d0,ost_y_pos(a1)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_F8F0:				
		move.w	d1,-(sp)
		jsrto	loc_19D9C,JmpTo_loc_19D9C
		move.w	(sp)+,d1
		btst	d6,$22(a0)
		beq.s	locret_F910
		moveq	#0,d0
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)

locret_F910:				
		rts	


; ===========================================================================


sub_F912:				
		moveq	#0,d0
		tst.w	($FFFFB010).w
		bne.s	loc_F924
		move.b	(v_vblank_counter_byte).w,d0
		andi.w	#$1C,d0
		lsr.w	#1,d0

loc_F924:				
		moveq	#0,d2
		move.b	byte_F950+1(pc,d0.w),d2
		swap	d2
		move.b	byte_F950(pc,d0.w),d2
		moveq	#0,d0
		tst.w	($FFFFB050).w
		bne.s	loc_F942
		move.b	(v_vblank_counter_byte).w,d0
		andi.w	#$1C,d0
		lsr.w	#1,d0

loc_F942:				
		moveq	#0,d6
		move.b	byte_F950+1(pc,d0.w),d6
		swap	d6
		move.b	byte_F950(pc,d0.w),d6
		bra.s	loc_F960
; ===========================================================================
byte_F950:	
		dc.b   1,  2					; 0
		dc.b   1,  2					; 2
		dc.b   1,  2					; 4
		dc.b   1,  2					; 6
		dc.b   0,  1					; 8
		dc.b   0,  0					; 10
		dc.b   0,  0					; 12
		dc.b   0,  1					; 14
; ===========================================================================

loc_F960:				
		moveq	#-2,d3
		moveq	#-2,d4
		move.b	$22(a0),d0
		andi.b	#8,d0
		beq.s	loc_F972
		move.b	$3F(a0),d3

loc_F972:				
		move.b	$22(a0),d0
		andi.b	#$10,d0
		beq.s	loc_F980
		move.b	$3B(a0),d4

loc_F980:				
		movea.l	$30(a0),a1
		lea	ost_subspr9_frame+next_subspr(a1),a2
		lea	ost_subspr2_frame(a1),a1
		moveq	#0,d1
		move.b	$28(a0),d1
		subq.b	#1,d1
		moveq	#0,d5

loc_F996:				
		moveq	#0,d0
		subq.w	#1,d3
		cmp.b	d3,d5
		bne.s	loc_F9A0
		move.w	d2,d0

loc_F9A0:				
		addq.w	#2,d3
		cmp.b	d3,d5
		bne.s	loc_F9A8
		move.w	d2,d0

loc_F9A8:				
		subq.w	#1,d3
		subq.w	#1,d4
		cmp.b	d4,d5
		bne.s	loc_F9B2
		move.w	d6,d0

loc_F9B2:				
		addq.w	#2,d4
		cmp.b	d4,d5
		bne.s	loc_F9BA
		move.w	d6,d0

loc_F9BA:				
		subq.w	#1,d4
		cmp.b	d3,d5
		bne.s	loc_F9C6
		swap	d2
		move.w	d2,d0
		swap	d2

loc_F9C6:				
		cmp.b	d4,d5
		bne.s	loc_F9D0
		swap	d6
		move.w	d6,d0
		swap	d6

loc_F9D0:				
		move.b	d0,(a1)
		addq.w	#1,d5
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_F9E2
		movea.l	$34(a0),a1
		lea	ost_subspr2_frame(a1),a1

loc_F9E2:				
		dbf	d1,loc_F996
		rts	

; ===========================================================================

loc_F9E8:				
					
		move.b	$3E(a0),d0
		jsrto	CalcSine,JmpTo_CalcSine
		move.w	d0,d4
		lea	(byte_FB28).l,a4
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		move.w	d3,d2
		add.w	d0,d3
		moveq	#0,d5
		lea	(byte_FA98-$80).l,a5
		move.b	(a5,d3.w),d5

loc_FA16:				
		andi.w	#$F,d3
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		movea.l	$30(a0),a1
		lea	ost_subspr9_y_pos+next_subspr(a1),a2
		lea	ost_subspr2_y_pos(a1),a1

loc_FA2C:				
		moveq	#0,d0
		move.b	(a3)+,d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_FA4C
		movea.l	$34(a0),a1
		lea	ost_subspr2_y_pos(a1),a1

loc_FA4C:				
		dbf	d2,loc_FA2C
		moveq	#0,d0
		move.b	$28(a0),d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		addq.b	#1,d3
		sub.b	d0,d3
		neg.b	d3
		bmi.s	locret_FA96
		move.w	d3,d2
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		adda.w	d2,a3
		subq.w	#1,d2
		bcs.s	locret_FA96

loc_FA72:				
		moveq	#0,d0
		move.b	-(a3),d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_FA92
		movea.l	$34(a0),a1
		lea	ost_subspr2_y_pos(a1),a1

loc_FA92:				
		dbf	d2,loc_FA72

locret_FA96:								
		rts	
; ===========================================================================
byte_FA98:
		dc.b   2,  4,  6,  8,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0 ; 0
		dc.b   2,  4,  6,  8, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0 ; 16
		dc.b   2,  4,  6,  8, $A, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0 ; 32
		dc.b   2,  4,  6,  8, $A, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0 ; 48
		dc.b   2,  4,  6,  8, $A, $C, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0 ; 64
		dc.b   2,  4,  6,  8, $A, $C, $E, $C, $A,  8,  6,  4,  2,  0,  0,  0 ; 80
		dc.b   2,  4,  6,  8, $A, $C, $E, $E, $C, $A,  8,  6,  4,  2,  0,  0 ; 96
		dc.b   2,  4,  6,  8, $A, $C, $E,$10, $E, $C, $A,  8,  6,  4,  2,  0 ; 112
		dc.b   2,  4,  6,  8, $A, $C, $E,$10,$10, $E, $C, $A,  8,  6,  4,  2 ; 128
byte_FB28:	dc.b $FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 0
					
		dc.b $B5,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 16
		dc.b $7E,$DB,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 32
		dc.b $61,$B5,$EC,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 48
		dc.b $4A,$93,$CD,$F3,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 64
		dc.b $3E,$7E,$B0,$DB,$F6,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 80
		dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 96
		dc.b $31,$61,$8E,$B5,$D4,$EC,$FB,$FF,  0,  0,  0,  0,  0,  0,  0,  0 ; 112
		dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF,  0,  0,  0,  0,  0,  0,  0 ; 128
		dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF,  0,  0,  0,  0,  0,  0 ; 144
		dc.b $1F,$44,$67,$88,$A7,$BD,$D4,$E7,$F4,$FD,$FF,  0,  0,  0,  0,  0 ; 160
		dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF,  0,  0,  0,  0 ; 176
		dc.b $19,$38,$56,$73,$8E,$A7,$BD,$D1,$E1,$EE,$F8,$FE,$FF,  0,  0,  0 ; 192
		dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF,  0,  0 ; 208
		dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF,  0 ; 224
		dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$D4,$E1,$EC,$F4,$FB,$FE,$FF ; 240

		even


		include "mappings/sprite/HPZ Bridge (unused).asm" ; unused
		include "mappings/sprite/EHZ Bridge.asm"


; ===========================================================================

	if RemoveJmpTos=0
JmpTo_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo_loc_19D9C:				
		jmp	loc_19D9C
JmpTo_CalcSine:				
		jmp	CalcSine

		align 4
	endc
		 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 15 - Aquatic Ruin, Mystic Cave, and Oil Ocean Swinging Platforms
; ----------------------------------------------------------------------------

SwingingPlatform:				
		btst	#render_subobjects_bit,ost_render(a0)
		bne.w	loc_FCB4
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_FCBC(pc,d0.w),d1
		jmp	off_FCBC(pc,d1.w)
; ===========================================================================

loc_FCB4:				
		move.w	#$200,d0
		bra.w	DisplaySprite3
; ===========================================================================
off_FCBC:	
		dc.w loc_FCCA-off_FCBC				; 0		
		dc.w loc_FE50-off_FCBC				; 1
		dc.w loc_1003A-off_FCBC				; 2
		dc.w loc_1003E-off_FCBC				; 3
		dc.w loc_100F8-off_FCBC				; 4
		dc.w loc_10100-off_FCBC				; 5
		dc.w loc_10166-off_FCBC				; 6
; ===========================================================================

loc_FCCA:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Swing_OOZ,ost_mappings(a0)
		move.w	#tile_Nem_OOZSwingPlat+tile_pal3,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#$20,$19(a0)
		move.b	#$10,ost_height(a0)
		move.w	ost_y_pos(a0),$38(a0)
		move.w	ost_x_pos(a0),$3A(a0)
		cmpi.b	#$B,(v_zone).w
		bne.s	loc_FD22
		move.l	#Map_Swing_Track_CPZ_MCZ,ost_mappings(a0)
		move.w	#0,ost_tile(a0)
		move.b	#$18,$19(a0)
		move.b	#8,ost_height(a0)

loc_FD22:				
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_FD44
		move.l	#Map_Swing_Circle_ARZ,ost_mappings(a0)
		move.w	#0,ost_tile(a0)
		move.b	#$20,$19(a0)
		move.b	#8,ost_height(a0)

loc_FD44:				
		bsr.w	Adjust2PArtPointer
		moveq	#0,d1
		move.b	$28(a0),d1
		bpl.s	loc_FD54
		addq.b	#4,ost_primary_routine(a0)

loc_FD54:				
		move.b	d1,d4
		andi.b	#$70,d4
		andi.w	#$F,d1
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		jsrto	FindNextFreeObj,JmpTo2_FindNextFreeObj
		bne.w	loc_FE24
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		cmpi.b	#$20,d4
		bne.s	loc_FDC6
		move.b	#4,$24(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	#$50,ost_height(a1)
		bset	#render_useheight_bit,ost_render(a1)
		move.b	#3,$1A(a1)
		move.w	d2,ost_x_pos(a1)
		addi.w	#$40,d3
		move.w	d3,ost_y_pos(a1)
		addi.w	#$48,d3
		move.w	d3,ost_y_pos(a0)
		bra.s	loc_FE20
; ===========================================================================

loc_FDC6:				
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#$48,ost_mainspr_width(a1)
		move.b	d1,ost_mainspr_childsprites(a1)
		subq.b	#1,d1
		lea	ost_subspr2_x_pos(a1),a2

loc_FDDC:				
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		addi.w	#$10,d3
		dbf	d1,loc_FDDC
		
		move.b	#2,ost_subspr2_frame(a1)
		move.w	ost_subspr6_x_pos(a1),ost_x_pos(a1)
		move.w	ost_subspr6_y_pos(a1),ost_y_pos(a1)
		move.w	d2,ost_subspr6_x_pos(a1)
		move.w	d3,ost_subspr6_y_pos(a1)
		move.b	#1,ost_mainspr_frame(a1)
		addi_.w	#8,d3
		move.w	d3,ost_y_pos(a0)
		move.b	#$50,ost_mainspr_height(a1)
		bset	#render_useheight_bit,ost_render(a1)

loc_FE20:				
		move.l	a1,$30(a0)

loc_FE24:				
		move.w	#$8000,$26(a0)
		move.w	#0,$3E(a0)
		move.b	$28(a0),d1
		andi.w	#$70,d1
		move.b	d1,$28(a0)
		cmpi.b	#$40,d1
		bne.s	loc_FE50
		move.l	#Map_SpikedSwing_MCZ,ost_mappings(a0)
		move.b	#$A7,$20(a0)

loc_FE50:							
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	sub_FE70
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	ost_height(a0),d3
		addq.b	#1,d3
		popr.w	d4
		jsrto	DetectPlatform2,JmpTo_DetectPlatform2
		bra.w	loc_1000C

; ===========================================================================


sub_FE70:				
					
		moveq	#0,d0
		moveq	#0,d1
		move.b	($FFFFFE78).w,d0
		move.b	$28(a0),d1
		beq.s	loc_FEC2
		cmpi.b	#$10,d1
		bne.s	loc_FE9E
		cmpi.b	#$3F,d0
		beq.s	loc_FE90
		bcc.s	loc_FEC2
		moveq	#$40,d0
		bra.s	loc_FEC2
; ===========================================================================

loc_FE90:				
		move.w	#$D7,d0	
		jsr	PlaySoundLocal
		moveq	#$40,d0
		bra.s	loc_FEC2
; ===========================================================================

loc_FE9E:				
		cmpi.b	#$20,d1
		beq.w	locret_FF6C
		cmpi.b	#$30,d1
		bne.s	loc_FEB8
		cmpi.b	#$41,d0
		beq.s	loc_FE90
		bcs.s	loc_FEC2
		moveq	#$40,d0
		bra.s	loc_FEC2
; ===========================================================================

loc_FEB8:				
		cmpi.b	#$40,d1
		bne.s	loc_FEC2
		bsr.w	loc_FF6E

loc_FEC2:				
		move.b	$2E(a0),d1
		cmp.b	d0,d1
		beq.w	locret_FF6C
		move.b	d0,$2E(a0)
		move.w	#$80,d1	
		btst	#0,$22(a0)
		beq.s	loc_FEE0
		neg.w	d0
		add.w	d1,d0

loc_FEE0:				
		jsrto	CalcSine,JmpTo2_CalcSine
		move.w	$38(a0),d2
		move.w	$3A(a0),d3
		moveq	#0,d6
		movea.l	$30(a0),a1
		move.b	ost_mainspr_childsprites(a1),d6
		subq.w	#1,d6
		bcs.s	locret_FF6C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		moveq	#0,d4
		moveq	#0,d5
		
		lea	ost_subspr2_x_pos(a1),a2

loc_FF0A:				
		pushr.l	d4-d5
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		popr.l	d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#next_subspr-4,a2
		dbf	d6,loc_FF0A
		
		pushr.l	d4-d5
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	ost_subspr6_x_pos(a1),d2
		move.w	ost_subspr6_y_pos(a1),d3
		move.w	d5,ost_subspr6_x_pos(a1)
		move.w	d4,ost_subspr6_y_pos(a1)
		move.w	d2,ost_x_pos(a1)
		move.w	d3,ost_y_pos(a1)
		popr.l	d4-d5
		asr.l	#1,d0
		asr.l	#1,d1
		add.l	d0,d4
		add.l	d1,d5
		swap	d4
		swap	d5
		add.w	$38(a0),d4
		add.w	$3A(a0),d5
		move.w	d4,ost_y_pos(a0)
		move.w	d5,ost_x_pos(a0)

locret_FF6C:				
		rts	

; ===========================================================================

loc_FF6E:				
		tst.w	$36(a0)
		beq.s	loc_FF7C
		subq.w	#1,$36(a0)
		bra.w	loc_10006
; ===========================================================================

loc_FF7C:				
		tst.b	$34(a0)
		bne.s	loc_FFA2
		move.w	($FFFFB008).w,d0
		sub.w	$3A(a0),d0
		addi.w	#$20,d0
		cmpi.w	#$40,d0
		bcc.s	loc_10006
		tst.w	(v_debug_active).w
		bne.w	loc_10006
		move.b	#1,$34(a0)

loc_FFA2:				
		tst.b	$3D(a0)
		beq.s	loc_FFD8
		move.w	$3E(a0),d0
		addi_.w	#8,d0
		move.w	d0,$3E(a0)
		add.w	d0,$26(a0)
		cmpi.w	#$200,d0
		bne.s	loc_10006
		move.w	#0,$3E(a0)
		move.w	#$8000,$26(a0)

loc_FFCA:
		move.b	#0,$3D(a0)
		move.w	#$3C,$36(a0)
		bra.s	loc_10006
; ===========================================================================

loc_FFD8:				
		move.w	$3E(a0),d0
		subi_.w	#8,d0
		move.w	d0,$3E(a0)
		add.w	d0,$26(a0)
		cmpi.w	#$FE00,d0
		bne.s	loc_10006

loc_FFEE:
		move.w	#0,$3E(a0)
		move.w	#$4000,$26(a0)
		move.b	#1,$3D(a0)

loc_10000:				
		move.w	#$3C,$36(a0)

loc_10006:				
					
		move.b	$26(a0),d0
		rts	
; ===========================================================================

loc_1000C:				
					
		tst.w	(f_two_player).w
		beq.s	loc_10016
		bra.w	DisplaySprite
; ===========================================================================

loc_10016:				
		move.w	$3A(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1002E
		bra.w	DisplaySprite
; ===========================================================================

loc_1002E:				
		movea.l	$30(a0),a1
		bsr.w	DeleteChild
		bra.w	DeleteObject
; ===========================================================================

loc_1003A:				
		bra.w	DisplaySprite
; ===========================================================================

loc_1003E:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	sub_FE70
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	ost_height(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform2,JmpTo_DetectPlatform2
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.w	loc_100F4
		tst.b	($FFFFFE78).w
		bne.w	loc_100F4
		jsrto	FindNextFreeObj,JmpTo2_FindNextFreeObj
		bne.s	loc_100E4
		moveq	#0,d0
		move.w	#$F,d1

loc_1007A:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_1007A
		move.b	#$A,$24(a1)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_10098
		addq.b	#2,$24(a1)

loc_10098:				
		move.w	#$200,ost_x_vel(a1)
		btst	#0,$22(a0)
		beq.s	loc_100AA
		neg.w	ost_x_vel(a1)

loc_100AA:				
		bset	#1,$22(a1)
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0
		move.w	a1,d1
		subi.w	#-$5000,d1
		lsr.w	#6,d1
		andi.w	#$7F,d1
		lea	($FFFFB000).w,a1
		cmp.b	$3D(a1),d0
		bne.s	loc_100D6
		move.b	d1,$3D(a1)

loc_100D6:				
		lea	($FFFFB040).w,a1
		cmp.b	$3D(a1),d0
		bne.s	loc_100E4
		move.b	d1,$3D(a1)

loc_100E4:				
					
		move.b	#3,$1A(a0)
		addq.b	#2,ost_primary_routine(a0)
		andi.b	#-$19,$22(a0)

loc_100F4:				
					
		bra.w	loc_1000C
; ===========================================================================

loc_100F8:				
		bsr.w	sub_FE70
		bra.w	loc_1000C
; ===========================================================================

loc_10100:				
		move.w	ost_x_pos(a0),-(sp)
		btst	#1,$22(a0)
		beq.s	loc_1013E
		bsr.w	SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		cmpi.w	#$720,ost_y_pos(a0)
		bcs.s	loc_1014E
		move.w	#$720,ost_y_pos(a0)
		bclr	#1,$22(a0)
		move.w	#0,ost_x_vel(a0)		; could be clr.w
		move.w	#0,ost_y_vel(a0)
		move.w	ost_y_pos(a0),$38(a0)
		bra.s	loc_1014E
; ===========================================================================

loc_1013E:				
		moveq	#0,d0
		move.b	($FFFFFE74).w,d0
		lsr.w	#1,d0
		add.w	$38(a0),d0
		move.w	d0,ost_y_pos(a0)

loc_1014E:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	ost_height(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform2,JmpTo_DetectPlatform2
		bra.w	DespawnObject
; ===========================================================================

loc_10166:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	SpeedToPos
		btst	#1,$22(a0)
		beq.s	loc_101A2
		addi.w	#$18,ost_y_vel(a0)
		move.w	(v_water_height_normal).w,d0
		cmp.w	ost_y_pos(a0),d0
		bhi.s	loc_101D0
		move.w	d0,ost_y_pos(a0)
		move.w	d0,$38(a0)
		bclr	#1,$22(a0)
		move.w	#$100,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		bra.s	loc_101D0
; ===========================================================================

loc_101A2:				
		moveq	#0,d0
		move.b	($FFFFFE74).w,d0
		lsr.w	#1,d0
		add.w	$38(a0),d0
		move.w	d0,ost_y_pos(a0)
		tst.w	ost_x_vel(a0)
		beq.s	loc_101D0
		moveq	#0,d3
		move.b	$19(a0),d3
		jsrto	FindWallRightObj,JmpTo_FindWallRightObj
		tst.w	d1
		bpl.s	loc_101D0
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)		; could be clr.w

loc_101D0:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	ost_height(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform2,JmpTo_DetectPlatform2
		bra.w	DespawnObject
; ===========================================================================

		include "mappings/sprite/OOZ Swinging Platform.asm"	
		include "mappings/sprite/ARZ Swinging and Circling Platforms.asm"
		include	"mappings/sprite/CPZ & MCZ Swinging and Tracked Platforms.asm"
		include "mappings/sprite/MCZ Spiked Swinging Platform.asm"
		
; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo_DetectPlatform2:								
		jmp	DetectPlatform2
JmpTo2_FindNextFreeObj:									
		jmp	FindNextFreeObj
JmpTo2_CalcSine:				
		jmp	CalcSine
JmpTo_FindWallRightObj:				
		jmp	FindWallRightObj
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 17 - GHZ rotating log helix spikes (from Sonic 1, unused)
; the programming of this was modified somewhat between Sonic 1 and Sonic 2
; ----------------------------------------------------------------------------

Helix:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1031E(pc,d0.w),d1
		jmp	off_1031E(pc,d1.w)
; ===========================================================================
off_1031E:	
		dc.w loc_10324-off_1031E			; 0 			
		dc.w loc_103E8-off_1031E			; 2
		dc.w loc_1044A-off_1031E			; 4
; ===========================================================================

loc_10324:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Hel,ost_mappings(a0)
		move.w	#(vram_SpikePole/sizeof_cell)+tile_pal3,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		_move.b	ost_id(a0),d4
		lea	$28(a0),a2
		moveq	#0,d1
		move.b	(a2),d1
		move.b	#0,(a2)+
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0
		sub.w	d0,d3
		subq.b	#2,d1
		bcs.s	loc_103E8
		moveq	#0,d6

loc_10372:				
		bsr.w	FindNextFreeObj
		bne.s	loc_103E8
		addq.b	#1,$28(a0)
		move.w	a1,d5
		subi.w	#$B000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+
		move.b	#4,$24(a1)
		_move.b	d4,ost_id(a1)
		move.w	d2,ost_y_pos(a1)
		move.w	d3,ost_x_pos(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	#(vram_SpikePole/sizeof_cell)+tile_pal3,ost_tile(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#8,$19(a1)
		move.b	d6,$3E(a1)
		addq.b	#1,d6
		andi.b	#7,d6
		addi.w	#$10,d3
		cmp.w	ost_x_pos(a0),d3
		bne.s	loc_103E4
		move.b	d6,$3E(a0)
		addq.b	#1,d6
		andi.b	#7,d6
		addi.w	#$10,d3
		addq.b	#1,$28(a0)

loc_103E4:				
		dbf	d1,loc_10372

loc_103E8:				
		bsr.w	sub_1042A
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_10404
		bra.w	DisplaySprite
; ===========================================================================

loc_10404:				
		moveq	#0,d2
		lea	$28(a0),a2
		move.b	(a2)+,d2

loc_1040C:
		subq.b	#2,d2
		bcs.s	loc_10426

loc_10410:				
		moveq	#0,d0
		move.b	(a2)+,d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a1
		bsr.w	DeleteChild
		dbf	d2,loc_10410

loc_10426:				
		bra.w	DeleteObject

; ===========================================================================


sub_1042A:				
					
		move.b	(v_syncani_0_frame).w,d0
		move.b	#0,$20(a0)
		add.b	$3E(a0),d0
		andi.b	#7,d0
		move.b	d0,$1A(a0)
		bne.s	locret_10448
		move.b	#-$7C,$20(a0)

locret_10448:				
		rts	

; ===========================================================================

loc_1044A:				
		bsr.w	sub_1042A
		bra.w	DisplaySprite
; ===========================================================================
		include "mappings/sprite/GHZ Spiked Helix Pole (unused).asm"		
; ===========================================================================

	if Revision<2
		nop	
	endc

; ===========================================================================		
; ----------------------------------------------------------------------------
; Object 18 - Stationary floating platform in EHZ, ARZ, and HTZ
; ----------------------------------------------------------------------------
Platform1:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_104BA(pc,d0.w),d1
		jmp	off_104BA(pc,d1.w)
; ===========================================================================
off_104BA:	
		dc.w loc_104CE-off_104BA			; 0 		
		dc.w loc_1056A-off_104BA			; 1
		dc.w BranchTo3_DeleteObject-off_104BA		; 2
		dc.w loc_105A8-off_104BA			; 3
		dc.w loc_105D4-off_104BA			; 4

word_104C4:	
		;	ost_width
		;	ost_frame
		dc.b $20, 0
		dc.b $20, 1
		dc.b $20, 2
		dc.b $40, 3
		dc.b $30, 4
; ===========================================================================

loc_104CE:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		lea	word_104C4(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$1A(a0)
		move.l	#Map_Plat_EHZ_HTZ,ost_mappings(a0)
		move.w	#0+tile_pal3,ost_tile(a0)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_1050E
		move.l	#Map_Plat_ARZ,ost_mappings(a0)
		move.w	#0+tile_pal3,ost_tile(a0)

loc_1050E:				
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.w	ost_y_pos(a0),$2C(a0)
		move.w	ost_y_pos(a0),$34(a0)
		move.w	ost_x_pos(a0),$32(a0)
		move.w	#$80,$26(a0)
		tst.b	$28(a0)
		bpl.s	loc_10564
		addq.b	#6,ost_primary_routine(a0)
		andi.b	#$F,$28(a0)
		move.b	#$30,ost_height(a0)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_1055A
		move.b	#$28,ost_height(a0)

loc_1055A:				
		bset	#render_useheight_bit,ost_render(a0)
		bra.w	loc_105D4
; ===========================================================================

loc_10564:				
		andi.b	#$F,$28(a0)

loc_1056A:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_10580
		tst.b	$38(a0)
		beq.s	loc_1058C
		subq.b	#4,$38(a0)
		bra.s	loc_1058C
; ===========================================================================

loc_10580:				
		cmpi.b	#$40,$38(a0)
		beq.s	loc_1058C
		addq.b	#4,$38(a0)

loc_1058C:				
					
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	sub_10638
		bsr.w	sub_1061E
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform,JmpTo_DetectPlatform
		bra.s	loc_105B0
; ===========================================================================

loc_105A8:				
		bsr.w	sub_10638
		bsr.w	sub_1061E

loc_105B0:				
					
		tst.w	(f_two_player).w
		beq.s	loc_105BA
		bra.w	DisplaySprite
; ===========================================================================

loc_105BA:				
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	BranchTo3_DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

BranchTo3_DeleteObject:							
		bra.w	DeleteObject
; ===========================================================================

loc_105D4:				
					
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_105EA
		tst.b	$38(a0)
		beq.s	loc_105F6
		subq.b	#4,$38(a0)
		bra.s	loc_105F6
; ===========================================================================

loc_105EA:				
		cmpi.b	#$40,$38(a0)
		beq.s	loc_105F6
		addq.b	#4,$38(a0)

loc_105F6:				
					
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	sub_10638

loc_105FE:
		bsr.w	sub_1061E
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo_SolidObject
		bra.s	loc_105B0

; ===========================================================================


sub_1061E:				
					
		move.b	$38(a0),d0
		jsrto	CalcSine,JmpTo3_CalcSine
		move.w	#$400,d1
		muls.w	d1,d0
		swap	d0
		add.w	$2C(a0),d0
		move.w	d0,ost_y_pos(a0)
		rts	

; ===========================================================================


sub_10638:				
					
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_1064C(pc,d0.w),d1
		jmp	off_1064C(pc,d1.w)
		
; ===========================================================================
off_1064C:	
		dc.w locret_10668-off_1064C			; 0 		
		dc.w loc_1067A-off_1064C			; 1
		dc.w loc_106C0-off_1064C			; 2
		dc.w loc_106D8-off_1064C			; 3
		dc.w loc_10702-off_1064C			; 4
		dc.w loc_1066A-off_1064C			; 5
		dc.w loc_106B0-off_1064C			; 6
		dc.w loc_10778-off_1064C			; 7
		dc.w loc_107A4-off_1064C			; 8
		dc.w locret_10668-off_1064C			; 9
		dc.w loc_107BC-off_1064C			; 10
		dc.w loc_107D6-off_1064C			; 11
		dc.w loc_106A2-off_1064C			; 12
		dc.w loc_10692-off_1064C			; 13
; ===========================================================================

locret_10668:				
		rts	
; ===========================================================================

loc_1066A:				
		move.w	$32(a0),d0
		move.b	$26(a0),d1
		neg.b	d1
		addi.b	#$40,d1
		bra.s	loc_10686
; ===========================================================================

loc_1067A:				
		move.w	$32(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1

loc_10686:				
		ext.w	d1
		add.w	d1,d0
		move.w	d0,ost_x_pos(a0)
		bra.w	loc_107EE
; ===========================================================================

loc_10692:				
		move.w	$34(a0),d0
		move.b	($FFFFFE6C).w,d1
		neg.b	d1
		addi.b	#$30,d1
		bra.s	loc_106CC
; ===========================================================================

loc_106A2:				
		move.w	$34(a0),d0
		move.b	($FFFFFE6C).w,d1
		subi.b	#$30,d1
		bra.s	loc_106CC
; ===========================================================================

loc_106B0:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		neg.b	d1
		addi.b	#$40,d1
		bra.s	loc_106CC
; ===========================================================================

loc_106C0:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1

loc_106CC:				
					
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$2C(a0)
		bra.w	loc_107EE
; ===========================================================================

loc_106D8:				
		tst.w	$3A(a0)
		bne.s	loc_106F0
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_106EE
		move.w	#$1E,$3A(a0)

locret_106EE:				
					
		rts	
; ===========================================================================

loc_106F0:				
		subq.w	#1,$3A(a0)
		bne.s	locret_106EE
		move.w	#$20,$3A(a0)
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_10702:				
		tst.w	$3A(a0)

loc_10706:
		beq.s	loc_10730

loc_10708:
		subq.w	#1,$3A(a0)
		bne.s	loc_10730
		bclr	#3,$22(a0)
		beq.s	loc_1071C
		lea	($FFFFB000).w,a1
		bsr.s	sub_1075E

loc_1071C:				
		bclr	#4,$22(a0)
		beq.s	.do_updatesA
		lea	($FFFFB040).w,a1
		bsr.s	sub_1075E

.do_updatesA:				
		move.b	#6,ost_primary_routine(a0)

loc_10730:				
					
		move.l	$2C(a0),d3
		move.w	ost_y_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$2C(a0)
		addi.w	#$38,ost_y_vel(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$120,d0
		cmp.w	$2C(a0),d0
		bcc.s	locret_1075C
		move.b	#4,ost_primary_routine(a0)

locret_1075C:				
		rts	

; ===========================================================================


sub_1075E:				
					
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.w	ost_y_vel(a0),ost_y_vel(a1)
		rts	

; ===========================================================================

loc_10778:				
		tst.w	$3A(a0)
		bne.s	loc_10798
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#4,d0
		tst.b	(a2,d0.w)
		beq.s	locret_10796
		move.w	#$3C,$3A(a0)

locret_10796:				
					
		rts	
; ===========================================================================

loc_10798:				
		subq.w	#1,$3A(a0)
		bne.s	locret_10796
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_107A4:				
		subq.w	#2,$2C(a0)
		move.w	$34(a0),d0
		subi.w	#$200,d0
		cmp.w	$2C(a0),d0
		bne.s	locret_107BA
		clr.b	$28(a0)

locret_107BA:				
		rts	
; ===========================================================================

loc_107BC:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1
		ext.w	d1
		asr.w	#1,d1
		add.w	d1,d0
		move.w	d0,$2C(a0)
		bra.w	loc_107EE
; ===========================================================================

loc_107D6:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		neg.b	d1
		addi.b	#$40,d1
		ext.w	d1
		asr.w	#1,d1
		add.w	d1,d0
		move.w	d0,$2C(a0)

loc_107EE:				
					
		move.b	($FFFFFE78).w,$26(a0)
		rts	
; ===========================================================================

		include "mappings/sprite/EHZ & HTZ Stationary Platforms.asm"
		include "mappings/sprite/ARZ Stationary Platform.asm"
		
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo3_CalcSine:				
		jmp	CalcSine
JmpTo_DetectPlatform:				
		jmp	DetectPlatform
JmpTo_SolidObject:				
		jmp	SolidObject
	
		align 4		
	endc

; ===========================================================================		
; ----------------------------------------------------------------------------
; Object 1A - Collapsing platform from HPZ (and Sonic 1's GHZ)
; also supports OOZ, but never made use of, so effectively an unused beta leftover
;
; Unlike Object 1F, this supports sloped platforms and subtype-dependent
; mappings. Both were used by GHZ, the latter to allow different shading
; on right-facing ledges.
; ----------------------------------------------------------------------------

CollapseLedge:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_108CA(pc,d0.w),d1
		jmp	off_108CA(pc,d1.w)
; ===========================================================================
off_108CA:	
		dc.w loc_108D0-off_108CA			; 0 		
		dc.w loc_1097C-off_108CA			; 1
		dc.w loc_109B4-off_108CA			; 2
; ===========================================================================

loc_108D0:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Ledge,ost_mappings(a0)
		move.w	#0+tile_pal3,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#7,$38(a0)
		move.b	$28(a0),$1A(a0)
		move.l	#byte_10BF2,$34(a0)
		cmpi.b	#8,(v_zone).w
		bne.s	loc_10938
		move.l	#Map_CPlat_HPZ,ost_mappings(a0)
		move.w	#(vram_HPZPlatform/sizeof_cell)+tile_pal3,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$30,$19(a0)
		move.l	#byte_10FEC,$3C(a0)
		move.l	#byte_10C0B,$34(a0)
		bra.s	loc_1097C
; ===========================================================================

loc_10938:				
		cmpi.b	#id_OOZ,(v_zone).w
		bne.s	loc_10962
		move.l	#Map_CFlo_OOZ,ost_mappings(a0)
		move.w	#tile_Nem_OOZPlatform+tile_pal4,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$40,$19(a0)
		move.l	#byte_10FDC,$3C(a0)
		bra.s	loc_1097C
; ===========================================================================

loc_10962:				
		move.l	#byte_10C3C,$3C(a0)
		move.b	#$34,$19(a0)
		move.b	#$38,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)

loc_1097C:				
					

		tst.b	$3A(a0)
		beq.s	loc_1098E
		tst.b	$38(a0)
		beq.w	loc_10B68
		subq.b	#1,$38(a0)

loc_1098E:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	sub_1099E
		move.b	#1,$3A(a0)

; ===========================================================================


sub_1099E:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		movea.l	$3C(a0),a2
		move.w	ost_x_pos(a0),d4
		jsrto	SlopedPlatform,JmpTo_SlopeObject
		bra.w	DespawnObject

; ===========================================================================

loc_109B4:				
		tst.b	$38(a0)
		beq.s	loc_109F8
		tst.b	$3A(a0)
		bne.s	loc_109C8
		subq.b	#1,$38(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_109C8:				
		bsr.w	sub_1099E
		subq.b	#1,$38(a0)
		bne.s	locret_109F6
		lea	($FFFFB000).w,a1
		bsr.s	sub_109DC
		lea	($FFFFB040).w,a1

; ===========================================================================


sub_109DC:				
		btst	#3,$22(a1)
		beq.s	locret_109F6
		bclr	#3,$22(a1)
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)

locret_109F6:							
		rts	

; ===========================================================================

loc_109F8:				
		bsr.w	ObjectFall
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1F - Collapsing platform from ARZ, MCZ and OOZ
; (same object as the collapsing floors in Sonic 1's MZ, SLZ and SBZ)
; ----------------------------------------------------------------------------

CollapseFloor:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_10A16(pc,d0.w),d1
		jmp	off_10A16(pc,d1.w)
; ===========================================================================
off_10A16:	
		dc.w loc_10A1C-off_10A16			; 0 			
		dc.w loc_10AD6-off_10A16			; 1
		dc.w loc_10B0E-off_10A16			; 2
; ===========================================================================

loc_10A1C:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_CFlo_S1,ost_mappings(a0)
		move.w	#(vram_MZPlatform/sizeof_cell)+tile_pal3,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#7,$38(a0)
		move.b	#$44,$19(a0)
		lea	(byte_10C17).l,a4
		btst	#0,$28(a0)
		beq.s	loc_10A5A
		lea	(byte_10C1F).l,a4

loc_10A5A:				
		move.l	a4,$34(a0)
		cmpi.b	#$A,(v_zone).w
		bne.s	loc_10A86
		move.l	#Map_CFlo_OOZ,ost_mappings(a0)
		move.w	#tile_Nem_OOZPlatform+tile_pal4,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$40,$19(a0)
		move.l	#byte_10C27,$34(a0)

loc_10A86:				
		cmpi.b	#$B,(v_zone).w
		bne.s	loc_10AAE
		move.l	#Map_CFlo_MCZ,ost_mappings(a0)
		move.w	#tile_Nem_MCZCollapsingPlat+tile_pal4,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$20,$19(a0)
		move.l	#byte_10C2E,$34(a0)

loc_10AAE:				
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_10AD6
		move.l	#Map_CFlo_ARZ,ost_mappings(a0)
		move.w	#0+tile_pal3,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$20,$19(a0)
		move.l	#byte_10C34,$34(a0)

loc_10AD6:				
					
		tst.b	$3A(a0)
		beq.s	loc_10AE8
		tst.b	$38(a0)
		beq.w	loc_10B62
		subq.b	#1,$38(a0)

loc_10AE8:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	sub_10AF8
		move.b	#1,$3A(a0)

; ===========================================================================


sub_10AF8:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		jsrto	DetectPlatform,JmpTo2_DetectPlatform
		bra.w	DespawnObject

; ===========================================================================

loc_10B0E:				
		tst.b	$38(a0)
		beq.s	loc_10B52
		tst.b	$3A(a0)
		bne.s	loc_10B22
		subq.b	#1,$38(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_10B22:				
		bsr.w	sub_10AF8
		subq.b	#1,$38(a0)
		bne.s	locret_10B50
		lea	($FFFFB000).w,a1
		bsr.s	sub_10B36
		lea	($FFFFB040).w,a1

; ===========================================================================


sub_10B36:				
		btst	#3,$22(a1)
		beq.s	locret_10B50
		bclr	#3,$22(a1)
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)

locret_10B50:							
		rts	

; ===========================================================================

loc_10B52:				
		bsr.w	ObjectFall
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_10B62:				
		addq.b	#1,$1A(a0)
		bra.s	loc_10B6C
; ===========================================================================

loc_10B68:				
		addq.b	#2,$1A(a0)

loc_10B6C:				
		movea.l	$34(a0),a4
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		movea.l	ost_mappings(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#render_rawmap_bit,ost_render(a0)
		_move.b	ost_id(a0),d4
		move.b	ost_render(a0),d5
		movea.l	a0,a1
		bra.s	loc_10B9E
; ===========================================================================

loc_10B96:				
		bsr.w	FindFreeObj
		bne.s	loc_10BE4
		addq.w	#8,a3

loc_10B9E:				
		move.b	#4,$24(a1)
		_move.b	d4,ost_id(a1)
		move.l	a3,ost_mappings(a1)
		move.b	d5,ost_render(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.b	ost_height(a0),ost_height(a1)
		move.b	(a4)+,$38(a1)
		cmpa.l	a0,a1
		bcc.s	loc_10BE0
		bsr.w	DisplaySprite2

loc_10BE0:				
		dbf	d1,loc_10B96

loc_10BE4:				
		bsr.w	DisplaySprite
		move.w	#$B9,d0	
		jmp	PlaySound
; ===========================================================================
byte_10BF2:	
		dc.b $1C,$18,$14,$10,$1A,$16,$12, $E, $A,  6,$18,$14,$10, $C,  8,  4 ; 0			
		dc.b $16,$12, $E, $A,  6,  2,$14,$10, $C	; 16
		
byte_10C0B:	
		dc.b $18,$1C,$20,$1E,$1A,$16,  6, $E,$14,$12, $A,  2 ; 0
					
byte_10C17:	
		dc.b $1E,$16, $E,  6,$1A,$12, $A,  2		; 0	
		
byte_10C1F:	
		dc.b $16,$1E,$1A,$12,  6, $E, $A,  2		; 0	
		
byte_10C27:	
		dc.b $1A,$12, $A,  2,$16, $E,  6		; 0 
		
byte_10C2E:	
		dc.b $1A,$16,$12, $E, $A,  2			; 0	
		
byte_10C34:	
		dc.b $16,$1A,$18,$12,  6, $E, $A,  2		; 0	

; Unused Sonic 1 leftover: slope data for GHZ collapsing ledges
byte_10C3C:	
		dc.b $20,$20,$20,$20,$20,$20,$20,$20,$21,$21,$22,$22,$23,$23,$24,$24 ; 0			
		dc.b $25,$25,$26,$26,$27,$27,$28,$28,$29,$29,$2A,$2A,$2B,$2B,$2C,$2C ; 16
		dc.b $2D,$2D,$2E,$2E,$2F,$2F,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30 ; 32

		include	"mappings/sprite/GHZ Collapsing Ledge (unused).asm"
		include	"mappings/sprite/MZ, SLZ, & SBZ Collapsing Floors (unused).asm"
		
; Unused beta leftovers: slope data for HPZ and OOZ collapsing platforms
; (required due to how the object is coded)		
byte_10FDC:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10 ; 0
					
byte_10FEC:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10 ; 0
					
		dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10 ; 16
		dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10 ; 32
		

		include	"mappings/sprite/HPZ Collapsing Platform (unused).asm"
		include	"mappings/sprite/OOZ Collapsing Platform.asm"
		include "mappings/sprite/MCZ Collapsing Platform.asm"
		include	"mappings/sprite/ARZ Collapsing Platform.asm"


; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo_SlopeObject:				
		jmp	SlopeObject
JmpTo2_DetectPlatform:				
		jmp	DetectPlatform

		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1C - EHZ bridge stakes, HTZ tram posts, and OOZ falling oil
; ----------------------------------------------------------------------------

Scenery1:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Scenery1_Index(pc,d0.w),d1
		jmp	Scenery1_Index(pc,d1.w)
; ===========================================================================
Scenery1_Index:	index offset(*),,2
		ptr loc_112A4					; 0 			
		ptr loc_112EC					; 2
		
Scenery1_ObjData:	
		sceneryobjdata	id_Frame_Rope1,Map_BoltEnd_Rope,tile_Nem_BoltEnd_Rope+tile_pal3,4,6 ; end of looped rope emerging from lava (right)
		sceneryobjdata	id_Frame_Rope2,Map_BoltEnd_Rope,tile_Nem_BoltEnd_Rope+tile_pal3,4,6 ; end of looped rope emerging from lava (left)
		sceneryobjdata	1,Map_EmeraldHillBridge,tile_Nem_EHZBridge+tile_pal3,4,1
		sceneryobjdata	id_Frame_BoltEnd,Map_BoltEnd_Rope,tile_Nem_BoltEnd_Rope+tile_pal2,$10,6 ; bottom tip of hanging bolts
		sceneryobjdata	3,Map_21F14,tile_Nem_HTZZipline+tile_pal3,8,4
		sceneryobjdata	4,Map_21F14,tile_Nem_HTZZipline+tile_pal3,8,4
		sceneryobjdata	1,Map_21F14,tile_Nem_HTZZipline+tile_pal3,$20,1
		sceneryobjdata	0,Map_TramStake,tile_LevelArt+tile_pal3,8,1
		sceneryobjdata	1,Map_TramStake,tile_LevelArt+tile_pal3,8,1
		sceneryobjdata	0,Map_ARZUnusedScenery,tile_Waterfall3+tile_pal3,4,4 ; unused, appears to be a small slice of ground
		sceneryobjdata	0,Map_NarrowFallingOil,tile_Nem_OilFall2+tile_pal3,4,4
		sceneryobjdata	1,Map_NarrowFallingOil,tile_Nem_OilFall2+tile_pal3,4,4
		sceneryobjdata	2,Map_NarrowFallingOil,tile_Nem_OilFall2+tile_pal3,4,4
		sceneryobjdata	3,Map_NarrowFallingOil,tile_Nem_OilFall2+tile_pal3,4,4
		sceneryobjdata	4,Map_NarrowFallingOil,tile_Nem_OilFall2+tile_pal3,4,4
		sceneryobjdata	5,Map_NarrowFallingOil,tile_Nem_OilFall2+tile_pal3,4,4
		sceneryobjdata	0,Map_WideFallingOil,tile_Nem_OilFall2+tile_pal3,$18,4								
		sceneryobjdata	1,Map_WideFallingOil,tile_Nem_OilFall2+tile_pal3,$18,4
		sceneryobjdata	2,Map_WideFallingOil,tile_Nem_OilFall2+tile_pal3,8,4
		sceneryobjdata	3,Map_WideFallingOil,tile_Nem_OilFall2+tile_pal3,8,4
		sceneryobjdata	4,Map_WideFallingOil,tile_Nem_OilFall2+tile_pal3,8,4		


Scenery1_Radii:	
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b   0					; 3
	if FixBugs
		; These entries are for the Hill Top Zone tram poles.
		; Using 0 here is good for objects that are at most 32 pixels tall, but these are 40
		; pixels tall, so they need to be explicitly set here.
		; This fixes these objects disappearing when they're partially off-screen vertically.
		dc.b $28
		dc.b $28
	else	
		dc.b   0					; 4
		dc.b   0					; 5
	endc	
		dc.b   0					; 6
		dc.b   0					; 7
		dc.b   0					; 8
		dc.b   0					; 9
		dc.b   0					; 10
		dc.b   0					; 11
		dc.b   0					; 12
		dc.b $30					; 13
		dc.b $40					; 14
		dc.b $60					; 15
		dc.b   0					; 16
		dc.b   0					; 17
		dc.b $30					; 18
		dc.b $40					; 19
		dc.b $50					; 20
		dc.b   0					; 21
; ===========================================================================

loc_112A4:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	d0,d1
		lsl.w	#3,d0
		lea	Scenery1_ObjData(pc),a1
		lea	(a1,d0.w),a1
		move.b	(a1),$1A(a0)
		move.l	(a1)+,ost_mappings(a0)
		move.w	(a1)+,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
		lea	Scenery1_Radii(pc),a1
		move.b	(a1,d1.w),d1
		beq.s	loc_112EC
		move.b	d1,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)

loc_112EC:				
					
		bra.w	DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 71 - ; MTZ lava bubble, HPZ bridge stake, and HPZ pulsing orb
; ----------------------------------------------------------------------------

Scenery2:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Scenery2_Index(pc,d0.w),d1
		jmp	Scenery2_Index(pc,d1.w)
; ===========================================================================
Scenery2_Index:	index offset(*),,2
		ptr loc_1131A					; 0 		
		ptr loc_1135C					; 2

Scenery2_ObjData:
		sceneryobjdata	3,Map_HiddenPalaceBridge,(vram_HiddenPalaceBridge/sizeof_cell)+tile_pal4,4,1
		sceneryobjdata	0,Map_HiddenPalaceOrb,(vram_HiddenPalaceOrb/sizeof_cell)+tile_pal4+tile_hi,$10,1
		sceneryobjdata	0,Map_LavaBubble,tile_Nem_LavaBubble+tile_pal3,$10,1
; ===========================================================================

loc_1131A:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lsl.w	#3,d0
		lea	Scenery2_ObjData(pc),a1
		lea	(a1,d0.w),a1
		move.b	(a1),$1A(a0)
		move.l	(a1)+,ost_mappings(a0)
		move.w	(a1)+,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		lsr.b	#4,d0
		move.b	d0,$1C(a0)

loc_1135C:				
		lea	(Ani_Scenery2).l,a1			; could be PC-relative
		bsr.w	AnimateSprite
		bra.w	DespawnObject
; ===========================================================================
Ani_Scenery2:	
		dc.w byte_11372-Ani_Scenery2			; 0 			
		dc.w byte_1137A-Ani_Scenery2			; 1
		dc.w byte_11389-Ani_Scenery2			; 2
		dc.w byte_11392-Ani_Scenery2			; 3
byte_11372:	dc.b   8,  3,  3,  4,  5,  5,  4,$FF		; 0	
byte_1137A:	dc.b   5,  0,  0,  0,  1,  2,  3,  3,  2,  1,  2,  3,  3,  1,$FF ; 0			
byte_11389:	dc.b  $B,  0,  1,  2,  3,  4,  5,$FD,  3	; 0 
byte_11392:	dc.b $7F,  6,$FD,  2				; 0 
					

		include	"mappings/sprite/HPZ Orb (unused).asm"
		include	"mappings/sprite/HTZ Tram Stakes.asm"
		include	"mappings/sprite/ARZ Ground Slice (unused).asm"
		include "mappings/sprite/OOZ Narrow Falling Oil.asm"
		include "mappings/sprite/OOZ Wide Falling Oil.asm"
		include "mappings/sprite/MTZ Bolt End and Ropes Emerging from Lava.asm"
		include "mappings/sprite/MTZ Lava Bubble.asm"
		
; ===========================================================================

	if Revision<2
		nop	
	endc	
	
; ===========================================================================	
; ----------------------------------------------------------------------------
; Object 2A - MCZ Stomper
; ----------------------------------------------------------------------------

Stomper:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_115D2(pc,d0.w),d1
		jmp	off_115D2(pc,d1.w)
; ===========================================================================
off_115D2:	
		dc.w loc_115D6-off_115D2			; 0 		
		dc.w loc_11610-off_115D2			; 1
; ===========================================================================

loc_115D6:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Stomper,ost_mappings(a0)
		move.w	#0+tile_pal3,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	#$50,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)

loc_11610:				
		tst.b	$25(a0)
		bne.s	loc_1162A
		addq.w	#1,$30(a0)
		cmpi.w	#$60,$30(a0)
		bne.s	loc_1163C
		move.b	#2,$25(a0)
		bra.s	loc_1163C
; ===========================================================================

loc_1162A:				
		subq.w	#8,$30(a0)
		bhi.s	loc_1163C
		move.w	#0,$30(a0)
		move.b	#0,$25(a0)

loc_1163C:				
					
		move.w	$32(a0),d0
		sub.w	$30(a0),d0
		move.w	d0,ost_y_pos(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$40,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo2_SolidObject
		bra.w	DespawnObject
; ===========================================================================

		include "mappings/sprite/MCZ Stomper.asm"
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2D - One way barrier from CPZ and DEZ
; (also supports ARZ, but never used)
; ----------------------------------------------------------------------------

Barrier:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_116A8(pc,d0.w),d1
		jmp	off_116A8(pc,d1.w)
; ===========================================================================
off_116A8:	
		dc.w loc_116AC-off_116A8			; 0 			
		dc.w loc_1175E-off_116A8			; 2
; ===========================================================================

loc_116AC:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Barrier,ost_mappings(a0)
		move.w	#tile_Nem_HTZOneWayBarrier+tile_pal2,ost_tile(a0)
		move.b	#8,$19(a0)
		cmpi.b	#id_MTZ,(v_zone).w			; is it MTZ acts 1 or 2?
		beq.s	loc_116D4				; if so, branch
		cmpi.b	#id_MTZ_2,(v_zone).w			; is it MTZ act 3?
		bne.s	loc_116E0				; if not, branch

loc_116D4:				
		move.w	#0+tile_pal4,ost_tile(a0)		
		move.b	#$C,$19(a0)

loc_116E0:				
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_116F4
		move.w	#tile_Nem_ConstructionStripes_CPZ+tile_pal2,ost_tile(a0)
		move.b	#8,$19(a0)

loc_116F4:				
		cmpi.b	#id_DEZ,(v_zone).w
		bne.s	loc_11708
		move.w	#tile_Nem_ConstructionStripes_DEZ+tile_pal2,ost_tile(a0)
		move.b	#8,$19(a0)

loc_11708:				
		cmpi.b	#id_ARZ,(v_zone).w
		bne.s	loc_1171C
		move.w	#tile_Nem_ARZBarrier+tile_pal2,ost_tile(a0)
		move.b	#8,$19(a0)

loc_1171C:				
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	$28(a0),$1A(a0)				; subtype determines mappings, though a bug means only HTZ's are used
		move.w	ost_x_pos(a0),d2
		move.w	d2,d3
		subi.w	#$200,d2
		addi.w	#$18,d3
		btst	#0,$22(a0)
		beq.s	loc_11756
		subi.w	#-$1E8,d2
		addi.w	#$1E8,d3

loc_11756:				
		move.w	d2,$38(a0)
		move.w	d3,$3A(a0)

loc_1175E:				
		btst	#0,$22(a0)
		bne.s	loc_1177A
		move.w	$38(a0),d2
		move.w	ost_x_pos(a0),d3
		tst.b	$25(a0)
		beq.s	loc_1178C
		move.w	$3A(a0),d3
		bra.s	loc_1178C
; ===========================================================================

loc_1177A:				
		move.w	ost_x_pos(a0),d2
		move.w	$3A(a0),d3
		tst.b	$25(a0)
		beq.s	loc_1178C
		move.w	$38(a0),d2

loc_1178C:				
					
		move.w	$32(a0),d4
		move.w	d4,d5
		subi.w	#$20,d4
		addi.w	#$20,d5
		move.b	#0,$25(a0)
		lea	($FFFFB000).w,a1
		bsr.s	sub_117F4
		lea	($FFFFB040).w,a1
		bsr.s	sub_117F4
		tst.b	$25(a0)
		beq.s	loc_117C0
		cmpi.w	#$40,$30(a0)
		beq.s	loc_117D6
		addq.w	#8,$30(a0)
		bra.s	loc_117CA
; ===========================================================================

loc_117C0:				
		tst.w	$30(a0)
		beq.s	loc_117D6
		subq.w	#8,$30(a0)

loc_117CA:				
		move.w	$32(a0),d0
		sub.w	$30(a0),d0
		move.w	d0,ost_y_pos(a0)

loc_117D6:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$20,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo2_SolidObject
		bra.w	DespawnObject

; ===========================================================================


sub_117F4:				
					
		move.w	ost_x_pos(a1),d0
		cmp.w	d2,d0
		blt.w	locret_11820
		cmp.w	d3,d0
		bcc.w	locret_11820

loc_11804:
		move.w	ost_y_pos(a1),d0
		cmp.w	d4,d0
		bcs.w	locret_11820
		cmp.w	d5,d0
		bcc.w	locret_11820
		tst.b	$2A(a1)
		bmi.s	locret_11820
		move.b	#2,$25(a0)

locret_11820:				
		rts	


; ===========================================================================

		include	"mappings/sprite/CPZ, ARZ, HTZ, & DEZ One-Way Barrier.asm"

; ===========================================================================

	if Revision<2
		nop
	endc
	
	if RemoveJmpTos=0
JmpTo2_SolidObject:								
		jmp	SolidObject
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 28 - Animals
; ----------------------------------------------------------------------------

Animals:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Anml_Index(pc,d0.w),d1
		jmp	Anml_Index(pc,d1.w)
; ===========================================================================
Anml_Index:	index offset(*),,2
		ptr Anml_Main					; 0 		
		ptr loc_11ADE					; 2
		ptr loc_11B38					; 4
		ptr loc_11B74					; 6
		ptr loc_11B38					; 8
		ptr loc_11B38					; $A
		ptr loc_11B38					; $C
		ptr loc_11B74					; $E
		ptr loc_11B38					; $10
		ptr loc_11B74					; $12
		ptr loc_11B38					; $14
		ptr loc_11B38					; $16
		ptr loc_11B38					; $18
		ptr loc_11B38					; $1A
		ptr loc_11BF4					; $1C
		
	; Routines below are unused Sonic 1 leftovers:
	; these managed the animals in that game's ending sequence.
		ptr loc_11C14					; $1E
		ptr loc_11C14					; $20
		ptr loc_11C34					; $22
		ptr loc_11C6E					; $24
		ptr loc_11CC8					; $26
		ptr loc_11CE6					; $28
		ptr loc_11CC8					; $2A
		ptr loc_11CE6					; $2C
		ptr loc_11CC8					; $2E
		ptr loc_11D24					; $30
		ptr loc_11C8A					; $30

; ===========================================================================
; ---------------------------------------------------------------------------
; Declare which animals will appear in each level.
; When an enemy is destroyed, one of the two animals listed for the zone will
; be chosen randomly. Note that the corresponding art for each animal 
; MUST be loaded in the level's PLC list.
; ---------------------------------------------------------------------------

zoneanmls:	macro	first,second
		dc.b	\first
		dc.b	\second
		endm	

Anml_VarIndex:
		zoneanmls	id_Squirrel,id_Flicky		; EHZ;		0, 1
		zoneanmls	id_Squirrel,id_Flicky		; Zone 1;	2, 3
		zoneanmls	id_Squirrel,id_Flicky		; WZ;		4, 5
		zoneanmls	id_Squirrel,id_Flicky		; Zone 3;	6, 7
		zoneanmls	id_Beaver,	id_Eagle	; MTZ 1/2;	8, 9
		zoneanmls	id_Beaver,	id_Eagle	; MTZ 3;	$A, $B
		zoneanmls	id_Beaver,	id_Eagle	; WFZ;		$C, $D
		zoneanmls	id_Beaver,	id_Eagle	; HTZ;		$E, $F	
		zoneanmls	id_Mouse,	id_Seal		; HPZ;		$10, $11
		zoneanmls	id_Mouse,	id_Seal		; Zone 9;	$12, $13
		zoneanmls	id_Penguin,	id_Seal		; OOZ;		$14, $15
		zoneanmls	id_Mouse,	id_Chicken	; MCZ;		$16, $17
		zoneanmls	id_Bear,	id_Flicky	; CNZ;		$18, $19
		zoneanmls	id_Rabbit,	id_Eagle	; CPZ;		$1A, $1B
		zoneanmls	id_Pig,		id_Chicken	; DEZ;		$1C, $1D
		zoneanmls	id_Penguin,	id_Flicky	; ARZ;		$1E, $1F
		zoneanmls	id_Turtle,	id_Chicken	; SCZ;		$20, $21	
		
		zonewarning	Anml_VarIndex,2

; ---------------------------------------------------------------------------
; Declare the speeds and mappings for each animal, and generate IDs for use
; in Anml_VarIndex. 
; ---------------------------------------------------------------------------

anmldecl:	macro	*,xvel,yvel,mappings

\* equ *

	Anml_\*_Vars:
		dc.w \xvel,\yvel
		dc.l \mappings
	
	id_\*:	equ	ptr_id
	
	ptr_id: = ptr_id+ptr_id_inc				; increment id	
		endm

Anml_Variables:	
		ptr_id:		= 0
		ptr_id_inc: = 1

Rabbit:		anmldecl -$200,-$400,Map_Animal5		; 0
Chicken:	anmldecl -$200,-$300,Map_Animal1		; 1
Penguin:	anmldecl -$180,-$300,Map_Animal5		; 2
Seal:		anmldecl -$140,-$180,Map_Animal4		; 3
Pig:		anmldecl -$1C0,-$300,Map_Animal3		; 4
Flicky:		anmldecl -$300,-$400,Map_Animal1		; 5
Squirrel:	anmldecl -$280,-$380,Map_Animal2		; 6
Eagle:		anmldecl -$280,-$300,Map_Animal1		; 7
Mouse:		anmldecl -$200,-$380,Map_Animal2		; 8
Beaver:		anmldecl -$2C0,-$300,Map_Animal2		; 9
Turtle:		anmldecl -$140,-$200,Map_Animal2		; $A
Bear:		anmldecl -$200,-$300,Map_Animal2		; $B

; ===========================================================================	
; ---------------------------------------------------------------------------
; Unused Sonic 1 leftovers: speeds, mappings, and tile pointers
; for animals in that game's ending sequence.
; ---------------------------------------------------------------------------

Anml_EndSpeeds:	
		dc.w -$440, -$400				; 0
		dc.w -$440, -$400				; 2
		dc.w -$440, -$400				; 4
		dc.w -$300, -$400				; 6
		dc.w -$300, -$400				; 8
		dc.w -$180, -$300				; 10
		dc.w -$180, -$300				; 12
		dc.w -$140, -$180				; 14
		dc.w -$1C0, -$300				; 16
		dc.w -$200, -$300				; 18
		dc.w -$280, -$380				; 20
		
Anml_EndMap:	
		dc.l Map_Animal1				; 2
		dc.l Map_Animal1				; 2
		dc.l Map_Animal1				; 2
		dc.l Map_Animal5				; 1
		dc.l Map_Animal5				; 1
		dc.l Map_Animal5				; 1
		dc.l Map_Animal5				; 1
		dc.l Map_Animal4				; 7
		dc.l Map_Animal3				; 8
		dc.l Map_Animal1				; 2
		dc.l Map_Animal2				; 10

Anml_EndVram:	
		dc.w  vram_Flicky_End/sizeof_cell		; 0
		dc.w  vram_Flicky_End/sizeof_cell		; 2
		dc.w  vram_Flicky_End/sizeof_cell		; 4
		dc.w  vram_Rabbit_End/sizeof_cell		; 6
		dc.w  vram_Rabbit_End/sizeof_cell		; 8
		dc.w  vram_Penguin_End/sizeof_cell		; $A
		dc.w  vram_Penguin_End/sizeof_cell		; $C
		dc.w  vram_Seal_End/sizeof_cell			; $E
		dc.w  vram_Pig_End/sizeof_cell			; $10
		dc.w  vram_Chicken_End/sizeof_cell		; $12
		dc.w  vram_Squirrel_End/sizeof_cell		; $14
		
; ===========================================================================

Anml_Main:				
		tst.b	$28(a0)					; did animal come from an enemy or prison capsule? (it always will)
		beq.w	Anml_FromEnemy				; if so, branch
		
	;.Anml_Ending:	; unused Sonic 1 leftover: spawns animals in that game's ending sequence
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.b	d0,ost_primary_routine(a0)
		subi.w	#$14,d0
		move.w	Anml_EndVram(pc,d0.w),ost_tile(a0)
		add.w	d0,d0
		move.l	Anml_EndMap(pc,d0.w),ost_mappings(a0)
		lea	Anml_EndSpeeds(pc),a1
		move.w	(a1,d0.w),$32(a0)
		move.w	(a1,d0.w),ost_x_vel(a0)
		move.w	2(a1,d0.w),$34(a0)
		move.w	2(a1,d0.w),ost_y_vel(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,ost_height(a0)
		move.b	#render_rel,ost_render(a0)
		bset	#render_xflip_bit,ost_render(a0)
		move.b	#6,$18(a0)
		move.b	#8,$19(a0)
		move.b	#7,$1E(a0)
		bra.w	DisplaySprite
; ===========================================================================

Anml_FromEnemy:				
		addq.b	#2,ost_primary_routine(a0)
		jsrto	RandomNumber,JmpTo_RandomNumber
		move.w	#tile_Nem_Squirrel,ost_tile(a0)		; VRAM common to first animal
		andi.w	#1,d0
		beq.s	loc_11A46
		move.w	#tile_Nem_Flicky,ost_tile(a0)

loc_11A46:				
		moveq	#0,d1
		move.b	(v_zone).w,d1
		add.w	d1,d1
		add.w	d0,d1
		lea	Anml_VarIndex(pc),a1
		move.b	(a1,d1.w),d0
		move.b	d0,$30(a0)
		lsl.w	#3,d0
		lea	Anml_Variables(pc),a1
		adda.w	d0,a1
		move.w	(a1)+,$32(a0)
		move.w	(a1)+,$34(a0)
		move.l	(a1)+,ost_mappings(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,ost_height(a0)
		move.b	#render_rel,ost_render(a0)
		bset	#render_xflip_bit,ost_render(a0)
		move.b	#6,$18(a0)
		move.b	#8,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#2,$1A(a0)
		move.w	#-$400,ost_y_vel(a0)
		tst.b	$38(a0)
		bne.s	loc_11AD0
		bsr.w	FindFreeObj
		bne.s	loc_11ACC
		_move.b	#id_Points,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	$3E(a0),d0
		lsr.w	#1,d0
		move.b	d0,$1A(a1)

loc_11ACC:				
		bra.w	DisplaySprite
; ===========================================================================

loc_11AD0:				
		move.b	#$1C,ost_primary_routine(a0)
		clr.w	ost_x_vel(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_11ADE:				
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		bsr.w	ObjectFall
		tst.w	ost_y_vel(a0)
		bmi.s	loc_11B34
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_11B34
		add.w	d1,ost_y_pos(a0)
		move.w	$32(a0),ost_x_vel(a0)
		move.w	$34(a0),ost_y_vel(a0)
		move.b	#1,$1A(a0)
		move.b	$30(a0),d0
		add.b	d0,d0
		addq.b	#4,d0
		move.b	d0,ost_primary_routine(a0)
		tst.b	$38(a0)
		beq.s	loc_11B34
		btst	#4,(v_vblank_counter_byte).w
		beq.s	loc_11B34
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)

loc_11B34:								
		bra.w	DisplaySprite
; ===========================================================================

loc_11B38:				
					
		bsr.w	ObjectFall
		move.b	#1,$1A(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_11B62
		move.b	#0,$1A(a0)
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_11B62
		add.w	d1,ost_y_pos(a0)
		move.w	$34(a0),ost_y_vel(a0)

loc_11B62:				
					
		tst.b	$28(a0)
		bne.s	loc_11BD8
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_11B74:				
					
		bsr.w	SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_11BB0
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_11BB0
		add.w	d1,ost_y_pos(a0)
		move.w	$34(a0),ost_y_vel(a0)
		tst.b	$28(a0)
		beq.s	loc_11BB0
		cmpi.b	#$A,$28(a0)
		beq.s	loc_11BB0
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)

loc_11BB0:				
					
		subq.b	#1,$1E(a0)
		bpl.s	loc_11BC6
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_11BC6:				
		tst.b	$28(a0)
		bne.s	loc_11BD8
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_11BD8:				
					
		move.w	ost_x_pos(a0),d0
		sub.w	($FFFFB008).w,d0
		bcs.s	loc_11BF0
		subi.w	#$180,d0
		bpl.s	loc_11BF0
		tst.b	ost_render(a0)
		bpl.w	DeleteObject

loc_11BF0:				
					
		bra.w	DisplaySprite
; ===========================================================================

loc_11BF4:				
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		subq.w	#1,$36(a0)
		bne.w	loc_11C10
		move.b	#2,ost_primary_routine(a0)
		move.b	#1,$18(a0)

loc_11C10:				
		bra.w	DisplaySprite
; ===========================================================================

loc_11C14:				
		bsr.w	sub_11DB8
		bcc.s	loc_11C30
		move.w	$32(a0),ost_x_vel(a0)
		move.w	$34(a0),ost_y_vel(a0)
		move.b	#$E,ost_primary_routine(a0)
		bra.w	loc_11B74
; ===========================================================================

loc_11C30:				
		bra.w	loc_11BD8
; ===========================================================================

loc_11C34:				
		bsr.w	sub_11DB8
		bpl.s	loc_11C6A
		clr.w	ost_x_vel(a0)
		clr.w	$32(a0)
		bsr.w	SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		bsr.w	sub_11D78
		bsr.w	sub_11DA0
		subq.b	#1,$1E(a0)
		bpl.s	loc_11C6A
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_11C6A:						
		bra.w	loc_11BD8
; ===========================================================================

loc_11C6E:				
		bsr.w	sub_11DB8
		bpl.s	loc_11CC4
		move.w	$32(a0),ost_x_vel(a0)
		move.w	$34(a0),ost_y_vel(a0)
		move.b	#4,ost_primary_routine(a0)
		bra.w	loc_11B38
; ===========================================================================

loc_11C8A:				
		bsr.w	ObjectFall
		move.b	#1,$1A(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_11CC4
		move.b	#0,$1A(a0)
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_11CC4
		not.b	$29(a0)
		bne.s	loc_11CBA
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)

loc_11CBA:				
		add.w	d1,ost_y_pos(a0)
		move.w	$34(a0),ost_y_vel(a0)

loc_11CC4:				
					
		bra.w	loc_11BD8
; ===========================================================================

loc_11CC8:				
		bsr.w	sub_11DB8
		bpl.s	loc_11CE2
		clr.w	ost_x_vel(a0)
		clr.w	$32(a0)
		bsr.w	ObjectFall
		bsr.w	sub_11D78
		bsr.w	sub_11DA0

loc_11CE2:				
		bra.w	loc_11BD8
; ===========================================================================

loc_11CE6:				
		bsr.w	sub_11DB8
		bpl.s	loc_11D20
		bsr.w	ObjectFall
		move.b	#1,$1A(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_11D20
		move.b	#0,$1A(a0)
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_11D20
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		add.w	d1,ost_y_pos(a0)
		move.w	$34(a0),ost_y_vel(a0)

loc_11D20:				
					
		bra.w	loc_11BD8
; ===========================================================================

loc_11D24:				
		bsr.w	sub_11DB8
		bpl.s	loc_11D74
		bsr.w	SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_11D5E
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_11D5E
		not.b	$29(a0)
		bne.s	loc_11D54
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)

loc_11D54:				
		add.w	d1,ost_y_pos(a0)
		move.w	$34(a0),ost_y_vel(a0)

loc_11D5E:				
					
		subq.b	#1,$1E(a0)
		bpl.s	loc_11D74
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_11D74:				
					
		bra.w	loc_11BD8

; ===========================================================================


sub_11D78:				
					
		move.b	#1,$1A(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	locret_11D9E
		move.b	#0,$1A(a0)
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	locret_11D9E
		add.w	d1,ost_y_pos(a0)
		move.w	$34(a0),ost_y_vel(a0)

locret_11D9E:									
		rts	


; ===========================================================================


sub_11DA0:				
					
		bset	#render_xflip_bit,ost_render(a0)
		move.w	ost_x_pos(a0),d0
		sub.w	($FFFFB008).w,d0
		bcc.s	locret_11DB6
		bclr	#render_xflip_bit,ost_render(a0)

locret_11DB6:				
		rts	


; ===========================================================================


sub_11DB8:						
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		subi.w	#$B8,d0	
		rts	

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 29 - "100 points" text
; ----------------------------------------------------------------------------

Points:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Poi_Index(pc,d0.w),d1
		jmp	Poi_Index(pc,d1.w)
; ===========================================================================
Poi_Index:	index offset (*),,2
		ptr Poi_Main					; 0 			
		ptr Poi_Slower					; 2
; ===========================================================================

Poi_Main:				
		addq.b	#2,ost_primary_routine(a0)		; goto Poi_Slower next
		move.l	#Map_Points,ost_mappings(a0)
		move.w	#tile_Nem_Numbers+tile_hi,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#1,ost_priority(a0)
		move.b	#8,ost_displaywidth(a0)
		move.w	#-$300,ost_y_vel(a0)			; move object upwards

Poi_Slower:				
		tst.w	ost_y_vel(a0)				; is object moving?
		bpl.w	DeleteObject				; if not, delete
		bsr.w	SpeedToPos				; update position
		addi.w	#$18,ost_y_vel(a0)			; reduce object speed
		bra.w	DisplaySprite
		
; ===========================================================================

		include "mappings/sprite/Animals.asm"
		include "mappings/sprite/Points.asm"

; ===========================================================================

	if RemoveJmpTos=0
JmpTo_RandomNumber:				
		jmp	RandomNumber

		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 25 - Individual rings spawned in debug placement mode 
; Rings that are part of the level layout are run by the RingsManager psuedoobject.
; ----------------------------------------------------------------------------

Ring:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_11F52(pc,d0.w),d1
		jmp	off_11F52(pc,d1.w)
; ===========================================================================
off_11F52:	
		dc.w loc_11F5C-off_11F52			; 0 	
		dc.w loc_11F90-off_11F52			; 2
		dc.w loc_11F9E-off_11F52			; 4
		dc.w loc_11FB0-off_11F52			; 6
		dc.w loc_11FBE-off_11F52			; 8
; ===========================================================================

loc_11F5C:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	ost_x_pos(a0),$32(a0)
		move.l	#Map_Ring,ost_mappings(a0)
		move.w	#tile_Nem_Ring+tile_pal2,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#2,$18(a0)
		move.b	#$47,$20(a0)
		move.b	#8,$19(a0)

loc_11F90:				
		move.b	(v_syncani_1_frame).w,$1A(a0)
		move.w	$32(a0),d0
		bra.w	DespawnObject2
; ===========================================================================

loc_11F9E:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.s	CollectRing

loc_11FB0:				
		lea	(Ani_Ring).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

loc_11FBE:				
		bra.w	DeleteObject

; ===========================================================================


CollectRing:									
		tst.b	$3F(a0)
		bne.s	loc_1201E

loc_11FC8:				
		cmpi.w	#$3E7,(v_rings_collected_p1).w
		bcc.s	loc_11FD4
		addq.w	#1,(v_rings_collected_p1).w

loc_11FD4:				
					
		move.w	#$B5,d0	
		cmpi.w	#$3E7,(v_rings).w
		bcc.s	loc_12016
		addq.w	#1,(v_rings).w
		ori.b	#1,(v_hud_rings_update).w
		cmpi.w	#$64,(v_rings).w
		bcs.s	loc_12016
		bset	#1,(v_ring_reward).w
		beq.s	loc_1200A
		cmpi.w	#$C8,(v_rings).w
		bcs.s	loc_12016
		bset	#2,(v_ring_reward).w
		bne.s	loc_12016

loc_1200A:				
		addq.b	#1,(v_lives).w
		addq.b	#1,(f_hud_lives_update).w
		move.w	#$98,d0	

loc_12016:				
					
		jmp	(PlaySound2).l
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_1201E:				
		cmpi.w	#$3E7,(v_rings_collected_p2).w
		bcc.s	loc_1202A
		addq.w	#1,(v_rings_collected_p2).w

loc_1202A:				
		cmpi.w	#$3E7,(v_rings_p2).w
		bcc.s	loc_12036
		addq.w	#1,(v_rings_p2).w

loc_12036:				
		tst.w	(f_two_player).w
		beq.s	loc_11FD4
		ori.b	#1,(v_hud_rings_update_p2).w
		move.w	#$B5,d0	
		cmpi.w	#$64,(v_rings_p2).w
		bcs.s	loc_12072
		bset	#1,(v_ring_reward_p2).w
		beq.s	loc_12066
		cmpi.w	#$C8,(v_rings_p2).w
		bcs.s	loc_12072
		bset	#2,(v_ring_reward_p2).w
		bne.s	loc_12072

loc_12066:				
		addq.b	#1,(v_lives_p2).w
		addq.b	#1,(f_hud_lives_update_p2).w
		move.w	#$98,d0	

loc_12072:							
		jmp	(PlaySound2).l

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 37 - Rings flying out of Sonic or Tails when they're hurt
; ----------------------------------------------------------------------------

RingLoss:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_12086(pc,d0.w),d1
		jmp	off_12086(pc,d1.w)
; ===========================================================================
off_12086:	
		dc.w loc_12090-off_12086			; 0 		
		dc.w loc_12178-off_12086			; 2
		dc.w loc_121DA-off_12086			; 4
		dc.w loc_121EE-off_12086			; 6
		dc.w loc_121FC-off_12086			; 8
; ===========================================================================

loc_12090:				
		movea.l	a0,a1
		moveq	#0,d5
		move.w	(v_rings).w,d5
		tst.b	$3F(a0)
		beq.s	loc_120A2
		move.w	(v_rings_p2).w,d5

loc_120A2:				
		moveq	#$20,d0
		cmp.w	d0,d5
		bcs.s	loc_120AA
		move.w	d0,d5

loc_120AA:				
		subq.w	#1,d5
		move.w	#$288,d4
		bra.s	loc_120BA
; ===========================================================================

loc_120B2:				
		bsr.w	FindFreeObj
		bne.w	loc_12142

loc_120BA:				
		_move.b	#id_RingLoss,ost_id(a1)
		addq.b	#2,$24(a1)
		move.b	#8,ost_height(a1)
		move.b	#8,$17(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	#Map_Ring,ost_mappings(a1)
		move.w	#tile_Nem_Ring+tile_pal2,ost_tile(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#render_rel|render_onscreen,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#$47,$20(a1)
		move.b	#8,$19(a1)
		move.b	#-1,(v_syncani_3_time).w
		tst.w	d4
		bmi.s	loc_12132
		move.w	d4,d0
		jsrto	CalcSine,JmpTo4_CalcSine
		move.w	d4,d2
		lsr.w	#8,d2
		asl.w	d2,d0
		asl.w	d2,d1
		move.w	d0,d2
		move.w	d1,d3
		addi.b	#$10,d4
		bcc.s	loc_12132
		subi.w	#$80,d4	
		bcc.s	loc_12132
		move.w	#$288,d4

loc_12132:				
					
		move.w	d2,ost_x_vel(a1)
		move.w	d3,ost_y_vel(a1)
		neg.w	d2
		neg.w	d4
		dbf	d5,loc_120B2

loc_12142:				
		move.w	#$C6,d0	
		jsr	(PlaySound2).l
		tst.b	$3F(a0)
		bne.s	loc_12166
		move.w	#0,(v_rings).w
		move.b	#$80,(v_hud_rings_update).w
		move.b	#0,(v_ring_reward).w
		bra.s	loc_12178
; ===========================================================================

loc_12166:				
		move.w	#0,(v_rings_p2).w
		move.b	#$80,(v_hud_rings_update_p2).w
		move.b	#0,(v_ring_reward_p2).w

loc_12178:				
					
		move.b	(v_syncani_3_frame).w,$1A(a0)
		bsr.w	SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		bmi.s	loc_121B8
		move.b	(v_vblank_counter_byte).w,d0
		add.b	d7,d0
		andi.b	#7,d0
		bne.s	loc_121B8
		tst.b	ost_render(a0)
		bpl.s	loc_121D0
		jsr	FindFloorRing
		tst.w	d1
		bpl.s	loc_121B8
		add.w	d1,ost_y_pos(a0)
		move.w	ost_y_vel(a0),d0
		asr.w	#2,d0
		sub.w	d0,ost_y_vel(a0)
		neg.w	ost_y_vel(a0)

loc_121B8:				
					
		tst.b	(v_syncani_3_time).w
		beq.s	loc_121FC
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcs.s	loc_121FC
		bra.w	DisplaySprite
; ===========================================================================

loc_121D0:				
		tst.w	(f_two_player).w
		bne.w	loc_121FC
		bra.s	loc_121B8
; ===========================================================================

loc_121DA:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.w	CollectRing

loc_121EE:				
		lea	(Ani_Ring).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

loc_121FC:						
		bra.w	DeleteObject
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Unused Sonic 1 leftover: giant ring for entry to special stage
; ----------------------------------------------------------------------------
GiantRing:
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1220E(pc,d0.w),d1
		jmp	off_1220E(pc,d1.w)
; ===========================================================================
off_1220E:	
		dc.w loc_12216-off_1220E			; 0 			
		dc.w loc_12264-off_1220E			; 1
		dc.w loc_12282-off_1220E			; 2
		dc.w loc_122C0-off_1220E			; 3
; ===========================================================================

loc_12216:				
		move.l	#Map_GRing,ost_mappings(a0)
		move.w	#(vram_GiantRing/sizeof_cell)+tile_pal2,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$40,$19(a0)
		tst.b	ost_render(a0)
		bpl.s	loc_12264
		cmpi.b	#6,(f_got_emerald).w
		beq.w	loc_122C0
		cmpi.w	#$32,(v_rings).w
		bcc.s	loc_1224E
		rts	
; ===========================================================================

loc_1224E:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#2,$18(a0)
		move.b	#$52,$20(a0)
		move.w	#$C40,(v_giantring_gfx_offset).w

loc_12264:				
					
		move.b	(v_syncani_1_frame).w,$1A(a0)
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_12282:				
		subq.b	#2,ost_primary_routine(a0)
		move.b	#0,$20(a0)
		bsr.w	FindFreeObj
		bne.w	loc_122B4
		; Note: the object ID is not set
		; If you want to restore the giant ring object, you'll also have to
		; restore the ring flash object (right after this) and assign its ID to
		; the created object here as follows:
	 	;move.b	#id_RingFlash,ost_id(a1)		
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	a0,$3C(a1)
		move.w	($FFFFB008).w,d0
		cmp.w	ost_x_pos(a0),d0
		bcs.s	loc_122B4
		bset	#render_xflip_bit,ost_render(a1)

loc_122B4:				
					
		move.w	#$C3,d0	
		jsr	(PlaySound2).l
		bra.s	loc_12264
; ===========================================================================

loc_122C0:				
					
		bra.w	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unused Sonic 1 leftover: flash effect when you collect the giant ring
; ----------------------------------------------------------------------------
RingFlash:
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_122D2(pc,d0.w),d1
		jmp	off_122D2(pc,d1.w)
; ===========================================================================
off_122D2:	
		dc.w loc_122D8-off_122D2			; 0 			
		dc.w loc_12306-off_122D2			; 1
		dc.w loc_12376-off_122D2			; 2
; ===========================================================================

loc_122D8:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Flash,ost_mappings(a0)
		move.w	#(vram_GiantRingFlash/sizeof_cell)+tile_pal2,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#0,$18(a0)
		move.b	#$20,$19(a0)
		move.b	#-1,$1A(a0)

loc_12306:				
		bsr.s	sub_12320
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite

; ===========================================================================


sub_12320:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_12366
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#8,$1A(a0)
		bcc.s	loc_12368
		cmpi.b	#3,$1A(a0)
		bne.s	locret_12366
		movea.l	$3C(a0),a1
		move.b	#6,$24(a1)
		move.b	#$1C,($FFFFB01C).w
		move.b	#1,(f_unused_ss_flag).w
		lea	($FFFFB000).w,a1
		bclr	#1,$2B(a1)
		bclr	#0,$2B(a1)

locret_12366:				
					
		rts	
; ===========================================================================

loc_12368:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#0,($FFFFB000).w
		addq.l	#4,sp
		rts	

; ===========================================================================

loc_12376:				
		bra.w	DeleteObject
; ===========================================================================
Ani_Ring:	
		dc.b 0						; 0			
		dc.b 2						; 1
		dc.b 5						; 2
		dc.b 4						; 3
		dc.b 5						; 4
		dc.b 6						; 5
		dc.b 7						; 6
		dc.b $FC					; 7

; ===========================================================================	

		include "mappings/sprite/Ring.asm"
		include "mappings/sprite/Giant Ring (unused).asm"
		include "mappings/sprite/Giant Ring Flash (unused).asm"		

; ===========================================================================
; ----------------------------------------------------------------------------
; Object DC - Ring prize from CNZ slot machines
; ----------------------------------------------------------------------------

RingPrize:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	RingPrize_Index(pc,d0.w),d1
		jmp	RingPrize_Index(pc,d1.w)
; ===========================================================================
RingPrize_Index:	index offset(*),,2
		ptr RingPrize_Main				; 0 			
		ptr RingPrize_Animate				; 2
		ptr RingPrize_Delete				; 4
		
		rsobj	RingPrize,$2A
ost_casinoprz_childcnt_ptr:		rs.l 1			; $2A; pointer to parent cage's child object counter		
		rsset $2E
ost_casinoprz_angle:			rs.w 1			; $2E; spawn angle of ring							
ost_casinoprz_x_pos: 			rs.l 1			; $30; X position of the ring with greater precision
ost_casinoprz_y_pos:			rs.l 1			; $34; Y position of the ring with greater precision
ost_casinoprz_machine_x_pos:	rs.w 1				; $38; X position of the slot machine that generated the ring
ost_casinoprz_machine_y_pos:	rs.w 1				; $3A; Y position of the slot machine that generated the ring
ost_casinoprz_display_delay:	rs.w 1				; $3C; number of frames remaining that ring will be displayed
ost_casinoprz_player:			rs.w 1			; $3E; character this ring is being awarded to	
		rsobjend
; ===========================================================================

RingPrize_Main:	
		; Make ring move toward the cage each frame	
		moveq	#0,d1
		move.w	ost_casinoprz_machine_x_pos(a0),d1	; get x pos of cage associated with slot machine
		swap	d1					; swap to high word
		move.l	ost_casinoprz_x_pos(a0),d0		; get current x pos of ring
		sub.l	d1,d0					; get difference
		asr.l	#4,d0					; divide by 16
		sub.l	d0,ost_casinoprz_x_pos(a0)		; subtract from old x pos to get new x pos
		move.w	ost_casinoprz_x_pos(a0),ost_x_pos(a0)	; set new x pos of ring
		moveq	#0,d1
		move.w	ost_casinoprz_machine_y_pos(a0),d1	; get y pos of cage associated with slot machine
		swap	d1					; swap to high word	
		move.l	ost_casinoprz_y_pos(a0),d0		; get current y pos of ring
		sub.l	d1,d0					; get difference
		asr.l	#4,d0					; divide by 16
		sub.l	d0,ost_casinoprz_y_pos(a0)		; subtract from old y pos to get new y pos
		move.w	ost_casinoprz_y_pos(a0),ost_y_pos(a0)	; set new y pos of ring
		lea	Ani_RingPrize(pc),a1
		bsr.w	AnimateSprite
		subq.w	#1,ost_casinoprz_display_delay(a0)	; deincrement timer
		bne.w	DisplaySprite				; branch if time remains
		movea.l	ost_casinoprz_childcnt_ptr(a0),a1	; parent's cage's child counter
		subq.w	#1,(a1)					; deincrement child counter
		bsr.w	CollectRing				; add ring to player's count
		addi_.b	#2,ost_primary_routine(a0)		; go to RingPrize_Animate next

RingPrize_Animate:				
		lea	Ani_Ring(pc),a1
		bsr.w	AnimateSprite				; animate ring sparkle; go to RingPrize_Delete when animation is finished
		bra.w	DisplaySprite
; ===========================================================================

RingPrize_Delete:				
		bra.w	DeleteObject
		
; ===========================================================================
Ani_RingPrize:	
		dc.b 0
		dc.b id_Frame_Ring_Edge
		dc.b id_Frame_Ring_Angle1
		dc.b id_Frame_Ring_Front
		dc.b id_Frame_Ring_Angle1
		dc.b id_Frame_Ring_Edge
		dc.b id_Frame_Ring_Angle2
		dc.b afEnd
		even					
; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo4_CalcSine:				
		jmp	CalcSine

		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 26 - Monitors
; This object handles monitor collision and graphics. The power-ups themselves
; are handled by object 2E.
; ----------------------------------------------------------------------------

Monitor:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1267E(pc,d0.w),d1
		jmp	off_1267E(pc,d1.w)
; ===========================================================================
off_1267E:	
		dc.w loc_12688-off_1267E			; 0 			
		dc.w loc_126FA-off_1267E			; 2
		dc.w loc_127BC-off_1267E			; 4
		dc.w loc_12748-off_1267E			; 6
		dc.w loc_12752-off_1267E			; 8
; ===========================================================================

loc_12688:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$E,ost_height(a0)
		move.b	#$E,$17(a0)
		move.l	#Map_Monitor,ost_mappings(a0)
		move.w	#tile_Nem_Monitors,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#$F,$19(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bclr	#7,2(a2,d0.w)
		btst	#0,2(a2,d0.w)
		beq.s	loc_126E2
		move.b	#8,ost_primary_routine(a0)
		move.b	#$B,$1A(a0)
		rts	
; ===========================================================================

loc_126E2:				
		move.b	#$46,$20(a0)
		move.b	$28(a0),$1C(a0)
		tst.w	(f_two_player).w
		beq.s	loc_126FA
		move.b	#9,$1C(a0)

loc_126FA:				
					
		move.b	$25(a0),d0
		beq.s	loc_1271C
		bsr.w	ObjectFall
		jsr	FindFloorObj
		tst.w	d1
		bpl.w	loc_1271C
		add.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		clr.b	$25(a0)

loc_1271C:				
					
		move.w	#$1A,d1
		move.w	#$F,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		lea	(v_ost_player1).w,a1
		moveq	#status_p1_platform_bit,d6
		pushr.l	d1-d4
		bsr.w	sub_12756
		popr.l	d1-d4
		lea	(v_ost_player2).w,a1
		moveq	#status_p2_platform_bit,d6
		bsr.w	sub_12768

loc_12748:				
		lea	(Ani_Monitor).l,a1
		bsr.w	AnimateSprite

loc_12752:				
		bra.w	DespawnObject

; ===========================================================================


sub_12756:				
		btst	d6,$22(a0)
		bne.s	loc_12782
		cmpi.b	#2,$1C(a1)
		bne.w	Solid_SkipRenderChk
		rts	

; ===========================================================================


sub_12768:				
		btst	d6,$22(a0)
		bne.s	loc_12782
		tst.w	(f_two_player).w
		beq.w	Solid_SkipRenderChk
		cmpi.b	#2,$1C(a1)
		bne.w	Solid_SkipRenderChk
		rts	
; ===========================================================================

loc_12782:				
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_1279E
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_1279E
		cmp.w	d2,d0
		bcs.s	loc_127B2

loc_1279E:				
					
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_127B2:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	

; ===========================================================================

loc_127BC:				
		move.b	$22(a0),d0
		andi.b	#$78,d0
		beq.s	loc_127EC
		move.b	d0,d1
		andi.b	#$28,d1
		beq.s	loc_127DA
		andi.b	#-$29,($FFFFB022).w
		ori.b	#2,($FFFFB022).w

loc_127DA:				
		andi.b	#$50,d0
		beq.s	loc_127EC
		andi.b	#-$29,($FFFFB062).w
		ori.b	#2,($FFFFB062).w

loc_127EC:								
		clr.b	$22(a0)
		addq.b	#2,ost_primary_routine(a0)
		move.b	#0,$20(a0)
		bsr.w	FindFreeObj
		bne.s	loc_1281E
		_move.b	#id_PowerUp,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	$1C(a0),$1C(a1)
		move.w	$3E(a0),$3E(a1)

loc_1281E:				
		bsr.w	FindFreeObj
		bne.s	loc_1283A
		_move.b	#id_ExplosionItem,ost_id(a1)
		addq.b	#2,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)

loc_1283A:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bset	#0,2(a2,d0.w)
		move.b	#$A,$1C(a0)
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2E - Monitor contents (code for power-ups and the rising image after
; monitor is broken)
; ----------------------------------------------------------------------------

PowerUp:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_12862(pc,d0.w),d1
		jmp	off_12862(pc,d1.w)
; ===========================================================================
off_12862:	
		dc.w loc_12868-off_12862			; 0 			
		dc.w loc_128DE-off_12862			; 2
		dc.w loc_12CC2-off_12862			; 4
; ===========================================================================

loc_12868:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#tile_Nem_Monitors+tile_hi,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel|render_rawmap,ost_render(a0)

loc_1287C:
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	#-$300,ost_y_vel(a0)
		moveq	#0,d0
		move.b	$1C(a0),d0
		tst.w	(f_two_player).w
		beq.s	loc_128C6
		move.w	(v_frame_counter).w,d0
		andi.w	#7,d0
		addq.w	#1,d0
		tst.w	(f_two_player_monitors).w
		beq.s	loc_128AC
		moveq	#8,d0

loc_128AC:				
		cmpi.w	#8,d0
		bne.s	loc_128C2
		move.b	(f_hud_time_update).w,d1
		add.b	(f_hud_time_update_p2).w,d1
		cmpi.b	#2,d1
		beq.s	loc_128C2
		moveq	#7,d0

loc_128C2:				
					
		move.b	d0,$1C(a0)

loc_128C6:				
		addq.b	#1,d0
		move.b	d0,$1A(a0)
		movea.l	#Map_Monitor,a1
		add.b	d0,d0
		adda.w	(a1,d0.w),a1
		addq.w	#2,a1
		move.l	a1,ost_mappings(a0)

loc_128DE:				
		bsr.s	sub_128E4
		bra.w	DisplaySprite

; ===========================================================================


sub_128E4:				
		tst.w	ost_y_vel(a0)
		bpl.w	loc_128F8
		bsr.w	SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_128F8:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$1D,$1E(a0)
		movea.w	$3E(a0),a1
		lea	(v_monitors_broken_p1).w,a2
		cmpa.w	#-$5000,a1
		beq.s	loc_12914
		lea	(v_monitors_broken_p2).w,a2

loc_12914:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w	d0,d0
		move.w	off_12924(pc,d0.w),d0
		jmp	off_12924(pc,d0.w)

; ===========================================================================
off_12924:	
		dc.w loc_12938-off_12924			; 0 			
		dc.w loc_1293E-off_12924			; 1
		dc.w loc_12954-off_12924			; 2
		dc.w loc_12938-off_12924			; 3
		dc.w loc_1296A-off_12924			; 4
		dc.w loc_129E0-off_12924			; 5
		dc.w loc_12A2C-off_12924			; 6
		dc.w Invincible_Monitor-off_12924		; 7
		dc.w Pow_Teleport-off_12924			; 8
		dc.w loc_12CBE-off_12924			; 9
; ===========================================================================

loc_12938:				
		addq.w	#1,(a2)
		bra.w	React_ChkHurt2
; ===========================================================================

loc_1293E:				
					
		addq.w	#1,(v_monitors_broken_p1).w
		addq.b	#1,(v_lives).w
		addq.b	#1,(f_hud_lives_update).w
		move.w	#$98,d0	
		jmp	PlayMusic
; ===========================================================================

loc_12954:				
					
		addq.w	#1,(v_monitors_broken_p2).w
		addq.b	#1,(v_lives_p2).w
		addq.b	#1,(f_hud_lives_update_p2).w
		move.w	#$98,d0	
		jmp	PlayMusic
; ===========================================================================

loc_1296A:				
		addq.w	#1,(a2)
		lea	(v_rings).w,a2
		lea	(v_hud_rings_update).w,a3
		lea	(v_ring_reward).w,a4
		lea	(v_rings_collected_p1).w,a5
		cmpa.w	#-$5000,a1
		beq.s	loc_12992
		lea	(v_rings_p2).w,a2
		lea	(v_hud_rings_update_p2).w,a3
		lea	(v_ring_reward_p2).w,a4
		lea	(v_rings_collected_p2).w,a5

loc_12992:				
		addi.w	#$A,(a5)
		cmpi.w	#$3E7,(a5)
		bcs.s	loc_129A0
		move.w	#$3E7,(a5)

loc_129A0:				
		addi.w	#$A,(a2)
		cmpi.w	#$3E7,(a2)
		bcs.s	loc_129AE
		move.w	#$3E7,(a2)

loc_129AE:				
		ori.b	#1,(a3)
		cmpi.w	#$64,(a2)
		bcs.s	loc_129CA
		bset	#1,(a4)
		beq.s	loc_129D4
		cmpi.w	#$C8,(a2)
		bcs.s	loc_129CA
		bset	#2,(a4)
		beq.s	loc_129D4

loc_129CA:				
					
		move.w	#$B5,d0	
		jmp	PlayMusic
; ===========================================================================

loc_129D4:				
					
		cmpa.w	#-$5000,a1
		beq.w	loc_1293E
		bra.w	loc_12954
; ===========================================================================

loc_129E0:				
		addq.w	#1,(a2)
		bset	#2,$2B(a1)
		move.w	#$4B0,$34(a1)
		cmpa.w	#-$5000,a1
		bne.s	loc_12A10
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_12A10
		move.w	#$C00,(v_sonic_max_speed).w
		move.w	#$18,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		bra.s	loc_12A22
; ===========================================================================

loc_12A10:				
					
		move.w	#$C00,(v_tails_max_speed).w
		move.w	#$18,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w

loc_12A22:				
		move.w	#$FB,d0
		jmp	PlayMusic
; ===========================================================================

loc_12A2C:				
		addq.w	#1,(a2)
		bset	#0,$2B(a1)
		move.w	#$AF,d0
		jsr	(PlayMusic).l
		tst.b	$3F(a0)
		bne.s	loc_12A50
		move.b	#$38,($FFFFD180).w
		move.w	a1,($FFFFD1BE).w
		rts	
; ===========================================================================

loc_12A50:				
		move.b	#$38,($FFFFD1C0).w
		move.w	a1,($FFFFD1FE).w
		rts	
; ===========================================================================

Invincible_Monitor:				
		addq.w	#1,(a2)
		tst.b	(f_super).w				; is Sonic super?
		bne.s	locret_12AA4				; if yes, exit
		bset	#1,$2B(a1)				; make character invincible
		move.w	#20*60,$32(a1)				; for 20 seconds (20 seconds * 60 frames per second)
		tst.b	(v_current_boss).w			; don't change music during boss battles
		bne.s	.nomusic
		cmpi.b	#air_alert,$28(a1)			; or when drowning
		bls.s	.nomusic
		move.w	#$97,d0
		jsr	(PlayMusic).l

	.nomusic:
		tst.b	$3F(a0)
		bne.s	loc_12A9A
		move.b	#$35,($FFFFD200).w
		move.w	a1,($FFFFD23E).w
		rts	
; ===========================================================================

	loc_12A9A:				
		move.b	#$35,($FFFFD300).w
		move.w	a1,($FFFFD33E).w

	locret_12AA4:				
		rts	
; ===========================================================================

Pow_Teleport:				
		addq.w	#1,(a2)
		cmpi.b	#id_Sonic_Death,(v_ost_player1+ost_primary_routine).w	; is player 1 dead or respawning?
		bcc.s	.no_teleport									; if so, branch
		cmpi.b	#id_Tails_Death,(v_ost_player2+ost_primary_routine).w	; is player 2 dead or respawning?	
		bcs.s	.swap_players										; if not, branch

	.no_teleport:				
		rts			; we can't teleport if one player is dead or respawning
; ===========================================================================

.swap_players:				
		lea	(Teleport_Swap_Table).l,a3
		moveq	#(sizeof_Teleport_Swap_Table/6)-1,d2 	; number of entries in table - 1

loc_12AC2:				
		movea.w	(a3)+,a1
		movea.w	(a3)+,a2
		move.w	(a3)+,d1

loc_12AC8:				
		move.w	(a1),d0
		move.w	(a2),(a1)+
		move.w	d0,(a2)+
		dbf	d1,loc_12AC8
		dbf	d2,loc_12AC2
		move.b	#1,($FFFFB01D).w			; MainCharacter+prev_anim
		move.b	#1,($FFFFB05D).w			; v_ost_player2+prev_anim
	if Revision>0	
		; Revision 0 did not reset the character's mapping frames.
		move.b	#0,($FFFFB01A).w			; MainCharacter+mapping_frame
		move.b	#0,($FFFFB05A).w			; v_ost_player2+mapping_frame
	endc	
		move.b	#-1,(v_sonic_last_frame_id).w
		move.b	#-1,(v_tails_last_frame_id).w
		move.b	#-1,(v_tailstails_last_frame_id).w
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		lea	(v_opl_loaded_object_blocks_p2).w,a2
		moveq	#2,d1

loc_12B0A:				
		move.b	(a1),d0
		move.b	(a2),(a1)+
		move.b	d0,(a2)+
		dbf	d1,loc_12B0A
		subi.w	#$180,(v_camera_y_pos).w
		subi.w	#$180,(v_camera_y_pos_p2).w
		move.w	(v_ost_player1+ost_tile).w,d0
		andi.w	#tile_draw,(v_ost_player1+ost_tile).w
		tst.w	(v_ost_player2+ost_tile).w
		bpl.s	loc_12B36
		ori.w	#tile_hi,(v_ost_player1+ost_tile).w

loc_12B36:				
		andi.w	#tile_draw,(v_ost_player2+ost_tile).w
		tst.w	d0
		bpl.s	loc_12B46
		ori.w	#tile_hi,(v_ost_player2+ost_tile).w

loc_12B46:				
		move.b	#1,(f_boundary_bottom_change).w
		lea	($FFFFB400).w,a1
		moveq	#$6F,d1

loc_12B52:				
		cmpi.b	#id_PinballMode,ost_id(a1)
		beq.s	loc_12B5E
		cmpi.b	#id_PlaneSwitcher,ost_id(a1)
		bne.s	loc_12B6C

loc_12B5E:				
		move.b	$34(a1),d0
		move.b	$35(a1),$34(a1)
		move.b	d0,$35(a1)

loc_12B6C:				
		cmpi.b	#id_Cage,ost_id(a1)
		bne.s	loc_12B80
		move.l	$30(a1),d0
		move.l	$34(a1),$30(a1)
		move.l	d0,$34(a1)

loc_12B80:				
		cmpi.b	#id_PinballLauncher,ost_id(a1)
		bne.s	loc_12B94
		move.b	$36(a1),d0
		move.b	$37(a1),$36(a1)
		move.b	d0,$37(a1)

loc_12B94:				
		lea	$40(a1),a1
		dbf	d1,loc_12B52
		lea	($FFFFB000).w,a1
		move.b	#$38,($FFFFD180).w
		move.w	a1,($FFFFD1BE).w
		move.b	#$35,($FFFFD200).w
		move.w	a1,($FFFFD23E).w
		btst	#2,$22(a1)
		bne.s	loc_12BC8
		move.b	#$13,ost_height(a1)
		move.b	#9,$17(a1)

loc_12BC8:				
		btst	#3,$22(a1)
		beq.s	loc_12BEC
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a2
		bclr	#4,$22(a2)
		bset	#3,$22(a2)

loc_12BEC:				
		lea	($FFFFB040).w,a1
		move.b	#$38,($FFFFD1C0).w
		move.w	a1,($FFFFD1FE).w
		move.b	#$35,($FFFFD300).w
		move.w	a1,($FFFFD33E).w
		btst	#2,$22(a1)
		bne.s	loc_12C18
		move.b	#$F,ost_height(a1)
		move.b	#9,$17(a1)

loc_12C18:				
		btst	#3,$22(a1)
		beq.s	loc_12C3C
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a2
		bclr	#3,$22(a2)
		bset	#4,$22(a2)

loc_12C3C:				
		move.b	#$40,(v_teleport_timer).w
		move.b	#1,(f_teleport_flag).w
		move.w	#$EC,d0	
		jmp	PlayMusic
; ===========================================================================

teleport_table_entry: macro address_a,address_b
		if (sizeof_\address_a<>sizeof_\address_b)
			inform 3,"The blocks of RAM assigned to \address_a and \address_b must be the same size, but they are $%h bytes and $%h bytes respectively.",sizeof_\address_a,sizeof_\address_b
		endc
		dc.w	\address_a,\address_b, (sizeof_\address_a\/2)-1
		endm

Teleport_Swap_Table:
	
		dc.w v_ost_player1+ost_x_pos, v_ost_player2+ost_x_pos, ((sizeof_ost-ost_x_pos)/2)-1

		teleport_table_entry	v_opl_screen_x_pos,			v_opl_screen_x_pos_p2
		teleport_table_entry 	v_respawn_list, 			v_respawn_list_p2
		teleport_table_entry 	object_manager_addresses, 	object_manager_addresses_p2
		teleport_table_entry 	sonic_speeds, 				tails_speeds
		teleport_table_entry	ring_manager_pointers,		ring_manager_pointers_p2
		teleport_table_entry	bumper_manager_pointers,	bumper_manager_pointers_p2
		teleport_table_entry	camera_positions,			camera_positions_p2
		teleport_table_entry	v_camera_x_pos_coarse,		v_camera_x_pos_coarse_p2
		teleport_table_entry	camera_boundaries, 			camera_boundaries_p2
		teleport_table_entry	horiz_scroll_delay,			horiz_scroll_delay_P2
		teleport_table_entry	v_camera_y_shift,			v_camera_y_shift_p2
		teleport_table_entry	block_redraw_flags, 		block_redraw_flags_p2
		teleport_table_entry	scroll_redraw_flags, 		scroll_redraw_flags_p2
		teleport_table_entry	vblank_camera_copies,		v_camera_pos_p2_copy
		teleport_table_entry 	vblank_scroll_redraw_flags, vblank_scroll_redraw_flags_p2
		teleport_table_entry	camera_diffs, 				camera_diffs_p2
		teleport_table_entry	v_sonic_pos_tracker,		v_tails_pos_tracker

		arraysize Teleport_Swap_Table
; ===========================================================================

loc_12CBE:				
		addq.w	#1,(a2)
		rts	
; ===========================================================================

loc_12CC2:				
		subq.w	#1,$1E(a0)
		bmi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
Ani_Monitor:	
		dc.w byte_12CE4-Ani_Monitor			; 0 			
		dc.w byte_12CE8-Ani_Monitor			; 1
		dc.w byte_12CF0-Ani_Monitor			; 2
		dc.w byte_12CF8-Ani_Monitor			; 3
		dc.w byte_12D00-Ani_Monitor			; 4
		dc.w byte_12D08-Ani_Monitor			; 5
		dc.w byte_12D10-Ani_Monitor			; 6
		dc.w byte_12D18-Ani_Monitor			; 7
		dc.w byte_12D20-Ani_Monitor			; 8
		dc.w byte_12D28-Ani_Monitor			; 9
		dc.w byte_12D30-Ani_Monitor			; 10
byte_12CE4:	dc.b   1,  0,  1,$FF				; 0 
byte_12CE8:	dc.b   1,  0,  2,  2,  1,  2,  2,$FF		; 0	
byte_12CF0:	dc.b   1,  0,  3,  3,  1,  3,  3,$FF		; 0	
byte_12CF8:	dc.b   1,  0,  4,  4,  1,  4,  4,$FF		; 0	
byte_12D00:	dc.b   1,  0,  5,  5,  1,  5,  5,$FF		; 0	
byte_12D08:	dc.b   1,  0,  6,  6,  1,  6,  6,$FF		; 0	
byte_12D10:	dc.b   1,  0,  7,  7,  1,  7,  7,$FF		; 0	
byte_12D18:	dc.b   1,  0,  8,  8,  1,  8,  8,$FF		; 0	
byte_12D20:	dc.b   1,  0,  9,  9,  1,  9,  9,$FF		; 0	
byte_12D28:	dc.b   1,  0, $A, $A,  1, $A, $A,$FF		; 0	
byte_12D30:	dc.b   2,  0,  1, $B,$FE,  1			; 0	


		include	"mappings/sprite/Monitors.asm"

; ===========================================================================

	if Revision<2
		nop	
	endc

; ===========================================================================		
; ----------------------------------------------------------------------------
; Object 0E - Title screen intro animation
; Manages the entire animation sequence on the title screen; Sonic is the
; parent object
; ----------------------------------------------------------------------------

TitleIntro:							
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	TitleIntro_Index(pc,d0.w),d1
		jmp	TitleIntro_Index(pc,d1.w)
; ===========================================================================
TitleIntro_Index:	index offset(*),,2
		ptr TitleIntro_Main				; 0 				
		ptr TitleIntro_Sonic				; 2
		ptr TitleIntro_Tails				; 4
		ptr TitleIntro_LogoTop				; 6
		ptr TitleIntro_FlashingStar			; 8
		ptr TitleIntro_SonicHand			; $A
		ptr TitleIntro_FallingStar			; $C
		ptr TitleIntro_MaskingSprite			; $E
		ptr TitleIntro_TailsHand			; $10
		
		rsobj	TitleIntro,$2A
ost_titleintro_counter:			rs.w 1			; $2A
ost_titleintro_array_index:		rs.w 1			; $2C; pointer to current location in position arrays
		rsset $2F
ost_titleintro_complete:		rs.b 1			; $2F
ost_titleintro_music_flag:	rs.b 1				; $30
		rsset $34
ost_titleintro_current_frame:	rs.w 1				; $34		
		rsobjend
; ===========================================================================

TitleIntro_Main:				
		addq.b	#2,ost_primary_routine(a0)		; pointless, because it's overwritten with the subtype below
		move.l	#Map_TitleIntro,ost_mappings(a0)
		move.w	#tile_TitleSprites,ost_tile(a0)
		move.b	#4,ost_priority(a0)
		move.b	ost_subtype(a0),ost_primary_routine(a0)	; subtype is also routine
		bra.s	TitleIntro							
; ===========================================================================

TitleIntro_Sonic:				
		addq.w	#1,ost_titleintro_current_frame(a0)	; increment frame count
		cmpi.w	#288,ost_titleintro_current_frame(a0)	; have we reached the end?
		bcc.s	.not_done				; if not, branch
		bsr.w	TitleIntro_SetFinalState

	.not_done:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_Sonic_Index(pc,d0.w),d1
		jmp	TitleIntro_Sonic_Index(pc,d1.w)
; ===========================================================================
TitleIntro_Sonic_Index:		index offset(*),,2
		ptr TitleIntro_Sonic_Main			; 0 					
		ptr TitleIntro_Sonic_FadeInAndPlayMusic		;2
		ptr TitleIntro_Sonic_LoadPalette		; 4
		ptr TitleIntro_Sonic_Move			; 6
		ptr TitleIntro_Animate				; 8
		ptr TitleIntro_Sonic_AnimationFinished		; $A
		ptr TitleIntro_Sonic_SpawnTails			; $C
		ptr TitleIntro_Sonic_FlashBackground		; $E
		ptr TitleIntro_Sonic_SpawnFallingStar		; $10
		ptr TitleIntro_Sonic_FallingStarSparkle		; $12
; ===========================================================================

TitleIntro_Sonic_Main:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_FadeInAndPlayMusic next
		move.b	#id_Frame_IntroSonic_0,ost_frame(a0)	; initial frame of Sonic's animation
		move.w	#screen_left+144,ost_x_screen(a0)	; set x-pos
		move.w	#screen_top+96,ost_y_screen(a0)		; set y-pos
		
		lea	(v_title_flashing_star).w,a1		; load flashing star object
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_flashingstar,ost_subtype(a1)
		
		lea	(v_title_logo_top).w,a1			; load logo top object
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_logotop,ost_subtype(a1)
		
		moveq_	sfx_Sparkle,d0				; play twinkling sound
		jmpto	PlaySound,JmpTo4_PlaySound
; ===========================================================================

TitleIntro_Sonic_FadeInAndPlayMusic:				
		cmpi.w	#56,ost_titleintro_current_frame(a0)	; have 56 frames elapsed?
		bcc.s	.load_palchanger			; if so, branch
		rts	
; ===========================================================================

	.load_palchanger:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_LoadPalette next

		lea	(v_title_palette_changer_3).w,a1	; load palette changer object
		move.b	#id_PalChanger,ost_id(a1)
		move.b	#type_palchngr_titlelogo,ost_subtype(a1)

		st.b	ost_titleintro_music_flag(a0)		; play the title screen music
		moveq_	mus_Title,d0
		jmpto	PlayMusic,JmpTo4_PlayMusic
; ===========================================================================

TitleIntro_Sonic_LoadPalette:				
		cmpi.w	#128,ost_titleintro_current_frame(a0)	; have 128 frames elapsed?
		bcc.s	.loadpalette				; if so, branch
		rts	
; ===========================================================================

	.loadpalette:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_Move next

		lea	(Pal_TitleSonic).l,a1			; load Title Screen Sonic palette
		lea	(v_pal_dry).w,a2
		moveq	#countof_color-1,d6

	.loop:				
		move.w	(a1)+,(a2)+
		dbf	d6,.loop

TitleIntro_Sonic_LoadMaskingSprite:				
		lea	(v_title_masking_sprite).w,a1		; load the masking sprite object
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_maskingsprite,ost_subtype(a1)
		rts	

; ===========================================================================

TitleIntro_Sonic_Move:				
		moveq	#sizeof_TitleIntro_Sonic_Positions+4,d2	; position array counter
		lea	(TitleIntro_Sonic_Positions).l,a1

TitleIntro_Move:					
		move.w	ost_titleintro_counter(a0),d0		; get frame counter
		addq.w	#1,d0					; increment
		move.w	d0,ost_titleintro_counter(a0)		; store new value
		andi.w	#3,d0					; reset if it has reached 4				
		bne.s	.display				; if it has not reached 4, branch
		
	;.update_position:
		move.w	ost_titleintro_array_index(a0),d1	; get current array index
		addq.w	#4,d1					; increment
		cmp.w	d2,d1					; have we reached the end?
		bcc.w	TitleIntro_NextSecondaryRoutine		; if so, go to TitleIntro_Animate next?

		move.w	d1,ost_titleintro_array_index(a0)	
		move.l	-4(a1,d1.w),d0				; get new position from array
		move.w	d0,ost_y_screen(a0)			; apply to object
		swap	d0
		move.w	d0,ost_x_screen(a0)

	.display:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_Animate:							
		lea	(Ani_TitleIntro).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_Sonic_AnimationFinished:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_SpawnTails next
		move.b	#id_Frame_IntroSonic_NoArm,ost_frame(a0) ; set Sonic's armless frame 

		lea	(v_title_sonic_hand).w,a1		; load Sonic's hand
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_sonichand,ost_subtype(a1)
		
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_Sonic_SpawnTails:				
		cmpi.w	#192,ost_titleintro_current_frame(a0)	; have we reached the 192nd frame?
		bcs.s	.display				; if not, branch
		
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_FlashBackground next
		lea	(v_title_tails).w,a1
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_tails,ost_subtype(a1)

	.display:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_Sonic_FlashBackground:				
		cmpi.w	#288,ost_titleintro_current_frame(a0)	; have we reached the 288th frame?
		bcs.s	.display				; if not, branch
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_SpawnFallingStar next
		clr.w	ost_titleintro_array_index(a0)		
		st.b	ost_titleintro_complete(a0)		; set flag indicating the intro animation is complete

		lea	(v_pal_dry_line3).w,a1
		move.w	#cWhite,d0				; fill palette line 3 with white
		moveq	#countof_color-1,d6

	.loop:				
		move.w	d0,(a1)+
		dbf	d6,.loop
		
		lea	(v_title_palette_changer_2).w,a1	; load palette changer object
		move.b	#id_PalChanger,ost_id(a1)
		move.b	#type_palchngr_titlebackground,ost_subtype(a1)

		move.b	#id_TitleMenu,(v_title_menu+id).w	; load title screen menu object

	.display:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_Sonic_SpawnFallingStar:	
		; Wait for 176 frames on NTSC consoles and 112 on PAL; this ensures the 
		; falling star synchronizes properly with the music.
		btst	#console_speed_bit,(v_console_region).w	; are we on a PAL console?
		beq.s	.ntsc					; if not, branch
		
	;.pal:	
		cmpi.w	#400,ost_titleintro_current_frame(a0)	; have we reached the 400th frame?
		beq.s	.spawn_star				; if so, branch
		bra.w	DisplaySprite
; ===========================================================================

	.ntsc:				
		cmpi.w	#464,ost_titleintro_current_frame(a0)	; have we reached the 464th frame?
		beq.s	.spawn_star				; if so, branch
		bra.w	DisplaySprite
; ===========================================================================

	.spawn_star:									
		lea	(v_title_falling_star).w,a1		; load falling star object
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_fallingstar,ost_subtype(a1)
		
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Sonic_FallingStarSparkle next
		
		lea	(v_title_masking_sprite).w,a1
		bsr.w	DeleteChild				; delete the masking sprite object
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_Sonic_FallingStarSparkle:				
		move.b	(v_vblank_counter_byte).w,d0	
		andi.b	#7,d0												
		bne.s	.display				; if frame count is not a multiple of 8, branch

		; Update palette cycle of falling star every 8 frames.
		move.w	ost_titleintro_array_index(a0),d0	; get index
		addq.w	#2,d0					; increment
		cmpi.w	#sizeof_Pal_TitleStarCyc,d0		; have we reached the end?
		bcs.s	.not_done				; if we have not, branch
		moveq	#0,d0					; reset index

	.not_done:				
		move.w	d0,ost_titleintro_array_index(a0)	; update index
		move.w	Pal_TitleStarCyc(pc,d0.w),(v_pal_dry_line3+(5*2)).w ; copy updated color to palette

	.display:				
		bra.w	DisplaySprite
; ===========================================================================
		
		incfile	Pal_TitleStarCyc
			
TitleIntro_Sonic_Positions:
		;           		X,      		Y
		dc.w  screen_left+136, screen_top+80
		dc.w  screen_left+128, screen_top+64
		dc.w  screen_left+120, screen_top+48
		dc.w  screen_left+118, screen_top+38
		dc.w  screen_left+122, screen_top+30
		dc.w  screen_left+128, screen_top+26
		dc.w  screen_left+132, screen_top+25
		dc.w  screen_left+136, screen_top+24
		arraysize	TitleIntro_Sonic_Positions
; ===========================================================================

TitleIntro_Tails:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_Tails_Index(pc,d0.w),d1
		jmp	TitleIntro_Tails_Index(pc,d1.w)
; ===========================================================================
TitleIntro_Tails_Index:	index offset(*),,2
		ptr TitleIntro_Tails_Main			; 0 			
		ptr TitleIntro_Tails_Move			; 2
		ptr TitleIntro_Animate				; 4
		ptr TitleIntro_Tails_AnimationFinished		; 6
		ptr BranchTo10_DisplaySprite			; 8
; ===========================================================================

TitleIntro_Tails_Main:				
		addq.b	#2,ost_secondary_routine(a0)
	if FixBugs
		; Tails' priority is never set, even though it is set in
		; 'TitleScreen_SetFinalState', suggesting that it was meant to be.
		; This causes Tails to be layered behind Sonic instead of in front of
		; him.
		move.b	#3,ost_priority(a0)		
	endc	
		move.w	#screen_left+88,ost_x_screen(a0)
		move.w	#screen_top+88,ost_y_screen(a0)
		move.b	#id_Ani_TitleIntro_Tails,ost_anim(a0)
		rts	
; ===========================================================================

TitleIntro_Tails_Move:				
		moveq	#sizeof_TitleIntro_Tails_Positions+4,d2
		lea	(TitleIntro_Tails_Positions).l,a1
		bra.w	TitleIntro_Move
; ===========================================================================

TitleIntro_Tails_AnimationFinished:				
		addq.b	#2,ost_secondary_routine(a0)		; go to BranchTo10_DisplaySprite next
		lea	(v_title_tails_hand).w,a1		; load Tails' hand object
		move.b	#id_TitleIntro,ost_id(a1)					
		move.b	#type_titleintro_tailshand,ost_subtype(a1)

BranchTo10_DisplaySprite:				
		bra.w	DisplaySprite

; ===========================================================================
TitleIntro_Tails_Positions:	
		;           		X,      		Y
		dc.w   screen_left+87, screen_top+72
		dc.w   screen_left+83, screen_top+56
		dc.w   screen_left+78, screen_top+44
		dc.w   screen_left+76, screen_top+38
		dc.w   screen_left+74, screen_top+34
		dc.w   screen_left+73, screen_top+33
		dc.w   screen_left+72, screen_top+32
		arraysize	TitleIntro_Tails_Positions	
; ===========================================================================

TitleIntro_LogoTop:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_LogoTop_Index(pc,d0.w),d1
		jmp	TitleIntro_LogoTop_Index(pc,d1.w)
; ===========================================================================

TitleIntro_LogoTop_Index:	index offset(*),,2
		ptr TitleIntro_LogoTop_Main			; 0			
		ptr BranchTo11_DisplaySprite			; 2
; ===========================================================================

TitleIntro_LogoTop_Main:				
		move.b	#id_Frame_LogoTop_TM,ost_frame(a0)
		tst.b	(v_console_region).w			; is console Japanese or Korean?
		bmi.s	.notJPKR				; if so, branch
		move.b	#id_Frame_LogoTop_NoTM,ost_frame(a0)	; use alternate mappings that remove the TM symbol

	.notJPKR:				
		move.b	#2,ost_priority(a0)
		move.w	#screen_left+(screen_width/2),ost_x_screen(a0)
		move.w	#screen_top+104,ost_y_screen(a0)

TitleIntro_NextSecondaryRoutine:				
		addq.b	#2,ost_secondary_routine(a0)		; go to BranchTo11_DisplaySprite next

BranchTo11_DisplaySprite:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_MaskingSprite:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_MaskingSprite_Index(pc,d0.w),d1
		jmp	TitleIntro_MaskingSprite_Index(pc,d1.w)
; ===========================================================================
TitleIntro_MaskingSprite_Index:	index offset(*),,2
		ptr TitleIntro_MaskingSprite_Main		; 0 			
		ptr BranchTo12_DisplaySprite			; 2
; ===========================================================================

TitleIntro_MaskingSprite_Main:				
		addq.b	#2,ost_secondary_routine(a0)		; go to BranchTo12_DisplaySprite next
		move.w	#vram_Title,ost_tile(a0)		; start of VRAM
		move.b	#id_Frame_MaskingSprite,ost_frame(a0)
		move.b	#2,ost_priority(a0)
		move.w	#screen_left+128,ost_x_screen(a0)	; should be zero, but is corrected by the titlescreen loop
		move.w	#screen_top+224/2,ost_y_screen(a0)

BranchTo12_DisplaySprite:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_FlashingStar:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_FlashingStar_Index(pc,d0.w),d1
		jmp	TitleIntro_FlashingStar_Index(pc,d1.w)
; ===========================================================================
TitleIntro_FlashingStar_Index:	index offset(*),,2
		ptr TitleIntro_FlashingStar_Main		; 0 			
		ptr TitleIntro_Animate				; 2
		ptr TitleIntro_FlashingStar_Wait		; 4
		ptr TitleIntro_FlashingStar_Move		; 6
; ===========================================================================

TitleIntro_FlashingStar_Main:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_Animate next
		move.b	#id_Frame_IntroStar_0,ost_frame(a0)
		ori.w	#tile_hi,ost_tile(a0)
		move.b	#id_Ani_TitleIntro_FlashingStar,ost_anim(a0)
		move.b	#1,ost_priority(a0)
		move.w	#screen_left+128,ost_x_screen(a0)
		move.w	#screen_top+40,ost_y_screen(a0)
		move.w	#4,ost_titleintro_counter(a0)	
		rts	
; ===========================================================================

TitleIntro_FlashingStar_Wait:				
		subq.w	#1,ost_titleintro_counter(a0)		; deincrement counter
		bmi.s	.wait_done				; if less than 0, branch
		rts	
; ===========================================================================

	.wait_done:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_FlashingStar_Move next
		rts	
; ===========================================================================

TitleIntro_FlashingStar_Move:				
		move.b	#id_titleintro_animate_2,ost_secondary_routine(a0) ; go to TitleIntro_Animate next
		move.b	#0,ost_anim_frame(a0)
		move.b	#0,ost_anim_time(a0)
		move.w	#6,ost_titleintro_counter(a0)
		
		move.w	ost_titleintro_array_index(a0),d0	; get current index
		addq.w	#4,d0					; increment
		cmpi.w	#sizeof_TitleIntro_FlashingStar_Positions+4,d0 ; have we reached the end?
		bcc.w	DeleteObject				; if so, branch
		move.w	d0,ost_titleintro_array_index(a0)	; store new index
		
		move.l	TitleIntro_FlashingStar_Positions-4(pc,d0.w),d0 ; get new position from array
		move.w	d0,ost_y_screen(a0)
		swap	d0
		move.w	d0,ost_x_screen(a0)

		moveq_	sfx_Sparkle,d0				; play twinkling sound
		jmpto	PlaySound,JmpTo4_PlaySound
; ===========================================================================
TitleIntro_FlashingStar_Positions:
		;          			 X,     	 	Y
		dc.w  screen_left+90,  screen_top+114
		dc.w  screen_left+240, screen_top+120
		dc.w  screen_left+178, screen_top+177
		dc.w  screen_left+286, screen_top+34
		dc.w  screen_left+64,  screen_top+99
		dc.w  screen_left+256, screen_top+96
		dc.w  screen_left+141, screen_top+187
		dc.w  screen_left+64,  screen_top+43
		dc.w  screen_left+229, screen_top+135
		arraysize	TitleIntro_FlashingStar_Positions
; ===========================================================================

TitleIntro_SonicHand:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_SonicHand_Index(pc,d0.w),d1
		jmp	TitleIntro_SonicHand_Index(pc,d1.w)
; ===========================================================================
TitleIntro_SonicHand_Index:	index offset(*),,2
		ptr TitleIntro_SonicHand_Main			; 0 			
		ptr TitleIntro_SonicHand_Move			; 2
		ptr BranchTo13_DisplaySprite			; 4
; ===========================================================================

TitleIntro_SonicHand_Main:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_SonicHand_Move next
		move.b	#id_Frame_IntroSonic_Hand,ost_frame(a0)
	if FixBugs
		; This matches 'TitleScreen_SetFinalState'.
		move.b	#2,ost_priority(a0)	
	else	
		; This is inconsistent with 'TitleScreen_SetFinalState'.
		move.b	#3,ost_priority(a0)
	endc	
		move.w	#screen_left+197,ost_x_screen(a0)
		move.w	#screen_top+63,ost_y_screen(a0)

BranchTo13_DisplaySprite:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_SonicHand_Move:				
		moveq	#sizeof_TitleIntro_SonicHand_Positions+4,d2
		lea	(TitleIntro_SonicHand_Positions).l,a1
		bra.w	TitleIntro_Move
; ===========================================================================

TitleIntro_SonicHand_Positions:	
		dc.w  screen_left+195, screen_top+65
		dc.w  screen_left+192, screen_top+66
		dc.w  screen_left+193, screen_top+65
		arraysize	TitleIntro_SonicHand_Positions		
; ===========================================================================

TitleIntro_TailsHand:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_TailsHand_Index(pc,d0.w),d1
		jmp	TitleIntro_TailsHand_Index(pc,d1.w)
; ===========================================================================

TitleIntro_TailsHand_Index:	index offset(*),,2
		ptr TitleIntro_TailsHand_Main			; 0 				
		ptr TitleIntro_TailsHand_Move			; 2
		ptr BranchTo14_DisplaySprite			; 4
; ===========================================================================

TitleIntro_TailsHand_Main:				
		addq.b	#2,ost_secondary_routine(a0)		; go to TitleIntro_TailsHand_Move next
		move.b	#id_Frame_IntroTails_Hand,ost_frame(a0)
	if FixBugs
		; This matches 'TitleIntro_SetFinalState'.
		move.b	#2,ost_priority(a0)
	else
		; This is inconsistent with 'TitleIntro_SetFinalState', and causes
		; Tails' hand to be layered behind Tails if his priority is fixed
		; in TitleIntro_Tails_Main.
		move.b	#3,ost_priority(a0)
	endc	
		move.w	#screen_left+143,ost_x_screen(a0)
		move.w	#screen_left+85,ost_y_screen(a0)

BranchTo14_DisplaySprite:				
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_TailsHand_Move:				
		moveq	#sizeof_TitleIntro_TailsHand_Positions+4,d2
		lea	(TitleIntro_TailsHand_Positions).l,a1
		bra.w	TitleIntro_Move
; ===========================================================================

TitleIntro_TailsHand_Positions:	
		dc.w  screen_left+140, screen_top+80
		dc.w  screen_left+141, screen_top+81
		arraysize	TitleIntro_TailsHand_Positions	
; ===========================================================================

TitleIntro_FallingStar:				
		moveq	#0,d0
		move.b	ost_secondary_routine(a0),d0
		move.w	TitleIntro_FallingStar_Index(pc,d0.w),d1
		jmp	TitleIntro_FallingStar_Index(pc,d1.w)
; ===========================================================================

TitleIntro_FallingStar_Index:	index offset(*),,2
		ptr TitleIntro_FallingStar_Main			; 0 				
		ptr TitleIntro_FallingStar_Fall			; 2
; ===========================================================================

TitleIntro_FallingStar_Main:				
		addq.b	#2,ost_secondary_routine(a0)
		move.b	#id_Frame_IntroStar_0,ost_frame(a0)
		move.b	#5,ost_priority(a0)
		move.w	#screen_left+240,ost_x_screen(a0)
		move.w	#screen_top,ost_y_screen(a0)
		move.b	#id_Ani_TitleIntro_FallingStar,ost_anim(a0)
		move.w	#140,ost_titleintro_counter(a0)		; run for 140 frames
		bra.w	DisplaySprite
; ===========================================================================

TitleIntro_FallingStar_Fall:				
		subq.w	#1,ost_titleintro_counter(a0)		; has the animation finished?
		bmi.w	DeleteObject				; if so, delete object
		
		subq.w	#2,ost_x_screen(a0)			; move star left two pixels and down one pixel
		addq.w	#1,ost_y_screen(a0)

		lea	(Ani_TitleIntro).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C9 - Title Screen and ending palette change handler
; ----------------------------------------------------------------------------

PalChanger:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	PalChanger_Index(pc,d0.w),d1
		jmp	PalChanger_Index(pc,d1.w)
; ===========================================================================
PalChanger_Index:	index offset(*),,2
		ptr	PalChanger_Init
		ptr PalChanger_Main
		
		rsobj	PalChanger,$30
ost_palchngr_fadein_time_left:	rs.b 1				; $30
ost_palchngr_fadein_time:		rs.b 1			; $31
ost_palchngr_fadein_amount:		rs.b 1			; $32
		rsset $34				
ost_palchngr_start_offset: 		rs.w 1			; $34
ost_palchngr_length: 			rs.w 1			; $36
		rsset $3A
ost_palchngr_codeptr: 			rs.l 1			; $3A	
		rsobjend
	
; ===========================================================================
		
PalChanger_Init:	
		addq.b	#2,ost_primary_routine(a0)		; go to PalChanger_Main next
		moveq	#0,d0
		move.b	ost_subtype(a0),d0
		lea	(PalChangerData_Index).l,a1		; load palette change data array
		adda.w	(a1,d0.w),a1				; subtype corresponds to the palette change data
		move.l	(a1)+,ost_palchngr_codeptr(a0)		; code pointer
		movea.l	(a1)+,a2				; palette pointer
		move.b	(a1)+,d0				; start offset 
		move.w	d0,ost_palchngr_start_offset(a0)
		lea	(v_pal_dry_next).w,a3
		adda.w	d0,a3					; add start offset to v_pal_dry_next
		move.b	(a1)+,d0				; length
		move.w	d0,ost_palchngr_length(a0)

	.loop:				
		move.w	(a2)+,(a3)+				; load target palette to v_pal_dry_next
		dbf	d0,.loop
		
		move.b	(a1)+,d0				; fade-in time
		move.b	d0,ost_palchngr_fadein_time_left(a0)
		move.b	d0,ost_palchngr_fadein_time(a0)
		move.b	(a1)+,ost_palchngr_fadein_amount(a0)	; fade-in amount
		rts	
; ===========================================================================

PalChanger_Main:
		subq.b	#1,ost_palchngr_fadein_time_left(a0)	; deincrement time left
		bpl.s	.exit					; if there is time left, exit
		move.b	ost_palchngr_fadein_time(a0),ost_palchngr_fadein_time_left(a0) ; reset time left
		subq.b	#1,ost_palchngr_fadein_amount(a0)	; deincrement fade amount
		bmi.w	DeleteObject				; if fade-in is complete, delete the PalChanger object
		movea.l	ost_palchngr_codeptr(a0),a2		; get code pointer
		movea.l	a0,a3					; back up a0								
		move.w	ost_palchngr_length(a0),d0		; get length
		move.w	ost_palchngr_start_offset(a0),d1
		lea	(v_pal_dry).w,a0
		adda.w	d1,a0					; set start offset 
		lea	(v_pal_dry_next).w,a1
		adda.w	d1,a1					; same with palette fade buffer

	.loop:				
		jsr	(a2)					; jump to the appropriate palette fade code
		dbf	d0,.loop				; repeat for length of palette
		movea.l	a3,a0					; restore a0

	.exit:				
		rts	
; ===========================================================================

PalChangerData_Index:	index offset(*),,2
		ptr PalChngrData_TitleLogo			; 0 			
		ptr PalChngrData_TitleBackground		; 2
		ptr PalChngrData_EndingStillFirst		; 4
		ptr PalChngrData_EndingStillNext		; 6
		ptr PalChngrData_EndingSonic			; 8
		ptr PalChngrData_EndingCharacterDescend		; $A
		ptr PalChngrData_EndingSuperSonic		; $C
		ptr PalChngrData_EndingTails			; $E

; ---------------------------------------------------------------------------
; Data for each palette change handled by this object.

; Each entry is $C bytes, and consists of:
; - pointer to the actual palette change subroutine that will be used (longword)
; - pointer to the palette data to use (longword)
; - the first palette entry to modify, represented as an offset relative to v_pal_dry
; 	(byte) 
; - the length of the data to modify (byte)
; - the duration of the fade (byte)
; - the amount of the fade (byte)
; ---------------------------------------------------------------------------

palchngrdata:	macro codeptr,dataptr,loadto_offset,length,fadein_time,fadein_amount
		dc.l	\codeptr,\dataptr
		dc.b	\loadto_offset,\length,\fadein_time,\fadein_amount
    	endm


PalChngrData_TitleLogo:					palchngrdata	FadeIn_AddColor,	Pal_TitleLogo, 			$60,$F,	2,$15
PalChngrData_TitleBackground:			palchngrdata	PalChanger_WhiteIn,	Pal_TitleBackground,	$40,$F,	4,7
PalChngrData_EndingStillFirst:			palchngrdata	PalChanger_WhiteIn,	Pal_EndingStills,		0, 	$F,	8,7
PalChngrData_EndingStillNext:			palchngrdata	PalChanger_WhiteOut,Pal_EndingStills,		0, 	$F,	8,7
PalChngrData_EndingSonic:				palchngrdata	PalChanger_WhiteIn,	Pal_EndingSonic,		0,	$1F,4,7
PalChngrData_EndingCharacterDescend:	palchngrdata	PalChanger_WhiteIn,	Pal_EndingBG,			$40,$1F,4,7
PalChngrData_EndingSuperSonic:			palchngrdata	PalChanger_WhiteIn,	Pal_EndingSuperSonic,	0,	$F,	4,7
PalChngrData_EndingTails:				palchngrdata	PalChanger_WhiteIn,	Pal_EndingSonicFar,		0,	$1F,4,7

	incfile	Pal_TitleSonic	
	incfile	Pal_TitleBackground
	incfile	Pal_TitleLogo
					
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reduce the values of a single palette entry while fading in
; from white. Used by the title screen background, the still transitions in 
; the ending sequence, and the fade-in to Sonic or Tails descending during 
; the ending sequence.

; input: 
;	a0 = target palette
;	a1 = current palette

;	uses d2, d3, d4, d5, a0, a1
;-----------------------------------------------------------------------------
PalChanger_WhiteIn:					
		move.b	(a1)+,d2				; blue byte of target color
		andi.b	#cBlue>>8,d2				; only bits 1-3 used by the actual color data
		move.b	(a0),d3					; blue byte of current color
		
		cmp.b	d2,d3					; has blue reached the target?
		bls.s	.skipblue				; if so, branch
		subq.b	#2,d3					; reduce blue value
		move.b	d3,(a0)					; update blue

	.skipblue:				
		addq.w	#1,a0
		move.b	(a1)+,d2				; green/red byte of target color
		move.b	d2,d3				
		andi.b	#cGreen,d2				; only green bits
		andi.b	#cRed,d3				; only red bits
		move.b	(a0),d4					; green/red byte of current color
		move.b	d4,d5
		andi.b	#cGreen,d4				; only green bits
		andi.b	#cRed,d5				; only red bits
		
		cmp.b	d2,d4					; has green reached the target?
		bls.s	.skipgreen				; if so, branch
		subi.b	#$20,d4					; reduce green value

	.skipgreen:				
		cmp.b	d3,d5					; has red reached the target?
		bls.s	.skipred				; if so, branch	
		subq.b	#2,d5					; reduce red value

	.skipred:				
		or.b	d4,d5
		move.b	d5,(a0)+				; update green and red
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to increase the values of a single palette entry while fading to
; white. Used only by the still transitions in the ending sequence.

; input: 
;	a0 = target palette
;	a1 = current palette

;	uses d2, d3, d4, a0
; ---------------------------------------------------------------------------
PalChanger_WhiteOut:				
		moveq	#cBlue>>8,d2			
		move.b	(a0),d3					; blue byte of current color
		and.b	d2,d3					; only bits 1-3 used by the actual color data
		
		cmp.b	d2,d3					; has blue reached its max?
		bcc.s	.skipblue				; if so, branch
		addq.b	#2,d3					; increase blue value
		move.b	d3,(a0)					; update blue

	.skipblue:				
		addq.w	#1,a0
		move.b	(a0),d3					; green/red byte of current color
		move.b	d3,d4
		andi.b	#cGreen,d3				; only green bits
		andi.b	#cRed,d4				; only red bits (could have used 'and.b d2,d4')
		
		cmpi.b	#cGreen,d3				; has green reached its max?
		bcc.s	.skipgreen				; if so, branch
		addi.b	#$20,d3					; increase green

	.skipgreen:				
		cmp.b	d2,d4					; has red reached its max? (cRed = cBlue>>8)
		bcc.s	.skipred				; if so, branch
		addq.b	#2,d4					; increase red value

	.skipred:				
		or.b	d3,d4
		move.b	d4,(a0)+				; update green and red
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to skip the title screen animation when the start button
; is pressed.
; ---------------------------------------------------------------------------

TitleIntro_SetFinalState:				
		tst.b	ost_titleintro_complete(a0)		; has the intro animation already finished?
		bne.w	.exit					; if it has, exit
		move.b	(v_joypad_press_actual).w,d0		; get joypad press state
		or.b	(v_joypad2_press_actual).w,d0		; (both pads)
		andi.b	#btnDir|btnABC,(v_joypad_press_actual).w ; clear start bit from input state
		andi.b	#btnDir|btnABC,(v_joypad2_press_actual).w ; (both pads)
		andi.b	#btnStart,d0				; is start button pressed?
		beq.w	.exit					; if not, exit

		st.b	ost_titleintro_complete(a0)		; set intro finished flag
		
		move.b	#id_TitleIntro_Sonic_SpawnFallingStar,ost_secondary_routine(a0) ; load Sonic
		move.b	#id_Frame_IntroSonic_NoArm,ost_frame(a0)
		move.w	#screen_left+136,ost_x_screen(a0)
		move.w	#screen_top+24,ost_y_screen(a0)
		
		lea	(v_title_sonic_hand).w,a1		; load Sonic's hand
		bsr.w	TitleIntro_InitSprite
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#id_TitleIntro_SonicHand,ost_primary_routine(a1)
		move.b	#2,ost_priority(a1)
		move.b	#id_Frame_IntroSonic_Hand,ost_frame(a1)
		move.b	#id_BranchTo13_DisplaySprite,ost_secondary_routine(a1)
		move.w	#screen_left+193,ost_x_screen(a1)
		move.w	#screen_top+65,ost_y_screen(a1)
		
		lea	(v_title_tails).w,a1			; load Tails
		bsr.w	TitleIntro_InitSprite
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#id_TitleIntro_Tails,ost_primary_routine(a1)
		move.b	#id_Frame_IntroTails_4,ost_frame(a1)
		move.b	#id_TitleIntro_Tails_AnimationFinished,ost_secondary_routine(a1)
		move.b	#3,ost_priority(a1)
		move.w	#screen_left+72,ost_x_screen(a1)
		move.w	#screen_top+32,ost_y_screen(a1)

		lea	(v_title_tails_hand).w,a1		; load Tails' hand
		bsr.w	TitleIntro_InitSprite
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#id_TitleIntro_TailsHand,ost_primary_routine(a1)
		move.b	#2,ost_priority(a1)
		move.b	#id_Frame_IntroTails_Hand,ost_frame(a1)
		move.b	#id_BranchTo14_DisplaySprite,ost_secondary_routine(a1)
		move.w	#screen_left+141,ost_x_screen(a1)
		move.w	#screen_top+81,ost_y_screen(a1)
		
		lea	(v_title_logo_top).w,a1			; load logo top
		move.b	#id_TitleIntro,ost_id(a1)
		move.b	#type_titleintro_logotop,ost_subtype(a1)
		
		bsr.w	TitleIntro_Sonic_LoadMaskingSprite	; load masking sprite
		
		move.b	#id_TitleMenu,(v_title_menu+ost_id).w	; load the title screen menu
		
		lea	(v_title_palette_changer_1).w,a1	; delete the palette changer object
		bsr.w	DeleteChild
		
		lea_	Pal_TitleLogo,a1			; load the logo palette
		lea	(v_pal_dry_line4).w,a2
		moveq	#(sizeof_pal/4)-1,d6
	.loop1:				
		move.l	(a1)+,(a2)+
		dbf	d6,.loop1
		
		lea_	Pal_TitleBackground,a1			; load the background palette
		lea	(v_pal_dry_line3).w,a2
		moveq	#(sizeof_pal/4)-1,d6
	.loop2:				
		move.l	(a1)+,(a2)+
		dbf	d6,.loop2
		
		lea_	Pal_TitleSonic,a1			; load Sonic and Tails' palette
		lea	(v_pal_dry_line1).w,a2
		moveq	#(sizeof_pal/4)-1,d6
	.loop3:				
		move.l	(a1)+,(a2)+
		dbf	d6,.loop3

		tst.b	ost_titleintro_music_flag(a0)		; is title screen music already playing? 
		bne.s	.exit					; if so, exit
		moveq_	mus_Title,d0				; play the title screen music	
		jsrto	PlayMusic,JmpTo4_PlayMusic

	.exit:							
		rts	


; ===========================================================================

TitleIntro_InitSprite:								
		move.l	#Map_TitleIntro,ost_mappings(a1)
		move.w	#tile_TitleSprites,ost_tile(a1)
		move.b	#4,ost_priority(a1)
		rts	

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0F - Title screen menu
; ----------------------------------------------------------------------------

TitleMenu:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_13612(pc,d0.w),d1
		jsr	off_13612(pc,d1.w)
		bra.w	DisplaySprite
; ===========================================================================
off_13612:	
		dc.w loc_13616-off_13612			; 0			
		dc.w loc_13644-off_13612			; 2
; ===========================================================================

loc_13616:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#screen_left+(screen_width/2)+8,ost_x_screen(a0)
		move.w	#screen_top+(screen_height/2)+92,ost_y_screen(a0)
		move.l	#Map_TitleMenu,ost_mappings(a0)
		move.w	#vram_start,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		andi.b	#1,(v_title_screen_option).w
		move.b	(v_title_screen_option).w,$1A(a0)

loc_13644:				
		moveq	#0,d2
		move.b	(v_title_screen_option).w,d2
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		btst	#0,d0
		beq.s	loc_13660
		subq.b	#1,d2
		bcc.s	loc_13660
		move.b	#2,d2

loc_13660:				
					
		btst	#1,d0
		beq.s	loc_13670
		addq.b	#1,d2
		cmpi.b	#3,d2
		bcs.s	loc_13670
		moveq	#0,d2

loc_13670:				
					
		move.b	d2,$1A(a0)
		move.b	d2,(v_title_screen_option).w
		andi.b	#3,d0
		beq.s	locret_13684
		moveq	#-$33,d0
		jsrto	PlaySound,JmpTo4_PlaySound

locret_13684:				
		rts	
; ===========================================================================
Ani_TitleIntro:	index offset(*)

		ptr Ani_TitleIntro_Sonic			; 0 			
		ptr Ani_TitleIntro_Tails			; 1
		ptr Ani_TitleIntro_FlashingStar			; 2
		ptr Ani_TitleIntro_FallingStar			; 3

Ani_TitleIntro_Sonic:	
		dc.b	1
		dc.b	id_Frame_IntroSonic_0
		dc.b	id_Frame_IntroSonic_1
		dc.b	id_Frame_IntroSonic_2
	if FixBugs=0
		; This appears to be a leftover prototype frame: it's a duplicate of
		; frame $12, except Sonic is missing his right arm. The old frame
		; being here in this animation script causes Sonic to appear with
		; both of his arms missing for a single frame.	
		dc.b	id_Frame_IntroSonic_BetaLeftover
	endc	
		dc.b	af2ndRoutine
		even
		
Ani_TitleIntro_Tails:	
		dc.b	1
		dc.b	id_Frame_IntroTails_0
		dc.b	id_Frame_IntroTails_1
		dc.b	id_Frame_IntroTails_2
		dc.b	id_Frame_IntroTails_3
		dc.b	id_Frame_IntroTails_4
		dc.b 	af2ndRoutine
		even

Ani_TitleIntro_FlashingStar:	
		dc.b	1
		dc.b	id_Frame_IntroStar_0
		dc.b	id_Frame_IntroStar_1
		dc.b	id_Frame_IntroStar_2
		dc.b	id_Frame_IntroStar_1
		dc.b	id_Frame_IntroStar_0
		dc.b	af2ndRoutine
		even

Ani_TitleIntro_FallingStar:	
		dc.b	3
		dc.b	id_Frame_IntroStar_0
		dc.b	id_Frame_IntroStar_3
		dc.b 	afEnd
		even

	include "mappings/sprite/Title Intro.asm"
	include "mappings/sprite/Title Menu.asm"
	
; ===========================================================================

	if RemoveJmpTos=0
JmpTo4_PlaySound:						
		jmp	PlaySound
JmpTo4_PlayMusic:						
		jmp	PlayMusic
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 34 - zone title cards (screen with red, yellow, and blue)
; ----------------------------------------------------------------------------

TitleCard:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Card_Index(pc,d0.w),d1
		jmp	Card_Index(pc,d1.w)
; ===========================================================================
Card_Index:	index offset(*),,2
		ptr Card_Load					; 0
		ptr Card_RightIn				; 2
		ptr Card_BottomIn				; 4
		ptr Card_LeftIn					; 6
		ptr Card_ZoneName				; 8
		ptr Card_Zone					; $A
		ptr Card_ActNumber				; $C
		ptr Card_LeftOut				; $E
		ptr Card_BottomOut				; $10
		ptr Card_RightOutInit				; $12
		ptr Card_RightOut				; $14
		ptr Card_WaitAndGoAway				; $16
		
		
		rsobj TitleCard,$30
ost_card_x_stop:		rs.w 1				; $30 ; on screen x position
ost_card_x_start:		rs.w 1				; $32 ; start & finish x position
ost_card_location:		rs.w 1				; $34 ; point up to which titlecard is drawn
ost_card_vram_dest:		rs.w 1				; $36 ; target of VRAM write
ost_card_vram_dest_2p:	rs.w 1					; $38 ; target of VRAM write
ost_card_split_point:	rs.w 1					; $3A ; point to split drawing for yellow and red portions
		rsset $3E
ost_card_leaveflag:		rs.w 1				; $3E ;  whether or not titlecard is leaving screen		
		rsobjend
	
; ===========================================================================

Card_Load:				
		lea	(a0),a1
		lea	TitleCard_Data(pc),a2			; load title card data array
		moveq	#((sizeof_TitleCard_Data)/$A)-1,d1	; each object's data is $A bytes

	.loadloop:				
		_move.b	#id_TitleCard,ost_id(a1)		; load title card object (this first object becomes the zone name after loading all the others)
		move.b	(a2)+,ost_primary_routine(a1)		; load data from the TitleCard_Data array
		move.l	#Map_Card,ost_mappings(a1)
		move.b	(a2)+,ost_frame(a1)	
		move.b	(a2)+,ost_displaywidth(a1)
		move.b	(a2)+,ost_anim_time(a1)
		move.w	(a2),ost_x_screen(a1)
		move.w	(a2)+,ost_card_x_start(a1)
		move.w	(a2)+,ost_card_x_stop(a1)
		move.w	(a2)+,ost_y_screen(a1)
		move.b	#render_abs,ost_render(a1)
		lea	sizeof_ost(a1),a1			; next ost slot
		dbf	d1,.loadloop				; repeat until all title card objects are loaded
		
		move.w	#$26,(v_ost_titlecard_bottom+ost_card_location).w

		clr.w	(v_fg_y_pos_vsram).w
		move.w	#$FF20,(v_fg_y_pos_vsram_p2).w
		clear_ram hscroll,hscroll_end
		
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; The following array is data used to populate the OSTs for each
; title card object. Each entry is $A bytes, and consists of:
; - the initial routine counter (byte)
; - the initial mapping frame (byte)
; - the width of the object (byte)
; - the number of frames before it appears on screen (byte)
; - the X position where it starts and where it will go back (word)
; - the X position to reach (word)
; - the Y position (word)
; ---------------------------------------------------------------------------

titlecardobjdata macro routine,frame,width,duration,xstart,xstop,y
		dc.b \routine,\frame,\width,\duration
		dc.w \xstart,\xstop,\y
		endm

TitleCard_Data:	
		titlecardobjdata	id_Card_ZoneName,   0, 							$80, $1B, screen_right+128, screen_left+160,	screen_top+56 ; zone name, frame is set later based on v_zone 
		titlecardobjdata	id_Card_Zone, 		id_Frame_Card_Zone, 		$40, $1C, screen_left-88, 	screen_left+200, 	screen_top+80 ; "ZONE"
		titlecardobjdata	id_Card_ActNumber, 	id_Frame_Card_Act1, 		$18, $1C, screen_left-24, 	screen_left+264, 	screen_top+80 ; act number
		titlecardobjdata	id_Card_RightIn,  	0, 							0,   0,   0,    			0,					0 ; blue background
		titlecardobjdata 	id_Card_BottomIn, 	id_Frame_Card_STH,			$48, 8,	  screen_right+232, screen_left+232, 	screen_top+160 ; bottom yellow part
		titlecardobjdata	id_Card_LeftIn, 	id_Frame_Card_RedTriangles,	8,	 $15, screen_left,  	screen_left+112, 	screen_top+112 ; left red part
		arraysize	TitleCard_Data
; ===========================================================================

;Obj34_Wait:
Card_Wait:								
		subq.b	#1,ost_anim_time(a0)			; deincrement timer
		bne.s	.timeleft				; if it's not 0, branch
		move.b	#1,ost_anim_time(a0)			; reset timer
		rts	
; ===========================================================================

	.timeleft:				
		addq.w	#4,sp					; don't run the code after the call to this routine
		rts	

; ===========================================================================
;Obj34_BackgroundIn:
Card_RightIn:				
		moveq	#$10,d0					; values used to calculate the VRAM destination
		moveq	#8,d1				
		tst.w	(f_two_player).w			; is it two player mode?
		sne	d6					; if so, set d6 to $FF, else set to 0
		beq.s	.not2P					; if not two-player mode, branch
		moveq	#$20,d0					; use these values to calculate the VRAM destination instead
		moveq	#7,d1

	.not2P:				
		move.w	ost_card_location(a0),d2
		cmp.w	d0,d2					; has background reached the target position?
		beq.s	.exit					; if it has, exit
		lsl.w	d1,d2						
		move.w	#vram_fg,d0
		add.w	d2,d0
		move.w	d0,ost_card_vram_dest(a0)		; set VRAM destination 
		tst.b	d6					; is it two-player mode?
		beq.s	.update_position			; if not, branch
		addi.w	#vram_fg_2p,d2
		move.w	d2,ost_card_vram_dest_2p(a0)		; set VRAM destination for player 2's half of screen

	.update_position:				
		addq.w	#1,ost_card_location(a0)

	.exit:				
		rts	
; ===========================================================================
;Obj34_BottomPartIn:
Card_BottomIn:				
		jsr	Card_Wait(pc)
		move.w	ost_card_location(a0),d0		; current position
		bmi.w	Card_Move				; branch if outside right of screen
		add.w	d0,d0
		move.w	#(sizeof_vram_row_64*$14)/2,d1		; Line 20 in 2P mode
		tst.w	(f_two_player).w			; is it two-player mode?
		sne	d6					; if so, set d6...
		bne.s	.not2P					; ...and branch 
		add.w	d1,d1					; Line 40 in 1P mode

	.not2P:				
		move.w	#vram_fg,d2
		add.w	d0,d2
		add.w	d1,d2
		move.w	d2,ost_card_vram_dest(a0)		; set VRAM destination
		tst.b	d6					; is it two-player mode?
		beq.s	.update_position			; if not, branch
		addi.w	#vram_fg_2p,d1
		add.w	d0,d1
		move.w	d1,ost_card_vram_dest_2p(a0)

	.update_position:				
		subq.w	#2,ost_card_location(a0)
		move.w	ost_card_location(a0),ost_card_split_point(a0)
		cmpi.w	#6,ost_card_location(a0)		; is card location 6?
		seq	ost_card_location(a0)			; if so, set to $FF, else set to 0
		bra.w	Card_Move
; ===========================================================================
;Obj34_LeftPartIn:
Card_LeftIn:				
		jsr	Card_Wait(pc)
		tst.w	ost_card_location(a0)			; current position
		bmi.w	Card_Move				; branch if outside left of screen
		move.w	#vram_fg,ost_card_vram_dest(a0)
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.s	.update_position			; if not, branch
		move.w	#vram_fg_2p,ost_card_vram_dest_2p(a0)

	.update_position:				
		addq.w	#2,ost_card_location(a0)
		move.w	ost_card_location(a0),ost_card_split_point(a0)
		cmpi.w	#$E,ost_card_location(a0)		; is card location $E?
		seq	ost_card_location(a0)			; if so, set to $FF, else set to 0
		bra.w	Card_Move
; ===========================================================================

Card_ZoneName:				
		jsr	Card_Wait(pc)
		move.b	(v_zone).w,ost_frame(a0)		; set mapping frame based on zone ID
		bra.s	Card_Move
; ===========================================================================

Card_Zone:				
		jsr	Card_Wait(pc)
		bra.s	Card_Move
; ===========================================================================

Card_ActNumber:				
		jsr	Card_Wait(pc)
		move.b	(v_zone).w,d0				; get current zone
		cmpi.b	#id_SCZ,d0				; is it SCZ?
		beq.s	BranchTo9_DeleteObject			; if so, delete this object since there is no act number
		cmpi.b	#id_WFZ,d0				; do the same if it is WFZ...
		beq.s	BranchTo9_DeleteObject
		cmpi.b	#id_DEZ,d0				; ...or DEZ
		beq.s	BranchTo9_DeleteObject
		move.b	(v_act).w,d1				; get act number
		addi.b	#id_Frame_Card_Act1,d1			; add $12 to make index for act number
		cmpi.b	#id_MTZ_2,d0				; is it MTZ act 3?
		bne.s	.set_act_num
		moveq	#id_Frame_Card_Act3,d1			; if so, use the "3" frame instead

	.set_act_num:				
		move.b	d1,ost_frame(a0)
		; continue straight into Card_Move

;Obj34_MoveTowardsTargetPosition:
Card_Move:							
		moveq	#$10,d0					; set to move 16px (direction depends on object)
		move.w	ost_x_screen(a0),d1
		cmp.w	ost_card_x_stop(a0),d1			; has item reached the target position?
		beq.s	.at_target				; if so, branch
		bhi.s	.beyond_target				; if it is beyond the target positon, branch
		neg.w	d0					; move in the other direction

	.beyond_target:				
		sub.w	d0,ost_x_screen(a0)				; move the item
		cmpi.w	#screen_right+64,ost_x_screen(a0)			; is is more than 64 pixels beyond right edge of screen?
		bhi.s	.no_display				; if so, branch	

	.at_target:				
		bra.w	DisplaySprite
; ===========================================================================

	.no_display:				
		rts	
; ===========================================================================

BranchTo9_DeleteObject:								
		bra.w	DeleteObject
; ===========================================================================

Card_LeftOut:				
		move.w	ost_card_location(a0),d0		; current location of card
		bpl.s	.onscreen				; branch if still on screen
		move.b	#id_Card_BottomOut,v_ost_titlecard_bottom-v_ost_titlecard_left+ost_primary_routine(a0) ; set bottom to move out
		clr.w	v_ost_titlecard_bottom-v_ost_titlecard_left+ost_card_location(a0) ; clear bottom's position
		bra.s	BranchTo9_DeleteObject			; delete card left object
; ===========================================================================

	.onscreen:				
		add.w	d0,d0
		move.w	#vram_fg,ost_card_vram_dest(a0)
		add.w	d0,ost_card_vram_dest(a0)		; set VRAM destination
		tst.w	(f_two_player).w			; is it two=player mode?
		beq.s	.not2P					; if not, branch 
		move.w	#vram_fg_2p,ost_card_vram_dest_2p(a0)
		add.w	d0,ost_card_vram_dest_2p(a0)

	.not2P:				
		subq.w	#4,ost_card_location(a0)		; move card to left
		cmpi.w	#-2,ost_card_location(a0)	
		bne.s	.is_right				; branch if right of target
		clr.w	ost_card_location(a0)

	.is_right:				
		bra.w	Card_MoveBack
; ===========================================================================

Card_BottomOut:				
		move.w	ost_card_location(a0),d0		; current location of card
		cmpi.w	#$28,d0				
		bne.s	.not_at_target				; branch if it has not reached target
		move.b	#id_Card_RightOutInit,v_ost_titlecard_background-v_ost_titlecard_bottom+ost_primary_routine(a0) ; set right to move out
		bra.s	BranchTo9_DeleteObject			; delete card bottom object
; ===========================================================================

	.not_at_target:				
		add.w	d0,d0
		move.w	#($80*$14)/2,d1				; Line 10 in 2P mode
		tst.w	(f_two_player).w			; is it two-player mode?
		sne	d6					; if so, set d6 to $FF, else set to 0
		bne.s	.not2P					; if not two-player mode, branch
		add.w	d1,d1					; Line 20 in 1P mode

	.not2P:				
		move.w	#vram_fg,d2
		add.w	d0,d2
		add.w	d1,d2
		move.w	d2,ost_card_vram_dest(a0)		; set VRAM destination
		tst.b	d6					; is it two-player mode?
		beq.s	.update_position			; if not, branch
		addi.w	#vram_fg_2p,d1
		add.w	d0,d1
		move.w	d1,ost_card_vram_dest_2p(a0)

	.update_position:				
		addq.w	#4,ost_card_location(a0)
		; continue straight into Card_MoveBack
		
Card_MoveBack:				
		moveq	#$20,d0					; move 32 pixels
		move.w	ost_x_screen(a0),d1			; current location of card
		cmp.w	ost_card_x_start(a0),d1			; has item reached the target position?
		beq.s	.no_display				; if so, exit
		bhi.s	.not_at_target				; if it hasn't reached target, branch
		neg.w	d0

	.not_at_target:				
		sub.w	d0,ost_x_screen(a0)			; move the item
		cmpi.w	#screen_right+64,ost_x_screen(a0)			; is is more than 64 pixels beyond right edge of screen?
		bhi.s	.no_display				; if so, branch
		bra.w	DisplaySprite
; ===========================================================================

	.no_display:							
		rts	
; ===========================================================================
;Obj34_BackgroundOutInit:
Card_RightOutInit:				
		pushr.l	a0
		pushr.l	d7
		bsr.w	DeformLayers
		popr	d7
		popr	a0
		addi_.b	#2,ost_primary_routine(a0)		; go to Card_RightOut next
		move.w	#$F0,ost_card_location(a0)

;Obj34_BackgroundOut:
Card_RightOut:				
		move.w	ost_card_location(a0),d0
		subi.w	#$20,d0
		cmpi.w	#-$30,d0
		beq.w	BranchTo9_DeleteObject
		move.w	d0,ost_card_location(a0)
		move.w	d0,ost_card_vram_dest(a0)
		rts	
; ===========================================================================
Card_WaitAndGoAway:				
		tst.w	ost_anim_time(a0)			; has timer hit 0?
		beq.s	.moveback				; if so, branch
		subq.w	#1,ost_anim_time(a0)			; deincrement timer
		bra.s	.display
; ===========================================================================

	.moveback:				
		moveq	#$20,d0					; move 32 pixels
		move.w	ost_x_screen(a0),d1		
		cmp.w	ost_card_x_start(a0),d1			; has item reached the finish position?	
		beq.s	Card_ChangeArt				; if so, branch		
		bhi.s	.beyond_target				; if item is beyond target, branch
		neg.w	d0					; move in the opposite direction

	.beyond_target:				
		sub.w	d0,ost_x_screen(a0)			; update position
		cmpi.w	#screen_right+64,ost_x_screen(a0)			; is is more than 64 pixels beyond right edge of screen?
		bhi.s	Card_ChangeArt				; if so, branch

	.display:				
		bra.w	DisplaySprite
; ===========================================================================

Card_ChangeArt:							
		cmpa.w	#v_ost_titlecard_zonename,a0		; is this the zone name object (the parent of all the titlecard objects)
		bne.s	.delete					; if not, branch
		moveq	#id_PLC_Water,d0			; load standard water graphics
		jsrto	LoadPLC,JmpTo3_AddPLC
		moveq	#0,d0
		move.b	(v_zone).w,d0
		move.b	Animal_PLCs(pc,d0.w),d0			; load the animal graphics for the current zone
		jsrto	LoadPLC,JmpTo3_AddPLC

	.delete:				
		bra.w	DeleteObject				; delete the title card object
; ===========================================================================
Animal_PLCs:	
		dc.b id_PLC_EHZAnimals				; 0 
		dc.b id_PLC_EHZAnimals				; 1
		dc.b id_PLC_EHZAnimals				; 2
		dc.b id_PLC_EHZAnimals				; 3
		dc.b id_PLC_MTZAnimals				; 4
		dc.b id_PLC_MTZAnimals				; 5
		dc.b id_PLC_WFZAnimals				; 6
		dc.b id_PLC_HTZAnimals				; 7
		dc.b id_PLC_HPZAnimals				; 8
		dc.b id_PLC_HPZAnimals				; 9
		dc.b id_PLC_OOZAnimals				; $A
		dc.b id_PLC_MCZAnimals				; $B
		dc.b id_PLC_CNZAnimals				; $C
		dc.b id_PLC_CPZAnimals				; $D
		dc.b id_PLC_DEZAnimals				; $E
		dc.b id_PLC_ARZAnimals				; $F
		dc.b id_PLC_SCZAnimals				; $10
		zonewarning Animal_PLCs,1
		
		dc.b id_PLC_SCZAnimals				; non-existent slot $11
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 39 - Game/Time Over text
; ----------------------------------------------------------------------------

GameOverCard:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Over_Index(pc,d0.w),d1
		jmp	Over_Index(pc,d1.w)
; ===========================================================================
Over_Index:	index offset(*),,2
		ptr Over_ChkPLC					; 0 		
		ptr Over_Move					; 2
		ptr Over_Wait					; 4
; ===========================================================================

Over_ChkPLC:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_13F90
		rts	
; ===========================================================================

loc_13F90:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#screen_left-48,ost_x_screen(a0)
		btst	#0,ost_frame(a0)
		beq.s	loc_13FA8
		move.w	#screen_right+48,ost_x_screen(a0)

loc_13FA8:				
		move.w	#screen_top+112,ost_y_screen(a0)
		move.l	#Map_Over,ost_mappings(a0)
		move.w	#tile_Nem_Game_Over+tile_hi,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_abs,ost_render(a0)
		move.b	#0,$18(a0)

Over_Move:				
		moveq	#$10,d1
		cmpi.w	#screen_left+160,ost_x_screen(a0)
		beq.s	loc_13FE2
		bcs.s	loc_13FDA
		neg.w	d1

loc_13FDA:				
		add.w	d1,ost_x_screen(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_13FE2:				
		move.w	#$2D0,$1E(a0)
		addq.b	#2,ost_primary_routine(a0)
	if FixBugs
		; The GAME OVER/TIME OVER text disappears for a single frame once it 
		; reaches its final position. This is because it forgets to queue itself
		; for display here.
		bra.w	DisplaySprite
	else
		rts
	endif
; ===========================================================================

Over_Wait:				
		btst	#0,$1A(a0)
		bne.w	loc_14082
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#$70,d0
		bne.s	loc_14014
		tst.w	$1E(a0)
		beq.s	loc_14014
		subq.w	#1,$1E(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_14014:				
					
		tst.b	(f_time_over).w
		bne.s	loc_14034
		tst.b	(f_time_over_p2).w
		bne.s	loc_14034
		move.b	#$14,(v_gamemode).w
		tst.b	(v_continues).w
		bne.s	loc_1403E
		move.b	#0,(v_gamemode).w
		bra.s	loc_1403E
; ===========================================================================

loc_14034:				
					
		clr.l	(v_time_lampcopy).w
		move.w	#1,(f_restart).w

loc_1403E:				
					
		tst.w	(f_two_player).w
		beq.s	loc_14082
		move.w	#0,(f_restart).w
		move.b	#$18,(v_gamemode).w
		move.w	#0,(v_results_screen_2p).w
		tst.b	(f_time_over).w
		bne.s	loc_14082
		tst.b	(f_time_over_p2).w
		bne.s	loc_14082
		move.w	#1,(v_game_over_2p).w
		move.w	#1,(v_results_screen_2p).w
		jsrto	sub_8476,JmpTo_sub_8476
		move.w	#-1,(a4)
		tst.b	$3F(a0)
		beq.s	loc_1407E
		addq.w	#1,a4

loc_1407E:				
		move.b	#-2,(a4)

loc_14082:				
					
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3A - End of level results screen
; ----------------------------------------------------------------------------

GotThroughCard:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_14094(pc,d0.w),d1
		jmp	off_14094(pc,d1.w)
; ===========================================================================
off_14094:	
		dc.w loc_140AC-off_14094			; 0 		
		dc.w loc_14102-off_14094			; 1
		dc.w loc_14142-off_14094			; 2
		dc.w loc_14146-off_14094			; 3
		dc.w loc_14168-off_14094			; 4
		dc.w loc_1419C-off_14094			; 5
		dc.w loc_141AA-off_14094			; 6
		dc.w loc_1419C-off_14094			; 7
		dc.w loc_14270-off_14094			; 8
		dc.w loc_142B0-off_14094			; 9
		dc.w loc_142CC-off_14094			; 10
		dc.w loc_1413A-off_14094			; 11
; ===========================================================================

loc_140AC:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_140B4
		rts	
; ===========================================================================

loc_140B4:				
		movea.l	a0,a1
		lea	GotThroughCard_Data(pc),a2
		moveq	#7,d1

loc_140BC:				
					
		_move.b	ost_id(a1),d0
		beq.s	loc_140CE
		cmpi.b	#$3A,d0
		beq.s	loc_140CE
		lea	$40(a1),a1
		bra.s	loc_140BC
; ===========================================================================

loc_140CE:									
		_move.b	#id_GotThroughCard,ost_id(a1)
		move.w	(a2)+,ost_x_screen(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,ost_y_screen(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$1A(a1)
		move.l	#Map_GotThrough,ost_mappings(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#render_abs,ost_render(a1)
		lea	$40(a1),a1
		dbf	d1,loc_140BC

loc_14102:				
		moveq	#0,d0
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_14118
		addq.w	#1,d0
		btst	#console_region_bit,(v_console_region).w
		beq.s	loc_14118
		addq.w	#1,d0

loc_14118:				
					
		move.b	d0,$1A(a0)
		bsr.w	Card_Move
		move.w	ost_x_screen(a0),d0
		cmp.w	$30(a0),d0
		bne.w	locret_14138
		move.b	#$A,ost_primary_routine(a0)
		move.w	#$B4,$1E(a0)

locret_14138:				
		rts	
; ===========================================================================

loc_1413A:				
		tst.w	(v_perfect_rings_left).w
		bne.w	DeleteObject

loc_14142:				
		bra.w	Card_Move
; ===========================================================================

loc_14146:				
		move.b	(v_zone).w,d0
		cmpi.b	#$10,d0
		beq.s	loc_1415E
		cmpi.b	#6,d0
		beq.s	loc_1415E
		cmpi.b	#$E,d0
		bne.w	Card_Move

loc_1415E:				
					
		move.b	#5,$1A(a0)
		bra.w	Card_Move
; ===========================================================================

loc_14168:				
		move.b	(v_zone).w,d0
		cmpi.b	#$10,d0
		beq.w	BranchTo9_DeleteObject
		cmpi.b	#6,d0
		beq.w	BranchTo9_DeleteObject
		cmpi.b	#$E,d0
		beq.w	BranchTo9_DeleteObject
		cmpi.b	#5,d0
		bne.s	loc_1418E
		moveq	#8,d0
		bra.s	loc_14194
; ===========================================================================

loc_1418E:				
		move.b	(v_act).w,d0
		addq.b	#6,d0

loc_14194:				
		move.b	d0,$1A(a0)
		bra.w	Card_Move
; ===========================================================================

loc_1419C:				
		subq.w	#1,$1E(a0)
		bne.s	loc_141A6
		addq.b	#2,ost_primary_routine(a0)

loc_141A6:				
		bra.w	DisplaySprite
; ===========================================================================

loc_141AA:				
		bsr.w	DisplaySprite
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		tst.w	(v_bonus_count_1).w
		beq.s	loc_141C6
		addi.w	#$A,d0
		subi.w	#$A,(v_bonus_count_1).w

loc_141C6:				
		tst.w	(v_bonus_count_2).w
		beq.s	loc_141D6
		addi.w	#$A,d0
		subi.w	#$A,(v_bonus_count_2).w

loc_141D6:				
		tst.w	(v_bonus_count_3).w
		beq.s	loc_141E6
		addi.w	#$A,d0
		subi.w	#$A,(v_bonus_count_3).w

loc_141E6:				
		add.w	d0,(v_total_bonus_countdown).w
		tst.w	d0
		bne.s	loc_14256
		move.w	#$C5,d0	
		jsr	PlaySound
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$B4,$1E(a0)
		cmpi.w	#$3E8,(v_total_bonus_countdown).w
		bcs.s	locret_14254
		move.w	#$12C,$1E(a0)
		lea	$40(a0),a1

loc_14214:				
		_tst.b	ost_id(a1)
		beq.s	loc_14220
		lea	$40(a1),a1
		bra.s	loc_14214
; ===========================================================================

loc_14220:				
		_move.b	#id_GotThroughCard,ost_id(a1)
		move.b	#$12,$24(a1)
		move.w	#screen_left+264,ost_x_screen(a1)
		move.w	#screen_top+152,ost_y_screen(a1)
		move.l	#Map_GotThrough,ost_mappings(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#render_abs,ost_render(a1)
		move.w	#$3C,$1E(a1)
		addq.b	#1,(v_continues).w

locret_14254:				
					
		rts	
; ===========================================================================

loc_14256:				
		jsr	AddPoints
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#3,d0
		bne.s	locret_14254
		move.w	#$CD,d0	
		jmp	PlaySound
; ===========================================================================

loc_14270:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.b	(v_act).w,d0
		add.w	d0,d0
		lea	LevelOrder(pc),a1
		tst.w	(f_two_player).w
		beq.s	loc_1428C
		lea	LevelOrder_2P(pc),a1

loc_1428C:				
		move.w	(a1,d0.w),d0				; get id of next level
		tst.w	d0	
		bpl.s	loc_1429C				; branch if it's not the terminator ($FFFF)
		move.b	#id_Sega,(v_gamemode).w			; go to Sega screen
		rts	
; ===========================================================================

loc_1429C:				
		move.w	d0,(v_zone).w
		clr.b	(v_last_lamppost).w
		clr.b	(v_last_lamppost_p2).w
		move.w	#1,(f_restart).w
		rts	
; ===========================================================================

loc_142B0:				
		tst.w	$1E(a0)
		beq.s	loc_142BC
		subq.w	#1,$1E(a0)
		rts	
; ===========================================================================

loc_142BC:				
		addi_.b	#2,ost_primary_routine(a0)
		move.w	#sfx_ContinueJingle,d0	
		jsr	PlaySound

loc_142CC:				
		subq.w	#1,$1E(a0)
		bpl.s	loc_142E2
		move.w	#$13,$1E(a0)
		addq.b	#1,$1B(a0)
		andi.b	#1,$1B(a0)

loc_142E2:				
		moveq	#$C,d0
		add.b	$1B(a0),d0
		move.b	d0,$1A(a0)
		btst	#4,(v_frame_counter_low).w
		bne.w	DisplaySprite
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Level	order arrays

; Lists which levels which are loaded after the current level
; ---------------------------------------------------------------------------
LevelOrder:
		; Emerald Hill Zone
		dc.w id_EHZ_act2				; Act 1
		dc.w id_CPZ_act1				; Act 2
		
		; Level 1 (unused)
		dc.w id_EHZ_act1
		dc.w id_EHZ_act1
		
		; Wood Zone (unused)
		dc.w id_WZ_act2					; Act 1
		dc.w id_MTZ_act1				; Act 2
		
		; Level 3 (unused)
		dc.w id_EHZ_act1
		dc.w id_EHZ_act1
		
		; Metropolis Zone Acts 1 & 2
		dc.w id_MTZ_act2				; Act 1
		dc.w id_MTZ_act3				; Act 2
		
		; Metropolis Zone Act 3
		dc.w id_SCZ_act1				; Act 3
		dc.w id_EHZ_act1				; unused
		
		; Wing Fortress Zone
		dc.w id_DEZ_act1				; Act 1
		dc.w id_EHZ_act1				; unused
		
		; Hill Top Zone
		dc.w id_HTZ_act2				; Act 1
		dc.w id_MCZ_act1				; Act 2
		
		; Hidden Palace Zone (unused)
		dc.w id_HPZ_act2				; Act 1
		dc.w id_OOZ_act1				; Act 2
		
		; Level 9 (unused)
		dc.w id_EHZ_act1
		dc.w id_EHZ_act1
		
		; Oil Ocean Zone
		dc.w id_OOZ_act2				; Act 1
		dc.w id_MTZ_act1				; Act 2
		
		; Mystic Cave Zone
		dc.w id_MCZ_act2				; Act 1
		dc.w id_OOZ_act1				; Act 2
		
		; Casino Night Zone
		dc.w id_CNZ_act2				; Act 1
		dc.w id_HTZ_act1				; Act 2

		; Chemical Plant Zone
		dc.w id_CPZ_act2				; Act 1
		dc.w id_ARZ_act1				; Act 2
		
		; Death Egg Zone (unused, as no results screen is loaded on that level)
		dc.w $FFFF					; Act 1
		dc.w id_EHZ_act1				; unused
		
		; Aquatic Ruin Zone
		dc.w id_ARZ_act2				; Act 1
		dc.w id_CNZ_act1				; Act 2
		
		dc.w id_WFZ_act1				; Act 1
		dc.w id_EHZ_act1				; unused
		zonewarning LevelOrder,4

LevelOrder_2P:	
		; Emerald Hill Zone
		dc.w id_EHZ_act2				; Act 1
		dc.w id_CNZ_act1				; Act 2
		
		; Level 1 (unused)
		dc.w id_EHZ_act1
		dc.w id_EHZ_act1
		
		; Wood Zone (unused)
		dc.w id_WZ_act2					; Act 1
		dc.w id_MTZ_act1				; Act 2
		
		; Level 3 (unused)
		dc.w id_EHZ_act1
		dc.w id_EHZ_act1
		
		; Metropolis Zone Acts 1 & 2
		dc.w id_MTZ_act2				; Act 1
		dc.w id_MTZ_act3				; Act 2
		
		; Metropolis Zone Act 3
		dc.w id_SCZ_act1				; Act 3
		dc.w id_EHZ_act1				; unused
		
		; Wing Fortress Zone
		dc.w id_DEZ_act1				; Act 1
		dc.w id_EHZ_act1				; unused
		
		; Hill Top Zone
		dc.w id_HTZ_act2				; Act 1
		dc.w id_MCZ_act1				; Act 2
		
		; Hidden Palace Zone (unused)
		dc.w id_HPZ_act2				; Act 1
		dc.w id_OOZ_act1				; Act 2
		
		; Level 9 (unused)
		dc.w id_EHZ_act1
		dc.w id_EHZ_act1
		
		; Oil Ocean Zone
		dc.w id_OOZ_act2				; Act 1
		dc.w id_MTZ_act1				; Act 2
		
		; Mystic Cave Zone
		dc.w id_MCZ_act2				; Act 1
		dc.w $FFFF					; Act 2
		
		; Casino Night Zone
		dc.w id_CNZ_act2				; Act 1
		dc.w id_MCZ_act1				; Act 2

		; Chemical Plant Zone
		dc.w id_CPZ_act2				; Act 1
		dc.w id_ARZ_act1				; Act 2
		
		; Death Egg Zone
		dc.w $FFFF					; Act 1, sends game to Sega screen
		dc.w id_EHZ_act1				; unused
		
		; Aquatic Ruin Zone
		dc.w id_ARZ_act2				; Act 1
		dc.w id_CNZ_act1				; Act 2
		
		dc.w id_WFZ_act1				; Act 1
		dc.w id_EHZ_act1				; unused
		zonewarning LevelOrder_2P,4
		
; ===========================================================================

GotThroughCard_Data:	

gotthrough_data: macro startx,targetx,y,routine,frame
		dc.w	\startx,\targetx,\y
		dc.b	\routine,\frame
   		endm
    
		gotthrough_data  screen_left-96,   screen_left+160,  screen_top+56,    2,  0
		gotthrough_data  screen_right+64,  screen_left+128,  screen_top+74,    4,  3
		gotthrough_data  screen_right+128, screen_left+192,  screen_top+74,    6,  4
		gotthrough_data  screen_right+184, screen_left+248,  screen_top+62,    8,  6
		gotthrough_data  screen_right+400, screen_left+160,  screen_top+160,   4,  9
		gotthrough_data  screen_right+352, screen_left+160,  screen_top+112,   4, $A
		gotthrough_data  screen_right+368, screen_left+160,  screen_top+128,   4, $B
		gotthrough_data  screen_right+384, screen_left+160,  screen_top+144, $16, $E
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6F - End of special stage results screen
; ----------------------------------------------------------------------------

ResultsSpecial:				
		moveq	#0,d0
		moveq	#0,d6
		move.b	ost_primary_routine(a0),d0
		move.w	off_143D0(pc,d0.w),d1
		jmp	off_143D0(pc,d1.w)
; ===========================================================================
off_143D0:	
		dc.w loc_14406-off_143D0			; 0 			
		dc.w loc_14450-off_143D0			; 1
		dc.w loc_14484-off_143D0			; 2
		dc.w loc_144C2-off_143D0			; 3
		dc.w loc_144C0-off_143D0			; 4
		dc.w loc_144BE-off_143D0			; 5
		dc.w loc_144BC-off_143D0			; 6
		dc.w loc_144BA-off_143D0			; 7
		dc.w loc_144B8-off_143D0			; 8
		dc.w loc_144B6-off_143D0			; 9
		dc.w loc_14564-off_143D0			; 10
		dc.w loc_14500-off_143D0			; 11
		dc.w loc_144DC-off_143D0			; 12
		dc.w loc_14568-off_143D0			; 13
		dc.w loc_14572-off_143D0			; 14
		dc.w loc_14580-off_143D0			; 15
		dc.w loc_14572-off_143D0			; 16
		dc.w loc_1461C-off_143D0			; 17
		dc.w loc_14572-off_143D0			; 18
		dc.w loc_14572-off_143D0			; 19
		dc.w loc_14626-off_143D0			; 20
		dc.w loc_14692-off_143D0			; 21
		dc.w loc_14572-off_143D0			; 22
		dc.w loc_1461C-off_143D0			; 23
		dc.w Obj6F_InitAndMoveSuperMsg-off_143D0	; 24
		dc.w loc_14714-off_143D0			; 25
		dc.w loc_14736-off_143D0			; 26
; ===========================================================================

loc_14406:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_1440E
		rts	
; ===========================================================================

loc_1440E:				
		movea.l	a0,a1
		lea	byte_14752(pc),a2
		moveq	#$C,d1

loc_14416:				
		_move.b	ost_id(a0),ost_id(a1)
		move.w	(a2),ost_x_screen(a1)
		move.w	(a2)+,$32(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,ost_y_screen(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$1A(a1)
		move.l	#Map_SSR,ost_mappings(a1)
		move.b	#$78,$19(a1)
		move.b	#render_abs,ost_render(a1)
		lea	$40(a1),a1
		dbf	d1,loc_14416

loc_14450:				
		tst.b	(f_got_emerald).w
		beq.s	loc_1445C
		move.b	#4,$1A(a0)

loc_1445C:				
		cmpi.b	#7,(v_emeralds).w
		bne.s	loc_1446A
		move.b	#$19,$1A(a0)

loc_1446A:				
		move.w	$30(a0),d0
		cmp.w	ost_x_screen(a0),d0
		bne.s	loc_14480
		move.b	#$1C,ost_primary_routine(a0)
		move.w	#$B4,$1E(a0)

loc_14480:				
		bra.w	Card_Move
; ===========================================================================

loc_14484:				
		cmpi.b	#7,(v_emeralds).w
		bne.s	loc_14490
		moveq	#$16,d0
		bra.s	loc_1449A
; ===========================================================================

loc_14490:				
		tst.b	(f_got_emerald).w
		beq.w	DeleteObject
		moveq	#1,d0

loc_1449A:				
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_144AE
		addq.w	#1,d0
		btst	#console_region_bit,(v_console_region).w
		beq.s	loc_144AE
		addq.w	#1,d0

loc_144AE:				
					
		move.b	d0,$1A(a0)
		bra.w	Card_Move
; ===========================================================================

loc_144B6:				
		addq.w	#1,d6

loc_144B8:				
		addq.w	#1,d6

loc_144BA:				
		addq.w	#1,d6

loc_144BC:				
		addq.w	#1,d6

loc_144BE:				
		addq.w	#1,d6

loc_144C0:				
		addq.w	#1,d6

loc_144C2:				
		lea	(v_emerald_list).w,a1
		tst.b	(a1,d6.w)
		beq.w	DeleteObject
		btst	#0,(v_vblank_counter_byte).w
		beq.s	locret_144DA
		bsr.w	DisplaySprite

locret_144DA:				
		rts	
; ===========================================================================

loc_144DC:				
		tst.w	(v_player_mode).w
		bne.w	DeleteObject
		cmpi.b	#$26,($FFFFB824).w
		beq.w	DeleteObject
		moveq	#$E,d0
		btst	#console_region_bit,(v_console_region).w
		beq.s	loc_144FA
		addq.w	#1,d0

loc_144FA:				
		lea	(v_bonus_count_2).w,a1
		bra.s	loc_1455A
; ===========================================================================

loc_14500:				
		cmpi.b	#$26,($FFFFB824).w
		bne.s	loc_14532
		move.w	#$1388,(v_bonus_count_1).w
		move.b	#$2A,ost_primary_routine(a0)
		move.w	#screen_top+160,ost_y_screen(a0)
		st.b	(f_pass_bonus_update).w
		move.w	#$CF,d0	
		jsr	PlaySound
		move.w	#$5A,($FFFFB81E).w
		bra.w	loc_14692
; ===========================================================================

loc_14532:				
		move.w	(v_player_mode).w,d0
		beq.s	loc_14554
		move.w	#screen_top+160,ost_y_screen(a0)
		subq.w	#1,d0
		beq.s	loc_14554
		moveq	#$E,d0
		btst	#console_region_bit,(v_console_region).w
		beq.s	loc_1454E
		addq.w	#1,d0

loc_1454E:				
		lea	(v_bonus_count_2).w,a1
		bra.s	loc_1455A
; ===========================================================================

loc_14554:				
					
		moveq	#$D,d0
		lea	(v_bonus_count_1).w,a1

loc_1455A:				
					
		tst.w	(a1)
		bne.s	loc_14560
		addq.w	#5,d0

loc_14560:				
		move.b	d0,$1A(a0)

loc_14564:						
		bra.w	Card_Move
; ===========================================================================

loc_14568:				
		tst.b	(f_got_emerald).w
		beq.w	DeleteObject
		bra.s	loc_14564
; ===========================================================================

loc_14572:				
		subq.w	#1,$1E(a0)
		bne.s	loc_1457C
		addq.b	#2,ost_primary_routine(a0)

loc_1457C:				
		bra.w	DisplaySprite
; ===========================================================================

loc_14580:				
		bsr.w	DisplaySprite
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		tst.w	(v_bonus_count_1).w
		beq.s	loc_1459A
		addi.w	#$A,d0
		subq.w	#1,(v_bonus_count_1).w

loc_1459A:				
		tst.w	(v_bonus_count_2).w
		beq.s	loc_145A8
		addi.w	#$A,d0
		subq.w	#1,(v_bonus_count_2).w

loc_145A8:				
		tst.w	(v_total_bonus_countdown).w
		beq.s	loc_145B8
		addi.w	#$A,d0
		subi.w	#$A,(v_total_bonus_countdown).w

loc_145B8:				
		tst.w	d0
		bne.s	loc_14602
		move.w	#$C5,d0	
		jsr	PlaySound
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$78,$1E(a0)
		tst.w	(f_ss_perfect).w
		bne.s	loc_145F4
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	locret_14600
		tst.b	(f_got_emerald).w
		beq.s	locret_14600
		cmpi.b	#7,(v_emeralds).w
		bne.s	locret_14600
		move.b	#$30,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_145F4:				
		move.b	#$24,ost_primary_routine(a0)
		move.w	#$5A,$1E(a0)

locret_14600:				
					
		rts	
; ===========================================================================

loc_14602:				
		jsr	AddPoints
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#3,d0
		bne.s	locret_14600
		move.w	#$CD,d0	
		jmp	PlaySound
; ===========================================================================

loc_1461C:				
		move.w	#1,(f_restart).w
		bra.w	DisplaySprite
; ===========================================================================

loc_14626:				
		bsr.w	DisplaySprite
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		tst.w	(v_bonus_count_1).w
		beq.s	loc_14642
		addi.w	#$14,d0
		subi.w	#$14,(v_bonus_count_1).w

loc_14642:				
		tst.w	d0
		beq.s	loc_14660
		jsr	AddPoints
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#3,d0
		bne.s	locret_14690
		move.w	#$CD,d0	
		jmp	PlaySound
; ===========================================================================

loc_14660:				
		move.w	#$C5,d0	
		jsr	PlaySound
		addq.b	#4,ost_primary_routine(a0)
		move.w	#$78,$1E(a0)
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	locret_14690
		tst.b	(f_got_emerald).w
		beq.s	locret_14690
		cmpi.b	#7,(v_emeralds).w
		bne.s	locret_14690
		move.b	#$30,ost_primary_routine(a0)

locret_14690:				
					
		rts	
; ===========================================================================

loc_14692:				
					
		moveq	#$11,d0
		btst	#3,(v_vblank_counter_byte).w
		beq.s	loc_1469E
		moveq	#$15,d0

loc_1469E:				
		move.b	d0,$1A(a0)
		bra.w	DisplaySprite
; ===========================================================================

Obj6F_InitAndMoveSuperMsg:				
		move.b	#$32,$64(a0)
		move.w	ost_x_pos(a0),d0
		cmp.w	$32(a0),d0
		bne.s	loc_14714
		move.b	#$14,sizeof_ost+ost_primary_routine(a0)
		subq.w	#8,sizeof_ost+ost_y_screen(a0)
		move.b	#$1A,sizeof_ost+ost_frame(a0)
		move.b	#$34,ost_primary_routine(a0)
		subq.w	#8,ost_y_screen(a0)
		move.b	#$1B,$1A(a0)
		lea	($FFFFBB40).w,a1
		_move.b	ost_id(a0),ost_id(a1)
		clr.w	ost_x_screen(a1)
		move.w	#$120,$30(a1)
		move.w	#screen_top+52,ost_y_screen(a1)
		move.b	#$14,$24(a1)
		move.b	#$1C,$1A(a1)
		move.l	#Map_SSR,ost_mappings(a1)
		move.b	#$78,$19(a1)
		move.b	#render_abs,ost_render(a1)
		bra.w	DisplaySprite
; ===========================================================================

loc_14714:								
		moveq	#$20,d0
		move.w	ost_x_pos(a0),d1
		cmp.w	$32(a0),d1
		beq.s	loc_14730
		bhi.s	loc_14724
		neg.w	d0

loc_14724:				
		sub.w	d0,ost_x_pos(a0)
		cmpi.w	#$200,ost_x_pos(a0)
		bhi.s	locret_14734

loc_14730:				
		bra.w	DisplaySprite
; ===========================================================================

locret_14734:				
		rts	
; ===========================================================================

loc_14736:				
		move.w	ost_x_pos(a0),d0
		cmp.w	$30(a0),d0
		bne.w	Card_Move
		move.w	#$B4,$1E(a0)
		move.b	#$20,ost_primary_routine(a0)
		bra.w	DisplaySprite
; ===========================================================================
byte_14752:
		gotthrough_data  screen_right+128, 	screen_left+160,	screen_top+42,   2,   0	; "Special Stage"
		gotthrough_data  0, 				screen_left+160,	screen_top+24,   4,   1	; "Sonic got a"
		gotthrough_data  screen_left+152,   0,  				screen_top+68,   6,   5	; Emerald 0
		gotthrough_data  screen_left+176,   0,  				screen_top+80,   8,   6	; Emerald 1
		gotthrough_data  screen_left+176,	0,					screen_top+104,  $A,   7	; Emerald 2
		gotthrough_data  screen_left+152,   0,					screen_top+116,  $C,   8	; Emerald 3
		gotthrough_data  screen_left+128,   0,					screen_top+104,  $E,   9	; Emerald 4
		gotthrough_data  screen_left+128,	0,					screen_top+80, 	$10,  $A	; Emerald 5
		gotthrough_data  screen_left+152,   0,  				screen_top+92,	$12,  $B	; Emerald 6
		gotthrough_data  screen_right+368, 	screen_left+160,	screen_top+136, $14,  $C	; Score
		gotthrough_data  screen_right+384, 	screen_left+160,	screen_top+152, $16,  $D	; Sonic Rings
		gotthrough_data  screen_right+400, 	screen_left+160,	screen_top+168, $18,  $E	; Miles Rings
		gotthrough_data  screen_right+416, 	screen_left+160,	screen_top+184, $1A, $10	; Gems Bonus

; ===========================================================================

		include	"mappings/sprite/Title Cards.asm"
		include "mappings/sprite/Game Over & Time Over.asm"
		include	"mappings/sprite/Got Through Card.asm"
		include	"mappings/sprite/Special Stage Results.asm"
		
; ===========================================================================

DrawLevelTitleCard:				
		lea	(vdp_data_port).l,a6
		tst.w	($FFFFB0BE).w
		bne.w	loc_15670
		moveq	#$3F,d5

loc_15594:
		move.l	#-$7A257A26,d6
		tst.w	(f_two_player).w
		beq.s	loc_155A8
		moveq	#$1F,d5
		move.l	#-$7D127D13,d6

loc_155A8:				
		lea	($FFFFB176).w,a0
		moveq	#1,d7

loc_155AE:				
		move.w	(a0)+,d0
		beq.s	loc_155C6
		clr.w	-2(a0)
		jsr	sub_15792(pc)
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		move.w	d5,d4

loc_155C0:				
		move.l	d6,(a6)
		dbf	d4,loc_155C0

loc_155C6:				
		dbf	d7,loc_155AE
		moveq	#$26,d1
		sub.w	($FFFFB1BA).w,d1
		lsr.w	#1,d1
		subq.w	#1,d1
		moveq	#7,d5
		move.l	#-$5A235A24,d6

loc_155DC:
		tst.w	(f_two_player).w
		beq.s	loc_155EA
		moveq	#3,d5
		move.l	#-$5D115D12,d6

loc_155EA:				
		lea	($FFFFB1B6).w,a0
		moveq	#1,d7

loc_155F0:				
		move.w	(a0)+,d0
		beq.s	loc_15614
		clr.w	-2(a0)
		jsr	sub_15792(pc)
		move.w	d5,d4

loc_155FE:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		move.w	d1,d3

loc_15604:				
		move.l	d6,(a6)
		dbf	d3,loc_15604
		addi.l	#$800000,d0
		dbf	d4,loc_155FE

loc_15614:				
		dbf	d7,loc_155F0
		move.w	($FFFFB1FA).w,d1
		subq.w	#1,d1
		moveq	#$D,d5
		move.l	#-$7A277A28,d6
		tst.w	(f_two_player).w
		beq.s	loc_15634
		moveq	#6,d5
		move.l	#-$7D137D14,d6

loc_15634:				
		lea	($FFFFB1F6).w,a0
		moveq	#1,d7
		move.w	#-$7080,vdp_control_port-vdp_data_port(a6)

loc_15640:				
		move.w	(a0)+,d0
		beq.s	loc_15664
		clr.w	-2(a0)
		jsr	sub_15792(pc)
		move.w	d1,d4

loc_1564E:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		move.w	d5,d3

loc_15654:				
		move.l	d6,(a6)
		dbf	d3,loc_15654
		addi.l	#$20000,d0
		dbf	d4,loc_1564E

loc_15664:				
		dbf	d7,loc_15640
		move.w	#-$70FE,vdp_control_port-vdp_data_port(a6)
		rts	
; ===========================================================================

loc_15670:				
		moveq	#9,d3
		moveq	#3,d4
		move.l	#-$7A257A26,d5
		move.l	#-$5A235A24,d6
		tst.w	(f_two_player).w
		beq.s	loc_15696
		moveq	#4,d3
		moveq	#1,d4
		move.l	#-$7D127D13,d5
		move.l	#-$5D115D12,d6

loc_15696:				
		lea	($FFFFB1F6).w,a0
		moveq	#1,d7
		move.w	#-$7080,vdp_control_port-vdp_data_port(a6)

loc_156A2:				
		move.w	(a0)+,d0
		beq.s	loc_156CE
		clr.w	-2(a0)
		jsr	sub_15792(pc)
		moveq	#3,d2

loc_156B0:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		move.w	d3,d1

loc_156B6:				
		move.l	d5,(a6)
		dbf	d1,loc_156B6
		move.w	d4,d1

loc_156BE:				
		move.l	d6,(a6)
		dbf	d1,loc_156BE
		addi.l	#$20000,d0
		dbf	d2,loc_156B0

loc_156CE:				
		dbf	d7,loc_156A2
		move.w	#-$70FE,vdp_control_port-vdp_data_port(a6)
		moveq	#7,d5
		move.l	#-$7A257A26,d6
		tst.w	(f_two_player).w
		beq.s	loc_156EE
		moveq	#3,d5
		move.l	#-$7D127D13,d6

loc_156EE:				
		lea	($FFFFB1B6).w,a0
		moveq	#1,d7

loc_156F4:				
		move.w	(a0)+,d0
		beq.s	loc_15714
		clr.w	-2(a0)
		jsr	sub_15792(pc)
		move.w	d5,d4

loc_15702:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		move.l	d6,(a6)
		move.l	d6,(a6)
		addi.l	#$80<<16,d0
		dbf	d4,loc_15702

loc_15714:				
		dbf	d7,loc_156F4
		move.w	($FFFFB176).w,d4
		beq.s	loc_1578C
		lea	vdp_control_port-vdp_data_port(a6),a5
		tst.w	(f_two_player).w
		beq.s	loc_15758
		lea	(v_camera_x_pos_p2).w,a3
		lea	(v_level_layout).w,a4
		;move.w	#$6000,d2
		vdp_comm.w	move,vram_fg_2p,vram,write,d2,>>16,d0
		moveq	#1,d6

loc_15736:				
		movem.l	d4-d6,-(sp)
		moveq	#-$10,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P2
		move.w	d1,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_15736

loc_15758:				
		lea	(v_camera_x_pos).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$4000,d2
		move.w	($FFFFB176).w,d4
		moveq	#1,d6

loc_1576A:				
		movem.l	d4-d6,-(sp)
		moveq	#-$10,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P1
		move.w	d1,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_1576A

loc_1578C:				
		clr.w	($FFFFB176).w
		rts	

; ===========================================================================


sub_15792:				
					
		andi.l	#$FFFF,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		rts	

; ===========================================================================

LoadTitleCardSS:				
		movem.l	d0/a0,-(sp)
		bsr.s	sub_157B0
		movem.l	(sp)+,d0/a0
		bra.s	loc_157EC

; ===========================================================================


sub_157B0:							
		vdp_comm.l	move,vram_TitleCard,vram,write,(vdp_control_port).l
		lea	(Nem_TitleCard).l,a0
		jsrto	NemDec,JmpTo2_NemDec
		lea	(v_level_layout).w,a4
		lea	(Nem_TitleCardFont).l,a0
		jmpto	NemDecToRAM,JmpTo_NemDecToRAM
; ===========================================================================

LoadTitleCard:				
		bsr.s	sub_157B0
		moveq	#0,d0
		move.b	(v_zone).w,d0
		move.b	byte_15820(pc,d0.w),d0
		lea	word_15832(pc),a0
		lea	(a0,d0.w),a0	
		vdp_comm.l	move,vram_LevelName,vram,write,d0

loc_157EC:				
		disable_ints
		lea	(v_level_layout).w,a1
		lea	(vdp_data_port).l,a6
		move.l	d0,vdp_control_port-vdp_data_port(a6)

loc_157FE:				
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	loc_1581A
		lsl.w	#5,d0
		lea	(a1,d0.w),a2
		moveq	#0,d1
		move.b	(a0)+,d1
		lsl.w	#3,d1
		subq.w	#1,d1

loc_15812:				
		move.l	(a2)+,(a6)
		dbf	d1,loc_15812
		bra.s	loc_157FE
; ===========================================================================

loc_1581A:				
		enable_ints
		rts	
; ===========================================================================
byte_15820:	
		dc.b   0,  0,  0,  0,$10,$10,$98,$20,$2C,  0,$3C,$46,$58,$68,$A8,$7A ; 0
		dc.b $8A,  0					; 16
word_15832:	dc.w $2A06,$3804,    4,$2604, $C04,$1804,$1C02,$FFFF ; 0
					
		dc.w $2A06,$4004,$3804,$3004,$2604,$1C02,$3C04,$FFFF ; 8
		dc.w $1804,$1C02,$2604,$4004,$3004,$FFFF,$1804,$1C02 ; 16
		dc.w  $C04,$3004,    4,$2604, $804,$FFFF,$1C02,$2604 ; 24
		dc.w  $804,    4,$FFFF,$2A06,$5604,$3C04,$4004,$1C02 ; 32
		dc.w  $804,    4,$4804,$FFFF, $804,    4,$3C04,$1C02 ; 40
		dc.w $1404,$1804,$4004,$FFFF, $804,$1804,$2A06,$1C02 ; 48
		dc.w	 4,$2604,$3004,$4004,$FFFF,    4,$3404,$4404 ; 56
		dc.w $4004,$1C02, $804,$3804,$FFFF,$3C04,$2204,$5604 ; 64
		dc.w  $804,$1804,    4,$FFFF,$4C06,$1C02,$1404,$1004 ; 72
		dc.w $3804,$4004,$3C04,$FFFF, $C04,    4,$4004,$1804 ; 80
		dc.w $1404,$FFFF				; 88
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo2_NemDec:				
		jmp	NemDec
JmpTo_NemDecToRAM:				
		jmp	NemDecToRAM
JmpTo3_AddPLC:	
		jmp	AddPLC
JmpTo_sub_8476:				
		jmp	sub_8476
		
		align 4
	endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 36 - Spikes
; ----------------------------------------------------------------------------

Spikes:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1590E(pc,d0.w),d1
		jmp	off_1590E(pc,d1.w)
; ===========================================================================
off_1590E:	
		dc.w loc_15926-off_1590E			; 0 		
		dc.w loc_15996-off_1590E			; 2
		dc.w loc_159E6-off_1590E			; 4
		dc.w loc_15A42-off_1590E			; 6
		
byte_15916:	dc.b $10					; 0 
		dc.b $10					; 1
		dc.b $20					; 2
		dc.b $10					; 3
		dc.b $30					; 4
		dc.b $10					; 5
		dc.b $40					; 6
		dc.b $10					; 7
		dc.b $10					; 8
		dc.b $10					; 9
		dc.b $10					; 10
		dc.b $20					; 11
		dc.b $10					; 12
		dc.b $30					; 13
		dc.b $10					; 14
		dc.b $40					; 15
; ===========================================================================

loc_15926:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Spike,ost_mappings(a0)
		move.w	#tile_Nem_Spikes+tile_pal2,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		andi.b	#$F,$28(a0)
		andi.w	#$F0,d0	
		lea_	byte_15916,a1
		lsr.w	#3,d0
		adda.w	d0,a1
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,ost_height(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		cmpi.b	#4,d0
		bcs.s	loc_15978
		addq.b	#2,ost_primary_routine(a0)
		move.w	#tile_Nem_HorizSpike+tile_pal2,ost_tile(a0)

loc_15978:				
		btst	#1,$22(a0)
		beq.s	loc_15986
		move.b	#6,ost_primary_routine(a0)

loc_15986:				
		move.w	ost_x_pos(a0),$30(a0)			; spikes_base_x_pos(a0)
		move.w	ost_y_pos(a0),$32(a0)			; spikes_base_y_pos(a0)
		bra.w	Adjust2PArtPointer
; ===========================================================================

loc_15996:				
		bsr.w	sub_15AC6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	SolidObject
		move.b	$22(a0),d6
		andi.b	#$18,d6
		beq.s	loc_159DE
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_159D0
		lea	($FFFFB000).w,a1
		bsr.w	React_ChkHurt2

loc_159D0:				
		andi.b	#$10,d6
		beq.s	loc_159DE
		lea	($FFFFB040).w,a1
		bsr.w	React_ChkHurt2

loc_159DE:				
					
		move.w	$30(a0),d0				; spikes_base_x_pos(a0)
		bra.w	DespawnObject2
; ===========================================================================

loc_159E6:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	sub_15AC6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	SolidObject
		swap	d6
		andi.w	#3,d6
		beq.s	loc_15A3A
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_15A26
		lea	($FFFFB000).w,a1
		bsr.w	React_ChkHurt2
		bclr	#5,$22(a0)

loc_15A26:				
		andi.b	#2,d6
		beq.s	loc_15A3A
		lea	($FFFFB040).w,a1
		bsr.w	React_ChkHurt2
		bclr	#6,$22(a0)

loc_15A3A:				
					
		move.w	$30(a0),d0				; spikes_base_x_pos(a0)
		bra.w	DespawnObject2
; ===========================================================================

loc_15A42:				
		bsr.w	sub_15AC6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	SolidObject
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_15A88
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_15A7A
		lea	($FFFFB000).w,a1
		bsr.w	React_ChkHurt2

loc_15A7A:				
		andi.b	#8,d6
		beq.s	loc_15A88
		lea	($FFFFB040).w,a1
		bsr.w	React_ChkHurt2

loc_15A88:					
		move.w	$30(a0),d0				; spikes_base_x_pos(a0)
		bra.w	DespawnObject2

; ===========================================================================


React_ChkHurt2:									
		btst	#1,$2B(a1)
		bne.s	locret_15AC4
		tst.w	$30(a1)
		bne.s	locret_15AC4
		cmpi.b	#4,$24(a1)
		bcc.s	locret_15AC4
		move.l	ost_y_pos(a1),d3
		move.w	ost_y_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		sub.l	d0,d3
		move.l	d3,ost_y_pos(a1)
		movea.l	a0,a2
		movea.l	a1,a0
		jsr	HurtCharacter
		movea.l	a2,a0

locret_15AC4:				
		rts	

; ===========================================================================


sub_15AC6:								
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_15AD6(pc,d0.w),d1
		jmp	off_15AD6(pc,d1.w)

; ===========================================================================
off_15AD6:	
		dc.w locret_15ADC-off_15AD6			; 0 			
		dc.w loc_15ADE-off_15AD6			; 1
		dc.w loc_15AF2-off_15AD6			; 2
; ===========================================================================

locret_15ADC:				
		rts	
; ===========================================================================

loc_15ADE:				
		bsr.w	sub_15B06
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_15AF2:				
		bsr.w	sub_15B06
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$30(a0),d0				; spikes_base_x_pos(a0)
		move.w	d0,ost_x_pos(a0)
		rts	

; ===========================================================================


sub_15B06:							
		tst.w	$38(a0)
		beq.s	loc_15B24
		subq.w	#1,$38(a0)
		bne.s	locret_15B66
		tst.b	ost_render(a0)
		bpl.s	locret_15B66
		move.w	#$B6,d0	
		jsr	PlaySound
		bra.s	locret_15B66
; ===========================================================================

loc_15B24:				
		tst.w	$36(a0)
		beq.s	loc_15B46
		subi.w	#$800,$34(a0)
		bcc.s	locret_15B66
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#$3C,$38(a0)
		bra.s	locret_15B66
; ===========================================================================

loc_15B46:				
		addi.w	#$800,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	locret_15B66
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$3C,$38(a0)

locret_15B66:				
					
		rts	

; ===========================================================================

		include "mappings/sprite/Spikes.asm"
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3B - Purple rock (unused Sonic 1 leftover)
; ----------------------------------------------------------------------------

PurpleRock:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_15CD6(pc,d0.w),d1
		jmp	off_15CD6(pc,d1.w)
; ===========================================================================
off_15CD6:	
		dc.w loc_15CDA-off_15CD6			; 0 			
		dc.w loc_15D02-off_15CD6			; 1
; ===========================================================================

loc_15CDA:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_PRock,ost_mappings(a0)
		move.w	#(vram_PurpleRock/sizeof_cell)+tile_pal4,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$13,$19(a0)
		move.b	#4,$18(a0)

loc_15D02:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	SolidObject
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

		include "mappings/sprite/GHZ Purple Rock (unused).asm"

; ===========================================================================		

	if RemoveJmpTos=0	
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3C - Breakable wall (mostly unused Sonic 1 leftover; the SmashObject
; function is called by a few other objects, but the SmashWall object itself 
; is unused)
; ----------------------------------------------------------------------------

SmashWall:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_15D56(pc,d0.w),d1
		jsr	off_15D56(pc,d1.w)
		bra.w	DespawnObject
; ===========================================================================
off_15D56:	
		dc.w loc_15D5C-off_15D56			; 0 	
		dc.w loc_15D8A-off_15D56			; 2
		dc.w loc_15E02-off_15D56			; 4
; ===========================================================================

loc_15D5C:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Smash,ost_mappings(a0)
		move.w	#(vram_SmashWall/sizeof_cell)+tile_pal3,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)

loc_15D8A:				
		move.w	($FFFFB010).w,$30(a0)
		move.w	#$1B,d1
		move.w	#$20,d2
		move.w	#$20,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	SolidObject
		btst	#5,$22(a0)
		bne.s	loc_15DAE

locret_15DAC:				
					
		rts	
; ===========================================================================

loc_15DAE:				
		lea	(v_ost_player1).w,a1
		cmpi.b	#2,$1C(a1)
		bne.s	locret_15DAC
		move.w	$30(a0),d0
		bpl.s	loc_15DC2
		neg.w	d0

loc_15DC2:				
		cmpi.w	#$480,d0
		bcs.s	locret_15DAC
		move.w	$30(a0),ost_x_vel(a1)
		addq.w	#4,ost_x_pos(a1)
		lea	(word_15E8C).l,a4
		move.w	ost_x_pos(a0),d0
		cmp.w	ost_x_pos(a1),d0
		bcs.s	loc_15DEE
		subi_.w	#8,ost_x_pos(a1)
		lea	(word_15EAC).l,a4

loc_15DEE:				
		move.w	ost_x_vel(a1),ost_inertia(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bsr.s	SmashObject

loc_15E02:				
		bsr.w	SpeedToPos
		addi.w	#$70,ost_y_vel(a0)
		tst.b	ost_render(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite

; ===========================================================================

;BreakObjectToPieces:
SmashObject:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		movea.l	ost_mappings(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#render_rawmap_bit,ost_render(a0)
		_move.b	ost_id(a0),d4
		move.b	ost_render(a0),d5
		movea.l	a0,a1
		bra.s	loc_15E46
; ===========================================================================

loc_15E3E:				
		bsr.w	FindNextFreeObj
		bne.s	loc_15E82
		addq.w	#8,a3

loc_15E46:				
		move.b	#4,$24(a1)
		_move.b	d4,ost_id(a1)
		move.l	a3,ost_mappings(a1)
		move.b	d5,ost_render(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.w	(a4)+,ost_x_vel(a1)
		move.w	(a4)+,ost_y_vel(a1)
		dbf	d1,loc_15E3E

loc_15E82:				
		move.w	#$CB,d0	
		jmp	PlaySound

; ===========================================================================
word_15E8C:
		;    x_vel,y_vel
		dc.w  $400,-$500				; 0
		dc.w  $600,-$100				; 2
		dc.w  $600, $100				; 4
		dc.w  $400, $500				; 6
		dc.w  $600,-$600				; 8
		dc.w  $800,-$200				; 10
		dc.w  $800, $200				; 12
		dc.w  $600, $600				; 14
word_15EAC:	
		dc.w -$600,-$600				; 0
		dc.w -$800,-$200				; 2
		dc.w -$800, $200				; 4
		dc.w -$600, $600				; 6
		dc.w -$400,-$500				; 8
		dc.w -$600,-$100				; 10
		dc.w -$600, $100				; 12
		dc.w -$400, $500				; 14
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------

		include "mappings/sprite/GHZ & SLZ Smashable Wall (unused).asm"

; ===========================================================================
		bra.w	NullObject				; dead

; ===========================================================================

; sub_15F9C: ObjectsLoad: RunObjects:
ExecuteObjects:				
		tst.b	(f_teleport_flag).w			; is a teleport in progress?
		bne.s	.teleport				; if so, exit
		
		lea	(v_ost_all).w,a0			; set address for object RAM
		moveq	#countof_ost-1,d7			; $80 objects -1
		moveq	#0,d0
		cmpi.b	#id_demo,(v_gamemode).w
		beq.s	.in_level
		cmpi.b	#id_level,(v_gamemode).w
		bne.s	.run_object

	.in_level:				
		move.w	#$8F,d7	
		tst.w	(f_two_player).w
		bne.s	.run_object
		cmpi.b	#id_Death,(v_ost_player1+ost_primary_routine).w ; is main character dead, drowning, or respawning?
		bcc.s	.dead					; if so, branch

; RunObject:
	.run_object:								
		move.b	ost_id(a0),d0
		beq.s	.no_object
		add.w	d0,d0
		add.w	d0,d0
		movea.l	Obj_Index-4(pc,d0.w),a1
		jsr	(a1)
		moveq	#0,d0

	.no_object:				
		lea	sizeof_ost(a0),a0
		dbf	d7,.run_object

.teleport:				
		rts	

; ===========================================================================
; RunObjectsWhenPlayerIsDead:
	.dead:
	if FixBugs
		; If main character has just drowned, continue running objects normally
		; until they are marked as dead, so that the bubbles from their mouth are 
		; displayed.
		cmpi.b	#id_Drown,(v_ost_player+ost_routine)	; has main character just drowned?
		beq.s	.run_object				; if so, run objects normally
	endc						
		moveq	#countof_ost_reserved-1,d7
		bsr.s	.run_object				; run first $10 objects normally
		moveq	#countof_ost_dynamic-1,d7
		bsr.s	.display_object				; next $70 objects are only displayed
		moveq	#countof_ost_level_only-1,d7
		bra.s	.run_object				; run final $10 objects run normally

; ===========================================================================

; RunObjectDisplayOnly:
.display_object:						
		moveq	#0,d0
		move.b	ost_id(a0),d0				; get object's id
		beq.s	.no_object2				; if there is no object loaded here, skip
		tst.b	ost_render(a0)				; was the object displayed on the previous frame?
		bpl.s	.no_object2				; if not, skip

	if FixBugs
		; If this is a multi-sprite object, then we cannot use its 'priority'
		; value to display it as it's being used for coordinate data.
		; In theory, this means that calls to 'DisplaySprite' here could
		; overflow 'v_sprite_buffer' and write to the OST
		; instead, which could be quite disasterous. However, I don't think
		; it's possible for an object to have a Y coordinate higher than
		; $7FF, so, in practice, the overflow never occurs. Still, it can
		; result in objects displaying on a random layer. The best we can do
		; is force them to display on a certain layer consistently.
		; This quirk becomes a much bigger problem if you extend the
		; 'priority' value to 16-bit, such as if you've ported S3K's priority
		; manager, rather than just the upper byte of the Y coordinate being
		; read as priority data, the whole word is. This makes it much more
		; likely to lead to buffer overflow and memory corruption.

		pea .no_object2(pc)				; go to .no_object2 after returning from DisplaySprite or DisplaySprite3
		btst	#render_subobjects_bit,ost_render(a0)	; is this a multisprite object?
		beq.w	DisplaySprite				; if not, display using object's priority value
		move.w	#$80*4,d0				; if so, display with priority of four
		bra.w	DisplaySprite3
	else
		bsr.w	DisplaySprite	
	endc

	.no_object2:				
		lea	sizeof_ost(a0),a0
		dbf	d7,.display_object
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Object pointers
; ---------------------------------------------------------------------------
Obj_Index:	index.l 0,1					; longword, absolute (relative to 0), start ids at 1

		ptr Sonic					; 1 
		ptr Tails
		ptr PlaneSwitcher
		ptr WaterSurface				; 4
		ptr TailsTails
		ptr Spiral	
		ptr Oil
		ptr Splash_SpindashDust				; 8
		ptr SonicSpecial
		ptr DrownCount
		ptr TippingPipe					; CPZ tipping pipe section
		ptr CPZBetaPlatform				; $C; unused beta leftover
		ptr Signpost 
		ptr TitleIntro
		ptr TitleMenu
		ptr TailsSpecial				; $10
		ptr Bridge			
		ptr GiantEmerald				; unused beta leftover
		ptr WaterfallHiddenPalace			; unused beta leftover
		ptr Seesaw					; $14
		ptr SwingingPlatform				; ARZ, MCZ
		ptr Tram					; HTZ ziplines/lifts/trams
		ptr Helix					; unused Sonic 1 leftover: GHZ spiked log
		ptr Platform1					; $18; ARZ & EHZ
		ptr Platform2					; CPZ, OOZ, & WFZ
		ptr CollapseLedge				; unused beta leftover, used by HPZ collapsing platform, same object as S1 GHZ collapsing ledges
		ptr SpeedBooster				; CPZ Speed Boosters
		ptr Scenery1					; $1C; EHZ bridge stakes, HTZ tram stakes, OOZ falling oil
		ptr BlueBalls
		ptr ChemPlantSpinTube
		ptr CollapseFloor				; ARZ, MCZ, OOZ
		ptr LavaBubble					; $20
		ptr TwoPlayerResultsDisplay
		ptr ArrowShooter
		ptr FallingPillar
		ptr Bubble					; $24
		ptr Ring
		ptr Monitor
		ptr ExplosionItem	
		ptr Animals					; $28
		ptr Points
		ptr Stomper
		ptr RisingPillar
		ptr LeafGenerator				; $2C
		ptr Barrier
		ptr PowerUp
		ptr SmashGround
		ptr RisingLava					; $30
		ptr LavaTag
		ptr SmashBlock
		ptr BurnerPlatform
		ptr TitleCard					; $34
		ptr InvincibiltyStars
		ptr Spikes
		ptr RingLoss
		ptr ShieldItem					; $38
		ptr GameOverCard
		ptr GotThroughCard
		ptr PurpleRock					; unused Sonic 1 leftover
		ptr SmashWall					; $3C; mostly unused Sonic 1 leftover; fragment subroutine is used, but object itself is not
		ptr LauncherBlock				; smashable lanucher block in OOZ
		ptr Prison
		ptr Fan
		ptr Springboard					; $40
		ptr Springs
		ptr SteamSpring
		ptr RailSpikes
		ptr Bumper					; $44; CNZ round bumpers (all others except the hexagonal one are run by the SpecialCNZBumpers psuedoobject)
		ptr PressureSpring
		ptr GiantBall					; unused beta leftover
		ptr Button
		ptr LauncherBall				; $48
		ptr WaterfallEmeraldHill
		ptr Octus
		ptr Buzzer
		ptr Obj4C					; $4C
		ptr Obj4D
		ptr Obj4E
		ptr Obj4F
		ptr Aquis					; $50
		ptr BossCasinoNight
		ptr BossHillTop
		ptr BossMetropolisOrb
		ptr BossMetropolis				; $54
		ptr BossOilOcean
		ptr BossEmeraldHill
		ptr BossMysticCave
		ptr BossExplosion				; $58
		ptr EmeraldSpecial
		ptr MessageSpecial
		ptr RingLossSpecial
		ptr Masher					; $5C
		ptr BossChemicalPlant
		ptr HUDSpecial
		ptr StartBannerSpecial
		ptr RingsSpecial				; $60
		ptr BombSpecial
		ptr Obj62
		ptr ShadowSpecial				; not Shads, but rather the character's shadows in the Special Stages :P
		ptr TwinStompers				; $64
		ptr LongPlatform
		ptr SpringWall
		ptr SpinTubeMetropolis
		ptr SpikeBlock					; $68
		ptr Nut
		ptr Platform3
		ptr Platform4
		ptr Conveyer					; $6C
		ptr FloorSpike
		ptr LargeRotatingPlatform
		ptr ResultsSpecial
		ptr Cog						; $70
		ptr Scenery2					; MTZ Lava Bubble, HPZ bridge stake, HPZ pulsing orb
		ptr ConveyerBelt
		ptr MysticCaveRotatingRings			; unused in normal gameplay, but accessible in debug mode
		ptr Invisibarrier				; $74
		ptr BrickAndSpikeChain
		ptr SlidingSpikePlat
		ptr BridgeMysticCave
		ptr StairBlocks					; $78
		ptr Starpost
		ptr TrackPlatform
		ptr SpinTubeLid
		ptr Pylon					; $7C
		ptr HiddenBonus					; unused Sonic 1 leftover
		ptr SuperSonicStars
		ptr VineSwitch
		ptr MovingVineHooks				; $80
		ptr Drawbridge
		ptr PillarPlatform
		ptr CirclingPlatform
		ptr PinballMode					; $84
		ptr PinballLauncher
		ptr Flipper
		ptr RingCountSpecial		
		ptr TailsTailsSpecial				; $88
		ptr BossAquaticRuin
		ptr S1_STP_Credits				; unused Sonic 1 leftover
		ptr PalSwitcherWingFortress
		ptr Whisp					; $8C
		ptr GrounderInWall
		ptr GrounderInWall_Dup
		ptr GrounderWall
		ptr GrounderRocks				; $90
		ptr ChopChop
		ptr Spiker
		ptr SpikerDrill
		ptr Rexon_Dup					; $94
		ptr Sol
		ptr Rexon
		ptr RexonHead
		ptr Projectile					; $98 ; Coconuts' coconuts, Nebulas' bombs, Turtloid, Clucker, Spiny, and Wall Turret shots
		ptr Nebula
		ptr Turtloid
		ptr TurtloidRider
		ptr BalkiryJet					; $9C
		ptr Coconuts
		ptr Crawlton
		ptr Shellcracker
		ptr ShellcrackerClaw				; $A0
		ptr Slicer
		ptr SlicerPincers
		ptr Flasher
		ptr Asteron					; $A4
		ptr Spiny
		ptr SpinyWall
		ptr Grabber
		ptr GrabberLegs					; $A8
		ptr GrabberBox
		ptr GrabberString		
		ptr Unknown1					; unused, vestigial remnants of some object embedded in the Grabber objects
		ptr Balkiry					; $AC
		ptr CluckerBase
		ptr Clucker
		ptr MechaSonic
		ptr SonicSegaScreen				; $B0
		ptr SegaHideTM					; hides the TM symbol on Japanese and Korean consoles
		ptr Tornado
		ptr Cloud
		ptr VerticalPropeller				; $B4
		ptr HorizontalPropeller
		ptr TiltingPlatform	
		ptr VerticalLaser				; unused
		ptr WallTurret					; $B8
		ptr HorizontalLaser				; laser that shoots down the Tornado at the start of WFZ
		ptr WheelWingFortress				; WFZ conveyer wheel
		ptr Unknown2					; unused, unknown
		ptr ShipExhaust					; $BC ; exhaust from Eggman's getaway ship in the WFZ/DEZ transition
		ptr ConveyerPlatforms				; WFZ conveyer platforms
		ptr LateralCannon
		ptr Stick
		ptr Catapult					; $C0
		ptr BreakablePlating
		ptr Rivet
		ptr TornadoSmoke
		ptr TornadoSmoke				; $C4
		ptr BossWingFortress
		ptr Eggman
		ptr EggRobo
		ptr Crawl					; $C8
		ptr PalChanger					; title screen palette changing handler
		ptr Cutscene					; ending cutscene manager
		ptr EndingClouds
		ptr EndingTrigger				; $CC ; trigger for birds and Tornado rescue in ending cutscene
		ptr EndingFlickies
		ptr EndingSonicTails	
		ptr TornadoHelicies
		ptr ObjD0					; $D0
		ptr ObjD1
		ptr SnakePlatform				; CNZ snake platform
		ptr BombPenalty					; penalty spikeballs from CNZ slot machines
		ptr LargeMovingBlock				; $D4
		ptr Elevator
		ptr Cage					; CNZ cages
		ptr HexagonalBumper				; CNZ moving hexagonal bumper
		ptr SaucerBumper				; $D8
		ptr InvisibleGrabBlock
		ptr ContScrItem
		ptr ContinueCharacters
		ptr RingPrize					; $DC
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4C, 4D, 4E, 4F, 62, D0, and D1
; Objects removed from the game. All it does is deallocate its array.
; ----------------------------------------------------------------------------
Obj4C:
Obj4D:
Obj4E:
Obj4F:
Obj62:
ObjD0:
ObjD1:
NullObject:
		bra.w	DeleteObject

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	make an	object fall downwards, increasingly fast
; Also updates its position

;	uses d0.l, d2.l, d3.l
; ---------------------------------------------------------------------------

ObjectFall:					
		move.l	ost_x_pos(a0),d2			; load x position
		move.l	ost_y_pos(a0),d3			; load y position
		move.w	ost_x_vel(a0),d0			; load x speed
		ext.l	d0
		asl.l	#8,d0					; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d2					; add x speed to x position	; note this affects the subpixel position x_sub(a0) = 2+x_pos(a0)
		move.w	ost_y_vel(a0),d0			; load y speed
		addi.w	#$38,ost_y_vel(a0)			; increase vertical speed (apply gravity)
		ext.l	d0
		asl.l	#8,d0					; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d3					; add old y speed to y position	; note this affects the subpixel position y_sub(a0) = 2+y_pos(a0)
		move.l	d2,ost_x_pos(a0)			; store new x position
		move.l	d3,ost_y_pos(a0)			; store new y position
		rts


; ---------------------------------------------------------------------------
; Subroutine translating object	speed to update	object position

;	uses d0.l, d2.l, d3.l
; ---------------------------------------------------------------------------

SpeedToPos:				
		move.l	ost_x_pos(a0),d2			; load x position
		move.l	ost_y_pos(a0),d3			; load y position
		move.w	ost_x_vel(a0),d0			; load horizontal speed
		ext.l	d0
		asl.l	#8,d0					; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d2					; add to x-axis position	; note this affects the subpixel position x_sub(a0) = 2+x_pos(a0)
		move.w	ost_y_vel(a0),d0			; load vertical speed
		ext.l	d0
		asl.l	#8,d0					; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d3					; add to y-axis position	; note this affects the subpixel position y_sub(a0) = 2+y_pos(a0)
		move.l	d2,ost_x_pos(a0)			; update x-axis position
		move.l	d3,ost_y_pos(a0)			; update y-axis position
		rts

; ===========================================================================

DespawnObject:
		tst.w	(f_two_player).w
		beq.s	loc_163DC
		bra.w	DisplaySprite

	loc_163DC:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#(screen_width+64)+(128*2),d0
		bhi.w	loc_163F4				; could be optimized to .s
		bra.w	DisplaySprite

	loc_163F4:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_16406
		bclr	#7,2(a2,d0.w)

	loc_16406:				
		bra.w	DeleteObject
; ===========================================================================

DespawnObject2:						
		tst.w	(f_two_player).w
		beq.s	loc_16414
		bra.w	DisplaySprite
		
	loc_16414:				
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#(screen_width+64)+(128*2),d0		; screen width plus 64 to bring to power of two, plus 128 pixels off screen in either direction
		bhi.w	.delete					; could be optimized to .s
		bra.w	DisplaySprite

	.delete:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_1643A
		bclr	#7,2(a2,d0.w)

	loc_1643A:				
		bra.w	DeleteObject
		
; ===========================================================================

DespawnObject3:				
		tst.w	(f_two_player).w
		beq.s	loc_16446
		rts	

	loc_16446:				
		move.w	ost_x_pos(a0),d0
		andi.w	#$FF80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#(screen_width+64)+(128*2),d0
		bhi.w	loc_1645C				; could be optimized to .s
		rts	


	loc_1645C:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_1646E
		bclr	#7,2(a2,d0.w)

	loc_1646E:				
		bra.w	DeleteObject
		
; ===========================================================================

DespawnObject_P1:				
		tst.w	(f_two_player).w
		bne.s	DespawnObject_P2
		move.w	ost_x_pos(a0),d0
		andi.w	#$FF80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#(screen_width+64)+(128*2),d0
		bhi.w	loc_16490				; could be optimized to .s
		bra.w	DisplaySprite

	loc_16490:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_164A2
		bclr	#7,2(a2,d0.w)

	loc_164A2:				
		bra.w	DeleteObject
		
; ===========================================================================

DespawnObject_P2:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$100,d0
		move.w	d0,d1
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$300,d0
		bhi.w	loc_164C0				; could be optimized to .s
		bra.w	DisplaySprite

	loc_164C0:				
		sub.w	(v_camera_x_pos_coarse_p2).w,d1
		cmpi.w	#$300,d1
		bhi.w	loc_164D0				; could be optimized to .s
		bra.w	DisplaySprite

	loc_164D0:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_164E2				; could be optimized to .s
		bclr	#7,2(a2,d0.w)

	loc_164E2:				
		bra.w	DeleteObject				; useless branch...

; ===========================================================================			

DeleteObject:						
		movea.l	a0,a1

DeleteChild:					
		moveq	#0,d1
		moveq	#(sizeof_ost/4)-1,d0

	.loop:				
		move.l	d1,(a1)+
		dbf	d0,.loop
		rts	


; ===========================================================================

DisplaySprite:	
		lea	(v_sprite_queue).w,a1
		move.w	$18(a0),d0
		lsr.w	#1,d0
		andi.w	#$380,d0
		adda.w	d0,a1
		cmpi.w	#$7E,(a1)
		bcc.s	.exit
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

	.exit:				
		rts	


; ===========================================================================

DisplaySprite2:				
		lea	(v_sprite_queue).w,a2
		move.w	$18(a1),d0
		lsr.w	#1,d0
		andi.w	#$380,d0
		adda.w	d0,a2
		cmpi.w	#$7E,(a2)
		bcc.s	.exit
		addq.w	#2,(a2)
		adda.w	(a2),a2
		move.w	a1,(a2)

	.exit:				
		rts	

; ===========================================================================

DisplaySprite3:	
		lea	(v_sprite_queue).w,a1
		adda.w	d0,a1
		cmpi.w	#$7E,(a1)
		bcc.s	.exit
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

	.exit:				
		rts	

; ===========================================================================

; ---------------------------------------------------------------------------
; Subroutine to	animate	a sprite using an animation script
;
; input:
;	a1 = animation script index (e.g. Ani_Crab)

; output:
;	a1 = animation script (e.g. ani_crab_stand)

;	uses d0.l, d1.l

; usage:
;		lea	(Ani_Sonic).l,a1
;		bsr.w	AnimateSprite
; ---------------------------------------------------------------------------


AnimateSprite:
		moveq	#0,d0
		move.b	ost_anim(a0),d0				; move animation number to d0
		cmp.b	ost_anim_restart(a0),d0			; is animation set to change?
		beq.s	Anim_Run				; if not, branch
		
		move.b	d0,ost_anim_restart(a0)			; set prev ost_anim to current current
		move.b	#0,ost_anim_frame(a0)			; reset animation
		move.b	#0,ost_anim_time(a0)			; reset frame duration

Anim_Run:
		subq.b	#1,ost_anim_time(a0)			; subtract 1 from frame duration
		bpl.s	Anim_Wait				; if time remains, branch
		add.w	d0,d0
		adda.w	(a1,d0.w),a1				; calculate address of appropriate animation script
		move.b	(a1),ost_anim_time(a0)			; load frame duration
		moveq	#0,d1
		move.b	ost_anim_frame(a0),d1			; load current frame number
		move.b	1(a1,d1.w),d0				; read sprite number from script
		bmi.s	Anim_End_FF				; if animation is complete, branch

Anim_Next:
		andi.b	#$7F,d0					; clear sign bit
		move.b	d0,ost_frame(a0)			; load sprite number
		move.b	ost_primary_status(a0),d1		;* match the orientaion dictated by the object
		andi.b	#status_xflip+status_yflip,d1		;* with the orientation used by the object engine
		andi.b	#$FF-render_xflip-render_yflip,ost_render(a0) ;*
		or.b	d1,ost_render(a0)			;*
		addq.b	#1,ost_anim_frame(a0)			; next frame number

Anim_Wait:
		rts
; ===========================================================================

Anim_End_FF:
		addq.b	#1,d0					; is the end flag = $FF?
		bne.s	Anim_End_FE				; if not, branch
		move.b	#0,ost_anim_frame(a0)			; restart the animation
		move.b	ost_render(a1),d0			; read sprite number
		bra.s	Anim_Next
; ===========================================================================

Anim_End_FE:
		addq.b	#1,d0					; is the end flag = $FE?
		bne.s	Anim_End_FD				; if not, branch
		move.b	2(a1,d1.w),d0				; read the next byte in the script
		sub.b	d0,ost_anim_frame(a0)			; jump back d0 bytes in the script
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0				; read sprite number
		bra.s	Anim_Next
; ===========================================================================

Anim_End_FD:
		addq.b	#1,d0					; is the end flag = $FD?
		bne.s	Anim_End_FC				; if not, branch
		move.b	2(a1,d1.w),ost_anim(a0)			; read next byte, run that animation
		rts
; ===========================================================================

Anim_End_FC:
		addq.b	#1,d0					; is the end flag = $FC?
		bne.s	Anim_End_FB				; if not, branch
		addq.b	#2,ost_primary_routine(a0)		; jump to next routine
		move.b	#0,ost_anim_time(a0)
		addq.b	#1,ost_anim_frame(a0)
		rts
; ===========================================================================

Anim_End_FB:
		addq.b	#1,d0					; is the end flag = $FB?
		bne.s	Anim_End_FA				; if not, branch
		move.b	#0,ost_anim_frame(a0)			; reset animation
		clr.b	ost_secondary_routine(a0)		; reset 2nd routine counter
		rts
; ===========================================================================

Anim_End_FA:
		addq.b	#1,d0					; is the end flag = $FA?
		bne.s	Anim_End_F9				; if not, branch
		addq.b	#2,ost_secondary_routine(a0)		; jump to next routine
		rts
; ===========================================================================

Anim_End_F9:
		addq.b	#1,d0					; is the end flag = $F9?
		bne.s	Anim_End				; if not, branch
		addq.b	#2,$2A(a0)				; Actually obj89_arrow_routine

Anim_End:
		rts


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	convert	objects into proper Mega Drive sprites

; output:
;	a2 = address of last sprite in sprite buffer

;	uses d0.l, d1.w, d2.w, d3.w, d4.w, d5.l, d6.l, d7.l, a0, a1, a4
; ---------------------------------------------------------------------------

; sub_16604:
BuildSprites:
		tst.w	(f_two_player).w			; is it 2P mode?
		bne.w	BuildSprites_2P				; if so, use the 2P version of this function
		lea	(v_sprite_buffer).w,a2			; ; set address for sprite table - $280 bytes, copied to VRAM at VBlank
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(f_level_started).w			; has the level started?
		beq.s	.notstarted				; if not, branch	
		jsrto	BuildHUD, JmpTo_BuildHUD		; render the HUD
		bsr.w	BuildRings				; render rings

	.notstarted:	
		lea	(v_sprite_queue).w,a4			; address of sprite queue - $400 bytes, 8 sections of $80 bytes (1 word for count, $3F words for OST addresses)
		moveq	#8-1,d7					; 8 priority levels


	BuildSprites_PriorityLoop:
		tst.w	(a4)					; are there objects left in current section?
		beq.w	BuildSprites_NextPriority		; if not, branch
		moveq	#2,d6					; start address within current section (1st word is object count)

	BuildSprites_ObjectLoop:
		movea.w	(a4,d6.w),a0				; a0=object

    if Revision=0
		; These are sanity checks to detect invalid objects which should not
		; have been queued for display. Revision 1 and S3K get rid of them compeletely,
		; since they shouldn't be needed and they just slow this code down.
		; In REV00, it appears that these checks were used for debugging, as
		; they deliberately crash the console if they detect an invalid object.
		tst.b	ost_id(a0)				; is this object slot occupied?
		beq.w	BuildSprites_Crash			; if not, branch
		tst.l	ost_mappings(a0)			; does this object have any mappings?
		beq.w	BuildSprites_Crash			; if not, branch
    else
		tst.b	ost_id(a0)				; is this object slot occupied?
		beq.w	BuildSprites_NextObject			; if not, check next one
    endc

		andi.b	#(~render_onscreen)&$FF,ost_render(a0)	; clear on-screen flag
		move.b	ost_render(a0),d0
		move.b	d0,d4
		btst	#render_subobjects_bit,d0		; is the multi-draw flag set?
		bne.w	BuildSprites_MultiDraw			; if so, branch
		andi.w	#render_rel+render_bg,d0		; is this to be positioned by screen coordinates?
		beq.s	.abs_screen_coords			; if so, branch
		lea	(v_camera_x_pos_copy).w,a1		; get address for camera x position (or background x position if render_bg is used)
		
		; check if object is visible
		moveq	#0,d0
		move.b	ost_displaywidth(a0),d0
		move.w	ost_x_pos(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1					; d1 = x pos of object's right edge on screen
		bmi.w	BuildSprites_NextObject			; branch if object is outside left side of screen
		move.w	d3,d1
		sub.w	d0,d1					; d1 = x pos of object's left edge on screen
		cmpi.w	#screen_width,d1		
		bge.w	BuildSprites_NextObject			; branch if object is outside right side of screen
		addi.w	#screen_left,d3				; d3 = x pos of object on screen, +128px for VDP sprite coordinate
		
		btst	#render_useheight_bit,d4		; is use height flag set?
		beq.s	.assume_height				; if not, branch
		moveq	#0,d0
		move.b	ost_height(a0),d0
		move.w	ost_y_pos(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.s	BuildSprites_NextObject			; if the object is above the screen
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#screen_height,d1
		bge.s	BuildSprites_NextObject			; if the object is below the screen
		addi.w	#screen_top,d2
		bra.s	.draw_object
; ===========================================================================

	.abs_screen_coords:
		move.w	ost_y_screen(a0),d2
		move.w	ost_x_screen(a0),d3
		bra.s	.draw_object
; ===========================================================================

	.assume_height:
		move.w	ost_y_pos(a0),d2
		sub.w	4(a1),d2				; d2 = y pos of object on screen
		addi.w	#screen_top,d2
		andi.w	#$7FF,d2
		cmpi.w	#screen_top-32,d2			; assume Y radius to be 32 pixels
		blo.s	BuildSprites_NextObject			; branch if > 32px outside top side of screen
		cmpi.w	#screen_bottom+32,d2
		bhs.s	BuildSprites_NextObject			; branch if > 32px outside bottom side of screen

	.draw_object:
		movea.l	ost_mappings(a0),a1			; get address of mappings
		moveq	#0,d1
		btst	#render_rawmap_bit,d4			; is raw mappings flag on?
		bne.s	.draw_now				; if it is, branch

		move.b	ost_frame(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1				; jump to frame within mappings
		move.w	(a1)+,d1				; number of sprite pieces
		subq.w	#1,d1					; subtract 1 for loops
		bmi.s	.skip_draw				; if there are 0 pieces, branch

	.draw_now:
		bsr.w	BuildSpr_Draw				; draw the sprite

	.skip_draw:
		ori.b	#render_onscreen,ost_render(a0)		; set object as visible
		

	BuildSprites_NextObject:
		addq.w	#2,d6					; load next object
		subq.w	#2,(a4)					; decrement object count
		bne.w	BuildSprites_ObjectLoop			; if there are objects left, repeat


	BuildSprites_NextPriority:
		lea	sizeof_priority(a4),a4			; next priority section ($80)l
		dbf	d7,BuildSprites_PriorityLoop		; repeat for all sections
		move.b	d5,(v_spritecount).w			; set sprite count
		
; Terminate the sprite list.
; If the sprite list is full, then set the link field of the last
; entry to 0. Otherwise, push the next sprite offscreen and set its
; link field to 0. You might be thinking why this doesn't just do the
; first one no matter what. Well, think about what if the sprite list
; was empty: then it would access data before the start of the list.
		
		cmpi.b	#countof_max_sprites,d5			; was the sprite limit reached?
		beq.s	.max_sprites				; if it was, branch
		move.l	#0,(a2)					; set link field to 0
		rts
; ===========================================================================

	.max_sprites:
		move.b	#0,-5(a2)				; set link field to 0
		rts
		
; ===========================================================================
    if Revision=0
		; In the Simon Wai prototype, these two lines weren't here.
		; This may have been a debugging feature for helping the
		; devs detect when an object tried to display with a blank ID or
		; mappings pointer. The latter was actually an issue that plagued
		; Sonic 1, but is (almost) completely absent in this game.	
BuildSprites_Crash:		
		move.w	(1).w,d0				; causes an address exception
		bra.s	BuildSprites_NextPriority
    endc

; ===========================================================================

BuildSprites_MultiDraw:
		move.l	a4,-(sp)
		lea	(v_camera_x_pos).w,a4
		movea.w	ost_tile(a0),a3
		movea.l	ost_mappings(a0),a5
		moveq	#0,d0

		; check if object is within X bounds
		move.b	ost_mainspr_width(a0),d0		; load pixel width
		move.w	ost_x_pos(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1					; d1 = x pos of object's right edge on screen
		bmi.w	.next_object				; branch if object is outside left side of screen
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#screen_width,d1			; d1 = x pos of object's left edge on screen
		bge.w	.next_object				; branch if object is outside right side of screen
		addi.w	#screen_left,d3				; d3 = x pos of object on screen, +128px for VDP sprite coordinate

		; check if object is within Y bounds
		btst	#render_useheight_bit,d4		; is use height flag on?
		beq.s	.assume_height				; if so ,branch
		moveq	#0,d0
		move.b	ost_mainspr_height(a0),d0		; load pixel height
		move.w	ost_y_pos(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1					; d1 = y pos of object's bottom edge on screen
		bmi.w	.next_object				; branch if object is outside top side of screen
		move.w	d2,d1
		sub.w	d0,d1					; d1 = y pos of object's top edge on screen
		cmpi.w	#screen_height,d1
		bge.w	.next_object				; branch if object is outside bottom side of screen
		addi.w	#screen_top,d2				; d2 = y pos of object on screen, +128px for VDP sprite coordinate
		bra.s	.draw_parent_object
		
	.assume_height:
		move.w	ost_y_pos(a0),d2
		sub.w	4(a4),d2
		addi.w	#screen_top,d2
		andi.w	#$7FF,d2
		cmpi.w	#screen_top-32,d2
		blo.s	.next_object
		cmpi.w	#screen_bottom+32,d2
		bhs.s	.next_object

	.draw_parent_object:
		moveq	#0,d1
		move.b	ost_mainspr_frame(a0),d1		; get current frame
		beq.s	.skip_draw_parent			; if it was zero, skip drawing the parent
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1				; jump to frame within mappings
		move.w	(a1)+,d1				; number of sprite pieces
		subq.w	#1,d1					; subtract 1 for loops
		bmi.s	.skip_draw_parent			; branch if frame contained 0 sprite pieces
		move.w	d4,-(sp)
		bsr.w	BuildSpr_DrawCheck			; draw the sprite
		move.w	(sp)+,d4

	.skip_draw_parent:
		ori.b	#render_onscreen,ost_render(a0)		; set onscreen flag
		lea	ost_subspr2_x_pos(a0),a6
		moveq	#0,d0
		move.b	ost_mainspr_childsprites(a0),d0		; get child sprite count
		subq.w	#1,d0					; if there are 0, go to next object
		bcs.s	.next_object

	.childsprite_loop:		
		swap	d0
		move.w	(a6)+,d3				; get X pos
		sub.w	(a4),d3
		addi.w	#screen_left,d3
		move.w	(a6)+,d2				; get Y pos
		sub.w	4(a4),d2
		addi.w	#screen_top,d2
		andi.w	#$7FF,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1				; get mapping frame
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1				; jump to frame within mappings
		move.w	(a1)+,d1				; number of sprite pieces
		subq.w	#1,d1					; subtract 1 for loops
		bmi.s	.skip_draw_child
		move.w	d4,-(sp)
		bsr.w	BuildSpr_DrawCheck
		move.w	(sp)+,d4

	.skip_draw_child:
		swap	d0
		dbf	d0,.childsprite_loop			; repeat for number of child sprites

	.next_object:
		movea.l	(sp)+,a4
		bra.w	BuildSprites_NextObject



    if FixBugs=0
	BuildSpr_DrawCheck:
		; This check has been moved, so it is redundant.
		; See the bugfix under 'BuildSpr_DrawLoop'.
		cmpi.b	#countof_max_sprites,d5			; has the sprite limit been reached?
		blo.s	BuildSpr_Cont				; if it hasn't, branch
		rts						; otherwise, return
    endc


; DrawSprite
BuildSpr_Draw:
		movea.w	ost_tile(a0),a3

   if FixBugs=0
		; This check has been moved, so it is redundant.
		; See the bugfix under 'BuildSpr_DrawLoop'.
		cmpi.b	#countof_max_sprites,d5
		bhs.s	BuildSpr_Done
    endc

    if FixBugs
; sub_1680A:
BuildSpr_DrawCheck:
    else
; loc_1681C:
BuildSpr_Cont:
    endc
    
		btst	#render_xflip_bit,d4			; is the sprite to be X-flipped?
		bne.s	BuildSpr_FlipX				; if it is, branch
		btst	#render_yflip_bit,d4			; is the sprite to be Y-flipped?
		bne.w	BuildSpr_FlipY				; if it is, branch

; loc_1682A:
BuildSpr_DrawLoop:
    if FixBugs
    	; Hey look, it's the bug that Ashura the Hedgehog and Surge the Tenrec
    	; owe their existence to. In a rather overzealous optimization, 
    	; the game doesn't check if the sprite limit has been reached after
    	; processing each sprite piece. This means that a multisprite object may be
    	; processed even if there is not enough room left in 'v_sprite_buffer', leading
    	; to a buffer overflow. To prevent this from causing harm, the developers placed 
    	; an $80 byte buffer after 'v_sprite_buffer' to 'catch' the overflow.
		
		; Unfortunately, $80 bytes is not big enough to catch all overflow: 
		; the EHZ waterfalls can blow clean past this and overwrite 
		; the first part of Sonic's palette in v_pal_dry_line1. This oversight is 
		; responsible for the famous 'Ashura' glitch, where waterfall sprite data 
		; is interpreted as color data.
		
		; To fix this, we'll just undo this optimistaion. Sonic 3 & Knuckles undid 
		; this optimistaion too, but heavily optimized the rest of 'BuildSprites' 
		; to make up for it.
		cmpi.b	#countof_max_sprites,d5			; has the sprite limit been reached?
		bhs.s	BuildSpr_Done				; if it has, branch
    endc
    
		move.b	(a1)+,d0				; get relative y pos from mappings
		ext.w	d0
		add.w	d2,d0					; add VDP y pos
		move.w	d0,(a2)+				; write y pos to sprite buffer
		move.b	(a1)+,(a2)+				; write sprite size to buffer
		addq.b	#1,d5					; increment sprite counter
		move.b	d5,(a2)+				; write link to next sprite in buffer
		move.w	(a1)+,d0				; get high byte of tile number from mappings
		add.w	a3,d0					; add VRAM setting
		move.w	d0,(a2)+				; write to buffer
		addq.w	#2,a1
		move.w	(a1)+,d0				; get relative x pos from mappings
		add.w	d3,d0					; add VDP x pos
		andi.w	#$1FF,d0				; keep within 512px
		bne.s	.x_not_0				; branch if x pos isn't 0
		addq.w	#1,d0					; add 1 to prevent sprite masking (sprites at x pos 0 act as masks)

	.x_not_0:
		move.w	d0,(a2)+				; set X pos
		dbf	d1,BuildSpr_DrawLoop			; repeat for next sprite

	BuildSpr_Done:
		rts
; ===========================================================================
; loc_16854:
BuildSpr_FlipX:
		btst	#render_yflip_bit,d4			; is it to be Y-flipped as well?
		bne.w	BuildSpr_FlipXY				; if it is, branch

	.loop:
    if FixBugs
		; See the bugfix under 'BuildSpr_DrawLoop'.
		cmpi.b	#countof_max_sprites,d5			; has the sprite limit been reached?
		bhs.s	.return					; if it has, branch
    endc
		move.b	(a1)+,d0				; y position
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4				; size
		move.b	d4,(a2)+
		addq.b	#1,d5					; link
		move.b	d5,(a2)+
		move.w	(a1)+,d0				; art tile
		add.w	a3,d0
		eori.w	#$800,d0				; toggle xflip in VDP
		move.w	d0,(a2)+				; write to buffer
		addq.w	#2,a1
		move.w	(a1)+,d0
		neg.w	d0					; negate x-offset
		move.b	CellOffsets_XFlip(pc,d4.w),d4
		sub.w	d4,d0					; subtract sprite size
		add.w	d3,d0
		andi.w	#$1FF,d0				; keep within 512px
		bne.s	.x_not_0
		addq.w	#1,d0
	
	.x_not_0:
		move.w	d0,(a2)+
		dbf	d1,.loop
		
	.return:
		rts
; ===========================================================================
; offsets for horizontally mirrored sprite pieces
; in Sonic 1, these were calculated
CellOffsets_XFlip:
		dc.b   8,  8,  8,  8				; 4
		dc.b $10,$10,$10,$10				; 8
		dc.b $18,$18,$18,$18				; 12
		dc.b $20,$20,$20,$20				; 16
; offsets for vertically mirrored sprite pieces
; in Sonic 1, these were calculated
CellOffsets_YFlip:
		dc.b   8,$10,$18,$20				; 4
		dc.b   8,$10,$18,$20				; 8
		dc.b   8,$10,$18,$20				; 12
		dc.b   8,$10,$18,$20				; 16
; ===========================================================================
; loc_168B4:
BuildSpr_FlipY:
    if FixBugs
		; See the bugfix under 'BuildSpr_DrawLoop'.
		cmpi.b	#countof_max_sprites,d5			; has the sprite limit been reached?
		bhs.s	.return					; if it has, branch
    endc
		move.b	(a1)+,d0				; get y-offset
		move.b	(a1),d4					; get size
		ext.w	d0
		neg.w	d0					; negate y-offset
		move.b	CellOffsets_YFlip(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0					; add y-position
		move.w	d0,(a2)+				; write to buffer
		move.b	(a1)+,(a2)+				; size
		addq.b	#1,d5
		move.b	d5,(a2)+				; link
		move.w	(a1)+,d0				; art tile
		add.w	a3,d0
		eori.w	#$1000,d0				; toggle yflip in VDP
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0				; keep within 512px
		bne.s	.x_not_0
		addq.w	#1,d0

	.x_not_0:
		move.w	d0,(a2)+				; set X pos
		dbf	d1,BuildSpr_FlipY

	.return:
		rts
; ===========================================================================
; offsets for vertically mirrored sprite pieces
CellOffsets_YFlip2:
		dc.b   8,$10,$18,$20				; 4
		dc.b   8,$10,$18,$20				; 8
		dc.b   8,$10,$18,$20				; 12
		dc.b   8,$10,$18,$20				; 16
; ===========================================================================
; loc_168FC:
BuildSpr_FlipXY:

    if FixBugs
; See the bugfix under 'BuildSpr_DrawLoop'.
		cmpi.b	#80,d5					; has the sprite limit been reached?
		bhs.s	.return					; if it has, branch
    endc
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	CellOffsets_YFlip2(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4				; size
		move.b	d4,(a2)+				; link
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1800,d0				; toggle x/yflip in VDP
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		neg.w	d0
		move.b	CellOffsets_XFlip2(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0				; keep within 512px
		bne.s	.x_not_0
		addq.w	#1,d0

	.x_not_0:
		move.w	d0,(a2)+
		dbf	d1,BuildSpr_FlipXY
	
	.return:
		rts

; ===========================================================================
; offsets for horizontally mirrored sprite pieces
CellOffsets_XFlip2:
		dc.b   8,  8,  8,  8				; 4
		dc.b $10,$10,$10,$10				; 8
		dc.b $18,$18,$18,$18				; 12
		dc.b $20,$20,$20,$20				; 16
; ===========================================================================

BuildSprites_2P:				
		lea	(v_sprite_buffer).w,a2
		moveq	#2,d5
		moveq	#0,d4
		move.l	#$1D80F01,(a2)+
		move.l	#1,(a2)+
		move.l	#$1D80F02,(a2)+
		move.l	#0,(a2)+
		tst.b	(f_level_started).w
		beq.s	loc_1697C
		jsrto	BuildHUD_P1,JmpTo_BuildHUD_P1
		bsr.w	loc_171F8

loc_1697C:				
		lea	(v_sprite_queue).w,a4
		moveq	#7,d7

loc_16982:				
		move.w	(a4),d0
		beq.w	loc_16A5A
		move.w	d0,-(sp)
		moveq	#2,d6

loc_1698C:				
		movea.w	(a4,d6.w),a0
		tst.b	ost_id(a0)
		beq.w	loc_16A50
		andi.b	#(~render_onscreen)&$FF,ost_render(a0)
		move.b	ost_render(a0),d0
		move.b	d0,d4
		btst	#6,d0
		bne.w	loc_16B9A
		andi.w	#$C,d0
		beq.s	loc_16A00
		lea	(v_camera_x_pos).w,a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	ost_x_pos(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16A50
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.s	loc_16A50
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16A0E
		moveq	#0,d0
		move.b	ost_height(a0),d0
		move.w	ost_y_pos(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.s	loc_16A50
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.s	loc_16A50
		addi.w	#$100,d2
		bra.s	loc_16A2A
; ===========================================================================

loc_16A00:				
		move.w	ost_y_screen(a0),d2
		move.w	ost_x_screen(a0),d3
		addi.w	#$80,d2	
		bra.s	loc_16A2A
; ===========================================================================

loc_16A0E:				
		move.w	ost_y_pos(a0),d2
		sub.w	4(a1),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2
		bcs.s	loc_16A50
		cmpi.w	#$180,d2
		bcc.s	loc_16A50
		addi.w	#$80,d2	

loc_16A2A:				
					
		movea.l	ost_mappings(a0),a1
		moveq	#0,d1
		btst	#5,d4
		bne.s	loc_16A46
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16A4A

loc_16A46:				
		bsr.w	BuildSpr_Draw_2P

loc_16A4A:				
		ori.b	#render_onscreen,ost_render(a0)

loc_16A50:				
					
		addq.w	#2,d6
		subq.w	#2,(sp)
		bne.w	loc_1698C
		addq.w	#2,sp

loc_16A5A:				
		lea	$80(a4),a4
		dbf	d7,loc_16982
		move.b	d5,(v_spritecount).w
		cmpi.b	#$50,d5
		bcc.s	loc_16A74
		move.l	#0,(a2)
		bra.s	loc_16A7A
; ===========================================================================

loc_16A74:				
		move.b	#0,-5(a2)

loc_16A7A:				
					
		tst.w	(f_hblank).w
		bne.s	loc_16A7A
		lea	(v_sprite_queue_2).w,a2
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(f_level_started).w
		beq.s	loc_16A96
		jsrto	BuildHUD_P2,JmpTo_BuildHUD_P2
		bsr.w	loc_1720E

loc_16A96:				
		lea	(v_sprite_queue).w,a4
		moveq	#7,d7

loc_16A9C:				
		move.w	(a4),d0
		beq.w	loc_16B78
		move.w	d0,-(sp)
		moveq	#2,d6

loc_16AA6:				
		movea.w	(a4,d6.w),a0
		tst.b	ost_id(a0)
		beq.w	loc_16B64
		move.b	ost_render(a0),d0
		move.b	d0,d4
		btst	#6,d0
		bne.w	loc_16C84
		andi.w	#$C,d0
		beq.s	loc_16B14
		lea	(v_camera_x_pos_p2).w,a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	ost_x_pos(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16B64
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.s	loc_16B64
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16B22
		moveq	#0,d0
		move.b	ost_height(a0),d0
		move.w	ost_y_pos(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.s	loc_16B64
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.s	loc_16B64
		addi.w	#$1E0,d2
		bra.s	loc_16B3E
; ===========================================================================

loc_16B14:				
		move.w	ost_y_screen(a0),d2
		move.w	ost_x_screen(a0),d3
		addi.w	#screen_top+screen_height,d2
		bra.s	loc_16B3E
; ===========================================================================

loc_16B22:				
		move.w	ost_y_pos(a0),d2
		sub.w	4(a1),d2
		addi.w	#128,d2	
		cmpi.w	#128-32,d2
		bcs.s	loc_16B64
		cmpi.w	#32+128+224,d2
		bcc.s	loc_16B64
		addi.w	#128+224,d2

loc_16B3E:				
					
		movea.l	ost_mappings(a0),a1
		moveq	#0,d1
		btst	#5,d4
		bne.s	loc_16B5A
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16B5E

loc_16B5A:				
		bsr.w	BuildSpr_Draw_2P

loc_16B5E:				
		ori.b	#render_onscreen,ost_render(a0)

loc_16B64:				
					
		addq.w	#2,d6
		subq.w	#2,(sp)
		bne.w	loc_16AA6
		addq.w	#2,sp
		tst.b	(f_teleport_flag).w
		bne.s	loc_16B78
		move.w	#0,(a4)

loc_16B78:				
					
		lea	$80(a4),a4
		dbf	d7,loc_16A9C
		move.b	d5,(v_spritecount).w
		cmpi.b	#$50,d5
		beq.s	loc_16B92
		move.l	#0,(a2)
		rts	
; ===========================================================================

loc_16B92:				
		move.b	#0,-5(a2)
		rts	
; ===========================================================================

loc_16B9A:				
		move.l	a4,-(sp)
		lea	(v_camera_x_pos).w,a4
		movea.w	ost_tile(a0),a3
		movea.l	ost_mappings(a0),a5
		moveq	#0,d0
		move.b	ost_mainspr_width(a0),d0
		move.w	ost_x_pos(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16C7E
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.w	loc_16C7E
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16BFA
		moveq	#0,d0
		move.b	ost_mainspr_height(a0),d0
		move.w	ost_y_pos(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	loc_16C7E
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.w	loc_16C7E
		addi.w	#$100,d2
		bra.s	loc_16C16
; ===========================================================================

loc_16BFA:				
		move.w	ost_y_pos(a0),d2
		sub.w	4(a4),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2
		bcs.s	loc_16C7E
		cmpi.w	#$180,d2
		bcc.s	loc_16C7E
		addi.w	#$80,d2	

loc_16C16:				
		moveq	#0,d1
		move.b	ost_mainspr_frame(a0),d1
		beq.s	loc_16C34
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16C34
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16C34:				
					
		ori.b	#render_onscreen,ost_render(a0)
		lea	ost_subspr2_x_pos(a0),a6
		moveq	#0,d0
		move.b	ost_mainspr_childsprites(a0),d0
		subq.w	#1,d0
		bcs.s	loc_16C7E

loc_16C48:				
		swap	d0
		move.w	(a6)+,d3
		sub.w	(a4),d3
		addi.w	#$80,d3	
		move.w	(a6)+,d2
		sub.w	4(a4),d2
		addi.w	#$100,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16C78
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16C78:				
		swap	d0
		dbf	d0,loc_16C48

loc_16C7E:				
					
		movea.l	(sp)+,a4
		bra.w	loc_16A50
; ===========================================================================

loc_16C84:				
		move.l	a4,-(sp)
		lea	(v_camera_x_pos_p2).w,a4
		movea.w	ost_tile(a0),a3
		movea.l	ost_mappings(a0),a5
		moveq	#0,d0
		move.b	ost_mainspr_width(a0),d0
		move.w	ost_x_pos(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16D68
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.w	loc_16D68
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16CE4
		moveq	#0,d0
		move.b	ost_mainspr_height(a0),d0
		move.w	ost_y_pos(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	loc_16D68
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.w	loc_16D68
		addi.w	#$1E0,d2
		bra.s	loc_16D00
; ===========================================================================

loc_16CE4:				
		move.w	ost_y_pos(a0),d2
		sub.w	4(a4),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2
		bcs.s	loc_16D68
		cmpi.w	#$180,d2
		bcc.s	loc_16D68
		addi.w	#$160,d2

loc_16D00:				
		moveq	#0,d1
		move.b	ost_mainspr_frame(a0),d1
		beq.s	loc_16D1E
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16D1E
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16D1E:				
					
		ori.b	#render_onscreen,ost_render(a0)
		lea	ost_subspr2_x_pos(a0),a6
		moveq	#0,d0
		move.b	ost_mainspr_childsprites(a0),d0
		subq.w	#1,d0
		bcs.s	loc_16D68

loc_16D32:				
		swap	d0
		move.w	(a6)+,d3
		sub.w	(a4),d3
		addi.w	#$80,d3	
		move.w	(a6)+,d2
		sub.w	4(a4),d2
		addi.w	#$1E0,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16D62
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16D62:				
		swap	d0
		dbf	d0,loc_16D32

loc_16D68:				
					
		movea.l	(sp)+,a4
		bra.w	loc_16B64

; ===========================================================================


Adjust2PArtPointer:				
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.s	.return					; if not, return
		move.w	ost_tile(a0),d0				; get tile OST
		andi.w	#tile_vram,d0				; only need VRAM assignment
		lsr.w	#1,d0					; adjust VRAM assignment
		andi.w	#tile_settings,ost_tile(a0)		; clear VRAM assignment in OST
		add.w	d0,ost_tile(a0)				; replace with adjusted assignment	

	.return:				
		rts	

; ===========================================================================


Adjust2PArtPointer2:				
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.s	.return					; if not, return
		move.w	ost_tile(a1),d0				; get tile OST
		andi.w	#tile_vram,d0				; only need VRAM assignment
		lsr.w	#1,d0					; adjust VRAM assignment
		andi.w	#tile_settings,ost_tile(a1)		; clear VRAM assignment in OST
		add.w	d0,ost_tile(a1)				; replace with adjusted assignment	

	.return:				
		rts	


; ===========================================================================


sub_16DA6:				
					
		cmpi.b	#$50,d5
		bcs.s	BuildSpr_DrawLoop_2P
		rts	


; ===========================================================================


BuildSpr_Draw_2P:								
		movea.w	ost_tile(a0),a3
		cmpi.b	#$50,d5
		bcc.s	locret_16DF2
		btst	#0,d4
		bne.s	loc_16E04
		btst	#1,d4
		bne.w	loc_16E66

BuildSpr_DrawLoop_2P:				
					
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16DF4(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16DEC
		addq.w	#1,d0

loc_16DEC:				
		move.w	d0,(a2)+
		dbf	d1,BuildSpr_DrawLoop_2P

locret_16DF2:				
		rts	
; ===========================================================================
byte_16DF4:	
		dc.b   0					; 0
		dc.b   0					; 1
		dc.b   1					; 2
		dc.b   1					; 3
		dc.b   4					; 4
		dc.b   4					; 5
		dc.b   5					; 6
		dc.b   5					; 7
		dc.b   8					; 8
		dc.b   8					; 9
		dc.b   9					; 10
		dc.b   9					; 11
		dc.b  $C					; 12
		dc.b  $C					; 13
		dc.b  $D					; 14
		dc.b  $D					; 15
; ===========================================================================

loc_16E04:				
		btst	#1,d4
		bne.w	loc_16EC2

loc_16E0C:				
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16DF4(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$800,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		neg.w	d0
		move.b	byte_16E46(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16E3E
		addq.w	#1,d0

loc_16E3E:				
		move.w	d0,(a2)+
		dbf	d1,loc_16E0C
		rts	
; ===========================================================================
byte_16E46:	
		dc.b   8					; 0
		dc.b   8					; 1
		dc.b   8					; 2
		dc.b   8					; 3
		dc.b $10					; 4
		dc.b $10					; 5
		dc.b $10					; 6
		dc.b $10					; 7
		dc.b $18					; 8
		dc.b $18					; 9
		dc.b $18					; 10
		dc.b $18					; 11
		dc.b $20					; 12
		dc.b $20					; 13
		dc.b $20					; 14
		dc.b $20					; 15
		
byte_16E56:	
		dc.b   8					; 0
		dc.b $10					; 1
		dc.b $18					; 2
		dc.b $20					; 3
		dc.b   8					; 4
		dc.b $10					; 5
		dc.b $18					; 6
		dc.b $20					; 7
		dc.b   8					; 8
		dc.b $10					; 9
		dc.b $18					; 10
		dc.b $20					; 11
		dc.b   8					; 12
		dc.b $10					; 13
		dc.b $18					; 14
		dc.b $20					; 15
; ===========================================================================

loc_16E66:				
					
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	byte_16E56(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16EA2(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1000,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16E9A
		addq.w	#1,d0

loc_16E9A:				
		move.w	d0,(a2)+
		dbf	d1,loc_16E66
		rts	
; ===========================================================================
byte_16EA2:	
		dc.b   0					; 0
		dc.b   0					; 1
		dc.b   1					; 2
		dc.b   1					; 3
		dc.b   4					; 4
		dc.b   4					; 5
		dc.b   5					; 6
		dc.b   5					; 7
		dc.b   8					; 8
		dc.b   8					; 9
		dc.b   9					; 10
		dc.b   9					; 11
		dc.b  $C					; 12
		dc.b  $C					; 13
		dc.b  $D					; 14
		dc.b  $D					; 15

byte_16EB2:	
		dc.b   8					; 0
		dc.b $10					; 1
		dc.b $18					; 2
		dc.b $20					; 3
		dc.b   8					; 4
		dc.b $10					; 5
		dc.b $18					; 6
		dc.b $20					; 7
		dc.b   8					; 8
		dc.b $10					; 9
		dc.b $18					; 10
		dc.b $20					; 11
		dc.b   8					; 12
		dc.b $10					; 13
		dc.b $18					; 14
		dc.b $20					; 15
; ===========================================================================

loc_16EC2:				
					
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	byte_16EB2(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16EA2(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1800,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		neg.w	d0
		move.b	byte_16F06(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16EFE
		addq.w	#1,d0

loc_16EFE:				
		move.w	d0,(a2)+
		dbf	d1,loc_16EC2
		rts	

; ===========================================================================
byte_16F06:	
		dc.b   8					; 0
		dc.b   8					; 1
		dc.b   8					; 2
		dc.b   8					; 3
		dc.b $10					; 4
		dc.b $10					; 5
		dc.b $10					; 6
		dc.b $10					; 7
		dc.b $18					; 8
		dc.b $18					; 9
		dc.b $18					; 10
		dc.b $18					; 11
		dc.b $20					; 12
		dc.b $20					; 13
		dc.b $20					; 14
		dc.b $20					; 15
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused Sonic 1 leftover: subroutine to check if an object is off screen

; output:
;	d0.l = flag set if object is off screen
;	d1.w = y pos of object relative to screen

; usage:
;		bsr.w	CheckOffScreen
;		bne.s	.offscreen				; branch if off screen
; ---------------------------------------------------------------------------
CheckOffScreen:
		move.w	ost_x_pos(a0),d0
		sub.w	(v_camera_x_pos).w,d0
		bmi.s	.offscreen
		cmpi.w	#$140,d0
		bge.s	.offscreen
		move.w	ost_y_pos(a0),d1
		sub.w	(v_camera_y_pos).w,d1
		bmi.s	.offscreen
		cmpi.w	#$E0,d1	
		bge.s	.offscreen
		moveq	#0,d0
		rts	

	.offscreen:							
		moveq	#1,d0
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Unuused Sonic 1 leftover: Subroutine to check if an object is off screen
; More precise than above subroutine, taking width into account

; output:
;	d0.l = flag set if object is off screen
;	d1.w = y pos of object relative to screen

;	uses d1.l

; usage:
;		bsr.w	CheckOffScreen_Wide
;		bne.s	.offscreen				; branch if off screen
; ---------------------------------------------------------------------------
CheckOffScreen_Wide:
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	ost_x_pos(a0),d0
		sub.w	(v_camera_x_pos).w,d0
		add.w	d1,d0
		bmi.s	.offscreen
		add.w	d1,d1
		sub.w	d1,d0
		cmpi.w	#$140,d0
		bge.s	.offscreen
		move.w	ost_y_pos(a0),d1
		sub.w	(v_camera_y_pos).w,d1
		bmi.s	.offscreen
		cmpi.w	#$E0,d1	
		bge.s	.offscreen
		moveq	#0,d0
		rts	

.offscreen:								
		moveq	#1,d0
		rts	
		
; ===========================================================================
 
    if Revision=1
		nop
    endc

    if RemoveJmpTos=0
JmpTo_BuildHUD:							; JmpTo
		jmp	BuildHUD
JmpTo_BuildHUD_P1:						; JmpTo
		jmp	BuildHUD_P1
JmpTo_BuildHUD_P2:						; JmpTo
		jmp	BuildHUD_P2

		align 4
    endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Pseudo-object that manages where rings are placed onscreen
; as you move through the level, and otherwise updates them.
; ----------------------------------------------------------------------------
RingsManager:				
		moveq	#0,d0
		move.b	(v_ring_manager_routine).w,d0
		move.w	off_16F96(pc,d0.w),d0
		jmp	off_16F96(pc,d0.w)
; ===========================================================================
off_16F96:	dc.w loc_16F9A-off_16F96			; 0 
		dc.w loc_16FDE-off_16F96			; 1
; ===========================================================================

loc_16F9A:				
		addq.b	#2,(v_ring_manager_routine).w
		bsr.w	loc_172A4
		lea	(v_ring_positions).w,a1
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_16FB6
		moveq	#1,d4
		bra.s	loc_16FB6
; ===========================================================================

loc_16FB2:				
		lea	6(a1),a1

loc_16FB6:				
		cmp.w	2(a1),d4
		bhi.s	loc_16FB2
		move.w	a1,(v_ring_start).w
		move.w	a1,(v_ring_start_p2).w
		addi.w	#$150,d4
		bra.s	loc_16FCE
; ===========================================================================

loc_16FCA:				
		lea	6(a1),a1

loc_16FCE:				
		cmp.w	2(a1),d4
		bhi.s	loc_16FCA
		move.w	a1,(v_ring_end).w
		move.w	a1,(v_ring_end_p2).w
		rts	
; ===========================================================================

loc_16FDE:				
		lea	(v_ring_consumption_table).w,a2
		move.w	(a2)+,d1
		subq.w	#1,d1
		bcs.s	loc_17014

loc_16FE8:				
		move.w	(a2)+,d0
		beq.s	loc_16FE8
		movea.w	d0,a1
		subq.b	#1,(a1)
		bne.s	loc_17010
		move.b	#6,(a1)
		addq.b	#1,1(a1)
		cmpi.b	#8,1(a1)
		bne.s	loc_17010
		move.w	#-1,(a1)
		move.w	#0,-2(a2)
		subq.w	#1,(v_ring_consumption_table).w

loc_17010:				
		dbf	d1,loc_16FE8

loc_17014:				
		movea.w	(v_ring_start).w,a1
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_17028
		moveq	#1,d4
		bra.s	loc_17028
; ===========================================================================

loc_17024:				
		lea	6(a1),a1

loc_17028:				
		cmp.w	2(a1),d4
		bhi.s	loc_17024
		bra.s	loc_17032
; ===========================================================================

loc_17030:				
		subq.w	#6,a1

loc_17032:				
		cmp.w	-4(a1),d4
		bls.s	loc_17030
		move.w	a1,(v_ring_start).w
		movea.w	(v_ring_end).w,a2
		addi.w	#$150,d4
		bra.s	loc_1704A
; ===========================================================================

loc_17046:				
		lea	6(a2),a2

loc_1704A:				
		cmp.w	2(a2),d4
		bhi.s	loc_17046
		bra.s	loc_17054
; ===========================================================================

loc_17052:				
		subq.w	#6,a2

loc_17054:				
		cmp.w	-4(a2),d4
		bls.s	loc_17052
		move.w	a2,(v_ring_end).w

loc_1705E:
		tst.w	(f_two_player).w
		bne.s	loc_1706E
		move.w	a1,(v_ring_start_p2).w
		move.w	a2,(v_ring_end_p2).w
		rts	
; ===========================================================================

loc_1706E:				
		movea.w	(v_ring_start_p2).w,a1
		move.w	(v_camera_x_pos_p2).w,d4
		subq.w	#8,d4
		bhi.s	loc_17082
		moveq	#1,d4
		bra.s	loc_17082
; ===========================================================================

loc_1707E:				
		lea	6(a1),a1

loc_17082:				
		cmp.w	2(a1),d4
		bhi.s	loc_1707E
		bra.s	loc_1708C
; ===========================================================================

loc_1708A:				
		subq.w	#6,a1

loc_1708C:				
		cmp.w	-4(a1),d4
		bls.s	loc_1708A
		move.w	a1,(v_ring_start_p2).w
		movea.w	(v_ring_end_p2).w,a2
		addi.w	#$150,d4
		bra.s	loc_170A4
; ===========================================================================

loc_170A0:				
		lea	6(a2),a2

loc_170A4:				
		cmp.w	2(a2),d4
		bhi.s	loc_170A0
		bra.s	loc_170AE
; ===========================================================================

loc_170AC:				
		subq.w	#6,a2

loc_170AE:				
		cmp.w	-4(a2),d4
		bls.s	loc_170AC
		move.w	a2,(v_ring_end_p2).w
		rts	
; ===========================================================================
; loc_170BA: 
Touch_Rings:				
		movea.w	(v_ring_start).w,a1
		movea.w	(v_ring_end).w,a2
		cmpa.w	#-$5000,a0
		beq.s	loc_170D0
		movea.w	(v_ring_start_p2).w,a1
		movea.w	(v_ring_end_p2).w,a2

loc_170D0:				
		cmpa.l	a1,a2
		beq.w	locret_17166
		cmpi.w	#$5A,$30(a0)
		bcc.w	locret_17166
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		subi_.w	#8,d2
		moveq	#0,d5
		move.b	ost_height(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0)
		bne.s	loc_17104
		addi.w	#$C,d3
		moveq	#$A,d5

loc_17104:				
		move.w	#6,d1
		move.w	#$C,d6
		move.w	#$10,d4
		add.w	d5,d5

loc_17112:				
		tst.w	(a1)
		bne.w	loc_1715C
		move.w	2(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_1712A
		add.w	d6,d0
		bcs.s	loc_17130
		bra.w	loc_1715C
; ===========================================================================

loc_1712A:				
		cmp.w	d4,d0
		bhi.w	loc_1715C

loc_17130:				
		move.w	4(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_17142
		add.w	d6,d0
		bcs.s	loc_17148
		bra.w	loc_1715C
; ===========================================================================

loc_17142:				
		cmp.w	d5,d0
		bhi.w	loc_1715C

loc_17148:				
		move.w	#$604,(a1)
		bsr.s	loc_17168
		lea	(v_ring_consumption_table+2).w,a3

loc_17152:				
		tst.w	(a3)+
		bne.s	loc_17152
		move.w	a1,-(a3)
		addq.w	#1,(v_ring_consumption_table).w

loc_1715C:				
		lea	6(a1),a1
		cmpa.l	a1,a2
		bne.w	loc_17112

locret_17166:				
		rts	
; ===========================================================================

loc_17168:				
		subq.w	#1,(v_perfect_rings_left).w
		cmpa.w	#v_ost_player1,a0
		beq.w	loc_11FC8
		bra.w	loc_1201E
; ===========================================================================

BuildRings:				
		movea.w	(v_ring_start).w,a0
		movea.w	(v_ring_end).w,a4
		cmpa.l	a0,a4
		bne.s	loc_17186
		rts	
; ===========================================================================

loc_17186:				
		lea	(v_camera_x_pos).w,a3

loc_1718A:				
		tst.w	(a0)
		bmi.w	loc_171EC
		move.w	2(a0),d3
		sub.w	(a3),d3
		addi.w	#$80,d3	
		move.w	4(a0),d2
		sub.w	4(a3),d2
		
	if FixBugs
		addi_.w	#8,d2
		andi.w	#$7FF,d2
    else
		; Note that this 'andi' occurs *before* an 'addi'. This can cause
		; 'd2' to wrap incorrectly. This defect is the reason why rings
		; disappear when they go halfway off the top of the screen.
		andi.w	#$7FF,d2
		addi_.w	#8,d2
    endc
    
		bmi.s	loc_171EC
		cmpi.w	#$F0,d2	
		bge.s	loc_171EC
		addi.w	#$78,d2
		lea	(Map_Rings).l,a1
		moveq	#0,d1
		move.b	1(a0),d1
		bne.s	loc_171C8
		move.b	(v_syncani_1_frame).w,d1

loc_171C8:				
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		addi.w	#$26BC,d0
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a2)+

loc_171EC:				
		lea	6(a0),a0
		cmpa.l	a0,a4
		bne.w	loc_1718A
		rts	
; ===========================================================================

loc_171F8:				
		lea	(v_camera_x_pos).w,a3
		move.w	#$78,d6
		movea.w	(v_ring_start).w,a0
		movea.w	(v_ring_end).w,a4
		cmpa.l	a0,a4
		bne.s	loc_17224
		rts	
; ===========================================================================

loc_1720E:				
		lea	(v_camera_x_pos_p2).w,a3
		move.w	#$158,d6
		movea.w	(v_ring_start_p2).w,a0
		movea.w	(v_ring_end_p2).w,a4
		cmpa.l	a0,a4
		bne.s	loc_17224
		rts	
; ===========================================================================

loc_17224:				
		tst.w	(a0)
		bmi.w	loc_17288
		move.w	2(a0),d3
		sub.w	(a3),d3
		addi.w	#$80,d3	
		move.w	4(a0),d2
		sub.w	4(a3),d2
		andi.w	#$7FF,d2
		addi.w	#$88,d2	
		bmi.s	loc_17288
		cmpi.w	#$170,d2
		bge.s	loc_17288
		add.w	d6,d2
		lea	(Map_Rings).l,a1
		moveq	#0,d1
		move.b	1(a0),d1
		bne.s	loc_17260
		move.b	(v_syncani_1_frame).w,d1

loc_17260:				
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_17294(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		addi.w	#$235E,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a2)+

loc_17288:				
		lea	6(a0),a0
		cmpa.l	a0,a4
		bne.w	loc_17224
		rts	
; ===========================================================================
byte_17294:	
		dc.b   0					; 0
		dc.b   0					; 1
		dc.b   1					; 2
		dc.b   1					; 3
		dc.b   4					; 4
		dc.b   4					; 5
		dc.b   5					; 6
		dc.b   5					; 7
		dc.b   8					; 8
		dc.b   8					; 9
		dc.b   9					; 10
		dc.b   9					; 11
		dc.b  $C					; 12
		dc.b  $C					; 13
		dc.b  $D					; 14
		dc.b  $D					; 15
; ===========================================================================

loc_172A4:				
		lea	(v_ring_positions).w,a1
		moveq	#0,d0
		move.w	#$17F,d1

loc_172AE:				
		move.l	d0,(a1)+
		dbf	d1,loc_172AE
		lea	(v_ring_consumption_table).w,a1
		move.w	#$F,d1

loc_172BC:				
		move.l	d0,(a1)+
		dbf	d1,loc_172BC
		moveq	#0,d5
		moveq	#0,d0
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(RingPos_Index).l,a1
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		lea	($FFFFE806).w,a2

loc_172E0:				
		move.w	(a1)+,d2
		bmi.s	loc_17328
		move.w	(a1)+,d3
		bmi.s	loc_17308
		move.w	d3,d0
		rol.w	#4,d0
		andi.w	#7,d0
		andi.w	#$FFF,d3

loc_172F4:				
		move.w	#0,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addi.w	#$18,d2
		addq.w	#1,d5
		dbf	d0,loc_172F4
		bra.s	loc_172E0
; ===========================================================================

loc_17308:				
		move.w	d3,d0
		rol.w	#4,d0
		andi.w	#7,d0
		andi.w	#$FFF,d3

loc_17314:				
		move.w	#0,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addi.w	#$18,d3
		addq.w	#1,d5
		dbf	d0,loc_17314
		bra.s	loc_172E0
; ===========================================================================

loc_17328:				
		move.w	d5,(v_perfect_rings_left).w
		move.w	#0,(f_ss_perfect).w
		moveq	#-1,d0
		move.l	d0,(a2)+
		lea	($FFFFE802).w,a1
		move.w	#$FE,d3	

loc_1733E:				
		move.w	d3,d4
		lea	6(a1),a2
		move.w	(a1),d0

loc_17346:				
		tst.w	(a2)
		beq.s	loc_17358
		cmp.w	(a2),d0
		bls.s	loc_17358
		move.l	(a1),d1
		move.l	(a2),d0
		move.l	d0,(a1)
		move.l	d1,(a2)
		swap	d0

loc_17358:				
		lea	6(a2),a2
		dbf	d4,loc_17346
		lea	6(a1),a1
		dbf	d3,loc_1733E
		rts	
; ===========================================================================

		include	"mappings/sprite/Rings.asm"

; ===========================================================================

	if RemoveJmpTos=0
		align 4
	endc		

; ===========================================================================

; loc_173BC:
SpecialCNZBumpers:					
		moveq	#0,d0
		move.b	(v_cnz_bumper_routine).w,d0
		move.w	off_173CA(pc,d0.w),d0
		jmp	off_173CA(pc,d0.w)
; ===========================================================================
off_173CA:	
		dc.w loc_173CE-off_173CA			; 0 
		dc.w loc_17422-off_173CA			; 1
; ===========================================================================

loc_173CE:				
		addq.b	#2,(v_cnz_bumper_routine).w
		lea	(byte_1781A).l,a1
		tst.b	(v_act).w
		beq.s	loc_173E4
		lea	(byte_1795E).l,a1

loc_173E4:				
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_173F4
		moveq	#1,d4
		bra.s	loc_173F4
; ===========================================================================

loc_173F0:				
		lea	6(a1),a1

loc_173F4:				
		cmp.w	2(a1),d4
		bhi.s	loc_173F0
		move.l	a1,(v_cnz_visible_bumpers_start).w
		move.l	a1,(v_cnz_visible_bumpers_start_p2).w
		addi.w	#$150,d4
		bra.s	loc_1740C
; ===========================================================================

loc_17408:				
		lea	6(a1),a1

loc_1740C:				
		cmp.w	2(a1),d4
		bhi.s	loc_17408
		move.l	a1,(v_cnz_visible_bumpers_end).w
		move.l	a1,(v_cnz_visible_bumpers_end_p2).w
		move.b	#1,(f_unused_cnz_bumper).w
		rts	
; ===========================================================================

loc_17422:				
		movea.l	(v_cnz_visible_bumpers_start).w,a1
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_17436
		moveq	#1,d4
		bra.s	loc_17436
; ===========================================================================

loc_17432:				
		lea	6(a1),a1

loc_17436:				
		cmp.w	2(a1),d4
		bhi.s	loc_17432
		bra.s	loc_17440
; ===========================================================================

loc_1743E:				
		subq.w	#6,a1

loc_17440:				
		cmp.w	-4(a1),d4
		bls.s	loc_1743E
		move.l	a1,(v_cnz_visible_bumpers_start).w
		movea.l	(v_cnz_visible_bumpers_end).w,a2
		addi.w	#$150,d4
		bra.s	loc_17458
; ===========================================================================

loc_17454:				
		lea	6(a2),a2

loc_17458:				
		cmp.w	2(a2),d4
		bhi.s	loc_17454
		bra.s	loc_17462
; ===========================================================================

loc_17460:				
		subq.w	#6,a2

loc_17462:				
		cmp.w	-4(a2),d4
		bls.s	loc_17460
		move.l	a2,(v_cnz_visible_bumpers_end).w
		tst.w	(f_two_player).w
		bne.s	loc_1747C
		move.l	a1,(v_cnz_visible_bumpers_start_p2).w
		move.l	a2,(v_cnz_visible_bumpers_end_p2).w
		rts	
; ===========================================================================

loc_1747C:				
		movea.l	(v_cnz_visible_bumpers_start_p2).w,a1
		move.w	(v_camera_x_pos_p2).w,d4
		subq.w	#8,d4
		bhi.s	loc_17490
		moveq	#1,d4
		bra.s	loc_17490
; ===========================================================================

loc_1748C:				
		lea	6(a1),a1

loc_17490:				
		cmp.w	2(a1),d4
		bhi.s	loc_1748C
		bra.s	loc_1749A
; ===========================================================================

loc_17498:				
		subq.w	#6,a1

loc_1749A:				
		cmp.w	-4(a1),d4
		bls.s	loc_17498
		move.l	a1,(v_cnz_visible_bumpers_start_p2).w
		movea.l	(v_cnz_visible_bumpers_end_p2).w,a2
		addi.w	#$150,d4
		bra.s	loc_174B2
; ===========================================================================

loc_174AE:				
		lea	6(a2),a2

loc_174B2:				
		cmp.w	2(a2),d4
		bhi.s	loc_174AE
		bra.s	loc_174BC
; ===========================================================================

loc_174BA:				
		subq.w	#6,a2

loc_174BC:				
		cmp.w	-4(a2),d4
		bls.s	loc_174BA
		move.l	a2,(v_cnz_visible_bumpers_end_p2).w
		rts	
; ===========================================================================

React_CNZBumpers:				
		movea.l	(v_cnz_visible_bumpers_start).w,a1
		movea.l	(v_cnz_visible_bumpers_end).w,a2
		cmpa.w	#-$5000,a0
		beq.s	loc_174DE
		movea.l	(v_cnz_visible_bumpers_start_p2).w,a1
		movea.l	(v_cnz_visible_bumpers_end_p2).w,a2

loc_174DE:				
		cmpa.l	a1,a2
		beq.w	locret_17578
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		subi.w	#9,d2
		moveq	#0,d5
		move.b	ost_height(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0)
		bne.s	loc_17508
		addi.w	#$C,d3
		moveq	#$A,d5

loc_17508:				
		move.w	#$12,d4
		add.w	d5,d5

loc_1750E:				
		move.w	(a1),d0
		andi.w	#$E,d0
		lea	byte_17558(pc,d0.w),a3
		moveq	#0,d1
		move.b	(a3)+,d1
		move.w	2(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_17530
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_17536
		bra.w	loc_1756E
; ===========================================================================

loc_17530:				
		cmp.w	d4,d0
		bhi.w	loc_1756E

loc_17536:				
		moveq	#0,d1
		move.b	(a3)+,d1
		move.w	4(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_17550
		add.w	d1,d1
		add.w	d1,d0
		bcs.w	loc_17564
		bra.w	loc_1756E
; ===========================================================================

loc_17550:				
		cmp.w	d5,d0
		bhi.w	loc_1756E
		bra.s	loc_17564
; ===========================================================================
byte_17558:
		dc.b $20					; 0
		dc.b $20					; 1
		dc.b $20					; 2
		dc.b $20					; 3
		dc.b $40					; 4
		dc.b   8					; 5
		dc.b $40					; 6
		dc.b   8					; 7
		dc.b   8					; 8
		dc.b $40					; 9
		dc.b   8					; 10
		dc.b $40					; 11
; ===========================================================================

loc_17564:				
		move.w	(a1),d0
		move.w	off_1757A(pc,d0.w),d0
		jmp	off_1757A(pc,d0.w)
; ===========================================================================

loc_1756E:				
		lea	6(a1),a1
		cmpa.l	a1,a2
		bne.w	loc_1750E

locret_17578:				
		rts	
; ===========================================================================
off_1757A:	
		dc.w loc_17586-off_1757A			; 0 
		dc.w loc_17638-off_1757A			; 1
		dc.w loc_1769E-off_1757A			; 2
		dc.w loc_176F6-off_1757A			; 3
		dc.w loc_1774C-off_1757A			; 4
		dc.w loc_177A4-off_1757A			; 5
; ===========================================================================

loc_17586:				
		move.w	4(a1),d0
		sub.w	ost_y_pos(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0
		blt.s	loc_175A0
		move.w	#$A00,ost_y_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_175A0:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0
		blt.s	loc_175BA
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_175BA:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmpi.w	#$20,d0
		blt.s	loc_175CC
		move.w	#$20,d0

loc_175CC:				
		add.w	4(a1),d0
		subq.w	#8,d0
		move.w	ost_y_pos(a0),d1
		addi.w	#$E,d1
		sub.w	d1,d0
		bcc.s	locret_175E8
		move.w	#$20,d3
		bsr.s	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

locret_175E8:				
		rts	
; ===========================================================================

loc_175EA:				
		move.w	ost_x_vel(a0),d1
		move.w	ost_y_vel(a0),d2
		jsr	(CalcAngle).l
		move.b	d0,(v_cnz_bumper_debug1).w
		sub.w	d3,d0
		move.w	d0,d1
		bpl.s	loc_17604
		neg.w	d1

loc_17604:				
		neg.w	d0
		add.w	d3,d0
		move.b	d0,(v_cnz_bumper_debug2).w
		move.b	d1,(v_cnz_bumper_debug4).w
		cmpi.b	#$38,d1
		bcs.s	loc_17618
		move.w	d3,d0

loc_17618:				
		move.b	d0,(v_cnz_bumper_debug3).w
		jsr	CalcSine
		muls.w	#-$A00,d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a0)
		muls.w	#-$A00,d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_17638:				
		move.w	4(a1),d0
		sub.w	ost_y_pos(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0
		blt.s	loc_17652
		move.w	#$A00,ost_y_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17652:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmpi.w	#$20,d0
		blt.s	loc_1766A
		move.w	#-$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_1766A:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0
		blt.s	loc_1767E
		move.w	#$20,d0

loc_1767E:				
		add.w	4(a1),d0
		subq.w	#8,d0
		move.w	ost_y_pos(a0),d1
		addi.w	#$E,d1
		sub.w	d1,d0
		bcc.s	locret_1769C
		move.w	#$60,d3
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

locret_1769C:				
		rts	
; ===========================================================================

loc_1769E:				
		move.w	4(a1),d0
		sub.w	ost_y_pos(a0),d0
		neg.w	d0
		cmpi.w	#8,d0
		blt.s	loc_176B8
		move.w	#$A00,ost_y_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_176B8:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmpi.w	#$40,d0
		blt.s	loc_176D0
		move.w	#-$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_176D0:				
		neg.w	d0
		cmpi.w	#$40,d0
		blt.s	loc_176E2
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_176E2:				
		move.w	#$38,d3
		tst.w	d0
		bmi.s	loc_176EE
		move.w	#$48,d3

loc_176EE:				
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

loc_176F6:				
		move.w	4(a1),d0
		sub.w	ost_y_pos(a0),d0
		cmpi.w	#8,d0
		blt.s	loc_1770E
		move.w	#-$A00,ost_y_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_1770E:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmpi.w	#$40,d0
		blt.s	loc_17726
		move.w	#-$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17726:				
		neg.w	d0
		cmpi.w	#$40,d0
		blt.s	loc_17738
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17738:				
		move.w	#$C8,d3	
		tst.w	d0
		bmi.s	loc_17744
		move.w	#$B8,d3	

loc_17744:				
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

loc_1774C:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		neg.w	d0
		cmpi.w	#8,d0
		blt.s	loc_17766
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17766:				
		move.w	4(a1),d0
		sub.w	ost_y_pos(a0),d0
		cmpi.w	#$40,d0
		blt.s	loc_1777E
		move.w	#-$A00,ost_y_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_1777E:				
		neg.w	d0
		cmpi.w	#$40,d0
		blt.s	loc_17790
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17790:				
		move.w	#8,d3
		tst.w	d0
		bmi.s	loc_1779C
		move.w	#$F8,d3	

loc_1779C:				
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

loc_177A4:				
		move.w	2(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmpi.w	#8,d0
		blt.s	loc_177BC
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_177BC:				
		move.w	4(a1),d0
		sub.w	ost_y_pos(a0),d0
		cmpi.w	#$40,d0
		blt.s	loc_177D4
		move.w	#-$A00,ost_y_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_177D4:				
		neg.w	d0
		cmpi.w	#$40,d0
		blt.s	loc_177E6
		move.w	#$A00,ost_x_vel(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_177E6:				
		move.w	#$78,d3
		tst.w	d0
		bmi.s	loc_177F2
		move.w	#$88,d3	

loc_177F2:				
		bsr.w	loc_175EA
		bra.w	*+4

loc_177FA:				
		bset	#1,$22(a0)
		bclr	#4,$22(a0)
		bclr	#5,$22(a0)
		clr.b	$3C(a0)
		move.w	#$D9,d0	
		jmp	PlaySound
; ===========================================================================
byte_1781A:	
    if FixBugs
		; Sonic Team forgot to start this file with a boundary marker,
		; meaning the game could potentially read past the start of the file
		; and load random bumpers.
		dc.w	$0000, $0000, $0000
   	endc	
		incbin	"level/objects/CNZ 1 Bumpers.bin"

byte_1795E:		
		incbin	"level/objects/CNZ 2 Bumpers.bin"
; ===========================================================================

	if Revision<2
		nop	
	endc



; ===========================================================================
; ---------------------------------------------------------------------------
; Objects Manager
; Subroutine that keeps track of any objects that need to remember
; their state, such as monitors or enemies.
;
; input variables:
;  -none-
;
; writes:
;  d0, d1
;  d2 = respawn index of object to load
;  d6 = camera position
;
;  a0 = address in object placement list
;  a2 = respawn table
; ---------------------------------------------------------------------------

; loc_17AA4: ObjectsManager:
ObjPosLoad:
		moveq	#0,d0
		move.b	(v_opl_routine).w,d0
		move.w	OPL_Index(pc,d0.w),d0
		jmp	OPL_Index(pc,d0.w)
; ===========================================================================
; ObjectsManager_States:
OPL_Index:	index offset(*),,2
		ptr OPL_Init		; 0 
		ptr loc_17B84		; 2
		ptr loc_17CCC		; 4
; ===========================================================================
; loc_17AB8: ObjectsManager_Init:
OPL_Init:				
		addq.b	#2,(v_opl_routine).w
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(ObjPos_Index).l,a0
		movea.l	a0,a1
		adda.w	(a0,d0.w),a0
		tst.w	(f_two_player).w
		beq.s	loc_17AF0
		cmpi.b	#$C,(v_zone).w
		bne.s	loc_17AF0
		lea	(ObjPos_CNZ_1_2P).l,a0
		tst.b	(v_act).w
		beq.s	loc_17AF0
		lea	(ObjPos_CNZ_2_2P).l,a0

loc_17AF0:				
		move.l	a0,(v_opl_ptr_right).w
		move.l	a0,(v_opl_ptr_left).w
		move.l	a0,(v_opl_ptr_right_p2).w
		move.l	a0,(v_opl_ptr_left_p2).w
		lea	(v_respawn_list).w,a2
		move.w	#$101,(a2)+
	
	if FixBugs
		move.w	#(sizeof_v_respawn_data/4)-1,d0	
	else	
		; The loop counter mistakenly uses the number of loops to clear the data using
		; words, not longwords! This causes it to clear $17C bytes rather than $BE.
		move.w	#(sizeof_v_respawn_data/2)-1,d0
	endc
	
	loc_17B0C:				
		clr.l	(a2)+
		dbf	d0,loc_17B0C
		
    if FixBugs
		; Clear the last word, since the above loop only does longwords.
    	if sizeof_v_respawn_data&2
		clr.w	(a2)+
    	endc
    endc
    		
		lea	(v_respawn_list).w,a2
		moveq	#0,d2
		move.w	(v_camera_x_pos).w,d6
		subi.w	#$80,d6	
		bcc.s	loc_17B24
		moveq	#0,d6

loc_17B24:				
		andi.w	#-$80,d6
		movea.l	(v_opl_ptr_right).w,a0

loc_17B2C:				
		cmp.w	(a0),d6
		bls.s	loc_17B3E
		tst.b	2(a0)
		bpl.s	loc_17B3A
		move.b	(a2),d2
		addq.b	#1,(a2)

loc_17B3A:				
		addq.w	#6,a0
		bra.s	loc_17B2C
; ===========================================================================

loc_17B3E:				
		move.l	a0,(v_opl_ptr_right).w
		move.l	a0,(v_opl_ptr_right_p2).w
		movea.l	(v_opl_ptr_left).w,a0
		subi.w	#$80,d6	
		bcs.s	loc_17B62

loc_17B50:				
		cmp.w	(a0),d6
		bls.s	loc_17B62
		tst.b	2(a0)
		bpl.s	loc_17B5E
		addq.b	#1,1(a2)

loc_17B5E:				
		addq.w	#6,a0
		bra.s	loc_17B50
; ===========================================================================

loc_17B62:				
		move.l	a0,(v_opl_ptr_left).w
		move.l	a0,(v_opl_ptr_left_p2).w
		move.w	#-1,(v_opl_screen_x_pos).w
		move.w	#-1,(v_opl_screen_x_pos_p2).w
		tst.w	(f_two_player).w
		beq.s	loc_17B84
		addq.b	#2,(v_opl_routine).w
		bra.w	loc_17C50
; ===========================================================================

loc_17B84:				
					
		move.w	(v_camera_x_pos).w,d1
		subi.w	#$80,d1	
		andi.w	#-$80,d1
		move.w	d1,(v_camera_x_pos_coarse).w
		lea	(v_respawn_list).w,a2
		moveq	#0,d2
		move.w	(v_camera_x_pos).w,d6
		andi.w	#-$80,d6
		cmp.w	(v_opl_screen_x_pos).w,d6
		beq.w	locret_17C4E
		bge.s	loc_17C0A
		move.w	d6,(v_opl_screen_x_pos).w
		movea.l	(v_opl_ptr_left).w,a0
		subi.w	#$80,d6	
		bcs.s	loc_17BE6

loc_17BBA:				
		cmp.w	-6(a0),d6
		bge.s	loc_17BE6
		subq.w	#6,a0
		tst.b	2(a0)
		bpl.s	loc_17BD0
		subq.b	#1,1(a2)
		move.b	1(a2),d2

loc_17BD0:				
		bsr.w	loc_17F36
		bne.s	loc_17BDA
		subq.w	#6,a0
		bra.s	loc_17BBA
; ===========================================================================

loc_17BDA:				
		tst.b	2(a0)
		bpl.s	loc_17BE4
		addq.b	#1,1(a2)

loc_17BE4:				
		addq.w	#6,a0

loc_17BE6:				
		move.l	a0,(v_opl_ptr_left).w
		movea.l	(v_opl_ptr_right).w,a0
		addi.w	#$300,d6

loc_17BF2:				
		cmp.w	-6(a0),d6
		bgt.s	loc_17C04
		tst.b	-4(a0)
		bpl.s	loc_17C00
		subq.b	#1,(a2)

loc_17C00:				
		subq.w	#6,a0
		bra.s	loc_17BF2
; ===========================================================================

loc_17C04:				
		move.l	a0,(v_opl_ptr_right).w
		rts	
; ===========================================================================

loc_17C0A:				
		move.w	d6,(v_opl_screen_x_pos).w
		movea.l	(v_opl_ptr_right).w,a0
		addi.w	#$280,d6

loc_17C16:				
		cmp.w	(a0),d6
		bls.s	loc_17C2A
		tst.b	2(a0)
		bpl.s	loc_17C24
		move.b	(a2),d2
		addq.b	#1,(a2)

loc_17C24:				
		bsr.w	loc_17F36
		beq.s	loc_17C16

loc_17C2A:				
		move.l	a0,(v_opl_ptr_right).w
		movea.l	(v_opl_ptr_left).w,a0
		subi.w	#$300,d6
		bcs.s	loc_17C4A

loc_17C38:				
		cmp.w	(a0),d6
		bls.s	loc_17C4A
		tst.b	2(a0)
		bpl.s	loc_17C46
		addq.b	#1,1(a2)

loc_17C46:				
		addq.w	#6,a0
		bra.s	loc_17C38
; ===========================================================================

loc_17C4A:				
		move.l	a0,(v_opl_ptr_left).w

locret_17C4E:				
		rts	
; ===========================================================================

loc_17C50:				
		moveq	#-1,d0					; Reset all of the 2P object manager variables to $FF.
		move.l	d0,(v_opl_ram_block_indices).w
		move.l	d0,(v_opl_ram_block_indices+4).w
		move.l	d0,(v_opl_ram_block_indices+8).w
		move.l	d0,(v_opl_screen_x_pos_p2).w
		move.w	#0,(v_opl_screen_x_pos).w
		move.w	#0,(v_opl_screen_x_pos_p2).w
		lea	(v_respawn_list).w,a2
		move.w	(a2),(v_respawn_list_p2).w
		moveq	#0,d2
		lea	(v_respawn_list).w,a5
		lea	(v_opl_ptr_right).w,a4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		lea	(v_opl_loaded_object_blocks_p2).w,a6
		moveq	#-2,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		moveq	#-1,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		moveq	#0,d6
		bsr.w	loc_17DE4
		lea	(v_respawn_list_p2).w,a5
		lea	(v_opl_ptr_right_p2).w,a4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		lea	(v_opl_loaded_object_blocks_p1).w,a6
		moveq	#-2,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		moveq	#-1,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		moveq	#0,d6
		bsr.w	loc_17DE4

loc_17CCC:				
		move.w	(v_camera_x_pos).w,d1
		andi.w	#-$100,d1
		move.w	d1,(v_camera_x_pos_coarse).w
		move.w	(v_camera_x_pos_p2).w,d1
		andi.w	#-$100,d1
		move.w	d1,(v_camera_x_pos_coarse_p2).w
		move.b	(v_camera_x_pos).w,d6
		andi.w	#$FF,d6
		move.w	(v_opl_screen_x_pos).w,d0
		cmp.w	(v_opl_screen_x_pos).w,d6
		beq.s	loc_17D0C
		move.w	d6,(v_opl_screen_x_pos).w
		lea	(v_respawn_list).w,a5
		lea	(v_opl_ptr_right).w,a4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		lea	(v_opl_loaded_object_blocks_p2).w,a6
		bsr.s	loc_17D36

loc_17D0C:				
		move.b	(v_camera_x_pos_p2).w,d6
		andi.w	#$FF,d6
		move.w	(v_opl_screen_x_pos_p2).w,d0
		cmp.w	(v_opl_screen_x_pos_p2).w,d6
		beq.s	locret_17D34
		move.w	d6,(v_opl_screen_x_pos_p2).w
		lea	(v_respawn_list_p2).w,a5
		lea	(v_opl_ptr_right_p2).w,a4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		lea	(v_opl_loaded_object_blocks_p1).w,a6
		bsr.s	loc_17D36

locret_17D34:				
		rts	
; ===========================================================================

loc_17D36:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d2
		cmp.w	d0,d6
		beq.w	locret_17C4E
		bge.w	loc_17DE4
		move.b	2(a1),d2
		move.b	1(a1),2(a1)
		move.b	(a1),1(a1)
		move.b	d6,(a1)
		cmp.b	(a6),d2
		beq.s	loc_17D6C
		cmp.b	1(a6),d2
		beq.s	loc_17D6C
		cmp.b	2(a6),d2
		beq.s	loc_17D6C
		bsr.w	loc_17EC6
		bra.s	loc_17D70
; ===========================================================================

loc_17D6C:				
		bsr.w	loc_17E8A

loc_17D70:				
		bsr.w	loc_17E66
		bne.s	loc_17D94
		movea.l	4(a4),a0

loc_17D7A:				
		cmp.b	-6(a0),d6
		bne.s	loc_17D8E
		tst.b	-4(a0)
		bpl.s	loc_17D8A
		subq.b	#1,1(a5)

loc_17D8A:				
		subq.w	#6,a0
		bra.s	loc_17D7A
; ===========================================================================

loc_17D8E:				
		move.l	a0,4(a4)
		bra.s	loc_17DCA
; ===========================================================================

loc_17D94:				
		movea.l	4(a4),a0
		move.b	d6,(a1)

loc_17D9A:				
		cmp.b	-6(a0),d6
		bne.s	loc_17DC6
		subq.w	#6,a0
		tst.b	2(a0)
		bpl.s	loc_17DB0
		subq.b	#1,1(a5)
		move.b	1(a5),d2

loc_17DB0:				
		bsr.w	loc_17F80
		bne.s	loc_17DBA
		subq.w	#6,a0
		bra.s	loc_17D9A
; ===========================================================================

loc_17DBA:				
		tst.b	2(a0)
		bpl.s	loc_17DC4
		addq.b	#1,1(a5)

loc_17DC4:				
		addq.w	#6,a0

loc_17DC6:				
		move.l	a0,4(a4)

loc_17DCA:				
		movea.l	(a4),a0
		addq.w	#3,d6

loc_17DCE:				
		cmp.b	-6(a0),d6
		bne.s	loc_17DE0
		tst.b	-4(a0)
		bpl.s	loc_17DDC
		subq.b	#1,(a5)

loc_17DDC:				
		subq.w	#6,a0
		bra.s	loc_17DCE
; ===========================================================================

loc_17DE0:				
		move.l	a0,(a4)
		rts	
; ===========================================================================

loc_17DE4:				
		addq.w	#2,d6
		move.b	(a1),d2
		move.b	1(a1),(a1)
		move.b	2(a1),1(a1)
		move.b	d6,2(a1)
		cmp.b	(a6),d2
		beq.s	loc_17E0C
		cmp.b	1(a6),d2
		beq.s	loc_17E0C
		cmp.b	2(a6),d2
		beq.s	loc_17E0C
		bsr.w	loc_17EC6
		bra.s	loc_17E10
; ===========================================================================

loc_17E0C:				
		bsr.w	loc_17E8A

loc_17E10:				
		bsr.w	loc_17E66
		bne.s	loc_17E2C
		movea.l	(a4),a0

loc_17E18:				
		cmp.b	(a0),d6
		bne.s	loc_17E28
		tst.b	2(a0)
		bpl.s	loc_17E24
		addq.b	#1,(a5)

loc_17E24:				
		addq.w	#6,a0
		bra.s	loc_17E18
; ===========================================================================

loc_17E28:				
		move.l	a0,(a4)
		bra.s	loc_17E46
; ===========================================================================

loc_17E2C:				
		movea.l	(a4),a0
		move.b	d6,(a1)

loc_17E30:				
		cmp.b	(a0),d6
		bne.s	loc_17E44
		tst.b	2(a0)
		bpl.s	loc_17E3E
		move.b	(a5),d2
		addq.b	#1,(a5)

loc_17E3E:				
		bsr.w	loc_17F80
		beq.s	loc_17E30

loc_17E44:				
		move.l	a0,(a4)

loc_17E46:				
		movea.l	4(a4),a0
		subq.w	#3,d6
		bcs.s	loc_17E60

loc_17E4E:				
		cmp.b	(a0),d6
		bne.s	loc_17E60
		tst.b	2(a0)
		bpl.s	loc_17E5C
		addq.b	#1,1(a5)

loc_17E5C:				
		addq.w	#6,a0
		bra.s	loc_17E4E
; ===========================================================================

loc_17E60:				
		move.l	a0,4(a4)
		rts	
; ===========================================================================

loc_17E66:				
		move.l	a1,-(sp)
		lea	(v_opl_ram_block_indices).w,a1
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		moveq	#1,d0

loc_17E86:				
		movea.l	(sp)+,a1
		rts	
; ===========================================================================

loc_17E8A:				
		lea	(v_opl_ram_block_indices).w,a1
		lea	($FFFFBE00).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFC100).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFC400).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFC700).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFCA00).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFCD00).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		nop	
		nop	

loc_17EC2:				
		subq.w	#1,a1
		rts	
; ===========================================================================

loc_17EC6:				
		lea	(v_opl_ram_block_indices).w,a1
		lea	($FFFFBE00).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFC100).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFC400).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFC700).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFCA00).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFCD00).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		nop	
		nop	

loc_17EFE:				
		move.b	#-1,-(a1)
		movem.l	a1/a3,-(sp)
		moveq	#0,d1
		moveq	#$B,d2

loc_17F0A:				
		tst.b	(a3)
		beq.s	loc_17F26
		movea.l	a3,a1
		moveq	#0,d0
		move.b	$23(a1),d0
		beq.s	loc_17F1E
		bclr	#7,2(a2,d0.w)

loc_17F1E:				
		moveq	#$F,d0

loc_17F20:				
		move.l	d1,(a1)+
		dbf	d0,loc_17F20

loc_17F26:				
		lea	$40(a3),a3
		dbf	d2,loc_17F0A
		moveq	#0,d2
		movem.l	(sp)+,a1/a3
		rts	
; ===========================================================================

loc_17F36:				
		tst.b	2(a0)
		bpl.s	loc_17F4A
		bset	#7,2(a2,d2.w)
		beq.s	loc_17F4A
		addq.w	#6,a0
		moveq	#0,d0
		rts	
; ===========================================================================

loc_17F4A:				
		bsr.w	FindFreeObj
		bne.s	locret_17F7E
		move.w	(a0)+,ost_x_pos(a1)
		move.w	(a0)+,d0
		bpl.s	loc_17F5C
		move.b	d2,$23(a1)

loc_17F5C:				
		move.w	d0,d1
		andi.w	#$FFF,d0
		move.w	d0,ost_y_pos(a1)
		rol.w	#3,d1
		andi.b	#3,d1
		move.b	d1,ost_render(a1)
		move.b	d1,$22(a1)
		_move.b	(a0)+,ost_id(a1)
		move.b	(a0)+,$28(a1)
		moveq	#0,d0

locret_17F7E:				
		rts	
; ===========================================================================

loc_17F80:				
		tst.b	2(a0)
		bpl.s	loc_17F94
		bset	#7,2(a2,d2.w)
		beq.s	loc_17F94
		addq.w	#6,a0
		moveq	#0,d0
		rts	
; ===========================================================================

loc_17F94:				
		btst	#4,2(a0)
		beq.s	loc_17FA4
		bsr.w	FindFreeObj
		bne.s	locret_17FD8
		bra.s	loc_17FAA
; ===========================================================================

loc_17FA4:				
		bsr.w	FindFreeObjWithin12
		bne.s	locret_17FD8

loc_17FAA:				
		move.w	(a0)+,ost_x_pos(a1)
		move.w	(a0)+,d0
		bpl.s	loc_17FB6
		move.b	d2,$23(a1)

loc_17FB6:				
		move.w	d0,d1
		andi.w	#$FFF,d0
		move.w	d0,ost_y_pos(a1)
		rol.w	#3,d1
		andi.b	#3,d1
		move.b	d1,ost_render(a1)
		move.b	d1,$22(a1)
		_move.b	(a0)+,ost_id(a1)
		move.b	(a0)+,$28(a1)
		moveq	#0,d0

locret_17FD8:				
		rts	
		
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to find a free OST

; output:
;	a1 = address of free OST slot

;	uses d0.w

; usage:
;		bsr.w	FindFreeObj
;		bne.s	.fail					; branch if empty slot isn't found
;		move.b	#id_Crabmeat,ost_id(a1)			; load Crabmeat object
; ---------------------------------------------------------------------------
; loc_17FDA: ; allocObject:
FindFreeObj:				
		lea	(v_ost_dynamic).w,a1			; a1=object
		move.w	#countof_ost_dynamic-1,d0		; search to end of table
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.s	.loop					; if not, branch
		move.w	#countof_ost_dynamic_2P-1,d0		; search to $BE00 exclusive

	.loop:				
		tst.b	ost_id(a1)				; is OST slot slot empty?
		beq.s	.found					; if yes, branch
		lea	sizeof_ost(a1),a1			; go to next OST
		dbf	d0,.loop				; repeat until end

	.found:				
		rts	

; ---------------------------------------------------------------------------
; Subroutine to find a free OST AFTER the current one

; input:
;	a0 = address of current OST slot

; output:
;	a1 = address of next free OST slot

;	uses d0.w

; usage:
;		bsr.w	FindNextFreeObj
;		bne.s	.fail					; branch if empty slot isn't found
;		move.b	#id_Bomb,ost_id(a1)			; load Bomb object
; ---------------------------------------------------------------------------
; loc_17FFA: ; allocObjectAfterCurrent:
FindNextFreeObj:				
		movea.l	a0,a1					; address of OST of current object
		move.w	#v_ost_dynamic_end,d0			; end of OSTs
		sub.w	a0,d0					; d0 = space between current OST and end
		lsr.w	#6,d0					; divide by $40
		subq.w	#1,d0
		bcs.s	.use_current				; branch if current OST is final

	.loop:				
		tst.b	ost_id(a1)				; is OST slot empty?
		beq.s	.found					; if yes, branch
		lea	sizeof_ost(a1),a1			; go to next OST
		dbf	d0,.loop				; repeat until end

	.use_current:
	.found:				
		rts	
		
; ---------------------------------------------------------------------------
; Subroutine to find a free OST within 12 slots AFTER the current one

; input:
;	a3 = address of current ost slot

; output:
;	a1 = address of next free OST slot

;	uses d0.w
; ---------------------------------------------------------------------------
; loc_18016:
FindFreeObjWithin12:				
		movea.l	a3,a1
		move.w	#12-1,d0

	.loop:				
		tst.b	ost_id(a1)
		beq.s	.found
		lea	sizeof_ost(a1),a1
		dbf	d0,.loop

	.found:				
		rts	
		
; ===========================================================================

    if FixBugs
	; Sonic Team forgot to put a boundary marker here, meaning the game
	; could potentially read past the start of the file and load random
	; objects.
		endobj
    endc
    
	if Revision=0
		include	"level/objects/CNZ_1_2P_(REV00).asm"
	else
		; a Crawl badnik was moved slightly further away from a ledge
		; 2 flippers were moved closer to a wall
		include	"level/objects/CNZ_1_2P.asm"
	endc
	
	if Revision=0
		include	"level/objects/CNZ_2_2P_(REV00).asm"
	else	
		; 4 Crawl badniks were slightly moved, placing them closer/farther away from ledges
		; 2 flippers were moved away from a wall to keep players from getting stuck behind them
		include	"level/objects/CNZ_2_2P.asm"
	endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 41 - Spring
; ----------------------------------------------------------------------------

Springs:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1889C(pc,d0.w),d1
		jsr	off_1889C(pc,d1.w)
		jmp	DespawnObject
; ===========================================================================
off_1889C:	
		dc.w loc_188A8-off_1889C			; 0 
		dc.w loc_18980-off_1889C			; 1
		dc.w loc_18A70-off_1889C			; 2
		dc.w loc_18C80-off_1889C			; 3
		dc.w loc_18D6A-off_1889C			; 4
		dc.w loc_18E9E-off_1889C			; 5
; ===========================================================================

loc_188A8:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_RedSpring,ost_mappings(a0)
		move.w	#tile_Nem_VrtclSprng,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_188DE(pc,d0.w),d0
		jmp	off_188DE(pc,d0.w)
; ===========================================================================
off_188DE:	
		dc.w loc_18954-off_188DE			; 0 
		dc.w loc_188E8-off_188DE			; 1
		dc.w loc_18908-off_188DE			; 2
		dc.w loc_1891C-off_188DE			; 3
		dc.w loc_18936-off_188DE			; 4
; ===========================================================================

loc_188E8:				
		move.b	#4,ost_primary_routine(a0)
		move.b	#2,$1C(a0)
		move.b	#3,$1A(a0)
		move.w	#tile_Nem_HrzntlSprng,ost_tile(a0)
		move.b	#8,$19(a0)
		bra.s	loc_18954
; ===========================================================================

loc_18908:				
		move.b	#6,ost_primary_routine(a0)
		move.b	#6,$1A(a0)
		bset	#1,$22(a0)
		bra.s	loc_18954
; ===========================================================================

loc_1891C:				
		move.b	#8,ost_primary_routine(a0)
		move.b	#4,$1C(a0)
		move.b	#7,$1A(a0)
		move.w	#tile_Nem_DignlSprng,ost_tile(a0)
		bra.s	loc_18954
; ===========================================================================

loc_18936:				
		move.b	#$A,ost_primary_routine(a0)
		move.b	#4,$1C(a0)
		move.b	#$A,$1A(a0)
		move.w	#tile_Nem_DignlSprng,ost_tile(a0)
		bset	#1,$22(a0)

; init_diag_common:
;		move.w	#tile_Nem_DignlSprng,ost_tile(a0)

loc_18954:				
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_1897C(pc,d0.w),$30(a0)
		btst	#1,d0					; is spring subtype $x2 (yellow)?
		beq.s	.red					; if not, branch
		bset	#tile_pal12_bit,ost_tile(a0)
		move.l	#Map_YellowSpring,ost_mappings(a0)

	.red:				
		bsr.w	Adjust2PArtPointer
		rts	
; ===========================================================================
word_1897C:	dc.w $F000					; 0
		dc.w $F600					; 1
; ===========================================================================

loc_18980:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_NoRenderChk_SingleCharacter
		btst	#3,$22(a0)
		beq.s	loc_189A8
		bsr.s	loc_189CA

loc_189A8:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	SolidObject_NoRenderChk_SingleCharacter
		btst	#4,$22(a0)
		beq.s	loc_189C0
		bsr.s	loc_189CA

loc_189C0:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_189CA:				
		move.w	#$100,$1C(a0)
		addq.w	#8,ost_y_pos(a1)
		move.w	$30(a0),ost_y_vel(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		bpl.s	loc_189FE
		move.w	#0,ost_x_vel(a1)

loc_189FE:				
		btst	#0,d0
		beq.s	loc_18A3E
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_18A2E
		move.b	#1,$2C(a1)

loc_18A2E:				
		btst	#0,$22(a1)
		beq.s	loc_18A3E
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_18A3E:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18A54
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18A54:				
		cmpi.b	#8,d0
		bne.s	loc_18A66
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18A66:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

loc_18A70:				
		move.w	#$13,d1
		move.w	#$E,d2
		move.w	#$F,d3
		move.w	ost_x_pos(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_NoRenderChk_SingleCharacter
		btst	#5,$22(a0)
		beq.s	loc_18AB0
		move.b	$22(a0),d1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcs.s	loc_18AA8
		eori.b	#1,d1

loc_18AA8:				
		andi.b	#1,d1
		bne.s	loc_18AB0
		bsr.s	loc_18AEE

loc_18AB0:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	SolidObject_NoRenderChk_SingleCharacter
		btst	#6,$22(a0)
		beq.s	loc_18AE0
		move.b	$22(a0),d1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcs.s	loc_18AD8
		eori.b	#1,d1

loc_18AD8:				
		andi.b	#1,d1
		bne.s	loc_18AE0
		bsr.s	loc_18AEE

loc_18AE0:				
		bsr.w	loc_18BC6
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_18AEE:				
		move.w	#$300,$1C(a0)
		move.w	$30(a0),ost_x_vel(a1)
		addq.w	#8,ost_x_pos(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_18B1C
		bclr	#0,$22(a1)
		subi.w	#$10,ost_x_pos(a1)
		neg.w	ost_x_vel(a1)

loc_18B1C:				
		move.w	#$F,$2E(a1)
		move.w	ost_x_vel(a1),ost_inertia(a1)
		btst	#2,$22(a1)
		bne.s	loc_18B36
		move.b	#0,$1C(a1)

loc_18B36:				
		move.b	$28(a0),d0
		bpl.s	loc_18B42
		move.w	#0,ost_y_vel(a1)

loc_18B42:				
		btst	#0,d0
		beq.s	loc_18B82
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_18B72
		move.b	#3,$2C(a1)

loc_18B72:				
		btst	#0,$22(a1)
		beq.s	loc_18B82
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_18B82:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18B98
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18B98:				
		cmpi.b	#8,d0
		bne.s	loc_18BAA
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18BAA:				
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

loc_18BC6:				
		cmpi.b	#3,$1C(a0)
		beq.w	locret_18C7E
		move.w	ost_x_pos(a0),d0
		move.w	d0,d1
		addi.w	#$28,d1
		btst	#0,$22(a0)
		beq.s	loc_18BE8
		move.w	d0,d1
		subi.w	#$28,d0

loc_18BE8:				
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		subi.w	#$18,d2
		addi.w	#$18,d3
		lea	($FFFFB000).w,a1
		btst	#1,$22(a1)
		bne.s	loc_18C3C
		move.w	ost_inertia(a1),d4
		btst	#0,$22(a0)
		beq.s	loc_18C10
		neg.w	d4

loc_18C10:				
		tst.w	d4
		bmi.s	loc_18C3C
		move.w	ost_x_pos(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_18C3C
		cmp.w	d1,d4
		bcc.w	loc_18C3C
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_18C3C
		cmp.w	d3,d4
		bcc.w	loc_18C3C
		move.w	d0,-(sp)
		bsr.w	loc_18AEE
		move.w	(sp)+,d0

loc_18C3C:				
		lea	($FFFFB040).w,a1
		btst	#1,$22(a1)
		bne.s	locret_18C7E
		move.w	ost_inertia(a1),d4
		btst	#0,$22(a0)
		beq.s	loc_18C56
		neg.w	d4

loc_18C56:				
		tst.w	d4
		bmi.s	locret_18C7E
		move.w	ost_x_pos(a1),d4
		cmp.w	d0,d4
		bcs.w	locret_18C7E
		cmp.w	d1,d4
		bcc.w	locret_18C7E
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.w	locret_18C7E
		cmp.w	d3,d4
		bcc.w	locret_18C7E
		bsr.w	loc_18AEE

locret_18C7E:				
		rts	
; ===========================================================================

loc_18C80:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_NoRenderChk_SingleCharacter
		cmpi.w	#-2,d4
		bne.s	loc_18CA6
		bsr.s	loc_18CC6

loc_18CA6:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	SolidObject_NoRenderChk_SingleCharacter
		cmpi.w	#-2,d4
		bne.s	loc_18CBC
		bsr.s	loc_18CC6

loc_18CBC:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_18CC6:				
		move.w	#$100,$1C(a0)
		subq.w	#8,ost_y_pos(a1)
		move.w	$30(a0),ost_y_vel(a1)
		neg.w	ost_y_vel(a1)
		move.b	$28(a0),d0
		bpl.s	loc_18CE6
		move.w	#0,ost_x_vel(a1)

loc_18CE6:				
		btst	#0,d0
		beq.s	loc_18D26
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_18D16
		move.b	#1,$2C(a1)

loc_18D16:				
		btst	#0,$22(a1)
		beq.s	loc_18D26
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_18D26:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18D3C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18D3C:				
		cmpi.b	#8,d0
		bne.s	loc_18D4E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18D4E:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

loc_18D6A:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	ost_x_pos(a0),d4
		lea	byte_18FAA(pc),a2
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_Heightmap_SingleCharacter
		btst	#3,$22(a0)
		beq.s	loc_18D92
		bsr.s	loc_18DB4

loc_18D92:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	SolidObject_Heightmap_SingleCharacter
		btst	#4,$22(a0)
		beq.s	loc_18DAA
		bsr.s	loc_18DB4

loc_18DAA:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_18DB4:				
		btst	#0,$22(a0)
		bne.s	loc_18DCA
		move.w	ost_x_pos(a0),d0
		subq.w	#4,d0
		cmp.w	ost_x_pos(a1),d0
		bcs.s	loc_18DD8
		rts	
; ===========================================================================

loc_18DCA:				
		move.w	ost_x_pos(a0),d0
		addq.w	#4,d0
		cmp.w	ost_x_pos(a1),d0
		bcc.s	loc_18DD8
		rts	
; ===========================================================================

loc_18DD8:				
		move.w	#$500,$1C(a0)
		move.w	$30(a0),ost_y_vel(a1)
		move.w	$30(a0),ost_x_vel(a1)
		addq.w	#6,ost_y_pos(a1)
		addq.w	#6,ost_x_pos(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_18E10
		bclr	#0,$22(a1)
		subi.w	#$C,ost_x_pos(a1)
		neg.w	ost_x_vel(a1)

loc_18E10:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		btst	#0,d0
		beq.s	loc_18E6C
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_18E5C
		move.b	#3,$2C(a1)

loc_18E5C:				
		btst	#0,$22(a1)
		beq.s	loc_18E6C
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_18E6C:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18E82
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18E82:				
		cmpi.b	#8,d0
		bne.s	loc_18E94
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18E94:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

loc_18E9E:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	ost_x_pos(a0),d4
		lea	byte_18FC6(pc),a2
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_Heightmap_SingleCharacter
		cmpi.w	#-2,d4
		bne.s	loc_18EC4
		bsr.s	loc_18EE6

loc_18EC4:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	SolidObject_Heightmap_SingleCharacter
		cmpi.w	#-2,d4
		bne.s	loc_18EDA
		bsr.s	loc_18EE6

loc_18EDA:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================
		rts	
; ===========================================================================

loc_18EE6:				
		move.w	#$500,$1C(a0)
		move.w	$30(a0),ost_y_vel(a1)
		neg.w	ost_y_vel(a1)
		move.w	$30(a0),ost_x_vel(a1)
		subq.w	#6,ost_y_pos(a1)
		addq.w	#6,ost_x_pos(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_18F22
		bclr	#0,$22(a1)
		subi.w	#$C,ost_x_pos(a1)
		neg.w	ost_x_vel(a1)

loc_18F22:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		btst	#0,d0
		beq.s	loc_18F78
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_18F68
		move.b	#3,$2C(a1)

loc_18F68:				
		btst	#0,$22(a1)
		beq.s	loc_18F78
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_18F78:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18F8E
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18F8E:				
		cmpi.b	#8,d0
		bne.s	loc_18FA0
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18FA0:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================
byte_18FAA:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10, $E, $C, $A,  8 ; 0
					
		dc.b   6,  4,  2,  0,$FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; 16
byte_18FC6:	dc.b $F4,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F2,$F4,$F6,$F8 ; 0
					
		dc.b $FA,$FC,$FE,  0,  2,  4,  4,  4,  4,  4,  4,  4 ; 16
off_18FE2:	dc.w byte_18FEE-off_18FE2			; 0 
		dc.w byte_18FF1-off_18FE2			; 1
		dc.w byte_18FFD-off_18FE2			; 2
		dc.w byte_19000-off_18FE2			; 3
		dc.w byte_1900C-off_18FE2			; 4
		dc.w byte_1900F-off_18FE2			; 5
byte_18FEE:	dc.b  $F					; 0 
		dc.b   0					; 1
		dc.b $FF					; 2
byte_18FF1:	dc.b   0					; 0 
		dc.b   1					; 1
		dc.b   0					; 2
		dc.b   0					; 3
		dc.b   2					; 4
		dc.b   2					; 5
		dc.b   2					; 6
		dc.b   2					; 7
		dc.b   2					; 8
		dc.b   2					; 9
		dc.b $FD					; 10
		dc.b   0					; 11
byte_18FFD:	dc.b  $F					; 0 
		dc.b   3					; 1
		dc.b $FF					; 2
byte_19000:	dc.b   0					; 0 
		dc.b   4					; 1
		dc.b   3					; 2
		dc.b   3					; 3
		dc.b   5					; 4
		dc.b   5					; 5
		dc.b   5					; 6
		dc.b   5					; 7
		dc.b   5					; 8
		dc.b   5					; 9
		dc.b $FD					; 10
		dc.b   2					; 11
byte_1900C:	dc.b  $F					; 0 
		dc.b   7					; 1
		dc.b $FF					; 2
byte_1900F:	dc.b   0					; 0 
		dc.b   8					; 1
		dc.b   7					; 2
		dc.b   7					; 3
		dc.b   9					; 4
		dc.b   9					; 5
		dc.b   9					; 6
		dc.b   9					; 7
		dc.b   9					; 8
		dc.b   9					; 9
		dc.b $FD					; 10
		dc.b   4					; 11
		dc.b   0					; 12

; ===========================================================================

		include "mappings/sprite/Springs.asm"

; ===========================================================================

    if Revision<2
		nop
    endc
    
; ===========================================================================  
; ----------------------------------------------------------------------------
; Object 0D - End of level sign post
; ----------------------------------------------------------------------------

Signpost:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Sign_Index(pc,d0.w),d1
		jsr	Sign_Index(pc,d1.w)
		lea	(Ani_Sign).l,a1
		bsr.w	AnimateSprite
		bsr.w	loc_19534
		bra.w	DespawnObject
; ===========================================================================
Sign_Index:	index offset(*),,2
		ptr loc_191DC					; 0 
		ptr loc_1924C					; 2
; ===========================================================================

loc_191DC:				
		tst.w	(f_two_player).w			; is it 2P mode?
		beq.s	loc_19208				; if not, branch
		move.l	#Map_Sign_2P,ost_mappings(a0)		; use 2P mode mappings...
		move.w	#(vram_2P_Signpost/sizeof_cell),ost_tile(a0) ; ...and tiles
		move.b	#-1,(v_signpost_prev_frame).w
		moveq	#0,d1
		move.w	#$1020,d1
		move.w	#-$80,d4
		moveq	#0,d5
		bsr.w	loc_19564
		bra.s	loc_1922C
; ===========================================================================

loc_19208:				
		cmpi.w	#id_MTZ_act2,(v_zone).w			; is it MTZ Act 2?
		beq.s	loc_1921E				; if so, branch
		tst.b	(v_act).w				; is it Act 1 of any other level?
		beq.s	loc_1921E				; if it is, branch
		move.w	#0,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_1921E:				
		move.l	#Map_Sign,ost_mappings(a0)
		move.w	#tile_Nem_Signpost,ost_tile(a0)

loc_1922C:				
		addq.b	#2,ost_primary_routine(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)
		move.w	#$3C3C,(v_loser_time_left).w

loc_1924C:				
		tst.b	(f_hud_time_update).w
		beq.w	loc_192D6
		lea	(v_ost_player1).w,a1
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		bcs.s	loc_192D6
		cmpi.w	#$20,d0
		bcc.s	loc_192D6
		move.w	#$CF,d0	
		jsr	(PlayMusic).l
		clr.b	(f_hud_time_update).w
		move.w	#1,$1C(a0)
		move.w	#0,$30(a0)
		move.w	(v_boundary_right_next).w,(v_boundary_left_next).w
		move.b	#2,$25(a0)
		cmpi.b	#$C,(v_loser_time_left).w
		bhi.s	loc_192A0

loc_19296:
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_192A0:				
		tst.b	$36(a0)
		bne.w	loc_19350
		move.b	#3,$36(a0)
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_192BC
		move.b	#4,$36(a0)

loc_192BC:				
		tst.w	(f_two_player).w
		beq.w	loc_19350
		move.w	#$3C3C,(v_loser_time_left).w
		move.w	#$D3,d0	
		jsr	PlaySound
		bra.s	loc_19350
; ===========================================================================

loc_192D6:				
		tst.w	(f_two_player).w
		beq.s	loc_19350
		tst.b	(f_hud_time_update_p2).w
		beq.s	loc_19350
		lea	($FFFFB040).w,a1
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		bcs.s	loc_19350
		cmpi.w	#$20,d0
		bcc.s	loc_19350
		move.w	#$CF,d0	
		jsr	(PlayMusic).l
		clr.b	(f_hud_time_update_p2).w
		move.w	#1,$1C(a0)
		move.w	#0,$30(a0)
		move.w	(v_boundary_right_next_p2).w,(v_boundary_left_next_p2).w
		move.b	#2,$25(a0)
		cmpi.b	#$C,(v_loser_time_left).w
		bhi.s	loc_1932E
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_1932E:				
		tst.b	$36(a0)
		bne.s	loc_19350
		move.b	#4,$36(a0)
		tst.w	(f_two_player).w
		beq.s	loc_19350
		move.w	#$3C3C,(v_loser_time_left).w
		move.w	#$D3,d0	
		jsr	PlaySound

loc_19350:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_1935E(pc,d0.w),d1
		jmp	off_1935E(pc,d1.w)
; ===========================================================================
off_1935E:	
		dc.w locret_19366-off_1935E			; 0 
		dc.w loc_19368-off_1935E			; 1
		dc.w loc_19418-off_1935E			; 2
		dc.w loc_194FC-off_1935E			; 3
; ===========================================================================

locret_19366:				
		rts	
; ===========================================================================

loc_19368:				
		subq.w	#1,$30(a0)
		bpl.s	loc_19398
		move.w	#$3C,$30(a0)
		addq.b	#1,$1C(a0)
		cmpi.b	#3,$1C(a0)
		bne.s	loc_19398
		move.b	#4,$25(a0)
		move.b	$36(a0),$1C(a0)
		tst.w	(f_two_player).w
		beq.s	loc_19398
		move.b	#6,$25(a0)

loc_19398:				
		subq.w	#1,$32(a0)
		bpl.s	locret_19406
		move.w	#$B,$32(a0)
		moveq	#0,d0
		move.b	$34(a0),d0
		addq.b	#2,$34(a0)
		andi.b	#$E,$34(a0)
		lea	byte_19408(pc,d0.w),a2
		bsr.w	FindFreeObj
		bne.s	locret_19406
		_move.b	#id_Ring,ost_id(a1)
		move.b	#6,$24(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	ost_x_pos(a0),d0
		move.w	d0,ost_x_pos(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	ost_y_pos(a0),d0
		move.w	d0,ost_y_pos(a1)
		move.l	#Map_Ring,ost_mappings(a1)
		move.w	#tile_Nem_Ring+tile_pal2,ost_tile(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#2,$18(a1)
		move.b	#8,$19(a1)

locret_19406:				
		rts	
; ===========================================================================
byte_19408:	
		dc.b $E8					; 0
		dc.b $F0					; 1
		dc.b   8					; 2
		dc.b   8					; 3
		dc.b $F0					; 4
		dc.b   0					; 5
		dc.b $18					; 6
		dc.b $F8					; 7
		dc.b   0					; 8
		dc.b $F8					; 9
		dc.b $10					; 10
		dc.b   0					; 11
		dc.b $E8					; 12
		dc.b   8					; 13
		dc.b $18					; 14
		dc.b $10					; 15
; ===========================================================================

loc_19418:				
		tst.w	(v_debug_active).w
		bne.w	locret_194D0
		btst	#1,($FFFFB022).w
		bne.s	loc_19434
		move.b	#1,(f_lock_controls).w
		move.w	#$800,(v_joypad_hold).w

loc_19434:				
		tst.b	($FFFFB000).w
		beq.s	loc_1944C
		move.w	($FFFFB008).w,d0
		move.w	(v_boundary_right_next).w,d1
		addi.w	#$128,d1
		cmp.w	d1,d0
		bcs.w	locret_194D0

loc_1944C:				
		move.b	#0,$25(a0)

loc_19452:				
		lea	(v_ost_player1).w,a1
		clr.b	$2B(a1)
		clr.b	(f_hud_time_update).w
		bsr.w	FindFreeObj
		bne.s	loc_19468
		move.b	#id_GotThroughCard,ost_id(a1)

loc_19468:				
		moveq	#$26,d0
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_19474
		moveq	#$42,d0

loc_19474:				
		jsr	(NewPLC).l
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		move.b	(v_time_min).w,d0
		mulu.w	#$3C,d0
		moveq	#0,d1
		move.b	(v_time_sec).w,d1
		add.w	d1,d0
		divu.w	#$F,d0
		moveq	#$14,d1
		cmp.w	d1,d0
		bcs.s	loc_1949E
		move.w	d1,d0

loc_1949E:				
		add.w	d0,d0
		move.w	word_194D2(pc,d0.w),(v_bonus_count_1).w
		move.w	(v_rings).w,d0
		mulu.w	#$A,d0
		move.w	d0,(v_bonus_count_2).w
		clr.w	(v_total_bonus_countdown).w
		clr.w	(v_bonus_count_3).w
		tst.w	(v_perfect_rings_left).w
		bne.s	loc_194C6
		move.w	#$1388,(v_bonus_count_3).w

loc_194C6:				
		move.w	#$9A,d0	
		jsr	(PlayMusic).l

locret_194D0:				
		rts	
; ===========================================================================
word_194D2:	
		dc.w $1388					; 0
		dc.w $1388					; 1
		dc.w  $3E8					; 2
		dc.w  $1F4					; 3
		dc.w  $190					; 4
		dc.w  $190					; 5
		dc.w  $12C					; 6
		dc.w  $12C					; 7
		dc.w   $C8					; 8
		dc.w   $C8					; 9
		dc.w   $C8					; 10
		dc.w   $C8					; 11
		dc.w   $64					; 12
		dc.w   $64					; 13
		dc.w   $64					; 14
		dc.w   $64					; 15
		dc.w   $32					; 16
		dc.w   $32					; 17
		dc.w   $32					; 18
		dc.w   $32					; 19
		dc.w	 0					; 20
; ===========================================================================

loc_194FC:				
		subq.w	#1,$30(a0)
		bpl.s	locret_19532
		tst.b	(f_time_over).w
		bne.s	locret_19532
		tst.b	(f_time_over_p2).w
		bne.s	locret_19532
		tst.b	(f_hud_time_update).w
		bne.s	locret_19532
		tst.b	(f_hud_time_update_p2).w
		bne.s	locret_19532
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		move.b	#$18,(v_gamemode).w
		move.w	#0,(v_results_screen_2p).w

locret_19532:				
		rts	
; ===========================================================================

loc_19534:				
		tst.w	(f_two_player).w
		beq.s	locret_1958C
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(v_signpost_prev_frame).w,d0
		beq.s	locret_1958C
		move.b	d0,(v_signpost_prev_frame).w
		lea	(DynPLC_Signpost).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1958C
		move.w	#-$4300,d4

loc_19560:				
		moveq	#0,d1
		move.w	(a2)+,d1

loc_19564:				
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Signpost,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(AddDMA).l
		dbf	d5,loc_19560

locret_1958C:				
		rts	
; ===========================================================================
Ani_Sign:	dc.w byte_19598-Ani_Sign			; 0 
		dc.w byte_1959B-Ani_Sign			; 1
		dc.w byte_195A9-Ani_Sign			; 2
		dc.w byte_195B7-Ani_Sign			; 3
		dc.w byte_195BA-Ani_Sign			; 4
byte_19598:	dc.b  $F,  2,$FF				; 0 
byte_1959B:	dc.b   1,  2,  3,  4,  5,  1,  3,  4,  5,  0,  3,  4,  5,$FF ; 0
					
byte_195A9:	dc.b   1,  2,  3,  4,  5,  1,  3,  4,  5,  0,  3,  4,  5,$FF ; 0
					
byte_195B7:	dc.b  $F,  0,$FF				; 0 
byte_195BA:	dc.b  $F,  1,$FF,  0				; 0 


		include "mappings/sprite/Signpost.asm"
		include "mappings/sprite/Signpost 2P.asm"
		include "mappings/spriteDPLC/Signpost.asm"
		
; ===========================================================================
 
    if Revision<2
		nop
    endc

; ===========================================================================
; ---------------------------------------------------------------------------
; Solid object subroutines (includes spikes, blocks, rocks etc)
; These check collision of Sonic/Tails with objects on the screen
;
; input variables:
; d1 = object width / 2
; d2 = object height / 2 (when jumping)
; d3 = object height / 2 (when walking)
; d4 = object x-axis position
;
; address registers:
; a0 = the object to check collision with
; a1 = Sonic or Tails (set inside these subroutines)
; ---------------------------------------------------------------------------

SolidObject:				
		lea	(v_ost_player1).w,a1
		moveq	#status_p1_platform_bit,d6
		pushr.l	d1-d4					; back up input registers so we can run this routine again for sidekick
		bsr.s	.singlecharacter			; run for main character
		popr.l	d1-d4
		lea	(v_ost_player2).w,a1
		tst.b	ost_render(a1)				; is Tails loaded, and if so, onscreen?
		bpl.w	.skipsidekick				; if not, exit
		addq.b	#status_p2_platform_bit-status_p1_platform_bit,d6

	.singlecharacter:				
		btst	d6,ost_primary_status(a0)		; is character standing on the objecT?
		beq.w	Solid_ChkCollision			; if not, branch
		move.w	d1,d2
		add.w	d2,d2
		btst	#status_air_bit,ost_primary_status(a1)	; is character in the air?
		bne.s	.leave					; if so, branch
		move.w	ost_x_pos(a1),d0			
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0					; d0 = x pos of character on object						
		bmi.s	.leave					; if character moves off the left, branch
		cmp.w	d2,d0					; has character moved off the right?
		bcs.s	.stand					; if not, branch

	.leave:				
		bclr	#status_platform_bit,ost_primary_status(a1) ; clear character's standing flag
		bset	#status_air_bit,ost_primary_status(a1)	; set their air bit
		bclr	d6,ost_primary_status(a0)		; clear object's standing flag
		moveq	#0,d4					; clear flag for no collision
		rts	

	.stand:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4					; clear flag for no new collision

	.skipsidekick:				
		rts	

; ---------------------------------------------------------------------------
; As above, but the object's and the sidekick's on-screen status are not checked
; ---------------------------------------------------------------------------
SolidObject_NoRenderChk:				
		lea	(v_ost_player1).w,a1
		moveq	#status_p1_platform_bit,d6
		pushr.l	d1-d4					; back up input registers so we can run this routine again for sidekick
		bsr.s	SolidObject_NoRenderChk_SingleCharacter
		popr.l	d1-d4
		lea	(v_ost_player2).w,a1
		addq.b	#status_p2_platform_bit-status_p1_platform_bit,d6

	SolidObject_NoRenderChk_SingleCharacter:				
		btst	d6,ost_primary_status(a0)		; is character standing on the object?
		beq.w	Solid_SkipRenderChk			; if not, branch
		move.w	d1,d2
		add.w	d2,d2
		btst	#status_air_bit,ost_primary_status(a1)	; is character in the air?
		bne.s	.leave					; if so, branch
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0					; d0 = x pos of character on object						
		bmi.s	.leave					; if character moves off the left, branch
		cmp.w	d2,d0					; has character moved off the right?
		bcs.s	.stand					; if not, branch

	.leave:				
		bclr	#status_platform_bit,ost_primary_status(a1) ; clear character's standing flag
		bset	#status_air_bit,ost_primary_status(a1)	; set their air bit
		bclr	d6,ost_primary_status(a0)		; clear object's standing flag
		moveq	#0,d4					; clear flag for no collision
		rts	

	.stand:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4					; clear flag for no new collision
		rts	
		
; ===========================================================================
; SlopedSolid:
SolidObject_Heightmap:				
		lea	(v_ost_player1).w,a1
		moveq	#status_p1_platform_bit,d6
		pushr.l	d1-d4					; back up input registers so we can run this routine again for sidekick
		bsr.s	SolidObject_Heightmap_SingleCharacter
		popr.l	d1-d4
		lea	(v_ost_player2).w,a1
		addq.b	#status_p2_platform_bit-status_p1_platform_bit,d6

SolidObject_Heightmap_SingleCharacter:				
		btst	d6,ost_primary_status(a0)		; is character standing on the object?
		beq.w	SolidObject_Heightmap_Cont		; if not, branch
		move.w	d1,d2
		add.w	d2,d2
		btst	#status_air_bit,ost_primary_status(a1)	; is character in the air?
		bne.s	.leave					; if so, branch
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0					; d0 = x pos of character on object						
		bmi.s	.leave					; if character moves off the left, branch
		cmp.w	d2,d0					; has character moved off the right?
		bcs.s	.stand					; if not, branch
		
	.leave:				
		bclr	#status_platform_bit,ost_primary_status(a1) ; clear character's standing flag
		bset	#status_air_bit,ost_primary_status(a1)	; set their air bit
		bclr	d6,ost_primary_status(a0)		; clear object's standing flag
		moveq	#0,d4					; clear flag for no collision
		rts	

	.stand:				
		move.w	d4,d2
		bsr.w	MoveOnSlope
		moveq	#0,d4					; clear flag for no collision
		rts	
; ===========================================================================
; unused/dead code: check for an object that is sloped at the top and at the bottom.

;DoubleSlopedSolid:
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_1983E
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_1983E:				
		btst	d6,$22(a0)
		beq.w	loc_19988
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19862
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_19862
		cmp.w	d2,d0
		bcs.s	loc_19876

loc_19862:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19876:				
		move.w	d4,d2
		bsr.w	loc_19C0E
		moveq	#0,d4
		rts	
; ===========================================================================

SolidObject_OOZSpring:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19896
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19896:				
		btst	d6,$22(a0)
		beq.w	loc_198EC
		btst	#1,$22(a1)
		bne.s	loc_198B8
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_198B8
		add.w	d1,d1
		cmp.w	d1,d0
		bcs.s	loc_198CC

loc_198B8:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_198CC:				
		move.w	ost_y_pos(a0),d0
		sub.w	d2,d0
		add.w	d3,d0
		moveq	#0,d1
		move.b	ost_height(a1),d1
		sub.w	d1,d0
		move.w	d0,ost_y_pos(a1)
		sub.w	ost_x_pos(a0),d4
		sub.w	d4,ost_x_pos(a1)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_198EC:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d4
		add.w	d4,d4
		cmp.w	d4,d0
		bhi.w	loc_19AC4
		move.w	ost_y_pos(a0),d5
		add.w	d3,d5
		move.b	ost_height(a1),d3
		ext.w	d3
		add.w	d3,d2
		move.w	ost_y_pos(a1),d3
		sub.w	d5,d3
		addq.w	#4,d3
		add.w	d2,d3
		bmi.w	loc_19AC4
		move.w	d2,d4
		add.w	d4,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4
		bra.w	loc_19A2E
; ===========================================================================

SolidObject_Heightmap_Cont:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d3
		add.w	d3,d3
		cmp.w	d3,d0
		bhi.w	loc_19AC4
		move.w	d0,d5
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_19954
		not.w	d5
		add.w	d3,d5

loc_19954:				
		lsr.w	#1,d5
		move.b	(a2,d5.w),d3
		sub.b	(a2),d3
		ext.w	d3
		move.w	ost_y_pos(a0),d5
		sub.w	d3,d5
		move.b	ost_height(a1),d3
		ext.w	d3
		add.w	d3,d2
		move.w	ost_y_pos(a1),d3
		sub.w	d5,d3
		addq.w	#4,d3
		add.w	d2,d3
		bmi.w	loc_19AC4
		move.w	d2,d4
		add.w	d4,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4
		bra.w	loc_19A2E
; ===========================================================================

loc_19988:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d3
		add.w	d3,d3
		cmp.w	d3,d0
		bhi.w	loc_19AC4
		move.w	d0,d5
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_199AE
		not.w	d5
		add.w	d3,d5

loc_199AE:				
		andi.w	#-2,d5
		move.b	(a2,d5.w),d3
		move.b	1(a2,d5.w),d2
		ext.w	d2
		ext.w	d3
		move.w	ost_y_pos(a0),d5
		sub.w	d3,d5
		move.w	ost_y_pos(a1),d3
		sub.w	d5,d3
		move.b	ost_height(a1),d5
		ext.w	d5
		add.w	d5,d3
		addq.w	#4,d3
		bmi.w	loc_19AC4
		add.w	d5,d2
		move.w	d2,d4
		add.w	d5,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4
		bra.w	loc_19A2E
; ===========================================================================

Solid_ChkCollision:				
		tst.b	ost_render(a0)
		bpl.w	loc_19AC4

Solid_SkipRenderChk:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d3
		add.w	d3,d3
		cmp.w	d3,d0
		bhi.w	loc_19AC4
		move.b	ost_height(a1),d3
		ext.w	d3
		add.w	d3,d2
		move.w	ost_y_pos(a1),d3
		sub.w	ost_y_pos(a0),d3
		addq.w	#4,d3
		add.w	d2,d3
		bmi.w	loc_19AC4
		andi.w	#$7FF,d3
		move.w	d2,d4
		add.w	d4,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4

loc_19A2E:				
		tst.b	$2A(a1)
		bmi.w	loc_19AC4
		cmpi.b	#6,$24(a1)
		bcc.w	loc_19AEA
		tst.w	(v_debug_active).w
		bne.w	loc_19AEA
		move.w	d0,d5
		cmp.w	d0,d1
		bcc.s	loc_19A56
		add.w	d1,d1
		sub.w	d1,d0
		move.w	d0,d5
		neg.w	d5

loc_19A56:				
		move.w	d3,d1
		cmp.w	d3,d2
		bcc.s	loc_19A64
		subq.w	#4,d3
		sub.w	d4,d3
		move.w	d3,d1
		neg.w	d1

loc_19A64:				
		cmp.w	d1,d5
		bhi.w	loc_19AEE

loc_19A6A:				
		cmpi.w	#4,d1
		bls.s	loc_19AB6
		tst.w	d0
		beq.s	loc_19A90
		bmi.s	loc_19A7E
		tst.w	ost_x_vel(a1)
		bmi.s	loc_19A90
		bra.s	loc_19A84
; ===========================================================================

loc_19A7E:				
		tst.w	ost_x_vel(a1)
		bpl.s	loc_19A90

loc_19A84:				
		move.w	#0,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)

loc_19A90:				
		sub.w	d0,ost_x_pos(a1)
		btst	#1,$22(a1)
		bne.s	loc_19AB6
		move.l	d6,d4
		addq.b	#2,d4
		bset	d4,$22(a0)
		bset	#5,$22(a1)
		move.w	d6,d4
		addi.b	#$D,d4
		bset	d4,d6
		moveq	#1,d4
		rts	
; ===========================================================================

loc_19AB6:				
		bsr.s	loc_19ADC
		move.w	d6,d4
		addi.b	#$D,d4
		bset	d4,d6
		moveq	#1,d4
		rts	
; ===========================================================================

loc_19AC4:				
		move.l	d6,d4
		addq.b	#2,d4
		btst	d4,$22(a0)
		beq.s	loc_19AEA
		cmpi.b	#2,$1C(a1)
		beq.s	loc_19ADC
		move.w	#1,$1C(a1)

loc_19ADC:				
		move.l	d6,d4
		addq.b	#2,d4
		bclr	d4,$22(a0)
		bclr	#5,$22(a1)

loc_19AEA:				
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19AEE:				
		tst.w	d3
		bmi.s	loc_19B06
		cmpi.w	#$10,d3
		bcs.s	loc_19B56
		cmpi.b	#id_PinballLauncher,ost_id(a0)
		bne.s	loc_19AC4
		cmpi.w	#$14,d3
		bcs.s	loc_19B56
		bra.s	loc_19AC4
; ===========================================================================

loc_19B06:				
		tst.w	ost_y_vel(a1)
		beq.s	loc_19B28
		bpl.s	loc_19B1C
		tst.w	d3
		bpl.s	loc_19B1C
	if FixBugs=0
		; This is in the wrong place: Sonic will not be pushed out of an object 
		; from above if he's not moving upwards against it!
		; This is much more noticeable when playing as Knuckles, as he'll be
		; able to phase through objects when climbing up walls.
		; 'Knuckles in Sonic 2' and 'Sonic 3 & Knuckles' tried to fix this,
		; but didn't do it very well.		
		sub.w	d3,ost_y_pos(a1)
	endc	
		move.w	#0,ost_y_vel(a1)

loc_19B1C:
	if FixBugs
		; See the bug above.
		sub.w	d3,ost_y_pos(a1)
	endc				
		move.w	d6,d4
		addi.b	#$F,d4
		bset	d4,d6
		moveq	#-2,d4
		rts	
; ===========================================================================

loc_19B28:				
		btst	#1,$22(a1)
		bne.s	loc_19B1C
		;move.w	d0,d4
		;bpl.s	loc_19B36
		;neg.w	d4
;loc_19B36:	
		mvabs.w	d0,d4

		; Hey, look: it's the two lines of code that the Taxman/Stealth
		; remasters forgot to copy.
		; If Sonic is near the left or right edge of the object, then don't
		; kill him, instead just push him away horizontally.			
		cmpi.w	#$10,d4
		bcs.w	loc_19A6A
		pushr.l	a0
		movea.l	a1,a0
		jsr	KillCharacter
		popr.l	a0
		move.w	d6,d4
		addi.b	#$F,d4
		bset	d4,d6
		moveq	#-2,d4
		rts	
; ===========================================================================

loc_19B56:				
		subq.w	#4,d3
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	d1,d2
		add.w	d2,d2
		add.w	ost_x_pos(a1),d1
		sub.w	ost_x_pos(a0),d1
		bmi.s	loc_19B8E
		cmp.w	d2,d1
		bcc.s	loc_19B8E
		tst.w	ost_y_vel(a1)
		bmi.s	loc_19B8E
		sub.w	d3,ost_y_pos(a1)
		subq.w	#1,ost_y_pos(a1)
		bsr.w	loc_19E14
		move.w	d6,d4
		addi.b	#$11,d4
		bset	d4,d6
		moveq	#-1,d4
		rts	
; ===========================================================================

loc_19B8E:				
		moveq	#0,d4
		rts	
; ===========================================================================

MoveWithPlatform:				
		move.w	ost_y_pos(a0),d0
		sub.w	d3,d0
		bra.s	loc_19BA2
; ===========================================================================
		; a couple lines of unused/leftover/dead code from Sonic 1 ; a0=object
		move.w	ost_y_pos(a0),d0
		subi.w	#9,d0

loc_19BA2:				
		tst.b	$2A(a1)
		bmi.s	locret_19BCA
		cmpi.b	#6,$24(a1)
		bcc.s	locret_19BCA
		tst.w	(v_debug_active).w
		bne.s	locret_19BCA
		moveq	#0,d1
		move.b	ost_height(a1),d1
		sub.w	d1,d0
		move.w	d0,ost_y_pos(a1)
		sub.w	ost_x_pos(a0),d2
		sub.w	d2,ost_x_pos(a1)

locret_19BCA:				
		rts	
; ===========================================================================

MoveOnSlope:				
		btst	#3,$22(a1)
		beq.s	locret_19C0C
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		lsr.w	#1,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_19BEC
		not.w	d0
		add.w	d1,d0

loc_19BEC:				
		move.b	(a2,d0.w),d1
		ext.w	d1
		move.w	ost_y_pos(a0),d0
		sub.w	d1,d0
		moveq	#0,d1
		move.b	ost_height(a1),d1
		sub.w	d1,d0
		move.w	d0,ost_y_pos(a1)
		sub.w	ost_x_pos(a0),d2
		sub.w	d2,ost_x_pos(a1)

locret_19C0C:				
		rts	
; ===========================================================================

loc_19C0E:				
		btst	#3,$22(a1)
		beq.s	locret_19C0C
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_19C2C
		not.w	d0
		add.w	d1,d0

loc_19C2C:				
		andi.w	#-2,d0
		bra.s	loc_19BEC
; ===========================================================================

DetectPlatform:				
		lea	(v_ost_player1).w,a1
		moveq	#3,d6
		pushr.l	d1-d4
		bsr.s	DetectPlatform_SingleCharacter
		movem.l	(sp)+,d1-d4
		lea	(v_ost_player2).w,a1
		addq.b	#1,d6

	DetectPlatform_SingleCharacter:				
		btst	d6,$22(a0)
		beq.w	loc_19DBA
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19C6C
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_19C6C
		cmp.w	d2,d0
		bcs.s	loc_19C80

loc_19C6C:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19C80:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================
;SlopedPlatform:
SlopeObject:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19CA0
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19CA0:				
		btst	d6,$22(a0)
		beq.w	loc_19E90
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19CC4
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_19CC4
		cmp.w	d2,d0
		bcs.s	loc_19CD8

loc_19CC4:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19CD8:				
		move.w	d4,d2
		bsr.w	MoveOnSlope
		moveq	#0,d4
		rts	
; ===========================================================================
; Identical to DetectPlatform, except it branches to MoveWithPlatform.
; Used only by ARZ swinging platform
DetectPlatform2:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19CF8
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19CF8:				
		btst	d6,$22(a0)
		beq.w	loc_19EC8
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19D1C
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_19D1C
		cmp.w	d2,d0
		bcs.s	loc_19D30

loc_19D1C:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D30:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================
; Almost identical to DetectPlatform, except that this function does nothing if
; the character is already standing on a platform. Used only by the elevators
; in CNZ.
DetectPlatform3:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		pushr.	d1-d4
		bsr.s	loc_19D50
		popr.l	d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19D50:				
		btst	d6,$22(a0)
		bne.s	loc_19D62
		btst	#3,$22(a1)
		bne.s	loc_19D8E
		bra.w	loc_19DBA
; ===========================================================================

loc_19D62:				
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19D7E
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	loc_19D7E
		cmp.w	d2,d0
		bcs.s	loc_19D92

loc_19D7E:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)

loc_19D8E:				
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D92:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D9C:				
		tst.w	ost_y_vel(a1)
		bmi.w	locret_19E8E
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	locret_19E8E
		cmp.w	d2,d0
		bcc.w	locret_19E8E
		bra.s	loc_19DD8
; ===========================================================================

loc_19DBA:				
		tst.w	ost_y_vel(a1)
		bmi.w	locret_19E8E
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	locret_19E8E
		add.w	d1,d1
		cmp.w	d1,d0
		bcc.w	locret_19E8E

loc_19DD8:				
		move.w	ost_y_pos(a0),d0
		sub.w	d3,d0

loc_19DDE:				
		move.w	ost_y_pos(a1),d2
		move.b	ost_height(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.w	locret_19E8E
		cmpi.w	#-$10,d0
		bcs.w	locret_19E8E
		tst.b	$2A(a1)
		bmi.w	locret_19E8E
		cmpi.b	#6,$24(a1)
		bcc.w	locret_19E8E
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,ost_y_pos(a1)

loc_19E14:				
		btst	#3,$22(a1)
		beq.s	loc_19E30
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		bclr	d6,$22(a3)

loc_19E30:				
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0
		move.b	d0,$3D(a1)
		move.b	#0,$26(a1)
		move.w	#0,ost_y_vel(a1)
		move.w	ost_x_vel(a1),ost_inertia(a1)
		btst	#1,$22(a1)
		beq.s	loc_19E7E
		move.l	a0,-(sp)
		movea.l	a1,a0
		move.w	a0,d1
		subi.w	#-$5000,d1
		bne.s	loc_19E76
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_19E76
		jsr	Sonic_ResetOnFloor_2
		bra.s	loc_19E7C
; ===========================================================================

loc_19E76:				
		jsr	loc_1CB5C

loc_19E7C:				
		movea.l	(sp)+,a0

loc_19E7E:				
		bset	#3,$22(a1)
		bclr	#1,$22(a1)
		bset	d6,$22(a0)

locret_19E8E:				
		rts	
; ===========================================================================

loc_19E90:				
		tst.w	ost_y_vel(a1)
		bmi.w	locret_19E8E
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.s	locret_19E8E
		add.w	d1,d1
		cmp.w	d1,d0
		bcc.s	locret_19E8E
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_19EB6
		not.w	d0
		add.w	d1,d0

loc_19EB6:				
		lsr.w	#1,d0
		move.b	(a2,d0.w),d3
		ext.w	d3
		move.w	ost_y_pos(a0),d0
		sub.w	d3,d0
		bra.w	loc_19DDE
; ===========================================================================

loc_19EC8:				
		tst.w	ost_y_vel(a1)
		bmi.w	locret_19E8E
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d1,d0
		bmi.w	locret_19E8E
		add.w	d1,d1
		cmp.w	d1,d0
		bcc.w	locret_19E8E
		move.w	ost_y_pos(a0),d0
		sub.w	d3,d0
		bra.w	loc_19DDE
; ===========================================================================

DropOnFloor:				
		lea	($FFFFB000).w,a1
		btst	#3,$22(a0)
		beq.s	loc_19F1E
		jsr	FindFloorEdge2
		tst.w	d1
		beq.s	loc_19F08
		bpl.s	loc_19F1E

loc_19F08:				
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a0)

loc_19F1E:				
		lea	($FFFFB040).w,a1
		btst	#4,$22(a0)
		beq.s	loc_19F4C
		jsr	FindFloorEdge2
		tst.w	d1
		beq.s	loc_19F36
		bpl.s	loc_19F4C

loc_19F36:				
		lea	($FFFFB040).w,a1
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a0)

loc_19F4C:				
		moveq	#0,d4
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 01 - Sonic
; ----------------------------------------------------------------------------

Sonic:				
		tst.w	(v_debug_active).w
		beq.s	Sonic_Normal
		jmp	DebugMode
; ===========================================================================

Sonic_Normal:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Sonic_Index(pc,d0.w),d1
		jmp	Sonic_Index(pc,d1.w)
; ===========================================================================
				
SonicRoutines:	macro	routinename
		ptr	Sonic_\routinename
		endm
		
Sonic_Index:	index offset(*),,2		
		CharacterRoutines	SonicRoutines		; generate pointers and IDs for Sonic's primary routines	
; ===========================================================================

Sonic_Main:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$13,ost_height(a0)
		move.b	#9,$17(a0)
		move.l	#Map_Sonic,ost_mappings(a0)
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#render_rel,ost_render(a0)
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		tst.b	(v_last_lamppost).w
		bne.s	loc_19FE6
		move.w	#tile_Sonic,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.w	ost_x_pos(a0),(v_x_pos_lampcopy).w
		move.w	ost_y_pos(a0),(v_y_pos_lampcopy).w
		move.w	ost_tile(a0),(v_ost_tile_lampcopy).w
		move.w	$3E(a0),(v_ost_top_solid_bit_lampcopy).w

loc_19FE6:				
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.b	#0,(f_super).w
		move.b	#$1E,$28(a0)
		subi.w	#$20,ost_x_pos(a0)
		addi_.w	#4,ost_y_pos(a0)
		move.w	#0,(v_sonic_pos_tracker_num).w

		move.w	#$3F,d2
loc_1A014:				
		bsr.w	Sonic_RecordPosition
		subq.w	#4,a1
		move.l	#0,(a1)
		dbf	d2,loc_1A014
		
		addi.w	#$20,ost_x_pos(a0)
		subi_.w	#4,ost_y_pos(a0)

Sonic_Control:				
		tst.w	(f_debug_enable).w
		beq.s	loc_1A04A
		btst	#4,(v_joypad_press_actual).w
		beq.s	loc_1A04A
		move.w	#1,(v_debug_active).w
		clr.b	(f_lock_controls).w
		rts	
; ===========================================================================

loc_1A04A:				
		tst.b	(f_lock_controls).w
		bne.s	loc_1A056
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w

loc_1A056:				
		btst	#0,$2A(a0)
		bne.s	loc_1A070
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	off_1A0BE(pc,d0.w),d1
		jsr	off_1A0BE(pc,d1.w)

loc_1A070:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1A07E
		andi.w	#$7FF,ost_y_pos(a0)

loc_1A07E:				
		bsr.s	loc_1A0C6
		bsr.w	loc_1ABA6
		bsr.w	Sonic_RecordPosition
		bsr.w	loc_1A186
		move.b	(v_angle_right).w,$36(a0)
		move.b	(v_angle_left).w,$37(a0)
		tst.b	(f_wind_tunnel_now).w
		beq.s	loc_1A0AA
		tst.b	$1C(a0)
		bne.s	loc_1A0AA
		move.b	$1D(a0),$1C(a0)

loc_1A0AA:				
		bsr.w	Sonic_Animate
		tst.b	$2A(a0)
		bmi.s	loc_1A0BA
		jsr	ReactToItem

loc_1A0BA:				
		bra.w	Sonic_LoadGFX
; ===========================================================================
off_1A0BE:	dc.w loc_1A26E-off_1A0BE			; 0 
		dc.w loc_1A2E0-off_1A0BE			; 1
		dc.w loc_1A30A-off_1A0BE			; 2
		dc.w loc_1A330-off_1A0BE			; 3
; ===========================================================================

loc_1A0C6:				
		move.w	$30(a0),d0
		beq.s	loc_1A0D4
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	loc_1A0DA

loc_1A0D4:				
		jsr	DisplaySprite

loc_1A0DA:				
		btst	#1,$2B(a0)
		beq.s	loc_1A10C
		tst.w	$32(a0)
		beq.s	loc_1A10C
		subq.w	#1,$32(a0)
		bne.s	loc_1A10C
		tst.b	(v_current_boss).w
		bne.s	loc_1A106
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1A106
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_1A106:				
		bclr	#1,$2B(a0)

loc_1A10C:				
		btst	#2,$2B(a0)
		beq.s	locret_1A15A
		tst.w	$34(a0)
		beq.s	locret_1A15A
		subq.w	#1,$34(a0)
		bne.s	locret_1A15A
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		tst.b	(f_super).w
		beq.s	loc_1A14A
		move.w	#$A00,(v_sonic_max_speed).w
		move.w	#$30,(v_sonic_acceleration).w
		move.w	#$100,(v_sonic_deceleration).w

loc_1A14A:				
		bclr	#2,$2B(a0)
		move.w	#$FC,d0	
		jmp	PlayMusic
; ===========================================================================

locret_1A15A:				
		rts	
; ===========================================================================

Sonic_RecordPosition:				
		move.w	(v_sonic_pos_tracker_num).w,d0
		lea	(v_sonic_pos_tracker).w,a1
		lea	(a1,d0.w),a1
		move.w	ost_x_pos(a0),(a1)+
		move.w	ost_y_pos(a0),(a1)+
		addq.b	#4,($FFFFEED3).w
		lea	(v_sonic_stat_tracker).w,a1
		lea	(a1,d0.w),a1
		move.w	(v_joypad_hold).w,(a1)+
		move.w	$22(a0),(a1)+
		rts	
; ===========================================================================

loc_1A186:				
		tst.b	(f_water).w
		bne.s	loc_1A18E

locret_1A18C:				
		rts	
; ===========================================================================

loc_1A18E:				
		move.w	(v_water_height_actual).w,d0
		cmp.w	ost_y_pos(a0),d0
		bge.s	loc_1A1FE
		bset	#6,$22(a0)
		bne.s	locret_1A18C
		movea.l	a0,a1
		bsr.w	ResumeMusic
		move.b	#id_DrownCount,(v_ost_lo_sonic_breathingbubbles+ost_id).w
		move.b	#$81,(v_ost_lo_sonic_breathingbubbles+ost_subtype).w
		move.l	a0,(v_ost_lo_sonic_breathingbubbles+ost_drown_parent).w
		move.w	#$300,(v_sonic_max_speed).w
		move.w	#6,(v_sonic_acceleration).w
		move.w	#$40,(v_sonic_deceleration).w
		tst.b	(f_super).w
		beq.s	loc_1A1E0
		move.w	#$500,(v_sonic_max_speed).w
		move.w	#$18,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w

loc_1A1E0:				
		asr	ost_x_vel(a0)
		asr	ost_y_vel(a0)
		asr	ost_y_vel(a0)
		beq.s	locret_1A18C
		move.w	#$100,($FFFFD11C).w
		move.w	#$AA,d0	
		jmp	PlaySound
; ===========================================================================

loc_1A1FE:				
		bclr	#6,$22(a0)
		beq.s	locret_1A18C
		movea.l	a0,a1
		bsr.w	ResumeMusic
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		tst.b	(f_super).w
		beq.s	loc_1A236
		move.w	#$A00,(v_sonic_max_speed).w
		move.w	#$30,(v_sonic_acceleration).w
		move.w	#$100,(v_sonic_deceleration).w

loc_1A236:				
		cmpi.b	#4,ost_primary_routine(a0)
		beq.s	loc_1A242
		asl	ost_y_vel(a0)

loc_1A242:				
		tst.w	ost_y_vel(a0)
		beq.w	locret_1A18C
		move.w	#$100,($FFFFD11C).w
		movea.l	a0,a1
		bsr.w	ResumeMusic
		cmpi.w	#-$1000,ost_y_vel(a0)
		bgt.s	loc_1A264
		move.w	#-$1000,ost_y_vel(a0)

loc_1A264:				
		move.w	#$AA,d0	
		jmp	PlaySound
; ===========================================================================

loc_1A26E:				
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0
		bne.s	loc_1A2B8
		cmpi.b	#$A,$1C(a0)
		beq.s	locret_1A2DE
		cmpi.b	#$B,$1C(a0)
		beq.s	locret_1A2DE
		cmpi.b	#5,$1C(a0)
		bne.s	loc_1A2B8
		cmpi.b	#$1E,$1B(a0)
		bcs.s	loc_1A2B8
		move.b	(v_joypad_hold).w,d0
		andi.b	#$7F,d0
		beq.s	locret_1A2DE
		move.b	#$A,$1C(a0)
		cmpi.b	#-$54,$1B(a0)
		bcs.s	locret_1A2DE
		move.b	#$B,$1C(a0)
		bra.s	locret_1A2DE
; ===========================================================================

loc_1A2B8:				
		bsr.w	loc_1AC3E
		bsr.w	loc_1AA38
		bsr.w	loc_1AD96
		bsr.w	loc_1A35A
		bsr.w	loc_1A9D2
		bsr.w	loc_1A974
		jsr	SpeedToPos
		bsr.w	Player_AnglePos
		bsr.w	loc_1AE08

locret_1A2DE:				
		rts	
; ===========================================================================

loc_1A2E0:				
		bsr.w	loc_1AAF0
		bsr.w	loc_1A8E8
		bsr.w	loc_1A974
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1A300
		subi.w	#$28,ost_y_vel(a0)

loc_1A300:				
		bsr.w	loc_1AE4A
		bsr.w	loc_1AEAA
		rts	
; ===========================================================================

loc_1A30A:				
		tst.b	$39(a0)
		bne.s	loc_1A314
		bsr.w	loc_1AA38

loc_1A314:				
		bsr.w	loc_1ADCC
		bsr.w	loc_1A7C6
		bsr.w	loc_1A974
		jsr	SpeedToPos
		bsr.w	Player_AnglePos
		bsr.w	loc_1AE08
		rts	
; ===========================================================================

loc_1A330:				
		bsr.w	loc_1AAF0
		bsr.w	loc_1A8E8
		bsr.w	loc_1A974
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1A350
		subi.w	#$28,ost_y_vel(a0)

loc_1A350:				
		bsr.w	loc_1AE4A
		bsr.w	loc_1AEAA
		rts	
; ===========================================================================

loc_1A35A:				
		move.w	(v_sonic_max_speed).w,d6
		move.w	(v_sonic_acceleration).w,d5
		move.w	(v_sonic_deceleration).w,d4
		tst.b	$2B(a0)
		bmi.w	loc_1A630
		tst.w	$2E(a0)
		bne.w	loc_1A5E0
		btst	#2,(v_joypad_hold).w
		beq.s	loc_1A382
		bsr.w	loc_1A6C0

loc_1A382:				
		btst	#3,(v_joypad_hold).w
		beq.s	loc_1A38E
		bsr.w	loc_1A746

loc_1A38E:				
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.w	loc_1A5E0
		tst.w	ost_inertia(a0)
		bne.w	loc_1A5E0
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)
		btst	#3,$22(a0)
		beq.w	loc_1A48C
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	($FFFFB000).w,a1
		lea	(a1,d0.w),a1
		tst.b	$22(a1)
		bmi.w	loc_1A584
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#2,d2
		add.w	ost_x_pos(a0),d1
		sub.w	ost_x_pos(a1),d1
		tst.b	(f_super).w
		bne.w	loc_1A3FE
		cmpi.w	#2,d1
		blt.s	loc_1A44E
		cmp.w	d2,d1
		bge.s	loc_1A410
		bra.w	loc_1A584
; ===========================================================================

loc_1A3FE:				
		cmpi.w	#2,d1
		blt.w	loc_1A576
		cmp.w	d2,d1
		bge.w	loc_1A566
		bra.w	loc_1A584
; ===========================================================================

loc_1A410:				
		btst	#0,$22(a0)
		bne.s	loc_1A430
		move.b	#6,$1C(a0)
		addq.w	#6,d2
		cmp.w	d2,d1
		blt.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A430:				
		move.b	#$1D,$1C(a0)
		addq.w	#6,d2
		cmp.w	d2,d1
		blt.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bclr	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A44E:				
		btst	#0,$22(a0)
		beq.s	loc_1A46E
		move.b	#6,$1C(a0)
		cmpi.w	#-4,d1
		bge.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A46E:				
		move.b	#$1D,$1C(a0)
		cmpi.w	#-4,d1
		bge.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bset	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A48C:				
		jsr	FindFloorEdge
		cmpi.w	#$C,d1
		blt.w	loc_1A584
		tst.b	(f_super).w
		bne.w	loc_1A55E
		cmpi.b	#3,$36(a0)
		bne.s	loc_1A500
		btst	#0,$22(a0)
		bne.s	loc_1A4D6
		move.b	#6,$1C(a0)
		move.w	ost_x_pos(a0),d3
		subq.w	#6,d3
		jsr	FindFloorEdge_NoX
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A4D6:				
		move.b	#$1D,$1C(a0)
		move.w	ost_x_pos(a0),d3
		subq.w	#6,d3
		jsr	FindFloorEdge_NoX
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bclr	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A500:				
		cmpi.b	#3,$37(a0)
		bne.s	loc_1A584
		btst	#0,$22(a0)
		beq.s	loc_1A534
		move.b	#6,$1C(a0)
		move.w	ost_x_pos(a0),d3
		addq.w	#6,d3
		jsr	FindFloorEdge_NoX
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A534:				
		move.b	#$1D,$1C(a0)
		move.w	ost_x_pos(a0),d3
		addq.w	#6,d3
		jsr	FindFloorEdge_NoX
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bset	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A55E:				
		cmpi.b	#3,$36(a0)
		bne.s	loc_1A56E

loc_1A566:				
		bclr	#0,$22(a0)
		bra.s	loc_1A57C
; ===========================================================================

loc_1A56E:				
		cmpi.b	#3,$37(a0)
		bne.s	loc_1A584

loc_1A576:				
		bset	#0,$22(a0)

loc_1A57C:				
		move.b	#6,$1C(a0)
		bra.s	loc_1A5E0
; ===========================================================================

loc_1A584:				
		btst	#0,(v_joypad_hold).w
		beq.s	loc_1A5B2
		move.b	#7,$1C(a0)
		addq.w	#1,(v_sonic_look_delay_counter).w
		cmpi.w	#$78,(v_sonic_look_delay_counter).w
		bcs.s	loc_1A5E6
		move.w	#$78,(v_sonic_look_delay_counter).w
		cmpi.w	#$C8,(v_camera_y_shift).w
		beq.s	loc_1A5F8
		addq.w	#2,(v_camera_y_shift).w
		bra.s	loc_1A5F8
; ===========================================================================

loc_1A5B2:				
		btst	#1,(v_joypad_hold).w
		beq.s	loc_1A5E0
		move.b	#8,$1C(a0)
		addq.w	#1,(v_sonic_look_delay_counter).w
		cmpi.w	#$78,(v_sonic_look_delay_counter).w
		bcs.s	loc_1A5E6
		move.w	#$78,(v_sonic_look_delay_counter).w
		cmpi.w	#8,(v_camera_y_shift).w
		beq.s	loc_1A5F8
		subq.w	#2,(v_camera_y_shift).w
		bra.s	loc_1A5F8
; ===========================================================================

loc_1A5E0:				
		move.w	#0,(v_sonic_look_delay_counter).w

loc_1A5E6:				
		cmpi.w	#$60,(v_camera_y_shift).w
		beq.s	loc_1A5F8
		bcc.s	loc_1A5F4
		addq.w	#4,(v_camera_y_shift).w

loc_1A5F4:				
		subq.w	#2,(v_camera_y_shift).w

loc_1A5F8:				
		tst.b	(f_super).w
		beq.w	loc_1A604
		move.w	#$C,d5

loc_1A604:				
		move.b	(v_joypad_hold).w,d0
		andi.b	#$C,d0
		bne.s	loc_1A630
		move.w	ost_inertia(a0),d0
		beq.s	loc_1A630
		bmi.s	loc_1A624
		sub.w	d5,d0
		bcc.s	loc_1A61E
		move.w	#0,d0

loc_1A61E:				
		move.w	d0,ost_inertia(a0)
		bra.s	loc_1A630
; ===========================================================================

loc_1A624:				
		add.w	d5,d0
		bcc.s	loc_1A62C
		move.w	#0,d0

loc_1A62C:				
		move.w	d0,ost_inertia(a0)

loc_1A630:				
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	ost_inertia(a0),d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a0)
		muls.w	ost_inertia(a0),d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a0)

loc_1A64E:				
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.s	locret_1A6BE
		move.b	#$40,d1
		tst.w	ost_inertia(a0)
		beq.s	locret_1A6BE
		bmi.s	loc_1A666
		neg.w	d1

loc_1A666:				
		move.b	$26(a0),d0
		add.b	d1,d0
		pushr.w	d0
		bsr.w	Player_CalcRoomAhead
		popr.w	d0
		tst.w	d1
		bpl.s	locret_1A6BE
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#-$40,d0
		beq.s	loc_1A6BA
		cmpi.b	#$40,d0
		beq.s	loc_1A6A8
		cmpi.b	#-$80,d0
		beq.s	loc_1A6A2
		add.w	d1,ost_x_vel(a0)
		bset	#5,$22(a0)
		move.w	#0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1A6A2:				
		sub.w	d1,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_1A6A8:				
		sub.w	d1,ost_x_vel(a0)
		bset	#5,$22(a0)
		move.w	#0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1A6BA:				
		add.w	d1,ost_y_vel(a0)

locret_1A6BE:				
		rts	
; ===========================================================================

loc_1A6C0:				
		move.w	ost_inertia(a0),d0
		beq.s	loc_1A6C8
		bpl.s	loc_1A6FA

loc_1A6C8:				
		bset	#0,$22(a0)
		bne.s	loc_1A6DC
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1A6DC:				
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1A6EE
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_1A6EE
		move.w	d1,d0

loc_1A6EE:				
		move.w	d0,ost_inertia(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1A6FA:				
		sub.w	d4,d0
		bcc.s	loc_1A702
		move.w	#-$80,d0

loc_1A702:				
		move.w	d0,ost_inertia(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.s	locret_1A744
		cmpi.w	#$400,d0
		blt.s	locret_1A744
		move.b	#$D,$1C(a0)
		bclr	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	PlaySound
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1A744
		move.b	#6,($FFFFD124).w
		move.b	#$15,($FFFFD11A).w

locret_1A744:				
		rts	
; ===========================================================================

loc_1A746:				
		move.w	ost_inertia(a0),d0
		bmi.s	loc_1A77A
		bclr	#0,$22(a0)
		beq.s	loc_1A760
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1A760:				
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1A76E
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_1A76E
		move.w	d6,d0

loc_1A76E:				
		move.w	d0,ost_inertia(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1A77A:				
		add.w	d4,d0
		bcc.s	loc_1A782
		move.w	#$80,d0	

loc_1A782:			
		move.w	d0,ost_inertia(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.s	locret_1A7C4
		cmpi.w	#-$400,d0
		bgt.s	locret_1A7C4
		move.b	#$D,$1C(a0)
		bset	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	PlaySound
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1A7C4
		move.b	#6,($FFFFD124).w
		move.b	#$15,($FFFFD11A).w

locret_1A7C4:				
		rts	
; ===========================================================================

loc_1A7C6:				
		move.w	(v_sonic_max_speed).w,d6
		asl.w	#1,d6
		move.w	(v_sonic_acceleration).w,d5
		asr.w	#1,d5
		move.w	#$20,d4
		tst.b	$2B(a0)
		bmi.w	loc_1A85A
		tst.w	$2E(a0)
		bne.s	loc_1A7FC
		btst	#2,(v_joypad_hold).w
		beq.s	loc_1A7F0
		bsr.w	loc_1A8A2

loc_1A7F0:				
		btst	#3,(v_joypad_hold).w
		beq.s	loc_1A7FC
		bsr.w	loc_1A8C6

loc_1A7FC:				
		move.w	ost_inertia(a0),d0
		beq.s	loc_1A81E
		bmi.s	loc_1A812
		sub.w	d5,d0
		bcc.s	loc_1A80C
		move.w	#0,d0

loc_1A80C:				
		move.w	d0,ost_inertia(a0)
		bra.s	loc_1A81E
; ===========================================================================

loc_1A812:				
		add.w	d5,d0
		bcc.s	loc_1A81A
		move.w	#0,d0

loc_1A81A:				
		move.w	d0,ost_inertia(a0)

loc_1A81E:				
		tst.w	ost_inertia(a0)
		bne.s	loc_1A85A
		tst.b	$39(a0)
		bne.s	loc_1A848
		bclr	#2,$22(a0)
		move.b	#$13,ost_height(a0)
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#5,ost_y_pos(a0)
		bra.s	loc_1A85A
; ===========================================================================

loc_1A848:				
		move.w	#$400,ost_inertia(a0)
		btst	#0,$22(a0)
		beq.s	loc_1A85A
		neg.w	ost_inertia(a0)

loc_1A85A:				
		cmpi.w	#$60,(v_camera_y_shift).w
		beq.s	loc_1A86C
		bcc.s	loc_1A868
		addq.w	#4,(v_camera_y_shift).w

loc_1A868:				
		subq.w	#2,(v_camera_y_shift).w

loc_1A86C:				
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	ost_inertia(a0),d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a0)
		muls.w	ost_inertia(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_1A890
		move.w	#$1000,d1

loc_1A890:				
		cmpi.w	#-$1000,d1
		bge.s	loc_1A89A
		move.w	#-$1000,d1

loc_1A89A:				
		move.w	d1,ost_x_vel(a0)
		bra.w	loc_1A64E
; ===========================================================================

loc_1A8A2:				
		move.w	ost_inertia(a0),d0
		beq.s	loc_1A8AA
		bpl.s	loc_1A8B8

loc_1A8AA:				
		bset	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1A8B8:				
		sub.w	d4,d0
		bcc.s	loc_1A8C0
		move.w	#-$80,d0

loc_1A8C0:				
		move.w	d0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1A8C6:				
		move.w	ost_inertia(a0),d0
		bmi.s	loc_1A8DA
		bclr	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1A8DA:				
		add.w	d4,d0
		bcc.s	loc_1A8E2
		move.w	#$80,d0	

loc_1A8E2:				
		move.w	d0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1A8E8:				
		move.w	(v_sonic_max_speed).w,d6
		move.w	(v_sonic_acceleration).w,d5
		asl.w	#1,d5
		btst	#4,$22(a0)
		bne.s	loc_1A932
		move.w	ost_x_vel(a0),d0
		btst	#2,(v_joypad_hold).w
		beq.s	loc_1A918
		bset	#0,$22(a0)
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1A918
		move.w	d1,d0

loc_1A918:				
		btst	#3,(v_joypad_hold).w
		beq.s	loc_1A92E
		bclr	#0,$22(a0)
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1A92E
		move.w	d6,d0

loc_1A92E:				
		move.w	d0,ost_x_vel(a0)

loc_1A932:				
		cmpi.w	#$60,(v_camera_y_shift).w
		beq.s	loc_1A944
		bcc.s	loc_1A940
		addq.w	#4,(v_camera_y_shift).w

loc_1A940:				
		subq.w	#2,(v_camera_y_shift).w

loc_1A944:				
		cmpi.w	#-$400,ost_y_vel(a0)
		bcs.s	locret_1A972
		move.w	ost_x_vel(a0),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	locret_1A972
		bmi.s	loc_1A966
		sub.w	d1,d0
		bcc.s	loc_1A960
		move.w	#0,d0

loc_1A960:				
		move.w	d0,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_1A966:				
		sub.w	d1,d0
		bcs.s	loc_1A96E
		move.w	#0,d0

loc_1A96E:				
		move.w	d0,ost_x_vel(a0)

locret_1A972:				
		rts	
; ===========================================================================

loc_1A974:				
		move.l	ost_x_pos(a0),d1
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(v_boundary_left_next).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0
		bhi.s	loc_1A9BA
		move.w	(v_boundary_right_next).w,d0
		addi.w	#$128,d0
		tst.b	(v_current_boss).w
		bne.s	loc_1A9A2
		addi.w	#$40,d0

loc_1A9A2:				
		cmp.w	d1,d0
		bls.s	loc_1A9BA

loc_1A9A6:				
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		blt.s	loc_1A9B6
		rts	
; ===========================================================================

loc_1A9B6:				
		jmpto	KillCharacter, JmpTo_KillCharacter		
; ===========================================================================

loc_1A9BA:				
		move.w	d0,ost_x_pos(a0)
		move.w	#0,ost_x_sub(a0)			; 2+x_pos
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_inertia(a0)
		bra.s	loc_1A9A6
; ===========================================================================

loc_1A9D2:				
		tst.b	$2B(a0)
		bmi.s	locret_1A9F8
		move.w	ost_inertia(a0),d0
		bpl.s	loc_1A9E0
		neg.w	d0

loc_1A9E0:				
		cmpi.w	#$80,d0	
		bcs.s	locret_1A9F8
		move.b	(v_joypad_hold).w,d0
		andi.b	#$C,d0
		bne.s	locret_1A9F8
		btst	#1,(v_joypad_hold).w
		bne.s	loc_1A9FA

locret_1A9F8:				
		rts	
; ===========================================================================

loc_1A9FA:				
		btst	#2,$22(a0)
		beq.s	loc_1AA04
		rts	
; ===========================================================================

loc_1AA04:				
		bset	#2,$22(a0)
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#5,ost_y_pos(a0)
		move.w	#$BE,d0	
		jsr	PlaySound
		tst.w	ost_inertia(a0)
		bne.s	locret_1AA36
		move.w	#$200,ost_inertia(a0)

locret_1AA36:				
		rts	
; ===========================================================================

loc_1AA38:				
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0
		beq.w	locret_1AAE6
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#-$80,d0
		bsr.w	Player_CalcHeadroom
		cmpi.w	#6,d1
		blt.w	locret_1AAE6
		move.w	#$680,d2
		tst.b	(f_super).w
		beq.s	loc_1AA68
		move.w	#$800,d2

loc_1AA68:				
		btst	#6,$22(a0)
		beq.s	loc_1AA74
		move.w	#$380,d2

loc_1AA74:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	CalcSine
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,ost_x_vel(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,ost_y_vel(a0)
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		addq.l	#4,sp
		move.b	#1,$3C(a0)
		clr.b	$38(a0)
		move.w	#$A0,d0	
		jsr	PlaySound
		move.b	#$13,ost_height(a0)
		move.b	#9,$17(a0)
		btst	#2,$22(a0)
		bne.s	loc_1AAE8
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		bset	#2,$22(a0)
		addq.w	#5,ost_y_pos(a0)

locret_1AAE6:				
		rts	
; ===========================================================================

loc_1AAE8:				
		bset	#4,$22(a0)
		rts	
; ===========================================================================

loc_1AAF0:				
		tst.b	$3C(a0)
		beq.s	loc_1AB22
		move.w	#-$400,d1
		btst	#6,$22(a0)
		beq.s	loc_1AB06
		move.w	#-$200,d1

loc_1AB06:				
		cmp.w	ost_y_vel(a0),d1
		ble.s	loc_1AB1A
		move.b	(v_joypad_hold).w,d0
		andi.b	#$70,d0
		bne.s	loc_1AB1A
		move.w	d1,ost_y_vel(a0)

loc_1AB1A:				
		tst.b	ost_y_vel(a0)
		beq.s	loc_1AB38
		rts	
; ===========================================================================

loc_1AB22:				
		tst.b	$39(a0)
		bne.s	locret_1AB36
		cmpi.w	#-$FC0,ost_y_vel(a0)
		bge.s	locret_1AB36
		move.w	#-$FC0,ost_y_vel(a0)

locret_1AB36:				
		rts	
; ===========================================================================

loc_1AB38:				
		tst.b	(f_super).w
		bne.s	locret_1ABA4
		cmpi.b	#7,(v_emeralds).w
		bne.s	locret_1ABA4
		cmpi.w	#$32,(v_rings).w
		bcs.s	locret_1ABA4
		move.b	#1,(v_super_sonic_palette).w
		move.b	#$F,(v_palette_timer).w
		move.b	#1,(f_super).w
		move.b	#-$7F,$2A(a0)
		move.b	#$1F,$1C(a0)
		move.b	#$7E,($FFFFD040).w
		move.w	#$A00,(v_sonic_max_speed).w
		move.w	#$30,(v_sonic_acceleration).w
		move.w	#$100,(v_sonic_deceleration).w
		move.w	#0,$32(a0)
		bset	#1,$2B(a0)
		move.w	#$DF,d0	
		jsr	PlaySound
		move.w	#$96,d0	
		jmp	PlayMusic
; ===========================================================================

locret_1ABA4:				
		rts	
; ===========================================================================

loc_1ABA6:				
		tst.b	(f_super).w
		beq.w	locret_1AC3C
		tst.b	(f_hud_time_update).w
		beq.s	loc_1ABF2
		subq.w	#1,(v_super_sonic_frame_count).w
		bpl.w	locret_1AC3C
		move.w	#$3C,(v_super_sonic_frame_count).w
		tst.w	(v_rings).w
		beq.s	loc_1ABF2
		ori.b	#1,(v_hud_rings_update).w
		cmpi.w	#1,(v_rings).w
		beq.s	loc_1ABE6
		cmpi.w	#$A,(v_rings).w
		beq.s	loc_1ABE6
		cmpi.w	#$64,(v_rings).w
		bne.s	loc_1ABEC

loc_1ABE6:				
		ori.b	#$80,(v_hud_rings_update).w

loc_1ABEC:				
		subq.w	#1,(v_rings).w
		bne.s	locret_1AC3C

loc_1ABF2:				
		move.b	#2,(v_super_sonic_palette).w
		move.w	#$28,(v_palette_frame).w
		move.b	#0,(f_super).w
		move.b	#1,$1D(a0)
		move.w	#1,$32(a0)
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		btst	#6,$22(a0)
		beq.s	locret_1AC3C
		move.w	#$300,(v_sonic_max_speed).w
		move.w	#6,(v_sonic_acceleration).w
		move.w	#$40,(v_sonic_deceleration).w

locret_1AC3C:				
		rts	
; ===========================================================================

loc_1AC3E:				
		tst.b	$39(a0)
		bne.s	loc_1AC8E
		cmpi.b	#8,$1C(a0)
		bne.s	locret_1AC8C
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0
		beq.w	locret_1AC8C
		move.b	#9,$1C(a0)
		move.w	#$E0,d0	
		jsr	PlaySound
		addq.l	#4,sp
		move.b	#1,$39(a0)
		move.w	#0,$3A(a0)
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1AC84
		move.b	#2,($FFFFD11C).w

loc_1AC84:				
		bsr.w	loc_1A974
		bsr.w	Player_AnglePos

locret_1AC8C:				
		rts	
; ===========================================================================

loc_1AC8E:				
		move.b	(v_joypad_hold).w,d0
		btst	#1,d0
		bne.w	loc_1AD30
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#5,ost_y_pos(a0)
		move.b	#0,$39(a0)
		moveq	#0,d0
		move.b	$3A(a0),d0
		add.w	d0,d0
		move.w	word_1AD0C(pc,d0.w),ost_inertia(a0)
		tst.b	(f_super).w
		beq.s	loc_1ACD0
		move.w	word_1AD1E(pc,d0.w),ost_inertia(a0)

loc_1ACD0:				
		move.w	ost_inertia(a0),d0
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0
		neg.w	d0
		addi.w	#$2000,d0
		move.w	d0,(v_hscroll_delay_val).w
		btst	#0,$22(a0)
		beq.s	loc_1ACF4
		neg.w	ost_inertia(a0)

loc_1ACF4:				
		bset	#2,$22(a0)
		move.b	#0,($FFFFD11C).w
		move.w	#$BC,d0	
		jsr	PlaySound
		bra.s	loc_1AD78
; ===========================================================================
word_1AD0C:	
		dc.w  $800					; 0
		dc.w  $880					; 1
		dc.w  $900					; 2
		dc.w  $980					; 3
		dc.w  $A00					; 4
		dc.w  $A80					; 5
		dc.w  $B00					; 6
		dc.w  $B80					; 7
		dc.w  $C00					; 8
word_1AD1E:	
		dc.w  $B00					; 0
		dc.w  $B80					; 1
		dc.w  $C00					; 2
		dc.w  $C80					; 3
		dc.w  $D00					; 4
		dc.w  $D80					; 5
		dc.w  $E00					; 6
		dc.w  $E80					; 7
		dc.w  $F00					; 8
; ===========================================================================

loc_1AD30:				
		tst.w	$3A(a0)
		beq.s	loc_1AD48
		move.w	$3A(a0),d0
		lsr.w	#5,d0
		sub.w	d0,$3A(a0)
		bcc.s	loc_1AD48
		move.w	#0,$3A(a0)

loc_1AD48:				
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0
		beq.w	loc_1AD78
		move.w	#$900,$1C(a0)
		move.w	#$E0,d0	
		jsr	PlaySound
		addi.w	#$200,$3A(a0)
		cmpi.w	#$800,$3A(a0)
		bcs.s	loc_1AD78
		move.w	#$800,$3A(a0)

loc_1AD78:				
		addq.l	#4,sp
		cmpi.w	#$60,(v_camera_y_shift).w
		beq.s	loc_1AD8C
		bcc.s	loc_1AD88
		addq.w	#4,(v_camera_y_shift).w

loc_1AD88:				
		subq.w	#2,(v_camera_y_shift).w

loc_1AD8C:				
		bsr.w	loc_1A974
		bsr.w	Player_AnglePos
		rts	
; ===========================================================================

loc_1AD96:				
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#-$40,d0
		bcc.s	locret_1ADCA
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	#$20,d0
		asr.l	#8,d0
		tst.w	ost_inertia(a0)
		beq.s	locret_1ADCA
		bmi.s	loc_1ADC6
		tst.w	d0
		beq.s	locret_1ADC4
		add.w	d0,ost_inertia(a0)

locret_1ADC4:				
		rts	
; ===========================================================================

loc_1ADC6:				
		add.w	d0,ost_inertia(a0)

locret_1ADCA:				
		rts	
; ===========================================================================

loc_1ADCC:				
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#-$40,d0
		bcc.s	locret_1AE06
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	#$50,d0
		asr.l	#8,d0
		tst.w	ost_inertia(a0)
		bmi.s	loc_1ADFC
		tst.w	d0
		bpl.s	loc_1ADF6
		asr.l	#2,d0

loc_1ADF6:				
		add.w	d0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1ADFC:				
		tst.w	d0
		bmi.s	loc_1AE02
		asr.l	#2,d0

loc_1AE02:				
		add.w	d0,ost_inertia(a0)

locret_1AE06:				
		rts	
; ===========================================================================

loc_1AE08:				
		nop	
		tst.b	$38(a0)
		bne.s	locret_1AE42
		tst.w	$2E(a0)
		bne.s	loc_1AE44
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		beq.s	locret_1AE42
		move.w	ost_inertia(a0),d0
		bpl.s	loc_1AE2C
		neg.w	d0

loc_1AE2C:				
		cmpi.w	#$280,d0
		bcc.s	locret_1AE42
		clr.w	ost_inertia(a0)
		bset	#1,$22(a0)
		move.w	#$1E,$2E(a0)

locret_1AE42:				
		rts	
; ===========================================================================

loc_1AE44:				
		subq.w	#1,$2E(a0)
		rts	
; ===========================================================================

loc_1AE4A:				
		move.b	$26(a0),d0
		beq.s	loc_1AE64
		bpl.s	loc_1AE5A
		addq.b	#2,d0
		bcc.s	loc_1AE58
		moveq	#0,d0

loc_1AE58:				
		bra.s	loc_1AE60
; ===========================================================================

loc_1AE5A:				
		subq.b	#2,d0
		bcc.s	loc_1AE60
		moveq	#0,d0

loc_1AE60:				
		move.b	d0,$26(a0)

loc_1AE64:				
		move.b	$27(a0),d0
		beq.s	locret_1AEA8
		tst.w	ost_inertia(a0)
		bmi.s	loc_1AE88

loc_1AE70:				
		move.b	$2D(a0),d1
		add.b	d1,d0
		bcc.s	loc_1AE86
		subq.b	#1,$2C(a0)
		bcc.s	loc_1AE86
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1AE86:				
		bra.s	loc_1AEA4
; ===========================================================================

loc_1AE88:				
		tst.b	$29(a0)
		bne.s	loc_1AE70
		move.b	$2D(a0),d1
		sub.b	d1,d0
		bcc.s	loc_1AEA4
		subq.b	#1,$2C(a0)
		bcc.s	loc_1AEA4
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1AEA4:				
		move.b	d0,$27(a0)

locret_1AEA8:				
		rts	
; ===========================================================================

loc_1AEAA:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1AEC2
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1AEC2:				
		move.b	$3F(a0),d5
		move.w	ost_x_vel(a0),d1
		move.w	ost_y_vel(a0),d2
		jsr	(CalcAngle).l
		subi.b	#$20,d0
		andi.b	#-$40,d0
		cmpi.b	#$40,d0
		beq.w	loc_1AF8C
		cmpi.b	#-$80,d0
		beq.w	loc_1AFE8
		cmpi.b	#-$40,d0
		beq.w	loc_1B044
		bsr.w	Player_FindWallLeft_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1AF06
		sub.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1AF06:				
		bsr.w	FindWallRight_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1AF18
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1AF18:				
		bsr.w	Player_FindFloor
		tst.w	d1
		bpl.s	locret_1AF8A
		move.b	ost_y_vel(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_1AF30
		cmp.b	d2,d0
		blt.s	locret_1AF8A

loc_1AF30:				
		add.w	d1,ost_y_pos(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_1AF68
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_1AF5A
		asr	ost_y_vel(a0)
		bra.s	loc_1AF7C
; ===========================================================================

loc_1AF5A:				
		move.w	#0,ost_y_vel(a0)
		move.w	ost_x_vel(a0),ost_inertia(a0)
		rts	
; ===========================================================================

loc_1AF68:				
		move.w	#0,ost_x_vel(a0)
		cmpi.w	#$FC0,ost_y_vel(a0)
		ble.s	loc_1AF7C
		move.w	#$FC0,ost_y_vel(a0)

loc_1AF7C:				
		move.w	ost_y_vel(a0),ost_inertia(a0)
		tst.b	d3
		bpl.s	locret_1AF8A
		neg.w	ost_inertia(a0)

locret_1AF8A:				
		rts	
; ===========================================================================

loc_1AF8C:				
		bsr.w	Player_FindWallLeft_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1AFA6
		sub.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	ost_y_vel(a0),ost_inertia(a0)
		rts	
; ===========================================================================

loc_1AFA6:				
		bsr.w	Player_FindCeiling
		tst.w	d1
		bpl.s	loc_1AFC0
		sub.w	d1,ost_y_pos(a0)
		tst.w	ost_y_vel(a0)
		bpl.s	locret_1AFBE
		move.w	#0,ost_y_vel(a0)

locret_1AFBE:				
		rts	
; ===========================================================================

loc_1AFC0:				
		tst.w	ost_y_vel(a0)
		bmi.s	locret_1AFE6
		bsr.w	Player_FindFloor
		tst.w	d1
		bpl.s	locret_1AFE6
		add.w	d1,ost_y_pos(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.w	#0,ost_y_vel(a0)
		move.w	ost_x_vel(a0),ost_inertia(a0)

locret_1AFE6:				
		rts	
; ===========================================================================

loc_1AFE8:				
		bsr.w	Player_FindWallLeft_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1AFFA
		sub.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1AFFA:				
		bsr.w	FindWallRight_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1B00C
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1B00C:				
		bsr.w	Player_FindCeiling
		tst.w	d1
		bpl.s	locret_1B042
		sub.w	d1,ost_y_pos(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_1B02C
		move.w	#0,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_1B02C:				
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.w	ost_y_vel(a0),ost_inertia(a0)
		tst.b	d3
		bpl.s	locret_1B042
		neg.w	ost_inertia(a0)

locret_1B042:				
		rts	
; ===========================================================================

loc_1B044:				
		bsr.w	FindWallRight_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1B05E
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	ost_y_vel(a0),ost_inertia(a0)
		rts	
; ===========================================================================

loc_1B05E:				
		bsr.w	Player_FindCeiling
		tst.w	d1
		bpl.s	loc_1B078
		sub.w	d1,ost_y_pos(a0)
		tst.w	ost_y_vel(a0)
		bpl.s	locret_1B076
		move.w	#0,ost_y_vel(a0)

locret_1B076:				
		rts	
; ===========================================================================

loc_1B078:				
		tst.w	ost_y_vel(a0)
		bmi.s	locret_1B09E
		bsr.w	Player_FindFloor
		tst.w	d1
		bpl.s	locret_1B09E
		add.w	d1,ost_y_pos(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.w	#0,ost_y_vel(a0)
		move.w	ost_x_vel(a0),ost_inertia(a0)

locret_1B09E:				
		rts	
; ===========================================================================

Sonic_ResetOnFloor:				
		tst.b	$39(a0)
		bne.s	loc_1B0DA
		move.b	#0,$1C(a0)

Sonic_ResetOnFloor_2:				
		_cmpi.b	#id_Sonic,ost_id(a0)
		bne.w	loc_1CB5C
		btst	#2,$22(a0)
		beq.s	loc_1B0DA
		bclr	#2,$22(a0)
		move.b	#$13,ost_height(a0)
		move.b	#9,$17(a0)
		move.b	#0,$1C(a0)
		subq.w	#5,ost_y_pos(a0)

loc_1B0DA:				
		bclr	#1,$22(a0)
		bclr	#5,$22(a0)
		bclr	#4,$22(a0)
		move.b	#0,$3C(a0)
		move.w	#0,(v_enemy_combo).w
		move.b	#0,$27(a0)
		move.b	#0,$29(a0)
		move.b	#0,$2C(a0)
		move.w	#0,(v_sonic_look_delay_counter).w
		cmpi.b	#$14,$1C(a0)
		bne.s	locret_1B11E
		move.b	#0,$1C(a0)

locret_1B11E:				
		rts	
; ===========================================================================

Sonic_Hurt:				
		tst.w	(f_debug_enable).w
		beq.s	loc_1B13A
		btst	#4,(v_joypad_press_actual).w
		beq.s	loc_1B13A
		move.w	#1,(v_debug_active).w
		clr.b	(f_lock_controls).w
		rts	
; ===========================================================================

loc_1B13A:				
		tst.b	$25(a0)
		bmi.w	loc_1B1CA
		jsr	SpeedToPos
		addi.w	#$30,ost_y_vel(a0)
		btst	#6,$22(a0)
		beq.s	loc_1B15C
		subi.w	#$20,ost_y_vel(a0)

loc_1B15C:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1B16A
		andi.w	#$7FF,ost_y_pos(a0)

loc_1B16A:				
		bsr.w	loc_1B184
		bsr.w	loc_1A974
		bsr.w	Sonic_RecordPosition
		bsr.w	Sonic_Animate
		bsr.w	Sonic_LoadGFX
		jmp	DisplaySprite
; ===========================================================================

loc_1B184:				
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		blt.w	JmpTo_KillCharacter
		bsr.w	loc_1AEAA
		btst	#1,$22(a0)
		bne.s	locret_1B1C8
		moveq	#0,d0
		move.w	d0,ost_y_vel(a0)
		move.w	d0,ost_x_vel(a0)
		move.w	d0,ost_inertia(a0)
		move.b	d0,$2A(a0)
		move.b	#0,$1C(a0)
		subq.b	#2,ost_primary_routine(a0)
		move.w	#$78,$30(a0)
		move.b	#0,$39(a0)

locret_1B1C8:				
		rts	
; ===========================================================================

loc_1B1CA:				
		subq.b	#2,ost_primary_routine(a0)
		move.b	#0,$25(a0)
		bsr.w	Sonic_RecordPosition
		bsr.w	Sonic_Animate
		bsr.w	Sonic_LoadGFX
		jmp	DisplaySprite
; ===========================================================================

Sonic_Death:				
		tst.w	(f_debug_enable).w
		beq.s	loc_1B200
		btst	#4,(v_joypad_press_actual).w
		beq.s	loc_1B200
		move.w	#1,(v_debug_active).w
		clr.b	(f_lock_controls).w
		rts	
; ===========================================================================

loc_1B200:				
		bsr.w	loc_1B21C
		jsr	ObjectFall
		bsr.w	Sonic_RecordPosition
		bsr.w	Sonic_Animate
		bsr.w	Sonic_LoadGFX
		jmp	DisplaySprite
; ===========================================================================

loc_1B21C:				
		move.b	#1,(f_disable_horiz_scroll).w
		move.b	#0,$39(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$100,d0
		cmp.w	ost_y_pos(a0),d0
		bge.w	locret_1B31A
		move.b	#8,ost_primary_routine(a0)
		move.w	#$3C,$3A(a0)
		addq.b	#1,(f_hud_lives_update).w
		subq.b	#1,(v_lives).w
		bne.s	Sonic_RestartLevel
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w
		move.b	#$39,($FFFFB0C0).w
		move.b	#1,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		clr.b	(f_time_over).w

loc_1B26E:				
		clr.b	(f_hud_time_update).w
		clr.b	(f_hud_time_update_p2).w
		move.b	#8,ost_primary_routine(a0)
		move.w	#$9B,d0	
		jsr	(PlayMusic).l
		moveq	#3,d0
		jmp	AddPLC
; ===========================================================================

Sonic_RestartLevel:				
		tst.b	(f_time_over).w
		beq.s	loc_1B2B8
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w
		move.b	#$39,($FFFFB0C0).w
		move.b	#2,($FFFFB09A).w
		move.b	#3,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		bra.s	loc_1B26E
; ===========================================================================

loc_1B2B8:				
		tst.w	(f_two_player).w
		beq.s	locret_1B31A
		move.b	#0,(f_disable_horiz_scroll).w
		move.b	#$A,ost_primary_routine(a0)
		move.w	(v_x_pos_lampcopy).w,ost_x_pos(a0)
		move.w	(v_y_pos_lampcopy).w,ost_y_pos(a0)
		move.w	(v_ost_tile_lampcopy).w,ost_tile(a0)
		move.w	(v_ost_top_solid_bit_lampcopy).w,$3E(a0)
		clr.w	(v_rings).w
		clr.b	(v_ring_reward).w
		move.b	#0,$2A(a0)
		move.b	#5,$1C(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		move.w	#0,ost_inertia(a0)
		move.b	#2,$22(a0)
		move.w	#0,$2E(a0)
		move.w	#0,$3A(a0)

locret_1B31A:				
		rts	
; ===========================================================================

Sonic_ResetLevel:				
		tst.w	$3A(a0)
		beq.s	locret_1B32E
		subq.w	#1,$3A(a0)
		bne.s	locret_1B32E
		move.w	#1,(f_restart).w

locret_1B32E:				
		rts	
; ===========================================================================

Sonic_Respawn:				
		tst.w	(v_camera_x_diff).w
		bne.s	loc_1B342
		tst.w	(v_camera_y_diff).w
		bne.s	loc_1B342
		move.b	#2,ost_primary_routine(a0)

loc_1B342:				
		bsr.w	Sonic_Animate
		bsr.w	Sonic_LoadGFX
		jmp	DisplaySprite
		
; ===========================================================================

	if FixBugs
	; The mechanism used to drown the player (namely, the drowning countdown object
	; manually overriding their control and setting their animation and movement)
	; relies on the assumption that the character is in their normal routine (Sonic_Control). 
	; Unfortunately, this leads to some edge cases: if the character is in their hurt 
	; routine when they drown, the gravity from that state will still apply, and they can
	; still interact with floors and walls before the reset timer forces them off
	; the bottom of the screen. This issue also occurred in Sonic 1 and Sonic CD;
	; S3&K fixes it by completely rewriting the drowning mechanism, making it
	; a distinct top-level routine for the character. The addition here, and changes
	; in DrownCount, are more or less backported from Sonic 3.
	
; ---------------------------------------------------------------------------
; Sonic when he's drowning
; ---------------------------------------------------------------------------
Sonic_Drown:
		bsr.w	SpeedToPos	
		addi.w	#$10,ost_y_vel(a0)	
		bsr.w	Sonic_RecordPosition	
		bsr.s	Sonic_Animate	
		bsr.w	Sonic_LoadGFX	
		bra.w	DisplaySprite
	endc		
		
; ===========================================================================

Sonic_Animate:								
		lea	(Ani_Sonic).l,a1
		tst.b	(f_super).w
		beq.s	loc_1B362
		lea	(Ani_SuperSonic).l,a1

loc_1B362:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_1B384
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		bclr	#5,$22(a0)

loc_1B384:				
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_1B3F4
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_1B3C2
		move.b	d0,$1E(a0)

loc_1B3AA:				
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-$10,d0
		bcc.s	loc_1B3C4

loc_1B3BA:				
		move.b	d0,$1A(a0)
		addq.b	#1,$1B(a0)

locret_1B3C2:				
		rts	
; ===========================================================================

loc_1B3C4:				
		addq.b	#1,d0
		bne.s	loc_1B3D4
		move.b	#0,$1B(a0)
		move.b	1(a1),d0
		bra.s	loc_1B3BA
; ===========================================================================

loc_1B3D4:				
		addq.b	#1,d0
		bne.s	loc_1B3E8
		move.b	2(a1,d1.w),d0
		sub.b	d0,$1B(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_1B3BA
; ===========================================================================

loc_1B3E8:				
		addq.b	#1,d0
		bne.s	locret_1B3F2
		move.b	2(a1,d1.w),$1C(a0)

locret_1B3F2:				
		rts	
; ===========================================================================

loc_1B3F4:				
		addq.b	#1,d0
		bne.w	loc_1B586
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	loc_1B520
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_1B410
		beq.s	loc_1B410
		subq.b	#1,d0

loc_1B410:				
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1B41C
		not.b	d0

loc_1B41C:				
		addi.b	#$10,d0
		bpl.s	loc_1B424
		moveq	#3,d1

loc_1B424:				
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		eor.b	d1,d2
		or.b	d2,ost_render(a0)
		btst	#5,$22(a0)
		bne.w	loc_1B5D2
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	ost_inertia(a0),d2
		bpl.s	loc_1B448
		neg.w	d2

loc_1B448:				
		tst.b	$2B(a0)
		bpl.w	loc_1B452
		add.w	d2,d2

loc_1B452:				
		tst.b	(f_super).w
		bne.s	loc_1B4AE
		lea	(byte_1B666).l,a1
		cmpi.w	#$600,d2
		bcc.s	loc_1B46C
		lea	(byte_1B65C).l,a1
		add.b	d0,d0

loc_1B46C:				
		add.b	d0,d0
		move.b	d0,d3
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_1B48A
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_1B48A:				
		move.b	d0,$1A(a0)
		add.b	d3,$1A(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_1B4AC
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1B4A2
		moveq	#0,d2

loc_1B4A2:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		addq.b	#1,$1B(a0)

locret_1B4AC:				
		rts	
; ===========================================================================

loc_1B4AE:				
		lea	(byte_1B810).l,a1

loc_1B4B4:
		cmpi.w	#$800,d2
		bcc.s	loc_1B4C6
		lea	(byte_1B806).l,a1
		add.b	d0,d0
		add.b	d0,d0
		bra.s	loc_1B4C8
; ===========================================================================

loc_1B4C6:				
		lsr.b	#1,d0

loc_1B4C8:				
		move.b	d0,d3
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_1B4E4
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_1B4E4:				
		move.b	d0,$1A(a0)
		add.b	d3,$1A(a0)
		move.b	(v_frame_counter_low).w,d1
		andi.b	#3,d1
		bne.s	loc_1B504
		cmpi.b	#-$4B,$1A(a0)
		bcc.s	loc_1B504
		addi.b	#$20,$1A(a0)

loc_1B504:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_1B51E
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1B514
		moveq	#0,d2

loc_1B514:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		addq.b	#1,$1B(a0)

locret_1B51E:				
		rts	
; ===========================================================================

loc_1B520:				
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1B54E

loc_1B530:
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		addi.b	#$5F,d0
		move.b	d0,$1A(a0)

loc_1B546:
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1B54E:				
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)

loc_1B554:
		tst.b	$29(a0)
		beq.s	loc_1B566
		ori.b	#render_xflip,ost_render(a0)

loc_1B560:
		addi.b	#$B,d0
		bra.s	loc_1B572
; ===========================================================================

loc_1B566:				
		ori.b	#render_xflip|render_yflip,ost_render(a0)
		neg.b	d0
		addi.b	#-$71,d0

loc_1B572:				
		divu.w	#$16,d0
		addi.b	#$5F,d0
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1B586:				
		subq.b	#1,$1E(a0)
		bpl.w	locret_1B3C2
		addq.b	#1,d0
		bne.s	loc_1B5D2
		move.w	ost_inertia(a0),d2
		bpl.s	loc_1B59A
		neg.w	d2

loc_1B59A:				
		lea	(byte_1B67A).l,a1
		cmpi.w	#$600,d2
		bcc.s	loc_1B5AC
		lea	(byte_1B670).l,a1

loc_1B5AC:				
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_1B5B6
		moveq	#0,d2

loc_1B5B6:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		bra.w	loc_1B3AA
; ===========================================================================

loc_1B5D2:				
		subq.b	#1,$1E(a0)
		bpl.w	locret_1B3C2
		move.w	ost_inertia(a0),d2
		bmi.s	loc_1B5E2
		neg.w	d2

loc_1B5E2:				
		addi.w	#$800,d2
		bpl.s	loc_1B5EA
		moveq	#0,d2

loc_1B5EA:				
		lsr.w	#6,d2
		move.b	d2,$1E(a0)
		lea	(byte_1B684).l,a1
		tst.b	(f_super).w
		beq.s	loc_1B602
		lea	(byte_1B81A).l,a1

loc_1B602:				
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		bra.w	loc_1B3AA
; ===========================================================================
Ani_Sonic:	
		dc.w byte_1B65C-Ani_Sonic			; 0 
		dc.w byte_1B666-Ani_Sonic			; 1
		dc.w byte_1B670-Ani_Sonic			; 2
		dc.w byte_1B67A-Ani_Sonic			; 3
		dc.w byte_1B684-Ani_Sonic			; 4
		dc.w byte_1B68E-Ani_Sonic			; 5
		dc.w byte_1B744-Ani_Sonic			; 6
		dc.w byte_1B74A-Ani_Sonic			; 7
		dc.w byte_1B74F-Ani_Sonic			; 8
		dc.w byte_1B754-Ani_Sonic			; 9
		dc.w byte_1B760-Ani_Sonic			; 10
		dc.w byte_1B764-Ani_Sonic			; 11
		dc.w byte_1B768-Ani_Sonic			; 12
		dc.w byte_1B76E-Ani_Sonic			; 13
		dc.w byte_1B775-Ani_Sonic			; 14
		dc.w byte_1B779-Ani_Sonic			; 15
		dc.w byte_1B780-Ani_Sonic			; 16
		dc.w byte_1B784-Ani_Sonic			; 17
		dc.w byte_1B788-Ani_Sonic			; 18
		dc.w byte_1B78E-Ani_Sonic			; 19
		dc.w byte_1B793-Ani_Sonic			; 20
		dc.w byte_1B797-Ani_Sonic			; 21
		dc.w byte_1B79E-Ani_Sonic			; 22
		dc.w byte_1B7A1-Ani_Sonic			; 23
		dc.w byte_1B7A4-Ani_Sonic			; 24
		dc.w byte_1B7A7-Ani_Sonic			; 25
		dc.w byte_1B7A7-Ani_Sonic			; 26
		dc.w byte_1B7AA-Ani_Sonic			; 27
		dc.w byte_1B7AE-Ani_Sonic			; 28
		dc.w byte_1B7B2-Ani_Sonic			; 29
		dc.w byte_1B7B6-Ani_Sonic			; 30
		dc.w byte_1B837-Ani_Sonic			; 31
		dc.w byte_1B7BE-Ani_Sonic			; 32
		dc.w byte_1B7C2-Ani_Sonic			; 33
		
byte_1B65C:	
		dc.b $FF
		dc.b id_Frame_Sonic_Walk13
		dc.b id_Frame_Sonic_Walk14
		dc.b id_Frame_Sonic_Walk15
		dc.b id_Frame_Sonic_Walk16
		dc.b id_Frame_Sonic_Walk17
		dc.b id_Frame_Sonic_Walk18
		dc.b id_Frame_Sonic_Walk11
		dc.b id_Frame_Sonic_Walk12
		dc.b afEnd

byte_1B666:	
		dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF	; 0	
		rev02even
		
byte_1B670:	
		dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF	; 0	
		rev02even
		
byte_1B67A:	
		dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF	; 0	
		rev02even
		
byte_1B684:
		dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF	; 0	
		rev02even
		
byte_1B68E:	
		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 ; 0		
		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2 ; 16
		dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5 ; 32
		dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6 ; 48
		dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4 ; 64
		dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6 ; 80
		dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4 ; 96
		dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5 ; 112
		dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5 ; 128
		dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4 ; 144
		dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8 ; 160
		dc.b   8,  9,  9,  9,$FE,  6			; 176
		rev02even
		
byte_1B744:	
		dc.b   9,$CC,$CD,$CE,$CD,$FF			; 0	
		rev02even
		
byte_1B74A:	
		dc.b   5, $B, $C,$FE,  1			; 0 
		rev02even
		
byte_1B74F:	
		dc.b   5,$4C,$4D,$FE,  1			; 0 
		rev02even
		
byte_1B754:
		dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF ; 0	
		rev02even
		
byte_1B760:	
		dc.b   1,  2,$FD,  0				; 0 
		rev02even
		
byte_1B764:
		dc.b   3, $A,$FD,  0				; 0 
		rev02even
		
byte_1B768:
		dc.b   3,$C8,$C9,$CA,$CB,$FF			; 0	
		rev02even
		
byte_1B76E:
		dc.b   5,$D2,$D3,$D4,$D5,$FD,  0		; 0 
		rev02even
		
byte_1B775:
		dc.b   7,$54,$59,$FF				; 0 
		rev02even
		
byte_1B779:
		dc.b   7,$54,$55,$56,$57,$58,$FF		; 0 
		rev02even
		
byte_1B780:
		dc.b $2F,$5B,$FD,  0				; 0 
		rev02even
		
byte_1B784:
		dc.b   1,$50,$51,$FF				; 0 
		rev02even
		
byte_1B788:
		dc.b  $F,$43,$43,$43,$FE,  1			; 0	
		rev02even
		
byte_1B78E:
		dc.b  $F,$43,$44,$FE,  1			; 0 
		rev02even
		
byte_1B793:
		dc.b $13,$6B,$6C,$FF				; 0 
		rev02even
		
byte_1B797:
		dc.b  $B,$5A,$5A,$11,$12,$FD,  0		; 0 
		rev02even
		
byte_1B79E:
		dc.b $20,$5E,$FF				; 0 
		rev02even
		
byte_1B7A1:
		dc.b $20,$5D,$FF				; 0 
		rev02even
		
byte_1B7A4:
		dc.b $20,$5C,$FF				; 0 
		rev02even
		
byte_1B7A7:
		dc.b $40,$4E,$FF				; 0 
		rev02even
		
byte_1B7AA:
		dc.b   9,$4E,$4F,$FF				; 0 
		rev02even
		
byte_1B7AE:
		dc.b $77,  0,$FD,  0				; 0 
		rev02even
		
byte_1B7B2:
		dc.b $13,$D0,$D1,$FF				; 0 
		rev02even
		
byte_1B7B6:
		dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4		; 0	
		rev02even
		
byte_1B7BE:
		dc.b   9,  8,  9,$FF				; 0 
		rev02even
		
byte_1B7C2:	
		dc.b   3,  7,$FD,  0				; 0 
		rev02even
		
Ani_SuperSonic:	
		dc.w byte_1B806-Ani_SuperSonic 
		dc.w byte_1B810-Ani_SuperSonic
		dc.w $FEAA
		dc.w $FEB4
		dc.w byte_1B81A-Ani_SuperSonic
		dc.w byte_1B824-Ani_SuperSonic
		dc.w byte_1B82A-Ani_SuperSonic
		dc.w $FF84
		dc.w byte_1B834-Ani_SuperSonic
		dc.w $FF8E					; 0
		dc.w $FF9A					; 1
		dc.w $FF9E					; 2
		dc.w $FFA2					; 3
		dc.w $FFA8					; 4
		dc.w $FFAF					; 5
		dc.w $FFB3					; 6
		dc.w $FFBA					; 7
		dc.w $FFBE					; 8
		dc.w $FFC2					; 9
		dc.w $FFC8					; 10
		dc.w $FFCD					; 11
		dc.w $FFD1					; 12
		dc.w $FFD8					; 13
		dc.w $FFDB					; 14
		dc.w $FFDE					; 15
		dc.w $FFE1					; 16
		dc.w $FFE1					; 17
		dc.w $FFE4					; 18
		dc.w $FFE8					; 19
		dc.w $FFEC					; 20
		dc.w $FFF0					; 21
		dc.w byte_1B837-Ani_SuperSonic

byte_1B806:	
		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF	; 0	
		rev02even
		
byte_1B810:	
		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF	; 0	
		rev02even
		
byte_1B81A:	
		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF	; 0	
		rev02even
		
byte_1B824:	
		dc.b   7,$72,$73,$74,$73,$FF			; 0	
		rev02even
				
byte_1B82A:	
		dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF	; 0	
		rev02even
		
byte_1B834:	
		dc.b   5,$C1,$FF				; 0 
		rev02even
		
byte_1B837:	
		dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD
		even
		
		align 4
; ===========================================================================

Sonic_LoadGFX:								
		moveq	#0,d0
		move.b	$1A(a0),d0

	Sonic_LoadGFX_2:				
		cmp.b	(v_sonic_last_frame_id).w,d0
		beq.s	locret_1B89A
		move.b	d0,(v_sonic_last_frame_id).w
		lea	(DPLC_Sonic).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1B89A
		move.w	#-$1000,d4

	loc_1B86E:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Sonic,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(AddDMA).l
		dbf	d5,loc_1B86E

locret_1B89A:				
		rts	
; ===========================================================================

JmpTo_KillCharacter:				
		jmp	KillCharacter

	if RemoveJmpTos=0
		align 4
	endc	 

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 02 - Tails
; ----------------------------------------------------------------------------
; Sprite_1B8A4: Object_Tails: Obj02:
Tails:				
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_1B8BE
		move.w	(v_boundary_left_next).w,(v_boundary_left_next_p2).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_boundary_bottom).w,(v_boundary_bottom_next_p2).w

loc_1B8BE:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Tails_Index(pc,d0.w),d1
		jmp	Tails_Index(pc,d1.w)
; ===========================================================================
TailsRoutines:	macro	routinename
		ptr	Tails_\routinename
		endm
		
Tails_Index:	index offset(*),,2	
		CharacterRoutines	TailsRoutines		; generate pointers and IDs for Tails' primary routines	
; ===========================================================================

Tails_Main:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$F,ost_height(a0)
		move.b	#9,$17(a0)
		move.l	#Map_Tails,ost_mappings(a0)
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#render_rel|render_onscreen,ost_render(a0)
		move.w	#$600,(v_tails_max_speed).w
		move.w	#$C,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_1B952
		tst.b	(v_last_lamppost).w
		bne.s	loc_1B96E
		move.w	#tile_Tails,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.w	ost_x_pos(a0),(v_x_pos_lampcopy).w
		move.w	ost_y_pos(a0),(v_y_pos_lampcopy).w
		move.w	ost_tile(a0),(v_ost_tile_lampcopy).w
		move.w	$3E(a0),(v_ost_top_solid_bit_lampcopy).w
		bra.s	loc_1B96E
; ===========================================================================

loc_1B952:				
		move.w	#tile_Tails,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.w	(v_ost_player1+ost_top_solid_bit).w,$3E(a0)
		tst.w	(v_ost_player1+ost_tile).w
		bpl.s	loc_1B96E
		ori.w	#tile_hi,ost_tile(a0)

loc_1B96E:				
		move.w	ost_x_pos(a0),(v_x_pos_p2_lampcopy).w
		move.w	ost_y_pos(a0),(v_y_pos_p2_lampcopy).w
		move.w	ost_tile(a0),(v_ost_tile_p2_lampcopy).w
		move.w	$3E(a0),(v_ost_top_solid_bit_p2_lampcopy).w
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.b	#$1E,$28(a0)
		move.w	#0,(v_tails_cpu_routine).w
		move.w	#0,(v_tails_control_counter).w
		move.w	#0,(v_tails_respawn_counter).w
		move.b	#5,(v_ost_lo_tails_tails).w
		move.w	a0,(v_ost_lo_tails_tails+ost_parent1).w

Tails_Control:				
		cmpa.w	#v_ost_player1,a0
		bne.s	loc_1B9D4
		move.w	(v_joypad_hold).w,(v_joypad2_hold).w
		tst.b	(f_lock_controls).w
		bne.s	loc_1B9EA
		move.w	(v_joypad_hold_actual).w,(v_joypad2_hold).w
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w
		bra.s	loc_1B9EA
; ===========================================================================

loc_1B9D4:				
		tst.b	(f_lock_controls_p2).w
		bne.s	loc_1B9E0
		move.w	(v_joypad2_hold_actual).w,(v_joypad2_hold).w

loc_1B9E0:				
		tst.w	(f_two_player).w
		bne.s	loc_1B9EA
		bsr.w	loc_1BAD4

loc_1B9EA:				
		btst	#0,$2A(a0)
		bne.s	loc_1BA04
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	off_1BA4E(pc,d0.w),d1
		jsr	off_1BA4E(pc,d1.w)

loc_1BA04:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1BA12
		andi.w	#$7FF,ost_y_pos(a0)

loc_1BA12:				
		bsr.s	loc_1BA56
		bsr.w	Tails_RecordPosition
		bsr.w	loc_1BF52
		move.b	(v_angle_right).w,$36(a0)
		move.b	(v_angle_left).w,$37(a0)
		tst.b	(f_wind_tunnel_now).w
		beq.s	loc_1BA3A
		tst.b	$1C(a0)
		bne.s	loc_1BA3A
		move.b	$1D(a0),$1C(a0)

loc_1BA3A:				
		bsr.w	Tails_Animate
		tst.b	$2A(a0)
		bmi.s	loc_1BA4A
		jsr	ReactToItem

loc_1BA4A:				
		bra.w	Tails_LoadGFX
; ===========================================================================
off_1BA4E:	
		dc.w loc_1C00A-off_1BA4E			; 0 
		dc.w loc_1C032-off_1BA4E			; 1
		dc.w loc_1C05C-off_1BA4E			; 2
		dc.w loc_1C082-off_1BA4E			; 3
; ===========================================================================

loc_1BA56:				
		move.w	$30(a0),d0
		beq.s	loc_1BA64
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	loc_1BA6A

loc_1BA64:				
		jsr	DisplaySprite

loc_1BA6A:				
		btst	#1,$2B(a0)
		beq.s	loc_1BA9C
		tst.w	$32(a0)
		beq.s	loc_1BA9C
		subq.w	#1,$32(a0)
		bne.s	loc_1BA9C
		tst.b	(v_current_boss).w
		bne.s	loc_1BA96
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1BA96
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_1BA96:				
		bclr	#1,$2B(a0)

loc_1BA9C:				
		btst	#2,$2B(a0)
		beq.s	locret_1BAD2
		tst.w	$34(a0)
		beq.s	locret_1BAD2
		subq.w	#1,$34(a0)
		bne.s	locret_1BAD2
		move.w	#$600,(v_tails_max_speed).w
		move.w	#$C,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w
		bclr	#2,$2B(a0)
		move.w	#$FC,d0	
		jmp	PlayMusic
; ===========================================================================

locret_1BAD2:				
		rts	
; ===========================================================================

loc_1BAD4:				
		move.b	(v_joypad2_hold_actual).w,d0
		andi.b	#$7F,d0
		beq.s	loc_1BAE4
		move.w	#$258,(v_tails_control_counter).w

loc_1BAE4:				
		lea	($FFFFB000).w,a1
		move.w	(v_tails_cpu_routine).w,d0
		move.w	off_1BAF4(pc,d0.w),d0
		jmp	off_1BAF4(pc,d0.w)
; ===========================================================================
off_1BAF4:	dc.w loc_1BAFE-off_1BAF4			; 0 
		dc.w loc_1BB30-off_1BAF4			; 1
		dc.w loc_1BB8A-off_1BAF4			; 2
		dc.w loc_1BCE0-off_1BAF4			; 3
		dc.w loc_1BEB8-off_1BAF4			; 4
; ===========================================================================

loc_1BAFE:				
		move.w	#6,(v_tails_cpu_routine).w
		move.b	#0,$2A(a0)
		move.b	#0,$1C(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		move.w	#0,ost_inertia(a0)
		move.b	#0,$22(a0)
		move.w	#0,(v_tails_respawn_counter).w
		rts	
; ===========================================================================

loc_1BB30:				
		move.b	(v_joypad2_hold).w,d0
		andi.b	#-$10,d0
		bne.s	loc_1BB54
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0
		bne.s	locret_1BB88
		tst.b	$2A(a1)
		bne.s	locret_1BB88
		move.b	$22(a1),d0
		andi.b	#-$2E,d0
		bne.s	locret_1BB88

loc_1BB54:				
		move.w	#4,(v_tails_cpu_routine).w
		move.w	ost_x_pos(a1),d0
		move.w	d0,ost_x_pos(a0)
		move.w	d0,(v_tails_cpu_x_target).w
		move.w	ost_y_pos(a1),d0
		move.w	d0,(v_tails_cpu_y_target).w
		subi.w	#$C0,d0	
		move.w	d0,ost_y_pos(a0)
		ori.w	#tile_hi,ost_tile(a0)
		move.b	#0,$39(a0)
		move.w	#0,$3A(a0)

locret_1BB88:				
		rts	
; ===========================================================================

loc_1BB8A:				
		tst.b	ost_render(a0)
		bmi.s	loc_1BBC8
		addq.w	#1,(v_tails_respawn_counter).w
		cmpi.w	#$12C,(v_tails_respawn_counter).w
		bcs.s	loc_1BBCE
		move.w	#0,(v_tails_respawn_counter).w
		move.w	#2,(v_tails_cpu_routine).w
		move.b	#-$7F,$2A(a0)
		move.b	#2,$22(a0)
		move.w	#0,ost_x_pos(a0)
		move.w	#0,ost_y_pos(a0)
		move.b	#$20,$1C(a0)
		rts	
; ===========================================================================

loc_1BBC8:				
		move.w	#0,(v_tails_respawn_counter).w

loc_1BBCE:				
		lea	(v_sonic_pos_tracker).w,a2
		move.w	#$10,d2
		lsl.b	#2,d2
		addq.b	#4,d2
		move.w	(v_sonic_pos_tracker_num).w,d3
		sub.b	d2,d3
		move.w	(a2,d3.w),(v_tails_cpu_x_target).w
		move.w	2(a2,d3.w),(v_tails_cpu_y_target).w
		tst.b	(f_water).w
		beq.s	loc_1BC04
		move.w	(v_water_height_actual).w,d0
		subi.w	#$10,d0
		cmp.w	(v_tails_cpu_y_target).w,d0
		bge.s	loc_1BC04
		move.w	d0,(v_tails_cpu_y_target).w

loc_1BC04:				
		move.w	ost_x_pos(a0),d0
		sub.w	(v_tails_cpu_x_target).w,d0
		beq.s	loc_1BC54
		move.w	d0,d2
		bpl.s	loc_1BC14
		neg.w	d2

loc_1BC14:				
		lsr.w	#4,d2
		cmpi.w	#$C,d2
		bcs.s	loc_1BC1E
		moveq	#$C,d2

loc_1BC1E:				
		move.b	ost_x_vel(a1),d1
		bpl.s	loc_1BC26
		neg.b	d1

loc_1BC26:				
		add.b	d1,d2
		addq.w	#1,d2
		tst.w	d0
		bmi.s	loc_1BC40
		bset	#0,$22(a0)
		cmp.w	d0,d2
		bcs.s	loc_1BC3C
		move.w	d0,d2
		moveq	#0,d0

loc_1BC3C:				
		neg.w	d2
		bra.s	loc_1BC50
; ===========================================================================

loc_1BC40:				
		bclr	#0,$22(a0)
		neg.w	d0
		cmp.w	d0,d2
		bcs.s	loc_1BC50
		move.b	d0,d2
		moveq	#0,d0

loc_1BC50:				
		add.w	d2,ost_x_pos(a0)

loc_1BC54:				
		moveq	#1,d2
		move.w	ost_y_pos(a0),d1
		sub.w	(v_tails_cpu_y_target).w,d1
		beq.s	loc_1BC68
		bmi.s	loc_1BC64
		neg.w	d2

loc_1BC64:				
		add.w	d2,ost_y_pos(a0)

loc_1BC68:				
		lea	(v_sonic_stat_tracker).w,a2
		move.b	2(a2,d3.w),d2
		andi.b	#-$2E,d2
		bne.s	locret_1BCDE
		or.w	d0,d1
		bne.s	locret_1BCDE
		move.w	#6,(v_tails_cpu_routine).w
		move.b	#0,$2A(a0)
		move.b	#0,$1C(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		move.w	#0,ost_inertia(a0)
		move.b	#2,$22(a0)
		move.w	#0,$2E(a0)
		andi.w	#tile_draw,ost_tile(a0)
		tst.b	ost_tile(a1)
		bpl.s	loc_1BCBC
		ori.w	#tile_hi,ost_tile(a0)

loc_1BCBC:				
		move.b	$3E(a1),$3E(a0)
		move.b	$3F(a1),$3F(a0)
		cmpi.b	#9,$1C(a1)
		beq.s	locret_1BCDE
		move.b	$39(a0),d0
		beq.s	locret_1BCDE
		move.b	d0,$39(a1)
		bsr.w	loc_212C4

locret_1BCDE:				
		rts	
; ===========================================================================

loc_1BCE0:				
		cmpi.b	#6,($FFFFB024).w
		bcs.s	loc_1BD0E
		move.w	#4,(v_tails_cpu_routine).w
		move.b	#0,$39(a0)
		move.w	#0,$3A(a0)
		move.b	#-$7F,$2A(a0)
		move.b	#2,$22(a0)
		move.b	#$20,$1C(a0)
		rts	
; ===========================================================================

loc_1BD0E:				
		bsr.w	loc_1BE66
		tst.w	(v_tails_control_counter).w
		bne.w	loc_1BE28
		tst.b	$2A(a0)
		bmi.w	loc_1BE28
		tst.w	$2E(a0)
		beq.s	loc_1BD34
		tst.w	ost_inertia(a0)
		bne.s	loc_1BD34
		move.w	#8,(v_tails_cpu_routine).w

loc_1BD34:				
		lea	(v_sonic_pos_tracker).w,a1
		move.w	#$10,d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	(v_sonic_pos_tracker_num).w,d0
		sub.b	d1,d0
		move.w	(a1,d0.w),d2
		move.w	2(a1,d0.w),d3
		lea	(v_sonic_stat_tracker).w,a1
		move.w	(a1,d0.w),d1
		move.b	2(a1,d0.w),d4
		move.w	d1,d0
		btst	#5,$22(a0)
		beq.s	loc_1BD6C
		btst	#5,d4
		beq.w	loc_1BE06

loc_1BD6C:				
		sub.w	ost_x_pos(a0),d2
		beq.s	loc_1BDBA
		bpl.s	loc_1BD98
		neg.w	d2
		cmpi.w	#$10,d2
		bcs.s	loc_1BD84
		andi.w	#-$C0D,d1
		ori.w	#$404,d1

loc_1BD84:				
		tst.w	ost_inertia(a0)
		beq.s	loc_1BDCE
		btst	#0,$22(a0)
		beq.s	loc_1BDCE
		subq.w	#1,ost_x_pos(a0)
		bra.s	loc_1BDCE
; ===========================================================================

loc_1BD98:				
		cmpi.w	#$10,d2
		bcs.s	loc_1BDA6
		andi.w	#-$C0D,d1
		ori.w	#$808,d1

loc_1BDA6:				
		tst.w	ost_inertia(a0)
		beq.s	loc_1BDCE
		btst	#0,$22(a0)
		bne.s	loc_1BDCE
		addq.w	#1,ost_x_pos(a0)
		bra.s	loc_1BDCE
; ===========================================================================

loc_1BDBA:				
		bclr	#0,$22(a0)
		move.b	d4,d0
		andi.b	#1,d0
		beq.s	loc_1BDCE
		bset	#0,$22(a0)

loc_1BDCE:				
		tst.b	(f_tails_cpu_jumping).w
		beq.s	loc_1BDE6
		ori.w	#$7000,d1
		btst	#1,$22(a0)
		bne.s	loc_1BE22
		move.b	#0,(f_tails_cpu_jumping).w

loc_1BDE6:				
		move.w	(v_frame_counter).w,d0
		andi.w	#$FF,d0
		beq.s	loc_1BDF6
		cmpi.w	#$40,d2
		bcc.s	loc_1BE22

loc_1BDF6:				
		sub.w	ost_y_pos(a0),d3
		beq.s	loc_1BE22
		bpl.s	loc_1BE22
		neg.w	d3
		cmpi.w	#$20,d3
		bcs.s	loc_1BE22

loc_1BE06:				
		move.b	(v_frame_counter_low).w,d0
		andi.b	#$3F,d0
		bne.s	loc_1BE22
		cmpi.b	#8,$1C(a0)
		beq.s	loc_1BE22
		ori.w	#$7070,d1
		move.b	#1,(f_tails_cpu_jumping).w

loc_1BE22:				
		move.w	d1,(v_joypad2_hold).w
		rts	
; ===========================================================================

loc_1BE28:				
		tst.w	(v_tails_control_counter).w
		beq.s	locret_1BE32
		subq.w	#1,(v_tails_control_counter).w

locret_1BE32:				
		rts	
; ===========================================================================

loc_1BE34:				
		move.w	#0,(v_tails_control_counter).w
		move.w	#0,(v_tails_respawn_counter).w
		move.w	#2,(v_tails_cpu_routine).w
		move.b	#-$7F,$2A(a0)
		move.b	#2,$22(a0)
		move.w	#$4000,ost_x_pos(a0)
		move.w	#0,ost_y_pos(a0)			; could be clr.w
		move.b	#$20,$1C(a0)
		rts	
; ===========================================================================

loc_1BE66:				
		tst.b	ost_render(a0)
		bmi.s	loc_1BE9C
		btst	#3,$22(a0)
		beq.s	loc_1BE8C
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		move.b	(v_tails_interact_id).w,d0
		cmp.b	(a3),d0
		bne.s	loc_1BE98

loc_1BE8C:				
		addq.w	#1,(v_tails_respawn_counter).w
		cmpi.w	#$12C,(v_tails_respawn_counter).w
		bcs.s	loc_1BEA2

loc_1BE98:				
		bra.w	loc_1BE34
; ===========================================================================

loc_1BE9C:				
		move.w	#0,(v_tails_respawn_counter).w

loc_1BEA2:				
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		move.b	(a3),(v_tails_interact_id).w
		rts	
; ===========================================================================

loc_1BEB8:				
		bsr.w	loc_1BE66
		tst.w	(v_tails_control_counter).w
		bne.w	locret_1BF36
		tst.w	$2E(a0)
		bne.s	locret_1BF36
		tst.b	$39(a0)
		bne.s	loc_1BF0C
		tst.w	ost_inertia(a0)
		bne.s	locret_1BF36
		bclr	#0,$22(a0)
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcs.s	loc_1BEEC
		bset	#0,$22(a0)

loc_1BEEC:				
		move.w	#$202,(v_joypad2_hold).w
		move.b	(v_frame_counter_low).w,d0
		andi.b	#$7F,d0
		beq.s	loc_1BF1C
		cmpi.b	#8,$1C(a0)
		bne.s	locret_1BF36
		move.w	#$7272,(v_joypad2_hold).w
		rts	
; ===========================================================================

loc_1BF0C:				
		move.w	#$202,(v_joypad2_hold).w
		move.b	(v_frame_counter_low).w,d0
		andi.b	#$7F,d0
		bne.s	loc_1BF2A

loc_1BF1C:				
		move.w	#0,(v_joypad2_hold).w
		move.w	#6,(v_tails_cpu_routine).w
		rts	
; ===========================================================================

loc_1BF2A:				
		andi.b	#$1F,d0
		bne.s	locret_1BF36
		ori.w	#$7070,(v_joypad2_hold).w

locret_1BF36:				
		rts	
; ===========================================================================

Tails_RecordPosition:			
		move.w	(v_tails_pos_tracker_num).w,d0
		lea	(v_tails_pos_tracker).w,a1
		lea	(a1,d0.w),a1
		move.w	ost_x_pos(a0),(a1)+
		move.w	ost_y_pos(a0),(a1)+
		addq.b	#4,($FFFFEED7).w
		rts	
; ===========================================================================

loc_1BF52:				
		tst.b	(f_water).w
		bne.s	loc_1BF5A

locret_1BF58:				
		rts	
; ===========================================================================

loc_1BF5A:				
		move.w	(v_water_height_actual).w,d0
		cmp.w	ost_y_pos(a0),d0
		bge.s	loc_1BFB2
		bset	#6,$22(a0)
		bne.s	locret_1BF58
		movea.l	a0,a1
		bsr.w	ResumeMusic
		move.b	#$A,($FFFFD0C0).w
		move.b	#-$7F,($FFFFD0E8).w
		move.l	a0,($FFFFD0FC).w
		move.w	#$300,(v_tails_max_speed).w
		move.w	#6,(v_tails_acceleration).w
		move.w	#$40,(v_tails_deceleration).w
		asr	ost_x_vel(a0)
		asr	ost_y_vel(a0)
		asr	ost_y_vel(a0)
		beq.s	locret_1BF58
		move.w	#$100,($FFFFD15C).w
		move.w	#$AA,d0	
		jmp	PlaySound
; ===========================================================================

loc_1BFB2:				
		bclr	#6,$22(a0)
		beq.s	locret_1BF58
		movea.l	a0,a1
		bsr.w	ResumeMusic
		move.w	#$600,(v_tails_max_speed).w
		move.w	#$C,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w
		cmpi.b	#4,ost_primary_routine(a0)
		beq.s	loc_1BFDE
		asl	ost_y_vel(a0)

loc_1BFDE:				
		tst.w	ost_y_vel(a0)
		beq.w	locret_1BF58
		move.w	#$100,($FFFFD15C).w
		movea.l	a0,a1
		bsr.w	ResumeMusic
		cmpi.w	#-$1000,ost_y_vel(a0)
		bgt.s	loc_1C000
		move.w	#-$1000,ost_y_vel(a0)

loc_1C000:				
		move.w	#$AA,d0	
		jmp	PlaySound
; ===========================================================================

loc_1C00A:				
		bsr.w	loc_1C70E
		bsr.w	loc_1C61E
		bsr.w	loc_1C846
		bsr.w	loc_1C0AC
		bsr.w	loc_1C5B8
		bsr.w	loc_1C55A
		jsr	SpeedToPos
		bsr.w	Player_AnglePos
		bsr.w	loc_1C8B8
		rts	
; ===========================================================================

loc_1C032:				
		bsr.w	loc_1C6CC
		bsr.w	loc_1C4CE
		bsr.w	loc_1C55A
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1C052
		subi.w	#$28,ost_y_vel(a0)

loc_1C052:				
		bsr.w	loc_1C8FA
		bsr.w	loc_1C95A
		rts	
; ===========================================================================

loc_1C05C:				
		tst.b	$39(a0)
		bne.s	loc_1C066
		bsr.w	loc_1C61E

loc_1C066:				
		bsr.w	loc_1C87C
		bsr.w	loc_1C3AA
		bsr.w	loc_1C55A
		jsr	SpeedToPos
		bsr.w	Player_AnglePos
		bsr.w	loc_1C8B8
		rts	
; ===========================================================================

loc_1C082:				
		bsr.w	loc_1C6CC
		bsr.w	loc_1C4CE
		bsr.w	loc_1C55A
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1C0A2
		subi.w	#$28,ost_y_vel(a0)

loc_1C0A2:				
		bsr.w	loc_1C8FA
		bsr.w	loc_1C95A
		rts	
; ===========================================================================

loc_1C0AC:				
		move.w	(v_tails_max_speed).w,d6
		move.w	(v_tails_acceleration).w,d5
		move.w	(v_tails_deceleration).w,d4
		tst.b	$2B(a0)
		bmi.w	loc_1C214
		tst.w	$2E(a0)
		bne.w	loc_1C1D0
		btst	#2,(v_joypad2_hold).w
		beq.s	loc_1C0D4
		bsr.w	loc_1C2A4

loc_1C0D4:				
		btst	#3,(v_joypad2_hold).w
		beq.s	loc_1C0E0
		bsr.w	loc_1C32A

loc_1C0E0:				
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.w	loc_1C1D0
		tst.w	ost_inertia(a0)
		bne.w	loc_1C1D0
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)
		btst	#3,$22(a0)
		beq.s	loc_1C142
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	($FFFFB000).w,a1
		lea	(a1,d0.w),a1
		tst.b	$22(a1)
		bmi.s	loc_1C174
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#4,d2
		add.w	ost_x_pos(a0),d1
		sub.w	ost_x_pos(a1),d1
		cmpi.w	#4,d1
		blt.s	loc_1C166
		cmp.w	d2,d1
		bge.s	loc_1C156
		bra.s	loc_1C174
; ===========================================================================

loc_1C142:				
		jsr	FindFloorEdge
		cmpi.w	#$C,d1
		blt.s	loc_1C174
		cmpi.b	#3,$36(a0)
		bne.s	loc_1C15E

loc_1C156:				
		bclr	#0,$22(a0)
		bra.s	loc_1C16C
; ===========================================================================

loc_1C15E:				
		cmpi.b	#3,$37(a0)
		bne.s	loc_1C174

loc_1C166:				
		bset	#0,$22(a0)

loc_1C16C:				
		move.b	#6,$1C(a0)
		bra.s	loc_1C1D0
; ===========================================================================

loc_1C174:				
		btst	#0,(v_joypad2_hold).w
		beq.s	loc_1C1A2
		move.b	#7,$1C(a0)
		addq.w	#1,(v_tails_look_delay_counter).w
		cmpi.w	#$78,(v_tails_look_delay_counter).w
		bcs.s	loc_1C1D6
		move.w	#$78,(v_tails_look_delay_counter).w
		cmpi.w	#$C8,(v_camera_y_shift_p2).w
		beq.s	loc_1C1E8
		addq.w	#2,(v_camera_y_shift_p2).w
		bra.s	loc_1C1E8
; ===========================================================================

loc_1C1A2:				
		btst	#1,(v_joypad2_hold).w
		beq.s	loc_1C1D0
		move.b	#8,$1C(a0)
		addq.w	#1,(v_tails_look_delay_counter).w
		cmpi.w	#$78,(v_tails_look_delay_counter).w
		bcs.s	loc_1C1D6
		move.w	#$78,(v_tails_look_delay_counter).w
		cmpi.w	#8,(v_camera_y_shift_p2).w
		beq.s	loc_1C1E8
		subq.w	#2,(v_camera_y_shift_p2).w
		bra.s	loc_1C1E8
; ===========================================================================

loc_1C1D0:				
		move.w	#0,(v_tails_look_delay_counter).w

loc_1C1D6:				
		cmpi.w	#$60,(v_camera_y_shift_p2).w
		beq.s	loc_1C1E8
		bcc.s	loc_1C1E4
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C1E4:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C1E8:				
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$C,d0
		bne.s	loc_1C214
		move.w	ost_inertia(a0),d0
		beq.s	loc_1C214
		bmi.s	loc_1C208
		sub.w	d5,d0
		bcc.s	loc_1C202
		move.w	#0,d0

loc_1C202:				
		move.w	d0,ost_inertia(a0)
		bra.s	loc_1C214
; ===========================================================================

loc_1C208:				
		add.w	d5,d0
		bcc.s	loc_1C210
		move.w	#0,d0

loc_1C210:				
		move.w	d0,ost_inertia(a0)

loc_1C214:				
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	ost_inertia(a0),d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a0)
		muls.w	ost_inertia(a0),d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a0)

loc_1C232:				
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.s	locret_1C2A2
		move.b	#$40,d1
		tst.w	ost_inertia(a0)
		beq.s	locret_1C2A2
		bmi.s	loc_1C24A
		neg.w	d1

loc_1C24A:				
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	Player_CalcRoomAhead
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_1C2A2
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#-$40,d0
		beq.s	loc_1C29E
		cmpi.b	#$40,d0
		beq.s	loc_1C28C
		cmpi.b	#-$80,d0
		beq.s	loc_1C286
		add.w	d1,ost_x_vel(a0)
		bset	#5,$22(a0)
		move.w	#0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1C286:				
		sub.w	d1,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_1C28C:				
		sub.w	d1,ost_x_vel(a0)
		bset	#5,$22(a0)
		move.w	#0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1C29E:				
		add.w	d1,ost_y_vel(a0)

locret_1C2A2:				
		rts	
; ===========================================================================

loc_1C2A4:				
		move.w	ost_inertia(a0),d0
		beq.s	loc_1C2AC
		bpl.s	loc_1C2DE

loc_1C2AC:				
		bset	#0,$22(a0)
		bne.s	loc_1C2C0
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1C2C0:				
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1C2D2
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_1C2D2
		move.w	d1,d0

loc_1C2D2:				
		move.w	d0,ost_inertia(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1C2DE:				
		sub.w	d4,d0
		bcc.s	loc_1C2E6
		move.w	#-$80,d0

loc_1C2E6:				
		move.w	d0,ost_inertia(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.s	locret_1C328
		cmpi.w	#$400,d0
		blt.s	locret_1C328
		move.b	#$D,$1C(a0)
		bclr	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	PlaySound
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1C328
		move.b	#6,($FFFFD164).w
		move.b	#$15,($FFFFD15A).w

locret_1C328:				
		rts	
; ===========================================================================

loc_1C32A:				
		move.w	ost_inertia(a0),d0
		bmi.s	loc_1C35E
		bclr	#0,$22(a0)
		beq.s	loc_1C344
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1C344:				
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1C352
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_1C352
		move.w	d6,d0

loc_1C352:				
		move.w	d0,ost_inertia(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1C35E:				
		add.w	d4,d0
		bcc.s	loc_1C366
		move.w	#$80,d0	

loc_1C366:				
		move.w	d0,ost_inertia(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		bne.s	locret_1C3A8
		cmpi.w	#-$400,d0
		bgt.s	locret_1C3A8
		move.b	#$D,$1C(a0)
		bset	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	PlaySound
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1C3A8
		move.b	#6,($FFFFD164).w
		move.b	#$15,($FFFFD15A).w

locret_1C3A8:				
		rts	
; ===========================================================================

loc_1C3AA:				
		move.w	(v_tails_max_speed).w,d6
		asl.w	#1,d6
		move.w	(v_tails_acceleration).w,d5
		asr.w	#1,d5
		move.w	(v_tails_deceleration).w,d4
		asr.w	#2,d4
		tst.b	$2B(a0)
		bmi.w	loc_1C440
		tst.w	$2E(a0)
		bne.s	loc_1C3E2
		btst	#2,(v_joypad2_hold).w
		beq.s	loc_1C3D6
		bsr.w	loc_1C488

loc_1C3D6:				
		btst	#3,(v_joypad2_hold).w
		beq.s	loc_1C3E2
		bsr.w	loc_1C4AC

loc_1C3E2:				
		move.w	ost_inertia(a0),d0
		beq.s	loc_1C404
		bmi.s	loc_1C3F8
		sub.w	d5,d0
		bcc.s	loc_1C3F2
		move.w	#0,d0

loc_1C3F2:				
		move.w	d0,ost_inertia(a0)
		bra.s	loc_1C404
; ===========================================================================

loc_1C3F8:				
		add.w	d5,d0
		bcc.s	loc_1C400
		move.w	#0,d0

loc_1C400:				
		move.w	d0,ost_inertia(a0)

loc_1C404:				
		tst.w	ost_inertia(a0)
		bne.s	loc_1C440
		tst.b	$39(a0)
		bne.s	loc_1C42E
		bclr	#2,$22(a0)
		move.b	#$F,ost_height(a0)
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#1,ost_y_pos(a0)
		bra.s	loc_1C440
; ===========================================================================

loc_1C42E:				
		move.w	#$400,ost_inertia(a0)
		btst	#0,$22(a0)
		beq.s	loc_1C440
		neg.w	ost_inertia(a0)

loc_1C440:				
		cmpi.w	#$60,(v_camera_y_shift_p2).w
		beq.s	loc_1C452
		bcc.s	loc_1C44E
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C44E:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C452:				
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	ost_inertia(a0),d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a0)
		muls.w	ost_inertia(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_1C476
		move.w	#$1000,d1

loc_1C476:				
		cmpi.w	#-$1000,d1
		bge.s	loc_1C480
		move.w	#-$1000,d1

loc_1C480:				
		move.w	d1,ost_x_vel(a0)
		bra.w	loc_1C232
; ===========================================================================

loc_1C488:				
		move.w	ost_inertia(a0),d0
		beq.s	loc_1C490
		bpl.s	loc_1C49E

loc_1C490:				
		bset	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1C49E:				
		sub.w	d4,d0
		bcc.s	loc_1C4A6
		move.w	#-$80,d0

loc_1C4A6:				
		move.w	d0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1C4AC:				
		move.w	ost_inertia(a0),d0
		bmi.s	loc_1C4C0
		bclr	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1C4C0:				
		add.w	d4,d0
		bcc.s	loc_1C4C8
		move.w	#$80,d0	

loc_1C4C8:				
		move.w	d0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1C4CE:				
		move.w	(v_tails_max_speed).w,d6
		move.w	(v_tails_acceleration).w,d5
		asl.w	#1,d5
		btst	#4,$22(a0)
		bne.s	loc_1C518
		move.w	ost_x_vel(a0),d0
		btst	#2,(v_joypad2_hold).w
		beq.s	loc_1C4FE
		bset	#0,$22(a0)
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1C4FE
		move.w	d1,d0

loc_1C4FE:				
		btst	#3,(v_joypad2_hold).w
		beq.s	loc_1C514
		bclr	#0,$22(a0)
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1C514
		move.w	d6,d0

loc_1C514:				
		move.w	d0,ost_x_vel(a0)

loc_1C518:				
		cmpi.w	#$60,(v_camera_y_shift_p2).w
		beq.s	loc_1C52A
		bcc.s	loc_1C526
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C526:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C52A:				
		cmpi.w	#-$400,ost_y_vel(a0)
		bcs.s	locret_1C558
		move.w	ost_x_vel(a0),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	locret_1C558
		bmi.s	loc_1C54C
		sub.w	d1,d0
		bcc.s	loc_1C546
		move.w	#0,d0

loc_1C546:				
		move.w	d0,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_1C54C:				
		sub.w	d1,d0
		bcs.s	loc_1C554
		move.w	#0,d0

loc_1C554:				
		move.w	d0,ost_x_vel(a0)

locret_1C558:				
		rts	
; ===========================================================================

loc_1C55A:				
		move.l	ost_x_pos(a0),d1
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(v_boundary_left_next_p2).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0
		bhi.s	loc_1C5A0
		move.w	(v_boundary_right_next_p2).w,d0
		addi.w	#$128,d0
		tst.b	(v_current_boss).w
		bne.s	loc_1C588
		addi.w	#$40,d0

loc_1C588:				
		cmp.w	d1,d0
		bls.s	loc_1C5A0

loc_1C58C:				
		move.w	(v_boundary_bottom_next_p2).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		blt.s	loc_1C59C
		rts	
; ===========================================================================

loc_1C59C:				
		bra.w	JmpTo2_KillCharacter
; ===========================================================================

loc_1C5A0:				
		move.w	d0,ost_x_pos(a0)
		move.w	#0,ost_x_sub(a0)			; 2+x_pos
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_inertia(a0)
		bra.s	loc_1C58C
; ===========================================================================

loc_1C5B8:				
		tst.b	$2B(a0)
		bmi.s	locret_1C5DE
		move.w	ost_inertia(a0),d0
		bpl.s	loc_1C5C6
		neg.w	d0

loc_1C5C6:				
		cmpi.w	#$80,d0	
		bcs.s	locret_1C5DE
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$C,d0
		bne.s	locret_1C5DE
		btst	#1,(v_joypad2_hold).w
		bne.s	loc_1C5E0

locret_1C5DE:				
		rts	
; ===========================================================================

loc_1C5E0:				
		btst	#2,$22(a0)
		beq.s	loc_1C5EA
		rts	
; ===========================================================================

loc_1C5EA:				
		bset	#2,$22(a0)
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#1,ost_y_pos(a0)
		move.w	#$BE,d0	
		jsr	PlaySound
		tst.w	ost_inertia(a0)
		bne.s	locret_1C61C
		move.w	#$200,ost_inertia(a0)

locret_1C61C:				
		rts	
; ===========================================================================

loc_1C61E:				
		move.b	(v_joypad2_press).w,d0
		andi.b	#$70,d0
		beq.w	locret_1C6C2
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#-$80,d0
		bsr.w	Player_CalcHeadroom
		cmpi.w	#6,d1
		blt.w	locret_1C6C2
		move.w	#$680,d2
		btst	#6,$22(a0)
		beq.s	loc_1C650
		move.w	#$380,d2

loc_1C650:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	CalcSine
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,ost_x_vel(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,ost_y_vel(a0)
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		addq.l	#4,sp
		move.b	#1,$3C(a0)
		clr.b	$38(a0)
		move.w	#$A0,d0	
		jsr	PlaySound
		move.b	#$F,ost_height(a0)
		move.b	#9,$17(a0)
		btst	#2,$22(a0)
		bne.s	loc_1C6C4
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		bset	#2,$22(a0)
		addq.w	#1,ost_y_pos(a0)

locret_1C6C2:				
		rts	
; ===========================================================================

loc_1C6C4:				
		bset	#4,$22(a0)
		rts	
; ===========================================================================

loc_1C6CC:				
		tst.b	$3C(a0)
		beq.s	loc_1C6F8
		move.w	#-$400,d1
		btst	#6,$22(a0)
		beq.s	loc_1C6E2
		move.w	#-$200,d1

loc_1C6E2:				
		cmp.w	ost_y_vel(a0),d1
		ble.s	locret_1C6F6
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$70,d0
		bne.s	locret_1C6F6
		move.w	d1,ost_y_vel(a0)

locret_1C6F6:				
		rts	
; ===========================================================================

loc_1C6F8:				
		tst.b	$39(a0)
		bne.s	locret_1C70C
		cmpi.w	#-$FC0,ost_y_vel(a0)
		bge.s	locret_1C70C
		move.w	#-$FC0,ost_y_vel(a0)

locret_1C70C:				
		rts	
; ===========================================================================

loc_1C70E:				
		tst.b	$39(a0)
		bne.s	loc_1C75E
		cmpi.b	#8,$1C(a0)
		bne.s	locret_1C75C
		move.b	(v_joypad2_press).w,d0
		andi.b	#$70,d0
		beq.w	locret_1C75C
		move.b	#9,$1C(a0)
		move.w	#$E0,d0	
		jsr	PlaySound
		addq.l	#4,sp
		move.b	#1,$39(a0)
		move.w	#0,$3A(a0)
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1C754
		move.b	#2,($FFFFD15C).w

loc_1C754:				
		bsr.w	loc_1C55A
		bsr.w	Player_AnglePos

locret_1C75C:				
		rts	
; ===========================================================================

loc_1C75E:				
		move.b	(v_joypad2_hold).w,d0
		btst	#1,d0
		bne.s	loc_1C7E0
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#1,ost_y_pos(a0)
		move.b	#0,$39(a0)
		moveq	#0,d0
		move.b	$3A(a0),d0
		add.w	d0,d0
		move.w	word_1C7CE(pc,d0.w),ost_inertia(a0)
		move.w	ost_inertia(a0),d0
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0
		neg.w	d0
		addi.w	#$2000,d0
		move.w	d0,(v_hscroll_delay_val_p2).w
		btst	#0,$22(a0)
		beq.s	loc_1C7B6
		neg.w	ost_inertia(a0)

loc_1C7B6:				
		bset	#2,$22(a0)
		move.b	#0,($FFFFD15C).w
		move.w	#$BC,d0	
		jsr	PlaySound
		bra.s	loc_1C828
; ===========================================================================
word_1C7CE:	
		dc.w  $800					; 0
		dc.w  $880					; 1
		dc.w  $900					; 2
		dc.w  $980					; 3
		dc.w  $A00					; 4
		dc.w  $A80					; 5
		dc.w  $B00					; 6
		dc.w  $B80					; 7
		dc.w  $C00					; 8
; ===========================================================================

loc_1C7E0:				
		tst.w	$3A(a0)
		beq.s	loc_1C7F8
		move.w	$3A(a0),d0
		lsr.w	#5,d0
		sub.w	d0,$3A(a0)
		bcc.s	loc_1C7F8
		move.w	#0,$3A(a0)

loc_1C7F8:				
		move.b	(v_joypad2_press).w,d0
		andi.b	#$70,d0
		beq.w	loc_1C828
		move.w	#$900,$1C(a0)
		move.w	#$E0,d0	
		jsr	PlaySound
		addi.w	#$200,$3A(a0)
		cmpi.w	#$800,$3A(a0)
		bcs.s	loc_1C828
		move.w	#$800,$3A(a0)

loc_1C828:				
		addq.l	#4,sp
		cmpi.w	#$60,(v_camera_y_shift_p2).w
		beq.s	loc_1C83C
		bcc.s	loc_1C838
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C838:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C83C:				
		bsr.w	loc_1C55A
		bsr.w	Player_AnglePos
		rts	
; ===========================================================================

loc_1C846:				
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#-$40,d0
		bcc.s	locret_1C87A
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	#$20,d0
		asr.l	#8,d0
		tst.w	ost_inertia(a0)
		beq.s	locret_1C87A
		bmi.s	loc_1C876
		tst.w	d0
		beq.s	locret_1C874
		add.w	d0,ost_inertia(a0)

locret_1C874:				
		rts	
; ===========================================================================

loc_1C876:				
		add.w	d0,ost_inertia(a0)

locret_1C87A:				
		rts	
; ===========================================================================

loc_1C87C:				
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#-$40,d0
		bcc.s	locret_1C8B6
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	#$50,d0
		asr.l	#8,d0
		tst.w	ost_inertia(a0)
		bmi.s	loc_1C8AC
		tst.w	d0
		bpl.s	loc_1C8A6
		asr.l	#2,d0

loc_1C8A6:				
		add.w	d0,ost_inertia(a0)
		rts	
; ===========================================================================

loc_1C8AC:				
		tst.w	d0
		bmi.s	loc_1C8B2
		asr.l	#2,d0

loc_1C8B2:				
		add.w	d0,ost_inertia(a0)

locret_1C8B6:				
		rts	
; ===========================================================================

loc_1C8B8:				
		nop	
		tst.b	$38(a0)
		bne.s	locret_1C8F2
		tst.w	$2E(a0)
		bne.s	loc_1C8F4
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#-$40,d0
		beq.s	locret_1C8F2
		move.w	ost_inertia(a0),d0
		bpl.s	loc_1C8DC
		neg.w	d0

loc_1C8DC:				
		cmpi.w	#$280,d0
		bcc.s	locret_1C8F2
		clr.w	ost_inertia(a0)
		bset	#1,$22(a0)
		move.w	#$1E,$2E(a0)

locret_1C8F2:				
		rts	
; ===========================================================================

loc_1C8F4:				
		subq.w	#1,$2E(a0)
		rts	
; ===========================================================================

loc_1C8FA:				
		move.b	$26(a0),d0
		beq.s	loc_1C914
		bpl.s	loc_1C90A
		addq.b	#2,d0
		bcc.s	loc_1C908
		moveq	#0,d0

loc_1C908:				
		bra.s	loc_1C910
; ===========================================================================

loc_1C90A:				
		subq.b	#2,d0
		bcc.s	loc_1C910
		moveq	#0,d0

loc_1C910:				
		move.b	d0,$26(a0)

loc_1C914:				
		move.b	$27(a0),d0
		beq.s	locret_1C958
		tst.w	ost_inertia(a0)
		bmi.s	loc_1C938

loc_1C920:				
		move.b	$2D(a0),d1
		add.b	d1,d0
		bcc.s	loc_1C936
		subq.b	#1,$2C(a0)
		bcc.s	loc_1C936
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1C936:				
		bra.s	loc_1C954
; ===========================================================================

loc_1C938:				
		tst.b	$29(a0)
		bne.s	loc_1C920
		move.b	$2D(a0),d1
		sub.b	d1,d0
		bcc.s	loc_1C954
		subq.b	#1,$2C(a0)
		bcc.s	loc_1C954
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1C954:				
		move.b	d0,$27(a0)

locret_1C958:				
		rts	
; ===========================================================================

loc_1C95A:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1C972
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1C972:				
		move.b	$3F(a0),d5
		move.w	ost_x_vel(a0),d1
		move.w	ost_y_vel(a0),d2
		jsr	(CalcAngle).l
		subi.b	#$20,d0
		andi.b	#-$40,d0
		cmpi.b	#$40,d0
		beq.w	loc_1CA3C
		cmpi.b	#-$80,d0
		beq.w	loc_1CA98
		cmpi.b	#-$40,d0
		beq.w	loc_1CAF4
		bsr.w	Player_FindWallLeft_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1C9B6
		sub.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1C9B6:				
		bsr.w	FindWallRight_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1C9C8
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1C9C8:				
		bsr.w	Player_FindFloor
		tst.w	d1
		bpl.s	locret_1CA3A
		move.b	ost_y_vel(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_1C9E0
		cmp.b	d2,d0
		blt.s	locret_1CA3A

loc_1C9E0:				
		add.w	d1,ost_y_pos(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_1CA18
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_1CA0A
		asr	ost_y_vel(a0)
		bra.s	loc_1CA2C
; ===========================================================================

loc_1CA0A:				
		move.w	#0,ost_y_vel(a0)
		move.w	ost_x_vel(a0),ost_inertia(a0)
		rts	
; ===========================================================================

loc_1CA18:				
		move.w	#0,ost_x_vel(a0)
		cmpi.w	#$FC0,ost_y_vel(a0)
		ble.s	loc_1CA2C
		move.w	#$FC0,ost_y_vel(a0)

loc_1CA2C:				
		move.w	ost_y_vel(a0),ost_inertia(a0)
		tst.b	d3
		bpl.s	locret_1CA3A
		neg.w	ost_inertia(a0)

locret_1CA3A:				
		rts	
; ===========================================================================

loc_1CA3C:				
		bsr.w	Player_FindWallLeft_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1CA56
		sub.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	ost_y_vel(a0),ost_inertia(a0)
		rts	
; ===========================================================================

loc_1CA56:				
		bsr.w	Player_FindCeiling
		tst.w	d1
		bpl.s	loc_1CA70
		sub.w	d1,ost_y_pos(a0)
		tst.w	ost_y_vel(a0)
		bpl.s	locret_1CA6E
		move.w	#0,ost_y_vel(a0)

locret_1CA6E:				
		rts	
; ===========================================================================

loc_1CA70:				
		tst.w	ost_y_vel(a0)
		bmi.s	locret_1CA96
		bsr.w	Player_FindFloor
		tst.w	d1
		bpl.s	locret_1CA96
		add.w	d1,ost_y_pos(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.w	#0,ost_y_vel(a0)
		move.w	ost_x_vel(a0),ost_inertia(a0)

locret_1CA96:				
		rts	
; ===========================================================================

loc_1CA98:				
		bsr.w	Player_FindWallLeft_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1CAAA
		sub.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1CAAA:				
		bsr.w	FindWallRight_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1CABC
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)

loc_1CABC:				
		bsr.w	Player_FindCeiling
		tst.w	d1
		bpl.s	locret_1CAF2
		sub.w	d1,ost_y_pos(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_1CADC
		move.w	#0,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_1CADC:				
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.w	ost_y_vel(a0),ost_inertia(a0)
		tst.b	d3
		bpl.s	locret_1CAF2
		neg.w	ost_inertia(a0)

locret_1CAF2:				
		rts	
; ===========================================================================

loc_1CAF4:				
		bsr.w	FindWallRight_Quick_UsePos
		tst.w	d1
		bpl.s	loc_1CB0E
		add.w	d1,ost_x_pos(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	ost_y_vel(a0),ost_inertia(a0)
		rts	
; ===========================================================================

loc_1CB0E:				
		bsr.w	Player_FindCeiling
		tst.w	d1
		bpl.s	loc_1CB28
		sub.w	d1,ost_y_pos(a0)
		tst.w	ost_y_vel(a0)
		bpl.s	locret_1CB26
		move.w	#0,ost_y_vel(a0)

locret_1CB26:				
		rts	
; ===========================================================================

loc_1CB28:				
		tst.w	ost_y_vel(a0)
		bmi.s	locret_1CB4E
		bsr.w	Player_FindFloor
		tst.w	d1
		bpl.s	locret_1CB4E
		add.w	d1,ost_y_pos(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.w	#0,ost_y_vel(a0)
		move.w	ost_x_vel(a0),ost_inertia(a0)

locret_1CB4E:				
		rts	
; ===========================================================================

loc_1CB50:				
		tst.b	$39(a0)
		bne.s	loc_1CB80
		move.b	#0,$1C(a0)

loc_1CB5C:				
		btst	#2,$22(a0)
		beq.s	loc_1CB80
		bclr	#2,$22(a0)
		move.b	#$F,ost_height(a0)
		move.b	#9,$17(a0)
		move.b	#0,$1C(a0)
		subq.w	#1,ost_y_pos(a0)

loc_1CB80:				
		bclr	#1,$22(a0)
		bclr	#5,$22(a0)
		bclr	#4,$22(a0)
		move.b	#0,$3C(a0)
		move.w	#0,(v_enemy_combo).w
		move.b	#0,$27(a0)
		move.b	#0,$29(a0)
		move.b	#0,$2C(a0)
		move.w	#0,(v_tails_look_delay_counter).w
		cmpi.b	#$14,$1C(a0)
		bne.s	locret_1CBC4
		move.b	#0,$1C(a0)

locret_1CBC4:				
		rts	
; ===========================================================================

Tails_Hurt:				
		jsr	SpeedToPos
		addi.w	#$30,ost_y_vel(a0)
		btst	#6,$22(a0)
		beq.s	loc_1CBE0
		subi.w	#$20,ost_y_vel(a0)

loc_1CBE0:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1CBEE
		andi.w	#$7FF,ost_y_pos(a0)

loc_1CBEE:				
		bsr.w	loc_1CC08
		bsr.w	loc_1C55A
		bsr.w	Tails_RecordPosition
		bsr.w	Tails_Animate
		bsr.w	Tails_LoadGFX
		jmp	DisplaySprite				; could be bra.w
; ===========================================================================

loc_1CC08:				
		move.w	(v_boundary_bottom_next_p2).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		blt.w	JmpTo2_KillCharacter
		bsr.w	loc_1C95A
		btst	#1,$22(a0)
		bne.s	locret_1CC4E
		moveq	#0,d0
		move.w	d0,ost_y_vel(a0)
		move.w	d0,ost_x_vel(a0)
		move.w	d0,ost_inertia(a0)
		move.b	d0,$2A(a0)
		move.b	#0,$1C(a0)
		move.b	#2,ost_primary_routine(a0)
		move.w	#$78,$30(a0)
		move.b	#0,$39(a0)

locret_1CC4E:				
		rts	
; ===========================================================================

Tails_Death:				
		bsr.w	loc_1CC6C
		jsr	ObjectFall				; could be bsr.w
		bsr.w	Tails_RecordPosition
		bsr.w	Tails_Animate
		bsr.w	Tails_LoadGFX
		jmp	DisplaySprite				; could be bra.w
; ===========================================================================

loc_1CC6C:				
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.w	loc_1B21C
		move.b	#1,(f_disable_horiz_scroll_p2).w
		move.b	#0,$39(a0)
		move.w	(v_boundary_bottom_next_p2).w,d0
		addi.w	#$100,d0
		cmp.w	ost_y_pos(a0),d0
		bge.w	locret_1CD8E
		move.b	#2,ost_primary_routine(a0)
		tst.w	(f_two_player).w
		bne.s	loc_1CCA2
		bra.w	loc_1BE34
; ===========================================================================

loc_1CCA2:				
		addq.b	#1,(f_hud_lives_update_p2).w
		subq.b	#1,(v_lives_p2).w
		bne.s	Tails_RestartLevel
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w
		move.b	#$39,($FFFFB0C0).w
		move.b	#1,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		clr.b	(f_time_over_p2).w

loc_1CCCC:				
		clr.b	(f_hud_time_update).w
		clr.b	(f_hud_time_update_p2).w
		move.b	#8,ost_primary_routine(a0)
		move.w	#$9B,d0	
		jsr	(PlayMusic).l
		moveq	#3,d0
		jmp	AddPLC
; ===========================================================================

Tails_RestartLevel:				
		tst.b	(f_time_over).w				; did player 1 get a Time Over?
	if Revision=0
		bne.s	Tails_RestartLevel_3			; if so, branch
	else	
		beq.s	Tails_RestartLevel_2			; if not, branch
		tst.b	(f_time_over_p2).w			; did player 2 get a Time Over?
		beq.s	Tails_RestartLevel_3			; if not, branch
		move.w	#0,$3A(a0)
		clr.b	(f_hud_time_update).w
		clr.b	(f_hud_time_update_p2).w
		move.b	#8,ost_primary_routine(a0)
		rts
	endc		
; ===========================================================================

	Tails_RestartLevel_2:				
		tst.b	(f_time_over_p2).w			; did player 2 get a Time Over?
		beq.s	Tails_RestartLevel_3			; if not, branch
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w
		move.b	#$39,($FFFFB0C0).w
		move.b	#2,($FFFFB09A).w
		move.b	#3,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		bra.s	loc_1CCCC
; ===========================================================================

	Tails_RestartLevel_3:				
		move.b	#0,(f_disable_horiz_scroll_p2).w
		move.b	#$A,ost_primary_routine(a0)
		move.w	(v_x_pos_p2_lampcopy).w,ost_x_pos(a0)
		move.w	(v_y_pos_p2_lampcopy).w,ost_y_pos(a0)
		move.w	(v_ost_tile_p2_lampcopy).w,ost_tile(a0)
		move.w	(v_ost_top_solid_bit_p2_lampcopy).w,$3E(a0)
		clr.w	(v_rings_p2).w
		clr.b	(v_ring_reward_p2).w
		move.b	#0,$2A(a0)
		move.b	#5,$1C(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		move.w	#0,ost_inertia(a0)
		move.b	#2,$22(a0)
		move.w	#0,$2E(a0)

locret_1CD8E:				
		rts	
; ===========================================================================

Tails_ResetLevel:				
		tst.w	$3A(a0)
		beq.s	locret_1CDA2
		subq.w	#1,$3A(a0)
		bne.s	locret_1CDA2
		move.w	#1,(f_restart).w

locret_1CDA2:				
		rts	
; ===========================================================================

Tails_Respawn:				
		tst.w	(v_camera_x_diff_p2).w
		bne.s	loc_1CDB6
		tst.w	(v_camera_y_diff_p2).w
		bne.s	loc_1CDB6
		move.b	#2,ost_primary_routine(a0)

loc_1CDB6:				
		bsr.w	Tails_Animate
		bsr.w	Tails_LoadGFX
		jmp	DisplaySprite				; could be bra.w
; ===========================================================================
	if FixBugs
		; Drowning fixes. See Sonic_Drown for more information
; ---------------------------------------------------------------------------
; Tails when he's drowning
; ---------------------------------------------------------------------------		
Tails_Drown:
		bsr.w	SpeedToPos
		addi.w	#$10,ost_y_vel(a0)
		bsr.w	Tails_RecordPosition
		bsr.s	Tails_Animate
		bsr.w	Tails_LoadGFX
		bra.w	DisplaySprite
	endc
; ===========================================================================
Tails_Animate:				
		lea	(Ani_Tails).l,a1

loc_1CDCA:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_1CDEC
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		bclr	#5,$22(a0)

loc_1CDEC:				
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_1CE5C
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_1CE2A
		move.b	d0,$1E(a0)

loc_1CE12:				
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-$10,d0
		bcc.s	loc_1CE2C

loc_1CE22:				
		move.b	d0,$1A(a0)
		addq.b	#1,$1B(a0)

locret_1CE2A:				
		rts	
; ===========================================================================

loc_1CE2C:				
		addq.b	#1,d0
		bne.s	loc_1CE3C
		move.b	#0,$1B(a0)
		move.b	ost_render(a1),d0
		bra.s	loc_1CE22
; ===========================================================================

loc_1CE3C:				
		addq.b	#1,d0
		bne.s	loc_1CE50
		move.b	2(a1,d1.w),d0
		sub.b	d0,$1B(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_1CE22
; ===========================================================================

loc_1CE50:				
		addq.b	#1,d0
		bne.s	locret_1CE5A
		move.b	2(a1,d1.w),$1C(a0)

locret_1CE5A:				
		rts	
; ===========================================================================

loc_1CE5C:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_1CE2A
		addq.b	#1,d0
		bne.w	loc_1CF6E
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	loc_1CF08
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_1CE7E
		beq.s	loc_1CE7E
		subq.b	#1,d0

loc_1CE7E:				
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1CE8A
		not.b	d0

loc_1CE8A:				
		addi.b	#$10,d0
		bpl.s	loc_1CE92
		moveq	#3,d1

loc_1CE92:				
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		eor.b	d1,d2
		or.b	d2,ost_render(a0)
		btst	#5,$22(a0)
		bne.w	loc_1CFB2
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	ost_inertia(a0),d2
		bpl.s	loc_1CEB6
		neg.w	d2

loc_1CEB6:				
		tst.b	$2B(a0)
		bpl.w	loc_1CEC0
		add.w	d2,d2

loc_1CEC0:				
		move.b	d0,d3
		add.b	d3,d3
		add.b	d3,d3
		lea	(byte_1D07A).l,a1
		cmpi.w	#$600,d2
		bcs.s	loc_1CEEE
		lea	(byte_1D084).l,a1
		move.b	d0,d1
		lsr.b	#1,d1
		add.b	d1,d0
		add.b	d0,d0
		move.b	d0,d3
		cmpi.w	#$700,d2
		bcs.s	loc_1CEEE
		lea	(byte_1D176).l,a1

loc_1CEEE:				
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1CEF8
		moveq	#0,d2

loc_1CEF8:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		bsr.w	loc_1CE12
		add.b	d3,$1A(a0)
		rts	
; ===========================================================================

loc_1CF08:				
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1CF36
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		addi.b	#$75,d0
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1CF36:				
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		tst.b	$29(a0)
		beq.s	loc_1CF4E
		ori.b	#render_xflip,ost_render(a0)
		addi.b	#$B,d0
		bra.s	loc_1CF5A
; ===========================================================================

loc_1CF4E:				
		ori.b	#render_xflip|render_yflip,ost_render(a0)
		neg.b	d0
		addi.b	#-$71,d0

loc_1CF5A:				
		divu.w	#$16,d0
		addi.b	#$75,d0
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1CF6E:				
		addq.b	#1,d0
		bne.s	loc_1CFE4
		move.w	ost_inertia(a0),d2
		bpl.s	loc_1CF7A
		neg.w	d2

loc_1CF7A:				
		lea	(byte_1D093).l,a1
		cmpi.w	#$600,d2
		bcc.s	loc_1CF8C
		lea	(byte_1D08E).l,a1

loc_1CF8C:				
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_1CF96
		moveq	#0,d2

loc_1CF96:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		bra.w	loc_1CE12
; ===========================================================================

loc_1CFB2:				
		move.w	ost_inertia(a0),d2
		bmi.s	loc_1CFBA
		neg.w	d2

loc_1CFBA:				
		addi.w	#$800,d2
		bpl.s	loc_1CFC2
		moveq	#0,d2

loc_1CFC2:				
		lsr.w	#6,d2
		move.b	d2,$1E(a0)
		lea	(byte_1D098).l,a1
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		bra.w	loc_1CE12
; ===========================================================================

loc_1CFE4:				
		move.w	ost_x_vel(a2),d1
		move.w	ost_y_vel(a2),d2
		jsr	(CalcAngle).l
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1D002
		not.b	d0
		bra.s	loc_1D006
; ===========================================================================

loc_1D002:				
		addi.b	#-$80,d0

loc_1D006:				
		addi.b	#$10,d0
		bpl.s	loc_1D00E
		moveq	#3,d1

loc_1D00E:				
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		eor.b	d1,d2
		or.b	d2,ost_render(a0)
		lsr.b	#3,d0
		andi.b	#$C,d0
		move.b	d0,d3
		lea	(byte_1D2E8).l,a1
		move.b	#3,$1E(a0)
		bsr.w	loc_1CE12
		add.b	d3,$1A(a0)
		rts	
; ===========================================================================
Ani_Tails:	
		dc.w byte_1D07A-Ani_Tails			; 0 
		dc.w byte_1D084-Ani_Tails			; 1
		dc.w byte_1D08E-Ani_Tails			; 2
		dc.w byte_1D093-Ani_Tails			; 3
		dc.w byte_1D098-Ani_Tails			; 4
		dc.w byte_1D0A2-Ani_Tails			; 5
		dc.w byte_1D0E0-Ani_Tails			; 6
		dc.w byte_1D0F8-Ani_Tails			; 7
		dc.w byte_1D0FB-Ani_Tails			; 8
		dc.w byte_1D0FE-Ani_Tails			; 9
		dc.w byte_1D103-Ani_Tails			; 10
		dc.w byte_1D106-Ani_Tails			; 11
		dc.w byte_1D10C-Ani_Tails			; 12
		dc.w byte_1D110-Ani_Tails			; 13
		dc.w byte_1D117-Ani_Tails			; 14
		dc.w byte_1D11B-Ani_Tails			; 15
		dc.w byte_1D122-Ani_Tails			; 16
		dc.w byte_1D131-Ani_Tails			; 17
		dc.w byte_1D135-Ani_Tails			; 18
		dc.w byte_1D13B-Ani_Tails			; 19
		dc.w byte_1D140-Ani_Tails			; 20
		dc.w byte_1D144-Ani_Tails			; 21
		dc.w byte_1D14B-Ani_Tails			; 22
		dc.w byte_1D14E-Ani_Tails			; 23
		dc.w byte_1D151-Ani_Tails			; 24
		dc.w byte_1D154-Ani_Tails			; 25
		dc.w byte_1D157-Ani_Tails			; 26
		dc.w byte_1D15A-Ani_Tails			; 27
		dc.w byte_1D15E-Ani_Tails			; 28
		dc.w byte_1D162-Ani_Tails			; 29
		dc.w byte_1D16C-Ani_Tails			; 30
		dc.w byte_1D176-Ani_Tails			; 31
		dc.w byte_1D180-Ani_Tails			; 32
byte_1D07A:	dc.b $FF,$10,$11,$12,$13,$14,$15, $E, $F,$FF	; 0	

byte_1D084:	dc.b $FF,$2E,$2F,$30,$31,$FF,$FF,$FF,$FF,$FF	; 0	

byte_1D08E:	dc.b   1,$48,$47,$46,$FF			; 0 
byte_1D093:	dc.b   1,$48,$47,$46,$FF			; 0 
byte_1D098:	dc.b $FD,$63,$64,$65,$66,$FF,$FF,$FF,$FF,$FF	; 0	

byte_1D0A2:	dc.b   7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  2,  1,  1,  1 ; 0
					
		dc.b   1,  1,  1,  1,  1,  3,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1 ; 16
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5 ; 32
		dc.b   6,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  6,$FE,$1C ; 48
byte_1D0E0:	dc.b   9,$69,$69,$6A,$6A,$69,$69,$6A,$6A,$69,$69,$6A,$6A,$69,$69,$6A ; 0
					
		dc.b $6A,$69,$69,$6A,$6A,$69,$6A,$FF		; 16
byte_1D0F8:	dc.b $3F,  4,$FF				; 0 
byte_1D0FB:	dc.b $3F,$5B,$FF				; 0 
byte_1D0FE:	dc.b   0,$60,$61,$62,$FF			; 0 
byte_1D103:	dc.b $3F,$82,$FF				; 0 
byte_1D106:	dc.b   7,  8,  8,  9,$FD,  5			; 0	
byte_1D10C:	dc.b   7,  9,$FD,  5				; 0 
byte_1D110:	dc.b   7,$67,$68,$67,$68,$FD,  0		; 0 
byte_1D117:	dc.b   9,$6E,$73,$FF				; 0 
byte_1D11B:	dc.b   9,$6E,$6F,$70,$71,$72,$FF		; 0 
byte_1D122:	dc.b   3,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$FD,  0 ; 0
					
byte_1D131:	dc.b   5,$6C,$6D,$FF				; 0 
byte_1D135:	dc.b  $F,  1,  2,  3,$FE,  1			; 0	
byte_1D13B:	dc.b  $F,  1,  2,$FE,  1			; 0 
byte_1D140:	dc.b $13,$85,$86,$FF				; 0 
byte_1D144:	dc.b  $B,$74,$74,$12,$13,$FD,  0		; 0 
byte_1D14B:	dc.b $20,$5D,$FF				; 0 
byte_1D14E:	dc.b $2F,$5D,$FF				; 0 
byte_1D151:	dc.b   3,$5D,$FF				; 0 
byte_1D154:	dc.b   3,$5D,$FF				; 0 
byte_1D157:	dc.b   3,$5C,$FF				; 0 
byte_1D15A:	dc.b   9,$6B,$5C,$FF				; 0 
byte_1D15E:	dc.b $77,  0,$FD,  0	
byte_1D162:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,$FF	; 0	
byte_1D16C:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,$FF	; 0	
byte_1D176:	dc.b $FF,$32,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF	; 0	

byte_1D180:	dc.b   1,$5E,$5F,$FF				; 0 
; ===========================================================================

loc_1D184:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(v_tailstails_last_frame_id).w,d0
		beq.s	locret_1D1FE
		move.b	d0,(v_tailstails_last_frame_id).w
		lea	(DPLC_Tails).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1D1FE
		move.w	#-$A00,d4
		bra.s	loc_1D1D2
; ===========================================================================

Tails_LoadGFX:				
		moveq	#0,d0
		move.b	$1A(a0),d0

	Tails_LoadGFX_2:				
		cmp.b	(v_tails_last_frame_id).w,d0
		beq.s	locret_1D1FE
		move.b	d0,(v_tails_last_frame_id).w
		lea	(DPLC_Tails).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1D1FE
		move.w	#-$C00,d4

	loc_1D1D2:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Tails,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(AddDMA).l
		dbf	d5,loc_1D1D2

locret_1D1FE:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 05 - Tails' tails
; ----------------------------------------------------------------------------

TailsTails:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1D20E(pc,d0.w),d1
		jmp	off_1D20E(pc,d1.w)
; ===========================================================================
off_1D20E:	
		dc.w loc_1D212-off_1D20E			; 0 
		dc.w loc_1D23A-off_1D20E			; 2
; ===========================================================================

loc_1D212:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Tails,ost_mappings(a0)
		move.w	#tile_Tails_Tails,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#render_rel,ost_render(a0)

loc_1D23A:				
		movea.w	$3E(a0),a2
		move.b	$26(a2),$26(a0)
		move.b	$22(a2),$22(a0)
		move.w	ost_x_pos(a2),ost_x_pos(a0)
		move.w	ost_y_pos(a2),ost_y_pos(a0)
		andi.w	#tile_draw,ost_tile(a0)
		tst.w	ost_tile(a2)
		bpl.s	loc_1D268
		ori.w	#tile_hi,ost_tile(a0)

loc_1D268:				
		moveq	#0,d0
		move.b	$1C(a2),d0
		btst	#5,$22(a2)
		beq.s	loc_1D278
		moveq	#4,d0

loc_1D278:				
		cmp.b	$30(a0),d0
		beq.s	loc_1D288
		move.b	d0,$30(a0)
		move.b	AniSelect_TailsTails(pc,d0.w),$1C(a0)

loc_1D288:				
		lea	(Ani_TailsTails).l,a1
		bsr.w	loc_1CDCA
		bsr.w	loc_1D184
		jsr	DisplaySprite
		rts	
; ===========================================================================
AniSelect_TailsTails:	dc.b   0,  0,  3,  3,  9,  1,  0,  2,  1,  7,  0,  0,  0,  8,  0,  0 ; 0
		dc.b   0,  0,  0,  0, $A,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 16
		dc.b   0,  0					; 32

Ani_TailsTails:
		dc.w byte_1D2D6-Ani_TailsTails			; 0 
		dc.w byte_1D2D9-Ani_TailsTails			; 1
		dc.w byte_1D2E0-Ani_TailsTails			; 2
		dc.w byte_1D2E8-Ani_TailsTails			; 3
		dc.w byte_1D2EE-Ani_TailsTails			; 4
		dc.w byte_1D2F4-Ani_TailsTails			; 5
		dc.w byte_1D2FA-Ani_TailsTails			; 6
		dc.w byte_1D300-Ani_TailsTails			; 7
		dc.w byte_1D306-Ani_TailsTails			; 8
		dc.w byte_1D30C-Ani_TailsTails			; 9
		dc.w byte_1D312-Ani_TailsTails			; 10
byte_1D2D6:	dc.b $20,  0,$FF				; 0 
byte_1D2D9:	dc.b   7,  9, $A, $B, $C, $D,$FF		; 0 
byte_1D2E0:	dc.b   3,  9, $A, $B, $C, $D,$FD,  1		; 0	
byte_1D2E8:	dc.b $FC,$49,$4A,$4B,$4C,$FF			; 0	
byte_1D2EE:	dc.b   3,$4D,$4E,$4F,$50,$FF			; 0	
byte_1D2F4:	dc.b   3,$51,$52,$53,$54,$FF			; 0	
byte_1D2FA:	dc.b   3,$55, $56, $57, $58, $FF		; 0 
byte_1D300:	dc.b   2,$81,$82,$83,$84,$FF			; 0	
byte_1D306:	dc.b   2,$87,$88,$89,$8A,$FF			; 0	
byte_1D30C:	dc.b   9,$87,$88,$89,$8A,$FF			; 0	
byte_1D312:	dc.b   9,$81,$82,$83,$84,$FF			; 0	
; ===========================================================================


JmpTo2_KillCharacter:				
		jmp	KillCharacter

		align 4
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0A - drowning countdown numbers, small bubbles that float out of
; Sonic and Tails' mouths, and small bubbles made by Chop Chop
; ----------------------------------------------------------------------------

DrownCount:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Drown_Index(pc,d0.w),d1
		jmp	Drown_Index(pc,d1.w)
; ===========================================================================
Drown_Index:	index offset(*),,2
		ptr Drown_Main					; 0 
		ptr Drown_Animate				; 2
		ptr Drown_ChkWater				; 4
		ptr Drown_Display				; 6
		ptr Drown_Delete				; 8
		ptr Drown_Countdown				; $A
		ptr Drown_AirLeft				; $C
		ptr Drown_Display_Num				; $E
		ptr Drown_Delete				; $10
		
		rsobj DrownCount,$2C
ost_drown_restart_time:	rs.w 1					; $2C ; time to restart after Sonic drowns
ost_drown_current_dplc:	rs.w 1					; $2E ; last countdown number art that was loaded
ost_drown_x_start:	rs.w 1					; $30 ; original x-axis position
ost_drown_disp_time:	rs.b 1					; $32 ; time to display each number
ost_drown_type:		rs.b 1					; $33 ; bubble type and seconds between spawning each number
ost_drown_extra_bub:	rs.b 1					; $34 ; number of extra bubbles to create - 1
ost_drown_extra_flag:	rs.w 1					; $36 ; flags for extra bubbles
	spawn_bubbles:		equ 1				; bit 1, set if bubbles are to be spawned
	number_spawned_bit:	equ 6				; flag to prevent more than one number bubble from spawning at once
	make_num_bit:		equ 7				; next bubble will be turned into a number
ost_drown_num_time:	rs.w 1					; $38 ; time between each number changes
ost_drown_delay_time:	rs.w 1					; $3A ; delay between bubbles
ost_drown_parent:		rs.l 1				; $3C ; OST address of character this object is attached to
ost_drown_parent_lo:	equ __rs-1				; $3F ; tst.b'd to check if manager object is tied to main character or sidekick
		rsobjend
; ===========================================================================

Drown_Main:				
		addq.b	#2,ost_primary_routine(a0)		; go to Drown_Animate next
		move.l	#Map_Bub_Main,ost_mappings(a0)
		tst.b	ost_drown_parent_lo(a0)			; did the main character spawn this object?
		beq.s	.notsidekick				; if so, branch
		move.l	#Map_Bub_Sidekick,ost_mappings(a0)	; use different mappings for Tails

	.notsidekick:				
		move.w	#tile_Nem_BubbleGenerator+tile_hi,ost_tile(a0)
		move.b	#render_rel|render_onscreen,ost_render(a0)
		move.b	#$10,ost_displaywidth(a0)
		move.b	#1,ost_priority(a0)
		move.b	ost_subtype(a0),d0			; get subtype (drowning manager is $81)
		bpl.s	.bubble_or_num				; if it is a bubble or a number, branch
		
		addq.b	#id_Drown_Countdown-id_Drown_Animate,ost_primary_routine(a0) ; go to Drown_Countdown next
		andi.w	#$7F,d0					; ignore high bit of type
		move.b	d0,ost_drown_type(a0)			; type should be 1					
		bra.w	Drown_Countdown
; ===========================================================================

.bubble_or_num:				
		move.b	d0,ost_anim(a0)				; subtypes for bubbles and numbers correspond to animations
		move.w	ost_x_pos(a0),ost_drown_x_start(a0)
		move.w	#-$88,ost_y_vel(a0)

Drown_Animate:				
		lea	(Ani_Drown).l,a1			; could be PC-relative
		jsr	AnimateSprite				; run animation and go to Drown_ChkWater next

Drown_ChkWater:				
		move.w	(v_water_height_actual).w,d0
		cmp.w	ost_y_pos(a0),d0			; has small or medium bubble reached the water surface?
		bcs.s	.wobble					; if not, branch
		move.b	#id_Drown_Display,ost_primary_routine(a0) ; go to Drown_Display next (could be addq #2 instead)
		addq.b	#7,ost_anim(a0)				; make small bubbles disappear and number bubbles start flashing
		cmpi.b	#id_Ani_Drown_Blank,ost_anim(a0)
	if FixBugs=0
		; This block of code sets the medium bubble's animation to a blank frame when it reaches the surface of the 
		; water. In Sonic 1, this function was completely broken: the ‘move.b  #id_Ani_Drown_Blank,ost_anim(a0)’ 
		; was missing, causing the blank frame to never be set. While Sonic 2 fixed this, 
		; the code still has this redundant instruction left in it, which can safely be removed.			
		beq.s	Drown_Display
	endc	
		bcs.s	Drown_Display				; branch if it is not a medium bubble (animation $E)
		move.b	#id_Ani_Drown_Blank,ost_anim(a0)	; if it's a medium bubble and has reached the surface, set it to the blank animation
		bra.s	Drown_Display
; ===========================================================================

.wobble:				
		; If in a wind tunnel, then make the bubbles move with the character.
		; Used in Sonic 1 and 3, but unused here, as there are no underwater
		; wind tunnels in Sonic 2.
		tst.b	(f_wind_tunnel_now).w			; is character in a wind tunnel?
		beq.s	.notunnel				; if not, branch
		addq.w	#4,ost_drown_x_start(a0)		; move bubbles right with the character

	.notunnel:				
		move.b	ost_angle(a0),d0
		addq.b	#1,ost_angle(a0)
		andi.w	#$7F,d0
		lea	(Drown_WobbleData).l,a1
		move.b	(a1,d0.w),d0				; get byte from wobble data array based on angle value
		ext.w	d0
		add.w	ost_drown_x_start(a0),d0
		move.w	d0,ost_x_pos(a0)			; update position
	if FixBugs
		; This isn't actually a bugfix: it's just that a later bugfix pushes
		; this call out of range, so it has to be extended to a word.	
		bsr.w	Drown_ShowNumber	
	else
		bsr.s	Drown_ShowNumber
	endc	
		jsr	SpeedToPos
		tst.b	ost_render(a0)				; is object on-screen?
		bpl.s	.delete					; if not, branch
		jmp	DisplaySprite
		
	;JmpTo4_DeleteObject:
	.delete:				
		jmp	DeleteObject
; ===========================================================================

Drown_Display_Num:				
		movea.l	ost_drown_parent(a0),a2			; a2 = character
		cmpi.b	#air_alert,ost_air_left(a2)		; check air remaining
		bhi.s	Drown_Delete				; if higher than $C, branch

Drown_Display:				
		bsr.s	Drown_ShowNumber
		lea	(Ani_Drown).l,a1
		jsr	AnimateSprite
	if FixBugs
		; If either player starts to drown while standing in very shallow water,
		; their countdown numbers will appear corrupted. This is caused by a missing
		; call to Drown_LoadCountdownArt at this location.
		bsr.w	Drown_LoadCountdownArt
	endc	
		jmp	DisplaySprite
; ===========================================================================
;JmpTo5_DeleteObject
Drown_Delete:								
		jmp	DeleteObject
; ===========================================================================

Drown_AirLeft:				
		movea.l	ost_drown_parent(a0),a2			; a2 = character
		cmpi.b	#air_alert,ost_air_left(a2)		; check air remaining
		bhi.s	.delete					; if higher than $C, branch
		subq.w	#1,ost_drown_num_time(a0)		; deincrement timer
		bne.s	.display				; branch if time remains
		move.b	#id_Drown_Display_Num,ost_primary_routine(a0) ; go to Drown_Display_Num next
		addq.b	#7,ost_anim(a0)
		bra.s	Drown_Display
; ===========================================================================

	.display:				
		lea	(Ani_Drown).l,a1
		jsr	AnimateSprite
		bsr.w	Drown_LoadCountdownArt			; load number art if necessary
		tst.b	ost_render(a0)				; is number on-screen?
		bpl.s	.delete					; if not, branch
		jmp	DisplaySprite
	
	;JmpTo6_DeleteObject:
	.delete:				
		jmp	DeleteObject
; ===========================================================================

Drown_ShowNumber:				
		tst.w	ost_drown_num_time(a0)			; is this a number bubble?
		beq.s	.nonumber				; if not, exit
		subq.w	#1,ost_drown_num_time(a0)		; deincrement timer
		bne.s	.nonumber				; branch if time remains
		cmpi.b	#id_Ani_Drown_ZeroFlash,ost_anim(a0)
		bcc.s	.nonumber				; branch if animation is a number flash
		
		; Turn this bubble into a number
		move.w	#15,ost_drown_num_time(a0)		; show number for 15 frames
		clr.w	ost_y_vel(a0)						
		move.b	#render_onscreen,ost_render(a0)
		move.w	ost_x_pos(a0),d0
		sub.w	(v_camera_x_pos).w,d0
		addi.w	#$80,d0	
		move.w	d0,ost_x_screen(a0)			; number is fixed at center of screen
		move.w	ost_y_pos(a0),d0
		sub.w	(v_camera_y_pos).w,d0
		addi.w	#$80,d0	
		move.w	d0,ost_y_screen(a0)
		move.b	#id_Drown_AirLeft,ost_primary_routine(a0) ; go to Drown_AirLeft next

	.nonumber:				
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Data for a bubble's side-to-side wobble. Second copy of data is unused
; Sonic 1 leftover: was used by the background ripple effect in Revision 1.
; ---------------------------------------------------------------------------
Drown_WobbleData:
		rept 2	
		dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
		dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
		dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
		dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
		dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
		dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
		dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
		dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
		endr
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to determine if countdown number art needs to be loaded/updated
; and prepare a DMA transfer if so.
; ---------------------------------------------------------------------------
Drown_LoadCountdownArt:				
		moveq	#0,d1
		move.b	ost_frame(a0),d1			; get current frame
		cmpi.b	#id_Frame_DrownNum_0,d1	
		bcs.s	.nochange				; branch if a small bubble
		cmpi.b	#id_Frame_Bubble_BubMaker1,d1						
		bcc.s	.nochange				; branch if a medium bubble
		cmp.b	ost_drown_current_dplc(a0),d1
		beq.s	.nochange				; branch if number has not changed
		move.b	d1,ost_drown_current_dplc(a0)		; set new number

		; Prepare the DMA transfer. Essentially a DPLC, except the tile length is fixed, 
		; and we are calculating the offset.
		subq.w	#8,d1					; subtract 8 from frame ID to get number
		move.w	d1,d0					; multiply by $C0 (the size of each set of number graphics) to get start offset within Art_Countdown
		add.w	d1,d1
		add.w	d0,d1
		lsl.w	#6,d1
		addi.l	#Art_Countdown,d1			; add to address of Art_Countdown to get start address of DMA transfer
		move.w	#vram_SonicDrownNum,d2			; countdown number is loaded at same VRAM address as splash and dust art
		tst.b	ost_drown_parent_lo(a0)			; is it the main character?
		beq.s	.notsidekick				; if not, branch	
		move.w	#vram_TailsDrownNum,d2			; use the VRAM for the sidekick's splash and dust art

	.notsidekick:				
		move.w	#sizeof_CountdownNum/2,d3		; size of DMA transfer
		jsr	(AddDMA).l

	.nochange:				
		rts	
; ===========================================================================

Drown_Countdown:							
		movea.l	ost_drown_parent(a0),a2			; a2 = character
		tst.w	ost_drown_restart_time(a0)		; has the character drowned?
		bne.w	.kill_character				; if so, branch
		cmpi.b	#id_Death,ost_primary_routine(a2)	; is the character dead?
		bcc.w	.nocountdown				; if so, branch
		btst	#status_underwater_bit,ost_primary_status(a2) ; is character underwater?
		beq.w	.nocountdown				; if not, branch
		subq.w	#1,ost_drown_num_time(a0)		; decrement timer between countdown number changes		
		bpl.w	.create_bubble				; branch if time remains
		move.w	#(1*60)-1,ost_drown_num_time(a0)	; set timer to 1 second
		move.w	#spawn_bubbles,ost_drown_extra_flag(a0)	; set flag to make additional bubbles
		jsr	RandomNumber
		andi.w	#1,d0					; random number 0 or 1
		move.b	d0,ost_drown_extra_bub(a0)
		moveq	#0,d0
		move.b	ost_air_left(a2),d0			; check air remaining
		cmpi.w	#air_ding1,d0
		beq.s	.warnsound				; play sound if	air is 25
		cmpi.w	#air_ding2,d0
		beq.s	.warnsound				; play sound if	air is 20
		cmpi.w	#air_ding3,d0
		beq.s	.warnsound				; play sound if	air is 15
		cmpi.w	#air_alert,d0
		bhi.s	.reduceair				; if air is above 12, branch
		bne.s	.skipmusic				; if air is less than 12, branch
		tst.b	ost_drown_parent_lo(a0)			; is it the main character?
		bne.s	.skipmusic				; if not, branch
		move.w	#mus_Drowning,d0			; play countdown music
		jsr	(PlayMusic).l

	.skipmusic:				
		subq.b	#1,ost_drown_disp_time(a0)		; deincrement number display timer
		bpl.s	.reduceair				; branch if time remains
		move.b	ost_drown_type(a0),ost_drown_disp_time(a0) ; reset display timer
		bset	#make_num_bit,ost_drown_extra_flag(a0)	; set flag to spawn a number bubble
		bra.s	.reduceair
; ===========================================================================

.warnsound:				
		tst.b	ost_drown_parent_lo(a0)
		bne.s	.reduceair
		move.w	#sfx_Ding,d0				; play "ding-ding" warning sound		
		jsr	PlaySound

.reduceair:				
		subq.b	#1,ost_air_left(a2)			; decrement air remaining
		bcc.w	.gotomakenum				; if above 0, branch
		
		; If we're here, the player has drowned.
		move.b	#$81,ost_obj_control(a2)		; lock player's controls
		move.w	#sfx_Drown,d0				; play drowning sound
		jsr	PlaySound
		move.b	#11-1,ost_drown_extra_bub(a0)		; spawn 11 additional bubbles as the player drowns
		move.w	#spawn_bubbles,ost_drown_extra_flag(a0)
		move.w	#(2*60),ost_drown_restart_time(a0)	; restart after 2 seconds
		movea.l	a2,a1
		bsr.w	ResumeMusic				; reset player's air count to full (could have been 'move.b	#air_full,ost_air_left(a2)' )
		pushr.l	a0					; save OST address to stack		
		movea.l	a2,a0					; use player's OST temporarily
		bsr.w	Sonic_ResetOnFloor_2			; clear their status flags
		move.b	#$17,ost_anim(a0)			; use their drowning animation
		bset	#status_air_bit,ost_primary_status(a0)
		bset	#tile_hi_bit,ost_tile(a0)
		move.w	#0,ost_y_vel(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_inertia(a0)
		
	if FixBugs
		; Drowning fixes. See Sonic_Drown for more information.
		move.b	#id_Drown,routine(a0)			; set character to their drowning routine
	endc	
		popr.l	a0					; restore OST
		cmpa.w	#v_ost_player1,a2			; is it the main character?
		bne.s	.noscrolllock				; if not, branch
		move.b	#1,(f_disable_scrolling).w		; disable scrolling

	if FixBugs
		; The game forgets to stop the timer. If the main character drowns at 9:58,
		; they will get a Time Over: their death animation will be applied to their
		; drowning sprite and the Time Over card will appear. Stopping the timer
		; eliminates this edge case.
		move.b	(f_hud_time_update)			; stop the timer immediately	
	endc		

	.noscrolllock:				
		rts	
; ===========================================================================

.kill_character:				
		subq.w	#1,ost_drown_restart_time(a0)		; decrement delay timer after drowning
	if FixBugs	
		; Drowning fixes. See Sonic_Drown for more information.
		bne.s 	.create_bubble				; branch if time remains
	else			
		bne.s	.delay_death				; branch if time remains
	endc	
		move.b	#id_Death,ost_primary_routine(a2)	; character is now dead
		rts	
; ===========================================================================
	if FixBugs=0
		; This function is no longer needed with the rewrite of the drowning mechanism.
		; See Sonic_Drown for more information.
	.delay_death:				
		pushr.l	a0					; save OST address to stack
		movea.l	a2,a0					; use player's OST temporarily
		jsr	SpeedToPos				; update their position
		addi.w	#$10,ost_y_vel(a0)			; make them fall
		popr.l	a0					; restore OST
		bra.s	.create_bubble
	endc			
; ===========================================================================

.gotomakenum:				
		bra.s	.makenum				; why not branch directly?
; ===========================================================================

.create_bubble:				
		tst.w	ost_drown_extra_flag(a0)		; should bubbles/numbers be spawned?
		beq.w	.nocountdown				; if not, branch
		subq.w	#1,ost_drown_delay_time(a0)		; decrement timer between bubble spawning
		bpl.w	.nocountdown				; branch if time remains

.makenum:				
		jsr	RandomNumber
		andi.w	#$F,d0
		addq.w	#8,d0
		move.w	d0,ost_drown_delay_time(a0)		; set timer as random 8-23 frames
		jsr	FindFreeObj				; find free OST slot
		bne.w	.nocountdown				; branch if not found
		_move.b	ost_id(a0),ost_id(a1)			; load DrownCount object (a1 = spawned bubble)
		move.w	ost_x_pos(a2),ost_x_pos(a1)
		moveq	#6,d0					; 6 pixels to right
		btst	#status_xflip_bit,ost_primary_status(a2) ; is character facing right?
		beq.s	.noflip					; if not, branch
		neg.w	d0					; 6 pixels to left
		move.b	#$40,ost_angle(a1)

	.noflip:				
		add.w	d0,ost_x_pos(a1)			; bubble starts 6 pixels to right or left of character
		move.w	ost_y_pos(a2),ost_y_pos(a1)
		move.l	ost_drown_parent(a0),ost_drown_parent(a1)
		move.b	#id_Ani_Drown_SmallBubble,ost_subtype(a1) ; spawn a small bubble
		tst.w	ost_drown_restart_time(a0)		; has player drowned?
		beq.w	.not_dead				; if not, branch
		andi.w	#7,ost_drown_delay_time(a0)		; cut time between bubbles to 7 frames or less)
		addi.w	#0,ost_drown_delay_time(a0)		; pointless
		move.w	ost_y_pos(a2),d0
		subi.w	#$C,d0					; bubble spawns 12 pixels higher than character
		move.w	d0,ost_y_pos(a1)
		jsr	RandomNumber
		move.b	d0,ost_angle(a1)			; randomize angle
		move.w	(v_frame_counter).w,d0			; get frame counter
		andi.b	#3,d0						
		bne.s	.create_bubble_done			; branch if not a multiple of 4			
		move.b	#id_Ani_Drown_MediumBubble,ost_subtype(a1) ; if current frame number is multiple of 4, spawn a medium bubble instead
		bra.s	.create_bubble_done
; ===========================================================================

.not_dead:				
		btst	#make_num_bit,ost_drown_extra_flag(a0)	; is this going to be a number bubble?
		beq.s	.create_bubble_done			; if not, branch
		moveq	#0,d2
		move.b	ost_air_left(a2),d2			; get air remaining
		cmpi.b	#air_alert,d2
		bcc.s	.create_bubble_done			; branch if greater than 12
		lsr.w	#1,d2					; divide by 2 to get number to display
		jsr	RandomNumber			
		andi.w	#3,d0					
		bne.s	.random_not_zero			; branch if random number is not a multiple of 4
		bset	#number_spawned_bit,ost_drown_extra_flag(a0) ; set flag to prevent more than one number bubble spawning at once
		bne.s	.create_bubble_done			; branch if it was already set
		move.b	d2,ost_subtype(a1)			; set number to display
		move.w	#28,ost_drown_num_time(a1)		; indicate that this bubble will turn into a number

	.random_not_zero:				
		tst.b	ost_drown_extra_bub(a0)			; was this the last bubble to be spawned?
		bne.s	.create_bubble_done			; if not, branch
		bset	#number_spawned_bit,ost_drown_extra_flag(a0) ; set flag to prevent more than one number bubble spawning at once
		bne.s	.create_bubble_done			; branch if it was already set
		move.b	d2,ost_subtype(a1)			; set number to display					
		move.w	#28,ost_drown_num_time(a1)		; indicate that this bubble will turn into a number

.create_bubble_done:				
		subq.b	#1,ost_drown_extra_bub(a0)		; deincrement count of bubbles to spawn
		bpl.s	.nocountdown				; branch if more bubbles are to be spawned
		clr.w	ost_drown_extra_flag(a0)		; clear the bubble flags

.nocountdown:				
		rts	
; ===========================================================================

ResumeMusic:				
		cmpi.b	#air_alert,ost_air_left(a1)		; has player just drowned, or do they have more than 12 seconds of air left?
		bhi.s	.reset_air				; if so, branch
		cmpa.w	#v_ost_player1,a1			; main character?
		bne.s	.reset_air				; if not, branch
		move.w	(v_level_music).w,d0			; get current level's music
		btst	#status_invincible_bit,ost_secondary_status(a1) ; is Sonic invincible?
		beq.s	.notinvinc				; if not, branch
		move.w	#mus_Invincible,d0	

.notinvinc:				
		tst.b	(f_super).w				; is Sonic super?
		beq.w	.notsuper				; if not, branch
		move.w	#mus_SuperSonic,d0			; play Super theme

.notsuper:				
		tst.b	(v_current_boss).w			; are we in a boss fight?
		beq.s	.playselected				; if not, branch
		move.w	#mus_Boss,d0				; play the boss theme

.playselected:				
		jsr	(PlayMusic).l				; play the selected music

.reset_air:				
		move.b	#air_full,ost_air_left(a1)		; reset the air timer
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Animation script - bubbles
; ---------------------------------------------------------------------------
Ani_Drown:	index offset(*)
		ptr Ani_Drown_ZeroAppear			; 0 
		ptr Ani_Drown_OneAppear				; 1
		ptr Ani_Drown_TwoAppear				; 2
		ptr Ani_Drown_ThreeAppear			; 3
		ptr Ani_Drown_FourAppear			; 4
		ptr Ani_Drown_FiveAppear			; 5
		ptr Ani_Drown_SmallBubble			; 6
		ptr Ani_Drown_ZeroFlash				; 7
		ptr Ani_Drown_OneFlash				; 8
		ptr Ani_Drown_TwoFlash				; 9
		ptr Ani_Drown_ThreeFlash			; $A
		ptr Ani_Drown_FourFlash				; $B
		ptr Ani_Drown_FiveFlash				; $C
		ptr Ani_Drown_Blank				; $D
		ptr Ani_Drown_MediumBubble			; $E
		
Ani_Drown_ZeroAppear:	
		dc.b 5 
		dc.b id_Frame_Bubble_0 
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup  
		dc.b id_Frame_Bubble_2  
		dc.b id_Frame_Bubble_3  
		dc.b id_Frame_DrownNum_0
		dc.b id_Frame_DrownNum_0
		dc.b afRoutine					; 0
		
Ani_Drown_OneAppear:	
		dc.b 5 
		dc.b id_Frame_Bubble_0 
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup  
		dc.b id_Frame_Bubble_2  
		dc.b id_Frame_Bubble_3  
		dc.b id_Frame_DrownNum_1
		dc.b id_Frame_DrownNum_1
		dc.b afRoutine					; 0

Ani_Drown_TwoAppear:	
		dc.b 5 
		dc.b id_Frame_Bubble_0 
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup  
		dc.b id_Frame_Bubble_2  
		dc.b id_Frame_Bubble_3  
		dc.b id_Frame_DrownNum_2
		dc.b id_Frame_DrownNum_2
		dc.b afRoutine					; 0

Ani_Drown_ThreeAppear:	
		dc.b 5 
		dc.b id_Frame_Bubble_0 
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup  
		dc.b id_Frame_Bubble_2  
		dc.b id_Frame_Bubble_3
		dc.b id_Frame_DrownNum_3
		dc.b id_Frame_DrownNum_3
		dc.b afRoutine					; 0

Ani_Drown_FourAppear:	
		dc.b 5 
		dc.b id_Frame_Bubble_0 
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup  
		dc.b id_Frame_Bubble_2  
		dc.b id_Frame_Bubble_3  
		dc.b id_Frame_DrownNum_4
		dc.b id_Frame_DrownNum_4
		dc.b afRoutine					; 0

Ani_Drown_FiveAppear:	
		dc.b 5 
		dc.b id_Frame_Bubble_0 
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup  
		dc.b id_Frame_Bubble_2  
		dc.b id_Frame_Bubble_3  
		dc.b id_Frame_DrownNum_5
		dc.b id_Frame_DrownNum_5
		dc.b afRoutine					; 0
		
	
Ani_Drown_SmallBubble:	
		dc.b $E
		dc.b id_Frame_Bubble_0
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup
		dc.b afRoutine


Ani_Drown_ZeroFlash:	
		dc.b 7
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_0
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_0
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_0
		dc.b afRoutine
	

Ani_Drown_OneFlash:	
		dc.b 7
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_1
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_1
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_1
		dc.b afRoutine

Ani_Drown_TwoFlash:	
		dc.b 7
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_2
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_2
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_2
		dc.b afRoutine

Ani_Drown_ThreeFlash:	
		dc.b 7
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_3
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_3
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_3
		dc.b afRoutine

Ani_Drown_FourFlash:	
		dc.b 7
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_4
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_4
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_4
		dc.b afRoutine

Ani_Drown_FiveFlash:	
		dc.b 7
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_5
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_5
		dc.b id_Frame_Bubble_Blank
		dc.b id_Frame_DrownNum_5
		dc.b afRoutine

Ani_Drown_Blank:	
		dc.b $E
		dc.b afRoutine 

Ani_Drown_MediumBubble:	
		dc.b $E
		dc.b id_Frame_Bubble_1
		dc.b id_Frame_Bubble_1_Dup
		dc.b id_Frame_Bubble_2
		dc.b id_Frame_Bubble_3
		dc.b afRoutine
		
		even
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 38 - Shield
; ----------------------------------------------------------------------------

ShieldItem:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1D900(pc,d0.w),d1
		jmp	off_1D900(pc,d1.w)
; ===========================================================================
off_1D900:	
		dc.w loc_1D904-off_1D900			; 0 
		dc.w loc_1D92C-off_1D900			; 1
; ===========================================================================

loc_1D904:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Shield,ost_mappings(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#1,$18(a0)
		move.b	#$18,$19(a0)
		move.w	#tile_Nem_Shield,ost_tile(a0)
		bsr.w	Adjust2PArtPointer

loc_1D92C:				
		movea.w	$3E(a0),a2
		btst	#1,$2B(a2)
		bne.s	locret_1D976
		btst	#0,$2B(a2)
		beq.s	JmpTo7_DeleteObject
		move.w	ost_x_pos(a2),ost_x_pos(a0)
		move.w	ost_y_pos(a2),ost_y_pos(a0)
		move.b	$22(a2),$22(a0)
		andi.w	#tile_draw,ost_tile(a0)
		tst.w	ost_tile(a2)
		bpl.s	loc_1D964
		ori.w	#tile_hi,ost_tile(a0)

loc_1D964:				
		lea	(byte_1DBD6).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

locret_1D976:				
		rts	
; ===========================================================================

JmpTo7_DeleteObject:				
		jmp	DeleteObject
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 35 - Invincibility Stars
; ----------------------------------------------------------------------------

InvincibiltyStars:				
		moveq	#0,d0
		move.b	ost_invstars_routine(a0),d0
		move.w	off_1D98C(pc,d0.w),d1
		jmp	off_1D98C(pc,d1.w)
; ===========================================================================
off_1D98C:	
		dc.w loc_1D9A4-off_1D98C			; 0 
		dc.w loc_1DA0C-off_1D98C			; 2
		dc.w loc_1DA80-off_1D98C			; 4
		
ost_invstars_routine:	equ $A
		
off_1D992:		
		dc.l byte_1DB8F	
		dc.w $B
		dc.l byte_1DBA4
		dc.w $160D
		dc.l byte_1DBBD
		dc.w $2C0D
; ===========================================================================

loc_1D9A4:				
		moveq	#0,d2
		lea	off_1D992-6(pc),a2
		lea	(a0),a1
		moveq	#3,d1

loc_1D9AE:				
		_move.b	ost_id(a0),ost_id(a1)
		move.b	#4,ost_invstars_routine(a1)
		move.l	#Map_Invincibility,ost_mappings(a1)
		move.w	#tile_Nem_Invinciblity_Stars,ost_tile(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#$10,ost_mainspr_width(a1)
		move.b	#2,ost_mainspr_childsprites(a1)
		move.w	$3E(a0),$3E(a1)
		move.b	d2,$36(a1)
		addq.w	#1,d2
		move.l	(a2)+,$30(a1)
		move.w	(a2)+,$34(a1)
		lea	$40(a1),a1
		dbf	d1,loc_1D9AE
		move.b	#2,ost_invstars_routine(a0)
		move.b	#4,$34(a0)

loc_1DA0C:				
		movea.w	$3E(a0),a1
		btst	#1,$2B(a1)
		beq.w	DeleteObject
		move.w	ost_x_pos(a1),d0
		move.w	d0,ost_x_pos(a0)
		move.w	ost_y_pos(a1),d1
		move.w	d1,ost_y_pos(a0)
		lea	ost_subspr2_x_pos(a0),a2
		lea	byte_1DB82(pc),a3
		moveq	#0,d5

loc_1DA34:				
		move.w	$38(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	loc_1DA44
		clr.w	$38(a0)
		bra.s	loc_1DA34
; ===========================================================================

loc_1DA44:				
		addq.w	#1,$38(a0)
		lea	byte_1DB42(pc),a6
		move.b	$34(a0),d6
		jsr	loc_1DB2C(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6
		jsr	loc_1DB2C(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#$12,d0
		btst	#0,$22(a1)
		beq.s	loc_1DA74
		neg.w	d0

loc_1DA74:				
		add.b	d0,$34(a0)
		move.w	#$80,d0	
		bra.w	DisplaySprite3
; ===========================================================================

loc_1DA80:
	if FixBugs
		; If Sonic turns Super while invincible, the stars don't go away.
		; S3K fixes this by doing the following:
		tst.b	(f_super).w				; has Sonic turned super?
		bne.w	DeleteObject				; if so, delete the stars
	endc			
		movea.w	$3E(a0),a1
		btst	#1,$2B(a1)
		beq.w	DeleteObject
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_1DAA4
		lea	(v_sonic_pos_tracker_num).w,a5
		lea	(v_sonic_pos_tracker).w,a6
		tst.b	$3F(a0)
		beq.s	loc_1DAAC

loc_1DAA4:				
		lea	(v_tails_pos_tracker_num).w,a5
		lea	(v_tails_pos_tracker).w,a6

loc_1DAAC:				
		move.b	$36(a0),d1
		lsl.b	#2,d1
		move.w	d1,d2
		add.w	d1,d1
		add.w	d2,d1
		move.w	(a5),d0
		sub.b	d1,d0
		lea	(a6,d0.w),a2
		move.w	(a2)+,d0
		move.w	(a2)+,d1
		move.w	d0,ost_x_pos(a0)
		move.w	d1,ost_y_pos(a0)
		lea	ost_subspr2_x_pos(a0),a2
		movea.l	$30(a0),a3

loc_1DAD4:				
		move.w	$38(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	loc_1DAE4
		clr.w	$38(a0)
		bra.s	loc_1DAD4
; ===========================================================================

loc_1DAE4:				
		swap	d5
		add.b	$35(a0),d2
		move.b	(a3,d2.w),d5
		addq.w	#1,$38(a0)
		lea	byte_1DB42(pc),a6
		move.b	$34(a0),d6
		jsr	loc_1DB2C(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6
		swap	d5
		jsr	loc_1DB2C(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#2,d0
		btst	#0,$22(a1)
		beq.s	loc_1DB20
		neg.w	d0

loc_1DB20:				
		add.b	d0,$34(a0)
		move.w	#$80,d0	
		bra.w	DisplaySprite3
; ===========================================================================

loc_1DB2C:				
		andi.w	#$3E,d6
		move.b	(a6,d6.w),d2
		move.b	1(a6,d6.w),d3
		ext.w	d2
		ext.w	d3
		add.w	d0,d2
		add.w	d1,d3
		rts	
; ===========================================================================
byte_1DB42:	
		dc.b  $F,  0, $F,  3, $E,  6, $D,  8, $B, $B,  8, $D,  6, $E,  3, $F ; 0		
		dc.b   0,$10,$FC, $F,$F9, $E,$F7, $D,$F4, $B,$F2,  8,$F1,  6,$F0,  3 ; 16
		dc.b $F0,  0,$F0,$FC,$F1,$F9,$F2,$F7,$F4,$F4,$F7,$F2,$F9,$F1,$FC,$F0 ; 32
		dc.b $FF,$F0,  3,$F0,  6,$F1,  8,$F2, $B,$F4, $D,$F7, $E,$F9, $F,$FC ; 48

byte_1DB82:	
		dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF ; 0
					
byte_1DB8F:	
		dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF,  3,  4,  5,  6,  7 ; 0		
		dc.b   8,  7,  6,  5,  4			; 16
byte_1DBA4:	
		dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF,  2,  3,  4 ; 0			
		dc.b   5,  6,  7,  8,  7,  6,  5,  4,  3	; 16

byte_1DBBD:
		dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF,  1,  2,  3 ; 0				
		dc.b   4,  5,  6,  7,  6,  5,  4,  3,  2	; 16

byte_1DBD6:	
		dc.b   0,  2,  0,  5,  0,  5,  1,  5,  2,  5,  3,  5,  4,$FF ; 0

; ===========================================================================
					
		include "mappings/sprite/Shield.asm"
		include "mappings/sprite/Invincibility Stars.asm"
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 08 - Water splash and spindash dust
; ----------------------------------------------------------------------------

Splash_SpindashDust:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1DD2E(pc,d0.w),d1
		jmp	off_1DD2E(pc,d1.w)
; ===========================================================================
off_1DD2E:	
		dc.w loc_1DD36-off_1DD2E			; 0 
		dc.w loc_1DD90-off_1DD2E			; 1
		dc.w loc_1DE46-off_1DD2E			; 2
		dc.w loc_1DE4A-off_1DD2E			; 3
; ===========================================================================

loc_1DD36:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_SplashDust,ost_mappings(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#1,$18(a0)
		move.b	#$10,$19(a0)
		move.w	#vram_SonicDust/sizeof_cell,ost_tile(a0)
		move.w	#v_ost_player1,$3E(a0)
		move.w	#vram_SonicDust,$3C(a0)
		cmpa.w	#v_ost_lo_sonic_dust,a0
		beq.s	loc_1DD8C
		move.b	#1,$34(a0)
		cmpi.w	#tails_alone,(v_player_mode).w
		beq.s	loc_1DD8C
		move.w	#vram_TailsDust/sizeof_cell,ost_tile(a0)
		move.w	#v_ost_player2,$3E(a0)
		move.w	#vram_TailsDust,$3C(a0)

loc_1DD8C:				
		bsr.w	Adjust2PArtPointer

loc_1DD90:				
		movea.w	$3E(a0),a2
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w	d0,d0
		move.w	off_1DDA4(pc,d0.w),d1
		jmp	off_1DDA4(pc,d1.w)
; ===========================================================================
off_1DDA4:	
		dc.w loc_1DE28-off_1DDA4			; 0 
		dc.w loc_1DDAC-off_1DDA4			; 1
		dc.w loc_1DDCC-off_1DDA4			; 2
		dc.w loc_1DE20-off_1DDA4			; 3
; ===========================================================================

loc_1DDAC:				
		move.w	(v_water_height_actual).w,ost_y_pos(a0)
		tst.b	$1D(a0)
		bne.s	loc_1DE28
		move.w	ost_x_pos(a2),ost_x_pos(a0)
		move.b	#0,$22(a0)
		andi.w	#tile_draw,ost_tile(a0)
		bra.s	loc_1DE28
; ===========================================================================

loc_1DDCC:				
		cmpi.b	#$C,$28(a2)
		bcs.s	loc_1DE3E
		cmpi.b	#4,$24(a2)
		bcc.s	loc_1DE3E
		tst.b	$39(a2)
		beq.s	loc_1DE3E
		move.w	ost_x_pos(a2),ost_x_pos(a0)
		move.w	ost_y_pos(a2),ost_y_pos(a0)
		move.b	$22(a2),$22(a0)
		andi.b	#1,$22(a0)
		tst.b	$34(a0)
		beq.s	loc_1DE06
		subi_.w	#4,ost_y_pos(a0)

loc_1DE06:				
		tst.b	$1D(a0)
		bne.s	loc_1DE28
		andi.w	#tile_draw,ost_tile(a0)
		tst.w	ost_tile(a2)
		bpl.s	loc_1DE28
		ori.w	#tile_hi,ost_tile(a0)
		bra.s	loc_1DE28
; ===========================================================================

loc_1DE20:				
		cmpi.b	#$C,$28(a2)
		bcs.s	loc_1DE3E

loc_1DE28:				
		lea	(Ani_SplashDust).l,a1
		jsr	AnimateSprite
		bsr.w	loc_1DEE4
		jmp	DisplaySprite
; ===========================================================================

loc_1DE3E:				
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1DE46:				
		bra.w	DeleteObject
; ===========================================================================

loc_1DE4A:				
		movea.w	$3E(a0),a2
		cmpi.b	#$D,$1C(a2)
		beq.s	loc_1DE64
		move.b	#2,ost_primary_routine(a0)
		move.b	#0,$32(a0)
		rts	
; ===========================================================================

loc_1DE64:				
		subq.b	#1,$32(a0)
		bpl.s	loc_1DEE0
		move.b	#3,$32(a0)
		bsr.w	FindFreeObj
		bne.s	loc_1DEE0
		_move.b	ost_id(a0),ost_id(a1)
		move.w	ost_x_pos(a2),ost_x_pos(a1)
		move.w	ost_y_pos(a2),ost_y_pos(a1)
		addi.w	#$10,ost_y_pos(a1)
		tst.b	$34(a0)
		beq.s	loc_1DE9A
		subi_.w	#4,ost_y_pos(a1)

loc_1DE9A:				
		move.b	#0,$22(a1)
		move.b	#3,$1C(a1)
		addq.b	#2,$24(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#1,$18(a1)
		move.b	#4,$19(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.w	$3E(a0),$3E(a1)
		andi.w	#tile_draw,ost_tile(a1)
		tst.w	ost_tile(a2)
		bpl.s	loc_1DEE0
		ori.w	#tile_hi,ost_tile(a1)

loc_1DEE0:				
		bsr.s	loc_1DEE4
		rts	
; ===========================================================================

loc_1DEE4:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	$30(a0),d0
		beq.s	locret_1DF36
		move.b	d0,$30(a0)
		lea	(DynPLC_SplashDust).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1DF36

loc_1DF06:
		move.w	$3C(a0),d4

loc_1DF0A:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_SplashAndDust,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(AddDMA).l
		dbf	d5,loc_1DF0A

locret_1DF36:				
		rts	
; ===========================================================================
Ani_SplashDust:	
		dc.w byte_1DF40-Ani_SplashDust			; 0 
		dc.w byte_1DF43-Ani_SplashDust			; 1
		dc.w byte_1DF4F-Ani_SplashDust			; 2
		dc.w byte_1DF58-Ani_SplashDust			; 3
byte_1DF40:	dc.b $1F,  0,$FF				; 0 
byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0 ; 0	
byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF	; 0 
byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC			; 0	

; ===========================================================================

		include "mappings/sprite/Splash and Spindash Dust.asm"
		include "mappings/spriteDPLC/Splash and Spindash Dust.asm"
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7E - Super Sonic's stars
; ----------------------------------------------------------------------------

SuperSonicStars:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	SuperStars_Index(pc,d0.w),d1
		jmp	SuperStars_Index(pc,d1.w)
; ===========================================================================
SuperStars_Index:	index offset(*),,2
		ptr loc_1E102		; 0 
		ptr loc_1E138		; 2
; ===========================================================================

loc_1E102:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_SuperStars,ost_mappings(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#1,$18(a0)
		move.b	#$18,$19(a0)
		move.w	#tile_Nem_SuperSonic_Stars,ost_tile(a0)
		bsr.w	Adjust2PArtPointer
		btst	#tile_hi_bit,(v_ost_player1+ost_tile).w
		beq.s	loc_1E138
		bset	#tile_hi_bit,ost_tile(a0)

loc_1E138:				
					
		tst.b	(f_super).w
		beq.s	loc_1E1B8
		tst.b	$30(a0)
		beq.s	loc_1E188
		subq.b	#1,$1E(a0)
		bpl.s	loc_1E170
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#6,$1A(a0)
		bcs.s	loc_1E170
		move.b	#0,$1A(a0)
		move.b	#0,$30(a0)
		move.b	#1,$31(a0)
		rts	
; ===========================================================================

loc_1E170:				
		tst.b	$31(a0)
		bne.s	loc_1E182

loc_1E176:				
		move.w	(v_ost_player1+ost_x_pos).w,ost_x_pos(a0)
		move.w	(v_ost_player1+ost_y_pos).w,ost_y_pos(a0)

loc_1E182:				
		jmp	DisplaySprite
; ===========================================================================

loc_1E188:				
		tst.b	(v_ost_player1+ost_obj_control).w
		bne.s	loc_1E1AA
		move.w	(v_ost_player1+ost_inertia).w,d0
		bpl.s	loc_1E196
		neg.w	d0

loc_1E196:				
		cmpi.w	#$800,d0
		bcs.s	loc_1E1AA
		move.b	#0,$1A(a0)
		move.b	#1,$30(a0)
		bra.s	loc_1E176
; ===========================================================================

loc_1E1AA:				
		move.b	#0,$30(a0)
		move.b	#0,$31(a0)
		rts	
; ===========================================================================

loc_1E1B8:				
		jmp	DeleteObject
; ===========================================================================

		include "mappings/sprite/Super Sonic Stars.asm"

; ===========================================================================

	if Revision<2
		nop	
	endc
	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to change Sonic and Tails' angle & position as they walk 
; along the floor
; ---------------------------------------------------------------------------
Player_AnglePos:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1E24C
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1E24C:				
		move.b	$3E(a0),d5
		btst	#3,$22(a0)
		beq.s	loc_1E264
		moveq	#0,d0
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		rts	
; ===========================================================================

loc_1E264:				
		moveq	#3,d0
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		move.b	$26(a0),d0
		addi.b	#$20,d0
		bpl.s	loc_1E286
		move.b	$26(a0),d0
		bpl.s	loc_1E280
		subq.b	#1,d0

loc_1E280:				
		addi.b	#$20,d0
		bra.s	loc_1E292
; ===========================================================================

loc_1E286:				
		move.b	$26(a0),d0
		bpl.s	loc_1E28E
		addq.b	#1,d0

loc_1E28E:				
		addi.b	#$1F,d0

loc_1E292:				
		andi.b	#-$40,d0
		cmpi.b	#$40,d0
		beq.w	Sonic_WalkVertL
		cmpi.b	#-$80,d0
		beq.w	Sonic_WalkCeiling
		cmpi.b	#-$40,d0
		beq.w	Player_WalkVertR
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		neg.w	d0
		add.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor
		move.w	(sp)+,d0
		bsr.w	Player_UpdateAngle
		tst.w	d1
		beq.s	locret_1E31C
		bpl.s	loc_1E31E
		cmpi.w	#-$E,d1
		blt.s	locret_1E31C
		add.w	d1,ost_y_pos(a0)

locret_1E31C:				
		rts	
; ===========================================================================

loc_1E31E:				
		move.b	ost_x_vel(a0),d0
		bpl.s	loc_1E326
		neg.b	d0

loc_1E326:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E332
		move.b	#$E,d0

loc_1E332:				
		cmp.b	d0,d1
		bgt.s	loc_1E33C

loc_1E336:				
		add.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_1E33C:				
		tst.b	$38(a0)
		bne.s	loc_1E336
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	update Sonic or Tails' angle

; input:
;	d0 = distance to floor right side
;	d1 = distance to floor left side

; output:
;	d1 = shortest distance to floor (either side)
;	d2 = angle
; ---------------------------------------------------------------------------
Player_UpdateAngle:				
		move.b	(v_angle_left).w,d2			; use left side angle
		cmp.w	d0,d1
		ble.s	.left_nearer				; branch if floor is nearer on left side
		move.b	(v_angle_right).w,d2			; use right side angle
		move.w	d0,d1					; use distance of right side

	.left_nearer:			
		btst	#0,d2
		bne.s	.snap_angle			; branch if bit 0 of angle is set
		move.b	d2,d0				; d2 = angle
		sub.b	ost_angle(a0),d0	; get difference between old and new angles
		bpl.s	.alreadypos			; branch if already positive
		neg.b	d0					; make positive

	.alreadypos:				
		cmpi.b	#$20,d0				; d0 = absolute value of difference between old and new angles
		bcc.s	.snap_angle			; branch if angle has changed by $20 or more
		move.b	d2,ost_angle(a0)	; update angle
		rts	
; ===========================================================================

.snap_angle:				
		move.b	ost_angle(a0),d2
		addi.b	#$20,d2
		andi.b	#$C0,d2					; snap to nearest 90 degree angle
		move.b	d2,ost_angle(a0)			; update angle
		rts	
		
; ===========================================================================

Player_WalkVertR:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		neg.w	d0
		add.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall
		move.w	(sp)+,d0
		bsr.w	Player_UpdateAngle
		tst.w	d1
		beq.s	locret_1E400
		bpl.s	loc_1E402
		cmpi.w	#-$E,d1
		blt.s	locret_1E400
		add.w	d1,ost_x_pos(a0)

locret_1E400:				
		rts	
; ===========================================================================

loc_1E402:				
		move.b	ost_y_vel(a0),d0
		bpl.s	loc_1E40A
		neg.b	d0

loc_1E40A:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E416
		move.b	#$E,d0

loc_1E416:				
		cmp.b	d0,d1
		bgt.s	loc_1E420

loc_1E41A:				
		add.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_1E420:				
		tst.b	$38(a0)
		bne.s	loc_1E41A
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================

Sonic_WalkCeiling:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor
		move.w	(sp)+,d0
		bsr.w	Player_UpdateAngle
		tst.w	d1
		beq.s	locret_1E4AE
		bpl.s	loc_1E4B0
		cmpi.w	#-$E,d1
		blt.s	locret_1E4AE
		sub.w	d1,ost_y_pos(a0)

locret_1E4AE:				
		rts	
; ===========================================================================

loc_1E4B0:				
		move.b	ost_x_vel(a0),d0
		bpl.s	loc_1E4B8
		neg.b	d0

loc_1E4B8:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E4C4
		move.b	#$E,d0

loc_1E4C4:				
		cmp.b	d0,d1
		bgt.s	loc_1E4CE

loc_1E4C8:				
		sub.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_1E4CE:				
		tst.b	$38(a0)
		bne.s	loc_1E4C8
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================

Sonic_WalkVertL:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall
		move.w	(sp)+,d0
		bsr.w	Player_UpdateAngle
		tst.w	d1
		beq.s	locret_1E55C
		bpl.s	loc_1E55E
		cmpi.w	#-$E,d1
		blt.s	locret_1E55C
		sub.w	d1,ost_x_pos(a0)

locret_1E55C:				
		rts	
; ===========================================================================

loc_1E55E:				
		move.b	ost_y_vel(a0),d0
		bpl.s	loc_1E566
		neg.b	d0

loc_1E566:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E572
		move.b	#$E,d0

loc_1E572:				
		cmp.b	d0,d1
		bgt.s	loc_1E57C

loc_1E576:				
		sub.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_1E57C:				
		tst.b	$38(a0)
		bne.s	loc_1E576
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	find which 16x16 tile the object is standing on

; input:
;	d2.w = y position of object's bottom edge
;	d3.w = x position of object

; output:
;	a1 = address within 128x128 mappings where object is standing
;	(a1).w = 16x16 tile number, x/yflip, solidness

;	uses d0.w, d1.l, d2.w, d4,w
; ---------------------------------------------------------------------------
FindNearestTile:				
		move.w	d2,d0					; get y pos of bottom edge of object
		add.w	d0,d0					; multiply y pos by 2 (because layout alternates between level and bg lines)
		andi.w	#$F00,d0				; read only high byte of y pos (as each level tile is 128 px tall)
		move.w	d3,d1					; get x pos of object
		lsr.w	#3,d1					; divide x pos by 8
		move.w	d1,d4					; save for later
		lsr.w	#4,d1					; divide by 16; result is x pos divided by 128
		andi.w	#$7F,d1					; read only high byte of x pos
		add.w	d1,d0					; combine for position in layout
		moveq	#-1,d1					
		clr.w	d1					; d1 = $FFFF0000 (used to make a RAM address)
		lea	(v_level_layout).w,a1
		move.b	(a1,d0.w),d1				; get 128x128 tile number
		add.w	d1,d1					; multiply by 2 
		move.w	FindNearestTile_Offsets(pc,d1.w),d1	; get base address of 128x128 tile
		move.w	d2,d0					; d0 = y pos * 2 (because each 16x16 tile is represented by 2 bytes)
		andi.w	#$70,d0					; read only high nybble of low byte (for y pos within 128x128 tile)
		add.w	d0,d1					; add to base address
		andi.w	#$E,d4					; d0 = high nybble of low byte of x pos, minus the highest bit
		add.w	d4,d1					; add to base address
		movea.l	d1,a1
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Lookup table of 128x128 tile addresses. These were calculated on the fly 
; in Sonic 1.
; ---------------------------------------------------------------------------
FindNearestTile_Offsets:	
		c: = 0						; start at zero	
		rept 256		
		dc.w c						; include value	
		c: = c+$80					; increment by 128
		endr						; repeat 256 times, generating the table
		
; ===========================================================================

FindFloor:				
		bsr.w	FindNearestTile
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E7E2
		btst	d5,d4
		bne.s	loc_1E7F0

loc_1E7E2:				
		add.w	a3,d2
		bsr.w	FindFloor2
		sub.w	a3,d2
		addi.w	#$10,d1
		rts	
; ===========================================================================

loc_1E7F0:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E7E2
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d3,d1

loc_1E80C:
		btst	#$A,d4
		beq.s	loc_1E816
		not.w	d1
		neg.b	(a4)

loc_1E816:				
		btst	#$B,d4
		beq.s	loc_1E826
		addi.b	#$40,(a4)
		neg.b	(a4)
		subi.b	#$40,(a4)

loc_1E826:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray1).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$B,d4
		beq.s	loc_1E842
		neg.w	d0

loc_1E842:				
		tst.w	d0
		beq.s	loc_1E7E2
		bmi.s	loc_1E85E
		cmpi.b	#$10,d0
		beq.s	loc_1E86A
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E85E:				
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E7E2

loc_1E86A:				
		sub.w	a3,d2
		bsr.w	FindFloor2
		add.w	a3,d2
		subi.w	#$10,d1
		rts	
; ===========================================================================

FindFloor2:				
		bsr.w	FindNearestTile
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E88A
		btst	d5,d4
		bne.s	loc_1E898

loc_1E88A:				
		move.w	#$F,d1
		move.w	d2,d0
		andi.w	#$F,d0
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E898:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E88A
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d3,d1
		btst	#$A,d4
		beq.s	loc_1E8BE
		not.w	d1
		neg.b	(a4)

loc_1E8BE:				
		btst	#$B,d4
		beq.s	loc_1E8CE
		addi.b	#$40,(a4)
		neg.b	(a4)
		subi.b	#$40,(a4)

loc_1E8CE:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray1).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$B,d4
		beq.s	loc_1E8EA
		neg.w	d0

loc_1E8EA:				
		tst.w	d0
		beq.s	loc_1E88A
		bmi.s	loc_1E900
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E900:				
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E88A
		not.w	d1
		rts	
; ===========================================================================

FindFloorRing_Cont:				
		bsr.w	FindNearestTile
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E922
		btst	d5,d4
		bne.s	loc_1E928

loc_1E922:				
		move.w	#$10,d1
		rts	
; ===========================================================================

loc_1E928:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E922
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d3,d1
		btst	#$A,d4
		beq.s	loc_1E94E
		not.w	d1
		neg.b	(a4)

loc_1E94E:				
		btst	#$B,d4
		beq.s	loc_1E95E
		addi.b	#$40,(a4)
		neg.b	(a4)
		subi.b	#$40,(a4)

loc_1E95E:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray1).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$B,d4
		beq.s	loc_1E97A
		neg.w	d0

loc_1E97A:				
		tst.w	d0
		beq.s	loc_1E922
		bmi.s	loc_1E996
		cmpi.b	#$10,d0
		beq.s	loc_1E9A2
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E996:				
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E922

loc_1E9A2:				
		sub.w	a3,d2
		bsr.w	FindFloor2
		add.w	a3,d2
		subi.w	#$10,d1
		rts	
; ===========================================================================

FindWall:				
		bsr.w	FindNearestTile
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E9C2
		btst	d5,d4
		bne.s	loc_1E9D0

loc_1E9C2:				
		add.w	a3,d3
		bsr.w	FindWall2
		sub.w	a3,d3
		addi.w	#$10,d1
		rts	
; ===========================================================================

loc_1E9D0:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E9C2
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d2,d1
		btst	#$B,d4
		beq.s	loc_1E9FE
		not.w	d1
		addi.b	#$40,(a4)
		neg.b	(a4)
		subi.b	#$40,(a4)

loc_1E9FE:				
		btst	#$A,d4
		beq.s	loc_1EA06
		neg.b	(a4)

loc_1EA06:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray2).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$A,d4
		beq.s	loc_1EA22
		neg.w	d0

loc_1EA22:				
		tst.w	d0
		beq.s	loc_1E9C2
		bmi.s	loc_1EA3E
		cmpi.b	#$10,d0
		beq.s	loc_1EA4A
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1EA3E:				
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E9C2

loc_1EA4A:				
		sub.w	a3,d3
		bsr.w	FindWall2
		add.w	a3,d3
		subi.w	#$10,d1
		rts	
; ===========================================================================

FindWall2:				
		bsr.w	FindNearestTile
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1EA6A
		btst	d5,d4
		bne.s	loc_1EA78

loc_1EA6A:				
		move.w	#$F,d1
		move.w	d3,d0
		andi.w	#$F,d0
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1EA78:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1EA6A
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d2,d1
		btst	#$B,d4
		beq.s	loc_1EAA6
		not.w	d1
		addi.b	#$40,(a4)
		neg.b	(a4)
		subi.b	#$40,(a4)

loc_1EAA6:				
		btst	#$A,d4
		beq.s	loc_1EAAE
		neg.b	(a4)

loc_1EAAE:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray2).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$A,d4
		beq.s	loc_1EACA
		neg.w	d0

loc_1EACA:				
		tst.w	d0
		beq.s	loc_1EA6A
		bmi.s	loc_1EAE0
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1EAE0:				
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1EA6A
		not.w	d1
		rts	
; ===========================================================================

ConvertCollisionArray:				
		rts	
; ===========================================================================
		lea	(CollArray1).l,a1
		lea	(CollArray1).l,a2
		move.w	#$FF,d3

loc_1EB02:				
		moveq	#$10,d5
		move.w	#$F,d2

loc_1EB08:				
		moveq	#0,d4
		move.w	#$F,d1

loc_1EB0E:				
		move.w	(a1)+,d0
		lsr.l	d5,d0
		addx.w	d4,d4
		dbf	d1,loc_1EB0E
		move.w	d4,(a2)+
		suba.w	#$20,a1
		subq.w	#1,d5
		dbf	d2,loc_1EB08
		adda.w	#$20,a1
		dbf	d3,loc_1EB02
		lea	(CollArray1).l,a1
		lea	(CollArray2).l,a2
		bsr.s	loc_1EB46
		lea	(CollArray1).l,a1
		lea	(CollArray1).l,a2

loc_1EB46:				
		move.w	#$FFF,d3

loc_1EB4A:				
		moveq	#0,d2
		move.w	#$F,d1
		move.w	(a1)+,d0
		beq.s	loc_1EB78
		bmi.s	loc_1EB62

loc_1EB56:				
		lsr.w	#1,d0
		bcc.s	loc_1EB5C
		addq.b	#1,d2

loc_1EB5C:				
		dbf	d1,loc_1EB56
		bra.s	loc_1EB7A
; ===========================================================================

loc_1EB62:				
		cmpi.w	#-1,d0
		beq.s	loc_1EB74

loc_1EB68:				
		lsl.w	#1,d0
		bcc.s	loc_1EB6E
		subq.b	#1,d2

loc_1EB6E:				
		dbf	d1,loc_1EB68
		bra.s	loc_1EB7A
; ===========================================================================

loc_1EB74:				
		move.w	#$10,d0

loc_1EB78:				
		move.w	d0,d2

loc_1EB7A:				
		move.b	d2,(a2)+
		dbf	d3,loc_1EB4A
		rts	
; ===========================================================================

	if Revision<2
		nop
	endc
	
; ===========================================================================
	
Player_CalcRoomAhead:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1EB9C
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EB9C:				
		move.b	$3F(a0),d5
		move.l	ost_x_pos(a0),d3
		move.l	ost_y_pos(a0),d2
		move.w	ost_x_vel(a0),d1
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d3
		move.w	ost_y_vel(a0),d1
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d2
		swap	d2
		swap	d3
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		move.b	d0,d1
		addi.b	#$20,d0
		bpl.s	loc_1EBDC
		move.b	d1,d0
		bpl.s	loc_1EBD6
		subq.b	#1,d0

loc_1EBD6:				
		addi.b	#$20,d0
		bra.s	loc_1EBE6
; ===========================================================================

loc_1EBDC:				
		move.b	d1,d0
		bpl.s	loc_1EBE2
		addq.b	#1,d0

loc_1EBE2:				
		addi.b	#$1F,d0

loc_1EBE6:				
		andi.b	#-$40,d0
		beq.w	Player_FindFloor_Quick
		cmpi.b	#-$80,d0
		beq.w	Player_FindCeiling_Quick
		andi.b	#$38,d1
		bne.s	loc_1EBFE
		addq.w	#8,d2

loc_1EBFE:				
		cmpi.b	#$40,d0
		beq.w	Player_FindWallLeft_Quick

loc_1EC06:
		bra.w	FindWallRight_Quick
; ===========================================================================

Player_CalcHeadroom:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1EC22
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EC22:				
		move.b	$3F(a0),d5
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		addi.b	#$20,d0
		andi.b	#-$40,d0
		cmpi.b	#$40,d0
		beq.w	Player_FindWallLeft
		cmpi.b	#-$80,d0
		beq.w	Player_FindCeiling
		cmpi.b	#-$40,d0
		beq.w	Player_FindWallRight

; ===========================================================================

Player_FindFloor:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1EC66
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EC66:				
		move.b	$3E(a0),d5
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor
		move.w	(sp)+,d0
		move.b	#0,d2

loc_1ECC6:				
		move.b	(v_angle_left).w,d3
		cmp.w	d0,d1
		ble.s	loc_1ECD4
		move.b	(v_angle_right).w,d3
		exg	d0,d1

loc_1ECD4:				
		btst	#0,d3
		beq.s	locret_1ECDC
		move.b	d2,d3

locret_1ECDC:				
		rts	
; ===========================================================================
		; Two unused/dead lines
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3

Player_FindFloor_Quick:				
		addi.w	#$A,d2
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor
		move.b	#0,d2

Player_SnapAngle:				
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	.no_angle_snap
		move.b	d2,d3

	.no_angle_snap:				
		rts	
		
; ===========================================================================
	; Dead/unused
		move.w	ost_x_pos(a0),d3
		move.w	ost_y_pos(a0),d2
		subq.w	#4,d2
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$D,$3F(a0)
		beq.s	loc_1ED2E
		move.l	#-$2700,(v_collision_index_ptr).w

	loc_1ED2E:				
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$3F(a0),d5
		bsr.w	FindFloor
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1ED54
		move.b	#0,d3

	locret_1ED54:				
		rts	
; ===========================================================================

FindFloorEdge:				
		move.w	ost_x_pos(a0),d3

FindFloorEdge_NoX:				
		move.w	ost_y_pos(a0),d2
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1ED80
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1ED80:				
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$3E(a0),d5
		bsr.w	FindFloor
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EDA6
		move.b	#0,d3

locret_1EDA6:				
		rts	
; ===========================================================================

FindFloorEdge2:				
		move.w	ost_x_pos(a1),d3
		move.w	ost_y_pos(a1),d2
		moveq	#0,d0
		move.b	ost_height(a1),d0
		ext.w	d0
		add.w	d0,d2
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a1)
		beq.s	loc_1EDD2
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EDD2:				
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$3E(a1),d5
		bsr.w	FindFloor
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EDF8
		move.b	#0,d3

locret_1EDF8:				
		rts	
; ===========================================================================
;ObjCheckFloorDist:
FindFloorObj:							
		move.w	ost_x_pos(a0),d3
		move.w	ost_y_pos(a0),d2
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		lea	(v_angle_right).w,a4

loc_1EE0E:
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bsr.w	FindFloor
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EE2E
		move.b	#0,d3

locret_1EE2E:				
		rts	
; ===========================================================================

FindFloorFire:				
		move.w	ost_x_pos(a1),d3
		move.w	ost_y_pos(a1),d2
		move.b	ost_height(a1),d0
		ext.w	d0
		add.w	d0,d2
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bra.w	FindFloor
; ===========================================================================

FindFloorRing:				
		move.w	ost_x_pos(a0),d3
		move.w	ost_y_pos(a0),d2
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d2
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bra.w	FindFloorRing_Cont
; ===========================================================================

Player_FindWallRight:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall
		move.w	(sp)+,d0
		move.b	#-$40,d2
		bra.w	loc_1ECC6
; ===========================================================================

FindWallRight_Quick_UsePos:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3

FindWallRight_Quick:				
		addi.w	#$A,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall
		move.b	#-$40,d2
		bra.w	Player_SnapAngle
; ===========================================================================
;ObjCheckRightWallDist:
FindWallRightObj:				
		add.w	ost_x_pos(a0),d3
		move.w	ost_y_pos(a0),d2
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$D,d5
		bsr.w	FindWall
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EF2C
		move.b	#-$40,d3

locret_1EF2C:				
		rts	
; ===========================================================================

Player_FindCeiling:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor
		move.w	d1,-(sp)
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor
		move.w	(sp)+,d0
		move.b	#-$80,d2
		bra.w	loc_1ECC6
; ===========================================================================
		; unused/dead.
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3

Player_FindCeiling_Quick:				
		subi.w	#$A,d2
		eori.w	#$F,d2
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor
		move.b	#-$80,d2
		bra.w	Player_SnapAngle
; ===========================================================================

FindCeilingObj:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		moveq	#$D,d5
		bsr.w	FindFloor
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EFF4
		move.b	#-$80,d3

locret_1EFF4:				
		rts	
; ===========================================================================

Player_FindWallLeft:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall
		pushr.w	d1
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	ost_height(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall
		popr.w	d0
		move.b	#$40,d2
		bra.w	loc_1ECC6
; ===========================================================================

Player_FindWallLeft_Quick_UsePos:				
		move.w	ost_y_pos(a0),d2
		move.w	ost_x_pos(a0),d3

Player_FindWallLeft_Quick:				
		subi.w	#$A,d3
		eori.w	#$F,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall
		move.b	#$40,d2
		bra.w	Player_SnapAngle
; ===========================================================================

FindWallLeftObj:				
		add.w	ost_x_pos(a0),d3
		move.w	ost_y_pos(a0),d2
	if FixBugs
		; Colliding with left walls is erratic with this function.
		; This is caused by a missing instruction to flip collision on the 16x16 block.
		eori.w	#$F,d3
	endc	
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#-$10,a3
		move.w	#$400,d6
		moveq	#$D,d5
		bsr.w	FindWall
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1F0B2
		move.b	#$40,d3

locret_1F0B2:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 79 - lamppost / starpost / checkpoint
; ----------------------------------------------------------------------------

Starpost:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Starpost_Index(pc,d0.w),d1
		jmp	Starpost_Index(pc,d1.w)
; ===========================================================================
Starpost_Index:	index offset(*),,2
		ptr loc_1F0CC					; 0 
		ptr loc_1F12C					; 1
		ptr loc_1F230					; 2
		ptr loc_1F240					; 3
		ptr loc_1F536					; 4
; ===========================================================================

loc_1F0CC:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Starpost,ost_mappings(a0)
		move.w	#tile_Nem_Checkpoint,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo3_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#8,$19(a0)
		move.b	#5,$18(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
    if FixBugs
		; If you spawn a checkpoint in Debug Mode and activate it, then
		; every checkpoint that is spawned with Debug Mode afterwards will be
		; activated too. The cause of the bug is that the spawned checkpoint
		; does not have a respawn entry, but this object fails to check for
		; that before accessing the respawn table.
		beq.s	loc_1F12C
    endc		
		bclr	#7,2(a2,d0.w)
		btst	#0,2(a2,d0.w)
		bne.s	loc_1F120
		move.b	(v_last_lamppost).w,d1
		andi.b	#$7F,d1
		move.b	$28(a0),d2
		andi.b	#$7F,d2
		cmp.b	d2,d1
		bcs.s	loc_1F12C

loc_1F120:				
		bset	#0,2(a2,d0.w)
		move.b	#2,$1C(a0)

loc_1F12C:				
					
		tst.w	(v_debug_active).w
		bne.w	loc_1F230
		lea	($FFFFB000).w,a3
		move.b	(v_last_lamppost).w,d1
		bsr.s	loc_1F154
		tst.w	(f_two_player).w
		beq.w	loc_1F230
		lea	($FFFFB040).w,a3
		move.b	(v_last_lamppost_p2).w,d1
		bsr.s	loc_1F154
		bra.w	loc_1F230
; ===========================================================================

loc_1F154:				
		andi.b	#$7F,d1
		move.b	$28(a0),d2
		andi.b	#$7F,d2
		cmp.b	d2,d1
		bcc.w	loc_1F222
		move.w	ost_x_pos(a3),d0
		sub.w	ost_x_pos(a0),d0
		addi_.w	#8,d0
		cmpi.w	#$10,d0
		bcc.w	locret_1F220
		move.w	ost_y_pos(a3),d0
		sub.w	ost_y_pos(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$68,d0
		bcc.w	locret_1F220
		move.w	#$A1,d0	
		jsr	PlaySound
		jsr	FindFreeObj
		bne.s	loc_1F206
		_move.b	#id_Starpost,ost_id(a1)
		move.b	#6,$24(a1)
		move.w	ost_x_pos(a0),$30(a1)
		move.w	ost_y_pos(a0),$32(a1)
		subi.w	#$14,$32(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#8,$19(a1)
		move.b	#4,$18(a1)
		move.b	#2,$1A(a1)
		move.w	#$20,$36(a1)
		move.w	a0,$3E(a1)
		tst.w	(f_two_player).w
		bne.s	loc_1F206
		cmpi.b	#7,(v_emeralds).w
		beq.s	loc_1F206
		cmpi.w	#$32,(v_rings).w
		bcs.s	loc_1F206
		bsr.w	loc_1F4C4

loc_1F206:				
		move.b	#1,$1C(a0)

loc_1F20C:
		bsr.w	loc_1F298
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
	if FixBugs
		; If you spawn a checkpoint in Debug Mode and activate it, then
		; every checkpoint that is spawned with Debug Mode afterwards will be
		; activated too. The cause of the bug is that the spawned checkpoint
		; does not have a respawn entry, but this object fails to check for
		; that before accessing the respawn table.
		beq.s	locret_1F220
	endc	
		bset	#0,2(a2,d0.w)

locret_1F220:				
		rts	
; ===========================================================================

loc_1F222:				
		tst.b	$1C(a0)
		bne.s	locret_1F22E
		move.b	#2,$1C(a0)

locret_1F22E:				
		rts	
; ===========================================================================

loc_1F230:				
		lea	(byte_1F414).l,a1
		jsrto	AnimateSprite,JmpTo2_AnimateSprite
		jmp	DespawnObject
; ===========================================================================

loc_1F240:				
		subq.w	#1,$36(a0)
		bpl.s	loc_1F262
		movea.w	$3E(a0),a1
		cmpi.b	#id_Starpost,ost_id(a1)
		bne.s	loc_1F25C
		move.b	#2,$1C(a1)
		move.b	#0,$1A(a1)

loc_1F25C:				
		jmp	DeleteObject
; ===========================================================================

loc_1F262:				
		move.b	$26(a0),d0
		subi.b	#$10,$26(a0)
		subi.b	#$40,d0
		jsr	CalcSine
		muls.w	#$C00,d1
		swap	d1
		add.w	$30(a0),d1
		move.w	d1,ost_x_pos(a0)
		muls.w	#$C00,d0
		swap	d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		jmp	DespawnObject
; ===========================================================================

loc_1F298:				
		cmpa.w	#v_ost_player1,a3
		bne.w	loc_1F326
		move.b	$28(a0),(v_last_lamppost).w
		move.b	(v_last_lamppost).w,(v_last_lamppost_lampcopy).w
		move.w	ost_x_pos(a0),(v_x_pos_lampcopy).w
		move.w	ost_y_pos(a0),(v_y_pos_lampcopy).w
		move.w	(v_ost_player1+ost_tile).w,(v_ost_tile_lampcopy).w
		move.w	(v_ost_player1+ost_top_solid_bit).w,(v_ost_top_solid_bit_lampcopy).w
		move.w	(v_rings).w,(v_rings_lampcopy).w
		move.b	(v_ring_reward).w,(v_ring_reward_lampcopy).w
		move.l	(v_time).w,(v_time_lampcopy).w
		move.b	(v_dle_routine).w,(v_dle_routine_lampcopy).w
		move.w	(v_boundary_bottom).w,(v_boundary_bottom_next_lampcopy).w
		move.w	(v_camera_x_pos).w,(v_camera_x_pos_lampcopy).w
		move.w	(v_camera_y_pos).w,(v_camera_y_pos_lampcopy).w
		move.w	(v_bg1_x_pos).w,(v_bg1_x_pos_lampcopy).w
		move.w	(v_bg1_y_pos).w,(v_bg1_y_pos_lampcopy).w
		move.w	(v_bg2_x_pos).w,(v_bg2_x_pos_lampcopy).w
		move.w	(v_bg2_y_pos).w,(v_bg2_y_pos_lampcopy).w

loc_1F306:
		move.w	(v_bg3_x_pos).w,(v_bg3_x_pos_lampcopy).w
		move.w	(v_bg3_y_pos).w,(v_bg3_y_pos_lampcopy).w
		move.w	(v_water_height_normal).w,(v_water_height_normal_lampcopy).w
		move.b	(v_water_routine).w,(v_water_routine_lampcopy).w
		move.b	(f_water_pal_full).w,(f_water_pal_full_lampcopy).w
		rts	
; ===========================================================================

loc_1F326:				
		move.b	$28(a0),(v_last_lamppost_p2).w
		move.b	(v_last_lamppost_p2).w,(v_last_lamppost_p2_lampcopy).w
		move.w	ost_x_pos(a0),(v_x_pos_p2_lampcopy).w
		move.w	ost_y_pos(a0),(v_y_pos_p2_lampcopy).w
		move.w	(v_ost_player2+ost_tile).w,(v_ost_tile_p2_lampcopy).w
		move.w	(v_ost_player2+ost_top_solid_bit).w,(v_ost_top_solid_bit_p2_lampcopy).w
		move.w	(v_rings_p2).w,(v_rings_p2_lampcopy).w
		move.b	(v_ring_reward_p2).w,(v_ring_reward_lampcopy_2p).w

loc_1F356:
		move.l	(v_time_p2).w,(v_time_p2_lampcopy).w
		rts	
; ===========================================================================

loc_1F35E:				
		move.b	(v_last_lamppost_lampcopy).w,(v_last_lamppost).w
		move.w	(v_x_pos_lampcopy).w,($FFFFB008).w
		move.w	(v_y_pos_lampcopy).w,($FFFFB00C).w
		move.w	(v_rings_lampcopy).w,(v_rings).w
		move.b	(v_ring_reward_lampcopy).w,(v_ring_reward).w
		clr.w	(v_rings).w
		clr.b	(v_ring_reward).w
		move.l	(v_time_lampcopy).w,(v_time).w
		move.b	#$3B,(v_time_frames).w
		subq.b	#1,(v_time_sec).w
		move.w	(v_ost_tile_lampcopy).w,(v_ost_player1+ost_tile).w
		move.w	(v_ost_top_solid_bit_lampcopy).w,(v_ost_player1+ost_top_solid_bit).w
		move.b	(v_dle_routine_lampcopy).w,(v_dle_routine).w
		move.b	(v_water_routine_lampcopy).w,(v_water_routine).w
		move.w	(v_boundary_bottom_next_lampcopy).w,(v_boundary_bottom).w
		move.w	(v_boundary_bottom_next_lampcopy).w,(v_boundary_bottom_next).w
		move.w	(v_camera_x_pos_lampcopy).w,(v_camera_x_pos).w
		move.w	(v_camera_y_pos_lampcopy).w,(v_camera_y_pos).w
		move.w	(v_bg1_x_pos_lampcopy).w,(v_bg1_x_pos).w
		move.w	(v_bg1_y_pos_lampcopy).w,(v_bg1_y_pos).w
		move.w	(v_bg2_x_pos_lampcopy).w,(v_bg2_x_pos).w

loc_1F3D6:
		move.w	(v_bg2_y_pos_lampcopy).w,(v_bg2_y_pos).w
		move.w	(v_bg3_x_pos_lampcopy).w,(v_bg3_x_pos).w
		move.w	(v_bg3_y_pos_lampcopy).w,(v_bg3_y_pos).w

loc_1F3E8:
		tst.b	(f_water).w
		beq.s	loc_1F400
		move.w	(v_water_height_normal_lampcopy).w,(v_water_height_normal).w
		move.b	(v_water_routine_lampcopy).w,(v_water_routine).w
		move.b	(f_water_pal_full_lampcopy).w,(f_water_pal_full).w

loc_1F400:				
		tst.b	(v_last_lamppost).w

loc_1F404:
		bpl.s	locret_1F412
		move.w	(v_x_pos_lampcopy).w,d0
		subi.w	#$A0,d0	
		move.w	d0,(v_boundary_left_next).w

locret_1F412:				
		rts	
; ===========================================================================
byte_1F414:	
		dc.b   0					; 0 
		dc.b   6					; 1
		dc.b   0					; 2
		dc.b   9					; 3
		dc.b   0					; 4
		dc.b  $C					; 5
		dc.b  $F					; 6
		dc.b   0					; 7
		dc.b $FF					; 8
		dc.b  $F					; 9
		dc.b   1					; 10
		dc.b $FF					; 11
		dc.b   3					; 12
		dc.b   0					; 13
		dc.b   4					; 14
		dc.b $FF					; 15

; ===========================================================================

		include "mappings/sprite/Starpost.asm"
		include "mappings/sprite/Starpost Star Halo.asm"
		
; ===========================================================================

loc_1F4C4:				
		moveq	#4-1,d1
		moveq	#0,d2

loc_1F4C8:				
		bsr.w	FindNextFreeObj
		bne.s	locret_1F534
		_move.b	ost_id(a0),ost_id(a1)
		move.l	#Map_SpecialEntryStars,ost_mappings(a1)
		move.w	#tile_Nem_Checkpoint,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#8,$24(a1)
		move.w	ost_x_pos(a0),d0
		move.w	d0,ost_x_pos(a1)
		move.w	d0,$30(a1)
		move.w	ost_y_pos(a0),d0
		subi.w	#$30,d0

loc_1F502:
		move.w	d0,ost_y_pos(a1)
		move.w	d0,$32(a1)

loc_1F50A:
		move.b	$18(a0),$18(a1)
		move.b	#8,$19(a1)
		move.b	#1,$1A(a1)
		move.w	#-$400,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		move.w	d2,$34(a1)
		addi.w	#$40,d2
		dbf	d1,loc_1F4C8

locret_1F534:				
		rts	
; ===========================================================================

loc_1F536:				
		move.b	$21(a0),d0
		beq.w	loc_1F554
		andi.b	#1,d0
		beq.s	loc_1F550
		move.b	#1,(f_unused_ss_flag).w
		move.b	#$10,(v_gamemode).w

loc_1F550:				
		clr.b	$21(a0)

loc_1F554:				
		addi.w	#$A,$34(a0)
		move.w	$34(a0),d0
		andi.w	#$FF,d0
		jsr	CalcSine
		asr.w	#5,d0
		asr.w	#3,d1
		move.w	d1,d3
		move.w	$34(a0),d2
		andi.w	#$3E0,d2
		lsr.w	#5,d2
		moveq	#2,d5
		moveq	#0,d4
		cmpi.w	#$10,d2
		ble.s	loc_1F584
		neg.w	d1

loc_1F584:				
		andi.w	#$F,d2
		cmpi.w	#8,d2
		ble.s	loc_1F594
		neg.w	d2
		andi.w	#7,d2

loc_1F594:				
		lsr.w	#1,d2
		beq.s	loc_1F59A
		add.w	d1,d4

loc_1F59A:				
		asl.w	#1,d1
		dbf	d5,loc_1F594
		asr.w	#4,d4
		add.w	d4,d0
		addq.w	#1,$36(a0)
		move.w	$36(a0),d1
		cmpi.w	#$80,d1	
		beq.s	loc_1F5BE
		bgt.s	loc_1F5C4

loc_1F5B4:				
		muls.w	d1,d0
		muls.w	d1,d3
		asr.w	#7,d0
		asr.w	#7,d3
		bra.s	loc_1F5D6
; ===========================================================================

loc_1F5BE:				
		move.b	#-$28,$20(a0)

loc_1F5C4:				
		cmpi.w	#$180,d1
		ble.s	loc_1F5D6
		neg.w	d1
		addi.w	#$200,d1
		bmi.w	JmpTo10_DeleteObject
		bra.s	loc_1F5B4
; ===========================================================================

loc_1F5D6:				
		move.w	$30(a0),d2
		add.w	d3,d2
		move.w	d2,ost_x_pos(a0)
		move.w	$32(a0),d2
		add.w	d0,d2
		move.w	d2,ost_y_pos(a0)
		addq.b	#1,$1B(a0)
		move.b	$1B(a0),d0
		andi.w	#6,d0
		lsr.w	#1,d0
		cmpi.b	#3,d0
		bne.s	loc_1F600
		moveq	#1,d0

loc_1F600:				
		move.b	d0,$1A(a0)
		jmpto	DespawnObject,JmpTo_DespawnObject
; ===========================================================================

JmpTo10_DeleteObject:				
		jmp	DeleteObject


	if Revision<2		
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo_DespawnObject:				
		jmp	DespawnObject
JmpTo2_AnimateSprite:				
		jmp	AnimateSprite
JmpTo3_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer

		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7D - Hidden bonus points (unused Sonic 1 leftover)
; ----------------------------------------------------------------------------

HiddenBonus:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1F632(pc,d0.w),d1
		jmp	off_1F632(pc,d1.w)
; ===========================================================================
off_1F632:	dc.w loc_1F636-off_1F632			; 0 
		dc.w loc_1F6DA-off_1F632			; 1
; ===========================================================================

loc_1F636:				
		moveq	#$10,d2
		move.w	d2,d3
		add.w	d3,d3
		lea	(v_ost_player1).w,a1
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bcc.s	loc_1F6B8
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		add.w	d2,d1
		cmp.w	d3,d1
		bcc.s	loc_1F6B8
		tst.w	(v_debug_active).w
		bne.s	loc_1F6B8
		tst.b	(f_unused_ss_flag).w
		bne.s	loc_1F6B8
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Bonus,ost_mappings(a0)
		move.w	#(vram_Bonus/sizeof_cell)+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo4_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#0,$18(a0)
		move.b	#$10,$19(a0)
		move.b	$28(a0),$1A(a0)
		move.w	#$77,$30(a0)
		move.w	#$C9,d0	
		jsr	PlaySound
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	word_1F6D2(pc,d0.w),d0
		jsr	AddPoints

loc_1F6B8:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	JmpTo11_DeleteObject
		rts	
; ===========================================================================

JmpTo11_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================
word_1F6D2:	
		dc.w	 0					; 0
		dc.w  1000					; 1
		dc.w   100					; 2
		dc.w	 1					; bug: should be 10
; ===========================================================================

loc_1F6DA:				
		subq.w	#1,$30(a0)
		bmi.s	JmpTo12_DeleteObject
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	JmpTo12_DeleteObject
		jmp	DisplaySprite
; ===========================================================================

JmpTo12_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================

		include "mappings/sprite/Hidden Bonus Points (unused).asm"

; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo4_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer

		align 4
	endc

; ===========================================================================		
; ----------------------------------------------------------------------------
; Object 44 - Round bumpers
; ----------------------------------------------------------------------------

Bumper:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1F73E(pc,d0.w),d1
		jmp	off_1F73E(pc,d1.w)
; ===========================================================================
off_1F73E:	
		dc.w loc_1F742-off_1F73E			; 0 
		dc.w loc_1F770-off_1F73E			; 1
; ===========================================================================

loc_1F742:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_RoundBump,ost_mappings(a0)
		move.w	#tile_Nem_RoundBumper+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo5_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#-$29,$20(a0)

loc_1F770:				
		move.b	$21(a0),d0
		beq.w	loc_1F83E
		lea	(v_ost_player1).w,a1
		bclr	#0,$21(a0)
		beq.s	loc_1F786
		bsr.s	loc_1F79C

loc_1F786:				
		lea	(v_ost_player2).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_1F794
		bsr.s	loc_1F79C

loc_1F794:				
		clr.b	$21(a0)
		bra.w	loc_1F83E
; ===========================================================================

loc_1F79C:				
		move.w	ost_x_pos(a0),d1
		move.w	ost_y_pos(a0),d2
		sub.w	ost_x_pos(a1),d1
		sub.w	ost_y_pos(a1),d2
		jsr	(CalcAngle).l
		move.b	(v_frame_counter).w,d1
		andi.w	#3,d1
		add.w	d1,d0
		jsr	CalcSine
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b	$3C(a1)
		move.b	#1,$1C(a0)
		move.w	#$B4,d0	
		jsr	PlaySound
		lea	(v_respawn_list).w,a2

loc_1F800:
		moveq	#0,d0

loc_1F802:
		move.b	$23(a0),d0
		beq.s	loc_1F814

loc_1F808:
		cmpi.b	#-$76,2(a2,d0.w)

loc_1F80E:
		bcc.s	locret_1F83C
		addq.b	#1,2(a2,d0.w)

loc_1F814:				
		moveq	#1,d0
		movea.w	a1,a3
		jsr	AddPoints2
		bsr.w	FindFreeObj
		bne.s	locret_1F83C
		_move.b	#id_Points,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#4,$1A(a1)

locret_1F83C:				
		rts	
; ===========================================================================

loc_1F83E:				
		lea	(off_1F84C).l,a1			; could be PC-relative
		jsrto	AnimateSprite,JmpTo3_AnimateSprite
		jmpto	DespawnObject,JmpTo2_DespawnObject
; ===========================================================================
off_1F84C:	
		dc.w byte_1F850-off_1F84C			; 0 
		dc.w byte_1F853-off_1F84C			; 1
byte_1F850:	dc.b  $F,  0,$FF				; 0 
byte_1F853:	dc.b   3,  1,  0,  1,$FD,  0,  0		; 0 

; ===========================================================================

		include "mappings/sprite/Round Bumper.asm"

; ===========================================================================

	if Revision<2
		nop
	endc
	
	if RemoveJmpTos=0
JmpTo2_DespawnObject:				
		jmp	DespawnObject
JmpTo3_AnimateSprite:				
		jmp	AnimateSprite
JmpTo5_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 24 - ARZ air bubbles
; ----------------------------------------------------------------------------

Bubble:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Bub_Index(pc,d0.w),d1
		jmp	Bub_Index(pc,d1.w)
; ===========================================================================
Bub_Index:	index offset(*),,2
		ptr loc_1F8C2					; 0 
		ptr loc_1F924					; 1
		ptr loc_1F93E					; 2
		ptr loc_1F99E					; 3
		ptr BranchTo_JmpTo15_DeleteObject		; 4
		ptr loc_1F9C0					; 5
; ===========================================================================

loc_1F8C2:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Bub_Main,ost_mappings(a0)
		move.w	#tile_Nem_BubbleGenerator+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo6_Adjust2PArtPointer
		move.b	#render_rel|render_onscreen,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		bpl.s	loc_1F90A
		addq.b	#8,ost_primary_routine(a0)
		andi.w	#$7F,d0
		move.b	d0,$32(a0)
		move.b	d0,$33(a0)

loc_1F900:
		move.b	#6,$1C(a0)
		bra.w	loc_1F9C0
; ===========================================================================

loc_1F90A:				
		move.b	d0,$1C(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	#-$88,ost_y_vel(a0)
		jsr	RandomNumber
		move.b	d0,$26(a0)

loc_1F924:				
		lea	(off_1FBCC).l,a1
		jsr	AnimateSprite
		cmpi.b	#6,$1A(a0)
		bne.s	loc_1F93E
		move.b	#1,$2E(a0)

loc_1F93E:				
					
		move.w	(v_water_height_actual).w,d0
		cmp.w	ost_y_pos(a0),d0
		bcs.s	loc_1F956
		move.b	#6,ost_primary_routine(a0)
		addq.b	#3,$1C(a0)
		bra.w	loc_1F99E
; ===========================================================================

loc_1F956:				
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		andi.w	#$7F,d0
		lea	(Drown_WobbleData).l,a1
		move.b	(a1,d0.w),d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,ost_x_pos(a0)
		tst.b	$2E(a0)
		beq.s	loc_1F988
		bsr.w	loc_1FB02
		cmpi.b	#6,ost_primary_routine(a0)
		beq.s	loc_1F99E

loc_1F988:				
		jsrto	SpeedToPos,JmpTo3_SpeedToPos
		tst.b	ost_render(a0)
		bpl.s	JmpTo13_DeleteObject
		jmp	DisplaySprite
; ===========================================================================

JmpTo13_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================

loc_1F99E:				

		lea	(off_1FBCC).l,a1
		jsr	AnimateSprite
		tst.b	ost_render(a0)
		bpl.s	JmpTo14_DeleteObject
		jmp	DisplaySprite
; ===========================================================================

JmpTo14_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================

    if RemoveJmpTos
JmpTo15_DeleteObject:
    endc

BranchTo_JmpTo15_DeleteObject:				
		jmpto	DeleteObject,JmpTo15_DeleteObject
; ===========================================================================

loc_1F9C0:				
					
		tst.w	$36(a0)
		bne.s	loc_1FA22
		move.w	(v_water_height_actual).w,d0
		cmp.w	ost_y_pos(a0),d0
		bcc.w	loc_1FACE
		tst.b	ost_render(a0)
		bpl.w	loc_1FACE
		subq.w	#1,$38(a0)
		bpl.w	loc_1FAC2
		move.w	#1,$36(a0)

loc_1F9E8:				
		jsr	RandomNumber
		move.w	d0,d1
		andi.w	#7,d0
		cmpi.w	#6,d0
		bcc.s	loc_1F9E8
		move.b	d0,$34(a0)
		andi.w	#$C,d1

loc_1FA02:
		lea	(Bub_BblTypes).l,a1			; could be PC relative

loc_1FA08:
		adda.w	d1,a1

loc_1FA0A:
		move.l	a1,$3C(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_1FA20
		move.b	$33(a0),$32(a0)
		bset	#7,$36(a0)

loc_1FA20:				
		bra.s	loc_1FA2A
; ===========================================================================

loc_1FA22:				
		subq.w	#1,$38(a0)
		bpl.w	loc_1FAC2

loc_1FA2A:				
		jsr	RandomNumber
		andi.w	#$1F,d0
		move.w	d0,$38(a0)
		bsr.w	FindFreeObj
		bne.s	loc_1FAA6
		_move.b	ost_id(a0),ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		jsr	RandomNumber
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		moveq	#0,d0
		move.b	$34(a0),d0
		movea.l	$3C(a0),a2
		move.b	(a2,d0.w),$28(a1)
		btst	#7,$36(a0)
		beq.s	loc_1FAA6
		jsr	RandomNumber
		andi.w	#3,d0
		bne.s	loc_1FA92
		bset	#6,$36(a0)
		bne.s	loc_1FAA6
		move.b	#2,$28(a1)

loc_1FA92:				
		tst.b	$34(a0)
		bne.s	loc_1FAA6
		bset	#6,$36(a0)
		bne.s	loc_1FAA6
		move.b	#2,$28(a1)

loc_1FAA6:				
		subq.b	#1,$34(a0)
		bpl.s	loc_1FAC2
		jsr	RandomNumber
		andi.w	#$7F,d0
		addi.w	#$80,d0	
		add.w	d0,$38(a0)
		clr.w	$36(a0)

loc_1FAC2:				
		lea	(off_1FBCC).l,a1			; could be PC relative
		jsr	AnimateSprite

loc_1FACE:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo15_DeleteObject
		move.w	(v_water_height_actual).w,d0
		cmp.w	ost_y_pos(a0),d0
		bcs.w	JmpTo7_DisplaySprite
		rts	
		
    if RemoveJmpTos
JmpTo7_DisplaySprite:
		jmp	DisplaySprite
    endc		
; ===========================================================================
Bub_BblTypes:	
		dc.b   0					; 0 
		dc.b   1					; 1
		dc.b   0					; 2
		dc.b   0					; 3
		dc.b   0					; 4
		dc.b   0					; 5
		dc.b   1					; 6
		dc.b   0					; 7
		dc.b   0					; 8
		dc.b   0					; 9
		dc.b   0					; 10
		dc.b   1					; 11
		dc.b   0					; 12
		dc.b   1					; 13
		dc.b   0					; 14
		dc.b   0					; 15
		dc.b   1					; 16
		dc.b   0					; 17
; ===========================================================================

loc_1FB02:				
		lea	(v_ost_player1).w,a1
		bsr.s	loc_1FB0C
		lea	(v_ost_player2).w,a1

loc_1FB0C:				
		tst.b	$2A(a1)
		bmi.w	locret_1FBCA
		move.w	ost_x_pos(a1),d0
		move.w	ost_x_pos(a0),d1
		subi.w	#$10,d1
		cmp.w	d0,d1
		bcc.w	locret_1FBCA
		addi.w	#$20,d1
		cmp.w	d0,d1
		bcs.w	locret_1FBCA
		move.w	ost_y_pos(a1),d0
		move.w	ost_y_pos(a0),d1
		cmp.w	d0,d1
		bcc.w	locret_1FBCA
		addi.w	#$10,d1
		cmp.w	d0,d1
		bcs.w	locret_1FBCA
		bsr.w	ResumeMusic
		move.w	#$AD,d0	
		jsr	PlaySound
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		clr.w	ost_inertia(a1)
		move.b	#$15,$1C(a1)
		move.w	#$23,$2E(a1)
		move.b	#0,$3C(a1)
		bclr	#5,$22(a1)
		bclr	#4,$22(a1)
		btst	#2,$22(a1)
		beq.w	loc_1FBB8
		cmpi.b	#1,(a1)
		bne.s	loc_1FBA8
		bclr	#2,$22(a1)
		move.b	#$13,ost_height(a1)
		move.b	#9,$17(a1)
		subq.w	#5,ost_y_pos(a1)
		bra.s	loc_1FBB8
; ===========================================================================

loc_1FBA8:				
		move.b	#$F,ost_height(a1)
		move.b	#9,$17(a1)
		subq.w	#1,ost_y_pos(a1)

loc_1FBB8:				
		cmpi.b	#6,ost_primary_routine(a0)
		beq.s	locret_1FBCA
		move.b	#6,ost_primary_routine(a0)
		addq.b	#3,$1C(a0)

locret_1FBCA:				
		rts	
; ===========================================================================
off_1FBCC:	
		dc.w byte_1FBDA-off_1FBCC			; 0 
		dc.w byte_1FBDF-off_1FBCC			; 1
		dc.w byte_1FBE5-off_1FBCC			; 2
		dc.w byte_1FBEC-off_1FBCC			; 3
		dc.w byte_1FBEC-off_1FBCC			; 4
		dc.w byte_1FBEE-off_1FBCC			; 5
		dc.w byte_1FBF2-off_1FBCC			; 6
byte_1FBDA:	dc.b  $E,  0,  1,  2,$FC			; 0 
byte_1FBDF:	dc.b  $E,  1,  2,  3,  4,$FC			; 0	
byte_1FBE5:	dc.b  $E,  2,  3,  4,  5,  6,$FC		; 0 
byte_1FBEC:	dc.b   4,$FC					; 0 
byte_1FBEE:	dc.b   4,  6,  7,$FC				; 0 
byte_1FBF2:	dc.b  $F, $E, $F,$FF				; 0 

; ===========================================================================

		include	"mappings/sprite/Bubbles.asm"

; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo7_DisplaySprite:				
		jmp	DisplaySprite
JmpTo15_DeleteObject:				
		jmp	DeleteObject
JmpTo6_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo3_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 03 - Collision plane/layer switcher
; ----------------------------------------------------------------------------
PlaneSwitcher:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_1FCF0(pc,d0.w),d1
		jsr	off_1FCF0(pc,d1.w)
		jmp	DespawnObject3
; ===========================================================================
off_1FCF0:	dc.w loc_1FCF6-off_1FCF0			; 0 
		dc.w loc_1FDA4-off_1FCF0			; 1
		dc.w loc_1FEAE-off_1FCF0			; 2
; ===========================================================================

loc_1FCF6:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_1FFB8,ost_mappings(a0)
		move.w	#tile_Nem_Ring+tile_pal2,ost_tile(a0)

loc_1FD08:
		jsrto	Adjust2PArtPointer,JmpTo7_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		btst	#2,d0
		beq.s	loc_1FD70
		addq.b	#2,ost_primary_routine(a0)
		andi.w	#7,d0
		move.b	d0,$1A(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_1FD68(pc,d0.w),$32(a0)
		move.w	ost_y_pos(a0),d1
		lea	(v_ost_player1).w,a1
		cmp.w	ost_y_pos(a1),d1
		bcc.s	loc_1FD54
		move.b	#1,$34(a0)

loc_1FD54:				
		lea	(v_ost_player2).w,a1
		cmp.w	ost_y_pos(a1),d1
		bcc.s	loc_1FD64
		move.b	#1,$35(a0)

loc_1FD64:				
		bra.w	loc_1FEAE
; ===========================================================================
word_1FD68:	
		dc.w   $20					; 0
		dc.w   $40					; 1
		dc.w   $80					; 2
		dc.w  $100					; 3
; ===========================================================================

loc_1FD70:				
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	word_1FD68(pc,d0.w),$32(a0)
		move.w	ost_x_pos(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	ost_x_pos(a1),d1
		bcc.s	loc_1FD94
		move.b	#1,$34(a0)

loc_1FD94:				
		lea	($FFFFB040).w,a1
		cmp.w	ost_x_pos(a1),d1
		bcc.s	loc_1FDA4
		move.b	#1,$35(a0)

loc_1FDA4:				
					
		tst.w	(v_debug_active).w
		bne.w	locret_1FEAC
		move.w	ost_x_pos(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_1FDBE
		lea	($FFFFB040).w,a1

loc_1FDBE:				
		tst.b	(a2)+
		bne.s	loc_1FE38
		cmp.w	ost_x_pos(a1),d1
		bhi.w	locret_1FEAC
		move.b	#1,-1(a2)
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FEAC
		cmp.w	d3,d4
		bge.w	locret_1FEAC
		move.b	$28(a0),d0
		bpl.s	loc_1FDFE
		btst	#1,$22(a1)
		bne.w	locret_1FEAC

loc_1FDFE:				
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_1FE24
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_1FE24
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FE24:				
		andi.w	#tile_draw,ost_tile(a1)
		btst	#5,d0
		beq.s	locret_1FEAC
		ori.w	#tile_hi,ost_tile(a1)
		bra.s	locret_1FEAC
; ===========================================================================

loc_1FE38:				
		cmp.w	ost_x_pos(a1),d1
		bls.w	locret_1FEAC
		move.b	#0,-1(a2)
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FEAC
		cmp.w	d3,d4
		bge.w	locret_1FEAC
		move.b	$28(a0),d0
		bpl.s	loc_1FE74
		btst	#1,$22(a1)
		bne.w	locret_1FEAC

loc_1FE74:				
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_1FE9A
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_1FE9A
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FE9A:				
		andi.w	#tile_draw,ost_tile(a1)
		btst	#6,d0
		beq.s	locret_1FEAC
		ori.w	#tile_hi,ost_tile(a1)

locret_1FEAC:				
		rts	
; ===========================================================================

loc_1FEAE:				
					
		tst.w	(v_debug_active).w
		bne.w	locret_1FFB6
		move.w	ost_y_pos(a0),d1
		lea	$34(a0),a2
		lea	(v_ost_player1).w,a1
		bsr.s	loc_1FEC8
		lea	(v_ost_player2).w,a1

loc_1FEC8:				
		tst.b	(a2)+
		bne.s	loc_1FF42
		cmp.w	ost_y_pos(a1),d1
		bhi.w	locret_1FFB6
		move.b	#1,-1(a2)
		move.w	ost_x_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_x_pos(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FFB6
		cmp.w	d3,d4
		bge.w	locret_1FFB6
		move.b	$28(a0),d0
		bpl.s	loc_1FF08

loc_1FEFE:
		btst	#1,$22(a1)
		bne.w	locret_1FFB6

loc_1FF08:				
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_1FF2E
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_1FF2E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FF2E:				
		andi.w	#tile_draw,ost_tile(a1)
		btst	#5,d0
		beq.s	locret_1FFB6
		ori.w	#tile_hi,ost_tile(a1)
		bra.s	locret_1FFB6
; ===========================================================================

loc_1FF42:				
		cmp.w	ost_y_pos(a1),d1
		bls.w	locret_1FFB6
		move.b	#0,-1(a2)
		move.w	ost_x_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_x_pos(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FFB6
		cmp.w	d3,d4
		bge.w	locret_1FFB6
		move.b	$28(a0),d0
		bpl.s	loc_1FF7E
		btst	#1,$22(a1)
		bne.w	locret_1FFB6

loc_1FF7E:				
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_1FFA4
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_1FFA4
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FFA4:				
		andi.w	#tile_draw,ost_tile(a1)
		btst	#6,d0
		beq.s	locret_1FFB6
		ori.w	#tile_hi,ost_tile(a1)

locret_1FFB6:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1FFB8:				
		dc.w word_1FFC8-Map_1FFB8			; 0
		dc.w word_1FFEA-Map_1FFB8			; 1
		dc.w word_2000C-Map_1FFB8			; 2
		dc.w word_2000C-Map_1FFB8			; 3
		dc.w word_2002E-Map_1FFB8			; 4
		dc.w word_20050-Map_1FFB8			; 5
		dc.w word_20072-Map_1FFB8			; 6
		dc.w word_20072-Map_1FFB8			; 7
word_1FFC8:	dc.w 4			
word_1FFCA:	dc.w $E005,    0,    0,$FFF8			; 0
		dc.w $F005,    0,    0,$FFF8			; 4
		dc.w	 5,    0,    0,$FFF8			; 8
		dc.w $1005,    0,    0,$FFF8			; 12
word_1FFEA:	dc.w 4			
word_1FFEC:	dc.w $C005,    0,    0,$FFF8			; 0
		dc.w $E005,    0,    0,$FFF8			; 4
		dc.w	 5,    0,    0,$FFF8			; 8
		dc.w $3005,    0,    0,$FFF8			; 12
word_2000C:	dc.w 4			
		dc.w $8005,    0,    0,$FFF8			; 0
		dc.w $E005,    0,    0,$FFF8			; 4
		dc.w	 5,    0,    0,$FFF8			; 8
		dc.w $7005,    0,    0,$FFF8			; 12
word_2002E:	dc.w 4			
		dc.w $F805,    0,    0,$FFE0			; 0
		dc.w $F805,    0,    0,$FFF0			; 4
		dc.w $F805,    0,    0,	   0			; 8
		dc.w $F805,    0,    0,	 $10			; 12
word_20050:	dc.w 4			
		dc.w $F805,    0,    0,$FFC0			; 0
		dc.w $F805,    0,    0,$FFE0			; 4
		dc.w $F805,    0,    0,	   0			; 8
		dc.w $F805,    0,    0,	 $30			; 12
word_20072:	dc.w 4			
		dc.w $F805,    0,    0,$FF80			; 0
		dc.w $F805,    0,    0,$FFE0			; 4
		dc.w $F805,    0,    0,	   0			; 8
		dc.w $F805,    0,    0,	 $70			; 12
; ===========================================================================

	if RemoveJmpTos=0
JmpTo7_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4	
	endc	
	  
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0B - CPZ tipping pipe section
; ----------------------------------------------------------------------------

TippingPipe:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_200AA(pc,d0.w),d1
		jmp	off_200AA(pc,d1.w)
; ===========================================================================
off_200AA:	
		dc.w loc_200B0-off_200AA			; 0 
		dc.w loc_20104-off_200AA			; 2
		dc.w loc_20112-off_200AA			; 4
; ===========================================================================

loc_200B0:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_obj0B,ost_mappings(a0)
		move.w	#tile_Nem_CPZDumpingPipePlat+tile_pal4+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo8_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		addq.w	#1,d0
		lsl.w	#4,d0
		move.b	d0,$36(a0)

loc_20104:				
		move.b	(v_vblank_counter_byte).w,d0
		add.b	$36(a0),d0
		bne.s	loc_2013C
		addq.b	#2,ost_primary_routine(a0)

loc_20112:				
		subq.w	#1,$30(a0)
		bpl.s	loc_20130
		move.w	#$7F,$30(a0)
		tst.b	$1C(a0)
		beq.s	loc_2012A
		move.w	$32(a0),$30(a0)

loc_2012A:				
		bchg	#0,$1C(a0)

loc_20130:				
		lea	(Ani_obj0B).l,a1
		jsr	AnimateSprite

loc_2013C:				
		tst.b	$1A(a0)
		bne.s	loc_20156
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#$11,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	DetectPlatform
		jmpto	DespawnObject,JmpTo3_DespawnObject
; ===========================================================================

loc_20156:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	BranchTo_JmpTo3_DespawnObject
		bclr	#3,$22(a0)
		beq.s	loc_20174
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

loc_20174:				
		bclr	#4,$22(a0)
		beq.s	BranchTo_JmpTo3_DespawnObject
		bclr	#3,($FFFFB062).w
		bset	#1,($FFFFB062).w

BranchTo_JmpTo3_DespawnObject:				
		jmpto	DespawnObject, JmpTo3_DespawnObject
; ===========================================================================
Ani_obj0B:	dc.w byte_20190-Ani_obj0B			; 0 
		dc.w byte_20198-Ani_obj0B			; 1
byte_20190:	dc.b   7,  0,  1,  2,  3,  4,$FE,  1		; 0	
byte_20198:	dc.b   7,  4,  3,  2,  1,  0,$FE,  1		; 0	

	include "mappings/sprite/CPZ Dumping Pipe Platform.asm"

; ===========================================================================
  
    if RemoveJmpTos=0
JmpTo3_DespawnObject:				
		jmp	DespawnObject	
JmpTo8_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4		
    endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0C - Small floating platform (unused)
; (used in CPZ in the Nick Arcade prototype)
; ----------------------------------------------------------------------------

CPZBetaPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2021E(pc,d0.w),d1
		jmp	off_2021E(pc,d1.w)
; ===========================================================================
off_2021E:	dc.w loc_20222-off_2021E			; 0 
		dc.w loc_20282-off_2021E			; 1
; ===========================================================================

loc_20222:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_202FA,ost_mappings(a0)
		move.w	#(vram_FloatPlatform/sizeof_cell)+tile_pal4+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo9_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	ost_y_pos(a0),d0
		subi.w	#$10,d0
		move.w	d0,$3A(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		move.b	d0,$3E(a0)
		move.b	d0,$3F(a0)

loc_20282:				
		move.b	$3C(a0),d0
		beq.s	loc_202C0
		cmpi.b	#-$80,d0
		bne.s	loc_202D0
		move.b	$3D(a0),d1
		bne.s	loc_202A2
		subq.b	#1,$3E(a0)
		bpl.s	loc_202A2
		move.b	$3F(a0),$3E(a0)
		bra.s	loc_202D0
; ===========================================================================

loc_202A2:				
		addq.b	#1,$3D(a0)
		move.b	d1,d0
		jsrto	CalcSine,JmpTo5_CalcSine
		addi_.w	#8,d0
		asr.w	#6,d0
		subi.w	#$10,d0
		add.w	$3A(a0),d0
		move.w	d0,ost_y_pos(a0)
		bra.s	loc_202E6
; ===========================================================================

loc_202C0:				
		move.w	(v_vblank_counter_word).w,d1
		andi.w	#$3FF,d1
		bne.s	loc_202D4
		move.b	#1,$3D(a0)

loc_202D0:				
		addq.b	#1,$3C(a0)

loc_202D4:				
		jsrto	CalcSine,JmpTo5_CalcSine
		addi_.w	#8,d1
		asr.w	#4,d1
		add.w	$3A(a0),d1
		move.w	d1,ost_y_pos(a0)

loc_202E6:				
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#9,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	DetectPlatform
		jmpto	DespawnObject,JmpTo4_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_202FA:				
		dc.w word_202FC-Map_202FA			; 0
word_202FC:	dc.w 1			
word_202FE:	dc.w $F80D,  0,	 0,$FFF0			; 0
; ===========================================================================

    if Revision<2
		nop
    endc

    if RemoveJmpTos=0
JmpTo4_DespawnObject	
		jmp	DespawnObject
JmpTo9_Adjust2PArtPointer
		jmp	Adjust2PArtPointer
JmpTo5_CalcSine
		jmp	CalcSine

		align 4
    endc
    
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 12 - Emerald from Hidden Palace Zone (unused)
; ----------------------------------------------------------------------------

GiantEmerald:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2032A(pc,d0.w),d1
		jmp	off_2032A(pc,d1.w)
; ===========================================================================
off_2032A:	
		dc.w loc_2032E-off_2032A			; 0 
		dc.w loc_20356-off_2032A			; 1
; ===========================================================================

loc_2032E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_20382,ost_mappings(a0)
		move.w	#(vram_HPZEmerald/sizeof_cell)+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo10_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.b	#4,$18(a0)

loc_20356:				
		move.w	#$20,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	SolidObject
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo16_DeleteObject
		jmpto	DisplaySprite,JmpTo8_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20382:				
		dc.w word_20384-Map_20382			; 0
word_20384:	dc.w 2			
		dc.w $F00F,    0,    0,$FFE0			; 0
		dc.w $F00F,  $10,    8,	   0			; 4
; ===========================================================================
	
	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos
JmpTo16_DeleteObject:				
		jmp	DeleteObject	
	else
JmpTo8_DisplaySprite:				
		jmp	DisplaySprite
JmpTo16_DeleteObject:				
		jmp	DeleteObject
JmpTo10_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer

		align 4
	endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 13 - HPZ Waterfall (unused)
; ----------------------------------------------------------------------------

WaterfallHiddenPalace:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_203BA(pc,d0.w),d1
		jmp	off_203BA(pc,d1.w)
; ===========================================================================
off_203BA:	
		dc.w loc_203C0-off_203BA			; 0 
		dc.w loc_20486-off_203BA			; 1
		dc.w loc_20510-off_203BA			; 2
; ===========================================================================

loc_203C0:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_20528,ost_mappings(a0)
		move.w	#(vram_HPZWaterfall/sizeof_cell)+tile_pal4+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo11_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#$12,$1A(a0)
		bsr.s	loc_20428
		move.b	#-$60,ost_height(a1)
		bset	#render_useheight_bit,ost_render(a1)
		move.l	a1,$38(a0)

loc_20400:
		move.w	ost_y_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$36(a0)
		cmpi.b	#$10,$28(a0)
		bcs.s	loc_2046C
		bsr.s	loc_20428
		move.l	a1,$3C(a0)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$98,ost_y_pos(a1)
		bra.s	loc_2046C
; ===========================================================================

loc_20428:				
		jsr	FindNextFreeObj
		bne.s	locret_2046A
		_move.b	#id_WaterfallHiddenPalace,ost_id(a1)
		addq.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	#Map_20528,ost_mappings(a1)
		move.w	#(vram_HPZWaterfall/sizeof_cell)+tile_pal4+tile_hi,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo2_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$18(a1)

locret_2046A:				
		rts	
; ===========================================================================

loc_2046C:				
		moveq	#0,d1
		move.b	$28(a0),d1
		move.w	$34(a0),d0
		subi.w	#$78,d0
		lsl.w	#4,d1
		add.w	d1,d0
		move.w	d0,ost_y_pos(a0)
		move.w	d0,$34(a0)

loc_20486:				
		movea.l	$38(a0),a1
		move.b	#$12,$1A(a0)
		move.w	$34(a0),d0
		move.w	(v_water_height_actual).w,d1
		cmp.w	d0,d1
		bcc.s	loc_2049E
		move.w	d1,d0

loc_2049E:				
		move.w	d0,ost_y_pos(a0)
		sub.w	$36(a0),d0
		addi.w	#$80,d0	
		bmi.s	loc_204F0
		lsr.w	#4,d0
		move.w	d0,d1
		cmpi.w	#$F,d0
		bcs.s	loc_204B8
		moveq	#$F,d0

loc_204B8:				
		move.b	d0,$1A(a1)
		cmpi.b	#$10,$28(a0)
		bcs.s	loc_204D8
		movea.l	$3C(a0),a1
		subi.w	#$F,d1
		bcc.s	loc_204D0
		moveq	#0,d1

loc_204D0:				
		addi.w	#$13,d1
		move.b	d1,$1A(a1)

loc_204D8:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo17_DeleteObject
		jmpto	DisplaySprite,JmpTo9_DisplaySprite
; ===========================================================================

loc_204F0:				
		moveq	#$13,d0
		move.b	d0,$1A(a0)
		move.b	d0,$1A(a1)
		move.w	ost_x_pos(a0),d0

loc_204FE:
		andi.w	#-$80,d0

loc_20502:
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo17_DeleteObject
		rts	
; ===========================================================================

loc_20510:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo17_DeleteObject
		jmpto	DisplaySprite,JmpTo9_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20528:				
		dc.w word_20562-Map_20528			; 0
		dc.w word_2056C-Map_20528			; 1
		dc.w word_2057E-Map_20528			; 2
		dc.w word_20590-Map_20528			; 3
		dc.w word_205AA-Map_20528			; 4
		dc.w word_205C4-Map_20528			; 5
		dc.w word_205E6-Map_20528			; 6
		dc.w word_20608-Map_20528			; 7
		dc.w word_20632-Map_20528			; 8
		dc.w word_2065C-Map_20528			; 9
		dc.w word_2068E-Map_20528			; 10
		dc.w word_206C0-Map_20528			; 11
		dc.w word_206FA-Map_20528			; 12
		dc.w word_20734-Map_20528			; 13
		dc.w word_20776-Map_20528			; 14
		dc.w word_207B8-Map_20528			; 15
		dc.w word_20802-Map_20528			; 16
		dc.w word_20802-Map_20528			; 17
		dc.w word_20802-Map_20528			; 18
		dc.w word_20560-Map_20528			; 19
		dc.w word_20814-Map_20528			; 20
		dc.w word_2081E-Map_20528			; 21
		dc.w word_20828-Map_20528			; 22
		dc.w word_2083A-Map_20528			; 23
		dc.w word_2084C-Map_20528			; 24
		dc.w word_20866-Map_20528			; 25
		dc.w word_20880-Map_20528			; 26
		dc.w word_208A2-Map_20528			; 27
word_20560:	dc.w 0			
word_20562:	dc.w 1			
		dc.w $800C,  $10,    8,$FFF0			; 0
word_2056C:	dc.w 2			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880D,  $2D,  $16,$FFF0			; 4
word_2057E:	dc.w 2			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
word_20590:	dc.w 3			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80D,  $2D,  $16,$FFF0			; 8
word_205AA:	dc.w 3			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
word_205C4:	dc.w 4			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80D,  $2D,  $16,$FFF0			; 12
word_205E6:	dc.w 4			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
word_20608:	dc.w 5			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80D,  $2D,  $16,$FFF0			; 16
word_20632:	dc.w 5			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
word_2065C:	dc.w 6			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80D,  $2D,  $16,$FFF0			; 20
word_2068E:	dc.w 6			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80F,    0,    0,$FFF0			; 20
word_206C0:	dc.w 7			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80F,    0,    0,$FFF0			; 20
		dc.w $280D,  $2D,  $16,$FFF0			; 24
word_206FA:	dc.w 7			
word_206FC:	dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80F,    0,    0,$FFF0			; 20
		dc.w $280F,    0,    0,$FFF0			; 24
word_20734:	dc.w 8			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80F,    0,    0,$FFF0			; 20
		dc.w $280F,    0,    0,$FFF0			; 24
		dc.w $480D,  $2D,  $16,$FFF0			; 28
word_20776:	dc.w 8			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80F,    0,    0,$FFF0			; 20
		dc.w $280F,    0,    0,$FFF0			; 24
		dc.w $480F,    0,    0,$FFF0			; 28
word_207B8:	dc.w 9			
		dc.w $800C,  $10,    8,$FFF0			; 0
		dc.w $880F,    0,    0,$FFF0			; 4
		dc.w $A80F,    0,    0,$FFF0			; 8
		dc.w $C80F,    0,    0,$FFF0			; 12
		dc.w $E80F,    0,    0,$FFF0			; 16
		dc.w  $80F,    0,    0,$FFF0			; 20
		dc.w $280F,    0,    0,$FFF0			; 24
		dc.w $480F,    0,    0,$FFF0			; 28
		dc.w $680D,  $2D,  $16,$FFF0			; 32
word_20802:	dc.w 2			
		dc.w $F00A,  $18,   $C,$FFE8			; 0
		dc.w $F00A, $818, $80C,	   0			; 4
word_20814:	dc.w 1			
		dc.w $E00D,  $2D,  $16,$FFF0			; 0
word_2081E:	dc.w 1			
		dc.w $E00F,    0,    0,$FFF0			; 0
word_20828:	dc.w 2			
		dc.w $E00F,    0,    0,$FFF0			; 0
		dc.w	$D,  $2D,  $16,$FFF0			; 4
word_2083A:	dc.w 2			
		dc.w $E00F,    0,    0,$FFF0			; 0
		dc.w	$F,    0,    0,$FFF0			; 4
word_2084C:	dc.w 3			
		dc.w $E00F,    0,    0,$FFF0			; 0
		dc.w	$F,    0,    0,$FFF0			; 4
		dc.w $200D,  $2D,  $16,$FFF0			; 8
word_20866:	dc.w 3			
		dc.w $E00F,    0,    0,$FFF0			; 0
		dc.w	$F,    0,    0,$FFF0			; 4
		dc.w $200F,    0,    0,$FFF0			; 8
word_20880:	dc.w 4			
		dc.w $E00F,    0,    0,$FFF0			; 0
		dc.w	$F,    0,    0,$FFF0			; 4
		dc.w $200F,    0,    0,$FFF0			; 8
		dc.w $400D,  $2D,  $16,$FFF0			; 12
word_208A2:	dc.w 4			
		dc.w $E00F,    0,    0,$FFF0			; 0
		dc.w	$F,    0,    0,$FFF0			; 4
		dc.w $200F,    0,    0,$FFF0			; 8
		dc.w $400F,    0,    0,$FFF0			; 12
; ===========================================================================

	if RemoveJmpTos
JmpTo17_DeleteObject ; JmpTo
		jmp	DeleteObject	
	else
JmpTo9_DisplaySprite:				
		jmp	DisplaySprite
JmpTo17_DeleteObject:				
		jmp	DeleteObject
JmpTo2_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo11_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
	
		align 4
	endc
	
; ===========================================================================	
; ----------------------------------------------------------------------------
; Object 04 - water surface
; ----------------------------------------------------------------------------

WaterSurface:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_208EA(pc,d0.w),d1
		jmp	off_208EA(pc,d1.w)
; ===========================================================================
off_208EA:	dc.w loc_208F0-off_208EA			; 0 
		dc.w loc_20930-off_208EA			; 1
		dc.w loc_209C2-off_208EA			; 2
; ===========================================================================

loc_208F0:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_20A0E,ost_mappings(a0)
		move.w	#tile_Nem_WaterSurface1+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#-$80,$19(a0)
		move.w	ost_x_pos(a0),$30(a0)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_20930
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_20AFE,ost_mappings(a0)
		bra.w	loc_209C2
; ===========================================================================

loc_20930:				
					
		move.w	(v_water_height_actual).w,d1
		move.w	d1,ost_y_pos(a0)
		tst.b	$32(a0)
		bne.s	loc_20952
		btst	#7,(v_joypad_press_actual).w
		beq.s	loc_20962
		addq.b	#3,$1A(a0)
		move.b	#1,$32(a0)
		bra.s	loc_20962
; ===========================================================================

loc_20952:				
		tst.w	(f_pause).w
		bne.s	loc_20962
		move.b	#0,$32(a0)
		subq.b	#3,$1A(a0)

;   if FixBugs=0
;Obj04_Display:
;   endif
loc_20962:	
		; This code should be skipped when the game is paused, but is isn't.
		; This causes the wrong sprite to display when the game is paused.			
		lea	(byte_20982).l,a1			; could be PC relative
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	(a1,d1.w),$1A(a0)
		addq.b	#1,$1B(a0)
		andi.b	#$3F,$1B(a0)
		
;	if FixBugs	
;Obj04_Display:
;	endc		
		jmpto	DisplaySprite,JmpTo10_DisplaySprite
; ===========================================================================
byte_20982:	
		dc.b   0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1 ; 0				
		dc.b   1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2 ; 16
		dc.b   2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1 ; 32
		dc.b   1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0 ; 48
; ===========================================================================

loc_209C2:				
					
		move.w	(v_water_height_actual).w,d1
		move.w	d1,ost_y_pos(a0)
		tst.b	$32(a0)
		bne.s	loc_209E4
		btst	#7,(v_joypad_press_actual).w
		beq.s	loc_209F4
		addq.b	#2,$1A(a0)
		move.b	#1,$32(a0)
		bra.s	BranchTo_JmpTo10_DisplaySprite
; ===========================================================================

loc_209E4:				
		tst.w	(f_pause).w
		bne.s	BranchTo_JmpTo10_DisplaySprite
		move.b	#0,$32(a0)
		subq.b	#2,$1A(a0)

loc_209F4:				
		subq.b	#1,$1E(a0)
		bpl.s	BranchTo_JmpTo10_DisplaySprite
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

BranchTo_JmpTo10_DisplaySprite:				
		jmpto	DisplaySprite,JmpTo10_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20A0E:				
		dc.w word_20A1A-Map_20A0E			; 0
		dc.w word_20A34-Map_20A0E			; 1
		dc.w word_20A4E-Map_20A0E			; 2
		dc.w word_20A68-Map_20A0E			; 3
		dc.w word_20A9A-Map_20A0E			; 4
		dc.w word_20ACC-Map_20A0E			; 5
word_20A1A:	dc.w 3			
		dc.w $F80D,    0,    0,$FFA0			; 0
		dc.w $F80D,    0,    0,$FFE0			; 4
		dc.w $F80D,    0,    0,	 $20			; 8
word_20A34:	dc.w 3			
		dc.w $F80D,    8,    4,$FFA0			; 0
		dc.w $F80D,    8,    4,$FFE0			; 4
		dc.w $F80D,    8,    4,	 $20			; 8
word_20A4E:	dc.w 3			
		dc.w $F80D,  $10,    8,$FFA0			; 0
		dc.w $F80D,  $10,    8,$FFE0			; 4
		dc.w $F80D,  $10,    8,	 $20			; 8
word_20A68:	dc.w 6			
		dc.w $F80D,    0,    0,$FFA0			; 0
		dc.w $F80D,    8,    4,$FFC0			; 4
		dc.w $F80D,    0,    0,$FFE0			; 8
		dc.w $F80D,    8,    4,	   0			; 12
		dc.w $F80D,    0,    0,	 $20			; 16
		dc.w $F80D,    8,    4,	 $40			; 20
word_20A9A:	dc.w 6			
		dc.w $F80D,    8,    4,$FFA0			; 0
		dc.w $F80D,  $10,    8,$FFC0			; 4
		dc.w $F80D,    8,    4,$FFE0			; 8
		dc.w $F80D,  $10,    8,	   0			; 12
		dc.w $F80D,    8,    4,	 $20			; 16
		dc.w $F80D,  $10,    8,	 $40			; 20
word_20ACC:	dc.w 6			
		dc.w $F80D,  $10,    8,$FFA0			; 0
		dc.w $F80D,    8,    4,$FFC0			; 4
		dc.w $F80D,  $10,    8,$FFE0			; 8
		dc.w $F80D,    8,    4,	   0			; 12
		dc.w $F80D,  $10,    8,	 $20			; 16
		dc.w $F80D,    8,    4,	 $40			; 20
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20AFE:				
		dc.w word_20B06-Map_20AFE			; 0
		dc.w word_20B20-Map_20AFE			; 1
		dc.w word_20B3A-Map_20AFE			; 2
		dc.w word_20B6C-Map_20AFE			; 3
word_20B06:	dc.w 3			
		dc.w $FC0D,    0,    0,$FFA0			; 0
		dc.w $FC0D,    0,    0,$FFE0			; 4
		dc.w $FC0D,    0,    0,	 $20			; 8
word_20B20:	dc.w 3			
		dc.w $FC0D,    8,    4,$FFA0			; 0
		dc.w $FC0D,    8,    4,$FFE0			; 4
		dc.w $FC0D,    8,    4,	 $20			; 8
word_20B3A:	dc.w 6			
		dc.w $FC0D,    0,    0,$FFA0			; 0
		dc.w $FC0D,    0,    0,$FFC0			; 4
		dc.w $FC0D,    0,    0,$FFE0			; 8
		dc.w $FC0D,    0,    0,	   0			; 12
		dc.w $FC0D,    0,    0,	 $20			; 16
		dc.w $FC0D,    0,    0,	 $40			; 20
word_20B6C:	dc.w 6			
		dc.w $FC0D,    8,    4,$FFA0			; 0
		dc.w $FC0D,    8,    4,$FFC0			; 4
		dc.w $FC0D,    8,    4,$FFE0			; 8
		dc.w $FC0D,    8,    4,	   0			; 12
		dc.w $FC0D,    8,    4,	 $20			; 16
		dc.w $FC0D,    8,    4,	 $40			; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 49 - EHZ Waterfall
; ----------------------------------------------------------------------------

WaterfallEmeraldHill:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_20BAC(pc,d0.w),d1
		jmp	off_20BAC(pc,d1.w)
; ===========================================================================
off_20BAC:	
		dc.w loc_20BB0-off_20BAC			; 0 
		dc.w loc_20BEA-off_20BAC			; 2
; ===========================================================================

loc_20BB0:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_20C50,ost_mappings(a0)
		move.w	#tile_Nem_Waterfall+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.b	#0,$18(a0)
		move.b	#-$80,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)

loc_20BEA:				
		tst.w	(f_two_player).w
		bne.s	loc_20C04
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo18_DeleteObject

loc_20C04:				
		move.w	ost_x_pos(a0),d1
		move.w	d1,d2
		subi.w	#$40,d1
		addi.w	#$40,d2
		move.b	$28(a0),d3
		move.b	#0,$1A(a0)
		move.w	($FFFFB008).w,d0
		cmp.w	d1,d0
		bcs.s	loc_20C36
		cmp.w	d2,d0
		bcc.s	loc_20C36
		move.b	#1,$1A(a0)
		add.b	d3,$1A(a0)
		jmpto	DisplaySprite,JmpTo10_DisplaySprite
; ===========================================================================

loc_20C36:				
		move.w	($FFFFB048).w,d0
		cmp.w	d1,d0
		bcs.s	loc_20C48
		cmp.w	d2,d0
		bcc.s	loc_20C48
		move.b	#1,$1A(a0)

loc_20C48:				
		add.b	d3,$1A(a0)
		jmpto	DisplaySprite,JmpTo10_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20C50:				
		dc.w word_20C60-Map_20C50			; 0
		dc.w word_20C72-Map_20C50			; 1
		dc.w word_20D04-Map_20C50			; 2
		dc.w word_20D06-Map_20C50			; 3
		dc.w word_20D04-Map_20C50			; 4
		dc.w word_20D28-Map_20C50			; 5
		dc.w word_20C60-Map_20C50			; 6
		dc.w word_20D7A-Map_20C50			; 7
word_20C60:	dc.w 2			
		dc.w $800D,    0,    0,$FFE0			; 0
		dc.w $800D,    0,    0,	   0			; 4
word_20C72:	dc.w   $12					; 0 
		dc.w $800D,    0,    0,$FFE0			; 0
		dc.w $800D,    0,    0,	   0			; 4
		dc.w $800F,    8,    4,$FFE0			; 8
		dc.w $800F,    8,    4,	   0			; 12
		dc.w $A00F,    8,    4,$FFE0			; 16
		dc.w $A00F,    8,    4,	   0			; 20
		dc.w $C00F,    8,    4,$FFE0			; 24
		dc.w $C00F,    8,    4,	   0			; 28
		dc.w $E00F,    8,    4,$FFE0			; 32
		dc.w $E00F,    8,    4,	   0			; 36
		dc.w	$F,    8,    4,$FFE0			; 40
		dc.w	$F,    8,    4,	   0			; 44
		dc.w $200F,    8,    4,$FFE0			; 48
		dc.w $200F,    8,    4,	   0			; 52
		dc.w $400F,    8,    4,$FFE0			; 56
		dc.w $400F,    8,    4,	   0			; 60
		dc.w $600F,    8,    4,$FFE0			; 64
		dc.w $600F,    8,    4,	   0			; 68
word_20D04:	dc.w 0			
word_20D06:	dc.w 4			
		dc.w $E00F,    8,    4,$FFE0			; 0
		dc.w $E00F,    8,    4,	   0			; 4
		dc.w	$F,    8,    4,$FFE0			; 8
		dc.w	$F,    8,    4,	   0			; 12
word_20D28:	dc.w $A			
		dc.w $C00F,    8,    4,$FFE0			; 0
		dc.w $C00F,    8,    4,	   0			; 4
		dc.w $E00F,    8,    4,$FFE0			; 8
		dc.w $E00F,    8,    4,	   0			; 12
		dc.w	$F,    8,    4,$FFE0			; 16
		dc.w	$F,    8,    4,	   0			; 20
		dc.w $200F,    8,    4,$FFE0			; 24
		dc.w $200F,    8,    4,	   0			; 28
		dc.w $400F,    8,    4,$FFE0			; 32
		dc.w $400F,    8,    4,	   0			; 36
word_20D7A:	dc.w $E			
		dc.w $800D,    0,    0,$FFE0			; 0
		dc.w $800D,    0,    0,	   0			; 4
		dc.w $800F,    8,    4,$FFE0			; 8
		dc.w $800F,    8,    4,	   0			; 12
		dc.w $A00F,    8,    4,$FFE0			; 16
		dc.w $A00F,    8,    4,	   0			; 20
		dc.w $C00F,    8,    4,$FFE0			; 24
		dc.w $C00F,    8,    4,	   0			; 28
		dc.w $E00F,    8,    4,$FFE0			; 32
		dc.w $E00F,    8,    4,	   0			; 36
		dc.w	$F,    8,    4,$FFE0			; 40
		dc.w	$F,    8,    4,	   0			; 44
		dc.w $200F,    8,    4,$FFE0			; 48
		dc.w $200F,    8,    4,	   0			; 52
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 31 - invisible	lava marker
; ----------------------------------------------------------------------------

LavaTag:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_20DFA(pc,d0.w),d1
		jmp	off_20DFA(pc,d1.w)
; ===========================================================================
off_20DFA:	
		dc.w loc_20E02-off_20DFA			; 0 
		dc.w loc_20E46-off_20DFA			; 1
byte_20DFE:	
		dc.b $96					; 0
		dc.b $94					; 1
		dc.b $95					; 2
		dc.b   0					; 3
; ===========================================================================

loc_20E02:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	byte_20DFE(pc,d0.w),$20(a0)
		move.l	#Map_20E6C,ost_mappings(a0)
		tst.w	(v_debug_active).w
		beq.s	loc_20E28
		move.l	#Map_20E74,ost_mappings(a0)

loc_20E28:				
		move.w	#tile_Nem_Monitors+tile_hi,ost_tile(a0)	; uses the question mark monitor icon
	if FixBugs
		move.b	#render_rel,ost_render(a0)	
	else
		; 'render_onscreen' should not be set here: this causes
		; this object to become visible when the player dies, because of how
		; 'ExecuteObjects.dead' works.
		move.b	#render_rel|render_onscreen,ost_render(a0)
	endc
		move.b	#-$80,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)

loc_20E46:				
		tst.w	(f_two_player).w
		bne.s	loc_20E60
		move.w	ost_x_pos(a0),d0

loc_20E50:
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo18_DeleteObject

loc_20E60:				
		tst.w	(v_debug_active).w
		beq.s	locret_20E6A
		jsrto	DisplaySprite,JmpTo10_DisplaySprite	; could be a jmpto

locret_20E6A:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20E6C:				
		dc.w word_20E72-Map_20E6C			; 0
		dc.w word_20E72-Map_20E6C			; 1
		dc.w word_20E72-Map_20E6C			; 2
word_20E72:	dc.w 0			
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20E74:				
		dc.w word_20E7A-Map_20E74			; 0
		dc.w word_20E9C-Map_20E74			; 1
		dc.w word_20EBE-Map_20E74			; 2
word_20E7A:	dc.w 4			
		dc.w $E005,  $34,  $1A,$FFE0			; 0
		dc.w $E005,  $34,  $1A,	 $10			; 4
		dc.w $1005,  $34,  $1A,$FFE0			; 8
		dc.w $1005,  $34,  $1A,	 $10			; 12
word_20E9C:	dc.w 4			
		dc.w $E005,  $34,  $1A,$FFC0			; 0
		dc.w $E005,  $34,  $1A,	 $30			; 4
		dc.w $1005,  $34,  $1A,$FFC0			; 8
		dc.w $1005,  $34,  $1A,	 $30			; 12
word_20EBE:	dc.w 4			
		dc.w $E005,  $34,  $1A,$FF80			; 0
		dc.w $E005,  $34,  $1A,	 $70			; 4
		dc.w $1005,  $34,  $1A,$FF80			; 8
		dc.w $1005,  $34,  $1A,	 $70			; 12
; ===========================================================================

Invisibarrier:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_20EEE(pc,d0.w),d1
		jmp	off_20EEE(pc,d1.w)
; ===========================================================================
off_20EEE:	
		dc.w loc_20EF2-off_20EEE			; 0 
		dc.w loc_20F2E-off_20EEE			; 1
; ===========================================================================

loc_20EF2:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_20F66,ost_mappings(a0)
		move.w	#tile_Nem_Monitors+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d0	
		addi.w	#$10,d0
		lsr.w	#1,d0
		move.b	d0,$19(a0)
		andi.w	#$F,d1
		addq.w	#1,d1
		lsl.w	#3,d1
		move.b	d1,ost_height(a0)

loc_20F2E:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	SolidObject_NoRenderChk
		tst.w	(f_two_player).w
		bne.s	locret_20F64
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo18_DeleteObject

locret_20F64:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20F66:				
		dc.w word_20F6C-Map_20F66			; 0
		dc.w word_20F8E-Map_20F66			; 1
		dc.w word_20FB0-Map_20F66			; 2
word_20F6C:	dc.w 4			
		dc.w $F005,  $1C,   $E,$FFF0			; 0
		dc.w $F005,  $1C,   $E,	   0			; 4
		dc.w	 5,  $1C,   $E,$FFF0			; 8
		dc.w	 5,  $1C,   $E,	   0			; 12
word_20F8E:	dc.w 4			
		dc.w $E005,  $1C,   $E,$FFC0			; 0
		dc.w $E005,  $1C,   $E,	 $30			; 4
		dc.w $1005,  $1C,   $E,$FFC0			; 8
		dc.w $1005,  $1C,   $E,	 $30			; 12
word_20FB0:	dc.w 4			
		dc.w $E005,  $1C,   $E,$FF80			; 0
		dc.w $E005,  $1C,   $E,	 $70			; 4
		dc.w $1005,  $1C,   $E,$FF80			; 8
		dc.w $1005,  $1C,   $E,	 $70			; 12
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7C CPZ foreground pylons
; ----------------------------------------------------------------------------

Pylon:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_20FE0(pc,d0.w),d1
		jmp	off_20FE0(pc,d1.w)
; ===========================================================================
off_20FE0:	
		dc.w loc_20FE4-off_20FE0			; 0 
		dc.w loc_21006-off_20FE0			; 2
; ===========================================================================

loc_20FE4:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2103C,ost_mappings(a0)
		move.w	#tile_Nem_Pylon+tile_pal3+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		move.b	#$10,$19(a0)
		move.b	#7,$18(a0)

loc_21006:				
		move.w	(v_camera_x_pos).w,d1
		andi.w	#$3FF,d1
		cmpi.w	#$2E0,d1
		bcc.s	locret_2103A
		asr.w	#1,d1
		move.w	d1,d0
		asr.w	#1,d1
		add.w	d1,d0
		neg.w	d0
		move.w	d0,ost_x_screen(a0)
		move.w	(v_camera_y_pos).w,d1
		asr.w	#1,d1
		andi.w	#$3F,d1
		neg.w	d1
		addi.w	#$100,d1
		move.w	d1,ost_y_screen(a0)
		jmpto	DisplaySprite,JmpTo10_DisplaySprite
; ===========================================================================

locret_2103A:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_2103C:				
		dc.w word_2103E-Map_2103C
word_2103E:	dc.w 9			
		dc.w $800F,$A000,$A000,$FFF0			; 0
		dc.w $A00F,$B000,$B000,$FFF0			; 4
		dc.w $C00F,$A000,$A000,$FFF0			; 8
		dc.w $E00F,$B000,$B000,$FFF0			; 12
		dc.w	$F,$A000,$A000,$FFF0			; 16
		dc.w $200F,$B000,$B000,$FFF0			; 20
		dc.w $400F,$A000,$A000,$FFF0			; 24
		dc.w $600F,$B000,$B000,$FFF0			; 28
		dc.w $7F0F,$A000,$A000,$FFF0			; 32
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 27 - explosion	from a destroyed enemy or monitor
; ----------------------------------------------------------------------------

ExplosionItem:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_21096(pc,d0.w),d1

loc_21092:
		jmp	off_21096(pc,d1.w)
; ===========================================================================
off_21096:	dc.w loc_2109C-off_21096			; 0 
		dc.w loc_210BE-off_21096			; 1
		dc.w loc_21102-off_21096			; 2
; ===========================================================================

loc_2109C:				
		addq.b	#2,ost_primary_routine(a0)
		jsrto	FindFreeObj,JmpTo2_FindFreeObj
		bne.s	loc_210BE
		_move.b	#id_Animals,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	$3E(a0),$3E(a1)

loc_210BE:				
					
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_21120,ost_mappings(a0)
		move.w	#tile_Nem_Explosion,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#1,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#3,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#$C1,d0	
		jsr	PlaySound

loc_21102:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2111C
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		beq.w	JmpTo18_DeleteObject

loc_2111C:				
		jmpto	DisplaySprite,JmpTo10_DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21120:				
		dc.w word_2112A-Map_21120			; 0
		dc.w word_21134-Map_21120			; 1
		dc.w word_2113E-Map_21120			; 2
		dc.w word_21148-Map_21120			; 3
		dc.w word_21152-Map_21120			; 4
word_2112A:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
word_21134:	dc.w 1			
		dc.w $F00F,$2004,$2002,$FFF0			; 0
word_2113E:	dc.w 1			
		dc.w $F00F,$2014,$200A,$FFF0			; 0
word_21148:	dc.w 1			
		dc.w $F00F,$2024,$2012,$FFF0			; 0
word_21152:	dc.w 1			
		dc.w $F00F,$2034,$201A,$FFF0			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 84 - Pinball mode enable/disable
; (used in CNZ and HTZ to determine when Sonic/Tails should stay in a ball)
; ----------------------------------------------------------------------------

PinballMode:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_21170(pc,d0.w),d1
		jsr	off_21170(pc,d1.w)
		jmp	DespawnObject3
; ===========================================================================
off_21170:	
		dc.w loc_21176-off_21170			; 0 
		dc.w loc_21224-off_21170			; 1
		dc.w loc_212F6-off_21170			; 2
; ===========================================================================

loc_21176:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_1FFB8,ost_mappings(a0)
		move.w	#tile_Nem_Ring,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		btst	#2,d0
		beq.s	loc_211F0
		addq.b	#2,ost_primary_routine(a0)
		andi.w	#7,d0
		move.b	d0,$1A(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_211E8(pc,d0.w),$32(a0)
		move.w	ost_y_pos(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	ost_y_pos(a1),d1
		bcc.s	loc_211D4
		move.b	#1,$34(a0)

loc_211D4:				
		lea	($FFFFB040).w,a1
		cmp.w	ost_y_pos(a1),d1
		bcc.s	loc_211E4
		move.b	#1,$35(a0)

loc_211E4:				
		bra.w	loc_212F6
; ===========================================================================
word_211E8:	dc.w   $20					; 0
		dc.w   $40					; 1
		dc.w   $80					; 2
		dc.w  $100					; 3
; ===========================================================================

loc_211F0:				
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	word_211E8(pc,d0.w),$32(a0)
		move.w	ost_x_pos(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	ost_x_pos(a1),d1
		bcc.s	loc_21214

loc_2120E:
		move.b	#1,$34(a0)

loc_21214:				
		lea	($FFFFB040).w,a1
		cmp.w	ost_x_pos(a1),d1
		bcc.s	loc_21224

loc_2121E:
		move.b	#1,$35(a0)

loc_21224:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_21284
		move.w	ost_x_pos(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_21244
		lea	($FFFFB040).w,a1
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.s	locret_21284

loc_21244:				
		tst.b	(a2)+
		bne.s	loc_21286
		cmp.w	ost_x_pos(a1),d1
		bhi.s	locret_21284
		move.b	#1,-1(a2)
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21284
		cmp.w	d3,d4
		bcc.s	locret_21284
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_2127E
		move.b	#1,$39(a1)
		bra.s	loc_212C4
; ===========================================================================

loc_2127E:				
		move.b	#0,$39(a1)

locret_21284:				
		rts	
; ===========================================================================

loc_21286:				
		cmp.w	ost_x_pos(a1),d1
		bls.s	locret_21284
		move.b	#0,-1(a2)
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21284
		cmp.w	d3,d4
		bcc.s	locret_21284
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_212BC
		move.b	#1,$39(a1)
		bra.s	loc_212C4
; ===========================================================================

loc_212BC:				
		move.b	#0,$39(a1)
		rts	
; ===========================================================================

loc_212C4:				
		btst	#2,$22(a1)
		beq.s	loc_212CE
		rts	
; ===========================================================================

loc_212CE:				
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		addq.w	#5,ost_y_pos(a1)
		move.w	#$BE,d0	
		jsr	PlaySound
		rts	
; ===========================================================================

loc_212F6:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_21350
		move.w	ost_y_pos(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_2130E
		lea	($FFFFB040).w,a1

loc_2130E:				
		tst.b	(a2)+
		bne.s	loc_21352
		cmp.w	ost_y_pos(a1),d1
		bhi.s	locret_21350
		move.b	#1,-1(a2)
		move.w	ost_x_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_x_pos(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21350
		cmp.w	d3,d4
		bcc.s	locret_21350
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_2134A
		move.b	#1,$39(a1)
		bra.w	loc_212C4
; ===========================================================================

loc_2134A:				
		move.b	#0,$39(a1)

locret_21350:				
		rts	
; ===========================================================================

loc_21352:				
		cmp.w	ost_y_pos(a1),d1
		bls.s	locret_21350
		move.b	#0,-1(a2)
		move.w	ost_x_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_x_pos(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21350
		cmp.w	d3,d4
		bcc.s	locret_21350
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2138A
		move.b	#1,$39(a1)
		bra.w	loc_212C4
; ===========================================================================

loc_2138A:				
		move.b	#0,$39(a1)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8B - WFZ Cycling palette switcher
; ----------------------------------------------------------------------------

PalSwitcherWingFortress:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_213A6(pc,d0.w),d1
		jsr	off_213A6(pc,d1.w)
		jmp	DespawnObject3
; ===========================================================================
off_213A6:	
		dc.w loc_213B2-off_213A6			; 0 
		dc.w loc_21412-off_213A6			; 2

; ===========================================================================		
word_213AA:	
		dc.w   $20					; 0
		dc.w   $40					; 1
		dc.w   $80					; 2
		dc.w  $100					; 3
; ===========================================================================

loc_213B2:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_1FFB8,ost_mappings(a0)
		move.w	#tile_Nem_Ring,ost_tile(a0)

loc_213C4:
		jsrto	Adjust2PArtPointer,JmpTo12_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	word_213AA(pc,d0.w),$32(a0)
		move.w	ost_x_pos(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	ost_x_pos(a1),d1
		bcc.s	loc_21402
		move.b	#1,$34(a0)

loc_21402:				
		lea	($FFFFB040).w,a1
		cmp.w	ost_x_pos(a1),d1
		bcc.s	loc_21412
		move.b	#1,$35(a0)

loc_21412:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_2146A
		move.w	ost_x_pos(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_2142A
		lea	($FFFFB040).w,a1

loc_2142A:				
		tst.b	(a2)+
		bne.s	loc_2146C
		cmp.w	ost_x_pos(a1),d1
		bhi.s	locret_2146A
		move.b	#1,-1(a2)
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_2146A
		cmp.w	d3,d4
		bcc.s	locret_2146A
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_21464
		move.b	#1,(f_wfz_scz_fire_toggle).w
		rts	
; ===========================================================================

loc_21464:				
		move.b	#0,(f_wfz_scz_fire_toggle).w

locret_2146A:				
		rts	
; ===========================================================================

loc_2146C:				
		cmp.w	ost_x_pos(a1),d1
		bls.s	locret_2146A
		move.b	#0,-1(a2)
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_2146A
		cmp.w	d3,d4
		bcc.s	locret_2146A
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_214A2
		move.b	#1,(f_wfz_scz_fire_toggle).w
		rts	
; ===========================================================================

loc_214A2:				
		move.b	#0,(f_wfz_scz_fire_toggle).w
		rts	
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos
JmpTo18_DeleteObject:				
		jmp	DeleteObject	
	else
JmpTo10_DisplaySprite:				
		jmp	DisplaySprite
JmpTo18_DeleteObject:				
		jmp	DeleteObject
JmpTo2_FindFreeObj:				
		jmp	FindFreeObj
JmpTo12_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4	
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 06 - Rotating cylinder in MTZ and twisting spiral pathway in EHZ
; ----------------------------------------------------------------------------

Spiral:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_214F4(pc,d0.w),d1
		jsr	off_214F4(pc,d1.w)
		tst.w	(f_two_player).w
		beq.s	loc_214DA
		rts	
; ===========================================================================

loc_214DA:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_214EE
		rts	
; ===========================================================================

loc_214EE:				
		jmp	DeleteObject
; ===========================================================================
off_214F4:	dc.w loc_214FA-off_214F4			; 0 
		dc.w loc_21512-off_214F4			; 1
		dc.w loc_21808-off_214F4			; 2
; ===========================================================================

loc_214FA:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#-$30,$19(a0)
		tst.b	$28(a0)
		bpl.s	loc_21512
		addq.b	#2,ost_primary_routine(a0)
		bra.w	loc_21808
; ===========================================================================

loc_21512:				
					
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_21520
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_21520:				
		btst	d6,$22(a0)
		bne.w	loc_215C0
		btst	#1,$22(a1)
		bne.w	locret_215BE
		btst	#3,$22(a1)
		bne.s	loc_21580
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		tst.w	ost_x_vel(a1)
		bmi.s	loc_21556
		cmpi.w	#-$C0,d0
		bgt.s	locret_215BE
		cmpi.w	#-$D0,d0
		blt.s	locret_215BE
		bra.s	loc_21562
; ===========================================================================

loc_21556:				
		cmpi.w	#$C0,d0	
		blt.s	locret_215BE
		cmpi.w	#$D0,d0	
		bgt.s	locret_215BE

loc_21562:				
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1
		bcc.s	locret_215BE
		tst.b	$2A(a1)
		bne.s	locret_215BE
		bsr.w	loc_19E14
		rts	
; ===========================================================================

loc_21580:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		tst.w	ost_x_vel(a1)
		bmi.s	loc_2159C
		cmpi.w	#-$B0,d0
		bgt.s	locret_215BE
		cmpi.w	#-$C0,d0
		blt.s	locret_215BE
		bra.s	loc_215A8
; ===========================================================================

loc_2159C:				
		cmpi.w	#$B0,d0	
		blt.s	locret_215BE
		cmpi.w	#$C0,d0	
		bgt.s	locret_215BE

loc_215A8:				
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1
		bcc.s	locret_215BE
		bsr.w	loc_19E14

locret_215BE:				
		rts	
; ===========================================================================

loc_215C0:				
		move.w	ost_inertia(a1),d0
		bpl.s	loc_215C8
		neg.w	d0

loc_215C8:				
		cmpi.w	#$600,d0
		bcs.s	loc_215EA
		btst	#1,$22(a1)
		bne.s	loc_215EA
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$D0,d0	
		bmi.s	loc_215EA
		cmpi.w	#$1A0,d0
		bcs.s	loc_21602

loc_215EA:				
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		rts	
; ===========================================================================

loc_21602:				
		btst	#3,$22(a1)
		beq.s	locret_215BE
		move.b	byte_21668(pc,d0.w),d1
		ext.w	d1
		move.w	ost_y_pos(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	ost_height(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,ost_y_pos(a1)
		lsr.w	#3,d0
		andi.w	#$3F,d0
		move.b	byte_21634(pc,d0.w),$27(a1)
		rts	
; ===========================================================================
byte_21634:	dc.b	 0,    0,    1,	   1			; 0
		dc.b   $16,  $16,  $16,	 $16			; 4
		dc.b   $2C,  $2C,  $2C,	 $2C			; 8
		dc.b   $42,  $42,  $42,	 $42			; 12
		dc.b   $58,  $58,  $58,	 $58			; 16
		dc.b   $6E,  $6E,  $6E,	 $6E			; 20
		dc.b   $84,  $84,  $84,	 $84			; 24
		dc.b   $9A,  $9A,  $9A,	 $9A			; 28
		dc.b   $B0,  $B0,  $B0,	 $B0			; 32
		dc.b   $C6,  $C6,  $C6,	 $C6			; 36
		dc.b   $DC,  $DC,  $DC,	 $DC			; 40
		dc.b   $F2,  $F2,  $F2,	 $F2			; 44
		dc.b	 1,    1,    0,	   0			; 48
byte_21668:	dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20 ; 0
		dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1F,$1F ; 16
		dc.b $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1E,$1E,$1E ; 32
		dc.b $1E,$1E,$1E,$1E,$1E,$1E,$1D,$1D,$1D,$1D,$1D,$1C,$1C,$1C,$1C,$1B ; 48
		dc.b $1B,$1B,$1B,$1A,$1A,$1A,$19,$19,$19,$18,$18,$18,$17,$17,$16,$16 ; 64
		dc.b $15,$15,$14,$14,$13,$12,$12,$11,$10,$10, $F, $E, $E, $D, $C, $C ; 80
		dc.b  $B, $A, $A,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1 ; 96
		dc.b   0,$FF,$FE,$FE,$FD,$FC,$FC,$FB,$FA,$F9,$F9,$F8,$F7,$F7,$F6,$F6 ; 112
		dc.b $F5,$F5,$F4,$F4,$F3,$F2,$F2,$F1,$F1,$F0,$F0,$EF,$EF,$EE,$EE,$ED ; 128
		dc.b $ED,$ED,$EC,$EB,$EB,$EA,$EA,$E9,$E9,$E8,$E8,$E7,$E7,$E6,$E6,$E5 ; 144
		dc.b $E5,$E4,$E4,$E4,$E3,$E3,$E2,$E2,$E2,$E1,$E1,$E1,$E0,$E0,$E0,$DF ; 160
		dc.b $DF,$DF,$DF,$DE,$DE,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC ; 176
		dc.b $DC,$DC,$DC,$DC,$DC,$DC,$DC,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB ; 192
		dc.b $DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB ; 208
		dc.b $DB,$DB,$DB,$DB,$DC,$DC,$DC,$DC,$DC,$DC,$DC,$DD,$DD,$DD,$DD,$DD ; 224
		dc.b $DD,$DD,$DD,$DE,$DE,$DE,$DF,$DF,$DF,$DF,$E0,$E0,$E0,$E1,$E1,$E1 ; 240
		dc.b $E2,$E2,$E2,$E3,$E3,$E4,$E4,$E4,$E5,$E5,$E6,$E6,$E7,$E7,$E8,$E8 ; 256
		dc.b $E9,$E9,$EA,$EA,$EB,$EB,$EC,$ED,$ED,$EE,$EE,$EF,$F0,$F0,$F1,$F2 ; 272
		dc.b $F2,$F3,$F4,$F5,$F5,$F6,$F7,$F8,$F9,$F9,$FA,$FB,$FC,$FD,$FE,$FF ; 288
		dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, $A, $A, $B, $C, $D ; 304
		dc.b  $D, $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$13,$13,$14,$14,$15 ; 320
		dc.b $15,$16,$16,$17,$17,$18,$18,$18,$19,$19,$19,$19,$1A,$1A,$1A,$1A ; 336
		dc.b $1B,$1B,$1B,$1B,$1C,$1C,$1C,$1C,$1C,$1C,$1D,$1D,$1D,$1D,$1D,$1D ; 352
		dc.b $1D,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F ; 368
		dc.b $1F,$1F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20 ; 384
		dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20 ; 400
; ===========================================================================

loc_21808:				
					
		lea	($FFFFB000).w,a1
		lea	(v_mtz_cylinder_angle_sonic).w,a2
		moveq	#3,d6
		bsr.s	loc_2181E
		lea	($FFFFB040).w,a1
		lea	(v_mtz_cylinder_angle_tails).w,a2
		addq.b	#1,d6

loc_2181E:				
		btst	d6,$22(a0)
		bne.w	loc_2188C
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmpi.w	#-$C0,d0
		blt.s	locret_2188A
		cmpi.w	#$C0,d0	
		bge.s	locret_2188A
		move.w	ost_y_pos(a0),d0
		addi.w	#$3C,d0
		move.w	ost_y_pos(a1),d2
		move.b	ost_height(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	locret_2188A
		cmpi.w	#-$10,d0
		bcs.s	locret_2188A
		cmpi.b	#6,$24(a1)
		bcc.s	locret_2188A
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,ost_y_pos(a1)
		move.b	#1,$29(a1)
		bsr.w	loc_19E14
		move.w	#1,$1C(a1)
		move.b	#0,(a2)
		tst.w	ost_inertia(a1)
		bne.s	locret_2188A
		move.w	#1,ost_inertia(a1)

locret_2188A:				
		rts	
; ===========================================================================

loc_2188C:				
		btst	#1,$22(a1)
		bne.s	loc_218C6
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$C0,d0	
		bmi.s	loc_218A8
		cmpi.w	#$180,d0
		bcs.s	loc_218E0

loc_218A8:				
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		bset	#1,$22(a1)
		rts	
; ===========================================================================

loc_218C6:				
		move.b	(a2),d0
		addi.b	#$20,d0
		cmpi.b	#$40,d0
		bcc.s	loc_218D8
		asr	ost_y_vel(a1)
		bra.s	loc_218A8
; ===========================================================================

loc_218D8:				
		move.w	#0,ost_y_vel(a1)
		bra.s	loc_218A8
; ===========================================================================

loc_218E0:				
		btst	#3,$22(a1)
		beq.s	locret_2188A
		move.b	(a2),d0
		jsrto	CalcSine,JmpTo6_CalcSine
		muls.w	#$2800,d1
		swap	d1
		move.w	ost_y_pos(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	ost_height(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,ost_y_pos(a1)
		move.b	(a2),d0
		move.b	d0,$27(a1)
		addq.b	#4,(a2)
		tst.w	ost_inertia(a1)
		bne.s	locret_2191E
		move.w	#1,ost_inertia(a1)

locret_2191E:				
		rts	
; ===========================================================================


	if RemoveJmpTos=0
JmpTo6_CalcSine:				
		jmp	CalcSine
	
		align 4
	endc	
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 14 - HTZ See-saw
; ----------------------------------------------------------------------------

Seesaw:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2193E(pc,d0.w),d1
		jsr	off_2193E(pc,d1.w)
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo_DespawnObject2
; ===========================================================================
off_2193E:	
		dc.w loc_2194A-off_2193E			; 0 
		dc.w loc_219B8-off_2193E			; 1
		dc.w locret_21A74-off_2193E			; 2
		dc.w loc_21AA2-off_2193E			; 3
		dc.w loc_21AFC-off_2193E			; 4
		dc.w loc_21B94-off_2193E			; 5
; ===========================================================================

loc_2194A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_21CF0,ost_mappings(a0)
		move.w	#tile_Nem_SeeSaw,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo13_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#$30,$19(a0)
		move.w	ost_x_pos(a0),$30(a0)
		tst.b	$28(a0)
		bne.s	loc_219A4
		jsrto	FindNextFreeObj,JmpTo3_FindNextFreeObj
		bne.s	loc_219A4
		_move.b	#id_Seesaw,ost_id(a1)
		addq.b	#6,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	$22(a0),$22(a1)
		move.l	a0,$3C(a1)

loc_219A4:				
		btst	#0,$22(a0)
		beq.s	loc_219B2
		move.b	#2,$1A(a0)

loc_219B2:				
		move.b	$1A(a0),$3A(a0)

loc_219B8:				
		move.b	$3A(a0),d1
		btst	#3,$22(a0)
		beq.s	loc_21A12
		moveq	#2,d1
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_219D8
		neg.w	d0
		moveq	#0,d1

loc_219D8:				
		cmpi.w	#8,d0
		bcc.s	loc_219E0
		moveq	#1,d1

loc_219E0:				
		btst	#4,$22(a0)
		beq.s	loc_21A4A
		moveq	#2,d2
		lea	($FFFFB040).w,a1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_219FC
		neg.w	d0
		moveq	#0,d2

loc_219FC:				
		cmpi.w	#8,d0
		bcc.s	loc_21A04
		moveq	#1,d2

loc_21A04:				
		add.w	d2,d1
		cmpi.w	#3,d1
		bne.s	loc_21A0E
		addq.w	#1,d1

loc_21A0E:				
		lsr.w	#1,d1
		bra.s	loc_21A4A
; ===========================================================================

loc_21A12:				
		btst	#4,$22(a0)
		beq.s	loc_21A38
		moveq	#2,d1
		lea	($FFFFB040).w,a1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_21A2E
		neg.w	d0
		moveq	#0,d1

loc_21A2E:				
		cmpi.w	#8,d0
		bcc.s	loc_21A4A
		moveq	#1,d1
		bra.s	loc_21A4A
; ===========================================================================

loc_21A38:				
		move.w	($FFFFB012).w,d0
		move.w	($FFFFB052).w,d2
		cmp.w	d0,d2
		blt.s	loc_21A46
		move.w	d2,d0

loc_21A46:				
		move.w	d0,$38(a0)

loc_21A4A:				
		bsr.w	loc_21A76
		lea	(byte_21C8E).l,a2
		btst	#0,$1A(a0)
		beq.s	loc_21A62
		lea	(byte_21CBF).l,a2

loc_21A62:				
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		bra.w	SlopeObject
; ===========================================================================

locret_21A74:				
		rts	
; ===========================================================================

loc_21A76:				
		move.b	$1A(a0),d0
		cmp.b	d1,d0
		beq.s	locret_21AA0
		bcc.s	loc_21A82
		addq.b	#2,d0

loc_21A82:				
		subq.b	#1,d0
		move.b	d0,$1A(a0)
		move.b	d1,$3A(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		btst	#1,$1A(a0)
		beq.s	locret_21AA0
		bset	#render_xflip_bit,ost_render(a0)

locret_21AA0:				
		rts	
; ===========================================================================

loc_21AA2:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_21D7C,ost_mappings(a0)
		move.w	#tile_Nem_Sol,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo13_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#-$75,$20(a0)
		move.b	#$C,$19(a0)
		move.w	ost_x_pos(a0),$30(a0)
		addi.w	#$28,ost_x_pos(a0)
		addi.w	#$10,ost_y_pos(a0)
		move.w	ost_y_pos(a0),$34(a0)
		btst	#0,$22(a0)
		beq.s	loc_21AFC
		subi.w	#$50,ost_x_pos(a0)
		move.b	#2,$3A(a0)

loc_21AFC:				
					
		bsr.w	loc_21C66
		movea.l	$3C(a0),a1
		moveq	#0,d0
		move.b	$3A(a0),d0
		sub.b	$3A(a1),d0
		beq.s	loc_21B56
		bcc.s	loc_21B14
		neg.b	d0

loc_21B14:				
		move.w	#-$818,d1
		move.w	#-$114,d2
		cmpi.b	#1,d0
		beq.s	loc_21B3A
		move.w	#-$AF0,d1
		move.w	#-$CC,d2
		cmpi.w	#$A00,$38(a1)
		blt.s	loc_21B3A
		move.w	#-$E00,d1
		move.w	#-$A0,d2

loc_21B3A:				
		move.w	d1,ost_y_vel(a0)
		move.w	d2,ost_x_vel(a0)
		move.w	ost_x_pos(a0),d0
		sub.w	$30(a0),d0
		bcc.s	loc_21B50
		neg.w	ost_x_vel(a0)

loc_21B50:				
		addq.b	#2,ost_primary_routine(a0)
		bra.s	loc_21B94
; ===========================================================================

loc_21B56:				
		lea	(word_21C5C).l,a2
		moveq	#0,d0
		move.b	$1A(a1),d0
		move.w	#$28,d2
		move.w	ost_x_pos(a0),d1
		sub.w	$30(a0),d1
		bcc.s	loc_21B74
		neg.w	d2
		addq.w	#2,d0

loc_21B74:				
		add.w	d0,d0
		move.w	$34(a0),d1
		add.w	(a2,d0.w),d1
		move.w	d1,ost_y_pos(a0)
		add.w	$30(a0),d2
		move.w	d2,ost_x_pos(a0)
		clr.w	ost_y_sub(a0)
		clr.w	ost_x_sub(a0)
		rts	
; ===========================================================================

loc_21B94:				
					
		bsr.w	loc_21C66
		tst.w	ost_y_vel(a0)
		bpl.s	loc_21BB6
		jsrto	ObjectFall,JmpTo_ObjectFall
		move.w	$34(a0),d0
		subi.w	#$2F,d0
		cmp.w	ost_y_pos(a0),d0
		bgt.s	locret_21BB4
		jsrto	ObjectFall,JmpTo_ObjectFall

locret_21BB4:				
		rts	
; ===========================================================================

loc_21BB6:				
		jsrto	ObjectFall,JmpTo_ObjectFall
		movea.l	$3C(a0),a1
		lea	(word_21C5C).l,a2
		moveq	#0,d0
		move.b	$1A(a1),d0
		move.w	ost_x_pos(a0),d1
		sub.w	$30(a0),d1
		bcc.s	loc_21BD6
		addq.w	#2,d0

loc_21BD6:				
		add.w	d0,d0
		move.w	$34(a0),d1
		add.w	(a2,d0.w),d1
		cmp.w	ost_y_pos(a0),d1
		bgt.s	locret_21C2A
		movea.l	$3C(a0),a1
		moveq	#2,d1
		tst.w	ost_x_vel(a0)
		bmi.s	loc_21BF4
		moveq	#0,d1

loc_21BF4:				
		move.b	d1,$3A(a1)
		move.b	d1,$3A(a0)
		cmp.b	$1A(a1),d1
		beq.s	loc_21C1E
		lea	($FFFFB000).w,a2
		bclr	#3,$22(a1)
		beq.s	loc_21C10
		bsr.s	loc_21C2C

loc_21C10:				
		lea	($FFFFB040).w,a2
		bclr	#4,$22(a1)
		beq.s	loc_21C1E
		bsr.s	loc_21C2C

loc_21C1E:				
		clr.w	ost_x_vel(a0)
		clr.w	ost_y_vel(a0)
		subq.b	#2,ost_primary_routine(a0)

locret_21C2A:				
		rts	
; ===========================================================================

loc_21C2C:				
		move.w	ost_y_vel(a0),ost_y_vel(a2)
		neg.w	ost_y_vel(a2)
		bset	#1,$22(a2)
		bclr	#3,$22(a2)
		clr.b	$3C(a2)
		move.b	#$10,$1C(a2)
		move.b	#2,$24(a2)
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================
word_21C5C:	dc.w $FFF8					; 0 
		dc.w $FFE4					; 1
		dc.w $FFD1					; 2
		dc.w $FFE4					; 3
		dc.w $FFF8					; 4
; ===========================================================================

loc_21C66:				
		move.b	(v_frame_counter_low).w,d0
		andi.b	#3,d0
		bne.s	loc_21C76
		bchg	#tile_pal12_bit,ost_tile(a0)

loc_21C76:				
		andi.b	#~render_xflip,ost_render(a0)
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		bcs.s	locret_21C8C
		ori.b	#render_xflip,ost_render(a0)

locret_21C8C:				
		rts	
; ===========================================================================
byte_21C8E:	dc.b $14,$14,$16,$18,$1A,$1C,$1A,$18,$16,$14,$13,$12,$11,$10, $F, $E ; 0
					
		dc.b  $D, $C, $B, $A,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,$FF,$FE ; 16
		dc.b $FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F2,$F2,$F2,$F2 ; 32
		dc.b $F2					; 48
byte_21CBF:	dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5 ; 0
					
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5 ; 16
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5 ; 32
		dc.b   0					; 48
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21CF0:				
		dc.w word_21CF8-Map_21CF0			; 0
		dc.w word_21D3A-Map_21CF0			; 1
		dc.w word_21CF8-Map_21CF0			; 2
		dc.w word_21D3A-Map_21CF0			; 3
word_21CF8:	dc.w 8			
		dc.w $FC05,$4014,$400A,$FFF8			; 0
		dc.w  $C01,$2012,$2009,$FFFC			; 4
		dc.w $E405,$4006,$4003,$FFD0			; 8
		dc.w $EC05,$400A,$4005,$FFE0			; 12
		dc.w $F405,$400A,$4005,$FFF0			; 16
		dc.w $FC05,$400A,$4005,	   0			; 20
		dc.w  $405,$400A,$4005,	 $10			; 24
		dc.w  $C05,$400E,$4007,	 $20			; 28
word_21D3A:	dc.w 8			
		dc.w $FC05,$4014,$400A,$FFF8			; 0
		dc.w  $C01,$2012,$2009,$FFFC			; 4
		dc.w $F405,$4000,$4000,$FFD0			; 8
		dc.w $F405,$4002,$4001,$FFE0			; 12
		dc.w $F405,$4002,$4001,$FFF0			; 16
		dc.w $F405,$4002,$4001,	   0			; 20
		dc.w $F405,$4002,$4001,	 $10			; 24
		dc.w $F405,$4800,$4800,	 $20			; 28
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21D7C:				
		dc.w word_21D80-Map_21D7C			; 0
		dc.w word_21D8A-Map_21D7C			; 1
word_21D80:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
word_21D8A:	dc.w 1			
		dc.w $F805,$2000,$2000,$FFF8			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo3_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo13_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_ObjectFall:				
		jmp	ObjectFall
JmpTo_DespawnObject2:				
		jmp	DespawnObject2
		
		align 4
	endc	

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 16 - HTZ tram/zipline
; ----------------------------------------------------------------------------

Tram:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_21DBA(pc,d0.w),d1
		jmp	off_21DBA(pc,d1.w)
; ===========================================================================
off_21DBA:	
		dc.w loc_21DBE-off_21DBA			; 0 
		dc.w loc_21E10-off_21DBA			; 1
; ===========================================================================

loc_21DBE:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_21F14,ost_mappings(a0)
		move.w	#tile_Nem_HTZZipline+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo14_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.b	#0,$1A(a0)
		move.b	#1,$18(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	#$40,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#3,d0
		move.w	d0,$34(a0)

loc_21E10:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_21E2C
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#-$28,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform,JmpTo3_DetectPlatform
		jmpto	DespawnObject,JmpTo5_DespawnObject
; ===========================================================================

loc_21E2C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_21E3A(pc,d0.w),d1
		jmp	off_21E3A(pc,d1.w)
; ===========================================================================
off_21E3A:	dc.w loc_21E40-off_21E3A			; 0 
		dc.w loc_21E68-off_21E3A			; 1
		dc.w loc_21EC2-off_21E3A			; 2
; ===========================================================================

loc_21E40:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_21E66
		addq.b	#2,$25(a0)
		move.w	#$200,ost_x_vel(a0)
		btst	#0,$22(a0)
		beq.s	loc_21E60
		neg.w	ost_x_vel(a0)

loc_21E60:				
		move.w	#$100,ost_y_vel(a0)

locret_21E66:				
		rts	
; ===========================================================================

loc_21E68:				
		move.w	(v_frame_counter).w,d0
		andi.w	#$F,d0
		bne.s	loc_21E7C
		move.w	#$E4,d0	
		jsr	PlaySound

loc_21E7C:				
		jsrto	SpeedToPos,JmpTo4_SpeedToPos
		subq.w	#1,$34(a0)
		bne.s	locret_21EC0
		addq.b	#2,$25(a0)
		move.b	#2,$1A(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		jsrto	FindNextFreeObj,JmpTo4_FindNextFreeObj
		bne.s	locret_21EC0
		_move.b	#id_Scenery1,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#6,$28(a1)

locret_21EC0:				
		rts	
; ===========================================================================

loc_21EC2:				
		jsrto	SpeedToPos,JmpTo4_SpeedToPos
		addi.w	#$38,ost_y_vel(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcc.s	locret_21F12
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_21F0C
		bclr	#3,$22(a0)
		beq.s	loc_21EF8
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

loc_21EF8:				
		bclr	#4,$22(a0)
		beq.s	loc_21F0C
		bclr	#3,($FFFFB062).w
		bset	#1,($FFFFB062).w

loc_21F0C:				
		move.w	#$4000,ost_x_pos(a0)

locret_21F12:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21F14:				
		dc.w word_21F1E-Map_21F14			; 0
		dc.w word_21F70-Map_21F14			; 1
		dc.w word_21FB2-Map_21F14			; 2
		dc.w word_21FC4-Map_21F14			; 3
		dc.w word_21FDE-Map_21F14			; 4
word_21F1E:	dc.w $A			
		dc.w $C105,    0,    0,$FFE4			; 0
		dc.w $D003,    4,    2,$FFE6			; 4
		dc.w $F003,    4,    2,$FFE6			; 8
		dc.w $1001,    8,    4,$FFE7			; 12
		dc.w $D505,   $A,    5,	  $C			; 16
		dc.w $E003,   $E,    7,	 $11			; 20
		dc.w $1001,  $12,    9,	 $11			; 24
		dc.w	 3,   $E,    7,	 $11			; 28
		dc.w $200D,  $14,   $A,$FFE0			; 32
		dc.w $200D, $814, $80A,	   0			; 36
word_21F70:	dc.w 8			
		dc.w $C105,    0,    0,$FFE4			; 0
		dc.w $D003,    4,    2,$FFE6			; 4
		dc.w $F003,    4,    2,$FFE6			; 8
		dc.w $1001,  $2C,  $16,$FFE6			; 12
		dc.w $D505,   $A,    5,	  $C			; 16
		dc.w $E003,   $E,    7,	 $11			; 20
		dc.w $1801,  $2E,  $17,	 $11			; 24
		dc.w	 3,   $E,    7,	 $11			; 28
word_21FB2:	dc.w 2			
		dc.w $200D,  $14,   $A,$FFE0			; 0
		dc.w $200D, $814, $80A,	   0			; 4
word_21FC4:	dc.w 3			
		dc.w $D805,  $1C,   $E,$FFF8			; 0
		dc.w $E807,  $20,  $10,$FFF8			; 4
		dc.w  $807,  $20,  $10,$FFF8			; 8
word_21FDE:	dc.w 3			
		dc.w $D805,  $28,  $14,$FFF8			; 0
		dc.w $E807, $820, $810,$FFF8			; 4
		dc.w  $807, $820, $810,$FFF8			; 8
; ===========================================================================

	if RemoveJmpTos=0
JmpTo5_DespawnObject:				
		jmp	DespawnObject
JmpTo4_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo14_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo3_DetectPlatform:				
		jmp	DetectPlatform
JmpTo4_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 19 - Platforms in CPZ, OOZ and WFZ
; ----------------------------------------------------------------------------

Platform2:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_22026(pc,d0.w),d1
		jmp	off_22026(pc,d1.w)
; ===========================================================================
off_22026:	dc.w loc_22032-off_22026			; 0 
		dc.w loc_220B8-off_22026			; 1
word_2202A:	dc.w $2000					; 0
		dc.w $1801					; 1
		dc.w $4002					; 2
		dc.w $2003					; 3
; ===========================================================================

loc_22032:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2222A,ost_mappings(a0)
		move.w	#tile_Nem_CPZElevator+tile_pal4,ost_tile(a0)
		cmpi.b	#id_OOZ,(v_zone).w
		bne.s	loc_22052
		move.w	#tile_Nem_OOZElevator+tile_pal4,ost_tile(a0)

loc_22052:				
		cmpi.b	#id_WFZ,(v_zone).w
		bne.s	loc_22060
		move.w	#tile_Nem_WFZFloatingPlatform+tile_pal2+tile_hi,ost_tile(a0)

loc_22060:				
		jsrto	Adjust2PArtPointer,JmpTo15_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$1E,d0
		lea	word_2202A(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$1A(a0)
		move.b	#4,$18(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		andi.b	#$F,$28(a0)
		cmpi.b	#3,$28(a0)
		bne.s	loc_220AA
		btst	#0,$22(a0)
		bne.s	loc_220B2

loc_220AA:				
		cmpi.b	#7,$28(a0)
		bne.s	loc_220B8

loc_220B2:				
		subi.w	#$C0,ost_y_pos(a0)

loc_220B8:				
					
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_220E8
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#$11,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform,JmpTo4_DetectPlatform
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo20_DeleteObject
		jmpto	DisplaySprite,JmpTo11_DisplaySprite
; ===========================================================================

loc_220E8:				
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_220FC(pc,d0.w),d1
		jmp	off_220FC(pc,d1.w)
; ===========================================================================
off_220FC:	dc.w loc_2211C-off_220FC			; 0 
		dc.w loc_22126-off_220FC			; 1
		dc.w loc_22146-off_220FC			; 2
		dc.w loc_22166-off_220FC			; 3
		dc.w loc_22176-off_220FC			; 4
		dc.w locret_22196-off_220FC			; 5
		dc.w loc_22198-off_220FC			; 6
		dc.w loc_22198-off_220FC			; 7
		dc.w loc_221B4-off_220FC			; 8
		dc.w loc_221B4-off_220FC			; 9
		dc.w loc_221B4-off_220FC			; 10
		dc.w loc_221B4-off_220FC			; 11
		dc.w loc_221EE-off_220FC			; 12
		dc.w loc_221EE-off_220FC			; 13
		dc.w loc_221EE-off_220FC			; 14
		dc.w loc_221EE-off_220FC			; 15
; ===========================================================================

loc_2211C:				
		move.b	($FFFFFE68).w,d0
		move.w	#$40,d1
		bra.s	loc_2212E
; ===========================================================================

loc_22126:				
		move.b	($FFFFFE6C).w,d0
		move.w	#$60,d1

loc_2212E:				
		btst	#0,$22(a0)
		beq.s	loc_2213A
		neg.w	d0
		add.w	d1,d0

loc_2213A:				
		move.w	$30(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_22146:				
		move.b	($FFFFFE7C).w,d0
		move.w	#$80,d1	
		btst	#0,$22(a0)
		beq.s	loc_2215A
		neg.w	d0
		add.w	d1,d0

loc_2215A:				
		move.w	$32(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_22166:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_22174
		addq.b	#1,$28(a0)

locret_22174:				
		rts	
; ===========================================================================

loc_22176:				
		jsrto	SpeedToPos,JmpTo5_SpeedToPos
		moveq	#8,d1
		move.w	$32(a0),d0
		subi.w	#$60,d0
		cmp.w	ost_y_pos(a0),d0
		bcc.s	loc_2218C
		neg.w	d1

loc_2218C:				
		add.w	d1,ost_y_vel(a0)
		bne.s	locret_22196
		addq.b	#1,$28(a0)

locret_22196:				
					
		rts	
; ===========================================================================

loc_22198:				
		jsrto	SpeedToPos,JmpTo5_SpeedToPos
		moveq	#8,d1
		move.w	$32(a0),d0
		subi.w	#$60,d0
		cmp.w	ost_y_pos(a0),d0
		bcc.s	loc_221AE
		neg.w	d1

loc_221AE:				
		add.w	d1,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_221B4:				
		move.b	($FFFFFE98).w,d1
		subi.b	#$40,d1
		ext.w	d1
		move.b	($FFFFFE9C).w,d2
		subi.b	#$40,d2
		ext.w	d2
		btst	#2,d0
		beq.s	loc_221D2
		neg.w	d1
		neg.w	d2

loc_221D2:				
		btst	#1,d0
		beq.s	loc_221DC
		neg.w	d1
		exg	d1,d2

loc_221DC:				
		add.w	$30(a0),d1
		move.w	d1,ost_x_pos(a0)
		add.w	$32(a0),d2
		move.w	d2,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_221EE:				
		move.b	($FFFFFE98).w,d1
		subi.b	#$40,d1
		ext.w	d1
		move.b	($FFFFFE9C).w,d2
		subi.b	#$40,d2
		ext.w	d2
		btst	#2,d0
		beq.s	loc_2220C
		neg.w	d1
		neg.w	d2

loc_2220C:				
		btst	#1,d0
		beq.s	loc_22216
		neg.w	d1
		exg	d1,d2

loc_22216:				
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,ost_x_pos(a0)
		add.w	$32(a0),d2
		move.w	d2,ost_y_pos(a0)
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_2222A:				
		dc.w word_22232-Map_2222A			; 0
		dc.w word_22244-Map_2222A			; 1
		dc.w word_22256-Map_2222A			; 2
		dc.w word_22278-Map_2222A			; 3
word_22232:	dc.w 2			
		dc.w $F00F,    0,    0,$FFE0			; 0
		dc.w $F00F, $800, $800,	   0			; 4
word_22244:	dc.w 2			
		dc.w $F00B,    0,    0,$FFE8			; 0
		dc.w $F00B, $800, $800,	   0			; 4
word_22256:	dc.w 4			
		dc.w $F00E,    0,    0,$FFC0			; 0
		dc.w $F00E,   $C,    6,$FFE0			; 4
		dc.w $F00E, $80C, $806,	   0			; 8
		dc.w $F00E, $800, $800,	 $20			; 12
word_22278:	dc.w 2			
		dc.w $F00E,    0,    0,$FFE0			; 0
		dc.w $F00E, $800, $800,	   0			; 4
; ===========================================================================
		
	if Revision<2	
		nop	
	endc
	
	if RemoveJmpTos
JmpTo20_DeleteObject:				
		jmp	DeleteObject	
	else
JmpTo11_DisplaySprite:				
		jmp	DisplaySprite
JmpTo20_DeleteObject:				
		jmp	DeleteObject
JmpTo15_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo4_DetectPlatform:				
		jmp	DetectPlatform
JmpTo5_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1B - CPZ Speed Booster
; ----------------------------------------------------------------------------

SpeedBooster:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_222BA(pc,d0.w),d1
		jmp	off_222BA(pc,d1.w)
; ===========================================================================
off_222BA:	
		dc.w loc_222C2-off_222BA			; 0 
		dc.w loc_222F8-off_222BA			; 1
word_222BE:	dc.w $1000					; 0
		dc.w  $A00					; 1
; ===========================================================================

loc_222C2:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_223E2,ost_mappings(a0)
		move.w	#tile_Nem_Booster+tile_pal4+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo16_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_222BE(pc,d0.w),$30(a0)

loc_222F8:				
		move.b	(v_frame_counter_low).w,d0
		andi.b	#2,d0
		move.b	d0,$1A(a0)
		move.w	ost_x_pos(a0),d0
		move.w	d0,d1
		subi.w	#$10,d0
		addi.w	#$10,d1
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$10,d3
		lea	($FFFFB000).w,a1
		btst	#1,$22(a1)
		bne.s	loc_22354
		move.w	ost_x_pos(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_22354
		cmp.w	d1,d4
		bcc.w	loc_22354
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_22354
		cmp.w	d3,d4
		bcc.w	loc_22354
		move.w	d0,-(sp)
		bsr.w	loc_22388
		move.w	(sp)+,d0

loc_22354:				
		lea	($FFFFB040).w,a1
		btst	#1,$22(a1)
		bne.s	loc_22384
		move.w	ost_x_pos(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_22384
		cmp.w	d1,d4
		bcc.w	loc_22384
		move.w	ost_y_pos(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_22384
		cmp.w	d3,d4
		bcc.w	loc_22384
		bsr.w	loc_22388

loc_22384:				
		jmpto	DespawnObject,JmpTo6_DespawnObject
; ===========================================================================

loc_22388:				
		move.w	ost_x_vel(a1),d0
		btst	#0,$22(a0)
		beq.s	loc_22396
		neg.w	d0

loc_22396:				
		cmpi.w	#$1000,d0
		bge.s	loc_223D8
		move.w	$30(a0),ost_x_vel(a1)
		bclr	#0,$22(a1)
		btst	#0,$22(a0)
		beq.s	loc_223BA
		bset	#0,$22(a1)
		neg.w	ost_x_vel(a1)

loc_223BA:				
		move.w	#$F,$2E(a1)
		move.w	ost_x_vel(a1),ost_inertia(a1)
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)

loc_223D8:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_223E2:				
		dc.w word_223E8-Map_223E2			; 0
		dc.w word_223E8-Map_223E2			; 1
		dc.w word_223FA-Map_223E2			; 2
word_223E8:	dc.w 2			
		dc.w $F805,    0,    0,$FFE8			; 0
		dc.w $F805,    0,    0,	   8			; 4
word_223FA:	dc.w 0			
; ===========================================================================

	if RemoveJmpTos=0
JmpTo6_DespawnObject:				
		jmp	DespawnObject
JmpTo16_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1D - CPZ blue balls
; ----------------------------------------------------------------------------

BlueBalls:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_22416(pc,d0.w),d1
		jmp	off_22416(pc,d1.w)
; ===========================================================================
off_22416:	dc.w loc_22428-off_22416			; 0 
		dc.w loc_224D6-off_22416			; 1
		dc.w loc_224F4-off_22416			; 2
		dc.w loc_224D6-off_22416			; 3
		dc.w loc_22528-off_22416			; 4
		dc.w $FB80					; 0
		dc.w $FB00					; 1
		dc.w $FA00					; 2
		dc.w $F900					; 3
; ===========================================================================

loc_22428:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#-$480,ost_y_vel(a0)
		moveq	#0,d1
		move.b	$28(a0),d1
		move.b	d1,d0
		andi.b	#$F,d1
		moveq	#2,d5
		andi.b	#-$10,d0
		beq.s	loc_22448
		moveq	#6,d5

loc_22448:				
		move.b	$22(a0),d4
		moveq	#0,d2
		movea.l	a0,a1
		bra.s	loc_22458
; ===========================================================================

loc_22452:				
		jsrto	FindNextFreeObj,JmpTo5_FindNextFreeObj
		bne.s	loc_224D0

loc_22458:				
		_move.b	ost_id(a0),ost_id(a1)
		move.b	d5,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	#Map_22576,ost_mappings(a1)
		move.w	#tile_Nem_Droplet+tile_pal4,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo3_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#-$75,$20(a1)
		move.w	ost_x_pos(a1),$38(a1)
		move.w	ost_y_pos(a1),$30(a1)
		move.w	ost_y_vel(a0),ost_y_vel(a1)
		move.w	ost_y_vel(a1),$34(a1)
		move.b	#8,$19(a1)
		move.w	#$60,$3A(a1)
		move.w	#$B,$36(a1)
		andi.b	#1,d4
		beq.s	loc_224CA
		neg.w	$36(a1)
		neg.w	$3A(a1)

loc_224CA:				
		move.w	d2,$32(a1)
		addq.w	#3,d2

loc_224D0:				
		dbf	d1,loc_22452
		rts	
; ===========================================================================

loc_224D6:				
		subq.w	#1,$32(a0)
		bpl.s	loc_224F0
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$3B,$32(a0)
		move.w	#$DA,d0	
		jsr	PlaySoundLocal

loc_224F0:				
		jmpto	DespawnObject,JmpTo7_DespawnObject
; ===========================================================================

loc_224F4:				
		jsrto	SpeedToPos,JmpTo6_SpeedToPos
		move.w	$36(a0),d0
		add.w	d0,ost_x_vel(a0)

loc_22500:
		addi.w	#$18,ost_y_vel(a0)
		bne.s	loc_2250C
		neg.w	$36(a0)

loc_2250C:				
		move.w	$30(a0),d0
		cmp.w	ost_y_pos(a0),d0
		bhi.s	loc_22524
		move.w	$34(a0),ost_y_vel(a0)
		clr.w	ost_x_vel(a0)
		subq.b	#2,ost_primary_routine(a0)

loc_22524:				
		jmpto	DespawnObject,JmpTo7_DespawnObject
; ===========================================================================

loc_22528:				
		jsrto	SpeedToPos,JmpTo6_SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		bne.s	loc_22540
		move.w	$3A(a0),d0
		add.w	$38(a0),d0
		move.w	d0,ost_x_pos(a0)

loc_22540:				
		cmpi.w	#$180,ost_y_vel(a0)
		bne.s	loc_22552
		move.w	#$DA,d0	
		jsr	PlaySoundLocal

loc_22552:				
		move.w	$30(a0),d0
		cmp.w	ost_y_pos(a0),d0
		bhi.s	loc_22572
		move.w	$34(a0),ost_y_vel(a0)
		move.w	$38(a0),ost_x_pos(a0)
		move.w	#$DA,d0	
		jsr	PlaySoundLocal

loc_22572:				
		jmpto	DespawnObject,JmpTo7_DespawnObject
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_22576:				
		dc.w word_22578-Map_22576
word_22578:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo7_DespawnObject:				
		jmp	DespawnObject		
JmpTo5_FindNextFreeObj:				
		jmp	FindNextFreeObj	
JmpTo3_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo6_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 1E - CPZ spin tube
; ----------------------------------------------------------------------------

ChemPlantSpinTube:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_225B8(pc,d0.w),d1
		jsr	off_225B8(pc,d1.w)
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	JmpTo_DespawnObject3
		rts	
		
    if RemoveJmpTos
JmpTo_DespawnObject3:
		jmp	DespawnObject3
    endC		
; ===========================================================================
off_225B8:	dc.w loc_225C2-off_225B8			; 0 
		dc.w loc_225D6-off_225B8			; 1
word_225BC:	dc.w   $A0					; 0
		dc.w  $100					; 1
		dc.w  $120					; 2
; ===========================================================================

loc_225C2:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	$28(a0),d0
		add.w	d0,d0
		andi.w	#6,d0
		move.w	word_225BC(pc,d0.w),$2A(a0)

loc_225D6:				
		lea	($FFFFB000).w,a1
		lea	$2C(a0),a4
		bsr.s	loc_225E8
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4

loc_225E8:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_225F4(pc,d0.w),d0
		jmp	off_225F4(pc,d0.w)
; ===========================================================================
off_225F4:	dc.w loc_225FC-off_225F4			; 0 
		dc.w loc_2271A-off_225F4			; 1
		dc.w loc_227FE-off_225F4			; 2
		dc.w loc_2286A-off_225F4			; 3
; ===========================================================================

loc_225FC:				
		tst.w	(v_debug_active).w
		bne.w	locret_22718
		move.w	$2A(a0),d2
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmp.w	d2,d0
		bcc.w	locret_22718
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		cmpi.w	#$80,d1	
		bcc.w	locret_22718
		cmpi.b	#$20,$1C(a1)
		beq.w	locret_22718
		moveq	#0,d3
		cmpi.w	#$A0,d2	
		beq.s	loc_22648
		moveq	#8,d3
		cmpi.w	#$120,d2
		beq.s	loc_22648
		moveq	#4,d3
		neg.w	d0
		addi.w	#$100,d0

loc_22648:				
		cmpi.w	#$80,d0	
		bcs.s	loc_2267E
		moveq	#0,d2
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$F,d0
		move.b	byte_2266E(pc,d0.w),d2
		cmpi.b	#2,d2
		bne.s	loc_22688
		move.b	(v_time_sec).w,d2
		andi.b	#1,d2
		bra.s	loc_22688
; ===========================================================================
byte_2266E:	dc.b   2					; 0
		dc.b   2					; 1
		dc.b   2					; 2
		dc.b   2					; 3
		dc.b   2					; 4
		dc.b   2					; 5
		dc.b   2					; 6
		dc.b   2					; 7
		dc.b   2					; 8
		dc.b   2					; 9
		dc.b   0					; 10
		dc.b   2					; 11
		dc.b   0					; 12
		dc.b   1					; 13
		dc.b   2					; 14
		dc.b   1					; 15
; ===========================================================================

loc_2267E:				
		moveq	#2,d2
		cmpi.w	#$40,d1
		bcc.s	loc_22688
		moveq	#3,d2

loc_22688:				
		move.b	d2,1(a4)
		add.w	d3,d2
		add.w	d2,d2
		andi.w	#$1E,d2
		lea	off_22980(pc),a2
		adda.w	(a2,d2.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4
		add.w	ost_x_pos(a0),d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		add.w	ost_y_pos(a0),d5
		move.w	d5,ost_y_pos(a1)
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		add.w	ost_x_pos(a0),d4
		move.w	(a2)+,d5
		add.w	ost_y_pos(a0),d5
		addq.b	#2,(a4)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		move.b	#0,$3C(a1)
		bclr	#tile_hi_bit,ost_tile(a1)
		move.w	#$800,d2
		bsr.w	loc_22902
		move.w	#$BE,d0	
		jsr	PlaySound

locret_22718:				
		rts	
; ===========================================================================

loc_2271A:				
		subq.b	#1,2(a4)
		bpl.s	loc_2275E
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		add.w	ost_x_pos(a0),d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		add.w	ost_y_pos(a0),d5
		move.w	d5,ost_y_pos(a1)
		tst.b	1(a4)
		bpl.s	loc_22740
		subq.w	#8,a2

loc_22740:				
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_22784
		move.w	(a2)+,d4
		add.w	ost_x_pos(a0),d4
		move.w	(a2)+,d5
		add.w	ost_y_pos(a0),d5
		move.w	#$800,d2
		bra.w	loc_22902
; ===========================================================================

loc_2275E:				
		move.l	ost_x_pos(a1),d2
		move.l	ost_y_pos(a1),d3
		move.w	ost_x_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,ost_x_pos(a1)
		move.l	d3,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_22784:				
		cmpi.b	#4,1(a4)
		bcc.s	loc_227A6
		move.b	$28(a0),d0
		andi.w	#$FC,d0	
		add.b	1(a4),d0
		move.b	#4,1(a4)
		move.b	byte_227BE(pc,d0.w),d0
		bne.w	loc_22892

loc_227A6:				
		andi.w	#$7FF,ost_y_pos(a1)
		move.b	#6,(a4)
		clr.b	$2A(a1)
		move.w	#$BC,d0	
		jmp	PlaySound
; ===========================================================================
byte_227BE:
		dc.b   2,  1,  0,  0
		dc.b  -1,  3,  0,  0
		dc.b   4, -2,  0,  0
		dc.b  -3, -4,  0,  0
		dc.b  -5, -5,  0,  0
		dc.b   7,  6,  0,  0
		dc.b  -7, -6,  0,  0
		dc.b   8,  9,  0,  0
		dc.b  -8, -9,  0,  0
		dc.b  11, 10,  0,  0
		dc.b  12,  0,  0,  0
		dc.b -11,-10,  0,  0
		dc.b -12,  0,  0,  0
		dc.b   0, 13,  0,  0
		dc.b -13, 14,  0,  0
		dc.b   0,-14,  0,  0
; ===========================================================================

loc_227FE:				
		subq.b	#1,2(a4)
		bpl.s	loc_22832
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		move.w	d5,ost_y_pos(a1)
		tst.b	1(a4)
		bpl.s	loc_2281C
		subq.w	#8,a2

loc_2281C:				
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_22858
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$800,d2
		bra.w	loc_22902
; ===========================================================================

loc_22832:				
		move.l	ost_x_pos(a1),d2
		move.l	ost_y_pos(a1),d3
		move.w	ost_x_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,ost_x_pos(a1)
		move.l	d3,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_22858:				
		andi.w	#$7FF,ost_y_pos(a1)
		clr.b	(a4)
		move.w	#$BC,d0	
		jmp	PlaySound
; ===========================================================================

loc_2286A:				
		move.w	$2A(a0),d2
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		cmp.w	d2,d0
		bcc.w	loc_2288E
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		cmpi.w	#$80,d1	
		bcc.w	loc_2288E
		rts	
; ===========================================================================

loc_2288E:				
		clr.b	(a4)
		rts	
; ===========================================================================

loc_22892:				
		bpl.s	loc_228C4
		neg.b	d0
		move.b	#-4,1(a4)
		add.w	d0,d0
		lea	(off_22E88).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d0
		subq.w	#4,d0
		move.w	d0,4(a4)
		lea	(a2,d0.w),a2
		move.w	(a2)+,d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		move.w	d5,ost_y_pos(a1)
		subq.w	#8,a2
		bra.s	loc_228E4
; ===========================================================================

loc_228C4:				
		add.w	d0,d0
		lea	(off_22E88).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		move.w	d5,ost_y_pos(a1)

loc_228E4:				
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$800,d2
		bsr.w	loc_22902

loc_228F4:
		move.w	#$BE,d0	
		jsr	PlaySound
		addq.b	#2,(a4)
		rts	
; ===========================================================================

loc_22902:				
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	ost_x_pos(a1),d0
		bge.s	loc_22912
		neg.w	d0
		neg.w	d2

loc_22912:				
		moveq	#0,d1
		move.w	d5,d1
		sub.w	ost_y_pos(a1),d1
		bge.s	loc_22920
		neg.w	d1
		neg.w	d3

loc_22920:				
		cmp.w	d0,d1
		bcs.s	loc_22952
		moveq	#0,d1
		move.w	d5,d1
		sub.w	ost_y_pos(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	ost_x_pos(a1),d0
		beq.s	loc_2293E
		swap	d0
		divs.w	d1,d0

loc_2293E:				
		move.w	d0,ost_x_vel(a1)
		move.w	d3,ost_y_vel(a1)
		tst.w	d1
		bpl.s	loc_2294C
		neg.w	d1

loc_2294C:				
		move.w	d1,2(a4)
		rts	
; ===========================================================================

loc_22952:				
		moveq	#0,d0
		move.w	d4,d0
		sub.w	ost_x_pos(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	ost_y_pos(a1),d1
		beq.s	loc_2296C
		swap	d1
		divs.w	d0,d1

loc_2296C:				
		move.w	d1,ost_y_vel(a1)
		move.w	d2,ost_x_vel(a1)
		tst.w	d0
		bpl.s	loc_2297A
		neg.w	d0

loc_2297A:				
		move.w	d0,2(a4)
		rts	
; ===========================================================================
off_22980:	dc.w word_22998-off_22980			; 0 
		dc.w word_22A0E-off_22980			; 1
		dc.w word_22A6C-off_22980			; 2
		dc.w word_22AE2-off_22980			; 3
		dc.w word_22B40-off_22980			; 4
		dc.w word_22BB2-off_22980			; 5
		dc.w word_22C10-off_22980			; 6
		dc.w word_22C82-off_22980			; 7
		dc.w word_22CE0-off_22980			; 8
		dc.w word_22D56-off_22980			; 9
		dc.w word_22DB4-off_22980			; 10
		dc.w word_22E2A-off_22980			; 11
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
word_22998:	dc.w   $74,  $90,  $10,	 $90,  $70,  $40,  $70,	 $35 ; 0	
		dc.w   $6F,  $28,  $6A,	 $1E,  $62,  $15,  $58,	 $11 ; 8
		dc.w   $4A,  $10,  $40,	 $11,  $35,  $15,  $27,	 $1E ; 16
		dc.w   $1E,  $28,  $15,	 $35,  $11,  $40,  $10,	 $50 ; 24
		dc.w   $10,  $5E,  $12,	 $68,  $18,  $6D,  $24,	 $70 ; 32
		dc.w   $30,  $6D,  $3D,	 $68,  $48,  $5E,  $4E,	 $50 ; 40
		dc.w   $50,  $30,  $50,	 $22,  $52,  $17,  $5A,	 $11 ; 48
		dc.w   $63,  $10,  $70				; 56
word_22A0E:	dc.w   $5C,  $90,  $10,	 $90,  $70,  $40,  $70,	 $2E ; 0	
		dc.w   $6E,  $1D,  $62,	 $13,  $53,  $10,  $40,	 $13 ; 8
		dc.w   $2D,  $1D,  $1E,	 $2E,  $13,  $40,  $10,	 $58 ; 16
		dc.w   $10,  $64,  $14,	 $6C,  $1A,  $70,  $28,	 $6C ; 24
		dc.w   $36,  $64,  $3C,	 $58,  $40,  $4B,  $3D,	 $40 ; 32
		dc.w   $38,  $36,  $32,	 $28,  $30,  $10,  $30	;	40
word_22A6C:	dc.w   $74,  $10,  $70,	 $11,  $63,  $17,  $5A,	 $22 ; 0	
		dc.w   $52,  $30,  $50,	 $50,  $50,  $5E,  $4E,	 $68 ; 8
		dc.w   $48,  $6D,  $3D,	 $70,  $30,  $6D,  $24,	 $68 ; 16
		dc.w   $18,  $5E,  $12,	 $50,  $10,  $40,  $10,	 $35 ; 24
		dc.w   $11,  $28,  $15,	 $1E,  $1E,  $15,  $27,	 $11 ; 32
		dc.w   $35,  $10,  $40,	 $11,  $4A,  $15,  $58,	 $1E ; 40
		dc.w   $62,  $28,  $6A,	 $35,  $6F,  $40,  $70,	 $90 ; 48
		dc.w   $70,  $90,  $10				; 56
word_22AE2:	dc.w   $5C,  $10,  $30,	 $28,  $30,  $36,  $32,	 $40 ; 0	
		dc.w   $38,  $4B,  $3D,	 $58,  $40,  $64,  $3C,	 $6C ; 8
		dc.w   $36,  $70,  $28,	 $6C,  $1A,  $64,  $14,	 $58 ; 16
		dc.w   $10,  $40,  $10,	 $2E,  $13,  $1D,  $1E,	 $13 ; 24
		dc.w   $2D,  $10,  $40,	 $13,  $53,  $1D,  $62,	 $2E ; 32
		dc.w   $6E,  $40,  $70,	 $90,  $70,  $90,  $10	;	40
word_22B40:	dc.w   $70,  $10,  $10,	 $10,  $70,  $C0,  $70,	 $CA ; 0	
		dc.w   $6F,  $D4,  $6C,	 $DB,  $68,  $E3,  $62,	 $E8 ; 8
		dc.w   $5A,  $ED,  $52,	 $EF,  $48,  $F0,  $40,	 $EF ; 16
		dc.w   $36,  $ED,  $2E,	 $E8,  $26,  $E3,  $1E,	 $DB ; 24
		dc.w   $17,  $D4,  $14,	 $CA,  $12,  $C0,  $10,	 $B7 ; 32
		dc.w   $11,  $AF,  $12,	 $A6,  $17,  $9E,  $1E,	 $97 ; 40
		dc.w   $26,  $93,  $2E,	 $91,  $36,  $90,  $40,	 $90 ; 48
		dc.w   $70					; 56
word_22BB2:	dc.w   $5C,  $10,  $10,	 $10,  $70,  $C0,  $70,	 $D2 ; 0	
		dc.w   $6E,  $E3,  $62,	 $ED,  $53,  $F0,  $40,	 $ED ; 8
		dc.w   $2D,  $E3,  $1E,	 $D2,  $13,  $C0,  $10,	 $A8 ; 16
		dc.w   $10,  $9C,  $14,	 $94,  $1A,  $90,  $28,	 $94 ; 24
		dc.w   $36,  $9C,  $3C,	 $A8,  $40,  $B5,  $3D,	 $C0 ; 32
		dc.w   $38,  $CA,  $32,	 $D8,  $30,  $F0,  $30	;	40
word_22C10:	dc.w   $70,  $90,  $70,	 $90,  $40,  $91,  $36,	 $93 ; 0	
		dc.w   $2E,  $97,  $26,	 $9E,  $1E,  $A6,  $17,	 $AF ; 8
		dc.w   $12,  $B7,  $11,	 $C0,  $10,  $CA,  $12,	 $D4 ; 16
		dc.w   $14,  $DB,  $17,	 $E3,  $1E,  $E8,  $26,	 $ED ; 24
		dc.w   $2E,  $EF,  $36,	 $F0,  $40,  $EF,  $48,	 $ED ; 32
		dc.w   $52,  $E8,  $5A,	 $E3,  $62,  $DB,  $68,	 $D4 ; 40
		dc.w   $6C,  $CA,  $6F,	 $C0,  $70,  $10,  $70,	 $10 ; 48
		dc.w   $10					; 56
word_22C82:	dc.w   $5C,  $F0,  $30,	 $D8,  $30,  $CA,  $32,	 $C0 ; 0	
		dc.w   $38,  $B5,  $3D,	 $A8,  $40,  $9C,  $3C,	 $94 ; 8
		dc.w   $36,  $90,  $28,	 $94,  $1A,  $9C,  $14,	 $A8 ; 16
		dc.w   $10,  $C0,  $10,	 $D2,  $13,  $E3,  $1E,	 $ED ; 24
		dc.w   $2D,  $F0,  $40,	 $ED,  $53,  $E3,  $62,	 $D2 ; 32
		dc.w   $6E,  $C0,  $70,	 $10,  $70,  $10,  $10	;	40
word_22CE0:	dc.w   $74, $110,  $10,	$110,  $70,  $40,  $70,	 $35 ; 0	
		dc.w   $6F,  $28,  $6A,	 $1E,  $62,  $15,  $58,	 $11 ; 8
		dc.w   $4A,  $10,  $40,	 $11,  $35,  $15,  $27,	 $1E ; 16
		dc.w   $1E,  $28,  $15,	 $35,  $11,  $40,  $10,	 $50 ; 24
		dc.w   $10,  $5E,  $12,	 $68,  $18,  $6D,  $24,	 $70 ; 32
		dc.w   $30,  $6D,  $3D,	 $68,  $48,  $5E,  $4E,	 $50 ; 40
		dc.w   $50,  $30,  $50,	 $22,  $52,  $17,  $5A,	 $11 ; 48
		dc.w   $63,  $10,  $70				; 56
word_22D56:	dc.w   $5C, $110,  $10,	$110,  $70,  $40,  $70,	 $2E ; 0	
		dc.w   $6E,  $1D,  $62,	 $13,  $53,  $10,  $40,	 $13 ; 8
		dc.w   $2D,  $1D,  $1E,	 $2E,  $13,  $40,  $10,	 $58 ; 16
		dc.w   $10,  $64,  $14,	 $6C,  $1A,  $70,  $28,	 $6C ; 24
		dc.w   $36,  $64,  $3C,	 $58,  $40,  $4B,  $3D,	 $40 ; 32
		dc.w   $38,  $36,  $32,	 $28,  $30,  $10,  $30	;	40
word_22DB4:	dc.w   $74,  $10,  $70,	 $11,  $63,  $17,  $5A,	 $22 ; 0	
		dc.w   $52,  $30,  $50,	 $50,  $50,  $5E,  $4E,	 $68 ; 8
		dc.w   $48,  $6D,  $3D,	 $70,  $30,  $6D,  $24,	 $68 ; 16
		dc.w   $18,  $5E,  $12,	 $50,  $10,  $40,  $10,	 $35 ; 24
		dc.w   $11,  $28,  $15,	 $1E,  $1E,  $15,  $27,	 $11 ; 32
		dc.w   $35,  $10,  $40,	 $11,  $4A,  $15,  $58,	 $1E ; 40
		dc.w   $62,  $28,  $6A,	 $35,  $6F,  $40,  $70,	$110 ; 48
		dc.w   $70, $110,  $10				; 56
word_22E2A:	dc.w   $5C,  $10,  $30,	 $28,  $30,  $36,  $32,	 $40 ; 0	
		dc.w   $38,  $4B,  $3D,	 $58,  $40,  $64,  $3C,	 $6C ; 8
		dc.w   $36,  $70,  $28,	 $6C,  $1A,  $64,  $14,	 $58 ; 16
		dc.w   $10,  $40,  $10,	 $2E,  $13,  $1D,  $1E,	 $13 ; 24
		dc.w   $2D,  $10,  $40,	 $13,  $53,  $1D,  $62,	 $2E ; 32
		dc.w   $6E,  $40,  $70,	$110,  $70, $110,  $10	;	40
off_22E88:	dc.w byte_22EA6-off_22E88			; 0 
		dc.w byte_22EA6-off_22E88			; 1
		dc.w byte_22EBC-off_22E88			; 2
		dc.w byte_22EE6-off_22E88			; 3
		dc.w byte_22EFC-off_22E88			; 4
		dc.w byte_22F12-off_22E88			; 5
		dc.w byte_22F28-off_22E88			; 6
		dc.w byte_22F3A-off_22E88			; 7
		dc.w byte_22F54-off_22E88			; 8
		dc.w byte_22F6E-off_22E88			; 9
		dc.w word_22F80-off_22E88			; 10
		dc.w word_22F92-off_22E88			; 11
		dc.w word_22FAC-off_22E88			; 12
		dc.w word_22FC2-off_22E88			; 13
		dc.w word_22FD0-off_22E88			; 14
byte_22EA6:	dc.b   0,$14,  7,$90,  3,$B0,  7,$10,  3,$B0,  7,$10,  6,$B0, $A,$90 ; 0
					
		dc.b   6,$B0, $A,$90,  6,$70			; 16
byte_22EBC:	dc.b   0,$28,  7,$90,  3,$F0,  7,$90,  4,$B0, $A,  0,  4,$B0, $C,$10 ; 0
					
		dc.b   4,$B0, $C,$10,  3,$30, $D,$90,  3,$30, $D,$90,  1,$B0, $F,$10 ; 16
		dc.b   1,$B0, $F,$10,  2,$B0, $F,$90,  2,$B0	; 32
byte_22EE6:	dc.b   0,$14, $A,$F0,  6,$30, $E,$90,  6,$30, $E,$90,  6,$B0, $F,$90 ; 0
					
		dc.b   6,$B0, $F,$90,  6,$70			; 16
byte_22EFC:	dc.b   0,$14, $F,$90,  2,$F0, $F,$90,  4,$B0, $F,$10,  4,$B0, $F,$10 ; 0
					
		dc.b   6,$30, $F,$90,  6,$30			; 16
byte_22F12:	dc.b   0,$14,$14,$10,  5,$30,$11,$90,  5,$30,$11,$90,  6,$B0,$14,$10 ; 0
					
		dc.b   6,$B0,$14,$10,  5,$70			; 16
byte_22F28:	dc.b   0,$10,$1A,$F0,  5,$30,$1B,$90,  5,$30,$1B,$90,  3,$30,$1E,$10 ; 0
					
		dc.b   3,$30					; 16
byte_22F3A:	dc.b   0,$18,$1A,$90,  5,$70,$1A,$90,  5,$B0,$1C,$10,  5,$B0,$1C,$10 ; 0
					
		dc.b   4,$30,$1E,$10,  4,$30,$1E,$10,  3,$70	; 16
byte_22F54:	dc.b   0,$18,$24,$90,  3,$70,$24,$90,  3,$D0,$23,$90,  3,$D0,$23,$90 ; 0
					
		dc.b   5,$D0,$25,$10,  5,$D0,$25,$10,  5,$70	; 16
byte_22F6E:	dc.b   0,$10,$24,$F0,  3,$30,$25,$90,  3,$30,$25,$90,  5,$30,$25,$70 ; 0
					
		dc.b   5,$30					; 16
word_22F80:	dc.w   $10, $310, $330,	$290, $330, $290, $230,	$490 ; 0	
		dc.w  $230					; 8
word_22F92:	dc.w   $18, $310, $370,	$310, $3B0, $410, $3B0,	$410 ; 0	
		dc.w  $2B0, $490, $2B0,	$490, $270		; 8
word_22FAC:	dc.w   $14, $490, $6F0,	$490, $730, $690, $730,	$890 ; 0	
		dc.w  $730, $890, $6F0				; 8
word_22FC2:	dc.w	$C, $BF0, $330,	$D90, $330, $D90, $2F0	;	0 
word_22FD0:	dc.w   $1C, $D90, $2B0,	$C90, $2B0, $C90,  $B0,	$E80 ; 0	
		dc.w   $B0,$1110,  $B0,$1110, $230,$10F0, $230	;	8
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo_DespawnObject3:				
		jmp	DespawnObject3
		
		align 4
	endc
		 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 20 - HTZ boss lava bubble
; ----------------------------------------------------------------------------

LavaBubble:				
					
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_23006(pc,d0.w),d1
		jmp	off_23006(pc,d1.w)
; ===========================================================================
off_23006:	dc.w loc_23014-off_23006			; 0 
		dc.w loc_23076-off_23006			; 1
		dc.w loc_23084-off_23006			; 2
		dc.w loc_2311E-off_23006			; 3
		dc.w loc_23144-off_23006			; 4
		dc.w loc_231D2-off_23006			; 5
		dc.w loc_23232-off_23006			; 6
; ===========================================================================

loc_23014:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#8,ost_height(a0)
		move.b	#8,$17(a0)
		move.l	#Map_23254,ost_mappings(a0)
		move.w	#tile_Nem_HTZFireball2+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo17_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	ost_y_pos(a0),$30(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#3,d0
		andi.w	#$780,d0
		neg.w	d0
		move.w	d0,ost_x_vel(a0)
		move.w	d0,ost_y_vel(a0)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lsl.w	#4,d0
		move.w	d0,$32(a0)
		move.w	d0,$34(a0)

loc_23076:				
		lea	(off_23236).l,a1
		jsrto	AnimateSprite,JmpTo4_AnimateSprite
		jmpto	DespawnObject,JmpTo8_DespawnObject
; ===========================================================================

loc_23084:				
		cmpi.b	#5,$1E(a0)
		bne.s	loc_230B4
		jsrto	FindNextFreeObj,JmpTo6_FindNextFreeObj
		bne.s	loc_230A6
		bsr.s	loc_230C2
		jsrto	FindNextFreeObj,JmpTo6_FindNextFreeObj
		bne.s	loc_230A6
		bsr.s	loc_230C2
		neg.w	ost_x_vel(a1)
		bset	#render_xflip_bit,ost_render(a1)

loc_230A6:				
		move.w	#$AE,d0	
		jsr	PlaySound
		addq.b	#2,ost_primary_routine(a0)

loc_230B4:				
		lea	(off_23236).l,a1
		jsrto	AnimateSprite,JmpTo4_AnimateSprite
		jmpto	DespawnObject,JmpTo8_DespawnObject
; ===========================================================================

loc_230C2:				
		_move.b	#id_LavaBubble,ost_id(a1)
		move.b	#8,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_x_vel(a0),ost_x_vel(a1)
		move.w	ost_y_vel(a0),ost_y_vel(a1)
		move.b	#8,ost_height(a1)
		move.b	#8,$17(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#8,$19(a1)
		move.b	#-$75,$20(a1)
		move.w	ost_y_pos(a1),$30(a1)
		rts	
; ===========================================================================

loc_2311E:				
		subq.w	#1,$32(a0)
		bpl.s	loc_23136
		move.w	$34(a0),$32(a0)
		move.b	#2,ost_primary_routine(a0)
		move.w	#1,$1C(a0)

loc_23136:				
		lea	(off_23236).l,a1
		jsrto	AnimateSprite,JmpTo4_AnimateSprite
		jmpto	DespawnObject,JmpTo8_DespawnObject
; ===========================================================================

loc_23144:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2315A
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_2315A:				
		jsrto	SpeedToPos,JmpTo7_SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcc.s	loc_23176
		jmpto	DeleteObject,JmpTo21_DeleteObject
; ===========================================================================

loc_23176:				
		bclr	#render_yflip_bit,ost_render(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_231CE
		bset	#render_yflip_bit,ost_render(a0)
		bsr.w	FindFloorObj
		tst.w	d1
		bpl.s	loc_231CE
		add.w	d1,ost_y_pos(a0)
		addq.b	#2,ost_primary_routine(a0)
		move.b	#2,$1C(a0)
		move.b	#4,$1A(a0)
		move.w	#0,ost_y_vel(a0)
		move.l	#Map_23294,ost_mappings(a0)
		move.w	#(vram_HTZFireball1/sizeof_cell)+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo17_Adjust2PArtPointer
		move.b	#0,$1A(a0)
		move.w	#9,$32(a0)
		move.b	#3,$36(a0)

loc_231CE:				
		jmpto	DespawnObject,JmpTo8_DespawnObject
; ===========================================================================

loc_231D2:				
		subq.w	#1,$32(a0)
		bpl.s	loc_23224
		move.w	#$7F,$32(a0)
		subq.b	#1,$36(a0)
		bmi.s	loc_23224
		jsrto	FindNextFreeObj,JmpTo6_FindNextFreeObj
		bne.s	loc_23224
		moveq	#0,d0
		move.w	#$F,d1

loc_231F0:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_231F0
		move.w	#9,$32(a1)
		move.w	#$200,$1C(a1)
		move.w	#$E,d0
		tst.w	ost_x_vel(a1)
		bpl.s	loc_23214
		neg.w	d0

loc_23214:				
		add.w	d0,ost_x_pos(a1)
		move.l	a1,-(sp)
		bsr.w	FindFloorFire
		movea.l	(sp)+,a1
		add.w	d1,ost_y_pos(a1)

loc_23224:				
		lea	(off_23236).l,a1
		jsrto	AnimateSprite,JmpTo4_AnimateSprite
		jmpto	DespawnObject,JmpTo8_DespawnObject
; ===========================================================================

loc_23232:				
		jmpto	DeleteObject,JmpTo21_DeleteObject
; ===========================================================================
off_23236:	dc.w byte_2323C-off_23236			; 0 
		dc.w byte_23243-off_23236			; 1
		dc.w byte_23246-off_23236			; 2
byte_2323C:	dc.b  $B,  2,  3,$FC,  4,$FD,  1		; 0 
byte_23243:	dc.b $7F,  5,$FF				; 0 
byte_23246:	dc.b   5,  4,  5,  2,  3,  0,  1,  0,  1,  2,  3,  4,  5,$FC ; 0
					
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_23254:				
		dc.w word_23260-Map_23254			; 0
		dc.w word_2326A-Map_23254			; 1
		dc.w word_23274-Map_23254			; 2
		dc.w word_2327E-Map_23254			; 3
		dc.w word_23288-Map_23254			; 4
		dc.w word_23292-Map_23254			; 5
word_23260:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
word_2326A:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8			; 0
word_23274:	dc.w 1			
		dc.w $F905,    8,    4,$FFF8			; 0
word_2327E:	dc.w 1			
		dc.w $F605,    8,    4,$FFF8			; 0
word_23288:	dc.w 1			
		dc.w $F605,   $C,    6,$FFF8			; 0
word_23292:	dc.w 0			
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_23294:				
		dc.w byte_2329E-word_23292			; 0
		dc.w byte_232A8-word_23292			; 1
		dc.w byte_232B2-word_23292			; 2
		dc.w byte_232BC-word_23292			; 3
		dc.w byte_232C6-word_23292			; 4
byte_2329E:	dc.b   0,$3E,  0,  1,$F0,  7,  0,  0,  0,  0	; 0	
byte_232A8:	dc.b $FF,$F8,  0,  1,$F0,  7,  8,  0,  8,  0	; 0	
byte_232B2:	dc.b $FF,$F8,  0,  1,$F0,  7,  0,  8,  0,  4	; 0	
byte_232BC:	dc.b $FF,$F8,  0,  1,$F0,  7,  8,  8,  8,  4	; 0	
byte_232C6:	dc.b $FF,$F8,  0,  1,  0,  5,  0,$10,  0,  8,$FF,$F8,  0,  1,  0,  5 ; 0
					
		dc.b   8,$10,  8,  8,$FF,$F8			; 16
; ===========================================================================

	if RemoveJmpTos=0
JmpTo21_DeleteObject:				
		jmp	DeleteObject
JmpTo8_DespawnObject:				
		jmp	DespawnObject
JmpTo6_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo4_AnimateSprite:				
		jmp	AnimateSprite
JmpTo17_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo7_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc	

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2F - HTZ smashable ground
; ----------------------------------------------------------------------------

SmashGround:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2330E(pc,d0.w),d1
		jmp	off_2330E(pc,d1.w)
; ===========================================================================
off_2330E:	dc.w loc_2331E-off_2330E			; 0 
		dc.w loc_23368-off_2330E			; 1
		dc.w loc_234DC-off_2330E			; 2
byte_23314:	dc.b $24					; 0
		dc.b   0					; 1
		dc.b $20					; 2
		dc.b   2					; 3
		dc.b $18					; 4
		dc.b   4					; 5
		dc.b $10					; 6
		dc.b   6					; 7
		dc.b   8					; 8
		dc.b   8					; 9
; ===========================================================================

loc_2331E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_236FA,ost_mappings(a0)
		move.w	#0+tile_pal3+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo18_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$1E,d0
		lea	byte_23314(pc,d0.w),a2
		move.b	(a2)+,ost_height(a0)
		move.b	(a2)+,$1A(a0)
		move.b	#$20,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)

loc_23368:				
		move.w	(v_enemy_combo).w,$38(a0)
		move.b	($FFFFB01C).w,$32(a0)
		move.b	($FFFFB05C).w,$33(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo3_SolidObject
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_233A4

BranchTo_JmpTo9_DespawnObject:				
		jmpto	DespawnObject,JmpTo9_DespawnObject
; ===========================================================================

loc_233A4:				
		cmpi.b	#$18,d0
		bne.s	loc_23408
		cmpi.b	#2,$32(a0)
		bne.s	loc_233C0
		tst.b	$28(a0)
		bmi.s	loc_233F0
		cmpi.b	#$E,(v_ost_player1+ost_top_solid_bit).w
		beq.s	loc_233F0

loc_233C0:				
		move.b	#$C,(v_ost_player1+ost_top_solid_bit).w
		move.b	#$D,($FFFFB03F).w
		cmpi.b	#2,$33(a0)
		bne.s	loc_233E2
		tst.b	$28(a0)
		bmi.s	loc_233F0
		cmpi.b	#$E,(v_ost_player2+ost_top_solid_bit).w
		beq.s	loc_233F0

loc_233E2:				
		move.b	#$C,(v_ost_player2+ost_top_solid_bit).w
		move.b	#$D,($FFFFB07F).w
		bra.s	BranchTo_JmpTo9_DespawnObject
; ===========================================================================

loc_233F0:				
		lea	($FFFFB000).w,a1
		move.b	$32(a0),d0
		bsr.s	loc_2343E
		lea	($FFFFB040).w,a1
		move.b	$33(a0),d0
		bsr.s	loc_2343E
		bra.w	loc_234A4
; ===========================================================================

loc_23408:				
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_23470
		cmpi.b	#2,$32(a0)
		bne.s	loc_23426
		tst.b	$28(a0)
		bmi.s	loc_23436
		cmpi.b	#$E,(v_ost_player1+ost_top_solid_bit).w
		beq.s	loc_23436

loc_23426:				
		move.b	#$C,(v_ost_player1+ost_top_solid_bit).w
		move.b	#$D,($FFFFB03F).w
		bra.w	BranchTo_JmpTo9_DespawnObject
; ===========================================================================

loc_23436:				
		lea	($FFFFB000).w,a1
		bsr.s	loc_23444
		bra.s	loc_234A4
; ===========================================================================

loc_2343E:				
		cmpi.b	#2,d0
		bne.s	loc_2345C

loc_23444:				
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)

loc_2345C:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		rts	
; ===========================================================================

loc_23470:				
		andi.b	#$10,d0
		beq.w	BranchTo_JmpTo9_DespawnObject
		cmpi.b	#2,$33(a0)
		bne.s	loc_2348E
		tst.b	$28(a0)
		bmi.s	loc_2349E
		cmpi.b	#$E,(v_ost_player2+ost_top_solid_bit).w
		beq.s	loc_2349E

loc_2348E:				
		move.b	#$C,(v_ost_player2+ost_top_solid_bit).w
		move.b	#$D,($FFFFB07F).w
		bra.w	BranchTo_JmpTo9_DespawnObject
; ===========================================================================

loc_2349E:				
		lea	($FFFFB040).w,a1
		bsr.s	loc_23444

loc_234A4:				
		move.w	$38(a0),(v_enemy_combo).w
		andi.b	#-$19,$22(a0)
		lea	(byte_234F2).l,a4
		moveq	#0,d0
		move.b	$1A(a0),d0
		addq.b	#1,$1A(a0)
		move.l	d0,d1
		add.w	d0,d0
		add.w	d0,d0
		lea	(a4,d0.w),a4
		neg.w	d1
		addi.w	#9,d1

loc_234D0:
		move.w	#$18,d2
		jsrto	SmashObject,JmpTo_SmashObject
		bsr.w	loc_236A8

loc_234DC:				
		jsrto	SpeedToPos,JmpTo8_SpeedToPos

loc_234E0:
		addi.w	#$18,ost_y_vel(a0)
		tst.b	ost_render(a0)
		bpl.w	JmpTo22_DeleteObject
		jmpto	DisplaySprite,JmpTo12_DisplaySprite
; ===========================================================================
byte_234F2:	
		dc.b $FF					; 0 
		dc.b   0					; 1
		dc.b $F8					; 2
		dc.b   0					; 3
		dc.b   1					; 4
		dc.b   0					; 5
		dc.b $F8					; 6
		dc.b   0					; 7
		dc.b $FF					; 8
		dc.b $20					; 9
		dc.b $F9					; 10
		dc.b   0					; 11
		dc.b   0					; 12
		dc.b $E0					; 13
		dc.b $F9					; 14
		dc.b   0					; 15
		dc.b $FF					; 16
		dc.b $40					; 17
		dc.b $FA					; 18
		dc.b   0					; 19
		dc.b   0					; 20
		dc.b $C0					; 21
		dc.b $FA					; 22
		dc.b   0					; 23
		dc.b $FF					; 24
		dc.b $60					; 25
		dc.b $FB					; 26
		dc.b   0					; 27
		dc.b   0					; 28
		dc.b $A0					; 29
		dc.b $FB					; 30
		dc.b   0					; 31
		dc.b $FF					; 32
		dc.b $80					; 33
		dc.b $FC					; 34
		dc.b   0					; 35
		dc.b   0					; 36
		dc.b $80					; 37
		dc.b $FC					; 38
		dc.b   0					; 39
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 32 - CPZ spin tube block and HTZ breakable rock
; ----------------------------------------------------------------------------

SmashBlock:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_23528(pc,d0.w),d1
		jmp	off_23528(pc,d1.w)
; ===========================================================================
off_23528:
		dc.w loc_2352E-off_23528			; 0 
		dc.w loc_23582-off_23528			; 2
		dc.w loc_2366A-off_23528			; 4
; ===========================================================================

loc_2352E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_23852,ost_mappings(a0)
		move.w	#tile_Nem_HTZRock+tile_pal3,ost_tile(a0)
		move.b	#$18,$19(a0)
		move.l	#byte_23680,$3C(a0)
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_23572
		move.l	#Map_23886,ost_mappings(a0)
		move.w	#tile_Nem_CPZMetalBlock+tile_pal4,ost_tile(a0)
		move.b	#$10,$19(a0)
		move.l	#byte_23698,$3C(a0)

loc_23572:				
		jsrto	Adjust2PArtPointer,JmpTo18_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)

loc_23582:				
		move.w	(v_enemy_combo).w,$38(a0)
		move.b	($FFFFB01C).w,$32(a0)
		move.b	($FFFFB05C).w,$33(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo3_SolidObject
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_235BC

BranchTo2_JmpTo9_DespawnObject:				
		jmpto	DespawnObject,JmpTo9_DespawnObject
; ===========================================================================

loc_235BC:				
		cmpi.b	#$18,d0
		bne.s	loc_235EA
		cmpi.b	#2,$32(a0)
		beq.s	loc_235D2
		cmpi.b	#2,$33(a0)
		bne.s	BranchTo2_JmpTo9_DespawnObject

loc_235D2:				
		lea	(v_ost_player1).w,a1
		move.b	$32(a0),d0
		bsr.s	loc_23602
		lea	(v_ost_player2).w,a1
		move.b	$33(a0),d0
		bsr.s	loc_23602
		bra.w	loc_23652
; ===========================================================================

loc_235EA:				
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_2363A
		cmpi.b	#2,$32(a0)
		bne.s	BranchTo2_JmpTo9_DespawnObject
		lea	($FFFFB000).w,a1
		bsr.s	loc_23608
		bra.s	loc_23652
; ===========================================================================

loc_23602:				
		cmpi.b	#2,d0
		bne.s	loc_23626

loc_23608:				
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		move.w	#-$300,ost_y_vel(a1)

loc_23626:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		rts	
; ===========================================================================

loc_2363A:
		; Possibly copied and pasted? These first two lines are completely pointless;
		; there is no way this will return zero and trigger a branch.		
		andi.b	#$10,d0
		beq.w	BranchTo2_JmpTo9_DespawnObject
		cmpi.b	#2,$33(a0)
		bne.w	BranchTo2_JmpTo9_DespawnObject
		lea	($FFFFB040).w,a1
		bsr.s	loc_23608

loc_23652:				
		move.w	$38(a0),(v_enemy_combo).w
		andi.b	#-$19,$22(a0)
		movea.l	$3C(a0),a4
		jsrto	SmashObject,JmpTo_SmashObject
		bsr.w	loc_236A8

loc_2366A:				
		jsrto	SpeedToPos,JmpTo8_SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		tst.b	ost_render(a0)
		bpl.w	JmpTo22_DeleteObject
		jmpto	DisplaySprite,JmpTo12_DisplaySprite
; ===========================================================================
byte_23680:	
		dc.b $FE,  0,$FE,  0,  0,  0,$FD,$80,  2,  0,$FE,  0,$FE,$40,$FE,$40 ; 0			
		dc.b   0,  0,$FE,  0,  1,$C0,$FE,$40		; 16
byte_23698:	
		dc.b $FF,  0,$FE,  0,  1,  0,$FE,  0,$FF,$40,$FE,$40,  0,$C0,$FE,$40 ; 0
					
; ===========================================================================

loc_236A8:				
		jsrto	FindFreeObj,JmpTo3_FindFreeObj
		bne.s	locret_236F0
		_move.b	#id_Points,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	(v_enemy_combo).w,d2
		addq.w	#2,(v_enemy_combo).w
		cmpi.w	#6,d2
		bcs.s	loc_236D0
		moveq	#6,d2

loc_236D0:				
		moveq	#0,d0
		move.w	word_236F2(pc,d2.w),d0
		cmpi.w	#$20,(v_enemy_combo).w
		bcs.s	loc_236E4
		move.w	#$3E8,d0
		moveq	#$A,d2

loc_236E4:				
		jsr	AddPoints
		lsr.w	#1,d2
		move.b	d2,$1A(a1)

locret_236F0:				
		rts	
; ===========================================================================
word_236F2:	
		dc.w	$A					; 0 
		dc.w   $14					; 1
		dc.w   $32					; 2
		dc.w   $64					; 3
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_236FA:				
		dc.w word_2370E-Map_236FA			; 0
		dc.w word_23758-Map_236FA			; 1
		dc.w word_237AA-Map_236FA			; 2
		dc.w word_237AA-Map_236FA			; 3
		dc.w word_237EC-Map_236FA			; 4
		dc.w word_237EC-Map_236FA			; 5
		dc.w word_2381E-Map_236FA			; 6
		dc.w word_2381E-Map_236FA			; 7
		dc.w word_23840-Map_236FA			; 8
		dc.w word_23840-Map_236FA			; 9
word_2370E:	dc.w 9			
		dc.w $D80D,  $12,    9,$FFF0			; 0
		dc.w $E805,  $4A,  $25,$FFF0			; 4
		dc.w $E805,  $4A,  $25,	   0			; 8
		dc.w $F805,  $4E,  $27,$FFF0			; 12
		dc.w $F805,  $4E,  $27,	   0			; 16
		dc.w  $805,  $52,  $29,$FFF0			; 20
		dc.w  $805,  $52,  $29,	   0			; 24
		dc.w $1805,  $52,  $29,$FFF0			; 28
		dc.w $1805,  $52,  $29,	   0			; 32
word_23758:	dc.w $A			
		dc.w $D805,  $12,    9,$FFF0			; 0
		dc.w $D805,  $16,   $B,	   0			; 4
		dc.w $E805,  $4A,  $25,$FFF0			; 8
		dc.w $E805,  $4A,  $25,	   0			; 12
		dc.w $F805,  $4E,  $27,$FFF0			; 16
		dc.w $F805,  $4E,  $27,	   0			; 20
		dc.w  $805,  $52,  $29,$FFF0			; 24
		dc.w  $805,  $52,  $29,	   0			; 28
		dc.w $1805,  $52,  $29,$FFF0			; 32
		dc.w $1805,  $52,  $29,	   0			; 36
word_237AA:	dc.w 8			
		dc.w $E005,  $4A,  $25,$FFF0			; 0
		dc.w $E005,  $4A,  $25,	   0			; 4
		dc.w $F005,  $4E,  $27,$FFF0			; 8
		dc.w $F005,  $4E,  $27,	   0			; 12
		dc.w	 5,  $52,  $29,$FFF0			; 16
		dc.w	 5,  $52,  $29,	   0			; 20
		dc.w $1005,  $52,  $29,$FFF0			; 24
		dc.w $1005,  $52,  $29,	   0			; 28
word_237EC:	dc.w 6			
		dc.w $E805,  $4E,  $27,$FFF0			; 0
		dc.w $E805,  $4E,  $27,	   0			; 4
		dc.w $F805,  $52,  $29,$FFF0			; 8
		dc.w $F805,  $52,  $29,	   0			; 12
		dc.w  $805,  $52,  $29,$FFF0			; 16
		dc.w  $805,  $52,  $29,	   0			; 20
word_2381E:	dc.w 4			
		dc.w $F005,  $52,  $29,$FFF0			; 0
		dc.w $F005,  $52,  $29,	   0			; 4
		dc.w	 5,  $52,  $29,$FFF0			; 8
		dc.w	 5,  $52,  $29,	   0			; 12
word_23840:	dc.w 2			
		dc.w $F805,  $52,  $29,$FFF0			; 0
		dc.w $F805,  $52,  $29,	   0			; 4
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23852:				
		dc.w word_23854-Map_23852
word_23854:	dc.w 6			
		dc.w $F005,    0,    0,$FFE8			; 0
		dc.w $F005,    4,    2,$FFF8			; 4
		dc.w $F005,    8,    4,	   8			; 8
		dc.w	 5,   $C,    6,$FFE8			; 12
		dc.w	 5,  $10,    8,$FFF8			; 16
		dc.w	 5,  $10,    8,	   8			; 20
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23886:				
		dc.w word_23888-Map_23886
word_23888:	dc.w 4			
		dc.w $F005,    0,    0,$FFF0			; 0
		dc.w $F005, $800, $800,	   0			; 4
		dc.w	 5,    0,    0,$FFF0			; 8
		dc.w	 5, $800, $800,	   0			; 12
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos
JmpTo22_DeleteObject:				
		jmp	DeleteObject	
	else
JmpTo12_DisplaySprite:				
		jmp	DisplaySprite
JmpTo22_DeleteObject:				
		jmp	DeleteObject
JmpTo3_FindFreeObj:				
		jmp	FindFreeObj
JmpTo9_DespawnObject:				
		jmp	DespawnObject
JmpTo18_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_SmashObject:				
		jmp	SmashObject
JmpTo3_SolidObject:				
		jmp	SolidObject
JmpTo8_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 30 - HTZ rising lava
; ----------------------------------------------------------------------------

RisingLava:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_238EA(pc,d0.w),d1
		jmp	off_238EA(pc,d1.w)
; ===========================================================================
off_238EA:	dc.w loc_238F8-off_238EA			; 0 
		dc.w loc_23944-off_238EA			; 1
byte_238EE:	dc.b $C0					; 0
		dc.b   0					; 1
		dc.b $C0					; 2
		dc.b   0					; 3
		dc.b $C0					; 4
		dc.b   0					; 5
		dc.b $E0					; 6
		dc.b   0					; 7
		dc.b $C0					; 8
		dc.b   0					; 9
; ===========================================================================

loc_238F8:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.w	ost_x_pos(a0),$30(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	byte_238EE(pc,d0.w),$19(a0)
		cmpi.b	#6,d0
		bcs.s	loc_23944
		bne.s	loc_23926
		cmpi.w	#$380,(v_camera_y_pos).w
		bcc.s	loc_23944
		bra.s	loc_2392E
; ===========================================================================

loc_23926:				
		cmpi.w	#$380,(v_camera_y_pos).w
		bcs.s	loc_23944

loc_2392E:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_23940
		bclr	#7,2(a2,d0.w)

loc_23940:				
		bra.w	JmpTo23_DeleteObject
; ===========================================================================

loc_23944:				
		move.w	$32(a0),d0
		add.w	(v_camera_y_pos_offset).w,d0
		move.w	d0,ost_y_pos(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	off_23968(pc,d0.w),d1
		jsr	off_23968(pc,d1.w)
		tst.b	(f_screen_shake_htz).w
		beq.w	JmpTo2_DespawnObject3
		rts	
; ===========================================================================
off_23968:	
		dc.w loc_23972-off_23968			; 0 
		dc.w loc_23972-off_23968			; 1
		dc.w loc_2398A-off_23968			; 2
		dc.w loc_239D0-off_23968			; 3
		dc.w loc_239EA-off_23968			; 4
; ===========================================================================

loc_23972:				
		move.w	#$CB,d1	
		move.w	#$80,d2	
		move.w	#$81,d3	
		move.w	ost_x_pos(a0),d4
		bsr.w	JmpTo_SolidObject_NoRenderChk
		bra.w	JmpTo_DropOnFloor
; ===========================================================================

loc_2398A:				
		move.w	#$CB,d1	
		move.w	#$78,d2
		move.w	#$79,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	JmpTo_SolidObject_NoRenderChk
		bsr.w	JmpTo_DropOnFloor

loc_239A2:				
		btst	#3,$22(a0)
		beq.s	loc_239B8
		move.l	a0,-(sp)
		movea.l	a0,a1
		lea	($FFFFB000).w,a0
		bsr.w	JmpTo_React_ChkHurt
		movea.l	(sp)+,a0

loc_239B8:				
		btst	#4,$22(a0)
		beq.s	locret_239CE
		move.l	a0,-(sp)
		movea.l	a0,a1
		lea	($FFFFB040).w,a0
		bsr.w	JmpTo_React_ChkHurt
		movea.l	(sp)+,a0

locret_239CE:				
		rts	
; ===========================================================================

loc_239D0:				
		move.w	#$EB,d1	
		move.w	#$78,d2
		move.w	#$79,d3
		move.w	ost_x_pos(a0),d4
		bsr.w	JmpTo_SolidObject_NoRenderChk
		bsr.w	JmpTo_DropOnFloor
		bra.s	loc_239A2
; ===========================================================================

loc_239EA:				
		move.w	#$CB,d1	
		move.w	#$2E,d2
		move.w	ost_x_pos(a0),d4
		lea	(byte_23A04).l,a2
		bsr.w	JmpTo_SolidObject_Heightmap
		bra.w	JmpTo_DropOnFloor
; ===========================================================================
byte_23A04:	
		dc.b $30,$30,$30,$30,$30,$30,$30,$30,$2F,$2F,$2E,$2E,$2D,$2D,$2C,$2C ; 0			
		dc.b $2B,$2B,$2A,$2A,$29,$29,$28,$28,$27,$27,$26,$26,$25,$25,$24,$24 ; 16
		dc.b $23,$23,$22,$22,$21,$21,$20,$20,$1F,$1F,$1E,$1E,$1D,$1D,$1C,$1C ; 32
		dc.b $1B,$1B,$1A,$1A,$19,$19,$18,$18,$17,$17,$16,$16,$15,$15,$14,$14 ; 48
		dc.b $13,$13,$12,$12,$11,$11,$10,$10, $F, $F, $E, $E, $D, $D, $C, $C ; 64
		dc.b  $B, $B, $A, $A,  9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4 ; 80
		dc.b   3,  3,  2,  2,  1,  1,  0,  0,$FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC ; 96
		dc.b $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8,$F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4 ; 112
		dc.b $F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0,$EF,$EF,$EE,$EE,$ED,$ED,$EC,$EC ; 128
		dc.b $EB,$EB,$EA,$EA,$E9,$E9,$E8,$E8,$E7,$E7,$E6,$E6,$E5,$E5,$E4,$E4 ; 144
		dc.b $E3,$E3,$E2,$E2,$E1,$E1,$E0,$E0,$DF,$DF,$DE,$DE,$DD,$DD,$DC,$DC ; 160
		dc.b $DB,$DB,$DA,$DA,$D9,$D9,$D8,$D8,$D7,$D7,$D6,$D6,$D5,$D5,$D4,$D4 ; 176
		dc.b $D3,$D3,$D2,$D2,$D1,$D1,$D0,$D0,$D0,$D0,$D0,$D0 ; 192
; ===========================================================================



JmpTo23_DeleteObject:				
		jmp	DeleteObject
JmpTo_React_ChkHurt:				
		jmp	React_ChkHurt
JmpTo2_DespawnObject3:				
		jmp	DespawnObject3
JmpTo_DropOnFloor:				
		jmp	DropOnFloor
JmpTo_SolidObject_NoRenderChk:				
		jmp	SolidObject_NoRenderChk
JmpTo_SolidObject_Heightmap:				
		jmp	SolidObject_Heightmap
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 33 - OOZ Burner platform
; ----------------------------------------------------------------------------

BurnerPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_23B02(pc,d0.w),d1
		jmp	off_23B02(pc,d1.w)
; ===========================================================================
off_23B02:	
		dc.w loc_23B08-off_23B02			; 0 
		dc.w loc_23B90-off_23B02			; 1
		dc.w loc_23D9A-off_23B02			; 2
; ===========================================================================

loc_23B08:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_23DDC,ost_mappings(a0)
		move.w	#tile_Nem_BurnerLid+tile_pal4,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#$18,$19(a0)
		move.w	ost_y_pos(a0),$30(a0)
		addq.b	#2,$25(a0)
		move.w	#$78,$36(a0)
		tst.b	$28(a0)
		beq.s	loc_23B48
		move.b	#4,$25(a0)

loc_23B48:				
		jsrto	FindNextFreeObj,JmpTo7_FindNextFreeObj
		bne.s	loc_23B90
		_move.b	ost_id(a0),ost_id(a1)
		move.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		subi.w	#$10,ost_y_pos(a1)
		move.l	#off_23DF0,ost_mappings(a1)
		move.w	#tile_Nem_Burner+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.l	a0,$3C(a1)

loc_23B90:				
					
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_23BBC(pc,d0.w),d1
		jsr	off_23BBC(pc,d1.w)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo4_SolidObject
		jmpto	DespawnObject,JmpTo10_DespawnObject
; ===========================================================================
off_23BBC:	
		dc.w loc_23BC6-off_23BBC			; 0 
		dc.w loc_23BEA-off_23BBC			; 1
		dc.w loc_23C26-off_23BBC			; 2
		dc.w loc_23D20-off_23BBC			; 3
		dc.w locret_23D98-off_23BBC			; 4
; ===========================================================================

loc_23BC6:				
		subq.w	#1,$36(a0)
		bpl.s	locret_23BE8
		move.w	#$78,$36(a0)
		move.l	#-$96800,$32(a0)
		addq.b	#2,$25(a0)
		move.w	#$D4,d0	
		jsr	PlaySoundLocal

locret_23BE8:				
		rts	
; ===========================================================================

loc_23BEA:				
		move.l	ost_y_pos(a0),d1
		add.l	$32(a0),d1
		move.l	d1,ost_y_pos(a0)
		addi.l	#$3800,$32(a0)
		swap	d1
		cmp.w	$30(a0),d1
		bcs.s	locret_23C24
		move.l	$32(a0),d0
		cmpi.l	#loc_10000,d0
		bcc.s	loc_23C16
		subq.b	#2,$25(a0)

loc_23C16:				
		lsr.l	#2,d0
		neg.l	d0
		move.l	d0,$32(a0)
		move.w	$30(a0),ost_y_pos(a0)

locret_23C24:				
		rts	
; ===========================================================================

loc_23C26:				
		move.w	ost_x_pos(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$10,d3
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_23C9E
		cmpi.b	#$18,d0
		beq.s	loc_23CA0
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_23C52
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_23C52:				
		btst	d6,$22(a0)
		beq.s	locret_23C9E
		move.w	ost_x_pos(a1),d0
		cmp.w	d2,d0
		bcs.s	locret_23C9E
		cmp.w	d3,d0
		bcc.s	locret_23C9E
		move.b	#1,$2A(a1)
		move.w	#0,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		bclr	#5,$22(a1)
		bclr	#tile_hi_bit,ost_tile(a1)
		move.l	#-$96800,$32(a0)
		addq.b	#2,$25(a0)
		move.w	#$D4,d0	
		jsr	PlaySoundLocal

locret_23C9E:				
		rts	
; ===========================================================================

loc_23CA0:				
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a1),d0
		cmp.w	d2,d0
		bcs.s	locret_23D1E
		cmp.w	d3,d0
		bcc.s	locret_23D1E
		lea	($FFFFB040).w,a2
		move.w	ost_x_pos(a2),d0
		cmp.w	d2,d0
		bcs.s	locret_23D1E
		cmp.w	d3,d0
		bcc.s	locret_23D1E
		move.b	#1,$2A(a1)
		move.w	#0,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		bclr	#5,$22(a1)
		bclr	#tile_hi_bit,ost_tile(a1)
		move.b	#1,$2A(a2)
		move.w	#0,ost_inertia(a2)
		move.w	#0,ost_x_vel(a2)
		move.w	#0,ost_y_vel(a2)
		bclr	#5,$22(a2)
		bclr	#tile_hi_bit,ost_tile(a2)
		move.l	#-$96800,$32(a0)
		addq.b	#2,$25(a0)
		move.w	#$D4,d0	
		jsr	PlaySoundLocal

locret_23D1E:				
		rts	
; ===========================================================================

loc_23D20:				
		move.l	ost_y_pos(a0),d1
		add.l	$32(a0),d1
		move.l	d1,ost_y_pos(a0)
		addi.l	#$3800,$32(a0)
		swap	d1
		move.w	$30(a0),d0
		subi.w	#$7D,d0
		cmp.w	d0,d1
		bne.s	locret_23D96
		addq.b	#2,$25(a0)
		lea	($FFFFB000).w,a1
		move.b	$22(a0),d0
		andi.b	#8,d0
		bsr.s	loc_23D60
		lea	($FFFFB040).w,a1
		move.b	$22(a0),d0
		andi.b	#$10,d0

loc_23D60:				
		beq.s	locret_23D96
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,ost_inertia(a1)
		bset	#1,$22(a1)
		move.w	#-$1000,ost_y_vel(a1)
		bclr	#3,$22(a1)
		move.b	#0,$2A(a1)
		move.w	#$CC,d0	
		jsr	PlaySoundLocal

locret_23D96:				
		rts	
; ===========================================================================

locret_23D98:				
		rts	
; ===========================================================================

loc_23D9A:				
		movea.l	$3C(a0),a1
		move.w	ost_y_pos(a0),d0
		sub.w	ost_y_pos(a1),d0
		cmpi.w	#$14,d0
		blt.s	loc_23DC2
		move.b	#-$65,$20(a0)
		lea	(off_23DD0).l,a1
		jsr	AnimateSprite
		jmpto	DespawnObject,JmpTo10_DespawnObject
; ===========================================================================

loc_23DC2:				
		move.b	#0,$20(a0)
		move.b	#0,$1B(a0)
		rts	
; ===========================================================================
off_23DD0:	dc.w byte_23DD2-off_23DD0 
byte_23DD2:	dc.b   2,  2,  0,  2,  0,  2,  0,  1,$FF,  0	; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23DDC:				
		dc.w word_23DDE-Map_23DDC
word_23DDE:	dc.w 2			
		dc.w $F809,    0,    0,$FFE8			; 0
		dc.w $F809, $800, $800,	   0			; 4
off_23DF0:	dc.w word_23DF6-off_23DF0			; 0 
		dc.w word_23E08-off_23DF0			; 1
		dc.w word_23E1A-off_23DF0			; 2
word_23DF6:	dc.w 2			
		dc.w $F806,    0,    0,$FFF0			; 0
		dc.w $F806, $800, $800,	   0			; 4
word_23E08:	dc.w 2			
		dc.w $F007,    6,    3,$FFF0			; 0
		dc.w $F007, $806, $803,	   0			; 4
word_23E1A:	dc.w 2			
		dc.w	 5,   $E,    7,$FFF0			; 0
		dc.w	 5, $80E, $807,	   0			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo10_DespawnObject:				
		jmp	DespawnObject
JmpTo7_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo4_SolidObject:				
		jmp	SolidObject
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 43 - OOZ sliding spike obstacle
; ----------------------------------------------------------------------------

RailSpikes:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_23E4E(pc,d0.w),d1
		jmp	off_23E4E(pc,d1.w)
; ===========================================================================
off_23E4E:	
		dc.w loc_23E66-off_23E4E			; 0 
		dc.w loc_23F0A-off_23E4E			; 1
		dc.w loc_23F5C-off_23E4E			; 2
byte_23E54:	
		dc.b   0					; 0
		dc.b $68					; 1
		dc.b   0					; 2
		dc.b   0					; 3
		dc.b   0					; 4
		dc.b   0					; 5
		dc.b   1					; 6
		dc.b $E8					; 7
		dc.b $FF					; 8
		dc.b $E8					; 9
		dc.b   0					; 10
		dc.b $18					; 11
		dc.b   1					; 12
		dc.b $A8					; 13
		dc.b $FF					; 14
		dc.b $A8					; 15
		dc.b $FF					; 16
		dc.b $D8					; 17
; ===========================================================================

loc_23E66:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#tile_Nem_SlidingSpikes+tile_pal3+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo19_Adjust2PArtPointer
		moveq	#0,d1
		move.b	$28(a0),d1
		lea	byte_23E54(pc,d1.w),a2
		move.b	(a2)+,d1
		movea.l	a0,a1
		bra.s	loc_23EA8
; ===========================================================================

loc_23E84:				
		jsrto	FindNextFreeObj,JmpTo8_FindNextFreeObj
		bne.s	loc_23ED4
		_move.b	ost_id(a0),ost_id(a1)
		move.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#1,$36(a1)

loc_23EA8:				
		move.l	#Map_23FE0,ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.b	#$18,$19(a1)
		move.b	#-$5B,$20(a1)
		move.w	ost_x_pos(a1),$30(a1)

loc_23ED4:				
		dbf	d1,loc_23E84
		move.l	a0,$3C(a1)
		move.l	a1,$3C(a0)
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$30(a0),d0
		sub.w	d1,d0
		move.w	d0,$32(a0)
		move.w	d0,$32(a1)
		add.w	d1,d0
		add.w	d1,d0
		move.w	d0,$34(a0)
		move.w	d0,$34(a1)
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a0)
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a1)

loc_23F0A:				
		bsr.s	loc_23F66
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_23F30
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_23F36

loc_23F30:				
		jmp	DisplaySprite
; ===========================================================================

loc_23F36:				
		movea.l	$3C(a0),a1
		cmpa.l	a0,a1
		beq.s	loc_23F44
		jsr	DeleteChild

loc_23F44:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_23F56
		bclr	#7,2(a2,d0.w)

loc_23F56:				
		jmp	DeleteObject
; ===========================================================================

loc_23F5C:				
		bsr.s	loc_23F66
		bsr.s	loc_23FB0
		jmp	DisplaySprite
; ===========================================================================

loc_23F66:				
		tst.b	$36(a0)
		bne.s	loc_23F8E
		move.w	ost_x_pos(a0),d1
		subq.w	#1,d1
		cmp.w	$32(a0),d1
		bne.s	loc_23F88
		move.b	#1,$36(a0)
		move.w	#$D5,d0	
		jsr	PlaySoundLocal

loc_23F88:				
		move.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_23F8E:				
		move.w	ost_x_pos(a0),d1
		addq.w	#1,d1
		cmp.w	$34(a0),d1
		bne.s	loc_23FAA
		move.b	#0,$36(a0)
		move.w	#$D5,d0	
		jsr	PlaySoundLocal

loc_23FAA:				
		move.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_23FB0:				
		movea.l	$3C(a0),a1
		move.w	ost_x_pos(a0),d0
		subi.w	#$18,d0
		move.w	ost_x_pos(a1),d2
		addi.w	#$18,d2
		cmp.w	d0,d2
		bne.s	locret_23FDE
		eori.b	#1,$36(a0)
		eori.b	#1,$36(a1)
		move.w	#$D5,d0	
		jsr	PlaySoundLocal

locret_23FDE:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23FE0:				
		dc.w word_23FE2-Map_23FE0
word_23FE2:	dc.w 6			
word_23FE4:	dc.w $E005,    0,    0,$FFE8			; 0
		dc.w $D80F,    4,    2,$FFF8			; 4
		dc.w $F809,  $14,   $A,$FFE8			; 8
		dc.w $F809,  $1A,   $D,	   0			; 12
		dc.w $1005,$1000,$1000,$FFE8			; 16
		dc.w  $80F,$1004,$1002,$FFF8			; 20
; ===========================================================================

	if RemoveJmpTos=0
JmpTo8_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo19_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc

; ===========================================================================	
; ----------------------------------------------------------------------------
; Object 07 - OOZ Oil Ocean
; Actually runs an invisible platform locked to the player's x-position
; ----------------------------------------------------------------------------
Oil:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2402E(pc,d0.w),d1
		jmp	off_2402E(pc,d1.w)
; ===========================================================================
off_2402E:	
		dc.w loc_24032-off_2402E			; 0 
		dc.w loc_24054-off_2402E			; 1
; ===========================================================================

loc_24032:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$758,ost_y_pos(a0)
		move.b	#$20,$19(a0)
		move.w	ost_y_pos(a0),$30(a0)
		move.b	#$30,$38(a0)
		bset	#7,$22(a0)

loc_24054:				
		tst.w	(v_debug_active).w
		bne.w	locret_240E8
		lea	(v_ost_player1).w,a1
		moveq	#8,d1
		move.b	$22(a0),d0
		and.b	d1,d0
		bne.s	loc_24078
		cmpi.b	#$30,$38(a0)
		beq.s	loc_24082
		addq.b	#1,$38(a0)
		bra.s	loc_24082
; ===========================================================================

loc_24078:				
		tst.b	$38(a0)
		beq.s	loc_240D6
		subq.b	#1,$38(a0)

loc_24082:				
		moveq	#$20,d1
		moveq	#0,d3
		move.b	$38(a0),d3
		moveq	#3,d6
		move.w	ost_x_pos(a1),d4
		move.w	d4,ost_x_pos(a0)
		jsrto	DetectPlatform_SingleCharacter,JmpTo_DetectPlatform_SingleCharacter
		lea	(v_ost_player2).w,a1
		moveq	#$10,d1
		move.b	$22(a0),d0
		and.b	d1,d0
		bne.s	loc_240B4
		cmpi.b	#$30,$3A(a0)
		beq.s	loc_240BE
		addq.b	#1,$3A(a0)
		bra.s	loc_240BE
; ===========================================================================

loc_240B4:				
		tst.b	$3A(a0)
		beq.s	loc_240D6
		subq.b	#1,$3A(a0)

loc_240BE:				
		moveq	#$20,d1
		moveq	#0,d3
		move.b	$3A(a0),d3
		moveq	#4,d6
		move.w	ost_x_pos(a1),d4
		move.w	d4,ost_x_pos(a0)
		jsrto	DetectPlatform_SingleCharacter,JmpTo_DetectPlatform_SingleCharacter
		rts	
; ===========================================================================

loc_240D6:				
		not.b	d1
		and.b	d1,$22(a0)
		move.l	a0,-(sp)
		movea.l	a0,a2
		movea.l	a1,a0
		jsrto	KillCharacter,JmpTo3_KillCharacter
		movea.l	(sp)+,a0

locret_240E8:				
		rts	
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo3_KillCharacter:				
		jmp	KillCharacter
JmpTo_DetectPlatform_SingleCharacter:				
		jmp	DetectPlatform_SingleCharacter
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 45 - OOZ pressure spring
; ----------------------------------------------------------------------------

PressureSpring:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2410A(pc,d0.w),d1
		jsr	off_2410A(pc,d1.w)
		jmpto	DespawnObject,JmpTo11_DespawnObject
; ===========================================================================
off_2410A:	
		dc.w loc_24110-off_2410A			; 0 
		dc.w loc_24186-off_2410A			; 2
		dc.w loc_2427A-off_2410A			; 4
; ===========================================================================

loc_24110:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2451A,ost_mappings(a0)
		move.w	#tile_Nem_PushSpring+tile_pal3,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_24146(pc,d0.w),d0
		jmp	off_24146(pc,d0.w)
; ===========================================================================
off_24146:	
		dc.w loc_2416E-off_24146			; 0 
		dc.w loc_2414A-off_24146			; 2
; ===========================================================================

loc_2414A:				
		move.b	#4,ost_primary_routine(a0)
		move.b	#1,$1C(a0)
		move.b	#$A,$1A(a0)
		move.w	#tile_Nem_PushSpring+tile_pal3,ost_tile(a0)
		move.b	#$14,$19(a0)
		move.w	ost_x_pos(a0),$34(a0)

loc_2416E:				
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_24182(pc,d0.w),$30(a0)
		jsrto	Adjust2PArtPointer,JmpTo20_Adjust2PArtPointer
		rts	
; ===========================================================================
word_24182:	
		dc.w $F000					; 0
		dc.w $F600					; 1
; ===========================================================================

loc_24186:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2419C
		tst.b	$32(a0)
		beq.s	loc_241A8
		subq.b	#1,$32(a0)
		bra.s	loc_241A8
; ===========================================================================

loc_2419C:				
		cmpi.b	#9,$32(a0)
		beq.s	loc_241C6
		addq.b	#1,$32(a0)

loc_241A8:				
		moveq	#0,d3
		move.b	$32(a0),d3
		move.b	d3,$1A(a0)
		add.w	d3,d3
		move.w	#$1B,d1
		move.w	#$14,d2
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject_OOZSpring,JmpTo_SolidObject_OOZSpring
		rts	
; ===========================================================================

loc_241C6:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_241D4
		lea	($FFFFB040).w,a1
		moveq	#4,d6

loc_241D4:				
		bclr	d6,$22(a0)
		beq.w	locret_24278
		move.w	$30(a0),ost_y_vel(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		bpl.s	loc_24206
		move.w	#0,ost_x_vel(a1)

loc_24206:				
		btst	#0,d0
		beq.s	loc_24246
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_24236
		move.b	#1,$2C(a1)

loc_24236:				
		btst	#0,$22(a1)
		beq.s	loc_24246
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_24246:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2425C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_2425C:				
		cmpi.b	#8,d0
		bne.s	loc_2426E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_2426E:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

locret_24278:				
		rts	
; ===========================================================================

loc_2427A:				
		move.b	#0,$36(a0)
		move.w	#$1F,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	ost_x_pos(a0),d4
		lea	(v_ost_player1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo_SolidObject_NoRenderChk_SingleCharacter
		cmpi.w	#1,d4
		bne.s	loc_242C0
		move.b	$22(a0),d1
		move.w	ost_x_pos(a0),d2
		sub.w	ost_x_pos(a1),d2
		bcs.s	loc_242B6
		eori.b	#1,d1

loc_242B6:				
		andi.b	#1,d1
		bne.s	loc_242C0
		bsr.w	loc_2433C

loc_242C0:				
		movem.l	(sp)+,d1-d4
		lea	(v_ost_player2).w,a1
		moveq	#4,d6
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo_SolidObject_NoRenderChk_SingleCharacter
		cmpi.w	#1,d4
		bne.s	loc_242EE
		move.b	$22(a0),d1
		move.w	ost_x_pos(a0),d2
		sub.w	ost_x_pos(a1),d2
		bcs.s	loc_242E6
		eori.b	#1,d1

loc_242E6:				
		andi.b	#1,d1
		bne.s	loc_242EE
		bsr.s	loc_2433C

loc_242EE:				
		tst.b	$36(a0)
		bne.s	locret_2433A
		move.w	$34(a0),d0
		cmp.w	ost_x_pos(a0),d0
		beq.s	locret_2433A
		bcc.s	loc_2431C
		subq.b	#4,$1A(a0)
		subq.w	#4,ost_x_pos(a0)
		cmp.w	ost_x_pos(a0),d0
		bcs.s	loc_24336
		move.b	#$A,$1A(a0)
		move.w	$34(a0),ost_x_pos(a0)
		bra.s	loc_24336
; ===========================================================================

loc_2431C:				
		subq.b	#4,$1A(a0)
		addq.w	#4,ost_x_pos(a0)
		cmp.w	ost_x_pos(a0),d0
		bcc.s	loc_24336
		move.b	#$A,$1A(a0)
		move.w	$34(a0),ost_x_pos(a0)

loc_24336:				
		bsr.w	loc_243D0

locret_2433A:				
		rts	
; ===========================================================================

loc_2433C:				
		btst	#0,$22(a0)
		beq.s	loc_24378
		btst	#0,$22(a1)
		bne.w	locret_243CE
		tst.w	d0
		bne.w	loc_2435E
		tst.w	ost_inertia(a1)
		beq.s	locret_243CE
		bpl.s	loc_243C8
		bra.s	locret_243CE
; ===========================================================================

loc_2435E:				
		move.w	$34(a0),d0
		addi.w	#$12,d0
		cmp.w	ost_x_pos(a0),d0
		beq.s	loc_243C8
		addq.w	#1,ost_x_pos(a0)
		moveq	#1,d0
		move.w	#$40,d1
		bra.s	loc_243A6
; ===========================================================================

loc_24378:				
		btst	#0,$22(a1)
		beq.s	locret_243CE
		tst.w	d0
		bne.w	loc_2438E
		tst.w	ost_inertia(a1)
		bmi.s	loc_243C8
		bra.s	locret_243CE
; ===========================================================================

loc_2438E:				
		move.w	$34(a0),d0
		subi.w	#$12,d0
		cmp.w	ost_x_pos(a0),d0
		beq.s	loc_243C8
		subq.w	#1,ost_x_pos(a0)
		moveq	#-1,d0
		move.w	#-$40,d1

loc_243A6:				
		add.w	d0,ost_x_pos(a1)
		move.w	d1,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	$34(a0),d0
		sub.w	ost_x_pos(a0),d0
		bcc.s	loc_243C0
		neg.w	d0

loc_243C0:				
		addi.w	#$A,d0
		move.b	d0,$1A(a0)

loc_243C8:				
		move.b	#1,$36(a0)

locret_243CE:				
		rts	
; ===========================================================================

loc_243D0:				
		move.b	$22(a0),d0
		andi.b	#$60,d0
		beq.w	locret_244D0
		lea	($FFFFB000).w,a1
		moveq	#5,d6
		bsr.s	loc_243EA
		lea	($FFFFB040).w,a1
		moveq	#6,d6

loc_243EA:				
		bclr	d6,$22(a0)
		beq.w	locret_244D0
		move.w	$34(a0),d0
		sub.w	ost_x_pos(a0),d0
		bcc.s	loc_243FE
		neg.w	d0

loc_243FE:				
		addi.w	#$A,d0
		lsl.w	#7,d0
		neg.w	d0
		move.w	d0,ost_x_vel(a1)
		subq.w	#4,ost_x_pos(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_2442C
		bclr	#0,$22(a1)
		addi_.w	#8,ost_x_pos(a1)
		neg.w	ost_x_vel(a1)

loc_2442C:				
		move.w	#$F,$2E(a1)
		move.w	ost_x_vel(a1),ost_inertia(a1)
		btst	#2,$22(a1)
		bne.s	loc_24446
		move.b	#0,$1C(a1)

loc_24446:				
		move.b	$28(a0),d0
		bpl.s	loc_24452
		move.w	#0,ost_y_vel(a1)

loc_24452:				
		btst	#0,d0
		beq.s	loc_24492
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_24482
		move.b	#3,$2C(a1)

loc_24482:				
		btst	#0,$22(a1)
		beq.s	loc_24492
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_24492:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_244A8
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_244A8:				
		cmpi.b	#8,d0
		bne.s	loc_244BA
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_244BA:				
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

locret_244D0:				
		rts	
; ===========================================================================
off_244D2:	
		dc.w byte_244D6-off_244D2			; 0 
		dc.w byte_244F8-off_244D2			; 1
		
byte_244D6:	
		dc.b   0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,  9,  9,  9 ; 0			
		dc.b   9,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  0,  0,  0,  0,  0 ; 16
		dc.b   0,$FF	
						; 32
byte_244F8:	
		dc.b   0, $A, $B, $C, $D, $E, $F,$10,$11,$12,$13,$13,$13,$13,$13,$13 ; 0			
		dc.b $13,$13,$12,$11,$10, $F, $E, $D, $C, $B, $A, $A, $A, $A, $A, $A ; 16
		dc.b  $A,$FF					; 32
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2451A:				
		dc.w word_24554-Map_2451A			; 0
		dc.w word_2457E-Map_2451A			; 1
		dc.w word_245A8-Map_2451A			; 2
		dc.w word_245D2-Map_2451A			; 3
		dc.w word_245FC-Map_2451A			; 4
		dc.w word_24626-Map_2451A			; 5
		dc.w word_24650-Map_2451A			; 6
		dc.w word_2467A-Map_2451A			; 7
		dc.w word_246A4-Map_2451A			; 8
		dc.w word_246CE-Map_2451A			; 9
		dc.w word_246F8-Map_2451A			; 10
		dc.w word_24722-Map_2451A			; 11
		dc.w word_2474C-Map_2451A			; 12
		dc.w word_24776-Map_2451A			; 13
		dc.w word_247A0-Map_2451A			; 14
		dc.w word_247CA-Map_2451A			; 15
		dc.w word_247F4-Map_2451A			; 16
		dc.w word_2481E-Map_2451A			; 17
		dc.w word_24848-Map_2451A			; 18
		dc.w word_24872-Map_2451A			; 19
		dc.w word_2489C-Map_2451A			; 20
		dc.w word_248C6-Map_2451A			; 21
		dc.w word_248F0-Map_2451A			; 22
		dc.w word_2491A-Map_2451A			; 23
		dc.w word_24944-Map_2451A			; 24
		dc.w word_2496E-Map_2451A			; 25
		dc.w word_24998-Map_2451A			; 26
		dc.w word_249C2-Map_2451A			; 27
		dc.w word_249EC-Map_2451A			; 28
word_24554:	dc.w 5			
		dc.w $EC0C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $408,$1007,$1003,$FFF4			; 8
		dc.w $FC08,$300A,$3005,$FFF4			; 12
		dc.w $F404,$100D,$1006,$FFF8			; 16
word_2457E:	dc.w 5			
		dc.w $EE0C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $408,$1007,$1003,$FFF4			; 8
		dc.w $FC08,$300A,$3005,$FFF4			; 12
		dc.w $F604,$100D,$1006,$FFF8			; 16
word_245A8:	dc.w 5			
		dc.w $F00C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $408,$1007,$1003,$FFF4			; 8
		dc.w $FE08,$300A,$3005,$FFF4			; 12
		dc.w $F804,$100D,$1006,$FFF8			; 16
word_245D2:	dc.w 5			
		dc.w $F20C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $608,$1007,$1003,$FFF4			; 8
		dc.w	 8,$300A,$3005,$FFF4			; 12
		dc.w $FA04,$100D,$1006,$FFF8			; 16
word_245FC:	dc.w 5			
		dc.w $F40C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $608,$1007,$1003,$FFF4			; 8
		dc.w	 8,$300A,$3005,$FFF4			; 12
		dc.w $FC04,$100D,$1006,$FFF8			; 16
word_24626:	dc.w 5			
		dc.w $F60C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $608,$1007,$1003,$FFF4			; 8
		dc.w  $208,$300A,$3005,$FFF4			; 12
		dc.w $FE04,$100D,$1006,$FFF8			; 16
word_24650:	dc.w 5			
		dc.w $F80C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $808,$1007,$1003,$FFF4			; 8
		dc.w  $408,$300A,$3005,$FFF4			; 12
		dc.w	 4,$100D,$1006,$FFF8			; 16
word_2467A:	dc.w 5			
		dc.w $FA0C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $808,$1007,$1003,$FFF4			; 8
		dc.w  $408,$300A,$3005,$FFF4			; 12
		dc.w  $204,$100D,$1006,$FFF8			; 16
word_246A4:	dc.w 5			
		dc.w $FC0C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $808,$1007,$1003,$FFF4			; 8
		dc.w  $608,$300A,$3005,$FFF4			; 12
		dc.w  $404,$100D,$1006,$FFF8			; 16
word_246CE:	dc.w 5			
		dc.w $FE0C,$3000,$3000,$FFF0			; 0
		dc.w  $C08,$3004,$3002,$FFF4			; 4
		dc.w  $A08,$1007,$1003,$FFF4			; 8
		dc.w  $808,$300A,$3005,$FFF4			; 12
		dc.w  $604,$100D,$1006,$FFF8			; 16
word_246F8:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFEC			; 4
		dc.w $F402,  $16,   $B,$FFF4			; 8
		dc.w $F402,$2019,$200C,$FFFC			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_24722:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFED			; 4
		dc.w $F402,  $16,   $B,$FFF5			; 8
		dc.w $F402,$2019,$200C,$FFFD			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_2474C:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C
		dc.w $F402,$2013,$2009,$FFEE
		dc.w $F402,  $16,   $B,$FFF6
		dc.w $F402,$2019,$200C,$FFFE
		dc.w $F801,  $1C,   $E,	   4
word_24776:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFEF			; 4
		dc.w $F402,  $16,   $B,$FFF7			; 8
		dc.w $F402,$2019,$200C,$FFFF			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_247A0:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF0			; 4
		dc.w $F402,  $16,   $B,$FFF8			; 8
		dc.w $F402,$2019,$200C,$FFFE			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_247CA:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF1			; 4
		dc.w $F402,  $16,   $B,$FFF9			; 8
		dc.w $F402,$2019,$200C,$FFFF			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_247F4:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF2			; 4
		dc.w $F402,  $16,   $B,$FFF8			; 8
		dc.w $F402,$2019,$200C,$FFFE			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_2481E:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF3			; 4
		dc.w $F402,  $16,   $B,$FFF9			; 8
		dc.w $F402,$2019,$200C,$FFFF			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_24848:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF4			; 4
		dc.w $F402,  $16,   $B,$FFFA			; 8
		dc.w $F402,$2019,$200C,	   0			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_24872:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF5			; 4
		dc.w $F402,  $16,   $B,$FFFB			; 8
		dc.w $F402,$2019,$200C,	   1			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_2489C:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF6			; 4
		dc.w $F402,  $16,   $B,$FFFC			; 8
		dc.w $F402,$2019,$200C,	   0			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_248C6:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF7			; 4
		dc.w $F402,  $16,   $B,$FFFD			; 8
		dc.w $F402,$2019,$200C,	   1			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_248F0:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF8			; 4
		dc.w $F402,  $16,   $B,$FFFC			; 8
		dc.w $F402,$2019,$200C,	   0			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_2491A:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFF9			; 4
		dc.w $F402,  $16,   $B,$FFFD			; 8
		dc.w $F402,$2019,$200C,	   1			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_24944:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFFA			; 4
		dc.w $F402,  $16,   $B,$FFFE			; 8
		dc.w $F402,$2019,$200C,	   2			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_2496E:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFFB			; 4
		dc.w $F402,  $16,   $B,$FFFF			; 8
		dc.w $F402,$2019,$200C,	   3			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_24998:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFFC			; 4
		dc.w $F402,  $16,   $B,	   0			; 8
		dc.w $F402,$2019,$200C,	   2			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_249C2:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFFD			; 4
		dc.w $F402,  $16,   $B,	   1			; 8
		dc.w $F402,$2019,$200C,	   3			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
word_249EC:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C			; 0
		dc.w $F402,$2013,$2009,$FFFE			; 4
		dc.w $F402,  $16,   $B,	   0			; 8
		dc.w $F402,$2019,$200C,	   2			; 12
		dc.w $F801,  $1C,   $E,	   4			; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 46 - OOZ ball on spring (unused beta leftover)
; ----------------------------------------------------------------------------

GiantBall:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_24A24(pc,d0.w),d1
		jmp	off_24A24(pc,d1.w)
; ===========================================================================
off_24A24:	
		dc.w loc_24A2C-off_24A24			; 0 
		dc.w loc_24AEA-off_24A24			; 1
		dc.w loc_24B38-off_24A24			; 2
		dc.w loc_24BDC-off_24A24			; 3
; ===========================================================================

loc_24A2C:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_24A48
		bclr	#7,2(a2,d0.w)
		bset	#0,2(a2,d0.w)
		bne.w	JmpTo25_DeleteObject

loc_24A48:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$F,ost_height(a0)
		move.b	#$F,$17(a0)
		move.l	#Map_24C52,ost_mappings(a0)
		move.w	#tile_Nem_SpringBall+tile_pal4,ost_tile(a0)
		bsr.w	JmpTo20_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$36(a0)
		move.b	#$10,$19(a0)
		move.b	#0,$1A(a0)
		move.w	#0,$14(a0)
		move.b	#1,$1F(a0)
		
		jsrto	FindFreeObj,JmpTo4_FindFreeObj
		bne.s	loc_24AE6
		_move.b	#id_GiantBall,ost_id(a1)
		addq.b	#6,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$12,ost_y_pos(a1)
		move.l	#Map_2451A,ost_mappings(a1)
		move.w	#tile_Nem_PushSpring+tile_pal3,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.b	#9,$1A(a1)
		move.l	a0,$3C(a1)

loc_24AE6:				
		move.l	a1,$3C(a0)

loc_24AEA:				
		btst	#6,(v_joypad2_press_actual).w
		bne.s	loc_24B04
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#4,d0
		tst.b	(a2,d0.w)
		beq.s	loc_24B30

loc_24B04:				
		addq.b	#2,ost_primary_routine(a0)
		bset	#1,$22(a0)
		move.w	#-$300,ost_y_vel(a0)
		move.w	#$100,$14(a0)
		movea.l	$3C(a0),a1
		move.b	#1,$30(a1)
		btst	#0,$22(a0)
		beq.s	loc_24B30
		neg.w	$14(a0)

loc_24B30:				
		bsr.w	loc_24BF0
		jmpto	DespawnObject,JmpTo11_DespawnObject
; ===========================================================================

loc_24B38:				
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo9_SpeedToPos
		btst	#1,$22(a0)
		beq.s	loc_24B8C
		addi.w	#$18,ost_y_vel(a0)
		bmi.s	loc_24B8A
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcs.s	loc_24BC4
		jsr	FindFloorObj
		tst.w	d1
		bpl.w	loc_24B8A
		add.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		bclr	#1,$22(a0)
		move.w	#$100,ost_x_vel(a0)
		btst	#0,$22(a0)
		beq.s	loc_24B8A
		neg.w	ost_x_vel(a0)

loc_24B8A:				
		bra.s	loc_24BA4
; ===========================================================================

loc_24B8C:				
		jsr	FindFloorObj
		cmpi.w	#8,d1
		blt.s	loc_24BA0
		bset	#1,$22(a0)
		bra.s	loc_24BA4
; ===========================================================================

loc_24BA0:				
		add.w	d1,ost_y_pos(a0)

loc_24BA4:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo5_SolidObject
		bsr.w	loc_24BF0
		jmpto	DespawnObject,JmpTo11_DespawnObject
; ===========================================================================

loc_24BC4:				
		move.w	(sp)+,d4

loc_24BC6:
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	BranchTo_JmpTo25_DeleteObject
		bclr	#7,2(a2,d0.w)

    if RemoveJmpTos
JmpTo25_DeleteObject:
    endc
    
BranchTo_JmpTo25_DeleteObject:				
		bra.w	JmpTo25_DeleteObject
; ===========================================================================

loc_24BDC:				
		tst.b	$30(a0)
		beq.s	loc_24BEC
		subq.b	#1,$1A(a0)
		bne.s	loc_24BEC

loc_24BE8:
		clr.b	$30(a0)

loc_24BEC:				
		jmpto	DespawnObject,JmpTo11_DespawnObject
; ===========================================================================

loc_24BF0:				
		tst.b	$1A(a0)
		beq.s	loc_24BFE
		move.b	#0,$1A(a0)
		rts	
; ===========================================================================

loc_24BFE:				
		move.b	$14(a0),d0
		beq.s	loc_24C2A
		bmi.s	loc_24C32
		subq.b	#1,$1E(a0)
		bpl.s	loc_24C2A
		neg.b	d0
		addq.b	#8,d0
		bcs.s	loc_24C14
		moveq	#0,d0

loc_24C14:				
		move.b	d0,$1E(a0)
		move.b	$1F(a0),d0
		addq.b	#1,d0
		cmpi.b	#4,d0
		bne.s	loc_24C26
		moveq	#1,d0

loc_24C26:				
		move.b	d0,$1F(a0)

loc_24C2A:				
		move.b	$1F(a0),$1A(a0)
		rts	
; ===========================================================================

loc_24C32:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_24C2A
		addq.b	#8,d0
		bcs.s	loc_24C3E
		moveq	#0,d0

loc_24C3E:				
		move.b	d0,$1E(a0)
		move.b	$1F(a0),d0
		subq.b	#1,d0
		bne.s	loc_24C4C
		moveq	#3,d0

loc_24C4C:				
		move.b	d0,$1F(a0)
		bra.s	loc_24C2A
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_24C52:				
		dc.w word_24C5A-Map_24C52			; 0
		dc.w word_24C7C-Map_24C52			; 1
		dc.w word_24C9E-Map_24C52			; 2
		dc.w word_24CB0-Map_24C52			; 3
word_24C5A:	dc.w 4			
		dc.w $F005,    0,    0,$FFF0			; 0
		dc.w $F005,    4,    2,	   0			; 4
		dc.w	 5,$1804,$1802,$FFF0			; 8
		dc.w	 5,$1004,$1002,	   0			; 12
word_24C7C:	dc.w 4			
		dc.w $F005,    8,    4,$FFF0			; 0
		dc.w $F005, $808, $804,	   0			; 4
		dc.w	 5,$1008,$1004,$FFF0			; 8
		dc.w	 5,$1808,$1804,	   0			; 12
word_24C9E:	dc.w 2			
		dc.w $F00D,   $C,    6,$FFF0
		dc.w	$D,$180C,$1806,$FFF0
word_24CB0:	dc.w 2			
		dc.w $F00D, $80C, $806,$FFF0			; 0
		dc.w	$D,$100C,$1006,$FFF0			; 4
; ===========================================================================

	if Revision<2
		nop
	endc
		
	if RemoveJmpTos=0
JmpTo25_DeleteObject:				
		jmp	DeleteObject
JmpTo4_FindFreeObj:				
		jmp	FindFreeObj
JmpTo11_DespawnObject:				
		jmp	DespawnObject
JmpTo20_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo5_SolidObject:				
		jmp	SolidObject
JmpTo_SolidObject_NoRenderChk_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter
JmpTo_SolidObject_OOZSpring:				
		jmp	SolidObject_OOZSpring
JmpTo9_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 47 - Button
; ----------------------------------------------------------------------------

Button:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_24D02(pc,d0.w),d1
		jmp	off_24D02(pc,d1.w)
; ===========================================================================
off_24D02:	
		dc.w loc_24D06-off_24D02			; 0 
		dc.w loc_24D32-off_24D02			; 2
; ===========================================================================

loc_24D06:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_24D96,ost_mappings(a0)
		move.w	#tile_Nem_Button,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo21_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		addq.w	#4,ost_y_pos(a0)

loc_24D32:				
		tst.b	ost_render(a0)
		bpl.s	BranchTo_JmpTo12_DespawnObject
		move.w	#$1B,d1
		move.w	#4,d2
		move.w	#5,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo6_SolidObject
		move.b	#0,$1A(a0)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d3
		btst	#6,$28(a0)
		beq.s	loc_24D6E
		moveq	#7,d3

loc_24D6E:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_24D7C
		bclr	d3,(a3)
		bra.s	BranchTo_JmpTo12_DespawnObject
; ===========================================================================

loc_24D7C:				
		tst.b	(a3)
		bne.s	loc_24D8A
		move.w	#$CD,d0	
		jsr	PlaySound

loc_24D8A:				
		bset	d3,(a3)
		move.b	#1,$1A(a0)

BranchTo_JmpTo12_DespawnObject:				
		jmpto	DespawnObject,JmpTo12_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_24D96:				
		dc.w word_24D9C-Map_24D96			; 0
		dc.w word_24DA6-Map_24D96			; 1
		dc.w word_24DB0-Map_24D96			; 2
word_24D9C:	dc.w 1			
		dc.w $F40D,    0,    0,$FFF0			; 0
word_24DA6:	dc.w 1			
		dc.w $F40D,    8,    4,$FFF0			; 0
word_24DB0:	dc.w 1			
		dc.w $F80D,    0,    0,$FFF0			; 0
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo12_DespawnObject:				
		jmp	DespawnObject
JmpTo21_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo6_SolidObject:				
		jmp	SolidObject

		align 4
	endc	
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3D - OOZ launcher block
; ----------------------------------------------------------------------------

LauncherBlock:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_24DDE(pc,d0.w),d1
		jmp	off_24DDE(pc,d1.w)
; ===========================================================================
off_24DDE:	
		dc.w loc_24DE6-off_24DDE			; 0 
		dc.w loc_24E26-off_24DDE			; 1
		dc.w loc_24F3C-off_24DDE			; 2
		dc.w loc_24F52-off_24DDE			; 3
; ===========================================================================

loc_24DE6:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_250BA,ost_mappings(a0)
		move.w	#tile_Nem_StripedBlocksVert+tile_pal4,ost_tile(a0)
		tst.b	$28(a0)
		beq.s	loc_24E0A
		move.w	#tile_Nem_StripedBlocksHoriz+tile_pal4,ost_tile(a0)
		move.b	#2,$1A(a0)

loc_24E0A:				
		jsrto	Adjust2PArtPointer,JmpTo22_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		bset	#7,$22(a0)
		move.b	#4,$18(a0)

loc_24E26:				
		move.b	($FFFFB01C).w,$32(a0)
		move.b	($FFFFB05C).w,$33(a0)
		move.w	($FFFFB012).w,$34(a0)
		move.w	($FFFFB052).w,$36(a0)
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo7_SolidObject
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_24E60

loc_24E5C:				
		bra.w	JmpTo13_DespawnObject
; ===========================================================================

loc_24E60:				
		cmpi.b	#$18,d0
		bne.s	loc_24E96
		cmpi.b	#2,$32(a0)
		beq.s	loc_24E76
		cmpi.b	#2,$33(a0)
		bne.s	loc_24E5C

loc_24E76:				
		lea	($FFFFB000).w,a1
		move.b	$32(a0),d0
		move.w	$34(a0),d1
		bsr.s	loc_24EB2
		lea	($FFFFB040).w,a1
		move.b	$33(a0),d0
		move.w	$36(a0),d1
		bsr.s	loc_24EB2
		bra.w	loc_24F04
; ===========================================================================

loc_24E96:				
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_24EE8
		cmpi.b	#2,$32(a0)
		bne.s	loc_24E5C
		lea	($FFFFB000).w,a1
		move.w	$34(a0),d1
		bsr.s	loc_24EB8
		bra.s	loc_24F04
; ===========================================================================

loc_24EB2:				
		cmpi.b	#2,d0
		bne.s	loc_24ED4

loc_24EB8:				
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		move.w	d1,ost_y_vel(a1)

loc_24ED4:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		rts	
; ===========================================================================

loc_24EE8:				
		andi.b	#$10,d0
		beq.w	loc_24E5C
		cmpi.b	#2,$33(a0)
		bne.w	loc_24E5C
		lea	($FFFFB040).w,a1
		move.w	$36(a0),d1
		bsr.s	loc_24EB8

loc_24F04:				
		andi.b	#-$19,$22(a0)
		jsrto	FindNextFreeObj,JmpTo9_FindNextFreeObj
		bne.s	loc_24F28
		moveq	#0,d0
		move.w	#$A,d1

loc_24F16:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_24F16
		move.b	#6,$24(a1)

loc_24F28:				
		lea	(word_2507A).l,a4
		addq.b	#1,$1A(a0)
		moveq	#$F,d1
		move.w	#$18,d2
		jsrto	SmashObject,JmpTo2_SmashObject

loc_24F3C:				
		jsrto	SpeedToPos,JmpTo10_SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		tst.b	ost_render(a0)
		bpl.w	JmpTo26_DeleteObject
		jmpto	DisplaySprite,JmpTo14_DisplaySprite
; ===========================================================================

loc_24F52:				
		lea	($FFFFB000).w,a1
		lea	$2C(a0),a4
		bsr.s	loc_24F74
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4
		bsr.s	loc_24F74
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	JmpTo3_DespawnObject3
		rts	
; ===========================================================================

loc_24F74:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_24F80(pc,d0.w),d0
		jmp	off_24F80(pc,d0.w)
; ===========================================================================
off_24F80:	
		dc.w loc_24F84-off_24F80			; 0 
		dc.w loc_25036-off_24F80			; 1
; ===========================================================================

loc_24F84:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bcc.w	locret_25034
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		tst.b	$28(a0)
		beq.s	loc_24FAA
		addi.w	#$10,d1

loc_24FAA:				
		cmpi.w	#$10,d1
		bcc.w	locret_25034
		cmpa.w	#-$4FC0,a1
		bne.s	loc_24FC2
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.w	locret_25034

loc_24FC2:				
		addq.b	#2,(a4)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,ost_inertia(a1)
		tst.b	$28(a0)
		beq.s	loc_24FF0
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#-$800,ost_y_vel(a1)
		bra.s	loc_25002
; ===========================================================================

loc_24FF0:				
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#$800,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)

loc_25002:				
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		bset	#3,$22(a1)
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0
		move.b	d0,$3D(a1)
		move.w	#$BE,d0	
		jsr	PlaySound

locret_25034:				
		rts	
; ===========================================================================

loc_25036:				
		tst.b	ost_render(a1)
		bmi.s	loc_25054
		move.b	#0,$2A(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#0,(a4)
		rts	
; ===========================================================================

loc_25054:				
		move.l	ost_x_pos(a1),d2
		move.l	ost_y_pos(a1),d3
		move.w	ost_x_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,ost_x_pos(a1)
		move.l	d3,ost_y_pos(a1)
		rts	
; ===========================================================================
word_2507A:	dc.w $FC00					; 0 
		dc.w $FC00					; 1
		dc.w $FE00					; 2
		dc.w $FC00					; 3
		dc.w  $200					; 4
		dc.w $FC00					; 5
		dc.w  $400					; 6
		dc.w $FC00					; 7
		dc.w $FC40					; 8
		dc.w $FE00					; 9
		dc.w $FE40					; 10
		dc.w $FE00					; 11
		dc.w  $1C0					; 12
		dc.w $FE00					; 13
		dc.w  $3C0					; 14
		dc.w $FE00					; 15
		dc.w $FC80					; 16
		dc.w  $200					; 17
		dc.w $FE80					; 18
		dc.w  $200					; 19
		dc.w  $180					; 20
		dc.w  $200					; 21
		dc.w  $380					; 22
		dc.w  $200					; 23
		dc.w $FCC0					; 24
		dc.w  $400					; 25
		dc.w $FEC0					; 26
		dc.w  $400					; 27
		dc.w  $140					; 28
		dc.w  $400					; 29
		dc.w  $340					; 30
		dc.w  $400					; 31
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_250BA:				
		dc.w word_250C2-Map_250BA			; 0
		dc.w word_250E4-Map_250BA			; 1
		dc.w word_25166-Map_250BA			; 2
		dc.w word_25188-Map_250BA			; 3
word_250C2:	dc.w 4			
word_250C4:	dc.w $F003,    0,    0,$FFF0			; 0
		dc.w $F003,    0,    0,$FFF8			; 4
		dc.w $F003,    0,    0,	   0			; 8
		dc.w $F003,    0,    0,	   8			; 12
word_250E4:	dc.w $10		
		dc.w $F000,    0,    0,$FFF0			; 0
		dc.w $F000,    0,    0,$FFF8			; 4
		dc.w $F000,    0,    0,	   0			; 8
		dc.w $F000,    0,    0,	   8			; 12
		dc.w $F800,    1,    0,$FFF0			; 16
		dc.w $F800,    1,    0,$FFF8			; 20
		dc.w $F800,    1,    0,	   0			; 24
		dc.w $F800,    1,    0,	   8			; 28
		dc.w	 0,    2,    1,$FFF0			; 32
		dc.w	 0,    2,    1,$FFF8			; 36
		dc.w	 0,    2,    1,	   0			; 40
		dc.w	 0,    2,    1,	   8			; 44
		dc.w  $800,    3,    1,$FFF0			; 48
		dc.w  $800,    3,    1,$FFF8			; 52
		dc.w  $800,    3,    1,	   0			; 56
		dc.w  $800,    3,    1,	   8			; 60
word_25166:	dc.w 4			
		dc.w $F00C,    0,    0,$FFF0			; 0
		dc.w $F80C,    0,    0,$FFF0			; 4
		dc.w	$C,    0,    0,$FFF0			; 8
		dc.w  $80C,    0,    0,$FFF0			; 12
word_25188:	dc.w $10		
		dc.w $F000,    0,    0,$FFF0			; 0
		dc.w $F000,    1,    0,$FFF8			; 4
		dc.w $F000,    2,    1,	   0			; 8
		dc.w $F000,    3,    1,	   8			; 12
		dc.w $F800,    0,    0,$FFF0			; 16
		dc.w $F800,    1,    0,$FFF8			; 20
		dc.w $F800,    2,    1,	   0			; 24
		dc.w $F800,    3,    1,	   8			; 28
		dc.w	 0,    0,    0,$FFF0			; 32
		dc.w	 0,    1,    0,$FFF8			; 36
		dc.w	 0,    2,    1,	   0			; 40
		dc.w	 0,    3,    1,	   8			; 44
		dc.w  $800,    0,    0,$FFF0			; 48
		dc.w  $800,    1,    0,$FFF8			; 52
		dc.w  $800,    2,    1,	   0			; 56
		dc.w  $800,    3,    1,	   8			; 60
; ===========================================================================

	if Revision<2
		nop
	endc
	
	if RemoveJmpTos
JmpTo3_DespawnObject3:				
		jmp	DespawnObject3
JmpTo26_DeleteObject:				
		jmp	DeleteObject		

	else

JmpTo14_DisplaySprite:				
		jmp	DisplaySprite
JmpTo26_DeleteObject:				
		jmp	DeleteObject
JmpTo13_DespawnObject:				
		jmp	DespawnObject
JmpTo9_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo3_DespawnObject3:				
		jmp	DespawnObject3
JmpTo22_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo2_SmashObject:				
		jmp	SmashObject
JmpTo7_SolidObject:				
		jmp	SolidObject
JmpTo10_SpeedToPos:				
		jmp	SpeedToPos 

		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 48 - OOZ transporter balls
; ----------------------------------------------------------------------------

LauncherBall:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_25262(pc,d0.w),d1
		jsr	off_25262(pc,d1.w)
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	JmpTo14_DespawnObject
		jmpto	DisplaySprite,JmpTo15_DisplaySprite

    if RemoveJmpTos
JmpTo14_DespawnObject:
		jmp	DespawnObject
    endc
    	
; ===========================================================================
off_25262:	
		dc.w loc_25276-off_25262			; 0 
		dc.w loc_252C6-off_25262			; 2

byte_25266:	; ost_render, ost_3F
		dc.b   render_rel,  							0 ; 0
		dc.b   render_rel|render_yflip,					7 ; 2
		dc.b   render_rel|render_xflip|render_yflip,	0 ; 4
		dc.b   render_rel|render_xflip,					7 ; 6
		dc.b   render_rel|render_xflip,					0 ; 8
		dc.b   render_rel,								7 ; 10
		dc.b   render_rel|render_yflip,					0 ; 12
		dc.b   render_rel|render_xflip|render_yflip,	7 ; 14
; ===========================================================================

loc_25276:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_254FE,ost_mappings(a0)
		move.w	#tile_Nem_LaunchBall+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo23_Adjust2PArtPointer
		move.b	$28(a0),d0
		andi.w	#$F,d0
		btst	#0,$22(a0)
		beq.s	loc_2529E
		addq.w	#4,d0

loc_2529E:				
		add.w	d0,d0
		move.b	byte_25266(pc,d0.w),ost_render(a0)
		move.b	byte_25266+1(pc,d0.w),$3F(a0)
		beq.s	loc_252B4
		move.b	#1,$3E(a0)

loc_252B4:				
		move.b	$3F(a0),$1A(a0)
		move.b	#$28,$19(a0)
		move.b	#1,$18(a0)

loc_252C6:				
		lea	($FFFFB000).w,a1
		lea	$2C(a0),a4
		moveq	#$2C,d2
		bsr.s	loc_252DC
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4
		moveq	#$36,d2

loc_252DC:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_252E8(pc,d0.w),d0
		jmp	off_252E8(pc,d0.w)
; ===========================================================================
off_252E8:	
		dc.w loc_252F0-off_252E8			; 0 
		dc.w loc_253C6-off_252E8			; 1
		dc.w loc_25474-off_252E8			; 2
		dc.w loc_254F2-off_252E8			; 3
; ===========================================================================

loc_252F0:				
		tst.w	(v_debug_active).w
		bne.w	locret_253C4
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bcc.w	locret_253C4
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		addi.w	#$10,d1
		cmpi.w	#$20,d1
		bcc.w	locret_253C4
		cmpa.w	#-$4FC0,a1
		bne.s	loc_25330
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.w	locret_253C4

loc_25330:				
		cmpi.b	#6,$24(a1)
		bcc.w	locret_253C4
		tst.w	(v_debug_active).w
		bne.w	locret_253C4
		btst	#3,$22(a1)
		beq.s	loc_25360
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		move.b	#0,(a3,d2.w)

loc_25360:				
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0
		move.b	d0,$3D(a1)
		addq.b	#2,(a4)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$1000,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		bset	#3,$22(a1)
		move.b	$3F(a0),$1A(a0)
		move.w	#$BE,d0	
		jsr	PlaySound

locret_253C4:				
		rts	
; ===========================================================================

loc_253C6:				
		tst.b	$3E(a0)
		bne.s	loc_253EE
		cmpi.b	#7,$1A(a0)
		beq.s	loc_25408
		subq.w	#1,$1E(a0)
		bpl.s	locret_253EC
		move.w	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#7,$1A(a0)
		beq.s	loc_25408

locret_253EC:				
		rts	
; ===========================================================================

loc_253EE:				
		tst.b	$1A(a0)
		beq.s	loc_25408
		subq.w	#1,$1E(a0)
		bpl.s	locret_253EC
		move.w	#7,$1E(a0)
		subq.b	#1,$1A(a0)
		beq.s	loc_25408
		rts	
; ===========================================================================

loc_25408:				
		addq.b	#2,(a4)
		move.b	$28(a0),d0
		addq.b	#1,d0
		btst	#0,$22(a0)
		beq.s	loc_2541A
		subq.b	#2,d0

loc_2541A:				
		andi.w	#3,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	word_25464(pc,d0.w),ost_x_vel(a1)
		move.w	word_25464+2(pc,d0.w),ost_y_vel(a1)
		move.w	#3,$1E(a0)
		tst.b	$28(a0)
		bpl.s	locret_25462
		move.b	#0,$2A(a1)

loc_25440:
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#0,$3C(a1)
		move.b	#2,$24(a1)
		move.b	#6,(a4)
		move.w	#7,$3C(a0)

locret_25462:				
		rts	
; ===========================================================================
word_25464:	
		dc.w	 0,$F000				; 0
		dc.w $1000,    0				; 2
		dc.w	 0,$1000				; 4
		dc.w $F000,    0				; 6
; ===========================================================================

loc_25474:				
		tst.b	ost_render(a1)
		bmi.s	loc_25492
		move.b	#0,$2A(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#0,(a4)
		rts	
; ===========================================================================

loc_25492:				
		cmpi.b	#2,$2C(a0)
		beq.s	loc_254CC
		cmpi.b	#2,$36(a0)
		beq.s	loc_254CC
		subq.w	#1,$1E(a0)
		bpl.s	loc_254CC
		move.w	#1,$1E(a0)
		tst.b	$3E(a0)
		beq.s	loc_254C2
		cmpi.b	#7,$1A(a0)
		beq.s	loc_254CC
		addq.b	#1,$1A(a0)
		bra.s	loc_254CC
; ===========================================================================

loc_254C2:				
		tst.b	$1A(a0)
		beq.s	loc_254CC
		subq.b	#1,$1A(a0)

loc_254CC:				
		move.l	ost_x_pos(a1),d2
		move.l	ost_y_pos(a1),d3
		move.w	ost_x_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,ost_x_pos(a1)
		move.l	d3,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_254F2:				
		subq.w	#1,$3C(a0)
		bpl.s	locret_254FC
		move.b	#0,(a4)

locret_254FC:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_254FE:				
		dc.w word_2550E-Map_254FE			; 0
		dc.w word_25550-Map_254FE			; 1
		dc.w word_25582-Map_254FE			; 2
		dc.w word_255A4-Map_254FE			; 3
		dc.w word_255C6-Map_254FE			; 4
		dc.w word_255E8-Map_254FE			; 5
		dc.w word_2560A-Map_254FE			; 6
		dc.w word_2563C-Map_254FE			; 7
word_2550E:	dc.w 8			
		dc.w $D804,    0,    0,$FFF0			; 0
		dc.w $D804, $800, $800,	   0			; 4
		dc.w $E004,    2,    1,$FFF0			; 8
		dc.w $E004, $802, $801,	   0			; 12
		dc.w $E80A,  $11,    8,$FFE8			; 16
		dc.w $E80A, $811, $808,	   0			; 20
		dc.w	$A,$1008,$1004,$FFE8			; 24
		dc.w	$A,$1808,$1804,	   0			; 28
word_25550:	dc.w 6			
		dc.w $E004,    0,    0,$FFF0			; 0
		dc.w $E004, $800, $800,	   0			; 4
		dc.w $E80A,  $11,    8,$FFE8			; 8
		dc.w $E80A, $811, $808,	   0			; 12
		dc.w	$A,$1008,$1004,$FFE8			; 16
		dc.w	$A,$1808,$1804,	   0			; 20
word_25582:	dc.w 4			
word_25584:	dc.w $E80A,  $11,    8,$FFE8			; 0
		dc.w $E80A, $811, $808,	   0			; 4
		dc.w	$A,$1008,$1004,$FFE8			; 8
		dc.w	$A,$1808,$1804,	   0			; 12
word_255A4:	dc.w 4			
word_255A6:	dc.w $E80A,  $1A,   $D,$FFE8			; 0
		dc.w $E80A,$1823,$1811,	   0			; 4
		dc.w	$A,  $23,  $11,$FFE8			; 8
		dc.w	$A,$181A,$180D,	   0			; 12
word_255C6:	dc.w 4			
		dc.w $E80A,$1023,$1011,$FFE8			; 0
		dc.w $E80A, $81A, $80D,	   0			; 4
		dc.w	$A,$101A,$100D,$FFE8			; 8
		dc.w	$A, $823, $811,	   0			; 12
word_255E8:	dc.w 4			
		dc.w $E80A,    8,    4,$FFE8			; 0
		dc.w $E80A,$102C,$1016,	   0			; 4
		dc.w	$A,$1008,$1004,$FFE8			; 8
		dc.w	$A,  $2C,  $16,	   0			; 12
word_2560A:	dc.w 6			
		dc.w $E80A,    8,    4,$FFE8			; 0
		dc.w $E80A,$102C,$1016,	   0			; 4
		dc.w	$A,$1008,$1004,$FFE8			; 8
		dc.w	$A,  $2C,  $16,	   0			; 12
		dc.w $F001,    6,    3,	 $18			; 16
		dc.w	 1,$1006,$1003,	 $18			; 20
word_2563C:	dc.w 8			
		dc.w $E80A,    8,    4,$FFE8			; 0
		dc.w $E80A,$102C,$1016,	   0			; 4
		dc.w	$A,$1008,$1004,$FFE8			; 8
		dc.w	$A,  $2C,  $16,	   0			; 12
		dc.w $F001,    4,    2,	 $18			; 16
		dc.w	 1,$1004,$1002,	 $18			; 20
		dc.w $F001,    6,    3,	 $20			; 24
		dc.w	 1,$1006,$1003,	 $20			; 28
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo15_DisplaySprite:				
		jmp	DisplaySprite
JmpTo14_DespawnObject:				
		jmp	DespawnObject
JmpTo23_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc
			
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 22 - ARZ arrow shooter
; ----------------------------------------------------------------------------

ArrowShooter:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_256A2(pc,d0.w),d1
		jmp	off_256A2(pc,d1.w)
; ===========================================================================
off_256A2:	
		dc.w loc_256AC-off_256A2			; 0 
		dc.w loc_256E0-off_256A2			; 1
		dc.w loc_2572A-off_256A2			; 2
		dc.w loc_2577A-off_256A2			; 3
		dc.w loc_257BE-off_256A2			; 4
; ===========================================================================

loc_256AC:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_25804,ost_mappings(a0)
		move.w	#tile_Nem_ArrowAndShooter,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo24_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$1A(a0)
		andi.b	#$F,$28(a0)

loc_256E0:				
		cmpi.b	#2,$1C(a0)
		beq.s	loc_25706
		moveq	#0,d2
		lea	(v_ost_player1).w,a1
		bsr.s	loc_25714
		lea	(v_ost_player2).w,a1
		bsr.s	loc_25714
		tst.b	d2
		bne.s	loc_25702
		tst.b	$1C(a0)
		beq.s	loc_25702
		moveq	#2,d2

loc_25702:				
		move.b	d2,$1C(a0)

loc_25706:				
		lea	(off_257EE).l,a1
		jsrto	AnimateSprite,JmpTo5_AnimateSprite
		jmpto	DespawnObject,JmpTo15_DespawnObject
; ===========================================================================

loc_25714:				
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_25720
		neg.w	d0

loc_25720:				
		cmpi.w	#$40,d0
		bcc.s	locret_25728
		moveq	#1,d2

locret_25728:				
		rts	
; ===========================================================================

loc_2572A:				
		jsrto	FindFreeObj,JmpTo5_FindFreeObj
		bne.s	loc_25768
		_move.b	ost_id(a0),ost_id(a1)
		addq.b	#6,$24(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	$22(a0),$22(a1)
		move.w	#$DB,d0	
		jsr	PlaySound

loc_25768:				
		subq.b	#2,ost_primary_routine(a0)
		lea	(off_257EE).l,a1
		jsrto	AnimateSprite,JmpTo5_AnimateSprite
		jmpto	DespawnObject,JmpTo15_DespawnObject
; ===========================================================================

loc_2577A:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#8,ost_height(a0)
		move.b	#$10,$17(a0)
		move.b	#4,$18(a0)
		move.b	#-$65,$20(a0)
		move.b	#8,$19(a0)
		move.b	#0,$1A(a0)
		move.w	#$400,ost_x_vel(a0)
		btst	#0,$22(a0)
		beq.s	loc_257B4
		neg.w	ost_x_vel(a0)

loc_257B4:				
		move.w	#$AE,d0	
		jsr	PlaySound

loc_257BE:				
		bsr.w	JmpTo11_SpeedToPos
		btst	#0,$22(a0)
		bne.s	loc_257DE
		moveq	#-8,d3
		bsr.w	FindWallLeftObj
		tst.w	d1
		bmi.w	BranchTo_JmpTo27_DeleteObject
		jmpto	DespawnObject,JmpTo15_DespawnObject
; ===========================================================================

BranchTo_JmpTo27_DeleteObject:				
		jmpto	DeleteObject,JmpTo27_DeleteObject
; ===========================================================================

loc_257DE:				
		moveq	#8,d3
		bsr.w	FindWallRightObj
		tst.w	d1
		bmi.w	BranchTo_JmpTo27_DeleteObject
		jmpto	DespawnObject,JmpTo15_DespawnObject
; ===========================================================================
off_257EE:	
		dc.w byte_257F4-off_257EE			; 0 
		dc.w byte_257F7-off_257EE			; 1
		dc.w byte_257FB-off_257EE			; 2
		
byte_257F4:	dc.b $1F,  1,$FF				; 0 

byte_257F7:	dc.b   3,  1,  2,$FF				; 0 

byte_257FB:	dc.b   7,  3,  4,$FC,  4,  3,  1,$FD,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_25804:				
		dc.w word_2580E-Map_25804			; 0
		dc.w word_25818-Map_25804			; 1
		dc.w word_2582A-Map_25804			; 2
		dc.w word_25844-Map_25804			; 3
		dc.w word_25856-Map_25804			; 4
word_2580E:	dc.w 1			
		dc.w $FC0C,$2000,$2000,$FFF0			; 0
word_25818:	dc.w 2			
		dc.w $F809,$2004,$2002,$FFF0			; 0
		dc.w $F801,$200B,$2005,	   8			; 4
word_2582A:	dc.w 3			
		dc.w $FC00,   $A,    5,$FFFC			; 0
		dc.w $F809,$2004,$2002,$FFF0			; 4
		dc.w $F801,$200B,$2005,	   8			; 8
word_25844:	dc.w 2			
		dc.w $F809,$2004,$2002,$FFF0			; 0
		dc.w $F801,$200D,$2006,	   8			; 4
word_25856:	dc.w 2			
		dc.w $F809,$2004,$2002,$FFF0			; 0
		dc.w $F801,$200F,$2007,	   8			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo27_DeleteObject:				
		jmp	DeleteObject
JmpTo5_FindFreeObj:				
		jmp	FindFreeObj
JmpTo15_DespawnObject:				
		jmp	DespawnObject
JmpTo5_AnimateSprite:				
		jmp	AnimateSprite
JmpTo24_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo11_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 23 - ARZ falling pillar
; ----------------------------------------------------------------------------

FallingPillar:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2589A(pc,d0.w),d1
		jmp	off_2589A(pc,d1.w)
; ===========================================================================
off_2589A:	
		dc.w loc_2589E-off_2589A			; 0 
		dc.w loc_25922-off_2589A			; 1
; ===========================================================================

loc_2589E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_259E6,ost_mappings(a0)
		move.w	#0+tile_pal2,ost_tile(a0)		; level art
		jsrto	Adjust2PArtPointer,JmpTo25_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#$20,ost_height(a0)
		move.b	#4,$18(a0)
		jsrto	FindNextFreeObj,JmpTo10_FindNextFreeObj
		bne.s	loc_25922
		_move.b	ost_id(a0),ost_id(a1)
		addq.b	#2,$24(a1)
		addq.b	#2,$25(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_x_pos(a0),$30(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$30,ost_y_pos(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#$10,ost_height(a1)
		move.b	#4,$18(a1)
		move.b	#1,$1A(a1)

loc_25922:				
					
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_25948
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo8_SolidObject
		jmpto	DespawnObject,JmpTo16_DespawnObject
; ===========================================================================

loc_25948:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_25956(pc,d0.w),d1
		jmp	off_25956(pc,d1.w)
; ===========================================================================
off_25956:	
		dc.w locret_2598C-off_25956			; 0 
		dc.w loc_2595E-off_25956			; 1
		dc.w loc_2598E-off_25956			; 2
		dc.w loc_259B8-off_25956			; 3
; ===========================================================================

loc_2595E:				
		tst.w	(v_debug_active).w
		bne.s	locret_2598C
		lea	($FFFFB000).w,a1
		bsr.s	loc_2596E
		lea	($FFFFB040).w,a1

loc_2596E:				
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_2597A
		neg.w	d0

loc_2597A:				
		cmpi.w	#$80,d0	
		bcc.s	locret_2598C
		move.b	#4,$25(a0)
		move.w	#8,$34(a0)

locret_2598C:				

		rts	
; ===========================================================================

loc_2598E:				
		move.w	$34(a0),d0
		subq.w	#1,d0
		bcc.s	loc_2599C
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2599C:				
		move.w	d0,$34(a0)
		move.b	byte_259B0(pc,d0.w),d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,ost_x_pos(a0)
		rts	
; ===========================================================================
byte_259B0:	
		dc.b   0					; 0
		dc.b   1					; 1
		dc.b  -1					; 2
		dc.b   1					; 3
		dc.b   0					; 4
		dc.b  -1					; 5
		dc.b   0					; 6
		dc.b   1					; 7
; ===========================================================================

loc_259B8:				
		jsrto	SpeedToPos,JmpTo12_SpeedToPos
		addi.w	#$38,ost_y_vel(a0)
		bsr.w	FindFloorObj
		tst.w	d1
		bpl.w	locret_259E4
		add.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	#2,$1A(a0)
		clr.b	$25(a0)

locret_259E4:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_259E6:				
		dc.w word_259EC-Map_259E6			; 0
		dc.w word_25A1E-Map_259E6			; 1
		dc.w word_25A38-Map_259E6			; 2
word_259EC:	dc.w 6			
word_259EE:	dc.w $E005,  $5D,  $2E,$FFE0			; 0
		dc.w $E005, $85D, $82E,	 $10			; 4
		dc.w $E00D,  $61,  $30,$FFF0			; 8
		dc.w $F00D,  $69,  $34,$FFF0			; 12
		dc.w	$D,  $69,  $34,$FFF0			; 16
		dc.w $100D,  $71,  $38,$FFF0			; 20
word_25A1E:	dc.w 3			
		dc.w $F00D,  $69,  $34,$FFF0			; 0
		dc.w	$D,  $79,  $3C,$FFF0			; 4
		dc.w $1004,  $81,  $40,$FFF0			; 8
word_25A38:	dc.w 4			
		dc.w  $90D,$208B,$2045,$FFF0			; 0
		dc.w $F00D,  $69,  $34,$FFF0			; 4
		dc.w	$D,  $79,  $3C,$FFF0			; 8
		dc.w $1004,  $81,  $40,$FFF0			; 12
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2B - ARZ rising pillar
; ----------------------------------------------------------------------------

RisingPillar:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_25A68(pc,d0.w),d1
		jmp	off_25A68(pc,d1.w)
; ===========================================================================
off_25A68:	
		dc.w loc_25A6E-off_25A68			; 0 
		dc.w loc_25A9C-off_25A68			; 1
		dc.w loc_25B8E-off_25A68			; 2
; ===========================================================================

loc_25A6E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_25C6E,ost_mappings(a0)
		move.w	#0+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo25_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#$18,ost_height(a0)
		move.b	#4,$18(a0)

loc_25A9C:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_25B28
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo8_SolidObject
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.w	loc_25ACE
		jmpto	DespawnObject,JmpTo16_DespawnObject
; ===========================================================================

loc_25ACE:				
		lea	(word_25BBE).l,a4
		lea	(byte_25BB0).l,a2
		addq.b	#7,$1A(a0)
		bsr.w	loc_25BF6
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_25AF6
		lea	($FFFFB040).w,a1
		addq.b	#1,d6
		bsr.s	loc_25AF6
		bra.w	loc_25B8E
; ===========================================================================

loc_25AF6:				
		bclr	d6,$22(a0)
		beq.s	locret_25B26
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)

locret_25B26:				
		rts	
; ===========================================================================

loc_25B28:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_25B36(pc,d0.w),d1
		jmp	off_25B36(pc,d1.w)
; ===========================================================================
off_25B36:	
		dc.w loc_25B3C-off_25B36			; 0 
		dc.w loc_25B66-off_25B36			; 1
		dc.w locret_25B64-off_25B36			; 2
; ===========================================================================

loc_25B3C:				
		tst.w	(v_debug_active).w
		bne.s	locret_25B64
		lea	($FFFFB000).w,a1
		bsr.s	loc_25B4C
		lea	($FFFFB040).w,a1

loc_25B4C:				
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_25B58
		neg.w	d0

loc_25B58:				
		cmpi.w	#$40,d0
		bcc.s	locret_25B64
		move.b	#2,$25(a0)

locret_25B64:				
		rts	
; ===========================================================================

loc_25B66:				
		subq.w	#1,$34(a0)
		bcc.s	locret_25B8C
		move.w	#3,$34(a0)
		subq.w	#4,ost_y_pos(a0)
		addq.b	#4,ost_height(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#6,$1A(a0)
		bne.s	locret_25B8C
		move.b	#4,$25(a0)

locret_25B8C:				
		rts	
; ===========================================================================

loc_25B8E:				
					
		tst.b	$3F(a0)
		beq.s	loc_25B9A
		subq.b	#1,$3F(a0)
		bra.s	loc_25BA4
; ===========================================================================

loc_25B9A:				
		jsrto	SpeedToPos,JmpTo12_SpeedToPos
		addi.w	#$18,ost_y_vel(a0)

loc_25BA4:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo28_DeleteObject
		jmpto	DisplaySprite,JmpTo16_DisplaySprite
; ===========================================================================
byte_25BB0:
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b   0					; 3
		dc.b   4					; 4
		dc.b   4					; 5
		dc.b   8					; 6
		dc.b   8					; 7
		dc.b  $C					; 8
		dc.b  $C					; 9
		dc.b $10					; 10
		dc.b $10					; 11
		dc.b $14					; 12
		dc.b $14					; 13
		
word_25BBE:	
		dc.w $FE00,$FE00,$200,$FE00			; 0 
		dc.w $FE40,$FE40,$1C0,$FE40			; 4
		dc.w $FE80,$FE80,$180,$FE80			; 8
		dc.w $FEC0,$FEC0,$140,$FEC0			; 12
		dc.w $FF00,$FF00,$100,$FF00			; 16
		dc.w $FF40,$FF40,$C0,$FF40			; 20
		dc.w $FF80,$FF80,$80,$FF80			; 24
; ===========================================================================

loc_25BF6:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		movea.l	ost_mappings(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#render_rawmap_bit,ost_render(a0)
		_move.b	ost_id(a0),d4
		move.b	ost_render(a0),d5
		movea.l	a0,a1
		bra.s	loc_25C24
; ===========================================================================

loc_25C1C:				
		jsrto	FindNextFreeObj,JmpTo10_FindNextFreeObj
		bne.s	loc_25C64
		addq.w	#8,a3

loc_25C24:				
		move.b	#4,$24(a1)
		_move.b	d4,ost_id(a1)
		move.l	a3,ost_mappings(a1)
		move.b	d5,ost_render(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.w	(a4)+,ost_x_vel(a1)
		move.w	(a4)+,ost_y_vel(a1)
		move.b	(a2)+,$3F(a1)
		dbf	d1,loc_25C1C

loc_25C64:				
		move.w	#$CB,d0	
		jmp	PlaySound
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_25C6E:				
		dc.w word_25C8A-Map_25C6E			; 0
		dc.w word_25CBC-Map_25C6E			; 1
		dc.w word_25CF6-Map_25C6E			; 2
		dc.w word_25D30-Map_25C6E			; 3
		dc.w word_25D72-Map_25C6E			; 4
		dc.w word_25DB4-Map_25C6E			; 5
		dc.w word_25DFE-Map_25C6E			; 6
		dc.w word_25E48-Map_25C6E			; 7
		dc.w word_25E8A-Map_25C6E			; 8
		dc.w word_25EDC-Map_25C6E			; 9
		dc.w word_25F2E-Map_25C6E			; 10
		dc.w word_25F90-Map_25C6E			; 11
		dc.w word_25FF2-Map_25C6E			; 12
		dc.w word_26064-Map_25C6E			; 13
word_25C8A:	dc.w 6			
		dc.w $100D,$208B,$2045,$FFF0			; 0
		dc.w $E805,  $5D,  $2E,$FFE0			; 4
		dc.w $E805, $85D, $82E,	 $10			; 8
		dc.w $E80D,  $61,  $30,$FFF0			; 12
		dc.w $F80D,  $69,  $34,$FFF0			; 16
		dc.w  $80D,  $83,  $41,$FFF0			; 20
word_25CBC:	dc.w 7			
		dc.w $140D,$208B,$2045,$FFF0			; 0
		dc.w $E405,  $5D,  $2E,$FFE0			; 4
		dc.w $E405, $85D, $82E,	 $10			; 8
		dc.w $E40D,  $61,  $30,$FFF0			; 12
		dc.w $F40D,  $69,  $34,$FFF0			; 16
		dc.w $FC0D,  $69,  $34,$FFF0			; 20
		dc.w  $C0D,  $83,  $41,$FFF0			; 24
word_25CF6:	dc.w 7			
		dc.w $180D,$208B,$2045,$FFF0			; 0
		dc.w $E005,  $5D,  $2E,$FFE0			; 4
		dc.w $E005, $85D, $82E,	 $10			; 8
		dc.w $E00D,  $61,  $30,$FFF0			; 12
		dc.w $F00D,  $69,  $34,$FFF0			; 16
		dc.w	$D,  $69,  $34,$FFF0			; 20
		dc.w $100D,  $83,  $41,$FFF0			; 24
word_25D30:	dc.w 8			
		dc.w $1C0D,$208B,$2045,$FFF0			; 0
		dc.w $DC05,  $5D,  $2E,$FFE0			; 4
		dc.w $DC05, $85D, $82E,	 $10			; 8
		dc.w $DC0D,  $61,  $30,$FFF0			; 12
		dc.w $EC0D,  $69,  $34,$FFF0			; 16
		dc.w $FC0D,  $69,  $34,$FFF0			; 20
		dc.w  $40D,  $69,  $34,$FFF0			; 24
		dc.w $140D,  $83,  $41,$FFF0			; 28
word_25D72:	dc.w 8			
		dc.w $200D,$208B,$2045,$FFF0			; 0
		dc.w $D805,  $5D,  $2E,$FFE0			; 4
		dc.w $D805, $85D, $82E,	 $10			; 8
		dc.w $D80D,  $61,  $30,$FFF0			; 12
		dc.w $E80D,  $69,  $34,$FFF0			; 16
		dc.w $F80D,  $69,  $34,$FFF0			; 20
		dc.w  $80D,  $69,  $34,$FFF0			; 24
		dc.w $180D,  $83,  $41,$FFF0			; 28
word_25DB4:	dc.w 9			
		dc.w $240D,$208B,$2045,$FFF0			; 0
		dc.w $D405,  $5D,  $2E,$FFE0			; 4
		dc.w $D405, $85D, $82E,	 $10			; 8
		dc.w $D40D,  $61,  $30,$FFF0			; 12
		dc.w $E40D,  $69,  $34,$FFF0			; 16
		dc.w $F40D,  $69,  $34,$FFF0			; 20
		dc.w  $40D,  $69,  $34,$FFF0			; 24
		dc.w  $C0D,  $69,  $34,$FFF0			; 28
		dc.w $1C0D,  $83,  $41,$FFF0			; 32
word_25DFE:	dc.w 9			
		dc.w $280D,$208B,$2045,$FFF0			; 0
		dc.w $D005,  $5D,  $2E,$FFE0			; 4
		dc.w $D005, $85D, $82E,	 $10			; 8
		dc.w $D00D,  $61,  $30,$FFF0			; 12
		dc.w $E00D,  $69,  $34,$FFF0			; 16
		dc.w $F00D,  $69,  $34,$FFF0			; 20
		dc.w	$D,  $69,  $34,$FFF0			; 24
		dc.w $100D,  $69,  $34,$FFF0			; 28
		dc.w $200D,  $83,  $41,$FFF0			; 32
word_25E48:	dc.w 8			
		dc.w $E805,  $5D,  $2E,$FFE0			; 0
		dc.w $E805, $85D, $82E,	 $10			; 4
		dc.w $E805,  $61,  $30,$FFF0			; 8
		dc.w $E805,  $65,  $32,	   0			; 12
		dc.w $F805,  $69,  $34,$FFF0			; 16
		dc.w $F805,  $6D,  $36,	   0			; 20
		dc.w  $805,  $83,  $41,$FFF0			; 24
		dc.w  $805,  $87,  $43,	   0			; 28
word_25E8A:	dc.w $A			
		dc.w $E405,  $5D,  $2E,$FFE0			; 0
		dc.w $E405, $85D, $82E,	 $10			; 4
		dc.w $E405,  $61,  $30,$FFF0			; 8
		dc.w $E405,  $65,  $32,	   0			; 12
		dc.w $F405,  $69,  $34,$FFF0			; 16
		dc.w $F405,  $6D,  $36,	   0			; 20
		dc.w $FC05,  $69,  $34,$FFF0			; 24
		dc.w $FC05,  $6D,  $36,	   0			; 28
		dc.w  $C05,  $83,  $41,$FFF0			; 32
		dc.w  $C05,  $87,  $43,	   0			; 36
word_25EDC:	dc.w $A			
		dc.w $E005,  $5D,  $2E,$FFE0			; 0
		dc.w $E005, $85D, $82E,	 $10			; 4
		dc.w $E005,  $61,  $30,$FFF0			; 8
		dc.w $E005,  $65,  $32,	   0			; 12
		dc.w $F005,  $69,  $34,$FFF0			; 16
		dc.w $F005,  $6D,  $36,	   0			; 20
		dc.w	 5,  $69,  $34,$FFF0			; 24
		dc.w	 5,  $6D,  $36,	   0			; 28
		dc.w $1005,  $83,  $41,$FFF0			; 32
		dc.w $1005,  $87,  $43,	   0			; 36
word_25F2E:	dc.w $C			
		dc.w $DC05,  $5D,  $2E,$FFE0			; 0
		dc.w $DC05, $85D, $82E,	 $10			; 4
		dc.w $DC05,  $61,  $30,$FFF0			; 8
		dc.w $DC05,  $65,  $32,	   0			; 12
		dc.w $EC05,  $69,  $34,$FFF0			; 16
		dc.w $EC05,  $6D,  $36,	   0			; 20
		dc.w $FC05,  $69,  $34,$FFF0			; 24
		dc.w $FC05,  $6D,  $36,	   0			; 28
		dc.w  $405,  $69,  $34,$FFF0			; 32
		dc.w  $405,  $6D,  $36,	   0			; 36
		dc.w $1405,  $83,  $41,$FFF0			; 40
		dc.w $1405,  $87,  $43,	   0			; 44
word_25F90:	dc.w $C			
		dc.w $D805,  $5D,  $2E,$FFE0			; 0
		dc.w $D805, $85D, $82E,	 $10			; 4
		dc.w $D805,  $61,  $30,$FFF0			; 8
		dc.w $D805,  $65,  $32,	   0			; 12
		dc.w $E805,  $69,  $34,$FFF0			; 16
		dc.w $E805,  $6D,  $36,	   0			; 20
		dc.w $F805,  $69,  $34,$FFF0			; 24
		dc.w $F805,  $6D,  $36,	   0			; 28
		dc.w  $805,  $69,  $34,$FFF0			; 32
		dc.w  $805,  $6D,  $36,	   0			; 36
		dc.w $1805,  $83,  $41,$FFF0			; 40
		dc.w $1805,  $87,  $43,	   0			; 44
word_25FF2:	dc.w $E			
		dc.w $D405,  $5D,  $2E,$FFE0			; 0
		dc.w $D405, $85D, $82E,	 $10			; 4
		dc.w $D405,  $61,  $30,$FFF0			; 8
		dc.w $D405,  $65,  $32,	   0			; 12
		dc.w $E405,  $69,  $34,$FFF0			; 16
		dc.w $E405,  $6D,  $36,	   0			; 20
		dc.w $F405,  $69,  $34,$FFF0			; 24
		dc.w $F405,  $6D,  $36,	   0			; 28
		dc.w  $405,  $69,  $34,$FFF0			; 32
		dc.w  $405,  $6D,  $36,	   0			; 36
		dc.w  $C05,  $69,  $34,$FFF0			; 40
		dc.w  $C05,  $6D,  $36,	   0			; 44
		dc.w $1C05,  $83,  $41,$FFF0			; 48
		dc.w $1C05,  $87,  $43,	   0			; 52
word_26064:	dc.w $E			
		dc.w $D005,  $5D,  $2E,$FFE0			; 0
		dc.w $D005, $85D, $82E,	 $10			; 4
		dc.w $D005,  $61,  $30,$FFF0			; 8
		dc.w $D005,  $65,  $32,	   0			; 12
		dc.w $E005,  $69,  $34,$FFF0			; 16
		dc.w $E005,  $6D,  $36,	   0			; 20
		dc.w $F005,  $69,  $34,$FFF0			; 24
		dc.w $F005,  $6D,  $36,	   0			; 28
		dc.w	 5,  $69,  $34,$FFF0			; 32
		dc.w	 5,  $6D,  $36,	   0			; 36
		dc.w $1005,  $69,  $34,$FFF0			; 40
		dc.w $1005,  $6D,  $36,	   0			; 44
		dc.w $2005,  $83,  $41,$FFF0			; 48
		dc.w $2005,  $87,  $43,	   0			; 52
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos
JmpTo28_DeleteObject:				
		jmp	DeleteObject	
	
	else
			
JmpTo16_DisplaySprite:				
		jmp	DisplaySprite
JmpTo28_DeleteObject:				
		jmp	DeleteObject
JmpTo16_DespawnObject:				
		jmp	DespawnObject
JmpTo10_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo25_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo8_SolidObject:				
		jmp	SolidObject
JmpTo12_SpeedToPos:				
		jmp	SpeedToPos
	
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 2C - ARZ leaf generator
; ----------------------------------------------------------------------------

LeafGenerator:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_26112(pc,d0.w),d1
		jmp	off_26112(pc,d1.w)
; ===========================================================================
off_26112:	
		dc.w loc_2611C-off_26112			; 0 
		dc.w loc_26152-off_26112			; 1
		dc.w loc_26296-off_26112			; 2
byte_26118:	
		dc.b $D6
		dc.b $D4
		dc.b $D5
		even
; ===========================================================================

loc_2611C:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	byte_26118(pc,d0.w),$20(a0)
		move.l	#Map_20E74,ost_mappings(a0)
		move.w	#tile_Nem_Monitors+tile_hi,ost_tile(a0)
	if FixBugs
		move.b	#render_rel,ost_render(a0)
	else	
		; 'render_onscreen' should not be set here: this causes
		; this object to become visible when the player dies, because of how
		; 'ExecuteObjects.dead' works.	
		move.b	#render_rel|render_onscreen,ost_render(a0)
	endc	
		move.b	#-$80,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)

loc_26152:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo29_DeleteObject
		move.b	$21(a0),d0
		beq.s	loc_261C2
		move.w	$2E(a0),d0
		beq.s	loc_2617C
		add.b	(v_frame_counter_low).w,d0
		andi.w	#$F,d0
		bne.s	loc_26198

loc_2617C:				
		lea	($FFFFB000).w,a2
		bclr	#0,$21(a0)
		beq.s	loc_261BC
		bsr.s	loc_261C8
		tst.w	$2E(a0)
		bne.s	loc_261BC
		move.w	(v_frame_counter).w,$2E(a0)
		bra.s	loc_261BC
; ===========================================================================

loc_26198:				
		addi_.w	#8,d0
		andi.w	#$F,d0
		bne.s	loc_261BC
		lea	($FFFFB040).w,a2
		bclr	#1,$21(a0)
		beq.s	loc_261BC
		bsr.s	loc_261C8
		tst.w	$2E(a0)
		bne.s	loc_261BC
		move.w	(v_frame_counter).w,$2E(a0)

loc_261BC:				
		clr.b	$21(a0)
		rts	
; ===========================================================================

loc_261C2:				
		clr.w	$2E(a0)
		rts	
; ===========================================================================

loc_261C8:				
		move.w	ost_x_vel(a2),d0
		bpl.s	loc_261D0
		neg.w	d0

loc_261D0:				
		cmpi.w	#$200,d0
		bcc.s	loc_261E4
		move.w	ost_y_vel(a2),d0
		bpl.s	loc_261DE
		neg.w	d0

loc_261DE:				
		cmpi.w	#$200,d0
		bcs.s	loc_261C2

loc_261E4:				
		lea	(byte_26286).l,a3
		moveq	#3,d6

loc_261EC:				
		jsrto	FindFreeObj,JmpTo6_FindFreeObj
		bne.w	loc_26278
		_move.b	#id_LeafGenerator,ost_id(a1)
		move.b	#4,$24(a1)
		move.w	ost_x_pos(a2),ost_x_pos(a1)
		move.w	ost_y_pos(a2),ost_y_pos(a1)
		jsrto	RandomNumber,JmpTo2_RandomNumber
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,ost_x_pos(a1)
		swap	d0
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,ost_y_pos(a1)
		move.w	(a3)+,ost_x_vel(a1)
		move.w	(a3)+,ost_y_vel(a1)
		btst	#0,$22(a2)
		beq.s	loc_2623A
		neg.w	ost_x_vel(a1)

loc_2623A:				
		move.w	ost_x_pos(a1),$30(a1)
		move.w	ost_y_pos(a1),$34(a1)
		andi.b	#1,d0
		move.b	d0,$1A(a1)
		move.l	#off_2631E,ost_mappings(a1)
		move.w	#tile_Nem_Leaves+tile_pal4+tile_hi,ost_tile(a1)
		move.b	#render_rel|render_onscreen,ost_render(a1)
		move.b	#8,$19(a1)
		move.b	#1,$18(a1)
		move.b	#4,$38(a1)
		move.b	d1,$26(a0)

loc_26278:				
		dbf	d6,loc_261EC
		move.w	#$E5,d0	
		jmp	PlaySound
; ===========================================================================
byte_26286:	
		dc.b $FF					; 0 
		dc.b $80					; 1
		dc.b $FF					; 2
		dc.b $80					; 3
		dc.b   0					; 4
		dc.b $C0					; 5
		dc.b $FF					; 6
		dc.b $C0					; 7
		dc.b $FF					; 8
		dc.b $40					; 9
		dc.b   0					; 10
		dc.b $40					; 11
		dc.b   0					; 12
		dc.b $80					; 13
		dc.b   0					; 14
		dc.b $80					; 15
; ===========================================================================

loc_26296:				
		move.b	$38(a0),d0
		add.b	d0,$26(a0)
		add.b	(v_vblank_counter_byte).w,d0
		andi.w	#$1F,d0
		bne.s	loc_262B4
		add.b	d7,d0
		andi.b	#1,d0
		beq.s	loc_262B4
		neg.b	$38(a0)

loc_262B4:				
		move.l	$30(a0),d2
		move.l	$34(a0),d3
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$30(a0)
		move.l	d3,$34(a0)
		swap	d2
		andi.w	#3,d3
		addq.w	#4,d3
		add.w	d3,ost_y_vel(a0)
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo7_CalcSine
		asr.w	#6,d0
		add.w	$30(a0),d0
		move.w	d0,ost_x_pos(a0)
		asr.w	#6,d1
		add.w	$34(a0),d1
		move.w	d1,ost_y_pos(a0)
		subq.b	#1,$1E(a0)
		bpl.s	loc_26312
		move.b	#$B,$1E(a0)
		bchg	#1,$1A(a0)

loc_26312:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo29_DeleteObject
		jmpto	DisplaySprite,JmpTo17_DisplaySprite
		
    if RemoveJmpTos
JmpTo29_DeleteObject: ; JmpTo
		jmp	DeleteObject
    endc
    		
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_2631E:	dc.w word_26326-off_2631E			; 0 
		dc.w word_26330-off_2631E			; 1
		dc.w word_2633A-off_2631E			; 2
		dc.w word_26344-off_2631E			; 3
word_26326:	dc.w 1			
		dc.w $FC00,    0,    0,$FFFC			; 0
word_26330:	dc.w 1			
		dc.w $FC04,    1,    0,$FFF8			; 0
word_2633A:	dc.w 1			
		dc.w $FC04,    3,    1,$FFF8			; 0
word_26344:	dc.w 1			
		dc.w $FC04,    5,    2,$FFF8			; 0
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo17_DisplaySprite:				
		jmp	DisplaySprite
JmpTo29_DeleteObject:				
		jmp	DeleteObject
JmpTo6_FindFreeObj:				
		jmp	FindFreeObj
JmpTo2_RandomNumber:				
		jmp	RandomNumber
JmpTo7_CalcSine:				
		jmp	CalcSine

		align 4
	endc
	 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 40 - Pressure spring from CPZ, ARZ, and MCZ (the red "diving board" springboard)
; ----------------------------------------------------------------------------

Springboard:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_26382(pc,d0.w),d1
		jsr	off_26382(pc,d1.w)
		jmpto	DespawnObject,JmpTo17_DespawnObject
; ===========================================================================
off_26382:	dc.w loc_2638C-off_26382			; 0 
		dc.w loc_263C8-off_26382			; 1
word_26386:	dc.w $FC00					; 0
		dc.w $F600					; 1
		dc.w $F800					; 2
; ===========================================================================

loc_2638C:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_265F4,ost_mappings(a0)
		move.w	#tile_Nem_LeverSpring,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo26_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$1C,$19(a0)
		move.b	#4,$18(a0)
		bset	#7,$22(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_26386(pc,d0.w),$30(a0)

loc_263C8:				
		lea	(off_265E8).l,a1			; could be PC-relative
		jsrto	AnimateSprite,JmpTo6_AnimateSprite
		move.w	#$27,d1
		move.w	#8,d2
		move.w	ost_x_pos(a0),d4
		lea	byte_26598(pc),a2
		tst.b	$1A(a0)
		beq.s	loc_263EC
		lea	byte_265C0(pc),a2

loc_263EC:				
		lea	(v_ost_player1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsrto	SolidObject_Heightmap_SingleCharacter,JmpTo_SolidObject_Heightmap_SingleCharacter
		btst	#3,$22(a0)
		beq.s	loc_26404
		bsr.s	loc_2641E

loc_26404:				
		movem.l	(sp)+,d1-d4
		lea	(v_ost_player2).w,a1
		moveq	#4,d6
		jsrto	SolidObject_Heightmap_SingleCharacter,JmpTo_SolidObject_Heightmap_SingleCharacter
		btst	#4,$22(a0)
		beq.s	locret_2641C
		bsr.s	loc_2641E

locret_2641C:				
		rts	
; ===========================================================================

loc_2641E:				
		btst	#0,$22(a0)
		bne.s	loc_26436
		move.w	ost_x_pos(a0),d0
		subi.w	#$10,d0
		cmp.w	ost_x_pos(a1),d0
		bcs.s	loc_26446
		rts	
; ===========================================================================

loc_26436:				
		move.w	ost_x_pos(a0),d0
		addi.w	#$10,d0
		cmp.w	ost_x_pos(a1),d0
		bcc.s	loc_26446
		rts	
; ===========================================================================

loc_26446:				
		cmpi.b	#1,$1C(a0)
		beq.s	loc_26456
		move.w	#$100,$1C(a0)
		rts	
; ===========================================================================

loc_26456:				
		tst.b	$1A(a0)
		beq.s	loc_2645E
		rts	
; ===========================================================================

loc_2645E:				
		move.w	ost_x_pos(a0),d0
		subi.w	#$1C,d0
		sub.w	ost_x_pos(a1),d0
		neg.w	d0
		btst	#0,$22(a0)
		beq.s	loc_2647A
		not.w	d0
    if FixBugs
		addi.w	#2*$1C,d0
    else
		; This should be 2*$1C instead of $27. As is, this makes it
		; impossible to get as high of a launch from flipped pressure springs
		; as you can for unflipped ones.
		addi.w	#$27,d0
	endc
		
loc_2647A:				
		tst.w	d0
		bpl.s	loc_26480
		moveq	#0,d0

loc_26480:				
		lea	(byte_26550).l,a3
		move.b	(a3,d0.w),d0
		move.w	#-$400,ost_y_vel(a1)
		sub.b	d0,ost_y_vel(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_264AA
		bclr	#0,$22(a1)
		neg.b	d0

loc_264AA:				
		move.w	ost_x_vel(a1),d1
		bpl.s	loc_264B2
		neg.w	d1

loc_264B2:				
		cmpi.w	#$400,d1
		bcs.s	loc_264BC
		sub.b	d0,ost_x_vel(a1)

loc_264BC:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	#0,$39(a1)
		move.b	$28(a0),d0
		btst	#0,d0
		beq.s	loc_2651E
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_2650E
		move.b	#3,$2C(a1)

loc_2650E:				
		btst	#0,$22(a1)
		beq.s	loc_2651E
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_2651E:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_26534
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_26534:				
		cmpi.b	#8,d0
		bne.s	loc_26546
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_26546:				
		move.w	#sfx_Spring,d0	
		jmp	PlaySound
; ===========================================================================
byte_26550:
		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ; 0			
		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1 ; 16
		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2 ; 32
		dc.b   3,  3,  3,  3,  3,  3,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0 ; 48
		dc.b   0,  0,  0,  0,  0,  0,  0,  0		; 64

byte_26598:	
		dc.b   8,  8,  8,  8,  8,  8,  8,  9, $A, $B, $C, $D, $E, $F,$10,$10 ; 0			
		dc.b $11,$12,$13,$14,$14,$15,$15,$16,$17,$18,$18,$18,$18,$18,$18,$18 ; 16
		dc.b $18,$18,$18,$18,$18,$18,$18,$18		; 32

byte_265C0:	
		dc.b   8,  8,  8,  8,  8,  8,  8,  9, $A, $B, $C, $C, $C, $C, $D, $D ; 0			
		dc.b  $D, $D, $D, $D, $E, $E, $F, $F,$10,$10,$10,$10, $F, $F, $E, $E ; 16
		dc.b  $D, $D, $D, $D, $D, $D, $D, $D		; 32

off_265E8:	
		dc.w byte_265EC-off_265E8			; 0 
		dc.w byte_265EF-off_265E8			; 1
		
byte_265EC:	dc.b  $F,  0,$FF				; 0 
byte_265EF:	dc.b   3,  1,  0,$FD,  0			; 0 

; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_265F4:				
		dc.w word_265F8-Map_265F4			; 0
		dc.w word_2660A-Map_265F4			; 1
word_265F8:	dc.w 2			
		dc.w $E809,    0,    0,$FFE4			; 0
		dc.w $E80D,    6,    3,$FFFC			; 4
word_2660A:	dc.w 2			
		dc.w $E809,   $E,    7,$FFE4			; 0
		dc.w $E80D,  $14,   $A,$FFFC			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo17_DespawnObject:				
		jmp	DespawnObject
JmpTo6_AnimateSprite:				
		jmp	AnimateSprite
JmpTo26_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_SolidObject_Heightmap_SingleCharacter:				
		jmp	SolidObject_Heightmap_SingleCharacter
		
		align 4
	endc
			
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 42 - MTZ steam spring
; ----------------------------------------------------------------------------

SteamSpring:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_26642(pc,d0.w),d1
		jmp	off_26642(pc,d1.w)
; ===========================================================================
off_26642:	
		dc.w loc_26648-off_26642			; 0 
		dc.w loc_26688-off_26642			; 1
		dc.w loc_2683A-off_26642			; 2
; ===========================================================================

loc_26648:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2686C,ost_mappings(a0)
		move.w	#0+tile_pal4,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		jsrto	Adjust2PArtPointer,JmpTo27_Adjust2PArtPointer
		move.b	#7,$1A(a0)
		move.w	ost_y_pos(a0),$34(a0)
		move.w	#$10,$36(a0)
		addi.w	#$10,ost_y_pos(a0)

loc_26688:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		lea	(v_ost_player1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo2_SolidObject_NoRenderChk_SingleCharacter
		btst	#3,$22(a0)
		beq.s	loc_266B2
		bsr.w	loc_2678E

loc_266B2:				
		movem.l	(sp)+,d1-d4
		lea	(v_ost_player2).w,a1
		moveq	#4,d6
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo2_SolidObject_NoRenderChk_SingleCharacter
		btst	#4,$22(a0)
		beq.s	loc_266CC
		bsr.w	loc_2678E

loc_266CC:				
		move.b	$25(a0),d0
		bne.s	loc_266E4
		subq.w	#1,$32(a0)
		bpl.s	loc_26748
		move.w	#$3B,$32(a0)
		addq.b	#2,$25(a0)
		bra.s	loc_26748
; ===========================================================================

loc_266E4:				
		subq.b	#2,d0
		bne.s	loc_26716
		subq.w	#8,$36(a0)
		bne.s	loc_26708
		addq.b	#2,$25(a0)
		bsr.s	loc_2674C
		addi.w	#$28,ost_x_pos(a1)
		bsr.s	loc_2674C
		subi.w	#$28,ost_x_pos(a1)
		bset	#render_xflip_bit,ost_render(a1)

loc_26708:				
		move.w	$36(a0),d0
		add.w	$34(a0),d0
		move.w	d0,ost_y_pos(a0)
		bra.s	loc_26748
; ===========================================================================

loc_26716:				
		subq.b	#2,d0
		bne.s	loc_2672C
		subq.w	#1,$32(a0)
		bpl.s	loc_26748
		move.w	#$3B,$32(a0)
		addq.b	#2,$25(a0)
		bra.s	loc_26748
; ===========================================================================

loc_2672C:				
		addq.w	#8,$36(a0)
		cmpi.w	#$10,$36(a0)
		bne.s	loc_2673C
		clr.b	$25(a0)

loc_2673C:				
		move.w	$36(a0),d0
		add.w	$34(a0),d0
		move.w	d0,ost_y_pos(a0)

loc_26748:				
		jmpto	DespawnObject,JmpTo18_DespawnObject
; ===========================================================================

loc_2674C:				
		jsrto	FindFreeObj,JmpTo7_FindFreeObj
		bne.s	locret_2678C
		_move.b	ost_id(a0),ost_id(a1)
		addq.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	$34(a0),ost_y_pos(a1)
		move.b	#7,$1E(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	#tile_Nem_SteamSpring+tile_pal2,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#$18,$19(a1)
		move.b	#4,$18(a1)

	locret_2678C:				
		rts	
; ===========================================================================

loc_2678E:				
		cmpi.b	#2,$25(a0)
		beq.s	loc_26798
		rts	
; ===========================================================================

loc_26798:				
		move.w	#-$A00,ost_y_vel(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	#0,$39(a1)
		move.b	$28(a0),d0
		bpl.s	loc_267C8
		move.w	#0,ost_x_vel(a1)

loc_267C8:				
		btst	#0,d0
		beq.s	loc_26808
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_267F8
		move.b	#1,$2C(a1)

loc_267F8:				
		btst	#0,$22(a1)
		beq.s	loc_26808
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_26808:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2681E
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_2681E:				
		cmpi.b	#8,d0
		bne.s	loc_26830
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_26830:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================

loc_2683A:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_26868
		move.b	#7,$1E(a0)
		move.b	#0,$20(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#3,$1A(a0)
		bne.s	loc_2685E
		move.b	#-$5A,$20(a0)

loc_2685E:				
		cmpi.b	#7,$1A(a0)
		beq.w	JmpTo30_DeleteObject

loc_26868:				
		jmpto	DisplaySprite,JmpTo18_DisplaySprite
		
	if RemoveJmpTos
JmpTo30_DeleteObject:
		jmp	DeleteObject
    endc
    
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2686C:				
		dc.w word_2687C-Map_2686C			; 0
		dc.w word_26886-Map_2686C			; 1
		dc.w word_26890-Map_2686C			; 2
		dc.w word_2689A-Map_2686C			; 3
		dc.w word_268AC-Map_2686C			; 4
		dc.w word_268BE-Map_2686C			; 5
		dc.w word_268D8-Map_2686C			; 6
		dc.w word_268EA-Map_2686C			; 7
word_2687C:	dc.w 1			
		dc.w $FF00,    0,    0,$FFE8			; 0
word_26886:	dc.w 1			
		dc.w $FF04,    1,    0,$FFE8			; 0
word_26890:	dc.w 1			
		dc.w $FC05,    3,    1,$FFEC			; 0
word_2689A:	dc.w 2			
		dc.w $FC05,    7,    3,$FFF8			; 0
		dc.w $FC05,    3,    1,$FFF0			; 4
word_268AC:	dc.w 2			
		dc.w $FC05,$1007,$1003,	   0			; 0
		dc.w $FC01,$100B,$1005,$FFF8			; 4
word_268BE:	dc.w 3			
		dc.w $FC01,   $D,    6,	  $C			; 0
		dc.w $FC01,   $B,    5,	   4			; 4
		dc.w $FC01,$180D,$1806,$FFFC			; 8
word_268D8:	dc.w 2			
		dc.w $FC01,   $D,    6,	 $10			; 0
		dc.w $FC01,$180D,$1806,	   8			; 4
word_268EA:	dc.w 2			
		dc.w $F007,  $15,   $A,$FFF0			; 0
		dc.w $F007,  $1D,   $E,	   0			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo18_DisplaySprite:				
		jmp	DisplaySprite
JmpTo30_DeleteObject:				
		jmp	DeleteObject
JmpTo7_FindFreeObj:				
		jmp	FindFreeObj
JmpTo18_DespawnObject:				
		jmp	DespawnObject
JmpTo27_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo2_SolidObject_NoRenderChk_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter
		
		align 4
	endc
			
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 64 - MTZ stomping pistons
; ----------------------------------------------------------------------------

TwinStompers:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2692E(pc,d0.w),d1
		jmp	off_2692E(pc,d1.w)
; ===========================================================================
off_2692E:	dc.w loc_2693A-off_2692E			; 0 
		dc.w loc_269A2-off_2692E			; 1
byte_26932:	dc.b $40, $C					; 0
		dc.b $40,  1					; 2
		dc.b $10,$20					; 4
		dc.b $40,  1					; 6
; ===========================================================================

loc_2693A:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_26932(pc,d0.w),a3
		move.b	(a3)+,$19(a0)
		move.b	(a3)+,$2E(a0)
		lsr.w	#2,d0
		move.b	d0,$1A(a0)
		bne.s	loc_2696A
		move.b	#$6C,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)

loc_2696A:				
		move.l	#Map_26A5C,ost_mappings(a0)
		move.w	#0+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo28_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$30(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		move.w	d0,$3C(a0)
		andi.b	#$F,$28(a0)

loc_269A2:				
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_269F4(pc,d0.w),d1
		jsr	off_269F4(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	ost_render(a0)
		bpl.s	loc_269D6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$2E(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo9_SolidObject

loc_269D6:				
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	JmpTo31_DeleteObject
		jmp	DisplaySprite
; ===========================================================================

JmpTo31_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================
off_269F4:	
		dc.w locret_269F8-off_269F4			; 0 
		dc.w loc_269FA-off_269F4			; 1
; ===========================================================================

locret_269F8:				
		rts	
; ===========================================================================

loc_269FA:				
		tst.b	$38(a0)
		bne.s	loc_26A1E
		tst.w	$3A(a0)
		beq.s	loc_26A0C
		subq.w	#8,$3A(a0)
		bra.s	loc_26A3E
; ===========================================================================

loc_26A0C:				
		subq.w	#1,$36(a0)
		bpl.s	loc_26A3E
		move.w	#$5A,$36(a0)
		move.b	#1,$38(a0)

loc_26A1E:				
		move.w	$3A(a0),d0
		cmp.w	$3C(a0),d0
		beq.s	loc_26A2E
		addq.w	#8,$3A(a0)
		bra.s	loc_26A3E
; ===========================================================================

loc_26A2E:				
		subq.w	#1,$36(a0)
		bpl.s	loc_26A3E
		move.w	#$5A,$36(a0)
		clr.b	$38(a0)

loc_26A3E:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26A50
		neg.w	d0
		addi.w	#$40,d0

loc_26A50:				
		move.w	$30(a0),d1
		add.w	d0,d1
		move.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_26A5C:				
		dc.w word_26A60-Map_26A5C			; 0
		dc.w word_26AB2-Map_26A5C			; 1
word_26A60:	dc.w $A			
		dc.w $F40E,    1,    0,$FFC0			; 0
		dc.w $F40E, $801, $800,$FFE0			; 4
		dc.w $F40E,    1,    0,	   0			; 8
		dc.w $F40E, $801, $800,	 $20			; 12
		dc.w  $C07,   $D,    6,$FFD8			; 16
		dc.w $2C07,   $D,    6,$FFD8			; 20
		dc.w $4C07,   $D,    6,$FFD8			; 24
		dc.w  $C07,   $D,    6,	 $18			; 28
		dc.w $2C07,   $D,    6,	 $18			; 32
		dc.w $4C07,   $D,    6,	 $18			; 36
word_26AB2:	dc.w 4			
		dc.w $E007,  $57,  $2B,$FFF0			; 0
		dc.w $E007, $857, $82B,	   0			; 4
		dc.w	 7,$1057,$102B,$FFF0			; 8
		dc.w	 7,$1857,$182B,	   0			; 12
; ===========================================================================

	if RemoveJmpTos=0
JmpTo28_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo9_SolidObject:				
		jmp	SolidObject
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 65 - MTZ long moving platform
; ----------------------------------------------------------------------------

LongPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_26AEE(pc,d0.w),d1
		jmp	off_26AEE(pc,d1.w)
; ===========================================================================
off_26AEE:	dc.w loc_26B06-off_26AEE			; 0 
		dc.w loc_26C1C-off_26AEE			; 1
		dc.w loc_26EA4-off_26AEE			; 2
		dc.w loc_26EC2-off_26AEE			; 3
byte_26AF6:	dc.b $40, $C					; 0
		dc.b $80,  1					; 2
		dc.b $20, $C					; 4
		dc.b $40,  3					; 6
		dc.b $10,$10					; 8
		dc.b $20,  0					; 10
		dc.b $40, $C					; 12
		dc.b $80,  7					; 14
; ===========================================================================

loc_26B06:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_26EC8,ost_mappings(a0)
		move.w	#0+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo29_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_26AF6(pc,d0.w),a3
		move.b	(a3)+,$19(a0)
		move.b	(a3)+,ost_height(a0)
		lsr.w	#2,d0
		move.b	d0,$1A(a0)
		cmpi.b	#1,d0
		bne.s	loc_26B52
		bset	#7,$22(a0)

loc_26B52:				
		cmpi.b	#2,d0
		bne.s	loc_26B6E
		addq.b	#4,ost_primary_routine(a0)
		move.l	#Map_26F04,ost_mappings(a0)
		move.w	#tile_Nem_Cog+tile_pal4,ost_tile(a0)
		bra.w	loc_26EC2
; ===========================================================================

loc_26B6E:				
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$30(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		move.w	d0,$3C(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		bpl.w	loc_26C16
		andi.b	#$F,d0
		move.b	d0,$3E(a0)
		move.b	(a3),$28(a0)
		cmpi.b	#7,(a3)
		bne.s	loc_26BA4
		move.w	$3C(a0),$3A(a0)

loc_26BA4:				
		jsrto	FindNextFreeObj,JmpTo11_FindNextFreeObj
		bne.s	loc_26C04
		_move.b	ost_id(a0),ost_id(a1)
		addq.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#-$4C,ost_x_pos(a1)
		addi.w	#$14,ost_y_pos(a1)
		btst	#0,$22(a0)
		bne.s	loc_26BE0
		subi.w	#-$18,ost_x_pos(a1)
		bset	#render_xflip_bit,ost_render(a1)

loc_26BE0:				
		move.l	#Map_26F04,ost_mappings(a1)
		move.w	#tile_Nem_Cog+tile_pal4,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.l	a0,$3C(a1)

loc_26C04:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26C16
		bclr	#7,2(a2,d0.w)

loc_26C16:				
		andi.b	#$F,$28(a0)

loc_26C1C:				
		move.w	ost_x_pos(a0),$2E(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_26C7E(pc,d0.w),d1
		jsr	off_26C7E(pc,d1.w)
		move.w	$2E(a0),d4
		moveq	#0,d1
		move.b	$19(a0),d1
		addi_.w	#5,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo10_SolidObject
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_26C66
		jmp	DisplaySprite
; ===========================================================================

loc_26C66:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26C78
		bclr	#7,2(a2,d0.w)

loc_26C78:				
		jmp	DeleteObject
; ===========================================================================
off_26C7E:	dc.w locret_26C8E-off_26C7E			; 0 
		dc.w loc_26CA4-off_26C7E			; 1
		dc.w loc_26D34-off_26C7E			; 2
		dc.w loc_26D94-off_26C7E			; 3
		dc.w loc_26E3C-off_26C7E			; 4
		dc.w loc_26E4A-off_26C7E			; 5
		dc.w loc_26C90-off_26C7E			; 6
		dc.w loc_26D14-off_26C7E			; 7
; ===========================================================================

locret_26C8E:				
		rts	
; ===========================================================================

loc_26C90:				
		tst.b	$38(a0)
		bne.s	loc_26CA2
		subq.w	#1,$36(a0)
		bne.s	loc_26CD0
		move.b	#1,$38(a0)

loc_26CA2:				
		bra.s	loc_26CC2
; ===========================================================================

loc_26CA4:				
		tst.b	$38(a0)
		bne.s	loc_26CC2
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$3E(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_26CD0
		move.b	#1,$38(a0)

loc_26CC2:				
		move.w	$3C(a0),d0
		cmp.w	$3A(a0),d0
		beq.s	loc_26CF2
		addq.w	#2,$3A(a0)

loc_26CD0:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26CE2
		neg.w	d0
		addi.w	#$80,d0	

loc_26CE2:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_x_pos(a0)
		move.w	d1,$2E(a0)
		rts	
; ===========================================================================

loc_26CF2:				
		addq.b	#1,$28(a0)
		move.w	#$B4,$36(a0)
		clr.b	$38(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26CD0
		bset	#0,2(a2,d0.w)
		bra.s	loc_26CD0
; ===========================================================================

loc_26D14:				
		tst.b	$38(a0)
		bne.s	loc_26D32
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$3E(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_26D50
		move.b	#1,$38(a0)

loc_26D32:				
		bra.s	loc_26D46
; ===========================================================================

loc_26D34:				
		tst.b	$38(a0)
		bne.s	loc_26D46
		subq.w	#1,$36(a0)
		bne.s	loc_26D50
		move.b	#1,$38(a0)

loc_26D46:				
		tst.w	$3A(a0)
		beq.s	loc_26D72
		subq.w	#2,$3A(a0)

loc_26D50:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26D62
		neg.w	d0
		addi.w	#$80,d0	

loc_26D62:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_x_pos(a0)
		move.w	d1,$2E(a0)
		rts	
; ===========================================================================

loc_26D72:				
		subq.b	#1,$28(a0)
		move.w	#$B4,$36(a0)
		clr.b	$38(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26D50
		bclr	#0,2(a2,d0.w)
		bra.s	loc_26D50
; ===========================================================================

loc_26D94:				
		move.w	$34(a0),d4
		move.w	d4,d5
		btst	#0,$22(a0)
		bne.s	loc_26DAC
		subi.w	#$20,d4
		addi.w	#$60,d5
		bra.s	loc_26DB4
; ===========================================================================

loc_26DAC:				
		subi.w	#$A0,d4	
		subi.w	#$20,d5

loc_26DB4:				
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$40,d3
		moveq	#0,d1
		move.w	($FFFFB008).w,d0
		cmp.w	d4,d0
		bcs.s	loc_26DDE
		cmp.w	d5,d0
		bcc.s	loc_26DDE
		move.w	($FFFFB00C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_26DDE
		cmp.w	d3,d0
		bcc.s	loc_26DDE
		moveq	#1,d1

loc_26DDE:				
		move.w	($FFFFB048).w,d0
		cmp.w	d4,d0
		bcs.s	loc_26DF8
		cmp.w	d5,d0
		bcc.s	loc_26DF8
		move.w	($FFFFB04C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_26DF8
		cmp.w	d3,d0
		bcc.s	loc_26DF8
		moveq	#1,d1

loc_26DF8:				
		tst.b	d1
		beq.s	loc_26E0E
		move.w	$3C(a0),d0
		cmp.w	$3A(a0),d0
		beq.s	locret_26E3A
		addi.w	#$10,$3A(a0)
		bra.s	loc_26E1A
; ===========================================================================

loc_26E0E:				
		tst.w	$3A(a0)
		beq.s	loc_26E1A
		subi.w	#$10,$3A(a0)

loc_26E1A:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26E2C
		neg.w	d0
		addi.w	#$40,d0

loc_26E2C:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_x_pos(a0)
		move.w	d1,$2E(a0)

locret_26E3A:				
		rts	
; ===========================================================================

loc_26E3C:				
		btst	#3,$22(a0)
		beq.s	locret_26E48
		addq.b	#1,$28(a0)

locret_26E48:				
		rts	
; ===========================================================================

loc_26E4A:				
		tst.b	$38(a0)
		bne.s	loc_26E84
		addq.w	#2,ost_x_pos(a0)
		cmpi.b	#5,(v_zone).w
		bne.s	loc_26E74
		cmpi.w	#$1CC0,ost_x_pos(a0)
		beq.s	loc_26E6C
		cmpi.w	#$2940,ost_x_pos(a0)
		bne.s	loc_26E96

loc_26E6C:				
		move.b	#0,$28(a0)
		bra.s	loc_26E96
; ===========================================================================

loc_26E74:				
		cmpi.w	#$1BC0,ost_x_pos(a0)
		bne.s	loc_26E96
		move.b	#1,$38(a0)
		bra.s	loc_26E96
; ===========================================================================

loc_26E84:				
		subq.w	#2,ost_x_pos(a0)
		cmpi.w	#$1880,ost_x_pos(a0)
		bne.s	loc_26E96
		move.b	#0,$38(a0)

loc_26E96:				
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_x_pos(a0),(v_mtz_platform_cog_x_pos).w
		rts	
; ===========================================================================

loc_26EA4:				
		movea.l	$3C(a0),a1
		move.w	$3A(a1),d0

loc_26EAC:				
		andi.w	#7,d0
		move.b	byte_26EBA(pc,d0.w),$1A(a0)
		jmpto	DespawnObject,JmpTo19_DespawnObject
; ===========================================================================
byte_26EBA:	
		dc.b   0					; 0
		dc.b   0					; 1
		dc.b   2					; 2
		dc.b   2					; 3
		dc.b   2					; 4
		dc.b   1					; 5
		dc.b   1					; 6
		dc.b   1					; 7
; ===========================================================================

loc_26EC2:				
					
		move.w	(v_mtz_platform_cog_x_pos).w,d0
		bra.s	loc_26EAC
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_26EC8:				
		dc.w word_26ED0-Map_26EC8			; 0
		dc.w word_26EF2-Map_26EC8			; 1
		dc.w word_26ED0-Map_26EC8			; 2
		dc.w word_26ED0-Map_26EC8			; 3
word_26ED0:	dc.w 4			
		dc.w $F40E,  $4B,  $25,$FFC0			; 0
		dc.w $F40E,  $4B,  $25,$FFE0			; 4
		dc.w $F40E,  $4B,  $25,	   0			; 8
		dc.w $F40E,  $4B,  $25,	 $20			; 12
word_26EF2:	dc.w 2			
		dc.w $F40E,  $39,  $1C,$FFE0			; 0
		dc.w $F40E, $839, $81C,	   0			; 4
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_26F04:				
		dc.w word_26F0A-Map_26F04			; 0
		dc.w word_26F1C-Map_26F04			; 1
		dc.w word_26F2E-Map_26F04			; 2
word_26F0A:	dc.w 2			
		dc.w $F406,    0,    0,$FFF0			; 0
		dc.w $F406, $800, $800,	   0			; 4
word_26F1C:	dc.w 2			
		dc.w $F406,    6,    3,$FFF0			; 0
		dc.w $F406,$1806,$1803,	   0			; 4
word_26F2E:	dc.w 2			
		dc.w $F406,$1006,$1003,$FFF0			; 0
		dc.w $F406, $806, $803,	   0			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo19_DespawnObject:				
		jmp	DespawnObject
JmpTo11_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo29_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo10_SolidObject:				
		jmp	SolidObject

		align 4
	endc		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 66 - MTZ spring walls
; ----------------------------------------------------------------------------

SpringWall:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_26F66(pc,d0.w),d1
		jmp	off_26F66(pc,d1.w)
; ===========================================================================
off_26F66:	
		dc.w loc_26F6A-off_26F66			; 0 
		dc.w loc_26FAE-off_26F66			; 1
; ===========================================================================

loc_26F6A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_27120,ost_mappings(a0)
		move.w	#tile_Nem_Monitors+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo30_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#8,$19(a0)
		move.b	#4,$18(a0)
		move.b	#$40,ost_height(a0)
		move.b	$28(a0),d0
		lsr.b	#4,d0
		andi.b	#7,d0
		move.b	d0,$1A(a0)
		beq.s	loc_26FAE
		move.b	#-$80,ost_height(a0)

loc_26FAE:				
					
		move.w	#$13,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo3_SolidObject_NoRenderChk_SingleCharacter
		cmpi.b	#1,d4
		bne.s	loc_26FF6
		btst	#1,$22(a1)
		beq.s	loc_26FF6
		move.b	$22(a0),d1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcs.s	loc_26FEE
		eori.b	#1,d1

loc_26FEE:				
		andi.b	#1,d1
		bne.s	loc_26FF6
		bsr.s	loc_27042

loc_26FF6:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo3_SolidObject_NoRenderChk_SingleCharacter
		cmpi.b	#1,d4
		bne.s	loc_2702C
		btst	#1,$22(a1)
		beq.s	loc_2702C
		move.b	$22(a0),d1
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcs.s	loc_27024
		eori.b	#1,d1

loc_27024:				
		andi.b	#1,d1
		bne.s	loc_2702C
		bsr.s	loc_27042

loc_2702C:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo33_DeleteObject
	if (Revision=0)|FixBugs
		; This object was visible in debug mode in Revision 0.
		tst.w	(v_debug_active).w
		beq.s	.nodisplay				; rts
		jsrto	DisplaySprite,JmpTo47_DisplaySprite	
	.nodisplay:
	endc		
		rts	

    if RemoveJmpTos
JmpTo33_DeleteObject:
		jmp	DeleteObject
    endif		
; ===========================================================================

loc_27042:	
	if (Revision>0)|FixBugs
		; Revision 0 didn't check if the player was hurt or dead.				
		cmpi.b	#4,ost_primary_routine(a1)
	endc	
		bcs.s	loc_2704C
		rts	
; ===========================================================================

loc_2704C:				
		move.w	$30(a0),ost_x_vel(a1)
		move.w	#-$800,ost_x_vel(a1)
		move.w	#-$800,ost_y_vel(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_27076
		bclr	#0,$22(a1)
		neg.w	ost_x_vel(a1)

loc_27076:				
		move.w	#$F,$2E(a1)
		move.w	ost_x_vel(a1),ost_inertia(a1)
		btst	#2,$22(a1)
		bne.s	loc_27090
		move.b	#0,$1C(a1)

loc_27090:				
		move.b	$28(a0),d0
		bpl.s	loc_2709C

loc_27096:
		move.w	#0,ost_y_vel(a1)

loc_2709C:				
		btst	#0,d0
		beq.s	loc_270DC
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_270CC
		move.b	#3,$2C(a1)

loc_270CC:				
		btst	#0,$22(a1)
		beq.s	loc_270DC
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_270DC:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_270F2
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_270F2:				
		cmpi.b	#8,d0
		bne.s	loc_27104
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_27104:				
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27120:				
		dc.w word_27124-Map_27120			; 0
		dc.w word_27136-Map_27120			; 1
word_27124:	dc.w 2			
		dc.w $C005,  $34,  $1A,$FFF8			; 0
		dc.w $3005,  $34,  $1A,$FFF8			; 4
word_27136:	dc.w 2			
		dc.w $8005,  $34,  $1A,$FFF8			; 0
		dc.w $7005,  $34,  $1A,$FFF8			; 4
; ===========================================================================
	
	if RemoveJmpTos=0
	
	if Revision=0
JmpTo47_DisplaySprite:
		jmp	DisplaySprite
	endc

JmpTo33_DeleteObject:				
		jmp	DeleteObject	
JmpTo30_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer	
JmpTo3_SolidObject_NoRenderChk_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 67 - MTZ spin tube
; ----------------------------------------------------------------------------

SpinTubeMetropolis:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_27184(pc,d0.w),d1
		jsr	off_27184(pc,d1.w)
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	JmpTo4_DespawnObject3
		lea	(byte_2752E).l,a1
		jsrto	AnimateSprite,JmpTo7_AnimateSprite
		jmpto	DisplaySprite,JmpTo19_DisplaySprite
; ===========================================================================
off_27184:	
		dc.w loc_27188-off_27184			; 0 
		dc.w loc_271AC-off_27184			; 1
; ===========================================================================

loc_27188:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_27548,ost_mappings(a0)
		move.w	#tile_Nem_SpinTubeFlash+tile_pal4,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)

loc_271AC:				
		lea	(v_ost_player1).w,a1
		lea	$2C(a0),a4
		bsr.s	loc_271BE
		lea	(v_ost_player2).w,a1
		lea	$36(a0),a4

loc_271BE:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_271CA(pc,d0.w),d0
		jmp	off_271CA(pc,d0.w)
; ===========================================================================
off_271CA:	dc.w loc_271D0-off_271CA			; 0 
		dc.w loc_27260-off_271CA			; 1
		dc.w loc_27294-off_271CA			; 2
; ===========================================================================

loc_271D0:				
		tst.w	(v_debug_active).w
		bne.w	locret_2725E
		move.w	ost_x_pos(a1),d0

loc_271DC:
		sub.w	ost_x_pos(a0),d0
		addq.w	#3,d0
		btst	#0,$22(a0)
		beq.s	loc_271EE
		addi.w	#$A,d0

loc_271EE:				
		cmpi.w	#$10,d0
		bcc.s	locret_2725E
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		addi.w	#$20,d1
		cmpi.w	#$40,d1
		bcc.s	locret_2725E
		tst.b	$2A(a1)
		bne.s	locret_2725E
		addq.b	#2,(a4)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,ost_inertia(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		clr.b	1(a4)
		move.w	#$BE,d0	
		jsr	PlaySound
		move.w	#$100,$1C(a0)

locret_2725E:				
		rts	
; ===========================================================================

loc_27260:				
		move.b	1(a4),d0
		addq.b	#2,1(a4)
		jsr	CalcSine
		asr.w	#5,d0
		move.w	ost_y_pos(a0),d2
		sub.w	d0,d2
		move.w	d2,ost_y_pos(a1)
		cmpi.b	#-$80,1(a4)
		bne.s	locret_27292
		bsr.w	loc_27310
		addq.b	#2,(a4)
		move.w	#$BC,d0	
		jsr	PlaySound

locret_27292:				
		rts	
; ===========================================================================

loc_27294:				
		subq.b	#1,2(a4)
		bpl.s	loc_272C8
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		move.w	d5,ost_y_pos(a1)
		tst.b	$28(a0)
		bpl.s	loc_272B2
		subq.w	#8,a2

loc_272B2:				
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_272EE
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2
		bra.w	loc_27374
; ===========================================================================

loc_272C8:				
		move.l	ost_x_pos(a1),d2
		move.l	ost_y_pos(a1),d3
		move.w	ost_x_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,ost_x_pos(a1)
		move.l	d3,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_272EE:				
		andi.w	#$7FF,ost_y_pos(a1)
		clr.b	(a4)
		clr.b	$2A(a1)
		btst	#4,$28(a0)
		bne.s	locret_2730E
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)

locret_2730E:				
		rts	
; ===========================================================================

loc_27310:				
		move.b	$28(a0),d0
		bpl.s	loc_27344
		neg.b	d0
		andi.w	#$F,d0
		add.w	d0,d0
		lea	(off_273F2).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d0
		subq.w	#4,d0
		move.w	d0,4(a4)
		lea	(a2,d0.w),a2
		move.w	(a2)+,d4
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		move.w	d5,ost_y_pos(a1)
		subq.w	#8,a2
		bra.s	loc_27368
; ===========================================================================

loc_27344:				
		andi.w	#$F,d0
		add.w	d0,d0

loc_2734A:
		lea	(off_273F2).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4

loc_2735E:
		move.w	d4,ost_x_pos(a1)
		move.w	(a2)+,d5
		move.w	d5,ost_y_pos(a1)

loc_27368:				
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2

loc_27374:				
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	ost_x_pos(a1),d0
		bge.s	loc_27384
		neg.w	d0
		neg.w	d2

loc_27384:				
		moveq	#0,d1
		move.w	d5,d1
		sub.w	ost_y_pos(a1),d1
		bge.s	loc_27392
		neg.w	d1
		neg.w	d3

loc_27392:				
		cmp.w	d0,d1
		bcs.s	loc_273C4
		moveq	#0,d1
		move.w	d5,d1
		sub.w	ost_y_pos(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	ost_x_pos(a1),d0
		beq.s	loc_273B0
		swap	d0
		divs.w	d1,d0

loc_273B0:				
		move.w	d0,ost_x_vel(a1)
		move.w	d3,ost_y_vel(a1)
		tst.w	d1
		bpl.s	loc_273BE
		neg.w	d1

loc_273BE:				
		move.w	d1,2(a4)
		rts	
; ===========================================================================

loc_273C4:				
		moveq	#0,d0
		move.w	d4,d0
		sub.w	ost_x_pos(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	ost_y_pos(a1),d1
		beq.s	loc_273DE
		swap	d1
		divs.w	d0,d1

loc_273DE:				
		move.w	d1,ost_y_vel(a1)
		move.w	d2,ost_x_vel(a1)
		tst.w	d0
		bpl.s	loc_273EC
		neg.w	d0

loc_273EC:				
		move.w	d0,2(a4)
		rts	
; ===========================================================================
off_273F2:	dc.w byte_2740C-off_273F2			; 0 
		dc.w byte_27426-off_273F2			; 1
		dc.w byte_27430-off_273F2			; 2
		dc.w byte_2744A-off_273F2			; 3
		dc.w byte_27454-off_273F2			; 4
		dc.w byte_2745E-off_273F2			; 5
		dc.w byte_27478-off_273F2			; 6
		dc.w byte_27492-off_273F2			; 7
		dc.w byte_274AC-off_273F2			; 8
		dc.w byte_274C6-off_273F2			; 9
		dc.w byte_274E0-off_273F2			; 10
		dc.w byte_274FA-off_273F2			; 11
		dc.w byte_27514-off_273F2			; 12
byte_2740C:	dc.b   0,$18,  7,$A8,  2,$70,  7,$50,  2,$70,  7,$40,  2,$80,  7,$40 ; 0
					
		dc.b   3,$E0,  7,$50,  3,$F0,  7,$A8,  3,$F0	; 16
byte_27426:	dc.b   0,  8, $C,$58,  5,$F0, $E,$28,  5,$F0	; 0	
byte_27430:	dc.b   0,$18,$18,$28,  6,$B0,$17,$D0,  6,$B0,$17,$C0,  6,$C0,$17,$C0 ; 0
					
		dc.b   7,$E0,$17,$B0,  7,$F0,$17,$58,  7,$F0	; 16
byte_2744A:	dc.b   0,  8,  5,$D8,  3,$70,  7,$80,  3,$70	; 0	
byte_27454:	dc.b   0,  8,  5,$D8,  5,$F0,  7,  0,  5,$F0	; 0	
byte_2745E:	dc.b   0,$18, $B,$D8,  1,$F0, $C,$30,  1,$F0, $C,$40,  1,$E0, $C,$40 ; 0
					
		dc.b   0,$C0, $C,$50,  0,$B0, $C,$A8,  0,$B0	; 16
byte_27478:	dc.b   0,$18,$17,$28,  3,$30,$15,$D0,  3,$30,$15,$C0,  3,$20,$15,$C0 ; 0
					
		dc.b   2,$40,$15,$D0,  2,$30,$16,$28,  2,$30	; 16
byte_27492:	dc.b   0,$18,  6,$D8,  1,$F0,  7,$30,  1,$F0,  7,$40,  1,$E0,  7,$40 ; 0
					
		dc.b   1,  0,  7,$50,  0,$F0,  7,$A8,  0,$F0	; 16
byte_274AC:	dc.b   0,$18,  7,$D8,  3,$30,  8,$28,  3,$30,  8,$40,  3,$40,  8,$40 ; 0
					
		dc.b   4,$58,  8,$28,  4,$70,  7,$D8,  4,$70	; 16
byte_274C6:	dc.b   0,$18, $F,$D8,  3,$B0,$10,$28,  3,$B0,$10,$40,  3,$98,$10,$40 ; 0
					
		dc.b   2,$C4,$10,$58,  2,$B0,$10,$A8,  2,$B0	; 16
byte_274E0:	dc.b   0,$18					; 0 
		dc.b  $F,$D8,  4,$B0,$10,$28,  4,$B0		; 0
		dc.b $10,$40,  4,$C0,$10,$40,  5,$D8,$10,$58,  5,$F0,$10,$A8,  5,$F0 ; 0
byte_274FA:	dc.b   0,$18,$20,$58,  4,$30,$20,$A8,  4,$30,$20,$C0,  4,$18,$20,$C0 ; 0
					
		dc.b   2,$C0,$20,$D0,  2,$B0,$21,$28,  2,$B0	; 16
byte_27514:	dc.b   0,$18,$23,$28,  5,$B0,$22,$D0,  5,$B0,$22,$C0,  5,$A0,$22,$C0 ; 0
					
		dc.b   4,$C0,$22,$D0,  4,$B0,$23,$28,  4,$B0	; 16

byte_2752E:	
		dc.b   0,  4,  0,  7,$1F,  0,$FF,  1,  1,  0,  0,  0,  0,  0,  1,  0 ; 0					
		dc.b   0,  0,  1,  0,  0,  1,  0,$FE,  2,  0	; 16
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_27548:				
		dc.w word_2754C-Map_27548			; 0
		dc.w word_2754E-Map_27548			; 1
word_2754C:	dc.w 0			
word_2754E:	dc.w 6			
		dc.w $E005,    0,    0,$FFEC			; 0
		dc.w $E005,    0,    0,$FFF8			; 4
		dc.w $F005,    0,    0,$FFEC			; 8
		dc.w $F005,    0,    0,$FFF8			; 12
		dc.w	 5,    0,    0,$FFEC			; 16
		dc.w	 5,    0,    0,$FFF8			; 20
; ===========================================================================

	if RemoveJmpTos
JmpTo4_DespawnObject3:				
		jmp	DespawnObject3
		
	else	
		
JmpTo19_DisplaySprite:				
		jmp	DisplaySprite
JmpTo7_AnimateSprite:				
		jmp	AnimateSprite
JmpTo4_DespawnObject3:				
		jmp	DespawnObject3
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 68 - MTZ spike block
; ----------------------------------------------------------------------------

SpikeBlock:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0

loc_2759A:
		move.w	off_275A2(pc,d0.w),d1
		jmp	off_275A2(pc,d1.w)
; ===========================================================================
off_275A2:	
		dc.w loc_275A8-off_275A2			; 0 
		dc.w loc_2764A-off_275A2			; 1
		dc.w loc_27662-off_275A2			; 2
; ===========================================================================

loc_275A8:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_27750,ost_mappings(a0)
		move.w	#tile_Nem_SpikeBlock+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo31_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		jsrto	FindNextFreeObj,JmpTo12_FindNextFreeObj
		bne.s	loc_27644
		_move.b	ost_id(a0),ost_id(a1)
		addq.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_x_pos(a1),$30(a1)
		move.w	ost_y_pos(a1),$32(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	#tile_Nem_MTZSpike+tile_pal2,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.w	(v_frame_counter).w,d0
		lsr.w	#6,d0
		move.w	d0,d1
		andi.w	#1,d0
		move.w	d0,$36(a1)
		lsr.w	#1,d1
		add.b	$28(a0),d1
		andi.w	#3,d1
		move.b	d1,$25(a1)
		move.b	d1,$1A(a1)
		lea	(byte_2774C).l,a2
		move.b	(a2,d1.w),$20(a1)

loc_27644:				
		move.b	#4,$1A(a0)

loc_2764A:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo11_SolidObject
		jmpto	DespawnObject,JmpTo20_DespawnObject
; ===========================================================================

loc_27662:				
		bsr.w	loc_276CA
		moveq	#0,d0
		move.b	$25(a0),d0
		add.w	d0,d0
		move.w	off_2767E(pc,d0.w),d1
		jsr	off_2767E(pc,d1.w)
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo2_DespawnObject2
; ===========================================================================
off_2767E:	
		dc.w loc_27686-off_2767E			; 0 
		dc.w loc_27698-off_2767E			; 1
		dc.w loc_276A8-off_2767E			; 2
		dc.w loc_276B8-off_2767E			; 3
; ===========================================================================

loc_27686:				
		moveq	#0,d0
		move.b	$34(a0),d0
		neg.w	d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_27698:				
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$30(a0),d0
		move.w	d0,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_276A8:				
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_276B8:				
		moveq	#0,d0
		move.b	$34(a0),d0
		neg.w	d0
		add.w	$30(a0),d0
		move.w	d0,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_276CA:				
		tst.w	$38(a0)
		beq.s	loc_276EE
		move.b	(v_frame_counter_low).w,d0
		andi.b	#$3F,d0
		bne.s	locret_2774A
		clr.w	$38(a0)
		tst.b	ost_render(a0)
		bpl.s	loc_276EE
		move.w	#$B6,d0	
		jsr	PlaySound

loc_276EE:				
		tst.w	$36(a0)
		beq.s	loc_2772A
		subi.w	#$800,$34(a0)
		bcc.s	locret_2774A
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#1,$38(a0)
		addq.b	#1,$25(a0)
		andi.b	#3,$25(a0)
		moveq	#0,d0
		move.b	$25(a0),d0
		move.b	d0,$1A(a0)
		move.b	byte_2774C(pc,d0.w),$20(a0)
		rts	
; ===========================================================================

loc_2772A:				
		addi.w	#$800,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	locret_2774A
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#1,$38(a0)

locret_2774A:				
		rts	
; ===========================================================================
byte_2774C:	dc.b $84					; 0 
		dc.b $A6					; 1
		dc.b $84					; 2
		dc.b $A6					; 3
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27750:				
		dc.w word_2775A-Map_27750			; 0
		dc.w word_27764-Map_27750			; 1
		dc.w word_2776E-Map_27750			; 2
		dc.w word_27778-Map_27750			; 3
		dc.w word_27782-Map_27750			; 4
word_2775A:	dc.w 1			
		dc.w $F003,$1000,$1000,$FFFC			; 0
word_27764:	dc.w 1			
		dc.w $FC0C,    4,    2,$FFF0			; 0
word_2776E:	dc.w 1			
		dc.w $F003,    0,    0,$FFFC			; 0
word_27778:	dc.w 1			
		dc.w $FC0C, $804, $802,$FFF0			; 0
word_27782:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0			; 0
		dc.w $F007, $800, $800,	   0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6D - MTZ floor spike
; ----------------------------------------------------------------------------

FloorSpike:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_277A2(pc,d0.w),d1
		jmp	off_277A2(pc,d1.w)
; ===========================================================================
off_277A2:	
		dc.w loc_277A6-off_277A2			; 0 
		dc.w loc_277E0-off_277A2			; 1
; ===========================================================================

loc_277A6:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_27750,ost_mappings(a0)
		move.w	#tile_Nem_MTZSpike+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo31_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$19(a0)
		move.b	#4,$18(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	#-$7C,$20(a0)

loc_277E0:				
		bsr.w	loc_277FC
		moveq	#0,d0
		move.b	$34(a0),d0
		neg.w	d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo2_DespawnObject2
; ===========================================================================

loc_277FC:				
		tst.w	$3A(a0)
		beq.s	loc_27808
		subq.w	#1,$3A(a0)
		rts	
; ===========================================================================

loc_27808:				
		tst.w	$38(a0)
		beq.s	loc_27820
		move.b	(v_frame_counter_low).w,d0
		sub.b	$28(a0),d0
		andi.b	#$7F,d0
		bne.s	locret_27862
		clr.w	$38(a0)

loc_27820:				
		tst.w	$36(a0)
		beq.s	loc_27842
		subi.w	#$400,$34(a0)
		bcc.s	locret_27862
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#1,$38(a0)
		rts	
; ===========================================================================

loc_27842:				
		addi.w	#$400,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	locret_27862
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#3,$3A(a0)

locret_27862:				
		rts	
; ===========================================================================

	if RemoveJmpTos=0
JmpTo20_DespawnObject:				
		jmp	DespawnObject
JmpTo12_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo31_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo11_SolidObject:				
		jmp	SolidObject
JmpTo2_DespawnObject2:				
		jmp	DespawnObject2

		align 4
	endc
		 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 69 - MTZ giant nut
; ----------------------------------------------------------------------------

Nut:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_27892(pc,d0.w),d1
		jmp	off_27892(pc,d1.w)
; ===========================================================================
off_27892:	
		dc.w loc_2789A-off_27892			; 0 
		dc.w loc_278DC-off_27892			; 1
		dc.w loc_279FC-off_27892			; 2
		dc.w loc_278F4-off_27892			; 3
; ===========================================================================

loc_2789A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_27A26,ost_mappings(a0)
		move.w	#tile_Nem_MTZAsstBlocks+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo32_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.b	#$B,ost_height(a0)
		move.b	#4,$18(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	$28(a0),d0
		andi.w	#$7F,d0
		lsl.w	#3,d0
		move.w	d0,$36(a0)

loc_278DC:				
		lea	($FFFFB000).w,a1
		lea	$38(a0),a4
		moveq	#3,d6
		bsr.s	loc_27912
		lea	($FFFFB040).w,a1
		lea	$3C(a0),a4
		moveq	#4,d6
		bsr.s	loc_27912

loc_278F4:								
		andi.w	#$7FF,ost_y_pos(a0)
		move.w	#$2B,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo12_SolidObject
		jmpto	DespawnObject,JmpTo21_DespawnObject
; ===========================================================================

loc_27912:				
		btst	d6,$22(a0)
		bne.s	loc_2791A
		clr.b	(a4)

loc_2791A:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_27926(pc,d0.w),d0
		jmp	off_27926(pc,d0.w)
; ===========================================================================
off_27926:	
		dc.w loc_2792C-off_27926			; 0 
		dc.w loc_2794C-off_27926			; 1
		dc.w loc_2796E-off_27926			; 2
; ===========================================================================

loc_2792C:				
		btst	d6,$22(a0)
		bne.s	loc_27934
		rts	
; ===========================================================================

loc_27934:				
		addq.b	#2,(a4)
		move.b	#0,1(a4)
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_2794C
		move.b	#1,1(a4)

loc_2794C:								
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		tst.b	1(a4)
		beq.s	loc_2795E
		addi.w	#$F,d0

loc_2795E:				
		cmpi.w	#$10,d0
		bcc.s	locret_2796C
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		addq.b	#2,(a4)

locret_2796C:				
		rts	
; ===========================================================================

loc_2796E:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		bcc.s	loc_279D4
		add.w	d0,$34(a0)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	$34(a0),d0
		asr.w	#3,d0
		move.w	d0,d1
		asr.w	#1,d0
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		neg.w	d1
		add.w	$32(a0),d1
		move.w	d1,ost_y_pos(a0)
		sub.w	$32(a0),d1
		move.w	$36(a0),d0
		cmp.w	d0,d1
		blt.s	locret_279D2
		move.w	d0,d1
		add.w	$32(a0),d1
		move.w	d1,ost_y_pos(a0)
		lsl.w	#3,d0
		neg.w	d0
		move.w	d0,$34(a0)
		move.b	#0,$1A(a0)
		tst.b	$28(a0)
		bmi.s	loc_279CC
		clr.b	(a4)
		rts	
; ===========================================================================

loc_279CC:				
		move.b	#4,ost_primary_routine(a0)

locret_279D2:				
		rts	
; ===========================================================================

loc_279D4:				
		add.w	d0,$34(a0)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	$34(a0),d0
		asr.w	#3,d0
		move.w	d0,d1
		asr.w	#1,d0
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		neg.w	d1
		add.w	$32(a0),d1
		move.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_279FC:				
		jsrto	SpeedToPos,JmpTo13_SpeedToPos
		addi.w	#$38,ost_y_vel(a0)
		jsrto	FindFloorObj,JmpTo_FindFloorObj
		tst.w	d1
		bpl.w	loc_27A22
		add.w	d1,ost_y_pos(a0)
		andi.w	#$7FF,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		addq.b	#2,ost_primary_routine(a0)

loc_27A22:				
		bra.w	loc_278F4
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27A26:				
		dc.w word_27A2E-Map_27A26			; 0
		dc.w word_27A40-Map_27A26			; 1
		dc.w word_27A5A-Map_27A26			; 2
		dc.w word_27A74-Map_27A26			; 3
word_27A2E:	dc.w 2			
		dc.w $F40E,    0,    0,$FFE0			; 0
		dc.w $F40E,   $C,    6,	   0			; 4
word_27A40:	dc.w 3			
		dc.w $F40A,    3,    1,$FFE0			; 0
		dc.w $F40E,   $C,    6,$FFF8			; 4
		dc.w $F402, $809, $804,	 $18			; 8
word_27A5A:	dc.w 3			
		dc.w $F406,  $24,  $12,$FFE0			; 0
		dc.w $F40E,  $2A,  $15,$FFF0			; 4
		dc.w $F406,  $18,   $C,	 $10			; 8
word_27A74:	dc.w 3			
		dc.w $F402,  $27,  $13,$FFE0			; 0
		dc.w $F40E,  $18,   $C,$FFE8			; 4
		dc.w $F40A, $82D, $816,	   8			; 8
; ===========================================================================

	if Revision<2
		nop
	endc	

	if RemoveJmpTos=0
JmpTo21_DespawnObject:				
		jmp	DespawnObject
JmpTo_FindFloorObj:				
		jmp	FindFloorObj
JmpTo32_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo12_SolidObject:				
		jmp	SolidObject
JmpTo13_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc
		 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6A - MCZ crates and MTZ platform that moves when player leaves it
; ----------------------------------------------------------------------------

Platform3:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_27ABE(pc,d0.w),d1
		jmp	off_27ABE(pc,d1.w)
; ===========================================================================
off_27ABE:	
		dc.w loc_27AC4-off_27ABE			; 0 
		dc.w loc_27BDE-off_27ABE			; 1
		dc.w loc_27C66-off_27ABE			; 2
; ===========================================================================

loc_27AC4:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_26EC8,ost_mappings(a0)
		move.w	#0+tile_pal4,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#$20,$19(a0)
		move.b	#$C,ost_height(a0)
		move.l	#byte_27CDC,$2C(a0)
		move.b	#1,$1A(a0)
		cmpi.b	#id_MCZ,(v_zone).w
		bne.w	loc_27BC4
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_27D30,ost_mappings(a0)
		move.w	#tile_Nem_Crate+tile_pal4,ost_tile(a0)
		move.b	#$20,$19(a0)
		move.b	#$20,ost_height(a0)
		move.l	#byte_27CF4,$2C(a0)
		btst	#0,$22(a0)
		beq.s	loc_27B3C
		move.l	#byte_27D12,$2C(a0)

loc_27B3C:				
		move.b	#0,$1A(a0)
		cmpi.b	#$18,$28(a0)
		bne.w	loc_27BD0
		jsrto	FindNextFreeObj,JmpTo13_FindNextFreeObj
		bne.s	loc_27B9C
		bsr.s	loc_27B9E
		addi.w	#$40,ost_x_pos(a1)
		addi.w	#$40,ost_y_pos(a1)
		move.b	#6,$28(a1)
		btst	#0,$22(a0)
		beq.s	loc_27B74
		move.b	#$C,$28(a1)

loc_27B74:				
		jsrto	FindNextFreeObj,JmpTo13_FindNextFreeObj
		bne.s	loc_27B9C
		bsr.s	loc_27B9E
		subi.w	#$40,ost_x_pos(a1)
		addi.w	#$40,ost_y_pos(a1)
		move.b	#$C,$28(a1)
		btst	#0,$22(a0)
		beq.s	loc_27B9C
		move.b	#6,$28(a1)

loc_27B9C:				
		bra.s	loc_27BC4
; ===========================================================================

loc_27B9E:				
		_move.b	ost_id(a0),ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_x_pos(a0),$32(a1)
		move.w	ost_y_pos(a0),$30(a1)
		move.b	$22(a0),$22(a1)
		rts	
; ===========================================================================

loc_27BC4:				
		move.w	ost_x_pos(a0),$32(a0)
		move.w	ost_y_pos(a0),$30(a0)

loc_27BD0:				
		jsrto	Adjust2PArtPointer,JmpTo33_Adjust2PArtPointer
		move.b	$28(a0),$38(a0)
		bra.w	loc_27CA2
; ===========================================================================

loc_27BDE:				
		move.w	ost_x_pos(a0),-(sp)
		tst.w	$36(a0)
		bne.s	loc_27C2E
		move.b	$3C(a0),d1
		move.b	$22(a0),d0
		btst	#3,d0
		bne.s	loc_27C0A
		btst	#3,d1
		beq.s	loc_27C0E
		move.b	#1,$36(a0)
		move.b	#0,$3C(a0)
		bra.s	loc_27C3E
; ===========================================================================

loc_27C0A:				
		move.b	d0,$3C(a0)

loc_27C0E:				
		btst	#4,d0
		bne.s	loc_27C28
		btst	#4,d1
		beq.s	loc_27C3E
		move.b	#1,$36(a0)
		move.b	#0,$3C(a0)
		bra.s	loc_27C3E
; ===========================================================================

loc_27C28:				
		move.b	d0,$3C(a0)
		bra.s	loc_27C3E
; ===========================================================================

loc_27C2E:				
		jsr	SpeedToPos
		subq.w	#1,$34(a0)
		bne.s	loc_27C3E
		bsr.w	loc_27CA2

loc_27C3E:				
		move.w	(sp)+,d4
		tst.b	ost_render(a0)
		bpl.s	loc_27C5E
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo13_SolidObject

loc_27C5E:				
		move.w	$32(a0),d0
		jmpto	DespawnObject2,JmpTo3_DespawnObject2
; ===========================================================================

loc_27C66:				
		move.w	ost_x_pos(a0),-(sp)
		jsr	SpeedToPos
		subq.w	#1,$34(a0)
		bne.s	loc_27C7A
		bsr.w	loc_27CA2

loc_27C7A:				
		move.w	(sp)+,d4
		tst.b	ost_render(a0)
		bpl.s	loc_27C9A
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo13_SolidObject

loc_27C9A:				
		move.w	$32(a0),d0
		jmpto	DespawnObject2,JmpTo3_DespawnObject2
; ===========================================================================

loc_27CA2:				
		moveq	#0,d0
		move.b	$38(a0),d0
		movea.l	$2C(a0),a1
		lea	(a1,d0.w),a1
		move.w	(a1)+,ost_x_vel(a0)
		move.w	(a1)+,ost_y_vel(a0)
		move.w	(a1)+,$34(a0)
		move.w	#7,$3A(a0)
		move.b	#0,$36(a0)
		addq.b	#6,$38(a0)
		cmpi.b	#$18,$38(a0)
		bcs.s	locret_27CDA
		move.b	#0,$38(a0)

locret_27CDA:				
		rts	
; ===========================================================================
byte_27CDC:	dc.b   0,  0,  4,  0,  0,$10,  4,  0,$FE,  0,  0,$20,  0,  0,  4,  0 ; 0
					
		dc.b   0,$10,$FC,  0,$FE,  0,  0,$20		; 16
byte_27CF4:	dc.b   0,  0,  1,  0,  0,$40,$FF,  0,  0,  0,  0,$80,  0,  0,$FF,  0 ; 0
					
		dc.b   0,$40,  1,  0,  0,  0,  0,$80,  1,  0,  0,  0,  0,$40 ; 16
byte_27D12:	dc.b   0,  0,  1,  0,  0,$40,  1,  0,  0,  0,  0,$80,  0,  0,$FF,  0 ; 0
					
		dc.b   0,$40,$FF,  0,  0,  0,  0,$80,$FF,  0,  0,  0,  0,$40 ; 16
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27D30:				
		dc.w word_27D32-Map_27D30
word_27D32:	dc.w 4			
		dc.w $E00F,    0,    0,$FFE0			; 0
		dc.w $E00F,  $10,    8,	   0			; 4
		dc.w	$F,$1810,$1808,$FFE0			; 8
		dc.w	$F,$1800,$1800,	   0			; 12
; ===========================================================================

	if RemoveJmpTos=0
JmpTo13_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo33_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo13_SolidObject:				
		jmp	SolidObject
JmpTo3_DespawnObject2:				
		jmp	DespawnObject2
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6B - MTZ fixed platform
; ----------------------------------------------------------------------------

Platform4:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_27D7A(pc,d0.w),d1
		jmp	off_27D7A(pc,d1.w)
; ===========================================================================
off_27D7A:	dc.w loc_27D86-off_27D7A			; 0 
		dc.w loc_27E0E-off_27D7A			; 1
byte_27D7E:	dc.b $20					; 0
		dc.b  $C					; 1
		dc.b   1					; 2
		dc.b   0					; 3
		dc.b $10					; 4
		dc.b $10					; 5
		dc.b   0					; 6
		dc.b   0					; 7
; ===========================================================================

loc_27D86:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_26EC8,ost_mappings(a0)
		move.w	#0+tile_pal4,ost_tile(a0)
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_27DAE
		move.l	#Map_2800E,ost_mappings(a0)
		move.w	#tile_Nem_StairBlock+tile_pal4,ost_tile(a0)

loc_27DAE:				
		jsrto	Adjust2PArtPointer,JmpTo34_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_27D7E(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,ost_height(a0)
		move.b	(a2)+,$1A(a0)
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$30(a0)
		move.b	$22(a0),$2E(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		subq.w	#8,d0
		bcs.s	loc_27E0E
		lsl.w	#2,d0
		lea	($FFFFFE8A).w,a2
		lea	(a2,d0.w),a2
		tst.w	(a2)
		bpl.s	loc_27E0E
		bchg	#0,$2E(a0)

loc_27E0E:				

		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_27E4E(pc,d0.w),d1
		jsr	off_27E4E(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	ost_render(a0)
		bpl.s	loc_27E46
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo14_SolidObject

loc_27E46:				
		move.w	$34(a0),d0
		jmpto	DespawnObject2,JmpTo4_DespawnObject2
; ===========================================================================
off_27E4E:	dc.w locret_27E66-off_27E4E			; 0 
		dc.w loc_27E68-off_27E4E			; 1
		dc.w loc_27E74-off_27E4E			; 2
		dc.w loc_27E96-off_27E4E			; 3
		dc.w loc_27EA2-off_27E4E			; 4
		dc.w loc_27EC4-off_27E4E			; 5
		dc.w loc_27EE2-off_27E4E			; 6
		dc.w loc_27F10-off_27E4E			; 7
		dc.w loc_27F4E-off_27E4E			; 8
		dc.w loc_27F60-off_27E4E			; 9
		dc.w loc_27F70-off_27E4E			; 10
		dc.w loc_27F80-off_27E4E			; 11
; ===========================================================================

locret_27E66:				
		rts	
; ===========================================================================

loc_27E68:				
		move.w	#$40,d1
		moveq	#0,d0
		move.b	($FFFFFE68).w,d0
		bra.s	loc_27E7E
; ===========================================================================

loc_27E74:				
		move.w	#$80,d1	
		moveq	#0,d0
		move.b	($FFFFFE7C).w,d0

loc_27E7E:				
		btst	#0,$22(a0)
		beq.s	loc_27E8A
		neg.w	d0
		add.w	d1,d0

loc_27E8A:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_27E96:				
		move.w	#$40,d1
		moveq	#0,d0
		move.b	($FFFFFE68).w,d0
		bra.s	loc_27EAC
; ===========================================================================

loc_27EA2:				
		move.w	#$80,d1	
		moveq	#0,d0
		move.b	($FFFFFE7C).w,d0

loc_27EAC:				
		btst	#0,$22(a0)
		beq.s	loc_27EB8
		neg.w	d0
		add.w	d1,d0

loc_27EB8:				
		move.w	$30(a0),d1
		sub.w	d0,d1
		move.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_27EC4:				
		move.b	($FFFFFE60).w,d0
		lsr.w	#1,d0
		add.w	$30(a0),d0
		move.w	d0,ost_y_pos(a0)
		move.b	$22(a0),d1
		andi.b	#$18,d1
		beq.s	locret_27EE0
		addq.b	#1,$28(a0)

locret_27EE0:				
		rts	
; ===========================================================================

loc_27EE2:				
		move.l	ost_y_pos(a0),d3
		move.w	ost_y_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,ost_y_pos(a0)
		addi_.w	#8,ost_y_vel(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcc.s	locret_27F0E
		move.b	#0,$28(a0)

locret_27F0E:				
		rts	
; ===========================================================================

loc_27F10:				
		tst.b	$38(a0)
		bne.s	loc_27F26
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_27F4C
		move.b	#8,$38(a0)

loc_27F26:				
		jsrto	SpeedToPos,JmpTo14_SpeedToPos
		andi.w	#$7FF,ost_y_pos(a0)
		cmpi.w	#$2A8,ost_y_vel(a0)
		bne.s	loc_27F3C
		neg.b	$38(a0)

loc_27F3C:				
		move.b	$38(a0),d1
		ext.w	d1
		add.w	d1,ost_y_vel(a0)
		bne.s	locret_27F4C
		clr.b	$28(a0)

locret_27F4C:				
		rts	
; ===========================================================================

loc_27F4E:				
		move.w	#$10,d1
		moveq	#0,d0
		move.b	($FFFFFE88).w,d0
		lsr.w	#1,d0
		move.w	($FFFFFE8A).w,d3
		bra.s	loc_27F8E
; ===========================================================================

loc_27F60:				
		move.w	#$30,d1
		moveq	#0,d0
		move.b	($FFFFFE8C).w,d0
		move.w	($FFFFFE8E).w,d3
		bra.s	loc_27F8E
; ===========================================================================

loc_27F70:				
		move.w	#$50,d1
		moveq	#0,d0
		move.b	($FFFFFE90).w,d0
		move.w	($FFFFFE92).w,d3
		bra.s	loc_27F8E
; ===========================================================================

loc_27F80:				
		move.w	#$70,d1
		moveq	#0,d0
		move.b	($FFFFFE94).w,d0
		move.w	($FFFFFE96).w,d3

loc_27F8E:				
		tst.w	d3
		bne.s	loc_27F9C
		addq.b	#1,$2E(a0)
		andi.b	#3,$2E(a0)

loc_27F9C:				
		move.b	$2E(a0),d2
		andi.b	#3,d2
		bne.s	loc_27FBC
		sub.w	d1,d0
		add.w	$34(a0),d0
		move.w	d0,ost_x_pos(a0)
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_27FBC:				
		subq.b	#1,d2
		bne.s	loc_27FDA
		subq.w	#1,d1
		sub.w	d1,d0
		neg.w	d0
		add.w	$30(a0),d0
		move.w	d0,ost_y_pos(a0)
		addq.w	#1,d1
		add.w	$34(a0),d1
		move.w	d1,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_27FDA:				
		subq.b	#1,d2
		bne.s	loc_27FF8
		subq.w	#1,d1
		sub.w	d1,d0
		neg.w	d0
		add.w	$34(a0),d0
		move.w	d0,ost_x_pos(a0)
		addq.w	#1,d1
		add.w	$30(a0),d1
		move.w	d1,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_27FF8:				
		sub.w	d1,d0
		add.w	$30(a0),d0

loc_27FFE:
		move.w	d0,ost_y_pos(a0)
		neg.w	d1

loc_28004:
		add.w	$34(a0),d1
		move.w	d1,ost_x_pos(a0)

locret_2800C:
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2800E:				
		dc.w word_28010-Map_2800E
word_28010:	
		dc.w 1			
		dc.w $F00F,    0,    0,$FFF0			; 0
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo34_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo14_SolidObject:				
		jmp	SolidObject
JmpTo4_DespawnObject2:				
		jmp	DespawnObject2
JmpTo14_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6C - Small platform on pulleys (like at the start of MTZ2)
; ----------------------------------------------------------------------------

Conveyer:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2805C(pc,d0.w),d1
		jsr	off_2805C(pc,d1.w)
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_28058
		jmpto	DisplaySprite,JmpTo20_DisplaySprite
; ===========================================================================

loc_28058:				
		jmpto	Deleteobject,JmpTo34_DeleteObject
; ===========================================================================
off_2805C:	dc.w loc_28060-off_2805C			; 0 
		dc.w loc_28168-off_2805C			; 1
; ===========================================================================

loc_28060:				
		move.b	$28(a0),d0
		bmi.w	loc_28112
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Obj6C_MapUnc_28372,ost_mappings(a0)
		move.w	#tile_Nem_LavaCup+tile_pal4,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		jsrto	Adjust2PArtPointer,JmpTo35_Adjust2PArtPointer
		move.b	#0,$1A(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	d0,d1
		lsr.w	#3,d0
		andi.w	#$1E,d0
		lea	off_28252(pc),a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,$38(a0)
		move.l	a2,$3C(a0)
		andi.w	#$F,d1
		lsl.w	#2,d1
		move.b	d1,$38(a0)
		move.b	#4,$3A(a0)
		btst	#0,$22(a0)
		beq.s	loc_280F2
		neg.b	$3A(a0)
		moveq	#0,d1
		move.b	$38(a0),d1
		add.b	$3A(a0),d1
		cmp.b	$39(a0),d1
		bcs.s	loc_280EE
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_280EE
		move.b	$39(a0),d1
		subq.b	#4,d1

loc_280EE:				
		move.b	d1,$38(a0)

loc_280F2:				
		move.w	(a2,d1.w),d0
		add.w	$30(a0),d0
		move.w	d0,$34(a0)
		move.w	2(a2,d1.w),d0
		add.w	$32(a0),d0
		move.w	d0,$36(a0)
		bsr.w	loc_281DA
		bra.w	loc_28168
; ===========================================================================

loc_28112:				
		andi.w	#$7F,d0
		add.w	d0,d0
		lea	(off_282D6).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d1
		movea.l	a0,a1
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		bra.s	loc_28136
; ===========================================================================

loc_28130:				
		jsrto	FindFreeObj,JmpTo8_FindFreeObj
		bne.s	loc_28160

loc_28136:				
		_move.b	#id_Conveyer,ost_id(a1)
		move.w	(a2)+,d0
		add.w	d2,d0
		move.w	d0,ost_x_pos(a1)
		move.w	(a2)+,d0
		add.w	d3,d0
		move.w	d0,ost_y_pos(a1)
		move.w	d2,$30(a1)
		move.w	d3,$32(a1)
		move.w	(a2)+,d0
		move.b	d0,$28(a1)
		move.b	$22(a0),$22(a1)

loc_28160:				
		dbf	d1,loc_28130
		addq.l	#4,sp
		rts	
; ===========================================================================

loc_28168:				
					
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_2817E
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		jmpto	DetectPlatform,JmpTo5_DetectPlatform
; ===========================================================================

loc_2817E:				
		move.w	ost_x_pos(a0),d0
		cmp.w	$34(a0),d0
		bne.s	loc_281D4
		move.w	ost_y_pos(a0),d0
		cmp.w	$36(a0),d0
		bne.s	loc_281D4
		moveq	#0,d1
		move.b	$38(a0),d1
		add.b	$3A(a0),d1
		cmp.b	$39(a0),d1
		bcs.s	loc_281B0
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_281B0
		move.b	$39(a0),d1
		subq.b	#4,d1

loc_281B0:				
		move.b	d1,$38(a0)
		movea.l	$3C(a0),a1
		move.w	(a1,d1.w),d0
		add.w	$30(a0),d0
		move.w	d0,$34(a0)
		move.w	2(a1,d1.w),d0
		add.w	$32(a0),d0
		move.w	d0,$36(a0)
		bsr.w	loc_281DA

loc_281D4:				
		bsr.w	JmpTo15_SpeedToPos
		rts	
; ===========================================================================

loc_281DA:				
		moveq	#0,d0
		move.w	#-$100,d2
		move.w	ost_x_pos(a0),d0
		sub.w	$34(a0),d0
		bcc.s	loc_281EE
		neg.w	d0
		neg.w	d2

loc_281EE:				
		moveq	#0,d1
		move.w	#-$100,d3
		move.w	ost_y_pos(a0),d1
		sub.w	$36(a0),d1
		bcc.s	loc_28202
		neg.w	d1
		neg.w	d3

loc_28202:				
		cmp.w	d0,d1
		bcs.s	loc_2822C
		move.w	ost_x_pos(a0),d0
		sub.w	$34(a0),d0
		beq.s	loc_28218
		ext.l	d0
		asl.l	#8,d0
		divs.w	d1,d0
		neg.w	d0

loc_28218:				
		move.w	d0,ost_x_vel(a0)
		move.w	d3,ost_y_vel(a0)
		swap	d0
		move.w	d0,ost_x_sub(a0)
		clr.w	ost_y_sub(a0)
		rts	
; ===========================================================================

loc_2822C:				
		move.w	ost_y_pos(a0),d1
		sub.w	$36(a0),d1
		beq.s	loc_2823E
		ext.l	d1
		asl.l	#8,d1
		divs.w	d0,d1
		neg.w	d1

loc_2823E:				
		move.w	d1,ost_y_vel(a0)
		move.w	d2,ost_x_vel(a0)
		swap	d1
		move.w	d1,ost_y_sub(a0)
		clr.w	ost_x_sub(a0)
		rts	
; ===========================================================================
off_28252:	dc.w byte_28258-off_28252			; 0 
		dc.w byte_28282-off_28252			; 1
		dc.w byte_282AC-off_28252			; 2
byte_28258:	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0 ; 0
					
		dc.b   0,$E0,$FF,$EA,  0,$F6,  0,  0,  1,  0,  0,$16,  0,$F6,  0,$20 ; 16
		dc.b   0,$E0,  0,$20,  0,$20,  0,$16,  0, $A	; 32
byte_28282:	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0 ; 0
					
		dc.b   1,$60,$FF,$EA,  1,$76,  0,  0,  1,$80,  0,$16,  1,$76,  0,$20 ; 16
		dc.b   1,$60,  0,$20,  0,$20,  0,$16,  0, $A	; 32
byte_282AC:	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0 ; 0
					
		dc.b   1,$E0,$FF,$EA,  1,$F6,  0,  0,  2,  0,  0,$16,  1,$F6,  0,$20 ; 16
		dc.b   1,$E0,  0,$20,  0,$20,  0,$16,  0, $A	; 32
off_282D6:	dc.w byte_282DC-off_282D6			; 0 
		dc.w byte_2830E-off_282D6			; 1
		dc.w byte_28340-off_282D6			; 2
byte_282DC:	dc.b   0,  7,  0,  0,  0,  0,  0,  1,$FF,$E0,  0,$3A,  0,  3,$FF,$E0 ; 0
					
		dc.b   0,$80,  0,  3,$FF,$E0,  0,$C6,  0,  3,  0,  0,  1,  0,  0,  6 ; 16
		dc.b   0,$20,  0,$C6,  0,  8,  0,$20,  0,$80,  0,  8,  0,$20,  0,$3A ; 32
		dc.b   0,  8					; 48
byte_2830E:	dc.b   0,  7,  0,  0,  0,  0,  0,$11,$FF,$E0,  0,$5A,  0,$13,$FF,$E0 ; 0
					
		dc.b   0,$C0,  0,$13,$FF,$E0,  1,$26,  0,$13,  0,  0,  1,$80,  0,$16 ; 16
		dc.b   0,$20,  1,$26,  0,$18,  0,$20,  0,$C0,  0,$18,  0,$20,  0,$5A ; 32
		dc.b   0,$18					; 48
byte_28340:	dc.b   0,  7,  0,  0,  0,  0,  0,$21,$FF,$E0,  0,$7A,  0,$23,$FF,$E0 ; 0
					
		dc.b   1,  0,  0,$23,$FF,$E0,  1,$86,  0,$23,  0,  0,  2,  0,  0,$26 ; 16
		dc.b   0,$20,  1,$86,  0,$28,  0,$20,  1,  0,  0,$28,  0,$20,  0,$7A ; 32
		dc.b   0,$28					; 48
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Obj6C_MapUnc_28372:	include "mappings/sprite/obj6C.asm"
; ===========================================================================

	if Revision<2
		nop
	endc
	
	if RemoveJmpTos=0
JmpTo20_DisplaySprite:				
		jmp	DisplaySprite
JmpTo34_DeleteObject:				
		jmp	DeleteObject
JmpTo8_FindFreeObj:				
		jmp	FindFreeObj
JmpTo35_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo5_DetectPlatform:				
		jmp	DetectPlatform
JmpTo15_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 6E - Large platform moving in a circle (like at the start of MTZ3)
; ----------------------------------------------------------------------------

LargeRotatingPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_283BA(pc,d0.w),d1
		jmp	off_283BA(pc,d1.w)
; ===========================================================================
off_283BA:	dc.w loc_283C8-off_283BA			; 0 
		dc.w loc_28432-off_283BA			; 1
		dc.w loc_284BC-off_283BA			; 2
byte_283C0:	dc.b $10, $C					; 0
		dc.b $28,  8					; 2
		dc.b $60,$18					; 4
		dc.b  $C, $C					; 6
; ===========================================================================

loc_283C8:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Obj6E_MapUnc_2852C,ost_mappings(a0)
		move.w	#0+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo36_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		lea	byte_283C0(pc,d0.w),a3
		move.b	(a3)+,$19(a0)
		move.b	(a3)+,ost_height(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$30(a0)
		cmpi.b	#3,d0
		bne.s	loc_28432
		addq.b	#2,ost_primary_routine(a0)
		move.w	#tile_Nem_WheelIndent+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo36_Adjust2PArtPointer
		move.b	#5,$18(a0)
		bra.w	loc_284BC
; ===========================================================================

loc_28432:				
					
		move.w	ost_x_pos(a0),-(sp)
		move.b	($FFFFFE80).w,d1
		subi.b	#$38,d1
		ext.w	d1
		move.b	($FFFFFE84).w,d2
		subi.b	#$38,d2
		ext.w	d2
		btst	#0,$28(a0)
		beq.s	loc_28456
		neg.w	d1
		neg.w	d2

loc_28456:				
		btst	#1,$28(a0)
		beq.s	loc_28462
		neg.w	d1
		exg	d1,d2

loc_28462:				
		add.w	$34(a0),d1
		move.w	d1,ost_x_pos(a0)
		add.w	$30(a0),d2
		move.w	d2,ost_y_pos(a0)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo15_SolidObject
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_284A4
		jmp	DisplaySprite
; ===========================================================================

loc_284A4:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_284B6
		bclr	#7,2(a2,d0.w)

loc_284B6:				
		jmp	DeleteObject
; ===========================================================================

loc_284BC:				
					
		move.b	($FFFFFE80).w,d1
		lsr.b	#1,d1
		subi.b	#$1C,d1
		ext.w	d1
		move.b	($FFFFFE84).w,d2
		lsr.b	#1,d2
		subi.b	#$1C,d2
		ext.w	d2
		btst	#0,$28(a0)
		beq.s	loc_284E0
		neg.w	d1
		neg.w	d2

loc_284E0:				
		btst	#1,$28(a0)
		beq.s	loc_284EC
		neg.w	d1
		exg	d1,d2

loc_284EC:				
		add.w	$34(a0),d1
		move.w	d1,ost_x_pos(a0)
		add.w	$30(a0),d2
		move.w	d2,ost_y_pos(a0)
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_28514
		jmp	DisplaySprite
; ===========================================================================

loc_28514:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_28526
		bclr	#7,2(a2,d0.w)

loc_28526:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Obj6E_MapUnc_2852C:	include "mappings/sprite/obj6E.asm"
; ===========================================================================

	if RemoveJmpTos=0
JmpTo36_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo15_SolidObject:				
		jmp	SolidObject
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 70 - MTZ giant cog
; ----------------------------------------------------------------------------

Cog:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_285CE(pc,d0.w),d1
		jmp	off_285CE(pc,d1.w)
; ===========================================================================
off_285CE:	dc.w loc_285D2-off_285CE			; 0 
		dc.w loc_28652-off_285CE			; 1
; ===========================================================================

loc_285D2:				
		moveq	#7,d1
		moveq	#0,d4
		lea	(byte_28726).l,a2
		movea.l	a0,a1
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		bset	#7,$22(a0)
		bra.s	loc_285F4
; ===========================================================================

loc_285EE:				
		jsrto	FindNextFreeObj,JmpTo14_FindNextFreeObj
		bne.s	loc_2864E

loc_285F4:				
		_move.b	ost_id(a0),ost_id(a1)
		addq.b	#2,$24(a1)
		move.l	#Map_28786,ost_mappings(a1)
		move.w	#tile_Nem_Wheel+tile_pal4,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo4_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.w	d2,$32(a1)
		move.w	d3,$30(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,ost_x_pos(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,ost_y_pos(a1)
		move.b	(a2)+,$1A(a1)
		move.w	d4,$34(a1)
		addq.w	#3,d4
		move.b	$22(a0),$22(a1)

loc_2864E:				
		dbf	d1,loc_285EE

loc_28652:				
		move.w	ost_x_pos(a0),-(sp)
		move.b	(v_frame_counter_low).w,d0
		move.b	d0,d1
		andi.w	#$F,d0
		bne.s	loc_286CA
		move.w	$36(a0),d1
		btst	#0,$22(a0)
		beq.s	loc_28684
		subi.w	#$18,d1
		bcc.s	loc_286A2
		moveq	#$48,d1
		subq.w	#3,$34(a0)
		bcc.s	loc_286A2
		move.w	#$15,$34(a0)
		bra.s	loc_286A2
; ===========================================================================

loc_28684:				
		addi.w	#$18,d1
		cmpi.w	#$60,d1
		bcs.s	loc_286A2
		moveq	#0,d1
		addq.w	#3,$34(a0)
		cmpi.w	#$18,$34(a0)
		bcs.s	loc_286A2
		move.w	#0,$34(a0)

loc_286A2:				
		move.w	d1,$36(a0)
		add.w	$34(a0),d1
		lea	byte_28726(pc,d1.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$32(a0),d0
		move.w	d0,ost_x_pos(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,ost_y_pos(a0)
		move.b	(a1)+,$1A(a0)

loc_286CA:				
		move.b	$1A(a0),d0
		add.w	d0,d0
		andi.w	#$1E,d0
		moveq	#0,d1
		moveq	#0,d2
		move.b	byte_28706(pc,d0.w),d1
		move.b	byte_28706+1(pc,d0.w),d2
		move.w	d2,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo16_SolidObject
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_28700
		jmp	DisplaySprite
; ===========================================================================

loc_28700:				
		jmp	DeleteObject
; ===========================================================================
byte_28706:	dc.b $10,$10					; 0
		dc.b $10,$10					; 2
		dc.b $10,$10					; 4
		dc.b $10,$10					; 6
		dc.b $10,$10					; 8
		dc.b $10,$10					; 10
		dc.b $10,$10					; 12
		dc.b $10, $C					; 14
		dc.b $10,  8					; 16
		dc.b $10, $C					; 18
		dc.b $10,$10					; 20
		dc.b $10,$10					; 22
		dc.b $10,$10					; 24
		dc.b $10,$10					; 26
		dc.b $10,$10					; 28
		dc.b $10,$10					; 30
byte_28726:	dc.b   0,$B8,  0,$32,$CE,  4,$48,  0,  8,$32,$32, $C,  0,$48,$10,$CE ; 0
					
		dc.b $32,$14,$B8,  0,$18,$CE,$CE,$1C, $D,$B8,  1,$3F,$DA,  5,$48, $C ; 16
		dc.b   9,$27,$3C, $D,$F3,$48,$11,$C1,$26,$15,$B8,$F4,$19,$D9,$C4,$1D ; 32
		dc.b $19,$BC,  2,$46,$E9,  6,$46,$17, $A,$19,$44, $E,$E7,$44,$12,$BA ; 48
		dc.b $17,$16,$BA,$E9,$1A,$E7,$BC,$1E,$27,$C4,  3,$48,$F4,  7,$3F,$26 ; 64
		dc.b  $B, $D,$48, $F,$D9,$3C,$13,$B8, $C,$17,$C1,$DA,$1B,$F3,$B8,$1F ; 80
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28786:				
		dc.w word_287C6-Map_28786			; 0
		dc.w word_287D8-Map_28786			; 1
		dc.w word_287E2-Map_28786			; 2
		dc.w word_287EC-Map_28786			; 3
		dc.w word_287F6-Map_28786			; 4
		dc.w word_28800-Map_28786			; 5
		dc.w word_2880A-Map_28786			; 6
		dc.w word_28814-Map_28786			; 7
		dc.w word_2881E-Map_28786			; 8
		dc.w word_28830-Map_28786			; 9
		dc.w word_2883A-Map_28786			; 10
		dc.w word_28844-Map_28786			; 11
		dc.w word_2884E-Map_28786			; 12
		dc.w word_28858-Map_28786			; 13
		dc.w word_28862-Map_28786			; 14
		dc.w word_2886C-Map_28786			; 15
		dc.w word_28876-Map_28786			; 16
		dc.w word_28888-Map_28786			; 17
		dc.w word_28892-Map_28786			; 18
		dc.w word_2889C-Map_28786			; 19
		dc.w word_288A6-Map_28786			; 20
		dc.w word_288B0-Map_28786			; 21
		dc.w word_288BA-Map_28786			; 22
		dc.w word_288C4-Map_28786			; 23
		dc.w word_288CE-Map_28786			; 24
		dc.w word_288E0-Map_28786			; 25
		dc.w word_288EA-Map_28786			; 26
		dc.w word_288F4-Map_28786			; 27
		dc.w word_288FE-Map_28786			; 28
		dc.w word_28908-Map_28786			; 29
		dc.w word_28912-Map_28786			; 30
		dc.w word_2891C-Map_28786			; 31
word_287C6:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0			; 0
		dc.w $F007, $800, $800,	   0			; 4
word_287D8:	dc.w 1			
		dc.w $F00B, $808, $804,$FFF4			; 0
word_287E2:	dc.w 1			
		dc.w $F00F, $814, $80A,$FFF0			; 0
word_287EC:	dc.w 1			
		dc.w $F00F, $824, $812,$FFF0			; 0
word_287F6:	dc.w 1			
		dc.w $F00F, $834, $81A,$FFF0			; 0
word_28800:	dc.w 1			
		dc.w $F00F, $844, $822,$FFF0			; 0
word_2880A:	dc.w 1			
		dc.w $F00F, $854, $82A,$FFF0			; 0
word_28814:	dc.w 1			
		dc.w $F40E, $864, $832,$FFF0			; 0
word_2881E:	dc.w 2			
word_28820:	dc.w $F00D, $870, $838,$FFF0			; 0
		dc.w	$D,$1870,$1838,$FFF0			; 4
word_28830:	dc.w 1			
word_28832:	dc.w $F40E,$1864,$1832,$FFF0			; 0
word_2883A:	dc.w 1			
		dc.w $F00F,$1854,$182A,$FFF0			; 0
word_28844:	dc.w 1			
		dc.w $F00F,$1844,$1822,$FFF0			; 0
word_2884E:	dc.w 1			
		dc.w $F00F,$1834,$181A,$FFF0			; 0
word_28858:	dc.w 1			
		dc.w $F00F,$1824,$1812,$FFF0			; 0
word_28862:	dc.w 1			
		dc.w $F00F,$1814,$180A,$FFF0			; 0
word_2886C:	dc.w 1			
		dc.w $F00B,$1808,$1804,$FFF4			; 0
word_28876:	dc.w 2			
		dc.w $F007,$1000,$1000,$FFF0			; 0
		dc.w $F007,$1800,$1800,	   0			; 4
word_28888:	dc.w 1			
		dc.w $F00B,$1008,$1004,$FFF4			; 0
word_28892:	dc.w 1			
		dc.w $F00F,$1014,$100A,$FFF0			; 0
word_2889C:	dc.w 1			
		dc.w $F00F,$1024,$1012,$FFF0			; 0
word_288A6:	dc.w 1			
		dc.w $F00F,$1034,$101A,$FFF0			; 0
word_288B0:	dc.w 1			
		dc.w $F00F,$1044,$1022,$FFF0			; 0
word_288BA:	dc.w 1			
		dc.w $F00F,$1054,$102A,$FFF0			; 0
word_288C4:	dc.w 1			
		dc.w $F40E,$1064,$1032,$FFF0			; 0
word_288CE:	dc.w 2			
		dc.w $F00D,  $70,  $38,$FFF0			; 0
		dc.w	$D,$1070,$1038,$FFF0			; 4
word_288E0:	dc.w 1			
		dc.w $F40E,  $64,  $32,$FFF0			; 0
word_288EA:	dc.w 1			
		dc.w $F00F,  $54,  $2A,$FFF0			; 0
word_288F4:	dc.w 1			
		dc.w $F00F,  $44,  $22,$FFF0			; 0
word_288FE:	dc.w 1			
		dc.w $F00F,  $34,  $1A,$FFF0			; 0
word_28908:	dc.w 1			
		dc.w $F00F,  $24,  $12,$FFF0			; 0
word_28912:	dc.w 1			
		dc.w $F00F,  $14,   $A,$FFF0			; 0
word_2891C:	dc.w 1			
		dc.w $F00B,    8,    4,$FFF4			; 0
; ===========================================================================

	if Revision<2
		nop
	endc		

	if RemoveJmpTos=0
JmpTo14_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo4_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo16_SolidObject:				
		jmp	SolidObject

		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 72 - Conveyor belt from CNZ
; Invisible object, the visible belt is actually part of the level layout.
; ----------------------------------------------------------------------------
ConveyerBelt:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2894A(pc,d0.w),d1
		jmp	off_2894A(pc,d1.w)
; ===========================================================================
off_2894A:	dc.w loc_2894E-off_2894A			; 0 
		dc.w loc_28980-off_2894A			; 1
; ===========================================================================

loc_2894E:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$30,$3C(a0)
		move.b	$28(a0),d0
		bpl.s	loc_28964
		move.w	#$70,$3C(a0)

loc_28964:				
		andi.b	#$7F,d0
		lsl.b	#4,d0
		move.b	d0,$38(a0)
		move.w	#2,$36(a0)
		btst	#0,$22(a0)
		beq.s	loc_28980
		neg.w	$36(a0)

loc_28980:				
					
		lea	($FFFFB000).w,a1
		bsr.s	loc_28990
		lea	($FFFFB040).w,a1
		bsr.s	loc_28990
		jmpto	DespawnObject3,JmpTo5_DespawnObject3
; ===========================================================================

loc_28990:				
		moveq	#0,d2
		move.b	$38(a0),d2
		move.w	d2,d3
		add.w	d3,d3
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bcc.s	locret_289CA
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		move.w	$3C(a0),d0
		add.w	d0,d1
		cmp.w	d0,d1
		bcc.s	locret_289CA
		btst	#1,$22(a1)
		bne.s	locret_289CA
		move.w	$36(a0),d0
		add.w	d0,ost_x_pos(a1)

locret_289CA:				
		rts	
; ===========================================================================

	if RemoveJmpTos=0
JmpTo5_DespawnObject3:				
		jmp	DespawnObject3

		align 4
	endc

; ===========================================================================		
; ----------------------------------------------------------------------------
; Object 73 - Solid rotating ring thing from Mystic Cave Zone
; (unused, but can be seen in debug mode)
; ----------------------------------------------------------------------------
MysticCaveRotatingRings:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_289E2(pc,d0.w),d1
		jmp	off_289E2(pc,d1.w)
; ===========================================================================
off_289E2:	
		dc.w loc_289E8-off_289E2			; 0 
		dc.w loc_28AD6-off_289E2			; 1
		dc.w loc_28B7E-off_289E2			; 2
; ===========================================================================

loc_289E8:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_28B9C,ost_mappings(a0)
		move.w	#tile_Nem_Ring+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo37_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#8,$19(a0)
		move.w	ost_x_pos(a0),$3A(a0)
		move.w	ost_y_pos(a0),$38(a0)
		move.b	#0,$20(a0)
		bset	#7,$22(a0)
		move.b	$28(a0),d1
		andi.b	#-$10,d1
		ext.w	d1
		asl.w	#3,d1
		move.w	d1,$3E(a0)
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#-$40,d0
		move.b	d0,$26(a0)
		lea	$29(a0),a2
		move.b	$28(a0),d1
		andi.w	#7,d1
		move.b	#0,(a2)+
		move.w	d1,d3
		lsl.w	#4,d3
		move.b	d3,$3C(a0)
		subq.w	#1,d1
		bcs.s	loc_28AC8
		btst	#3,$28(a0)
		beq.s	loc_28A6E
		subq.w	#1,d1
		bcs.s	loc_28AC8

loc_28A6E:				
		jsrto	FindFreeObj,JmpTo9_FindFreeObj
		bne.s	loc_28AC8
		addq.b	#1,$29(a0)
		move.w	a1,d5
		subi.w	#-$5000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+
		move.b	#4,$24(a1)
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.b	$20(a0),$20(a1)
		move.b	$22(a0),$22(a1)
		subi.b	#$10,d3
		move.b	d3,$3C(a1)
		dbf	d1,loc_28A6E

loc_28AC8:				
		move.w	a0,d5
		subi.w	#-$5000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+

loc_28AD6:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_28AF4
		move.w	#8,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo17_SolidObject
		bra.w	loc_28B46
; ===========================================================================

loc_28AF4:				
		move.w	$3E(a0),d0
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		jsr	CalcSine
		move.w	$38(a0),d2
		move.w	$3A(a0),d3
		lea	$29(a0),a2
		moveq	#0,d6
		move.b	(a2)+,d6

loc_28B16:				
		moveq	#0,d4
		move.b	(a2)+,d4
		lsl.w	#6,d4
		addi.l	#-$5000,d4
		movea.l	d4,a1
		moveq	#0,d4
		move.b	$3C(a1),d4
		move.l	d4,d5
		muls.w	d0,d4
		asr.l	#8,d4
		muls.w	d1,d5
		asr.l	#8,d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d4,ost_y_pos(a1)
		move.w	d5,ost_x_pos(a1)
		dbf	d6,loc_28B16
		rts	
; ===========================================================================

loc_28B46:				
		move.w	$3A(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_28B5E
		jmpto	DisplaySprite,JmpTo21_DisplaySprite
; ===========================================================================

loc_28B5E:				
		moveq	#0,d2
		lea	$29(a0),a2
		move.b	(a2)+,d2

loc_28B66:				
		moveq	#0,d0
		move.b	(a2)+,d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a1
		jsrto	DeleteChild,JmpTo_DeleteChild
		dbf	d2,loc_28B66
		rts	
; ===========================================================================

loc_28B7E:				
		move.w	#8,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$36(a0),d4
		bsr.w	JmpTo17_SolidObject
		move.w	ost_x_pos(a0),$36(a0)
		jmpto	DisplaySprite,JmpTo21_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28B9C:				
		dc.w word_28B9E-Map_28B9C
word_28B9E:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo21_DisplaySprite:				
		jmp	DisplaySprite
JmpTo9_FindFreeObj:				
		jmp	FindFreeObj
JmpTo_DeleteChild:				
		jmp	DeleteChild
JmpTo37_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo17_SolidObject:				
		jmp	SolidObject
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 75 - MCZ brick and spikeball chain
; ----------------------------------------------------------------------------

BrickAndSpikeChain:				
		btst	#render_subobjects_bit,ost_render(a0)
		bne.w	loc_28BE0
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_28BE8(pc,d0.w),d1
		jmp	off_28BE8(pc,d1.w)
; ===========================================================================

loc_28BE0:				
		move.w	#$280,d0
		jmpto	DisplaySprite3,JmpTo_DisplaySprite3
; ===========================================================================
off_28BE8:	
		dc.w loc_28BEE-off_28BE8			; 0 
		dc.w loc_28CCA-off_28BE8			; 1
		dc.w loc_28D6C-off_28BE8			; 2
; ===========================================================================

loc_28BEE:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_28D8A,ost_mappings(a0)
		move.w	#tile_LevelArt+tile_pal2,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo38_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#5,$18(a0)
		move.b	#$10,$19(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	$28(a0),d1
		move.b	d1,d0
		andi.w	#$F,d1
		andi.b	#-$10,d0
		ext.w	d0
		asl.w	#3,d0
		move.w	d0,$34(a0)
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#-$40,d0
		move.b	d0,$26(a0)
		cmpi.b	#$F,d1
		bne.s	loc_28C5E
		addq.b	#2,ost_primary_routine(a0)
		move.b	#4,$18(a0)
		move.b	#2,$1A(a0)
		rts	
; ===========================================================================

loc_28C5E:				
		move.b	#-$66,$20(a0)
		jsrto	FindNextFreeObj,JmpTo15_FindNextFreeObj
		bne.s	loc_28CCA
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#$40,ost_mainspr_width(a1)
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		move.b	d1,ost_mainspr_childsprites(a1)
		subq.w	#1,d1
		lea	ost_subspr2_x_pos(a1),a2

loc_28CA0:				
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_28CA0
		move.w	d2,ost_x_pos(a1)
		move.w	d3,ost_y_pos(a1)
		move.b	#0,ost_mainspr_frame(a1)
		move.l	a1,$3C(a0)
		move.b	#$40,ost_mainspr_height(a1)
		bset	#render_useheight_bit,ost_render(a1)

loc_28CCA:								
		moveq	#0,d0
		moveq	#0,d1
		move.w	$34(a0),d0
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo8_CalcSine
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.l	$3C(a0),a1
		move.b	ost_mainspr_childsprites(a1),d6
		subq.w	#1,d6
		bcs.s	loc_28D3E
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		moveq	#0,d4
		moveq	#0,d5
		lea	ost_subspr2_x_pos(a1),a2

loc_28D04:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_28D04
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,ost_x_pos(a0)
		move.w	d4,ost_y_pos(a0)
		move.w	ost_subspr6_x_pos(a1),ost_x_pos(a1)
		move.w	ost_subspr6_y_pos(a1),ost_y_pos(a1)

loc_28D3E:				
		tst.w	(f_two_player).w
		beq.s	loc_28D48
		jmpto	DisplaySprite,JmpTo22_DisplaySprite
; ===========================================================================

loc_28D48:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_28D60
		jmpto	DisplaySprite,JmpTo22_DisplaySprite
; ===========================================================================

loc_28D60:				
		movea.l	$3C(a0),a1
		jsrto	DeleteChild,JmpTo2_DeleteChild
		jmpto	DeleteObject,JmpTo38_DeleteObject
; ===========================================================================

loc_28D6C:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo18_SolidObject
		jmpto	DespawnObject,JmpTo22_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28D8A:				
		dc.w word_28D90-Map_28D8A			; 0
		dc.w word_28DA2-Map_28D8A			; 1
		dc.w word_28DAC-Map_28D8A			; 2
word_28D90:	dc.w 2			
		dc.w $F00D,  $7A,  $3D,$FFF0			; 0
		dc.w	$D,$187A,$183D,$FFF0			; 4
word_28DA2:	dc.w 1			
		dc.w $F805,$4066,$4033,$FFF8			; 0
word_28DAC:	dc.w 2			
		dc.w $F007,$4040,$4020,$FFF0			; 0
		dc.w $F007,$4840,$4820,	   0			; 4
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo_DisplaySprite3:				
		jmp	DisplaySprite3
JmpTo22_DisplaySprite:				
		jmp	DisplaySprite
JmpTo38_DeleteObject:				
		jmp	DeleteObject
JmpTo22_DespawnObject:				
		jmp	DespawnObject
JmpTo2_DeleteChild:				
		jmp	DeleteChild
JmpTo15_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo38_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo8_CalcSine:				
		jmp	CalcSine
JmpTo18_SolidObject:				
		jmp	SolidObject

		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 76 - MCZ sliding spike block
; ----------------------------------------------------------------------------

SlidingSpikePlat:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_28E06(pc,d0.w),d1
		jmp	off_28E06(pc,d1.w)
; ===========================================================================
off_28E06:	
		dc.w loc_28E0E-off_28E06			; 0 
		dc.w loc_28E5E-off_28E06			; 1
byte_28E0A:	
		dc.b $40					; 0
		dc.b $10					; 1
		dc.b   0					; 2
		dc.b   0					; 3
; ===========================================================================

loc_28E0E:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_28F3A,ost_mappings(a0)
		move.w	#tile_LevelArt,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo39_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_28E0A(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,ost_height(a0)
		move.b	(a2)+,$1A(a0)
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$30(a0)
		andi.w	#$F,$28(a0)

loc_28E5E:				
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	off_28ECA(pc,d0.w),d1
		jsr	off_28ECA(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	ost_render(a0)
		bpl.s	loc_28EC2
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo19_SolidObject
		swap	d6
		andi.w	#3,d6
		beq.s	loc_28EC2
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_28EAE
		lea	($FFFFB000).w,a1
		jsrto	React_ChkHurt2,JmpTo_React_ChkHurt2
		bclr	#5,$22(a0)

loc_28EAE:				
		andi.b	#2,d6
		beq.s	loc_28EC2
		lea	($FFFFB040).w,a1
		jsrto	React_ChkHurt2,JmpTo_React_ChkHurt2
		bclr	#6,$22(a0)

loc_28EC2:				
		move.w	$34(a0),d0
		jmpto	DespawnObject2,JmpTo5_DespawnObject2
; ===========================================================================
off_28ECA:	dc.w loc_28ECE-off_28ECA			; 0 
		dc.w loc_28F1E-off_28ECA			; 1
; ===========================================================================

loc_28ECE:				
		lea	($FFFFB000).w,a1
		bsr.s	loc_28ED8
		lea	($FFFFB040).w,a1

loc_28ED8:				
		btst	#1,$22(a1)
		bne.s	locret_28F1C
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$C0,d0	
		btst	#0,$22(a0)
		beq.s	loc_28EF8
		subi.w	#$100,d0

loc_28EF8:				
		cmpi.w	#$80,d0	
		bcc.s	locret_28F1C
		move.w	ost_y_pos(a1),d0
		sub.w	ost_y_pos(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bcc.s	locret_28F1C
		move.b	#2,$28(a0)
		move.w	#$80,$36(a0)

locret_28F1C:				
		rts	
; ===========================================================================

loc_28F1E:				
		tst.w	$36(a0)
		beq.s	locret_28F38
		subq.w	#1,$36(a0)
		moveq	#-1,d0
		btst	#0,$22(a0)
		beq.s	loc_28F34
		neg.w	d0

loc_28F34:				
		add.w	d0,ost_x_pos(a0)

locret_28F38:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28F3A:				
		dc.w word_28F3C-Map_28F3A
word_28F3C:	dc.w 6			
		dc.w $F005,$242C,$2216,$FFC0			; 0
		dc.w	 5,$242C,$2216,$FFC0			; 4
		dc.w $F007,$6040,$6020,$FFD0			; 8
		dc.w $F00F,$6048,$6024,$FFE0			; 12
		dc.w $F00F,$6048,$6024,	   0			; 16
		dc.w $F00F,$6048,$6024,	 $20			; 20
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo_React_ChkHurt2:				
		jmp	React_ChkHurt2
JmpTo39_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo19_SolidObject:				
		jmp	SolidObject
JmpTo5_DespawnObject2:				
		jmp	DespawnObject2
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 77 - MCZ Bridge (opens downward in two halves)
; ----------------------------------------------------------------------------

BridgeMysticCave:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_28F96(pc,d0.w),d1
		jmp	off_28F96(pc,d1.w)
; ===========================================================================
off_28F96:	
		dc.w loc_28F9A-off_28F96			; 0 
		dc.w loc_28FBC-off_28F96			; 1
; ===========================================================================

loc_28F9A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_29064,ost_mappings(a0)
		move.w	#tile_Nem_DrawbridgeLogs+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo40_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#-$80,$19(a0)

loc_28FBC:				
		tst.b	$34(a0)
		bne.s	loc_28FF0
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_28FF0
		move.b	#1,$34(a0)
		bchg	#0,$1C(a0)
		tst.b	ost_render(a0)
		bpl.s	loc_28FF0
		move.w	#$BB,d0	
		jsr	PlaySound

loc_28FF0:				
		lea	(off_29050).l,a1
		jsr	AnimateSprite
		tst.b	$1A(a0)
		bne.s	loc_2901A
		move.w	#$4B,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo20_SolidObject
		jmpto	DespawnObject,JmpTo23_DespawnObject
; ===========================================================================

loc_2901A:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_2904C
		move.b	d0,d1
		andi.b	#8,d0
		beq.s	loc_29036
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)

loc_29036:				
		andi.b	#$10,d1
		beq.s	loc_29046
		lea	($FFFFB040).w,a1
		bclr	#3,$22(a1)

loc_29046:				
		andi.b	#-$19,$22(a0)

loc_2904C:				
		jmpto	DespawnObject,JmpTo23_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_29050:	dc.w byte_29054-off_29050			; 0 
		dc.w byte_2905C-off_29050			; 1
byte_29054:	dc.b   3,  4,  3,  2,  1,  0,$FE,  1		; 0	
byte_2905C:	dc.b   3,  0,  1,  2,  3,  4,$FE,  1		; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29064:				
		dc.w word_2906E-Map_29064			; 0
		dc.w word_290B0-Map_29064			; 1
		dc.w word_290F2-Map_29064			; 2
		dc.w word_29134-Map_29064			; 3
		dc.w word_29176-Map_29064			; 4
word_2906E:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0			; 0
		dc.w $F805,    0,    0,$FFD0			; 4
		dc.w $F805,    0,    0,$FFE0			; 8
		dc.w $F805,    0,    0,$FFF0			; 12
		dc.w $F805,    0,    0,	   0			; 16
		dc.w $F805,    0,    0,	 $10			; 20
		dc.w $F805,    0,    0,	 $20			; 24
		dc.w $F805,    0,    0,	 $30			; 28
word_290B0:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0			; 0
		dc.w $FE05,    0,    0,$FFCE			; 4
		dc.w  $405,    0,    0,$FFDD			; 8
		dc.w  $A05,    0,    0,$FFEC			; 12
		dc.w  $A05,    0,    0,	   4			; 16
		dc.w  $405,    0,    0,	 $13			; 20
		dc.w $FE05,    0,    0,	 $22			; 24
		dc.w $F805,    0,    0,	 $30			; 28
word_290F2:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0			; 0
		dc.w  $305,    0,    0,$FFCB			; 4
		dc.w  $E05,    0,    0,$FFD6			; 8
		dc.w $1905,    0,    0,$FFE1			; 12
		dc.w $1905,    0,    0,	  $F			; 16
		dc.w  $E05,    0,    0,	 $1A			; 20
		dc.w  $305,    0,    0,	 $25			; 24
		dc.w $F805,    0,    0,	 $30			; 28
word_29134:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0			; 0
		dc.w  $605,    0,    0,$FFC6			; 4
		dc.w $1505,    0,    0,$FFCC			; 8
		dc.w $2405,    0,    0,$FFD2			; 12
		dc.w $2405,    0,    0,	 $1E			; 16
		dc.w $1505,    0,    0,	 $24			; 20
		dc.w  $605,    0,    0,	 $2A			; 24
		dc.w $F805,    0,    0,	 $30			; 28
word_29176:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0			; 0
		dc.w  $805,    0,    0,$FFC0			; 4
		dc.w $1805,    0,    0,$FFC0			; 8
		dc.w $2805,    0,    0,$FFC0			; 12
		dc.w $F805,    0,    0,	 $30			; 16
		dc.w  $805,    0,    0,	 $30			; 20
		dc.w $1805,    0,    0,	 $30			; 24
		dc.w $2805,    0,    0,	 $30			; 28
; ===========================================================================

	if RemoveJmpTos=0
JmpTo23_DespawnObject:				
		jmp	DespawnObject
JmpTo40_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo20_SolidObject:				
		jmp	SolidObject
		
		align 4
	endc	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 78 - CPZ stair blocks
; ----------------------------------------------------------------------------

StairBlocks:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_291E2(pc,d0.w),d1
		jsr	off_291E2(pc,d1.w)
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo6_DespawnObject2
; ===========================================================================
off_291E2:	dc.w loc_291E8-off_291E2			; 0 
		dc.w loc_2926C-off_291E2			; 1
		dc.w loc_29280-off_291E2			; 2
; ===========================================================================

loc_291E8:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#$34,d3
		moveq	#2,d4
		btst	#0,$22(a0)
		beq.s	loc_291FC
		moveq	#$3A,d3
		moveq	#-2,d4

loc_291FC:				
		move.w	ost_x_pos(a0),d2
		movea.l	a0,a1
		moveq	#3,d1
		bra.s	loc_29214
; ===========================================================================

loc_29206:				
		jsrto	FindNextFreeObj,JmpTo16_FindNextFreeObj
		bne.w	loc_2926C
		move.b	#4,$24(a1)

loc_29214:				
		_move.b	ost_id(a0),ost_id(a1)
		move.l	#Map_2800E,ost_mappings(a1)
		move.w	#tile_Nem_StairBlock+tile_pal4,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo5_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#$10,$19(a1)
		move.b	$28(a0),$28(a1)
		move.w	d2,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_x_pos(a0),$30(a1)
		move.w	ost_y_pos(a1),$32(a1)
		addi.w	#$20,d2
		move.b	d3,$2F(a1)
		move.l	a0,$3C(a1)
		add.b	d4,d3
		dbf	d1,loc_29206

loc_2926C:				
					
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#7,d0
		add.w	d0,d0
		move.w	off_292B8(pc,d0.w),d1
		jsr	off_292B8(pc,d1.w)

loc_29280:				
		movea.l	$3C(a0),a2
		moveq	#0,d0
		move.b	$2F(a0),d0
		move.w	(a2,d0.w),d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo21_SolidObject
		swap	d6
		or.b	d6,$2E(a2)
		rts	
; ===========================================================================
off_292B8:	dc.w loc_292C8-off_292B8			; 0 
		dc.w loc_29334-off_292B8			; 1
		dc.w loc_292EC-off_292B8			; 2
		dc.w loc_29334-off_292B8			; 3
		dc.w loc_292C8-off_292B8			; 4
		dc.w loc_2935E-off_292B8			; 5
		dc.w loc_292EC-off_292B8			; 6
		dc.w loc_2935E-off_292B8			; 7
; ===========================================================================

loc_292C8:				
		tst.w	$2C(a0)
		bne.s	loc_292E0
		move.b	$2E(a0),d0
		andi.b	#$30,d0
		beq.s	locret_292DE
		move.w	#$1E,$2C(a0)

locret_292DE:				
		rts	
; ===========================================================================

loc_292E0:				
		subq.w	#1,$2C(a0)
		bne.s	locret_292DE
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_292EC:				
		tst.w	$2C(a0)
		bne.s	loc_29304
		move.b	$2E(a0),d0
		andi.b	#$C,d0
		beq.s	locret_29302
		move.w	#$3C,$2C(a0)

locret_29302:				
		rts	
; ===========================================================================

loc_29304:				
		subq.w	#1,$2C(a0)
		bne.s	loc_29310
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_29310:				
		lea	$34(a0),a1
		move.w	$2C(a0),d0
		lsr.b	#2,d0
		andi.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		rts	
; ===========================================================================

loc_29334:				
		lea	$34(a0),a1
		cmpi.w	#$80,(a1)
		beq.s	locret_2935C
		addq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		lsr.l	#1,d1
		move.l	d1,d2
		lsr.l	#1,d1
		move.l	d1,d3
		add.l	d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+

locret_2935C:				
		rts	
; ===========================================================================

loc_2935E:				
		lea	$34(a0),a1
		cmpi.w	#-$80,(a1)
		beq.s	locret_29386
		subq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		asr.l	#1,d1
		move.l	d1,d2
		asr.l	#1,d1
		move.l	d1,d3
		add.l	d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+

locret_29386:				
		rts	
; ===========================================================================
		
	if RemoveJmpTos=0	
JmpTo16_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo5_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo21_SolidObject:				
		jmp	SolidObject
JmpTo6_DespawnObject2:				
		jmp	DespawnObject2
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7A - CPZ rail platform and MCZ small horizontally moving platform 
; ----------------------------------------------------------------------------

TrackPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_293AE(pc,d0.w),d1
		jmp	off_293AE(pc,d1.w)
; ===========================================================================
off_293AE:	
		dc.w loc_293CC-off_293AE			; 0 
		dc.w loc_2948E-off_293AE			; 1
		dc.w loc_294EA-off_293AE			; 2

byte_293B4:	
		dc.b   0					; 0
		dc.b $68					; 1
		dc.b $FF					; 2
		dc.b $98					; 3
		dc.b   0					; 4
		dc.b   0					; 5
		dc.b   1					; 6
		dc.b $A8					; 7
		dc.b $FF					; 8
		dc.b $50					; 9
		dc.b   0					; 10
		dc.b $40					; 11
		dc.b   1					; 12
		dc.b $E8					; 13
		dc.b $FF					; 14
		dc.b $80					; 15
		dc.b   0					; 16
		dc.b $80					; 17
		dc.b   0					; 18
		dc.b $68					; 19
		dc.b   0					; 20
		dc.b $67					; 21
		dc.b   0					; 22
		dc.b   0					; 23
; ===========================================================================

loc_293CC:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_29564,ost_mappings(a0)
		move.w	#tile_Nem_StairBlock+tile_pal4+tile_hi,ost_tile(a0)
		cmpi.b	#id_MCZ,(v_zone).w
		bne.s	loc_293F4
		move.l	#Map_Swing_Track_CPZ_MCZ,ost_mappings(a0)
		move.w	#tile_LevelArt,ost_tile(a0)

loc_293F4:				
		jsrto	Adjust2PArtPointer,JmpTo41_Adjust2PArtPointer
		moveq	#0,d1
		move.b	$28(a0),d1
		lea	byte_293B4(pc,d1.w),a2
		move.b	(a2)+,d1
		movea.l	a0,a1
		bra.s	loc_29426
; ===========================================================================

loc_29408:				
		jsrto	FindNextFreeObj,JmpTo17_FindNextFreeObj
		bne.s	loc_2944A
		_move.b	ost_id(a0),ost_id(a1)
		move.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)

loc_29426:				
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.b	#$18,$19(a1)
		move.w	ost_x_pos(a1),$30(a1)

loc_2944A:				
		dbf	d1,loc_29408
		move.l	a0,$3C(a1)
		move.l	a1,$3C(a0)
		cmpi.b	#$C,$28(a0)
		bne.s	loc_29464
		move.b	#1,$36(a0)

loc_29464:				
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$30(a0),d0
		sub.w	d1,d0
		move.w	d0,$32(a0)
		move.w	d0,$32(a1)
		add.w	d1,d0
		add.w	d1,d0
		move.w	d0,$34(a0)
		move.w	d0,$34(a1)
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a0)
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a1)

loc_2948E:				
		bsr.s	loc_294F4
		tst.w	(f_two_player).w
		beq.s	loc_2949A
		jmpto	DisplaySprite,JmpTo24_DisplaySprite
; ===========================================================================

loc_2949A:				
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_294BE
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_294C4

loc_294BE:				
		jmp	DisplaySprite
; ===========================================================================

loc_294C4:				
		movea.l	$3C(a0),a1
		cmpa.l	a0,a1
		beq.s	loc_294D2
		jsr	DeleteChild

loc_294D2:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_294E4
		bclr	#7,2(a2,d0.w)

loc_294E4:				
		jmp	DeleteObject
; ===========================================================================

loc_294EA:				
		bsr.s	loc_294F4
		bsr.s	loc_2953E
		jmp	DisplaySprite
; ===========================================================================

loc_294F4:				
		move.w	ost_x_pos(a0),-(sp)
		tst.b	$36(a0)
		beq.s	loc_29516
		move.w	ost_x_pos(a0),d0
		subq.w	#1,d0
		cmp.w	$32(a0),d0
		bne.s	loc_29510
		move.b	#0,$36(a0)

loc_29510:				
		move.w	d0,ost_x_pos(a0)
		bra.s	loc_2952C
; ===========================================================================

loc_29516:				
		move.w	ost_x_pos(a0),d0
		addq.w	#1,d0
		cmp.w	$34(a0),d0
		bne.s	loc_29528
		move.b	#1,$36(a0)

loc_29528:				
		move.w	d0,ost_x_pos(a0)

loc_2952C:				
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#8,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform,JmpTo6_DetectPlatform
		rts	
; ===========================================================================

loc_2953E:				
		movea.l	$3C(a0),a1
		move.w	ost_x_pos(a0),d0
		subi.w	#$18,d0
		move.w	ost_x_pos(a1),d2
		addi.w	#$18,d2
		cmp.w	d0,d2
		bne.s	locret_29562
		eori.b	#1,$36(a0)
		eori.b	#1,$36(a1)

locret_29562:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29564:				
		dc.w word_29566-Map_29564
word_29566:	dc.w 2			
		dc.w $F809,  $10,    8,$FFE8			; 0
		dc.w $F809, $810, $808,	   0			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo24_DisplaySprite:				
		jmp	DisplaySprite
JmpTo17_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo41_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo6_DetectPlatform:				
		jmp	DetectPlatform
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7B - CPZ spin tube exit lid and spring
; ----------------------------------------------------------------------------

SpinTubeLid:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_295C0(pc,d0.w),d1
		jsr	off_295C0(pc,d1.w)
		tst.w	(f_two_player).w
		beq.s	loc_295A8
		jmpto	DisplaySprite,JmpTo25_DisplaySprite
; ===========================================================================

loc_295A8:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo40_DeleteObject
		jmpto	DisplaySprite,JmpTo25_DisplaySprite
		
    if RemoveJmpTos
JmpTo40_DeleteObject:
		jmp	DeleteObject
    endc		
; ===========================================================================
off_295C0:	dc.w loc_295C8-off_295C0			; 0 
		dc.w loc_295FE-off_295C0			; 1
byte_295C4:	
		; Speed applied on Sonic
		dc.w -$1000
		dc.w  -$A80
; ===========================================================================

loc_295C8:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_29780,ost_mappings(a0)
		move.w	#tile_Nem_CPZTubeSpring,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	byte_295C4(pc,d0.w),$30(a0)
		jsrto	Adjust2PArtPointer,JmpTo42_Adjust2PArtPointer

loc_295FE:				
		cmpi.b	#1,$1A(a0)
		beq.s	loc_29648
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	ost_x_pos(a0),d4
		lea	(v_ost_player1).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo4_SolidObject_NoRenderChk_SingleCharacter
		btst	#3,$22(a0)
		beq.s	loc_29630
		bsr.w	loc_296C2

loc_29630:				
		movem.l	(sp)+,d1-d4
		lea	(v_ost_player2).w,a1
		moveq	#4,d6
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo4_SolidObject_NoRenderChk_SingleCharacter
		btst	#4,$22(a0)
		beq.s	loc_29648
		bsr.s	loc_296C2

loc_29648:				
		move.w	ost_x_pos(a0),d4
		move.w	d4,d5
		subi.w	#$10,d4
		addi.w	#$10,d5
		move.w	ost_y_pos(a0),d2
		move.w	d2,d3
		addi.w	#$30,d3
		move.w	($FFFFB008).w,d0
		cmp.w	d4,d0
		bcs.s	loc_29686
		cmp.w	d5,d0
		bcc.s	loc_29686
		move.w	($FFFFB00C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_29686
		cmp.w	d3,d0
		bcc.s	loc_29686
		cmpi.b	#2,$1D(a0)
		beq.s	loc_29686
		move.b	#2,$1C(a0)

loc_29686:				
		move.w	($FFFFB048).w,d0
		cmp.w	d4,d0
		bcs.s	loc_296B6
		cmp.w	d5,d0
		bcc.s	loc_296B6
		move.w	($FFFFB04C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_296B6
		cmp.w	d3,d0
		bcc.s	loc_296B6
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.w	loc_296B6
		cmpi.b	#3,$1D(a0)
		beq.s	loc_296B6
		move.b	#3,$1C(a0)

loc_296B6:				
		lea	(off_29768).l,a1
		jmpto	AnimateSprite,JmpTo8_AnimateSprite
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_296C2:				
		move.w	#$100,$1C(a0)
		addq.w	#4,ost_y_pos(a1)
		move.w	$30(a0),ost_y_vel(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		bpl.s	loc_296F6
		move.w	#0,ost_x_vel(a1)

loc_296F6:				
		btst	#0,d0
		beq.s	loc_29736
		move.w	#1,ost_inertia(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_29726
		move.b	#1,$2C(a1)

loc_29726:				
		btst	#0,$22(a1)
		beq.s	loc_29736
		neg.b	$27(a1)
		neg.w	ost_inertia(a1)

loc_29736:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2974C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_2974C:				
		cmpi.b	#8,d0
		bne.s	loc_2975E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_2975E:				
		move.w	#$CC,d0	
		jmp	PlaySound
; ===========================================================================
off_29768:	dc.w byte_29770-off_29768			; 0 
		dc.w byte_29773-off_29768			; 1
		dc.w byte_29777-off_29768			; 2
		dc.w byte_29777-off_29768			; 3
byte_29770:	dc.b  $F,  0,$FF				; 0 
byte_29773:	dc.b   0,  3,$FD,  0				; 0 
byte_29777:	dc.b   5,  1,  2,  2,  2,  4,$FD,  0,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29780:				
		dc.w word_2978A-Map_29780			; 0
		dc.w word_29794-Map_29780			; 1
		dc.w word_297A6-Map_29780			; 2
		dc.w word_297B8-Map_29780			; 3
		dc.w word_29794-Map_29780			; 4
word_2978A:	dc.w 1			
		dc.w $F00D,    0,    0,$FFF0			; 0
word_29794:	dc.w 2			
		dc.w $E007,    8,    4,$FFF0			; 0
		dc.w $E007, $808, $804,	   0			; 4
word_297A6:	dc.w 2			
		dc.w $E007,  $10,    8,$FFF0			; 0
		dc.w $E007, $810, $808,	   0			; 4
word_297B8:	dc.w 1			
		dc.w $F00D,  $18,   $C,$FFF0			; 0
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo25_DisplaySprite:				
		jmp	DisplaySprite
JmpTo40_DeleteObject:				
		jmp	DeleteObject
JmpTo8_AnimateSprite:				
		jmp	AnimateSprite
JmpTo42_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo4_SolidObject_NoRenderChk_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 7F - MCZ vine switch
; ----------------------------------------------------------------------------

VineSwitch:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_297F2(pc,d0.w),d1
		jmp	off_297F2(pc,d1.w)
; ===========================================================================
off_297F2:	
		dc.w loc_297F6-off_297F2			; 0 
		dc.w loc_2981E-off_297F2			; 1
; ===========================================================================

loc_297F6:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_29938,ost_mappings(a0)
		move.w	#tile_Nem_VineSwitch+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo43_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#8,$19(a0)
		move.b	#4,$18(a0)

loc_2981E:				
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.s	loc_2983C
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.s	loc_2983C
		jmpto	DespawnObject,JmpTo24_DespawnObject
; ===========================================================================

loc_2983C:				
		tst.b	(a2)
		beq.s	loc_29890
		andi.b	#$70,d0
		beq.w	locret_29936
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.s	loc_29860
		move.b	#$3C,2(a2)

loc_29860:				
		move.w	#-$300,ost_y_vel(a1)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		lea	(a3,d0.w),a3
		bclr	#0,(a3)

loc_2987A:
		move.b	#0,$1A(a0)
		tst.w	$30(a0)
		beq.s	loc_2988C
		move.b	#1,$1A(a0)

loc_2988C:				
		bra.w	locret_29936
; ===========================================================================

loc_29890:				
		tst.b	2(a2)
		beq.s	loc_2989E
		subq.b	#1,2(a2)
		bne.w	locret_29936

loc_2989E:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bcc.w	locret_29936
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		subi.w	#$28,d1
		cmpi.w	#$10,d1
		bcc.w	locret_29936
		tst.b	$2A(a1)
		bmi.s	locret_29936
		cmpi.b	#4,$24(a1)
		bcc.s	locret_29936
		tst.w	(v_debug_active).w
		bne.s	locret_29936
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		clr.w	ost_inertia(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$30,ost_y_pos(a1)
		move.b	#$14,$1C(a1)
		move.b	#1,$2A(a1)
		move.b	#1,(a2)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		bset	#0,(a3,d0.w)
		move.w	#$CD,d0	
		jsr	PlaySound
		move.b	#0,$1A(a0)
		tst.w	$30(a0)
		beq.s	locret_29936
		move.b	#1,$1A(a0)

locret_29936:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29938:				
		dc.w word_2993C-Map_29938			; 0
		dc.w word_29956-Map_29938			; 1
word_2993C:	dc.w 3			
		dc.w $D007,    0,    0,$FFF8			; 0
		dc.w $F007,    0,    0,$FFF8			; 4
		dc.w $1007,    8,    4,$FFF8			; 8
word_29956:	dc.w 3			
		dc.w $D407,    0,    0,$FFF8			; 0
		dc.w $F407,    0,    0,$FFF8			; 4
		dc.w $1407,    8,    4,$FFF8			; 8
; ===========================================================================

	if RemoveJmpTos=0
JmpTo24_DespawnObject:				
		jmp	DespawnObject
JmpTo43_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 80 - MCZ moving vine and WFZ crane hooks
; ----------------------------------------------------------------------------

MovingVineHooks:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2998A(pc,d0.w),d1
		jmp	off_2998A(pc,d1.w)
; ===========================================================================
off_2998A:	dc.w loc_29990-off_2998A			; 0 
		dc.w loc_29A66-off_2998A			; 1
		dc.w loc_29BFA-off_2998A			; 2
; ===========================================================================

loc_29990:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	#-$80,ost_height(a0)
		bset	#render_useheight_bit,ost_render(a0)
		move.w	ost_y_pos(a0),$3C(a0)
		cmpi.b	#6,(v_zone).w
		bne.s	loc_29A1C
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_29DD0,ost_mappings(a0)
		move.w	#(tile_Nem_Hook+4)+tile_pal2,ost_tile(a0) ; +4 is workaround for bugged mappings
		jsrto	Adjust2PArtPointer,JmpTo44_Adjust2PArtPointer
		move.w	#$A0,$2E(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		andi.b	#$F,d0
		beq.s	loc_299EE
		move.w	#$60,$2E(a0)

loc_299EE:				
		move.b	$28(a0),d0
		move.w	#2,$3A(a0)
		andi.b	#$70,d1
		beq.s	loc_29A18
		move.w	$2E(a0),d0
		move.w	d0,$38(a0)
		move.b	#1,$36(a0)
		add.w	d0,ost_y_pos(a0)
		lsr.w	#4,d0
		addq.w	#1,d0
		move.b	d0,$1A(a0)

loc_29A18:				
		bra.w	loc_29BFA
; ===========================================================================

loc_29A1C:				
		move.l	#Map_29C64,ost_mappings(a0)
		move.w	#tile_Nem_VinePulley+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo44_Adjust2PArtPointer
		move.w	#$B0,$2E(a0)
		move.b	$28(a0),d0
		bpl.s	loc_29A40
		move.b	#1,$34(a0)

loc_29A40:				
		move.w	#2,$3A(a0)
		andi.b	#$70,d0
		beq.s	loc_29A66
		move.w	$2E(a0),d0
		move.w	d0,$38(a0)
		move.b	#1,$36(a0)
		add.w	d0,ost_y_pos(a0)
		lsr.w	#5,d0
		addq.w	#1,d0
		move.b	d0,$1A(a0)

loc_29A66:				
					
		tst.b	$36(a0)
		beq.s	loc_29A74
		tst.w	$30(a0)
		bne.s	loc_29A8A
		bra.s	loc_29A7A
; ===========================================================================

loc_29A74:				
		tst.w	$30(a0)
		beq.s	loc_29A8A

loc_29A7A:				
		move.w	$38(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_29AAE
		add.w	$3A(a0),d2
		bra.s	loc_29A94
; ===========================================================================

loc_29A8A:				
		move.w	$38(a0),d2
		beq.s	loc_29AAE
		sub.w	$3A(a0),d2

loc_29A94:				
		move.w	d2,$38(a0)
		move.w	$3C(a0),d0
		add.w	d2,d0
		move.w	d0,ost_y_pos(a0)
		move.w	d2,d0
		beq.s	loc_29AAA
		lsr.w	#5,d0
		addq.w	#1,d0

loc_29AAA:				
		move.b	d0,$1A(a0)

loc_29AAE:				
		lea	$30(a0),a2
		lea	(v_ost_player1).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.s	loc_29ACC
		lea	(v_ost_player2).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.s	loc_29ACC
		jmpto	DespawnObject,JmpTo25_DespawnObject
; ===========================================================================

loc_29ACC:				
		tst.b	(a2)
		beq.w	loc_29B5E
		tst.b	ost_render(a1)
		bpl.s	loc_29B42
		cmpi.b	#4,$24(a1)
		bcc.s	loc_29B42
		andi.b	#$70,d0
		beq.w	loc_29B50
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_29B02
		move.b	#$3C,2(a2)

loc_29B02:				
		btst	#$A,d0
		beq.s	loc_29B0E
		move.w	#-$200,ost_x_vel(a1)

loc_29B0E:				
		btst	#$B,d0
		beq.s	loc_29B1A
		move.w	#$200,ost_x_vel(a1)

loc_29B1A:				
		move.w	#-$380,ost_y_vel(a1)
		bset	#1,$22(a1)
		tst.b	$34(a0)
		beq.s	locret_29B40
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		lea	(a3,d0.w),a3
		bclr	#0,(a3)

locret_29B40:				
		rts	
; ===========================================================================

loc_29B42:				
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2)
		rts	
; ===========================================================================

loc_29B50:				
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$94,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_29B5E:				
		tst.b	2(a2)
		beq.s	loc_29B6C
		subq.b	#1,2(a2)
		bne.w	locret_29BF8

loc_29B6C:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bcc.w	locret_29BF8
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		subi.w	#$88,d1	
		cmpi.w	#$18,d1
		bcc.w	locret_29BF8
		tst.b	$2A(a1)
		bmi.s	locret_29BF8
		cmpi.b	#4,$24(a1)
		bcc.s	locret_29BF8
		tst.w	(v_debug_active).w
		bne.s	locret_29BF8
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		clr.w	ost_inertia(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$94,ost_y_pos(a1)
		move.b	#$14,$1C(a1)
		move.b	#1,$2A(a1)
		move.b	#1,(a2)
		tst.b	$34(a0)
		beq.s	locret_29BF8
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		bset	#0,(a3,d0.w)
		move.w	#$CD,d0	
		jsr	PlaySound

locret_29BF8:				
		rts	
; ===========================================================================

loc_29BFA:								
		tst.b	$36(a0)
		beq.s	loc_29C08
		tst.w	$30(a0)
		bne.s	loc_29C1E
		bra.s	loc_29C0E
; ===========================================================================

loc_29C08:				
		tst.w	$30(a0)
		beq.s	loc_29C1E

loc_29C0E:				
		move.w	$38(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_29C42
		add.w	$3A(a0),d2
		bra.s	loc_29C28
; ===========================================================================

loc_29C1E:				
		move.w	$38(a0),d2
		beq.s	loc_29C42
		sub.w	$3A(a0),d2

loc_29C28:				
		move.w	d2,$38(a0)
		move.w	$3C(a0),d0
		add.w	d2,d0
		move.w	d0,ost_y_pos(a0)
		move.w	d2,d0
		beq.s	loc_29C3E
		lsr.w	#4,d0
		addq.w	#1,d0

loc_29C3E:				
		move.b	d0,$1A(a0)

loc_29C42:				
		lea	$30(a0),a2
		lea	(v_ost_player1).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.w	loc_29ACC
		lea	(v_ost_player2).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.w	loc_29ACC
		jmpto	DespawnObject,JmpTo25_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29C64:				
		dc.w word_29C72-Map_29C64			; 0
		dc.w word_29C8C-Map_29C64			; 1
		dc.w word_29CAE-Map_29C64			; 2
		dc.w word_29CD8-Map_29C64			; 3
		dc.w word_29D0A-Map_29C64			; 4
		dc.w word_29D44-Map_29C64			; 5
		dc.w word_29D86-Map_29C64			; 6
word_29C72:	dc.w 3			
		dc.w $3003,    0,    0,$FFFC			; 0
		dc.w $5003,    0,    0,$FFFC			; 4
		dc.w $7009,    4,    2,$FFF4			; 8
word_29C8C:	dc.w 4			
		dc.w $1003,    0,    0,$FFFC			; 0
		dc.w $3003,    0,    0,$FFFC			; 4
		dc.w $5003,    0,    0,$FFFC			; 8
		dc.w $7009,    4,    2,$FFF4			; 12
word_29CAE:	dc.w 5			
		dc.w $F003,    0,    0,$FFFC			; 0
		dc.w $1003,    0,    0,$FFFC			; 4
		dc.w $3003,    0,    0,$FFFC			; 8
		dc.w $5003,    0,    0,$FFFC			; 12
		dc.w $7009,    4,    2,$FFF4			; 16
word_29CD8:	dc.w 6			
		dc.w $D003,    0,    0,$FFFC			; 0
		dc.w $F003,    0,    0,$FFFC			; 4
		dc.w $1003,    0,    0,$FFFC			; 8
		dc.w $3003,    0,    0,$FFFC			; 12
		dc.w $5003,    0,    0,$FFFC			; 16
		dc.w $7009,    4,    2,$FFF4			; 20
word_29D0A:	dc.w 7			
		dc.w $B003,    0,    0,$FFFC			; 0
		dc.w $D003,    0,    0,$FFFC			; 4
		dc.w $F003,    0,    0,$FFFC			; 8
		dc.w $1003,    0,    0,$FFFC			; 12
		dc.w $3003,    0,    0,$FFFC			; 16
		dc.w $5003,    0,    0,$FFFC			; 20
		dc.w $7009,    4,    2,$FFF4			; 24
word_29D44:	dc.w 8			
		dc.w $9003,    0,    0,$FFFC			; 0
		dc.w $B003,    0,    0,$FFFC			; 4
		dc.w $D003,    0,    0,$FFFC			; 8
		dc.w $F003,    0,    0,$FFFC			; 12
		dc.w $1003,    0,    0,$FFFC			; 16
		dc.w $3003,    0,    0,$FFFC			; 20
		dc.w $5003,    0,    0,$FFFC			; 24
		dc.w $7009,    4,    2,$FFF4			; 28
word_29D86:	dc.w 9			
		dc.w $8001,    2,    1,$FFFC			; 0
		dc.w $9003,    0,    0,$FFFC			; 4
		dc.w $B003,    0,    0,$FFFC			; 8
		dc.w $D003,    0,    0,$FFFC			; 12
		dc.w $F003,    0,    0,$FFFC			; 16
		dc.w $1003,    0,    0,$FFFC			; 20
		dc.w $3003,    0,    0,$FFFC			; 24
		dc.w $5003,    0,    0,$FFFC			; 28
		dc.w $7009,    4,    2,$FFF4			; 32
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29DD0:				
		dc.w word_29DEA-Map_29DD0			; 0
		dc.w word_29DFC-Map_29DD0			; 1
		dc.w word_29E0E-Map_29DD0			; 2
		dc.w word_29E28-Map_29DD0			; 3
		dc.w word_29E42-Map_29DD0			; 4
		dc.w word_29E64-Map_29DD0			; 5
		dc.w word_29E86-Map_29DD0			; 6
		dc.w word_29EB0-Map_29DD0			; 7
		dc.w word_29EDA-Map_29DD0			; 8
		dc.w word_29F0C-Map_29DD0			; 9
		dc.w word_29F3E-Map_29DD0			; 10
		dc.w word_29F78-Map_29DD0			; 11
		dc.w word_29FB2-Map_29DD0			; 12
word_29DEA:	dc.w 2			
		dc.w $5001,    0,    0,$FFFC			; 0
		dc.w $600B,    4,    2,$FFF4			; 4
word_29DFC:	dc.w 2			
		dc.w $4003,    0,    0,$FFFC			; 0
		dc.w $600B,    4,    2,$FFF4			; 4
word_29E0E:	dc.w 3			
		dc.w $3001,    0,    0,$FFFC			; 0
		dc.w $4003,    0,    0,$FFFC			; 4
		dc.w $600B,    4,    2,$FFF4			; 8
word_29E28:	dc.w 3			
		dc.w $2003,    0,    0,$FFFC			; 0
		dc.w $4003,    0,    0,$FFFC			; 4
		dc.w $600B,    4,    2,$FFF4			; 8
word_29E42:	dc.w 4			
		dc.w $1001,    0,    0,$FFFC			; 0
		dc.w $2003,    0,    0,$FFFC			; 4
		dc.w $4003,    0,    0,$FFFC			; 8
		dc.w $600B,    4,    2,$FFF4			; 12
word_29E64:	dc.w 4			
		dc.w	 3,    0,    0,$FFFC			; 0
		dc.w $2003,    0,    0,$FFFC			; 4
		dc.w $4003,    0,    0,$FFFC			; 8
		dc.w $600B,    4,    2,$FFF4			; 12
word_29E86:	dc.w 5			
		dc.w $F001,    0,    0,$FFFC			; 0
		dc.w	 3,    0,    0,$FFFC			; 4
		dc.w $2003,    0,    0,$FFFC			; 8
		dc.w $4003,    0,    0,$FFFC			; 12
		dc.w $600B,    4,    2,$FFF4			; 16
word_29EB0:	dc.w 5			
		dc.w $E003,    0,    0,$FFFC			; 0
		dc.w	 3,    0,    0,$FFFC			; 4
		dc.w $2003,    0,    0,$FFFC			; 8
		dc.w $4003,    0,    0,$FFFC			; 12
		dc.w $600B,    4,    2,$FFF4			; 16
word_29EDA:	dc.w 6			
		dc.w $D001,    0,    0,$FFFC			; 0
		dc.w $E003,    0,    0,$FFFC			; 4
		dc.w	 3,    0,    0,$FFFC			; 8
		dc.w $2003,    0,    0,$FFFC			; 12
		dc.w $4003,    0,    0,$FFFC			; 16
		dc.w $600B,    4,    2,$FFF4			; 20
word_29F0C:	dc.w 6			
		dc.w $C003,    0,    0,$FFFC			; 0
		dc.w $E003,    0,    0,$FFFC			; 4
		dc.w	 3,    0,    0,$FFFC			; 8
		dc.w $2003,    0,    0,$FFFC			; 12
		dc.w $4003,    0,    0,$FFFC			; 16
		dc.w $600B,    4,    2,$FFF4			; 20
word_29F3E:	dc.w 7			
		dc.w $B001,    0,    0,$FFFC			; 0
		dc.w $C003,    0,    0,$FFFC			; 4
		dc.w $E003,    0,    0,$FFFC			; 8
		dc.w	 3,    0,    0,$FFFC			; 12
		dc.w $2003,    0,    0,$FFFC			; 16
		dc.w $4003,    0,    0,$FFFC			; 20
		dc.w $600B,    4,    2,$FFF4			; 24
word_29F78:	dc.w 7			
		dc.w $A003,    0,    0,$FFFC			; 0
		dc.w $C003,    0,    0,$FFFC			; 4
		dc.w $E003,    0,    0,$FFFC			; 8
		dc.w	 3,    0,    0,$FFFC			; 12
		dc.w $2003,    0,    0,$FFFC			; 16
		dc.w $4003,    0,    0,$FFFC			; 20
		dc.w $600B,    4,    2,$FFF4			; 24
word_29FB2:	dc.w 8			
		dc.w $9001,    0,    0,$FFFC			; 0
		dc.w $A003,    0,    0,$FFFC			; 4
		dc.w $C003,    0,    0,$FFFC			; 8
		dc.w $E003,    0,    0,$FFFC			; 12
		dc.w	 3,    0,    0,$FFFC			; 16
		dc.w $2003,    0,    0,$FFFC			; 20
		dc.w $4003,    0,    0,$FFFC			; 24
		dc.w $600B,    4,    2,$FFF4			; 28
; ===========================================================================

	if RemoveJmpTos=0
JmpTo25_DespawnObject:				
		jmp	DespawnObject
JmpTo44_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc	
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 81 - MCZ drawbridge gate
; ----------------------------------------------------------------------------

Drawbridge:				
		btst	#render_subobjects_bit,ost_render(a0)
		bne.w	loc_2A018
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2A020(pc,d0.w),d1
		jmp	off_2A020(pc,d1.w)
; ===========================================================================

loc_2A018:				
		move.w	#$280,d0
		jmpto	DisplaySprite3,JmpTo2_DisplaySprite3
; ===========================================================================
off_2A020:	
		dc.w loc_2A026-off_2A020			; 0 
		dc.w loc_2A0FE-off_2A020			; 1
		dc.w loc_2A18A-off_2A020			; 2
; ===========================================================================

loc_2A026:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2A24E,ost_mappings(a0)
		move.w	#tile_Nem_DrawbridgeLogs+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo45_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#5,$18(a0)
		move.b	#8,$19(a0)
		ori.b	#-$80,$22(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		subi.w	#$48,ost_y_pos(a0)
		move.b	#-$40,$26(a0)
		moveq	#-$10,d4
		btst	#1,$22(a0)
		beq.s	loc_2A084
		addi.w	#$90,ost_y_pos(a0)
		move.b	#$40,$26(a0)
		neg.w	d4

loc_2A084:				
		move.w	#$100,d1
		btst	#0,$22(a0)
		beq.s	loc_2A092
		neg.w	d1

loc_2A092:				
		move.w	d1,$34(a0)
		jsrto	FindNextFreeObj,JmpTo18_FindNextFreeObj
		bne.s	loc_2A0FE
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#$40,ost_mainspr_width(a1)
		move.w	$30(a0),d2
		move.w	$32(a0),d3
		moveq	#8,d1
		move.b	d1,ost_mainspr_childsprites(a1)
		subq.w	#1,d1
		lea	ost_subspr2_x_pos(a1),a2

loc_2A0D4:				
		add.w	d4,d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_2A0D4
		move.w	ost_subspr6_x_pos(a1),ost_x_pos(a1)
		move.w	ost_subspr6_y_pos(a1),ost_y_pos(a1)
		move.l	a1,$3C(a0)
		move.b	#$40,ost_mainspr_height(a1)
		bset	#render_useheight_bit,ost_render(a1)

loc_2A0FE:						
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_2A13A
		tst.b	$36(a0)
		bne.s	loc_2A13A
		move.b	#1,$36(a0)
		move.w	#$E7,d0	
		jsr	(PlaySound2).l
		cmpi.b	#-$7F,$22(a0)
		bne.s	loc_2A13A
		move.w	$30(a0),ost_x_pos(a0)
		subi.w	#$48,ost_x_pos(a0)

loc_2A13A:				
		tst.b	$36(a0)
		beq.s	loc_2A188
		move.w	#$48,d1
		tst.b	$26(a0)
		beq.s	loc_2A154
		cmpi.b	#-$80,$26(a0)
		bne.s	loc_2A180
		neg.w	d1

loc_2A154:				
		move.w	$32(a0),ost_y_pos(a0)
		move.w	$30(a0),ost_x_pos(a0)
		add.w	d1,ost_x_pos(a0)
		move.b	#$40,$19(a0)
		move.b	#0,$36(a0)
		move.w	#$E9,d0	
		jsr	PlaySound
		addq.b	#2,ost_primary_routine(a0)
		bra.s	loc_2A188
; ===========================================================================

loc_2A180:				
		move.w	$34(a0),d0
		add.w	d0,$26(a0)

loc_2A188:				
		bsr.s	loc_2A1EA

loc_2A18A:				
		move.w	#$13,d1
		move.w	#$40,d2
		move.w	#$41,d3
		move.b	$26(a0),d0
		beq.s	loc_2A1A8
		cmpi.b	#$40,d0
		beq.s	loc_2A1B4
		cmpi.b	#-$40,d0
		bcc.s	loc_2A1B4

loc_2A1A8:				
		move.w	#$4B,d1
		move.w	#8,d2
		move.w	#9,d3

loc_2A1B4:				
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo22_SolidObject
		tst.w	(f_two_player).w
		beq.s	loc_2A1C6
		jmpto	DisplaySprite,JmpTo26_DisplaySprite
; ===========================================================================

loc_2A1C6:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2A1DE
		jmpto	DisplaySprite,JmpTo26_DisplaySprite
; ===========================================================================

loc_2A1DE:				
		movea.l	$3C(a0),a1
		jsrto	DeleteChild,JmpTo3_DeleteChild
		jmpto	DeleteObject,JmpTo41_DeleteObject
; ===========================================================================

loc_2A1EA:				
		tst.b	$36(a0)
		beq.s	locret_2A24C
		moveq	#0,d0
		moveq	#0,d1
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo9_CalcSine
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.l	$3C(a0),a1
		move.b	ost_mainspr_childsprites(a1),d6
		subq.w	#1,d6
		bcs.s	locret_2A24C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		lea	ost_subspr2_x_pos(a1),a2

loc_2A222:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_2A222
		move.w	ost_subspr6_x_pos(a1),ost_x_pos(a1)
		move.w	ost_subspr6_y_pos(a1),ost_y_pos(a1)

locret_2A24C:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2A24E:				
		dc.w word_2A252-Map_2A24E			; 0
		dc.w word_2A254-Map_2A24E			; 1
word_2A252:	dc.w 0			
word_2A254:	dc.w	 1					; 0 
		dc.w $F805,    0,    0,$FFF8			; 0
; ===========================================================================

	if Revision<2
		nop
	endc
	
	if RemoveJmpTos=0
JmpTo2_DisplaySprite3:				
		jmp	DisplaySprite3
JmpTo26_DisplaySprite:				
		jmp	DisplaySprite
JmpTo41_DeleteObject:				
		jmp	DeleteObject
JmpTo3_DeleteChild:				
		jmp	DeleteChild
JmpTo18_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo45_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo9_CalcSine:				
		jmp	CalcSine
JmpTo22_SolidObject:				
		jmp	SolidObject
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 82 - ARZ pillar platform
; ----------------------------------------------------------------------------

PillarPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2A29E(pc,d0.w),d1
		jmp	off_2A29E(pc,d1.w)
; ===========================================================================
off_2A29E:	dc.w loc_2A2AA-off_2A29E			; 0 
		dc.w loc_2A312-off_2A29E			; 1
byte_2A2A2:	dc.b $20					; 0
		dc.b   8					; 1
		dc.b $1C					; 2
		dc.b $30					; 3
		dc.b $10					; 4
		dc.b $10					; 5
		dc.b $10					; 6
		dc.b $10					; 7
; ===========================================================================

loc_2A2AA:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2A476,ost_mappings(a0)
		move.w	#tile_LevelArt,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo46_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		lea	byte_2A2A2(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2),ost_height(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		move.w	ost_x_pos(a0),$34(a0)
		move.w	ost_y_pos(a0),$30(a0)
		move.b	$28(a0),d0
		andi.b	#$F,d0
		beq.s	loc_2A30C
		cmpi.b	#7,d0
		beq.s	loc_2A30C
		move.b	#1,$38(a0)

loc_2A30C:				
		andi.b	#$F,$28(a0)

loc_2A312:				
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_2A358(pc,d0.w),d1
		jsr	off_2A358(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	ost_render(a0)
		bpl.s	loc_2A350
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	ost_height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		jsrto	SolidObject,JmpTo23_SolidObject
		swap	d6
		move.b	d6,$3F(a0)
		bsr.w	loc_2A432

loc_2A350:				
		move.w	$34(a0),d0
		jmpto	DespawnObject2,JmpTo7_DespawnObject2
; ===========================================================================
off_2A358:	dc.w locret_2A368-off_2A358			; 0 
		dc.w loc_2A36A-off_2A358			; 1
		dc.w loc_2A392-off_2A358			; 2
		dc.w loc_2A36A-off_2A358			; 3
		dc.w loc_2A3B6-off_2A358			; 4
		dc.w loc_2A3D8-off_2A358			; 5
		dc.w loc_2A392-off_2A358			; 6
		dc.w loc_2A3EC-off_2A358			; 7
; ===========================================================================

locret_2A368:				
		rts	
; ===========================================================================

loc_2A36A:				
		tst.w	$36(a0)
		bne.s	loc_2A382
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_2A380
		move.w	#$1E,$36(a0)

locret_2A380:				
		rts	
; ===========================================================================

loc_2A382:				
		subq.w	#1,$36(a0)
		bne.s	locret_2A380
		addq.b	#1,$28(a0)
		clr.b	$38(a0)
		rts	
; ===========================================================================

loc_2A392:				
		jsrto	SpeedToPos,JmpTo16_SpeedToPos
		addi_.w	#8,ost_y_vel(a0)
		jsrto	FindFloorObj,JmpTo2_FindFloorObj
		tst.w	d1
		bpl.w	locret_2A3B4
		addq.w	#1,d1
		add.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		clr.b	$28(a0)

locret_2A3B4:				
		rts	
; ===========================================================================

loc_2A3B6:				
		jsrto	SpeedToPos,JmpTo16_SpeedToPos
		subi_.w	#8,ost_y_vel(a0)
		jsrto	FindCeilingObj,JmpTo_FindCeilingObj
		tst.w	d1
		bpl.w	locret_2A3D6
		sub.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		clr.b	$28(a0)

locret_2A3D6:				
		rts	
; ===========================================================================

loc_2A3D8:				
		move.b	$3F(a0),d0
		andi.b	#3,d0
		beq.s	locret_2A3EA
		addq.b	#1,$28(a0)
		clr.b	$38(a0)

locret_2A3EA:				
		rts	
; ===========================================================================

loc_2A3EC:				
		move.w	(v_water_height_actual).w,d0
		sub.w	ost_y_pos(a0),d0
		beq.s	locret_2A430
		bcc.s	loc_2A414
		cmpi.w	#-2,d0
		bge.s	loc_2A400
		moveq	#-2,d0

loc_2A400:				
		add.w	d0,ost_y_pos(a0)
		jsrto	FindCeilingObj,JmpTo_FindCeilingObj
		tst.w	d1
		bpl.w	locret_2A412
		sub.w	d1,ost_y_pos(a0)

locret_2A412:				
		rts	
; ===========================================================================

loc_2A414:				
		cmpi.w	#2,d0
		ble.s	loc_2A41C
		moveq	#2,d0

loc_2A41C:				
		add.w	d0,ost_y_pos(a0)
		jsrto	FindFloorObj,JmpTo2_FindFloorObj
		tst.w	d1
		bpl.w	locret_2A430
		addq.w	#1,d1
		add.w	d1,ost_y_pos(a0)

locret_2A430:				
		rts	
; ===========================================================================

loc_2A432:				
		tst.b	$38(a0)
		beq.s	locret_2A474
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2A44E
		tst.b	$3E(a0)
		beq.s	locret_2A474
		subq.b	#4,$3E(a0)
		bra.s	loc_2A45A
; ===========================================================================

loc_2A44E:				
		cmpi.b	#$40,$3E(a0)
		beq.s	locret_2A474
		addq.b	#4,$3E(a0)

loc_2A45A:				
		move.b	$3E(a0),d0
		jsr	CalcSine
		move.w	#$400,d1
		muls.w	d1,d0
		swap	d0
		add.w	$30(a0),d0
		move.w	d0,ost_y_pos(a0)

locret_2A474:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2A476:				
		dc.w word_2A47A-Map_2A476			; 0
		dc.w word_2A48C-Map_2A476			; 1
word_2A47A:	dc.w 2			
		dc.w $F80D,$6055,$602A,$FFE0			; 0
		dc.w $F80D,$6055,$602A,	   0			; 4
word_2A48C:	dc.w 9			
		dc.w $D005,$205D,$202E,$FFE0			; 0
		dc.w $D005,$285D,$282E,	 $10			; 4
		dc.w $D00D,$2061,$2030,$FFF0			; 8
		dc.w $E00D,$2069,$2034,$FFF0			; 12
		dc.w $F00D,$2069,$2034,$FFF0			; 16
		dc.w	$D,$2071,$2038,$FFF0			; 20
		dc.w $100D,$2069,$2034,$FFF0			; 24
		dc.w $200D,$2079,$203C,$FFF0			; 28
		dc.w $3004,$2081,$2040,$FFF0			; 32
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo2_FindFloorObj:				
		jmp	FindFloorObj
JmpTo46_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_FindCeilingObj:				
		jmp	FindCeilingObj
JmpTo23_SolidObject:				
		jmp	SolidObject
JmpTo7_DespawnObject2:				
		jmp	DespawnObject2
JmpTo16_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 83 - Circling platforms (ARZ)
; ----------------------------------------------------------------------------

CirclingPlatform:				
		btst	#render_subobjects_bit,ost_render(a0)
		bne.w	loc_2A514
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2A51C(pc,d0.w),d1
		jmp	off_2A51C(pc,d1.w)
; ===========================================================================

loc_2A514:				
		move.w	#$280,d0
		jmpto	DisplaySprite3,JmpTo3_DisplaySprite3
; ===========================================================================
off_2A51C:	
		dc.w loc_2A522-off_2A51C			; 0 
		dc.w loc_2A620-off_2A51C			; 1
		dc.w loc_2A74E-off_2A51C			; 2
; ===========================================================================

loc_2A522:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_Swing_Circle_ARZ,ost_mappings(a0)
		move.w	#tile_LevelArt,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo47_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#$20,$19(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.b	$28(a0),d1
		move.b	d1,d0
		andi.w	#$F,d1
		andi.b	#-$10,d0
		ext.w	d0
		asl.w	#3,d0
		move.w	d0,$2E(a0)
		
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#-$40,d0
		move.b	d0,$26(a0)
		
		jsrto	FindNextFreeObj,JmpTo19_FindNextFreeObj
		bne.s	loc_2A5DC
		
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#$40,ost_mainspr_width(a1)
		moveq	#8,d1
		move.b	d1,ost_mainspr_childsprites(a1)
		subq.w	#1,d1
		lea	ost_subspr2_x_pos(a1),a2

loc_2A5B0:				
		addq.w	#4,a2
		move.w	#1,(a2)+
		dbf	d1,loc_2A5B0
		move.b	#1,ost_mainspr_frame(a1)
		move.b	#$40,ost_mainspr_height(a1)
		bset	#render_useheight_bit,ost_render(a1)
		move.l	a1,$34(a0)
		bsr.s	loc_2A5DE
		move.l	a1,$38(a0)
		bsr.s	loc_2A5DE
		move.l	a1,$3C(a0)

loc_2A5DC:				
		bra.s	loc_2A620
; ===========================================================================

loc_2A5DE:				
		jsrto	FindNextFreeObj,JmpTo19_FindNextFreeObj
		bne.s	locret_2A61E
		addq.b	#4,$24(a1)
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.b	#$20,$19(a1)
		move.w	ost_x_pos(a0),$30(a1)
		move.w	ost_y_pos(a0),$32(a1)
		move.w	ost_x_pos(a0),$2C(a1)

locret_2A61E:				
		rts	
; ===========================================================================

loc_2A620:				
					
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		moveq	#0,d1
		move.w	$2E(a0),d0
		add.w	d0,$26(a0)
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.l	$34(a0),a1
		lea	ost_subspr2_x_pos(a1),a2
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo10_CalcSine
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,ost_x_pos(a1)
		move.w	d4,ost_y_pos(a1)
		move.l	d0,d4
		move.l	d1,d5
		add.l	d0,d4
		add.l	d1,d5
		moveq	#1,d6
		bsr.w	loc_2A72E
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,ost_x_pos(a0)
		move.w	d4,ost_y_pos(a0)
		move.b	$26(a0),d0
		addi.b	#$55,d0
		jsrto	CalcSine,JmpTo10_CalcSine
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		moveq	#2,d6
		bsr.w	loc_2A72E
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		movea.l	$38(a0),a1
		move.w	d5,ost_x_pos(a1)
		move.w	d4,ost_y_pos(a1)
		move.b	$26(a0),d0
		subi.b	#$55,d0
		jsrto	CalcSine,JmpTo10_CalcSine
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		moveq	#2,d6
		bsr.w	loc_2A72E
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		movea.l	$3C(a0),a1
		move.w	d5,ost_x_pos(a1)
		move.w	d4,ost_y_pos(a1)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		jsrto	DetectPlatform,JmpTo7_DetectPlatform
		tst.w	(f_two_player).w
		beq.s	loc_2A70A
		jmpto	DisplaySprite,JmpTo27_DisplaySprite
; ===========================================================================

loc_2A70A:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2A722
		jmpto	DisplaySprite,JmpTo27_DisplaySprite
; ===========================================================================

loc_2A722:				
		movea.l	$34(a0),a1
		jsrto	DeleteChild,JmpTo4_DeleteChild
		jmpto	DeleteObject,JmpTo42_DeleteObject
; ===========================================================================

loc_2A72E:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_2A72E
		rts	
; ===========================================================================

loc_2A74E:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$2C(a0),d4
		jsrto	DetectPlatform,JmpTo7_DetectPlatform
		move.w	ost_x_pos(a0),$2C(a0)
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo8_DespawnObject2
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo3_DisplaySprite3:				
		jmp	DisplaySprite3
JmpTo27_DisplaySprite:				
		jmp	DisplaySprite
JmpTo42_DeleteObject:				
		jmp	DeleteObject
JmpTo4_DeleteChild:				
		jmp	DeleteChild
JmpTo19_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo47_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo10_CalcSine:				
		jmp	CalcSine
JmpTo7_DetectPlatform:				
		jmp	DetectPlatform
JmpTo8_DespawnObject2:				
		jmp	DespawnObject2
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3F - OOZ fan
; ----------------------------------------------------------------------------

Fan:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2A7BE(pc,d0.w),d1
		jmp	off_2A7BE(pc,d1.w)
; ===========================================================================
off_2A7BE:	
		dc.w loc_2A7C4-off_2A7BE			; 0 
		dc.w loc_2A802-off_2A7BE			; 1
		dc.w loc_2A8FE-off_2A7BE			; 2
; ===========================================================================

loc_2A7C4:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2AA12,ost_mappings(a0)
		move.w	#tile_Nem_Fan+tile_pal4,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo48_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		tst.b	$28(a0)
		bpl.s	loc_2A802
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2AAC4,ost_mappings(a0)
		bra.w	loc_2A8FE
; ===========================================================================

loc_2A802:				
					
		btst	#1,$28(a0)
		bne.s	loc_2A82A
		subq.w	#1,$30(a0)
		bpl.s	loc_2A82A
		move.w	#0,$34(a0)
		move.w	#$78,$30(a0)
		bchg	#0,$32(a0)
		beq.s	loc_2A82A
		move.w	#$B4,$30(a0)

loc_2A82A:				
		tst.b	$32(a0)
		beq.w	loc_2A84E
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A890
		cmpi.w	#$400,$34(a0)
		bcc.s	loc_2A890
		addi.w	#$2A,$34(a0)
		move.b	$34(a0),$1E(a0)
		bra.s	loc_2A86A
; ===========================================================================

loc_2A84E:				
		lea	($FFFFB000).w,a1
		bsr.w	loc_2A894
		lea	($FFFFB040).w,a1
		bsr.w	loc_2A894
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A890
		move.b	#0,$1E(a0)

loc_2A86A:				
		addq.b	#1,$1B(a0)
		cmpi.b	#6,$1B(a0)
		bcs.s	loc_2A87C
		move.b	#0,$1B(a0)

loc_2A87C:				
		moveq	#0,d0
		btst	#0,$28(a0)
		beq.s	loc_2A888
		moveq	#5,d0

loc_2A888:				
		add.b	$1B(a0),d0
		move.b	d0,$1A(a0)

loc_2A890:				
		jmpto	DespawnObject,JmpTo26_DespawnObject
; ===========================================================================

loc_2A894:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2A8FC
		tst.b	$2A(a1)
		bne.s	locret_2A8FC
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		btst	#0,$22(a0)
		bne.s	loc_2A8B4
		neg.w	d0

loc_2A8B4:				
		addi.w	#$50,d0
		cmpi.w	#$F0,d0	
		bcc.s	locret_2A8FC
		move.w	ost_y_pos(a1),d1
		addi.w	#$60,d1
		sub.w	ost_y_pos(a0),d1
		bcs.s	locret_2A8FC
		cmpi.w	#$70,d1
		bcc.s	locret_2A8FC
		subi.w	#$50,d0
		bcc.s	loc_2A8DC
		not.w	d0
		add.w	d0,d0

loc_2A8DC:				
		addi.w	#$60,d0
		btst	#0,$22(a0)
		bne.s	loc_2A8EA
		neg.w	d0

loc_2A8EA:				
		neg.b	d0
		asr.w	#4,d0
		btst	#0,$28(a0)
		beq.s	loc_2A8F8
		neg.w	d0

loc_2A8F8:				
		add.w	d0,ost_x_pos(a1)

locret_2A8FC:				
		rts	
; ===========================================================================

loc_2A8FE:				
					
		btst	#1,$28(a0)
		bne.s	loc_2A926
		subq.w	#1,$30(a0)
		bpl.s	loc_2A926
		move.w	#0,$34(a0)
		move.w	#$78,$30(a0)
		bchg	#0,$32(a0)
		beq.s	loc_2A926
		move.w	#$B4,$30(a0)

loc_2A926:				
		tst.b	$32(a0)
		beq.w	loc_2A94A
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A98C
		cmpi.w	#$400,$34(a0)
		bcc.s	loc_2A98C
		addi.w	#$2A,$34(a0)
		move.b	$34(a0),$1E(a0)
		bra.s	loc_2A966
; ===========================================================================

loc_2A94A:				
		lea	($FFFFB000).w,a1
		bsr.w	loc_2A990
		lea	($FFFFB040).w,a1
		bsr.w	loc_2A990
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A98C
		move.b	#0,$1E(a0)

loc_2A966:				
		addq.b	#1,$1B(a0)
		cmpi.b	#6,$1B(a0)
		bcs.s	loc_2A978
		move.b	#0,$1B(a0)

loc_2A978:				
		moveq	#0,d0
		btst	#0,$28(a0)
		beq.s	loc_2A984
		moveq	#5,d0

loc_2A984:				
		add.b	$1B(a0),d0
		move.b	d0,$1A(a0)

loc_2A98C:				
		jmpto	DespawnObject,JmpTo26_DespawnObject
; ===========================================================================

loc_2A990:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2AA10
		tst.b	$2A(a1)
		bne.s	locret_2AA10
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0	
		bcc.s	locret_2AA10
		moveq	#0,d1
		move.b	($FFFFFE74).w,d1
		add.w	ost_y_pos(a1),d1
		addi.w	#$60,d1
		sub.w	ost_y_pos(a0),d1
		bcs.s	locret_2AA10
		cmpi.w	#$90,d1	
		bcc.s	locret_2AA10
		subi.w	#$60,d1
		bcs.s	loc_2A9D4
		not.w	d1
		add.w	d1,d1

loc_2A9D4:				
		addi.w	#$60,d1
		neg.w	d1
		asr.w	#4,d1
		add.w	d1,ost_y_pos(a1)
		bset	#1,$22(a1)
		move.w	#0,ost_y_vel(a1)
		move.w	#1,ost_inertia(a1)
		tst.b	$27(a1)
		bne.s	locret_2AA10
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#$7F,$2C(a1)
		move.b	#8,$2D(a1)

locret_2AA10:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2AA12:				
		dc.w word_2AA28-Map_2AA12			; 0
		dc.w word_2AA42-Map_2AA12			; 1
		dc.w word_2AA5C-Map_2AA12			; 2
		dc.w word_2AA76-Map_2AA12			; 3
		dc.w word_2AA90-Map_2AA12			; 4
		dc.w word_2AAAA-Map_2AA12			; 5
		dc.w word_2AA90-Map_2AA12			; 6
		dc.w word_2AA76-Map_2AA12			; 7
		dc.w word_2AA5C-Map_2AA12			; 8
		dc.w word_2AA42-Map_2AA12			; 9
		dc.w word_2AA28-Map_2AA12			; 10
word_2AA28:	dc.w 3			
		dc.w $F302,    0,    0,$FFF4			; 0
		dc.w $F005,    7,    3,$FFFC			; 4
		dc.w	 5,$1007,$1003,$FFFC			; 8
word_2AA42:	dc.w 3			
		dc.w $F502,$1000,$1000,$FFF4			; 0
		dc.w $F005,    7,    3,$FFFC			; 4
		dc.w	 5,$1007,$1003,$FFFC			; 8
word_2AA5C:	dc.w 3			
		dc.w $F003,    3,    1,$FFF4			; 0
		dc.w $F005,    7,    3,$FFFC			; 4
		dc.w	 5,$1007,$1003,$FFFC			; 8
word_2AA76:	dc.w 3			
		dc.w $F302,    0,    0,$FFF4			; 0
		dc.w $F005,   $B,    5,$FFFC			; 4
		dc.w	 5,$100B,$1005,$FFFC			; 8
word_2AA90:	dc.w 3			
		dc.w $F502,$1000,$1000,$FFF4			; 0
		dc.w $F005,   $B,    5,$FFFC			; 4
		dc.w	 5,$100B,$1005,$FFFC			; 8
word_2AAAA:	dc.w 3			
		dc.w $F003,    3,    1,$FFF4			; 0
		dc.w $F005,   $B,    5,$FFFC			; 4
		dc.w	 5,$100B,$1005,$FFFC			; 8
Map_2AAC4:				
		dc.w $16
		dc.w   $30,  $4A,  $64,	 $7E			; 0
		dc.w   $98,  $7E,  $64,	 $4A			; 4
		dc.w   $30,  $16,    3,$F408			; 8
		dc.w	$F,    7,$FFF3,$FC05			; 12
		dc.w   $16,   $B,$FFF0,$FC05			; 16
		dc.w  $816, $80B,    0,	   3			; 20
		dc.w $F408, $80F, $807,$FFF5			; 24
		dc.w $FC05,  $16,   $B,$FFF0			; 28
		dc.w $FC05, $816, $80B,	   0			; 32
		dc.w	 3,$F40C,  $12,	   9			; 36
		dc.w $FFF0,$FC05,  $16,	  $B			; 40
		dc.w $FFF0,$FC05, $816,	$80B			; 44
		dc.w	 0,    3,$F408,	  $F			; 48
		dc.w	 7,$FFF3,$FC05,	 $1A			; 52
		dc.w	$D,$FFF0,$FC05,	$81A			; 56
		dc.w  $80D,    0,    3,$F408			; 60
		dc.w  $80F, $807,$FFF5,$FC05			; 64
		dc.w   $1A,   $D,$FFF0,$FC05			; 68
		dc.w  $81A, $80D,    0,	   3			; 72
		dc.w $F40C,  $12,    9,$FFF0			; 76
		dc.w $FC05,  $1A,   $D,$FFF0			; 80
		dc.w $FC05, $81A, $80D,	   0			; 84
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo26_DespawnObject:				
		jmp	DespawnObject
JmpTo48_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 85 - CNZ pinball launcher
; ----------------------------------------------------------------------------

PinballLauncher:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2ABCE(pc,d0.w),d1
		jsr	off_2ABCE(pc,d1.w)
		move.w	#$200,d0
		tst.w	(f_two_player).w
		beq.s	loc_2ABA0
		jmpto	DisplaySprite3,JmpTo4_DisplaySprite3
; ===========================================================================

loc_2ABA0:				
		move.w	ost_x_pos(a0),d1
		andi.w	#-$80,d1
		sub.w	(v_camera_x_pos_coarse).w,d1
		cmpi.w	#$280,d1
		bhi.w	loc_2ABB8				; could be optimized to .s
		jmpto	DisplaySprite3,JmpTo4_DisplaySprite3
; ===========================================================================

loc_2ABB8:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	BranchTo_JmpTo43_DeleteObject
		bclr	#7,2(a2,d0.w)

BranchTo_JmpTo43_DeleteObject:				
		jmpto	DeleteObject,JmpTo43_DeleteObject
; ===========================================================================
off_2ABCE:	dc.w loc_2ABD4-off_2ABCE			; 0 
		dc.w loc_2AC84-off_2ABCE			; 1
		dc.w loc_2AE56-off_2ABCE			; 2
; ===========================================================================

loc_2ABD4:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2B07E,ost_mappings(a0)
		move.w	#tile_Nem_VertLauncher,ost_tile(a0)
		tst.b	$28(a0)
		beq.s	loc_2ABFA
		move.l	#Map_2B0EC,ost_mappings(a0)
		move.w	#tile_Nem_DiagLauncher,ost_tile(a0)

loc_2ABFA:				
		jsrto	Adjust2PArtPointer,JmpTo49_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#1,ost_mainspr_frame(a0)
		tst.b	$28(a0)
		beq.s	loc_2AC54
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$20,ost_mainspr_width(a0)
		move.b	#$18,$19(a0)
		move.w	ost_x_pos(a0),$2E(a0)
		move.w	ost_y_pos(a0),$34(a0)
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		addi.w	#0,d3
		move.b	#1,ost_mainspr_childsprites(a0)
		lea	ost_subspr2_x_pos(a0),a2
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#2,(a2)+
		bra.w	loc_2AE56
; ===========================================================================

loc_2AC54:				
		move.b	#$18,ost_mainspr_width(a0)
		move.b	#$18,$19(a0)
		move.w	ost_y_pos(a0),$34(a0)
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		addi.w	#$20,d3
		move.b	#1,ost_mainspr_childsprites(a0)
		lea	ost_subspr2_x_pos(a0),a2
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#2,(a2)+

loc_2AC84:				
		move.b	#0,$3A(a0)
		move.w	$34(a0),d0
		add.w	$38(a0),d0
		move.w	d0,ost_y_pos(a0)
		move.b	#2,ost_subspr2_frame(a0)
		cmpi.w	#$10,$38(a0)
		bcs.s	loc_2ACAA
		move.b	#3,ost_subspr2_frame(a0)

loc_2ACAA:				
		move.w	#$23,d1
		move.w	#$20,d2
		move.w	#$1D,d3
		move.w	ost_x_pos(a0),d4
		lea	$36(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold).w,d5
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_2AD26
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d5
		moveq	#4,d6
		bsr.s	loc_2AD26
		tst.w	$36(a0)
		beq.s	loc_2AD14
		tst.w	$38(a0)
		beq.s	locret_2AD24
		moveq	#0,d0
		cmpi.b	#1,$36(a0)
		bne.s	loc_2ACFA
		or.w	(v_joypad_hold).w,d0

loc_2ACFA:				
		cmpi.b	#1,$37(a0)
		bne.s	loc_2AD06
		or.w	(v_joypad2_hold_actual).w,d0

loc_2AD06:				
		andi.w	#$7000,d0
		bne.s	locret_2AD24
		move.w	#$202,$36(a0)
		rts	
; ===========================================================================

loc_2AD14:				
		move.b	#1,ost_mainspr_frame(a0)
		subq.w	#4,$38(a0)
		bcc.s	locret_2AD24
		clr.w	$38(a0)

locret_2AD24:				
		rts	
; ===========================================================================

loc_2AD26:				
		move.b	(a2),d0
		bne.s	loc_2AD7A

loc_2AD2A:				
		tst.w	(v_debug_active).w
		bne.s	locret_2AD78
		tst.w	ost_y_vel(a1)
		bmi.s	locret_2AD78
		jsrto	SolidObject_Always_SingleCharacter,JmpTo5_SolidObject_Always_SingleCharacter
		btst	d6,$22(a0)
		beq.s	locret_2AD78
		move.b	#-$7F,$2A(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		move.w	#0,ost_inertia(a1)
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		addq.b	#1,(a2)

locret_2AD78:				
		rts	
; ===========================================================================

loc_2AD7A:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2AD78
		subq.b	#1,d0
		bne.w	loc_2AE0C
		tst.b	ost_render(a1)
		bmi.s	loc_2ADB0
		bclr	d6,$22(a0)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.b	#0,(a2)
		rts	
; ===========================================================================

loc_2ADB0:				
		andi.w	#$7000,d5
		beq.s	loc_2ADFE
		tst.b	$3A(a0)
		bne.s	loc_2ADFE
		move.b	#1,$3A(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_2ADDA
		move.b	#3,$32(a0)
		cmpi.w	#$20,$38(a0)
		beq.s	loc_2ADDA
		addq.w	#1,$38(a0)

loc_2ADDA:				
		subq.b	#1,$33(a0)
		bpl.s	loc_2ADF8
		move.w	$38(a0),d0
		subi.w	#$20,d0
		neg.w	d0
		lsr.w	#1,d0
		move.b	d0,$33(a0)
		bchg	#2,ost_mainspr_frame(a0)
		bra.s	loc_2ADFE
; ===========================================================================

loc_2ADF8:				
		move.b	#1,ost_mainspr_frame(a0)

loc_2ADFE:				
		move.w	ost_y_pos(a0),d0
		subi.w	#$2E,d0
		move.w	d0,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_2AE0C:				
		move.b	#0,(a2)
		bclr	d6,$22(a0)
		beq.w	loc_2AD2A
		move.w	$38(a0),d0
		addi.w	#$10,d0
		lsl.w	#7,d0
		neg.w	d0
		move.w	d0,ost_y_vel(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#$800,ost_inertia(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.w	#$E2,d0	
		jmp	PlaySound
; ===========================================================================

loc_2AE56:				
					
		move.b	#0,$3A(a0)
		move.w	$38(a0),d1
		lsr.w	#1,d1
		move.w	$2E(a0),d0
		sub.w	d1,d0
		move.w	d0,ost_x_pos(a0)
		move.w	$34(a0),d0
		add.w	d1,d0
		move.w	d0,ost_y_pos(a0)
		move.b	#2,ost_subspr2_frame(a0)
		cmpi.w	#$10,$38(a0)
		bcs.s	loc_2AE8A
		move.b	#3,ost_subspr2_frame(a0)

loc_2AE8A:				
		move.w	#$23,d1
		move.w	#8,d2
		move.w	#5,d3
		move.w	ost_x_pos(a0),d4
		lea	$36(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold).w,d5
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_2AF06
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d5
		moveq	#4,d6
		bsr.s	loc_2AF06
		tst.w	$36(a0)
		beq.s	loc_2AEF4
		tst.w	$38(a0)
		beq.s	locret_2AF04
		moveq	#0,d0
		cmpi.b	#1,$36(a0)
		bne.s	loc_2AEDA
		or.w	(v_joypad_hold).w,d0

loc_2AEDA:				
		cmpi.b	#1,$37(a0)
		bne.s	loc_2AEE6
		or.w	(v_joypad2_hold_actual).w,d0

loc_2AEE6:				
		andi.w	#$7000,d0
		bne.s	locret_2AF04
		move.w	#$202,$36(a0)
		rts	
; ===========================================================================

loc_2AEF4:				
		move.b	#1,ost_mainspr_frame(a0)
		subq.w	#4,$38(a0)
		bcc.s	locret_2AF04
		clr.w	$38(a0)

locret_2AF04:				
		rts	
; ===========================================================================

loc_2AF06:				
		move.b	(a2),d0
		bne.s	loc_2AF7A
		tst.w	(v_debug_active).w
		bne.s	locret_2AF78
		tst.w	ost_y_vel(a1)
		bmi.s	locret_2AF78
		jsrto	SolidObject_Always_SingleCharacter,JmpTo5_SolidObject_Always_SingleCharacter
		btst	d6,$22(a0)
		bne.s	loc_2AF2E
		move.b	d6,d0
		addq.b	#2,d0
		btst	d0,$22(a0)
		beq.s	locret_2AF78
		bset	d6,$22(a0)

loc_2AF2E:				
		move.b	#-$7F,$2A(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		addi.w	#$13,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		subi.w	#$13,ost_y_pos(a1)
		move.w	#0,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		move.w	#0,ost_inertia(a1)
		bset	#2,$22(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		addq.b	#1,(a2)

locret_2AF78:				
		rts	
; ===========================================================================

loc_2AF7A:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2AF78
		subq.b	#1,d0
		bne.w	loc_2B018
		tst.b	ost_render(a1)
		bmi.s	loc_2AFB0
		bclr	d6,$22(a0)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.b	#0,(a2)
		rts	
; ===========================================================================

loc_2AFB0:				
		andi.w	#$7000,d5
		beq.s	loc_2AFFE
		tst.b	$3A(a0)
		bne.s	loc_2AFFE
		move.b	#1,$3A(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_2AFDA
		move.b	#3,$32(a0)
		cmpi.w	#$1C,$38(a0)
		beq.s	loc_2AFDA
		addq.w	#1,$38(a0)

loc_2AFDA:				
		subq.b	#1,$33(a0)
		bpl.s	loc_2AFF8
		move.w	$38(a0),d0
		subi.w	#$1C,d0
		neg.w	d0
		lsr.w	#1,d0
		move.b	d0,$33(a0)
		bchg	#2,ost_mainspr_frame(a0)
		bra.s	loc_2AFFE
; ===========================================================================

loc_2AFF8:				
		move.b	#1,ost_mainspr_frame(a0)

loc_2AFFE:				
		move.w	ost_x_pos(a0),d0
		addi.w	#$13,d0
		move.w	d0,ost_x_pos(a1)
		move.w	ost_y_pos(a0),d0
		subi.w	#$13,d0

loc_2B012:
		move.w	d0,ost_y_pos(a1)
		rts	
; ===========================================================================

loc_2B018:				
		move.b	#0,(a2)
		bclr	d6,$22(a0)
		beq.w	locret_2AF78
		move.w	$38(a0),d0
		addi_.w	#4,d0
		lsl.w	#7,d0
		move.w	d0,ost_x_vel(a1)
		neg.w	d0
		move.w	d0,ost_y_vel(a1)
		move.w	#$800,ost_inertia(a1)
		bset	#1,$22(a1)

loc_2B044:
		bclr	#3,$22(a1)
		tst.b	$28(a0)
		bpl.s	loc_2B068
		neg.w	d0
		move.w	d0,ost_inertia(a1)
		bclr	#0,$22(a1)
		bclr	#1,$22(a1)
		move.b	#-$20,$26(a1)

loc_2B068:				
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.w	#$E2,d0	
		jmp	PlaySound
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B07E:				
		dc.w word_2B08A-Map_2B07E			; 0
		dc.w word_2B0AC-Map_2B07E			; 1
		dc.w word_2B0B6-Map_2B07E			; 2
		dc.w word_2B0D0-Map_2B07E			; 3
		dc.w word_2B0E2-Map_2B07E			; 4
		dc.w word_2B0E2-Map_2B07E			; 5
word_2B08A:	dc.w 4			
		dc.w $C809,    0,    0,$FFF4			; 0
		dc.w $D809,    6,    3,$FFF4			; 4
		dc.w $E809,    6,    3,$FFF4			; 8
		dc.w $F809,   $C,    6,$FFF4			; 12
word_2B0AC:	dc.w 1			
		dc.w $E009,    0,    0,$FFF4			; 0
word_2B0B6:	dc.w 3			
		dc.w $D009,    6,    3,$FFF4			; 0
		dc.w $E009,    6,    3,$FFF4			; 4
		dc.w $F009,   $C,    6,$FFF4			; 8
word_2B0D0:	dc.w 2			
		dc.w $E009,    6,    3,$FFF4			; 0
		dc.w $F009,   $C,    6,$FFF4			; 4
word_2B0E2:	dc.w 1			
		dc.w $E009,$2000,$2000,$FFF4			; 0
Map_2B0EC:				
		dc.w $C
		dc.w   $1E,  $28,  $28,	 $32			; 0
		dc.w   $32,    2,$F00F,	   0			; 4
		dc.w	 0,$FFF0,   $F,	 $10			; 8
		dc.w	 8,$FFE0,    1,$F00F			; 12
		dc.w	 0,    0,$FFF0,	   1			; 16
		dc.w	$F,  $10,    8,$FFE0			; 20
		dc.w	 1,$F00F,$2000,$2000			; 24
		dc.w $FFF0					; 28
; ===========================================================================

	if RemoveJmpTos=0
JmpTo4_DisplaySprite3:				
		jmp	DisplaySprite3
JmpTo43_DeleteObject:				
		jmp	DeleteObject
JmpTo49_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo5_SolidObject_Always_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 86 - CNZ flipper
; ----------------------------------------------------------------------------

Flipper:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2B152(pc,d0.w),d1
		jsr	off_2B152(pc,d1.w)
		jmpto	DespawnObject,JmpTo27_DespawnObject
; ===========================================================================
off_2B152:	dc.w loc_2B158-off_2B152			; 0 
		dc.w loc_2B194-off_2B152			; 1
		dc.w loc_2B312-off_2B152			; 2
; ===========================================================================

loc_2B158:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2B45A,ost_mappings(a0)
		move.w	#tile_Nem_Flipper+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo50_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)
		tst.b	$28(a0)
		beq.s	loc_2B194
		addq.b	#2,ost_primary_routine(a0)
		move.b	#2,$1C(a0)
		bra.w	loc_2B312
; ===========================================================================

loc_2B194:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_2B208
		lea	(byte_2B3C6).l,a2
		move.b	$1A(a0),d0
		beq.s	loc_2B1B6
		lea	(byte_2B3EA).l,a2
		subq.b	#1,d0
		beq.s	loc_2B1B6
		lea	(byte_2B40E).l,a2

loc_2B1B6:				
		move.w	#$23,d1
		move.w	#6,d2
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject_Heightmap,JmpTo2_SolidObject_Heightmap
		lea	$36(a0),a3
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold).w,d5
		moveq	#3,d6
		bsr.s	loc_2B20A
		addq.w	#1,a3
		lea	($FFFFB040).w,a1
		move.w	(v_joypad2_hold_actual).w,d5
		moveq	#4,d6
		bsr.s	loc_2B20A
		tst.b	$38(a0)
		beq.s	loc_2B1FE
		clr.b	$38(a0)
		bsr.w	loc_2B290
		subq.w	#1,a3
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.w	loc_2B290

loc_2B1FE:				
		lea	(off_2B432).l,a1
		jmpto	AnimateSprite,JmpTo9_AnimateSprite
; ===========================================================================

locret_2B208:				
		rts	
; ===========================================================================

loc_2B20A:				
		move.b	(a3),d0
		bne.s	loc_2B23C
		btst	d6,$22(a0)
		beq.s	locret_2B208
		move.b	#1,$2A(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		bset	#2,$22(a1)
		bne.s	loc_2B238
		addq.w	#5,ost_y_pos(a1)

loc_2B238:				
		addq.b	#1,(a3)
		rts	
; ===========================================================================

loc_2B23C:				
		andi.w	#$70,d5
		bne.s	loc_2B288
		btst	d6,$22(a0)
		bne.s	loc_2B254
		move.b	#0,$2A(a1)
		move.b	#0,(a3)
		rts	
; ===========================================================================

loc_2B254:				
		moveq	#0,d1
		move.b	$1A(a0),d1
		subq.w	#1,d1
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_2B272
		neg.w	d1
		bclr	#0,$22(a1)

loc_2B272:				
		add.w	d1,ost_x_pos(a1)
		lsl.w	#8,d1
		move.w	d1,ost_x_vel(a1)
		move.w	d1,ost_inertia(a1)
		move.w	#0,ost_y_vel(a1)
		rts	
; ===========================================================================

loc_2B288:				
		move.b	#1,$38(a0)
		rts	
; ===========================================================================

loc_2B290:				
		bclr	d6,$22(a0)
		beq.w	locret_2B208
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_2B2AA
		neg.w	d0

loc_2B2AA:				
		addi.w	#$23,d0
		move.w	d0,d2
		cmpi.w	#$40,d2
		bcs.s	loc_2B2BA
		move.w	#$40,d2

loc_2B2BA:				
		lsl.w	#5,d2
		addi.w	#$800,d2
		neg.w	d2
		asr.w	#2,d0
		addi.w	#$40,d0
		jsrto	CalcSine,JmpTo11_CalcSine
		muls.w	d2,d0
		muls.w	d2,d1
		asr.l	#8,d0
		asr.l	#8,d1
		move.w	d0,ost_y_vel(a1)
		btst	#0,$22(a0)
		beq.s	loc_2B2E2
		neg.w	d1

loc_2B2E2:				
		move.w	d1,ost_x_vel(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.b	#1,$1C(a0)
		move.b	#0,(a3)
		move.w	#$E3,d0	
		jmp	PlaySound
; ===========================================================================

loc_2B312:				
					
		move.w	#$13,d1
		move.w	#$18,d2
		move.w	#$19,d3
		move.w	ost_x_pos(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo6_SolidObject_NoRenderChk_SingleCharacter
		btst	#5,$22(a0)
		beq.s	loc_2B33A
		bsr.s	loc_2B35C

loc_2B33A:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo6_SolidObject_NoRenderChk_SingleCharacter
		btst	#6,$22(a0)
		beq.s	loc_2B352
		bsr.s	loc_2B35C

loc_2B352:				
		lea	(off_2B432).l,a1
		jmpto	AnimateSprite,JmpTo9_AnimateSprite
; ===========================================================================

loc_2B35C:				
		move.w	#$300,$1C(a0)
		move.w	#-$1000,ost_x_vel(a1)
		addq.w	#8,ost_x_pos(a1)
		bset	#0,$22(a1)
		move.w	ost_x_pos(a0),d0
		sub.w	ost_x_pos(a1),d0
		bcc.s	loc_2B392
		bclr	#0,$22(a1)
		subi.w	#$10,ost_x_pos(a1)
		neg.w	ost_x_vel(a1)
		move.w	#$400,$1C(a0)

loc_2B392:				
		move.w	#$F,$2E(a1)
		move.w	ost_x_vel(a1),ost_inertia(a1)
		move.b	#$E,ost_height(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		bset	#2,$22(a1)
		bne.s	loc_2B3BC
		addq.w	#5,ost_y_pos(a1)

loc_2B3BC:				
		move.w	#$E3,d0	
		jmp	PlaySound
; ===========================================================================
byte_2B3C6:	dc.b   7,  7,  7,  7,  7,  7,  7,  8,  9, $A, $B, $A,  9,  8,  7,  6 ; 0
					
		dc.b   5,  4,  3,  2,  1,  0,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 16
		dc.b $F5,$F4,$F3,$F2				; 32
byte_2B3EA:	dc.b   6,  6,  6,  6,  6,  6,  7,  8,  9,  9,  9,  9,  9,  9,  8,  8 ; 0
					
		dc.b   8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  4,  4 ; 16
		dc.b   4,  4,  4,  4				; 32
byte_2B40E:	dc.b   5,  5,  5,  5,  5,  6,  7,  8,  9, $A, $B, $B, $C, $C, $D, $D ; 0
					
		dc.b  $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$11,$11,$10,$10,$10,$10 ; 16
		dc.b $10,$10,$10,$10				; 32
off_2B432:	dc.w byte_2B43C-off_2B432			; 0 
		dc.w byte_2B43F-off_2B432			; 1
		dc.w byte_2B445-off_2B432			; 2
		dc.w byte_2B448-off_2B432			; 3
		dc.w byte_2B451-off_2B432			; 4
byte_2B43C:	dc.b  $F,  0,$FF				; 0 
byte_2B43F:	dc.b   3,  1,  2,  1,$FD,  0			; 0	
byte_2B445:	dc.b  $F,  4,$FF				; 0 
byte_2B448:	dc.b   0,  5,  4,  3,  3,  3,  3,$FD,  2	; 0 
byte_2B451:	dc.b   0,  3,  4,  5,  5,  5,  5,$FD,  2	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B45A:				
		dc.w word_2B466-Map_2B45A			; 0
		dc.w word_2B480-Map_2B45A			; 1
		dc.w word_2B492-Map_2B45A			; 2
		dc.w word_2B4AC-Map_2B45A			; 3
		dc.w word_2B4C6-Map_2B45A			; 4
		dc.w word_2B4E8-Map_2B45A			; 5
word_2B466:	dc.w 3			
		dc.w $F70B,   $C,    6,$FFE7			; 0
		dc.w $FE01,  $18,   $C,$FFFF			; 4
		dc.w  $105,  $1A,   $D,	   7			; 8
word_2B480:	dc.w 2			
		dc.w $F80D,    0,    0,$FFE8			; 0
		dc.w $F805,    8,    4,	   8			; 4
word_2B492:	dc.w 3			
		dc.w $E90B,$100C,$1006,$FFE7			; 0
		dc.w $F201,$1018,$100C,$FFFF			; 4
		dc.w $EF05,$101A,$100D,	   7			; 8
word_2B4AC:	dc.w 3			
		dc.w $E709,  $24,  $12,$FFF1			; 0
		dc.w $F709,  $2A,  $15,$FFEF			; 4
		dc.w  $705,  $30,  $18,$FFEF			; 8
word_2B4C6:	dc.w 4			
		dc.w $E803,  $1E,   $F,$FFF8			; 0
		dc.w $E803, $81E, $80F,	   0			; 4
		dc.w  $801,  $22,  $11,$FFF8			; 8
		dc.w  $801, $822, $811,	   0			; 12
word_2B4E8:	dc.w 3			
word_2B4EA:	dc.w $E709, $824, $812,$FFF7			; 0
		dc.w $F709, $82A, $815,$FFF9			; 4
		dc.w  $705, $830, $818,	   1			; 8
; ===========================================================================
	
	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo27_DespawnObject:				
		jmp	DespawnObject
JmpTo9_AnimateSprite:				
		jmp	AnimateSprite
JmpTo50_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo11_CalcSine:				
		jmp	CalcSine
JmpTo6_SolidObject_NoRenderChk_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter
JmpTo2_SolidObject_Heightmap:				
		jmp	SolidObject_Heightmap
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D2 - CNZ snake platforms
; ----------------------------------------------------------------------------

SnakePlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2B536(pc,d0.w),d1
		jmp	off_2B536(pc,d1.w)
; ===========================================================================
off_2B536:	
		dc.w loc_2B53A-off_2B536			; 0 
		dc.w loc_2B57E-off_2B536			; 1
; ===========================================================================

loc_2B53A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2B694,ost_mappings(a0)
		move.w	#tile_Nem_SnakePlats+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo51_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#8,$19(a0)
		move.b	#4,$18(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		move.w	d0,$38(a0)
		bsr.w	loc_2B60C

loc_2B57E:				
		tst.w	$38(a0)
		beq.s	loc_2B58C
		subq.w	#1,$38(a0)
		jmpto	DespawnObject3,JmpTo6_DespawnObject3
; ===========================================================================

loc_2B58C:				
		subq.w	#1,$3A(a0)
		bpl.s	loc_2B5EC
		move.w	#$F,$3A(a0)
		addq.b	#1,$1A(a0)

loc_2B59C:
		andi.b	#$F,$1A(a0)
		bne.s	loc_2B5EA
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		move.w	d0,$38(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_2B5E2
		bclr	#3,$22(a0)
		beq.s	loc_2B5CE
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

loc_2B5CE:				
		bclr	#4,$22(a0)
		beq.s	loc_2B5E2
		bclr	#3,($FFFFB062).w
		bset	#1,($FFFFB062).w

loc_2B5E2:				
		move.w	$30(a0),ost_x_pos(a0)
		bra.s	loc_2B60C
; ===========================================================================

loc_2B5EA:				
		bsr.s	loc_2B60C

loc_2B5EC:				
		move.w	$34(a0),d1
		addi.w	#$B,d1
		move.w	$36(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo24_SolidObject
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo9_DespawnObject2
; ===========================================================================

loc_2B60C:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		add.w	d0,d0
		lea	byte_2B654(pc,d0.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		btst	#0,$22(a0)
		beq.s	loc_2B628
		neg.w	d0

loc_2B628:				
		add.w	$30(a0),d0
		move.w	d0,ost_x_pos(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$32(a0),d0
		move.w	d0,ost_y_pos(a0)
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		move.b	(a1)+,d1
		move.b	(a1)+,d2
		move.w	d1,$34(a0)
		move.b	d1,$19(a0)
		move.w	d2,$36(a0)
		rts	
; ===========================================================================
byte_2B654:	dc.b $D8,$18,  8,  8,$D8,$10,  8,$10,$D8,  8,  8,$18,$D8,  0,  8,$20 ; 0
		dc.b $E0,  0,$10,$20,$E8,$F8,$18,$18,$F0,$F0,$20,$10,$F8,$E8,$28,  8 ; 16
		dc.b   8,$E8,$28,  8,$10,$F0,$20,$10,$18,$F8,$18,$18,$20,  0,$10,$20 ; 32
		dc.b $28,  0,  8,$20,$28,  8,  8,$18,$28,$10,  8,$10,$28,$18,  8,  8 ; 48
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B694:				
		dc.w word_2B6B4-Map_2B694			; 0
		dc.w word_2B6BE-Map_2B694			; 1
		dc.w word_2B6D0-Map_2B694			; 2
		dc.w word_2B6EA-Map_2B694			; 3
		dc.w word_2B70C-Map_2B694			; 4
		dc.w word_2B736-Map_2B694			; 5
		dc.w word_2B760-Map_2B694			; 6
		dc.w word_2B78A-Map_2B694			; 7
		dc.w word_2B78A-Map_2B694			; 8
		dc.w word_2B7B4-Map_2B694			; 9
		dc.w word_2B7DE-Map_2B694			; 10
		dc.w word_2B808-Map_2B694			; 11
		dc.w word_2B6EA-Map_2B694			; 12
		dc.w word_2B6D0-Map_2B694			; 13
		dc.w word_2B6BE-Map_2B694			; 14
		dc.w word_2B6B4-Map_2B694			; 15
word_2B6B4:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
word_2B6BE:	dc.w 2			
		dc.w $F005,    0,    0,$FFF8			; 0
		dc.w	 5,    0,    0,$FFF8			; 4
word_2B6D0:	dc.w 3			
word_2B6D2:	dc.w $E805,    0,    0,$FFF8			; 0
		dc.w $F805,    0,    0,$FFF8			; 4
		dc.w  $805,    0,    0,$FFF8			; 8
word_2B6EA:	dc.w 4			
		dc.w $E005,    0,    0,$FFF8			; 0
		dc.w $F005,    0,    0,$FFF8			; 4
		dc.w	 5,    0,    0,$FFF8			; 8
		dc.w $1005,    0,    0,$FFF8			; 12
word_2B70C:	dc.w 5			
word_2B70E:	dc.w $E005,    0,    0,	   0			; 0
		dc.w $E005,    0,    0,$FFF0			; 4
		dc.w $F005,    0,    0,$FFF0			; 8
		dc.w	 5,    0,    0,$FFF0			; 12
		dc.w $1005,    0,    0,$FFF0			; 16
word_2B736:	dc.w 5			
word_2B738:	dc.w $E805,    0,    0,	   8			; 0
		dc.w $E805,    0,    0,$FFF8			; 4
		dc.w $E805,    0,    0,$FFE8			; 8
		dc.w $F805,    0,    0,$FFE8			; 12
		dc.w  $805,    0,    0,$FFE8			; 16
word_2B760:	dc.w 5			
word_2B762:	dc.w $F005,    0,    0,	 $10			; 0
		dc.w $F005,    0,    0,	   0			; 4
		dc.w $F005,    0,    0,$FFF0			; 8
		dc.w $F005,    0,    0,$FFE0			; 12
		dc.w	 5,    0,    0,$FFE0			; 16
word_2B78A:	dc.w 5			
word_2B78C:	dc.w $F805,    0,    0,	 $18			; 0
		dc.w $F805,    0,    0,	   8			; 4
		dc.w $F805,    0,    0,$FFF8			; 8
		dc.w $F805,    0,    0,$FFE8			; 12
		dc.w $F805,    0,    0,$FFD8			; 16
word_2B7B4:	dc.w 5			
		dc.w	 5,    0,    0,	 $10			; 0
		dc.w $F005,    0,    0,	 $10			; 4
		dc.w $F005,    0,    0,	   0			; 8
		dc.w $F005,    0,    0,$FFF0			; 12
		dc.w $F005,    0,    0,$FFE0			; 16
word_2B7DE:	dc.w 5			
		dc.w  $805,    0,    0,	   8			; 0
		dc.w $F805,    0,    0,	   8			; 4
		dc.w $E805,    0,    0,	   8			; 8
		dc.w $E805,    0,    0,$FFF8			; 12
		dc.w $E805,    0,    0,$FFE8			; 16
word_2B808:	dc.w 5			
		dc.w $1005,    0,    0,	   0			; 0
		dc.w	 5,    0,    0,	   0			; 4
		dc.w $F005,    0,    0,	   0			; 8
		dc.w $E005,    0,    0,	   0			; 12
		dc.w $E005,    0,    0,$FFF0			; 16
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo6_DespawnObject3:				
		jmp	DespawnObject3
JmpTo51_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo24_SolidObject:				
		jmp	SolidObject
JmpTo9_DespawnObject2:				
		jmp	DespawnObject2
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D3 - CNZ bomb penalty
; Uses almost the same OST properties as the ring prize object
; ----------------------------------------------------------------------------


BombPenalty:	

		rsobj	BombPenalty,$2A
ost_casinobmb_childcnt_ptr:		rs.l 1			; $2A; pointer to parent cage's child object counter
		rsset $2E
ost_casinobmb_angle:			rs.w 1			; $2E; spawn angle of bomb				
ost_casinobmb_x_pos: 			rs.l 1			; $30; X position of the bomb with greater precision
ost_casinobmb_y_pos:			rs.l 1			; $34; Y position of the bomb with greater precision
ost_casinobmb_machine_x_pos:	rs.w 1				; $38; X position of the slot machine cage that generated the bomb
ost_casinobmb_machine_y_pos:	rs.w 1				; $3A; Y position of the slot machine cage that generated the bomb
ost_casinobmb_display_delay:	rs.w 1				; $3C; number of frames that bomb is displated			
ost_casinobmb_player:			rs.w 1			; $3E; character this bomb is being 'awarded' to
ost_casinobmb_player_low:		equ __rs-1		; $3F; tested to check which player to deduct rings from

		rsobjend
		
		; Make bomb move toward the cage each frame	
		moveq	#0,d1
		move.w	ost_casinobmb_machine_x_pos(a0),d1	; get x pos of cage associated with slot machine
		swap	d1					; swap to high word
		move.l	ost_casinobmb_x_pos(a0),d0		; get current x pos of bomb
		sub.l	d1,d0					; get difference
		asr.l	#4,d0					; divide by 16
		sub.l	d0,ost_casinobmb_x_pos(a0)		; subtract from old x pos to get new x pos
		move.w	ost_casinobmb_x_pos(a0),ost_x_pos(a0)	; set new x pos of bomb
		moveq	#0,d1
		move.w	ost_casinobmb_machine_y_pos(a0),d1	; get y pos of cage associated with slot machine
		swap	d1					; swap to high word	
		move.l	ost_casinobmb_y_pos(a0),d0		; get current y pos of bomb
		sub.l	d1,d0					; get difference
		asr.l	#4,d0					; divide by 16
		sub.l	d0,ost_casinobmb_y_pos(a0)		; subtract from old y pos to get new y pos
		move.w	ost_casinobmb_y_pos(a0),ost_y_pos(a0)	; set new y pos of bomb
		subq.w	#1,ost_casinobmb_display_delay(a0)	; deincrement delay timer
		bne.w	JmpTo28_DisplaySprite			; branch if time remains
		movea.l	ost_casinobmb_childcnt_ptr(a0),a1	; parent's cage's child counter
		subq.w	#1,(a1)					; deincrement child counter
		cmpi.w	#5,(v_casinobmb_snd_delay).w		; is sound delay counter over 5?		
		bcs.s	.skip_sound				; if not, branch
		clr.w	(v_casinobmb_snd_delay).w		; reset sound delay counter
		move.w	#sfx_SpikeHit,d0			; play spike hit sound
		jsr	(PlaySound2).l

	.skip_sound:				
		tst.b	ost_casinobmb_player_low(a0) 
		beq.s	.player1				; branch if bombs are for player 1					
		tst.w	(v_rings_p2).w					
		beq.s	.chk2P					; branch if player 2 doesn't have any rings
		subq.w	#1,(v_rings_p2).w			; deincrement player 2's ring counter
		ori.b	#$81,(v_hud_rings_update_p2).w		; set flag to update their HUD

	.chk2P:				
		tst.w	(f_two_player).w			; is it two-player mode?
		bne.s	BranchTo_JmpTo44_DeleteObject		; if so, branch

	.player1:				
		tst.w	(v_rings).w					
		beq.s	BranchTo_JmpTo44_DeleteObject		; branch if player 1 doesn't have any rings
		subq.w	#1,(v_rings).w				; deincrement player 1's ring counter
		ori.b	#$81,(v_hud_rings_update).w		; set flag to update their HUD

BranchTo_JmpTo44_DeleteObject:				
		jmpto	DeleteObject,JmpTo44_DeleteObject
		
	if RemoveJmpTos
JmpTo28_DisplaySprite:				
		jmp	DisplaySprite
	endc		
		
; ===========================================================================

		include "mappings/sprite/CNZ Bomb Penalty.asm"

; ===========================================================================

	if RemoveJmpTos=0
JmpTo28_DisplaySprite:				
		jmp	DisplaySprite
JmpTo44_DeleteObject:				
		jmp	DeleteObject
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D4 - CNZ large moving blue block
; ----------------------------------------------------------------------------

LargeMovingBlock:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2B8FA(pc,d0.w),d1
		jmp	off_2B8FA(pc,d1.w)
; ===========================================================================
off_2B8FA:	
		dc.w loc_2B8FE-off_2B8FA			; 0 
		dc.w loc_2B96E-off_2B8FA			; 2
; ===========================================================================

loc_2B8FE:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2B9CA,ost_mappings(a0)
		move.w	#tile_Nem_LargeMovingBlock+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo52_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.b	#4,$18(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.w	#$8000,ost_x_sub(a0)
		move.w	#$8000,ost_y_sub(a0)
		tst.b	$28(a0)
		bne.s	loc_2B95A
		subi.w	#$60,ost_x_pos(a0)
		btst	#0,$22(a0)
		beq.s	loc_2B96E
		addi.w	#$C0,ost_x_pos(a0)
		bra.s	loc_2B96E
; ===========================================================================

loc_2B95A:				
		subi.w	#$60,ost_y_pos(a0)
		btst	#1,$22(a0)
		beq.s	loc_2B96E
		addi.w	#$C0,ost_y_pos(a0)

loc_2B96E:				
		move.w	ost_x_pos(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	off_2B99E(pc,d0.w),d1
		jsr	off_2B99E(pc,d1.w)
		jsrto	SpeedToPos,JmpTo17_SpeedToPos
		move.w	#$2B,d1
		move.w	#$20,d2
		move.w	#$21,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo25_SolidObject
		move.w	$30(a0),d0
		jmpto	DespawnObject2,JmpTo10_DespawnObject2
; ===========================================================================
off_2B99E:	dc.w loc_2B9A2-off_2B99E			; 0 
		dc.w loc_2B9B6-off_2B99E			; 1
; ===========================================================================

loc_2B9A2:				
		moveq	#4,d1
		move.w	$30(a0),d0
		cmp.w	ost_x_pos(a0),d0
		bhi.s	loc_2B9B0
		neg.w	d1

loc_2B9B0:				
		add.w	d1,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_2B9B6:				
		moveq	#4,d1
		move.w	$32(a0),d0
		cmp.w	ost_y_pos(a0),d0
		bhi.s	loc_2B9C4
		neg.w	d1

loc_2B9C4:				
		add.w	d1,ost_y_vel(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B9CA:				
		dc.w word_2B9CC-Map_2B9CA
word_2B9CC:	dc.w 4			
		dc.w $E00F,    0,    0,$FFE0			; 0
		dc.w $E00F, $800, $800,	   0			; 4
		dc.w	$F,$1000,$1000,$FFE0			; 8
		dc.w	$F,$1800,$1800,	   0			; 12
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo52_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo25_SolidObject:				
		jmp	SolidObject
JmpTo10_DespawnObject2:				
		jmp	DespawnObject2
JmpTo17_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D5 - CNZ Elevator
; ----------------------------------------------------------------------------

Elevator:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2BA16(pc,d0.w),d1
		jmp	off_2BA16(pc,d1.w)
; ===========================================================================
off_2BA16:	
		dc.w loc_2BA1A-off_2BA16			; 0 
		dc.w loc_2BA68-off_2BA16			; 1
; ===========================================================================

loc_2BA1A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2BB40,ost_mappings(a0)
		move.w	#tile_Nem_CNZElevator+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo53_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	ost_y_pos(a0),$32(a0)
		move.w	#-$8000,ost_y_sub(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		sub.w	d0,ost_y_pos(a0)
		btst	#0,$22(a0)
		beq.s	loc_2BA68
		add.w	d0,d0
		add.w	d0,ost_y_pos(a0)

loc_2BA68:				
					
		jsrto	SpeedToPos,JmpTo18_SpeedToPos
		move.w	$34(a0),d0
		move.w	off_2BA94(pc,d0.w),d1
		jsr	off_2BA94(pc,d1.w)
		cmpi.w	#6,$34(a0)
		bcc.s	loc_2BA90
		move.w	#$10,d1
		move.w	#9,d3
		move.w	ost_x_pos(a0),d4
		jsrto	DetectPlatform3,JmpTo_DetectPlatform3

loc_2BA90:				
		jmpto	DespawnObject,JmpTo28_DespawnObject
; ===========================================================================
off_2BA94:	dc.w loc_2BA9C-off_2BA94			; 0 
		dc.w loc_2BAB6-off_2BA94			; 1
		dc.w loc_2BAEE-off_2BA94			; 2
		dc.w loc_2BB08-off_2BA94			; 3
; ===========================================================================

loc_2BA9C:				
		move.b	$22(a0),d0
		andi.w	#$18,d0
		beq.s	locret_2BAB4
		move.w	#$D6,d0	
		jsr	PlaySound
		addq.w	#2,$34(a0)

locret_2BAB4:				
		rts	
; ===========================================================================

loc_2BAB6:				
		moveq	#8,d1
		move.w	$32(a0),d0
		cmp.w	ost_y_pos(a0),d0
		bcc.s	loc_2BAC4
		neg.w	d1

loc_2BAC4:				
		add.w	d1,ost_y_vel(a0)
		bne.s	locret_2BAEC
		addq.w	#2,$34(a0)
		move.w	d0,ost_y_pos(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		sub.w	d0,ost_y_pos(a0)
		btst	#0,$22(a0)
		bne.s	locret_2BAEC
		add.w	d0,d0
		add.w	d0,ost_y_pos(a0)

locret_2BAEC:				
		rts	
; ===========================================================================

loc_2BAEE:				
		move.b	$22(a0),d0
		andi.w	#$18,d0
		bne.s	locret_2BB06
		move.w	#$D6,d0	
		jsr	PlaySound
		addq.w	#2,$34(a0)

locret_2BB06:				
		rts	
; ===========================================================================

loc_2BB08:				
		moveq	#8,d1
		move.w	$32(a0),d0
		cmp.w	ost_y_pos(a0),d0
		bcc.s	loc_2BB16
		neg.w	d1

loc_2BB16:				
		add.w	d1,ost_y_vel(a0)
		bne.s	locret_2BB3E
		clr.w	$34(a0)
		move.w	d0,ost_y_pos(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		sub.w	d0,ost_y_pos(a0)
		btst	#0,$22(a0)
		beq.s	locret_2BB3E
		add.w	d0,d0
		add.w	d0,ost_y_pos(a0)

locret_2BB3E:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2BB40:				
		dc.w word_2BB42-Map_2BB40
word_2BB42:	dc.w 2			
		dc.w $F805,    0,    0,$FFF0			; 0
		dc.w $F805, $800, $800,	   0			; 4
; ===========================================================================

	if RemoveJmpTos=0
JmpTo28_DespawnObject:				
		jmp	DespawnObject
JmpTo53_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_DetectPlatform3:				
		jmp	DetectPlatform3
JmpTo18_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D6 - CNZ pinball cages
; (Whose idea was it to call these "point pokeys" in Sonic 2 AS?)
; ----------------------------------------------------------------------------

Cage:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	Cage_Index(pc,d0.w),d1
		jmp	Cage_Index(pc,d1.w)
; ===========================================================================
Cage_Index:	index offset(*),,2
		ptr Cage_Main					; 0 
		ptr Cage_Action					; 2
		
		rsobj Cage,$2A
ost_cage_bombcount:		rs.w 1				; $2A ; number of bombs left to spawn
ost_cage_childcount:	rs.w 1					; $2C ; number of rings or bombs spawned; no more than 16 of each are allowed at any given time
ost_cage_prize_angle:	rs.w 1					; $2E ; angle at which next ring or bomb is spawned
ost_cage_p1_routine:	rs.w 1					; $30 ; player 1 secondary routine
ost_cage_p1_timer:		rs.w 1				; $32 ; timer for player 1
ost_cage_p2_routine:	rs.w 1					; $34 ; player 2 secondary routine
ost_cage_p2_timer:		rs.w 1				; $36 ; timer for player 2	
		rsset $3E
ost_cage_player:		rs.w 1				; $3E ; player currently in the cage
		rsobjend
; ===========================================================================

Cage_Main:				
		addq.b	#2,ost_primary_routine(a0)		; go to Cage_Action next
		move.l	#Map_Cage,ost_mappings(a0)
		move.w	#tile_Nem_Cage,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo54_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$18,ost_displaywidth(a0)
		move.b	#1,ost_priority(a0)

Cage_Action:				
		move.w	#($46/2),d1				; width of cage/2 (all of these could be moveq)
		move.w	#($20/2),d2				; height of cage/2
		move.w	#($22/2),d3				; height of cage standing/2
		move.w	ost_x_pos(a0),d4
		lea	ost_cage_p1_routine(a0),a2		; (a2) = secondary routine counter for main character
		lea	(v_ost_player1).w,a1		
		moveq	#status_p1_platform_bit,d6
		pushr.l	d1-d4					; back up registers so we can use them again for the sidekick
		bsr.w	.run_action				; run action for main character	(could be bsr.s)	
		popr.l	d1-d4					; restore registers
		lea	ost_cage_p2_routine(a0),a2		; (a2) = secondary routine counter for sidekick
		lea	(v_ost_player2).w,a1
		moveq	#status_p2_platform_bit,d6
		bsr.w	.run_action				; run action for sidekick (could be bsr.s)	
		lea	(Ani_Cage).l,a1
		jsrto	AnimateSprite,JmpTo10_AnimateSprite
		jmpto	DespawnObject,JmpTo29_DespawnObject
; ===========================================================================

.run_action:				
		move.w	(a2),d0					; (a2) = secondary routine counter
		move.w	Cage_ActionIndex(pc,d0.w),d0
		jmp	Cage_ActionIndex(pc,d0.w)
; ===========================================================================
Cage_ActionIndex:	index offset(*),,2
		ptr Cage_Detect					; 0 
		ptr Cage_Active					; 2
		ptr Cage_Ignore					; 4
; ===========================================================================

Cage_Detect:				
		tst.b	ost_obj_control(a1)			; is character already in the cage?
		bne.w	.return					; if so, branch
		tst.b	ost_subtype(a0)				; is it a slot machine cage?
		beq.s	.chkcollision				; if not, branch
		tst.w	(f_slot_use).w				; is the slot machine already running?
		bne.s	.return					; if so, branch

	.chkcollision:				
		jsrto	SolidObject_NoRenderChk_SingleCharacter,JmpTo7_SolidObject_NoRenderChk_SingleCharacter ; check for collision even if cage is off-screen
		tst.w	d4								
		bpl.s	.return					; branch if character did not collide with top or bottom of cage
	
	;.catch_player:	
		move.w	ost_x_pos(a0),ost_x_pos(a1)		; position character inside the cage
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#0,ost_x_vel(a1)			; zero their movement
		move.w	#0,ost_y_vel(a1)
		move.w	#0,ost_inertia(a1)
		move.b	#$81,ost_obj_control(a1)		; lock their controls
		bset	#status_jump_bit,ost_primary_status(a1)
		move.b	#$E,ost_height(a1)			
		move.b	#7,ost_width(a1)
		move.b	#2,ost_anim(a1)				; use rolling animation
		move.b	#id_Ani_Cage_Flash,ost_anim(a0)		; make cage flash
		addq.w	#2,(a2)+				; go to Cage_Active next
		move.w	#(60*2),(a2)				; player stays in cage for 2 seconds; (a2) = player's timer
		move.w	a1,ost_cage_player(a0)			; player is now parent of this object
		tst.b	ost_subtype(a0)				; is it a slot machine cage?
		beq.s	.return					; if not, exit
		cmpi.b	#id_Slot_Null,(v_slot_routine).w	; is the slot machine set to the null routine?
		bne.s	.return					; if not, exit; machine is already in use
		move.b	#id_Slot_Start,(v_slot_routine).w	; start the slot machine			
		clr.w	ost_cage_prize_angle(a0)		; clear prize spawn angle
		move.w	#-1,(f_slot_use).w			; set slot machine flag
		move.w	#-1,ost_cage_bombcount(a0)		; not sure what this is for

	.return:				
		rts	
; ===========================================================================

Cage_GiveSlotReward:				
		move.w	(v_slot_reward).w,d0			; get reward from slot machine
		bpl.w	Cage_GiveRings				; branch if it's rings
		tst.w	ost_cage_bombcount(a0)						
		bpl.s	Cage_GivePenalty			; branch if flag is not set
		move.w	#100,ost_cage_bombcount(a0)		; pelt character with 100 bombs


	Cage_GivePenalty:				
		tst.w	ost_cage_bombcount(a0)			; are there more bombs to spawn?
		beq.w	.chkbombcount				; if not, branch
		btst	#0,(v_frame_counter_low).w
		beq.w	.return					; spawn a bomb every other frame
		cmpi.w	#$10,ost_cage_childcount(a0)			
		bcc.w	.return					; spawn no more than 16 bombs at once
		jsrto	FindFreeObj,JmpTo10_FindFreeObj		; find free OST slot
		bne.w	.return					; branch if not found
		_move.b	#id_BombPenalty,ost_id(a1)		; load bomb penalty object
		move.l	#Map_BombPenalty,ost_mappings(a1)
		move.w	#tile_Nem_BombPenalty,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo6_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$10,ost_displaywidth(a1)
		move.b	#4,ost_priority(a1)
		move.w	#30,ost_casinobmb_display_delay(a1)	; delay display for 30 frames
		move.w	ost_cage_prize_angle(a0),ost_casinobmb_angle(a1) ; set spawn angle			
		addi.w	#$90,ost_cage_prize_angle(a0)		; increment angle
		move.w	ost_x_pos(a0),ost_casinobmb_machine_x_pos(a1) ; set location of slot machine that spawned bomb
		move.w	ost_y_pos(a0),ost_casinobmb_machine_y_pos(a1)
		move.w	ost_casinobmb_angle(a1),d0		; get spawn angle of bomb
		jsrto	CalcSine,JmpTo12_CalcSine		; convert to sine and cosine
		asr.w	#1,d1					; divide cosine by 2
		add.w	ost_casinobmb_machine_x_pos(a1),d1	; add x pos of cage					
		move.w	d1,ost_casinobmb_x_pos(a1)		; result is initial x pos of the bomb
		move.w	d1,ost_x_pos(a1)
		asr.w	#1,d0					; divide sine by 2
		add.w	ost_casinobmb_machine_y_pos(a1),d0	; add y pos of cage
		move.w	d0,ost_casinobmb_y_pos(a1)		; result is initial y pos of the bomb
		move.w	d0,ost_y_pos(a1)
		lea	ost_cage_childcount(a0),a2
		move.l	a2,ost_casinobmb_childcnt_ptr(a1)	; set pointer to cage's child counter
		move.w	ost_cage_player(a0),ost_casinobmb_player(a1) ; parent of cage is also parent of bomb
		addq.w	#1,ost_cage_childcount(a0)		; add to child counter
		subq.w	#1,ost_cage_bombcount(a0)		; deincrement number of bombs remaining

	.chkbombcount:				
		tst.w	ost_cage_childcount(a0)			; have all bombs despawned?
		beq.w	Cage_ReleasePlayer			; if so, branch

	.return:				
		addq.w	#1,(v_casinobmb_snd_delay).w		; increment sound delay counter 
		rts	
; ===========================================================================


		
Cage_GiveRings:				
		beq.w	.chkringcount				; branch if there are no more rings to spawn
		btst	#0,(v_frame_counter_low).w
		beq.w	.return					; spawn a ring every other frame
		cmpi.w	#$10,ost_cage_childcount(a0)
		bcc.w	.return					; spawn no more than 16 rings at once
		jsrto	FindFreeObj,JmpTo10_FindFreeObj		; find free OST slot
		bne.w	.return					; branch if not found
		_move.b	#id_RingPrize,ost_id(a1)		; load ring prize object
		move.l	#Map_Ring,ost_mappings(a1)
		move.w	#tile_Nem_Ring+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo6_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#3,ost_priority(a1)
		move.b	#8,ost_displaywidth(a1)
		move.w	#26,ost_casinoprz_display_delay(a1)	; delay display for 26 frames
		move.w	ost_cage_prize_angle(a0),ost_casinoprz_angle(a1) ; set spawn angle			
		addi.w	#$89,ost_cage_prize_angle(a0)		; increment angle
		move.w	ost_x_pos(a0),ost_casinoprz_machine_x_pos(a1) ; set location of slot machine that spawned bomb
		move.w	ost_y_pos(a0),ost_casinoprz_machine_y_pos(a1)
		move.w	ost_casinoprz_angle(a1),d0		; get spawn angle of ring
		jsrto	CalcSine,JmpTo12_CalcSine		; convert to sine and cosine
		asr.w	#1,d1					; divide cosine by 2
		add.w	ost_casinoprz_machine_x_pos(a1),d1	; add x pos of cage					
		move.w	d1,ost_casinoprz_x_pos(a1)		; result is initial x pos of the ring
		move.w	d1,ost_x_pos(a1)	
		asr.w	#1,d0					; divide sine by 2
		add.w	ost_casinoprz_machine_y_pos(a1),d0	; add y pos of cage
		move.w	d0,ost_casinoprz_y_pos(a1)		; result is initial y pos of the ring
		move.w	d0,ost_y_pos(a1)
		lea	ost_cage_childcount(a0),a2
		move.l	a2,ost_casinoprz_childcnt_ptr(a1)	; set pointer to cage's child counter
		move.w	ost_cage_player(a0),ost_casinoprz_player(a1) ; parent of cage is also parent of ring
		addq.w	#1,ost_cage_childcount(a0)		; add to child counter
		subq.w	#1,(v_slot_reward).w			; deincrement number of rings remaining

	.chkringcount:				
		tst.w	ost_cage_childcount(a0)			; have all rings despawned?
		beq.s	Cage_ReleasePlayer			; if so, branch

	.return:				
		rts	
; ===========================================================================

Cage_Active:				
		tst.b	ost_render(a0)				; is cage on-screen?
		bpl.s	Cage_ReleasePlayer			; if not, branch
		tst.b	ost_subtype(a0)				; is it a slot machine cage?
		beq.s	.chkpoints				; if not, branch
		move.w	a1,ost_cage_player(a0)		
		cmpi.b	#id_Slot_Null,(v_slot_routine).w	; is slot set to null routine?
		beq.w	Cage_GiveSlotReward			; is so, branch
		move.b	(v_vblank_counter_byte).w,d0		; get byte that increments every frame
		andi.w	#$F,d0
		bne.s	.skip_sound				
		move.w	#sfx_SlotMachine,d0				
		jsr	PlaySound				; play 'ding' sound every 16 frames (could be jmp)

	.skip_sound:				
		rts	
; ===========================================================================

.chkpoints:				
		subq.w	#1,2(a2)				; deincrement timer
		bpl.s	Cage_GivePoints				; branch if time remains

Cage_ReleasePlayer:				
		move.w	#0,ost_cage_childcount(a0)
		move.b	#id_Ani_Cage_Idle,ost_anim(a0)
		move.b	#0,ost_obj_control(a1)			; unlock player's controls
		bclr	d6,ost_primary_status(a0)		; clear cage's platform flag
		bclr	#status_platform_bit,ost_primary_status(a1)
		bset	#status_air_bit,ost_primary_status(a1)
		move.w	#$400,ost_y_vel(a1)			; make character fall from cage
		addq.w	#2,(a2)+				; go to Cage_Ignore next	
		move.w	#30,(a2)				; character will not be recaught in cage for 30 frames
		rts	
; ===========================================================================

Cage_GivePoints:				
		move.w	2(a2),d0				; get timer
		andi.w	#$F,d0
		bne.s	.return					; play 'ding' sound and give 100 points every 16th frame
		move.w	#sfx_SlotMachine,d0	
		jsr	PlaySound
		moveq	#100/10,d0
		movea.w	a1,a3
		jsr	AddPoints2				; add 100 points to player's score			
		jsrto	FindFreeObj,JmpTo10_FindFreeObj		; find free OST slot
		bne.s	.return					; branch if not found
		_move.b	#id_Points,ost_id(a1)			; load points object
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#id_Frame_Points_100,ost_frame(a1)

	.return:				
		rts	
; ===========================================================================

Cage_Ignore:				
		subq.w	#1,2(a2)				; deincrement timer
		bpl.s	.return					; branch if time remains
		clr.w	(a2)					; character can now be caught by cage again
		tst.b	ost_subtype(a0)				; is it a slot machine cage?
		beq.s	.return					; if not, exit
		clr.w	(f_slot_use).w				; clear slot use flag

	.return:				
		rts	
; ===========================================================================
Ani_Cage:	index offset(*)
		ptr Ani_Cage_Idle				; 0 
		ptr Ani_Cage_Flash				; 1

Ani_Cage_Idle:	
		dc.b $F
		dc.b id_Frame_Cage_Dark
		dc.b afEnd

Ani_Cage_Flash:
		dc.b 1
		dc.b id_Frame_Cage_Lit
		dc.b id_Frame_Cage_Dark
		dc.b afEnd
		even

; ===========================================================================

		include "mappings/sprite/CNZ Pinball Cages.asm"
		
; ===========================================================================
; ---------------------------------------------------------------------------
; Psuedoobject that runs the CNZ slot machines. Unlike normal objects,
; this draws the graphics before running the code.
; Offset constants are defined in RAM Addresses.asm.
; ---------------------------------------------------------------------------
SlotMachine:				
		lea	(slot_machine_vars).w,a4
		moveq	#0,d0
		_move.b	slot_primary_routine(a4),d0
		jmp	SlotMachine_Index(pc,d0.w)
; ===========================================================================

SlotMachine_Index: bra_index
		braptr	Slot_Init				; 0
		braptr	Slot_Ready				; 4
		braptr	Slot_Start				; 8
		braptr	Slot_SpeedUp				; $C
		braptr	Slot_Run				; $10
		braptr	Slot_Finished				; $14
		id_Slot_Null:	equ offset(*)-index_start	
		rts						; $18

		; IDs for slot faces
		rsset 0		
id_Slot_Sonic:		rs.b 1					; 0
id_Slot_Tails:		rs.b 1					; 1
id_Slot_Robotnik:	rs.b 1					; 2
id_Slot_Jackpot:	rs.b 1					; 3
id_Slot_Ring:		rs.b 1					; 4
id_Slot_Bar:		rs.b 1					; 5		
; ===========================================================================
; ------------------------------------------------------------------------------
; Subroutine to initialize the slot machine and load the initial faces
; during level load
; ------------------------------------------------------------------------------
Slot_Init:				
		movea.l	a4,a1			
		moveq	#(sizeof_slot_machine_vars/2)-1,d0	; $12 bytes

	.loop:				
		clr.w	(a1)+					; clear the slot machine variables
		dbf	d0,.loop
		
		; Randomize the start of the slots.
		move.b	(v_vblank_counter_byte).w,d0		; frame counter is used as a psuedorandom seed
		move.b	d0,slot1_index(a4)			; only use lowest three bits
		ror.b	#3,d0					; rotate to the next three bits
		move.b	d0,slot2_index(a4)			; use the new lowest three
		ror.b	#3,d0					; rotate again (only two bits now)
		move.b	d0,slot3_index(a4)			; use the remaining two
		move.b	#8,slot1_offset(a4)			; set initial speeds and offsets				
		move.b	#8,slot2_offset(a4)			; this entire block could be optimized to 'moveq #8,d0' and a series of 'move.b d0,destination'
		move.b	#8,slot3_offset(a4)
		move.b	#8,slot1_speed(a4)
		move.b	#8,slot2_speed(a4)
		move.b	#8,slot3_speed(a4)
		move.b	#1,slot_timer(a4)			; roll each slot once
		_addq.b	#4,slot_primary_routine(a4)		; go to Slot_Ready next
		rts	
		
; ===========================================================================

Slot_Ready:				
		bsr.w	Slot_Draw				; draw the slots
		tst.b	slot_timer(a4)				; are we still rolling?
		beq.s	.done					; if not, branch
		rts	

	.done:				
		_move.b	#id_Slot_Null,slot_primary_routine(a4)	; set null routine
		clr.w	slot1_speed(a4)				; clear slot speeds
		clr.w	slot2_speed(a4)
		clr.w	slot3_speed(a4)
		rts	
; ===========================================================================

Slot_Start:				
		move.b	(v_vblank_counter_byte).w,d0		; use low byte of frame counter as pseudorandom seed
		andi.b	#7,d0					; only need lowest three bits
		subq.b	#4,d0					; three pairs of these two instructions can be optimized to 'addi.b $2C,d0'
		addi.b	#$30,d0					; 
		move.b	d0,slot1_speed(a4)			; start speed for slot 1
		move.b	(v_vblank_counter_byte).w,d0		; use low byte of frame counter as pseudorandom seed
		rol.b	#4,d0					; only need top nybble					
		andi.b	#7,d0					; discard sign bit
		subq.b	#4,d0
		addi.b	#$30,d0					; add $2C
		move.b	d0,slot2_speed(a4)			; start speed for slot 2
		move.b	(v_vblank_counter_word).w,d0		; use high byte of frame counter as pseudorandom seed
		andi.b	#7,d0					; only need lowest three bits
		subq.b	#4,d0							
		addi.b	#$30,d0					; add $2C
		move.b	d0,slot3_speed(a4)			; start speed for slot 3
		move.b	#2,slot_timer(a4)			; roll each slot twice with these settings
		clr.b	slot_index(a4) 
		clr.b	slot1_rout(a4)
		clr.b	slot2_rout(a4)
		clr.b	slot3_rout(a4)
		_addq.b	#4,slot_primary_routine(a4)		; go to Slot_SpeedUp next
		move.b	(v_vblank_counter_byte).w,d0		; use low byte of frame counter as pseudorandom seed
		ror.b	#3,d0					; shuffle it a bit
		lea	(Slot_TargetValues).l,a2		; could be PC relative

	.loop:				
		sub.b	(a2),d0					; subtract value in array from seed value
		bcs.s	.islower				; branch if difference is lower than array value
		addq.w	#3,a2					; otherwise, advance 3 bytes..
		bra.s	.loop					; ...and loop

	.islower:				
		cmpi.b	#-1,(a2)				; was the previous value -1?
		beq.s	.end_of_array				; if so, branch (we've reached the end of the TargetValues array)
		move.b	1(a2),slot_targ1(a4)			; set target values using two sequential bytes from the TargetValuesarray
		move.b	2(a2),slot_targ23(a4)
		rts	
; ===========================================================================
.end_of_array:	
		; Select two bytes at random from the TargetValues array			
		move.b	d0,d1					; copy seed value
		andi.w	#7,d1					; lowest three bits are index for slot 1
		lea	(SlotSequence1).l,a1
	if FixBugs
		move.b	(a1,d1.w),slot_targ1(a4)		; set slot 1 target
	else
		; This should be using d1 as the index, not d0!
		move.b	(a1,d0.w),slot_targ1(a4)		; set slot 1 target
	endc
		ror.b	#3,d0					; shuffle seed a bit
		move.b	d0,d1	
		andi.w	#7,d1					; lowest three bits are index for slot 2
		lea	(SlotSequence2).l,a1
		move.b	(a1,d1.w),d2				; get slot 2 target
		lsl.b	#4,d2					; move to high nybble
		ror.b	#3,d0					; shuffle seed again
		andi.w	#7,d0					; lowest three bits are index for slot 3
		lea	(SlotSequence3).l,a1	
		or.b	(a1,d0.w),d2				; get slot 3 target
		move.b	d2,slot_targ23(a4)			; set targets for slots 2 and 3
		rts	
; ===========================================================================

Slot_SpeedUp:				
		bsr.w	Slot_Draw				; draw the slots
		tst.b	slot_timer(a4)				; has timer reached zero?
		beq.s	.timeleft				; if so, branch
		rts	

	.timeleft:				
		addi.b	#$30,slot1_speed(a4)			; increase all slot speeds
		addi.b	#$30,slot2_speed(a4)
		addi.b	#$30,slot3_speed(a4)
		move.b	(v_vblank_counter_byte).w,d0		; use low byte of frame counter as pseudorandom seed
		andi.b	#$F,d0					; only need low nybble
		addi.b	#$C,d0					; add $C
		move.b	d0,slot_timer(a4)			; set new timer
		clr.b	2(a4)					; clear otherwise unused variable
		_addq.b	#4,slot_primary_routine(a4)		; go to Slot_Run next
		rts	
; ===========================================================================

Slot_Run:				
		bsr.w	Slot_Draw				; draw the slots
		cmpi.b	#id_Slot_Done,slot1_rout(a4)		; is slot done?
		bne.s	.notdone				; branch if not
		cmpi.b	#id_Slot_Done,slot2_rout(a4)		; is slot done?
		bne.s	.notdone				; branch if not
		cmpi.b	#id_Slot_Done,slot3_rout(a4)		; is slot done?
		beq.w	Slot_Finished				; branch if so

	.notdone:				
		moveq	#0,d0
		move.b	slot_index(a4),d0			; get current slot
		lea	slot_data(a4),a1			; a1 = start of slot data
		adda.w	d0,a1					; add slot index to get pointer to current slot data
		lea	(SlotSequence1).l,a3			; a3 = pointer to slot sequences
		add.w	d0,d0					; double current slot index
		adda.w	d0,a3					; add to a3 to get current slot sequence
		moveq	#0,d0
		move.b	slot_subroutine(a1),d0
		jmp	Slot_Run_Index(pc,d0.w)
; ===========================================================================

Slot_Run_Index: bra_index
		braptr	Slot_RunNormal				; 0
		braptr	Slot_NearTarget				; 4
		braptr	Slot_AtTarget				; 8
		braptr	Slot_Done				; $C
; ===========================================================================

Slot_GetSlotTarget:				
		move.w	slot_targs(a4),d1			; d1 = target slot faces
		move.b	slot_index(a4),d0			; get current slot
		beq.s	.is_slot_1				; branch if it's slot 1
		lsr.w	d0,d1					; shift slot targets 2 and 3 to correct position	

	.is_slot_1:				
		andi.w	#7,d1					; only 6 slot faces
		cmpi.b	#id_Slot_Bar,d1				; have we gone above bar?
		bgt.s	.wrap_slot				; if so, branch
		rts	

	.wrap_slot:				
		subq.b	#2,d1					; wrap back to ring or bar
		rts	
; ===========================================================================

Slot_ChangeTarget:				
		move.w	#$FFF0,d2				; bitmask to keep faces in high byte
		andi.w	#$F,d1					; d1 = new target
		move.b	slot_index(a4),d0			; get current slot
		beq.s	.is_slot_1				; branch if it's slot 1
		lsl.w	d0,d1					; shift new target to correct position
		rol.w	d0,d2					; shift face bitmask to correct position

	.is_slot_1:				
		and.w	d2,slot_targs(a4)			; clear slot to be replaced
		or.w	d1,slot_targs(a4)			; replace with new target value
		andi.w	#$777,slot_targs(a4)			; slots are only 0-7
		rts	
; ===========================================================================

Slot_RunNormal:				
		tst.b	slot_index(a4)				; is this slot 1?
		bne.s	.not_slot_1				; if not, branch
		tst.b	slot_timer(a4)				; has time run out (below zero)? 
		bmi.s	.time_zero_or_prev_stopped		; if not, branch
		rts	

	.not_slot_1:				
		cmpi.b	#id_Slot_AtTarget,slot1_rout-slot2_index(a1) ; has previous slot stopped?
		bge.s	.time_zero_or_prev_stopped		; if so, branch
		rts	
; ===========================================================================

.time_zero_or_prev_stopped:				
		bsr.s	Slot_GetSlotTarget			; get current slot target	
		move.w	(a1),d0					; get current slot index/offset
		subi.w	#20*8,d0				; subtract 20 lines (2.5 tiles) from it
		lsr.w	#8,d0					; get effective slot index
		andi.w	#7,d0					; only need lowest three bits
		move.b	(a3,d0.w),d0				; get slot pic ID from sequence data
		cmp.b	d1,d0					; are we close to target?
		beq.s	.near_target				; if so, branch
		rts	

	.near_target:			
		addq.b	#4,slot_subroutine(a1)			; go to Slot_NearTarget next
		move.b	#$60,slot_speed(a1)			; decrease slot speed
		rts	
; ===========================================================================

Slot_NearTarget:				
		bsr.s	Slot_GetSlotTarget			; get current slot target	
		move.w	(a1),d0					; get current slot index/offset
		addi.w	#30*8,d0				; add 30 lines (3.75 tiles) to it
		andi.w	#$700,d0				; limit to 8 pics
		lsr.w	#8,d0					; get effective slot index
		move.b	(a3,d0.w),d0				; get slot pic ID from sequence data
		cmp.b	d0,d1					; are we close to target?
		beq.s	.at_target				; if so, branch
		cmpi.b	#$20,slot_speed(a1)			; is slot speed greater than $20?
		bls.s	.no_speed_change			; if not, branch
		subi.b	#$C,slot_speed(a1)			; decrease slot speed

	.no_speed_change:				
		cmpi.b	#$18,slot_speed(a1)			; is slot speed $18 or less?
		bgt.s	.chkoffset				; if not, branch
		rts	

	.chkoffset:				
		cmpi.b	#$80,slot_offset(a1)			; is offset $80 or lesS?
		bls.s	.reduce_speed				; if so, branch
		rts	

	.reduce_speed:				
		subq.b	#2,slot_speed(a1)			; decrease slot speed
		rts	
; ===========================================================================

.at_target:				
		move.w	(a1),d0					; get current slot index/offset
		addi.w	#16*8,d0				; subtract 16 lines (2 tiles) from it
		move.w	d0,d1					; copy to d1
		andi.w	#$700,d1				; limit to 8 pics
		subi.w	#2*8,d1					; subtract 2 lines (1/4 tile) from it
		move.w	d1,(a1)					; store new index/offset
		lsr.w	#8,d0					; use previous index value 
		andi.w	#7,d0					; limit to 8 pics
		move.b	(a3,d0.w),d1				; get slot pic ID from sequence data
		bsr.w	Slot_ChangeTarget			; set slot index to pic ID in lieu of sequence index
		move.b	#-8,slot_speed(a1)			; rotate slowly backwards
		addq.b	#4,slot_subroutine(a1)			; go to Slot_AtTarget next
		rts	
; ===========================================================================

Slot_AtTarget:				
		tst.b	slot_offset(a1)				; is offset 0?
		beq.s	.stop_slot				; if so, branch
		rts	

	.stop_slot:				
		clr.b	slot_speed(a1)				; stop slot
		addq.b	#4,slot_subroutine(a1)			; go to Slot_Done next
		rts	
; ===========================================================================

Slot_Done:				
		rts	
; ===========================================================================

Slot_Finished:				
		clr.w	slot1_speed(a4)				; stop all slots
		clr.w	slot2_speed(a4)
		clr.w	slot3_speed(a4)
		clr.b	slot_timer(a4)				; stop drawing the slots
		bsr.w	Slot_ChooseReward			; determine the winnings
		_move.b	#id_Slot_Null,slot_primary_routine(a4)	; we are done until next time		
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to draw the slot machine faces
; ---------------------------------------------------------------------------
Slot_Draw:				
		moveq	#0,d0
		move.b	slot_index(a4),d0			; d0 = index of slot to draw	
		lea	slot_data(a4),a1			; a1 = start of slot data
		adda.w	d0,a1					; add slot index to get pointer to current slot data
		lea	(SlotSequence1).l,a3			; first slot sequence
		adda.w	d0,a3					; add slot index twice
		adda.w	d0,a3
		jmp	Slot_Draw_Index(pc,d0.w)
; ===========================================================================

Slot_Draw_Index:
		bra.w	Slot_Draw1				; 0
		bra.w	Slot_Draw2				; 4
		; index 8 branches directly to the start of Slot_DrawSlot3
; ===========================================================================
Slot_Draw3:
		clr.b	slot_index(a4)				; go to Slot_DrawSlot1 next
		subq.b	#1,slot_timer(a4)			; deincrement timer
		move.w	#vram_SlotPics_3,d2			; DMA destination
		bra.s	Slot_DrawChk
; ===========================================================================

Slot_Draw1:				
		addq.b	#4,slot_index(a4)			; go to Slot_DrawSlot2 next
		move.w	#vram_SlotPics_1,d2			; DMA destination
		bra.w	Slot_DrawChk				; could be optimized to bra.s
; ===========================================================================

Slot_Draw2:				
		addq.b	#4,slot_index(a4)			; go to Slot_DrawSlot3 next
		move.w	#vram_SlotPics_2,d2			; DMA destination
		; continue directly into Slot_DrawChk

Slot_DrawChk: 			
		move.w	(a1),d0					; get last pixel offset
		move.b	slot_speed(a1),d1			; get slot rotation speed
		ext.w	d1					; extend to word
		sub.w	d1,(a1)					; modify pixel offset
		move.w	(a1),d3					; get current pixel offset
		andi.w	#$7F8,d0				; only need bits 3-10 of both
		andi.w	#$7F8,d3
		cmp.w	d0,d3					; are they equal?
		bne.s	.update_slot_art			; if not, branch
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to update slot machine art in the 16x16 block table, and queue
; a DMA transfer to update the copy in VRAM
; ---------------------------------------------------------------------------
.update_slot_art:
		; Copy new slot art to the block table, and update in VRAM via DMA		
		bsr.w	.get_pixel_row				; get pointer to pixel row	
		lea	(v_16x16_tiles+$1000).w,a1		; destination	
		
		move.w	#(16*2)-1,d1				; each slot pic is 4 16x16 blocks, so 32 pixel rows to update


	.pixel_row_loop:
		; a2 = current pixel row in Art_CNZSlotPics				
		move.l	$80(a2),$80(a1)				; copy row for second column
		move.l	$100(a2),$100(a1)			; copy row for third column
		move.l	$180(a2),$180(a1)			; copy row for fourth column
		move.l	(a2)+,(a1)+				; copy row for first column and advance pointers
		addq.b	#8,d3					; increment offset by 8
		bne.s	.notzero				; branch if not zero
		addi.w	#$100,d3				; advance to next slot picture
		andi.w	#$700,d3				; limit to 8 pictures
		bsr.w	.get_pixel_row				; get pointer for next pixel row

	.notzero:				
		dbf	d1,.pixel_row_loop			; loop for 32 pixel rows
		
		move.l	#(v_16x16_tiles+$1000)&$FFFFFF,d1	; DMA source
		tst.w	(f_two_player).w			; is it two-player mode?
		beq.s	.not2P					; if not, branch
		addi.w	#vram_SlotPics_1_2p-vram_SlotPics_1,d2	; adjust DMA destination

	.not2P:				
		move.w	#sizeof_SlotPic/2,d3			; DMA length in words
		jsr	(AddDMA).l
		rts	
; ===========================================================================

.get_pixel_row:				
		move.w	d3,d0					; d0 = pixel offset into slot picture
		lsr.w	#8,d0					; convert offset into index
		andi.w	#7,d0					; limit to 8 pics
		move.b	(a3,d0.w),d0				; get slot pic ID from sequence data
		andi.w	#7,d0					; only lower 3 bits; leaves space for 2 more images
		ror.w	#7,d0					; equal to shifting left 9 places
		lea	(Art_CNZSlotPics).l,a2	
		adda.w	d0,a2					; a2 = pointer to first tile of slot picture
		move.w	d3,d0
		andi.w	#$F8,d0					; strip high word
		lsr.w	#1,d0					; convert to bytes
		adda.w	d0,a2					; a2 = pointer to desired pixel row
		rts	
; ===========================================================================

Slot_ChooseReward:				
		move.b	slot_targ23(a4),d2			; get target of slots 2 and 3
		move.b	d2,d3					
		andi.w	#$F0,d2					; d2 = target of slot 2
		lsr.w	#4,d2					; shift slot 2 to low nybble 
		andi.w	#$F,d3					; d3 = target of slot 3
		moveq	#0,d0
		cmp.b	slot_targ1(a4),d2			; are slots 1 and 2 equal?
		bne.s	.nomatch_1_2				; if not, branch
		addq.w	#4,d0

	.nomatch_1_2:				
		cmp.b	slot_targ1(a4),d3			; are slots 1 and 3 equal?
		bne.s	.nomatch_1_3				; branch if not
		addq.w	#8,d0

	.nomatch_1_3:				
		jmp	Slot_RewardIndex(pc,d0.w)
; ===========================================================================

Slot_RewardIndex:
		bra.w	Slot_Unmatched1				; 0
		bra.w	Slot_Match12				; 4
		bra.w	Slot_Match13				; 8
		; index $C goes straight to Slot_TripleMatch

Slot_TripleMatch:
		move.w	d2,d0
		bsr.w	Slot_GetReward
		move.w	d0,slot_targs(a4)			; store reward 
		rts	
; ===========================================================================

Slot_Match13:				
		cmpi.b	#id_Slot_Jackpot,d3			; is slot 3 a jackpot?
		bne.s	.notjackpot				; if not, branch
		move.w	d2,d0					; slot 2 is reward index
		bsr.w	Slot_GetReward
		bsr.w	Slot_QuadrupleReward
		move.w	d0,slot_targs(a4)
		rts	

	.notjackpot:				
		cmpi.b	#id_Slot_Jackpot,d2			; is slot 2 a jackpot?
		bne.w	Slot_Unmatched1				; if not, branch
		move.w	d3,d0					; slot 3 is reward index
		bsr.w	Slot_GetReward
		bsr.w	Slot_DoubleReward
		move.w	d0,slot_targs(a4)			; store reward
		rts	
; ===========================================================================

Slot_Match12:				
		cmpi.b	#id_Slot_Jackpot,d2			; is slot 2 a jackpot?
		bne.s	.notjackpot				; if not, branch
		move.w	d3,d0					; slot 3 is reward index
		bsr.s	Slot_GetReward
		bsr.w	Slot_QuadrupleReward
		move.w	d0,slot_targs(a4)			; store reward
		rts	

	.notjackpot:				
		cmpi.b	#id_Slot_Jackpot,d3
		bne.w	Slot_Unmatched1
		move.w	d2,d0					; slot 2 is reward index
		bsr.s	Slot_GetReward
		bsr.w	Slot_DoubleReward
		move.w	d0,slot_targs(a4)			; store reward
		rts	
; ===========================================================================

Slot_Unmatched1:				
		cmp.b	d2,d3					; are slots 2 and 3 equal?
		bne.s	Slot_CheckBars				; if not, branch
		cmpi.b	#id_Slot_Jackpot,slot_targ1(a4)		; is slot 1 a jackpot?
		bne.s	.notjackpot				; if not, branch
		move.w	d2,d0					; slot 2 is reward index
		bsr.s	Slot_GetReward
		bsr.w	Slot_DoubleReward
		move.w	d0,slot_targs(a4)			; store reward
		rts	

	.notjackpot:				
		cmpi.b	#id_Slot_Jackpot,d2			; is slot 1 a jackpot?
		bne.s	Slot_CheckBars				; if not, branch
		move.b	slot_targ1(a4),d0			; slot 1 is reward index
		andi.w	#$F,d0					; (after stripping the high nybble)
		bsr.s	Slot_GetReward
		bsr.w	Slot_QuadrupleReward
		move.w	d0,slot_targs(a4)			; store reward
		rts	
; ===========================================================================

Slot_CheckBars:				
		moveq	#2,d1					; number of rings per bar
		moveq	#0,d0					; 0 if no bars are found
		cmpi.b	#id_Slot_Bar,slot_targ1(a4)		; is slot 1 a bar?
		bne.s	.notslot1				; if not, branch
		add.w	d1,d0					; gain 2 rings

	.notslot1:				
		cmpi.b	#id_Slot_Bar,d2				; is slot 2 a bar?
		bne.s	.notslot2				; if not, branch
		add.w	d1,d0					; gain 2 rings

	.notslot2:				
		cmpi.b	#id_Slot_Bar,d3				; is slot 3 a bar?
		bne.s	.notslot3				; if not, branch
		add.w	d1,d0					; gain 2 rings

	.notslot3:				
		move.w	d0,slot_targs(a4)
		
	if FixBugs
		; For bars, the code past this line is useless. There should be an rts here.
		rts
	endc

; ===========================================================================	

Slot_GetReward:				
		add.w	d0,d0					; double to get index
		lea	(Slot_RingRewards).l,a2			; ring reward array (could be PC-relative)
		move.w	(a2,d0.w),d0				; get ring reward
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; One-instruction subroutines to double and quadruple ring rewards. 
; It would be much faster to simply place these instructions in-line instead 
; of branching to them.
; ----------------------------------------------------------------------------

Slot_QuadrupleReward:				
		asl.w	#2,d0
		rts	

Slot_DoubleReward:				
		add.w	d0,d0
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Slot machine ring rewards
; -1 is a flag indicating player will receive a bomb penalty instead.
; ----------------------------------------------------------------------------

Slot_RingRewards:	
		dc.w   30,  25,  -1, 150,  10,  20

; ----------------------------------------------------------------------------
; Slot machine target values

; Each byte represents the final positions for two slot faces: one in each
; nybble. Note that several of these values exceed 5; these are reduced to 
; 4 or 5 by Slot_GetSlotTarget if so required. Depending on the frame counter 
; seed, either two bytes after a multiple of 3 up to $F (e.g., bytes 4 and 5)
; are used, or two bytes anywhere in the array are selected at random.
; ----------------------------------------------------------------------------	
				
Slot_TargetValues:		
		dc.b id_Slot_Sonic<<4|(id_Slot_Sonic|8)		; 0
		dc.b id_Slot_Sonic<<4|id_Slot_Jackpot
		dc.b id_Slot_Jackpot<<4|id_Slot_Jackpot
		dc.b id_Slot_Tails<<4|id_Slot_Robotnik		; 3
		dc.b id_Slot_Sonic<<4|id_Slot_Sonic
		dc.b id_Slot_Sonic<<4|id_Slot_Sonic
		dc.b id_Slot_Tails<<4|id_Slot_Robotnik		; 6
		dc.b id_Slot_Sonic<<4|id_Slot_Tails
		dc.b id_Slot_Tails<<4|id_Slot_Tails
		dc.b id_Slot_Robotnik<<4|id_Slot_Ring		; 9
		dc.b id_Slot_Sonic<<4|id_Slot_Robotnik
		dc.b id_Slot_Robotnik<<4|id_Slot_Robotnik
		dc.b id_Slot_Tails<<4|(id_Slot_Ring+$A)		; $C
		dc.b id_Slot_Sonic<<4|id_Slot_Ring
		dc.b id_Slot_Ring<<4|id_Slot_Ring
		dc.b id_Slot_Tails<<4|(id_Slot_Ring+$A)		; $F
		dc.b id_Slot_Sonic<<4|id_Slot_Bar
		dc.b id_Slot_Bar<<4|id_Slot_Bar
		dc.b (id_Slot_Bar+$A)<<4|(id_Slot_Bar+$A)	; $12
		dc.b id_Slot_Sonic<<4|(id_Slot_Bar+$A)
		dc.b (id_Slot_Bar+$A)<<4|(id_Slot_Bar+$A)
		rev02even

; ----------------------------------------------------------------------------
; Slot machine face sequences
; ----------------------------------------------------------------------------	

SlotSequence1:
		dc.b id_Slot_Jackpot
		dc.b id_Slot_Sonic
		dc.b id_Slot_Tails
		dc.b id_Slot_Ring
		dc.b id_Slot_Robotnik
		dc.b id_Slot_Bar
		dc.b id_Slot_Ring
		dc.b id_Slot_Tails
		rev02even
		
SlotSequence2:	
		dc.b id_Slot_Jackpot
		dc.b id_Slot_Sonic
		dc.b id_Slot_Tails
		dc.b id_Slot_Ring
		dc.b id_Slot_Robotnik
		dc.b id_Slot_Bar
		dc.b id_Slot_Sonic
		dc.b id_Slot_Robotnik
		rev02even
		
SlotSequence3:	
		dc.b id_Slot_Jackpot
		dc.b id_Slot_Sonic
		dc.b id_Slot_Tails
		dc.b id_Slot_Ring
		dc.b id_Slot_Robotnik
		dc.b id_Slot_Bar
		dc.b id_Slot_Ring
		dc.b id_Slot_Tails
		even
		
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo10_FindFreeObj:				
		jmp	FindFreeObj
JmpTo29_DespawnObject:				
		jmp	DespawnObject
JmpTo10_AnimateSprite:				
		jmp	AnimateSprite
JmpTo6_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo54_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo12_CalcSine:				
		jmp	CalcSine
JmpTo7_SolidObject_NoRenderChk_SingleCharacter:				
		jmp	SolidObject_NoRenderChk_SingleCharacter

		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D7 - CNZ hexagonal bumper
; ----------------------------------------------------------------------------

HexagonalBumper:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2C456(pc,d0.w),d1
		jmp	off_2C456(pc,d1.w)
; ===========================================================================
off_2C456:	
		dc.w loc_2C45A-off_2C456			; 0 
		dc.w loc_2C4AC-off_2C456			; 2
; ===========================================================================

loc_2C45A:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2C626,ost_mappings(a0)
		move.w	#tile_Nem_HexBumper+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo55_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#-$36,$20(a0)
		btst	#0,$22(a0)
		beq.s	loc_2C496
		move.b	#1,$34(a0)

loc_2C496:				
		move.w	ost_x_pos(a0),d0
		move.w	d0,d1
		subi.w	#$60,d0
		move.w	d0,$30(a0)
		addi.w	#$60,d1
		move.w	d1,$32(a0)

loc_2C4AC:				
		move.b	$21(a0),d0
		beq.w	loc_2C57E
		lea	($FFFFB000).w,a1
		bclr	#0,$21(a0)
		beq.s	loc_2C4C2
		bsr.s	loc_2C4D8

loc_2C4C2:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_2C4D0
		bsr.s	loc_2C4D8

loc_2C4D0:				
		clr.b	$21(a0)
		bra.w	loc_2C57E
; ===========================================================================

loc_2C4D8:				
		move.w	ost_x_pos(a0),d1
		move.w	ost_y_pos(a0),d2
		sub.w	ost_x_pos(a1),d1
		sub.w	ost_y_pos(a1),d2
		jsr	(CalcAngle).l
		addi.b	#$20,d0
		andi.w	#$C0,d0	
		cmpi.w	#$40,d0
		beq.s	loc_2C516
		cmpi.w	#$80,d0	
		beq.s	loc_2C534
		cmpi.w	#$C0,d0	
		beq.s	loc_2C542
		move.w	#-$800,ost_x_vel(a1)
		move.b	#2,$1C(a0)
		bra.s	loc_2C55E
; ===========================================================================

loc_2C516:				
		subi.w	#$200,ost_x_vel(a1)
		tst.w	d1
		bpl.s	loc_2C526
		addi.w	#$400,ost_x_vel(a1)

loc_2C526:				
		move.w	#-$800,ost_y_vel(a1)
		move.b	#1,$1C(a0)
		bra.s	loc_2C55E
; ===========================================================================

loc_2C534:				
		move.w	#$800,ost_x_vel(a1)
		move.b	#2,$1C(a0)
		bra.s	loc_2C55E
; ===========================================================================

loc_2C542:				
		subi.w	#$200,ost_x_vel(a1)
		tst.w	d1
		bpl.s	loc_2C552
		addi.w	#$400,ost_x_vel(a1)

loc_2C552:				
		move.w	#$800,ost_y_vel(a1)
		move.b	#1,$1C(a0)

loc_2C55E:				
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b	$3C(a1)
		move.w	#$B4,d0	
		jmp	PlaySound
; ===========================================================================

loc_2C57E:				
		lea	(off_2C610).l,a1
		jsrto	AnimateSprite,JmpTo11_AnimateSprite
		tst.b	$28(a0)
		beq.w	JmpTo30_DespawnObject
		tst.b	$34(a0)
		beq.s	loc_2C5AE
		move.w	ost_x_pos(a0),d0
		subq.w	#1,d0
		cmp.w	$30(a0),d0
		bne.s	loc_2C5A8
		move.b	#0,$34(a0)

loc_2C5A8:				
		move.w	d0,ost_x_pos(a0)
		bra.s	loc_2C5C4
; ===========================================================================

loc_2C5AE:				
		move.w	ost_x_pos(a0),d0
		addq.w	#1,d0
		cmp.w	$32(a0),d0
		bne.s	loc_2C5C0
		move.b	#1,$34(a0)

loc_2C5C0:				
		move.w	d0,ost_x_pos(a0)

loc_2C5C4:				
		tst.w	(f_two_player).w
		beq.s	loc_2C5CE
		jmpto	DisplaySprite,JmpTo30_DisplaySprite
; ===========================================================================

loc_2C5CE:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_2C5F2
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_2C5F8

loc_2C5F2:				
		jmp	DisplaySprite
; ===========================================================================

loc_2C5F8:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_2C60A
		bclr	#7,2(a2,d0.w)

loc_2C60A:				
		jmp	DeleteObject
		
    if RemoveJmpTos
JmpTo30_DespawnObject:
		jmp	DespawnObject
    endc		
; ===========================================================================
off_2C610:	dc.w byte_2C616-off_2C610			; 0 
		dc.w byte_2C619-off_2C610			; 1
		dc.w byte_2C61F-off_2C610			; 2
byte_2C616:	dc.b  $F,  0,$FF				; 0 
byte_2C619:	dc.b   3,  1,  0,  1,$FD,  0			; 0	
byte_2C61F:	dc.b   3,  2,  0,  2,$FD,  0,  0		; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2C626:				
		dc.w word_2C62C-Map_2C626			; 0
		dc.w word_2C64E-Map_2C626			; 1
		dc.w word_2C670-Map_2C626			; 2
word_2C62C:	dc.w 4			
		dc.w $F009,    0,    0,$FFE8			; 0
		dc.w $F009, $800, $800,	   0			; 4
		dc.w	 9,$1000,$1000,$FFE8			; 8
		dc.w	 9,$1800,$1800,	   0			; 12
word_2C64E:	dc.w 4			
		dc.w $F409,    0,    0,$FFE8			; 0
		dc.w $F409, $800, $800,	   0			; 4
		dc.w  $409,$1000,$1000,$FFE8			; 8
		dc.w  $409,$1800,$1800,	   0			; 12
word_2C670:	dc.w 4			
		dc.w $F009,    0,    0,$FFEC			; 0
		dc.w $F009, $800, $800,	   4			; 4
		dc.w	 9,$1000,$1000,$FFEC			; 8
		dc.w	 9,$1800,$1800,	   4			; 12
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo30_DisplaySprite:				
		jmp	DisplaySprite
JmpTo30_DespawnObject:				
		jmp	DespawnObject
JmpTo11_AnimateSprite:				
		jmp	AnimateSprite
JmpTo55_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D8 - CNZ saucer bumper
; ----------------------------------------------------------------------------

SaucerBumper:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2C6BA(pc,d0.w),d1
		jmp	off_2C6BA(pc,d1.w)
; ===========================================================================
off_2C6BA:	
		dc.w loc_2C6C0-off_2C6BA			; 0 
		dc.w loc_2C6FC-off_2C6BA			; 2
		dc.w loc_2C884-off_2C6BA			; 4
; ===========================================================================

loc_2C6C0:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2C8C4,ost_mappings(a0)
		move.w	#tile_Nem_SaucerBumper+tile_pal3,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo56_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#-$29,$20(a0)
		move.b	$28(a0),d0
		rol.b	#2,d0
		andi.b	#3,d0
		move.b	d0,$1C(a0)

loc_2C6FC:				
		move.b	$21(a0),d0
		bne.w	loc_2C70A
		tst.w	$30(a0)
		beq.s	loc_2C740

loc_2C70A:				
		lea	$30(a0),a4
		tst.b	(a4)
		beq.s	loc_2C716
		subq.b	#1,(a4)
		bra.s	loc_2C724
; ===========================================================================

loc_2C716:				
		lea	($FFFFB000).w,a1
		bclr	#0,$21(a0)
		beq.s	loc_2C724
		bsr.s	loc_2C74E

loc_2C724:				
		addq.w	#1,a4
		tst.b	(a4)
		beq.s	loc_2C72E
		subq.b	#1,(a4)
		bra.s	loc_2C73C
; ===========================================================================

loc_2C72E:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_2C73C
		bsr.s	loc_2C74E

loc_2C73C:				
		clr.b	$21(a0)

loc_2C740:				
		lea	(off_2C89C).l,a1
		jsrto	AnimateSprite,JmpTo12_AnimateSprite
		jmpto	DespawnObject,JmpTo31_DespawnObject
; ===========================================================================

loc_2C74E:				
		move.b	$1A(a0),d0
		subq.b	#3,d0
		beq.s	loc_2C75C
		bcc.s	loc_2C77A
		addq.b	#3,d0
		bne.s	loc_2C77A

loc_2C75C:				
		move.b	#3,$1C(a0)
		move.w	#-$700,ost_y_vel(a1)
		move.w	ost_y_pos(a0),d2
		sub.w	ost_y_pos(a1),d2
		bpl.s	loc_2C776
		neg.w	ost_y_vel(a1)

loc_2C776:				
		bra.w	loc_2C806
; ===========================================================================

loc_2C77A:				
		subq.b	#1,d0
		bne.s	loc_2C7EC
		move.b	#4,$1C(a0)
		move.w	#$20,d3
		btst	#0,$22(a0)
		bne.s	loc_2C794
		move.w	#$60,d3

loc_2C794:				
		move.w	ost_x_vel(a1),d1
		move.w	ost_y_vel(a1),d2
		jsr	(CalcAngle).l
		sub.w	d3,d0
		move.w	d0,d1
		bpl.s	loc_2C7AA
		neg.w	d1

loc_2C7AA:				
		neg.w	d0
		add.w	d3,d0
		cmpi.b	#$40,d1
		bcc.s	loc_2C7BE
		cmpi.b	#$38,d1
		bcs.s	loc_2C7D0
		move.w	d3,d0
		bra.s	loc_2C7D0
; ===========================================================================

loc_2C7BE:				
		subi.w	#$80,d1	
		neg.w	d1
		cmpi.b	#$38,d1
		bcs.s	loc_2C7D0
		move.w	d3,d0
		addi.w	#$80,d0	

loc_2C7D0:				
		jsr	CalcSine
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a1)
		bra.s	loc_2C806
; ===========================================================================

loc_2C7EC:				
		move.b	#5,$1C(a0)
		move.w	#-$700,ost_x_vel(a1)
		move.w	ost_x_pos(a0),d2
		sub.w	ost_x_pos(a1),d2
		bpl.s	loc_2C806
		neg.w	ost_x_vel(a1)

loc_2C806:				
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b	$3C(a1)
		move.w	#$D8,d0	
		jsr	PlaySound
		movea.w	a1,a3
		moveq	#4,d3
		moveq	#1,d0
		subi.w	#tile_pal2,ost_tile(a0)
		bcc.s	loc_2C85C
		addi.w	#tile_pal2,ost_tile(a0)
		move.b	#4,ost_primary_routine(a0)
		lea	(v_cnz_saucer_data).w,a1
		move.b	$28(a0),d1
		andi.w	#$3F,d1
		lea	(a1,d1.w),a1
		addq.b	#1,(a1)
		cmpi.b	#3,(a1)
		bcs.s	loc_2C85C
		moveq	#2,d3
		moveq	#$32,d0

loc_2C85C:				
		jsr	AddPoints2
		jsrto	FindFreeObj,JmpTo11_FindFreeObj
		bne.s	loc_2C87E
		_move.b	#id_Points,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	d3,$1A(a1)

loc_2C87E:				
		move.b	#4,(a4)
		rts	
; ===========================================================================

loc_2C884:				
		lea	(off_2C89C).l,a1
		jsrto	AnimateSprite,JmpTo12_AnimateSprite
		cmpi.b	#3,$1C(a0)
		bcs.w	JmpTo46_DeleteObject
		jmpto	DespawnObject,JmpTo31_DespawnObject
		
    if RemoveJmpTos
JmpTo46_DeleteObject:
		jmp	DeleteObject
    endc		
; ===========================================================================
off_2C89C:	dc.w byte_2C8A8-off_2C89C			; 0 
		dc.w byte_2C8AB-off_2C89C			; 1
		dc.w byte_2C8AE-off_2C89C			; 2
		dc.w byte_2C8B1-off_2C89C			; 3
		dc.w byte_2C8B7-off_2C89C			; 4
		dc.w byte_2C8BD-off_2C89C			; 5
byte_2C8A8:	dc.b  $F,  0,$FF				; 0 
byte_2C8AB:	dc.b  $F,  1,$FF				; 0 
byte_2C8AE:	dc.b  $F,  2,$FF				; 0 
byte_2C8B1:	dc.b   3,  3,  0,  3,$FD,  0			; 0	
byte_2C8B7:	dc.b   3,  4,  1,  4,$FD,  1			; 0	
byte_2C8BD:	dc.b   3,  5,  2,  5,$FD,  2,  0		; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2C8C4:				
		dc.w word_2C8D0-Map_2C8C4			; 0
		dc.w word_2C8DA-Map_2C8C4			; 1
		dc.w word_2C8E4-Map_2C8C4			; 2
		dc.w word_2C8EE-Map_2C8C4			; 3
		dc.w word_2C8F8-Map_2C8C4			; 4
		dc.w word_2C902-Map_2C8C4			; 5
word_2C8D0:	dc.w 1			
		dc.w $F80D,    0,    0,$FFF0			; 0
word_2C8DA:	dc.w 1			
		dc.w $F00B,    8,    4,$FFF4			; 0
word_2C8E4:	dc.w 1			
		dc.w $F007,  $14,   $A,$FFF8			; 0
word_2C8EE:	dc.w 1			
		dc.w $FA0D,    0,    0,$FFF0			; 0
word_2C8F8:	dc.w 1			
		dc.w $F20B,    8,    4,$FFF2			; 0
word_2C902:	dc.w 1			
		dc.w $F007,  $14,   $A,$FFF6			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo46_DeleteObject:				
		jmp	DeleteObject
JmpTo11_FindFreeObj:				
		jmp	FindFreeObj
JmpTo31_DespawnObject:				
		jmp	DespawnObject
JmpTo12_AnimateSprite:				
		jmp	AnimateSprite
JmpTo56_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object D9 - invisible grab block (e.g. the rails in WFZ)
; ----------------------------------------------------------------------------

InvisibleGrabBlock:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2C93A(pc,d0.w),d1
		jmp	off_2C93A(pc,d1.w)
; ===========================================================================
off_2C93A:	dc.w loc_2C93E-off_2C93A			; 0 
		dc.w loc_2C954-off_2C93A			; 1
; ===========================================================================

loc_2C93E:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)

loc_2C954:				
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.s	loc_2C972
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.s	loc_2C972
		jmpto	DespawnObject3,JmpTo7_DespawnObject3
; ===========================================================================

loc_2C972:				
		tst.b	(a2)
		beq.s	loc_2C9A0
		andi.b	#$70,d0
		beq.w	locret_2CA08
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.s	loc_2C996
		move.b	#$3C,2(a2)

loc_2C996:				
		move.w	#-$300,ost_y_vel(a1)
		bra.w	locret_2CA08
; ===========================================================================

loc_2C9A0:				
		tst.b	2(a2)
		beq.s	loc_2C9AE
		subq.b	#1,2(a2)
		bne.w	locret_2CA08

loc_2C9AE:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$18,d0
		cmpi.w	#$30,d0
		bcc.w	locret_2CA08
		move.w	ost_y_pos(a1),d1
		sub.w	ost_y_pos(a0),d1
		cmpi.w	#$10,d1
		bcc.w	locret_2CA08
		tst.b	$2A(a1)
		bmi.s	locret_2CA08
		cmpi.b	#6,$24(a1)
		bcc.s	locret_2CA08
		tst.w	(v_debug_active).w
		bne.s	locret_2CA08
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		clr.w	ost_inertia(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$14,$1C(a1)
		move.b	#1,$2A(a1)
		move.b	#1,(a2)

locret_2CA08:				
		rts	
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo7_DespawnObject3:				
		jmp	DespawnObject3
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4A - Octus
; ----------------------------------------------------------------------------

Octus:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2CA22(pc,d0.w),d1
		jmp	off_2CA22(pc,d1.w)
; ===========================================================================
off_2CA22:	dc.w loc_2CA52-off_2CA22			; 0 
		dc.w loc_2CAB8-off_2CA22			; 1
		dc.w loc_2CA46-off_2CA22			; 2
		dc.w loc_2CA2A-off_2CA22			; 3
; ===========================================================================

loc_2CA2A:				
		subi_.w	#1,$2C(a0)
		bmi.s	loc_2CA34
		rts	
; ===========================================================================

loc_2CA34:				
		jsrto	SpeedToPos,JmpTo19_SpeedToPos
		lea	(off_2CBDC).l,a1
		jsrto	AnimateSprite,JmpTo13_AnimateSprite
		jmpto	DespawnObject,JmpTo32_DespawnObject
; ===========================================================================

loc_2CA46:				
		subq.w	#1,$2C(a0)
		beq.w	JmpTo47_DeleteObject
		jmpto	DisplaySprite,JmpTo31_DisplaySprite
		
    if RemoveJmpTos
JmpTo47_DeleteObject:
		jmp	DeleteObject
    endc		
; ===========================================================================

loc_2CA52:				
		move.l	#Map_2CBFE,ost_mappings(a0)
		move.w	#tile_Nem_Octus+tile_pal2,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#$B,ost_height(a0)
		move.b	#8,$17(a0)
		jsrto	ObjectFall,JmpTo2_ObjectFall
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_2CAB0
		add.w	d1,ost_y_pos(a0)
		move.w	#0,ost_y_vel(a0)
		addq.b	#2,ost_primary_routine(a0)
		move.w	ost_x_pos(a0),d0
		sub.w	($FFFFB008).w,d0
		bpl.s	loc_2CAB0
		bchg	#0,$22(a0)

loc_2CAB0:				
		move.w	ost_y_pos(a0),$2A(a0)
		rts	
; ===========================================================================

loc_2CAB8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2CAD4(pc,d0.w),d1
		jsr	off_2CAD4(pc,d1.w)
		lea	(off_2CBDC).l,a1
		jsrto	AnimateSprite,JmpTo13_AnimateSprite
		jmpto	DespawnObject,JmpTo32_DespawnObject
; ===========================================================================
off_2CAD4:	dc.w loc_2CADE-off_2CAD4			; 0 
		dc.w loc_2CB04-off_2CAD4			; 1
		dc.w loc_2CB20-off_2CAD4			; 2
		dc.w loc_2CB3A-off_2CAD4			; 3
		dc.w loc_2CB48-off_2CAD4			; 4
; ===========================================================================

loc_2CADE:				
		move.w	ost_x_pos(a0),d0
		sub.w	(v_ost_player1+ost_x_pos).w,d0
		cmpi.w	#$80,d0	
		bgt.s	locret_2CB02
		cmpi.w	#-$80,d0
		blt.s	locret_2CB02
		addq.b	#2,$25(a0)
		move.b	#3,$1C(a0)
		move.w	#$20,$2C(a0)

locret_2CB02:				
		rts	
; ===========================================================================

loc_2CB04:				
		subq.w	#1,$2C(a0)
		bmi.s	loc_2CB0C
		rts	
; ===========================================================================

loc_2CB0C:				
		addq.b	#2,$25(a0)
		move.b	#4,$1C(a0)
		move.w	#-$200,ost_y_vel(a0)
		jmpto	SpeedToPos,JmpTo19_SpeedToPos
; ===========================================================================

loc_2CB20:				
		addi.w	#$10,ost_y_vel(a0)
		bpl.s	loc_2CB2C
		jmpto	SpeedToPos,JmpTo19_SpeedToPos
; ===========================================================================

loc_2CB2C:				
		addq.b	#2,$25(a0)
		move.w	#$3C,$2C(a0)
		bra.w	loc_2CB70
; ===========================================================================

loc_2CB3A:				
		subq.w	#1,$2C(a0)
		bmi.s	loc_2CB42
		rts	
; ===========================================================================

loc_2CB42:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2CB48:				
		addi.w	#$10,ost_y_vel(a0)
		move.w	ost_y_pos(a0),d0
		cmp.w	$2A(a0),d0
		bcc.s	loc_2CB5C
		jmpto	SpeedToPos,JmpTo19_SpeedToPos
; ===========================================================================

loc_2CB5C:				
		clr.b	$25(a0)
		clr.b	$1C(a0)
		clr.w	ost_y_vel(a0)
		move.b	#1,$1A(a0)
		rts	
; ===========================================================================

loc_2CB70:
		; In the Simon Wai beta, the object loads another object
		; here, which makes it look angry as it fires.
		; This object would have used Obj4A_Angry.				
		jsr	FindFreeObj
		bne.s	locret_2CBDA
		_move.b	#id_Octus,ost_id(a1)
		move.b	#6,$24(a1)
		move.l	#Map_2CBFE,ost_mappings(a1)
		move.w	#tile_Nem_Octus+tile_pal2,ost_tile(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#$F,$2C(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	$22(a0),$22(a1)
		move.b	#2,$1C(a1)
		move.b	#-$68,$20(a1)
		move.w	#-$200,ost_x_vel(a1)
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	locret_2CBDA
		neg.w	ost_x_vel(a1)

locret_2CBDA:				
		rts	
; ===========================================================================
off_2CBDC:	dc.w byte_2CBE6-off_2CBDC			; 0 
		dc.w byte_2CBEA-off_2CBDC			; 1
		dc.w byte_2CBEF-off_2CBDC			; 2
		dc.w byte_2CBF4-off_2CBDC			; 3
		dc.w byte_2CBF8-off_2CBDC			; 4
byte_2CBE6:	dc.b  $F,  1,  0,$FF				; 0 
byte_2CBEA:	dc.b   3,  1,  2,  3,$FF			; 0 
byte_2CBEF:	dc.b   2,  5,  6,$FF,  0			; 0 
byte_2CBF4:	dc.b  $F,  4,$FF,  0				; 0 
byte_2CBF8:	dc.b   7,  0,  1,$FD,  1,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2CBFE:				
		dc.w word_2CC0C-Map_2CBFE			; 0
		dc.w word_2CC1E-Map_2CBFE			; 1
		dc.w word_2CC38-Map_2CBFE			; 2
		dc.w word_2CC52-Map_2CBFE			; 3
		dc.w word_2CC6C-Map_2CBFE			; 4
		dc.w word_2CC8E-Map_2CBFE			; 5
		dc.w word_2CC98-Map_2CBFE			; 6
word_2CC0C:	dc.w 2			
		dc.w $EB0D,    0,    0,$FFF0			; 0
		dc.w $FB0D,    8,    4,$FFF0			; 4
word_2CC1E:	dc.w 3			
		dc.w $F00D,    0,    0,$FFF0			; 0
		dc.w	 9,  $10,    8,$FFE8			; 4
		dc.w	 9,  $16,   $B,	   0			; 8
word_2CC38:	dc.w 3			
		dc.w $F00D,    0,    0,$FFF0			; 0
		dc.w	 9,  $1C,   $E,$FFE8			; 4
		dc.w	 9,  $22,  $11,	   0			; 8
word_2CC52:	dc.w 3			
		dc.w $F00D,    0,    0,$FFF0			; 0
		dc.w	 9,  $28,  $14,$FFE8			; 4
		dc.w	 9,  $2E,  $17,	   0			; 8
word_2CC6C:	dc.w 4			
		dc.w $F001,  $34,  $1A,$FFF7			; 0
		dc.w $F00D,    0,    0,$FFF0			; 4
		dc.w	 9,  $10,    8,$FFE8			; 8
		dc.w	 9,  $16,   $B,	   0			; 12
word_2CC8E:	dc.w 1			
		dc.w $F201,  $36,  $1B,$FFF0			; 0
word_2CC98:	dc.w 1			
		dc.w $F201,  $38,  $1C,$FFF0			; 0

	if RemoveJmpTos=0		
		align 4	
	endc	
; ===========================================================================

	if RemoveJmpTos=0
JmpTo31_DisplaySprite:				
		jmp	DisplaySprite
JmpTo47_DeleteObject:				
		jmp	DeleteObject
JmpTo32_DespawnObject:				
		jmp	DespawnObject
JmpTo13_AnimateSprite:				
		jmp	AnimateSprite
JmpTo2_ObjectFall:				
		jmp	ObjectFall
JmpTo19_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 50 - Aquis
; ----------------------------------------------------------------------------

Aquis:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2CCD6(pc,d0.w),d1
		jmp	off_2CCD6(pc,d1.w)
; ===========================================================================
off_2CCD6:	dc.w loc_2CCDE-off_2CCD6			; 0 
		dc.w loc_2CDA2-off_2CCD6			; 1
		dc.w loc_2CDCA-off_2CCD6			; 2
		dc.w loc_2CDF4-off_2CCD6			; 3
; ===========================================================================

loc_2CCDE:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2CF94,ost_mappings(a0)
		move.w	#tile_Nem_Aquis+tile_pal2,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.w	#-$100,ost_x_vel(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d1	
		lsl.w	#4,d1
		move.w	d1,$2E(a0)
		move.w	d1,$30(a0)
		andi.w	#$F,d0
		lsl.w	#4,d0
		subq.w	#1,d0
		move.w	d0,$32(a0)
		move.w	d0,$34(a0)
		move.w	ost_y_pos(a0),$2A(a0)
		move.w	(v_water_height_actual).w,$3A(a0)
		move.b	#3,$2E(a0)
		jsrto	FindFreeObj,JmpTo12_FindFreeObj
		bne.s	loc_2CDA2
		_move.b	#id_Aquis,ost_id(a1)
		move.b	#4,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$A,ost_x_pos(a1)
		addi.w	#-6,ost_y_pos(a1)
		move.l	#Map_2CF94,ost_mappings(a1)
		move.w	#tile_Nem_Aquis+tile_pal2,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	$22(a0),$22(a1)
		move.b	#3,$1C(a1)
		move.l	a1,$36(a0)
		move.l	a0,$36(a1)
		bset	#6,$22(a0)				; pointless, as this object does not have any child sprites

loc_2CDA2:				
					
		lea	(off_2CF6C).l,a1
		jsrto	AnimateSprite,JmpTo14_AnimateSprite
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2CDC2(pc,d0.w),d1
		jsr	off_2CDC2(pc,d1.w)
		bsr.w	loc_2CF32
		jmpto	DespawnObject,JmpTo33_DespawnObject
; ===========================================================================
off_2CDC2:	dc.w loc_2CE06-off_2CDC2			; 0 
		dc.w loc_2CE14-off_2CDC2			; 1
		dc.w loc_2CE1A-off_2CDC2			; 2
		dc.w loc_2CF2E-off_2CDC2			; 3
; ===========================================================================

loc_2CDCA:				
		movea.l	$36(a0),a1
		tst.b	ost_id(a1)				; redundant check
		beq.w	JmpTo48_DeleteObject
		cmpi.b	#id_Aquis,ost_id(a1)
		bne.w	JmpTo48_DeleteObject
		btst	#7,$22(a1)
		bne.w	JmpTo48_DeleteObject
		lea	(off_2CF6C).l,a1
		jsrto	AnimateSprite,JmpTo14_AnimateSprite
		jmpto	DisplaySprite,JmpTo32_DisplaySprite
; ===========================================================================

loc_2CDF4:				
		jsrto	SpeedToPos,JmpTo20_SpeedToPos
		lea	(off_2CF6C).l,a1
		jsrto	AnimateSprite,JmpTo14_AnimateSprite
		jmpto	DespawnObject,JmpTo33_DespawnObject
; ===========================================================================

loc_2CE06:				
		tst.b	ost_render(a0)
		bmi.s	loc_2CE0E
		rts	
; ===========================================================================

loc_2CE0E:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2CE14:				
		bsr.w	loc_2CEAE
		rts	
; ===========================================================================

loc_2CE1A:				
		bsr.w	loc_2CEF8
		bsr.w	loc_2CE24
		rts	
; ===========================================================================

loc_2CE24:				
		tst.b	$2D(a0)
		bne.w	locret_2CEAC
		st.b	$2D(a0)
		jsrto	GetClosestPlayer,JmpTo_GetClosestPlayer
		tst.w	d1
		beq.s	locret_2CEAC
		cmpi.w	#-$10,d1
		bcc.s	locret_2CEAC
		jsrto	FindFreeObj,JmpTo12_FindFreeObj
		bne.s	locret_2CEAC
		_move.b	#id_Aquis,ost_id(a1)
		move.b	#6,$24(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	#Map_2CF94,ost_mappings(a1)
		move.w	#tile_Nem_Aquis+tile_pal2,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#-$68,$20(a1)
		move.b	#2,$1C(a1)
		move.w	#$A,d0
		move.w	#$10,d1
		move.w	#-$300,d2
		btst	#0,$22(a0)
		beq.s	loc_2CE9A
		neg.w	d1
		neg.w	d2

loc_2CE9A:				
		sub.w	d0,ost_y_pos(a1)
		sub.w	d1,ost_x_pos(a1)
		move.w	d2,ost_x_vel(a1)
		move.w	#$200,ost_y_vel(a1)

locret_2CEAC:				
		rts	
; ===========================================================================

loc_2CEAE:				
		subq.b	#1,$3C(a0)
		bmi.s	loc_2CEEA
		jsrto	GetClosestPlayer,JmpTo_GetClosestPlayer
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_2CEC8
		bset	#0,$22(a0)

loc_2CEC8:				
		move.w	word_2CEE6(pc,d0.w),d2
		add.w	d2,ost_x_vel(a0)
		move.w	word_2CEE6(pc,d1.w),d2
		add.w	d2,ost_y_vel(a0)
		move.w	#$100,d0
		move.w	d0,d1
		jsrto	ObjCapSpeed,JmpTo_ObjCapSpeed
		jmpto	SpeedToPos,JmpTo20_SpeedToPos
; ===========================================================================
word_2CEE6:	dc.w $FFF0					; 0
		dc.w   $10					; 1
; ===========================================================================

loc_2CEEA:				
		addq.b	#2,$25(a0)
		move.b	#$20,$3C(a0)
		jmpto	ObjMoveStop,JmpTo_ObjMoveStop
; ===========================================================================

loc_2CEF8:				
		subq.b	#1,$3C(a0)
		bmi.s	loc_2CF00
		rts	
; ===========================================================================

loc_2CF00:				
		subq.b	#1,$2E(a0)
		bmi.s	loc_2CF1C
		subq.b	#2,$25(a0)
		move.w	#-$100,ost_y_vel(a0)
		move.b	#-$80,$3C(a0)
		clr.b	$2D(a0)
		rts	
; ===========================================================================

loc_2CF1C:				
		move.b	#6,$25(a0)
		move.w	#-$200,ost_x_vel(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_2CF2E:				
		jmpto	SpeedToPos,JmpTo20_SpeedToPos
; ===========================================================================

loc_2CF32:				
		moveq	#$A,d0
		moveq	#-6,d1
		movea.l	$36(a0),a1
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	$22(a0),$22(a1)
		move.b	$23(a0),$23(a1)
		move.b	ost_render(a0),ost_render(a1)
		btst	#0,$22(a1)
		beq.s	loc_2CF62
		neg.w	d0

loc_2CF62:				
		add.w	d0,ost_x_pos(a1)
		add.w	d1,ost_y_pos(a1)
		rts	
; ===========================================================================
off_2CF6C:	dc.w byte_2CF78-off_2CF6C			; 0 
		dc.w byte_2CF7B-off_2CF6C			; 1
		dc.w byte_2CF83-off_2CF6C			; 2
		dc.w byte_2CF89-off_2CF6C			; 3
		dc.w byte_2CF8D-off_2CF6C			; 4
		dc.w byte_2CF90-off_2CF6C			; 5
byte_2CF78:	dc.b  $E,  0,$FF				; 0 
byte_2CF7B:	dc.b   5,  3,  4,  3,  4,  3,  4,$FF		; 0	
byte_2CF83:	dc.b   3,  5,  6,  7,  6,$FF			; 0	
byte_2CF89:	dc.b   3,  1,  2,$FF				; 0 
byte_2CF8D:	dc.b   1,  5,$FF				; 0 
byte_2CF90:	dc.b  $E,  8,$FF,  0				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2CF94:				
		dc.w word_2CFA6-Map_2CF94			; 0
		dc.w word_2CFC0-Map_2CF94			; 1
		dc.w word_2CFCA-Map_2CF94			; 2
		dc.w word_2CFD4-Map_2CF94			; 3
		dc.w word_2CFEE-Map_2CF94			; 4
		dc.w word_2D008-Map_2CF94			; 5
		dc.w word_2D012-Map_2CF94			; 6
		dc.w word_2D01C-Map_2CF94			; 7
		dc.w word_2D026-Map_2CF94			; 8
word_2CFA6:	dc.w 3			
		dc.w $E80D,    0,    0,$FFF0			; 0
		dc.w $F809,    8,    4,$FFF8			; 4
		dc.w  $805,   $E,    7,$FFF8			; 8
word_2CFC0:	dc.w 1			
		dc.w $F805,  $22,  $11,$FFF8			; 0
word_2CFCA:	dc.w 1			
		dc.w $F805,  $26,  $13,$FFF8			; 0
word_2CFD4:	dc.w 3			
		dc.w $E80D,  $12,    9,$FFF0			; 0
		dc.w $F809,    8,    4,$FFF8			; 4
		dc.w  $805,   $E,    7,$FFF8			; 8
word_2CFEE:	dc.w 3			
word_2CFF0:	dc.w $E80D,  $1A,   $D,$FFF0			; 0
		dc.w $F809,    8,    4,$FFF8			; 4
		dc.w  $805,   $E,    7,$FFF8			; 8
word_2D008:	dc.w 1			
		dc.w $F801,  $2A,  $15,$FFFC			; 0
word_2D012:	dc.w 1			
		dc.w $F801,  $2C,  $16,$FFFC			; 0
word_2D01C:	dc.w 1			
		dc.w $F801,  $2E,  $17,$FFFC			; 0
word_2D026:	dc.w 1			
		dc.w $F80D,  $30,  $18,$FFF0			; 0
; ===========================================================================

	if RemoveJmpTos
JmpTo48_DeleteObject:				
		jmp	DeleteObject	
	else	
JmpTo32_DisplaySprite:				
		jmp	DisplaySprite
JmpTo48_DeleteObject:				
		jmp	DeleteObject
JmpTo12_FindFreeObj:				
		jmp	FindFreeObj
JmpTo33_DespawnObject:				
		jmp	DespawnObject
JmpTo14_AnimateSprite:				
		jmp	AnimateSprite
JmpTo_GetClosestPlayer:				
		jmp	GetClosestPlayer
JmpTo_ObjCapSpeed:				
		jmp	ObjCapSpeed
JmpTo_ObjMoveStop:				
		jmp	ObjMoveStop
JmpTo20_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc
		 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 4B - Buzzer 
; ----------------------------------------------------------------------------

Buzzer:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2D076(pc,d0.w),d1
		jmp	off_2D076(pc,d1.w)
; ===========================================================================
off_2D076:	dc.w loc_2D0C8-off_2D076			; 0 
		dc.w loc_2D174-off_2D076			; 1
		dc.w loc_2D090-off_2D076			; 2
		dc.w loc_2D07E-off_2D076			; 3
; ===========================================================================

loc_2D07E:				
		jsrto	SpeedToPos,JmpTo21_SpeedToPos
		lea	(off_2D2CE).l,a1
		jsrto	AnimateSprite,JmpTo15_AnimateSprite
		jmpto	DespawnObject_P1,JmpTo_DespawnObject_P1
; ===========================================================================

loc_2D090:				
		movea.l	$2A(a0),a1
	if FixBugs
		cmpi.b	#id_Buzzer,ost_id(a1)			; is parent buzzer still loaded?
		bne.w	JmpTo49_DeleteObject			; if not, branch
	else
		; This check doesn't really work: it's possible for an object to be
		; loaded into the parent's slot before this object can check if the
		; slot is empty. In fact, it will always be immediately occupied by
		; the explosion object. This defect causes the flame to linger for a
		; while after the Buzzer is destroyed. A better way to do this check
		; would be to check if the ID is equal to 'ObjID_Buzzer'.	
		tst.b	ost_id(a1)				; is parent slot empty?
		beq.w	JmpTo49_DeleteObject			; if so, branch (but see bug description above)
	endc		
		tst.w	$30(a1)
		bmi.s	loc_2D0A2
		rts	
; ===========================================================================

loc_2D0A2:				
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		lea	(off_2D2CE).l,a1
		jsrto	AnimateSprite,JmpTo15_AnimateSprite
		jmpto	DespawnObject_P1,JmpTo_DespawnObject_P1
; ===========================================================================

loc_2D0C8:				
		move.l	#Map_2D2EA,ost_mappings(a0)
		move.w	#tile_Nem_Buzzer,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo57_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#$10,ost_height(a0)
		move.b	#$18,$17(a0)
		move.b	#3,$18(a0)
		addq.b	#2,ost_primary_routine(a0)
		jsrto	FindNextFreeObj,JmpTo20_FindNextFreeObj
		bne.s	locret_2D172
		_move.b	#id_Buzzer,ost_id(a1)
		move.b	#4,$24(a1)
		move.l	#Map_2D2EA,ost_mappings(a1)
		move.w	#tile_Nem_Buzzer,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo7_Adjust2PArtPointer2
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	$22(a0),$22(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#1,$1C(a1)
		move.l	a0,$2A(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#$100,$2E(a0)
		move.w	#-$100,ost_x_vel(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	locret_2D172
		neg.w	ost_x_vel(a0)

locret_2D172:				
		rts	
; ===========================================================================

loc_2D174:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2D190(pc,d0.w),d1
		jsr	off_2D190(pc,d1.w)
		lea	(off_2D2CE).l,a1
		jsrto	AnimateSprite,JmpTo15_AnimateSprite
		jmpto	DespawnObject_P1,JmpTo_DespawnObject_P1
; ===========================================================================
off_2D190:	
		dc.w loc_2D194-off_2D190			; 0 
		dc.w loc_2D234-off_2D190			; 1
; ===========================================================================

loc_2D194:				
		bsr.w	loc_2D1D6
		subq.w	#1,$30(a0)
		move.w	$30(a0),d0
		cmpi.w	#$F,d0
		beq.s	loc_2D1BA
		tst.w	d0
		bpl.s	locret_2D1B8
		subq.w	#1,$2E(a0)
		bgt.w	JmpTo21_SpeedToPos
		move.w	#$1E,$30(a0)

locret_2D1B8:				
		rts	
; ===========================================================================

loc_2D1BA:				
		sf.b	$32(a0)
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		bchg	#0,$22(a0)
		move.w	#$100,$2E(a0)
		rts	
; ===========================================================================

loc_2D1D6:				
		tst.b	$32(a0)
		bne.w	locret_2D232
		move.w	ost_x_pos(a0),d0
		lea	($FFFFB000).w,a1
		btst	#0,(v_vblank_counter_byte).w
		beq.s	loc_2D1F2
		lea	($FFFFB040).w,a1

loc_2D1F2:				
		sub.w	ost_x_pos(a1),d0
		move.w	d0,d1
		bpl.s	loc_2D1FC
		neg.w	d0

loc_2D1FC:				
		cmpi.w	#$28,d0
		blt.s	locret_2D232
		cmpi.w	#$30,d0
		bgt.s	locret_2D232
		tst.w	d1
		bpl.s	loc_2D216
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	locret_2D232
		bra.s	loc_2D21E
; ===========================================================================

loc_2D216:				
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	locret_2D232

loc_2D21E:				
		st.b	$32(a0)
		addq.b	#2,$25(a0)
		move.b	#3,$1C(a0)
		move.w	#$32,$34(a0)

locret_2D232:				
		rts	
; ===========================================================================

loc_2D234:				
		move.w	$34(a0),d0
		subq.w	#1,d0
		blt.s	loc_2D248
		move.w	d0,$34(a0)
		cmpi.w	#$14,d0
		beq.s	loc_2D24E
		rts	
; ===========================================================================

loc_2D248:				
		subq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2D24E:				
		jsr	FindNextFreeObj
		bne.s	loc_2D2C8
		_move.b	#id_Buzzer,ost_id(a1)
		move.b	#6,$24(a1)
		move.l	#Map_2D2EA,ost_mappings(a1)
		move.w	#tile_Nem_Buzzer,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo7_Adjust2PArtPointer2
		move.b	#4,$18(a1)
		move.b	#-$68,$20(a1)
		move.b	#$10,$19(a1)
		move.b	$22(a0),$22(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#2,$1C(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$18,ost_y_pos(a1)
		move.w	#$D,d0
		move.w	#$180,ost_y_vel(a1)
		move.w	#-$180,ost_x_vel(a1)
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_2D2C8
		neg.w	ost_x_vel(a1)
		neg.w	d0

loc_2D2C8:				
		add.w	d0,ost_x_pos(a1)
		rts	
; ===========================================================================
off_2D2CE:	dc.w byte_2D2D6-off_2D2CE			; 0 
		dc.w byte_2D2D9-off_2D2CE			; 1
		dc.w byte_2D2DD-off_2D2CE			; 2
		dc.w byte_2D2E1-off_2D2CE			; 3
byte_2D2D6:	dc.b  $F,  0,$FF				; 0 
byte_2D2D9:	dc.b   2,  3,  4,$FF				; 0 
byte_2D2DD:	dc.b   3,  5,  6,$FF				; 0 
byte_2D2E1:	dc.b   9,  1,  1,  1,  1,  1,$FD,  0,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2D2EA:				
		dc.w word_2D2F8-Map_2D2EA			; 0
		dc.w word_2D30A-Map_2D2EA			; 1
		dc.w word_2D324-Map_2D2EA			; 2
		dc.w word_2D33E-Map_2D2EA			; 3
		dc.w word_2D348-Map_2D2EA			; 4
		dc.w word_2D352-Map_2D2EA			; 5
		dc.w word_2D35C-Map_2D2EA			; 6
word_2D2F8:	dc.w 2			
		dc.w $F809,    0,    0,$FFE8			; 0
		dc.w $F809,    6,    3,	   0			; 4
word_2D30A:	dc.w 3			
		dc.w $F809,    0,    0,$FFE8			; 0
		dc.w $F805,   $C,    6,	   0			; 4
		dc.w  $805,  $10,    8,	   2			; 8
word_2D324:	dc.w 3			
		dc.w $F809,    0,    0,$FFE8			; 0
		dc.w $F805,   $C,    6,	   0			; 4
		dc.w  $805,  $14,   $A,	   2			; 8
word_2D33E:	dc.w 1			
		dc.w $F001,  $14,   $A,	   4			; 0
word_2D348:	dc.w 1			
		dc.w $F001,  $16,   $B,	   4			; 0
word_2D352:	dc.w 1			
		dc.w $F801,  $18,   $C,$FFF4			; 0
word_2D35C:	dc.w 1			
		dc.w $F801,  $1A,   $D,$FFF4			; 0

	if RemoveJmpTos=0
		align 4
	endc	
; ===========================================================================

	JmpTo49_DeleteObject:				
		jmp	DeleteObject

	if RemoveJmpTos
JmpTo21_SpeedToPos:				
		jmp	SpeedToPos			
	else
JmpTo20_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo15_AnimateSprite:				
		jmp	AnimateSprite
JmpTo7_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo_DespawnObject_P1:				
		jmp	DespawnObject_P1
JmpTo57_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo21_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5C - Masher 
; ----------------------------------------------------------------------------

Masher:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2D3A6(pc,d0.w),d1
		jsr	off_2D3A6(pc,d1.w)
		jmpto	DespawnObject,JmpTo34_DespawnObject
; ===========================================================================
off_2D3A6:	
		dc.w loc_2D3AA-off_2D3A6			; 0 
		dc.w loc_2D3E4-off_2D3A6			; 2
; ===========================================================================

loc_2D3AA:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2D442,ost_mappings(a0)
		move.w	#tile_Nem_Masher,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo58_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#9,$20(a0)
		move.b	#$10,$19(a0)
		move.w	#-$400,ost_y_vel(a0)
		move.w	ost_y_pos(a0),$30(a0)

loc_2D3E4:				
		lea	(off_2D430).l,a1
		jsrto	AnimateSprite,JmpTo16_AnimateSprite
		jsrto	SpeedToPos,JmpTo22_SpeedToPos
		addi.w	#$18,ost_y_vel(a0)
		move.w	$30(a0),d0
		cmp.w	ost_y_pos(a0),d0
		bcc.s	loc_2D40C
		move.w	d0,ost_y_pos(a0)
		move.w	#-$500,ost_y_vel(a0)

loc_2D40C:				
		move.b	#1,$1C(a0)
		subi.w	#$C0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcc.s	locret_2D42E
		move.b	#0,$1C(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	locret_2D42E
		move.b	#2,$1C(a0)

locret_2D42E:				
		rts	
; ===========================================================================
off_2D430:	dc.w byte_2D436-off_2D430			; 0 
		dc.w byte_2D43A-off_2D430			; 1
		dc.w byte_2D43E-off_2D430			; 2
byte_2D436:	dc.b   7,  0,  1,$FF				; 0 
byte_2D43A:	dc.b   3,  0,  1,$FF				; 0 
byte_2D43E:	dc.b   7,  0,$FF,  0				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2D442:				
		dc.w word_2D446-Map_2D442			; 0
		dc.w word_2D460-Map_2D442			; 1
word_2D446:	dc.w 3			
		dc.w $F005,    0,    0,$FFF4			; 0
		dc.w $F001,    4,    2,	   4			; 4
		dc.w	 9,   $A,    5,$FFF4			; 8
word_2D460:	dc.w 3			
		dc.w $F005,    0,    0,$FFF4			; 0
		dc.w $F005,    6,    3,	   2			; 4
		dc.w	 9,  $10,    8,$FFF4			; 8
	
	if RemoveJmpTos=0
		align 4
	endc	
; ===========================================================================

	if RemoveJmpTos=0
JmpTo34_DespawnObject:				
		jmp	DespawnObject
JmpTo16_AnimateSprite:				
		jmp	AnimateSprite
JmpTo58_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo22_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 58 - Boss explosion
; ----------------------------------------------------------------------------

BossExplosion:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2D4A2(pc,d0.w),d1
		jmp	off_2D4A2(pc,d1.w)
; ===========================================================================
off_2D4A2:	
		dc.w loc_2D4A6-off_2D4A2			; 0 
		dc.w loc_2D4EC-off_2D4A2			; 2
; ===========================================================================

loc_2D4A6:				
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_2D50A,ost_mappings(a0)
		move.w	#tile_Nem_FieryExplosion+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo59_Adjust2PArtPointer
		move.b	#render_rel,ost_render(a0)
		move.b	#0,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#$C4,d0	
		jmp	PlaySound
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_2D4EC:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2D506
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#7,$1A(a0)
		beq.w	JmpTo50_DeleteObject

loc_2D506:				
		jmpto	DisplaySprite,JmpTo33_DisplaySprite
		
    if RemoveJmpTos
JmpTo50_DeleteObject:
		jmp	DeleteObject
    endif		
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2D50A:				
		dc.w word_2D518-Map_2D50A			; 0
		dc.w word_2D522-Map_2D50A			; 1
		dc.w word_2D52C-Map_2D50A			; 2
		dc.w word_2D536-Map_2D50A			; 3
		dc.w word_2D540-Map_2D50A			; 4
		dc.w word_2D54A-Map_2D50A			; 5
		dc.w word_2D554-Map_2D50A			; 6
word_2D518:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
word_2D522:	dc.w 1			
		dc.w $F00F,    4,    2,$FFF0			; 0
word_2D52C:	dc.w 1			
		dc.w $F00F,  $14,   $A,$FFF0			; 0
word_2D536:	dc.w 1			
		dc.w $F00F,  $24,  $12,$FFF0			; 0
word_2D540:	dc.w 1			
		dc.w $F00F,  $34,  $1A,$FFF0			; 0
word_2D54A:	dc.w 1			
		dc.w $F00F,  $44,  $22,$FFF0			; 0
word_2D554:	dc.w 1			
		dc.w $F00F,  $54,  $2A,$FFF0			; 0
; ===========================================================================
		; a bit of unused/dead code here 	
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		addq.b	#2,ost_boss_wobble(a0)
		; end dead code

		
BOOZ_Hit:	; only used by OOZ boss; all others handle hits in their own code			
		cmpi.b	#8,ost_boss_routine(a0)
		bcc.s	locret_2D5C2
		tst.b	ost_boss_hitcount2(a0)
		beq.s	loc_2D5C4
		tst.b	$20(a0)
		bne.s	locret_2D5C2
		tst.b	ost_boss_flash_time(a0)
		bne.s	loc_2D5A6
		move.b	#$20,ost_boss_flash_time(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_2D5A6:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_2D5B4
		move.w	#$EEE,d0

loc_2D5B4:				
		move.w	d0,(a1)
		subq.b	#1,ost_boss_flash_time(a0)
		bne.s	locret_2D5C2
		move.b	#$F,$20(a0)

locret_2D5C2:				
		rts	
; ===========================================================================

loc_2D5C4:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo_AddPoints
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,ost_boss_routine(a0)
		moveq	#$40,d0
		jsrto	AddPLC,JmpTo4_AddPLC
		rts	
; ===========================================================================

BossMove:				
		move.l	($FFFFF750).w,d2
		move.l	(v_boss_y_pos).w,d3
		move.w	(v_boss_x_vel).w,d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	(v_boss_y_vel).w,d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,($FFFFF750).w
		move.l	d3,(v_boss_y_pos).w
		rts	
; ===========================================================================

BossAnimate:				
		moveq	#0,d6
		movea.l	a1,a4
		lea	($FFFFF740).w,a2
		lea	ost_mainspr_frame(a0),a3
		tst.b	(a3)
		bne.s	loc_2D618
		addq.w	#2,a2
		bra.s	loc_2D61C
; ===========================================================================

loc_2D618:				
		bsr.w	loc_2D62A

loc_2D61C:				
		moveq	#0,d6
		move.b	ost_mainspr_childsprites(a0),d6
		subq.w	#1,d6
		bmi.s	locret_2D690
		lea	ost_subspr2_frame(a0),a3

loc_2D62A:				
		movea.l	a4,a1
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d4
		move.b	(a2)+,d0
		move.b	d0,d1
		lsr.b	#4,d1
		andi.b	#$F,d0
		move.b	d0,d2
		cmp.b	d0,d1
		beq.s	loc_2D646
		st.b	d4

loc_2D646:				
		move.b	d0,d5
		lsl.b	#4,d5
		or.b	d0,d5
		move.b	(a2)+,d0
		move.b	d0,d1
		lsr.b	#4,d1
		tst.b	d4
		beq.s	loc_2D65A
		moveq	#0,d0
		moveq	#0,d1

loc_2D65A:				
		andi.b	#$F,d0
		subi_.b	#1,d0
		bpl.s	loc_2D67C
		add.w	d2,d2
		adda.w	(a1,d2.w),a1
		move.b	(a1),d0
		move.b	1(a1,d1.w),d2
		bmi.s	loc_2D692

loc_2D672:				
		andi.b	#$7F,d2
		move.b	d2,(a3)
		addi_.b	#1,d1

loc_2D67C:				
		lsl.b	#4,d1
		or.b	d1,d0
		move.b	d0,-1(a2)
		move.b	d5,-2(a2)
		adda_.w	#6,a3
		dbf	d6,loc_2D62A

locret_2D690:				
		rts	
; ===========================================================================

loc_2D692:				
		addq.b	#1,d2
		bne.s	loc_2D6A0
		move.b	#0,d1
		move.b	1(a1),d2
		bra.s	loc_2D672
; ===========================================================================

loc_2D6A0:				
		addq.b	#1,d2
		bne.s	loc_2D6AC
		addi_.b	#2,$26(a0)
		rts	
; ===========================================================================

loc_2D6AC:				
		addq.b	#1,d2
		bne.s	loc_2D6BA
		andi.b	#-$10,d5
		or.b	2(a1,d1.w),d5
		bra.s	loc_2D67C
; ===========================================================================

loc_2D6BA:				
		addq.b	#1,d2
		bne.s	locret_2D6CA
		moveq	#0,d3
		move.b	2(a1,d1.w),d1
		move.b	1(a1,d1.w),d2
		bra.s	loc_2D672
; ===========================================================================

locret_2D6CA:				
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load explosions when a boss is beaten
; ---------------------------------------------------------------------------
BossExplode:				
		move.b	(v_vblank_counter_byte).w,d0		; get byte that increments every frame
		andi.b	#7,d0					; read bits 0-2
		bne.s	.fail					; branch if any are set
		jsr	FindFreeObj				; find free OST slot
		bne.s	.fail					; branch if none are found
		_move.b	#id_BossExplosion,ost_id(a1)		; load boss explosion object every 8 frames
		move.w	ost_x_pos(a0),ost_x_pos(a1)		; copy position from parent boss object
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		jsr	RandomNumber
		move.w	d0,d1					; this is pointless, as d1 is cleared immediately after
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$20,d1
		add.w	d1,ost_x_pos(a1)			; randomize position
		lsr.w	#8,d0
		lsr.b	#2,d0
		subi.w	#$20,d0
		add.w	d0,ost_y_pos(a1)

	.fail:				
		rts
; ===========================================================================

	if RemoveJmpTos=0
JmpTo33_DisplaySprite:				
		jmp	DisplaySprite
JmpTo50_DeleteObject:				
		jmp	DeleteObject
JmpTo4_AddPLC:				
		jmp	AddPLC
JmpTo_AddPoints:				
		jmp	AddPoints
JmpTo59_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer

		align 4
	endc	

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5D - CPZ boss
; ----------------------------------------------------------------------------

BossChemicalPlant:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2D742(pc,d0.w),d1
		jmp	off_2D742(pc,d1.w)
; ===========================================================================
off_2D742:	dc.w loc_2D75E-off_2D742			; 0 
		dc.w loc_2D94E-off_2D742			; 1
		dc.w loc_2DDA2-off_2D742			; 2
		dc.w loc_2DE66-off_2D742			; 3
		dc.w loc_2DFB2-off_2D742			; 4
		dc.w loc_2E07A-off_2D742			; 5
		dc.w loc_2E67A-off_2D742			; 6
		dc.w loc_2DFFE-off_2D742			; 7
		dc.w loc_2E192-off_2D742			; 8
		dc.w loc_2DCB6-off_2D742			; 9
		dc.w loc_2DC5E-off_2D742			; 10
		dc.w loc_2E8F6-off_2D742			; 11
		dc.w loc_2E94E-off_2D742			; 12
		dc.w loc_2E9F6-off_2D742			; 13
; ===========================================================================

loc_2D75E:				
		move.l	#Map_2ED8C,ost_mappings(a0)
		move.w	#tile_Nem_Eggpod_CPZ+tile_pal2,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.w	#$2B80,ost_x_pos(a0)
		move.w	#$4B0,ost_y_pos(a0)
		move.b	#3,$18(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$21(a0)
		addq.b	#2,ost_primary_routine(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$38(a0)
		bclr	#3,$2D(a0)
		jsrto	Adjust2PArtPointer,JmpTo60_Adjust2PArtPointer
		jsr	FindNextFreeObj
		bne.w	loc_2D8AC
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	a1,$34(a0)
		move.l	#Map_2ED8C,ost_mappings(a1)
		move.w	#tile_Nem_Eggpod_CPZ,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#3,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$16,$24(a1)
		move.b	#1,$1C(a1)
		move.b	ost_render(a0),ost_render(a1)
		jsrto	Adjust2PArtPointer2,JmpTo8_Adjust2PArtPointer2
		tst.b	$28(a0)
		bmi.w	loc_2D8AC
		jsr	FindNextFreeObj
		bne.w	loc_2D8AC
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EE88,ost_mappings(a1)
		move.w	#tile_Nem_EggpodJets_CPZ,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo8_Adjust2PArtPointer2
		move.b	#1,$1E(a0)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#3,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$18,$24(a1)
		move.b	ost_render(a0),ost_render(a1)
		jsr	FindNextFreeObj
		bne.s	loc_2D8AC
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#2,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$12,$24(a1)

loc_2D8AC:				
		jsr	FindNextFreeObj
		bne.s	loc_2D908
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		subi.w	#$38,ost_y_pos(a1)
		subi.w	#$10,ost_x_pos(a1)
		move.w	#-$10,$2E(a1)
		addi.b	#$10,$24(a1)
		move.b	#6,$1C(a1)

loc_2D908:				
		jsr	FindNextFreeObj
		bne.s	locret_2D94C
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#4,$24(a1)

locret_2D94C:				
		rts	
; ===========================================================================

loc_2D94E:				
		bsr.w	loc_2D992
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2D984(pc,d0.w),d1
		jsr	off_2D984(pc,d1.w)
		lea	(off_2ED5C).l,a1
		jsr	AnimateSprite
		move.b	$22(a0),d0
		andi.b	#3,d0
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d0,ost_render(a0)
		jmp	DisplaySprite
; ===========================================================================
off_2D984:	dc.w loc_2DA62-off_2D984			; 0 
		dc.w loc_2DB98-off_2D984			; 1
		dc.w loc_2DC00-off_2D984			; 2
		dc.w loc_2DC14-off_2D984			; 3
		dc.w loc_2D9B4-off_2D984			; 4
		dc.w loc_2D9D8-off_2D984			; 5
		dc.w loc_2DA22-off_2D984			; 6
; ===========================================================================

loc_2D992:				
		cmpi.b	#8,$25(a0)
		bge.s	locret_2D9AA
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		bgt.s	loc_2D9AC
		bclr	#0,$22(a0)

locret_2D9AA:				
		rts	
; ===========================================================================

loc_2D9AC:				
		bset	#0,$22(a0)
		rts	
; ===========================================================================

loc_2D9B4:				
		subq.w	#1,$3C(a0)
		bpl.w	loc_2DB34
		bset	#0,$22(a0)
		bclr	#7,$22(a0)
		clr.w	ost_x_vel(a0)
		addq.b	#2,$25(a0)
		move.w	#-$26,$3C(a0)
		rts	
; ===========================================================================

loc_2D9D8:				
		addq.w	#1,$3C(a0)
		beq.s	loc_2D9E8
		bpl.s	loc_2D9EE
		addi.w	#$18,ost_y_vel(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2D9E8:				
		clr.w	ost_y_vel(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2D9EE:				
		cmpi.w	#$30,$3C(a0)
		bcs.s	loc_2DA06
		beq.s	loc_2DA0E
		cmpi.w	#$38,$3C(a0)
		bcs.s	loc_2DA1A
		addq.b	#2,$25(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2DA06:				
		subi_.w	#8,ost_y_vel(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2DA0E:				
		clr.w	ost_y_vel(a0)
		jsrto	RestoreLevelMusic,JmpTo_RestoreLevelMusic
		jsrto	LoadAnimalExplosionArt,JmpTo_LoadAnimalExplosionArt

loc_2DA1A:				
		bsr.w	loc_2DB0E
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DA22:				
		bset	#6,$2E(a0)
		move.w	#$400,ost_x_vel(a0)
		move.w	#-$40,ost_y_vel(a0)
		cmpi.w	#$2C30,(v_boundary_right_next).w
		bcc.s	loc_2DA42
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_2DA48
; ===========================================================================

loc_2DA42:				
		tst.b	ost_render(a0)
		bpl.s	loc_2DA50

loc_2DA48:				
		bsr.w	loc_2DB0E
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DA50:				
		addq.l	#4,sp
		movea.l	$34(a0),a1
		jsr	DeleteChild
		
    if RemoveJmpTos
JmpTo51_DeleteObject:
    endc
    		
		jmp	DeleteObject
; ===========================================================================

loc_2DA62:				
		move.w	#$100,ost_y_vel(a0)
		bsr.w	loc_2DB0E
		cmpi.w	#$4C0,$38(a0)
		bne.s	loc_2DA7E
		move.w	#0,ost_y_vel(a0)
		addq.b	#2,$25(a0)

loc_2DA7E:				
		move.b	$3F(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	$38(a0),d0
		move.w	d0,ost_y_pos(a0)
		move.w	$30(a0),ost_x_pos(a0)
		addq.b	#2,$3F(a0)
		cmpi.b	#8,$25(a0)
		bcc.s	locret_2DAE8
		tst.b	$22(a0)
		bmi.s	loc_2DAEA
		tst.b	$20(a0)
		bne.s	locret_2DAE8
		tst.b	$3E(a0)
		bne.s	loc_2DAC6
		move.b	#$20,$3E(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_2DAC6:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_2DAD4
		move.w	#$EEE,d0

loc_2DAD4:				
		move.w	d0,(a1)
		subq.b	#1,$3E(a0)
		bne.s	locret_2DAE8
		move.b	#$F,$20(a0)
		bclr	#1,$2D(a0)

locret_2DAE8:				
		rts	
; ===========================================================================

loc_2DAEA:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo2_AddPoints
		move.b	#8,$25(a0)
		move.w	#$B3,$3C(a0)
		movea.l	$34(a0),a1
		move.b	#4,$1C(a1)
		moveq	#$40,d0
		jmpto	AddPLC,JmpTo5_AddPLC
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_2DB0E:				
		move.l	$30(a0),d2
		move.l	$38(a0),d3
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$30(a0)
		move.l	d3,$38(a0)
		rts	
; ===========================================================================

loc_2DB34:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#7,d0
		bne.s	locret_2DB7A
		jsr	FindFreeObj
		bne.s	locret_2DB7A
		_move.b	#id_BossExplosion,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		jsr	RandomNumber
		move.w	d0,d1
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$20,d1
		add.w	d1,ost_x_pos(a1)
		lsr.w	#8,d0
		lsr.b	#2,d0
		subi.w	#$20,d0
		add.w	d0,ost_y_pos(a1)

locret_2DB7A:				
		rts	
; ===========================================================================

loc_2DB7C:				
		jsr	FindFreeObj
		bne.s	locret_2DB96
		_move.b	#id_BossExplosion,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)

locret_2DB96:				
		rts	
; ===========================================================================

loc_2DB98:				
		btst	#3,$2D(a0)
		bne.s	loc_2DBA6
		move.w	#$2B30,d0
		bra.s	loc_2DBAA
; ===========================================================================

loc_2DBA6:				
		move.w	#$2A50,d0

loc_2DBAA:				
		move.w	d0,d1
		sub.w	$30(a0),d0
		bpl.s	loc_2DBB4
		neg.w	d0

loc_2DBB4:				
		cmpi.w	#3,d0
		ble.s	loc_2DBD6
		cmp.w	$30(a0),d1
		bgt.s	loc_2DBC8
		move.w	#-$300,ost_x_vel(a0)
		bra.s	loc_2DBCE
; ===========================================================================

loc_2DBC8:				
		move.w	#$300,ost_x_vel(a0)

loc_2DBCE:				
		bsr.w	loc_2DB0E
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DBD6:				
		cmpi.w	#$4C0,$38(a0)
		bne.w	loc_2DA7E
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
		addq.b	#2,$25(a0)
		bchg	#3,$2D(a0)
		bset	#0,$2E(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC00:				
		btst	#0,$2E(a0)
		beq.s	loc_2DC0C
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC0C:				
		addq.b	#2,$25(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC14:				
		move.w	($FFFFB008).w,d0
		addi.w	#$4C,d0
		cmp.w	$30(a0),d0
		bgt.s	loc_2DC42
		beq.w	loc_2DA7E
		subi.l	#loc_10000,$30(a0)
		cmpi.w	#$2A28,$30(a0)
		bgt.w	loc_2DA7E
		move.w	#$2A28,$30(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC42:				
		addi.l	#loc_10000,$30(a0)
		cmpi.w	#$2B70,$30(a0)
		blt.w	loc_2DA7E
		move.w	#$2B70,$30(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC5E:				
		cmpi.b	#-7,$30(a0)
		beq.s	loc_2DC80
		subi_.b	#1,$30(a0)
		bgt.w	JmpTo34_DisplaySprite
		bsr.w	loc_2DB7C
		move.b	#-7,$30(a0)
		move.w	#$1E,$2A(a0)

loc_2DC80:				
		subq.w	#1,$2A(a0)
		bpl.w	JmpTo34_DisplaySprite
		move.w	ost_x_vel(a0),d0
		add.w	d0,ost_x_pos(a0)
		move.l	ost_y_pos(a0),d3
		move.w	ost_y_vel(a0),d0
		addi.w	#$38,ost_y_vel(a0)
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,ost_y_pos(a0)
		cmpi.l	#$5800000,d3
		bcc.w	JmpTo51_DeleteObject
		jmpto	DespawnObject,JmpTo35_DespawnObject
; ===========================================================================

loc_2DCB6:				
		btst	#7,$22(a0)
		bne.s	loc_2DCEC
		movea.l	$34(a0),a1
		move.l	ost_x_pos(a1),ost_x_pos(a0)
		move.l	ost_y_pos(a1),ost_y_pos(a0)
		move.b	ost_render(a1),ost_render(a0)
		move.b	$22(a1),$22(a0)
		movea.l	#off_2EA3C,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2DCEC:				
		moveq	#$22,d3
		move.b	#$78,$30(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	d3,$1A(a0)
		move.b	#$14,ost_primary_routine(a0)
		jsr	RandomNumber
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,ost_x_vel(a0)
		move.w	#-$380,ost_y_vel(a0)
		moveq	#1,d2
		addq.w	#1,d3

loc_2DD26:				
		jsr	FindFreeObj
		bne.w	JmpTo51_DeleteObject
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.b	d3,$1A(a1)
		move.b	#$14,$24(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#2,$18(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	$22(a0),$22(a1)
		move.b	ost_render(a0),ost_render(a1)
		jsr	RandomNumber
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,ost_x_vel(a1)
		move.w	#-$380,ost_y_vel(a1)
		swap	d0
		addi.b	#$1E,d0
		andi.w	#$7F,d0
		move.b	d0,$30(a1)
		addq.w	#1,d3
		dbf	d2,loc_2DD26
		rts	
; ===========================================================================

loc_2DDA2:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2DDB0(pc,d0.w),d1
		jmp	off_2DDB0(pc,d1.w)
; ===========================================================================
off_2DDB0:	dc.w loc_2DDB4-off_2DDB0			; 0 
		dc.w loc_2DDE2-off_2DDB0			; 1
; ===========================================================================

loc_2DDB4:				
		movea.l	$34(a0),a1
		btst	#0,$2E(a1)
		bne.s	loc_2DDC2
		rts	
; ===========================================================================

loc_2DDC2:				
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addi.w	#$18,ost_y_pos(a0)
		move.w	#$C,$2C(a0)
		addq.b	#2,$25(a0)
		movea.l	a0,a1
		bra.s	loc_2DDF0
; ===========================================================================

loc_2DDE2:				
		jsr	FindNextFreeObj
		beq.s	loc_2DDEC
		rts	
; ===========================================================================

loc_2DDEC:				
		move.l	a0,$34(a1)

loc_2DDF0:				
		subq.w	#1,$2C(a0)
		blt.s	loc_2DE56
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#5,$18(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	$2C(a0),d0
		subi.w	#$B,d0
		neg.w	d0
		lsl.w	#3,d0
		move.w	d0,$38(a1)
		add.w	d0,ost_y_pos(a1)
		move.b	#1,$1C(a1)
		cmpi.b	#2,$25(a1)
		beq.w	loc_2DFFE
		move.b	#$E,$24(a1)
		bra.w	loc_2DFFE
; ===========================================================================

loc_2DE56:				
		move.b	#0,$25(a0)
		move.b	#6,ost_primary_routine(a0)
		bra.w	loc_2DFFE
; ===========================================================================

loc_2DE66:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2DE74(pc,d0.w),d1
		jmp	off_2DE74(pc,d1.w)
; ===========================================================================
off_2DE74:	dc.w loc_2DE7A-off_2DE74			; 0 
		dc.w loc_2DF08-off_2DE74			; 1
		dc.w loc_2DF76-off_2DE74			; 2
; ===========================================================================

loc_2DE7A:				
		jsr	FindNextFreeObj
		bne.w	loc_2DFFE
		move.b	#$E,ost_primary_routine(a0)
		move.b	#6,$24(a1)
		move.b	#2,$25(a1)
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.b	#2,$32(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#$58,d0
		move.b	d0,$31(a1)
		add.w	d0,ost_y_pos(a1)
		move.b	#2,$1C(a1)
		move.l	a0,$34(a1)
		move.b	#$12,$30(a1)
		jsr	FindNextFreeObj
		bne.s	loc_2DF04
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.b	#$A,$24(a1)
		move.l	$34(a0),$34(a1)

loc_2DF04:				
		bra.w	loc_2DFFE
; ===========================================================================

loc_2DF08:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a2
		btst	#7,$22(a2)
		bne.w	JmpTo51_DeleteObject
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		subi_.b	#1,$30(a0)
		bne.s	loc_2DF5A
		move.b	#$12,$30(a0)
		subi_.b	#8,$31(a0)
		bgt.s	loc_2DF5A
		bmi.s	loc_2DF4C
		move.b	#3,$1C(a0)
		move.b	#$C,$30(a0)
		bra.s	loc_2DF5A
; ===========================================================================

loc_2DF4C:				
		move.b	#6,$30(a0)
		move.b	#4,$25(a0)
		rts	
; ===========================================================================

loc_2DF5A:				
		moveq	#0,d0
		move.b	$31(a0),d0
		add.w	d0,ost_y_pos(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2DF76:				
		subi_.b	#1,$30(a0)
		beq.s	loc_2DF80
		rts	
; ===========================================================================

loc_2DF80:				
		subq.b	#1,$32(a0)
		beq.s	loc_2DF9E
		move.b	#2,$1C(a0)
		move.b	#$12,$30(a0)
		move.b	#2,$25(a0)
		move.b	#$58,$31(a0)

loc_2DF9E:				
		movea.l	$34(a0),a1
		move.b	#8,$24(a1)
		move.b	#$58,$31(a1)
		bra.w	JmpTo51_DeleteObject
; ===========================================================================

loc_2DFB2:				
		tst.b	$3C(a0)
		bne.s	loc_2DFEE
		moveq	#0,d0
		move.b	$31(a0),d0
		add.w	ost_y_pos(a0),d0
		lea	($FFFFB000).w,a1
		moveq	#$7F,d1

loc_2DFC8:				
		cmp.w	ost_y_pos(a1),d0
		beq.s	loc_2DFDE
		lea	$40(a1),a1
		dbf	d1,loc_2DFC8
		bra.s	loc_2DFFE
; ===========================================================================

loc_2DFD8:				
		st.b	$3C(a0)
		bra.s	loc_2DFFE
; ===========================================================================

loc_2DFDE:
	if FixBugs
		cmpi.b	#id_BossChemicalPlant,ost_id(a1)	; is object a subtype of the CPZ boss?
	else	
		; 'd7' should not be used here. This causes ExecuteObjects
		; to run too few or too many objects, causing all
		; sorts of errors.			
		moveq	#0,d7
		move.b	#id_BossChemicalPlant,d7		; is object a subtype of the CPZ Boss?
		cmp.b	ost_id(a1),d7				; if so, branch
	endc	
		beq.s	loc_2DFF0
	if FixBugs
		; There is no code to advance to the next object here.
		; This causes the loop to get stuck repeatedly checking the same
		; object until 'd1' reaches 0. If the boss' hovering motion is
		; disabled, then it's actually possible to get the boss'
		; pipe stuck because of this bug by positioning Sonic or Tails at the
		; same Y-coordinate as a pipe segment. Even if the boss's hovering
		; motion isn't disabled, this bug can still cause the pipe's updating
		; to be delayed by a frame.	
		lea sizeof_ost(a1),a1	
	endc	
		dbf	d1,loc_2DFC8
		bra.s	loc_2DFFE
; ===========================================================================

loc_2DFEE:				
		movea.l	a0,a1

loc_2DFF0:				
		bset	#7,$22(a1)
		subi_.b	#8,$31(a0)
		beq.s	loc_2DFD8

loc_2DFFE:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a2
		btst	#7,$22(a2)
		bne.s	loc_2E04E
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		cmpi.b	#4,$25(a0)
		bne.s	loc_2E028
		addi.w	#$18,ost_y_pos(a0)

loc_2E028:				
		btst	#7,$22(a0)
		bne.s	loc_2E04A
		move.w	$38(a0),d0
		add.w	d0,ost_y_pos(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E04A:				
		bra.w	JmpTo51_DeleteObject
; ===========================================================================

loc_2E04E:				
		move.b	#$14,ost_primary_routine(a0)
		jsr	RandomNumber
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,ost_x_vel(a0)
		move.w	#-$380,ost_y_vel(a0)
		swap	d0
		addi.b	#$1E,d0
		andi.w	#$7F,d0
		move.b	d0,$30(a0)
		bra.w	JmpTo34_DisplaySprite
; ===========================================================================

loc_2E07A:				
		btst	#7,$22(a0)
		bne.w	JmpTo51_DeleteObject
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2E092(pc,d0.w),d1
		jmp	off_2E092(pc,d1.w)
; ===========================================================================
off_2E092:	
		dc.w loc_2E098-off_2E092			; 0 
		dc.w loc_2E0DE-off_2E092			; 2
		dc.w loc_2E130-off_2E092			; 4
; ===========================================================================

loc_2E098:				
		addq.b	#2,$25(a0)
		_move.b	#id_BossChemicalPlant,ost_id(a0)
		move.l	#Map_2EADC,ost_mappings(a0)
		move.w	#tile_Nem_CPZBoss+tile_pal4,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#$20,$19(a0)
		move.b	#4,$18(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	#$F,$30(a0)
		move.b	#4,$1C(a0)

loc_2E0DE:				
		subq.b	#1,$30(a0)
		bne.s	loc_2E102
		move.b	#5,$1C(a0)
		move.b	#4,$30(a0)
		addq.b	#2,$25(a0)
		subi.w	#$24,ost_y_pos(a0)
		subi_.w	#2,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_2E102:				
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E130:				
		subq.b	#1,$30(a0)
		bne.s	loc_2E156
		move.b	#0,$25(a0)
		movea.l	$34(a0),a1
		bset	#1,$2E(a1)
		addq.b	#1,$3C(a0)
		cmpi.b	#$C,$3C(a0)
		bge.w	JmpTo51_DeleteObject
		rts	
; ===========================================================================

loc_2E156:				
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		subi.w	#$24,ost_y_pos(a0)
		subi_.w	#2,ost_x_pos(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E180
		addi_.w	#4,ost_x_pos(a0)

loc_2E180:				
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E192:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2E1A0(pc,d0.w),d1
		jmp	off_2E1A0(pc,d1.w)
; ===========================================================================
off_2E1A0:	
		dc.w loc_2E1AC-off_2E1A0			; 0 
		dc.w loc_2E25C-off_2E1A0			; 1
		dc.w loc_2E610-off_2E1A0			; 2
		dc.w loc_2E5A4-off_2E1A0			; 3
		dc.w loc_2E666-off_2E1A0			; 4
		dc.w loc_2E2E8-off_2E1A0			; 5
; ===========================================================================

loc_2E1AC:				
		movea.l	$34(a0),a1
		btst	#7,$2E(a1)
		bne.s	loc_2E20E
		bset	#7,$2E(a1)
		jsr	FindNextFreeObj
		bne.s	loc_2E20E
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$10,$24(a1)
		move.b	#4,$25(a1)
		move.b	#9,$1C(a1)

loc_2E20E:				
		jsr	FindNextFreeObj
		bne.s	loc_2E258
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		addi.b	#$10,$24(a1)
		move.b	#6,$25(a1)

loc_2E258:				
		addq.b	#2,$25(a0)

loc_2E25C:				
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		subi.w	#$38,ost_y_pos(a0)
		btst	#7,$22(a0)
		bne.s	loc_2E2E0
		btst	#2,$2E(a1)
		beq.s	loc_2E28C
		bsr.w	loc_2E4CE
		bsr.w	loc_2E3F2
		bra.s	loc_2E2AC
; ===========================================================================

loc_2E28C:				
		btst	#5,$2E(a1)
		beq.s	loc_2E2AC
		subq.w	#1,$2A(a0)
		bne.s	loc_2E2AC
		bclr	#5,$2E(a1)
		bset	#3,$2E(a1)
		bset	#4,$2E(a1)

loc_2E2AC:				
		movea.l	$34(a0),a1
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		move.w	$2E(a0),d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E2CA
		neg.w	d0

loc_2E2CA:				
		add.w	d0,ost_x_pos(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E2E0:				
		move.b	#$A,$25(a0)
		bra.s	loc_2E2AC
; ===========================================================================

loc_2E2E8:				
		pushr.l	d7
		move.b	#$1E,$30(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		subi.w	#$38,ost_y_pos(a0)
		move.w	$2E(a0),d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E314
		neg.w	d0

loc_2E314:				
		add.w	d0,ost_x_pos(a0)
		move.b	#$20,$1A(a0)
		move.b	#$14,ost_primary_routine(a0)
		jsr	RandomNumber
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,ost_x_vel(a0)
		move.w	#-$380,ost_y_vel(a0)
		moveq	#0,d7
		move.w	$2E(a0),d0
		addi.w	#$18,d0
		bge.s	loc_2E356
		addi.w	#$18,d0
		bge.s	loc_2E354
		addi.w	#$18,d0
		bge.s	loc_2E352
		addq.w	#1,d7

loc_2E352:				
		addq.w	#1,d7

loc_2E354:				
		addq.w	#1,d7

loc_2E356:				
		subq.w	#1,d7
		bmi.w	loc_2E3E6

loc_2E35C:				
		jsr	FindFreeObj
		bne.w	JmpTo51_DeleteObject
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.b	#$21,$1A(a1)
		move.b	#$14,$24(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#2,$18(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi_.w	#8,ost_y_pos(a1)
		move.w	d7,d2
		add.w	d2,d2
		move.w	word_2E3EC(pc,d2.w),d3
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E3BC
		neg.w	d3

loc_2E3BC:				
		add.w	d3,ost_x_pos(a1)
		jsr	RandomNumber
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,ost_x_vel(a1)
		move.w	#-$380,ost_y_vel(a1)
		swap	d0
		addi.b	#$1E,d0
		andi.w	#$7F,d0
		move.b	d0,$30(a1)
		dbf	d7,loc_2E35C

loc_2E3E6:				
		popr.l	d7
		
    if RemoveJmpTos
JmpTo34_DisplaySprite:
    endc
    		
		jmpto	DisplaySprite,JmpTo34_DisplaySprite
; ===========================================================================
word_2E3EC:	dc.w   $18					; 0
		dc.w   $30					; 1
		dc.w   $48					; 2
; ===========================================================================

loc_2E3F2:				
		btst	#3,$2E(a1)
		bne.w	locret_2E4CC
		btst	#4,$2E(a1)

loc_2E402:
		bne.w	locret_2E4CC

loc_2E406:
		cmpi.w	#-$14,$2E(a0)
		blt.s	loc_2E426
		btst	#1,$2D(a1)
		beq.w	locret_2E4CC
		bclr	#1,$2D(a1)
		bset	#2,$2D(a1)
		bra.s	loc_2E464
; ===========================================================================

loc_2E426:				
		cmpi.w	#-$40,$2E(a0)
		bge.w	locret_2E4CC
		move.w	(v_ost_player1+ost_x_pos).w,d1
		subi_.w	#8,d1
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E454
		add.w	$2E(a0),d1
		sub.w	ost_x_pos(a0),d1
		bgt.w	locret_2E4CC
		cmpi.w	#-$18,d1
		bge.s	loc_2E464
		rts	
; ===========================================================================

loc_2E454:				
		sub.w	$2E(a0),d1
		sub.w	ost_x_pos(a0),d1
		blt.s	locret_2E4CC
		cmpi.w	#$18,d1
		bgt.s	locret_2E4CC

loc_2E464:				
		bset	#5,$2E(a1)
		bclr	#2,$2E(a1)
		move.w	#$12,$2A(a0)
		jsr	FindNextFreeObj
		bne.s	locret_2E4CC
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.b	#$10,$24(a1)
		move.b	#8,$25(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#5,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$B,$1C(a1)
		move.w	#$24,$2A(a1)

locret_2E4CC:				
		rts	
; ===========================================================================

loc_2E4CE:				
		moveq	#1,d0
		btst	#4,$2E(a1)
		bne.s	loc_2E4DA
		moveq	#-1,d0

loc_2E4DA:				
		cmpi.w	#-$10,$2E(a0)
		bne.s	loc_2E552
		bclr	#4,$2E(a1)
		beq.s	loc_2E552
		bclr	#2,$2E(a1)
		clr.b	$25(a0)
		movea.l	a1,a2
		jsr	FindNextFreeObj
		bne.s	locret_2E550
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	$34(a0),$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#4,$24(a1)
		move.b	#0,$25(a0)
		bra.s	locret_2E550
; ===========================================================================
		move.b	#$A,$24(a1)
		move.l	$34(a0),$34(a1)

locret_2E550:				
		rts	
; ===========================================================================

loc_2E552:				
		move.w	$2E(a0),d1
		cmpi.w	#-$28,d1
		bge.s	loc_2E59C
		cmpi.w	#-$40,d1
		bge.s	loc_2E594
		move.b	#8,$1C(a0)
		cmpi.w	#-$58,d1
		blt.s	loc_2E57E
		bgt.s	loc_2E578
		btst	#4,$2E(a1)
		beq.s	locret_2E57C

loc_2E578:				
		add.w	d0,$2E(a0)

locret_2E57C:				
		rts	
; ===========================================================================

loc_2E57E:				
		move.w	#-$58,$2E(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E578
		move.w	#$58,$2E(a0)
		bra.s	loc_2E578
; ===========================================================================

loc_2E594:				
		move.b	#7,$1C(a0)
		bra.s	loc_2E578
; ===========================================================================

loc_2E59C:				
		move.b	#6,$1C(a0)
		bra.s	loc_2E578
; ===========================================================================

loc_2E5A4:				
		btst	#7,$22(a0)
		bne.w	JmpTo51_DeleteObject
		movea.l	$34(a0),a1
		move.l	$34(a1),d0
		beq.w	JmpTo51_DeleteObject
		movea.l	d0,a1
		bclr	#3,$2E(a1)
		beq.s	loc_2E5D8
		move.b	#$C,ost_primary_routine(a0)
		move.b	#0,$25(a0)
		move.b	#-$79,$20(a0)
		bra.s	loc_2E638
; ===========================================================================

loc_2E5D8:				
		bclr	#1,$2E(a1)
		bne.s	loc_2E5E8
		tst.b	$1C(a0)
		bne.s	loc_2E638
		rts	
; ===========================================================================

loc_2E5E8:				
		tst.b	$1C(a0)
		bne.s	loc_2E5F4
		move.b	#$B,$1C(a0)

loc_2E5F4:				
		addi_.b	#1,$1C(a0)
		cmpi.b	#$17,$1C(a0)
		blt.s	loc_2E638
		bclr	#0,$2E(a1)
		bset	#2,$2E(a1)
		bra.s	loc_2E638
; ===========================================================================

loc_2E610:				
		btst	#7,$22(a0)
		bne.w	JmpTo51_DeleteObject
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		btst	#5,$2E(a1)
		beq.s	loc_2E638
		cmpi.b	#9,$1C(a0)
		bne.s	loc_2E638
		move.b	#$A,$1C(a0)

loc_2E638:				
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	ost_render(a1),ost_render(a0)
		move.b	$22(a1),$22(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E666:				
		btst	#7,$22(a0)
		bne.w	JmpTo51_DeleteObject
		subq.w	#1,$2A(a0)
		beq.w	JmpTo51_DeleteObject
		bra.s	loc_2E638
; ===========================================================================

loc_2E67A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2E688(pc,d0.w),d1
		jmp	off_2E688(pc,d1.w)
; ===========================================================================
off_2E688:	dc.w loc_2E692-off_2E688			; 0 
		dc.w loc_2E6CA-off_2E688			; 1
		dc.w loc_2E7D0-off_2E688			; 2
		dc.w loc_2E746-off_2E688			; 3
		dc.w loc_2E790-off_2E688			; 4
; ===========================================================================

loc_2E692:				
		addq.b	#2,$25(a0)
		move.b	#$20,ost_height(a0)
		move.b	#$19,$1C(a0)
		move.w	#0,ost_y_vel(a0)
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		btst	#2,$2D(a1)
		beq.s	loc_2E6CA
		bclr	#2,$2D(a1)
		move.b	#6,$25(a0)
		move.w	#9,$2A(a0)

loc_2E6CA:				
					
		jsrto	ObjectFall,JmpTo3_ObjectFall
		jsr	FindFloorObj
		tst.w	d1
		bmi.s	loc_2E6F2
		cmpi.w	#$518,ost_y_pos(a0)
		bge.s	loc_2E728
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E6F2:				
		add.w	d1,ost_y_pos(a0)
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		bset	#2,$2E(a1)
		bset	#4,$2E(a1)
		move.b	#2,$25(a1)
		addq.b	#2,$25(a0)
		move.b	#0,$28(a0)
		move.w	#$E6,d0	
		jsrto	PlaySound,JmpTo5_PlaySound
		jmp	DisplaySprite
; ===========================================================================

loc_2E728:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		bset	#2,$2E(a1)
		bset	#4,$2E(a1)
		move.b	#2,$25(a1)
		bra.w	JmpTo51_DeleteObject
; ===========================================================================

loc_2E746:				
		subi_.w	#1,$2A(a0)
		bpl.s	loc_2E77A
		move.b	#2,$18(a0)
		move.b	#$25,$1A(a0)
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addq.b	#2,$25(a0)
		move.b	#8,$1E(a0)
		bra.s	loc_2E790
; ===========================================================================

loc_2E77A:				
		jsrto	SpeedToPos,JmpTo23_SpeedToPos
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E790:				
					
		subi_.b	#1,$1E(a0)
		bpl.s	loc_2E7B6
		addi_.b	#1,$1A(a0)
		move.b	#8,$1E(a0)
		cmpi.b	#$27,$1A(a0)
		bgt.w	loc_2E728
		blt.s	loc_2E7B6
		addi.b	#$C,$1E(a0)

loc_2E7B6:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		jmp	DisplaySprite
; ===========================================================================

loc_2E7D0:				
		moveq	#0,d0
		move.b	$28(a0),d0
		bne.w	loc_2E8CC
		addi.w	#$18,ost_y_pos(a0)
		addi.w	#$C,ost_x_pos(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2E7F4
		subi.w	#$18,ost_x_pos(a0)

loc_2E7F4:				
		move.b	#4,ost_height(a0)
		move.b	#4,$17(a0)

loc_2E800:
		addq.b	#1,$28(a0)

loc_2E804:
		move.b	#9,$1A(a0)

loc_2E80A:
		move.w	ost_y_vel(a0),d0
		lsr.w	#1,d0
		neg.w	d0
		move.w	d0,ost_y_vel(a0)
		jsr	RandomNumber
		asr.w	#6,d0
		bmi.s	loc_2E824
		addi.w	#$200,d0

loc_2E824:				
		addi.w	#-$100,d0
		move.w	d0,ost_x_vel(a0)
		move.b	#0,$20(a0)
		moveq	#3,d3

loc_2E834:				
		jsr	FindNextFreeObj
		bne.w	BranchTo_JmpTo34_DisplaySprite
		_move.b	#id_BossChemicalPlant,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,ost_mappings(a1)
		move.w	#tile_Nem_CPZBoss+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#2,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#4,ost_height(a1)
		move.b	#4,$17(a1)
		move.b	#9,$1A(a1)
		move.b	#$C,$24(a1)
		move.b	#4,$25(a1)
		move.b	#1,$28(a1)
		move.w	ost_y_vel(a0),ost_y_vel(a1)
		move.b	$20(a0),$20(a1)
		jsr	RandomNumber
		asr.w	#6,d0
		bmi.s	loc_2E8B2
		addi.w	#$80,d0	

loc_2E8B2:				
		addi.w	#-$80,d0
		move.w	d0,ost_x_vel(a1)
		swap	d0
		andi.w	#$3FF,d0
		sub.w	d0,ost_y_vel(a1)
		dbf	d3,loc_2E834

BranchTo_JmpTo34_DisplaySprite:				
		jmpto	DisplaySprite,JmpTo34_DisplaySprite
; ===========================================================================

loc_2E8CC:				
		jsrto	ObjectFall,JmpTo3_ObjectFall
		jsr	FindFloorObj
		tst.w	d1
		bmi.s	loc_2E8DE
		jmpto	DespawnObject,JmpTo35_DespawnObject
; ===========================================================================

loc_2E8DE:				
		bra.w	JmpTo51_DeleteObject
; ===========================================================================

		; a bit of unused/dead code here
		add.w	d1,ost_y_pos(a0)
		move.w	ost_y_vel(a0),d0
		lsr.w	#1,d0
		neg.w	d0
		move.w	d0,ost_y_vel(a0)
		jmpto	DisplaySprite,JmpTo34_DisplaySprite
; ===========================================================================

loc_2E8F6:				
		movea.l	$34(a0),a1
		move.l	ost_x_pos(a1),ost_x_pos(a0)
		move.l	ost_y_pos(a1),ost_y_pos(a0)

loc_2E906:
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		move.b	$3E(a1),d0
		cmpi.b	#$1F,d0
		bne.s	loc_2E922
		move.b	#2,$1C(a0)

loc_2E922:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_2E932
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_2E938

loc_2E932:				
		move.b	#3,$1C(a0)

loc_2E938:				
		lea	(off_2ED5C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================
byte_2E94A:	dc.b   0					; 0
		dc.b $FF					; 1
		dc.b   1					; 2
		dc.b   0					; 3
; ===========================================================================

loc_2E94E:				
		btst	#7,$22(a0)
		bne.s	loc_2E9A8
		movea.l	$34(a0),a1
		move.l	ost_x_pos(a1),ost_x_pos(a0)
		move.l	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		subq.b	#1,$1E(a0)
		bpl.s	loc_2E996
		move.b	#1,$1E(a0)
		move.b	$2A(a0),d0
		addq.b	#1,d0
		cmpi.b	#2,d0
		ble.s	loc_2E98C
		moveq	#0,d0

loc_2E98C:				
		move.b	byte_2E94A(pc,d0.w),$1A(a0)
		move.b	d0,$2A(a0)

loc_2E996:				
		cmpi.b	#-1,$1A(a0)
		bne.w	JmpTo34_DisplaySprite
		move.b	#0,$1A(a0)
		rts	
; ===========================================================================

loc_2E9A8:				
		movea.l	$34(a0),a1
		btst	#6,$2E(a1)
		bne.s	loc_2E9B6
		rts	
; ===========================================================================

loc_2E9B6:				
    if FixBugs
		addq.b	#2,ost_primary_routine(a0)
   	 else
		; Eggman is supposed to starting leaving a trail of smoke here, but
		; this code is incorrect which prevents it from appearing.
		; This should be 'ost_primary_routine' instead of 'ost_secondary_routine'...
		addq.b	#2,ost_secondary_routine(a0)
    endc
		move.l	#Map_2EEA0,ost_mappings(a0)
	if FixBugs
		; ...and this should be 'tile_Nem_BossSmoke_CPZ+tile_pal2' instead.
		move.w	#tile_Nem_BossSmoke_CPZ+tile_pal2,ost_tile(a0)	
	else	
		move.w	#tile_Nem_EggpodJets_CPZ,ost_tile(a0)
	endc	
		jsrto	Adjust2PArtPointer,JmpTo60_Adjust2PArtPointer
		move.b	#0,$1A(a0)
		move.b	#5,$1E(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addi_.w	#4,ost_y_pos(a0)
		subi.w	#$28,ost_x_pos(a0)
		rts	
; ===========================================================================

loc_2E9F6:				
		subq.b	#1,$1E(a0)
		bpl.s	BranchTo2_JmpTo34_DisplaySprite
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#4,$1A(a0)
		bne.w	BranchTo2_JmpTo34_DisplaySprite
		move.b	#0,$1A(a0)
		movea.l	$34(a0),a1
		move.b	ost_id(a1),d0
		beq.w	JmpTo51_DeleteObject
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addi_.w	#4,ost_y_pos(a0)
		subi.w	#$28,ost_x_pos(a0)

BranchTo2_JmpTo34_DisplaySprite:				
		jmpto	DisplaySprite,JmpTo34_DisplaySprite
; ===========================================================================
off_2EA3C:	
		dc.w byte_2EA72-off_2EA3C			; 0 
		dc.w byte_2EA75-off_2EA3C			; 1
		dc.w byte_2EA78-off_2EA3C			; 2
		dc.w byte_2EA7D-off_2EA3C			; 3
		dc.w byte_2EA81-off_2EA3C			; 4
		dc.w byte_2EA88-off_2EA3C			; 5
		dc.w byte_2EA8B-off_2EA3C			; 6
		dc.w byte_2EA8E-off_2EA3C			; 7
		dc.w byte_2EA91-off_2EA3C			; 8
		dc.w byte_2EA94-off_2EA3C			; 9
		dc.w byte_2EA97-off_2EA3C			; 10
		dc.w byte_2EAA3-off_2EA3C			; 11
		dc.w byte_2EAAE-off_2EA3C			; 12
		dc.w byte_2EAB1-off_2EA3C			; 13
		dc.w byte_2EAB4-off_2EA3C			; 14
		dc.w byte_2EAB7-off_2EA3C			; 15
		dc.w byte_2EABA-off_2EA3C			; 16
		dc.w byte_2EABD-off_2EA3C			; 17
		dc.w byte_2EAC0-off_2EA3C			; 18
		dc.w byte_2EAC3-off_2EA3C			; 19
		dc.w byte_2EAC6-off_2EA3C			; 20
		dc.w byte_2EAC9-off_2EA3C			; 21
		dc.w byte_2EACC-off_2EA3C			; 22
		dc.w byte_2EACF-off_2EA3C			; 23
		dc.w byte_2EAD2-off_2EA3C			; 24
		dc.w byte_2EAD5-off_2EA3C			; 25
		dc.w byte_2EAD9-off_2EA3C			; 26
byte_2EA72:	dc.b  $F,  0,$FF				; 0 
byte_2EA75:	dc.b  $F,  1,$FF				; 0 
byte_2EA78:	dc.b   5,  2,  3,  2,$FF			; 0 
byte_2EA7D:	dc.b   5,  2,  3,$FF				; 0 
byte_2EA81:	dc.b   2,  4,  5,  6,  7,  8,$FF		; 0 
byte_2EA88:	dc.b   3,  9,$FF				; 0 
byte_2EA8B:	dc.b  $F, $A,$FF				; 0 
byte_2EA8E:	dc.b  $F,$1C,$FF				; 0 
byte_2EA91:	dc.b  $F,$1E,$FF				; 0 
byte_2EA94:	dc.b  $F, $B,$FF				; 0 
byte_2EA97:	dc.b   3, $C, $C, $D, $D, $D, $D, $D, $C, $C,$FD,  9 ; 0
					
byte_2EAA3:	dc.b   3, $E, $E, $F, $F, $F, $F, $F, $E, $E,$FF ; 0 
byte_2EAAE:	dc.b  $F,$10,$FF				; 0 
byte_2EAB1:	dc.b  $F,$11,$FF				; 0 
byte_2EAB4:	dc.b  $F,$12,$FF				; 0 
byte_2EAB7:	dc.b  $F,$13,$FF				; 0 
byte_2EABA:	dc.b  $F,$14,$FF				; 0 
byte_2EABD:	dc.b  $F,$15,$FF				; 0 
byte_2EAC0:	dc.b  $F,$16,$FF				; 0 
byte_2EAC3:	dc.b  $F,$17,$FF				; 0 
byte_2EAC6:	dc.b  $F,$18,$FF				; 0 
byte_2EAC9:	dc.b  $F,$19,$FF				; 0 
byte_2EACC:	dc.b  $F,$1A,$FF				; 0 
byte_2EACF:	dc.b  $F,$1B,$FF				; 0 
byte_2EAD2:	dc.b  $F,$1C,$FF				; 0 
byte_2EAD5:	dc.b   1,$1D,$1F,$FF				; 0 
byte_2EAD9:	dc.b  $F,$1E,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2EADC:				
		dc.w word_2EB2C-Map_2EADC			; 0
		dc.w word_2EB46-Map_2EADC			; 1
		dc.w word_2EB50-Map_2EADC			; 2
		dc.w word_2EB5A-Map_2EADC			; 3
		dc.w word_2EB64-Map_2EADC			; 4
		dc.w word_2EB6E-Map_2EADC			; 5
		dc.w word_2EB78-Map_2EADC			; 6
		dc.w word_2EB82-Map_2EADC			; 7
		dc.w word_2EB8C-Map_2EADC			; 8
		dc.w word_2EB96-Map_2EADC			; 9
		dc.w word_2EBA0-Map_2EADC			; 10
		dc.w word_2EBB2-Map_2EADC			; 11
		dc.w word_2EBBC-Map_2EADC			; 12
		dc.w word_2EBC6-Map_2EADC			; 13
		dc.w word_2EBD0-Map_2EADC			; 14
		dc.w word_2EBDA-Map_2EADC			; 15
		dc.w word_2EBE4-Map_2EADC			; 16
		dc.w word_2EBEE-Map_2EADC			; 17
		dc.w word_2EBF8-Map_2EADC			; 18
		dc.w word_2EC02-Map_2EADC			; 19
		dc.w word_2EC0C-Map_2EADC			; 20
		dc.w word_2EC1E-Map_2EADC			; 21
		dc.w word_2EC30-Map_2EADC			; 22
		dc.w word_2EC42-Map_2EADC			; 23
		dc.w word_2EC54-Map_2EADC			; 24
		dc.w word_2EC6E-Map_2EADC			; 25
		dc.w word_2EC88-Map_2EADC			; 26
		dc.w word_2ECA2-Map_2EADC			; 27
		dc.w word_2ECBC-Map_2EADC			; 28
		dc.w word_2ECD6-Map_2EADC			; 29
		dc.w word_2ECE0-Map_2EADC			; 30
		dc.w word_2ED02-Map_2EADC			; 31
		dc.w word_2ED0C-Map_2EADC			; 32
		dc.w word_2ED16-Map_2EADC			; 33
		dc.w word_2ED20-Map_2EADC			; 34
		dc.w word_2ED2A-Map_2EADC			; 35
		dc.w word_2ED34-Map_2EADC			; 36
		dc.w word_2ED3E-Map_2EADC			; 37
		dc.w word_2ED48-Map_2EADC			; 38
		dc.w word_2ED52-Map_2EADC			; 39
word_2EB2C:	dc.w 3			
		dc.w $B80D,    0,    0,$FFF8			; 0
		dc.w $C80A,    8,    4,	   8			; 4
		dc.w $E005,  $11,    8,	 $10			; 8
word_2EB46:	dc.w 1			
		dc.w $FC00,  $24,  $12,$FFFC			; 0
word_2EB50:	dc.w 1			
		dc.w $FC04,  $25,  $12,$FFF5			; 0
word_2EB5A:	dc.w 1			
		dc.w $FC04,  $27,  $13,$FFF6			; 0
word_2EB64:	dc.w 1			
		dc.w $C400,  $36,  $1B,$FFFB			; 0
word_2EB6E:	dc.w 1			
		dc.w $C400,  $37,  $1B,$FFFB			; 0
word_2EB78:	dc.w 1			
		dc.w $C400,  $38,  $1C,$FFFB			; 0
word_2EB82:	dc.w 1			
		dc.w $C401,  $39,  $1C,$FFFB			; 0
word_2EB8C:	dc.w 1			
		dc.w $C401,  $3B,  $1D,$FFFB			; 0
word_2EB96:	dc.w 1			
		dc.w $FC00,  $3D,  $1E,$FFFC			; 0
word_2EBA0:	dc.w 2			
		dc.w	$E,  $15,   $A,	   0
		dc.w  $808,  $21,  $10,	 $18
word_2EBB2:	dc.w 1			
		dc.w $1808,  $29,  $14,	   0			; 0
word_2EBBC:	dc.w 1			
		dc.w $1808,  $2C,  $16,	   0			; 0
word_2EBC6:	dc.w 1			
		dc.w $1808,  $2F,  $17,	   8			; 0
word_2EBD0:	dc.w 1			
		dc.w $1804,  $32,  $19,$FFFC			; 0
word_2EBDA:	dc.w 1			
		dc.w $1804,  $34,  $1A,$FFFC			; 0
word_2EBE4:	dc.w 1			
		dc.w $1008,  $63,  $31,	   0			; 0
word_2EBEE:	dc.w 1			
		dc.w $1008,  $66,  $33,	   0			; 0
word_2EBF8:	dc.w 1			
		dc.w $1008,  $69,  $34,	   0			; 0
word_2EC02:	dc.w 1			
word_2EC04:	dc.w $1008,  $6C,  $36,	   0			; 0
word_2EC0C:	dc.w 2			
word_2EC0E:	dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $63,  $31,	   0			; 4
word_2EC1E:	dc.w 2			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $66,  $33,	   0			; 4
word_2EC30:	dc.w 2			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $69,  $34,	   0			; 4
word_2EC42:	dc.w 2			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $6C,  $36,	   0			; 4
word_2EC54:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $6C,  $36,	   0			; 4
		dc.w	 8,  $63,  $31,	   0			; 8
word_2EC6E:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $6C,  $36,	   0			; 4
		dc.w	 8,  $66,  $33,	   0			; 8
word_2EC88:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $6C,  $36,	   0			; 4
		dc.w	 8,  $69,  $34,	   0			; 8
word_2ECA2:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0			; 0
		dc.w  $808,  $6C,  $36,	   0			; 4
		dc.w	 8,  $6C,  $36,	   0			; 8
word_2ECBC:	dc.w 3			
		dc.w	$E,  $15,   $A,	   0			; 0
		dc.w  $808,  $21,  $10,	 $18			; 4
		dc.w  $808,  $21,  $10,	 $30			; 8
word_2ECD6:	dc.w 1			
		dc.w	$B,  $3E,  $1F,	   0			; 0
word_2ECE0:	dc.w 4			
		dc.w	$E,  $15,   $A,	   0			; 0
		dc.w  $808,  $21,  $10,	 $18			; 4
		dc.w  $808,  $21,  $10,	 $30			; 8
		dc.w  $808,  $21,  $10,	 $48			; 12
word_2ED02:	dc.w 1			
word_2ED04:	dc.w	$B, $83E, $81F,	   0			; 0
word_2ED0C:	dc.w 1			
		dc.w	$E,  $15,   $A,	   0			; 0
word_2ED16:	dc.w 1			
		dc.w	 8,  $21,  $10,	   0			; 0
word_2ED20:	dc.w 1			
		dc.w $B80D,    0,    0,$FFF8			; 0
word_2ED2A:	dc.w 1			
		dc.w $C80A,    8,    4,	   8			; 0
word_2ED34:	dc.w 1			
		dc.w $E005,  $11,    8,	 $10			; 0
word_2ED3E:	dc.w 1			
		dc.w $E00A,  $4A,  $25,$FFF0			; 0
word_2ED48:	dc.w 1			
		dc.w $E80D,  $53,  $29,$FFF0			; 0
word_2ED52:	dc.w 1			
		dc.w $E80D,  $5B,  $2D,$FFF0			; 0
off_2ED5C:	dc.w byte_2ED66-off_2ED5C			; 0 
		dc.w byte_2ED69-off_2ED5C			; 1
		dc.w byte_2ED6D-off_2ED5C			; 2
		dc.w byte_2ED76-off_2ED5C			; 3
		dc.w byte_2ED7F-off_2ED5C			; 4
byte_2ED66:	dc.b  $F,  0,$FF				; 0 
byte_2ED69:	dc.b   7,  1,  2,$FF				; 0 
byte_2ED6D:	dc.b   7,  5,  5,  5,  5,  5,  5,$FD,  1	; 0 
byte_2ED76:	dc.b   7,  3,  4,  3,  4,  3,  4,$FD,  1	; 0 
byte_2ED7F:	dc.b  $F,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,$FD,  1 ; 0
					
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2ED8C:				
		dc.w word_2ED9A-Map_2ED8C			; 0
		dc.w word_2EDBC-Map_2ED8C			; 1
		dc.w word_2EDDE-Map_2ED8C			; 2
		dc.w word_2EE00-Map_2ED8C			; 3
		dc.w word_2EE22-Map_2ED8C			; 4
		dc.w word_2EE44-Map_2ED8C			; 5
		dc.w word_2EE66-Map_2ED8C			; 6
word_2ED9A:	dc.w 4			
		dc.w $F805,    0,    0,$FFE0			; 0
		dc.w  $805,    4,    2,$FFE0			; 4
		dc.w $F80F,    8,    4,$FFF0			; 8
		dc.w $F807,  $18,   $C,	 $10			; 12
word_2EDBC:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $30,  $18,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2EDDE:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $38,  $1C,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2EE00:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $40,  $20,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2EE22:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $48,  $24,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2EE44:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $50,  $28,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2EE66:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $58,  $2C,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2EE88:				
		dc.w word_2EE8C-Map_2EE88			; 0
		dc.w word_2EE96-Map_2EE88			; 1
word_2EE8C:	dc.w 1			
		dc.w	 5,    0,    0,	 $1C			; 0
word_2EE96:	dc.w 1			
		dc.w	 5,    4,    2,	 $1C			; 0
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2EEA0:				
		dc.w word_2EEA8-Map_2EEA0			; 0
		dc.w word_2EEB2-Map_2EEA0			; 1
		dc.w word_2EEBC-Map_2EEA0			; 2
		dc.w word_2EEC6-Map_2EEA0			; 3
word_2EEA8:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8			; 0
word_2EEB2:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8			; 0
word_2EEBC:	dc.w 1			
		dc.w $F805,    8,    4,$FFF8			; 0
word_2EEC6:	dc.w 1			
		dc.w $F805,   $C,    6,$FFF8			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo34_DisplaySprite:				
		jmp	DisplaySprite
JmpTo51_DeleteObject:				
		jmp	DeleteObject
JmpTo35_DespawnObject:				
		jmp	DespawnObject
JmpTo5_PlaySound:				
		jmp	PlaySound
JmpTo8_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo5_AddPLC:				
		jmp	AddPLC
JmpTo2_AddPoints:				
		jmp	AddPoints
JmpTo60_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
JmpTo3_ObjectFall:				
		jmp	ObjectFall
JmpTo23_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 56 - EHZ boss
; the fuselage of Eggman's autogyro is the parent object
; ----------------------------------------------------------------------------

BossEmeraldHill:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_2EF26(pc,d0.w),d1
		jmp	off_2EF26(pc,d1.w)
; ===========================================================================
off_2EF26:	
		dc.w loc_2EF36-off_2EF26			; 0 
		dc.w loc_2F262-off_2EF26			; 2
		dc.w loc_2F54E-off_2EF26			; 4
		dc.w loc_2F5F6-off_2EF26			; 6
		dc.w loc_2F664-off_2EF26			; 8
		dc.w loc_2F7F4-off_2EF26			; $A
		dc.w loc_2F52A-off_2EF26			; $C
		dc.w loc_2F8DA-off_2EF26			; $E
; ===========================================================================

loc_2EF36:				
		move.l	#Map_2FAF8,ost_mappings(a0)
		move.w	#tile_Nem_Eggpod_EHZ+tile_pal2,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#-$7F,$28(a0)
		move.w	#$29D0,ost_x_pos(a0)
		move.w	#$426,ost_y_pos(a0)
		move.b	#$20,$19(a0)
		move.b	#$14,ost_height(a0)
		move.b	#4,$18(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$21(a0)
		addq.b	#2,ost_primary_routine(a0)
		move.w	ost_x_pos(a0),$30(a0)
		move.w	ost_y_pos(a0),$38(a0)
		jsrto	Adjust2PArtPointer,JmpTo61_Adjust2PArtPointer
		jsr	FindNextFreeObj
		bne.w	loc_2EFE4
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	a1,$34(a0)
		move.l	#Map_2FAF8,ost_mappings(a1)
		move.w	#tile_Nem_Eggpod_EHZ,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#4,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$E,$24(a1)
		move.b	#1,$1C(a1)
		move.b	ost_render(a0),ost_render(a1)

loc_2EFE4:				
		jsr	FindNextFreeObj
		bne.s	loc_2F032
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2FA58,ost_mappings(a1)

loc_2EFFE:
		move.w	#tile_Nem_EHZBoss,ost_tile(a1)

loc_2F004:
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2

loc_2F008:
		move.b	#render_rel,ost_render(a1)
		move.b	#$30,$19(a1)
		move.b	#$10,ost_height(a1)
		move.b	#3,$18(a1)
		move.w	#$2AF0,ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#6,$24(a1)

loc_2F032:				
		bsr.w	loc_2F098
		subi_.w	#8,$38(a0)
		move.w	#$2AF0,ost_x_pos(a0)
		move.w	#$2F8,ost_y_pos(a0)
		jsr	FindNextFreeObj
		bne.s	locret_2F096
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2F970,ost_mappings(a1)
		move.w	#tile_Nem_EggChopperBlades+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$40,$19(a1)
		move.b	#3,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#$1E,$2A(a1)
		move.b	#4,$24(a1)

locret_2F096:				
		rts	
; ===========================================================================

loc_2F098:				
		jsr	FindNextFreeObj
		bne.s	loc_2F110
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2FA58,ost_mappings(a1)
		move.w	#tile_Nem_EHZBoss+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#2,$18(a1)
		move.b	#$10,ost_height(a1)
		move.b	#$10,$17(a1)
		move.w	#$2AF0,ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$1C,ost_x_pos(a1)
		addi.w	#$C,ost_y_pos(a1)
		move.b	#8,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#1,$1C(a1)
		move.w	#$A,$2A(a1)
		move.b	#0,$28(a1)

loc_2F110:				
		jsr	FindNextFreeObj
		bne.s	loc_2F188
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2FA58,ost_mappings(a1)
		move.w	#tile_Nem_EHZBoss+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#2,$18(a1)
		move.b	#$10,ost_height(a1)
		move.b	#$10,$17(a1)
		move.w	#$2AF0,ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#-$C,ost_x_pos(a1)
		addi.w	#$C,ost_y_pos(a1)
		move.b	#8,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#1,$1C(a1)
		move.w	#$A,$2A(a1)
		move.b	#1,$28(a1)

loc_2F188:				
		jsr	FindNextFreeObj
		bne.s	loc_2F200
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2FA58,ost_mappings(a1)
		move.w	#tile_Nem_EHZBoss+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$10,$19(a1)
		move.b	#3,$18(a1)
		move.b	#$10,ost_height(a1)
		move.b	#$10,$17(a1)
		move.w	#$2AF0,ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#-$2C,ost_x_pos(a1)
		addi.w	#$C,ost_y_pos(a1)
		move.b	#8,$24(a1)
		move.b	#6,$1A(a1)
		move.b	#2,$1C(a1)
		move.w	#$A,$2A(a1)
		move.b	#2,$28(a1)

loc_2F200:				
		jsr	FindNextFreeObj

loc_2F206:
		bne.s	locret_2F260

loc_2F208:
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2FA58,ost_mappings(a1)
		move.w	#tile_Nem_EHZBoss+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#2,$18(a1)
		move.w	#$2AF0,ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#-$36,ost_x_pos(a1)
		addi_.w	#8,ost_y_pos(a1)
		move.b	#$A,$24(a1)
		move.b	#1,$1A(a1)
		move.b	#0,$1C(a1)

locret_2F260:				
		rts	
; ===========================================================================

loc_2F262:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2F270(pc,d0.w),d1
		jmp	off_2F270(pc,d1.w)
; ===========================================================================
off_2F270:	dc.w loc_2F27C-off_2F270			; 0 
		dc.w loc_2F2A8-off_2F270			; 1
		dc.w loc_2F304-off_2F270			; 2
		dc.w loc_2F336-off_2F270			; 3
		dc.w loc_2F374-off_2F270			; 4
		dc.w loc_2F38A-off_2F270			; 5
; ===========================================================================

loc_2F27C:				
		move.b	#0,$20(a0)
		cmpi.w	#$29D0,ost_x_pos(a0)
		ble.s	loc_2F29A
		subi_.w	#1,ost_x_pos(a0)
		addi_.w	#1,ost_y_pos(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F29A:				
		move.w	#$29D0,ost_x_pos(a0)
		addq.b	#2,$25(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2A8:				
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_2F2B6(pc,d0.w),d1
		jmp	off_2F2B6(pc,d1.w)
; ===========================================================================
off_2F2B6:	dc.w loc_2F2BA-off_2F2B6			; 0 
		dc.w loc_2F2E0-off_2F2B6			; 1
; ===========================================================================

loc_2F2BA:				
		cmpi.w	#$41E,ost_y_pos(a0)
		bge.s	loc_2F2CC
		addi_.w	#1,ost_y_pos(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2CC:				
		addq.b	#2,$2C(a0)
		bset	#0,$2D(a0)
		move.w	#$3C,$2A(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2E0:				
		subi_.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		move.w	#-$200,ost_x_vel(a0)
		addq.b	#2,$25(a0)
		move.b	#$F,$20(a0)
		bset	#1,$2D(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F304:				
		bsr.w	loc_2F4A6
		bsr.w	loc_2F484
		move.w	$2E(a0),d0
		lsr.w	#1,d0
		subi.w	#$14,d0
		move.w	d0,ost_y_pos(a0)
		move.w	#0,$2E(a0)
		move.l	ost_x_pos(a0),d2
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.l	d2,ost_x_pos(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F336:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_2F35C
		bsr.w	BossExplode
		jsrto	ObjectFall,JmpTo4_ObjectFall
		jsrto	FindFloorObj,JmpTo3_FindFloorObj
		tst.w	d1
		bpl.w	JmpTo35_DisplaySprite
		add.w	d1,ost_y_pos(a0)
		move.w	#0,ost_y_vel(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F35C:				
		clr.w	ost_x_vel(a0)
		addq.b	#2,$25(a0)
		move.w	#-$26,$3C(a0)
		move.w	#$C,$2A(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F374:				
		subq.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		addq.b	#2,$25(a0)
		move.b	#0,$2C(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F38A:				
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_2F39C(pc,d0.w),d1
		jsr	off_2F39C(pc,d1.w)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================
off_2F39C:	dc.w loc_2F3A2-off_2F39C			; 0 
		dc.w loc_2F424-off_2F39C			; 1
		dc.w loc_2F442-off_2F39C			; 2
; ===========================================================================

loc_2F3A2:				
		bclr	#0,$2D(a0)
		jsrto	FindNextFreeObj,JmpTo21_FindNextFreeObj
		bne.w	locret_2F422
		_move.b	#id_BossEmeraldHill,ost_id(a1)
		move.l	a0,$34(a1)
		move.l	#off_2F970,ost_mappings(a1)
		move.w	#tile_Nem_EggChopperBlades+tile_pal2,ost_tile(a1)
		jsrto	Adjust2PArtPointer2,JmpTo9_Adjust2PArtPointer2
		move.b	#render_rel,ost_render(a1)
		move.b	#$20,$19(a1)
		move.b	#3,$18(a1)
		move.l	ost_x_pos(a0),ost_x_pos(a1)
		move.l	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$C,ost_y_pos(a1)
		move.b	$22(a0),$22(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#$C,$24(a1)
		move.b	#2,$1C(a1)
		move.w	#$10,$2A(a1)
		move.w	#$32,$2A(a0)
		addq.b	#2,$2C(a0)		
		jsrto	RestoreLevelMusic,JmpTo2_RestoreLevelMusic
		move.b	#1,(v_boss_status).w

locret_2F422:				
		rts	
; ===========================================================================

loc_2F424:				
		subi_.w	#1,$2A(a0)
		bpl.s	locret_2F440
		bset	#2,$2D(a0)
		move.w	#$60,$2A(a0)
		addq.b	#2,$2C(a0)
		jsrto	LoadAnimalExplosionArt,JmpTo2_LoadAnimalExplosionArt

locret_2F440:				
		rts	
; ===========================================================================

loc_2F442:				
		subi_.w	#1,$2A(a0)
		bpl.s	loc_2F45C
		bset	#0,$22(a0)
		bset	#render_xflip_bit,ost_render(a0)
		addq.w	#6,ost_x_pos(a0)
		bra.s	loc_2F460
; ===========================================================================

loc_2F45C:				
		subq.w	#1,ost_y_pos(a0)

loc_2F460:				
		cmpi.w	#$2AB0,(v_boundary_right_next).w
		bcc.s	loc_2F46E
		addq.w	#2,(v_boundary_right_next).w
		bra.s	locret_2F482
; ===========================================================================

loc_2F46E:				
		tst.b	ost_render(a0)
		bmi.s	locret_2F482
		addq.w	#4,sp
		movea.l	$34(a0),a1
		jsrto	DeleteChild,JmpTo5_DeleteChild
		jmpto	DeleteObject,JmpTo52_DeleteObject
; ===========================================================================

locret_2F482:				
		rts	
; ===========================================================================

loc_2F484:				
		move.w	ost_x_pos(a0),d0
		cmpi.w	#$28A0,d0
		ble.s	loc_2F494
		cmpi.w	#$2B08,d0
		blt.s	locret_2F4A4

loc_2F494:				
		bchg	#0,$22(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		neg.w	ost_x_vel(a0)

locret_2F4A4:				
		rts	
; ===========================================================================

loc_2F4A6:				
		cmpi.b	#6,$25(a0)
		bcc.s	locret_2F4EC
		tst.b	$22(a0)
		bmi.s	loc_2F4EE
		tst.b	$20(a0)
		bne.s	locret_2F4EC
		tst.b	$3E(a0)
		bne.s	loc_2F4D0
		move.b	#$20,$3E(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_2F4D0:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_2F4DE
		move.w	#$EEE,d0

loc_2F4DE:				
		move.w	d0,(a1)
		subq.b	#1,$3E(a0)
		bne.s	locret_2F4EC
		move.b	#$F,$20(a0)

locret_2F4EC:				
		rts	
; ===========================================================================

loc_2F4EE:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo3_AddPoints
		move.b	#6,$25(a0)
		move.w	#0,ost_x_vel(a0)

loc_2F500:
		move.w	#-$180,ost_y_vel(a0)
		move.w	#$B3,$3C(a0)
		bset	#3,$2D(a0)
		movea.l	$34(a0),a1
		move.b	#4,$1C(a1)
		move.b	#6,$1A(a1)
		moveq	#$40,d0
		jmpto	AddPLC,JmpTo6_AddPLC
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_2F52A:				
		subi_.w	#1,ost_y_pos(a0)
		subi_.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		move.b	#4,ost_primary_routine(a0)
		lea	(off_2F936).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F54E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2F55C(pc,d0.w),d1
		jmp	off_2F55C(pc,d1.w)
; ===========================================================================
off_2F55C:	
		dc.w loc_2F560-off_2F55C			; 0 
		dc.w loc_2F5C6-off_2F55C			; 1
; ===========================================================================

loc_2F560:				
		movea.l	$34(a0),a1
		cmpi.b	#id_BossEmeraldHill,ost_id(a1)
		bne.w	JmpTo52_DeleteObject
		btst	#0,$2D(a1)
		beq.s	loc_2F58E
		move.b	#1,$1C(a0)
		move.w	#$18,$2A(a0)
		addq.b	#2,$25(a0)
		move.b	#-8,d0
		jsrto	PlaySound,JmpTo6_PlaySound
		bra.s	loc_2F5A0
; ===========================================================================

loc_2F58E:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_2F5A0
		move.b	#-$22,d0
		jsrto	PlaySound,JmpTo6_PlaySound

loc_2F5A0:				
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		lea	(off_2F936).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5C6:				
		subi_.w	#1,$2A(a0)
		bpl.s	loc_2F5E8
		cmpi.w	#-$10,$2A(a0)
		ble.w	JmpTo52_DeleteObject
		move.b	#4,$18(a0)
		addi_.w	#1,ost_y_pos(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5E8:				
		lea	(off_2F936).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5F6:				
		tst.b	$25(a0)
		bne.s	loc_2F626
		cmpi.w	#$28F0,(v_boundary_left_next).w
		bcs.w	JmpTo35_DisplaySprite
		cmpi.w	#$29D0,ost_x_pos(a0)
		ble.s	loc_2F618
		subi_.w	#1,ost_x_pos(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F618:				
		move.w	#$29D0,ost_x_pos(a0)
		addq.b	#2,$25(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F626:				
		movea.l	$34(a0),a1
		btst	#1,$2D(a1)
		beq.w	JmpTo35_DisplaySprite
		btst	#2,$2D(a1)
		bne.w	JmpTo35_DisplaySprite
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addi_.w	#8,ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		bmi.w	JmpTo35_DisplaySprite
		move.b	ost_render(a1),ost_render(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F664:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2F672(pc,d0.w),d1
		jmp	off_2F672(pc,d1.w)
; ===========================================================================
off_2F672:	
		dc.w loc_2F67C-off_2F672			; 0 
		dc.w loc_2F714-off_2F672			; 1
		dc.w loc_2F746-off_2F672			; 2
		dc.w loc_2F7A6-off_2F672			; 3
		dc.w loc_2F7D2-off_2F672			; 4
; ===========================================================================

loc_2F67C:				
		cmpi.w	#$28F0,(v_boundary_left_next).w
		bcs.w	JmpTo35_DisplaySprite
		move.w	#$100,ost_y_vel(a0)
		cmpi.b	#1,$28(a0)
		bgt.s	loc_2F6B6
		beq.s	loc_2F6A6
		cmpi.w	#$29EC,ost_x_pos(a0)
		ble.s	loc_2F6C6
		subi_.w	#1,ost_x_pos(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6A6:				
		cmpi.w	#$29C4,ost_x_pos(a0)
		ble.s	loc_2F6D2
		subi_.w	#1,ost_x_pos(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6B6:				
		cmpi.w	#$29A4,ost_x_pos(a0)
		ble.s	loc_2F6DE
		subi_.w	#1,ost_x_pos(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6C6:				
		move.w	#$29EC,ost_x_pos(a0)
		addq.b	#2,$25(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6D2:				
		move.w	#$29C4,ost_x_pos(a0)
		addq.b	#2,$25(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6DE:				
		move.w	#$29A4,ost_x_pos(a0)
		addq.b	#2,$25(a0)

loc_2F6E8:				
		jsrto	ObjectFall,JmpTo4_ObjectFall
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_2F6FA
		add.w	d1,ost_y_pos(a0)

loc_2F6FA:				
		tst.b	$25(a0)
		beq.s	loc_2F706

loc_2F700:
		move.w	#-$200,ost_x_vel(a0)

loc_2F706:				
		lea	(off_2FA44).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F714:				
		movea.l	$34(a0),a1
		cmpi.b	#id_BossEmeraldHill,ost_id(a1)
		bne.w	JmpTo52_DeleteObject
		btst	#1,$2D(a1)
		beq.w	JmpTo35_DisplaySprite
		addq.b	#2,$25(a0)
		cmpi.b	#2,$18(a0)
		bne.s	loc_2F742
		move.w	ost_y_pos(a0),d0
		movea.l	$34(a0),a1
		add.w	d0,$2E(a1)

loc_2F742:				
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F746:				
		movea.l	$34(a0),a1
		cmpi.b	#id_BossEmeraldHill,ost_id(a1)
		bne.w	JmpTo52_DeleteObject
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		tst.b	$22(a0)
		bpl.s	loc_2F768
		addq.b	#2,$25(a0)

loc_2F768:				
		bsr.w	loc_2F484
		jsrto	ObjectFall,JmpTo4_ObjectFall
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_2F77E
		add.w	d1,ost_y_pos(a0)

loc_2F77E:				
		move.w	#$100,ost_y_vel(a0)
		cmpi.b	#2,$18(a0)
		bne.s	loc_2F798
		move.w	ost_y_pos(a0),d0
		movea.l	$34(a0),a1
		add.w	d0,$2E(a1)

loc_2F798:				
		lea	(off_2FA44).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F7A6:				
		subi_.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		addq.b	#2,$25(a0)
		move.w	#$A,$2A(a0)
		move.w	#-$300,ost_y_vel(a0)
		cmpi.b	#2,$18(a0)
		beq.w	JmpTo35_DisplaySprite
		neg.w	ost_x_vel(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F7D2:				
		subq.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		jsrto	ObjectFall,JmpTo4_ObjectFall
		jsrto	FindFloorObj,JmpTo3_FindFloorObj
		tst.w	d1
		bpl.s	loc_2F7F0
		move.w	#-$200,ost_y_vel(a0)
		add.w	d1,ost_y_pos(a0)

loc_2F7F0:				
		jmpto	DespawnObject,JmpTo36_DespawnObject
; ===========================================================================

loc_2F7F4:				
		tst.b	$25(a0)
		bne.s	loc_2F824
		cmpi.w	#$28F0,(v_boundary_left_next).w

loc_2F800:
		bcs.w	JmpTo35_DisplaySprite
		cmpi.w	#$299A,ost_x_pos(a0)
		ble.s	loc_2F816
		subi_.w	#1,ost_x_pos(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F816:				
		move.w	#$299A,ost_x_pos(a0)
		addq.b	#2,$25(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F824:				
		movea.l	$34(a0),a1
		cmpi.b	#id_BossEmeraldHill,ost_id(a1)
		bne.w	JmpTo52_DeleteObject
		btst	#3,$2D(a1)
		bne.s	loc_2F88A
		bsr.w	loc_2F8AA
		btst	#1,$2D(a1)
		beq.w	JmpTo35_DisplaySprite
		move.b	#-$75,$20(a0)
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		addi.w	#$10,ost_y_pos(a0)
		move.w	#-$36,d0
		btst	#0,$22(a0)
		beq.s	loc_2F878
		neg.w	d0

loc_2F878:				
		add.w	d0,ost_x_pos(a0)
		lea	(off_2FA44).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F88A:				
		move.w	#-3,d0
		btst	#0,$22(a0)
		beq.s	loc_2F898
		neg.w	d0

loc_2F898:				
		add.w	d0,ost_x_pos(a0)
		lea	(off_2FA44).l,a1
		jsrto	AnimateSprite,JmpTo17_AnimateSprite
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F8AA:				
		cmpi.b	#1,$21(a1)
		beq.s	loc_2F8B4
		rts	
; ===========================================================================

loc_2F8B4:				
		move.w	ost_x_pos(a0),d0
		sub.w	($FFFFB008).w,d0
		bpl.s	loc_2F8C8
		btst	#0,$22(a1)
		bne.s	loc_2F8D2
		rts	
; ===========================================================================

loc_2F8C8:				
		btst	#0,$22(a1)
		beq.s	loc_2F8D2
		rts	
; ===========================================================================

loc_2F8D2:				
		bset	#3,$2D(a1)
		rts	
; ===========================================================================

loc_2F8DA:				
		movea.l	$34(a0),a1
		move.l	ost_x_pos(a1),ost_x_pos(a0)
		move.l	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$22(a1),$22(a0)
		move.b	ost_render(a1),ost_render(a0)
		move.b	$3E(a1),d0
		cmpi.b	#$1F,d0
		bne.s	loc_2F906

loc_2F900:
		move.b	#2,$1C(a0)

loc_2F906:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_2F916
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_2F924

loc_2F916:				
		cmpi.b	#2,$1C(a0)
		beq.s	loc_2F924
		move.b	#3,$1C(a0)

loc_2F924:				
		lea	(off_2FAC8).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================
off_2F936:	dc.w byte_2F93C-off_2F936			; 0 
		dc.w byte_2F940-off_2F936			; 1
		dc.w byte_2F956-off_2F936			; 2
byte_2F93C:	dc.b   1,  5,  6,$FF				; 0 
byte_2F940:	dc.b   1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  0,  0,  0 ; 0
					
		dc.b   0,  0,  0,  0,  0,$FF			; 16
byte_2F956:	dc.b   1,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  4,  3,  3,  3,  2 ; 0
					
		dc.b   2,  2,  1,  1,  1,  5,  6,$FE,  2,  0	; 16
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_2F970:	dc.w word_2F97E-off_2F970			; 0 
		dc.w word_2F988-off_2F970			; 1
		dc.w word_2F9B2-off_2F970			; 2
		dc.w word_2F9DC-off_2F970			; 3
		dc.w word_2F9F6-off_2F970			; 4
		dc.w word_2FA10-off_2F970			; 5
		dc.w word_2FA2A-off_2F970			; 6
word_2F97E:	dc.w 1			
		dc.w $D805,    0,    0,	   2			; 0
word_2F988:	dc.w 5			
		dc.w $D805,    4,    2,	   2			; 0
		dc.w $D80D,   $C,    6,	 $12			; 4
		dc.w $D80D,   $C,    6,	 $32			; 8
		dc.w $D80D,   $C,    6,$FFE2			; 12
		dc.w $D80D,   $C,    6,$FFC2			; 16
word_2F9B2:	dc.w 5			
		dc.w $D805,    4,    2,	   2			; 0
		dc.w $D80D,   $C,    6,	 $12			; 4
		dc.w $D805,    8,    4,	 $32			; 8
		dc.w $D80D,   $C,    6,$FFE2			; 12
		dc.w $D805,    8,    4,$FFD2			; 16
word_2F9DC:	dc.w 3			
		dc.w $D805,    4,    2,	   2			; 0
		dc.w $D80D,   $C,    6,	 $12			; 4
		dc.w $D80D,   $C,    6,$FFE2			; 8
word_2F9F6:	dc.w 3			
		dc.w $D805,    4,    2,	   2			; 0
		dc.w $D805,    8,    4,	 $12			; 4
		dc.w $D805,    8,    4,$FFF2			; 8
word_2FA10:	dc.w 3			
		dc.w $D805,    0,    0,	   2			; 0
		dc.w $D80D,   $C,    6,	 $12			; 4
		dc.w $D80D,   $C,    6,	 $32			; 8
word_2FA2A:	dc.w 3			
		dc.w $D805,    4,    2,	   2			; 0
		dc.w $D80D,   $C,    6,$FFE2			; 4
		dc.w $D80D,   $C,    6,$FFC2			; 8
off_2FA44:	dc.w byte_2FA4A-off_2FA44			; 0 
		dc.w byte_2FA4F-off_2FA44			; 1
		dc.w byte_2FA53-off_2FA44			; 2
byte_2FA4A:	dc.b   5,  1,  2,  3,$FF			; 0 
byte_2FA4F:	dc.b   1,  4,  5,$FF				; 0 
byte_2FA53:	dc.b   1,  6,  7,$FF,  0			; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_2FA58:	dc.w word_2FA68-off_2FA58			; 0 
		dc.w word_2FA82-off_2FA58			; 1
		dc.w word_2FA8C-off_2FA58			; 2
		dc.w word_2FA96-off_2FA58			; 3
		dc.w word_2FAA0-off_2FA58			; 4
		dc.w word_2FAAA-off_2FA58			; 5
		dc.w word_2FAB4-off_2FA58			; 6
		dc.w word_2FABE-off_2FA58			; 7
word_2FA68:	dc.w 3			
		dc.w $F00F,  0,	 0,$FFD0,$F00F,$10,  8,$FFF0,$F00F,$20,$10,$10 ;	0
word_2FA82:	dc.w 1			
		dc.w $F00F,$30,$18,$FFF0			; 0
word_2FA8C:	dc.w 1			
		dc.w $F00F,$40,$20,$FFF0			; 0
word_2FA96:	dc.w 1			
		dc.w $F00F,$50,$28,$FFF0			; 0
word_2FAA0:	dc.w 1			
		dc.w $F00F,$60,$30,$FFF0			; 0
word_2FAAA:	dc.w 1			
		dc.w $F00F,$1060,$1030,$FFF0			; 0
word_2FAB4:	dc.w 1			
		dc.w $F00F,$70,$38,$FFF0			; 0
word_2FABE:	dc.w 1			
		dc.w $F00F,$1070,$1038,$FFF0			; 0
off_2FAC8:	dc.w byte_2FAD2-off_2FAC8			; 0 
		dc.w byte_2FAD5-off_2FAC8			; 1
		dc.w byte_2FAD9-off_2FAC8			; 2
		dc.w byte_2FAE2-off_2FAC8			; 3
		dc.w byte_2FAEB-off_2FAC8			; 4
byte_2FAD2:	dc.b  $F,  0,$FF				; 0 
byte_2FAD5:	dc.b   7,  1,  2,$FF				; 0 
byte_2FAD9:	dc.b   7,  5,  5,  5,  5,  5,  5,$FD,  1	; 0 
byte_2FAE2:	dc.b   7,  3,  4,  3,  4,  3,  4,$FD,  1	; 0 
byte_2FAEB:	dc.b  $F,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,$FD,  1 ; 0
					
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2FAF8:				
		dc.w word_2FB06-Map_2FAF8			; 0
		dc.w word_2FB28-Map_2FAF8			; 1
		dc.w word_2FB4A-Map_2FAF8			; 2
		dc.w word_2FB6C-Map_2FAF8			; 3
		dc.w word_2FB8E-Map_2FAF8			; 4
		dc.w word_2FBB0-Map_2FAF8			; 5
		dc.w word_2FBD2-Map_2FAF8			; 6
word_2FB06:	dc.w 4			
		dc.w $F805,    0,    0,$FFE0			; 0
		dc.w  $805,    4,    2,$FFE0			; 4
		dc.w $F80F,    8,    4,$FFF0			; 8
		dc.w $F807,  $18,   $C,	 $10			; 12
word_2FB28:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $30,  $18,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2FB4A:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $38,  $1C,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2FB6C:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $40,  $20,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2FB8E:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $48,  $24,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2FBB0:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $50,  $28,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
word_2FBD2:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0			; 0
		dc.w $E80D,  $58,  $2C,$FFF0			; 4
		dc.w $E805,  $24,  $12,	 $10			; 8
		dc.w $D805,  $20,  $10,	   2			; 12
; ===========================================================================

	if RemoveJmpTos
JmpTo52_DeleteObject:				
		jmp	DeleteObject
JmpTo35_DisplaySprite:				
		jmp	DisplaySprite			
	else
JmpTo35_DisplaySprite:				
		jmp	DisplaySprite
JmpTo52_DeleteObject:				
		jmp	DeleteObject
JmpTo36_DespawnObject:				
		jmp	DespawnObject
JmpTo5_DeleteChild:				
		jmp	DeleteChild	
JmpTo6_PlaySound:				
		jmp	PlaySound
JmpTo21_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo17_AnimateSprite:				
		jmp	AnimateSprite
JmpTo9_Adjust2PArtPointer2:				
		jmp	Adjust2PArtPointer2
JmpTo3_FindFloorObj:				
		jmp	FindFloorObj
JmpTo6_AddPLC:				
		jmp	AddPLC
JmpTo3_AddPoints:				
		jmp	AddPoints
JmpTo61_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo2_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo2_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
JmpTo4_ObjectFall:				
		jmp	ObjectFall

		align 4 
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 52 - HTZ boss
; ----------------------------------------------------------------------------

BossHillTop:				
		moveq	#0,d0
		move.b	ost_boss_subtype(a0),d0
		move.w	off_2FC5E(pc,d0.w),d1
		jmp	off_2FC5E(pc,d1.w)
; ===========================================================================
off_2FC5E:	
		dc.w loc_2FC68-off_2FC5E			; 0 
		dc.w loc_2FD00-off_2FC5E			; 2
		dc.w loc_2FEF0-off_2FC5E			; 4
		dc.w loc_2FF66-off_2FC5E			; 6
		dc.w loc_30210-off_2FC5E			; 8
; ===========================================================================

loc_2FC68:				
		move.l	#Map_302BC,ost_mappings(a0)
		move.w	#tile_Nem_Eggpod_HTZ,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$90,ost_mainspr_width(a0)		
	if FixBugs=0	
		; This instruction is pointless, as render_useheight_bit is not
		; set. Additionally, it clashes with 'ost_boss_flash_time', as they
		; use the same OST offset. Unlike the Casino Night Zone boss, this does
		; not result in any bugs, because 'ost_boss_flash_time' is cleared
		; right after this. 
		move.b	#$90,ost_mainspr_height(a0)
	endc	
		move.b	#4,$18(a0)
		move.w	#$3040,ost_x_pos(a0)
		move.w	#$580,ost_y_pos(a0)
		move.b	#1,ost_boss_defeated(a0)
		move.b	#1,ost_mainspr_frame(a0)
		addq.b	#2,ost_boss_subtype(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#$32,$20(a0)
		move.b	#8,ost_boss_hitcount2(a0)
		move.w	#-$E0,(v_boss_y_vel).w
		move.w	ost_x_pos(a0),($FFFFF750).w
		move.w	ost_y_pos(a0),(v_boss_y_pos).w
	if FixBugs=0	
		; Possibly a workaround for the above bug? In any case, no longer needed
		; with the bug fixed.
		clr.b	ost_boss_flash_time(a0)	
	endc	
		move.w	ost_x_pos(a0),ost_subspr2_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr2_y_pos(a0)
		move.b	#2,ost_subspr2_frame(a0)
		bsr.w	loc_2FCEA
		rts	
; ===========================================================================

loc_2FCEA:				
		lea	($FFFFF740).w,a2
		move.b	#6,(a2)+
		move.b	#0,(a2)+
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_2FD00:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_2FD0E(pc,d0.w),d1
		jmp	off_2FD0E(pc,d1.w)
; ===========================================================================
off_2FD0E:	
		dc.w loc_2FD18-off_2FD0E			; 0 
		dc.w loc_2FD5E-off_2FD0E			; 1
		dc.w loc_2FDDA-off_2FD0E			; 2
		dc.w loc_2FE0E-off_2FD0E			; 3
		dc.w loc_30106-off_2FD0E			; 4
; ===========================================================================

loc_2FD18:				
		move.b	#0,(v_boss_collision_routine).w
		bsr.w	BossMove
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_2FD32
		cmpi.w	#$518,(v_boss_y_pos).w
		bgt.s	loc_2FD50
		bra.s	loc_2FD3A
; ===========================================================================

loc_2FD32:				
		cmpi.w	#$4FC,(v_boss_y_pos).w
		bgt.s	loc_2FD50

loc_2FD3A:				
		move.w	#0,(v_boss_y_vel).w
		move.b	#4,ost_boss_wobble(a0)
		addq.b	#2,ost_boss_routine(a0)
		move.b	#$3C,$3E(a0)

loc_2FD50:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		bsr.w	loc_300A4
 
    if RemoveJmpTos
JmpTo36_DisplaySprite:
    endc		
		
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_2FD5E:				
		subi_.b	#1,$3E(a0)
		bpl.s	loc_2FDC0
		move.b	#1,(v_boss_collision_routine).w
		move.b	#1,ost_mainspr_childsprites(a0)
		cmpi.b	#-$18,$3E(a0)
		bne.s	loc_2FDC0
		jsrto	FindFreeObj,JmpTo13_FindFreeObj
		bne.s	loc_2FDAA
		_move.b	#id_BossHillTop,ost_id(a1)
		move.b	#4,ost_boss_subtype(a1)
		move.b	ost_render(a0),ost_render(a1)
		andi.b	#render_xflip,ost_render(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#$2F,$3E(a0)

loc_2FDAA:				
		bsr.w	loc_300A4
		bsr.w	loc_2FEDE
		lea	(off_30288).l,a1
		bsr.w	BossAnimate
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_2FDC0:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#7,d1
		add.w	(v_boss_y_pos).w,d1
		move.w	d1,ost_y_pos(a0)
		addq.b	#4,ost_boss_wobble(a0)
		bra.s	loc_2FDAA
; ===========================================================================

loc_2FDDA:				
		move.b	#0,(v_boss_collision_routine).w
		move.b	#0,ost_mainspr_childsprites(a0)
		move.b	#$10,($FFFFF742).w
		move.b	#0,($FFFFF743).w
		subi_.b	#1,$3E(a0)
		bne.w	loc_2FDC0
		move.w	#$E0,(v_boss_y_vel).w
		addq.b	#2,ost_boss_routine(a0)
		bsr.w	loc_2FEDE
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_2FE0E:				
		bsr.w	BossMove
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_2FE22
		cmpi.w	#$538,(v_boss_y_pos).w
		blt.s	loc_2FE58
		bra.s	loc_2FE2A
; ===========================================================================

loc_2FE22:				
		cmpi.w	#$548,(v_boss_y_pos).w
		blt.s	loc_2FE58

loc_2FE2A:				
		tst.b	$38(a0)
		bne.s	loc_2FE58
		st.b	$38(a0)
		jsrto	FindFreeObj,JmpTo13_FindFreeObj
		bne.s	loc_2FE58
		move.b	#id_BossHillTop,ost_id(a1)
		move.b	#6,ost_boss_subtype(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#-$52,d0
		jsrto	Playsound,JmpTo7_PlaySound

loc_2FE58:				
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_2FE6E
		cmpi.w	#$5A0,(v_boss_y_pos).w
		blt.s	loc_2FED0
		move.w	#$5A0,(v_boss_y_pos).w
		bra.s	loc_2FE7C
; ===========================================================================

loc_2FE6E:				
		cmpi.w	#$580,(v_boss_y_pos).w
		blt.s	loc_2FED0
		move.w	#$580,(v_boss_y_pos).w

loc_2FE7C:				
		move.w	#-$E0,(v_boss_y_vel).w
		move.b	#0,ost_boss_routine(a0)
		sf.b	$38(a0)
		move.w	($FFFFB008).w,d0
		subi.w	#$2FC0,d0
		bmi.s	loc_2FEA8
		move.w	#$580,(v_boss_y_pos).w
		move.w	#$3040,ost_x_pos(a0)
		st.b	ost_boss_defeated(a0)
		bra.s	loc_2FEB8
; ===========================================================================

loc_2FEA8:				
		move.w	#$2F40,ost_x_pos(a0)
		move.w	#$5A0,(v_boss_y_pos).w
		sf.b	ost_boss_defeated(a0)

loc_2FEB8:				
		move.w	ost_x_pos(a0),d0
		cmp.w	($FFFFB008).w,d0
		bgt.s	loc_2FECA
		bset	#render_xflip_bit,ost_render(a0)
		bra.s	loc_2FED0
; ===========================================================================

loc_2FECA:				
		bclr	#render_xflip_bit,ost_render(a0)

loc_2FED0:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		bsr.w	loc_300A4
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_2FEDE:				
		move.w	ost_x_pos(a0),d0
		move.w	ost_y_pos(a0),d1
		move.w	d0,ost_subspr2_x_pos(a0)
		move.w	d1,ost_subspr2_y_pos(a0)
		rts	
; ===========================================================================

loc_2FEF0:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2FEFE(pc,d0.w),d1
		jmp	off_2FEFE(pc,d1.w)
; ===========================================================================
off_2FEFE:	
		dc.w loc_2FF02-off_2FEFE			; 0 
		dc.w loc_2FF50-off_2FEFE			; 2
; ===========================================================================

loc_2FF02:				
		move.l	#Map_302BC,ost_mappings(a0)
		move.w	#tile_Nem_HTZBoss,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		addq.b	#2,$25(a0)
		move.b	#5,$1C(a0)
		move.b	#-$68,$20(a0)
		subi.w	#$1C,ost_y_pos(a0)
		move.w	#-$70,d0
		move.w	#-4,d1
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_2FF46
		neg.w	d0
		neg.w	d1

loc_2FF46:				
		add.w	d0,ost_x_pos(a0)
		move.w	d1,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_2FF50:				
		move.w	ost_x_vel(a0),d1
		add.w	d1,ost_x_pos(a0)
		lea	(off_30288).l,a1
		jsrto	AnimateSprite,JmpTo18_AnimateSprite
		jmpto	DespawnObject,JmpTo37_DespawnObject
; ===========================================================================

loc_2FF66:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2FF74(pc,d0.w),d1
		jmp	off_2FF74(pc,d1.w)
; ===========================================================================
off_2FF74:	
		dc.w loc_2FF78-off_2FF74			; 0 
		dc.w loc_30008-off_2FF74			; 1
; ===========================================================================

loc_2FF78:				
		movea.l	a0,a1
		moveq	#0,d2
		moveq	#1,d1
		bra.s	loc_2FF94
; ===========================================================================

loc_2FF80:				
		jsrto	FindFreeObj,JmpTo13_FindFreeObj
		bne.w	locret_30006
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)

loc_2FF94:				
		move.b	#id_BossHillTop,ost_id(a1)
		move.b	#6,ost_boss_subtype(a1)
		move.l	#Map_302BC,ost_mappings(a1)
		move.w	#tile_Nem_HTZBoss,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		addq.b	#2,$25(a1)
		move.b	#7,$1C(a1)
		move.b	#-$75,$20(a1)
		move.b	d2,$2E(a1)
		move.b	#8,ost_height(a1)
		move.b	#8,$17(a1)
		move.w	ost_x_pos(a1),$2A(a1)
		move.w	#$1C00,d0
		tst.w	d2
		bne.s	loc_2FFE8
		neg.w	d0

loc_2FFE8:				
		move.w	d0,ost_x_vel(a1)
		move.w	#-$5400,ost_y_vel(a1)
		cmpi.w	#$2F40,ost_x_pos(a1)
		beq.s	loc_30000
		move.w	#-$6400,ost_y_vel(a1)

loc_30000:				
		addq.w	#1,d2

loc_30002:
		dbf	d1,loc_2FF80

locret_30006:				
		rts	
; ===========================================================================

loc_30008:				
		bsr.w	loc_30072

loc_3000C:
		jsrto	FindFloorObj,JmpTo4_FindFloorObj
		tst.w	d1
		bpl.s	loc_30064
		add.w	d1,ost_y_pos(a0)
		move.b	#id_LavaBubble,ost_id(a0)
		move.b	#$A,ost_primary_routine(a0)
		move.b	#2,$1C(a0)
		move.b	#4,$1A(a0)

loc_3002E:
		move.w	#0,ost_y_vel(a0)
		move.l	#Map_23294,ost_mappings(a0)
		move.w	#tile_Nem_Fireball1+tile_hi,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo62_Adjust2PArtPointer
		move.b	#0,$1A(a0)
		move.w	#9,$32(a0)
		move.b	#3,$36(a0)
		move.b	#-$4D,d0
		jsrto	Playsound,JmpTo7_PlaySound
		jmpto	LavaBubble,JmpTo_LavaBubble
; ===========================================================================

loc_30064:				
		lea	(off_30288).l,a1
		jsrto	AnimateSprite,JmpTo18_AnimateSprite
		jmpto	DespawnObject,JmpTo37_DespawnObject
; ===========================================================================

loc_30072:				
		move.l	$2A(a0),d2
		move.l	ost_y_pos(a0),d3
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#4,d0
		add.l	d0,d2
		move.w	ost_y_vel(a0),d0
		addi.w	#$380,ost_y_vel(a0)
		ext.l	d0
		asl.l	#4,d0
		add.l	d0,d3
		move.l	d2,$2A(a0)
		move.l	d3,ost_y_pos(a0)
		move.w	$2A(a0),ost_x_pos(a0)
		rts	
; ===========================================================================

loc_300A4:				
		cmpi.b	#8,ost_boss_routine(a0)
		bcc.s	locret_300EA
		tst.b	ost_boss_hitcount2(a0)
		beq.s	loc_300EC
		tst.b	$20(a0)
		bne.s	locret_300EA
		tst.b	ost_boss_flash_time(a0)
		bne.s	loc_300CE
		move.b	#$20,ost_boss_flash_time(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_300CE:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_300DC
		move.w	#$EEE,d0

loc_300DC:				
		move.w	d0,(a1)
		subq.b	#1,ost_boss_flash_time(a0)
		bne.s	locret_300EA
		move.b	#$32,$20(a0)

locret_300EA:				
		rts	
; ===========================================================================

loc_300EC:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo4_AddPoints
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,ost_boss_routine(a0)
		moveq	#id_PLC_Capsule,d0
		jsrto	AddPLC,JmpTo7_AddPLC
		rts	
; ===========================================================================

loc_30106:				
		move.b	#0,ost_mainspr_childsprites(a0)
		subi_.w	#1,(v_boss_timer).w
		bmi.s	loc_30142
		cmpi.w	#$1E,(v_boss_timer).w
		bgt.s	loc_3013A
		move.b	#$10,ost_mainspr_frame(a0)
		bsr.w	BossExplode
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.w	JmpTo36_DisplaySprite
		bsr.w	loc_301B4
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_3013A:				
		bsr.w	BossExplode
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_30142:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.w	loc_30152
		bsr.w	loc_301B4

loc_30152:				
		cmpi.w	#-$3C,(v_boss_timer).w
		bgt.w	JmpTo36_DisplaySprite
		tst.b	(v_boss_status).w
		bne.s	loc_30170
		jsrto	RestoreLevelMusic,JmpTo3_RestoreLevelMusic
		jsrto	LoadAnimalExplosionArt,JmpTo3_LoadAnimalExplosionArt
		move.b	#1,(v_boss_status).w

loc_30170:				
		addq.w	#2,ost_y_pos(a0)
		cmpi.w	#$3160,(v_boundary_right_next).w
		bcc.s	loc_30182
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_301A6
; ===========================================================================

loc_30182:				
		tst.b	ost_render(a0)
		bpl.s	loc_301AA
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_3019C
		cmpi.w	#$578,ost_y_pos(a0)
		bgt.w	loc_301AA
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_3019C:				
		cmpi.w	#$588,ost_y_pos(a0)
		bgt.w	loc_301AA

loc_301A6:				
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================

loc_301AA:				
		move.w	#$3160,(v_boundary_right_next).w
		
    if RemoveJmpTos
JmpTo53_DeleteObject:
    endc
    		
		jmpto	DeleteObject,JmpTo53_DeleteObject
; ===========================================================================

loc_301B4:				
		jsrto	FindFreeObj,JmpTo13_FindFreeObj
		bne.s	locret_3020E
		move.b	#id_BossHillTop,ost_id(a1)
		move.b	#8,ost_boss_subtype(a1)
		move.l	#off_30258,ost_mappings(a1)
		move.w	#tile_Nem_BossSmoke_HTZ,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#1,$18(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_x_pos(a0),$2A(a1)
		subi.w	#$28,ost_y_pos(a1)
		move.w	#-$60,ost_x_vel(a1)
		move.w	#-$C0,ost_y_vel(a1)
		move.b	#0,$1A(a1)
		move.b	#$11,$1E(a1)

locret_3020E:				
		rts	
; ===========================================================================

loc_30210:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_3022A
		move.b	#$11,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#4,$1A(a0)
		beq.w	JmpTo53_DeleteObject

loc_3022A:				
		move.l	$2A(a0),d2
		move.l	ost_y_pos(a0),d3
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$2A(a0)
		move.w	$2A(a0),ost_x_pos(a0)
		move.l	d3,ost_y_pos(a0)
		jmpto	DisplaySprite,JmpTo36_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_30258:	dc.w word_30260-off_30258			; 0 
		dc.w word_3026A-off_30258			; 1
		dc.w word_30274-off_30258			; 2
		dc.w word_3027E-off_30258			; 3
word_30260:	dc.w 1			
		dc.w $F805,$2000,$2000,$FFF8			; 0
word_3026A:	dc.w 1			
		dc.w $F805,$2004,$2002,$FFF8			; 0
word_30274:	dc.w 1			
		dc.w $F805,$2008,$2004,$FFF8			; 0
word_3027E:	dc.w 1			
		dc.w $F805,$200C,$2006,$FFF8			; 0
off_30288:	dc.w byte_30298-off_30288			; 0 
		dc.w byte_3029D-off_30288			; 1
		dc.w byte_302A2-off_30288			; 2
		dc.w byte_302A7-off_30288			; 3
		dc.w byte_302AC-off_30288			; 4
		dc.w byte_302B0-off_30288			; 5
		dc.w byte_302B4-off_30288			; 6
		dc.w byte_302B7-off_30288			; 7
byte_30298:	dc.b   1,  2,  3,$FD,  1			; 0 
byte_3029D:	dc.b   2,  4,  5,$FD,  2			; 0 
byte_302A2:	dc.b   3,  6,  7,$FD,  3			; 0 
byte_302A7:	dc.b   4,  8,  9,$FD,  4			; 0 
byte_302AC:	dc.b   5, $A, $B,$FE				; 0 
byte_302B0:	dc.b   3, $C, $D,$FF				; 0 
byte_302B4:	dc.b  $F,  1,$FF				; 0 
byte_302B7:	dc.b   3, $E, $F,$FF,  0			; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_302BC:				
		dc.w Map_302BC-Map_302BC			;	0
		dc.w word_302DE-Map_302BC			; 1
		dc.w word_30320-Map_302BC			; 2
		dc.w word_3032A-Map_302BC			; 3
		dc.w word_30334-Map_302BC			; 4
		dc.w word_3033E-Map_302BC			; 5
		dc.w word_30350-Map_302BC			; 6
		dc.w word_30362-Map_302BC			; 7
		dc.w word_3037C-Map_302BC			; 8
		dc.w word_30396-Map_302BC			; 9
		dc.w word_303B0-Map_302BC			; 10
		dc.w word_303C2-Map_302BC			; 11
		dc.w word_303CC-Map_302BC			; 12
		dc.w word_303D6-Map_302BC			; 13
		dc.w word_303E0-Map_302BC			; 14
		dc.w word_303EA-Map_302BC			; 15
		dc.w word_303F4-Map_302BC			; 16
word_302DE:	dc.w 8			
		dc.w  $405,$2000,$2000,$FFE0			; 0
		dc.w $1405,$2004,$2002,$FFE0			; 4
		dc.w  $40F,$2008,$2004,$FFF0			; 8
		dc.w  $407,$2018,$200C,	 $10			; 12
		dc.w $F40D,  $60,  $30,$FFE0			; 16
		dc.w $F40D,  $68,  $34,	   0			; 20
		dc.w $DC0A,$2070,$2038,$FFE8			; 24
		dc.w $DC06,$2079,$203C,	   0			; 28
word_30320:	dc.w 1			
		dc.w $DF04,  $83,  $41,$FFD8			; 0
word_3032A:	dc.w 1			
		dc.w $DF04,  $85,  $42,$FFD8			; 0
word_30334:	dc.w 1			
		dc.w $DF08,  $87,  $43,$FFD0			; 0
word_3033E:	dc.w 2			
		dc.w $DF0C,  $8A,  $45,$FFC0			; 0
		dc.w $DF00,  $8E,  $47,$FFE0			; 4
word_30350:	dc.w 2			
		dc.w $DF0C,  $8F,  $47,$FFB0			; 0
		dc.w $DF08,  $93,  $49,$FFD0			; 4
word_30362:	dc.w 3			
		dc.w $DF0C,  $96,  $4B,$FFA0			; 0
		dc.w $DF0C,  $9A,  $4D,$FFC0			; 4
		dc.w $DF00,  $9E,  $4F,$FFE0			; 8
word_3037C:	dc.w 3			
		dc.w $DF0C,  $9F,  $4F,$FF90			; 0
		dc.w $DF0C,  $A3,  $51,$FFB0			; 4
		dc.w $DF08,  $A7,  $53,$FFD0			; 8
word_30396:	dc.w 3			
		dc.w $DF0C,  $AA,  $55,$FF88			; 0
		dc.w $DF0C,  $AE,  $57,$FFA8			; 4
		dc.w $DF08,  $B2,  $59,$FFC8			; 8
word_303B0:	dc.w 2			
		dc.w $DF0C,  $B5,  $5A,$FF88			; 0
		dc.w $DF0C,  $B9,  $5C,$FFA8			; 4
word_303C2:	dc.w 1			
		dc.w $DF0C,  $BD,  $5E,$FF88			; 0
word_303CC:	dc.w 1			
		dc.w $FC00,  $61,  $30,$FFFC			; 0
word_303D6:	dc.w 1			
		dc.w $FC00,  $62,  $31,$FFFC			; 0
word_303E0:	dc.w 1			
		dc.w $F805,  $63,  $31,$FFF8			; 0
word_303EA:	dc.w 1			
		dc.w $F805,  $67,  $33,$FFF8			; 0
word_303F4:	dc.w 7			
		dc.w  $405,$2000,$2000,$FFE0			; 0
		dc.w $1405,$2004,$2002,$FFE0			; 4
		dc.w  $40F,$2008,$2004,$FFF0			; 8
		dc.w  $407,$2018,$200C,	 $10			; 12
		dc.w $F40D,  $60,  $30,$FFE0			; 16
		dc.w $F40D,  $68,  $34,	   0			; 20
		dc.w $EC0C,$207F,$203F,$FFF0			; 24

	if RemoveJmpTos=0
		align 4
    endc

; ===========================================================================

	if RemoveJmpTos=0
JmpTo36_DisplaySprite:				
		jmp	DisplaySprite
JmpTo53_DeleteObject:				
		jmp	DeleteObject
JmpTo13_FindFreeObj:				
		jmp	FindFreeObj
JmpTo37_DespawnObject:				
		jmp	DespawnObject
JmpTo7_PlaySound:				
		jmp PlaySound
JmpTo18_AnimateSprite:				
		jmp	AnimateSprite
JmpTo4_FindFloorObj:				
		jmp	FindFloorObj
JmpTo7_AddPLC:				
		jmp	AddPLC
JmpTo_LavaBubble:				
		jmp	LavaBubble
JmpTo4_AddPoints:				
		jmp	AddPoints
JmpTo62_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo3_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo3_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt

		align 4
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 89 - ARZ boss
; ----------------------------------------------------------------------------

BossAquaticRuin:				
		moveq	#0,d0
		move.b	ost_boss_subtype(a0),d0
		move.w	off_3048E(pc,d0.w),d1
		jmp	off_3048E(pc,d1.w)
; ===========================================================================
off_3048E:	dc.w loc_30494-off_3048E			; 0 
		dc.w loc_30620-off_3048E			; 1
		dc.w loc_309A8-off_3048E			; 2
; ===========================================================================

loc_30494:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_3049C
		rts	
; ===========================================================================

loc_3049C:				
		tst.w	(v_player_mode).w
		bne.s	loc_304D4
		move.w	($FFFFB008).w,d0
		cmpi.w	#$2A60,d0
		blt.w	loc_305F4
		cmpi.w	#$2B60,d0
		bgt.w	loc_305F4
		cmpi.b	#-$7F,($FFFFB06A).w
		beq.w	loc_304D4
		move.w	($FFFFB048).w,d0
		cmpi.w	#$2A60,d0
		blt.w	loc_305F4
		cmpi.w	#$2B60,d0
		bgt.w	loc_305F4

loc_304D4:				
		move.b	#1,(f_screen_shake).w
		move.w	#tile_Nem_ARZBoss,ost_tile(a0)
		move.l	#Map_30E04,ost_mappings(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#$20,ost_mainspr_width(a0)
		move.b	#2,$18(a0)
		move.b	#2,ost_boss_subtype(a0)
		move.w	#$2AE0,ost_x_pos(a0)
		move.w	#$388,ost_y_pos(a0)
		move.w	#$2AE0,($FFFFF750).w
		move.w	#$388,(v_boss_y_pos).w
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#3,ost_mainspr_childsprites(a0)
		move.b	#$F,$20(a0)
		move.b	#8,ost_boss_hitcount2(a0)
		move.b	#8,ost_mainspr_frame(a0)
		move.w	#-$380,$2E(a0)
		clr.b	(v_boss_collision_routine).w
		move.w	#$2AE0,ost_subspr2_x_pos(a0)
		move.w	#$488,ost_subspr2_y_pos(a0)
		move.b	#0,ost_subspr2_frame(a0)
		move.w	#$2AE0,ost_subspr3_x_pos(a0)
		move.w	#$488,ost_subspr3_y_pos(a0)
		move.b	#9,ost_subspr3_frame(a0)
		move.w	#$2AE0,ost_subspr4_x_pos(a0)
		move.w	#$488,ost_subspr4_y_pos(a0)
		move.b	#6,ost_subspr4_frame(a0)
		move.w	#$100,(v_boss_y_vel).w
		
		jsrto	FindFreeObj,JmpTo14_FindFreeObj
		bne.w	loc_305F4
		move.b	#id_BossAquaticRuin,ost_id(a1)
		move.l	#Map_30D68,ost_mappings(a1)
		ori.b	#render_rel,ost_render(a1)
		move.w	#tile_Nem_ARZBoss,ost_tile(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.w	#$2A50,ost_x_pos(a1)
		move.w	#$510,ost_y_pos(a1)
		addq.b	#4,ost_boss_subtype(a1)
		move.l	a0,$2A(a1)
		move.b	#0,$1A(a1)
		move.b	#2,$18(a1)
		move.b	#$20,ost_height(a1)
		movea.l	a1,a2
		jsrto	FindNextFreeObj,JmpTo22_FindNextFreeObj
		bne.s	loc_305F4
		moveq	#0,d0
		move.w	#$F,d1

loc_305DC:				
		move.l	(a2,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_305DC
		bset	#render_xflip_bit,ost_render(a1)
		move.w	#$2B70,ost_x_pos(a1)

loc_305F4:				
		bsr.w	loc_305FA
		rts	
; ===========================================================================

loc_305FA:				
		lea	($FFFFF740).w,a2
		move.b	#4,(a2)+
		move.b	#0,(a2)+
		move.b	#0,(a2)+
		move.b	#0,(a2)+
		move.b	#2,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_30620:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_3062E(pc,d0.w),d1
		jmp	off_3062E(pc,d1.w)
; ===========================================================================
off_3062E:	
		dc.w loc_3063C-off_3062E			; 0 
		dc.w loc_3067A-off_3062E			; 1
		dc.w loc_306B8-off_3062E			; 2
		dc.w loc_30706-off_3062E			; 3
		dc.w loc_3088C-off_3062E			; 4
		dc.w loc_308F4-off_3062E			; 5
		dc.w loc_3095C-off_3062E			; 6
; ===========================================================================

loc_3063C:				
		bsr.w	BossMove
		bsr.w	loc_3075C
		bsr.w	loc_30824
		cmpi.w	#$430,(v_boss_y_pos).w
		blt.s	loc_3066C
		move.w	#$430,(v_boss_y_pos).w
		addi_.b	#2,ost_boss_routine(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$C8,(v_boss_x_vel).w
		st.b	$38(a0)

loc_3066C:				
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_3067A:				
		bsr.w	BossMove
		bsr.w	loc_3075C
		bsr.w	loc_30824
		tst.b	$38(a0)
		bne.s	loc_30696
		cmpi.w	#$2B10,($FFFFF750).w
		blt.s	loc_306AA
		bra.s	loc_3069E
; ===========================================================================

loc_30696:				
		cmpi.w	#$2AB0,($FFFFF750).w
		bgt.s	loc_306AA

loc_3069E:				
		addi_.b	#2,ost_boss_routine(a0)
		move.w	#0,(v_boss_x_vel).w

loc_306AA:				
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_306B8:				
		bsr.w	BossMove
		bsr.w	loc_3075C
		bsr.w	loc_30824
		cmpi.b	#-$40,ost_boss_wobble(a0)
		bne.s	loc_306F8
		lea	($FFFFF740).w,a1
		andi.b	#-$10,4(a1)
		ori.b	#3,4(a1)
		addq.b	#2,ost_boss_routine(a0)
		btst	#render_xflip_bit,ost_render(a0)
		sne	$38(a0)
		move.w	#$1E,(v_boss_timer).w
		move.b	#-$43,d0
		jsrto	PlaySound,JmpTo8_PlaySound

loc_306F8:				
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30706:				
		cmpi.w	#$14,(v_boss_timer).w
		bne.s	loc_3071A
		bset	#0,$3E(a0)
		move.b	#1,(v_boss_collision_routine).w

loc_3071A:				
		subi_.w	#1,(v_boss_timer).w
		bpl.s	loc_30742
		clr.b	(v_boss_collision_routine).w
		move.b	#2,ost_boss_routine(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3073C
		move.w	#-$C8,(v_boss_x_vel).w
		bra.s	loc_30742
; ===========================================================================

loc_3073C:				
		move.w	#$C8,(v_boss_x_vel).w

loc_30742:				
		bsr.w	BossMove
		bsr.w	loc_3075C
		bsr.w	loc_30824
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_3075C:				
		bsr.w	loc_3078E
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_30770
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_3077A

loc_30770:				
		lea	($FFFFF740).w,a1
		move.b	#$31,3(a1)

loc_3077A:				
		cmpi.b	#64-1,ost_boss_flash_time(a0)
		bne.s	locret_3078C
		lea	($FFFFF740).w,a1
		move.b	#-$40,3(a1)

locret_3078C:				
		rts	
; ===========================================================================

loc_3078E:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		addq.b	#2,ost_boss_wobble(a0)
		cmpi.b	#8,ost_boss_routine(a0)
		bcc.s	locret_307F2
		tst.b	ost_boss_hitcount2(a0)
		beq.s	loc_307F4
		tst.b	$20(a0)
		bne.s	locret_307F2
		tst.b	ost_boss_flash_time(a0)
		bne.s	loc_307D6
		move.b	#$40,ost_boss_flash_time(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_307D6:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_307E4
		move.w	#$EEE,d0

loc_307E4:				
		move.w	d0,(a1)
		subq.b	#1,ost_boss_flash_time(a0)
		bne.s	locret_307F2
		move.b	#$F,$20(a0)

locret_307F2:				
		rts	
; ===========================================================================

loc_307F4:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo5_AddPoints
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,ost_boss_routine(a0)

loc_30806:
		lea	($FFFFF740).w,a1
		move.b	#5,2(a1)
		move.b	#0,3(a1)
		moveq	#id_PLC_Capsule,d0
		jsrto	AddPLC,JmpTo8_AddPLC
		move.b	#5,ost_subspr2_frame(a0)
		rts	
; ===========================================================================

loc_30824:				
		move.w	ost_x_pos(a0),d0
		move.w	ost_y_pos(a0),d1
		move.w	d0,ost_subspr2_x_pos(a0)
		move.w	d1,ost_subspr2_y_pos(a0)
		move.w	d0,ost_subspr4_x_pos(a0)
		move.w	d1,ost_subspr4_y_pos(a0)
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_30850
		move.w	d0,ost_subspr3_x_pos(a0)
		move.w	d1,ost_subspr3_y_pos(a0)
		move.w	d1,$3A(a0)
		rts	
; ===========================================================================

loc_30850:				
		cmpi.w	#$78,(v_boss_timer).w
		bgt.s	locret_3088A
		subi_.w	#1,ost_subspr3_x_pos(a0)
		move.l	$3A(a0),d0
		move.w	$2E(a0),d1
		addi.w	#$38,$2E(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$3A(a0)
		move.w	$3A(a0),ost_subspr3_y_pos(a0)
		cmpi.w	#$540,ost_subspr3_y_pos(a0)
		blt.s	locret_3088A
		move.w	#0,$2E(a0)

locret_3088A:				
		rts	
; ===========================================================================

loc_3088C:				
		st.b	ost_boss_defeated(a0)
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_3089C
		bsr.w	BossExplode
		bra.s	loc_308D6
; ===========================================================================

loc_3089C:				
		move.b	#3,ost_mainspr_childsprites(a0)
		lea	($FFFFF740).w,a2
		move.b	#1,4(a2)
		move.b	#0,5(a2)
		move.b	#0,2(a2)
		move.b	#0,3(a2)
		bset	#render_xflip_bit,ost_render(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,ost_boss_routine(a0)
		move.w	#-$12,(v_boss_timer).w

loc_308D6:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_30824
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_308F4:				
		addq.w	#1,(v_boss_timer).w
		beq.s	loc_30904
		bpl.s	loc_3090A
		addi.w	#$18,(v_boss_y_vel).w
		bra.s	loc_30936
; ===========================================================================

loc_30904:				
		clr.w	(v_boss_y_vel).w
		bra.s	loc_30936
; ===========================================================================

loc_3090A:				
		cmpi.w	#$18,(v_boss_timer).w
		bcs.s	loc_30922
		beq.s	loc_3092A
		cmpi.w	#$20,(v_boss_timer).w
		bcs.s	loc_30936
		addq.b	#2,ost_boss_routine(a0)
		bra.s	loc_30936
; ===========================================================================

loc_30922:				
		subi_.w	#8,(v_boss_y_vel).w
		bra.s	loc_30936
; ===========================================================================

loc_3092A:				
		clr.w	(v_boss_y_vel).w
		jsrto	RestoreLevelMusic,JmpTo4_RestoreLevelMusic
		jsrto	LoadAnimalExplosionArt,JmpTo4_LoadAnimalExplosionArt

loc_30936:				
		bsr.w	BossMove
		bsr.w	loc_3078E
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_30824
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_3095C:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2C00,(v_boundary_right_next).w
		bcc.s	loc_30976
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_3097C
; ===========================================================================

loc_30976:				
		tst.b	ost_render(a0)
		bpl.s	loc_309A2

loc_3097C:				
		bsr.w	BossMove
		bsr.w	loc_3078E
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		lea	(off_30DC8).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_30824
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_309A2:				
		jmp	DeleteObject
; ===========================================================================

loc_309A8:				
		moveq	#0,d0
		movea.l	$2A(a0),a1
		cmpi.b	#8,ost_boss_routine(a1)
		blt.s	loc_309BC
		move.b	#4,$25(a0)

loc_309BC:				
		move.b	$25(a0),d0
		move.w	off_309C8(pc,d0.w),d1
		jmp	off_309C8(pc,d1.w)
; ===========================================================================
off_309C8:	dc.w loc_309D2-off_309C8			; 0 
		dc.w loc_30A04-off_309C8			; 1
		dc.w loc_30B4A-off_309C8			; 2
		dc.w loc_30B9E-off_309C8			; 3
		dc.w loc_30B6C-off_309C8			; 4
; ===========================================================================

loc_309D2:				
		bsr.w	loc_30B7A
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_309E8
		move.w	#$E1,d0	
		jsrto	PlaySound,JmpTo8_PlaySound

loc_309E8:				
		subi_.w	#1,ost_y_pos(a0)
		cmpi.w	#$488,ost_y_pos(a0)
		bgt.s	loc_30A00
		addq.b	#2,$25(a0)
		move.b	#0,(f_screen_shake).w

loc_30A00:				
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30A04:				
		bsr.w	loc_30B7A
		movea.l	$2A(a0),a3
		btst	#0,$3E(a3)
		beq.s	loc_30A3A
		tst.b	$38(a3)
		beq.s	loc_30A24
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_30A3A
		bra.s	loc_30A2C
; ===========================================================================

loc_30A24:				
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_30A3A

loc_30A2C:				
		bclr	#0,$3E(a3)
		bsr.w	loc_30AB4
		st.b	$38(a0)

loc_30A3A:				
		bsr.w	loc_30A42
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30A42:				
		tst.b	$38(a0)
		beq.s	locret_30AAE
		tst.w	$30(a0)
		bgt.s	loc_30A54
		move.w	#$1F,$30(a0)

loc_30A54:				
		subi_.w	#1,$30(a0)
		bgt.s	loc_30A82
		sf.b	$38(a0)
		move.w	#0,$30(a0)
		tst.b	$38(a3)
		bne.s	loc_30A74
		move.w	#$2A50,ost_x_pos(a0)
		bra.s	loc_30A7A
; ===========================================================================

loc_30A74:				
		move.w	#$2B70,ost_x_pos(a0)

loc_30A7A:				
		move.w	#$488,ost_y_pos(a0)
		bra.s	locret_30AAE
; ===========================================================================

loc_30A82:				
		move.w	#$2A50,d1
		tst.b	$38(a3)
		beq.s	loc_30A90
		move.w	#$2B70,d1

loc_30A90:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.w	#1,d0
		add.w	d0,d0
		add.w	word_30AB0(pc,d0.w),d1
		move.w	d1,ost_x_pos(a0)
		move.w	#$488,d1
		add.w	word_30AB0(pc,d0.w),d1
		move.w	d1,ost_y_pos(a0)

locret_30AAE:				
		rts	
; ===========================================================================
word_30AB0:	dc.w	 1					; 0
		dc.w $FFFF					; 1
; ===========================================================================

loc_30AB4:				
		jsrto	FindFreeObj,JmpTo14_FindFreeObj
		bne.w	locret_30B40
		_move.b	#id_BossAquaticRuin,ost_id(a1)
		move.b	#4,ost_boss_subtype(a1)
		move.b	#8,$25(a1)
		move.l	#Map_30D68,ost_mappings(a1)
		move.w	#tile_Nem_ARZBoss,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		moveq	#0,d6
		move.b	#2,$1A(a1)
		move.w	#$2A6A,ost_x_pos(a1)
		tst.b	$38(a3)
		beq.s	loc_30B04
		st.b	d6
		move.w	#$2B56,ost_x_pos(a1)
		bset	#render_xflip_bit,ost_render(a1)

loc_30B04:				
		move.w	#$28,$30(a1)
		jsrto	RandomNumber,JmpTo3_RandomNumber
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_30B42(pc,d0.w),ost_y_pos(a1)
		movea.l	a1,a2
		jsrto	FindFreeObj,JmpTo14_FindFreeObj
		bne.s	locret_30B40
		_move.b	#id_BossAquaticRuin,ost_id(a1)
		move.b	#4,ost_boss_subtype(a1)
		move.b	#6,$25(a1)
		move.l	a2,$34(a1)
		move.b	d6,$28(a1)
		move.l	a3,$38(a1)

locret_30B40:				
		rts	
; ===========================================================================
word_30B42:	dc.w  $458					; 0
		dc.w  $478					; 1
		dc.w  $498					; 2
		dc.w  $4B8					; 3
; ===========================================================================

loc_30B4A:				
		move.b	#1,(f_screen_shake).w
		addi_.w	#1,ost_y_pos(a0)
		cmpi.w	#$510,ost_y_pos(a0)
		blt.s	loc_30B68
		move.b	#0,(f_screen_shake).w
		jmpto	DeleteObject,JmpTo55_DeleteObject
; ===========================================================================

loc_30B68:				
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30B6C:				
		subi_.w	#1,$30(a0)
		beq.w	JmpTo55_DeleteObject
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30B7A:				
		move.w	#$23,d1
		move.w	#$44,d2
		move.w	#$45,d3
		move.w	ost_x_pos(a0),d4
		move.w	ost_y_pos(a0),-(sp)
		addi_.w	#4,ost_y_pos(a0)
		jsrto	SolidObject,JmpTo26_SolidObject
		move.w	(sp)+,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_30B9E:				
		moveq	#0,d0
		movea.l	$38(a0),a1
		cmpi.b	#8,ost_boss_routine(a1)
		blt.s	loc_30BB2
		move.b	#6,$2A(a0)

loc_30BB2:				
		move.b	$2A(a0),d0
		move.w	off_30BBE(pc,d0.w),d1
		jmp	off_30BBE(pc,d1.w)
; ===========================================================================
off_30BBE:	
		dc.w loc_30BC8-off_30BBE			; 0 
		dc.w loc_30C36-off_30BBE			; 1
		dc.w loc_30C86-off_30BBE			; 2
		dc.w loc_30CAC-off_30BBE			; 3
		dc.w BranchTo_JmpTo55_DeleteObject-off_30BBE	; 4
; ===========================================================================

loc_30BC8:				
		move.l	#Map_30D68,ost_mappings(a0)
		move.w	#tile_Nem_ARZBoss,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#-$70,ost_mainspr_width(a0)
		move.b	#4,$18(a0)
		addq.b	#2,$2A(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.w	#4,ost_y_vel(a0)
		move.b	#4,$1A(a0)
		addi.w	#9,ost_y_pos(a0)
		tst.b	$28(a0)
		beq.s	loc_30C28
		bset	#0,$22(a0)
		bset	#render_xflip_bit,ost_render(a0)
		move.w	#-3,ost_x_vel(a0)
		bra.s	loc_30C2E
; ===========================================================================

loc_30C28:				
		move.w	#3,ost_x_vel(a0)

loc_30C2E:				
		move.b	#-$50,$20(a0)
		rts	
; ===========================================================================

loc_30C36:				
		btst	#7,$22(a0)
		beq.s	loc_30C44
		move.b	#8,$2A(a0)

loc_30C44:				
		move.w	ost_x_pos(a0),d0
		add.w	ost_x_vel(a0),d0
		tst.w	ost_x_vel(a0)
		bpl.s	loc_30C5E
		cmpi.w	#$2A77,d0
		bgt.s	loc_30C7E
		move.w	#$2A77,d0
		bra.s	loc_30C68
; ===========================================================================

loc_30C5E:				
		cmpi.w	#$2B49,d0
		blt.s	loc_30C7E
		move.w	#$2B49,d0

loc_30C68:				
		addi_.b	#2,$2A(a0)
		move.w	d0,ost_x_pos(a0)
		move.b	#-$23,d0
		jsrto	PlaySound,JmpTo8_PlaySound
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30C7E:				
		move.w	d0,ost_x_pos(a0)
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30C86:				
		move.b	#0,$20(a0)
		btst	#7,$22(a0)
		beq.s	loc_30C9A
		addi_.b	#2,$2A(a0)

loc_30C9A:				
		bsr.w	loc_30CCC
		lea	(off_30D2C).l,a1
		jsrto	AnimateSprite,JmpTo19_AnimateSprite
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

loc_30CAC:				
		bsr.w	loc_30D04
		move.w	ost_y_pos(a0),d0
		add.w	ost_y_vel(a0),d0
		cmpi.w	#$4F0,d0
		bgt.w	JmpTo55_DeleteObject
		move.w	d0,ost_y_pos(a0)
		jmpto	DisplaySprite,JmpTo37_DisplaySprite
; ===========================================================================

    if RemoveJmpTos
JmpTo55_DeleteObject:
    endc

BranchTo_JmpTo55_DeleteObject:				
		jmpto	DeleteObject,JmpTo55_DeleteObject
; ===========================================================================

loc_30CCC:				
		tst.w	$30(a0)
		bne.s	loc_30CF4
		move.w	#$1B,d1
		move.w	#1,d2
		move.w	#2,d3
		move.w	ost_x_pos(a0),d4
		jsrto	DetectPlatform,JmpTo8_DetectPlatform
		btst	#3,$22(a0)
		beq.s	locret_30D02
		move.w	#$1F,$30(a0)

loc_30CF4:				
		subi_.w	#1,$30(a0)
		bne.s	locret_30D02
		move.b	#6,$2A(a0)

locret_30D02:				
		rts	
; ===========================================================================

loc_30D04:				
		bclr	#3,$22(a0)
		beq.s	loc_30D12
		lea	($FFFFB000).w,a1
		bsr.s	loc_30D1E

loc_30D12:				
		bclr	#4,$22(a0)
		beq.s	locret_30D2A
		lea	($FFFFB040).w,a1

loc_30D1E:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)

locret_30D2A:				
		rts	
; ===========================================================================
off_30D2C:	
		dc.w byte_30D30-off_30D2C			; 0 
		dc.w byte_30D47-off_30D2C			; 1
		
byte_30D30:	
		dc.b   1,  4,  6,  5,  4,  6,  4,  5,  4,  6,  4,  4,  6,  5,  4,  6 ; 0				
		dc.b   4,  5,  4,  6,  4,$FD,  1		; 16

byte_30D47:	
		dc.b  $F,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4 ; 0			
		dc.b   4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,$F9 ; 16
		dc.b   0					; 32
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_30D68:				
		dc.w word_30D76-Map_30D68			; 0
		dc.w word_30DA0-Map_30D68			; 1
		dc.w word_30DA0-Map_30D68			; 2
		dc.w word_30DAA-Map_30D68			; 3
		dc.w word_30DAA-Map_30D68			; 4
		dc.w word_30DB4-Map_30D68			; 5
		dc.w word_30DBE-Map_30D68			; 6

word_30D76:
		dc.w 5			
		dc.w $280F,$2088,$2044,	   0			; 0
		dc.w  $80F,$2088,$2044,	   0			; 4
		dc.w $E80F,$2088,$2044,	   0			; 8
		dc.w $C80F,$2088,$2044,	   0			; 12
		dc.w $C00C,$2084,$2042,	   0			; 16
word_30DA0:	
		dc.w 1			
		dc.w $FC04,$2098,$204C,$FFF8			; 0
word_30DAA:	dc.w 1			
		dc.w $FC0C,$209A,$204D,$FFF0			; 0
word_30DB4:	dc.w 1			
		dc.w $FC0C,$209E,$204F,$FFF0			; 0
word_30DBE:	dc.w 1			
		dc.w $FC0C,$20A2,$2051,$FFF0			; 0
off_30DC8:	dc.w byte_30DD4-off_30DC8			; 0 
		dc.w byte_30DEA-off_30DC8			; 1
		dc.w byte_30DEE-off_30DC8			; 2
		dc.w byte_30DF1-off_30DC8			; 3
		dc.w byte_30DFD-off_30DC8			; 4
		dc.w byte_30E00-off_30DC8			; 5
byte_30DD4:	dc.b   7,  0,  1,$FF,  2,  3,  2,  3,  2,  3,  2,  3,$FF,  4,  4,  4 ; 0
					
		dc.b   4,  4,  4,  4,  4,$FF			; 16
byte_30DEA:	dc.b   1,  6,  7,$FF				; 0 
byte_30DEE:	dc.b  $F,  9,$FF				; 0 
byte_30DF1:	dc.b   2, $A, $A, $B, $B, $B, $B, $B, $A, $A,$FD,  2 ; 0
					
byte_30DFD:	dc.b  $F,  8,$FF				; 0 
byte_30E00:	dc.b   7,  5,$FF,  0				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_30E04:				
		dc.w word_30E1C-Map_30E04			; 0
		dc.w word_30E2E-Map_30E04			; 1
		dc.w word_30E40-Map_30E04			; 2
		dc.w word_30E52-Map_30E04			; 3
		dc.w word_30E64-Map_30E04			; 4
		dc.w word_30E76-Map_30E04			; 5
		dc.w word_30E88-Map_30E04			; 6
		dc.w word_30E9A-Map_30E04			; 7
		dc.w word_30EAC-Map_30E04			; 8
		dc.w word_30EE6-Map_30E04			; 9
		dc.w word_30F10-Map_30E04			; 10
		dc.w word_30F3A-Map_30E04			; 11
word_30E1C:	dc.w 2			
		dc.w $E80D, $150,  $A8,$FFE8			; 0
		dc.w $E805, $148,  $A4,$FFD8			; 4
word_30E2E:	dc.w 2			
		dc.w $E80D, $158,  $AC,$FFE8			; 0
		dc.w $E805, $148,  $A4,$FFD8			; 4
word_30E40:	dc.w 2			
		dc.w $E80D, $160,  $B0,$FFE8			; 0
		dc.w $E805, $14C,  $A6,$FFD8			; 4
word_30E52:	dc.w 2			
		dc.w $E80D, $168,  $B4,$FFE8			; 0
		dc.w $E805, $14C,  $A6,$FFD8			; 4
word_30E64:	dc.w 2			
		dc.w $E80D, $170,  $B8,$FFE8			; 0
		dc.w $E805, $14C,  $A6,$FFD8			; 4
word_30E76:	dc.w 2			
		dc.w $E80D, $178,  $BC,$FFE8			; 0
		dc.w $E805, $14C,  $A6,$FFD8			; 4
word_30E88:	dc.w 2			
		dc.w $1805,  $7E,  $3F,$FFE8			; 0
		dc.w $1805,  $7E,  $3F,	   8			; 4
word_30E9A:	dc.w 2			
		dc.w $1804,  $82,  $41,$FFE8			; 0
		dc.w $1804,  $82,  $41,	   8			; 4
word_30EAC:	dc.w 7			
		dc.w $D805, $140,  $A0,$FFFA			; 0
		dc.w $E805, $144,  $A2,	   8			; 4
		dc.w	 0,$206F,$2037,$FFD0			; 8
		dc.w $F806,$2070,$2038,$FFD8			; 12
		dc.w $F80F,$2128,$2094,$FFE8			; 16
		dc.w $F807,$2076,$203B,$FFE8			; 20
		dc.w $F807,$2076,$203B,	   8			; 24
word_30EE6:	dc.w 5			
		dc.w $EA0F,$2000,$2000,$FF9C			; 0
		dc.w $D20A,$2010,$2008,$FFA4			; 4
		dc.w $D20B,$2019,$200C,$FFBC			; 8
		dc.w $F205,$2025,$2012,$FFBC			; 12
		dc.w $F805,$2065,$2032,$FFC0			; 16
word_30F10:	dc.w 5			
		dc.w $F10F,$2029,$2014,$FF9D			; 0
		dc.w $D90A,$2039,$201C,$FFA5			; 4
		dc.w $D907,$2042,$2021,$FFBD			; 8
		dc.w $F902,$204A,$2025,$FFBD			; 12
		dc.w $F805,$2069,$2034,$FFC0			; 16
word_30F3A:	dc.w 3			
		dc.w $EC0F,$204D,$2026,$FFA0			; 0
		dc.w  $C0D,$205D,$202E,$FFA0			; 4
		dc.w	 4,$206D,$2036,$FFC0			; 8
; ===========================================================================

		if RemoveJmpTos=0
JmpTo37_DisplaySprite:				
		jmp	DisplaySprite
JmpTo55_DeleteObject:				
		jmp	DeleteObject
JmpTo14_FindFreeObj:				
		jmp	FindFreeObj
JmpTo8_PlaySound:				
		jmp	PlaySound
JmpTo22_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo19_AnimateSprite:				
		jmp	AnimateSprite
JmpTo3_RandomNumber:				
		jmp	RandomNumber
JmpTo8_AddPLC:				
		jmp	AddPLC
JmpTo5_AddPoints:				
		jmp	AddPoints
JmpTo4_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo4_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
JmpTo8_DetectPlatform:				
		jmp	DetectPlatform
JmpTo26_SolidObject:				
		jmp	SolidObject

		align 4
	endc
			 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 57 - MCZ boss
; ----------------------------------------------------------------------------

BossMysticCave:				
		moveq	#0,d0
		move.b	ost_boss_subtype(a0),d0
		move.w	off_30FB2(pc,d0.w),d1
		jmp	off_30FB2(pc,d1.w)
; ===========================================================================
off_30FB2:	
		dc.w loc_30FB8-off_30FB2			; 0 
		dc.w loc_310BE-off_30FB2			; 1
		dc.w loc_315F2-off_30FB2			; 2
; ===========================================================================

loc_30FB8:				
		move.l	#Map_316EC,ost_mappings(a0)
		move.w	#tile_Nem_MCZBoss,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.w	#$21A0,ost_x_pos(a0)
		move.w	#$560,ost_y_pos(a0)
		move.b	#5,ost_mainspr_frame(a0)
		addq.b	#2,ost_boss_subtype(a0)
		move.b	#2,ost_boss_routine(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#4,ost_mainspr_childsprites(a0)
		move.b	#$F,$20(a0)
		move.b	#8,ost_boss_hitcount2(a0)
		move.w	ost_x_pos(a0),(v_boss_x_pos).w
		move.w	ost_y_pos(a0),(v_boss_y_pos).w
		move.w	#$C0,(v_boss_y_vel).w
		move.b	#0,(v_boss_collision_routine).w
		move.b	#1,(f_screen_shake).w
		move.b	#$40,ost_mainspr_width(a0)
		move.w	ost_x_pos(a0),ost_subspr2_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr2_y_pos(a0)
		move.b	#2,ost_subspr2_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr3_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr3_y_pos(a0)
		move.b	#1,ost_subspr3_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr4_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr4_y_pos(a0)
		move.b	#$E,ost_subspr4_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr5_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr5_y_pos(a0)
		move.b	#2,ost_subspr5_frame(a0)
		subi.w	#$28,ost_subspr5_x_pos(a0)
		move.w	#$28,(v_boss_timer).w
		move.w	#-$380,$2E(a0)
		move.w	#-$380,$30(a0)
		bsr.w	loc_31090
		rts	
; ===========================================================================

loc_31090:				
		lea	($FFFFF740).w,a2
		move.b	#2,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		move.b	#$D,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_310BE:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_310CC(pc,d0.w),d1
		jmp	off_310CC(pc,d1.w)
; ===========================================================================
off_310CC:	
		dc.w loc_310DA-off_310CC			; 0 
		dc.w loc_3116E-off_310CC			; 1
		dc.w loc_311AA-off_310CC			; 2
		dc.w loc_3124A-off_310CC			; 3
		dc.w loc_314D2-off_310CC			; 4
		dc.w loc_31526-off_310CC			; 5
		dc.w loc_315A6-off_310CC			; 6
; ===========================================================================

loc_310DA:				
		subi_.w	#1,(v_boss_timer).w
		bpl.s	loc_3112C
		move.b	#0,($FFFFF745).w
		bsr.w	BossMove
		cmpi.w	#$560,(v_boss_y_pos).w
		bgt.s	loc_3112C
		move.w	#$100,(v_boss_y_vel).w
		move.w	($FFFFB008).w,d3
		cmpi.w	#$2190,d3
		bcc.s	loc_3110A
		move.w	#$2200,d3
		bra.s	loc_3110E
; ===========================================================================

loc_3110A:				
		move.w	#$2120,d3

loc_3110E:				
		move.w	d3,($FFFFF750).w
		addq.b	#2,ost_boss_routine(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		move.w	($FFFFB008).w,d0
		sub.w	($FFFFF750).w,d0
		bmi.s	loc_3112C
		bset	#render_xflip_bit,ost_render(a0)

loc_3112C:				
		cmpi.w	#$28,(v_boss_timer).w
		bne.s	loc_3113A
		move.b	#0,(v_boss_collision_routine).w

loc_3113A:				
		cmpi.w	#$620,(v_boss_y_pos).w
		bge.s	loc_3114C
		move.b	#1,(f_screen_shake).w
		bsr.w	loc_313C6

loc_3114C:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_3130A
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

loc_3116E:				
		bsr.w	BossMove
		bsr.w	loc_313C6
		cmpi.w	#$620,(v_boss_y_pos).w
		blt.s	loc_31188
		addq.b	#2,ost_boss_routine(a0)
		move.b	#0,(f_screen_shake).w

loc_31188:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_3130A
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

loc_311AA:				
		bsr.w	BossMove
		cmpi.w	#$660,(v_boss_y_pos).w
		blt.s	loc_31228
		move.w	#$660,(v_boss_y_pos).w
		addq.b	#2,ost_boss_routine(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,2(a1)
		ori.b	#6,2(a1)
		andi.b	#-$10,ost_x_pos(a1)
		ori.b	#6,ost_x_pos(a1)
		andi.b	#-$10,6(a1)
		ori.b	#$D,6(a1)
		move.b	#$20,5(a1)
		move.w	#$64,(v_boss_timer).w
		move.b	#$30,1(a1)
		bclr	#render_xflip_bit,ost_render(a0)
		move.w	($FFFFB008).w,d0
		sub.w	($FFFFF750).w,d0
		bmi.s	loc_31210
		bset	#render_xflip_bit,ost_render(a0)

loc_31210:				
		move.w	#-$200,(v_boss_x_vel).w
		move.w	#0,(v_boss_y_vel).w
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_31228
		neg.w	(v_boss_x_vel).w

loc_31228:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_3130A

loc_31246:
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

loc_3124A:				
		subi_.w	#1,(v_boss_timer).w
		cmpi.w	#$28,(v_boss_timer).w
		bgt.w	loc_312E8
		move.b	#1,(v_boss_collision_routine).w
		tst.w	(v_boss_timer).w
		bpl.w	loc_312E8

loc_31268:
		tst.b	ost_boss_hurtplayer(a0)
		beq.s	loc_31274
		sf.b	ost_boss_hurtplayer(a0)
		bra.s	loc_31298
; ===========================================================================

loc_31274:				
		bsr.w	BossMove
		cmpi.w	#$2120,($FFFFF750).w
		bgt.s	loc_31288
		move.w	#$2120,($FFFFF750).w
		bra.s	loc_312A2
; ===========================================================================

loc_31288:				
		cmpi.w	#$2200,($FFFFF750).w
		blt.s	loc_312E8
		move.w	#$2200,($FFFFF750).w
		bra.s	loc_312A2
; ===========================================================================

loc_31298:				
		lea	($FFFFF740).w,a1
		move.b	#$30,7(a1)

loc_312A2:				
		move.w	#0,(v_boss_x_vel).w
		move.b	#0,ost_boss_routine(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,2(a1)
		ori.b	#$B,2(a1)
		andi.b	#-$10,ost_x_pos(a1)
		ori.b	#$B,ost_x_pos(a1)
		move.b	#render_abs,ost_render(a1)
		andi.b	#-$10,6(a1)
		ori.b	#$D,6(a1)
		move.w	#$64,(v_boss_timer).w
		move.w	#-$C0,(v_boss_y_vel).w

loc_312E8:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_3130A
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

loc_3130A:				
		move.w	ost_x_pos(a0),d0
		move.w	ost_y_pos(a0),d1
		move.w	d0,ost_subspr3_x_pos(a0)
		move.w	d1,ost_subspr3_y_pos(a0)
		move.w	d0,ost_subspr4_x_pos(a0)
		move.w	d1,ost_subspr4_y_pos(a0)
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_31358
		move.w	d0,ost_subspr5_x_pos(a0)
		move.w	d1,ost_subspr5_y_pos(a0)
		move.w	d0,ost_subspr2_x_pos(a0)
		move.w	d1,ost_subspr2_y_pos(a0)
		move.w	d1,$3A(a0)
		move.w	d1,$34(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_31350
		addi.w	#$28,ost_subspr5_x_pos(a0)
		rts	
; ===========================================================================

loc_31350:				
		subi.w	#$28,ost_subspr5_x_pos(a0)
		rts	
; ===========================================================================

loc_31358:				
		cmpi.w	#$78,(v_boss_timer).w
		bgt.s	locret_313C4
		subi_.w	#1,ost_subspr5_x_pos(a0)
		move.l	$3A(a0),d0
		move.w	$2E(a0),d1
		addi.w	#$38,$2E(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$3A(a0)
		move.w	$3A(a0),ost_subspr5_y_pos(a0)
		cmpi.w	#$6F0,ost_subspr5_y_pos(a0)
		blt.s	loc_31392
		move.w	#0,$2E(a0)

loc_31392:				
		addi_.w	#1,ost_subspr2_x_pos(a0)
		move.l	$34(a0),d0
		move.w	$30(a0),d1
		addi.w	#$38,$30(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$34(a0)
		move.w	$34(a0),ost_subspr2_y_pos(a0)
		cmpi.w	#$6F0,ost_subspr2_y_pos(a0)
		blt.s	locret_313C4
		move.w	#0,$30(a0)

locret_313C4:				
		rts	
; ===========================================================================

loc_313C6:				
		move.b	(v_vblank_counter_byte).w,d1
		sf.b	d2
		andi.b	#$1F,d1
		beq.s	loc_313DA
		andi.b	#7,d1
		bne.s	locret_31438
		st.b	d2

loc_313DA:				
		jsrto	RandomNumber,JmpTo4_RandomNumber
		swap	d1
		andi.w	#$1FF,d1
		addi.w	#$20F0,d1
		cmpi.w	#$2230,d1
		bgt.s	loc_313DA
		jsrto	FindFreeObj,JmpTo15_FindFreeObj
		bne.s	locret_31438
		move.b	#id_BossMysticCave,ost_id(a1)
		move.b	#4,ost_boss_subtype(a1)
		move.w	d1,ost_x_pos(a1)
		move.w	#$5F0,ost_y_pos(a1)
		move.l	#Map_316EC,ost_mappings(a1)
		move.w	#vram_FallingRocks/sizeof_cell,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		move.b	#$D,$1A(a1)
		tst.b	d2
		bne.s	locret_31438
		move.b	#$14,$1A(a1)
		move.b	#-$4F,$20(a1)

locret_31438:				
		rts	
; ===========================================================================

loc_3143A:				
		bsr.w	loc_31470
		cmpi.b	#$1F,ost_boss_flash_time(a0)
		bne.s	locret_31450
		lea	($FFFFF740).w,a1
		move.b	#-$40,7(a1)

locret_31450:				
		rts	
; ===========================================================================

loc_31452:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		addq.b	#2,ost_boss_wobble(a0)

loc_31470:				
		cmpi.b	#8,ost_boss_routine(a0)
		bcc.s	locret_314B6
		tst.b	ost_boss_hitcount2(a0)
		beq.s	loc_314B8
		tst.b	$20(a0)
		bne.s	locret_314B6
		tst.b	ost_boss_flash_time(a0)
		bne.s	loc_3149A
		move.b	#$20,ost_boss_flash_time(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_3149A:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_314A8
		move.w	#$EEE,d0

loc_314A8:				
		move.w	d0,(a1)
		subq.b	#1,ost_boss_flash_time(a0)
		bne.s	locret_314B6
		move.b	#$F,$20(a0)

locret_314B6:				
		rts	
; ===========================================================================

loc_314B8:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo6_AddPoints
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,ost_boss_routine(a0)
		moveq	#$40,d0
		jsrto	AddPLC,JmpTo9_AddPLC
		rts	
; ===========================================================================

loc_314D2:				
		st.b	ost_boss_defeated(a0)
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_314F4
		move.b	#$13,ost_subspr4_frame(a0)
		move.b	#7,ost_mainspr_frame(a0)
		bsr.w	BossExplode
		bra.s	loc_31512
; ===========================================================================

loc_314F4:				
		bset	#render_xflip_bit,ost_render(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,ost_boss_routine(a0)
		move.b	#$12,ost_subspr4_frame(a0)
		move.w	#-$12,(v_boss_timer).w

loc_31512:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_3130A
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

loc_31526:				
		addq.w	#1,(v_boss_timer).w
		beq.s	loc_31542
		bpl.s	loc_31548
		cmpi.w	#$620,(v_boss_y_pos).w
		bcc.s	loc_3153A
		subq.w	#1,(v_boss_timer).w

loc_3153A:				
		addi.w	#$10,(v_boss_y_vel).w
		bra.s	loc_3158A
; ===========================================================================

loc_31542:				
		clr.w	(v_boss_y_vel).w
		bra.s	loc_3158A
; ===========================================================================

loc_31548:				
		cmpi.w	#$18,(v_boss_timer).w
		bcs.s	loc_31576
		beq.s	loc_3157E
		cmpi.w	#$20,(v_boss_timer).w
		bcs.s	loc_3158A
		lea	($FFFFF740).w,a1
		move.b	#$D,7(a1)
	if FixBugs
		_move.b	#2,0(a1)
    else
		; This should be 'a1' instead of 'a2'. A random part of RAM gets
		; written to instead.		
		_move.b	#2,0(a2)
	endc	
		move.b	#0,1(a1)
		addq.b	#2,ost_boss_routine(a0)
		bra.s	loc_3158A
; ===========================================================================

loc_31576:				
		subi_.w	#8,(v_boss_y_vel).w
		bra.s	loc_3158A
; ===========================================================================

loc_3157E:				
		clr.w	(v_boss_y_vel).w
		jsrto	RestoreLevelMusic,JmpTo5_RestoreLevelMusic
		jsrto	LoadAnimalExplosionArt,JmpTo5_LoadAnimalExplosionArt

loc_3158A:				
		bsr.w	BossMove
		bsr.w	loc_31452
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_3130A
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

loc_315A6:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2240,(v_boundary_right_next).w
		beq.s	loc_315C0
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_315C6
; ===========================================================================

loc_315C0:				
		tst.b	ost_render(a0)
		bpl.s	JmpTo56_DeleteObject

loc_315C6:				
		bsr.w	BossMove
		bsr.w	loc_31452
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		lea	(off_3160A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_3130A
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================

JmpTo56_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================

loc_315F2:				
		jsrto	ObjectFall,JmpTo5_ObjectFall
		subi.w	#$28,ost_subspr2_y_pos(a0)
		cmpi.w	#$6F0,ost_y_pos(a0)
		
	if RemoveJmpTos	
		bgt.s	JmpTo56_DeleteObject
	else
		bgt.w	JmpTo57_DeleteObject
	endc
		
		jmpto	DisplaySprite,JmpTo38_DisplaySprite
; ===========================================================================
off_3160A:	
		dc.w byte_31628-off_3160A			; 0 
		dc.w byte_3162E-off_3160A			; 1
		dc.w byte_31631-off_3160A			; 2
		dc.w byte_31638-off_3160A			; 3
		dc.w byte_31649-off_3160A			; 4
		dc.w byte_3165A-off_3160A			; 5
		dc.w byte_31661-off_3160A			; 6
		dc.w byte_31673-off_3160A			; 7
		dc.w byte_31684-off_3160A			; 8
		dc.w byte_31695-off_3160A			; 9
		dc.w byte_316A6-off_3160A			; 10
		dc.w byte_316AD-off_3160A			; 11
		dc.w byte_316BF-off_3160A			; 12
		dc.w byte_316D1-off_3160A			; 13
		dc.w byte_316E8-off_3160A			; 14
byte_31628:	dc.b  $F,  1,$FF,  0,$FC,  2			; 0	
byte_3162E:	dc.b   5,  8,$FF				; 0 
byte_31631:	dc.b   1,  5,  6,$FF,  7,$FC,  3		; 0 
byte_31638:	dc.b   1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,$FD ; 0
					
		dc.b   4					; 16
byte_31649:	dc.b   1,  2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  2,  2,  3,  3,$FD ; 0
					
		dc.b   5					; 16
byte_3165A:	dc.b   1,  4,  2,  3,  4,$FC,  1		; 0 
byte_31661:	dc.b   1,  2,  3,  4,  4,  2,  2,  3,  3,  3,  4,  4,  4,  2,  2,  2 ; 0
					
		dc.b $FD,  7					; 16
byte_31673:	dc.b   1,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  2,  8,  8,  8,$FD ; 0
					
		dc.b   8					; 16
byte_31684:	dc.b   1,  9,  9,  9,  9,  9, $A, $A, $A, $A, $A, $B, $B, $B, $B,$FD ; 0
					
		dc.b   9					; 16
byte_31695:	dc.b   1,  9,  9,  9,  9, $A, $A, $A, $B, $B, $B,  9,  9, $A, $A,$FD ; 0
					
		dc.b  $A					; 16
byte_316A6:	dc.b   1, $B,  9, $A, $B,$FC,  1		; 0 
byte_316AD:	dc.b   1,  9, $A, $B, $B,  9,  9, $A, $A, $A, $B, $B, $B,  9,  9,  9 ; 0
					
		dc.b $FD, $C					; 16
byte_316BF:	dc.b   1,  9, $A, $A, $A, $A, $B, $B, $B, $B, $B,  9,  8,  8,  8,  8 ; 0
					
		dc.b $FD,  3					; 16
byte_316D1:	dc.b   7, $E, $F,$FF,$10,$11,$10,$11,$10,$11,$10,$11,$FF,$12,$12,$12 ; 0
					
		dc.b $12,$12,$12,$12,$12,$12,$FF		; 16
byte_316E8:	dc.b   7,$12,$FF,  0				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_316EC:				
		dc.w word_31716-Map_316EC			; 0
		dc.w word_31740-Map_316EC			; 1
		dc.w word_3176A-Map_316EC			; 2
		dc.w word_3177C-Map_316EC			; 3
		dc.w word_3178E-Map_316EC			; 4
		dc.w word_317A0-Map_316EC			; 5
		dc.w word_317B2-Map_316EC			; 6
		dc.w word_317C4-Map_316EC			; 7
		dc.w word_317CE-Map_316EC			; 8
		dc.w word_317F8-Map_316EC			; 9
		dc.w word_3180A-Map_316EC			; 10
		dc.w word_3181C-Map_316EC			; 11
		dc.w word_3182E-Map_316EC			; 12
		dc.w word_31838-Map_316EC			; 13
		dc.w word_31842-Map_316EC			; 14
		dc.w word_31854-Map_316EC			; 15
		dc.w word_31866-Map_316EC			; 16
		dc.w word_31878-Map_316EC			; 17
		dc.w word_3188A-Map_316EC			; 18
		dc.w word_3189C-Map_316EC			; 19
		dc.w word_318AE-Map_316EC			; 20
word_31716:	dc.w 5			
		dc.w $F80F,$2148,$20A4,$FFF0			; 0
		dc.w $F807,$2158,$20AC,	 $10			; 4
		dc.w $E805, $164,  $B2,	 $10			; 8
		dc.w $F80A,$2009,$2004,$FFD8			; 12
		dc.w $D809,  $21,  $10,$FFF8			; 16
word_31740:	dc.w 5			
		dc.w $F80F,$2148,$20A4,$FFF0			; 0
		dc.w $F807,$2158,$20AC,	 $10			; 4
		dc.w $E805, $164,  $B2,	 $10			; 8
		dc.w $F80A,$2000,$2000,$FFD8			; 12
		dc.w $D809,  $21,  $10,$FFF8			; 16
word_3176A:	dc.w 2			
		dc.w $D007,$2027,$2013,	  $C			; 0
		dc.w $F00B,$203F,$201F,	   8			; 4
word_3177C:	dc.w 2			
		dc.w $D007,$202F,$2017,	  $C			; 0
		dc.w $F00B,$204B,$2025,	   8			; 4
word_3178E:	dc.w 2			
		dc.w $D007,$2037,$201B,	  $C			; 0
		dc.w $F00B,$2057,$202B,	   8			; 4
word_317A0:	dc.w 2			
		dc.w $1208,  $12,    9,$FFF8			; 0
		dc.w $1A08,  $15,   $A,$FFF8			; 4
word_317B2:	dc.w 2			
		dc.w $1208,  $12,    9,$FFF8			; 0
		dc.w $1A0A,  $18,   $C,$FFF8			; 4
word_317C4:	dc.w 1			
		dc.w $1208,  $12,    9,$FFF8			; 0
word_317CE:	dc.w 5			
		dc.w $E009,$2063,$2031,$FFF8			; 0
		dc.w $F001,$2069,$2034,	   0			; 4
		dc.w $F00F,$206B,$2035,	   8			; 8
		dc.w $F802,$207B,$203D,	 $28			; 12
		dc.w $1004,$207E,$203F,	 $18			; 16
word_317F8:	dc.w 2			
		dc.w $FC0D,$2080,$2040,$FFF0			; 0
		dc.w $F80E,$2098,$204C,	 $10			; 4
word_3180A:	dc.w 2			
		dc.w $FC0D,$2088,$2044,$FFF0			; 0
		dc.w $F80E,$20A4,$2052,	 $10			; 4
word_3181C:	dc.w 2			
		dc.w $FC0D,$2090,$2048,$FFF0			; 0
		dc.w $F80E,$20B0,$2058,	 $10			; 4
word_3182E:	dc.w 1			
		dc.w $F00F,$40BC,$405E,$FFF0			; 0
word_31838:	dc.w 1			
		dc.w $F805,$4000,$4000,$FFF8			; 0
word_31842:	dc.w 2			
		dc.w $E80D, $170,  $B8,$FFF0			; 0
		dc.w $E805, $168,  $B4,$FFE0			; 4
word_31854:	dc.w 2			
		dc.w $E80D, $178,  $BC,$FFF0			; 0
		dc.w $E805, $168,  $B4,$FFE0			; 4
word_31866:	dc.w 2			
		dc.w $E80D, $180,  $C0,$FFF0			; 0
		dc.w $E805, $16C,  $B6,$FFE0			; 4
word_31878:	dc.w 2			
		dc.w $E80D, $188,  $C4,$FFF0			; 0
		dc.w $E805, $16C,  $B6,$FFE0			; 4
word_3188A:	dc.w 2			
		dc.w $E80D, $190,  $C8,$FFF0			; 0
		dc.w $E805, $16C,  $B6,$FFE0			; 4
word_3189C:	dc.w 2			
		dc.w $E80D, $198,  $CC,$FFF0			; 0
		dc.w $E805, $16C,  $B6,$FFE0			; 4
word_318AE:	dc.w 1			
		dc.w $F003,$4004,$4002,$FFFC			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo38_DisplaySprite:				
		jmp	DisplaySprite
JmpTo57_DeleteObject:				
		jmp	DeleteObject
JmpTo15_FindFreeObj:				
		jmp	FindFreeObj
JmpTo4_RandomNumber:				
		jmp	RandomNumber
JmpTo9_AddPLC:				
		jmp	AddPLC
JmpTo6_AddPoints:				
		jmp	AddPoints
JmpTo5_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo5_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
JmpTo5_ObjectFall:				
		jmp	ObjectFall

		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 51 - CNZ boss
; ----------------------------------------------------------------------------

BossCasinoNight:				
		moveq	#0,d0
		move.b	ost_boss_subtype(a0),d0
		move.w	off_318FE(pc,d0.w),d1
		jmp	off_318FE(pc,d1.w)
; ===========================================================================
off_318FE:	
		dc.w loc_31904-off_318FE			; 0 
		dc.w loc_31A04-off_318FE			; 1
		dc.w loc_31F24-off_318FE			; 2
; ===========================================================================

loc_31904:				
		move.l	#Map_320EA,ost_mappings(a0)
		move.w	#tile_Nem_CNZBoss-$60,ost_tile(a0)	; badly reused mappings
		ori.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.w	#$2A46,ost_x_pos(a0)
		move.w	#$654,ost_y_pos(a0)
		move.b	#0,ost_mainspr_frame(a0)
		move.b	#$20,ost_mainspr_width(a0)
	if FixBugs=0
		; This instruction is pointless, as render_useheight_bit of 'ost_render' 
		; is never set anyway. Also, it clashes with 'ost_boss_flash_time', 
		; as they use the same SST slot. Consequently, on the first hit, 
		; loc_31CDC behaves as if the boss is already invulnerable, leading to
		; several incorrect behaviors: no hit sound plays, the boss is
		; invulnerable for 128 frames instead of 48, and Eggman takes a while 
		; to react and show his hurt face.		
		move.b	#$80,ost_mainspr_height(a0)
	endc	
		addq.b	#2,ost_boss_subtype(a0)
		move.b	#0,ost_boss_routine(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#4,ost_mainspr_childsprites(a0)
		move.b	#$F,$20(a0)
		move.b	#8,ost_boss_hitcount2(a0)
		move.w	ost_x_pos(a0),(v_boss_x_pos).w
		move.w	ost_y_pos(a0),(v_boss_y_pos).w
		move.w	ost_x_pos(a0),ost_subspr2_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr2_y_pos(a0)
		move.b	#5,ost_subspr2_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr3_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr3_y_pos(a0)
		move.b	#1,ost_subspr3_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr4_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr4_y_pos(a0)
		move.b	#6,ost_subspr4_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr5_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr5_y_pos(a0)
		move.b	#2,ost_subspr5_frame(a0)
		move.b	#0,$38(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$180,(v_boss_x_vel).w
		move.b	#0,$2D(a0)
		move.w	#1,(v_boss_timer).w
		bsr.w	loc_319D6
		rts	
; ===========================================================================

loc_319D6:				
		lea	($FFFFF740).w,a2
		move.b	#8,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)+
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		move.b	#2,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_31A04:				
		tst.b	(v_boss_collision_routine).w
		beq.s	loc_31A1C
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_31A1C
		move.b	#-$30,d0
		jsrto	PlaySound,JmpTo9_PlaySound

loc_31A1C:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_31A2A(pc,d0.w),d1
		jmp	off_31A2A(pc,d1.w)
; ===========================================================================
off_31A2A:	dc.w loc_31A36-off_31A2A			; 0 
		dc.w loc_31BA8-off_31A2A			; 1
		dc.w loc_31C22-off_31A2A			; 2
		dc.w loc_31D5C-off_31A2A			; 3
		dc.w loc_31DCC-off_31A2A			; 4
		dc.w loc_31E2A-off_31A2A			; 5
; ===========================================================================

loc_31A36:				
		moveq	#0,d0
		move.b	$38(a0),d0
		move.w	off_31A44(pc,d0.w),d0
		jmp	off_31A44(pc,d0.w)
; ===========================================================================
off_31A44:	dc.w loc_31A48-off_31A44			; 0 
		dc.w loc_31A78-off_31A44			; 1
; ===========================================================================

loc_31A48:				
		cmpi.w	#$28C0,($FFFFF750).w
		bgt.s	loc_31A74
		move.w	#$28C0,($FFFFF750).w
		move.w	#0,(v_boss_y_vel).w
		move.w	#$180,(v_boss_x_vel).w
		move.b	#2,$38(a0)
		bset	#render_xflip_bit,ost_render(a0)
		move.b	#0,$2D(a0)

loc_31A74:				
		bra.w	loc_31AA4
; ===========================================================================

loc_31A78:				
		cmpi.w	#$29C0,($FFFFF750).w
		blt.s	loc_31AA4
		move.w	#$29C0,($FFFFF750).w
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$180,(v_boss_x_vel).w
		move.b	#0,$38(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		move.b	#0,$2D(a0)

loc_31AA4:				
		bsr.w	BossMove
		tst.b	$3F(a0)
		beq.s	loc_31AB6
		subq.b	#1,$3F(a0)
		bra.w	loc_31B46
; ===========================================================================

loc_31AB6:				
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0
		bcc.s	loc_31B46
		cmpi.w	#$6B0,($FFFFB00C).w
		bcs.s	loc_31B06
		cmpi.b	#3,$2D(a0)
		bcc.s	loc_31B46
		addq.b	#1,$2D(a0)
		addq.b	#2,ost_boss_routine(a0)
		move.b	#8,($FFFFF740).w
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#0,(v_boss_collision_routine).w
		bsr.w	loc_31BF2
		move.w	#$50,(v_boss_timer).w
		bra.w	loc_31C08
; ===========================================================================

loc_31B06:				
		cmpi.w	#$67C,($FFFFB00C).w
		bcs.s	loc_31B46
		move.b	#$F,ost_mainspr_frame(a0)
		move.b	#2,(v_boss_collision_routine).w
		move.b	#$20,($FFFFF743).w
		move.b	#$20,($FFFFF749).w
		move.b	#9,($FFFFF740).w
		addq.b	#4,ost_boss_routine(a0)
		move.w	#0,(v_boss_x_vel).w
		move.w	#$180,(v_boss_y_vel).w
		move.b	#0,$3E(a0)
		bra.w	loc_31C08
; ===========================================================================

loc_31B46:				
		bra.w	*+4					; pointless
		addi_.w	#1,(v_boss_timer).w
		move.w	(v_boss_timer).w,d0
		andi.w	#$3F,d0
		bne.w	loc_31C08
		btst	#6,($FFFFF75D).w
		beq.s	loc_31B86
		move.b	#$F,ost_mainspr_frame(a0)
		move.b	#2,(v_boss_collision_routine).w
		move.b	#$20,($FFFFF743).w
		move.b	#$20,($FFFFF749).w
		move.b	#9,($FFFFF740).w
		bra.w	loc_31C08
; ===========================================================================

loc_31B86:				
		move.b	#$C,ost_mainspr_frame(a0)
		move.b	#1,(v_boss_collision_routine).w
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#4,($FFFFF740).w
		bra.w	loc_31C08
; ===========================================================================

loc_31BA8:				
		move.b	#0,(v_boss_collision_routine).w
		subi_.w	#1,(v_boss_timer).w
		bne.s	loc_31BC6
		move.b	#$20,($FFFFF743).w
		move.b	#$20,($FFFFF749).w
		bra.w	loc_31C08
; ===========================================================================

loc_31BC6:				
		cmpi.w	#-$14,(v_boss_timer).w
		bgt.w	loc_31C08
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#0,ost_boss_routine(a0)
		move.w	#-1,(v_boss_timer).w
		move.b	#$40,$3F(a0)
		bra.w	loc_31C08
; ===========================================================================

loc_31BF2:				
		jsrto	FindFreeObj,JmpTo16_FindFreeObj
		bne.s	locret_31C06
		move.b	#id_BossCasinoNight,ost_id(a1)
		move.b	#4,ost_boss_subtype(a1)
		move.l	a0,$34(a1)

locret_31C06:				
		rts	
; ===========================================================================

loc_31C08:				
		bsr.w	loc_31CDC
		bsr.w	loc_31E76
		bsr.w	loc_31C92
		lea	(off_3209C).l,a1
		bsr.w	BossAnimate
		
	if RemoveJmpTos&(FixBugs=0)	
	; This has to be moved so that it doesn't point to 'DisplaySprite3'.
JmpTo39_DisplaySprite:
	endc
		
		jmpto	DisplaySprite,JmpTo39_DisplaySprite
; ===========================================================================

loc_31C22:				
		bsr.w	BossMove
		tst.b	$3E(a0)
		bne.s	loc_31C60
		cmpi.w	#$680,ost_y_pos(a0)
		bcs.s	loc_31C08
		move.w	#0,(v_boss_x_vel).w
		move.w	#-$180,(v_boss_y_vel).w
		move.b	#-1,$3E(a0)
		move.b	#1,(v_boss_collision_routine).w
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#4,($FFFFF740).w
		bra.s	loc_31C08
; ===========================================================================

loc_31C60:				
		cmpi.w	#$654,ost_y_pos(a0)
		bcc.s	loc_31C08
		move.b	#0,ost_boss_routine(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$180,(v_boss_x_vel).w
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_31C8E
		move.w	#$180,(v_boss_x_vel).w
		move.b	#$C,ost_mainspr_frame(a0)

loc_31C8E:				
		bra.w	loc_31C08
; ===========================================================================

loc_31C92:				
		cmpi.b	#48-1,ost_boss_flash_time(a0)
		bne.s	loc_31CAC
		lea	($FFFFF740).w,a1
		andi.b	#-$10,6(a1)
		ori.b	#6,6(a1)
		rts	
; ===========================================================================

loc_31CAC:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_31CBC
		cmpi.b	#4,($FFFFB064).w
		bne.s	locret_31CDA

loc_31CBC:				
		lea	($FFFFF740).w,a1
		move.b	6(a1),d0
		andi.b	#$F,d0
		cmpi.b	#6,d0
		beq.s	locret_31CDA
		andi.b	#-$10,6(a1)
		ori.b	#5,6(a1)

locret_31CDA:				
		rts	
; ===========================================================================

loc_31CDC:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		addq.b	#2,ost_boss_wobble(a0)
		cmpi.b	#6,ost_boss_routine(a0)
		bcc.s	locret_31D40
		tst.b	ost_boss_hitcount2(a0)
		beq.s	loc_31D42
		tst.b	$20(a0)
		bne.s	locret_31D40
		tst.b	ost_boss_flash_time(a0)
		bne.s	loc_31D24
		move.b	#48,ost_boss_flash_time(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_31D24:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_31D32
		move.w	#$EEE,d0

loc_31D32:				
		move.w	d0,(a1)
		subq.b	#1,ost_boss_flash_time(a0)
		bne.s	locret_31D40
		move.b	#$F,$20(a0)

locret_31D40:				
		rts	
; ===========================================================================

loc_31D42:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo7_AddPoints
		move.w	#$B3,(v_boss_timer).w
		move.b	#6,ost_boss_routine(a0)
		moveq	#$40,d0
		jsrto	AddPLC,JmpTo10_AddPLC
		rts	
; ===========================================================================

loc_31D5C:				
		st.b	ost_boss_defeated(a0)
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_31D7E
		move.b	#0,(v_boss_collision_routine).w
		move.b	#0,ost_mainspr_frame(a0)
		move.b	#$B,$21(a0)
		bsr.w	BossExplode
		bra.s	loc_31DB8
; ===========================================================================

loc_31D7E:				
		bset	#render_xflip_bit,ost_render(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,ost_boss_routine(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,6(a1)
		ori.b	#3,6(a1)
		_move.b	#8,0(a1)
		move.b	#-$23,($FFFF8C54).w
		move.b	#1,(f_screen_redraw).w
		move.w	#-$12,(v_boss_timer).w

loc_31DB8:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_31E76
		jmpto	DisplaySprite,JmpTo39_DisplaySprite
; ===========================================================================

loc_31DCC:				
		addq.w	#1,(v_boss_timer).w
		beq.s	loc_31DDC
		bpl.s	loc_31DE2
		addi.w	#$18,(v_boss_y_vel).w
		bra.s	loc_31E0E
; ===========================================================================

loc_31DDC:				
		clr.w	(v_boss_y_vel).w
		bra.s	loc_31E0E
; ===========================================================================

loc_31DE2:				
		cmpi.w	#$18,(v_boss_timer).w
		bcs.s	loc_31DFA
		beq.s	loc_31E02
		cmpi.w	#$20,(v_boss_timer).w
		bcs.s	loc_31E0E
		addq.b	#2,ost_boss_routine(a0)
		bra.s	loc_31E0E
; ===========================================================================

loc_31DFA:				
		subi_.w	#8,(v_boss_y_vel).w
		bra.s	loc_31E0E
; ===========================================================================

loc_31E02:				
		clr.w	(v_boss_y_vel).w
		jsrto	RestoreLevelMusic,JmpTo6_RestoreLevelMusic
		jsrto	LoadAnimalExplosionArt,JmpTo6_LoadAnimalExplosionArt

loc_31E0E:				
		bsr.w	BossMove
		bsr.w	loc_31CDC
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_31E76
		jmpto	DisplaySprite,JmpTo39_DisplaySprite
; ===========================================================================

loc_31E2A:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2B20,(v_boundary_right_next).w
		beq.s	loc_31E44
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_31E4A
; ===========================================================================

loc_31E44:				
		tst.b	ost_render(a0)
		bpl.s	JmpTo58_DeleteObject

loc_31E4A:				
		bsr.w	BossMove
		bsr.w	loc_31CDC
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_31E76
		lea	(off_3209C).l,a1
		bsr.w	BossAnimate
		jmpto	DisplaySprite,JmpTo39_DisplaySprite
; ===========================================================================

    if RemoveJmpTos
JmpTo59_DeleteObject:
    endc

JmpTo58_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================

loc_31E76:				
		move.w	ost_x_pos(a0),d0
		move.w	ost_y_pos(a0),d1
		move.w	d0,ost_subspr3_x_pos(a0)
		move.w	d1,ost_subspr3_y_pos(a0)
		move.w	d0,ost_subspr4_x_pos(a0)
		move.w	d1,ost_subspr4_y_pos(a0)
		tst.b	ost_boss_defeated(a0)
		bne.s	loc_31EAE
		move.w	d0,ost_subspr5_x_pos(a0)
		move.w	d1,ost_subspr5_y_pos(a0)
		move.w	d0,ost_subspr2_x_pos(a0)
		move.w	d1,ost_subspr2_y_pos(a0)
		move.w	d1,$3A(a0)
		move.w	d1,$34(a0)
		rts	
; ===========================================================================

loc_31EAE:				
		cmpi.w	#$78,(v_boss_timer).w
		bgt.s	locret_31F22
		subi_.w	#1,ost_subspr5_x_pos(a0)
		move.l	$3A(a0),d0
		move.w	$2E(a0),d1
		addi.w	#$38,$2E(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$3A(a0)
		move.w	$3A(a0),ost_subspr5_y_pos(a0)
		cmpi.w	#$6F0,ost_subspr5_y_pos(a0)
		blt.s	loc_31EE8
		move.w	#0,$2E(a0)

loc_31EE8:				
		cmpi.w	#$3C,(v_boss_timer).w
		bgt.s	locret_31F22
		addi_.w	#1,ost_subspr2_x_pos(a0)
		move.l	$34(a0),d0
		move.w	$30(a0),d1
		addi.w	#$38,$30(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$34(a0)
		move.w	$34(a0),ost_subspr2_y_pos(a0)
		cmpi.w	#$6F0,ost_subspr2_y_pos(a0)
		blt.s	locret_31F22
		move.w	#0,$30(a0)

locret_31F22:				
		rts	
; ===========================================================================

loc_31F24:				
		movea.l	$34(a0),a1
		cmpi.b	#6,ost_boss_routine(a1)
		bcc.w	JmpTo59_DeleteObject
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_31F40(pc,d0.w),d1
		jmp	off_31F40(pc,d1.w)
; ===========================================================================
off_31F40:	
		dc.w loc_31F48-off_31F40			; 0 
		dc.w loc_31F96-off_31F40			; 1
		dc.w loc_31FDC-off_31F40			; 2
		dc.w loc_32080-off_31F40			; 3
; ===========================================================================

loc_31F48:				
		move.l	#Map_320EA,ost_mappings(a0)
		move.w	#tile_Nem_CNZBoss-$60,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#7,$18(a0)
		addq.b	#2,$25(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addi.w	#$30,ost_y_pos(a0)
		move.b	#8,ost_height(a0)
		move.b	#8,$17(a0)
		move.b	#$12,ost_boss_wobble(a0)
		move.b	#-$68,$20(a0)
		rts	
; ===========================================================================

loc_31F96:				
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.w	$28(a0),d0
		add.w	d0,ost_y_pos(a0)
		addi_.w	#1,d0
		cmpi.w	#$2E,d0
		blt.s	loc_31FBC
		move.w	#$2E,d0

loc_31FBC:				
		move.w	d0,$28(a0)
		tst.w	(v_boss_timer).w
		bne.w	JmpTo39_DisplaySprite
		addq.b	#2,$25(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_y_vel(a0)
	
	if RemoveJmpTos&FixBugs
	; Moved so that it doesn't point to 'DisplaySprite3'.
JmpTo39_DisplaySprite:
	endc	
	
		jmpto	DisplaySprite,JmpTo39_DisplaySprite
; ===========================================================================

loc_31FDC:				
		bsr.w	loc_31FF8
		jsr	FindFloorObj
		tst.w	d1
		bpl.w	JmpTo39_DisplaySprite
		add.w	d1,ost_y_pos(a0)
		bsr.w	loc_32030
		jmpto	DisplaySprite,JmpTo39_DisplaySprite
; ===========================================================================

loc_31FF8:				
		moveq	#0,d2
		move.w	ost_x_pos(a0),d2
		swap	d2
		moveq	#0,d3

loc_32002:
		move.w	ost_y_pos(a0),d3
		swap	d3
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		addi.w	#$38,ost_y_vel(a0)
		swap	d2
		move.w	d2,ost_x_pos(a0)
		swap	d3
		move.w	d3,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_32030:				
		move.b	#-$3C,d0
		jsrto	PlaySound,JmpTo9_PlaySound
		move.w	#tile_Nem_CNZBoss-$60,ost_tile(a0)
		move.b	#7,$1C(a0)
		move.w	#-$300,ost_y_vel(a0)
		move.w	#-$100,ost_x_vel(a0)
		move.b	#4,ost_boss_subtype(a0)
		move.b	#6,$25(a0)
		move.b	#-$68,$20(a0)
		jsrto	FindNextFreeObj,JmpTo23_FindNextFreeObj
		bne.s	locret_3207E
		moveq	#0,d0
		move.w	#$F,d1

loc_3206E:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_3206E
		neg.w	ost_x_vel(a1)

locret_3207E:				
		rts	
; ===========================================================================

loc_32080:				
		bsr.w	loc_31FF8
		lea	(off_3209C).l,a1
		jsrto	AnimateSprite,JmpTo20_AnimateSprite
		cmpi.w	#$705,ost_y_pos(a0)
		bcs.w	JmpTo39_DisplaySprite
		jmpto	JmpTo59_DeleteObject,JmpTo59_DeleteObject
; ===========================================================================
off_3209C:	
		dc.w byte_320B0-off_3209C			; 0 
		dc.w byte_320B3-off_3209C			; 1
		dc.w byte_320B9-off_3209C			; 2
		dc.w byte_320BF-off_3209C			; 3
		dc.w byte_320C3-off_3209C			; 4
		dc.w byte_320C8-off_3209C			; 5
		dc.w byte_320D3-off_3209C			; 6
		dc.w byte_320DD-off_3209C			; 7
		dc.w byte_320E1-off_3209C			; 8
		dc.w byte_320E4-off_3209C			; 9
byte_320B0:	dc.b  $F,  1,$FF				; 0 
byte_320B3:	dc.b  $F,  4,$FF,  5,$FC,  2			; 0	
byte_320B9:	dc.b  $F,  2,$FF,  3,$FC,  2			; 0	
byte_320BF:	dc.b   7,  6,  7,$FF				; 0 
byte_320C3:	dc.b   1, $C, $D, $E,$FF			; 0 
byte_320C8:	dc.b   7,  8,  9,  8,  9,  8,  9,  8,  9,$FD,  3 ; 0 
byte_320D3:	dc.b   7, $A, $A, $A, $A, $A, $A, $A,$FD,  3	; 0	
byte_320DD:	dc.b   3,$13,$14,$FF				; 0 
byte_320E1:	dc.b   1,  0,$FF				; 0 
byte_320E4:	dc.b   1, $F,$10,$11,$FF,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_320EA:				
		dc.w Map_320EA-Map_320EA			;	0
		dc.w word_32114-Map_320EA			; 1
		dc.w word_3213E-Map_320EA			; 2
		dc.w word_32148-Map_320EA			; 3
		dc.w word_32152-Map_320EA			; 4
		dc.w word_3215C-Map_320EA			; 5
		dc.w word_3216E-Map_320EA			; 6
		dc.w word_32180-Map_320EA			; 7
		dc.w word_32192-Map_320EA			; 8
		dc.w word_321A4-Map_320EA			; 9
		dc.w word_321B6-Map_320EA			; 10
		dc.w word_321C8-Map_320EA			; 11
		dc.w word_321DA-Map_320EA			; 12
		dc.w word_321E4-Map_320EA			; 13
		dc.w word_321EE-Map_320EA			; 14
		dc.w word_321F8-Map_320EA			; 15
		dc.w word_3220A-Map_320EA			; 16
		dc.w word_3221C-Map_320EA			; 17
		dc.w word_3222E-Map_320EA			; 18
		dc.w word_32238-Map_320EA			; 19
		dc.w word_32242-Map_320EA			; 20
word_32114:	dc.w 5			
		dc.w $F005, $17D,  $BE,	 $10			; 0
		dc.w $D80E,$2060,$2030,$FFF9			; 4
		dc.w	$F,$206C,$2036,$FFD8			; 8
		dc.w	$F,$207C,$203E,$FFF8			; 12
		dc.w	 6,$208C,$2046,	 $18			; 16
word_3213E:	dc.w 1			
		dc.w $1806,$20AA,$2055,$FFE4			; 0
word_32148:	dc.w 1			
		dc.w $1006,$20B0,$2058,$FFDB			; 0
word_32152:	dc.w 1			
		dc.w $100B,$2092,$2049,	   8			; 0
word_3215C:	dc.w 2			
		dc.w $1009,$209E,$204F,	   8			; 0
		dc.w $1006,$20A4,$2052,	 $20			; 4
word_3216E:	dc.w 2			
		dc.w $F00D, $189,  $C4,$FFF0			; 0
		dc.w $F005, $181,  $C0,$FFE0			; 4
word_32180:	dc.w 2			
		dc.w $F00D, $191,  $C8,$FFF0			; 0
		dc.w $F005, $181,  $C0,$FFE0			; 4
word_32192:	dc.w 2			
		dc.w $F00D, $199,  $CC,$FFF0			; 0
		dc.w $F005, $185,  $C2,$FFE0			; 4
word_321A4:	dc.w 2			
		dc.w $F00D, $1A1,  $D0,$FFF0			; 0
		dc.w $F005, $185,  $C2,$FFE0			; 4
word_321B6:	dc.w 2			
		dc.w $F00D, $1A9,  $D4,$FFF0			; 0
		dc.w $F005, $185,  $C2,$FFE0			; 4
word_321C8:	dc.w 2			
		dc.w $F00D, $1B1,  $D8,$FFF0			; 0
		dc.w $F005, $185,  $C2,$FFE0			; 4
word_321DA:	dc.w 1			
		dc.w $280C,$20B6,$205B,$FFF0			; 0
word_321E4:	dc.w 1			
		dc.w $280C,$20BA,$205D,$FFF0			; 0
word_321EE:	dc.w 1			
		dc.w $280C,$20BE,$205F,$FFF0			; 0
word_321F8:	dc.w 2			
		dc.w $200C,$20C2,$2061,$FFE4			; 0
		dc.w $200C,$20C6,$2063,	   4			; 4
word_3220A:	dc.w 2			
		dc.w $200C,$20CA,$2065,$FFE4			; 0
		dc.w $200C,$20CE,$2067,	   4			; 4
word_3221C:	dc.w 2			
		dc.w $200C,$20D2,$2069,$FFE4			; 0
		dc.w $200C,$20D6,$206B,	   4			; 4
word_3222E:	dc.w 1			
		dc.w $F40A,  $DA,  $6D,$FFF4			; 0
word_32238:	dc.w 1			
		dc.w $FC00,  $E3,  $71,$FFFC			; 0
word_32242:	dc.w 1			
		dc.w $FC00,  $E4,  $72,$FFFC			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo39_DisplaySprite:				
		jmp	DisplaySprite
JmpTo59_DeleteObject:				
		jmp	DeleteObject
JmpTo16_FindFreeObj:				
		jmp	FindFreeObj
JmpTo9_PlaySound:				
		jmp	PlaySound
JmpTo23_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo20_AnimateSprite:				
		jmp	AnimateSprite
JmpTo10_AddPLC:				
		jmp	AddPLC
JmpTo7_AddPoints:				
		jmp	AddPoints
JmpTo6_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo6_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
	
		align 4
			
	endc
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 54 - MTZ boss
; ----------------------------------------------------------------------------

BossMetropolis:				
		moveq	#0,d0
		move.b	ost_boss_subtype(a0),d0
		move.w	off_32296(pc,d0.w),d1
		jmp	off_32296(pc,d1.w)
; ===========================================================================
off_32296:	
		dc.w loc_3229E-off_32296			; 0 
		dc.w loc_323BA-off_32296			; 1
		dc.w loc_32CAE-off_32296			; 2
		dc.w loc_32D48-off_32296			; 3
; ===========================================================================

loc_3229E:				
		move.l	#Map_32DC6,ost_mappings(a0)
		move.w	#$37C,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.w	#$2B50,ost_x_pos(a0)
		move.w	#$380,ost_y_pos(a0)
		move.b	#2,ost_mainspr_frame(a0)
		addq.b	#2,ost_boss_subtype(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#2,ost_mainspr_childsprites(a0)
		move.b	#$F,$20(a0)
		move.b	#8,ost_boss_hitcount2(a0)
		move.b	#7,$3E(a0)
		move.w	ost_x_pos(a0),(v_boss_x_pos).w
		move.w	ost_y_pos(a0),(v_boss_y_pos).w
		move.w	#0,(v_boss_x_vel).w
		move.w	#$100,(v_boss_y_vel).w
		move.b	#$20,ost_mainspr_width(a0)
		clr.b	$2B(a0)
		clr.b	$2C(a0)
		move.b	#$40,ost_boss_wobble(a0)
		move.b	#$27,$33(a0)
		move.b	#$27,$39(a0)
		move.w	ost_x_pos(a0),ost_subspr2_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr2_y_pos(a0)
		move.b	#$C,ost_subspr2_frame(a0)
		move.w	ost_x_pos(a0),ost_subspr3_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr3_y_pos(a0)
		move.b	#0,ost_subspr3_frame(a0)
		jsrto	FindFreeObj,JmpTo17_FindFreeObj
		bne.s	loc_3239C
		move.b	#id_BossMetropolis,ost_id(a1)
		move.b	#6,ost_boss_subtype(a1)
		move.b	#$13,ost_frame(a1)
		move.l	#Map_32DC6,ost_mappings(a1)
		move.w	#tile_Nem_MTZBoss,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#6,$18(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	a0,$34(a1)
		move.b	#$20,$19(a1)
		jsrto	FindFreeObj,JmpTo17_FindFreeObj
		bne.s	loc_3239C
		move.b	#id_BossMetropolisOrb,ost_id(a1)
		move.l	a0,$34(a1)

loc_3239C:				
		lea	($FFFFF740).w,a2
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_323BA:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_323C8(pc,d0.w),d1
		jmp	off_323C8(pc,d1.w)
; ===========================================================================
off_323C8:	
		dc.w loc_323DC-off_323C8			; 0 
		dc.w loc_32456-off_323C8			; 1
		dc.w loc_324DC-off_323C8			; 2
		dc.w loc_32524-off_323C8			; 3
		dc.w loc_32544-off_323C8			; 4
		dc.w loc_32574-off_323C8			; 5
		dc.w loc_325BE-off_323C8			; 6
		dc.w loc_3262E-off_323C8			; 7
		dc.w loc_32802-off_323C8			; 8
		dc.w loc_32864-off_323C8			; 9
; ===========================================================================

loc_323DC:				
		bsr.w	BossMove
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		cmpi.w	#$4A0,(v_boss_y_pos).w
		bcs.s	loc_32426
		addq.b	#2,ost_boss_routine(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$100,(v_boss_x_vel).w
		bclr	#7,$2B(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		move.w	($FFFFB008).w,d0
		cmp.w	($FFFFF750).w,d0
		bcs.s	loc_32426
		move.w	#$100,(v_boss_x_vel).w
		bset	#7,$2B(a0)
		bset	#render_xflip_bit,ost_render(a0)

loc_32426:				
		bsr.w	loc_3278E
		lea	(off_32D7A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_32774
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_3243C:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,ost_y_pos(a0)
		addq.b	#4,ost_boss_wobble(a0)
		rts	
; ===========================================================================

loc_32456:				
		bsr.w	BossMove
		btst	#7,$2B(a0)
		bne.s	loc_32490
		cmpi.w	#$2AD0,($FFFFF750).w
		bcc.s	loc_324BC
		bchg	#7,$2B(a0)
		move.w	#$100,(v_boss_x_vel).w
		bset	#render_xflip_bit,ost_render(a0)
		bset	#6,$2B(a0)
		beq.s	loc_324BC
		addq.b	#2,ost_boss_routine(a0)
		move.w	#-$100,(v_boss_y_vel).w
		bra.s	loc_324BC
; ===========================================================================

loc_32490:				
		cmpi.w	#$2BD0,($FFFFF750).w
		bcs.s	loc_324BC
		bchg	#7,$2B(a0)
		move.w	#-$100,(v_boss_x_vel).w
		bclr	#render_xflip_bit,ost_render(a0)
		bset	#6,$2B(a0)
		beq.s	loc_324BC
		addq.b	#2,ost_boss_routine(a0)
		move.w	#-$100,(v_boss_y_vel).w

loc_324BC:				
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_3243C

loc_324C6:				
		bsr.w	loc_3278E
		lea	(off_32D7A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_32774
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_324DC:				
		bsr.w	BossMove
		cmpi.w	#$470,(v_boss_y_pos).w
		bcc.s	loc_324EE
		move.w	#0,(v_boss_y_vel).w

loc_324EE:				
		btst	#7,$2B(a0)
		bne.s	loc_32506
		cmpi.w	#$2B50,(v_boss_x_pos).w
		bcc.s	loc_32514
		move.w	#0,(v_boss_x_vel).w
		bra.s	loc_32514
; ===========================================================================

loc_32506:				
		cmpi.w	#$2B50,($FFFFF750).w
		bcs.s	loc_32514
		move.w	#0,(v_boss_x_vel).w

loc_32514:				
		move.w	(v_boss_x_vel).w,d0
		or.w	(v_boss_y_vel).w,d0
		bne.s	loc_32522
		addq.b	#2,ost_boss_routine(a0)

loc_32522:				
		bra.s	loc_324BC
; ===========================================================================

loc_32524:				
		cmpi.b	#$68,$33(a0)
		bcc.s	loc_32536
		addq.b	#1,$33(a0)
		addq.b	#1,$39(a0)
		bra.s	loc_32540
; ===========================================================================

loc_32536:				
		subq.b	#1,$39(a0)
		bne.s	loc_32540
		addq.b	#2,ost_boss_routine(a0)

loc_32540:				
		bra.w	loc_324BC
; ===========================================================================

loc_32544:				
		cmpi.b	#$27,$33(a0)
		bcs.s	loc_32552
		subq.b	#1,$33(a0)
		bra.s	loc_32570
; ===========================================================================

loc_32552:				
		addq.b	#1,$39(a0)
		cmpi.b	#$27,$39(a0)
		bcs.s	loc_32570
		move.w	#$100,(v_boss_y_vel).w
		move.b	#0,ost_boss_routine(a0)
		bclr	#6,$2B(a0)

loc_32570:				
		bra.w	loc_324BC
; ===========================================================================

loc_32574:				
		tst.b	$39(a0)
		beq.s	loc_32580
		subq.b	#1,$39(a0)
		bra.s	loc_32586
; ===========================================================================

loc_32580:				
		move.b	#-1,$3A(a0)

loc_32586:				
		cmpi.b	#$27,$33(a0)
		bcs.s	loc_32592
		subq.b	#1,$33(a0)

loc_32592:				
		bsr.w	BossMove
		cmpi.w	#$420,(v_boss_y_pos).w
		bcc.s	loc_325A4
		move.w	#0,(v_boss_y_vel).w

loc_325A4:				
		tst.b	$2C(a0)
		bne.s	loc_325BA
		tst.b	$3A(a0)
		beq.s	loc_325B6
		move.b	#-$80,$3A(a0)

loc_325B6:				
		addq.b	#2,ost_boss_routine(a0)

loc_325BA:				
		bra.w	loc_324BC
; ===========================================================================

loc_325BE:				
		tst.b	$3E(a0)
		beq.s	loc_325EC
		tst.b	$3A(a0)
		bne.s	loc_3262A
		cmpi.b	#$27,$39(a0)
		bcc.s	loc_325D8
		addq.b	#1,$39(a0)
		bra.s	loc_3262A
; ===========================================================================

loc_325D8:				
		move.w	#$100,(v_boss_y_vel).w
		move.b	#0,ost_boss_routine(a0)
		bclr	#6,$2B(a0)
		bra.s	loc_3262A
; ===========================================================================

loc_325EC:				
		move.w	#-$180,(v_boss_y_vel).w
		move.w	#-$100,(v_boss_x_vel).w
		bclr	#render_xflip_bit,ost_render(a0)
		btst	#7,$2B(a0)
		beq.s	loc_32612
		move.w	#$100,(v_boss_x_vel).w
		bset	#render_xflip_bit,ost_render(a0)

loc_32612:				
		move.b	#$E,ost_boss_routine(a0)
		move.b	#0,$2E(a0)
		bclr	#6,$2B(a0)
		move.b	#0,$2F(a0)

loc_3262A:				
		bra.w	loc_324BC
; ===========================================================================

loc_3262E:				
		tst.b	$2F(a0)
		beq.s	loc_3263C
		subq.b	#1,$2F(a0)
		bra.w	loc_324C6
; ===========================================================================

loc_3263C:				
		moveq	#0,d0
		move.b	$2E(a0),d0
		move.w	off_3264A(pc,d0.w),d1
		jmp	off_3264A(pc,d1.w)
; ===========================================================================
off_3264A:	dc.w loc_32650-off_3264A			; 0 
		dc.w loc_326B8-off_3264A			; 1
		dc.w loc_32704-off_3264A			; 2
; ===========================================================================

loc_32650:				
		bsr.w	BossMove
		cmpi.w	#$420,(v_boss_y_pos).w
		bcc.s	loc_32662
		move.w	#0,(v_boss_y_vel).w

loc_32662:				
		btst	#7,$2B(a0)
		bne.s	loc_32690
		cmpi.w	#$2AF0,($FFFFF750).w
		bcc.s	loc_326B4
		addq.b	#2,$2E(a0)
		move.w	#$180,(v_boss_y_vel).w
		move.b	#3,$2D(a0)
		move.w	#$1E,(v_boss_timer).w
		bset	#render_xflip_bit,ost_render(a0)
		bra.s	loc_326B4
; ===========================================================================

loc_32690:				
		cmpi.w	#$2BB0,($FFFFF750).w
		bcs.s	loc_326B4
		addq.b	#2,$2E(a0)
		move.w	#$180,(v_boss_y_vel).w
		move.b	#3,$2D(a0)
		move.w	#$1E,(v_boss_timer).w
		bclr	#render_xflip_bit,ost_render(a0)

loc_326B4:				
		bra.w	loc_324BC
; ===========================================================================

loc_326B8:				
		bsr.w	BossMove
		cmpi.w	#$4A0,(v_boss_y_pos).w
		bcs.s	loc_326D6
		move.w	#-$180,(v_boss_y_vel).w
		addq.b	#2,$2E(a0)
		bchg	#7,$2B(a0)
		bra.s	loc_326FC
; ===========================================================================

loc_326D6:				
		btst	#7,$2B(a0)
		bne.s	loc_326EE
		cmpi.w	#$2AD0,($FFFFF750).w
		bcc.s	loc_326FC
		move.w	#0,(v_boss_x_vel).w
		bra.s	loc_326FC
; ===========================================================================

loc_326EE:				
		cmpi.w	#$2BD0,($FFFFF750).w
		bcs.s	loc_326FC
		move.w	#0,(v_boss_x_vel).w

loc_326FC:				
		bsr.w	loc_32740
		bra.w	loc_324BC
; ===========================================================================

loc_32704:				
		bsr.w	BossMove
		cmpi.w	#$470,(v_boss_y_pos).w
		bcc.s	loc_32724
		move.w	#$100,(v_boss_x_vel).w
		btst	#7,$2B(a0)
		bne.s	loc_32724
		move.w	#-$100,(v_boss_x_vel).w

loc_32724:				
		cmpi.w	#$420,(v_boss_y_pos).w
		bcc.s	loc_32738
		move.w	#0,(v_boss_y_vel).w
		move.b	#0,$2E(a0)

loc_32738:				
		bsr.w	loc_32740
		bra.w	loc_324BC
; ===========================================================================

loc_32740:				
		subi_.w	#1,(v_boss_timer).w
		bne.s	locret_32772
		tst.b	$2D(a0)
		beq.s	locret_32772
		subq.b	#1,$2D(a0)
		jsrto	FindFreeObj,JmpTo17_FindFreeObj
		bne.s	locret_32772
		move.b	#id_BossMetropolis,ost_id(a1)
		move.b	#4,ost_boss_subtype(a1)
		move.l	a0,$34(a1)
		move.w	#$1E,(v_boss_timer).w
		move.b	#$10,$2F(a0)

locret_32772:				
		rts	
; ===========================================================================

loc_32774:				
		move.w	ost_x_pos(a0),d0
		move.w	ost_y_pos(a0),d1
		move.w	d0,ost_subspr2_x_pos(a0)
		move.w	d1,ost_subspr2_y_pos(a0)
		move.w	d0,ost_subspr3_x_pos(a0)
		move.w	d1,ost_subspr3_y_pos(a0)
		rts	
; ===========================================================================

loc_3278E:				
		bsr.w	loc_328DE
		cmpi.b	#64-1,ost_boss_flash_time(a0)
		bne.s	loc_327D2
		st.b	$38(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,2(a1)
		ori.b	#5,2(a1)
		tst.b	$3E(a0)
		beq.s	loc_327CA
		move.b	#$A,ost_boss_routine(a0)
		move.w	#-$180,(v_boss_y_vel).w
		subq.b	#1,$3E(a0)
		move.w	#0,(v_boss_x_vel).w

loc_327CA:				
		move.w	#0,(v_boss_x_vel).w
		rts	
; ===========================================================================

loc_327D2:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_327E2
		cmpi.b	#4,($FFFFB064).w
		bne.s	locret_32800

loc_327E2:				
		lea	($FFFFF740).w,a1
		move.b	2(a1),d0
		andi.b	#$F,d0
		cmpi.b	#4,d0
		beq.s	locret_32800
		andi.b	#-$10,2(a1)
		ori.b	#4,2(a1)

locret_32800:				
		rts	
; ===========================================================================

loc_32802:				
		subq.w	#1,(v_boss_timer).w
		cmpi.w	#$3C,(v_boss_timer).w
		bcs.s	loc_32846
		bmi.s	loc_32820
		bsr.w	BossExplode
		lea	($FFFFF740).w,a1
		move.b	#7,2(a1)
		bra.s	loc_32846
; ===========================================================================

loc_32820:				
		bset	#render_xflip_bit,ost_render(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,ost_boss_routine(a0)
		move.w	#-$12,(v_boss_timer).w
		lea	($FFFFF740).w,a1
		move.b	#3,2(a1)
		jsrto	RestoreLevelMusic,JmpTo7_RestoreLevelMusic

loc_32846:				
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		lea	(off_32D7A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_32774
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_32864:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2BF0,(v_boundary_right_next).w
		bcc.s	loc_3287E
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_32884
; ===========================================================================

loc_3287E:				
		tst.b	ost_render(a0)
		bpl.s	JmpTo60_DeleteObject

loc_32884:				
		tst.b	(v_boss_status).w
		bne.s	loc_32894
		move.b	#1,(v_boss_status).w
		jsrto	LoadAnimalExplosionArt,JmpTo7_LoadAnimalExplosionArt

loc_32894:				
		bsr.w	BossMove
		bsr.w	loc_328C0
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		lea	(off_32D7A).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_32774
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

JmpTo60_DeleteObject:				
		jmp	DeleteObject
; ===========================================================================

loc_328C0:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,ost_y_pos(a0)
		move.w	($FFFFF750).w,ost_x_pos(a0)
		addq.b	#2,ost_boss_wobble(a0)

loc_328DE:				
		cmpi.b	#$10,ost_boss_routine(a0)
		bcc.s	locret_32924
		tst.b	ost_boss_hitcount2(a0)
		beq.s	loc_32926
		tst.b	$20(a0)
		bne.s	locret_32924
		tst.b	ost_boss_flash_time(a0)
		bne.s	loc_32908
		move.b	#$40,ost_boss_flash_time(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_32908:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_32916
		move.w	#$EEE,d0

loc_32916:				
		move.w	d0,(a1)
		subq.b	#1,ost_boss_flash_time(a0)
		bne.s	locret_32924
		move.b	#$F,$20(a0)

locret_32924:				
		rts	
; ===========================================================================

loc_32926:				
		moveq	#$64,d0
		jsrto	AddPoints,JmpTo8_AddPoints
		move.w	#$EF,(v_boss_timer).w
		move.b	#$10,ost_boss_routine(a0)
		moveq	#$40,d0
		jsrto	AddPLC,JmpTo11_AddPLC
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 53 - MTZ boss' shield orbs
; ----------------------------------------------------------------------------

BossMetropolisOrb:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3294E(pc,d0.w),d1
		jmp	off_3294E(pc,d1.w)
; ===========================================================================
off_3294E:	dc.w loc_32958-off_3294E			; 0 
		dc.w loc_329DA-off_3294E			; 1
		dc.w loc_32B64-off_3294E			; 2
		dc.w loc_32BDC-off_3294E			; 3
		dc.w loc_32C98-off_3294E			; 4
; ===========================================================================

loc_32958:				
		movea.l	a0,a1
		moveq	#6,d3
		moveq	#0,d2
		bra.s	loc_32966
; ===========================================================================

loc_32960:				
		jsrto	FindFreeObj,JmpTo17_FindFreeObj
		bne.s	locret_329CA

loc_32966:				
		move.b	#$20,$19(a1)
		move.l	$34(a0),$34(a1)
		move.b	#id_BossMetropolisOrb,ost_id(a1)
		move.l	#Map_32DC6,ost_mappings(a1)
		move.w	#tile_Nem_MTZBoss,ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#3,$18(a1)
		addq.b	#2,$24(a1)
		move.b	#5,$1A(a1)
		move.b	byte_329CC(pc,d2.w),$28(a1)
		move.b	byte_329CC(pc,d2.w),$3B(a1)
		move.b	byte_329D3(pc,d2.w),$3A(a1)
		move.b	#$40,$29(a1)
		move.b	#-$79,$20(a1)
		move.b	#2,$21(a1)
		move.b	#0,$3C(a1)
		addq.w	#1,d2
		dbf	d3,loc_32960

locret_329CA:				
		rts	
; ===========================================================================
byte_329CC:	
		dc.b $24					; 0
		dc.b $6C					; 1
		dc.b $B4					; 2
		dc.b $FC					; 3
		dc.b $48					; 4
		dc.b $90					; 5
		dc.b $D8					; 6
byte_329D3:	
		dc.b   0					; 0
		dc.b   1					; 1
		dc.b   1					; 2
		dc.b   0					; 3
		dc.b   1					; 4
		dc.b   1					; 5
		dc.b   0					; 6
; ===========================================================================

loc_329DA:				
		movea.l	$34(a0),a1
		move.w	ost_y_pos(a1),$2A(a0)
		subi_.w	#4,$2A(a0)
		move.w	ost_x_pos(a1),$38(a0)
		tst.b	$38(a1)
		beq.s	loc_32A56
		move.b	#0,$38(a1)
		addi_.b	#1,$2C(a1)
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$3C,$32(a0)
		move.b	#2,$1C(a0)
		move.w	#-$400,ost_y_vel(a0)
		move.w	#-$80,d1
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		bpl.s	loc_32A28
		neg.w	d1

loc_32A28:				
		cmpi.w	#$2AF0,ost_x_pos(a0)
		bcc.s	loc_32A34
		move.w	#$80,d1	

loc_32A34:				
		cmpi.w	#$2BB0,ost_x_pos(a0)
		bcs.s	loc_32A40
		move.w	#-$80,d1

loc_32A40:				
		bclr	#render_xflip_bit,ost_render(a0)
		tst.w	d1
		bmi.s	loc_32A50
		bset	#render_xflip_bit,ost_render(a0)

loc_32A50:				
		move.w	d1,ost_x_vel(a0)
		bra.s	loc_32A64
; ===========================================================================

loc_32A56:				
		cmpi.b	#2,$21(a0)
		beq.s	loc_32A64
		move.b	#0,$20(a1)

loc_32A64:				
		bsr.w	loc_32A70
		bsr.w	loc_32B1A
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_32A70:				
		move.b	$29(a0),d0
		jsr	CalcSine
		move.w	d0,d3
		moveq	#0,d1
		move.b	$33(a1),d1
		muls.w	d1,d0
		move.w	d0,d5
		move.w	d0,d4
		move.b	$39(a1),d2
		tst.b	$3A(a1)
		beq.s	loc_32A96
		move.w	#$10,d2

loc_32A96:				
		muls.w	d3,d2
		move.w	$38(a0),d6
		move.b	$28(a0),d0
		jsr	CalcSine
		muls.w	d0,d5
		swap	d5
		add.w	d6,d5
		move.w	d5,ost_x_pos(a0)
		muls.w	d1,d4
		swap	d4
		move.w	d4,$30(a0)
		move.w	$2A(a0),d6
		move.b	$3B(a0),d0
		tst.b	$3A(a1)
		beq.s	loc_32ACA
		move.b	$3C(a0),d0

loc_32ACA:				
		jsr	CalcSine
		muls.w	d0,d2
		swap	d2
		add.w	d6,d2
		move.w	d2,ost_y_pos(a0)
		addq.b	#4,$28(a0)
		tst.b	$3A(a1)
		bne.s	loc_32AEA
		addq.b	#8,$3B(a0)
		rts	
; ===========================================================================

loc_32AEA:				
		cmpi.b	#-1,$3A(a1)
		beq.s	loc_32B0C
		cmpi.b	#-$80,$3A(a1)
		bne.s	loc_32B04
		subq.b	#2,$3C(a0)
		bpl.s	locret_32B18
		clr.b	$3C(a0)

loc_32B04:				
		move.b	#0,$3A(a1)
		rts	
; ===========================================================================

loc_32B0C:				
		cmpi.b	#$40,$3C(a0)
		bcc.s	locret_32B18
		addq.b	#2,$3C(a0)

locret_32B18:				
		rts	
; ===========================================================================

loc_32B1A:				
		move.w	$30(a0),d0
		bmi.s	loc_32B42
		cmpi.w	#$C,d0
		blt.s	loc_32B34
		move.b	#3,$1A(a0)
		move.b	#1,$18(a0)
		rts	
; ===========================================================================

loc_32B34:				
		move.b	#4,$1A(a0)
		move.b	#2,$18(a0)
		rts	
; ===========================================================================

loc_32B42:				
		cmpi.w	#-$C,d0
		blt.s	loc_32B56
		move.b	#4,$1A(a0)
		move.b	#6,$18(a0)
		rts	
; ===========================================================================

loc_32B56:				
		move.b	#5,$1A(a0)
		move.b	#7,$18(a0)
		rts	
; ===========================================================================

loc_32B64:				
		tst.b	$32(a0)
		bmi.s	loc_32B76
		subq.b	#1,$32(a0)
		bpl.s	loc_32B76
		move.b	#-$26,$20(a0)

loc_32B76:				
		jsrto	ObjectFall,JmpTo6_ObjectFall
		subi.w	#$20,ost_y_vel(a0)
		cmpi.w	#$180,ost_y_vel(a0)
		blt.s	loc_32B8E
		move.w	#$180,ost_y_vel(a0)

loc_32B8E:				
		cmpi.w	#$4AC,ost_y_pos(a0)
		bcs.s	loc_32BB0
		move.w	#$4AC,ost_y_pos(a0)
		move.w	#$4AC,$2E(a0)
		move.b	#1,$2C(a0)
		addq.b	#2,ost_primary_routine(a0)
		bsr.w	loc_32C4C

loc_32BB0:				
		bsr.w	loc_32BC2
		lea	(off_32D7A).l,a1
		jsrto	AnimateSprite,JmpTo21_AnimateSprite
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_32BC2:				
		cmpi.b	#-2,$21(a0)
		bgt.s	locret_32BDA
		move.b	#$14,$1A(a0)
		move.b	#6,$1C(a0)
		addq.b	#2,ost_primary_routine(a0)

locret_32BDA:				
		rts	
; ===========================================================================

loc_32BDC:				
		tst.b	$32(a0)
		bmi.s	loc_32BEE
		subq.b	#1,$32(a0)
		bpl.s	loc_32BEE
		move.b	#-$26,$20(a0)

loc_32BEE:				
		bsr.w	loc_32C66
		cmpi.b	#$B,$1A(a0)
		bne.s	loc_32BB0
		move.b	$2C(a0),d0
		jsr	CalcSine
		neg.w	d0
		asr.w	#2,d0
		add.w	$2E(a0),d0
		cmpi.w	#$4AC,d0
		bcc.s	loc_32C38
		move.w	d0,ost_y_pos(a0)
		addq.b	#1,$2C(a0)
		btst	#0,$2C(a0)
		beq.w	JmpTo40_DisplaySprite
		moveq	#-1,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_32C30
		neg.w	d0

loc_32C30:				
		add.w	d0,ost_x_pos(a0)
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_32C38:				
		move.w	#$4AC,ost_y_pos(a0)
		bsr.w	loc_32C4C
		move.b	#1,$2C(a0)
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_32C4C:				
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		bpl.s	loc_32C5E
		bclr	#render_xflip_bit,ost_render(a0)
		rts	
; ===========================================================================

loc_32C5E:				
		bset	#render_xflip_bit,ost_render(a0)
		rts	
; ===========================================================================

loc_32C66:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_32C76
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_32C82

loc_32C76:				
		move.b	#$14,$1A(a0)
		move.b	#6,$1C(a0)

loc_32C82:				
		cmpi.b	#-2,$21(a0)
		bgt.s	locret_32C96
		move.b	#$14,$1A(a0)
		move.b	#6,$1C(a0)

locret_32C96:				
		rts	
; ===========================================================================

loc_32C98:				
		move.b	#-$3C,d0
		jsrto	PlaySound,JmpTo10_PlaySound
		movea.l	$34(a0),a1
		subi_.b	#1,$2C(a1)
	
	if RemoveJmpTos	
JmpTo61_DeleteObject:
	endc
			
		jmpto	DeleteObject,JmpTo61_DeleteObject
; ===========================================================================

loc_32CAE:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_32CBC(pc,d0.w),d0
		jmp	off_32CBC(pc,d0.w)
; ===========================================================================
off_32CBC:	
		dc.w loc_32CC0-off_32CBC			; 0 
		dc.w loc_32D2C-off_32CBC			; 1
; ===========================================================================

loc_32CC0:				
		move.l	#Map_32DC6,ost_mappings(a0)
		move.w	#tile_Nem_MTZBoss,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#5,$18(a0)
		move.b	#$12,$1A(a0)
		addq.b	#2,$25(a0)
		movea.l	$34(a0),a1
		move.b	#$50,$19(a0)
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		addi_.w	#7,ost_y_pos(a0)
		subi_.w	#4,ost_x_pos(a0)
		move.w	#-$400,d0
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_32D1A
		neg.w	d0
		addi_.w	#8,ost_x_pos(a0)

loc_32D1A:				
		move.w	d0,ost_x_vel(a0)
		move.b	#-$67,$20(a0)
		move.b	#-$16,d0
		jsrto	PlaySound,JmpTo10_PlaySound

loc_32D2C:				
		jsrto	SpeedToPos,JmpTo24_SpeedToPos
		cmpi.w	#$2AB0,ost_x_pos(a0)
		bcs.w	JmpTo61_DeleteObject
		cmpi.w	#$2BF0,ost_x_pos(a0)
		bcc.w	JmpTo61_DeleteObject
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================

loc_32D48:				
		movea.l	$34(a0),a1
		cmpi.b	#id_BossMetropolis,ost_id(a1)
		bne.w	JmpTo61_DeleteObject
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		btst	#render_xflip_bit,ost_render(a1)
		beq.w	JmpTo40_DisplaySprite
		bset	#render_xflip_bit,ost_render(a0)
		
    if RemoveJmpTos
JmpTo40_DisplaySprite:
    endc
    		
		jmpto	DisplaySprite,JmpTo40_DisplaySprite
; ===========================================================================
off_32D7A:	
		dc.w byte_32D8A-off_32D7A			; 0 
		dc.w byte_32D8D-off_32D7A			; 1
		dc.w byte_32D91-off_32D7A			; 2
		dc.w byte_32DA6-off_32D7A			; 3
		dc.w byte_32DAA-off_32D7A			; 4
		dc.w byte_32DB5-off_32D7A			; 5
		dc.w byte_32DC0-off_32D7A			; 6
		dc.w byte_32DC3-off_32D7A			; 7
		
byte_32D8A:	
		dc.b  $F,  2,$FF				; 0 
		
byte_32D8D:	
		dc.b   1,  0,  1,$FF				; 0 
		
byte_32D91:	
		dc.b   3,  5,  5,  5,  5,  5,  5,  5,  5,  6,  7,  6,  7,  6,  7,  8 ; 0			
		dc.b   9, $A, $B,$FE,  1			; 16
		
byte_32DA6:	
		dc.b   7, $C, $D,$FF				; 0 
byte_32DAA:	
		dc.b   7, $E, $F, $E, $F, $E, $F, $E, $F,$FD,  3 ; 0 

byte_32DB5:	
		dc.b   7,$10,$10,$10,$10,$10,$10,$10,$10,$FD,  3 ; 0 

byte_32DC0:	
		dc.b   1,$14,$FC				; 0 

byte_32DC3:	
		dc.b   7,$11,$FF				; 0 
		
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_32DC6:				
		dc.w word_32DF0-Map_32DC6			; 0
		dc.w word_32DFA-Map_32DC6			; 1
		dc.w word_32E04-Map_32DC6			; 2
		dc.w word_32E2E-Map_32DC6			; 3
		dc.w word_32E38-Map_32DC6			; 4
		dc.w word_32E42-Map_32DC6			; 5
		dc.w word_32E4C-Map_32DC6			; 6
		dc.w word_32E56-Map_32DC6			; 7
		dc.w word_32E60-Map_32DC6			; 8
		dc.w word_32E6A-Map_32DC6			; 9
		dc.w word_32E74-Map_32DC6			; 10
		dc.w word_32E7E-Map_32DC6			; 11
		dc.w word_32EA0-Map_32DC6			; 12
		dc.w word_32EB2-Map_32DC6			; 13
		dc.w word_32EC4-Map_32DC6			; 14
		dc.w word_32ED6-Map_32DC6			; 15
		dc.w word_32EE8-Map_32DC6			; 16
		dc.w word_32EFA-Map_32DC6			; 17
		dc.w word_32F0C-Map_32DC6			; 18
		dc.w word_32F1E-Map_32DC6			; 19
		dc.w word_32F28-Map_32DC6			; 20
word_32DF0:	dc.w 1			
		dc.w	 5, $1E4,  $F2,	 $1C			; 0
word_32DFA:	dc.w 1			
		dc.w	 5, $1E8,  $F4,	 $1C			; 0
word_32E04:	dc.w 5			
		dc.w $D805, $1A4,  $D2,	   2			; 0
		dc.w $E805, $1A8,  $D4,	 $10			; 4
		dc.w $F80F,$218C,$20C6,$FFF0			; 8
		dc.w $F807,$219C,$20CE,	 $10			; 12
		dc.w $F802,$2003,$2001,$FFE8			; 16
word_32E2E:	dc.w 1			
		dc.w $F40A,$200E,$2007,$FFF4			; 0
word_32E38:	dc.w 1			
		dc.w $F40A,$206F,$2037,$FFF4			; 0
word_32E42:	dc.w 1			
		dc.w $F805,$2078,$203C,$FFF8			; 0
word_32E4C:	dc.w 1			
		dc.w $F406,$2017,$200B,$FFF8			; 0
word_32E56:	dc.w 1			
		dc.w $F809,$201D,$200E,$FFF4			; 0
word_32E60:	dc.w 1			
		dc.w $F406,$2023,$2011,$FFF8			; 0
word_32E6A:	dc.w 1			
		dc.w $F40A,  $29,  $14,$FFF4			; 0
word_32E74:	dc.w 1			
		dc.w $F00F,  $32,  $19,$FFF0			; 0
word_32E7E:	dc.w 4			
		dc.w $E80A,  $42,  $21,$FFE8			; 0
		dc.w $E80A,  $4B,  $25,	   0			; 4
		dc.w	$A,  $54,  $2A,$FFE8			; 8
		dc.w	$A,  $5D,  $2E,	   0			; 12
word_32EA0:	dc.w 2			
		dc.w $E80D, $1B4,  $DA,$FFF0			; 0
		dc.w $E805, $1AC,  $D6,$FFE0			; 4
word_32EB2:	dc.w 2			
		dc.w $E80D, $1BC,  $DE,$FFF0			; 0
		dc.w $E805, $1AC,  $D6,$FFE0			; 4
word_32EC4:	dc.w 2			
		dc.w $E80D, $1C4,  $E2,$FFF0			; 0
		dc.w $E805, $1B0,  $D8,$FFE0			; 4
word_32ED6:	dc.w 2			
		dc.w $E80D, $1CC,  $E6,$FFF0			; 0
		dc.w $E805, $1B0,  $D8,$FFE0			; 4
word_32EE8:	dc.w 2			
		dc.w $E80D, $1D4,  $EA,$FFF0			; 0
		dc.w $E805, $1B0,  $D8,$FFE0			; 4
word_32EFA:	dc.w 2			
		dc.w $E80D, $1DC,  $EE,$FFF0			; 0
		dc.w $E805, $1B0,  $D8,$FFE0			; 4
word_32F0C:	dc.w 2			
		dc.w $F80D,$2006,$2003,$FFE0			; 0
		dc.w $F80D,$2806,$2803,	   0			; 4
word_32F1E:	dc.w 1			
		dc.w $F802,$2000,$2000,$FFE0			; 0
word_32F28:	dc.w 4			
		dc.w $E80A,  $66,  $33,$FFE8
		dc.w $E80A, $866, $833,	   0
		dc.w	$A,$1066,$1033,$FFE8
		dc.w	$A,$1866,$1833,	   0
	
	if RemoveJmpTos=0
		align 4
	endc
		 
; ===========================================================================

	if RemoveJmpTos=0
JmpTo40_DisplaySprite:				
		jmp	DisplaySprite
JmpTo61_DeleteObject:				
		jmp	DeleteObject
JmpTo17_FindFreeObj:				
		jmp	FindFreeObj
JmpTo10_PlaySound:				
		jmp	PlaySound
JmpTo21_AnimateSprite:				
		jmp	AnimateSprite
JmpTo11_AddPLC:				
		jmp	AddPLC
JmpTo8_AddPoints:				
		jmp	AddPoints
JmpTo7_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo7_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
JmpTo6_ObjectFall:				
		jmp	ObjectFall
JmpTo24_SpeedToPos:				
		jmp	SpeedToPos
		
		align 4
	endc	
	 
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 55 - OOZ boss
; ----------------------------------------------------------------------------

BossOilOcean:				
		moveq	#0,d0
		move.b	ost_boss_subtype(a0),d0
		move.w	off_32F9E(pc,d0.w),d1
		jmp	off_32F9E(pc,d1.w)
; ===========================================================================
off_32F9E:	
		dc.w loc_32FA8-off_32F9E			; 0 
		dc.w loc_32FE6-off_32F9E			; 1
		dc.w loc_3320A-off_32F9E			; 2
		dc.w loc_33456-off_32F9E			; 3
		dc.w loc_33570-off_32F9E			; 4
; ===========================================================================

loc_32FA8:				
		move.l	#Map_33756,ost_mappings(a0)
		move.w	#tile_Nem_OOZBoss,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		bset	#render_subobjects_bit,ost_render(a0)
		move.b	#0,ost_mainspr_childsprites(a0)
		addq.b	#2,ost_boss_subtype(a0)
		move.b	#$F,$20(a0)
		move.b	#8,ost_boss_hitcount2(a0)
		move.b	#$40,ost_mainspr_width(a0)
		rts	
; ===========================================================================

loc_32FE6:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_32FF4(pc,d0.w),d1
		jmp	off_32FF4(pc,d1.w)
; ===========================================================================
off_32FF4:	
		dc.w loc_32FFE-off_32FF4			; 0 
		dc.w loc_33078-off_32FF4			; 1
		dc.w loc_330BA-off_32FF4			; 2
		dc.w loc_33104-off_32FF4			; 3
		dc.w loc_331A6-off_32FF4			; 4
; ===========================================================================

loc_32FFE:				
		move.w	#$2940,($FFFFF750).w
		bclr	#render_xflip_bit,ost_render(a0)
		move.w	($FFFFB008).w,d1
		cmpi.w	#$293A,d1
		bcc.s	loc_3301A
		bchg	#render_xflip_bit,ost_render(a0)

loc_3301A:				
		move.w	#$2D0,ost_y_pos(a0)
		move.w	#$2D0,(v_boss_y_pos).w
		move.b	#8,ost_mainspr_frame(a0)
		move.b	#1,ost_mainspr_childsprites(a0)
		addq.b	#2,ost_boss_routine(a0)
		move.w	#-$80,(v_boss_y_vel).w
		move.b	#$F,$20(a0)
		move.w	ost_x_pos(a0),ost_subspr2_x_pos(a0)
		move.w	ost_y_pos(a0),ost_subspr2_y_pos(a0)
		clr.b	ost_boss_wobble(a0)
		clr.b	$2A(a0)
		move.b	#8,ost_subspr2_frame(a0)
		lea	($FFFFF740).w,a2
		move.b	#5,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)
		move.b	#0,(v_boss_collision_routine).w
		rts	
; ===========================================================================

loc_33078:				
		bsr.w	BossMove
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		bsr.w	loc_330EA
		cmpi.w	#$290,(v_boss_y_pos).w
		bcc.w	loc_3315E
		move.w	#$290,(v_boss_y_pos).w
		addq.b	#2,ost_boss_routine(a0)
		move.w	#$A8,(v_boss_timer).w
		btst	#7,$2A(a0)
		bne.w	loc_3315E
		lea	($FFFFF740).w,a2
		move.b	#$10,(a2)+
		move.b	#0,(a2)
		bra.w	loc_3315E
; ===========================================================================

loc_330BA:				
		btst	#7,$2A(a0)
		bne.s	loc_330DC
		bsr.w	loc_330EA
		subi_.w	#1,(v_boss_timer).w
		bpl.w	loc_3315E
		lea	($FFFFF740).w,a2
		move.b	#5,(a2)+
		move.b	#0,(a2)

loc_330DC:				
		addq.b	#2,ost_boss_routine(a0)
		move.w	#-$40,(v_boss_y_vel).w
		bra.w	loc_3315E
; ===========================================================================

loc_330EA:				
		move.b	ost_boss_wobble(a0),d0
		jsr	CalcSine
		asr.w	#7,d1
		add.w	(v_boss_y_pos).w,d1
		move.w	d1,ost_y_pos(a0)
		addq.b	#4,ost_boss_wobble(a0)
		rts	
; ===========================================================================

loc_33104:				
		bsr.w	BossMove
		move.w	(v_boss_y_pos).w,ost_y_pos(a0)
		move.w	(v_boss_x_pos).w,ost_x_pos(a0)
		btst	#6,$2A(a0)
		bne.s	loc_3313C
		cmpi.w	#$28C,(v_boss_y_pos).w
		bcc.w	loc_3315E
		move.w	#$28C,(v_boss_y_pos).w
		move.w	#$80,(v_boss_y_vel).w
		ori.b	#$40,$2A(a0)
		bra.w	loc_3315E
; ===========================================================================

loc_3313C:				
		cmpi.w	#$2D0,(v_boss_y_pos).w
		bcs.s	loc_3315E
		move.w	#$2D0,(v_boss_y_pos).w
		clr.b	ost_boss_routine(a0)
		addq.b	#2,ost_boss_subtype(a0)
		btst	#7,$2A(a0)
		beq.s	loc_3315E
		addq.b	#2,ost_boss_subtype(a0)

loc_3315E:				
		bsr.w	loc_33174
		lea	(off_33712).l,a1
		bsr.w	BossAnimate
		bsr.w	loc_33194
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
; ===========================================================================

loc_33174:				
		bsr.w	BOOZ_Hit
		cmpi.b	#$1F,ost_boss_flash_time(a0)
		bne.s	locret_33192
		lea	($FFFFF740).w,a1
		andi.b	#-$10,(a1)
		ori.b	#3,(a1)
		ori.b	#-$80,$2A(a0)

locret_33192:				
		rts	
; ===========================================================================

loc_33194:				
		move.w	ost_x_pos(a0),d0
		move.w	ost_y_pos(a0),d1
		move.w	d0,ost_subspr2_x_pos(a0)
		move.w	d1,ost_subspr2_y_pos(a0)
		rts	
; ===========================================================================

loc_331A6:				
		clr.w	($FFFFFB22).w
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_331CA
		cmpi.w	#$1E,(v_boss_timer).w
		bcc.s	loc_331C2
		move.b	#$B,ost_mainspr_frame(a0)
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
; ===========================================================================

loc_331C2:				
		bsr.w	BossExplode
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
; ===========================================================================

loc_331CA:				
		tst.b	(v_boss_status).w
		bne.s	loc_331DE
		jsrto	RestoreLevelMusic,JmpTo8_RestoreLevelMusic
		jsrto	LoadAnimalExplosionArt,JmpTo8_LoadAnimalExplosionArt
		move.b	#1,(v_boss_status).w

loc_331DE:				
		cmpi.w	#$2A20,(v_boundary_right_next).w
		bcc.s	loc_331EC
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_331FA
; ===========================================================================

loc_331EC:				
		move.w	#$2A20,(v_boundary_right_next).w
		cmpi.w	#$2D0,ost_y_pos(a0)
		bcc.s	BranchTo_JmpTo62_DeleteObject

loc_331FA:				
		addi_.w	#1,ost_y_pos(a0)
		bsr.s	loc_33194
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
; ===========================================================================

    if RemoveJmpTos
JmpTo62_DeleteObject:
    endc

BranchTo_JmpTo62_DeleteObject:				
		jmpto	DeleteObject,JmpTo62_DeleteObject
; ===========================================================================

loc_3320A:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_33218(pc,d0.w),d1
		jmp	off_33218(pc,d1.w)
; ===========================================================================
off_33218:	
		dc.w loc_33222-off_33218			; 0 
		dc.w loc_33296-off_33218			; 1
		dc.w loc_332C6-off_33218			; 2
		dc.w loc_33324-off_33218			; 3
		dc.w loc_33388-off_33218			; 4
; ===========================================================================

loc_33222:				
		clr.w	($FFFFFB22).w
		move.w	#$2940,($FFFFF750).w
		bclr	#render_xflip_bit,ost_render(a0)
		move.w	($FFFFB008).w,d1
		cmpi.w	#$293A,d1
		bcs.s	loc_33242
		bchg	#render_xflip_bit,ost_render(a0)

loc_33242:				
		move.w	#$2B0,(v_boss_y_pos).w
		move.w	#$2B0,ost_y_pos(a0)
		move.b	#2,ost_boss_routine(a0)
		move.b	#-$76,$20(a0)
		move.b	#5,ost_mainspr_frame(a0)
		moveq	#7,d0
		moveq	#7,d2
		moveq	#0,d4
		move.w	(v_boss_y_pos).w,d5

loc_3326A:				
		addi.w	#$F,d5
		move.b	d0,ost_subspr2_frame(a0,d4.w)
		move.w	d5,ost_subspr2_y_pos(a0,d4.w)
		addq.w	#6,d4
		dbf	d2,loc_3326A
		move.b	#8,ost_mainspr_childsprites(a0)
		move.w	#-$80,(v_boss_y_vel).w
		move.b	#0,$3E(a0)
		move.b	#1,(v_boss_collision_routine).w
		rts	
; ===========================================================================

loc_33296:				
		bsr.w	BossMove
		cmpi.w	#$240,(v_boss_y_pos).w
		bcc.w	loc_333BA
		move.w	#$240,(v_boss_y_pos).w
		move.w	#0,(v_boss_y_vel).w
		addi_.b	#2,ost_boss_routine(a0)
		move.w	#$80,(v_boss_timer).w
		move.b	#3,$38(a0)
		bra.w	loc_333BA
; ===========================================================================

loc_332C6:				
		subq.b	#1,$2C(a0)
		bne.s	loc_332D2
		move.b	#5,ost_mainspr_frame(a0)

loc_332D2:				
		subi_.w	#1,(v_boss_timer).w
		bne.w	loc_333BA
		subi_.b	#1,$38(a0)
		bmi.s	loc_3330C
		jsrto	RandomNumber,JmpTo5_RandomNumber

loc_332E8:				
		addq.b	#1,d0
		andi.w	#3,d0
		btst	d0,$3E(a0)
		bne.s	loc_332E8
		bset	d0,$3E(a0)
		add.w	d0,d0
		move.w	word_3331C(pc,d0.w),(v_boss_timer).w
		addq.b	#2,ost_boss_routine(a0)
		bsr.w	loc_333C6
		bra.w	loc_333BA
; ===========================================================================

loc_3330C:				
		move.w	#$80,(v_boss_y_vel).w
		move.b	#8,ost_boss_routine(a0)
		bra.w	loc_333BA
; ===========================================================================
word_3331C:	
		dc.w  $238					; 0
		dc.w  $230					; 1
		dc.w  $240					; 2
		dc.w  $25F					; 3
; ===========================================================================

loc_33324:				
		bsr.w	BossMove
		move.w	(v_boss_timer).w,d0
		tst.w	(v_boss_y_vel).w
		bmi.s	loc_3333C
		cmp.w	(v_boss_y_pos).w,d0
		bcs.s	loc_33342
		bra.w	loc_333BA
; ===========================================================================

loc_3333C:				
		cmp.w	(v_boss_y_pos).w,d0
		bcs.s	loc_333BA

loc_33342:				
		move.w	#0,(v_boss_y_vel).w
		move.b	#8,$2C(a0)
		move.b	#6,ost_mainspr_frame(a0)
		jsrto	FindFreeObj,JmpTo18_FindFreeObj
		bne.w	loc_333BA
		move.b	#id_BossOilOcean,ost_id(a1)
		move.b	#8,ost_boss_subtype(a1)
		move.l	a0,$34(a1)
		move.b	#-$16,d0
		jsrto	PlaySound,JmpTo11_PlaySound
		move.b	#4,ost_boss_routine(a0)
		move.w	#$28,(v_boss_timer).w
		move.w	#-$80,(v_boss_y_vel).w
		bra.w	loc_333BA
; ===========================================================================

loc_33388:				
		subq.b	#1,$2C(a0)
		bne.s	loc_33394
		move.b	#5,ost_mainspr_frame(a0)

loc_33394:				
		bsr.w	BossMove
		cmpi.w	#$2B0,(v_boss_y_pos).w
		bcs.s	loc_333BA
		move.w	#$2B0,(v_boss_y_pos).w
		move.w	#0,(v_boss_y_vel).w
		move.b	#0,ost_boss_routine(a0)
		move.b	#2,ost_boss_subtype(a0)
		rts	
; ===========================================================================

loc_333BA:				
		bsr.w	loc_333E0				; could be bsr.s
		bsr.w	loc_33406				; could be bsr.s
		
	if FixBugs
		; Multi-sprite objects cannot use the 'priority' SST value, so they
		; must use 'DisplaySprite3' instead of 'DisplaySprite'.
		; This object's priority is overwritten by 'ost_subspr3_y_pos', causing it
		; to display on the wrong layer.
		move.w	#$80*3,d0
		jmp	DisplaySprite3
	else		
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
	endc	
; ===========================================================================

loc_333C6:				
		move.w	(v_boss_timer).w,d0
		sub.w	(v_boss_y_pos).w,d0
		bpl.s	loc_333D8
		move.w	#-$80,(v_boss_y_vel).w
		rts	
; ===========================================================================

loc_333D8:				
		move.w	#$80,(v_boss_y_vel).w
		rts	
; ===========================================================================

loc_333E0:				
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		blt.s	loc_333F8
		subi_.w	#8,d0
		blt.s	locret_333F6
		bset	#render_xflip_bit,ost_render(a0)

locret_333F6:				
		rts	
; ===========================================================================

loc_333F8:				
		addi_.w	#8,d0
		bgt.s	locret_333F6
		bclr	#render_xflip_bit,ost_render(a0)
		rts	
; ===========================================================================

loc_33406:				
		move.w	($FFFFF750).w,d5
		move.w	(v_boss_y_pos).w,d6
		move.b	ost_boss_wobble(a0),d3
		move.b	d3,d0
		bsr.w	loc_33446
		move.w	d1,ost_x_pos(a0)
		move.w	d0,ost_y_pos(a0)
		addi_.b	#2,ost_boss_wobble(a0)
		moveq	#7,d2
		moveq	#0,d4

loc_3342A:				
		addi.w	#$F,d6
		subi.b	#$10,d3
		bsr.w	loc_33446
		move.w	d1,ost_subspr2_x_pos(a0,d4.w)
		move.w	d0,ost_subspr2_y_pos(a0,d4.w)
		addq.w	#6,d4
		dbf	d2,loc_3342A
		rts	
; ===========================================================================

loc_33446:				
		move.b	d3,d0
		jsrto	Calcsine,JmpTo13_CalcSine
		asr.w	#4,d1
		add.w	d5,d1
		asr.w	#6,d0
		add.w	d6,d0
		rts	
; ===========================================================================

loc_33456:				
		moveq	#0,d0
		move.b	ost_boss_routine(a0),d0
		move.w	off_33464(pc,d0.w),d1
		jmp	off_33464(pc,d1.w)
; ===========================================================================
off_33464:	
		dc.w loc_33468-off_33464			; 0 
		dc.w loc_334CC-off_33464			; 1
; ===========================================================================

loc_33468:				
		clr.w	($FFFFFB22).w
		move.w	#$28C0,($FFFFF750).w
		bclr	#render_xflip_bit,ost_render(a0)
		move.w	($FFFFB008).w,d1
		cmpi.w	#$293A,d1
		bcs.s	loc_3348E
		move.w	#$29C0,($FFFFF750).w
		bset	#render_xflip_bit,ost_render(a0)

loc_3348E:				
		move.w	#$2A0,(v_boss_y_pos).w
		move.b	#2,ost_mainspr_frame(a0)
		move.b	#-$76,$20(a0)
		addq.b	#2,ost_boss_routine(a0)
		move.b	#$80,ost_mainspr_width(a0)
		clr.b	ost_boss_wobble(a0)
		moveq	#7,d0
		moveq	#7,d1
		moveq	#0,d2

loc_334B4:				
		move.b	d1,ost_subspr2_frame(a0,d2.w)
		addq.w	#next_subspr,d2
		dbf	d0,loc_334B4
		move.b	#8,ost_mainspr_childsprites(a0)
		move.b	#2,(v_boss_collision_routine).w
		rts	
; ===========================================================================

loc_334CC:				
		bsr.w	loc_334EE				; could be bsr.s
		cmpi.b	#$FE,ost_boss_wobble(a0)
		bcs.s	loc_334E6
		move.b	#0,ost_boss_routine(a0)
		move.b	#4,ost_boss_subtype(a0)
		rts	
; ===========================================================================

loc_334E6:				
		bsr.w	loc_3354C
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
; ===========================================================================

loc_334EE:				
		move.b	ost_boss_wobble(a0),d0
		addi.b	#$40,d0
		move.b	d0,d3
		bsr.w	loc_33526
		move.w	d1,ost_x_pos(a0)
		move.w	d0,ost_y_pos(a0)
		addi_.b	#1,ost_boss_wobble(a0)
		moveq	#7,d2
		moveq	#0,d4

loc_3350E:				
		subi_.b	#6,d3
		bsr.w	loc_33526
		move.w	d1,ost_subspr2_x_pos(a0,d4.w)
		move.w	d0,ost_subspr2_y_pos(a0,d4.w)
		addq.w	#next_subspr,d4
		dbf	d2,loc_3350E
		rts	
; ===========================================================================

loc_33526:				
		move.b	d3,d0
		jsrto	Calcsine,JmpTo13_CalcSine
		muls.w	#$68,d1
		asr.l	#8,d1
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_3353C
		neg.w	d1

loc_3353C:				
		add.w	($FFFFF750).w,d1
		muls.w	#$68,d0
		asr.l	#8,d0

loc_33546:
		add.w	(v_boss_y_pos).w,d0
		rts	
; ===========================================================================

loc_3354C:				
		move.b	ost_boss_wobble(a0),d0
		moveq	#$15,d1
		cmpi.b	#$52,d0
		bcs.s	loc_3356A
		moveq	#3,d1
		cmpi.b	#$6B,d0
		bcs.s	loc_3356A
		moveq	#2,d1
		cmpi.b	#-$6E,d0
		bcs.s	loc_3356A
		moveq	#4,d1

loc_3356A:				
		move.b	d1,ost_mainspr_frame(a0)
		rts	
; ===========================================================================

loc_33570:				
		moveq	#0,d0

loc_33572:
		move.b	$25(a0),d0
		move.w	off_3357E(pc,d0.w),d0
		jmp	off_3357E(pc,d0.w)
; ===========================================================================
off_3357E:	
		dc.w loc_33586-off_3357E			; 0 
		dc.w loc_335DE-off_3357E			; 2
		dc.w loc_336B2-off_3357E			; 4
		dc.w loc_3370E-off_3357E			; 6
; ===========================================================================

loc_33586:				
		addq.b	#2,$25(a0)
		move.l	#Map_33756,ost_mappings(a0)
		move.w	#tile_Nem_OOZBoss,ost_tile(a0)
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		movea.l	$34(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	#$C,$1A(a0)
		move.w	#-$20,d0
		move.w	#-$400,ost_x_vel(a0)
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_335D2
		neg.w	d0
		neg.w	ost_x_vel(a0)

loc_335D2:				
		add.w	d0,ost_x_pos(a0)
		move.b	#-$51,$20(a0)
		rts	
; ===========================================================================

loc_335DE:				
		bsr.w	loc_335FE
		jsrto	SpeedToPos,JmpTo25_SpeedToPos
		cmpi.w	#$2870,ost_x_pos(a0)
		bcs.w	JmpTo62_DeleteObject
		cmpi.w	#$2A10,ost_x_pos(a0)
		bcc.w	JmpTo62_DeleteObject
		jmpto	DisplaySprite,JmpTo41_DisplaySprite
; ===========================================================================

loc_335FE:				
		cmpi.w	#$250,ost_y_pos(a0)
		bcs.s	locret_33626
		tst.w	ost_x_vel(a0)
		bmi.w	loc_33628
		move.w	ost_x_pos(a0),d0
		cmpi.w	#$2980,d0
		bcc.s	locret_33626
		cmpi.w	#$297C,d0
		bcs.w	locret_33626
		move.w	#$2988,d1
		bra.s	loc_33640
; ===========================================================================

locret_33626:				
		rts	
; ===========================================================================

loc_33628:				
		move.w	ost_x_pos(a0),d0
		cmpi.w	#$2900,d0
		bcs.s	locret_3363E
		cmpi.w	#$2904,d0
		bcc.s	locret_3363E
		move.w	#$28F8,d1
		bra.s	loc_33640
; ===========================================================================

locret_3363E:				
		rts	
; ===========================================================================

loc_33640:				
		jsrto	FindFreeObj,JmpTo18_FindFreeObj
		bne.s	locret_336B0
		move.b	#id_BossOilOcean,ost_id(a1)
		move.b	#8,ost_boss_subtype(a1)
		move.b	#4,$25(a1)
		move.b	#-$75,$20(a1)
		move.b	#2,$1C(a1)
		move.b	#$D,$1A(a1)
		move.w	#0,ost_y_vel(a1)
		move.l	#Map_33756,ost_mappings(a1)
		move.w	#tile_Nem_OOZBoss,ost_tile(a1)
		jsrto	Adjust2PArtPointer,JmpTo63_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a1)
		move.b	#2,$18(a1)
		move.w	#5,$32(a1)
		move.b	#7,$36(a1)
		move.w	ost_x_vel(a0),ost_x_vel(a1)
		move.w	d1,ost_x_pos(a1)
		move.w	#$250,ost_y_pos(a1)
		move.b	#-$15,d0
		jsrto	PlaySound,JmpTo11_PlaySound

locret_336B0:				
		rts	
; ===========================================================================

loc_336B2:				
		subq.w	#1,$32(a0)
		bpl.s	loc_33700
		move.w	#$C7,$32(a0)
		subq.b	#1,$36(a0)
		bmi.s	loc_33700
		jsrto	FindNextFreeObj,JmpTo24_FindNextFreeObj
		bne.s	loc_33700
		moveq	#0,d0
		move.w	#$F,d1

loc_336D0:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_336D0
		move.w	#5,$32(a1)
		move.w	#$200,$1C(a1)
		move.w	#$10,d0
		tst.w	ost_x_vel(a1)
		bpl.s	loc_336F4
		neg.w	d0

loc_336F4:				
		add.w	d0,ost_x_pos(a1)
		move.b	#-$15,d0
		jsrto	PlaySound,JmpTo11_PlaySound

loc_33700:				
		lea	(off_33712).l,a1
		jsrto	AnimateSprite,JmpTo22_AnimateSprite
		jmpto	DespawnObject,JmpTo38_DespawnObject
; ===========================================================================

loc_3370E:				
		bra.w	JmpTo62_DeleteObject
; ===========================================================================
off_33712:	
		dc.w byte_3371E-off_33712			; 0 
		dc.w byte_33738-off_33712			; 1
		dc.w byte_3373B-off_33712			; 2
		dc.w byte_3374D-off_33712			; 3
		dc.w byte_33750-off_33712			; 4
		dc.w byte_33753-off_33712			; 5

byte_3371E:	
		dc.b   9,  8,  8,  8,  8,  9,  9,  9,  9,  8,  8,  8,  8,  9,  9,  9 ; 0		
		dc.b   9,  8,  8,  8,  8,  9,  9,  9,  9,$FF	; 16

byte_33738:	
		dc.b  $F,  1,$FF				; 0 

byte_3373B:	
		dc.b   1, $D,$11, $E,$12, $F,$13,$10,$14,$14,$10,$13, $F,$12, $E,$11 ; 0
		dc.b  $D,$FA					; 16

byte_3374D:	
		dc.b  $F, $A,$FF				; 0 

byte_33750:
		dc.b  $F, $B,$FF				; 0 

byte_33753:	
		dc.b  $F,  8,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_33756:				
		dc.w Map_33756-Map_33756			;	0
		dc.w word_33782-Map_33756			; 1
		dc.w word_337BC-Map_33756			; 2
		dc.w word_337CE-Map_33756			; 3
		dc.w word_337E8-Map_33756			; 4
		dc.w word_33814-Map_33756			; 5
		dc.w word_33826-Map_33756			; 6
		dc.w word_33838-Map_33756			; 7
		dc.w word_33842-Map_33756			; 8
		dc.w word_3384C-Map_33756			; 9
		dc.w word_33856-Map_33756			; 10
		dc.w word_33860-Map_33756			; 11
		dc.w word_3386A-Map_33756			; 12
		dc.w word_33874-Map_33756			; 13
		dc.w word_3387E-Map_33756			; 14
		dc.w word_33888-Map_33756			; 15
		dc.w word_33892-Map_33756			; 16
		dc.w word_33874-Map_33756			; 17
		dc.w word_3387E-Map_33756			; 18
		dc.w word_33888-Map_33756			; 19
		dc.w word_33892-Map_33756			; 20
		dc.w word_33802-Map_33756			; 21
word_33782:	dc.w 7			
		dc.w $E00D,$2001,$2000,	   0			; 0
		dc.w $E800,$2000,$2000,$FFF8			; 4
		dc.w $F00D,$2009,$2004,$FFE8			; 8
		dc.w $F00D,$2011,$2008,	   8			; 12
		dc.w	$F,$2019,$200C,$FFD0			; 16
		dc.w	$F,$2029,$2014,$FFF0			; 20
		dc.w	$F,$2039,$201C,	 $10			; 24
word_337BC:	dc.w 2			
		dc.w $F80D,$2049,$2024,$FFDE			; 0
		dc.w $F805,$2079,$203C,$FFF8			; 4
word_337CE:	dc.w 3			
		dc.w $E209,$2051,$2028,$FFE2			; 0
		dc.w $F209,$2057,$202B,$FFEA			; 4
		dc.w $F805,$2079,$203C,$FFF8			; 8
word_337E8:	dc.w 3			
		dc.w  $606,$2063,$2031,$FFE2			; 0
		dc.w $FE06,$205D,$202E,$FFF2			; 4
		dc.w $F805,$2079,$203C,$FFF8			; 8
word_33802:	dc.w 2			
		dc.w $DE07,$20AD,$2056,$FFF8			; 0
		dc.w $F805,$2079,$203C,$FFF8			; 4
word_33814:	dc.w 2			
		dc.w $F80D,$2069,$2034,$FFE0			; 0
		dc.w $F805,$2079,$203C,$FFF8			; 4
word_33826:	dc.w 2			
		dc.w $F80D,$2071,$2038,$FFE0			; 0
		dc.w $F805,$2079,$203C,$FFF8			; 4
word_33838:	dc.w 1			
		dc.w $F805,$2079,$203C,$FFF8			; 0
word_33842:	dc.w 1			
		dc.w $F009,  $7D,  $3E,$FFF4			; 0
word_3384C:	dc.w 1			
		dc.w $F009,  $83,  $41,$FFF4			; 0
word_33856:	dc.w 1			
		dc.w $F009,  $89,  $44,$FFF4			; 0
word_33860:	dc.w 1			
		dc.w $F009,  $8F,  $47,$FFF4			; 0
word_3386A:	dc.w 1			
		dc.w $FC0C,$20A9,$2054,$FFF0			; 0
word_33874:	dc.w 1			
		dc.w  $804,$2095,$204A,$FFF8			; 0
word_3387E:	dc.w 1			
		dc.w	 5,$2097,$204B,$FFF8			; 0
word_33888:	dc.w 1			
		dc.w $F806,$209B,$204D,$FFF8			; 0
word_33892:	dc.w 1			
		dc.w $F007,$20A1,$2050,$FFF8			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo41_DisplaySprite:				
		jmp	DisplaySprite
JmpTo62_DeleteObject:				
		jmp	DeleteObject
JmpTo18_FindFreeObj:				
		jmp	FindFreeObj
JmpTo38_DespawnObject:				
		jmp	DespawnObject
JmpTo11_PlaySound:				
		jmp	PlaySound
JmpTo24_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo22_AnimateSprite:				
		jmp	AnimateSprite
JmpTo5_RandomNumber:				
		jmp	RandomNumber
JmpTo63_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo13_CalcSine:				
		jmp	CalcSine
JmpTo8_RestoreLevelMusic:				
		jmp	RestoreLevelMusic
JmpTo8_LoadAnimalExplosionArt:				
		jmp	LoadAnimalExplosionArt
JmpTo25_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 09 - Sonic in Special Stage
; ----------------------------------------------------------------------------

SonicSpecial:				
		bsr.w	loc_33908	; could be bsr.s
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	SSS_Index(pc,d0.w),d1
		jmp	SSS_Index(pc,d1.w)
; ===========================================================================
SSS_Index:	index offset(*),,2
		ptr loc_3391C			; 0 
		ptr loc_339D6			; 2
		ptr loc_33BAE			; 4
		ptr SSS_Index			; 6 - invalid
		ptr loc_33BD8			; 8
; ===========================================================================

loc_33908:				
		lea	(v_ss_ctrl_record_buffer_end).w,a1
		moveq	#$E,d0

loc_3390E:				
		move.w	-4(a1),-(a1)
		dbf	d0,loc_3390E
		move.w	(v_joypad_hold).w,-(a1)
		rts	
; ===========================================================================

loc_3391C:				
		move.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.l	d0,ost_ss_x_pos(a0)
		move.w	#$80,d1	
		move.w	d1,ost_ss_y_pos(a0)
		move.w	d0,ost_ss_y_sub(a0)
		add.w	($FFFFF73E).w,d0
		move.w	d0,ost_x_pos(a0)
		add.w	($FFFFF740).w,d1
		move.w	d1,ost_y_pos(a0)
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.l	#Map_34212,ost_mappings(a0)
		move.w	#(vram_SpecialSonic/sizeof_cell)+tile_pal2,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.w	#$6E,ost_ss_z_pos(a0)
		clr.b	($FFFFF742).w
		move.w	#$400,ost_ss_init_flip_timer(a0)
		move.b	#$40,ost_angle(a0)
		move.b	#1,(v_sonic_last_frame_id).w
		clr.b	ost_ss_slide_timer(a0)
		bclr	#6,$22(a0)
		clr.b	ost_col_property(a0)
		clr.b	ost_ss_dplc_timer(a0)
		movea.l	#v_ss_shadow_sonic,a1
		move.b	#id_ShadowSpecial,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$18,ost_y_pos(a1)
		move.l	#off_34492,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHorizShadow+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.l	a0,ost_shadspec_parent(a1)
		bra.w	SSS_LoadGFX
; ===========================================================================

loc_339D6:				
		tst.b	$25(a0)
		bne.s	loc_33A0E
		lea	(v_joypad_hold).w,a2
		bsr.w	loc_33F8A
		bsr.w	loc_3400A
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		bsr.w	loc_33B40
		bsr.w	loc_33EA0
		lea	(off_341E4).l,a1
		bsr.w	loc_33F00
		bsr.w	loc_33DFC
		bra.w	SSS_LoadGFX
; ===========================================================================

loc_33A0E:				
		bsr.w	loc_33A22
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		bra.w	SSS_LoadGFX
; ===========================================================================

loc_33A22:				
		moveq	#0,d0
		move.b	ost_ss_hurt_timer(a0),d0
		addi_.b	#8,d0
		move.b	d0,ost_ss_hurt_timer(a0)
		bne.s	loc_33A3E
		move.b	#0,$25(a0)
		move.b	#$1E,ost_ss_dplc_timer(a0)

loc_33A3E:				
		add.b	$26(a0),d0
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		subi.b	#$10,d0
		lsr.b	#5,d0
		add.w	d0,d0
		move.b	byte_33A92(pc,d0.w),$1A(a0)
		move.b	byte_33A92+1(pc,d0.w),d0
		or.b	d0,ost_render(a0)
		move.b	ost_ss_hurt_timer(a0),d0
		subi_.b	#8,d0
		bne.s	locret_33A90
		move.b	d0,$21(a0)
		cmpa.l	#-$5000,a0
		bne.s	loc_33A7C
		tst.w	(v_rings).w
		beq.s	locret_33A90
		bra.s	loc_33A82
; ===========================================================================

loc_33A7C:				
		tst.w	(v_rings_p2).w
		beq.s	locret_33A90

loc_33A82:				
		jsrto	FindFreeObjSpecial,JmpTo_FindFreeObjSpecial
		bne.s	locret_33A90
		move.l	a0,ost_ringlossspec_parent(a1)
		move.b	#id_RingLossSpecial,ost_id(a1)

locret_33A90:				
		rts	
; ===========================================================================
byte_33A92:	
		dc.b   4,  1					; 0
		dc.b   0,  0					; 2
		dc.b   4,  0					; 4
		dc.b  $C,  0					; 6
		dc.b   4,  2					; 8
		dc.b   0,  2					; 10
		dc.b   4,  3					; 12
		dc.b  $C,  1					; 14
		
dword_33AA2:	
		dc.l   $FF0000					; 0 
		dc.l   $FF0B00					; 1
		dc.l   $FF2480					; 2
		dc.l   $FF2E20					; 3
; ===========================================================================

SSS_LoadGFX:				
		move.b	ost_ss_dplc_timer(a0),d0
		beq.s	loc_33AC6
		subq.b	#1,d0
		move.b	d0,ost_ss_dplc_timer(a0)
		andi.b	#1,d0
		beq.s	loc_33AC6
		rts	
; ===========================================================================

loc_33AC6:				
		jsrto	DisplaySprite,JmpTo42_DisplaySprite
		lea	dword_33AA2(pc),a3
		lea	(v_sonic_last_frame_id).w,a4
		move.w	#$5CA0,d4
		moveq	#0,d1

SpecialPlayer_LoadGFX:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(a4),d0
		beq.s	locret_33B3E
		move.b	d0,(a4)
		moveq	#0,d6
		cmpi.b	#4,d0
		blt.s	loc_33AFE
		addq.w	#4,d6
		cmpi.b	#$C,d0
		blt.s	loc_33AFE
		addq.w	#4,d6
		cmpi.b	#$10,d0
		blt.s	loc_33AFE
		addq.b	#4,d6

loc_33AFE:				
		move.l	(a3,d6.w),d6
		add.w	d1,d0
		add.w	d0,d0
		lea	(SS_Sonic_Tails_DPLC).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_33B3E

loc_33B16:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.w	#1,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(AddDMA).l
		dbf	d5,loc_33B16

locret_33B3E:				
		rts	
; ===========================================================================

loc_33B40:				
		lea	(v_joypad_press).w,a2

loc_33B44:				
		move.b	(a2),d0
		andi.b	#$70,d0
		beq.w	locret_33BAC
		move.w	#$780,d2
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#-$80,d0
		jsr	CalcSine
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,ost_x_vel(a0)
		muls.w	d2,d0
		asr.l	#7,d0
		add.w	d0,ost_y_vel(a0)
		bset	#2,$22(a0)
		move.b	#4,ost_primary_routine(a0)
		move.b	#3,$1C(a0)
		moveq	#0,d0
		move.b	d0,$1E(a0)
		move.b	d0,$1B(a0)
		move.b	d0,$21(a0)
		tst.b	(f_ss_2p).w
		bne.s	loc_33B9E
		tst.w	(v_player_mode).w
		bne.s	loc_33BA2

loc_33B9E:				
		not.b	($FFFFF742).w

loc_33BA2:				
		move.w	#$A0,d0	
		jsr	PlaySound

locret_33BAC:				
		rts	
; ===========================================================================

loc_33BAE:				
		lea	(v_joypad_hold).w,a2
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33C54
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		lea	(off_341E4).l,a1
		bsr.w	loc_33F00
		bra.w	SSS_LoadGFX
; ===========================================================================

loc_33BD8:				
		lea	(v_joypad_hold).w,a2
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33C54
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		bsr.w	loc_33EA0
		lea	(off_341E4).l,a1
		bsr.w	loc_33F00
		bra.w	SSS_LoadGFX
; ===========================================================================

loc_33C06:				
		move.l	ost_ss_x_pos(a0),d2
		move.l	ost_ss_y_pos(a0),d3
		move.w	ost_x_vel(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	ost_y_vel(a0),d0
		addi.w	#$A8,ost_y_vel(a0)
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,ost_ss_x_pos(a0)
		move.l	d3,ost_ss_y_pos(a0)
		rts	
; ===========================================================================

loc_33C32:				
		move.b	(a2),d0
		btst	#2,d0
		bne.s	loc_33C44
		btst	#3,d0
		bne.w	loc_33C4C
		rts	
; ===========================================================================

loc_33C44:				
		subi.w	#$40,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_33C4C:				
		addi.w	#$40,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_33C54:				
		moveq	#0,d2
		moveq	#0,d3
		move.w	ost_ss_y_pos(a0),d2
		bmi.s	loc_33CB4
		move.w	ost_ss_x_pos(a0),d3
		bmi.s	loc_33C90
		cmp.w	d2,d3
		bcs.s	loc_33C80
		bne.s	loc_33C76
		tst.w	d3
		bne.s	loc_33C76
		move.b	#$40,$26(a0)
		rts	
; ===========================================================================

loc_33C76:				
		lsl.l	#5,d2
		divu.w	d3,d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33C80:				
		lsl.l	#5,d3
		divu.w	d2,d3
		subi.w	#$40,d3
		neg.w	d3
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33C90:				
		neg.w	d3
		cmp.w	d2,d3
		bcc.s	loc_33CA4
		lsl.l	#5,d3
		divu.w	d2,d3
		addi.w	#$40,d3
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33CA4:				
		lsl.l	#5,d2
		divu.w	d3,d2
		subi.w	#$80,d2	
		neg.w	d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33CB4:				
		neg.w	d2
		move.w	ost_ss_x_pos(a0),d3
		bpl.s	loc_33CE0
		neg.w	d3
		cmp.w	d2,d3
		bcs.s	loc_33CD0
		lsl.l	#5,d2
		divu.w	d3,d2
		addi.w	#$80,d2	
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33CD0:				
		lsl.l	#5,d3
		divu.w	d2,d3
		subi.w	#$C0,d3	
		neg.w	d3
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33CE0:				
		cmp.w	d2,d3
		bcc.s	loc_33CF2
		lsl.l	#5,d3
		divu.w	d2,d3
		addi.w	#$C0,d3	
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33CF2:				
		lsl.l	#5,d2
		divu.w	d3,d2
		subi.w	#$100,d2
		neg.w	d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33D02:				
		moveq	#0,d6
		moveq	#0,d0
		move.w	ost_ss_x_pos(a1),d0
		bpl.s	loc_33D10
		st.b	d6
		neg.w	d0

loc_33D10:				
		lsl.l	#7,d0
		divu.w	ost_ss_z_pos(a1),d0
		move.b	byte_33D32(pc,d0.w),d0
		tst.b	d6
		bne.s	loc_33D24
		subi.b	#-$80,d0
		neg.b	d0

loc_33D24:				
		tst.w	ost_ss_y_pos(a1)
		bpl.s	loc_33D2C
		neg.b	d0

loc_33D2C:				
		move.b	d0,$26(a0)
		rts	
; ===========================================================================
byte_33D32:	
		dc.b $40,$40,$40,$40,$41,$41,$41,$42,$42,$42,$43,$43,$43,$44,$44,$44 ; 0
		dc.b $45,$45,$45,$46,$46,$46,$47,$47,$47,$48,$48,$48,$48,$49,$49,$49 ; 16
		dc.b $4A,$4A,$4A,$4B,$4B,$4B,$4C,$4C,$4C,$4D,$4D,$4D,$4E,$4E,$4E,$4F ; 32
		dc.b $4F,$50,$50,$50,$51,$51,$51,$52,$52,$52,$53,$53,$53,$54,$54,$54 ; 48
		dc.b $55,$55,$56,$56,$56,$57,$57,$57,$58,$58,$59,$59,$59,$5A,$5A,$5B ; 64
		dc.b $5B,$5B,$5C,$5C,$5D,$5D,$5E,$5E,$5E,$5F,$5F,$60,$60,$61,$61,$62 ; 80
		dc.b $62,$63,$63,$64,$64,$65,$65,$66,$66,$67,$67,$68,$68,$69,$6A,$6A ; 96
		dc.b $6B,$6C,$6C,$6D,$6E,$6E,$6F,$70,$71,$72,$73,$74,$75,$77,$78,$7A ; 112
		dc.b $80					; 128
		even
; ===========================================================================

loc_33DB4:				
		move.w	ost_ss_y_pos(a0),d0
		ble.s	locret_33DFA
		muls.w	d0,d0
		move.w	ost_ss_x_pos(a0),d1
		muls.w	d1,d1
		add.w	d1,d0
		move.w	ost_ss_z_pos(a0),d1
		mulu.w	d1,d1
		cmp.l	d1,d0
		bcs.s	locret_33DFA
		move.b	#2,ost_primary_routine(a0)
		bclr	#2,$22(a0)
		moveq	#0,d0
		move.w	d0,ost_x_vel(a0)
		move.w	d0,ost_y_vel(a0)
		move.w	d0,ost_inertia(a0)
		move.b	d0,ost_ss_slide_timer(a0)
		bset	#6,$22(a0)
		bsr.w	loc_3404A
		bsr.w	loc_34084

locret_33DFA:				
		rts	
; ===========================================================================

loc_33DFC:				
		tst.b	$21(a0)
		beq.s	locret_33E42
		clr.b	$21(a0)
		tst.b	ost_ss_dplc_timer(a0)
		bne.s	locret_33E42
		clr.b	ost_inertia(a0)
		cmpa.l	#v_ost_player1,a0
		bne.s	loc_33E24
		st.b	($FFFFF742).w
		tst.w	(v_rings).w
		beq.s	loc_33E38
		bra.s	loc_33E2E
; ===========================================================================

loc_33E24:				
		clr.b	($FFFFF742).w
		tst.w	(v_rings_p2).w
		beq.s	loc_33E38

loc_33E2E:				
		move.w	#$C6,d0	
		jsr	PlaySound

loc_33E38:				
		move.b	#2,$25(a0)
		clr.b	ost_ss_hurt_timer(a0)

locret_33E42:				
		rts	
; ===========================================================================

loc_33E44:				
		tst.w	(v_player_mode).w
		bne.s	locret_33E8E
		move.w	ost_ss_z_pos(a0),d0
		cmpa.l	#v_ost_player1,a0
		bne.s	loc_33E5E
		tst.b	($FFFFF742).w
		beq.s	loc_33E6E
		bra.s	loc_33E64
; ===========================================================================

loc_33E5E:				
		tst.b	($FFFFF742).w
		bne.s	loc_33E6E

loc_33E64:				
		cmpi.w	#$80,d0	
		beq.s	locret_33E8E
		addq.w	#1,d0
		bra.s	loc_33E76
; ===========================================================================

loc_33E6E:				
		cmpi.w	#$6E,d0
		beq.s	locret_33E8E
		subq.w	#1,d0

loc_33E76:				
		move.w	d0,ost_ss_z_pos(a0)
		cmpi.w	#$77,d0
		bcc.s	loc_33E88
		move.b	#3,$18(a0)
		rts	
; ===========================================================================

loc_33E88:				
		move.b	#2,$18(a0)

locret_33E8E:				
		rts	
; ===========================================================================
byte_33E90:	
		dc.b   1,  1					; 0
		dc.b   0,  0					; 2
		dc.b   1,  0					; 4
		dc.b   2,  0					; 6
		dc.b   1,  2					; 8
		dc.b   0,  2					; 10
		dc.b   1,  3					; 12
		dc.b   2,  1					; 14
; ===========================================================================

loc_33EA0:				
		btst	#2,$22(a0)
		beq.s	loc_33EB6
		move.b	#3,$1C(a0)
		andi.b	#-4,$22(a0)
		rts	
; ===========================================================================

loc_33EB6:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$10,d0
		lsr.b	#5,d0
		move.b	d0,d1
		add.w	d0,d0
		move.b	byte_33E90(pc,d0.w),d2
		cmp.b	$1C(a0),d2
		bne.s	loc_33ED6
		cmp.b	$3F(a0),d1
		beq.s	locret_33EFE

loc_33ED6:				
		move.b	d1,$3F(a0)
		move.b	d2,$1C(a0)
		move.b	byte_33E90+1(pc,d0.w),d0
		andi.b	#-4,$22(a0)
		or.b	d0,$22(a0)
		cmpi.b	#1,d1
		beq.s	loc_33EF8
		cmpi.b	#5,d1
		bne.s	locret_33EFE

loc_33EF8:				
		move.w	#$400,ost_ss_init_flip_timer(a0)

locret_33EFE:				
		rts	
; ===========================================================================

loc_33F00:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_33F1C
		move.b	#0,$1B(a0)
		move.b	d0,$1D(a0)
		move.b	#0,$1E(a0)

loc_33F1C:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_33F88
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(v_ss_player_anim_frame_timer).w,d0
		lsr.b	#1,d0
		move.b	d0,$1E(a0)
		cmpi.b	#0,$1C(a0)				; could be optimized to tst.b
		bne.s	loc_33F54
		subi_.b	#1,ost_ss_flip_timer(a0)
		bgt.s	loc_33F54
		bchg	#0,$22(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		move.b	ost_ss_init_flip_timer(a0),ost_ss_flip_timer(a0)

loc_33F54:				
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bpl.s	loc_33F6A
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_33F6A:				
		andi.b	#$7F,d0
		move.b	d0,$1A(a0)
		move.b	$22(a0),d1
		andi.b	#3,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		addq.b	#1,$1B(a0)

locret_33F88:				
		rts	
; ===========================================================================

loc_33F8A:				
		move.w	ost_inertia(a0),d2
		move.b	(a2),d0
		btst	#2,d0
		bne.s	loc_33FDC
		btst	#3,d0
		bne.w	loc_33FEC
		bset	#6,$22(a0)
		bne.s	loc_33FAC
		move.b	#$1E,ost_ss_slide_timer(a0)

loc_33FAC:				
		move.b	$26(a0),d0
		bmi.s	loc_33FC4
		subi.b	#$38,d0
		cmpi.b	#$10,d0
		bcc.s	loc_33FC4
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d2
		bra.s	loc_33FCA
; ===========================================================================

loc_33FC4:				
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d2

loc_33FCA:				
		move.w	d2,ost_inertia(a0)
		move.b	ost_ss_slide_timer(a0),d0
		beq.s	locret_33FDA
		subq.b	#1,d0
		move.b	d0,ost_ss_slide_timer(a0)

locret_33FDA:				
		rts	
; ===========================================================================

loc_33FDC:				
		addi.w	#$60,d2
		cmpi.w	#$600,d2
		ble.s	loc_33FFA
		move.w	#$600,d2
		bra.s	loc_33FFA
; ===========================================================================

loc_33FEC:				
		subi.w	#$60,d2
		cmpi.w	#-$600,d2
		bge.s	loc_33FFA
		move.w	#-$600,d2

loc_33FFA:				
		move.w	d2,ost_inertia(a0)
		bclr	#6,$22(a0)
		clr.b	ost_ss_slide_timer(a0)
		rts	
; ===========================================================================

loc_3400A:				
		tst.b	ost_ss_slide_timer(a0)
		bne.s	loc_34024
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	#$50,d1
		asr.l	#8,d1
		add.w	d1,ost_inertia(a0)

loc_34024:				
		move.b	$26(a0),d0
		bpl.s	locret_34048
		addi_.b	#4,d0
		cmpi.b	#-$78,d0
		bcs.s	locret_34048
		move.w	ost_inertia(a0),d0
		bpl.s	loc_3403C
		neg.w	d0

loc_3403C:				
		cmpi.w	#$100,d0
		bcc.s	locret_34048
		move.b	#8,ost_primary_routine(a0)

locret_34048:				
		rts	
; ===========================================================================

loc_3404A:				
		moveq	#0,d0
		moveq	#0,d1
		move.w	ost_inertia(a0),d2
		bpl.s	loc_3405E
		neg.w	d2
		lsr.w	#8,d2
		sub.b	d2,$26(a0)
		bra.s	loc_34064
; ===========================================================================

loc_3405E:				
		lsr.w	#8,d2
		add.b	d2,$26(a0)

loc_34064:				
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	ost_ss_z_pos(a0),d1
		asr.l	#8,d1
		move.w	d1,ost_ss_x_pos(a0)
		muls.w	ost_ss_z_pos(a0),d0
		asr.l	#8,d0
		move.w	d0,ost_ss_y_pos(a0)
		rts	
; ===========================================================================

loc_34084:				
		move.w	ost_ss_x_pos(a0),d0
		muls.w	#$CC,d0	
		asr.l	#8,d0
		add.w	($FFFFF73E).w,d0
		move.w	d0,ost_x_pos(a0)
		move.w	ost_ss_y_pos(a0),d0
		add.w	($FFFFF740).w,d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 63 - Character shadow in Special Stage
; ----------------------------------------------------------------------------

ShadowSpecial:	

		rsobj ShadowSpecial,$38
ost_shadspec_parent:	rs.l 1 ; $38; parent player of this shadow
		rsobjend
			
		movea.l	ost_shadspec_parent(a0),a1
		cmpa.l	#-$5000,a1
		bne.s	loc_340BC
		movea.l	#-$5000,a1
		bsr.s	loc_340CC
		jmpto	DisplaySprite,JmpTo42_DisplaySprite
		
; ===========================================================================

loc_340BC:				
		movea.l	#-$4FC0,a1
		bsr.s	loc_340CC
		bsr.w	loc_341BA
		jmpto	DisplaySprite,JmpTo42_DisplaySprite
; ===========================================================================

loc_340CC:				
		cmpi.b	#2,$24(a1)
		beq.w	loc_34108
		bsr.w	loc_33D02
		move.b	$26(a0),d0
		jsr	CalcSine
		muls.w	ost_ss_z_pos(a1),d1
		muls.w	#$CC,d1	
		swap	d1
		add.w	($FFFFF73E).w,d1
		move.w	d1,ost_x_pos(a0)
		muls.w	ost_ss_z_pos(a1),d0
		asr.l	#8,d0
		add.w	($FFFFF740).w,d0
		move.w	d0,ost_y_pos(a0)
		bra.w	loc_3411A
; ===========================================================================

loc_34108:				
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	$26(a1),$26(a0)

loc_3411A:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$10,d0
		lsr.b	#5,d0
		move.b	d0,d1
		lsl.w	#3,d0
		lea	word_3417A(pc),a2
		adda.w	d0,a2
		move.w	(a2)+,ost_tile(a0)
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a0)
		move.w	(a2)+,d0
		add.w	d0,ost_y_pos(a0)
		move.b	(a2)+,$1A(a0)
		move.b	ost_render(a0),d0
		andi.b	#-4,d0
		or.b	(a2)+,d0
		move.b	d0,ost_render(a0)
		tst.b	$26(a0)
		bpl.s	locret_34178
		cmpi.b	#3,d1
		beq.s	loc_34164
		cmpi.b	#7,d1
		bne.s	loc_3416A

loc_34164:				
		addi_.b	#3,$1A(a0)

loc_3416A:				
		move.w	($FFFFF740).w,d1
		sub.w	ost_y_pos(a0),d1
		add.w	d1,d1
		add.w	d1,ost_y_pos(a0)

locret_34178:				
		rts	
; ===========================================================================
word_3417A:	
		dc.w $6262,  $14,  $14,	$101			; 0	
		dc.w $623C,    0,  $18,	   0			; 4
		dc.w $6262,$FFEC,  $14,	$100			; 8
		dc.w $629C,$FFEC,    0,	$200			; 12
		dc.w $6262,$FFEC,$FFEC,	$700			; 16
		dc.w $623C,    0,$FFE8,	$900			; 20
		dc.w $6262,  $14,$FFEC,	$701			; 24
		dc.w $629C,  $14,    0,	$201			; 28
; ===========================================================================

loc_341BA:				
		cmpi.b	#1,$1C(a1)
		bne.s	locret_341E0
		move.b	$22(a1),d1
		andi.w	#3,d1
		cmpi.b	#2,d1
		bcc.s	locret_341E0
		move.b	byte_341E2(pc,d1.w),d0
		ext.w	d0
		add.w	d0,ost_x_pos(a0)
		subi_.w	#4,ost_y_pos(a0)

locret_341E0:				
		rts	
; ===========================================================================
byte_341E2:	
		dc.b   4					; 0
		dc.b $FC					; 1
off_341E4:	
		dc.w byte_341EE-off_341E4			; 0 
		dc.w byte_341F4-off_341E4			; 1
		dc.w byte_341FE-off_341E4			; 2
		dc.w byte_34204-off_341E4			; 3
		dc.w byte_34208-off_341E4			; 4
byte_341EE:	dc.b   3,  0,  1,  2,  3,$FF			; 0	
byte_341F4:	dc.b   3,  4,  5,  6,  7,  8,  9, $A, $B,$FF	; 0	
byte_341FE:	dc.b   3, $C, $D, $E, $F,$FF			; 0	
byte_34204:	dc.b   1,$10,$11,$FF				; 0 
byte_34208:	dc.b   3,  0,  4, $C,  4,  0,  4, $C,  4,$FF	; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_34212:				
		dc.w word_34236-Map_34212			; 0
		dc.w word_34250-Map_34212			; 1
		dc.w word_3426A-Map_34212			; 2
		dc.w word_34284-Map_34212			; 3
		dc.w word_3429E-Map_34212			; 4
		dc.w word_342C0-Map_34212			; 5
		dc.w word_342EA-Map_34212			; 6
		dc.w word_34314-Map_34212			; 7
		dc.w word_3433E-Map_34212			; 8
		dc.w word_34360-Map_34212			; 9
		dc.w word_3438A-Map_34212			; 10
		dc.w word_343B4-Map_34212			; 11
		dc.w word_343E6-Map_34212			; 12
		dc.w word_34400-Map_34212			; 13
		dc.w word_3441A-Map_34212			; 14
		dc.w word_34434-Map_34212			; 15
		dc.w word_3444E-Map_34212			; 16
		dc.w word_34470-Map_34212			; 17
word_34236:	dc.w 3			
		dc.w $E40F,$8000,$8000,$FFF0			; 0
		dc.w  $40A,$8010,$8008,$FFF0			; 4
		dc.w  $401,$8019,$800C,	   8			; 8
word_34250:	dc.w 3			
		dc.w $E40A,$8000,$8000,$FFF2			; 0
		dc.w $FC0D,$8009,$8004,$FFF0			; 4
		dc.w  $C05,$8011,$8008,$FFF7			; 8
word_3426A:	dc.w 3			
		dc.w $E40E,$8000,$8000,$FFF0			; 0
		dc.w $FC0D,$800C,$8006,$FFF0			; 4
		dc.w  $C09,$8014,$800A,$FFF0			; 8
word_34284:	dc.w 3			
		dc.w $E40A,$8800,$8800,$FFF6			; 0
		dc.w $FC0D,$8009,$8004,$FFF0			; 4
		dc.w  $C09,$8011,$8008,$FFF8			; 8
word_3429E:	dc.w 4			
		dc.w $E40A,$8000,$8000,$FFEC			; 0
		dc.w $E403,$8009,$8004,	   4			; 4
		dc.w $EC01,$800D,$8006,	  $C			; 8
		dc.w $FC0E,$800F,$8007,$FFE4			; 12
word_342C0:	dc.w 5			
		dc.w $E409,$8000,$8000,$FFF4			; 0
		dc.w $EC01,$8006,$8003,	  $C			; 4
		dc.w $F40D,$8008,$8004,$FFEC			; 8
		dc.w  $40D,$8010,$8008,$FFE6			; 12
		dc.w $1400,$8018,$800C,$FFEE			; 16
word_342EA:	dc.w 5			
		dc.w $E404,$8000,$8000,$FFFB			; 0
		dc.w $EC0E,$8002,$8001,$FFEC			; 4
		dc.w $EC02,$800E,$8007,	  $C			; 8
		dc.w  $406,$8011,$8008,$FFE7			; 12
		dc.w  $405,$8017,$800B,$FFF7			; 16
word_34314:	dc.w 5			
		dc.w $E404,$8000,$8000,$FFFC			; 0
		dc.w $EC0F,$8002,$8001,$FFEC			; 4
		dc.w $EC02,$8012,$8009,	  $C			; 8
		dc.w  $400,$8015,$800A,$FFE4			; 12
		dc.w  $C05,$8016,$800B,$FFEA			; 16
word_3433E:	dc.w 4			
		dc.w $E405,$8000,$8000,$FFFC			; 0
		dc.w $EC03,$8004,$8002,	  $C			; 4
		dc.w $F40E,$8008,$8004,$FFEC			; 8
		dc.w  $C05,$8014,$800A,$FFEC			; 12
word_34360:	dc.w 5			
		dc.w $E405,$8000,$8000,$FFFC			; 0
		dc.w $EC02,$8004,$8002,	  $C			; 4
		dc.w $F40D,$8007,$8003,$FFEC			; 8
		dc.w  $40D,$800F,$8007,$FFE8			; 12
		dc.w $EC00,$8017,$800B,$FFF4			; 16
word_3438A:	dc.w 5			
		dc.w $E409,$8000,$8000,$FFFB			; 0
		dc.w $F401,$8006,$8003,	  $E			; 4
		dc.w $F40D,$8008,$8004,$FFEE			; 8
		dc.w  $40D,$8010,$8008,$FFE7			; 12
		dc.w $1400,$8018,$800C,$FFEF			; 16
word_343B4:	dc.w 6			
		dc.w $E400,$8000,$8000,	   2			; 0
		dc.w $EC0D,$8001,$8000,$FFF4			; 4
		dc.w $FC00,$8009,$8004,	  $C			; 8
		dc.w  $401,$800A,$8005,$FFE4			; 12
		dc.w $FC07,$800C,$8006,$FFEC			; 16
		dc.w $FC06,$8014,$800A,$FFFC			; 20
word_343E6:	dc.w 3			
		dc.w $F006,$8000,$8000,$FFE8			; 0
		dc.w  $800,$8006,$8003,$FFF0			; 4
		dc.w $F00F,$8007,$8003,$FFF8			; 8
word_34400:	dc.w 3			
		dc.w $F006,$8000,$8000,$FFE8			; 0
		dc.w $F103,$8006,$8003,$FFF8			; 4
		dc.w $F00B,$800A,$8005,	   0			; 8
word_3441A:	dc.w 3			
		dc.w $F102,$8000,$8000,$FFE8			; 0
		dc.w $F002,$8003,$8001,$FFF0			; 4
		dc.w $F00F,$8006,$8003,$FFF8			; 8
word_34434:	dc.w 3			
		dc.w $F806,$8000,$8000,$FFE8			; 0
		dc.w $EF03,$8006,$8003,$FFF8			; 4
		dc.w $F00B,$800A,$8005,	   0			; 8
word_3444E:	dc.w 4			
		dc.w $EC07,$8000,$8000,$FFF0			; 0
		dc.w  $C04,$8008,$8004,$FFF0			; 4
		dc.w $EC07,$8800,$8800,	   0			; 8
		dc.w  $C04,$8808,$8804,	   0			; 12
word_34470:	dc.w 4			
		dc.w $EC07,$8000,$8000,$FFF0			; 0
		dc.w  $C04,$8008,$8004,$FFF0			; 4
		dc.w $EC07,$8800,$8800,	   0			; 8
		dc.w  $C04,$8808,$8804,	   0			; 12
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_34492:	dc.w word_34528-off_34492			; 0 
		dc.w word_3458C-off_34492			; 1
		dc.w word_345F0-off_34492			; 2
		dc.w word_3451E-off_34492			; 3
		dc.w word_34582-off_34492			; 4
		dc.w word_345E6-off_34492			; 5
		dc.w word_34514-off_34492			; 6
		dc.w word_34578-off_34492			; 7
		dc.w word_345DC-off_34492			; 8
		dc.w word_3450A-off_34492			; 9
		dc.w word_3456E-off_34492			; 10
		dc.w word_345D2-off_34492			; 11
		dc.w word_34500-off_34492			; 12
		dc.w word_34564-off_34492			; 13
		dc.w word_345C8-off_34492			; 14
		dc.w word_344F6-off_34492			; 15
		dc.w word_3455A-off_34492			; 16
		dc.w word_345BE-off_34492			; 17
		dc.w word_344EC-off_34492			; 18
		dc.w word_34550-off_34492			; 19
		dc.w word_345B4-off_34492			; 20
		dc.w word_344E2-off_34492			; 21
		dc.w word_34546-off_34492			; 22
		dc.w word_345AA-off_34492			; 23
		dc.w word_344D8-off_34492			; 24
		dc.w word_3453C-off_34492			; 25
		dc.w word_345A0-off_34492			; 26
		dc.w word_344CE-off_34492			; 27
		dc.w word_34532-off_34492			; 28
		dc.w word_34596-off_34492			; 29
word_344CE:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC			; 0
word_344D8:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC			; 0
word_344E2:	dc.w 1			
		dc.w $FC04,$8002,$8001,$FFF8			; 0
word_344EC:	dc.w 1			
		dc.w $FC04,$8004,$8002,$FFF8			; 0
word_344F6:	dc.w 1			
		dc.w $FC04,$8006,$8003,$FFF8			; 0
word_34500:	dc.w 1			
		dc.w $FC08,$8008,$8004,$FFF4			; 0
word_3450A:	dc.w 1			
		dc.w $FC08,$800B,$8005,$FFF4			; 0
word_34514:	dc.w 1			
		dc.w $F80D,$800E,$8007,$FFF0			; 0
word_3451E:	dc.w 1			
		dc.w $F80D,$8016,$800B,$FFF0			; 0
word_34528:	dc.w 1			
		dc.w $F80D,$801E,$800F,$FFF0			; 0
word_34532:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC			; 0
word_3453C:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC			; 0
word_34546:	dc.w 1			
		dc.w $FC00,$8002,$8001,$FFFC			; 0
word_34550:	dc.w 1			
		dc.w $F805,$8003,$8001,$FFF8			; 0
word_3455A:	dc.w 1			
		dc.w $F805,$8007,$8003,$FFF8			; 0
word_34564:	dc.w 1			
		dc.w $F405,$800B,$8005,$FFFC			; 0
word_3456E:	dc.w 1			
		dc.w $F40A,$800F,$8007,$FFF4			; 0
word_34578:	dc.w 1			
		dc.w $F40A,$8018,$800C,$FFF4			; 0
word_34582:	dc.w 1			
		dc.w $F00A,$8021,$8010,$FFF8			; 0
word_3458C:	dc.w 1			
		dc.w $F00F,$802A,$8015,$FFF0			; 0
word_34596:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC			; 0
word_345A0:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC			; 0
word_345AA:	dc.w 1			
		dc.w $F801,$8002,$8001,$FFFC			; 0
word_345B4:	dc.w 1			
		dc.w $F801,$8004,$8002,$FFFC			; 0
word_345BE:	dc.w 1			
		dc.w $F801,$8006,$8003,$FFFC			; 0
word_345C8:	dc.w 1			
		dc.w $F402,$8008,$8004,$FFFC			; 0
word_345D2:	dc.w 1			
		dc.w $F402,$800B,$8005,$FFFC			; 0
word_345DC:	dc.w 1			
		dc.w $F402,$800E,$8007,$FFFC			; 0
word_345E6:	dc.w 1			
		dc.w $F003,$8011,$8008,$FFFC			; 0
word_345F0:	dc.w 1			
		dc.w $F003,$8015,$800A,$FFFC			; 0
		
		
; custom dynamic pattern loading cues for special stage Sonic, Tails and
; Tails' tails
; The first $12 frames are for Sonic, and the next $12 frames are for Tails.
; The last $15 frames are for Tails' tails.
; The first $24 frames are almost normal dplcs -- the only difference being
; that the art tile to load is pre-shifted left by 4 bits.
; The same applies to the last $15 frames, but they have yet another difference:
; a small space optimization. These frames only have one dplc per frame ever,
; hence the two-byte dplc count is removed from each frame.		
SS_Sonic_Tails_DPLC:	

		dc.w word_3466C-SS_Sonic_Tails_DPLC		; 0 
		dc.w word_34674-SS_Sonic_Tails_DPLC		; 1
		dc.w word_3467C-SS_Sonic_Tails_DPLC		; 2
		dc.w word_34684-SS_Sonic_Tails_DPLC		; 3
		dc.w word_3468C-SS_Sonic_Tails_DPLC		; 4
		dc.w word_34696-SS_Sonic_Tails_DPLC		; 5
		dc.w word_346A2-SS_Sonic_Tails_DPLC		; 6
		dc.w word_346AE-SS_Sonic_Tails_DPLC		; 7
		dc.w word_346BA-SS_Sonic_Tails_DPLC		; 8
		dc.w word_346C4-SS_Sonic_Tails_DPLC		; 9
		dc.w word_346D0-SS_Sonic_Tails_DPLC		; 10
		dc.w word_346DC-SS_Sonic_Tails_DPLC		; 11
		dc.w word_346EA-SS_Sonic_Tails_DPLC		; 12
		dc.w word_346F2-SS_Sonic_Tails_DPLC		; 13
		dc.w word_346FA-SS_Sonic_Tails_DPLC		; 14
		dc.w word_34702-SS_Sonic_Tails_DPLC		; 15
		dc.w word_3470A-SS_Sonic_Tails_DPLC		; 16
		dc.w word_34710-SS_Sonic_Tails_DPLC		; 17
		dc.w word_34716-SS_Sonic_Tails_DPLC		; 18
		dc.w word_3471E-SS_Sonic_Tails_DPLC		; 19
		dc.w word_34728-SS_Sonic_Tails_DPLC		; 20
		dc.w word_34732-SS_Sonic_Tails_DPLC		; 21
		dc.w word_3473E-SS_Sonic_Tails_DPLC		; 22
		dc.w word_34746-SS_Sonic_Tails_DPLC		; 23
		dc.w word_34750-SS_Sonic_Tails_DPLC		; 24
		dc.w word_3475C-SS_Sonic_Tails_DPLC		; 25
		dc.w word_34766-SS_Sonic_Tails_DPLC		; 26
		dc.w word_34770-SS_Sonic_Tails_DPLC		; 27
		dc.w word_3477C-SS_Sonic_Tails_DPLC		; 28
		dc.w word_34788-SS_Sonic_Tails_DPLC		; 29
		dc.w word_34792-SS_Sonic_Tails_DPLC		; 30
		dc.w word_34798-SS_Sonic_Tails_DPLC		; 31
		dc.w word_347A0-SS_Sonic_Tails_DPLC		; 32
		dc.w word_347A6-SS_Sonic_Tails_DPLC		; 33
		dc.w word_347AE-SS_Sonic_Tails_DPLC		; 34
		dc.w word_347B2-SS_Sonic_Tails_DPLC		; 35
		dc.w word_347B6-SS_Sonic_Tails_DPLC		; 36
		dc.w word_347B8-SS_Sonic_Tails_DPLC		; 37
		dc.w word_347BA-SS_Sonic_Tails_DPLC		; 38
		dc.w word_347BC-SS_Sonic_Tails_DPLC		; 39
		dc.w word_347BE-SS_Sonic_Tails_DPLC		; 40
		dc.w word_347C0-SS_Sonic_Tails_DPLC		; 41
		dc.w word_347C2-SS_Sonic_Tails_DPLC		; 42
		dc.w word_347C4-SS_Sonic_Tails_DPLC		; 43
		dc.w word_347C6-SS_Sonic_Tails_DPLC		; 44
		dc.w word_347C8-SS_Sonic_Tails_DPLC		; 45
		dc.w word_347CA-SS_Sonic_Tails_DPLC		; 46
		dc.w word_347CC-SS_Sonic_Tails_DPLC		; 47
		dc.w word_347CE-SS_Sonic_Tails_DPLC		; 48
		dc.w word_347D0-SS_Sonic_Tails_DPLC		; 49
		dc.w word_347D2-SS_Sonic_Tails_DPLC		; 50
		dc.w word_347D4-SS_Sonic_Tails_DPLC		; 51
		dc.w word_347D6-SS_Sonic_Tails_DPLC		; 52
		dc.w word_347D8-SS_Sonic_Tails_DPLC		; 53
		dc.w word_347DA-SS_Sonic_Tails_DPLC		; 54
		dc.w word_347DC-SS_Sonic_Tails_DPLC		; 55
		dc.w word_347DE-SS_Sonic_Tails_DPLC		; 56
word_3466C:	dc.w 3			
		dc.w $F000					; 0
		dc.w $8100					; 1
		dc.w $1190					; 2
word_34674:	dc.w 3			
		dc.w $81B0					; 0
		dc.w $7240					; 1
		dc.w $32C0					; 2
word_3467C:	dc.w 3			
		dc.w $B300					; 0
		dc.w $73C0					; 1
		dc.w $5440					; 2
word_34684:	dc.w 3			
		dc.w $81B0					; 0
		dc.w $74A0					; 1
		dc.w $5520					; 2
word_3468C:	dc.w 4			
		dc.w $8000					; 0
		dc.w $3090					; 1
		dc.w $10D0					; 2
		dc.w $B0F0					; 3
word_34696:	dc.w 5			
		dc.w $51B0					; 0
		dc.w $1210					; 1
		dc.w $7230					; 2
		dc.w $72B0					; 3
		dc.w  $330					; 4
word_346A2:	dc.w 5			
		dc.w $1340					; 0
		dc.w $B360					; 1
		dc.w $2420					; 2
		dc.w $5450					; 3
		dc.w $34B0					; 4
word_346AE:	dc.w 5			
		dc.w $14F0					; 0
		dc.w $F510					; 1
		dc.w $2610					; 2
		dc.w  $640					; 3
		dc.w $3650					; 4
word_346BA:	dc.w 4			
		dc.w $3690					; 0
		dc.w $36D0					; 1
		dc.w $B710					; 2
		dc.w $37D0					; 3
word_346C4:	dc.w 5			
		dc.w $3810					; 0
		dc.w $2850					; 1
		dc.w $7880					; 2
		dc.w $7900					; 3
		dc.w  $980					; 4
word_346D0:	dc.w 5			
		dc.w $5990					; 0
		dc.w $19F0					; 1
		dc.w $7A10					; 2
		dc.w $7A90					; 3
		dc.w  $B10					; 4
word_346DC:	dc.w 6			
		dc.w  $B20					; 0
		dc.w $7B30					; 1
		dc.w  $BB0					; 2
		dc.w $1BC0					; 3
		dc.w $7BE0					; 4
		dc.w $5C60					; 5
word_346EA:	dc.w 3			
		dc.w $5000					; 0
		dc.w   $60					; 1
		dc.w $F070					; 2
word_346F2:	dc.w 3			
		dc.w $5170					; 0
		dc.w $31D0					; 1
		dc.w $B210					; 2
word_346FA:	dc.w 3			
		dc.w $22D0					; 0
		dc.w $2300					; 1
		dc.w $F330					; 2
word_34702:	dc.w 3			
		dc.w $5430					; 0
		dc.w $3490					; 1
		dc.w $B210					; 2
word_3470A:	dc.w 2			
		dc.w $7000					; 0
		dc.w $1080					; 1
word_34710:	dc.w 2			
		dc.w $70A0					; 0
		dc.w $1080					; 1
word_34716:	dc.w 3			
		dc.w $8000					; 0
		dc.w $5090					; 1
		dc.w   $F0					; 2
word_3471E:	dc.w 4			
		dc.w $3100					; 0
		dc.w $5140					; 1
		dc.w $31A0					; 2
		dc.w $31E0					; 3
word_34728:	dc.w 4			
		dc.w $3220					; 0
		dc.w $5260					; 1
		dc.w $32C0					; 2
		dc.w $3300					; 3
word_34732:	dc.w 5			
		dc.w $3100					; 0
		dc.w $5140					; 1
		dc.w $3340					; 2
		dc.w $3380					; 3
		dc.w  $3C0					; 4
word_3473E:	dc.w 3			
		dc.w $3000					; 0
		dc.w $7040					; 1
		dc.w $70C0					; 2
word_34746:	dc.w 4			
		dc.w $1140					; 0
		dc.w $7160					; 1
		dc.w $81E0					; 2
		dc.w $1270					; 3
word_34750:	dc.w 5			
		dc.w  $290					; 0
		dc.w $22A0					; 1
		dc.w $72D0					; 2
		dc.w  $350					; 3
		dc.w $5360					; 4
word_3475C:	dc.w 4			
		dc.w  $3C0					; 0
		dc.w $F3D0					; 1
		dc.w  $4D0					; 2
		dc.w $14E0					; 3
word_34766:	dc.w 4			
		dc.w $3500					; 0
		dc.w $3540					; 1
		dc.w $7580					; 2
		dc.w $5600					; 3
word_34770:	dc.w 5			
		dc.w  $660					; 0
		dc.w $7670					; 1
		dc.w  $6F0					; 2
		dc.w $7700					; 3
		dc.w $1780					; 4
word_3477C:	dc.w 5			
		dc.w  $7A0					; 0
		dc.w $B7B0					; 1
		dc.w  $870					; 2
		dc.w $3880					; 3
		dc.w $18C0					; 4
word_34788:	dc.w 4			
		dc.w  $8E0					; 0
		dc.w $B8F0					; 1
		dc.w  $9B0					; 2
		dc.w $79C0					; 3
word_34792:	dc.w 2			
		dc.w $8000					; 0
		dc.w $7090					; 1
word_34798:	dc.w 3			
		dc.w $3110					; 0
		dc.w  $150					; 1
		dc.w $B160					; 2
word_347A0:	dc.w 2			
		dc.w $1220					; 0
		dc.w $F240					; 1
word_347A6:	dc.w 3			
		dc.w $2340					; 0
		dc.w $2370					; 1
		dc.w $B160					; 2
word_347AE:	dc.w 1			
		dc.w $7000
word_347B2:	dc.w 1			
		dc.w $7080
word_347B6:	dc.w $5000		
word_347B8:	dc.w $8060		
word_347BA:	dc.w $50F0		
word_347BC:	dc.w $5150		
word_347BE:	dc.w $71B0		
word_347C0:	dc.w $8230		
word_347C2:	dc.w $82C0		
word_347C4:	dc.w $8000		
word_347C6:	dc.w $5090		
word_347C8:	dc.w $50F0		
word_347CA:	dc.w $7150		
word_347CC:	dc.w $B1D0		
word_347CE:	dc.w $8290		
word_347D0:	dc.w $8320		
word_347D2:	dc.w $5000		
word_347D4:	dc.w $8060		
word_347D6:	dc.w $50F0		
word_347D8:	dc.w $5150		
word_347DA:	dc.w $71B0		
word_347DC:	dc.w $8230		
word_347DE:	dc.w $82C0		

; ===========================================================================

	if RemoveJmpTos=0
JmpTo42_DisplaySprite:				
		jmp	DisplaySprite
JmpTo_FindFreeObjSpecial:				
		jmp FindFreeObjSpecial
		
		align 4
	endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 10 - Tails in Special Stage
; ----------------------------------------------------------------------------

TailsSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_347FA(pc,d0.w),d1
		jmp	off_347FA(pc,d1.w)
; ===========================================================================
off_347FA:	
		dc.w loc_34804-off_347FA			; 0 
		dc.w loc_34908-off_347FA			; 1
		dc.w loc_349F2-off_347FA			; 2
		dc.w off_347FA-off_347FA			; 3
		dc.w loc_34A24-off_347FA			; 4
; ===========================================================================

loc_34804:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.w	d0,ost_ss_x_pos(a0)
		move.w	#$80,d1	
		move.w	d1,ost_ss_y_pos(a0)
		add.w	($FFFFF73E).w,d0
		move.w	d0,ost_x_pos(a0)
		add.w	($FFFFF740).w,d1
		move.w	d1,ost_y_pos(a0)
		move.b	#$E,ost_height(a0)
		move.b	#7,$17(a0)
		move.l	#Map_34B3E,ost_mappings(a0)
		move.w	#(vram_SpecialTails/sizeof_cell)+tile_pal3,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#2,$18(a0)
		move.w	#$80,ost_ss_z_pos(a0)
		tst.w	(v_player_mode).w
		beq.s	loc_34864
		move.b	#3,$18(a0)
		move.w	#$6E,ost_ss_z_pos(a0)

loc_34864:				
		move.w	#$400,ost_ss_init_flip_timer(a0)
		move.b	#$40,$26(a0)
		move.b	#1,(v_tails_last_frame_id).w
		clr.b	$21(a0)
		clr.b	ost_ss_dplc_timer(a0)
		bsr.w	TSS_LoadGFX
		movea.l	#v_ss_shadow_tails,a1
		move.b	#id_ShadowSpecial,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$18,ost_y_pos(a1)
		move.l	#off_34492,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHorizShadow+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.l	a0,ost_shadspec_parent(a1)
		movea.l	#v_ss_tails_tails,a1
		move.b	#id_TailsTailsSpecial,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	#off_34DA8,ost_mappings(a1)
		move.w	#(vram_SpecialTails_Tails/sizeof_cell)+tile_pal3,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	$18(a0),$18(a1)
		subi_.b	#1,$18(a1)
		move.l	a0,ost_ttspec_parent(a1)
		movea.l	a1,a0
		move.b	#1,(v_tailstails_last_frame_id).w
		clr.b	ost_ss_dplc_timer(a0)
		movea.l	ost_ttspec_parent(a0),a0
		rts	
; ===========================================================================

loc_34908:				
		tst.b	$25(a0)
		bne.s	loc_3495E
		bsr.w	loc_34972
		lea	(v_joypad2_hold).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34920
		lea	(v_joypad_hold).w,a2

loc_34920:				
		bsr.w	loc_33F8A
		bsr.w	loc_3400A
		moveq	#1,d0
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		lea	(v_joypad2_press).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34944
		lea	(v_joypad_press).w,a2

loc_34944:				
		bsr.w	loc_33B44
		bsr.w	loc_33EA0
		lea	(off_34B1C).l,a1
		bsr.w	loc_33F00
		bsr.w	loc_33DFC
		bra.w	TSS_LoadGFX
; ===========================================================================

loc_3495E:				
		bsr.w	loc_33A22
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		bra.w	TSS_LoadGFX
; ===========================================================================

loc_34972:				
		tst.b	(f_ss_2p).w
		bne.s	locret_3497E
		tst.w	(v_player_mode).w
		beq.s	loc_34980

locret_3497E:				
		rts	
; ===========================================================================

loc_34980:				
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$7F,d0
		beq.s	loc_349A2
		moveq	#0,d0
		moveq	#3,d1
		lea	(v_ss_ctrl_record_buffer).w,a1

loc_34992:				
		move.l	d0,(a1)
		move.l	d0,(a1)
		dbf	d1,loc_34992
		move.w	#$B4,(v_tails_control_counter).w
		rts	
; ===========================================================================

loc_349A2:				
		tst.w	(v_tails_control_counter).w
		beq.s	loc_349AE
		subq.w	#1,(v_tails_control_counter).w
		rts	
; ===========================================================================

loc_349AE:				
		lea	(v_ss_last_ctrl_record).w,a1
		move.w	(a1),(v_joypad2_hold).w
		rts	
; ===========================================================================
dword_349B8:	
		dc.l   $FF3060					; 0 
		dc.l   $FF3800					; 1
		dc.l   $FF4C80					; 2
		dc.l   $FF53C0					; 3
; ===========================================================================

TSS_LoadGFX:				
		move.b	ost_ss_dplc_timer(a0),d0
		beq.s	loc_349DC
		subq.b	#1,d0
		move.b	d0,ost_ss_dplc_timer(a0)
		andi.b	#1,d0
		beq.s	loc_349DC
		rts	
; ===========================================================================

loc_349DC:				
		jsrto	DisplaySprite,JmpTo43_DisplaySprite
		lea	dword_349B8(pc),a3
		lea	(v_tails_last_frame_id).w,a4
		move.w	#$6000,d4
		moveq	#$12,d1
		bra.w	SpecialPlayer_LoadGFX
; ===========================================================================

loc_349F2:				
		lea	(v_joypad2_hold).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34A00
		lea	(v_joypad_hold).w,a2

loc_34A00:				
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		bsr.w	loc_33C54
		lea	(off_34B1C).l,a1
		bsr.w	loc_33F00
		bra.s	TSS_LoadGFX
; ===========================================================================

loc_34A24:				
		lea	(v_joypad2_hold).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34A32
		lea	(v_joypad_hold).w,a2

loc_34A32:				
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33C54
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		bsr.w	loc_33EA0
		lea	(off_34B1C).l,a1
		bsr.w	loc_33F00
		bra.w	TSS_LoadGFX
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 88 - Tails' tails in Special Stage
; ----------------------------------------------------------------------------

TailsTailsSpecial:	

		rsobj 	TailsTailsSpecial,$38
ost_ttspec_parent:	rs.l 1 ; $38		
		rsobjend
				
		movea.l	ost_ttspec_parent(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.b	ost_render(a1),ost_render(a0)
		move.b	$22(a1),$22(a0)
		move.b	$1C(a1),$1C(a0)
		move.b	$18(a1),d0
		subq.b	#1,d0
		move.b	d0,$18(a0)
		cmpi.b	#3,$1C(a0)
		bcc.s	locret_34A9E
		lea	(off_34D86).l,a1
		jsrto	AnimateSprite,JmpTo23_AnimateSprite
		bra.w	TTSS_LoadGFX
; ===========================================================================

locret_34A9E:				
		rts	
; ===========================================================================
dword_34AA0:	
		dc.l	(v_ss_character_art&$FFFFFF)+$55C0
		dc.l	(v_ss_character_art&$FFFFFF)+$5C60					; 1
		dc.l	(v_ss_character_art&$FFFFFF)+$63C0					; 2
; ===========================================================================

TTSS_LoadGFX:				
		movea.l	ost_ttspec_parent(a0),a1
		move.b	ost_ss_dplc_timer(a1),d0
		beq.s	loc_34ABE
		andi.b	#1,d0
		beq.s	loc_34ABE
		rts	
; ===========================================================================

loc_34ABE:				
		jsrto	DisplaySprite,JmpTo43_DisplaySprite
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(v_tailstails_last_frame_id).w,d0
		beq.s	locret_34B1A
		move.b	d0,(v_tailstails_last_frame_id).w
		moveq	#0,d6
		cmpi.b	#7,d0
		blt.s	loc_34AE4
		addq.w	#4,d6
		cmpi.b	#$E,d0
		blt.s	loc_34AE4
		addq.w	#4,d6

loc_34AE4:				
		move.l	dword_34AA0(pc,d6.w),d6
		addi.w	#$24,d0
		add.w	d0,d0
		lea	(SS_Sonic_Tails_DPLC).l,a2
		adda.w	(a2,d0.w),a2
		move.w	#$62C0,d2
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.w	#1,d1
		add.l	d6,d1
		jsr	(AddDMA).l

locret_34B1A:				
		rts	
; ===========================================================================
off_34B1C:	
		dc.w byte_34B24-off_34B1C			; 0 
		dc.w byte_34B2A-off_34B1C			; 1
		dc.w byte_34B34-off_34B1C			; 2
		dc.w byte_34B3A-off_34B1C			; 3
byte_34B24:	dc.b   3,  0,  1,  2,  3,$FF			; 0	
byte_34B2A:	dc.b   3,  4,  5,  6,  7,  8,  9, $A, $B,$FF	; 0	
byte_34B34:	dc.b   3, $C, $D, $E, $F,$FF			; 0	
byte_34B3A:	dc.b   1,$10,$11,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_34B3E:				
		dc.w word_34B62-Map_34B3E			; 0
		dc.w word_34B7C-Map_34B3E			; 1
		dc.w word_34B9E-Map_34B3E			; 2
		dc.w word_34BC0-Map_34B3E			; 3
		dc.w word_34BEA-Map_34B3E			; 4
		dc.w word_34C04-Map_34B3E			; 5
		dc.w word_34C26-Map_34B3E			; 6
		dc.w word_34C50-Map_34B3E			; 7
		dc.w word_34C72-Map_34B3E			; 8
		dc.w word_34C94-Map_34B3E			; 9
		dc.w word_34CBE-Map_34B3E			; 10
		dc.w word_34CE8-Map_34B3E			; 11
		dc.w word_34D0A-Map_34B3E			; 12
		dc.w word_34D1C-Map_34B3E			; 13
		dc.w word_34D36-Map_34B3E			; 14
		dc.w word_34D48-Map_34B3E			; 15
		dc.w word_34D62-Map_34B3E			; 16
		dc.w word_34D74-Map_34B3E			; 17
word_34B62:	dc.w 3			
		dc.w $E80A,$8000,$8000,$FFF4			; 0
		dc.w	 9,$8009,$8004,$FFF4			; 4
		dc.w $1000,$800F,$8007,$FFF4			; 8
word_34B7C:	dc.w 4			
		dc.w $E80C,$8000,$8000,$FFF0			; 0
		dc.w $F009,$8004,$8002,$FFF3			; 4
		dc.w	$C,$800A,$8005,$FFF0			; 8
		dc.w  $805,$800E,$8007,$FFF8			; 12
word_34B9E:	dc.w 4			
		dc.w $E80C,$8000,$8000,$FFF0			; 0
		dc.w $F009,$8004,$8002,$FFF3			; 4
		dc.w	$C,$800A,$8005,$FFF0			; 8
		dc.w  $805,$800E,$8007,$FFF8			; 12
word_34BC0:	dc.w 5			
		dc.w $E80C,$8800,$8800,$FFF0			; 0
		dc.w $F009,$8804,$8802,$FFF5			; 4
		dc.w	$C,$800A,$8005,$FFF0			; 8
		dc.w  $805,$800E,$8007,$FFF8			; 12
		dc.w $1000,$8012,$8009,	   8			; 16
word_34BEA:	dc.w 3			
		dc.w $E105,$8000,$8000,	   0			; 0
		dc.w $F10D,$8004,$8002,$FFF8			; 4
		dc.w  $10D,$800C,$8006,$FFEC			; 8
word_34C04:	dc.w 4			
		dc.w $E101,$8000,$8000,	   0			; 0
		dc.w $F10D,$8002,$8001,$FFF7			; 4
		dc.w  $10A,$800A,$8005,$FFEF			; 8
		dc.w  $101,$8013,$8009,	   7			; 12
word_34C26:	dc.w 5			
		dc.w $E800,$8000,$8000,	   0			; 0
		dc.w $EC08,$8001,$8000,$FFF8			; 4
		dc.w $F40D,$8004,$8002,$FFF0			; 8
		dc.w $F400,$800C,$8006,	 $10			; 12
		dc.w  $409,$800D,$8006,$FFF0			; 16
word_34C50:	dc.w 4			
		dc.w $E900,$8000,$8000,	   1			; 0
		dc.w $F10F,$8001,$8000,$FFF0			; 4
		dc.w $F900,$8011,$8008,	 $10			; 8
		dc.w $1104,$8012,$8009,$FFF0			; 12
word_34C72:	dc.w 4			
		dc.w $E205,$8000,$8000,	   0			; 0
		dc.w $F20C,$8004,$8002,$FFF8			; 4
		dc.w $FA07,$8008,$8004,$FFF0			; 8
		dc.w $FA09,$8010,$8008,	   0			; 12
word_34C94:	dc.w 5			
		dc.w $E800,$8000,$8000,	   0			; 0
		dc.w $F00D,$8001,$8000,$FFF0			; 4
		dc.w $F800,$8009,$8004,	 $10			; 8
		dc.w	$D,$800A,$8005,$FFF0			; 12
		dc.w $1004,$8012,$8009,$FFF0			; 16
word_34CBE:	dc.w 5			
		dc.w $E800,$8000,$8000,	   0			; 0
		dc.w $F00E,$8001,$8000,$FFF0			; 4
		dc.w $F800,$800D,$8006,	 $10			; 8
		dc.w  $80C,$800E,$8007,$FFE8			; 12
		dc.w $1004,$8012,$8009,$FFF0			; 16
word_34CE8:	dc.w 4			
		dc.w $E800,$8000,$8000,	   0			; 0
		dc.w $F00E,$8001,$8000,$FFF0			; 4
		dc.w $F800,$800D,$8006,	 $10			; 8
		dc.w  $80D,$800E,$8007,$FFE8			; 12
word_34D0A:	dc.w 2			
		dc.w $F80A,$8000,$8000,$FFEC			; 0
		dc.w $F007,$8009,$8004,	   4			; 4
word_34D1C:	dc.w 3			
		dc.w $F805,$8000,$8000,$FFEC			; 0
		dc.w  $800,$8004,$8002,$FFF4			; 4
		dc.w $F00B,$8005,$8002,$FFFC			; 8
word_34D36:	dc.w 2			
		dc.w $F701,$8000,$8000,$FFEC			; 0
		dc.w $F00F,$8002,$8001,$FFF4			; 4
word_34D48:	dc.w 3			
		dc.w $F802,$8000,$8000,$FFEC			; 0
		dc.w $F002,$8003,$8001,$FFF4			; 4
		dc.w $F00B,$8006,$8003,$FFFC			; 8
word_34D62:	dc.w 2			
		dc.w $F007,$8000,$8000,$FFF0			; 0
		dc.w $F007,$8800,$8800,	   0			; 4
word_34D74:	dc.w 2			
		dc.w $F007,$8000,$8000,$FFF0			; 0
		dc.w $F007,$8800,$8800,	   0			; 4
off_34D86:	dc.w byte_34D8C-off_34D86			; 0 
		dc.w byte_34D95-off_34D86			; 1
		dc.w byte_34D9E-off_34D86			; 2
byte_34D8C:	dc.b   3,  0,  1,  2,  3,  4,  5,  6,$FF	; 0 
byte_34D95:	dc.b   3,  7,  8,  9, $A, $B, $C, $D,$FF	; 0 
byte_34D9E:	dc.b   3, $E, $F,$10,$11,$12,$13,$14,$FF,  0	; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_34DA8:	dc.w word_34DD2-off_34DA8			; 0 
		dc.w word_34DDC-off_34DA8			; 1
		dc.w word_34DE6-off_34DA8			; 2
		dc.w word_34DF0-off_34DA8			; 3
		dc.w word_34DFA-off_34DA8			; 4
		dc.w word_34E04-off_34DA8			; 5
		dc.w word_34E0E-off_34DA8			; 6
		dc.w word_34E18-off_34DA8			; 7
		dc.w word_34E22-off_34DA8			; 8
		dc.w word_34E2C-off_34DA8			; 9
		dc.w word_34E36-off_34DA8			; 10
		dc.w word_34E40-off_34DA8			; 11
		dc.w word_34E4A-off_34DA8			; 12
		dc.w word_34E54-off_34DA8			; 13
		dc.w word_34E5E-off_34DA8			; 14
		dc.w word_34E68-off_34DA8			; 15
		dc.w word_34E72-off_34DA8			; 16
		dc.w word_34E7C-off_34DA8			; 17
		dc.w word_34E86-off_34DA8			; 18
		dc.w word_34E90-off_34DA8			; 19
		dc.w word_34E9A-off_34DA8			; 20
word_34DD2:	dc.w 1			
		dc.w $FA06,$8000,$8000,$FFFA			; 0
word_34DDC:	dc.w 1			
		dc.w	$A,$8000,$8000,$FFF8			; 0
word_34DE6:	dc.w 1			
		dc.w  $809,$8000,$8000,$FFF8			; 0
word_34DF0:	dc.w 1			
		dc.w $FF06,$8000,$8000,$FFF7			; 0
word_34DFA:	dc.w 1			
		dc.w $F707,$8000,$8000,$FFF5			; 0
word_34E04:	dc.w 1			
		dc.w $F70A,$8000,$8000,$FFF0			; 0
word_34E0E:	dc.w 1			
		dc.w $F70A,$8000,$8000,$FFF0			; 0
word_34E18:	dc.w 1			
		dc.w	$A,$8000,$8000,$FFF4			; 0
word_34E22:	dc.w 1			
		dc.w  $809,$8000,$8000,$FFF3			; 0
word_34E2C:	dc.w 1			
		dc.w	 6,$8000,$8000,$FFF1			; 0
word_34E36:	dc.w 1			
		dc.w $F807,$8000,$8000,$FFF4			; 0
word_34E40:	dc.w 1			
		dc.w $F80B,$8000,$8000,$FFF2			; 0
word_34E4A:	dc.w 1			
		dc.w $F80A,$8000,$8000,$FFF3			; 0
word_34E54:	dc.w 1			
		dc.w $F80A,$8000,$8000,$FFF4			; 0
word_34E5E:	dc.w 1			
		dc.w $FC09,$8000,$8000,$FFEA			; 0
word_34E68:	dc.w 1			
		dc.w $F80A,$8000,$8000,$FFED			; 0
word_34E72:	dc.w 1			
		dc.w $F806,$8000,$8000,$FFED			; 0
word_34E7C:	dc.w 1			
		dc.w $F709,$8000,$8000,$FFED			; 0
word_34E86:	dc.w 1			
		dc.w $F50D,$8000,$8000,$FFE5			; 0
word_34E90:	dc.w 1			
		dc.w $F00A,$8000,$8000,$FFED			; 0
word_34E9A:	dc.w 1			
		dc.w $F00A,$8000,$8000,$FFED			; 0
; ===========================================================================

	if RemoveJmpTos=0
JmpTo43_DisplaySprite:				
		jmp	DisplaySprite
JmpTo23_AnimateSprite:				
		jmp	AnimateSprite
		
		align 4
	endc	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 61 - Special Stage Bombs
; ----------------------------------------------------------------------------

BombSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_34EBE(pc,d0.w),d1
		jmp	off_34EBE(pc,d1.w)
; ===========================================================================
off_34EBE:	
		dc.w loc_34EC6-off_34EBE			; 0 
		dc.w loc_34F06-off_34EBE			; 1
		dc.w loc_3533A-off_34EBE			; 2
		dc.w loc_34F6A-off_34EBE			; 3
; ===========================================================================

loc_34EC6:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$7F,ost_x_pos(a0)
		move.w	#$58,ost_y_pos(a0)
		move.l	#Map_36508,ost_mappings(a0)
		move.w	#tile_Nem_SpecialBomb+tile_pal2,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#2,$20(a0)
		move.b	#-1,(f_unused_ss_bomb).w		; never used again
		tst.b	$26(a0)
		bmi.s	loc_34F06
		bsr.w	loc_3529C

loc_34F06:				
					
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		lea	(off_364CE).l,a1
		bsr.w	loc_3539E
		tst.b	ost_render(a0)
		bpl.s	locret_34F26
		bsr.w	loc_34F28
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

locret_34F26:				
		rts	
; ===========================================================================

loc_34F28:				
		move.w	#8,d6
		bsr.w	loc_350A0
		bcc.s	locret_34F68
		move.b	#1,$21(a1)
		move.w	#$CB,d0	
		jsr	(PlaySound2).l
		move.b	#6,ost_primary_routine(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		move.l	$34(a0),d0
		beq.s	locret_34F68
		move.l	#0,$34(a0)
		movea.l	d0,a1
		st.b	$2A(a1)

locret_34F68:				
		rts	
; ===========================================================================

loc_34F6A:				
		move.b	#$A,$1C(a0)
		move.w	#tile_Nem_SpecialExplosion+tile_pal3,ost_tile(a0)
		bsr.w	loc_34F90
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		lea	(off_364CE).l,a1
		jsrto	AnimateSprite,JmpTo24_AnimateSprite
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_34F90:				
		cmpi.w	#4,$30(a0)
		bcc.s	locret_34F9E
		move.b	#1,$18(a0)

locret_34F9E:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 60 - Special Stage rings
; ----------------------------------------------------------------------------

RingsSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_34FAE(pc,d0.w),d1
		jmp	off_34FAE(pc,d1.w)
; ===========================================================================
off_34FAE:	
		dc.w loc_34FB6-off_34FAE			; 0 
		dc.w loc_34FF0-off_34FAE			; 1
		dc.w loc_3533A-off_34FAE			; 2
		dc.w loc_35010-off_34FAE			; 3
; ===========================================================================

loc_34FB6:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$7F,ost_x_pos(a0)
		move.w	#$58,ost_y_pos(a0)
		move.l	#Map_3632A,ost_mappings(a0)
		move.w	#tile_Nem_SpecialRings+tile_pal4,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#3,$18(a0)
		move.b	#1,$20(a0)
		tst.b	$26(a0)
		bmi.s	loc_34FF0
		bsr.w	loc_3529C

loc_34FF0:				
					
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		bsr.w	loc_35036

loc_34FFC:
		lea	(off_362D2).l,a1
		bsr.w	loc_3539E
		tst.b	ost_render(a0)
		bmi.w	JmpTo44_DisplaySprite
		rts	
; ===========================================================================

loc_35010:				
		move.b	#$A,$1C(a0)
		move.w	#tile_Nem_SpecialStars+tile_pal3,ost_tile(a0)
		bsr.w	loc_34F90
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		lea	(off_362D2).l,a1
		jsrto	AnimateSprite,JmpTo24_AnimateSprite
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_35036:				
		move.w	#$A,d6
		bsr.w	loc_350A0
		bcc.s	locret_3509E
		cmpa.l	#-$5000,a1
		bne.s	loc_3504E
		addq.w	#1,(v_rings).w
		bra.s	loc_35052
; ===========================================================================

loc_3504E:				
		addq.w	#1,(v_rings_p2).w

loc_35052:				
		addq.b	#1,$3E(a1)
		cmpi.b	#$A,$3E(a1)
		blt.s	loc_3507A
		addq.b	#1,$3D(a1)
		move.b	#0,$3E(a1)
		cmpi.b	#$A,$3D(a1)
		blt.s	loc_3507A
		addq.b	#1,$3C(a1)
		move.b	#0,$3D(a1)

loc_3507A:				
		move.b	#6,ost_primary_routine(a0)
		move.l	$34(a0),d0
		beq.s	loc_35094

loc_35086:
		move.l	#0,$34(a0)
		movea.l	d0,a1
		st.b	$2A(a1)

loc_35094:				
		move.w	#$B5,d0	
		jsr	(PlaySound2).l

locret_3509E:				
		rts	
; ===========================================================================

loc_350A0:				
		cmpi.b	#8,$1C(a0)
		bne.s	loc_350DC
		tst.b	$20(a0)
		beq.s	loc_350DC
		lea	($FFFFB000).w,a2
		lea	($FFFFB040).w,a3
		move.w	$34(a2),d0
		cmp.w	$34(a3),d0
		bcs.s	loc_350CE
		movea.l	a3,a1
		bsr.w	loc_350E2
		bcs.s	locret_350E0
		movea.l	a2,a1
		bra.w	loc_350E2
; ===========================================================================

loc_350CE:				
		movea.l	a2,a1
		bsr.w	loc_350E2
		bcs.s	locret_350E0
		movea.l	a3,a1
		bra.w	loc_350E2
; ===========================================================================

loc_350DC:				
		move	#0,ccr

locret_350E0:				
		rts	
; ===========================================================================

loc_350E2:				
		tst.b	ost_id(a1)
		beq.s	loc_3511A
		cmpi.b	#2,$24(a1)
		bne.s	loc_3511A
		tst.b	$25(a1)
		bne.s	loc_3511A
		move.b	$26(a1),d0
		move.b	$26(a0),d1
		move.b	d1,d2
		add.b	d6,d1
		bcs.s	loc_35110
		sub.b	d6,d2
		bcs.s	loc_35112
		cmp.b	d1,d0
		bcc.s	loc_3511A
		cmp.b	d2,d0
		bcc.s	loc_35120
		bra.s	loc_3511A
; ===========================================================================

loc_35110:				
		sub.b	d6,d2

loc_35112:				
		cmp.b	d1,d0
		bcs.s	loc_35120
		cmp.b	d2,d0
		bcc.s	loc_35120

loc_3511A:				
		move	#0,ccr
		rts	
; ===========================================================================

loc_35120:				
		clr.b	$20(a0)
		move	#1,ccr
		rts	
; ===========================================================================

loc_3512A:				
		btst	#7,$22(a0)
		bne.s	loc_3516C
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.s	loc_35146
		subi.l	#$CCCC,$30(a0)
		ble.s	loc_3516C
		bra.s	loc_35150
; ===========================================================================

loc_35146:				
		subi.l	#$CCCD,$30(a0)
		ble.s	loc_3516C

loc_35150:				
		cmpi.b	#$A,$1C(a0)
		beq.s	locret_3516A
		move.w	$30(a0),d0
		cmpi.w	#$1D,d0
		ble.s	loc_35164
		moveq	#$1E,d0

loc_35164:				
		move.b	byte_35180(pc,d0.w),$1C(a0)

locret_3516A:				
		rts	
; ===========================================================================

loc_3516C:				
		move.l	(sp)+,d0
		move.l	$34(a0),d0
		beq.w	JmpTo63_DeleteObject
		movea.l	d0,a1
		st.b	$2A(a1)

    if RemoveJmpTos
JmpTo63_DeleteObject:
    endc		
		
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================
byte_35180:	
		dc.b   9,  9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4,  3,  3,  3			
		dc.b   2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0
		even
; ===========================================================================

loc_351A0:				
		move.w	d7,-(sp)
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		moveq	#0,d5
		moveq	#0,d6
		moveq	#0,d7
		movea.l	(v_ss_ctrl_record_buffer_end).w,a1
		move.w	$30(a0),d0
		beq.w	loc_35258
		cmp.w	(a1)+,d0
		bgt.w	loc_35258
		subq.w	#1,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		tst.b	(v_ss_track_orientation).w
		bne.w	loc_35260
		move.b	4(a1,d0.w),d6
		move.b	5(a1,d0.w),d7
		beq.s	loc_351E8
		move.b	$26(a0),d1
		cmp.b	d6,d1
		bcs.s	loc_351E8
		cmp.b	d7,d1
		bcs.s	loc_35258

loc_351E8:				
		move.b	(a1,d0.w),d2
		move.b	2(a1,d0.w),d4
		move.b	3(a1,d0.w),d5
		move.b	1(a1,d0.w),d3

loc_351F8:				
		bpl.s	loc_35202
		cmpi.b	#$48,d3
		bcs.s	loc_35202
		ext.w	d3

loc_35202:				
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo14_CalcSine
		muls.w	d4,d1
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,ost_x_pos(a0)
		move.w	d0,ost_y_pos(a0)
		move.l	$34(a0),d0
		beq.s	loc_3524E
		movea.l	d0,a1
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo14_CalcSine
		move.w	d4,d7
		lsr.w	#2,d7
		add.w	d7,d4
		muls.w	d4,d1
		move.w	d5,d7
		asr.w	#2,d7
		add.w	d7,d5
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,ost_x_pos(a1)
		move.w	d0,ost_y_pos(a1)

loc_3524E:				
		ori.b	#render_onscreen,ost_render(a0)

loc_35254:				
		move.w	(sp)+,d7
		rts	
; ===========================================================================

loc_35258:				
		andi.b	#(~render_onscreen)&$FF,ost_render(a0)
		bra.s	loc_35254
; ===========================================================================

loc_35260:				
		move.b	#-$80,d1
		move.b	4(a1,d0.w),d6
		move.b	5(a1,d0.w),d7
		beq.s	loc_35282
		sub.w	d1,d6
		sub.w	d1,d7
		neg.w	d6
		neg.w	d7
		move.b	$26(a0),d1
		cmp.b	d7,d1
		bcs.s	loc_35282
		cmp.b	d6,d1
		bcs.s	loc_35258

loc_35282:				
		move.b	(a1,d0.w),d2
		move.b	2(a1,d0.w),d4
		move.b	3(a1,d0.w),d5
		subi.w	#$100,d2
		neg.w	d2
		move.b	1(a1,d0.w),d3
		bra.w	loc_351F8
; ===========================================================================

loc_3529C:				
		jsrto	FindNextFreeObjSpecial,JmpTo_FindNextFreeObjSpecial
		bne.w	locret_3532C
		move.l	a0,$34(a1)
		move.b	ost_id(a0),ost_id(a1)
		move.b	#4,$24(a1)
		move.l	#off_34492,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHorizShadow+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#5,$18(a1)
		move.b	$26(a0),d0
		cmpi.b	#$10,d0
		bgt.s	loc_352E6
		bset	#render_xflip_bit,ost_render(a1)
		move.b	#2,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_352E6:				
		cmpi.b	#$30,d0
		bgt.s	loc_352FE
		bset	#render_xflip_bit,ost_render(a1)

loc_352F2:
		move.b	#1,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_352FE:				
		cmpi.b	#$50,d0
		bgt.s	loc_35310
		move.b	#0,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_35310:				
		cmpi.b	#$70,d0
		bgt.s	loc_35322
		move.b	#1,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_35322:				
		move.b	#2,$2B(a1)
		move.l	a1,$34(a0)

locret_3532C:				
		rts	
; ===========================================================================
		dc.b   0					; 0
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b $18					; 3
		dc.b   0					; 4
		dc.b $14					; 5
		dc.b   0					; 6
		dc.b $14					; 7
		dc.b   0					; 8
		dc.b $14					; 9
		dc.b   0					; 10
		dc.b   0					; 11
; ===========================================================================

loc_3533A:				
		tst.b	$2A(a0)
		bne.w	loc_3539A
		movea.l	$34(a0),a1
		tst.b	ost_render(a1)
		bmi.s	loc_3534E
		rts	
; ===========================================================================

loc_3534E:				
		moveq	#9,d0
		sub.b	$1C(a1),d0
		addi_.b	#1,d0
		cmpi.b	#$A,d0
		bne.s	loc_35362
		move.w	#9,d0

loc_35362:				
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		moveq	#0,d1
		move.b	$2B(a0),d1
		beq.s	loc_3538A
		cmpi.b	#1,d1
		beq.s	loc_35380
		add.w	d1,d0
		move.w	#tile_Nem_SpecialVertShadow+tile_pal4,ost_tile(a0)
		bra.s	loc_35392
; ===========================================================================

loc_35380:				
		add.w	d1,d0
		move.w	#tile_Nem_SpecialDiagShadow+tile_pal4,ost_tile(a0)
		bra.s	loc_35392
; ===========================================================================

loc_3538A:				
		add.w	d1,d0
		move.w	#tile_Nem_SpecialHorizShadow+tile_pal4,ost_tile(a0)

loc_35392:				
		move.b	d0,$1A(a0)
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3539A:				
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

loc_3539E:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_353E8
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),$1E(a0)
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bpl.s	loc_353CA
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_353CA:				
		andi.b	#$7F,d0
		move.b	d0,$1A(a0)
		move.b	$22(a0),d1

loc_353D6:
		andi.b	#3,d1
		andi.b	#~(render_xflip|render_yflip),ost_render(a0)
		or.b	d1,ost_render(a0)
		addq.b	#1,$1B(a0)

locret_353E8:				
		rts	
; ===========================================================================
byte_353EA:	
		dc.b $38					; 0 
		dc.b $48					; 1
		dc.b $2A					; 2
		dc.b $56					; 3
		dc.b $1C					; 4
		dc.b $64					; 5
		dc.b  $E					; 6
		dc.b $72					; 7
		dc.b   0					; 8
		dc.b $80					; 9
byte_353F4:	
		dc.b $40					; 0 
		dc.b $30					; 1
		dc.b $50					; 2
		dc.b $20					; 3
		dc.b $60					; 4
		dc.b $10					; 5
		dc.b $70					; 6
		dc.b   0					; 7
		dc.b $80					; 8
		dc.b   0					; 9
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5B - Ring spray/spill in Special Stage
; ----------------------------------------------------------------------------

RingLossSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	RLS_Index(pc,d0.w),d1
		jmp	RLS_Index(pc,d1.w)
; ===========================================================================
RLS_Index:	index offset(*),,2
		ptr loc_35410			; 0 
		ptr loc_354E4			; 2
		
		rsobj	RingLossSpecial,$38
ost_ringlossspec_parent:	rs.l 1 ; $38
		rsobjend
; ===========================================================================

loc_35410:				
		movea.l	ost_ringlossspec_parent(a0),a3
		moveq	#0,d1
		move.b	$3D(a3),d1
		beq.s	loc_35428
		subi_.b	#1,$3D(a3)
		move.w	#$A,d1
		bra.s	loc_35458
; ===========================================================================

loc_35428:				
		move.b	$3C(a3),d1
		beq.s	loc_35440

loc_3542E:
		subi_.b	#1,$3C(a3)
		move.b	#9,$3D(a3)
		move.w	#$A,d1
		bra.s	loc_35458
; ===========================================================================

loc_35440:				
		move.b	$3E(a3),d1
		beq.s	loc_3545C
		move.b	#0,$3E(a3)
		btst	#0,d1
		beq.s	loc_35458
		lea_	byte_353F4,a2
		bra.s	loc_3545C
; ===========================================================================

loc_35458:				
		lea_	byte_353EA,a2

loc_3545C:				
		cmpi.b	#9,(a3)
		bne.s	loc_35468
		sub.w	d1,(v_rings).w
		bra.s	loc_3546C
; ===========================================================================

loc_35468:				
		sub.w	d1,(v_rings_p2).w

loc_3546C:				
		move.w	d1,d2
		subq.w	#1,d2
		bmi.w	JmpTo63_DeleteObject
		movea.l	a0,a1
		bra.s	loc_3547E
; ===========================================================================

loc_35478:				
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.s	loc_354DE

loc_3547E:				
		move.b	#id_RingLossSpecial,ost_id(a1)
		move.b	#2,$24(a1)
		move.l	#Map_3632A,ost_mappings(a1)
		move.w	#tile_Nem_SpecialRings+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#5,$18(a1)
		move.b	#0,$20(a1)
		move.b	#8,$1C(a1)
		move.w	ost_x_pos(a3),ost_x_pos(a1)
		move.w	ost_y_pos(a3),ost_y_pos(a1)
		move.b	$26(a3),d0
		addi.b	#$40,d0
		add.b	(a2)+,d0
		jsr	CalcSine
		muls.w	#$400,d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a1)
		muls.w	#$1000,d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a1)

loc_354DE:				
		dbf	d2,loc_35478
		rts	
; ===========================================================================

loc_354E4:				
		jsrto	ObjectFall,JmpTo7_ObjectFall
		addi.w	#$80,ost_y_vel(a0)
		bsr.w	loc_3551C
		tst.w	ost_x_pos(a0)
		bmi.w	JmpTo63_DeleteObject
		cmpi.w	#$100,ost_x_pos(a0)
		bcc.w	JmpTo63_DeleteObject
		cmpi.w	#$E0,ost_y_pos(a0)
		bgt.w	JmpTo63_DeleteObject
		lea	(off_362D2).l,a1
		jsrto	AnimateSprite,JmpTo24_AnimateSprite
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3551C:				
		tst.w	ost_y_vel(a0)
		bmi.w	locret_35530
		move.b	#0,$18(a0)
		move.b	#9,$1C(a0)

locret_35530:				
		rts	
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_35534:				
		move.w	word_35548(pc,d0.w),($FFFFFB76).w
		move.w	word_35548+2(pc,d0.w),($FFFFFB78).w
		move.w	word_35548+4(pc,d0.w),($FFFFFB7A).w
		rts	
; ===========================================================================
word_35548:	
		dc.w   $EE,  $88,  $44				; 0
		dc.w   $EE,  $CC,  $88				; 3
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5A - Special Stage checkpoints, ring requirement messages,
; and progress messages
; ----------------------------------------------------------------------------

MessageSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_35562(pc,d0.w),d1
		jmp	off_35562(pc,d1.w)
; ===========================================================================
off_35562:	dc.w loc_35578-off_35562			; 0 
		dc.w loc_357FE-off_35562			; 1
		dc.w loc_35B5A-off_35562			; 2
		dc.w loc_359CE-off_35562			; 3
		dc.w loc_35B96-off_35562			; 4
		dc.w loc_359A6-off_35562			; 5
		dc.w loc_359BC-off_35562			; 6
		dc.w loc_35706-off_35562			; 7
		dc.w loc_357B2-off_35562			; 8
		dc.w loc_357D2-off_35562			; 9
		dc.w loc_357E8-off_35562			; 10
; ===========================================================================

loc_35578:				
		tst.b	(f_ss_no_checkpoint).w
		bne.s	loc_355E0
		movea.l	(v_ss_track_last_mappings_copy).w,a1

loc_35582:
		cmpa.l	#MapSpec_Straight4,a1
		blt.s	locret_355DE
		cmpa.l	#MapSpec_Drop1,a1
		bge.s	locret_355DE
		moveq	#6,d0
		bsr.s	loc_35534
		st.b	(f_ss_checkpoint_rainbow).w
		moveq	#6,d0

loc_3559C:				
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.s	loc_355D6
		move.b	#id_MessageSpecial,ost_id(a1)
		move.b	#2,$24(a1)
		move.l	#Map_3632A,ost_mappings(a1)
		move.w	#tile_Nem_SpecialRings+tile_pal4,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#5,$18(a1)
		move.b	d0,$2A(a1)
		move.w	#0,$30(a1)
		move.b	#-1,$1A(a1)

loc_355D6:				
		dbf	d0,loc_3559C
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

locret_355DE:				
		rts	
; ===========================================================================

loc_355E0:				
		sf.b	(f_ss_no_checkpoint).w
		tst.b	(f_ss_2p).w
		bne.w	JmpTo63_DeleteObject
		sf.b	(f_ss_hide_ringstogo).w
		sf.b	(f_ss_trigger_ringstogo).w
		move.w	#0,(v_ss_no_ringstogo_lifetime).w
		move.b	#0,$3A(a0)
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================
byte_35604:	
		dc.b   3					; 0 
		dc.b   4					; 1
		dc.b   5					; 2
		dc.b   0					; 3
		dc.b $FF					; 4
		dc.b $11					; 5
		dc.b   8					; 6
		dc.b   0					; 7
		dc.b   8					; 8
		dc.b   2					; 9
		dc.b $FF					; 10
		dc.b   6					; 11
		dc.b $FF					; 12
		dc.b   0					; 13
word_35612:	
		dc.w   $C0					; 0 
		dc.w   $B8					; 1
		dc.w   $B0					; 2
		dc.w   $A0					; 3
		dc.w   $98					; 4
		dc.w   $88					; 5
; ===========================================================================

loc_3561E:				
		st.b	(f_ss_trigger_ringstogo).w
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.w	locret_356E4
		move.l	#Map_obj5F_b,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHUD+tile_pal3,ost_tile(a1)
		move.b	#id_MessageSpecial,ost_id(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#1,$18(a1)

loc_35648:
		bset	#render_subobjects_bit,ost_render(a1)
		move.b	#0,ost_mainspr_childsprites(a1)
		move.b	#$E,$24(a1)
		lea	ost_subspr2_x_pos(a1),a2
		move.w	#$5A,d1
		move.w	#$38,d2
		moveq	#0,d0
		moveq	#2,d3

loc_3566A:				
		move.w	d1,(a2)+
		move.w	d2,(a2)+
		move.w	d0,(a2)+
		subq.w	#8,d1
		dbf	d3,loc_3566A
		lea	byte_35604(pc),a3
		move.w	#$68,d1
		move.w	#$38,d2

loc_35682:				
		move.b	(a3)+,d0
		bmi.s	loc_356A4
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.s	locret_356E4
		bsr.s	loc_356E6
		move.b	#$10,$24(a1)
		move.w	d1,ost_x_pos(a1)
		move.w	d2,ost_y_pos(a1)
		move.b	d0,$1A(a1)
		addq.w	#8,d1
		bra.s	loc_35682
; ===========================================================================

loc_356A4:				
		lea	word_35612(pc),a2

loc_356A8:				
		move.b	(a3)+,d0
		bmi.s	loc_356C8
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.s	locret_356E4
		bsr.s	loc_356E6
		move.b	#$12,$24(a1)
		move.w	(a2)+,$2A(a1)
		move.w	d2,ost_y_pos(a1)
		move.b	d0,$1A(a1)
		bra.s	loc_356A8
; ===========================================================================

loc_356C8:				
		move.b	(a3)+,d0
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.s	locret_356E4
		bsr.s	loc_356E6
		move.b	#$14,$24(a1)
		move.w	(a2)+,ost_x_pos(a1)
		move.w	d2,ost_y_pos(a1)
		move.b	d0,$1A(a1)

locret_356E4:				
		rts	
; ===========================================================================

loc_356E6:				
		move.b	#id_MessageSpecial,ost_id(a1)
		move.l	#Map_35E1E,ost_mappings(a1)
		move.w	#tile_Nem_SpecialMessages+tile_pal3,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
	if FixBugs=0
		; Multi-sprite objects cannot use ost_priority, as it is
		; overwritten by 'ost_subspr3_y_pos'. This object doesn't use the
		; multi-sprite system, but it does share display code with one, so
		; this might as well be removed since it won't be used.
		move.b	#1,ost_priority(a1)
	endc	
		rts	
; ===========================================================================

loc_35706:				
		move.b	(f_ss_trigger_ringstogo).w,(f_ss_hide_ringstogo).w
		bne.s	locret_35714
		bsr.s	loc_35716
		bra.w	loc_357B2
; ===========================================================================

locret_35714:				
		rts	
; ===========================================================================

loc_35716:				
		move.w	(v_rings).w,d0
		cmpi.w	#sonic_alone,(v_player_mode).w
		blt.s	loc_3572A
		beq.s	loc_3572E
		move.w	(v_rings_p2).w,d0
		bra.s	loc_3572E
; ===========================================================================

loc_3572A:				
		add.w	(v_rings_p2).w,d0

loc_3572E:				
		sub.w	(v_ss_ring_requirement).w,d0
		neg.w	d0
		bgt.s	loc_3574E
		moveq	#0,d0
		moveq	#1,d2
		addi_.w	#1,(v_ss_no_ringstogo_lifetime).w
		cmpi.w	#$C,(v_ss_no_ringstogo_lifetime).w
		bcs.s	loc_3577A
		st.b	(f_ss_hide_ringstogo).w
		bra.s	loc_3577A
; ===========================================================================

loc_3574E:				
		moveq	#0,d1
		move.w	d0,d1
		moveq	#0,d0
		cmpi.w	#$64,d1
		blt.s	loc_35764

loc_3575A:				
		addi.w	#$100,d0
		subi.w	#$64,d1
		bgt.s	loc_3575A

loc_35764:				
		divu.w	#$A,d1
		lsl.w	#4,d1
		or.b	d1,d0
		swap	d1
		or.b	d1,d0
		move.w	#0,(v_ss_no_ringstogo_lifetime).w
		sf.b	(f_ss_hide_ringstogo).w

loc_3577A:				
		moveq	#1,d2
		lea	ost_subspr2_x_pos(a0),a1
		move.w	d0,(v_ss_ringstogo_bcd).w
		move.w	d0,d1
		andi.w	#$F,d1
		move.b	d1,ost_subspr2_frame-ost_subspr2_x_pos(a1)
		lsr.w	#4,d0
		beq.s	loc_357AC
		addq.w	#1,d2
		move.w	d0,d1
		andi.w	#$F,d1
		move.b	d1,ost_subspr3_frame-ost_subspr2_x_pos(a1)
		lsr.w	#4,d0
		beq.s	loc_357AC
		addq.w	#1,d2
		andi.w	#$F,d0
		move.b	d0,ost_subspr4_frame-ost_subspr2_x_pos(a1)

loc_357AC:				
		move.b	d2,ost_mainspr_childsprites(a0)
		rts	
; ===========================================================================

loc_357B2:				
		tst.b	(f_ss_no_checkpoint_msg).w
		bne.w	locret_357D0
		tst.b	(f_ss_hide_ringstogo).w
		bne.s	locret_357D0
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#7,d0
		cmpi.b	#6,d0
	if FixBugs
		; Multi-sprite objects cannot use ost_priority, so they
		; must use 'DisplaySprite3' instead of 'DisplaySprite'.
		; This object's 'priority' is overwritten by 'ost_subspr3_y_pos', 
		; causing it to display on the wrong layer.
		bcc.s	locret_357D0
		move.w	#$80*1,d0
		jmp	DisplaySprite3
	else	
		bcs.w	JmpTo44_DisplaySprite
	endc

locret_357D0:				
		rts	
; ===========================================================================

loc_357D2:				
		moveq	#0,d0
		cmpi.w	#2,(v_ss_ringstogo_bcd).w
		bcc.s	loc_357DE
		moveq	#-8,d0

loc_357DE:				
		add.w	$2A(a0),d0
		move.w	d0,ost_x_pos(a0)
		bra.s	loc_357B2
; ===========================================================================

loc_357E8:				
		moveq	#0,d0
		cmpi.w	#2,(v_ss_ringstogo_bcd).w
		bcc.s	loc_357B2
		rts	
; ===========================================================================
byte_357F4:	
		dc.b   0					; 0
		dc.b   1					; 1
		dc.b   1					; 2
		dc.b   1					; 3
		dc.b   2					; 4
		dc.b   4					; 5
		dc.b   6					; 6
		dc.b   8					; 7
		dc.b   9					; 8
		dc.b $FF					; 9
; ===========================================================================

loc_357FE:				
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.s	loc_3583C
		move.w	$2C(a0),d0
		move.b	byte_357F4(pc,d0.w),$1A(a0)
		bmi.w	loc_358C4
		addi_.w	#1,$2C(a0)
		moveq	#0,d0
		move.b	$2A(a0),d0
		add.w	d0,d0
		add.w	$30(a0),d0
		move.b	byte_35846(pc,d0.w),9(a0)
		move.b	byte_35846+1(pc,d0.w),$D(a0)
		addi.w	#$E,$30(a0)
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3583C:				
		tst.b	$1A(a0)
		bpl.w	JmpTo44_DisplaySprite
		rts	
; ===========================================================================
byte_35846:	
		dc.b $F6,$F6					; 0
		dc.b $70,$5E					; 2
		dc.b $76,$58					; 4
		dc.b $7E,$56					; 6
		dc.b $88,$58					; 8
		dc.b $8E,$5E					; 10
		dc.b $F6,$F6					; 12
		dc.b $F6,$F6					; 14
		dc.b $6D,$5A					; 16
		dc.b $74,$54					; 18
		dc.b $7E,$50					; 20
		dc.b $8A,$54					; 22
		dc.b $92,$5A					; 24
		dc.b $F6,$F6					; 26
		dc.b $F6,$F6					; 28
		dc.b $6A,$58					; 30
		dc.b $72,$50					; 32
		dc.b $7E,$4C					; 34
		dc.b $8C,$50					; 36
		dc.b $94,$58					; 38
		dc.b $F6,$F6					; 40
		dc.b $F6,$F6					; 42
		dc.b $68,$56					; 44
		dc.b $70,$4C					; 46
		dc.b $7E,$48					; 48
		dc.b $8E,$4C					; 50
		dc.b $96,$56					; 52
		dc.b $F6,$F6					; 54
		dc.b $62,$5E					; 56
		dc.b $66,$50					; 58
		dc.b $70,$46					; 60
		dc.b $7E,$42					; 62
		dc.b $8E,$46					; 64
		dc.b $98,$50					; 66
		dc.b $9C,$5E					; 68
		dc.b $5C,$5A					; 70
		dc.b $62,$4A					; 72
		dc.b $70,$3E					; 74
		dc.b $7E,$38					; 76
		dc.b $8E,$3E					; 78
		dc.b $9C,$4A					; 80
		dc.b $A2,$5A					; 82
		dc.b $54,$54					; 84
		dc.b $5A,$3E					; 86
		dc.b $6A,$30					; 88
		dc.b $7E,$2A					; 90
		dc.b $94,$30					; 92
		dc.b $A4,$3E					; 94
		dc.b $AA,$54					; 96
		dc.b $42,$4A					; 98
		dc.b $4C,$28					; 100
		dc.b $62,$12					; 102
		dc.b $7E, $A					; 104
		dc.b $9C,$12					; 106
		dc.b $B2,$28					; 108
		dc.b $BC,$4A					; 110
		dc.b $16,$26					; 112
		dc.b $28,$FC					; 114
		dc.b $EC,$EC					; 116
		dc.b $EC,$EC					; 118
		dc.b $EC,$EC					; 120
		dc.b $D6,$FC					; 122
		dc.b $E8,$26					; 124
; ===========================================================================

loc_358C4:				
		cmpi.w	#$E8,ost_x_pos(a0)
		bne.w	JmpTo63_DeleteObject
		moveq	#0,d0
		bsr.w	loc_35534
		sf.b	(f_ss_checkpoint_rainbow).w
		st.b	(f_ss_no_checkpoint_msg).w
		tst.b	(f_ss_2p).w
		beq.w	loc_35978
		move.w	#$A1,d0	
		jsr	PlaySound
		addi.b	#$10,(v_ss_2p_bcd_score).w
		moveq	#0,d6
		addi_.b	#1,(v_special_act).w
		move.w	#$C,d0
		move.w	(v_rings).w,d2
		cmp.w	(v_rings_p2).w,d2
		bgt.s	loc_3592A
		beq.s	loc_35942
		subi.b	#$10,(v_ss_2p_bcd_score).w
		addi_.b	#1,(v_ss_2p_bcd_score).w
		move.w	#$E,d0
		tst.b	(v_console_region).w
		bpl.s	loc_35926
		move.w	#$14,d0

loc_35926:				
		move.w	#$2000,d6

loc_3592A:				
		move.w	#$80,d3	
		bsr.w	loc_35AB6
		add.w	d6,ost_tile(a1)
		add.w	d6,ost_tile(a2)
		bsr.w	loc_35DAA
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

loc_35942:				
		subi.b	#$10,(v_ss_2p_bcd_score).w
		move.w	#$10,d0
		bsr.w	loc_35DAA
		cmpi.b	#3,(v_special_act).w
		beq.s	loc_35966
		move.w	#$46,$2A(a0)
		move.b	#$A,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_35966:				
		bsr.w	loc_35A7A
		move.w	#$46,$2A(a0)
		move.b	#$C,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_35978:				
		move.w	#6,d1
		move.w	#$ED,d0	
		move.w	(v_rings).w,d2
		add.w	(v_rings_p2).w,d2
		cmp.w	(v_ss_ring_requirement).w,d2
		blt.s	loc_35996
		move.w	#4,d1
		move.w	#$A1,d0	

loc_35996:				
		jsr	PlaySound
		move.w	d1,d0
		bsr.w	loc_35D52
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

loc_359A6:				
		subi_.w	#1,$2A(a0)
		beq.s	loc_359B0
		rts	
; ===========================================================================

loc_359B0:				
		move.w	#$A,d0					; MOST RINGS WINS
		bsr.w	loc_35DAA
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

loc_359BC:				
		subi_.w	#1,$2A(a0)
		beq.s	loc_359C6
		rts	
; ===========================================================================

loc_359C6:				
		st.b	(f_ss_chk_rings).w
		bra.w	loc_361CC
; ===========================================================================

loc_359CE:				
		cmpi.b	#$15,$1A(a0)
		bne.s	loc_35A1A
		move.w	$30(a0),d0
		tst.b	$2E(a0)
		bne.s	loc_359FE
		subi_.w	#1,ost_y_pos(a0)
		subi_.w	#4,d0
		cmp.w	ost_y_pos(a0),d0
		blt.s	loc_35A1A
		addi_.w	#1,d0
		move.w	d0,ost_y_pos(a0)
		st.b	$2E(a0)
		bra.s	loc_35A1A
; ===========================================================================

loc_359FE:				
		addi_.w	#1,ost_y_pos(a0)
		addi_.w	#4,d0
		cmp.w	ost_y_pos(a0),d0
		bgt.s	loc_35A1A
		subi_.w	#1,d0
		move.w	d0,ost_y_pos(a0)
		sf.b	$2E(a0)

loc_35A1A:				
		subi_.w	#1,$2A(a0)
		bne.w	JmpTo44_DisplaySprite
		tst.b	$2F(a0)
		beq.s	loc_35A42

loc_35A2A:				
		move.w	#$F9,d0	
		jsr	(PlayMusic).l
		move.w	#$30,$2A(a0)
		move.b	#$C,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_35A42:				
		cmpi.b	#$15,$1A(a0)
		bne.w	JmpTo63_DeleteObject
		tst.w	$30(a0)
		beq.w	JmpTo63_DeleteObject
		tst.b	(f_ss_2p).w
		beq.s	loc_35A72
		bsr.w	loc_35A7A
		cmpi.b	#3,(v_special_act).w
		beq.s	loc_35A2A
		move.w	#$A,d0
		bsr.w	loc_35DAA
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

loc_35A72:				
		bsr.w	loc_35CE2
		jmpto	DeleteObject,JmpTo63_DeleteObject
; ===========================================================================

loc_35A7A:				
		lea	(v_ss_2p_ring_buffer).w,a3
		moveq	#0,d0
		move.b	(v_special_act).w,d0
		subq.w	#1,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(v_rings).w,(a3,d0.w)
		move.w	(v_rings_p2).w,2(a3,d0.w)
		move.w	#0,(v_rings).w
		move.w	#0,(v_rings_p2).w
		moveq	#0,d0
		move.w	d0,($FFFFB03C).w
		move.b	d0,(v_ost_player1+ost_top_solid_bit).w
		move.w	d0,($FFFFB07C).w
		move.b	d0,(v_ost_player2+ost_top_solid_bit).w
		rts	
; ===========================================================================

loc_35AB6:				
		move.w	#$48,d4
		tst.b	(f_ss_2p).w
		beq.s	loc_35AC4
		move.w	#$1C,d4

loc_35AC4:				
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.w	locret_35B58
		move.b	#id_MessageSpecial,ost_id(a1)
		move.b	#6,$24(a1)
		move.l	#Map_35E1E,ost_mappings(a1)
		move.w	#tile_Nem_SpecialMessages+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#1,$18(a1)
		move.w	d3,ost_x_pos(a1)
		move.w	d4,ost_y_pos(a1)
		move.w	#$46,$2A(a1)
		move.b	#$14,$1A(a1)
		movea.l	a1,a2
		jsrto	FindFreeObjSpecial,JmpTo2_FindFreeObjSpecial
		bne.s	locret_35B58
		move.b	#id_MessageSpecial,ost_id(a1)
		move.b	#6,$24(a1)
		move.l	#Map_35E1E,ost_mappings(a1)
		move.w	#tile_Nem_SpecialMessages+tile_pal2,ost_tile(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#0,$18(a1)
		move.w	d3,ost_x_pos(a1)
		move.w	d4,ost_y_pos(a1)
		move.w	d4,$30(a1)
		move.w	#$46,$2A(a1)
		move.b	#$15,$1A(a1)
		cmpi.w	#6,d0
		bne.s	locret_35B58
		st.b	$2F(a1)
		bset	#render_yflip_bit,ost_render(a1)

locret_35B58:				
		rts	
; ===========================================================================

loc_35B5A:				
		subi_.w	#1,$2A(a0)
		bne.w	JmpTo44_DisplaySprite
		cmpi.b	#$13,$1A(a0)
		bgt.w	JmpTo63_DeleteObject
		move.b	#8,ost_primary_routine(a0)
		move.w	#8,$14(a0)
		move.w	ost_x_pos(a0),d1
		subi.w	#$80,d1	
		move.w	ost_y_pos(a0),d2
		subi.w	#$70,d2
		jsrto	CalcAngle,JmpTo_CalcAngle
		move.b	d0,$26(a0)
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_35B96:				
		moveq	#0,d0
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo14_CalcSine
		muls.w	$14(a0),d0
		muls.w	$14(a0),d1
		asr.w	#8,d0
		asr.w	#8,d1
		add.w	d1,ost_x_pos(a0)
		add.w	d0,ost_y_pos(a0)
		cmpi.w	#0,ost_x_pos(a0)
		blt.w	JmpTo63_DeleteObject
		cmpi.w	#$100,ost_x_pos(a0)
		bgt.w	JmpTo63_DeleteObject
		cmpi.w	#0,ost_y_pos(a0)
		blt.w	JmpTo63_DeleteObject
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_35BD6:				
		jsrto	FindNextFreeObjSpecial,JmpTo_FindNextFreeObjSpecial
		bne.s	locret_35C12
		move.b	d0,$1A(a1)
		move.l	#Map_obj5F_b,ost_mappings(a1)
		move.w	#tile_Nem_SpecialHUD+tile_pal3,ost_tile(a1)
		move.b	#id_MessageSpecial,ost_id(a1)
		move.b	#4,$24(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#1,$18(a1)
		move.w	d1,ost_x_pos(a1)
		move.w	d2,ost_y_pos(a1)
		move.w	#$46,$2A(a1)

locret_35C12:				
		rts	
; ===========================================================================

loc_35C14:				
		lea	off_35C62(pc),a3
		adda.w	(a3,d0.w),a3

loc_35C1C:				
		move.b	(a3)+,d0
		bmi.s	locret_35C60
		jsrto	FindNextFreeObjSpecial,JmpTo_FindNextFreeObjSpecial
		bne.s	locret_35C60
		move.b	d0,$1A(a1)
		move.l	#Map_35E1E,ost_mappings(a1)
		move.w	#tile_Nem_SpecialMessages+tile_pal3,ost_tile(a1)
		move.b	#id_MessageSpecial,ost_id(a1)
		move.b	#4,$24(a1)
		move.b	#render_rel,ost_render(a1)
		move.b	#1,$18(a1)
		move.w	d1,ost_x_pos(a1)
		move.w	d2,ost_y_pos(a1)
		move.w	#$46,$2A(a1)
		addq.w	#8,d1
		bra.s	loc_35C1C
; ===========================================================================

locret_35C60:				
		rts	
; ===========================================================================
off_35C62:	
		dc.w byte_35C86-off_35C62			; 0 
		dc.w byte_35C8A-off_35C62			; 1
		dc.w byte_35C90-off_35C62			; 2
		dc.w byte_35C96-off_35C62			; 3
		dc.w byte_35C9A-off_35C62			; 4
		dc.w byte_35CA1-off_35C62			; 5
		dc.w byte_35CA8-off_35C62			; 6
		dc.w byte_35CAD-off_35C62			; 7
		dc.w byte_35CB3-off_35C62			; 8
		dc.w byte_35CB9-off_35C62			; 9
		dc.w byte_35CBF-off_35C62			; 10
		dc.w byte_35CC4-off_35C62			; 11
		dc.w byte_35CC8-off_35C62			; 12
		dc.w byte_35CCE-off_35C62			; 13
		dc.w byte_35CD3-off_35C62			; 14
		dc.w byte_35CD5-off_35C62			; 15
		dc.w byte_35CD9-off_35C62			; 16
		dc.w byte_35CDB-off_35C62			; 17
byte_35C86:	dc.b   0,  1,  2,$FF				; 0 
byte_35C8A:	dc.b   3,  4,  5,  0,  6,$FF			; 0	
byte_35C90:	dc.b   7,  8,  8,  9,$11,$FF			; 0	
byte_35C96:	dc.b   5,  8,  2,$FF				; 0 
byte_35C9A:	dc.b   1,  5,  8, $A,  0, $B,$FF		; 0 
byte_35CA1:	dc.b  $C,  9, $D, $E,  1,  3,$FF		; 0 
byte_35CA8:	dc.b  $F,  8,  6,  2,$FF			; 0 
byte_35CAD:	dc.b $10,  4,  5,  6,$11,$FF			; 0	
byte_35CB3:	dc.b   6,  8,  5,  4,  7,$FF			; 0	
byte_35CB9:	dc.b  $F,  4,  9,  1,  6,$FF			; 0	
byte_35CBF:	dc.b   2,  4,  1,$11,$FF			; 0 
byte_35CC4:	dc.b $10,  4,  5,$FF				; 0 
byte_35CC8:	dc.b   2,$10,  4,  7,  1,$FF			; 0	
byte_35CCE:	dc.b  $D,  9,  9,$11,$FF			; 0 
byte_35CD3:	dc.b $11,$FF					; 0 
byte_35CD5:	dc.b $12,$12,$12,$FF				; 0 
byte_35CD9:	dc.b $13,$FF					; 0 
byte_35CDB:	dc.b   2, $D,  4,  9,  6,$FF			; 0	
		dc.b   0					;  
; ===========================================================================

loc_35CE2:				
		moveq	#0,d0
		move.w	#$54,d1
		move.w	#$6C,d2
		bsr.w	loc_35C14
		jsrto	SS_StartNewAct,JmpTo_SS_StartNewAct
		move.w	d1,d4
		move.w	d2,d5
		movea.w	d2,a3
		move.w	#$80,d1	
		cmpi.w	#2,d2
		beq.s	loc_35D08
		subi_.w	#8,d1

loc_35D08:				
		move.w	#$6C,d2

loc_35D0C:				
		move.w	d4,d6
		lsr.w	#4,d4
		andi.w	#$F,d6
		move.b	d6,d0
		swap	d5
		bsr.w	loc_35BD6
		subi_.w	#8,d1
		swap	d5
		dbf	d5,loc_35D0C
		moveq	#2,d0
		lea	(off_35DDE).l,a2
		adda.w	(a2,d0.w),a2
		move.w	#$6C,d2
		move.w	#$84,d1	
		cmpa.w	#2,a3
		bne.s	loc_35D44
		addi_.w	#8,d1

loc_35D44:				
		moveq	#0,d0
		move.b	(a2)+,d0
		bmi.s	locret_35D50
		bsr.w	loc_35C14
		bra.s	loc_35D44
; ===========================================================================

locret_35D50:				
		rts	
; ===========================================================================

loc_35D52:				
		move.w	#$80,d3	
		bsr.w	loc_35AB6
		cmpi.w	#sonic_alone,(v_player_mode).w
		ble.s	loc_35D6E
		addi.w	#tile_pal2,ost_tile(a1)
		addi.w	#tile_pal2,ost_tile(a2)

loc_35D6E:				
		move.w	#$74,d1
		move.w	#$68,d2
		lea	(off_35DDE).l,a2
		adda.w	(a2,d0.w),a2
		cmpi.b	#4,d0
		beq.s	loc_35D8A
		move.w	#$5E,d1

loc_35D8A:				
		moveq	#0,d0
		move.b	(a2)+,d0
		bmi.s	locret_35DA8
		cmpi.b	#2,d0
		bne.s	loc_35D9E
		move.w	#$5E,d1
		move.w	#$7E,d2

loc_35D9E:				
		bsr.w	loc_35C14
		addi_.w	#8,d1
		bra.s	loc_35D8A
; ===========================================================================

locret_35DA8:				
		rts	
; ===========================================================================

loc_35DAA:				
		move.w	d0,d3
		subq.w	#8,d3
		lsr.w	#1,d3
		moveq	#0,d1
		move.b	byte_35DD6(pc,d3.w),d1
		move.w	#$48,d2
		lea	(off_35DDE).l,a2
		adda.w	(a2,d0.w),a2

loc_35DC4:				
		moveq	#0,d0
		move.b	(a2)+,d0
		bmi.s	locret_35DD4
		bsr.w	loc_35C14
		addi_.w	#8,d1
		bra.s	loc_35DC4
; ===========================================================================

locret_35DD4:				
		rts	
; ===========================================================================
byte_35DD6:	dc.b $48					; 0
		dc.b $44					; 1
		dc.b $58					; 2
		dc.b $58					; 3
		dc.b $74					; 4
		dc.b $3C					; 5
		dc.b $58					; 6
		dc.b   0					; 7
off_35DDE:	dc.w byte_35DF6-off_35DDE			; 0 
		dc.w byte_35DF7-off_35DDE			; 1
		dc.w byte_35DFA-off_35DDE			; 2
		dc.w byte_35DFC-off_35DDE			; 3
		dc.w byte_35E01-off_35DDE			; 4
		dc.w byte_35E05-off_35DDE			; 5
		dc.w byte_35E09-off_35DDE			; 6
		dc.w byte_35E0C-off_35DDE			; 7
		dc.w byte_35E0F-off_35DDE			; 8
		dc.w byte_35E11-off_35DDE			; 9
		dc.w byte_35E16-off_35DDE			; 10
		dc.w byte_35E19-off_35DDE			; 11
byte_35DF6:	dc.b $FF					; 0 
byte_35DF7:	dc.b   2,$1C,$FF				; 0 
byte_35DFA:	dc.b   4,$FF					; 0 
byte_35DFC:	dc.b   6,  8,  2,$1E,$FF			; 0 
byte_35E01:	dc.b  $A,$20, $A,$FF				; 0 
byte_35E05:	dc.b  $C,  2, $E,$FF				; 0 
byte_35E09:	dc.b $10, $E,$FF				; 0 
byte_35E0C:	dc.b $12, $E,$FF				; 0 
byte_35E0F:	dc.b $14,$FF					; 0 
byte_35E11:	dc.b $16,$18,$16,$1A,$FF			; 0 
byte_35E16:	dc.b $22, $E,$FF				; 0 
byte_35E19:	dc.b   2,$24,$26,$1C,$FF			; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_35E1E:				
		dc.w word_35E4A-Map_35E1E			; 0
		dc.w word_35E54-Map_35E1E			; 1
		dc.w word_35E5E-Map_35E1E			; 2
		dc.w word_35E68-Map_35E1E			; 3
		dc.w word_35E72-Map_35E1E			; 4
		dc.w word_35E7C-Map_35E1E			; 5
		dc.w word_35E86-Map_35E1E			; 6
		dc.w word_35E90-Map_35E1E			; 7
		dc.w word_35E9A-Map_35E1E			; 8
		dc.w word_35EA4-Map_35E1E			; 9
		dc.w word_35EAE-Map_35E1E			; 10
		dc.w word_35EB8-Map_35E1E			; 11
		dc.w word_35EC2-Map_35E1E			; 12
		dc.w word_35ECC-Map_35E1E			; 13
		dc.w word_35ED6-Map_35E1E			; 14
		dc.w word_35EE0-Map_35E1E			; 15
		dc.w word_35EEA-Map_35E1E			; 16
		dc.w word_35EF4-Map_35E1E			; 17
		dc.w word_35EFE-Map_35E1E			; 18
		dc.w word_35F08-Map_35E1E			; 19
		dc.w word_35F12-Map_35E1E			; 20
		dc.w word_35F54-Map_35E1E			; 21
word_35E4A:	dc.w 1			
		dc.w $F801,$8004,$8002,$FFFC			; 0
word_35E54:	dc.w 1			
		dc.w $F801,$8002,$8001,$FFFC			; 0
word_35E5E:	dc.w 1			
		dc.w $F801,$8014,$800A,$FFFC			; 0
word_35E68:	dc.w 1			
		dc.w $F801,$8010,$8008,$FFFC			; 0
word_35E72:	dc.w 1			
		dc.w $F801,$8008,$8004,$FFFC			; 0
word_35E7C:	dc.w 1			
		dc.w $F801,$800C,$8006,$FFFC			; 0
word_35E86:	dc.w 1			
		dc.w $F801,$8012,$8009,$FFFC			; 0
word_35E90:	dc.w 1			
		dc.w $F801,$8000,$8000,$FFFC			; 0
word_35E9A:	dc.w 1			
		dc.w $F801,$806A,$8035,$FFFC			; 0
word_35EA4:	dc.w 1			
		dc.w $F801,$800A,$8005,$FFFC			; 0
word_35EAE:	dc.w 1			
		dc.w $F801,$8016,$800B,$FFFC			; 0
word_35EB8:	dc.w 1			
		dc.w $F801,$8006,$8003,$FFFC			; 0
word_35EC2:	dc.w 1			
		dc.w $F801,$823D,$811E,$FFFC			; 0
word_35ECC:	dc.w 1			
		dc.w $F801,$823F,$811F,$FFFC			; 0
word_35ED6:	dc.w 1			
		dc.w $F801,$8241,$8120,$FFFC			; 0
word_35EE0:	dc.w 1			
		dc.w $F801,$8243,$8121,$FFFC			; 0
word_35EEA:	dc.w 1			
		dc.w $F801,$8245,$8122,$FFFC			; 0
word_35EF4:	dc.w 1			
		dc.w $F801,$8018,$800C,$FFFC			; 0
word_35EFE:	dc.w 1			
		dc.w $F801,$800E,$8007,$FFFC			; 0
word_35F08:	dc.w 1			
		dc.w $FC04,$8247,$8123,$FFF8			; 0
word_35F12:	dc.w 8			
		dc.w $E403,$801A,$800D,$FFD0			; 0
		dc.w $EC0F,$801E,$800F,$FFD8			; 4
		dc.w $EC03,$802E,$8017,$FFF8			; 8
		dc.w  $C0D,$8032,$8019,$FFE0			; 12
		dc.w $EC03,$882E,$8817,	   0			; 16
		dc.w  $C0D,$8832,$8819,	   0			; 20
		dc.w $EC0F,$881E,$880F,	   8			; 24
		dc.w $E403,$881A,$880D,	 $28			; 28
word_35F54:	dc.w 4			
		dc.w $F00B,$803A,$801D,$FFE8			; 0
		dc.w $1008,$8046,$8023,$FFE8			; 4
		dc.w	$A,$8049,$8024,	   0			; 8
		dc.w $E806,$8052,$8029,	   0			; 12
; ===========================================================================

loc_35F76:				
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	Pal_SSEmeralds(pc,d0.w),($FFFFFB76).w
		move.w	Pal_SSEmeralds+2(pc,d0.w),($FFFFFB78).w
		move.w	Pal_SSEmeralds+4(pc,d0.w),($FFFFFB7A).w
		rts	
; ===========================================================================
		incfile Pal_SSEmeralds
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 59 - Special Stage Chaos Emeralds
; ----------------------------------------------------------------------------

EmeraldSpecial:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_35FCA(pc,d0.w),d1
		jmp	off_35FCA(pc,d1.w)
; ===========================================================================
off_35FCA:	dc.w loc_35FD4-off_35FCA			; 0 
		dc.w loc_36022-off_35FCA
		dc.w loc_3533A-off_35FCA
		dc.w loc_36160-off_35FCA
		dc.w loc_36172-off_35FCA
; ===========================================================================

loc_35FD4:				
		st.b	(f_ss_no_checkpoint_msg).w
		st.b	(f_ss_pause_only).w
		subi_.w	#1,$2A(a0)
		cmpi.w	#-$3C,$2A(a0)
		beq.s	loc_35FEC
		rts	
; ===========================================================================

loc_35FEC:				
		moveq	#0,d0
		move.b	(v_special_stage).w,d0
		bsr.s	loc_35F76
		addq.b	#2,ost_primary_routine(a0)
		move.l	#Map_3625A,ost_mappings(a0)
		move.w	#tile_Nem_SpecialEmerald+tile_pal4,ost_tile(a0)
		move.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.w	#$36,$30(a0)
		move.b	#$40,$26(a0)
		bsr.w	loc_3529C

loc_36022:				
		bsr.w	loc_360F0
		bsr.w	loc_3512A
		bsr.w	loc_3603C
		lea	(off_36228).l,a1
		bsr.w	loc_3539E
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================

loc_3603C:				
		move.w	d7,-(sp)
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		moveq	#0,d5
		moveq	#0,d6
		moveq	#0,d7
		movea.l	(v_ss_ctrl_record_buffer_end).w,a1
		adda_.l	#2,a1
		move.w	$30(a0),d0
		subq.w	#1,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.b	(a1,d0.w),d2
		move.b	1(a1,d0.w),d3
		move.b	2(a1,d0.w),d4
		move.b	3(a1,d0.w),d5
		move.w	d5,d6
		swap	d5
		move.w	d6,d5
		move.w	d4,d6
		swap	d4
		move.w	d6,d4
		bpl.s	loc_36088
		cmpi.b	#$48,d3
		bcs.s	loc_36088
		ext.w	d3

loc_36088:				
		move.w	d4,d6
		add.w	d4,d4
		add.w	d6,d4
		lsr.w	#2,d4
		move.w	d5,d6
		add.w	d5,d5
		add.w	d6,d5
		lsr.w	#2,d5
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo14_CalcSine
		muls.w	d4,d1
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,ost_x_pos(a0)
		move.w	d0,ost_y_pos(a0)
		move.b	d1,$3A(a0)
		move.b	d0,$3B(a0)
		swap	d4
		swap	d5
		movea.l	$34(a0),a1
		move.b	$26(a0),d0
		jsrto	CalcSine,JmpTo14_CalcSine
		move.w	d4,d6
		lsr.w	#2,d6
		add.w	d6,d4
		muls.w	d4,d1
		move.w	d5,d6
		asr.w	#2,d6
		add.w	d6,d5
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,ost_x_pos(a1)
		move.w	d0,ost_y_pos(a1)
		move.w	(sp)+,d7
		rts	
; ===========================================================================

loc_360F0:				
		cmpi.b	#3,$1C(a0)
		bcs.s	locret_36140
		tst.b	$3E(a0)
		bne.s	loc_3610C
		move.w	#$F9,d0	
		jsr	(PlayMusic).l
		st.b	$3E(a0)

loc_3610C:				
		cmpi.b	#6,$1C(a0)
		bcs.s	locret_36140
		move.w	(v_rings).w,d2
		add.w	(v_rings_p2).w,d2
		cmp.w	(v_ss_ring_requirement).w,d2
		blt.s	loc_36142
		cmpi.b	#9,$1C(a0)
		bcs.s	locret_36140
		move.w	#$63,$2A(a0)
		move.b	#8,ost_primary_routine(a0)
		move.w	#$9D,d0	
		jsr	(PlayMusic).l

locret_36140:				
		rts	
; ===========================================================================

loc_36142:				
		move.l	#0,(v_ss_new_speed_factor).w
		move.b	#6,ost_primary_routine(a0)
		move.w	#$4F,$2A(a0)
		move.w	#6,d0
		bsr.w	loc_35D6E
		rts	
; ===========================================================================

loc_36160:				
		subi_.w	#1,$2A(a0)
		bpl.w	JmpTo44_DisplaySprite
		st.b	(f_ss_chk_rings).w
		bra.w	loc_361CC
; ===========================================================================

loc_36172:				
		subi_.w	#1,$2A(a0)
		bpl.s	loc_361A4
		moveq	#0,d0
		move.b	(v_special_stage).w,d0
		lea	(v_emerald_list).w,a0
		st.b	(a0,d0.w)
		st.b	(f_got_emerald).w
		addi_.b	#1,(v_special_stage).w
		addi_.b	#1,(v_emeralds).w
		st.b	(f_ss_chk_rings).w
		bsr.w	loc_361CC
		move.l	(sp)+,d0
		rts	
; ===========================================================================

loc_361A4:				
		addi_.b	#1,$3C(a0)
		moveq	#0,d0
		moveq	#0,d2
		move.b	$3B(a0),d2
		move.b	$3C(a0),d0
		lsr.w	#2,d0
		andi.w	#3,d0
		add.b	byte_361C8(pc,d0.w),d2
		move.w	d2,ost_y_pos(a0)
		bra.w	JmpTo44_DisplaySprite
; ===========================================================================
byte_361C8:	dc.b $FF					; 0
		dc.b   0					; 1
		dc.b   1					; 2
		dc.b   0					; 3
; ===========================================================================

loc_361CC:				
		movea.l	#$FFB000,a1
		move.w	#$1FF,d0
		moveq	#0,d1

loc_361D8:				
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		dbf	d0,loc_361D8

		lea	(v_sprite_buffer).w,a1			; clear_ram
		moveq	#0,d0
		move.w	#$A0,d1	
	loc_361EE:				
		move.l	d0,(a1)+
		dbf	d1,loc_361EE
		rts	
; ===========================================================================
		; Unused/dead code; a0 = object
		cmpi.b	#$B,(v_ss_track_drawing_index).w
		bcs.s	loc_36208
		subi.l	#$4445,$30(a0)
		bra.s	loc_36210
; ===========================================================================

loc_36208:				
		subi.l	#$4444,$30(a0)

loc_36210:				
		move.w	$30(a0),d0
		cmpi.w	#$1D,d0
		ble.s	loc_3621C
		moveq	#$1E,d0

loc_3621C:				
		lea_	byte_35180,a1
		move.b	(a1,d0.w),$1C(a0)
		rts	
	
; end of unused/dead code	
; ===========================================================================
off_36228:	dc.w byte_3623C-off_36228			; 0 
		dc.w byte_3623F-off_36228			; 1
		dc.w byte_36242-off_36228			; 2
		dc.w byte_36245-off_36228			; 3
		dc.w byte_36248-off_36228			; 4
		dc.w byte_3624B-off_36228			; 5
		dc.w byte_3624E-off_36228			; 6
		dc.w byte_36251-off_36228			; 7
		dc.w byte_36254-off_36228			; 8
		dc.w byte_36257-off_36228			; 9
byte_3623C:	dc.b  $B,  0,$FF				; 0 
byte_3623F:	dc.b  $B,  1,$FF				; 0 
byte_36242:	dc.b  $B,  2,$FF				; 0 
byte_36245:	dc.b  $B,  3,$FF				; 0 
byte_36248:	dc.b  $B,  4,$FF				; 0 
byte_3624B:	dc.b  $B,  5,$FF				; 0 
byte_3624E:	dc.b  $B,  6,$FF				; 0 
byte_36251:	dc.b  $B,  7,$FF				; 0 
byte_36254:	dc.b  $B,  8,$FF				; 0 
byte_36257:	dc.b  $B,  9,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3625A:				
		dc.w word_3626E-Map_3625A			; 0
		dc.w word_36278-Map_3625A			; 1
		dc.w word_36282-Map_3625A			; 2
		dc.w word_3628C-Map_3625A			; 3
		dc.w word_36296-Map_3625A			; 4
		dc.w word_362A0-Map_3625A			; 5
		dc.w word_362AA-Map_3625A			; 6
		dc.w word_362B4-Map_3625A			; 7
		dc.w word_362BE-Map_3625A			; 8
		dc.w word_362C8-Map_3625A			; 9
word_3626E:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC			; 0
word_36278:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC			; 0
word_36282:	dc.w 1			
		dc.w $FC00,$8002,$8001,$FFFC			; 0
word_3628C:	dc.w 1			
		dc.w $F805,$8003,$8001,$FFF8			; 0
word_36296:	dc.w 1			
		dc.w $F805,$8007,$8003,$FFF8			; 0
word_362A0:	dc.w 1			
		dc.w $F805,$800B,$8005,$FFF8			; 0
word_362AA:	dc.w 1			
		dc.w $F805,$800F,$8007,$FFF8			; 0
word_362B4:	dc.w 1			
		dc.w $F40A,$8013,$8009,$FFF4			; 0
word_362BE:	dc.w 1			
		dc.w $F40A,$801C,$800E,$FFF4			; 0
word_362C8:	dc.w 1			
		dc.w $F40A,$8025,$8012,$FFF4			; 0
off_362D2:	dc.w byte_362E8-off_362D2			; 0 
		dc.w byte_362EE-off_362D2			; 1
		dc.w byte_362F4-off_362D2			; 2
		dc.w byte_362FA-off_362D2			; 3
		dc.w byte_36300-off_362D2			; 4
		dc.w byte_36306-off_362D2			; 5
		dc.w byte_3630C-off_362D2			; 6
		dc.w byte_36312-off_362D2			; 7
		dc.w byte_36318-off_362D2			; 8
		dc.w byte_3631E-off_362D2			; 9
		dc.w byte_36324-off_362D2			; 10
byte_362E8:	dc.b   5,  0, $A,$14, $A,$FF			; 0	
byte_362EE:	dc.b   5,  1, $B,$15, $B,$FF			; 0	
byte_362F4:	dc.b   5,  2, $C,$16, $C,$FF			; 0	
byte_362FA:	dc.b   5,  3, $D,$17, $D,$FF			; 0	
byte_36300:	dc.b   5,  4, $E,$18, $E,$FF			; 0	
byte_36306:	dc.b   5,  5, $F,$19, $F,$FF			; 0	
byte_3630C:	dc.b   5,  6,$10,$1A,$10,$FF			; 0	
byte_36312:	dc.b   5,  7,$11,$1B,$11,$FF			; 0	
byte_36318:	dc.b   5,  8,$12,$1C,$12,$FF			; 0	
byte_3631E:	dc.b   5,  9,$13,$1D,$13,$FF			; 0	
byte_36324:	dc.b   1,$1E,$1F,$20,$FF,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3632A:				
		dc.w word_3636C-Map_3632A			; 0
		dc.w word_36376-Map_3632A			; 1
		dc.w word_36380-Map_3632A			; 2
		dc.w word_3638A-Map_3632A			; 3
		dc.w word_36394-Map_3632A			; 4
		dc.w word_3639E-Map_3632A			; 5
		dc.w word_363A8-Map_3632A			; 6
		dc.w word_363B2-Map_3632A			; 7
		dc.w word_363BC-Map_3632A			; 8
		dc.w word_363C6-Map_3632A			; 9
		dc.w word_363D0-Map_3632A			; 10
		dc.w word_363DA-Map_3632A			; 11
		dc.w word_363E4-Map_3632A			; 12
		dc.w word_363EE-Map_3632A			; 13
		dc.w word_363F8-Map_3632A			; 14
		dc.w word_36402-Map_3632A			; 15
		dc.w word_3640C-Map_3632A			; 16
		dc.w word_36416-Map_3632A			; 17
		dc.w word_36420-Map_3632A			; 18
		dc.w word_3642A-Map_3632A			; 19
		dc.w word_36434-Map_3632A			; 20
		dc.w word_3643E-Map_3632A			; 21
		dc.w word_36448-Map_3632A			; 22
		dc.w word_36452-Map_3632A			; 23
		dc.w word_3645C-Map_3632A			; 24
		dc.w word_36466-Map_3632A			; 25
		dc.w word_36470-Map_3632A			; 26
		dc.w word_3647A-Map_3632A			; 27
		dc.w word_36484-Map_3632A			; 28
		dc.w word_3648E-Map_3632A			; 29
		dc.w word_36498-Map_3632A			; 30
		dc.w word_364AA-Map_3632A			; 31
		dc.w word_364BC-Map_3632A			; 32
word_3636C:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC			; 0
word_36376:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC			; 0
word_36380:	dc.w 1			
		dc.w $FC00,$8002,$8001,$FFFC			; 0
word_3638A:	dc.w 1			
		dc.w $F805,$8003,$8001,$FFF8			; 0
word_36394:	dc.w 1			
		dc.w $F805,$8007,$8003,$FFF8			; 0
word_3639E:	dc.w 1			
		dc.w $F805,$800B,$8005,$FFF8			; 0
word_363A8:	dc.w 1			
		dc.w $F805,$800F,$8007,$FFF8			; 0
word_363B2:	dc.w 1			
		dc.w $F40A,$8013,$8009,$FFF4			; 0
word_363BC:	dc.w 1			
		dc.w $F40A,$801C,$800E,$FFF4			; 0
word_363C6:	dc.w 1			
		dc.w $F40A,$8025,$8012,$FFF4			; 0
word_363D0:	dc.w 1			
		dc.w $FC00,$802E,$8017,$FFFC			; 0
word_363DA:	dc.w 1			
		dc.w $FC00,$802F,$8017,$FFFC			; 0
word_363E4:	dc.w 1			
		dc.w $FC00,$8030,$8018,$FFFC			; 0
word_363EE:	dc.w 1			
		dc.w $F801,$8031,$8018,$FFFC			; 0
word_363F8:	dc.w 1			
		dc.w $F805,$8033,$8019,$FFF8			; 0
word_36402:	dc.w 1			
		dc.w $F805,$8037,$801B,$FFF8			; 0
word_3640C:	dc.w 1			
		dc.w $F805,$803B,$801D,$FFF8			; 0
word_36416:	dc.w 1			
		dc.w $F406,$803F,$801F,$FFF8			; 0
word_36420:	dc.w 1			
		dc.w $F406,$8045,$8022,$FFF8			; 0
word_3642A:	dc.w 1			
		dc.w $F40A,$804B,$8025,$FFF4			; 0
word_36434:	dc.w 1			
		dc.w $FC00,$8054,$802A,$FFFC			; 0
word_3643E:	dc.w 1			
		dc.w $FC00,$8055,$802A,$FFFC			; 0
word_36448:	dc.w 1			
		dc.w $FC00,$8056,$802B,$FFFC			; 0
word_36452:	dc.w 1			
		dc.w $F801,$8057,$802B,$FFFC			; 0
word_3645C:	dc.w 1			
		dc.w $F801,$8059,$802C,$FFFC			; 0
word_36466:	dc.w 1			
		dc.w $F801,$805B,$802D,$FFFC			; 0
word_36470:	dc.w 1			
		dc.w $F801,$805D,$802E,$FFFC			; 0
word_3647A:	dc.w 1			
		dc.w $F402,$805F,$802F,$FFFC			; 0
word_36484:	dc.w 1			
		dc.w $F402,$8062,$8031,$FFFC			; 0
word_3648E:	dc.w 1			
		dc.w $F402,$8065,$8032,$FFFC			; 0
word_36498:	dc.w 2			
		dc.w $F007,$8000,$8000,$FFF0			; 0
		dc.w $F805,$8008,$8004,	   0			; 4
word_364AA:	dc.w 2			
		dc.w $F00E,$800C,$8006,$FFF0			; 0
		dc.w  $800,$8018,$800C,$FFF8			; 4
word_364BC:	dc.w 2			
		dc.w $F002,$8019,$800C,$FFF0			; 0
		dc.w $F80A,$801C,$800E,$FFF8			; 4
off_364CE:	dc.w byte_364E4-off_364CE			; 0 
		dc.w byte_364E7-off_364CE			; 1
		dc.w byte_364EA-off_364CE			; 2
		dc.w byte_364ED-off_364CE			; 3
		dc.w byte_364F0-off_364CE			; 4
		dc.w byte_364F3-off_364CE			; 5
		dc.w byte_364F6-off_364CE			; 6
		dc.w byte_364F9-off_364CE			; 7
		dc.w byte_364FC-off_364CE			; 8
		dc.w byte_364FF-off_364CE			; 9
		dc.w byte_36502-off_364CE			; 10
byte_364E4:	dc.b  $B,  0,$FF				; 0 
byte_364E7:	dc.b  $B,  1,$FF				; 0 
byte_364EA:	dc.b  $B,  2,$FF				; 0 
byte_364ED:	dc.b  $B,  3,$FF				; 0 
byte_364F0:	dc.b  $B,  4,$FF				; 0 
byte_364F3:	dc.b  $B,  5,$FF				; 0 
byte_364F6:	dc.b  $B,  6,$FF				; 0 
byte_364F9:	dc.b  $B,  7,$FF				; 0 
byte_364FC:	dc.b  $B,  8,$FF	
byte_364FF:	dc.b  $B,  9,$FF				; 0 
byte_36502:	dc.b   2, $A, $B, $C,$FF,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_36508:				
		dc.w word_36522-Map_36508			; 0
		dc.w word_3652C-Map_36508			; 1
		dc.w word_36536-Map_36508			; 2
		dc.w word_36540-Map_36508			; 3
		dc.w word_3654A-Map_36508			; 4
		dc.w word_36554-Map_36508			; 5
		dc.w word_3655E-Map_36508			; 6
		dc.w word_36568-Map_36508			; 7
		dc.w word_36572-Map_36508			; 8
		dc.w word_3657C-Map_36508			; 9
		dc.w word_36586-Map_36508			; 10
		dc.w word_36590-Map_36508			; 11
		dc.w word_365A2-Map_36508			; 12
word_36522:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC			; 0
word_3652C:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC			; 0
word_36536:	dc.w 1			
		dc.w $F805,$8002,$8001,$FFF8			; 0
word_36540:	dc.w 1			
		dc.w $F805,$8006,$8003,$FFF8			; 0
word_3654A:	dc.w 1			
		dc.w $F805,$800A,$8005,$FFF8			; 0
word_36554:	dc.w 1			
		dc.w $F40A,$800E,$8007,$FFF4			; 0
word_3655E:	dc.w 1			
		dc.w $F40A,$8017,$800B,$FFF4			; 0
word_36568:	dc.w 1			
		dc.w $F00F,$8020,$8010,$FFF0			; 0
word_36572:	dc.w 1			
		dc.w $F00F,$8030,$8018,$FFF0			; 0
word_3657C:	dc.w 1			
		dc.w $F00F,$8040,$8020,$FFF0			; 0
word_36586:	dc.w 1			
		dc.w $F00F,$8000,$8000,$FFF0			; 0
word_36590:	dc.w 2			
		dc.w $E80F,$8010,$8008,$FFE8			; 0
		dc.w $E80F,$8010,$8008,$FFF8			; 4
word_365A2:	dc.w 3			
		dc.w $E00F,$8020,$8010,$FFD8			; 0
		dc.w $D80F,$9020,$9010,$FFF0			; 4
		dc.w $E00F,$8820,$8810,	   8			; 8
; ===========================================================================

JmpTo44_DisplaySprite:				
		jmp	DisplaySprite				; for some reason, this was not changed in Revision 2
		
		
	if RemoveJmpTos=0
JmpTo63_DeleteObject:				
		jmp	DeleteObject
JmpTo24_AnimateSprite:				
		jmp	AnimateSprite
JmpTo_SS_StartNewAct:				
		jmp	SS_StartNewAct
JmpTo_CalcAngle:			
		jmp	CalcAngle
JmpTo14_CalcSine:				
		jmp	CalcSine
JmpTo7_ObjectFall:				
		jmp	ObjectFall
JmpTo_FindNextFreeObjSpecial:				
		jmp	FindNextFreeObjSpecial
JmpTo2_FindFreeObjSpecial:				
		jmp	FindFreeObjSpecial

		align 4
	endc
	
; ===========================================================================	
; ---------------------------------------------------------------------------
; Subroutine to	load OST data for an object from a subtypedata declaration.
; Requires subtype to be set by the parent object or subroutine.
; Only objects 8C and higher use this, strangely enough.

; input: 
;	a0 = object's ost slot

;	uses d0.w, a0, a1
; ---------------------------------------------------------------------------	

LoadSubtypeData:				
		moveq	#0,d0
		move.b	ost_subtype(a0),d0

LoadSubtypeData_Part2:				
		move.w	SubtypeData_Index(pc,d0.w),d0
		lea	SubtypeData_Index(pc,d0.w),a1

LoadSubtypeData_Part3:				
		move.l	(a1)+,ost_mappings(a0)
		move.w	(a1)+,ost_tile(a0)
		jsr	Adjust2PArtPointer
		move.b	(a1)+,d0
		or.b	d0,ost_render(a0)
		move.b	(a1)+,ost_priority(a0)
		move.b	(a1)+,ost_displaywidth(a0)
		move.b	(a1),ost_col_type(a0)
		addq.b	#2,ost_primary_routine(a0)
		rts	
; ===========================================================================
SubtypeData_Index:	index offset(*)
		ptr off_36A3E					; 0 
		ptr off_36CC4					; 1
		ptr off_36CCE					; 2
		ptr off_36CD8					; 3
		ptr off_36EE6					; 4
		ptr off_3707C					; 5
		ptr Rexon					; invalid
		ptr off_3766E					; 7
		ptr off_37764					; 8
		ptr off_37888					; 9
		ptr off_3776E					; 10
		ptr off_37B32					; 11
		ptr off_37B3C					; 12
		ptr off_37B46					; 13
		ptr off_37778					; 14
		ptr off_37D7E					; 15
		ptr off_37782					; 16
		ptr off_37FE8					; 17
		ptr off_382F0					; 18
		ptr off_382FA					; 19
		ptr off_385C0					; 20
		ptr off_385CA					; 21
		ptr off_388AC					; 22
		ptr off_38A86					; 23
		ptr off_3778C					; 24
		ptr off_38CAE					; 25
		ptr off_37796					; 26
		ptr off_391EC					; 27
		ptr off_391F6					; 28
		ptr off_39200					; 29
		ptr off_3920A					; 30
		ptr off_377A0					; 31
		ptr off_393C2					; 32
		ptr off_39576					; 33
		ptr off_39580					; 34
		ptr off_377AA					; 35
		ptr off_39DCE					; 36
		ptr off_377B4					; 37
		ptr SonicSegaScreen_SubtypeData			; 38
		ptr SegaHideTM_SubtypeData			; 39
		ptr off_3AFC8					; 40
		ptr off_3AFC8					; 41
		ptr off_3AFC8					; 42
		ptr off_3BBFE					; 43
		ptr off_3BBFE					; 44
		ptr off_3B322					; 45
		ptr off_3AFD2					; 46
		ptr off_3B322					; 47
		ptr off_3B322					; 48
		ptr off_3B322					; 49
		ptr off_3B3AC					; 50
		ptr off_3B4DE					; 51
		ptr off_3B4DE					; 52
		ptr off_3B818					; 53
		ptr off_3B818					; 54
		ptr off_3B818					; 55
		ptr off_3B818					; 56
		ptr off_3B8DA					; 57
		ptr off_3BA36					; 58
		ptr off_3BB0E					; 59
		ptr off_3BB66					; 60
		ptr off_3BB96					; 61
		ptr off_3BBFE					; 62
		ptr off_3BD24					; 63
		ptr off_3BD24					; 64
		ptr off_3BE2C					; 65
		ptr off_3BECE					; 66
		ptr off_3C08E					; 67
		ptr off_3C276					; 68
		ptr off_3C3B8					; 69
		ptr TornadoSmoke				; invalid
		ptr off_377BE					; 71
		ptr off_3C438					; 72
		ptr off_3CC80					; 73
		ptr off_3CC8A					; 74
		ptr off_3CC94					; 75
		ptr off_3CC94					; 76
		ptr off_3CC94					; 77
		ptr off_3CC94					; 78
		ptr off_3CC94					; 79
		ptr off_3CC9E					; 80
		ptr off_3CCA8					; 81
		ptr off_39DD8					; 82
		ptr off_3D0B2					; 83
		ptr off_3D0BC					; 84
		ptr off_3D0C6					; 85
		ptr off_3D440					; 86
; ===========================================================================

GetClosestPlayer:				
		moveq	#0,d0
		moveq	#0,d1
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a0),d2
		sub.w	ost_x_pos(a1),d2
		move.w	d2,d4
		bpl.s	loc_366EC
		neg.w	d4

loc_366EC:				
		lea	($FFFFB040).w,a2
		move.w	ost_x_pos(a0),d3
		sub.w	ost_x_pos(a2),d3
		move.w	d3,d5
		bpl.s	loc_366FE
		neg.w	d5

loc_366FE:				
		cmp.w	d5,d4
		bls.s	loc_36706
		movea.l	a2,a1
		move.w	d3,d2

loc_36706:				
		tst.w	d2
		bpl.s	loc_3670C
		addq.w	#2,d0

loc_3670C:				
		move.w	ost_y_pos(a0),d3
		sub.w	ost_y_pos(a1),d3
		bcc.s	locret_36718
		addq.w	#2,d1

locret_36718:				
		rts	
; ===========================================================================

ObjCapSpeed:				
		move.w	ost_x_vel(a0),d2
		bpl.s	loc_3672C
		neg.w	d0
		cmp.w	d0,d2
		bcc.s	loc_36732
		move.w	d0,d2
		bra.w	loc_36732
; ===========================================================================

loc_3672C:				
		cmp.w	d0,d2
		bls.s	loc_36732
		move.w	d0,d2

loc_36732:				
		move.w	ost_y_vel(a0),d3
		bpl.s	loc_36744
		neg.w	d1
		cmp.w	d1,d3
		bcc.s	loc_3674A
		move.w	d1,d3
		bra.w	loc_3674A
; ===========================================================================

loc_36744:				
		cmp.w	d1,d3
		bls.s	loc_3674A
		move.w	d1,d3

loc_3674A:				
		move.w	d2,ost_x_vel(a0)
		move.w	d3,ost_y_vel(a0)
		rts	
; ===========================================================================

ObjMoveStop:				
		moveq	#0,d0
		move.w	d0,ost_x_vel(a0)
		move.w	d0,ost_y_vel(a0)
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to align a child object to its parent with variable x and y offset.
; Used by Grabber and Mecha Sonic

; input:
;	d0 = x offset
;	d1 = y offset
;	a0 = parent object
;	a1 = child object

; output:
;	d2 = new x position
;	d3 = new y position

;	uses d0.w, d1.w, d2.w, d3.w, a0, a1
; ---------------------------------------------------------------------------

AlignChildXY:				
		move.w	ost_x_pos(a0),d2			; d2 = parent's x pos
		add.w	d0,d2					; add offset to get child's x-pos
		move.w	d2,ost_x_pos(a1)			; set child's xpos
		move.w	ost_y_pos(a0),d3			; d3 = parent's y pos	
		add.w	d1,d3					; add offset to get child's y-pos
		move.w	d3,ost_y_pos(a1)			; set child's y pos
		rts	
		
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to adjust an object's position based on the movement of the Tornado
; Used by the Tornado and SCZ badniks
; input:
;	a1 = object

;	uses d0.w, a0
; ---------------------------------------------------------------------------

loc_36776:				
		move.w	(v_tornado_x_vel).w,d0
		add.w	d0,ost_x_pos(a0)		
		move.w	(v_tornado_y_vel).w,d0
		add.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to delete an object if it goes off the left side of the screen.
; Used by SCZ clouds and badniks.
;
; input:
;	a0 = object
;
;	uses d0.w
; ---------------------------------------------------------------------------
DeleteBehindScreen:				
		tst.w	(f_two_player).w			; is it two-player mode? (it never will be in base game)
		beq.s	.chkgone				; if not, branch
		jmp	DisplaySprite

	.chkgone:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		bmi.w	JmpTo64_DeleteObject			; if more than 80 pixels to left of screen, delete
		jmp	DisplaySprite				; else, display
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to set a child object's x and y flip bits based on the parent object.
; Used only by Mecha Sonic and Grabber's legs.

; In the Sonic Classics version of Revision 2, ~(render_xflip|render_yflip)
; and ~(status_xflip|status_yflip) were changed to ~(render_yflip) and ~(status_yflip),
; breaking the x-flipping of the Grabbers' legs and Mecha Sonic's sparks.

; input:
;	a0 = parent object
;	a1 = child object	

; 	uses d0.b, d1.b d2.b, a0, a1 	
; ---------------------------------------------------------------------------	
InheritParentXYFlip:				
		move.b	ost_render(a0),d0			; get child object's render flags
		andi.b	#~(render_xflip|render_yflip),d0	; clear x and y flip bits
		move.b	ost_primary_status(a0),d2		; do the same with the status flags
		andi.b	#~(status_xflip|status_yflip),d2
		move.b	ost_render(a1),d1			; get parent's render flags
		andi.b	#render_xflip|render_yflip,d1		; only need x and y flip bits
		or.b	d1,d0					; merge parent's x and y flip states with rest of child's render flags
		or.b	d1,d2					; same with status flags				
		move.b	d0,ost_render(a0)			; set merged render flags
		move.b	d2,ost_primary_status(a0)		; set merged status flags
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load a child object with child object data, matching
; the parent's x and y coordinates.

; Child object data contains the offset in parent object's OST slot where 
; pointer to child will be stored (word), the id of the child object (byte), 
; and the subtype of the child object (byte).

; input:
;	a0 = address of parent's OST slot
;	a1 = address of child's OST slot (set by call to FindNextFreeObj)
;	a2 = pointer to child object data

;	uses d0.w, a0, a1, a2 
; ---------------------------------------------------------------------------
LoadChild:				
		jsr	FindNextFreeObj				; find the next free OST slot
		bne.s	.fail					; exit if none were found
		move.w	(a2)+,d0				; offset in parent's OST where pointer to child will be stored
		move.w	a1,(a0,d0.w)				; set pointer to child object
		_move.b	(a2)+,ost_id(a1)			; set child's ID
		move.b	(a2)+,ost_subtype(a1)			; set child's subtype
		move.w	a0,ost_parent2(a1)			; set pointer to parent object
		move.w	ost_x_pos(a0),ost_x_pos(a1)		
		move.w	ost_y_pos(a0),ost_y_pos(a1)

	.fail:				
		rts
		
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused subroutine to set an object's x-flip state based on its x-position
; relative to the nearest player. Perhaps would have been used in conjunction
; with object-specific code to make a badnik always face the player?

; input:
;	a0 = object
;	d0 = 0 if player is left from object, 2 if right (set by GetClosestPlayer)
; ---------------------------------------------------------------------------

		bsr.w	GetClosestPlayer			; get nearest player
		bclr	#render_xflip_bit,ost_render(a0)	; clear x-flip bits
		bclr	#status_xflip_bit,ost_primary_status(a0)
		tst.w	d0					; is object to right of nearest player?
		beq.s	.isright				; if so, branch
		bset	#render_xflip_bit,ost_render(a0)	; set x-flip bits
		bset	#status_xflip_bit,ost_primary_status(a0)

	.isright:				
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to create a specified number of moving projectiles.
; Used by Asteron and Mecha Sonic.
;
; input:
;	d2 = subtype, used for object initialization (refer to LoadSubObject)
;	d6 = number of projectiles to create-1
;	a0 = address of parent object
;	a2 = pointer to projectile data
;   
; format:
;   dc.b x_offset, y_offset, x_vel, y_vel, ost_frame, ost_render

; output:
;	d1 = index in list
;	a1 = address of new projectile
;	a3 = points to end of projectile data

; uses d0.w, d1.w, d2.b, a0, a1, a2, a3
; ---------------------------------------------------------------------------
SpawnProjectiles:				
		moveq	#0,d1

	.loop:				
		jsr	FindNextFreeObj				; find free OST slot after parent
		bne.s	.exit					; branch if not found
		_move.b	#id_Projectile,ost_id(a1)		; load projectile object	
		move.b	d2,ost_subtype(a1)			; set subtype
		move.w	ost_x_pos(a0),ost_x_pos(a1)		; align to parent object
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		lea	(SpeedToPos).l,a3			; address of movement subroutine to call
		move.l	a3,$2A(a1)				; set movement type
		lea	(a2,d1.w),a3				; get index in projectile data
		move.b	(a3)+,d0				; x offset
		ext.w	d0
		add.w	d0,ost_x_pos(a1)
		move.b	(a3)+,d0				; y offset
		ext.w	d0
		add.w	d0,ost_y_pos(a1)
		move.b	(a3)+,ost_x_vel(a1)			; set movement values
		move.b	(a3)+,ost_y_vel(a1)
		move.b	(a3)+,ost_frame(a1)			; set mapping frame
		move.b	(a3)+,ost_render(a1)			; set render flags
		addq.w	#6,d1					; advance to next index in projectile data
		dbf	d6,.loop				; repeat until all projectiles have been created

	.exit:				
		rts	
; ===========================================================================
; Custom sprite animation subroutine. Used only by Mecha Sonic.
AnimateSprite2:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_3688C
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)

loc_3688C:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_368B0
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),$1E(a0)
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bmi.s	loc_368B4

loc_368A8:				
		move.b	d0,$1A(a0)
		addq.b	#1,$1B(a0)

loc_368B0:				
		moveq	#0,d0
		rts	
; ===========================================================================

loc_368B4:				
		addq.b	#1,d0
		bne.s	loc_368C8
		move.b	#0,$1B(a0)
		move.b	1(a1),d0
		bsr.s	loc_368A8
		moveq	#1,d0
		rts	
; ===========================================================================

loc_368C8:				
		addq.b	#1,d0
		bne.s	loc_368DE
		addq.b	#2,ost_primary_routine(a0)
		move.b	#0,$1E(a0)
		addq.b	#1,$1B(a0)
		moveq	#1,d0
		rts	
; ===========================================================================

loc_368DE:				
		addq.b	#1,d0
		bne.s	loc_368EA
		addq.b	#2,$25(a0)
		moveq	#1,d0
		rts	
; ===========================================================================

loc_368EA:				
		addq.b	#1,d0
		bne.s	locret_368F6
		move.b	#1,$1E(a0)
		moveq	#1,d0

locret_368F6:				
		rts	
; ===========================================================================
; Delete an object if it goes too far off-screen. Used only by the Tornado.
DeleteOffScreen:				
		tst.w	(f_two_player).w
		beq.s	loc_36904
		jmp	DisplaySprite
; ===========================================================================

loc_36904:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	JmpTo64_DeleteObject
		jmp	DisplaySprite
; ===========================================================================

	if RemoveJmpTos
JmpTo65_DeleteObject:
	endc
		
JmpTo64_DeleteObject:				
		jmp	DeleteObject
		
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8C - Whisp
; ----------------------------------------------------------------------------

Whisp:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36932(pc,d0.w),d1
		jmp	off_36932(pc,d1.w)
; ===========================================================================
off_36932:	dc.w loc_3693C-off_36932			; 0 
		dc.w loc_3694E-off_36932			; 1
		dc.w loc_369A8-off_36932			; 2
		dc.w loc_36958-off_36932			; 3
		dc.w loc_36A26-off_36932			; 4
; ===========================================================================

loc_3693C:				
		bsr.w	LoadSubtypeData
		move.b	#$10,$2A(a0)
		move.b	#4,$2B(a0)
		rts	
; ===========================================================================

loc_3694E:				
		tst.b	ost_render(a0)
		bmi.s	loc_36970
		bra.w	loc_3695E
; ===========================================================================

loc_36958:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_36970

loc_3695E:				
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	DespawnObject
; ===========================================================================

loc_36970:				
		subq.b	#1,$2B(a0)
		bpl.s	loc_36996
		move.b	#8,ost_primary_routine(a0)
		bclr	#0,$22(a0)
		clr.w	ost_y_vel(a0)
		move.w	#-$200,ost_x_vel(a0)
		move.w	#-$200,ost_y_vel(a0)
		bra.w	loc_36A26
; ===========================================================================

loc_36996:				
		move.b	#4,ost_primary_routine(a0)
		move.w	#-$100,ost_y_vel(a0)
		move.b	#$60,$2A(a0)

loc_369A8:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_369F8
		bsr.w	GetClosestPlayer
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_369C2
		bset	#0,$22(a0)

loc_369C2:				
		move.w	word_369F4(pc,d0.w),d2
		add.w	d2,ost_x_vel(a0)
		move.w	word_369F4(pc,d1.w),d2
		add.w	d2,ost_y_vel(a0)
		move.w	#$200,d0
		move.w	d0,d1
		bsr.w	ObjCapSpeed
		jsr	SpeedToPos
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	DespawnObject
; ===========================================================================
word_369F4:	
		dc.w $FFF0					; 0
		dc.w   $10					; 1
; ===========================================================================

loc_369F8:				
		move.b	#6,ost_primary_routine(a0)
		jsr	RandomNumber
		move.l	(v_random).w,d0
		andi.b	#$1F,d0
		move.b	d0,$2A(a0)
		bsr.w	ObjMoveStop
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	DespawnObject
; ===========================================================================

loc_36A26:				
					
		jsr	SpeedToPos
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	DespawnObject
; ===========================================================================
off_36A3E:	dc.l Map_36A4E	
		dc.w $A500
		dc.w $404
		dc.w $C0B
off_36A48:	dc.w byte_36A4A-off_36A48 
byte_36A4A:	dc.b   1,  0,  1,$FF				; 0 
; ------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------
Map_36A4E:				
		dc.w byte_36A52-Map_36A4E			; 0
		dc.w byte_36A64-Map_36A4E			; 1
byte_36A52:	dc.b   0,  2,$F8,  8,  0,  0,  0,  0,$FF,$F4,  0,  8,  0,  3,  0,  1 ; 0
					
		dc.b $FF,$F4					; 16
byte_36A64:	dc.b   0,  2,$F8,  8,  0,  6,  0,  3,$FF,$F4,  0,  8,  0,  3,  0,  1 ; 0
					
		dc.b $FF,$F4					; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8D - Grounder in wall
; ----------------------------------------------------------------------------
GrounderInWall:
GrounderInWall_Dup:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36A84(pc,d0.w),d1
		jmp	off_36A84(pc,d1.w)
; ===========================================================================
off_36A84:	
		dc.w loc_36A90-off_36A84			; 0 
		dc.w loc_36ADC-off_36A84			; 1
		dc.w loc_36B00-off_36A84			; 2
		dc.w loc_36B0E-off_36A84			; 3
		dc.w loc_36B34-off_36A84			; 4
		dc.w loc_36B6A-off_36A84			; 5
; ===========================================================================

loc_36A90:				
		bsr.w	LoadSubtypeData
		bclr	#render_yflip_bit,ost_render(a0)
		beq.s	loc_36AA8
		bclr	#1,$22(a0)
		andi.w	#tile_draw,ost_tile(a0)

loc_36AA8:				
		move.b	#$14,ost_height(a0)
		move.b	#$10,$17(a0)
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_36AC8
		add.w	d1,ost_y_pos(a0)
		move.w	#0,ost_y_vel(a0)

loc_36AC8:				
		_move.b	ost_id(a0),d0
		subi.b	#id_GrounderInWall,d0
		beq.w	loc_36C64
		move.b	#6,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_36ADC:				
		bsr.w	GetClosestPlayer
		tst.w	d2
		bpl.s	loc_36AE6
		neg.w	d2

loc_36AE6:				
		cmpi.w	#$60,d2
		bls.s	loc_36AF0
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36AF0:				
		addq.b	#2,ost_primary_routine(a0)
		st.b	$2B(a0)
		bsr.w	loc_36C2C
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36B00:				
		lea	(off_36CEA).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36B0E:				
		addq.b	#2,ost_primary_routine(a0)
		bsr.w	GetClosestPlayer
		move.w	word_36B30(pc,d0.w),ost_x_vel(a0)
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_36B2C
		bset	#0,$22(a0)

loc_36B2C:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
word_36B30:	
		dc.w $FF00					; 0
		dc.w $100					; 1
; ===========================================================================

loc_36B34:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jsr	FindFloorObj
		cmpi.w	#-1,d1
		blt.s	loc_36B5C
		cmpi.w	#$C,d1
		bge.s	loc_36B5C
		add.w	d1,ost_y_pos(a0)
		lea	(off_36CE2).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36B5C:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$3B,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36B6A:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_36B74
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36B74:				
		move.b	#8,ost_primary_routine(a0)
		neg.w	ost_x_vel(a0)
		bchg	#0,$22(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8F - Wall behind which Grounder hides
; ----------------------------------------------------------------------------

GrounderWall:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36B96(pc,d0.w),d1
		jmp	off_36B96(pc,d1.w)
; ===========================================================================
off_36B96:	dc.w loc_36B9C-off_36B96			; 0 
		dc.w loc_36BA6-off_36B96			; 1
		dc.w loc_36C1C-off_36B96			; 2
; ===========================================================================

loc_36B9C:				
		bsr.w	LoadSubtypeData
		clr.w	ost_tile(a0)
		rts	
; ===========================================================================

loc_36BA6:				
		movea.w	$2C(a0),a1
		tst.b	$2B(a1)
		bne.s	loc_36BB4
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36BB4:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	$2E(a0),d0
		move.b	byte_36BCC(pc,d0.w),ost_x_vel(a0)
		move.b	byte_36BCC+1(pc,d0.w),ost_y_vel(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
byte_36BCC:	dc.b   1,$FE					; 0
		dc.b   1,$FF					; 2
		dc.b $FF,$FE					; 4
		dc.b $FF,$FF					; 6
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 90 - Rocks thrown by Grounder behind wall
; ----------------------------------------------------------------------------

GrounderRocks:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36BE2(pc,d0.w),d1
		jmp	off_36BE2(pc,d1.w)
; ===========================================================================
off_36BE2:	
		dc.w loc_36BE6-off_36BE2			; 0 
		dc.w loc_36C1C-off_36BE2			; 1
; ===========================================================================

loc_36BE6:				
		bsr.w	LoadSubtypeData
		move.w	#tile_Nem_Grounder+tile_pal3,ost_tile(a0)
		move.w	$2E(a0),d0
		move.b	byte_36C12(pc,d0.w),ost_x_vel(a0)
		move.b	byte_36C12+1(pc,d0.w),ost_y_vel(a0)
		lsr.w	#1,d0
		move.b	byte_36C0C(pc,d0.w),$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
byte_36C0C:	dc.b   0					; 0
		dc.b   2					; 1
		dc.b   0					; 2
		dc.b   1					; 3
		dc.b   0					; 4
		dc.b   0					; 5
byte_36C12:	dc.b $FF,$FC					; 0
		dc.b   4,$FD					; 2
		dc.b   2,  0					; 4
		dc.b $FD,$FF					; 6
		dc.b $FD,$FD					; 8
; ===========================================================================

loc_36C1C:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo65_DeleteObject
		jsrto	ObjectFall,JmpTo8_ObjectFall
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36C2C:				
		moveq	#0,d1
		moveq	#4,d6

loc_36C30:				
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_36C3E
		bsr.w	loc_36C40
		dbf	d6,loc_36C30

locret_36C3E:				
		rts	
; ===========================================================================

loc_36C40:				
		_move.b	#id_GrounderRocks,ost_id(a1)
		move.b	#6,$28(a1)
		move.w	a0,$2C(a1)
		move.w	d1,$2E(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addq.w	#2,d1
		rts	
; ===========================================================================

loc_36C64:				
		moveq	#0,d1
		moveq	#3,d6

loc_36C68:				
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_36C76
		bsr.w	loc_36C78
		dbf	d6,loc_36C68

locret_36C76:				
		rts	
; ===========================================================================

loc_36C78:				
		_move.b	#id_GrounderWall,ost_id(a1)
		move.b	#4,$28(a1)
		move.w	a0,$2C(a1)
		move.w	d1,$2E(a1)
		move.l	ost_x_pos(a0),d0
		swap	d0
		moveq	#0,d2
		move.b	byte_36CBC(pc,d1.w),d2
		ext.w	d2
		add.w	d2,d0
		swap	d0
		move.l	d0,ost_x_pos(a1)
		move.l	ost_y_pos(a0),d0
		swap	d0
		moveq	#0,d2
		move.b	byte_36CBC+1(pc,d1.w),d2
		ext.w	d2
		add.w	d2,d0
		swap	d0
		move.l	d0,ost_y_pos(a1)
		addq.w	#2,d1
		rts	
; ===========================================================================
byte_36CBC:	
		dc.b   0,$EC					; 0
		dc.b $10,$FC					; 2
		dc.b   0, $C					; 4
		dc.b $F0,$FC					; 6
off_36CC4:	
		dc.l Map_36CF0	
		dc.w $A509
		dc.w $405
		dc.w $1002
off_36CCE:	
		dc.l Map_36D00	
		dc.w 0
		dc.w $8404
		dc.w $1000
off_36CD8:	
		dc.l Map_36CFA	
		dc.w $A509
		dc.w $8404
		dc.w $800
off_36CE2:	dc.w byte_36CE4-off_36CE2 
byte_36CE4:	dc.b   3,  2,  3,  4,$FF,  0			; 0	
off_36CEA:	dc.w byte_36CEC-off_36CEA			; 0 
byte_36CEC:	dc.b   7,  0,  1,$FC				; 0 
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_36CF0:	dc.w word_36D02-Map_36CF0 
		dc.w word_36D24-Map_36CF0
		dc.w word_36D46-Map_36CF0
		dc.w word_36D58-Map_36CF0
		dc.w word_36D6A-Map_36CF0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_36CFA:				
		dc.w word_36D7C-Map_36CFA
		dc.w word_36D86-Map_36CFA
		dc.w word_36D90-Map_36CFA
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_36D00:				
		dc.w word_36D9A-Map_36D00
word_36D02:	dc.w 4			
		dc.w $F400,    0,    0,$FFF8			; 0
		dc.w $FC06,    1,    0,$FFF0			; 4
		dc.w $F400, $800, $800,	   0			; 8
		dc.w $FC06, $801, $800,	   0			; 12
word_36D24:	dc.w 4			
		dc.w $EC00,    7,    3,$FFF8			; 0
		dc.w $F407,    8,    4,$FFF0			; 4
		dc.w $EC00, $807, $803,	   0			; 8
		dc.w $F407, $808, $804,	   0			; 12
word_36D46:	dc.w 2			
		dc.w $EC0F,  $10,    8,$FFF0			; 0
		dc.w  $C0C,  $20,  $10,$FFF0			; 4
word_36D58:	dc.w 2			
		dc.w $EC0F,  $10,    8,$FFF0			; 0
		dc.w  $C0C,  $24,  $12,$FFF0			; 4
word_36D6A:	dc.w 2			
word_36D6C:	dc.w $EC0F,  $10,    8,$FFF0			; 0
		dc.w  $C0C,  $28,  $14,$FFF0			; 4
word_36D7C:	dc.w 1			
		dc.w $F805,  $2C,  $16,$FFF8			; 0
word_36D86:	dc.w 1			
word_36D88:	dc.w $FC00,  $30,  $18,$FFFC			; 0
word_36D90:	dc.w 1			
		dc.w $FC00,  $31,  $18,$FFFC			; 0
word_36D9A:	dc.w 2			
		dc.w $F805,$4093,$4049,$FFF0			; 0
		dc.w $F805,$4097,$404B,	   0			; 4
		
		even
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 91 - Chop Chop 
; ----------------------------------------------------------------------------

ChopChop:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36DBA(pc,d0.w),d1
		jmp	off_36DBA(pc,d1.w)
; ===========================================================================
off_36DBA:	dc.w loc_36DC2-off_36DBA			; 0 
		dc.w loc_36DE4-off_36DBA			; 1
		dc.w loc_36E32-off_36DBA			; 2
		dc.w loc_36E66-off_36DBA			; 3
; ===========================================================================

loc_36DC2:				
		bsr.w	LoadSubtypeData
		move.w	#$200,$2A(a0)
		move.w	#$50,$2C(a0)
		moveq	#$40,d0
		btst	#0,$22(a0)
		bne.s	loc_36DDE
		neg.w	d0

loc_36DDE:				
		move.w	d0,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_36DE4:				
		subq.b	#1,$2C(a0)
		bne.s	loc_36DEE
		bsr.w	loc_36E78

loc_36DEE:				
		subq.w	#1,$2A(a0)
		bpl.s	loc_36E0A
		move.w	#$200,$2A(a0)
		bchg	#0,$22(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		neg.w	ost_x_vel(a0)

loc_36E0A:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	GetClosestPlayer
		move.w	d2,d4
		move.w	d3,d5
		bsr.w	loc_36EB2
		bne.s	loc_36E20
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36E20:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$10,$2A(a0)
		clr.w	ost_x_vel(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36E32:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_36E3C
		bra.w	loc_36E6A
; ===========================================================================

loc_36E3C:				
		addq.b	#2,ost_primary_routine(a0)
		bsr.w	GetClosestPlayer
		lsr.w	#1,d0
		move.b	byte_36E62(pc,d0.w),ost_x_vel(a0)
		addi.w	#$10,d3
		cmpi.w	#$20,d3
		bcs.s	loc_36E5E
		lsr.w	#1,d1
		move.b	byte_36E64(pc,d1.w),ost_y_vel+1(a0)

loc_36E5E:				
		bra.w	loc_36E6A
; ===========================================================================
byte_36E62:	
		dc.b  -2	; 0 - player is left from object -> move left
		dc.b   2	; 1 - player is right from object -> move right
byte_36E64:	
		dc.b $80	; 0 - player is above object -> ...move down?
		dc.b $80	; 1 - player is below object -> move down
; ===========================================================================

loc_36E66:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos

loc_36E6A:				
		lea	(off_36EF0).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36E78:				
		move.w	#$50,$2C(a0)
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_36EB0
		_move.b	#id_DrownCount,ost_id(a1)		; load DrownCount object
		move.b	#id_Ani_Drown_SmallBubble,ost_subtype(a1) ; small bubble subtype
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		moveq	#$14,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_36EA2
		neg.w	d0

loc_36EA2:				
		add.w	d0,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addq.w	#6,ost_y_pos(a1)

locret_36EB0:				
		rts	
; ===========================================================================

loc_36EB2:				
		addi.w	#$20,d3
		cmpi.w	#$40,d3
		bcc.s	loc_36EDE
		tst.w	d2
		bmi.s	loc_36ECA
		tst.w	ost_x_vel(a0)
		bpl.s	loc_36EDE
		bra.w	loc_36ED2
; ===========================================================================

loc_36ECA:				
		tst.w	ost_x_vel(a0)
		bmi.s	loc_36EDE
		neg.w	d2

loc_36ED2:				
		cmpi.w	#$20,d2
		bcs.s	loc_36EDE
		cmpi.w	#$A0,d2	
		bcs.s	loc_36EE2

loc_36EDE:				
		moveq	#0,d2
		rts	
; ===========================================================================

loc_36EE2:				
		moveq	#1,d2
		rts	
; ===========================================================================
off_36EE6:	dc.l Map_36EF6	
		dc.w $253B
		dc.w $404
		dc.w $1002
off_36EF0:	dc.w byte_36EF2-off_36EF0 
byte_36EF2:	dc.b   4,  0,  1,$FF				; 0 
; --------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------
Map_36EF6:				
		dc.w word_36EFA-Map_36EF6			; 0
		dc.w word_36F04-Map_36EF6			; 1
word_36EFA:	dc.w 1			
		dc.w $F40E,    0,    0,$FFF0			; 0
word_36F04:	dc.w 1			
		dc.w $F40E,   $C,    6,$FFF0			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 92 - Spiker 
; ----------------------------------------------------------------------------

Spiker:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36F1C(pc,d0.w),d1
		jmp	off_36F1C(pc,d1.w)
; ===========================================================================
off_36F1C:	dc.w loc_36F24-off_36F1C			; 0 
		dc.w loc_36F3C-off_36F1C			; 1
		dc.w loc_36F68-off_36F1C			; 2
		dc.w loc_36F90-off_36F1C			; 3
; ===========================================================================

loc_36F24:				
		bsr.w	LoadSubtypeData
		move.b	#$40,$2A(a0)
		move.w	#$80,ost_x_vel(a0)
		bchg	#0,$22(a0)
		rts	
; ===========================================================================

loc_36F3C:				
		bsr.w	loc_3703E
		bne.s	loc_36F48
		subq.b	#1,$2A(a0)
		bmi.s	loc_36F5A

loc_36F48:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_37086).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36F5A:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$10,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36F68:				
		bsr.w	loc_3703E
		bne.s	loc_36F74
		subq.b	#1,$2A(a0)
		bmi.s	loc_36F78

loc_36F74:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36F78:				
		subq.b	#2,ost_primary_routine(a0)
		move.b	#$40,$2A(a0)
		neg.w	ost_x_vel(a0)
		bchg	#0,$22(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36F90:				
		move.b	$2E(a0),d0
		cmpi.b	#8,d0
		beq.s	loc_36FA4
		subq.b	#1,d0
		move.b	d0,$2E(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_36FA4:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	loc_36FDC
		st.b	$2B(a0)
		_move.b	#id_SpikerDrill,ost_id(a1)
		move.b	$28(a0),$28(a1)
		move.w	a0,$2C(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#4,$1A(a1)
		move.b	#2,$1A(a0)
		move.b	#1,$1C(a0)

loc_36FDC:				
		move.b	$2F(a0),ost_primary_routine(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 93 - Spiker's drill
; ----------------------------------------------------------------------------

SpikerDrill:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_36FF4(pc,d0.w),d1
		jmp	off_36FF4(pc,d1.w)
; ===========================================================================
off_36FF4:	dc.w loc_36FF8-off_36FF4			; 0 
		dc.w loc_37028-off_36FF4			; 1
; ===========================================================================

loc_36FF8:				
		bsr.w	LoadSubtypeData
		ori.b	#render_onscreen,ost_render(a0)
		ori.b	#-$80,$20(a0)
		movea.w	$2C(a0),a1
		move.b	ost_render(a1),d0
		andi.b	#3,d0
		or.b	d0,ost_render(a0)
		moveq	#2,d1
		btst	#1,d0
		bne.s	loc_37022
		neg.w	d1

loc_37022:				
		move.b	d1,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_37028:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo65_DeleteObject
		bchg	#render_xflip_bit,ost_render(a0)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3703E:				
		tst.b	$2B(a0)
		bne.s	loc_37062
		tst.b	ost_render(a0)
		bpl.s	loc_37062
		bsr.w	GetClosestPlayer
		addi.w	#$20,d2
		cmpi.w	#$40,d2
		bcc.s	loc_37062
		addi.w	#$80,d3	
		cmpi.w	#$100,d3
		bcs.s	loc_37066

loc_37062:				
		moveq	#0,d0
		rts	
; ===========================================================================

loc_37066:				
		move.b	ost_primary_routine(a0),$2F(a0)
		move.b	#6,ost_primary_routine(a0)
		move.b	#$10,$2E(a0)
		moveq	#1,d0
		rts	
; ===========================================================================
off_3707C:	dc.l Map_37092	
		dc.w 0
		dc.w $404
		dc.w $1012
off_37086:	dc.w byte_3708A-off_37086			; 0 
		dc.w byte_3708E-off_37086			; 1
byte_3708A:	dc.b   9,  0,  1,$FF				; 0 
byte_3708E:	dc.b   9,  2,  3,$FF				; 0 
; ---------------------------------------------------------------------------
; Unknown sprite mappings
; ---------------------------------------------------------------------------
Map_37092:				
		dc.w word_3709C-Map_37092			; 0
		dc.w word_370B6-Map_37092			; 1
		dc.w word_370D0-Map_37092			; 2
		dc.w word_370E2-Map_37092			; 3
		dc.w word_370F4-Map_37092			; 4
word_3709C:	dc.w 3			
		dc.w  $809, $520, $290,$FFF4			; 0
		dc.w $E807,$252C,$2296,$FFF8			; 4
		dc.w	 5, $3DE, $1EF,$FFF8			; 8
word_370B6:	dc.w	 3					; 0 
word_370B8:	dc.w  $809, $526, $293,$FFF4			; 0
		dc.w $E807,$252C,$2296,$FFF8			; 4
		dc.w	 5, $3DE, $1EF,$FFF8			; 8
word_370D0:	dc.w 2			
		dc.w  $809, $520, $290,$FFF4			; 0
		dc.w	 5, $3DE, $1EF,$FFF8			; 4
word_370E2:	dc.w 2			
		dc.w  $809, $526, $293,$FFF4			; 0
		dc.w	 5, $3DE, $1EF,$FFF8			; 4
word_370F4:	dc.w 1			
		dc.w $EC07,$252C,$2296,$FFF8			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 95 - Sol
; ----------------------------------------------------------------------------

Sol:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3710C(pc,d0.w),d1
		jmp	off_3710C(pc,d1.w)
; ===========================================================================
off_3710C:	
		dc.w loc_37116-off_3710C			; 0 
		dc.w loc_371DC-off_3710C			; 1
		dc.w loc_37224-off_3710C			; 2
		dc.w loc_3723C-off_3710C			; 3
		dc.w loc_372B8-off_3710C			; 4
; ===========================================================================

loc_37116:				
		move.l	#Map_372E6,ost_mappings(a0)
		move.w	#tile_LevelArt,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo64_Adjust2PArtPointer
		ori.b	#render_rel,ost_render(a0)
		move.b	#4,$18(a0)
		move.b	#$B,$20(a0)
		move.b	#$C,$19(a0)
		move.w	#-$40,ost_x_vel(a0)
		moveq	#0,d2
		lea	$37(a0),a2
		movea.l	a2,a3
		addq.w	#1,a2
		moveq	#3,d1

loc_37152:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	loc_371AE
		addq.b	#1,(a3)
		move.w	a1,d5
		subi.w	#-$5000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5
		move.b	d5,(a2)+
		_move.b	ost_id(a0),ost_id(a1)
		move.b	#6,$24(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		ori.b	#render_rel,ost_render(a1)
		move.b	#4,$18(a1)
		move.b	#8,$19(a1)
		move.b	#3,$1A(a1)
		move.b	#-$68,$20(a1)
		move.b	d2,$26(a1)
		addi.b	#$40,d2
		move.l	a0,$3C(a1)
		dbf	d1,loc_37152

loc_371AE:				
		moveq	#1,d0
		btst	#0,$22(a0)
		beq.s	loc_371BA
		neg.w	d0

loc_371BA:				
		move.b	d0,$36(a0)
		move.b	$28(a0),ost_primary_routine(a0)
		addq.b	#2,ost_primary_routine(a0)
		move.w	#-$40,ost_x_vel(a0)
		btst	#0,$22(a0)
		beq.s	locret_371DA
		neg.w	ost_x_vel(a0)

locret_371DA:				
		rts	
; ===========================================================================

loc_371DC:				
		move.w	($FFFFB008).w,d0
		sub.w	ost_x_pos(a0),d0
		bcc.s	loc_371E8
		neg.w	d0

loc_371E8:				
		cmpi.w	#$A0,d0	
		bcc.s	loc_3720C
		move.w	($FFFFB00C).w,d0
		sub.w	ost_y_pos(a0),d0
		bcc.s	loc_371FA
		neg.w	d0

loc_371FA:				
		cmpi.w	#$50,d0
		bcc.s	loc_3720C
		tst.w	(v_debug_active).w
		bne.s	loc_3720C
		move.b	#1,$1C(a0)

loc_3720C:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_372D2).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		andi.b	#3,$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37224:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_372E0).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		andi.b	#3,$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3723C:				
		lea	(off_372E0).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		movea.l	$3C(a0),a1
		_cmpi.b	#id_Sol,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		cmpi.b	#2,$1A(a1)
		bne.s	loc_3728E
		cmpi.b	#$40,$26(a0)
		bne.s	loc_3728E
		addq.b	#2,ost_primary_routine(a0)
		move.b	#0,$1C(a0)
		subq.b	#1,$37(a1)
		bne.s	loc_37278
		addq.b	#2,$24(a1)

loc_37278:				
		move.w	#-$200,ost_x_vel(a0)
		btst	#0,$22(a1)
		beq.s	loc_3728A
		neg.w	ost_x_vel(a0)

loc_3728A:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3728E:				
		move.b	$26(a0),d0
		jsr	CalcSine
		asr.w	#4,d1
		add.w	ost_x_pos(a1),d1
		move.w	d1,ost_x_pos(a0)
		asr.w	#4,d0
		add.w	ost_y_pos(a1),d0
		move.w	d0,ost_y_pos(a0)
		move.b	$36(a1),d0
		add.b	d0,$26(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_372B8:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		tst.b	ost_render(a0)
		bpl.w	JmpTo65_DeleteObject
		lea	(off_372E0).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_372D2:	dc.w byte_372D6-off_372D2			; 0 
		dc.w byte_372DA-off_372D2			; 1
byte_372D6:	dc.b  $F,  0,$FF,  0				; 0 
byte_372DA:	dc.b  $F,  1,  2,$FE,  1,  0			; 0	
off_372E0:	dc.w byte_372E2-off_372E0 
byte_372E2:	dc.b   5,  3,  4,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_372E6:				
		dc.w word_372F0-Map_372E6			; 0
		dc.w word_372FA-Map_372E6			; 1
		dc.w word_37304-Map_372E6			; 2
		dc.w word_3730E-Map_372E6			; 3
		dc.w word_37318-Map_372E6			; 4
word_372F0:	dc.w 1			
		dc.w $F805, $3DE, $1EF,$FFF8			; 0
word_372FA:	dc.w 1			
		dc.w $F805, $3DE, $1EF,$FFF8			; 0
word_37304:	dc.w 1			
		dc.w $F805, $3DE, $1EF,$FFF8			; 0
word_3730E:	dc.w 1			
		dc.w $F805,$83AE,$81D7,$FFF8			; 0
word_37318:	dc.w 1			
		dc.w $F805,$8BAE,$89D7,$FFF8			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 94,96 - Rexon 
; ----------------------------------------------------------------------------
Rexon_Dup:
Rexon:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_37330(pc,d0.w),d1
		jmp	off_37330(pc,d1.w)
; ===========================================================================
off_37330:	dc.w loc_37338-off_37330			; 0 
		dc.w loc_37350-off_37330			; 1
		dc.w loc_3739C-off_37330			; 2
		dc.w loc_373CA-off_37330			; 3
; ===========================================================================

loc_37338:				
		bsr.w	LoadSubtypeData
		move.b	#2,$1A(a0)
		move.w	#-$20,ost_x_vel(a0)
		move.b	#-$80,$2A(a0)
		rts	
; ===========================================================================

loc_37350:				
		bsr.w	GetClosestPlayer
		addi.w	#$60,d2
		cmpi.w	#$100,d2
		bcc.s	loc_37362
		bsr.w	loc_375AC

loc_37362:				
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_37380
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$11,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo27_SolidObject
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37380:				
		subq.b	#1,$2A(a0)
		bpl.s	loc_37396
		move.b	#-$80,$2A(a0)
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)

loc_37396:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		rts	
; ===========================================================================

loc_3739C:				
		bsr.w	GetClosestPlayer
		addi.w	#$60,d2
		cmpi.w	#$100,d2
		bcc.s	loc_373AE
		bsr.w	loc_375AC

loc_373AE:				
		bsr.w	loc_373B6
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_373B6:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	ost_x_pos(a0),d4
		jmpto	SolidObject,JmpTo27_SolidObject
; ===========================================================================

loc_373CA:				
		bsr.s	loc_373B6
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 97 - Rexon's head
; ----------------------------------------------------------------------------

RexonHead:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_373DE(pc,d0.w),d1
		jmp	off_373DE(pc,d1.w)
; ===========================================================================
off_373DE:	dc.w loc_373E8-off_373DE			; 0 
		dc.w loc_37454-off_373DE			; 1
		dc.w loc_37488-off_373DE			; 2
		dc.w loc_374C2-off_373DE			; 3
		dc.w loc_374F4-off_373DE			; 4
; ===========================================================================

loc_373E8:				
		bsr.w	LoadSubtypeData
		move.b	#8,$19(a0)
		moveq	#$28,d0
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_373FE
		moveq	#-$18,d0

loc_373FE:				
		add.w	d0,ost_x_pos(a0)
		addi.w	#$10,ost_y_pos(a0)
		move.b	#1,$38(a0)
		movea.w	$2C(a0),a1
		lea	$2E(a1),a1
		move.b	#$B,$20(a0)
		moveq	#0,d0
		move.w	$2E(a0),d0
		cmpi.w	#8,d0
		beq.s	loc_3743A
		move.b	#1,$1A(a0)
		move.b	#-$75,$20(a0)
		move.w	(a1,d0.w),$30(a0)

loc_3743A:				
		move.w	6(a1),$32(a0)
		lsr.w	#1,d0
		move.b	byte_3744E(pc,d0.w),$2A(a0)
		move.b	d0,$39(a0)
		rts	
; ===========================================================================
byte_3744E:	dc.b $1E					; 0
		dc.b $18					; 1
		dc.b $12					; 2
		dc.b  $C					; 3
		dc.b   6					; 4
		dc.b   0					; 5
; ===========================================================================

loc_37454:
	if (Revision=2)|FixBugs	
		subq.b	#1,$2A(a0)
		bmi.s	loc_37462
		bsr.w	loc_3750C
	else
		; The call to loc_3750C is in the wrong place, causing an occasional crash.		
		bsr.w	loc_3750C
		subq.b	#1,$2A(a0)
		bmi.s	loc_37462
	endc	
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37462:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#-$120,ost_x_vel(a0)
		move.w	#-$200,ost_y_vel(a0)
		move.w	$2E(a0),d0
		subi_.w	#8,d0
		neg.w	d0
		lsr.w	#1,d0
		move.b	byte_3744E(pc,d0.w),$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37488:
	if (Revision=2)|FixBugs	
		moveq	#$10,d0
		add.w	d0,ost_x_vel(a0)
		subq.b	#1,$2A(a0)
		bmi.s	loc_374A0
		bsr.w	loc_3750C
	else
		; The call to loc_3750C is in the wrong place, causing an occasional crash.			
		bsr.w	loc_3750C
		moveq	#$10,d0
		add.w	d0,ost_x_vel(a0)
		subq.b	#1,$2A(a0)
		bmi.s	loc_374A0
	endc	
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_374A0:				
		addq.b	#2,ost_primary_routine(a0)
		bsr.w	ObjMoveStop
		move.b	#$20,$2A(a0)
		move.w	$2E(a0),d0
		lsr.w	#1,d0
		move.b	byte_374BE(pc,d0.w),$2B(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
byte_374BE:	dc.b $24					; 0
		dc.b $20					; 1
		dc.b $1C					; 2
		dc.b $1A					; 3
; ===========================================================================

loc_374C2:				
		bsr.w	loc_3750C
		cmpi.w	#8,$2E(a0)
		bne.s	loc_374D8
		subq.b	#1,$2A(a0)
		bpl.s	loc_374D8
		bsr.w	loc_37532

loc_374D8:				
		move.b	$39(a0),d0
		addq.b	#1,d0
		move.b	d0,$39(a0)
		andi.b	#3,d0
		bne.s	loc_374F0
		bsr.w	loc_3758A
		bsr.w	loc_37604

loc_374F0:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_374F4:				
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	ost_y_pos(a0),d0
		bcs.w	JmpTo65_DeleteObject
		jsrto	ObjectFall,JmpTo8_ObjectFall
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3750C:				
		movea.w	$32(a0),a1
		cmpi.b	#-$69,(a1)
		beq.s	locret_37526
		move.b	#8,ost_primary_routine(a0)
		move.w	$2E(a0),d0
		move.w	word_37528(pc,d0.w),ost_x_vel(a0)

locret_37526:				
		rts	
; ===========================================================================
word_37528:	dc.w   $80					; 0
		dc.w $FF00					; 1
		dc.w  $100					; 2
		dc.w $FF80					; 3
		dc.w   $80					; 4
; ===========================================================================

loc_37532:				
		move.b	#$7F,$2A(a0)
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_37588
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#3,$1A(a1)
		move.b	#$10,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		lea	(SpeedToPos).l,a2
		move.l	a2,$2A(a1)
		moveq	#1,d0
		moveq	#$10,d1
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_37576
		neg.w	d0
		neg.w	d1

loc_37576:				
		move.b	d0,ost_x_vel(a1)
		add.w	d1,ost_x_pos(a1)
		addq.w	#4,ost_y_pos(a1)
		move.b	#-$80,ost_y_vel+1(a1)

locret_37588:				
		rts	
; ===========================================================================

loc_3758A:				
		move.b	$2B(a0),d0
		move.b	$38(a0),d1
		add.b	d1,d0
		move.b	d0,$2B(a0)
		subi.b	#$18,d0
		beq.s	loc_375A6
		bcs.s	loc_375A6
		cmpi.b	#$10,d0
		bcs.s	locret_375AA

loc_375A6:				
		neg.b	$38(a0)

locret_375AA:				
		rts	
; ===========================================================================

loc_375AC:				
		move.b	#6,ost_primary_routine(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		tst.w	d0
		beq.s	loc_375C2
		bset	#render_xflip_bit,ost_render(a0)

loc_375C2:				
		bsr.w	ObjMoveStop
		lea	$2C(a0),a2
		moveq	#0,d1
		moveq	#4,d6

loc_375CE:				
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_37602
		_move.b	#id_RexonHead,ost_id(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	$28(a0),$28(a1)
		move.w	a0,$2C(a1)
		move.w	a1,(a2)+
		move.w	d1,$2E(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addq.w	#2,d1
		dbf	d6,loc_375CE

locret_37602:				
		rts	
; ===========================================================================

loc_37604:				
		move.w	$30(a0),d0
		beq.s	locret_37650
		movea.w	d0,a1
		lea	word_376A8(pc),a2
		moveq	#0,d0
		move.b	$2B(a0),d0
		andi.b	#$7F,d0
		move.w	d0,d1
		andi.w	#$1F,d0
		add.w	d0,d0
		move.b	(a2,d0.w),d2
		ext.w	d2
		move.b	1(a2,d0.w),d3
		ext.w	d3
		lsr.w	#4,d1
		andi.w	#6,d1
		move.w	off_37652(pc,d1.w),d1
		jsr	off_37652(pc,d1.w)
		move.w	ost_x_pos(a0),d4
		add.w	d2,d4
		move.w	d4,ost_x_pos(a1)
		move.b	$D(a0),d5
		add.b	d3,d5
		move.b	d5,$D(a1)

locret_37650:				
		rts	
; ===========================================================================
off_37652:	dc.w locret_3765A-off_37652			; 0 
		dc.w loc_3765C-off_37652			; 1
		dc.w loc_37662-off_37652			; 2
		dc.w loc_37668-off_37652			; 3
; ===========================================================================

locret_3765A:				
		rts	
; ===========================================================================

loc_3765C:				
		exg	d2,d3
		neg.w	d3
		rts	
; ===========================================================================

loc_37662:				
		neg.w	d2
		neg.w	d3
		rts	
; ===========================================================================

loc_37668:				
		exg	d2,d3
		neg.w	d2
		rts	
; ===========================================================================
off_3766E:	dc.l Map_37678	
		dc.w $637E
		dc.w $404
		dc.w $1000
; ------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------
Map_37678:				
		dc.w word_37680-Map_37678			; 0
		dc.w word_3768A-Map_37678			; 1
		dc.w word_37694-Map_37678			; 2
		dc.w word_3769E-Map_37678			; 3
word_37680:	dc.w   1					; 0 
		dc.w $FA09,    0,    0,$FFEC			; 0
word_3768A:	dc.w   1					; 0 
		dc.w $F805,    6,    3,$FFF8			; 0
word_37694:	dc.w   1					; 0 
		dc.w $F80D,   $A,    5,$FFF0			; 0
word_3769E:	dc.w   1					; 0 
		dc.w $FC00,  $12,    9,$FFFC			; 0
word_376A8:	dc.w  $F00					; 0 
		dc.w  $FFF					; 1
		dc.w  $FFF					; 2
		dc.w  $FFE					; 3
		dc.w  $FFD					; 4
		dc.w  $FFC					; 5
		dc.w  $EFC					; 6
		dc.w  $EFB					; 7
		dc.w  $EFA					; 8
		dc.w  $EFA					; 9
		dc.w  $DF9					; 10
		dc.w  $DF8					; 11
		dc.w  $CF8					; 12
		dc.w  $CF7					; 13
		dc.w  $CF6					; 14
		dc.w  $BF6					; 15
		dc.w  $BF5					; 16
		dc.w  $AF5					; 17
		dc.w  $AF4					; 18
		dc.w  $9F4					; 19
		dc.w  $8F4					; 20
		dc.w  $8F3					; 21
		dc.w  $7F3					; 22
		dc.w  $6F2					; 23
		dc.w  $6F2					; 24
		dc.w  $5F2					; 25
		dc.w  $4F2					; 26
		dc.w  $4F1					; 27
		dc.w  $3F1					; 28
		dc.w  $2F1					; 29
		dc.w  $1F1					; 30
		dc.w  $1F1					; 31
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 98 - Projectile with optional gravity
; ----------------------------------------------------------------------------

Projectile:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_376F6(pc,d0.w),d1
		jmp	off_376F6(pc,d1.w)
; ===========================================================================
off_376F6:	dc.w loc_376FA-off_376F6			; 0 
		dc.w loc_376FE-off_376F6			; 1
; ===========================================================================

loc_376FA:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_376FE:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo65_DeleteObject
		movea.l	$2A(a0),a1
		jsr	(a1)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37710:				
		bchg	#tile_pal12_bit,ost_tile(a0)
		jmpto	ObjectFall, JmpTo8_ObjectFall
; ===========================================================================

loc_3771A:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_37B50).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_37728:				
		addi.w	#$20,ost_y_vel(a0)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		rts	
; ===========================================================================

loc_37734:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_395A8).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_37742:				
		addi.w	#$20,ost_y_vel(a0)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_38CC4).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_37756:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_3BA40).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================
off_37764:	dc.l Map_37678	
		dc.w $237E
		dc.w $8404
		dc.w $498
off_3776E:	dc.l Map_3789A	
		dc.w $A36E
		dc.w $8404
		dc.w $88B
off_37778:	dc.l Map_37B62	
		dc.w $38A
		dc.w $8404
		dc.w $498
off_37782:	dc.l Map_37D96	
		dc.w $3EE
		dc.w $8404
		dc.w $88B
off_3778C:	dc.l Map_38A96	
		dc.w $8368
		dc.w $8405
		dc.w $498
off_37796:	dc.l Map_38CCA	
		dc.w $252D
		dc.w $8405
		dc.w $498
off_377A0:	dc.l Map_3921A	
		dc.w $A500
		dc.w $8404
		dc.w $498
off_377AA:	dc.l Map_395B4	
		dc.w $379
		dc.w $8405
		dc.w $498
off_377B4:	dc.l Map_39E68	
		dc.w $2380
		dc.w $8405
		dc.w $498
off_377BE:	dc.l Map_3BA46	
		dc.w $3AB
		dc.w $8403
		dc.w $498
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 99 - Nebula 
; ----------------------------------------------------------------------------

Nebula:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_377D6(pc,d0.w),d1
		jmp	off_377D6(pc,d1.w)
; ===========================================================================
off_377D6:	dc.w loc_377DC-off_377D6			; 0 
		dc.w loc_377E8-off_377D6			; 1
		dc.w loc_3781C-off_377D6			; 2
; ===========================================================================

loc_377DC:				
		bsr.w	LoadSubtypeData
		move.w	#-$C0,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_377E8:				
		bsr.w	GetClosestPlayer
		tst.w	d0
		bne.s	loc_377FA
		cmpi.w	#$80,d2	
		bcc.s	loc_377FA
		bsr.w	loc_37810

loc_377FA:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_36776
		lea	(off_37892).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		bra.w	DeleteBehindScreen
; ===========================================================================

loc_37810:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#-$A0,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3781C:				
		tst.b	$2A(a0)
		bne.s	loc_37834
		bsr.w	GetClosestPlayer
		addi_.w	#8,d2
		cmpi.w	#$10,d2
		bcc.s	loc_37834
		bsr.w	loc_37850

loc_37834:				
		addi_.w	#1,ost_y_vel(a0)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_36776
		lea	(off_37892).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		bra.w	DeleteBehindScreen
; ===========================================================================

loc_37850:				
		st.b	$2A(a0)
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_37886
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#4,$1A(a1)
		move.b	#$14,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$18,ost_y_pos(a1)
		lea_	loc_37710,a2
		move.l	a2,$2A(a1)

locret_37886:				
		rts	
; ===========================================================================
off_37888:	dc.l Map_3789A	
		dc.w $A36E
		dc.w $404
		dc.w $1006
off_37892:	dc.w byte_37894-off_37892 
byte_37894:	dc.b   3,  0,  1,  2,  3,$FF			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3789A:				
		dc.w word_378A4-Map_3789A			; 0
		dc.w word_378C6-Map_3789A			; 1
		dc.w word_378E8-Map_3789A			; 2
		dc.w word_3790A-Map_3789A			; 3
		dc.w word_3792C-Map_3789A			; 4
word_378A4:	dc.w 4			
		dc.w $EC08,  $12,    9,$FFE8			; 0
		dc.w $EC08,$1812,$1809,	   0			; 4
		dc.w $EC04,    0,    0,$FFF8			; 8
		dc.w $F40F,    2,    1,$FFF0			; 12
word_378C6:	dc.w 4			
		dc.w $EC04,  $15,   $A,$FFF0			; 0
		dc.w $EC04,$1815,$180A,	   0			; 4
		dc.w $EC04,    0,    0,$FFF8			; 8
		dc.w $F40F,    2,    1,$FFF0			; 12
word_378E8:	dc.w 4			
		dc.w $EC00,  $17,   $B,$FFF8			; 0
		dc.w $EC00, $817, $80B,	   0			; 4
		dc.w $EC04,    0,    0,$FFF8			; 8
		dc.w $F40F,    2,    1,$FFF0			; 12
word_3790A:	dc.w 4			
		dc.w $EC04,$1015,$100A,$FFF0			; 0
		dc.w $EC04, $815, $80A,	   0			; 4
		dc.w $EC04,    0,    0,$FFF8			; 8
		dc.w $F40F,    2,    1,$FFF0			; 12
word_3792C:	dc.w 1			
		dc.w $F805,  $18,   $C,$FFF8			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9A - Turtloid
; ----------------------------------------------------------------------------

Turtloid:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_37944(pc,d0.w),d1
		jmp	off_37944(pc,d1.w)
; ===========================================================================
off_37944:	dc.w loc_37948-off_37944			; 0 
		dc.w loc_37964-off_37944			; 1
; ===========================================================================

loc_37948:				
		bsr.w	LoadSubtypeData
		move.w	#-$80,ost_x_vel(a0)
		bsr.w	loc_37A4A
		lea	(off_37B56).l,a1
		move.l	a1,$2E(a0)
		bra.w	loc_37ABE
; ===========================================================================

loc_37964:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3797A(pc,d0.w),d1
		jsr	off_3797A(pc,d1.w)
		bsr.w	loc_37982
		bra.w	DeleteBehindScreen
; ===========================================================================
off_3797A:	dc.w loc_379A0-off_3797A			; 0 
		dc.w loc_379CA-off_3797A			; 1
		dc.w loc_379EA-off_3797A			; 2
		dc.w locret_37A04-off_3797A			; 3
; ===========================================================================

loc_37982:				
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_36776
		move.w	#$18,d1
		move.w	#8,d2
		move.w	#$E,d3
		move.w	(sp)+,d4
		jmpto	DetectPlatform,JmpTo9_DetectPlatform
; ===========================================================================

loc_379A0:				
		bsr.w	GetClosestPlayer
		tst.w	d0
		bmi.w	locret_37A48
		cmpi.w	#$80,d2	
		bcc.w	locret_37A48
		addq.b	#2,$25(a0)
		move.w	#0,ost_x_vel(a0)
		move.b	#4,$2A(a0)
		move.b	#1,$1A(a0)
		rts	
; ===========================================================================

loc_379CA:				
		subq.b	#1,$2A(a0)
		bpl.w	locret_37A48
		addq.b	#2,$25(a0)
		move.b	#8,$2A(a0)
		movea.w	$2C(a0),a1
		move.b	#3,$1A(a1)
		bra.w	loc_37AF2
; ===========================================================================

loc_379EA:				
		subq.b	#1,$2A(a0)
		bpl.s	locret_37A02
		addq.b	#2,$25(a0)
		move.w	#-$80,ost_x_vel(a0)
		clr.b	$1A(a0)
		movea.w	$2C(a0),a1

locret_37A02:				
		rts	
; ===========================================================================

locret_37A04:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9B - Turtloid rider 
; ----------------------------------------------------------------------------

TurtloidRider:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_37A14(pc,d0.w),d1
		jmp	off_37A14(pc,d1.w)
; ===========================================================================
off_37A14:	
		dc.w loc_37A18-off_37A14			; 0 
		dc.w loc_37A1C-off_37A14			; 1
; ===========================================================================

loc_37A18:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_37A1C:				
		movea.w	$2C(a0),a1
		lea	word_37A2C(pc),a2
		bsr.w	loc_37A30
		bra.w	DeleteBehindScreen
; ===========================================================================
word_37A2C:
		dc.w	 4					; 0 
		dc.w $FFE8					; 1
; ===========================================================================

loc_37A30:				
		move.l	ost_x_pos(a1),ost_x_pos(a0)
		move.l	ost_y_pos(a1),ost_y_pos(a0)
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a0)
		move.w	(a2)+,d0
		add.w	d0,ost_y_pos(a0)

locret_37A48:							; oddly, a large number of returns in this region branch here			
		rts	
; ===========================================================================

loc_37A4A:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_37A80
		_move.b	#id_TurtloidRider,ost_id(a1)
		move.b	#2,$1A(a1)
		move.b	#$18,$28(a1)
		move.w	a0,$2C(a1)
		move.w	a1,$2C(a0)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		addq.w	#4,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		subi.w	#$18,ost_y_pos(a1)

locret_37A80:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9C - Balkiry's jet
; ----------------------------------------------------------------------------

BalkiryJet:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_37A90(pc,d0.w),d1
		jmp	off_37A90(pc,d1.w)
; ===========================================================================
off_37A90:	
		dc.w loc_37A94-off_37A90			; 0 
		dc.w loc_37A98-off_37A90			; 1
; ===========================================================================

loc_37A94:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_37A98:				
		movea.w	$2C(a0),a1
		move.b	$32(a0),d0
		cmp.b	ost_id(a1),d0
		bne.w	JmpTo65_DeleteObject
		move.l	ost_x_pos(a1),ost_x_pos(a0)
		move.l	ost_y_pos(a1),ost_y_pos(a0)
		movea.l	$2E(a0),a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		bra.w	DeleteBehindScreen
; ===========================================================================

loc_37ABE:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_37AF0
		_move.b	#id_BalkiryJet,ost_id(a1)
		move.b	#6,$1A(a1)
		move.b	#$1A,$28(a1)
		move.w	a0,$2C(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.l	$2E(a0),$2E(a1)
		move.b	ost_id(a0),$32(a1)

locret_37AF0:				
		rts	
; ===========================================================================

loc_37AF2:				
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_37B30
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#6,$1A(a1)
		move.b	#$1C,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		subi.w	#$14,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$A,ost_y_pos(a1)
		move.w	#-$100,ost_x_vel(a1)
		lea_	loc_3771A,a2
		move.l	a2,$2A(a1)

locret_37B30:				
		rts	
; ===========================================================================
off_37B32:	dc.l Map_37B62	
		dc.w $38A
		dc.w $405
		dc.w $1800
off_37B3C:	dc.l Map_37B62	
		dc.w $38A
		dc.w $404
		dc.w $C1A
off_37B46:	dc.l Map_37B62	
		dc.w $38A
		dc.w $405
		dc.w $800
off_37B50:	dc.w byte_37B52-off_37B50 
byte_37B52:	dc.b   1,  4,  5,$FF				; 0 
off_37B56:	dc.w byte_37B58-off_37B56 
byte_37B58:	dc.b   1,  6,  7,$FF				; 0 
off_37B5C:	dc.w byte_37B5E-off_37B5C 
byte_37B5E:	dc.b   1,  8,  9,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_37B62:	dc.w word_37B76-Map_37B62 
		dc.w word_37B90-Map_37B62
		dc.w word_37BAA-Map_37B62
		dc.w word_37BB4-Map_37B62
		dc.w word_37BBE-Map_37B62
		dc.w word_37BC8-Map_37B62
		dc.w word_37BD2-Map_37B62
		dc.w word_37BDC-Map_37B62
		dc.w word_37BE6-Map_37B62
		dc.w word_37BF0-Map_37B62
word_37B76:	dc.w 3			
		dc.w $F009,$A000,$A000,$FFE4			; 0
		dc.w $F00F,$A006,$A003,$FFFC			; 4
		dc.w	 9,$A016,$A00B,$FFE4			; 8
word_37B90:	dc.w 3			
		dc.w $F009,$A000,$A000,$FFE4			; 0
		dc.w	 9,$A01C,$A00E,$FFE4			; 4
		dc.w $F00F,$A006,$A003,$FFFC			; 8
word_37BAA:	dc.w 1			
		dc.w $F40A,$A022,$A011,$FFF4			; 0
word_37BB4:	dc.w 1			
		dc.w $F40A,$A02B,$A015,$FFF4			; 0
word_37BBE:	dc.w 1			
		dc.w $FC00,$8034,$801A,$FFFC			; 0
word_37BC8:	dc.w 1			
		dc.w $FC00,$8035,$801A,$FFFC			; 0
word_37BD2:	dc.w 1			
		dc.w  $604,$8036,$801B,	 $1C			; 0
word_37BDC:	dc.w 1			
		dc.w  $600,$8038,$801C,	 $1C			; 0
word_37BE6:	dc.w 1			
		dc.w $FB04,$8036,$801B,	 $1B			; 0
word_37BF0:	dc.w 1			
		dc.w $FB00,$8038,$801C,	 $1B			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9D - Coconuts 
; ----------------------------------------------------------------------------

Coconuts:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_37C08(pc,d0.w),d1
		jmp	off_37C08(pc,d1.w)
; ===========================================================================
off_37C08:	dc.w loc_37C10-off_37C08			; 0 
		dc.w loc_37C1C-off_37C08			; 1
		dc.w loc_37CAE-off_37C08			; 2
		dc.w loc_37CD4-off_37C08			; 3
; ===========================================================================

loc_37C10:				
		bsr.w	LoadSubtypeData
		move.b	#$10,$2A(a0)
		rts	
; ===========================================================================

loc_37C1C:				
		bsr.w	GetClosestPlayer
		bclr	#render_xflip_bit,ost_render(a0)
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_37C3C
		bset	#render_xflip_bit,ost_render(a0)
		bset	#0,$22(a0)

loc_37C3C:				
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcc.s	loc_37C50
		tst.b	$2E(a0)
		beq.s	loc_37C66
		subq.b	#1,$2E(a0)

loc_37C50:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_37C5A
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37C5A:				
		addq.b	#2,ost_primary_routine(a0)
		bsr.w	loc_37C82
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37C66:				
		move.b	#6,ost_primary_routine(a0)
		move.b	#1,$1A(a0)
		move.b	#8,$2A(a0)
		move.b	#$20,$2E(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37C82:				
		move.w	$2C(a0),d0
		cmpi.w	#$C,d0
		bcs.s	loc_37C8E
		moveq	#0,d0

loc_37C8E:				
		lea	byte_37CA2(pc,d0.w),a1
		addq.w	#2,d0
		move.w	d0,$2C(a0)
		move.b	(a1)+,ost_y_vel(a0)
		move.b	(a1)+,$2A(a0)
		rts	
; ===========================================================================
byte_37CA2:	dc.b $FF,$20					; 0
		dc.b   1,$18					; 2
		dc.b $FF,$10					; 4
		dc.b   1,$28					; 6
		dc.b $FF,$20					; 8
		dc.b   1,$10					; 10
; ===========================================================================

loc_37CAE:				
		subq.b	#1,$2A(a0)
		beq.s	loc_37CC6
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_37D88).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37CC6:				
		subq.b	#2,ost_primary_routine(a0)
		move.b	#$10,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37CD4:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_37CE6(pc,d0.w),d1
		jsr	off_37CE6(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_37CE6:	dc.w loc_37CEA-off_37CE6			; 0 
		dc.w loc_37D06-off_37CE6			; 1
; ===========================================================================

loc_37CEA:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_37CF2
		rts	
; ===========================================================================

loc_37CF2:				
		addq.b	#2,$25(a0)
		move.b	#8,$2A(a0)
		move.b	#2,$1A(a0)
		bra.w	loc_37D22
; ===========================================================================

loc_37D06:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_37D0E
		rts	
; ===========================================================================

loc_37D0E:				
		clr.b	$25(a0)
		move.b	#4,ost_primary_routine(a0)
		move.b	#8,$2A(a0)
		bra.w	loc_37C82
; ===========================================================================

loc_37D22:				
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_37D74
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#3,$1A(a1)
		move.b	#$20,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#-$D,ost_y_pos(a1)
		moveq	#0,d0
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_37D58
		moveq	#4,d0

loc_37D58:				
		lea	word_37D76(pc,d0.w),a2
		move.w	(a2)+,d0
		add.w	d0,ost_x_pos(a1)
		move.w	(a2)+,ost_x_vel(a1)
		move.w	#-$100,ost_y_vel(a1)
		lea_	loc_37728,a2
		move.l	a2,$2A(a1)

locret_37D74:				
		rts	
; ===========================================================================
word_37D76:	dc.w $FFF5					; 0
		dc.w  $100					; 1
		dc.w	$B					; 2
		dc.w $FF00					; 3
off_37D7E:	dc.l Map_37D96	
		dc.w $3EE
		dc.w $405
		dc.w $C09
off_37D88:	dc.w byte_37D8C-off_37D88			; 0 
		dc.w Map_37D90-off_37D88			; 1
byte_37D8C:	dc.b   5,  0,  1,$FF				; 0 
Map_37D90:				
		dc.b   9,  1,  2,  1,$FF,  0			; 0
; ------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------
Map_37D96:				
		dc.w byte_37D9E-Map_37D96			; 0
		dc.w byte_37DC0-Map_37D96			; 1
		dc.w byte_37DE2-Map_37D96			; 2
		dc.w byte_37E04-Map_37D96			; 3
byte_37D9E:	dc.b   0,  4,  0,  5,  0,$1A,  0, $D,$FF,$FE,$F0,  9,  0,  0,  0,  0 ; 0
					
		dc.b $FF,$FC,  0, $D,  0,  6,  0,  3,$FF,$F4,$10,  1,  0, $E,  0,  7 ; 16
		dc.b   0, $C					; 32
byte_37DC0:	dc.b   0,  4,  0,  5,  0,$1E,  0, $F,$FF,$FE,$F0,  9,  0,  0,  0,  0 ; 0
					
		dc.b $FF,$FC,  0, $D,  0,$10,  0,  8,$FF,$F4,$10,  1,  0,$18,  0, $C ; 16
		dc.b   0, $C					; 32
byte_37DE2:	dc.b   0,  4,$F8,  1,  0,$22,  0,$11,  0,  7,$F0,  9,  0,  0,  0,  0 ; 0
					
		dc.b $FF,$FC,  0, $D,  0,$10,  0,  8,$FF,$F4,$10,  1,  0,$18,  0, $C ; 16
		dc.b   0, $C					; 32
byte_37E04:	dc.b   0,  2,$F8,  1,$40,$24,$40,$12,$FF,$F8,$F8,  1,$48,$24,$48,$12 ; 0
					
		dc.b   0,  0					; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9E - Crawlton 
; ----------------------------------------------------------------------------

Crawlton:				
		moveq	#0,d0
		move.b	$3B(a0),d0
		move.w	off_37E24(pc,d0.w),d1
		jmp	off_37E24(pc,d1.w)
; ===========================================================================
off_37E24:	
		dc.w loc_37E30-off_37E24			; 0 
		dc.w loc_37E42-off_37E24			; 1
		dc.w loc_37E98-off_37E24			; 2
		dc.w loc_37EB6-off_37E24			; 3
		dc.w loc_37ED4-off_37E24			; 4
		dc.w loc_37EFC-off_37E24			; 5
; ===========================================================================

loc_37E30:				
		bsr.w	LoadSubtypeData
		move.b	#-$80,ost_height(a0)
		addq.b	#2,$3B(a0)
		bra.w	loc_37F74
; ===========================================================================

loc_37E42:				
		bsr.w	GetClosestPlayer
		move.w	d2,d4
		move.w	d3,d5
		addi.w	#$80,d2	
		cmpi.w	#$100,d2
		bcc.s	loc_37E5E
		addi.w	#$80,d3	
		cmpi.w	#$100,d3
		bcs.s	loc_37E62

loc_37E5E:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37E62:				
		addq.b	#2,$3B(a0)
		move.b	#$10,$3A(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		tst.w	d0
		beq.s	loc_37E7C
		bset	#render_xflip_bit,ost_render(a0)

loc_37E7C:				
		neg.w	d4
		lsl.w	#3,d4
		andi.w	#-$100,d4
		move.w	d4,ost_x_vel(a0)
		neg.w	d5
		lsl.w	#3,d5
		andi.w	#-$100,d5
		move.w	d5,ost_y_vel(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37E98:				
		subq.b	#1,$3A(a0)
		bmi.s	loc_37EA2
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37EA2:				
		addq.b	#2,$3B(a0)
		move.b	#8,$39(a0)
		move.b	#$1C,$3A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37EB6:				
		subq.b	#1,$3A(a0)
		beq.s	loc_37EC4
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37EC4:				
		move.b	$39(a0),$3B(a0)
		move.b	#$20,$3A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37ED4:				
		subq.b	#1,$3A(a0)
		beq.s	loc_37EDE
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37EDE:				
		move.b	#6,$3B(a0)
		move.b	#2,$39(a0)
		move.b	#$1C,$3A(a0)
		neg.w	ost_x_vel(a0)
		neg.w	ost_y_vel(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_37EFC:				
		movea.w	$3E(a0),a1
		cmpi.b	#id_Crawlton,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		bclr	#render_xflip_bit,ost_render(a0)
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_37F1C
		bset	#render_xflip_bit,ost_render(a0)

loc_37F1C:				
		move.b	#-$80,$14(a0)
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		cmpi.b	#6,$3B(a1)
		bne.s	loc_37F6C
		move.w	ost_x_vel(a1),d2
		asr.w	#8,d2
		move.w	ost_y_vel(a1),d3
		asr.w	#8,d3
		lea	ost_subspr2_x_pos(a0),a2
		move.b	$3A(a1),d0
		moveq	#$18,d1
		moveq	#6,d6

loc_37F4E:				
		move.w	(a2),d4
		move.w	2(a2),d5
		cmp.b	d1,d0
		bcc.s	loc_37F5C
		add.w	d2,d4
		add.w	d3,d5

loc_37F5C:				
		move.w	d4,(a2)+
		move.w	d5,(a2)+
		subi_.b	#4,d1
		bcs.s	loc_37F6C
		addq.w	#2,a2
		dbf	d6,loc_37F4E

loc_37F6C:				
		move.w	#$280,d0
		jmpto	DisplaySprite3,JmpTo5_DisplaySprite3
; ===========================================================================

loc_37F74:				
		jsrto	FindFreeObj,JmpTo19_FindFreeObj
		bne.s	locret_37FE6
		_move.b	#id_Crawlton,ost_id(a1)
		move.b	ost_render(a0),ost_render(a1)
		bset	#render_subobjects_bit,ost_render(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#$A,$3B(a1)
		move.b	#0,ost_mainspr_frame(a1)
		move.b	#$80,ost_mainspr_width(a1)
		move.b	#7,ost_mainspr_childsprites(a1)
		move.w	a0,$3E(a1)
		move.w	ost_x_pos(a0),d2
		move.w	d2,ost_x_pos(a1)
		move.w	ost_y_pos(a0),d3
		move.w	d3,ost_y_pos(a1)
		move.b	#-$80,$14(a1)
		bset	#render_useheight_bit,ost_render(a1)
		lea	ost_subspr2_x_pos(a1),a2
		moveq	#6,d6

loc_37FD6:				
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#2,(a2)+
		addi.w	#$10,d1
		dbf	d6,loc_37FD6

locret_37FE6:				
		rts	
; ===========================================================================
off_37FE8:	dc.l Map_37FF2	
		dc.w $23C0
		dc.w $404
		dc.w $800B
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_37FF2:				
		dc.w byte_37FF8-Map_37FF2			; 0
		dc.w byte_37FF8-Map_37FF2			; 1
		dc.w byte_38002-Map_37FF2			; 2
byte_37FF8:	dc.b   0,  1,$F8,  9,  0,  0,  0,  0,$FF,$F0	; 0	
byte_38002:	dc.b   0,  1,$F8,  5,  0,  6,  0,  3,$FF,$F8	; 0	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 9F - Shellcraker 
; ----------------------------------------------------------------------------

Shellcracker:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3801A(pc,d0.w),d1
		jmp	off_3801A(pc,d1.w)
; ===========================================================================
off_3801A:	dc.w loc_38022-off_3801A			; 0 
		dc.w loc_3804E-off_3801A			; 1
		dc.w loc_380C4-off_3801A			; 2
		dc.w loc_380FC-off_3801A			; 3
; ===========================================================================

loc_38022:				
		bsr.w	LoadSubtypeData
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_38034
		bset	#0,$22(a0)

loc_38034:				
		move.w	#-$40,ost_x_vel(a0)
		move.b	#$C,ost_height(a0)
		move.b	#$18,$17(a0)
		move.w	#$140,$2A(a0)
		rts	
; ===========================================================================

loc_3804E:				
		bsr.w	GetClosestPlayer
		tst.w	d0
		beq.s	loc_3805E
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_38068

loc_3805E:				
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcs.s	loc_380AE

loc_38068:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jsr	FindFloorObj
		cmpi.w	#-8,d1
		blt.s	loc_38096
		cmpi.w	#$C,d1
		bge.s	loc_38096
		add.w	d1,ost_y_pos(a0)
		subq.w	#1,$2A(a0)
		bmi.s	loc_3809A
		lea	(off_38304).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38096:				
		neg.w	ost_x_vel(a0)

loc_3809A:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#0,$1A(a0)
		move.w	#$3B,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_380AE:				
		move.b	#6,ost_primary_routine(a0)
		move.b	#0,$1A(a0)
		move.w	#8,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_380C4:				
		tst.b	ost_render(a0)
		bpl.s	loc_380E4
		bsr.w	GetClosestPlayer
		tst.w	d0
		beq.s	loc_380DA
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_380E4

loc_380DA:				
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcs.s	loc_380AE

loc_380E4:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_380EE
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_380EE:				
		subq.b	#2,ost_primary_routine(a0)
		move.w	#$140,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_380FC:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3810E(pc,d0.w),d1
		jsr	off_3810E(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3810E:	
		dc.w loc_38114-off_3810E			; 0 
		dc.w loc_3812A-off_3810E			; 1
		dc.w loc_3813E-off_3810E			; 2
; ===========================================================================

loc_38114:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3811C
		rts	
; ===========================================================================

loc_3811C:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		bra.w	loc_38292
; ===========================================================================

loc_3812A:				
		tst.b	$2C(a0)
		bne.s	loc_38132
		rts	
; ===========================================================================

loc_38132:				
		addq.b	#2,$25(a0)
		move.w	#$20,$2A(a0)
		rts	
; ===========================================================================

loc_3813E:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_38146
		rts	
; ===========================================================================

loc_38146:				
		clr.b	$25(a0)
		clr.b	$2C(a0)
		move.b	#2,ost_primary_routine(a0)
		move.w	#$140,$2A(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A0 - Shellcracker's claw 
; ----------------------------------------------------------------------------

ShellcrackerClaw:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3816A(pc,d0.w),d1
		jmp	off_3816A(pc,d1.w)
; ===========================================================================
off_3816A:	dc.w loc_38170-off_3816A			; 0 
		dc.w loc_381AC-off_3816A			; 1
		dc.w loc_38280-off_3816A			; 2
; ===========================================================================

loc_38170:				
		bsr.w	LoadSubtypeData
		movea.w	$2C(a0),a1
		move.b	ost_render(a1),d0
		andi.b	#1,d0
		or.b	d0,ost_render(a0)
		move.w	$2E(a0),d0
		beq.s	loc_38198
		move.b	#4,$1A(a0)
		addq.w	#6,ost_x_pos(a0)
		addq.w	#6,ost_y_pos(a0)

loc_38198:				
		lsr.w	#1,d0
		move.b	byte_381A4(pc,d0.w),$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
byte_381A4:	dc.b   0					; 0
		dc.b   3					; 1
		dc.b   5					; 2
		dc.b   7					; 3
		dc.b   9					; 4
		dc.b  $B					; 5
		dc.b  $D					; 6
		dc.b  $F					; 7
; ===========================================================================

loc_381AC:				
		movea.w	$2C(a0),a1
		cmpi.b	#id_Shellcracker,ost_id(a1)
		bne.s	loc_381D0
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_381C8(pc,d0.w),d1
		jsr	off_381C8(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_381C8:	dc.w loc_381E0-off_381C8			; 0 
		dc.w loc_3822A-off_381C8			; 1
		dc.w loc_38244-off_381C8			; 2
		dc.w loc_38258-off_381C8			; 3
; ===========================================================================

loc_381D0:				
		move.b	#4,ost_primary_routine(a0)
		move.w	#$40,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_381E0:				
		subq.b	#1,$2A(a0)
		beq.s	loc_381EA
		bmi.s	loc_381EA
		rts	
; ===========================================================================

loc_381EA:				
		addq.b	#2,$25(a0)
		move.w	$2E(a0),d0
		cmpi.w	#$E,d0
		bcc.s	loc_3821A
		move.w	#-$400,d2
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_38206
		neg.w	d2

loc_38206:				
		move.w	d2,ost_x_vel(a0)
		lsr.w	#1,d0
		move.b	byte_38222(pc,d0.w),d1
		move.b	d1,$2A(a0)
		move.b	d1,$2B(a0)
		rts	
; ===========================================================================

loc_3821A:				
		move.w	#$B,$2A(a0)
		rts	
; ===========================================================================
byte_38222:
		dc.b  $D					; 0
		dc.b  $C					; 1
		dc.b  $A					; 2
		dc.b   8					; 3
		dc.b   6					; 4
		dc.b   4					; 5
		dc.b   2					; 6
		dc.b   0					; 7
; ===========================================================================

loc_3822A:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		subq.b	#1,$2A(a0)
		beq.s	loc_38238
		bmi.s	loc_38238
		rts	
; ===========================================================================

loc_38238:				
		addq.b	#2,$25(a0)
		move.b	#8,$2A(a0)
		rts	
; ===========================================================================

loc_38244:				
		subq.b	#1,$2A(a0)
		beq.s	loc_3824E
		bmi.s	loc_3824E
		rts	
; ===========================================================================

loc_3824E:				
		addq.b	#2,$25(a0)
		neg.w	ost_x_vel(a0)
		rts	
; ===========================================================================

loc_38258:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		subq.b	#1,$2B(a0)
		beq.s	loc_38266
		bmi.s	loc_38266
		rts	
; ===========================================================================

loc_38266:				
		tst.w	$2E(a0)
		bne.s	loc_3827A
		movea.w	$2C(a0),a1
		move.b	#0,$1A(a1)
		st.b	$2C(a1)

loc_3827A:				
		addq.w	#4,sp
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_38280:				
		jsrto	ObjectFall,JmpTo8_ObjectFall
		subi_.w	#1,$2A(a0)
		bmi.w	JmpTo65_DeleteObject
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38292:				
		moveq	#0,d1
		moveq	#7,d6

loc_38296:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_382EE
		_move.b	#id_ShellcrackerClaw,ost_id(a1)
		move.b	#$26,$28(a1)
		move.b	#5,$1A(a1)
		move.b	#4,$18(a1)
		move.w	a0,$2C(a1)
		move.w	d1,$2E(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	#-$14,d2
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_382D8
		neg.w	d2
		tst.w	d1
		beq.s	loc_382D8
		subi.w	#$C,d2

loc_382D8:				
		add.w	d2,ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		subi_.w	#8,ost_y_pos(a1)
		addq.w	#2,d1
		dbf	d6,loc_38296

locret_382EE:				
		rts	
; ===========================================================================
off_382F0:	
		dc.l Map_38314	
		dc.w $31C
		dc.w $405
		dc.w $180A
		
off_382FA:	
		dc.l Map_38314	
		dc.w $31C
		dc.w $404
		dc.w $C9A

off_38304:	
		dc.w byte_38308-off_38304			; 0 
		dc.w byte_3830E-off_38304			; 1
byte_38308:	dc.b  $E,  0,  1,  2,$FF,  0			; 0	
byte_3830E:	dc.b  $E,  0,  2,  1,$FF,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_38314:				
		dc.w word_38320-Map_38314			; 0
		dc.w word_38342-Map_38314			; 1
		dc.w word_38364-Map_38314			; 2
		dc.w word_38386-Map_38314			; 3
		dc.w word_383A0-Map_38314			; 4
		dc.w word_383AA-Map_38314			; 5
word_38320:	dc.w 4			
		dc.w $EC0A,  $18,   $C,$FFE0			; 0
		dc.w $F804,  $21,  $10,	   8			; 4
		dc.w $F40A,    0,    0,$FFE8			; 8
		dc.w $F40A, $800, $800,	   0			; 12
word_38342:	dc.w 4			
		dc.w $EC0A,  $18,   $C,$FFE0			; 0
		dc.w $F804,  $21,  $10,	   8			; 4
		dc.w $F406, $812, $809,$FFF0			; 8
		dc.w $F40A, $809, $804,	   0			; 12
word_38364:	dc.w 4			
		dc.w $EC0A,  $18,   $C,$FFE0			; 0
		dc.w $F804,  $21,  $10,	   8			; 4
		dc.w $F40A,    9,    4,$FFE8			; 8
		dc.w $F406,  $12,    9,	   0			; 12
word_38386:	dc.w 3			
		dc.w $F804,  $21,  $10,	   8			; 0
		dc.w $F40A,    0,    0,$FFE8			; 4
		dc.w $F40A, $800, $800,	   0			; 8
word_383A0:	dc.w 1			
		dc.w $FC00,  $23,  $11,$FFFC			; 0
word_383AA:	dc.w 1			
		dc.w $F40A,  $18,   $C,$FFF4			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A1 - Slicer 
; ----------------------------------------------------------------------------

Slicer:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_383C2(pc,d0.w),d1
		jmp	off_383C2(pc,d1.w)
; ===========================================================================
off_383C2:	dc.w loc_383CC-off_383C2			; 0 
		dc.w loc_383F0-off_383C2			; 1
		dc.w loc_38466-off_383C2			; 2
		dc.w loc_38482-off_383C2			; 3
		dc.w loc_3849E-off_383C2			; 4
; ===========================================================================

loc_383CC:				
		bsr.w	LoadSubtypeData
		move.w	#-$40,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_383DE
		neg.w	d0

loc_383DE:				
		move.w	d0,ost_x_vel(a0)
		move.b	#$10,ost_height(a0)
		move.b	#$10,$17(a0)
		rts	
; ===========================================================================

loc_383F0:				
		tst.b	ost_render(a0)
		bpl.s	loc_3841C
		bsr.w	GetClosestPlayer
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_38404
		subq.w	#2,d0

loc_38404:				
		tst.w	d0
		bne.s	loc_3841C
		addi.w	#$80,d2	
		cmpi.w	#$100,d2
		bcc.s	loc_3841C
		addi.w	#$40,d3
		cmpi.w	#$80,d3	
		bcs.s	loc_38452

loc_3841C:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jsr	FindFloorObj
		cmpi.w	#-8,d1
		blt.s	loc_38444
		cmpi.w	#$C,d1
		bge.s	loc_38444
		add.w	d1,ost_y_pos(a0)
		lea	(off_385D4).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38444:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$3B,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38452:				
		addq.b	#4,ost_primary_routine(a0)
		move.b	#3,$1A(a0)
		move.b	#8,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38466:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_38470
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38470:				
		subq.b	#2,ost_primary_routine(a0)
		neg.w	ost_x_vel(a0)
		bchg	#0,$22(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38482:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_3848C
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3848C:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#4,$1A(a0)
		bsr.w	loc_3853E
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3849E:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A2 - Slicer's pincers 
; ----------------------------------------------------------------------------

SlicerPincers:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_384B0(pc,d0.w),d1
		jmp	off_384B0(pc,d1.w)
; ===========================================================================
off_384B0:	dc.w loc_384B6-off_384B0			; 0 
		dc.w loc_384BE-off_384B0			; 1
		dc.w loc_38524-off_384B0			; 2
; ===========================================================================

loc_384B6:				
		bsr.w	LoadSubtypeData
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_384BE:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo65_DeleteObject
		subq.w	#1,$2A(a0)
		bmi.s	loc_3851A
		movea.w	$2C(a0),a1
		cmpi.b	#-$5F,(a1)
		bne.s	loc_3851A
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_384F6(pc,d0.w),d1
		jsr	off_384F6(pc,d1.w)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_385DA).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_384F6:	dc.w loc_384F8-off_384F6
; ===========================================================================

loc_384F8:				
		bsr.w	GetClosestPlayer
		move.w	word_38516(pc,d0.w),d2
		add.w	d2,ost_x_vel(a0)
		move.w	word_38516(pc,d1.w),d2
		add.w	d2,ost_y_vel(a0)
		move.w	#$200,d0
		move.w	d0,d1
		bra.w	ObjCapSpeed
; ===========================================================================
word_38516:
		dc.w $FFF0					; 0
		dc.w   $10					; 1
; ===========================================================================

loc_3851A:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$60,$2A(a0)

loc_38524:				
		subq.w	#1,$2A(a0)
		bmi.w	JmpTo65_DeleteObject
		jsrto	ObjectFall,JmpTo8_ObjectFall
		lea	(off_385DA).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3853E:				
		lea	$3C(a0),a2
		moveq	#0,d1
		moveq	#1,d6

loc_38546:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_385BA
		_move.b	#id_SlicerPincers,ost_id(a1)
		move.b	#$2A,$28(a1)
		move.b	ost_render(a0),ost_render(a1)
		move.b	#5,$1A(a1)
		move.b	#4,$18(a1)
		move.w	#$78,$2A(a1)
		move.w	a0,$2C(a1)
		move.w	a1,(a2)+
		move.w	#-$200,d0
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_3858A
		neg.w	d0
		bset	#0,$22(a1)

loc_3858A:				
		move.w	d0,ost_x_vel(a1)
		lea	byte_385BC(pc,d1.w),a3
		move.b	(a3)+,d0
		ext.w	d0
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_385A0
		neg.w	d0

loc_385A0:				
		add.w	ost_x_pos(a0),d0
		move.w	d0,ost_x_pos(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	ost_y_pos(a0),d0
		move.w	d0,ost_y_pos(a1)
		addq.w	#2,d1
		dbf	d6,loc_38546

locret_385BA:				
		rts	
; ===========================================================================
byte_385BC:	dc.b   6					; 0
		dc.b   0					; 1
		dc.b $F0					; 2
		dc.b   0					; 3
off_385C0:	dc.l Map_385E2	
		dc.w $243C
		dc.w $405
		dc.w $1006
off_385CA:	dc.l Map_385E2	
		dc.w $243C
		dc.w $404
		dc.w $109A
off_385D4:	dc.w byte_385D6-off_385D4 
byte_385D6:	dc.b $13,  0,  2,$FF				; 0 
off_385DA:	dc.w byte_385DC-off_385DA 
byte_385DC:	dc.b   3,  5,  6,  7,  8,$FF			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_385E2:				
		dc.w word_385F4-Map_385E2			; 0
		dc.w word_3862E-Map_385E2			; 1
		dc.w word_38668-Map_385E2			; 2
		dc.w word_386A2-Map_385E2			; 3
		dc.w word_386DC-Map_385E2			; 4
		dc.w word_386F6-Map_385E2			; 5
		dc.w word_38708-Map_385E2			; 6
		dc.w word_3871A-Map_385E2			; 7
		dc.w word_3872C-Map_385E2			; 8
word_385F4:	dc.w 7			
		dc.w $F904,  $1A,   $D,$FFF4			; 0
		dc.w  $100,  $1C,   $E,$FFF4			; 4
		dc.w $F009,    0,    0,$FFF0			; 8
		dc.w	 9,    6,    3,$FFF0			; 12
		dc.w	 1,   $C,    6,	   8			; 16
		dc.w $F704,  $1A,   $D,$FFE0			; 20
		dc.w $FF00,  $1C,   $E,$FFE0			; 24
word_3862E:	dc.w 7			
		dc.w $F804,  $1A,   $D,$FFF4			; 0
		dc.w	 0,  $1C,   $E,$FFF4			; 4
		dc.w $F009,    0,    0,$FFF0			; 8
		dc.w	 9,   $E,    7,$FFF0			; 12
		dc.w	 1,   $C,    6,	   8			; 16
		dc.w $F804,  $1A,   $D,$FFE0			; 20
		dc.w	 0,  $1C,   $E,$FFE0			; 24
word_38668:	dc.w 7			
		dc.w $F704,  $1A,   $D,$FFF4			; 0
		dc.w $FF00,  $1C,   $E,$FFF4			; 4
		dc.w $F009,    0,    0,$FFF0			; 8
		dc.w	 9,  $14,   $A,$FFF0			; 12
		dc.w	 1,   $C,    6,	   8			; 16
		dc.w $F904,  $1A,   $D,$FFE0			; 20
		dc.w  $100,  $1C,   $E,$FFE0			; 24
word_386A2:	dc.w 7			
		dc.w $E004,$181E,$180F,$FFF4			; 0
		dc.w $E800,$181D,$180E,$FFFC			; 4
		dc.w $F009,    0,    0,$FFF0			; 8
		dc.w	 9,    6,    3,$FFF0			; 12
		dc.w	 1,   $C,    6,	   8			; 16
		dc.w $E004,$181E,$180F,$FFE0			; 20
		dc.w $E800,$181D,$180E,$FFE8			; 24
word_386DC:	dc.w 3			
		dc.w $F009,    0,    0,$FFF0			; 0
		dc.w	 9,    6,    3,$FFF0			; 4
		dc.w	 1,   $C,    6,	   8			; 8
word_386F6:	dc.w 2			
		dc.w $F004,  $1A,   $D,$FFF0			; 0
		dc.w $F800,  $1C,   $E,$FFF0			; 4
word_38708:	dc.w 2			
		dc.w	 0,  $1D,   $E,$FFF0			; 0
		dc.w  $804,  $1E,   $F,$FFF0			; 4
word_3871A:	dc.w 2			
		dc.w	 0,$181C,$180E,	   8
		dc.w  $804,$181A,$180D,	   0
word_3872C:	dc.w 2			
		dc.w $F004,$181E,$180F,	   0			; 0
		dc.w $F800,$181D,$180E,	   8			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A3 - Flasher 
; ----------------------------------------------------------------------------

Flasher:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3874C(pc,d0.w),d1
		jmp	off_3874C(pc,d1.w)
; ===========================================================================
off_3874C:	dc.w loc_3875A-off_3874C			; 0 
		dc.w loc_38766-off_3874C			; 1
		dc.w loc_38794-off_3874C			; 2
		dc.w loc_38832-off_3874C			; 3
		dc.w loc_3885C-off_3874C			; 4
		dc.w loc_38880-off_3874C			; 5
		dc.w loc_3888E-off_3874C			; 6
; ===========================================================================

loc_3875A:				
		bsr.w	LoadSubtypeData
		move.w	#$40,$2A(a0)
		rts	
; ===========================================================================

loc_38766:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_38770
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_38770:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#-$100,ost_x_vel(a0)
		move.w	#$40,ost_y_vel(a0)
		move.w	#2,$2E(a0)
		clr.w	$2A(a0)
		move.w	#$80,$30(a0)
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_38794:				
		subq.w	#1,$30(a0)
		bmi.s	loc_387FC
		move.w	$2A(a0),d0
		bmi.w	JmpTo65_DeleteObject
		bclr	#render_xflip_bit,ost_render(a0)
		bclr	#0,$22(a0)
		tst.w	ost_x_vel(a0)
		bmi.s	loc_387C0
		bset	#render_xflip_bit,ost_render(a0)
		bset	#0,$22(a0)

loc_387C0:				
		addq.w	#1,d0
		move.w	d0,$2A(a0)
		move.w	$2C(a0),d1
		move.w	word_38810(pc,d1.w),d2
		cmp.w	d2,d0
		bcs.s	loc_387EC
		addq.w	#2,d1
		move.w	d1,$2C(a0)
		lea	byte_38820(pc,d1.w),a1
		tst.b	(a1)+
		beq.s	loc_387E4
		neg.w	$2E(a0)

loc_387E4:				
		tst.b	(a1)+
		beq.s	loc_387EC
		neg.w	ost_y_vel(a0)

loc_387EC:				
		move.w	$2E(a0),d0
		add.w	d0,ost_x_vel(a0)

loc_387F4:
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_387FC:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$80,$30(a0)
		ori.b	#-$80,$20(a0)
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================
word_38810:	dc.w  $100					; 0
		dc.w  $1A0					; 1
		dc.w  $208					; 2
		dc.w  $285					; 3
		dc.w  $300					; 4
		dc.w  $340					; 5
		dc.w  $390					; 6
		dc.w  $440					; 7
byte_38820:	dc.b $F0					; 0
		dc.b   0					; 1
		dc.b   1					; 2
		dc.b   1					; 3
		dc.b   0					; 4
		dc.b   1					; 5
		dc.b   1					; 6
		dc.b   1					; 7
		dc.b   0					; 8
		dc.b   1					; 9
		dc.b   0					; 10
		dc.b   1					; 11
		dc.b   1					; 12
		dc.b   0					; 13
		dc.b   0					; 14
		dc.b   1					; 15
		dc.b   0					; 16
		dc.b   1					; 17
; ===========================================================================

loc_38832:				
		move.b	ost_primary_routine(a0),d2
		lea	(off_388B6).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		cmp.b	ost_primary_routine(a0),d2
		bne.s	loc_3884A
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_3884A:				
		clr.l	$1A(a0)
		clr.w	$1E(a0)
		move.b	#3,$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3885C:				
		subq.w	#1,$30(a0)
		bmi.s	loc_38870
		lea	(off_388DA).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_38870:				
		addq.b	#2,ost_primary_routine(a0)
		clr.l	$1A(a0)
		clr.w	$1E(a0)
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_38880:				
		lea	(off_388E6).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================

loc_3888E:				
		move.b	#4,ost_primary_routine(a0)
		move.w	#$80,$30(a0)
		andi.b	#$7F,$20(a0)
		clr.l	$1A(a0)
		clr.w	$1E(a0)
		jmpto	DespawnObject_P1,JmpTo2_DespawnObject_P1
; ===========================================================================
off_388AC:	dc.l Map_388F0	
		dc.w $83A8
		dc.w $404
		dc.w $1006
off_388B6:	dc.w byte_388B8-off_388B6 
byte_388B8:	dc.b   0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  1 ; 0
					
		dc.b   0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  2,  3,  4 ; 16
		dc.b $FC,  0					; 32
off_388DA:	dc.w byte_388DC-off_388DA 
byte_388DC:	dc.b   0,  2,  0,  3,  0,  4,  0,  3,  0,$FF	; 0	
off_388E6:	dc.w Map_388E8-off_388E6 
Map_388E8:				
		dc.b   3,  4,  3,  2,  1,  0,$FC,  0		; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_388F0:				
		dc.w word_388FA-Map_388F0			; 0
		dc.w word_38904-Map_388F0			; 1
		dc.w word_38916-Map_388F0			; 2
		dc.w word_38938-Map_388F0			; 3
		dc.w word_3896A-Map_388F0			; 4
word_388FA:	dc.w 1			
		dc.w $F809,    0,    0,$FFF0			; 0
word_38904:	dc.w 2			
		dc.w $F805,$2006,$2003,$FFF8			; 0
		dc.w $F809,    0,    0,$FFF0			; 4
word_38916:	dc.w 4			
		dc.w $F801,$200A,$2005,$FFF8			; 0
		dc.w $F801,$280A,$2805,	   0			; 4
		dc.w $F805,$2006,$2003,$FFF8			; 8
		dc.w $F809,    0,    0,$FFF0			; 12
word_38938:	dc.w 6			
		dc.w $F005,$200C,$2006,$FFF0			; 0
		dc.w $F005,$280C,$2806,	   0			; 4
		dc.w	 5,$300C,$3006,$FFF0			; 8
		dc.w	 5,$380C,$3806,	   0			; 12
		dc.w $F805,$2006,$2003,$FFF8			; 16
		dc.w $F809,    0,    0,$FFF0			; 20
word_3896A:	dc.w 6			
		dc.w $F005,$2010,$2008,$FFF0			; 0
		dc.w $F005,$2810,$2808,	   0			; 4
		dc.w	 5,$3010,$3008,$FFF0			; 8
		dc.w	 5,$3810,$3808,	   0			; 12
		dc.w $F805,$2006,$2003,$FFF8			; 16
		dc.w $F809,    0,    0,$FFF0			; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A4 - Asteron 
; ----------------------------------------------------------------------------

Asteron:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_389AA(pc,d0.w),d1
		jmp	off_389AA(pc,d1.w)
; ===========================================================================
off_389AA:	dc.w loc_389B2-off_389AA			; 0 
		dc.w loc_389B6-off_389AA			; 1
		dc.w loc_389DA-off_389AA			; 2
		dc.w loc_38A2C-off_389AA			; 3
; ===========================================================================

loc_389B2:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_389B6:				
		bsr.w	GetClosestPlayer
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcc.s	loc_389CE
		addi.w	#$40,d3
		cmpi.w	#$80,d3	
		bcs.s	loc_389D2

loc_389CE:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_389D2:				
		addq.b	#2,ost_primary_routine(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_389DA:				
		bsr.w	GetClosestPlayer
		tst.w	d2
		bpl.s	loc_389E4
		neg.w	d2

loc_389E4:				
		cmpi.w	#$10,d2
		bcs.s	loc_389FA
		cmpi.w	#$60,d2
		bcc.s	loc_389FA
		move.w	word_38A1A(pc,d0.w),ost_x_vel(a0)
		bsr.w	loc_38A1E

loc_389FA:				
		tst.w	d3
		bpl.s	loc_38A00
		neg.w	d3

loc_38A00:				
		cmpi.w	#$10,d3
		bcs.s	loc_38A16
		cmpi.w	#$60,d3
		bcc.s	loc_38A16
		move.w	word_38A1A(pc,d1.w),ost_y_vel(a0)
		bsr.w	loc_38A1E

loc_38A16:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
word_38A1A:	dc.w $FFC0					; 0
		dc.w   $40					; 1
; ===========================================================================

loc_38A1E:				
		move.b	#6,ost_primary_routine(a0)
		move.b	#$40,$2A(a0)
		rts	
; ===========================================================================

loc_38A2C:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_38A44
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_38A90).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38A44:				
		_move.b	#id_ExplosionItem,ost_id(a0)
		move.b	#2,ost_primary_routine(a0)
		bsr.w	loc_38A58
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38A58:				
		move.b	#$30,d2
		moveq	#4,d6
		lea	(word_38A68).l,a2
		bra.w	SpawnProjectiles
; ===========================================================================
word_38A68:	; projectile data
		dc.w $F8
		dc.w $FC
		dc.w $200
		dc.w $8FC
		dc.w $3FF
		dc.w $301
		dc.w $808
		dc.w $303
		dc.w $401
		dc.w $F808
		dc.w $FD03
		dc.w $400
		dc.w $F8FC
		dc.w $FDFF
		dc.w $300
		
off_38A86:	dc.l Map_38A96	
		dc.w $8368
		dc.w $404
		dc.w $100B
off_38A90:	dc.w Map_38A92-off_38A90 
Map_38A92:				
		dc.b   1,  0,  1,$FF				; 0
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_38A96:	dc.w word_38AA0-Map_38A96			; 0	
		dc.w word_38AB2-Map_38A96			; 1
		dc.w word_38ACC-Map_38A96			; 2
		dc.w word_38AD6-Map_38A96			; 3
		dc.w word_38AE0-Map_38A96			; 4
word_38AA0:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0			; 0
		dc.w $F007, $800, $800,	   0			; 4
word_38AB2:	dc.w 3			
		dc.w $FD00,$200E,$2007,$FFFC			; 0
		dc.w $F007,    0,    0,$FFF0			; 4
		dc.w $F007, $800, $800,	   0			; 8
word_38ACC:	dc.w 1			
		dc.w $F801,    8,    4,$FFFC			; 0
word_38AD6:	dc.w 1			
		dc.w $FC04,   $A,    5,$FFF8			; 0
word_38AE0:	dc.w 1			
		dc.w $F801,   $C,    6,$FFFC			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A5 - Spiny (on floor)
; ----------------------------------------------------------------------------

Spiny:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_38AF8(pc,d0.w),d1
		jmp	off_38AF8(pc,d1.w)
; ===========================================================================
off_38AF8:	dc.w loc_38AFE-off_38AF8			; 0 
		dc.w loc_38B10-off_38AF8			; 1
		dc.w loc_38B62-off_38AF8			; 2
; ===========================================================================

loc_38AFE:				
		bsr.w	LoadSubtypeData
		move.w	#-$40,ost_x_vel(a0)
		move.w	#$80,$2A(a0)
		rts	
; ===========================================================================

loc_38B10:				
		tst.b	$2B(a0)
		beq.s	loc_38B1E
		subq.b	#1,$2B(a0)
		bra.w	loc_38B2C
; ===========================================================================

loc_38B1E:				
		bsr.w	GetClosestPlayer
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcs.s	loc_38B4E

loc_38B2C:				
		subq.b	#1,$2A(a0)
		bne.s	loc_38B3C
		move.w	#$80,$2A(a0)
		neg.w	ost_x_vel(a0)

loc_38B3C:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_38CB8).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38B4E:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$28,$2B(a0)
		move.b	#2,$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38B62:				
		subq.b	#1,$2B(a0)
		bmi.s	loc_38B78
		cmpi.b	#$14,$2B(a0)
		bne.s	loc_38B74
		bsr.w	loc_38C22

loc_38B74:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38B78:				
		subq.b	#2,ost_primary_routine(a0)
		move.b	#$40,$2B(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A6 - Spiny (on wall)
; ----------------------------------------------------------------------------

SpinyWall:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_38B94(pc,d0.w),d1
		jmp	off_38B94(pc,d1.w)
; ===========================================================================
off_38B94:	dc.w loc_38B9A-off_38B94			; 0 
		dc.w loc_38BAC-off_38B94			; 1
		dc.w loc_38BFE-off_38B94			; 2
; ===========================================================================

loc_38B9A:				
		bsr.w	LoadSubtypeData
		move.w	#-$40,ost_y_vel(a0)
		move.w	#$80,$2A(a0)
		rts	
; ===========================================================================

loc_38BAC:				
		tst.b	$2B(a0)
		beq.s	loc_38BBA
		subq.b	#1,$2B(a0)
		bra.w	loc_38BC8
; ===========================================================================

loc_38BBA:				
		bsr.w	GetClosestPlayer
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcs.s	loc_38BEA

loc_38BC8:				
		subq.b	#1,$2A(a0)
		bne.s	loc_38BD8
		move.w	#$80,$2A(a0)
		neg.w	ost_y_vel(a0)

loc_38BD8:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_38CBE).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38BEA:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#$28,$2B(a0)
		move.b	#5,$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38BFE:				
		subq.b	#1,$2B(a0)
		bmi.s	loc_38C14
		cmpi.b	#$14,$2B(a0)
		bne.s	loc_38C10
		bsr.w	loc_38C6E

loc_38C10:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38C14:				
		subq.b	#2,ost_primary_routine(a0)
		move.b	#$40,$2B(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_38C22:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_38C6C
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#6,$1A(a1)
		move.b	#$34,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#-$300,ost_y_vel(a1)
		move.w	#$100,d1
		lea	($FFFFB000).w,a2
		move.w	ost_x_pos(a0),d0
		cmp.w	ost_x_pos(a2),d0
		bcs.s	loc_38C60
		neg.w	d1

loc_38C60:				
		move.w	d1,ost_x_vel(a1)
		lea_	loc_37742,a2
		move.l	a2,$2A(a1)

locret_38C6C:				
		rts	
; ===========================================================================

loc_38C6E:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_38CAC
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#6,$1A(a1)
		move.b	#$34,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	#$300,d1
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_38CA0
		neg.w	d1

loc_38CA0:				
		move.w	d1,ost_x_vel(a1)
		lea_	loc_37742,a2
		move.l	a2,$2A(a1)

locret_38CAC:				
		rts	
; ===========================================================================
off_38CAE:	dc.l Map_38CCA	
		dc.w $252D
		dc.w $404
		dc.w $80B
off_38CB8:	dc.w byte_38CBA-off_38CB8 
byte_38CBA:	dc.b   9,  0,  1,$FF				; 0 
off_38CBE:	dc.w byte_38CC0-off_38CBE 
byte_38CC0:	dc.b   9,  3,  4,$FF				; 0 
off_38CC4:	dc.w byte_38CC6-off_38CC4 
byte_38CC6:	dc.b   3,  6,  7,$FF				; 0 
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Map_38CCA:	dc.w byte_38CD6-byte_38CC6			; 0 ;
		dc.w byte_38CF8-byte_38CC6			; 1
		dc.w byte_38D1A-byte_38CC6			; 2
		dc.w Map_38D3C-byte_38CC6			; 3
		dc.w byte_38D5E-byte_38CC6			; 4
		dc.w byte_38D80-byte_38CC6			; 5
byte_38CD6:	dc.b   0,$DC,  0,$E6,  0,  4,$F4,  0,  0,  0,  0,  0,$FF,$F8,$FC,  9 ; 0
					
		dc.b   0,  1,  0,  0,$FF,$E8,$F4,  0,  8,  0,  8,  0,  0,  0,$FC,  9 ; 16
		dc.b   8,  1					; 32
byte_38CF8:	dc.b   8,  0,  0,  0,  0,  4,$F4,  0,  0,  0,  0,  0,$FF,$F8,$FC,  9 ; 0
					
		dc.b   0,  7,  0,  3,$FF,$E8,$F4,  0,  8,  0,  8,  0,  0,  0,$FC,  9 ; 16
		dc.b   8,  7					; 32
byte_38D1A:	dc.b   8,  3,  0,  0,  0,  4,$F4,  4,  0, $D,  0,  6,$FF,$F0,$FC,  9 ; 0
					
		dc.b   0,  1,  0,  0,$FF,$E8,$F4,  4,  8, $D,  8,  6,  0,  0,$FC,  9 ; 16
		dc.b   8,  1					; 32
Map_38D3C:				
		dc.b   8,  0,  0,  0,  0,  4,$E8,  6,  0, $F,  0,  7,$FF,$F4,$F8,  0 ; 0
		dc.b   0,$15,  0, $A,  0,  4,  0,  6,$10, $F,$10,  7,$FF,$F4,  0,  0 ; 16
		dc.b $10,$15					; 32
byte_38D5E:	dc.b $10, $A,  0,  4,  0,  4,$E8,  6,  0,$16,  0, $B,$FF,$F4,$F8,  0 ; 0
					
		dc.b   0,$15,  0, $A,  0,  4,  0,  6,$10,$16,$10, $B,$FF,$F4,  0,  0 ; 16
		dc.b $10,$15					; 32
byte_38D80:	dc.b $10, $A,  0,  4,  0,  4,$E8,  6,  0, $F,  0,  7,$FF,$F4,$F0,  1 ; 0
					
		dc.b   0,$1C,  0, $E,  0,  4,  0,  6,$10, $F,$10,  7,$FF,$F4,  0,  1 ; 16
		dc.b $10,$1C,$10, $E,  0,  4,  0,  1,$FC,  0,  0,$1E,  0, $F,$FF,$FC ; 32
		dc.b   0,  1,$FC,  0,  0,$1F,  0, $F,$FF,$FC	; 48
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A7 - Grabber 
; A complex multi-object item like the bosses, but unlike them, the individual
; components are completely different objects instead of subtypes of the same
; object.
; ----------------------------------------------------------------------------

Grabber:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_38DC8(pc,d0.w),d1
		jmp	off_38DC8(pc,d1.w)
; ===========================================================================
off_38DC8:	
		dc.w loc_38DCC-off_38DC8			; 0 
		dc.w loc_38E0C-off_38DC8			; 1
; ===========================================================================

loc_38DCC:				
		bsr.w	LoadSubtypeData
		move.w	#-$40,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_38DDE
		neg.w	d0

loc_38DDE:				
		move.w	d0,ost_x_vel(a0)
		move.w	#$FF,$2A(a0)
		move.b	#2,$2D(a0)
		lea	(byte_391E0).l,a2
		bsr.w	LoadChild
		lea	(byte_391E4).l,a2
		bsr.w	LoadChild
		lea	(byte_391E8).l,a2
		bra.w	LoadChild
; ===========================================================================

loc_38E0C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_38E46(pc,d0.w),d1
		jsr	off_38E46(pc,d1.w)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		moveq	#0,d0
		moveq	#$10,d1
		movea.w	$3C(a0),a1
		bsr.w	AlignChildXY
		movea.w	$3E(a0),a1
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		movea.w	$3A(a0),a1
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		lea	$3A(a0),a2
		bra.w	loc_39182
; ===========================================================================
off_38E46:	
		dc.w loc_38E52-off_38E46			; 0 
		dc.w loc_38E9A-off_38E46			; 1
		dc.w loc_38EB4-off_38E46			; 2
		dc.w loc_38F3E-off_38E46			; 3
		dc.w loc_38F58-off_38E46			; 4
		dc.w loc_38F62-off_38E46			; 5
; ===========================================================================

loc_38E52:				
		bsr.w	GetClosestPlayer
		addi.w	#$40,d2
		cmpi.w	#$80,d2	
		bcc.s	loc_38E66
		cmpi.w	#-$80,d3
		bhi.s	loc_38E84

loc_38E66:				
		subq.w	#1,$2A(a0)
		bpl.s	locret_38E82
		move.w	#$FF,$2A(a0)
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		bchg	#0,$22(a0)

locret_38E82:				
		rts	
; ===========================================================================

loc_38E84:				
		addq.b	#2,$25(a0)
		move.w	ost_x_vel(a0),$2E(a0)
		clr.w	ost_x_vel(a0)
		move.b	#$10,$2C(a0)
		rts	
; ===========================================================================

loc_38E9A:				
		subq.b	#1,$2C(a0)
		bmi.s	loc_38EA2
		rts	
; ===========================================================================

loc_38EA2:				
		addq.b	#2,$25(a0)
		move.w	#$200,ost_y_vel(a0)
		move.b	#$40,$2C(a0)
		rts	
; ===========================================================================

loc_38EB4:				
		tst.b	$30(a0)
		bne.s	loc_38EEE
		subq.b	#1,$2C(a0)
		beq.s	loc_38ED6
		cmpi.b	#$20,$2C(a0)
		bne.s	loc_38ECC
		neg.w	ost_y_vel(a0)

loc_38ECC:				
		lea	(off_39214).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_38ED6:				
		move.b	#0,$25(a0)
		clr.w	ost_y_vel(a0)
		move.w	$2E(a0),ost_x_vel(a0)
		move.b	#0,$1A(a0)
		rts	
; ===========================================================================

loc_38EEE:				
		addq.b	#2,$25(a0)
		movea.w	$32(a0),a1
		move.b	#-$7F,$2A(a1)
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		move.b	#$E,$1C(a1)
		move.b	#1,$1A(a0)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_38F2A
		neg.w	ost_y_vel(a0)
		move.b	$2C(a0),d0
		subi.b	#$40,d0
		neg.w	d0
		addq.b	#1,d0
		move.b	d0,$2C(a0)

loc_38F2A:				
		move.b	#1,$2A(a0)
		move.b	#$10,$2B(a0)
		move.b	#$20,$37(a0)
		rts	
; ===========================================================================

loc_38F3E:				
		bsr.w	loc_3913A
		bsr.w	loc_390BC
		subq.b	#1,$2C(a0)
		beq.s	loc_38F4E
		rts	
; ===========================================================================

loc_38F4E:				
		addq.b	#2,$25(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_38F58:				
		bsr.w	loc_3913A
		bra.w	loc_390BC
; ===========================================================================
		rts						; dead code
; ===========================================================================

loc_38F62:				
		bra.w	loc_3913A
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A8 - Grabber's legs 
; ----------------------------------------------------------------------------

GrabberLegs:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_38F74(pc,d0.w),d1
		jmp	off_38F74(pc,d1.w)
; ===========================================================================
off_38F74:	
		dc.w loc_38F7C-off_38F74			; 0 
		dc.w loc_38F88-off_38F74			; 1
		dc.w loc_38FE8-off_38F74			; 2
		dc.w loc_39022-off_38F74			; 3
; ===========================================================================

loc_38F7C:				
		bsr.w	LoadSubtypeData
		move.b	#3,$1A(a0)
		rts	
; ===========================================================================

loc_38F88:				
		movea.w	$2C(a0),a1
		cmpi.b	#id_Grabber,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		bsr.w	InheritParentXYFlip
		movea.w	$2C(a0),a1
		move.b	$1A(a1),d0
		addq.b	#3,d0
		move.b	d0,$1A(a0)
		move.b	$21(a0),d0
		beq.s	loc_38FD8
		clr.b	$21(a0)
		cmpi.b	#4,$25(a1)
		bne.s	loc_38FD8
		andi.b	#3,d0
		beq.s	loc_38FD8
		clr.b	$20(a0)
		addq.b	#2,ost_primary_routine(a0)
		add.w	d0,d0
		st.b	$30(a1)
		move.w	word_38FE0-6(pc,d0.w),$32(a1)		; index base is in middle of below bra/jmp
		move.w	word_38FE0(pc,d0.w),$34(a1)

loc_38FD8:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
		dc.w v_ost_player1&$FFFF			; 1
		dc.w v_ost_player2&$FFFF			; 2

word_38FE0:	
		dc.w v_ost_player1&$FFFF			; 0
		dc.w v_joypad_hold_actual&$FFFF			; 1
		dc.w v_joypad2_hold_actual&$FFFF		; 2
		dc.w v_joypad_hold_actual&$FFFF			; 3
; ===========================================================================

loc_38FE8:				
		movea.w	$2C(a0),a1
		move.w	$32(a1),d0
		beq.s	loc_3901A
		movea.w	d0,a2
		cmpi.b	#id_Grabber,ost_id(a1)
		bne.s	loc_3900A
		move.w	ost_x_pos(a0),ost_x_pos(a2)
		move.w	ost_y_pos(a0),ost_y_pos(a2)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3900A:				
		move.b	#0,$2A(a2)
		bset	#1,$22(a2)
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3901A:				
		addq.b	#2,ost_primary_routine(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39022:				
		movea.w	$2C(a0),a1
		cmpi.b	#id_Grabber,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object A9 - Grabber's box
; ----------------------------------------------------------------------------

GrabberBox:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_39040(pc,d0.w),d1
		jmp	off_39040(pc,d1.w)
; ===========================================================================
off_39040:	dc.w loc_39044-off_39040			; 0 
		dc.w loc_39056-off_39040			; 1
; ===========================================================================

loc_39044:				
		bsr.w	LoadSubtypeData
		move.b	#2,$1A(a0)
		subi.w	#$C,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_39056:				
		movea.w	$2C(a0),a1
		cmpi.b	#id_Grabber,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AA - Grabber's string
; ----------------------------------------------------------------------------

GrabberString:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_39074(pc,d0.w),d1
		jmp	off_39074(pc,d1.w)
; ===========================================================================
off_39074:	
		dc.w loc_39078-off_39074			; 0 
		dc.w loc_39082-off_39074			; 1
; ===========================================================================

loc_39078:				
		bsr.w	LoadSubtypeData
		subq.w	#8,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_39082:				
		movea.w	$2C(a0),a1
		cmpi.b	#id_Grabber,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		move.w	ost_y_pos(a1),d0
		sub.w	ost_y_pos(a0),d0
		bmi.s	loc_3909E
		lsr.w	#4,d0
		move.b	d0,$1A(a0)

loc_3909E:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AB - Removed object 
; ----------------------------------------------------------------------------

Unknown1:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_390B0(pc,d0.w),d1
		jmp	off_390B0(pc,d1.w)
; ===========================================================================
off_390B0:	dc.w loc_390B4-off_390B0			; 0 
		dc.w loc_390B8-off_390B0			; 1
; ===========================================================================

loc_390B4:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_390B8:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_390BC:				
		movea.w	$34(a0),a1
		move.w	(a1),d0
		tst.b	$31(a0)
		beq.s	loc_390E6
		subq.b	#1,$37(a0)
		beq.s	loc_390FA
		move.b	$36(a0),d1
		andi.b	#$C,d0
		beq.s	locret_390E4
		cmp.b	d1,d0
		beq.s	locret_390E4
		move.b	d0,$36(a0)
		addq.b	#1,$38(a0)

locret_390E4:				
		rts	
; ===========================================================================

loc_390E6:				
		andi.b	#$C,d0
		beq.s	locret_390E4
		nop	
		st.b	$31(a0)
		move.b	d0,$36(a0)
		nop	
		rts	
; ===========================================================================

loc_390FA:				
		cmpi.b	#4,$38(a0)
		bcs.s	loc_3912A
		move.b	#$A,$25(a0)
		clr.w	ost_y_vel(a0)
		clr.b	$20(a0)
		movea.w	$32(a0),a2
		move.b	#0,$2A(a2)
		bset	#1,$22(a2)
		move.b	#0,$1C(a2)
		clr.w	$32(a0)

loc_3912A:				
		move.b	#$20,$37(a0)
		clr.b	$31(a0)
		clr.b	$38(a0)
		rts	
; ===========================================================================

loc_3913A:				
		subq.b	#1,$2A(a0)
		bne.s	locret_39152
		move.b	$2B(a0),$2A(a0)
		subq.b	#1,$2B(a0)
		beq.s	loc_39154
		bchg	#tile_pal12_bit,ost_tile(a0)

locret_39152:				
		rts	
; ===========================================================================

loc_39154:				
		_move.b	#id_ExplosionItem,ost_id(a0)
		move.b	#2,ost_primary_routine(a0)
		bset	#tile_pal12_bit,ost_tile(a0)
		move.w	$32(a0),d0
		beq.s	locret_39180
		movea.w	d0,a2
		move.b	#0,$2A(a2)
		bset	#1,$22(a2)
		move.b	#$B,$20(a0)

locret_39180:				
		rts	
; ===========================================================================

loc_39182:				
		tst.w	(f_two_player).w
		beq.s	loc_3918C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3918C:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_391A4
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_391A4:				
		lea	(v_respawn_list).w,a3
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_391B6
		bclr	#7,2(a3,d0.w)

loc_391B6:				
		tst.b	$30(a0)
		beq.s	loc_391CC
		movea.w	$32(a0),a3
		move.b	#0,$2A(a3)
		bset	#1,$22(a3)

loc_391CC:				
		moveq	#0,d6
		move.b	$2D(a0),d6

loc_391D2:				
		movea.w	(a2)+,a1
		jsrto	DeleteChild,JmpTo6_DeleteChild
		dbf	d6,loc_391D2
		bra.w	JmpTo65_DeleteObject
; ===========================================================================
byte_391E0:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $A9					; 2
		dc.b $3A					; 3
byte_391E4:	dc.b   0					; 0 
		dc.b $3C					; 1
		dc.b $A8					; 2
		dc.b $38					; 3
byte_391E8:	dc.b   0					; 0 
		dc.b $3A					; 1
		dc.b $AA					; 2
		dc.b $3C					; 3
off_391EC:	dc.l Map_3921A					; 0 
		dc.w $A500
		dc.w $404
		dc.w $100B
off_391F6:	dc.l Map_3921A	
		dc.w $A500
		dc.w $401
		dc.w $10D7
off_39200:	dc.l Map_3921A	
		dc.w $A500
		dc.w $404
		dc.w $400
off_3920A:	dc.l Map_39228	
		dc.w $A500
		dc.w $405
		dc.w $400
off_39214:	dc.w byte_39216-off_39214 
byte_39216:	dc.b   7,  0,  1,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3921A:				
		dc.w word_3923A-Map_3921A			; 0
		dc.w word_39254-Map_3921A			; 1
		dc.w word_3926E-Map_3921A			; 2
		dc.w word_39278-Map_3921A			; 3
		dc.w word_39282-Map_3921A			; 4
		dc.w word_3928C-Map_3921A			; 5
		dc.w word_39296-Map_3921A			; 6
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_39228:				
		dc.w word_392A0-Map_39228			; 0
		dc.w word_392AA-Map_39228			; 1
		dc.w word_392B4-Map_39228			; 2
		dc.w word_392C6-Map_39228			; 3
		dc.w word_392D8-Map_39228			; 4
		dc.w word_3930C-Map_39228			; 5
		dc.w word_392F2-Map_39228			; 6
		dc.w word_3932E-Map_39228			; 7
		dc.w word_3932E-Map_39228			; 8
word_3923A:	dc.w 3			
		dc.w $F801,    0,    0,$FFE5			; 0
		dc.w $F80D,    2,    1,$FFED			; 4
		dc.w  $809,  $1D,   $E,$FFF1			; 8
word_39254:	dc.w 3			
		dc.w $F801,    0,    0,$FFE5			; 0
		dc.w $F80D,    2,    1,$FFED			; 4
		dc.w  $80D,  $23,  $11,$FFF1			; 8
word_3926E:	dc.w 1			
		dc.w $FC00,   $A,    5,$FFFC			; 0
word_39278:	dc.w 1			
		dc.w $F809,   $F,    7,$FFF9			; 0
word_39282:	dc.w 1			
		dc.w $F80D,  $15,   $A,$FFF9			; 0
word_3928C:	dc.w 1			
		dc.w $FC00,  $2B,  $15,$FFFC			; 0
word_39296:	dc.w 1			
		dc.w $FC00,  $2C,  $16,$FFFC			; 0
word_392A0:	dc.w 1			
		dc.w	 1,   $B,    5,$FFFC			; 0
word_392AA:	dc.w 1						; 0 
		dc.w	 3,   $B,    5,$FFFC			; 0
word_392B4:	dc.w 2						; 0 
		dc.w	 1,   $B,    5,$FFFC			; 0
		dc.w $1003,   $B,    5,$FFFC			; 4
word_392C6:	dc.w 2			
		dc.w	 3,   $B,    5,$FFFC			; 0
		dc.w $2003,   $B,    5,$FFFC			; 4
word_392D8:	dc.w 3						; 0 
		dc.w	 1,   $B,    5,$FFFC			; 0
		dc.w $1003,   $B,    5,$FFFC			; 4
		dc.w $3003,   $B,    5,$FFFC			; 8
word_392F2:	dc.w 3			
		dc.w	 3,   $B,    5,$FFFC			; 0
		dc.w $2003,   $B,    5,$FFFC			; 4
		dc.w $4003,   $B,    5,$FFFC			; 8
word_3930C:	dc.w 4			
		dc.w	 1,   $B,    5,$FFFC			; 0
		dc.w $1003,   $B,    5,$FFFC			; 4
		dc.w $3003,   $B,    5,$FFFC			; 8
		dc.w $5003,   $B,    5,$FFFC			; 12
word_3932E:	dc.w 4			
		dc.w	 3,   $B,    5,$FFFC			; 0
		dc.w $2003,   $B,    5,$FFFC			; 4
		dc.w $4003,   $B,    5,$FFFC			; 8
		dc.w $6003,   $B,    5,$FFFC			; 12
		dc.w 5
		dc.w	 1,   $B,    5,$FFFC			; 0
		dc.w $1003,   $B,    5,$FFFC			; 4
		dc.w $3003,   $B,    5,$FFFC			; 8
		dc.w $5003,   $B,    5,$FFFC			; 12
		dc.w $7003,   $B,    5,$FFFC			; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AC - Balkiry 
; ----------------------------------------------------------------------------

Balkiry:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_39388(pc,d0.w),d1
		jmp	off_39388(pc,d1.w)
; ===========================================================================
off_39388:	dc.w loc_3938C-off_39388			; 0 
		dc.w loc_393B6-off_39388			; 1
; ===========================================================================

loc_3938C:				
		bsr.w	LoadSubtypeData
		move.b	#1,$1A(a0)
		move.w	#-$300,ost_x_vel(a0)
		bclr	#render_yflip_bit,ost_render(a0)
		beq.s	loc_393AA
		move.w	#-$500,ost_x_vel(a0)

loc_393AA:				
		lea_	off_37B5C,a1
		move.l	a1,$2E(a0)
		bra.w	loc_37ABE
; ===========================================================================

loc_393B6:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_36776
		bra.w	DeleteBehindScreen
; ===========================================================================
off_393C2:	dc.l Map_393CC	
		dc.w $565
		dc.w $404
		dc.w $2008
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_393CC:				
		dc.w word_393D0-Map_393CC			; 0
		dc.w word_393F2-Map_393CC			; 1
word_393D0:	dc.w 4			
		dc.w $F40D,$8000,$8000,$FFDC			; 0
		dc.w $EC04,$8008,$8004,	  $C			; 4
		dc.w $F40D,$800A,$8005,$FFFC			; 8
		dc.w  $408,$8012,$8009,$FFFC			; 12
word_393F2:	dc.w 5			
		dc.w $F40D,$8000,$8000,$FFDC			; 0
		dc.w $EC04,$8008,$8004,	  $C			; 4
		dc.w $F40D,$800A,$8005,$FFFC			; 8
		dc.w  $408,$8015,$800A,	  $C			; 12
		dc.w  $C00,$8018,$800C,	 $1C			; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AD - Clucker's base 
; ----------------------------------------------------------------------------

CluckerBase:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3942A(pc,d0.w),d1
		jmp	off_3942A(pc,d1.w)
; ===========================================================================
off_3942A:	
		dc.w loc_3942E-off_3942A			; 0 
		dc.w loc_3943A-off_3942A			; 1
; ===========================================================================

loc_3942E:				
		bsr.w	LoadSubtypeData
		move.b	#$C,$1A(a0)
		rts	
; ===========================================================================

loc_3943A:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	ost_x_pos(a0),d4
		jsrto	SolidObject,JmpTo27_SolidObject
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AE - Clucker 
; ----------------------------------------------------------------------------

Clucker:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_39460(pc,d0.w),d1
		jmp	off_39460(pc,d1.w)
; ===========================================================================
off_39460:	
		dc.w loc_3946E-off_39460			; 0 
		dc.w loc_39488-off_39460			; 1
		dc.w loc_394A2-off_39460			; 2
		dc.w loc_394D2-off_39460			; 3
		dc.w loc_394E0-off_39460			; 4
		dc.w loc_39508-off_39460			; 5
		dc.w loc_39516-off_39460			; 6
; ===========================================================================

loc_3946E:				
		bsr.w	LoadSubtypeData
		move.b	#$15,$1A(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	locret_39486
		bset	#0,$22(a0)

locret_39486:				
		rts	
; ===========================================================================

loc_39488:				
		bsr.w	GetClosestPlayer
		addi.w	#$80,d2	
		cmpi.w	#$100,d2
		bcs.s	loc_3949A
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3949A:				
		addq.b	#2,ost_primary_routine(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_394A2:				
		move.b	ost_primary_routine(a0),d2
		lea	(off_3958A).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		cmp.b	ost_primary_routine(a0),d2
		bne.s	loc_394BA
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_394BA:				
		lea	$1A(a0),a1
		clr.l	(a1)
		clr.w	4(a1)
		move.b	#8,(a1)
		move.b	#6,$20(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_394D2:				
		lea	(off_39596).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_394E0:				
		tst.b	$2A(a0)
		beq.s	loc_394EE
		subq.b	#1,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_394EE:				
		addq.b	#2,ost_primary_routine(a0)
		lea	$1A(a0),a1
		clr.l	(a1)
		clr.w	4(a1)
		move.b	#$B,(a1)
		bsr.w	loc_39526
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_39508:				
		lea	(off_395A2).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_39516:				
		move.b	#8,ost_primary_routine(a0)
		move.b	#$40,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_39526:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_39574
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#$D,$1A(a1)
		move.b	#$46,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		addi.w	#$B,ost_y_pos(a1)
		move.w	#-$200,d0
		move.w	#-8,d1
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_39564
		neg.w	d0
		neg.w	d1

loc_39564:				
		move.w	d0,ost_x_vel(a1)
		add.w	d1,ost_x_pos(a1)
		lea_	loc_37734,a2
		move.l	a2,$2A(a1)

locret_39574:				
		rts	
; ===========================================================================
off_39576:	dc.l Map_395B4	
		dc.w $379
		dc.w $404
		dc.w $1800
off_39580:	dc.l Map_395B4	
		dc.w $379
		dc.w $405
		dc.w $1000
off_3958A:	dc.w byte_3958C-off_3958A 
byte_3958C:	dc.b   1,  0,  1,  2,  3,  4,  5,  6,  7,$FC	; 0	
off_39596:	dc.w byte_39598-off_39596 
byte_39598:	dc.b   1,  8,  9, $A, $B, $B, $B, $B,$FC,  0	; 0	
off_395A2:	dc.w byte_395A4-off_395A2 
byte_395A4:	dc.b   3, $A, $B,$FC				; 0 
off_395A8:	dc.w byte_395AA-off_395A8 
byte_395AA:	dc.b   3, $D, $E, $F,$10,$11,$12,$13,$14,$FF	; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_395B4:				
		dc.w word_395E0-Map_395B4			; 0
		dc.w word_395EA-Map_395B4			; 1
		dc.w word_395F4-Map_395B4			; 2
		dc.w word_395FE-Map_395B4			; 3
		dc.w word_39610-Map_395B4			; 4
		dc.w word_39622-Map_395B4			; 5
		dc.w word_39634-Map_395B4			; 6
		dc.w word_39646-Map_395B4			; 7
		dc.w word_39658-Map_395B4			; 8
		dc.w word_39672-Map_395B4			; 9
		dc.w word_3968C-Map_395B4			; 10
		dc.w word_396A6-Map_395B4			; 11
		dc.w word_396C0-Map_395B4			; 12
		dc.w word_396D2-Map_395B4			; 13
		dc.w word_396DC-Map_395B4			; 14
		dc.w word_396E6-Map_395B4			; 15
		dc.w word_396F0-Map_395B4			; 16
		dc.w word_396FA-Map_395B4			; 17
		dc.w word_39704-Map_395B4			; 18
		dc.w word_3970E-Map_395B4			; 19
		dc.w word_39718-Map_395B4			; 20
		dc.w word_39722-Map_395B4			; 21
word_395E0:	dc.w 1			
		dc.w  $C0D,$2000,$2000,$FFF0			; 0
word_395EA:	dc.w 1			
		dc.w  $80D,$2000,$2000,$FFF0			; 0
word_395F4:	dc.w 1			
		dc.w  $40D,$2000,$2000,$FFF0			; 0
word_395FE:	dc.w 2			
		dc.w	$D,$2000,$2000,$FFF0			; 0
		dc.w $100D,$2008,$2004,$FFF0			; 4
word_39610:	dc.w 2			
		dc.w $FC0D,$2000,$2000,$FFF0			; 0
		dc.w  $C0D,$2008,$2004,$FFF0			; 4
word_39622:	dc.w 2			
		dc.w $F80D,$2000,$2000,$FFF0			; 0
		dc.w  $80D,$2008,$2004,$FFF0			; 4
word_39634:	dc.w 2			
		dc.w $F40D,$2000,$2000,$FFF0			; 0
		dc.w  $40D,$2008,$2004,$FFF0			; 4
word_39646:	dc.w 2			
		dc.w $F00D,$2000,$2000,$FFF0			; 0
		dc.w	$D,$2008,$2004,$FFF0			; 4
word_39658:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0			; 0
		dc.w	$D,$2008,$2004,$FFF0			; 4
		dc.w  $700,$2010,$2008,$FFEE			; 8
word_39672:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0			; 0
		dc.w	$D,$2008,$2004,$FFF0			; 4
		dc.w  $700,$2010,$2008,$FFEC			; 8
word_3968C:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0			; 0
		dc.w	$D,$2008,$2004,$FFF0			; 4
		dc.w  $700,$2010,$2008,$FFEA			; 8
word_396A6:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0			; 0
		dc.w	$D,$2008,$2004,$FFF0			; 4
		dc.w  $700,$2010,$2008,$FFE8			; 8
word_396C0:	dc.w 2			
		dc.w $F809,$6011,$6008,$FFE8			; 0
		dc.w $F809,$6811,$6808,	   0			; 4
word_396D2:	dc.w 1			
		dc.w $FC00,  $17,   $B,$FFFC			; 0
word_396DC:	dc.w 1			
		dc.w $FC00,  $18,   $C,$FFFC			; 0
word_396E6:	dc.w 1			
		dc.w $FC00,  $19,   $C,$FFFC			; 0
word_396F0:	dc.w 1			
		dc.w $FC00,$1018,$100C,$FFFC			; 0
word_396FA:	dc.w 1			
		dc.w $FC00,$1017,$100B,$FFFC			; 0
word_39704:	dc.w 1			
		dc.w $FC00,$1818,$180C,$FFFC			; 0
word_3970E:	dc.w 1			
		dc.w $FC00, $819, $80C,$FFFC			; 0
word_39718:	dc.w 1			
		dc.w $FC00, $818, $80C,$FFFC			; 0
word_39722:	dc.w 1			
		dc.w $100D,$2000,$2000,$FFF0			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object AF - Mecha Sonic 
; ----------------------------------------------------------------------------

MechaSonic:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3973A(pc,d0.w),d1
		jmp	off_3973A(pc,d1.w)
; ===========================================================================
off_3973A:	dc.w loc_3975E-off_3973A			; 0 
		dc.w loc_397AC-off_3973A			; 1
		dc.w loc_397E6-off_3973A			; 2
		dc.w loc_397FE-off_3973A			; 3
		dc.w loc_3984A-off_3973A			; 4
		dc.w loc_398C0-off_3973A			; 5
		dc.w loc_39B92-off_3973A			; 6
		dc.w loc_39BBA-off_3973A			; 7
		dc.w loc_39BCC-off_3973A			; 8
		dc.w loc_39BE2-off_3973A			; 9
		dc.w loc_39BEA-off_3973A			; 10
		dc.w loc_39C02-off_3973A			; 11
		dc.w loc_39C0A-off_3973A			; 12
		dc.w loc_39C12-off_3973A			; 13
		dc.w loc_39C2A-off_3973A			; 14
		dc.w loc_39C42-off_3973A			; 15
		dc.w loc_39C50-off_3973A			; 16
		dc.w loc_39CA0-off_3973A			; 17
; ===========================================================================

loc_3975E:				
		bsr.w	LoadSubtypeData
		move.b	#$1B,ost_height(a0)
		move.b	#$10,$17(a0)
		move.b	#0,$20(a0)
		move.b	#8,$21(a0)
		lea	(byte_39DC2).l,a2
		bsr.w	LoadChild
		move.b	#$E,$24(a1)
		lea	(byte_39DC6).l,a2
		bsr.w	LoadChild
		move.b	#$14,$24(a1)
		lea	(byte_39DCA).l,a2
		bsr.w	LoadChild
		move.b	#$1A,$24(a1)
		rts	
; ===========================================================================

loc_397AC:				
		move.w	(v_camera_x_pos).w,d0
		cmpi.w	#$224,d0
		bcc.s	loc_397BA
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_397BA:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$3C,$2A(a0)
		move.w	#$100,ost_y_vel(a0)
		move.w	#$224,d0
		move.w	d0,(v_boundary_left_next).w
		move.w	d0,(v_boundary_right_next).w
		move.b	#9,(v_current_boss).w
		moveq	#-7,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_397E6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_397F0
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_397F0:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#-$6D,d0
		jsrto	PlayMusic,JmpTo5_PlayMusic
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_397FE:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3980E
		moveq	#-$24,d0
		jsrto	PlaySound,JmpTo12_PlaySound

loc_3980E:				
		jsr	FindFloorObj
		tst.w	d1
		bmi.s	loc_39830
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		moveq	#0,d0
		moveq	#0,d1
		movea.w	$3E(a0),a1
		bsr.w	AlignChildXY
		bsr.w	loc_39D4A
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39830:				
		add.w	d1,ost_y_pos(a0)
		move.w	#0,ost_y_vel(a0)
		move.b	#$1A,$20(a0)
		bset	#1,$22(a0)
		bra.w	loc_399D6
; ===========================================================================

loc_3984A:				
		bsr.w	loc_39CAE
		bsr.w	loc_39D1C
		subq.b	#1,$2A(a0)
		beq.s	loc_39886
		cmpi.b	#$32,$2A(a0)
		bne.s	loc_3986A
		moveq	#-$12,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		jsrto	DisplaySprite,JmpTo45_DisplaySprite

loc_3986A:				
		jsr	FindFloorObj
		add.w	d1,ost_y_pos(a0)
		lea	(off_39DE2).l,a1
		bsr.w	AnimateSprite2
		bsr.w	loc_39D4A
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39886:				
		addq.b	#2,ost_primary_routine(a0)
		moveq	#0,d0
		move.b	$2F(a0),d0
		andi.b	#$F,d0
		move.b	byte_398B0(pc,d0.w),$25(a0)
		addq.b	#1,$2F(a0)
		clr.b	$2E(a0)
		movea.w	$3C(a0),a1
		move.b	#$16,$24(a1)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
byte_398B0:	
		dc.b   6					; 0
		dc.b   0					; 1
		dc.b $10					; 2
		dc.b   6					; 3
		dc.b   6					; 4
		dc.b $1E					; 5
		dc.b   0					; 6
		dc.b $10					; 7
		dc.b   6					; 8
		dc.b   6					; 9
		dc.b $10					; 10
		dc.b   6					; 11
		dc.b   0					; 12
		dc.b   6					; 13
		dc.b $10					; 14
		dc.b $1E					; 15
; ===========================================================================

loc_398C0:				
		bsr.w	loc_39CAE
		bsr.w	loc_39D1C
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_398F2(pc,d0.w),d1
		jsr	off_398F2(pc,d1.w)
		moveq	#0,d0
		moveq	#0,d1
		movea.w	$3E(a0),a1
		bsr.w	AlignChildXY
		bsr.w	loc_39D4A
		bsr.w	AlignChildXY
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_398F2:	
		dc.w loc_3991E-off_398F2			; 0 
		dc.w loc_39946-off_398F2			; 1
		dc.w loc_39976-off_398F2			; 2
		dc.w loc_39A0A-off_398F2			; 3
		dc.w loc_39A1C-off_398F2			; 4
		dc.w loc_39A44-off_398F2			; 5
		dc.w loc_39A68-off_398F2			; 6
		dc.w loc_39A96-off_398F2			; 7
		dc.w loc_39A0A-off_398F2			; 8
		dc.w loc_39A1C-off_398F2			; 9
		dc.w loc_39AAA-off_398F2			; 10
		dc.w loc_39ACE-off_398F2			; 11
		dc.w loc_39AF4-off_398F2			; 12
		dc.w loc_39B28-off_398F2			; 13
		dc.w loc_39A96-off_398F2			; 14
		dc.w loc_39A0A-off_398F2			; 15
		dc.w loc_39A1C-off_398F2			; 16
		dc.w loc_39AAA-off_398F2			; 17
		dc.w loc_39ACE-off_398F2			; 18
		dc.w loc_39B44-off_398F2			; 19
		dc.w loc_39B28-off_398F2			; 20
		dc.w loc_39A96-off_398F2			; 21
; ===========================================================================

loc_3991E:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		move.b	#2,$2C(a0)

loc_3992E:				
		move.b	#$20,$2A(a0)
		movea.w	$3E(a0),a1
		move.b	#$10,$24(a1)
		move.b	#1,$1C(a1)
		rts	
; ===========================================================================

loc_39946:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_3994E
		rts	
; ===========================================================================

loc_3994E:				
		addq.b	#2,$25(a0)
		move.b	#$40,$2A(a0)
		move.b	#1,$1C(a0)
		move.w	#$800,d0
		bsr.w	loc_39D60
		movea.w	$3E(a0),a1
		move.b	#2,$1C(a1)
		moveq	#-$44,d0
		jmpto	PlaySound,JmpTo12_PlaySound
; ===========================================================================

loc_39976:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_399C2
		cmpi.b	#$20,$2A(a0)
		bne.s	loc_39994
		move.b	#2,$1C(a0)
		movea.w	$3E(a0),a1
		move.b	#$12,$24(a1)

loc_39994:				
		bsr.w	loc_39D72
		lea	(off_39DE2).l,a1
		bsr.w	AnimateSprite2
		cmpi.b	#2,$1C(a0)
		bne.s	locret_399C0
		cmpi.b	#2,$1B(a0)
		bne.s	locret_399C0
		cmpi.b	#3,$1E(a0)
		bne.s	locret_399C0
		bchg	#render_xflip_bit,ost_render(a0)

locret_399C0:				
		rts	
; ===========================================================================

loc_399C2:				
		subq.b	#1,$2C(a0)
		beq.s	loc_399D6
		move.b	#2,$25(a0)
		clr.w	ost_x_vel(a0)
		bra.w	loc_3992E
; ===========================================================================

loc_399D6:				
		move.b	#8,ost_primary_routine(a0)
		move.b	#0,$1C(a0)
		move.b	#$64,$2A(a0)
		clr.w	ost_x_vel(a0)
		movea.w	$3E(a0),a1
		move.b	#$12,$24(a1)
		movea.w	$3C(a0),a1
		move.b	#$18,$24(a1)
		moveq	#-$12,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39A0A:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		move.b	#3,$1C(a0)
		rts	
; ===========================================================================

loc_39A1C:				
		lea	(off_39DE2).l,a1
		bsr.w	AnimateSprite2
		bne.s	loc_39A2A
		rts	
; ===========================================================================

loc_39A2A:				
		addq.b	#2,$25(a0)
		move.b	#$20,$2A(a0)
		move.b	#4,$1C(a0)
		moveq	#-$50,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39A44:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_39A56
		lea	(off_39DE2).l,a1
		bsr.w	AnimateSprite2
		rts	
; ===========================================================================

loc_39A56:				
		addq.b	#2,$25(a0)
		move.b	#$40,$2A(a0)
		move.w	#$800,d0
		bra.w	loc_39D60
; ===========================================================================

loc_39A68:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_39A7C
		bsr.w	loc_39D72
		lea	(off_39DE2).l,a1
		bra.w	AnimateSprite2
; ===========================================================================

loc_39A7C:				
		addq.b	#2,$25(a0)
		move.b	#5,$1C(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		clr.w	ost_x_vel(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_39A96:				
		lea	(off_39DE2).l,a1
		bsr.w	AnimateSprite2
		bne.w	loc_39AA6
		rts	
; ===========================================================================

loc_39AA6:				
		bra.w	loc_399D6
; ===========================================================================

loc_39AAA:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_39ABC
		lea	(off_39DE2).l,a1
		bsr.w	AnimateSprite2
		rts	
; ===========================================================================

loc_39ABC:				
		addq.b	#2,$25(a0)
		move.b	#$40,$2A(a0)
		move.w	#$400,d0
		bra.w	loc_39D60
; ===========================================================================

loc_39ACE:				
		subq.b	#1,$2A(a0)
		cmpi.b	#$3C,$2A(a0)
		bne.s	loc_39ADE
		bsr.w	loc_39AE8

loc_39ADE:				
		lea	(off_39DE2).l,a1
		bra.w	AnimateSprite2
; ===========================================================================

loc_39AE8:				
		addq.b	#2,$25(a0)
		move.w	#-$600,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_39AF4:				
		subq.b	#1,$2A(a0)
		bmi.w	loc_39A7C
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_39B0A
		bsr.w	loc_39B1A

loc_39B0A:				
		addi.w	#$38,ost_y_vel(a0)
		lea	(off_39DE2).l,a1
		bra.w	AnimateSprite2
; ===========================================================================

loc_39B1A:				
		addq.b	#2,$25(a0)
		add.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_39B28:				
		subq.b	#1,$2A(a0)
		bmi.w	loc_39A7C
		jsr	FindFloorObj
		add.w	d1,ost_y_pos(a0)
		lea	(off_39DE2).l,a1			; could be PC relative
		bra.w	AnimateSprite2
; ===========================================================================

loc_39B44:				
		subq.b	#1,$2A(a0)
		bmi.w	loc_39A7C
		tst.b	$2E(a0)
		bne.s	loc_39B66
		tst.w	ost_y_vel(a0)
		bmi.s	loc_39B66
		st.b	$2E(a0)
		bsr.w	loc_39D82
		moveq	#-$5E,d0
		jsrto	PlaySound,JmpTo12_PlaySound

loc_39B66:				
		jsr	FindFloorObj
		tst.w	d1
		bpl.s	loc_39B74
		bsr.w	loc_39B84

loc_39B74:				
		addi.w	#$38,ost_y_vel(a0)
		lea	(off_39DE2).l,a1			; could be PC relative
		bra.w	AnimateSprite2
; ===========================================================================

loc_39B84:				
		addq.b	#2,$25(a0)
		add.w	d1,ost_y_pos(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_39B92:				
		clr.b	$20(a0)
		subq.w	#1,$32(a0)
		bmi.s	loc_39BA4
		jsrto	BossExplode,JmpTo_BossExplode
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39BA4:				
		move.w	#$1000,(v_boundary_right_next).w
		addq.b	#2,(v_dle_routine).w
	if FixBugs
		move.w	(v_level_music).w,d0	
	else	
		; 'v_level_music' is a word long, not a byte.
		; All this does is try to play Sound 0, which doesn't do anything.
		; This causes the Death Egg Music music to not resume after the
		; Mecha Sonic fight.	
		move.b	(v_level_music).w,d0
	endc	
		jsrto	PlayMusic,JmpTo5_PlayMusic
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_39BBA:				
		bsr.w	LoadSubtypeData
		move.b	#8,$19(a0)
		move.b	#0,$20(a0)
		rts	
; ===========================================================================

loc_39BCC:				
		movea.w	$2C(a0),a1
		bsr.w	InheritParentXYFlip
		lea	(off_39E30).l,a1
		bsr.w	AnimateSprite2
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39BE2:				
		andi.b	#(~render_onscreen)&$FF,ost_render(a0)
		rts	
; ===========================================================================

loc_39BEA:				
		bsr.w	LoadSubtypeData
		move.b	#8,$19(a0)
		move.b	#$B,$1A(a0)
		move.b	#3,$18(a0)
		rts	
; ===========================================================================

loc_39C02:				
		move.b	#0,$20(a0)
		rts	
; ===========================================================================

loc_39C0A:				
		move.b	#-$68,$20(a0)
		rts	
; ===========================================================================

loc_39C12:				
		bsr.w	LoadSubtypeData
		move.b	#4,$1A(a0)
		move.w	#$2C0,ost_x_pos(a0)
		move.w	#$139,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_39C2A:				
		movea.w	$2C(a0),a1
		bclr	#1,$22(a1)
		bne.s	loc_39C3A
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39C3A:				
		addq.b	#2,ost_primary_routine(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39C42:				
		lea	(off_39E42).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39C50:				
		movea.w	$2C(a0),a1
		lea	($FFFFB000).w,a2
		btst	#2,$22(a1)
		bne.s	loc_39C92
		move.b	#2,$1C(a0)
		cmpi.b	#4,$24(a2)
		bne.s	loc_39C78
		move.b	#3,$1C(a0)
		bra.w	loc_39C84
; ===========================================================================

loc_39C78:				
		tst.b	$20(a1)
		bne.s	loc_39C84
		move.b	#4,$1C(a0)

loc_39C84:				
		lea	(off_39E42).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39C92:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#1,$1C(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_39CA0:				
		lea	(off_39E42).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_39CAE:				
		tst.b	$21(a0)
		beq.s	loc_39CF0
		tst.b	$20(a0)
		bne.s	locret_39CEE
		tst.b	$30(a0)
		bne.s	loc_39CD0
		move.b	#$20,$30(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_39CD0:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_39CDE
		move.w	#$EEE,d0

loc_39CDE:				
		move.w	d0,(a1)
		subq.b	#1,$30(a0)
		bne.s	locret_39CEE
		clr.w	($FFFFFB22).w
		bsr.w	loc_39D24

locret_39CEE:				
		rts	
; ===========================================================================

loc_39CF0:				
		moveq	#$64,d0
		bsr.w	AddPoints
		move.w	#$FF,$32(a0)
		move.b	#$C,ost_primary_routine(a0)
		clr.b	$20(a0)
		bset	#2,$22(a0)
		movea.w	$3C(a0),a1
		jsrto	DeleteChild,JmpTo6_DeleteChild
		movea.w	$3E(a0),a1
		jmpto	DeleteChild,JmpTo6_DeleteChild
; ===========================================================================

loc_39D1C:				
		tst.b	$20(a0)
		beq.w	locret_37A48

loc_39D24:				
		move.b	$1A(a0),d0
		cmpi.b	#6,d0
		beq.s	loc_39D42
		cmpi.b	#7,d0
		beq.s	loc_39D42
		cmpi.b	#8,d0
		beq.s	loc_39D42
		move.b	#$1A,$20(a0)
		rts	
; ===========================================================================

loc_39D42:				
		move.b	#-$66,$20(a0)
		rts	
; ===========================================================================

loc_39D4A:				
		moveq	#$C,d0
		moveq	#-$C,d1
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_39D58
		neg.w	d0

loc_39D58:				
		movea.w	$3C(a0),a1
		bra.w	AlignChildXY
; ===========================================================================

loc_39D60:				
		tst.b	$2D(a0)
		bne.s	loc_39D68
		neg.w	d0

loc_39D68:				
		not.b	$2D(a0)
		move.w	d0,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_39D72:				
		moveq	#$20,d0
		tst.w	ost_x_vel(a0)
		bmi.s	loc_39D7C
		neg.w	d0

loc_39D7C:				
		add.w	d0,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_39D82:				
		move.b	#$4A,d2
		moveq	#7,d6
		lea	(byte_39D92).l,a2
		bra.w	SpawnProjectiles
; ===========================================================================
byte_39D92:							; projectile data
		dc.b   0,$E8,  0,$FD, $F,  0,$F0,$F0,$FE,$FE,$10,  0,$E8,  0,$FD,  0 ; 0		
		dc.b $11,  0,$F0,$10,$FE,  2,$12,  0,  0,$18,  0,  3,$13,  0,$10,$10 ; 16
		dc.b   2,  2,$14,  0,$18,  0,  3,  0,$15,  0,$10,$F0,  2,$FE,$16,  0 ; 32

byte_39DC2:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $AF					; 2
		dc.b $48					; 3
byte_39DC6:	dc.b   0					; 0 
		dc.b $3C					; 1
		dc.b $AF					; 2
		dc.b $48					; 3
byte_39DCA:	dc.b   0					; 0 
		dc.b $3A					; 1
		dc.b $AF					; 2
		dc.b $A4					; 3
off_39DCE:	dc.l Map_39E68	
		dc.w $2380
		dc.w $404
		dc.w $101A
off_39DD8:	dc.l Map_3A08C	
		dc.w $378
		dc.w $406
		dc.w $1000
off_39DE2:	dc.w byte_39DEE-off_39DE2			; 0 
		dc.w byte_39DF4-off_39DE2			; 1
		dc.w byte_39DF8-off_39DE2			; 2
		dc.w byte_39DFE-off_39DE2			; 3
		dc.w byte_39E14-off_39DE2			; 4
		dc.w byte_39E1A-off_39DE2			; 5
byte_39DEE:	dc.b   2,  0,  1,  2,$FF,  0			; 0	
byte_39DF4:	dc.b $45,  3,$FD,  0				; 0 
byte_39DF8:	dc.b   3,  4,  5,  4,  3,$FC			; 0	
byte_39DFE:	dc.b   3,  3,  3,  6,  6,  6,  7,  7,  7,  8,  8,  8,  6,  6,  7,  7 ; 0
					
		dc.b   8,  8,  6,  7,  8,$FC			; 16
byte_39E14:	dc.b   2,  6,  7,  8,$FF,  0			; 0	
byte_39E1A:	dc.b   3,  8,  7,  6,  8,  8,  7,  7,  6,  6,  8,  8,  8,  7,  7,  7 ; 0
					
		dc.b   6,  6,  6,  3,  3,$FC			; 16
off_39E30:	dc.w byte_39E36-off_39E30			; 0 
		dc.w byte_39E3A-off_39E30			; 1
		dc.w byte_39E3E-off_39E30			; 2
byte_39E36:	dc.b   1, $B, $C,$FF				; 0 
byte_39E3A:	dc.b   1, $D, $E,$FF				; 0 
byte_39E3E:	dc.b   1,  9, $A,$FF				; 0 
off_39E42:	dc.w byte_39E4C-off_39E42			; 0 
		dc.w byte_39E54-off_39E42			; 1
		dc.w byte_39E5C-off_39E42			; 2
		dc.w byte_39E60-off_39E42			; 3
		dc.w byte_39E64-off_39E42			; 4
byte_39E4C:	dc.b   3,  4,  3,  2,  1,  0,$FC,  0		; 0	
byte_39E54:	dc.b   3,  0,  1,  2,  3,  4,$FA,  0		; 0	
byte_39E5C:	dc.b   3,  5,  5,$FF				; 0 
byte_39E60:	dc.b   3,  5,  6,$FF				; 0 
byte_39E64:	dc.b   3,  7,  7,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_39E68:				
		dc.w word_39E96-Map_39E68			; 0
		dc.w word_39EC0-Map_39E68			; 1
		dc.w word_39EEA-Map_39E68			; 2
		dc.w word_39F14-Map_39E68			; 3
		dc.w word_39F36-Map_39E68			; 4
		dc.w word_39F58-Map_39E68			; 5
		dc.w word_39F7A-Map_39E68			; 6
		dc.w word_39F9C-Map_39E68			; 7
		dc.w word_39FBE-Map_39E68			; 8
		dc.w word_39FE0-Map_39E68			; 9
		dc.w word_39FF2-Map_39E68			; 10
		dc.w word_3A004-Map_39E68			; 11
		dc.w word_3A016-Map_39E68			; 12
		dc.w word_3A028-Map_39E68			; 13
		dc.w word_3A032-Map_39E68			; 14
		dc.w word_3A03C-Map_39E68			; 15
		dc.w word_3A046-Map_39E68			; 16
		dc.w word_3A050-Map_39E68			; 17
		dc.w word_3A05A-Map_39E68			; 18
		dc.w word_3A064-Map_39E68			; 19
		dc.w word_3A06E-Map_39E68			; 20
		dc.w word_3A078-Map_39E68			; 21
		dc.w word_3A082-Map_39E68			; 22
word_39E96:	dc.w 5			
		dc.w $E409,    0,    0,$FFF3			; 0
		dc.w $F40F,    6,    3,$FFEF			; 4
		dc.w $140C,  $16,   $B,$FFEC			; 8
		dc.w $E404,  $6F,  $37,$FFF4			; 12
		dc.w $E407,  $71,  $38,	   4			; 16
word_39EC0:	dc.w 5			
		dc.w $E409,    0,    0,$FFF3			; 0
		dc.w $F40F,    6,    3,$FFEF			; 4
		dc.w $140C,  $16,   $B,$FFEC			; 8
		dc.w $E404,  $79,  $3C,$FFF4			; 12
		dc.w $E407,  $7B,  $3D,	   4			; 16
word_39EEA:	dc.w 5			
		dc.w $E409,    0,    0,$FFF3			; 0
		dc.w $F40F,    6,    3,$FFEF			; 4
		dc.w $140C,  $16,   $B,$FFEC			; 8
		dc.w $E404,  $83,  $41,$FFF4			; 12
		dc.w $E407,  $85,  $42,	   4			; 16
word_39F14:	dc.w 4			
		dc.w $E40F,  $1A,   $D,$FFEC			; 0
		dc.w $E403,  $2A,  $15,	  $C			; 4
		dc.w  $40E,  $2E,  $17,$FFF4			; 8
		dc.w $1400,  $3A,  $1D,$FFEC			; 12
word_39F36:	dc.w 4			
		dc.w $E40E,  $3B,  $1D,$FFF0			; 0
		dc.w  $401,  $47,  $23,$FFE8			; 4
		dc.w $FC0F,  $49,  $24,$FFF0			; 8
		dc.w $FC03,  $59,  $2C,	 $10			; 12
word_39F58:	dc.w 4			
		dc.w $E406,  $5D,  $2E,$FFF0			; 0
		dc.w $E406, $85D, $82E,	   0			; 4
		dc.w $FC0B,  $63,  $31,$FFE8			; 8
		dc.w $FC0B, $863, $831,	   0			; 12
word_39F7A:	dc.w 4			
		dc.w $EE0A,  $8D,  $46,$FFE8			; 0
		dc.w $EE0A,  $96,  $4B,	   0			; 4
		dc.w  $60A,$1896,$184B,$FFE8			; 8
		dc.w  $60A,$188D,$1846,	   0			; 12
word_39F9C:	dc.w 4			
		dc.w $EE0A,  $9F,  $4F,$FFE8			; 0
		dc.w $EE0A,  $A8,  $54,	   0			; 4
		dc.w  $60A,$18A8,$1854,$FFE8			; 8
		dc.w  $60A,$189F,$184F,	   0			; 12
word_39FBE:	dc.w 4			
		dc.w $EE0A,  $B1,  $58,$FFE8			; 0
		dc.w $EE0A,  $BA,  $5D,	   0			; 4
		dc.w  $60A,$18BA,$185D,$FFE8			; 8
		dc.w  $60A,$18B1,$1858,	   0			; 12
word_39FE0:	dc.w 2			
		dc.w  $400,  $C3,  $61,	  $E			; 0
		dc.w $1408,  $CB,  $65,	 $12			; 4
word_39FF2:	dc.w 2			
		dc.w  $408,  $C4,  $62,	  $E			; 0
		dc.w $1408,  $CE,  $67,	 $12			; 4
word_3A004:	dc.w 2			
		dc.w $1C00,  $C7,  $63,$FFF4			; 0
		dc.w $1C00,  $C7,  $63,$FFFC			; 4
word_3A016:	dc.w 2			
		dc.w $1C02,  $C8,  $64,$FFF4			; 0
		dc.w $1C02,  $C8,  $64,$FFFC			; 4
word_3A028:	dc.w 1			
		dc.w $1408,  $CB,  $65,	 $12			; 0
word_3A032:	dc.w 1			
		dc.w $1408,  $CE,  $67,	 $12			; 0
word_3A03C:	dc.w 1			
		dc.w $F801,  $D1,  $68,$FFFC			; 0
word_3A046:	dc.w 1			
		dc.w $F805,  $D3,  $69,$FFF8			; 0
word_3A050:	dc.w 1			
		dc.w $FC04,  $D7,  $6B,$FFF8			; 0
word_3A05A:	dc.w 1			
		dc.w $F805,$10D3,$1069,$FFF8			; 0
word_3A064:	dc.w 1			
		dc.w $F801,$10D1,$1068,$FFFC			; 0
word_3A06E:	dc.w 1			
		dc.w $F805,$18D3,$1869,$FFF8			; 0
word_3A078:	dc.w 1			
		dc.w $FC04, $8D7, $86B,$FFF8			; 0
word_3A082:	dc.w 1			
		dc.w $F805, $8D3, $869,$FFF8			; 0
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3A08C:				
		dc.w word_3A09C-Map_3A08C			; 0
		dc.w word_3A0C6-Map_3A08C			; 1
		dc.w word_3A0F0-Map_3A08C			; 2
		dc.w word_3A11A-Map_3A08C			; 3
		dc.w word_3A154-Map_3A08C			; 4
		dc.w word_3A18E-Map_3A08C			; 5
		dc.w word_3A1A8-Map_3A08C			; 6
		dc.w word_3A1C2-Map_3A08C			; 7
word_3A09C:	dc.w 5			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w  $404,$2006,$2003,$FFF0			; 8
		dc.w  $404,$2006,$2003,	   0			; 12
		dc.w $F80D, $190,  $C8,$FFF0			; 16
word_3A0C6:	dc.w 5			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w	 4,$2006,$2003,$FFF0			; 8
		dc.w	 4,$2006,$2003,	   0			; 12
		dc.w $F80D, $190,  $C8,$FFF0			; 16
word_3A0F0:	dc.w 5			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w $FC04,$2006,$2003,$FFF0			; 8
		dc.w $FC04,$2006,$2003,	   0			; 12
		dc.w $F80D, $190,  $C8,$FFF0			; 16
word_3A11A:	dc.w 7			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w $F804,$2006,$2003,$FFF0			; 8
		dc.w $F804,$2006,$2003,	   0			; 12
		dc.w	 4,$2006,$2003,$FFF0			; 16
		dc.w	 4,$2006,$2003,	   0			; 20
		dc.w $F80D, $190,  $C8,$FFF0			; 24
word_3A154:	dc.w 7			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w $F404,$2006,$2003,$FFF0			; 8
		dc.w $F404,$2006,$2003,	   0			; 12
		dc.w $FC04,$2006,$2003,$FFF0			; 16
		dc.w $FC04,$2006,$2003,	   0			; 20
		dc.w $F80D, $190,  $C8,$FFF0			; 24
word_3A18E:	dc.w 3			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w $F80D, $190,  $C8,$FFF0			; 8
word_3A1A8:	dc.w 3			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w $F90D, $190,  $C8,$FFF0			; 8
word_3A1C2:	dc.w 3			
		dc.w $F406,$2000,$2000,$FFF0			; 0
		dc.w $F406,$2800,$2800,	   0			; 4
		dc.w $F80D, $198,  $CC,$FFF0			; 8
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B0 - Sonic on the Sega screen
; ----------------------------------------------------------------------------

SonicSegaScreen:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	SonicSegaScreen_Index(pc,d0.w),d1
		jmp	SonicSegaScreen_Index(pc,d1.w)
; ===========================================================================
SonicSegaScreen_Index:	index offset(*),,2
		ptr SonicSegaScreen_Init			; 0 
		ptr SonicSegaScreen_RunLeft			; 2
		ptr SonicSegaScreen_MidWipe			; 4
		ptr SonicSegaScreen_RunRight			; 6
		ptr SonicSegaScreen_EndWipe			; 8
		ptr SonicSegaScreen_Done			; 10	; rts
		
		rsobj	SonicSegaScreen,$2A
ost_sonicsega_frame_counter:		rs.w 1			; number of frames remaining in each stage of the animation
ost_sonicsega_wait_time:			rs.b 1		; number of frames to wait before updating the streak palette
ost_sonicsega_streakcounter:		rs.b 1			; number of times the streak palette has been updated
		rsobjend
; ===========================================================================

SonicSegaScreen_Init:				
		bsr.w	LoadSubtypeData				; load mapping and tile data, go to SonicSegaScreen_RunLeft next	
		move.w	#screen_right+40,ost_x_screen(a0)
		move.w	#screen_top+112,ost_y_screen(a0)
		move.w	#$B,ost_sonicsega_frame_counter(a0)	; set timer to 11 frames
		move.w	#id_SegaScreen_VBlank_InitLeft,(v_segascr_vblank_sub).w
		bset	#render_xflip_bit,ost_render(a0)	; sonic faces left initially
		bset	#status_xflip_bit,ost_primary_status(a0)

		; Initialize streak horizontal offsets for Sonic going left.
		lea	(v_hscroll_buffer+(2*2*((9*8)+6))).w,a1	; 9 full lines (8 pixels) + 6 pixels, 2-byte interleaved entries for FG and BG
		lea	Streak_Horizontal_Offsets(pc),a2
		moveq	#0,d0
		moveq	#sizeof_Streak_Horizontal_Offsets-1,d6	; number of streaks-1

	.loop_streak:				
		move.b	(a2)+,d0
		add.w	d0,(a1)
		addq.w	#2*2*2,a1				; advance to next streak 2 pixels down
		dbf	d6,.loop_streak				; loop for all streak offsets

;SonicSegaScreen_LoadArt:		
		lea	SonicSegaScreen_DPLCPointers(pc),a1	; pointers to DPLCs for sprites that we are going to upscale
		lea	(Art_Sonic).l,a3
		lea	(v_128x128_tiles).l,a5
		moveq	#((sizeof_SonicSegaScreen_DPLCPointers)/4)-1,d5 ; 4 mapping frames to loop over

	.loop_frame:				
		movea.l	(a1)+,a2				; DPLC of current frame
		move.w	(a2)+,d6				; number of pieces in this frame
		subq.w	#1,d6

	.loop_piece:				
		move.w	(a2)+,d0				; offset of art for current frame
		move.w	d0,d1					; d0 will be used to calculate effective address, d1 to calculate number of longwords to copy
	
	if FixBugs
		; Depending on the exact location (and size) of the art being used,
		; you may encounter an overflow in the original code which garbles
		; the enlarged Sonic. The following code fixes this:
		andi.l	#$FFF,d0
		lsl.l	#5,d0
		lea	(a3,d0.l),a4				; ROM address of tiles to copy
	else	
		andi.w	#$FFF,d0
		lsl.w	#5,d0
		lea	(a3,d0.w),a4				; ROM address of tiles to copy
	endc	
		andi.w	#$F000,d1				; abcd000000000000
		rol.w	#4,d1					; (this calculation can be done smaller and faster
		addq.w	#1,d1					; by doing rol.w #7,d1 addq.w #7,d1
		lsl.w	#3,d1					; instead of these 4 lines)
		subq.w	#1,d1					; 000000000abcd111 ; number of dwords to copy minus 1

	.loop_pixel:				
		move.l	(a4)+,(a5)+				; copy a longword of art data to buffer
		dbf	d1,.loop_pixel				; repeat for all pixels in this piece
		dbf	d6,.loop_piece				; repeat for every piece in the frame
		dbf	d5,.loop_frame				; repeat until all frames have been copied

;SonicSegaScreen_UpscaleSprites:		
		pushr.w	d7
		moveq	#0,d0
		moveq	#0,d1
		lea	SonicSegaScreen_SpriteScaleData(pc),a6	; load sprite upscale data array 
		moveq	#(((sizeof_SonicSegaScreen_DPLCPointers)/4)*2)-1,d7 ; 4 frames, with 2 pieces each

	.loop_upscale:				
		movea.l	(a6)+,a1				; source in RAM of tile graphics to enlarge
		movea.l	(a6)+,a2				; destination in RAM of enlarged graphics
		move.b	(a6)+,d0				; width of the sprite piece to enlarge (minus 1)
		move.b	(a6)+,d1				; height of the sprite piece to enlarge (minus 1)
		bsr.w	Scale_2x
		dbf	d7,.loop_upscale			; repeat for every piece
		popr.w	d7
		rts	
; ===========================================================================
SonicSegaScreen_DPLCPointers:	
		dc.l DPLC_Sonic_033A				; 0 
		dc.l DPLC_Sonic_0340				; 1
		dc.l DPLC_Sonic_0346				; 2
		dc.l DPLC_Sonic_034C				; 3
		arraysize	SonicSegaScreen_DPLCPointers

upscaledata: macro width,height

	dc.l copysrc,copydst					; source of data to upscale, destination where upscaled data will be written
	dc.b \width-1,\height-1					; the width and height of the piece to enlarge minus 1

	copysrc: = copysrc+(((\width*\height)&$7FF)<<5)		; increment source
	copydst: = copydst+(((\width*\height)&$7FF)<<5)*2*2	; increment destination
    endm
	
SonicSegaScreen_SpriteScaleData:
copysrc:	= v_128x128_tiles
copydst:	= v_128x128_tiles+$B00
SonicSegaScreen_ScaledSpriteDataStart = copydst
		rept 4						; repeat 4 times since there are 4 frames to scale up
		upscaledata 3,2					; piece 1 of each frame (the smaller top piece):
		upscaledata 4,4					; piece 2 of each frame (the larger bottom piece):
		endr
SonicSegaScreen_ScaledSpriteDataEnd	= copydst
sizeof_SonicSegaScreen_ScaledSpriteData: equ	SonicSegaScreen_ScaledSpriteDataEnd-SonicSegaScreen_ScaledSpriteDataStart

		if copysrc>SonicSegaScreen_ScaledSpriteDataStart
			inform 3,"Scale copy source overran allocated size. Try changing the initial value of copydst to v_128x128_tiles+$%h.",copysrc-v_128x128_tiles
		endc	
; ===========================================================================

SonicSegaScreen_RunLeft:				
		subi.w	#$20,ost_x_screen(a0)			; move Sonic left 32 pixels
		subq.w	#1,ost_sonicsega_frame_counter(a0)	; deincrement frame counter
		bmi.s	.runleft_done				; if we're done, branch
		bsr.w	SonicSegaScreen_MoveStreaksLeft		; move blue streaks to the left
		lea	(Ani_SonicSegaScreen).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
	.runleft_done:				
		addq.b	#2,ost_primary_routine(a0)		; go to SonicSegaScreen_MidWipe next
		move.w	#$C,ost_sonicsega_frame_counter(a0)	; continue moving blue streaks left for 12 frames
		move.b	#1,ost_sonicsega_wait_time(a0)
		move.b	#-1,ost_sonicsega_streakcounter(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

SonicSegaScreen_MidWipe:				
		tst.w	ost_sonicsega_frame_counter(a0)		; has frame counter reached 0?
		beq.s	.updatepalette				; if so, branch	
		subq.w	#1,ost_sonicsega_frame_counter(a0)	; deincrement frame counter
		bsr.w	SonicSegaScreen_MoveStreaksLeft		; move blue streaks to left

	.updatepalette:				
		lea	Pal_SegaScreen2(pc),a1
		bsr.w	SonicSegaScreen_UpdateStreakPals
		bne.s	SonicSegaScreen_RunRightInit
		rts	
; ===========================================================================

SonicSegaScreen_RunRightInit:				
		addq.b	#2,ost_primary_routine(a0)		; go to SonicSegaScreen_RunRight next
	if FixBugs=0
		; This instruction is redundant, as this bit is flipped again below. This doesn't 
		; actually have any harmful effects due to the way AnimateSprite works, but it is 
		; still an unnecessary instruction.	
		bchg	#render_xflip_bit,ost_render(a0)
	endc	
		move.w	#$B,ost_sonicsega_frame_counter(a0)	; set timer to 11 frames
		move.w	#id_SegaScreen_VBlank_InitRight,(v_segascr_vblank_sub).w
		subi.w	#$28,ost_x_screen(a0)			; start at $40 (screen_left-64)									
		bchg	#render_xflip_bit,ost_render(a0)	; Sonic faces right now
		bchg	#status_xflip_bit,ost_primary_status(a0)
		
	if FixBugs
		clear_ram	hscroll,hscroll_end		; clear the HScroll buffer
	else
		; This clears a lot more than the horizontal scroll buffer. This is because the loop 
		; counter is erroneously set to the size of the buffer in bytes ($400) rather than
		; the size in longwords-1.
		clear_ram	hscroll,hscroll_end+$C04	; clear the HScroll buffer
	endc	
	
		; Initialize streak horizontal offsets for Sonic going right.
		lea	(v_hscroll_buffer+(2*2*((9*8)+7))).w,a1	; 9 full lines (8 pixels) + 7 pixels, 2-byte interleaved entries for FG and BG
		lea	Streak_Horizontal_Offsets(pc),a2
		moveq	#0,d0
		moveq	#sizeof_Streak_Horizontal_Offsets-1,d6

	.loop_streak:				
		move.b	(a2)+,d0
		sub.w	d0,(a1)
		addq.w	#2*2*2,a1				; advance to next streak 2 pixels down
		dbf	d6,.loop_streak				; loop for all streak offsets
		rts
; ===========================================================================

SonicSegaScreen_RunRight:				
		subq.w	#1,ost_sonicsega_frame_counter(a0)	; deincrement frame counter
		bmi.s	.runright_done				; if we're done, branch
		addi.w	#$20,ost_x_screen(a0)			; move Sonic 32 pixels right
		bsr.w	SonicSegaScreen_MoveStreaksRight	; move blue streaks to the right
		lea	(Ani_SonicSegaScreen).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

	.runright_done:				
		addq.b	#2,ost_primary_routine(a0)		; go to SonicSegaScreen_EndWipe next
		move.w	#$C,ost_sonicsega_frame_counter(a0)	; continue moving blue streaks right for 12 frames
		move.b	#1,ost_sonicsega_wait_time(a0)
		move.b	#-1,ost_sonicsega_streakcounter(a0)
		rts	
; ===========================================================================

SonicSegaScreen_EndWipe:				
		tst.w	ost_sonicsega_frame_counter(a0)		; has frame counter reached 0?			
		beq.s	.updatepalette				; if so, branch
		subq.w	#1,ost_sonicsega_frame_counter(a0)	; deincrement counter
		bsr.w	SonicSegaScreen_MoveStreaksRight	; move blue streaks to the right

	.updatepalette:				
		lea	Pal_SegaScreen3(pc),a1
		bsr.w	SonicSegaScreen_UpdateStreakPals
		bne.s	SonicSegaScreen_PlaySegaSound
		rts	
; ===========================================================================

SonicSegaScreen_PlaySegaSound:				
		addq.b	#2,ost_primary_routine(a0)
		st.b	(f_segascr_paldone).w
		move.b	#cmd_Sega,d0
		jsrto	PlaySound,JmpTo12_PlaySound

SonicSegaScreen_Done:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B1 - Object that hides TM symbol on Japanese and Korean consoles
; ----------------------------------------------------------------------------

SegaHideTM:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	SegaHideTM_Index(pc,d0.w),d1
		jmp	SegaHideTM_Index(pc,d1.w)
; ===========================================================================
SegaHideTM_Index:	index offset(*),,2
		ptr SegaHideTM_Init				; 0 
		ptr SegaHideTM_Display				; 2
; ===========================================================================

SegaHideTM_Init:				
		bsr.w	LoadSubtypeData
		move.b	#id_Frame_HideTM,ost_frame(a0)
		move.w	#screen_left+244,ost_x_screen(a0)
		move.w	#screen_top+88,ost_y_screen(a0)
		rts	
; ===========================================================================

SegaHideTM_Display:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================


SonicSegaScreen_MoveStreaksLeft:				
		lea	(v_hscroll_buffer+(2*2*((9*8)+6))).w,a1
		move.w	#sizeof_Streak_Horizontal_Offsets-1,d6	; number of streaks-1

	.loop:				
		subi.w	#$20,(a1)				; move 32 pixels left
		addq.w	#8,a1					; advance to next offset
		dbf	d6,.loop
		rts	
; ===========================================================================

SonicSegaScreen_MoveStreaksRight:				
		lea	(v_hscroll_buffer+(2*2*((9*8)+7))).w,a1
		move.w	#sizeof_Streak_Horizontal_Offsets-1,d6	; number of streaks-1

	.loop:				
		addi.w	#$20,(a1)				; move 32 pixels right
		addq.w	#8,a1					; advance to next offset
		dbf	d6,.loop
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Subroutine to update the palette for the blue streaks.

; input:
;	a1 = start of palette info
;	uses d0.b, d1.b, d2.b, a1, a2, a3
; ----------------------------------------------------------------------------
SonicSegaScreen_UpdateStreakPals:		
		subq.b	#1,ost_sonicsega_wait_time(a0)		; deincrement frame counter
		bne.s	.do_nothing				; if not zero, branch
		moveq	#0,d0
		move.b	ost_sonicsega_streakcounter(a0),d0	; number of times the palette update has been run
		addq.b	#1,d0					; increment counter
		cmp.b	1(a1),d0				; have we run the number of times specified? (7 by default)
		bcs.s	.updatepalette				; if so, branch
		tst.b	3(a1)					; ...why? this tests a hardcoded $FF to force the below branch to be taken
		bne.s	.palette_done				; these two instructions could simply be a bra.s instead
													
.updatepalette:				
		move.b	d0,ost_sonicsega_streakcounter(a0)	; update counter
		_move.b	0(a1),ost_sonicsega_wait_time(a0)	; reset wait time
		lea	6(a1),a2				; start of the actual palette data
		moveq	#0,d1
		move.b	2(a1),d1				; number of colors to skip
		move.w	d1,d2
		tst.w	d0					; is this the first update?
		beq.s	.set_target				; if so, branch

	.calc_offset:				
		subq.b	#1,d0					; deincrement 
		beq.s	.adjust_source				; if it has reached zero, branch
		add.w	d2,d1					; increase d1 by number of colors to skip
		bra.s	.calc_offset				; loop until d0 reaches zero to get source offset
; ===========================================================================

	.adjust_source:				
		adda.w	d1,a2					; adjust start location of palette data to copy

	.set_target:				
		movea.w	4(a1),a3				; location to write the palette data

	.loop:				
		move.w	(a2)+,(a3)+				; copy new palette data
		subq.w	#2,d2
		bne.s	.loop

	.do_nothing:				
		moveq	#0,d0					; set zero flag in CCR
		rts	
; ===========================================================================

	.palette_done:				
		moveq	#1,d0					; clear the zero flag in the CCR
		rts	
; ===========================================================================
Pal_SegaScreen2:	
	; some data describing how to use the following palette
		dc.b	4					; 0	; How many frames before each iteration
		dc.b	8-1					; 1	; How many iterations-1
		dc.b	8*2					; 2	; Number of colors * 2 to skip each iteration
		dc.b	$FF					; 3	; Hack to force a branch to .palette_done
		dc.w	v_pal_dry+$10				; 4	; First target palette entry

		incbin "art/palettes/Sega Screen 2.bin"

Pal_SegaScreen3:
; some data describing how to use the following palette
		dc.b	4					; 0	; How many frames before each iteration
		dc.b	8-1					; 1	; How many iterations
		dc.b	8*2					; 2	; Number of colors * 2 to skip each iteration
		dc.b	$FF					; 3	; Hack to force a branch to .palette_done
		dc.w	v_pal_dry				; 4	; First target palette entry
		
		incbin	"art/palettes/Sega Screen 3.bin"
		
		
SonicSegaScreen_SubtypeData:
		subtypedata	Map_SegaScreenSonic,(vram_Giant_Sonic/sizeof_cell)+tile_pal3+tile_hi,0,1,$10,0

SegaHideTM_SubtypeData:	
		subtypedata	Map_SegaScreenSonic,(vram_SEGA/sizeof_cell)+2,0,2,8,0
	
Ani_SonicSegaScreen:	index offset(*)
		ptr Ani_SonicSega_0 

Ani_SonicSega_0:	dc.b   0,  0,  1,  2,  3,$FF		; 0	

 		include "mappings/sprite/SegaScreenSonic.asm"
; ===========================================================================

SegaScreen_VBlank:				
		move.w	(v_segascr_vblank_sub).w,d0		; get VBlank subroutine
		beq.w	locret_37A48				; if it's 0, nothing to do
		clr.w	(v_segascr_vblank_sub).w
		move.w	SegaScreen_VBlank_Index-2(pc,d0.w),d0
		jmp	SegaScreen_VBlank_Index(pc,d0.w)
; ===========================================================================
SegaScreen_VBlank_Index:	index offset(*),2,2
		ptr SegaScreen_VBlank_InitLeft			; 2	; DMA the upscaled Sonic sprites and upload the FG table entries for the streaks when Sonic runs left
		ptr	SegaScreen_VBlank_InitRight		; 4	; upload the FG table entries for the streaks when Sonic runs right
; ===========================================================================

SegaScreen_VBlank_InitLeft:				
		dma	SonicSegaScreen_ScaledSpriteDataStart,sizeof_SonicSegaScreen_ScaledSpriteData,vram_Giant_Sonic
		lea	SonicSegaScreen_StreakFadeRight(pc),a1
		vdp_comm.l	move,(vram_sega_fg+((sizeof_vram_row_128*9)+(2*$28))),vram,write,d0 ; set VDP to VRAM write starting at $C590 (line 9, column $28)
		bra.w	SegaScreen_VBlank_SetFGTable
; ===========================================================================

SegaScreen_VBlank_InitRight:				
		dma_fill	0,sizeof_vram_planetable_128x32,vram_sega_fg
		lea	SonicSegaScreen_StreakFadeLeft(pc),a1
		vdp_comm.l	move,(vram_sega_fg+((sizeof_vram_row_128*9)+(2*$50))),vram,write,d0 ; set VDP to VRAM write starting at $C9A0 (line 9, column $50)
		bra.w	SegaScreen_VBlank_SetFGTable		; pointless

SegaScreen_VBlank_SetFGTable:				
		lea	(vdp_data_port).l,a6
		move.l	#sizeof_vram_row_128<<16,d6		; write $30 entries for each line, leaving $50 untouched.
		moveq	#8-1,d1					; run inner loop 8 tines
		moveq	#10-1,d2				; run outer loop 10 times

	.outerloop:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)	; set write address (this could have just used (a5), as that still has the control port in it from the dma_fill)
		move.w	d1,d3					; reset inner loop counter
		movea.l	a1,a2					; reset data pointer

	.innerloop:				
		move.w	(a2)+,d4				; get one name table entry
		bclr	#$A,d4					; test and clear end-of-line flag bit
		beq.s	.write_entry				; if end-of-line flag was not set, branch
		bsr.w	.write_end_of_line			; fill rest of line with this set of pixels (could be bsr.s)

	.write_entry:				
		move.w	d4,(a6)					; write nametable entry
		dbf	d3,.innerloop				; repeat 7 times
		add.l	d6,d0					; set next VRAM address
		dbf	d2,.outerloop				; repeat 10 times
		rts	
; ===========================================================================

.write_end_of_line:				
		moveq	#$2A-1-1,d5				; minus 1 for loop counter, minus 1 for write in .write_entry

	.loop:				
		move.w	d4,(a6)					; write this entry $29 times
		dbf	d5,.loop
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; FG nametable entries for the blue streaks
; ----------------------------------------------------------------------------
SonicSegaScreen_StreakFadeRight:	
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi	; 0 
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+1	; 2
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+2	; 4
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+3	; 6
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+4	; 8
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+5	; 10
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+6	; 12
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+7+(1<<$A) ; 14 ; bit $A is used as a flag to use this entry $29 times

SonicSegaScreen_StreakFadeLeft:	
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+7+(1<<$A) ; 0  ; bit $A is used as a flag to use this tile $29 times
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+6	; 2
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+5	; 4
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+4	; 6
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+3	; 8
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+2	; 10
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi+1	; 12
		dc.w tile_Nem_IntroTrails+tile_pal2+tile_hi	; 14

Streak_Horizontal_Offsets:	
		dc.b $12					; 0 
		dc.b   4					; 1
		dc.b   4					; 2
		dc.b   2					; 3
		dc.b   2					; 4
		dc.b   2					; 5
		dc.b   2					; 6
		dc.b   0					; 7
		dc.b   0					; 8
		dc.b   0					; 9
		dc.b   0					; 10
		dc.b   0					; 11
		dc.b   0					; 12
		dc.b   0					; 13
		dc.b   0					; 14
		dc.b   4					; 15
		dc.b   4					; 16
		dc.b   6					; 17
		dc.b  $A					; 18
		dc.b   8					; 19
		dc.b   6					; 20
		dc.b   4					; 21
		dc.b   4					; 22
		dc.b   4					; 23
		dc.b   4					; 24
		dc.b   6					; 25
		dc.b   6					; 26
		dc.b   8					; 27
		dc.b   8					; 28
		dc.b  $A					; 29
		dc.b  $A					; 30
		dc.b  $C					; 31
		dc.b  $E					; 32
		dc.b $10					; 33
		dc.b $16					; 34
	arraysize	Streak_Horizontal_Offsets
		even
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B2 - The Tornado (Tails' plane)
; ----------------------------------------------------------------------------

Tornado:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3A79E(pc,d0.w),d1
		jmp	off_3A79E(pc,d1.w)
; ===========================================================================
off_3A79E:	
		dc.w loc_3A7AE-off_3A79E			; 0 
		dc.w loc_3A7DE-off_3A79E			; 1
		dc.w loc_3A89A-off_3A79E			; 2
		dc.w loc_3A954-off_3A79E			; 3
		dc.w loc_3AC6A-off_3A79E			; 4
		dc.w loc_3AD0C-off_3A79E			; 5
		dc.w loc_3AD2A-off_3A79E			; 6
		dc.w loc_3AD42-off_3A79E			; 7
; ===========================================================================

loc_3A7AE:				
		bsr.w	LoadSubtypeData
		moveq	#0,d0
		move.b	$28(a0),d0
		subi.b	#$4E,d0
		move.b	d0,ost_primary_routine(a0)
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_3A7DA
		cmpi.b	#8,d0
		bcc.s	loc_3A7DA
		move.b	#4,$1A(a0)
		move.b	#1,$1C(a0)

loc_3A7DA:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3A7DE:				
		bsr.w	loc_3AF58
		tst.w	(v_debug_active).w
		bne.w	loc_3A880
		lea	($FFFFB000).w,a1
		move.w	ost_tile(a1),d0
		andi.w	#-$8000,d0
		move.w	ost_tile(a0),d1
		andi.w	#$7FFF,d1
		or.w	d0,d1
		move.w	d1,ost_tile(a0)
		move.w	ost_x_pos(a0),-(sp)
		bsr.w	loc_3ADAA
		move.b	$22(a0),$2E(a0)
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo27_SolidObject
		bsr.w	loc_3AE3A
		move.b	$2E(a0),d0
		move.b	$22(a0),d1
		andi.b	#8,d0
		andi.b	#8,d1
		eor.b	d0,d1
		move.b	d1,$2E(a0)
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a1),d1
		move.w	(v_camera_x_pos).w,d0
		move.w	d0,(v_boundary_left_next).w
		move.w	d0,d2
		addi.w	#$11,d2
		cmp.w	d2,d1
		bhi.s	loc_3A85E
		addq.w	#1,d1
		move.w	d1,ost_x_pos(a1)

loc_3A85E:				
		cmpi.w	#$1400,d0
		bcs.s	loc_3A878
		cmpi.w	#$1568,d1
		bcc.s	loc_3A88E
		st.b	(f_lock_controls).w
		move.w	#$808,(v_joypad_hold).w
		bra.w	loc_3A87C
; ===========================================================================

loc_3A878:				
		subi.w	#$40,d0

loc_3A87C:				
		move.w	d0,(v_boundary_right_next).w

loc_3A880:				
		lea	(off_3AFDC).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3A88E:				
		bsr.w	loc_3AC46
		move.w	#$600,(v_zone).w
		bra.s	loc_3A880
; ===========================================================================

loc_3A89A:				
		bsr.w	loc_3AF58
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3A8BA(pc,d0.w),d1
		jsr	off_3A8BA(pc,d1.w)
		lea	(off_3AFDC).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		bra.w	DeleteOffScreen
; ===========================================================================
off_3A8BA:	dc.w loc_3A8C2-off_3A8BA			; 0 
		dc.w loc_3A8D4-off_3A8BA			; 1
		dc.w loc_3A91A-off_3A8BA			; 2
		dc.w loc_3A94E-off_3A8BA			; 3
; ===========================================================================

loc_3A8C2:				
		addq.b	#2,$25(a0)
		move.w	#$C0,$32(a0)
		move.w	#$100,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_3A8D4:				
		subq.w	#1,$32(a0)
		bmi.s	loc_3A8FC
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_36776
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo27_SolidObject
		bra.w	loc_3AEEC
; ===========================================================================

loc_3A8FC:				
		addq.b	#2,$25(a0)
		move.w	#$60,$2A(a0)
		move.w	#1,$32(a0)
		move.w	#$100,ost_x_vel(a0)
		move.w	#$100,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3A91A:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3A92A
		moveq	#-$15,d0
		jsrto	PlaySound,JmpTo12_PlaySound

loc_3A92A:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3A946

loc_3A930:				
		bsr.w	loc_3AD8C
		subq.w	#1,$32(a0)
		bne.w	locret_37A48
		move.w	#$E,$32(a0)
		bra.w	loc_3AF34
; ===========================================================================

loc_3A946:				
		addq.b	#2,$25(a0)
		bra.w	loc_3B7BC
; ===========================================================================

loc_3A94E:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bra.s	loc_3A930
; ===========================================================================

loc_3A954:				
		bsr.w	loc_3AF58
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3A970(pc,d0.w),d1
		jsr	off_3A970(pc,d1.w)
		lea	(off_3AFDC).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================
off_3A970:	dc.w loc_3A982-off_3A970			; 0 
		dc.w loc_3AA0E-off_3A970			; 1
		dc.w loc_3AA4C-off_3A970			; 2
		dc.w loc_3AA74-off_3A970			; 3
		dc.w loc_3AAA8-off_3A970			; 4
		dc.w loc_3AAFE-off_3A970			; 5
		dc.w loc_3AB68-off_3A970			; 6
		dc.w loc_3AB7C-off_3A970			; 7
		dc.w loc_3ABDE-off_3A970			; 8
; ===========================================================================

loc_3A982:				
		lea	($FFFFB000).w,a1
		cmpi.w	#$5EC,ost_y_pos(a1)
		bcs.s	locret_3A99E
		clr.w	(v_joypad_hold).w
		addq.w	#1,$2E(a0)
		cmpi.w	#$40,$2E(a0)
		bcc.s	loc_3A9A0

locret_3A99E:				
		rts	
; ===========================================================================

loc_3A9A0:				
		addq.b	#2,$25(a0)
		move.w	#$2E58,ost_x_pos(a0)
		move.w	#$66C,ost_y_pos(a0)
		lea	($FFFFB000).w,a1
		bsr.w	loc_3AC56
		lea	(word_3AFBC).l,a2
		bsr.w	LoadChild
		move.w	#$3118,ost_x_pos(a1)
		move.w	#$3F0,ost_y_pos(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	LoadChild
		move.w	#$3070,ost_x_pos(a1)
		move.w	#$3B0,ost_y_pos(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	LoadChild
		move.w	#$3070,ost_x_pos(a1)
		move.w	#$430,ost_y_pos(a1)
		lea	(word_3AFC0).l,a2
		bsr.w	LoadChild
		clr.w	ost_x_pos(a1)
		clr.w	ost_y_pos(a1)
		rts	
; ===========================================================================

loc_3AA0E:				
		lea	($FFFFB000).w,a1
		cmpi.w	#$2E30,ost_x_pos(a1)
		bcc.s	loc_3AA22
		move.w	#$808,(v_joypad_hold).w
		rts	
; ===========================================================================

loc_3AA22:				
		addq.b	#2,$25(a0)
		clr.w	(v_joypad_hold).w
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		clr.w	ost_inertia(a1)
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		bra.w	loc_3AC56
; ===========================================================================

loc_3AA4C:				
		cmpi.w	#$380,(v_camera_x_pos_offset).w
		bcc.s	loc_3AA5C
		clr.w	(v_joypad_hold).w
		bra.w	loc_3AC56
; ===========================================================================

loc_3AA5C:				
		addq.b	#2,$25(a0)
		move.w	#$100,ost_x_vel(a0)
		move.w	#-$100,ost_y_vel(a0)
		clr.w	$2A(a0)
		bra.w	loc_3AC56
; ===========================================================================

loc_3AA74:				
		bsr.w	loc_3AC56
		addq.w	#1,$2A(a0)
		cmpi.w	#$30,$2A(a0)
		bne.s	loc_3AAA0
		addq.b	#2,$25(a0)
		move.w	#$4040,(v_joypad_hold).w
		move.w	#$38,$2E(a0)
		tst.b	(f_super).w
		beq.s	loc_3AAA0
		move.w	#$28,$2E(a0)

loc_3AAA0:				
		bsr.w	loc_3AD8C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3AAA8:				
		clr.w	(v_joypad_hold).w
		addq.w	#1,$2A(a0)
		subq.w	#1,$2E(a0)
		bmi.s	loc_3AABC
		move.w	#$4848,(v_joypad_hold).w

loc_3AABC:				
		bsr.w	loc_3AD8C
		btst	#3,$22(a0)
		beq.s	loc_3AAFA
		addq.b	#2,$25(a0)
		move.w	#$20,$2E(a0)
		lea	($FFFF80D2).w,a1
		move.l	#$501F0025,(a1)+
		lea	($FFFF81D2).w,a1
		move.l	#$25001F50,(a1)+
		lea	($FFFF8BD6).w,a1
		move.l	#$501F0025,(a1)+
		lea	($FFFF8CD6).w,a1
		move.l	#$25001F50,(a1)+

loc_3AAFA:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3AAFE:				
		addq.w	#1,$2A(a0)
		cmpi.w	#$100,$2A(a0)
		bcs.s	loc_3AB18
		addq.b	#2,$25(a0)
		movea.w	$3A(a0),a1
		move.b	#2,$25(a1)

loc_3AB18:				
		clr.w	(v_joypad_hold).w
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		clr.w	ost_inertia(a1)
		bclr	#1,$22(a1)
		bclr	#2,$22(a1)
		move.l	#$1000505,$1A(a1)
		move.w	#$100,$1E(a1)
		move.b	#$13,ost_height(a1)
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_3AB60
		move.b	#$F,ost_height(a1)

loc_3AB60:				
		bsr.w	loc_3AD8C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3AB68:				
		clr.w	(v_joypad_hold).w
		bsr.w	loc_3AC56
		cmpi.w	#$437,$2A(a0)
		bcs.s	loc_3AB8A
		addq.b	#2,$25(a0)

loc_3AB7C:				
		cmpi.w	#$447,$2A(a0)
		bcc.s	loc_3AB8A
		move.w	#$4040,(v_joypad_hold).w

loc_3AB8A:				
		cmpi.w	#$460,$2A(a0)
		bcs.s	loc_3ABDE
		move.b	#6,(v_dle_routine).w
		addq.b	#2,$25(a0)
		lea	(word_3AFB8).l,a2
		bsr.w	LoadChild
		move.w	#$3090,ost_x_pos(a1)
		move.w	#$3D0,ost_y_pos(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	LoadChild
		move.w	#$30C0,ost_x_pos(a1)
		move.w	#$3F0,ost_y_pos(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	LoadChild
		move.w	#$3090,ost_x_pos(a1)
		move.w	#$410,ost_y_pos(a1)

loc_3ABDE:				
					
		cmpi.w	#$9C0,$2A(a0)
		bcc.s	loc_3AC40
		move.w	$2A(a0),d0
		addq.w	#1,d0
		move.w	d0,$2A(a0)
		move.w	$34(a0),d1
		move.w	word_3AC16(pc,d1.w),d2
		cmp.w	d2,d0
		bcs.s	loc_3AC0E
		addq.w	#2,d1
		move.w	d1,$34(a0)
		lea	byte_3AC2A(pc,d1.w),a1
		move.b	(a1)+,ost_x_vel(a0)
		move.b	(a1)+,ost_y_vel(a0)

loc_3AC0E:				
		bsr.w	loc_3AD8C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
word_3AC16:	
		dc.w  $1E0					; 0
		dc.w  $260					; 1
		dc.w  $2A0					; 2
		dc.w  $2C0					; 3
		dc.w  $300					; 4
		dc.w  $3A0					; 5
		dc.w  $3F0					; 6
		dc.w  $460					; 7
		dc.w  $4A0					; 8
		dc.w  $580					; 9

byte_3AC2A:	
		dc.b $FF					; 0
		dc.b $FF					; 1
		dc.b   1					; 2
		dc.b   0					; 3
		dc.b   0					; 4
		dc.b   1					; 5
		dc.b   1					; 6
		dc.b $FF					; 7
		dc.b   1					; 8
		dc.b   1					; 9
		dc.b   1					; 10
		dc.b $FF					; 11
		dc.b $FF					; 12
		dc.b   1					; 13
		dc.b $FF					; 14
		dc.b $FF					; 15
		dc.b $FF					; 16
		dc.b   1					; 17
		dc.b $FE					; 18
		dc.b   0					; 19
		dc.b   0					; 20
		dc.b   0					; 21
; ===========================================================================

loc_3AC40:				
		move.w	#$E00,(v_zone).w

loc_3AC46:				
		move.w	#1,(f_restart).w
		clr.b	(v_last_lamppost).w
		clr.b	(v_last_lamppost_p2).w
		rts	
; ===========================================================================

loc_3AC56:				
		lea	($FFFFB000).w,a1
		move.l	#$1000505,$1A(a1)
		move.w	#$100,$1E(a1)
		rts	
; ===========================================================================

loc_3AC6A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AC78(pc,d0.w),d1
		jmp	off_3AC78(pc,d1.w)
; ===========================================================================
off_3AC78:	dc.w loc_3AC7E-off_3AC78			; 0 
		dc.w loc_3AC84-off_3AC78			; 1
		dc.w loc_3ACF2-off_3AC78			; 2
; ===========================================================================

loc_3AC7E:				
		move.b	#-$39,$20(a0)

loc_3AC84:				
		tst.b	$21(a0)
		beq.s	locret_3ACF0
		addq.b	#2,$25(a0)
		clr.b	$20(a0)
		move.w	#$78,(v_camera_y_shift).w
		movea.w	$2C(a0),a1
		bset	#6,$22(a1)
		lea	($FFFFB000).w,a1
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		move.w	ost_x_pos(a0),d0
		subi.w	#$10,d0
		move.w	d0,ost_x_pos(a1)
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_3ACC8
		subi.w	#$10,ost_y_pos(a1)

loc_3ACC8:				
		bset	#0,$22(a1)
		bclr	#1,$22(a1)
		bclr	#2,$22(a1)
		move.b	#$11,$1C(a1)
		move.b	#1,($FFFFB02A).w
		move.b	#1,(f_wind_tunnel_disable).w
		clr.w	(v_joypad_hold).w

locret_3ACF0:				
		rts	
; ===========================================================================

loc_3ACF2:				
		lea	($FFFFB000).w,a1
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		move.w	ost_x_pos(a0),d0
		subi.w	#$10,d0
		move.w	d0,ost_x_pos(a1)
		rts	
; ===========================================================================

loc_3AD0C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AD1A(pc,d0.w),d1
		jmp	off_3AD1A(pc,d1.w)
; ===========================================================================
off_3AD1A:	dc.w loc_3AD1C-off_3AD1A
; ===========================================================================

loc_3AD1C:				
		bchg	#2,$22(a0)
		bne.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3AD2A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AD38(pc,d0.w),d1
		jmp	off_3AD38(pc,d1.w)
; ===========================================================================
off_3AD38:	dc.w loc_3AD3A-off_3AD38
; ===========================================================================

loc_3AD3A:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3AD42:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AD50(pc,d0.w),d1
		jmp	off_3AD50(pc,d1.w)
; ===========================================================================
off_3AD50:	dc.w loc_3AD54-off_3AD50			; 0 
		dc.w loc_3AD5C-off_3AD50			; 1
; ===========================================================================

loc_3AD54:				
		bsr.w	loc_3AD6E
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3AD5C:				
		bsr.w	loc_3AD6E
		lea	(off_3AFEC).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3AD6E:				
		movea.w	$2C(a0),a1
		move.w	ost_x_pos(a1),d0
		subi.w	#$C,d0
		move.w	d0,ost_x_pos(a0)
		move.w	ost_y_pos(a1),d0
		addi.w	#$28,d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_3AD8C:				
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_36776
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		jmpto	SolidObject,JmpTo27_SolidObject
; ===========================================================================

loc_3ADAA:				
		lea	($FFFFB000).w,a1
		btst	#3,$22(a1)
		beq.s	loc_3ADC6
		bsr.w	loc_3ADF6
		bsr.w	loc_3AF0C
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bra.w	loc_36776
; ===========================================================================

loc_3ADC6:				
		tst.b	$2E(a0)
		beq.s	loc_3ADD4
		bsr.w	GetClosestPlayer
		move.w	d2,$38(a0)

loc_3ADD4:				
		move.w	#1,d0
		move.w	$38(a0),d3
		beq.s	loc_3ADE8
		bmi.s	loc_3ADE2
		neg.w	d0

loc_3ADE2:				
		add.w	d0,d3
		move.w	d3,$38(a0)

loc_3ADE8:				
		move.w	ost_x_pos(a1),d1
		add.w	d3,d1
		move.w	d1,ost_x_pos(a0)
		bra.w	loc_36776
; ===========================================================================

loc_3ADF6:				
		tst.b	$2F(a0)
		bne.s	loc_3AE16
		tst.b	$2E(a0)
		beq.s	locret_3AE38
		st.b	$2F(a0)
		clr.b	$30(a0)
		move.w	#$200,ost_y_vel(a0)
		move.b	#$14,$31(a0)

loc_3AE16:				
		subq.b	#1,$31(a0)
		bpl.s	loc_3AE26
		clr.b	$2F(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3AE26:				
		move.w	ost_y_vel(a0),d0
		cmpi.w	#-$100,d0
		ble.s	loc_3AE34
		addi.w	#-$20,d0

loc_3AE34:				
		move.w	d0,ost_y_vel(a0)

locret_3AE38:				
		rts	
; ===========================================================================

loc_3AE3A:				
		lea	($FFFFB000).w,a1
		btst	#3,$22(a1)
		beq.s	loc_3AEA0
		tst.b	$2F(a0)
		bne.s	loc_3AE72
		clr.w	ost_y_vel(a0)
		move.w	(v_joypad_hold_actual).w,d2
		move.w	#$80,d3	
		andi.w	#$300,d2
		beq.s	loc_3AE72
		andi.w	#$200,d2
		bne.s	loc_3AE66
		neg.w	d3

loc_3AE66:				
		move.w	d3,ost_y_vel(a0)
		bsr.w	loc_3AF0C
		jsrto	SpeedToPos,JmpTo26_SpeedToPos

loc_3AE72:				
		bsr.w	GetClosestPlayer
		moveq	#$10,d3
		add.w	d3,d2
		cmpi.w	#$20,d2
		bcs.s	locret_3AE9E
		move.w	ost_inertia(a1),d2
		bpl.s	loc_3AE88
		neg.w	d2

loc_3AE88:				
		cmpi.w	#$900,d2
		bcc.s	locret_3AE9E
		tst.w	d0
		beq.s	loc_3AE94
		neg.w	d3

loc_3AE94:				
		move.w	ost_x_pos(a1),d1
		add.w	d3,d1
		move.w	d1,ost_x_pos(a0)

locret_3AE9E:				
		rts	
; ===========================================================================

loc_3AEA0:				
		tst.b	$30(a0)
		bne.s	loc_3AEC0
		tst.b	$2E(a0)
		beq.s	locret_3AE9E
		st.b	$30(a0)
		clr.b	$2F(a0)
		move.w	#$200,ost_y_vel(a0)
		move.b	#$2B,$31(a0)

loc_3AEC0:				
		subq.b	#1,$31(a0)
		bpl.s	loc_3AED0
		clr.b	$30(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3AED0:				
		move.w	ost_y_vel(a0),d0
		cmpi.w	#-$100,d0
		ble.s	loc_3AEDE
		addi.w	#-$20,d0

loc_3AEDE:				
		move.w	d0,ost_y_vel(a0)
		bsr.w	loc_3AF0C
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		rts	
; ===========================================================================

loc_3AEEC:				
		bsr.w	GetClosestPlayer
		moveq	#$10,d3
		add.w	d3,d2
		cmpi.w	#$20,d2
		bcs.s	locret_3AF0A
		tst.w	d0
		beq.s	loc_3AF00
		neg.w	d3

loc_3AF00:				
		move.w	ost_x_pos(a0),d1
		sub.w	d3,d1
		move.w	d1,ost_x_pos(a1)

locret_3AF0A:				
		rts	
; ===========================================================================

loc_3AF0C:				
		move.w	(v_camera_y_pos).w,d0
		move.w	ost_y_pos(a0),d1
		move.w	ost_y_vel(a0),d2
		beq.s	locret_3AF32
		bpl.s	loc_3AF26
		addi.w	#$34,d0
		cmp.w	d0,d1
		bcs.s	loc_3AF2E
		rts	
; ===========================================================================

loc_3AF26:				
		addi.w	#$A8,d0	
		cmp.w	d0,d1
		bcs.s	locret_3AF32

loc_3AF2E:				
		clr.w	ost_y_vel(a0)

locret_3AF32:				
		rts	
; ===========================================================================

loc_3AF34:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_3AF56
		_move.b	#id_TornadoSmoke_C4,ost_id(a1)		; load with duplicate pointer
		move.b	#$90,$28(a1)
		move.w	a0,$2C(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)

locret_3AF56:				
		rts	
; ===========================================================================

loc_3AF58:				
		subq.b	#1,$37(a0)
		bmi.s	loc_3AF60
		rts	
; ===========================================================================

loc_3AF60:				
		move.b	#8,$37(a0)
		moveq	#0,d0
		move.b	$36(a0),d0
		moveq	#$18,d1
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_3AF78
		moveq	#4,d1

loc_3AF78:				
		addq.b	#1,d0
		cmp.w	d1,d0
		bcs.s	loc_3AF80
		moveq	#0,d0

loc_3AF80:				
		move.b	d0,$36(a0)
		cmpi.w	#tails_alone,(v_player_mode).w
		bne.s	loc_3AF94
		move.b	byte_3AF9C(pc,d0.w),d0
		jmpto	Sonic_LoadGFX_2,JmpTo_Sonic_LoadGFX_2
; ===========================================================================

loc_3AF94:				
		move.b	byte_3AFA0(pc,d0.w),d0
		jmpto	Tails_LoadGFX_2,JmpTo_Tails_LoadGFX_2
; ===========================================================================
byte_3AF9C:	dc.b $2D					; 0
		dc.b $2E					; 1
		dc.b $2F					; 2
		dc.b $30					; 3
byte_3AFA0:	dc.b $10					; 0
		dc.b $10					; 1
		dc.b $10					; 2
		dc.b $10					; 3
		dc.b   1					; 4
		dc.b   2					; 5
		dc.b   3					; 6
		dc.b   2					; 7
		dc.b   1					; 8
		dc.b   1					; 9
		dc.b $10					; 10
		dc.b $10					; 11
		dc.b $10					; 12
		dc.b $10					; 13
		dc.b   1					; 14
		dc.b   2					; 15
		dc.b   3					; 16
		dc.b   2					; 17
		dc.b   1					; 18
		dc.b   1					; 19
		dc.b   4					; 20
		dc.b   4					; 21
		dc.b   1					; 22
		dc.b   1					; 23
word_3AFB8:	dc.w   $3E					; 0 
		dc.w $B258					; 1
word_3AFBC:	dc.w   $3C					; 0 
		dc.w $B256					; 1
word_3AFC0:	dc.w   $3A					; 0 
		dc.w $B25C					; 1
		dc.w   $3E					; 0
		dc.w $B25A					; 1
off_3AFC8:	dc.l Map_3AFF2					; 0 

		dc.w $8500
		dc.w $404
		dc.w $6000
off_3AFD2:	dc.l Map_3B292	
		dc.w $561
		dc.w $403
		dc.w $4000
off_3AFDC:	dc.w byte_3AFE0-off_3AFDC			; 0 

		dc.w byte_3AFE6-off_3AFDC			; 1
byte_3AFE0:	dc.b   0,  0,  1,  2,  3,$FF			; 0	
byte_3AFE6:	dc.b   0,  4,  5,  6,  7,$FF			; 0	
off_3AFEC:	dc.w byte_3AFEE-off_3AFEC 
byte_3AFEE:	dc.b   0,  1,  2,$FF				; 0 
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3AFF2:				
		dc.w byte_3AFFE-byte_3AFEE			; 0
		dc.w byte_3B050-byte_3AFEE			; 1
		dc.w byte_3B0A2-byte_3AFEE			; 2
		dc.w byte_3B0F4-byte_3AFEE			; 3
		dc.w byte_3B146-byte_3AFEE			; 4
		dc.w byte_3B198-byte_3AFEE			; 5
byte_3AFFE:	dc.b   1,$FC,  2,$4E,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$3F,  0,$1F,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
byte_3B050:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$46,  0,$23,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
byte_3B0A2:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$49,  0,$24,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
byte_3B0F4:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$4C,  0,$26,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
byte_3B146:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$3F,  0,$1F,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
byte_3B198:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$46,  0,$23,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
		dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$49,  0,$24,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
		dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8 ; 0
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9 ; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D ; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E ; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$4C,  0,$26,  0,$10,$20,  5 ; 64
		dc.b   0,$42					; 80
		dc.b   0,$21,$FF,$F4				; 0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3B292:				
		dc.w word_3B298-Map_3B292			; 0
		dc.w word_3B2AA-Map_3B292			; 1
		dc.w word_3B2C4-Map_3B292			; 2
word_3B298:	dc.w 2			
		dc.w $F809,$2000,$2000,$FFE4			; 0
		dc.w $F80D,$2006,$2003,$FFFC			; 4
word_3B2AA:	dc.w 3			
		dc.w $F809,$2000,$2000,$FFE4			; 0
		dc.w $F80D,$2006,$2003,$FFFC			; 4
		dc.w $F80D,$400E,$4007,$FFC4			; 8
word_3B2C4:	dc.w 3			
		dc.w $F809,$2000,$2000,$FFE4			; 0
		dc.w $F80D,$2006,$2003,$FFFC			; 4
		dc.w $F805,$4016,$400B,$FFD4			; 8
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B3 - Clouds (placeable object) in SCZ
; ----------------------------------------------------------------------------

Cloud:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3B2EC(pc,d0.w),d1
		jmp	off_3B2EC(pc,d1.w)
; ===========================================================================
off_3B2EC:
		dc.w loc_3B2F0-off_3B2EC			; 0 
		dc.w loc_3B312-off_3B2EC			; 1
; ===========================================================================

loc_3B2F0:				
		bsr.w	LoadSubtypeData
		moveq	#0,d0
		move.b	$28(a0),d0
		subi.b	#$5E,d0

loc_3B2FE:
		move.w	word_3B30C(pc,d0.w),ost_x_vel(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		rts	
; ===========================================================================
word_3B30C:	dc.w $FF80					; 0
		dc.w $FFC0					; 1
		dc.w $FFE0					; 2
; ===========================================================================

loc_3B312:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		move.w	(v_tornado_x_vel).w,d0
		add.w	d0,ost_x_pos(a0)
		bra.w	DeleteBehindScreen
; ===========================================================================
off_3B322:	
		dc.l Map_3B32C				
		dc.w $454F
		dc.w $406
		dc.w $3000
		
Map_3B32C:				
		dc.w byte_3B334-Map_3B32C			; 0
		dc.w byte_3B34E-Map_3B32C			; 1
		dc.w byte_3B360-Map_3B32C			; 2
		dc.w byte_3B334-Map_3B32C			; 3
byte_3B334:	dc.b   0,  3,$FC, $C,  0,  0,  0,  0,$FF,$D8,$FC, $C,  0,  4,  0,  2 ; 0
					
		dc.b $FF,$F8,$FC,  4,  0,  8,  0,  4,  0,$18	; 16
byte_3B34E:	dc.b   0,  2,$FC, $C,  0, $A,  0,  5,$FF,$E8,$FC,  4,  0, $E,  0,  7 ; 0
					
		dc.b   0,  8					; 16
byte_3B360:	dc.b   0,  1,$FC,  4,  0,$10,  0,  8,$FF,$F8	; 0	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B4 - WFZ vertical propeller
; ----------------------------------------------------------------------------

VerticalPropeller:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3B378(pc,d0.w),d1
		jmp	off_3B378(pc,d1.w)
; ===========================================================================
off_3B378:
		dc.w loc_3B37C-off_3B378			; 0 
		dc.w loc_3B38E-off_3B378			; 1
; ===========================================================================

loc_3B37C:				
		bsr.w	LoadSubtypeData
		bclr	#render_yflip_bit,ost_render(a0)
		beq.s	locret_3B38C
		clr.b	$20(a0)

locret_3B38C:				
		rts	
; ===========================================================================

loc_3B38E:				
		lea	(off_3B3B6).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3B3A8
		moveq	#-$22,d0
		jsrto	PlaySoundLocal,JmpTo_PlaySoundLocal

loc_3B3A8:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3B3AC:
		dc.l Map_3B3BE	
		dc.w $A561
		dc.w $404
		dc.w $4A8
		
off_3B3B6:
		dc.w byte_3B3B8-off_3B3B6 

byte_3B3B8:	
		dc.b   1,  0,  1,  2,$FF,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3B3BE:				
		dc.w word_3B3C4-Map_3B3BE			; 0
		dc.w word_3B3D6-Map_3B3BE			; 1
		dc.w word_3B3E8-Map_3B3BE			; 2
word_3B3C4:	dc.w 2			
		dc.w $C003,    0,    0,$FFFC			; 0
		dc.w $E003,$1000,$1000,$FFFC			; 4
word_3B3D6:	dc.w 2			
		dc.w $E003,    0,    0,$FFFC			; 0
		dc.w	 3,$1000,$1000,$FFFC			; 4
word_3B3E8:	dc.w 2			
		dc.w	 3,    0,    0,$FFFC			; 0
		dc.w $2003,$1000,$1000,$FFFC			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B5 - WFZ horizontal propeller 
; ----------------------------------------------------------------------------

HorizontalPropeller:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3B408(pc,d0.w),d1
		jmp	off_3B408(pc,d1.w)
; ===========================================================================
off_3B408:
		dc.w loc_3B40E-off_3B408			; 0 
		dc.w loc_3B426-off_3B408			; 1
		dc.w loc_3B448-off_3B408			; 2
; ===========================================================================

loc_3B40E:				
		bsr.w	LoadSubtypeData
		move.b	#4,$1C(a0)
		move.b	$28(a0),d0
		subi.b	#$64,d0
		move.b	d0,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_3B426:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B442(pc,d0.w),d1
		jsr	off_3B442(pc,d1.w)
		lea	(off_3B4E8).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3B442:
		dc.w loc_3B444-off_3B442
; ===========================================================================

loc_3B444:				
		bra.w	loc_3B456
; ===========================================================================

loc_3B448:				
		lea	(off_3B4E8).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3B456:				
		cmpi.b	#4,$1C(a0)
		bne.s	locret_3B4DC
		lea	($FFFFB000).w,a1
		bsr.w	loc_3B46A
		lea	($FFFFB040).w,a1

loc_3B46A:				
		move.w	ost_x_pos(a1),d0
		sub.w	ost_x_pos(a0),d0
		addi.w	#$40,d0
		cmpi.w	#$80,d0	
		bcc.s	locret_3B4DC
		moveq	#0,d1
		move.b	($FFFFFE74).w,d1
		add.w	ost_y_pos(a1),d1
		addi.w	#$60,d1
		sub.w	ost_y_pos(a0),d1
		bcs.s	locret_3B4DC
		cmpi.w	#$90,d1	
		bcc.s	locret_3B4DC
		subi.w	#$60,d1
		bcs.s	loc_3B4A0
		not.w	d1
		add.w	d1,d1

loc_3B4A0:				
		addi.w	#$60,d1
		neg.w	d1
		asr.w	#4,d1
		add.w	d1,ost_y_pos(a1)
		bset	#1,$22(a1)
		move.w	#0,ost_y_vel(a1)
		move.w	#1,ost_inertia(a1)
		tst.b	$27(a1)
		bne.s	locret_3B4DC
		move.b	#1,$27(a1)
		move.b	#$F,$1C(a1)
		move.b	#$7F,$2C(a1)
		move.b	#8,$2D(a1)

locret_3B4DC:				
		rts	
; ===========================================================================
off_3B4DE:	dc.l Map_3B548	
		dc.w $A3CD
		dc.w $404
		dc.w $4000
off_3B4E8:	dc.w byte_3B4FC-off_3B4E8			; 0 
		dc.w byte_3B506-off_3B4E8			; 1
		dc.w byte_3B50E-off_3B4E8			; 2
		dc.w byte_3B516-off_3B4E8			; 3
		dc.w byte_3B51C-off_3B4E8			; 4
		dc.w byte_3B524-off_3B4E8			; 5
		dc.w byte_3B52A-off_3B4E8			; 6
		dc.w byte_3B532-off_3B4E8			; 7
		dc.w byte_3B53A-off_3B4E8			; 8
		dc.w byte_3B544-off_3B4E8			; 9
byte_3B4FC:	dc.b   7,  0,  1,  2,  3,  4,  5,$FD,  1,  0	; 0	
byte_3B506:	dc.b   4,  0,  1,  2,  3,  4,$FD,  2		; 0	
byte_3B50E:	dc.b   3,  5,  0,  1,  2,$FD,  3,  0		; 0	
byte_3B516:	dc.b   2,  3,  4,  5,$FD,  4			; 0	
byte_3B51C:	dc.b   1,  0,  1,  2,  3,  4,  5,$FF		; 0	
byte_3B524:	dc.b   2,  5,  4,  3,$FD,  6			; 0	
byte_3B52A:	dc.b   3,  2,  1,  0,  5,$FD,  7,  0		; 0	
byte_3B532:	dc.b   4,  4,  3,  2,  1,  0,$FD,  8		; 0	
byte_3B53A:	dc.b   7,  5,  4,  3,  2,  1,  0,$FD,  9,  0	; 0	
byte_3B544:	dc.b $7E,  0,$FF,  0				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3B548:				
		dc.w word_3B554-Map_3B548			; 0
		dc.w word_3B576-Map_3B548			; 1
		dc.w word_3B588-Map_3B548			; 2
		dc.w word_3B59A-Map_3B548			; 3
		dc.w word_3B5AC-Map_3B548			; 4
		dc.w word_3B5BE-Map_3B548			; 5
word_3B554:	dc.w 4			
		dc.w $FC0C,    0,    0,$FFC0			; 0
		dc.w $FC08,    4,    2,$FFE0			; 4
		dc.w $FC08,    7,    3,	   8			; 8
		dc.w $FC0C,   $A,    5,	 $20			; 12
word_3B576:	dc.w 2			
		dc.w $FC0C,   $E,    7,$FFD8			; 0
		dc.w $FC0C,  $12,    9,	   8			; 4
word_3B588:	dc.w 2			
		dc.w $FC08,  $16,   $B,$FFE8			; 0
		dc.w $FC04,  $19,   $C,	   8			; 4
word_3B59A:	dc.w 2			
		dc.w $FC04,  $1B,   $D,$FFF0			; 0
		dc.w $FC04, $81B, $80D,	   0			; 4
word_3B5AC:	dc.w 2			
		dc.w $FC04, $819, $80C,$FFE8			; 0
		dc.w $FC08, $816, $80B,	   0			; 4
word_3B5BE:	dc.w 2			
		dc.w $FC0C, $812, $809,$FFD8			; 0
		dc.w $FC0C, $80E, $807,	   8			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B6 - WFZ tilting platform
; ----------------------------------------------------------------------------

TiltingPlatform:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3B5DE(pc,d0.w),d1
		jmp	off_3B5DE(pc,d1.w)
; ===========================================================================
off_3B5DE:
		dc.w loc_3B5E8-off_3B5DE			; 0 
		dc.w loc_3B602-off_3B5DE			; 1
		dc.w loc_3B65C-off_3B5DE			; 2
		dc.w loc_3B6C8-off_3B5DE			; 3
		dc.w loc_3B73C-off_3B5DE			; 4
; ===========================================================================

loc_3B5E8:				
		moveq	#0,d0
		move.b	#$6A,d0
		bsr.w	LoadSubtypeData_Part2
		move.b	$28(a0),d0
		andi.b	#6,d0
		addq.b	#2,d0
		move.b	d0,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_3B602:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B614(pc,d0.w),d1
		jsr	off_3B614(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3B614:
		dc.w loc_3B61C-off_3B614			; 0 
		dc.w loc_3B624-off_3B614			; 1
		dc.w loc_3B644-off_3B614			; 2
		dc.w loc_3B64E-off_3B614			; 3
; ===========================================================================

loc_3B61C:				
		addq.b	#2,$25(a0)
		bra.w	loc_3B77E
; ===========================================================================

loc_3B624:				
		bsr.w	loc_3B790
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#-$10,d0
		cmp.b	$28(a0),d0
		beq.s	loc_3B638
		rts	
; ===========================================================================

loc_3B638:				
		addq.b	#2,$25(a0)
		clr.b	$1C(a0)
		bra.w	loc_3B7BC
; ===========================================================================

loc_3B644:				
		lea	(off_3B822).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_3B64E:				
		move.b	#2,$25(a0)
		move.w	#$C0,$2A(a0)
		rts	
; ===========================================================================

loc_3B65C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	word_3B66E(pc,d0.w),d1
		jsr	word_3B66E(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
word_3B66E:
		dc.w loc_3B61C-word_3B66E			; 0 
		dc.w loc_3B674-word_3B66E
		dc.w loc_3B6A6-word_3B66E
; ===========================================================================

loc_3B674:				
		bsr.w	loc_3B790
		subq.w	#1,$2A(a0)
		bmi.s	loc_3B680
		rts	
; ===========================================================================

loc_3B680:				
		addq.b	#2,$25(a0)
		move.b	#$20,$2A(a0)
		move.b	#3,$1C(a0)
		clr.b	$1B(a0)
		clr.b	$1E(a0)
		bsr.w	loc_3B7BC
		bsr.w	loc_3B7F8
		moveq	#-$24,d0
		jmpto	PlaySound,JmpTo12_PlaySound
; ===========================================================================

loc_3B6A6:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_3B6B6
		lea	(off_3B822).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_3B6B6:				
		move.b	#2,$25(a0)
		clr.b	$1A(a0)
		move.w	#$C0,$2A(a0)
		rts	
; ===========================================================================

loc_3B6C8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B6DA(pc,d0.w),d1

loc_3B6D2:
		jsr	off_3B6DA(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3B6DA:
		dc.w loc_3B6E2-off_3B6DA			; 0 
		dc.w loc_3B6FE-off_3B6DA			; 1
		dc.w loc_3B72C-off_3B6DA			; 2
		dc.w loc_3B736-off_3B6DA			; 3
; ===========================================================================

loc_3B6E2:				
		bsr.w	loc_3B790
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_3B6F2
		rts	
; ===========================================================================

loc_3B6F2:				
		addq.b	#2,$25(a0)
		move.w	#$10,$2A(a0)
		rts	
; ===========================================================================

loc_3B6FE:				
		bsr.w	loc_3B790
		subq.w	#1,$2A(a0)
		bmi.s	loc_3B70A
		rts	
; ===========================================================================

loc_3B70A:				
		addq.b	#2,$25(a0)

loc_3B70E:
		move.b	#0,$1C(a0)
		bsr.w	GetClosestPlayer

loc_3B718:
		bclr	#0,$22(a0)
		tst.w	d0
		bne.s	loc_3B728
		bset	#0,$22(a0)

loc_3B728:				
		bra.w	loc_3B7BC
; ===========================================================================

loc_3B72C:				
		lea	(off_3B822).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_3B736:				
		clr.b	$25(a0)
		rts	
; ===========================================================================

loc_3B73C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B74E(pc,d0.w),d1
		jsr	off_3B74E(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3B74E:
		dc.w loc_3B756-off_3B74E			; 0 
		dc.w loc_3B764-off_3B74E
		dc.w loc_3B644-off_3B74E
		dc.w loc_3B64E-off_3B74E
; ===========================================================================

loc_3B756:				
		addq.b	#2,$25(a0)

loc_3B75A:
		move.b	#2,$1A(a0)
		bra.w	loc_3B77E
; ===========================================================================

loc_3B764:				
		bsr.w	loc_3B7A6
		subq.w	#1,$2A(a0)
		bmi.s	loc_3B770
		rts	
; ===========================================================================

loc_3B770:				
		addq.b	#2,$25(a0)
		move.b	#4,$1C(a0)
		bra.w	loc_3B7BC
; ===========================================================================

loc_3B77E:				
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		move.b	d0,$28(a0)
		move.w	d0,$2A(a0)
		rts	
; ===========================================================================

loc_3B790:				
		move.w	ost_x_pos(a0),-(sp)
		move.w	#$23,d1
		move.w	#4,d2
		move.w	#4,d3
		move.w	(sp)+,d4
		jmpto	SolidObject,JmpTo27_SolidObject
; ===========================================================================

loc_3B7A6:				
		move.w	ost_x_pos(a0),-(sp)
		move.w	#$F,d1
		move.w	#$18,d2
		move.w	#$18,d3
		move.w	(sp)+,d4
		jmpto	SolidObject,JmpTo27_SolidObject
; ===========================================================================

loc_3B7BC:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_3B7F6
		bclr	#3,$22(a0)
		beq.s	loc_3B7DE
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)
		bset	#1,$22(a1)

loc_3B7DE:				
		bclr	#4,$22(a0)
		beq.s	locret_3B7F6
		lea	($FFFFB040).w,a1
		bclr	#4,$22(a1)
		bset	#1,$22(a1)

locret_3B7F6:				
		rts	
; ===========================================================================

loc_3B7F8:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_3B816
		_move.b	#id_VerticalLaser,ost_id(a1)
		move.b	#$72,$28(a1)

loc_3B80A:
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)

locret_3B816:				
		rts	
; ===========================================================================
off_3B818:	dc.l Map_3B856	
		dc.w $A393
		dc.w $404
		dc.w $1000
off_3B822:	dc.w byte_3B830-off_3B822			; 0 
		dc.w byte_3B836-off_3B822			; 1
		dc.w byte_3B83A-off_3B822			; 2
		dc.w byte_3B840-off_3B822			; 3
		dc.w byte_3B846-off_3B822			; 4
		dc.w byte_3B84C-off_3B822			; 5
		dc.w byte_3B850-off_3B822			; 6
byte_3B830:	dc.b   3,  1,  2,$FD,  1,  0			; 0	
byte_3B836:	dc.b $3F,  2,$FD,  2				; 0 
byte_3B83A:	dc.b   3,  2,  1,  0,$FA,  0			; 0	
byte_3B840:	dc.b   1,  0,  1,  2,  3,$FF			; 0	
byte_3B846:	dc.b   3,  1,  0,$FD,  5,  0			; 0	
byte_3B84C:	dc.b $3F,  0,$FD,  6				; 0 
byte_3B850:	dc.b   3,  0,  1,  2,$FA,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3B856:				
		dc.w word_3B85E-Map_3B856			; 0
		dc.w word_3B870-Map_3B856			; 1
		dc.w word_3B882-Map_3B856			; 2
		dc.w word_3B894-Map_3B856			; 3
word_3B85E:	dc.w 2			
		dc.w $FC08,    0,    0,$FFE8			; 0
		dc.w $FC08, $800, $800,	   0			; 4
word_3B870:	dc.w 2			
		dc.w $EC06,    3,    1,$FFF0			; 0
		dc.w $FC06,$1803,$1801,	   0			; 4
word_3B882:	dc.w 2			
		dc.w $E802,    9,    4,$FFFC			; 0
		dc.w	 2,$1009,$1004,$FFFC			; 4
word_3B894:	dc.w 2			
		dc.w $EC06, $803, $801,	   0			; 0
		dc.w $FC06,$1003,$1001,$FFF0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B7 - WFZ giant vertical laser  (unused)
; ----------------------------------------------------------------------------

VerticalLaser:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3B8B4(pc,d0.w),d1
		jmp	off_3B8B4(pc,d1.w)
; ===========================================================================
off_3B8B4:
		dc.w loc_3B8B8-off_3B8B4			; 0 
		dc.w loc_3B8C4-off_3B8B4			; 1
; ===========================================================================

loc_3B8B8:				
		bsr.w	LoadSubtypeData
		move.b	#$20,$2A(a0)
		rts	
; ===========================================================================

loc_3B8C4:				
		subq.b	#1,$2A(a0)
		beq.w	JmpTo65_DeleteObject
		bchg	#0,$2B(a0)
		beq.w	locret_37A48
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3B8DA:	
	dc.l Map_3B8E4	
		dc.w $C39F
		dc.w $404
		dc.w $18A9

Map_3B8E4:				
		dc.w byte_3B8E6-Map_3B8E4

byte_3B8E6:	
		dc.b   0,$10,$90, $B,  0,  0,  0,  0,$FF,$E8,$90, $B,  8,  0,  8,  0 ; 0=		
		dc.b   0,  0,$B0, $B,  0,  0,  0,  0,$FF,$E8,$B0, $B,  8,  0,  8,  0 ; 16
		dc.b   0,  0,$D0, $B,  0,  0,  0,  0,$FF,$E8,$D0, $B,  8,  0,  8,  0 ; 32
		dc.b   0,  0,$F0, $B,  0,  0,  0,  0,$FF,$E8,$F0, $B,  8,  0,  8,  0 ; 48
		dc.b   0,  0,$10, $B,  0,  0,  0,  0,$FF,$E8,$10, $B,  8,  0,  8,  0 ; 64
		dc.b   0,  0,$30, $B,  0,  0,  0,  0,$FF,$E8,$30, $B,  8,  0,  8,  0 ; 80
		dc.b   0,  0,$50, $B,  0,  0,  0,  0,$FF,$E8,$50, $B,  8,  0,  8,  0 ; 96
		dc.b   0,  0,$70, $B,  0,  0,  0,  0,$FF,$E8,$70, $B,  8,  0,  8,  0 ; 112
		dc.b   0					;  
		dc.b   0					;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B8 - WFZ wall turret 
; ----------------------------------------------------------------------------

WallTurret:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3B976(pc,d0.w),d1
		jmp	off_3B976(pc,d1.w)
; ===========================================================================
off_3B976:
		dc.w loc_3B97C-off_3B976			; 0 
		dc.w loc_3B980-off_3B976			; 1
		dc.w loc_3B9AA-off_3B976			; 2
; ===========================================================================

loc_3B97C:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_3B980:				
		tst.b	ost_render(a0)
		bpl.s	loc_3B998
		bsr.w	GetClosestPlayer
		tst.w	d1
		beq.s	loc_3B998
		addi.w	#$60,d2
		cmpi.w	#$C0,d2	
		bcs.s	loc_3B99C

loc_3B998:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3B99C:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#2,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3B9AA:				
		bsr.w	GetClosestPlayer
		moveq	#0,d6
		addi.w	#$20,d2
		cmpi.w	#$40,d2
		bcs.s	loc_3B9C0
		move.w	d0,d6
		lsr.w	#1,d6
		addq.w	#1,d6

loc_3B9C0:				
		move.b	d6,$1A(a0)
		subq.w	#1,$2A(a0)
		bne.s	loc_3B9D4
		move.w	#$60,$2A(a0)
		bsr.w	loc_3B9D8				; could be optimized to bsr.s

loc_3B9D4:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3B9D8:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_3BA28
		_move.b	#id_Projectile,ost_id(a1)
		move.b	#3,$1A(a1)
		move.b	#-$72,$28(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		lea_	loc_37756,a2
		move.l	a2,$2A(a1)
		moveq	#0,d0
		move.b	$1A(a0),d0
		lsl.w	#2,d0
		lea	byte_3BA2A(pc,d0.w),a2
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,ost_x_pos(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,ost_y_pos(a1)
		move.b	(a2)+,ost_x_vel(a1)
		move.b	(a2)+,ost_y_vel(a1)

locret_3BA28:				
		rts	
; ===========================================================================
byte_3BA2A:	dc.b   0					; 0
		dc.b $18					; 1
		dc.b   0					; 2
		dc.b   1					; 3
		dc.b $EF					; 4
		dc.b $10					; 5
		dc.b $FF					; 6
		dc.b   1					; 7
		dc.b $11					; 8
		dc.b $10					; 9
		dc.b   1					; 10
		dc.b   1					; 11
off_3BA36:	dc.l Map_3BA46	
		dc.w $3AB
		dc.w $404
		dc.w $1000
off_3BA40:	dc.w byte_3BA42-off_3BA40 
byte_3BA42:	dc.b   2,  3,  4,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BA46:				
		dc.w word_3BA50-Map_3BA46			; 0
		dc.w word_3BA72-Map_3BA46			; 1
		dc.w word_3BA8C-Map_3BA46			; 2
		dc.w word_3BAA6-Map_3BA46			; 3
		dc.w word_3BAB0-Map_3BA46			; 4
word_3BA50:	dc.w 4			
		dc.w $F007,$E000,$E000,$FFF0			; 0
		dc.w $F007,$E008,$E004,	   0			; 4
		dc.w  $E00,$E010,$E008,$FFF8			; 8
		dc.w  $E00,$E011,$E008,	   0			; 12
word_3BA72:	dc.w 3			
		dc.w $F007,$E000,$E000,$FFF0			; 0
		dc.w $F007,$E008,$E004,	   0			; 4
		dc.w  $405,$E012,$E009,$FFEB			; 8
word_3BA8C:	dc.w 3			
		dc.w $F007,$E000,$E000,$FFF0			; 0
		dc.w $F007,$E008,$E004,	   0			; 4
		dc.w  $405,$E812,$E809,	   5			; 8
word_3BAA6:	dc.w 1			
		dc.w $FC00,$8016,$800B,$FFFC			; 0
word_3BAB0:	dc.w 1			
		dc.w $FC00,$8017,$800B,$FFFC			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object B9 - Horizontal Laser that shoots down the Tornado in WFZ
; ----------------------------------------------------------------------------

HorizontalLaser:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BAC8(pc,d0.w),d1
		jmp	off_3BAC8(pc,d1.w)
; ===========================================================================
off_3BAC8:
		dc.w loc_3BACE-off_3BAC8			; 0 
		dc.w loc_3BAD2-off_3BAC8			; 1
		dc.w loc_3BAF0-off_3BAC8			; 2
; ===========================================================================

loc_3BACE:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_3BAD2:				
		tst.b	ost_render(a0)
		bmi.s	loc_3BADC
		bra.w	loc_3BAF8
; ===========================================================================

loc_3BADC:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#-$1000,ost_x_vel(a0)
		moveq	#-$11,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		bra.w	loc_3BAF8
; ===========================================================================

loc_3BAF0:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bra.w	*+4

loc_3BAF8:				
		move.w	ost_x_pos(a0),d0
		move.w	(v_camera_x_pos).w,d1
		subi.w	#$40,d1
		cmp.w	d1,d0
		blt.w	JmpTo65_DeleteObject
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3BB0E:	dc.l Map_3BB18					; 0 
		dc.w $C3C3
		dc.w $401
		dc.w $6000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BB18:				
		dc.w word_3BB1A-Map_3BB18
word_3BB1A:	dc.w 6			
		dc.w $F801,    0,    0,$FFB8			; 0
		dc.w $F80D,    2,    1,$FFC0			; 4
		dc.w $F80D,    2,    1,$FFE0			; 8
		dc.w $F80D,    2,    1,	   0			; 12
		dc.w $F80D,    2,    1,	 $20			; 16
		dc.w $F801, $800, $800,	 $40			; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BA - Wheel from WFZ
; ----------------------------------------------------------------------------

WheelWingFortress:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BB5A(pc,d0.w),d1
		jmp	off_3BB5A(pc,d1.w)
; ===========================================================================
off_3BB5A:
		dc.w loc_3BB5E-off_3BB5A			; 0 
		dc.w loc_3BB62-off_3BB5A			; 1
; ===========================================================================

loc_3BB5E:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_3BB62:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3BB66:
		dc.l Map_3BB70	
		dc.w $C3EA
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BB70:				
		dc.w word_3BB72-Map_3BB70
word_3BB72:	dc.w 1			
		dc.w $F00F,    0,    0,$FFF0			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BB - Removed object (unknown, unused)
; ----------------------------------------------------------------------------

Unknown2:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BB8A(pc,d0.w),d1
		jmp	off_3BB8A(pc,d1.w)
; ===========================================================================
off_3BB8A:
		dc.w loc_3BB8E-off_3BB8A			; 0 
		dc.w loc_3BB92-off_3BB8A			; 1
; ===========================================================================

loc_3BB8E:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_3BB92:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3BB96:	dc.l Map_3BBA0	
		dc.w $23FA
		dc.w $404
		dc.w $C09
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BBA0:				
		dc.w word_3BBA2-Map_3BBA0
word_3BBA2:	dc.w 3			
		dc.w $C005,    0,    0,$FFF4			; 0
		dc.w $D003,    4,    2,$FFFC			; 4
		dc.w $F00B,    8,    4,$FFF4			; 8
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BC - Exhaust from Robotnik's getaway ship in WFZ
; ----------------------------------------------------------------------------

ShipExhaust:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BBCA(pc,d0.w),d1
		jmp	off_3BBCA(pc,d1.w)
; ===========================================================================
off_3BBCA:
		dc.w loc_3BBCE-off_3BBCA			; 0 
		dc.w loc_3BBDA-off_3BBCA			; 1
; ===========================================================================

loc_3BBCE:				
		bsr.w	LoadSubtypeData
		move.w	ost_x_pos(a0),$2C(a0)
		rts	
; ===========================================================================

loc_3BBDA:				
		move.w	$2C(a0),d0
		move.w	(v_camera_x_pos_offset).w,d1
		cmpi.w	#$380,d1
		bcc.w	JmpTo65_DeleteObject
		add.w	d1,d0
		move.w	d0,ost_x_pos(a0)
		bchg	#0,$2A(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3BBFE:	dc.l Map_3BC08	
		dc.w $4465
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BC08:				
		dc.w word_3BC0A-Map_3BC08
word_3BC0A:	dc.w 2			
		dc.w $F00D,    0,    0,$FFF0			; 0
		dc.w	$D,$1000,$1000,$FFF0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BD - WFZ ascending/descending metal platforms
; ----------------------------------------------------------------------------

ConveyerPlatforms:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BC2A(pc,d0.w),d1
		jmp	off_3BC2A(pc,d1.w)
; ===========================================================================
off_3BC2A:
		dc.w loc_3BC30-off_3BC2A			; 0 
		dc.w loc_3BC3C-off_3BC2A			; 1
		dc.w loc_3BC50-off_3BC2A			; 2
; ===========================================================================

loc_3BC30:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#1,$2A(a0)
		rts	
; ===========================================================================

loc_3BC3C:				
		subq.w	#1,$2A(a0)
		bne.s	loc_3BC4C
		move.w	#$40,$2A(a0)
		bsr.w	loc_3BCF8

loc_3BC4C:				
		jmpto	DespawnObject3,JmpTo8_DespawnObject3
; ===========================================================================

loc_3BC50:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3BC62(pc,d0.w),d1
		jsr	off_3BC62(pc,d1.w)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3BC62:
		dc.w loc_3BC6C-off_3BC62			; 0 
		dc.w loc_3BCAC-off_3BC62			; 1
		dc.w loc_3BCB6-off_3BC62			; 2
		dc.w loc_3BCCC-off_3BC62			; 3
		dc.w loc_3BCD6-off_3BC62			; 4
; ===========================================================================

loc_3BC6C:				
		bsr.w	LoadSubtypeData
		move.b	#2,$1A(a0)
		subq.b	#2,ost_primary_routine(a0)
		addq.b	#2,$25(a0)
		move.w	#$C7,$2A(a0)
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3BC92
		move.w	#$1C7,$2A(a0)

loc_3BC92:				
		moveq	#0,d0
		move.b	$28(a0),d0
		subi.b	#$7E,d0
		move.b	d0,$28(a0)
		move.w	word_3BCA8(pc,d0.w),ost_y_vel(a0)
		rts	
; ===========================================================================
word_3BCA8:	dc.w $FF00					; 0
		dc.w  $100					; 1
; ===========================================================================

loc_3BCAC:				
		lea	(off_3BD2E).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_3BCB6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3BCC0
		bra.w	loc_3BCDE
; ===========================================================================

loc_3BCC0:				
		addq.b	#2,$25(a0)
		move.b	#1,$1C(a0)
		rts	
; ===========================================================================

loc_3BCCC:				
		lea	(off_3BD2E).l,a1
		jmpto	AnimateSprite,JmpTo25_AnimateSprite
; ===========================================================================

loc_3BCD6:				
		bsr.w	loc_3B7BC
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3BCDE:				
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		move.w	#$23,d1
		move.w	#4,d2
		move.w	#5,d3
		move.w	(sp)+,d4
		jmpto	DetectPlatform,JmpTo9_DetectPlatform
; ===========================================================================

loc_3BCF8:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	locret_3BD22
		_move.b	#id_ConveyerPlatforms,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.b	#4,$24(a1)
		move.b	$28(a0),$28(a1)
		move.b	ost_render(a0),ost_render(a1)

locret_3BD22:				
		rts	
; ===========================================================================
off_3BD24:	
		dc.l Map_3BD3E	
		dc.w $E40E
		dc.w $404
		dc.w $1800
off_3BD2E:	
		dc.w byte_3BD32-off_3BD2E			; 0 
		dc.w byte_3BD38-off_3BD2E			; 1
byte_3BD32:	dc.b   3,  2,  1,  0,$FA,  0			; 0	
byte_3BD38:	dc.b   1,  0,  1,  2,$FA,  0			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BD3E:				
		dc.w word_3BD44-Map_3BD3E			; 0
		dc.w word_3BD56-Map_3BD3E			; 1
		dc.w word_3BD68-Map_3BD3E			; 2
word_3BD44:	dc.w 2			
		dc.w $FC08,    0,    0,$FFE8			; 0
		dc.w $FC08,    3,    1,	   0			; 4
word_3BD56:	dc.w 2			
		dc.w $FC08,    6,    3,$FFE8			; 0
		dc.w $FC08, $806, $803,	   0			; 4
word_3BD68:	dc.w 2			
		dc.w $FC08,    9,    4,$FFE8			; 0
		dc.w $FC08, $809, $804,	   0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BE - WFZ lateral cannon (temporary platform that pops in/out)
; ----------------------------------------------------------------------------

LateralCannon:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BD88(pc,d0.w),d1
		jmp	off_3BD88(pc,d1.w)
; ===========================================================================
off_3BD88:
		dc.w loc_3BD94-off_3BD88			; 0 
		dc.w loc_3BDA2-off_3BD88			; 1
		dc.w loc_3BDC6-off_3BD88			; 2
		dc.w loc_3BDD4-off_3BD88			; 3
		dc.w loc_3BDC6-off_3BD88			; 4
		dc.w loc_3BDF4-off_3BD88			; 5
; ===========================================================================

loc_3BD94:				
		moveq	#0,d0
		move.b	#-$7E,d0
		bsr.w	LoadSubtypeData_Part2
		bra.w	loc_3B77E
; ===========================================================================

loc_3BDA2:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#-$10,d0
		cmp.b	$28(a0),d0
		beq.s	loc_3BDB4
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3BDB4:				
		addq.b	#2,ost_primary_routine(a0)
		clr.b	$1C(a0)
		move.w	#$A0,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3BDC6:				
		lea	(off_3BE36).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3BDD4:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3BDE2
		bsr.w	loc_3BE04
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3BDE2:				
		addq.b	#2,ost_primary_routine(a0)
		move.b	#1,$1C(a0)
		bsr.w	loc_3B7BC
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3BDF4:				
		move.b	#2,ost_primary_routine(a0)
		move.w	#$40,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3BE04:				
		move.b	$1A(a0),d0
		cmpi.b	#3,d0
		beq.s	loc_3BE16
		cmpi.b	#4,d0
		bne.w	loc_3B7BC

loc_3BE16:				
		move.w	ost_x_pos(a0),-(sp)
		move.w	#$23,d1
		move.w	#$18,d2
		move.w	#$19,d3
		move.w	(sp)+,d4
		jmpto	DetectPlatform,JmpTo9_DetectPlatform
; ===========================================================================
off_3BE2C:
		dc.l Map_3BE46	
		dc.w $E41A
		dc.w $404
		dc.w $1800
off_3BE36:	dc.w byte_3BE3A-off_3BE36			; 0 
		dc.w byte_3BE40-off_3BE36			; 1
byte_3BE3A:	dc.b   5,  0,  1,  2,  3,$FC			; 0	
byte_3BE40:	dc.b   5,  3,  2,  1,  0,$FC			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BE46:				
		dc.w word_3BE50-Map_3BE46			; 0
		dc.w word_3BE62-Map_3BE46			; 1
		dc.w word_3BE74-Map_3BE46			; 2
		dc.w word_3BE86-Map_3BE46			; 3
		dc.w word_3BE98-Map_3BE46			; 4
word_3BE50:	dc.w 2			
		dc.w $E809,    0,    0,$FFE8			; 0
		dc.w $E809,    6,    3,	   0			; 4
word_3BE62:	dc.w 2			
		dc.w $E809,   $C,    6,$FFE8			; 0
		dc.w $E809,  $12,    9,	   0			; 4
word_3BE74:	dc.w 2			
		dc.w $E809,  $18,   $C,$FFE8			; 0
		dc.w $E809, $818, $80C,	   0			; 4
word_3BE86:	dc.w 2			
		dc.w $E80E,  $1E,   $F,$FFE0			; 0
		dc.w $E80E, $81E, $80F,	   0			; 4
word_3BE98:	dc.w 2			
		dc.w $E80E,  $2A,  $15,$FFE0			; 0
		dc.w $E80E, $82A, $815,	   0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object BF - Stick (rotaty-stick badnik in WFZ)
; ----------------------------------------------------------------------------

Stick:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BEB8(pc,d0.w),d1
		jmp	off_3BEB8(pc,d1.w)
; ===========================================================================
off_3BEB8:
		dc.w loc_3BEBC-off_3BEB8			; 0 
		dc.w loc_3BEC0-off_3BEB8			; 1
; ===========================================================================

loc_3BEBC:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_3BEC0:				
		lea	(off_3BED8).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3BECE:
		dc.l Map_3BEE0	
		dc.w $E450
		dc.w $404
		dc.w $404
		
off_3BED8:	dc.w byte_3BEDA-off_3BED8 
byte_3BEDA:	dc.b   1,  0,  1,  2,$FF,  0			; 0	
Map_3BEE0:				
		dc.w word_3BEE6-Map_3BEE0			; 0
		dc.w word_3BEF0-Map_3BEE0			; 1
		dc.w word_3BEFA-Map_3BEE0			; 2
word_3BEE6:	dc.w 1			
		dc.w $F003,    0,    0,$FFFC			; 0
word_3BEF0:	dc.w 1			
		dc.w $F003,    4,    2,$FFFC			; 0
word_3BEFA:	dc.w 1			
		dc.w $F003,    8,    4,$FFFC			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C0 - WFZ catapult
; ----------------------------------------------------------------------------

Catapult:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3BF12(pc,d0.w),d1
		jmp	off_3BF12(pc,d1.w)
; ===========================================================================
off_3BF12:
		dc.w loc_3BF16-off_3BF12			; 0 
		dc.w loc_3BF3E-off_3BF12			; 1
; ===========================================================================

loc_3BF16:				
		move.w	#$86,d0	
		bsr.w	LoadSubtypeData_Part2
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		btst	#0,$22(a0)
		bne.s	loc_3BF30
		neg.w	d0

loc_3BF30:				
		move.w	ost_x_pos(a0),d1
		move.w	d1,$34(a0)
		add.w	d1,d0
		move.w	d0,$32(a0)

loc_3BF3E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3BF60(pc,d0.w),d1
		jsr	off_3BF60(pc,d1.w)
		move.w	#$10,d1
		move.w	#$11,d3
		move.w	ost_x_pos(a0),d4
		jsrto	DetectPlatform,JmpTo9_DetectPlatform
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3BF60:
		dc.w loc_3BF66-off_3BF60			; 0 
		dc.w loc_3BFD8-off_3BF60			; 1
		dc.w loc_3C062-off_3BF60			; 2
; ===========================================================================

loc_3BF66:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_3BFB2
		addq.b	#2,$25(a0)
		move.w	#$C00,ost_x_vel(a0)
		move.w	#$80,$30(a0)
		btst	#0,$22(a0)
		bne.s	loc_3BF90
		neg.w	ost_x_vel(a0)
		neg.w	$30(a0)

loc_3BF90:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		move.b	$22(a0),d0
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_3BFA6
		lea	($FFFFB000).w,a1
		bsr.s	loc_3BFB4

loc_3BFA6:				
		andi.b	#$10,d0
		beq.s	locret_3BFB2
		lea	($FFFFB040).w,a1
		bsr.s	loc_3BFB4

locret_3BFB2:				
		rts	
; ===========================================================================

loc_3BFB4:				
		clr.w	ost_inertia(a1)
		clr.w	ost_x_vel(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		bclr	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	locret_3BFD6
		bset	#0,$22(a1)

locret_3BFD6:				
		rts	
; ===========================================================================

loc_3BFD8:				
		move.w	$30(a0),d0
		add.w	d0,ost_x_vel(a0)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		move.w	$32(a0),d0
		sub.w	ost_x_pos(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_3BFF6
		neg.w	d0

loc_3BFF6:				
		tst.w	d0
		bpl.s	loc_3C034
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_3C01E

loc_3C004:
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_3C012
		lea	($FFFFB000).w,a1
		bsr.s	loc_3BFB4

loc_3C012:				
		andi.b	#$10,d0
		beq.s	locret_3C01E
		lea	($FFFFB040).w,a1
		bsr.s	loc_3BFB4

locret_3C01E:				
		rts	
; ===========================================================================

loc_3C020:				
		move.w	ost_x_vel(a0),ost_x_vel(a1)
		move.w	#-$400,ost_y_vel(a1)
		bset	#1,$22(a1)
		rts	
; ===========================================================================

loc_3C034:				
		addq.b	#2,$25(a0)
		move.w	$32(a0),ost_x_pos(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3C062
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_3C056
		lea	($FFFFB000).w,a1
		bsr.s	loc_3C020

loc_3C056:				
		andi.b	#$10,d0
		beq.s	loc_3C062
		lea	($FFFFB040).w,a1
		bsr.s	loc_3C020

loc_3C062:				

		move.w	ost_x_pos(a0),d0
		moveq	#4,d1
		tst.w	$30(a0)
		spl	d2
		bmi.s	loc_3C072
		neg.w	d1

loc_3C072:				
		add.w	d1,d0
		cmp.w	$34(a0),d0
		bcc.s	loc_3C07C
		not.b	d2

loc_3C07C:				
		tst.b	d2
		bne.s	loc_3C088
		clr.b	$25(a0)
		move.w	$34(a0),d0

loc_3C088:				
		move.w	d0,ost_x_pos(a0)
		rts	
; ===========================================================================
off_3C08E:
		dc.l Map_3C098	
		dc.w $245C
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3C098:				
		dc.w word_3C09A-Map_3C098
		
word_3C09A:	
		dc.w 2			
		dc.w $E908,    0,    0,$FFF0			; 0
		dc.w $E101,    3,    1,	   8			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C1 - WFZ breakable plating
; (and what Sonic hangs onto on the back of Robotnik's getaway ship)
; ----------------------------------------------------------------------------

BreakablePlating:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3C0BA(pc,d0.w),d1
		jmp	off_3C0BA(pc,d1.w)
; ===========================================================================
off_3C0BA:
		dc.w loc_3C0C0-off_3C0BA			; 0 
		dc.w loc_3C0D6-off_3C0BA			; 1
		dc.w loc_3C1AA-off_3C0BA			; 2
; ===========================================================================

loc_3C0C0:				
		move.w	#$88,d0	
		bsr.w	LoadSubtypeData_Part2
		moveq	#0,d0
		move.b	$28(a0),d0
		mulu.w	#$3C,d0
		move.w	d0,$30(a0)

loc_3C0D6:				
		tst.b	$32(a0)
		beq.s	loc_3C140
		tst.w	$30(a0)
		beq.s	loc_3C0E8
		subq.w	#1,$30(a0)
		beq.s	loc_3C12E

loc_3C0E8:				
		lea	($FFFFB000).w,a1
		move.w	ost_y_pos(a0),d0
		subi.w	#$18,d0
		btst	#0,(v_joypad_hold_actual).w
		beq.s	loc_3C10A
		subq.w	#1,ost_y_pos(a1)
		cmp.w	ost_y_pos(a1),d0
		bcs.s	loc_3C10A
		move.w	d0,ost_y_pos(a1)

loc_3C10A:				
		addi.w	#$30,d0
		btst	#1,(v_joypad_hold_actual).w
		beq.s	loc_3C124
		addq.w	#1,ost_y_pos(a1)
		cmp.w	ost_y_pos(a1),d0
		bcc.s	loc_3C124
		move.w	d0,ost_y_pos(a1)

loc_3C124:				
		move.b	(v_joypad_press).w,d0
		andi.w	#$70,d0
		beq.s	loc_3C196

loc_3C12E:				
		clr.b	$20(a0)
		clr.b	($FFFFB02A).w
		clr.b	(f_wind_tunnel_disable).w
		clr.b	$32(a0)
		bra.s	loc_3C19A
; ===========================================================================

loc_3C140:				
		tst.b	$21(a0)
		beq.s	loc_3C196
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a0),d0
		subi.w	#$14,d0
		cmp.w	ost_x_pos(a1),d0
		bcc.s	loc_3C196
		clr.b	$21(a0)
		cmpi.b	#4,$24(a1)
		bcc.s	loc_3C196
		clr.w	ost_x_vel(a1)
		clr.w	ost_y_vel(a1)
		move.w	ost_x_pos(a0),d0
		subi.w	#$14,d0
		move.w	d0,ost_x_pos(a1)
		bset	#0,$22(a1)
		move.b	#$11,$1C(a1)
		move.b	#1,($FFFFB02A).w
		move.b	#1,(f_wind_tunnel_disable).w
		move.b	#1,$32(a0)

loc_3C196:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3C19A:				
		lea	(byte_3C1E4).l,a4
		lea	(byte_3C1E0).l,a2
		bsr.w	loc_3C1F4

loc_3C1AA:				
		tst.b	$3F(a0)
		beq.s	loc_3C1B6
		subq.b	#1,$3F(a0)
		bra.s	loc_3C1CA
; ===========================================================================

loc_3C1B6:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		addi_.w	#8,ost_y_vel(a0)
		lea	(off_3C1D6).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite

loc_3C1CA:				
		tst.b	ost_render(a0)
		bpl.w	JmpTo65_DeleteObject
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3C1D6:
		dc.w byte_3C1D8-off_3C1D6 

byte_3C1D8:	
		dc.b   3,  2,  3,  4,  5,  1,$FF,  0		; 0	

byte_3C1E0:	
		dc.b   0					; 0 
		dc.b   4					; 1
		dc.b $18					; 2
		dc.b $20	
						; 3
byte_3C1E4:	
		dc.b $FF,$F0					; 0 
		dc.b $FF,$F0					; 2
		dc.b $FF,$F0					; 4
		dc.b   0,$10					; 6
		dc.b $FF,$D0					; 8
		dc.b $FF,$F0					; 10
		dc.b $FF,$D0					; 12
		dc.b   0,$10					; 14
; ===========================================================================

loc_3C1F4:				
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		move.b	$18(a0),d4
		subq.b	#1,d4
		moveq	#3,d1
		movea.l	a0,a1
		bra.s	loc_3C20E
; ===========================================================================

loc_3C208:				
		jsrto	FindNextFreeObj,JmpTo25_FindNextFreeObj
		bne.s	loc_3C26C

loc_3C20E:				
		move.b	#4,$24(a1)
		_move.b	ost_id(a0),ost_id(a1)
		move.l	ost_mappings(a0),ost_mappings(a1)
		move.w	ost_tile(a0),ost_tile(a1)
		move.b	#render_rel|render_onscreen,ost_render(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	(a4)+,d0
		add.w	d2,d0
		move.w	d0,ost_x_pos(a1)
		move.w	(a4)+,d0
		add.w	d3,d0
		move.w	d0,ost_y_pos(a1)
		move.b	d4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$1A(a1)
		move.w	#-$400,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		move.b	(a2)+,$3F(a1)
		dbf	d1,loc_3C208

loc_3C26C:				
		move.w	#$CB,d0	
		jmp	PlaySound
; ===========================================================================
off_3C276:	
		dc.l Map_3C280	
		dc.w $E48C
		dc.w $404
		dc.w $40E1
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3C280:				
		dc.w word_3C28C-Map_3C280			; 0
		dc.w word_3C2CE-Map_3C280			; 1
		dc.w word_3C2E0-Map_3C280			; 2
		dc.w word_3C2F2-Map_3C280			; 3
		dc.w word_3C304-Map_3C280			; 4
		dc.w word_3C316-Map_3C280			; 5
word_3C28C:	dc.w 8			
		dc.w $E007,    0,    0,$FFE0			; 0
		dc.w $E007, $800, $800,$FFF0			; 4
		dc.w	 7,    0,    0,$FFE0			; 8
		dc.w	 7, $800, $800,$FFF0			; 12
		dc.w $E007,    0,    0,$FFC0			; 16
		dc.w $E007, $800, $800,$FFD0			; 20
		dc.w	 7,    0,    0,$FFC0			; 24
		dc.w	 7, $800, $800,$FFD0			; 28
word_3C2CE:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0			; 0
		dc.w $F007, $800, $800,	   0			; 4
word_3C2E0:	dc.w 2			
		dc.w $F005,    8,    4,$FFF8			; 0
		dc.w	 5,$1008,$1004,$FFF8			; 4
word_3C2F2:	dc.w 2			
		dc.w $F001,   $C,    6,$FFFC			; 0
		dc.w	 1,$100C,$1006,$FFFC			; 4
word_3C304:	dc.w 2			
		dc.w $F001, $80C, $806,$FFFC			; 0
		dc.w	 1,$180C,$1806,$FFFC			; 4
word_3C316:	dc.w 2			
		dc.w $F005, $808, $804,$FFF8			; 0
		dc.w	 5,$1808,$1804,$FFF8			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C2 - Rivet (the thing player destroys to access the boos chamber in WFZ)
; ----------------------------------------------------------------------------

Rivet:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3C336(pc,d0.w),d1
		jmp	off_3C336(pc,d1.w)
; ===========================================================================
off_3C336:
		dc.w loc_3C33A-off_3C336			; 0 
		dc.w loc_3C33E-off_3C336			; 1
; ===========================================================================

loc_3C33A:				
		bra.w	LoadSubtypeData
; ===========================================================================

loc_3C33E:				
		move.b	($FFFFB01C).w,$30(a0)
		move.w	ost_x_pos(a0),-(sp)
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		jsrto	SolidObject,JmpTo27_SolidObject
		btst	#3,$22(a0)
		bne.s	loc_3C366
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3C366:				
		cmpi.b	#2,$30(a0)
		bne.s	loc_3C3B4
		move.w	#$2880,(v_boundary_left_next).w
		bclr	#3,$22(a0)
		_move.b	#id_ExplosionItem,ost_id(a0)
		move.b	#2,ost_primary_routine(a0)
		bset	#1,(v_ost_player1+ost_primary_status).w
		bclr	#3,(v_ost_player1+ost_primary_status).w
		lea	(v_level_layout+(sizeof_levelrow*8)+80).w,a1 ; modify level layout (Row 8, Column 80)
		move.l	#$8A707172,(a1)+
		move.w	#$7374,(a1)+
		lea	(v_level_layout+(sizeof_levelrow*9)+80).w,a1 ; modify level layout (Row 9, Column 80)
		move.l	#$6E787978,(a1)+
		move.w	#$787A,(a1)+
		move.b	#1,(f_screen_redraw).w

loc_3C3B4:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3C3B8:	
		dc.l Map_3C3C2	
		dc.w $A461
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3C3C2:				
		dc.w word_3C3C4-Map_3C3C2
word_3C3C4:	dc.w 2			
		dc.w $F805,    0,    0,$FFF0			; 0
		dc.w $F805, $800, $800,	   0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C3,C4 - Tornado's smoke at start of WFZ
; ----------------------------------------------------------------------------

TornadoSmoke:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3C3E4(pc,d0.w),d1
		jmp	off_3C3E4(pc,d1.w)
; ===========================================================================
off_3C3E4:
		dc.w loc_3C3E8-off_3C3E4			; 0 
		dc.w loc_3C416-off_3C3E4			; 1
; ===========================================================================

loc_3C3E8:				
		bsr.w	LoadSubtypeData
		move.b	#7,$1E(a0)
		jsrto	RandomNumber,JmpTo6_RandomNumber
		move.w	(v_random).w,d0
		andi.w	#$1C,d0
		sub.w	d0,ost_x_pos(a0)
		addi.w	#$10,ost_y_pos(a0)
		move.w	#-$100,ost_y_vel(a0)
		move.w	#-$100,ost_x_vel(a0)
		rts	
; ===========================================================================

loc_3C416:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		subq.b	#1,$1E(a0)
		bpl.s	loc_3C434
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		beq.w	JmpTo65_DeleteObject

loc_3C434:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3C438:
		dc.l Map_21120	
		dc.w $5A4
		dc.w $405
		dc.w $C00
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C5 - WFZ boss
; the laser case is the parent object
; ----------------------------------------------------------------------------

BossWingFortress:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3C450(pc,d0.w),d1
		jmp	off_3C450(pc,d1.w)
; ===========================================================================
off_3C450:	dc.w loc_3C464-off_3C450			; 0 
		dc.w loc_3C476-off_3C450			; 1
		dc.w loc_3C748-off_3C450			; 2
		dc.w loc_3C7EE-off_3C450			; 3
		dc.w loc_3C8C8-off_3C450			; 4
		dc.w loc_3C9AA-off_3C450			; 5
		dc.w loc_3C9EA-off_3C450			; 6
		dc.w loc_3CA3C-off_3C450			; 7
		dc.w loc_3CB3E-off_3C450			; 8
		dc.w loc_3CBBE-off_3C450			; 9
; ===========================================================================

loc_3C464:				
		bsr.w	LoadSubtypeData
		move.b	$28(a0),d0
		subi.b	#-$70,d0
		move.b	d0,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_3C476:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C488(pc,d0.w),d1
		jsr	off_3C488(pc,d1.w)
		bra.w	loc_3CBEC
; ===========================================================================
off_3C488:
		dc.w loc_3C4A8-off_3C488			; 0 
		dc.w loc_3C4DC-off_3C488			; 1
		dc.w loc_3C552-off_3C488			; 2
		dc.w loc_3C570-off_3C488			; 3
		dc.w loc_3C58A-off_3C488			; 4
		dc.w loc_3C5B0-off_3C488			; 5
		dc.w loc_3C5E8-off_3C488			; 6
		dc.w loc_3C5F6-off_3C488			; 7
		dc.w loc_3C60E-off_3C488			; 8
		dc.w loc_3C640-off_3C488			; 9
		dc.w loc_3C65C-off_3C488			; 10
		dc.w loc_3C68C-off_3C488			; 11
		dc.w loc_3C6E4-off_3C488			; 12
		dc.w loc_3C5E8-off_3C488			; 13
		dc.w loc_3C704-off_3C488			; 14
		dc.w loc_3C712-off_3C488			; 15
; ===========================================================================

loc_3C4A8:				
		addq.b	#2,$25(a0)
		move.b	#0,$20(a0)
		move.b	#8,$21(a0)
		move.w	#$442,d0
		move.w	d0,(v_boundary_bottom).w
		move.w	d0,(v_boundary_bottom_next).w
		move.w	ost_x_pos(a0),d0
		subi.w	#$60,d0
		move.w	d0,$34(a0)
		addi.w	#$C0,d0	
		move.w	d0,$36(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C4DC:				
		bsr.w	GetClosestPlayer
		addi.w	#$20,d2
		cmpi.w	#$40,d2
		bcs.s	loc_3C4EE
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C4EE:				
		addq.b	#2,$25(a0)
		move.w	#$40,ost_y_vel(a0)
		lea	(byte_3CC60).l,a2
		bsr.w	LoadChild
		subi.w	#$88,ost_x_pos(a1)
		addi.w	#$60,ost_y_pos(a1)
		lea	(byte_3CC60).l,a2
		bsr.w	LoadChild
		addi.w	#$88,ost_x_pos(a1)
		addi.w	#$60,ost_y_pos(a1)
		lea	(byte_3CC6C).l,a2
		bsr.w	LoadChild
		lea	(byte_3CC70).l,a2
		bsr.w	LoadChild
		lea	(byte_3CC78).l,a2
		bsr.w	LoadChild
		move.w	#$5A,$2A(a0)
		moveq	#-7,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C552:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C55C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C55C:				
		addq.b	#2,$25(a0)
		move.w	#$60,$2A(a0)
		moveq	#-$6D,d0
		jsrto	PlayMusic,JmpTo5_PlayMusic
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C570:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C57E
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C57E:				
		addq.b	#2,$25(a0)
		clr.w	ost_y_vel(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C58A:				
					
		addq.b	#2,$25(a0)
		bsr.w	GetClosestPlayer
		move.w	#$100,d1
		tst.w	d0
		bne.s	loc_3C59C
		neg.w	d1

loc_3C59C:				
		move.w	d1,ost_x_vel(a0)
		bset	#2,$22(a0)
		move.w	#$70,$2A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5B0:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C5DC
		move.w	ost_x_pos(a0),d0
		tst.w	ost_x_vel(a0)
		bmi.s	loc_3C5CA
		cmp.w	$36(a0),d0
		bcc.s	loc_3C5D0
		bra.w	loc_3C5D4
; ===========================================================================

loc_3C5CA:				
		cmp.w	$34(a0),d0
		bcc.s	loc_3C5D4

loc_3C5D0:				
		neg.w	ost_x_vel(a0)

loc_3C5D4:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5DC:				
		addq.b	#2,$25(a0)
		clr.b	$1C(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5E8:				
		lea	(off_3CCB2).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C5F6:				
		addq.b	#2,$25(a0)
		move.w	#$E,$2A(a0)
		movea.w	$3C(a0),a1
		move.b	#4,$25(a1)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C60E:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C620
		movea.w	$3C(a0),a1
		addq.w	#1,ost_y_pos(a1)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C620:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0)
		bset	#4,$22(a0)
		bset	#6,$22(a0)
		move.b	#6,$20(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C640:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C64A
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C64A:				
		addq.b	#2,$25(a0)
		lea	(byte_3CC74).l,a2
		bsr.w	LoadChild
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C65C:				
		movea.w	$3E(a0),a1
		btst	#2,$22(a1)
		bne.s	loc_3C66C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C66C:				
		addq.b	#2,$25(a0)
		move.w	#$80,$2A(a0)
		bsr.w	GetClosestPlayer
		move.w	#$80,d1	
		tst.w	d0
		bne.s	loc_3C684
		neg.w	d1

loc_3C684:				
		move.w	d1,ost_x_vel(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C68C:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C6B8
		move.w	ost_x_pos(a0),d0
		tst.w	ost_x_vel(a0)
		bmi.s	loc_3C6A6
		cmp.w	$36(a0),d0
		bcc.s	loc_3C6AC
		bra.w	loc_3C6B0
; ===========================================================================

loc_3C6A6:				
		cmp.w	$34(a0),d0
		bcc.s	loc_3C6B0

loc_3C6AC:				
		clr.w	ost_x_vel(a0)

loc_3C6B0:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C6B8:				
		addq.b	#2,$25(a0)
		move.w	#$E,$2A(a0)
		bclr	#3,$22(a0)
		bclr	#4,$22(a0)
		bclr	#6,$22(a0)
		clr.b	$20(a0)
		movea.w	$3E(a0),a1
		jsrto	DeleteChild,JmpTo6_DeleteChild
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C6E4:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C6F6
		movea.w	$3C(a0),a1
		subq.w	#1,ost_y_pos(a1)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C6F6:				
		addq.b	#2,$25(a0)
		move.b	#1,$1C(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C704:				
		move.b	#8,$25(a0)
		bsr.w	loc_3C58A
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C712:				
		clr.b	$20(a0)
		st.b	$21(a0)
		bclr	#6,$22(a0)
		subq.w	#1,$30(a0)
		bmi.s	loc_3C72E
		jsrto	BossExplode,JmpTo_BossExplode
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C72E:				
		moveq	#-$71,d0
		jsrto	PlayMusic,JmpTo5_PlayMusic
		move.w	#$720,d0
		move.w	d0,(v_boundary_bottom).w
		move.w	d0,(v_boundary_bottom_next).w
		bsr.w	JmpTo65_DeleteObject
		addq.w	#4,sp
		rts	
; ===========================================================================

loc_3C748:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C772(pc,d0.w),d1
		jsr	off_3C772(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		move.w	ost_x_pos(a0),-(sp)
		move.w	#$13,d1
		move.w	#$40,d2
		move.w	#$80,d3	
		move.w	(sp)+,d4
		jmpto	SolidObject,JmpTo27_SolidObject
; ===========================================================================
off_3C772:
		dc.w loc_3C778-off_3C772			; 0 
		dc.w loc_3C786-off_3C772			; 1
		dc.w loc_3C7AE-off_3C772			; 2
; ===========================================================================

loc_3C778:				
		addq.b	#2,$25(a0)
		move.b	#$C,$1A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C786:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.s	loc_3C7A0
		bchg	#0,$2F(a0)
		bne.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C7A0:				
		addq.b	#2,$25(a0)
		move.b	#4,$30(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C7AE:				
		subq.b	#1,$1E(a0)
		bpl.w	locret_37A48
		move.b	$1E(a0),d0
		move.b	$1B(a0),d1
		addq.b	#2,d0
		bpl.s	loc_3C7E4
		move.b	d1,$1E(a0)
		subq.b	#1,$30(a0)
		bpl.s	loc_3C7E4
		move.b	#$10,$30(a0)
		addq.b	#1,d1
		cmpi.b	#5,d1
		bcc.w	JmpTo65_DeleteObject
		move.b	d1,$1B(a0)
		move.b	d1,$1E(a0)

loc_3C7E4:				
		bclr	#0,$2F(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C7EE:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C7FC(pc,d0.w),d1
		jmp	off_3C7FC(pc,d1.w)
; ===========================================================================
off_3C7FC:
		dc.w loc_3C806-off_3C7FC			; 0 
		dc.w loc_3C818-off_3C7FC			; 1
		dc.w loc_3C83C-off_3C7FC			; 2
		dc.w loc_3C85C-off_3C7FC			; 3
		dc.w loc_3C8B4-off_3C7FC			; 4
; ===========================================================================

loc_3C806:				
		addq.b	#2,$25(a0)
		move.b	#5,$1A(a0)
		addq.w	#8,ost_y_pos(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C818:				
		movea.w	$2C(a0),a1
		btst	#2,$22(a1)
		bne.s	loc_3C828
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C828:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0)
		move.w	#$40,ost_y_vel(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C83C:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C84A
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C84A:				
		addq.b	#2,$25(a0)
		clr.w	ost_y_vel(a0)
		move.w	#$10,$2A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C85C:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.s	loc_3C8A6
		subq.w	#1,$2A(a0)
		bne.s	loc_3C8A2
		move.w	#$80,$2A(a0)
		moveq	#0,d0
		move.b	$2E(a0),d0
		addq.b	#1,d0
		cmpi.b	#3,d0
		bcs.s	loc_3C884
		moveq	#0,d0

loc_3C884:				
		move.b	d0,$2E(a0)
		tst.b	$30(a0,d0.w)
		bne.s	loc_3C8A2
		st.b	$30(a0,d0.w)
		lea	(byte_3CC64).l,a2
		bsr.w	LoadChild
		move.b	$2E(a0),$2E(a1)

loc_3C8A2:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C8A6:				
		addq.b	#2,$25(a0)
		bset	#5,$22(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C8B4:				
		movea.w	$2C(a0),a1
		cmpi.b	#id_BossWingFortress,ost_id(a1)
		bne.w	JmpTo65_DeleteObject
		jsrto	BossExplode,JmpTo_BossExplode
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3C8C8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C8EA(pc,d0.w),d1
		jsr	off_3C8EA(pc,d1.w)
		lea	(off_3CCB2).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		tst.b	(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3C8EA:	dc.w loc_3C8F0-off_3C8EA			; 0 
		dc.w loc_3C916-off_3C8EA			; 1
		dc.w loc_3C93E-off_3C8EA			; 2
; ===========================================================================

loc_3C8F0:				
		addq.b	#2,$25(a0)
		move.b	#3,$1C(a0)
		move.b	#7,$1A(a0)
		move.w	#$100,ost_y_vel(a0)
		move.w	#$60,$2A(a0)
		lea	(byte_3CC68).l,a2
		bra.w	LoadChild
; ===========================================================================

loc_3C916:				
		bsr.w	loc_3C982
		subq.w	#1,$2A(a0)
		beq.s	loc_3C924
		bra.w	loc_3C968
; ===========================================================================

loc_3C924:				
		addq.b	#2,$25(a0)
		move.w	#$60,$2A(a0)
		move.w	#-$100,ost_x_vel(a0)
		move.w	ost_y_pos(a0),$34(a0)
		bra.w	loc_3C968
; ===========================================================================

loc_3C93E:				
		bsr.w	loc_3C982
		subq.w	#1,$2A(a0)
		bne.s	loc_3C952
		move.w	#$C0,$2A(a0)
		neg.w	ost_x_vel(a0)

loc_3C952:				
		moveq	#4,d0
		move.w	ost_y_pos(a0),d1
		cmp.w	$34(a0),d1
		bcs.s	loc_3C960
		neg.w	d0

loc_3C960:				
		add.w	d0,ost_y_vel(a0)
		bra.w	*+4

loc_3C968:				
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		move.w	#$10,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	(sp)+,d4
		jmpto	DetectPlatform,JmpTo9_DetectPlatform
; ===========================================================================

loc_3C982:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	loc_3C992
		rts	
; ===========================================================================

loc_3C992:				
		bsr.w	loc_3B7BC
		move.b	#id_BossExplosion,ost_id(a0)
		clr.b	ost_primary_routine(a0)
		movea.w	$3C(a0),a1
		jsrto	DeleteChild,JmpTo6_DeleteChild
		addq.w	#4,sp
		rts	
; ===========================================================================

loc_3C9AA:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C9B8(pc,d0.w),d1
		jmp	off_3C9B8(pc,d1.w)
; ===========================================================================
off_3C9B8:	dc.w loc_3C9BC-off_3C9B8			; 0 
		dc.w loc_3C9C8-off_3C9B8			; 1
; ===========================================================================

loc_3C9BC:				
		addq.b	#2,$25(a0)
		move.b	#-$68,$20(a0)
		rts	
; ===========================================================================

loc_3C9C8:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	JmpTo65_DeleteObject
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),d0
		addi.w	#$C,d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_3C9EA:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	JmpTo65_DeleteObject
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CA06(pc,d0.w),d1
		jmp	off_3CA06(pc,d1.w)
; ===========================================================================
off_3CA06:
		dc.w loc_3CA0C-off_3CA06			; 0 
		dc.w loc_3CA1A-off_3CA06			; 1
		dc.w loc_3CA2E-off_3CA06			; 2
; ===========================================================================

loc_3CA0C:				
		addq.b	#2,$25(a0)
		move.b	#4,$1A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CA1A:				
		movea.w	$2C(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CA2E:				
		movea.w	$2C(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CA3C:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	JmpTo65_DeleteObject
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CA66(pc,d0.w),d1
		jsr	off_3CA66(pc,d1.w)
		bchg	#0,$2F(a0)
		bne.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3CA66:	
		dc.w loc_3CA70-off_3CA66			; 0 
		dc.w loc_3CA98-off_3CA66			; 1
		dc.w loc_3CAD0-off_3CA66			; 2
		dc.w loc_3CAE4-off_3CA66			; 3
		dc.w loc_3CB32-off_3CA66			; 4
; ===========================================================================

loc_3CA70:				
		addq.b	#2,$25(a0)
		move.b	#$D,$1A(a0)
		move.b	#4,$18(a0)
		move.b	#0,$20(a0)
		addi.w	#$10,ost_y_pos(a0)
		move.b	#$C,$1B(a0)
		subq.w	#3,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_3CA98:				
		bset	#0,$2F(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_3CAC2
		move.b	$1E(a0),d0
		addq.b	#2,d0
		bpl.s	loc_3CABC
		move.b	$1B(a0),d0
		subq.b	#1,d0
		beq.s	loc_3CAC4
		move.b	d0,$1B(a0)
		move.b	d0,$1E(a0)

loc_3CABC:				
		bclr	#0,$2F(a0)

locret_3CAC2:				
		rts	
; ===========================================================================

loc_3CAC4:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0)
		rts	
; ===========================================================================

loc_3CAD0:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3CAD8
		rts	
; ===========================================================================

loc_3CAD8:				
		addq.b	#2,$25(a0)
		addi.w	#$10,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_3CAE4:				
		moveq	#0,d0
		move.b	$2E(a0),d0
		addq.b	#1,d0
		cmpi.b	#5,d0
		bcc.s	loc_3CB0A
		addi.w	#$10,ost_y_pos(a0)
		move.b	d0,$2E(a0)
		move.b	byte_3CB26(pc,d0.w),$1A(a0)
		move.b	byte_3CB2C(pc,d0.w),$20(a0)
		rts	
; ===========================================================================

loc_3CB0A:				
		addq.b	#2,$25(a0)
		move.w	#$80,$2A(a0)
		bset	#2,$22(a0)
		movea.w	$2C(a0),a1
		bset	#3,$22(a1)
		rts	
; ===========================================================================
byte_3CB26:	
		dc.b  $E					; 0
		dc.b  $F					; 1
		dc.b $10					; 2
		dc.b $11					; 3
		dc.b $12					; 4
		dc.b   0					; 5

byte_3CB2C:	
		dc.b $86					; 0
		dc.b $AB					; 1
		dc.b $AC					; 2
		dc.b $AD					; 3
		dc.b $AE					; 4
		dc.b   0					; 5
; ===========================================================================

loc_3CB32:				
		movea.w	$2C(a0),a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		rts	
; ===========================================================================

loc_3CB3E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CB4C(pc,d0.w),d1
		jmp	off_3CB4C(pc,d1.w)
; ===========================================================================
off_3CB4C:	dc.w loc_3CB52-off_3CB4C			; 0 
		dc.w loc_3CB7C-off_3CB4C			; 1
		dc.w loc_3CBA4-off_3CB4C			; 2
; ===========================================================================

loc_3CB52:				
		addq.b	#2,$25(a0)
		move.b	#0,$1A(a0)
		move.b	#1,$1C(a0)
		move.w	#$2C60,ost_x_pos(a0)
		move.w	#$4E6,ost_y_pos(a0)
		lea	(byte_3CC7C).l,a2
		bsr.w	LoadChild
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CB7C:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.s	loc_3CB96
		lea	(off_3D0D8).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CB96:				
		addq.b	#2,$25(a0)
		move.w	#$C0,$2A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CBA4:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3CBB2
		addq.w	#1,ost_y_pos(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CBB2:				
		movea.w	$3E(a0),a1
		jsrto	DeleteChild,JmpTo6_DeleteChild
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3CBBE:				
		movea.w	$2C(a0),a1
		move.w	ost_y_pos(a1),d0
		addi.w	#$26,d0
		move.w	d0,ost_y_pos(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
		; a bit of unused/dead code
		move.w	ost_x_pos(a0),-(sp)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		move.w	#$F,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	(sp)+,d4
		jmpto	DetectPlatform,JmpTo9_DetectPlatform
; ===========================================================================

loc_3CBEC:				
		tst.b	$21(a0)
		beq.s	loc_3CC3C
		tst.b	$20(a0)
		bne.s	locret_3CC3A
		tst.b	$30(a0)
		bne.s	loc_3CC16
		btst	#6,$22(a0)
		beq.s	locret_3CC3A
		move.b	#$20,$30(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_3CC16:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_3CC24
		move.w	#$EEE,d0

loc_3CC24:				
		move.w	d0,(a1)
		subq.b	#1,$30(a0)
		bne.s	locret_3CC3A
		btst	#4,$22(a0)
		beq.s	locret_3CC3A
		move.b	#6,$20(a0)

locret_3CC3A:				
		rts	
; ===========================================================================

loc_3CC3C:				
		moveq	#$64,d0
		bsr.w	AddPoints
		clr.b	$20(a0)
		move.w	#$EF,$30(a0)
		move.b	#$1E,$25(a0)
		bset	#5,$22(a0)
		bclr	#6,$22(a0)
		rts	
; ===========================================================================
byte_3CC60:	dc.b   0					; 0 
		dc.b $2A					; 1
		dc.b $C5					; 2
		dc.b $94					; 3
byte_3CC64:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $C5					; 2
		dc.b $98					; 3
byte_3CC68:	dc.b   0					; 0 
		dc.b $3C					; 1
		dc.b $C5					; 2
		dc.b $9A					; 3
byte_3CC6C:	dc.b   0					; 0 
		dc.b $3C					; 1
		dc.b $C5					; 2
		dc.b $9C					; 3
byte_3CC70:	dc.b   0					; 0 
		dc.b $3A					; 1
		dc.b $C5					; 2
		dc.b $96					; 3
byte_3CC74:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $C5					; 2
		dc.b $9E					; 3
byte_3CC78:	dc.b   0					; 0 
		dc.b $38					; 1
		dc.b $C5					; 2
		dc.b $A0					; 3
byte_3CC7C:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $C5					; 2
		dc.b $A2					; 3
off_3CC80:	dc.l Map_3CCD8	
		dc.w $379
		dc.w $404
		dc.w $2000
off_3CC8A:	dc.l Map_3CCD8	
		dc.w $379
		dc.w $401
		dc.w $800
off_3CC94:	dc.l Map_3CCD8	
		dc.w $379
		dc.w $405
		dc.w $1000
off_3CC9E:	dc.l Map_3D0EE	
		dc.w 0
		dc.w $405
		dc.w $2000
off_3CCA8:	dc.l Map_3CEBC	
		dc.w $A46D
		dc.w $405
		dc.w $2000
off_3CCB2:	dc.w byte_3CCBA-off_3CCB2			; 0 
		dc.w byte_3CCC4-off_3CCB2			; 1
		dc.w byte_3CCCC-off_3CCB2			; 2
		dc.w byte_3CCD0-off_3CCB2			; 3
byte_3CCBA:	dc.b   5,  0,  1,  2,  3,  3,  3,  3,$FA,  0	; 0	
byte_3CCC4:	dc.b   3,  3,  2,  1,  0,  0,$FA,  0		; 0	
byte_3CCCC:	dc.b   3,  5,  6,$FF				; 0 
byte_3CCD0:	dc.b   3,  7,  8,  9, $A, $B,$FF,  0		; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3CCD8:				
		dc.w word_3CCFE-Map_3CCD8			; 0
		dc.w word_3CD20-Map_3CCD8			; 1
		dc.w word_3CD42-Map_3CCD8			; 2
		dc.w word_3CD64-Map_3CCD8			; 3
		dc.w word_3CD86-Map_3CCD8			; 4
		dc.w word_3CD98-Map_3CCD8			; 5
		dc.w word_3CDAA-Map_3CCD8			; 6
		dc.w word_3CDB4-Map_3CCD8			; 7
		dc.w word_3CDBE-Map_3CCD8			; 8
		dc.w word_3CDC8-Map_3CCD8			; 9
		dc.w word_3CDD2-Map_3CCD8			; 10
		dc.w word_3CDDC-Map_3CCD8			; 11
		dc.w word_3CDE6-Map_3CCD8			; 12
		dc.w word_3CE08-Map_3CCD8			; 13
		dc.w word_3CE12-Map_3CCD8			; 14
		dc.w word_3CE24-Map_3CCD8			; 15
		dc.w word_3CE3E-Map_3CCD8			; 16
		dc.w word_3CE60-Map_3CCD8			; 17
		dc.w word_3CE8A-Map_3CCD8			; 18
word_3CCFE:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0			; 0
		dc.w $F80C,$2004,$2002,	   0			; 4
		dc.w	 9,$2008,$2004,$FFE8			; 8
		dc.w	 9,$2808,$2804,	   0			; 12
word_3CD20:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0			; 0
		dc.w $F80C,$2800,$2800,	   0			; 4
		dc.w	 9,$200E,$2007,$FFE8			; 8
		dc.w	 9,$280E,$2807,	   0			; 12
word_3CD42:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0			; 0
		dc.w $F80C,$2800,$2800,	   0			; 4
		dc.w	 9,$2014,$200A,$FFE8			; 8
		dc.w	 9,$2814,$280A,	   0			; 12
word_3CD64:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0			; 0
		dc.w $F80C,$2800,$2800,	   0			; 4
		dc.w	 8,$201A,$200D,$FFE8			; 8
		dc.w	 8,$281A,$280D,	   0			; 12
word_3CD86:	dc.w 2			
		dc.w $F805,$401D,$400E,$FFF0			; 0
		dc.w $F805,$481D,$480E,	   0			; 4
word_3CD98:	dc.w 2			
		dc.w $F80D,$2021,$2010,$FFE0			; 0
		dc.w $F80D,$2821,$2810,	   0			; 4
word_3CDAA:	dc.w 1			
		dc.w $F80E,$2029,$2014,$FFF0			; 0
word_3CDB4:	dc.w 1			
		dc.w $F80E,$2035,$201A,$FFF0			; 0
word_3CDBE:	dc.w 1			
		dc.w $F80E,$2041,$2020,$FFF0			; 0
word_3CDC8:	dc.w 1			
		dc.w $F80E,$204D,$2026,$FFF0			; 0
word_3CDD2:	dc.w 1			
		dc.w $F80E,$2841,$2820,$FFF0			; 0
word_3CDDC:	dc.w 1			
		dc.w $F80E,$2835,$281A,$FFF0			; 0
word_3CDE6:	dc.w 4			
		dc.w $C007,$2059,$202C,$FFF8			; 0
		dc.w $E007,$2059,$202C,$FFF8			; 4
		dc.w	 7,$2059,$202C,$FFF8			; 8
		dc.w $2007,$2059,$202C,$FFF8			; 12
word_3CE08:	dc.w 1			
		dc.w	$C,$4071,$4038,$FFF0			; 0
word_3CE12:	dc.w 2			
		dc.w $F00F,$4061,$4030,$FFF0			; 0
		dc.w $100C,$4071,$4038,$FFF0			; 4
word_3CE24:	dc.w 3			
		dc.w $E00F,$4061,$4030,$FFF0			; 0
		dc.w	$F,$4061,$4030,$FFF0			; 4
		dc.w $200C,$4071,$4038,$FFF0			; 8
word_3CE3E:	dc.w 4			
		dc.w $D00F,$4061,$4030,$FFF0			; 0
		dc.w $F00F,$4061,$4030,$FFF0			; 4
		dc.w $100F,$4061,$4030,$FFF0			; 8
		dc.w $300C,$4071,$4038,$FFF0			; 12
word_3CE60:	dc.w 5			
		dc.w $C00F,$4061,$4030,$FFF0			; 0
		dc.w $E00F,$4061,$4030,$FFF0			; 4
		dc.w	$F,$4061,$4030,$FFF0			; 8
		dc.w $200F,$4061,$4030,$FFF0			; 12
		dc.w $400C,$4071,$4038,$FFF0			; 16
word_3CE8A:	dc.w 6			
		dc.w $B00F,$4061,$4030,$FFF0			; 0
		dc.w $D00F,$4061,$4030,$FFF0			; 4
		dc.w $F00F,$4061,$4030,$FFF0			; 8
		dc.w $100F,$4061,$4030,$FFF0			; 12
		dc.w $300F,$4061,$4030,$FFF0			; 16
		dc.w $500C,$4071,$4038,$FFF0			; 20
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3CEBC:				
		dc.w word_3CEBE-Map_3CEBC

word_3CEBE:
		dc.w 2			
		dc.w $F40E,    0,    0,$FFE0			; 0
		dc.w $F40E, $800, $800,	   0			; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C6 - Eggman
; ----------------------------------------------------------------------------

Eggman:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3CEDE(pc,d0.w),d1
		jmp	off_3CEDE(pc,d1.w)
; ===========================================================================
off_3CEDE:	dc.w loc_3CEE6-off_3CEDE			; 0 
		dc.w loc_3CEF8-off_3CEDE			; 1
		dc.w loc_3D036-off_3CEDE			; 2
		dc.w loc_3D09C-off_3CEDE			; 3
; ===========================================================================

loc_3CEE6:				
		bsr.w	LoadSubtypeData
		move.b	$28(a0),d0
		subi.b	#-$5C,d0
		move.b	d0,ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_3CEF8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CF06(pc,d0.w),d1
		jmp	off_3CF06(pc,d1.w)
; ===========================================================================
off_3CF06:	
		dc.w loc_3CF10-off_3CF06			; 0 
		dc.w loc_3CF32-off_3CF06			; 1
		dc.w loc_3CF58-off_3CF06			; 2
		dc.w loc_3CF7C-off_3CF06			; 3
		dc.w loc_3CFF6-off_3CF06			; 4
; ===========================================================================

loc_3CF10:				
		addq.b	#2,$25(a0)
		lea	(byte_3D0D0).l,a2
		bsr.w	LoadChild
		move.w	#$3F8,ost_x_pos(a1)
		move.w	#$160,ost_y_pos(a1)
		move.w	a0,($FFFFF660).w
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CF32:				
		bsr.w	GetClosestPlayer
		addi.w	#$5C,d2
		cmpi.w	#$B8,d2	
		bcs.s	loc_3CF44
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CF44:				
		addq.b	#2,$25(a0)
		move.w	#$18,$2A(a0)
		move.b	#1,$1A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CF58:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3CF62
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CF62:				
		addq.b	#2,$25(a0)
		bset	#2,$22(a0)
		move.w	#$200,ost_x_vel(a0)
		move.w	#$10,$2A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CF7C:				
		cmpi.w	#$810,ost_x_pos(a0)
		bcc.s	loc_3CFC0
		bsr.w	GetClosestPlayer
		addi.w	#$50,d2
		cmpi.w	#$A0,d2	
		bcc.s	loc_3CF9E
		move.w	ost_x_pos(a1),d0
		addi.w	#$50,d0
		move.w	d0,ost_x_pos(a0)

loc_3CF9E:				
		subq.w	#1,$2A(a0)
		bpl.s	loc_3CFAE
		move.w	#$20,$2A(a0)
		bsr.w	loc_3D00C

loc_3CFAE:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_3D0D8).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CFC0:				
		move.b	#2,$1A(a0)
		clr.w	ost_x_vel(a0)
		tst.b	ost_render(a0)
		bpl.s	loc_3CFF2
		addq.b	#2,$25(a0)
		move.w	#$80,ost_x_vel(a0)
		move.w	#-$200,ost_y_vel(a0)
		move.b	#2,$1A(a0)
		move.w	#$50,$2A(a0)
		bset	#3,$22(a0)

loc_3CFF2:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3CFF6:				
		subq.w	#1,$2A(a0)
		bmi.w	JmpTo65_DeleteObject

loc_3CFFE:
		addi.w	#$10,ost_y_vel(a0)

loc_3D004:
		jsrto	SpeedToPos,JmpTo26_SpeedToPos

loc_3D008:
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3D00C:				
		lea	(byte_3D0D4).l,a2
		bsr.w	LoadChild
		move.b	#-$56,$28(a1)
		move.b	#5,$1A(a1)
		move.w	#-$100,ost_x_vel(a1)
		subi.w	#$18,ost_y_pos(a1)
		move.w	#8,$2A(a1)
		rts	
; ===========================================================================

loc_3D036:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3D044(pc,d0.w),d1
		jmp	off_3D044(pc,d1.w)
; ===========================================================================
off_3D044:	dc.w loc_3D04A-off_3D044			; 0 
		dc.w loc_3D066-off_3D044			; 1
		dc.w loc_3D078-off_3D044			; 2
; ===========================================================================

loc_3D04A:				
		movea.w	$2C(a0),a1
		btst	#2,$22(a1)
		bne.s	loc_3D05E
		bsr.w	loc_3D086
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3D05E:				
		addq.b	#2,$25(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3D066:				
		bsr.w	loc_3D086
		lea	(off_3D0E6).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3D078:				
		lea	($FFFFB000).w,a1
		bclr	#5,$22(a1)
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3D086:				
		move.w	ost_x_pos(a0),-(sp)
		move.w	#$13,d1
		move.w	#$20,d2
		move.w	#$20,d3
		move.w	(sp)+,d4
		jmpto	SolidObject,JmpTo27_SolidObject
; ===========================================================================

loc_3D09C:				
		subq.w	#1,$2A(a0)
		bmi.w	JmpTo65_DeleteObject
		addi.w	#$10,ost_y_vel(a0)
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================
off_3D0B2:	dc.l Map_3D0EE	
		dc.w 0
		dc.w $405
		dc.w $1800
off_3D0BC:	dc.l Map_3D1DE	
		dc.w $2328
		dc.w $401
		dc.w $800
off_3D0C6:	dc.l Map_3D0EE	
		dc.w 0
		dc.w $405
		dc.w $400
byte_3D0D0:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $C6					; 2
		dc.b $A8					; 3
byte_3D0D4:	dc.b   0					; 0 
		dc.b $3C					; 1
		dc.b $C6					; 2
		dc.b $AA					; 3
off_3D0D8:	dc.w byte_3D0DC-off_3D0D8			; 0 
		dc.w byte_3D0E2-off_3D0D8			; 1
byte_3D0DC:	dc.b   5,  2,  3,  4,$FF,  0			; 0	
byte_3D0E2:	dc.b   5,  6,  7,$FF				; 0 
off_3D0E6:	dc.w byte_3D0E8-off_3D0E6 
byte_3D0E8:	dc.b   1,  0,  1,  2,  3,$FA			; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3D0EE:				
		dc.w word_3D0FE-Map_3D0EE			; 0
		dc.w word_3D118-Map_3D0EE			; 1
		dc.w word_3D132-Map_3D0EE			; 2
		dc.w word_3D15C-Map_3D0EE			; 3
		dc.w word_3D17E-Map_3D0EE			; 4
		dc.w word_3D1A0-Map_3D0EE			; 5
		dc.w word_3D1AA-Map_3D0EE			; 6
		dc.w word_3D1C4-Map_3D0EE			; 7
word_3D0FE:	dc.w 3			
		dc.w $E60D, $500, $280,$FFF0			; 0
		dc.w $F60E, $564, $2B2,$FFF0			; 4
		dc.w  $E0D, $570, $2B8,$FFF0			; 8
word_3D118:	dc.w 3			
		dc.w $E60D, $510, $288,$FFF0			; 0
		dc.w $F60E, $564, $2B2,$FFF0			; 4
		dc.w  $E0D, $570, $2B8,$FFF0			; 8
word_3D132:	dc.w 5			
		dc.w $EC04, $518, $28C,$FFE0			; 0
		dc.w $E40D, $51A, $28D,$FFF0			; 4
		dc.w $F40E, $522, $291,$FFF0			; 8
		dc.w  $401, $52E, $297,$FFE8			; 12
		dc.w  $405, $530, $298,	 $10			; 16
word_3D15C:	dc.w 4			
		dc.w $EC04, $518, $28C,$FFE0			; 0
		dc.w $E40D, $51A, $28D,$FFF0			; 4
		dc.w $F40E, $534, $29A,$FFF0			; 8
		dc.w  $C05, $540, $2A0,$FFF8			; 12
word_3D17E:	dc.w 4			
		dc.w $EC04, $518, $28C,$FFE0			; 0
		dc.w $E40E, $544, $2A2,$FFF0			; 4
		dc.w $FC0F, $550, $2A8,$FFF0			; 8
		dc.w  $C01, $560, $2B0,	 $10			; 12
word_3D1A0:	dc.w 1			
		dc.w $FC04, $562, $2B1,$FFF8			; 0
word_3D1AA:	dc.w 3			
		dc.w $E60D, $508, $284,$FFF0			; 0
		dc.w $F60E, $564, $2B2,$FFF0			; 4
		dc.w  $E0D, $570, $2B8,$FFF0			; 8
word_3D1C4:	dc.w 3			
		dc.w $E70D, $508, $284,$FFF0			; 0
		dc.w $F70E, $564, $2B2,$FFF0			; 4
		dc.w  $F0D, $578, $2BC,$FFF0			; 8
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3D1DE:				
		dc.w word_3D1E6-Map_3D1DE			; 0
		dc.w word_3D208-Map_3D1DE			; 1
		dc.w word_3D222-Map_3D1DE			; 2
		dc.w word_3D234-Map_3D1DE			; 3
word_3D1E6:	dc.w 4			
		dc.w $E005,    0,    0,$FFF8			; 0
		dc.w $F005,    0,    0,$FFF8			; 4
		dc.w	 5,    0,    0,$FFF8			; 8
		dc.w $1005,    0,    0,$FFF8			; 12
word_3D208:	dc.w 3			
		dc.w $E005,    0,    0,$FFF8			; 0
		dc.w $F005,    0,    0,$FFF8			; 4
		dc.w	 5,    0,    0,$FFF8			; 8
word_3D222:	dc.w 2			
		dc.w $E005,    0,    0,$FFF8			; 0
		dc.w $F005,    0,    0,$FFF8			; 4
word_3D234:	dc.w 1			
		dc.w $E005,    0,    0,$FFF8			; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C8 - Crawl (CNZ shield badnik)
; ----------------------------------------------------------------------------

Crawl:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3D24C(pc,d0.w),d1
		jmp	off_3D24C(pc,d1.w)
; ===========================================================================
off_3D24C:
		dc.w loc_3D254-off_3D24C			; 0 
		dc.w loc_3D27C-off_3D24C			; 1
		dc.w loc_3D2A6-off_3D24C			; 2
		dc.w loc_3D2D4-off_3D24C			; 3
; ===========================================================================

loc_3D254:				
		bsr.w	LoadSubtypeData
		move.w	#$200,$2A(a0)
		moveq	#$20,d0
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_3D26A
		neg.w	d0

loc_3D26A:				
		move.w	d0,ost_x_vel(a0)
		move.b	#$F,ost_height(a0)
		move.b	#$10,$17(a0)
		rts	
; ===========================================================================

loc_3D27C:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3D298
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		bsr.w	loc_3D416
		lea	(off_3D44A).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D298:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#$3B,$2A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D2A6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3D2B4
		bsr.w	loc_3D416
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D2B4:				
		move.b	#2,ost_primary_routine(a0)
		move.w	#$200,$2A(a0)
		neg.w	ost_x_vel(a0)
		bchg	#render_xflip_bit,ost_render(a0)
		bchg	#0,$22(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D2D4:				
		move.b	#-$29,$20(a0)
		bsr.w	GetClosestPlayer
		move.w	d2,d4
		addi.w	#$40,d2
		cmpi.w	#$80,d2	
		bcc.w	loc_3D39A
		addi.w	#$40,d3
		cmpi.w	#$80,d3	
		bcc.w	loc_3D39A
		bclr	#3,$22(a0)
		bne.w	loc_3D386
		move.b	$21(a0),d0
		beq.s	loc_3D368
		bclr	#0,$21(a0)
		beq.s	loc_3D334
		cmpi.b	#2,$1C(a1)
		bne.s	loc_3D36C
		btst	#1,$22(a1)
		bne.s	loc_3D332
		bsr.w	GetClosestPlayer
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3D32E
		subq.w	#2,d0

loc_3D32E:				
		tst.w	d0
		bne.s	loc_3D390

loc_3D332:				
		bsr.s	loc_3D3A4

loc_3D334:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_3D364
		cmpi.b	#2,$1C(a1)
		bne.s	loc_3D36C
		btst	#1,$22(a1)
		bne.s	loc_3D362
		bsr.w	GetClosestPlayer
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3D35E
		subq.w	#2,d0

loc_3D35E:				
		tst.w	d0
		bne.s	loc_3D390

loc_3D362:				
		bsr.s	loc_3D3A4

loc_3D364:				
		clr.b	$21(a0)

loc_3D368:				
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D36C:				
		move.b	#-$69,$20(a0)
		btst	#1,$2B(a1)
		beq.s	loc_3D380
		move.b	#$17,$20(a0)

loc_3D380:				
		bset	#3,$22(a0)

loc_3D386:				
		move.b	#1,$1A(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D390:				
		move.b	#$17,$20(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D39A:				
		move.b	$2C(a0),ost_primary_routine(a0)
		jmpto	DespawnObject,JmpTo39_DespawnObject
; ===========================================================================

loc_3D3A4:				
		move.b	#2,$1A(a0)
		btst	#1,$22(a1)
		beq.s	loc_3D3B8
		move.b	#3,$1A(a0)

loc_3D3B8:				
		move.w	ost_x_pos(a0),d1
		move.w	ost_y_pos(a0),d2
		sub.w	ost_x_pos(a1),d1
		sub.w	ost_y_pos(a1),d2
		jsr	(CalcAngle).l
		move.b	(v_frame_counter).w,d1
		andi.w	#3,d1
		add.w	d1,d0
		jsr	CalcSine
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,ost_x_vel(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,ost_y_vel(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)

loc_3D404:
		clr.b	$3C(a1)
		move.w	#$B4,d0	
		jsr	PlaySound
		rts	
; ===========================================================================
		rts		; dead
; ===========================================================================

loc_3D416:				
		bsr.w	GetClosestPlayer
		addi.w	#$40,d2
		cmpi.w	#$80,d2	
		bcc.s	locret_3D43E
		addi.w	#$40,d3
		cmpi.w	#$80,d3	
		bcc.s	locret_3D43E
		move.b	ost_primary_routine(a0),$2C(a0)
		move.b	#6,ost_primary_routine(a0)
		clr.b	$1A(a0)

locret_3D43E:				
		rts	
; ===========================================================================
off_3D440:	
		dc.l Map_3D450	
		dc.w $8340
		dc.w $403
		dc.w $10D7

off_3D44A:	
		dc.w byte_3D44C-off_3D44A 
		
byte_3D44C:
		dc.b $13,  0,  1,$FF				; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3D450:				
		dc.w word_3D458-Map_3D450			; 0
		dc.w word_3D472-Map_3D450			; 1
		dc.w word_3D48C-Map_3D450			; 2
		dc.w word_3D4A6-Map_3D450			; 3
word_3D458:	dc.w 3			
		dc.w $F00B,$2010,$2008,	   0			; 0
		dc.w $F00F,$2000,$2000,$FFF0			; 4
		dc.w	 9,$2024,$2012,$FFE8			; 8
word_3D472:	dc.w 3			
		dc.w $F00B,$2010,$2008,	   4			; 0
		dc.w $F00F,$2000,$2000,$FFF0			; 4
		dc.w	 9,$2024,$2012,$FFE0			; 8
word_3D48C:	dc.w 3			
		dc.w $F00B,$2010,$2008,$FFE8			; 0
		dc.w	 9,$2024,$2012,$FFF0			; 4
		dc.w $F00F,$2000,$2000,$FFF0			; 8
word_3D4A6:	dc.w 4			
		dc.w $F00D,$201C,$200E,$FFF0			; 0
		dc.w	 9,$2024,$2012,$FFF8			; 4
		dc.w	 9,$2824,$2812,$FFE0			; 8
		dc.w $F00F,$2000,$2000,$FFF0			; 12
; ===========================================================================
; ----------------------------------------------------------------------------
; Object C7 - Eggrobo (final boss)
; ----------------------------------------------------------------------------

EggRobo:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3D4D6(pc,d0.w),d1
		jmp	off_3D4D6(pc,d1.w)
; ===========================================================================
off_3D4D6:	
		dc.w loc_3D4F8-off_3D4D6			; 0 
		dc.w loc_3D508-off_3D4D6			; 1
		dc.w loc_3DA14-off_3D4D6			; 2
		dc.w loc_3DA4A-off_3D4D6			; 3
		dc.w loc_3DA74-off_3D4D6			; 4
		dc.w loc_3DB74-off_3D4D6			; 5
		dc.w loc_3DB9E-off_3D4D6			; 6
		dc.w loc_3DBC8-off_3D4D6			; 7
		dc.w loc_3DC50-off_3D4D6			; 8
		dc.w loc_3DC9C-off_3D4D6			; 9
		dc.w loc_3DCCC-off_3D4D6			; 10
		dc.w loc_3DD20-off_3D4D6			; 11
		dc.w loc_3DD50-off_3D4D6			; 12
		dc.w loc_3DE70-off_3D4D6			; 13
		dc.w loc_3DEC2-off_3D4D6			; 14
		dc.w loc_3DFAA-off_3D4D6			; 15
		dc.w loc_3D970-off_3D4D6			; 16
; ===========================================================================

loc_3D4F8:				
		lea	off_3E590(pc),a1
		bsr.w	LoadSubtypeData_Part3
		move.b	$28(a0),ost_primary_routine(a0)
		rts	
; ===========================================================================

loc_3D508:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3D51A(pc,d0.w),d1
		jsr	off_3D51A(pc,d1.w)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3D51A:	
		dc.w loc_3D52A-off_3D51A			; 0 
		dc.w loc_3D5A8-off_3D51A			; 1
		dc.w loc_3D5C2-off_3D51A			; 2
		dc.w loc_3D5EA-off_3D51A			; 3
		dc.w loc_3D62E-off_3D51A			; 4
		dc.w loc_3D640-off_3D51A			; 5
		dc.w loc_3D684-off_3D51A			; 6
		dc.w loc_3D8D2-off_3D51A			; 7
; ===========================================================================

loc_3D52A:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		move.b	#5,$18(a0)
		lea	(byte_3E55C).l,a2
		bsr.w	LoadChild
		lea	(byte_3E564).l,a2
		bsr.w	LoadChild
		lea	(byte_3E560).l,a2
		bsr.w	LoadChild
		lea	(byte_3E568).l,a2
		bsr.w	LoadChild
		lea	(byte_3E56C).l,a2
		bsr.w	LoadChild
		lea	(byte_3E570).l,a2
		bsr.w	LoadChild
		lea	(byte_3E574).l,a2
		bsr.w	LoadChild
		lea	(byte_3E578).l,a2
		bsr.w	LoadChild
		lea	(byte_3E57C).l,a2
		bsr.w	LoadChild
		lea	(byte_3E580).l,a2
		bsr.w	LoadChild
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D5A8:				
		btst	#2,$22(a0)
		bne.s	loc_3D5B2
		rts	
; ===========================================================================

loc_3D5B2:				
		addq.b	#2,$25(a0)
		move.b	#$3C,$1E(a0)
		moveq	#-7,d0
		jmpto	PlaySound,JmpTo12_PlaySound
; ===========================================================================

loc_3D5C2:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D5CA
		rts	
; ===========================================================================

loc_3D5CA:				
		addq.b	#2,$25(a0)
		move.b	#$79,$1E(a0)
		move.w	#-$100,ost_y_vel(a0)
		movea.w	$38(a0),a1
		move.b	#4,$25(a1)
		moveq	#-$6C,d0
		jmpto	PlayMusic,JmpTo5_PlayMusic
; ===========================================================================

loc_3D5EA:				
		subq.b	#1,$1E(a0)
		beq.s	loc_3D604
		moveq	#-$49,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D604:				
		addq.b	#2,$25(a0)
		clr.w	ost_y_vel(a0)
		move.b	#$1F,$1E(a0)
		move.b	#$16,$20(a0)
		move.b	#$C,$21(a0)
		bsr.w	loc_3E0EE
		movea.w	$38(a0),a1
		move.b	#6,$25(a1)
		rts	
; ===========================================================================

loc_3D62E:				
		bsr.w	loc_3DFF8
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D63A
		rts	
; ===========================================================================

loc_3D63A:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_3D640:				
		bsr.w	loc_3DFF8
		addq.b	#2,$25(a0)
		move.b	#$20,$1E(a0)
		move.b	$26(a0),d0
		addq.b	#1,d0
		move.b	d0,$26(a0)
		andi.w	#3,d0
		move.b	byte_3D680(pc,d0.w),d0
		move.b	d0,$1C(a0)
		clr.b	$1D(a0)
		cmpi.b	#2,d0
		bne.s	locret_3D67E
		movea.w	$38(a0),a1
		move.b	#4,$25(a1)
		move.b	#2,$1C(a1)

locret_3D67E:				
		rts	
; ===========================================================================
byte_3D680:
		dc.b   2					; 0
		dc.b   0					; 1
		dc.b   2					; 2
		dc.b   4					; 3
; ===========================================================================

loc_3D684:				
		bsr.w	loc_3DFF8
		moveq	#0,d0
		move.b	$1C(a0),d0
		move.w	off_3D696(pc,d0.w),d1
		jmp	off_3D696(pc,d1.w)
; ===========================================================================
off_3D696:
		dc.w loc_3D6AA-off_3D696			; 0 
		dc.w loc_3D702-off_3D696			; 1
		dc.w loc_3D83C-off_3D696			; 2
; ===========================================================================
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D6A4
		rts	
; ===========================================================================

loc_3D6A4:				
		addq.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_3D6AA:				
		moveq	#0,d0
		move.b	$1D(a0),d0
		move.w	off_3D6B8(pc,d0.w),d1
		jmp	off_3D6B8(pc,d1.w)
; ===========================================================================
off_3D6B8:	
		dc.w loc_3D6C0-off_3D6B8			; 0 
		dc.w loc_3D6CE-off_3D6B8			; 1
		dc.w loc_3D6C0-off_3D6B8			; 2
		dc.w loc_3D6E8-off_3D6B8			; 3
; ===========================================================================

loc_3D6C0:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D6C8
		rts	
; ===========================================================================

loc_3D6C8:				
		addq.b	#2,$1D(a0)
		rts	
; ===========================================================================

loc_3D6CE:				
		lea	(off_3E40C).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D6DC
		rts	
; ===========================================================================

loc_3D6DC:				
		addq.b	#2,$1D(a0)
		move.b	#$40,$1E(a0)
		rts	
; ===========================================================================

loc_3D6E8:				
		lea	(off_3E42C).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D6F6
		rts	
; ===========================================================================

loc_3D6F6:				
		subq.b	#2,$25(a0)
		move.b	#$40,$1E(a0)
		rts	
; ===========================================================================

loc_3D702:				
		moveq	#0,d0
		move.b	$1D(a0),d0
		move.w	word_3D710(pc,d0.w),d1
		jmp	word_3D710(pc,d1.w)
; ===========================================================================
word_3D710:	
		dc.w loc_3D6C0-word_3D710			; 0 
		dc.w loc_3D720-word_3D710
		dc.w loc_3D744-word_3D710
		dc.w loc_3D6C0-word_3D710
		dc.w loc_3D784-word_3D710
		dc.w loc_3D7B8-word_3D710
		dc.w loc_3D7F0-word_3D710
		dc.w loc_3D82E-word_3D710
; ===========================================================================

loc_3D720:				
		lea	(off_3E3D0).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D72E
		rts	
; ===========================================================================

loc_3D72E:				
		addq.b	#2,$1D(a0)
		move.b	#-$80,$1E(a0)
		clr.w	ost_x_vel(a0)
		move.w	#-$200,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3D744:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D768
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3D75A
		moveq	#-$24,d0
		jsrto	PlaySoundLocal,JmpTo_PlaySoundLocal

loc_3D75A:				
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D768:				
		addq.b	#2,$1D(a0)
		clr.w	ost_y_vel(a0)
		lea	(byte_3E584).l,a2
		bsr.w	LoadChild
		clr.w	ost_x_vel(a0)
		clr.w	$28(a0)
		rts	
; ===========================================================================

loc_3D784:				
		move.w	$28(a0),d0
		bne.s	loc_3D78C
		rts	
; ===========================================================================

loc_3D78C:				
		addq.b	#2,$1D(a0)
		move.w	d0,ost_x_pos(a0)
		bclr	#render_xflip_bit,ost_render(a0)
		cmpi.w	#$780,d0
		bcc.s	loc_3D7A6
		bset	#render_xflip_bit,ost_render(a0)

loc_3D7A6:				
		bsr.w	loc_3E168
		move.w	#$800,ost_y_vel(a0)
		move.b	#$20,$1E(a0)
		rts	
; ===========================================================================

loc_3D7B8:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D7CC
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D7CC:				
		addq.b	#2,$1D(a0)
		clr.w	ost_y_vel(a0)
		move.b	#1,(f_screen_shake).w
		move.w	#$40,($FFFFF660).w
		movea.w	$38(a0),a1
		move.b	#6,$25(a1)
		moveq	#-$47,d0
		jmpto	PlaySound,JmpTo12_PlaySound
; ===========================================================================

loc_3D7F0:				
		lea	(off_3E30A).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D7FE
		rts	
; ===========================================================================

loc_3D7FE:				
		lea	(byte_3E2E0).l,a1

loc_3D804:
		bsr.w	loc_3E2A8
		bsr.w	GetClosestPlayer
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3D816
		subq.w	#2,d0

loc_3D816:				
		tst.w	d0
		bne.s	loc_3D820
		subq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_3D820:				
		addq.b	#2,$1D(a0)
		move.b	#$60,$1E(a0)
		bra.w	loc_3E136
; ===========================================================================

loc_3D82E:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D836
		rts	
; ===========================================================================

loc_3D836:				
		subq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_3D83C:				
		moveq	#0,d0
		move.b	$1D(a0),d0
		move.w	word_3D84A(pc,d0.w),d1
		jmp	word_3D84A(pc,d1.w)
; ===========================================================================
word_3D84A:	
		dc.w loc_3D6C0-word_3D84A			; 0 
		dc.w loc_3D856-word_3D84A
		dc.w loc_3D6C0-word_3D84A
		dc.w loc_3D89E-word_3D84A
		dc.w loc_3D6C0-word_3D84A
		dc.w loc_3D8B8-word_3D84A
; ===========================================================================

loc_3D856:				
		bset	#6,$22(a0)
		lea	(off_3E2F6).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D86A
		rts	
; ===========================================================================

loc_3D86A:				
		bsr.w	GetClosestPlayer
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3D878
		subq.w	#2,d0

loc_3D878:				
		tst.w	d0
		bne.s	loc_3D88E
		addq.b	#2,$1D(a0)
		move.b	#$40,$1E(a0)
		bset	#4,$22(a0)
		rts	
; ===========================================================================

loc_3D88E:				
		move.b	#8,$1D(a0)
		move.b	#$20,$1E(a0)
		bra.w	loc_3E136
; ===========================================================================

loc_3D89E:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D8A6
		rts	
; ===========================================================================

loc_3D8A6:				
		addq.b	#2,$1D(a0)
		bset	#5,$22(a0)
		move.b	#$40,$1E(a0)
		rts	
; ===========================================================================

loc_3D8B8:				
		lea	(off_3E300).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D8C6
		rts	
; ===========================================================================

loc_3D8C6:				
		subq.b	#2,$25(a0)
		bclr	#6,$22(a0)
		rts	
; ===========================================================================

loc_3D8D2:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		move.w	off_3D8E0(pc,d0.w),d1
		jmp	off_3D8E0(pc,d1.w)
; ===========================================================================
off_3D8E0:
		dc.w loc_3D8E6-off_3D8E0			; 0 
		dc.w loc_3D922-off_3D8E0			; 1
		dc.w loc_3D93C-off_3D8E0			; 2
; ===========================================================================

loc_3D8E6:				
		jsrto	BossExplode,JmpTo_BossExplode
		jsrto	ObjectFall,JmpTo8_ObjectFall
		move.w	ost_y_pos(a0),d0
		cmpi.w	#$15C,d0
		bcc.s	loc_3D8FA
		rts	
; ===========================================================================

loc_3D8FA:				
		move.w	#$15C,ost_y_pos(a0)
		move.w	ost_y_vel(a0),d0
		bmi.s	loc_3D916
		lsr.w	#2,d0
		cmpi.w	#$100,d0
		bcs.s	loc_3D916
		neg.w	d0
		move.w	d0,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3D916:				
		addq.b	#2,$1C(a0)
		move.b	#$40,$1E(a0)
		rts	
; ===========================================================================

loc_3D922:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D92C
		jmpto	BossExplode,JmpTo_BossExplode
; ===========================================================================

loc_3D92C:				
		addq.b	#2,$1C(a0)
		st.b	(f_lock_controls).w
		move.w	#$1000,(v_boundary_right_next).w
		rts	
; ===========================================================================

loc_3D93C:				
		move.w	#$808,(v_joypad_hold).w
		cmpi.w	#$840,(v_camera_x_pos).w
		bcc.s	loc_3D94C
		rts	
; ===========================================================================

loc_3D94C:				
		move.b	#$20,ost_primary_routine(a0)
		clr.b	$25(a0)
		move.w	#$20,$2A(a0)
		move.b	#1,(f_screen_shake).w
		move.w	#$1000,($FFFFF660).w
		movea.w	$36(a0),a1
		jmpto	DeleteChild,JmpTo6_DeleteChild
; ===========================================================================

loc_3D970:				
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3D984
		moveq	#-$1F,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		subq.w	#1,$2A(a0)

loc_3D984:				
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a1),d0
		sub.w	$2A(a0),d0
		move.w	d0,ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		bsr.w	loc_3DFBA
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3D9AC(pc,d0.w),d1
		jmp	off_3D9AC(pc,d1.w)
; ===========================================================================
off_3D9AC:
		dc.w loc_3D9B0-off_3D9AC			; 0 
		dc.w loc_3D9D6-off_3D9AC			; 1
; ===========================================================================

loc_3D9B0:				
		lea	($FFFFB000).w,a1
		cmpi.w	#$EC0,ost_x_pos(a1)
		bcc.s	loc_3D9BE
		rts	
; ===========================================================================

loc_3D9BE:				
		addq.b	#2,$25(a0)
		move.w	#$3F,(v_palfade_start).w
		move.b	#$16,$1E(a0)
		move.w	#$7FFF,(v_palcycle_time).w
		rts	
; ===========================================================================

loc_3D9D6:				
		subq.b	#1,$1E(a0)
		beq.w	loc_3D9F2
		movea.l	a0,a1
		lea	($FFFFFB00).w,a0
		moveq	#$3F,d0

loc_3D9E6:				
		jsrto	WhiteOut_AddColor,JmpTo_WhiteOut_AddColor
		dbf	d0,loc_3D9E6
		movea.l	a1,a0
		rts	
; ===========================================================================

loc_3D9F2:				
		move.l	#$EEE0EEE,d0
		lea	($FFFFFB00).w,a1
		moveq	#$1F,d6

loc_3D9FE:				
		move.l	d0,(a1)+
		dbf	d6,loc_3D9FE
		moveq	#-7,d0
		jsrto	PlaySound,JmpTo12_PlaySound
		move.b	#$20,(v_gamemode).w
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3DA14:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DA34(pc,d0.w),d1
		jsr	off_3DA34(pc,d1.w)
		lea	byte_3DA38(pc),a1
		bsr.w	loc_3E282
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DA34:	
		dc.w loc_3DA3C-off_3DA34			; 0 
		dc.w locret_3DA48-off_3DA34			; 1

byte_3DA38:
		dc.b   0					; 0 
		dc.b  $C					; 1
		dc.b $FF					; 2
		dc.b $EC					; 3
; ===========================================================================

loc_3DA3C:				
		addq.b	#2,$25(a0)
		move.b	#4,$1A(a0)
		rts	
; ===========================================================================

locret_3DA48:				
		rts	
; ===========================================================================

loc_3DA4A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DA62(pc,d0.w),d1
		jsr	off_3DA62(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DA62:	
		dc.w loc_3DA66-off_3DA62			; 0 
		dc.w locret_3DA72-off_3DA62			; 1
; ===========================================================================

loc_3DA66:				
		addq.b	#2,$25(a0)
		move.b	#$B,$1A(a0)
		rts	
; ===========================================================================

locret_3DA72:				
		rts	
; ===========================================================================

loc_3DA74:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DA96(pc,d0.w),d1
		jsr	off_3DA96(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		btst	#6,$22(a0)
		bne.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DA96:	
		dc.w loc_3DAA0-off_3DA96			; 0 
		dc.w loc_3DAAC-off_3DA96			; 1
		dc.w loc_3DACC-off_3DA96			; 2
		dc.w loc_3DB32-off_3DA96			; 3
		dc.w loc_3DB5A-off_3DA96			; 4
; ===========================================================================

loc_3DAA0:				
		addq.b	#2,$25(a0)
		move.b	#6,$1A(a0)
		rts	
; ===========================================================================

loc_3DAAC:				
		movea.w	$2C(a0),a1
		bclr	#4,$22(a1)
		bne.s	loc_3DABA
		rts	
; ===========================================================================

loc_3DABA:				
		addq.b	#2,$25(a0)
		move.w	#$10,$2A(a0)
		move.w	ost_y_pos(a0),$2E(a0)
		rts	
; ===========================================================================

loc_3DACC:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DADC
		addi.w	#$20,ost_y_vel(a0)
		bra.w	JmpTo26_SpeedToPos
; ===========================================================================

loc_3DADC:				
		addq.b	#2,$25(a0)
		move.w	#$20,$2A(a0)
		bsr.w	GetClosestPlayer
		tst.w	d2
		bpl.s	loc_3DAF0
		neg.w	d2

loc_3DAF0:				
		cmpi.w	#$100,d2
		bcs.s	loc_3DAFA
		move.w	#$FF,d2

loc_3DAFA:				
		andi.w	#$C0,d2	
		lsr.w	#5,d2
		move.w	word_3DB2A(pc,d2.w),d2
		tst.w	d1
		bne.s	loc_3DB0A
		neg.w	d2

loc_3DB0A:				
		move.w	d2,ost_y_vel(a0)
		move.w	#$800,d2
		movea.w	$2C(a0),a1
		btst	#render_xflip_bit,ost_render(a0)
		bne.s	loc_3DB20
		neg.w	d2

loc_3DB20:				
		move.w	d2,ost_x_vel(a0)
		moveq	#-$44,d0
		jmpto	PlaySound,JmpTo12_PlaySound
; ===========================================================================
word_3DB2A:	
		dc.w  $200					; 0
		dc.w  $100					; 1
		dc.w   $80					; 2
		dc.w	 0					; 3
; ===========================================================================

loc_3DB32:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DB3C
		bra.w	JmpTo26_SpeedToPos
; ===========================================================================

loc_3DB3C:				
		addq.b	#2,$25(a0)
		neg.w	ost_x_vel(a0)
		move.w	#$20,$2A(a0)
		move.w	$2E(a0),d0
		sub.w	ost_y_pos(a0),d0
		asl.w	#3,d0
		move.w	d0,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3DB5A:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DB64
		bra.w	JmpTo26_SpeedToPos
; ===========================================================================

loc_3DB64:				
		move.b	#2,$25(a0)
		clr.w	ost_x_vel(a0)
		clr.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3DB74:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DB8C(pc,d0.w),d1
		jsr	off_3DB8C(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DB8C:	
		dc.w loc_3DB90-off_3DB8C			; 0 
		dc.w locret_3DB9C-off_3DB8C			; 1
; ===========================================================================

loc_3DB90:				
		addq.b	#2,$25(a0)
		move.b	#5,$1A(a0)
		rts	
; ===========================================================================

locret_3DB9C:				
		rts	
; ===========================================================================

loc_3DB9E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DBB6(pc,d0.w),d1
		jsr	off_3DBB6(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DBB6:	
		dc.w loc_3DBBA-off_3DBB6			; 0 
		dc.w locret_3DBC6-off_3DBB6			; 1
; ===========================================================================

loc_3DBBA:				
		addq.b	#2,$25(a0)
		move.b	#$A,$1A(a0)
		rts	
; ===========================================================================

locret_3DBC6:				
		rts	
; ===========================================================================

loc_3DBC8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DBE8(pc,d0.w),d1
		jsr	off_3DBE8(pc,d1.w)
		lea	byte_3DBF2(pc),a1
		bsr.w	loc_3E282
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DBE8:	
		dc.w loc_3DBF6-off_3DBE8			; 0 
		dc.w loc_3DC02-off_3DBE8			; 1
		dc.w loc_3DC1C-off_3DBE8			; 2
		dc.w loc_3DC2A-off_3DBE8			; 3
		dc.w loc_3DC46-off_3DBE8			; 4
		
byte_3DBF2:	
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b $FF					; 2
		dc.b $CC					; 3
; ===========================================================================

loc_3DBF6:				
		addq.b	#2,$25(a0)
		move.b	#$15,$1A(a0)
		rts	
; ===========================================================================

loc_3DC02:				
		movea.w	($FFFFF660).w,a1
		btst	#3,$22(a1)
		bne.s	loc_3DC10
		rts	
; ===========================================================================

loc_3DC10:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0)
		rts	
; ===========================================================================

loc_3DC1C:				
		lea	(off_3E59A).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC2A:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DC34
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC34:				
		addq.b	#2,$25(a0)
		movea.w	$2C(a0),a1
		bset	#2,$22(a1)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC46:				
		move.b	#-1,$21(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC50:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DC66(pc,d0.w),d1
		jsr	off_3DC66(pc,d1.w)
		lea	byte_3DC70(pc),a1
		bra.w	loc_3E282
; ===========================================================================
off_3DC66:	
		dc.w loc_3DC74-off_3DC66			; 0 
		dc.w loc_3DC80-off_3DC66			; 1
		dc.w loc_3DC86-off_3DC66			; 2
		dc.w loc_3DC94-off_3DC66			; 3
		dc.w loc_3DC80-off_3DC66			; 4
		
byte_3DC70:	
		dc.b   0					; 0 
		dc.b $38					; 1
		dc.b   0					; 2
		dc.b $18					; 3
; ===========================================================================

loc_3DC74:				
		addq.b	#2,$25(a0)
		move.b	#$C,$1A(a0)
		rts	
; ===========================================================================

loc_3DC80:				
		move.b	#3,$1C(a0)

loc_3DC86:				
					
		lea	(off_3E5AA).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DC94:				
		move.b	#1,$1C(a0)
		bra.s	loc_3DC86
; ===========================================================================

loc_3DC9C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DCB4(pc,d0.w),d1
		jsr	off_3DCB4(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DCB4:	
		dc.w loc_3DCB8-off_3DCB4			; 0 
		dc.w locret_3DCCA-off_3DCB4			; 1
; ===========================================================================

loc_3DCB8:				
		addq.b	#2,$25(a0)
		move.b	#$B,$1A(a0)
		move.b	#5,$18(a0)
		rts	
; ===========================================================================

locret_3DCCA:				
		rts	
; ===========================================================================

loc_3DCCC:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DCE4(pc,d0.w),d1
		jsr	off_3DCE4(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DCE4:
		dc.w loc_3DCEE-off_3DCE4			; 0 
		dc.w loc_3DD00-off_3DCE4
		dc.w loc_3DACC-off_3DCE4
		dc.w loc_3DB32-off_3DCE4
		dc.w loc_3DB5A-off_3DCE4
; ===========================================================================

loc_3DCEE:				
		addq.b	#2,$25(a0)
		move.b	#6,$1A(a0)
		move.b	#5,$18(a0)
		rts	
; ===========================================================================

loc_3DD00:				
		movea.w	$2C(a0),a1
		bclr	#5,$22(a1)
		bne.s	loc_3DD0E
		rts	
; ===========================================================================

loc_3DD0E:				
		addq.b	#2,$25(a0)
		move.w	#$10,$2A(a0)
		move.w	ost_y_pos(a0),$2E(a0)
		rts	
; ===========================================================================

loc_3DD20:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DD38(pc,d0.w),d1
		jsr	off_3DD38(pc,d1.w)
		tst.b	ost_id(a0)
		beq.w	locret_37A48
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
off_3DD38:	
		dc.w loc_3DD3C-off_3DD38			; 0 
		dc.w locret_3DD4E-off_3DD38			; 1
; ===========================================================================

loc_3DD3C:				
		addq.b	#2,$25(a0)
		move.b	#$A,$1A(a0)
		move.b	#5,$18(a0)
		rts	
; ===========================================================================

locret_3DD4E:				
		rts	
; ===========================================================================

loc_3DD50:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DD5E(pc,d0.w),d1
		jmp	off_3DD5E(pc,d1.w)
; ===========================================================================
off_3DD5E:	
		dc.w loc_3DD64-off_3DD5E			; 0 
		dc.w loc_3DDA6-off_3DD5E			; 1
		dc.w loc_3DE3C-off_3DD5E			; 2
; ===========================================================================

loc_3DD64:				
		addq.b	#2,$25(a0)
		move.b	#$10,$1A(a0)
		ori.w	#tile_hi,ost_tile(a0)
		move.b	#1,$18(a0)
		move.w	#$A0,$2A(a0)
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		move.w	ost_x_vel(a1),$30(a0)
		move.w	ost_y_vel(a1),$32(a0)
		move.w	#$18,$26(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DDA6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DE0A
		lea	$40(a0),a1
		movea.l	a1,a2
		move.w	-(a1),ost_y_vel(a0)
		move.w	-(a1),ost_x_vel(a0)
		moveq	#2,d6

loc_3DDBC:				
		move.l	-(a1),-(a2)
		dbf	d6,loc_3DDBC
		lea	($FFFFB000).w,a2
		move.w	ost_x_vel(a2),d0
		bne.s	loc_3DDD2
		move.w	ost_x_pos(a2),ost_x_pos(a0)

loc_3DDD2:				
		move.w	d0,(a1)+
		move.w	ost_y_vel(a2),d0
		bne.s	loc_3DDE0
		move.w	ost_y_pos(a2),ost_y_pos(a0)

loc_3DDE0:				
		move.w	d0,(a1)+
		jsrto	SpeedToPos,JmpTo26_SpeedToPos
		lea	(off_3E5EE).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		subq.b	#1,$26(a0)
		bpl.s	loc_3DE06
		subq.b	#1,$27(a0)
		move.b	$27(a0),$26(a0)
		moveq	#-$58,d0
		jsrto	PlaySound,JmpTo12_PlaySound

loc_3DE06:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DE0A:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0)
		move.b	#4,$26(a0)
		lea	($FFFFB000).w,a1
		move.w	ost_x_pos(a1),ost_x_pos(a0)
		move.w	ost_y_pos(a1),ost_y_pos(a0)
		lea	(byte_3E588).l,a2
		bsr.w	LoadChild
		clr.w	ost_x_vel(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DE3C:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DE62
		lea	(off_3E5EE).l,a1
		jsrto	AnimateSprite,JmpTo25_AnimateSprite
		subq.b	#1,$26(a0)
		bpl.s	loc_3DE5E
		move.b	#4,$26(a0)
		moveq	#-$58,d0
		jsrto	PlaySound,JmpTo12_PlaySound

loc_3DE5E:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DE62:				
		movea.w	$2C(a0),a1
		move.w	ost_x_pos(a0),$28(a1)
		bra.w	JmpTo65_DeleteObject
; ===========================================================================

loc_3DE70:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DE7E(pc,d0.w),d1
		jmp	off_3DE7E(pc,d1.w)
; ===========================================================================
off_3DE7E:	dc.w loc_3DE82-off_3DE7E			; 0 
		dc.w loc_3DEA2-off_3DE7E			; 1
; ===========================================================================

loc_3DE82:				
		addq.b	#2,$25(a0)
		move.b	#$14,$1A(a0)
		move.b	#1,$18(a0)
		ori.w	#tile_hi,ost_tile(a0)
		move.w	#4,$2A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DEA2:				
		movea.w	$2C(a0),a1
		tst.b	(a1)
		beq.w	JmpTo65_DeleteObject
		subq.w	#1,$2A(a0)
		bne.s	loc_3DEBE
		move.w	#4,$2A(a0)
		bchg	#tile_pal12_bit,ost_tile(a0)

loc_3DEBE:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DEC2:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DED0(pc,d0.w),d1
		jmp	off_3DED0(pc,d1.w)
; ===========================================================================
off_3DED0:	
		dc.w loc_3DED8-off_3DED0			; 0 
		dc.w loc_3DF04-off_3DED0			; 1
		dc.w loc_3DF36-off_3DED0			; 2
		dc.w loc_3DF80-off_3DED0			; 3
; ===========================================================================

loc_3DED8:				
		addq.b	#2,$25(a0)
		move.b	#$E,$1A(a0)
		move.b	#-$77,$20(a0)
		move.b	#5,$18(a0)
		move.b	#$C,$19(a0)
		lea	byte_3DF00(pc),a1
		bsr.w	loc_3E282
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================
byte_3DF00:	
		dc.b   0					; 0 
		dc.b $38					; 1
		dc.b $FF					; 2
		dc.b $EC					; 3
; ===========================================================================

loc_3DF04:				
		movea.w	$2C(a0),a1

loc_3DF08:
		btst	#7,$22(a1)
		bne.s	loc_3DF4C
		jsrto	ObjectFall,JmpTo8_ObjectFall
		move.w	ost_y_pos(a0),d0
		cmpi.w	#$170,d0
		bcc.s	loc_3DF22
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF22:				
		addq.b	#2,$25(a0)
		move.w	#$170,ost_y_pos(a0)
		move.w	#$40,$2A(a0)
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF36:				
		movea.w	$2C(a0),a1
		btst	#7,$22(a1)
		bne.s	loc_3DF4C
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DF4C
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF4C:				
		move.b	#6,$25(a0)
		move.l	#Map_2D50A,ost_mappings(a0)
		move.w	#tile_Nem_FieryExplosion,ost_tile(a0)
		move.b	#1,$18(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#$C4,d0	
		jsr	PlaySound
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DF80:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_3DFA6
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		bcs.s	loc_3DFA6
		clr.b	$20(a0)
		cmpi.b	#7,$1A(a0)
		beq.w	JmpTo65_DeleteObject

loc_3DFA6:				
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DFAA:				
		subq.w	#1,$2A(a0)
		bmi.w	JmpTo65_DeleteObject
		jsrto	ObjectFall,JmpTo8_ObjectFall
		jmpto	DisplaySprite,JmpTo45_DisplaySprite
; ===========================================================================

loc_3DFBA:				
		jsr	FindFreeObj
		bne.s	locret_3DFF6
		_move.b	#id_BossExplosion,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		jsr	RandomNumber
		move.w	d0,d1
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$30,d1
		add.w	d1,ost_x_pos(a1)
		lsr.w	#8,d0
		lsr.b	#2,d0
		subi.w	#$30,d0
		add.w	d0,ost_y_pos(a1)

locret_3DFF6:				
		rts	
; ===========================================================================

loc_3DFF8:				
		tst.b	$21(a0)
		beq.s	loc_3E05A
		tst.b	$2A(a0)
		bne.s	loc_3E02E

loc_3E004:
		tst.b	$20(a0)
		beq.s	loc_3E01E
		movea.w	$36(a0),a1

loc_3E00E:
		tst.b	$20(a1)
		bne.s	locret_3E058
		clr.b	$20(a0)
		subq.b	#1,$21(a0)
		beq.s	loc_3E05A

loc_3E01E:				
		move.b	#$3C,$2A(a0)
		move.w	#$AC,d0	
		jsr	PlaySound

loc_3E02E:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_3E03C
		move.w	#$EEE,d0

loc_3E03C:				
		move.w	d0,(a1)
		subq.b	#1,$2A(a0)
		bne.s	locret_3E058
		clr.w	($FFFFFB22).w
		move.b	#$16,$20(a0)
		movea.w	$36(a0),a1
		move.b	#$2A,$20(a1)

locret_3E058:				
		rts	
; ===========================================================================

loc_3E05A:				
		moveq	#$64,d0
		bsr.w	AddPoints
		clr.b	$1E(a0)
		move.b	#$E,$25(a0)
		bset	#7,$22(a0)
		clr.b	$1C(a0)
		clr.b	$20(a0)
		clr.w	ost_x_vel(a0)
		clr.w	ost_y_vel(a0)
		bsr.w	loc_3E11E
		bsr.w	loc_3E094
		movea.w	$38(a0),a1
		jsrto	DeleteChild,JmpTo6_DeleteChild
		addq.w	#4,sp
		rts	
; ===========================================================================

loc_3E094:				
		lea	(byte_3E0E6).l,a1			; could be PC-relative
		lea	word_3E0C6(pc),a2
		moveq	#0,d0
		moveq	#7,d6

loc_3E0A2:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a3
		move.b	#$1E,$24(a3)
		clr.b	$25(a3)
		move.w	#$80,$2A(a3)
		move.w	(a2)+,ost_x_vel(a3)
		move.w	(a2)+,ost_y_vel(a3)
		dbf	d6,loc_3E0A2
		rts	
; ===========================================================================
word_3E0C6:	
		dc.w  $200,$FC00				; 0 
		dc.w $FF00,$FF00				; 2
		dc.w  $300,$FD00				; 4
		dc.w $FF00,$FC00				; 6
		dc.w  $180,$FE00				; 8
		dc.w $FE00,$FD00				; 10
		dc.w	 0,$FC00				; 12
		dc.w  $100,$FD00				; 14
		
byte_3E0E6:	
		dc.b $2C					; 0 
		dc.b $2E					; 1
		dc.b $30					; 2
		dc.b $32					; 3
		dc.b $34					; 4
		dc.b $3A					; 5
		dc.b $3C					; 6
		dc.b $3E					; 7
; ===========================================================================

loc_3E0EE:				
		lea	byte_3E114(pc),a1
		lea	byte_3E10A(pc),a2
		moveq	#0,d0
		moveq	#9,d6

loc_3E0FA:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a3
		move.b	(a2)+,$20(a3)

loc_3E104:
		dbf	d6,loc_3E0FA
		rts	
; ===========================================================================
byte_3E10A:
		dc.b   0					; 0 
		dc.b $8F					; 1
		dc.b $9C					; 2
		dc.b   0					; 3
		dc.b $86					; 4
		dc.b $2A					; 5
		dc.b $8B					; 6
		dc.b $8F					; 7
		dc.b $9C					; 8
		dc.b $8B					; 9
		
byte_3E114:	
		dc.b $2C					; 0 
		dc.b $2E					; 1
		dc.b $30					; 2
		dc.b $32					; 3
		dc.b $34					; 4
		dc.b $36					; 5
		dc.b $38					; 6
		dc.b $3A					; 7
		dc.b $3C					; 8
		dc.b $3E					; 9
; ===========================================================================

loc_3E11E:				
		lea	byte_3E114(pc),a1
		moveq	#0,d0
		moveq	#9,d6

loc_3E126:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a3
		clr.b	$20(a3)
		dbf	d6,loc_3E126
		rts	
; ===========================================================================

loc_3E136:				
		lea	EggmanBomb_InitSpeeds(pc),a3
		moveq	#1,d6

loc_3E13C:				
		lea	(byte_3E58C).l,a2			; could be PC-relative
		bsr.w	LoadChild
		move.w	(a3)+,d0
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3E152
		neg.w	d0

loc_3E152:				
		move.w	d0,ost_x_vel(a1)
		move.w	(a3)+,ost_y_vel(a1)
		dbf	d6,loc_3E13C
		rts	
; ===========================================================================
EggmanBomb_InitSpeeds:	
		dc.w   $60,-$800
		dc.w   $C0,-$A00
; ===========================================================================

loc_3E168:				
		move.b	ost_render(a0),d0
		andi.b	#1,d0
		moveq	#0,d1
		lea	byte_3E19E(pc),a1

loc_3E176:				
		move.b	(a1)+,d1
		beq.w	locret_37A48
		movea.w	(a0,d1.w),a2
		move.b	ost_render(a2),d2
		andi.b	#-2,d2
		or.b	d0,d2
		move.b	d2,ost_render(a2)
		move.b	$22(a2),d2
		andi.b	#-2,d2
		or.b	d0,d2
		move.b	d2,$22(a2)
		bra.s	loc_3E176
; ===========================================================================
byte_3E19E:	
		dc.b $2C					; 0 
		dc.b $2E					; 1
		dc.b $30					; 2
		dc.b $32					; 3
		dc.b $34					; 4
		dc.b $36					; 5
		dc.b $38					; 6
		dc.b $3A					; 7
		dc.b $3C					; 8
		dc.b $3E					; 9
		dc.b   0					; 10
		dc.b   0					; 11
; ===========================================================================

loc_3E1AA:				
		movea.l	(a1)+,a2
		moveq	#0,d0
		move.b	$1B(a0),d0
		move.b	(a1,d0.w),d0
		move.b	d0,d1
		moveq	#0,d4
		andi.w	#$C0,d1	
		beq.s	loc_3E1C4
		bsr.w	loc_3E23E

loc_3E1C4:				
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.b	(a2)+,d0
		move.b	(a2)+,d3
		move.b	$1F(a0),d2
		addq.b	#1,d2
		cmp.b	d3,d2
		bcs.s	loc_3E1DE
		addq.b	#1,$1B(a0)
		moveq	#0,d2

loc_3E1DE:				
		move.b	d2,$1F(a0)
		moveq	#0,d5

loc_3E1E4:				
		move.b	(a2)+,d5
		movea.w	(a0,d5.w),a3
		tst.w	d5
		bne.s	loc_3E1F0
		movea.l	a0,a3

loc_3E1F0:				
		move.l	ost_x_pos(a3),d2
		move.b	(a2)+,d1
		ext.w	d1
		asl.w	#4,d1
		btst	#render_xflip_bit,ost_render(a0)

loc_3E200:
		beq.s	loc_3E204
		neg.w	d1

loc_3E204:				
		tst.w	d4
		beq.s	loc_3E20A

loc_3E208:
		neg.w	d1

loc_3E20A:				
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d2
		move.l	d2,ost_x_pos(a3)
		move.l	ost_y_pos(a3),d3
		move.b	(a2)+,d1
		ext.w	d1
		asl.w	#4,d1
		tst.w	d4
		beq.s	loc_3E224
		neg.w	d1

loc_3E224:				
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d3
		move.l	d3,ost_y_pos(a3)
		dbf	d0,loc_3E1E4
		moveq	#0,d1
		rts	
; ===========================================================================

loc_3E236:				
		clr.b	$1B(a0)
		moveq	#1,d1

locret_3E23C:				
		rts	
; ===========================================================================

loc_3E23E:				
		andi.b	#$3F,d0
		rol.b	#3,d1
		move.w	loc_3E248+2(pc,d1.w),d1

loc_3E248:
		jmp	off_3E24C(pc,d1.w)
; ===========================================================================
off_3E24C:	
		dc.w loc_3E252-off_3E24C			; 0 
		dc.w loc_3E27A-off_3E24C			; 1
		dc.w loc_3E27E-off_3E24C			; 2
; ===========================================================================

loc_3E252:				
		tst.b	$1F(a0)
		bne.s	locret_3E23C
		move.b	$1B(a0),d1
		addq.b	#1,d1
		move.b	(a1,d1.w),d0
		jsrto	PlaySound,JmpTo12_PlaySound
		addq.b	#1,d1
		move.b	d1,$1B(a0)
		move.b	(a1,d1.w),d0
		move.b	d0,d1
		andi.b	#-$40,d1
		bne.s	loc_3E23E
		rts	
; ===========================================================================

loc_3E27A:				
		moveq	#1,d4
		rts	
; ===========================================================================

loc_3E27E:				
		addq.w	#4,sp
		bra.s	loc_3E236
; ===========================================================================

loc_3E282:				
		movea.w	$2C(a0),a2
		move.w	ost_x_pos(a2),d0
		move.w	(a1)+,d1
		btst	#render_xflip_bit,ost_render(a2)
		beq.s	loc_3E296
		neg.w	d1

loc_3E296:				
		add.w	d1,d0
		move.w	d0,ost_x_pos(a0)
		move.w	ost_y_pos(a2),d0
		add.w	(a1)+,d0
		move.w	d0,ost_y_pos(a0)
		rts	
; ===========================================================================

loc_3E2A8:				
		moveq	#0,d0
		moveq	#0,d6
		move.b	(a1)+,d6

loc_3E2AE:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a2
		move.w	ost_x_pos(a0),d1
		move.b	(a1)+,d2
		ext.w	d2
		btst	#render_xflip_bit,ost_render(a0)
		beq.s	loc_3E2C6
		neg.w	d2

loc_3E2C6:				
		add.w	d2,d1
		move.w	d1,ost_x_pos(a2)
		move.w	ost_y_pos(a0),d1
		move.b	(a1)+,d2
		ext.w	d2
		add.w	d2,d1
		move.w	d1,ost_y_pos(a2)
		dbf	d6,loc_3E2AE
		rts	
; ===========================================================================
byte_3E2E0:	dc.b   6					; 0 
		dc.b $2E					; 1
		dc.b $FC					; 2
		dc.b $3C					; 3
		dc.b $30					; 4
		dc.b $F4					; 5
		dc.b   8					; 6
		dc.b $32					; 7
		dc.b  $C					; 8
		dc.b $F8					; 9
		dc.b $34					; 10
		dc.b   4					; 11
		dc.b $24					; 12
		dc.b $3A					; 13
		dc.b $FC					; 14
		dc.b $3C					; 15
		dc.b $3C					; 16
		dc.b $F4					; 17
		dc.b   8					; 18
		dc.b $3E					; 19
		dc.b   4					; 20
		dc.b $24					; 21
off_3E2F6:	dc.l Map_3E318					; 0 
		dc.w 1
		dc.w $203
		dc.w $FF00
off_3E300:	dc.l Map_3E318					; 0 
		dc.w $506
		dc.w $708
		dc.w $FF00
off_3E30A:	dc.l Map_3E318					; 0 
		dc.w 1
		dc.w $203
		dc.w $405
		dc.w $607
		dc.w $8C0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3E318:				
		dc.w byte_3E32A-Map_3E318			; 0
		dc.w byte_3E33E-Map_3E318			; 1
		dc.w byte_3E352-Map_3E318			; 2
		dc.w byte_3E366-Map_3E318			; 3
		dc.w byte_3E37A-Map_3E318			; 4
		dc.w byte_3E380-Map_3E318			; 5
		dc.w byte_3E394-Map_3E318			; 6
		dc.w byte_3E3A8-Map_3E318			; 7
		dc.w byte_3E3BC-Map_3E318			; 8
byte_3E32A:	dc.b   5,  8,  0,$E0, $C,$30,$E0, $C,$32,$E0, $C,$3C,$E0, $C,$34,$F8 ; 0
					
		dc.b   4,$3E,$F8,  4				; 16
byte_3E33E:	dc.b   5,  8,  0,$EC,$14,$30,$EC,$14,$32,$EC,$14,$3C,$EC,$14,$34,$FA ; 0
					
		dc.b   6,$3E,$FA,  6				; 16
byte_3E352:	dc.b   5,  8,  0,$F8,$14,$30,$F8,$14,$32,$F8,$14,$3C,$F8,$14,$34,$FE ; 0
					
		dc.b   4,$3E,$FE,  4				; 16
byte_3E366:	dc.b   5,  8,  0,$FC, $C,$30,$FC, $C,$32,$FC, $C,$3C,$FC, $C,$34,  0 ; 0
					
		dc.b   2,$3E,  0,  2				; 16
byte_3E37A:	dc.b   0,  8,  0,  0,  0,  0			; 0	
byte_3E380:	dc.b   5,  8,  0,  4,$E8,$30,  4,$E8,$32,  4,$E8,$3C,  4,$E8,$34,  2 ; 0
					
		dc.b $FA,$3E,  2,$FA				; 16
byte_3E394:	dc.b   5,  8,  0, $C,$E8,$30, $C,$E8,$32, $C,$E8,$3C, $C,$E8,$34,  4 ; 0
					
		dc.b $FC,$3E,  4,$FC				; 16
byte_3E3A8:	dc.b   5,  8,  0,$18,$F4,$30,$18,$F4,$32,$18,$F4,$3C,$18,$F4,$34,  4 ; 0
					
		dc.b $FC,$3E,  4,$FC				; 16
byte_3E3BC:	dc.b   5,  8,  0,$18,$FC,$30,$18,$FC,$32,$18,$FC,$3C,$18,$FC,$34,  6 ; 0
					
		dc.b $FE,$3E,  6,$FE				; 16
off_3E3D0:	dc.l Map_3E3D8					; 0 
		dc.w 1
		dc.w $2C0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3E3D8:				
		dc.w byte_3E3DE-Map_3E3D8			; 0
		dc.w byte_3E3F2-Map_3E3D8			; 1
		dc.w byte_3E3F8-Map_3E3D8			; 2
byte_3E3DE:	dc.b   5,$10,  0,  0,  4,$30,  0,  4,$32,  0,  4,$3C,  0,  4,$34,  0 ; 0
					
		dc.b   4,$3E,  0,  4				; 16
byte_3E3F2:	dc.b   0,$10,  0,  0,  0,  0			; 0	
byte_3E3F8:	dc.b   5,  8,  0,  0,$F8,$30,  0,$F8,$32,  0,$F8,$3C,  0,$F8,$34,  0 ; 0
					
		dc.b $F8,$3E,  0,$F8				; 16
off_3E40C:	dc.l Map_3E438					; 0 
		dc.b   0,  1,  2,  3,$40,$BD,  4,  5,  6,  7,  8,$40,$BD,  9, $A,  1 ; 0
		dc.b   2,  3,$40,$BD,  4,  5,  6,  7,  8,$40,$BD,$C0 ; 16
off_3E42C:	dc.l Map_3E438					; 0 
		dc.w $8887
		dc.w $8685
		dc.w $B40
		dc.w $BDC0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3E438:				
		dc.w byte_3E450-Map_3E438			; 0
		dc.w byte_3E468-Map_3E438			; 1
		dc.w byte_3E480-Map_3E438			; 2
		dc.w byte_3E494-Map_3E438			; 3
		dc.w byte_3E4AC-Map_3E438			; 4
		dc.w byte_3E4C4-Map_3E438			; 5
		dc.w byte_3E4D6-Map_3E438			; 6
		dc.w byte_3E4EE-Map_3E438			; 7
		dc.w byte_3E502-Map_3E438			; 8
		dc.w byte_3E51A-Map_3E438			; 9
		dc.w byte_3E532-Map_3E438			; 10
		dc.w byte_3E544-Map_3E438			; 11
byte_3E450:	dc.b   6,$20,$34,$F8,$F8,$2E,$F8,$F8,  0,  0,$FC,$30,  4,$FB,$32,  3 ; 0
					
		dc.b $FB,$3C,$FC,$FB,$3E,  0,$FE,  0		; 16
byte_3E468:	dc.b   6,$10,$34,$F0,$FC,$2E,$F0,$FC,  0,$F0,$FC,$30,$F4,$FB,$32,$F3 ; 0
					
		dc.b $FB,$3C,$EC,$FB,$3E,$F8,  0,  0		; 16
byte_3E480:	dc.b   5,$10,$34,$F8,  4,$2E,$F8,  4,  0,$F8,  4,$30,$FC,  3,$32,$FB ; 0
					
		dc.b   3,$3C,$F4,  3				; 16
byte_3E494:	dc.b   6,$10,$34,$FC,$10,$2E,$F8,$10,  0,  0,  8,$30,$F8, $A,$32,$FA ; 0
					
		dc.b  $A,$3C,  8, $A,$3E,  0,  8,  0		; 16
byte_3E4AC:	dc.b   6,$20,$34,$FE,$FE,  0,$F4,$FC,$30,$F0,$FD,$32,$F1,$FD,$3C,$F8 ; 0
					
		dc.b $FD,$3E,$EC,$FA,$3A,$E8,$FC,  0		; 16
byte_3E4C4:	dc.b   4,$20,$3E,$F8,$FC,$3A,$F8,$FC,$30,$FC,$FF,$32,$FD,$FF,$3C,  4 ; 0
					
		dc.b $FF,  0					; 16
byte_3E4D6:	dc.b   6,$10,$3E,$F0,$FC,$3A,$F0,$FC,  0,$F0,$FC,$30,$EC,$FB,$32,$ED ; 0
					
		dc.b $FB,$3C,$F4,$FB,$34,$F8,  0,  0		; 16
byte_3E4EE:	dc.b   5,$10,$3E,$F8,  4,$3A,$F8,  4,  0,$F8,  4,$30,$F4,  3,$32,$F5 ; 0
					
		dc.b   3,$3C,$FC,  3				; 16
byte_3E502:	dc.b   6,$10,$3E,$FC,$10,$3A,$F8,$10,  0,  0,  8,$30,  8, $A,$32,  6 ; 0
					
		dc.b  $A,$3C,$F8, $A,$34,  0,  8,  0		; 16
byte_3E51A:	dc.b   6,$20,$3E,$FE,$FE,  0,$F4,$FC,$30,$F8,$FD,$32,$F7,$FD,$3C,$F1 ; 0
					
		dc.b $FD,$34,$EC,$FA,$2E,$E8,$FC,  0		; 16
byte_3E532:	dc.b   4,$20,$34,$F8,$FC,$2E,$F8,$FC,$30,  4,$FF,$32,  3,$FF,$3C,$FC ; 0
					
		dc.b $FF,  0					; 16
byte_3E544:	dc.b   6,$10,$3E,  0,  8,$3A,  0,  8,  0,  0,  8,$30,  0,  8,$32,  0 ; 0
					
		dc.b   8,$3C,  0,  8,$34,  0,  8,  0		; 16
byte_3E55C:	dc.b   0					; 0 
		dc.b $2C					; 1
		dc.b $C7					; 2
		dc.b   4					; 3
byte_3E560:	dc.b   0					; 0 
		dc.b $2E					; 1
		dc.b $C7					; 2
		dc.b   6					; 3
byte_3E564:	dc.b   0					; 0 
		dc.b $30					; 1
		dc.b $C7					; 2
		dc.b   8					; 3
byte_3E568:	dc.b   0					; 0 
		dc.b $32					; 1
		dc.b $C7					; 2
		dc.b  $A					; 3
byte_3E56C:	dc.b   0					; 0 
		dc.b $34					; 1
		dc.b $C7					; 2
		dc.b  $C					; 3
byte_3E570:	dc.b   0					; 0 
		dc.b $36					; 1
		dc.b $C7					; 2
		dc.b  $E					; 3
byte_3E574:	dc.b   0					; 0 
		dc.b $38					; 1
		dc.b $C7					; 2
		dc.b $10					; 3
byte_3E578:	dc.b   0					; 0 
		dc.b $3A					; 1
		dc.b $C7					; 2
		dc.b $12					; 3
byte_3E57C:	dc.b   0					; 0 
		dc.b $3C					; 1
		dc.b $C7					; 2
		dc.b $14					; 3
byte_3E580:	dc.b   0					; 0 
		dc.b $3E					; 1
		dc.b $C7					; 2
		dc.b $16					; 3
byte_3E584:	dc.b   0					; 0 
		dc.b $10					; 1
		dc.b $C7					; 2
		dc.b $18					; 3
byte_3E588:	dc.b   0					; 0 
		dc.b $10					; 1
		dc.b $C7					; 2
		dc.b $1A					; 3
byte_3E58C:	dc.b   0					; 0 
		dc.b $10					; 1
		dc.b $C7					; 2
		dc.b $1C					; 3
off_3E590:	dc.l Art_3E5F8					; 0 
		dc.w $330
		dc.w $404
		dc.w $3800
off_3E59A:	dc.w byte_3E59C-off_3E59A 
byte_3E59C:	dc.b   7,$15,$15,$15,$15,$15,$15,$15,$15,  0,  1,  2,$FA,  0 ; 0
					
off_3E5AA:	dc.w byte_3E5B2-off_3E5AA			; 0 
		dc.w byte_3E5B6-off_3E5AA			; 1
		dc.w byte_3E5D0-off_3E5AA			; 2
		dc.w byte_3E5EA-off_3E5AA			; 3
byte_3E5B2:	dc.b   1, $C, $D,$FF				; 0 
byte_3E5B6:	dc.b   1, $C, $D, $C, $C, $D, $D, $C, $C, $C, $D, $D, $D, $C, $C, $C ; 0
					
		dc.b  $C, $C, $D, $D, $D, $D, $D, $D,$FA,  0	; 16
byte_3E5D0:	dc.b   1, $D, $D, $D, $D, $D, $D, $C, $C, $C, $C, $C, $D, $D, $D, $C ; 0
					
		dc.b  $C, $C, $D, $D, $C, $C, $D, $C,$FD,  0	; 16
byte_3E5EA:	dc.b   0, $D,$15,$FF				; 0 
off_3E5EE:	dc.w byte_3E5F0-off_3E5EE 
byte_3E5F0:	dc.b   3,$13,$12,$11,$10,$16,$FF,  0		; 0	
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Art_3E5F8:				
		dc.w word_3E626-Art_3E5F8			; 0
		dc.w word_3E630-Art_3E5F8			; 1
		dc.w word_3E64A-Art_3E5F8			; 2
		dc.w word_3E664-Art_3E5F8			; 3
		dc.w word_3E6B6-Art_3E5F8			; 4
		dc.w word_3E6C0-Art_3E5F8			; 5
		dc.w word_3E6CA-Art_3E5F8			; 6
		dc.w word_3E6DC-Art_3E5F8			; 7
		dc.w word_3E6DC-Art_3E5F8			; 8
		dc.w word_3E6DC-Art_3E5F8			; 9
		dc.w word_3E6DC-Art_3E5F8			; 10
		dc.w word_3E6E6-Art_3E5F8			; 11
		dc.w word_3E718-Art_3E5F8			; 12
		dc.w word_3E722-Art_3E5F8			; 13
		dc.w word_3E72C-Art_3E5F8			; 14
		dc.w word_3E736-Art_3E5F8			; 15
		dc.w word_3E740-Art_3E5F8			; 16
		dc.w word_3E782-Art_3E5F8			; 17
		dc.w word_3E7C4-Art_3E5F8			; 18
		dc.w word_3E806-Art_3E5F8			; 19
		dc.w word_3E848-Art_3E5F8			; 20
		dc.w word_3E852-Art_3E5F8			; 21
		dc.w word_3E85C-Art_3E5F8			; 22
word_3E626:	dc.w 1			
		dc.w $F00B,    0,    0,	  $C			; 0
word_3E630:	dc.w 3			
		dc.w $F00D,   $C,    6,$FFEC			; 0
		dc.w	 9,  $14,   $A,$FFF4			; 4
		dc.w $F80A,  $1A,   $D,	  $C			; 8
word_3E64A:	dc.w 3			
		dc.w  $800,  $23,  $11,$FFDC			; 0
		dc.w $F80E,  $24,  $12,$FFE4			; 4
		dc.w $F80E,  $30,  $18,	   4			; 8
word_3E664:	dc.w $A			
		dc.w $DC0F,$203C,$201E,$FFD4			; 0
		dc.w $DC0F,$204C,$2026,$FFF4			; 4
		dc.w $DC0B,$205C,$202E,	 $14			; 8
		dc.w $DC0B,$2068,$2034,	 $2C			; 12
		dc.w $FC0F,$2074,$203A,$FFD4			; 16
		dc.w $FC0F,$2084,$2042,$FFF4			; 20
		dc.w $FC0B,$2094,$204A,	 $14			; 24
		dc.w $FC09,$20A0,$2050,	 $2C			; 28
		dc.w $1C0C,$20A6,$2053,$FFE4			; 32
		dc.w $1C0C,$20AA,$2055,	   4			; 36
word_3E6B6:	dc.w 1			
		dc.w $F00F,$20AE,$2057,$FFF0			; 0
word_3E6C0:	dc.w 1			
		dc.w $F40A,$20BE,$205F,$FFF4			; 0
word_3E6CA:	dc.w 2			
		dc.w $F40E,$20C7,$2063,	   0			; 0
		dc.w $F40E,$20D3,$2069,$FFE0			; 4
word_3E6DC:	dc.w 1			
		dc.w $F00F,$20E2,$2071,$FFF0			; 0
word_3E6E6:	dc.w 6			
word_3E6E8:	dc.w $E006,$20F2,$2079,$FFEB			; 0
		dc.w $E809,$20F8,$207C,$FFFB			; 4
		dc.w $F806,$20FE,$207F,$FFEE			; 8
		dc.w $100D,$2104,$2082,$FFE0			; 12
		dc.w $F80E,$210C,$2086,$FFFE			; 16
		dc.w $100D,$2118,$208C,	   0			; 20
word_3E718:	dc.w 1			
		dc.w $F406,$2120,$2090,$FFF8			; 0
word_3E722:	dc.w 1			
		dc.w $F405,$2126,$2093,$FFF8			; 0
word_3E72C:	dc.w 1			
		dc.w $F00F, $12B,  $95,$FFF0			; 0
word_3E736:	dc.w 1			
		dc.w $FC00, $13B,  $9D,$FFFC			; 0
word_3E740:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0			; 0
		dc.w $F005,$293C,$289E,	   0			; 4
		dc.w	 5,$313C,$309E,$FFF0			; 8
		dc.w	 5,$393C,$389E,	   0			; 12
		dc.w $E000,$2144,$20A2,$FFE0			; 16
		dc.w $E000,$2944,$28A2,	 $18			; 20
		dc.w $1800,$3144,$30A2,$FFE0			; 24
		dc.w $1800,$3944,$38A2,	 $18			; 28
word_3E782:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0			; 0
		dc.w $F005,$293C,$289E,	   0			; 4
		dc.w	 5,$313C,$309E,$FFF0			; 8
		dc.w	 5,$393C,$389E,	   0			; 12
		dc.w $D800,$2145,$20A2,$FFD8			; 16
		dc.w $D800,$2945,$28A2,	 $20			; 20
		dc.w $2000,$3145,$30A2,$FFD8			; 24
		dc.w $2000,$3945,$38A2,	 $20			; 28
word_3E7C4:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0			; 0
		dc.w $F005,$293C,$289E,	   0			; 4
		dc.w	 5,$313C,$309E,$FFF0			; 8
		dc.w	 5,$393C,$389E,	   0			; 12
		dc.w $D000,$2146,$20A3,$FFD0			; 16
		dc.w $D000,$2946,$28A3,	 $28			; 20
		dc.w $2800,$3146,$30A3,$FFD0			; 24
		dc.w $2800,$3946,$38A3,	 $28			; 28
word_3E806:	dc.w 8			
word_3E808:	dc.w $F005,$213C,$209E,$FFF0			; 0
		dc.w $F005,$293C,$289E,	   0			; 4
		dc.w	 5,$313C,$309E,$FFF0			; 8
		dc.w	 5,$393C,$389E,	   0			; 12
		dc.w $C800,$212A,$2095,$FFC8			; 16
		dc.w $C800,$292A,$2895,	 $30			; 20
		dc.w $3000,$312A,$3095,$FFC8			; 24
		dc.w $3000,$392A,$3895,	 $30			; 28
word_3E848:	dc.w 1			
		dc.w $F805, $140,  $A0,$FFF8			; 0
word_3E852:	dc.w 1			
		dc.w	 0,    4,    2,	   0			; 0
word_3E85C:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0			; 0
		dc.w $F005,$293C,$289E,	   0			; 4
		dc.w	 5,$313C,$309E,$FFF0			; 8
		dc.w	 5,$393C,$389E,	   0			; 12
		dc.w $E800,$2144,$20A2,$FFE8			; 16
		dc.w $E800,$2944,$28A2,	 $10			; 20
		dc.w $1000,$3144,$30A2,$FFE8			; 24
		dc.w $1000,$3944,$38A2,	 $10			; 28
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to upscale graphics by a factor of 2x, based on given mappings
; data for correct positioning of tiles.

; This code is awfully structured and planned: whenever a 3-column sprite piece
; is scaled, it scales the next tiles that were copied to RAM as if the piece
; had 4 columns; this will then be promptly overwritten by the next piece. If
; this happens near the end of the buffer, you will get a buffer overrun.
; Moreover, when the number of rows in the sprite piece is also 3 or 4, the code
; will make an incorrect computation for the output of the next subpiece, which
; causes the output to overwrite art from the previous subpiece. Thus, this code
; fails if there is a 3x3 or a 3x4 sprite piece in the source mappings. Sadly,
; this issue is basically unfixable without rewriting the code entirely.

; input:
; 	a1 = location of tiles to be enlarged
; 	a2 = destination buffer for enlarged tiles
; 	d0 = width-1 of sprite piece
; 	d1 = height-1 of sprite piece

;	uses d0.w, d1.w, d2.w, d3.w, d4.w, d5.w, a1, a2, a3, a4, a5
; ---------------------------------------------------------------------------

Scale_2x:				
		move.w	d1,d2
		andi.w	#1,d2
		addq.w	#1,d2
		lsl.w	#6,d2
		swap	d2
		move.w	d1,d3
		lsr.w	#1,d3
		addq.w	#1,d3
		lsl.w	#6,d3
		swap	d3
		bsr.w	loc_3E8CA
		btst	#1,d0
		beq.w	locret_37A48
		btst	#1,d1
		bne.s	loc_3E8C8
		movea.l	a3,a5

loc_3E8C8:				
		movea.l	a5,a2

loc_3E8CA:				
		movea.l	a2,a4
		swap	d2
		lea	(a2,d2.w),a3
		swap	d2
		move.w	d1,d5
		andi.w	#1,d5
		bsr.w	loc_3E944
		btst	#1,d1
		beq.s	loc_3E906
		swap	d2
		move.w	d2,d4
		swap	d2
		add.w	d4,d4
		move.w	d0,d3
		andi.w	#1,d3
		lsl.w	d3,d4
		adda.w	d4,a4
		move.w	d1,d5
		lsr.w	#1,d5
		swap	d3
		lea	(a4,d3.w),a5

loc_3E900:
		swap	d3
		bsr.w	loc_3E95C

loc_3E906:				
		btst	#0,d0

loc_3E90A:
		bne.s	loc_3E912
		btst	#1,d0
		beq.s	locret_3E942

loc_3E912:				
		swap	d2
		lea	(a2,d2.w),a2
		lea	(a2,d2.w),a3
		swap	d2
		move.w	d1,d5
		andi.w	#1,d5
		bsr.w	loc_3E944
		btst	#1,d1
		beq.s	locret_3E942
		move.w	d1,d5
		lsr.w	#1,d5
		swap	d3
		lea	(a4,d3.w),a4
		lea	(a4,d3.w),a5
		swap	d3
		bsr.w	loc_3E95C

locret_3E942:				
		rts	
; ===========================================================================

loc_3E944:				
		moveq	#7,d6

loc_3E946:				
		bsr.w	loc_3E974
		addq.w	#4,a2
		bsr.w	loc_3E99E
		addq.w	#4,a3
		dbf	d6,loc_3E946
		dbf	d5,loc_3E944
		rts	
; ===========================================================================

loc_3E95C:				
		moveq	#7,d6

loc_3E95E:				
		bsr.w	loc_3E9C8
		addq.w	#4,a4
		bsr.w	loc_3E9F2
		addq.w	#4,a5
		dbf	d6,loc_3E95E
		dbf	d5,loc_3E95C
		rts	
; ===========================================================================

loc_3E974:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a2)+
		move.b	d4,3(a2)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a2)+
		move.b	d4,3(a2)
		rts	
; ===========================================================================

loc_3E99E:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a3)+
		move.b	d4,3(a3)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a3)+
		move.b	d4,3(a3)
		rts	
; ===========================================================================

loc_3E9C8:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a4)+
		move.b	d4,3(a4)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a4)+
		move.b	d4,3(a4)
		rts	
; ===========================================================================

loc_3E9F2:				
		bsr.w	*+4
		
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a5)+
		move.b	d4,3(a5)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a5)+
		move.b	d4,3(a5)
		rts	
; ===========================================================================
		; unused data for something...
		dc.b $12,$34,$56,$78				; 0
		dc.b $12,$34,$56,$78				; 4
		dc.b $12,$34,$56,$78				; 8
		dc.b $12,$34,$56,$78				; 12
		dc.b $12,$34,$56,$78				; 16
		dc.b $12,$34,$56,$78				; 20
		dc.b $12,$34,$56,$78				; 24
		dc.b $12,$34,$56,$78				; 28
; ===========================================================================

	if RemoveJmpTos=0
JmpTo5_DisplaySprite3:				
		jmp	DisplaySprite3
JmpTo45_DisplaySprite:				
		jmp	DisplaySprite
JmpTo65_DeleteObject:				
		jmp	DeleteObject
JmpTo19_FindFreeObj:				
		jmp	FindFreeObj
JmpTo39_DespawnObject:				
		jmp	DespawnObject
JmpTo6_DeleteChild:				
		jmp	DeleteChild
JmpTo12_PlaySound:				
		jmp	PlaySound
JmpTo25_FindNextFreeObj:				
		jmp	FindNextFreeObj
JmpTo25_AnimateSprite:				
		jmp	AnimateSprite
JmpTo_PlaySoundLocal:				
		jmp	PlaySoundLocal
JmpTo6_RandomNumber:				
		jmp	RandomNumber
JmpTo2_DespawnObject_P1:				
		jmp	DespawnObject_P1
JmpTo_WhiteOut_AddColor:				
		jmp	WhiteOut_AddColor
JmpTo_Tails_LoadGFX_2:				
		jmp	Tails_LoadGFX_2
JmpTo_Sonic_LoadGFX_2:				
		jmp	Sonic_LoadGFX_2
JmpTo8_DespawnObject3:				
		jmp	DespawnObject3
JmpTo64_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
JmpTo5_PlayMusic:				
		jmp	PlayMusic
JmpTo_BossExplode:				
		jmp	BossExplode
JmpTo9_DetectPlatform:				
		jmp	DetectPlatform
JmpTo27_SolidObject:				
		jmp	SolidObject
JmpTo8_ObjectFall:				
		jmp	ObjectFall
JmpTo26_SpeedToPos:				
		jmp	SpeedToPos

		align 4
	endc		
		
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 8A - Sonic Team Presents/Credits (unused leftover from S1)
; ----------------------------------------------------------------------------

S1_STP_Credits:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3EAD6(pc,d0.w),d1
		jmp	off_3EAD6(pc,d1.w)
; ===========================================================================
off_3EAD6:	
		dc.w loc_3EADA-off_3EAD6			; 0 
		dc.w loc_3EB48-off_3EAD6			; 1
; ===========================================================================

loc_3EADA:				
		addq.b	#2,ost_primary_routine(a0)
		move.w	#screen_left+160,ost_x_screen(a0)
		move.w	#screen_top+112,ost_y_screen(a0)
		move.l	#Map_3EB4E,ost_mappings(a0)
		move.w	#vram_S1Credits/sizeof_cell,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo65_Adjust2PArtPointer
		move.w	(v_s1_ending_demo_num).w,d0
		move.b	d0,$1A(a0)
		move.b	#render_abs,ost_render(a0)
		move.b	#0,$18(a0)
		cmpi.b	#4,(v_gamemode).w
		bne.s	loc_3EB48
		move.w	#vram_S1Title_Credits/sizeof_cell,ost_tile(a0)
		jsrto	Adjust2PArtPointer,JmpTo65_Adjust2PArtPointer
		move.b	#$A,$1A(a0)
		tst.b	(f_s1_credits_cheat).w
		beq.s	loc_3EB48
		cmpi.b	#$72,(v_joypad_hold_actual).w
		bne.s	loc_3EB48
		move.w	#cWhite,($FFFFFBC0).w
		move.w	#$880,($FFFFFBC2).w
		jmp	DeleteObject
; ===========================================================================

loc_3EB48:				
		jmp	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3EB4E:				
		dc.w word_3EB64-Map_3EB4E			; 0
		dc.w word_3EBD6-Map_3EB4E			; 1
		dc.w word_3EC58-Map_3EB4E			; 2
		dc.w word_3ECAA-Map_3EB4E			; 3
		dc.w word_3ED6C-Map_3EB4E			; 4
		dc.w word_3EE0E-Map_3EB4E			; 5
		dc.w word_3EEE0-Map_3EB4E			; 6
		dc.w word_3EF9A-Map_3EB4E			; 7
		dc.w word_3F094-Map_3EB4E			; 8
		dc.w word_3F10E-Map_3EB4E			; 9
		dc.w word_3F150-Map_3EB4E			; 10
word_3EB64:	dc.w $E			
		dc.w $F805,  $2E,  $17,$FF88			; 0
		dc.w $F805,  $26,  $13,$FF98			; 4
		dc.w $F805,  $1A,   $D,$FFA8			; 8
		dc.w $F801,  $46,  $23,$FFB8			; 12
		dc.w $F805,  $1E,   $F,$FFC0			; 16
		dc.w $F805,  $3E,  $1F,$FFD8			; 20
		dc.w $F805,   $E,    7,$FFE8			; 24
		dc.w $F805,    4,    2,$FFF8			; 28
		dc.w $F809,    8,    4,	   8			; 32
		dc.w $F805,  $2E,  $17,	 $28			; 36
		dc.w $F805,  $3E,  $1F,	 $38			; 40
		dc.w $F805,    4,    2,	 $48			; 44
		dc.w $F805,  $5C,  $2E,	 $58			; 48
		dc.w $F805,  $5C,  $2E,	 $68			; 52
word_3EBD6:	dc.w $10		
word_3EBD8:	dc.w $D805,    0,    0,$FF80			; 0
		dc.w $D805,    4,    2,$FF90			; 4
		dc.w $D809,    8,    4,$FFA0			; 8
		dc.w $D805,   $E,    7,$FFB4			; 12
		dc.w $D805,  $12,    9,$FFD0			; 16
		dc.w $D805,  $16,   $B,$FFE0			; 20
		dc.w $D805,    4,    2,$FFF0			; 24
		dc.w $D805,  $1A,   $D,	   0			; 28
		dc.w  $805,  $1E,   $F,$FFC8			; 32
		dc.w  $805,    4,    2,$FFD8			; 36
		dc.w  $805,  $22,  $11,$FFE8			; 40
		dc.w  $805,  $26,  $13,$FFF8			; 44
		dc.w  $805,  $16,   $B,	   8			; 48
		dc.w  $805,  $2A,  $15,	 $20			; 52
		dc.w  $805,    4,    2,	 $30			; 56
		dc.w  $805,  $2E,  $17,	 $44			; 60
word_3EC58:	dc.w $A			
		dc.w $D805,  $12,    9,$FF80			; 0
		dc.w $D805,  $22,  $11,$FF90			; 4
		dc.w $D805,  $26,  $13,$FFA0			; 8
		dc.w $D805,    0,    0,$FFB0			; 12
		dc.w $D805,  $22,  $11,$FFC0			; 16
		dc.w $D805,    4,    2,$FFD0			; 20
		dc.w $D809,    8,    4,$FFE0			; 24
		dc.w  $805,  $2A,  $15,$FFE8			; 28
		dc.w  $805,  $32,  $19,$FFF8			; 32
		dc.w  $805,  $36,  $1B,	   8			; 36
word_3ECAA:	dc.w $18		
word_3ECAC:	dc.w $D805,  $1E,   $F,$FF88			; 0
		dc.w $D805,  $3A,  $1D,$FF98			; 4
		dc.w $D805,    4,    2,$FFA8			; 8
		dc.w $D805,  $22,  $11,$FFB8			; 12
		dc.w $D805,    4,    2,$FFC8			; 16
		dc.w $D805,  $1E,   $F,$FFD8			; 20
		dc.w $D805,  $3E,  $1F,$FFE8			; 24
		dc.w $D805,   $E,    7,$FFF8			; 28
		dc.w $D805,  $22,  $11,	   8			; 32
		dc.w $D805,  $42,  $21,	 $20			; 36
		dc.w $D805,   $E,    7,	 $30			; 40
		dc.w $D805,  $2E,  $17,	 $40			; 44
		dc.w $D801,  $46,  $23,	 $50			; 48
		dc.w $D805,    0,    0,	 $58			; 52
		dc.w $D805,  $1A,   $D,	 $68			; 56
		dc.w  $805,  $48,  $24,$FFC0			; 60
		dc.w  $801,  $46,  $23,$FFD0			; 64
		dc.w  $805,    0,    0,$FFD8			; 68
		dc.w  $801,  $46,  $23,$FFE8			; 72
		dc.w  $805,  $2E,  $17,$FFF0			; 76
		dc.w  $805,  $16,   $B,	   0			; 80
		dc.w  $805,    4,    2,	 $10			; 84
		dc.w  $805,  $1A,   $D,	 $20			; 88
		dc.w  $805,  $42,  $21,	 $30			; 92
word_3ED6C:	dc.w $14		
		dc.w $D005,  $42,  $21,$FFA0			; 0
		dc.w $D005,   $E,    7,$FFB0			; 4
		dc.w $D005,  $2E,  $17,$FFC0			; 8
		dc.w $D001,  $46,  $23,$FFD0			; 12
		dc.w $D005,    0,    0,$FFD8			; 16
		dc.w $D005,  $1A,   $D,$FFE8			; 20
		dc.w	 5,  $4C,  $26,$FFE8			; 24
		dc.w	 1,  $46,  $23,$FFF8			; 28
		dc.w	 5,  $1A,   $D,	   4			; 32
		dc.w	 5,  $2A,  $15,	 $14			; 36
		dc.w	 5,    4,    2,	 $24			; 40
		dc.w $2005,  $12,    9,$FFD0			; 44
		dc.w $2005,  $3A,  $1D,$FFE0			; 48
		dc.w $2005,   $E,    7,$FFF0			; 52
		dc.w $2005,  $1A,   $D,	   0			; 56
		dc.w $2001,  $46,  $23,	 $10			; 60
		dc.w $2005,  $50,  $28,	 $18			; 64
		dc.w $2005,  $22,  $11,	 $30			; 68
		dc.w $2001,  $46,  $23,	 $40			; 72
		dc.w $2005,   $E,    7,	 $48			; 76
word_3EE0E:	dc.w $1A		
		dc.w $D805,  $2E,  $17,$FF98			; 0
		dc.w $D805,  $26,  $13,$FFA8			; 4
		dc.w $D805,  $32,  $19,$FFB8			; 8
		dc.w $D805,  $1A,   $D,$FFC8			; 12
		dc.w $D805,  $54,  $2A,$FFD8			; 16
		dc.w $D805,  $12,    9,$FFF8			; 20
		dc.w $D805,  $22,  $11,	   8			; 24
		dc.w $D805,  $26,  $13,	 $18			; 28
		dc.w $D805,  $42,  $21,	 $28			; 32
		dc.w $D805,  $32,  $19,	 $38			; 36
		dc.w $D805,  $1E,   $F,	 $48			; 40
		dc.w $D805,   $E,    7,	 $58			; 44
		dc.w  $809,    8,    4,$FF88			; 48
		dc.w  $805,    4,    2,$FF9C			; 52
		dc.w  $805,  $2E,  $17,$FFAC			; 56
		dc.w  $805,    4,    2,$FFBC			; 60
		dc.w  $805,  $3E,  $1F,$FFCC			; 64
		dc.w  $805,  $26,  $13,$FFDC			; 68
		dc.w  $805,  $1A,   $D,$FFF8			; 72
		dc.w  $805,    4,    2,	   8			; 76
		dc.w  $805,  $58,  $2C,	 $18			; 80
		dc.w  $805,    4,    2,	 $28			; 84
		dc.w  $809,    8,    4,	 $38			; 88
		dc.w  $805,  $32,  $19,	 $4C			; 92
		dc.w  $805,  $22,  $11,	 $5C			; 96
		dc.w  $805,    4,    2,	 $6C			; 100
word_3EEE0:	dc.w $17		
		dc.w $D005,  $2E,  $17,$FF98			; 0
		dc.w $D005,  $26,  $13,$FFA8			; 4
		dc.w $D005,  $32,  $19,$FFB8			; 8
		dc.w $D005,  $1A,   $D,$FFC8			; 12
		dc.w $D005,  $54,  $2A,$FFD8			; 16
		dc.w $D005,  $12,    9,$FFF8			; 20
		dc.w $D005,  $22,  $11,	   8			; 24
		dc.w $D005,  $26,  $13,	 $18			; 28
		dc.w $D005,    0,    0,	 $28			; 32
		dc.w $D005,  $22,  $11,	 $38			; 36
		dc.w $D005,    4,    2,	 $48			; 40
		dc.w $D009,    8,    4,	 $58			; 44
		dc.w	 5,  $4C,  $26,$FFD0			; 48
		dc.w	 1,  $46,  $23,$FFE0			; 52
		dc.w	 9,    8,    4,$FFE8			; 56
		dc.w	 1,  $46,  $23,$FFFC			; 60
		dc.w	 5,  $3E,  $1F,	   4			; 64
		dc.w	 5,    4,    2,	 $14			; 68
		dc.w $2009,    8,    4,$FFD0			; 72
		dc.w $2005,    4,    2,$FFE4			; 76
		dc.w $2005,  $1E,   $F,$FFF4			; 80
		dc.w $2005,  $58,  $2C,	   4			; 84
		dc.w $2005,  $2A,  $15,	 $14			; 88
word_3EF9A:	dc.w $1F		
word_3EF9C:	dc.w $D805,  $2E,  $17,$FF80			; 0
		dc.w $D805,  $12,    9,$FF90			; 4
		dc.w $D805,   $E,    7,$FFA0			; 8
		dc.w $D805,  $1E,   $F,$FFB0			; 12
		dc.w $D801,  $46,  $23,$FFC0			; 16
		dc.w $D805,    4,    2,$FFC8			; 20
		dc.w $D805,  $16,   $B,$FFD8			; 24
		dc.w $D805,  $3E,  $1F,$FFF8			; 28
		dc.w $D805,  $3A,  $1D,	   8			; 32
		dc.w $D805,    4,    2,	 $18			; 36
		dc.w $D805,  $1A,   $D,	 $28			; 40
		dc.w $D805,  $58,  $2C,	 $38			; 44
		dc.w $D805,  $2E,  $17,	 $48			; 48
		dc.w	 5,  $5C,  $2E,$FFB0			; 52
		dc.w	 5,  $32,  $19,$FFC0			; 56
		dc.w	 5,  $4C,  $26,$FFD0			; 60
		dc.w	 1,  $46,  $23,$FFE0			; 64
		dc.w	 5,  $26,  $13,$FFE8			; 68
		dc.w	 9,    8,    4,	   0			; 72
		dc.w	 1,  $46,  $23,	 $14			; 76
		dc.w	 5,  $1A,   $D,	 $1C			; 80
		dc.w	 5,   $E,    7,	 $2C			; 84
		dc.w	 5,    0,    0,	 $3C			; 88
		dc.w	 1,  $46,  $23,	 $4C			; 92
		dc.w	 5,  $2E,  $17,	 $54			; 96
		dc.w	 5,  $3A,  $1D,	 $64			; 100
		dc.w	 1,  $46,  $23,	 $74			; 104
		dc.w $2005,  $12,    9,$FFF8			; 108
		dc.w $2005,    4,    2,	   8			; 112
		dc.w $2005,  $12,    9,	 $18			; 116
		dc.w $2005,    4,    2,	 $28			; 120
word_3F094:	dc.w $F			
		dc.w $F805,  $12,    9,$FF80			; 0
		dc.w $F805,  $22,  $11,$FF90			; 4
		dc.w $F805,   $E,    7,$FFA0			; 8
		dc.w $F805,  $2E,  $17,$FFB0			; 12
		dc.w $F805,   $E,    7,$FFC0			; 16
		dc.w $F805,  $1A,   $D,$FFD0			; 20
		dc.w $F805,  $3E,  $1F,$FFE0			; 24
		dc.w $F805,   $E,    7,$FFF0			; 28
		dc.w $F805,  $42,  $21,	   0			; 32
		dc.w $F805,  $48,  $24,	 $18			; 36
		dc.w $F805,  $2A,  $15,	 $28			; 40
		dc.w $F805,  $2E,  $17,	 $40			; 44
		dc.w $F805,   $E,    7,	 $50			; 48
		dc.w $F805,    0,    0,	 $60			; 52
		dc.w $F805,    4,    2,	 $70			; 56
word_3F10E:	dc.w 8			
		dc.w $3005,  $3E,  $1F,$FFC0			; 0
		dc.w $3005,  $22,  $11,$FFD0			; 4
		dc.w $3005,  $2A,  $15,$FFE0			; 8
		dc.w $3005,    4,    2,$FFF8			; 12
		dc.w $3005,    0,    0,	   8			; 16
		dc.w $3005,    4,    2,	 $18			; 20
		dc.w $3001,  $46,  $23,	 $28			; 24
		dc.w $3005,  $1A,   $D,	 $30			; 28
word_3F150:	dc.w $11		
		dc.w $E805,  $2E,  $17,$FFB4			; 0
		dc.w $E805,  $26,  $13,$FFC4			; 4
		dc.w $E805,  $1A,   $D,$FFD4			; 8
		dc.w $E801,  $46,  $23,$FFE4			; 12
		dc.w $E805,  $1E,   $F,$FFEC			; 16
		dc.w $E805,  $3E,  $1F,	   4			; 20
		dc.w $E805,   $E,    7,	 $14			; 24
		dc.w $E805,    4,    2,	 $24			; 28
		dc.w $E809,    8,    4,	 $34			; 32
		dc.w	 5,  $12,    9,$FFC0			; 36
		dc.w	 5,  $22,  $11,$FFD0			; 40
		dc.w	 5,   $E,    7,$FFE0			; 44
		dc.w	 5,  $2E,  $17,$FFF0			; 48
		dc.w	 5,   $E,    7,	   0			; 52
		dc.w	 5,  $1A,   $D,	 $10			; 56
		dc.w	 5,  $3E,  $1F,	 $20			; 60
		dc.w	 5,  $2E,  $17,	 $30			; 64
; ===========================================================================

	if Revision<2	
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo65_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
	endc	
	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 3E - Egg prison
; ----------------------------------------------------------------------------

Prison:				
		moveq	#0,d0
		move.b	ost_primary_routine(a0),d0
		move.w	off_3F1F2(pc,d0.w),d1
		jmp	off_3F1F2(pc,d1.w)
; ===========================================================================
off_3F1F2:	dc.w loc_3F212-off_3F1F2			; 0 
		dc.w loc_3F278-off_3F1F2			; 1
		dc.w loc_3F354-off_3F1F2			; 2
		dc.w loc_3F38E-off_3F1F2			; 3
		dc.w loc_3F3A8-off_3F1F2			; 4
		dc.w loc_3F406-off_3F1F2			; 5
byte_3F1FE:	dc.b   0					; 0 
		dc.b   2					; 1
		dc.b $20					; 2
		dc.b   4					; 3
		dc.b   0					; 4
		dc.b $28					; 5
		dc.b   4					; 6
		dc.b $10					; 7
		dc.b   5					; 8
		dc.b   4					; 9
		dc.b $18					; 10
		dc.b   6					; 11
		dc.b   8					; 12
		dc.b   3					; 13
		dc.b   5					; 14
		dc.b   0					; 15
		dc.b   8					; 16
		dc.b $20					; 17
		dc.b   4					; 18
		dc.b   0					; 19
; ===========================================================================

loc_3F212:				
		movea.l	a0,a1
		lea	$38(a0),a3
		lea	byte_3F1FE(pc),a2
		moveq	#3,d1
		bra.s	loc_3F228
; ===========================================================================

loc_3F220:				
		jsrto	FindFreeObj,JmpTo20_FindFreeObj
		bne.s	loc_3F272
		move.w	a1,(a3)+

loc_3F228:				
		_move.b	ost_id(a0),ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	ost_y_pos(a0),$30(a1)
		move.l	#Map_3F436,ost_mappings(a1)
		move.w	#tile_Nem_Capsule+tile_pal2,ost_tile(a1)
		move.b	#render_rel|render_onscreen,ost_render(a1)
		moveq	#0,d0
		move.b	(a2)+,d0
		sub.w	d0,ost_y_pos(a1)
		move.w	ost_y_pos(a1),$30(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$19(a1)
		move.b	(a2)+,$18(a1)
		move.b	(a2)+,$1A(a1)

loc_3F272:				
		dbf	d1,loc_3F220
		rts	
; ===========================================================================

loc_3F278:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3F2AE(pc,d0.w),d1
		jsr	off_3F2AE(pc,d1.w)
		move.w	#$2B,d1
		move.w	#$18,d2
		move.w	#$18,d3
		move.w	ost_x_pos(a0),d4
		jsr	SolidObject
		lea	(off_3F428).l,a1
		jsr	AnimateSprite
		jmp	DespawnObject
; ===========================================================================
off_3F2AE:	
		dc.w loc_3F2B4-off_3F2AE			; 0 
		dc.w loc_3F2FC-off_3F2AE			; 1
		dc.w locret_3F352-off_3F2AE			; 2
; ===========================================================================

loc_3F2B4:				
		movea.w	$38(a0),a1
		tst.w	$32(a1)
		beq.s	locret_3F2FA
		movea.w	$3A(a0),a2
		jsr	FindFreeObj
		bne.s	loc_3F2E0
		_move.b	#id_ExplosionItem,ost_id(a1)
		addq.b	#2,$24(a1)
		move.w	ost_x_pos(a2),ost_x_pos(a1)
		move.w	ost_y_pos(a2),ost_y_pos(a1)

loc_3F2E0:				
		move.w	#-$400,ost_y_vel(a2)
		move.w	#$800,ost_x_vel(a2)
		addq.b	#2,$25(a2)
		move.w	#$1D,$34(a0)
		addq.b	#2,$25(a0)

locret_3F2FA:				
		rts	
; ===========================================================================

loc_3F2FC:				
		subq.w	#1,$34(a0)
		bpl.s	locret_3F352

loc_3F302:
		move.b	#1,$1C(a0)
		moveq	#7,d6

loc_3F30A:
		move.w	#$9A,d5	
		moveq	#-$1C,d4

loc_3F310:				
		jsr	FindFreeObj
		bne.s	loc_3F340
		_move.b	#id_Animals,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		add.w	d4,ost_x_pos(a1)
		move.b	#1,$38(a1)
		addq.w	#7,d4
		move.w	d5,$36(a1)
		subq.w	#8,d5
		dbf	d6,loc_3F310

loc_3F340:				
		movea.w	$3C(a0),a2
		move.w	#$B4,$1E(a2)
		addq.b	#2,$25(a2)
		addq.b	#2,$25(a0)

locret_3F352:						
		rts	
; ===========================================================================

loc_3F354:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	ost_x_pos(a0),d4
		jsr	SolidObject
		move.w	$30(a0),ost_y_pos(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3F388
		addq.w	#8,ost_y_pos(a0)
		clr.b	(f_hud_time_update).w
		move.w	#1,$32(a0)

loc_3F388:				
		jmp	DespawnObject
		
    if RemoveJmpTos
JmpTo66_DeleteObject:
		jmp	DeleteObject
    endc		
; ===========================================================================

loc_3F38E:				
		tst.b	$25(a0)
		beq.s	loc_3F3A2
		tst.b	ost_render(a0)
		bpl.w	JmpTo66_DeleteObject
		jsr	ObjectFall

loc_3F3A2:				
		jmp	DespawnObject
; ===========================================================================

loc_3F3A8:				
		tst.b	$25(a0)
		beq.s	locret_3F404
		move.b	(v_vblank_counter_byte).w,d0
		andi.b	#7,d0
		bne.s	loc_3F3F4
		jsr	FindFreeObj
		bne.s	loc_3F3F4
		_move.b	#id_Animals,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		jsr	RandomNumber
		andi.w	#$1F,d0
		subq.w	#6,d0
		tst.w	d1
		bpl.s	loc_3F3E4
		neg.w	d0

loc_3F3E4:				
		add.w	d0,ost_x_pos(a1)
		move.b	#1,$38(a1)
		move.w	#$C,$36(a1)

loc_3F3F4:				
		subq.w	#1,$1E(a0)
		bne.s	locret_3F404
		addq.b	#2,ost_primary_routine(a0)

loc_3F3FE:
		move.w	#$B4,$1E(a0)

locret_3F404:				
		rts	
; ===========================================================================

loc_3F406:				
		moveq	#$6F,d0
		moveq	#id_Animals,d1
		lea	(v_ost_dynamic).w,a1

loc_3F40E:				
		cmp.b	ost_id(a1),d1
		beq.s	locret_3F426
		lea	$40(a1),a1
		dbf	d0,loc_3F40E
		jsr	loc_19452
		jmp	DeleteObject
; ===========================================================================

locret_3F426:				
		rts	
; ===========================================================================
off_3F428:	dc.w byte_3F42C-off_3F428			; 0 
		dc.w byte_3F42F-off_3F428			; 1
byte_3F42C:	dc.b  $F,  0,$FF				; 0 
byte_3F42F:	dc.b   3,  0,  1,  2,  3,$FE,  1		; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3F436:				
		dc.w word_3F442-Map_3F436			; 0
		dc.w word_3F47C-Map_3F436			; 1
		dc.w word_3F4BE-Map_3F436			; 2
		dc.w word_3F500-Map_3F436			; 3
		dc.w word_3F52A-Map_3F436			; 4
		dc.w word_3F53C-Map_3F436			; 5
word_3F442:	dc.w 7			
		dc.w $E00D,    0,    0,$FFE0			; 0
		dc.w $E00D, $800, $800,	   0			; 4
		dc.w $F00A,    8,    4,$FFE0			; 8
		dc.w $F006,  $11,    8,$FFF8			; 12
		dc.w $F00A, $808, $804,	   8			; 16
		dc.w  $80E,  $17,   $B,$FFE0			; 20
		dc.w  $80E, $817, $80B,	   0			; 24
word_3F47C:	dc.w 7			
		dc.w $E00D,    0,    0,$FFE0			; 0
		dc.w $E00D, $800, $800,	   0			; 4
		dc.w  $80E,  $17,   $B,$FFE0			; 8
		dc.w  $80E, $817, $80B,	   0			; 12
		dc.w $E806,  $11,    8,$FFF8			; 16
		dc.w $F80A,    8,    4,$FFE0			; 20
		dc.w $F80A, $808, $804,	   8			; 24
		dc.w $F006,  $23,  $11,$FFF8			; 28
word_3F4BE:	dc.w 7			
word_3F4C0:	dc.w $E00D,    0,    0,$FFE0			; 0
		dc.w $E00D, $800, $800,	   0			; 4
		dc.w  $80E,  $17,   $B,$FFE0			; 8
		dc.w  $80E, $817, $80B,	   0			; 12
		dc.w $E006,  $11,    8,$FFF8			; 16
		dc.w	$A,    8,    4,$FFE0			; 20
		dc.w	$A, $808, $804,	   8			; 24
		dc.w $F006,  $23,  $11,$FFF8			; 28
word_3F500:	dc.w 5			
word_3F502:	dc.w $E00D,    0,    0,$FFE0			; 0
		dc.w $E00D, $800, $800,	   0			; 4
		dc.w $F006,  $23,  $11,$FFF8			; 8
		dc.w  $80E,  $17,   $B,$FFE0			; 12
		dc.w  $80E, $817, $80B,	   0			; 16
word_3F52A:	dc.w 2			
		dc.w $F805,  $29,  $14,$FFF0			; 0
		dc.w $F805, $829, $814,	   0			; 4
word_3F53C:	dc.w 1			
		dc.w $F805,  $2D,  $16,$FFF8			; 0
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo66_DeleteObject:				
		jmp	DeleteObject
JmpTo20_FindFreeObj:				
		jmp	FindFreeObj
		
		align 4
	endc	

; ===========================================================================

ReactToItem:				
		nop	
		jsrto	Touch_Rings,JmpTo_Touch_Rings
		cmpi.b	#id_CNZ,(v_zone).w
		bne.s	.notCNZ
		jsrto	React_CNZBumpers,JmpTo_React_CNZBumpers

	.notCNZ:				
		tst.b	(v_current_boss).w
		bne.w	loc_3F666
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		subi_.w	#8,d2
		moveq	#0,d5
		move.b	ost_height(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0)
		bne.s	loc_3F592
		addi.w	#$C,d3
		moveq	#$A,d5

loc_3F592:				
		move.w	#$10,d4
		add.w	d5,d5
		lea	($FFFFB400).w,a1
		move.w	#$6F,d6

loc_3F5A0:				
		move.b	$20(a1),d0
		bne.w	loc_3F5B4

loc_3F5A8:				
		lea	$40(a1),a1
		dbf	d6,loc_3F5A0
		moveq	#0,d0
		rts	
; ===========================================================================

loc_3F5B4:				
		andi.w	#$3F,d0
		add.w	d0,d0
		lea	React_Sizes(pc,d0.w),a2
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	ost_x_pos(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3F5D6
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3F5DC
		bra.w	loc_3F5A8
; ===========================================================================

loc_3F5D6:				
		cmp.w	d4,d0
		bhi.w	loc_3F5A8

loc_3F5DC:				
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	ost_y_pos(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_3F5F6
		add.w	d1,d1
		add.w	d1,d0
		bcs.w	loc_3F6F2
		bra.w	loc_3F5A8
; ===========================================================================

loc_3F5F6:				
		cmp.w	d5,d0
		bhi.w	loc_3F5A8
		bra.w	loc_3F6F2
; ===========================================================================
colid:		macro *
		id_\*: equ ((*-React_Sizes)/2)+1
		dc.b \1,\2
		endm

id_col_enemy:	equ 0						; enemies
id_col_item:	equ $40						; monitors, rings, giant rings
id_col_hurt:	equ $80						; hurts Sonic when touched
id_col_custom:	equ $C0						; enemies with spikes (yadrin, caterkiller), SYZ bumper

React_Sizes:	
col_4x4:		colid    4,    4
col_20x20:		colid  $14,  $14
col_12x20:		colid   $C,  $14
col_20x12:		colid  $14,   $C
col_4x16:		colid    4,  $10
col_12x18:		colid   $C,  $12
col_16x16:		colid  $10,  $10
col_6x6:		colid    6,    6
col_24x12:		colid  $18,   $C
col_12x16:		colid   $C,  $10
col_16x8:		colid  $10,    8
col_8x8:		colid    8,    8
col_20x16:		colid  $14,  $10
col_20x8		colid  $14,    8
col_14x14:		colid   $E,   $E
col_24x24:		colid  $18,  $18
col_40x16:		colid  $28,  $10
col_16x24:		colid  $10,  $18
col_8x16:		colid    8,  $10
col_32x112:		colid  $20,  $70
col_64x32:		colid  $40,  $20
col_128x32:		colid  $80,  $20
col_32x32:		colid  $20,  $20
col_8x8_2:		colid    8,    8
col_4x4_2:		colid    4,    4
col_32x8:		colid  $20,    8
col_12x12:		colid   $C,   $C
col_8x4:		colid    8,    4
col_24x4:		colid  $18,    4
col_40x4:		colid  $28,    4
col_4x8:		colid    4,    8
col_4x24:		colid    4,  $18
col_4x40:		colid    4,  $28
col_4x32:		colid    4,  $10
col_24x24_2:	colid  $18,  $18
col_12x24:		colid   $C,  $18
col_72x8:		colid  $48,    8
col_24x40:		colid  $18,  $28
col_16x4:		colid  $10,    4
col_32x2:		colid  $20,   $2
col_4x64:		colid    4,  $40
col_24x128:		colid  $18,  $80
col_32x16:		colid  $20,  $10
col_16x32:		colid  $10,  $20
col_16x48:		colid  $10,  $30
col_16x64:		colid  $10,  $40
col_16x80:		colid  $10,  $50
col_16x2:		colid  $10,    2
col_16x1:		colid  $10,    1
col_2x8:		colid    2,    8
col_32x28:		colid  $20,  $1C

; ===========================================================================

loc_3F666:				
		lea	React_Sizes(pc),a3
		move.w	ost_x_pos(a0),d2
		move.w	ost_y_pos(a0),d3
		subi_.w	#8,d2
		moveq	#0,d5
		move.b	ost_height(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0)
		bne.s	loc_3F68E
		addi.w	#$C,d3
		moveq	#$A,d5

loc_3F68E:				
		move.w	#$10,d4
		add.w	d5,d5
		lea	($FFFFB400).w,a1
		move.w	#$6F,d6

loc_3F69C:				
		move.b	$20(a1),d0
		bne.s	loc_3F6AE

loc_3F6A2:				
		lea	$40(a1),a1
		dbf	d6,loc_3F69C
		moveq	#0,d0
		rts	
; ===========================================================================

loc_3F6AE:				
		bsr.w	loc_3FA2C
		andi.w	#$3F,d0
		beq.s	loc_3F6A2
		add.w	d0,d0
		lea	(a3,d0.w),a2
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	ost_x_pos(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3F6D4
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3F6D8
		bra.s	loc_3F6A2
; ===========================================================================

loc_3F6D4:				
		cmp.w	d4,d0
		bhi.s	loc_3F6A2

loc_3F6D8:				
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	ost_y_pos(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_3F6EE
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3F6F2
		bra.s	loc_3F6A2
; ===========================================================================

loc_3F6EE:				
		cmp.w	d5,d0
		bhi.s	loc_3F6A2

loc_3F6F2:				
		move.b	$20(a1),d1
		andi.b	#-$40,d1
		beq.w	loc_3F78C
		cmpi.b	#-$40,d1
		beq.w	React_Special
		tst.b	d1

loc_3F708:
		bmi.w	React_ChkHurt
		move.b	$20(a1),d0
		andi.b	#$3F,d0
		cmpi.b	#6,d0
		beq.s	React_Monitor
		move.w	($FFFFB030).w,d0
		tst.w	(f_two_player).w
		beq.s	loc_3F728
		move.w	$30(a0),d0

loc_3F728:				
		cmpi.w	#$5A,d0
		bcc.w	locret_3F73A
		move.b	#4,$24(a1)
		move.w	a0,$3E(a1)

locret_3F73A:				
		rts	
; ===========================================================================

React_Monitor:				
		tst.w	ost_y_vel(a0)				; is character moving upwards?
		bpl.s	.chkcharacter				; if not, branch
		move.w	ost_y_pos(a0),d0
		subi.w	#$10,d0					; d0 = y pos above character
		cmp.w	ost_y_pos(a1),d0			; is center of character above the monitor?
		bcs.s	.donothing				; if not, branch (they will phase through the side instead of breaking it)

	;.knock_down
	; knock down the monitor if they jumped into the bottom of it
		neg.w	ost_y_vel(a0)				; reverse the character's y-vel
		move.w	#-$180,ost_y_vel(a1)			; set monitor's y-vel
		tst.b	ost_secondary_routine(a1)
		bne.s	.donothing
		move.b	#4,ost_secondary_routine(a1)
		rts	
; ===========================================================================

	.chkcharacter:				
		cmpa.w	#v_ost_player1,a0
		beq.s	.break_monitor
		tst.w	(f_two_player).w
		beq.s	.donothing

	.break_monitor:				
		cmpi.b	#2,ost_anim(a0)
		bne.s	.donothing
		neg.w	ost_y_vel(a0)
		move.b	#4,ost_primary_routine(a1)
		move.w	a0,$3E(a1)

	.donothing:				
		rts	
; ===========================================================================

loc_3F78C:				
		btst	#1,$2B(a0)
		bne.s	loc_3F7A6
		cmpi.b	#9,$1C(a0)
		beq.s	loc_3F7A6
		cmpi.b	#2,$1C(a0)
		bne.w	React_ChkHurt

loc_3F7A6:				
		btst	#render_subobjects_bit,ost_render(a1)
		beq.s	loc_3F7C8
		tst.b	ost_boss_hitcount2(a1)
		beq.s	locret_3F7C6
		neg.w	ost_x_vel(a0)
		neg.w	ost_y_vel(a0)
		move.b	#0,$20(a1)
		subq.b	#1,ost_boss_hitcount2(a1)

locret_3F7C6:				
		rts	
; ===========================================================================

loc_3F7C8:				
		tst.b	$21(a1)
		beq.s	loc_3F7EA
		neg.w	ost_x_vel(a0)
		neg.w	ost_y_vel(a0)
		move.b	#0,$20(a1)
		subq.b	#1,$21(a1)
		bne.s	locret_3F7E8
		bset	#7,$22(a1)

locret_3F7E8:				
		rts	
; ===========================================================================

loc_3F7EA:				
		bset	#7,$22(a1)
		moveq	#0,d0
		move.w	(v_enemy_combo).w,d0
		addq.w	#2,(v_enemy_combo).w
		cmpi.w	#6,d0
		bcs.s	loc_3F802

loc_3F800:
		moveq	#6,d0

loc_3F802:				
		move.w	d0,$3E(a1)

loc_3F806:
		move.w	off_3F854(pc,d0.w),d0

loc_3F80A:
		cmpi.w	#$20,(v_enemy_combo).w
		bcs.s	loc_3F81C
		move.w	#$3E8,d0
		move.w	#$A,$3E(a1)

loc_3F81C:				
		movea.w	a0,a3
		bsr.w	AddPoints2
		_move.b	#id_ExplosionItem,ost_id(a1)
		move.b	#0,$24(a1)
		tst.w	ost_y_vel(a0)
		bmi.s	loc_3F844
		move.w	ost_y_pos(a0),d0
		cmp.w	ost_y_pos(a1),d0
		bcc.s	loc_3F84C
		neg.w	ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3F844:				
		addi.w	#$100,ost_y_vel(a0)
		rts	
; ===========================================================================

loc_3F84C:				
		subi.w	#$100,ost_y_vel(a0)
		rts	
; ===========================================================================
off_3F854:	
		dc.w 10, 20, 50, 100
; ===========================================================================

loc_3F85C:							
		bset	#7,$22(a1)

React_ChkHurt:				
		btst	#1,$2B(a0)

loc_3F868:				
		beq.s	loc_3F86E

loc_3F86A:				
		moveq	#-1,d0
		rts	
; ===========================================================================

loc_3F86E:				
		nop	
		tst.w	$30(a0)
		bne.s	loc_3F86A
		movea.l	a1,a2



HurtCharacter:				
		move.w	(v_rings).w,d0
		cmpa.w	#-$5000,a0
		beq.s	loc_3F88C
		tst.w	(f_two_player).w

loc_3F886:				
		beq.s	loc_3F8BE
		move.w	(v_rings_p2).w,d0

loc_3F88C:				
		btst	#0,$2B(a0)
		bne.s	loc_3F8B8
		tst.w	d0
		beq.w	KillCharacter
		jsr	FindFreeObj
		bne.s	loc_3F8B8
		_move.b	#id_RingLoss,ost_id(a1)
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		move.w	a0,$3E(a1)

loc_3F8B8:				
		bclr	#0,$2B(a0)

loc_3F8BE:				
		move.b	#4,ost_primary_routine(a0)
		jsrto	Sonic_ResetOnFloor_2,JmpTo_Sonic_ResetOnFloor_2
		bset	#1,$22(a0)
		move.w	#-$400,ost_y_vel(a0)
		move.w	#-$200,ost_x_vel(a0)
		btst	#6,$22(a0)
		beq.s	loc_3F8EE
		move.w	#-$200,ost_y_vel(a0)
		move.w	#-$100,ost_x_vel(a0)

loc_3F8EE:				
		move.w	ost_x_pos(a0),d0
		cmp.w	ost_x_pos(a2),d0
		bcs.s	loc_3F8FC
		neg.w	ost_x_vel(a0)

loc_3F8FC:				
		move.w	#0,ost_inertia(a0)
		move.b	#$1A,$1C(a0)
		move.w	#$78,$30(a0)
		move.w	#$A3,d0	
		cmpi.b	#$36,(a2)
		bne.s	loc_3F91C
		move.w	#$A6,d0	

loc_3F91C:				
		jsr	PlaySound
		moveq	#-1,d0
		rts	
; ===========================================================================
; loc_3F926:
KillCharacter:				
		tst.w	(v_debug_active).w
		bne.s	loc_3F972
		clr.b	$2B(a0)
		move.b	#6,ost_primary_routine(a0)
		jsrto	Sonic_ResetOnFloor_2,JmpTo_Sonic_ResetOnFloor_2
		bset	#1,$22(a0)
		move.w	#-$700,ost_y_vel(a0)
		move.w	#0,ost_x_vel(a0)
		move.w	#0,ost_inertia(a0)
		move.b	#$18,$1C(a0)
		bset	#tile_hi_bit,ost_tile(a0)
		move.w	#$A3,d0	
		cmpi.b	#id_Spikes,ost_id(a2)
		bne.s	loc_3F96C
		move.w	#$A6,d0	

loc_3F96C:				
		jsr	PlaySound

loc_3F972:				
		moveq	#-1,d0
		rts	
; ===========================================================================

React_Special:				
		move.b	$20(a1),d1
		andi.b	#$3F,d1
		cmpi.b	#6,d1
		beq.s	loc_3FA00
		cmpi.b	#7,d1
		beq.w	loc_3FA18
		cmpi.b	#$B,d1
		beq.s	loc_3F9CA
		cmpi.b	#$A,d1
		beq.s	loc_3FA00
		cmpi.b	#$C,d1
		beq.s	loc_3F9CE
		cmpi.b	#$14,d1
		beq.s	loc_3FA00
		cmpi.b	#$15,d1
		beq.s	loc_3FA00
		cmpi.b	#$16,d1
		beq.s	loc_3FA00
		cmpi.b	#$17,d1
		beq.s	loc_3FA00
		cmpi.b	#$18,d1
		beq.s	loc_3FA00
		cmpi.b	#$1A,d1
		beq.s	loc_3FA22
		cmpi.b	#$21,d1
		beq.s	loc_3FA12
		rts	
; ===========================================================================

loc_3F9CA:				
		bra.w	loc_3F85C
; ===========================================================================

loc_3F9CE:				
		sub.w	d0,d5
		cmpi.w	#8,d5
		bcc.s	loc_3F9FC
		move.w	ost_x_pos(a1),d0
		subq.w	#4,d0
		btst	#0,$22(a1)
		beq.s	loc_3F9E8
		subi.w	#$10,d0

loc_3F9E8:				
		sub.w	d2,d0
		bcc.s	loc_3F9F4
		addi.w	#$18,d0
		bcs.s	loc_3F9F8
		bra.s	loc_3F9FC
; ===========================================================================

loc_3F9F4:				
		cmp.w	d4,d0
		bhi.s	loc_3F9FC

loc_3F9F8:				
		bra.w	React_ChkHurt
; ===========================================================================

loc_3F9FC:				
		bra.w	loc_3F78C
; ===========================================================================

loc_3FA00:				
		move.w	a0,d1
		subi.w	#-$5000,d1
		beq.s	loc_3FA0C
		addq.b	#1,$21(a1)

loc_3FA0C:				
		addq.b	#1,$21(a1)
		rts	
; ===========================================================================

loc_3FA12:				
		addq.b	#1,$21(a1)
		rts	
; ===========================================================================

loc_3FA18:				
		move.b	#2,$21(a1)
		bra.w	loc_3F78C
; ===========================================================================

loc_3FA22:				
		move.b	#-1,$21(a1)
		bra.w	loc_3F78C
; ===========================================================================

loc_3FA2C:				
		cmpi.b	#$F,d0
		bne.s	locret_3FA46
		moveq	#0,d0
		move.b	(v_current_boss).w,d0
		beq.s	locret_3FA46
		subq.w	#1,d0
		add.w	d0,d0
		move.w	off_3FA48(pc,d0.w),d0
		jmp	off_3FA48(pc,d0.w)
; ===========================================================================

locret_3FA46:				
		rts	
; ===========================================================================
off_3FA48:	
		dc.w loc_3FA5A-off_3FA48			; 0 
		dc.w loc_3FA5A-off_3FA48			; 1
		dc.w loc_3FA60-off_3FA48			; 2
		dc.w loc_3FAC8-off_3FA48			; 3
		dc.w loc_3FAFE-off_3FA48			; 4
		dc.w loc_3FB8A-off_3FA48			; 5
		dc.w loc_3FBC4-off_3FA48			; 6
		dc.w loc_3FBCA-off_3FA48			; 7
		dc.w locret_3FA5E-off_3FA48			; 8
; ===========================================================================

loc_3FA5A:				
		move.b	$20(a1),d0

locret_3FA5E:				
		rts	
; ===========================================================================

loc_3FA60:				
		tst.b	(v_boss_collision_routine).w
		bne.s	loc_3FA68
		rts	
; ===========================================================================

loc_3FA68:				
		move.w	d7,-(sp)
		moveq	#0,d1
		move.b	$15(a1),d1
		subq.b	#2,d1
		cmpi.b	#7,d1
		bgt.s	loc_3FAA8
		move.w	d1,d7
		add.w	d7,d7
		move.w	ost_x_pos(a1),d0
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_3FA8E
		add.w	word_3FAB0(pc,d7.w),d0
		bra.s	loc_3FA92
; ===========================================================================

loc_3FA8E:				
		sub.w	word_3FAB0(pc,d7.w),d0

loc_3FA92:				
		move.b	byte_3FAC0(pc,d1.w),d1
		ori.l	#262144,d1
		move.w	ost_y_pos(a1),d7
		subi.w	#$1C,d7
		bsr.w	loc_3FC4C

loc_3FAA8:				
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		rts	
; ===========================================================================
word_3FAB0:	dc.w   $1C					; 0
		dc.w   $20					; 1
		dc.w   $28					; 2
		dc.w   $34					; 3
		dc.w   $3C					; 4
		dc.w   $44					; 5
		dc.w   $60					; 6
		dc.w   $70					; 7
byte_3FAC0:	dc.b   4					; 0
		dc.b   4					; 1
		dc.b   8					; 2
		dc.b  $C					; 3
		dc.b $14					; 4
		dc.b $1C					; 5
		dc.b $24					; 6
		dc.b   8					; 7
; ===========================================================================

loc_3FAC8:				
		move.w	d7,-(sp)
		move.w	ost_x_pos(a1),d0
		move.w	ost_y_pos(a1),d7
		tst.b	(v_boss_collision_routine).w
		beq.s	loc_3FAF6
		addi_.w	#4,d7
		subi.w	#$50,d0
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_3FAEC
		addi.w	#$A0,d0	

loc_3FAEC:				
		move.l	#$140010,d1
		bsr.w	loc_3FC4C

loc_3FAF6:				
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FAFE:				
		sf.b	ost_boss_hurtplayer(a1)
		cmpi.b	#1,(v_boss_collision_routine).w
		blt.s	loc_3FB46
	if FixBugs	
		; The below call to 'Boss_DoCollision' clobbers 'a1', so back it up
		; here. This fixes Eggman not laughing when he hurts Sonic/Tails AND causes them
		; to drop rings.
		pushr.w	d7/a1
	else
		pushr.w	d7
	endc	
		
		move.w	ost_x_pos(a1),d0
		move.w	ost_y_pos(a1),d7
		addi_.w	#4,d7
		subi.w	#$30,d0
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_3FB28
		addi.w	#$60,d0

loc_3FB28:				
		move.l	#262148,d1
		bsr.w	loc_3FC4C
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		cmpi.w	#$78,$30(a0)
		bne.s	locret_3FB44
		st.b	ost_boss_hurtplayer(a1)

locret_3FB44:				
		rts	
; ===========================================================================

loc_3FB46:				
		move.w	d7,-(sp)
		movea.w	#$14,a5
		movea.w	#0,a4

loc_3FB50:				
		move.w	ost_x_pos(a1),d0
		move.w	ost_y_pos(a1),d7
		subi.w	#$20,d7
		add.w	a5,d0
		move.l	#$100004,d1
		bsr.w	loc_3FC4C
		movea.w	#-$14,a5
		adda_.w	#1,a4
		cmpa.w	#1,a4
		beq.s	loc_3FB50
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		cmpi.w	#$78,$30(a0)
		bne.s	locret_3FB88
		st.b	ost_boss_hurtplayer(a1)

locret_3FB88:				
		rts	
; ===========================================================================

loc_3FB8A:				
		tst.b	(v_boss_collision_routine).w
		beq.s	loc_3FBBE
		move.w	d7,-(sp)
		move.w	ost_x_pos(a1),d0
		move.w	ost_y_pos(a1),d7
		addi.w	#$28,d7
		move.l	#$80010,d1
		cmpi.b	#1,(v_boss_collision_routine).w
		beq.s	loc_3FBB8
		move.w	#$20,d1
		subi_.w	#8,d7
		addi_.w	#4,d0

loc_3FBB8:				
		bsr.w	loc_3FC4C
		move.w	(sp)+,d7

loc_3FBBE:				
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FBC4:				
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FBCA:				
		cmpi.b	#1,(v_boss_collision_routine).w
		blt.s	loc_3FC46
		beq.s	loc_3FC1C
		move.w	d7,-(sp)
		move.w	ost_x_pos(a1),d0
		move.w	ost_y_pos(a1),d7
		moveq	#0,d1
		move.b	ost_mainspr_frame(a1),d1
		subq.b	#2,d1
		add.w	d1,d1
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_3FBF6
		add.w	word_3FC10(pc,d1.w),d0
		bra.s	loc_3FBFA
; ===========================================================================

loc_3FBF6:				
		sub.w	word_3FC10(pc,d1.w),d0

loc_3FBFA:				
		sub.w	word_3FC10+2(pc,d1.w),d7

loc_3FBFE:
		move.l	#$60008,d1

.init_water4:
		bsr.w	loc_3FC4C
		move.w	(sp)+,d7

.init_waterA:
		move.w	#0,d0
		rts	
; ===========================================================================
word_3FC10:	dc.w   $14,    0				; 0
		dc.w   $10,  $10				; 2
		dc.w   $10,$FFF0				; 4
; ===========================================================================

loc_3FC1C:				
		move.w	d7,-(sp)
		move.w	ost_x_pos(a1),d0
		move.w	ost_y_pos(a1),d7
		moveq	#$10,d1
		btst	#render_xflip_bit,ost_render(a1)
		beq.s	loc_3FC32
		neg.w	d1

loc_3FC32:				
		sub.w	d1,d0
		move.l	#$8000C,d1
		bsr.w	loc_3FC7A
		move.w	(sp)+,d7
		move.b	#0,d0
		rts	
; ===========================================================================

loc_3FC46:				
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FC4C:				
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3FC5A
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3FC5E

locret_3FC58:				
		rts	
; ===========================================================================

loc_3FC5A:				
		cmp.w	d4,d0
		bhi.s	locret_3FC58

loc_3FC5E:				
		swap	d1
		sub.w	d1,d7
		sub.w	d3,d7
		bcc.s	loc_3FC70
		add.w	d1,d1
		add.w	d1,d7
		bcs.w	React_ChkHurt
		bra.s	locret_3FC58
; ===========================================================================

loc_3FC70:				
		cmp.w	d5,d7
		bhi.w	locret_3FC58
		bra.w	React_ChkHurt
; ===========================================================================

loc_3FC7A:				
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3FC88
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3FC8C

locret_3FC86:				
		rts	
; ===========================================================================

loc_3FC88:				
		cmp.w	d4,d0
		bhi.s	locret_3FC86

loc_3FC8C:				
		swap	d1
		sub.w	d1,d7
		sub.w	d3,d7
		bcc.s	loc_3FC9E
		add.w	d1,d1
		add.w	d1,d7
		bcs.w	loc_3FCA4
		bra.s	locret_3FC86
; ===========================================================================

loc_3FC9E:				
		cmp.w	d5,d7
		bhi.w	locret_3FC86

loc_3FCA4:				
		neg.w	ost_x_vel(a0)
		neg.w	ost_y_vel(a0)
		rts	
; ===========================================================================

	if Revision<2
		nop	
	endc

	if RemoveJmpTos=0
JmpTo_Sonic_ResetOnFloor_2:				
		jmp	Sonic_ResetOnFloor_2
JmpTo_React_CNZBumpers:				
		jmp	React_CNZBumpers
JmpTo_Touch_Rings:				
		jmp	Touch_Rings
		
		align 4
	endc 
	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	load uncompressed gfx for and animate level animations
; (e.g., EHZ flowers, HTZ lava)
; ---------------------------------------------------------------------------
; loc_3FCC4: AniArt_Load:
AnimateLevelGFX:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	AniArt_Index+2(pc,d0.w),d1
		lea	AniArt_Index(pc,d1.w),a2
		move.w	AniArt_Index(pc,d0.w),d0
		jmp	AniArt_Index(pc,d0.w)
; ===========================================================================
		rts						; dead code
; ===========================================================================
; ---------------------------------------------------------------------------
; Dynamic and Animated pattern load cue
;
; Two offsets per level. First points to the Animated pattern load cue to
; use for the level. Second points to the Dynamic reload script.
; ---------------------------------------------------------------------------
AniArt_Index:	index offset(*),,2		
		ptr Dynamic_Normal
		ptr Animated_EHZ
		
		ptr Dynamic_Null
		ptr Animated_Null
		
		ptr Dynamic_Null
		ptr Animated_Null
		
		ptr Dynamic_Null
		ptr Animated_Null
		
		ptr Dynamic_Normal
		ptr Animated_MTZ
		
		ptr Dynamic_Normal
		ptr Animated_MTZ
		
		ptr Dynamic_Null
		ptr Animated_Null
		
		ptr Dynamic_HTZ
		ptr Animated_HTZ
		
		ptr Dynamic_Normal
		ptr Animated_HPZ
		
		ptr Dynamic_Null
		ptr Animated_Null
		
		ptr Dynamic_Normal
		ptr Animated_OOZ
		
		ptr Dynamic_Null
		ptr Animated_Null
		
		ptr Dynamic_CNZ	
		ptr Animated_CNZ
		
		ptr Dynamic_Normal
		ptr Animated_CPZ
		
		ptr Dynamic_Normal
		ptr Animated_DEZ
		
		ptr Dynamic_ARZ
		ptr Animated_ARZ

		ptr Dynamic_Null
		ptr Animated_Null
		zonewarning	AniArt_Index,4
; ===========================================================================

Dynamic_Null:				
		rts	
; ===========================================================================

Dynamic_HTZ:				
		tst.w	(f_two_player).w
		bne.w	Dynamic_Normal
		lea	(v_anim_counters).w,a3
		moveq	#0,d0
		move.w	(v_camera_x_pos).w,d1
		neg.w	d1
		asr.w	#3,d1
		move.w	(v_camera_x_pos).w,d0
		lsr.w	#4,d0
		add.w	d1,d0
		subi.w	#$10,d0
		divu.w	#$30,d0
		swap	d0
		cmp.b	1(a3),d0
		beq.s	loc_3FD98
		move.b	d0,1(a3)
		move.w	d0,d2
		andi.w	#7,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		andi.w	#$38,d2
		lsr.w	#2,d2
		add.w	d2,d0
		lea	word_3FD9C(pc,d0.w),a4
		moveq	#5,d5
		move.w	#-$6000,d4

loc_3FD7C:				
		moveq	#-1,d1
		move.w	(a4)+,d1
		andi.l	#$FFFFFF,d1
		move.w	d4,d2
		moveq	#$40,d3
		jsr	(AddDMA).l
		addi.w	#$80,d4	
		dbf	d5,loc_3FD7C

loc_3FD98:				
		bra.w	loc_3FE5C
; ===========================================================================
word_3FD9C:
		dc.w   $80, $180, $280, $580, $600, $700	; 6
		dc.w   $80, $180, $280, $580, $600, $700	; 12
		dc.w  $980, $A80, $B80, $C80, $D00, $D80	; 18
		dc.w  $980, $A80, $B80, $C80, $D00, $D80	; 24
		dc.w  $E80,$1180,$1200,$1280,$1300,$1380	; 30
		dc.w  $E80,$1180,$1200,$1280,$1300,$1380	; 36
		dc.w $1400,$1480,$1500,$1580,$1600,$1900	; 42
		dc.w $1400,$1480,$1500,$1580,$1600,$1900	; 48
			dc.w $1D00,$1D80,$1E00,$1F80,$2400,$2580 ; 54
		dc.w $1D00,$1D80,$1E00,$1F80,$2400,$2580	; 60
		dc.w $2600,$2680,$2780,$2B00,$2F00,$3280	; 66
		dc.w $2600,$2680,$2780,$2B00,$2F00,$3280	; 72
		dc.w $3600,$3680,$3780,$3C80,$3D00,$3F00	; 78
		dc.w $3600,$3680,$3780,$3C80,$3D00,$3F00	; 84
		dc.w $3F80,$4080,$4480,$4580,$4880,$4900	; 90
		dc.w $3F80,$4080,$4480,$4580,$4880,$4900	; 96
; ===========================================================================

loc_3FE5C:				
		lea	(v_bgscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d2
		neg.w	d2
		asr.w	#3,d2
		move.l	a2,-(sp)
		lea	(Art_HTZClouds).l,a0
		lea	($FFFF7C00).l,a2
		moveq	#$F,d1

loc_3FE78:				
		move.w	(a1)+,d0
		neg.w	d0
		add.w	d2,d0
		andi.w	#$1F,d0
		lsr.w	#1,d0
		bcc.s	loc_3FE8A
		addi.w	#$200,d0

loc_3FE8A:				
		lea	(a0,d0.w),a4
		lsr.w	#1,d0
		bcs.s	loc_3FEB4
		
		rept 3
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2
		endr

		move.l	(a4)+,(a2)+
		suba.w	#$C0,a2	
		adda.w	#$20,a0
		dbf	d1,loc_3FE78
		bra.s	loc_3FEEC
; ===========================================================================

loc_3FEB4:	
		rept 3			
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2
		endr
		
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		
		suba.w	#$C0,a2	
		adda.w	#$20,a0
		dbf	d1,loc_3FE78

loc_3FEEC:				
		move.l	#$FF7C00,d1
		move.w	#-$5D00,d2
		move.w	#$80,d3	
		jsr	(AddDMA).l
		movea.l	(sp)+,a2
		addq.w	#2,a3
		bra.w	loc_3FF30
; ===========================================================================

Dynamic_CNZ:				
		tst.b	(v_current_boss).w
		beq.s	loc_3FF10
		rts	
; ===========================================================================

loc_3FF10:				
		lea	(Animated_CNZ).l,a2
		tst.w	(f_two_player).w
		beq.s	Dynamic_Normal
		lea	(word_40160).l,a2
		bra.s	Dynamic_Normal
; ===========================================================================

Dynamic_ARZ:				
		tst.b	(v_current_boss).w
		beq.s	Dynamic_Normal
		rts	
; ===========================================================================

Dynamic_Normal:
		lea	(v_anim_counters).w,a3

loc_3FF30:				
		move.w	(a2)+,d6

loc_3FF32:				
		subq.b	#1,(a3)
		bcc.s	loc_3FF78
		moveq	#0,d0
		move.b	1(a3),d0
		cmp.b	6(a2),d0
		bcs.s	loc_3FF48
		moveq	#0,d0
		move.b	d0,1(a3)

loc_3FF48:				
		addq.b	#1,1(a3)
		move.b	(a2),(a3)
		bpl.s	loc_3FF56
		add.w	d0,d0
		move.b	9(a2,d0.w),(a3)

loc_3FF56:				
		move.b	8(a2,d0.w),d0
		lsl.w	#5,d0
		move.w	4(a2),d2
		move.l	(a2),d1
		andi.l	#$FFFFFF,d1
		add.l	d0,d1
		moveq	#0,d3
		move.b	7(a2),d3
		lsl.w	#4,d3
		jsr	(AddDMA).l

loc_3FF78:				
		move.b	6(a2),d0
		tst.b	(a2)
		bpl.s	loc_3FF82
		add.b	d0,d0

loc_3FF82:				
		addq.b	#1,d0
		andi.w	#$FE,d0	
		lea	8(a2,d0.w),a2
		addq.w	#2,a3
		dbf	d6,loc_3FF32
		rts	
; ===========================================================================
Animated_EHZ:				
		dc.w 4
; Flowers
		dc.l $FF000000+Art_Flowers1
		dc.w $7280
		dc.b 6
		dc.b 2
		dc.b   0,$7F					; 0
		dc.b   2,$13					; 2
		dc.b   0,  7					; 4
		dc.b   2,  7					; 6
		dc.b   0,  7					; 8
		dc.b   2,  7					; 10
; Flowers
		dc.l $FF000000+Art_Flowers2
		dc.w $72C0
		dc.b 8
		dc.b 2
		dc.b   2,$7F					; 0
		dc.b   0, $B					; 2
		dc.b   2, $B					; 4
		dc.b   0, $B					; 6
		dc.b   2,  5					; 8
		dc.b   0,  5					; 10
		dc.b   2,  5					; 12
		dc.b   0,  5					; 14
; Flowers
		dc.l $7000000+Art_Flowers3
		dc.w $7300
		dc.b 2
		dc.b 2
		dc.b   0					; 0
		dc.b   2					; 1
; Flowers
		dc.l $FF000000+Art_Flowers4
		dc.w $7340
		dc.b 8
		dc.b 2
		dc.b   0,$7F					; 0
		dc.b   2,  7					; 2
		dc.b   0,  7					; 4
		dc.b   2,  7					; 6
		dc.b   0,  7					; 8
		dc.b   2, $B					; 10
		dc.b   0, $B					; 12
		dc.b   2, $B					; 14
; Pulsing thing	against	checkered background
		dc.l $FF000000+Art_EHZPulseBall
		dc.w $7380
		dc.b 6
		dc.b 2
		dc.b   0,$17					; 0
		dc.b   2,  9					; 2
		dc.b   4, $B					; 4
		dc.b   6,$17					; 6
		dc.b   4, $B					; 8
		dc.b   2,  9					; 10
Animated_MTZ:				
		dc.w 3
; Spinning metal cylinder
		dc.l $00000000+Art_MTZCylinder
		dc.w $6980
		dc.b 8
		dc.b $10
byte_40002:	dc.b   0					; 0
		dc.b $10					; 1
		dc.b $20					; 2
		dc.b $30					; 3
		dc.b $40					; 4
		dc.b $50					; 5
		dc.b $60					; 6
		dc.b $70					; 7
; lava
		dc.l $D000000+Art_Lava
		dc.w $6800
		dc.b 6
		dc.b $C
		dc.b   0					; 0
		dc.b  $C					; 1
		dc.b $18					; 2
		dc.b $24					; 3
		dc.b $18					; 4
		dc.b  $C					; 5
; MTZ background animated section
		dc.l $FF000000+Art_MTZAnimBack
		dc.w $6B80
		dc.b 4
		dc.b 6
		dc.b   0,$13					; 0
		dc.b   6,  7					; 2
		dc.b  $C,$13					; 4
		dc.b   6,  7					; 6
; MTZ background animated section
		dc.l $FF000000+Art_MTZAnimBack
		dc.w $6C40
		dc.b 4
		dc.b 6
		dc.b  $C,$13					; 0
		dc.b   6,  7					; 2
		dc.b   0,$13					; 4
		dc.b   6,  7					; 6
Animated_HTZ:				
		dc.w 4
; Flowers
		dc.l $FF000000+Art_Flowers1
		dc.w $7280
		dc.b 6
		dc.b 2
		dc.b   0,$7F					; 0
		dc.b   2,$13					; 2
		dc.b   0,  7					; 4
		dc.b   2,  7					; 6
		dc.b   0,  7					; 8
		dc.b   2,  7					; 10
; Flowers
		dc.l $FF000000+Art_Flowers2
		dc.w $72C0
		dc.b 8
		dc.b 2
		dc.b   2,$7F					; 0
		dc.b   0, $B					; 2
		dc.b   2, $B					; 4
		dc.b   0, $B					; 6
		dc.b   2,  5					; 8
		dc.b   0,  5					; 10
		dc.b   2,  5					; 12
		dc.b   0,  5					; 14
; Flowers
		dc.l $7000000+Art_Flowers3
		dc.w $7300
		dc.b 2
		dc.b 2
		dc.b   0					; 0
		dc.b   2					; 1
; Flowers
		dc.l $FF000000+Art_Flowers4
		dc.w $7340
		dc.b 8
		dc.b 2
		dc.b   0,$7F					; 0
		dc.b   2,  7					; 2
		dc.b   0,  7					; 4
		dc.b   2,  7					; 6
		dc.b   0,  7					; 8
		dc.b   2, $B					; 10
		dc.b   0, $B					; 12
		dc.b   2, $B					; 14
; Pulsing thing	against	checkered background
		dc.l $FF000000+Art_EHZPulseBall
		dc.w $7380
		dc.b 6
		dc.b 2
		dc.b   0,$17					; 0
		dc.b   2,  9					; 2
		dc.b   4, $B					; 4
		dc.b   6,$17					; 6
		dc.b   4, $B					; 8
		dc.b   2,  9					; 10
Animated_HPZ:				
		dc.w 2
; Pulsing ball from OOZ
		dc.l $8000000+Art_OOZPulseBall
		dc.w $5D00
		dc.b 6
		dc.b 8
		dc.b   0					; 0
		dc.b   0					; 1
		dc.b   8					; 2
		dc.b $10					; 3
		dc.b $10					; 4
		dc.b   8					; 5
; Pulsing ball from OOZ
		dc.l $8000000+Art_OOZPulseBall
		dc.w $5E00
		dc.b 6
		dc.b 8
		dc.b   8					; 0
		dc.b $10					; 1
		dc.b $10					; 2
		dc.b   8					; 3
		dc.b   0					; 4
		dc.b   0					; 5
; Pulsing ball from OOZ
		dc.l $8000000+Art_OOZPulseBall
		dc.w $5F00
		dc.b 6
		dc.b 8
		dc.b $10					; 0
		dc.b   8					; 1
		dc.b   0					; 2
		dc.b   0					; 3
		dc.b   8					; 4
		dc.b $10					; 5
Animated_OOZ:				
		dc.w 4
; Pusling ball from OOZ
		dc.l $FF000000+Art_OOZPulseBall
		dc.w $56C0
		dc.b 4
		dc.b 4
		dc.b   0					; 0
		dc.b  $B					; 1
		dc.b   4					; 2
		dc.b   5					; 3
		dc.b   8					; 4
		dc.b   9					; 5
		dc.b   4					; 6
		dc.b   3					; 7
; Square rotating around ball in OOZ
		dc.l $6000000+Art_OOZSquareBall1
		dc.w $5740
		dc.b 4
		dc.b 4
		dc.b   0					; 0
		dc.b   4					; 1
		dc.b   8					; 2
		dc.b  $C					; 3
; Square rotating around ball
		dc.l $6000000+Art_OOZSquareBall2
		dc.w $57C0
		dc.b 4
		dc.b 4
		dc.b   0					; 0
		dc.b   4					; 1
		dc.b   8					; 2
		dc.b  $C					; 3
; Oil
		dc.l $11000000+Art_Oil1
		dc.w $5840
		dc.b 6
		dc.b $10
		dc.b   0					; 0
		dc.b $10					; 1
		dc.b $20					; 2
		dc.b $30					; 3
		dc.b $20					; 4
		dc.b $10					; 5
; Oil
		dc.l $11000000+Art_Oil2
		dc.w $5A40
		dc.b 6
		dc.b $10
		dc.b   0					; 0
		dc.b $10					; 1
		dc.b $20					; 2
		dc.b $30					; 3
		dc.b $20					; 4
		dc.b $10					; 5
Animated_CNZ:				
		dc.w 1
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $A800
		dc.b $10
		dc.b $10
		dc.b   0,$C7					; 0
		dc.b $10,  5					; 2
		dc.b $20,  5					; 4
		dc.b $30,  5					; 6
		dc.b $40,$C7					; 8
		dc.b $50,  5					; 10
		dc.b $20,  5					; 12
		dc.b $60,  5					; 14
		dc.b   0,  5					; 16
		dc.b $10,  5					; 18
		dc.b $20,  5					; 20
		dc.b $30,  5					; 22
		dc.b $40,  5					; 24
		dc.b $50,  5					; 26
		dc.b $20,  5					; 28
		dc.b $60,  5					; 30
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $6600
		dc.b $10
		dc.b $10
		dc.b $70,  5					; 0
		dc.b $80,  5					; 2
		dc.b $20,  5					; 4
		dc.b $90,  5					; 6
		dc.b $A0,  5					; 8
		dc.b $B0,  5					; 10
		dc.b $20,  5					; 12
		dc.b $C0,  5					; 14
		dc.b $70,$C7					; 16
		dc.b $80,  5					; 18
		dc.b $20,  5					; 20
		dc.b $90,  5					; 22
		dc.b $A0,$C7					; 24
		dc.b $B0,  5					; 26
		dc.b $20,  5					; 28
		dc.b $C0,  5					; 30
word_40160:	dc.w 1			
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $E800
		dc.b $10
		dc.b $10
		dc.b   0,$C7					; 0
		dc.b $10,  5					; 2
		dc.b $20,  5					; 4
		dc.b $30,  5					; 6
		dc.b $40,$C7					; 8
		dc.b $50,  5					; 10
		dc.b $20,  5					; 12
		dc.b $60,  5					; 14
		dc.b   0,  5					; 16
		dc.b $10,  5					; 18
		dc.b $20,  5					; 20
		dc.b $30,  5					; 22
		dc.b $40,  5					; 24
		dc.b $50,  5					; 26
		dc.b $20,  5					; 28
		dc.b $60,  5					; 30
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $6600
		dc.b $10
		dc.b $10
		dc.b $70,  5					; 0
		dc.b $80,  5					; 2
		dc.b $20,  5					; 4
		dc.b $90,  5					; 6
		dc.b $A0,  5					; 8
		dc.b $B0,  5					; 10
		dc.b $20,  5					; 12
		dc.b $C0,  5					; 14
		dc.b $70,$C7					; 16
		dc.b $80,  5					; 18
		dc.b $20,  5					; 20
		dc.b $90,  5					; 22
		dc.b $A0,$C7					; 24
		dc.b $B0,  5					; 26
		dc.b $20,  5					; 28
		dc.b $C0,  5					; 30
Animated_CPZ:				
		dc.w 0
; Animated background section in CPZ and DEZ
		dc.l $4000000+Art_CPZAnimBack			; 0
		dc.w $6E00
		dc.b 8
		dc.b 2
		dc.b   0					; 0
		dc.b   2					; 1
		dc.b   4					; 2
		dc.b   6					; 3
		dc.b   8					; 4
		dc.b  $A					; 5
		dc.b  $C					; 6
		dc.b  $E					; 7
Animated_DEZ:				
		dc.w 0
; Animated background section in CPZ and DEZ
		dc.l $4000000+Art_CPZAnimBack
		dc.w $64C0
		dc.b 8
		dc.b 2
		dc.b   0					; 0
		dc.b   2					; 1
		dc.b   4					; 2
		dc.b   6					; 3
		dc.b   8					; 4
		dc.b  $A					; 5
		dc.b  $C					; 6
		dc.b  $E					; 7
Animated_ARZ:				
		dc.w 3
; Waterfall patterns
		dc.l $5000000+Art_Waterfall1
		dc.w $AAE0
		dc.b 2
		dc.b 4
		dc.b   0					; 0
		dc.b   4					; 1
; Waterfall patterns
		dc.l $5000000+Art_Waterfall1
		dc.w $8600
		dc.b 2
		dc.b 4
		dc.b   4					; 0
		dc.b   0					; 1
; Waterfall patterns
		dc.l $5000000+Art_Waterfall2
		dc.w $8580
		dc.b 2
		dc.b 4
		dc.b   0					; 0
		dc.b   4					; 1
; Waterfall patterns
		dc.l $5000000+Art_Waterfall3
		dc.w $8500
		dc.b 2
		dc.b 4
		dc.b   0					; 0
		dc.b   4					; 1
; ===========================================================================

Animated_Null:				
		cmpi.b	#id_CPZ,(v_zone).w
		beq.s	loc_4020A

locret_40208:				
		rts	
; ===========================================================================

loc_4020A:				
		move.w	(v_camera_x_pos).w,d0
		cmpi.w	#$1940,d0
		bcs.s	locret_40208
		cmpi.w	#$1F80,d0
		bcc.s	locret_40208
		subq.b	#1,(v_unused_cpz_scroll_timer).w
		bpl.s	locret_40208
		move.b	#7,(v_unused_cpz_scroll_timer).w
		move.b	#1,(f_screen_redraw).w
		lea	(v_128x128_tiles+$7500).l,a1
		bsr.s	loc_4023A
		lea	(v_128x128_tiles+$7D00).l,a1

loc_4023A:				
		move.w	#7,d1

loc_4023E:	
		move.w	(a1),d0			
    	rept 3							; do this for 3 chunks
     	rept 7
		move.w	2(a1),(a1)+				; shift 1st line of chunk by 1 block to the left (+3*14 bytes)
      	endr
		move.w	$72(a1),(a1)+				; first block of next chunk to the left into previous chunk (+3*2 bytes)
		adda.w	#$70,a1					; go to next chunk (+336 bytes)
   		endr
   		
     	rept 7							; now do it for the 4th chunk
		move.w	2(a1),(a1)+				; shift 1st line of chunk by 1 block to the left (+14 bytes)
      	endr
		
		move.w	d0,(a1)+
		suba.w	#$180,a1
		dbf	d1,loc_4023E
		rts	
; ===========================================================================

AnimatedBlocksLoad:				
		cmpi.b	#7,(v_zone).w
		bne.s	loc_402EC
		bsr.w	loc_407C0
		move.b	#-1,($FFFFF7F1).w
		move.w	#-1,($FFFFA820).w

loc_402EC:				
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_402FA
		move.b	#-1,($FFFFF7F1).w

loc_402FA:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0

loc_40302:
		move.w	off_40350(pc,d0.w),d0
		lea	off_40350(pc,d0.w),a0
		tst.w	(f_two_player).w
		beq.s	loc_4031E
		cmpi.b	#$C,(v_zone).w
		bne.s	loc_4031E
		lea	(byte_406BE).l,a0

loc_4031E:				
		tst.w	(a0)
		beq.s	locret_40336
		lea	(v_16x16_tiles).w,a1
		adda.w	(a0)+,a1
		move.w	(a0)+,d1
		tst.w	(f_two_player).w
		bne.s	loc_40338

loc_40330:				
		move.w	(a0)+,(a1)+
		dbf	d1,loc_40330

locret_40336:				
		rts	
; ===========================================================================

loc_40338:				
		move.w	(a0)+,d0
		move.w	d0,d1
		andi.w	#-$800,d0
		andi.w	#$7FF,d1
		lsr.w	#1,d1
		or.w	d1,d0
		move.w	d0,(a1)+
		dbf	d1,loc_40338
		rts	
; ===========================================================================
off_40350:	
		dc.w byte_40372-off_40350			; 0 
		dc.w byte_407BE-off_40350			; 1
		dc.w byte_407BE-off_40350			; 2
		dc.w byte_407BE-off_40350			; 3
		dc.w byte_403EE-off_40350			; 4
		dc.w byte_403EE-off_40350			; 5
		dc.w byte_407BE-off_40350			; 6
		dc.w byte_40372-off_40350			; 7
		dc.w byte_404C2-off_40350			; 8
		dc.w byte_407BE-off_40350			; 9
		dc.w byte_405B6-off_40350			; 10
		dc.w byte_407BE-off_40350			; 11
		dc.w byte_4061A-off_40350			; 12
		dc.w byte_40762-off_40350			; 13
		dc.w byte_4076E-off_40350			; 14
		dc.w byte_4077A-off_40350			; 15
		dc.w byte_407BE-off_40350			; 16
		;zonewarning

;anipat_header:	macro *

;\* equ *
;		dc.w $1800-sizeof_\*\_Blocks
;		dc.w (sizeof_\*\_blocks/2)-1
;	\*\_Blocks:	
;		endm
		
byte_40372:	
		dc.b $17,$88,  0,$3B,$45,  0,$45,  4,$45,  1,$45,  5,$45,  8,$45, $C ; 0		
		dc.b $45,  9,$45, $D,$45,$10,$45,$14,$45,$11,$45,$15,$45,  2,$45,  6 ; 16
		dc.b $45,  3,$45,  7,$45, $A,$45, $E,$45, $B,$45, $F,$45,$12,$45,$16 ; 32
		dc.b $45,$13,$45,$17,$65,$18,$65,$1A,$65,$19,$65,$1B,$65,$1C,$65,$1E ; 48
		dc.b $65,$1D,$65,$1F,$43,$9C,$4B,$9C,$43,$9D,$4B,$9D,$41,$58,$43,$9C ; 64
		dc.b $41,$59,$43,$9D,$4B,$9C,$49,$58,$4B,$9D,$49,$59,$63,$94,$6B,$94 ; 80
		dc.b $63,$95,$6B,$95,$E3,$96,$EB,$96,$E3,$97,$EB,$97,$63,$98,$6B,$98 ; 96
		dc.b $63,$99,$6B,$99,$E3,$9A,$EB,$9A,$E3,$9B,$EB,$9B ; 112

byte_403EE:	
		dc.b $17,$30,  0,$67,$23,$5C,$2B,$5C,$23,$5D,$2B,$5D,$23,$5E,$2B,$5E ; 0		
		dc.b $23,$5F,$2B,$5F,$63,$5A,$63,$5A,$63,$5B,$63,$5B,$63,$58,$63,$58 ; 16
		dc.b $63,$59,$63,$59,$63,$56,$63,$56,$63,$57,$63,$57,$63,$54,$63,$54 ; 32
		dc.b $63,$55,$63,$55,$63,$52,$63,$52,$63,$53,$63,$53,$63,$50,$63,$50 ; 48
		dc.b $63,$51,$63,$51,$63,$4E,$63,$4E,$63,$4F,$63,$4F,$63,$4C,$63,$4C ; 64
		dc.b $63,$4D,$63,$4D,$23,$60,$2B,$60,$23,$61,$2B,$61,$23,$62,$2B,$62 ; 80
		dc.b $23,$63,$2B,$63,$23,$64,$2B,$64,$23,$65,$2B,$65,$23,$66,$2B,$66 ; 96
		dc.b $23,$67,$2B,$67,$C0,  0,$C0,  0,$C3,$40,$C3,$41,$C0,  0,$C0,  0 ; 112
		dc.b $C3,$42,$C3,$43,$C3,$44,$C3,$45,$C3,$48,$C3,$49,$C3,$46,$C3,$47 ; 128
		dc.b $C3,$4A,$C3,$4B,$E3,$5A,$E3,$5A,$E3,$5B,$E3,$5B,$E3,$58,$E3,$58 ; 144
		dc.b $E3,$59,$E3,$59,$E3,$56,$E3,$56,$E3,$57,$E3,$57,$E3,$54,$E3,$54 ; 160
		dc.b $E3,$55,$E3,$55,$E3,$52,$E3,$52,$E3,$53,$E3,$53,$E3,$50,$E3,$50 ; 176
		dc.b $E3,$51,$E3,$51,$E3,$4E,$E3,$4E,$E3,$4F,$E3,$4F,$E3,$4C,$E3,$4C ; 192
		dc.b $E3,$4D,$E3,$4D				; 208

byte_404C2:	
		dc.b $17,$10,  0,$77,$62,$E8,$62,$E9,$62,$EA,$62,$EB,$62,$EC,$62,$ED ; 0				
		dc.b $62,$EE,$62,$EF,$62,$F0,$62,$F1,$62,$F2,$62,$F3,$62,$F4,$62,$F5 ; 16
		dc.b $62,$F6,$62,$F7,$62,$F8,$62,$F9,$62,$FA,$62,$FB,$62,$FC,$62,$FD ; 32
		dc.b $62,$FE,$62,$FF,$42,$E8,$42,$E9,$42,$EA,$42,$EB,$42,$EC,$42,$ED ; 48
		dc.b $42,$EE,$42,$EF,$42,$F0,$42,$F1,$42,$F2,$42,$F3,$42,$F4,$42,$F5 ; 64
		dc.b $42,$F6,$42,$F7,$42,$F8,$42,$F9,$42,$FA,$42,$FB,$42,$FC,$42,$FD ; 80
		dc.b $42,$FE,$42,$FF,  0,  0,$62,$E8,  0,  0,$62,$EA,$62,$E9,$62,$EC ; 96
		dc.b $62,$EB,$62,$EE,$62,$ED,  0,  0,$62,$EF,  0,  0,  0,  0,$62,$F0 ; 112
		dc.b   0,  0,$62,$F2,$62,$F1,$62,$F4,$62,$F3,$62,$F6,$62,$F5,  0,  0 ; 128
		dc.b $62,$F7,  0,  0,  0,  0,$62,$F8,  0,  0,$62,$FA,$62,$F9,$62,$FC ; 144
		dc.b $62,$FB,$62,$FE,$62,$FD,  0,  0,$62,$FF,  0,  0,  0,  0,$42,$E8 ; 160
		dc.b   0,  0,$42,$EA,$42,$E9,$42,$EC,$42,$EB,$42,$EE,$42,$ED,  0,  0 ; 176
		dc.b $42,$EF,  0,  0,  0,  0,$42,$F0,  0,  0,$42,$F2,$42,$F1,$42,$F4 ; 192
		dc.b $42,$F3,$42,$F6,$42,$F5,  0,  0,$42,$F7,  0,  0,  0,  0,$42,$F8 ; 208
		dc.b   0,  0,$42,$FA,$42,$F9,$42,$FC,$42,$FB,$42,$FE,$42,$FD,  0,  0 ; 224
		dc.b $42,$FF,  0,  0				; 240

byte_405B6:	
		dc.b $17,$A0,  0,$2F,$82,$B6,$82,$B8,$82,$B7,$82,$B9,$E2,$BA,$E2,$BB ; 0		
		dc.b $E2,$BC,$E2,$BD,  0,  0,$62,$BE,  0,  0,$62,$C0,$62,$BF,  0,  0 ; 16
		dc.b $62,$C1,  0,  0,$C2,$C2,$C2,$C3,$C2,$CA,$C2,$CB,$C2,$C4,$C2,$C5 ; 32
		dc.b $C2,$CC,$C2,$CD,$C2,$C6,$C2,$C7,$C2,$CE,$C2,$CF,$C2,$C8,$C2,$C9 ; 48
		dc.b $C2,$D0,$C2,$D1,$C2,$D2,$C2,$D3,$C2,$DA,$C2,$DB,$C2,$D4,$C2,$D5 ; 64
		dc.b $C2,$DC,$C2,$DD,$C2,$D6,$C2,$D7,$C2,$DE,$C2,$DF,$C2,$D8,$C2,$D9 ; 80
		dc.b $C2,$E0,$C2,$E1				; 96

byte_4061A:	
		dc.b $17,$60,  0,$4F,  5,$50,  5,$54,  5,$51,  5,$55,  5,$58,  5,$5C ; 0	
		dc.b   5,$59,  5,$5D,  5,$52,  5,$56,  5,$53,  5,$57,  5,$5A,  5,$5E ; 16
		dc.b   5,$5B,  5,$5F,  5,$60,  5,$64,  5,$61,  5,$65,  5,$68,  5,$6C ; 32
		dc.b   5,$69,  5,$6D,  5,$62,  5,$66,  5,$63,  5,$67,  5,$6A,  5,$6E ; 48
		dc.b   5,$6B,  5,$6F,  5,$70,  5,$74,  5,$71,  5,$75,  5,$78,  5,$7C ; 64
		dc.b   5,$79,  5,$7D,  5,$72,  5,$76,  5,$73,  5,$77,  5,$7A,  5,$7E ; 80
		dc.b   5,$7B,  5,$7F,$E5,$40,$E5,$44,$E5,$41,$E5,$45,$E5,$48,$E5,$4C ; 96
		dc.b $E5,$49,$E5,$4D,$E5,$42,$E5,$46,$E5,$43,$E5,$47,$E5,$4A,$E5,$4E ; 112
		dc.b $E5,$4B,$E5,$4F,$E3,$30,$E3,$34,$E3,$31,$E3,$35,$E3,$38,$E3,$3C ; 128
		dc.b $E3,$39,$E3,$3D,$E3,$32,$E3,$36,$E3,$33,$E3,$37,$E3,$3A,$E3,$3E ; 144
		dc.b $E3,$3B,$E3,$3F				; 160

byte_406BE:	
		dc.b $17,$60,  0,$4F,  7,$50,  7,$54,  7,$51,  7,$55,  7,$58,  7,$5C		
		dc.b   7,$59,  7,$5D,  7,$52,  7,$56,  7,$53,  7,$57,  7,$5A,  7,$5E
		dc.b   7,$5B,  7,$5F,  7,$60,  7,$64,  7,$61,  7,$65,  7,$68,  7,$6C
		dc.b   7,$69,  7,$6D,  7,$62,  7,$66,  7,$63,  7,$67,  7,$6A,  7,$6E
		dc.b   7,$6B,  7,$6F,  7,$70,  7,$74,  7,$71,  7,$75,  7,$78,  7,$7C
		dc.b   7,$79,  7,$7D,  7,$72,  7,$76,  7,$73,  7,$77,  7,$7A,  7,$7E
		dc.b   7,$7B,  7,$7F,$E7,$40,$E7,$44,$E7,$41,$E7,$45,$E7,$48,$E7,$4C
		dc.b $E7,$49,$E7,$4D,$E7,$42,$E7,$46,$E7,$43,$E7,$47,$E7,$4A,$E7,$4E
		dc.b $E7,$4B,$E7,$4F,$E3,$30,$E3,$34,$E3,$31,$E3,$35,$E3,$38,$E3,$3C
		dc.b $E3,$39,$E3,$3D,$E3,$32,$E3,$36,$E3,$33,$E3,$37,$E3,$3A,$E3,$3E
		dc.b $E3,$3B,$E3,$3F

byte_40762:	
		dc.b $17,$F8,  0,  3,$43,$70,$43,$71,$43,$70,$43,$71 ; 0
					

byte_4076E:
		dc.b $17,$F8,  0,  3,$43,$26,$43,$27,$43,$26,$43,$27 ; 0
					
byte_4077A:	
		dc.b $17,$C0,  0,$1F,$C4,$28,$C4,$29,$C4,$2A,$C4,$2B,$C4,$2C,$C4,$2D ; 0		
		dc.b $C4,$2E,$C4,$2F,$C4,$30,$C4,$31,$C4,$32,$C4,$33,$C5,$63,$C5,$64 ; 16
		dc.b $C5,$65,$C5,$66,$44,$28,$44,$29,$44,$2A,$44,$2B,$44,$2C,$44,$2D ; 32
		dc.b $44,$2E,$44,$2F,$44,$30,$44,$31,$44,$32,$44,$33,$45,$63,$45,$64 ; 48
		dc.b $45,$65,$45,$66				; 64
byte_407BE:	dc.b   0,  0					; 0 
; ===========================================================================

loc_407C0:				
		lea	(Nem_HTZCliffs).l,a0
		lea	($FFFFB800).w,a4
		jsrto	NemDecToRAM,JmpTo2_NemDecToRAM
		lea	($FFFFB800).w,a1
		lea_	word_3FD9C,a4
		moveq	#0,d2
		moveq	#7,d4

loc_407DA:				
		moveq	#5,d3

loc_407DC:				
		moveq	#-1,d0
		move.w	(a4)+,d0
		movea.l	d0,a2
		moveq	#$1F,d1

loc_407E4:				
		move.l	(a1),(a2)+
		move.l	d2,(a1)+
		dbf	d1,loc_407E4
		dbf	d3,loc_407DC
		adda.w	#$C,a4
		dbf	d4,loc_407DA
		rts	
; ===========================================================================

	if Revision<2
		nop	
	endc
	
	if RemoveJmpTos=0
JmpTo2_NemDecToRAM:				
		jmp	NemDecToRAM
		align 4
	endc

; ===========================================================================

BuildHUD:				
		tst.w	(v_rings).w
		beq.s	loc_40820
		moveq	#0,d1
		btst	#3,(v_frame_counter_low).w
		bne.s	loc_4081E
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_4081E
		addq.w	#2,d1

loc_4081E:				
		bra.s	loc_40836
; ===========================================================================

loc_40820:				
		moveq	#0,d1
		btst	#3,(v_frame_counter_low).w
		bne.s	loc_40836
		addq.w	#1,d1
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_40836
		addq.w	#2,d1

loc_40836:				
		move.w	#$90,d3	
		move.w	#$108,d2
		lea	(off_40A9A).l,a1
		movea.w	#-$7936,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	locret_40858
		jsrto	BuildSpr_DrawLoop,JmpTo_BuildSpr_DrawLoop

locret_40858:				
		rts	

; ===========================================================================

BuildHUD_P1:				
		tst.w	(v_rings).w
		beq.s	loc_40876
		moveq	#0,d1
		btst	#3,(v_frame_counter_low).w
		bne.s	loc_40874
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_40874
		addq.w	#2,d1

loc_40874:				
					
		bra.s	loc_4088C
; ===========================================================================

loc_40876:				
		moveq	#0,d1
		btst	#3,(v_frame_counter_low).w
		bne.s	loc_4088C
		addq.w	#1,d1
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_4088C
		addq.w	#2,d1

loc_4088C:				
					
		move.w	#$90,d3	
		move.w	#$188,d2
		lea	(off_40BEA).l,a1
		movea.w	#$8365,a3	
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P
		move.w	#$B8,d3	
		move.w	#$108,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_time_min).w,d7
		bsr.w	sub_4092E
		bsr.w	sub_4096A
		moveq	#0,d7
		move.b	(v_time_sec).w,d7
		bsr.w	loc_40938
		move.w	#$C0,d3	
		move.w	#$118,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7

loc_408DE:
		move.w	(v_rings).w,d7
		bsr.w	sub_40984
		tst.b	(f_hud_time_update_p2).w
		bne.s	loc_40908
		tst.b	(f_hud_time_update).w
		beq.s	loc_40908
		move.w	#$110,d3
		move.w	#$1B8,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_loser_time_left).w,d7
		bsr.w	loc_40938

loc_40908:				
					
		moveq	#4,d1

loc_4090A:
		move.w	#$90,d3	
		move.w	#$188,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7C9B,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P
		moveq	#0,d4
		rts	

; ===========================================================================


sub_4092E:				
					
		lea	(byte_41210).l,a4
		moveq	#0,d6
		bra.s	loc_40940
; ===========================================================================

loc_40938:				
					
		lea	(byte_4120C).l,a4
		moveq	#1,d6

loc_40940:				
					
		moveq	#0,d1
		move.l	(a4)+,d4

loc_40944:				
		sub.l	d4,d7
		bcs.s	loc_4094C
		addq.w	#1,d1
		bra.s	loc_40944
; ===========================================================================

loc_4094C:				
		add.l	d4,d7
		lea	(off_40C82).l,a1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P
		addq.w	#8,d3
		dbf	d6,loc_40940
		rts	


; ===========================================================================


sub_4096A:				
					
		moveq	#$A,d1
		lea	(off_40C82).l,a1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P
		addq.w	#8,d3
		rts	

; ===========================================================================


sub_40984:				
					
		lea	(byte_41208).l,a4
		moveq	#2,d6

loc_4098C:				
		moveq	#0,d1
		move.l	(a4)+,d4

loc_40990:				
		sub.l	d4,d7
		bcs.s	loc_40998
		addq.w	#1,d1
		bra.s	loc_40990
; ===========================================================================

loc_40998:				
		add.l	d4,d7
		tst.w	d6
		beq.s	loc_409AA
		tst.w	d1
		beq.s	loc_409A6
		bset	#$1F,d6

loc_409A6:				
		tst.l	d6
		bpl.s	loc_409BE

loc_409AA:				
		lea	(off_40C82).l,a1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P

loc_409BE:				
		addq.w	#8,d3
		dbf	d6,loc_4098C
		rts	

; ===========================================================================

BuildHUD_P2:				
		tst.w	(v_rings_p2).w
		beq.s	loc_409E2
		moveq	#0,d1
		btst	#3,(v_frame_counter_low).w
		bne.s	loc_409E0
		cmpi.b	#9,(v_time_min_p2).w
		bne.s	loc_409E0
		addq.w	#2,d1

loc_409E0:				
					
		bra.s	loc_409F8
; ===========================================================================

loc_409E2:				
		moveq	#0,d1
		btst	#3,(v_frame_counter_low).w
		bne.s	loc_409F8
		addq.w	#1,d1
		cmpi.b	#9,(v_time_min_p2).w
		bne.s	loc_409F8
		addq.w	#2,d1

loc_409F8:				
					
		move.w	#$90,d3	
		move.w	#$268,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7C9B,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P
		move.w	#$B8,d3	
		move.w	#$1E8,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_time_min_p2).w,d7
		bsr.w	sub_4092E
		bsr.w	sub_4096A
		moveq	#0,d7
		move.b	(v_time_sec_p2).w,d7
		bsr.w	loc_40938
		move.w	#$C0,d3	
		move.w	#$1F8,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.w	(v_rings_p2).w,d7
		bsr.w	sub_40984
		tst.b	(f_hud_time_update).w
		bne.s	loc_40A74
		tst.b	(f_hud_time_update_p2).w
		beq.s	loc_40A74
		move.w	#$110,d3
		move.w	#$298,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_loser_time_left).w,d7
		bsr.w	loc_40938

loc_40A74:				
					
		moveq	#5,d1
		move.w	#$90,d3	
		move.w	#$268,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7CC0,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		jsrto	BuildSpr_DrawLoop_2P,JmpTo_BuildSpr_DrawLoop_2P
		moveq	#0,d4
		rts	
; ===========================================================================
off_40A9A:	dc.w word_40AA2-off_40A9A			; 0 
					
		dc.w word_40AF4-off_40A9A			; 1
		dc.w word_40B46-off_40A9A			; 2
		dc.w word_40B98-off_40A9A			; 3
word_40AA2:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C ; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,$2010,$2008 ; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,$2008,$2004 ; 16
		dc.w	 0,$A001,$2000,$2000,  $20,$A009,$2030,$2018 ; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087 ; 32
		dc.w   $10					; 40
word_40AF4:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C ; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,$2010,$2008 ; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,    8,	   4 ; 16
		dc.w	 0,$A001,    0,	   0,  $20,$A009,$2030,$2018 ; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087 ; 32
		dc.w   $10					; 40
word_40B46:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C ; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,  $10,	   8 ; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,$2008,$2004 ; 16
		dc.w	 0,$A001,$2000,$2000,  $20,$A009,$2030,$2018 ; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087 ; 32
		dc.w   $10					; 40
word_40B98:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C ; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,  $10,	   8 ; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,    8,	   4 ; 16
		dc.w	 0,$A001,    0,	   0,  $20,$A009,$2030,$2018 ; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087 ; 32
		dc.w   $10					; 40
off_40BEA:	dc.w word_40BF6-off_40BEA			; 0 
					
		dc.w word_40C10-off_40BEA			; 1
		dc.w word_40C2A-off_40BEA			; 2
		dc.w word_40C44-off_40BEA			; 3
		dc.w word_40C5E-off_40BEA			; 4
		dc.w word_40C70-off_40BEA			; 5
word_40BF6:	dc.w	 3,$800D,$2010,$2008,	 0,$900D,$2008,$2004 ; 0
					
		dc.w	 0,$9001,$2000,$2000,  $20		; 8
word_40C10:	dc.w	 3,$800D,$2010,$2008,	 0,$900D,    8,	   4 ; 0
					
		dc.w	 0,$9001,    0,	   0,  $20		; 8
word_40C2A:	dc.w	 3,$800D,  $10,	   8,	 0,$900D,$2008,$2004 ; 0
					
		dc.w	 0,$9001,$2000,$2000,  $20		; 8
word_40C44:	dc.w	 3,$800D,  $10,	   8,	 0,$900D,    8,	   4 ; 0
					
		dc.w	 0,$9001,    0,	   0,  $20		; 8
word_40C5E:	dc.w	 2,$4005, $10A,	 $85,	 0,$400D,$210E,$2087 ; 0
					
		dc.w   $10					; 8
word_40C70:	dc.w	 2,$4005,  $1C,	  $E,	 0,$400D,$2078,$203C ; 0
					
		dc.w   $10					; 8
off_40C82:	dc.w byte_40C98-off_40C82			; 0 
					
		dc.w byte_40CA2-off_40C82			; 1
		dc.w byte_40CAC-off_40C82			; 2
		dc.w byte_40CB6-off_40C82			; 3
		dc.w byte_40CC0-off_40C82			; 4
		dc.w byte_40CCA-off_40C82			; 5
		dc.w byte_40CD4-off_40C82			; 6
		dc.w byte_40CDE-off_40C82			; 7
		dc.w byte_40CE8-off_40C82			; 8
		dc.w byte_40CF2-off_40C82			; 9
		dc.w byte_40CFC-off_40C82			; 10
byte_40C98:	dc.b   0,  1,  0,  1,$20,  0,$20,  0,  0,  0	; 0	
byte_40CA2:	dc.b   0,  1,  0,  1,$20,  2,$20,  1,  0,  0	; 0	
byte_40CAC:	dc.b   0,  1,  0,  1,$20,  4,$20,  2,  0,  0	; 0	
byte_40CB6:	dc.b   0,  1,  0,  1,$20,  6,$20,  3,  0,  0	; 0	
byte_40CC0:	dc.b   0,  1,  0,  1,$20,  8,$20,  4,  0,  0	; 0	
byte_40CCA:	dc.b   0,  1,  0,  1,$20, $A,$20,  5,  0,  0	; 0	
byte_40CD4:	dc.b   0,  1,  0,  1,$20, $C,$20,  6,  0,  0	; 0	
byte_40CDE:	dc.b   0,  1,  0,  1,$20, $E,$20,  7,  0,  0	; 0	
byte_40CE8:	dc.b   0,  1,  0,  1,$20,$10,$20,  8,  0,  0	; 0	
byte_40CF2:	dc.b   0,  1,  0,  1,$20,$12,$20,  9,  0,  0	; 0	
byte_40CFC:	dc.b   0,  1,  0,  1,$20,$14,$20, $A,  0,  0	; 0	

; ===========================================================================


AddPoints:				
					
		move.b	#1,(f_hud_score_update).w
		lea	(v_score).w,a3
		add.l	d0,(a3)
		move.l	#999999,d1
		cmp.l	(a3),d1
		bhi.s	loc_40D1E
		move.l	d1,(a3)

loc_40D1E:				
		move.l	(a3),d0
		cmp.l	(v_score_next_life).w,d0
		bcs.s	locret_40D40
		addi.l	#$1388,(v_score_next_life).w
		addq.b	#1,(v_lives).w
		addq.b	#1,(f_hud_lives_update).w
		move.w	#$98,d0	
		jmp	PlayMusic
; ===========================================================================

locret_40D40:				
		rts	

; ===========================================================================


AddPoints2:				
		tst.w	(f_two_player).w
		beq.s	AddPoints
		cmpa.w	#-$5000,a3
		beq.s	AddPoints
		move.b	#1,(f_hud_score_update_p2).w
		lea	(v_score_p2).w,a3
		add.l	d0,(a3)
		move.l	#999999,d1
		cmp.l	(a3),d1
		bhi.s	loc_40D66
		move.l	d1,(a3)

loc_40D66:				
		move.l	(a3),d0
		cmp.l	(v_score_next_life_p2).w,d0
		bcs.s	locret_40D88
		addi.l	#$1388,(v_score_next_life_p2).w
		addq.b	#1,(v_lives_p2).w
		addq.b	#1,(f_hud_lives_update_p2).w
		move.w	#$98,d0	
		jmp	PlayMusic
; ===========================================================================

locret_40D88:				
		rts	


; ===========================================================================


HUD_Update:				
		nop	
		lea	(vdp_data_port).l,a6
		tst.w	(f_two_player).w
		bne.w	loc_40F50
		tst.w	(f_debug_enable).w
		bne.w	loc_40E9A
		tst.b	(f_hud_score_update).w
		beq.s	loc_40DBA
		clr.b	(f_hud_score_update).w
		move.l	#$5C800003,d0
		move.l	(v_score).w,d1
		bsr.w	sub_41146

loc_40DBA:				
		tst.b	(v_hud_rings_update).w
		beq.s	loc_40DDA
		bpl.s	loc_40DC6
		bsr.w	sub_4105A

loc_40DC6:				
		clr.b	(v_hud_rings_update).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(v_rings).w,d1
		bsr.w	sub_4113C

loc_40DDA:				
		tst.b	(f_hud_time_update).w
		beq.s	loc_40E38
		tst.w	(f_pause).w
		bne.s	loc_40E38
		lea	(v_time).w,a1
		cmpi.l	#$93B3B,(a1)+
		beq.w	loc_40E84
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	loc_40E38
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	loc_40E18
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_40E18
		move.b	#9,(a1)

loc_40E18:				
					
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.b	(v_time_min).w,d1
		bsr.w	sub_41214
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(v_time_sec).w,d1
		bsr.w	loc_4121C

loc_40E38:				
					
		tst.b	(f_hud_lives_update).w
		beq.s	loc_40E46
		clr.b	(f_hud_lives_update).w
		bsr.w	sub_412E2

loc_40E46:				
		tst.b	(f_pass_bonus_update).w
		beq.s	locret_40E82
		clr.b	(f_pass_bonus_update).w
		move.l	#$64000002,(vdp_control_port).l
		moveq	#0,d1
		move.w	(v_total_bonus_countdown).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_1).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_2).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_3).w,d1
		bsr.w	loc_41274

locret_40E82:				
		rts	
; ===========================================================================

loc_40E84:				
		clr.b	(f_hud_time_update).w
		lea	($FFFFB000).w,a0
		movea.l	a0,a2
		bsr.w	KillCharacter
		move.b	#1,(f_time_over).w
		rts	
; ===========================================================================

loc_40E9A:				
		bsr.w	sub_410E4
		tst.b	(v_hud_rings_update).w
		beq.s	loc_40EBE
		bpl.s	loc_40EAA
		bsr.w	sub_4105A

loc_40EAA:				
		clr.b	(v_hud_rings_update).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(v_rings).w,d1
		bsr.w	sub_4113C

loc_40EBE:				
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(v_spritecount).w,d1
		bsr.w	loc_4121C
		tst.b	(f_hud_lives_update).w
		beq.s	loc_40EDC
		clr.b	(f_hud_lives_update).w
		bsr.w	sub_412E2

loc_40EDC:				
		tst.b	(f_pass_bonus_update).w
		beq.s	loc_40F18
		clr.b	(f_pass_bonus_update).w
		move.l	#$64000002,(vdp_control_port).l
		moveq	#0,d1
		move.w	(v_total_bonus_countdown).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_1).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_2).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_3).w,d1
		bsr.w	loc_41274

loc_40F18:				
		tst.w	(f_pause).w
		bne.s	locret_40F4E
		lea	(v_time).w,a1
		cmpi.l	#604987,(a1)+
		nop	
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	locret_40F4E
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	locret_40F4E
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	locret_40F4E
		move.b	#9,(a1)

locret_40F4E:				
					
		rts	
; ===========================================================================

loc_40F50:				
		tst.w	(f_pause).w
		bne.w	locret_4101A
		tst.b	(f_hud_time_update).w
		beq.s	loc_40F90
		lea	(v_time).w,a1
		cmpi.l	#$93B3B,(a1)+
		beq.w	TimeOver
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	loc_40F90
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	loc_40F90
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_40F90
		move.b	#9,(a1)

loc_40F90:				
					
		tst.b	(f_hud_time_update_p2).w
		beq.s	loc_40FC8
		lea	(v_time_p2).w,a1
		cmpi.l	#$93B3B,(a1)+
		beq.w	TimeOver2
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	loc_40FC8
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1)
		bcs.s	loc_40FC8
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_40FC8
		move.b	#9,(a1)

loc_40FC8:				
					
		tst.b	(f_hud_lives_update).w
		beq.s	loc_40FD6
		clr.b	(f_hud_lives_update).w
		bsr.w	sub_412E2

loc_40FD6:				
		tst.b	(f_hud_lives_update_p2).w
		beq.s	loc_40FE4
		clr.b	(f_hud_lives_update_p2).w
		bsr.w	sub_412D4

loc_40FE4:				
		move.b	(f_hud_time_update).w,d0
		or.b	(f_hud_time_update_p2).w,d0
		beq.s	locret_4101A
		lea	(v_loser_time_left).w,a1
		tst.w	(a1)+
		beq.s	locret_4101A
		subq.b	#1,-(a1)
		bhi.s	locret_4101A
		move.b	#$3C,(a1)

loc_40FFE:
		cmpi.b	#$C,-1(a1)
		bne.s	loc_41010
		move.w	#$9F,d0	

loc_4100A:
		jsr	(PlayMusic).l

loc_41010:				
		subq.b	#1,-(a1)
		bcc.s	locret_4101A
		move.w	#0,(a1)
		bsr.s	TimeOver0

locret_4101A:							
		rts	


; ===========================================================================


TimeOver0:				
		tst.b	(f_hud_time_update).w
		bne.s	TimeOver
		tst.b	(f_hud_time_update_p2).w
		bne.s	TimeOver2
		rts	
; ===========================================================================

TimeOver:							
		clr.b	(f_hud_time_update).w
		lea	(v_ost_player1).w,a0
		movea.l	a0,a2
		bsr.w	KillCharacter
		move.b	#1,(f_time_over).w
		tst.b	(f_hud_time_update_p2).w
		beq.s	locret_41058

TimeOver2:				
					
		clr.b	(f_hud_time_update_p2).w
		lea	(v_ost_player2).w,a0
		movea.l	a0,a2
		bsr.w	KillCharacter
		move.b	#1,(f_time_over_p2).w

locret_41058:				
		rts	


; ===========================================================================


sub_4105A:				
					
		move.l	#$5F400003,(vdp_control_port).l
		lea	byte_410E0(pc),a2
		move.w	#2,d2
		bra.s	loc_41090
; ===========================================================================

HUD_Base:				
		lea	(vdp_data_port).l,a6
		bsr.w	sub_412E2
		tst.w	(f_two_player).w
		bne.s	loc_410BC
		move.l	#$5C400003,(vdp_control_port).l
		lea	byte_410D4(pc),a2
		move.w	#$E,d2

loc_41090:				
		lea	Art_HUD(pc),a1

loc_41094:				
		move.w	#$F,d1
		move.b	(a2)+,d0
		bmi.s	loc_410B0
		ext.w	d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a3

loc_410A4:				
		move.l	(a3)+,(a6)
		dbf	d1,loc_410A4

loc_410AA:				
		dbf	d2,loc_41094
		rts	
; ===========================================================================

loc_410B0:				
					
		move.l	#0,(a6)
		dbf	d1,loc_410B0
		bra.s	loc_410AA

; ===========================================================================

loc_410BC:				
		bsr.w	sub_412D4
		move.l	#Art_HUD,d1
		move.w	#$DC40,d2
		move.w	#$160,d3
		jmp	AddDMA
; ===========================================================================
byte_410D4:	
		dc.b $16					; 0 
		dc.b $FF					; 1
		dc.b $FF					; 2
		dc.b $FF					; 3
		dc.b $FF					; 4
		dc.b $FF					; 5
		dc.b $FF					; 6
		dc.b   0					; 7
		dc.b   0					; 8
		dc.b $14					; 9
		dc.b   0					; 10
		dc.b   0					; 11
byte_410E0:	
		dc.b $FF					; 0 
		dc.b $FF					; 1
		dc.b   0					; 2
		dc.b   0					; 3

; ===========================================================================


sub_410E4:				
		move.l	#$5C400003,(vdp_control_port).l
		move.w	(v_camera_x_pos).w,d1
		swap	d1
		move.w	($FFFFB008).w,d1
		bsr.s	loc_41104
		move.w	(v_camera_y_pos).w,d1
		swap	d1
		move.w	($FFFFB00C).w,d1

loc_41104:				
		moveq	#7,d6
		lea	(Art_HUDText).l,a1

loc_4110C:				
		rol.w	#4,d1
		move.w	d1,d2
		andi.w	#$F,d2
		cmpi.w	#$A,d2
		bcs.s	loc_4111E
		addi_.w	#7,d2

loc_4111E:				
		lsl.w	#5,d2
		lea	(a1,d2.w),a3
		rept 8
		move.l	(a3)+,(a6)
		endr
		swap	d1
		dbf	d6,loc_4110C
		rts	


; ===========================================================================


sub_4113C:				
					
		lea	(byte_41208).l,a2
		moveq	#2,d6
		bra.s	loc_4114E

; ===========================================================================


sub_41146:				
		lea	(byte_411FC).l,a2
		moveq	#5,d6

loc_4114E:				
		moveq	#0,d4
		lea	Art_HUD(pc),a1

loc_41154:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_41158:				
		sub.l	d3,d1
		bcs.s	loc_41160
		addq.w	#1,d2
		bra.s	loc_41158
; ===========================================================================

loc_41160:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_4116A
		move.w	#1,d4

loc_4116A:				
		tst.w	d4
		beq.s	loc_41198
		lsl.w	#6,d2
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		lea	(a1,d2.w),a3
		rept 16
		move.l	(a3)+,(a6)
		endr

loc_41198:				
		addi.l	#$400000,d0
		dbf	d6,loc_41154
		rts	


; ===========================================================================

sub_411A4:				
					
		move.l	#$5F800003,(vdp_control_port).l
		lea	(vdp_data_port).l,a6
		lea	(byte_4120C).l,a2			; could be PC-relative
		moveq	#1,d6
		moveq	#0,d4
		lea	Art_HUD(pc),a1

loc_411C2:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_411C6:				
		sub.l	d3,d1
		bcs.s	loc_411CE
		addq.w	#1,d2
		bra.s	loc_411C6
; ===========================================================================

loc_411CE:				
		add.l	d3,d1
		lsl.w	#6,d2
		lea	(a1,d2.w),a3
		rept 16
		move.l	(a3)+,(a6)
		endr
		dbf	d6,loc_411C2
		rts	

; ===========================================================================
byte_411FC:	
		dc.b   0					; 0 
		dc.b   1					; 1
		dc.b $86					; 2
		dc.b $A0					; 3
		dc.b   0					; 4
		dc.b   0					; 5
		dc.b $27					; 6
		dc.b $10					; 7
		
byte_41204:
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   3					; 2
		dc.b $E8					; 3
		
byte_41208:	
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b $64					; 3
		
byte_4120C:	
		dc.b   0					; 0 			
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b  $A					; 3
		
byte_41210:	
		dc.b   0					; 0 
		dc.b   0					; 1
		dc.b   0					; 2
		dc.b   1					; 3

; ===========================================================================


sub_41214:				
		lea_	byte_41210,a2
		moveq	#0,d6
		bra.s	loc_41222
; ===========================================================================

loc_4121C:				
					
		lea_	byte_4120C,a2
		moveq	#1,d6

loc_41222:				
		moveq	#0,d4
		lea	Art_HUD(pc),a1

loc_41228:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_4122C:				
		sub.l	d3,d1
		bcs.s	loc_41234
		addq.w	#1,d2
		bra.s	loc_4122C
; ===========================================================================

loc_41234:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_4123E
		move.w	#1,d4

loc_4123E:				
		lsl.w	#6,d2
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		lea	(a1,d2.w),a3
		rept 16
		move.l	(a3)+,(a6)
		endr
		addi.l	#$400000,d0
		dbf	d6,loc_41228
		rts	


; ===========================================================================

loc_41274:								
		lea_	byte_41204,a2
		moveq	#3,d6
		moveq	#0,d4
		lea	Art_HUD(pc),a1

loc_41280:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_41284:				
		sub.l	d3,d1
		bcs.s	loc_4128C
		addq.w	#1,d2
		bra.s	loc_41284
; ===========================================================================

loc_4128C:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_41296
		move.w	#1,d4

loc_41296:				
		tst.w	d4
		beq.s	loc_412C6
		lsl.w	#6,d2
		lea	(a1,d2.w),a3
		rept 16
		move.l	(a3)+,(a6)
		endr

loc_412C0:				
		dbf	d6,loc_41280
		rts	
; ===========================================================================

loc_412C6:				
		moveq	#$F,d5

loc_412C8:				
		move.l	#0,(a6)
		dbf	d5,loc_412C8
		bra.s	loc_412C0

; ===========================================================================


sub_412D4:				
					
		move.l	#$5FA00003,d0
		moveq	#0,d1
		move.b	(v_lives_p2).w,d1
		bra.s	loc_412EE


; ===========================================================================


sub_412E2:							
		move.l	#$7BA00003,d0
		moveq	#0,d1
		move.b	(v_lives).w,d1

loc_412EE:				
		lea_	byte_4120C,a2
		moveq	#1,d6
		moveq	#0,d4
		lea	Art_LivesNums(pc),a1

loc_412FA:				
		move.l	d0,vdp_control_port-vdp_data_port(a6)
		moveq	#0,d2
		move.l	(a2)+,d3

loc_41302:				
		sub.l	d3,d1
		bcs.s	loc_4130A
		addq.w	#1,d2
		bra.s	loc_41302
; ===========================================================================

loc_4130A:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_41314
		move.w	#1,d4

loc_41314:				
		tst.w	d4
		beq.s	loc_4133A

loc_41318:				
		lsl.w	#5,d2
		lea	(a1,d2.w),a3
		rept 8
		move.l	(a3)+,(a6)
		endr

loc_4132E:				
		addi.l	#$400000,d0
		dbf	d6,loc_412FA
		rts	
; ===========================================================================

loc_4133A:				
		tst.w	d6
		beq.s	loc_41318
		moveq	#7,d5

loc_41340:				
		move.l	#0,(a6)
		dbf	d5,loc_41340
		bra.s	loc_4132E

; ===========================================================================

		incfile Art_HUD
		incfile	Art_LivesNums
		incfile	Art_HUDText

; ===========================================================================

	if RemoveJmpTos=0
JmpTo_BuildSpr_DrawLoop_2P:							
		jmp	BuildSpr_DrawLoop_2P
JmpTo_BuildSpr_DrawLoop:				
		jmp	BuildSpr_DrawLoop
		
		align 4
	endc
	
; ===========================================================================
; ---------------------------------------------------------------------------
; Psuedoobject that runs debug placement mode
; ---------------------------------------------------------------------------
; loc_41A78:
DebugMode:				
		moveq	#0,d0
		move.b	(v_debug_active).w,d0
		move.w	Debug_Index(pc,d0.w),d1
		jmp	Debug_Index(pc,d1.w)
; ===========================================================================
; off_41A86:
Debug_Index:
		dc.w loc_41A8A-Debug_Index			; 0 		
		dc.w loc_41B0C-Debug_Index			; 2
; ===========================================================================

loc_41A8A:				
		addq.b	#2,(v_debug_active).w
		move.w	(v_boundary_top_next).w,(v_boundary_top_next_debug).w
		move.w	(v_boundary_bottom_next).w,(v_boundary_bottom_next_debug).w
		cmpi.b	#$10,(v_zone).w
		bne.s	loc_41AAE
		move.w	#0,(v_boundary_left_next).w
		move.w	#$3FFF,(v_boundary_right_next).w

	loc_41AAE:				
		andi.w	#$7FF,(v_ost_player1+ost_y_pos).w
		andi.w	#$7FF,(v_camera_y_pos).w
		andi.w	#$7FF,(v_bg1_y_pos).w
		clr.b	(f_disable_horiz_scroll).w
		move.b	#0,ost_frame(a0)
		move.b	#0,ost_anim(a0)
		cmpi.b	#$10,(v_gamemode).w
		bne.s	loc_41ADC
		moveq	#6,d0
		bra.s	loc_41AE2
; ===========================================================================

loc_41ADC:				
		moveq	#0,d0
		move.b	(v_zone).w,d0

loc_41AE2:				
		lea	(off_41D0C).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d6
		cmp.b	(v_debug_item_index).w,d6
		bhi.s	loc_41AFC
		move.b	#0,(v_debug_item_index).w

loc_41AFC:				
		bsr.w	sub_41CEC
		move.b	#$C,(v_debug_move_delay).w
		move.b	#1,(v_debug_move_speed).w

loc_41B0C:				
		moveq	#6,d0
		cmpi.b	#$10,(v_gamemode).w
		beq.s	loc_41B1C
		moveq	#0,d0
		move.b	(v_zone).w,d0

loc_41B1C:				
		lea	(off_41D0C).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d6
		bsr.w	sub_41B34
		jmp	DisplaySprite

; ===========================================================================


sub_41B34:				
		moveq	#0,d4
		move.w	#1,d1
		move.b	(v_joypad_press_actual).w,d4
		andi.w	#$F,d4
		bne.s	loc_41B76
		move.b	(v_joypad_hold_actual).w,d0
		andi.w	#$F,d0
		bne.s	loc_41B5E
		move.b	#$C,(v_debug_move_delay).w
		move.b	#$F,(v_debug_move_speed).w
		bra.w	loc_41BDA
; ===========================================================================

loc_41B5E:				
		subq.b	#1,(v_debug_move_delay).w
		bne.s	loc_41B7A
		move.b	#1,(v_debug_move_delay).w
		addq.b	#1,(v_debug_move_speed).w
		bne.s	loc_41B76
		move.b	#-1,(v_debug_move_speed).w

loc_41B76:				
					
		move.b	(v_joypad_hold_actual).w,d4

loc_41B7A:				
		moveq	#0,d1
		move.b	(v_debug_move_speed).w,d1
		addq.w	#1,d1
		swap	d1
		asr.l	#4,d1
		move.l	ost_y_pos(a0),d2
		move.l	ost_x_pos(a0),d3
		btst	#0,d4
		beq.s	loc_41BA4
		sub.l	d1,d2
		moveq	#0,d0
		move.w	(v_boundary_top_next).w,d0
		swap	d0
		cmp.l	d0,d2
		bge.s	loc_41BA4
		move.l	d0,d2

loc_41BA4:				
					
		btst	#1,d4
		beq.s	loc_41BBE
		add.l	d1,d2
		moveq	#0,d0
		move.w	(v_boundary_bottom_next).w,d0
		addi.w	#$DF,d0	
		swap	d0
		cmp.l	d0,d2
		blt.s	loc_41BBE
		move.l	d0,d2

loc_41BBE:				
					
		btst	#2,d4
		beq.s	loc_41BCA
		sub.l	d1,d3
		bcc.s	loc_41BCA
		moveq	#0,d3

loc_41BCA:				
					
		btst	#3,d4
		beq.s	loc_41BD2
		add.l	d1,d3

loc_41BD2:				
		move.l	d2,ost_y_pos(a0)
		move.l	d3,ost_x_pos(a0)

loc_41BDA:				
		btst	#6,(v_joypad_hold_actual).w
		beq.s	loc_41C12
		btst	#5,(v_joypad_press_actual).w
		beq.s	loc_41BF6
		subq.b	#1,(v_debug_item_index).w
		bcc.s	loc_41C0E
		add.b	d6,(v_debug_item_index).w
		bra.s	loc_41C0E
; ===========================================================================

loc_41BF6:				
		btst	#6,(v_joypad_press_actual).w
		beq.s	loc_41C12
		addq.b	#1,(v_debug_item_index).w
		cmp.b	(v_debug_item_index).w,d6
		bhi.s	loc_41C0E
		move.b	#0,(v_debug_item_index).w

loc_41C0E:				
					
		bra.w	sub_41CEC
; ===========================================================================

loc_41C12:				
					
		btst	#5,(v_joypad_press_actual).w
		beq.s	loc_41C56
		jsr	FindFreeObj
		bne.s	loc_41C56
		move.w	ost_x_pos(a0),ost_x_pos(a1)
		move.w	ost_y_pos(a0),ost_y_pos(a1)
		_move.b	ost_mappings(a0),ost_id(a1)
		move.b	ost_render(a0),ost_render(a1)
    if FixBugs
		; 'render_onscreen is not cleared here. This causes
		; 'RunObjectDisplayOnly' to display the object even when it isn't
		; fully initialized. This causes the crash that occurs when you
		; attempt to spawn an object in Debug Mode while dead.
		andi.b	#(~render_onscreen)&$FF,ost_render(a1)
    endc		
		move.b	ost_render(a0),$22(a1)
		andi.b	#$7F,$22(a1)
		moveq	#0,d0
		move.b	(v_debug_item_index).w,d0
		lsl.w	#3,d0
		move.b	4(a2,d0.w),$28(a1)
		rts	
; ===========================================================================

loc_41C56:				
					
		btst	#4,(v_joypad_press_actual).w
		beq.s	locret_41CB6
		moveq	#0,d0
		move.w	d0,(v_debug_active).w
		lea	(v_ost_player1).w,a1
		move.l	#Map_Sonic,ost_mappings(a1)
		move.w	#tile_Sonic,ost_tile(a1)
		tst.w	(f_two_player).w
		beq.s	loc_41C82
		move.w	#tile_Sonic>>1,ost_tile(a1)

loc_41C82:				
		bsr.s	sub_41CB8
		move.b	#$13,ost_height(a1)
		move.b	#9,$17(a1)
		move.w	(v_boundary_top_next_debug).w,(v_boundary_top_next).w
		move.w	(v_boundary_bottom_next_debug).w,(v_boundary_bottom_next).w
		
		; Following four lines are unused Sonic 1 leftover, used when exiting debug mode
		; while in a Special Stage.
		cmpi.b	#$10,(v_gamemode).w
		bne.s	locret_41CB6
		move.b	#2,(v_ost_player1+ost_anim).w
		bset	#2,(v_ost_player1+ost_primary_status).w
		bset	#1,(v_ost_player1+ost_primary_status).w

locret_41CB6:						
		rts	

; ===========================================================================


sub_41CB8:				
		move.b	d0,$1C(a1)
		move.w	d0,ost_x_sub(a1)
		move.w	d0,ost_y_sub(a1)
		move.b	d0,$2A(a1)
		move.b	d0,$39(a1)
		move.w	d0,ost_x_vel(a1)
		move.w	d0,ost_y_vel(a1)
		move.w	d0,ost_inertia(a1)
		move.b	#2,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$25(a1)
		rts	

; ===========================================================================


sub_41CEC:							
		moveq	#0,d0
		move.b	(v_debug_item_index).w,d0
		lsl.w	#3,d0
		move.l	(a2,d0.w),ost_mappings(a0)
		move.w	6(a2,d0.w),ost_tile(a0)
		move.b	5(a2,d0.w),$1A(a0)
		jsrto	Adjust2PArtPointer,JmpTo66_Adjust2PArtPointer
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Offset index of object debug lists
; ---------------------------------------------------------------------------
off_41D0C:	
		dc.w DbgEHZ_41D40-off_41D0C			; 0 			
		dc.w DbgDef_41D2E-off_41D0C			; 1
		dc.w DbgDef_41D2E-off_41D0C			; 2
		dc.w DbgDef_41D2E-off_41D0C			; 3
		dc.w DbgMTZ_41DDA-off_41D0C			; 4
		dc.w DbgMTZ_41DDA-off_41D0C			; 5
		dc.w DbgWFZ_41EEC-off_41D0C			; 6
		dc.w DbgHTZ_41FEE-off_41D0C			; 7
		dc.w DbgOOZ_420E8-off_41D0C			; 8
		dc.w DbgDef_41D2E-off_41D0C			; 9
		dc.w DbgOOZ_420E8-off_41D0C			; 10
		dc.w DbgMCZ_421F2-off_41D0C			; 11
		dc.w DbgCNZ_422B4-off_41D0C			; 12
		dc.w DbgCPZ_42376-off_41D0C			; 13
		dc.w DbgDef_41D2E-off_41D0C			; 14
		dc.w DbgARZ_42438-off_41D0C			; 15
		dc.w DbgSCZ_42522-off_41D0C			; 16
DbgDef_41D2E:	dc.w 2			
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
DbgEHZ_41D40:	dc.w $13		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $49000000+Map_20C50
		dc.w 0
		dc.w $239E
		dc.l $49000000+Map_20C50
		dc.w $203
		dc.w $239E
		dc.l $49000000+Map_20C50
		dc.w $405
		dc.w $239E
		dc.l $18000000+Map_Plat_EHZ_HTZ
		dc.w $100
		dc.w $4000
		dc.l $18000000+Map_Plat_EHZ_HTZ
		dc.w $9A01
		dc.w $4000
		dc.l $36000000+Map_Spike
		dc.w 0
		dc.w $2434
		dc.l $41000000+Map_RedSpring
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_RedSpring
		dc.w $A006
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $3007
		dc.w $43C
		dc.l $41000000+Map_RedSpring
		dc.w $400A
		dc.w $43C
		dc.l $4B000000+Map_2D2EA
		dc.w 0
		dc.w $3D2
		dc.l $5C000000+Map_2D442
		dc.w 0
		dc.w $414
		dc.l $9D000000+Map_37D96
		dc.w $1E00
		dc.w $3EE
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgMTZ_41DDA:	dc.w $22		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $42000000+Map_2686C
		dc.w $107
		dc.w $6000
		dc.l $64000000+Map_26A5C
		dc.w $100
		dc.w $2000
		dc.l $64000000+Map_26A5C
		dc.w $1101
		dc.w $2000
		dc.l $65000000+Map_26EC8
		dc.w $8000
		dc.w $6000
		dc.l $65000000+Map_26EC8
		dc.w $1301
		dc.w $6000
		dc.l $47000000+Map_24D96
		dc.w 2
		dc.w $424
		dc.l $2D000000+Map_Barrier
		dc.w $101
		dc.w $6000
		dc.l $66000000+Map_27120
		dc.w $100
		dc.w $8680
		dc.l $66000000+Map_27120
		dc.w $1101
		dc.w $8680
		dc.l $68000000+Map_27750
		dc.w 4
		dc.w $6414
		dc.l $69000000+Map_27A26
		dc.w $400
		dc.w $2500
		dc.l $6A000000+Map_26EC8
		dc.w 1
		dc.w $6000
		dc.l $6B000000+Map_26EC8
		dc.w $701
		dc.w $6000
		dc.l $6D000000+Map_27750
		dc.w 0
		dc.w $241C
		dc.l $6E000000+Obj6E_MapUnc_2852C
		dc.w 0
		dc.w $6000
		dc.l $6E000000+Obj6E_MapUnc_2852C
		dc.w $1001
		dc.w $6000
		dc.l $6E000000+Obj6E_MapUnc_2852C
		dc.w $2002
		dc.w $6000
		dc.l $70000000+Map_28786
		dc.w $1000
		dc.w $E378
		dc.l $71000000+Map_LavaBubble
		dc.w $2205
		dc.w $4536
		dc.l $1C000000+Map_BoltEnd_Rope
		dc.w 0
		dc.w $43FD
		dc.l $1C000000+Map_BoltEnd_Rope
		dc.w $101
		dc.w $43FD
		dc.l $1C000000+Map_BoltEnd_Rope
		dc.w $302
		dc.w $23FD
		dc.l $65000000+Map_26EC8
		dc.w $B000
		dc.w $6000
		dc.l $9F000000+Map_38314
		dc.w $2400
		dc.w $31C
		dc.l $A4000000+Map_38A96
		dc.w $2E00
		dc.w $8368
		dc.l $A1000000+Map_385E2
		dc.w $2800
		dc.w $243C
		dc.l $31000000+Map_20E74
		dc.w 0
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $101
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $202
		dc.w $8680
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgWFZ_41EEC:	dc.w $20		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $8B000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $B3000000+Map_3B32C
		dc.w $5E00
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6001
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6202
		dc.w $454F
		dc.l $B4000000+Map_3B3BE
		dc.w $6400
		dc.w $A561
		dc.l $B5000000+Map_3B548
		dc.w $6600
		dc.w $A3CD
		dc.l $B5000000+Map_3B548
		dc.w $6800
		dc.w $A3CD
		dc.l $AD000000+Map_395B4
		dc.w $420C
		dc.w $379
		dc.l $AE000000+Map_395B4
		dc.w $440B
		dc.w $379
		dc.l $B6000000+Map_3B856
		dc.w $6A00
		dc.w $A393
		dc.l $B6000000+Map_3B856
		dc.w $6C00
		dc.w $A393
		dc.l $B6000000+Map_3B856
		dc.w $6E00
		dc.w $A393
		dc.l $B6000000+Map_3B856
		dc.w $7000
		dc.w $A393
		dc.l $B7000000+Map_3B8E4
		dc.w $7200
		dc.w $C39F
		dc.l $B8000000+Map_3BA46
		dc.w $7400
		dc.w $3AB
		dc.l $B9000000+Map_3BB18
		dc.w $7600
		dc.w $C3C3
		dc.l $BA000000+Map_3BB70
		dc.w $7800
		dc.w $C3EA
		dc.l $BC000000+Map_3BC08
		dc.w $7C00
		dc.w $4465
		dc.l $BD000000+Map_3BD3E
		dc.w $7E00
		dc.w $E40E
		dc.l $BD000000+Map_3BD3E
		dc.w $8000
		dc.w $E40E
		dc.l $BE000000+Map_3BE46
		dc.w $8200
		dc.w $E41A
		dc.l $BF000000+Map_3BEE0
		dc.w $8400
		dc.w $E450
		dc.l $C0000000+Map_3C098
		dc.w $800
		dc.w $245C
		dc.l $C1000000+Map_3C280
		dc.w $8800
		dc.w $E48C
		dc.l $C2000000+Map_3C3C2
		dc.w $8A00
		dc.w $A461
		dc.l $19000000+Map_2222A
		dc.w $3803
		dc.w $A46D
		dc.l $D9000000+Map_Ring
		dc.w 0
		dc.w $26BC
		dc.l $80000000+Map_29DD0
		dc.w 0
		dc.w $23FE
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgHTZ_41FEE:	dc.w $1F		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $84000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $84000000+Map_1FFB8
		dc.w $404
		dc.w $6BC
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $18000000+Map_Plat_EHZ_HTZ
		dc.w $100
		dc.w $4000
		dc.l $18000000+Map_Plat_EHZ_HTZ
		dc.w $9A01
		dc.w $4000
		dc.l $36000000+Map_Spike
		dc.w 0
		dc.w $2434
		dc.l $14000000+Map_21CF0
		dc.w 0
		dc.w $3C6
		dc.l $2D000000+Map_Barrier
		dc.w 0
		dc.w $2426
		dc.l $2F000000+Map_236FA
		dc.w 0
		dc.w $C000
		dc.l $20000000+Map_23254
		dc.w $4402
		dc.w $8416
		dc.l $41000000+Map_RedSpring
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_RedSpring
		dc.w $A006
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $3007
		dc.w $43C
		dc.l $41000000+Map_RedSpring
		dc.w $400A
		dc.w $43C
		dc.l $16000000+Map_21F14
		dc.w 0
		dc.w $43E6
		dc.l $1C000000+Map_21F14
		dc.w $403
		dc.w $43E6
		dc.l $1C000000+Map_21F14
		dc.w $504
		dc.w $43E6
		dc.l $1C000000+Map_TramStake
		dc.w $700
		dc.w $4000
		dc.l $1C000000+Map_TramStake
		dc.w $801
		dc.w $4000
		dc.l $32000000+Map_23852
		dc.w 0
		dc.w $43B2
		dc.l $31000000+Map_20E74
		dc.w 0
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $101
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $202
		dc.w $8680
		dc.l $96000000+Map_37678
		dc.w $E02
		dc.w $637E
		dc.l $92000000+Map_37092
		dc.w $A00
		dc.w 0
		dc.l $95000000+Map_372E6
		dc.w 0
		dc.w 0
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgOOZ_420E8:	dc.w $21		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $33000000+Map_23DDC
		dc.w $100
		dc.w $632C
		dc.l $43000000+Map_23FE0
		dc.w 0
		dc.w $C30C
		dc.l $19000000+Map_2222A
		dc.w $2302
		dc.w $62F4
		dc.l $45000000+Map_2451A
		dc.w $200
		dc.w $43C5
		dc.l $45000000+Map_2451A
		dc.w $120A
		dc.w $43C5
		dc.l $46000000+Map_24C52
		dc.w 1
		dc.w $6354
		dc.l $47000000+Map_24D96
		dc.w 2
		dc.w $424
		dc.l $15000000+Map_Swing_OOZ
		dc.w $8801
		dc.w $43E3
		dc.l $3D000000+Map_250BA
		dc.w 0
		dc.w $6332
		dc.l $48000000+Map_254FE
		dc.w $8000
		dc.w $6368
		dc.l $48000000+Map_254FE
		dc.w $8101
		dc.w $6368
		dc.l $48000000+Map_254FE
		dc.w $8202
		dc.w $6368
		dc.l $48000000+Map_254FE
		dc.w $8303
		dc.w $6368
		dc.l $1F000000+Map_CFlo_OOZ
		dc.w 0
		dc.w $639D
		dc.l $3F000000+Map_2AA12
		dc.w 0
		dc.w $6403
		dc.l $3F000000+Map_2AAC4
		dc.w $8000
		dc.w $6403
		dc.l $50000000+Map_2CF94
		dc.w 0
		dc.w $2500
		dc.l $4A000000+Map_2CBFE
		dc.w 0
		dc.w $2538
		dc.l $1C000000+Map_NarrowFallingOil
		dc.w $A00
		dc.w $4346
		dc.l $1C000000+Map_NarrowFallingOil
		dc.w $B01
		dc.w $4346
		dc.l $1C000000+Map_NarrowFallingOil
		dc.w $C02
		dc.w $4346
		dc.l $1C000000+Map_NarrowFallingOil
		dc.w $D03
		dc.w $4346
		dc.l $1C000000+Map_NarrowFallingOil
		dc.w $E04
		dc.w $4346
		dc.l $1C000000+Map_NarrowFallingOil
		dc.w $F05
		dc.w $4346
		dc.l $1C000000+Map_WideFallingOil
		dc.w $1000
		dc.w $4346
		dc.l $1C000000+Map_WideFallingOil
		dc.w $1101
		dc.w $4346
		dc.l $1C000000+Map_WideFallingOil
		dc.w $1202
		dc.w $4346
		dc.l $1C000000+Map_WideFallingOil
		dc.w $1303
		dc.w $4346
		dc.l $1C000000+Map_WideFallingOil
		dc.w $1404
		dc.w $4346
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgMCZ_421F2:	dc.w $18		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $15000000+Map_Swing_Track_CPZ_MCZ
		dc.w $4802
		dc.w 0
		dc.l $1F000000+Map_CFlo_MCZ
		dc.w 0
		dc.w $63F4
		dc.l $73000000+Map_28B9C
		dc.w $F500
		dc.w $26BC
		dc.l $6A000000+Map_27D30
		dc.w $1800
		dc.w $63D4
		dc.l $2A000000+Map_Stomper
		dc.w 0
		dc.w $4000
		dc.l $36000000+Map_Spike
		dc.w 0
		dc.w $2434
		dc.l $36000000+Map_Spike
		dc.w $4004
		dc.w $242C
		dc.l $41000000+Map_RedSpring
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $9003
		dc.w $470
		dc.l $40000000+Map_265F4
		dc.w $100
		dc.w $440
		dc.l $74000000+Map_20F66
		dc.w $1100
		dc.w $8680
		dc.l $75000000+Map_28D8A
		dc.w $1802
		dc.w $2000
		dc.l $76000000+Map_28F3A
		dc.w 0
		dc.w 0
		dc.l $77000000+Map_29064
		dc.w $100
		dc.w $643C
		dc.l $7F000000+Map_29938
		dc.w 0
		dc.w $640E
		dc.l $80000000+Map_29C64
		dc.w 0
		dc.w $641E
		dc.l $81000000+Map_2A24E
		dc.w 1
		dc.w $643C
		dc.l $7A000000+Map_Swing_Track_CPZ_MCZ
		dc.w $1200
		dc.w 0
		dc.l $A3000000+Map_388F0
		dc.w $2C00
		dc.w $83A8
		dc.l $9E000000+Map_37FF2
		dc.w $2200
		dc.w $23C0
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgCNZ_422B4:	dc.w $18		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $84000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $84000000+Map_1FFB8
		dc.w $404
		dc.w $6BC
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $3000000+Map_1FFB8
		dc.w $D05
		dc.w $26BC
		dc.l $44000000+Map_RoundBump
		dc.w 0
		dc.w $439A
		dc.l $85000000+Map_2B07E
		dc.w 0
		dc.w $422
		dc.l $85000000+Map_2B0EC
		dc.w $8100
		dc.w $402
		dc.l $86000000+Map_2B45A
		dc.w 0
		dc.w $43B2
		dc.l $86000000+Map_2B45A
		dc.w $104
		dc.w $43B2
		dc.l $D2000000+Map_2B694
		dc.w $100
		dc.w $437C
		dc.l $D3000000+Map_BombPenalty
		dc.w 0
		dc.w $380
		dc.l $D4000000+Map_2B9CA
		dc.w 0
		dc.w $436C
		dc.l $D4000000+Map_2B9CA
		dc.w $200
		dc.w $436C
		dc.l $D5000000+Map_2BB40
		dc.w $1800
		dc.w $4384
		dc.l $D6000000+Map_Cage
		dc.w $100
		dc.w $388
		dc.l $D7000000+Map_2C626
		dc.w 0
		dc.w $4394
		dc.l $D8000000+Map_2C8C4
		dc.w 0
		dc.w $43E6
		dc.l $D8000000+Map_2C8C4
		dc.w $4001
		dc.w $43E6
		dc.l $D8000000+Map_2C8C4
		dc.w $8002
		dc.w $43E6
		dc.l $C8000000+Map_3D450
		dc.w $AC00
		dc.w $8340
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgCPZ_42376:	dc.w $18		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $B000000+Map_obj0B
		dc.w $7000
		dc.w $E3B0
		dc.l $1B000000+Map_223E2
		dc.w 0
		dc.w $E39C
		dc.l $1D000000+Map_22576
		dc.w $500
		dc.w $E43C
		dc.l $19000000+Map_2222A
		dc.w $600
		dc.w $63A0
		dc.l $2D000000+Map_Barrier
		dc.w $202
		dc.w $2394
		dc.l $32000000+Map_23886
		dc.w 0
		dc.w $6430
		dc.l $6B000000+Map_2800E
		dc.w $1000
		dc.w $6418
		dc.l $78000000+Map_2800E
		dc.w 0
		dc.w $6418
		dc.l $7A000000+Map_29564
		dc.w 0
		dc.w $E418
		dc.l $7B000000+Map_29780
		dc.w $200
		dc.w $3E0
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $3000000+Map_1FFB8
		dc.w $D05
		dc.w $26BC
		dc.l $36000000+Map_Spike
		dc.w 0
		dc.w $2434
		dc.l $41000000+Map_RedSpring
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_RedSpring
		dc.w $A006
		dc.w $45C
		dc.l $40000000+Map_265F4
		dc.w $100
		dc.w $440
		dc.l $A5000000+Map_38CCA
		dc.w $3200
		dc.w $252D
		dc.l $A6000000+Map_38CCA
		dc.w $3203
		dc.w $252D
		dc.l $A7000000+Map_3921A
		dc.w $3600
		dc.w $A500
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgARZ_42438:	dc.w $1D		
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_Starpost
		dc.w $100
		dc.w $47C
		dc.l $15000000+Map_Swing_Circle_ARZ
		dc.w $8802
		dc.w 0
		dc.l $18000000+Map_Plat_ARZ
		dc.w $100
		dc.w $4000
		dc.l $18000000+Map_Plat_ARZ
		dc.w $9A01
		dc.w $4000
		dc.l $22000000+Map_25804
		dc.w 1
		dc.w $417
		dc.l $23000000+Map_259E6
		dc.w 0
		dc.w $2000
		dc.l $2B000000+Map_25C6E
		dc.w 0
		dc.w $2000
		dc.l $2C000000+Map_20E74
		dc.w 0
		dc.w $8680
		dc.l $2C000000+Map_20E74
		dc.w $101
		dc.w $8680
		dc.l $2C000000+Map_20E74
		dc.w $202
		dc.w $8680
		dc.l $40000000+Map_265F4
		dc.w $100
		dc.w $440
		dc.l $41000000+Map_RedSpring
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_RedSpring
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_RedSpring
		dc.w $A006
		dc.w $45C
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $36000000+Map_Spike
		dc.w 0
		dc.w $2434
		dc.l $2D000000+Map_Barrier
		dc.w $303
		dc.w $23F8
		dc.l $1F000000+Map_CFlo_ARZ
		dc.w 0
		dc.w $4000
		dc.l $82000000+Map_2A476
		dc.w $300
		dc.w 0
		dc.l $82000000+Map_2A476
		dc.w $1101
		dc.w 0
		dc.l $83000000+Map_Swing_Circle_ARZ
		dc.w $1001
		dc.w 0
		dc.l $24000000+Map_Bub_Main
		dc.w $810E
		dc.w $855B
		dc.l $91000000+Map_36EF6
		dc.w $800
		dc.w $253B
		dc.l $8C000000+Map_36A4E
		dc.w 0
		dc.w $A500
		dc.l $8D000000+Map_36CF0
		dc.w $200
		dc.w $A509
		dc.l $8E000000+Map_36CF0
		dc.w $200
		dc.w $A509
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgSCZ_42522:	dc.w $D			
		dc.l $25000000+Map_Ring				; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_Monitor
		dc.w $800
		dc.w $680
		dc.l $8B000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $B3000000+Map_3B32C
		dc.w $5E00
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6001
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6202
		dc.w $454F
		dc.l $B4000000+Map_3B3BE
		dc.w $6400
		dc.w $A561
		dc.l $B5000000+Map_3B548
		dc.w $6600
		dc.w $A3CD
		dc.l $B5000000+Map_3B548
		dc.w $6800
		dc.w $A3CD
		dc.l $9A000000+Map_37B62
		dc.w $1600
		dc.w $38A
		dc.l $AC000000+Map_393CC
		dc.w $4000
		dc.w $565
		dc.l $99000000+Map_3789A
		dc.w $1200
		dc.w $A36E
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680

; ===========================================================================

    if RemoveJmpTos=0
JmpTo66_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4	
	endc

; ===========================================================================		
; ---------------------------------------------------------------------------
; Level Headers

; This struct array tells the engine where to find all the art associated with
; a particular zone. Each zone gets three longwords, in which it stores three
; pointers (in the lower 24 bits) and three jump table indeces (in the upper eight
; bits). The assembled data looks something like this:
;
; aaBBBBBB
; ccDDDDDD
; eeFFFFFF
;
; aa = index for primary pattern load request list
; BBBBBB = pointer to level art
; cc = index for secondary pattern load request list
; DDDDDD = pointer to 16x16 block mappings
; ee = index for palette
; FFFFFF = pointer to 128x128 block mappings
;
; Nemesis refers to this as the "main level load block". However, that name implies
; that this is code (obviously, it isn't), or at least that it points to the level's
; collision, object and ring placement arrays (it only points to art...
; although the 128x128 mappings do affect the actual level layout and collision)
; ---------------------------------------------------------------------------

lhead:	macro plc1,plc2,palette,art,map16x16,map128x128
		dc.l (plc1<<24)+art
		dc.l (plc2<<24)+map16x16
		dc.l (palette<<24)|map128x128
	endm
		
; LevelArtPointers:		
LevelHeaders:	
	
		lhead id_PLC_EHZ1,		id_PLC_EHZ2,		id_Pal_EHZ,		Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   0 ; Emerald Hill
		lhead id_PLC_Miles1Up,	id_PLC_MilesLife,	id_Pal_EHZ2,	Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   1 ; Level 1; unused	
		lhead id_PLC_Tails1Up,	id_PLC_TailsLife,	id_Pal_WZ,		Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   2 ; Level 2; unused
		lhead id_PLC_Unused1,	id_PLC_Unused2,		id_Pal_EHZ3,	Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   3 ; Level 3; unused
		lhead id_PLC_MTZ1,		id_PLC_MTZ2,		id_Pal_MTZ,		Kos_MTZ,	BM16_MTZ,	BM128_MTZ ;   4 ; Metropolis Acts 1 & 2
		lhead id_PLC_MTZ1,		id_PLC_MTZ2,		id_Pal_MTZ,		Kos_MTZ,	BM16_MTZ,	BM128_MTZ ;   5 ; Metropolis Act 3
		lhead id_PLC_WFZ1,		id_PLC_WFZ2,		id_Pal_WFZ,		Kos_SCZ,	BM16_WFZ,	BM128_WFZ ;   6 ; Wing Fortress
		lhead id_PLC_HTZ1,		id_PLC_HTZ2,		id_Pal_HTZ,		Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   7 ; Hill Top; art is patched later by LoadZoneTiles
		lhead id_PLC_HPZ1,		id_PLC_HPZ2,		id_Pal_HPZ,		Kos_HPZ,	BM16_HPZ,	BM128_HPZ ;   8 ; Hidden Palace; unused
		lhead id_PLC_Unused5,	id_PLC_Unused6,		id_Pal_EHZ4,	Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   9 ; Level 9; unused
		lhead id_PLC_OOZ1,		id_PLC_OOZ2,		id_Pal_OOZ,		Kos_OOZ,	BM16_OOZ,	BM128_OOZ ;  $A ; Oil Ocean
		lhead id_PLC_MCZ1,		id_PLC_MCZ2,		id_Pal_MCZ,		Kos_MCZ,	BM16_MCZ,	BM128_MCZ ;  $B ; Mystic Cave
		lhead id_PLC_CNZ1,		id_PLC_CNZ2,		id_Pal_CNZ,		Kos_CNZ,	BM16_CNZ,	BM128_CNZ ;  $C ; Casino Night
		lhead id_PLC_CPZ1,		id_PLC_CPZ2,		id_Pal_CPZ,		Kos_CPZ,	BM16_CPZ,	BM128_CPZ ;  $D ; Chemical Plant
		lhead id_PLC_DEZ1,		id_PLC_DEZ2,		id_Pal_DEZ,		Kos_CPZ,	BM16_CPZ,	BM128_CPZ ;  $E ; Death Egg;  art is patched later by LoadZoneTiles
		lhead id_PLC_ARZ1,		id_PLC_ARZ2,		id_Pal_ARZ,		Kos_ARZ,	BM16_ARZ,	BM128_ARZ ;  $F ; Aquatic Ruin
		lhead id_PLC_SCZ1,		id_PLC_SCZ2,		id_Pal_SCZ,		Kos_SCZ,	BM16_WFZ,	BM128_WFZ ; $10 ; Sky Chase
		
		

;---------------------------------------------------------------------------------------
; Macro to make PLC pointers and generate symbolic constants
; (modification of standard ptr macro)
;---------------------------------------------------------------------------------------

plcp:	macro plcaddress,altid,alias1,alias2

		nolist
		pusho
		opt	m-
		
		dc.\index_width \plcaddress-index_start		; make pointer
		ifarg \altid
			\prefix_id\\altid: equ ptr_id		; generate an alternate ID constant for duplicate pointers
		else
			\prefix_id\\plcaddress:	equ ptr_id	; generate ID constant
		endc	
		ifarg \alias1
			\prefix_id\\alias1:	equ ptr_id	; make aliased ID constant
		endc
		ifarg \alias2
			\prefix_id\\alias2:	equ ptr_id	; make aliased ID constant
		endc			
			ptr_id: = ptr_id+ptr_id_inc		; increment ptr_id
		
		popo
		list
		endm
	
PatternLoadCues:	
		index offset(*)

		plcp 	PLC_Main				; 0
		plcp 	PLC_Main2				; 1
		plcp	PLC_Water				; 2
		plcp 	PLC_GameOver				; 3
		plcp 	PLC_EHZ1				; 4
		plcp 	PLC_EHZ2				; 5
		plcp 	PLC_Miles1Up				; 6
		plcp 	PLC_MilesLife				; 7
		plcp 	PLC_Tails1Up				; 8
		plcp	PLC_TailsLife				; 9
		plcp	PLC_MTZ1,PLC_Unused1			; 10 - unused, but referenced in LevelHeaders array
		plcp	PLC_MTZ1,PLC_Unused2			; 11 - unused, but referenced in LevelHeaders array
		plcp	PLC_MTZ1				; 12
		plcp	PLC_MTZ2				; 13
		plcp	PLC_WFZ1,PLC_Unused3			; 14 - unused, never referenced
		plcp	PLC_WFZ1,PLC_Unused4			; 15 - unused, never referenced
		plcp	PLC_WFZ1				; 16
		plcp	PLC_WFZ2				; 17
		plcp	PLC_HTZ1				; 18
		plcp	PLC_HTZ2				; 19
		plcp	PLC_HPZ1				; 20
		plcp	PLC_HPZ2				; 21
		plcp	PLC_OOZ1,PLC_Unused5			; 22 - unused, but referenced in LevelHeaders array
		plcp	PLC_OOZ1,PLC_Unused6			; 23 - unused, but referenced in LevelHeaders array
		plcp	PLC_OOZ1				; 24
		plcp	PLC_OOZ2				; 25
		plcp	PLC_MCZ1				; 26
		plcp	PLC_MCZ2				; 27
		plcp	PLC_CNZ1				; 28
		plcp	PLC_CNZ2				; 29
		plcp	PLC_CPZ1				; 30
		plcp	PLC_CPZ2				; 31
		plcp	PLC_DEZ1				; 32
		plcp	PLC_DEZ2				; 33
		plcp	PLC_ARZ1				; 34
		plcp	PLC_ARZ2				; 35
		plcp	PLC_SCZ1				; 36
		plcp	PLC_SCZ2				; 37
		plcp	PLC_ResultsSonic			; 38
		plcp	PLC_Signpost				; 39
		plcp	PLC_CPZBoss				; 40
		plcp	PLC_EHZBoss				; 41
		plcp	PLC_HTZBoss				; 42
		plcp	PLC_ARZBoss				; 43
		plcp	PLC_MCZBoss				; 44
		plcp	PLC_CNZBoss				; 45
		plcp	PLC_MTZBoss				; 46
		plcp	PLC_OOZBoss				; 47
		plcp	PLC_FieryExplosion			; 48
		plcp	PLC_DEZBoss				; 49
		plcp	PLC_EHZAnimals				; 50
		plcp	PLC_MCZAnimals				; 51
		plcp	PLC_WFZAnimals,,PLC_HTZAnimals,PLC_MTZAnimals ; 52, these zones share the same list
		plcp	PLC_DEZAnimals				; 53
		plcp	PLC_HPZAnimals				; 54
		plcp	PLC_OOZAnimals				; 55
		plcp	PLC_SCZAnimals				; 56
		plcp	PLC_CNZAnimals				; 57
		plcp	PLC_CPZAnimals				; 58
		plcp	PLC_ARZAnimals				; 59
		plcp	PLC_SpecialStage			; 60
		plcp	PLC_SpecialStageBombs			; 61
		plcp	PLC_WFZBoss				; 62
		plcp	PLC_Tornado				; 63
		plcp	PLC_Capsule				; 64
		plcp	PLC_Explosion				; 65
		plcp	PLC_ResultsTails			; 66

		
		
plcm:		macro gfx,vram,suffix
		dc.l gfx
		ifarg \vram
			plcm_vram: = \vram
		else
			plcm_vram: = last_vram
		endc
		last_vram: = plcm_vram+sizeof_\gfx
		dc.w plcm_vram
		ifarg \suffix
			tile_\gfx\_\suffix: equ plcm_vram/sizeof_cell
		else
			if ~def(tile_\gfx)
			tile_\gfx: equ plcm_vram/sizeof_cell
			endc
		endc
		endm


plcheader:	macro *
		\*: equ *
		plc_count\@: equ (\*_end-\*-2)/sizeof_plc
		dc.w plc_count\@-1
		endm		
		
;---------------------------------------------------------------------------------------
; Pattern load cues - standard block 1
;---------------------------------------------------------------------------------------
PLC_Main:	plcheader
		plcm 	Nem_HUD,vram_HUD
		plcm 	Nem_Sonic_Life_Counter,vram_lifecounter
		plcm	Nem_Ring,vram_Ring
		plcm	Nem_Numbers,vram_Numbers
	PLC_Main_end:
;---------------------------------------------------------------------------------------
; Pattern load cues - standard block 2
;---------------------------------------------------------------------------------------
PLC_Main2:	plcheader		
		plcm	Nem_Checkpoint,vram_Checkpoint
		plcm	Nem_Monitors,vram_Monitors
		plcm 	Nem_Shield, vram_Shield
		plcm	Nem_Invinciblity_Stars,vram_Invinciblity_Stars
	PLC_Main2_end:
;---------------------------------------------------------------------------------------
; Pattern load cues - water level standard block
;---------------------------------------------------------------------------------------
PLC_Water:		plcheader			
		plcm	Nem_Explosion,vram_Explosion
		plcm	Nem_SuperSonic_Stars,vram_SuperSonic_stars
		plcm	Nem_Bubbles,vram_Bubbles
	PLC_Water_end:
;---------------------------------------------------------------------------------------
; Pattern load cue - Game/Time over
;---------------------------------------------------------------------------------------
PLC_GameOver:	plcheader		
		plcm Nem_Game_Over,vram_Game_Over
	PLC_GameOver_end:
;---------------------------------------------------------------------------------------
; Pattern load cues - Emerald Hill Primary
;---------------------------------------------------------------------------------------
PLC_EHZ1:		plcheader	
		plcm	Nem_Waterfall,vram_Waterfall
		plcm	Nem_EHZBridge,vram_Bridge
		plcm	Nem_Fireball1,vram_Buzzer_Fireball,Buzzer ; loaded but never used
		plcm	Nem_Buzzer,vram_Buzzer
		plcm	Nem_Coconuts,vram_Coconuts
		plcm	Nem_Masher,vram_Masher
	PLC_EHZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Emerald Hill Secondary
;---------------------------------------------------------------------------------------
PLC_EHZ2:		plcheader
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_DignlSprng,vram_DignlSprng
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_EHZ2_end:
;---------------------------------------------------------------------------------------
; Pattern load cue - Miles 1-UP patch
;---------------------------------------------------------------------------------------
PLC_Miles1Up:		plcheader			
		plcm	Nem_MilesLife,vram_Miles_Tails_1UP
	PLC_Miles1Up_end:
;---------------------------------------------------------------------------------------
; Pattern load cue - Miles life counter
;---------------------------------------------------------------------------------------
PLC_MilesLife:	plcheader			
		plcm	Nem_MilesLife,vram_lifecounter
	PLC_MilesLife_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue - Tails 1-UP patch
;---------------------------------------------------------------------------------------
PLC_Tails1Up:		plcheader			
		plcm	Nem_TailsLife,vram_Miles_Tails_1UP
	PLC_Tails1Up_end:
;---------------------------------------------------------------------------------------
; Pattern load cue - Tails life counter
;---------------------------------------------------------------------------------------
PLC_TailsLife:	plcheader			
		plcm	Nem_TailsLife,vram_lifecounter
	PLC_TailsLife_end:		
;---------------------------------------------------------------------------------------
; Pattern load cues - Metropolis Primary
;---------------------------------------------------------------------------------------
PLC_MTZ1:		plcheader	
		plcm	Nem_Wheel,vram_Wheel
		plcm	Nem_WheelIndent,vram_WheelIndent	
		plcm	Nem_LavaCup,vram_LavaCup	
		plcm	Nem_BoltEnd_Rope,vram_BoltEnd_Rope		
		plcm	Nem_SteamSpring,vram_SteamSpring	
		plcm	Nem_SpikeBlock,vram_SpikeBlock
		plcm	Nem_MTZSpike,vram_MTZSpike
		plcm	Nem_Shellcracker,vram_Shellcracker		
		plcm	Nem_Asteron,vram_Asteron
	PLC_MTZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Metropolis Secondary
;---------------------------------------------------------------------------------------
PLC_MTZ2:		plcheader			
		plcm	Nem_Button,vram_Button
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_Slicer,vram_Slicer
		plcm	 Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
		plcm	Nem_MTZAsstBlocks,vram_MTZAsstBlocks
		plcm	Nem_LavaBubble,vram_LavaBubble
		plcm	Nem_Cog,vram_Cog
		plcm	Nem_SpinTubeFlash,vram_SpinTubeFlash
	PLC_MTZ2_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Wing Fortress Primary
;---------------------------------------------------------------------------------------
PLC_WFZ1:		plcheader			
		plcm	Nem_Tornado,vram_Tornado
		plcm	Nem_Clouds,vram_Clouds
		plcm	Nem_WFZVrtclPrpllr,vram_WFZVrtclPrpllr
		plcm	Nem_WFZHrzntlPrpllr,vram_WFZHrzntlPrpllr
		plcm	Nem_Balkiry,vram_Balkriy
		plcm	Nem_BreakPanels,vram_BreakPanels
		plcm	Nem_Clucker,vram_Clucker
		plcm	Nem_WFZTiltPlatforms,vram_WFZTiltPlatforms
		; Redundant entries.
		plcm	Nem_Tornado,vram_Tornado
		plcm	Nem_Clouds,vram_Clouds
	PLC_WFZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Wing Fortress Secondary
;---------------------------------------------------------------------------------------
PLC_WFZ2:	plcheader	
		; Redundant: these first two are also loaded by the first cue.	
		plcm	Nem_WFZVrtclPrpllr,vram_WFZVrtclPrpllr
		plcm	Nem_WFZHrzntlPrpllr,vram_WFZHrzntlPrpllr
		plcm	Nem_WFZVrtclLaser,vram_WFZVrtclLaser
		plcm	Nem_WFZWallTurret,vram_WFZWallTurret
		plcm	Nem_WFZHrzntlLaser,vram_WFZHrzntlLaser
		plcm	Nem_WFZConveyorBeltWheel,vram_WFZConveyorBeltWheel
		plcm	Nem_Hook,vram_Hook
		plcm	Nem_WFZThrust,vram_WFZThrust
		plcm	Nem_WFZBeltPlatform,vram_WFZBeltPlatform
		plcm	Nem_WFZGunPlatform,vram_WFZGunPlatform
		plcm	Nem_WFZUnusedBadnik,vram_WfzUnusedBadnik
		plcm	Nem_WFZLaunchCatapult,vram_WFZLaunchCatapult
		plcm	Nem_WFZSwitch,vram_WFZSwitch
		plcm	Nem_WFZFloatingPlatform,vram_WFZFloatingPlatform
	PLC_WFZ2_end:		
;---------------------------------------------------------------------------------------
; Pattern load cues - Hill Top Primary
;---------------------------------------------------------------------------------------
PLC_HTZ1:	plcheader			
		plcm	Nem_Fireball1,vram_HTZFireball1
		plcm	Nem_HTZRock,vram_HTZRock
		plcm	Nem_SeeSaw,vram_SeeSaw
		plcm	Nem_Sol,vram_Sol
		plcm	Nem_Rexon,vram_Rexon
		plcm	Nem_Spiker,vram_Spiker
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_DignlSprng,vram_DignlSprng
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_HTZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Hill Top Secondary
;---------------------------------------------------------------------------------------
PLC_HTZ2:	plcheader		
		plcm	Nem_HTZZipline,vram_HTZZipline
		plcm	Nem_HTZFireball2,vram_HTZFireball2
		plcm	Nem_HTZOneWayBarrier,vram_HTZOneWayBarrier
	PLC_HTZ2_end:		
		
PLC_HPZ1:		
PLC_HPZ2:		
		
;---------------------------------------------------------------------------------------
; Pattern load cues - Oil Ocean Primary
;---------------------------------------------------------------------------------------
PLC_OOZ1:	plcheader			
		plcm	Nem_Burner,vram_Burner
		plcm	Nem_OOZElevator,vram_OOZElevator
		plcm	Nem_SlidingSpikes,vram_SlidingSpikes
		plcm	Nem_BurnerLid,vram_BurnerLid
		plcm	Nem_StripedBlocksVert,vram_StripedBlocksVert
		plcm	Nem_Oilfall,vram_Oilfall
		plcm	Nem_Oilfall2,vram_Oilfall2
		plcm	Nem_SpringBall,vram_SpringBall
		plcm	Nem_LaunchBall,vram_LaunchBall
	PLC_OOZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Oil Ocean Secondary
;---------------------------------------------------------------------------------------
PLC_OOZ2:	plcheader		
		plcm	Nem_OOZPlatform,vram_OOZPlatform
		plcm	Nem_PushSpring,vram_PushSpring
		plcm	Nem_OOZSwingPlat,vram_OOZSwingPlat
		plcm	Nem_StripedBlocksHoriz,vram_StripedBlocksHoriz
		plcm	Nem_Fan,vram_Fan
		plcm	Nem_Button,vram_Button
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_DignlSprng,vram_DignlSprng
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
		plcm	Nem_Aquis,vram_Aquis
		plcm	Nem_Octus,vram_Octus
	PLC_OOZ2_end:
;---------------------------------------------------------------------------------------
; Pattern load cues - Mystic Cave Primary
;---------------------------------------------------------------------------------------
PLC_MCZ1:	plcheader		
		plcm	Nem_Crate,vram_Crate
		plcm	Nem_MCZCollapsingPlat,vram_MCZCollapsingPlat
		plcm 	Nem_VineSwitch,vram_VineSwitch
		plcm	Nem_VinePulley,vram_VinePulley
		plcm 	Nem_Flasher,vram_Flasher
		plcm 	Nem_Crawlton,vram_Crawlton
	PLC_MCZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Mystic Cave Secondary
;---------------------------------------------------------------------------------------
PLC_MCZ2:	plcheader			
		plcm	Nem_HorizSpike,vram_HorizSpike
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_DrawbridgeLogs,vram_DrawbridgeLogs
		plcm	Nem_LeverSpring,vram_LeverSpring
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_MCZ2_end:		
;---------------------------------------------------------------------------------------
; Pattern load cues - Casino Night Primary
;---------------------------------------------------------------------------------------
PLC_CNZ1:	plcheader			
		plcm 	Nem_Crawl,vram_Crawl
		plcm	Nem_LargeMovingBlock,vram_LargeMovingBlock
		plcm	Nem_SnakePlats,vram_SnakePlats
		plcm	Nem_BombPenalty,vram_BombPenalty
		plcm	Nem_CNZElevator,vram_CNZElevator
		plcm	Nem_Cage,vram_Cage
		plcm	Nem_HexBumper,vram_HexBumper
		plcm	Nem_RoundBumper,vram_RoundBumper
		plcm 	Nem_Flipper,vram_Flipper
		plcm	Nem_SaucerBumper,vram_SaucerBumper
	PLC_CNZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Casino Night Secondary
;---------------------------------------------------------------------------------------
PLC_CNZ2:	plcheader		
		plcm	Nem_DiagLauncher,vram_DiagLauncher
		plcm	Nem_VertLauncher,vram_VertLauncher
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_DignlSprng,vram_DignlSprng
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_CNZ2_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Chemical Plant Primary
;---------------------------------------------------------------------------------------
PLC_CPZ1:	plcheader		
		plcm	Nem_Pylon,vram_Pylon
		plcm	Nem_ConstructionStripes,vram_CPZConstructionStripes,CPZ
		plcm	Nem_Booster,vram_Booster
		plcm	Nem_CPZElevator,vram_CPZElevator
		plcm	Nem_CPZDumpingPipePlat,vram_CPZDumpingPipePlat
		plcm	Nem_CPZTubeSpring,vram_CPZTubeSpring
		plcm 	Nem_WaterSurface1,vram_WaterSurface
		plcm	Nem_StairBlock,vram_StairBlock
		plcm	Nem_CPZMetalBlock,vram_CPZMetalBlock
	PLC_CPZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Chemical Plant Secondary
;---------------------------------------------------------------------------------------
PLC_CPZ2:	plcheader			
		plcm	Nem_Grabber,vram_Grabber
		plcm	Nem_Spiny,vram_Spiny
		plcm	Nem_Spikes,vram_Spikes
		plcm	Nem_Droplet,vram_Droplet
		plcm	Nem_LeverSpring,vram_LeverSpring
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_CPZ2_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue - Death Egg Primary
;---------------------------------------------------------------------------------------
PLC_DEZ1:	plcheader			
		plcm	Nem_ConstructionStripes,vram_DEZConstructionStripes,DEZ
	PLC_DEZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Death Egg Secondary
;---------------------------------------------------------------------------------------
PLC_DEZ2:	plcheader		
		plcm 	Nem_MechaSonic,vram_MechaSonic
		plcm	Nem_DEZWindow,vram_DEZWindow
		plcm	Nem_RobotnikRunning,vram_RobotnikRunning
		plcm	Nem_RobotnikUpper,vram_RobotnikUpper
		plcm	Nem_RobotnikLower,vram_RobotnikLower
	PLC_DEZ2_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Aquatic Ruin Primary
;---------------------------------------------------------------------------------------
PLC_ARZ1:	plcheader		
		plcm 	Nem_ARZBarrier,vram_ARZBarrier
		plcm 	Nem_WaterSurface2,vram_WaterSurface
		plcm 	Nem_Leaves,vram_Leaves
		plcm	Nem_ArrowAndShooter,vram_ArrowAndShooter
	PLC_ARZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Aquatic Ruin Secondary
;---------------------------------------------------------------------------------------
PLC_ARZ2:	plcheader		
		plcm	Nem_ChopChop,vram_ChopChop
		plcm	Nem_Whisp,vram_Whisp
		plcm	Nem_Grounder,vram_Grounder
		plcm	Nem_BubbleGenerator,vram_BubbleGenerator
		plcm	Nem_Spikes,vram_Spikes
		plcm 	Nem_LeverSpring,vram_LeverSpring
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_ARZ2_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue - Sky Chase Primary
;---------------------------------------------------------------------------------------
PLC_SCZ1:	plcheader			
		plcm	Nem_Tornado,vram_Tornado
	PLC_SCZ1_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Sky Chase Secondary
;---------------------------------------------------------------------------------------
PLC_SCZ2:	plcheader			
		plcm	Nem_Clouds,vram_Clouds
		plcm	Nem_WFZVrtclPrpllr,vram_WFZVrtclPrpllr
		plcm	Nem_WFZHrzntlPrpllr,vram_WFZHrzntlPrpllr
		plcm	Nem_Balkiry,vram_Balkriy
		plcm	Nem_Turtloid,vram_Turtloid
		plcm	Nem_Nebula,vram_Nebula
	PLC_SCZ2_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Sonic end of level results screen
;---------------------------------------------------------------------------------------
PLC_ResultsSonic:	plcheader		
		plcm	Nem_TitleCard,vram_TitleCard
		plcm	Nem_ResultsText,vram_ResultsText
		plcm 	Nem_MiniSonic,vram_MiniCharacter
		plcm 	Nem_Perfect,vram_Perfect
	PLC_ResultsSonic_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue - End of	level signpost
;---------------------------------------------------------------------------------------
PLC_Signpost:	plcheader	
		plcm	Nem_Signpost,vram_Signpost
	PLC_Signpost_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Chemical Plant Boss
;---------------------------------------------------------------------------------------
PLC_CPZBoss:	plcheader		
		plcm	Nem_Eggpod,vram_CPZEggpod,CPZ
		plcm	Nem_CPZBoss,vram_CPZBoss
		plcm	Nem_EggpodJets,vram_CPZEggpodJets,CPZ
		plcm	Nem_BossSmoke,vram_CPZBossSmoke,CPZ	; unused due to a pair of bugs in loc_2E9B6
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_CPZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Emerald Hill Boss
;---------------------------------------------------------------------------------------
PLC_EHZBoss:	plcheader			
		plcm	Nem_Eggpod,vram_EHZEggpod,EHZ
		plcm	Nem_EHZBoss,vram_EHZBoss
		plcm	Nem_EggChopperBlades,vram_EggChopperBlades
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_EHZBoss_end:
;---------------------------------------------------------------------------------------
; Pattern load cues - Hill Top Boss
;---------------------------------------------------------------------------------------
PLC_HTZBoss:	plcheader			
		plcm	Nem_Eggpod,vram_HTZEggpod,HTZ
		plcm	Nem_HTZBoss,vram_HTZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
		plcm	Nem_BossSmoke,vram_HTZBossSmoke,HTZ
	PLC_HTZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Aquatic Ruin Boss
;---------------------------------------------------------------------------------------
PLC_ARZBoss:	plcheader			
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_ARZBoss,vram_ARZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_ARZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Mystic Cave Boss
;---------------------------------------------------------------------------------------
PLC_MCZBoss:	plcheader			
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_MCZBoss,vram_MCZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_MCZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Casino Night Boss
;---------------------------------------------------------------------------------------
PLC_CNZBoss:	plcheader				
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_CNZBoss,vram_CNZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_CNZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Metropolis Boss
;---------------------------------------------------------------------------------------
PLC_MTZBoss:	plcheader			
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_MTZBoss,vram_MTZBoss
		plcm	Nem_EggpodJets,vram_MTZEggpodJets
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_MTZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues - Oil Ocean Boss
;---------------------------------------------------------------------------------------
PLC_OOZBoss:	plcheader				
		plcm	Nem_OOZBoss,vram_OOZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_OOZBoss_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue - Fiery Explosion
;---------------------------------------------------------------------------------------
PLC_FieryExplosion:	plcheader			
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_FieryExplosion_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue - Final Boss
;---------------------------------------------------------------------------------------
PLC_DEZBoss:	plcheader			
		plcm	Nem_DEZBoss,vram_DEZBoss
	PLC_DEZBoss_end:
;---------------------------------------------------------------------------------------
; Pattern load cues - EHZ Animals
;---------------------------------------------------------------------------------------
PLC_EHZAnimals:		plcheader			
		plcm	Nem_Squirrel,vram_animal_1
		plcm	Nem_Flicky,vram_animal_2
	PLC_EHZAnimals_end:		
;---------------------------------------------------------------------------------------
;Pattern load cues - MCZ Animals
;---------------------------------------------------------------------------------------
PLC_MCZAnimals:		plcheader			
		plcm	Nem_Mouse,vram_animal_1
		plcm	Nem_Chicken,vram_animal_2
	PLC_MCZAnimals_end:		
;---------------------------------------------------------------------------------------
;Pattern load cues - HTZ/MTZ/WFZ animals
;---------------------------------------------------------------------------------------
PLC_WFZAnimals:		plcheader			
		plcm Nem_Beaver,vram_animal_1
		plcm Nem_Eagle,vram_animal_2
	PLC_WFZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - DEZ Animals
;---------------------------------------------------------------------------------------
PLC_DEZAnimals:		plcheader			
		plcm Nem_Pig,vram_animal_1
		plcm Nem_Chicken,vram_animal_2
	PLC_DEZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - HPZ animals
;---------------------------------------------------------------------------------------
PLC_HPZAnimals:		plcheader			
		plcm Nem_Mouse,vram_animal_1
		plcm Nem_Seal,vram_animal_2
	PLC_HPZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - OOZ Animals
;---------------------------------------------------------------------------------------
PLC_OOZAnimals:		plcheader			
		plcm Nem_Penguin,vram_animal_1
		plcm Nem_Seal,vram_animal_2
	PLC_OOZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - SCZ Animals
;---------------------------------------------------------------------------------------
PLC_SCZAnimals:		plcheader			
		plcm Nem_Turtle,vram_animal_1
		plcm Nem_Chicken,vram_animal_2
	PLC_SCZAnimals_end:		
;---------------------------------------------------------------------------------------
;Pattern load cues - CNZ Animals
;---------------------------------------------------------------------------------------
PLC_CNZAnimals:		plcheader			
		plcm Nem_Bear,vram_animal_1
		plcm Nem_Flicky,vram_animal_2
	PLC_CNZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - CPZ Animals
;---------------------------------------------------------------------------------------
PLC_CPZAnimals:		plcheader			
		plcm Nem_Rabbit,vram_animal_1
		plcm Nem_Eagle,vram_animal_2
	PLC_CPZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - ARZ Animals
;---------------------------------------------------------------------------------------
PLC_ARZAnimals:		plcheader			
		plcm Nem_Penguin,vram_animal_1
		plcm Nem_Flicky,vram_animal_2
	PLC_ARZAnimals_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - Special Stage
;---------------------------------------------------------------------------------------
PLC_SpecialStage:	plcheader		
		plcm	Nem_SpecialEmerald,vram_SpecialEmerald
		plcm	Nem_SpecialMessages,vram_SpecialMessages
		plcm	Nem_SpecialHUD,vram_SpecialHUD
		plcm	Nem_SpecialHorizShadow,vram_SpecialHorizShadow
		plcm	Nem_SpecialDiagShadow,vram_SpecialDiagShadow
		plcm	Nem_SpecialVertShadow,vram_SpecialVertShadow
		plcm	Nem_SpecialExplosion,vram_SpecialExplosion
		plcm	Nem_SpecialRings,vram_SpecialRings
		plcm	Nem_SpecialStart,vram_SpecialStart
		plcm	Nem_SpecialPlayerVSPlayer,vram_SpecialPlayerVSPlayer
		plcm	Nem_SpecialBack,vram_SpecialBack
		plcm	Nem_SpecialStars,vram_SpecialStars
		plcm	Nem_SpecialTailsText,vram_SpecialTailsText
	PLC_SpecialStage_end:	
;---------------------------------------------------------------------------------------
;Pattern load cue - Special Stage Bombs
;---------------------------------------------------------------------------------------
PLC_SpecialStageBombs:	plcheader		
		plcm	Nem_SpecialBomb,vram_SpecialBomb
	PLC_SpecialStageBombs_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - WFZ Boss
;---------------------------------------------------------------------------------------
PLC_WFZBoss:	plcheader			
		plcm	Nem_WFZBoss,vram_WFZBoss
		plcm	Nem_RobotnikRunning,vram_RobotnikRunning
		plcm	Nem_RobotnikUpper,vram_RobotnikUpper
		plcm	Nem_RobotnikLower,vram_RobotnikLower
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_WFZBoss_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues - Tornado
;---------------------------------------------------------------------------------------
PLC_Tornado:	plcheader		
		plcm	Nem_Tornado,vram_Tornado
		plcm	Nem_TornadoThruster,vram_TornadoThruster
		plcm	Nem_Clouds,vram_Clouds
	PLC_Tornado_end:	
;---------------------------------------------------------------------------------------
;Pattern load cue - Egg Prison
;---------------------------------------------------------------------------------------
PLC_Capsule:	plcheader		
		plcm 	Nem_Capsule,vram_Capsule
	PLC_Capsule_end:
;---------------------------------------------------------------------------------------
;Pattern load cue - Explosion
;---------------------------------------------------------------------------------------
PLC_Explosion:	plcheader			
		plcm 	Nem_Explosion,vram_Explosion
	PLC_Explosion_end:	
;---------------------------------------------------------------------------------------
;Pattern load cue - Tails end of level results screen
;---------------------------------------------------------------------------------------
PLC_ResultsTails:	plcheader			
		plcm	Nem_TitleCard,vram_TitleCard
		plcm 	Nem_ResultsText,vram_ResultsText
		plcm 	Nem_MiniTails,vram_MiniCharacter
		plcm	Nem_Perfect,vram_Perfect
	PLC_ResultsTails_end:	

	
;---------------------------------------------------------------------------------------
; Unused duplicates of some of the PLC lists found only in Revisions 0 and 2
;---------------------------------------------------------------------------------------		
	if Revision=0
		; second half of PLC_ResultsTails
		plcm 	Nem_MiniTails,vram_MiniCharacter
		plcm	Nem_Perfect,vram_Perfect
	PLC_ResultsTails_DUP_end:

	elseif Revision=2
		; half of PLC_ARZ2 and everything from there to the end of the PLC lists!
		plcm	Nem_Grounder,vram_Grounder
		plcm	Nem_BubbleGenerator,vram_BubbleGenerator
		plcm	Nem_Spikes,vram_Spikes
		plcm 	Nem_LeverSpring,vram_LeverSpring
		plcm	Nem_VrtclSprng,vram_VrtclSprng
		plcm	Nem_HrzntlSprng,vram_HrzntlSprng
	PLC_ARZ2_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue (duplicate) - Sky Chase Primary
;---------------------------------------------------------------------------------------
PLC_SCZ1_dup:	plcheader			
		plcm	Nem_Tornado,vram_Tornado
	PLC_SCZ1_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Sky Chase Secondary
;---------------------------------------------------------------------------------------
PLC_SCZ2_dup:	plcheader			
		plcm	Nem_Clouds,vram_Clouds
		plcm	Nem_WFZVrtclPrpllr,vram_WFZVrtclPrpllr
		plcm	Nem_WFZHrzntlPrpllr,vram_WFZHrzntlPrpllr
		plcm	Nem_Balkiry,vram_Balkriy
		plcm	Nem_Turtloid,vram_Turtloid
		plcm	Nem_Nebula,vram_Nebula
	PLC_SCZ2_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Sonic end of level results screen
;---------------------------------------------------------------------------------------
PLC_ResultsSonic_dup:	plcheader		
		plcm	Nem_TitleCard,vram_TitleCard
		plcm	Nem_ResultsText,vram_ResultsText
		plcm 	Nem_MiniSonic,vram_MiniCharacter
		plcm 	Nem_Perfect,vram_Perfect
	PLC_ResultsSonic_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue (duplicate) - End of	level signpost
;---------------------------------------------------------------------------------------
PLC_Signpost_dup:	plcheader	
		plcm	Nem_Signpost,vram_Signpost
	PLC_Signpost_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Chemical Plant Boss
;---------------------------------------------------------------------------------------
PLC_CPZBoss_dup:	plcheader		
		plcm	Nem_Eggpod,vram_CPZEggpod
		plcm	Nem_CPZBoss,vram_CPZBoss
		plcm	Nem_EggpodJets,vram_CPZEggpodJets
		plcm	Nem_BossSmoke,vram_CPZBossSmoke
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_CPZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Emerald Hill Boss
;---------------------------------------------------------------------------------------
PLC_EHZBoss_dup:	plcheader			
		plcm	Nem_Eggpod,vram_EHZEggpod
		plcm	Nem_EHZBoss,vram_EHZBoss
		plcm	Nem_EggChopperBlades,vram_EggChopperBlades
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_EHZBoss_dup_end:
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Hill Top Boss
;---------------------------------------------------------------------------------------
PLC_HTZBoss_dup:	plcheader			
		plcm	Nem_Eggpod,vram_HTZEggpod
		plcm	Nem_HTZBoss,vram_HTZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
		plcm	Nem_BossSmoke,vram_HTZBossSmoke
	PLC_HTZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Aquatic Ruin Boss
;---------------------------------------------------------------------------------------
PLC_ARZBoss_dup:	plcheader			
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_ARZBoss,vram_ARZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_ARZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Mystic Cave Boss
;---------------------------------------------------------------------------------------
PLC_MCZBoss_dup:	plcheader			
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_MCZBoss,vram_MCZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_MCZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Casino Night Boss
;---------------------------------------------------------------------------------------
PLC_CNZBoss_dup:	plcheader				
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_CNZBoss,vram_CNZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_CNZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Metropolis Boss
;---------------------------------------------------------------------------------------
PLC_MTZBoss_dup:	plcheader			
		plcm	Nem_Eggpod,vram_Eggpod_common
		plcm	Nem_MTZBoss,vram_MTZBoss
		plcm	Nem_EggpodJets,vram_MTZEggpodJets
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_MTZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - Oil Ocean Boss
;---------------------------------------------------------------------------------------
PLC_OOZBoss_dup:	plcheader				
		plcm	Nem_OOZBoss,vram_OOZBoss
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_OOZBoss_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue (duplicate) - Fiery Explosion
;---------------------------------------------------------------------------------------
PLC_FieryExplosion_dup:	plcheader			
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_FieryExplosion_dup_end:	
;---------------------------------------------------------------------------------------
; Pattern load cue (duplicate) - Final Boss
;---------------------------------------------------------------------------------------
PLC_DEZBoss_dup:	plcheader			
		plcm	Nem_DEZBoss,vram_DEZBoss
	PLC_DEZBoss_dup_end:
;---------------------------------------------------------------------------------------
; Pattern load cues (duplicate) - EHZ Animals
;---------------------------------------------------------------------------------------
PLC_EHZAnimals_dup:		plcheader			
		plcm	Nem_Squirrel,vram_animal_1
		plcm	Nem_Flicky,vram_animal_2
	PLC_EHZAnimals_dup_end:		
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - MCZ Animals
;---------------------------------------------------------------------------------------
PLC_MCZAnimals_dup:		plcheader			
		plcm	Nem_Mouse,vram_animal_1
		plcm	Nem_Chicken,vram_animal_2
	PLC_MCZAnimals_dup_end:		
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - HTZ/MTZ/WFZ animals
;---------------------------------------------------------------------------------------
PLC_WFZAnimals_dup:		plcheader			
		plcm Nem_Beaver,vram_animal_1
		plcm Nem_Eagle,vram_animal_2
	PLC_WFZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - DEZ Animals
;---------------------------------------------------------------------------------------
PLC_DEZAnimals_dup:		plcheader			
		plcm Nem_Pig,vram_animal_1
		plcm Nem_Chicken,vram_animal_2
	PLC_DEZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - HPZ animals
;---------------------------------------------------------------------------------------
PLC_HPZAnimals_dup:		plcheader			
		plcm Nem_Mouse,vram_animal_1
		plcm Nem_Seal,vram_animal_2
	PLC_HPZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - OOZ Animals
;---------------------------------------------------------------------------------------
PLC_OOZAnimals_dup:		plcheader			
		plcm Nem_Penguin,vram_animal_1
		plcm Nem_Seal,vram_animal_2
	PLC_OOZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - SCZ Animals
;---------------------------------------------------------------------------------------
PLC_SCZAnimals_dup:		plcheader			
		plcm Nem_Turtle,vram_animal_1
		plcm Nem_Chicken,vram_animal_2
	PLC_SCZAnimals_dup_end:		
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - CNZ Animals
;---------------------------------------------------------------------------------------
PLC_CNZAnimals_dup:		plcheader			
		plcm Nem_Bear,vram_animal_1
		plcm Nem_Flicky,vram_animal_2
	PLC_CNZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - CPZ Animals
;---------------------------------------------------------------------------------------
PLC_CPZAnimals_dup:		plcheader			
		plcm Nem_Rabbit,vram_animal_1
		plcm Nem_Eagle,vram_animal_2
	PLC_CPZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - ARZ Animals
;---------------------------------------------------------------------------------------
PLC_ARZAnimals_dup:		plcheader			
		plcm Nem_Penguin,vram_animal_1
		plcm Nem_Flicky,vram_animal_2
	PLC_ARZAnimals_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - Special Stage
;---------------------------------------------------------------------------------------
PLC_SpecialStage_dup:	plcheader		
		plcm	Nem_SpecialEmerald,vram_SpecialEmerald
		plcm	Nem_SpecialMessages,vram_SpecialMessages
		plcm	Nem_SpecialHUD,vram_SpecialHUD
		plcm	Nem_SpecialHorizShadow,vram_SpecialHorizShadow
		plcm	Nem_SpecialDiagShadow,vram_SpecialDiagShadow
		plcm	Nem_SpecialVertShadow,vram_SpecialVertShadow
		plcm	Nem_SpecialExplosion,vram_SpecialExplosion
		plcm	Nem_SpecialRings,vram_SpecialRings
		plcm	Nem_SpecialStart,vram_SpecialStart
		plcm	Nem_SpecialPlayerVSPlayer,vram_SpecialPlayerVSPlayer
		plcm	Nem_SpecialBack,vram_SpecialBack
		plcm	Nem_SpecialStars,vram_SpecialStars
		plcm	Nem_SpecialTailsText,vram_SpecialTailsText
	PLC_SpecialStage_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cue (duplicate) - Special Stage Bombs
;---------------------------------------------------------------------------------------
PLC_SpecialStageBombs_dup:	plcheader		
		plcm	Nem_SpecialBomb,vram_SpecialBomb
	PLC_SpecialStageBombs_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - WFZ Boss
;---------------------------------------------------------------------------------------
PLC_WFZBoss_dup:	plcheader			
		plcm	Nem_WFZBoss,vram_WFZBoss
		plcm	Nem_RobotnikRunning,vram_RobotnikRunning
		plcm	Nem_RobotnikUpper,vram_RobotnikUpper
		plcm	Nem_RobotnikLower,vram_RobotnikLower
		plcm	Nem_FieryExplosion,vram_FieryExplosion
	PLC_WFZBoss_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cues (duplicate) - Tornado
;---------------------------------------------------------------------------------------
PLC_Tornado_dup:	plcheader		
		plcm	Nem_Tornado,vram_Tornado
		plcm	Nem_TornadoThruster,vram_TornadoThruster
		plcm	Nem_Clouds,vram_Clouds
	PLC_Tornado_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cue (duplicate) - Egg Prison
;---------------------------------------------------------------------------------------
PLC_Capsule_dup:	plcheader		
		plcm 	Nem_Capsule,vram_Capsule
	PLC_Capsule_dup_end:
;---------------------------------------------------------------------------------------
;Pattern load cue (duplicate) - Explosion
;---------------------------------------------------------------------------------------
PLC_Explosion_dup:	plcheader			
		plcm 	Nem_Explosion,vram_Explosion
	PLC_Explosion_dup_end:	
;---------------------------------------------------------------------------------------
;Pattern load cue (duplicate) - Tails end of level results screen
;---------------------------------------------------------------------------------------
PLC_ResultsTails_dup:	plcheader			
		plcm	Nem_TitleCard,vram_TitleCard
		plcm 	Nem_ResultsText,vram_ResultsText
		plcm 	Nem_MiniTails,vram_MiniCharacter
		plcm	Nem_Perfect,vram_Perfect
	PLC_ResultsTails_dup_end:	
	endc
	
;---------------------------------------------------------------------------------------
; Collision data
;---------------------------------------------------------------------------------------

		incfile ColCurveMap
		incfile CollArray1
		incfile CollArray2

;---------------------------------------------------------------------------------------
; 16x16 collision indices (Kosinski compression)
;---------------------------------------------------------------------------------------

		incfile	ColP_EHZHTZ
		incfile	ColS_EHZHTZ
		incfile	ColP_MTZ
;		incfile	ColP_HPZ
;		incfile	ColS_HPZ		
		incfile	ColP_OOZ
		incfile	ColP_MCZ
		incfile	ColP_CNZ
		incfile	ColS_CNZ
		incfile	ColP_CPZDEZ
		incfile	ColS_CPZDEZ
		incfile	ColP_ARZ
		incfile	ColS_ARZ
		incfile	ColP_WFZSCZ
		incfile	ColS_WFZSCZ
		
;---------------------------------------------------------------------------------------
; Level layout pointers
; Two entries per act, pointing to the level layouts for aAts 1 and 2 of each level
; respectively.
; TODO: Figure out which ones are unused and note them accordingly
;---------------------------------------------------------------------------------------
LevelIndex:		index offset(*)
		
		ptr Level_EHZ1					; 0 					
		ptr Level_EHZ2					; 1
		ptr Level_EHZ1					; 2
		ptr Level_EHZ1					; 3
		ptr Level_EHZ1					; 4
		ptr Level_EHZ1					; 5
		ptr Level_EHZ1					; 6
		ptr Level_EHZ1					; 7
		ptr Level_MTZ1					; 8
		ptr Level_MTZ2					; 9
		ptr Level_MTZ3					; $A
		ptr Level_MTZ3					; $B
		ptr Level_WFZ					; $C
		ptr Level_WFZ					; $D
		ptr Level_HTZ1					; $E
		ptr Level_HTZ2					; $F
		ptr Level_OOZ1					; $10
		ptr Level_OOZ1					; $11
		ptr Level_EHZ1					; $12
		ptr Level_EHZ1					; $13
		ptr Level_OOZ1					; $14
		ptr Level_OOZ2					; $15
		ptr Level_MCZ1					; $16
		ptr Level_MCZ2					; $17
		ptr Level_CNZ1					; $18
		ptr Level_CNZ2					; $19
		ptr Level_CPZ1					; $1A
		ptr Level_CPZ2					; $1B
		ptr Level_DEZ					; $1C
		ptr Level_DEZ					; $1D
		ptr Level_ARZ1					; $1E
		ptr Level_ARZ2					; $1F
		ptr Level_SCZ					; $20
		ptr Level_SCZ					; $21

; ---------------------------------------------------------------------------
; Level	layouts (Kosinski Compression)
; ---------------------------------------------------------------------------

		incfile	Level_EHZ1
		incfile	Level_EHZ2
		incfile	Level_MTZ1
		incfile	Level_MTZ2
		incfile	Level_MTZ3
		incfile	Level_WFZ
		incfile	Level_HTZ1
		incfile	Level_HTZ2
		incfile	Level_OOZ1
		incfile	Level_OOZ2
		incfile	Level_MCZ1
		incfile	Level_MCZ2
		incfile	Level_CNZ1
		incfile	Level_CNZ2
		incfile	Level_CPZ1
		incfile	Level_CPZ2
		incfile	Level_DEZ
		incfile	Level_ARZ1
		incfile	Level_ARZ2
		incfile	Level_SCZ

;---------------------------------------------------------------------------------------
; Animated level graphics
;---------------------------------------------------------------------------------------

		incfile	Art_Flowers1				; ArtUnc_49714:
		incfile	Art_Flowers2				; ArtUnc_49794:
		incfile	Art_Flowers3				; ArtUnc_49814:
		incfile	Art_Flowers4				; ArtUnc_49894:
		incfile	Art_EHZPulseBall			; ArtUnc_49914:
		incfile	Nem_HTZCliffs				; ArtNem_49A14: ArtUnc_HTZCliffs:
		incfile	Art_HTZClouds				; ArtUnc_4A33E:
		incfile	Art_MTZCylinder				; ArtUnc_4A73E:
		incfile	Art_Lava				; ArtUnc_4B73E:
		incfile	Art_MTZAnimBack				; ArtUnc_4BD3E:
;		incfile Art_HPZPulseOrb
		incfile	Art_OOZPulseBall			; ArtUnc_4BF7E:
		incfile	Art_OOZSquareBall1			; ArtUnc_4C0FE:
		incfile	Art_OOZSquareBall2			; ArtUnc_4C2FE:
		incfile	Art_Oil1				; ArtUnc_4C4FE:
		incfile	Art_Oil2				; ArtUnc_4CCFE:
		incfile	Art_CNZFlipTiles			; ArtUnc_4D4FE:
		incfile	Art_CNZSlotPics				; ArtUnc_4EEFE:
		incfile	Art_CPZAnimBack				; ArtUnc_4FAFE:
		incfile	Art_Waterfall1				; ArtUnc_4FAFE:
		incfile	Art_Waterfall2
		incfile	Art_Waterfall3
		
;---------------------------------------------------------------------------------------
; Graphics and mappings - Sonic & Tails
;---------------------------------------------------------------------------------------	

		align $20	
		incfile	Art_Sonic				; ArtUnc_50000:
		
		align $20
		incfile	Art_Tails				; ArtUnc_64320:

		include	"mappings/sprite/Sonic.asm"		; MapUnc_6FBE0: SprTbl_Sonic: Map_Sonic:
		include	"mappings/spriteDPLC/Sonic.asm"		; MapRUnc_714E0:
		even
		
		incfile	Nem_Shield				; ArtNem_71D8E:
		incfile	Nem_Invinciblity_Stars			; ArtNem_71F14:
		incfile	Art_SplashAndDust			; ArtUnc_71FFC:
		incfile Nem_SuperSonic_Stars			; ArtNem_7393C:	
		
		include	"mappings/sprite/Tails.asm"		; MapUnc_739E2: ; Map_Tails
		include	"mappings/spriteDPLC/Tails.asm"		; MapRUnc_7446C:
		even

;---------------------------------------------------------------------------------------
; Graphics and mappings - Sega and Title screen 
;---------------------------------------------------------------------------------------	

		incfile	Nem_SEGA				; ArtNem_74876:	
		incfile Nem_IntroTrails				; ArtNem_74CF6:
		incfile Eni_SEGA				; MapEng_74D0E:
		incfile Eni_TitleScreen				; ArtNem_74DC6:
		incfile Eni_TitleBack				; MapEng_74E86:
		incfile	Eni_TitleLogo
		incfile Nem_Title				; ArtNem_74F6C:
		incfile	Nem_TitleSprites			; ArtNem_7667A:
		incfile	Nem_MenuJunk				; ArtNem_78CBC:
		
;---------------------------------------------------------------------------------------
; Graphics - global level objects, HUD, title cards, text, and menus
;---------------------------------------------------------------------------------------			
		
		incfile	Nem_Button				; ArtNem_78DAC:
		incfile	Nem_VrtclSprng				; ArtNem_78E84:
		incfile	Nem_HrzntlSprng				; ArtNem_78FA0:
		incfile Nem_DignlSprng				; ArtNem_7906A:
		incfile	Nem_HUD					; ArtNem_7923E:
		incfile	Nem_Sonic_Life_Counter			; ArtNem_79346:
		incfile	Nem_Ring				; ArtNem_7945C:
		incfile	Nem_Monitors				; ArtNem_79550:
		incfile Nem_Spikes				; ArtNem_7995C:
		incfile	Nem_Numbers				; ArtNem_799AC:
		incfile	Nem_Checkpoint				; ArtNem_79A86:
		incfile Nem_Signpost				; ArtNem_79BDE:
		incfile	Art_Signpost				; ArtUnc_7A18A:	; Yep, it's in the ROM twice: once compressed and once uncompressed
		incfile	Nem_LeverSpring				; ArtNem_7AB4A:
		incfile	Nem_HorizSpike				; ArtNem_7AC9A:
		
		incfile	Nem_BubbleGenerator			; ArtNem_7AD16: ArtNem_BigBubbles:
		incfile	Nem_Bubbles				; ArtNem_7AEE2:
		incfile	Art_Countdown				; ArtUnc_7AF80:
		incfile	Nem_Game_Over				; ArtNem_7B400:
		incfile	Nem_Explosion				; ArtNem_7B592:
		incfile	Nem_MilesLife				; ArtNem_7B946:
		incfile	Nem_Capsule				; ArtNem_7BA32:
		incfile	Nem_ContinueTails			; ArtNem_7BDBE:
		incfile	Nem_MiniSonic				; ArtNem_7C0AA:
		incfile	Nem_TailsLife				; ArtNem_7C20C:
		incfile	Nem_MiniTails				; ArtNem_7C2F2:
		
		incfile	Nem_StandardFont			; ArtNem_7C43A:
		incfile	Nem_1P2PWins				; ArtNem_7C9AE:
		incfile	Eni_MenuBack				; MapEng_7CB80:
		incfile	Art_MenuBack				; ArtUnc_7CD2C:
		incfile	Nem_TitleCard				; ArtNem_7D22C:
		incfile	Nem_TitleCardFont			; ArtNem_7D58A:
		incfile	Nem_MenuBox				; ArtNem_7D990:
		incfile	Nem_LevelSelectPics			; ArtNem_7DA10:
		incfile	Nem_ResultsText				; ArtNem_7E86A:
		incfile	Nem_SpecialStageResults			; ArtNem_7EB58:
		incfile	Nem_Perfect				; ArtNem_7EEBE:
		
;---------------------------------------------------------------------------------------
; Graphics - Animals
;---------------------------------------------------------------------------------------		
		
		incfile	Nem_Flicky				; ArtNem_7EF60: ; ArtNem_Bird:
		incfile	Nem_Squirrel				; ArtNem_7F0A2:
		incfile	Nem_Mouse				; ArtNem_7F206
		incfile	Nem_Chicken				; ArtNem_7F340:
		incfile	Nem_Beaver				; ArtNem_7F4A2:
		incfile	Nem_Eagle				; ArtNem_7F5E2:
		incfile	Nem_Pig					; ArtNem_7F710:
		incfile	Nem_Seal				; ArtNem_7F846:
		incfile	Nem_Penguin				; ArtNem_7F962:
		incfile	Nem_Turtle				; ArtNem_7FADE:
		incfile	Nem_Bear				; ArtNem_7FC90:
		incfile	Nem_Rabbit				; ArtNem_7FDD2:
		
;---------------------------------------------------------------------------------------
; Graphics - level objects
;---------------------------------------------------------------------------------------
		
		incfile	Nem_WFZSwitch				; ArtNem_7FF2A:
		incfile	Nem_BreakPanels				; ArtNem_7FF98:
		
		incfile	Nem_SlidingSpikes			; ArtNem_8007C:
		incfile	Nem_BurnerLid				; ArtNem_80274:
		incfile	Nem_StripedBlocksVert			; ArtNem_8030A:
		incfile	Nem_Oilfall				; ArtNem_80376:
		incfile	Nem_Oilfall2				; ArtNem_804F2:
		incfile	Nem_SpringBall				; ArtNem_805C0:
		incfile	Nem_LaunchBall				; ArtNem_806E0:
		incfile	Nem_OOZPlatform				; ArtNem_806E0:
		incfile	Nem_PushSpring				; ArtNem_80C64:
		incfile	Nem_OOZSwingPlat			; ArtNem_80E26:
		incfile	Nem_StripedBlocksHoriz			; ArtNem_81048:
		incfile	Nem_OOZElevator				; ArtNem_810B8:
		incfile	Nem_Fan					; ArtNem_81254:
		incfile	Nem_Burner				; ArtNem_81514:
		
		incfile	Nem_SnakePlats				; ArtNem_81600: ; ArtNem_CNZSnake:
		incfile	Nem_BombPenalty				; ArtNem_81668:
		incfile	Nem_LargeMovingBlock			; ArtNem_816C8:
		incfile	Nem_CNZElevator				; ArtNem_817B4:
		incfile	Nem_Cage				; ArtNem_81826:
		incfile	Nem_HexBumper				; ArtNem_81894:
		incfile	Nem_RoundBumper				; ArtNem_8191E:
		incfile	Nem_DiagLauncher			; ArtNem_81AB0:
		incfile	Nem_VertLauncher			; ArtNem_81C96:
		incfile	Nem_SaucerBumper			; ArtNem_81DCC: ; ArtNem_CNZMiniBumper
		incfile	Nem_Flipper				; ArtNem_81EF2:
		
		incfile	Nem_CPZElevator				; ArtNem_82216:
		incfile	Nem_WaterSurface1			; ArtNem_82364:
		incfile	Nem_Booster				; ArtNem_824D4:
		incfile	Nem_Droplet				; ArtNem_8253C:
		incfile	Nem_Pylon				; ArtNem_825AE:
		incfile	Nem_CPZMetalBlock			; ArtNem_827B8:
		incfile	Nem_ConstructionStripes			; ArtNem_827F8:
		incfile	Nem_CPZDumpingPipePlat			; ArtNem_82864: ; ArtNem_CPZAnimatedBits
		incfile	Nem_StairBlock				; ArtNem_82A46:
		incfile	Nem_CPZTubeSpring			; ArtNem_82C06:
		
		incfile	Nem_WaterSurface2			; ArtNem_82E02:
		incfile	Nem_Leaves				; ArtNem_82EE8:
		incfile	Nem_ArrowAndShooter			; ArtNem_82F74:
		incfile	Nem_ARZBarrier				; ArtNem_830D2: ; ArtNem_ARZBarrierThing
		incfile	Nem_Buzzer				; ArtNem_8316A:
		incfile	Nem_Octus				; ArtNem_8336A:
		incfile	Nem_Aquis				; ArtNem_8368A:
		incfile	Nem_Masher				; ArtNem_839EA:	ArtNem_Pirahna:
		
		incfile	Nem_Eggpod				; ArtNem_83BF6:
		incfile	Nem_CPZBoss				; ArtNem_84332:
		incfile	Nem_FieryExplosion			; ArtNem_84890:
		incfile	Nem_EggpodJets				; ArtNem_84F18:
		incfile	Nem_BossSmoke				; ArtNem_84F96:
		incfile	Nem_EHZBoss				; ArtNem_8507C:
		incfile	Nem_EggChopperBlades			; ArtNem_85868:  ; ArtNem_EggChoppers:
		incfile	Nem_HTZBoss				; ArtNem_8595C:
		incfile	Nem_ARZBoss				; ArtNem_86128:
		incfile	Nem_MCZBoss				; ArtNem_86B6E:
		incfile	Nem_CNZBoss				; ArtNem_87AAC:
		incfile	Nem_OOZBoss				; ArtNem_882D6:
		incfile	Nem_MTZBoss				; ArtNem_88DA6:
		
		incfile	Art_FallingRocks			; Art_FallingRocks:
		incfile	Nem_Whisp				; ArtNem_895E4:
		incfile	Nem_Grounder				; ArtNem_8970E:
		incfile	Nem_ChopChop				; ArtNem_89B9A:
		incfile	Nem_Rexon				;	ArtNem_89DEC: ArtNem_HtzRexxon:
		incfile	Nem_Spiker				;	ArtNem_89FAA:	ArtNem_HtzDriller:
		incfile	Nem_Nebula				; ArtNem_8A142:
		incfile	Nem_Turtloid				; ArtNem_8A362:
		incfile	Nem_Coconuts
		incfile	Nem_Crawlton				; ArtNem_8AB36:
		incfile	Nem_Flasher				; ArtNem_8AC5E:
		incfile	Nem_Slicer				; ArtNem_8AD80: ; ArtNem_MtzMantis
		incfile	Nem_Shellcracker			; ArtNem_8B058:
		incfile	Nem_Asteron				; ArtNem_8B300: ArtNem_MtzSupernova
		incfile	Nem_Spiny				; ArtNem_8B430:
		incfile	Nem_Grabber				; ArtNem_8B6B4:
		incfile	Nem_Clucker				; ArtNem_8B9DC:
		incfile	Nem_Balkiry				; ArtNem_8BC16:
		
		incfile	Nem_MechaSonic				; ArtNem_8BE12:
		incfile	Nem_Tornado				; ArtNem_8CC44:
		
		incfile	Nem_WFZWallTurret			; ArtNem_8D1A0:
		incfile	Nem_Hook				; ArtNem_8D388:
		incfile	Nem_WFZGunPlatform			; ArtNem_8D540:
		incfile	Nem_WFZConveyorBeltWheel		; ArtNem_8D7D8:
		incfile	Nem_WFZFloatingPlatform	
		incfile	Nem_WFZVrtclLaser			; ArtNem_8DA6E:
		incfile	Nem_Clouds				; ArtNem_8DAFC:
		incfile	Nem_WFZHrzntlLaser			; ArtNem_8DC42:
		incfile	Nem_WFZLaunchCatapult			; ArtNem_8DCA2:
		incfile	Nem_WFZBeltPlatform			; ArtNem_8DD0C:
		incfile	Nem_WFZUnusedBadnik			; ArtNem_8DDF6:
		incfile	Nem_WFZVrtclPrpllr			; ArtNem_8DEB8:
		incfile	Nem_WFZHrzntlPrpllr			; ArtNem_8DEE8:
		incfile	Nem_WFZTiltPlatforms			; ArtNem_8E010:
		incfile	Nem_WFZThrust				; ArtNem_8E0C4:
		incfile	Nem_WFZBoss

		incfile	Nem_RobotnikUpper
		incfile	Nem_RobotnikRunning
		incfile	Nem_RobotnikLower
		incfile	Nem_DEZWindow
		incfile	Nem_DEZBoss
		incfile	Nem_Crawl
		incfile	Nem_TornadoThruster
		
; More level object graphics are stored in one of the sound banks.
		
;---------------------------------------------------------------------------------------
; Graphics and mappings - Ending
;---------------------------------------------------------------------------------------		

		incfile	Eni_Ending1				; MapEng_906E0:
		incfile	Eni_Ending2				; MapEng_906F8:
		incfile	Eni_Ending3				; MapEng_90722:
		incfile	Eni_Ending4				; MapEng_9073C:
		incfile	Eni_EndingTailsPlane			; MapEng_9076E:
		incfile	Eni_EndingSonicPlane			; MapEng_907C0:

		
		rept 9	
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni" ; 9 unused duplicates of Eni_EndGameLogo (used as padding?)
		even
		endr


		incfile	Nem_EndingStills			; ArtNem_EndingPics:
		incfile	Nem_EndingFinalTornado			; ArtNem_EndingFinalTornado:
		incfile	Nem_EndingMiniTornado			; ArtNem_EndingMiniTornado:
		incfile	Nem_EndingSonic
		incfile	Nem_EndingSuperSonic			; ArtNem_EndingSuperSonic:
		incfile	Nem_EndingTails				; ArtNem_93F3C:
		incfile	Nem_EndingLogo				; ArtNem_94B28:


; ----------------------------------------------------------------------------------
; Level art and block mappings
; ----------------------------------------------------------------------------------

		incfile	BM16_EHZ
		incfile	Kos_EHZ
		incfile	BM16_HTZ
		incfile	Kos_HTZ
		incfile	BM128_EHZ
		
		incfile	BM16_MTZ
		incfile	Kos_MTZ
		incfile	BM128_MTZ

;		incfile	BM16_HPZ
;		incfile	Kos_HPZ
;		incfile	BM128_HPZ

BM16_HPZ:							; While HPZ's graphics and mappings were removed, labels that reference them
Kos_HPZ:							; remain, which now point to OOZ's 16x16 mappings data instead.
BM128_HPZ:

		incfile	BM16_OOZ
		incfile	Kos_OOZ
		incfile	BM128_OOZ
		
		incfile	BM16_MCZ
		incfile	Kos_MCZ
		incfile	BM128_MCZ
		
		incfile	BM16_CNZ
		incfile	Kos_CNZ
		incfile	BM128_CNZ
		
		incfile	BM16_CPZ
		incfile	Kos_CPZ
		incfile	BM128_CPZ
		
		incfile	BM16_ARZ				; See warning in File Definitions.asm
		incfile	Kos_ARZ
		incfile	BM128_ARZ

		incfile	BM16_WFZ
		incfile	Kos_SCZ
		incfile	Kos_WFZ
		incfile	BM128_WFZ


; ----------------------------------------------------------------------------------
; Special Stage track mappings
; ----------------------------------------------------------------------------------

; End curve right, slope up, slope down, begin curve right
MapSpec_Rise1:		incbin	"mappings/special stage/Slope Up 1.bin"
MapSpec_Rise2:		incbin	"mappings/special stage/Slope Up 2.bin"
MapSpec_Rise3:		incbin	"mappings/special stage/Slope Up 3.bin"
MapSpec_Rise4:		incbin	"mappings/special stage/Slope Up 4.bin"
MapSpec_Rise5:		incbin	"mappings/special stage/Slope Up 5.bin"
MapSpec_Rise6:		incbin	"mappings/special stage/Slope Up 6.bin"
MapSpec_Rise7:		incbin	"mappings/special stage/Slope Up 7.bin"
MapSpec_Rise8:		incbin	"mappings/special stage/Slope Up 8.bin"
MapSpec_Rise9:		incbin	"mappings/special stage/Slope Up 9.bin"
MapSpec_Rise10:		incbin	"mappings/special stage/Slope Up 10.bin"
MapSpec_Rise11:		incbin	"mappings/special stage/Slope Up 11.bin"
MapSpec_Rise12:		incbin	"mappings/special stage/Slope Up 12.bin"
MapSpec_Rise13:		incbin	"mappings/special stage/Slope Up 13.bin"
MapSpec_Rise14:		incbin	"mappings/special stage/Slope Up 14.bin"
MapSpec_Rise15:		incbin	"mappings/special stage/Slope Up 15.bin"
MapSpec_Rise16:		incbin	"mappings/special stage/Slope Up 16.bin"
MapSpec_Rise17:		incbin	"mappings/special stage/Slope Up 17.bin"


; Straight path
MapSpec_Straight1:		incbin	"mappings/special stage/Straight Path 1.bin"
MapSpec_Straight2:		incbin	"mappings/special stage/Straight Path 2.bin"
MapSpec_Straight3:		incbin	"mappings/special stage/Straight Path 3.bin"
MapSpec_Straight4:		incbin	"mappings/special stage/Straight Path 4.bin"


; Exit curve & slope down
MapSpec_Drop1:		incbin	"mappings/special stage/Slope Down 1.bin"
MapSpec_Drop2:		incbin	"mappings/special stage/Slope Down 2.bin"
MapSpec_Drop3:		incbin	"mappings/special stage/Slope Down 3.bin"
MapSpec_Drop4:		incbin	"mappings/special stage/Slope Down 4.bin"
MapSpec_Drop5:		incbin	"mappings/special stage/Slope Down 5.bin"
MapSpec_Drop6:		incbin	"mappings/special stage/Slope Down 6.bin"
MapSpec_Drop7:		incbin	"mappings/special stage/Slope Down 7.bin"
MapSpec_Drop8:		incbin	"mappings/special stage/Slope Down 8.bin"
MapSpec_Drop9:		incbin	"mappings/special stage/Slope Down 9.bin"
MapSpec_Drop10:		incbin	"mappings/special stage/Slope Down 10.bin"
MapSpec_Drop11:		incbin	"mappings/special stage/Slope Down 11.bin"
MapSpec_Drop12:		incbin	"mappings/special stage/Slope Down 12.bin"
MapSpec_Drop13:		incbin	"mappings/special stage/Slope Down 13.bin"
MapSpec_Drop14:		incbin	"mappings/special stage/Slope Down 14.bin"
MapSpec_Drop15:		incbin	"mappings/special stage/Slope Down 15.bin"
MapSpec_Drop16:		incbin	"mappings/special stage/Slope Down 16.bin"
MapSpec_Drop17:		incbin	"mappings/special stage/Slope Down 17.bin"


; Curve
MapSpec_Turning1:		incbin	"mappings/special stage/Curve 1.bin"
MapSpec_Turning2:		incbin	"mappings/special stage/Curve 2.bin"
MapSpec_Turning3:		incbin	"mappings/special stage/Curve 3.bin"
MapSpec_Turning4:		incbin	"mappings/special stage/Curve 4.bin"
MapSpec_Turning5:		incbin	"mappings/special stage/Curve 5.bin"
MapSpec_Turning6:		incbin	"mappings/special stage/Curve 6.bin"


; Exit curve
MapSpec_Unturn1:		incbin "mappings/special stage/Exit Curve 1.bin"
MapSpec_Unturn2:		incbin "mappings/special stage/Exit Curve 2.bin"
MapSpec_Unturn3:		incbin "mappings/special stage/Exit Curve 3.bin"
MapSpec_Unturn4:		incbin "mappings/special stage/Exit Curve 4.bin"
MapSpec_Unturn5:		incbin "mappings/special stage/Exit Curve 5.bin"


; Begin curve right
MapSpec_Turn1:		incbin "mappings/special stage/Curve Right 1.bin"
MapSpec_Turn2:		incbin "mappings/special stage/Curve Right 2.bin"
MapSpec_Turn3:		incbin "mappings/special stage/Curve Right 3.bin"
MapSpec_Turn4:		incbin "mappings/special stage/Curve Right 4.bin"
MapSpec_Turn5:		incbin "mappings/special stage/Curve Right 5.bin"
MapSpec_Turn6:		incbin "mappings/special stage/Curve Right 6.bin"
MapSpec_Turn7:		incbin "mappings/special stage/Curve Right 7.bin"

; ----------------------------------------------------------------------------------
; Special Stage graphics, plane mappings, and layout data
; ----------------------------------------------------------------------------------

		incfile	Kos_Special				; Koz_DCA38
		incfile	Nem_SpecialBack				; ArtNem_DCD68:
		incfile	Eni_SpecialBack				; MapEng_SpecialBack: ; MapEng_DD1DE:
		incfile	Eni_SpecialBackBottom			; MapEng_DD30C:
		incfile	Nem_SpecialHUD				; ArtNem_DD48A:
		incfile	Nem_SpecialStart			; ArtNem_DD790:
		incfile	Nem_SpecialStars			; ArtNem_DD8CE:
		incfile	Nem_SpecialPlayerVSPlayer		; ArtNem_DD9C8:
		incfile	Nem_SpecialRings			; ArtNem_DDA7E:
		incfile	Nem_SpecialHorizShadow			; ArtNem_DDFA4: ; ArtNem_SpecialFlatShadow
		incfile	Nem_SpecialDiagShadow			; ArtNem_DE05A:
		incfile	Nem_SpecialVertShadow			; ArtNem_DE120: ; ArtNem_SpecialSideShadow
		incfile	Nem_SpecialExplosion			; ArtNem_DE188:
		incfile	Nem_SpecialBomb				; ArtNem_DE4BC:
		incfile	Nem_SpecialEmerald			; ArtNem_DE8AC:
		incfile	Nem_SpecialMessages			; ArtNem_DEAF4:
		incfile	Nem_SpecialSonicAndTails		; Nem_DEEAE
		incfile	Nem_SpecialTailsText			; ArtNem_E247E:
		incfile	Kos_SpecialPerspective			; MiscKoz_SpecialPerspective:
		incfile	Nem_SpecialLevelLayouts
		incfile	Koz_SpecialObjectLocations		; MiscKoz_SpecialObjectLocations:
		

		align $100					; (unnecessary; could be replaced with "even")

; --------------------------------------------------------------------------------------
; Ring position index
; --------------------------------------------------------------------------------------

RingPos_Index:	index offset(*)

		ptr Rings_EHZ_1					; 0			
		ptr Rings_EHZ_2					; 1
		ptr Rings_Lev1_1				; 2
		ptr Rings_Lev1_2				; 3
		ptr Rings_Lev2_1				; 4
		ptr Rings_Lev2_2				; 5
		ptr Rings_Lev3_1				; 6
		ptr Rings_Lev3_2				; 7
		ptr Rings_MTZ_1					; 8
		ptr Rings_MTZ_2					; 9
		ptr Rings_MTZ_3					; 10
		ptr Rings_MTZ_4					; 11
		ptr Rings_WFZ_1					; 12
		ptr Rings_WFZ_2					; 13
		ptr Rings_HTZ_1					; 14
		ptr Rings_HTZ_2					; 15
		ptr Rings_HPZ_1					; 16
		ptr Rings_HPZ_2					; 17
		ptr Rings_Lev9_1				; 18
		ptr Rings_Lev9_2				; 19
		ptr Rings_OOZ_1					; 20
		ptr Rings_OOZ_2					; 21
		ptr Rings_MCZ_1					; 22
		ptr Rings_MCZ_2					; 23
		ptr Rings_CNZ_1					; 24
		ptr Rings_CNZ_2					; 25
		ptr Rings_CPZ_1					; 26
		ptr Rings_CPZ_2					; 27
		ptr Rings_DEZ_1					; 28
		ptr Rings_DEZ_2					; 29
		ptr Rings_ARZ_1					; 30
		ptr Rings_ARZ_2					; 31
		ptr Rings_SCZ_1					; 32
		ptr Rings_SCZ_2					; 33		
		
Rings_EHZ_1:	incbin	"level/rings/EHZ 1.bin"
Rings_EHZ_2:	incbin	"level/rings/EHZ 2.bin"
Rings_Lev1_1:	incbin	"level/rings/01 1.bin"			; null
Rings_Lev1_2:	incbin	"level/rings/01 2.bin"			; null
Rings_Lev2_1:	incbin	"level/rings/02 1.bin"			; null
Rings_Lev2_2:	incbin	"level/rings/02 2.bin"			; null
Rings_Lev3_1:	incbin	"level/rings/03 1.bin"			; null
Rings_Lev3_2:	incbin	"level/rings/03 2.bin"			; null
Rings_MTZ_1:	incbin	"level/rings/MTZ 1.bin"
Rings_MTZ_2:	incbin	"level/rings/MTZ 2.bin"
Rings_MTZ_3:	incbin	"level/rings/MTZ 3.bin"
Rings_MTZ_4:	incbin	"level/rings/MTZ 4.bin"			; null
Rings_HTZ_1:	incbin	"level/rings/HTZ 1.bin"
Rings_HTZ_2:	incbin	"level/rings/HTZ 2.bin"
Rings_HPZ_1:	incbin	"level/rings/HPZ 1.bin"
Rings_HPZ_2:	incbin	"level/rings/HPZ 2.bin"			; null
Rings_Lev9_1:	incbin	"level/rings/09 1.bin"			; null
Rings_Lev9_2:	incbin	"level/rings/09 2.bin"			; null
Rings_OOZ_1:	incbin	"level/rings/OOZ 1.bin"
Rings_OOZ_2:	incbin	"level/rings/OOZ 2.bin"
Rings_MCZ_1:	incbin	"level/rings/MCZ 1.bin"
Rings_MCZ_2:	incbin	"level/rings/MCZ 2.bin"
Rings_CNZ_1:	incbin	"level/rings/CNZ 1.bin"
Rings_CNZ_2:	incbin	"level/rings/CNZ 2.bin"
Rings_CPZ_1:	incbin	"level/rings/CPZ 1.bin"
Rings_CPZ_2:	incbin	"level/rings/CPZ 2.bin"
Rings_DEZ_1:	incbin	"level/rings/DEZ 1.bin"			; null
Rings_DEZ_2:	incbin	"level/rings/DEZ 2.bin"			; null
Rings_WFZ_1:	incbin	"level/rings/WFZ 1.bin"
Rings_WFZ_2:	incbin	"level/rings/WFZ 2.bin"
Rings_ARZ_1:	incbin	"level/rings/ARZ 1.bin"
Rings_ARZ_2:	incbin	"level/rings/ARZ 2.bin"
Rings_SCZ_1:	incbin	"level/rings/SCZ 1.bin"
Rings_SCZ_2:	incbin	"level/rings/SCZ 2.bin"			; null

		align $200					; (unnecessary; could be replaced with "even")

; --------------------------------------------------------------------------------------
; Object position index
; --------------------------------------------------------------------------------------
ObjPos_Index:	index offset(*)

		ptr ObjPos_EHZ_1				;	0 			
		ptr ObjPos_EHZ_2				;	1
		ptr ObjPos_Null					;	2
		ptr ObjPos_Null					;	3
		ptr ObjPos_Null					;	4
		ptr ObjPos_Null					;	5
		ptr ObjPos_Null					;	6
		ptr ObjPos_Null					;	7
		ptr ObjPos_MTZ_1				;	8
		ptr ObjPos_MTZ_2				;	9
		ptr ObjPos_MTZ_3				;	10
		ptr ObjPos_MTZ_3				;	11
		ptr ObjPos_WFZ_1				;	12
		ptr ObjPos_WFZ_2				;	13
		ptr ObjPos_HTZ_1				;	14
		ptr ObjPos_HTZ_2				;	15
		ptr ObjPos_HPZ_1				;	16
		ptr ObjPos_HPZ_2				;	17
		ptr ObjPos_Null					;	18
		ptr ObjPos_Null					;	19
		ptr ObjPos_OOZ_1				;	20
		ptr ObjPos_OOZ_2				;	21
		ptr ObjPos_MCZ_1				;	22
		ptr ObjPos_MCZ_2				;	23
		ptr ObjPos_CNZ_1				;	24
		ptr ObjPos_CNZ_2				;	25
		ptr ObjPos_CPZ_1				;	26
		ptr ObjPos_CPZ_2				;	27
		ptr ObjPos_DEZ_1				;	28
		ptr ObjPos_DEZ_2				;	29
		ptr ObjPos_ARZ_1				;	30
		ptr ObjPos_ARZ_2				;	31
		ptr ObjPos_SCZ_1				;	32
		ptr ObjPos_SCZ_2				;	33
		
		endobj
		
		include "level/objects/EHZ_1.asm"
		
	if Revision=0
		include "level/objects/EHZ_2_(REV00).asm"
	else
		; fixes a pair of incorrectly placed plane switchers
		include	"level/objects/EHZ_2.asm"
	endc
	
		include	"level/objects/MTZ_1.asm"
		include	"level/objects/MTZ_2.asm"
		include	"level/objects/MTZ_3.asm"

	if Revision=0
		; all starposts are misconfigured: none of them have the 'remember state' flag set
		include	"level/objects/WFZ_1_(REV00).asm"
	else
		include	"level/objects/WFZ_1.asm"
	endc

ObjPos_WFZ_2:
		endobj
		include	"level/objects/HTZ_1.asm"
		include	"level/objects/HTZ_2.asm"
		include	"level/objects/HPZ_1.asm"
ObjPos_HPZ_2:	;include	"level/objects/HPZ_2.asm"
		endobj
		endobj

		include	"level/objects/OOZ_1.asm"
		include	"level/objects/OOZ_2.asm"
		include	"level/objects/MCZ_1.asm"
		include	"level/objects/MCZ_2.asm"

	if Revision=0
		; the signposts are too low, causing them to poke out the bottom of the ground
		include	"level/objects/CNZ_1_(REV00).asm"
		include	"level/objects/CNZ_2_(REV00).asm"
	else
		include	"level/objects/CNZ_1.asm"
		include	"level/objects/CNZ_2.asm"
	endc

		include	"level/objects/CPZ_1.asm"
		include	"level/objects/CPZ_2.asm"
		include	"level/objects/DEZ_1.asm"

ObjPos_DEZ_2:
		endobj

		include	"level/objects/ARZ_1.asm"
		include	"level/objects/ARZ_2.asm"
		include	"level/objects/SCZ_1.asm"
		
ObjPos_SCZ_2:
		endobj
		
ObjPos_Null:
		endobj
		endobj
		endobj
		endobj
ObjPos_End:		

		align $1000					; (unnecessary; could be replaced with "even")

; ---------------------------------------------------------------------------
; Subroutine to load the sound driver
; ---------------------------------------------------------------------------
; sub_EC000:
SoundDriverLoad:
		move	sr,-(sp)
		pushr.l	d0-a6
		disable_ints
		lea	(z80_bus_request).l,a3
		lea	(z80_reset).l,a2
		moveq	#0,d2
		move.w	#$100,d1
		move.w	d1,(a3)					; stop the Z80
		move.w	d1,(a2)					; ensure Z80 reset is not asserted

	.waitforZ80:				
		btst	d2,(a3)
		bne.s	.waitforZ80
		
		jsr	DecompressSoundDriver(pc)		; could be bsr.s
		btst	#video_mode_bit,(vdp_control_port+1).l	; check video mode (why do it this way)
		sne	(z80_ram+f_pal).l				; set if PAL
		move.w	d2,(a2)					; assert Z80 reset
		move.w	d2,(a3)					; start the Z80
		moveq_	$E6,d0					; $FFE6

	.wait:				
		dbf	d0,.wait				; wait for 2,314 cycles to reset the YM2612/3438 (pointless, as they are reset on both cold boot and soft reset by the behavior of the ZRES line) 
		move.w	d1,(a2)					; release Z80 reset
		popr	d0-a6
		move	(sp)+,sr
		rts	

; ===========================================================================

DecompressSoundDriver:				
		lea	SoundDriver(pc),a6
	; WARNING: you must edit MergeCode if you rename this label
	movewZ80CompSize:		
		move.w	#$F64,d7				; size of compressed data; patched if necessary by SndDriverCompress.exe
		moveq	#0,d6					; make the decompressor fetch the first byte of descriptor bits
		lea	(z80_ram).l,a5
		moveq	#0,d5					; d5 = offset of end of decompressed data
		lea	(z80_ram).l,a4

; ---------------------------------------------------------------------------
; Saxman Decompression algorithm 
; Requires size of data as input in d7

; input:
;	d7.w = size of compressed data
; 	a4 = destination address (used for dictionary matches)
;	a5 = destination address
;	a6 = source address
	
;	uses d0,w, d3.w, d4.w, d5.w, d6.w, d7.w, a5, a6

; See http://www.segaretro.org/Saxman_compression for format description
; ---------------------------------------------------------------------------

SaxDec:
		lsr.w	#1,d6					; shift to next descriptor bit (if we've run out, bit 8 will be zero)
		btst	#8,d6					; have we run out of bits?
		bne.s	.bitsremaining			; branch if not
		jsr	SaxDec_GetByte(pc)			; get next byte of descriptor bits
		move.b	d0,d6
		ori.w	#$FF00,d6				; set all bits of high word; when these are fully shifted to low word, it's time to get another byte of descriptor bits

	.bitsremaining:				
		btst	#0,d6					; is the next byte compressed?
		beq.s	SaxDec_ReadCompressed	; branch if so

	;read_uncompressed:		
		jsr	SaxDec_GetByte(pc)			; get uncompressed byte
		move.b	d0,(a5)+				; write to destination
		addq.w	#1,d5					; increment pointer to end of decompressed data
		bra.w	SaxDec
; ===========================================================================

SaxDec_ReadCompressed:				
		jsr	SaxDec_GetByte(pc)			; get low byte of target address of match
		moveq	#0,d4
		move.b	d0,d4
		jsr	SaxDec_GetByte(pc)			; get high byte of target address and length of match
		move.b	d0,d3
		andi.w	#$F,d3
		addq.w	#2,d3					; d3 = length of the match minus 1
		andi.w	#$F0,d0
		lsl.w	#4,d0					
		add.w	d0,d4					; combine high and low nybbles of target address
		addi.w	#$12,d4
		andi.w	#$FFF,d4				; d4 = offset into the current $1000 byte window of decompressed data
		move.w	d5,d0					; get current offset of end of decompressed data
		andi.w	#$F000,d0
		add.w	d0,d4					; add offset in d4
		cmp.w	d4,d5					; is result greater than offset in d5?
		bcc.s	SaxDec_IsMatch			; if not, d4 is index to the match
		subi.w	#$1000,d4				; else, subtract 1000
		bcc.s	SaxDec_IsMatch			; if result is negative, this is a zero-fill match; else d4 is index to match
		
;is_zeros:		
		add.w	d3,d5				; add length of zero-fill match to offset pointer (d3 + 1)
		addq.w	#1,d5

	.loop:				
		move.b	#0,(a5)+			; fill zeros for length of match
		dbf	d3,.loop

		bra.w	SaxDec
		
; ===========================================================================
SaxDec_IsMatch:
		add.w	d3,d5				; add length of match to offset pointer (d3 + 1)
		addq.w	#1,d5

	.loop:				
		move.b	(a4,d4.w),(a5)+		; copy matched byte
		addq.w	#1,d4				; increment index
		dbf	d3,.loop				; repeat for length of match
		
		bra.w	SaxDec

; ===========================================================================
SaxDec_GetByte:						
		move.b	(a6)+,d0			; get next byte in compressed data
		subq.w	#1,d7				; decrement remaining number of bytes
		bne.s	.exit				; branch if bytes remain
		addq.w	#4,sp				; if here, we are done; exit the decompressor

	.exit:				
		rts	

; ===========================================================================

SoundDriver:	
		pushs						; save current section info	

Z80_Code:	section	org(0),file("sound/Sound Driver.unc"),over(Main) ; new section for the sound driver
		cpu Z80

		include "sound/Sound Driver.asm"		; include the actual Z80 sound driver code
		
		cpu 68000
		pops						; return to main section...
		pushs						; ...and save section info again	
		
MergeCode: section org(0), file("sound/MergeData.dat"),over(Main) ; make data file for S2 Sound Driver Compress
		dc.l offset(SoundDriver),Z80_Space,offset(movewZ80CompSize)+2 ; start location of compressed sound driver; space reserved for sound driver; location to patch in the Saxman decompressor
		pops						; return to main section for good
		ds.b Z80_Space					; reserve space for the compressed sound driver
		even

; ===========================================================================
; ---------------------------------------------------------------------------
; DAC samples
; ---------------------------------------------------------------------------

		align_to_end	sizeof_DAC_samples		; replaces cnop -$2F00,$8000

; Macro to include DAC samples, and generate bank pointer constants
; for them.
incdac:	macro lbl 
		filename: equs file_\lbl			; get file name
		zbankptr_\lbl:	equ	z_rom_window+(offset(*)&7FFFh) ; make pointer constant
	\lbl:	incbin	"\filename"				; write file to ROM
	
		endm
		
DAC_Start: bnkswtch_vals
		incdac	DAC_Kick
		incdac	DAC_Snare
		incdac	DAC_Timpani
		incdac	DAC_Tom
		incdac	DAC_Clap
		incdac	DAC_RecordScratch
		incdac	DAC_VLowClap

; ------------------------------------------------------------------------------
; One music track
; ------------------------------------------------------------------------------

MusicPoint1:		startbank
		sndbank_ptr	MusFile_Continue		; this value is corrected later with a hack
					
MusFile_Continue:		incbin	"sound/music/compressed/Continue.sax"
		finishbank
		align $20
				
;---------------------------------------------------------------------------------------
; Graphics - more level objects (making use of the rest of an otherwise empty bank)
;---------------------------------------------------------------------------------------		
		
		incfile	Nem_Fireball1
		incfile	Nem_Waterfall
		incfile	Nem_HTZFireball2
		incfile	Nem_EHZBridge
		incfile	Nem_HTZZipline
		incfile	Nem_HTZOneWayBarrier			;ArtNem_HtzValveBarrier
		incfile	Nem_SeeSaw
		incfile	Nem_UnusedFireball
		incfile	Nem_HTZRock
		incfile	Nem_Sol					; ArtNem_HtzSol:
		incfile	Nem_Wheel
		incfile	Nem_WheelIndent
		incfile	Nem_SpikeBlock
		incfile	Nem_SteamSpring
		incfile	Nem_MTZSpike
		incfile	Nem_MTZAsstBlocks
		incfile	Nem_LavaBubble
		incfile	Nem_LavaCup
		incfile	Nem_BoltEnd_Rope
		incfile	Nem_Cog
		incfile	Nem_SpinTubeFlash
		incfile	Nem_Crate
		incfile	Nem_MCZCollapsingPlat			; ArtNem_F1ABA:
		incfile	Nem_VineSwitch				; ArtNem_F1C64:
		incfile	Nem_VinePulley				; ArtNem_F1D5C:
		incfile	Nem_DrawbridgeLogs

; -------------------------------------------------------------------------------
; Sega Sound
; 8-bit	unsigned PCM at 16Khz
; -------------------------------------------------------------------------------
		align_to_end	sizeof_SegaPCM			; replaces cnop -$6714,$8000
SegaPCM:	bnkswtch_vals	
		incbin	"sound/PCM/SEGA.pcm"

; ------------------------------------------------------------------------------
; Music	
; ------------------------------------------------------------------------------		
		
MusicPoint2:		startbank
		sndbank_ptr	MusFile_CNZ_2P
		sndbank_ptr	MusFile_EHZ
		sndbank_ptr	MusFile_MTZ
		sndbank_ptr	MusFile_CNZ
		sndbank_ptr	MusFile_MCZ
		sndbank_ptr	MusFile_MCZ_2P
		sndbank_ptr	MusFile_ARZ
		sndbank_ptr	MusFile_DEZ
		sndbank_ptr	MusFile_SpecialStage
		sndbank_ptr	MusFile_Options
		sndbank_ptr	MusFile_Ending
		sndbank_ptr	MusFile_FinalBoss
		sndbank_ptr	MusFile_CPZ
		sndbank_ptr	MusFile_Boss
		sndbank_ptr	MusFile_SCZ
		sndbank_ptr	MusFile_OOZ
		sndbank_ptr	MusFile_WFZ
		sndbank_ptr	MusFile_EHZ_2P
		sndbank_ptr	MusFile_2PResults
		sndbank_ptr	MusFile_SuperSonic
		sndbank_ptr	MusFile_HTZ
		sndbank_ptr	MusFile_ExtraLife
		sndbank_ptr	MusFile_Title
		sndbank_ptr	MusFile_EndLevel
		sndbank_ptr	MusFile_GameOver
		sndbank_ptr	MusFile_Invincible
		sndbank_ptr	MusFile_Emerald
		sndbank_ptr	MusFile_HPZ
		sndbank_ptr	MusFile_Drowning
		sndbank_ptr	MusFile_Credits

MusFile_HPZ:			incbin	"sound/music/compressed/HPZ.sax"
MusFile_Drowning:		incbin	"sound/music/compressed/Drowning.sax"
MusFile_Invincible:		incbin	"sound/music/compressed/Invincible.sax"
MusFile_CNZ_2P:			incbin	"sound/music/compressed/CNZ2P.sax"
MusFile_EHZ:			incbin	"sound/music/compressed/EHZ.sax"
MusFile_MTZ:			incbin	"sound/music/compressed/MTZ.sax"
MusFile_CNZ:			incbin	"sound/music/compressed/CNZ.sax"
MusFile_MCZ:			incbin	"sound/music/compressed/MCZ.sax"
MusFile_MCZ_2P:			incbin	"sound/music/compressed/MCZ2P.sax"
MusFile_ARZ:			incbin	"sound/music/compressed/ARZ.sax"
MusFile_DEZ:			incbin	"sound/music/compressed/DEZ.sax"
MusFile_SpecialStage:	incbin	"sound/music/compressed/SpecialStage.sax"
MusFile_Options:		incbin	"sound/music/compressed/Options.sax"
MusFile_Ending:			incbin	"sound/music/compressed/Ending.sax"
MusFile_FinalBoss:		incbin	"sound/music/compressed/FinalBoss.sax"
MusFile_CPZ:			incbin	"sound/music/compressed/CPZ.sax"
MusFile_Boss:			incbin	"sound/music/compressed/Boss.sax"
MusFile_SCZ:			incbin	"sound/music/compressed/SCZ.sax"
MusFile_OOZ:			incbin	"sound/music/compressed/OOZ.sax"
MusFile_WFZ:			incbin	"sound/music/compressed/WFZ.sax"
MusFile_EHZ_2P:			incbin	"sound/music/compressed/EHZ2P.sax"
MusFile_2PResults:		incbin	"sound/music/compressed/2PResult.sax"
MusFile_SuperSonic:		incbin	"sound/music/compressed/SuperSonic.sax"
MusFile_HTZ:			incbin	"sound/music/compressed/HTZ.sax"
MusFile_Title:			incbin	"sound/music/compressed/TitleScreen.sax"
MusFile_EndLevel:		incbin	"sound/music/compressed/EndLevel.sax"

MusFile_ExtraLife:		include	"sound/music/ExtraLife.asm"
MusFile_GameOver:		include	"sound/music/GameOver.asm"
MusFile_Emerald:		include	"sound/music/GotEmerald.asm"
MusFile_Credits:		include	"sound/music/Credits.asm"


; ------------------------------------------------------------------------------------------
; Sound	effects
; ------------------------------------------------------------------------------------------

SFXPointers:	macro	name
		sndbank_ptr	SFXFile_\name
		endm
		
SoundIndex:		bnkswtch_vals
		SFXFiles	SFXPointers			; generate little endian pointers and  constants for SFX

IncludeSFX:	macro	name
SFXFile_\name:	include	"sound/sfx/\name\.asm"
		endm

		SFXFiles	IncludeSFX			; generate includes for the SFX files

		finishbank
		align $FFFFF
		
ROM_End:
		end
