;  =========================================================================
; |           Sonic the Hedgehog 2 Disassembly for Sega Mega Drive          |
;  =========================================================================

; originally created by Nemesis in 2004
; sound driver disassembly by Xenowhirl in 2007

; ported to AXM68K/Z80 Macros by Orion Navattan, including documentation
; from Sonic Retro AS and Sonic 1 Hivebrain 2022
		
;  =========================================================================

		opt	l.					; . is the local label symbol
		opt	ae-					; automatic evens disabled by default
		opt oz+					; enable zero-displacement optimization	by default (but see the ZeroOffsetOptimization conditional below)	
		opt	an+					; allow use of -h for hexadecimal (used in Z80 code)
		opt	ws+					; allow statements to contain white-spaces
		opt	w+					; print warnings
;		opt	m+					; do not expand macros - if enabled, this can break assembling

; Main section for all 68k code + startup dummy z80 program;
; sound driver and S2 Driver Compress data are seperate sections.

Main:	group word,org(0) ; we have to use the long form of group declaration to avoid triggering an overlay warning during assembly
		section MainProgram,Main
		

	if ~def(Revision) 
Revision equ 1
; if 0, builds a REV00 ROM
; if 1, builds a REV01 ROM, which contains some fixes
; if 2, builds a hypothetical standalone REV02 ROM (based on the changes found in all 
; known appearances, without any of the implementation-specific bugs) which contains even more fixes
	endc
	
FixBugs equ 0 
; If 1, enables a number of engine and gameplay bug-fixes, including some in the sound driver.

OptimizeSoundDriver equ 0	
; If 1, enables a number of optimizations in the sound driver.

AllOptimizations equ 0 
; If 1, enables all REV02 assembler optimizations as well as optimized leas from REV00 & REV01
; and the zero-displacement optimization.

ZeroOffsetOptimization equ 1|AllOptimizations
; If 1, enables the zero-displacement optimization for 156 instances of address register 
; indirect displacement instructions that were unoptimized in the original game.
; See the macro definitions file for a full explanation.

RemoveJmpTos equ (0|Revision=2|AllOptimizations) 
; If 1, many unnecessary JmpTos are removed, improving performance. See the jsrto amd jmpto macro definitions for more information.

AddSubOptimize equ (0|Revision=2|AllOptimizations)
; If 1, many add/sub instructions are optimized to addq/subq.

RelativeLea equ (0|Revision<>2|AllOptimizations)
; If 1, makes some lea instructions use pc-relative addressing, instead of absolute long.

;SkipChecksumCheck equ 0
; If 1, disables the slow bootup checksum calculation

;UseFullWaterTables equ 0
; If 1, zone offset tables for water levels cover all level slots instead of only slots 8-$F
; If you've shifted level IDs around or you want water in levels with a level slot below 8	
		

		include "Macros - More CPUs.asm"
		cpu 68000

		include "Mega Drive.asm"
		include "Macros.asm"
		include "SpritePiece.asm"
		include "Constants.asm"
		include "RAM Addresses.asm"
		
		include "sound/Sound Equates.asm" 	; variables and constants for the sound driver
		include "sound/Frequency, Note, Envelope, & Sample Definitions.asm" ; definitions used in both the sound driver and SMPS2ASM
		include "sound/Sound Language.asm" ; SMPS2ASM macros and conversion functionality
		
		include "Compatibility.asm"
		include "File List.asm"


ROM_Start:
   if offset(*) <> 0
		inform 3,"ROM_Start is at $%h, but it should be 0. Make sure you haven't accidentally defined code in the equates and macro files.",offset(ROM_Start) 
   endc
Vectors:						
		dc.l v_stack_pointer	; Initial stack pointer value
		dc.l EntryPoint		; Start of program
		dc.l ErrorTrap		; Bus error
		dc.l ErrorTrap		; Address error (4)
		dc.l ErrorTrap		; Illegal instruction
		dc.l ErrorTrap		; Division by zero
		dc.l ErrorTrap		; CHK exception
		dc.l ErrorTrap		; TRAPV exception (8)
		dc.l ErrorTrap		; Privilege violation
		dc.l ErrorTrap		; TRACE exception
		dc.l ErrorTrap		; Line-A emulator
		dc.l ErrorTrap		; Line-F emulator (12)
		dcb.l 2,ErrorTrap   ; Unused (reserved)
		dc.l ErrorTrap		; Format error
		dc.l ErrorTrap		; Uninitialized interrupt
		dcb.l 8,ErrorTrap	; Unused (reserved)
		dc.l ErrorTrap		; Spurious exception
		dc.l ErrorTrap		; IRQ level 1
		dc.l ErrorTrap		; IRQ level 2
		dc.l ErrorTrap		; IRQ level 3 (28)
		dc.l HBlank		; IRQ level 4 (horizontal retrace interrupt)
		dc.l ErrorTrap		; IRQ level 5
		dc.l VBlank		; IRQ level 6 (vertical retrace interrupt)
		dc.l ErrorTrap		; IRQ level 7 (32)
		dcb.l 16,ErrorTrap				; TRAP #00..#15 exceptions
		dcb.l 16,ErrorTrap				; Unused (reserved)
	
Header:		
		dc.b 'SEGA GENESIS    ' ; Console name
		dc.b '(C)SEGA 1992.SEP' ; Copyright/Date
		dc.b 'SONIC THE             HEDGEHOG 2                ' ; Domestic name
		dc.b 'SONIC THE             HEDGEHOG 2                ' ; International name
    if Revision=0
		dc.b "GM 00001051-00"   ; Version (REV00)
    elseif Revision=1
		dc.b "GM 00001051-01"   ; Version (REV01)
    elseif Revision=2
		dc.b "GM 00001051-02"   ; Version (REV02)
    endc
Checksum:	dc.w $D951			; Checksum
		dc.b 'J               ' ; I/O Support
ROMStartLoc:	dc.l Rom_Start			; ROM Start
ROMEndLoc:	dc.l Rom_End-1			; ROM End
RAMStartLoc:	dc.l $FF0000		; RAM Start
RAMEndLoc:	dc.l $FFFFFF		; RAM End
		dc.b '                                                          ' ; Notes
		dc.b '      '
		dc.b 'JUE             ' ; Country
EndOfHeader:		
; ===========================================================================

ErrorTrap:									
		nop	
		nop	
		bra.s	ErrorTrap ; any exceptions are dumped in this infinite loop
; ===========================================================================

EntryPoint:
		tst.l	(port_1_control_hi).l 		; test port 1 & 2 control registers
		bne.s	.skip						; branch if not 0
		tst.w	(port_e_control_hi).l		; test ext port control register

	.skip:				
		bne.s	SkipSetup				; branch if not 0
		; If both of the above tests return 0, then this is a cold boot or we were handed off 
		; from the TMSS ROM. We need to handle the TMSS if necessary, and initialize the VDP
		lea	SetupValues(pc),a5 			; load setup values array address
		movem.w	(a5)+,d5-d7				; d5 = VDP reg baseline; d6 = RAM size; d7 = VDP reg diff
		movem.l	(a5)+,a0-a4				; a0 = z80_ram ; a1 = z80_bus_request; a2 = z80_reset; a3 = vdp_data_port; a4 = vdp_control_port
		move.b	-$10FF(a1),d0			; get hardware version (from $A10001)
		andi.b	#$F,d0
		beq.s	.no_tmss				; if Model 1 VA5 or older (no TMSS), branch
		move.l	#'SEGA',$2F00(a1)		; if Model 1 VA6 or later, satisfy the TMSS
		
	; Initialize the VDP and clear the RAM, VRAM, VSRAM, and CRAM.	

.no_tmss:				
		move.w	(a4),d0					; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
		moveq	#0,d0					; clear d0
		movea.l	d0,a6					; clear a6
		move.l	a6,usp					; set usp to $0
		
		moveq	#$17,d1					; number of times to loop
.loop_vdp:				
		move.b	(a5)+,d5				; add $8000 to value
		move.w	d5,(a4)					; move value to VDP register
		add.w	d7,d5					; next register
		dbf	d1,.loop_vdp				; repeat until all registers have been written
		
		move.l	(a5)+,(a4)
		move.w	d0,(a3)					; clear the VRAM
		move.w	d7,(a1)					; stop the Z80
		move.w	d7,(a2)					; reset the Z80

.waitz80:				
		btst	d0,(a1)					; has the Z80 stopped?
		bne.s	.waitz80				; if not, branch
		moveq	#$25,d2				; load the number of bytes in Z80_Startup program into d2

.loadz80:				
		move.b	(a5)+,(a0)+				; load the Z80_Startup program byte by byte to Z80 RAM
		dbf	d2,.loadz80					
		
		move.w	d0,(a2)
		move.w	d0,(a1)					; start the z80
		move.w	d7,(a2)					; reset the z80

.loop_ram:				
		move.l	d0,-(a6)				; clear 4 bytes of RAM and deincrement
		dbf	d6,.loop_ram				; repeat until entire RAM is clear
		move.l	(a5)+,(a4)				; set VDP display mode and increment mode
		move.l	(a5)+,(a4)				; set VDP to CRAM write
		
		moveq	#$1F,d3					; set repeat times
.loop_cram:				
		move.l	d0,(a3)					; clear 2 palette entries
		dbf	d3,.loop_cram					; repeat until entire CRAM is clear
		move.l	(a5)+,(a4)				; set VDP to VSRAM write
		
		moveq	#(sizeof_vsram/4)-1,d4					
.loop_vsram:				
		move.l	d0,(a3)					; clear 4 bytes of VSRAM
		dbf	d4,.loop_vsram					; repeat until entire VSRAM is clear
		
		moveq	#3,d5
.loop_psg:				
		move.b	(a5)+,$11(a3)			; reset PSG0
		dbf	d5,.loop_psg					; repeat for all other channels
		
		move.w	d0,(a2)
		movem.l	(a6),d0-a6				; clear all registers
		disable_ints					; disable interrupts

SkipSetup:				
		bra.s	GameProgram					; begin game
; ===========================================================================
SetupValues:	
		dc.w $8000					; VDP register start number
		dc.w (sizeof_ram/4)-1				; size of RAM/4
		dc.w $100					; VDP register diff

		dc.l z80_ram					; start	of Z80 RAM
		dc.l z80_bus_request				; Z80 bus request
		dc.l z80_reset					; Z80 reset
		dc.l vdp_data_port				; VDP data
		dc.l vdp_control_port				; VDP control

; The following values are overwritten by VDPSetupGame (and later by game modes), so end up basically unused.
SetupVDP:	
		dc.b 4						; VDP $80 - normal colour mode
		dc.b $14					; VDP $81 - Mega Drive mode, DMA enable
		dc.b ($C000>>10)				; VDP $82 - foreground nametable address
		dc.b ($F000>>10)				; VDP $83 - window nametable address
		dc.b ($E000>>13)				; VDP $84 - background nametable address
		dc.b ($D800>>9)					; VDP $85 - sprite table address
		dc.b 0						; VDP $86 - unused
		dc.b 0						; VDP $87 - background colour
		dc.b 0						; VDP $88 - unused
		dc.b 0						; VDP $89 - unused
		dc.b 255					; VDP $8A - HBlank register
		dc.b 0						; VDP $8B - full screen scroll
		dc.b $81					; VDP $8C - 40 cell display
		dc.b ($DC00>>10)				; VDP $8D - hscroll table address
		dc.b 0						; VDP $8E - unused
		dc.b 1						; VDP $8F - VDP increment
		dc.b 1						; VDP $90 - 64x32 cell plane size
		dc.b 0						; VDP $91 - window h position
		dc.b 0						; VDP $92 - window v position
		dc.b $FF					; VDP $93/94 - DMA length
		dc.b $FF		
		dc.b 0						; VDP $95/96 - DMA source
		dc.b 0
		dc.b $80					; VDP $97 - DMA fill VRAM
SetupVDP_end:
		dc.l $40000080					; VRAM DMA write address 0

Z80_Startup:
		cpu	z80
		obj 0

	; fill the Z80 RAM with 00's (with the exception of this program)
		xor	a					; clear a
		ld	bc,2000h-(.end+1)			; load the number of bytes to fill
		ld	de,.end+1				; load the destination address of the RAM fill (1 byte after end of program)
		ld	hl,.end					; load the source address of the RAM fill (a single 00 byte)
		ld	sp,hl					; set stack pointer to end of program(?)
		ld	(hl),a					; clear the first byte after the program code
		ldir						; fill the rest of the Z80 RAM with 00's

	; clear all registers
		pop	ix
		pop	iy
		ld	i,a
		ld	r,a
		pop	de
		pop	hl
		pop	af

		ex	af,af					; swap af with af'
		exx						; swap bc, de, and hl
		pop	bc
		pop	de
		pop	hl
		pop	af
		ld	sp,hl					; clear stack pointer

	; put z80 into an infinite loop
		di						; disable interrupts
		im	1					; set interrupt mode to 1 (the only officially supported interrupt mode on the MD)
		ld	(hl),0E9h				; set the first byte into a jp	(hl) instruction
		jp	(hl)					; jump to the first byte, causing an infinite loop to occur.

	.end:							; the space from here til end of Z80 RAM will be filled with 00's
		even						; align the Z80 start up code to the next even byte. Values below require alignment

Z80_Startup_size:
		cpu	68000
		objend

		dc.w $8104					; VDP display mode
		dc.w $8F02					; VDP increment
		dc.l $C0000000					; CRAM write address 0
		dc.l $40000010					; VSRAM write address 0

		dc.b $9F, $BF, $DF, $FF				; values for PSG channel volumes
; ===========================================================================

GameProgram:				
		tst.w	(vdp_control_port).l

CheckSumCheck:				
		move.w	(vdp_control_port).l,d1
	if Revision>0
		btst	#1,d1
		bne.s	CheckSumCheck		; wait until DMA is completed
	endc
		btst	#6,(port_e_control).l
		beq.s	ChecksumTest
		cmpi.l	#'init',(v_checksum_pass).w  ; has checksum routine already run?
		beq.w	GameInit				   ; if it has, branch

ChecksumTest:				
		movea.l	#EndOfHeader,a0	; start checking bytes after the header ($200)
		movea.l	#ROMEndLoc,a1		; stop at end of ROM
		move.l	(a1),d0
		moveq	#0,d1

	.loop:				
		add.w	(a0)+,d1		; add bytes at current address to d1
		cmp.l	a0,d0			; have we reached tne end?
		bcc.s	.loop			; if not, branch
		movea.l	#Checksum,a1	; read the checksum
		cmp.w	(a1),d1			; compare checksum in header to rom
		bne.w	ChecksumError			; if they don't match, branch

	;.checksumok:	
		lea	(v_keep_after_reset).w,a6
		moveq	#0,d7
		move.w	#(($FFFFFFFF-v_keep_after_reset+1)/4)-1,d6

	.clearramloop:				
		move.l	d7,(a6)+		; clear RAM ($FE00-$FFFF) only on a cold bot
		dbf	d6,.clearramloop

		move.b	(console_version).l,d0	; get console region
		andi.b	#$C0,d0
		move.b	d0,(v_console_region).w		; set region variable in RAM
		move.l	#'init',(v_checksum_pass).w	; set flag so checksum won't run again

GameInit:				
		lea	(RAM_Start&$FFFFFF).l,a6
		moveq	#0,d7
		move.w	#$3F7F,d6

	.clearRAM:				
		move.l	d7,(a6)+			; clear RAM ($0000-$FDFF)
		dbf	d6,.clearRAM
		bsr.w	VDPSetupGame
		bsr.w	JmpTo_SoundDriverLoad
		bsr.w	JoypadInit
		move.b	#id_Sega,(v_gamemode).w		; set initial game mode (Sega screen)

MainGameLoop:				
		move.b	(v_gamemode).w,d0		; load game mode
		andi.w	#$3C,d0					; limit to $1C max
		jsr	GameModeArray(pc,d0.w)		; jump to apt location in ROM
		bra.s	MainGameLoop			; infinite loop
; ===========================================================================
gmptr:		macro
		id_\1:	equ offset(*)-GameModeArray
		if narg=1
		bra.w	GM_\1
		else
		bra.w	GM_\2
		endc
		endm

GameModeArray:

		gmptr	Sega			; 0
		gmptr	Title			; 4
		gmptr	Demo, Level		; 8
		gmptr	Level			; $C
		gmptr	SpecialStage	; $10
		gmptr	Continue			; $14
		gmptr	TwoPlayerResults	; $18
		gmptr	LevelSelectMenu2P	; $1C
		gmptr	JmpTo_EndingSequence	; $20
		gmptr	OptionsMenu			; $24
		gmptr	LevelSelectMenu		; $28


ChecksumError:
		move.l	d1,-(sp)     ; back up incorrect checksum to stack
		bsr.w	VDPSetupGame
		move.l	(sp)+,d1 	; restore incorrect checksum from stack (possibly used when determining what it should be)
		;move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
		vdp_comm.l move,$0000,cram,write,,(vdp_control_port).l
		moveq	#(sizeof_pal_all/2)-1,d7

	.fillred:
		move.w	#cRed,(vdp_data_port).l ; fill palette with red
		dbf	d7,.fillred					; repeat $3F more time

	.endlessloop:				
		bra.s	.endlessloop
; ===========================================================================

GM_LevelSelectMenu2P:				
		jmp	(MenuScreen).l

GM_JmpTo_EndingSequence:				
		jmp	(EndingSequence).l

GM_OptionsMenu:				
		jmp	(MenuScreen).l

GM_LevelSelectMenu:				
		jmp	(MenuScreen).l
		
; ===========================================================================

VBlank:
		pushr	d0-a6				; save all registers to stack
		tst.b	(v_vblank_routine).w		; is routine number 0?
		beq.w	VBlank_Lag				; if yes, branch

	.waitvblank:
		move.w	(vdp_control_port).l,d0 ; get status register
		andi.w	#8,d0					; is VBlank register set?
		beq.s	.waitvblank				; if not, branch
		move.l	#$40000010,(vdp_control_port).l  ; set VDP to VSRAM write, destination address 0
		move.l	(v_fg_y_pos_vsram).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
		btst	#6,(v_console_region).w		; is Mega Drive PAL?
		beq.s	.notPAL
		move.w	#$700,d0

	.waitPAL:
		dbf	d0,.waitPAL	; wait here in a loop doing nothing for a while...

	.notPAL:
		move.b	(v_vblank_routine).w,d0	; get routine number
		move.b	#0,(v_vblank_routine).w ; reset to 0
		move.w	#1,(f_hblank).w		; set flag to let HBlank know a frame has finished
		andi.w	#$3E,d0
		move.w	VBlank_Index(pc,d0.w),d0
		jsr	VBlank_Index(pc,d0.w)

loc_45E:				
					
		addq.l	#1,(v_vblank_counter).w
		movem.l	(sp)+,d0-a6
		rte	
; ===========================================================================
VBlank_Index:	index offset(*),,2

		ptr	 VBlank_Lag				; 0
		ptr  VBlank_Sega			; 2
		ptr	 VBlank_Title			; 4
		ptr	 VBlank_Unused6			; 6
		ptr  VBlank_Level			; 8
		ptr  VBlank_SpecialStage	; $A
		ptr  VBlank_TitleCard		; $C
		ptr  VBlank_UnusedE			; $E
		ptr	 VBlank_Pause			; $10
		ptr  VBlank_Fade			; $12
		ptr  VBlank_PCM				; $14
		ptr  VBlank_Menu			; $16
		ptr  VBlank_Ending			; $18
		ptr  VBlank_CtrlDMA			; $1A
; ===========================================================================

VBlank_Lag:				
					
		cmpi.b	#-$78,(v_gamemode).w
		beq.s	loc_4C4
		cmpi.b	#-$74,(v_gamemode).w
		beq.s	loc_4C4
		cmpi.b	#8,(v_gamemode).w
		beq.s	loc_4C4
		cmpi.b	#$C,(v_gamemode).w
		beq.s	loc_4C4
		stopZ80
		waitz80
		bsr.w	sub_1084
		startZ80
		bra.s	loc_45E
; ===========================================================================

	loc_4C4:				
	
		tst.b	(f_water_flag).w
		beq.w	loc_566
		move.w	(vdp_control_port).l,d0
		btst	#6,(v_console_region).w
		beq.s	loc_4E2
		move.w	#$700,d0

	loc_4DE:				
		dbf	d0,loc_4DE

	loc_4E2:				
		move.w	#1,(f_hblank).w
		stopZ80
		waitz80
		tst.b	(f_water_pal_full).w
		bne.s	loc_526
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69026A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bra.s	loc_54A
; ===========================================================================

loc_526:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69076AC0,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)

loc_54A:				
		move.w	(v_vdp_hint_counter).w,(a5)
		move.w	#-$7DD0,(vdp_control_port).l
		bsr.w	sub_1084
		startZ80
		bra.w	loc_45E
; ===========================================================================

loc_566:				
		move.w	(vdp_control_port).l,d0
		move.l	#$40000010,(vdp_control_port).l
		move.l	(v_fg_y_pos_vsram).w,(vdp_data_port).l
		btst	#6,(v_console_region).w
		beq.s	loc_58E
		move.w	#$700,d0

loc_58A:				
		dbf	d0,loc_58A

loc_58E:				
		move.w	#1,(f_hblank).w
		move.w	(v_vdp_hint_counter).w,(vdp_control_port).l
		move.w	#-$7DD0,(vdp_control_port).l
		move.l	(v_fg_y_pos_vsram_p2).w,(v_hblank_fg_y_pos_vsram_p2).w
		stopZ80
		waitz80
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	sub_1084
		startZ80
		bra.w	loc_45E
; ===========================================================================

VBlank_Sega:				
		bsr.w	sub_E98
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	sub_10E6
		tst.w	(v_countdown).w
		beq.w	locret_628
		subq.w	#1,(v_countdown).w

locret_628:				
		rts	
; ===========================================================================

VBlank_PCM:				
		move.b	($FFFFFE0F).w,d0
		andi.w	#$F,d0
		bne.s	loc_652
		move.w	#$100,(z80_bus_request).l

loc_63C:				
		btst	#0,(z80_bus_request).l
		bne.s	loc_63C
		bsr.w	ReadJoypads
		startZ80

loc_652:				
		tst.w	(v_countdown).w
		beq.w	locret_65E
		subq.w	#1,(v_countdown).w

locret_65E:				
		rts	
; ===========================================================================

VBlank_Title:				
		bsr.w	sub_E98

loc_664:
		bsr.w	ProcessPLC
		tst.w	(v_countdown).w
		beq.w	locret_674
		subq.w	#1,(v_countdown).w

locret_674:				
		rts	
; ===========================================================================

VBlank_Unused6:				
		bsr.w	sub_E98
		rts	
; ===========================================================================

VBlank_Pause:				
		cmpi.b	#$10,(v_gamemode).w
		beq.w	loc_802

VBlank_Level:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		tst.b	(v_teleport_timer).w
		beq.s	loc_6F8
		lea	(vdp_control_port).l,a5
		tst.w	(f_pause).w
		bne.w	loc_748
		subq.b	#1,(v_teleport_timer).w
		bne.s	loc_6BC
		move.b	#0,(f_teleport_flag).w

loc_6BC:				
		cmpi.b	#$10,(v_teleport_timer).w
		bcs.s	loc_6F8
		lea	(vdp_data_port).l,a6
		move.l	#-$40000000,(vdp_control_port).l
		move.w	#$EEE,d0
		move.w	#$1F,d1

loc_6DC:				
		move.w	d0,(a6)
		dbf	d1,loc_6DC
		move.l	#-$3FBE0000,(vdp_control_port).l
		move.w	#$1F,d1

loc_6F0:				
		move.w	d0,(a6)
		dbf	d1,loc_6F0
		bra.s	loc_748
; ===========================================================================

loc_6F8:				
					
		tst.b	(f_water_pal_full).w
		bne.s	loc_724
		lea	(vdp_control_port).l,a5

loc_704:
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69026A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bra.s	loc_748
; ===========================================================================

loc_724:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69076AC0,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)

loc_748:				
					
		move.w	(v_vdp_hint_counter).w,(a5)
		move.w	#-$7DD0,(vdp_control_port).l
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	ProcessDMAQueue
		bsr.w	sub_1084
		startZ80
		movem.l	(v_camera_x_pos).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_copy).w
		movem.l	(v_camera_x_pos_p2).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_p2_copy).w

loc_7C4:
		movem.l	(v_fg_redraw_direction).w,d0-d3
		movem.l	d0-d3,(v_fg_redraw_direction_copy).w
		move.l	(v_fg_y_pos_vsram_p2).w,(v_hblank_fg_y_pos_vsram_p2).w
		cmpi.b	#$5C,($FFFFF625).w ; '\'
		bcc.s	sub_7E6
		move.b	#1,(f_hblank_run_snd).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_7E6:				
					
		bsr.w	sub_10E0
		jsr	sub_40D8A
		bsr.w	ProcessPLC2
		tst.w	(v_countdown).w
		beq.w	locret_800
		subq.w	#1,(v_countdown).w

locret_800:				
		rts	
; End of function sub_7E6

; ===========================================================================
loc_802:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		jsr	(sub_1084).l
		tst.b	(v_ss_last_alt_hscroll_buffer).w
		beq.s	loc_84A
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$69146A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bra.s	loc_86E
; ===========================================================================

loc_84A:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)

loc_86E:				
		startZ80
		rts	
; ===========================================================================

VBlank_SpecialStage:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		bsr.w	sub_AE8
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69026A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5

loc_8BC:
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		tst.b	(v_ss_alt_hscroll_buffer).w
		beq.s	loc_906
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$69146A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bra.s	loc_92A
; ===========================================================================

loc_906:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)

loc_92A:				
		tst.b	(v_ss_track_orientation).w
		beq.s	loc_950
		moveq	#0,d0
		move.b	(v_ss_track_drawing_index).w,d0
		cmpi.b	#4,d0
		bge.s	loc_950
		add.b	d0,d0
		tst.b	(v_ss_alternate_pnt).w
		beq.s	loc_948
		addi.w	#8,d0

loc_948:				
		move.w	SS_Foreground_Transfer_Table(pc,d0.w),d0
		jsr	SS_Foreground_Transfer_Table(pc,d0.w)

loc_950:				
					
		bsr.w	sub_B02
		addi.b	#1,(v_ss_track_drawing_index).w
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	d1,d0
		blt.s	loc_994
		move.b	#0,(v_ss_track_drawing_index).w
		lea	(vdp_control_port).l,a6
		tst.b	(v_ss_alternate_pnt).w
		beq.s	loc_98A
		move.w	#-$7DD0,(a6)
		bra.s	loc_98E
; ===========================================================================
SS_Foreground_Transfer_Table: ; SS_PNTA_Transfer_Table: off_97A
		index offset(*)

		ptr loc_A50	; 0 			
		ptr loc_A76	; 1
		ptr loc_A9C	; 2
		ptr loc_AC2	; 3
		ptr loc_9B8	; 4
		ptr loc_9DE	; 5
		ptr loc_A04	; 6
		ptr loc_A2A	; 7
; ===========================================================================

loc_98A:				
		move.w	#-$7DE0,(a6)

loc_98E:				
		eori.b	#1,(v_ss_alternate_pnt).w

loc_994:				
		bsr.w	ProcessDMAQueue
		jsr	(sub_1084).l
		startZ80
		bsr.w	ProcessPLC2
		tst.w	(v_countdown).w
		beq.w	locret_9B6
		subq.w	#1,(v_countdown).w

locret_9B6:				
		rts	
; ===========================================================================

loc_9B8:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$4000,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_9DE:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$4700,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_A04:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$4E00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_A2A:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$5500,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_A50:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$4000,(a5)
		move.w	#$82,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_A76:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$4700,(a5)
		move.w	#$82,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_A9C:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$4E00,(a5)
		move.w	#$82,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	
; ===========================================================================

loc_AC2:				
		lea	(vdp_control_port).l,a5

loc_AC8:
		move.l	#-$6BFC6C80,(a5)
		move.l	#-$69176B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$5500,(a5)
		move.w	#$82,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_AE8:				
		move.w	(vdp_control_port).l,d0
		move.l	#$40000010,(vdp_control_port).l
		move.l	(v_fg_y_pos_vsram).w,(vdp_data_port).l
		rts	
; End of function sub_AE8


; =============== S U B	R O U T	I N E =======================================


sub_B02:				
		move.w	(v_ss_cur_speed_factor).w,d0
		cmp.w	(v_ss_new_speed_factor).w,d0
		beq.s	loc_B18
		move.l	(v_ss_new_speed_factor).w,(v_ss_cur_speed_factor).w
		move.b	#0,(v_ss_track_duration_timer).w

loc_B18:				
		subi.b	#1,(v_ss_track_duration_timer).w
		bgt.s	loc_B3E
		lea	(byte_B46).l,a0
		move.w	(v_ss_cur_speed_factor).w,d0
		lsr.w	#1,d0
		move.b	(a0,d0.w),d1
		move.b	d1,(v_ss_player_anim_frame_timer).w
		move.b	d1,(v_ss_track_duration_timer).w
		subq.b	#1,(v_ss_player_anim_frame_timer).w
		rts	
; ===========================================================================

loc_B3E:				
		move.b	(v_ss_player_anim_frame_timer).w,d1
		addq.b	#1,d1
		rts	
; End of function sub_B02

; ===========================================================================
byte_B46:	
		dc.b $3C		; 0 
		dc.b $1E		; 1
		dc.b  $F		; 2
		dc.b  $A		; 3
		dc.b   8		; 4
		dc.b   6		; 5
		dc.b   5		; 6
		dc.b   0		; 7
; ===========================================================================

VBlank_CtrlDMA:				
		stopZ80
		waitz80
		jsr	(ProcessDMAQueue).l ; can be reduced to a bsr,w
		startZ80
		rts	
; ===========================================================================

VBlank_TitleCard:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		tst.b	(f_water_pal_full).w
		bne.s	loc_BB2
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69026A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bra.s	loc_BD6
; ===========================================================================

loc_BB2:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69076AC0,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)

loc_BD6:				
		move.w	(v_vdp_hint_counter).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5

loc_C04:
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	ProcessDMAQueue
		jsr	loc_15584
		jsr	(sub_1084).l
		startZ80
		movem.l	(v_camera_x_pos).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_copy).w
		movem.l	(v_fg_redraw_direction).w,d0-d1
		movem.l	d0-d1,(v_fg_redraw_direction_copy).w
		move.l	(v_fg_y_pos_vsram_p2).w,(v_hblank_fg_y_pos_vsram_p2).w
		bsr.w	ProcessPLC
		rts	
; ===========================================================================

VBlank_UnusedE:				
		bsr.w	sub_E98
		addq.b	#1,(v_vblank_0e_counter).w
		move.b	#$E,(v_vblank_routine).w
		rts	
; ===========================================================================

VBlank_Fade:				
		bsr.w	sub_E98
		move.w	(v_vdp_hint_counter).w,(a5)
		bra.w	ProcessPLC
; ===========================================================================

VBlank_Ending:				
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)

loc_C9C:
		move.l	#-$69026A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	ProcessDMAQueue
		bsr.w	sub_1084
		movem.l	(v_camera_x_pos).w,d0-d7
		movem.l	d0-d7,(v_camera_pos_copy).w
		movem.l	(v_fg_redraw_direction).w,d0-d3
		movem.l	d0-d3,(v_fg_redraw_direction_copy).w
		bsr.w	sub_10E0
		startZ80
		move.w	(v_ending_vint_subrout).w,d0
		beq.s	.end
		clr.w	(v_ending_vint_subrout).w
		move.w	VBlank_Ending_DMA_Index-2(pc,d0.w),d0 ; if index is zero, return
		jsr	VBlank_Ending_DMA_Index(pc,d0.w)

.end:				
		rts	
; ===========================================================================
VBlank_Ending_DMA_Index:	index offset(*)
		ptr VBlank_Ending_ClearForegound	; 0 			
		ptr VBlank_Ending_Setup	; 1
; ===========================================================================

VBlank_Ending_ClearForegound:				
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

	loc_D62:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_D62
		move.w	#-$70FE,(a5)
		rts	
; ===========================================================================

VBlank_Ending_Setup:				
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000081,(a5)
		move.w	#0,(vdp_data_port).l

	loc_D92:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_D92
		move.w	#-$70FE,(a5)
		
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

	loc_DC0:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_DC0
		move.w	#-$70FE,(a5)
		
		lea	(vdp_control_port).l,a6
		move.w	#-$7500,(a6)
		move.w	#-$7BFE,(a6)
		move.w	#-$6FEF,(a6)
		lea	(v_128x128_tiles).l,a1
		move.l	#$50AC0003,d0
		moveq	#$16,d1
		moveq	#$E,d2
		bsr.w	TilemapToVRAM
		rts	
; ===========================================================================

VBlank_Menu:				
		stopZ80
		waitz80

		bsr.w	ReadJoypads

		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69026A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	ProcessDMAQueue
		bsr.w	sub_1084
		startZ80
		bsr.w	ProcessPLC
		tst.w	(v_countdown).w
		beq.w	locret_E96
		subq.w	#1,(v_countdown).w

	locret_E96:
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_E98:
		stopZ80
		waitz80
		bsr.w	ReadJoypads
		tst.b	(f_water_pal_full).w
		bne.s	loc_EDA
		lea	(vdp_control_port).l,a5
		move.l	#$94009340,(a5)
		move.l	#$96FD9580,(a5)
		move.w	#$977F,(a5)
		move.w	#$C000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bra.s	loc_EFE
; ===========================================================================

loc_EDA:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFF6CC0,(a5)
		move.l	#-$69076AC0,(a5)
		move.w	#-$6881,(a5)
		move.w	#-$4000,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)

loc_EFE:				
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69036B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6C40,(a5)
		move.l	#-$690F6B00,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7C00,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		bsr.w	sub_1084
		startZ80
		rts	
; End of function sub_E98

; ===========================================================================

HBlank:				
		tst.w	(f_hblank).w
		beq.w	locret_FFE
		tst.w	(f_two_player).w
		beq.w	loc_1000
		move.w	#0,(f_hblank).w
		move.l	a5,-(sp)
		move.l	d0,-(sp)

loc_F6E:				
		move.w	(vdp_control_port).l,d0
		andi.w	#4,d0
		beq.s	loc_F6E
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#-$41,d0
		move.w	d0,(vdp_control_port).l
		move.w	#-$7DD8,(vdp_control_port).l
		move.l	#$40000010,(vdp_control_port).l
		move.l	(v_hblank_fg_y_pos_vsram_p2).w,(vdp_data_port).l
		stopZ80
		waitz80
		lea	(vdp_control_port).l,a5
		move.l	#-$6BFE6CC0,(a5)
		move.l	#-$69116A80,(a5)
		move.w	#-$6881,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		startZ80

loc_FE0:				
		move.w	(vdp_control_port).l,d0
		andi.w	#4,d0
		beq.s	loc_FE0
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		move.l	(sp)+,d0
		movea.l	(sp)+,a5

locret_FFE:				
		rte	
; ===========================================================================

loc_1000:				
	disable_ints

loc_1004:
		move.w	#0,(f_hblank).w
		movem.l	a0-a1,-(sp)
		lea	(vdp_data_port).l,a1
		lea	(v_pal_water).w,a0
		move.l	#-$40000000,4(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.l	(a0)+,(a1)
		move.w	#-$7521,4(a1)
		movem.l	(sp)+,a0-a1
		tst.b	(f_hblank_run_snd).w
		bne.s	loc_1072
		rte	
; ===========================================================================

loc_1072:				
		clr.b	(f_hblank_run_snd).w
		movem.l	d0-a6,-(sp)
		bsr.w	sub_7E6
		movem.l	(sp)+,d0-a6
		rte	

; =============== S U B	R O U T	I N E =======================================


sub_1084:				
					
		lea	($FFFFE0).l,a0
		lea	($A01B80).l,a1
		cmpi.b	#-$80,8(a1)
		bne.s	loc_10C4
		_move.b	0(a0),d0
		beq.s	loc_10A4
		_clr.b	0(a0)
		bra.s	loc_10AE
; ===========================================================================

loc_10A4:				
		move.b	4(a0),d0
		beq.s	loc_10C4
		clr.b	4(a0)

loc_10AE:				
		move.b	d0,d1
		subi.b	#-2,d1
		bcs.s	loc_10C0
		addi.b	#$7F,d1	; ''
		move.b	d1,3(a1)
		bra.s	loc_10C4
; ===========================================================================

loc_10C0:				
		move.b	d0,8(a1)

loc_10C4:				
		moveq	#3,d1

loc_10C6:				
		move.b	1(a0,d1.w),d0
		beq.s	loc_10DA
		tst.b	9(a1,d1.w)
		bne.s	loc_10DA
		clr.b	1(a0,d1.w)
		move.b	d0,9(a1,d1.w)

loc_10DA:				
		dbf	d1,loc_10C6
		rts	
; End of function sub_1084


; =============== S U B	R O U T	I N E =======================================


sub_10E0:				
		jmp	DrawTilesWhenMoving
; End of function sub_10E0


; =============== S U B	R O U T	I N E =======================================


sub_10E6:				
		jmp	loc_3A68A
; End of function sub_10E6


; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
;	uses d0
; ---------------------------------------------------------------------------

JoypadInit:
		stopZ80
		waitz80
		moveq	#$40,d0	; '@'
		move.b	d0,(port_1_control).l 	; init port 1 (joypad 1)
		move.b	d0,(port_2_control).l	; init port 2 (joypad 2)
		move.b	d0,(port_e_control).l	; init port 3 (expansion/extra)
		startZ80
		rts	


; ---------------------------------------------------------------------------
; Subroutine to read joypad input, and send it to the RAM
; output:
;	d0 = actual joypad input (SACBRLDU)
;	d1 = actual joypad input, new since last frame only (SACBRLDU)
;	a1 = port_1_data ($A10003)
;	uses a0
; ---------------------------------------------------------------------------


ReadJoypads:
		lea	(v_joypad_hold_actual).w,a0 	; address where joypad states are written
		lea	(port_1_data).l,a1				; first joypad port
		bsr.s	.read						; do the first joypad
		addq.w	#2,a1						; do the second	joypad

	.read:
		move.b	#0,(a1)						; set port to read 00SA00DU
		nop	
		nop	
		move.b	(a1),d0					; d0 = 00SA00DU
		lsl.b	#2,d0					; d0 = SA00DU00
		andi.b	#$C0,d0					; d0 = SA000000
		move.b	#$40,(a1)				; set port to read 00CBRLDU
		nop	
		nop	
		move.b	(a1),d1					; d1 = 00CBRLDU
		andi.b	#$3F,d1					; d1 = 00CBRLDU
		or.b	d1,d0					; d0 = SACBRLDU
		not.b	d0					; invert bits, so that 1 = pressed
		move.b	(a0),d1					; d1 = previous joypad state
		eor.b	d0,d1
		move.b	d0,(a0)+				; v_joypad_hold_actual = SACBRLDU
		and.b	d0,d1					; d1 = new joypad inputs only
		move.b	d1,(a0)+				; v_joypad_press_actual = SACBRLDU (new only)
		rts



; =============== S U B	R O U T	I N E =======================================


VDPSetupGame:				
					
		lea	(vdp_control_port).l,a0
		lea	(vdp_data_port).l,a1
		lea	(word_11E2).l,a2
		moveq	#$12,d7

loc_116C:				; CODE XREF: VDPSetupGame+16j
		move.w	(a2)+,(a0)
		dbf	d7,loc_116C
		move.w	(word_11E2+2).l,d0
		move.w	d0,(v_vdp_mode_buffer).w
		move.w	#-$7521,(v_vdp_hint_counter).w
		moveq	#0,d0
		move.l	#$40000010,(vdp_control_port).l
		move.w	d0,(a1)
		move.w	d0,(a1)
		move.l	#-$40000000,(vdp_control_port).l
		move.w	#$3F,d7	; '?'

loc_11A0:				; CODE XREF: VDPSetupGame+4Aj
		move.w	d0,(a1)
		dbf	d7,loc_11A0
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	($FFFFF61A).w
		move.l	d1,-(sp)
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6B006C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000080,(a5)
		move.w	#0,(vdp_data_port).l

loc_11D2:				; CODE XREF: VDPSetupGame+80j
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_11D2
		move.w	#-$70FE,(a5)
		move.l	(sp)+,d1
		rts	
; End of function VDPSetupGame

; ===========================================================================
word_11E2:	dc.w $8004		; 0 ; DATA XREF: VDPSetupGame+Co
					; VDPSetupGame+1Ar
		dc.w $8134		; 1
		dc.w $8230		; 2
		dc.w $8328		; 3
		dc.w $8407		; 4
		dc.w $857C		; 5
		dc.w $8600		; 6
		dc.w $8700		; 7
		dc.w $8800		; 8
		dc.w $8900		; 9
		dc.w $8A00		; 10
		dc.w $8B00		; 11
		dc.w $8C81		; 12
		dc.w $8D3F		; 13
		dc.w $8E00		; 14
		dc.w $8F02		; 15
		dc.w $9001		; 16
		dc.w $9100		; 17
		dc.w $9200		; 18

; =============== S U B	R O U T	I N E =======================================


sub_1208:				
					
		move.w	#$100,(z80_bus_request).l

loc_1210:				
		btst	#0,(z80_bus_request).l
		bne.s	loc_1210
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BFF6CC1,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000080,(a5)
		move.w	#0,(vdp_data_port).l

loc_123C:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_123C
		move.w	#-$70FE,(a5)
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BF06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_126A:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_126A
		move.w	#-$70FE,(a5)
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BF06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$60000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_1298:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_1298
		move.w	#-$70FE,(a5)
		tst.w	(f_two_player).w
		beq.s	loc_12D8
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BF06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$60000082,(a5)
		move.w	#0,(vdp_data_port).l

loc_12CC:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_12CC
		move.w	#-$70FE,(a5)

loc_12D8:				
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	($FFFFF61A).w
		lea	(v_sprite_buffer).w,a1
		moveq	#0,d0
		move.w	#$A0,d1	

loc_12EA:				
		move.l	d0,(a1)+
		dbf	d1,loc_12EA
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$100,d1

loc_12FA:				
		move.l	d0,(a1)+
		dbf	d1,loc_12FA
		startZ80
		rts	
; End of function sub_1208


; =============== S U B	R O U T	I N E =======================================


JmpTo_SoundDriverLoad:				
		nop	
		jmp	SoundDriverLoad
; End of function JmpTo_SoundDriverLoad

; ===========================================================================
; unused mostly-leftover subroutine to load the sound driver
; SoundDriverLoadS1:
		move.w	#$100,(z80_bus_request).l ; stop the Z80
		move.w	#$100,(z80_reset).l ; reset the Z80
		lea	(z80_ram).l,a1
		move.b	#$F3,(a1)+	; di
		move.b	#$F3,(a1)+	; di
		move.b	#$C3,(a1)+	; jp
		move.b	#0,(a1)+	; jp address low byte
		move.b	#0,(a1)+	; jp address high byte
		move.w	#0,(z80_reset).l
		nop	
		nop	
		nop	
		nop	
		move.w	#$100,(z80_reset).l  ; reset the Z80
		startZ80					 ; start the Z80
		rts	

; =============== S U B	R O U T	I N E =======================================
; Despite the name, this can actually be used for playing sounds.
; The original source code called this 'bgmset'.
; sub_135E:
PlayMusic:				
					
		tst.b	($FFFFFFE0).w
		bne.s	.queue1
		move.b	d0,($FFFFFFE0).w
		rts	

	.queue1:				
		move.b	d0,($FFFFFFE4).w
		rts	


; =============== S U B	R O U T	I N E =======================================
; Despite the name, this can actually be used for playing music.
; The original source code called this 'sfxset'.
; sub_1370
PlaySound:				
	; Curiously, none of these functions write to 'Sound_Queue.Queue2'...					
		move.b	d0,($FFFFFFE1).w
		rts	

; =============== S U B	R O U T	I N E =======================================
; Despite the name, this can actually be used for playing music.
; Unfortunately, the original name for this is not known.
; sub_1376: PlaySoundStereo:
PlaySound2:					
		move.b	d0,($FFFFFFE2).w
		rts	

; =============== S U B	R O U T	I N E =======================================
; Play a sound if the source is on-screen.
; sub_137C:
PlaySoundLocal:				
		tst.b	1(a0)
		bpl.s	.exit
		move.b	d0,($FFFFFFE1).w

	.exit:				
		rts	


; =============== S U B	R O U T	I N E =======================================

; sub_1388
PauseGame:								
		nop	
		tst.b	(v_lives).w			; do you have any lives left?
		beq.w	Unpause				; if not, branch
	if FixBugs
	; The game still lets you pause if player 2 got a Game Over, or if
	; either player got a Time Over. The following code fixes this.
		tst.b	(v_lives_p2).w
		beq.w	Unpause		
		tst.b	(f_time_over).w
		bne.w	Unpause
		tst.b   (f_time_over_p2).w
		bne.w   Unpause	
	endc	
		tst.w	(f_pause).w						; is game already paused?
		bne.s	.paused							; if yes, branch			
		move.b	(v_joypad_press_actual).w,d0	; is start button pressed?
		or.b	(v_joypad2_press_actual).w,d0	; (either player)
		andi.b	#-$80,d0
		beq.s	Pause_DoNothing					; if not, branch

	.paused:				
		move.w	#1,(f_pause).w
		move.b	#-2,($FFFFFFE0).w

; loc_13B2:
Pause_Loop:				
		move.b	#$10,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		tst.b	(f_slowmotion_cheat).w
		beq.s	Pause_ChkStart
		btst	#6,(v_joypad_press_actual).w
		beq.s	Pause_ChkBC
		move.b	#4,(v_gamemode).w
		nop	
		bra.s	loc_13F8_Music
; ===========================================================================
	; loc_13D4:
	Pause_ChkBC:				
		btst	#4,(v_joypad_hold_actual).w
		bne.s	Pause_SlowMo
		btst	#5,(v_joypad_press_actual).w
		bne.s	Pause_SlowMo

	; loc_13E4:
	Pause_ChkStart:				
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		beq.s	Pause_Loop

	; loc_13F2:
	loc_13F8_Music:				
		move.b	#-1,($FFFFFFE0).w

	; Unpause:
	Unpause:				
		move.w	#0,(f_pause).w

	; return_13FE:
	Pause_DoNothing:				
		rts	
; ===========================================================================
; loc_1400:
	Pause_SlowMo:				
		move.w	#1,(f_pause).w
		move.b	#-1,($FFFFFFE0).w
		rts	


; ---------------------------------------------------------------------------
; Subroutine to	copy a tile map from RAM to VRAM fg/bg nametable

; input:
;	d0.l = VRAM fg/bg nametable address (as VDP command)
;	d1.w = width-1 (cells)
;	d2.w = height-1 (cells)
;	a1 = tile map address

; output:
;	a6 = vdp_data_port ($C00000)

;	uses d0.l, d2.w, d3.w, d4.l, a1
; ---------------------------------------------------------------------------

; sub_140E: ShowVDPGraphics: PlaneMapToVRAM: PlaneMapToVRAM_H40:
TilemapToVRAM:							
		lea	(vdp_data_port).l,a6
		move.l	#sizeof_vram_row<<16,d4			; d4 = $800000

	.loop_row:				
		move.l	d0,4(a6)				; move d0 to vdp_control_port
		move.w	d1,d3

	.loop_cell:				
		move.w	(a1)+,(a6)				; write value to nametable
		dbf	d3,.loop_cell				; next tile
		add.l	d4,d0					; goto next line
		dbf	d2,.loop_row				; next line
		rts	

; ---------------------------------------------------------------------------
; Alternate subroutine to transfer a plane map to VRAM
; (used for Special Stage background)
; ---------------------------------------------------------------------------
; sub_142E: ShowVDPGraphics2: PlaneMapToVRAM2: PlaneMapToVRAM_H80_SpecialStage:
TilemapToVRAM_H80_SS:				
		lea	(vdp_data_port).l,a6
		move.l	#sizeof_vram_row<<17,d4		; d4 = $1000000

.loop_row:				
		move.l	d0,4(a6)			; move d0 to vdp_control_port
		move.w	d1,d3

.loop_cell:				
		move.w	(a1)+,(a6)			; write value to nametable
		dbf	d3,.loop_cell				; next tile
		add.l	d4,d0				; goto next line
		dbf	d2,.loop_row				; next line
		rts	


; ---------------------------------------------------------------------------
; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
; to be issued the next time ProcessDMAQueue is called.
; Can be called a maximum of 18 times before the buffer needs to be cleared
; by issuing the commands (this subroutine DOES check for overflow)
; ---------------------------------------------------------------------------
; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
QueueDMATransfer:				
		movea.l	(v_vdp_command_buffer_slot).w,a1
		cmpa.w	#v_vdp_command_buffer_slot,a1	; are we at the end of the buffer?
		beq.s	.exit	; if so, exit; there's no more room in the buffer
		
		move.w	#$9300,d0	; specify DMA transfer length & $00FF
		move.b	d3,d0
		move.w	d0,(a1)+
		
		move.w	#$9400,d0	; specify DMA transfer length & $FF00
		lsr.w	#8,d3
		move.b	d3,d0
		move.w	d0,(a1)+	; store command
		
		move.w	#$9500,d0	; specify source address & $0001FE
		lsr.l	#1,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command
		
		move.w	#$9600,d0	; specify source address & $01FE00
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command
		
		move.w	#$9700,d0	; command to specify source address & $FE0000
		lsr.l	#8,d1
		;andi.b	#$7F,d1		; this instruction safely allows source to be in RAM; S3K added this
		move.b	d1,d0
		move.w	d0,(a1)+	; store command
		
		andi.l	#$FFFF,d2	; specify destination address and start DMA
		lsl.l	#2,d2
		lsr.w	#2,d2
		swap	d2
		ori.l	#$40000080,d2	 ; set bits to specify VRAM transfer
		move.l	d2,(a1)+	; store command
		
		move.l	a1,(v_vdp_command_buffer_slot).w	 ; set the next free slot address
		cmpa.w	#v_vdp_command_buffer_slot,a1	; are we at the end of the buffer?
		beq.s	.exit		; if so, exit
		move.w	#0,(a1)	 ; put a stop token at the end of the used part of the buffer
	
	; return_14AA: QueueDMATransfer_Done:
	.exit:				
		rts	

; ---------------------------------------------------------------------------
; Subroutine for issuing all VDP commands that were queued
; (by earlier calls to QueueDMATransfer)
; Resets the queue when it's done
; ---------------------------------------------------------------------------

; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
ProcessDMAQueue:							
		lea	(vdp_control_port).l,a5
		lea	(v_vdp_command_buffer).w,a1

	; loc_14B6: ProcessDMAQueue_Loop:
	.process_dmaqueue_loop:
		move.w	(a1)+,d0
		beq.s	.done  ; exit if we reached a stop token
		move.w	d0,(a5)		; transfer length
		move.w	(a1)+,(a5)	; transfer length
		move.w	(a1)+,(a5)	; source address
		move.w	(a1)+,(a5)	; source address
		move.w	(a1)+,(a5)	; source address
		move.w	(a1)+,(a5)	; destination
		move.w	(a1)+,(a5)	; destination
		cmpa.w	#v_vdp_command_buffer_slot,a1 ; have we reached the end of the buffer?
		bne.s	.process_dmaqueue_loop  	  ; if not, loop

	.done:
		move.w	#0,(v_vdp_command_buffer).w
		move.l	#v_vdp_command_buffer,(v_vdp_command_buffer_slot).w
		rts	


; ---------------------------------------------------------------------------
; Nemesis decompression	subroutine, decompresses art directly to VRAM

; input:
;	a0 = art source address

; usage:
;	locVRAM	destination
;	lea	(source).l,a0
;	bsr.w	NemDec

; See http://info.sonicretro.org/Nemesis_compression for format explanation
; ---------------------------------------------------------------------------

NemDec:
		pushr	d0-a1/a3-a5
		lea	(NemPCD_WriteRowToVDP).l,a3		; write all data to the same location
		lea	(vdp_data_port).l,a4			; specifically, to the VDP data port
		bra.s	NemDecMain

; ---------------------------------------------------------------------------
; Nemesis decompression subroutine, decompresses art to RAM (unused)

; input:
;	a0 = art source address
;	a4 = destination RAM address
; ---------------------------------------------------------------------------

NemDecToRAM:
		pushr	d0-a1/a3-a5
		lea	(NemPCD_WriteRowToRAM).l,a3		; advance to the next location after each write

NemDecMain:
		lea	(v_nem_gfx_buffer).w,a1
		move.w	(a0)+,d2				; get number of patterns
		lsl.w	#1,d2
		bcc.s	.sign_bit_not_set				; branch if the sign bit isn't set
		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3 ; otherwise the file uses XOR mode

	.sign_bit_not_set:
		lsl.w	#2,d2					; get number of 8-pixel rows in the uncompressed data
		movea.w	d2,a5					; and store it in a5 because there aren't any spare data registers
		moveq	#8,d3					; 8 pixels in a pattern row
		moveq	#0,d2
		moveq	#0,d4
		bsr.w	NemDec_BuildCodeTable
		move.b	(a0)+,d5				; get first byte of compressed data
		asl.w	#8,d5					; shift up by a byte
		move.b	(a0)+,d5				; get second byte of compressed data
		move.w	#$10,d6					; set initial shift value
		bsr.s	NemDec_ProcessCompressedData
		popr	d0-a1/a3-a5
		rts

; ---------------------------------------------------------------------------
; Part of the Nemesis decompressor, processes the actual compressed data
; ---------------------------------------------------------------------------

NemDec_ProcessCompressedData:
		move.w	d6,d7
		subq.w	#8,d7					; get shift value
		move.w	d5,d1
		lsr.w	d7,d1					; shift so that high bit of the code is in bit position 7
		cmpi.b	#$FC,d1					; %11111100; are the high 6 bits set?
		bcc.s	NemPCD_InlineData			; if they are, it signifies inline data
		andi.w	#$FF,d1
		add.w	d1,d1
		move.b	(a1,d1.w),d0				; get the length of the code in bits
		ext.w	d0
		sub.w	d0,d6					; subtract from shift value so that the next code is read next time around
		cmpi.w	#9,d6					; does a new byte need to be read?
		bcc.s	.skip_new_byte				; if not, branch
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5				; read next byte

	.skip_new_byte:
		move.b	1(a1,d1.w),d1
		move.w	d1,d0
		andi.w	#$F,d1					; get palette index for pixel
		andi.w	#$F0,d0

NemPCD_ProcessCompressedData:
		lsr.w	#4,d0					; get repeat count

NemPCD_WritePixel:
		lsl.l	#4,d4					; shift up by a nybble
		or.b	d1,d4					; write pixel
		subq.w	#1,d3					; has an entire 8-pixel row been written?
		bne.s	NemPCD_WritePixel_Loop			; if not, loop
		jmp	(a3)					; otherwise, write the row to its destination, by doing a dynamic jump to NemPCD_WriteRowToVDP, NemDec_WriteAndAdvance, NemPCD_WriteRowToVDP_XOR, or NemDec_WriteAndAdvance_XOR

; ===========================================================================

NemPCD_NewRow:
		moveq	#0,d4					; reset row
		moveq	#8,d3					; reset nybble counter

NemPCD_WritePixel_Loop:
		dbf	d0,NemPCD_WritePixel
		bra.s	NemDec_ProcessCompressedData
; ===========================================================================

NemPCD_InlineData:
		subq.w	#6,d6					; 6 bits needed to signal inline data
		cmpi.w	#9,d6
		bcc.s	loc_14E4
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5

	loc_14E4:
		subq.w	#7,d6					; and 7 bits needed for the inline data itself
		move.w	d5,d1
		lsr.w	d6,d1					; shift so that low bit of the code is in bit position 0
		move.w	d1,d0
		andi.w	#$F,d1					; get palette index for pixel
		andi.w	#$70,d0					; high nybble is repeat count for pixel
		cmpi.w	#9,d6
		bcc.s	NemPCD_ProcessCompressedData
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
		bra.s	NemPCD_ProcessCompressedData

; ===========================================================================

NemPCD_WriteRowToVDP:
		move.l	d4,(a4)					; write 8-pixel row
		subq.w	#1,a5
		move.w	a5,d4					; have all the 8-pixel rows been written?
		bne.s	NemPCD_NewRow				; if not, branch
		rts						; otherwise the decompression is finished
; ===========================================================================
NemPCD_WriteRowToVDP_XOR:
		eor.l	d4,d2					; XOR the previous row by the current row
		move.l	d2,(a4)					; and write the result
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemPCD_NewRow
		rts	
; ===========================================================================

NemPCD_WriteRowToRAM:
		move.l	d4,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemPCD_NewRow
		rts	
; ===========================================================================
NemPCD_WriteRowToRAM_XOR:
		eor.l	d4,d2
		move.l	d2,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	NemPCD_NewRow
		rts	

; ---------------------------------------------------------------------------
; Part of the Nemesis decompressor, builds the code table (in RAM)
; ---------------------------------------------------------------------------

NemDec_BuildCodeTable:
		move.b	(a0)+,d0				; read first byte

NemBCT_ChkEnd:
		cmpi.b	#$FF,d0					; has the end of the code table description been reached?
		bne.s	NemBCT_NewPALIndex			; if not, branch
		rts						; otherwise, this subroutine's work is done
; ===========================================================================

NemBCT_NewPALIndex:
		move.w	d0,d7

NemBCT_Loop:
		move.b	(a0)+,d0				; read next byte
		cmpi.b	#$80,d0					; sign bit being set signifies a new palette index
		bcc.s	NemBCT_ChkEnd				; a bmi could have been used instead of a compare and bcc
		
		move.b	d0,d1
		andi.w	#$F,d7					; get palette index
		andi.w	#$70,d1					; get repeat count for palette index
		or.w	d1,d7					; combine the two
		andi.w	#$F,d0					; get the length of the code in bits
		move.b	d0,d1
		lsl.w	#8,d1
		or.w	d1,d7					; combine with palette index and repeat count to form code table entry
		moveq	#8,d1
		sub.w	d0,d1					; is the code 8 bits long?
		bne.s	NemBCT_ShortCode			; if not, a bit of extra processing is needed
		move.b	(a0)+,d0				; get code
		add.w	d0,d0					; each code gets a word-sized entry in the table
		move.w	d7,(a1,d0.w)				; store the entry for the code
		bra.s	NemBCT_Loop				; repeat
; ===========================================================================

; the Nemesis decompressor uses prefix-free codes (no valid code is a prefix of a longer code)
; e.g. if 10 is a valid 2-bit code, 110 is a valid 3-bit code but 100 isn't
; also, when the actual compressed data is processed the high bit of each code is in bit position 7
; so the code needs to be bit-shifted appropriately over here before being used as a code table index
; additionally, the code needs multiple entries in the table because no masking is done during compressed data processing
; so if 11000 is a valid code then all indices of the form 11000XXX need to have the same entry
NemBCT_ShortCode:
		move.b	(a0)+,d0				; get code
		lsl.w	d1,d0					; get index into code table
		add.w	d0,d0					; shift so that high bit is in bit position 7
		moveq	#1,d5
		lsl.w	d1,d5
		subq.w	#1,d5					; d5 = 2^d1 - 1

NemBCT_ShortCode_Loop:
		move.w	d7,(a1,d0.w)				; store entry
		addq.w	#2,d0					; increment index
		dbf	d5,NemBCT_ShortCode_Loop		; repeat for required number of entries
		bra.s	NemBCT_Loop

; =============== S U B	R O U T	I N E =======================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (to queue pattern load requests)

; input:
;	d0 = index of PLC list
; ---------------------------------------------------------------------------
; sub_161E: PLCLoad: LoadPLC:
AddPLC:									
		pushr	a1-a2,-(sp)				; save a1/a2 to stack
		lea	(PatternLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1				; jump to relevant PLC
		lea	(v_plc_buffer).w,a2			; PLC buffer space in RAM

	.findspace:				
		tst.l	(a2)					; is first space available?
		beq.s	.copytoRAM				; if yes, branch
		addq.w	#sizeof_plc,a2					; if not, try next space
		bra.s	.findspace				; repeat until space is found (warning: there are $10 spaces, but it may overflow)
; ===========================================================================

.copytoRAM:				
		move.w	(a1)+,d0				; get PLC item count
		bmi.s	.skip					; branch if -1 (i.e. 0 items)

	.loop:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+				; copy PLC to RAM
		dbf	d0,.loop					; repeat for all items in PLC

	.skip:
		popr	a1-a2					; restore a1/a2 from stack
		rts


; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (to queue pattern load requests) and
; clear the PLC buffer

; input:
;	d0 = index of PLC list

; NOTICE: This subroutine does not check for buffer overruns. The programmer
;	  (or hacker) is responsible for making sure that no more than
;	  16 load requests are copied into the buffer.
;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
; ---------------------------------------------------------------------------
; sub_1650: LoadPLC2:
NewPLC:								
		pushr	a1-a2					; save a1/a2 to stack
		lea	(PatternLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1				; jump to relevant PLC
		bsr.s	ClearPLC				; erase any data in PLC buffer space
		lea	(v_plc_buffer).w,a2
		move.w	(a1)+,d0				; get PLC item count
		bmi.s	.skip					; branch if -1 (i.e. 0 items)

	.loop:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+				; copy PLC to RAM
		dbf	d0,.loop					; repeat for all items in PLC

	.skip:
		popr	a1-a2					; restore a1/a2 from stack
		rts

; ---------------------------------------------------------------------------
; Subroutine to	clear the pattern load cue buffer

;	uses d0, a2
; ---------------------------------------------------------------------------

ClearPLC:				
					
		lea	(v_plc_buffer).w,a2 		; PLC buffer space in RAM
		moveq	#(((plc_buffer_and_regs_end-plc_buffer_and_regs)/4)-1),d0

	.loop:				
		clr.l	(a2)+
		dbf	d0,.loop
		rts	


; ---------------------------------------------------------------------------
; Subroutine to	check the PLC buffer and begin decompression if it contains
; anything. ProcessPLC handles the actual decompression during VBlank
; ---------------------------------------------------------------------------

; sub_168A: RunPLC_RAM:
RunPLC:				
		tst.l	(v_plc_buffer).w			; does PLC buffer contain any items?
		beq.s	.exit					; if not, branch
		tst.w	(v_nem_tile_count).w
		bne.s	.exit
		movea.l	(v_plc_buffer).w,a0			; get pointer for Nemesis compressed graphics
		lea_	NemPCD_WriteRowToVDP,a3
		nop
		lea	(v_nem_gfx_buffer).w,a1
		move.w	(a0)+,d2				; get 1st word of Nemesis graphics header
		bpl.s	.normal_mode				; branch if 0-$7FFF
		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3 ; use XOR mode

	.normal_mode:
		andi.w	#$7FFF,d2				; clear highest bit
    if ~FixBugs
		; This is done too early; this variable is also used to determine when
		; there are PLCs to process, which means that as soon as this
		; variable is set, PLC processing will occur during VBlank. If an
		; interrupt occurs between here and the end of this function, then
		; the PLC processor will begin despite it not being fully
		; initialized, causing a crash (as can happen in Sonic 1 at the end of LZ1 & 2). 
		; S3K fixes this bug by moving this instruction to the end of the function.		
		move.w	d2,(v_nem_tile_count).w			; load tile count
	endc	
		bsr.w	NemDec_BuildCodeTable
		move.b	(a0)+,d5				; get next byte of header
		asl.w	#8,d5					; move to high byte of word
		move.b	(a0)+,d5				; get final byte of header
		moveq	#$10,d6
		moveq	#0,d0
		move.l	a0,(v_plc_buffer).w			; save pointer to actual compressed data
		move.l	a3,(v_nem_mode_ptr).w			; save pointer to Nemesis normal/XOR code
		move.l	d0,(v_nem_repeat).w
		move.l	d0,(v_nem_pixel).w
		move.l	d0,(v_nem_d2).w
		move.l	d5,(v_nem_header).w
		move.l	d6,(v_nem_shift).w
	if FixBugs
		; See above.
		move.w	d2,(v_nem_tile_count).w			; load tile count
	endc
	
	.exit:
		rts


; ---------------------------------------------------------------------------
; Subroutine to	decompress graphics listed in the PLC buffer
; ---------------------------------------------------------------------------

nem_tile_count:	= 6

ProcessPLC:
		tst.w	(v_nem_tile_count).w			; has PLC execution begun?
		beq.w	ProcessPLC_Exit				; if not, branch
		move.w	#nem_tile_count,(v_nem_tile_count_frame).w ; 9 tiles per frame
		moveq	#0,d0
		move.w	(v_plc_buffer_dest).w,d0		; copy VRAM destination to d0
		addi.w	#nem_tile_count*sizeof_cell,(v_plc_buffer_dest).w ; update for next frame
		bra.s	ProcessPLC_Decompress

nem_tile_count:	= 3

ProcessPLC2:
		tst.w	(v_nem_tile_count).w			; has PLC execution begun?
		beq.s	ProcessPLC_Exit				; if not, branch
		move.w	#nem_tile_count,(v_nem_tile_count_frame).w ; 3 tiles per frame
		moveq	#0,d0
		move.w	(v_plc_buffer_dest).w,d0		; copy VRAM destination to d0
		addi.w	#nem_tile_count*sizeof_cell,(v_plc_buffer_dest).w ; update for next frame

ProcessPLC_Decompress:
		lea	(vdp_control_port).l,a4
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0					; convert VRAM address to VDP format
		move.l	d0,(a4)					; set address via control port
		subq.w	#4,a4					; a4 = vdp_data_port
		movea.l	(v_plc_buffer).w,a0			; load pointer for actual compressed data (sans header)
		movea.l	(v_nem_mode_ptr).w,a3
		move.l	(v_nem_repeat).w,d0
		move.l	(v_nem_pixel).w,d1
		move.l	(v_nem_d2).w,d2
		move.l	(v_nem_header).w,d5
		move.l	(v_nem_shift).w,d6
		lea	(v_nem_gfx_buffer).w,a1

	.loop_tile:
		movea.w	#8,a5
		bsr.w	NemPCD_NewRow
		subq.w	#1,(v_nem_tile_count).w			; decrement tile counter
		beq.s	ProcessPLC_Finish			; branch if 0
		subq.w	#1,(v_nem_tile_count_frame).w		; decrement tile per frame counter
		bne.s	.loop_tile				; branch if not 0

		move.l	a0,(v_plc_buffer).w			; save pointer to latest compressed data
		move.l	a3,(v_nem_mode_ptr).w
		move.l	d0,(v_nem_repeat).w
		move.l	d1,(v_nem_pixel).w
		move.l	d2,(v_nem_d2).w
		move.l	d5,(v_nem_header).w
		move.l	d6,(v_nem_shift).w

ProcessPLC_Exit:
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	shift the PLC buffer contents after an entry is processed
; ---------------------------------------------------------------------------
ProcessPLC_Finish:
		lea	(v_plc_buffer).w,a0  ; load PLC buffer address
		
	if FixBugs
		lea sizeof_plc(a0),a1 	 ; load location of second slot in the queue
   		moveq   #(v_plc_buffer_end-v_plc_buffer-6)/6-1,d0 ; $E, number of loops needed to shift everything

	.loop:
		move.l  (a1)+,(a0)+		; shift the first longword...
		move.w  (a1)+,(a0)+		; ...then the final word of the cue to the next slot
		dbf d0,.loop			; repeat until entire buffer has been shifted
 
    	moveq   #0,d0
    	move.l  d0,(a0)+    ; clear the first longword... 
    	move.w  d0,(a0)+    ; ...and the final word of the last cue to avoid overcopying it
    	
	else
	
		; This does not shift the PLC buffer correctly; it only shifts $58 bytes 
		; instead of $5A, skipping the VRAM offset of the 16th and final cue, 
		; and it does not clear that 16th cue, resulting in overcopying 
		; and ultimately causing the PLC processor to get stuck in an infinite loop processing 
		; the same cue forever.	
		moveq	#(v_plc_buffer_end-v_plc_buffer-6)/4-1,d0 ; $15

	.loop:
		move.l	sizeof_plc(a0),(a0)+	; shift contents of PLC buffer up 6 bytes
		dbf	d0,.loop					; repeat until everything has been shifted (but see the bug above)	
	endc
		
		rts


; =============== S U B	R O U T	I N E =======================================


sub_178A:				
		lea	(PatternLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,d1

loc_179C:				
		movea.l	(a1)+,a0
		moveq	#0,d0
		move.w	(a1)+,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(vdp_control_port).l
		bsr.w	NemDec
		dbf	d1,loc_179C
		rts	
; End of function sub_178A

; --------------------------------------------------------------------------------------
; Enigma Decompression Algorithm
; --------------------------------------------------------------------------------------

; =============== S U B	R O U T	I N E =======================================


EniDec:				
					
		movem.l	d0-d7/a1-a5,-(sp)
		movea.w	d0,a3
		move.b	(a0)+,d0
		ext.w	d0
		movea.w	d0,a5
		move.b	(a0)+,d4
		lsl.b	#3,d4
		movea.w	(a0)+,a2
		adda.w	a3,a2
		movea.w	(a0)+,a4
		adda.w	a3,a4
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5
		moveq	#$10,d6

loc_17DC:				
					
		moveq	#7,d0
		move.w	d6,d7
		sub.w	d0,d7
		move.w	d5,d1
		lsr.w	d7,d1
		andi.w	#$7F,d1	; ''
		move.w	d1,d2
		cmpi.w	#$40,d1	; '@'
		bcc.s	loc_17F6
		moveq	#6,d0
		lsr.w	#1,d2

loc_17F6:				; CODE XREF: EniDec+34j
		bsr.w	loc_192A
		andi.w	#$F,d2
		lsr.w	#4,d1
		add.w	d1,d1
		jmp	loc_1852(pc,d1.w)
; End of function EniDec

; ===========================================================================

loc_1806:				
					
		move.w	a2,(a1)+
		addq.w	#1,a2
		dbf	d2,loc_1806
		bra.s	loc_17DC
; ===========================================================================

loc_1810:				
					
		move.w	a4,(a1)+
		dbf	d2,loc_1810
		bra.s	loc_17DC
; ===========================================================================

loc_1818:				
		bsr.w	sub_187A

loc_181C:				
		move.w	d1,(a1)+
		dbf	d2,loc_181C
		bra.s	loc_17DC
; ===========================================================================

loc_1824:				
		bsr.w	sub_187A

loc_1828:				
		move.w	d1,(a1)+
		addq.w	#1,d1
		dbf	d2,loc_1828
		bra.s	loc_17DC
; ===========================================================================

loc_1832:				
		bsr.w	sub_187A

loc_1836:				
		move.w	d1,(a1)+
		subq.w	#1,d1
		dbf	d2,loc_1836
		bra.s	loc_17DC
; ===========================================================================

loc_1840:				
		cmpi.w	#$F,d2
		beq.s	loc_1862

loc_1846:				
		bsr.w	sub_187A
		move.w	d1,(a1)+
		dbf	d2,loc_1846
		bra.s	loc_17DC
; ===========================================================================

loc_1852:
		bra.s	loc_1806
; ===========================================================================
		bra.s	loc_1806
; ===========================================================================
		bra.s	loc_1810
; ===========================================================================
		bra.s	loc_1810
; ===========================================================================
		bra.s	loc_1818
; ===========================================================================
		bra.s	loc_1824
; ===========================================================================
		bra.s	loc_1832
; ===========================================================================
		bra.s	loc_1840
; ===========================================================================

loc_1862:				
		subq.w	#1,a0
		cmpi.w	#$10,d6
		bne.s	loc_186C
		subq.w	#1,a0

loc_186C:				
		move.w	a0,d0
		lsr.w	#1,d0
		bcc.s	loc_1874
		addq.w	#1,a0

loc_1874:				
		movem.l	(sp)+,d0-d7/a1-a5
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_187A:				
					
		move.w	a3,d3
		move.b	d4,d1
		add.b	d1,d1
		bcc.s	loc_188C
		subq.w	#1,d6
		btst	d6,d5
		beq.s	loc_188C
		ori.w	#-$8000,d3

loc_188C:				
		add.b	d1,d1
		bcc.s	loc_189A
		subq.w	#1,d6
		btst	d6,d5
		beq.s	loc_189A
		addi.w	#$4000,d3

loc_189A:				
		add.b	d1,d1
		bcc.s	loc_18A8
		subq.w	#1,d6
		btst	d6,d5
		beq.s	loc_18A8
		addi.w	#$2000,d3

loc_18A8:				
		add.b	d1,d1
		bcc.s	loc_18B6
		subq.w	#1,d6
		btst	d6,d5
		beq.s	loc_18B6
		ori.w	#$1000,d3

loc_18B6:				
		add.b	d1,d1
		bcc.s	loc_18C4
		subq.w	#1,d6
		btst	d6,d5
		beq.s	loc_18C4
		ori.w	#$800,d3

loc_18C4:				
		move.w	d5,d1
		move.w	d6,d7
		sub.w	a5,d7
		bcc.s	loc_18F4
		move.w	d7,d6
		addi.w	#$10,d6
		neg.w	d7
		lsl.w	d7,d1
		move.b	(a0),d5
		rol.b	d7,d5
		add.w	d7,d7
		and.w	loc_1908(pc,d7.w),d5
		add.w	d5,d1

loc_18E2:				
		move.w	a5,d0
		add.w	d0,d0
		and.w	loc_1908(pc,d0.w),d1
		add.w	d3,d1
		move.b	(a0)+,d5
		lsl.w	#8,d5
		move.b	(a0)+,d5
		rts	
; ===========================================================================

loc_18F4:				
		beq.s	loc_1906
		lsr.w	d7,d1
		move.w	a5,d0
		add.w	d0,d0
		and.w	loc_1908(pc,d0.w),d1
		add.w	d3,d1
		move.w	a5,d0
		bra.s	loc_192A
; ===========================================================================

loc_1906:				
		moveq	#$10,d6

loc_1908:
		bra.s	loc_18E2
; End of function sub_187A

; ===========================================================================
		dc.w	 1		; 0
		dc.w	 3		; 1
		dc.w	 7		; 2
		dc.w	$F		; 3
		dc.w   $1F		; 4
		dc.w   $3F		; 5
		dc.w   $7F		; 6
		dc.w   $FF		; 7
		dc.w  $1FF		; 8
		dc.w  $3FF		; 9
		dc.w  $7FF		; 10
		dc.w  $FFF		; 11
		dc.w $1FFF		; 12
		dc.w $3FFF		; 13
		dc.w $7FFF		; 14
		dc.w $FFFF		; 15
; ===========================================================================

loc_192A:				; CODE XREF: EniDec+3Ap
					
		sub.w	d0,d6
		cmpi.w	#9,d6
		bcc.s	locret_1938
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5

locret_1938:				
		rts	
; ------------------------------------------------------------------------
; Kosinski decompression algorithm
; ------------------------------------------------------------------------

; =============== S U B	R O U T	I N E =======================================


KosDec:				

var_2		= -2
var_1		= -1

		subq.l	#2,sp
		move.b	(a0)+,2+var_1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

loc_1946:				; CODE XREF: KosDec+24j
					; KosDec+8Aj ...
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,loc_1958
		move.b	(a0)+,2+var_1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

loc_1958:				; CODE XREF: KosDec+10j
		move	d6,ccr
		bcc.s	loc_1960
		move.b	(a0)+,(a1)+
		bra.s	loc_1946
; ===========================================================================

loc_1960:				; CODE XREF: KosDec+20j
		moveq	#0,d3
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,loc_1974
		move.b	(a0)+,2+var_1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

loc_1974:				; CODE XREF: KosDec+2Cj
		move	d6,ccr
		bcs.s	loc_19A4
		lsr.w	#1,d5
		dbf	d4,loc_1988
		move.b	(a0)+,2+var_1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

loc_1988:				; CODE XREF: KosDec+40j
		roxl.w	#1,d3
		lsr.w	#1,d5
		dbf	d4,loc_199A
		move.b	(a0)+,2+var_1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

loc_199A:				; CODE XREF: KosDec+52j
		roxl.w	#1,d3
		addq.w	#1,d3
		moveq	#-1,d2
		move.b	(a0)+,d2
		bra.s	loc_19BA
; ===========================================================================

loc_19A4:				; CODE XREF: KosDec+3Cj
		move.b	(a0)+,d0
		move.b	(a0)+,d1
		moveq	#-1,d2
		move.b	d1,d2
		lsl.w	#5,d2
		move.b	d0,d2
		andi.w	#7,d1
		beq.s	loc_19C6
		move.b	d1,d3
		addq.w	#1,d3

loc_19BA:				; CODE XREF: KosDec+68j
					; KosDec+86j ...
		move.b	(a1,d2.w),d0
		move.b	d0,(a1)+
		dbf	d3,loc_19BA
		bra.s	loc_1946
; ===========================================================================

loc_19C6:				; CODE XREF: KosDec+7Aj
		move.b	(a0)+,d1
		beq.s	loc_19D6
		cmpi.b	#1,d1
		beq.w	loc_1946
		move.b	d1,d3
		bra.s	loc_19BA
; ===========================================================================

loc_19D6:				; CODE XREF: KosDec+8Ej
		addq.l	#2,sp
		rts	

; ===========================================================================

	if Revision<2
		nop
	endc	

; =============== S U B	R O U T	I N E =======================================


sub_19DC:				
		bsr.w	PalCycle_SuperSonic
		moveq	#0,d2
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		move.w	off_19F4(pc,d0.w),d0
		jmp	off_19F4(pc,d0.w)
; End of function sub_19DC

; ===========================================================================
		rts	
; ===========================================================================
off_19F4:	index offset(*)

		ptr loc_1A18	; 0 			
		ptr locret_1A16	; 1
		ptr loc_1A46	; 2
		ptr locret_1A16	; 3
		ptr loc_1A76	; 4
		ptr loc_1A76	; 5
		ptr loc_1DB6	; 6
		ptr loc_1B0C	; 7
		ptr loc_1B50	; 8
		ptr locret_1A16	; 9
		ptr loc_1B92	; $A
		ptr loc_1BC0	; $B
		ptr loc_1BEE	; $C
		ptr loc_1D16	; $D
		ptr loc_1D16	; $E
		ptr loc_1D88	; $F
		ptr loc_1DB6	; $10
; ===========================================================================

locret_1A16:				
		rts	
; ===========================================================================

loc_1A18:				
		lea	(Pal_EHZ_ARZWaterCyc).l,a0
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1A44
		move.w	#7,(v_palcycle_time).w
		move.w	(v_palcycle_num).w,d0
		addq.w	#1,(v_palcycle_num).w
		andi.w	#3,d0
		lsl.w	#3,d0
		move.l	(a0,d0.w),($FFFFFB26).w
		move.l	4(a0,d0.w),($FFFFFB3C).w

locret_1A44:				
		rts	
; ===========================================================================

loc_1A46:				
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1A74
		move.w	#2,(v_palcycle_time).w
		lea	(Pal_WoodConveyerCyc).l,a0
		move.w	(v_palcycle_num).w,d0
		subq.w	#2,(v_palcycle_num).w
		bcc.s	loc_1A68
		move.w	#6,(v_palcycle_num).w

loc_1A68:				
		lea	($FFFFFB66).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

locret_1A74:				
		rts	
; ===========================================================================

loc_1A76:				
		subq.w	#1,(v_palcycle_time).w
		bpl.s	loc_1AA6
		move.w	#$11,(v_palcycle_time).w
		lea	(Pal_MTZCyc1).l,a0
		move.w	(v_palcycle_num).w,d0
		addq.w	#2,(v_palcycle_num).w
		cmpi.w	#$C,(v_palcycle_num).w
		bcs.s	loc_1A9E
		move.w	#0,(v_palcycle_num).w

loc_1A9E:				
		lea	($FFFFFB4A).w,a1
		move.w	(a0,d0.w),(a1)

loc_1AA6:				
		subq.w	#1,(v_palcycle_time2).w
		bpl.s	loc_1ADA
		move.w	#2,(v_palcycle_time2).w
		lea	(Pal_MTZCyc2).l,a0
		move.w	(v_palcycle_num2).w,d0
		addq.w	#2,(v_palcycle_num2).w
		cmpi.w	#6,(v_palcycle_num2).w
		bcs.s	loc_1ACE
		move.w	#0,(v_palcycle_num2).w

loc_1ACE:				
		lea	($FFFFFB42).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)

loc_1ADA:				
		subq.w	#1,(v_palcycle_time3).w
		bpl.s	locret_1B0A
		move.w	#9,(v_palcycle_time3).w
		lea	(Pal_MTZCyc3).l,a0
		move.w	(v_palcycle_num3).w,d0
		addq.w	#2,(v_palcycle_num3).w
		cmpi.w	#$14,(v_palcycle_num3).w
		bcs.s	loc_1B02
		move.w	#0,(v_palcycle_num3).w

loc_1B02:				
		lea	($FFFFFB5E).w,a1
		move.w	(a0,d0.w),(a1)

locret_1B0A:				
		rts	
; ===========================================================================

loc_1B0C:				
		lea	(Pal_HTZLavaCyc).l,a0
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1B3E
		move.w	#0,(v_palcycle_time).w
		move.w	(v_palcycle_num).w,d0
		addq.w	#1,(v_palcycle_num).w
		andi.w	#$F,d0
		move.b	byte_1B40(pc,d0.w),($FFFFF635).w
		lsl.w	#3,d0
		move.l	(a0,d0.w),($FFFFFB26).w
		move.l	4(a0,d0.w),($FFFFFB3C).w

locret_1B3E:				
		rts	
; ===========================================================================
byte_1B40:	dc.b  $B		; 0
		dc.b  $B		; 1
		dc.b  $B		; 2
		dc.b  $A		; 3
		dc.b   8		; 4
		dc.b  $A		; 5
		dc.b  $B		; 6
		dc.b  $B		; 7
		dc.b  $B		; 8
		dc.b  $B		; 9
		dc.b  $D		; 10
		dc.b  $F		; 11
		dc.b  $D		; 12
		dc.b  $B		; 13
		dc.b  $B		; 14
		dc.b  $B		; 15
; ===========================================================================

loc_1B50:				
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1B90
		move.w	#4,(v_palcycle_time).w
		lea	(Pal_HPZWaterCyc).l,a0
		move.w	(v_palcycle_num).w,d0
		subq.w	#2,(v_palcycle_num).w
		bcc.s	loc_1B72
		move.w	#6,(v_palcycle_num).w

loc_1B72:				
		lea	($FFFFFB72).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		lea	(Pal_HPZUnderwaterCyc).l,a0
		lea	($FFFFF0F2).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

locret_1B90:				
		rts	
; ===========================================================================

loc_1B92:				
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1BBE
		move.w	#7,(v_palcycle_time).w
		lea	(Pal_OOZOilCyc).l,a0
		move.w	(v_palcycle_num).w,d0
		addq.w	#2,(v_palcycle_num).w
		andi.w	#6,(v_palcycle_num).w
		lea	($FFFFFB54).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

locret_1BBE:				
		rts	
; ===========================================================================

loc_1BC0:				
		tst.b	(v_current_boss).w
		bne.s	locret_1BEC
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1BEC
		move.w	#1,(v_palcycle_time).w
		lea	(Pal_MCZLanternCyc).l,a0
		move.w	(v_palcycle_num).w,d0
		addq.w	#2,(v_palcycle_num).w
		andi.w	#6,(v_palcycle_num).w
		move.w	(a0,d0.w),($FFFFFB36).w

locret_1BEC:				
					
		rts	
; ===========================================================================
; PalCycle_CNZ:
loc_1BEE:				
		subq.w	#1,(v_palcycle_time).w
		bpl.w	loc_1C8C
		move.w	#7,(v_palcycle_time).w
		lea	(Pal_CNZCyc1_2).l,a0
		move.w	(v_palcycle_num).w,d0
		addq.w	#2,(v_palcycle_num).w
		cmpi.w	#6,(v_palcycle_num).w
		bcs.s	loc_1C18
		move.w	#0,(v_palcycle_num).w

loc_1C18:				
		lea	(a0,d0.w),a0
		lea	($FFFFFB00).w,a1
		_move.w	0(a0),$4A(a1)
		move.w	6(a0),$4C(a1)
		move.w	$C(a0),$4E(a1)
		move.w	$12(a0),$56(a1)
		move.w	$18(a0),$58(a1)
		move.w	$1E(a0),$5A(a1)
		lea	(Pal_CNZCyc3).l,a0
		lea	(a0,d0.w),a0
		_move.w	0(a0),$64(a1)
		move.w	6(a0),$66(a1)
		move.w	$C(a0),$68(a1)
		lea	(Pal_CNZCyc4).l,a0
		move.w	(v_palcycle_num_cnz).w,d0
		addq.w	#2,(v_palcycle_num_cnz).w
		cmpi.w	#$24,(v_palcycle_num_cnz).w ; '$'
		bcs.s	loc_1C7C
		move.w	#0,(v_palcycle_num_cnz).w

loc_1C7C:				
		lea	($FFFFFB72).w,a1
		move.w	4(a0,d0.w),(a1)+
		move.w	2(a0,d0.w),(a1)+
		move.w	(a0,d0.w),(a1)+

loc_1C8C:				
		tst.b	(v_current_boss).w
		beq.w	locret_1D14
		subq.w	#1,(v_palcycle_time2).w
		bpl.w	locret_1D14
		move.w	#3,(v_palcycle_time2).w
		move.w	(v_palcycle_num2).w,d0
		addq.w	#2,(v_palcycle_num2).w
		cmpi.w	#6,(v_palcycle_num2).w
		bcs.s	loc_1CB8
		move.w	#0,(v_palcycle_num2).w

loc_1CB8:				
		lea	(Pal_CNZBossCyc1).l,a0
		lea	(a0,d0.w),a0
		lea	($FFFFFB00).w,a1
		_move.w	0(a0),$24(a1)
		move.w	6(a0),$26(a1)
		move.w	$C(a0),$28(a1)
		lea	(Pal_CNZBossCyc2).l,a0
		move.w	(v_palcycle_num3).w,d0
		addq.w	#2,(v_palcycle_num3).w
		cmpi.w	#$14,(v_palcycle_num3).w
		bcs.s	loc_1CF4
		move.w	#0,(v_palcycle_num3).w

loc_1CF4:				
		move.w	(a0,d0.w),$3C(a1)
		lea	(Pal_CNZBossCyc3).l,a0
		move.w	(v_palcycle_num2_cnz).w,d0
		addq.w	#2,(v_palcycle_num2_cnz).w
		andi.w	#$E,(v_palcycle_num2_cnz).w
		move.w	(a0,d0.w),$3E(a1)

locret_1D14:				
					
		rts	
; ===========================================================================

loc_1D16:				
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1D86
		move.w	#7,(v_palcycle_time).w
		lea	(Pal_CPZCyc1).l,a0
		move.w	(v_palcycle_num).w,d0
		addq.w	#6,(v_palcycle_num).w
		cmpi.w	#$36,(v_palcycle_num).w ; '6'
		bcs.s	loc_1D3E
		move.w	#0,(v_palcycle_num).w

loc_1D3E:				
		lea	($FFFFFB78).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)
		lea	(Pal_CPZCyc2).l,a0
		move.w	(v_palcycle_num2).w,d0
		addq.w	#2,(v_palcycle_num2).w
		cmpi.w	#$2A,(v_palcycle_num2).w ; '*'
		bcs.s	loc_1D66
		move.w	#0,(v_palcycle_num2).w

loc_1D66:				
		move.w	(a0,d0.w),($FFFFFB7E).w
		lea	(Pal_CPZCyc3).l,a0
		move.w	(v_palcycle_num3).w,d0
		addq.w	#2,(v_palcycle_num3).w
		andi.w	#$1E,(v_palcycle_num3).w
		move.w	(a0,d0.w),($FFFFFB5E).w

locret_1D86:				
		rts	
; ===========================================================================

loc_1D88:				
		lea	(Pal_EHZ_ARZWaterCyc).l,a0
		subq.w	#1,(v_palcycle_time).w
		bpl.s	locret_1DB4
		move.w	#5,(v_palcycle_time).w
		move.w	(v_palcycle_num).w,d0
		addq.w	#1,(v_palcycle_num).w
		andi.w	#3,d0
		lsl.w	#3,d0
		lea	($FFFFFB44).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

locret_1DB4:				
		rts	
; ===========================================================================

loc_1DB6:				
		subq.w	#1,(v_palcycle_time).w
		bpl.s	loc_1DFC
		move.w	#1,(v_palcycle_time).w
		lea	(Pal_WFZFireCyc).l,a0
		tst.b	(f_wfz_scz_fire_toggle).w
		beq.s	loc_1DDA
		move.w	#5,(v_palcycle_time).w
		lea	(Pal_WFZConveyerCyc).l,a0

loc_1DDA:				
		move.w	(v_palcycle_num).w,d0
		addq.w	#8,(v_palcycle_num).w
		cmpi.w	#$20,(v_palcycle_num).w ; ' '
		bcs.s	loc_1DF0
		move.w	#0,(v_palcycle_num).w

loc_1DF0:				
		lea	($FFFFFB4E).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)

loc_1DFC:				
		subq.w	#1,(v_palcycle_time2).w
		bpl.s	loc_1E2A
		move.w	#3,(v_palcycle_time2).w
		lea	(Pal_WFZCyc1).l,a0
		move.w	(v_palcycle_num2).w,d0
		addq.w	#2,(v_palcycle_num2).w
		cmpi.w	#$44,(v_palcycle_num2).w ; 'D'
		bcs.s	loc_1E24
		move.w	#0,(v_palcycle_num2).w

loc_1E24:				
		move.w	(a0,d0.w),($FFFFFB5C).w

loc_1E2A:				
		subq.w	#1,(v_palcycle_time3).w
		bpl.s	locret_1E58
		move.w	#5,(v_palcycle_time3).w
		lea	(Pal_WFZCyc2).l,a0
		move.w	(v_palcycle_num3).w,d0
		addq.w	#2,(v_palcycle_num3).w
		cmpi.w	#$18,(v_palcycle_num3).w
		bcs.s	loc_1E52
		move.w	#0,(v_palcycle_num3).w

loc_1E52:				
		move.w	(a0,d0.w),($FFFFFB5E).w

locret_1E58:				
		rts	
; ===========================================================================
; ---------------------------------------------------------------------------
; Palette data & routines
; ---------------------------------------------------------------------------
		incfile Pal_S1TitleCyc	; word_1E5A: Pal_S1TitleCyc:
		incfile Pal_EHZ_ARZWaterCyc	; word_1E7A: CyclingPal_EHZ_ARZ_Water:
		incfile Pal_HTZLavaCyc	; word_1E9A: CyclingPal_Lava:
		incfile	Pal_WoodConveyerCyc	; word_1F1A: CyclingPal_WoodConveyor:
		incfile	Pal_MTZCyc1	; byte_1F2A: CyclingPal_MTZ1:
		incfile Pal_MTZCyc2	; word_1F36: CyclingPal_MTZ2:
		incfile	Pal_MTZCyc3	; word_1F42: CyclingPal_MTZ3:
		incfile Pal_HPZWaterCyc	; word_1F56: CyclingPal_HPZWater:
		incfile Pal_HPZUnderwaterCyc	; word_1F66: CyclingPal_HPZUnderwater:
		incfile	Pal_OOZOilCyc	; word_1F76: CyclingPal_Oil:
		incfile	Pal_MCZLanternCyc	; word_1F86: CyclingPal_Lantern:
		incfile	Pal_CNZCyc1_2	; word_1F8E: CyclingPal_CNZ1:Cycle 3
		incfile	Pal_CNZCyc3	; word_1FB2: CyclingPal_CNZ3:
		incfile	Pal_CNZCyc4	; word_1FC4: CyclingPal_CNZ4:
		incfile	Pal_CNZBossCyc1	; word_1FEC: CyclingPal_CNZ1_B:
		incfile	Pal_CNZBossCyc2	; word_1FFE: CyclingPal_CNZ2_B:
		incfile	Pal_CNZBossCyc3	; word_2012: CyclingPal_CNZ3_B:
		incfile	Pal_CPZCyc1	; word_2022: CyclingPal_CPZ1:
		incfile	Pal_CPZCyc2	; word_2058: CyclingPal_CPZ2:
		incfile	Pal_CPZCyc3	; word_2082: CyclingPal_CPZ3:
		incfile	Pal_WFZFireCyc	; word_20A2: CyclingPal_WFZFire:
		incfile	Pal_WFZConveyerCyc	; word_20C2: CyclingPal_WFZBelt:
		incfile	Pal_WFZCyc1	; word_20E2: CyclingPal_CPZ4:
		incfile	Pal_WFZCyc2	; word_2126: CyclingPal_WFZ2:

; =============== S U B	R O U T	I N E =======================================

; sub_213E:
PalCycle_SuperSonic:				
		move.b	(v_super_sonic_palette).w,d0
		beq.s	.return 		; if Sonic isn't super, exit
		bmi.w	.normal			; if fade-in id done, branch
		subq.b	#1,d0
		bne.s	.revert			; branch for values greater than 1
		
		; fade from Sonic's to Super Sonic's palette
		; run frame timer
		subq.b	#1,(v_palette_timer).w
		bpl.s	.return
		move.b	#3,(v_palette_timer).w
		
		; increment palette frame and update Sonic's palette		
		lea	(Pal_SS_TransformationCyc).l,a0
		move.w	(v_palette_frame).w,d0
		addq.w	#8,(v_palette_frame).w			; 1 palette entry = 1 word, Sonic uses 4 shades of blue
		cmpi.w	#$30,(v_palette_frame).w		; has palette cycle reached the 6th frame?
		bcs.s	.notsixth						; if not, branch
		move.b	#-1,(v_super_sonic_palette).w	; mark fade-in as done
		move.b	#0,(v_ost_maincharacter+ost_obj_control).w	; restore Sonic's movement

	.notsixth:
		lea	(v_pal_dry+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
;	if FixBugs	
;		lea	(Pal_SS_CPZUWTransformationCyc).l,a0
;		cmpi.b	#chemical_plant_zone,(Current_Zone).w	; is it CPZ?
;		beq.s	+										; if so, branch
;		cmpi.b	#aquatic_ruin_zone,(Current_Zone).w		; is it ARZ?
;		bne.s	.return									; if so, branch
;		lea	(Pal_SS_ARZUWTransformationCyc).l,a0
;+		
;		lea	(v_pal_water+4).w,a1
;		move.l	(a0,d0.w),(a1)+
;		move.l	4(a0,d0.w),(a1)
;	else
	; The fade in for Sonic's underwater palette is missing.
	; Because of this, Super Sonic's transformation is incorrect
	; when underwater.
;	endc
	.return:
		rts	
; ===========================================================================

	.revert:
		subq.b	#1,(v_palette_timer).w
		bpl.s	.return
		move.b	#3,(v_palette_timer).w
		lea	(Pal_SS_TransformationCyc).l,a0
		move.w	(v_palette_frame).w,d0
		subq.w	#8,(v_palette_frame).w
		bcc.s	.loc_21B0
		move.b	#0,(v_palette_frame).w
		move.b	#0,(v_super_sonic_palette).w

.loc_21B0:
		lea	($FFFFFB04).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		lea	(Pal_SS_CPZUWTransformationCyc).l,a0
		cmpi.b	#id_CPZ,(v_zone).w
		beq.s	.loc_21D8
		cmpi.b	#$F,(v_zone).w
		bne.s	.return
		lea	(Pal_SS_ARZUWTransformationCyc).l,a0

.loc_21D8:
		lea	($FFFFF084).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		rts	
; ===========================================================================

.normal:				; CODE XREF: PalCycle_SuperSonic+6j
		subq.b	#1,(v_palette_timer).w
		bpl.s	.return
		move.b	#7,(v_palette_timer).w
		lea	(Pal_SS_TransformationCyc).l,a0
		move.w	(v_palette_frame).w,d0
		addq.w	#8,(v_palette_frame).w
		cmpi.w	#$78,(v_palette_frame).w ; 'x'
		bcs.s	.loc_220E
		move.w	#$30,(v_palette_frame).w ; '0'

.loc_220E:				; CODE XREF: PalCycle_SuperSonic+C8j
		lea	($FFFFFB04).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		lea	(Pal_SS_CPZUWTransformationCyc).l,a0
		cmpi.b	#id_CPZ,(v_zone).w
		beq.s	.loc_2238
		cmpi.b	#$F,(v_zone).w
		bne.w	.return
		lea	(Pal_SS_ARZUWTransformationCyc).l,a0

.loc_2238:				; CODE XREF: PalCycle_SuperSonic+E8j
		lea	($FFFFF084).w,a1
		move.l	(a0,d0.w),(a1)+
		move.l	4(a0,d0.w),(a1)
		rts	
; End of function PalCycle_SuperSonic

; ===========================================================================

		incfile	Pal_SS_TransformationCyc	; Pal_2246: CyclingPal_SSTransformation:
		incfile	Pal_SS_CPZUWTransformationCyc	; Pal_22C6: CyclingPal_CPZUWTransformation:
		incfile	Pal_SS_ARZUWTransformationCyc	; Pal_2346: CyclingPal_ARZUWTransformation:

; =============== S U B	R O U T	I N E =======================================


sub_23C6:				
					
		move.w	#$3F,(v_palfade_start).w ; '?'
		moveq	#0,d0
		lea	($FFFFFB00).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		moveq	#0,d1
		move.b	(v_palfade_size).w,d0

loc_23DE:				
		move.w	d1,(a0)+
		dbf	d0,loc_23DE
		move.w	#$15,d4

loc_23E8:				
		move.b	#$12,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.s	sub_23FE
		bsr.w	RunPLC
		dbf	d4,loc_23E8
		rts	
; End of function sub_23C6


; =============== S U B	R O U T	I N E =======================================


sub_23FE:				
		moveq	#0,d0
		lea	(v_pal_dry).w,a0
		lea	(v_pal_dry_next).w,a1
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

loc_2414:				
		bsr.s	sub_243E
		dbf	d0,loc_2414
		tst.b	(f_water_flag).w
		beq.s	locret_243C
		moveq	#0,d0
		lea	(v_pal_water).w,a0
		lea	(v_pal_water_next).w,a1
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

loc_2436:				
		bsr.s	sub_243E
		dbf	d0,loc_2436

locret_243C:				
		rts	
; End of function sub_23FE


; =============== S U B	R O U T	I N E =======================================


sub_243E:				
					; DATA XREF: ...
		move.w	(a1)+,d2
		move.w	(a0),d3
		cmp.w	d2,d3
		beq.s	loc_2466
		move.w	d3,d1
		addi.w	#$200,d1
		cmp.w	d2,d1
		bhi.s	loc_2454
		move.w	d1,(a0)+
		rts	
; ===========================================================================

loc_2454:				
		move.w	d3,d1
		addi.w	#$20,d1	; ' '
		cmp.w	d2,d1
		bhi.s	loc_2462
		move.w	d1,(a0)+
		rts	
; ===========================================================================

loc_2462:				
		addq.w	#2,(a0)+
		rts	
; ===========================================================================

loc_2466:				
		addq.w	#2,a0
		rts	
; End of function sub_243E


; =============== S U B	R O U T	I N E =======================================


PaletteFadeOut:				
					
		move.w	#$3F,(v_palfade_start).w ; '?'
		move.w	#$15,d4

loc_2474:				
		move.b	#$12,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.s	sub_248A
		bsr.w	RunPLC
		dbf	d4,loc_2474
		rts	
; End of function PaletteFadeOut


; =============== S U B	R O U T	I N E =======================================


sub_248A:				
					
		moveq	#0,d0
		lea	($FFFFFB00).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

loc_249A:				
		bsr.s	sub_24B8
		dbf	d0,loc_249A
		moveq	#0,d0
		lea	(v_pal_water).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

loc_24B0:				
		bsr.s	sub_24B8
		dbf	d0,loc_24B0
		rts	
; End of function sub_248A


; =============== S U B	R O U T	I N E =======================================


sub_24B8:				
		move.w	(a0),d2
		beq.s	loc_24E4
		move.w	d2,d1
		andi.w	#$E,d1
		beq.s	loc_24C8
		subq.w	#2,(a0)+
		rts	
; ===========================================================================

loc_24C8:				
		move.w	d2,d1
		andi.w	#$E0,d1	
		beq.s	loc_24D6
		subi.w	#$20,(a0)+ ; ' '
		rts	
; ===========================================================================

loc_24D6:				
		move.w	d2,d1
		andi.w	#$E00,d1
		beq.s	loc_24E4
		subi.w	#$200,(a0)+
		rts	
; ===========================================================================

loc_24E4:				
		addq.w	#2,a0
		rts	
; End of function sub_24B8


; =============== S U B	R O U T	I N E =======================================


sub_24E8:				
		move.w	#$3F,(v_palfade_start).w ; '?'
		moveq	#0,d0
		lea	($FFFFFB00).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.w	#$EEE,d1
		move.b	(v_palfade_size).w,d0

loc_2502:				
		move.w	d1,(a0)+
		dbf	d0,loc_2502
		move.w	#$15,d4

loc_250C:				
		move.b	#$12,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.s	sub_2522
		bsr.w	RunPLC
		dbf	d4,loc_250C
		rts	
; End of function sub_24E8


; =============== S U B	R O U T	I N E =======================================


sub_2522:				
		moveq	#0,d0
		lea	($FFFFFB00).w,a0
		lea	(v_pal_dry_next).w,a1
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

loc_2538:				
		bsr.s	sub_2562
		dbf	d0,loc_2538
		tst.b	(f_water_flag).w
		beq.s	locret_2560
		moveq	#0,d0
		lea	(v_pal_water).w,a0
		lea	(v_pal_water_next).w,a1
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(v_palfade_size).w,d0

loc_255A:				
		bsr.s	sub_2562
		dbf	d0,loc_255A

locret_2560:				
		rts	
; End of function sub_2522


; =============== S U B	R O U T	I N E =======================================


sub_2562:				
		move.w	(a1)+,d2
		move.w	(a0),d3
		cmp.w	d2,d3
		beq.s	loc_258E
		move.w	d3,d1
		subi.w	#$200,d1
		bcs.s	loc_257A
		cmp.w	d2,d1
		bcs.s	loc_257A
		move.w	d1,(a0)+
		rts	
; ===========================================================================

loc_257A:				
		move.w	d3,d1
		subi.w	#$20,d1	; ' '
		bcs.s	loc_258A
		cmp.w	d2,d1
		bcs.s	loc_258A
		move.w	d1,(a0)+
		rts	
; ===========================================================================

loc_258A:				
		subq.w	#2,(a0)+
		rts	
; ===========================================================================

loc_258E:				
		addq.w	#2,a0
		rts	
; End of function sub_2562


; =============== S U B	R O U T	I N E =======================================


sub_2592:				
					
		move.w	#$3F,(v_palfade_start).w ; '?'
		move.w	#$15,d4

loc_259C:				
		move.b	#$12,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.s	sub_25B2
		bsr.w	RunPLC
		dbf	d4,loc_259C
		rts	
; End of function sub_2592


; =============== S U B	R O U T	I N E =======================================


sub_25B2:				
		moveq	#0,d0
		lea	($FFFFFB00).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

loc_25C2:				
		bsr.s	sub_25E0
		dbf	d0,loc_25C2
		moveq	#0,d0
		lea	(v_pal_water).w,a0
		move.b	(v_palfade_start).w,d0
		adda.w	d0,a0
		move.b	(v_palfade_size).w,d0

loc_25D8:				
		bsr.s	sub_25E0
		dbf	d0,loc_25D8
		rts	
; End of function sub_25B2


; =============== S U B	R O U T	I N E =======================================


sub_25E0:				
		move.w	(a0),d2
		cmpi.w	#$EEE,d2
		beq.s	loc_261C
		move.w	d2,d1
		andi.w	#$E,d1
		cmpi.w	#$E,d1
		beq.s	loc_25F8
		addq.w	#2,(a0)+
		rts	
; ===========================================================================

loc_25F8:				
		move.w	d2,d1
		andi.w	#$E0,d1	
		cmpi.w	#$E0,d1	
		beq.s	loc_260A
		addi.w	#$20,(a0)+ ; ' '
		rts	
; ===========================================================================

loc_260A:				
		move.w	d2,d1
		andi.w	#$E00,d1
		cmpi.w	#$E00,d1
		beq.s	loc_261C
		addi.w	#$200,(a0)+
		rts	
; ===========================================================================

loc_261C:				
		addq.w	#2,a0
		rts	
; End of function sub_25E0


; Sonic 1 leftover - dead code/data for old SEGA screen:

; ===========================================================================
		tst.b	($FFFFF635).w
		bne.s	loc_2680
		lea	(v_pal_dry_line2).w,a1
		lea	(Pal_S1_Sega1).l,a0
		moveq	#5,d1
		move.w	(v_palcycle_num).w,d0

loc_2636:				
		bpl.s	loc_2640
		addq.w	#2,a0
		subq.w	#1,d1
		addq.w	#2,d0
		bra.s	loc_2636
; ===========================================================================

loc_2640:				
					
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	loc_264A
		addq.w	#2,d0

loc_264A:				
		cmpi.w	#$60,d0	; '`'
		bcc.s	loc_2654
		move.w	(a0)+,(a1,d0.w)

loc_2654:				
		addq.w	#2,d0
		dbf	d1,loc_2640
		move.w	(v_palcycle_num).w,d0
		addq.w	#2,d0
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	loc_266A
		addq.w	#2,d0

loc_266A:				
		cmpi.w	#$64,d0	; 'd'
		blt.s	loc_2678
		move.w	#$401,(v_palcycle_time).w
		moveq	#-$C,d0

loc_2678:				
		move.w	d0,(v_palcycle_num).w
		moveq	#1,d0
		rts	
; ===========================================================================

loc_2680:				
		subq.b	#1,(v_palcycle_time).w
		bpl.s	loc_26D2
		move.b	#4,(v_palcycle_time).w
		move.w	(v_palcycle_num).w,d0
		addi.w	#$C,d0
		cmpi.w	#$30,d0	; '0'
		bcs.s	loc_269E
		moveq	#0,d0
		rts	
; ===========================================================================

loc_269E:				
		move.w	d0,(v_palcycle_num).w
		lea	(Pal_S1_Sega2).l,a0
		lea	(a0,d0.w),a0
		lea	($FFFFFB04).w,a1
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.w	(a0)+,(a1)
		lea	(v_pal_dry_line2).w,a1
		moveq	#0,d0
		moveq	#$2C,d1	; ','

loc_26BE:				
		move.w	d0,d2
		andi.w	#$1E,d2
		bne.s	loc_26C8
		addq.w	#2,d0

loc_26C8:				
		move.w	(a0),(a1,d0.w)
		addq.w	#2,d0
		dbf	d1,loc_26BE

loc_26D2:				
		moveq	#1,d0
		rts	
; ===========================================================================

		incfile	Pal_S1_Sega1
		incfile	Pal_S1_Sega2
		
; end of dead code/data

; ---------------------------------------------------------------------------
; Subroutine to load palette that will be used after fading in

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_2712: PalLoad1: PalLoad_ForFade:
PalLoad_Next:						
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		adda.w	#v_pal_dry_next-v_pal_dry,a3		; jump to next palette RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	


; ---------------------------------------------------------------------------
; Subroutine to load palette immediately

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_272E: PalLoad2:
PalLoad_Now:				
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	

; ---------------------------------------------------------------------------
; Subroutines to load underwater palette immediately

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_2746: PalLoad3_Water: PalLoad_Water_Now:
PalLoad_Water:				
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		suba.l	#v_pal_dry-v_pal_water,a3			; jump to underwater palette RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	

; ---------------------------------------------------------------------------
; Subroutines to load underwater palette that will be used after fading in

; input:
;	d0 = index number for palette

;	uses d0, d7, a1, a2, a3
; ---------------------------------------------------------------------------

; sub_2764: PalLoad4_Water: PalLoad_Water_ForFade:
PalLoad_Water_Next:				
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		movea.l	(a1)+,a2				; get palette data address
		movea.w	(a1)+,a3				; get target RAM address
		suba.l	#v_pal_dry-v_pal_water_next,a3		; jump to next underwater palette RAM address
		move.w	(a1)+,d7				; get length of palette

	.loop:				
		move.l	(a2)+,(a3)+				; move data to RAM
		dbf	d7,.loop
		rts	

;----------------------------------------------------------------------------
;Palette Pointers
;
;This structure	defines	the palette to use for each level. One entry per level.
;
;0x00 -	0x04: Pointer to palette
;0x04 -	0x06: Location in ram to load palette into
;0x06 -	0x08: Size of palette in (bytes	/ 4)
;----------------------------------------------------------------------------

palp:	macro paladdress,secondpaladdress,alias,ramaddress
	
	ifarg \alias
		id_\alias:	equ (offset(*)-PalPointers)/8 ; create alternate ID constant for duplicate pointers (used in empty/unused level load table entries)
	else	
		id_\paladdress:	equ (offset(*)-PalPointers)/8
	endc	
		dc.l \paladdress
		
	ifarg \secondpaladdress
		dc.w \ramaddress,(sizeof_\paladdress\+sizeof_\secondpaladdress\)/4-1	
	else
		dc.w \ramaddress,sizeof_\paladdress\/4-1
	endc	
	endm	
		
		
PalPointers:	
		palp Pal_Sega,,,v_pal_dry_line1
		palp Pal_Title,,,v_pal_dry_line2
		palp Pal_MenuB,,,v_pal_dry_line1
		palp Pal_Sonic_Miles_BG1,Pal_Sonic_Miles_BG2,,v_pal_dry_line1
		
		palp Pal_EHZ,,,v_pal_dry_line2
		palp Pal_EHZ,,Pal_EHZ2,v_pal_dry_line2
		palp Pal_WZ,,,v_pal_dry_line2
		palp Pal_EHZ,,Pal_EHZ3,v_pal_dry_line2
		palp Pal_MTZ,,,v_pal_dry_line2
		palp Pal_MTZ,,Pal_MTZ2,v_pal_dry_line2
		palp Pal_WFZ,,,v_pal_dry_line2	
		palp Pal_HTZ,,,v_pal_dry_line2
		palp Pal_HPZ,,,v_pal_dry_line2
		palp Pal_EHZ,,Pal_EHZ4,v_pal_dry_line2
		palp Pal_OOZ,,,v_pal_dry_line2
		palp Pal_MCZ,,,v_pal_dry_line2
		palp Pal_CNZ,,,v_pal_dry_line2
		palp Pal_CPZ,,,v_pal_dry_line2		
		palp Pal_DEZ,,,v_pal_dry_line2
		palp Pal_ARZ,,,v_pal_dry_line2
		palp Pal_SCZ,,,v_pal_dry_line2
		
		palp Pal_HPZ_U,,,v_pal_dry_line1
		palp Pal_CPZ_U,,,v_pal_dry_line1
		palp Pal_ARZ_U,,,v_pal_dry_line1
	
		palp Pal_SS,,,v_pal_dry_line1
		palp Pal_MCZ_B,,,v_pal_dry_line2
		palp Pal_CNZ_B,,,v_pal_dry_line2
		palp Pal_SS1,,,v_pal_dry_line4
		palp Pal_SS2,,,v_pal_dry_line4
		palp Pal_SS3,,,v_pal_dry_line4
		palp Pal_SS4,,,v_pal_dry_line4
		palp Pal_SS5,,,v_pal_dry_line4
		palp Pal_SS6,,,v_pal_dry_line4
		palp Pal_SS7,,,v_pal_dry_line4
		
		palp Pal_SS1_2p,,,v_pal_dry_line4
		palp Pal_SS2_2p,,,v_pal_dry_line4
		palp Pal_SS3_2p,,,v_pal_dry_line4
		
		palp Pal_OOZ_B,,,v_pal_dry_line2
		palp Pal_Menu,,,v_pal_dry_line1
		palp Pal_Result,,,v_pal_dry_line1
		


		incfile	Pal_Sega
		incfile	Pal_Title
		incfile	Pal_MenuB
		incfile	Pal_Sonic_Miles_BG1
		incfile	Pal_Sonic_Miles_BG2
		incfile	Pal_EHZ
		incfile	Pal_WZ
		incfile	Pal_MTZ
		incfile	Pal_WFZ
		incfile	Pal_HTZ
		incfile	Pal_HPZ
		incfile	Pal_HPZ_U
		incfile	Pal_OOZ
		incfile	Pal_MCZ
		incfile	Pal_CNZ
		incfile	Pal_CPZ
		incfile	Pal_CPZ_U
		incfile	Pal_DEZ
		incfile	Pal_ARZ
		incfile	Pal_ARZ_U
		incfile	Pal_SCZ
		incfile	Pal_MCZ_B
		incfile	Pal_CNZ_B
		incfile	Pal_OOZ_B
		incfile	Pal_Menu
		incfile	Pal_SS
		incfile	Pal_SS1
		incfile	Pal_SS2
		incfile	Pal_SS3
		incfile	Pal_SS4
		incfile	Pal_SS5
		incfile	Pal_SS6
		incfile	Pal_SS7
		incfile	Pal_SS1_2p
		incfile	Pal_SS2_2p
		incfile	Pal_SS3_2p
		incfile	Pal_Result
		
; ===========================================================================
	if Revision<2
		nop	
	endc
; =============== S U B	R O U T	I N E =======================================
WaitForVBlank:				
		move	#$2300,sr

	.wait:				
		tst.b	(v_vblank_routine).w ; has VBlank routine finished?
		bne.s	.wait				 ; if not, branch
		rts	


; =============== S U B	R O U T	I N E =======================================
; ---------------------------------------------------------------------------
; Subroutine to generate a pseudo-random number

; output:
;	d0 = pseudo-random number  (RNG & $FFFF0000) | ((RNG*41 & $FFFF) + ((RNG*41 & $FFFF0000) >> 16))
;	d1 = d0 with high/low words swapped
;	RNG = ((RNG*41 + ((RNG*41 & $FFFF) << 16)) & $FFFF0000) | (RNG*41 & $FFFF)
; ---------------------------------------------------------------------------
; sub_3390:
RandomNumber:				
		move.l	(v_random).w,d1
		bne.s	.scramble				; if d1 is not 0, branch
		move.l	#$2A6D365A,d1			; if d1 is 0, use this seed number

	.scramble:
		; set the high word of d0 to be the high word of the RNG
		; and multiply the RNG by 41			
		move.l	d1,d0
		asl.l	#2,d1
		add.l	d0,d1
		asl.l	#3,d1
		add.l	d0,d1
		
		; add the low word of the RNG to the high word of the RNG
		; and set the low word of d0 to be the result
		move.w	d1,d0
		swap	d1
		add.w	d1,d0
		move.w	d0,d1
		swap	d1
		
		move.l	d1,(v_random).w
		rts	


; =============== S U B	R O U T	I N E =======================================
; ---------------------------------------------------------------------------
; Subroutine to convert an angle (0 to $FF) to sine and cosine (-$100 to $100)

; input:
;	d0 = angle (360 degrees == 256)

; output:
;	d0 = sine
;	d1 = cosine
; ---------------------------------------------------------------------------
; sub_33B6:
CalcSine:				
		andi.w	#$FF,d0						; read low byte of angle only
		add.w	d0,d0
		addi.w	#$80,d0						; start 90 degrees later for cosine
		move.w	Sine_Data(pc,d0.w),d1		; get cosine
		subi.w	#$80,d0						; start at 0 for sine
		move.w	Sine_Data(pc,d0.w),d0		; get sine
		rts	

; ---------------------------------------------------------------------------
; word_33CE:
Sine_Data:	incbin "misc/Sine & Cosine Waves.bin"
			incbin "misc/Sine & Cosine Waves.bin",,$80 ; First $80 bytes are duplicated at the end of the table!

; ---------------------------------------------------------------------------

; sub_364E:
CalcAngle:				
		pushr	d3-d4
		moveq	#0,d3
		moveq	#0,d4
		move.w	d1,d3					; d3 = x distance
		move.w	d2,d4					; d4 = y distance
		or.w	d3,d4
		beq.s	CalcAngle_Both0			; branch if both are 0
		move.w	d2,d4
		tst.w	d3
		bpl.w	.x_positive				; branch if x is positive
		neg.w	d3						; force x positive

	.x_positive:				
		tst.w	d4
		bpl.w	.y_positive				; branch if y is positive
		neg.w	d4						; force y positive

	.y_positive:				
		cmp.w	d3,d4
		bcc.w	.y_larger				; branch if y is larger or same
		lsl.l	#8,d4
		divu.w	d3,d4					; d4 = (y*$100)/x
		moveq	#0,d0
		move.b	Angle_Data(pc,d4.w),d0
		bra.s	CalcAngle_ChkRotation
; ===========================================================================

	.y_larger:				
		lsl.l	#8,d3
		divu.w	d4,d3
		moveq	#$40,d0					; d3 = (x*$100)/y
		sub.b	Angle_Data(pc,d3.w),d0

	CalcAngle_ChkRotation:				
		tst.w	d1
		bpl.w	.x_positive				; branch if x is positive
		neg.w	d0
		addi.w	#$80,d0

	.x_positive:				
		tst.w	d2
		bpl.w	.y_positive				; branch if x is positive
		neg.w	d0
		addi.w	#$100,d0

	.y_positive:				
		popr	d3-d4
		rts	
; ===========================================================================
; loc_36AA:
CalcAngle_Both0:				
		move.w	#$40,d0
		popr	d3-d4
		rts	

; ===========================================================================
; byte_36B4:
Angle_Data:	incbin "misc/Angle Table.bin"
; ===========================================================================

	if Revision<2
		nop	
	endc

; ===========================================================================

GM_Sega:				
		move.b	#-3,d0
		bsr.w	PlayMusic
		bsr.w	ClearPLC
		bsr.w	PaletteFadeOut

		clear_ram misc_variables,misc_variables_end

;		lea	($FFFFF700).w,a1
;		moveq	#0,d0
;		move.w	#$3F,d1

;	loc_37D2:
;		move.l	d0,(a1)+
;		dbf	d1,loc_37D2
		
		clear_ram ost,ost_end	
		
;		lea	($FFFFB000).w,a1
;		moveq	#0,d0
;		move.w	#$7FF,d1

;	loc_37E2:				
;		move.l	d0,(a1)+
;		dbf	d1,loc_37E2
		
		
		lea	(vdp_control_port).l,a6
		move.w	#$8004,(a6)
		move.w	#$8200+(vram_sega_fg/$400),(a6) ; $8230 ; set fg nametable at $C000
		move.w	#$8400+(vram_sega_bg/$2000),(a6) ; $8405 ; set bg nametable at $A000
		move.w	#$8700,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8C81,(a6)
		move.w	#$9003,(a6)
		clr.b	(f_water_pal_full).w
		clr.w	(f_two_player).w
		disable_ints
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#$BF,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_1208
		lea	(vdp_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$941F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_384A:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_384A
		move.w	#$8F02,(a5)
		
		move.l	#$40200000,(vdp_control_port).l
		lea	(Nem_SEGA).l,a0
		bsr.w	NemDec
		
		move.l	#$50000000,(vdp_control_port).l
		lea	(Nem_IntroTrails).l,a0
		bsr.w	NemDec
		
	; This gets overwritten by the upscaled Sonic sprite. This may have
	; been used to test the Sega screen before the sprite upscaling logic
	; was added.
		move.l	#$51000000,(vdp_control_port).l
		lea	(Nem_MechaSonic).l,a0
		bsr.w	NemDec
		
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_SEGA).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000002,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	sub_396E
		
		tst.b	(v_console_region).w
		bmi.s	loc_38CE
		lea	($FFFFB080).w,a1
		move.b	#$B1,(a1)
		move.b	#$4E,$28(a1) ; 'N'

loc_38CE:				
		moveq	#0,d0
		bsr.w	PalLoad_Now
		move.w	#$FFF6,(v_palcycle_num).w
		move.w	#0,(v_palcycle_time).w
		move.w	#0,(v_segascr_vblank_sub).w
		move.w	#0,(f_segascr_paldone).w
		lea	(v_ost_sega_screen).w,a1
		move.b	#$B0,(a1)
		move.b	#$4C,$28(a1) ; 'L'
		move.w	#$F0,(v_countdown).w
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l

loc_390E:				
		move.b	#2,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	sub_3990
		jsr	BuildSprites
		tst.b	(f_segascr_paldone).w
		beq.s	loc_390E
	if ~FixBugs
	; This is a leftover from Sonic 1: ObjB0 plays the Sega sound now.
	; Normally, you'll only hear one Sega sound, but the actually tries
	; to play it twice. The only reason it doesn't is because the sound
	; queue only has room for one sound per frame. Some custom sound
	; drivers don't have this limitation, however, and the sound will
	; indeed play twice in those.	
		move.b	#-6,d0
		bsr.w	PlaySound
	endc	
		move.b	#2,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	#$B4,(v_countdown).w

loc_3940:				
		move.b	#$14,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		tst.w	(v_countdown).w
		beq.s	loc_395E
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		beq.s	loc_3940

loc_395E:				
		clr.w	(f_segascr_paldone).w
		clr.w	(v_segascr_vblank_sub).w
		move.b	#4,(v_gamemode).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_396E:				
		lea	(vdp_data_port).l,a6
		move.l	#$1000000,d4

loc_397A:				
		move.l	d0,4(a6)
		move.w	d1,d3

loc_3980:				
		move.w	(a1)+,(a6)
		dbf	d3,loc_3980
		add.l	d4,d0
		dbf	d2,loc_397A
		rts	
; End of function sub_396E

; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_3990:				
		jmp	ExecuteObjects
; End of function sub_3990

; ===========================================================================
		dc.w 0
; ===========================================================================

GM_Title:				
		move.b	#-3,d0
		bsr.w	PlayMusic
		bsr.w	ClearPLC
		bsr.w	PaletteFadeOut
	disable_ints
		lea	(vdp_control_port).l,a6
		move.w	#-$7FFC,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$6E00,(a6)
		move.w	#-$74FD,(a6)
		move.w	#-$78E0,(a6)
		clr.b	(f_water_pal_full).w
		move.w	#-$737F,(a6)
		bsr.w	sub_1208
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_39E4:				
		move.l	d0,(a1)+
		dbf	d1,loc_39E4
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_39F4:				
		move.l	d0,(a1)+
		dbf	d1,loc_39F4
		lea	($FFFFF700).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_3A04:				
		move.l	d0,(a1)+
		dbf	d1,loc_3A04
		lea	(v_camera_x_pos).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_3A14:				
		move.l	d0,(a1)+
		dbf	d1,loc_3A14
		move.l	#$60000002,(vdp_control_port).l
		lea	(Nem_CreditsFont).l,a0
		bsr.w	NemDec
		lea	(off_B2B0).l,a1
		jsr	loc_B272
		lea	(v_pal_dry_next).w,a1
		moveq	#0,d0
		move.w	#$1F,d1

loc_3A44:				
		move.l	d0,(a1)+
		dbf	d1,loc_3A44
		moveq	#3,d0
		bsr.w	PalLoad_Next
		bsr.w	sub_23C6
	disable_ints
		move.l	#$40000000,(vdp_control_port).l
		lea	(Nem_Title).l,a0
		bsr.w	NemDec
		move.l	#$6A000000,(vdp_control_port).l
		lea	(Nem_TitleSprites).l,a0
		bsr.w	NemDec
		move.l	#$7E400001,(vdp_control_port).l
		lea	(Nem_MenuJunk).l,a0
		bsr.w	NemDec
		move.l	#$40400002,(vdp_control_port).l
		lea	(Nem_Player1VS2).l,a0
		bsr.w	NemDec
		move.l	#$50000003,(vdp_control_port).l
		lea	(Nem_StandardFont).l,a0
		bsr.w	NemDec
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		move.w	#0,(v_debug_active).w
		move.w	#0,(f_demo_mode).w
		move.w	#0,(v_unknown_titlescrn).w
		move.w	#0,(v_palcycle_time).w
		move.w	#0,(f_two_player).w
		move.b	#0,(f_level_started).w
		bsr.w	PaletteFadeOut
	disable_ints
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_TitleScreen).l,a0
		move.w	#$4000,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000003,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_TitleBack).l,a0
		move.w	#$4000,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60500003,d0
		moveq	#$17,d1
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_TitleLogo).l,a0
		move.w	#-$2000,d0
		bsr.w	EniDec
		lea	($FFFF0858).l,a1
		lea	(CopyrightText).l,a2
		moveq	#$A,d6

loc_3B66:				
		move.w	(a2)+,(a1)+
		dbf	d6,loc_3B66
		lea	(v_128x128_tiles).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		lea	($FFFFFB00).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_3B8A:				
		move.l	d0,(a1)+
		dbf	d1,loc_3B8A
		moveq	#1,d0
		bsr.w	PalLoad_Next
		move.b	#0,(f_debug_enable).w
		move.w	#0,(f_two_player).w
		move.w	#$280,(v_countdown).w
		clr.w	(v_joypad_hold_actual).w
		move.b	#$E,($FFFFB040).w
		move.b	#2,($FFFFB068).w
		jsr	ExecuteObjects
		jsr	BuildSprites
		moveq	#0,d0
		bsr.w	NewPLC
		move.w	#0,(v_correct_cheat_entries).w
		move.w	#0,(v_correct_cheat_entries_2).w
		nop	
		nop	
		nop	
		nop	
		nop	
		nop	
		move.w	#4,(v_sonic_pos_tracker_num).w
		move.w	#0,(v_sonic_pos_tracker).w
		lea	(v_ehz_results_2p).w,a1
		moveq	#$B,d0

loc_3BF4:				
		move.w	#-1,(a1)+
		dbf	d0,loc_3BF4
		move.w	#-$280,(v_camera_x_pos).w
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_23C6

loc_3C14:				
					
		move.b	#4,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		bsr.w	sub_3E98
		jsr	BuildSprites
		lea	($FFFFF804).w,a1
		moveq	#0,d0
		moveq	#$4F,d6	; 'O'

loc_3C36:				
		tst.w	(a1)
		bne.s	loc_3C42
		bchg	#2,d0
		move.w	d0,2(a1)

loc_3C42:				
		addq.w	#8,a1
		dbf	d6,loc_3C36
		bsr.w	RunPLC
		bsr.w	TailsNameCheat
		tst.w	(v_countdown).w
		beq.w	loc_3D2E
		tst.b	($FFFFB06F).w
		beq.w	loc_3C14
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		beq.w	loc_3C14
		move.b	#$C,(v_gamemode).w
		move.b	#3,(v_lives).w

loc_3C7C:
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.b	d0,(v_continues).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		move.b	#-7,d0
		bsr.w	PlaySound
		moveq	#0,d0
		move.b	($FFFFFF86).w,d0
		bne.s	loc_3CF6
		moveq	#0,d0
		move.w	d0,(f_two_player_mode_copy).w
		move.w	d0,(f_two_player).w
		move.w	d0,(v_zone).w
		tst.b	(f_levelselect_cheat).w
		beq.s	loc_3CE4
		btst	#6,(v_joypad_hold_actual).w
		beq.s	loc_3CE4
		move.b	#$28,(v_gamemode).w ; '('
		rts	
; ===========================================================================

loc_3CE4:				
					
		move.w	d0,(v_special_stage).w
		move.w	d0,(f_got_emerald).w
		move.l	d0,(v_emerald_list).w
		move.l	d0,(v_emerald_list+4).w
		rts	
; ===========================================================================

loc_3CF6:				
		subq.b	#1,d0
		bne.s	loc_3D20
		moveq	#1,d1
		move.w	d1,(f_two_player_mode_copy).w
		move.w	d1,(f_two_player).w
		moveq	#0,d0
		move.w	d0,(f_got_emerald).w
		move.l	d0,(v_emerald_list).w
		move.l	d0,(v_emerald_list+4).w
		move.b	#$1C,(v_gamemode).w
		move.b	#0,(v_zone_2p).w
		rts	
; ===========================================================================

loc_3D20:				
		move.b	#$24,(v_gamemode).w ; '$'
		move.b	#0,(v_options_menu_box).w
		rts	
; ===========================================================================

loc_3D2E:				
		move.b	#-7,d0
		bsr.w	PlaySound
		move.w	(v_demo_num).w,d0
		andi.w	#7,d0
		add.w	d0,d0
		move.w	word_3DAC(pc,d0.w),d0
		move.w	d0,(v_zone).w
		addq.w	#1,(v_demo_num).w
		cmpi.w	#4,(v_demo_num).w
		bcs.s	loc_3D5A
		move.w	#0,(v_demo_num).w

loc_3D5A:				
		move.w	#1,(f_demo_mode).w
		move.b	#8,(v_gamemode).w
		cmpi.w	#id_EHZ,(v_zone).w
		bne.s	loc_3D74
		move.w	#1,(f_two_player).w

loc_3D74:				
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		rts	
; ===========================================================================
word_3DAC:
		dc.w	 0
		dc.w  $D00
		dc.w  $F00
		dc.w  $C00


; sub_3DB4:
TailsNameCheat:				
		lea	(TailsNameCheatCode).l,a0
		move.w	(v_correct_cheat_entries).w,d0
		adda.w	d0,a0
		move.b	(v_joypad_press_actual).w,d0
		andi.b	#btnUp|btnDn|btnL|btnR,d0
		beq.s	.exit
		cmp.b	(a0),d0
		bne.s	.clearcheatentries	
		addq.w	#1,(v_correct_cheat_entries).w
		tst.b	1(a0)
		bne.s	.exit
		
		; Switch the detected console's region between Japanese and
		; international. This affects the presence of trademark symbols, and
		; causes Tails' name to swap between 'Tails' and 'Miles'.
		bchg	#7,(v_console_region).w
		move.b	#-$4B,d0
		bsr.w	PlaySound

	.clearcheatentries:				
		move.w	#0,(v_correct_cheat_entries).w

	.exit:				
		rts	

; ===========================================================================
; byte_3DEE:
TailsNameCheatCode:	
		dc.b	btnUp
		dc.b	btnDn
		dc.b	btnDn
		dc.b	btnDn
		dc.b	btnUp
		dc.b	0	; end
		even

		incfile	Nem_Player1VS2	; ArtNem_3DF4:
		
; word_3E82:

		; use set directive to define character set
		
CopyrightText:	dc.w  $68B		; 0 
		dc.w	 0		; 1
		dc.w  $681		; 2
		dc.w  $689		; 3
		dc.w  $689		; 4
		dc.w  $682		; 5
		dc.w	 0		; 6
		dc.w  $6A0		; 7
		dc.w  $692		; 8
		dc.w  $694		; 9
		dc.w  $68E		; 10

; =============== S U B	R O U T	I N E =======================================


sub_3E98:				
		jmp	loc_C51E
; End of function sub_3E98

; ===========================================================================
		dc.w 0
;----------------------------------------------------------------------------
;1P Music Playlist
;----------------------------------------------------------------------------
byte_3EA0:	dc.b $82		; 0 
		dc.b $82		; 1
		dc.b $85		; 2
		dc.b $84		; 3
		dc.b $85		; 4
		dc.b $85		; 5
		dc.b $8F		; 6
		dc.b $86		; 7
		dc.b $90		; 8
		dc.b $8D		; 9
		dc.b $84		; 10
		dc.b $8B		; 11
		dc.b $89		; 12
		dc.b $8E		; 13
		dc.b $8A		; 14
		dc.b $87		; 15
		dc.b $8D		; 16
		dc.b   0		; 17
;----------------------------------------------------------------------------
;2P Music Playlist
;----------------------------------------------------------------------------
byte_3EB2:	dc.b $8C		; 0 
		dc.b $82		; 1
		dc.b $85		; 2
		dc.b $84		; 3
		dc.b $85		; 4
		dc.b $85		; 5
		dc.b $8F		; 6
		dc.b $86		; 7
		dc.b $90		; 8
		dc.b $8D		; 9
		dc.b $84		; 10
		dc.b $83		; 11
		dc.b $88		; 12
		dc.b $8E		; 13
		dc.b $8A		; 14
		dc.b $87		; 15
		dc.b $8D		; 16
		dc.b   0		; 17
; ===========================================================================

GM_Level:						
		bset	#titlecard_flag,(v_gamemode).w	; add $80 to gamemode (for pre level sequence)
		tst.w	(f_demo_mode).w
		bmi.s	loc_3ED8
		move.b	#-7,d0
		bsr.w	PlaySound

loc_3ED8:				
		bsr.w	ClearPLC
		bsr.w	PaletteFadeOut
		tst.w	(f_demo_mode).w
		bmi.s	loc_3F48
	disable_ints
		bsr.w	sub_1208
		jsr	loc_157D2
		move	#$2300,sr
		moveq	#0,d0
		move.w	d0,(v_frame_counter).w
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelHeaders).l,a2
		lea	(a2,d0.w),a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	loc_3F20
		bsr.w	AddPLC

loc_3F20:				
		moveq	#1,d0
		bsr.w	AddPLC
		bsr.w	sub_4450
		moveq	#6,d0
		tst.w	(f_two_player).w
		bne.s	loc_3F3C
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_3F48
		addq.w	#1,d0

loc_3F3C:				
		tst.b	(v_console_region).w
		bpl.s	loc_3F44
		addq.w	#2,d0

loc_3F44:				
		bsr.w	AddPLC

loc_3F48:				
					
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_3F52:				
		move.l	d0,(a1)+
		dbf	d1,loc_3F52
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$8FF,d1

loc_3F62:				
		move.l	d0,(a1)+
		dbf	d1,loc_3F62
		lea	(v_vblank_0e_counter).w,a1
		moveq	#0,d0
		move.w	#$15,d1

loc_3F72:				
		move.l	d0,(a1)+
		dbf	d1,loc_3F72
		lea	($FFFFF700).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_3F82:				
		move.l	d0,(a1)+
		dbf	d1,loc_3F82
		lea	($FFFFFE60).w,a1
		moveq	#0,d0
		move.w	#$13,d1

loc_3F92:				
		move.l	d0,(a1)+
		dbf	d1,loc_3F92
		lea	(v_cnz_saucer_data).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_3FA2:				
		move.l	d0,(a1)+
		dbf	d1,loc_3FA2
		cmpi.w	#$D01,(v_zone).w
		beq.s	loc_3FC0
		cmpi.b	#$F,(v_zone).w
		beq.s	loc_3FC0
		cmpi.b	#8,(v_zone).w
		bne.s	loc_3FCC

loc_3FC0:				
					
		move.b	#1,(f_water_flag).w
		move.w	#0,(f_two_player).w

loc_3FCC:				
		lea	(vdp_control_port).l,a6
		move.w	#-$74FD,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$7A84,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$7FFC,(a6)
		move.w	#-$78E0,(a6)
		move.w	#-$737F,(a6)
		tst.b	(f_debug_cheat).w
		beq.s	loc_4012
		btst	#5,(v_joypad_hold_actual).w
		beq.s	loc_4004
		move.w	#-$7377,(a6)

loc_4004:				
		btst	#6,(v_joypad_hold_actual).w
		beq.s	loc_4012
		move.b	#1,(f_debug_enable).w

loc_4012:				
					
		move.w	#-$7521,(v_vdp_hint_counter).w
		tst.w	(f_two_player).w
		beq.s	loc_402C
		move.w	#-$7595,(v_vdp_hint_counter).w
		move.w	#-$7FEC,(a6)
		move.w	#-$7379,(a6)

loc_402C:				
		move.w	(v_vdp_hint_counter).w,(a6)
		clr.w	(v_vdp_command_buffer).w
		move.l	#-$2400,(v_vdp_command_buffer_slot).w
		tst.b	(f_water_flag).w
		beq.s	loc_407C
		move.w	#-$7FEC,(a6)
		moveq	#0,d0
		move.w	(v_zone).w,d0
		subi.w	#$800,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#-2,d0
		lea	(word_4584).l,a1
		move.w	(a1,d0.w),d0
		move.w	d0,(v_water_height_actual).w
		move.w	d0,(v_water_height_normal).w
		move.w	d0,(v_water_height_next).w
		clr.b	(v_water_routine).w
		clr.b	(f_water_pal_full).w
		move.b	#1,(v_water_direction).w

loc_407C:				
		moveq	#3,d0
		bsr.w	PalLoad_Now
		tst.b	(f_water_flag).w
		beq.s	loc_40AE
		moveq	#$15,d0
		cmpi.b	#8,(v_zone).w
		beq.s	loc_409E
		moveq	#$16,d0
		cmpi.b	#id_CPZ,(v_zone).w
		beq.s	loc_409E
		moveq	#$17,d0

loc_409E:				
					
		bsr.w	PalLoad_Water
		tst.b	(v_last_lamppost).w
		beq.s	loc_40AE
		move.b	(f_water_pal_full_lampcopy).w,(f_water_pal_full).w

loc_40AE:				
					
		tst.w	(f_demo_mode).w
		bmi.s	loc_4114
		moveq	#0,d0
		move.b	(v_zone).w,d0
		lea	(byte_3EA0)(pc),a1
		tst.w	(f_two_player).w
		beq.s	loc_40C8
		lea	(byte_3EB2)(pc),a1

loc_40C8:				
		move.b	(a1,d0.w),d0
		move.w	d0,(v_level_music).w
		bsr.w	PlayMusic
		move.b	#$34,($FFFFB080).w ; '4'

loc_40DA:				
					
		move.b	#$C,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		move.w	($FFFFB088).w,d0
		cmp.w	($FFFFB0B0).w,d0
		bne.s	loc_40DA
		tst.l	(v_plc_buffer).w
		bne.s	loc_40DA
		move.b	#$C,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	loc_4106E

loc_4114:				
		moveq	#3,d0
		bsr.w	PalLoad_Next
		bsr.w	sub_BFBC
		jsrto	DeformLayers,JmpTo_DeformLayers
		clr.w	(v_fg_y_pos_vsram).w
		move.w	#-$E0,(v_fg_y_pos_vsram_p2).w
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_4136:	; clear_ram			
		move.l	d0,(a1)+
		dbf	d1,loc_4136
		
		
		bsr.w	LevelChunksLoad
		jsrto	LevelBlockMapsLoad,JmpTo_LevelBlockMapsLoad
		jsr	loc_402D4
		jsrto DrawTilesAtStart,JmpTo_DrawTilesAtStart
		jsr	locret_1EAF0
		bsr.w	sub_49BC
		bsr.w	sub_450E
		bsr.w	sub_446E
		move.w	#0,(v_joypad_hold).w
		move.w	#0,(v_joypad2_hold).w
		move.w	#0,(v_joypad_hold_actual).w
		move.w	#0,(v_joypad2_hold_actual).w
		move.b	#1,(f_lock_controls).w
		move.b	#1,(f_lock_controls_p2).w
		move.b	#0,(f_level_started).w
		tst.b	(f_water_flag).w
		beq.s	loc_41A8
		move.b	#4,($FFFFB380).w
		move.w	#$60,($FFFFB388).w ; '`'
		move.b	#4,($FFFFB3C0).w
		move.w	#$120,($FFFFB3C8).w

loc_41A8:				
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_41B6
		move.b	#$7C,(v_ost_cpzpylon).w ; '|'

loc_41B6:				
		cmpi.b	#$A,(v_zone).w
		bne.s	loc_41C4
		move.b	#7,($FFFFB380).w

loc_41C4:				
		moveq	#0,d0
		tst.b	(v_last_lamppost).w
		bne.s	loc_41E4
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.b	d0,(v_ring_reward).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.b	d0,(v_ring_reward_p2).w

loc_41E4:				
		move.b	d0,(f_time_over).w
		move.b	d0,(f_time_over_p2).w
		move.b	d0,($FFFFFF4E).w
		move.w	d0,($FFFFFF4C).w
		move.w	d0,(v_debug_active).w

loc_41F8:
		move.w	d0,(f_restart).w
		move.b	d0,(v_teleport_timer).w
		move.b	d0,(f_teleport_flag).w
		move.w	d0,(v_rings_collected_p1).w
		move.w	d0,(v_rings_collected_p2).w
		move.w	d0,(v_monitors_broken_p1).w
		move.w	d0,(v_monitors_broken_p2).w
		move.w	d0,(v_loser_time_left).w
		bsr.w	sub_4A70
		move.b	#1,(f_hud_score_update).w
		move.b	#1,(v_hud_rings_update).w
		move.b	#1,(f_hud_time_update).w
		move.b	#1,(f_hud_time_update_p2).w
		jsr	ObjPosLoad
		jsr	RingsManager
		jsr	SpecialCNZBumpers
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	sub_4F58
		bsr.w	SetLevelEndType
		move.w	#0,($FFFFF790).w
		move.w	#0,(v_demo_input_counter_p2).w
		lea	(off_4948).l,a1
		moveq	#0,d0
		move.b	(v_zone).w,d0
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1
		tst.w	(f_demo_mode).w
		bpl.s	loc_4290
		lea	(dword_498C).l,a1
		move.w	(v_s1_ending_demo_num).w,d0
		subq.w	#1,d0
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1

loc_4290:				
		move.b	1(a1),(v_demo_input_time).w
		tst.b	(v_zone).w
		bne.s	loc_42A8
		lea	(byte_4D08).l,a1
		move.b	1(a1),(v_demo_input_time_p2).w

loc_42A8:				
		move.w	#$668,(v_countdown).w
		tst.w	(f_demo_mode).w
		bpl.s	loc_42C8
		move.w	#$21C,(v_countdown).w
		cmpi.w	#4,(v_s1_ending_demo_num).w
		bne.s	loc_42C8
		move.w	#$1FE,(v_countdown).w

loc_42C8:				
					
		tst.b	(f_water_flag).w
		beq.s	loc_42E8
		moveq	#$15,d0
		cmpi.b	#8,(v_zone).w
		beq.s	loc_42E4
		moveq	#$16,d0
		cmpi.b	#id_CPZ,(v_zone).w
		beq.s	loc_42E4
		moveq	#$17,d0

loc_42E4:				
					
		bsr.w	PalLoad_Water_Next

loc_42E8:				
		move.w	#-1,($FFFFB0BE).w
		move.b	#$E,($FFFFB1E4).w
		move.w	#$A,($FFFFB1F4).w

loc_42FA:				
		move.b	#$C,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.b	($FFFFB140).w
		bne.s	loc_42FA
		lea	($FFFFB080).w,a1
		move.b	#$16,$24(a1)
		move.w	#$2D,$1E(a1) ; '-'
		move.b	#$16,$64(a1)
		move.w	#$2D,$5E(a1) ; '-'
		tst.b	$80(a1)
		beq.s	loc_4348
		move.b	#$16,$A4(a1)
		move.w	#$2D,$9E(a1) ; '-'

loc_4348:				
		move.b	#0,(f_lock_controls).w
		move.b	#0,(f_lock_controls_p2).w
		move.b	#1,(f_level_started).w
		bclr	#titlecard_flag,(v_gamemode).w

loc_4360:						
		bsr.w	PauseGame
		move.b	#8,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		addq.w	#1,(v_frame_counter).w
		bsr.w	sub_481E
		bsr.w	sub_450E
		jsr	ExecuteObjects
		tst.w	(f_restart).w
		bne.w	GM_Level
		jsrto	DeformLayers,JmpTo_DeformLayers
		bsr.w	sub_44E4
		jsr	RingsManager
		cmpi.b	#id_CNZ,(v_zone).w
		bne.s	.notCNZ
		jsr	(SpecialCNZBumpers).l

	.notCNZ:				
		bsr.w	sub_4F58
		bsr.w	sub_19DC
		bsr.w	RunPLC
		bsr.w	sub_4AC6
		bsr.w	sub_4B64
		bsr.w	sub_4C48
		jsr	BuildSprites
		jsr	ObjPosLoad
		cmpi.b	#8,(v_gamemode).w
		beq.s	loc_43DC
		cmpi.b	#$C,(v_gamemode).w
		beq.w	loc_4360
		rts	
; ===========================================================================

loc_43DC:				
		tst.w	(f_restart).w
		bne.s	loc_43FA
		tst.w	(v_countdown).w
		beq.s	loc_43FA
		cmpi.b	#8,(v_gamemode).w
		beq.w	loc_4360
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================

loc_43FA:				
					
		cmpi.b	#8,(v_gamemode).w
		bne.s	loc_4408
		move.b	#0,(v_gamemode).w

loc_4408:				
		move.w	#$3C,(v_countdown).w ; '<'
		move.w	#$3F,(v_palfade_start).w ; '?'
		clr.w	(v_palfade_time).w

loc_4418:				
		move.b	#8,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	sub_481E
		jsr	ExecuteObjects
		jsr	BuildSprites
		jsr	ObjPosLoad
		subq.w	#1,(v_palfade_time).w
		bpl.s	loc_4448
		move.w	#2,(v_palfade_time).w
		bsr.w	sub_248A

loc_4448:				
		tst.w	(v_countdown).w
		bne.s	loc_4418
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_4450:				
		cmpi.b	#-$78,(v_gamemode).w
		beq.s	loc_4466
		tst.w	(f_two_player).w
		bne.s	loc_4466
		move.w	(v_player_option).w,(v_player_mode).w
		rts	
; ===========================================================================

loc_4466:				
		move.w	#0,(v_player_mode).w
		rts	
; End of function sub_4450


; =============== S U B	R O U T	I N E =======================================


sub_446E:				
		move.w	(v_player_mode).w,d0
		bne.s	loc_44BE
		move.b	#1,($FFFFB000).w
		move.b	#8,($FFFFD100).w
		cmpi.b	#6,(v_zone).w
		beq.s	locret_44BC
		cmpi.b	#$E,(v_zone).w
		beq.s	locret_44BC
		cmpi.b	#$10,(v_zone).w
		beq.s	locret_44BC
		move.b	#2,($FFFFB040).w
		move.w	($FFFFB008).w,($FFFFB048).w
		move.w	($FFFFB00C).w,($FFFFB04C).w
		subi.w	#$20,($FFFFB048).w ; ' '
		addi.w	#4,($FFFFB04C).w
		move.b	#8,($FFFFD140).w

locret_44BC:				
		rts	
; ===========================================================================

loc_44BE:				
		subq.w	#1,d0
		bne.s	loc_44D0
		move.b	#1,($FFFFB000).w
		move.b	#8,($FFFFD100).w
		rts	
; ===========================================================================

loc_44D0:				
		move.b	#2,($FFFFB000).w
		move.b	#8,($FFFFD140).w
		addi.w	#4,($FFFFB00C).w
		rts	
; End of function sub_446E


; =============== S U B	R O U T	I N E =======================================


sub_44E4:				
		tst.b	(f_water_flag).w
		beq.s	locret_450C
		move.w	(v_camera_x_pos).w,d1
		btst	#0,($FFFFFE05).w
		beq.s	loc_44FA
		addi.w	#$20,d1	; ' '

loc_44FA:				
		move.w	d1,d0
		addi.w	#$60,d0	; '`'
		move.w	d0,($FFFFB388).w
		addi.w	#$120,d1
		move.w	d1,($FFFFB3C8).w

locret_450C:				
		rts	
; End of function sub_44E4


; =============== S U B	R O U T	I N E =======================================


sub_450E:				
					
		tst.b	(f_water_flag).w
		beq.s	loc_456A
		tst.b	(f_disable_scrolling).w
		bne.s	loc_4526
		cmpi.b	#6,($FFFFB024).w
		bcc.s	loc_4526
		bsr.w	sub_45A4

loc_4526:				
		clr.b	(f_water_pal_full).w
		moveq	#0,d0
		cmpi.b	#$F,(v_zone).w
		beq.s	loc_453A
		move.b	($FFFFFE60).w,d0
		lsr.w	#1,d0

loc_453A:				
		add.w	(v_water_height_normal).w,d0
		move.w	d0,(v_water_height_actual).w
		move.w	(v_water_height_actual).w,d0
		sub.w	(v_camera_y_pos).w,d0
		bcc.s	loc_455C
		tst.w	d0
		bpl.s	loc_455C
		move.b	#-$21,($FFFFF625).w
		move.b	#1,(f_water_pal_full).w

loc_455C:				
		cmpi.w	#$DF,d0	
		bcs.s	loc_4566
		move.w	#$DF,d0	

loc_4566:				
		move.b	d0,($FFFFF625).w

loc_456A:				
		cmpi.b	#$A,(v_zone).w
		bne.s	loc_4576
		bsr.w	sub_46B8

loc_4576:				
		cmpi.b	#6,(v_zone).w
		bne.s	locret_4582
		bsr.w	WindTunnels

locret_4582:				
		rts	
; End of function sub_450E

; ===========================================================================
word_4584:	dc.w  $600		; 0 
		dc.w  $600		; 1
		dc.w  $600		; 2
		dc.w  $600		; 3
		dc.w  $600		; 4
		dc.w  $600		; 5
		dc.w  $600		; 6
		dc.w  $600		; 7
		dc.w  $600		; 8
		dc.w  $600		; 9
		dc.w  $600		; 10
		dc.w  $710		; 11
		dc.w  $600		; 12
		dc.w  $600		; 13
		dc.w  $410		; 14
		dc.w  $510		; 15

; =============== S U B	R O U T	I N E =======================================


sub_45A4:				
		moveq	#0,d0
		move.w	(v_zone).w,d0
		subi.w	#$800,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#-2,d0
		move.w	off_45D8(pc,d0.w),d0
		jsr	off_45D8(pc,d0.w)
		moveq	#0,d1
		move.b	(v_water_direction).w,d1
		move.w	(v_water_height_next).w,d0
		sub.w	(v_water_height_normal).w,d0
		beq.s	locret_45D6
		bcc.s	loc_45D2
		neg.w	d1

loc_45D2:				
		add.w	d1,(v_water_height_normal).w

locret_45D6:				
		rts	
; End of function sub_45A4

; ===========================================================================
off_45D8:	index offset(*)

		ptr locret_45F8	; 0 		
		ptr locret_45F8	; 1
		ptr locret_45F8	; 2
		ptr locret_45F8	; 3
		ptr locret_45F8	; 4
		ptr locret_45F8	; 5
		ptr locret_45F8	; 6
		ptr locret_45F8	; 7
		ptr locret_45F8	; 8
		ptr locret_45F8	; 9
		ptr locret_45F8	; $A
		ptr loc_45FA	; $B
		ptr locret_45F8	; $C
		ptr locret_45F8	; $D
		ptr locret_45F8	; $E
		ptr locret_45F8	; $F
; ===========================================================================

locret_45F8:				
		rts	
; ===========================================================================

loc_45FA:				
		cmpi.w	#$1DE0,(v_camera_x_pos).w
		bcs.s	locret_4608
		move.w	#$510,(v_water_height_next).w

locret_4608:				
		rts	

; =============== S U B	R O U T	I N E =======================================

; displacements for Wind Tunnel data relative to 
wt_min_x_pos	equ	0
wt_min_y_pos	equ	2
wt_max_x_pos	equ	4
wt_max_y_pos	equ	6

WindTunnels:				
		tst.w	(v_debug_active).w
		bne.w	.exit
		lea	(WindTunnel_Data).l,a2
		moveq	#1,d1
		lea	(v_ost_maincharacter).w,a1

	.tunnel_loop:				
		move.w	ost_x_pos(a1),d0
		cmp.w	(a2),d0
		bcs.w	.chknext
		cmp.w	wt_max_x_pos(a2),d0
		bcc.w	.chknext
		move.w	ost_y_pos(a1),d2
		cmp.w	wt_min_y_pos(a2),d2
		bcs.w	.chknext
		cmp.w	wt_max_y_pos(a2),d2
		bcc.s	.chknext
		tst.b	(f_wind_tunnel_disable).w
		bne.w	.exit
		cmpi.b	#4,ost_primary_routine(a1)
		bcc.s	.end_tunnel
		move.b	#1,(f_wind_tunnel_now).w
		subi.w	#4,ost_x_pos(a1)
		move.w	#-$400,ost_x_vel(a1)
		move.w	#0,ost_y_vel(a1)
		move.b	#$F,ost_anim(a1)
		bset	#status_air_bit,ost_status(a1)
		btst	#bitUp,(v_joypad_hold_actual).w
		beq.s	.down
		subq.w	#1,ost_y_pos(a1)

	.down:				
		btst	#bitDn,(v_joypad_hold_actual).w
		beq.s	.end
		addq.w	#1,ost_y_pos(a1)

	.end:				
		rts	
; ===========================================================================
	; loc_4690: WindTunnel_Leave:
	.chknext:				
		addq.w	#8,a2
		dbf	d1,.tunnel_loop
		tst.b	(f_wind_tunnel_now).w
		beq.s	.exit
		move.b	#0,ost_anim(a1)
	
	; loc_46A2: WindTunnel_LeaveHurt:
	.end_tunnel:				
		clr.b	(f_wind_tunnel_now).w
	
	; return_46A6: WindTunnel_End
	.exit:				
		rts	

; ===========================================================================
WindTunnel_Data:	
		dc.w $1510		; 0 
		dc.w  $400		; 1
		dc.w $1AF0		; 2
		dc.w  $580		; 3
		dc.w $20F0		; 4
		dc.w  $618		; 5
		dc.w $2500		; 6
		dc.w  $680		; 7

; =============== S U B	R O U T	I N E =======================================


sub_46B8:				
		lea	($FFFFB000).w,a1
		move.b	(v_joypad_hold).w,d2
		bsr.s	loc_46CA
		lea	($FFFFB040).w,a1
		move.b	(v_joypad2_hold).w,d2

loc_46CA:				
		btst	#1,$22(a1)
		bne.s	loc_46FE
		move.w	$C(a1),d0
		add.w	d0,d0
		andi.w	#$F00,d0
		move.w	8(a1),d1
		lsr.w	#7,d1
		andi.w	#$7F,d1	; ''
		add.w	d1,d0
		lea	(v_level_layout).w,a2
		move.b	(a2,d0.w),d0
		lea	(sub_481E)(pc),a2
		moveq	#$1F,d1

loc_46F6:				
		cmp.b	-(a2),d0
		dbeq	d1,loc_46F6
		beq.s	loc_4712

loc_46FE:				
		tst.b	$2B(a1)
		bpl.s	locret_4710
		move.w	#5,$2E(a1)
		andi.b	#$7F,$2B(a1) ; ''

locret_4710:				
		rts	
; ===========================================================================

loc_4712:				
		lea	(byte_47DE).l,a2
		move.b	(a2,d1.w),d0
		beq.s	loc_476E
		move.b	$14(a1),d1
		tst.b	d0
		bpl.s	loc_4732
		cmp.b	d0,d1
		ble.s	loc_473C
		subi.w	#$40,$14(a1) ; '@'
		bra.s	loc_473C
; ===========================================================================

loc_4732:				
		cmp.b	d0,d1
		bge.s	loc_473C
		addi.w	#$40,$14(a1) ; '@'

loc_473C:				
		bclr	#0,$22(a1)
		tst.b	d1
		bpl.s	loc_474C
		bset	#0,$22(a1)

loc_474C:				
		move.b	#$1B,$1C(a1)
		ori.b	#-$80,$2B(a1)
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	locret_476C
		move.w	#$F0,d0	
		jsr	(PlaySound).l

locret_476C:				
		rts	
; ===========================================================================

loc_476E:				
		move.w	#4,d1
		move.w	$14(a1),d0
		btst	#2,d2
		beq.s	loc_4790
		move.b	#0,$1C(a1)
		bset	#0,$22(a1)
		sub.w	d1,d0
		tst.w	d0
		bpl.s	loc_4790
		sub.w	d1,d0

loc_4790:				
		btst	#3,d2
		beq.s	loc_47AA
		move.b	#0,$1C(a1)
		bclr	#0,$22(a1)
		add.w	d1,d0
		tst.w	d0
		bmi.s	loc_47AA
		add.w	d1,d0

loc_47AA:				
		move.w	#4,d1
		tst.w	d0
		beq.s	loc_47D2
		bmi.s	loc_47C4
		sub.w	d1,d0
		bhi.s	loc_47C2
		move.w	#0,d0
		move.b	#5,$1C(a1)

loc_47C2:				
		bra.s	loc_47D2
; ===========================================================================

loc_47C4:				
		add.w	d1,d0
		bhi.s	loc_47D2
		move.w	#0,d0
		move.b	#5,$1C(a1)

loc_47D2:				
					
		move.w	d0,$14(a1)
		ori.b	#-$80,$2B(a1)
		rts	
; End of function sub_46B8

; ===========================================================================
byte_47DE:	dc.b $F8,$F8,$F8,  8,  8,  0,  0,  0,$F8,$F8,  0,  8,  8,  8,  0,  8; 0
					
		dc.b   8,  8,  0,$F8,  0,  0,$F8,  8,$F8,$F8,$F8,  8,  8,  8,$F8,$F8; 16
		dc.b $2F,$30,$31,$33,$35,$38,$3A,$3C,$63,$64,$83,$90,$91,$93,$A1,$A3; 32
		dc.b $BD,$C7,$C8,$CE,$D7,$D8,$E6,$EB,$EC,$ED,$F1,$F2,$F3,$F4,$FA,$FD; 48

; =============== S U B	R O U T	I N E =======================================


sub_481E:				
					
					; DATA XREF: ...
		tst.w	(f_demo_mode).w
		bne.w	loc_48AA
		rts	
; ===========================================================================
		lea	(off_4948).l,a1
		moveq	#0,d0
		move.b	(v_zone).w,d0
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1
		move.w	($FFFFF790).w,d0
		adda.w	d0,a1
		move.b	(v_joypad_hold_actual).w,d0
		cmp.b	(a1),d0
		bne.s	loc_4856
		addq.b	#1,1(a1)
		cmpi.b	#-1,1(a1)
		beq.s	loc_4856
		bra.s	loc_486A
; ===========================================================================

loc_4856:				
		move.b	d0,2(a1)
		move.b	#0,3(a1)
		addq.w	#2,($FFFFF790).w
		andi.w	#$3FF,($FFFFF790).w

loc_486A:				
		cmpi.b	#id_EHZ,(v_zone).w
		bne.s	locret_48A8
		lea	($FEC000).l,a1
		move.w	(v_demo_input_counter_p2).w,d0
		adda.w	d0,a1
		move.b	(v_joypad2_hold_actual).w,d0
		cmp.b	(a1),d0
		bne.s	loc_4894
		addq.b	#1,1(a1)
		cmpi.b	#-1,1(a1)
		beq.s	loc_4894
		bra.s	locret_48A8
; ===========================================================================

loc_4894:				
		move.b	d0,2(a1)
		move.b	#0,3(a1)
		addq.w	#2,(v_demo_input_counter_p2).w
		andi.w	#$3FF,(v_demo_input_counter_p2).w

locret_48A8:				
		rts	
; ===========================================================================

loc_48AA:				
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		beq.s	loc_48C4
		tst.w	(f_demo_mode).w
		bmi.s	loc_48C4
		move.b	#4,(v_gamemode).w

loc_48C4:				
		lea	(off_4948).l,a1
		moveq	#0,d0
		move.b	(v_zone).w,d0
		cmpi.b	#$10,(v_gamemode).w
		bne.s	loc_48DA
		moveq	#6,d0

loc_48DA:				
		lsl.w	#2,d0
		movea.l	(a1,d0.w),a1
		move.w	($FFFFF790).w,d0
		adda.w	d0,a1
		move.b	(a1),d0
		lea	(v_joypad_hold_actual).w,a0
		move.b	d0,d1
		moveq	#0,d2
		eor.b	d2,d0
		move.b	d1,(a0)+
		and.b	d1,d0
		move.b	d0,(a0)+
		subq.b	#1,(v_demo_input_time).w
		bcc.s	loc_4908
		move.b	3(a1),(v_demo_input_time).w
		addq.w	#2,($FFFFF790).w

loc_4908:				
		cmpi.b	#id_EHZ,(v_zone).w
		bne.s	loc_4940
		lea	(byte_4D08).l,a1
		move.w	(v_demo_input_counter_p2).w,d0
		adda.w	d0,a1
		move.b	(a1),d0
		lea	(v_joypad2_hold_actual).w,a0
		move.b	d0,d1
		moveq	#0,d2
		eor.b	d2,d0
		move.b	d1,(a0)+
		and.b	d1,d0
		move.b	d0,(a0)+
		subq.b	#1,(v_demo_input_time_p2).w
		bcc.s	locret_493E
		move.b	3(a1),(v_demo_input_time_p2).w
		addq.w	#2,(v_demo_input_counter_p2).w

locret_493E:				
		rts	
; ===========================================================================

loc_4940:				
		move.w	#0,(v_joypad2_hold_actual).w
		rts	
; End of function sub_481E

; ===========================================================================
;----------------------------------------------------------------------------
;Pointers to demo scripts
;
;Contains an array of pointers to the script controlling the players actions
;to use	for each level.	One pointer per	level, no act 2.
;----------------------------------------------------------------------------
off_4948:	dc.l byte_4CA8		; 0 
					
		dc.l byte_4CA8		; 1
		dc.l byte_4CA8		; 2
		dc.l byte_4CA8		; 3
		dc.l byte_4CA8		; 4
		dc.l byte_4CA8		; 5
		dc.l byte_4CA8		; 6
		dc.l byte_4CA8		; 7
		dc.l byte_4CA8		; 8
		dc.l byte_4CA8		; 9
		dc.l byte_4CA8		; 10
		dc.l byte_4CA8		; 11
		dc.l byte_4D68		; 12
		dc.l byte_4DD8		; 13
		dc.l byte_4CA8		; 14
		dc.l byte_4E38		; 15
		dc.l byte_4CA8		; 16
;----------------------------------------------------------------------------
dword_498C:	dc.l   $8B0837		; 0 
		dc.l   $42085C		; 1
		dc.l   $6A085F		; 2
		dc.l   $2F082C		; 3
		dc.l   $210803		; 4
		dc.l $28300808		; 5
		dc.l   $2E0815		; 6
		dc.l	$F0846		; 7
		dc.l   $1A08FF		; 8
		dc.l  $8CA0000		; 9
		dc.l	     0		; 10
		dc.l	     0		; 11

; =============== S U B	R O U T	I N E =======================================


sub_49BC:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		lsl.w	#2,d0
		move.l	#-$2A00,(v_collision_index_ptr).w
		move.w	d0,-(sp)
		movea.l	Off_ColP(pc,d0.w),a0
		lea	(v_primary_collision).w,a1
		bsr.w	KosDec
		move.w	(sp)+,d0
		movea.l	Off_ColS(pc,d0.w),a0
		lea	(v_secondary_collision).w,a1
		bra.w	KosDec
; End of function sub_49BC

; ===========================================================================
; ---------------------------------------------------------------------------
; Pointers to primary collision	indexes
;
; Contains an array of pointers	to the primary collision index data for	each
; level. 1 pointer for each level, pointing the	primary	collision index.
; ---------------------------------------------------------------------------
Off_ColP:	dc.l ColP_EHZHTZ	; 0
		dc.l LevelIndex		; 1
		dc.l ColP_MTZ		; 2
		dc.l LevelIndex		; 3
		dc.l ColP_MTZ		; 4
		dc.l ColP_MTZ		; 5
		dc.l ColP_WFZSCZ	; 6
		dc.l ColP_EHZHTZ	; 7
		dc.l ColP_OOZ		; 8
		dc.l LevelIndex		; 9
		dc.l ColP_OOZ		; 10
		dc.l ColP_MCZ		; 11
		dc.l ColP_CNZ		; 12
		dc.l ColP_CPZDEZ	; 13
		dc.l ColP_CPZDEZ	; 14
		dc.l ColP_ARZ		; 15
		dc.l ColP_WFZSCZ	; 16
; ---------------------------------------------------------------------------
; Pointers to secondary	collision indexes
;
; Contains an array of pointers	to the secondary collision index data for
; each level. 1	pointer	for each level,	pointing the secondary collision
; index.
; ---------------------------------------------------------------------------
Off_ColS:	dc.l ColS_EHZHTZ	; 0
		dc.l LevelIndex		; 1
		dc.l ColP_MTZ		; 2
		dc.l LevelIndex		; 3
		dc.l ColP_MTZ		; 4
		dc.l ColP_MTZ		; 5
		dc.l ColS_WFZSCZ	; 6
		dc.l ColS_EHZHTZ	; 7
		dc.l ColP_OOZ		; 8
		dc.l LevelIndex		; 9
		dc.l ColP_OOZ		; 10
		dc.l ColP_MCZ		; 11
		dc.l ColS_CNZ		; 12
		dc.l ColS_CPZDEZ	; 13
		dc.l ColS_CPZDEZ	; 14
		dc.l ColS_ARZ		; 15
		dc.l ColS_WFZSCZ	; 16

; =============== S U B	R O U T	I N E =======================================


sub_4A70:				
		lea	(v_oscillating_direction).w,a1
		lea	(word_4A84).l,a2
		moveq	#$20,d1	; ' '

loc_4A7C:				
		move.w	(a2)+,(a1)+
		dbf	d1,loc_4A7C
		rts	
; End of function sub_4A70

; ===========================================================================
word_4A84:	dc.w   $7D		; 0 
		dc.w   $80		; 1
		dc.w	 0		; 2
		dc.w   $80		; 3
		dc.w	 0		; 4
		dc.w   $80		; 5
		dc.w	 0		; 6
		dc.w   $80		; 7
		dc.w	 0		; 8
		dc.w   $80		; 9
		dc.w	 0		; 10
		dc.w   $80		; 11
		dc.w	 0		; 12
		dc.w   $80		; 13
		dc.w	 0		; 14
		dc.w   $80		; 15
		dc.w	 0		; 16
		dc.w   $80		; 17
		dc.w	 0		; 18
		dc.w $3848		; 19
		dc.w   $EE		; 20
		dc.w $2080		; 21
		dc.w   $B4		; 22
		dc.w $3080		; 23
		dc.w  $10E		; 24
		dc.w $5080		; 25
		dc.w  $1C2		; 26
		dc.w $7080		; 27
		dc.w  $276		; 28
		dc.w   $80		; 29
		dc.w	 0		; 30
		dc.w $4000		; 31
		dc.w   $FE		; 32

; =============== S U B	R O U T	I N E =======================================


sub_4AC6:				
		tst.w	(f_two_player).w
		bne.s	loc_4AD4
		cmpi.b	#6,($FFFFB024).w
		bcc.s	locret_4B22

loc_4AD4:				
		lea	(v_oscillating_direction).w,a1
		lea	(word_4B24).l,a2
		move.w	(a1)+,d3
		moveq	#$F,d1

loc_4AE2:				
		move.w	(a2)+,d2
		move.w	(a2)+,d4
		btst	d1,d3
		bne.s	loc_4B02
		move.w	2(a1),d0
		add.w	d2,d0
		move.w	d0,2(a1)
		_add.w	d0,0(a1)
		_cmp.b	0(a1),d4
		bhi.s	loc_4B18
		bset	d1,d3
		bra.s	loc_4B18
; ===========================================================================

loc_4B02:				
		move.w	2(a1),d0
		sub.w	d2,d0
		move.w	d0,2(a1)
		_add.w	d0,0(a1)
		_cmp.b	0(a1),d4
		bls.s	loc_4B18
		bclr	d1,d3

loc_4B18:				
		addq.w	#4,a1
		dbf	d1,loc_4AE2
		move.w	d3,(v_oscillating_direction).w

locret_4B22:				
		rts	
; End of function sub_4AC6

; ===========================================================================
word_4B24:	dc.w	 2		; 0 
					
		dc.w   $10		; 1
		dc.w	 2		; 2
		dc.w   $18		; 3
		dc.w	 2		; 4
		dc.w   $20		; 5
		dc.w	 2		; 6
		dc.w   $30		; 7
		dc.w	 4		; 8
		dc.w   $20		; 9
		dc.w	 8		; 10
		dc.w	 8		; 11
		dc.w	 8		; 12
		dc.w   $40		; 13
		dc.w	 4		; 14
		dc.w   $40		; 15
		dc.w	 2		; 16
		dc.w   $38		; 17
		dc.w	 2		; 18
		dc.w   $38		; 19
		dc.w	 2		; 20
		dc.w   $20		; 21
		dc.w	 3		; 22
		dc.w   $30		; 23
		dc.w	 5		; 24
		dc.w   $50		; 25
		dc.w	 7		; 26
		dc.w   $70		; 27
		dc.w	 2		; 28
		dc.w   $40		; 29
		dc.w	 2		; 30
		dc.w   $40		; 31

; =============== S U B	R O U T	I N E =======================================


sub_4B64:				
		subq.b	#1,(v_syncani_0_time).w
		bpl.s	loc_4B7A
		move.b	#$B,(v_syncani_0_time).w
		subq.b	#1,(v_syncani_0_frame).w
		andi.b	#7,(v_syncani_0_frame).w

loc_4B7A:				
		subq.b	#1,(v_syncani_1_time).w
		bpl.s	loc_4B90
		move.b	#7,(v_syncani_1_time).w
		addq.b	#1,(v_syncani_1_frame).w
		andi.b	#3,(v_syncani_1_frame).w

loc_4B90:				
		subq.b	#1,(v_syncani_2_time).w
		bpl.s	loc_4BAE
		move.b	#7,(v_syncani_2_time).w
		addq.b	#1,(v_syncani_2_frame).w
		cmpi.b	#6,(v_syncani_2_frame).w
		bcs.s	loc_4BAE
		move.b	#0,(v_syncani_2_frame).w

loc_4BAE:				
		tst.b	(v_syncani_3_time).w
		beq.s	locret_4BD0
		moveq	#0,d0
		move.b	(v_syncani_3_time).w,d0
		add.w	(v_syncani_3_accumulator).w,d0
		move.w	d0,(v_syncani_3_accumulator).w
		rol.w	#7,d0
		andi.w	#3,d0
		move.b	d0,(v_syncani_3_frame).w
		subq.b	#1,(v_syncani_3_time).w

locret_4BD0:				
		rts	
; End of function sub_4B64


; =============== S U B	R O U T	I N E =======================================

; sub_4BD2:
SetLevelEndType:				
		move.w	#0,(f_has_signpost).w		; set level type to non-signpost
		tst.w	(f_two_player).w		; is it two-player mode?
		bne.s	.setsignpost				; if it is, branch
		cmpi.w	#id_EHZ_act2,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_MTZ_act3,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_WFZ_act1,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_HTZ_act2,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_OOZ_act2,(v_zone).w
		beq.w	.exit
		cmpi.w	#id_MCZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_CNZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_CPZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_DEZ_act1,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_ARZ_act2,(v_zone).w
		beq.s	.exit
		cmpi.w	#id_SCZ_act1,(v_zone).w
		beq.s	.exit

	.setsignpost:				
		move.w	#1,(f_has_signpost).w ; set level type to signpost

	.exit:				
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_4C48:				
		tst.w	(f_has_signpost).w
		beq.s	locret_4CA6
		tst.w	(v_debug_active).w
		bne.s	locret_4CA6
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_boundary_right_next).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	loc_4C80
		tst.b	(f_hud_time_update).w
		beq.s	loc_4C80
		cmp.w	(v_boundary_left_next).w,d1
		beq.s	loc_4C80
		move.w	d1,(v_boundary_left_next).w
		tst.w	(f_two_player).w
		bne.s	locret_4CA6
		moveq	#$27,d0	; '''
		bra.w	NewPLC
; ===========================================================================

loc_4C80:				
		tst.w	(f_two_player).w
		beq.s	locret_4CA6
		move.w	(v_camera_x_pos_p2).w,d0
		move.w	(v_boundary_right_next_p2).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	locret_4CA6
		tst.b	(f_hud_time_update_p2).w
		beq.s	locret_4CA6
		cmp.w	(v_boundary_left_next_p2).w,d1
		beq.s	locret_4CA6
		move.w	d1,(v_boundary_left_next_p2).w

locret_4CA6:				
		rts	
; End of function sub_4C48

; ===========================================================================
; ---------------------------------------------------------------------------
; EHZ Demo Script
; ---------------------------------------------------------------------------
byte_4CA8:	dc.b   0,$4B,  8,$42,$28,  8,  8,$3E,$28,  5,  8,$AF,$28,  9,  8,$45; 0
					
		dc.b   0,$1D,  4, $E,  0,  4,  4,  4,  0,  8,  4,$3E,  0,  4,  8,$66; 16
		dc.b   0,$61,  8,$11,  0,$21,  2,  7,$22,  6,  2, $D,  0,$3B,  8,  9; 32
		dc.b   0,$1D,  2,  6,$22,  6,  2,  1,  0, $E,  8,$FF,  8,$2E,  0,$22; 48
		dc.b $20,  7,$28, $F,  8,  2,  0,$2F,$28,$23,  8,$BD,  0, $B,  4,$13; 64
		dc.b   0,$16,  2,  2,$22,  6,  2,  2,  0,$63,$80,  0,$40,  0,  0,  0; 80
; ---------------------------------------------------------------------------
; Unknown Demo Script
; ---------------------------------------------------------------------------
byte_4D08:	dc.b   0,$3B,  8, $F,  9,$43,$29,  6,  9,  6,  8,$C9,  0,$11,  8,  1; 0
					
					
		dc.b $28,  8,  8,$52,  0,$11,  8, $A,$28, $E,  8,$23,  0, $A,$20,  4; 16
		dc.b   0, $D,  8,$55,  0,$1E,  8,$5A,  0,$10,  8,$FF,  8,$C0,  0,$20; 32
		dc.b   4, $D,  0, $D,$20,  4,$28, $F,$20,  5,  0, $C,  4,  5,  0,$5E; 48
		dc.b   8,$73,  0,$18,  4,$44,  0,  8,  2,$30,  0,  8,  8, $D,  0,$23; 64
		dc.b   8,$27,  0,  4,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 80
; ---------------------------------------------------------------------------
; CNZ Demo Script
; ---------------------------------------------------------------------------
byte_4D68:	dc.b   0,$48,  8,$10,  9,  0,  8,  1,  9,  6,  8,$60,$28,  5,$20,  1; 0
					
		dc.b   0,  8,  4,  2,  6,  3,  4,  1,  0,$19,  8,$11,$28,$19,$20,  4; 16
		dc.b $28,$23,  8,$1A,  0,  7,  4,$10,  0, $E,  8,$77,$28,$16,$20,  0; 32
		dc.b   0, $F,  4,$11,  0,  7,  8,$52,  0,$6F,  8,$74,  0,$37,  8,$16; 48
		dc.b   0,  4,  4,$26,  0, $C,  4,$12,  0,$69,$20,$10,$28,  2,$2A,  5; 64
		dc.b  $A,$14,  8,  5,  0,  5,  4, $C,  0,$48,  4,  9,  0,$1E,  8,  6; 80
		dc.b   0,$2F,  4,  1,  0,$FF,  0,$4F,  8,  0,$28, $B,  8,$2A,  0,$5E; 96
; ---------------------------------------------------------------------------
; CPZ Demo Script
; ---------------------------------------------------------------------------
byte_4DD8:	dc.b   0,$46,  8,$1B,$28,  7,  8,  9,  0,$1B,  8, $D,$28,$28,  8,$FF; 0
					
		dc.b   8,$E7, $A,  4,  2,  1,  4,$33,  6,$67,  4,  0,  0,$15,$20,  0; 16
		dc.b $24,  7,  4, $E,  0,$17,  8,  1, $A,  1,  8, $C,  0,$1F,$28,  6; 32
		dc.b   8, $A,  0,$1B,  4, $D,  0,$1C,  4,  6,  0,$FF,  0,$DF,  8, $E; 48
		dc.b   0,$1C,  4,  2,  0,$25,  8,  6,  0,  6,$20,  4,  0,$28,  4,$11; 64
		dc.b   0,$17,  8,$19,  0,$10,  4,$2D,  0,$13,$80,  0,$40,  0,  0,  0; 80
; ---------------------------------------------------------------------------
; ARZ Demo Script
; ---------------------------------------------------------------------------
byte_4E38:	dc.b   0,$42,  8,$4A,$28,  8,  8,$4F,$28, $B,  8,  5,  0,$1A,  8,$60; 0
					
		dc.b $28,$14,  8,$54,  0,$40,  8,  4,  9,  0,  8,$5B,  0,$46,  8,$3B; 16
		dc.b $28,  8,  8,$27,  0, $A,  8,$92,$28,$32,  8,$22,  0,$22,  8,$4C; 32
		dc.b   0,$1E,  4,  1,  5,  2,  4,  0,  0, $A,  4, $C,  0,$10,  8,  5; 48
		dc.b   0,$61,  8,  3,$28,  5,  8,$16,  0,$1B,  8,$56,$28, $A,  8,$16; 64
		dc.b   0,$15,  8, $C,  0,$2B,$20,  1,$28,$1A,  8,$82,  0, $B,$80,  0; 80

; =============== S U B	R O U T	I N E =======================================

; sub_4E98: LoadZoneTiles:
LevelChunksLoad:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelHeaders).l,a2
		lea	(a2,d0.w),a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		movea.l	d0,a0
		lea	(v_128x128_tiles).l,a1
		bsr.w	KosDec
		move.w	a1,d3
		cmpi.b	#7,(v_zone).w
		bne.s	loc_4EE4
		lea	(Kos_HTZ).l,a0
		lea	($FFFF3F80).l,a1
		bsr.w	KosDec
		move.w	#$6FC0,d3

loc_4EE4:				
		cmpi.b	#6,(v_zone).w
		bne.s	loc_4F00
		lea	(Kos_WFZ).l,a0
		lea	($FFFF60E0).l,a1
		bsr.w	KosDec
		move.w	#$6F20,d3

loc_4F00:				
		cmpi.b	#$E,(v_zone).w
		bne.s	loc_4F0C
		move.w	#$64C0,d3

loc_4F0C:				
		move.w	d3,d7
		andi.w	#$FFF,d3
		lsr.w	#1,d3
		rol.w	#4,d7
		andi.w	#$F,d7

loc_4F1A:				
		move.w	d7,d2
		lsl.w	#7,d2
		lsl.w	#5,d2
		move.l	#$FFFFFF,d1
		move.w	d2,d1
		jsr	(QueueDMATransfer).l
		move.w	d7,-(sp)
		move.b	#$C,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	RunPLC
		move.w	(sp)+,d7
		move.w	#$800,d3
		dbf	d7,loc_4F1A
		rts	
; End of function LevelChunksLoad

; ===========================================================================

	if Revision<2
		nop	
	endc

	if ~RemoveJmpTos
JmpTo_LevelBlockMapsLoad:				
		jmp	LevelBlockMapsLoad

JmpTo_DeformLayers:						
		jmp	DeformLayers

sub_4F58:						
		jmp	AnimateLevelGFX

JmpTo_DrawTilesAtStart:				
		jmp	DrawTilesAtStart
	endc

; ===========================================================================

GM_SpecialStage:				
		cmpi.b	#7,(v_special_stage).w
		bcs.s	loc_4F72
		move.b	#0,(v_special_stage).w

loc_4F72:				
		move.w	#$CA,d0	
		bsr.w	PlaySound
		move.b	#-7,d0
		bsr.w	PlayMusic
		bsr.w	sub_2592
		tst.w	(f_two_player).w
		beq.s	loc_4F98
		move.w	#0,(f_two_player).w
		st.b	(f_ss_2p).w
		bra.s	loc_4F9C
; ===========================================================================

loc_4F98:				
		sf.b	(f_ss_2p).w

loc_4F9C:				
	disable_ints
		lea	(vdp_control_port).l,a6
		move.w	#-$74FD,(a6)
		move.w	#-$7FFC,(a6)
		move.w	#-$7521,(v_vdp_hint_counter).w
		move.w	#-$7DD0,(a6)
		move.w	#-$7BFB,(a6)
		move.w	#-$73F8,(a6)
		move.w	#-$6FFD,(a6)
		move.w	#-$7900,(a6)
		move.w	#-$72C1,(a6)
		move.w	#-$7A84,(a6)
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#-$41,d0
		move.w	d0,(vdp_control_port).l
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000082,(a5)
		move.w	#0,(vdp_data_port).l

loc_5000:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_5000
		move.w	#-$70FE,(a5)
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_502E:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_502E
		move.w	#-$70FE,(a5)
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$60000082,(a5)
		move.w	#0,(vdp_data_port).l

loc_505C:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_505C
		move.w	#-$70FE,(a5)
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BFC6C81,(a5)
		move.w	#-$6880,(a5)
		move.l	#$7C000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_508A:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_508A
		move.w	#-$70FE,(a5)
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	($FFFFF61A).w
		clr.b	(f_ss_started).w

		clear_ram v_sprite_buffer,v_sprite_buffer_end+4

		
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$100,d1

loc_50BC:				
		move.l	d0,(a1)+
		dbf	d1,loc_50BC
		lea	($FFFFD000).w,a1
		moveq	#0,d0
		move.w	#$300,d1

loc_50CC:				
		move.l	d0,(a1)+
		dbf	d1,loc_50CC
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_50DC:				
		move.l	d0,(a1)+
		dbf	d1,loc_50DC
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_50EC:				
		move.l	d0,(a1)+
		dbf	d1,loc_50EC
		move	#$2300,sr
		lea	(vdp_control_port).l,a6
		move.w	#-$70FE,(a6)
		bsr.w	sub_6C9C
		bsr.w	sub_6CE6
		move.w	#0,(v_ss_current_segment).w
		moveq	#$3C,d0	; '<'
		bsr.w	sub_178A
		clr.b	(f_level_started).w
		move.l	#0,(v_camera_x_pos).w
		move.l	#0,(v_camera_y_pos).w
		move.l	#0,(v_camera_x_pos_copy).w
		move.l	#0,(v_camera_y_pos_copy).w
		cmpi.w	#1,(v_player_mode).w
		bgt.s	loc_514C
		move.b	#9,($FFFFB000).w
		tst.w	(v_player_mode).w
		bne.s	loc_5152

loc_514C:				
		move.b	#$10,(v_ost_sidekick).w ; load Special Stage Tails

loc_5152:				
		move.b	#$5E,(v_ss_hud).w				; load Special Stage HUD
		move.b	#$5F,(v_ss_start_banner).w 		; load "START" banner
		move.b	#-$79,(v_ss_number_of_rings).w	; load "GET X RINGS" prompt  
		move.w	#$80,(v_ss_x_offset).w
		move.w	#$36,(v_ss_y_offset).w 
		bsr.w	sub_6D52
		bsr.w	sub_6DD4
		bsr.w	sub_77A2
		move.l	#$C0000,(v_ss_new_speed_factor).w
		clr.w	(v_joypad_hold).w
		clr.w	(v_joypad2_hold).w

loc_518C:				
		move.b	#$A,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.b	(v_ss_track_drawing_index).w,d0
		bne.s	loc_518C
		bsr.w	sub_5604

loc_51A0:				
		move.b	#$A,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	sub_5604
		bsr.w	sub_5514
		bsr.w	sub_5534
		move.b	(v_ss_track_duration_timer).w,d0
		subq.w	#1,d0
		bne.s	loc_51A0
		jsr	loc_3561E
		bsr.w	sub_6DE4
		jsr	ExecuteObjects

loc_51CE:
		jsr	BuildSprites
		bsr.w	RunPLC
		move.b	#$1A,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	#$92,d0	
		bsr.w	PlayMusic
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_24E8

loc_51FC:				
		bsr.w	PauseGame
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w
		move.w	(v_joypad2_hold_actual).w,(v_joypad2_hold).w
		cmpi.b	#$10,(v_gamemode).w
		bne.w	loc_541A
		move.b	#$A,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	sub_5604
		bsr.w	sub_7650
		bsr.w	sub_5514
		bsr.w	sub_5534
		bsr.w	sub_6DE4
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.b	(f_ss_started).w
		beq.s	loc_51FC
		moveq	#$3D,d0	
		bsr.w	AddPLC

loc_5250:				
		bsr.w	PauseGame
		cmpi.b	#$10,(v_gamemode).w
		bne.w	loc_541A
		move.b	#$A,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		bsr.w	sub_5604
		bsr.w	sub_7650
		bsr.w	sub_5514
		bsr.w	sub_5534
		bsr.w	sub_6DE4
		bsr.w	sub_543A
		tst.b	(f_ss_pause_only).w
		beq.s	loc_52A0
		move.w	(v_joypad_hold_actual).w,d0
		andi.w	#-$7F80,d0
		move.w	d0,(v_joypad_hold).w
		move.w	(v_joypad2_hold_actual).w,d0
		andi.w	#-$7F80,d0
		move.w	d0,(v_joypad2_hold).w
		bra.s	loc_52AC
; ===========================================================================

loc_52A0:				
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w
		move.w	(v_joypad2_hold_actual).w,(v_joypad2_hold).w

loc_52AC:				
		jsr	ExecuteObjects
		tst.b	(f_ss_chk_rings).w
		bne.s	loc_52C4
		jsr	BuildSprites
		bsr.w	RunPLC
		bra.s	loc_5250
; ===========================================================================

loc_52C4:				
		andi.b	#7,(v_emeralds).w
		tst.b	(f_ss_2p).w
		beq.s	loc_52E2
		lea	(v_ss_2p_ring_buffer).w,a0
		move.w	(a0)+,d0
		add.w	(a0)+,d0
		add.w	(a0)+,d0
		add.w	(a0)+,d0
		add.w	(a0)+,d0
		add.w	(a0)+,d0
		bra.s	loc_52EA
; ===========================================================================

loc_52E2:				
		move.w	(v_rings).w,d0
		add.w	(v_rings_p2).w,d0

loc_52EA:				
		cmp.w	(v_ss_perfect_rings_left).w,d0
		bne.s	loc_52F4
		st.b	(f_ss_perfect).w

loc_52F4:				
		bsr.w	sub_2592
		tst.w	(f_two_player_mode_copy).w
		bne.w	loc_540C
	disable_ints
		lea	(vdp_control_port).l,a6
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$737F,(a6)
		bsr.w	sub_1208
		bsr.w	sub_7868
		clr.w	(v_vdp_command_buffer).w
		move.l	#v_vdp_command_buffer,(v_vdp_command_buffer_slot).w
		move	#$2300,sr
		moveq	#$27,d0	; '''
		bsr.w	PalLoad_Now
		moveq	#0,d0
		bsr.w	NewPLC
		move.l	#$40400000,d0
		lea	(word_7822)(pc),a0
		bsr.w	sub_784A
		move.l	#$72000002,(vdp_control_port).l
		lea	(Nem_SpecialStageResults).l,a0
		bsr.w	NemDec
		move.w	(v_player_mode).w,d0
		beq.s	loc_5374
		subq.w	#1,d0
		beq.s	loc_5370
		clr.w	(v_rings).w
		bra.s	loc_5374
; ===========================================================================

loc_5370:				
		clr.w	(v_rings_p2).w

loc_5374:				
					
		move.w	(v_rings).w,(v_bonus_count_1).w
		move.w	(v_rings_p2).w,(v_bonus_count_2).w
		clr.w	(v_total_bonus_countdown).w
		tst.b	(f_got_emerald).w
		beq.s	loc_5390
		move.w	#$3E8,(v_total_bonus_countdown).w

loc_5390:				
		move.b	#1,(f_hud_score_update).w
		move.b	#1,(f_pass_bonus_update).w
		move.w	#$9A,d0	
		jsr	(PlaySound).l
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_53B0:				
		move.l	d0,(a1)+
		dbf	d1,loc_53B0
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_53C0:				
		move.l	d0,(a1)+
		dbf	d1,loc_53C0
		move.b	#$6F,($FFFFB800).w ; 'o'

loc_53CC:				
					
		move.b	#8,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.w	(f_restart).w
		beq.s	loc_53CC
		tst.l	(v_plc_buffer).w
		bne.s	loc_53CC
		move.w	#$CA,d0	
		bsr.w	PlaySound
		bsr.w	sub_2592
		tst.w	(f_two_player_mode_copy).w
		bne.s	loc_540C
		move.b	#$C,(v_gamemode).w
		rts	
; ===========================================================================

loc_540C:				
					
		move.w	#3,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_541A:				
					
		move.b	#-1,($FFFFFFE0).w
		move.b	#8,(v_vblank_routine).w
		bra.w	WaitForVBlank
; ===========================================================================

		incfile	Pal_SpecialStageStars	; loc_542A: Pal_UNK8:

; =============== S U B	R O U T	I N E =======================================


sub_543A:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#3,d0
		bne.s	loc_5470
		move.b	(v_ss_star_color_1).w,d0
		addi.b	#1,(v_ss_star_color_1).w
		andi.w	#7,d0
		add.w	d0,d0
		move.w	Pal_SpecialStageStars(pc,d0.w),($FFFFFB1C).w
		move.b	(v_ss_star_color_2).w,d0
		addi.b	#1,(v_ss_star_color_2).w
		andi.w	#7,d0
		add.w	d0,d0
		move.w	Pal_SpecialStageStars(pc,d0.w),($FFFFFB1E).w

loc_5470:				
		cmpi.b	#6,(v_special_stage).w
		bne.s	loc_5482
		cmpi.b	#3,(v_special_act).w
		beq.w	loc_54DC

loc_5482:				
		tst.b	(f_ss_checkpoint_rainbow).w
		beq.s	locret_54BA
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		bne.s	locret_54BA
		move.b	(v_ss_rainbow_palette).w,d0
		addi.b	#1,(v_ss_rainbow_palette).w
		andi.b	#3,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	word_54C4(pc,d0.w),($FFFFFB76).w
		move.w	word_54C6(pc,d0.w),($FFFFFB78).w
		move.w	word_54C8(pc,d0.w),($FFFFFB7A).w

locret_54BA:				
		rts	
; ===========================================================================
word_54BC:	dc.w   $EE,  $C0,  $EE,	 $C0; 0
word_54C4:	dc.w   $EE		; 0
word_54C6:	dc.w   $CC		; 0
word_54C8:	dc.w   $88,  $E0,  $C0,	 $80, $EE0, $CC0, $880,	$E0E, $C0C, $808; 0
; ===========================================================================

loc_54DC:				
		tst.b	(f_ss_pause_only).w
		beq.s	loc_5482
		moveq	#0,d0
		move.b	($FFFFFE0F).w,d0
		andi.b	#1,d0
		bne.w	loc_5482
		move.w	(v_rings).w,d2
		add.w	(v_rings_p2).w,d2
		cmp.w	(v_ss_ring_requirement).w,d2
		blt.w	loc_5482
		lea	($FFFFFB02).w,a0
		movea.l	a0,a1
		move.w	(a0)+,d0
		moveq	#$B,d1

loc_550A:				
		move.w	(a0)+,(a1)+
		dbf	d1,loc_550A
		move.w	d0,(a1)
		rts	
; End of function sub_543A


; =============== S U B	R O U T	I N E =======================================


sub_5514:				
					
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.s	locret_5532
		movea.l	#v_ss_perspective_data,a0
		moveq	#0,d0
		move.b	(v_ss_track_mapping_frame).w,d0
		add.w	d0,d0
		adda.w	(a0,d0.w),a0
		move.l	a0,(v_ss_ctrl_record_buffer_end).w

locret_5532:				
		rts	
; End of function sub_5514


; =============== S U B	R O U T	I N E =======================================


sub_5534:				
					
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.w	locret_55DC
		moveq	#0,d0
		move.b	(v_ss_current_segment).w,d0
		cmp.b	(v_ss_last_segment_2).w,d0
		beq.w	locret_55DC
		move.b	d0,(v_ss_last_segment_2).w
		movea.l	(v_ss_current_layout).w,a1
		move.b	(a1,d0.w),d3
		andi.w	#$7F,d3
		lea	(byte_55FE).l,a0
		move.b	(a0,d3.w),d3
		add.w	d3,d3
		add.w	d3,d3
		movea.l	(v_ss_current_obj_locations).w,a0

loc_556E:				
		bsr.w	sub_6F8E
		bne.s	locret_55DC
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	loc_55B2
		move.b	d0,d1
		andi.b	#$40,d1
		bne.s	loc_559A
		addq.w	#1,(v_ss_perfect_rings_left).w
		move.b	#$60,(a1) ; '`'
		add.w	d0,d0
		add.w	d0,d0
		add.w	d3,d0
		move.w	d0,$30(a1)
		move.b	(a0)+,$26(a1)
		bra.s	loc_556E
; ===========================================================================

loc_559A:				
		andi.w	#$3F,d0
		move.b	#$61,(a1)
		add.w	d0,d0
		add.w	d0,d0
		add.w	d3,d0
		move.w	d0,$30(a1)
		move.b	(a0)+,$26(a1)
		bra.s	loc_556E
; ===========================================================================

loc_55B2:				
		move.l	a0,(v_ss_current_obj_locations).w
		addq.b	#1,d0
		beq.s	locret_55DC
		addq.b	#1,d0
		beq.s	loc_55D8
		addq.b	#1,d0
		beq.s	loc_55CC
		st.b	(f_ss_no_checkpoint).w
		sf.b	(f_ss_no_checkpoint_msg).w
		bra.s	loc_55D8
; ===========================================================================

loc_55CC:				
		tst.b	(f_ss_2p).w
		bne.s	loc_55D8
		move.b	#$59,(a1)
		rts	
; ===========================================================================

loc_55D8:				
		move.b	#$5A,(a1)

locret_55DC:				
		rts	
; End of function sub_5534

; ===========================================================================
dword_55DE:	dc.l $40000002		; 0 
		dc.l $47000002		; 1
		dc.l $4E000002		; 2
		dc.l $55000002		; 3
		dc.l $40000003		; 4
		dc.l $47000003		; 5
		dc.l $4E000003		; 6
		dc.l $55000003		; 7
byte_55FE:	dc.b $18		; 0 
					
		dc.b $18		; 1
		dc.b  $C		; 2
		dc.b $10		; 3
		dc.b  $B		; 4
		dc.b   0		; 5

; =============== S U B	R O U T	I N E =======================================


sub_5604:				
					
		moveq	#0,d0
		move.b	(v_ss_track_drawing_index).w,d0
		cmpi.b	#4,d0
		bge.w	loc_6C0A
		add.w	d0,d0
		add.w	d0,d0
		bne.w	loc_56D2
		move.l	(v_ss_track_last_mappings).w,(v_ss_track_last_mappings_copy).w
		move.b	(v_ss_track_mapping_frame).w,(v_ss_track_last_mapping_frame).w
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		move.b	(v_ss_current_segment).w,d1
		move.b	(v_ss_track_anim_frame).w,d2
		movea.l	(v_ss_current_layout).w,a1
		move.b	(a1,d1.w),d3
		andi.b	#$7F,d3
		move.b	d3,(v_ss_track_anim).w
		move.w	d3,d1
		add.w	d3,d3
		lea	(Ani_SpecialStageTrack).l,a1
		adda.w	(a1,d3.w),a1
		adda.w	d2,a1
		moveq	#0,d4
		move.b	(a1),d4
		move.b	d4,(v_ss_track_mapping_frame).w
		lsl.w	#2,d4
		lea	(off_643E).l,a1
		movea.l	(a1,d4.w),a0
		movea.l	a0,a1
		moveq	#0,d2
		move.b	(a0)+,d2
		move.b	(a0)+,d2
		move.b	(a0)+,d2
		lsl.w	#8,d2
		move.b	(a0)+,d2
		addq.w	#4,d2
		adda.w	d2,a1
		movea.l	a1,a2
		moveq	#0,d2
		move.b	(a1)+,d2
		move.b	(a1)+,d2
		move.b	(a1)+,d2
		lsl.w	#8,d2
		move.b	(a1)+,d2
		addq.w	#4,d2
		adda.w	d2,a2
		move.b	(a2)+,d2
		move.b	(a2)+,d2
		move.b	(a2)+,d2
		move.b	(a2)+,d2
		move.l	a0,(v_ss_track_mappings_bitflags).w
		move.l	a0,(v_ss_track_last_mappings).w
		move.l	a1,(v_ss_track_mappings_uncompressed).w
		move.l	a2,(v_ss_track_mappings_rle).w
		lea	(byte_55FE)(pc),a4
		move.b	(a4,d1.w),d2
		move.b	(v_ss_track_anim_frame).w,(v_ss_track_last_anim_frame).w
		addi.b	#1,(v_ss_track_anim_frame).w
		cmp.b	(v_ss_track_anim_frame).w,d2
		bne.s	loc_56D2
		move.b	#0,(v_ss_track_anim_frame).w
		move.b	(v_ss_current_segment).w,(v_ss_last_segment).w
		addi.b	#1,(v_ss_current_segment).w

loc_56D2:				
		tst.b	(v_ss_alternate_pnt).w
		beq.s	loc_56DC
		addi.w	#$10,d0

loc_56DC:				
		lea	(dword_55DE)(pc),a3
		movea.l	(a3,d0.w),a3
		move.l	a3,(vdp_control_port).l
		lea	(vdp_data_port).l,a6
		bsr.w	loc_6C0A
		movea.l	(v_ss_track_mappings_bitflags).w,a0
		movea.l	(v_ss_track_mappings_uncompressed).w,a1
		movea.l	(v_ss_track_mappings_rle).w,a2
		lea	(v_ss_draw_reg_buffer).w,a3
		movem.w	(a3)+,d2-d7
		lea	(word_651E).l,a3
		lea	(byte_69E6).l,a4
		movea.w	#$FFF8,a5
		moveq	#0,d0
		tst.b	(v_ss_track_orientation).w
		bne.w	loc_5D8A

loc_5722:				
					
		adda.w	#1,a5
		cmpa.w	#0,a5
		beq.w	loc_5D58

loc_572E:				
					
		moveq	#0,d1
		subq.w	#1,d7
		bpl.s	loc_5738
		move.b	(a0)+,d6
		moveq	#7,d7

loc_5738:				
		add.b	d6,d6
		bcc.s	loc_5788
		subq.b	#1,d5
		bpl.s	loc_5744
		move.b	(a1)+,d4
		moveq	#7,d5

loc_5744:				
		add.b	d4,d4
		bcc.s	loc_5768
		moveq	#$A,d0
		sub.b	d5,d0
		subq.b	#3,d0
		add.w	d0,d0
		move.w	off_5758(pc,d0.w),d0
		jmp	off_5758(pc,d0.w)
; ===========================================================================
off_5758:	index offset(*)

		ptr loc_58FE	; 0 			
		ptr loc_58D4	; 1
		ptr loc_58AA	; 2
		ptr loc_5880	; 3
		ptr loc_5856	; 4
		ptr loc_5836	; 5
		ptr loc_5806	; 6
		ptr loc_57DE	; 7
; ===========================================================================

loc_5768:				
		moveq	#6,d0
		sub.b	d5,d0
		addq.b	#1,d0
		add.w	d0,d0
		move.w	off_5778(pc,d0.w),d0
		jmp	off_5778(pc,d0.w)
; ===========================================================================
off_5778:	index offset(*)
		ptr loc_5A1A	; 0 		
		ptr loc_5A02	; 1
		ptr loc_59DC	; 2
		ptr loc_59B6	; 3
		ptr loc_5990	; 4
		ptr loc_596A	; 5
		ptr loc_5944	; 6
		ptr loc_5928	; 7
; ===========================================================================
; SSTrackDrawUnc_Read10LUT:
loc_5788:				
		subq.b	#1,d3
		bpl.s	loc_579C
		move.b	(a2)+,d2
		cmpi.b	#-1,d2
		bne.s	loc_579A
		moveq	#0,d3
		bra.w	loc_5722
; ===========================================================================

loc_579A:				
		moveq	#7,d3

loc_579C:				
		add.b	d2,d2
		bcc.s	loc_57BE
		moveq	#7,d0
		sub.b	d3,d0
		add.b	d0,d0
		move.w	off_57AE(pc,d0.w),d0
		jmp	off_57AE(pc,d0.w)
; ===========================================================================
; SSTrackDrawUnc_Read6LUT:
off_57AE:	index offset(*)
		ptr loc_5BCE	; 0 				
		ptr loc_5B92	; 1
		ptr loc_5B56	; 2
		ptr loc_5B1A	; 3
		ptr loc_5ADE	; 4
		ptr loc_5AA2	; 5
		ptr loc_5A66	; 6
		ptr loc_5A34	; 7
; ===========================================================================

loc_57BE:				
		moveq	#6,d0
		sub.b	d3,d0
		addq.b	#1,d0
		add.b	d0,d0
		move.w	off_57CE(pc,d0.w),d0
		jmp	off_57CE(pc,d0.w)
; ===========================================================================
; SSTrackDrawRLE_Read7LUT:
off_57CE:	index offset(*)
		ptr loc_5D34	; 0 			
		ptr loc_5D12	; 1
		ptr loc_5CE2	; 2
		ptr loc_5CB2	; 3
		ptr loc_5C82	; 4
		ptr loc_5C52	; 5
		ptr loc_5C22	; 6
		ptr loc_5BFC	; 7
; ===========================================================================

loc_57DE:				
		moveq	#0,d0
		move.b	(a1)+,d0
		lsl.w	#2,d0
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#6,d5
		bra.w	loc_572E
; ===========================================================================

loc_5806:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$200,d0
		move.b	(a1)+,d1
		lsl.w	#1,d1
		or.w	d1,d0
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#7,d5
		bra.w	loc_572E
; ===========================================================================

loc_5836:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$300,d0
		move.b	(a1)+,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#0,d5
		bra.w	loc_572E
; ===========================================================================

loc_5856:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$380,d0
		move.b	(a1)+,d4
		ror.b	#1,d4
		move.b	d4,d1
		andi.b	#$7F,d1	; ''
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#1,d5
		bra.w	loc_572E
; ===========================================================================

loc_5880:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3C0,d0
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d1
		andi.b	#$3F,d1	; '?'
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#2,d5
		bra.w	loc_572E
; ===========================================================================

loc_58AA:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3E0,d0
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#3,d5
		bra.w	loc_572E
; ===========================================================================

loc_58D4:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F0,d0
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#4,d5
		bra.w	loc_572E
; ===========================================================================

loc_58FE:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F8,d0
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#5,d5
		bra.w	loc_572E
; ===========================================================================

loc_5928:				
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#2,d5
		bra.w	loc_572E
; ===========================================================================

loc_5944:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$20,d0	; ' '
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#3,d5
		bra.w	loc_572E
; ===========================================================================

loc_596A:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$30,d0	; '0'
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#4,d5
		bra.w	loc_572E
; ===========================================================================

loc_5990:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$38,d0	; '8'
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#5,d5
		bra.w	loc_572E
; ===========================================================================

loc_59B6:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0	; '<'
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#6,d5
		bra.w	loc_572E
; ===========================================================================

loc_59DC:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0	; '>'
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#7,d5
		bra.w	loc_572E
; ===========================================================================

loc_5A02:				
		lsr.b	#2,d4
		andi.w	#$3F,d4	; '?'
		add.w	d4,d4
		move.w	(a3,d4.w),d4
		ori.w	#$6000,d4
		move.w	d4,(a6)
		moveq	#0,d5
		bra.w	loc_572E
; ===========================================================================

loc_5A1A:				
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		ori.w	#$6000,d0
		move.w	d0,(a6)
		moveq	#1,d5
		bra.w	loc_572E
; ===========================================================================

loc_5A34:				
		move.b	(a2)+,d2
		ror.b	#1,d2
		move.b	d2,d0
		andi.w	#$7F,d0	; ''
		moveq	#1,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5A5C:				
		move.w	d1,(a6)
		dbf	d0,loc_5A5C
		bra.w	loc_572E
; ===========================================================================

loc_5A66:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$40,d1	; '@'
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0	; '?'
		or.b	d1,d0
		moveq	#2,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5A98:				
		move.w	d1,(a6)
		dbf	d0,loc_5A98
		bra.w	loc_572E
; ===========================================================================

loc_5AA2:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$60,d1	; '`'
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d0
		andi.w	#$1F,d0
		or.b	d1,d0
		moveq	#3,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5AD4:				
		move.w	d1,(a6)
		dbf	d0,loc_5AD4
		bra.w	loc_572E
; ===========================================================================

loc_5ADE:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$70,d1	; 'p'
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d0
		andi.w	#$F,d0
		or.b	d1,d0
		moveq	#4,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5B10:				
		move.w	d1,(a6)
		dbf	d0,loc_5B10
		bra.w	loc_572E
; ===========================================================================

loc_5B1A:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$78,d1	; 'x'
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d0
		andi.w	#7,d0
		or.b	d1,d0
		moveq	#5,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5B4C:				
		move.w	d1,(a6)
		dbf	d0,loc_5B4C
		bra.w	loc_572E
; ===========================================================================

loc_5B56:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7C,d1	; '|'
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d0
		andi.w	#3,d0
		or.b	d1,d0
		moveq	#6,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5B88:				
		move.w	d1,(a6)
		dbf	d0,loc_5B88
		bra.w	loc_572E
; ===========================================================================

loc_5B92:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7E,d1	; '~'
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d0
		andi.w	#1,d0
		or.b	d1,d0
		moveq	#7,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5722
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5BC4:				
		move.w	d1,(a6)
		dbf	d0,loc_5BC4
		bra.w	loc_572E
; ===========================================================================

loc_5BCE:				
		lsr.b	#1,d2
		andi.w	#$7F,d2	; ''
		moveq	#0,d3
		cmpi.b	#$7F,d2	; ''
		beq.w	loc_5722
		addi.w	#$40,d2	; '@'
		add.w	d2,d2
		add.w	d2,d2
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#-$2000,d1

loc_5BF2:				
		move.w	d1,(a6)
		dbf	d0,loc_5BF2
		bra.w	loc_572E
; ===========================================================================

loc_5BFC:				
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		add.w	d0,d0
		moveq	#2,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5C18:				
		move.w	d1,(a6)
		dbf	d0,loc_5C18
		bra.w	loc_572E
; ===========================================================================

loc_5C22:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$20,d0	; ' '
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		moveq	#3,d3
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5C48:				
		move.w	d1,(a6)
		dbf	d0,loc_5C48
		bra.w	loc_572E
; ===========================================================================

loc_5C52:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$30,d0	; '0'
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#4,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5C78:				
		move.w	d1,(a6)
		dbf	d0,loc_5C78
		bra.w	loc_572E
; ===========================================================================

loc_5C82:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$38,d0	; '8'
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#5,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5CA8:				
		move.w	d1,(a6)
		dbf	d0,loc_5CA8
		bra.w	loc_572E
; ===========================================================================

loc_5CB2:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0	; '<'
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#6,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5CD8:				
		move.w	d1,(a6)
		dbf	d0,loc_5CD8
		bra.w	loc_572E
; ===========================================================================

loc_5CE2:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0	; '>'
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#7,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5D08:				
		move.w	d1,(a6)
		dbf	d0,loc_5D08
		bra.w	loc_572E
; ===========================================================================

loc_5D12:				
		lsr.b	#2,d2
		andi.w	#$3F,d2	; '?'
		add.w	d2,d2
		add.w	d2,d2
		moveq	#0,d3
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#-$2000,d1

loc_5D2A:				
		move.w	d1,(a6)
		dbf	d0,loc_5D2A
		bra.w	loc_572E
; ===========================================================================

loc_5D34:				
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		add.w	d0,d0
		moveq	#1,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_5D4E:				
		move.w	d1,(a6)
		dbf	d0,loc_5D4E
		bra.w	loc_572E
; ===========================================================================

loc_5D58:				
					
		cmpi.b	#3,(v_ss_track_drawing_index).w
		beq.s	loc_5D76
		move.l	a0,(v_ss_track_mappings_bitflags).w
		move.l	a1,(v_ss_track_mappings_uncompressed).w
		move.l	a2,(v_ss_track_mappings_rle).w
		lea	(v_ss_draw_reg_buffer_end).w,a3
		movem.w	d2-d7,-(a3)
		rts	
; ===========================================================================

loc_5D76:				
		lea	(v_ss_draw_reg_buffer).w,a2
		moveq	#0,d0
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		rts	
; ===========================================================================

loc_5D8A:				
					
		adda.w	#1,a5
		cmpa.w	#0,a5
		beq.w	loc_5D58
		lea	($FFFFD000).w,a6
		swap	d0
		addi.w	#$100,d0
		andi.w	#$F00,d0
		adda.w	d0,a6
		swap	d0

loc_5DA8:				
					
		moveq	#0,d1
		subq.w	#1,d7
		bpl.s	loc_5DB2
		move.b	(a0)+,d6
		moveq	#7,d7

loc_5DB2:				
		add.b	d6,d6
		bcc.s	loc_5E06
		subq.b	#1,d5
		bpl.s	loc_5DBE
		move.b	(a1)+,d4
		moveq	#7,d5

loc_5DBE:				
		add.b	d4,d4
		bcc.s	loc_5DE4
		move.w	#$A,d0
		sub.b	d5,d0
		subq.b	#3,d0
		add.w	d0,d0
		move.w	off_5DD4(pc,d0.w),d0
		jmp	off_5DD4(pc,d0.w)
; ===========================================================================
off_5DD4:	index offset(*)
		ptr loc_5F82	; 0 		
		ptr loc_5F58	; 1
		ptr loc_5F2E	; 2
		ptr loc_5F04	; 3
		ptr loc_5EDA	; 4
		ptr loc_5EBA	; 5
		ptr loc_5E8A	; 6
		ptr loc_5E60	; 7
; ===========================================================================

loc_5DE4:				
		move.w	#6,d0
		sub.b	d5,d0
		addq.b	#1,d0
		add.w	d0,d0
		move.w	off_5DF6(pc,d0.w),d0
		jmp	off_5DF6(pc,d0.w)
; ===========================================================================
off_5DF6:	index offset(*)
		ptr loc_609E	; 0 
		ptr loc_6086	; 1
		ptr loc_6060	; 2
		ptr loc_603A	; 3
		ptr loc_6014	; 4
		ptr loc_5FEE	; 5
		ptr loc_5FC8	; 6
		ptr loc_5FAC	; 7
; ===========================================================================

loc_5E06:				
		subq.b	#1,d3
		bpl.s	loc_5E1A
		move.b	(a2)+,d2
		cmpi.b	#-1,d2
		bne.s	loc_5E18
		moveq	#0,d3
		bra.w	loc_5D8A
; ===========================================================================

loc_5E18:				
		moveq	#7,d3

loc_5E1A:				
		add.b	d2,d2
		bcc.s	loc_5E3E
		move.w	#7,d0
		sub.b	d3,d0
		add.b	d0,d0
		move.w	off_5E2E(pc,d0.w),d0
		jmp	off_5E2E(pc,d0.w)
; ===========================================================================
off_5E2E:	index offset(*)
		ptr	loc_6252	; 0 		
		ptr loc_6216	; 1
		ptr loc_61DA	; 2
		ptr loc_619E	; 3
		ptr loc_6162	; 4
		ptr loc_6126	; 5
		ptr loc_60EA	; 6
		ptr loc_60B8	; 7
; ===========================================================================

loc_5E3E:				
		move.w	#6,d0
		sub.b	d3,d0
		addq.b	#1,d0
		add.b	d0,d0
		move.w	off_5E50(pc,d0.w),d0
		jmp	off_5E50(pc,d0.w)
; ===========================================================================
off_5E50:	index offset(*)
		ptr loc_63B8	; 0 		
		ptr loc_6396	; 1
		ptr loc_6366	; 2
		ptr loc_6336	; 3
		ptr loc_6306	; 4
		ptr loc_62D6	; 5
		ptr loc_62A6	; 6
		ptr loc_6280	; 7
; ===========================================================================

loc_5E60:				
		move.w	#0,d0
		move.b	(a1)+,d0
		lsl.w	#2,d0
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#6,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5E8A:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$200,d0
		move.b	(a1)+,d1
		lsl.w	#1,d1
		or.w	d1,d0
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#7,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5EBA:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$300,d0
		move.b	(a1)+,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#0,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5EDA:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$380,d0
		move.b	(a1)+,d4
		ror.b	#1,d4
		move.b	d4,d1
		andi.b	#$7F,d1	; ''
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#1,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F04:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3C0,d0
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d1
		andi.b	#$3F,d1	; '?'
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#2,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F2E:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3E0,d0
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#3,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F58:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F0,d0
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#4,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5F82:				
		move.b	d4,d0
		lsl.w	#2,d0
		andi.w	#$3F8,d0
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#5,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5FAC:				
		move.b	(a1)+,d4
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#2,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5FC8:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$20,d0	; ' '
		move.b	(a1)+,d4
		ror.b	#3,d4
		move.b	d4,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#3,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_5FEE:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$30,d0	; '0'
		move.b	(a1)+,d4
		ror.b	#4,d4
		move.b	d4,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#4,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_6014:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$38,d0	; '8'
		move.b	(a1)+,d4
		rol.b	#3,d4
		move.b	d4,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#5,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_603A:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0	; '<'
		move.b	(a1)+,d4
		rol.b	#2,d4
		move.b	d4,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#6,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_6060:				
		move.b	d4,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0	; '>'
		move.b	(a1)+,d4
		rol.b	#1,d4
		move.b	d4,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#7,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_6086:				
		lsr.b	#2,d4
		andi.w	#$3F,d4	; '?'
		add.w	d4,d4
		move.w	(a3,d4.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#0,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_609E:				
		ror.b	#2,d4
		move.b	d4,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		move.w	(a3,d0.w),d0
		eori.w	#$6800,d0
		move.w	d0,-(a6)
		moveq	#1,d5
		bra.w	loc_5DA8
; ===========================================================================

loc_60B8:				
		move.b	(a2)+,d2
		ror.b	#1,d2
		move.b	d2,d0
		andi.w	#$7F,d0	; ''
		moveq	#1,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_60E0:				
		move.w	d1,-(a6)
		dbf	d0,loc_60E0
		bra.w	loc_5DA8
; ===========================================================================

loc_60EA:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$40,d1	; '@'
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0	; '?'
		or.b	d1,d0
		moveq	#2,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_611C:				
		move.w	d1,-(a6)
		dbf	d0,loc_611C
		bra.w	loc_5DA8
; ===========================================================================

loc_6126:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$60,d1	; '`'
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d0
		andi.w	#$1F,d0
		or.b	d1,d0
		moveq	#3,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_6158:				
		move.w	d1,-(a6)
		dbf	d0,loc_6158
		bra.w	loc_5DA8
; ===========================================================================

loc_6162:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$70,d1	; 'p'
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d0
		andi.w	#$F,d0
		or.b	d1,d0
		moveq	#4,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_6194:				
		move.w	d1,-(a6)
		dbf	d0,loc_6194
		bra.w	loc_5DA8
; ===========================================================================

loc_619E:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$78,d1	; 'x'
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d0
		andi.w	#7,d0
		or.b	d1,d0
		moveq	#5,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_61D0:				
		move.w	d1,-(a6)
		dbf	d0,loc_61D0
		bra.w	loc_5DA8
; ===========================================================================

loc_61DA:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7C,d1	; '|'
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d0
		andi.w	#3,d0
		or.b	d1,d0
		moveq	#6,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_620C:				
		move.w	d1,-(a6)
		dbf	d0,loc_620C
		bra.w	loc_5DA8
; ===========================================================================

loc_6216:				
		move.b	d2,d1
		lsr.b	#1,d1
		andi.b	#$7E,d1	; '~'
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d0
		andi.w	#1,d0
		or.b	d1,d0
		moveq	#7,d3
		cmpi.b	#$7F,d0	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d0	; '@'
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_6248:				
		move.w	d1,-(a6)
		dbf	d0,loc_6248
		bra.w	loc_5DA8
; ===========================================================================

loc_6252:				
		lsr.b	#1,d2
		andi.w	#$7F,d2	; ''
		moveq	#0,d3
		cmpi.b	#$7F,d2	; ''
		beq.w	loc_5D8A
		addi.w	#$40,d2	; '@'
		add.w	d2,d2
		add.w	d2,d2
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#-$2000,d1

loc_6276:				
		move.w	d1,-(a6)
		dbf	d0,loc_6276
		bra.w	loc_5DA8
; ===========================================================================

loc_6280:				
		move.b	(a2)+,d2
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		add.w	d0,d0
		moveq	#2,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_629C:				
		move.w	d1,-(a6)
		dbf	d0,loc_629C
		bra.w	loc_5DA8
; ===========================================================================

loc_62A6:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$20,d0	; ' '
		move.b	(a2)+,d2
		ror.b	#3,d2
		move.b	d2,d1
		andi.b	#$1F,d1
		or.b	d1,d0
		moveq	#3,d3
		add.w	d0,d0
		add.w	d0,d0
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_62CC:				
		move.w	d1,-(a6)
		dbf	d0,loc_62CC
		bra.w	loc_5DA8
; ===========================================================================

loc_62D6:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$30,d0	; '0'
		move.b	(a2)+,d2
		ror.b	#4,d2
		move.b	d2,d1
		andi.b	#$F,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#4,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_62FC:				
		move.w	d1,-(a6)
		dbf	d0,loc_62FC
		bra.w	loc_5DA8
; ===========================================================================

loc_6306:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$38,d0	; '8'
		move.b	(a2)+,d2
		rol.b	#3,d2
		move.b	d2,d1
		andi.b	#7,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#5,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_632C:				
		move.w	d1,-(a6)
		dbf	d0,loc_632C
		bra.w	loc_5DA8
; ===========================================================================

loc_6336:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3C,d0	; '<'
		move.b	(a2)+,d2
		rol.b	#2,d2
		move.b	d2,d1
		andi.b	#3,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#6,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_635C:				
		move.w	d1,-(a6)
		dbf	d0,loc_635C
		bra.w	loc_5DA8
; ===========================================================================

loc_6366:				
		move.b	d2,d0
		lsr.b	#2,d0
		andi.w	#$3E,d0	; '>'
		move.b	(a2)+,d2
		rol.b	#1,d2
		move.b	d2,d1
		andi.b	#1,d1
		or.b	d1,d0
		add.w	d0,d0
		add.w	d0,d0
		moveq	#7,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_638C:				
		move.w	d1,-(a6)
		dbf	d0,loc_638C
		bra.w	loc_5DA8
; ===========================================================================

loc_6396:				
		lsr.b	#2,d2
		andi.w	#$3F,d2	; '?'
		add.w	d2,d2
		add.w	d2,d2
		moveq	#0,d3
		move.w	(a4,d2.w),d1
		move.w	2(a4,d2.w),d0
		ori.w	#-$2000,d1

loc_63AE:				
		move.w	d1,-(a6)
		dbf	d0,loc_63AE
		bra.w	loc_5DA8
; ===========================================================================

loc_63B8:				
		ror.b	#2,d2
		move.b	d2,d0
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		add.w	d0,d0
		moveq	#1,d3
		move.w	(a4,d0.w),d1
		move.w	2(a4,d0.w),d0
		ori.w	#-$2000,d1

loc_63D2:				
		move.w	d1,-(a6)
		dbf	d0,loc_63D2
		bra.w	loc_5DA8
; ===========================================================================

Ani_SpecialStageTrack:	index offset(*)
		ptr byte_63E6	; 0 		
		ptr byte_63FE	; 1
		ptr byte_6416	; 2
		ptr byte_6422	; 3
		ptr byte_6432	; 4

		
byte_63E6:	
		dc.b $26,$27,$28,$29,$2A,$2B,$26 ; turning
		dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, $A, $B, $C, $D, $E, $F,$10 ; rise
		
byte_63FE:	
		dc.b $26,$27,$28,$29,$2A,$2B,$26 ; turning
		dc.b $15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20,$21,$22,$23,$24,$25 ; drop

byte_6416:	
		dc.b $26,$27,$28,$29,$2A,$2B,$26 ; turning
		dc.b $2C,$2D,$2E,$2F,$30 ; exit turn
					
byte_6422:	
		dc.b $11,$12,$13,$14,$11,$12,$13,$14 ; straight
		dc.b $11,$12,$13,$14,$11,$12,$13,$14 ; straight
					
byte_6432:	
		dc.b $11,$12,$13,$14 ; straight
		dc.b $31,$32,$33,$34,$35,$36,$37 ; enter turn
		even			
off_643E:	
		dc.l MapSpec_Rise1	; 0 
		dc.l MapSpec_Rise2	; 1
		dc.l MapSpec_Rise3	; 2
		dc.l MapSpec_Rise4	; 3
		dc.l MapSpec_Rise5	; 4
		dc.l MapSpec_Rise6	; 5
		dc.l MapSpec_Rise7	; 6
		dc.l MapSpec_Rise8	; 7
		dc.l MapSpec_Rise9	; 8
		dc.l MapSpec_Rise10	; 9
		dc.l MapSpec_Rise11	; 10
		dc.l MapSpec_Rise12	; 11
		dc.l MapSpec_Rise13	; 12
		dc.l MapSpec_Rise14	; 13
		dc.l MapSpec_Rise15	; 14
		dc.l MapSpec_Rise16	; 15
		dc.l MapSpec_Rise17	; 16
		dc.l MapSpec_Straight1	; 17
		dc.l MapSpec_Straight2	; 18
		dc.l MapSpec_Straight3	; 19
		dc.l MapSpec_Straight4	; 20
		dc.l MapSpec_Drop1	; 21
		dc.l MapSpec_Drop2	; 22
		dc.l MapSpec_Drop3	; 23
		dc.l MapSpec_Drop4	; 24
		dc.l MapSpec_Drop5	; 25
		dc.l MapSpec_Drop6	; 26
		dc.l MapSpec_Drop7	; 27
		dc.l MapSpec_Drop8	; 28
		dc.l MapSpec_Drop9	; 29
		dc.l MapSpec_Drop10	; 30
		dc.l MapSpec_Drop11	; 31
		dc.l MapSpec_Drop12	; 32
		dc.l MapSpec_Drop13	; 33
		dc.l MapSpec_Drop14	; 34
		dc.l MapSpec_Drop15	; 35
		dc.l MapSpec_Drop16	; 36
		dc.l MapSpec_Drop17	; 37
		dc.l MapSpec_Turning1	; 38
		dc.l MapSpec_Turning2	; 39
		dc.l MapSpec_Turning3	; 40
		dc.l MapSpec_Turning4	; 41
		dc.l MapSpec_Turning5	; 42
		dc.l MapSpec_Turning6	; 43
		dc.l MapSpec_Unturn1	; 44
		dc.l MapSpec_Unturn2	; 45
		dc.l MapSpec_Unturn3	; 46
		dc.l MapSpec_Unturn4	; 47
		dc.l MapSpec_Unturn5	; 48
		dc.l MapSpec_Turn1	; 49
		dc.l MapSpec_Turn2	; 50
		dc.l MapSpec_Turn3	; 51
		dc.l MapSpec_Turn4	; 52
		dc.l MapSpec_Turn5	; 53
		dc.l MapSpec_Turn6	; 54
		dc.l MapSpec_Turn7	; 55
word_651E:	dc.w $8001,$8007,$802C,$800B,$8024,$8824,$8039,$882B; 0
					
		dc.w $805D,$885D,$802B,$804A,$8049,$8037,$8849,$8045; 8
		dc.w $8845,$883A,$8048,$8850,$8036,$8837,$803A,$8050; 16
		dc.w $8842,$8042,$8815,$801D,$804B,$8817,$8848,$8836; 24
		dc.w $8038,$884B,$8015,$8021,$8017,$8033,$801A,$802A; 32
		dc.w $805E,$8028,$8030,$8821,$8838,$881A,$8025,$885E; 40
		dc.w $8825,$8833,$8003,$8814,$8014,$8004,$804E,$8803; 48
		dc.w $800C,$882A,$8002,$8051,$8040,$803D,$8019,$8052; 56
		dc.w $8009,$805A,$8830,$884E,$8852,$8851,$8809,$8840; 64
		dc.w $802F,$885A,$8818,$8034,$8819,$882F,$883D,$803E; 72
		dc.w $8018,$880C,$8012,$8804,$8026,$8834,$8805,$803B; 80
		dc.w $883E,$883B,$8000,$8802,$8005,$800D,$8055,$80AF; 88
		dc.w $801C,$801B,$880D,$8016,$8812,$801F,$8832,$8013; 96
		dc.w $8092,$8826,$8010,$804D,$8047,$8892,$8800,$8062; 104
		dc.w $8066,$8090,$8008,$887C,$8867,$88F7,$800E,$8060; 112
		dc.w $8032,$8094,$881C,$8905,$88B0,$8059,$800F,$8067; 120
		dc.w $8068,$8894,$807C,$80B0,$80B1,$8006,$8841,$8087; 128
		dc.w $8093,$80CC,$881F,$8868,$8041,$808F,$8890,$80C2; 136
		dc.w $8813,$88C2,$805C,$8064,$80D8,$881B,$88CC,$8811; 144
		dc.w $8855,$88E2,$88F3,$8044,$88D8,$8085,$80A1,$80C1; 152
		dc.w $8119,$8889,$880A,$8822; 160
		dc.w $803F,$805B,$807F,$8886,$8808,$8080,$8866,$88E0; 0
		dc.w $88C1,$8020,$8022,$8054,$80D2,$8859,$88B1,$8860; 8
		dc.w $8919,$88A4,$888F,$800A,$8061,$8075,$8095,$80B6; 16
		dc.w $80E0,$8810,$8898,$885B,$88D2,$8816,$8053,$8091; 24
		dc.w $8096,$80A4,$80DD,$80E6,$887A,$884D,$88E6,$8011; 32
		dc.w $8057,$807A,$8086,$809E,$80DA,$8058,$80DC,$80E3; 40
		dc.w $8863,$803C,$8056,$8069,$807E,$80AE,$80B5,$80B8; 48
		dc.w $80CD,$80FB,$80FF,$885C,$88CD,$8874,$88EA,$88FF; 56
		dc.w $88B5,$8043,$806C,$8074,$8077,$8089,$8097,$809F; 64
		dc.w $80A0,$8113,$811B,$8878,$880F,$88E1,$88FB,$8928; 72
		dc.w $8063,$8084,$808D,$80CB,$80D7,$80E9,$8128,$8138; 80
		dc.w $88AE,$88EC,$8031,$804C,$80E2,$80EA,$8864,$8029; 88
		dc.w $802D,$806D,$8078,$8088,$80B4,$80BE,$80CF,$80E1; 96
		dc.w $80E4,$8854,$88D6,$88D7,$8861,$892B,$8847,$8035; 104
		dc.w $806A,$8072,$8073,$8098,$80D5,$80D6,$8116,$811E; 112
		dc.w $8126,$8127,$812F,$815D,$8869,$8888,$8875,$8897; 120
		dc.w $88B4,$88D1,$88D4,$88D5,$88CB,$88E4,$8891,$8862; 128
		dc.w $8806,$88B8,$8065,$806E,$8071,$807D,$80D1,$80E7; 136
		dc.w $80F9,$8108,$812E,$814B,$8881,$8885,$8877,$887E; 144
		dc.w $8895,$88DF,$8887,$886C,$88F5,$8908,$8879,$886D; 152
		dc.w $892A,$88AA,$801E,$8027,$8046,$805F,$8070,$8079; 160
		dc.w $809A,$80AA,$80C3,$80D3,$80D4,$80DE,$80DF,$80F8; 168
		dc.w $8100,$8101,$812B,$8133,$8136,$8143,$8151,$882E; 176
		dc.w $889E,$8899,$88D3,$88DD,$88DE,$88E9,$88EF,$88F0; 184
		dc.w $88F8,$8927,$88BE,$8896,$804F,$806F,$8081,$808B; 192
		dc.w $808E,$809C,$80A3,$80B3,$80C0,$80CE,$80F0,$80F1; 200
		dc.w $80F5,$80F7,$8102,$8104,$8105,$8109,$810C,$8114; 208
		dc.w $8118,$8120,$8124,$8125,$812A,$8130,$8132,$8137; 216
		dc.w $8159,$8165,$883F,$886B,$8880,$8853,$88C6,$88CF; 224
		dc.w $88D9,$88DC,$8856,$88B6,$88F9,$8902,$8904,$8915; 232
		dc.w $886A,$8913,$8872,$8835,$8938,$895D,$8943,$8023; 240
		dc.w $8076,$807B,$808A,$809D,$80A6,$80A8,$80AC,$80B2; 248
		dc.w $80B7,$80BB,$80BC,$80BD,$80C6,$80E5,$80E8,$80EE; 256
		dc.w $80F4,$810A,$810D,$8111,$8115,$811A,$811F,$8122; 264
		dc.w $8123,$8139,$813A,$813C,$8142,$8144,$8147,$8148; 272
		dc.w $815E,$815F,$8163,$8168,$816A,$816C,$8170,$88E5; 280
		dc.w $88CE,$88EE,$88F1,$8884,$88FD,$8900,$88B9,$8917; 288
		dc.w $8871,$8909,$890D,$8865,$8925,$8922,$8831,$883C; 296
		dc.w $890F,$88C5,$8933,$8937,$891F,$802E,$806B,$8082; 304
		dc.w $8083,$808C,$8099,$809B,$80A2,$80A5,$80A7,$80A9; 312
		dc.w $80AB,$80AD,$80B9,$80BA,$80BF,$80C4,$80C5,$80C7; 320
		dc.w $80C8,$80C9,$80CA,$80D0,$80D9,$80DB,$80EB,$80EC; 328
		dc.w $80ED,$80EF,$80F2,$80F3,$80F6,$80FA,$80FC,$80FD; 336
		dc.w $80FE,$8103,$8106,$8107,$810B,$810E,$810F,$8110; 344
		dc.w $8112,$8117,$811C,$811D,$8121,$8129,$812C,$812D; 352
		dc.w $8131,$8134,$8135,$813B,$813D,$813E,$813F,$8140; 360
		dc.w $8141,$8145,$8146,$8149,$814A,$814C,$814D,$814E; 368
		dc.w $814F,$8150,$8152,$8153,$8154,$8155,$8156,$8157; 376
		dc.w $8158,$815A,$815B,$815C,$8160,$8161,$8162,$8164; 384
		dc.w $8166,$8167,$8169,$816B,$816D,$816E,$816F,$8171; 392
		dc.w $8172,$8173,$886E,$887D,$88C3,$88DB,$88E7,$88E8; 400
		dc.w $88EB,$88ED,$88F2,$88F6,$88FA,$88FC,$88FE,$882D; 408
		dc.w $8903,$8906,$8907,$890B,$8873,$889A,$8929,$892C; 416
		dc.w $892D,$8911,$893C,$8920,$8946,$88A9,$889C,$8916; 424
		dc.w $894F,$894C,$886F,$8958,$8956,$8959,$895A,$8961; 432
		dc.w $887B,$8966,$891C,$8918,$88A0,$88A3,$8967,$88A1; 440
byte_69E6:	dc.b   0,  7,  0,  1,  0,  1,  0,  1,  0,$4A,  0,  1,  0,$39,  0,  3; 0
					
		dc.b   0,  1,  0,  5,  0,$28,  0,  7,  0,$2C,  0,  1,  0,  1,  0,  2; 16
		dc.b   0,$28,  0,  5,  0,$39,  0,  1,  0,$28,  0,  9,  0,  1,  0,  4; 32
		dc.b   0,$28,  0,  6,  0,$28,  0,  3,  0,$4A,  0,  2,  0,  1,  0,  3; 48
		dc.b   0,$28,  0,  4,  0,$39,  0,  2,  0,$39,  0,  4,  0,  1,  0,  6; 64
		dc.b   0,  7,  0,  2,  0,$2C,  0,  2,  0,$28,  0,  1,  0,$1D,  0,  1; 80
		dc.b   0,$28,  0,  8,  0,$28,  0,  2,  0,  7,  0,  3,  0,  1,  0,  7; 96
		dc.b   0,$28,  0, $B,  0,$39,  0,  5,  0,$1D,  0,  3,  0,$1D,  0,  4; 112
		dc.b   0,$1D,  0,  2,  0,$1D,  0,  5,  0,$28,  0, $D,  0, $B,  0,  1; 128
		dc.b   0,$28,  0, $A,  0,$39,  0,  6,  0,$39,  0,  7,  0,$2C,  0,  3; 144
		dc.b   0,$1D,  0,  9,  0,$4A,  0,  3,  0,$1D,  0,  7,  0,$28,  0, $F; 160
		dc.b   0,$1D,  0, $B,  0,$1D,  0,$11,  0,$1D,  0, $D,  0,$1D,  0,  8; 176
		dc.b   0,$28,  0,$11,  0,$1D,  0,  6,  0, $B,  0,  2,  0,$1D,  0,$15; 192
		dc.b   0,$28,  0, $C,  0,$1D,  0, $A,  0,$28,  0, $E,  0,  1,  0,  8; 208
		dc.b   0,$1D,  0, $F,  0,$28,  0,$10,  0,  7,  0,  6,  0,$1D,  0,$13; 224
		dc.b   0,$4A,  0,  4,  0,$1D,  0,$17,  0,  7,  0,  4,  0, $B,  0,  3; 240
		dc.b   0,$1D,  0,$1B,  0,$4A,  0,  6,  0,$1D,  0,$1D,  0,$4A,  0,  5; 256
		dc.b   0,  1,  0,  9,  0,  7,  0,  5,  0,$1D,  0,$1E,  0,$1D,  0,$19; 272
		dc.b   0,  1,  0,$11,  0,$1D,  0, $C,  0,$1D,  0,$7F,  0,$2C,  0,  4; 288
		dc.b   0,$1D,  0, $E,  0,$1D,  0,$1C,  0,$4A,  0, $A,  0,$1D,  0,$1A; 304
		dc.b   0,$4A,  0,  7,  0,$1D,  0,$18,  0, $B,  0,  4,  0,$1D,  0,$12; 320
		dc.b   0,$1D,  0,$10,  0,  1,  0, $F,  0, $B,  0,  5,  0,  1,  0, $D; 336
		dc.b   0,  1,  0,$13,  0,$4A,  0,  9,  0,$4A,  0, $B,  0,$4A,  0, $C; 352
		dc.b   0,$2C,  0,  5,  0,$1D,  0,$14,  0, $B,  0,  7,  0,$1D,  0,$16; 368
		dc.b   0,  1,  0, $C,  0,  1,  0, $E,  0,$4A,  0,  8,  0,$1D,  0,$5F; 384
		dc.b   0,  1,  0, $A,  0, $B,  0,  6,  0, $B,  0,  8,  0, $B,  0, $A; 400
		dc.b   0,$39,  0,  8,  0, $B,  0,  9,  0,$2C,  0,  6,  0,  1,  0,$10; 416
		dc.b   0, $B,  0, $C,  0,  1,  0, $B,  0,  1,  0,$12,  0,  7,  0,  7; 432
		dc.b   0,$1D,  0,$1F,  0,$28,  0,$12,  0, $B,  0, $B,  0,$2C,  0,  7; 448
		dc.b   0,$2C,  0, $B,  0,$1D,  0,$23,  0,  1,  0,$15,  0,$2C,  0,  8; 464
		dc.b   0,$1D,  0,$2E,  0,$1D,  0,$3F,  0,  1,  0,$14,  0, $B,  0, $D; 480
		dc.b   0,$2C,  0,  9,  0,$2C,  0, $A,  0,$1D,  0,$25,  0,$1D,  0,$55; 496
		dc.b   0,$1D,  0,$71,  0,$1D,  0,$7C,  0,$4A,  0, $D,  0,$2C,  0, $C; 512
		dc.b   0,$2C,  0, $F,  0,$2C,  0,$10,$FF,$FB,$FF,$FB,$FF,$FA,$FF,$FA; 528
		dc.b $FF,$FA,$FF,$FA	; 544
; ===========================================================================
		even
loc_6C0A:				
		move.b	(v_ss_alt_hscroll_buffer).w,(v_ss_last_alt_hscroll_buffer).w
		moveq	#0,d1
		movea.l	(v_ss_track_mappings_bitflags).w,a0
		cmpa.l	#MapSpec_Straight2,a0
		blt.s	loc_6C4A
		cmpa.l	#MapSpec_Straight3,a0
		bge.s	loc_6C4A
		movea.l	(v_ss_current_layout).w,a5
		move.b	(v_ss_current_segment).w,d1
		move.b	(a5,d1.w),d1
		bpl.s	loc_6C88

loc_6C34:				
					
		st.b	(v_ss_track_orientation).w
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	(v_ss_player_anim_frame_timer).w,d0
		blt.w	locret_6C9A
		st.b	(v_ss_alt_hscroll_buffer).w
		rts	
; ===========================================================================

loc_6C4A:				
					
		cmpa.l	#MapSpec_Rise14,a0
		blt.s	loc_6C6A
		cmpa.l	#MapSpec_Rise15,a0
		bge.s	loc_6C6A
		movea.l	(v_ss_current_layout).w,a5
		move.b	(v_ss_current_segment).w,d1
		move.b	(a5,d1.w),d1
		bpl.s	loc_6C88
		bra.s	loc_6C34
; ===========================================================================

loc_6C6A:				
					
		cmpa.l	#MapSpec_Drop6,a0
		blt.s	locret_6C9A
		cmpa.l	#MapSpec_Drop7,a0
		bge.s	locret_6C9A
		movea.l	(v_ss_current_layout).w,a5
		move.b	(v_ss_current_segment).w,d1
		move.b	(a5,d1.w),d1
		bmi.s	loc_6C34

loc_6C88:				
					
		sf.b	(v_ss_track_orientation).w
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	(v_ss_player_anim_frame_timer).w,d0
		blt.s	locret_6C9A
		sf.b	(v_ss_alt_hscroll_buffer).w

locret_6C9A:				
					
		rts	
; End of function sub_5604


; =============== S U B	R O U T	I N E =======================================


sub_6C9C:				
		lea	(v_hscroll_buffer).w,a1
		lea	(v_ss_hscroll_buffer_2).w,a2
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		move.w	#-$100,d1
		move.w	#-$200,d2
		move.w	#-$300,d3
		swap	d1
		swap	d2
		swap	d3
		moveq	#$1F,d4

loc_6CC0:				
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		move.l	d2,(a1)+
		move.l	d2,(a1)+
		move.l	d3,(a1)+
		move.l	d3,(a1)+
		move.l	d3,(a2)+
		move.l	d3,(a2)+
		move.l	d2,(a2)+
		move.l	d2,(a2)+
		move.l	d1,(a2)+
		move.l	d1,(a2)+
		move.l	d0,(a2)+
		move.l	d0,(a2)+
		dbf	d4,loc_6CC0
		rts	
; End of function sub_6C9C


; =============== S U B	R O U T	I N E =======================================


sub_6CE6:				
		lea	(Kos_Special).l,a0
		lea	(v_128x128_tiles).l,a1
		bsr.w	KosDec
		move.l	#$40000000,(vdp_control_port).l
		lea	(vdp_data_port).l,a1
		movea.l	#-$10000,a0
		move.w	(a0)+,d0
		subq.w	#1,d0

loc_6D10:				
		move.l	(a0),(a1)
		move.l	(a0),(a1)
		move.l	(a0),(a1)
		move.l	(a0),(a1)
		move.l	(a0),(a1)
		move.l	(a0),(a1)
		move.l	(a0),(a1)
		move.l	(a0)+,(a1)
		dbf	d0,loc_6D10
		lea	(Kos_SpecialPerspective).l,a0
		lea	($FFFF6A60).l,a1
		bsr.w	KosDec
		lea	(Nem_SpecialLevelLayouts).l,a0
		lea	($FFFF855C).w,a4
		bsr.w	NemDecToRAM
		lea	(Koz_SpecialObjectLocations).l,a0
		lea	($FFFF8778).w,a1
		bsr.w	KosDec
		rts	
; End of function sub_6CE6


; =============== S U B	R O U T	I N E =======================================


sub_6D52:				
	disable_ints
		movea.l	#v_128x128_tiles,a1
		lea	(Eni_SpecialBackBottom).l,a0
		move.w	#$700,d0
		bsr.w	EniDec
		movea.l	#-$FC00,a1
		lea	(Eni_SpecialBack).l,a0
		move.w	#$700,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_H80_SS
		lea	(v_128x128_tiles).l,a1
		move.l	#$60400002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_H80_SS
		lea	(v_128x128_tiles).l,a1
		move.l	#$60800002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_H80_SS
		lea	(v_128x128_tiles).l,a1
		move.l	#$60C00002,d0
		moveq	#$1F,d1
		moveq	#$1F,d2
		bsr.w	TilemapToVRAM_H80_SS
		move	#$2300,sr
		rts	
; End of function sub_6D52


; =============== S U B	R O U T	I N E =======================================


sub_6DD4:				
		lea	(Nem_SpecialSonicAndTails).l,a0
		lea	($FF0000).l,a4
		bra.w	NemDecToRAM
; End of function sub_6DD4


; =============== S U B	R O U T	I N E =======================================


sub_6DE4:				
					
		bsr.w	sub_6E3C
		bsr.w	sub_6EE0
		rts	
; End of function sub_6DE4

; ===========================================================================
; special stage background vertical and horizontal scroll offsets
off_6DEE:	index offset(*)

		ptr byte_6E04	; 0 		
		ptr byte_6E09	; 1
		ptr byte_6E0E	; 2
		ptr byte_6E13	; 3
		ptr byte_6E18	; 4
		ptr byte_6E1D	; 5
		ptr byte_6E22	; 6
		ptr byte_6E27	; 7
		ptr byte_6E2C	; 8
		ptr byte_6E31	; 9
		ptr byte_6E36	; 10
		
byte_6E04:	dc.b   2,  2,  2,  2,  2; 0 
byte_6E09:	dc.b   4,  4,  5,  4,  5; 0 
byte_6E0E:	dc.b  $B, $B, $B, $B, $C; 0 
byte_6E13:	dc.b   0,  0,  1,  0,  0; 0 
byte_6E18:	dc.b   1,  1,  1,  1,  1; 0 
byte_6E1D:	dc.b   9,  9,  8,  9,  9; 0 
byte_6E22:	dc.b   9,  9,  9,  9, $A; 0 
byte_6E27:	dc.b   7,  7,  6,  7,  7; 0 
byte_6E2C:	dc.b   0,  1,  1,  1,  0; 0 
byte_6E31:	dc.b   4,  3,  3,  3,  4; 0 
byte_6E36:	dc.b   0,  0,$FF,  0,  0; 0 
		dc.b   0 ;  

; =============== S U B	R O U T	I N E =======================================


sub_6E3C:				
		moveq	#0,d7
		moveq	#0,d6
		moveq	#0,d0
		move.b	(v_ss_track_last_anim_frame).w,d2
		move.b	(v_ss_track_anim).w,d0
		add.w	d0,d0
		move.w	off_6E54(pc,d0.w),d0
		jmp	off_6E54(pc,d0.w)
; End of function sub_6E3C

; ===========================================================================
off_6E54:	dc.w loc_6E5E-off_6E54	; 0 
					
		dc.w loc_6E5E-off_6E54	; 1
		dc.w loc_6E5E-off_6E54	; 2
		dc.w locret_6E86-off_6E54; 3
		dc.w locret_6E86-off_6E54; 4
; ===========================================================================

loc_6E5E:				
		moveq	#0,d1
		cmpi.b	#1,d2
		blt.s	loc_6E88
		moveq	#2,d1
		cmpi.b	#2,d2
		blt.s	loc_6E88
		moveq	#4,d1
		cmpi.b	#$A,d2
		blt.s	loc_6E88
		moveq	#2,d1
		cmpi.b	#$B,d2
		blt.s	loc_6E88
		moveq	#0,d1
		cmpi.b	#$C,d2
		blt.s	loc_6E88

locret_6E86:				
		rts	
; ===========================================================================

loc_6E88:				
					
		moveq	#0,d0
		moveq	#0,d2
		move.b	(v_ss_track_drawing_index).w,d0
		lea	(off_6DEE)(pc),a0
		adda.w	(a0,d1.w),a0
		move.b	(a0,d0.w),d2
		tst.b	(v_ss_last_alt_hscroll_buffer).w
		bne.s	loc_6EAA
		tst.b	(v_ss_alt_hscroll_buffer).w
		beq.s	loc_6EBE
		bra.s	loc_6EB6
; ===========================================================================

loc_6EAA:				
		tst.b	(v_ss_alt_hscroll_buffer).w
		bne.s	loc_6EBE
		lea	($FFFFE002).w,a1
		bra.s	loc_6ECE
; ===========================================================================

loc_6EB6:				
		lea	($FFFFD702).w,a1
		neg.w	d2
		bra.s	loc_6ECE
; ===========================================================================

loc_6EBE:				
					
		lea	($FFFFE002).w,a1
		tst.b	(v_ss_alt_hscroll_buffer).w
		beq.s	loc_6ECE
		lea	($FFFFD702).w,a1
		neg.w	d2

loc_6ECE:				
					
		move.w	#$FF,d0

loc_6ED2:				
		sub.w	d2,(a1)+
		adda.l	#2,a1
		dbf	d0,loc_6ED2
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_6EE0:				
		move.w	(v_bg_y_pos_vsram).w,(v_ss_track_last_vscroll).w
		moveq	#0,d7
		moveq	#0,d0
		moveq	#0,d2
		move.b	(v_ss_track_last_anim_frame).w,d2
		move.b	(v_ss_track_anim).w,d0
		add.w	d0,d0
		move.w	off_6EFE(pc,d0.w),d0
		jmp	off_6EFE(pc,d0.w)
; End of function sub_6EE0

; ===========================================================================
off_6EFE:	index offset(*)
		ptr loc_6F0A	; 0 					
		ptr loc_6F2A	; 1
		ptr locret_6F08; 2
		ptr loc_6F4C	; 3
		ptr locret_6F08; 4
; ===========================================================================

locret_6F08:				
		rts	
; ===========================================================================

loc_6F0A:				
		move.b	byte_6F12(pc,d2.w),d1
		bpl.s	loc_6F6A
		rts	
; ===========================================================================
byte_6F12:	dc.b $FF		; 0
		dc.b $FF		; 1
		dc.b $FF		; 2
		dc.b $FF		; 3
		dc.b $FF		; 4
		dc.b $FF		; 5
		dc.b $FF		; 6
		dc.b $FF		; 7
		dc.b $FF		; 8
		dc.b $FF		; 9
		dc.b   8		; 10
		dc.b   8		; 11
		dc.b   2		; 12
		dc.b   4		; 13
		dc.b   4		; 14
		dc.b   4		; 15
		dc.b   4		; 16
		dc.b   4		; 17
		dc.b   4		; 18
		dc.b  $A		; 19
		dc.b  $C		; 20
		dc.b  $E		; 21
		dc.b $12		; 22
		dc.b $10		; 23
; ===========================================================================

loc_6F2A:				
		st.b	d7
		move.b	byte_6F34(pc,d2.w),d1
		bpl.s	loc_6F6A
		rts	
; ===========================================================================
byte_6F34:	dc.b $FF		; 0
		dc.b $FF		; 1
		dc.b $FF		; 2
		dc.b $FF		; 3
		dc.b $FF		; 4
		dc.b $FF		; 5
		dc.b $FF		; 6
		dc.b $FF		; 7
		dc.b $FF		; 8
		dc.b $FF		; 9
		dc.b $FF		; 10
		dc.b $10		; 11
		dc.b $12		; 12
		dc.b  $E		; 13
		dc.b  $C		; 14
		dc.b  $A		; 15
		dc.b   4		; 16
		dc.b   4		; 17
		dc.b   4		; 18
		dc.b   4		; 19
		dc.b   4		; 20
		dc.b   4		; 21
		dc.b   2		; 22
		dc.b   0		; 23
; ===========================================================================

loc_6F4C:				
		tst.b	(f_ss_pause_only).w
		bne.s	locret_6F58
		move.b	byte_6F5A(pc,d2.w),d1
		bpl.s	loc_6F6A

locret_6F58:				
		rts	
; ===========================================================================
byte_6F5A:	dc.b   6		; 0
		dc.b   6		; 1
		dc.b $14		; 2
		dc.b $14		; 3
		dc.b   6		; 4
		dc.b   6		; 5
		dc.b $14		; 6
		dc.b $14		; 7
		dc.b   6		; 8
		dc.b   6		; 9
		dc.b $14		; 10
		dc.b $14		; 11
		dc.b   6		; 12
		dc.b   6		; 13
		dc.b $14		; 14
		dc.b $14		; 15
; ===========================================================================

loc_6F6A:				
					
		moveq	#0,d0
		moveq	#0,d2
		move.b	(v_ss_track_drawing_index).w,d0
		lea	(off_6DEE)(pc),a0
		adda.w	(a0,d1.w),a0
		move.b	(a0,d0.w),d2
		tst.b	d7
		bpl.s	loc_6F88
		add.w	d2,(v_bg_y_pos_vsram).w
		rts	
; ===========================================================================

loc_6F88:				
		sub.w	d2,(v_bg_y_pos_vsram).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_6F8E:				
					
		lea	($FFFFB200).w,a1
		move.w	#$76,d5	; 'v'

loc_6F96:				
		tst.b	(a1)
		beq.s	locret_6FA2
		lea	$40(a1),a1
		dbf	d5,loc_6F96

locret_6FA2:				
		rts	
; End of function sub_6F8E

; ===========================================================================

loc_6FA4:				
		movea.l	a0,a1
		move.w	#-$3040,d5
		sub.w	a0,d5
		lsr.w	#6,d5
		subq.w	#1,d5
		bcs.s	locret_6FBE

loc_6FB2:				
		tst.b	(a1)
		beq.s	locret_6FBE
		lea	$40(a1),a1
		dbf	d5,loc_6FB2

locret_6FBE:				
					
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_6FC0:				
		move.b	$24(a0),d0
		bne.w	loc_7844
		move.l	#Obj5E_MapUnc_7070,ost_mappings(a0)
		move.w	#$1FA,2(a0)
		move.b	#4,1(a0)
		move.b	#0,$18(a0)
		move.b	#1,$24(a0)
		bset	#6,1(a0)
		moveq	#0,d1
		tst.b	(f_ss_2p).w
		beq.s	loc_7002
		addq.w	#6,d1
		tst.b	(v_console_region).w
		bpl.s	loc_7012
		addq.w	#1,d1
		bra.s	loc_7012
; ===========================================================================

loc_7002:				
		move.w	(v_player_mode).w,d1
		andi.w	#3,d1
		tst.b	(v_console_region).w
		bpl.s	loc_7012
		addq.w	#3,d1

loc_7012:				
					
		add.w	d1,d1
		moveq	#0,d2
		moveq	#0,d3
		lea	(off_7042).l,a1
		lea	$10(a0),a2
		adda.w	(a1,d1.w),a1
		move.b	(a1)+,d3
		move.b	d3,$F(a0)
		subq.w	#1,d3
		moveq	#0,d0
		move.b	(a1)+,d0

loc_7032:				
		move.w	d0,(a2,d2.w)
		move.b	(a1)+,5(a2,d2.w)
		addq.w	#6,d2
		dbf	d3,loc_7032
		rts	
; ===========================================================================
off_7042:	index offset(*)
		ptr byte_7052	; 0 			
		ptr byte_7057	; 1
		ptr byte_705A	; 2
		ptr byte_705D	; 3
		ptr byte_7062	; 4
		ptr byte_7065	; 5
		ptr byte_7068	; 6
		ptr byte_706C	; 7
		
byte_7052:	dc.b   3,$80,  0,  1,  3; 0 
byte_7057:	dc.b   1,$D4,  0	; 0 
byte_705A:	dc.b   1,$38,  1	; 0 
byte_705D:	dc.b   3,$80,  0,  2,  3; 0 
byte_7062:	dc.b   1,$D4,  0	; 0 
byte_7065:	dc.b   1,$38,  2	; 0 
byte_7068:	dc.b   2,$80,  0,  1	; 0 
byte_706C:	dc.b   2,$80,  0,  2	; 0 

		include "mappings/sprite/obj5E.asm"
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 5F - Start banner/"Ending controller" from Special Stage
; ----------------------------------------------------------------------------
; Sprite_70F0:
SS_StartBanner:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	SS_StartBanner_Index(pc,d0.w),d1
		jmp	SS_StartBanner_Index(pc,d1.w)
; ===========================================================================
SS_StartBanner_Index:	index offset(*)
		ptr loc_714A	; 0 				
		ptr loc_718A	; 1
		ptr loc_71B4	; 2
		ptr loc_710A	; 3
		ptr locret_723E; 4
		ptr loc_7218	; 5
; ===========================================================================

loc_710A:				
		moveq	#0,d0
		move.b	$26(a0),d0
		bsr.w	CalcSine
		muls.w	$14(a0),d0
		muls.w	$14(a0),d1
		asr.w	#8,d0
		asr.w	#8,d1
		add.w	d1,8(a0)
		add.w	d0,$C(a0)
		cmpi.w	#0,8(a0)
		blt.w	loc_7850
		cmpi.w	#$100,8(a0)
		bgt.w	loc_7850
		cmpi.w	#0,$C(a0)
		blt.w	loc_7850
		bra.w	loc_7844
; ===========================================================================

loc_714A:				
		tst.b	(f_ss_2p).w
		beq.s	loc_7158
		move.w	#8,d0
		bsr.w	sub_785C

loc_7158:				
		move.w	#$80,8(a0)
		move.w	#-$40,$C(a0)
		move.w	#$100,$12(a0)
		move.l	#Map_obj5F_a,4(a0)
		move.w	#$38A,2(a0)
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#2,$24(a0)

loc_718A:				
		bsr.w	sub_7862
		cmpi.w	#$48,$C(a0) ; 'H'
		blt.w	loc_7844
		move.w	#0,$12(a0)
		move.w	#$48,$C(a0) ; 'H'
		move.b	#4,$24(a0)
		move.b	#$F,$2A(a0)
		bra.w	loc_7844
; ===========================================================================

loc_71B4:				
		subi.b	#1,$2A(a0)
		bne.w	loc_7844
		moveq	#6,d6
		lea	(Map_obj5F_a_004C).l,a2
		moveq	#2,d3
		move.w	#8,$14(a0)
		move.b	#6,$24(a0)

loc_71D4:				
		bsr.w	sub_6F8E
		bne.s	loc_7206
		moveq	#0,d0
		move.w	#$F,d1

loc_71E0:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_71E0
		move.b	d3,$1A(a1)
		addq.w	#1,d3
		move.w	#$FFD8,d2
		move.w	8(a2),d1
		bsr.w	CalcAngle
		move.b	d0,$26(a1)
		lea	$A(a2),a2

loc_7206:				
		dbf	d6,loc_71D4
		move.b	#$A,$24(a0)
		move.w	#$1E,$2A(a0)
		rts	
; ===========================================================================

loc_7218:				
		subi.w	#1,$2A(a0)
		bpl.s	locret_723C
		tst.b	(f_ss_2p).w
		beq.s	loc_7230
		move.w	#$A,d0
		bsr.w	sub_785C
		bra.s	loc_7234
; ===========================================================================

loc_7230:				
		bsr.w	sub_7856

loc_7234:				
		st.b	(f_ss_started).w
		bra.w	loc_7850
; ===========================================================================

locret_723C:				
		rts	
		
		
;   if removeJmpTos
;JmpTo_DeleteObject ; JmpTo
;		jmp	(DeleteObject).l
;    endc
; ===========================================================================

locret_723E:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
		include "mappings/sprite/obj5F_a.asm"
; -----------------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------------
Map_72D2:	dc.w word_72E8-Map_72D2; 0 ;	DATA XREF: ROM:000072D2o
					
		dc.w word_72F2-Map_72D2; 1
		dc.w word_72FC-Map_72D2; 2
		dc.w word_7306-Map_72D2; 3
		dc.w word_7310-Map_72D2; 4
		dc.w word_731A-Map_72D2; 5
		dc.w word_7324-Map_72D2; 6
		dc.w word_732E-Map_72D2; 7
		dc.w word_7338-Map_72D2; 8
		dc.w word_7342-Map_72D2; 9
		dc.w word_734C-Map_72D2; 10
word_72E8:	dc.w 1			
		dc.w $F801,$8012,$8009,$FFFC; 0
word_72F2:	dc.w 1			
		dc.w $F801,$8014,$800A,$FFFC; 0
word_72FC:	dc.w 1			
		dc.w $F801,$8016,$800B,$FFFC; 0
word_7306:	dc.w 1			
		dc.w $F801,$8018,$800C,$FFFC; 0
word_7310:	dc.w 1			
		dc.w $F801,$801A,$800D,$FFFC; 0
word_731A:	dc.w 1			
		dc.w $F801,$801C,$800E,$FFFC; 0
word_7324:	dc.w 1			
		dc.w $F801,$801E,$800F,$FFFC; 0
word_732E:	dc.w 1			
		dc.w $F801,$8020,$8010,$FFFC; 0
word_7338:	dc.w 1			
		dc.w $F801,$8022,$8011,$FFFC; 0
word_7342:	dc.w 1			
		dc.w $F801,$8024,$8012,$FFFC; 0
word_734C:	dc.w 1			
		dc.w $FC04,$803A,$801D,$FFF8; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_7356:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_7364(pc,d0.w),d1
		jmp	off_7364(pc,d1.w)
; ===========================================================================
off_7364:	dc.w loc_736C-off_7364	; 0 
					
		dc.w loc_7480-off_7364	; 1
		dc.w loc_753E-off_7364	; 2
		dc.w loc_75DE-off_7364	; 3
; ===========================================================================

loc_736C:				
		move.b	#2,$A(a0)
		move.l	#Map_72D2,4(a0)
		move.w	#$41FA,2(a0)
		move.b	#4,1(a0)
		bset	#6,1(a0)
		move.b	#2,$F(a0)
		move.w	#$20,d0	; ' '
		moveq	#0,d1
		lea	$10(a0),a1
		move.w	#$48,(a1) ; 'H'
		move.w	d0,2(a1)
		move.w	d1,4(a1)
		move.w	#$E0,6(a1)
		move.w	d0,8(a1)
		move.w	d1,$A(a1)
		move.w	d0,$E(a1)
		move.w	d0,$14(a1)
		move.w	d0,$1A(a1)
		move.w	d0,$20(a1)
		tst.b	(f_ss_2p).w
		bne.s	loc_742A
		cmpi.w	#0,(v_player_mode).w
		beq.s	loc_73E0
		subi.b	#1,$F(a0)
		move.w	#$94,(a1)
		rts	
; ===========================================================================

loc_73E0:				
		bsr.w	sub_6F8E
		bne.s	locret_7428
		move.b	#-$79,(a1)
		move.b	#4,$A(a1)
		move.l	#Map_72D2,4(a1)
		move.w	#$41FA,2(a1)
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#1,$F(a1)
		lea	$10(a1),a2
		move.w	#$80,(a2)
		move.w	d0,2(a2)
		move.w	d1,4(a2)
		move.w	d0,8(a2)
		move.w	d0,$E(a2)

locret_7428:				
					
		rts	
; ===========================================================================

loc_742A:				
		bsr.w	sub_6F8E
		bne.s	locret_7428
		move.b	#-$79,(a1)
		move.b	#6,$A(a1)
		move.l	#Map_72D2,4(a1)
		move.w	#$41FA,2(a1)
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#0,$F(a1)
		lea	$10(a1),a2
		move.w	#$2C,d0	; ','
		move.w	#$A,d1
		move.w	d0,2(a2)
		move.w	d1,4(a2)
		move.w	d0,8(a2)
		move.w	d1,$A(a2)
		move.w	d0,$E(a2)
		move.w	d1,$10(a2)
		rts	
; ===========================================================================

loc_7480:				
		moveq	#0,d0
		moveq	#0,d3
		moveq	#0,d5
		lea	$10(a0),a1
		movea.l	a1,a2
		addq.w	#5,a2
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_74EA
		move.b	($FFFFB03C).w,d0
		beq.s	loc_74A4
		addq.w	#1,d3
		move.b	d0,(a2)
		lea	6(a2),a2

loc_74A4:				
		move.b	($FFFFB03D).w,d0
		tst.b	d3
		bne.s	loc_74B0
		tst.b	d0
		beq.s	loc_74B8

loc_74B0:				
		addq.w	#1,d3
		move.b	d0,(a2)
		lea	6(a2),a2

loc_74B8:				
		addq.w	#1,d3
		move.b	(v_ost_maincharacter+ost_ss_rings_units).w,(a2)
		lea	6(a2),a2
		move.w	d3,d4
		subq.w	#1,d4
		move.w	#$48,d1	; 'H'
		tst.w	(v_player_mode).w
		beq.s	loc_74D4
		addi.w	#$54,d1	; 'T'

loc_74D4:				
					
		move.w	d1,(a1,d5.w)
		addi.w	#8,d1
		addq.w	#6,d5
		dbf	d4,loc_74D4
		cmpi.w	#1,(v_player_mode).w
		beq.s	loc_7536

loc_74EA:				
		moveq	#0,d0
		moveq	#0,d4
		move.b	($FFFFB07C).w,d0
		beq.s	loc_74FC
		addq.w	#1,d4
		move.b	d0,(a2)
		lea	6(a2),a2

loc_74FC:				
		move.b	($FFFFB07D).w,d0
		tst.b	d4
		bne.s	loc_7508
		tst.b	d0
		beq.s	loc_7510

loc_7508:				
		addq.w	#1,d4
		move.b	d0,(a2)
		lea	6(a2),a2

loc_7510:				
		move.b	(v_ost_sidekick+$3E).w,(a2)
		addq.w	#1,d4
		add.w	d4,d3
		subq.w	#1,d4
		move.w	#$E0,d1	
		tst.w	(v_player_mode).w
		beq.s	loc_7528
		subi.w	#$44,d1	; 'D'

loc_7528:				
					
		move.w	d1,(a1,d5.w)
		addi.w	#8,d1
		addq.w	#6,d5
		dbf	d4,loc_7528

loc_7536:				
		move.b	d3,$F(a0)
		bra.w	loc_7844
; ===========================================================================

loc_753E:				
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#1,d3
		move.b	(v_ost_maincharacter+ost_ss_rings_units).w,d0
		add.b	(v_ost_sidekick+ost_ss_rings_units).w,d0
		move.b	($FFFFB03D).w,d1
		add.b	($FFFFB07D).w,d1
		move.b	($FFFFB03C).w,d2
		add.b	($FFFFB07C).w,d2
		cmpi.b	#$A,d0
		bcs.s	loc_756A
		addq.w	#1,d1
		subi.b	#$A,d0

loc_756A:				
		tst.b	d1
		beq.s	loc_7586
		cmpi.b	#$A,d1
		bcs.s	loc_757C
		addi.b	#1,d2
		subi.b	#$A,d1

loc_757C:				
		addq.w	#1,d3
		tst.b	d2
		beq.s	loc_758C
		addq.w	#1,d3
		bra.s	loc_758C
; ===========================================================================

loc_7586:				
		tst.b	d2
		beq.s	loc_758C
		addq.w	#2,d3

loc_758C:				
					
		lea	$10(a0),a1
		move.b	d3,$F(a0)
		cmpi.b	#2,d3
		blt.s	loc_75BC
		beq.s	loc_75C8
		move.w	#$78,(a1) ; 'x'
		move.b	d2,5(a1)
		move.w	#$80,6(a1)
		move.b	d1,$B(a1)
		move.w	#$88,$C(a1)
		move.b	d0,$11(a1)
		bra.w	loc_7844
; ===========================================================================

loc_75BC:				
		move.w	#$80,(a1)
		move.b	d0,5(a1)
		bra.w	loc_7844
; ===========================================================================

loc_75C8:				
		move.w	#$7C,(a1) ; '|'
		move.b	d1,5(a1)
		move.w	#$84,6(a1)
		move.b	d0,$B(a1)
		bra.w	loc_7844
; ===========================================================================

loc_75DE:				
		move.b	(v_ss_2p_bcd_score).w,d0
		bne.s	loc_75E6
		rts	
; ===========================================================================

loc_75E6:				
		lea	$10(a0),a1
		moveq	#0,d2
		move.b	d0,d1
		andi.b	#-$10,d0
		beq.s	loc_761C
		addq.w	#1,d2
		move.w	#$20,(a1) ; ' '
		lea	6(a1),a1
		subi.b	#$10,d0
		beq.s	loc_761C
		addq.w	#1,d2
		move.w	#$30,(a1) ; '0'
		lea	6(a1),a1
		subi.b	#$10,d0
		beq.s	loc_761C
		addq.w	#1,d2
		move.w	#$40,(a1) ; '@'
		bra.s	loc_7648
; ===========================================================================

loc_761C:				
					
		andi.b	#$F,d1
		beq.s	loc_7648
		addq.w	#1,d2
		move.w	#$B8,(a1)
		lea	6(a1),a1
		subi.b	#1,d1
		beq.s	loc_7648
		addq.w	#1,d2
		move.w	#$C8,(a1)
		lea	6(a1),a1
		subi.b	#1,d1
		beq.s	loc_7648
		addq.w	#1,d2
		move.w	#$D8,(a1)

loc_7648:				
					
		move.b	d2,$F(a0)
		bra.w	loc_7844

; =============== S U B	R O U T	I N E =======================================


sub_7650:				
					
		move.b	(v_ss_track_drawing_index).w,d0
		cmp.b	(v_ss_player_anim_frame_timer).w,d0
		beq.s	loc_765C
		rts	
; ===========================================================================

loc_765C:				
		moveq	#0,d0
		move.b	(v_ss_track_mapping_frame).w,d0
		add.w	d0,d0
		lea	word_768A(pc,d0.w),a2
		move.b	(a2)+,d0
		tst.b	(v_ss_track_orientation).w
		beq.s	loc_7672
		neg.b	d0

loc_7672:				
		ext.w	d0
		addi.w	#$80,d0	
		move.w	d0,($FFFFF73E).w
		move.b	(a2),d0
		ext.w	d0
		addi.w	#$36,d0	; '6'
		move.w	d0,($FFFFF740).w
		rts	
; End of function sub_7650

; ===========================================================================
word_768A:	dc.w $1300,$1300,$1300,$1300,$9F6,$E4,$E4,$E0,$DC,$D6,$F0,  6, $E,$10,$12,$12; 0
		dc.w $912,  0,	0,  0,	0,$1300,$1300,$1300,$1300,$B0C,	$C,$12,	$A,  8,	 2,$10;	16
		dc.w $E0,$E1,$E2,$E5,$E8,$F2,$1300,$1300,$1300,$1300,$1300,$1300,$1300,$1300,$1300,$1300; 32
		dc.w $B00,  0,	0,  0,	0,  0,	0,$300;	48
; ===========================================================================

loc_76FA:				
		moveq	#0,d1
		moveq	#1,d2
		move.w	(v_special_stage).w,d0
		move.b	d0,d1
		lsr.w	#8,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d1,d0
		tst.w	(v_player_mode).w
		bne.s	loc_7718
		move.b	Misc_7756(pc,d0.w),d1
		bra.s	loc_771C
; ===========================================================================

loc_7718:				
		move.b	Misc_7772(pc,d0.w),d1

loc_771C:				
		move.w	d1,(v_ss_ring_requirement).w
		moveq	#0,d0
		cmpi.w	#$64,d1	; 'd'
		blt.s	loc_7740
		addq.w	#1,d2
		subi.w	#$64,d1	; 'd'
		move.w	#$100,d0
		cmpi.w	#$64,d1	; 'd'
		blt.s	loc_7740
		subi.w	#$64,d1	; 'd'
		addi.w	#$100,d0

loc_7740:				
					
		divu.w	#$A,d1
		lsl.w	#4,d1
		or.b	d1,d0
		swap	d1
		or.b	d1,d0
		move.w	d0,d1
		addi.w	#1,(v_special_stage).w
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Ring requirement values for Sonic and	Tails games
;
; This array stores the	number of rings	you need to get	to complete each round
; of each special stage, while playing with both sonic and tails. 4 bytes per
; stage, corresponding to the four possible parts of the level.	Last part is
; unused.
; ----------------------------------------------------------------------------
Misc_7756:	dc.b $28,$50,$8C,$78	; 0
		dc.b $32,$64,$8C,$96	; 4
		dc.b $3C,$6E,$A0,$AA	; 8
		dc.b $28,$64,$96,$A0	; 12
		dc.b $37,$6E,$C8,$C8	; 16
		dc.b $50,$8C,$DC,$DC	; 20
		dc.b $64,$BE,$D2,$D2	; 24
; ----------------------------------------------------------------------------
; Ring requirement values for Sonic/Tails alone	games
;
; This array stores the	number of rings	you need to get	to complete each round
; of each special stage, while playing with either sonic or tails. 4 bytes per
; stage, corresponding to the four possible parts of the level.	Last part is
; unused.
; ----------------------------------------------------------------------------
Misc_7772:	dc.b $1E,$46,$82,$6E	; 0
		dc.b $32,$64,$8C,$8C	; 4
		dc.b $32,$6E,$A0,$A0	; 8
		dc.b $28,$6E,$96,$96	; 12
		dc.b $32,$5A,$A0,$A0	; 16
		dc.b $50,$8C,$D2,$D2	; 20
		dc.b $64,$96,$BE,$BE	; 24
word_778E:	dc.w   $1B		; 0 
		dc.w   $1C		; 1
		dc.w   $1D		; 2
		dc.w   $1E		; 3
		dc.w   $1F		; 4
		dc.w   $20		; 5
		dc.w   $21		; 6
		dc.w   $22		; 7
		dc.w   $23		; 8
		dc.w   $24		; 9

; =============== S U B	R O U T	I N E =======================================


sub_77A2:				
		clr.b	(v_special_act).w
		move.b	#-1,(v_ss_last_segment_2).w
		move.w	#0,(v_rings).w
		move.w	#0,(v_rings_p2).w
		move.b	#0,(f_ss_perfect).w
		move.b	#0,(f_got_emerald).w
		move.b	#4,(v_ss_star_color_2).w
		lea	(v_ss_2p_ring_buffer).w,a2
		moveq	#0,d0
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		move.w	d0,(a2)+
		moveq	#$18,d0
		bsr.w	PalLoad_Next
		lea	(word_778E)(pc),a1
		moveq	#0,d0
		move.b	(v_special_stage).w,d0
		add.w	d0,d0
		move.w	d0,d1
		tst.b	(f_ss_2p).w
		beq.s	loc_7800
		cmpi.b	#4,d0
		bcs.s	loc_7800
		addi.w	#6,d0

loc_7800:				
		move.w	(a1,d0.w),d0
		bsr.w	PalLoad_Next

loc_7808:
		lea	($FFFF8778).w,a0
		adda.w	(a0,d1.w),a0
		move.l	a0,(v_ss_current_obj_locations).w
		lea	($FFFF855C).w,a0
		adda.w	(a0,d1.w),a0

loc_781C:
		move.l	a0,(v_ss_current_layout).w
		rts	
; End of function sub_77A2

; ===========================================================================
word_7822:	
		dc.w	 4		; 0 
		dc.w  $804		; 1
		dc.w  $C04		; 2
		dc.w $1404		; 3
		dc.w $1804		; 4
		dc.w $1C02		; 5
		dc.w $2604		; 6
		dc.w $2A06		; 7
		dc.w $3004		; 8
		dc.w $3804		; 9
		dc.w $3C04		; 10
		dc.w $4004		; 11
		dc.w $4404		; 12
		dc.w $4C06		; 13
		dc.w $5A02		; 14
		dc.w $FFFF		; 15
; ===========================================================================
	if Revision<2
		nop	
	endc
	
	if ~RemoveJmpTos
loc_7844:			
		jmp	DisplaySprite
sub_784A:				
		jmp	loc_157A4
loc_7850:						
		jmp	DeleteObject
sub_7856:				
		jmp	loc_35CE2
sub_785C:						
		jmp	loc_35DAA
sub_7862:				
		jmp	SpeedToPos
sub_7868:				
		jmp	loc_4106E
		
		align 4
	endc	

; ===========================================================================

GM_Continue:				
		bsr.w	PaletteFadeOut
		disable_ints
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#-$41,d0
		move.w	d0,(vdp_control_port).l
		lea	(vdp_control_port).l,a6
		move.w	#-$7FFC,(a6)
		move.w	#-$7900,(a6)
		bsr.w	sub_1208
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_78A2:				
		move.l	d0,(a1)+
		dbf	d1,loc_78A2
		bsr.w	sub_7A04
		move.l	#$60000002,(vdp_control_port).l
		lea	(Nem_ContinueTails).l,a0
		bsr.w	NemDec
		move.l	#$64800002,(vdp_control_port).l
		lea	(Nem_MiniSonic).l,a0
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_78DE
		lea	(Nem_MiniTails).l,a0

loc_78DE:				
		bsr.w	NemDec
		moveq	#$A,d1
		jsr	sub_411A4
		moveq	#$1B,d0
		bsr.w	PalLoad_Next
		move.w	#0,(v_pal_dry_next).w
		move.b	#-$64,d0
		bsr.w	PlayMusic
		move.w	#$293,(v_countdown).w
		clr.b	(f_level_started).w
		clr.l	(v_camera_x_pos_copy).w
		move.l	#$1000000,(v_camera_y_pos_copy).w
		move.b	#-$25,($FFFFB000).w
		move.b	#-$25,($FFFFB040).w
		move.b	#6,($FFFFB064).w
		move.b	#-$26,($FFFFB080).w
		move.b	#-$26,($FFFFB0C0).w
		move.b	#4,($FFFFB0E4).w
		jsr	ExecuteObjects
		jsr	BuildSprites
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_23C6

loc_7960:				
					
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		cmpi.b	#4,($FFFFB024).w
		bcc.s	loc_798E
	disable_ints
		move.w	(v_countdown).w,d1
		divu.w	#$3C,d1	; '<'
		andi.l	#$F,d1
		jsr	sub_411A4
		move	#$2300,sr

loc_798E:				
		jsr	ExecuteObjects
		jsr	BuildSprites
		cmpi.w	#$180,($FFFFB048).w
		bcc.s	loc_79BA
		cmpi.b	#4,($FFFFB024).w
		bcc.s	loc_7960
		tst.w	(v_countdown).w
		bne.w	loc_7960
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================

loc_79BA:				
		move.b	#$C,(v_gamemode).w
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.b	d0,(v_last_lamppost).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.b	d0,(v_last_lamppost_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		subq.b	#1,(v_continues).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_7A04:				
		move.l	#$70000002,(vdp_control_port).l
		lea	(Nem_TitleCard).l,a0
		bsr.w	NemDec
		lea	(v_level_layout).w,a4
		lea	(Nem_TitleCardFont).l,a0
		bsr.w	NemDecToRAM
		lea	(word_7A5E).l,a0
		move.l	#$72000002,(vdp_control_port).l
		lea	(v_level_layout).w,a1
		lea	(vdp_data_port).l,a6

loc_7A40:				
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	locret_7A5C
		lsl.w	#5,d0
		lea	(a1,d0.w),a2
		moveq	#0,d1
		move.b	(a0)+,d1
		lsl.w	#3,d1
		subq.w	#1,d1

loc_7A54:				
		move.l	(a2)+,(a6)
		dbf	d1,loc_7A54
		bra.s	loc_7A40
; ===========================================================================

locret_7A5C:				
		rts	
; End of function sub_7A04

; ===========================================================================
word_7A5E:	dc.w  $804		; 0 
		dc.w $4004		; 1
		dc.w $1C02		; 2
		dc.w $4404		; 3
		dc.w $FFFF		; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Continue text
; ----------------------------------------------------------------------------

Sprite_7A68:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_7A76(pc,d0.w),d1
		jmp	off_7A76(pc,d1.w)
; ===========================================================================
off_7A76:	dc.w loc_7A7E-off_7A76	; 0 
					
		dc.w loc_7AAC-off_7A76	; 1
		dc.w loc_7AD0-off_7A76	; 2
		dc.w loc_7B46-off_7A76	; 3
; ===========================================================================

loc_7A7E:				
		addq.b	#2,$24(a0)
		move.l	#Map_7CB6,4(a0)
		move.w	#-$7B00,2(a0)
		bsr.w	sub_7D4A
		move.b	#0,1(a0)
		move.b	#$3C,$19(a0) ; '<'
		move.w	#$120,8(a0)
		move.w	#$C0,$A(a0)

loc_7AAC:				
		jmp	DisplaySprite
; ===========================================================================
word_7AB2:	dc.w  $116, $12A, $102,	$13E,  $EE, $152,  $DA,	$166; 0
					
		dc.w   $C6, $17A,  $B2,	$18E,  $9E, $1A2,  $8A;	8
; ===========================================================================

loc_7AD0:				
		movea.l	a0,a1
		lea	(word_7AB2)(pc),a2
		moveq	#0,d1
		move.b	(v_continues).w,d1
		subq.b	#2,d1
		bcc.s	loc_7AE6
		jmp	DeleteObject
; ===========================================================================

loc_7AE6:				
		moveq	#1,d3
		cmpi.b	#$E,d1
		bcs.s	loc_7AF2
		moveq	#0,d3
		moveq	#$E,d1

loc_7AF2:				
		move.b	d1,d2
		andi.b	#1,d2

loc_7AF8:				
		_move.b	#-$26,0(a1)
		move.w	(a2)+,8(a1)
		tst.b	d2
		beq.s	loc_7B0C
		subi.w	#$A,8(a1)

loc_7B0C:				
		move.w	#$D0,$A(a1)
		move.b	#4,$1A(a1)
		move.b	#6,$24(a1)
		move.l	#$7CB6,4(a1)
		move.w	#-$7ADC,2(a1)
		bsr.w	sub_7D44
		move.b	#0,1(a1)
		lea	$40(a1),a1
		dbf	d1,loc_7AF8
		lea	-$40(a1),a1
		move.b	d3,$28(a1)

loc_7B46:				
		tst.b	$28(a0)
		beq.s	loc_7B66
		cmpi.b	#4,($FFFFB024).w
		bcs.s	loc_7B66
		move.b	($FFFFFE0F).w,d0
		andi.b	#1,d0
		bne.s	loc_7B66
		tst.w	($FFFFB010).w
		bne.s	loc_7B7C
		rts	
; ===========================================================================

loc_7B66:				
					
		move.b	($FFFFFE0F).w,d0
		andi.b	#$F,d0
		bne.s	loc_7B76
		bchg	#0,$1A(a0)

loc_7B76:				
		jmp	DisplaySprite
; ===========================================================================

loc_7B7C:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Sonic	lying down from	continue screen
; ----------------------------------------------------------------------------

Sprite_7B82:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_7B96(pc,d0.w),d1
		jsr	off_7B96(pc,d1.w)
		jmp	DisplaySprite
; ===========================================================================
off_7B96:	dc.w loc_7BA2-off_7B96	; 0 
					
		dc.w loc_7BD2-off_7B96	; 1
		dc.w loc_7BFA-off_7B96	; 2
		dc.w loc_7C22-off_7B96	; 3
		dc.w loc_7C52-off_7B96	; 4
		dc.w loc_7C88-off_7B96	; 5
; ===========================================================================

loc_7BA2:				
		addq.b	#2,$24(a0)
		move.w	#$9C,8(a0)
		move.w	#$19C,$C(a0)
		move.l	#Map_Sonic,4(a0)
		move.w	#$780,2(a0)
		move.b	#4,1(a0)
		move.b	#2,$18(a0)
		move.b	#$20,$1C(a0) ; ' '

loc_7BD2:				
		tst.b	(v_joypad_press_actual).w
		bmi.s	loc_7BE4
		jsr	loc_1B350
		jmp	loc_1B848
; ===========================================================================

loc_7BE4:				
		addq.b	#2,$24(a0)
		move.b	#$21,$1C(a0) ; '!'
		clr.w	$14(a0)
		move.b	#-$20,d0
		bsr.w	PlaySound

loc_7BFA:				
		cmpi.w	#$800,$14(a0)
		bne.s	loc_7C0A
		move.w	#$1000,$10(a0)
		bra.s	loc_7C10
; ===========================================================================

loc_7C0A:				
		addi.w	#$20,$14(a0) ; ' '

loc_7C10:				
		jsr	SpeedToPos
		jsr	loc_1B350
		jmp	loc_1B848
; ===========================================================================

loc_7C22:				
		addq.b	#2,$24(a0)
		move.w	#$B8,8(a0)
		move.w	#$1A0,$C(a0)
		move.l	#Map_7CB6,4(a0)
		move.w	#$500,2(a0)
		move.b	#4,1(a0)
		move.b	#2,$18(a0)
		move.b	#0,$1C(a0)

loc_7C52:				
		tst.b	(v_joypad_press_actual).w
		bmi.s	loc_7C64
		lea	(off_7CB0).l,a1
		jmp	AnimateSprite
; ===========================================================================

loc_7C64:				
		addq.b	#2,$24(a0)
		move.l	#Map_Tails,4(a0)
		move.w	#$7A0,2(a0)
		move.b	#0,$1C(a0)
		clr.w	$14(a0)
		move.b	#-$20,d0
		bsr.w	PlaySound

loc_7C88:				
		cmpi.w	#$720,$14(a0)
		bne.s	loc_7C98
		move.w	#$1000,$10(a0)
		bra.s	loc_7C9E
; ===========================================================================

loc_7C98:				
		addi.w	#$18,$14(a0)

loc_7C9E:				
		jsr	SpeedToPos
		jsr	loc_1CDC4
		jmp	loc_1D1AC
; ===========================================================================
off_7CB0:	dc.w byte_7CB2-off_7CB0	; 0 
					
byte_7CB2:	dc.b   9,  2,  3,$FF	; 0 
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_7CB6:	dc.w word_7CC2-Map_7CB6; 0 ;	DATA XREF: ROM:00007A82o
					
		dc.w word_7CC2-Map_7CB6; 1
		dc.w word_7D1C-Map_7CB6; 2
		dc.w word_7D26-Map_7CB6; 3
		dc.w word_7D30-Map_7CB6; 4
		dc.w word_7D3A-Map_7CB6; 5
word_7CC2:	dc.w $B			
		dc.w $F805,  $90,  $48,$FFC4; 0
		dc.w $F805,  $88,  $44,$FFD4; 4
		dc.w $F805,  $84,  $42,$FFE4; 8
		dc.w $F805,  $94,  $4A,$FFF4; 12
		dc.w $F801,  $98,  $4C,	   4; 16
		dc.w $F805,  $84,  $42,	  $C; 20
		dc.w $F805,  $9A,  $4D,	 $1C; 24
		dc.w $F805,  $80,  $40,	 $2C; 28
		dc.w $3805,$2020,$2010,$FFE8; 32
		dc.w $3805,$2020,$2010,	   8; 36
		dc.w $3605, $1FC,  $FE,$FFF8; 40
word_7D1C:	dc.w 1			
		dc.w $F00F,    0,    0,$FFF0; 0
word_7D26:	dc.w 1			
		dc.w $F00F,  $10,    8,$FFF0; 0
word_7D30:	dc.w 1			
		dc.w	 6,    0,    0,	   0; 0
word_7D3A:	dc.w 1			
		dc.w	 6,    6,    3,	   0; 0

; =============== S U B	R O U T	I N E =======================================


sub_7D44:				
		jmp	sub_16D8A
; End of function sub_7D44


; =============== S U B	R O U T	I N E =======================================


sub_7D4A:				
		jmp	Adjust2PArtPointer
; End of function sub_7D4A

; ===========================================================================

GM_TwoPlayerResults:				
		bsr.w	PaletteFadeOut
	disable_ints
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#-$41,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_1208
		lea	(vdp_control_port).l,a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$8230,(a6)
		move.w	#$8700,(a6)
		move.w	#$8C81,(a6)
		move.w	#$9001,(a6)
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_7D96:				
		move.l	d0,(a1)+
		dbf	d1,loc_7D96
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_7DA6:				
		move.l	d0,(a1)+
		dbf	d1,loc_7DA6
		move.l	#$42000000,(vdp_control_port).l
		lea	(Nem_StandardFont).l,a0
		bsr.w	NemDec
		move.l	#$4E000000,(vdp_control_port).l
		lea	(Nem_1P2PWins).l,a0
		bsr.w	NemDec
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_MenuBack).l,a0
		move.w	#$6000,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000003,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		move.w	(v_results_screen_2p).w,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,d0
		lea	(off_87DC)(pc),a2
		movea.l	(a2,d0.w),a0
		movea.l	4(a2,d0.w),a2
		lea	(v_128x128_tiles).l,a1
		move.w	#0,d0
		bsr.w	EniDec
		jsr	(a2)
		lea	(v_128x128_tiles).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	TilemapToVRAM
		clr.w	(v_vdp_command_buffer).w
		move.l	#-$2400,(v_vdp_command_buffer_slot).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal_0
		moveq	#0,d0
		bsr.w	NewPLC
		moveq	#$26,d0	; '&'
		bsr.w	PalLoad_Next
		moveq	#0,d0
		move.b	#-$7F,d0
		cmp.w	(v_level_music).w,d0
		beq.s	loc_7E74
		move.w	d0,(v_level_music).w
		bsr.w	PlayMusic

loc_7E74:				
		move.w	#$707,(v_countdown).w
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	(v_fg_y_pos_vsram_p2).w
		clr.l	(v_hblank_fg_y_pos_vsram_p2).w
		move.b	#$21,($FFFFB000).w ; '!'
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_23C6

loc_7EB4:				
					
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal_0
		jsr	ExecuteObjects
		jsr	BuildSprites
		bsr.w	RunPLC
		tst.l	(v_plc_buffer).w
		bne.s	loc_7EB4
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		beq.s	loc_7EB4
		move.w	(v_results_screen_2p).w,d0
		bne.w	loc_7FB2
		tst.b	(v_act).w
		bne.s	loc_7F3C
		addq.b	#1,(v_act).w
		move.b	#1,(v_act_2p).w
		move.b	#$C,(v_gamemode).w
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		moveq	#0,d0
		move.l	d0,(v_score).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		rts	
; ===========================================================================

loc_7F3C:				
		move.b	#2,(v_act_2p).w
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		bsr.s	sub_7F9A
		bsr.s	sub_7F9A
		move.b	(a4),d1
		sub.b	1(a4),d1
		beq.s	loc_7F66
		move.w	#1,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_7F66:				
		move.b	(v_zone_2p).w,d0
		addq.b	#1,d0
		move.b	d0,(v_special_stage).w
		move.w	#3,(v_results_screen_2p).w
		move.b	#1,(f_unused_ss_flag).w
		move.b	#$10,(v_gamemode).w
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_7F9A:				
					
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		beq.s	loc_7FAE
		bcs.s	loc_7FAA
		addq.b	#1,(a4)
		bra.s	loc_7FAE
; ===========================================================================

loc_7FAA:				
		addq.b	#1,1(a4)

loc_7FAE:				
		addq.w	#2,a5
		rts	
; End of function sub_7F9A

; ===========================================================================

loc_7FB2:				
		subq.w	#1,d0
		bne.s	loc_8020

loc_7FB6:				
		lea	(v_ehz_results_2p).w,a4
		moveq	#0,d0
		moveq	#0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		addq.w	#2,a4
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		addq.w	#2,a4
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		addq.w	#2,a4
		move.w	(a4)+,d0
		add.l	d0,d1
		move.w	(a4)+,d0
		add.l	d0,d1
		swap	d1
		tst.w	d1
		bne.s	loc_7FF8
		move.w	#2,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_7FF8:				
		tst.w	(v_game_over_2p).w
		beq.s	loc_8018
		lea	(v_ehz_results_2p).w,a1
		moveq	#$B,d0

loc_8004:				
		move.w	#-1,(a1)+
		dbf	d0,loc_8004
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w

loc_8018:				
		move.b	#$1C,(v_gamemode).w
		rts	
; ===========================================================================

loc_8020:				
		subq.w	#1,d0
		bne.s	loc_802C
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================

loc_802C:				
		subq.w	#1,d0
		bne.w	loc_80BA
		cmpi.b	#3,(v_zone_2p).w
		beq.s	loc_8048
		move.w	#1,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_8048:				
		tst.b	(v_act_2p).w
		beq.s	loc_806C
		cmpi.b	#2,(v_act_2p).w
		beq.s	loc_80AC
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		bsr.s	sub_8094
		bsr.s	sub_8094
		move.b	(a4),d1
		sub.b	1(a4),d1
		bne.s	loc_80AC

loc_806C:				
		addq.b	#1,(v_act_2p).w
		addq.b	#1,(v_special_stage).w
		move.w	#3,(v_results_screen_2p).w
		move.b	#1,(f_unused_ss_flag).w
		move.b	#$10,(v_gamemode).w
		move.w	#1,(f_two_player).w
		move.w	#0,(v_level_music).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_8094:				
					
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		beq.s	loc_80A8
		bcs.s	loc_80A4
		addq.b	#1,(a4)
		bra.s	loc_80A8
; ===========================================================================

loc_80A4:				
		addq.b	#1,1(a4)

loc_80A8:				
		addq.w	#2,a5
		rts	
; End of function sub_8094

; ===========================================================================

loc_80AC:				
					
		move.w	#4,(v_results_screen_2p).w
		move.b	#$18,(v_gamemode).w
		rts	
; ===========================================================================

loc_80BA:				
		bra.w	loc_7FB6
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

TwoPlayerResults:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_80CC(pc,d0.w),d1
		jmp	off_80CC(pc,d1.w)
; ===========================================================================
off_80CC:	dc.w loc_80E4-off_80CC	; 0 
					
		dc.w loc_812C-off_80CC	; 1
		dc.w loc_81BC-off_80CC	; 2
		dc.w loc_8214-off_80CC	; 3
		dc.w loc_81BC-off_80CC	; 4
		dc.w loc_81FC-off_80CC	; 5
		dc.w loc_81AA+2-off_80CC; 6
		dc.w loc_8214-off_80CC	; 7
		dc.w loc_81BC-off_80CC	; 8
		dc.w loc_8214-off_80CC	; 9
		dc.w loc_81BC-off_80CC	; 10
		dc.w loc_8214-off_80CC	; 11
; ===========================================================================

loc_80E4:				
		addq.b	#2,$24(a0)
		move.w	(v_results_screen_2p).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.l	off_80CC+4(pc,d0.w),8(a0)
		move.l	#Map_8146,4(a0)
		move.w	#$70,2(a0) ; 'p'
		bsr.w	sub_8BC8
		move.b	#0,1(a0)
		move.b	#0,$18(a0)
		moveq	#2,d1
		move.b	(v_ss_total_won).w,d0
		sub.b	($FFFFFF39).w,d0
		beq.s	loc_8128
		bcs.s	loc_8126
		moveq	#0,d1
		bra.s	loc_8128
; ===========================================================================

loc_8126:				
		moveq	#1,d1

loc_8128:				
					
		move.b	d1,$1A(a0)

loc_812C:				
		andi.w	#$7FF,2(a0)
		btst	#3,($FFFFFE0F).w
		beq.s	loc_8140
		ori.w	#$2000,2(a0)

loc_8140:				
		jmp	DisplaySprite
; ===========================================================================
; --------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------
Map_8146:	dc.w word_814C-Map_8146; 0 ;	DATA XREF: ROM:000080F6o
					
		dc.w word_8166-Map_8146; 1
		dc.w word_8188-Map_8146; 2
word_814C:	dc.w 3			
		dc.w $F80D,    0,    0,	   0; 0
		dc.w $F80D,   $C,    6,	 $28; 4
		dc.w $F809,  $14,   $A,	 $48; 8
word_8166:	dc.w 4			
		dc.w $F805,    8,    4,	   0; 0
		dc.w $F805,    4,    2,	 $10; 4
		dc.w $F80D,   $C,    6,	 $28; 8
		dc.w $F809,  $14,   $A,	 $48; 12
word_8188:	dc.w 2			
		dc.w $F80D,  $1A,   $D,	 $18; 0
		dc.w $F805,  $22,  $11,	 $38; 4
; ===========================================================================

loc_819A:				
		move.w	#$1F2,d2
		moveq	#0,d0
		bsr.w	sub_8672
		move.w	#$216,d2
		moveq	#0,d1

loc_81AA:				
		move.b	(v_act_2p).w,d1
		addq.b	#1,d1
		bsr.w	sub_86B0
		move.w	#$33E,d2
		move.l	(v_score).w,d1

loc_81BC:				
		bsr.w	sub_86F6
		move.w	#$352,d2
		move.l	(v_score_p2).w,d1
		bsr.w	sub_86F6
		move.w	#$3DA,d2
		moveq	#0,d0
		move.w	(v_time).w,d1
		bsr.w	sub_86B0
		move.w	#$3E0,d2
		moveq	#0,d1
		move.b	(v_time_sec).w,d1
		bsr.w	sub_86B0
		move.w	#$3E6,d2
		moveq	#0,d1
		move.b	(v_time_frames).w,d1
		mulu.w	#$1B0,d1
		lsr.l	#8,d1
		bsr.w	sub_86B0

loc_81FC:				
		move.w	#$3EE,d2
		moveq	#0,d0
		move.w	(v_time_p2).w,d1
		bsr.w	sub_86B0
		move.w	#$3F4,d2
		moveq	#0,d1
		move.b	(v_time_sec_p2).w,d1

loc_8214:				
		bsr.w	sub_86B0
		move.w	#$3FA,d2
		moveq	#0,d1
		move.b	(v_time_frames_p2).w,d1
		mulu.w	#$1B0,d1
		lsr.l	#8,d1
		bsr.w	sub_86B0
		move.w	#$486,d2
		moveq	#0,d0
		move.w	(v_rings).w,d1
		bsr.w	sub_86B0
		move.w	#$49A,d2
		move.w	(v_rings_p2).w,d1
		bsr.w	sub_86B0
		move.w	#$526,d2
		moveq	#0,d0
		move.w	(v_rings_collected_p1).w,d1
		bsr.w	sub_86B0
		move.w	#$53A,d2
		move.w	(v_rings_collected_p2).w,d1
		bsr.w	sub_86B0
		move.w	#$5C6,d2
		moveq	#0,d0
		move.w	(v_monitors_broken_p1).w,d1
		bsr.w	sub_86B0
		move.w	#$5DA,d2
		move.w	(v_monitors_broken_p2).w,d1
		bsr.w	sub_86B0
		bsr.w	sub_8476
		move.w	#$364,d2
		move.w	#$6000,d0
		move.l	(v_score).w,d1
		sub.l	(v_score_p2).w,d1
		bsr.w	sub_8652
		move.w	#$404,d2
		move.l	(v_time_p2).w,d1
		sub.l	(v_time).w,d1
		bsr.w	sub_8652
		move.w	#$4A4,d2
		moveq	#0,d1
		move.w	(v_rings).w,d1
		sub.w	(v_rings_p2).w,d1
		bsr.w	sub_8652
		move.w	#$544,d2
		moveq	#0,d1
		move.w	(v_rings_collected_p1).w,d1
		sub.w	(v_rings_collected_p2).w,d1
		bsr.w	sub_8652
		move.w	#$5E4,d2
		moveq	#0,d1
		move.w	(v_monitors_broken_p1).w,d1
		sub.w	(v_monitors_broken_p2).w,d1
		bsr.w	sub_8652
		move.w	#$706,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a4),d1
		bsr.w	sub_86B0
		move.w	#$70E,d2
		moveq	#0,d1
		move.b	1(a4),d1
		bsr.w	sub_86B0
		move.w	(a4),(v_ss_total_won).w
		rts	
; ===========================================================================

loc_82FA:				
		move.w	#$242,d2
		moveq	#0,d0
		bsr.w	sub_8672
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		move.w	#$398,d6
		bsr.w	sub_854A
		move.w	#$488,d6
		bsr.w	sub_854A
		move.w	#$618,d6
		bsr.w	sub_854A
		rts	
; ===========================================================================

loc_8328:				
		lea	(v_ehz_results_2p).w,a5
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		move.w	#$208,d6
		bsr.w	sub_84C4
		move.w	#$258,d6
		bsr.w	sub_84C4
		move.w	#$2A8,d6
		bsr.w	sub_84C4
		move.w	#$348,d6
		bsr.w	sub_84C4
		move.w	#$398,d6
		bsr.w	sub_84C4
		move.w	#$3E8,d6
		bsr.w	sub_84C4
		move.w	#$488,d6
		bsr.w	sub_84C4
		move.w	#$4D8,d6
		bsr.w	sub_84C4
		move.w	#$528,d6
		bsr.w	sub_84C4
		move.w	#$5C8,d6
		bsr.w	sub_84C4
		move.w	#$618,d6
		bsr.w	sub_84C4
		move.w	#$668,d6
		bsr.w	sub_84C4
		move.w	#$70A,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a4),d1
		bsr.w	sub_86B0
		move.w	#$710,d2
		moveq	#0,d1
		move.b	1(a4),d1
		bsr.w	sub_86B0
		rts	
; ===========================================================================

loc_83B0:				
		move.w	#$266,d2
		moveq	#0,d1
		move.b	(v_act_2p).w,d1
		addq.b	#1,d1
		bsr.w	sub_86B0
		move.w	#$4D6,d2
		moveq	#0,d0
		move.w	(v_ss_2p_ring_buffer).w,d1
		bsr.w	sub_86B0
		move.w	#$4E6,d2
		move.w	($FFFFFFA2).w,d1
		bsr.w	sub_86B0
		move.w	#$576,d2
		moveq	#0,d0
		move.w	($FFFFFFA4).w,d1
		bsr.w	sub_86B0
		move.w	#$586,d2
		move.w	($FFFFFFA6).w,d1
		bsr.w	sub_86B0
		move.w	#$616,d2
		moveq	#0,d0
		move.w	($FFFFFFA8).w,d1
		bsr.w	sub_86B0
		move.w	#$626,d2
		move.w	($FFFFFFAA).w,d1
		bsr.w	sub_86B0
		bsr.w	sub_8476
		move.w	#$6000,d0
		move.w	#$4F0,d2
		moveq	#0,d1
		move.w	(v_ss_2p_ring_buffer).w,d1
		sub.w	($FFFFFFA2).w,d1
		bsr.w	sub_8652
		move.w	#$590,d2
		moveq	#0,d1
		move.w	($FFFFFFA4).w,d1
		sub.w	($FFFFFFA6).w,d1
		bsr.w	sub_8652
		move.w	#$630,d2
		moveq	#0,d1
		move.w	($FFFFFFA8).w,d1
		sub.w	($FFFFFFAA).w,d1
		bsr.w	sub_8652
		move.w	(a4),(v_ss_total_won).w
		rts	
; ===========================================================================

loc_8452:				
		bsr.w	sub_84A4
		lea	(v_ss_total_won).w,a4
		clr.w	(a4)
		move.w	#$4D4,d6
		bsr.w	sub_85CE
		move.w	#$574,d6
		bsr.w	sub_85CE
		move.w	#$614,d6
		bsr.w	sub_85CE
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_8476:				
					
		lea	(v_ehz_results_2p).w,a4
		move.b	(v_zone_2p).w,d0
		beq.s	loc_8494
		lea	(v_mcz_results_2p).w,a4
		subq.b	#1,d0
		beq.s	loc_8494
		lea	(v_cnz_results_2p).w,a4
		subq.b	#1,d0
		beq.s	loc_8494
		lea	(v_ss_results_2p).w,a4

loc_8494:				
		moveq	#0,d0
		move.b	(v_act_2p).w,d0
		add.w	d0,d0
		lea	(a4,d0.w),a4
		clr.w	(a4)
		rts	
; End of function sub_8476


; =============== S U B	R O U T	I N E =======================================


sub_84A4:				
					
		lea	(v_ehz_results_2p).w,a5
		move.b	(v_zone_2p).w,d0
		beq.s	locret_84C2
		lea	(v_mcz_results_2p).w,a5
		subq.b	#1,d0
		beq.s	locret_84C2
		lea	(v_cnz_results_2p).w,a5
		subq.b	#1,d0
		beq.s	locret_84C2
		lea	(v_ss_results_2p).w,a5

locret_84C2:				
		rts	
; End of function sub_84A4


; =============== S U B	R O U T	I N E =======================================


sub_84C4:				
					
		move.w	(a5),d0
		bmi.s	loc_84FC
		move.w	d6,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a5),d1
		bsr.w	sub_86B0
		addq.w	#8,d6
		move.w	d6,d2
		moveq	#0,d1
		move.b	1(a5),d1
		bsr.w	sub_86B0
		addi.w	#$12,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_84FC:				
		addq.w	#4,d6
		not.w	d0
		bne.s	loc_8522
		lea	(byte_87AC).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$16,d6
		move.w	d6,d2
		lea	(byte_87C1).l,a1
		bsr.w	loc_8698
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_8522:				
		moveq	#0,d0
		lea	(byte_8798).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$16,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; End of function sub_84C4


; =============== S U B	R O U T	I N E =======================================


sub_854A:				
					
		move.w	(a5),d0
		bmi.s	loc_8582
		move.w	d6,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a5),d1
		bsr.w	sub_86B0
		addq.w	#8,d6
		move.w	d6,d2
		moveq	#0,d1
		move.b	1(a5),d1
		bsr.w	sub_86B0
		addi.w	#$C,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_8582:				
		not.w	d0
		bne.s	loc_85A6
		lea	(byte_87AC).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		lea	(byte_87C1).l,a1
		bsr.w	loc_8698
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_85A6:				
		moveq	#0,d0
		lea	(byte_8798).l,a1
		move.w	d6,d2
		bsr.w	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; End of function sub_854A


; =============== S U B	R O U T	I N E =======================================


sub_85CE:				
					
		move.w	(a5),d0
		bmi.s	loc_8608
		move.w	d6,d2
		moveq	#0,d0
		moveq	#0,d1
		move.b	(a5),d1
		bsr.w	sub_86B0
		addi.w	#$C,d6
		move.w	d6,d2
		moveq	#0,d1
		move.b	1(a5),d1
		bsr.w	sub_86B0
		addi.w	#$10,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_8608:				
		not.w	d0
		bne.s	loc_862C
		lea	(byte_87AC).l,a1
		move.w	d6,d2
		addq.w	#4,d2
		bsr.w	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		lea	(byte_87C1).l,a1
		bsr.s	loc_8698
		addq.w	#2,a5
		rts	
; ===========================================================================

loc_862C:				
		moveq	#0,d0
		lea	(byte_8798).l,a1
		move.w	d6,d2
		bsr.s	loc_8698
		addi.w	#$14,d6
		move.w	d6,d2
		move.w	#$6000,d0
		moveq	#0,d1
		move.b	(a5),d1
		sub.b	1(a5),d1
		bsr.w	sub_8652
		addq.w	#2,a5
		rts	
; End of function sub_85CE


; =============== S U B	R O U T	I N E =======================================


sub_8652:				
					
		lea	(byte_87B4).l,a1
		beq.s	loc_8670
		bcs.s	loc_8666
		lea	(byte_87B9).l,a1
		addq.b	#1,(a4)
		bra.s	loc_8670
; ===========================================================================

loc_8666:				
		lea	(byte_87BD).l,a1
		addq.b	#1,1(a4)

loc_8670:				
		bra.s	loc_8698
; End of function sub_8652


; =============== S U B	R O U T	I N E =======================================


sub_8672:				
					
		lea	(byte_874A).l,a1
		move.b	(v_zone_2p).w,d1
		beq.s	loc_8698
		lea	(byte_8757).l,a1
		subq.b	#1,d1
		beq.s	loc_8698
		lea	(byte_8764).l,a1
		subq.b	#1,d1
		beq.s	loc_8698
		lea	(byte_8771).l,a1

loc_8698:				
		lea	(v_128x128_tiles).l,a2
		lea	(a2,d2.w),a2
		moveq	#0,d1
		move.b	(a1)+,d1

loc_86A6:				
		move.b	(a1)+,d0
		move.w	d0,(a2)+
		dbf	d1,loc_86A6
		rts	
; End of function sub_8672


; =============== S U B	R O U T	I N E =======================================


sub_86B0:				
					
		lea	(v_128x128_tiles).l,a2
		lea	(a2,d2.w),a2
		lea	(word_86F0).l,a3
		moveq	#0,d2
		moveq	#2,d5

loc_86C4:				
		moveq	#0,d3
		move.w	(a3)+,d4

loc_86C8:				
		sub.w	d4,d1
		bcs.s	loc_86D0
		addq.w	#1,d3
		bra.s	loc_86C8
; ===========================================================================

loc_86D0:				
		add.w	d4,d1
		tst.w	d5
		beq.s	loc_86E0
		tst.w	d3
		beq.s	loc_86DC
		moveq	#1,d2

loc_86DC:				
		tst.w	d2
		beq.s	loc_86E8

loc_86E0:				
		addi.b	#$10,d3
		move.b	d3,d0
		move.w	d0,(a2)

loc_86E8:				
		addq.w	#2,a2
		dbf	d5,loc_86C4
		rts	
; End of function sub_86B0

; ===========================================================================
word_86F0:	dc.w   $64		; 0 
		dc.w	$A		; 1
		dc.w	 1		; 2

; =============== S U B	R O U T	I N E =======================================


sub_86F6:				
					
		lea	(v_128x128_tiles).l,a2
		lea	(a2,d2.w),a2
		lea	(word_8732).l,a3
		moveq	#0,d2
		moveq	#5,d5

loc_870A:				
		moveq	#0,d3
		move.l	(a3)+,d4

loc_870E:				
		sub.l	d4,d1
		bcs.s	loc_8716
		addq.w	#1,d3
		bra.s	loc_870E
; ===========================================================================

loc_8716:				
		add.l	d4,d1
		tst.w	d3
		beq.s	loc_871E
		moveq	#1,d2

loc_871E:				
		tst.w	d2
		beq.s	loc_872A
		addi.b	#$10,d3
		move.b	d3,d0
		move.w	d0,(a2)

loc_872A:				
		addq.w	#2,a2
		dbf	d5,loc_870A
		rts	
; End of function sub_86F6

; ===========================================================================
word_8732:	dc.w	 1		; 0 
		dc.w $86A0		; 1
		dc.w	 0		; 2
		dc.w $2710		; 3
		dc.w	 0		; 4
		dc.w  $3E8		; 5
		dc.w	 0		; 6
		dc.w   $64		; 7
		dc.w	 0		; 8
		dc.w	$A		; 9
		dc.w	 0		; 10
		dc.w	 1		; 11
byte_874A:	dc.b  $B,$22,$2A,$22,$2F,$1E,$29,$21,  0,$25,$26,$29,$29; 0
					
byte_8757:	dc.b  $B,  0,$2A,$36,$30,$31,$26,$20,  0,$20,$1E,$33,$22; 0
					
byte_8764:	dc.b  $B,$20,$1E,$30,$26,$2B,$2C,  0,$2B,$26,$24,$25,$31; 0
					
					
byte_8771:	dc.b  $C,$30,$2D,$22,$20,$26,$1E,$29,  0,$30,$31,$1E,$24,$22; 0
					
byte_877F:	dc.b  $B,  0,  0,  0,$30,$2D,$22,$20,$26,$1E,$29,  0,  0; 0
					
byte_878C:	dc.b   4,$37,$2C,$2B,$22,  0; 0	
					
byte_8792:	dc.b   4,$30,$31,$1E,$24,$22; 0	
byte_8798:	dc.b   8,$24,$1E,$2A,$22,  0,$2C,$33,$22,$2F; 0	
					
		dc.b   8,$31,$26,$2A,$22,  0,$2C,$33,$22,$2F; 0
byte_87AC:	dc.b   6,$2B,$2C,  0,$24,$1E,$2A,$22; 0	
					
byte_87B4:	dc.b   3,$31,$26,$22,$21; 0 
byte_87B9:	dc.b   2,  0,$11,$2D	; 0 
byte_87BD:	dc.b   2,  0,$12,$2D	; 0 
byte_87C1:	dc.b   3,  0,  0,  0,  0; 0 
					
; ------------------------------------------------------------------------
; Menu animated	pattern	load cue
; ------------------------------------------------------------------------
word_87C6:	dc.w   0		; 0 
					
; Sonic/Miles animated background
		dc.l $FF000000+Art_MenuBack
		dc.w $20
		dc.b 6
		dc.b $A
		dc.b   0,$C7		; 0
		dc.b  $A,  5		; 2
		dc.b $14,  5		; 4
		dc.b $1E,$C7		; 6
		dc.b $14,  5		; 8
		dc.b  $A,  5		; 10
off_87DC:	dc.l Eni_2PActResults		
		dc.l loc_819A
		dc.l Eni_2PZoneResults
		dc.l loc_82FA
		dc.l Eni_2PGameResults
		dc.l loc_8328
		dc.l Eni_2PSpecialStageActResults
		dc.l loc_83B0
		dc.l Eni_2PSpecialStageZoneResults
		dc.l loc_8452

	

		incfile	Eni_2PActResults	; byte_8804: Map_2PActResults:	
		incfile	Eni_2PZoneResults	; byte_88CE: Map_2PZoneResults:
		incfile	Eni_2PGameResults	; byte_8960: Map_2PGameResults:
		incfile	Eni_2PSpecialStageActResults	; byte_8AA4: Map_2PSpecialStageActResults:
		incfile	Eni_2PSpecialStageZoneResults	; byte_8B30: Map_2PSpecialStageZoneResults:
		
; =============== S U B	R O U T	I N E =======================================

	if ~RemoveJmpTos
sub_8BC8:				
		jmp	Adjust2PArtPointer
j_Dynamic_Normal_0:								
		jmp	Dynamic_Normal
	endc

; ===========================================================================

MenuScreen:				
					
		bsr.w	PaletteFadeOut
	disable_ints
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#-$41,d0
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_1208
		lea	(vdp_control_port).l,a6
		move.w	#-$7FFC,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7900,(a6)
		move.w	#-$737F,(a6)
		move.w	#-$6FFF,(a6)
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_8C1A:				
		move.l	d0,(a1)+
		dbf	d1,loc_8C1A
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_8C2A:				
		move.l	d0,(a1)+
		dbf	d1,loc_8C2A
		clr.w	(v_vdp_command_buffer).w
		move.l	#-$2400,(v_vdp_command_buffer_slot).w
		move.l	#$42000000,(vdp_control_port).l
		lea	(Nem_StandardFont).l,a0
		bsr.w	NemDec
		move.l	#$4E000000,(vdp_control_port).l
		lea	(Nem_MenuBox).l,a0
		bsr.w	NemDec
		move.l	#$52000000,(vdp_control_port).l
		lea	(Nem_LevelSelectPics).l,a0
		bsr.w	NemDec
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_MenuBack).l,a0
		move.w	#$6000,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$60000003,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	loc_9C70
		cmpi.b	#$24,(v_gamemode).w ; '$'
		beq.w	loc_8FCC
		cmpi.b	#$28,(v_gamemode).w ; '('
		beq.w	loc_92F6
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_LevelSelect2P).l,a0
		move.w	#$70,d0	; 'p'
		bsr.w	EniDec
		lea	($FFFF0198).l,a1
		lea	(Eni_LevelSelect2P).l,a0
		move.w	#$2070,d0
		bsr.w	EniDec
		lea	($FFFF0330).l,a1
		lea	(Eni_LevelSelectIcons).l,a0
		move.w	#$90,d0	
		bsr.w	EniDec
		lea	($FFFF0498).l,a2
		moveq	#$F,d1

loc_8CF8:				
		move.w	#$207B,(a2)+
		dbf	d1,loc_8CF8
		bsr.w	sub_8E7E
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		bsr.w	sub_8F1C
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		bsr.w	sub_8F1C
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		bsr.w	sub_8F1C
		addq.b	#1,(v_zone_2p).w
		andi.b	#3,(v_zone_2p).w
		clr.w	(v_player_mode).w
		clr.b	(v_act_2p).w
		clr.w	(v_results_screen_2p).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		clr.w	(v_game_over_2p).w
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal
		moveq	#$26,d0	; '&'
		bsr.w	PalLoad_Next
		lea	(v_pal_dry_line3).w,a1
		lea	($FFFFFBC0).w,a2
		moveq	#7,d1

loc_8D6A:				
		move.l	(a1),(a2)+
		clr.l	(a1)+
		dbf	d1,loc_8D6A
		move.b	#-$6F,d0
		bsr.w	loc_9C6A
		move.w	#$707,(v_countdown).w
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_23C6

loc_8DA8:				
					
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
	disable_ints
		bsr.w	sub_8F1C
		bsr.w	sub_8E5A
		bsr.w	sub_8E7E
		move	#$2300,sr
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		bne.s	loc_8DE2
		bra.w	loc_8DA8
; ===========================================================================

loc_8DE2:				
		bsr.w	sub_8EFE
		bmi.s	loc_8DF4
		move.w	#$ED,d0	
		bsr.w	loc_9C64
		bra.w	loc_8DA8
; ===========================================================================

loc_8DF4:				
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		add.w	d0,d0
		move.w	word_8E52(pc,d0.w),d0
		bmi.s	loc_8E3A
		move.w	d0,(v_zone).w
		move.w	#1,(f_two_player).w
		move.b	#$C,(v_gamemode).w
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		moveq	#0,d0
		move.l	d0,(v_score).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		rts	
; ===========================================================================

loc_8E3A:				
		move.b	#4,(v_special_stage).w
		move.b	#$10,(v_gamemode).w
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		rts	
; ===========================================================================
word_8E52:	dc.w	 0		; 0
		dc.w  $B00		; 1
		dc.w  $C00		; 2
		dc.w $FFFF		; 3

; =============== S U B	R O U T	I N E =======================================


sub_8E5A:				
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		move.b	d0,d1
		andi.b	#3,d0
		beq.s	loc_8E70
		bchg	#1,(v_zone_2p).w

loc_8E70:				
		andi.b	#$C,d1
		beq.s	locret_8E7C
		bchg	#0,(v_zone_2p).w

locret_8E7C:				
		rts	
; End of function sub_8E5A


; =============== S U B	R O U T	I N E =======================================


sub_8E7E:				
					
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		lsl.w	#4,d0
		lea	(off_8F7E).l,a3
		lea	(a3,d0.w),a3
		move.w	#$6000,d0
		lea	($FFFF0048).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF0094).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF00D8).l,a2
		movea.l	4(a3),a1
		bsr.w	sub_8EFE
		bmi.s	loc_8EC2
		lea	($FFFF0468).l,a1

loc_8EC2:				
		moveq	#2,d1

loc_8EC4:				
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		lea	$1A(a2),a2
		dbf	d1,loc_8EC4
		lea	(v_128x128_tiles).l,a1
		move.l	(a3)+,d0
		moveq	#$10,d1
		moveq	#$B,d2
		bsr.w	loc_9C70
		lea	(Pal_LevelSelectIcons).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a1
		lea	(v_pal_dry_line3).w,a2
		moveq	#7,d1

loc_8EF6:				
		move.l	(a1)+,(a2)+
		dbf	d1,loc_8EF6
		rts	
; End of function sub_8E7E


; =============== S U B	R O U T	I N E =======================================


sub_8EFE:				
					
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		add.w	d0,d0
		lea	(v_ehz_results_2p).w,a5
		lea	(a5,d0.w),a5
		move.w	(a5),d0
		add.w	2(a5),d0
		rts	
; End of function sub_8EFE


; =============== S U B	R O U T	I N E =======================================


sub_8F1C:				
					
		moveq	#0,d0
		move.b	(v_zone_2p).w,d0
		lsl.w	#4,d0
		lea	(off_8F7E).l,a3
		lea	(a3,d0.w),a3
		moveq	#0,d0
		lea	($FFFF01E0).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF022C).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF0270).l,a2
		lea	($FFFF0498).l,a1
		bsr.w	sub_8EFE
		bmi.s	loc_8F60
		lea	($FFFF0468).l,a1

loc_8F60:				
		moveq	#2,d1

loc_8F62:				
		move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		lea	$1A(a2),a2
		dbf	d1,loc_8F62
		lea	($FFFF0198).l,a1
		move.l	(a3)+,d0
		moveq	#$10,d1
		moveq	#$B,d2
		bra.w	loc_9C70
; End of function sub_8F1C

; ===========================================================================
off_8F7E:	dc.l byte_874A		
		dc.l byte_878C
		dc.w $4104
		dc.w 3
		dc.w $FF
		dc.w $330
		dc.l byte_8757
		dc.l byte_878C
		dc.w $412C
		dc.w 3
		dc.w $5FF
		dc.w $3A8
		dc.l byte_8764
		dc.l byte_878C
		dc.w $4784
		dc.w 3
		dc.w $6FF
		dc.w $3C0
		dc.l byte_877F
		dc.l byte_8792
		dc.w $47AC
		dc.w 3
		dc.w $CFF
		dc.w $450

; =============== S U B	R O U T	I N E =======================================


sub_8FBE:				
		moveq	#0,d1
		move.b	(a1)+,d1

loc_8FC2:				
		move.b	(a1)+,d0
		move.w	d0,(a2)+
		dbf	d1,loc_8FC2
		rts	
; End of function sub_8FBE

; ===========================================================================

loc_8FCC:				
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_Options).l,a0
		move.w	#$70,d0	; 'p'
		bsr.w	EniDec
		lea	($FFFF0160).l,a1
		lea	(Eni_Options).l,a0
		move.w	#$2070,d0
		bsr.w	EniDec
		clr.b	(v_options_menu_box).w
		bsr.w	sub_9186
		addq.b	#1,(v_options_menu_box).w
		bsr.w	loc_91F8
		addq.b	#1,(v_options_menu_box).w
		bsr.w	loc_91F8
		clr.b	(v_options_menu_box).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal
		moveq	#$26,d0	; '&'
		bsr.w	PalLoad_Next
		move.b	#-$6F,d0
		bsr.w	loc_9C6A
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		clr.w	(v_correct_cheat_entries).w
		clr.w	(v_correct_cheat_entries_2).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_23C6

loc_9060:				
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
	disable_ints
		bsr.w	loc_91F8
		bsr.w	sub_90E0
		bsr.w	sub_9186
		move	#$2300,sr
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		bne.s	loc_909A
		bra.w	loc_9060
; ===========================================================================

loc_909A:				
		move.b	(v_options_menu_box).w,d0
		bne.s	loc_90B6
		moveq	#0,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		move.w	d0,(v_zone).w
		move.b	#$C,(v_gamemode).w
		rts	
; ===========================================================================

loc_90B6:				
		subq.b	#1,d0
		bne.s	loc_90D8
		moveq	#1,d0
		move.w	d0,(f_two_player).w
		move.w	d0,(f_two_player_mode_copy).w
		move.b	#$1C,(v_gamemode).w
		move.b	#0,(v_zone_2p).w
		move.w	#0,(v_player_mode).w
		rts	
; ===========================================================================

loc_90D8:				
		move.b	#0,(v_gamemode).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_90E0:				
		moveq	#0,d2
		move.b	(v_options_menu_box).w,d2
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		btst	#0,d0
		beq.s	loc_90FC
		subq.b	#1,d2
		bcc.s	loc_90FC
		move.b	#2,d2

loc_90FC:				
		btst	#1,d0
		beq.s	loc_910C
		addq.b	#1,d2
		cmpi.b	#3,d2
		bcs.s	loc_910C
		moveq	#0,d2

loc_910C:				
		move.b	d2,(v_options_menu_box).w
		lsl.w	#2,d2
		move.b	word_917A(pc,d2.w),d3
		movea.l	word_917A(pc,d2.w),a1
		move.w	(a1),d2
		btst	#2,d0
		beq.s	loc_9128
		subq.b	#1,d2
		bcc.s	loc_9128
		move.b	d3,d2

loc_9128:				
		btst	#3,d0
		beq.s	loc_9136
		addq.b	#1,d2
		cmp.b	d3,d2
		bls.s	loc_9136
		moveq	#0,d2

loc_9136:				
		btst	#6,d0
		beq.s	loc_9146
		addi.b	#$10,d2
		cmp.b	d3,d2
		bls.s	loc_9146
		moveq	#0,d2

loc_9146:				
		move.w	d2,(a1)
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	locret_9178
		andi.w	#$30,d0	; '0'
		beq.s	locret_9178
		move.w	($FFFFFF84).w,d0
		addi.w	#$80,d0	
		bsr.w	loc_9C6A
		lea	(byte_97B2).l,a0
		lea	(byte_97B7).l,a2
		lea	(f_levelselect_cheat).w,a1
		moveq	#0,d2
		bsr.w	loc_9746

locret_9178:				
		rts	
; End of function sub_90E0

; ===========================================================================
word_917A:	dc.w  $2FF		; 0 
					
		dc.w $FF72		; 1
		dc.w  $1FF		; 2
		dc.w $FF74		; 3
		dc.w $7FFF		; 4
		dc.w $FF84		; 5

; =============== S U B	R O U T	I N E =======================================


sub_9186:				
					
		bsr.w	loc_9268
		moveq	#0,d1
		move.b	(v_options_menu_box).w,d1
		lsl.w	#3,d1
		lea	(off_92BA).l,a3
		lea	(a3,d1.w),a3
		move.w	#$6000,d0
		lea	($FFFF0030).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF00B6).l,a2
		moveq	#0,d1
		cmpi.b	#2,(v_options_menu_box).w
		beq.s	loc_91CE
		move.b	(v_options_menu_box).w,d1
		lsl.w	#2,d1
		lea	(word_917A)(pc),a1
		movea.l	(a1,d1.w),a1
		move.w	(a1),d1
		lsl.w	#2,d1

loc_91CE:				
		movea.l	(a4,d1.w),a1
		bsr.w	sub_8FBE
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	loc_91E8
		lea	($FFFF00C2).l,a2
		bsr.w	loc_9296

loc_91E8:				
		lea	(v_128x128_tiles).l,a1
		move.l	(a3)+,d0
		moveq	#$15,d1
		moveq	#7,d2
		bra.w	loc_9C70
; ===========================================================================

loc_91F8:				
					
		bsr.w	loc_9268
		moveq	#0,d1
		move.b	(v_options_menu_box).w,d1
		lsl.w	#3,d1
		lea	(off_92BA).l,a3
		lea	(a3,d1.w),a3
		moveq	#0,d0
		lea	($FFFF0190).l,a2
		movea.l	(a3)+,a1
		bsr.w	sub_8FBE
		lea	($FFFF0216).l,a2
		moveq	#0,d1
		cmpi.b	#2,(v_options_menu_box).w
		beq.s	loc_923E
		move.b	(v_options_menu_box).w,d1
		lsl.w	#2,d1
		lea	(word_917A)(pc),a1
		movea.l	(a1,d1.w),a1
		move.w	(a1),d1
		lsl.w	#2,d1

loc_923E:				
		movea.l	(a4,d1.w),a1
		bsr.w	sub_8FBE
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	loc_9258
		lea	($FFFF0222).l,a2
		bsr.w	loc_9296

loc_9258:				
		lea	($FFFF0160).l,a1
		move.l	(a3)+,d0
		moveq	#$15,d1
		moveq	#7,d2
		bra.w	loc_9C70
; ===========================================================================

loc_9268:				
		lea	(off_92D2).l,a4
		tst.b	(v_console_region).w
		bpl.s	loc_927A
		lea	(off_92DE).l,a4

loc_927A:				
		tst.b	(v_options_menu_box).w
		beq.s	loc_9286
		lea	(off_92EA).l,a4

loc_9286:				
		cmpi.b	#2,(v_options_menu_box).w
		bne.s	locret_9294
		lea	(off_92F2).l,a4

locret_9294:				
		rts	
; ===========================================================================

loc_9296:				
		move.w	($FFFFFF84).w,d1
		move.b	d1,d2
		lsr.b	#4,d1
		bsr.s	loc_92A2
		move.b	d2,d1

loc_92A2:				
		andi.w	#$F,d1
		cmpi.b	#$A,d1
		bcs.s	loc_92B0
		addi.b	#4,d1

loc_92B0:				
		addi.b	#$10,d1
		move.b	d1,d0
		move.w	d0,(a2)+
		rts	
; ===========================================================================
off_92BA:	dc.l byte_97CA		
		dc.w $4192
		dc.w 3
		dc.l byte_982C
		dc.w $4592
		dc.w 3
		dc.l byte_985E
		dc.w $4992
		dc.w 3
off_92D2:	dc.l byte_97DC		
		dc.l byte_97FC
		dc.l byte_980C
off_92DE:	dc.l byte_97EC		
		dc.l byte_97FC
		dc.l byte_981C
off_92EA:	dc.l byte_983E		
		dc.l byte_984E
off_92F2:	dc.l byte_9870		
; ===========================================================================

loc_92F6:				
		lea	(v_128x128_tiles).l,a1
		lea	(Eni_LevelSelect).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1	; '''
		moveq	#$1B,d2
		bsr.w	loc_9C70
		moveq	#0,d3
		bsr.w	loc_965A
		lea	($FFFF08C0).l,a1
		lea	(Eni_LevelSelectIcons).l,a0
		move.w	#$90,d0	
		bsr.w	EniDec
		bsr.w	loc_9688
		clr.w	(v_player_mode).w
		clr.w	(v_results_screen_2p).w
		clr.b	(f_level_started).w
		clr.w	(v_anim_counters).w
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal
		moveq	#$26,d0	; '&'
		bsr.w	PalLoad_Next
		lea	(v_pal_dry_line3).w,a1
		lea	($FFFFFBC0).w,a2
		moveq	#7,d1

loc_9366:				
		move.l	(a1),(a2)+
		clr.l	(a1)+
		dbf	d1,loc_9366
		move.b	#-$6F,d0
		bsr.w	loc_9C6A
		move.w	#$707,(v_countdown).w
		clr.w	(f_two_player).w
		clr.l	(v_camera_x_pos).w
		clr.l	(v_camera_y_pos).w
		clr.w	(v_correct_cheat_entries).w
		clr.w	(v_correct_cheat_entries_2).w
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l
		bsr.w	sub_23C6

loc_93AC:				
		move.b	#$16,(v_vblank_routine).w
		bsr.w	WaitForVBlank
	disable_ints
		moveq	#0,d3
		bsr.w	loc_95B8
		bsr.w	loc_94DC
		move.w	#$6000,d3
		bsr.w	loc_95B8
		bsr.w	loc_9688
		move	#$2300,sr
		lea	(word_87C6).l,a2
		bsr.w	j_Dynamic_Normal
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#-$80,d0
		bne.s	loc_93F0
		bra.w	loc_93AC
; ===========================================================================

loc_93F0:				
		move.w	(v_level_select_zone).w,d0
		add.w	d0,d0
		move.w	Misc_9454(pc,d0.w),d0
		bmi.w	loc_944C
		cmpi.w	#$4000,d0
		bne.s	loc_9480
		move.b	#$10,(v_gamemode).w
		clr.w	(v_zone).w
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		move.w	(v_player_option).w,(v_player_mode).w
		rts	
; ===========================================================================

loc_944C:				
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================
; -----------------------------------------------------------------------------
; Level	Select Level Order
;
; One entry per	item in	the level select menu. Just set	the value for the item
; you want to link to the level/act number of the level	you want to load when
; the player selects that item.
; -----------------------------------------------------------------------------
Misc_9454:
		dc.w	 0		; 0
		dc.w	 1		; 1
		dc.w  $D00		; 2
		dc.w  $D01		; 3
		dc.w  $F00		; 4
		dc.w  $F01		; 5
		dc.w  $C00		; 6
		dc.w  $C01		; 7
		dc.w  $700		; 8
		dc.w  $701		; 9
		dc.w  $B00		; 10
		dc.w  $B01		; 11
		dc.w  $A00		; 12
		dc.w  $A01		; 13
		dc.w  $400		; 14
		dc.w  $401		; 15
		dc.w  $500		; 16
		dc.w $1000		; 17
		dc.w  $600		; 18
		dc.w  $E00		; 19
		dc.w $4000		; 20
		dc.w $FFFF		; 21
; ===========================================================================

loc_9480:				
		andi.w	#$3FFF,d0
		move.w	d0,(v_zone).w
		move.b	#$C,(v_gamemode).w
		move.b	#3,(v_lives).w
		move.b	#3,(v_lives_p2).w
		moveq	#0,d0
		move.w	d0,(v_rings).w
		move.l	d0,(v_time).w
		move.l	d0,(v_score).w
		move.w	d0,(v_rings_p2).w
		move.l	d0,(v_time_p2).w
		move.l	d0,(v_score_p2).w
		move.b	d0,(v_continues).w
		move.l	#$1388,(v_score_next_life).w
		move.l	#$1388,(v_score_next_life_p2).w
		move.b	#-7,d0
		bsr.w	loc_9C64
		moveq	#0,d0
		move.w	d0,(f_two_player_mode_copy).w
		move.w	d0,(f_two_player).w
		rts	
; ===========================================================================

loc_94DC:				
		move.b	(v_joypad_press_actual).w,d1
		andi.b	#3,d1
		bne.s	loc_94EC
		subq.w	#1,(v_levelselect_hold_delay).w
		bpl.s	loc_9522

loc_94EC:				
		move.w	#$B,(v_levelselect_hold_delay).w
		move.b	(v_joypad_hold_actual).w,d1
		andi.b	#3,d1
		beq.s	loc_9522
		move.w	(v_level_select_zone).w,d0
		btst	#0,d1
		beq.s	loc_950C
		subq.w	#1,d0
		bcc.s	loc_950C
		moveq	#$15,d0

loc_950C:				
					
		btst	#1,d1
		beq.s	loc_951C
		addq.w	#1,d0
		cmpi.w	#$16,d0
		bcs.s	loc_951C
		moveq	#0,d0

loc_951C:				
					
		move.w	d0,(v_level_select_zone).w
		rts	
; ===========================================================================

loc_9522:				
					
		cmpi.w	#$15,(v_level_select_zone).w
		bne.s	loc_958A
		move.w	($FFFFFF84).w,d0
		move.b	(v_joypad_press_actual).w,d1
		btst	#2,d1
		beq.s	loc_953E
		subq.b	#1,d0
		bcc.s	loc_953E
		moveq	#$7F,d0	; ''

loc_953E:				
					
		btst	#3,d1
		beq.s	loc_954E
		addq.b	#1,d0
		cmpi.w	#$80,d0	
		bcs.s	loc_954E
		moveq	#0,d0

loc_954E:				
					
		btst	#6,d1
		beq.s	loc_955C
		addi.b	#$10,d0
		andi.b	#$7F,d0	; ''

loc_955C:				
		move.w	d0,($FFFFFF84).w
		andi.w	#$30,d1	; '0'
		beq.s	locret_9588
		move.w	($FFFFFF84).w,d0
		addi.w	#$80,d0	
		bsr.w	loc_9C6A
		lea	(byte_97BC).l,a0
		lea	(byte_97C5).l,a2
		lea	(f_debug_cheat).w,a1
		moveq	#1,d2
		bsr.w	loc_9746

locret_9588:				
		rts	
; ===========================================================================

loc_958A:				
		move.b	(v_joypad_press_actual).w,d1
		andi.b	#$C,d1
		beq.s	locret_95A0
		move.w	(v_level_select_zone).w,d0
		move.b	byte_95A2(pc,d0.w),d0
		move.w	d0,(v_level_select_zone).w

locret_95A0:				
		rts	
; ===========================================================================
byte_95A2:	dc.b $E			; 0
		dc.b $F			; 1
		dc.b $11		; 2
		dc.b $11		; 3
		dc.b $12		; 4
		dc.b $12		; 5
		dc.b $13		; 6
		dc.b $13		; 7
		dc.b $14		; 8
		dc.b $14		; 9
		dc.b $15		; 10
		dc.b $15		; 11
		dc.b $C			; 12
		dc.b $D			; 13
		dc.b 0			; 14
		dc.b 1			; 15
		dc.b 1			; 16
		dc.b 2			; 17
		dc.b 4			; 18
		dc.b 6			; 19
		dc.b 8			; 20
		dc.b $A			; 21
; ===========================================================================

loc_95B8:				
					
		lea	(v_128x128_tiles).l,a4
		lea	(byte_96EE).l,a5
		lea	(vdp_data_port).l,a6
		moveq	#0,d0
		move.w	(v_level_select_zone).w,d0
		lsl.w	#2,d0
		lea	(a5,d0.w),a3
		moveq	#0,d0
		move.b	(a3),d0
		mulu.w	#$50,d0	; 'P'
		moveq	#0,d1
		move.b	1(a3),d1
		add.w	d1,d0
		lea	(a4,d0.w),a1
		moveq	#0,d1
		move.b	(a3),d1
		lsl.w	#7,d1
		add.b	1(a3),d1
		addi.w	#-$4000,d1
		lsl.l	#2,d1
		lsr.w	#2,d1
		ori.w	#$4000,d1
		swap	d1
		move.l	d1,4(a6)
		moveq	#$D,d2

loc_9608:				
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a6)
		dbf	d2,loc_9608
		addq.w	#2,a3
		moveq	#0,d0
		move.b	(a3),d0
		beq.s	loc_964C
		mulu.w	#$50,d0	; 'P'
		moveq	#0,d1
		move.b	1(a3),d1
		add.w	d1,d0
		lea	(a4,d0.w),a1
		moveq	#0,d1
		move.b	(a3),d1
		lsl.w	#7,d1
		add.b	1(a3),d1
		addi.w	#-$4000,d1
		lsl.l	#2,d1
		lsr.w	#2,d1
		ori.w	#$4000,d1
		swap	d1
		move.l	d1,4(a6)
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a6)

loc_964C:				
		cmpi.w	#$15,(v_level_select_zone).w
		bne.s	locret_9658
		bsr.w	loc_965A

locret_9658:				
		rts	
; ===========================================================================

loc_965A:				
					
		move.l	#$49440003,(vdp_control_port).l
		move.w	($FFFFFF84).w,d0
		move.b	d0,d2
		lsr.b	#4,d0
		bsr.s	loc_9670
		move.b	d2,d0

loc_9670:				
		andi.w	#$F,d0
		cmpi.b	#$A,d0
		bcs.s	loc_967E
		addi.b	#4,d0

loc_967E:				
		addi.b	#$10,d0
		add.w	d3,d0
		move.w	d0,(a6)
		rts	
; ===========================================================================

loc_9688:				
					
		move.w	(v_level_select_zone).w,d0
		lea	(byte_96D8).l,a3
		lea	(a3,d0.w),a3
		lea	($FFFF08C0).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#3,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(a1,d0.w),a1
		move.l	#$4B360003,d0
		moveq	#3,d1
		moveq	#2,d2
		bsr.w	loc_9C70
		lea	(Pal_LevelSelectIcons).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a1
		lea	(v_pal_dry_line3).w,a2
		moveq	#7,d1

loc_96D0:				
		move.l	(a1)+,(a2)+
		dbf	d1,loc_96D0
		rts	
; ===========================================================================
byte_96D8:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   7		; 2
		dc.b   7		; 3
		dc.b   8		; 4
		dc.b   8		; 5
		dc.b   6		; 6
		dc.b   6		; 7
		dc.b   2		; 8
		dc.b   2		; 9
		dc.b   5		; 10
		dc.b   5		; 11
		dc.b   4		; 12
		dc.b   4		; 13
		dc.b   1		; 14
		dc.b   1		; 15
		dc.b   1		; 16
		dc.b   9		; 17
		dc.b  $A		; 18
		dc.b  $B		; 19
		dc.b  $C		; 20
		dc.b  $E		; 21
byte_96EE:	dc.b   3,  6,  3,$24,  3,  6,  4,$24,  6,  6,  6,$24,  6,  6,  7,$24; 0
					
		dc.b   9,  6,  9,$24,  9,  6, $A,$24, $C,  6, $C,$24, $C,  6, $D,$24; 16
		dc.b  $F,  6, $F,$24, $F,  6,$10,$24,$12,  6,$12,$24,$12,  6,$13,$24; 32
		dc.b $15,  6,$15,$24,$15,  6,$16,$24,  3,$2C,  3,$48,  3,$2C,  4,$48; 48
		dc.b   3,$2C,  5,$48,  6,$2C,  0,  0,  9,$2C,  0,  0, $C,$2C,  0,  0; 64
		dc.b  $F,$2C,  0,  0,$12,$2C,$12,$48; 80
; ===========================================================================

loc_9746:				
					
		move.w	(v_correct_cheat_entries).w,d0
		adda.w	d0,a0
		move.w	($FFFFFF84).w,d0
		cmp.b	(a0),d0
		bne.s	loc_976A
		addq.w	#1,(v_correct_cheat_entries).w
		tst.b	1(a0)
		bne.s	loc_9770
		move.w	#$101,(a1)
		move.b	#-$4B,d0
		bsr.w	loc_9C64

loc_976A:				
		move.w	#0,(v_correct_cheat_entries).w

loc_9770:				
		move.w	(v_correct_cheat_entries_2).w,d0
		adda.w	d0,a2
		move.w	($FFFFFF84).w,d0
		cmp.b	(a2),d0
		bne.s	loc_97AA
		addq.w	#1,(v_correct_cheat_entries_2).w
		tst.b	1(a2)
		bne.s	locret_97B0
		tst.w	d2
		bne.s	loc_979C
		move.b	#$F,(v_continues).w
		move.b	#$3F,d0	; '?'
		bsr.w	loc_9C6A
		bra.s	loc_97AA
; ===========================================================================

loc_979C:				
		move.w	#7,(f_got_emerald).w
		move.b	#-$63,d0
		bsr.w	loc_9C6A

loc_97AA:				
					
		move.w	#0,(v_correct_cheat_entries_2).w

locret_97B0:				
		rts	
; ===========================================================================
byte_97B2:	dc.b $19,$65,  9,$17,  0; 0 
byte_97B7:	dc.b   1,  1,  2,  4,  0; 0 
byte_97BC:	dc.b   1,  9,  9,  2,  1,  1,  2,  4,  0; 0 
byte_97C5:	dc.b   4,  1,  2,  6,  0; 0 
byte_97CA:	dc.b $10,$1A,  0,$2D,$29,$1E,$36,$22,$2F,  0,$30,$22,$29,$22,$20,$31; 0
					
		dc.b   0,$1A		; 16
byte_97DC:	dc.b  $E,$30,$2C,$2B,$26,$20,  0,$1E,$2B,$21,  0,$2A,$26,$29,$22,$30; 0
					
byte_97EC:	dc.b  $E,$30,$2C,$2B,$26,$20,  0,$1E,$2B,$21,  0,$31,$1E,$26,$29,$30; 0
					
byte_97FC:	dc.b  $E,$30,$2C,$2B,$26,$20,  0,$1E,$29,$2C,$2B,$22,  0,  0,  0,  0; 0
					
					
byte_980C:	dc.b  $E,$2A,$26,$29,$22,$30,  0,$1E,$29,$2C,$2B,$22,  0,  0,  0,  0; 0
					
byte_981C:	dc.b  $E,$31,$1E,$26,$29,$30,  0,$1E,$29,$2C,$2B,$22,  0,  0,  0,  0; 0
					
byte_982C:	dc.b $10,$1A,  0,$33,$30,  0,$2A,$2C,$21,$22,  0,$26,$31,$22,$2A,$30; 0
					
		dc.b   0,$1A		; 16
byte_983E:	dc.b  $E,$1E,$29,$29,  0,$28,$26,$2B,$21,$30,  0,$26,$31,$22,$2A,$30; 0
					
byte_984E:	dc.b  $E,$31,$22,$29,$22,$2D,$2C,$2F,$31,  0,$2C,$2B,$29,$36,  0,  0; 0
					
byte_985E:	dc.b $10,$1A,  0,  0,$30,$2C,$32,$2B,$21,  0,$31,$22,$30,$31,  0,  0; 0
					
		dc.b   0,$1A		; 16
byte_9870:	dc.b  $E,  0,  0,  0,  0,  0,  0,$10,$10,  0,  0,  0,  0,  0,  0,  0; 0
	
					
		incfile	Pal_LevelSelectIcons	; byte_9880:  Pal_LevelIcons:
		incfile	Eni_LevelSelect2P	; byte_9A60: MapEng_LevSel2P:
		incfile	Eni_Options	; byte_9AB2: MapEng_Options:
		incfile	Eni_LevelSelect	; byte_9ADE: MapEng_LevSel:
		incfile	Eni_LevelSelectIcons	; byte_9C32: MapEng_LevSelIcon:

; ===========================================================================

	if ~RemoveJmpTos
loc_9C64:							
		jmp	(PlaySound).l
loc_9C6A:				
		jmp	(PlayMusic).l
loc_9C70:				
		jmp	(TilemapToVRAM).l
j_Dynamic_Normal:								
		jmp	Dynamic_Normal
		
		align 4
	endc

; ===========================================================================
; loc_9C7C:
EndingSequence:				
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_9C86:				
		move.l	d0,(a1)+
		dbf	d1,loc_9C86
		lea	($FFFFF700).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_9C96:				
		move.l	d0,(a1)+
		dbf	d1,loc_9C96
		lea	(v_camera_x_pos).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_9CA6:				
		move.l	d0,(a1)+
		dbf	d1,loc_9CA6
	disable_ints
		move.w	(v_vdp_mode_buffer).w,d0
		andi.b	#-$41,d0
		move.w	d0,(vdp_control_port).l
		move.w	#$100,(z80_bus_request).l

loc_9CC6:				
		btst	#0,(z80_bus_request).l
		bne.s	loc_9CC6
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BF06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_9CF2:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_9CF2
		move.w	#-$70FE,(a5)
		clr.l	(v_fg_y_pos_vsram).w
		clr.l	($FFFFF61A).w
		startZ80
		lea	(vdp_control_port).l,a6
		move.w	#-$74FD,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$7A84,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$7FFC,(a6)
		move.w	#-$78E0,(a6)
		move.w	#-$7521,(v_vdp_hint_counter).w
		move.w	(v_vdp_hint_counter).w,(a6)
		clr.b	(f_super).w
		cmpi.b	#7,(v_emeralds).w
		bne.s	loc_9D64
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_9D64
		st.b	(f_super).w
		move.b	#-1,(v_super_sonic_palette).w
		move.b	#$F,(v_palette_timer).w
		move.w	#$30,(v_palette_frame).w ; '0'

loc_9D64:				
					
		moveq	#0,d0
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_9D78
		tst.b	(f_super).w
		bne.s	loc_9D7A
		bra.w	loc_9D7C
; ===========================================================================

loc_9D78:				
		addq.w	#2,d0

loc_9D7A:				
		addq.w	#2,d0

loc_9D7C:				
		move.w	d0,($FFFFF750).w
		bsr.w	sub_ABE2
		bsr.w	sub_AC30
		move.l	#$6AC00000,(vdp_control_port).l
		lea	(Nem_EndingFinalTornado).l,a0
		bsr.w	j_NemDec
		move.l	#$65000001,(vdp_control_port).l
		lea	(Nem_EndingPics).l,a0
		bsr.w	j_NemDec
		move.l	#$52600002,(vdp_control_port).l
		lea	(Nem_EndingMiniTornado).l,a0
		bsr.w	j_NemDec
		move.l	#$60000002,(vdp_control_port).l
		lea	(Nem_Tornado).l,a0
		bsr.w	j_NemDec
		move.l	#$69E00002,(vdp_control_port).l
		lea	(Nem_Clouds).l,a0
		bsr.w	j_NemDec
		move.w	#$E00,(v_zone).w
		move	#$2300,sr
		moveq	#-$6B,d0
		bsr.w	sub_BF98
		move.l	#$EEE0EEE,d1
		lea	($FFFFFB00).w,a1
		moveq	#$1F,d0

loc_9E08:				
		move.l	d1,(a1)+
		dbf	d0,loc_9E08
		lea	(Pal_EndingSonic).l,a1
		lea	(v_pal_dry_next).w,a2
		moveq	#$1F,d0

loc_9E1A:				
		move.l	(a1)+,(a2)+
		dbf	d0,loc_9E1A
		clr.b	(f_screen_shake).w
		moveq	#0,d0
		move.w	d0,(v_debug_active).w
		move.w	d0,(f_restart).w
		move.w	d0,(v_frame_counter).w
		move.w	d0,(v_camera_x_pos).w
		move.w	d0,(v_camera_y_pos).w
		move.w	d0,(v_camera_x_pos_copy).w
		move.w	d0,(v_camera_y_pos_copy).w
		move.w	d0,(v_bg1_x_pos).w
		move.w	#$C8,(v_bg1_y_pos).w
		move.l	d0,(v_fg_y_pos_vsram).w
		move.b	d0,(v_bg1_x_redraw_flag).w
		move.b	d0,(v_bg1_y_redraw_flag).w
		move.w	d0,($FFFFF662).w
		move.w	d0,($FFFFF660).w
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$100,d1

loc_9E6A:				
		move.l	d0,(a1)+
		dbf	d1,loc_9E6A
		move.w	#$7FFF,(v_palcycle_time).w
		lea	($FFFFB100).w,a1
		move.b	#-$36,(a1)
		move.b	#6,$24(a1)
		move.w	#$60,$3C(a1) ; '`'
		move.w	#1,$30(a1)
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_9EA4
		move.w	#$10,$2E(a1)
		move.w	#$100,$3C(a1)

loc_9EA4:				
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		move.w	(v_vdp_mode_buffer).w,d0
		ori.b	#$40,d0	; '@'
		move.w	d0,(vdp_control_port).l

loc_9EBC:				
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		addq.w	#1,(v_frame_counter).w
		jsr	(RandomNumber).l
		jsr	ExecuteObjects
		jsr	BuildSprites
		tst.b	(f_ending_palcycle).w
		beq.s	loc_9EE6
		bsr.w	sub_BFB0

loc_9EE6:				
		bsr.w	sub_9EF4
		tst.w	(f_restart).w
		beq.w	loc_9EBC
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_9EF4:				
		tst.b	($FFFFF660).w
		beq.w	locret_A0BE
		bsr.w	PaletteFadeOut
		lea	(vdp_control_port).l,a6
		move.w	#-$7FFC,(a6)
		move.w	#-$7DD0,(a6)
		move.w	#-$7BF9,(a6)
		move.w	#-$6FFF,(a6)
		move.w	#-$6E00,(a6)
		move.w	#-$74FD,(a6)
		move.w	#-$7900,(a6)
		clr.b	(f_water_pal_full).w
		move.w	#-$737F,(a6)
		bsr.w	sub_BF92
		lea	(v_sprite_queue).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_9F38:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F38
		lea	($FFFFB000).w,a1
		moveq	#0,d0
		move.w	#$7FF,d1

loc_9F48:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F48
		lea	($FFFFF700).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_9F58:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F58
		lea	(v_camera_x_pos).w,a1
		moveq	#0,d0
		move.w	#$3F,d1	; '?'

loc_9F68:				
		move.l	d0,(a1)+
		dbf	d1,loc_9F68
		clr.b	(f_screen_shake).w
		moveq	#0,d0
		move.w	d0,(f_restart).w
		move.w	d0,(v_frame_counter).w
		move.w	d0,(v_camera_x_pos).w
		move.w	d0,(v_camera_y_pos).w
		move.w	d0,(v_camera_x_pos_copy).w
		move.w	d0,(v_camera_y_pos_copy).w
		move.w	d0,(v_bg1_x_pos).w
		move.w	d0,(v_bg1_y_pos).w
		move.l	d0,(v_fg_y_pos_vsram).w
		move.b	d0,(v_bg1_x_redraw_flag).w
		move.b	d0,(v_bg1_y_redraw_flag).w
		move.w	d0,($FFFFF662).w
		move.w	d0,($FFFFF660).w
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$100,d1

loc_9FB2:				
		move.l	d0,(a1)+
		dbf	d1,loc_9FB2
		moveq	#-$62,d0
		bsr.w	sub_BF74
		clr.w	(v_pal_dry_next).w
		move.w	#$EEE,($FFFFFB8C).w
		move.w	#$EE,($FFFFFBAC).w
		move.l	#$40200000,(vdp_control_port).l
		lea	(Nem_CreditsFont).l,a0
		bsr.w	j_NemDec
		clr.w	($FFFFFF4C).w

loc_9FE6:				
		bsr.w	sub_BF92
		bsr.w	sub_B262
		bsr.w	sub_23C6
		move.w	#$18E,d0
		btst	#6,(v_console_region).w
		beq.s	loc_A002
		move.w	#$144,d0

loc_A002:				
					
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		dbf	d0,loc_A002
		bsr.w	PaletteFadeOut
		lea	(off_B2CA).l,a1
		addq.w	#1,($FFFFFF4C).w
		move.w	($FFFFFF4C).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),d0
		bpl.s	loc_9FE6
		bsr.w	PaletteFadeOut
		bsr.w	sub_BF92
		move.l	#$40000000,(vdp_control_port).l
		lea	(Nem_EndingTitle).l,a0
		bsr.w	j_NemDec
		lea	(Eni_EndGameLogo).l,a0
		lea	(v_128x128_tiles).l,a1
		move.w	#0,d0
		bsr.w	j_EniDec
		lea	(v_128x128_tiles).l,a1
		move.l	#$45980003,d0
		moveq	#$F,d1
		moveq	#5,d2
		bsr.w	sub_BFA4
		clr.w	($FFFFFF4C).w
		bsr.w	sub_A0C0
		move.w	#$3B,d0	; ';'

loc_A07A:				
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		dbf	d0,loc_A07A
		move.w	#$257,d6

loc_A08C:				
					
		move.b	#$18,(v_vblank_routine).w
		bsr.w	WaitForVBlank
		addq.w	#1,($FFFFFF4C).w
		bsr.w	sub_A0C0
		cmpi.w	#$5E,($FFFFFF4C).w ; '^'
		bcs.s	loc_A08C
		move.b	(v_joypad_press_actual).w,d1
		andi.b	#-$10,d1
		bne.s	loc_A0B4
		dbf	d6,loc_A08C

loc_A0B4:				
		st.b	(f_restart).w
		move.b	#0,(v_gamemode).w

locret_A0BE:				
		rts	
; End of function sub_9EF4


; =============== S U B	R O U T	I N E =======================================


sub_A0C0:				
					
		lea	($FFFFFB02).w,a2
		move.w	($FFFFFF4C).w,d0
		cmpi.w	#$24,d0	; '$'
		bcc.s	locret_A0BE
		btst	#0,d0
		bne.s	locret_A0BE
		lsr.w	#1,d0
		move.b	byte_A0EC(pc,d0.w),d0
		mulu.w	#$18,d0
		lea	Pal_EndingLogoCyc(pc,d0.w),a1
		moveq	#5,d0

loc_A0E4:				
		move.l	(a1)+,(a2)+
		dbf	d0,loc_A0E4
		rts	
; End of function sub_A0C0

; ===========================================================================
byte_A0EC:	dc.b   0		; 0
		dc.b   1		; 1
		dc.b   2		; 2
		dc.b   3		; 3
		dc.b   4		; 4
		dc.b   3		; 5
		dc.b   2		; 6
		dc.b   1		; 7
		dc.b   0		; 8
		dc.b   5		; 9
		dc.b   6		; 10
		dc.b   7		; 11
		dc.b   8		; 12
		dc.b   7		; 13
		dc.b   6		; 14
		dc.b   5		; 15
		dc.b   0		; 16
		dc.b   0		; 17


		incfile	Pal_EndingLogoCyc ; pal_A0FE:
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Cut scene at end of game
; ----------------------------------------------------------------------------

Sprite_A1D6:				
		addq.w	#1,$32(a0)
		cmpi.w	#4,($FFFFF750).w
		beq.s	loc_A1FA
		cmpi.w	#2,($FFFFF750).w
		bne.s	loc_A1FA
		st.b	(f_super).w
		move.w	#$100,(v_rings).w
		move.b	#-1,(v_super_sonic_palette).w

loc_A1FA:				
					
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_A208(pc,d0.w),d1
		jmp	off_A208(pc,d1.w)
; ===========================================================================
off_A208:	dc.w loc_A218-off_A208	; 0 
					
		dc.w loc_A240-off_A208	; 1
		dc.w loc_A24E-off_A208	; 2
		dc.w loc_A240-off_A208	; 3
		dc.w loc_A256-off_A208	; 4
		dc.w loc_A30A-off_A208	; 5
		dc.w loc_A34C-off_A208	; 6
		dc.w loc_A38E-off_A208	; 7
; ===========================================================================

loc_A218:				
		moveq	#4,d0
		move.w	#$180,d1
		btst	#6,(v_console_region).w
		beq.s	sub_A22A
		move.w	#$100,d1

; =============== S U B	R O U T	I N E =======================================


sub_A22A:				
					
		lea	($FFFFB0C0).w,a1
		move.b	#-$37,(a1)
		move.b	d0,$28(a1)
		addq.b	#2,$24(a0)
		move.w	d1,$3C(a0)
		rts	
; End of function sub_A22A

; ===========================================================================

loc_A240:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_A248
		rts	
; ===========================================================================

loc_A248:				
		addq.b	#2,$24(a0)
		rts	
; ===========================================================================

loc_A24E:				
		moveq	#6,d0
		move.w	#$80,d1	
		bra.s	sub_A22A
; ===========================================================================

loc_A256:				
		move.w	$2E(a0),d0
		cmpi.w	#$10,d0
		bcc.s	loc_A2AC
		addq.w	#4,$2E(a0)
		clr.b	$24(a0)
		move.l	a0,-(sp)
		movea.l	off_A29C(pc,d0.w),a0
		lea	(v_128x128_tiles).l,a1
		move.w	#$328,d0
		bsr.w	j_EniDec
	disable_ints
		lea	(v_128x128_tiles).l,a1
		move.l	#$441C0003,d0
		moveq	#$B,d1
		moveq	#8,d2
		bsr.w	sub_BFA4
		move	#$2300,sr
		movea.l	(sp)+,a0
		rts	
; ===========================================================================
off_A29C:	dc.l Eni_Ending1
		dc.l Eni_Ending2
		dc.l Eni_Ending3
		dc.l Eni_Ending4
; ===========================================================================

loc_A2AC:				
		move.w	#2,($FFFFF662).w
		st.b	(f_lock_controls).w
		st.b	(f_ending_palcycle).w
		lea	($FFFFB000).w,a1
		move.w	($FFFFF750).w,d0
		move.w	off_A2DA(pc,d0.w),d0
		jsr	off_A2DA(pc,d0.w)
		move.w	#$80,d1	
		bsr.w	sub_A22A
		move.w	#$40,$3C(a0) ; '@'
		rts	
; ===========================================================================
off_A2DA:	dc.w loc_A2E0-off_A2DA	; 0 
					
		dc.w loc_A2EE-off_A2DA	; 1
		dc.w loc_A2F2-off_A2DA	; 2
; ===========================================================================

loc_A2E0:				
		moveq	#8,d0

loc_A2E2:				
		move.b	#1,(a1)
		move.b	#-$7F,$2A(a1)
		rts	
; ===========================================================================

loc_A2EE:				
		moveq	#$C,d0
		bra.s	loc_A2E2
; ===========================================================================

loc_A2F2:				
		moveq	#$E,d0
		move.b	#2,(a1)
		move.b	#-$7F,$2A(a1)
		move.b	#5,($FFFFB080).w
		move.w	a1,($FFFFB0BE).w
		rts	
; ===========================================================================

loc_A30A:				
		subq.w	#1,$3C(a0)
		bpl.s	loc_A320
		moveq	#$A,d0
		move.w	#$80,d1	
		bsr.w	sub_A22A
		move.w	#$C0,$3C(a0)

loc_A320:				
		lea	($FFFFB000).w,a1
		move.b	#$F,$1C(a1)
		move.w	#$A0,8(a1)
		move.w	#$50,$C(a1) ; 'P'
		cmpi.w	#2,($FFFFF750).w
		bne.s	locret_A34A
		move.b	#0,$1C(a1)
		move.w	#$1000,$14(a1)

locret_A34A:				
		rts	
; ===========================================================================

loc_A34C:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_A366
		moveq	#0,d4
		moveq	#0,d5
		move.w	#0,(v_camera_x_pos_diff).w
		move.w	#$100,(v_camera_y_pos_diff).w
		bra.w	loc_D382
; ===========================================================================

loc_A366:				
		addq.b	#2,$24(a0)
		move.w	#$100,$3C(a0)
		cmpi.w	#4,($FFFFF750).w
		bne.s	locret_A38C
		move.w	#$880,$3C(a0)
		btst	#6,(v_console_region).w
		beq.s	locret_A38C
		move.w	#$660,$3C(a0)

locret_A38C:				
					
		rts	
; ===========================================================================

loc_A38E:				
		btst	#6,(v_console_region).w
		beq.s	loc_A3A2
		cmpi.w	#$E40,$32(a0)
		beq.s	loc_A3BE
		bra.w	loc_A3AA
; ===========================================================================

loc_A3A2:				
		cmpi.w	#$1140,$32(a0)
		beq.s	loc_A3BE

loc_A3AA:				
		subq.w	#1,$3C(a0)
		bne.s	loc_A3BA
		lea	(dword_AD62).l,a2
		bsr.w	sub_BF9E

loc_A3BA:				
		bra.w	loc_AB9C
; ===========================================================================

loc_A3BE:				
					
		addq.b	#2,$24(a0)
		st.b	($FFFFF660).w
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_A3C8:				
		bsr.w	sub_BF7A
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	loc_A3DA(pc,d0.w),d1
		jmp	loc_A3DA(pc,d1.w)
; ===========================================================================

loc_A3DA:
		ori.b	#$7C,d4	; '|'
		lea	(off_3AFC8).l,a1
		bsr.w	sub_BFB6
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_A3FC
		move.b	#4,$1A(a0)
		move.b	#1,$1C(a0)

loc_A3FC:				
		move.w	#-$10,8(a0)
		move.w	#$C0,$C(a0)
		move.w	#$100,$10(a0)
		move.w	#-$80,$12(a0)
		move.b	#$14,$35(a0)
		move.b	#3,$18(a0)
		move.w	#4,($FFFFF662).w
		move.l	a0,-(sp)
		lea	(Eni_EndingTailsPlane).l,a0
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_A43C
		lea	(Eni_EndingSonicPlane).l,a0

loc_A43C:				
		lea	(v_128x128_tiles).l,a1
		move.w	#-$7EAA,d0
		bsr.w	j_EniDec
		movea.l	(sp)+,a0
		move.w	#$C00,(v_pal_dry_line3).w
		bra.w	loc_BF68
; ===========================================================================
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_A468(pc,d0.w),d1
		jsr	off_A468(pc,d1.w)
		bra.w	loc_BF68
; ===========================================================================
off_A468:	dc.w loc_A474-off_A468	; 0 
					
		dc.w loc_A4B6-off_A468	; 1
		dc.w loc_A5A6-off_A468	; 2
		dc.w loc_A6C6-off_A468	; 3
		dc.w loc_A7DE-off_A468	; 4
		dc.w loc_A83E-off_A468	; 5
; ===========================================================================

loc_A474:				
		cmpi.w	#$A0,8(a0)
		beq.s	loc_A48A
		bsr.w	sub_BFAA

loc_A480:				
					
		lea	(off_3AFDC).l,a1
		bra.w	sub_BF80
; ===========================================================================

loc_A48A:				
		addq.b	#2,$25(a0)
		move.w	#$480,$3C(a0)
		btst	#6,(v_console_region).w
		beq.s	loc_A4A2
		move.w	#$3D0,$3C(a0)

loc_A4A2:				
		move.w	#$40,$32(a0) ; '@'
		st.b	($FFFFB134).w
		clr.w	$10(a0)
		clr.w	$12(a0)
		bra.s	loc_A480
; ===========================================================================

loc_A4B6:				
		bsr.w	sub_ABBA
		bsr.w	sub_A524
		subq.w	#1,$3C(a0)
		bmi.s	loc_A4C6
		bra.s	loc_A480
; ===========================================================================

loc_A4C6:				
		addq.b	#2,$25(a0)
		move.w	#2,$3C(a0)
		clr.w	$32(a0)
		clr.b	$1A(a0)
		cmpi.w	#2,($FFFFF750).w
		beq.s	loc_A4F4
		move.b	#7,$1A(a0)
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_A4F4
		move.b	#$18,$1A(a0)

loc_A4F4:				
					
		clr.b	$1C(a0)
		clr.b	$1B(a0)
		clr.b	$1E(a0)
		move.l	#Map_ADA2,4(a0)
		move.w	#0,2(a0)
		jsr	Adjust2PArtPointer
		subi.w	#$14,8(a0)
		addi.w	#$14,$C(a0)
		bra.w	sub_A58C

; =============== S U B	R O U T	I N E =======================================


sub_A524:				
		lea	($FFFFB000).w,a1
		move.w	($FFFFF750).w,d0
		move.w	off_A534(pc,d0.w),d0
		jmp	off_A534(pc,d0.w)
; End of function sub_A524

; ===========================================================================
off_A534:	dc.w loc_A53A-off_A534	; 0 
					
		dc.w loc_A55C-off_A534	; 1
		dc.w loc_A582-off_A534	; 2
; ===========================================================================

loc_A53A:				
		move.w	$C(a0),d0
		subi.w	#$1C,d0

loc_A542:				
		move.w	d0,$C(a1)
		move.w	8(a0),8(a1)
		move.l	#$1000505,$1A(a1)
		move.w	#$100,$1E(a1)
		rts	
; ===========================================================================

loc_A55C:				
		tst.w	$32(a0)
		beq.s	loc_A574
		subq.w	#1,$32(a0)
		addi.l	#$8000,8(a1)
		addq.w	#1,$C(a1)
		rts	
; ===========================================================================

loc_A574:				
		move.w	#$C0,8(a1)
		move.w	#$90,$C(a1)
		rts	
; ===========================================================================

loc_A582:				
		move.w	$C(a0),d0
		subi.w	#$18,d0
		bra.s	loc_A542

; =============== S U B	R O U T	I N E =======================================


sub_A58C:				
					
		tst.b	(f_super).w
		bne.w	locret_A38C

loc_A594:				
					
		lea	($FFFFB000).w,a1
		move.w	#$200,8(a1)
		move.w	#0,$C(a1)
		rts	
; End of function sub_A58C

; ===========================================================================

loc_A5A6:				
		bsr.s	sub_A58C
		subq.w	#1,$3C(a0)
		bpl.s	locret_A5E6
		move.w	#2,$3C(a0)
		move.w	$32(a0),d0
		cmpi.w	#$1C,d0
		bcc.s	loc_A5E8
		addq.w	#1,$32(a0)
		move.w	($FFFFF750).w,d1
		move.w	off_A5FC(pc,d1.w),d1
		lea	off_A5FC(pc,d1.w),a1
		move.b	(a1,d0.w),$1A(a0)
		add.w	d0,d0
		add.w	d0,d0
		move.l	word_A656(pc,d0.w),d1
		move.w	d1,$C(a0)
		swap	d1
		move.w	d1,8(a0)

locret_A5E6:				
		rts	
; ===========================================================================

loc_A5E8:				
		addq.b	#2,$25(a0)
		move.w	#$60,$3C(a0) ; '`'
		clr.b	$31(a0)
		clr.w	$32(a0)
		rts	
; ===========================================================================
off_A5FC:	dc.w byte_A602-off_A5FC	; 0 
					
		dc.w byte_A61E-off_A5FC	; 1
		dc.w byte_A63A-off_A5FC	; 2
byte_A602:	dc.b   7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9, $A, $A; 0
					
		dc.b  $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B; 16
byte_A61E:	dc.b   0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3; 0
					
		dc.b   3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4; 16
byte_A63A:	dc.b $18,$18,$18,$18,$19,$19,$19,$19,$19,$19,$19,  9,  9,  9, $A, $A; 0
					
		dc.b  $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B; 16
word_A656:	dc.w   $A0,  $70,  $B0,	 $70,  $B6,  $71,  $BC,	 $72; 0
		dc.w   $C4,  $74,  $C8,	 $75,  $CA,  $76,  $CC,	 $77; 8
		dc.w   $CE,  $78,  $D0,	 $79,  $D2,  $7A,  $D4,	 $7B; 16
		dc.w   $D6,  $7C,  $D9,	 $7E,  $DC,  $81,  $DE,	 $84; 24
		dc.w   $E1,  $87,  $E4,	 $8B,  $E7,  $8F,  $EC,	 $94; 32
		dc.w   $F0,  $99,  $F5,	 $9D,  $F9,  $A4, $100,	 $AC; 40
		dc.w  $108,  $B8, $112,	 $C4, $11F,  $D3, $12C,	 $FA; 48
; ===========================================================================

loc_A6C6:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_A720
		tst.b	(f_super).w
		beq.s	locret_A70A
		subq.b	#1,$31(a0)
		bpl.s	locret_A70A
		addq.b	#3,$31(a0)
		move.w	$32(a0),d0
		addq.w	#4,$32(a0)
		cmpi.w	#$78,d0	; 'x'
		bcc.s	locret_A70A
		cmpi.w	#$C,d0
		bcs.s	loc_A70C
		bsr.w	loc_A594
		move.l	word_A766(pc,d0.w),d1
		move.w	d1,$C(a0)
		swap	d1
		move.w	d1,8(a0)
		lsr.w	#2,d0
		move.b	byte_A748(pc,d0.w),$1A(a0)

locret_A70A:				
					
		rts	
; ===========================================================================

loc_A70C:				
		move.l	word_A766(pc,d0.w),d0
		lea	($FFFFB000).w,a1
		move.w	d0,$C(a1)
		swap	d0
		move.w	d0,8(a1)
		rts	
; ===========================================================================

loc_A720:				
		addq.b	#2,$25(a0)
		clr.w	$3C(a0)
		clr.w	$32(a0)
		lea	(dword_AD6E).l,a2
		bsr.w	sub_BF9E
		tst.b	(f_super).w
		bne.w	locret_A38C
		lea	(dword_AD6A).l,a2
		bra.w	sub_BF9E
; ===========================================================================
byte_A748:	dc.b $12,$12,$12,$12,$12,$12,$12,$13,$13,$13,$13,$13,$13,$14,$14,$14; 0
		dc.b $14,$15,$15,$15,$16,$16,$16,$16,$16,$16,$16,$16,$16,  0; 16
word_A766:	dc.w   $C0		; 0
		dc.w   $90		; 1
		dc.w   $B0		; 2
		dc.w   $91		; 3
		dc.w   $A8		; 4
		dc.w   $92		; 5
		dc.w   $9B		; 6
		dc.w   $96		; 7
		dc.w   $99		; 8
		dc.w   $98		; 9
		dc.w   $98		; 10
		dc.w   $99		; 11
		dc.w   $99		; 12
		dc.w   $9A		; 13
		dc.w   $9B		; 14
		dc.w   $9C		; 15
		dc.w   $9F		; 16
		dc.w   $9E		; 17
		dc.w   $A4		; 18
		dc.w   $A0		; 19
		dc.w   $AC		; 20
		dc.w   $A2		; 21
		dc.w   $B7		; 22
		dc.w   $A5		; 23
		dc.w   $C4		; 24
		dc.w   $A8		; 25
		dc.w   $D3		; 26
		dc.w   $AB		; 27
		dc.w   $DE		; 28
		dc.w   $AE		; 29
		dc.w   $E8		; 30
		dc.w   $B0		; 31
		dc.w   $EF		; 32
		dc.w   $B2		; 33
		dc.w   $F4		; 34
		dc.w   $B5		; 35
		dc.w   $F9		; 36
		dc.w   $B8		; 37
		dc.w   $FC		; 38
		dc.w   $BB		; 39
		dc.w   $FE		; 40
		dc.w   $BE		; 41
		dc.w   $FF		; 42
		dc.w   $C0		; 43
		dc.w  $100		; 44
		dc.w   $C2		; 45
		dc.w  $101		; 46
		dc.w   $C5		; 47
		dc.w  $102		; 48
		dc.w   $C8		; 49
		dc.w  $102		; 50
		dc.w   $CC		; 51
		dc.w  $101		; 52
		dc.w   $D1		; 53
		dc.w   $FD		; 54
		dc.w   $D7		; 55
		dc.w   $F9		; 56
		dc.w   $DE		; 57
		dc.w   $F9		; 58
		dc.w  $118		; 59
; ===========================================================================

loc_A7DE:				
		bsr.w	loc_A594
		subq.w	#1,$3C(a0)
		bpl.s	locret_A80C
		move.w	#2,$3C(a0)
		move.w	$32(a0),d0
		cmpi.w	#$1C,d0
		bcc.s	loc_A80E
		addq.w	#4,$32(a0)
		lea	word_A822(pc,d0.w),a1
		move.w	(a1)+,d0
		add.w	d0,(v_hscroll_buffer).w
		move.w	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w

locret_A80C:				
		rts	
; ===========================================================================

loc_A80E:				
		addq.b	#2,$25(a0)
		bset	#3,$22(a0)
		clr.b	$31(a0)
		clr.w	$32(a0)
		rts	
; ===========================================================================
word_A822:	dc.w $FFC6		; 0
		dc.w   $88		; 1
		dc.w $FFF4		; 2
		dc.w   $22		; 3
		dc.w $FFF8		; 4
		dc.w   $10		; 5
		dc.w $FFFC		; 6
		dc.w	 8		; 7
		dc.w $FFFE		; 8
		dc.w	 4		; 9
		dc.w $FFFF		; 10
		dc.w	 2		; 11
		dc.w $FFFF		; 12
		dc.w	 2		; 13
; ===========================================================================

loc_A83E:				
		tst.b	(f_super).w
		beq.w	locret_A38C
		move.b	#$17,$1A(a0)
		subq.b	#1,$31(a0)
		bpl.s	locret_A872
		addq.b	#3,$31(a0)
		move.w	$32(a0),d0
		cmpi.w	#$20,d0	; ' '
		bcc.s	locret_A872
		addq.w	#4,$32(a0)
		move.l	word_A874(pc,d0.w),d1
		move.w	d1,$C(a0)
		swap	d1
		move.w	d1,8(a0)

locret_A872:				
					
		rts	
; ===========================================================================
word_A874:	dc.w   $60		; 0
		dc.w   $88		; 1
		dc.w   $50		; 2
		dc.w   $68		; 3
		dc.w   $44		; 4
		dc.w   $46		; 5
		dc.w   $3C		; 6
		dc.w   $36		; 7
		dc.w   $36		; 8
		dc.w   $2A		; 9
		dc.w   $33		; 10
		dc.w   $24		; 11
		dc.w   $31		; 12
		dc.w   $20		; 13
		dc.w   $30		; 14
		dc.w   $1E		; 15
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_A894:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_A8A2(pc,d0.w),d1
		jmp	off_A8A2(pc,d1.w)
; ===========================================================================
off_A8A2:	dc.w loc_A8AA-off_A8A2	; 0 
					
		dc.w loc_A902-off_A8A2	; 1
		dc.w loc_A936-off_A8A2	; 2
		dc.w loc_A926-off_A8A2	; 3
; ===========================================================================

loc_A8AA:				
		lea	(off_3B322).l,a1
		bsr.w	sub_BFB6
		move.l	#Map_ADA2,4(a0)
		move.w	#-$8000,2(a0)
		move.b	#1,$18(a0)
		jsr	Adjust2PArtPointer
		move.b	#$C,$1A(a0)
		cmpi.w	#4,($FFFFF750).w
		bne.s	loc_A8E8
		move.b	#$F,$1A(a0)
		move.w	#-$6000,2(a0)

loc_A8E8:				
		move.w	#$E8,d0	
		move.w	d0,8(a0)
		move.w	d0,$30(a0)
		move.w	#$118,d0
		move.w	d0,$C(a0)
		move.w	d0,$32(a0)
		rts	
; ===========================================================================

loc_A902:				
		movea.w	$2C(a0),a1
		btst	#3,$22(a1)
		bne.s	loc_A92A

loc_A90E:				
		move.w	$30(a0),d0
		add.w	(v_hscroll_buffer).w,d0
		move.w	d0,8(a0)
		move.w	$32(a0),d0
		sub.w	(v_fg_y_pos_vsram).w,d0
		move.w	d0,$C(a0)

loc_A926:				
		bra.w	loc_BF68
; ===========================================================================

loc_A92A:				
		addq.b	#2,$24(a0)
		clr.w	$3C(a0)
		bra.w	loc_BF68
; ===========================================================================

loc_A936:				
		subq.w	#1,$3C(a0)
		bpl.s	loc_A974
		move.w	#4,$3C(a0)
		move.w	$34(a0),d0
		cmpi.w	#4,d0
		bcc.s	loc_A978
		addq.w	#2,$34(a0)
		lea	byte_A980(pc,d0.w),a1
		cmpi.w	#2,($FFFFF750).w
		bne.s	loc_A960
		lea	byte_A984(pc,d0.w),a1

loc_A960:				
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,8(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d0,$C(a0)
		addq.b	#1,$1A(a0)

loc_A974:				
		bra.w	loc_BF68
; ===========================================================================

loc_A978:				
		addq.b	#2,$24(a0)
		bra.w	loc_BF68
; ===========================================================================
byte_A980:	dc.b $F8		; 0
		dc.b   0		; 1
		dc.b $BC		; 2
		dc.b $C8		; 3
byte_A984:	dc.b $F8		; 0
		dc.b   0		; 1
		dc.b $B0		; 2
		dc.b $C0		; 3
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_A988:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_A996(pc,d0.w),d1
		jmp	off_A996(pc,d1.w)
; ===========================================================================
off_A996:	dc.w loc_A99A-off_A996	; 0 
					
		dc.w loc_A9E4-off_A996	; 1
; ===========================================================================

loc_A99A:				
		lea	(off_3B322).l,a1
		bsr.w	sub_BFB6
		move.l	#Map_ADA2,4(a0)
		move.w	#-$8000,2(a0)
		move.b	#3,$18(a0)
		jsr	Adjust2PArtPointer
		move.b	#5,$1A(a0)
		move.b	#2,$1C(a0)
		move.w	#$10F,d0
		move.w	d0,8(a0)
		move.w	d0,$30(a0)
		move.w	#$15E,d0
		move.w	d0,$C(a0)
		move.w	d0,$32(a0)
		rts	
; ===========================================================================

loc_A9E4:				
		lea	(off_AD82).l,a1
		bsr.w	sub_BF80
		bra.w	loc_A90E
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_A9F2:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_AA00(pc,d0.w),d1
		jmp	off_AA00(pc,d1.w)
; ===========================================================================
off_AA00:	dc.w loc_AA06-off_AA00	; 0 
					
		dc.w loc_AA76-off_AA00	; 1
		dc.w loc_AA8A-off_AA00	; 2
; ===========================================================================

loc_AA06:				
		lea	(off_3B322).l,a1
		bsr.w	sub_BFB6
		move.w	2(a0),d0
		andi.w	#$1FFF,d0
		ori.w	#$6000,d0
		move.w	d0,2(a0)
		move.b	#$30,$19(a0) ; '0'
		move.l	(v_random).w,d0
		ror.l	#1,d0
		move.l	d0,(v_random).w
		move.w	d0,d1
		andi.w	#3,d0
		move.b	byte_AA6A(pc,d0.w),$1A(a0)
		add.w	d0,d0
		move.w	word_AA6E(pc,d0.w),$12(a0)
		tst.b	($FFFFB134).w
		beq.s	loc_AA5A
		andi.w	#$FF,d1
		move.w	d1,$C(a0)
		move.w	#$150,8(a0)
		rts	
; ===========================================================================

loc_AA5A:				
		andi.w	#$1FF,d1
		move.w	d1,8(a0)
		move.w	#$100,$C(a0)
		rts	
; ===========================================================================
byte_AA6A:	dc.b   0		; 0
		dc.b   1		; 1
		dc.b   2		; 2
		dc.b   0		; 3
word_AA6E:	dc.w $FD00		; 0
		dc.w $FE00		; 1
		dc.w $FF00		; 2
		dc.w $FD00		; 3
; ===========================================================================

loc_AA76:				
		tst.b	($FFFFB134).w
		beq.s	loc_AA8A
		addq.b	#2,$24(a0)
		move.w	$12(a0),$10(a0)
		clr.w	$12(a0)

loc_AA8A:				
					
		bsr.w	sub_BFAA
		tst.b	($FFFFB134).w
		beq.s	loc_AAA2
		cmpi.w	#-$20,8(a0)
		blt.w	loc_BF6E
		bra.w	loc_BF68
; ===========================================================================

loc_AAA2:				
		tst.w	$C(a0)
		bmi.w	loc_BF6E
		bra.w	loc_BF68
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_AAAE:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_AABC(pc,d0.w),d1
		jmp	off_AABC(pc,d1.w)
; ===========================================================================
off_AABC:	dc.w loc_AAC0-off_AABC	; 0 
					
		dc.w loc_AB0E-off_AABC	; 1
; ===========================================================================

loc_AAC0:				
		lea	(off_AD72).l,a1
		bsr.w	sub_BFB6
		move.l	(v_random).w,d0
		ror.l	#3,d0
		move.l	d0,(v_random).w
		move.l	d0,d1
		andi.w	#$7F,d0	; ''
		move.w	#-$A0,d2
		add.w	d0,d2
		move.w	d2,8(a0)
		ror.l	#3,d1
		andi.w	#$FF,d1
		moveq	#8,d2
		add.w	d1,d2
		move.w	d2,$C(a0)
		move.w	#$100,$10(a0)
		moveq	#$20,d0	; ' '
		cmpi.w	#$20,d1	; ' '
		bcs.s	loc_AB02
		neg.w	d0

loc_AB02:				
		move.w	d0,$12(a0)
		move.w	#$C0,$3C(a0)
		rts	
; ===========================================================================

loc_AB0E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_AB2E(pc,d0.w),d1
		jsr	off_AB2E(pc,d1.w)
		bsr.w	sub_BFAA
		lea	(byte_AD7C).l,a1
		bsr.w	sub_BF80
		bra.w	loc_BF68
; ===========================================================================
off_AB2E:	dc.w loc_AB34-off_AB2E	; 0 
					
		dc.w loc_AB5C-off_AB2E	; 1
		dc.w loc_AB8E-off_AB2E	; 2
; ===========================================================================

loc_AB34:				
		subq.w	#1,$3C(a0)
		bpl.s	locret_AB5A
		addq.b	#2,$25(a0)
		move.w	$12(a0),$2E(a0)
		clr.w	$10(a0)
		move.w	$C(a0),$32(a0)
		move.w	#$80,$12(a0)
		move.w	#$180,$3C(a0)

locret_AB5A:				
		rts	
; ===========================================================================

loc_AB5C:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_AB76
		move.w	$C(a0),d0
		moveq	#-4,d1
		cmp.w	$32(a0),d0
		bcc.s	loc_AB70
		neg.w	d1

loc_AB70:				
		add.w	d1,$12(a0)
		rts	
; ===========================================================================

loc_AB76:				
		addq.b	#2,$25(a0)
		move.w	#-$100,$10(a0)
		move.w	$2E(a0),$12(a0)
		move.w	#$C0,$3C(a0)
		rts	
; ===========================================================================

loc_AB8E:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_AB96
		rts	
; ===========================================================================

loc_AB96:				
		addq.w	#4,sp
		bra.w	loc_BF6E
; ===========================================================================

loc_AB9C:				
		subq.w	#1,$30(a0)
		bpl.s	locret_ABB8
		move.l	(v_random).w,d0
		andi.w	#$1F,d0
		move.w	d0,$30(a0)
		lea	(dword_AD5E).l,a2
		bsr.w	sub_BF9E

locret_ABB8:				
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_ABBA:				
		subq.w	#1,$30(a0)
		bpl.s	locret_ABE0
		tst.b	$35(a0)
		beq.s	locret_ABE0
		subq.b	#1,$35(a0)
		move.l	(v_random).w,d0
		andi.w	#$F,d0
		move.w	d0,$30(a0)
		lea	(dword_AD66).l,a2
		bsr.w	sub_BF9E

locret_ABE0:				
		rts	
; End of function sub_ABBA


; =============== S U B	R O U T	I N E =======================================


sub_ABE2:				
		move.w	($FFFFF750).w,d0
		move.w	off_ABEE(pc,d0.w),d0
		jmp	off_ABEE(pc,d0.w)
; End of function sub_ABE2

; ===========================================================================
off_ABEE:	dc.w loc_ABF4-off_ABEE	; 0 
					
		dc.w loc_AC08-off_ABEE	; 1
		dc.w loc_AC1C-off_ABEE	; 2
; ===========================================================================

loc_ABF4:				
		move.l	#$43200000,(vdp_control_port).l
		lea	(Nem_EndingSonic).l,a0
		bra.w	j_NemDec
; ===========================================================================

loc_AC08:				
		move.l	#$43200000,(vdp_control_port).l
		lea	(Nem_EndingSuperSonic).l,a0
		bra.w	j_NemDec
; ===========================================================================

loc_AC1C:				
		move.l	#$43200000,(vdp_control_port).l
		lea	(Nem_EndingTails).l,a0
		bra.w	j_NemDec

; =============== S U B	R O U T	I N E =======================================


sub_AC30:				
		move.w	($FFFFF750).w,d0
		move.w	off_AC3C(pc,d0.w),d0
		jmp	off_AC3C(pc,d0.w)
; End of function sub_AC30

; ===========================================================================
off_AC3C:	dc.w loc_AC42-off_AC3C	; 0 
					
		dc.w loc_AC56-off_AC3C	; 1
		dc.w loc_AC6A-off_AC3C	; 2
; ===========================================================================

loc_AC42:				
		move.l	#$72800002,(vdp_control_port).l
		lea	(Nem_Flicky).l,a0
		bra.w	j_NemDec
; ===========================================================================

loc_AC56:				
		move.l	#$72800002,(vdp_control_port).l
		lea	(Nem_Eagle).l,a0
		bra.w	j_NemDec
; ===========================================================================

loc_AC6A:				
		move.l	#$72800002,(vdp_control_port).l
		lea	(Nem_Chicken).l,a0
		bra.w	j_NemDec
; ===========================================================================

		incfile	Pal_EndingSonic	; Pal_AC7E:
		incfile	Pal_EndingSonicFar	; Pal_AC9E:	
		incfile	Pal_EndingBG	; Pal_ACDE:
		incfile	Pal_EndingStills	; Pal_AD1E:
		incfile	Pal_EndingSuperSonic	; Pal_AD3E
					
dword_AD5E:	dc.l $3ECB00		
dword_AD62:	dc.l $3ECC00		
dword_AD66:	dc.l $3ECD00		
dword_AD6A:	dc.l $3ECE00		
dword_AD6E:	dc.l $3ECF00		
off_AD72:	dc.l Map_11E1C	; 0 
		dc.w $594
		dc.w $402
		dc.w $800
byte_AD7C:	dc.b   0		; 0 
		dc.b   2		; 1
		dc.b   5		; 2
		dc.b   0		; 3
		dc.b   1		; 4
		dc.b $FF		; 5
off_AD82:	dc.w byte_AD88-off_AD82	; 0 
					
		dc.w byte_AD8E-off_AD82	; 1
		dc.w byte_AD9E-off_AD82	; 2
byte_AD88:	dc.b   3,  0,  0,  1,$FA,  0; 0	
byte_AD8E:	dc.b   3,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  4,$FA,  0; 0
					
byte_AD9E:	dc.b   1,  5,  6,$FF	; 0 
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_ADA2:	;include "mappings/sprite/objCF.asm"

		dc.w word_ADD6-Map_ADA2; 0 ;
					
		dc.w word_AE10-Map_ADA2; 1
		dc.w word_AE32-Map_ADA2; 2
		dc.w word_AE44-Map_ADA2; 3
		dc.w word_AE56-Map_ADA2; 4
		dc.w word_AE70-Map_ADA2; 5
		dc.w word_AEA2-Map_ADA2; 6
		dc.w word_AED4-Map_ADA2; 7
		dc.w word_AF16-Map_ADA2; 8
		dc.w word_AF40-Map_ADA2; 9
		dc.w word_AF62-Map_ADA2; 10
		dc.w word_AF84-Map_ADA2; 11
		dc.w word_AFA6-Map_ADA2; 12
		dc.w word_AFC0-Map_ADA2; 13
		dc.w word_AFE2-Map_ADA2; 14
		dc.w word_B044-Map_ADA2; 15
		dc.w word_B066-Map_ADA2; 16
		dc.w word_B080-Map_ADA2; 17
		dc.w word_B11A-Map_ADA2; 18
		dc.w word_B12C-Map_ADA2; 19
		dc.w word_B136-Map_ADA2; 20
		dc.w word_B140-Map_ADA2; 21
		dc.w word_B14A-Map_ADA2; 22
		dc.w word_B154-Map_ADA2; 23
		dc.w word_B1CE-Map_ADA2; 24
		dc.w word_B210-Map_ADA2; 25
word_ADD6:	dc.w 7			
		dc.w $F004, $493, $249,$FFE0; 0
		dc.w $F809, $495, $24A,$FFE0; 4
		dc.w $F005, $49B, $24D,$FFF8; 8
		dc.w	 4, $49F, $24F,$FFF8; 12
		dc.w $F004, $4A1, $250,	   8; 16
		dc.w $F809, $4A3, $251,	   8; 20
		dc.w  $800, $4A9, $254,	   8; 24
word_AE10:	dc.w 4			
		dc.w $F405, $4AA, $255,$FFE8; 0
		dc.w $F405, $4AE, $257,$FFF8; 4
		dc.w  $404, $4B2, $259,$FFF8; 8
		dc.w $F406, $4B4, $25A,	   8; 12
word_AE32:	dc.w 2			
		dc.w $F40E, $4BA, $25D,$FFEC; 0
		dc.w $F402, $4C6, $263,	  $C; 4
word_AE44:	dc.w 2			
		dc.w $F40E, $4C9, $264,$FFEC; 0
		dc.w $F400, $4D5, $26A,	  $C; 4
word_AE56:	dc.w 3			
		dc.w $FC05, $4D6, $26B,$FFEC; 0
		dc.w $F409, $4DA, $26D,$FFFC; 4
		dc.w  $404, $4E0, $270,$FFFC; 8
word_AE70:	dc.w 6			
		dc.w $F800, $4E2, $271,$FFF0; 0
		dc.w	 4, $4E3, $271,$FFF0; 4
		dc.w  $808, $4E5, $272,$FFF0; 8
		dc.w $F008, $4E8, $274,$FFF8; 12
		dc.w $F804, $4EB, $275,	   0; 16
		dc.w	 0, $4ED, $276,	   8; 20
word_AEA2:	dc.w 6			
		dc.w	 0,$1CE2,$1A71,	   8; 0
		dc.w $F804,$1CE3,$1A71,	   0; 4
		dc.w $F008,$1CE5,$1A72,$FFF8; 8
		dc.w  $808,$1CE8,$1A74,$FFF0; 12
		dc.w	 4,$1CEB,$1A75,$FFF0; 16
		dc.w $F800,$1CED,$1A76,$FFF0; 20
word_AED4:	dc.w 8			
		dc.w $E006,$2019,$200C,	   6; 0
		dc.w $F004, $493, $249,$FFE0; 4
		dc.w $F809, $495, $24A,$FFE0; 8
		dc.w $F005, $49B, $24D,$FFF8; 12
		dc.w	 4, $49F, $24F,$FFF8; 16
		dc.w $F004, $4A1, $250,	   8; 20
		dc.w $F809, $4A3, $251,	   8; 24
		dc.w  $800, $4A9, $254,	   8; 28
word_AF16:	dc.w 5			
		dc.w $E701,$201F,$200F,	   4; 0
		dc.w $F405, $4AA, $255,$FFE8; 4
		dc.w $F405, $4AE, $257,$FFF8; 8
		dc.w  $404, $4B2, $259,$FFF8; 12
		dc.w $F406, $4B4, $25A,	   8; 16
word_AF40:	dc.w 4			
		dc.w $ED01,$2021,$2010,$FFFB; 0
		dc.w $F500,$2023,$2011,	   5; 4
		dc.w $F40E, $4BA, $25D,$FFEC; 8
		dc.w $F402, $4C6, $263,	  $C; 12
word_AF62:	dc.w 4			
		dc.w $ED01,$2024,$2012,$FFF8; 0
		dc.w $F500,$2026,$2013,	   0; 4
		dc.w $F40E, $4C9, $264,$FFEC; 8
		dc.w $F400, $4D5, $26A,	  $C; 12
word_AF84:	dc.w 4			
		dc.w $F105,$2027,$2013,$FFF7; 0
		dc.w $FC05, $4D6, $26B,$FFEC; 4
		dc.w $F409, $4DA, $26D,$FFFC; 8
		dc.w  $404, $4E0, $270,$FFFC; 12
word_AFA6:	dc.w 3			
		dc.w	$B,  $2B,  $15,	   0; 0
		dc.w  $802,  $37,  $1B,	 $18; 4
		dc.w $2004,  $3A,  $1D,	   8; 8
word_AFC0:	dc.w 4			
		dc.w	 8,  $3C,  $1E,	   0; 0
		dc.w  $80E,  $3F,  $1F,	   0; 4
		dc.w $2008,  $4B,  $25,	   8; 8
		dc.w $2804,  $4E,  $27,	 $10; 12
word_AFE2:	dc.w $C			
		dc.w	 8,  $50,  $28,	   8; 0
		dc.w  $80F,  $53,  $29,	   0; 4
		dc.w  $80B,  $63,  $31,	 $20; 8
		dc.w $1006,  $6F,  $37,	 $38; 12
		dc.w $2804,  $75,  $3A,	   0; 16
		dc.w $2806,  $77,  $3B,	 $10; 20
		dc.w $280F,  $7D,  $3E,	 $20; 24
		dc.w $2800,  $8D,  $46,	 $40; 28
		dc.w $3006,  $8E,  $47,	 $40; 32
		dc.w $480C,  $94,  $4A,	 $28; 36
		dc.w $5009,  $98,  $4C,	 $38; 40
		dc.w $6004,  $9E,  $4F,	 $40; 44
word_B044:	dc.w 4			
		dc.w	 4,  $2B,  $15,	   8; 0
		dc.w  $801,  $2D,  $16,	   0; 4
		dc.w  $80A,  $2F,  $17,	   8; 8
		dc.w $2004,  $38,  $1C,	   8; 12
word_B066:	dc.w 3			
		dc.w  $808,  $3A,  $1D,	   8; 0
		dc.w $100E,  $3D,  $1E,	   0; 4
		dc.w $2808,  $49,  $24,	   8; 8
word_B080:	dc.w $13		
		dc.w	 8,  $4C,  $26,	 $30; 0
		dc.w  $80F,  $4F,  $27,	 $28; 4
		dc.w $1808,  $5F,  $2F,	 $48; 8
		dc.w $200F,  $62,  $31,	 $48; 12
		dc.w $1803,  $72,  $39,	 $68; 16
		dc.w $3803,  $76,  $3B,	 $68; 20
		dc.w $400F,  $7A,  $3D,	 $48; 24
		dc.w $1000,  $8A,  $45,	   0; 28
		dc.w $2000,  $8B,  $45,	   0; 32
		dc.w $100E,  $8C,  $46,	   8; 36
		dc.w $2800,  $98,  $4C,	   8; 40
		dc.w $3802,  $99,  $4C,	   0; 44
		dc.w $280F,  $9C,  $4E,	 $28; 48
		dc.w $2805,  $AC,  $56,	 $18; 52
		dc.w $3809,  $B0,  $58,	 $10; 56
		dc.w $4002,  $B6,  $5B,	   8; 60
		dc.w $480A,  $B9,  $5C,	 $10; 64
		dc.w $4805,  $C2,  $61,	 $28; 68
		dc.w $4807,  $C6,  $63,	 $38; 72
word_B11A:	dc.w 2			
		dc.w $F804,  $19,   $C,$FFFC; 0
		dc.w	 8,  $1B,   $D,$FFF4; 4
word_B12C:	dc.w 1			
		dc.w $F805,  $1E,   $F,$FFF8; 0
word_B136:	dc.w 1			
		dc.w $F805,  $22,  $11,$FFF8; 0
word_B140:	dc.w 1			
		dc.w $F805,  $26,  $13,$FFF8; 0
word_B14A:	dc.w 1			
		dc.w $F805,  $2A,  $15,$FFF8; 0
word_B154:	dc.w $F			
		dc.w	 0,$802E,$8017,	 $28; 0
		dc.w  $808,$802F,$8017,	 $20; 4
		dc.w $100F,$8032,$8019,	 $18; 8
		dc.w $1005,$8042,$8021,	 $38; 12
		dc.w $200B,$8046,$8023,	 $38; 16
		dc.w $280F,$8052,$8029,	 $50; 20
		dc.w $300F,$8062,$8031,	 $18; 24
		dc.w $4008,$8072,$8039,	 $38; 28
		dc.w $480A,$8075,$803A,	   0; 32
		dc.w $5004,$807E,$803F,	 $18; 36
		dc.w $5800,$8080,$8040,	 $18; 40
		dc.w $480C,$8081,$8040,	 $38; 44
		dc.w $5005,$8085,$8042,	 $30; 48
		dc.w $5008,$8089,$8044,	 $40; 52
		dc.w $5804,$808C,$8046,	 $48; 56
word_B1CE:	dc.w 8			
		dc.w $E006,$2019,$200C,	   6; 0
		dc.w $F004, $493, $249,$FFE0; 4
		dc.w $F809, $4EE, $277,$FFE0; 8
		dc.w $F005, $4F4, $27A,$FFF8; 12
		dc.w	 4, $49F, $24F,$FFF8; 16
		dc.w $F004, $4A1, $250,	   8; 20
		dc.w $F809, $4A3, $251,	   8; 24
		dc.w  $800, $4A9, $254,	   8; 28
word_B210:	dc.w 5			
		dc.w $E701,$201F,$200F,	   4; 0
		dc.w $F405, $4F8, $27C,$FFE8; 4
		dc.w $F405, $4FC, $27E,$FFF8; 8
		dc.w  $404, $4B2, $259,$FFF8; 12
		dc.w $F406, $4B4, $25A,	   8; 16


		incfile	Eni_EndGameLogo

; =============== S U B	R O U T	I N E =======================================


sub_B262:				
		lea	(off_B2CA)(pc),a1
		move.w	($FFFFFF4C).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),d0
		movea.l	d0,a1

loc_B272:				
	disable_ints
		lea	(vdp_data_port).l,a6

loc_B27C:				
		move.l	(a1)+,d0
		bmi.s	loc_B298
		movea.l	d0,a2
		move.w	(a1)+,d0
		bsr.s	sub_B29E
		move.l	d0,4(a6)
		move.b	(a2)+,d0
		lsl.w	#8,d0

loc_B28E:				
		move.b	(a2)+,d0
		bmi.s	loc_B296
		move.w	d0,(a6)
		bra.s	loc_B28E
; ===========================================================================

loc_B296:				
		bra.s	loc_B27C
; ===========================================================================

loc_B298:				
		move	#$2300,sr
		rts	
; End of function sub_B262


; =============== S U B	R O U T	I N E =======================================


sub_B29E:				
		andi.l	#$FFFF,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		rts	
; End of function sub_B29E

; ===========================================================================
off_B2B0:	dc.l byte_BD1A		
		dc.w $C49E
		dc.l byte_BCEE
		dc.w $C622
		dc.l byte_BCF6
		dc.w $C786
		dc.l byte_BCE9
		dc.w $C924
		dc.w $FFFF
off_B2CA:	dc.l off_B322		; 0 
					
		dc.l off_B336		; 1
		dc.l off_B34A		; 2
		dc.l off_B358		; 3
		dc.l off_B366		; 4
		dc.l off_B374		; 5
		dc.l off_B388		; 6
		dc.l off_B3A8		; 7
		dc.l off_B3C2		; 8
		dc.l off_B3DC		; 9
		dc.l off_B3F0		; 10
		dc.l off_B41C		; 11
		dc.l off_B436		; 12
		dc.l off_B450		; 13
		dc.l off_B45E		; 14
		dc.l off_B490		; 15
		dc.l off_B4B0		; 16
		dc.l off_B4C4		; 17
		dc.l off_B4F0		; 18
		dc.l off_B51C		; 19
		dc.l off_B548		; 20
		dc.l $FFFFFFFF		; 21
off_B322:	dc.l byte_BC46		
		dc.w $C59C
		dc.l byte_BC51
		dc.w $C5B0
		dc.l byte_BC55
		dc.w $C784
		dc.w $FFFF
off_B336:	dc.l byte_B55C		; 0 
		dc.w $C586
		dc.l byte_B56F
		dc.w $C5AC
		dc.l byte_B581
		dc.w $C78C
		dc.w $FFFF
off_B34A:	dc.l byte_B56F		; 0 
		dc.w $C598
		dc.l byte_B59F
		dc.w $C78E
		dc.w $FFFF
off_B358:	dc.l byte_B5BC		; 0 
		dc.w $C598
		dc.l byte_B5CD
		dc.w $C78C
		dc.w $FFFF
off_B366:	dc.l byte_B5EB		; 0 
		dc.w $C58A
		dc.l byte_B60C
		dc.w $C78E
		dc.w $FFFF
off_B374:	dc.l byte_B628		; 0 
		dc.w $C510
		dc.l byte_B642
		dc.w $C708
		dc.l byte_B665
		dc.w $C814
		dc.w $FFFF
off_B388:	dc.l byte_B67B		; 0 
		dc.w $C408
		dc.l byte_B69C
		dc.w $C522
		dc.l byte_B6A4
		dc.w $C612
		dc.l byte_B6BC
		dc.w $C808
		dc.l byte_B6DE
		dc.w $C910
		dc.w $FFFF
off_B3A8:	dc.l byte_B6F8		; 0 
		dc.w $C496
		dc.l byte_B70B
		dc.w $C592
		dc.l byte_B723
		dc.w $C794
		dc.l byte_B738
		dc.w $C886
		dc.w $FFFF
off_B3C2:	dc.l byte_B75C		; 0 
		dc.w $C488
		dc.l byte_B642
		dc.w $C688
		dc.l byte_B77E
		dc.w $C78E
		dc.l byte_B799
		dc.w $C88E
		dc.w $FFFF
off_B3DC:	dc.l byte_B7B5		; 0 
		dc.w $C510
		dc.l byte_B75C
		dc.w $C608
		dc.l byte_B799
		dc.w $C80E
		dc.w $FFFF
off_B3F0:	dc.l byte_B7F2		; 0 
		dc.w $C312
		dc.l byte_B6BC
		dc.w $C508
		dc.l byte_B80B
		dc.w $C614
		dc.l byte_B821
		dc.w $C712
		dc.l byte_B839
		dc.w $C80E
		dc.l byte_B855
		dc.w $C916
		dc.l byte_B869
		dc.w $CA16
		dc.w $FFFF
off_B41C:	dc.l byte_B7B5		; 0 
		dc.w $C492
		dc.l byte_B87D
		dc.w $C594
		dc.l byte_B893
		dc.w $C796
		dc.l byte_B8A8
		dc.w $C88E
		dc.w $FFFF
off_B436:	dc.l byte_B8C5		; 0 
		dc.w $C48C
		dc.l byte_B8E2
		dc.w $C68A
		dc.l byte_B902
		dc.w $C786
		dc.l byte_B90F
		dc.w $C888
		dc.w $FFFF
off_B450:	dc.l byte_B932		; 0 
		dc.w $C588
		dc.l byte_B954
		dc.w $C78A
		dc.w $FFFF
off_B45E:	dc.l byte_B974		; 0 
		dc.w $C288
		dc.l byte_B995
		dc.w $C49E
		dc.l byte_B9A1
		dc.w $C59E
		dc.l byte_B9AD
		dc.w $C69E
		dc.l byte_B9B8
		dc.w $C7A0
		dc.l byte_B9C1
		dc.w $C8A2
		dc.l byte_B9C8
		dc.w $C9A2
		dc.l byte_B9D0
		dc.w $CA9E
		dc.w $FFFF
off_B490:	dc.l byte_B9DB		; 0 
		dc.w $C406
		dc.l byte_BA00
		dc.w $C610
		dc.l byte_BA1B
		dc.w $C70C
		dc.l byte_BA3A
		dc.w $C812
		dc.l byte_BA52
		dc.w $C914
		dc.w $FFFF
off_B4B0:	dc.l byte_BA69		; 0 
		dc.w $C512
		dc.l byte_BA81
		dc.w $C70A
		dc.l byte_B7CE
		dc.w $C806
		dc.w $FFFF
off_B4C4:	dc.l byte_B55C		; 0 
		dc.w $C316
		dc.l byte_BAA2
		dc.w $C414
		dc.l byte_BAB8
		dc.w $C606
		dc.l byte_BADC
		dc.w $C70E
		dc.l byte_BAF7
		dc.w $C80A
		dc.l byte_BB16
		dc.w $C90E
		dc.l byte_BB32
		dc.w $CA04
		dc.w $FFFF
off_B4F0:	dc.l byte_BB58		; 0 
		dc.w $C30C
		dc.l byte_BB75
		dc.w $C424
		dc.l byte_BB7B
		dc.w $C60C
		dc.l byte_BC9F
		dc.w $C70A
		dc.l byte_BBD8
		dc.w $C810
		dc.l byte_BBF2
		dc.w $C910
		dc.l byte_BC0C
		dc.w $CA12
		dc.w $FFFF
off_B51C:	dc.l byte_BB58		; 0 
		dc.w $C30C
		dc.l byte_BB75
		dc.w $C424
		dc.l byte_BB98
		dc.w $C606
		dc.l byte_BBBC
		dc.w $C70E
		dc.l byte_BCBE
		dc.w $C80E
		dc.l byte_BCD9
		dc.w $C91A
		dc.l byte_BC25
		dc.w $CA08
		dc.w $FFFF

off_B548:
		dc.l byte_BC7B		; 0 
		dc.w $C496
		dc.l byte_BC8F
		dc.w $C6A4
		dc.l byte_BC95
		dc.w $C8A0
		dc.w $FFFF

byte_B55C:	
		dc.b $20, $A, $B,$2F,$30, $A, $B,  6,  7,$29,$2A,$27,$28,$12,$2B,$2C; 0
		dc.b  $A, $B,$FF	; 16
			
byte_B56F:	
		dc.b $20,$1F,$20,$23,$24,$1D,$1E,  8,  9,$29,$2A,  6,  7, $A, $B,$23; 0	
		dc.b $24,$FF		; 16
		
byte_B581:	
		dc.b   0,$10,$11,  2,  3,$31,$32,  2,  3,$1D,$1E,  0,  0,$1B,$1C,  2; 0
		dc.b   3,$15,$16,  2,  3,$31,$32,  2,  3,$19,$1A,  2,  3,$FF; 16
		
byte_B59F:	
		dc.b   0,$25,$26,$10,$11,$12,$1B,$1C,$1D,$1E,  4,  5,$29,$2A,  0,  0; 0
		dc.b $27,$28,$1D,$1E,$31,$32,$1D,$1E,  8,  9,  2,  3,$FF; 16
		
byte_B5BC:	
		dc.b $20,  8,  9,$12,$23,$24, $A, $B,  6,  7,$27,$28,$1D,$1E,$23,$24; 0		
		dc.b $FF		; 16
		
byte_B5CD:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,$10,$11,  2,  3,$23,$24,$29; 0
		dc.b $2A,  0,  0,$31,$32,$1D,$1E,$25,$26,$10,$11,$12,$12,$FF; 16
		
		
byte_B5EB:	
		dc.b $20,  6,  7,$10,$11,$12, $A, $B, $C, $D,  0,  0,$1F,$20,$23,$24; 0			
		dc.b $1D,$1E, $E, $F,$23,$24,  2,  3,$19,$1A,$19,$1A, $A, $B,$23,$24; 16
		dc.b $FF		; 32
		
byte_B60C:	
		dc.b   0,$31,$32,$29,$2A,$13,$14,$12,  0,  0,$1B,$1C,  2,  3,$15,$16; 0
		dc.b   2,  3,  0,$37,$31,$32,$29,$2A,$35,$36,$38,$FF; 16
		
byte_B628:	
		dc.b $20, $E, $F,  2,  3,$19,$1A, $A, $B,  0,  0,$1F,$20,$17,$18,  2; 0
		dc.b   3,$1B,$1C,$1B,$1C, $A, $B,$23,$24,$FF; 16
		
		
byte_B642:	

		dc.b   0,$10,$11,$12,$23,$24,$1D,$1E,$15,$16,  2,  3,$33,$34,$29,$2A; 0
		dc.b   0,  0,$31,$32,  2,  3,$25,$26,$29,$2A,$10,$11,  2,  3,$23,$24; 16
		dc.b   2,  3,$FF	; 32
		
byte_B665:	
		dc.b   0,$37,  6,  7,  2,  3,$23,$24,$1D,$1E,$17,$18,  0,  0,$31,$32; 0			
		dc.b   2,  3,$25,$26,$38,$FF; 16
		
byte_B67B:	
		dc.b $20,  6,  7,$10,$11,  2,  3,$23,$24,  2,  3,  6,  7,$27,$28, $A; 0			
		dc.b  $B,$23,$24,  0,  0,  8,  9, $A, $B,$25,$26,$12, $E, $F,$1B,$1C; 16
		dc.b $FF		; 32
		
byte_B69C:	
		dc.b $20,  2,  3,$1B,$1C,  8,  9,$FF; 0	

byte_B6A4:	
		dc.b $20,  6,  7,$10,$11,$12, $A, $B, $C, $D,  0,  0,  2,  3,$23,$24; 0			
		dc.b $27,$28,$12,$25,$26,$27,$28,$FF; 16
		
byte_B6BC:	
		dc.b   0,$31,$32,  2,  3,$25,$26,$29,$2A,$25,$26,$10,$11,$12,  0,  0; 0			
		dc.b $31,$32,  2,  3,$19,$1A,  2,  3, $E, $F,$29,$2A,  6,  7,$10,$11; 16
		dc.b $12,$FF		; 32
		
byte_B6DE:	
		dc.b   0,$37,$13,$14,$29,$2A,  8,  9,$31,$32,  0,  0,$27,$28,$1D,$1E; 0		
		dc.b $27,$28,$1D,$1E,$31,$32,  2,  3,$38,$FF; 16
		
byte_B6F8:	
		dc.b $20,  2,  3,$25,$26,$25,$26,$12,$25,$26,$27,$28,  2,  3,$1B,$1C; 0		
		dc.b $27,$28,$FF	; 16
		
byte_B70B:	
		dc.b $20,$1F,$20,$23,$24,$1D,$1E, $E, $F,$23,$24,  2,  3,$19,$1A,$19; 0			
		dc.b $1A, $A, $B,$23,$24,$25,$26,$FF; 16
		
byte_B723:	
		dc.b   0,  4,  5,$12,$17,$18,$17,$18,  0,  0,$2D,$2E,$12,$17,$18,$17; 0		
		dc.b $18,$12,$25,$26,$FF; 16
		
byte_B738:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,$1B,$1C,$1D,$1E,  4,  5,$29; 0		
		dc.b $2A,  0,  0,$31,$32,  2,  3,$19,$1A,  2,  3,$19,$1A,$1D,$1E,$27; 16
		dc.b $28,$1D,$1E,$FF	; 32
		
byte_B75C:	
		dc.b $20,$1D,$1E,  4,  5,$13,$14, $A, $B,  6,  7,$27,$28,  0,  0,$1F; 0		
		dc.b $20,$17,$18,  2,  3,  6,  7, $A, $B,$19,$1A, $A, $B,$1B,$1C,$27; 16
		dc.b $28,$FF		; 32
		
byte_B77E:	
		dc.b   0,$27,$28,  2,  3,$15,$16,  2,  3,$10,$11,$12,$23,$24,$1D,$1E; 0		
		dc.b   0,  0,  2,  3,$1B,$1C,$27,$28,$1D,$1E,$FF; 16
		
byte_B799:	
		dc.b   0,$31,$32,$29,$2A,$27,$28,  2,  3,$15,$16,  2,  3,  0,  0,$25; 0		
		dc.b $26,$29,$2A, $E, $F,  2,  3,$1B,$1C,$1D,$1E,$FF; 16
		
byte_B7B5:	
		dc.b $20,$25,$26,$1F,$20, $A, $B,  6,  7,$12,  2,  3,$17,$18,$25,$26; 0
		dc.b $27,$28,  2,  3, $E, $F, $A, $B,$FF; 16
		
byte_B7CE:	
		dc.b   0,  6,  7,  2,  3,$23,$24,$1D,$1E,$17,$18,  0,  0,  2,  3,$1B; 0			
		dc.b $1C,$1B,$1C,  0,  0,$10,$11,  2,  3,$1B,$1C,$25,$26,$10,$11,  2; 16
		dc.b   3,$2D,$2E,$FF	; 32
		
byte_B7F2:	
		dc.b $20,$33,$34,$1D,$1E,$1B,$1C, $A, $B,  0,  0,  2,  3,$23,$24,$27; 0		
		dc.b $28,$12,$25,$26,$27,$28,$25,$26,$FF; 16
		
byte_B80B:	
		dc.b   0,  6,  7,$23,$24,  2,  3,$12, $E, $F,  0,  0,$25,$26,$27,$28; 0			
		dc.b $12,$27,$28,$27,$28,$FF; 16
		
byte_B821:	
		dc.b   0,  4,  5,$23,$24, $A, $B,$1B,$1C,  8,  9,  2,  3,  0,  0,$23; 0				
		dc.b $24,$1D,$1E,$25,$26,$25,$26,$FF; 16
		
byte_B839:	
		dc.b   0,$13,$14,$12,$1B,$1C,  2,  3,  0,  0,$12,$25,$26,$10,$11,$12; 0			
		dc.b $2D,$2E,  2,  3,$27,$28,  2,  3,$23,$24,$12,$FF; 16
		
byte_B855:	
		dc.b   0,$27,$28,$1D,$1E,$19,$1A,  0,  0,$1F,$20,  2,  3,$31,$32,$1B; 0		
		dc.b $1C, $A, $B,$FF	; 16
		
byte_B869:	
		dc.b   0,$1F,$20,$10,$11, $A, $B,$1B,$1C,$12,$2F,$30,  0,  0,$23,$24; 0		
		dc.b $12, $A, $B,$FF	; 16
		
byte_B87D:	
		dc.b $20,  2,  3,$23,$24,$27,$28,  0,  0,  2,  3,$1B,$1C,  8,  9,  0; 0		
		dc.b   0,  6,  7, $E, $F,$FF; 16
		
byte_B893:	
		dc.b   0,$27,$28,$12,$19,$1A,  0,  0,$25,$26,$15,$16, $A, $B,$17,$18; 0			
		dc.b $17,$18,$31,$32,$FF; 16
		
byte_B8A8:	
		dc.b   0,$1F,$20, $A, $B,$27,$28, $A, $B,$23,$24,  0,  0,$19,$1A,$1D; 0			
		dc.b $1E,$23,$24,  2,  3,$2D,$2E,$12, $A, $B,  6,  7,$FF; 16
		
byte_B8C5:	
		dc.b $20,$19,$1A,$29,$2A,$25,$26,$12,  6,  7,  0,  0,  6,  7,$1D,$1E; 0		
		dc.b $19,$1A,$1F,$20,$1D,$1E,$25,$26, $A, $B,$23,$24,$FF; 16
		
byte_B8E2:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,$27,$28,$1D,$1E,  0,  0,$1B; 0		
		dc.b $1C,  2,  3,$15,$16,  2,  3,$19,$1A,$29,$2A,$23,$24,  2,  3,$FF; 16
		
byte_B902:	
		dc.b   0,$37,  0,$3B,$3C,$3D,$3E,$3F,$3E,$3F,$35,$36,$FF; 0
					
byte_B90F:	
		dc.b   0,  8,  9,$23,$24, $A, $B,  2,  3,$19,$1A,$25,$26,  0,  0,  6; 0		
		dc.b   7,$1D,$1E,$19,$1A, $A, $B,  0,  0,$27,$28,$23,$24,$29,$2A, $A; 16
		dc.b  $B,$38,$FF	; 32
		
byte_B932:	
		dc.b $20,$25,$26,$1D,$1E,$29,$2A,$1B,$1C,  8,  9,  0,  0,$1F,$20,$23; 0		
		dc.b $24,$1D,$1E, $E, $F,$23,$24,  2,  3,$19,$1A,$19,$1A, $A, $B,$23; 16
		dc.b $24,$FF		; 32

byte_B954:	
		dc.b   0,$27,$28,$1D,$1E,$19,$1A,$1D,$1E,$31,$32,$29,$2A,$15,$16,$12; 0		
		dc.b   0,  0,$25,$26,$10,$11,$12,$19,$1A,  2,  3,  8,  9,  2,  3,$FF; 16
		
byte_B974:	
		dc.b $20,$25,$26,$1D,$1E,$29,$2A,$1B,$1C,  8,  9,  0,  0,  2,  3,$25; 0			
		dc.b $26,$25,$26,$12,$25,$26,$27,$28,  2,  3,$1B,$1C,$27,$28,$25,$26; 16
		dc.b $FF		; 32

byte_B995:	
		dc.b   0,$19,$1A,  2,  3,  6,  7,$15,$16,$31,$32,$FF; 0
					

byte_B9A1:	
		dc.b   0,$13,$14,$12,$19,$1A,$12,$27,$28,  2,  3,$FF; 0
					
byte_B9AD:	
		dc.b   0,$19,$1A,$12,$17,$18,$1F,$20,$1D,$1E,$FF; 0
					
byte_B9B8:	
		dc.b   0,$12,$1F,$20,$1F,$20,$1D,$1E,$FF; 0 
		
byte_B9C1:	
		dc.b   0,$25,$26,$3A,$1D,$1E,$FF; 0 

byte_B9C8:	
		dc.b   0,$1D,$1E,$31,$32,$33,$34,$FF; 0	

byte_B9D0:	
		dc.b   0,$1B,$1C,$3A, $E, $F, $A, $B, $A, $B,$FF; 0
					
byte_B9DB:	
		dc.b $20,$1F,$20,$23,$24,$1D,$1E,$13,$14, $A, $B,  6,  7,$27,$28,  0; 0			
		dc.b   0,  2,  3,$25,$26,$25,$26,$12,$25,$26,$27,$28,  2,  3,$1B,$1C; 16
		dc.b $27,$28,$25,$26,$FF; 32

byte_BA00:	
		dc.b   0,$25,$26,$31,$32,$29,$2A,$12,  6,  7,$10,$11,$12,  0,  0,$15; 0			
		dc.b $16,  2,  3,$27,$28,  2,  3, $E, $F,$12,$FF; 16

byte_BA1B:	
		dc.b   0,$27,$28,  2,  3,$15,$16,  2,  3,$10,$11,$12,$23,$24,$1D,$1E; 0		
		dc.b   0,  0,$10,$11,  2,  3,$19,$1A,  2,  3,$1B,$1C,$1D,$1E,$FF; 16

byte_BA3A:	
		dc.b   0,$31,$32,$1D,$1E,$25,$26,$10,$11,$12,$15,$16,$12,  0,  0,$1D; 0	
		dc.b $1E,$1D,$1E,$15,$16,  2,  3,$FF; 16

byte_BA52:	
		dc.b   0,$25,$26,$27,$28, $A, $B,$2B,$2C, $A, $B,  0,  0,$2D,$2E,$1D; 0
		dc.b $1E,$12,$27,$28,  2,  3,$FF; 16

byte_BA69:	
		dc.b $20, $E, $F,  2,  3,$19,$1A, $A, $B,  0,  0,$19,$1A,  2,  3,$1B; 0	
		dc.b $1C,$29,$2A,  2,  3,$17,$18,$FF; 16

byte_BA81:	
		dc.b   0,$31,$32,$1D,$1E,$29,$2A,$12,  6,  7,$10,$11,$12,  0,  0,$27; 0			
		dc.b $28,  2,  3,$15,$16,  2,  3,$10,$11,  2,  3,$25,$26,$10,$11,$12; 16
		dc.b $FF		; 32

byte_BAA2:	
		dc.b $20,$25,$26,$29,$2A,$1F,$20,$1F,$20,$1D,$1E,$23,$24,$27,$28, $A; 0			
		dc.b  $B,$23,$24,$25,$26,$FF; 16
		
byte_BAB8:	
		dc.b   0,  8,  9,  2,  3,$12,$33,$34,  2,  3,  4,  5,$29,$2A,$23,$24; 0		
		dc.b $1D,$1E,$29,$2A,  0,  0,$25,$26,  2,  3,$15,$16,$29,$2A,$23,$24; 16
		dc.b   2,  3,$12,$FF	; 32
		
byte_BADC:	
		dc.b   0,$10,$11,$12,$25,$26,  2,  3,$25,$26,$10,$11,$12,  0,  0,$25; 0		
		dc.b $26,$29,$2A,$33,$34,$29,$2A,$15,$16,$12,$FF; 16
		
byte_BAF7:	
		dc.b   0,$27,$28,$10,$11,$1D,$1E,$19,$1A,  2,  3,$25,$26,  0,  0,$15; 0
		dc.b $16,  2,  3,$17,$18,$12,$1B,$1C,$25,$26,$15,$16, $A, $B,$FF; 16
		
byte_BB16:	
		dc.b   0, $C, $D,$29,$2A,$13,$14,$12,$1D,$1E,  0,  0,$19,$1A,$12,$1B; 0		
		dc.b $1C, $A, $B, $E, $F,$12,$25,$26,$10,$11,$12,$FF; 16
		
byte_BB32:	
		dc.b   0,$27,$28,  2,  3,$15,$16,  2,  3,$10,$11,  2,  3,$23,$24,$29; 0				
		dc.b $2A,  0,$29,$2A,$27,$28,$25,$26,$29,$2A,$1B,$1C,$1D,$1E,$19,$1A; 16
		dc.b $12,$31,$32,  2,  3,$FF; 32

byte_BB58:	
		dc.b $20,$25,$26,$1F,$20, $A, $B,  6,  7,$12,  2,  3,$17,$18,  0,  0; 0			
		dc.b $27,$28,$10,$11,  2,  3,$1B,$1C,$15,$16,$25,$26,$FF; 16

byte_BB75:	
		dc.b $20,$27,$28,$1D,$1E,$FF; 0	
					
byte_BB7B:	
		dc.b   0,  6,  7,$12,$1B,$1C,  8,  9,$31,$32,  0,  0,  6,  7,$17,$18; 0			
		dc.b   2,  3,$2B,$2C, $A, $B,$23,$24,  2,  3,$1B,$1C,$FF; 16

byte_BB98:	
		dc.b   0,  8,  9, $A, $B,  4,  5,$1D,$1E,$23,$24,  2,  3,$10,$11,  0; 0		
		dc.b   0,$19,$1A,  6,  7,  6,  7,$23,$24,  2,  3,  6,  7,$15,$16, $A; 16
		dc.b  $B,$1B,$1C,$FF	; 32

byte_BBBC:	
		dc.b   0,$27,$28,  2,  3,$27,$28,$25,$26,$29,$2A,$1D,$1E,  0,  0,$31; 0			
		dc.b $32,  2,  3,$19,$1A,  2,  3,  8,  9,  2,  3,$FF; 16

byte_BBD8:	
		dc.b   0,  8,  9,  2,  3,$12,$25,$26,$29,$2A,$15,$16, $A, $B,  0,  0; 0	
		dc.b $25,$26,  2,  3,$12,$27,$28,$1D,$1E,$FF; 16

byte_BBF2:	
		dc.b   0,$15,$16,$29,$2A,$1B,$1C,$12,$27,$28,  2,  3,$15,$16, $A, $B; 0			
		dc.b   0,  0,  2,  3,$1D,$1E,$15,$16,$12,$FF; 16

byte_BC0C:	
		dc.b   0,$27,$28,$25,$26,$29,$2A,$1B,$1C, $A, $B,$15,$16,$1D,$1E,  0; 0		
		dc.b   0,  2,  3,$1D,$1E,$15,$16,$12,$FF; 16

byte_BC25:	
		dc.b   0,$19,$1A,  2,  3,$25,$26,  2,  3,  2,  3,$15,$16,$12,  0,  0; 0		
		dc.b $15,$16,  2,  3,$2D,$2E,  2,  3,$19,$1A,$29,$2A,$23,$24,  2,  3; 16
		dc.b $FF		; 32

byte_BC46:	
		dc.b   0,$25,$26,$1D,$1E,$1B,$1C,$12,  6,  7,$FF; 0
					
byte_BC51:	
		dc.b $20,$35,$36,$FF	; 0 

byte_BC55:	
		dc.b   0,  6,  7,  2,  3,$25,$26,$27,$28,  0,  0,$1D,$1E, $C, $D,  0; 0			
		dc.b   0,  6,  7,$10,$11,  2,  3,$23,$24,  2,  3,  6,  7,$27,$28, $A; 16
		dc.b  $B,$23,$24,$25,$26,$FF; 32

byte_BC7B:	
		dc.b   0,$1F,$20,$23,$24, $A, $B,$25,$26, $A, $B,$1B,$1C,$27,$28, $A; 0			
		dc.b  $B,  8,  9,$FF	; 16

byte_BC8F:	
		dc.b   0,  4,  5,$31,$32,$FF; 0	

byte_BC95:	
		dc.b   0,$25,$26, $A, $B, $E, $F,  2,  3,$FF; 0	

byte_BC9F:	
		dc.b   0, $C, $D,$23,$24,  2,  3,$1B,$1C,  6,  7, $A, $B,  0,  0,$27; 0			
		dc.b $28,  2,  3,$1B,$1C,$27,$28,$12,  2,  3,  8,  9,$1D,$1E,$FF; 16

byte_BCBE:	
		dc.b   0,$23,$24,$12,  6,  7,$15,$16,  0,  0,$19,$1A,  2,  3,  6,  7; 0		
		dc.b   2,  3,$23,$24,  2,  3, $A, $B, $E, $F,$FF; 16

byte_BCD9:	
		dc.b   0,$17,$18,$1D,$1E,  6,  7,$15,$16,$31,$32,  0,  0,$1F,$20,$FF; 0
					

byte_BCE9:	
		dc.b   5,$11,$1A,$1B,$FF; 0 

byte_BCEE:	
		dc.b   5,  1,  2,$1A,$1B,  7,  8,$FF; 0	

byte_BCF6:	
		dc.b   5,$18,$19,$11,$16,$17,  9, $A,$24,$25,  0,$38,$26,$27,  1,  2; 0		
		dc.b $11,$16,$17,$24,$25,$38,  0,$1E,$1F,$22,$23,$1C,$1D,$2C,$2D,  9; 16
		dc.b  $A,$22,$23,$FF	; 32

byte_BD1A:	
		dc.b   5,$24,$25,$1C,$1D,$1A,$1B,$11,  5,  6,$FF,  0; 0
					

		incfile	Nem_CreditsFont

; ===========================================================================

	if ~RemoveJmpTos
loc_BF68:						
		jmp	DisplaySprite
loc_BF6E:			
		jmp	DeleteObject
sub_BF74:				
		jmp	(PlaySound).l
sub_BF7A:				
		jmp	loc_3AF58
sub_BF80:								
		jmp	AnimateSprite
j_NemDec:					
		jmp	(NemDec).l
j_EniDec:						
		jmp	(EniDec).l
sub_BF92:				
		jmp	(sub_1208).l
sub_BF98:				
		jmp	(PlayMusic).l
sub_BF9E:									
		jmp	loc_367D0
sub_BFA4:									
		jmp	(TilemapToVRAM).l
sub_BFAA:						
		jmp	SpeedToPos
sub_BFB0:				
		jmp	(sub_19DC).l		
sub_BFB6:								
		jmp	loc_36602
	endc

; =============== S U B	R O U T	I N E =======================================


sub_BFBC:	; LevelSizeLoad			
		clr.w	(v_fg_redraw_direction).w
		clr.w	(v_bg1_redraw_direction).w
		clr.w	(v_bg2_redraw_direction).w
		clr.w	(v_bg3_redraw_direction).w
		clr.w	(v_fg_redraw_direction_p2).w
		clr.w	(v_bg1_redraw_direction_p2).w
		clr.w	(v_bg2_redraw_direction_p2).w
		clr.w	(v_bg3_redraw_direction_p2).w
		clr.w	(v_fg_redraw_direction_copy).w
		clr.w	(v_bg1_redraw_direction_copy).w
		clr.w	(v_bg2_redraw_direction_copy).w
		clr.w	(v_bg3_redraw_direction_copy).w
		clr.w	(v_fg_redraw_direction_p2_copy).w
		clr.w	(v_bg1_redraw_direction_p2_copy).w
		clr.w	(v_bg2_redraw_direction_p2_copy).w
		clr.w	(v_bg3_redraw_direction_p2_copy).w
		clr.b	(f_disable_scrolling).w
		clr.b	(f_screen_shake_htz).w
		clr.b	(f_screen_shake).w
		clr.b	(f_disable_horiz_scroll).w
		clr.b	(f_disable_horiz_scroll_p2).w
		moveq	#0,d0
		move.b	d0,(v_dle_routine).w
	if Revision=2
		move.w	d0,(v_wfz_dle_subrout).w
		move.w	d0,(v_wfz_bg_y_speed).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	d0,(v_camera_7_pos_offset).w
    endc
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		lea	word_C054(pc,d0.w),a0
		move.l	(a0)+,d0
		move.l	d0,(v_boundary_left_next).w
		move.l	d0,(unk_EEC0).w
		move.l	d0,(v_boundary_left_next_p2).w
		move.l	(a0)+,d0
		move.l	d0,(v_boundary_top_next).w
		move.l	d0,(unk_EEC4).w
		move.l	d0,(v_boundary_top_next_p2).w
		move.w	#$1010,(v_fg_x_redraw_flag).w
		move.w	#$60,(v_camera_y_shift).w ; '`'
		move.w	#$60,(v_camera_y_shift_p2).w ; '`'
		bra.w	loc_C164
; ===========================================================================
; ----------------------------------------------------------------------------
; Level	size array
;
; This array defines the screen	boundaries for each act	in the game, with 8
; bytes	per act.
;		    xstart xend	 ystart	yend
; ----------------------------------------------------------------------------
word_C054:	dc.w	 0,$29A0,    0,	$320; 0
		dc.w	 0,$2940,    0,	$420; 4
		dc.w	 0,$3FFF,    0,	$720; 8
		dc.w	 0,$3FFF,    0,	$720; 12
		dc.w	 0,$3FFF,    0,	$720; 16
		dc.w	 0,$3FFF,    0,	$720; 20
		dc.w	 0,$3FFF,    0,	$720; 24
		dc.w	 0,$3FFF,    0,	$720; 28
		dc.w	 0,$2280,$FF00,	$800; 32
		dc.w	 0,$1E80,$FF00,	$800; 36
		dc.w	 0,$2A80,$FF00,	$800; 40
		dc.w	 0,$3FFF,$FF00,	$800; 44
		dc.w	 0,$3FFF,    0,	$720; 48
		dc.w	 0,$3FFF,    0,	$720; 52
		dc.w	 0,$2800,    0,	$720; 56
		dc.w	 0,$3280,    0,	$720; 60
		dc.w	 0,$3FFF,    0,	$720; 64
		dc.w	 0,$3FFF,    0,	$720; 68
		dc.w	 0,$3FFF,    0,	$720; 72
		dc.w	 0,$3FFF,    0,	$720; 76
		dc.w	 0,$2F80,    0,	$680; 80
		dc.w	 0,$2D00,    0,	$680; 84
		dc.w	 0,$2380, $3C0,	$720; 88
		dc.w	 0,$3FFF,  $60,	$720; 92
		dc.w	 0,$27A0,    0,	$720; 96
		dc.w	 0,$2A80,    0,	$720; 100
		dc.w	 0,$2780,    0,	$720; 104
		dc.w	 0,$2A80,    0,	$720; 108
		dc.w	 0,$1000,  $C8,	 $C8; 112
		dc.w	 0,$1000,  $C8,	 $C8; 116
		dc.w	 0,$28C0, $200,	$600; 120
		dc.w	 0,$3FFF, $180,	$710; 124
		dc.w	 0,$3FFF,    0,	   0; 128
		dc.w	 0,$3FFF,    0,	$720; 132
; ===========================================================================

loc_C164:				
		tst.b	(v_last_lamppost).w
		beq.s	loc_C17A
		jsr	loc_1F35E
		move.w	($FFFFB008).w,d1
		move.w	($FFFFB00C).w,d0
		bra.s	loc_C196
; ===========================================================================

loc_C17A:				
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	Misc_C1D0(pc,d0.w),a1
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,($FFFFB008).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,($FFFFB00C).w

loc_C196:				
		subi.w	#$A0,d1	
		bcc.s	loc_C19E
		moveq	#0,d1

loc_C19E:				
		move.w	(v_boundary_right_next).w,d2
		cmp.w	d2,d1
		bcs.s	loc_C1A8
		move.w	d2,d1

loc_C1A8:				
		move.w	d1,(v_camera_x_pos).w
		move.w	d1,(v_camera_x_pos_p2).w
		subi.w	#$60,d0	; '`'
		bcc.s	loc_C1B8
		moveq	#0,d0

loc_C1B8:				
		cmp.w	(v_boundary_bottom).w,d0
		blt.s	loc_C1C2
		move.w	(v_boundary_bottom).w,d0

loc_C1C2:				
		move.w	d0,(v_camera_y_pos).w
		move.w	d0,(v_camera_y_pos_p2).w
		bsr.w	sub_C258
		rts	
; End of function sub_BFBC

; ===========================================================================
; --------------------------------------------------------------------------------------
; Character start location array
;
; 2 entries per	act, corresponding to the X and	Y locations that you want the player to
; appear at when the level starts.
; --------------------------------------------------------------------------------------
Misc_C1D0:	dc.w   $60, $28F	; 0
		dc.w   $60, $2AF	; 2
		dc.w   $60, $28F	; 4
		dc.w   $60, $2AF	; 6
		dc.w   $60, $1AC	; 8
		dc.w   $60, $1AC	; 10
		dc.w   $60, $28F	; 12
		dc.w   $60, $2AF	; 14
		dc.w   $60, $28C	; 16
		dc.w   $60, $5EC	; 18
		dc.w   $60, $20C	; 20
		dc.w   $60, $2AF	; 22
		dc.w   $60, $4CC	; 24
		dc.w  $1E0, $4CC	; 26
		dc.w   $60, $3EF	; 28
		dc.w   $60, $6AF	; 30
		dc.w  $230, $1AC	; 32
		dc.w  $230, $1AC	; 34
		dc.w   $60, $28F	; 36
		dc.w   $60, $2AF	; 38
		dc.w   $60, $6AC	; 40
		dc.w   $60, $56C	; 42
		dc.w   $60, $6AC	; 44
		dc.w   $60, $5AC	; 46
		dc.w   $60, $2AC	; 48
		dc.w   $60, $58C	; 50
		dc.w   $60, $1EC	; 52
		dc.w   $60, $12C	; 54
		dc.w   $60, $12D	; 56
		dc.w   $60, $12D	; 58
		dc.w   $60, $37E	; 60
		dc.w   $60, $37E	; 62
		dc.w  $120,  $70	; 64
		dc.w  $140,  $70	; 66

; =============== S U B	R O U T	I N E =======================================


sub_C258:				
		tst.b	(v_last_lamppost).w
		bne.s	loc_C286
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg2_y_pos).w
		move.w	d1,(v_bg1_x_pos).w
		move.w	d1,(v_bg2_x_pos).w
		move.w	d1,(v_bg3_x_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		move.w	d0,(v_bg2_y_pos_p2).w
		move.w	d1,(v_bg1_x_pos_p2).w
		move.w	d1,(v_bg2_x_pos_p2).w
		move.w	d1,(v_bg3_x_pos_p2).w

loc_C286:				
		moveq	#0,d2
		move.b	(v_zone).w,d2
		add.w	d2,d2
		move.w	off_C296(pc,d2.w),d2
		jmp	off_C296(pc,d2.w)
; End of function sub_C258

; ===========================================================================
off_C296:	dc.w loc_C2B8-off_C296	; 0 
					
		dc.w loc_C2E4-off_C296	; 1
		dc.w loc_C2E4-off_C296	; 2
		dc.w loc_C2E4-off_C296	; 3
		dc.w loc_C2E4-off_C296	; 4
		dc.w loc_C2E4-off_C296	; 5
		dc.w locret_C2F2-off_C296; 6
		dc.w loc_C2F4-off_C296	; 7
		dc.w locret_C320-off_C296; 8
		dc.w locret_C320-off_C296; 9
		dc.w loc_C322-off_C296	; 10
		dc.w loc_C332-off_C296	; 11
		dc.w loc_C364-off_C296	; 12
		dc.w loc_C372-off_C296	; 13
		dc.w locret_C38A-off_C296; 14
		dc.w loc_C38C-off_C296	; 15
		dc.w loc_C3C6-off_C296	; 16
; ===========================================================================

loc_C2B8:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		clr.l	(v_bg2_y_pos).w
		clr.l	(v_bg3_y_pos).w
		lea	(v_bgscroll_buffer).w,a2
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(v_bg1_x_pos_p2).w
		clr.l	(v_bg1_y_pos_p2).w
		clr.l	(v_bg2_y_pos_p2).w
		clr.l	($FFFFEE3C).w
		rts	
; ===========================================================================

loc_C2E4:				
		asr.w	#2,d0
		move.w	d0,(v_bg1_y_pos).w
		asr.w	#3,d1
		move.w	d1,(v_bg1_x_pos).w
		rts	
; ===========================================================================

locret_C2F2:				
		rts	
; ===========================================================================

loc_C2F4:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		clr.l	(v_bg2_y_pos).w
		clr.l	(v_bg3_y_pos).w
		lea	(v_bgscroll_buffer).w,a2
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(a2)+
		clr.l	(v_bg1_x_pos_p2).w
		clr.l	(v_bg1_y_pos_p2).w
		clr.l	(v_bg2_y_pos_p2).w
		clr.l	($FFFFEE3C).w
		rts	
; ===========================================================================

locret_C320:				
		rts	
; ===========================================================================

loc_C322:				
		lsr.w	#3,d0
		addi.w	#$50,d0	; 'P'
		move.w	d0,(v_bg1_y_pos).w
		clr.l	(v_bg1_x_pos).w
		rts	
; ===========================================================================

loc_C332:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_x_pos_p2).w
		tst.b	(v_act).w
		bne.s	loc_C352
		divu.w	#3,d0
		subi.w	#$140,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		rts	
; ===========================================================================

loc_C352:				
		divu.w	#6,d0
		subi.w	#$10,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		rts	
; ===========================================================================

loc_C364:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		clr.l	(v_bg1_y_pos_p2).w
		rts	
; ===========================================================================

loc_C372:				
		lsr.w	#2,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg1_y_pos_p2).w
		lsr.w	#1,d1
		move.w	d1,(v_bg2_x_pos).w
		lsr.w	#2,d1
		move.w	d1,(v_bg1_x_pos).w
		rts	
; ===========================================================================

locret_C38A:				
		rts	
; ===========================================================================

loc_C38C:				
		tst.b	(v_act).w
		beq.s	loc_C39E
		subi.w	#$E0,d0	
		lsr.w	#1,d0
		move.w	d0,(v_bg1_y_pos).w
		bra.s	loc_C3A6
; ===========================================================================

loc_C39E:				
		subi.w	#$180,d0
		move.w	d0,(v_bg1_y_pos).w

loc_C3A6:				
		muls.w	#$119,d1
		asr.l	#8,d1
		move.w	d1,(v_bg1_x_pos).w
		move.w	d1,(v_camera_arz_bg_x_pos).w
		clr.w	($FFFFEE0A).w
		clr.w	($FFFFF674).w
		clr.l	(v_bg2_y_pos).w
		clr.l	(v_bg3_y_pos).w
		rts	
; ===========================================================================

loc_C3C6:				
		clr.l	(v_bg1_x_pos).w
		clr.l	(v_bg1_y_pos).w
		rts	

; =============== S U B	R O U T	I N E =======================================


DeformLayers:				
		tst.b	(f_disable_scrolling).w
		beq.s	loc_C3D8
		rts	
; ===========================================================================

loc_C3D8:				
		clr.w	(v_fg_redraw_direction).w
		clr.w	(v_bg1_redraw_direction).w
		clr.w	(v_bg2_redraw_direction).w
		clr.w	(v_bg3_redraw_direction).w
		clr.w	(v_fg_redraw_direction_p2).w
		clr.w	(v_bg1_redraw_direction_p2).w
		clr.w	(v_bg2_redraw_direction_p2).w
		clr.w	(v_bg3_redraw_direction_p2).w
		clr.w	(v_camera_x_pos_diff).w
		clr.w	(v_camera_y_pos_diff).w
		clr.w	(v_camera_x_pos_diff_p2).w
		clr.w	(v_camera_y_pos_diff_p2).w
		cmpi.b	#$10,(v_zone).w
		bne.w	loc_C41A
		tst.w	(v_debug_active).w
		beq.w	loc_C4D0

loc_C41A:				
		tst.b	(f_disable_horiz_scroll).w
		bne.s	loc_C480
		lea	($FFFFB000).w,a0
		lea	(v_camera_x_pos).w,a1
		lea	(v_boundary_left_next).w,a2
		lea	(v_fg_redraw_direction).w,a3
		lea	(v_camera_x_pos_diff).w,a4
		lea	(v_hscroll_delay_val).w,a5
		lea	(v_sonic_pos_tracker).w,a6
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_C44C
		lea	(v_hscroll_delay_val_p2).w,a5
		lea	(v_tails_pos_tracker).w,a6

loc_C44C:				
		bsr.w	sub_D704
		lea	(v_fg_x_redraw_flag).w,a2
		bsr.w	sub_D6E2
		lea	(v_camera_y_pos).w,a1
		lea	(v_boundary_left_next).w,a2
		lea	(v_camera_y_pos_diff).w,a4
		move.w	(v_camera_y_shift).w,d3
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_C474
		move.w	(v_camera_y_shift_p2).w,d3

loc_C474:				
		bsr.w	sub_D77A
		lea	(v_fg_y_redraw_flag).w,a2
		bsr.w	sub_D878

loc_C480:				
		tst.w	(f_two_player).w
		beq.s	loc_C4D0
		tst.b	(f_disable_horiz_scroll_p2).w
		bne.s	loc_C4D0
		lea	($FFFFB040).w,a0
		lea	(v_camera_x_pos_p2).w,a1
		lea	(v_boundary_left_next_p2).w,a2
		lea	(v_fg_redraw_direction_p2).w,a3
		lea	(v_camera_x_pos_diff_p2).w,a4
		lea	(v_hscroll_delay_val_p2).w,a5
		lea	(v_tails_pos_tracker).w,a6
		bsr.w	sub_D704
		lea	(v_fg_x_redraw_flag_p2).w,a2
		bsr.w	sub_D6E2
		lea	(v_camera_y_pos_p2).w,a1
		lea	(v_boundary_left_next_p2).w,a2
		lea	(v_camera_y_pos_diff_p2).w,a4
		move.w	(v_camera_y_shift_p2).w,d3
		bsr.w	sub_D77A
		lea	(v_fg_y_redraw_flag_p2).w,a2
		bsr.w	sub_D878

loc_C4D0:				
		bsr.w	sub_E5D0
		move.w	(v_camera_y_pos).w,(v_fg_y_pos_vsram).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.l	(v_camera_x_pos).w,(v_camera_x_pos_copy).w
		move.l	(v_camera_y_pos).w,(v_camera_y_pos_copy).w
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		move.w	Misc_C4FC(pc,d0.w),d0
		jmp	Misc_C4FC(pc,d0.w)
; End of function DeformLayers

; ===========================================================================
; ---------------------------------------------------------------------------
; Offset index of rasterised layer deformation
;
; Damn I hate that name, but I'm stuck with it now. Anyway, one offset per
; level, pointing to the section of code that handles the warping of the
; background/foreground	in a level.
; ---------------------------------------------------------------------------
Misc_C4FC:	dc.w SwScrl_EHZ-Misc_C4FC	; 0 
					
		dc.w loc_D666-Misc_C4FC	; 1
		dc.w loc_C7BA-Misc_C4FC	; 2
		dc.w loc_D666-Misc_C4FC	; 3
		dc.w loc_C7F2-Misc_C4FC	; 4
		dc.w loc_C7F2-Misc_C4FC	; 5
		dc.w loc_C82A-Misc_C4FC	; 6
		dc.w loc_C964-Misc_C4FC	; 7
		dc.w loc_CBA0-Misc_C4FC	; 8
		dc.w loc_D666-Misc_C4FC	; 9
		dc.w loc_CC66-Misc_C4FC	; 10
		dc.w loc_CD2C-Misc_C4FC	; 11
		dc.w loc_D0C6-Misc_C4FC	; 12
		dc.w loc_D27C-Misc_C4FC	; 13
		dc.w loc_D382-Misc_C4FC	; 14
		dc.w loc_D4AE-Misc_C4FC	; 15
		dc.w loc_D5DE-Misc_C4FC	; 16
; ===========================================================================

loc_C51E:				
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		addq.w	#1,(v_camera_x_pos).w
		move.w	(v_camera_x_pos).w,d2
		neg.w	d2
		asr.w	#2,d2
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$9F,d1	

loc_C53A:				
		move.l	d0,(a1)+
		dbf	d1,loc_C53A
		move.w	d2,d0
		move.w	#$1F,d1

loc_C546:				
		move.l	d0,(a1)+
		dbf	d1,loc_C546
		move.w	d0,d3
		move.b	($FFFFFE0F).w,d1
		andi.w	#7,d1
		bne.s	loc_C55C
		subq.w	#1,(v_bgscroll_buffer).w

loc_C55C:				
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea	(SwScrl_RippleData)(pc),a2
		lea	(a2,d1.w),a2
		move.w	#$F,d1

loc_C570:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_C570
		rts	
; ===========================================================================

SwScrl_EHZ:				
		tst.w	(f_two_player).w
		bne.w	SwScrl_EHZ_2P 			; Use different background scrolling code for two player mode.

		; Update the background's vertical scrolling.
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		
		; Update the background's (and foreground's) horizontal scrolling.
		; This creates an elaborate parallax effect.
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	#0,d0
		
		; Do 22 lines.
		move.w	#22-1,d1
	.loop22:				
		move.l	d0,(a1)+
		dbf	d1,.loop22
		
		move.w	d2,d0
		asr.w	#6,d0
		
		; Do 58 lines.
		move.w	#58-1,d1	; '9'
	.loop58:				
		move.l	d0,(a1)+
		dbf	d1,.loop58
		
		move.w	d0,d3

		; Make the 'ripple' animate every 8 frames.		
		move.b	(v_vblank_counter+3).w,d1
		andi.w	#7,d1
		bne.s	.skipripple
		subq.w	#1,(v_bgscroll_buffer).w

	.skipripple:				
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea	(SwScrl_RippleData).l,a2
		lea	(a2,d1.w),a2
		
		; Do 21 lines.
		move.w	#21-1,d1
	.loop21:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,.loop21
		
		move.w	#0,d0

		; Do 11 lines.
		move.w	#11-1,d1
	.loop11:				
		move.l	d0,(a1)+
		dbf	d1,.loop11
		
		move.w	d2,d0
		asr.w	#4,d0

		; Do 16 lines.
		move.w	#16-1,d1
	.loop16_1:				
		move.l	d0,(a1)+
		dbf	d1,.loop16_1
		
		move.w	d2,d0
		asr.w	#4,d0
		move.w	d0,d1
		asr.w	#1,d1
		add.w	d1,d0
		
		; Do 16 lines.
		move.w	#16-1,d1
	.loop16_2:				
		move.l	d0,(a1)+
		dbf	d1,.loop16_2
		
		move.l	d0,d4
		swap	d4
		move.w	d2,d0
		asr.w	#1,d0
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		divs.w	#$30,d0
		ext.l	d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w	#3,d3

		; Do 15 lines.		
		move.w	#15-1,d1
	.loop15:				
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop15
			
		; Do 18 lines.
		move.w	#18/2-1,d1
	.loop18:				
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop18
		
		; Do 45 lines.		
		move.w	#45/3-1,d1
	.loop45:				
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop45
		

		; 22+58+21+11+16+16+15+18+45=222.
		; Only 222 out of 224 lines have been processed.

    if FixBugs
		; The bottom two lines haven't had their H-scroll values set.
		; Knuckles in Sonic 2 fixes this with the following code:
		move.w	d4,(a1)+
		move.w	d3,(a1)+
		move.w	d4,(a1)+
		move.w	d3,(a1)+
    endc
		
		
		rts	
; ===========================================================================
; horizontal offsets for the water rippling effect
; byte_C682:
SwScrl_RippleData:
		dc.b   1,  2,  1,  3,  1,  2,  2,  1,  2,  3,  1,  2,  1,  2,  0,  0; 16									
		dc.b   2,  0,  3,  2,  2,  3,  2,  2,  1,  3,  0,  0,  1,  0,  1,  3; 32
		dc.b   1,  2,  1,  3,  1,  2,  2,  1,  2,  3,  1,  2,  1,  2,  0,  0; 48
		dc.b   2,  0,  3,  2,  2,  3,  2,  2,  1,  3,  0,  0,  1,  0,  1,  3; 64
		dc.b   1,  2		; 66
; ===========================================================================

SwScrl_EHZ_2P:
		; Make the 'ripple' animate every 8 frames.				
		move.b	(v_vblank_counter+3).w,d1
		andi.w	#7,d1
		bne.s	.skipripple
		subq.w	#1,(v_bgscroll_buffer).w

	.skipripple:	
		; Do Player 1's screen.

		; Update the background's vertical scrolling.			
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w

		; Only allow the screen to vertically scroll two pixels at a time.
		andi.l	#$FFFEFFFE,(v_fg_y_pos_vsram).w

		; Update the background's (and foreground's) horizontal scrolling.
		; This creates an elaborate parallax effect.
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d0
		
		; Do 11 lines.	
		move.w	#11-1,d1	
		bsr.s	.dobackground
		
		; Do Player 2's screen.

		; Update the background's vertical scrolling.
		moveq	#0,d0
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		
		; Update the foregrounds's vertical scrolling.
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		
		; Only allow the screen to vertically scroll two pixels at a time.
		andi.l	#$FFFEFFFE,(v_fg_y_pos_vsram_p2).w
		
		; Update the background's (and foreground's) horizontal scrolling.
		; This creates an elaborate parallax effect.
		; Tails' screen is slightly taller, to fill the gap between the two
		; screens.
		lea	(v_hscroll_buffer+(112-4)*2*2).w,a1
		move.w	(v_camera_x_pos_p2).w,d0
		
		; Do 15 lines.
		move.w	#11+4-1,d1

; =============== S U B	R O U T	I N E =======================================


.dobackground:				
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	#0,d0

	.loop11or15: ; runs 11 times for player 1, 15 times for player 2			
		move.l	d0,(a1)+
		dbf	d1,.loop11or15
		
		move.w	d2,d0
		asr.w	#6,d0

		; Do 29 lines.
		move.w	#29-1,d1
	.loop29:				
		move.l	d0,(a1)+
		dbf	d1,.loop29
		
		move.w	d0,d3
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea_	SwScrl_RippleData,a2
		lea	(a2,d1.w),a2

		; Do 11 lines.		
		move.w	#11-1,d1
	.loop11:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,.loop11
		
		move.w	#0,d0

		; Do 5 lines.
		move.w	#5-1,d1
	.loop5:				
		move.l	d0,(a1)+
		dbf	d1,.loop5
		
		move.w	d2,d0
		asr.w	#4,d0
		
		; Do 8 lines.		
		move.w	#8-1,d1
	.loop8_1:				
		move.l	d0,(a1)+
		dbf	d1,.loop8_1
		
		move.w	d2,d0
		asr.w	#4,d0
		move.w	d0,d1
		asr.w	#1,d1
		add.w	d1,d0

		; Do 8 lines.
		move.w	#8-1,d1
	.loop8_2:				
		move.l	d0,(a1)+
		dbf	d1,.loop8_2
		
		move.w	d2,d0
		asr.w	#1,d0
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		divs.w	#$30,d0
		ext.l	d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w	#3,d3
		
		; Do 40 lines.
		move.w	#40-1,d1
	.loop40:				
		move.w	d2,(a1)+
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d1,.loop40
		
		
	; 11+29+11+5+8+8+40=112.
	; No missing lines here.
		rts	

; ===========================================================================

loc_C7BA:
	if Revision<2
	; Just a duplicate of 'SwScrl_Minimal'.				
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	sub_D89A
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_C7EA:				
		move.l	d0,(a1)+
		dbf	d1,loc_C7EA
	endc
		rts	
; ===========================================================================

loc_C7F2:				
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	sub_D89A
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_C822:				
		move.l	d0,(a1)+
		dbf	d1,loc_C822
		rts	
; ===========================================================================

loc_C82A:				
		move.w	(v_bg_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#8,d4
		moveq	#2,d6
		bsr.w	sub_D904
		move.w	(v_bg_y_pos_diff).w,d5
		ext.l	d5
		lsl.l	#8,d5
		moveq	#6,d6
		bsr.w	sub_D938
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.l	(v_bg1_x_pos).w,d0
		move.l	d0,d1
		lea	(v_bgscroll_buffer).w,a2
		move.l	d0,(a2)+
		move.l	d1,(a2)+
		addi.l	#$8000,(a2)+
		addi.l	#$4000,(a2)+
		addi.l	#$2000,(a2)+
		lea	(byte_C8CA).l,a3
		cmpi.w	#$2700,(v_camera_x_pos).w
		bcc.s	loc_C880
		lea	(byte_C916).l,a3

loc_C880:				
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		andi.w	#$7FF,d1
		moveq	#0,d0
		moveq	#0,d3

loc_C894:				
		move.b	(a3)+,d0
		addq.w	#1,a3
		sub.w	d0,d1
		bcc.s	loc_C894
		neg.w	d1
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.b	-1(a3),d3
		move.w	(a2,d3.w),d0
		neg.w	d0

loc_C8B4:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_C8C4
		move.b	(a3)+,d1
		move.b	(a3)+,d3
		move.w	(a2,d3.w),d0
		neg.w	d0

loc_C8C4:				
		dbf	d2,loc_C8B4
		rts	
; ===========================================================================
byte_C8CA:	dc.b $C0,  0,$C0,  0,$80,  0,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C; 0
					
		dc.b $30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8; 16
		dc.b $30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10; 32
		dc.b $80,  4,$80,  4,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10; 48
		dc.b $20,  8,$30, $C,$30,$10,$C0,  0,$C0,  0,$80,  0; 64
byte_C916:	dc.b $C0,  0,$C0,  0,$80,  0,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C; 0
					
		dc.b $30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8; 16
		dc.b $30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10; 32
		dc.b $20,  8,$30, $C,$30,$10,$20,  8,$30, $C,$30,$10,$20,  8,$30, $C; 48
		dc.b $30,$10,$20,  8,$30, $C,$30,$10,$C0,  0,$C0,  0,$80,  0; 64
; ===========================================================================

loc_C964:				
		tst.w	(f_two_player).w
		bne.w	loc_CB10
		tst.b	(f_screen_shake_htz).w
		bne.w	HTZ_Screen_Shake
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		move.w	d0,d2
		swap	d0
		move.w	d2,d0
		asr.w	#3,d0
		move.w	#$7F,d1	; ''

loc_C990:				
		move.l	d0,(a1)+
		dbf	d1,loc_C990
		move.l	d0,d4
		move.w	($FFFFA822).w,d0
		addq.w	#4,($FFFFA822).w
		sub.w	d0,d2
		move.w	d2,d0
		move.w	d0,d1
		asr.w	#1,d0
		asr.w	#4,d1
		sub.w	d1,d0
		ext.l	d0
		asl.l	#8,d0
		divs.w	#$70,d0	; 'p'
		ext.l	d0
		asl.l	#8,d0
		lea	(v_bgscroll_buffer).w,a2
		moveq	#0,d3
		move.w	d1,d3
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		moveq	#3,d1

loc_C9E4:				
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		move.w	d3,(a2)+
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d1,loc_C9E4
		add.l	d0,d0
		add.l	d0,d0
		move.w	d3,d4
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		move.l	d4,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#6,d1

loc_CA22:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA22
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#7,d1

loc_CA36:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA36
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#9,d1

loc_CA4A:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA4A
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	d3,d4
		move.w	#$E,d1

loc_CA60:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA60
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		move.w	#2,d2

loc_CA74:				
		move.w	d3,d4
		move.w	#$F,d1

loc_CA7A:				
		move.l	d4,(a1)+
		dbf	d1,loc_CA7A
		swap	d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		add.l	d0,d3
		swap	d3
		dbf	d2,loc_CA74
		rts	
; ===========================================================================

;loc_CA92:
HTZ_Screen_Shake:				
		move.w	(v_bg_x_pos_diff).w,d4
		ext.l	d4
		lsl.l	#8,d4
		moveq	#2,d6
		bsr.w	sub_D904
		move.w	(v_bg_y_pos_diff).w,d5
		ext.l	d5
		lsl.l	#8,d5
		moveq	#0,d6
		bsr.w	sub_D938
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.w	(v_camera_y_pos).w,(v_fg_y_pos_vsram).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	loc_CAEE
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0	; '?'
		lea_	SwScrl_RippleData,a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

loc_CAEE:				
		lea	(v_hscroll_buffer).w,a1
		move.w	#224-1,d1
		move.w	(v_camera_x_pos).w,d0
		add.w	d2,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		add.w	d2,d0
		neg.w	d0

loc_CB08:				
		move.l	d0,(a1)+
		dbf	d1,loc_CB08
		rts	
; ===========================================================================

loc_CB10:				
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#6,d4
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#2,d5
		moveq	#0,d5
		bsr.w	sub_D89A
		move.b	#0,(v_bg1_redraw_direction).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		andi.l	#-$10002,(v_fg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$6F,d1	; 'o'
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_CB50:				
		move.l	d0,(a1)+
		dbf	d1,loc_CB50
		move.w	(v_camera_x_pos_diff_p2).w,d4
		ext.l	d4
		asl.l	#6,d4
		add.l	d4,(v_bg1_x_pos_p2).w
		moveq	#0,d0
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		andi.l	#-$10002,(v_fg_y_pos_vsram_p2).w
		lea	($FFFFE1B0).w,a1
		move.w	#$73,d1	; 's'
		move.w	(v_camera_x_pos_p2).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos_p2).w,d0
		neg.w	d0

loc_CB98:				
		move.l	d0,(a1)+
		dbf	d1,loc_CB98
		rts	
; ===========================================================================

loc_CBA0:				
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#6,d4
		moveq	#2,d6
		bsr.w	sub_D904
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#7,d5
		moveq	#6,d6
		bsr.w	sub_D938
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_bgscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d2
		neg.w	d2
		move.w	d2,d0
		asr.w	#1,d0
		move.w	#7,d1

loc_CBD4:				
		move.w	d0,(a1)+
		dbf	d1,loc_CBD4
		move.w	d2,d0
		asr.w	#3,d0
		sub.w	d2,d0
		ext.l	d0
		asl.l	#3,d0
		divs.w	#8,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		asr.w	#1,d3
		lea	($FFFFA860).w,a2
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	d3,-(a2)
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		swap	d3
		add.l	d0,d3
		swap	d3
		move.w	d3,(a1)+
		move.w	d3,-(a2)
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0
		move.w	#$19,d1

loc_CC36:				
		move.w	d0,(a1)+
		dbf	d1,loc_CC36
		adda.w	#$E,a1
		move.w	d2,d0
		asr.w	#1,d0
		move.w	#$17,d1

loc_CC48:				
		move.w	d0,(a1)+
		dbf	d1,loc_CC48
		lea	(v_bgscroll_buffer).w,a2
		move.w	(v_bg1_y_pos).w,d0
		move.w	d0,d2
		andi.w	#$3F0,d0
		lsr.w	#3,d0
		lea	(a2,d0.w),a2
		bra.w	loc_D69E
; ===========================================================================

loc_CC66:				
		move.w	(v_camera_x_pos_diff).w,d0
		ext.l	d0
		asl.l	#5,d0
		add.l	d0,(v_bg1_x_pos).w
		move.w	(v_camera_y_pos_diff).w,d0
		ext.l	d0
		asl.l	#5,d0
		move.l	(v_bg1_y_pos).w,d3
		add.l	d3,d0
		moveq	#4,d6
		bsr.w	loc_D940
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	($FFFFE380).w,a1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d7
		neg.w	d7
		move.w	(v_bg1_y_pos).w,d1
		subi.w	#$50,d1	; 'P'
		bcc.s	loc_CCAA
		moveq	#0,d1

loc_CCAA:				
		subi.w	#$B0,d1	
		bcs.s	loc_CCB2
		moveq	#0,d1

loc_CCB2:				
		move.w	#$DF,d6	
		add.w	d6,d1
		move.w	d7,d0
		bsr.s	sub_CD1C
		bsr.s	sub_CD10
		bsr.s	sub_CD16
		bsr.s	sub_CD0A
		move.w	d7,d0
		asr.w	#4,d0
		moveq	#6,d1
		bsr.s	sub_CD1C
		move.b	($FFFFFE0F).w,d1
		andi.w	#7,d1
		bne.s	loc_CCD8
		subq.w	#1,(v_bgscroll_buffer).w

loc_CCD8:				
		move.w	(v_bgscroll_buffer).w,d1
		andi.w	#$1F,d1
		lea	(SwScrl_RippleData)(pc),a2
		lea	(a2,d1.w),a2
		moveq	#$20,d1	; ' '

loc_CCEA:				
		move.b	(a2)+,d0
		ext.w	d0
		move.l	d0,-(a1)
		subq.w	#1,d6
		bmi.s	locret_CD08
		dbf	d1,loc_CCEA
		bsr.s	sub_CD10
		bsr.s	sub_CD16
		bsr.s	sub_CD0A
		bsr.s	sub_CD16
		bsr.s	sub_CD10
		move.w	d7,d0
		moveq	#$47,d1	; 'G'
		bsr.s	sub_CD1C

locret_CD08:				
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_CD0A:				
					
		move.w	d7,d0
		asr.w	#2,d0
		bra.s	loc_CD1A
; End of function sub_CD0A


; =============== S U B	R O U T	I N E =======================================


sub_CD10:				
					
		move.w	d7,d0
		asr.w	#3,d0
		bra.s	loc_CD1A
; End of function sub_CD10


; =============== S U B	R O U T	I N E =======================================


sub_CD16:				
					
		move.w	d7,d0
		asr.w	#4,d0

loc_CD1A:				
		moveq	#7,d1
; End of function sub_CD16


; =============== S U B	R O U T	I N E =======================================


sub_CD1C:				
					
		move.l	d0,-(a1)
		subq.w	#1,d6
		bmi.s	loc_CD28
		dbf	d1,sub_CD1C
		rts	
; ===========================================================================

loc_CD28:				
		addq.l	#4,sp
		rts	
; End of function sub_CD1C

; ===========================================================================

loc_CD2C:				
		tst.w	(f_two_player).w
		bne.w	loc_CE84
		move.w	(v_camera_y_pos).w,d0
		move.l	(v_bg1_y_pos).w,d3
		tst.b	(v_act).w
		bne.s	loc_CD4C
		divu.w	#3,d0
		subi.w	#$140,d0
		bra.s	loc_CD54
; ===========================================================================

loc_CD4C:				
		divu.w	#6,d0
		subi.w	#$10,d0

loc_CD54:				
		swap	d0
		moveq	#6,d6
		bsr.w	loc_D940
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	loc_CD90
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0	; '?'
		lea	(SwScrl_RippleData)(pc),a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

loc_CD90:				
		lea	(v_bgscroll_buffer).w,a2
		lea	$1E(a2),a3
		move.w	(v_camera_x_pos).w,d0
		ext.l	d0
		asl.l	#4,d0
		divs.w	#$A,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$E(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$C(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$A(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,8(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6(a2)
		move.w	d1,$10(a2)
		move.w	d1,$1C(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4(a2)
		move.w	d1,$12(a2)
		move.w	d1,$1A(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2(a2)
		move.w	d1,$14(a2)
		move.w	d1,$18(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,$16(a2)
		lea	(byte_CE6C).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_CE3E:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_CE3E
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_CE5A:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_CE66
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_CE66:				
		dbf	d2,loc_CE5A
		rts	
; ===========================================================================
byte_CE6C:	dc.b $25		; 0 
		dc.b $17		; 1
		dc.b $12		; 2
		dc.b   7		; 3
		dc.b   7		; 4
		dc.b   2		; 5
		dc.b   2		; 6
		dc.b $30		; 7
		dc.b  $D		; 8
		dc.b $13		; 9
		dc.b $20		; 10
		dc.b $40		; 11
		dc.b $20		; 12
		dc.b $13		; 13
		dc.b  $D		; 14
		dc.b $30		; 15
		dc.b   2		; 16
		dc.b   2		; 17
		dc.b   7		; 18
		dc.b   7		; 19
		dc.b $20		; 20
		dc.b $12		; 21
		dc.b $17		; 22
		dc.b $25		; 23
; ===========================================================================

loc_CE84:				
		moveq	#0,d0
		move.w	(v_camera_y_pos).w,d0
		tst.b	(v_act).w
		bne.s	loc_CE9A
		divu.w	#3,d0
		subi.w	#$140,d0
		bra.s	loc_CEA2
; ===========================================================================

loc_CE9A:				
		divu.w	#6,d0
		subi.w	#$10,d0

loc_CEA2:				
		move.w	d0,(v_bg1_y_pos).w
		move.w	d0,(v_bg_y_pos_vsram).w
		andi.l	#-$10002,(v_fg_y_pos_vsram).w
		lea	(v_bgscroll_buffer).w,a2
		lea	$1E(a2),a3
		move.w	(v_camera_x_pos).w,d0
		ext.l	d0
		asl.l	#4,d0
		divs.w	#$A,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$E(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$C(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$A(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,8(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6(a2)
		move.w	d1,$10(a2)
		move.w	d1,$1C(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4(a2)
		move.w	d1,$12(a2)
		move.w	d1,$1A(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2(a2)
		move.w	d1,$14(a2)
		move.w	d1,$18(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,$16(a2)
		lea	(byte_CF90).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		lsr.w	#1,d1
		moveq	#0,d0

loc_CF62:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_CF62
		neg.w	d1
		subq.w	#2,a2
		move.w	#$6F,d2	; 'o'
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_CF7E:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_CF8A
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_CF8A:				
		dbf	d2,loc_CF7E
		bra.s	loc_CFA8
; ===========================================================================
byte_CF90:	dc.b $13		; 0 
byte_CF91:	dc.b  $B		; 0 
		dc.b   9		; 1
		dc.b   4		; 2
		dc.b   3		; 3
		dc.b   1		; 4
		dc.b   1		; 5
		dc.b $18		; 6
		dc.b   6		; 7
		dc.b  $A		; 8
		dc.b $10		; 9
		dc.b $20		; 10
		dc.b $10		; 11
		dc.b  $A		; 12
		dc.b   6		; 13
		dc.b $18		; 14
		dc.b   1		; 15
		dc.b   1		; 16
		dc.b   3		; 17
		dc.b   4		; 18
		dc.b $10		; 19
		dc.b   9		; 20
		dc.b  $B		; 21
		dc.b $13		; 22
; ===========================================================================

loc_CFA8:				
		moveq	#0,d0
		move.w	(v_camera_y_pos_p2).w,d0
		tst.b	(v_act).w
		bne.s	loc_CFBE
		divu.w	#3,d0
		subi.w	#$140,d0
		bra.s	loc_CFC6
; ===========================================================================

loc_CFBE:				
		divu.w	#6,d0
		subi.w	#$10,d0

loc_CFC6:				
		move.w	d0,(v_bg1_y_pos_p2).w
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		andi.l	#-$10002,(v_fg_y_pos_vsram_p2).w
		lea	(v_bgscroll_buffer).w,a2
		lea	$1E(a2),a3
		move.w	(v_camera_x_pos_p2).w,d0
		ext.l	d0
		asl.l	#4,d0
		divs.w	#$A,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$E(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$C(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,$A(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,8(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,6(a2)
		move.w	d1,$10(a2)
		move.w	d1,$1C(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,4(a2)
		move.w	d1,$12(a2)
		move.w	d1,$1A(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,2(a2)
		move.w	d1,$14(a2)
		move.w	d1,$18(a2)
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,$16(a2)
		lea	(byte_CF91)(pc),a3
		lea	(v_bgscroll_buffer).w,a2
		lea	($FFFFE1B0).w,a1
		move.w	(v_bg1_y_pos_p2).w,d1
		lsr.w	#1,d1
		moveq	#$17,d0
		bra.s	loc_D09A
; ===========================================================================

loc_D098:				
		move.b	(a3)+,d0

loc_D09A:				
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D098
		neg.w	d1
		subq.w	#2,a2
		move.w	#$73,d2	; 's'
		move.w	(v_camera_x_pos_p2).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D0B4:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D0C0
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_D0C0:				
		dbf	d2,loc_D0B4
		rts	
; ===========================================================================

loc_D0C6:				
		tst.w	(f_two_player).w
		bne.w	loc_D194
		move.w	(v_camera_y_pos).w,d0
		lsr.w	#6,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.w	(v_camera_x_pos).w,d2
		bsr.w	sub_D160
		lea	(byte_D156).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_D0FA:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D0FA
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D116:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D124

loc_D11C:				
		move.w	(a2)+,d0
		neg.w	d0
		move.b	(a3)+,d1
		beq.s	loc_D12A

loc_D124:				
		dbf	d2,loc_D116
		rts	
; ===========================================================================

loc_D12A:				
		move.w	#$F,d1
		move.w	d0,d3
		move.b	($FFFFFE0F).w,d0
		lsr.w	#3,d0
		neg.w	d0
		andi.w	#$1F,d0
		lea	(SwScrl_RippleData)(pc),a4
		lea	(a4,d0.w),a4

loc_D144:				
		move.b	(a4)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_D144
		subi.w	#$10,d2
		bra.s	loc_D11C
; ===========================================================================
byte_D156:	dc.b $10		; 0 
		dc.b $10		; 1
		dc.b $10		; 2
		dc.b $10		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b $10		; 6
		dc.b $10		; 7
		dc.b   0		; 8
		dc.b $F0		; 9

; =============== S U B	R O U T	I N E =======================================


sub_D160:				
					
		lea	(v_bgscroll_buffer).w,a1
		move.w	d2,d0
		asr.w	#3,d0
		sub.w	d2,d0
		ext.l	d0
		asl.l	#5,d0
		asl.l	#8,d0
		moveq	#0,d3
		move.w	d2,d3
		move.w	#6,d1

loc_D178:				
		move.w	d3,(a1)+
		swap	d3
		add.l	d0,d3
		swap	d3
		dbf	d1,loc_D178
		move.w	d2,d0
		asr.w	#3,d0
		move.w	d0,4(a1)
		asr.w	#1,d0
		move.w	d0,(a1)+
		move.w	d0,(a1)+
		rts	
; End of function sub_D160

; ===========================================================================

loc_D194:				
		move.w	(v_camera_y_pos).w,d0
		lsr.w	#6,d0
		move.w	d0,(v_bg1_y_pos).w
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		andi.l	#-$10002,(v_fg_y_pos_vsram).w
		move.w	(v_camera_x_pos).w,d2
		bsr.w	sub_D160
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0
		move.w	(v_camera_x_pos).w,d0
		move.w	#$6F,d2	; 'o'
		lea	(byte_D270+2).l,a3
		bsr.s	sub_D216
		move.w	(v_camera_y_pos_p2).w,d0
		lsr.w	#6,d0
		move.w	d0,(v_bg1_y_pos_p2).w
		move.w	d0,(v_bg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_bg_y_pos_vsram_p2).w
		move.w	(v_camera_y_pos_p2).w,(v_fg_y_pos_vsram_p2).w
		subi.w	#$E0,(v_fg_y_pos_vsram_p2).w
		andi.l	#-$10002,(v_fg_y_pos_vsram_p2).w
		move.w	(v_camera_x_pos_p2).w,d2
		bsr.w	sub_D160
		lea	($FFFFE1B0).w,a1
		move.w	(v_bg1_y_pos_p2).w,d1
		moveq	#0,d0
		move.w	(v_camera_x_pos_p2).w,d0
		move.w	#$73,d2	; 's'
		lea	(byte_D270+1).l,a3

; =============== S U B	R O U T	I N E =======================================


sub_D216:				
		lsr.w	#1,d1
		lea	(v_bgscroll_buffer).w,a2
		moveq	#0,d3

loc_D21E:				
		move.b	(a3)+,d3
		addq.w	#2,a2
		sub.w	d3,d1
		bcc.s	loc_D21E
		neg.w	d1
		subq.w	#2,a2
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D232:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D240

loc_D238:				
		move.w	(a2)+,d0
		neg.w	d0
		move.b	(a3)+,d1
		beq.s	loc_D246

loc_D240:				
		dbf	d2,loc_D232
		rts	
; ===========================================================================

loc_D246:				
		move.w	#7,d1
		move.w	d0,d3
		move.b	($FFFFFE0F).w,d0
		lsr.w	#3,d0
		neg.w	d0
		andi.w	#$1F,d0
		lea	(SwScrl_RippleData)(pc),a4
		lea	(a4,d0.w),a4

loc_D260:				
		move.b	(a4)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d1,loc_D260
		subq.w	#8,d2
		bra.s	loc_D238
; End of function sub_D216

; ===========================================================================
byte_D270:	dc.b   4		; 0 
					
		dc.b   4		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b   8		; 4
		dc.b   8		; 5
		dc.b   8		; 6
		dc.b   8		; 7
		dc.b   8		; 8
		dc.b   8		; 9
		dc.b   0		; 10
		dc.b $78		; 11
; ===========================================================================

loc_D27C:				
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	sub_D89A
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#7,d4
		moveq	#4,d6
		bsr.w	sub_D9C8
		move.w	(v_bg1_y_pos).w,d0
		move.w	d0,(v_bg2_y_pos).w
		move.w	d0,(v_bg_y_pos_vsram).w
		move.b	(v_bg1_redraw_direction).w,d0
		or.b	(v_bg2_redraw_direction).w,d0
		move.b	d0,(v_bg3_redraw_direction).w
		clr.b	(v_bg1_redraw_direction).w
		clr.b	(v_bg2_redraw_direction).w
		move.b	($FFFFFE0F).w,d1
		andi.w	#7,d1
		bne.s	loc_D2CC
		subq.w	#1,(v_bgscroll_buffer).w

loc_D2CC:				
		lea	(byte_DDD1).l,a0
		move.w	(v_bg1_y_pos).w,d0
		move.w	d0,d2
		andi.w	#$3F0,d0
		lsr.w	#4,d0
		lea	(a0,d0.w),a0
		move.w	d0,d4
		lea	(v_hscroll_buffer).w,a1
		move.w	#$E,d1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		andi.w	#$F,d2
		move.w	(v_bg1_x_pos).w,d0
		cmpi.b	#$12,d4
		beq.s	loc_D34A
		bcs.s	loc_D308
		move.w	(v_bg2_x_pos).w,d0

loc_D308:				
		neg.w	d0
		add.w	d2,d2
		jmp	loc_D322(pc,d2.w)
; ===========================================================================

loc_D310:				
					
		move.w	(v_bg1_x_pos).w,d0
		cmpi.b	#$12,d4
		beq.s	loc_D354
		bcs.s	loc_D320
		move.w	(v_bg2_x_pos).w,d0

loc_D320:				
		neg.w	d0

loc_D322:
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		addq.b	#1,d4
		dbf	d1,loc_D310
		rts	
; ===========================================================================

loc_D34A:				
		move.w	#$F,d0
		sub.w	d2,d0
		move.w	d0,d2
		bra.s	loc_D358
; ===========================================================================

loc_D354:				
		move.w	#$F,d2

loc_D358:				
		move.w	(v_bg1_x_pos).w,d3
		neg.w	d3
		move.w	(v_bgscroll_buffer).w,d0
		andi.w	#$1F,d0
		lea	(SwScrl_RippleData)(pc),a2
		lea	(a2,d0.w),a2

loc_D36E:				
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.l	d0,(a1)+
		dbf	d2,loc_D36E
		addq.b	#1,d4
		dbf	d1,loc_D310
		rts	
; ===========================================================================

loc_D382:				
					
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#8,d4
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#8,d5
		bsr.w	sub_D89A
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		move.w	(v_camera_x_pos).w,d4
		lea	(v_bgscroll_buffer).w,a2
		move.w	d4,(a2)+
		addq.w	#3,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		addq.w	#1,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#2,(a2)+
		addq.w	#6,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#1,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		addq.w	#3,(a2)+
		addq.w	#2,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#1,(a2)+
		addq.w	#3,(a2)+
		addq.w	#4,(a2)+
		addq.w	#2,(a2)+
		addq.w	#1,(a2)
		move.w	(a2)+,d0
		moveq	#0,d1
		move.w	d0,d1
		lsr.w	#1,d0
		move.w	d0,(a2)+
		addq.w	#3,(a2)+
		addq.w	#2,(a2)+
		addq.w	#4,(a2)+
		swap	d1
		move.l	d1,d0
		lsr.l	#3,d1
		sub.l	d1,d0
		swap	d0
		move.w	d0,4(a2)
		swap	d0
		sub.l	d1,d0
		swap	d0
		move.w	d0,2(a2)
		swap	d0
		sub.l	d1,d0
		swap	d0
		move.w	d0,(a2)+
		addq.w	#4,a2
		addq.w	#1,(a2)+
		move.w	d4,(a2)+
		move.w	d4,(a2)+
		move.w	d4,(a2)+
		lea	(byte_D48A).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_D424:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D424
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D440:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D44C
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_D44C:				
		dbf	d2,loc_D440
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	locret_D488
		subq.w	#1,($FFFFF660).w
		bpl.s	loc_D462
		clr.b	(f_screen_shake).w

loc_D462:				
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0	; '?'
		lea	(SwScrl_RippleData)(pc),a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

locret_D488:				
		rts	
; ===========================================================================
byte_D48A:	dc.b $80		; 0 
		dc.b   8		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b   8		; 4
		dc.b   8		; 5
		dc.b   8		; 6
		dc.b   8		; 7
		dc.b   8		; 8
		dc.b   8		; 9
		dc.b   8		; 10
		dc.b   8		; 11
		dc.b   8		; 12
		dc.b   8		; 13
		dc.b   8		; 14
		dc.b   8		; 15
		dc.b   8		; 16
		dc.b   8		; 17
		dc.b   8		; 18
		dc.b   8		; 19
		dc.b   8		; 20
		dc.b   8		; 21
		dc.b   8		; 22
		dc.b   8		; 23
		dc.b   8		; 24
		dc.b   8		; 25
		dc.b   8		; 26
		dc.b   8		; 27
		dc.b   8		; 28
		dc.b   3		; 29
		dc.b   5		; 30
		dc.b   8		; 31
		dc.b $10		; 32
		dc.b $80		; 33
		dc.b $80		; 34
		dc.b $80		; 35
; ===========================================================================

loc_D4AE:				
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		muls.w	#$119,d4
		moveq	#2,d6
		bsr.w	sub_D96C
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#7,d5
		tst.b	(v_act).w
		bne.s	loc_D4CE
		asl.l	#1,d5

loc_D4CE:				
		moveq	#6,d6
		bsr.w	sub_D938
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		moveq	#0,d2
		tst.b	(f_screen_shake).w
		beq.s	loc_D508
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0	; '?'
		lea	(SwScrl_RippleData)(pc),a1
		lea	(a1,d0.w),a1
		moveq	#0,d0
		move.b	(a1)+,d0
		add.w	d0,(v_fg_y_pos_vsram).w
		add.w	d0,(v_bg_y_pos_vsram).w
		add.w	d0,(v_camera_y_pos_copy).w
		move.b	(a1)+,d2
		add.w	d2,(v_camera_x_pos_copy).w

loc_D508:				
		lea	(v_bgscroll_buffer).w,a2
		lea	6(a2),a3
		move.w	(v_camera_x_pos).w,d0
		ext.l	d0
		asl.l	#4,d0
		divs.w	#$A,d0
		ext.l	d0
		asl.l	#4,d0
		asl.l	#8,d0
		move.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d1,d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		swap	d1
		add.l	d0,d1
		swap	d1
		move.w	d1,(a3)+
		move.w	d1,(a2)
		move.w	d1,4(a2)
		move.w	(v_bg1_x_pos).w,d0
		move.w	d0,2(a2)
		move.w	d0,$16(a2)
		_move.w	d0,0(a2)
		move.w	d0,4(a2)
		move.w	d0,$18(a2)
		move.w	d0,$1A(a2)
		move.w	d0,$1C(a2)
		move.w	d0,$1E(a2)
		lea	(byte_D5CE).l,a3
		lea	(v_bgscroll_buffer).w,a2
		lea	(v_hscroll_buffer).w,a1
		move.w	(v_bg1_y_pos).w,d1
		moveq	#0,d0

loc_D5A0:				
		move.b	(a3)+,d0
		addq.w	#2,a2
		sub.w	d0,d1
		bcc.s	loc_D5A0
		neg.w	d1
		subq.w	#2,a2
		move.w	#$DF,d2	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(a2)+,d0
		neg.w	d0

loc_D5BC:				
		move.l	d0,(a1)+
		subq.w	#1,d1
		bne.s	loc_D5C8
		move.b	(a3)+,d1
		move.w	(a2)+,d0
		neg.w	d0

loc_D5C8:				
		dbf	d2,loc_D5BC
		rts	
; ===========================================================================
byte_D5CE:	dc.b $B0		; 0 
		dc.b $70		; 1
		dc.b $30		; 2
		dc.b $60		; 3
		dc.b $15		; 4
		dc.b  $C		; 5
		dc.b  $E		; 6
		dc.b   6		; 7
		dc.b  $C		; 8
		dc.b $1F		; 9
		dc.b $30		; 10
		dc.b $C0		; 11
		dc.b $F0		; 12
		dc.b $F0		; 13
		dc.b $F0		; 14
		dc.b $F0		; 15
; ===========================================================================

loc_D5DE:				
		tst.w	(v_debug_active).w
		bne.w	loc_D666
		lea	(v_camera_x_pos).w,a1
		lea	(v_fg_redraw_direction).w,a3
		lea	(v_camera_x_pos_diff).w,a4
		move.w	(v_tornado_x_vel).w,d0
		move.w	(a1),d4
		add.w	(a1),d0
		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		lea	(v_fg_x_redraw_flag).w,a2
		bsr.w	sub_D6E2
		lea	(v_camera_y_pos).w,a1
		lea	(v_camera_y_pos_diff).w,a4
		move.w	(v_tornado_y_vel).w,d0
		move.w	(a1),d4
		add.w	(a1),d0
		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		lea	(v_fg_y_redraw_flag).w,a2
		bsr.w	sub_D878
		move.w	(v_camera_x_pos_diff).w,d4
		beq.s	loc_D638
		move.w	#$100,d4

loc_D638:				
		ext.l	d4
		asl.l	#7,d4
		moveq	#0,d5
		bsr.w	sub_D89A
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_D65E:				
		move.l	d0,(a1)+
		dbf	d1,loc_D65E
		rts	
; ===========================================================================

loc_D666:				
					
		move.w	(v_camera_x_pos_diff).w,d4
		ext.l	d4
		asl.l	#5,d4
		move.w	(v_camera_y_pos_diff).w,d5
		ext.l	d5
		asl.l	#6,d5
		bsr.w	sub_D89A
		move.w	(v_bg1_y_pos).w,(v_bg_y_pos_vsram).w
		lea	(v_hscroll_buffer).w,a1
		move.w	#$DF,d1	
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		move.w	(v_bg1_x_pos).w,d0
		neg.w	d0

loc_D696:				
		move.l	d0,(a1)+
		dbf	d1,loc_D696
		rts	
; ===========================================================================

loc_D69E:				
		lea	(v_hscroll_buffer).w,a1
		move.w	#$E,d1
		move.w	(v_camera_x_pos).w,d0
		neg.w	d0
		swap	d0
		andi.w	#$F,d2
		add.w	d2,d2
		move.w	(a2)+,d0
		jmp	loc_D6BC(pc,d2.w)
; ===========================================================================

loc_D6BA:				
		move.w	(a2)+,d0

loc_D6BC:
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		move.l	d0,(a1)+
		dbf	d1,loc_D6BA
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_D6E2:				
		move.w	(a1),d0
		andi.w	#$10,d0
		move.b	(a2),d1
		eor.b	d1,d0
		bne.s	locret_D702
		eori.b	#$10,(a2)
		move.w	(a1),d0
		sub.w	d4,d0
		bpl.s	loc_D6FE
		bset	#2,(a3)
		rts	
; ===========================================================================

loc_D6FE:				
		bset	#3,(a3)

locret_D702:				
		rts	
; End of function sub_D6E2


; =============== S U B	R O U T	I N E =======================================


sub_D704:				
		move.w	(a1),d4
		tst.b	(f_teleport_flag).w
		bne.s	locret_D742
		move.w	(a5),d1
		beq.s	loc_D72E
		subi.w	#$100,d1
		move.w	d1,(a5)
		moveq	#0,d1
		move.b	(a5),d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	2(a5),d0
		sub.b	d1,d0
		move.w	(a6,d0.w),d0
		andi.w	#$3FFF,d0
		bra.s	loc_D732
; ===========================================================================

loc_D72E:				
		move.w	8(a0),d0

loc_D732:				
		sub.w	(a1),d0
		subi.w	#$90,d0	
		blt.s	loc_D744
		subi.w	#$10,d0
		bge.s	loc_D758
		clr.w	(a4)

locret_D742:				
		rts	
; ===========================================================================

loc_D744:				
		cmpi.w	#-$10,d0
		bgt.s	loc_D74E
		move.w	#-$10,d0

loc_D74E:				
		add.w	(a1),d0
		cmp.w	(a2),d0
		bgt.s	loc_D76E
		move.w	(a2),d0
		bra.s	loc_D76E
; ===========================================================================

loc_D758:				
		cmpi.w	#$10,d0
		bcs.s	loc_D762
		move.w	#$10,d0

loc_D762:				
		add.w	(a1),d0
		cmp.w	2(a2),d0
		blt.s	loc_D76E
		move.w	2(a2),d0

loc_D76E:				
		move.w	d0,d1
		sub.w	(a1),d1
		asl.w	#8,d1
		move.w	d0,(a1)
		move.w	d1,(a4)
		rts	
; End of function sub_D704


; =============== S U B	R O U T	I N E =======================================


sub_D77A:				
		moveq	#0,d1
		move.w	$C(a0),d0
		sub.w	(a1),d0
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_D78E
		andi.w	#$7FF,d0

loc_D78E:				
		btst	#2,$22(a0)
		beq.s	loc_D798
		subq.w	#5,d0

loc_D798:				
		btst	#1,$22(a0)
		beq.s	loc_D7B6
		addi.w	#$20,d0	; ' '
		sub.w	d3,d0
		bcs.s	loc_D7FC
		subi.w	#$40,d0	; '@'
		bcc.s	loc_D7FC
		tst.b	(f_boundary_bottom_change).w
		bne.s	loc_D80E
		bra.s	loc_D7C0
; ===========================================================================

loc_D7B6:				
		sub.w	d3,d0
		bne.s	loc_D7C4
		tst.b	(f_boundary_bottom_change).w
		bne.s	loc_D80E

loc_D7C0:				
		clr.w	(a4)
		rts	
; ===========================================================================

loc_D7C4:				
		cmpi.w	#$60,d3	; '`'
		bne.s	loc_D7EA
		move.w	$14(a0),d1
		bpl.s	loc_D7D2
		neg.w	d1

loc_D7D2:				
		cmpi.w	#$800,d1
		bcc.s	loc_D7FC
		move.w	#$600,d1
		cmpi.w	#6,d0
		bgt.s	loc_D84A
		cmpi.w	#-6,d0
		blt.s	loc_D824
		bra.s	loc_D814
; ===========================================================================

loc_D7EA:				
		move.w	#$200,d1
		cmpi.w	#2,d0
		bgt.s	loc_D84A
		cmpi.w	#-2,d0
		blt.s	loc_D824
		bra.s	loc_D814
; ===========================================================================

loc_D7FC:				
		move.w	#$1000,d1
		cmpi.w	#$10,d0
		bgt.s	loc_D84A
		cmpi.w	#-$10,d0
		blt.s	loc_D824
		bra.s	loc_D814
; ===========================================================================

loc_D80E:				
		moveq	#0,d0
		move.b	d0,(f_boundary_bottom_change).w

loc_D814:				
		moveq	#0,d1
		move.w	d0,d1
		add.w	(a1),d1
		tst.w	d0
		bpl.w	loc_D852
		bra.w	loc_D82E
; ===========================================================================

loc_D824:				
		neg.w	d1
		ext.l	d1
		asl.l	#8,d1
		add.l	(a1),d1
		swap	d1

loc_D82E:				
		cmp.w	4(a2),d1
		bgt.s	loc_D868
		cmpi.w	#-$100,d1
		bgt.s	loc_D844
		andi.w	#$7FF,d1
		andi.w	#$7FF,(a1)
		bra.s	loc_D868
; ===========================================================================

loc_D844:				
		move.w	4(a2),d1
		bra.s	loc_D868
; ===========================================================================

loc_D84A:				
		ext.l	d1
		asl.l	#8,d1
		add.l	(a1),d1
		swap	d1

loc_D852:				
		cmp.w	6(a2),d1
		blt.s	loc_D868
		subi.w	#$800,d1
		bcs.s	loc_D864
		subi.w	#$800,(a1)
		bra.s	loc_D868
; ===========================================================================

loc_D864:				
		move.w	6(a2),d1

loc_D868:				
		move.w	(a1),d4
		swap	d1
		move.l	d1,d3
		sub.l	(a1),d3
		ror.l	#8,d3
		move.w	d3,(a4)
		move.l	d1,(a1)
		rts	
; End of function sub_D77A


; =============== S U B	R O U T	I N E =======================================


sub_D878:				
		move.w	(a1),d0
		andi.w	#$10,d0
		move.b	(a2),d1
		eor.b	d1,d0
		bne.s	locret_D898
		eori.b	#$10,(a2)
		move.w	(a1),d0
		sub.w	d4,d0
		bpl.s	loc_D894
		bset	#0,(a3)
		rts	
; ===========================================================================

loc_D894:				
		bset	#1,(a3)

locret_D898:				
		rts	
; End of function sub_D878


; =============== S U B	R O U T	I N E =======================================


sub_D89A:				
					
		move.l	(v_bg1_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg1_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	loc_D8CE
		eori.b	#$10,(v_bg1_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_D8C8
		bset	#2,(v_bg1_redraw_direction).w
		bra.s	loc_D8CE
; ===========================================================================

loc_D8C8:				
		bset	#3,(v_bg1_redraw_direction).w

loc_D8CE:				
		move.l	(v_bg1_y_pos).w,d3
		move.l	d3,d0
		add.l	d5,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_y_redraw_flag).w,d2
		eor.b	d2,d1
		bne.s	locret_D902
		eori.b	#$10,(v_bg1_y_redraw_flag).w
		sub.l	d3,d0
		bpl.s	loc_D8FC
		bset	#0,(v_bg1_redraw_direction).w
		rts	
; ===========================================================================

loc_D8FC:				
		bset	#1,(v_bg1_redraw_direction).w

locret_D902:				
		rts	
; End of function sub_D89A


; =============== S U B	R O U T	I N E =======================================


sub_D904:				
					
		move.l	(v_bg1_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg1_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_D936
		eori.b	#$10,(v_bg1_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_D930
		bset	d6,(v_bg1_redraw_direction).w
		bra.s	locret_D936
; ===========================================================================

loc_D930:				
		addq.b	#1,d6
		bset	d6,(v_bg1_redraw_direction).w

locret_D936:				
		rts	
; End of function sub_D904


; =============== S U B	R O U T	I N E =======================================


sub_D938:				
					
		move.l	(v_bg1_y_pos).w,d3
		move.l	d3,d0
		add.l	d5,d0

loc_D940:				
					
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg1_y_redraw_flag).w,d2
		eor.b	d2,d1
		bne.s	locret_D96A
		eori.b	#$10,(v_bg1_y_redraw_flag).w
		sub.l	d3,d0
		bpl.s	loc_D964
		bset	d6,(v_bg1_redraw_direction).w
		rts	
; ===========================================================================

loc_D964:				
		addq.b	#1,d6
		bset	d6,(v_bg1_redraw_direction).w

locret_D96A:				
		rts	
; End of function sub_D938


; =============== S U B	R O U T	I N E =======================================

;sub_D96C: ;ARZ_Bg_Deformation:
;SetHorizScrollFlagsBG_ARZ:	; only used by ARZ
sub_D96C:				
		move.l	(v_camera_arz_bg_x_pos).w,d0
		add.l	d4,d0
		move.l	d0,(v_camera_arz_bg_x_pos).w
		lea	(v_bg1_x_pos).w,a1
		move.w	(a1),d2
		move.w	(v_camera_arz_bg_x_pos).w,d0
		sub.w	d2,d0
		bcs.s	loc_D988
		bhi.s	loc_D994
		rts	
; ===========================================================================

loc_D988:				
		cmpi.w	#-$10,d0
		bgt.s	loc_D99E
		move.w	#-$10,d0
		bra.s	loc_D99E
; ===========================================================================

loc_D994:				
		cmpi.w	#$10,d0
		bcs.s	loc_D99E
		move.w	#$10,d0

loc_D99E:				
		add.w	(a1),d0
		move.w	d0,(a1)
		move.w	d0,d1
		andi.w	#$10,d1
		move.b	(v_bg1_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_D9C6
		eori.b	#$10,(v_bg1_x_redraw_flag).w
		sub.w	d2,d0
		bpl.s	loc_D9C0
		bset	d6,(v_bg1_redraw_direction).w
		bra.s	locret_D9C6
; ===========================================================================

loc_D9C0:				
		addq.b	#1,d6
		bset	d6,(v_bg1_redraw_direction).w

locret_D9C6:				
		rts	
; End of function sub_D96C


; =============== S U B	R O U T	I N E =======================================


sub_D9C8:				
		move.l	(v_bg2_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg2_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg2_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_D9FA
		eori.b	#$10,(v_bg2_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_D9F4
		bset	d6,(v_bg2_redraw_direction).w
		bra.s	locret_D9FA
; ===========================================================================

loc_D9F4:				
		addq.b	#1,d6
		bset	d6,(v_bg2_redraw_direction).w

locret_D9FA:				
		rts	
; End of function sub_D9C8

; ===========================================================================
		move.l	(v_bg3_x_pos).w,d2
		move.l	d2,d0
		add.l	d4,d0
		move.l	d0,(v_bg3_x_pos).w
		move.l	d0,d1
		swap	d1
		andi.w	#$10,d1
		move.b	(v_bg3_x_redraw_flag).w,d3
		eor.b	d3,d1
		bne.s	locret_DA2E
		eori.b	#$10,(v_bg3_x_redraw_flag).w
		sub.l	d2,d0
		bpl.s	loc_DA28
		bset	d6,(v_bg3_redraw_direction).w
		bra.s	locret_DA2E
; ===========================================================================

loc_DA28:				
		addq.b	#1,d6
		bset	d6,(v_bg3_redraw_direction).w

locret_DA2E:				
					
		rts	
; ===========================================================================
		lea	(vdp_control_port).l,a5
		lea	(vdp_data_port).l,a6
		lea	(v_bg1_redraw_direction).w,a2
		lea	(v_bg1_x_pos).w,a3
		lea	($FFFF8080).w,a4
		move.w	#$6000,d2
		bsr.w	sub_DBC2
		lea	(v_bg2_redraw_direction).w,a2
		lea	(v_bg2_x_pos).w,a3
		bra.w	sub_DC92
; ===========================================================================

; loc_DA5C: LoadTilesAsYouMove:
DrawTilesWhenMoving:				
		lea	(vdp_control_port).l,a5
		lea	(vdp_data_port).l,a6
		lea	(v_bg1_redraw_direction_copy).w,a2
		lea	(v_camera_pos_bg_copy).w,a3
		lea	(v_level_layout+level_max_width).w,a4
		move.w	#$6000,d2
		bsr.w	sub_DBC2
		lea	(v_bg2_redraw_direction_copy).w,a2
		lea	(v_camera_pos_bg2_copy).w,a3
		bsr.w	sub_DC92
		lea	(v_bg3_redraw_direction_copy).w,a2
		lea	(v_camera_pos_bg3_copy).w,a3
		bsr.w	sub_DD82
		tst.w	(f_two_player).w
		beq.s	loc_DAAE
		lea	(v_fg_redraw_direction_p2_copy).w,a2
		lea	(v_camera_pos_p2_copy).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$6000,d2
		bsr.w	sub_DB5C

loc_DAAE:				
		lea	(v_fg_redraw_direction_copy).w,a2
		lea	(v_camera_pos_copy).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$4000,d2
		tst.b	(f_screen_redraw).w
		beq.s	loc_DAF6
		move.b	#0,(f_screen_redraw).w
		moveq	#-$10,d4
		moveq	#$F,d6

loc_DACE:				
		movem.l	d4-d6,-(sp)
		moveq	#-$10,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P1
		move.w	d1,d4
		moveq	#-$10,d5
		bsr.w	sub_DF92
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_DACE
		move.b	#0,(v_fg_redraw_direction_copy).w
		rts	
; ===========================================================================

loc_DAF6:				
		tst.b	(a2)
		beq.s	locret_DB5A
		bclr	#0,(a2)
		beq.s	loc_DB10
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	sub_DF92

loc_DB10:				
		bclr	#1,(a2)
		beq.s	loc_DB2A
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	sub_DF92

loc_DB2A:				
		bclr	#2,(a2)
		beq.s	loc_DB40
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	sub_DF04

loc_DB40:				
		bclr	#3,(a2)
		beq.s	locret_DB5A
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	sub_DF04

locret_DB5A:				
					
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_DB5C:				
		tst.b	(a2)
		beq.s	locret_DBC0
		bclr	#0,(a2)
		beq.s	loc_DB76
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P2
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	sub_DF92

loc_DB76:				
		bclr	#1,(a2)
		beq.s	loc_DB90
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P2
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	sub_DF92

loc_DB90:				
		bclr	#2,(a2)
		beq.s	loc_DBA6
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P2
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	sub_DF04

loc_DBA6:				
		bclr	#3,(a2)
		beq.s	locret_DBC0
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P2
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	sub_DF04

locret_DBC0:				
		rts	
; End of function sub_DB5C


; =============== S U B	R O U T	I N E =======================================


sub_DBC2:				
					
		tst.b	(a2)
		beq.w	locret_DC90
		bclr	#0,(a2)
		beq.s	loc_DBDE
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	sub_DF92

loc_DBDE:				
		bclr	#1,(a2)
		beq.s	loc_DBF8
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	sub_DF92

loc_DBF8:				
		bclr	#2,(a2)
		beq.s	loc_DC0E
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	sub_DF04

loc_DC0E:				
		bclr	#3,(a2)
		beq.s	loc_DC28
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		move.w	#$140,d5
		bsr.w	sub_DF04

loc_DC28:				
		bclr	#4,(a2)
		beq.s	loc_DC40
		moveq	#-$10,d4
		moveq	#0,d5
		bsr.w	Calc_VRAM_Pos_AbsoluteX
		moveq	#-$10,d4
		moveq	#0,d5
		moveq	#$1F,d6
		bsr.w	loc_DF96

loc_DC40:				
		bclr	#5,(a2)
		beq.s	loc_DC5C
		move.w	#$E0,d4	
		moveq	#0,d5
		bsr.w	Calc_VRAM_Pos_AbsoluteX
		move.w	#$E0,d4	
		moveq	#0,d5
		moveq	#$1F,d6
		bsr.w	loc_DF96

loc_DC5C:				
		bclr	#6,(a2)
		beq.s	loc_DC74
		moveq	#-$10,d4
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		moveq	#-$10,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A

loc_DC74:				
		bclr	#7,(a2)
		beq.s	locret_DC90
		move.w	#$E0,d4	
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$E0,d4	
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A

locret_DC90:				
		rts	
; End of function sub_DBC2


; =============== S U B	R O U T	I N E =======================================


sub_DC92:				
					
		tst.b	(a2)
		beq.w	locret_DCD4
		bclr	#0,(a2)
		beq.s	loc_DCB4
		move.w	#$70,d4	; 'p'
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$70,d4	; 'p'
		moveq	#-$10,d5
		moveq	#2,d6
		bsr.w	loc_DF06

loc_DCB4:				
		bclr	#1,(a2)
		beq.s	locret_DCD4
		move.w	#$70,d4	; 'p'
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$70,d4	; 'p'
		move.w	#$140,d5
		moveq	#2,d6
		bsr.w	loc_DF06

locret_DCD4:				
		rts	
; End of function sub_DC92

; ===========================================================================
byte_DCD6:	dc.b   0		; 0 
byte_DCD7:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   6		; 4
		dc.b   6		; 5
		dc.b   6		; 6
		dc.b   6		; 7
		dc.b   6		; 8
		dc.b   6		; 9
		dc.b   6		; 10
		dc.b   6		; 11
		dc.b   6		; 12
		dc.b   6		; 13
		dc.b   4		; 14
		dc.b   4		; 15
		dc.b   4		; 16
		dc.b   4		; 17
		dc.b   4		; 18
		dc.b   4		; 19
		dc.b   4		; 20
		dc.b   2		; 21
		dc.b   2		; 22
		dc.b   2		; 23
		dc.b   2		; 24
		dc.b   2		; 25
		dc.b   2		; 26
		dc.b   2		; 27
		dc.b   2		; 28
		dc.b   2		; 29
		dc.b   2		; 30
		dc.b   2		; 31
		dc.b   0		; 32
; ===========================================================================
		moveq	#-$10,d4
		bclr	#0,(a2)
		bne.s	loc_DD0A
		bclr	#1,(a2)
		beq.s	loc_DD52
		move.w	#$E0,d4	

loc_DD0A:				
		lea	(byte_DCD7)(pc),a0
		move.w	(v_bg1_y_pos).w,d0
		add.w	d4,d0
		andi.w	#$1F0,d0
		lsr.w	#4,d0
		move.b	(a0,d0.w),d0
		lea	(word_DE7E).l,a3
		movea.w	(a3,d0.w),a3
		beq.s	loc_DD3E
		moveq	#-$10,d5
		movem.l	d4-d5,-(sp)
		bsr.w	Calc_VRAM_Pos_P1
		movem.l	(sp)+,d4-d5
		bsr.w	sub_DF92
		bra.s	loc_DD52
; ===========================================================================

loc_DD3E:				
		moveq	#0,d5
		movem.l	d4-d5,-(sp)
		bsr.w	Calc_VRAM_Pos_AbsoluteX
		movem.l	(sp)+,d4-d5
		moveq	#$1F,d6
		bsr.w	loc_DF96

loc_DD52:				
					
		tst.b	(a2)
		bne.s	loc_DD58
		rts	
; ===========================================================================

loc_DD58:				
		moveq	#-$10,d4
		moveq	#-$10,d5
		move.b	(a2),d0
		andi.b	#-$58,d0
		beq.s	loc_DD6C
		lsr.b	#1,d0
		move.b	d0,(a2)
		move.w	#$140,d5

loc_DD6C:				
		lea	(byte_DCD6)(pc),a0
		move.w	(v_bg1_y_pos).w,d0
		andi.w	#$1F0,d0
		lsr.w	#4,d0
		lea	(a0,d0.w),a0
		bra.w	loc_DE86

; =============== S U B	R O U T	I N E =======================================


sub_DD82:				
		tst.b	(a2)
		beq.w	locret_DDCE
		cmpi.b	#id_CPZ,(v_zone).w
		beq.w	loc_DE12
		bclr	#0,(a2)
		beq.s	loc_DDAE
		move.w	#$40,d4	; '@'
		moveq	#-$10,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$40,d4	; '@'
		moveq	#-$10,d5
		moveq	#2,d6
		bsr.w	loc_DF06

loc_DDAE:				
		bclr	#1,(a2)
		beq.s	locret_DDCE
		move.w	#$40,d4	; '@'
		move.w	#$140,d5
		bsr.w	Calc_VRAM_Pos_P1
		move.w	#$40,d4	; '@'
		move.w	#$140,d5
		moveq	#2,d6
		bsr.w	loc_DF06

locret_DDCE:				
		rts	
; ===========================================================================
byte_DDD0:	dc.b 2			
byte_DDD1:	dc.b   2		; 0 
					
		dc.b   2		; 1
		dc.b   2		; 2
		dc.b   2		; 3
		dc.b   2		; 4
		dc.b   2		; 5
		dc.b   2		; 6
		dc.b   2		; 7
		dc.b   2		; 8
		dc.b   2		; 9
		dc.b   2		; 10
		dc.b   2		; 11
		dc.b   2		; 12
		dc.b   2		; 13
		dc.b   2		; 14
		dc.b   2		; 15
		dc.b   2		; 16
		dc.b   2		; 17
		dc.b   2		; 18
		dc.b   4		; 19
		dc.b   4		; 20
		dc.b   4		; 21
		dc.b   4		; 22
		dc.b   4		; 23
		dc.b   4		; 24
		dc.b   4		; 25
		dc.b   4		; 26
		dc.b   4		; 27
		dc.b   4		; 28
		dc.b   4		; 29
		dc.b   4		; 30
		dc.b   4		; 31
		dc.b   4		; 32
		dc.b   4		; 33
		dc.b   4		; 34
		dc.b   4		; 35
		dc.b   4		; 36
		dc.b   4		; 37
		dc.b   4		; 38
		dc.b   4		; 39
		dc.b   4		; 40
		dc.b   4		; 41
		dc.b   4		; 42
		dc.b   4		; 43
		dc.b   4		; 44
		dc.b   4		; 0
		dc.b   4		; 1
		dc.b   4		; 2
		dc.b   4		; 3
		dc.b   4		; 4
		dc.b   4		; 5
		dc.b   4		; 6
		dc.b   4		; 7
		dc.b   4		; 8
		dc.b   4		; 9
		dc.b   4		; 10
		dc.b   4		; 11
		dc.b   4		; 12
		dc.b   4		; 13
		dc.b   4		; 14
		dc.b   4		; 15
		dc.b   4		; 16
		dc.b   4		; 17
		dc.b   4		; 18
		dc.b   0		; 19
; ===========================================================================

loc_DE12:				
		moveq	#-$10,d4
		bclr	#0,(a2)
		bne.s	loc_DE24
		bclr	#1,(a2)
		beq.s	loc_DE4E
		move.w	#$E0,d4	

loc_DE24:				
		lea	(byte_DDD1)(pc),a0
		move.w	(v_bg1_y_pos).w,d0
		add.w	d4,d0
		andi.w	#$3F0,d0
		lsr.w	#4,d0
		move.b	(a0,d0.w),d0
		movea.w	word_DE7E(pc,d0.w),a3
		moveq	#-$10,d5
		movem.l	d4-d5,-(sp)
		bsr.w	Calc_VRAM_Pos_P1
		movem.l	(sp)+,d4-d5
		bsr.w	sub_DF92

loc_DE4E:				
		tst.b	(a2)
		bne.s	loc_DE54
		rts	
; ===========================================================================

loc_DE54:				
		moveq	#-$10,d4
		moveq	#-$10,d5
		move.b	(a2),d0
		andi.b	#-$58,d0
		beq.s	loc_DE68
		lsr.b	#1,d0
		move.b	d0,(a2)
		move.w	#$140,d5

loc_DE68:				
		lea	(byte_DDD0)(pc),a0
		move.w	(v_bg1_y_pos).w,d0
		andi.w	#$7F0,d0
		lsr.w	#4,d0
		lea	(a0,d0.w),a0
		bra.w	loc_DE86
; ===========================================================================
word_DE7E:	dc.w $EE68		; 0 
		dc.w $EE68		; 1
		dc.w $EE70		; 2
		dc.w $EE78		; 3
; ===========================================================================

loc_DE86:				
					
		tst.w	(f_two_player).w
		bne.s	loc_DEC8
		moveq	#$F,d6
		move.l	#$800000,d7

loc_DE94:				
		moveq	#0,d0
		move.b	(a0)+,d0
		btst	d0,(a2)
		beq.s	loc_DEBC
		movea.w	word_DE7E(pc,d0.w),a3
		movem.l	d4-d5/a0,-(sp)
		movem.l	d4-d5,-(sp)
		bsr.w	sub_E244
		movem.l	(sp)+,d4-d5
		bsr.w	Calc_VRAM_Pos_P1
		bsr.w	sub_E174
		movem.l	(sp)+,d4-d5/a0

loc_DEBC:				
		addi.w	#$10,d4
		dbf	d6,loc_DE94
		clr.b	(a2)
		rts	
; ===========================================================================

loc_DEC8:				
		moveq	#$F,d6
		move.l	#$800000,d7

loc_DED0:				
		moveq	#0,d0
		move.b	(a0)+,d0
		btst	d0,(a2)
		beq.s	loc_DEF8
		movea.w	word_DE7E(pc,d0.w),a3
		movem.l	d4-d5/a0,-(sp)
		movem.l	d4-d5,-(sp)
		bsr.w	sub_E244
		movem.l	(sp)+,d4-d5
		bsr.w	Calc_VRAM_Pos_P1
		bsr.w	sub_E1FA
		movem.l	(sp)+,d4-d5/a0

loc_DEF8:				
		addi.w	#$10,d4

loc_DEFC:
		dbf	d6,loc_DED0
		clr.b	(a2)
		rts	
; End of function sub_DD82


; =============== S U B	R O U T	I N E =======================================


sub_DF04:				
					
		moveq	#$F,d6

loc_DF06:				
		add.w	(a3),d5
		add.w	4(a3),d4
		move.l	#$800000,d7
		move.l	d0,d1
		bsr.w	sub_E09E
		tst.w	(f_two_player).w
		bne.s	loc_DF54

loc_DF1E:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		move.l	d1,d0
		bsr.w	sub_E174
		adda.w	#$10,a0
		addi.w	#$100,d1
		andi.w	#$FFF,d1
		addi.w	#$10,d4
		move.w	d4,d0
		andi.w	#$70,d0	; 'p'
		bne.s	VBlank_MenuE
		bsr.w	sub_E09E

VBlank_MenuE:				
		dbf	d6,loc_DF1E
		rts	
; ===========================================================================

loc_DF54:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		move.l	d1,d0
		bsr.w	sub_E1FA
		adda.w	#$10,a0
		addi.w	#$80,d1	
		andi.w	#$FFF,d1
		addi.w	#$10,d4
		move.w	d4,d0
		andi.w	#$70,d0	; 'p'
		bne.s	loc_DF84
		bsr.w	sub_E09E

loc_DF84:				
		dbf	d6,loc_DF54
		rts	
; End of function sub_DF04


; =============== S U B	R O U T	I N E =======================================


sub_DF8A:				
		add.w	(a3),d5
		add.w	4(a3),d4
		bra.s	loc_DF9A
; End of function sub_DF8A


; =============== S U B	R O U T	I N E =======================================


sub_DF92:				
					
		moveq	#$15,d6
		add.w	(a3),d5

loc_DF96:				
		add.w	4(a3),d4

loc_DF9A:				
		tst.w	(f_two_player).w
		bne.s	loc_E018
		move.l	a2,-(sp)
		move.w	d6,-(sp)
		lea	(v_block_cache).w,a2
		move.l	d0,d1
		or.w	d2,d1
		swap	d1
		move.l	d1,-(sp)
		move.l	d1,(a5)
		swap	d1
		bsr.w	sub_E09E

loc_DFB8:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		bsr.w	sub_E0D4
		addq.w	#2,a0
		addq.b	#4,d1
		bpl.s	loc_DFDA
		andi.b	#$7F,d1	; ''
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_DFDA:				
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0	; 'p'
		bne.s	loc_DFEA
		bsr.w	sub_E09E

loc_DFEA:				
		dbf	d6,loc_DFB8
		move.l	(sp)+,d1
		addi.l	#$800000,d1
		lea	(v_block_cache).w,a2
		move.l	d1,(a5)
		swap	d1
		move.w	(sp)+,d6

loc_E000:				
		move.l	(a2)+,(a6)
		addq.b	#4,d1
		bmi.s	loc_E010
		ori.b	#-$80,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_E010:				
		dbf	d6,loc_E000
		movea.l	(sp)+,a2
		rts	
; ===========================================================================

loc_E018:				
		move.l	d0,d1
		or.w	d2,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1
		tst.b	d1
		bmi.s	loc_E062
		bsr.w	sub_E09E

loc_E02A:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		bsr.w	sub_E136
		addq.w	#2,a0
		addq.b	#4,d1
		bpl.s	loc_E04C
		andi.b	#$7F,d1	; ''
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_E04C:				
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0	; 'p'
		bne.s	loc_E05C
		bsr.w	sub_E09E

loc_E05C:				
		dbf	d6,loc_E02A
		rts	
; ===========================================================================

loc_E062:				
		bsr.w	sub_E09E

loc_E066:				
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		lea	(v_16x16_tiles).w,a1
		adda.w	d3,a1
		bsr.w	sub_E136
		addq.w	#2,a0
		addq.b	#4,d1
		bmi.s	loc_E088
		ori.b	#-$80,d1
		swap	d1
		move.l	d1,(a5)
		swap	d1

loc_E088:				
		addi.w	#$10,d5
		move.w	d5,d0
		andi.w	#$70,d0	; 'p'
		bne.s	loc_E098
		bsr.w	sub_E09E

loc_E098:				
		dbf	d6,loc_E066
		rts	
; End of function sub_DF92


; =============== S U B	R O U T	I N E =======================================


sub_E09E:				
		movem.l	d4-d5,-(sp)
		move.w	d4,d3
		add.w	d3,d3
		andi.w	#$F00,d3
		lsr.w	#3,d5
		move.w	d5,d0
		lsr.w	#4,d0
		andi.w	#$7F,d0	; ''
		add.w	d3,d0
		moveq	#-1,d3
		clr.w	d3
		move.b	(a4,d0.w),d3
		lsl.w	#7,d3
		andi.w	#$70,d4	; 'p'
		andi.w	#$E,d5
		add.w	d4,d3
		add.w	d5,d3
		movea.l	d3,a0
		movem.l	(sp)+,d4-d5
		rts	
; End of function sub_E09E


; =============== S U B	R O U T	I N E =======================================


sub_E0D4:				
		btst	#3,(a0)
		bne.s	loc_E100
		btst	#2,(a0)
		bne.s	loc_E0E6
		move.l	(a1)+,(a6)
		move.l	(a1)+,(a2)+
		rts	
; ===========================================================================

loc_E0E6:				
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a2)+
		rts	
; ===========================================================================

loc_E100:				
		btst	#2,(a0)
		bne.s	loc_E11C
		move.l	(a1)+,d0
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		eori.l	#$10001000,d0
		move.l	d0,(a2)+
		rts	
; ===========================================================================

loc_E11C:				
		move.l	(a1)+,d0
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		eori.l	#$18001800,d0
		swap	d0
		move.l	d0,(a2)+
		rts	
; End of function sub_E0D4


; =============== S U B	R O U T	I N E =======================================


sub_E136:				
		btst	#3,(a0)
		bne.s	loc_E154
		btst	#2,(a0)
		bne.s	loc_E146
		move.l	(a1)+,(a6)
		rts	
; ===========================================================================

loc_E146:				
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E154:				
		btst	#2,(a0)
		bne.s	loc_E166
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E166:				
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; End of function sub_E136


; =============== S U B	R O U T	I N E =======================================


sub_E174:				
					
		or.w	d2,d0
		swap	d0
		btst	#3,(a0)
		bne.s	loc_E1B0
		btst	#2,(a0)
		bne.s	loc_E190
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		rts	
; ===========================================================================

loc_E190:				
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E1B0:				
		btst	#2,(a0)
		bne.s	loc_E1D6
		move.l	d5,-(sp)
		move.l	d0,(a5)
		move.l	(a1)+,d5
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		eori.l	#$10001000,d5
		move.l	d5,(a6)
		move.l	(sp)+,d5
		rts	
; ===========================================================================

loc_E1D6:				
		move.l	d5,-(sp)
		move.l	d0,(a5)
		move.l	(a1)+,d5
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		add.l	d7,d0
		move.l	d0,(a5)
		eori.l	#$18001800,d5
		swap	d5
		move.l	d5,(a6)
		move.l	(sp)+,d5
		rts	
; End of function sub_E174


; =============== S U B	R O U T	I N E =======================================


sub_E1FA:				
					
		or.w	d2,d0
		swap	d0
		btst	#3,(a0)
		bne.s	loc_E220
		btst	#2,(a0)
		bne.s	loc_E210
		move.l	d0,(a5)
		move.l	(a1)+,(a6)
		rts	
; ===========================================================================

loc_E210:				
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$8000800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E220:				
		btst	#2,(a0)
		bne.s	loc_E234
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$10001000,d3
		move.l	d3,(a6)
		rts	
; ===========================================================================

loc_E234:				
		move.l	d0,(a5)
		move.l	(a1)+,d3
		eori.l	#$18001800,d3
		swap	d3
		move.l	d3,(a6)
		rts	
; End of function sub_E1FA


; =============== S U B	R O U T	I N E =======================================


sub_E244:				
					
		add.w	(a3),d5
		add.w	4(a3),d4
		lea	(v_16x16_tiles).w,a1
		move.w	d4,d3
		add.w	d3,d3
		andi.w	#$F00,d3
		lsr.w	#3,d5
		move.w	d5,d0
		lsr.w	#4,d0
		andi.w	#$7F,d0	; ''
		add.w	d3,d0
		moveq	#-1,d3
		clr.w	d3
		move.b	(a4,d0.w),d3
		lsl.w	#7,d3
		andi.w	#$70,d4	; 'p'
		andi.w	#$E,d5
		add.w	d4,d3
		add.w	d5,d3
		movea.l	d3,a0
		move.w	(a0),d3
		andi.w	#$3FF,d3
		lsl.w	#3,d3
		adda.w	d3,a1
		rts	
; End of function sub_E244


; =============== S U B	R O U T	I N E =======================================

; sub_E286: Calc_VRAM_Pos: CalcBlockVRAMPos: CalculateVRAMAddressOfBlockForPlayer1:
Calc_VRAM_Pos_P1:									
		add.w	(a3),d5

	; CalcBlockVRAMPos2:
	Calc_VRAM_Pos_AbsoluteX:				
		tst.w	(f_two_player).w						; is it two-player mode?
		bne.s	Calc_VRAM_Pos_AbsoluteX_DoubleResolution	; if so, use the double resolution branch
		add.w	4(a3),d4	; add camera y pos

	; CalcBlockVRAMPos_NoCamera: CalculateVRAMAddressOfBlockForPlayer1.AbsoluteXAbsoluteY:		
	Calc_VRAM_Pos_AbsoluteX_AbsoluteY:	
		andi.w	#$F0,d4	
		andi.w	#$1F0,d5
		lsl.w	#4,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#3,d0
		swap	d0
		move.w	d4,d0
		rts	
; ===========================================================================
	; loc_E2A8: CalcBlockVRAMPos_2P:
	; CalculateVRAMAddressOfBlockForPlayer1.AbsoluteX_DoubleResolution
	Calc_VRAM_Pos_AbsoluteX_DoubleResolution:				
		add.w	4(a3),d4

	; loc_E2AC: CalcBlockVRAMPos_2P_NoCamera: 
	; CalculateVRAMAddressOfBlockForPlayer1.AbsoluteXAbsoluteY_DoubleResolution
	Calc_VRAM_Pos_AbsoluteX_AbsoluteY_DoubleResolution:				
		andi.w	#$1F0,d4
		andi.w	#$1F0,d5
		lsl.w	#3,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#3,d0
		swap	d0
		move.w	d4,d0
		rts	

; =============== S U B	R O U T	I N E =======================================

;loc_E2C2: CalcBlockVRAMPosB: CalculateVRAMAddressOfBlockForPlayer2:
Calc_VRAM_Pos_P2:					
		tst.w	(f_two_player).w
		bne.s	.double_resolution
		
	;.regular_resolution:	
		add.w	4(a3),d4
		add.w	(a3),d5
		andi.w	#$F0,d4
		andi.w	#$1F0,d5
		lsl.w	#4,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#2,d0
		swap	d0
		move.w	d4,d0
		rts	
; ===========================================================================

	.double_resolution:
		add.w	4(a3),d4
		add.w	(a3),d5
		andi.w	#$1F0,d4
		andi.w	#$1F0,d5
		lsl.w	#3,d4
		lsr.w	#2,d5
		add.w	d5,d4
		moveq	#2,d0
		swap	d0
		move.w	d4,d0
		rts	

; ===========================================================================

;loc_E300: DrawInitialBG:
DrawTilesAtStart:				
		lea	(vdp_control_port).l,a5
		lea	(vdp_data_port).l,a6
		lea	(v_bg1_x_pos).w,a3
		lea	(v_level_layout+level_max_width).w,a4
		move.w	#$6000,d2
		
;	if FixBugs
	; The purpose of this function is to dynamically load a portion of
	; the background, based on where the BG camera is pointing. This
	; makes plenty of sense for levels that dynamically load their
	; background to Plane B. However, not all levels do this: some 
	; (namely, EHZ, CNZ, and HTZ) are content with just loading their entire 
	; (small) background to Plane B and leaving it there, untouched.
	; Unfortunately, that does not mesh well with this function: if the
	; camera is too high or too low, then only part of the background
	; will be properly loaded. This bug most visibly manifests itself in
	; Casino Night Zone Act 1, where the background abruptly cuts off at
	; the bottom.
	; To work around this, an ugly hack was added, to cause the function
	; to load a portion of the background 16 pixels lower than normal.
	; However, this hack applies to both Act 1 AND Act 2, resulting in
	; Act 2's background being cut off at the top.
	; Sonic 3 & Knuckles fixed this problem for good by giving each zone
	; its own background initialisation function (see 'LevelSetup' in the
	; Sonic & Knuckles Git disassembly). This fix by Clownancy doesn't go quite that far,
	; but it does give these 'static' backgrounds their own
	; initialisation logic, much like two player Mystic Cave Zone does.
;		move.b	(v_zone).w,d0
;		cmpi.b	#emerald_hill_zone,d0
;		beq.w	DrawInitialBG_LoadWholeBackground_512x256
;		cmpi.b	#casino_night_zone,d0
;		beq.w	DrawInitialBG_LoadWholeBackground_512x256
;		cmpi.b	#hill_top_zone,d0
;		beq.w	DrawInitialBG_LoadWholeBackground_512x256
;	else
	; This is a nasty hack to work around the bug described above.
		moveq	#0,d4
		cmpi.b	#$C,(v_zone).w 	; is it CNZ?
		beq.w	DrawTilesAtStart_Dynamic		; if it is, branch 
;	endc	
		tst.w	(f_two_player).w 		; is it two-player mode?
		beq.w	loc_E336			; if not, branch
		cmpi.b	#$B,(v_zone).w	; is it MCZ 2P?
		beq.w	loc_E396			; if it is, branch

	loc_E336:				
		moveq	#-$10,d4	; draw from 16px above top of screen (skipped by CNZ)

DrawTilesAtStart_Dynamic:				
		moveq	#((224+16+16)/16)-1,d6  ; draw entire height of screen; height of plane in blocks minus 1

	.loop:				
		pushr	d4-d6
		moveq	#0,d5 					; draw from left edge of screen
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P1
		move.w	d1,d4
		moveq	#0,d5
		moveq	#(512/16)-1,d6 			; draw full row; width of plane in blocks minus 1.
		disable_ints
		bsr.w	sub_DF8A
		enable_ints
		popr	d4-d6
		addi.w	#16,d4
		dbf	d6,.loop
		rts	
; ===========================================================================
	; Dead code for initialising the second player's portion of Plane B.
	; I wonder why this is unused?
		moveq	#-$10,d4
		moveq	#$F,d6

	.loopp2:				
		movem.l	d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P2
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
		disable_ints
		bsr.w	sub_DF8A
		enable_ints
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,.loopp2
		rts	
; ===========================================================================

loc_E396:				
		moveq	#0,d4
		moveq	#$1F,d6

loc_E39A:				
		movem.l	d4-d6,-(sp)
		moveq	#0,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_AbsoluteX_AbsoluteY_DoubleResolution
		move.w	d1,d4
		moveq	#0,d5
		moveq	#$1F,d6
	disable_ints
		bsr.w	loc_DF9A
		move	#$2300,sr
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_E39A
		rts	
; ===========================================================================

LevelBlockMapsLoad:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(LevelHeaders).l,a2
		lea	(a2,d0.w),a2
		move.l	a2,-(sp)
		addq.w	#4,a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		movea.l	d0,a0
		lea	(v_16x16_tiles).w,a1
		bsr.w	j_KosDec
		cmpi.b	#7,(v_zone).w
		bne.s	loc_E40C
		lea	($FFFF9980).w,a1
		lea	(BM16_HTZ).l,a0
		bsr.w	j_KosDec

loc_E40C:				
		tst.w	(f_two_player).w
		beq.s	loc_E430
		lea	(v_16x16_tiles).w,a1
		move.w	#$BFF,d2

loc_E41A:				
		move.w	(a1),d0
		move.w	d0,d1
		andi.w	#-$800,d0
		andi.w	#$7FF,d1
		lsr.w	#1,d1
		or.w	d1,d0
		move.w	d0,(a1)+
		dbf	d2,loc_E41A

loc_E430:				
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		movea.l	d0,a0
		lea	(v_128x128_tiles).l,a1
		bsr.w	j_KosDec
		bsr.w	sub_E462
		movea.l	(sp)+,a2
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	loc_E456
		bsr.w	sub_E5C2

loc_E456:				
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		bsr.w	sub_E5BC
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_E462:				
		moveq	#0,d0
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(LevelIndex).l,a0
		move.w	(a0,d0.w),d0
		lea	(a0,d0.l),a0
		lea	(v_level_layout).w,a1
		bra.w	j_KosDec

; ===========================================================================
		lea	(v_level_layout).w,a3
		move.w	#$3FF,d1
		moveq	#0,d0

loc_E48C:				
		move.l	d0,(a3)+
		dbf	d1,loc_E48C
		lea	(v_level_layout).w,a3
		moveq	#0,d1
		bsr.w	sub_E4A2
		lea	($FFFF8080).w,a3
		moveq	#2,d1

; =============== S U B	R O U T	I N E =======================================


sub_E4A2:				
		moveq	#0,d0
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		add.w	d1,d0
		lea	(LevelIndex).l,a1
		move.w	(a1,d0.w),d0
		lea	(a1,d0.l),a1
		moveq	#0,d1
		move.w	d1,d2
		move.b	(a1)+,d1
		move.b	(a1)+,d2
		move.l	d1,d5
		addq.l	#1,d5
		moveq	#0,d3
		move.w	#$80,d3	
		divu.w	d5,d3
		subq.w	#1,d3

loc_E4D2:				
		movea.l	a3,a0
		move.w	d3,d4

loc_E4D6:				
		move.l	a1,-(sp)
		move.w	d1,d0

loc_E4DA:				
		move.b	(a1)+,(a0)+
		dbf	d0,loc_E4DA
		movea.l	(sp)+,a1
		dbf	d4,loc_E4D6
		lea	(a1,d5.w),a1
		lea	$100(a3),a3
		dbf	d2,loc_E4D2
		rts	
; End of function sub_E4A2

; ===========================================================================
		lea	($FE0000).l,a1
		lea	($FE0080).l,a2
		lea	(v_128x128_tiles).l,a3
		move.w	#$3F,d1	; '?'

loc_E50A:				
		bsr.w	sub_E59C
		bsr.w	sub_E59C
		dbf	d1,loc_E50A
		lea	($FE0000).l,a1
		lea	($FF0000).l,a2
		move.w	#$3F,d1	; '?'

loc_E526:				
		move.w	#0,(a2)+
		dbf	d1,loc_E526
		move.w	#$3FBF,d1

loc_E532:				
		move.w	(a1)+,(a2)+
		dbf	d1,loc_E532
		rts	
; ===========================================================================
		lea	($FE0000).l,a1
		lea	(v_128x128_tiles).l,a3
		moveq	#$1F,d0

loc_E548:				
		move.l	(a1)+,(a3)+
		dbf	d0,loc_E548
		moveq	#0,d7
		lea	($FE0000).l,a1
		move.w	#$FF,d5

loc_E55A:				
					
		lea	(v_128x128_tiles).l,a3
		move.w	d7,d6

loc_E562:				
		movem.l	a1-a3,-(sp)
		move.w	#$3F,d0	; '?'

loc_E56A:				
		cmpm.w	(a1)+,(a3)+
		bne.s	loc_E580
		dbf	d0,loc_E56A
		movem.l	(sp)+,a1-a3
		adda.w	#$80,a1	
		dbf	d5,loc_E55A
		bra.s	loc_E59A
; ===========================================================================

loc_E580:				
		movem.l	(sp)+,a1-a3
		adda.w	#$80,a3	
		dbf	d6,loc_E562
		moveq	#$1F,d0

loc_E58E:				
		move.l	(a1)+,(a3)+
		dbf	d0,loc_E58E
		addq.l	#1,d7
		dbf	d5,loc_E55A

loc_E59A:				
					
		bra.s	loc_E59A

; =============== S U B	R O U T	I N E =======================================


sub_E59C:				
					
		moveq	#7,d0

loc_E59E:				
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a1)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		move.l	(a3)+,(a2)+
		dbf	d0,loc_E59E
		adda.w	#$80,a1	
		adda.w	#$80,a2	
		rts	
; End of function sub_E59C


; =============== S U B	R O U T	I N E =======================================


sub_E5BC:				
		jmp	(PalLoad_Now).l
; End of function sub_E5BC


; =============== S U B	R O U T	I N E =======================================


sub_E5C2:				
		jmp	(AddPLC).l
; End of function sub_E5C2


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

j_KosDec:				
					
		jmp	(KosDec).l
; End of function j_KosDec

; ===========================================================================
		dc.w 0

; =============== S U B	R O U T	I N E =======================================


sub_E5D0:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		move.w	off_E636(pc,d0.w),d0
		jsr	off_E636(pc,d0.w)
		moveq	#2,d1
		move.w	(v_boundary_bottom_next).w,d0
		sub.w	(v_boundary_bottom).w,d0
		beq.s	locret_E60E
		bcc.s	loc_E610
		neg.w	d1
		move.w	(v_camera_y_pos).w,d0
		cmp.w	(v_boundary_bottom_next).w,d0
		bls.s	loc_E604
		move.w	d0,(v_boundary_bottom).w
		andi.w	#-2,(v_boundary_bottom).w

loc_E604:				
		add.w	d1,(v_boundary_bottom).w
		move.b	#1,(f_boundary_bottom_change).w

locret_E60E:				
		rts	
; ===========================================================================

loc_E610:				
		move.w	(v_camera_y_pos).w,d0
		addi.w	#8,d0
		cmp.w	(v_boundary_bottom).w,d0
		bcs.s	loc_E62A
		btst	#1,($FFFFB022).w
		beq.s	loc_E62A
		add.w	d1,d1
		add.w	d1,d1

loc_E62A:				
		add.w	d1,(v_boundary_bottom).w
		move.b	#1,(f_boundary_bottom_change).w
		rts	
; End of function sub_E5D0

; ===========================================================================
off_E636:	dc.w loc_E658-off_E636	; 0 
					
		dc.w locret_E752-off_E636; 1
		dc.w locret_E754-off_E636; 2
		dc.w locret_E756-off_E636; 3
		dc.w locret_E758-off_E636; 4
		dc.w loc_E75A-off_E636	; 5
		dc.w loc_E842-off_E636	; 6
		dc.w loc_E986-off_E636	; 7
		dc.w locret_F05A-off_E636; 8
		dc.w locret_F05C-off_E636; 9
		dc.w loc_F05E-off_E636	; 10
		dc.w loc_F13E-off_E636	; 11
		dc.w loc_F26A-off_E636	; 12
		dc.w loc_F378-off_E636	; 13
		dc.w loc_F446-off_E636	; 14
		dc.w loc_F4D0-off_E636	; 15
		dc.w loc_F59E-off_E636	; 16
; ===========================================================================

loc_E658:				
		tst.b	(v_act).w
		bne.s	loc_E660
		rts	
; ===========================================================================

loc_E660:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E66E(pc,d0.w),d0
		jmp	off_E66E(pc,d0.w)
; ===========================================================================
off_E66E:	dc.w loc_E676-off_E66E	; 0 
					
		dc.w loc_E6B0-off_E66E	; 1
		dc.w loc_E6EE-off_E66E	; 2
		dc.w loc_E738-off_E66E	; 3
; ===========================================================================

loc_E676:				
		tst.w	(f_two_player).w
		bne.s	loc_E6A2
		cmpi.w	#$2780,(v_camera_x_pos).w
		bcs.s	locret_E6A0
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$390,(v_boundary_bottom_next).w
		move.w	#$390,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_E6A0:				
		rts	
; ===========================================================================

loc_E6A2:				
		move.w	#$2920,(v_boundary_right_next).w
		move.w	#$2920,(v_boundary_right_next_p2).w
		rts	
; ===========================================================================

loc_E6B0:				
		cmpi.w	#$28F0,(v_camera_x_pos).w
		bcs.s	locret_E6EC
		move.w	#$28F0,(v_boundary_left_next).w
		move.w	#$2940,(v_boundary_right_next).w
		move.w	#$28F0,(v_boundary_left_next_p2).w
		move.w	#$2940,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.b	#2,(v_current_boss).w
		moveq	#$29,d0	; ')'
		bsr.w	sub_F65E

locret_E6EC:				
		rts	
; ===========================================================================

loc_E6EE:				
		cmpi.w	#$388,(v_camera_y_pos).w
		bcs.s	loc_E702
		move.w	#$388,(v_boundary_top_next).w
		move.w	#$388,(v_boundary_top_next_p2).w

loc_E702:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_E736
		bsr.w	sub_F64C
		bne.s	loc_E72A
		move.b	#$56,(a1) ; 'V'
		move.b	#-$7F,$28(a1)
		move.w	#$29D0,8(a1)
		move.w	#$426,$C(a1)

loc_E72A:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_E736:				
		rts	
; ===========================================================================

loc_E738:				
		tst.b	(v_boss_status).w
		beq.s	locret_E750
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w

locret_E750:				
		rts	
; ===========================================================================

locret_E752:				
		rts	
; ===========================================================================

locret_E754:				
		rts	
; ===========================================================================

locret_E756:				
		rts	
; ===========================================================================

locret_E758:				
		rts	
; ===========================================================================

loc_E75A:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E768(pc,d0.w),d0
		jmp	off_E768(pc,d0.w)
; ===========================================================================
off_E768:	dc.w loc_E772-off_E768	; 0 
					
		dc.w loc_E792-off_E768	; 1
		dc.w loc_E7B8-off_E768	; 2
		dc.w loc_E7F6-off_E768	; 3
		dc.w loc_E82E-off_E768	; 4
; ===========================================================================

loc_E772:				
		cmpi.w	#$2530,(v_camera_x_pos).w
		bcs.s	locret_E790
		move.w	#$500,(v_boundary_bottom).w
		move.w	#$450,(v_boundary_bottom_next).w
		move.w	#$450,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_E790:				
		rts	
; ===========================================================================

loc_E792:				
		cmpi.w	#$2980,(v_camera_x_pos).w
		bcs.s	locret_E7B6
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$400,(v_boundary_bottom_next).w
		move.w	#$400,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_E7B6:				
		rts	
; ===========================================================================

loc_E7B8:				
		cmpi.w	#$2A80,(v_camera_x_pos).w
		bcs.s	locret_E7F4
		move.w	#$2AB0,(v_boundary_left_next).w
		move.w	#$2AB0,(v_boundary_right_next).w
		move.w	#$2AB0,(v_boundary_left_next_p2).w
		move.w	#$2AB0,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.b	#7,(v_current_boss).w
		moveq	#$2E,d0	; '.'
		bsr.w	sub_F65E

locret_E7F4:				
		rts	
; ===========================================================================

loc_E7F6:				
		cmpi.w	#$400,(v_camera_y_pos).w
		bcs.s	loc_E80A
		move.w	#$400,(v_boundary_top_next).w
		move.w	#$400,(v_boundary_top_next_p2).w

loc_E80A:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_E82C
		bsr.w	sub_F64C
		bne.s	loc_E820
		move.b	#$54,(a1) ; 'T'

loc_E820:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_E82C:				
		rts	
; ===========================================================================

loc_E82E:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_E842:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E862(pc,d0.w),d0
		jsr	off_E862(pc,d0.w)
		move.w	($FFFFF660).w,d0
		move.w	off_E85C(pc,d0.w),d0
		jmp	off_E85C(pc,d0.w)
; ===========================================================================
off_E85C:	dc.w loc_E94A-off_E85C	; 0 
					
		dc.w loc_E96C-off_E85C	; 1
		dc.w locret_E984-off_E85C; 2
off_E862:	dc.w loc_E86A-off_E862	; 0 
					
		dc.w loc_E88E-off_E862	; 1
		dc.w loc_E8C0-off_E862	; 2
		dc.w loc_E904-off_E862	; 3
; ===========================================================================

loc_E86A:				
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	d0,(v_camera_y_pos_offset).w
		addq.b	#2,(v_dle_routine).w
		rts	
; ===========================================================================

loc_E88E:				
		cmpi.w	#$2BC0,(v_camera_x_pos).w
		bcs.s	loc_E8A8
		cmpi.w	#$580,(v_camera_y_pos).w
		bcs.s	loc_E8A8
		addq.b	#2,(v_dle_routine).w
		move.w	#0,($FFFFF662).w

loc_E8A8:				
					
		move.w	(v_camera_x_pos_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_pos_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_E8C0:				
		cmpi.w	#$800,(v_camera_x_pos_offset).w
		beq.s	loc_E8CC
		addq.w	#2,(v_camera_x_pos_offset).w

loc_E8CC:				
		cmpi.w	#$600,(v_camera_x_pos_offset).w
		blt.s	loc_E8EC
		move.w	($FFFFF662).w,d0
		moveq	#4,d1
		cmpi.w	#$840,d0
		bcc.s	loc_E8E6
		add.w	d1,d0
		move.w	d0,($FFFFF662).w

loc_E8E6:				
		lsr.w	#8,d0
		add.w	d0,(v_camera_y_pos_offset).w

loc_E8EC:				
		move.w	(v_camera_x_pos_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_pos_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_E904:				
		cmpi.w	#-$2C0,(v_camera_x_pos_offset).w
		beq.s	loc_E932
		subi.w	#2,(v_camera_x_pos_offset).w
		cmpi.w	#$1B81,(v_camera_y_pos_offset).w
		beq.s	loc_E932
		move.w	($FFFFF662).w,d0
		beq.s	loc_E92C
		moveq	#4,d1
		neg.w	d1
		add.w	d1,d0
		move.w	d0,($FFFFF662).w
		lsr.w	#8,d0

loc_E92C:				
		addq.w	#1,d0
		add.w	d0,(v_camera_y_pos_offset).w

loc_E932:				
					
		move.w	(v_camera_x_pos_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_pos_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_E94A:				
		cmpi.w	#$2880,(v_camera_x_pos).w
		bcs.s	locret_E96A
		cmpi.w	#$400,(v_camera_y_pos).w
		bcs.s	locret_E96A
		addq.w	#2,($FFFFF660).w
		moveq	#$3E,d0	; '>'
		bsr.w	sub_F65E
		move.w	#$2880,(v_boundary_left_next).w

locret_E96A:				
					
		rts	
; ===========================================================================

loc_E96C:				
		cmpi.w	#$500,(v_camera_y_pos).w
		bcs.s	locret_E982
		addq.w	#2,($FFFFF660).w
		st.b	(f_lock_controls).w
		moveq	#$3F,d0	; '?'
		bsr.w	sub_F65E

locret_E982:				
		rts	
; ===========================================================================

locret_E984:				
		rts	
; ===========================================================================

loc_E986:				
		tst.b	(v_act).w
		bne.w	loc_EBEA
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_E99C(pc,d0.w),d0
		jmp	off_E99C(pc,d0.w)
; ===========================================================================
off_E99C:	dc.w loc_E9A2-off_E99C	; 0 
					
		dc.w loc_EA0E-off_E99C	; 1
		dc.w loc_EB14-off_E99C	; 2
; ===========================================================================

loc_E9A2:				
		cmpi.w	#$400,(v_camera_y_pos).w
		bcs.s	loc_E9EA
		cmpi.w	#$1800,(v_camera_x_pos).w
		bcs.s	loc_E9EA
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$140,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		addq.b	#2,(v_dle_routine).w

locret_E9E8:				
					
		rts	
; ===========================================================================

loc_E9EA:				
					
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_E9E8
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_E9E8
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================

loc_EA0E:				
		cmpi.w	#$1978,(v_camera_x_pos).w
		bcs.w	loc_EAA0
		cmpi.w	#$1E00,(v_camera_x_pos).w
		bcs.s	loc_EA28
		move.b	#0,(f_screen_shake).w
		bra.s	loc_EAA0
; ===========================================================================

loc_EA28:				
		tst.b	(v_htz_terrain_direction).w
		bne.s	loc_EA58
		cmpi.w	#$140,(v_camera_y_pos_offset).w
		beq.s	loc_EA82
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EAA0
		addq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1	; '?'
		bne.s	loc_EAA0
		move.w	#$E1,d0	
		jsr	(PlaySound).l
		bra.s	loc_EAA0
; ===========================================================================

loc_EA58:				
		cmpi.w	#$E0,(v_camera_y_pos_offset).w
		beq.s	loc_EA82
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EAA0
		subq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1	; '?'
		bne.s	loc_EAA0
		move.w	#$E1,d0	
		jsr	(PlaySound).l
		bra.s	loc_EAA0
; ===========================================================================

loc_EA82:				
					
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_htz_terrain_delay).w
		bpl.s	loc_EAA0
		move.w	#$78,(v_htz_terrain_delay).w ; 'x'
		eori.b	#1,(v_htz_terrain_direction).w
		move.b	#1,(f_screen_shake).w

loc_EAA0:				
					
		cmpi.w	#$1800,(v_camera_x_pos).w
		bcs.s	loc_EAC8
		cmpi.w	#$1F00,(v_camera_x_pos).w
		bcc.s	loc_EAEE
		move.w	(v_camera_x_pos_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_pos_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_EAC8:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		subq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_EAEE:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_EB14:				
		cmpi.w	#$1F00,(v_camera_x_pos).w
		bcc.s	loc_EB54
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$140,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		subq.b	#2,(v_dle_routine).w

locret_EB52:				
					
		rts	
; ===========================================================================

loc_EB54:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EB52
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EB52
		move.b	#0,(f_screen_shake_htz).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_EB78:				
					
		sub.w	(v_bg1_x_pos).w,d0
		sub.w	(v_camera_x_pos_offset).w,d0
		bpl.s	loc_EB8E
		cmpi.w	#-$10,d0
		bgt.s	loc_EB8C
		move.w	#-$10,d0

loc_EB8C:				
		bra.s	loc_EB98
; ===========================================================================

loc_EB8E:				
		cmpi.w	#$10,d0
		bcs.s	loc_EB98
		move.w	#$10,d0

loc_EB98:				
		move.b	d0,(v_bg_x_pos_diff).w
		sub.w	(v_bg1_y_pos).w,d1
		sub.w	(v_camera_y_pos_offset).w,d1
		bpl.s	loc_EBB2
		cmpi.w	#-$10,d1
		bgt.s	loc_EBB0
		move.w	#-$10,d1

loc_EBB0:				
		bra.s	loc_EBBC
; ===========================================================================

loc_EBB2:				
		cmpi.w	#$10,d1
		bcs.s	loc_EBBC
		move.w	#$10,d1

loc_EBBC:				
		move.b	d1,(v_bg_y_pos_diff).w
		rts	
; End of function sub_EB78

; ===========================================================================
		btst	#0,(v_joypad2_hold_actual).w
		beq.s	loc_EBD4
		tst.w	(v_camera_y_pos_offset).w
		beq.s	loc_EBD4
		subq.w	#1,(v_camera_y_pos_offset).w

loc_EBD4:				
					
		btst	#1,(v_joypad2_hold_actual).w
		beq.s	locret_EBE8
		cmpi.w	#$700,(v_camera_y_pos_offset).w
		beq.s	locret_EBE8
		addq.w	#1,(v_camera_y_pos_offset).w

locret_EBE8:				
					
		rts	
; ===========================================================================

loc_EBEA:				
		bsr.w	sub_EF66
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_EBFC(pc,d0.w),d0
		jmp	off_EBFC(pc,d0.w)
; ===========================================================================
off_EBFC:	dc.w loc_EC0E-off_EBFC	; 0 
					
		dc.w loc_EC90-off_EBFC	; 1
		dc.w loc_ED96-off_EBFC	; 2
		dc.w loc_EDFA-off_EBFC	; 3
		dc.w loc_EEF8-off_EBFC	; 4
		dc.w loc_EF84-off_EBFC	; 5
		dc.w loc_EFAA-off_EBFC	; 6
		dc.w loc_EFE8-off_EBFC	; 7
		dc.w loc_F020-off_EBFC	; 8
; ===========================================================================

loc_EC0E:				
		cmpi.w	#$14C0,(v_camera_x_pos).w
		bcs.s	loc_EC6C
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$2C0,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		addq.b	#2,(v_dle_routine).w
		cmpi.w	#$380,(v_camera_y_pos).w
		bcs.s	locret_EC6A
		move.w	#-$680,(v_camera_x_pos_offset).w
		addi.w	#$480,(v_bg1_x_pos).w
		move.w	#$300,(v_camera_y_pos_offset).w
		addq.b	#6,(v_dle_routine).w

locret_EC6A:				
					
		rts	
; ===========================================================================

loc_EC6C:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EC6A
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EC6A
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================

loc_EC90:				
		cmpi.w	#$1678,(v_camera_x_pos).w
		bcs.w	loc_ED22
		cmpi.w	#$1A00,(v_camera_x_pos).w
		bcs.s	loc_ECAA
		move.b	#0,(f_screen_shake).w
		bra.s	loc_ED22
; ===========================================================================

loc_ECAA:				
		tst.b	(v_htz_terrain_direction).w
		bne.s	loc_ECDA
		cmpi.w	#$2C0,(v_camera_y_pos_offset).w
		beq.s	loc_ED04
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_ED22
		addq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1	; '?'
		bne.s	loc_ED22
		move.w	#$E1,d0	
		jsr	(PlaySound).l
		bra.s	loc_ED22
; ===========================================================================

loc_ECDA:				
		cmpi.w	#0,(v_camera_y_pos_offset).w
		beq.s	loc_ED04
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_ED22
		subq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1	; '?'
		bne.s	loc_ED22
		move.w	#$E1,d0	
		jsr	(PlaySound).l
		bra.s	loc_ED22
; ===========================================================================

loc_ED04:				
					
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_htz_terrain_delay).w
		bpl.s	loc_ED22
		move.w	#$78,(v_htz_terrain_delay).w ; 'x'
		eori.b	#1,(v_htz_terrain_direction).w
		move.b	#1,(f_screen_shake).w

loc_ED22:				
					
		cmpi.w	#$14C0,(v_camera_x_pos).w
		bcs.s	loc_ED4A
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_ED70
		move.w	(v_camera_x_pos_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_pos_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_ED4A:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		subq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_ED70:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_ED96:				
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_EDD6
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	d0,(v_camera_x_pos_offset).w
		move.w	#$2C0,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		subq.b	#2,(v_dle_routine).w

locret_EDD4:				
					
		rts	
; ===========================================================================

loc_EDD6:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EDD4
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EDD4
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================

loc_EDFA:				
		cmpi.w	#$15F0,(v_camera_x_pos).w
		bcs.w	loc_EE84
		cmpi.w	#$1AC0,(v_camera_x_pos).w
		bcc.s	loc_EE84
		tst.b	(v_htz_terrain_direction).w
		bne.s	loc_EE3C
		cmpi.w	#$300,(v_camera_y_pos_offset).w
		beq.s	loc_EE66
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EE84
		addq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1	; '?'
		bne.s	loc_EE84
		move.w	#$E1,d0	
		jsr	(PlaySound).l
		bra.s	loc_EE84
; ===========================================================================

loc_EE3C:				
		cmpi.w	#0,(v_camera_y_pos_offset).w
		beq.s	loc_EE66
		move.w	(v_frame_counter).w,d0
		move.w	d0,d1
		andi.w	#3,d0
		bne.s	loc_EE84
		subq.w	#1,(v_camera_y_pos_offset).w
		andi.w	#$3F,d1	; '?'
		bne.s	loc_EE84
		move.w	#$E1,d0	
		jsr	(PlaySound).l
		bra.s	loc_EE84
; ===========================================================================

loc_EE66:				
					
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_htz_terrain_delay).w
		bpl.s	loc_EE84
		move.w	#$78,(v_htz_terrain_delay).w ; 'x'
		eori.b	#1,(v_htz_terrain_direction).w
		move.b	#1,(f_screen_shake).w

loc_EE84:				
					
		cmpi.w	#$14C0,(v_camera_x_pos).w
		bcs.s	loc_EEAC
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_EED2
		move.w	(v_camera_x_pos_diff).w,(v_bg_x_pos_diff).w
		move.w	(v_camera_y_pos_diff).w,(v_bg_y_pos_diff).w
		move.w	(v_camera_x_pos).w,d0
		move.w	(v_camera_y_pos).w,d1
		bra.w	sub_EB78
; ===========================================================================

loc_EEAC:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		subq.b	#6,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_EED2:				
		move.l	#$4000000,(v_bg1_x_pos).w
		moveq	#0,d0
		move.l	d0,(v_bg1_y_pos).w
		move.l	d0,(v_camera_x_pos_offset).w
		move.b	d0,(v_htz_terrain_direction).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F8,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_EEF8:				
		cmpi.w	#$1B00,(v_camera_x_pos).w
		bcc.s	loc_EF40
		move.b	#1,(f_screen_shake_htz).w
		move.l	(v_camera_x_pos).w,(v_bg1_x_pos).w
		move.l	(v_camera_y_pos).w,(v_bg1_y_pos).w
		moveq	#0,d0
		move.w	d0,(v_bg_x_pos_diff).w
		move.w	d0,(v_bg_y_pos_diff).w
		move.w	#-$680,(v_camera_x_pos_offset).w
		addi.w	#$480,(v_bg1_x_pos).w
		move.w	#$300,(v_camera_y_pos_offset).w
		subi.w	#$100,(v_bg1_y_pos).w
		move.w	#0,(v_htz_terrain_delay).w
		subq.b	#2,(v_dle_routine).w

locret_EF3E:				
					
		rts	
; ===========================================================================

loc_EF40:				
		tst.b	(f_screen_shake_htz).w
		beq.s	locret_EF3E
		move.w	#$200,d0
		moveq	#0,d1
		move.w	d1,(v_bg_x_pos_diff).w
		move.w	d1,(v_bg_y_pos_diff).w
		bsr.w	sub_EB78
		or.w	d0,d1
		bne.s	locret_EF3E
		move.b	#0,(f_screen_shake_htz).w
		rts	
; ===========================================================================
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_EF66:				
		cmpi.w	#$2B00,(v_camera_x_pos).w
		bcs.s	locret_EF82
		cmpi.b	#$A,(v_dle_routine).w
		bge.s	locret_EF82
		move.b	#$A,(v_dle_routine).w
		move.b	#0,(f_screen_shake_htz).w

locret_EF82:				
		rts	
; End of function sub_EF66

; ===========================================================================

loc_EF84:				
		cmpi.w	#$2C50,(v_camera_x_pos).w
		bcs.s	locret_EFA8
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$480,(v_boundary_bottom_next).w
		move.w	#$480,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_EFA8:				
		rts	
; ===========================================================================

loc_EFAA:				
		cmpi.w	#$2EDF,(v_camera_x_pos).w
		bcs.s	locret_EFE6
		move.w	#$2EE0,(v_boundary_left_next).w
		move.w	#$2F5E,(v_boundary_right_next).w
		move.w	#$2EE0,(v_boundary_left_next_p2).w
		move.w	#$2F5E,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.b	#3,(v_current_boss).w
		moveq	#$2A,d0	; '*'
		bra.w	sub_F65E
; ===========================================================================

locret_EFE6:				
		rts	
; ===========================================================================

loc_EFE8:				
		cmpi.w	#$478,(v_camera_y_pos).w
		bcs.s	loc_EFFC
		move.w	#$478,(v_boundary_top_next).w
		move.w	#$478,(v_boundary_top_next_p2).w

loc_EFFC:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'

loc_F006:
		bcs.s	locret_F01E
		bsr.w	sub_F64C
		bne.s	loc_F012
		move.b	#$52,(a1) ; 'R'

loc_F012:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_F01E:				
		rts	
; ===========================================================================

loc_F020:				
		tst.b	(v_boss_status).w
		beq.s	locret_F058
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		cmpi.w	#$30E0,(v_camera_x_pos).w
		bcs.s	locret_F058
		cmpi.w	#$428,(v_boundary_top_next).w
		bcs.s	loc_F04C
		subq.w	#2,(v_boundary_top_next).w

loc_F04C:				
		cmpi.w	#$430,(v_boundary_bottom_next).w
		bcs.s	locret_F058
		subq.w	#2,(v_boundary_bottom_next).w

locret_F058:				
					
		rts	
; ===========================================================================

locret_F05A:				
		rts	
; ===========================================================================

locret_F05C:				
		rts	
; ===========================================================================

loc_F05E:				
		tst.b	(v_act).w
		bne.s	loc_F066
		rts	
; ===========================================================================

loc_F066:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F074(pc,d0.w),d0
		jmp	off_F074(pc,d0.w)
; ===========================================================================
off_F074:	dc.w loc_F07C-off_F074	; 0 
					
		dc.w loc_F0A8-off_F074	; 1
		dc.w loc_F0EC-off_F074	; 2
		dc.w loc_F124-off_F074	; 3
; ===========================================================================

loc_F07C:				
		cmpi.w	#$2668,(v_camera_x_pos).w
		bcs.s	locret_F0A6
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$2D8,($FFFFB38C).w
		move.w	#$1E0,(v_boundary_bottom_next).w
		move.w	#$1E0,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_F0A6:				
		rts	
; ===========================================================================

loc_F0A8:				
		cmpi.w	#$2880,(v_camera_x_pos).w
		bcs.s	locret_F0EA
		move.w	#$2880,(v_boundary_left_next).w
		move.w	#$28C0,(v_boundary_right_next).w
		move.w	#$2880,(v_boundary_left_next_p2).w
		move.w	#$28C0,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.b	#8,(v_current_boss).w
		moveq	#$2F,d0	; '/'
		bsr.w	sub_F65E
		moveq	#$25,d0	; '%'
		bsr.w	sub_F658

locret_F0EA:				
		rts	
; ===========================================================================

loc_F0EC:				
		cmpi.w	#$1D8,(v_camera_y_pos).w
		bcs.s	loc_F100
		move.w	#$1D8,(v_boundary_top_next).w
		move.w	#$1D8,(v_boundary_top_next_p2).w

loc_F100:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_F122
		bsr.w	sub_F64C
		bne.s	loc_F116
		move.b	#$55,(a1) ; 'U'

loc_F116:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_F122:				
		rts	
; ===========================================================================

loc_F124:				
		tst.b	(v_boss_status).w
		beq.s	locret_F13C
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w

locret_F13C:				
		rts	
; ===========================================================================

loc_F13E:				
		tst.b	(v_act).w
		bne.s	loc_F146
		rts	
; ===========================================================================

loc_F146:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F154(pc,d0.w),d0
		jmp	off_F154(pc,d0.w)
; ===========================================================================
off_F154:	dc.w loc_F15C-off_F154	; 0 
					
		dc.w loc_F196-off_F154	; 1
		dc.w loc_F206-off_F154	; 2
		dc.w loc_F23E-off_F154	; 3
; ===========================================================================

loc_F15C:				
		tst.w	(f_two_player).w
		bne.s	loc_F188
		cmpi.w	#$2080,(v_camera_x_pos).w
		bcs.s	locret_F186
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$5D0,(v_boundary_bottom_next).w
		move.w	#$5D0,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_F186:				
		rts	
; ===========================================================================

loc_F188:				
		move.w	#$2100,(v_boundary_right_next).w
		move.w	#$2100,(v_boundary_right_next_p2).w
		rts	
; ===========================================================================

loc_F196:				
		cmpi.w	#$20F0,(v_camera_x_pos).w
		bcs.s	locret_F204
		move.w	#$20F0,(v_boundary_right_next).w
		move.w	#$20F0,(v_boundary_left_next).w
		move.w	#$20F0,(v_boundary_right_next_p2).w
		move.w	#$20F0,(v_boundary_left_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.l	#$6C000002,(vdp_control_port).l
		lea	(vdp_data_port).l,a6
		lea	(Art_FallingRocks).l,a2
		moveq	#7,d0

loc_F1DE:				
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		move.l	(a2)+,(a6)
		dbf	d0,loc_F1DE
		move.b	#5,(v_current_boss).w
		moveq	#$2C,d0	; ','
		bsr.w	sub_F65E
		moveq	#$19,d0
		bsr.w	sub_F658

locret_F204:				
		rts	
; ===========================================================================

loc_F206:				
		cmpi.w	#$5C8,(v_camera_y_pos).w
		bcs.s	loc_F21A
		move.w	#$5C8,(v_boundary_top_next).w
		move.w	#$5C8,(v_boundary_top_next_p2).w

loc_F21A:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_F23C
		bsr.w	sub_F64C
		bne.s	loc_F230
		move.b	#$57,(a1) ; 'W'

loc_F230:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_F23C:				
		rts	
; ===========================================================================

loc_F23E:				
		tst.b	(f_screen_shake).w
		beq.s	loc_F256
		move.w	(v_frame_counter).w,d0
		andi.w	#$1F,d0
		bne.s	loc_F256
		move.w	#$E1,d0	
		bsr.w	sub_F652

loc_F256:				
					
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_F26A:				
		jsr	loc_2BF24
		tst.b	(v_act).w
		bne.s	loc_F278
		rts	
; ===========================================================================

loc_F278:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F286(pc,d0.w),d0
		jmp	off_F286(pc,d0.w)
; ===========================================================================
off_F286:	dc.w loc_F28E-off_F286	; 0 
					
		dc.w loc_F2CE-off_F286	; 1
		dc.w loc_F318-off_F286	; 2
		dc.w loc_F350-off_F286	; 3
; ===========================================================================

loc_F28E:				
		tst.w	(f_two_player).w
		bne.s	loc_F2C0
		cmpi.w	#$27C0,(v_camera_x_pos).w
		bcs.s	locret_F2BE
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$62E,(v_boundary_bottom_next).w
		move.w	#$62E,(v_boundary_bottom_next_p2).w
		move.b	#-7,($FFFF8C54).w
		addq.b	#2,(v_dle_routine).w

locret_F2BE:				
		rts	
; ===========================================================================

loc_F2C0:				
		move.w	#$26A0,(v_boundary_right_next).w
		move.w	#$26A0,(v_boundary_right_next_p2).w
		rts	
; ===========================================================================

loc_F2CE:				
		cmpi.w	#$2890,(v_camera_x_pos).w
		bcs.s	locret_F316
		move.b	#-7,($FFFF8C50).w
		move.w	#$2860,(v_boundary_left_next).w
		move.w	#$28E0,(v_boundary_right_next).w
		move.w	#$2860,(v_boundary_left_next_p2).w
		move.w	#$28E0,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.b	#6,(v_current_boss).w
		moveq	#$2D,d0	; '-'
		bsr.w	sub_F65E
		moveq	#$1A,d0
		bsr.w	sub_F658

locret_F316:				
		rts	
; ===========================================================================

loc_F318:				
		cmpi.w	#$4E0,(v_camera_y_pos).w
		bcs.s	loc_F32C
		move.w	#$4E0,(v_boundary_top_next).w
		move.w	#$4E0,(v_boundary_top_next_p2).w

loc_F32C:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_F34E
		bsr.w	sub_F64C
		bne.s	loc_F342
		move.b	#$51,(a1) ; 'Q'

loc_F342:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_F34E:				
		rts	
; ===========================================================================

loc_F350:				
		cmpi.w	#$2A00,(v_camera_x_pos).w
		bcs.s	locret_F376
		move.w	#$5D0,(v_boundary_bottom_next).w
		move.w	#$5D0,(v_boundary_bottom_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w

locret_F376:				
		rts	
; ===========================================================================

loc_F378:				
		tst.b	(v_act).w
		bne.s	loc_F380
		rts	
; ===========================================================================

loc_F380:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F38E(pc,d0.w),d0
		jmp	off_F38E(pc,d0.w)
; ===========================================================================
off_F38E:	dc.w loc_F396-off_F38E	; 0 
					
		dc.w loc_F3BC-off_F38E	; 1
		dc.w loc_F3FA-off_F38E	; 2
		dc.w loc_F432-off_F38E	; 3
; ===========================================================================

loc_F396:				
		cmpi.w	#$2680,(v_camera_x_pos).w
		bcs.s	locret_F3BA
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$450,(v_boundary_bottom_next).w
		move.w	#$450,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w

locret_F3BA:				
		rts	
; ===========================================================================

loc_F3BC:				
		cmpi.w	#$2A20,(v_camera_x_pos).w
		bcs.s	locret_F3F8
		move.w	#$2A20,(v_boundary_left_next).w
		move.w	#$2A20,(v_boundary_right_next).w
		move.w	#$2A20,(v_boundary_left_next_p2).w
		move.w	#$2A20,(v_boundary_right_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		move.b	#1,(v_current_boss).w
		moveq	#$28,d0	; '('
		bra.w	sub_F65E
; ===========================================================================

locret_F3F8:				
		rts	
; ===========================================================================

loc_F3FA:				
		cmpi.w	#$448,(v_camera_y_pos).w
		bcs.s	loc_F40E
		move.w	#$448,(v_boundary_top_next).w
		move.w	#$448,(v_boundary_top_next_p2).w

loc_F40E:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_F430
		bsr.w	sub_F64C
		bne.s	loc_F424
		move.b	#$5D,(a1) ; ']'

loc_F424:				
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_F430:				
		rts	
; ===========================================================================

loc_F432:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_F446:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F454(pc,d0.w),d0
		jmp	off_F454(pc,d0.w)
; ===========================================================================
off_F454:	dc.w loc_F45E-off_F454	; 0 
					
		dc.w locret_F490-off_F454; 1
		dc.w loc_F492-off_F454	; 2
		dc.w loc_F4AC-off_F454	; 3
		dc.w locret_F4CE-off_F454; 4
; ===========================================================================

loc_F45E:				
		move.w	#$140,d0
		cmp.w	(v_camera_x_pos).w,d0
		bhi.s	locret_F48E
		addq.b	#2,(v_dle_routine).w
		bsr.w	sub_F64C
		bne.s	locret_F48E
		move.b	#-$51,(a1)
		move.b	#$48,$28(a1) ; 'H'
		move.w	#$348,8(a1)
		move.w	#$A0,$C(a1)
		moveq	#$30,d0	; '0'
		bra.w	sub_F65E
; ===========================================================================

locret_F48E:				
					
		rts	
; ===========================================================================

locret_F490:				
		rts	
; ===========================================================================

loc_F492:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		cmpi.w	#$300,(v_camera_x_pos).w
		bcs.s	locret_F4AA
		addq.b	#2,(v_dle_routine).w
		moveq	#$31,d0	; '1'
		bra.w	sub_F65E
; ===========================================================================

locret_F4AA:				
		rts	
; ===========================================================================

loc_F4AC:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	#$680,d0
		cmp.w	(v_camera_x_pos).w,d0
		bhi.s	locret_F4CC
		addq.b	#2,(v_dle_routine).w
		move.w	d0,(v_boundary_left_next).w
		addi.w	#$C0,d0	
		move.w	d0,(v_boundary_right_next).w

locret_F4CC:				
		rts	
; ===========================================================================

locret_F4CE:				
		rts	
; ===========================================================================

loc_F4D0:				
		tst.b	(v_act).w
		bne.s	loc_F4D8
		rts	
; ===========================================================================

loc_F4D8:				
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F4E6(pc,d0.w),d0
		jmp	off_F4E6(pc,d0.w)
; ===========================================================================
off_F4E6:	dc.w loc_F4EE-off_F4E6	; 0 
					
		dc.w loc_F520-off_F4E6	; 1
		dc.w loc_F55C-off_F4E6	; 2
		dc.w loc_F58A-off_F4E6	; 3
; ===========================================================================

loc_F4EE:				
		cmpi.w	#$2810,(v_camera_x_pos).w
		bcs.s	locret_F51E
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		move.w	#$400,(v_boundary_bottom_next).w
		move.w	#$400,(v_boundary_bottom_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.b	#4,(v_current_boss).w
		moveq	#$2B,d0	; '+'
		bsr.w	sub_F65E

locret_F51E:				
		rts	
; ===========================================================================

loc_F520:				
		cmpi.w	#$2A40,(v_camera_x_pos).w
		bcs.s	locret_F55A
		move.w	#$2A40,(v_boundary_right_next).w
		move.w	#$2A40,(v_boundary_left_next).w
		move.w	#$2A40,(v_boundary_right_next_p2).w
		move.w	#$2A40,(v_boundary_left_next_p2).w
		addq.b	#2,(v_dle_routine).w
		move.w	#$F9,d0	
		bsr.w	sub_F664
		clr.b	(v_boss_spawn_delay).w
		bsr.w	sub_F64C
		bne.s	locret_F55A
		move.b	#-$77,(a1)

locret_F55A:				
					
		rts	
; ===========================================================================

loc_F55C:				
		cmpi.w	#$3F8,(v_camera_y_pos).w
		bcs.s	loc_F570
		move.w	#$3F8,(v_boundary_top_next).w
		move.w	#$3F8,(v_boundary_top_next_p2).w

loc_F570:				
		addq.b	#1,(v_boss_spawn_delay).w
		cmpi.b	#$5A,(v_boss_spawn_delay).w ; 'Z'
		bcs.s	locret_F588
		addq.b	#2,(v_dle_routine).w
		move.w	#$93,d0	
		bsr.w	sub_F664

locret_F588:				
		rts	
; ===========================================================================

loc_F58A:				
		move.w	(v_camera_x_pos).w,(v_boundary_left_next).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_camera_x_pos).w,(v_boundary_left_next_p2).w
		rts	
; ===========================================================================

loc_F59E:				
		tst.b	(v_act).w
		bne.w	locret_F624
		moveq	#0,d0
		move.b	(v_dle_routine).w,d0
		move.w	off_F5B4(pc,d0.w),d0
		jmp	off_F5B4(pc,d0.w)
; ===========================================================================
off_F5B4:	dc.w loc_F5BE-off_F5B4	; 0 
					
		dc.w loc_F5D0-off_F5B4	; 1
		dc.w loc_F5F0-off_F5B4	; 2
		dc.w loc_F60A-off_F5B4	; 3
		dc.w locret_F622-off_F5B4; 4
; ===========================================================================

loc_F5BE:				
		move.w	#1,(v_tornado_x_vel).w
		move.w	#0,(v_tornado_y_vel).w
		addq.b	#2,(v_dle_routine).w
		rts	
; ===========================================================================

loc_F5D0:				
		cmpi.w	#$1180,(v_camera_x_pos).w
		bcs.s	locret_F5EE
		move.w	#-1,(v_tornado_x_vel).w
		move.w	#1,(v_tornado_y_vel).w
		move.w	#$500,(v_boundary_bottom_next).w
		addq.b	#2,(v_dle_routine).w

locret_F5EE:				
		rts	
; ===========================================================================

loc_F5F0:				
		cmpi.w	#$500,(v_camera_y_pos).w
		bcs.s	locret_F608
		move.w	#1,(v_tornado_x_vel).w
		move.w	#0,(v_tornado_y_vel).w
		addq.b	#2,(v_dle_routine).w

locret_F608:				
		rts	
; ===========================================================================

loc_F60A:				
		cmpi.w	#$1400,(v_camera_x_pos).w
		bcs.s	locret_F622
		move.w	#0,(v_tornado_x_vel).w
		move.w	#0,(v_tornado_y_vel).w
		addq.b	#2,(v_dle_routine).w

locret_F622:				
					
		rts	
; ===========================================================================

locret_F624:				
		rts	
; ===========================================================================

loc_F626:				
		move.w	(v_level_music).w,d0
		bra.w	sub_F664
; ===========================================================================

loc_F62E:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		lea	(byte_13F62).l,a2
		move.b	(a2,d0.w),d0
		bsr.w	sub_F65E
		moveq	#$41,d0	; 'A'
		bsr.w	sub_F65E
		rts	
; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_F64C:				
					
		jmp	SingleObjLoad
; End of function sub_F64C


; =============== S U B	R O U T	I N E =======================================


sub_F652:				
		jmp	(PlaySound).l
; End of function sub_F652


; =============== S U B	R O U T	I N E =======================================


sub_F658:				
					
		jmp	(PalLoad_Now).l
; End of function sub_F658


; =============== S U B	R O U T	I N E =======================================


sub_F65E:				
					
		jmp	(AddPLC).l
; End of function sub_F65E


; =============== S U B	R O U T	I N E =======================================


sub_F664:				
					
		jmp	(PlayMusic).l
; End of function sub_F664

; ===========================================================================
		dc.w 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Bridge:				
		btst	#6,1(a0)
		bne.w	loc_F684
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_F68C(pc,d0.w),d1
		jmp	off_F68C(pc,d1.w)
; ===========================================================================

loc_F684:				
		move.w	#$180,d0
		bra.w	DisplaySprite3
; ===========================================================================
off_F68C:	dc.w loc_F694-off_F68C	; 0 
					
		dc.w loc_F77A-off_F68C	; 1
		dc.w loc_F80C-off_F68C	; 2
		dc.w loc_F810-off_F68C	; 3
; ===========================================================================

loc_F694:				
		addq.b	#2,$24(a0)
		move.l	#Map_FC70,4(a0)
		move.w	#$43B6,2(a0)
		move.b	#3,$18(a0)
		cmpi.b	#8,(v_zone).w
		bne.s	loc_F6C6
		addq.b	#4,$24(a0)
		move.l	#Map_FC28,4(a0)
		move.w	#$6300,2(a0)

loc_F6C6:				
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#-$80,$19(a0)
		move.w	$C(a0),d2
		move.w	d2,$3C(a0)
		move.w	8(a0),d3
		lea	$28(a0),a2
		moveq	#0,d1
		move.b	(a2),d1
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0
		sub.w	d0,d3
		swap	d1
		move.w	#8,d1
		bsr.s	sub_F728
		move.w	$28(a1),d0
		subq.w	#8,d0
		move.w	d0,8(a1)
		move.l	a1,$30(a0)
		swap	d1
		subq.w	#8,d1
		bls.s	loc_F726
		move.w	d1,d4
		bsr.s	sub_F728
		move.l	a1,$34(a0)
		move.w	d4,d0
		add.w	d0,d0
		add.w	d4,d0
		move.w	$10(a1,d0.w),d0
		subq.w	#8,d0
		move.w	d0,8(a1)

loc_F726:				
		bra.s	loc_F77A

; =============== S U B	R O U T	I N E =======================================


sub_F728:				
					
		bsr.w	sub_FC88
		bne.s	locret_F778
		_move.b	0(a0),0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	1(a0),1(a1)
		bset	#6,1(a1)
		move.b	#$40,$E(a1) ; '@'
		move.b	d1,$F(a1)
		subq.b	#1,d1
		lea	$10(a1),a2

loc_F768:				
		move.w	d3,(a2)+
		move.w	d2,(a2)+
		move.w	#0,(a2)+
		addi.w	#$10,d3
		dbf	d1,loc_F768

locret_F778:				
		rts	
; End of function sub_F728

; ===========================================================================

loc_F77A:				
					
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_F790
		tst.b	$3E(a0)
		beq.s	loc_F7BC
		subq.b	#4,$3E(a0)
		bra.s	loc_F7B8
; ===========================================================================

loc_F790:				
		andi.b	#$10,d0
		beq.s	loc_F7AC
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_F7AC
		bcc.s	loc_F7A8
		addq.b	#1,$3F(a0)
		bra.s	loc_F7AC
; ===========================================================================

loc_F7A8:				
		subq.b	#1,$3F(a0)

loc_F7AC:				
					
		cmpi.b	#$40,$3E(a0) ; '@'
		beq.s	loc_F7B8
		addq.b	#4,$3E(a0)

loc_F7B8:				
					
		bsr.w	loc_F9E8

loc_F7BC:				
		moveq	#0,d1
		move.b	$28(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	8(a0),d4
		bsr.w	sub_F872

loc_F7D4:				
		tst.w	(f_two_player).w
		beq.s	loc_F7DC
		rts	
; ===========================================================================

loc_F7DC:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_F7F0
		rts	
; ===========================================================================

loc_F7F0:				
		movea.l	$30(a0),a1
		bsr.w	DeleteObject2
		cmpi.b	#8,$28(a0)
		bls.s	loc_F808
		movea.l	$34(a0),a1
		bsr.w	DeleteObject2

loc_F808:				
		bra.w	DeleteObject
; ===========================================================================

loc_F80C:				
		bra.w	DisplaySprite
; ===========================================================================

loc_F810:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_F826
		tst.b	$3E(a0)
		beq.s	loc_F852
		subq.b	#4,$3E(a0)
		bra.s	loc_F84E
; ===========================================================================

loc_F826:				
		andi.b	#$10,d0
		beq.s	loc_F842
		move.b	$3F(a0),d0
		sub.b	$3B(a0),d0
		beq.s	loc_F842
		bcc.s	loc_F83E
		addq.b	#1,$3F(a0)
		bra.s	loc_F842
; ===========================================================================

loc_F83E:				
		subq.b	#1,$3F(a0)

loc_F842:				
					
		cmpi.b	#$40,$3E(a0) ; '@'
		beq.s	loc_F84E
		addq.b	#4,$3E(a0)

loc_F84E:				
					
		bsr.w	loc_F9E8

loc_F852:				
		moveq	#0,d1
		move.b	$28(a0),d1
		lsl.w	#3,d1
		move.w	d1,d2
		addq.w	#8,d1
		add.w	d2,d2
		moveq	#8,d3
		move.w	8(a0),d4
		bsr.w	sub_F872
		bsr.w	sub_F912
		bra.w	loc_F7D4

; =============== S U B	R O U T	I N E =======================================


sub_F872:				
					
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		moveq	#$3B,d5	; ';'
		movem.l	d1-d4,-(sp)
		bsr.s	sub_F88C
		movem.l	(sp)+,d1-d4
		lea	($FFFFB000).w,a1
		subq.b	#1,d6
		moveq	#$3F,d5	; '?'
; End of function sub_F872


; =============== S U B	R O U T	I N E =======================================


sub_F88C:				
		btst	d6,$22(a0)
		beq.s	loc_F8F0
		btst	#1,$22(a1)
		bne.s	loc_F8AC
		moveq	#0,d0
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_F8AC
		cmp.w	d2,d0
		bcs.s	loc_F8BA

loc_F8AC:				
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_F8BA:				
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)
		movea.l	$30(a0),a2
		cmpi.w	#8,d0
		bcs.s	loc_F8D2
		movea.l	$34(a0),a2
		subi.w	#8,d0

loc_F8D2:				
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	$12(a2,d0.w),d0
		subq.w	#8,d0
		moveq	#0,d1
		move.b	$16(a1),d1
		sub.w	d1,d0
		move.w	d0,$C(a1)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_F8F0:				
		move.w	d1,-(sp)
		bsr.w	sub_FC8E
		move.w	(sp)+,d1
		btst	d6,$22(a0)
		beq.s	locret_F910
		moveq	#0,d0
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		lsr.w	#4,d0
		move.b	d0,(a0,d5.w)

locret_F910:				
		rts	
; End of function sub_F88C


; =============== S U B	R O U T	I N E =======================================


sub_F912:				
		moveq	#0,d0
		tst.w	($FFFFB010).w
		bne.s	loc_F924
		move.b	($FFFFFE0F).w,d0
		andi.w	#$1C,d0
		lsr.w	#1,d0

loc_F924:				
		moveq	#0,d2
		move.b	byte_F950+1(pc,d0.w),d2
		swap	d2
		move.b	byte_F950(pc,d0.w),d2
		moveq	#0,d0
		tst.w	($FFFFB050).w
		bne.s	loc_F942
		move.b	($FFFFFE0F).w,d0
		andi.w	#$1C,d0
		lsr.w	#1,d0

loc_F942:				
		moveq	#0,d6
		move.b	byte_F950+1(pc,d0.w),d6
		swap	d6
		move.b	byte_F950(pc,d0.w),d6
		bra.s	loc_F960
; ===========================================================================
byte_F950:	dc.b   1,  2		; 0
		dc.b   1,  2		; 2
		dc.b   1,  2		; 4
		dc.b   1,  2		; 6
		dc.b   0,  1		; 8
		dc.b   0,  0		; 10
		dc.b   0,  0		; 12
		dc.b   0,  1		; 14
; ===========================================================================

loc_F960:				
		moveq	#-2,d3
		moveq	#-2,d4
		move.b	$22(a0),d0
		andi.b	#8,d0
		beq.s	loc_F972
		move.b	$3F(a0),d3

loc_F972:				
		move.b	$22(a0),d0
		andi.b	#$10,d0
		beq.s	loc_F980
		move.b	$3B(a0),d4

loc_F980:				
		movea.l	$30(a0),a1
		lea	$45(a1),a2
		lea	$15(a1),a1
		moveq	#0,d1
		move.b	$28(a0),d1
		subq.b	#1,d1
		moveq	#0,d5

loc_F996:				
		moveq	#0,d0
		subq.w	#1,d3
		cmp.b	d3,d5
		bne.s	loc_F9A0
		move.w	d2,d0

loc_F9A0:				
		addq.w	#2,d3
		cmp.b	d3,d5
		bne.s	loc_F9A8
		move.w	d2,d0

loc_F9A8:				
		subq.w	#1,d3
		subq.w	#1,d4
		cmp.b	d4,d5
		bne.s	loc_F9B2
		move.w	d6,d0

loc_F9B2:				
		addq.w	#2,d4
		cmp.b	d4,d5
		bne.s	loc_F9BA
		move.w	d6,d0

loc_F9BA:				
		subq.w	#1,d4
		cmp.b	d3,d5
		bne.s	loc_F9C6
		swap	d2
		move.w	d2,d0
		swap	d2

loc_F9C6:				
		cmp.b	d4,d5
		bne.s	loc_F9D0
		swap	d6
		move.w	d6,d0
		swap	d6

loc_F9D0:				
		move.b	d0,(a1)
		addq.w	#1,d5
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_F9E2
		movea.l	$34(a0),a1
		lea	$15(a1),a1

loc_F9E2:				
		dbf	d1,loc_F996
		rts	
; End of function sub_F912

; ===========================================================================

loc_F9E8:				
					
		move.b	$3E(a0),d0
		bsr.w	sub_FC94
		move.w	d0,d4
		lea	(byte_FB28).l,a4
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		move.w	d3,d2
		add.w	d0,d3
		moveq	#0,d5
		lea	(loc_FA16+2).l,a5
		move.b	(a5,d3.w),d5

loc_FA16:				
		andi.w	#$F,d3
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		movea.l	$30(a0),a1
		lea	$42(a1),a2
		lea	$12(a1),a1

loc_FA2C:				
		moveq	#0,d0
		move.b	(a3)+,d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_FA4C
		movea.l	$34(a0),a1
		lea	$12(a1),a1

loc_FA4C:				
		dbf	d2,loc_FA2C
		moveq	#0,d0
		move.b	$28(a0),d0
		moveq	#0,d3
		move.b	$3F(a0),d3
		addq.b	#1,d3
		sub.b	d0,d3
		neg.b	d3
		bmi.s	locret_FA96
		move.w	d3,d2
		lsl.w	#4,d3
		lea	(a4,d3.w),a3
		adda.w	d2,a3
		subq.w	#1,d2
		bcs.s	locret_FA96

loc_FA72:				
		moveq	#0,d0
		move.b	-(a3),d0
		addq.w	#1,d0
		mulu.w	d5,d0
		mulu.w	d4,d0
		swap	d0
		add.w	$3C(a0),d0
		move.w	d0,(a1)
		addq.w	#6,a1
		cmpa.w	a2,a1
		bne.s	loc_FA92
		movea.l	$34(a0),a1
		lea	$12(a1),a1

loc_FA92:				
		dbf	d2,loc_FA72

locret_FA96:				
					
		rts	
; ===========================================================================
		dc.b   2,  4,  6,  8,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0; 0
		dc.b   2,  4,  6,  8, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0; 16
		dc.b   2,  4,  6,  8, $A, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0; 32
		dc.b   2,  4,  6,  8, $A, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0; 48
		dc.b   2,  4,  6,  8, $A, $C, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0; 64
		dc.b   2,  4,  6,  8, $A, $C, $E, $C, $A,  8,  6,  4,  2,  0,  0,  0; 80
		dc.b   2,  4,  6,  8, $A, $C, $E, $E, $C, $A,  8,  6,  4,  2,  0,  0; 96
		dc.b   2,  4,  6,  8, $A, $C, $E,$10, $E, $C, $A,  8,  6,  4,  2,  0; 112
		dc.b   2,  4,  6,  8, $A, $C, $E,$10,$10, $E, $C, $A,  8,  6,  4,  2; 128
byte_FB28:	dc.b $FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 0
					
		dc.b $B5,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 16
		dc.b $7E,$DB,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 32
		dc.b $61,$B5,$EC,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 48
		dc.b $4A,$93,$CD,$F3,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 64
		dc.b $3E,$7E,$B0,$DB,$F6,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 80
		dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0; 96
		dc.b $31,$61,$8E,$B5,$D4,$EC,$FB,$FF,  0,  0,  0,  0,  0,  0,  0,  0; 112
		dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF,  0,  0,  0,  0,  0,  0,  0; 128
		dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF,  0,  0,  0,  0,  0,  0; 144
		dc.b $1F,$44,$67,$88,$A7,$BD,$D4,$E7,$F4,$FD,$FF,  0,  0,  0,  0,  0; 160
		dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF,  0,  0,  0,  0; 176
		dc.b $19,$38,$56,$73,$8E,$A7,$BD,$D1,$E1,$EE,$F8,$FE,$FF,  0,  0,  0; 192
		dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF,  0,  0; 208
		dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF,  0; 224
		dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$D4,$E1,$EC,$F4,$FB,$FE,$FF; 240
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_FC28:	dc.w word_FC34-Map_FC28; 0 ;	DATA XREF: ROM:0000F6B8o
					
		dc.w word_FC3E-Map_FC28; 1
		dc.w word_FC48-Map_FC28; 2
		dc.w word_FC52-Map_FC28; 3
		dc.w word_FC5C-Map_FC28; 4
		dc.w word_FC66-Map_FC28; 5
word_FC34:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_FC3E:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8; 0
word_FC48:	dc.w 1			
		dc.w $F805,    8,    4,$FFF8; 0
word_FC52:	dc.w 1			
		dc.w $F402,   $C,    6,$FFFC; 0
word_FC5C:	dc.w 1			
		dc.w $F402,   $F,    7,$FFFC; 0
word_FC66:	dc.w 1			
		dc.w $F402,  $12,    9,$FFFC; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_FC70:	dc.w word_FC74-Map_FC70; 0 ;	DATA XREF: ROM:0000F698o
					
		dc.w word_FC7E-Map_FC70; 1
word_FC74:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8; 0
word_FC7E:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0

; =============== S U B	R O U T	I N E =======================================


sub_FC88:				
		jmp	SingleObjLoad2
; End of function sub_FC88


; =============== S U B	R O U T	I N E =======================================


sub_FC8E:				
		jmp	loc_19D9C
; End of function sub_FC8E


; =============== S U B	R O U T	I N E =======================================


sub_FC94:				
		jmp	(CalcSine).l
; End of function sub_FC94

; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Swinging platform from ARZ
; ----------------------------------------------------------------------------

SwingingPlatform:				
		btst	#6,1(a0)
		bne.w	loc_FCB4
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_FCBC(pc,d0.w),d1
		jmp	off_FCBC(pc,d1.w)
; ===========================================================================

loc_FCB4:				
		move.w	#$200,d0
		bra.w	DisplaySprite3
; ===========================================================================
off_FCBC:	dc.w loc_FCCA-off_FCBC	; 0 
					
		dc.w loc_FE50-off_FCBC	; 1
		dc.w loc_1003A-off_FCBC	; 2
		dc.w loc_1003E-off_FCBC	; 3
		dc.w loc_100F8-off_FCBC	; 4
		dc.w loc_10100-off_FCBC	; 5
		dc.w loc_10166-off_FCBC	; 6
; ===========================================================================

loc_FCCA:				
		addq.b	#2,$24(a0)
		move.l	#Map_101E8,4(a0)
		move.w	#$43E3,2(a0)
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#$10,$16(a0)
		move.w	$C(a0),$38(a0)
		move.w	8(a0),$3A(a0)
		cmpi.b	#$B,(v_zone).w
		bne.s	loc_FD22
		move.l	#Map_10256,4(a0)
		move.w	#0,2(a0)
		move.b	#$18,$19(a0)
		move.b	#8,$16(a0)

loc_FD22:				
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_FD44
		move.l	#Map_1021E,4(a0)
		move.w	#0,2(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#8,$16(a0)

loc_FD44:				
		bsr.w	Adjust2PArtPointer
		moveq	#0,d1
		move.b	$28(a0),d1
		bpl.s	loc_FD54
		addq.b	#4,$24(a0)

loc_FD54:				
		move.b	d1,d4
		andi.b	#$70,d4	; 'p'
		andi.w	#$F,d1
		move.w	8(a0),d2
		move.w	$C(a0),d3
		bsr.w	sub_102FE
		bne.w	loc_FE24
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		cmpi.b	#$20,d4	; ' '
		bne.s	loc_FDC6
		move.b	#4,$24(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	#$50,$16(a1) ; 'P'
		bset	#4,1(a1)
		move.b	#3,$1A(a1)
		move.w	d2,8(a1)
		addi.w	#$40,d3	; '@'
		move.w	d3,$C(a1)
		addi.w	#$48,d3	; 'H'
		move.w	d3,$C(a0)
		bra.s	loc_FE20
; ===========================================================================

loc_FDC6:				
		bset	#6,1(a1)
		move.b	#$48,$E(a1) ; 'H'
		move.b	d1,$F(a1)
		subq.b	#1,d1
		lea	$10(a1),a2

loc_FDDC:				
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		addi.w	#$10,d3
		dbf	d1,loc_FDDC
		move.b	#2,$15(a1)
		move.w	$28(a1),8(a1)
		move.w	$2A(a1),$C(a1)
		move.w	d2,$28(a1)
		move.w	d3,$2A(a1)
		move.b	#1,$B(a1)
		addi.w	#8,d3
		move.w	d3,$C(a0)
		move.b	#$50,$14(a1) ; 'P'
		bset	#4,1(a1)

loc_FE20:				
		move.l	a1,$30(a0)

loc_FE24:				
		move.w	#$8000,$26(a0)
		move.w	#0,$3E(a0)
		move.b	$28(a0),d1
		andi.w	#$70,d1	; 'p'
		move.b	d1,$28(a0)
		cmpi.b	#$40,d1	; '@'
		bne.s	loc_FE50
		move.l	#Map_102DE,4(a0)
		move.b	#$A7,$20(a0)

loc_FE50:				
					
		move.w	8(a0),-(sp)
		bsr.w	sub_FE70
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	sub_102F8
		bra.w	loc_1000C

; =============== S U B	R O U T	I N E =======================================


sub_FE70:				
					
		moveq	#0,d0
		moveq	#0,d1
		move.b	($FFFFFE78).w,d0
		move.b	$28(a0),d1
		beq.s	loc_FEC2
		cmpi.b	#$10,d1
		bne.s	loc_FE9E
		cmpi.b	#$3F,d0	; '?'
		beq.s	loc_FE90
		bcc.s	loc_FEC2
		moveq	#$40,d0	; '@'
		bra.s	loc_FEC2
; ===========================================================================

loc_FE90:				
		move.w	#$D7,d0	
		jsr	(PlaySoundLocal).l
		moveq	#$40,d0	; '@'
		bra.s	loc_FEC2
; ===========================================================================

loc_FE9E:				
		cmpi.b	#$20,d1	; ' '
		beq.w	locret_FF6C
		cmpi.b	#$30,d1	; '0'
		bne.s	loc_FEB8
		cmpi.b	#$41,d0	; 'A'
		beq.s	loc_FE90
		bcs.s	loc_FEC2
		moveq	#$40,d0	; '@'
		bra.s	loc_FEC2
; ===========================================================================

loc_FEB8:				
		cmpi.b	#$40,d1	; '@'
		bne.s	loc_FEC2
		bsr.w	loc_FF6E

loc_FEC2:				
		move.b	$2E(a0),d1
		cmp.b	d0,d1
		beq.w	locret_FF6C
		move.b	d0,$2E(a0)
		move.w	#$80,d1	
		btst	#0,$22(a0)
		beq.s	loc_FEE0
		neg.w	d0
		add.w	d1,d0

loc_FEE0:				
		bsr.w	sub_10304
		move.w	$38(a0),d2
		move.w	$3A(a0),d3
		moveq	#0,d6
		movea.l	$30(a0),a1
		move.b	$F(a1),d6
		subq.w	#1,d6
		bcs.s	locret_FF6C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		moveq	#0,d4
		moveq	#0,d5
		lea	$10(a1),a2

loc_FF0A:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_FF0A
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	$28(a1),d2
		move.w	$2A(a1),d3
		move.w	d5,$28(a1)
		move.w	d4,$2A(a1)
		move.w	d2,8(a1)
		move.w	d3,$C(a1)
		movem.l	(sp)+,d4-d5
		asr.l	#1,d0
		asr.l	#1,d1
		add.l	d0,d4
		add.l	d1,d5
		swap	d4
		swap	d5
		add.w	$38(a0),d4
		add.w	$3A(a0),d5
		move.w	d4,$C(a0)
		move.w	d5,8(a0)

locret_FF6C:				
		rts	
; End of function sub_FE70

; ===========================================================================

loc_FF6E:				
		tst.w	$36(a0)
		beq.s	loc_FF7C
		subq.w	#1,$36(a0)
		bra.w	loc_10006
; ===========================================================================

loc_FF7C:				
		tst.b	$34(a0)
		bne.s	loc_FFA2
		move.w	($FFFFB008).w,d0
		sub.w	$3A(a0),d0
		addi.w	#$20,d0	; ' '
		cmpi.w	#$40,d0	; '@'
		bcc.s	loc_10006
		tst.w	(v_debug_active).w
		bne.w	loc_10006
		move.b	#1,$34(a0)

loc_FFA2:				
		tst.b	$3D(a0)
		beq.s	loc_FFD8
		move.w	$3E(a0),d0
		addi.w	#8,d0
		move.w	d0,$3E(a0)
		add.w	d0,$26(a0)
		cmpi.w	#$200,d0
		bne.s	loc_10006
		move.w	#0,$3E(a0)
		move.w	#$8000,$26(a0)

loc_FFCA:
		move.b	#0,$3D(a0)
		move.w	#$3C,$36(a0) ; '<'
		bra.s	loc_10006
; ===========================================================================

loc_FFD8:				
		move.w	$3E(a0),d0
		subi.w	#8,d0
		move.w	d0,$3E(a0)
		add.w	d0,$26(a0)
		cmpi.w	#$FE00,d0
		bne.s	loc_10006

loc_FFEE:
		move.w	#0,$3E(a0)
		move.w	#$4000,$26(a0)
		move.b	#1,$3D(a0)

loc_10000:				
		move.w	#$3C,$36(a0) ; '<'

loc_10006:				
					
		move.b	$26(a0),d0
		rts	
; ===========================================================================

loc_1000C:				
					
		tst.w	(f_two_player).w
		beq.s	loc_10016
		bra.w	DisplaySprite
; ===========================================================================

loc_10016:				
		move.w	$3A(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1002E
		bra.w	DisplaySprite
; ===========================================================================

loc_1002E:				
		movea.l	$30(a0),a1
		bsr.w	DeleteObject2
		bra.w	DeleteObject
; ===========================================================================

loc_1003A:				
		bra.w	DisplaySprite
; ===========================================================================

loc_1003E:				
		move.w	8(a0),-(sp)
		bsr.w	sub_FE70
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	sub_102F8
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.w	loc_100F4
		tst.b	($FFFFFE78).w
		bne.w	loc_100F4
		bsr.w	sub_102FE
		bne.s	loc_100E4
		moveq	#0,d0
		move.w	#$F,d1

loc_1007A:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_1007A
		move.b	#$A,$24(a1)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_10098
		addq.b	#2,$24(a1)

loc_10098:				
		move.w	#$200,$10(a1)
		btst	#0,$22(a0)
		beq.s	loc_100AA
		neg.w	$10(a1)

loc_100AA:				
		bset	#1,$22(a1)
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0	; ''
		move.w	a1,d1
		subi.w	#-$5000,d1
		lsr.w	#6,d1
		andi.w	#$7F,d1	; ''
		lea	($FFFFB000).w,a1
		cmp.b	$3D(a1),d0
		bne.s	loc_100D6
		move.b	d1,$3D(a1)

loc_100D6:				
		lea	($FFFFB040).w,a1
		cmp.b	$3D(a1),d0
		bne.s	loc_100E4
		move.b	d1,$3D(a1)

loc_100E4:				
					
		move.b	#3,$1A(a0)
		addq.b	#2,$24(a0)
		andi.b	#-$19,$22(a0)

loc_100F4:				
					
		bra.w	loc_1000C
; ===========================================================================

loc_100F8:				
		bsr.w	sub_FE70
		bra.w	loc_1000C
; ===========================================================================

loc_10100:				
		move.w	8(a0),-(sp)
		btst	#1,$22(a0)
		beq.s	loc_1013E
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		cmpi.w	#$720,$C(a0)
		bcs.s	loc_1014E
		move.w	#$720,$C(a0)
		bclr	#1,$22(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		move.w	$C(a0),$38(a0)
		bra.s	loc_1014E
; ===========================================================================

loc_1013E:				
		moveq	#0,d0
		move.b	($FFFFFE74).w,d0
		lsr.w	#1,d0
		add.w	$38(a0),d0
		move.w	d0,$C(a0)

loc_1014E:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	sub_102F8
		bra.w	MarkObjGone
; ===========================================================================

loc_10166:				
		move.w	8(a0),-(sp)
		bsr.w	SpeedToPos
		btst	#1,$22(a0)
		beq.s	loc_101A2
		addi.w	#$18,$12(a0)
		move.w	(v_water_height_normal).w,d0
		cmp.w	$C(a0),d0
		bhi.s	loc_101D0
		move.w	d0,$C(a0)
		move.w	d0,$38(a0)
		bclr	#1,$22(a0)
		move.w	#$100,$10(a0)
		move.w	#0,$12(a0)
		bra.s	loc_101D0
; ===========================================================================

loc_101A2:				
		moveq	#0,d0
		move.b	($FFFFFE74).w,d0
		lsr.w	#1,d0
		add.w	$38(a0),d0
		move.w	d0,$C(a0)
		tst.w	$10(a0)
		beq.s	loc_101D0
		moveq	#0,d3
		move.b	$19(a0),d3
		bsr.w	sub_1030A
		tst.w	d1
		bpl.s	loc_101D0
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_101D0:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#0,d3
		move.b	$16(a0),d3
		addq.b	#1,d3
		move.w	(sp)+,d4
		bsr.w	sub_102F8
		bra.w	MarkObjGone
; ===========================================================================
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_101E8:	dc.w word_101F0-Map_101E8; 0	
					
		dc.w word_10212-Map_101E8; 1
		dc.w word_10212-Map_101E8; 2
		dc.w word_1021C-Map_101E8; 3
word_101F0:	dc.w 4			
		dc.w $F00D,$2004,$2002,$FFE0; 0
		dc.w $F00D,$200C,$2006,	   0; 4
		dc.w	$D,$2014,$200A,$FFE0; 8
		dc.w	$D,$2814,$280A,	   0; 12
word_10212:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_1021C:	dc.w 0			
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Map_1021E:	dc.w word_10226-Map_1021E; 0	
					
		dc.w word_10238-Map_1021E; 1
		dc.w word_10242-Map_1021E; 2
		dc.w word_10254-Map_1021E; 3
word_10226:	dc.w 2			
		dc.w $F80D,$6055,$602A,$FFE0; 0
		dc.w $F80D,$6055,$602A,	   0; 4
word_10238:	dc.w 1			
		dc.w $F805,$2051,$2028,$FFF8; 0
word_10242:	dc.w 2			
		dc.w $F00E,$4045,$4022,$FFF0; 0
		dc.w $F805,$2051,$2028,$FFF8; 4
word_10254:	dc.w 0			
; ---------------------------------------------------------------------------------
; Unknown sprite mappings
; ---------------------------------------------------------------------------------
Map_10256:	dc.w word_1025E-Map_10256; 0	
					
		dc.w word_10270-Map_10256; 1
		dc.w word_1027A-Map_10256; 2
		dc.w word_1028C-Map_10256; 3
word_1025E:	dc.w 2			
		dc.w $F809,$6060,$6030,$FFE8; 0
		dc.w $F809,$6860,$6830,	   0; 4
word_10270:	dc.w 1			
		dc.w $F805,$6066,$6033,$FFF8; 0
word_1027A:	dc.w 2			
		dc.w $E805,$406A,$4035,$FFF4; 0
		dc.w $F80B,$406E,$4037,$FFF4; 4
word_1028C:	dc.w $A			
		dc.w $A805,$406A,$4035,$FFF4; 0
		dc.w $B80B,$406E,$4037,$FFF4; 4
		dc.w $C805,$6066,$6033,$FFF8; 8
		dc.w $D805,$6066,$6033,$FFF8; 12
		dc.w $E805,$6066,$6033,$FFF8; 16
		dc.w $F805,$6066,$6033,$FFF8; 20
		dc.w  $805,$6066,$6033,$FFF8; 24
		dc.w $1805,$6066,$6033,$FFF8; 28
		dc.w $2805,$6066,$6033,$FFF8; 32
		dc.w $3805,$6066,$6033,$FFF8; 36
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_102DE:	dc.w 6			
		dc.w $FF92,$FF9C,    2,$F80D; 0
		dc.w $6058,$602C,$FFE0,$F80D; 4
		dc.w $6858,$682C,    0	; 8
; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_102F8:				
					
		jmp	loc_19CE2
; End of function sub_102F8


; =============== S U B	R O U T	I N E =======================================


sub_102FE:				
					
		jmp	SingleObjLoad2
; End of function sub_102FE


; =============== S U B	R O U T	I N E =======================================


sub_10304:				
		jmp	(CalcSine).l
; End of function sub_10304


; =============== S U B	R O U T	I N E =======================================


sub_1030A:				
		jmp	loc_1EF00
; End of function sub_1030A

; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Helix:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1031E(pc,d0.w),d1
		jmp	off_1031E(pc,d1.w)
; ===========================================================================
off_1031E:	dc.w loc_10324-off_1031E; 0 
					
		dc.w loc_103E8-off_1031E; 1
		dc.w loc_1044A-off_1031E; 2
; ===========================================================================

loc_10324:				
		addq.b	#2,$24(a0)
		move.l	#Map_10452,4(a0)
		move.w	#$4398,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		_move.b	0(a0),d4
		lea	$28(a0),a2
		moveq	#0,d1
		move.b	(a2),d1
		move.b	#0,(a2)+
		move.w	d1,d0
		lsr.w	#1,d0
		lsl.w	#4,d0
		sub.w	d0,d3
		subq.b	#2,d1
		bcs.s	loc_103E8
		moveq	#0,d6

loc_10372:				
		bsr.w	SingleObjLoad2
		bne.s	loc_103E8
		addq.b	#1,$28(a0)
		move.w	a1,d5
		subi.w	#$B000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5	; ''
		move.b	d5,(a2)+
		move.b	#4,$24(a1)
		_move.b	d4,0(a1)
		move.w	d2,$C(a1)
		move.w	d3,8(a1)
		move.l	4(a0),4(a1)
		move.w	#$4398,2(a1)
		bsr.w	sub_16D8A
		move.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#8,$19(a1)
		move.b	d6,$3E(a1)
		addq.b	#1,d6
		andi.b	#7,d6
		addi.w	#$10,d3
		cmp.w	8(a0),d3
		bne.s	loc_103E4
		move.b	d6,$3E(a0)
		addq.b	#1,d6
		andi.b	#7,d6
		addi.w	#$10,d3
		addq.b	#1,$28(a0)

loc_103E4:				
		dbf	d1,loc_10372

loc_103E8:				
					
					; DATA XREF: ...
		bsr.w	sub_1042A
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_10404
		bra.w	DisplaySprite
; ===========================================================================

loc_10404:				
		moveq	#0,d2
		lea	$28(a0),a2
		move.b	(a2)+,d2

loc_1040C:
		subq.b	#2,d2
		bcs.s	loc_10426

loc_10410:				
		moveq	#0,d0
		move.b	(a2)+,d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a1
		bsr.w	DeleteObject2
		dbf	d2,loc_10410

loc_10426:				
		bra.w	DeleteObject

; =============== S U B	R O U T	I N E =======================================


sub_1042A:				
					
		move.b	(v_syncani_0_frame).w,d0
		move.b	#0,$20(a0)
		add.b	$3E(a0),d0
		andi.b	#7,d0
		move.b	d0,$1A(a0)
		bne.s	locret_10448
		move.b	#-$7C,$20(a0)

locret_10448:				
		rts	
; End of function sub_1042A

; ===========================================================================

loc_1044A:				
		bsr.w	sub_1042A
		bra.w	DisplaySprite
; ===========================================================================
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_10452:	dc.w word_10462-Map_10452; 0	
					
		dc.w word_1046C-Map_10452; 1
		dc.w word_10476-Map_10452; 2
		dc.w word_10480-Map_10452; 3
		dc.w word_1048A-Map_10452; 4
		dc.w word_10494-Map_10452; 5
		dc.w word_104A8-Map_10452; 6
		dc.w word_1049E-Map_10452; 7
word_10462:	dc.w 1			
		dc.w $F001,    0,    0,$FFFC; 0
word_1046C:	dc.w 1			
		dc.w $F505,    2,    1,$FFF8; 0
word_10476:	dc.w 1			
		dc.w $F805,    6,    3,$FFF8; 0
word_10480:	dc.w 1			
		dc.w $FB05,   $A,    5,$FFF8; 0
word_1048A:	dc.w 1			
		dc.w	 1,   $E,    7,$FFFC; 0
word_10494:	dc.w 1			
		dc.w  $400,  $10,    8,$FFFD; 0
word_1049E:	dc.w 1			
		dc.w $F400,  $11,    8,$FFFD; 0
word_104A8:	dc.w 0			
; ===========================================================================
		nop	
; ----------------------------------------------------------------------------
; Sprite
;
; Stationary floating platform from ARZ
; ----------------------------------------------------------------------------

BasicPlatform:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_104BA(pc,d0.w),d1
		jmp	off_104BA(pc,d1.w)
; ===========================================================================
off_104BA:	dc.w loc_104CE-off_104BA; 0 
					
		dc.w loc_1056A-off_104BA; 1
		dc.w loc_105D0-off_104BA; 2
		dc.w loc_105A8-off_104BA; 3
		dc.w loc_105D4-off_104BA; 4
word_104C4:	dc.w $2000		; 0
		dc.w $2001		; 1
		dc.w $2002		; 2
		dc.w $4003		; 3
		dc.w $3004		; 4
; ===========================================================================

loc_104CE:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		lea	word_104C4(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$1A(a0)
		move.l	#Map_107F6,4(a0)
		move.w	#$4000,2(a0)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_1050E
		move.l	#Map_1084E,4(a0)
		move.w	#$4000,2(a0)

loc_1050E:				
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$2C(a0)
		move.w	$C(a0),$34(a0)
		move.w	8(a0),$32(a0)
		move.w	#$80,$26(a0)
		tst.b	$28(a0)
		bpl.s	loc_10564
		addq.b	#6,$24(a0)
		andi.b	#$F,$28(a0)
		move.b	#$30,$16(a0) ; '0'
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_1055A
		move.b	#$28,$16(a0) ; '('

loc_1055A:				
		bset	#4,1(a0)
		bra.w	loc_105D4
; ===========================================================================

loc_10564:				
		andi.b	#$F,$28(a0)

loc_1056A:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_10580
		tst.b	$38(a0)
		beq.s	loc_1058C
		subq.b	#4,$38(a0)
		bra.s	loc_1058C
; ===========================================================================

loc_10580:				
		cmpi.b	#$40,$38(a0) ; '@'
		beq.s	loc_1058C
		addq.b	#4,$38(a0)

loc_1058C:				
					
		move.w	8(a0),-(sp)
		bsr.w	sub_10638
		bsr.w	sub_1061E
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		bsr.w	sub_108AE
		bra.s	loc_105B0
; ===========================================================================

loc_105A8:				
		bsr.w	sub_10638
		bsr.w	sub_1061E

loc_105B0:				
					
		tst.w	(f_two_player).w
		beq.s	loc_105BA
		bra.w	DisplaySprite
; ===========================================================================

loc_105BA:				
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_105D0
		bra.w	DisplaySprite
; ===========================================================================

loc_105D0:				
					
		bra.w	DeleteObject
; ===========================================================================

loc_105D4:				
					
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_105EA
		tst.b	$38(a0)
		beq.s	loc_105F6
		subq.b	#4,$38(a0)
		bra.s	loc_105F6
; ===========================================================================

loc_105EA:				
		cmpi.b	#$40,$38(a0) ; '@'
		beq.s	loc_105F6
		addq.b	#4,$38(a0)

loc_105F6:				
					
		move.w	8(a0),-(sp)
		bsr.w	sub_10638

loc_105FE:
		bsr.w	sub_1061E
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	sub_108B4
		bra.s	loc_105B0

; =============== S U B	R O U T	I N E =======================================


sub_1061E:				
					
		move.b	$38(a0),d0
		bsr.w	sub_108A8
		move.w	#$400,d1
		muls.w	d1,d0
		swap	d0
		add.w	$2C(a0),d0
		move.w	d0,$C(a0)
		rts	
; End of function sub_1061E


; =============== S U B	R O U T	I N E =======================================


sub_10638:				
					
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_1064C(pc,d0.w),d1
		jmp	off_1064C(pc,d1.w)
; End of function sub_10638

; ===========================================================================
off_1064C:	dc.w locret_10668-off_1064C; 0 
					
		dc.w loc_1067A-off_1064C; 1
		dc.w loc_106C0-off_1064C; 2
		dc.w loc_106D8-off_1064C; 3
		dc.w loc_10702-off_1064C; 4
		dc.w loc_1066A-off_1064C; 5
		dc.w loc_106B0-off_1064C; 6
		dc.w loc_10778-off_1064C; 7
		dc.w loc_107A4-off_1064C; 8
		dc.w locret_10668-off_1064C; 9
		dc.w loc_107BC-off_1064C; 10
		dc.w loc_107D6-off_1064C; 11
		dc.w loc_106A2-off_1064C; 12
		dc.w loc_10692-off_1064C; 13
; ===========================================================================

locret_10668:				
		rts	
; ===========================================================================

loc_1066A:				
		move.w	$32(a0),d0
		move.b	$26(a0),d1
		neg.b	d1
		addi.b	#$40,d1	; '@'
		bra.s	loc_10686
; ===========================================================================

loc_1067A:				
		move.w	$32(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1	; '@'

loc_10686:				
		ext.w	d1
		add.w	d1,d0
		move.w	d0,8(a0)
		bra.w	loc_107EE
; ===========================================================================

loc_10692:				
		move.w	$34(a0),d0
		move.b	($FFFFFE6C).w,d1
		neg.b	d1
		addi.b	#$30,d1	; '0'
		bra.s	loc_106CC
; ===========================================================================

loc_106A2:				
		move.w	$34(a0),d0
		move.b	($FFFFFE6C).w,d1
		subi.b	#$30,d1	; '0'
		bra.s	loc_106CC
; ===========================================================================

loc_106B0:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		neg.b	d1
		addi.b	#$40,d1	; '@'
		bra.s	loc_106CC
; ===========================================================================

loc_106C0:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1	; '@'

loc_106CC:				
					
		ext.w	d1
		add.w	d1,d0
		move.w	d0,$2C(a0)
		bra.w	loc_107EE
; ===========================================================================

loc_106D8:				
		tst.w	$3A(a0)
		bne.s	loc_106F0
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_106EE
		move.w	#$1E,$3A(a0)

locret_106EE:				
					
		rts	
; ===========================================================================

loc_106F0:				
		subq.w	#1,$3A(a0)
		bne.s	locret_106EE
		move.w	#$20,$3A(a0) ; ' '
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_10702:				
		tst.w	$3A(a0)

loc_10706:
		beq.s	loc_10730

loc_10708:
		subq.w	#1,$3A(a0)
		bne.s	loc_10730
		bclr	#3,$22(a0)
		beq.s	loc_1071C
		lea	($FFFFB000).w,a1
		bsr.s	sub_1075E

loc_1071C:				
		bclr	#4,$22(a0)
		beq.s	loc_1072A
		lea	($FFFFB040).w,a1
		bsr.s	sub_1075E

loc_1072A:				
		move.b	#6,$24(a0)

loc_10730:				
					
		move.l	$2C(a0),d3
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$2C(a0)
		addi.w	#$38,$12(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$120,d0
		cmp.w	$2C(a0),d0
		bcc.s	locret_1075C
		move.b	#4,$24(a0)

locret_1075C:				
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_1075E:				
					
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.w	$12(a0),$12(a1)
		rts	
; End of function sub_1075E

; ===========================================================================

loc_10778:				
		tst.w	$3A(a0)
		bne.s	loc_10798
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#4,d0
		tst.b	(a2,d0.w)
		beq.s	locret_10796
		move.w	#$3C,$3A(a0) ; '<'

locret_10796:				
					
		rts	
; ===========================================================================

loc_10798:				
		subq.w	#1,$3A(a0)
		bne.s	locret_10796
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_107A4:				
		subq.w	#2,$2C(a0)
		move.w	$34(a0),d0
		subi.w	#$200,d0
		cmp.w	$2C(a0),d0
		bne.s	locret_107BA
		clr.b	$28(a0)

locret_107BA:				
		rts	
; ===========================================================================

loc_107BC:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		subi.b	#$40,d1	; '@'
		ext.w	d1
		asr.w	#1,d1
		add.w	d1,d0
		move.w	d0,$2C(a0)
		bra.w	loc_107EE
; ===========================================================================

loc_107D6:				
		move.w	$34(a0),d0
		move.b	$26(a0),d1
		neg.b	d1
		addi.b	#$40,d1	; '@'
		ext.w	d1
		asr.w	#1,d1
		add.w	d1,d0
		move.w	d0,$2C(a0)

loc_107EE:				
					
		move.b	($FFFFFE78).w,$26(a0)
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_107F6:	dc.w byte_107FA-Map_107F6; 0	
					
		dc.w byte_1080C-Map_107F6; 1
byte_107FA:	dc.b   0,  2,$F4, $F,  0,$56,  0,$2B,$FF,$E0,$F4, $F,  8,$56,  8,$2B; 0
					
		dc.b   0,  0		; 16
byte_1080C:	dc.b   0,  8,$CC,  7,  0, $A,  0,  5,$FF,$E0,$CC, $D,  0,$12,  0,  9; 0
					
		dc.b $FF,$F0,$DC, $D,  0,$1A,  0, $D,$FF,$F0,$CC,  7,  0,$22,  0,$11; 16
		dc.b   0,$10,$EC, $F,  0,$2A,  0,$15,$FF,$E0,$EC, $F,  8,$2A,  8,$15; 32
		dc.b   0,  0, $C, $F,  0,$3A,  0,$1D,$FF,$E0, $C, $F,  8,$3A,  8,$1D; 48
		dc.b   0,  0		; 64
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1084E:	dc.w byte_10852-Map_1084E; 0	
					
		dc.w byte_10874-Map_1084E; 1
byte_10852:	dc.b   0,  4,$F0, $E,  0,  1,  0,  0,$FF,$E0,$F0, $E,  8,  1,  8,  0; 0
					
		dc.b   0,  0,  8, $E,  0,$2D,  0,$16,$FF,$E0,  8, $E,  0,$39,  0,$1C; 16
		dc.b   0,  0		; 32
byte_10874:	dc.b   0,  6,$D0, $E,  0,  1,  0,  0,$FF,$E0,$D0, $E,  8,  1,  8,  0; 0
					
		dc.b   0,  0,$E8, $F,  0, $D,  0,  6,$FF,$E0,$E8, $F,  0,$1D,  0, $E; 16
		dc.b   0,  0,  8, $F,  0, $D,  0,  6,$FF,$E0,  8, $F,  0,$1D,  0, $E; 32
		dc.b   0,  0		; 48
; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_108A8:				
		jmp	(CalcSine).l
; End of function sub_108A8


; =============== S U B	R O U T	I N E =======================================


sub_108AE:				
		jmp	DetectPlatform
; End of function sub_108AE


; =============== S U B	R O U T	I N E =======================================


sub_108B4:				
		jmp	SolidObject
; End of function sub_108B4

; ===========================================================================
		dc.w 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Collapsing platform from either OOZ or MCZ
; ----------------------------------------------------------------------------

CollapseLedge:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_108CA(pc,d0.w),d1
		jmp	off_108CA(pc,d1.w)
; ===========================================================================
off_108CA:	dc.w loc_108D0-off_108CA; 0 
					
		dc.w loc_1097C-off_108CA; 1
		dc.w loc_109B4-off_108CA; 2
; ===========================================================================

loc_108D0:				
		addq.b	#2,$24(a0)
		move.l	#Map_10C6C,4(a0)
		move.w	#$4000,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#7,$38(a0)
		move.b	$28(a0),$1A(a0)
		move.l	#byte_10BF2,$34(a0)
		cmpi.b	#8,(v_zone).w
		bne.s	loc_10938
		move.l	#Map_1101C,4(a0)
		move.w	#$434A,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$30,$19(a0) ; '0'
		move.l	#byte_10FEC,$3C(a0)
		move.l	#byte_10C0B,$34(a0)
		bra.s	loc_1097C
; ===========================================================================

loc_10938:				
		cmpi.b	#$A,(v_zone).w
		bne.s	loc_10962
		move.l	#Map_110C6,4(a0)
		move.w	#$639D,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$40,$19(a0) ; '@'
		move.l	#byte_10FDC,$3C(a0)
		bra.s	loc_1097C
; ===========================================================================

loc_10962:				
		move.l	#byte_10C3C,$3C(a0)
		move.b	#$34,$19(a0) ; '4'
		move.b	#$38,$16(a0)
		bset	#4,1(a0)

loc_1097C:				
					
					; DATA XREF: ...
		tst.b	$3A(a0)
		beq.s	loc_1098E
		tst.b	$38(a0)
		beq.w	loc_10B68
		subq.b	#1,$38(a0)

loc_1098E:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	sub_1099E
		move.b	#1,$3A(a0)

; =============== S U B	R O U T	I N E =======================================


sub_1099E:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		movea.l	$3C(a0),a2
		move.w	8(a0),d4
		bsr.w	sub_111C8
		bra.w	MarkObjGone
; End of function sub_1099E

; ===========================================================================

loc_109B4:				
		tst.b	$38(a0)
		beq.s	loc_109F8
		tst.b	$3A(a0)
		bne.s	loc_109C8
		subq.b	#1,$38(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_109C8:				
		bsr.w	sub_1099E
		subq.b	#1,$38(a0)
		bne.s	locret_109F6
		lea	($FFFFB000).w,a1
		bsr.s	sub_109DC
		lea	($FFFFB040).w,a1

; =============== S U B	R O U T	I N E =======================================


sub_109DC:				
		btst	#3,$22(a1)
		beq.s	locret_109F6
		bclr	#3,$22(a1)
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)

locret_109F6:				
					
		rts	
; End of function sub_109DC

; ===========================================================================

loc_109F8:				
		bsr.w	ObjectFall
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Collapsing platform from ARZ
; ----------------------------------------------------------------------------

CollapseFloor:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_10A16(pc,d0.w),d1
		jmp	off_10A16(pc,d1.w)
; ===========================================================================
off_10A16:	dc.w loc_10A1C-off_10A16; 0 
					
		dc.w loc_10AD6-off_10A16; 1
		dc.w loc_10B0E-off_10A16; 2
; ===========================================================================

loc_10A1C:				
		addq.b	#2,$24(a0)
		move.l	#Map_10F0C,4(a0)
		move.w	#$42B8,2(a0)
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#7,$38(a0)
		move.b	#$44,$19(a0) ; 'D'
		lea	(byte_10C17).l,a4
		btst	#0,$28(a0)
		beq.s	loc_10A5A
		lea	(byte_10C1F).l,a4

loc_10A5A:				
		move.l	a4,$34(a0)
		cmpi.b	#$A,(v_zone).w
		bne.s	loc_10A86
		move.l	#Map_110C6,4(a0)
		move.w	#$639D,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$40,$19(a0) ; '@'
		move.l	#byte_10C27,$34(a0)

loc_10A86:				
		cmpi.b	#$B,(v_zone).w
		bne.s	loc_10AAE
		move.l	#Map_11106,4(a0)
		move.w	#$63F4,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$20,$19(a0) ; ' '
		move.l	#byte_10C2E,$34(a0)

loc_10AAE:				
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_10AD6
		move.l	#Map_1115E,4(a0)
		move.w	#$4000,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$20,$19(a0) ; ' '
		move.l	#byte_10C34,$34(a0)

loc_10AD6:				
					
		tst.b	$3A(a0)
		beq.s	loc_10AE8
		tst.b	$38(a0)
		beq.w	loc_10B62
		subq.b	#1,$38(a0)

loc_10AE8:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	sub_10AF8
		move.b	#1,$3A(a0)

; =============== S U B	R O U T	I N E =======================================


sub_10AF8:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	sub_111CE
		bra.w	MarkObjGone
; End of function sub_10AF8

; ===========================================================================

loc_10B0E:				
		tst.b	$38(a0)
		beq.s	loc_10B52
		tst.b	$3A(a0)
		bne.s	loc_10B22
		subq.b	#1,$38(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_10B22:				
		bsr.w	sub_10AF8
		subq.b	#1,$38(a0)
		bne.s	locret_10B50
		lea	($FFFFB000).w,a1
		bsr.s	sub_10B36
		lea	($FFFFB040).w,a1

; =============== S U B	R O U T	I N E =======================================


sub_10B36:				
		btst	#3,$22(a1)
		beq.s	locret_10B50
		bclr	#3,$22(a1)
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)

locret_10B50:				
					
		rts	
; End of function sub_10B36

; ===========================================================================

loc_10B52:				
		bsr.w	ObjectFall
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_10B62:				
		addq.b	#1,$1A(a0)
		bra.s	loc_10B6C
; ===========================================================================

loc_10B68:				
		addq.b	#2,$1A(a0)

loc_10B6C:				
		movea.l	$34(a0),a4
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		movea.l	4(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#5,1(a0)
		_move.b	0(a0),d4
		move.b	1(a0),d5
		movea.l	a0,a1
		bra.s	loc_10B9E
; ===========================================================================

loc_10B96:				
		bsr.w	SingleObjLoad
		bne.s	loc_10BE4
		addq.w	#8,a3

loc_10B9E:				
		move.b	#4,$24(a1)
		_move.b	d4,0(a1)
		move.l	a3,4(a1)
		move.b	d5,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	2(a0),2(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.b	$16(a0),$16(a1)
		move.b	(a4)+,$38(a1)
		cmpa.l	a0,a1
		bcc.s	loc_10BE0
		bsr.w	DisplaySprite2

loc_10BE0:				
		dbf	d1,loc_10B96

loc_10BE4:				
		bsr.w	DisplaySprite
		move.w	#$B9,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_10BF2:	dc.b $1C,$18,$14,$10,$1A,$16,$12, $E, $A,  6,$18,$14,$10, $C,  8,  4; 0
					
		dc.b $16,$12, $E, $A,  6,  2,$14,$10, $C; 16
byte_10C0B:	dc.b $18,$1C,$20,$1E,$1A,$16,  6, $E,$14,$12, $A,  2; 0
					
byte_10C17:	dc.b $1E,$16, $E,  6,$1A,$12, $A,  2; 0	
byte_10C1F:	dc.b $16,$1E,$1A,$12,  6, $E, $A,  2; 0	
byte_10C27:	dc.b $1A,$12, $A,  2,$16, $E,  6; 0 
byte_10C2E:	dc.b $1A,$16,$12, $E, $A,  2; 0	
byte_10C34:	dc.b $16,$1A,$18,$12,  6, $E, $A,  2; 0	
byte_10C3C:	dc.b $20,$20,$20,$20,$20,$20,$20,$20,$21,$21,$22,$22,$23,$23,$24,$24; 0
					
		dc.b $25,$25,$26,$26,$27,$27,$28,$28,$29,$29,$2A,$2A,$2B,$2B,$2C,$2C; 16
		dc.b $2D,$2D,$2E,$2E,$2F,$2F,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30; 32
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_10C6C:	dc.w word_10C74-Map_10C6C; 0	
					
		dc.w word_10CF6-Map_10C6C; 1
		dc.w word_10D78-Map_10C6C; 2
		dc.w word_10E42-Map_10C6C; 3
word_10C74:	dc.w $10		
		dc.w $C80E,  $57,  $2B,	 $10; 0
		dc.w $D00D,  $63,  $31,$FFF0; 4
		dc.w $E00D,  $6B,  $35,	 $10; 8
		dc.w $E00D,  $73,  $39,$FFF0; 12
		dc.w $D806,  $7B,  $3D,$FFE0; 16
		dc.w $D806,  $81,  $40,$FFD0; 20
		dc.w $F00D,  $87,  $43,	 $10; 24
		dc.w $F00D,  $8F,  $47,$FFF0; 28
		dc.w $F005,  $97,  $4B,$FFE0; 32
		dc.w $F005,  $9B,  $4D,$FFD0; 36
		dc.w	$D,  $9F,  $4F,	 $10; 40
		dc.w	 5,  $A7,  $53,	   0; 44
		dc.w	$D,  $AB,  $55,$FFE0; 48
		dc.w	 5,  $B3,  $59,$FFD0; 52
		dc.w $100D,  $AB,  $55,	 $10; 56
		dc.w $1005,  $B7,  $5B,	   0; 60
word_10CF6:	dc.w $10		
		dc.w $C80E,  $57,  $2B,	 $10; 0
		dc.w $D00D,  $63,  $31,$FFF0; 4
		dc.w $E00D,  $6B,  $35,	 $10; 8
		dc.w $E00D,  $73,  $39,$FFF0; 12
		dc.w $D806,  $7B,  $3D,$FFE0; 16
		dc.w $D806,  $BB,  $5D,$FFD0; 20
		dc.w $F00D,  $87,  $43,	 $10; 24
		dc.w $F00D,  $8F,  $47,$FFF0; 28
		dc.w $F005,  $97,  $4B,$FFE0; 32
		dc.w $F005,  $C1,  $60,$FFD0; 36
		dc.w	$D,  $9F,  $4F,	 $10; 40
		dc.w	 5,  $A7,  $53,	   0; 44
		dc.w	$D,  $AB,  $55,$FFE0; 48
		dc.w	 5,  $B7,  $5B,$FFD0; 52
		dc.w $100D,  $AB,  $55,	 $10; 56
		dc.w $1005,  $B7,  $5B,	   0; 60
word_10D78:	dc.w $19		
		dc.w $C806,  $5D,  $2E,	 $20; 0
		dc.w $C806,  $57,  $2B,	 $10; 4
		dc.w $D005,  $67,  $33,	   0; 8
		dc.w $D005,  $63,  $31,$FFF0; 12
		dc.w $E005,  $6F,  $37,	 $20; 16
		dc.w $E005,  $6B,  $35,	 $10; 20
		dc.w $E005,  $77,  $3B,	   0; 24
		dc.w $E005,  $73,  $39,$FFF0; 28
		dc.w $D806,  $7B,  $3D,$FFE0; 32
		dc.w $D806,  $81,  $40,$FFD0; 36
		dc.w $F005,  $8B,  $45,	 $20; 40
		dc.w $F005,  $87,  $43,	 $10; 44
		dc.w $F005,  $93,  $49,	   0; 48
		dc.w $F005,  $8F,  $47,$FFF0; 52
		dc.w $F005,  $97,  $4B,$FFE0; 56
		dc.w $F005,  $9B,  $4D,$FFD0; 60
		dc.w	 5,  $8B,  $45,	 $20; 64
		dc.w	 5,  $8B,  $45,	 $10; 68
		dc.w	 5,  $A7,  $53,	   0; 72
		dc.w	 5,  $AB,  $55,$FFF0; 76
		dc.w	 5,  $AB,  $55,$FFE0; 80
		dc.w	 5,  $B3,  $59,$FFD0; 84
		dc.w $1005,  $AB,  $55,	 $20; 88
		dc.w $1005,  $AB,  $55,	 $10; 92
		dc.w $1005,  $B7,  $5B,	   0; 96
word_10E42:	dc.w $19		
		dc.w $C806,  $5D,  $2E,	 $20; 0
		dc.w $C806,  $57,  $2B,	 $10; 4
		dc.w $D005,  $67,  $33,	   0; 8
		dc.w $D005,  $63,  $31,$FFF0; 12
		dc.w $E005,  $6F,  $37,	 $20; 16
		dc.w $E005,  $6B,  $35,	 $10; 20
		dc.w $E005,  $77,  $3B,	   0; 24
		dc.w $E005,  $73,  $39,$FFF0; 28
		dc.w $D806,  $7B,  $3D,$FFE0; 32
		dc.w $D806,  $BB,  $5D,$FFD0; 36
		dc.w $F005,  $8B,  $45,	 $20; 40
		dc.w $F005,  $87,  $43,	 $10; 44
		dc.w $F005,  $93,  $49,	   0; 48
		dc.w $F005,  $8F,  $47,$FFF0; 52
		dc.w $F005,  $97,  $4B,$FFE0; 56
		dc.w $F005,  $C1,  $60,$FFD0; 60
		dc.w	 5,  $8B,  $45,	 $20; 64
		dc.w	 5,  $8B,  $45,	 $10; 68
		dc.w	 5,  $A7,  $53,	   0; 72
		dc.w	 5,  $AB,  $55,$FFF0; 76
		dc.w	 5,  $AB,  $55,$FFE0; 80
		dc.w	 5,  $B7,  $5B,$FFD0; 84
		dc.w $1005,  $AB,  $55,	 $20; 88
		dc.w $1005,  $AB,  $55,	 $10; 92
		dc.w $1005,  $B7,  $5B,	   0; 96
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_10F0C:	dc.w word_10F14-Map_10F0C 
					
		dc.w word_10F36-Map_10F0C
		dc.w word_10F78-Map_10F0C
		dc.w word_10F9A-Map_10F0C
word_10F14:	dc.w 4			
		dc.w $F80D,    0,    0,$FFE0; 0
		dc.w  $80D,    0,    0,$FFE0; 4
		dc.w $F80D,    0,    0,	   0; 8
		dc.w  $80D,    0,    0,	   0; 12
word_10F36:	dc.w 8			
		dc.w $F805,    0,    0,$FFE0; 0
		dc.w $F805,    0,    0,$FFF0; 4
		dc.w $F805,    0,    0,	   0; 8
		dc.w $F805,    0,    0,	 $10; 12
		dc.w  $805,    0,    0,$FFE0; 16
		dc.w  $805,    0,    0,$FFF0; 20
		dc.w  $805,    0,    0,	   0; 24
		dc.w  $805,    0,    0,	 $10; 28
word_10F78:	dc.w 4			
		dc.w $F80D,    0,    0,$FFE0; 0
		dc.w  $80D,    8,    4,$FFE0; 4
		dc.w $F80D,    0,    0,	   0; 8
		dc.w  $80D,    8,    4,	   0; 12
word_10F9A:	dc.w 8			
		dc.w $F805,    0,    0,$FFE0; 0
		dc.w $F805,    4,    2,$FFF0; 4
		dc.w $F805,    0,    0,	   0; 8
		dc.w $F805,    4,    2,	 $10; 12
		dc.w  $805,    8,    4,$FFE0; 16
		dc.w  $805,   $C,    6,$FFF0; 20
		dc.w  $805,    8,    4,	   0; 24
		dc.w  $805,   $C,    6,	 $10; 28
byte_10FDC:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10; 0
					
byte_10FEC:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10; 0
					
		dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10; 16
		dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10; 32
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_1101C:	dc.w word_11022-Map_1101C; 0	
					
		dc.w word_11064-Map_1101C; 1
		dc.w word_11064-Map_1101C; 2
word_11022:	dc.w 8			
		dc.w $F00D,    0,    0,$FFD0; 0
		dc.w	$D,    8,    4,$FFD0; 4
		dc.w $F005,    4,    2,$FFF0; 8
		dc.w $F005, $804, $802,	   0; 12
		dc.w	 5,   $C,    6,$FFF0; 16
		dc.w	 5, $80C, $806,	   0; 20
		dc.w $F00D, $800, $800,	 $10; 24
		dc.w	$D, $808, $804,	 $10; 28
word_11064:	dc.w $C			
		dc.w $F005,    0,    0,$FFD0; 0
		dc.w $F005,    4,    2,$FFE0; 4
		dc.w $F005,    4,    2,$FFF0; 8
		dc.w $F005, $804, $802,	   0; 12
		dc.w $F005, $804, $802,	 $10; 16
		dc.w $F005, $800, $800,	 $20; 20
		dc.w	 5,    8,    4,$FFD0; 24
		dc.w	 5,   $C,    6,$FFE0; 28
		dc.w	 5,   $C,    6,$FFF0; 32
		dc.w	 5, $80C, $806,	   0; 36
		dc.w	 5, $80C, $806,	 $10; 40
		dc.w	 5, $808, $804,	 $20; 44
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_110C6:	dc.w byte_110CC-Map_110C6; 0	
					
		dc.w byte_110CC-Map_110C6; 1
		dc.w byte_110CC-Map_110C6; 2
byte_110CC:	dc.b   0,  7,$F0, $F,  8,$10,  8,  8,$FF,$C0,$F0, $F,  8,$10,  8,  8; 0
					
		dc.b $FF,$E0,$F0, $F,  8,$10,  8,  8,  0,  0,$F0, $F,  8,  0,  8,  0; 16
		dc.b   0,$20,$10, $D,  8,$20,  8,$10,$FF,$C0,$10, $D,  8,$20,  8,$10; 32
		dc.b $FF,$E0,$10, $D,  8,$20,  8,$10,  0,  0; 48
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11106:	dc.w byte_1110A-Map_11106; 0	
					
		dc.w byte_1112C-Map_11106; 1
byte_1110A:	dc.b   0,  4,$F0, $D,  0,  0,  0,  0,$FF,$E0,$F0, $D,  8,  0,  8,  0; 0
					
		dc.b   0,  0,  0,  9,  0,  8,  0,  4,$FF,$F0,  0, $B,  0, $E,  0,  7; 16
		dc.b   0,  8		; 32
byte_1112C:	dc.b   0,  6,$F0,  5,  0,  0,  0,  0,$FF,$E0,$F0,  5,  0,  4,  0,  2; 0
					
		dc.b $FF,$F0,$F0,  5,  8,  4,  8,  2,  0,  0,$F0,  5,  8,  0,  8,  0; 16
		dc.b   0,$10,  0,  9,  0,  8,  0,  4,$FF,$F0,  0, $B,  0, $E,  0,  7; 32
		dc.b   0,  8		; 48
Map_1115E:	dc.w byte_11162-Map_1115E; 0	
					
		dc.w byte_11184-Map_1115E; 1
byte_11162:	dc.b   0,  4,$F0, $D,  0,$55,  0,$2A,$FF,$E0,$F0, $D,  8,$55,  8,$2A; 0
					
		dc.b   0,  0,  0, $D,  0,$A3,  0,$51,$FF,$E0,  0, $D,  8,$A3,  8,$51; 16
		dc.b   0,  0		; 32
byte_11184:	dc.b   0,  8,$F0,  5,  0,$55,  0,$2A,$FF,$E0,$F0,  5,  0,$59,  0,$2C; 0
					
		dc.b $FF,$F0,$F0,  5,  8,$59,  8,$2C,  0,  0,$F0,  5,  8,$55,  8,$2A; 16
		dc.b   0,$10,  0,  5,  0,$A3,  0,$51,$FF,$E0,  0,  5,  0,$A7,  0,$53; 32
		dc.b $FF,$F0,  0,  5,  8,$A7,  8,$53,  0,  0,  0,  5,  8,$A3,  8,$51; 48
		dc.b   0,$10		; 64
; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_111C8:				
		jmp	loc_19C8A
; End of function sub_111C8


; =============== S U B	R O U T	I N E =======================================


sub_111CE:				
		jmp	DetectPlatform
; End of function sub_111CE

; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Bridge from EHZ
; ----------------------------------------------------------------------------

Scenery:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_111E2(pc,d0.w),d1
		jmp	off_111E2(pc,d1.w)
; ===========================================================================
off_111E2:	dc.w loc_112A4-off_111E2; 0 
					
		dc.w loc_112EC-off_111E2; 1
dword_111E6:	dc.l $00000000+Map_11552; 0 
		dc.w $43FD
		dc.w $406
		dc.l $1000000+Map_11552
		dc.w $43FD
		dc.w $406
		dc.l $1000000+Map_FC70
		dc.w $43B6
		dc.w $401
		dc.l $2000000+Map_11552
		dc.w $23FD
		dc.w $1006
		dc.l $3000000+Map_21F14
		dc.w $43E6
		dc.w $804
		dc.l $4000000+Map_21F14
		dc.w $43E6
		dc.w $804
		dc.l $1000000+Map_21F14
		dc.w $43E6
		dc.w $2001
		dc.l $00000000+Map_113D6
		dc.w $4000
		dc.w $801
		dc.l $1000000+Map_113D6
		dc.w $4000
		dc.w $801
		dc.l $000000+Map_113EE
		dc.w $4428
		dc.w $404
		dc.l $000000+Map_11406
		dc.w $4346
		dc.w $404
		dc.l $1000000+Map_11406
		dc.w $4346
		dc.w $404
		dc.l $2000000+Map_11406
		dc.w $4346
		dc.w $404
		dc.l $3000000+Map_11406
		dc.w $4346
		dc.w $404
		dc.l $4000000+Map_11406
		dc.w $4346
		dc.w $404
		dc.l $5000000+Map_11406
		dc.w $4346
		dc.w $404
		dc.l $000000+Map_114AE
		dc.w $4346
		dc.w $1804
		dc.l $1000000+Map_114AE
		dc.w $4346
		dc.w $1804
		dc.l $2000000+Map_114AE
		dc.w $4346
		dc.w $804
		dc.l $3000000+Map_114AE
		dc.w $4346
		dc.w $804
		dc.l $4000000+Map_114AE
		dc.w $4346
		dc.w $804
byte_1128E:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   0		; 4
		dc.b   0		; 5
		dc.b   0		; 6
		dc.b   0		; 7
		dc.b   0		; 8
		dc.b   0		; 9
		dc.b   0		; 10
		dc.b   0		; 11
		dc.b   0		; 12
		dc.b $30		; 13
		dc.b $40		; 14
		dc.b $60		; 15
		dc.b   0		; 16
		dc.b   0		; 17
		dc.b $30		; 18
		dc.b $40		; 19
		dc.b $50		; 20
		dc.b   0		; 21
; ===========================================================================

loc_112A4:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	d0,d1
		lsl.w	#3,d0
		lea	(dword_111E6)(pc),a1
		lea	(a1,d0.w),a1
		move.b	(a1),$1A(a0)
		move.l	(a1)+,4(a0)
		move.w	(a1)+,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
		lea	(byte_1128E)(pc),a1
		move.b	(a1,d1.w),d1
		beq.s	loc_112EC
		move.b	d1,$16(a0)
		bset	#4,1(a0)

loc_112EC:				
					
		bra.w	MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_112F0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_112FE(pc,d0.w),d1
		jmp	off_112FE(pc,d1.w)
; ===========================================================================
off_112FE:	dc.w loc_1131A-off_112FE; 0 
					
		dc.w loc_1135C-off_112FE; 1
dword_11302:	dc.l $3000000+Map_FC28; 0 
		dc.w $6300
		dc.w $401
		dc.l $000000+Map_11396
		dc.w $E35A
		dc.w $1001
		dc.l $000000+Map_11576
		dc.w $4536
		dc.w $1001
; ===========================================================================

loc_1131A:				
		addq.b	#2,$24(a0)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lsl.w	#3,d0
		lea	(dword_11302)(pc),a1
		lea	(a1,d0.w),a1
		move.b	(a1),$1A(a0)
		move.l	(a1)+,4(a0)
		move.w	(a1)+,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$18(a0)
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		lsr.b	#4,d0
		move.b	d0,$1C(a0)

loc_1135C:				
		lea	(off_1136A).l,a1
		bsr.w	AnimateSprite
		bra.w	MarkObjGone
; ===========================================================================
off_1136A:	dc.w byte_11372-off_1136A; 0 
					
		dc.w byte_1137A-off_1136A; 1
		dc.w byte_11389-off_1136A; 2
		dc.w byte_11392-off_1136A; 3
byte_11372:	dc.b   8,  3,  3,  4,  5,  5,  4,$FF; 0	
byte_1137A:	dc.b   5,  0,  0,  0,  1,  2,  3,  3,  2,  1,  2,  3,  3,  1,$FF; 0
					
byte_11389:	dc.b  $B,  0,  1,  2,  3,  4,  5,$FD,  3; 0 
byte_11392:	dc.b $7F,  6,$FD,  2	; 0 
					
; --------------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------------
Map_11396:	dc.w word_1139E-Map_11396; 0	
					
		dc.w word_113A8-Map_11396; 1
		dc.w word_113B2-Map_11396; 2
		dc.w word_113C4-Map_11396; 3
word_1139E:	dc.w 1			
		dc.w $F40A,    0,    0,$FFF4; 0
word_113A8:	dc.w 1			
		dc.w $F40A,    9,    4,$FFF4; 0
word_113B2:	dc.w 2			
		dc.w $F00D,  $12,    9,$FFF0; 0
		dc.w	$D,$1812,$1809,$FFF0; 4
word_113C4:	dc.w 2			
		dc.w $F00D,  $1A,   $D,$FFF0; 0
		dc.w	$D,$181A,$180D,$FFF0; 4
; ----------------------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------------------
Map_113D6:	dc.w word_113DA-Map_113D6; 0	
					
		dc.w word_113E4-Map_113D6; 1
word_113DA:	dc.w 1			
		dc.w $F805,    2,    1,$FFF8; 0
word_113E4:	dc.w 1			
		dc.w $F805,    6,    3,$FFF8; 0
; --------------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------------
Map_113EE:	dc.w word_113F2-Map_113EE; 0	
					
		dc.w word_113FC-Map_113EE; 1
word_113F2:	dc.w 1			
		dc.w $F801,    0,    0,$FFFC; 0
word_113FC:	dc.w 1			
		dc.w $F801,    2,    1,$FFFC; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11406:	dc.w word_11412-Map_11406; 0	
					
		dc.w word_1141C-Map_11406; 1
		dc.w word_11426-Map_11406; 2
		dc.w word_11438-Map_11406; 3
		dc.w word_11452-Map_11406; 4
		dc.w word_11474-Map_11406; 5
word_11412:	dc.w 1			
		dc.w $F801,    0,    0,$FFFC; 0
word_1141C:	dc.w 1			
		dc.w $F003,    0,    0,$FFFC; 0
word_11426:	dc.w 2			
		dc.w $E801,    0,    0,$FFFC; 0
		dc.w $F803,    0,    0,$FFFC; 4
word_11438:	dc.w 3			
		dc.w $D003,    0,    0,$FFFC; 0
		dc.w $F003,    0,    0,$FFFC; 4
		dc.w $1003,    0,    0,$FFFC; 8
word_11452:	dc.w 4			
		dc.w $C003,    0,    0,$FFFC; 0
		dc.w $E003,    0,    0,$FFFC; 4
		dc.w	 3,    0,    0,$FFFC; 8
		dc.w $2003,    0,    0,$FFFC; 12
word_11474:	dc.w 7			
		dc.w $9800,    4,    2,$FFFC; 0
		dc.w $A003,    0,    0,$FFFC; 4
		dc.w $C003,    0,    0,$FFFC; 8
		dc.w $E003,    0,    0,$FFFC; 12
		dc.w	 3,    0,    0,$FFFC; 16
		dc.w $2003,    0,    0,$FFFC; 20
		dc.w $4003,    0,    0,$FFFC; 24
; --------------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------------
Map_114AE:	dc.w word_114B8-Map_114AE; 0	
					
		dc.w word_114CA-Map_114AE; 1
		dc.w word_114EC-Map_114AE; 2
		dc.w word_11506-Map_114AE; 3
		dc.w word_11528-Map_114AE; 4
word_114B8:	dc.w 2			
		dc.w $F007,    5,    2,$FFE8; 0
		dc.w $F007,    5,    2,	   8; 4
word_114CA:	dc.w 4			
		dc.w $E007,    5,    2,$FFE8; 0
		dc.w $E007,    5,    2,	   8; 4
		dc.w	 7,    5,    2,$FFE8; 8
		dc.w	 7,    5,    2,	   8; 12
word_114EC:	dc.w 3			
		dc.w $D007,    5,    2,$FFF8; 0
		dc.w $F007,    5,    2,$FFF8; 4
		dc.w $1007,    5,    2,$FFF8; 8
word_11506:	dc.w 4			
		dc.w $C007,    5,    2,$FFF8; 0
		dc.w $E007,    5,    2,$FFF8; 4
		dc.w	 7,    5,    2,$FFF8; 8
		dc.w $2007,    5,    2,$FFF8; 12
word_11528:	dc.w 5			
		dc.w $B007,    5,    2,$FFF8; 0
		dc.w $D007,    5,    2,$FFF8; 4
		dc.w $F007,    5,    2,$FFF8; 8
		dc.w $1007,    5,    2,$FFF8; 12
		dc.w $3007,    5,    2,$FFF8; 16
; --------------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------------
Map_11552:	dc.w word_11558-Map_11552; 0	
					
		dc.w word_11562-Map_11552; 1
		dc.w word_1156C-Map_11552; 2
word_11558:	dc.w 1			
		dc.w $F801,    4,    2,$FFFC; 0
word_11562:	dc.w 1			
		dc.w $F801,    6,    3,$FFFC; 0
word_1156C:	dc.w 1			
		dc.w $FC0C,    0,    0,$FFF0; 0
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_11576:	dc.w word_11584-Map_11576; 0	
					
		dc.w word_1158E-Map_11576; 1
		dc.w word_11598-Map_11576; 2
		dc.w word_115A2-Map_11576; 3
		dc.w word_115AC-Map_11576; 4
		dc.w word_115B6-Map_11576; 5
		dc.w byte_115C0-Map_11576; 6
word_11584:	dc.w 1			
		dc.w  $204,    0,    0,$FFF8; 0
word_1158E:	dc.w 1			
		dc.w	 4,    0,    0,$FFF8; 0
word_11598:	dc.w 1			
		dc.w $FE04,    0,    0,$FFF8; 0
word_115A2:	dc.w 1			
		dc.w $FC04,    0,    0,$FFF8; 0
word_115AC:	dc.w 1			
		dc.w $FC08,    2,    1,$FFF4; 0
word_115B6:	dc.w 1			
		dc.w $FC0C,    5,    2,$FFF0; 0
byte_115C0:	dc.b   0		; 0 
		dc.b   0 ;  
; ===========================================================================
		nop	
; ----------------------------------------------------------------------------
; Sprite
;
; Stomper from MCZ
; ----------------------------------------------------------------------------

Stomper:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_115D2(pc,d0.w),d1
		jmp	off_115D2(pc,d1.w)
; ===========================================================================
off_115D2:	dc.w loc_115D6-off_115D2; 0 
					
		dc.w loc_11610-off_115D2; 1
; ===========================================================================

loc_115D6:				
		addq.b	#2,$24(a0)
		move.l	#Map_11666,4(a0)
		move.w	#$4000,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$32(a0)
		move.b	#$50,$16(a0) ; 'P'
		bset	#4,1(a0)

loc_11610:				
		tst.b	$25(a0)
		bne.s	loc_1162A
		addq.w	#1,$30(a0)
		cmpi.w	#$60,$30(a0) ; '`'
		bne.s	loc_1163C
		move.b	#2,$25(a0)
		bra.s	loc_1163C
; ===========================================================================

loc_1162A:				
		subq.w	#8,$30(a0)
		bhi.s	loc_1163C
		move.w	#0,$30(a0)
		move.b	#0,$25(a0)

loc_1163C:				
					
		move.w	$32(a0),d0
		sub.w	$30(a0),d0
		move.w	d0,$C(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$40,d2	; '@'
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	sub_11884
		bra.w	MarkObjGone
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_11666:	dc.w word_11668-Map_11666; 0	
					
word_11668:	dc.w 6			
		dc.w $B009,  $1A,   $D,$FFF0; 0
		dc.w $C00F,  $20,  $10,$FFF0; 4
		dc.w $E00F,  $30,  $18,$FFF0; 8
		dc.w	$F,$1030,$1018,$FFF0; 12
		dc.w $200F,$1020,$1010,$FFF0; 16
		dc.w $4009,$101A,$100D,$FFF0; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; One way barrier from CPZ and DEZ
; ----------------------------------------------------------------------------

Barrier:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_116A8(pc,d0.w),d1
		jmp	off_116A8(pc,d1.w)
; ===========================================================================
off_116A8:	dc.w loc_116AC-off_116A8; 0 
					
		dc.w loc_1175E-off_116A8; 1
; ===========================================================================

loc_116AC:				
		addq.b	#2,$24(a0)
		move.l	#Map_11822,4(a0)
		move.w	#$2426,2(a0)
		move.b	#8,$19(a0)
		cmpi.b	#4,(v_zone).w
		beq.s	loc_116D4
		cmpi.b	#5,(v_zone).w
		bne.s	loc_116E0

loc_116D4:				
		move.w	#$6000,2(a0)
		move.b	#$C,$19(a0)

loc_116E0:				
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_116F4
		move.w	#$2394,2(a0)
		move.b	#8,$19(a0)

loc_116F4:				
		cmpi.b	#$E,(v_zone).w
		bne.s	loc_11708
		move.w	#$2328,2(a0)
		move.b	#8,$19(a0)

loc_11708:				
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_1171C
		move.w	#$23F8,2(a0)
		move.b	#8,$19(a0)

loc_1171C:				
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$32(a0)
		move.b	$28(a0),$1A(a0)
		move.w	8(a0),d2
		move.w	d2,d3
		subi.w	#$200,d2
		addi.w	#$18,d3
		btst	#0,$22(a0)
		beq.s	loc_11756
		subi.w	#-$1E8,d2
		addi.w	#$1E8,d3

loc_11756:				
		move.w	d2,$38(a0)
		move.w	d3,$3A(a0)

loc_1175E:				
		btst	#0,$22(a0)
		bne.s	loc_1177A
		move.w	$38(a0),d2
		move.w	8(a0),d3
		tst.b	$25(a0)
		beq.s	loc_1178C
		move.w	$3A(a0),d3
		bra.s	loc_1178C
; ===========================================================================

loc_1177A:				
		move.w	8(a0),d2
		move.w	$3A(a0),d3
		tst.b	$25(a0)
		beq.s	loc_1178C
		move.w	$38(a0),d2

loc_1178C:				
					
		move.w	$32(a0),d4
		move.w	d4,d5
		subi.w	#$20,d4	; ' '
		addi.w	#$20,d5	; ' '
		move.b	#0,$25(a0)
		lea	($FFFFB000).w,a1
		bsr.s	sub_117F4
		lea	($FFFFB040).w,a1
		bsr.s	sub_117F4
		tst.b	$25(a0)
		beq.s	loc_117C0
		cmpi.w	#$40,$30(a0) ; '@'
		beq.s	loc_117D6
		addq.w	#8,$30(a0)
		bra.s	loc_117CA
; ===========================================================================

loc_117C0:				
		tst.w	$30(a0)
		beq.s	loc_117D6
		subq.w	#8,$30(a0)

loc_117CA:				
		move.w	$32(a0),d0
		sub.w	$30(a0),d0
		move.w	d0,$C(a0)

loc_117D6:				
					
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$20,d2	; ' '
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	sub_11884
		bra.w	MarkObjGone

; =============== S U B	R O U T	I N E =======================================


sub_117F4:				
					
		move.w	8(a1),d0
		cmp.w	d2,d0
		blt.w	locret_11820
		cmp.w	d3,d0
		bcc.w	locret_11820

loc_11804:
		move.w	$C(a1),d0
		cmp.w	d4,d0
		bcs.w	locret_11820
		cmp.w	d5,d0
		bcc.w	locret_11820
		tst.b	$2A(a1)
		bmi.s	locret_11820
		move.b	#2,$25(a0)

locret_11820:				
		rts	
; End of function sub_117F4

; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_11822:	dc.w word_1182A-Map_11822; 0	
					
		dc.w word_1184C-Map_11822; 1
		dc.w word_1185E-Map_11822; 2
		dc.w word_11870-Map_11822; 3
word_1182A:	dc.w 4			
		dc.w $E005,    0,    0,$FFF8; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
		dc.w $1005,    0,    0,$FFF8; 12
word_1184C:	dc.w 2			
		dc.w $E00B,  $5F,  $2F,$FFF4; 0
		dc.w	$B,  $5F,  $2F,$FFF4; 4
word_1185E:	dc.w 2			
		dc.w $E007,    0,    0,$FFF8; 0
		dc.w	 7,    0,    0,$FFF8; 4
word_11870:	dc.w 2			
		dc.w $E007,    0,    0,$FFF8; 0
		dc.w	 7,    0,    0,$FFF8; 4
; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_11884:				
					
		jmp	SolidObject
; End of function sub_11884

; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; An animal and	the 100	that are given off from	busting	a badnick
; ----------------------------------------------------------------------------

Animals:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1189A(pc,d0.w),d1
		jmp	off_1189A(pc,d1.w)
; ===========================================================================
off_1189A:	dc.w loc_119BE-off_1189A; 0 
					
		dc.w loc_11ADE-off_1189A; 1
		dc.w loc_11B38-off_1189A; 2
		dc.w loc_11B74-off_1189A; 3
		dc.w loc_11B38-off_1189A; 4
		dc.w loc_11B38-off_1189A; 5
		dc.w loc_11B38-off_1189A; 6
		dc.w loc_11B74-off_1189A; 7
		dc.w loc_11B38-off_1189A; 8
		dc.w loc_11B74-off_1189A; 9
		dc.w loc_11B38-off_1189A; 10
		dc.w loc_11B38-off_1189A; 11
		dc.w loc_11B38-off_1189A; 12
		dc.w loc_11B38-off_1189A; 13
		dc.w loc_11BF4-off_1189A; 14
		dc.w loc_11C14-off_1189A; 15
		dc.w loc_11C14-off_1189A; 16
		dc.w loc_11C34-off_1189A; 17
		dc.w loc_11C6E-off_1189A; 18
		dc.w loc_11CC8-off_1189A; 19
		dc.w loc_11CE6-off_1189A; 20
		dc.w loc_11CC8-off_1189A; 21
		dc.w loc_11CE6-off_1189A; 22
		dc.w loc_11CC8-off_1189A; 23
		dc.w loc_11D24-off_1189A; 24
		dc.w loc_11C8A-off_1189A; 25
byte_118CE:	dc.b   6		; 0 
		dc.b   5		; 1
		dc.b   6		; 2
		dc.b   5		; 3
		dc.b   6		; 4
		dc.b   5		; 5
		dc.b   6		; 6
		dc.b   5		; 7
		dc.b   9		; 8
		dc.b   7		; 9
		dc.b   9		; 10
		dc.b   7		; 11
		dc.b   9		; 12
		dc.b   7		; 13
		dc.b   9		; 14
		dc.b   7		; 15
		dc.b   8		; 16
		dc.b   3		; 17
		dc.b   8		; 18
		dc.b   3		; 19
		dc.b   2		; 20
		dc.b   3		; 21
		dc.b   8		; 22
		dc.b   1		; 23
		dc.b  $B		; 24
		dc.b   5		; 25
		dc.b   0		; 26
		dc.b   7		; 27
		dc.b   4		; 28
		dc.b   1		; 29
		dc.b   2		; 30
		dc.b   5		; 31
		dc.b  $A		; 32
		dc.b   1		; 33
word_118F0:	dc.w $FE00		; 0 
		dc.w $FC00
		dc.l Map_11EAC
		dc.w $FE00
		dc.w $FD00
		dc.l Map_11E1C
		dc.w $FE80
		dc.w $FD00
		dc.l Map_11EAC
		dc.w $FEC0
		dc.w $FE80
		dc.l Map_11E88
		dc.w $FE40
		dc.w $FD00
		dc.l Map_11E64
		dc.w $FD00
		dc.w $FC00
		dc.l Map_11E1C
		dc.w $FD80
		dc.w $FC80
		dc.l Map_11E40
		dc.w $FD80
		dc.w $FD00
		dc.l Map_11E1C
		dc.w $FE00
		dc.w $FC80
		dc.l Map_11E40
		dc.w $FD40
		dc.w $FD00
		dc.l Map_11E40
		dc.w $FEC0
		dc.w $FE00
		dc.l Map_11E40
		dc.w $FE00
		dc.w $FD00
		dc.l Map_11E40
word_11950:	dc.w $FBC0		; 0 
		dc.w $FC00		; 1
		dc.w $FBC0		; 2
		dc.w $FC00		; 3
		dc.w $FBC0		; 4
		dc.w $FC00		; 5
		dc.w $FD00		; 6
		dc.w $FC00		; 7
		dc.w $FD00		; 8
		dc.w $FC00		; 9
		dc.w $FE80		; 10
		dc.w $FD00		; 11
		dc.w $FE80		; 12
		dc.w $FD00		; 13
		dc.w $FEC0		; 14
		dc.w $FE80		; 15
		dc.w $FE40		; 16
		dc.w $FD00		; 17
		dc.w $FE00		; 18
		dc.w $FD00		; 19
		dc.w $FD80		; 20
		dc.w $FC80		; 21
off_1197C:	dc.l Map_11E1C	; 0
		dc.l Map_11E1C	; 1
		dc.l Map_11E1C	; 2
		dc.l Map_11EAC	; 3
		dc.l Map_11EAC	; 4
		dc.l Map_11EAC	; 5
		dc.l Map_11EAC	; 6
		dc.l Map_11E88	; 7
		dc.l Map_11E64	; 8
		dc.l Map_11E1C	; 9
		dc.l Map_11E40	; 10
word_119A8:	dc.w  $5A5		; 0
		dc.w  $5A5		; 1
		dc.w  $5A5		; 2
		dc.w  $553		; 3
		dc.w  $553		; 4
		dc.w  $573		; 5
		dc.w  $573		; 6
		dc.w  $585		; 7
		dc.w  $593		; 8
		dc.w  $565		; 9
		dc.w  $5B3		; 10
; ===========================================================================

loc_119BE:				
		tst.b	$28(a0)
		beq.w	loc_11A2C
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.b	d0,$24(a0)
		subi.w	#$14,d0
		move.w	word_119A8(pc,d0.w),2(a0)
		add.w	d0,d0
		move.l	off_1197C(pc,d0.w),4(a0)
		lea	(word_11950)(pc),a1
		move.w	(a1,d0.w),$32(a0)
		move.w	(a1,d0.w),$10(a0)
		move.w	2(a1,d0.w),$34(a0)
		move.w	2(a1,d0.w),$12(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$16(a0)
		move.b	#4,1(a0)
		bset	#0,1(a0)
		move.b	#6,$18(a0)
		move.b	#8,$19(a0)
		move.b	#7,$1E(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_11A2C:				
		addq.b	#2,$24(a0)
		bsr.w	sub_11F3C
		move.w	#$580,2(a0)
		andi.w	#1,d0
		beq.s	loc_11A46
		move.w	#$594,2(a0)

loc_11A46:				
		moveq	#0,d1
		move.b	(v_zone).w,d1
		add.w	d1,d1
		add.w	d0,d1
		lea	(byte_118CE)(pc),a1
		move.b	(a1,d1.w),d0
		move.b	d0,$30(a0)
		lsl.w	#3,d0
		lea	(word_118F0)(pc),a1
		adda.w	d0,a1
		move.w	(a1)+,$32(a0)
		move.w	(a1)+,$34(a0)
		move.l	(a1)+,4(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$16(a0)
		move.b	#4,1(a0)
		bset	#0,1(a0)
		move.b	#6,$18(a0)
		move.b	#8,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#2,$1A(a0)
		move.w	#-$400,$12(a0)
		tst.b	$38(a0)
		bne.s	loc_11AD0
		bsr.w	SingleObjLoad
		bne.s	loc_11ACC
		_move.b	#$29,0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$3E(a0),d0
		lsr.w	#1,d0
		move.b	d0,$1A(a1)

loc_11ACC:				
		bra.w	DisplaySprite
; ===========================================================================

loc_11AD0:				
		move.b	#$1C,$24(a0)
		clr.w	$10(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_11ADE:				
		tst.b	1(a0)
		bpl.w	DeleteObject
		bsr.w	ObjectFall
		tst.w	$12(a0)
		bmi.s	loc_11B34
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_11B34
		add.w	d1,$C(a0)
		move.w	$32(a0),$10(a0)
		move.w	$34(a0),$12(a0)
		move.b	#1,$1A(a0)
		move.b	$30(a0),d0
		add.b	d0,d0
		addq.b	#4,d0
		move.b	d0,$24(a0)
		tst.b	$38(a0)
		beq.s	loc_11B34
		btst	#4,($FFFFFE0F).w
		beq.s	loc_11B34
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_11B34:				
					
		bra.w	DisplaySprite
; ===========================================================================

loc_11B38:				
					
		bsr.w	ObjectFall
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_11B62
		move.b	#0,$1A(a0)
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_11B62
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_11B62:				
					
		tst.b	$28(a0)
		bne.s	loc_11BD8
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_11B74:				
					
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		tst.w	$12(a0)
		bmi.s	loc_11BB0
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_11BB0
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)
		tst.b	$28(a0)
		beq.s	loc_11BB0
		cmpi.b	#$A,$28(a0)
		beq.s	loc_11BB0
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_11BB0:				
					
		subq.b	#1,$1E(a0)
		bpl.s	loc_11BC6
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_11BC6:				
		tst.b	$28(a0)
		bne.s	loc_11BD8
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_11BD8:				
					
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		bcs.s	loc_11BF0
		subi.w	#$180,d0
		bpl.s	loc_11BF0
		tst.b	1(a0)
		bpl.w	DeleteObject

loc_11BF0:				
					
		bra.w	DisplaySprite
; ===========================================================================

loc_11BF4:				
		tst.b	1(a0)
		bpl.w	DeleteObject
		subq.w	#1,$36(a0)
		bne.w	loc_11C10
		move.b	#2,$24(a0)
		move.b	#1,$18(a0)

loc_11C10:				
		bra.w	DisplaySprite
; ===========================================================================

loc_11C14:				
		bsr.w	sub_11DB8
		bcc.s	loc_11C30
		move.w	$32(a0),$10(a0)
		move.w	$34(a0),$12(a0)
		move.b	#$E,$24(a0)
		bra.w	loc_11B74
; ===========================================================================

loc_11C30:				
		bra.w	loc_11BD8
; ===========================================================================

loc_11C34:				
		bsr.w	sub_11DB8
		bpl.s	loc_11C6A
		clr.w	$10(a0)
		clr.w	$32(a0)
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		bsr.w	sub_11D78
		bsr.w	sub_11DA0
		subq.b	#1,$1E(a0)
		bpl.s	loc_11C6A
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_11C6A:				
					
		bra.w	loc_11BD8
; ===========================================================================

loc_11C6E:				
		bsr.w	sub_11DB8
		bpl.s	loc_11CC4
		move.w	$32(a0),$10(a0)
		move.w	$34(a0),$12(a0)
		move.b	#4,$24(a0)
		bra.w	loc_11B38
; ===========================================================================

loc_11C8A:				
		bsr.w	ObjectFall
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_11CC4
		move.b	#0,$1A(a0)
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_11CC4
		not.b	$29(a0)
		bne.s	loc_11CBA
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_11CBA:				
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_11CC4:				
					
		bra.w	loc_11BD8
; ===========================================================================

loc_11CC8:				
		bsr.w	sub_11DB8
		bpl.s	loc_11CE2
		clr.w	$10(a0)
		clr.w	$32(a0)
		bsr.w	ObjectFall
		bsr.w	sub_11D78
		bsr.w	sub_11DA0

loc_11CE2:				
		bra.w	loc_11BD8
; ===========================================================================

loc_11CE6:				
		bsr.w	sub_11DB8
		bpl.s	loc_11D20
		bsr.w	ObjectFall
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_11D20
		move.b	#0,$1A(a0)
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_11D20
		neg.w	$10(a0)
		bchg	#0,1(a0)
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_11D20:				
					
		bra.w	loc_11BD8
; ===========================================================================

loc_11D24:				
		bsr.w	sub_11DB8
		bpl.s	loc_11D74
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		tst.w	$12(a0)
		bmi.s	loc_11D5E
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_11D5E
		not.b	$29(a0)
		bne.s	loc_11D54
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_11D54:				
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

loc_11D5E:				
					
		subq.b	#1,$1E(a0)
		bpl.s	loc_11D74
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_11D74:				
					
		bra.w	loc_11BD8

; =============== S U B	R O U T	I N E =======================================


sub_11D78:				
					
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	locret_11D9E
		move.b	#0,$1A(a0)
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	locret_11D9E
		add.w	d1,$C(a0)
		move.w	$34(a0),$12(a0)

locret_11D9E:				
					
		rts	
; End of function sub_11D78


; =============== S U B	R O U T	I N E =======================================


sub_11DA0:				
					
		bset	#0,1(a0)
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		bcc.s	locret_11DB6
		bclr	#0,1(a0)

locret_11DB6:				
		rts	
; End of function sub_11DA0


; =============== S U B	R O U T	I N E =======================================


sub_11DB8:				
					
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		subi.w	#$B8,d0	
		rts	
; End of function sub_11DB8

; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; 100 points
; ----------------------------------------------------------------------------

Points:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_11DD4(pc,d0.w),d1
		jmp	off_11DD4(pc,d1.w)
; ===========================================================================
off_11DD4:	dc.w loc_11DD8-off_11DD4; 0 
					
		dc.w loc_11E06-off_11DD4; 1
; ===========================================================================

loc_11DD8:				
		addq.b	#2,$24(a0)
		move.l	#Map_11ED0,4(a0)
		move.w	#-$7B54,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#8,$19(a0)
		move.w	#-$300,$12(a0)

loc_11E06:				
		tst.w	$12(a0)
		bpl.w	DeleteObject
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		bra.w	DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11E1C:	dc.w word_11E2C-Map_11E1C; 0	
					
		dc.w word_11E36-Map_11E1C; 1
		dc.w word_11E22-Map_11E1C; 2
word_11E22:	dc.w 1			
		dc.w $EC07,    0,    0,$FFF8; 0
word_11E2C:	dc.w 1			
		dc.w $F805,    8,    4,$FFF8; 0
word_11E36:	dc.w 1			
		dc.w $F805,   $C,    6,$FFF8; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11E40:	dc.w word_11E50-Map_11E40; 0	
					
		dc.w word_11E5A-Map_11E40; 1
		dc.w word_11E46-Map_11E40; 2
word_11E46:	dc.w 1			
		dc.w $EC07,    0,    0,$FFF8; 0
word_11E50:	dc.w 1			
		dc.w $F809,    8,    4,$FFF4; 0
word_11E5A:	dc.w 1			
		dc.w $F809,   $E,    7,$FFF4; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11E64:	dc.w word_11E74-Map_11E64; 0	
					
		dc.w word_11E7E-Map_11E64; 1
		dc.w word_11E6A-Map_11E64; 2
word_11E6A:	dc.w 1			
		dc.w $F406,    0,    0,$FFF8; 0
word_11E74:	dc.w 1			
		dc.w $F809,    6,    3,$FFF4; 0
word_11E7E:	dc.w 1			; 0 
		dc.w $F809,   $C,    6,$FFF4; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11E88:	dc.w word_11E98-Map_11E88; 0	
					
		dc.w word_11EA2-Map_11E88; 1
		dc.w word_11E8E-Map_11E88; 2
word_11E8E:	dc.w 1			
		dc.w $F406,    0,    0,$FFF8; 0
word_11E98:	dc.w 1			
		dc.w $F805,    6,    3,$FFF8; 0
word_11EA2:	dc.w 1			
		dc.w $F805,   $A,    5,$FFF8; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_11EAC:	dc.w word_11EBC-Map_11EAC; 0	
					
		dc.w word_11EC6-Map_11EAC; 1
		dc.w word_11EB2-Map_11EAC; 2
word_11EB2:	dc.w 1			
		dc.w $F406,    0,    0,$FFF8; 0
word_11EBC:	dc.w 1			
		dc.w $F406,    6,    3,$FFF8; 0
word_11EC6:	dc.w 1			
		dc.w $F406,   $C,    6,$FFF8; 0
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_11ED0:	dc.w word_11EDE-Map_11ED0; 0	
					
		dc.w word_11EE8-Map_11ED0; 1
		dc.w word_11EF2-Map_11ED0; 2
		dc.w word_11EFC-Map_11ED0; 3
		dc.w word_11F0E-Map_11ED0; 4
		dc.w word_11F18-Map_11ED0; 5
		dc.w word_11F2A-Map_11ED0; 6
word_11EDE:	dc.w 1			
		dc.w $F805,    2,    1,$FFF8; 0
word_11EE8:	dc.w 1			
		dc.w $F805,    6,    3,$FFF8; 0
word_11EF2:	dc.w 1			
		dc.w $F805,   $A,    5,$FFF8; 0
word_11EFC:	dc.w 2			
		dc.w $F801,    0,    0,$FFF8; 0
		dc.w $F805,   $E,    7,	   0; 4
word_11F0E:	dc.w 1			
		dc.w $F801,    0,    0,$FFFC; 0
word_11F18:	dc.w 2			
		dc.w $F805,    2,    1,$FFF0; 0
		dc.w $F805,   $E,    7,	   0; 4
word_11F2A:	dc.w 2			
		dc.w $F805,   $A,    5,$FFF0; 0
		dc.w $F805,   $E,    7,	   0; 4

; =============== S U B	R O U T	I N E =======================================


sub_11F3C:				
		jmp	(RandomNumber).l
; End of function sub_11F3C

; ===========================================================================
		dc.w 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; A ring
; ----------------------------------------------------------------------------

Ring:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_11F52(pc,d0.w),d1
		jmp	off_11F52(pc,d1.w)
; ===========================================================================
off_11F52:	dc.w loc_11F5C-off_11F52; 0 
					
		dc.w loc_11F90-off_11F52; 1
		dc.w loc_11F9E-off_11F52; 2
		dc.w loc_11FB0-off_11F52; 3
		dc.w loc_11FBE-off_11F52; 4
; ===========================================================================

loc_11F5C:				
		addq.b	#2,$24(a0)
		move.w	8(a0),$32(a0)
		move.l	#Map_12382,4(a0)
		move.w	#$26BC,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#2,$18(a0)
		move.b	#$47,$20(a0) ; 'G'
		move.b	#8,$19(a0)

loc_11F90:				
		move.b	(v_syncani_1_frame).w,$1A(a0)
		move.w	$32(a0),d0
		bra.w	MarkObjGone2
; ===========================================================================

loc_11F9E:				
		addq.b	#2,$24(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.s	sub_11FC2

loc_11FB0:				
		lea	(byte_1237A).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

loc_11FBE:				
		bra.w	DeleteObject

; =============== S U B	R O U T	I N E =======================================


sub_11FC2:				
					
		tst.b	$3F(a0)
		bne.s	loc_1201E

loc_11FC8:				
		cmpi.w	#$3E7,(v_rings_collected_p1).w
		bcc.s	loc_11FD4
		addq.w	#1,(v_rings_collected_p1).w

loc_11FD4:				
					
		move.w	#$B5,d0	
		cmpi.w	#$3E7,(v_rings).w
		bcc.s	loc_12016
		addq.w	#1,(v_rings).w
		ori.b	#1,(v_hud_rings_update).w
		cmpi.w	#$64,(v_rings).w ; 'd'
		bcs.s	loc_12016
		bset	#1,(v_ring_reward).w
		beq.s	loc_1200A
		cmpi.w	#$C8,(v_rings).w
		bcs.s	loc_12016
		bset	#2,(v_ring_reward).w
		bne.s	loc_12016

loc_1200A:				
		addq.b	#1,(v_lives).w
		addq.b	#1,(f_hud_lives_update).w
		move.w	#$98,d0	

loc_12016:				
					
		jmp	(PlaySound2).l
; ===========================================================================
		rts	
; ===========================================================================

loc_1201E:				
		cmpi.w	#$3E7,(v_rings_collected_p2).w
		bcc.s	loc_1202A
		addq.w	#1,(v_rings_collected_p2).w

loc_1202A:				
		cmpi.w	#$3E7,(v_rings_p2).w
		bcc.s	loc_12036
		addq.w	#1,(v_rings_p2).w

loc_12036:				
		tst.w	(f_two_player).w
		beq.s	loc_11FD4
		ori.b	#1,(v_hud_rings_update_p2).w
		move.w	#$B5,d0	
		cmpi.w	#$64,(v_rings_p2).w ; 'd'
		bcs.s	loc_12072
		bset	#1,(v_ring_reward_p2).w
		beq.s	loc_12066
		cmpi.w	#$C8,(v_rings_p2).w
		bcs.s	loc_12072
		bset	#2,(v_ring_reward_p2).w
		bne.s	loc_12072

loc_12066:				
		addq.b	#1,(v_lives_p2).w
		addq.b	#1,(f_hud_lives_update_p2).w
		move.w	#$98,d0	

loc_12072:				
					
		jmp	(PlaySound2).l
; End of function sub_11FC2

; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Ring spray from character being hit by enemy
; ----------------------------------------------------------------------------

Sprite_12078:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_12086(pc,d0.w),d1
		jmp	off_12086(pc,d1.w)
; ===========================================================================
off_12086:	dc.w loc_12090-off_12086; 0 
					
		dc.w loc_12178-off_12086; 1
		dc.w loc_121DA-off_12086; 2
		dc.w loc_121EE-off_12086; 3
		dc.w loc_121FC-off_12086; 4
; ===========================================================================

loc_12090:				
		movea.l	a0,a1
		moveq	#0,d5
		move.w	(v_rings).w,d5
		tst.b	$3F(a0)
		beq.s	loc_120A2
		move.w	(v_rings_p2).w,d5

loc_120A2:				
		moveq	#$20,d0	; ' '
		cmp.w	d0,d5
		bcs.s	loc_120AA
		move.w	d0,d5

loc_120AA:				
		subq.w	#1,d5
		move.w	#$288,d4
		bra.s	loc_120BA
; ===========================================================================

loc_120B2:				
		bsr.w	SingleObjLoad
		bne.w	loc_12142

loc_120BA:				
		_move.b	#$37,0(a1) ; '7'
		addq.b	#2,$24(a1)
		move.b	#8,$16(a1)
		move.b	#8,$17(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#Map_12382,4(a1)
		move.w	#$26BC,2(a1)
		bsr.w	sub_16D8A
		move.b	#-$7C,1(a1)
		move.b	#3,$18(a1)
		move.b	#$47,$20(a1) ; 'G'
		move.b	#8,$19(a1)
		move.b	#-1,(v_syncani_3_time).w
		tst.w	d4
		bmi.s	loc_12132
		move.w	d4,d0
		bsr.w	sub_12668
		move.w	d4,d2
		lsr.w	#8,d2
		asl.w	d2,d0
		asl.w	d2,d1
		move.w	d0,d2
		move.w	d1,d3
		addi.b	#$10,d4
		bcc.s	loc_12132
		subi.w	#$80,d4	
		bcc.s	loc_12132
		move.w	#$288,d4

loc_12132:				
					
		move.w	d2,$10(a1)
		move.w	d3,$12(a1)
		neg.w	d2
		neg.w	d4
		dbf	d5,loc_120B2

loc_12142:				
		move.w	#$C6,d0	
		jsr	(PlaySound2).l
		tst.b	$3F(a0)
		bne.s	loc_12166
		move.w	#0,(v_rings).w
		move.b	#-$80,(v_hud_rings_update).w
		move.b	#0,(v_ring_reward).w
		bra.s	loc_12178
; ===========================================================================

loc_12166:				
		move.w	#0,(v_rings_p2).w
		move.b	#-$80,(v_hud_rings_update_p2).w
		move.b	#0,(v_ring_reward_p2).w

loc_12178:				
					
		move.b	(v_syncani_3_frame).w,$1A(a0)
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		bmi.s	loc_121B8
		move.b	($FFFFFE0F).w,d0
		add.b	d7,d0
		andi.b	#7,d0
		bne.s	loc_121B8
		tst.b	1(a0)
		bpl.s	loc_121D0
		jsr	loc_1EE56
		tst.w	d1
		bpl.s	loc_121B8
		add.w	d1,$C(a0)
		move.w	$12(a0),d0
		asr.w	#2,d0
		sub.w	d0,$12(a0)
		neg.w	$12(a0)

loc_121B8:				
					
		tst.b	(v_syncani_3_time).w
		beq.s	loc_121FC
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		bcs.s	loc_121FC
		bra.w	DisplaySprite
; ===========================================================================

loc_121D0:				
		tst.w	(f_two_player).w
		bne.w	loc_121FC
		bra.s	loc_121B8
; ===========================================================================

loc_121DA:				
		addq.b	#2,$24(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.w	sub_11FC2

loc_121EE:				
		lea	(byte_1237A).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

loc_121FC:				
					
		bra.w	DeleteObject
; ===========================================================================
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1220E(pc,d0.w),d1
		jmp	off_1220E(pc,d1.w)
; ===========================================================================
off_1220E:	dc.w loc_12216-off_1220E; 0 
					
		dc.w loc_12264-off_1220E; 1
		dc.w loc_12282-off_1220E; 2
		dc.w loc_122C0-off_1220E; 3
; ===========================================================================

loc_12216:				
		move.l	#Map_123E6,4(a0)
		move.w	#$2400,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$40,$19(a0) ; '@'
		tst.b	1(a0)
		bpl.s	loc_12264
		cmpi.b	#6,(f_got_emerald).w
		beq.w	loc_122C0
		cmpi.w	#$32,(v_rings).w ; '2'
		bcc.s	loc_1224E
		rts	
; ===========================================================================

loc_1224E:				
		addq.b	#2,$24(a0)
		move.b	#2,$18(a0)
		move.b	#$52,$20(a0) ; 'R'
		move.w	#$C40,(v_giantring_gfx_offset).w

loc_12264:				
					
		move.b	(v_syncani_1_frame).w,$1A(a0)
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================

loc_12282:				
		subq.b	#2,$24(a0)
		move.b	#0,$20(a0)
		bsr.w	SingleObjLoad
		bne.w	loc_122B4
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	a0,$3C(a1)
		move.w	($FFFFB008).w,d0
		cmp.w	8(a0),d0
		bcs.s	loc_122B4
		bset	#0,1(a1)

loc_122B4:				
					
		move.w	#$C3,d0	
		jsr	(PlaySound2).l
		bra.s	loc_12264
; ===========================================================================

loc_122C0:				
					
		bra.w	DeleteObject
; ===========================================================================
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_122D2(pc,d0.w),d1
		jmp	off_122D2(pc,d1.w)
; ===========================================================================
off_122D2:	dc.w loc_122D8-off_122D2; 0 
					
		dc.w loc_12306-off_122D2; 1
		dc.w loc_12376-off_122D2; 2
; ===========================================================================

loc_122D8:				
		addq.b	#2,$24(a0)
		move.l	#Map_124E6,4(a0)
		move.w	#$2462,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#0,$18(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#-1,$1A(a0)

loc_12306:				
		bsr.s	sub_12320
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite

; =============== S U B	R O U T	I N E =======================================


sub_12320:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_12366
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#8,$1A(a0)
		bcc.s	loc_12368
		cmpi.b	#3,$1A(a0)
		bne.s	locret_12366
		movea.l	$3C(a0),a1
		move.b	#6,$24(a1)
		move.b	#$1C,($FFFFB01C).w
		move.b	#1,(f_unused_ss_flag).w
		lea	($FFFFB000).w,a1
		bclr	#1,$2B(a1)
		bclr	#0,$2B(a1)

locret_12366:				
					
		rts	
; ===========================================================================

loc_12368:				
		addq.b	#2,$24(a0)
		move.w	#0,($FFFFB000).w
		addq.l	#4,sp
		rts	
; End of function sub_12320

; ===========================================================================

loc_12376:				
		bra.w	DeleteObject
; ===========================================================================
byte_1237A:	dc.b 0			; 0 
					
		dc.b 2			; 1
		dc.b 5			; 2
		dc.b 4			; 3
		dc.b 5			; 4
		dc.b 6			; 5
		dc.b 7			; 6
		dc.b $FC		; 7
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_12382:	dc.w byte_12394-Map_12382; 0	
					
		dc.w byte_1239E-Map_12382; 1
		dc.w byte_123A8-Map_12382; 2
		dc.w byte_123B2-Map_12382; 3
		dc.w byte_123BC-Map_12382; 4
		dc.w byte_123C6-Map_12382; 5
		dc.w byte_123D0-Map_12382; 6
		dc.w byte_123DA-Map_12382; 7
		dc.w byte_123E4-Map_12382; 8
byte_12394:	dc.b   0,  1,$F8,  5,  0,  0,  0,  0,$FF,$F8; 0	
byte_1239E:	dc.b   0,  1,$F8,  5,  0,  4,  0,  2,$FF,$F8; 0	
byte_123A8:	dc.b   0,  1,$F8,  1,  0,  8,  0,  4,$FF,$FC; 0	
byte_123B2:	dc.b   0,  1,$F8,  5,  8,  4,  8,  2,$FF,$F8; 0	
byte_123BC:	dc.b   0,  1,$F8,  5,  0, $A,  0,  5,$FF,$F8; 0	
byte_123C6:	dc.b   0,  1,$F8,  5,$18, $A,$18,  5,$FF,$F8; 0	
byte_123D0:	dc.b   0,  1,$F8,  5,  8, $A,  8,  5,$FF,$F8; 0	
byte_123DA:	dc.b   0,  1,$F8,  5,$10, $A,$10,  5,$FF,$F8; 0	
byte_123E4:	dc.b   0,  0		; 0 
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_123E6:	dc.w byte_123EE-Map_123E6; 0	
					
		dc.w byte_12440-Map_123E6; 1
		dc.w byte_12482-Map_123E6; 2
		dc.w byte_124A4-Map_123E6; 3
byte_123EE:	dc.b   0, $A,$E0,  8,  0,  0,  0,  0,$FF,$E8,$E0,  8,  0,  3,  0,  1; 0
					
		dc.b   0,  0,$E8, $C,  0,  6,  0,  3,$FF,$E0,$E8, $C,  0, $A,  0,  5; 16
		dc.b   0,  0,$F0,  7,  0, $E,  0,  7,$FF,$E0,$F0,  7,  0,$16,  0, $B; 32
		dc.b   0,$10,$10, $C,  0,$1E,  0, $F,$FF,$E0,$10, $C,  0,$22,  0,$11; 48
		dc.b   0,  0,$18,  8,  0,$26,  0,$13,$FF,$E8,$18,  8,  0,$29,  0,$14; 64
		dc.b   0,  0		; 80
byte_12440:	dc.b   0,  8,$E0, $C,  0,$2C,  0,$16,$FF,$F0,$E8,  8,  0,$30,  0,$18; 0
					
		dc.b $FF,$E8,$E8,  9,  0,$33,  0,$19,  0,  0,$F0,  7,  0,$39,  0,$1C; 16
		dc.b $FF,$E8,$F8,  5,  0,$41,  0,$20,  0,  8,  8,  9,  0,$45,  0,$22; 32
		dc.b   0,  0,$10,  8,  0,$4B,  0,$25,$FF,$E8,$18, $C,  0,$4E,  0,$27; 48
		dc.b $FF,$F0		; 64
byte_12482:	dc.b   0,  4,$E0,  7,  0,$52,  0,$29,$FF,$F4,$E0,  3,  8,$52,  8,$29; 0
					
		dc.b   0,  4,  0,  7,  0,$5A,  0,$2D,$FF,$F4,  0,  3,  8,$5A,  8,$2D; 16
		dc.b   0,  4		; 32
byte_124A4:	dc.b   0,  8,$E0, $C,  8,$2C,  8,$16,$FF,$F0,$E8,  8,  8,$30,  8,$18; 0
					
		dc.b   0,  0,$E8,  9,  8,$33,  8,$19,$FF,$E8,$F0,  7,  8,$39,  8,$1C; 16
		dc.b   0,  8,$F8,  5,  8,$41,  8,$20,$FF,$E8,  8,  9,  8,$45,  8,$22; 32
		dc.b $FF,$E8,$10,  8,  8,$4B,  8,$25,  0,  0,$18, $C,  8,$4E,  8,$27; 48
		dc.b $FF,$F0		; 64
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_124E6:	dc.w byte_124F6-Map_124E6; 0	
					
		dc.w byte_12508-Map_124E6; 1
		dc.w byte_1252A-Map_124E6; 2
		dc.w byte_1254C-Map_124E6; 3
		dc.w byte_1256E-Map_124E6; 4
		dc.w byte_12590-Map_124E6; 5
		dc.w byte_125B2-Map_124E6; 6
		dc.w byte_125C4-Map_124E6; 7
byte_124F6:	dc.b   0,  2,$E0, $F,  0,  0,  0,  0,  0,  0,  0, $F,$10,  0,$10,  0; 0
					
		dc.b   0,  0		; 16
byte_12508:	dc.b   0,  4,$E0, $F,  0,$10,  0,  8,$FF,$F0,$E0,  7,  0,$20,  0,$10; 0
					
		dc.b   0,$10,  0, $F,$10,$10,$10,  8,$FF,$F0,  0,  7,$10,$20,$10,$10; 16
		dc.b   0,$10		; 32
byte_1252A:	dc.b   0,  4,$E0, $F,  0,$28,  0,$14,$FF,$E8,$E0, $B,  0,$38,  0,$1C; 0
					
		dc.b   0,  8,  0, $F,$10,$28,$10,$14,$FF,$E8,  0, $B,$10,$38,$10,$1C; 16
		dc.b   0,  8		; 32
byte_1254C:	dc.b   0,  4,$E0, $F,  8,$34,  8,$1A,$FF,$E0,$E0, $F,  0,$34,  0,$1A; 0
					
		dc.b   0,  0,  0, $F,$18,$34,$18,$1A,$FF,$E0,  0, $F,$10,$34,$10,$1A; 16
		dc.b   0,  0		; 32
byte_1256E:	dc.b   0,  4,$E0, $B,  8,$38,  8,$1C,$FF,$E0,$E0, $F,  8,$28,  8,$14; 0
					
		dc.b $FF,$F8,  0, $B,$18,$38,$18,$1C,$FF,$E0,  0, $F,$18,$28,$18,$14; 16
		dc.b $FF,$F8		; 32
byte_12590:	dc.b   0,  4,$E0,  7,  8,$20,  8,$10,$FF,$E0,$E0, $F,  8,$10,  8,  8; 0
					
		dc.b $FF,$F0,  0,  7,$18,$20,$18,$10,$FF,$E0,  0, $F,$18,$10,$18,  8; 16
		dc.b $FF,$F0		; 32
byte_125B2:	dc.b   0,  2,$E0, $F,  8,  0,  8,  0,$FF,$E0,  0, $F,$18,  0,$18,  0; 0
					
		dc.b $FF,$E0		; 16
byte_125C4:	dc.b   0,  4,$E0, $F,  0,$44,  0,$22,$FF,$E0,$E0, $F,  8,$44,  8,$22; 0
					
		dc.b   0,  0,  0, $F,$10,$44,$10,$22,$FF,$E0,  0, $F,$18,$44,$18,$22; 16
		dc.b   0,  0		; 32
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_125E6:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_125F4(pc,d0.w),d1
		jmp	off_125F4(pc,d1.w)
; ===========================================================================
off_125F4:	dc.w loc_125FA-off_125F4; 0 
					
		dc.w loc_1264E-off_125F4; 1
		dc.w loc_1265A-off_125F4; 2
; ===========================================================================

loc_125FA:				
		moveq	#0,d1
		move.w	$38(a0),d1
		swap	d1
		move.l	$30(a0),d0
		sub.l	d1,d0
		asr.l	#4,d0
		sub.l	d0,$30(a0)
		move.w	$30(a0),8(a0)
		moveq	#0,d1
		move.w	$3A(a0),d1
		swap	d1
		move.l	$34(a0),d0
		sub.l	d1,d0
		asr.l	#4,d0
		sub.l	d0,$34(a0)
		move.w	$34(a0),$C(a0)
		lea	(byte_1265E)(pc),a1
		bsr.w	AnimateSprite
		subq.w	#1,$3C(a0)
		bne.w	DisplaySprite
		movea.l	$2A(a0),a1
		subq.w	#1,(a1)
		bsr.w	sub_11FC2
		addi.b	#2,$24(a0)

loc_1264E:				
		lea	(byte_1237A)(pc),a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

loc_1265A:				
		bra.w	DeleteObject
; ===========================================================================
byte_1265E:	dc.b   0		; 0 
		dc.b   2		; 1
		dc.b   1		; 2
		dc.b   0		; 3
		dc.b   1		; 4
		dc.b   2		; 5
		dc.b   3		; 6
		dc.b $FF		; 7
; ===========================================================================
		nop	

; =============== S U B	R O U T	I N E =======================================


sub_12668:				
		jmp	(CalcSine).l
; End of function sub_12668

; ===========================================================================
		dc.w 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Monitor
; ----------------------------------------------------------------------------

Monitor:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1267E(pc,d0.w),d1
		jmp	off_1267E(pc,d1.w)
; ===========================================================================
off_1267E:	dc.w loc_12688-off_1267E; 0 
					
		dc.w loc_126FA-off_1267E; 1
		dc.w loc_127BC-off_1267E; 2
		dc.w loc_12748-off_1267E; 3
		dc.w loc_12752-off_1267E; 4
; ===========================================================================

loc_12688:				
		addq.b	#2,$24(a0)
		move.b	#$E,$16(a0)
		move.b	#$E,$17(a0)
		move.l	#Map_12D36,4(a0)
		move.w	#$680,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$F,$19(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bclr	#7,2(a2,d0.w)
		btst	#0,2(a2,d0.w)
		beq.s	loc_126E2
		move.b	#8,$24(a0)
		move.b	#$B,$1A(a0)
		rts	
; ===========================================================================

loc_126E2:				
		move.b	#$46,$20(a0) ; 'F'
		move.b	$28(a0),$1C(a0)
		tst.w	(f_two_player).w
		beq.s	loc_126FA
		move.b	#9,$1C(a0)

loc_126FA:				
					
		move.b	$25(a0),d0
		beq.s	loc_1271C
		bsr.w	ObjectFall
		jsr	loc_1EDFA
		tst.w	d1
		bpl.w	loc_1271C
		add.w	d1,$C(a0)
		clr.w	$12(a0)
		clr.b	$25(a0)

loc_1271C:				
					
		move.w	#$1A,d1
		move.w	#$F,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	sub_12756
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	sub_12768

loc_12748:				
		lea	(off_12CCE).l,a1
		bsr.w	AnimateSprite

loc_12752:				
		bra.w	MarkObjGone

; =============== S U B	R O U T	I N E =======================================


sub_12756:				
		btst	d6,$22(a0)
		bne.s	loc_12782
		cmpi.b	#2,$1C(a1)
		bne.w	loc_199F0
		rts	
; End of function sub_12756


; =============== S U B	R O U T	I N E =======================================


sub_12768:				
		btst	d6,$22(a0)
		bne.s	loc_12782
		tst.w	(f_two_player).w
		beq.w	loc_199F0
		cmpi.b	#2,$1C(a1)
		bne.w	loc_199F0
		rts	
; ===========================================================================

loc_12782:				
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_1279E
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_1279E
		cmp.w	d2,d0
		bcs.s	loc_127B2

loc_1279E:				
					
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_127B2:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; End of function sub_12768

; ===========================================================================

loc_127BC:				
		move.b	$22(a0),d0
		andi.b	#$78,d0	; 'x'
		beq.s	loc_127EC
		move.b	d0,d1
		andi.b	#$28,d1	; '('
		beq.s	loc_127DA
		andi.b	#-$29,($FFFFB022).w
		ori.b	#2,($FFFFB022).w

loc_127DA:				
		andi.b	#$50,d0	; 'P'
		beq.s	loc_127EC
		andi.b	#-$29,($FFFFB062).w
		ori.b	#2,($FFFFB062).w

loc_127EC:				
					
		clr.b	$22(a0)
		addq.b	#2,$24(a0)
		move.b	#0,$20(a0)
		bsr.w	SingleObjLoad
		bne.s	loc_1281E
		_move.b	#$2E,0(a1) ; '.'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	$1C(a0),$1C(a1)
		move.w	$3E(a0),$3E(a1)

loc_1281E:				
		bsr.w	SingleObjLoad
		bne.s	loc_1283A
		_move.b	#$27,0(a1) ; '''
		addq.b	#2,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

loc_1283A:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bset	#0,2(a2,d0.w)
		move.b	#$A,$1C(a0)
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Image	of what	was in monitor flying up in air
; ----------------------------------------------------------------------------

PowerUp:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_12862(pc,d0.w),d1
		jmp	off_12862(pc,d1.w)
; ===========================================================================
off_12862:	dc.w loc_12868-off_12862; 0 
					
		dc.w loc_128DE-off_12862; 1
		dc.w loc_12CC2-off_12862; 2
; ===========================================================================

loc_12868:				
		addq.b	#2,$24(a0)
		move.w	#-$7980,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$24,1(a0) ; '$'

loc_1287C:
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	#-$300,$12(a0)
		moveq	#0,d0
		move.b	$1C(a0),d0
		tst.w	(f_two_player).w
		beq.s	loc_128C6
		move.w	(v_frame_counter).w,d0
		andi.w	#7,d0
		addq.w	#1,d0
		tst.w	(f_two_player_monitors).w
		beq.s	loc_128AC
		moveq	#8,d0

loc_128AC:				
		cmpi.w	#8,d0
		bne.s	loc_128C2
		move.b	(f_hud_time_update).w,d1
		add.b	(f_hud_time_update_p2).w,d1
		cmpi.b	#2,d1
		beq.s	loc_128C2
		moveq	#7,d0

loc_128C2:				
					
		move.b	d0,$1C(a0)

loc_128C6:				
		addq.b	#1,d0
		move.b	d0,$1A(a0)
		movea.l	#Map_12D36,a1
		add.b	d0,d0
		adda.w	(a1,d0.w),a1
		addq.w	#2,a1
		move.l	a1,4(a0)

loc_128DE:				
		bsr.s	sub_128E4
		bra.w	DisplaySprite

; =============== S U B	R O U T	I N E =======================================


sub_128E4:				
		tst.w	$12(a0)
		bpl.w	loc_128F8
		bsr.w	SpeedToPos
		addi.w	#$18,$12(a0)
		rts	
; ===========================================================================

loc_128F8:				
		addq.b	#2,$24(a0)
		move.w	#$1D,$1E(a0)
		movea.w	$3E(a0),a1
		lea	(v_monitors_broken_p1).w,a2
		cmpa.w	#-$5000,a1
		beq.s	loc_12914
		lea	(v_monitors_broken_p2).w,a2

loc_12914:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w	d0,d0
		move.w	off_12924(pc,d0.w),d0
		jmp	off_12924(pc,d0.w)
; End of function sub_128E4

; ===========================================================================
off_12924:	dc.w loc_12938-off_12924; 0 
					
		dc.w loc_1293E-off_12924; 1
		dc.w loc_12954-off_12924; 2
		dc.w loc_12938-off_12924; 3
		dc.w loc_1296A-off_12924; 4
		dc.w loc_129E0-off_12924; 5
		dc.w loc_12A2C-off_12924; 6
		dc.w Invincible_Monitor-off_12924; 7
		dc.w loc_12AA6-off_12924; 8
		dc.w loc_12CBE-off_12924; 9
; ===========================================================================

loc_12938:				
		addq.w	#1,(a2)
		bra.w	sub_15A90
; ===========================================================================

loc_1293E:				
					
		addq.w	#1,(v_monitors_broken_p1).w
		addq.b	#1,(v_lives).w
		addq.b	#1,(f_hud_lives_update).w
		move.w	#$98,d0	
		jmp	(PlayMusic).l
; ===========================================================================

loc_12954:				
					
		addq.w	#1,(v_monitors_broken_p2).w
		addq.b	#1,(v_lives_p2).w
		addq.b	#1,(f_hud_lives_update_p2).w
		move.w	#$98,d0	
		jmp	(PlayMusic).l
; ===========================================================================

loc_1296A:				
		addq.w	#1,(a2)
		lea	(v_rings).w,a2
		lea	(v_hud_rings_update).w,a3
		lea	(v_ring_reward).w,a4
		lea	(v_rings_collected_p1).w,a5
		cmpa.w	#-$5000,a1
		beq.s	loc_12992
		lea	(v_rings_p2).w,a2
		lea	(v_hud_rings_update_p2).w,a3
		lea	(v_ring_reward_p2).w,a4
		lea	(v_rings_collected_p2).w,a5

loc_12992:				
		addi.w	#$A,(a5)
		cmpi.w	#$3E7,(a5)
		bcs.s	loc_129A0
		move.w	#$3E7,(a5)

loc_129A0:				
		addi.w	#$A,(a2)
		cmpi.w	#$3E7,(a2)
		bcs.s	loc_129AE
		move.w	#$3E7,(a2)

loc_129AE:				
		ori.b	#1,(a3)
		cmpi.w	#$64,(a2) ; 'd'
		bcs.s	loc_129CA
		bset	#1,(a4)
		beq.s	loc_129D4
		cmpi.w	#$C8,(a2)
		bcs.s	loc_129CA
		bset	#2,(a4)
		beq.s	loc_129D4

loc_129CA:				
					
		move.w	#$B5,d0	
		jmp	(PlayMusic).l
; ===========================================================================

loc_129D4:				
					
		cmpa.w	#-$5000,a1
		beq.w	loc_1293E
		bra.w	loc_12954
; ===========================================================================

loc_129E0:				
		addq.w	#1,(a2)
		bset	#2,$2B(a1)
		move.w	#$4B0,$34(a1)
		cmpa.w	#-$5000,a1
		bne.s	loc_12A10
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_12A10
		move.w	#$C00,(v_sonic_max_speed).w
		move.w	#$18,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		bra.s	loc_12A22
; ===========================================================================

loc_12A10:				
					
		move.w	#$C00,(v_tails_max_speed).w
		move.w	#$18,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w

loc_12A22:				
		move.w	#$FB,d0
		jmp	(PlayMusic).l
; ===========================================================================

loc_12A2C:				
		addq.w	#1,(a2)
		bset	#0,$2B(a1)
		move.w	#$AF,d0
		jsr	(PlayMusic).l
		tst.b	$3F(a0)
		bne.s	loc_12A50
		move.b	#$38,($FFFFD180).w
		move.w	a1,($FFFFD1BE).w
		rts	
; ===========================================================================

loc_12A50:				
		move.b	#$38,($FFFFD1C0).w
		move.w	a1,($FFFFD1FE).w
		rts	
; ===========================================================================

Invincible_Monitor:				
		addq.w	#1,(a2)
		tst.b	(f_super).w	; is Sonic super?
		bne.s	locret_12AA4		; if yes, exit
		bset	#1,$2B(a1)			; make character invincible
		move.w	#20*60,$32(a1)		; for 20 seconds (20 seconds * 60 frames per second)
		tst.b	(v_current_boss).w  ; don't change music during boss battles
		bne.s	.nomusic
		cmpi.b	#air_alert,$28(a1)			; or when drowning
		bls.s	.nomusic
		move.w	#$97,d0
		jsr	(PlayMusic).l

	.nomusic:								
		tst.b	$3F(a0)
		bne.s	loc_12A9A
		move.b	#$35,($FFFFD200).w ; '5'
		move.w	a1,($FFFFD23E).w
		rts	
; ===========================================================================

	loc_12A9A:				
		move.b	#$35,($FFFFD300).w ; '5'
		move.w	a1,($FFFFD33E).w

	locret_12AA4:				
		rts	
; ===========================================================================

loc_12AA6:				
		addq.w	#1,(a2)
		cmpi.b	#6,($FFFFB024).w
		bcc.s	locret_12AB8
		cmpi.b	#6,($FFFFB064).w
		bcs.s	loc_12ABA

locret_12AB8:				
		rts	
; ===========================================================================

loc_12ABA:				
		lea	(Teleport_Swap_Table).l,a3
		moveq	#$11,d2

loc_12AC2:				
		movea.w	(a3)+,a1
		movea.w	(a3)+,a2
		move.w	(a3)+,d1

loc_12AC8:				
		move.w	(a1),d0
		move.w	(a2),(a1)+
		move.w	d0,(a2)+
		dbf	d1,loc_12AC8
		dbf	d2,loc_12AC2
		move.b	#1,($FFFFB01D).w ; MainCharacter+prev_anim
		move.b	#1,($FFFFB05D).w ; v_ost_sidekick+prev_anim
		move.b	#0,($FFFFB01A).w ; MainCharacter+mapping_frame
		move.b	#0,($FFFFB05A).w ; v_ost_sidekick+mapping_frame
		move.b	#-1,(v_sonic_last_frame_id).w
		move.b	#-1,(v_tails_last_frame_id).w
		move.b	#-1,(v_tailstails_last_frame_id).w
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		lea	(v_opl_loaded_object_blocks_p2).w,a2
		moveq	#2,d1

loc_12B0A:				
		move.b	(a1),d0
		move.b	(a2),(a1)+
		move.b	d0,(a2)+
		dbf	d1,loc_12B0A
		subi.w	#$180,(v_camera_y_pos).w
		subi.w	#$180,(v_camera_y_pos_p2).w
		move.w	(v_ost_maincharacter+ost_tile).w,d0
		andi.w	#$7FFF,(v_ost_maincharacter+ost_tile).w
		tst.w	($FFFFB042).w
		bpl.s	loc_12B36
		ori.w	#-$8000,(v_ost_maincharacter+ost_tile).w

loc_12B36:				
		andi.w	#$7FFF,($FFFFB042).w
		tst.w	d0
		bpl.s	loc_12B46
		ori.w	#-$8000,($FFFFB042).w

loc_12B46:				
		move.b	#1,(f_boundary_bottom_change).w
		lea	($FFFFB400).w,a1
		moveq	#$6F,d1	; 'o'

loc_12B52:				
		cmpi.b	#-$7C,(a1)
		beq.s	loc_12B5E
		cmpi.b	#3,(a1)
		bne.s	loc_12B6C

loc_12B5E:				
		move.b	$34(a1),d0
		move.b	$35(a1),$34(a1)
		move.b	d0,$35(a1)

loc_12B6C:				
		cmpi.b	#-$2A,(a1)
		bne.s	loc_12B80
		move.l	$30(a1),d0
		move.l	$34(a1),$30(a1)
		move.l	d0,$34(a1)

loc_12B80:				
		cmpi.b	#-$7B,(a1)
		bne.s	loc_12B94
		move.b	$36(a1),d0
		move.b	$37(a1),$36(a1)
		move.b	d0,$37(a1)

loc_12B94:				
		lea	$40(a1),a1
		dbf	d1,loc_12B52
		lea	($FFFFB000).w,a1
		move.b	#$38,($FFFFD180).w
		move.w	a1,($FFFFD1BE).w
		move.b	#$35,($FFFFD200).w ; '5'
		move.w	a1,($FFFFD23E).w
		btst	#2,$22(a1)
		bne.s	loc_12BC8
		move.b	#$13,$16(a1)
		move.b	#9,$17(a1)

loc_12BC8:				
		btst	#3,$22(a1)
		beq.s	loc_12BEC
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a2
		bclr	#4,$22(a2)
		bset	#3,$22(a2)

loc_12BEC:				
		lea	($FFFFB040).w,a1
		move.b	#$38,($FFFFD1C0).w
		move.w	a1,($FFFFD1FE).w
		move.b	#$35,($FFFFD300).w ; '5'
		move.w	a1,($FFFFD33E).w
		btst	#2,$22(a1)
		bne.s	loc_12C18
		move.b	#$F,$16(a1)
		move.b	#9,$17(a1)

loc_12C18:				
		btst	#3,$22(a1)
		beq.s	loc_12C3C
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a2
		bclr	#3,$22(a2)
		bset	#4,$22(a2)

loc_12C3C:				
		move.b	#$40,(v_teleport_timer).w ; '@'
		move.b	#1,(f_teleport_flag).w
		move.w	#$EC,d0	
		jmp	(PlayMusic).l
; ===========================================================================
;teleport_table_entry macro addressA, addressB
;sizeA equ addressA_End-addressA
;sizeB equ addressB_End-addressB
;	if (sizeA<>sizeB)
;		inform 3,"The space between 'addressA' and 'addressA_End' ($%h bytes), and 'addressB' and 'addressB_End' ($%h bytes) need to be the same size.",sizeA,sizeB
;	endc
;	dc.w	addressA, addressB, (.sizeA/2)-1
;	endm

Teleport_Swap_Table:	dc.b $B0,  8,$B0,$48,  0,$1B,$F7,$6E,$F7,$8C,  0,  0,$FC,  0,$F7,$8E; 0
					
		dc.b   0,  0,$F7,$70,$F7,$78,  0,  3,$F7,$60,$FE,$C0,  0,  2,$F7,$12; 16
		dc.b $F7,$16,  0,  1,$F7,$1C,$F7,$24,  0,  3,$EE,  0,$EE,$20,  0, $F; 32
		dc.b $F7,$DA,$F7,$DC,  0,  0,$EE,$C8,$EE,$F8,  0,  3,$EE,$D0,$EE,$D4; 48
		dc.b   0,  1,$EE,$D8,$EE,$DA,  0,  0,$EE,$40,$EE,$48,  0,  3,$EE,$50; 64
		dc.b $EE,$58,  0,  3,$EE,$60,$EE,$80,  0, $F,$EE,$A0,$EE,$A8,  0,  3; 80
		dc.b $EE,$B0,$EE,$B8,  0,  1,$E5,  0,$E6,  0,  0,$7F; 96
; ===========================================================================

loc_12CBE:				
		addq.w	#1,(a2)
		rts	
; ===========================================================================

loc_12CC2:				
		subq.w	#1,$1E(a0)
		bmi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
off_12CCE:	dc.w byte_12CE4-off_12CCE; 0 
					
		dc.w byte_12CE8-off_12CCE; 1
		dc.w byte_12CF0-off_12CCE; 2
		dc.w byte_12CF8-off_12CCE; 3
		dc.w byte_12D00-off_12CCE; 4
		dc.w byte_12D08-off_12CCE; 5
		dc.w byte_12D10-off_12CCE; 6
		dc.w byte_12D18-off_12CCE; 7
		dc.w byte_12D20-off_12CCE; 8
		dc.w byte_12D28-off_12CCE; 9
		dc.w byte_12D30-off_12CCE; 10
byte_12CE4:	dc.b   1,  0,  1,$FF	; 0 
byte_12CE8:	dc.b   1,  0,  2,  2,  1,  2,  2,$FF; 0	
byte_12CF0:	dc.b   1,  0,  3,  3,  1,  3,  3,$FF; 0	
byte_12CF8:	dc.b   1,  0,  4,  4,  1,  4,  4,$FF; 0	
byte_12D00:	dc.b   1,  0,  5,  5,  1,  5,  5,$FF; 0	
byte_12D08:	dc.b   1,  0,  6,  6,  1,  6,  6,$FF; 0	
byte_12D10:	dc.b   1,  0,  7,  7,  1,  7,  7,$FF; 0	
byte_12D18:	dc.b   1,  0,  8,  8,  1,  8,  8,$FF; 0	
byte_12D20:	dc.b   1,  0,  9,  9,  1,  9,  9,$FF; 0	
byte_12D28:	dc.b   1,  0, $A, $A,  1, $A, $A,$FF; 0	
byte_12D30:	dc.b   2,  0,  1, $B,$FE,  1; 0	
; ---------------------------------------------------------------------------------
; Unknown Sprite Mappings
; ---------------------------------------------------------------------------------
Map_12D36:	dc.w word_12D4E-Map_12D36; 0	
					
		dc.w word_12D58-Map_12D36; 1
		dc.w word_12D6A-Map_12D36; 2
		dc.w word_12D7C-Map_12D36; 3
		dc.w word_12D8E-Map_12D36; 4
		dc.w word_12DA0-Map_12D36; 5
		dc.w word_12DB2-Map_12D36; 6
		dc.w word_12DC4-Map_12D36; 7
		dc.w word_12DD6-Map_12D36; 8
		dc.w word_12DE8-Map_12D36; 9
		dc.w word_12DFA-Map_12D36; 10
		dc.w word_12E0C-Map_12D36; 11
word_12D4E:	dc.w 1			
		dc.w $EF0F,    0,    0,$FFF0; 0
word_12D58:	dc.w 2			
		dc.w $F505,  $18,   $C,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12D6A:	dc.w 2			
		dc.w $F505, $154,  $AA,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12D7C:	dc.w 2			
		dc.w $F505,  $1C,   $E,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12D8E:	dc.w 2			
		dc.w $F505,  $20,  $10,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12DA0:	dc.w 2			
		dc.w $F505,$2024,$2012,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12DB2:	dc.w 2			
		dc.w $F505,  $28,  $14,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12DC4:	dc.w 2			
		dc.w $F505,  $2C,  $16,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12DD6:	dc.w 2			
		dc.w $F505,  $30,  $18,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12DE8:	dc.w 2			
		dc.w $F505,  $38,  $1C,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12DFA:	dc.w 2			
		dc.w $F505,  $34,  $1A,$FFF8; 0
		dc.w $EF0F,    0,    0,$FFF0; 4
word_12E0C:	dc.w 1			
		dc.w $FF0D,  $10,    8,$FFF0; 0
; ===========================================================================
		nop	
; ----------------------------------------------------------------------------
; Sprite
;
; Flashing stars from intro
; ----------------------------------------------------------------------------

TitleIntro:				
					
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_12E26(pc,d0.w),d1
		jmp	off_12E26(pc,d1.w)
; ===========================================================================
off_12E26:	dc.w loc_12E38-off_12E26; 0 
					
		dc.w loc_12E58-off_12E26; 1
		dc.w loc_13066-off_12E26; 2
		dc.w loc_130D4-off_12E26; 3
		dc.w loc_1314A-off_12E26; 4
		dc.w loc_13200-off_12E26; 5
		dc.w loc_13294-off_12E26; 6
		dc.w loc_13112-off_12E26; 7
		dc.w loc_1324C-off_12E26; 8
; ===========================================================================

loc_12E38:				
		addq.b	#2,$24(a0)
		move.l	#Map_136A8,4(a0)
		move.w	#$150,2(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$24(a0)
		bra.s	TitleIntro
; ===========================================================================

loc_12E58:				
		addq.w	#1,$34(a0)
		cmpi.w	#$120,$34(a0)
		bcc.s	loc_12E68
		bsr.w	sub_134BC

loc_12E68:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_12E76(pc,d0.w),d1
		jmp	off_12E76(pc,d1.w)
; ===========================================================================
off_12E76:	dc.w loc_12E8A-off_12E76; 0 
					
		dc.w loc_12EC2-off_12E76; 1
		dc.w loc_12EE8-off_12E76; 2
		dc.w loc_12F18-off_12E76; 3
		dc.w loc_12F52-off_12E76; 4
		dc.w loc_12F60-off_12E76; 5
		dc.w loc_12F7C-off_12E76; 6
		dc.w loc_12F9A-off_12E76; 7
		dc.w loc_12FD6-off_12E76; 8
		dc.w loc_13014-off_12E76; 9
; ===========================================================================

loc_12E8A:				
		addq.b	#2,$25(a0)
		move.b	#5,$1A(a0)
		move.w	#$110,8(a0)
		move.w	#$E0,$A(a0)
		lea	($FFFFB0C0).w,a1
		move.b	#$E,(a1)
		move.b	#8,$28(a1)
		lea	($FFFFB140).w,a1
		move.b	#$E,(a1)
		move.b	#6,$28(a1)
		moveq	#-$59,d0
		bra.w	sub_13C3C
; ===========================================================================

loc_12EC2:				
		cmpi.w	#$38,$34(a0)
		bcc.s	loc_12ECC
		rts	
; ===========================================================================

loc_12ECC:				
		addq.b	#2,$25(a0)
		lea	($FFFFB100).w,a1
		move.b	#-$37,(a1)
		move.b	#0,$28(a1)
		st.b	$30(a0)
		moveq	#-$67,d0
		bra.w	sub_13C42
; ===========================================================================

loc_12EE8:				
		cmpi.w	#$80,$34(a0)
		bcc.s	loc_12EF2
		rts	
; ===========================================================================

loc_12EF2:				
		addq.b	#2,$25(a0)
		lea	(Pal_TitleSonic).l,a1
		lea	($FFFFFB00).w,a2
		moveq	#$F,d6

loc_12F02:				
		move.w	(a1)+,(a2)+
		dbf	d6,loc_12F02

; =============== S U B	R O U T	I N E =======================================


sub_12F08:				
		lea	($FFFFB180).w,a1
		move.b	#$E,(a1)
		move.b	#$E,$28(a1)
		rts	
; End of function sub_12F08

; ===========================================================================

loc_12F18:				
		moveq	#$24,d2	; '$'
		lea	(word_13046).l,a1

loc_12F20:				
					
		move.w	$2A(a0),d0
		addq.w	#1,d0
		move.w	d0,$2A(a0)
		andi.w	#3,d0
		bne.s	loc_12F4E
		move.w	$2C(a0),d1
		addq.w	#4,d1
		cmp.w	d2,d1
		bcc.w	loc_1310A
		move.w	d1,$2C(a0)
		move.l	-4(a1,d1.w),d0
		move.w	d0,$A(a0)
		swap	d0
		move.w	d0,8(a0)

loc_12F4E:				
		bra.w	DisplaySprite
; ===========================================================================

loc_12F52:				
					
		lea	(off_13686).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================

loc_12F60:				
		addq.b	#2,$25(a0)
		move.b	#$12,$1A(a0)
		lea	($FFFFB1C0).w,a1
		move.b	#$E,(a1)
		move.b	#$A,$28(a1)
		bra.w	DisplaySprite
; ===========================================================================

loc_12F7C:				
		cmpi.w	#$C0,$34(a0)
		bcs.s	loc_12F96
		addq.b	#2,$25(a0)
		lea	($FFFFB080).w,a1
		move.b	#$E,(a1)
		move.b	#4,$28(a1)

loc_12F96:				
		bra.w	DisplaySprite
; ===========================================================================

loc_12F9A:				
		cmpi.w	#$120,$34(a0)
		bcs.s	loc_12FD2
		addq.b	#2,$25(a0)
		clr.w	$2C(a0)
		st.b	$2F(a0)
		lea	(v_pal_dry_line3).w,a1
		move.w	#$EEE,d0
		moveq	#$F,d6

loc_12FB8:				
		move.w	d0,(a1)+
		dbf	d6,loc_12FB8
		lea	($FFFFB240).w,a1
		move.b	#-$37,(a1)
		move.b	#2,$28(a1)
		move.b	#$F,($FFFFB400).w

loc_12FD2:				
		bra.w	DisplaySprite
; ===========================================================================

loc_12FD6:				
		btst	#6,(v_console_region).w
		beq.s	loc_12FEA
		cmpi.w	#$190,$34(a0)
		beq.s	loc_12FF6
		bra.w	DisplaySprite
; ===========================================================================

loc_12FEA:				
		cmpi.w	#$1D0,$34(a0)
		beq.s	loc_12FF6
		bra.w	DisplaySprite
; ===========================================================================

loc_12FF6:				
					
		lea	($FFFFB440).w,a1
		move.b	#$E,(a1)
		move.b	#$C,$28(a1)
		addq.b	#2,$25(a0)
		lea	($FFFFB180).w,a1
		bsr.w	DeleteObject2
		bra.w	DisplaySprite
; ===========================================================================

loc_13014:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		bne.s	loc_13036
		move.w	$2C(a0),d0
		addq.w	#2,d0
		cmpi.w	#$C,d0
		bcs.s	loc_1302C
		moveq	#0,d0

loc_1302C:				
		move.w	d0,$2C(a0)
		move.w	Pal_TitleStarCyc(pc,d0.w),($FFFFFB4A).w

loc_13036:				
		bra.w	DisplaySprite
; ===========================================================================
		
		incfile	Pal_TitleStarCyc
		
		
word_13046:	dc.w  $108		; 0 
		dc.w   $D0		; 1
		dc.w  $100		; 2
		dc.w   $C0		; 3
		dc.w   $F8		; 4
		dc.w   $B0		; 5
		dc.w   $F6		; 6
		dc.w   $A6		; 7
		dc.w   $FA		; 8
		dc.w   $9E		; 9
		dc.w  $100		; 10
		dc.w   $9A		; 11
		dc.w  $104		; 12
		dc.w   $99		; 13
		dc.w  $108		; 14
		dc.w   $98		; 15
; ===========================================================================

loc_13066:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_13074(pc,d0.w),d1
		jmp	off_13074(pc,d1.w)
; ===========================================================================
off_13074:	dc.w loc_1307E-off_13074; 0 
					
		dc.w loc_13096-off_13074
		dc.w loc_12F52-off_13074
		dc.w loc_130A2-off_13074
		dc.w loc_130B4-off_13074
; ===========================================================================

loc_1307E:				
		addq.b	#2,$25(a0)
		move.w	#$D8,8(a0)
		move.w	#$D8,$A(a0)
		move.b	#1,$1C(a0)
		rts	
; ===========================================================================

loc_13096:				
		moveq	#$20,d2	; ' '
		lea	(word_130B8).l,a1
		bra.w	loc_12F20
; ===========================================================================

loc_130A2:				
		addq.b	#2,$25(a0)
		lea	($FFFFB200).w,a1
		move.b	#$E,(a1)
		move.b	#$10,$28(a1)

loc_130B4:				
		bra.w	DisplaySprite
; ===========================================================================
word_130B8:	dc.w   $D7		; 0 
		dc.w   $C8		; 1
		dc.w   $D3		; 2
		dc.w   $B8		; 3
		dc.w   $CE		; 4
		dc.w   $AC		; 5
		dc.w   $CC		; 6
		dc.w   $A6		; 7
		dc.w   $CA		; 8
		dc.w   $A2		; 9
		dc.w   $C9		; 10
		dc.w   $A1		; 11
		dc.w   $C8		; 12
		dc.w   $A0		; 13
; ===========================================================================

loc_130D4:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_130E2(pc,d0.w),d1
		jmp	off_130E2(pc,d1.w)
; ===========================================================================
off_130E2:	dc.w loc_130E6-off_130E2; 0 
					
		dc.w loc_1310E-off_130E2; 1
; ===========================================================================

loc_130E6:				
		move.b	#$B,$1A(a0)
		tst.b	(v_console_region).w
		bmi.s	loc_130F8
		move.b	#$A,$1A(a0)

loc_130F8:				
		move.b	#2,$18(a0)
		move.w	#$120,8(a0)
		move.w	#$E8,$A(a0)

loc_1310A:				
		addq.b	#2,$25(a0)

loc_1310E:				
		bra.w	DisplaySprite
; ===========================================================================

loc_13112:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_13120(pc,d0.w),d1
		jmp	off_13120(pc,d1.w)
; ===========================================================================
off_13120:	dc.w loc_13124-off_13120; 0 
					
		dc.w loc_13146-off_13120; 1
; ===========================================================================

loc_13124:				
		addq.b	#2,$25(a0)
		move.w	#0,2(a0)
		move.b	#$11,$1A(a0)
		move.b	#2,$18(a0)
		move.w	#$100,8(a0)
		move.w	#$F0,$A(a0)

loc_13146:				
		bra.w	DisplaySprite
; ===========================================================================

loc_1314A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_13158(pc,d0.w),d1
		jmp	off_13158(pc,d1.w)
; ===========================================================================
off_13158:	dc.w loc_13160-off_13158; 0 
					
		dc.w loc_12F52-off_13158
		dc.w loc_13190-off_13158
		dc.w loc_1319E-off_13158
; ===========================================================================

loc_13160:				
		addq.b	#2,$25(a0)
		move.b	#$C,$1A(a0)
		ori.w	#-$8000,2(a0)
		move.b	#2,$1C(a0)
		move.b	#1,$18(a0)
		move.w	#$100,8(a0)
		move.w	#$A8,$A(a0)
		move.w	#4,$2A(a0)
		rts	
; ===========================================================================

loc_13190:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_13198
		rts	
; ===========================================================================

loc_13198:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_1319E:				
		move.b	#2,$25(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		move.w	#6,$2A(a0)
		move.w	$2C(a0),d0
		addq.w	#4,d0
		cmpi.w	#$28,d0	; '('
		bcc.w	DeleteObject
		move.w	d0,$2C(a0)
		move.l	loc_131D8(pc,d0.w),d0
		move.w	d0,$A(a0)
		swap	d0
		move.w	d0,8(a0)
		moveq	#-$59,d0

loc_131D8:
		bra.w	sub_13C3C
; ===========================================================================
		dc.w   $DA		; 0
		dc.w   $F2		; 1
		dc.w  $170		; 2
		dc.w   $F8		; 3
		dc.w  $132		; 4
		dc.w  $131		; 5
		dc.w  $19E		; 6
		dc.w   $A2		; 7
		dc.w   $C0		; 8
		dc.w   $E3		; 9
		dc.w  $180		; 10
		dc.w   $E0		; 11
		dc.w  $10D		; 12
		dc.w  $13B		; 13
		dc.w   $C0		; 14
		dc.w   $AB		; 15
		dc.w  $165		; 16
		dc.w  $107		; 17
; ===========================================================================

loc_13200:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_1320E(pc,d0.w),d1
		jmp	off_1320E(pc,d1.w)
; ===========================================================================
off_1320E:	dc.w loc_13214-off_1320E; 0 
					
		dc.w loc_13234-off_1320E; 1
		dc.w loc_13230-off_1320E; 2
; ===========================================================================

loc_13214:				
		addq.b	#2,$25(a0)
		move.b	#9,$1A(a0)
		move.b	#3,$18(a0)
		move.w	#$145,8(a0)
		move.w	#$BF,$A(a0)

loc_13230:				
		bra.w	DisplaySprite
; ===========================================================================

loc_13234:				
		moveq	#$10,d2
		lea	(word_13240).l,a1
		bra.w	loc_12F20
; ===========================================================================
word_13240:	dc.w  $143		; 0 
		dc.w   $C1		; 1
		dc.w  $140		; 2
		dc.w   $C2		; 3
		dc.w  $141		; 4
		dc.w   $C1		; 5
; ===========================================================================

loc_1324C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_1325A(pc,d0.w),d1
		jmp	off_1325A(pc,d1.w)
; ===========================================================================
off_1325A:	dc.w loc_13260-off_1325A; 0 
					
		dc.w loc_13280-off_1325A; 1
		dc.w loc_1327C-off_1325A; 2
; ===========================================================================

loc_13260:				
		addq.b	#2,$25(a0)
		move.b	#$13,$1A(a0)
		move.b	#3,$18(a0)
		move.w	#$10F,8(a0)
		move.w	#$D5,$A(a0)

loc_1327C:				
		bra.w	DisplaySprite
; ===========================================================================

loc_13280:				
		moveq	#$C,d2
		lea	(byte_1328C).l,a1
		bra.w	loc_12F20
; ===========================================================================
byte_1328C:	dc.b   1		; 0 
		dc.b  $C		; 1
		dc.b   0		; 2
		dc.b $D0		; 3
		dc.b   1		; 4
		dc.b  $D		; 5
		dc.b   0		; 6
		dc.b $D1		; 7
; ===========================================================================

loc_13294:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_132A2(pc,d0.w),d1
		jmp	off_132A2(pc,d1.w)
; ===========================================================================
off_132A2:	dc.w loc_132A6-off_132A2; 0 
					
		dc.w loc_132D2-off_132A2; 1
; ===========================================================================

loc_132A6:				
		addq.b	#2,$25(a0)
		move.b	#$C,$1A(a0)
		move.b	#5,$18(a0)
		move.w	#$170,8(a0)
		move.w	#$80,$A(a0)
		move.b	#3,$1C(a0)
		move.w	#$8C,$2A(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_132D2:				
		subq.w	#1,$2A(a0)
		bmi.w	DeleteObject
		subq.w	#2,8(a0)
		addq.w	#1,$A(a0)

loc_132E2:
		lea	(off_13686).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_132F0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	loc_132FE(pc,d0.w),d1
		jmp	loc_132FE(pc,d1.w)
; ===========================================================================

loc_132FE:
		ori.b	#$46,d4	; 'F'
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lea	(off_1337C).l,a1
		adda.w	(a1,d0.w),a1
		move.l	(a1)+,$3A(a0)
		movea.l	(a1)+,a2
		move.b	(a1)+,d0
		move.w	d0,$34(a0)
		lea	(v_pal_dry_next).w,a3
		adda.w	d0,a3
		move.b	(a1)+,d0
		move.w	d0,$36(a0)

loc_1332E:				
		move.w	(a2)+,(a3)+
		dbf	d0,loc_1332E
		move.b	(a1)+,d0
		move.b	d0,$30(a0)
		move.b	d0,$31(a0)
		move.b	(a1)+,$32(a0)
		rts	
; ===========================================================================
		subq.b	#1,$30(a0)
		bpl.s	locret_1337A
		move.b	$31(a0),$30(a0)
		subq.b	#1,$32(a0)
		bmi.w	DeleteObject
		movea.l	$3A(a0),a2
		movea.l	a0,a3
		move.w	$36(a0),d0
		move.w	$34(a0),d1
		lea	($FFFFFB00).w,a0
		adda.w	d1,a0
		lea	(v_pal_dry_next).w,a1
		adda.w	d1,a1

loc_13372:				
		jsr	(a2)
		dbf	d0,loc_13372
		movea.l	a3,a0

locret_1337A:				
		rts	
; ===========================================================================
off_1337C:	dc.w off_1338C-off_1337C; 0 
					
		dc.w off_13398-off_1337C; 1
		dc.w off_133A4-off_1337C; 2
		dc.w off_133B0-off_1337C; 3
		dc.w off_133BC-off_1337C; 4
		dc.w off_133C8-off_1337C; 5
		dc.w off_133D4-off_1337C; 6
		dc.w off_133E0-off_1337C; 7
off_1338C:	dc.l sub_243E		; 0 
		dc.l Pal_TitleLogo
		dc.w $600F
		dc.w $215
off_13398:	dc.l loc_1344C		
		dc.l Pal_TitleBackground
		dc.w $400F
		dc.w $407
off_133A4:	dc.l loc_1344C		
		dc.l Pal_EndingStills
		dc.w $F
		dc.w $807
off_133B0:	dc.l loc_1348A		
		dc.l Pal_EndingStills
		dc.w $F
		dc.w $807
off_133BC:	dc.l loc_1344C		
		dc.l Pal_EndingSonic
		dc.w $1F
		dc.w $407
off_133C8:	dc.l loc_1344C		
		dc.l Pal_EndingBG
		dc.w $401F
		dc.w $407
off_133D4:	dc.l loc_1344C		
		dc.l Pal_EndingSuperSonic
		dc.w $F
		dc.w $407
off_133E0:	dc.l loc_1344C		
		dc.l Pal_EndingSonicFar
		dc.w $1F
		dc.w $407


	incfile	Pal_TitleSonic
									
	incfile	Pal_TitleBackground
								
	incfile	Pal_TitleLogo
					
; ===========================================================================

loc_1344C:				
					
		move.b	(a1)+,d2
		andi.b	#$E,d2
		move.b	(a0),d3
		cmp.b	d2,d3
		bls.s	loc_1345C
		subq.b	#2,d3
		move.b	d3,(a0)

loc_1345C:				
		addq.w	#1,a0
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$20,d2
		andi.b	#$E,d3
		move.b	(a0),d4
		move.b	d4,d5
		andi.b	#-$20,d4
		andi.b	#$E,d5
		cmp.b	d2,d4
		bls.s	loc_1347E
		subi.b	#$20,d4	; ' '

loc_1347E:				
		cmp.b	d3,d5
		bls.s	loc_13484
		subq.b	#2,d5

loc_13484:				
		or.b	d4,d5
		move.b	d5,(a0)+
		rts	
; ===========================================================================

loc_1348A:				
		moveq	#$E,d2
		move.b	(a0),d3
		and.b	d2,d3
		cmp.b	d2,d3
		bcc.s	loc_13498
		addq.b	#2,d3
		move.b	d3,(a0)

loc_13498:				
		addq.w	#1,a0
		move.b	(a0),d3
		move.b	d3,d4
		andi.b	#-$20,d3
		andi.b	#$E,d4
		cmpi.b	#-$20,d3
		bcc.s	loc_134B0
		addi.b	#$20,d3	; ' '

loc_134B0:				
		cmp.b	d2,d4
		bcc.s	loc_134B6
		addq.b	#2,d4

loc_134B6:				
		or.b	d3,d4
		move.b	d4,(a0)+
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_134BC:				
		tst.b	$2F(a0)
		bne.w	locret_135E8
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#$7F,(v_joypad_press_actual).w ; ''
		andi.b	#$7F,(v_joypad2_press_actual).w ; ''
		andi.b	#-$80,d0
		beq.w	locret_135E8
		st.b	$2F(a0)

loc_134E4:
		move.b	#$10,$25(a0)
		move.b	#$12,$1A(a0)
		move.w	#$108,8(a0)
		move.w	#$98,$A(a0)
		lea	($FFFFB1C0).w,a1
		bsr.w	sub_135EA
		move.b	#$E,(a1)
		move.b	#$A,$24(a1)
		move.b	#2,$18(a1)
		move.b	#9,$1A(a1)
		move.b	#4,$25(a1)
		move.w	#$141,8(a1)
		move.w	#$C1,$A(a1)
		lea	($FFFFB080).w,a1
		bsr.w	sub_135EA
		move.b	#$E,(a1)
		move.b	#4,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#6,$25(a1)
		move.b	#3,$18(a1)
		move.w	#$C8,8(a1)
		move.w	#$A0,$A(a1)
		lea	($FFFFB200).w,a1
		bsr.w	sub_135EA
		move.b	#$E,(a1)
		move.b	#$10,$24(a1)
		move.b	#2,$18(a1)
		move.b	#$13,$1A(a1)
		move.b	#4,$25(a1)
		move.w	#$10D,8(a1)
		move.w	#$D1,$A(a1)
		lea	($FFFFB140).w,a1
		move.b	#$E,(a1)
		move.b	#6,$28(a1)
		bsr.w	sub_12F08
		move.b	#$F,($FFFFB400).w
		lea	($FFFFB0C0).w,a1
		bsr.w	DeleteObject2
		lea	(Pal_TitleLogo)(pc),a1
		lea	(v_pal_dry_line4).w,a2
		moveq	#7,d6

loc_135B6:				
		move.l	(a1)+,(a2)+
		dbf	d6,loc_135B6
		lea	(Pal_TitleBackground)(pc),a1
		lea	(v_pal_dry_line3).w,a2
		moveq	#7,d6

loc_135C6:				
		move.l	(a1)+,(a2)+
		dbf	d6,loc_135C6
		lea	(Pal_TitleSonic)(pc),a1
		lea	($FFFFFB00).w,a2
		moveq	#7,d6

loc_135D6:				
		move.l	(a1)+,(a2)+
		dbf	d6,loc_135D6

loc_135DC:
		tst.b	$30(a0)
		bne.s	locret_135E8
		moveq	#-$67,d0
		bsr.w	sub_13C42

locret_135E8:				
					
		rts	
; End of function sub_134BC


; =============== S U B	R O U T	I N E =======================================


sub_135EA:				
					
		move.l	#Map_136A8,4(a1)
		move.w	#$150,2(a1)
		move.b	#4,$18(a1)
		rts	
; End of function sub_135EA

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 0F - Title screen menu
; ----------------------------------------------------------------------------

TitleMenu:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_13612(pc,d0.w),d1
		jsr	off_13612(pc,d1.w)
		bra.w	DisplaySprite
; ===========================================================================
off_13612:	dc.w loc_13616-off_13612; 0 
					
		dc.w loc_13644-off_13612; 1
; ===========================================================================

loc_13616:				
		addq.b	#2,$24(a0)
		move.w	#$128,8(a0)
		move.w	#$14C,$A(a0)
		move.l	#Map_13B70,4(a0)
		move.w	#0,2(a0)
		bsr.w	Adjust2PArtPointer
		andi.b	#1,($FFFFFF86).w
		move.b	($FFFFFF86).w,$1A(a0)

loc_13644:				
		moveq	#0,d2
		move.b	($FFFFFF86).w,d2
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		btst	#0,d0
		beq.s	loc_13660
		subq.b	#1,d2
		bcc.s	loc_13660
		move.b	#2,d2

loc_13660:				
					
		btst	#1,d0
		beq.s	loc_13670
		addq.b	#1,d2
		cmpi.b	#3,d2
		bcs.s	loc_13670
		moveq	#0,d2

loc_13670:				
					
		move.b	d2,$1A(a0)
		move.b	d2,($FFFFFF86).w
		andi.b	#3,d0
		beq.s	locret_13684
		moveq	#-$33,d0
		bsr.w	sub_13C3C

locret_13684:				
		rts	
; ===========================================================================
off_13686:	dc.w byte_1368E-off_13686; 0 
					
		dc.w byte_13694-off_13686; 1
		dc.w byte_1369C-off_13686; 2
		dc.w byte_136A4-off_13686; 3
byte_1368E:	dc.b   1		; 0 
		dc.b   5		; 1
		dc.b   6		; 2
		dc.b   7		; 3
		dc.b   8		; 4
		dc.b $FA		; 5
byte_13694:	dc.b   1		; 0 
		dc.b   0		; 1
		dc.b   1		; 2
		dc.b   2		; 3
		dc.b   3		; 4
		dc.b   4		; 5
		dc.b $FA		; 6
		dc.b   0		; 7
byte_1369C:	dc.b   1		; 0 
		dc.b  $C		; 1
		dc.b  $D		; 2
		dc.b  $E		; 3
		dc.b  $D		; 4
		dc.b  $C		; 5
		dc.b $FA		; 6
		dc.b   0		; 7
byte_136A4:	dc.b   3		; 0 
		dc.b  $C		; 1
		dc.b  $F		; 2
		dc.b $FF		; 3
; -----------------------------------------------------------------------------
; Unknown Sprite Mappings
; -----------------------------------------------------------------------------
Map_136A8:	dc.w word_136D0-Map_136A8; 0	
					
		dc.w word_13702-Map_136A8; 1
		dc.w word_1374C-Map_136A8; 2
		dc.w word_1378E-Map_136A8; 3
		dc.w word_137F8-Map_136A8; 4
		dc.w word_13862-Map_136A8; 5
		dc.w word_138CC-Map_136A8; 6
		dc.w word_13936-Map_136A8; 7
		dc.w word_139B0-Map_136A8; 8
		dc.w word_13A1A-Map_136A8; 9
		dc.w word_13A34-Map_136A8; 10
		dc.w word_13A66-Map_136A8; 11
		dc.w word_13AA0-Map_136A8; 12
		dc.w word_13AAA-Map_136A8; 13
		dc.w word_13AB4-Map_136A8; 14
		dc.w word_13ABE-Map_136A8; 15
		dc.w word_13AC8-Map_136A8; 16
		dc.w word_13AD2-Map_136A8; 17
		dc.w word_13AF4-Map_136A8; 18
		dc.w word_13B66-Map_136A8; 19
word_136D0:	dc.w 6			
		dc.w $100C,$A000,$A000,	 $30; 0
		dc.w $180F,$A004,$A002,	 $18; 4
		dc.w $180B,$A014,$A00A,	 $38; 8
		dc.w $3804,$A020,$A010,	 $20; 12
		dc.w $4000,$A022,$A011,	 $28; 16
		dc.w $380E,$A023,$A011,	 $30; 20
word_13702:	dc.w 9			
		dc.w $1004,$A02F,$A017,	 $48; 0
		dc.w $180F,$A031,$A018,	 $20; 4
		dc.w $180B,$A041,$A020,	 $40; 8
		dc.w $1801,$A04D,$A026,	 $58; 12
		dc.w $3801,$A04F,$A027,	   0; 16
		dc.w $380E,$A051,$A028,	   8; 20
		dc.w $380A,$A05D,$A02E,	 $28; 24
		dc.w $3805,$A066,$A033,	 $40; 28
		dc.w $3800,$A06A,$A035,	 $50; 32
word_1374C:	dc.w 8			
		dc.w $100A,$A06B,$A035,	 $28; 0
		dc.w $180D,$A074,$A03A,	 $40; 4
		dc.w $280F,$A07C,$A03E,	   8; 8
		dc.w $280F,$A08C,$A046,	 $28; 12
		dc.w $2807,$A09C,$A04E,	 $48; 16
		dc.w $2801,$A0A4,$A052,	 $58; 20
		dc.w $480C,$A0A6,$A053,	 $10; 24
		dc.w $4804,$A0AA,$A055,	 $30; 28
word_1378E:	dc.w $D			
		dc.w $1000,$A0AC,$A056,	 $20; 0
		dc.w $100E,$A0AD,$A056,	 $28; 4
		dc.w $1000,$A0B9,$A05C,	 $48; 8
		dc.w $1809,$A0BA,$A05D,	 $48; 12
		dc.w $2004,$A0C0,$A060,	 $10; 16
		dc.w $3800,$A0C2,$A061,	   0; 20
		dc.w $280E,$A0C3,$A061,	   8; 24
		dc.w $280E,$A0CF,$A067,	 $28; 28
		dc.w $2806,$A0DB,$A06D,	 $48; 32
		dc.w $2800,$A0E1,$A070,	 $58; 36
		dc.w $400D,$A0E2,$A071,	 $10; 40
		dc.w $4005,$A0EA,$A075,	 $30; 44
		dc.w $4008,$A0EE,$A077,	 $40; 48
word_137F8:	dc.w $D			
		dc.w  $804,$A0F1,$A078,	 $40; 0
		dc.w $1000,$B0AC,$B056,	 $18; 4
		dc.w $100E,$A0F3,$A079,	 $20; 8
		dc.w $100D,$A0FF,$A07F,	 $40; 12
		dc.w $2000,$A107,$A083,	 $58; 16
		dc.w $2004,$A108,$A084,	 $40; 20
		dc.w $2800,$A10A,$A085,	   8; 24
		dc.w $280F,$A10B,$A085,	 $10; 28
		dc.w $3805,$A11B,$A08D,	   0; 32
		dc.w $280F,$A11F,$A08F,	 $30; 36
		dc.w $2801,$A12F,$A097,	 $50; 40
		dc.w $480C,$A131,$A098,	 $10; 44
		dc.w $4804,$A135,$A09A,	 $30; 48
word_13862:	dc.w $D			
		dc.w  $80C,$8137,$809B,	 $20; 0
		dc.w $1000,$813B,$809D,	 $40; 4
		dc.w $100F,$813C,$809E,	   8; 8
		dc.w $300D,$814C,$80A6,	   0; 12
		dc.w $1802,$8154,$80AA,	   0; 16
		dc.w $100B,$8157,$80AB,	 $28; 20
		dc.w $2800,$8163,$80B1,	 $40; 24
		dc.w $3000,$8164,$80B2,	 $48; 28
		dc.w $300D,$8165,$80B2,	 $20; 32
		dc.w $4000,$816D,$80B6,	   8; 36
		dc.w $400D,$816E,$80B7,	 $10; 40
		dc.w $4005,$8176,$80BB,	 $30; 44
		dc.w $3002,$817A,$80BD,	 $40; 48
word_138CC:	dc.w $D			
		dc.w  $80C,$817D,$80BE,	 $18; 0
		dc.w  $807,$8181,$80C0,	 $38; 4
		dc.w $1000,$8189,$80C4,	 $48; 8
		dc.w $200F,$818A,$80C5,	   0; 12
		dc.w $1800,$819A,$80CD,	   8; 16
		dc.w $1005,$819B,$80CD,	 $10; 20
		dc.w $100A,$819F,$80CF,	 $20; 24
		dc.w $280F,$81A8,$80D4,	 $20; 28
		dc.w $2807,$81B8,$80DC,	 $40; 32
		dc.w $4008,$81C0,$80E0,	   8; 36
		dc.w $5001,$81C3,$80E1,	   8; 40
		dc.w $480A,$81C5,$80E2,	 $10; 44
		dc.w $480D,$81CE,$80E7,	 $28; 48
word_13936:	dc.w $F			
		dc.w  $80C,$81D6,$80EB,	 $28; 0
		dc.w  $800,$81DA,$80ED,	 $48; 4
		dc.w $1803,$81DB,$80ED,	 $10; 8
		dc.w $100F,$81DF,$80EF,	 $18; 12
		dc.w $100F,$81EF,$80F7,	 $38; 16
		dc.w $1000,$81FF,$80FF,	 $58; 20
		dc.w $2800,$8200,$8100,	 $58; 24
		dc.w $3800,$8201,$8100,	 $10; 28
		dc.w $300D,$8202,$8101,	 $18; 32
		dc.w $300D,$820A,$8105,	 $38; 36
		dc.w $4000,$8212,$8109,	 $20; 40
		dc.w $4001,$8213,$8109,	 $28; 44
		dc.w $400E,$8215,$810A,	 $30; 48
		dc.w $4002,$8221,$8110,	 $50; 52
		dc.w $3801,$8224,$8112,	 $58; 56
word_139B0:	dc.w $D			
		dc.w  $80F,$8226,$8113,	 $28; 0
		dc.w $1000,$8236,$811B,	 $20; 4
		dc.w $1807,$8237,$811B,	 $18; 8
		dc.w  $807,$823F,$811F,	 $48; 12
		dc.w $1000,$8247,$8123,	 $58; 16
		dc.w $3804,$8248,$8124,	 $18; 20
		dc.w $280F,$824A,$8125,	 $28; 24
		dc.w $2809,$825A,$812D,	 $48; 28
		dc.w $3805,$8260,$8130,	 $48; 32
		dc.w $4001,$8264,$8132,	 $58; 36
		dc.w $4804,$8266,$8133,	 $28; 40
		dc.w $5000,$8268,$8134,	 $30; 44
		dc.w $480D,$8269,$8134,	 $38; 48
word_13A1A:	dc.w 3			
		dc.w	$D,$8271,$8138,	   8; 0
		dc.w $1009,$8279,$813C,	   8; 4
		dc.w $2005,$827F,$813F,	 $10; 8
word_13A34:	dc.w 6			
		dc.w	$C,$E283,$E141,$FFB0; 0
		dc.w	 8,$E287,$E143,$FFD0; 4
		dc.w	 8,$E28A,$E145,	 $18; 8
		dc.w	$C,$E28D,$E146,	 $30; 12
		dc.w	$C,  $10,    8,$FFE8; 16
		dc.w	 4,  $10,    8,	   8; 20
word_13A66:	dc.w 7			
		dc.w	$C,$E283,$E141,$FFB0; 0
		dc.w	 8,$E287,$E143,$FFD0; 4
		dc.w	 8,$E28A,$E145,	 $18; 8
		dc.w	$C,$E28D,$E146,	 $30; 12
		dc.w	$C,  $10,    8,$FFE8; 16
		dc.w	 4,  $10,    8,	   8; 20
		dc.w  $804,$E2A0,$E150,	 $58; 24
word_13AA0:	dc.w 1			
		dc.w $FC00,$2291,$2148,$FFFC; 0
word_13AAA:	dc.w 1			
		dc.w $F805,$2292,$2149,$FFF8; 0
word_13AB4:	dc.w 1			
		dc.w $F40A,$2296,$214B,$FFF4; 0
word_13ABE:	dc.w 1			
		dc.w $FC00,$229F,$214F,$FFFC; 0
word_13AC8:	dc.w 1			
		dc.w $FC04,$82A0,$8150,$FFF8; 0
word_13AD2:	dc.w 4			
		dc.w	 3,    0,    0,	   8; 0
		dc.w	 3,    0,    0,	   0; 4
		dc.w $2003,    0,    0,	   8; 8
		dc.w $2003,    0,    0,	   0; 12
word_13AF4:	dc.w $E			
		dc.w  $80F,$8226,$8113,	 $28; 0
		dc.w $1000,$8236,$811B,	 $20; 4
		dc.w $1807,$8237,$811B,	 $18; 8
		dc.w  $807,$823F,$811F,	 $48; 12
		dc.w $1000,$8247,$8123,	 $58; 16
		dc.w $3804,$8248,$8124,	 $18; 20
		dc.w $280F,$824A,$8125,	 $28; 24
		dc.w $2809,$825A,$812D,	 $48; 28
		dc.w $3805,$8260,$8130,	 $48; 32
		dc.w $4001,$8264,$8132,	 $58; 36
		dc.w $4804,$8266,$8133,	 $28; 40
		dc.w $5000,$8268,$8134,	 $30; 44
		dc.w $480D,$8269,$8134,	 $38; 48
		dc.w $4804,$82A2,$8151,	 $20; 52
word_13B66:	dc.w 1			
		dc.w	 6,$A2A4,$A152,	   8; 0
; -----------------------------------------------------------------------------
; Unknown Sprite Mappings
; -----------------------------------------------------------------------------
Map_13B70:	dc.w word_13B76-Map_13B70; 0	
					
		dc.w word_13BB8-Map_13B70; 1
		dc.w word_13BFA-Map_13B70; 2
word_13B76:	dc.w 8			
		dc.w $F400,$6402,$6201,$FFD4; 0
		dc.w $F40C,$6403,$6201,$FFE4; 4
		dc.w $F404,$6407,$6203,	   4; 8
		dc.w  $400, $409, $204,$FFD4; 12
		dc.w  $40C, $403, $201,$FFE4; 16
		dc.w  $404, $407, $203,	   4; 20
		dc.w  $404, $40A, $205,	 $1C; 24
		dc.w $F404,$63FA,$61FD,$FFBC; 28
word_13BB8:	dc.w 8			
		dc.w $F400, $402, $201,$FFD4; 0
		dc.w $F40C, $403, $201,$FFE4; 4
		dc.w $F404, $407, $203,	   4; 8
		dc.w  $400,$6409,$6204,$FFD4; 12
		dc.w  $40C,$6403,$6201,$FFE4; 16
		dc.w  $404,$6407,$6203,	   4; 20
		dc.w  $404,$640A,$6205,	 $1C; 24
		dc.w  $404,$63FA,$61FD,$FFBC; 28
word_13BFA:	dc.w 8			
		dc.w $F800,$669C,$634E,$FFDC; 0
		dc.w $F800,$669D,$634E,$FFE4; 4
		dc.w $F800,$66A1,$6350,$FFEC; 8
		dc.w $F800,$6696,$634B,$FFF4; 12
		dc.w $F800,$669C,$634E,$FFFC; 16
		dc.w $F800,$669B,$634D,	   4; 20
		dc.w $F800,$66A0,$6350,	  $C; 24
		dc.w $F804,$63FA,$61FD,$FFBC; 28

; =============== S U B	R O U T	I N E =======================================


sub_13C3C:				
					
		jmp	(PlaySound).l
; End of function sub_13C3C


; =============== S U B	R O U T	I N E =======================================


sub_13C42:				
					
		jmp	(PlayMusic).l
; End of function sub_13C42

; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Sprite for level title card
; ----------------------------------------------------------------------------

Sprite_13C48:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_13C56(pc,d0.w),d1
		jmp	off_13C56(pc,d1.w)
; ===========================================================================
off_13C56:	dc.w loc_13C6E-off_13C56; 0 
					
		dc.w loc_13D22-off_13C56; 1
		dc.w loc_13D58-off_13C56; 2
		dc.w loc_13DA6-off_13C56; 3
		dc.w loc_13DDC-off_13C56; 4
		dc.w loc_13DE8-off_13C56; 5
		dc.w loc_13DEE-off_13C56; 6
		dc.w loc_13E42-off_13C56; 7
		dc.w loc_13E84-off_13C56; 8
		dc.w loc_13EE6-off_13C56; 9
		dc.w loc_13EFE-off_13C56; 10
		dc.w loc_13F18-off_13C56; 11
; ===========================================================================

loc_13C6E:				
		lea	(a0),a1
		lea	(word_13CD4)(pc),a2
		moveq	#5,d1

loc_13C76:				
		_move.b	#$34,0(a1) ; '4'
		move.b	(a2)+,$24(a1)
		move.l	#Map_147BA,4(a1)
		move.b	(a2)+,$1A(a1)
		move.b	(a2)+,$19(a1)
		move.b	(a2)+,$1E(a1)
		move.w	(a2),8(a1)
		move.w	(a2)+,$32(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,$A(a1)
		move.b	#0,1(a1)
		lea	$40(a1),a1
		dbf	d1,loc_13C76
		move.w	#$26,($FFFFB1B4).w ; '&'
		clr.w	(v_fg_y_pos_vsram).w
		move.w	#-$E0,(v_fg_y_pos_vsram_p2).w
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$FF,d1

loc_13CCC:				
		move.l	d0,(a1)+
		dbf	d1,loc_13CCC
		rts	
; ===========================================================================
word_13CD4:	dc.w  $800		; 0 
		dc.w $801B		; 1
		dc.w  $240		; 2
		dc.w  $120		; 3
		dc.w   $B8		; 4
		dc.w  $A11		; 5
		dc.w $401C		; 6
		dc.w   $28		; 7
		dc.w  $148		; 8
		dc.w   $D0		; 9
		dc.w  $C12		; 10
		dc.w $181C		; 11
		dc.w   $68		; 12
		dc.w  $188		; 13
		dc.w   $D0		; 14
		dc.w  $200		; 15
		dc.w	 0		; 16
		dc.w	 0		; 17
		dc.w	 0		; 18
		dc.w	 0		; 19
		dc.w  $415		; 20
		dc.w $4808		; 21
		dc.w  $2A8		; 22
		dc.w  $168		; 23
		dc.w  $120		; 24
		dc.w  $616		; 25
		dc.w  $815		; 26
		dc.w   $80		; 27
		dc.w   $F0		; 28
		dc.w   $F0		; 29

; =============== S U B	R O U T	I N E =======================================


sub_13D10:				
					
		subq.b	#1,$1E(a0)
		bne.s	loc_13D1E
		move.b	#1,$1E(a0)
		rts	
; ===========================================================================

loc_13D1E:				
		addq.w	#4,sp
		rts	
; End of function sub_13D10

; ===========================================================================

loc_13D22:				
		moveq	#$10,d0
		moveq	#8,d1
		tst.w	(f_two_player).w
		sne	d6
		beq.s	loc_13D32
		moveq	#$20,d0	; ' '
		moveq	#7,d1

loc_13D32:				
		move.w	$34(a0),d2
		cmp.w	d0,d2
		beq.s	locret_13D56
		lsl.w	d1,d2
		move.w	#-$4000,d0
		add.w	d2,d0
		move.w	d0,$36(a0)
		tst.b	d6
		beq.s	loc_13D52
		addi.w	#-$6000,d2
		move.w	d2,$38(a0)

loc_13D52:				
		addq.w	#1,$34(a0)

locret_13D56:				
		rts	
; ===========================================================================

loc_13D58:				
		jsr	(sub_13D10)(pc)
		move.w	$34(a0),d0
		bmi.w	sub_13E1C
		add.w	d0,d0
		move.w	#$500,d1
		tst.w	(f_two_player).w
		sne	d6
		bne.s	loc_13D74
		add.w	d1,d1

loc_13D74:				
		move.w	#-$4000,d2
		add.w	d0,d2
		add.w	d1,d2
		move.w	d2,$36(a0)
		tst.b	d6
		beq.s	loc_13D8E
		addi.w	#-$6000,d1
		add.w	d0,d1
		move.w	d1,$38(a0)

loc_13D8E:				
		subq.w	#2,$34(a0)
		move.w	$34(a0),$3A(a0)
		cmpi.w	#6,$34(a0)
		seq	$34(a0)
		bra.w	sub_13E1C
; ===========================================================================

loc_13DA6:				
		jsr	(sub_13D10)(pc)
		tst.w	$34(a0)
		bmi.w	sub_13E1C
		move.w	#-$4000,$36(a0)
		tst.w	(f_two_player).w
		beq.s	loc_13DC4
		move.w	#-$6000,$38(a0)

loc_13DC4:				
		addq.w	#2,$34(a0)
		move.w	$34(a0),$3A(a0)
		cmpi.w	#$E,$34(a0)
		seq	$34(a0)
		bra.w	sub_13E1C
; ===========================================================================

loc_13DDC:				
		jsr	(sub_13D10)(pc)
		move.b	(v_zone).w,$1A(a0)
		bra.s	sub_13E1C
; ===========================================================================

loc_13DE8:				
		jsr	(sub_13D10)(pc)
		bra.s	sub_13E1C
; ===========================================================================

loc_13DEE:				
		jsr	(sub_13D10)(pc)
		move.b	(v_zone).w,d0
		cmpi.b	#$10,d0
		beq.s	loc_13E3E
		cmpi.b	#6,d0
		beq.s	loc_13E3E
		cmpi.b	#$E,d0
		beq.s	loc_13E3E
		move.b	(v_act).w,d1
		addi.b	#$12,d1
		cmpi.b	#5,d0
		bne.s	loc_13E18
		moveq	#$14,d1

loc_13E18:				
		move.b	d1,$1A(a0)

; =============== S U B	R O U T	I N E =======================================


sub_13E1C:				
					
		moveq	#$10,d0
		move.w	8(a0),d1
		cmp.w	$30(a0),d1
		beq.s	loc_13E38
		bhi.s	loc_13E2C
		neg.w	d0

loc_13E2C:				
		sub.w	d0,8(a0)
		cmpi.w	#$200,8(a0)
		bhi.s	locret_13E3C

loc_13E38:				
		bra.w	DisplaySprite
; ===========================================================================

locret_13E3C:				
		rts	
; End of function sub_13E1C

; ===========================================================================

loc_13E3E:				
					
		bra.w	DeleteObject
; ===========================================================================

loc_13E42:				
		move.w	$34(a0),d0
		bpl.s	loc_13E54
		move.b	#$10,-$1C(a0)
		clr.w	-$C(a0)
		bra.s	loc_13E3E
; ===========================================================================

loc_13E54:				
		add.w	d0,d0
		move.w	#-$4000,$36(a0)
		add.w	d0,$36(a0)
		tst.w	(f_two_player).w
		beq.s	loc_13E70
		move.w	#-$6000,$38(a0)
		add.w	d0,$38(a0)

loc_13E70:				
		subq.w	#4,$34(a0)
		cmpi.w	#-2,$34(a0)
		bne.s	loc_13E80
		clr.w	$34(a0)

loc_13E80:				
		bra.w	loc_13EC4
; ===========================================================================

loc_13E84:				
		move.w	$34(a0),d0
		cmpi.w	#$28,d0	; '('
		bne.s	loc_13E96
		move.b	#$12,-$1C(a0)
		bra.s	loc_13E3E
; ===========================================================================

loc_13E96:				
		add.w	d0,d0
		move.w	#$500,d1
		tst.w	(f_two_player).w
		sne	d6
		bne.s	loc_13EA6
		add.w	d1,d1

loc_13EA6:				
		move.w	#-$4000,d2
		add.w	d0,d2
		add.w	d1,d2
		move.w	d2,$36(a0)
		tst.b	d6
		beq.s	loc_13EC0
		addi.w	#-$6000,d1
		add.w	d0,d1
		move.w	d1,$38(a0)

loc_13EC0:				
		addq.w	#4,$34(a0)

loc_13EC4:				
		moveq	#$20,d0	; ' '
		move.w	8(a0),d1
		cmp.w	$32(a0),d1
		beq.s	locret_13EE4
		bhi.s	loc_13ED4
		neg.w	d0

loc_13ED4:				
		sub.w	d0,8(a0)
		cmpi.w	#$200,8(a0)
		bhi.s	locret_13EE4
		bra.w	DisplaySprite
; ===========================================================================

locret_13EE4:				
					
		rts	
; ===========================================================================

loc_13EE6:				
		move.l	a0,-(sp)
		move.l	d7,-(sp)
		bsr.w	DeformLayers
		move.l	(sp)+,d7
		movea.l	(sp)+,a0
		addi.b	#2,$24(a0)
		move.w	#$F0,$34(a0)

loc_13EFE:				
		move.w	$34(a0),d0
		subi.w	#$20,d0	; ' '
		cmpi.w	#-$30,d0
		beq.w	loc_13E3E
		move.w	d0,$34(a0)
		move.w	d0,$36(a0)
		rts	
; ===========================================================================

loc_13F18:				
		tst.w	$1E(a0)
		beq.s	loc_13F24
		subq.w	#1,$1E(a0)
		bra.s	loc_13F40
; ===========================================================================

loc_13F24:				
		moveq	#$20,d0	; ' '
		move.w	8(a0),d1
		cmp.w	$32(a0),d1
		beq.s	loc_13F44
		bhi.s	loc_13F34
		neg.w	d0

loc_13F34:				
		sub.w	d0,8(a0)
		cmpi.w	#$200,8(a0)
		bhi.s	loc_13F44

loc_13F40:				
		bra.w	DisplaySprite
; ===========================================================================

loc_13F44:				
					
		cmpa.w	#-$4F80,a0
		bne.s	loc_13F5E
		moveq	#2,d0
		bsr.w	sub_158F4
		moveq	#0,d0
		move.b	(v_zone).w,d0
		move.b	byte_13F62(pc,d0.w),d0
		bsr.w	sub_158F4

loc_13F5E:				
		bra.w	DeleteObject
; ===========================================================================
byte_13F62:	dc.b $32		; 0 
		dc.b $32		; 1
		dc.b $32		; 2
		dc.b $32		; 3
		dc.b $34		; 4
		dc.b $34		; 5
		dc.b $34		; 6
		dc.b $34		; 7
		dc.b $36		; 8
		dc.b $36		; 9
		dc.b $37		; 10
		dc.b $33		; 11
		dc.b $39		; 12
		dc.b $3A		; 13
		dc.b $35		; 14
		dc.b $3B		; 15
		dc.b $38		; 16
		
		dc.b $38		; 17
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_13F74:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_13F82(pc,d0.w),d1
		jmp	off_13F82(pc,d1.w)
; ===========================================================================
off_13F82:	dc.w loc_13F88-off_13F82; 0 
					
		dc.w loc_13FCC-off_13F82; 1
		dc.w loc_13FEE-off_13F82; 2
; ===========================================================================

loc_13F88:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_13F90
		rts	
; ===========================================================================

loc_13F90:				
		addq.b	#2,$24(a0)
		move.w	#$50,8(a0) ; 'P'
		btst	#0,$1A(a0)
		beq.s	loc_13FA8
		move.w	#$1F0,8(a0)

loc_13FA8:				
		move.w	#$F0,$A(a0)
		move.l	#Map_14C6C,4(a0)
		move.w	#-$7B22,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#0,1(a0)
		move.b	#0,$18(a0)

loc_13FCC:				
		moveq	#$10,d1
		cmpi.w	#$120,8(a0)
		beq.s	loc_13FE2
		bcs.s	loc_13FDA
		neg.w	d1

loc_13FDA:				
		add.w	d1,8(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_13FE2:				
		move.w	#$2D0,$1E(a0)
		addq.b	#2,$24(a0)
		rts	
; ===========================================================================

loc_13FEE:				
		btst	#0,$1A(a0)
		bne.w	loc_14082
		move.b	(v_joypad_press_actual).w,d0
		or.b	(v_joypad2_press_actual).w,d0
		andi.b	#$70,d0	; 'p'
		bne.s	loc_14014
		tst.w	$1E(a0)
		beq.s	loc_14014
		subq.w	#1,$1E(a0)
		bra.w	DisplaySprite
; ===========================================================================

loc_14014:				
					
		tst.b	(f_time_over).w
		bne.s	loc_14034
		tst.b	(f_time_over_p2).w
		bne.s	loc_14034
		move.b	#$14,(v_gamemode).w
		tst.b	(v_continues).w
		bne.s	loc_1403E
		move.b	#0,(v_gamemode).w
		bra.s	loc_1403E
; ===========================================================================

loc_14034:				
					
		clr.l	(v_time_lampcopy).w
		move.w	#1,(f_restart).w

loc_1403E:				
					
		tst.w	(f_two_player).w
		beq.s	loc_14082
		move.w	#0,(f_restart).w
		move.b	#$18,(v_gamemode).w
		move.w	#0,(v_results_screen_2p).w
		tst.b	(f_time_over).w
		bne.s	loc_14082
		tst.b	(f_time_over_p2).w
		bne.s	loc_14082
		move.w	#1,(v_game_over_2p).w
		move.w	#1,(v_results_screen_2p).w
		bsr.w	sub_158FA
		move.w	#-1,(a4)
		tst.b	$3F(a0)
		beq.s	loc_1407E
		addq.w	#1,a4

loc_1407E:				
		move.b	#-2,(a4)

loc_14082:				
					
		bra.w	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; End of level results screen
; ----------------------------------------------------------------------------

Sprite_14086:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_14094(pc,d0.w),d1
		jmp	off_14094(pc,d1.w)
; ===========================================================================
off_14094:	dc.w loc_140AC-off_14094; 0 
					
		dc.w loc_14102-off_14094; 1
		dc.w loc_14142-off_14094; 2
		dc.w loc_14146-off_14094; 3
		dc.w loc_14168-off_14094; 4
		dc.w loc_1419C-off_14094; 5
		dc.w loc_141AA-off_14094; 6
		dc.w loc_1419C-off_14094; 7
		dc.w loc_14270-off_14094; 8
		dc.w loc_142B0-off_14094; 9
		dc.w loc_142CC-off_14094; 10
		dc.w loc_1413A-off_14094; 11
; ===========================================================================

loc_140AC:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_140B4
		rts	
; ===========================================================================

loc_140B4:				
		movea.l	a0,a1
		lea	(byte_14380)(pc),a2
		moveq	#7,d1

loc_140BC:				
					
		_move.b	0(a1),d0
		beq.s	loc_140CE
		cmpi.b	#$3A,d0	; ':'
		beq.s	loc_140CE
		lea	$40(a1),a1
		bra.s	loc_140BC
; ===========================================================================

loc_140CE:				
					
		_move.b	#$3A,0(a1) ; ':'
		move.w	(a2)+,8(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,$A(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$1A(a1)
		move.l	#Map_14CBC,4(a1)
		bsr.w	sub_16D8A
		move.b	#0,1(a1)
		lea	$40(a1),a1
		dbf	d1,loc_140BC

loc_14102:				
		moveq	#0,d0
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_14118
		addq.w	#1,d0
		btst	#7,(v_console_region).w
		beq.s	loc_14118
		addq.w	#1,d0

loc_14118:				
					
		move.b	d0,$1A(a0)
		bsr.w	sub_13E1C
		move.w	8(a0),d0
		cmp.w	$30(a0),d0
		bne.w	locret_14138
		move.b	#$A,$24(a0)
		move.w	#$B4,$1E(a0)

locret_14138:				
		rts	
; ===========================================================================

loc_1413A:				
		tst.w	(v_perfect_rings_left).w
		bne.w	DeleteObject

loc_14142:				
		bra.w	sub_13E1C
; ===========================================================================

loc_14146:				
		move.b	(v_zone).w,d0
		cmpi.b	#$10,d0
		beq.s	loc_1415E
		cmpi.b	#6,d0
		beq.s	loc_1415E
		cmpi.b	#$E,d0
		bne.w	sub_13E1C

loc_1415E:				
					
		move.b	#5,$1A(a0)
		bra.w	sub_13E1C
; ===========================================================================

loc_14168:				
		move.b	(v_zone).w,d0
		cmpi.b	#$10,d0
		beq.w	loc_13E3E
		cmpi.b	#6,d0
		beq.w	loc_13E3E
		cmpi.b	#$E,d0
		beq.w	loc_13E3E
		cmpi.b	#5,d0
		bne.s	loc_1418E
		moveq	#8,d0
		bra.s	loc_14194
; ===========================================================================

loc_1418E:				
		move.b	(v_act).w,d0
		addq.b	#6,d0

loc_14194:				
		move.b	d0,$1A(a0)
		bra.w	sub_13E1C
; ===========================================================================

loc_1419C:				
		subq.w	#1,$1E(a0)
		bne.s	loc_141A6
		addq.b	#2,$24(a0)

loc_141A6:				
		bra.w	DisplaySprite
; ===========================================================================

loc_141AA:				
		bsr.w	DisplaySprite
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		tst.w	(v_bonus_count_1).w
		beq.s	loc_141C6
		addi.w	#$A,d0
		subi.w	#$A,(v_bonus_count_1).w

loc_141C6:				
		tst.w	(v_bonus_count_2).w
		beq.s	loc_141D6
		addi.w	#$A,d0
		subi.w	#$A,(v_bonus_count_2).w

loc_141D6:				
		tst.w	(v_bonus_count_3).w
		beq.s	loc_141E6
		addi.w	#$A,d0
		subi.w	#$A,(v_bonus_count_3).w

loc_141E6:				
		add.w	d0,(v_total_bonus_countdown).w
		tst.w	d0
		bne.s	loc_14256
		move.w	#$C5,d0	
		jsr	(PlaySound).l
		addq.b	#2,$24(a0)
		move.w	#$B4,$1E(a0)
		cmpi.w	#$3E8,(v_total_bonus_countdown).w
		bcs.s	locret_14254
		move.w	#$12C,$1E(a0)
		lea	$40(a0),a1

loc_14214:				
		_tst.b	ost_id(a1)
		beq.s	loc_14220
		lea	$40(a1),a1
		bra.s	loc_14214
; ===========================================================================

loc_14220:				
		_move.b	#$3A,0(a1)
		move.b	#$12,$24(a1)
		move.w	#$188,8(a1)
		move.w	#$118,$A(a1)
		move.l	#Map_14CBC,4(a1)
		bsr.w	sub_16D8A
		move.b	#0,1(a1)
		move.w	#$3C,$1E(a1) ; '<'
		addq.b	#1,(v_continues).w

locret_14254:				
					
		rts	
; ===========================================================================

loc_14256:				
		jsr	sub_40D06
		move.b	($FFFFFE0F).w,d0
		andi.b	#3,d0
		bne.s	locret_14254
		move.w	#$CD,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_14270:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.b	(v_act).w,d0
		add.w	d0,d0
		lea	(word_142F8)(pc),a1
		tst.w	(f_two_player).w
		beq.s	loc_1428C
		lea	(word_1433C)(pc),a1

loc_1428C:				
		move.w	(a1,d0.w),d0
		tst.w	d0
		bpl.s	loc_1429C
		move.b	#0,(v_gamemode).w
		rts	
; ===========================================================================

loc_1429C:				
		move.w	d0,(v_zone).w
		clr.b	(v_last_lamppost).w
		clr.b	(v_last_lamppost_p2).w
		move.w	#1,(f_restart).w
		rts	
; ===========================================================================

loc_142B0:				
		tst.w	$1E(a0)
		beq.s	loc_142BC
		subq.w	#1,$1E(a0)
		rts	
; ===========================================================================

loc_142BC:				
		addi.b	#2,$24(a0)
		move.w	#$BF,d0	
		jsr	(PlaySound).l

loc_142CC:				
		subq.w	#1,$1E(a0)
		bpl.s	loc_142E2
		move.w	#$13,$1E(a0)
		addq.b	#1,$1B(a0)
		andi.b	#1,$1B(a0)

loc_142E2:				
		moveq	#$C,d0
		add.b	$1B(a0),d0
		move.b	d0,$1A(a0)
		btst	#4,($FFFFFE05).w
		bne.w	DisplaySprite
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Main game level order
;
; One value per	act. That value	is the level/act number	of the level to	load when
; that act finishes.
; -------------------------------------------------------------------------------
word_142F8:	dc.w	 1		; 0 
		dc.w  $D00		; 1
		dc.w	 0		; 2
		dc.w	 0		; 3
		dc.w  $201		; 4
		dc.w  $400		; 5
		dc.w	 0		; 6
		dc.w	 0		; 7
		dc.w  $401		; 8
		dc.w  $500		; 9
		dc.w $1000		; 10
		dc.w	 0		; 11
		dc.w  $E00		; 12
		dc.w	 0		; 13
		dc.w  $701		; 14
		dc.w  $B00		; 15
		dc.w  $801		; 16
		dc.w  $A00		; 17
		dc.w	 0		; 18
		dc.w	 0		; 19
		dc.w  $A01		; 20
		dc.w  $400		; 21
		dc.w  $B01		; 22
		dc.w  $A00		; 23
		dc.w  $C01		; 24
		dc.w  $700		; 25
		dc.w  $D01		; 26
		dc.w  $F00		; 27
		dc.w $FFFF		; 28
		dc.w	 0		; 29
		dc.w  $F01		; 30
		dc.w  $C00		; 31
		dc.w  $600		; 32
		dc.w	 0		; 33
word_1433C:	dc.w	 1		; 0 
		dc.w  $C00		; 1
		dc.w	 0		; 2
		dc.w	 0		; 3
		dc.w  $201		; 4
		dc.w  $400		; 5
		dc.w	 0		; 6
		dc.w	 0		; 7
		dc.w  $401		; 8
		dc.w  $500		; 9
		dc.w $1000		; 10
		dc.w	 0		; 11
		dc.w  $E00		; 12
		dc.w	 0		; 13
		dc.w  $701		; 14
		dc.w  $B00		; 15
		dc.w  $801		; 16
		dc.w  $A00		; 17
		dc.w	 0		; 18
		dc.w	 0		; 19
		dc.w  $A01		; 20
		dc.w  $400		; 21
		dc.w  $B01		; 22
		dc.w $FFFF		; 23
		dc.w  $C01		; 24
		dc.w  $B00		; 25
		dc.w  $D01		; 26
		dc.w  $F00		; 27
		dc.w $FFFF		; 28
		dc.w	 0		; 29
		dc.w  $F01		; 30
		dc.w  $C00		; 31
		dc.w  $600		; 32
		dc.w	 0		; 33
byte_14380:	dc.b   0,$20,  1,$20,  0,$B8,  2,  0,  2,  0,  1,  0,  0,$CA,  4,  3; 0
					
		dc.b   2,$40,  1,$40,  0,$CA,  6,  4,  2,$78,  1,$78,  0,$BE,  8,  6; 16
		dc.b   3,$50,  1,$20,  1,$20,  4,  9,  3,$20,  1,$20,  0,$F0,  4, $A; 32
		dc.b   3,$30,  1,$20,  1,  0,  4, $B,  3,$40,  1,$20,  1,$10,$16, $E; 48
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; End of special stage results screen
; ----------------------------------------------------------------------------

Sprite_143C0:				
		moveq	#0,d0
		moveq	#0,d6
		move.b	$24(a0),d0
		move.w	off_143D0(pc,d0.w),d1
		jmp	off_143D0(pc,d1.w)
; ===========================================================================
off_143D0:	dc.w loc_14406-off_143D0; 0 
					
		dc.w loc_14450-off_143D0; 1
		dc.w loc_14484-off_143D0; 2
		dc.w loc_144C2-off_143D0; 3
		dc.w loc_144C0-off_143D0; 4
		dc.w loc_144BE-off_143D0; 5
		dc.w loc_144BC-off_143D0; 6
		dc.w loc_144BA-off_143D0; 7
		dc.w loc_144B8-off_143D0; 8
		dc.w loc_144B6-off_143D0; 9
		dc.w loc_14564-off_143D0; 10
		dc.w loc_14500-off_143D0; 11
		dc.w loc_144DC-off_143D0; 12
		dc.w loc_14568-off_143D0; 13
		dc.w loc_14572-off_143D0; 14
		dc.w loc_14580-off_143D0; 15
		dc.w loc_14572-off_143D0; 16
		dc.w loc_1461C-off_143D0; 17
		dc.w loc_14572-off_143D0; 18
		dc.w loc_14572-off_143D0; 19
		dc.w loc_14626-off_143D0; 20
		dc.w loc_14692-off_143D0; 21
		dc.w loc_14572-off_143D0; 22
		dc.w loc_1461C-off_143D0; 23
		dc.w Obj6F_InitAndMoveSuperMsg-off_143D0; 24
		dc.w loc_14714-off_143D0; 25
		dc.w loc_14736-off_143D0; 26
; ===========================================================================

loc_14406:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_1440E
		rts	
; ===========================================================================

loc_1440E:				
		movea.l	a0,a1
		lea	(byte_14752)(pc),a2
		moveq	#$C,d1

loc_14416:				
		_move.b	0(a0),0(a1)
		move.w	(a2),8(a1)
		move.w	(a2)+,$32(a1)
		move.w	(a2)+,$30(a1)
		move.w	(a2)+,$A(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$1A(a1)
		move.l	#off_14ED0,4(a1)
		move.b	#$78,$19(a1) ; 'x'
		move.b	#0,1(a1)
		lea	$40(a1),a1
		dbf	d1,loc_14416

loc_14450:				
		tst.b	(f_got_emerald).w
		beq.s	loc_1445C
		move.b	#4,$1A(a0)

loc_1445C:				
		cmpi.b	#7,(v_emeralds).w
		bne.s	loc_1446A
		move.b	#$19,$1A(a0)

loc_1446A:				
		move.w	$30(a0),d0
		cmp.w	8(a0),d0
		bne.s	loc_14480
		move.b	#$1C,$24(a0)
		move.w	#$B4,$1E(a0)

loc_14480:				
		bra.w	sub_13E1C
; ===========================================================================

loc_14484:				
		cmpi.b	#7,(v_emeralds).w
		bne.s	loc_14490
		moveq	#$16,d0
		bra.s	loc_1449A
; ===========================================================================

loc_14490:				
		tst.b	(f_got_emerald).w
		beq.w	DeleteObject
		moveq	#1,d0

loc_1449A:				
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_144AE
		addq.w	#1,d0
		btst	#7,(v_console_region).w
		beq.s	loc_144AE
		addq.w	#1,d0

loc_144AE:				
					
		move.b	d0,$1A(a0)
		bra.w	sub_13E1C
; ===========================================================================

loc_144B6:				
		addq.w	#1,d6

loc_144B8:				
		addq.w	#1,d6

loc_144BA:				
		addq.w	#1,d6

loc_144BC:				
		addq.w	#1,d6

loc_144BE:				
		addq.w	#1,d6

loc_144C0:				
		addq.w	#1,d6

loc_144C2:				
		lea	(v_emerald_list).w,a1
		tst.b	(a1,d6.w)
		beq.w	DeleteObject
		btst	#0,($FFFFFE0F).w
		beq.s	locret_144DA
		bsr.w	DisplaySprite

locret_144DA:				
		rts	
; ===========================================================================

loc_144DC:				
		tst.w	(v_player_mode).w
		bne.w	DeleteObject
		cmpi.b	#$26,($FFFFB824).w ; '&'
		beq.w	DeleteObject
		moveq	#$E,d0
		btst	#7,(v_console_region).w
		beq.s	loc_144FA
		addq.w	#1,d0

loc_144FA:				
		lea	(v_bonus_count_2).w,a1
		bra.s	loc_1455A
; ===========================================================================

loc_14500:				
		cmpi.b	#$26,($FFFFB824).w ; '&'
		bne.s	loc_14532
		move.w	#$1388,(v_bonus_count_1).w
		move.b	#$2A,$24(a0) ; '*'
		move.w	#$120,$A(a0)
		st.b	(f_pass_bonus_update).w
		move.w	#$CF,d0	
		jsr	(PlaySound).l
		move.w	#$5A,($FFFFB81E).w ; 'Z'
		bra.w	loc_14692
; ===========================================================================

loc_14532:				
		move.w	(v_player_mode).w,d0
		beq.s	loc_14554
		move.w	#$120,$A(a0)
		subq.w	#1,d0
		beq.s	loc_14554
		moveq	#$E,d0
		btst	#7,(v_console_region).w
		beq.s	loc_1454E
		addq.w	#1,d0

loc_1454E:				
		lea	(v_bonus_count_2).w,a1
		bra.s	loc_1455A
; ===========================================================================

loc_14554:				
					
		moveq	#$D,d0
		lea	(v_bonus_count_1).w,a1

loc_1455A:				
					
		tst.w	(a1)
		bne.s	loc_14560
		addq.w	#5,d0

loc_14560:				
		move.b	d0,$1A(a0)

loc_14564:				
					
		bra.w	sub_13E1C
; ===========================================================================

loc_14568:				
		tst.b	(f_got_emerald).w
		beq.w	DeleteObject
		bra.s	loc_14564
; ===========================================================================

loc_14572:				
		subq.w	#1,$1E(a0)
		bne.s	loc_1457C
		addq.b	#2,$24(a0)

loc_1457C:				
		bra.w	DisplaySprite
; ===========================================================================

loc_14580:				
		bsr.w	DisplaySprite
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		tst.w	(v_bonus_count_1).w
		beq.s	loc_1459A
		addi.w	#$A,d0
		subq.w	#1,(v_bonus_count_1).w

loc_1459A:				
		tst.w	(v_bonus_count_2).w
		beq.s	loc_145A8
		addi.w	#$A,d0
		subq.w	#1,(v_bonus_count_2).w

loc_145A8:				
		tst.w	(v_total_bonus_countdown).w
		beq.s	loc_145B8
		addi.w	#$A,d0
		subi.w	#$A,(v_total_bonus_countdown).w

loc_145B8:				
		tst.w	d0
		bne.s	loc_14602
		move.w	#$C5,d0	
		jsr	(PlaySound).l
		addq.b	#2,$24(a0)
		move.w	#$78,$1E(a0) ; 'x'
		tst.w	(f_ss_perfect).w
		bne.s	loc_145F4
		cmpi.w	#2,(v_player_mode).w
		beq.s	locret_14600
		tst.b	(f_got_emerald).w
		beq.s	locret_14600
		cmpi.b	#7,(v_emeralds).w
		bne.s	locret_14600
		move.b	#$30,$24(a0) ; '0'
		rts	
; ===========================================================================

loc_145F4:				
		move.b	#$24,$24(a0) ; '$'
		move.w	#$5A,$1E(a0) ; 'Z'

locret_14600:				
					
		rts	
; ===========================================================================

loc_14602:				
		jsr	sub_40D06
		move.b	($FFFFFE0F).w,d0
		andi.b	#3,d0
		bne.s	locret_14600
		move.w	#$CD,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_1461C:				
		move.w	#1,(f_restart).w
		bra.w	DisplaySprite
; ===========================================================================

loc_14626:				
		bsr.w	DisplaySprite
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		tst.w	(v_bonus_count_1).w
		beq.s	loc_14642
		addi.w	#$14,d0
		subi.w	#$14,(v_bonus_count_1).w

loc_14642:				
		tst.w	d0
		beq.s	loc_14660
		jsr	sub_40D06
		move.b	($FFFFFE0F).w,d0
		andi.b	#3,d0
		bne.s	locret_14690
		move.w	#$CD,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_14660:				
		move.w	#$C5,d0	
		jsr	(PlaySound).l
		addq.b	#4,$24(a0)
		move.w	#$78,$1E(a0) ; 'x'
		cmpi.w	#2,(v_player_mode).w
		beq.s	locret_14690
		tst.b	(f_got_emerald).w
		beq.s	locret_14690
		cmpi.b	#7,(v_emeralds).w
		bne.s	locret_14690
		move.b	#$30,$24(a0) ; '0'

locret_14690:				
					
		rts	
; ===========================================================================

loc_14692:				
					
		moveq	#$11,d0
		btst	#3,($FFFFFE0F).w
		beq.s	loc_1469E
		moveq	#$15,d0

loc_1469E:				
		move.b	d0,$1A(a0)
		bra.w	DisplaySprite
; ===========================================================================

Obj6F_InitAndMoveSuperMsg:				
		move.b	#$32,$64(a0) ; '2'
		move.w	8(a0),d0
		cmp.w	$32(a0),d0
		bne.s	loc_14714
		move.b	#$14,$64(a0)
		subq.w	#8,$4A(a0)
		move.b	#$1A,$5A(a0)
		move.b	#$34,$24(a0) ; '4'
		subq.w	#8,$A(a0)
		move.b	#$1B,$1A(a0)
		lea	($FFFFBB40).w,a1
		_move.b	0(a0),0(a1)
		clr.w	8(a1)
		move.w	#$120,$30(a1)
		move.w	#$B4,$A(a1)
		move.b	#$14,$24(a1)
		move.b	#$1C,$1A(a1)
		move.l	#off_14ED0,4(a1)
		move.b	#$78,$19(a1) ; 'x'
		move.b	#0,1(a1)
		bra.w	DisplaySprite
; ===========================================================================

loc_14714:				
					
		moveq	#$20,d0	; ' '
		move.w	8(a0),d1
		cmp.w	$32(a0),d1
		beq.s	loc_14730
		bhi.s	loc_14724
		neg.w	d0

loc_14724:				
		sub.w	d0,8(a0)
		cmpi.w	#$200,8(a0)
		bhi.s	locret_14734

loc_14730:				
		bra.w	DisplaySprite
; ===========================================================================

locret_14734:				
		rts	
; ===========================================================================

loc_14736:				
		move.w	8(a0),d0
		cmp.w	$30(a0),d0
		bne.w	sub_13E1C
		move.w	#$B4,$1E(a0)
		move.b	#$20,$24(a0) ; ' '
		bra.w	DisplaySprite
; ===========================================================================
byte_14752:	dc.b   2,$40,  1,$20,  0,$AA,  2,  0,  0,  0,  1,$20,  0,$98,  4,  1; 0
					
		dc.b   1,$18,  0,  0,  0,$C4,  6,  5,  1,$30,  0,  0,  0,$D0,  8,  6; 16
		dc.b   1,$30,  0,  0,  0,$E8, $A,  7,  1,$18,  0,  0,  0,$F4, $C,  8; 32
		dc.b   1,  0,  0,  0,  0,$E8, $E,  9,  1,  0,  0,  0,  0,$D0,$10, $A; 48
		dc.b   1,$18,  0,  0,  0,$DC,$12, $B,  3,$30,  1,$20,  1,  8,$14, $C; 64
		dc.b   3,$40,  1,$20,  1,$18,$16, $D,  3,$50,  1,$20,  1,$28,$18, $E; 80
		dc.b   3,$60,  1,$20,  1,$38,$1A,$10; 96
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_147BA:	dc.w word_147E8-Map_147BA; 0	
					
		dc.w word_147E8-Map_147BA; 1
		dc.w word_147E8-Map_147BA; 2
		dc.w word_147E8-Map_147BA; 3
		dc.w word_14842-Map_147BA; 4
		dc.w word_14842-Map_147BA; 5
		dc.w word_14B24-Map_147BA; 6
		dc.w word_14894-Map_147BA; 7
		dc.w word_148CE-Map_147BA; 8
		dc.w word_147E8-Map_147BA; 9
		dc.w word_14930-Map_147BA; 10
		dc.w word_14972-Map_147BA; 11
		dc.w word_149C4-Map_147BA; 12
		dc.w word_14A1E-Map_147BA; 13
		dc.w word_14B86-Map_147BA; 14
		dc.w word_14A88-Map_147BA; 15
		dc.w word_14AE2-Map_147BA; 16
		dc.w word_14BC8-Map_147BA; 17
		dc.w word_14BEA-Map_147BA; 18
		dc.w word_14BF4-Map_147BA; 19
		dc.w word_14BFE-Map_147BA; 20
		dc.w word_14C08-Map_147BA; 21
		dc.w word_14C32-Map_147BA; 22
word_147E8:	dc.w $B			
		dc.w	 5,$8580,$82C0,$FFC3; 0
		dc.w	 9,$85DE,$82EF,$FFD0; 4
		dc.w	 5,$8580,$82C0,$FFE8; 8
		dc.w	 5,$85E4,$82F2,$FFF8; 12
		dc.w	 5,$85E8,$82F4,	   8; 16
		dc.w	 5,$85EC,$82F6,	 $18; 20
		dc.w	 5,$85F0,$82F8,	 $28; 24
		dc.w	 5,$85F4,$82FA,	 $48; 28
		dc.w	 1,$85F8,$82FC,	 $58; 32
		dc.w	 5,$85EC,$82F6,	 $60; 36
		dc.w	 5,$85EC,$82F6,	 $70; 40
word_14842:	dc.w $A			
		dc.w	 9,$85DE,$82EF,$FFE0; 0
		dc.w	 5,$8580,$82C0,$FFF8; 4
		dc.w	 5,$85E4,$82F2,	   8; 8
		dc.w	 5,$85E8,$82F4,	 $18; 12
		dc.w	 5,$8588,$82C4,	 $28; 16
		dc.w	 5,$85EC,$82F6,	 $38; 20
		dc.w	 5,$8588,$82C4,	 $48; 24
		dc.w	 5,$85F0,$82F8,	 $58; 28
		dc.w	 1,$85F4,$82FA,	 $68; 32
		dc.w	 5,$85F6,$82FB,	 $70; 36
word_14894:	dc.w 7			
		dc.w	 5,$85DE,$82EF,	   8; 0
		dc.w	 1,$85E2,$82F1,	 $18; 4
		dc.w	 5,$85E4,$82F2,	 $20; 8
		dc.w	 5,$85E4,$82F2,	 $30; 12
		dc.w	 5,$85E8,$82F4,	 $51; 16
		dc.w	 5,$8588,$82C4,	 $60; 20
		dc.w	 5,$85EC,$82F6,	 $70; 24
word_148CE:	dc.w $C			
		dc.w	 5,$85DE,$82EF,$FFB8; 0
		dc.w	 1,$85E2,$82F1,$FFC8; 4
		dc.w	 5,$85E4,$82F2,$FFD0; 8
		dc.w	 5,$85E4,$82F2,$FFE0; 12
		dc.w	 5,$8580,$82C0,$FFF0; 16
		dc.w	 5,$8584,$82C2,	   0; 20
		dc.w	 5,$85E8,$82F4,	 $20; 24
		dc.w	 5,$85EC,$82F6,	 $30; 28
		dc.w	 5,$85F0,$82F8,	 $40; 32
		dc.w	 5,$85EC,$82F6,	 $50; 36
		dc.w	 5,$85F4,$82FA,	 $60; 40
		dc.w	 5,$8580,$82C0,	 $70; 44
word_14930:	dc.w 8			
		dc.w	 5,$8588,$82C4,$FFFB; 0
		dc.w	 1,$85DE,$82EF,	  $B; 4
		dc.w	 5,$85E0,$82F0,	 $13; 8
		dc.w	 5,$8588,$82C4,	 $33; 12
		dc.w	 5,$85E4,$82F2,	 $43; 16
		dc.w	 5,$8580,$82C0,	 $53; 20
		dc.w	 5,$85E8,$82F4,	 $60; 24
		dc.w	 5,$8584,$82C2,	 $70; 28
word_14972:	dc.w $A			
		dc.w	 9,$85DE,$82EF,$FFD0; 0
		dc.w	 5,$85E4,$82F2,$FFE8; 4
		dc.w	 5,$85E8,$82F4,$FFF8; 8
		dc.w	 5,$85EC,$82F6,	   8; 12
		dc.w	 1,$85F0,$82F8,	 $18; 16
		dc.w	 5,$85F2,$82F9,	 $20; 20
		dc.w	 5,$85F2,$82F9,	 $41; 24
		dc.w	 5,$85F6,$82FB,	 $50; 28
		dc.w	 5,$85FA,$82FD,	 $60; 32
		dc.w	 5,$8580,$82C0,	 $70; 36
word_149C4:	dc.w $B			
		dc.w	 5,$85DE,$82EF,$FFD1; 0
		dc.w	 5,$85E2,$82F1,$FFE0; 4
		dc.w	 5,$85E6,$82F3,$FFF0; 8
		dc.w	 1,$85EA,$82F5,	   0; 12
		dc.w	 5,$8584,$82C2,	   8; 16
		dc.w	 5,$8588,$82C4,	 $18; 20
		dc.w	 5,$8584,$82C2,	 $38; 24
		dc.w	 1,$85EA,$82F5,	 $48; 28
		dc.w	 5,$85EC,$82F6,	 $50; 32
		dc.w	 5,$85F0,$82F8,	 $60; 36
		dc.w	 5,$85F4,$82FA,	 $70; 40
word_14A1E:	dc.w $D			
		dc.w	 5,$85DE,$82EF,$FFA4; 0
		dc.w	 5,$85E2,$82F1,$FFB4; 4
		dc.w	 5,$8580,$82C0,$FFC4; 8
		dc.w	 9,$85E6,$82F3,$FFD1; 12
		dc.w	 1,$85EC,$82F6,$FFE9; 16
		dc.w	 5,$85DE,$82EF,$FFF1; 20
		dc.w	 5,$85EE,$82F7,	   0; 24
		dc.w	 5,$85F2,$82F9,	 $10; 28
		dc.w	 5,$85F6,$82FB,	 $31; 32
		dc.w	 5,$85F2,$82F9,	 $41; 36
		dc.w	 5,$85EE,$82F7,	 $50; 40
		dc.w	 5,$8584,$82C2,	 $60; 44
		dc.w	 5,$85FA,$82FD,	 $70; 48
word_14A88:	dc.w $B			
		dc.w	 5,$85DE,$82EF,$FFD2; 0
		dc.w	 5,$85E2,$82F1,$FFE2; 4
		dc.w	 5,$85E6,$82F3,$FFF2; 8
		dc.w	 5,$85DE,$82EF,	   0; 12
		dc.w	 5,$85EA,$82F5,	 $10; 16
		dc.w	 1,$85EE,$82F7,	 $20; 20
		dc.w	 5,$85F0,$82F8,	 $28; 24
		dc.w	 5,$85F4,$82FA,	 $48; 28
		dc.w	 5,$85E6,$82F3,	 $58; 32
		dc.w	 1,$85EE,$82F7,	 $68; 36
		dc.w	 5,$8584,$82C2,	 $70; 40
word_14AE2:	dc.w 8			
		dc.w	 5,$85DE,$82EF,$FFF0; 0
		dc.w	 5,$85E2,$82F1,	   0; 4
		dc.w	 5,$85E6,$82F3,	 $10; 8
		dc.w	 5,$85EA,$82F5,	 $30; 12
		dc.w	 5,$85EE,$82F7,	 $40; 16
		dc.w	 5,$85F2,$82F9,	 $50; 20
		dc.w	 5,$85DE,$82EF,	 $60; 24
		dc.w	 5,$8580,$82C0,	 $70; 28
word_14B24:	dc.w $C			
		dc.w	 9,$85DE,$82EF,$FFB1; 0
		dc.w	 1,$85E4,$82F2,$FFC8; 4
		dc.w	 5,$8584,$82C2,$FFD0; 8
		dc.w	 5,$85E6,$82F3,$FFE0; 12
		dc.w	 5,$85EA,$82F5,	   1; 16
		dc.w	 5,$8588,$82C4,	 $10; 20
		dc.w	 5,$85EE,$82F7,	 $20; 24
		dc.w	 5,$85F2,$82F9,	 $30; 28
		dc.w	 5,$85EE,$82F7,	 $40; 32
		dc.w	 5,$8580,$82C0,	 $50; 36
		dc.w	 5,$85F6,$82FB,	 $5F; 40
		dc.w	 5,$85F6,$82FB,	 $6F; 44
word_14B86:	dc.w 8			
		dc.w	 5,$85DE,$82EF,$FFF2; 0
		dc.w	 5,$8580,$82C0,	   2; 4
		dc.w	 5,$85E2,$82F1,	 $10; 8
		dc.w	 5,$85E6,$82F3,	 $20; 12
		dc.w	 5,$85EA,$82F5,	 $30; 16
		dc.w	 5,$8580,$82C0,	 $51; 20
		dc.w	 5,$85EE,$82F7,	 $60; 24
		dc.w	 5,$85EE,$82F7,	 $70; 28
word_14BC8:	dc.w 4			
					
		dc.w	 5,$858C,$82C6,	   1; 0
		dc.w	 5,$8588,$82C4,	 $10; 4
		dc.w	 5,$8584,$82C2,	 $20; 8
		dc.w	 5,$8580,$82C0,	 $30; 12
word_14BEA:	dc.w 1			
					
		dc.w	 7,$A590,$A2C8,	   0; 0
word_14BF4:	dc.w 1			
					
		dc.w	$B,$A598,$A2CC,	   0; 0
word_14BFE:	dc.w 1			
					
		dc.w	$B,$A5A4,$A2D2,	   0; 0
word_14C08:	dc.w 5			
		dc.w	$D,$85B0,$82D8,$FFB8; 0
		dc.w	$D,$85B8,$82DC,$FFD8; 4
		dc.w	$D,$85C0,$82E0,$FFF8; 8
		dc.w	$D,$85C8,$82E4,	 $18; 12
		dc.w	 5,$85D0,$82E8,	 $38; 16
word_14C32:	dc.w 7			
		dc.w $9003,$85D4,$82EA,	   0; 0
		dc.w $B003,$85D4,$82EA,	   0; 4
		dc.w $D003,$85D4,$82EA,	   0; 8
		dc.w $F003,$85D4,$82EA,	   0; 12
		dc.w $1003,$85D4,$82EA,	   0; 16
		dc.w $3003,$85D4,$82EA,	   0; 20
		dc.w $5003,$85D4,$82EA,	   0; 24
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_14C6C:	dc.w word_14C74-Map_14C6C; 0	
					
		dc.w word_14C86-Map_14C6C; 1
		dc.w word_14C98-Map_14C6C; 2
		dc.w word_14CAA-Map_14C6C; 3
word_14C74:	dc.w 2			
		dc.w $F80D,    0,    0,$FFB8; 0
		dc.w $F80D,    8,    4,$FFD8; 4
word_14C86:	dc.w 2			
		dc.w $F80D,  $14,   $A,	   8; 0
		dc.w $F80D,   $C,    6,	 $28; 4
word_14C98:	dc.w 2			
		dc.w $F809,  $1C,   $E,$FFC4; 0
		dc.w $F80D,    8,    4,$FFDC; 4
word_14CAA:	dc.w 2			
		dc.w $F80D,  $14,   $A,	  $C; 0
		dc.w $F80D,   $C,    6,	 $2C; 4
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_14CBC:	dc.w word_14CDA-Map_14CBC; 0	
					
		dc.w word_14D1C-Map_14CBC
		dc.w word_14D5E-Map_14CBC
		dc.w word_14DA0-Map_14CBC
		dc.w word_14DDA-Map_14CBC
		dc.w word_14BC8-Map_14CBC
		dc.w word_14BEA-Map_14CBC
		dc.w word_14BF4-Map_14CBC
		dc.w word_14BFE-Map_14CBC
		dc.w word_14DF4-Map_14CBC
		dc.w word_14E1E-Map_14CBC
		dc.w word_14E50-Map_14CBC
		dc.w word_14E82-Map_14CBC
		dc.w word_14E8C-Map_14CBC
		dc.w word_14E96-Map_14CBC
word_14CDA:	dc.w 8			
		dc.w	 5,$85D0,$82E8,$FFC0; 0
		dc.w	 5,$8588,$82C4,$FFD0; 4
		dc.w	 5,$8584,$82C2,$FFE0; 8
		dc.w	 1,$85C0,$82E0,$FFF0; 12
		dc.w	 5,$85B4,$82DA,$FFF8; 16
		dc.w	 5,$85B8,$82DC,	 $10; 20
		dc.w	 5,$8588,$82C4,	 $20; 24
		dc.w	 5,$85D4,$82EA,	 $2F; 28
word_14D1C:	dc.w 8			
		dc.w	 9,$85C6,$82E3,$FFBC; 0
		dc.w	 1,$85C0,$82E0,$FFD4; 4
		dc.w	 5,$85C2,$82E1,$FFDC; 8
		dc.w	 5,$8580,$82C0,$FFEC; 12
		dc.w	 5,$85D0,$82E8,$FFFC; 16
		dc.w	 5,$85B8,$82DC,	 $14; 20
		dc.w	 5,$8588,$82C4,	 $24; 24
		dc.w	 5,$85D4,$82EA,	 $33; 28
word_14D5E:	dc.w 8			
		dc.w	 5,$85D4,$82EA,$FFC3; 0
		dc.w	 5,$85B0,$82D8,$FFD0; 4
		dc.w	 1,$85C0,$82E0,$FFE0; 8
		dc.w	 5,$85C2,$82E1,$FFE8; 12
		dc.w	 5,$85D0,$82E8,$FFF8; 16
		dc.w	 5,$85B8,$82DC,	 $10; 20
		dc.w	 5,$8588,$82C4,	 $20; 24
		dc.w	 5,$85D4,$82EA,	 $2F; 28
word_14DA0:	dc.w 7			
		dc.w	 5,$85D4,$82EA,$FFC8; 0
		dc.w	 5,$85BC,$82DE,$FFD8; 4
		dc.w	 5,$85CC,$82E6,$FFE8; 8
		dc.w	 5,$8588,$82C4,$FFF8; 12
		dc.w	 5,$85D8,$82EC,	   8; 16
		dc.w	 5,$85B8,$82DC,	 $18; 20
		dc.w	 5,$85BC,$82DE,	 $28; 24
word_14DDA:	dc.w 3			
		dc.w	 5,$85B0,$82D8,	   0; 0
		dc.w	 5,$85B4,$82DA,	 $10; 4
		dc.w	 5,$85D4,$82EA,	 $1F; 8
word_14DF4:	dc.w 5			
		dc.w	 9,$A5E6,$A2F3,$FFB8; 0
		dc.w	 5,$A5EC,$A2F6,$FFD0; 4
		dc.w	 5,$85F0,$82F8,$FFD4; 8
		dc.w	$D,$8520,$8290,	 $38; 12
		dc.w	 1,$86F0,$8378,	 $58; 16
word_14E1E:	dc.w 6			
		dc.w	$D,$A6DA,$A36D,$FFA4; 0
		dc.w	$D,$A5DE,$A2EF,$FFCC; 4
		dc.w	 1,$A6CA,$A365,$FFEC; 8
		dc.w	 5,$85F0,$82F8,$FFE8; 12
		dc.w	$D,$8528,$8294,	 $38; 16
		dc.w	 1,$86F0,$8378,	 $58; 20
word_14E50:	dc.w 6			
		dc.w	$D,$A6D2,$A369,$FFA4; 0
		dc.w	$D,$A5DE,$A2EF,$FFCC; 4
		dc.w	 1,$A6CA,$A365,$FFEC; 8
		dc.w	 5,$85F0,$82F8,$FFE8; 12
		dc.w	$D,$8530,$8298,	 $38; 16
		dc.w	 1,$86F0,$8378,	 $58; 20
word_14E82:	dc.w 1			
		dc.w	 6,$85F4,$82FA,	   0; 0
word_14E8C:	dc.w 1			
		dc.w	 6,$85FA,$82FD,	   0; 0
word_14E96:	dc.w 7			
		dc.w	$D,$A540,$A2A0,$FF98; 0
		dc.w	 9,$A548,$A2A4,$FFB8; 4
		dc.w	$D,$A5DE,$A2EF,$FFD8; 8
		dc.w	 1,$A6CA,$A365,$FFF8; 12
		dc.w	 5,$85F0,$82F8,$FFF4; 16
		dc.w	$D,$8538,$829C,	 $38; 20
		dc.w	 1,$86F0,$8378,	 $58; 24
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
off_14ED0:	dc.w word_14F0A-off_14ED0; 0 
					
		dc.w word_14F6C-off_14ED0; 1
		dc.w word_14FB6-off_14ED0; 2
		dc.w word_15000-off_14ED0; 3
		dc.w word_1504A-off_14ED0; 4
		dc.w word_150AC-off_14ED0; 5
		dc.w word_150B6-off_14ED0; 6
		dc.w word_150C0-off_14ED0; 7
		dc.w word_150CA-off_14ED0; 8
		dc.w word_150D4-off_14ED0; 9
		dc.w word_150DE-off_14ED0; 10
		dc.w word_150E8-off_14ED0; 11
		dc.w word_150F2-off_14ED0; 12
		dc.w word_1511C-off_14ED0; 13
		dc.w word_15180-off_14ED0; 14
		dc.w word_151B2-off_14ED0; 15
		dc.w word_15248-off_14ED0; 16
		dc.w word_1527A-off_14ED0; 17
		dc.w word_1514E-off_14ED0; 18
		dc.w word_151E4-off_14ED0; 19
		dc.w word_15216-off_14ED0; 20
		dc.w word_152B4-off_14ED0; 21
		dc.w word_152C6-off_14ED0; 22
		dc.w word_15338-off_14ED0; 23
		dc.w word_153AA-off_14ED0; 24
		dc.w word_1541C-off_14ED0; 25
		dc.w word_15486-off_14ED0; 26
		dc.w word_154E0-off_14ED0; 27
		dc.w word_15532-off_14ED0; 28
word_14F0A:	dc.w $C			
		dc.w	 5,$802A,$8015,$FFA0; 0
		dc.w	 5,$8022,$8011,$FFB0; 4
		dc.w	 5,$8580,$82C0,$FFC0; 8
		dc.w	 5,$8006,$8003,$FFD0; 12
		dc.w	 1,$8016,$800B,$FFE0; 16
		dc.w	 5,$8002,$8001,$FFE8; 20
		dc.w	 5,$8018,$800C,$FFF8; 24
		dc.w	 5,$802A,$8015,	 $10; 28
		dc.w	 5,$802E,$8017,	 $20; 32
		dc.w	 5,$8002,$8001,	 $2C; 36
		dc.w	 5,$800E,$8007,	 $3C; 40
		dc.w	 5,$8580,$82C0,	 $4C; 44
word_14F6C:	dc.w 9			
		dc.w	 5,$802A,$8015,$FFB8; 0
		dc.w	 5,$8588,$82C4,$FFC8; 4
		dc.w	 5,$8584,$82C2,$FFD8; 8
		dc.w	 1,$8016,$800B,$FFE8; 12
		dc.w	 5,$8006,$8003,$FFF0; 16
		dc.w	 5,$800E,$8007,	   8; 20
		dc.w	 5,$8588,$82C4,	 $18; 24
		dc.w	 5,$802E,$8017,	 $28; 28
		dc.w	 5,$8002,$8001,	 $40; 32
word_14FB6:	dc.w 9			
		dc.w	 9,$801C,$800E,$FFB4; 0
		dc.w	 1,$8016,$800B,$FFCC; 4
		dc.w	 5,$8018,$800C,$FFD4; 8
		dc.w	 5,$8580,$82C0,$FFE4; 12
		dc.w	 5,$802A,$8015,$FFF4; 16
		dc.w	 5,$800E,$8007,	  $C; 20
		dc.w	 5,$8588,$82C4,	 $1C; 24
		dc.w	 5,$802E,$8017,	 $2C; 28
		dc.w	 5,$8002,$8001,	 $44; 32
word_15000:	dc.w 9			
		dc.w	 5,$802E,$8017,$FFBB; 0
		dc.w	 5,$8002,$8001,$FFC8; 4
		dc.w	 1,$8016,$800B,$FFD8; 8
		dc.w	 5,$8018,$800C,$FFE0; 12
		dc.w	 5,$802A,$8015,$FFF0; 16
		dc.w	 5,$800E,$8007,	   8; 20
		dc.w	 5,$8588,$82C4,	 $18; 24
		dc.w	 5,$802E,$8017,	 $28; 28
		dc.w	 5,$8002,$8001,	 $40; 32
word_1504A:	dc.w $C			
word_1504C:	dc.w	 5,$8006,$8003,$FF98; 0
		dc.w	 5,$8012,$8009,$FFA8; 4
		dc.w	 5,$8002,$8001,$FFB8; 8
		dc.w	 5,$8588,$82C4,$FFC8; 12
		dc.w	 5,$802A,$8015,$FFD8; 16
		dc.w	 5,$8580,$82C0,$FFF3; 20
		dc.w	 9,$801C,$800E,	   0; 24
		dc.w	 5,$8580,$82C0,	 $18; 28
		dc.w	 5,$8026,$8013,	 $28; 32
		dc.w	 5,$8002,$8001,	 $38; 36
		dc.w	 5,$8018,$800C,	 $48; 40
		dc.w	 5,$800A,$8005,	 $58; 44
word_150AC:	dc.w 1			
		dc.w	 5,$C5A4,$C2D2,	   0; 0
word_150B6:	dc.w 1			
		dc.w	 5,$E5A4,$E2D2,	   0; 0
word_150C0:	dc.w 1			
		dc.w	 5,$C5AC,$C2D6,	   0; 0
word_150CA:	dc.w 1			
word_150CC:	dc.w	 5,$E5AC,$E2D6,	   0; 0
word_150D4:	dc.w 1			
word_150D6:	dc.w	 5,$E5A8,$E2D4,	   0; 0
word_150DE:	dc.w 1			
		dc.w	 5,$C5A8,$C2D4,	   0; 0
word_150E8:	dc.w 1			
		dc.w	 5,$A5A8,$A2D4,	   0; 0
word_150F2:	dc.w 5			
		dc.w	$D,$A6CA,$A365,$FFA0; 0
		dc.w	 1,$A6E0,$A370,$FFC0; 4
		dc.w	 5,$85A0,$82D0,$FFBC; 8
		dc.w	 9,$86E4,$8372,	 $28; 12
		dc.w	$D,$86EA,$8375,	 $40; 16
word_1511C:	dc.w 6			
		dc.w	 1,$A6CA,$A365,$FFA0; 0
		dc.w	$D,$A5B0,$A2D8,$FFA8; 4
		dc.w	$D,$A6D2,$A369,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	$D,$8528,$8294,	 $40; 20
word_1514E:	dc.w 6			
		dc.w	 1,$A6CA,$A365,$FFA0; 0
		dc.w	$D,$A5B0,$A2D8,$FFA8; 4
		dc.w	$D,$A6D2,$A369,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	 1,$86F0,$8378,	 $58; 20
word_15180:	dc.w 6			
		dc.w	$D,$A5B8,$A2DC,$FFA0; 0
		dc.w	 1,$A6CA,$A365,$FFC0; 4
		dc.w	$D,$A6D2,$A369,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	$D,$8530,$8298,	 $40; 20
word_151B2:	dc.w 6			
		dc.w	 9,$A5CE,$A2E7,$FFA0; 0
		dc.w	 5,$A5D4,$A2EA,$FFB8; 4
		dc.w	$D,$A6D2,$A369,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	$D,$8530,$8298,	 $40; 20
word_151E4:	dc.w 6			
		dc.w	$D,$A5B8,$A2DC,$FFA0; 0
		dc.w	 1,$A6CA,$A365,$FFC0; 4
		dc.w	$D,$A6D2,$A369,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	 1,$86F0,$8378,	 $58; 20
word_15216:	dc.w 6			
		dc.w	 9,$A5CE,$A2E7,$FFA0; 0
		dc.w	 5,$A5D4,$A2EA,$FFB8; 4
		dc.w	$D,$A6D2,$A369,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	 1,$86F0,$8378,	 $58; 20
word_15248:	dc.w 6			
		dc.w	$D,$A598,$A2CC,$FFA0; 0
		dc.w	$D,$A590,$A2C8,$FFD0; 4
		dc.w	 1,$A6CA,$A365,$FFF0; 8
		dc.w	 5,$85A0,$82D0,$FFEC; 12
		dc.w	$D,$8520,$8290,	 $38; 16
		dc.w	 1,$86F0,$8378,	 $58; 20
word_1527A:	dc.w 7			
		dc.w	$D,$A5C0,$A2E0,$FF90; 0
		dc.w	 9,$A5C8,$A2E4,$FFB0; 4
		dc.w	$D,$A590,$A2C8,$FFD0; 8
		dc.w	 1,$A6CA,$A365,$FFF0; 12
		dc.w	 5,$85A0,$82D0,$FFEC; 16
		dc.w	$D,$8528,$8294,	 $38; 20
		dc.w	 1,$86F0,$8378,	 $58; 24
word_152B4:	dc.w 2			
		dc.w	$D,$8528,$8294,	 $38; 0
		dc.w	 1,$86F0,$8378,	 $58; 4
word_152C6:	dc.w $E			
		dc.w	 5,$802A,$8015,$FF88; 0
		dc.w	 5,$8588,$82C4,$FF98; 4
		dc.w	 5,$8584,$82C2,$FFA8; 8
		dc.w	 1,$8016,$800B,$FFB8; 12
		dc.w	 5,$8006,$8003,$FFC0; 16
		dc.w	 5,$8012,$8009,$FFD8; 20
		dc.w	 5,$8002,$8001,$FFE8; 24
		dc.w	 5,$802A,$8015,$FFF8; 28
		dc.w	 5,$8002,$8001,	 $10; 32
		dc.w	 5,$8018,$800C,	 $20; 36
		dc.w	 5,$8018,$800C,	 $30; 40
		dc.w	 5,$802E,$8017,	 $48; 44
		dc.w	 5,$8012,$8009,	 $58; 48
		dc.w	 5,$8580,$82C0,	 $68; 52
word_15338:	dc.w $E			
word_1533A:	dc.w	 9,$801C,$800E,$FF84; 0
		dc.w	 1,$8016,$800B,$FF9C; 4
		dc.w	 5,$8018,$800C,$FFA4; 8
		dc.w	 5,$8580,$82C0,$FFB4; 12
		dc.w	 5,$802A,$8015,$FFC4; 16
		dc.w	 5,$8012,$8009,$FFDC; 20
		dc.w	 5,$8002,$8001,$FFEC; 24
		dc.w	 5,$802A,$8015,$FFFC; 28
		dc.w	 5,$8002,$8001,	 $14; 32
		dc.w	 5,$8018,$800C,	 $24; 36
		dc.w	 5,$8018,$800C,	 $34; 40
		dc.w	 5,$802E,$8017,	 $4C; 44
		dc.w	 5,$8012,$8009,	 $5C; 48
		dc.w	 5,$8580,$82C0,	 $6C; 52
word_153AA:	dc.w $E			
		dc.w	 5,$802E,$8017,$FF8B; 0
		dc.w	 5,$8002,$8001,$FF98; 4
		dc.w	 1,$8016,$800B,$FFA8; 8
		dc.w	 5,$8018,$800C,$FFB0; 12
		dc.w	 5,$802A,$8015,$FFC0; 16
		dc.w	 5,$8012,$8009,$FFD8; 20
		dc.w	 5,$8002,$8001,$FFE8; 24
		dc.w	 5,$802A,$8015,$FFF8; 28
		dc.w	 5,$8002,$8001,	 $10; 32
		dc.w	 5,$8018,$800C,	 $20; 36
		dc.w	 5,$8018,$800C,	 $30; 40
		dc.w	 5,$802E,$8017,	 $48; 44
		dc.w	 5,$8012,$8009,	 $58; 48
		dc.w	 5,$8580,$82C0,	 $68; 52
word_1541C:	dc.w $D			
		dc.w	 5,$8006,$8003,$FF90; 0
		dc.w	 5,$8012,$8009,$FFA0; 4
		dc.w	 5,$8002,$8001,$FFB0; 8
		dc.w	 5,$8588,$82C4,$FFC0; 12
		dc.w	 5,$802A,$8015,$FFD0; 16
		dc.w	 5,$8580,$82C0,$FFEB; 20
		dc.w	 9,$801C,$800E,$FFF8; 24
		dc.w	 5,$8580,$82C0,	 $10; 28
		dc.w	 5,$8026,$8013,	 $20; 32
		dc.w	 5,$8002,$8001,	 $30; 36
		dc.w	 5,$8018,$800C,	 $40; 40
		dc.w	 5,$800A,$8005,	 $50; 44
		dc.w	 5,$802A,$8015,	 $60; 48
word_15486:	dc.w $B			
		dc.w	 5,$8584,$82C2,$FFA0; 0
		dc.w	 5,$8588,$82C4,$FFB0; 4
		dc.w	 9,$8036,$801B,$FFC0; 8
		dc.w	 5,$802A,$8015,$FFE0; 12
		dc.w	 5,$8588,$82C4,$FFF0; 16
		dc.w	 5,$8584,$82C2,	   0; 20
		dc.w	 1,$8016,$800B,	 $10; 24
		dc.w	 5,$8006,$8003,	 $18; 28
		dc.w	 5,$8006,$8003,	 $30; 32
		dc.w	 5,$8002,$8001,	 $40; 36
		dc.w	 5,$8584,$82C2,	 $50; 40
word_154E0:	dc.w $A			
		dc.w	 5,$8006,$8003,$FFB0; 0
		dc.w	 5,$8012,$8009,$FFC0; 4
		dc.w	 5,$8002,$8001,$FFD0; 8
		dc.w	 5,$8584,$82C2,$FFE0; 12
		dc.w	 5,$800E,$8007,$FFF0; 16
		dc.w	 5,$8580,$82C0,	   0; 20
		dc.w	 1,$8016,$800B,	 $18; 24
		dc.w	 5,$8584,$82C2,	 $20; 28
		dc.w	 5,$802E,$8017,	 $30; 32
		dc.w	 5,$8588,$82C4,	 $40; 36
word_15532:	dc.w $A			
		dc.w	 5,$802A,$8015,$FFB0; 0
		dc.w	 5,$8032,$8019,$FFC0; 4
		dc.w	 5,$8022,$8011,$FFD0; 8
		dc.w	 5,$8580,$82C0,$FFE0; 12
		dc.w	 5,$8026,$8013,$FFF0; 16
		dc.w	 5,$802A,$8015,	   8; 20
		dc.w	 5,$8588,$82C4,	 $18; 24
		dc.w	 5,$8584,$82C2,	 $28; 28
		dc.w	 1,$8016,$800B,	 $38; 32
		dc.w	 5,$8006,$8003,	 $40; 36
; ===========================================================================

loc_15584:				
		lea	(vdp_data_port).l,a6
		tst.w	($FFFFB0BE).w
		bne.w	loc_15670
		moveq	#$3F,d5	; '?'

loc_15594:
		move.l	#-$7A257A26,d6
		tst.w	(f_two_player).w
		beq.s	loc_155A8
		moveq	#$1F,d5
		move.l	#-$7D127D13,d6

loc_155A8:				
		lea	($FFFFB176).w,a0
		moveq	#1,d7

loc_155AE:				
		move.w	(a0)+,d0
		beq.s	loc_155C6
		clr.w	-2(a0)
		jsr	(sub_15792)(pc)
		move.l	d0,4(a6)
		move.w	d5,d4

loc_155C0:				
		move.l	d6,(a6)
		dbf	d4,loc_155C0

loc_155C6:				
		dbf	d7,loc_155AE
		moveq	#$26,d1	; '&'
		sub.w	($FFFFB1BA).w,d1
		lsr.w	#1,d1
		subq.w	#1,d1
		moveq	#7,d5
		move.l	#-$5A235A24,d6

loc_155DC:
		tst.w	(f_two_player).w
		beq.s	loc_155EA
		moveq	#3,d5
		move.l	#-$5D115D12,d6

loc_155EA:				
		lea	($FFFFB1B6).w,a0
		moveq	#1,d7

loc_155F0:				
		move.w	(a0)+,d0
		beq.s	loc_15614
		clr.w	-2(a0)
		jsr	(sub_15792)(pc)
		move.w	d5,d4

loc_155FE:				
		move.l	d0,4(a6)
		move.w	d1,d3

loc_15604:				
		move.l	d6,(a6)
		dbf	d3,loc_15604
		addi.l	#$800000,d0
		dbf	d4,loc_155FE

loc_15614:				
		dbf	d7,loc_155F0
		move.w	($FFFFB1FA).w,d1
		subq.w	#1,d1
		moveq	#$D,d5
		move.l	#-$7A277A28,d6
		tst.w	(f_two_player).w
		beq.s	loc_15634
		moveq	#6,d5
		move.l	#-$7D137D14,d6

loc_15634:				
		lea	($FFFFB1F6).w,a0
		moveq	#1,d7
		move.w	#-$7080,4(a6)

loc_15640:				
		move.w	(a0)+,d0
		beq.s	loc_15664
		clr.w	-2(a0)
		jsr	(sub_15792)(pc)
		move.w	d1,d4

loc_1564E:				
		move.l	d0,4(a6)
		move.w	d5,d3

loc_15654:				
		move.l	d6,(a6)
		dbf	d3,loc_15654
		addi.l	#$20000,d0
		dbf	d4,loc_1564E

loc_15664:				
		dbf	d7,loc_15640
		move.w	#-$70FE,4(a6)
		rts	
; ===========================================================================

loc_15670:				
		moveq	#9,d3
		moveq	#3,d4
		move.l	#-$7A257A26,d5
		move.l	#-$5A235A24,d6
		tst.w	(f_two_player).w
		beq.s	loc_15696
		moveq	#4,d3
		moveq	#1,d4
		move.l	#-$7D127D13,d5
		move.l	#-$5D115D12,d6

loc_15696:				
		lea	($FFFFB1F6).w,a0
		moveq	#1,d7
		move.w	#-$7080,4(a6)

loc_156A2:				
		move.w	(a0)+,d0
		beq.s	loc_156CE
		clr.w	-2(a0)
		jsr	(sub_15792)(pc)
		moveq	#3,d2

loc_156B0:				
		move.l	d0,4(a6)
		move.w	d3,d1

loc_156B6:				
		move.l	d5,(a6)
		dbf	d1,loc_156B6
		move.w	d4,d1

loc_156BE:				
		move.l	d6,(a6)
		dbf	d1,loc_156BE
		addi.l	#$20000,d0
		dbf	d2,loc_156B0

loc_156CE:				
		dbf	d7,loc_156A2
		move.w	#-$70FE,4(a6)
		moveq	#7,d5
		move.l	#-$7A257A26,d6
		tst.w	(f_two_player).w
		beq.s	loc_156EE
		moveq	#3,d5
		move.l	#-$7D127D13,d6

loc_156EE:				
		lea	($FFFFB1B6).w,a0
		moveq	#1,d7

loc_156F4:				
		move.w	(a0)+,d0
		beq.s	loc_15714
		clr.w	-2(a0)
		jsr	(sub_15792)(pc)
		move.w	d5,d4

loc_15702:				
		move.l	d0,4(a6)
		move.l	d6,(a6)
		move.l	d6,(a6)
		addi.l	#$800000,d0
		dbf	d4,loc_15702

loc_15714:				
		dbf	d7,loc_156F4
		move.w	($FFFFB176).w,d4
		beq.s	loc_1578C
		lea	4(a6),a5
		tst.w	(f_two_player).w
		beq.s	loc_15758
		lea	(v_camera_x_pos_p2).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$6000,d2
		moveq	#1,d6

loc_15736:				
		movem.l	d4-d6,-(sp)
		moveq	#-$10,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P2
		move.w	d1,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_15736

loc_15758:				
		lea	(v_camera_x_pos).w,a3
		lea	(v_level_layout).w,a4
		move.w	#$4000,d2
		move.w	($FFFFB176).w,d4
		moveq	#1,d6

loc_1576A:				
		movem.l	d4-d6,-(sp)
		moveq	#-$10,d5
		move.w	d4,d1
		bsr.w	Calc_VRAM_Pos_P1
		move.w	d1,d4
		moveq	#-$10,d5
		moveq	#$1F,d6
		bsr.w	sub_DF8A
		movem.l	(sp)+,d4-d6
		addi.w	#$10,d4
		dbf	d6,loc_1576A

loc_1578C:				
		clr.w	($FFFFB176).w
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_15792:				
					
		andi.l	#$FFFF,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		rts	
; End of function sub_15792

; ===========================================================================

loc_157A4:				
		movem.l	d0/a0,-(sp)
		bsr.s	sub_157B0
		movem.l	(sp)+,d0/a0
		bra.s	loc_157EC

; =============== S U B	R O U T	I N E =======================================


sub_157B0:				
					
		move.l	#$70000002,(vdp_control_port).l
		lea	(Nem_TitleCard).l,a0
		bsr.w	loc_158E8
		lea	(v_level_layout).w,a4
		lea	(Nem_TitleCardFont).l,a0
		bra.w	loc_158EE
; ===========================================================================

loc_157D2:				
		bsr.s	sub_157B0
		moveq	#0,d0
		move.b	(v_zone).w,d0
		move.b	byte_15820(pc,d0.w),d0
		lea	(word_15832)(pc),a0
		lea	(a0,d0.w),a0
		move.l	#$7BC00002,d0

loc_157EC:				
	disable_ints
		lea	(v_level_layout).w,a1
		lea	(vdp_data_port).l,a6
		move.l	d0,4(a6)

loc_157FE:				
		moveq	#0,d0
		move.b	(a0)+,d0
		bmi.s	loc_1581A
		lsl.w	#5,d0
		lea	(a1,d0.w),a2
		moveq	#0,d1
		move.b	(a0)+,d1
		lsl.w	#3,d1
		subq.w	#1,d1

loc_15812:				
		move.l	(a2)+,(a6)
		dbf	d1,loc_15812
		bra.s	loc_157FE
; ===========================================================================

loc_1581A:				
		enable_ints
		rts	
; ===========================================================================
byte_15820:	dc.b   0,  0,  0,  0,$10,$10,$98,$20,$2C,  0,$3C,$46,$58,$68,$A8,$7A; 0
		dc.b $8A,  0		; 16
word_15832:	dc.w $2A06,$3804,    4,$2604, $C04,$1804,$1C02,$FFFF; 0
					
		dc.w $2A06,$4004,$3804,$3004,$2604,$1C02,$3C04,$FFFF; 8
		dc.w $1804,$1C02,$2604,$4004,$3004,$FFFF,$1804,$1C02; 16
		dc.w  $C04,$3004,    4,$2604, $804,$FFFF,$1C02,$2604; 24
		dc.w  $804,    4,$FFFF,$2A06,$5604,$3C04,$4004,$1C02; 32
		dc.w  $804,    4,$4804,$FFFF, $804,    4,$3C04,$1C02; 40
		dc.w $1404,$1804,$4004,$FFFF, $804,$1804,$2A06,$1C02; 48
		dc.w	 4,$2604,$3004,$4004,$FFFF,    4,$3404,$4404; 56
		dc.w $4004,$1C02, $804,$3804,$FFFF,$3C04,$2204,$5604; 64
		dc.w  $804,$1804,    4,$FFFF,$4C06,$1C02,$1404,$1004; 72
		dc.w $3804,$4004,$3C04,$FFFF, $C04,    4,$4004,$1804; 80
		dc.w $1404,$FFFF	; 88
; ===========================================================================
		nop	

loc_158E8:				
		jmp	(NemDec).l
; ===========================================================================

loc_158EE:				
		jmp	(NemDecToRAM).l
; End of function sub_157B0


; =============== S U B	R O U T	I N E =======================================


sub_158F4:				
					
		jmp	(AddPLC).l
; End of function sub_158F4


; =============== S U B	R O U T	I N E =======================================


sub_158FA:				
		jmp	sub_8476
; End of function sub_158FA

; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Vertical spikes
; ----------------------------------------------------------------------------

Sprite_15900:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1590E(pc,d0.w),d1
		jmp	off_1590E(pc,d1.w)
; ===========================================================================
off_1590E:	dc.w loc_15926-off_1590E; 0 
					
		dc.w loc_15996-off_1590E; 1
		dc.w loc_159E6-off_1590E; 2
		dc.w loc_15A42-off_1590E; 3
byte_15916:	dc.b $10		; 0 
		dc.b $10		; 1
		dc.b $20		; 2
		dc.b $10		; 3
		dc.b $30		; 4
		dc.b $10		; 5
		dc.b $40		; 6
		dc.b $10		; 7
		dc.b $10		; 8
		dc.b $10		; 9
		dc.b $10		; 10
		dc.b $20		; 11
		dc.b $10		; 12
		dc.b $30		; 13
		dc.b $10		; 14
		dc.b $40		; 15
; ===========================================================================

loc_15926:				
		addq.b	#2,$24(a0)
		move.l	#Map_15B68,4(a0)
		move.w	#$2434,2(a0)
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		andi.b	#$F,$28(a0)
		andi.w	#$F0,d0	
		lea	(byte_15916)(pc),a1
		lsr.w	#3,d0
		adda.w	d0,a1
		move.b	(a1)+,$19(a0)
		move.b	(a1)+,$16(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		cmpi.b	#4,d0
		bcs.s	loc_15978
		addq.b	#2,$24(a0)
		move.w	#$242C,2(a0)

loc_15978:				
		btst	#1,$22(a0)
		beq.s	loc_15986
		move.b	#6,$24(a0)

loc_15986:				
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		bra.w	Adjust2PArtPointer
; ===========================================================================

loc_15996:				
		bsr.w	sub_15AC6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.b	$22(a0),d6
		andi.b	#$18,d6
		beq.s	loc_159DE
		move.b	d6,d0
		andi.b	#8,d0
		beq.s	loc_159D0
		lea	($FFFFB000).w,a1
		bsr.w	sub_15A90

loc_159D0:				
		andi.b	#$10,d6
		beq.s	loc_159DE
		lea	($FFFFB040).w,a1
		bsr.w	sub_15A90

loc_159DE:				
					
		move.w	$30(a0),d0
		bra.w	MarkObjGone2
; ===========================================================================

loc_159E6:				
		move.w	8(a0),-(sp)
		bsr.w	sub_15AC6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	SolidObject
		swap	d6
		andi.w	#3,d6
		beq.s	loc_15A3A
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_15A26
		lea	($FFFFB000).w,a1
		bsr.w	sub_15A90
		bclr	#5,$22(a0)

loc_15A26:				
		andi.b	#2,d6
		beq.s	loc_15A3A
		lea	($FFFFB040).w,a1
		bsr.w	sub_15A90
		bclr	#6,$22(a0)

loc_15A3A:				
					
		move.w	$30(a0),d0
		bra.w	MarkObjGone2
; ===========================================================================

loc_15A42:				
		bsr.w	sub_15AC6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		swap	d6
		andi.w	#$C,d6
		beq.s	loc_15A88
		move.b	d6,d0
		andi.b	#4,d0
		beq.s	loc_15A7A
		lea	($FFFFB000).w,a1
		bsr.w	sub_15A90

loc_15A7A:				
		andi.b	#8,d6
		beq.s	loc_15A88
		lea	($FFFFB040).w,a1
		bsr.w	sub_15A90

loc_15A88:				
					
		move.w	$30(a0),d0
		bra.w	MarkObjGone2

; =============== S U B	R O U T	I N E =======================================


sub_15A90:				
					
		btst	#1,$2B(a1)
		bne.s	locret_15AC4
		tst.w	$30(a1)
		bne.s	locret_15AC4
		cmpi.b	#4,$24(a1)
		bcc.s	locret_15AC4
		move.l	$C(a1),d3
		move.w	$12(a1),d0
		ext.l	d0
		asl.l	#8,d0
		sub.l	d0,d3
		move.l	d3,$C(a1)
		movea.l	a0,a2
		movea.l	a1,a0
		jsr	loc_3F878
		movea.l	a2,a0

locret_15AC4:				
		rts	
; End of function sub_15A90


; =============== S U B	R O U T	I N E =======================================


sub_15AC6:				
					
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_15AD6(pc,d0.w),d1
		jmp	off_15AD6(pc,d1.w)
; End of function sub_15AC6

; ===========================================================================
off_15AD6:	dc.w locret_15ADC-off_15AD6; 0 
					
		dc.w loc_15ADE-off_15AD6; 1
		dc.w loc_15AF2-off_15AD6; 2
; ===========================================================================

locret_15ADC:				
		rts	
; ===========================================================================

loc_15ADE:				
		bsr.w	sub_15B06
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_15AF2:				
		bsr.w	sub_15B06
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_15B06:				
					
		tst.w	$38(a0)
		beq.s	loc_15B24
		subq.w	#1,$38(a0)
		bne.s	locret_15B66
		tst.b	1(a0)
		bpl.s	locret_15B66
		move.w	#$B6,d0	
		jsr	(PlaySound).l
		bra.s	locret_15B66
; ===========================================================================

loc_15B24:				
		tst.w	$36(a0)
		beq.s	loc_15B46
		subi.w	#$800,$34(a0)
		bcc.s	locret_15B66
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#$3C,$38(a0) ; '<'
		bra.s	locret_15B66
; ===========================================================================

loc_15B46:				
		addi.w	#$800,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	locret_15B66
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$3C,$38(a0) ; '<'

locret_15B66:				
					
		rts	
; End of function sub_15B06

; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_15B68:	dc.w word_15B78-Map_15B68; 0	
					
		dc.w word_15B8A-Map_15B68; 1
		dc.w word_15BAC-Map_15B68; 2
		dc.w word_15BDE-Map_15B68; 3
		dc.w word_15C20-Map_15B68; 4
		dc.w word_15C32-Map_15B68; 5
		dc.w word_15C54-Map_15B68; 6
		dc.w word_15C86-Map_15B68; 7
word_15B78:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0; 0
		dc.w $F007,    0,    0,	   0; 4
word_15B8A:	dc.w 4			
		dc.w $F007,    0,    0,$FFE0; 0
		dc.w $F007,    0,    0,$FFF0; 4
		dc.w $F007,    0,    0,	   0; 8
		dc.w $F007,    0,    0,	 $10; 12
word_15BAC:	dc.w 6			
		dc.w $F007,    0,    0,$FFD0; 0
		dc.w $F007,    0,    0,$FFE0; 4
		dc.w $F007,    0,    0,$FFF0; 8
		dc.w $F007,    0,    0,	   0; 12
		dc.w $F007,    0,    0,	 $10; 16
		dc.w $F007,    0,    0,	 $20; 20
word_15BDE:	dc.w 8			
		dc.w $F007,    0,    0,$FFC0; 0
		dc.w $F007,    0,    0,$FFD0; 4
		dc.w $F007,    0,    0,$FFE0; 8
		dc.w $F007,    0,    0,$FFF0; 12
		dc.w $F007,    0,    0,	   0; 16
		dc.w $F007,    0,    0,	 $10; 20
		dc.w $F007,    0,    0,	 $20; 24
		dc.w $F007,    0,    0,	 $30; 28
word_15C20:	dc.w 2			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	$D,    0,    0,$FFF0; 4
word_15C32:	dc.w 4			
		dc.w $E00D,    0,    0,$FFF0; 0
		dc.w $F00D,    0,    0,$FFF0; 4
		dc.w	$D,    0,    0,$FFF0; 8
		dc.w $100D,    0,    0,$FFF0; 12
word_15C54:	dc.w 6			
		dc.w $D00D,    0,    0,$FFF0; 0
		dc.w $E00D,    0,    0,$FFF0; 4
		dc.w $F00D,    0,    0,$FFF0; 8
		dc.w	$D,    0,    0,$FFF0; 12
		dc.w $100D,    0,    0,$FFF0; 16
		dc.w $200D,    0,    0,$FFF0; 20
word_15C86:	dc.w 8			
		dc.w $C00D,    0,    0,$FFF0; 0
		dc.w $D00D,    0,    0,$FFF0; 4
		dc.w $E00D,    0,    0,$FFF0; 8
		dc.w $F00D,    0,    0,$FFF0; 12
		dc.w	$D,    0,    0,$FFF0; 16
		dc.w $100D,    0,    0,$FFF0; 20
		dc.w $200D,    0,    0,$FFF0; 24
		dc.w $300D,    0,    0,$FFF0; 28
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_15CC8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_15CD6(pc,d0.w),d1
		jmp	off_15CD6(pc,d1.w)
; ===========================================================================
off_15CD6:	dc.w loc_15CDA-off_15CD6; 0 
					
		dc.w loc_15D02-off_15CD6; 1
; ===========================================================================

loc_15CDA:				
		addq.b	#2,$24(a0)
		move.l	#Map_15D2E,4(a0)
		move.w	#$66C0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$13,$19(a0)
		move.b	#4,$18(a0)

loc_15D02:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_15D2E:	dc.w word_15D30-Map_15D2E 
					
word_15D30:	dc.w 2			
		dc.w $F00B,    0,    0,$FFE8; 0
		dc.w $F00B,   $C,    6,	   0; 4
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_15D44:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_15D56(pc,d0.w),d1
		jsr	off_15D56(pc,d1.w)
		bra.w	MarkObjGone
; ===========================================================================
off_15D56:	dc.w loc_15D5C-off_15D56; 0 
					
		dc.w loc_15D8A-off_15D56; 1
		dc.w loc_15E02-off_15D56; 2
; ===========================================================================

loc_15D5C:				
		addq.b	#2,$24(a0)
		move.l	#Map_15ECC,4(a0)
		move.w	#$4590,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)

loc_15D8A:				
		move.w	($FFFFB010).w,$30(a0)
		move.w	#$1B,d1
		move.w	#$20,d2	; ' '
		move.w	#$20,d3	; ' '
		move.w	8(a0),d4
		bsr.w	SolidObject
		btst	#5,$22(a0)
		bne.s	loc_15DAE

locret_15DAC:				
					
		rts	
; ===========================================================================

loc_15DAE:				
		lea	($FFFFB000).w,a1
		cmpi.b	#2,$1C(a1)
		bne.s	locret_15DAC
		move.w	$30(a0),d0
		bpl.s	loc_15DC2
		neg.w	d0

loc_15DC2:				
		cmpi.w	#$480,d0
		bcs.s	locret_15DAC
		move.w	$30(a0),$10(a1)
		addq.w	#4,8(a1)
		lea	(word_15E8C).l,a4
		move.w	8(a0),d0
		cmp.w	8(a1),d0
		bcs.s	loc_15DEE
		subi.w	#8,8(a1)
		lea	(word_15EAC).l,a4

loc_15DEE:				
		move.w	$10(a1),$14(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bsr.s	sub_15E18

loc_15E02:				
		bsr.w	SpeedToPos
		addi.w	#$70,$12(a0) ; 'p'
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite

; =============== S U B	R O U T	I N E =======================================


sub_15E18:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		movea.l	4(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#5,1(a0)
		_move.b	0(a0),d4
		move.b	1(a0),d5
		movea.l	a0,a1
		bra.s	loc_15E46
; ===========================================================================

loc_15E3E:				
		bsr.w	SingleObjLoad2
		bne.s	loc_15E82
		addq.w	#8,a3

loc_15E46:				
		move.b	#4,$24(a1)
		_move.b	d4,0(a1)
		move.l	a3,4(a1)
		move.b	d5,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	2(a0),2(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.w	(a4)+,$10(a1)
		move.w	(a4)+,$12(a1)
		dbf	d1,loc_15E3E

loc_15E82:				
		move.w	#$CB,d0	
		jmp	(PlaySound).l
; End of function sub_15E18

; ===========================================================================
word_15E8C:	dc.w  $400		; 0 
		dc.w $FB00		; 1
		dc.w  $600		; 2
		dc.w $FF00		; 3
		dc.w  $600		; 4
		dc.w  $100		; 5
		dc.w  $400		; 6
		dc.w  $500		; 7
		dc.w  $600		; 8
		dc.w $FA00		; 9
		dc.w  $800		; 10
		dc.w $FE00		; 11
		dc.w  $800		; 12
		dc.w  $200		; 13
		dc.w  $600		; 14
		dc.w  $600		; 15
word_15EAC:	dc.w $FA00		; 0 
		dc.w $FA00		; 1
		dc.w $F800		; 2
		dc.w $FE00		; 3
		dc.w $F800		; 4
		dc.w  $200		; 5
		dc.w $FA00		; 6
		dc.w  $600		; 7
		dc.w $FC00		; 8
		dc.w $FB00		; 9
		dc.w $FA00		; 10
		dc.w $FF00		; 11
		dc.w $FA00		; 12
		dc.w  $100		; 13
		dc.w $FC00		; 14
		dc.w  $500		; 15
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_15ECC:	dc.w word_15ED2-Map_15ECC; 0	
					
		dc.w word_15F14-Map_15ECC; 1
		dc.w word_15F56-Map_15ECC; 2
word_15ED2:	dc.w 8			
		dc.w $E005,    0,    0,$FFF0; 0
		dc.w $F005,    0,    0,$FFF0; 4
		dc.w	 5,    0,    0,$FFF0; 8
		dc.w $1005,    0,    0,$FFF0; 12
		dc.w $E005,    4,    2,	   0; 16
		dc.w $F005,    4,    2,	   0; 20
		dc.w	 5,    4,    2,	   0; 24
		dc.w $1005,    4,    2,	   0; 28
word_15F14:	dc.w 8			
		dc.w $E005,    4,    2,$FFF0; 0
		dc.w $F005,    4,    2,$FFF0; 4
		dc.w	 5,    4,    2,$FFF0; 8
		dc.w $1005,    4,    2,$FFF0; 12
		dc.w $E005,    4,    2,	   0; 16
		dc.w $F005,    4,    2,	   0; 20
		dc.w	 5,    4,    2,	   0; 24
		dc.w $1005,    4,    2,	   0; 28
word_15F56:	dc.w 8			
		dc.w $E005,    4,    2,$FFF0; 0
		dc.w $F005,    4,    2,$FFF0; 4
		dc.w	 5,    4,    2,$FFF0; 8
		dc.w $1005,    4,    2,$FFF0; 12
		dc.w $E005,    8,    4,	   0; 16
		dc.w $F005,    8,    4,	   0; 20
		dc.w	 5,    8,    4,	   0; 24
		dc.w $1005,    8,    4,	   0; 28
; ===========================================================================
		bra.w	Sprite_1637C

; =============== S U B	R O U T	I N E =======================================

; sub_15F9C: ObjectsLoad: RunObjects:
ExecuteObjects:				
		tst.b	(f_teleport_flag).w ; is a teleport in progress?
		bne.s	.teleport		; if so, exit
		
		lea	(v_ost_all).w,a0			; set address for object RAM
		moveq	#countof_ost-1,d7			; $80 objects -1
		moveq	#0,d0
		cmpi.b	#id_demo,(v_gamemode).w
		beq.s	.in_level
		cmpi.b	#id_level,(v_gamemode).w
		bne.s	.run_object

	.in_level:				
		move.w	#$8F,d7	
		tst.w	(f_two_player).w
		bne.s	.run_object
		cmpi.b	#6,(v_ost_maincharacter+ost_primary_routine).w
		bcc.s	.dead

	; RunObject:
	.run_object:							
		move.b	(a0),d0
		beq.s	.no_object
		add.w	d0,d0
		add.w	d0,d0
		movea.l	Obj_Index-4(pc,d0.w),a1
		jsr	(a1)
		moveq	#0,d0

	.no_object:				
		lea	$40(a0),a0
		dbf	d7,.run_object

.teleport:				
		rts	

; ===========================================================================
	; RunObjectsWhenPlayerIsDead:
	.dead:				
		moveq	#$F,d7
		bsr.s	.run_object
		moveq	#$6F,d7
		bsr.s	.display_object
		moveq	#$F,d7
		bra.s	.run_object

; =============== S U B	R O U T	I N E =======================================

	; RunObjectDisplayOnly:
	.display_object:						
		moveq	#0,d0
		move.b	(a0),d0
		beq.s	.no_object2
		tst.b	1(a0)
		bpl.s	.no_object2
		bsr.w	DisplaySprite

.no_object2:				
		lea	$40(a0),a0
		dbf	d7,.display_object
		rts	

; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite Programming Pointers
;
; This array contains the pointers to all the level sprites used in the	game.
; ---------------------------------------------------------------------------
Obj_Index:	index.l 0,1	; longword, absolute (relative to 0), start ids at 1

		ptr Sonic	; 1 
		ptr Tails
		ptr PlaneSwitcher
		ptr WaterSurface	; 4
		ptr TailsTails
		ptr Spiral	
		ptr Oil
		ptr Splash_SpindashDust	; 8
		ptr SonicSpecial
		ptr DrownCount
		ptr TippingFloor		; CPZ Tipping pipe section
		ptr CPZBetaPlatform	; $C ; unused beta leftover
		ptr Signpost 
		ptr TitleIntro
		ptr TitleMenu
		ptr TailsSpecial	; $10
		ptr Bridge			
		ptr GiantEmerald	; unused beta leftover
		ptr HPZWaterfall	; unused beta leftover
		ptr Seesaw			; $14
		ptr SwingingPlatform
		ptr Tram			; HTZ ziplines/lifts/trams
		ptr Helix			; unused S1 leftover: GHZ spiked log
		ptr BasicPlatform	; $18 ; ARZ & EHZ
		ptr BasicPlatform2	; CPZ, OOZ, & WFZ
		ptr CollapseLedge	; unused beta leftover, used by HPZ collapsing platform, same object as S1 GHZ collapsing ledges
		ptr SpeedBooster	; CPZ Speed Boosters
		ptr Scenery		; $1C ; EHZ bridge stakes, HTZ tram stakes, OOZ falling oil
		ptr BlueBalls
		ptr CPZSpinTube
		ptr CollapseFloor	; ARZ, MCZ, OOZ
		ptr LavaBubble		; $20
		ptr TwoPlayerResults
		ptr ArrowShooter
		ptr FallingPillar
		ptr Bubble			; $24
		ptr Ring
		ptr Monitor
		ptr ExplosionItem	
		ptr Animals		; $28
		ptr Points
		ptr Stomper
		ptr RisingPillar
		ptr LeavesGenerator	; $2C
		ptr Barrier
		ptr PowerUp
		ptr Sprite_23300
		ptr Sprite_238DC
		ptr Sprite_20DEC	; 48
		ptr Sprite_2351A	; 49
		ptr Sprite_23AF4	; 50
		ptr Sprite_13C48	; 51
		ptr Sprite_1D97E	; 52
		ptr Sprite_15900	; 53
		ptr Sprite_12078	; 54
		ptr Sprite_1D8F2	; 55
		ptr Sprite_13F74	; 56
		ptr Sprite_14086	; 57
		ptr Sprite_15CC8	; 58
		ptr Sprite_15D44	; 59
		ptr Sprite_24DD0	; 60
		ptr Sprite_3F1E4	; 61
		ptr Sprite_2A7B0	; 62
		ptr Sprite_26370	; 63
		ptr Springs	; 64
		ptr Sprite_26634	; 65
		ptr Sprite_23E40	; 66
		ptr Sprite_1F730	; 67
		ptr Sprite_240F8	; 68
		ptr Sprite_24A16	; 69
		ptr Sprite_24CF4	; 70
		ptr Sprite_25244	; 71
		ptr Sprite_20B9E	; 72
		ptr Sprite_2CA14	; 73
		ptr Sprite_2D068	; 74
		ptr Sprite_1637C	; 75
		ptr Sprite_1637C	; 76
		ptr Sprite_1637C	; 77
		ptr Sprite_1637C	; 78
		ptr Sprite_2CCC8	; 79
		ptr Sprite_318F0	; 80
		ptr Sprite_2FC50	; 81
		ptr Sprite_32940	; 82
		ptr Sprite_32288	; 83
		ptr Sprite_32F90	; 84
		ptr Sprite_2EF18	; 85
		ptr Sprite_30FA4	; 86
		ptr Sprite_2D494	; 87
		ptr Sprite_35FBC	; 88
		ptr Sprite_35554	; 89
		ptr Sprite_353FE	; 90
		ptr Sprite_2D394	; 91
		ptr Sprite_2D734	; 92
		ptr Sprite_6FC0	; 93
		ptr SS_StartBanner	; 94
		ptr Sprite_34FA0	; 95
		ptr Sprite_34EB0	; 96
		ptr Sprite_1637C	; 97
		ptr Sprite_340A4	; 98
		ptr Sprite_26920	; 99
		ptr Sprite_26AE0	; 100
		ptr Sprite_26F58	; 101
		ptr Sprite_2715C	; 102
		ptr Sprite_27594	; 103
		ptr Sprite_27884	; 104
		ptr Sprite_27AB0	; 105
		ptr Sprite_27D6C	; 106
		ptr Sprite_28034	; 107
		ptr Sprite_27794	; 108
		ptr Sprite_283AC	; 109
		ptr Sprite_143C0	; 110
		ptr Sprite_285C0	; 111
		ptr Sprite_112F0	; 112
		ptr Sprite_2893C	; 113
		ptr Sprite_289D4	; 114
		ptr Sprite_20EE0	; 115
		ptr Sprite_28BC8	; 116
		ptr Sprite_28DF8	; 117
		ptr Sprite_28F88	; 118
		ptr Sprite_291CC	; 119
		ptr Sprite_1F0B4	; 120
		ptr Sprite_293A0	; 121
		ptr Sprite_29590	; 122
		ptr Sprite_20FD2	; 123
		ptr Sprite_1F624	; 124
		ptr Sprite_1E0F0	; 125
		ptr Sprite_297E4	; 126
		ptr Sprite_2997C	; 127
		ptr Sprite_2A000	; 128
		ptr Sprite_2A290	; 129
		ptr Sprite_2A4FC	; 130
		ptr Sprite_2115C	; 131
		ptr Sprite_2AB84	; 132
		ptr Sprite_2B140	; 133
		ptr Sprite_7356	; 134
		ptr Sprite_34A5C	; 135
		ptr Sprite_30480	; 136
		ptr Sprite_3EAC8	; 137
		ptr Sprite_21392	; 138
		ptr Sprite_36924	; 139
		ptr Sprite_36A76	; 140
		ptr Sprite_36A76	; 141
		ptr Sprite_36B88	; 142
		ptr Sprite_36BD4	; 143
		ptr Sprite_36DAC	; 144
		ptr Sprite_36F0E	; 145
		ptr Sprite_36FE6	; 146
		ptr Sprite_37322	; 147
		ptr Sprite_370FE	; 148
		ptr Sprite_37322	; 149
		ptr Sprite_373D0	; 150
		ptr Sprite_376E8	; 151
		ptr Sprite_377C8	; 152
		ptr Sprite_37936	; 153
		ptr Sprite_37A06	; 154
		ptr Sprite_37A82	; 155
		ptr Sprite_37BFA	; 156
		ptr Sprite_37E16	; 157
		ptr Sprite_3800C	; 158
		ptr Sprite_3815C	; 159
		ptr Sprite_383B4	; 160
		ptr Sprite_384A2	; 161
		ptr Sprite_3873E	; 162
		ptr Sprite_3899C	; 163
		ptr Sprite_38AEA	; 164
		ptr Sprite_38B86	; 165
		ptr Sprite_38DBA	; 166
		ptr Sprite_38F66	; 167
		ptr Sprite_39032	; 168
		ptr Sprite_39066	; 169
		ptr Sprite_390A2	; 170
		ptr Sprite_3937A	; 171
		ptr Sprite_3941C	; 172
		ptr Sprite_39452	; 173
		ptr Sprite_3972C	; 174
		ptr Sprite_3A1DC	; 175
		ptr Sprite_3A3F8	; 176
		ptr Sprite_3A790	; 177
		ptr Sprite_3B2DE	; 178
		ptr Sprite_3B36A	; 179
		ptr Sprite_3B3FA	; 180
		ptr Sprite_3B5D0	; 181
		ptr Sprite_3B8A6	; 182
		ptr Sprite_3B968	; 183
		ptr Sprite_3BABA	; 184
		ptr Sprite_3BB4C	; 185
		ptr Sprite_3BB7C	; 186
		ptr Sprite_3BBBC	; 187
		ptr Sprite_3BC1C	; 188
		ptr Sprite_3BD7A	; 189
		ptr Sprite_3BEAA	; 190
		ptr Sprite_3BF04	; 191
		ptr Sprite_3C0AC	; 192
		ptr Sprite_3C328	; 193
		ptr Sprite_3C3D6	; 194
		ptr Sprite_3C3D6	; 195
		ptr Sprite_3C442	; 196
		ptr Sprite_3CED0	; 197
		ptr Sprite_3D4C8	; 198
		ptr Sprite_3D23E	; 199
		ptr Sprite_132F0	; 200
		ptr Sprite_A1D6	; 201
		ptr Sprite_A9F2	; 202
		ptr Sprite_A3C8	; 203
		ptr Sprite_AAAE	; 204
		ptr Sprite_A894	; 205
		ptr Sprite_A988	; 206
		ptr Sprite_1637C	; 207
		ptr Sprite_1637C	; 208
		ptr Sprite_2B528	; 209
		ptr Sprite_2B84C	; 210
		ptr Sprite_2B8EC	; 211
		ptr Sprite_2BA08	; 212
		ptr Sprite_2BB6C	; 213
		ptr Sprite_2C448	; 214
		ptr Sprite_2C6AC	; 215
		ptr Sprite_2C92C	; 216
		ptr Sprite_7A68	; 217
		ptr Sprite_7B82	; 218
		ptr Sprite_125E6	; 219
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_1637C:				
					
		bra.w	DeleteObject

; =============== S U B	R O U T	I N E =======================================


ObjectFall:					
		move.l	ost_x_pos(a0),d2	; load x position
		move.l	ost_y_pos(a0),d3	; load y position
		move.w	ost_x_vel(a0),d0	; load x speed
		ext.l	d0
		asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d2	; add x speed to x position	; note this affects the subpixel position x_sub(a0) = 2+x_pos(a0)
		move.w	ost_y_vel(a0),d0	; load y speed
		addi.w	#$38,ost_y_vel(a0)	; increase vertical speed (apply gravity)
		ext.l	d0
		asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d3	; add old y speed to y position	; note this affects the subpixel position y_sub(a0) = 2+y_pos(a0)
		move.l	d2,ost_x_pos(a0)	; store new x position
		move.l	d3,ost_y_pos(a0)	; store new y position
		rts



; =============== S U B	R O U T	I N E =======================================


SpeedToPos:				
		move.l	ost_x_pos(a0),d2	; load x position
		move.l	ost_y_pos(a0),d3	; load y position
		move.w	ost_x_vel(a0),d0	; load horizontal speed
		ext.l	d0
		asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d2	; add to x-axis position	; note this affects the subpixel position x_sub(a0) = 2+x_pos(a0)
		move.w	ost_y_vel(a0),d0	; load vertical speed
		ext.l	d0
		asl.l	#8,d0	; shift velocity to line up with the middle 16 bits of the 32-bit position
		add.l	d0,d3	; add to y-axis position	; note this affects the subpixel position y_sub(a0) = 2+y_pos(a0)
		move.l	d2,ost_x_pos(a0)	; update x-axis position
		move.l	d3,ost_y_pos(a0)	; update y-axis position
		rts
; End of function SpeedToPos

; ===========================================================================

MarkObjGone:								
		tst.w	(f_two_player).w
		beq.s	loc_163DC
		bra.w	DisplaySprite

	loc_163DC:				
		move.w	ost_x_pos(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$80+320+$40+$80,d0
		bhi.w	loc_163F4
		bra.w	DisplaySprite

	loc_163F4:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_16406
		bclr	#7,2(a2,d0.w)

	loc_16406:				
		bra.w	DeleteObject
; ===========================================================================

MarkObjGone2:						
		tst.w	(f_two_player).w
		beq.s	loc_16414
		bra.w	DisplaySprite
		
	loc_16414:				
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$80+320+$40+$80,d0
		bhi.w	.loop8
		bra.w	DisplaySprite

	.loop8:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_1643A
		bclr	#7,2(a2,d0.w)

	loc_1643A:				
		bra.w	DeleteObject
		
; ===========================================================================

MarkObjGone3:				
		tst.w	(f_two_player).w
		beq.s	loc_16446
		rts	

	loc_16446:				
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$80+320+$40+$80,d0
		bhi.w	loc_1645C ; could be optimized to .s
		rts	


	loc_1645C:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_1646E
		bclr	#7,2(a2,d0.w)

	loc_1646E:				
		bra.w	DeleteObject
		
; ===========================================================================

MarkObjGone_P1:				
		tst.w	(f_two_player).w
		bne.s	MarkObjGone_P2
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$80+320+$40+$80,d0
		bhi.w	loc_16490
		bra.w	DisplaySprite

	loc_16490:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_164A2
		bclr	#7,2(a2,d0.w)

	loc_164A2:				
		bra.w	DeleteObject
		
; ===========================================================================

MarkObjGone_P2:				
		move.w	8(a0),d0
		andi.w	#-$100,d0
		move.w	d0,d1
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$300,d0
		bhi.w	loc_164C0
		bra.w	DisplaySprite

	loc_164C0:				
		sub.w	(v_camera_x_pos_coarse_p2).w,d1
		cmpi.w	#$300,d1
		bhi.w	loc_164D0
		bra.w	DisplaySprite

	loc_164D0:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_164E2
		bclr	#7,2(a2,d0.w)

	loc_164E2:				
		bra.w	DeleteObject ; useless branch...

; ===========================================================================			

DeleteObject:						
		movea.l	a0,a1

DeleteObject2:					
		moveq	#0,d1
		moveq	#$F,d0

	.loop:				
		move.l	d1,(a1)+
		dbf	d0,.loop
		rts	


; =============== S U B	R O U T	I N E =======================================

; sub_164F4:
DisplaySprite:									
		lea	(v_sprite_queue).w,a1
		move.w	$18(a0),d0
		lsr.w	#1,d0
		andi.w	#$380,d0
		adda.w	d0,a1
		cmpi.w	#$7E,(a1)
		bcc.s	.exit
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

	.exit:				
		rts	


; =============== S U B	R O U T	I N E =======================================

; sub_16512:
DisplaySprite2:				
		lea	(v_sprite_queue).w,a2
		move.w	$18(a1),d0
		lsr.w	#1,d0
		andi.w	#$380,d0
		adda.w	d0,a2
		cmpi.w	#$7E,(a2) ; '~'
		bcc.s	.exit
		addq.w	#2,(a2)
		adda.w	(a2),a2
		move.w	a1,(a2)

	.exit:				
		rts	
; End of function DisplaySprite2

; ===========================================================================
; loc_16530:
DisplaySprite3:									
		lea	(v_sprite_queue).w,a1
		adda.w	d0,a1
		cmpi.w	#$7E,(a1) ; '~'
		bcc.s	.exit
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

	.exit:				
		rts	

; =============== S U B	R O U T	I N E =======================================


AnimateSprite:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_16560
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)

loc_16560:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_1659A
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),$1E(a0)
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bmi.s	loc_1659C

loc_1657C:				
					
		andi.b	#$7F,d0	; ''
		move.b	d0,$1A(a0)
		move.b	$22(a0),d1
		andi.b	#3,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		addq.b	#1,$1B(a0)

locret_1659A:				
		rts	
; ===========================================================================

loc_1659C:				
		addq.b	#1,d0
		bne.s	loc_165AC
		move.b	#0,$1B(a0)
		move.b	1(a1),d0
		bra.s	loc_1657C
; ===========================================================================

loc_165AC:				
		addq.b	#1,d0
		bne.s	loc_165C0
		move.b	2(a1,d1.w),d0
		sub.b	d0,$1B(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_1657C
; ===========================================================================

loc_165C0:				
		addq.b	#1,d0
		bne.s	loc_165CC
		move.b	2(a1,d1.w),$1C(a0)
		rts	
; ===========================================================================

loc_165CC:				
		addq.b	#1,d0
		bne.s	loc_165E0
		addq.b	#2,$24(a0)
		move.b	#0,$1E(a0)
		addq.b	#1,$1B(a0)
		rts	
; ===========================================================================

loc_165E0:				
		addq.b	#1,d0
		bne.s	loc_165F0
		move.b	#0,$1B(a0)
		clr.b	$25(a0)
		rts	
; ===========================================================================

loc_165F0:				
		addq.b	#1,d0
		bne.s	loc_165FA
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_165FA:				
		addq.b	#1,d0
		bne.s	locret_16602
		addq.b	#2,$2A(a0)

locret_16602:				
		rts	
; End of function AnimateSprite


; =============== S U B	R O U T	I N E =======================================


BuildSprites:								
		tst.w	(f_two_player).w
		bne.w	loc_1694E
		lea	(v_sprite_buffer).w,a2
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(f_level_started).w
		beq.s	loc_16622
		jsrto	BuildHUD, JmpTo_BuildHUD
		bsr.w	BuildRings

loc_16622:				
		lea	(v_sprite_queue).w,a4
		moveq	#7,d7

loc_16628:				
		tst.w	(a4)
		beq.w	loc_166FA
		moveq	#2,d6

loc_16630:				
		movea.w	(a4,d6.w),a0
		tst.b	(a0)
		beq.w	loc_166F2
		andi.b	#$7F,1(a0) ; ''
		move.b	1(a0),d0
		move.b	d0,d4
		btst	#6,d0
		bne.w	loc_1671C
		andi.w	#$C,d0
		beq.s	loc_166A6
		lea	(v_camera_x_pos_copy).w,a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	8(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_166F2
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.w	loc_166F2
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_166B0
		moveq	#0,d0
		move.b	$16(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.s	loc_166F2
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.s	loc_166F2
		addi.w	#$80,d2	
		bra.s	loc_166CC
; ===========================================================================

loc_166A6:				
		move.w	$A(a0),d2
		move.w	8(a0),d3
		bra.s	loc_166CC
; ===========================================================================

loc_166B0:				
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		addi.w	#$80,d2	
		andi.w	#$7FF,d2
		cmpi.w	#$60,d2	; '`'
		bcs.s	loc_166F2
		cmpi.w	#$180,d2
		bcc.s	loc_166F2

loc_166CC:				
					
		movea.l	4(a0),a1
		moveq	#0,d1
		btst	#5,d4
		bne.s	loc_166E8
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_166EC

loc_166E8:				
		bsr.w	BuildSpr_Draw

loc_166EC:				
		ori.b	#-$80,1(a0)

loc_166F2:				
					
		addq.w	#2,d6
		subq.w	#2,(a4)
		bne.w	loc_16630

loc_166FA:				
		lea	$80(a4),a4
		dbf	d7,loc_16628
		move.b	d5,(v_spritecount).w
		cmpi.b	#$50,d5	; 'P'
		beq.s	loc_16714
		move.l	#0,(a2)
		rts	
; ===========================================================================

loc_16714:				
		move.b	#0,-5(a2)
		rts	
; ===========================================================================

loc_1671C:				
		move.l	a4,-(sp)
		lea	(v_camera_x_pos).w,a4
		movea.w	2(a0),a3
		movea.l	4(a0),a5
		moveq	#0,d0
		move.b	$E(a0),d0
		move.w	8(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16804
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.w	loc_16804
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_1677C
		moveq	#0,d0
		move.b	$14(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	loc_16804
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.w	loc_16804
		addi.w	#$80,d2	
		bra.s	loc_16798
; ===========================================================================

loc_1677C:				
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		addi.w	#$80,d2	
		andi.w	#$7FF,d2
		cmpi.w	#$60,d2	; '`'
		bcs.s	loc_16804
		cmpi.w	#$180,d2
		bcc.s	loc_16804

loc_16798:				
		moveq	#0,d1
		move.b	$B(a0),d1
		beq.s	loc_167B6
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_167B6
		move.w	d4,-(sp)
		bsr.w	sub_1680A
		move.w	(sp)+,d4

loc_167B6:				
					
		ori.b	#-$80,1(a0)
		lea	$10(a0),a6
		moveq	#0,d0
		move.b	$F(a0),d0
		subq.w	#1,d0
		bcs.s	loc_16804

loc_167CA:				
		swap	d0
		move.w	(a6)+,d3
		sub.w	(a4),d3
		addi.w	#$80,d3	
		move.w	(a6)+,d2
		sub.w	4(a4),d2
		addi.w	#$80,d2	
		andi.w	#$7FF,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_167FE
		move.w	d4,-(sp)
		bsr.w	sub_1680A
		move.w	(sp)+,d4

loc_167FE:				
		swap	d0
		dbf	d0,loc_167CA

loc_16804:				
					
		movea.l	(sp)+,a4
		bra.w	loc_166F2
; End of function BuildSprites


; =============== S U B	R O U T	I N E =======================================


sub_1680A:				
					
		cmpi.b	#$50,d5	; 'P'
		bcs.s	loc_1681C
		rts	
; End of function sub_1680A


; =============== S U B	R O U T	I N E =======================================


BuildSpr_Draw:				
		movea.w	2(a0),a3
		cmpi.b	#$50,d5	; 'P'
		bcc.s	locret_16852

loc_1681C:				
		btst	#0,d4
		bne.s	loc_16854
		btst	#1,d4
		bne.w	loc_168B4

loc_1682A:				
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w	a3,d0
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_1684C
		addq.w	#1,d0

loc_1684C:				
		move.w	d0,(a2)+
		dbf	d1,loc_1682A

locret_16852:				
		rts	
; ===========================================================================

loc_16854:				
		btst	#1,d4
		bne.w	loc_168FC

loc_1685C:				
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	d4,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$800,d0
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		neg.w	d0
		move.b	byte_16894(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_1688C
		addq.w	#1,d0

loc_1688C:				
		move.w	d0,(a2)+
		dbf	d1,loc_1685C
		rts	
; ===========================================================================
byte_16894:	dc.b   8		; 0
		dc.b   8		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b $10		; 6
		dc.b $10		; 7
		dc.b $18		; 8
		dc.b $18		; 9
		dc.b $18		; 10
		dc.b $18		; 11
		dc.b $20		; 12
		dc.b $20		; 13
		dc.b $20		; 14
		dc.b $20		; 15
byte_168A4:	dc.b   8		; 0
		dc.b $10		; 1
		dc.b $18		; 2
		dc.b $20		; 3
		dc.b   8		; 4
		dc.b $10		; 5
		dc.b $18		; 6
		dc.b $20		; 7
		dc.b   8		; 8
		dc.b $10		; 9
		dc.b $18		; 10
		dc.b $20		; 11
		dc.b   8		; 12
		dc.b $10		; 13
		dc.b $18		; 14
		dc.b $20		; 15
; ===========================================================================

loc_168B4:				
					
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	byte_168A4(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1000,d0
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_168E4
		addq.w	#1,d0

loc_168E4:				
		move.w	d0,(a2)+
		dbf	d1,loc_168B4
		rts	
; ===========================================================================
byte_168EC:	dc.b   8		; 0
		dc.b $10		; 1
		dc.b $18		; 2
		dc.b $20		; 3
		dc.b   8		; 4
		dc.b $10		; 5
		dc.b $18		; 6
		dc.b $20		; 7
		dc.b   8		; 8
		dc.b $10		; 9
		dc.b $18		; 10
		dc.b $20		; 11
		dc.b   8		; 12
		dc.b $10		; 13
		dc.b $18		; 14
		dc.b $20		; 15
; ===========================================================================

loc_168FC:				
					
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	byte_168EC(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	d4,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1800,d0
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		neg.w	d0
		move.b	byte_1693E(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16936
		addq.w	#1,d0

loc_16936:				
		move.w	d0,(a2)+
		dbf	d1,loc_168FC
		rts	
; End of function BuildSpr_Draw

; ===========================================================================
byte_1693E:	dc.b   8		; 0
		dc.b   8		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b $10		; 6
		dc.b $10		; 7
		dc.b $18		; 8
		dc.b $18		; 9
		dc.b $18		; 10
		dc.b $18		; 11
		dc.b $20		; 12
		dc.b $20		; 13
		dc.b $20		; 14
		dc.b $20		; 15
; ===========================================================================

loc_1694E:				
		lea	(v_sprite_buffer).w,a2
		moveq	#2,d5
		moveq	#0,d4
		move.l	#$1D80F01,(a2)+
		move.l	#1,(a2)+
		move.l	#$1D80F02,(a2)+
		move.l	#0,(a2)+
		tst.b	(f_level_started).w
		beq.s	loc_1697C
		bsr.w	JmpTo_BuildHUD_P1
		bsr.w	loc_171F8

loc_1697C:				
		lea	(v_sprite_queue).w,a4
		moveq	#7,d7

loc_16982:				
		move.w	(a4),d0
		beq.w	loc_16A5A
		move.w	d0,-(sp)
		moveq	#2,d6

loc_1698C:				
		movea.w	(a4,d6.w),a0
		tst.b	(a0)
		beq.w	loc_16A50
		andi.b	#$7F,1(a0) ; ''
		move.b	1(a0),d0
		move.b	d0,d4
		btst	#6,d0
		bne.w	loc_16B9A
		andi.w	#$C,d0
		beq.s	loc_16A00
		lea	(v_camera_x_pos).w,a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	8(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16A50
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.s	loc_16A50
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16A0E
		moveq	#0,d0
		move.b	$16(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.s	loc_16A50
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.s	loc_16A50
		addi.w	#$100,d2
		bra.s	loc_16A2A
; ===========================================================================

loc_16A00:				
		move.w	$A(a0),d2
		move.w	8(a0),d3
		addi.w	#$80,d2	
		bra.s	loc_16A2A
; ===========================================================================

loc_16A0E:				
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2	; '`'
		bcs.s	loc_16A50
		cmpi.w	#$180,d2
		bcc.s	loc_16A50
		addi.w	#$80,d2	

loc_16A2A:				
					
		movea.l	4(a0),a1
		moveq	#0,d1
		btst	#5,d4
		bne.s	loc_16A46
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16A4A

loc_16A46:				
		bsr.w	sub_16DAE

loc_16A4A:				
		ori.b	#-$80,1(a0)

loc_16A50:				
					
		addq.w	#2,d6
		subq.w	#2,(sp)
		bne.w	loc_1698C
		addq.w	#2,sp

loc_16A5A:				
		lea	$80(a4),a4
		dbf	d7,loc_16982
		move.b	d5,(v_spritecount).w
		cmpi.b	#$50,d5	; 'P'
		bcc.s	loc_16A74
		move.l	#0,(a2)
		bra.s	loc_16A7A
; ===========================================================================

loc_16A74:				
		move.b	#0,-5(a2)

loc_16A7A:				
					
		tst.w	(f_hblank).w
		bne.s	loc_16A7A
		lea	(v_sprite_queue_2).w,a2
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(f_level_started).w
		beq.s	loc_16A96
		bsr.w	JmpTo_BuildHUD_P2
		bsr.w	loc_1720E

loc_16A96:				
		lea	(v_sprite_queue).w,a4
		moveq	#7,d7

loc_16A9C:				
		move.w	(a4),d0
		beq.w	loc_16B78
		move.w	d0,-(sp)
		moveq	#2,d6

loc_16AA6:				
		movea.w	(a4,d6.w),a0
		tst.b	(a0)
		beq.w	loc_16B64
		move.b	1(a0),d0
		move.b	d0,d4
		btst	#6,d0
		bne.w	loc_16C84
		andi.w	#$C,d0
		beq.s	loc_16B14
		lea	(v_camera_x_pos_p2).w,a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	8(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16B64
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.s	loc_16B64
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16B22
		moveq	#0,d0
		move.b	$16(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.s	loc_16B64
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.s	loc_16B64
		addi.w	#$1E0,d2
		bra.s	loc_16B3E
; ===========================================================================

loc_16B14:				
		move.w	$A(a0),d2
		move.w	8(a0),d3
		addi.w	#$160,d2
		bra.s	loc_16B3E
; ===========================================================================

loc_16B22:				
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2	; '`'
		bcs.s	loc_16B64
		cmpi.w	#$180,d2
		bcc.s	loc_16B64
		addi.w	#$160,d2

loc_16B3E:				
					
		movea.l	4(a0),a1
		moveq	#0,d1
		btst	#5,d4
		bne.s	loc_16B5A
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16B5E

loc_16B5A:				
		bsr.w	sub_16DAE

loc_16B5E:				
		ori.b	#-$80,1(a0)

loc_16B64:				
					
		addq.w	#2,d6
		subq.w	#2,(sp)
		bne.w	loc_16AA6
		addq.w	#2,sp
		tst.b	(f_teleport_flag).w
		bne.s	loc_16B78
		move.w	#0,(a4)

loc_16B78:				
					
		lea	$80(a4),a4
		dbf	d7,loc_16A9C
		move.b	d5,(v_spritecount).w
		cmpi.b	#$50,d5	; 'P'
		beq.s	loc_16B92
		move.l	#0,(a2)
		rts	
; ===========================================================================

loc_16B92:				
		move.b	#0,-5(a2)
		rts	
; ===========================================================================

loc_16B9A:				
		move.l	a4,-(sp)
		lea	(v_camera_x_pos).w,a4
		movea.w	2(a0),a3
		movea.l	4(a0),a5
		moveq	#0,d0
		move.b	$E(a0),d0
		move.w	8(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16C7E
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.w	loc_16C7E
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16BFA
		moveq	#0,d0
		move.b	$14(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	loc_16C7E
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.w	loc_16C7E
		addi.w	#$100,d2
		bra.s	loc_16C16
; ===========================================================================

loc_16BFA:				
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2	; '`'
		bcs.s	loc_16C7E
		cmpi.w	#$180,d2
		bcc.s	loc_16C7E
		addi.w	#$80,d2	

loc_16C16:				
		moveq	#0,d1
		move.b	$B(a0),d1
		beq.s	loc_16C34
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16C34
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16C34:				
					
		ori.b	#-$80,1(a0)
		lea	$10(a0),a6
		moveq	#0,d0
		move.b	$F(a0),d0
		subq.w	#1,d0
		bcs.s	loc_16C7E

loc_16C48:				
		swap	d0
		move.w	(a6)+,d3
		sub.w	(a4),d3
		addi.w	#$80,d3	
		move.w	(a6)+,d2
		sub.w	4(a4),d2
		addi.w	#$100,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16C78
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16C78:				
		swap	d0
		dbf	d0,loc_16C48

loc_16C7E:				
					
		movea.l	(sp)+,a4
		bra.w	loc_16A50
; ===========================================================================

loc_16C84:				
		move.l	a4,-(sp)
		lea	(v_camera_x_pos_p2).w,a4
		movea.w	2(a0),a3
		movea.l	4(a0),a5
		moveq	#0,d0
		move.b	$E(a0),d0
		move.w	8(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	loc_16D68
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#$140,d1
		bge.w	loc_16D68
		addi.w	#$80,d3	
		btst	#4,d4
		beq.s	loc_16CE4
		moveq	#0,d0
		move.b	$14(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	loc_16D68
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#$E0,d1	
		bge.w	loc_16D68
		addi.w	#$1E0,d2
		bra.s	loc_16D00
; ===========================================================================

loc_16CE4:				
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		addi.w	#$80,d2	
		cmpi.w	#$60,d2	; '`'
		bcs.s	loc_16D68
		cmpi.w	#$180,d2
		bcc.s	loc_16D68
		addi.w	#$160,d2

loc_16D00:				
		moveq	#0,d1
		move.b	$B(a0),d1
		beq.s	loc_16D1E
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16D1E
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16D1E:				
					
		ori.b	#-$80,1(a0)
		lea	$10(a0),a6
		moveq	#0,d0
		move.b	$F(a0),d0
		subq.w	#1,d0
		bcs.s	loc_16D68

loc_16D32:				
		swap	d0
		move.w	(a6)+,d3
		sub.w	(a4),d3
		addi.w	#$80,d3	
		move.w	(a6)+,d2
		sub.w	4(a4),d2
		addi.w	#$1E0,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_16D62
		move.w	d4,-(sp)
		bsr.w	sub_16DA6
		move.w	(sp)+,d4

loc_16D62:				
		swap	d0
		dbf	d0,loc_16D32

loc_16D68:				
					
		movea.l	(sp)+,a4
		bra.w	loc_16B64

; =============== S U B	R O U T	I N E =======================================


Adjust2PArtPointer:				
		tst.w	(f_two_player).w
		beq.s	locret_16D88
		move.w	2(a0),d0
		andi.w	#$7FF,d0
		lsr.w	#1,d0
		andi.w	#-$800,2(a0)
		add.w	d0,2(a0)

locret_16D88:				
		rts	
; End of function Adjust2PArtPointer


; =============== S U B	R O U T	I N E =======================================


sub_16D8A:				
		tst.w	(f_two_player).w
		beq.s	locret_16DA4
		move.w	2(a1),d0
		andi.w	#$7FF,d0
		lsr.w	#1,d0
		andi.w	#-$800,2(a1)
		add.w	d0,2(a1)

locret_16DA4:				
		rts	
; End of function sub_16D8A


; =============== S U B	R O U T	I N E =======================================


sub_16DA6:				
					
		cmpi.b	#$50,d5	; 'P'
		bcs.s	loc_16DC6
		rts	
; End of function sub_16DA6


; =============== S U B	R O U T	I N E =======================================


sub_16DAE:				
					
		movea.w	2(a0),a3
		cmpi.b	#$50,d5	; 'P'
		bcc.s	locret_16DF2
		btst	#0,d4
		bne.s	loc_16E04
		btst	#1,d4
		bne.w	loc_16E66

loc_16DC6:				
					
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16DF4(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16DEC
		addq.w	#1,d0

loc_16DEC:				
		move.w	d0,(a2)+
		dbf	d1,loc_16DC6

locret_16DF2:				
		rts	
; ===========================================================================
byte_16DF4:	dc.b   0		; 0
		dc.b   0		; 1
		dc.b   1		; 2
		dc.b   1		; 3
		dc.b   4		; 4
		dc.b   4		; 5
		dc.b   5		; 6
		dc.b   5		; 7
		dc.b   8		; 8
		dc.b   8		; 9
		dc.b   9		; 10
		dc.b   9		; 11
		dc.b  $C		; 12
		dc.b  $C		; 13
		dc.b  $D		; 14
		dc.b  $D		; 15
; ===========================================================================

loc_16E04:				
		btst	#1,d4
		bne.w	loc_16EC2

loc_16E0C:				
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16DF4(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$800,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		neg.w	d0
		move.b	byte_16E46(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16E3E
		addq.w	#1,d0

loc_16E3E:				
		move.w	d0,(a2)+
		dbf	d1,loc_16E0C
		rts	
; ===========================================================================
byte_16E46:	dc.b   8		; 0
		dc.b   8		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b $10		; 6
		dc.b $10		; 7
		dc.b $18		; 8
		dc.b $18		; 9
		dc.b $18		; 10
		dc.b $18		; 11
		dc.b $20		; 12
		dc.b $20		; 13
		dc.b $20		; 14
		dc.b $20		; 15
byte_16E56:	dc.b   8		; 0
		dc.b $10		; 1
		dc.b $18		; 2
		dc.b $20		; 3
		dc.b   8		; 4
		dc.b $10		; 5
		dc.b $18		; 6
		dc.b $20		; 7
		dc.b   8		; 8
		dc.b $10		; 9
		dc.b $18		; 10
		dc.b $20		; 11
		dc.b   8		; 12
		dc.b $10		; 13
		dc.b $18		; 14
		dc.b $20		; 15
; ===========================================================================

loc_16E66:				
					
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	byte_16E56(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16EA2(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1000,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16E9A
		addq.w	#1,d0

loc_16E9A:				
		move.w	d0,(a2)+
		dbf	d1,loc_16E66
		rts	
; ===========================================================================
byte_16EA2:	dc.b   0		; 0
		dc.b   0		; 1
		dc.b   1		; 2
		dc.b   1		; 3
		dc.b   4		; 4
		dc.b   4		; 5
		dc.b   5		; 6
		dc.b   5		; 7
		dc.b   8		; 8
		dc.b   8		; 9
		dc.b   9		; 10
		dc.b   9		; 11
		dc.b  $C		; 12
		dc.b  $C		; 13
		dc.b  $D		; 14
		dc.b  $D		; 15
byte_16EB2:	dc.b   8		; 0
		dc.b $10		; 1
		dc.b $18		; 2
		dc.b $20		; 3
		dc.b   8		; 4
		dc.b $10		; 5
		dc.b $18		; 6
		dc.b $20		; 7
		dc.b   8		; 8
		dc.b $10		; 9
		dc.b $18		; 10
		dc.b $20		; 11
		dc.b   8		; 12
		dc.b $10		; 13
		dc.b $18		; 14
		dc.b $20		; 15
; ===========================================================================

loc_16EC2:				
					
		move.b	(a1)+,d0
		move.b	(a1),d4
		ext.w	d0
		neg.w	d0
		move.b	byte_16EB2(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_16EA2(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	a3,d0
		eori.w	#$1800,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		neg.w	d0
		move.b	byte_16F06(pc,d4.w),d4
		sub.w	d4,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_16EFE
		addq.w	#1,d0

loc_16EFE:				
		move.w	d0,(a2)+
		dbf	d1,loc_16EC2
		rts	
; End of function sub_16DAE

; ===========================================================================
byte_16F06:	dc.b   8		; 0
		dc.b   8		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b $10		; 6
		dc.b $10		; 7
		dc.b $18		; 8
		dc.b $18		; 9
		dc.b $18		; 10
		dc.b $18		; 11
		dc.b $20		; 12
		dc.b $20		; 13
		dc.b $20		; 14
		dc.b $20		; 15
; ===========================================================================
		move.w	8(a0),d0
		sub.w	(v_camera_x_pos).w,d0
		bmi.s	loc_16F3A
		cmpi.w	#$140,d0
		bge.s	loc_16F3A
		move.w	$C(a0),d1
		sub.w	(v_camera_y_pos).w,d1
		bmi.s	loc_16F3A
		cmpi.w	#$E0,d1	
		bge.s	loc_16F3A
		moveq	#0,d0
		rts	
; ===========================================================================

loc_16F3A:				
					
		moveq	#1,d0
		rts	
; ===========================================================================
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	8(a0),d0
		sub.w	(v_camera_x_pos).w,d0
		add.w	d1,d0
		bmi.s	loc_16F6E
		add.w	d1,d1
		sub.w	d1,d0
		cmpi.w	#$140,d0
		bge.s	loc_16F6E
		move.w	$C(a0),d1
		sub.w	(v_camera_y_pos).w,d1
		bmi.s	loc_16F6E
		cmpi.w	#$E0,d1	
		bge.s	loc_16F6E
		moveq	#0,d0
		rts	
; ===========================================================================

loc_16F6E:				
					
		moveq	#1,d0
		rts	
; ===========================================================================
 
    if Revision=1
		nop
    endc

    if ~RemoveJmpTos
JmpTo_BuildHUD: ; JmpTo
		jmp	(BuildHUD).l
JmpTo_BuildHUD_P1: ; JmpTo
		jmp	(BuildHUD_P1).l
JmpTo_BuildHUD_P2: ; JmpTo
		jmp	(BuildHUD_P2).l

		align 4
    endc

; ===========================================================================
; ----------------------------------------------------------------------------
; Pseudo-object that manages where rings are placed onscreen
; as you move through the level, and otherwise updates them.
; ----------------------------------------------------------------------------
RingsManager:				
		moveq	#0,d0
		move.b	(v_ring_manager_routine).w,d0
		move.w	off_16F96(pc,d0.w),d0
		jmp	off_16F96(pc,d0.w)
; ===========================================================================
off_16F96:	dc.w loc_16F9A-off_16F96; 0 
		dc.w loc_16FDE-off_16F96; 1
; ===========================================================================

loc_16F9A:				
		addq.b	#2,(v_ring_manager_routine).w
		bsr.w	loc_172A4
		lea	(v_ring_positions).w,a1
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_16FB6
		moveq	#1,d4
		bra.s	loc_16FB6
; ===========================================================================

loc_16FB2:				
		lea	6(a1),a1

loc_16FB6:				
		cmp.w	2(a1),d4
		bhi.s	loc_16FB2
		move.w	a1,(v_ring_start).w
		move.w	a1,(v_ring_start_p2).w
		addi.w	#$150,d4
		bra.s	loc_16FCE
; ===========================================================================

loc_16FCA:				
		lea	6(a1),a1

loc_16FCE:				
		cmp.w	2(a1),d4
		bhi.s	loc_16FCA
		move.w	a1,(v_ring_end).w
		move.w	a1,(v_ring_end_p2).w
		rts	
; ===========================================================================

loc_16FDE:				
		lea	(v_ring_consumption_table).w,a2
		move.w	(a2)+,d1
		subq.w	#1,d1
		bcs.s	loc_17014

loc_16FE8:				
		move.w	(a2)+,d0
		beq.s	loc_16FE8
		movea.w	d0,a1
		subq.b	#1,(a1)
		bne.s	loc_17010
		move.b	#6,(a1)
		addq.b	#1,1(a1)
		cmpi.b	#8,1(a1)
		bne.s	loc_17010
		move.w	#-1,(a1)
		move.w	#0,-2(a2)
		subq.w	#1,(v_ring_consumption_table).w

loc_17010:				
		dbf	d1,loc_16FE8

loc_17014:				
		movea.w	(v_ring_start).w,a1
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_17028
		moveq	#1,d4
		bra.s	loc_17028
; ===========================================================================

loc_17024:				
		lea	6(a1),a1

loc_17028:				
		cmp.w	2(a1),d4
		bhi.s	loc_17024
		bra.s	loc_17032
; ===========================================================================

loc_17030:				
		subq.w	#6,a1

loc_17032:				
		cmp.w	-4(a1),d4
		bls.s	loc_17030
		move.w	a1,(v_ring_start).w
		movea.w	(v_ring_end).w,a2
		addi.w	#$150,d4
		bra.s	loc_1704A
; ===========================================================================

loc_17046:				
		lea	6(a2),a2

loc_1704A:				
		cmp.w	2(a2),d4
		bhi.s	loc_17046
		bra.s	loc_17054
; ===========================================================================

loc_17052:				
		subq.w	#6,a2

loc_17054:				
		cmp.w	-4(a2),d4
		bls.s	loc_17052
		move.w	a2,(v_ring_end).w

loc_1705E:
		tst.w	(f_two_player).w
		bne.s	loc_1706E
		move.w	a1,(v_ring_start_p2).w
		move.w	a2,(v_ring_end_p2).w
		rts	
; ===========================================================================

loc_1706E:				
		movea.w	(v_ring_start_p2).w,a1
		move.w	(v_camera_x_pos_p2).w,d4
		subq.w	#8,d4
		bhi.s	loc_17082
		moveq	#1,d4
		bra.s	loc_17082
; ===========================================================================

loc_1707E:				
		lea	6(a1),a1

loc_17082:				
		cmp.w	2(a1),d4
		bhi.s	loc_1707E
		bra.s	loc_1708C
; ===========================================================================

loc_1708A:				
		subq.w	#6,a1

loc_1708C:				
		cmp.w	-4(a1),d4
		bls.s	loc_1708A
		move.w	a1,(v_ring_start_p2).w
		movea.w	(v_ring_end_p2).w,a2
		addi.w	#$150,d4
		bra.s	loc_170A4
; ===========================================================================

loc_170A0:				
		lea	6(a2),a2

loc_170A4:				
		cmp.w	2(a2),d4
		bhi.s	loc_170A0
		bra.s	loc_170AE
; ===========================================================================

loc_170AC:				
		subq.w	#6,a2

loc_170AE:				
		cmp.w	-4(a2),d4
		bls.s	loc_170AC
		move.w	a2,(v_ring_end_p2).w
		rts	
; ===========================================================================
; loc_170BA: 
Touch_Rings:				
		movea.w	(v_ring_start).w,a1
		movea.w	(v_ring_end).w,a2
		cmpa.w	#-$5000,a0
		beq.s	loc_170D0
		movea.w	(v_ring_start_p2).w,a1
		movea.w	(v_ring_end_p2).w,a2

loc_170D0:				
		cmpa.l	a1,a2
		beq.w	locret_17166
		cmpi.w	#$5A,$30(a0) ; 'Z'
		bcc.w	locret_17166
		move.w	8(a0),d2
		move.w	$C(a0),d3
		subi.w	#8,d2
		moveq	#0,d5
		move.b	$16(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0) ; 'M'
		bne.s	loc_17104
		addi.w	#$C,d3
		moveq	#$A,d5

loc_17104:				
		move.w	#6,d1
		move.w	#$C,d6
		move.w	#$10,d4
		add.w	d5,d5

loc_17112:				
		tst.w	(a1)
		bne.w	loc_1715C
		move.w	2(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_1712A
		add.w	d6,d0
		bcs.s	loc_17130
		bra.w	loc_1715C
; ===========================================================================

loc_1712A:				
		cmp.w	d4,d0
		bhi.w	loc_1715C

loc_17130:				
		move.w	4(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_17142
		add.w	d6,d0
		bcs.s	loc_17148
		bra.w	loc_1715C
; ===========================================================================

loc_17142:				
		cmp.w	d5,d0
		bhi.w	loc_1715C

loc_17148:				
		move.w	#$604,(a1)
		bsr.s	loc_17168
		lea	(v_ring_consumption_table+2).w,a3

loc_17152:				
		tst.w	(a3)+
		bne.s	loc_17152
		move.w	a1,-(a3)
		addq.w	#1,(v_ring_consumption_table).w

loc_1715C:				
		lea	6(a1),a1
		cmpa.l	a1,a2
		bne.w	loc_17112

locret_17166:				
		rts	
; ===========================================================================

loc_17168:				
		subq.w	#1,(v_perfect_rings_left).w
		cmpa.w	#v_ost_maincharacter,a0
		beq.w	loc_11FC8
		bra.w	loc_1201E
; ===========================================================================

BuildRings:				
		movea.w	(v_ring_start).w,a0
		movea.w	(v_ring_end).w,a4
		cmpa.l	a0,a4
		bne.s	loc_17186
		rts	
; ===========================================================================

loc_17186:				
		lea	(v_camera_x_pos).w,a3

loc_1718A:				
		tst.w	(a0)
		bmi.w	loc_171EC
		move.w	2(a0),d3
		sub.w	(a3),d3
		addi.w	#$80,d3	
		move.w	4(a0),d2
		sub.w	4(a3),d2
		andi.w	#$7FF,d2
		addi.w	#8,d2
		bmi.s	loc_171EC
		cmpi.w	#$F0,d2	
		bge.s	loc_171EC
		addi.w	#$78,d2	; 'x'
		lea	(off_1736A).l,a1
		moveq	#0,d1
		move.b	1(a0),d1
		bne.s	loc_171C8
		move.b	(v_syncani_1_frame).w,d1

loc_171C8:				
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		move.w	(a1)+,d0
		addi.w	#$26BC,d0
		move.w	d0,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a2)+

loc_171EC:				
		lea	6(a0),a0
		cmpa.l	a0,a4
		bne.w	loc_1718A
		rts	
; ===========================================================================

loc_171F8:				
		lea	(v_camera_x_pos).w,a3
		move.w	#$78,d6	; 'x'
		movea.w	(v_ring_start).w,a0
		movea.w	(v_ring_end).w,a4
		cmpa.l	a0,a4
		bne.s	loc_17224
		rts	
; ===========================================================================

loc_1720E:				
		lea	(v_camera_x_pos_p2).w,a3
		move.w	#$158,d6
		movea.w	(v_ring_start_p2).w,a0
		movea.w	(v_ring_end_p2).w,a4
		cmpa.l	a0,a4
		bne.s	loc_17224
		rts	
; ===========================================================================

loc_17224:				
		tst.w	(a0)
		bmi.w	loc_17288
		move.w	2(a0),d3
		sub.w	(a3),d3
		addi.w	#$80,d3	
		move.w	4(a0),d2
		sub.w	4(a3),d2
		andi.w	#$7FF,d2
		addi.w	#$88,d2	
		bmi.s	loc_17288
		cmpi.w	#$170,d2
		bge.s	loc_17288
		add.w	d6,d2
		lea	(off_1736A).l,a1
		moveq	#0,d1
		move.b	1(a0),d1
		bne.s	loc_17260
		move.b	(v_syncani_1_frame).w,d1

loc_17260:				
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+
		move.b	(a1)+,d4
		move.b	byte_17294(pc,d4.w),(a2)+
		addq.b	#1,d5
		move.b	d5,(a2)+
		addq.w	#2,a1
		move.w	(a1)+,d0
		addi.w	#$235E,d0
		move.w	d0,(a2)+
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a2)+

loc_17288:				
		lea	6(a0),a0
		cmpa.l	a0,a4
		bne.w	loc_17224
		rts	
; ===========================================================================
byte_17294:	dc.b   0		; 0
		dc.b   0		; 1
		dc.b   1		; 2
		dc.b   1		; 3
		dc.b   4		; 4
		dc.b   4		; 5
		dc.b   5		; 6
		dc.b   5		; 7
		dc.b   8		; 8
		dc.b   8		; 9
		dc.b   9		; 10
		dc.b   9		; 11
		dc.b  $C		; 12
		dc.b  $C		; 13
		dc.b  $D		; 14
		dc.b  $D		; 15
; ===========================================================================

loc_172A4:				
		lea	(v_ring_positions).w,a1
		moveq	#0,d0
		move.w	#$17F,d1

loc_172AE:				
		move.l	d0,(a1)+
		dbf	d1,loc_172AE
		lea	(v_ring_consumption_table).w,a1
		move.w	#$F,d1

loc_172BC:				
		move.l	d0,(a1)+
		dbf	d1,loc_172BC
		moveq	#0,d5
		moveq	#0,d0
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(Off_Rings).l,a1
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		lea	($FFFFE806).w,a2

loc_172E0:				
		move.w	(a1)+,d2
		bmi.s	loc_17328
		move.w	(a1)+,d3
		bmi.s	loc_17308
		move.w	d3,d0
		rol.w	#4,d0
		andi.w	#7,d0
		andi.w	#$FFF,d3

loc_172F4:				
		move.w	#0,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addi.w	#$18,d2
		addq.w	#1,d5
		dbf	d0,loc_172F4
		bra.s	loc_172E0
; ===========================================================================

loc_17308:				
		move.w	d3,d0
		rol.w	#4,d0
		andi.w	#7,d0
		andi.w	#$FFF,d3

loc_17314:				
		move.w	#0,(a2)+
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		addi.w	#$18,d3
		addq.w	#1,d5
		dbf	d0,loc_17314
		bra.s	loc_172E0
; ===========================================================================

loc_17328:				
		move.w	d5,(v_perfect_rings_left).w
		move.w	#0,(f_ss_perfect).w
		moveq	#-1,d0
		move.l	d0,(a2)+
		lea	($FFFFE802).w,a1
		move.w	#$FE,d3	

loc_1733E:				
		move.w	d3,d4
		lea	6(a1),a2
		move.w	(a1),d0

loc_17346:				
		tst.w	(a2)
		beq.s	loc_17358
		cmp.w	(a2),d0
		bls.s	loc_17358
		move.l	(a1),d1
		move.l	(a2),d0
		move.l	d0,(a1)
		move.l	d1,(a2)
		swap	d0

loc_17358:				
		lea	6(a2),a2
		dbf	d4,loc_17346
		lea	6(a1),a1
		dbf	d3,loc_1733E
		rts	
; ===========================================================================
off_1736A:	dc.w byte_1737A-off_1736A; 0 
		dc.w byte_17382-off_1736A; 1
		dc.w byte_1738A-off_1736A; 2
		dc.w byte_17392-off_1736A; 3
		dc.w byte_1739A-off_1736A; 4
		dc.w byte_173A2-off_1736A; 5
		dc.w byte_173AA-off_1736A; 6
		dc.w byte_173B2-off_1736A; 7
byte_1737A:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   0		; 4
		dc.b   0		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
byte_17382:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b   0		; 2
		dc.b   4		; 3
		dc.b   0		; 4
		dc.b   2		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
byte_1738A:	dc.b $F8		; 0 
		dc.b   1		; 1
		dc.b   0		; 2
		dc.b   8		; 3
		dc.b   0		; 4
		dc.b   4		; 5
		dc.b $FF		; 6
		dc.b $FC		; 7
byte_17392:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b   8		; 2
		dc.b   4		; 3
		dc.b   8		; 4
		dc.b   2		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
byte_1739A:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b   0		; 2
		dc.b  $A		; 3
		dc.b   0		; 4
		dc.b   5		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
byte_173A2:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b $18		; 2
		dc.b  $A		; 3
		dc.b $18		; 4
		dc.b   5		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
byte_173AA:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b   8		; 2
		dc.b  $A		; 3
		dc.b   8		; 4
		dc.b   5		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
byte_173B2:	dc.b $F8		; 0 
		dc.b   5		; 1
		dc.b $10		; 2
		dc.b  $A		; 3
		dc.b $10		; 4
		dc.b   5		; 5
		dc.b $FF		; 6
		dc.b $F8		; 7
		dc.b   0		; 8
		dc.b   0		; 9
; ===========================================================================

; loc_173BC:
SpecialCNZBumpers:					
		moveq	#0,d0
		move.b	(v_cnz_bumper_routine).w,d0
		move.w	off_173CA(pc,d0.w),d0
		jmp	off_173CA(pc,d0.w)
; ===========================================================================
off_173CA:	dc.w loc_173CE-off_173CA; 0 
		dc.w loc_17422-off_173CA; 1
; ===========================================================================

loc_173CE:				
		addq.b	#2,(v_cnz_bumper_routine).w
		lea	(byte_1781A).l,a1
		tst.b	(v_act).w
		beq.s	loc_173E4
		lea	(byte_1795E).l,a1

loc_173E4:				
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_173F4
		moveq	#1,d4
		bra.s	loc_173F4
; ===========================================================================

loc_173F0:				
		lea	6(a1),a1

loc_173F4:				
		cmp.w	2(a1),d4
		bhi.s	loc_173F0
		move.l	a1,(v_cnz_visible_bumpers_start).w
		move.l	a1,(v_cnz_visible_bumpers_start_p2).w
		addi.w	#$150,d4
		bra.s	loc_1740C
; ===========================================================================

loc_17408:				
		lea	6(a1),a1

loc_1740C:				
		cmp.w	2(a1),d4
		bhi.s	loc_17408
		move.l	a1,(v_cnz_visible_bumpers_end).w
		move.l	a1,(v_cnz_visible_bumpers_end_p2).w
		move.b	#1,(f_unused_cnz_bumper_flag).w
		rts	
; ===========================================================================

loc_17422:				
		movea.l	(v_cnz_visible_bumpers_start).w,a1
		move.w	(v_camera_x_pos).w,d4
		subq.w	#8,d4
		bhi.s	loc_17436
		moveq	#1,d4
		bra.s	loc_17436
; ===========================================================================

loc_17432:				
		lea	6(a1),a1

loc_17436:				
		cmp.w	2(a1),d4
		bhi.s	loc_17432
		bra.s	loc_17440
; ===========================================================================

loc_1743E:				
		subq.w	#6,a1

loc_17440:				
		cmp.w	-4(a1),d4
		bls.s	loc_1743E
		move.l	a1,(v_cnz_visible_bumpers_start).w
		movea.l	(v_cnz_visible_bumpers_end).w,a2
		addi.w	#$150,d4
		bra.s	loc_17458
; ===========================================================================

loc_17454:				
		lea	6(a2),a2

loc_17458:				
		cmp.w	2(a2),d4
		bhi.s	loc_17454
		bra.s	loc_17462
; ===========================================================================

loc_17460:				
		subq.w	#6,a2

loc_17462:				
		cmp.w	-4(a2),d4
		bls.s	loc_17460
		move.l	a2,(v_cnz_visible_bumpers_end).w
		tst.w	(f_two_player).w
		bne.s	loc_1747C
		move.l	a1,(v_cnz_visible_bumpers_start_p2).w
		move.l	a2,(v_cnz_visible_bumpers_end_p2).w
		rts	
; ===========================================================================

loc_1747C:				
		movea.l	(v_cnz_visible_bumpers_start_p2).w,a1
		move.w	(v_camera_x_pos_p2).w,d4
		subq.w	#8,d4
		bhi.s	loc_17490
		moveq	#1,d4
		bra.s	loc_17490
; ===========================================================================

loc_1748C:				
		lea	6(a1),a1

loc_17490:				
		cmp.w	2(a1),d4
		bhi.s	loc_1748C
		bra.s	loc_1749A
; ===========================================================================

loc_17498:				
		subq.w	#6,a1

loc_1749A:				
		cmp.w	-4(a1),d4
		bls.s	loc_17498
		move.l	a1,(v_cnz_visible_bumpers_start_p2).w
		movea.l	(v_cnz_visible_bumpers_end_p2).w,a2
		addi.w	#$150,d4
		bra.s	loc_174B2
; ===========================================================================

loc_174AE:				
		lea	6(a2),a2

loc_174B2:				
		cmp.w	2(a2),d4
		bhi.s	loc_174AE
		bra.s	loc_174BC
; ===========================================================================

loc_174BA:				
		subq.w	#6,a2

loc_174BC:				
		cmp.w	-4(a2),d4
		bls.s	loc_174BA
		move.l	a2,(v_cnz_visible_bumpers_end_p2).w
		rts	
; ===========================================================================

loc_174C8:				
		movea.l	(v_cnz_visible_bumpers_start).w,a1
		movea.l	(v_cnz_visible_bumpers_end).w,a2
		cmpa.w	#-$5000,a0
		beq.s	loc_174DE
		movea.l	(v_cnz_visible_bumpers_start_p2).w,a1
		movea.l	(v_cnz_visible_bumpers_end_p2).w,a2

loc_174DE:				
		cmpa.l	a1,a2
		beq.w	locret_17578
		move.w	8(a0),d2
		move.w	$C(a0),d3
		subi.w	#9,d2
		moveq	#0,d5
		move.b	$16(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0) ; 'M'
		bne.s	loc_17508
		addi.w	#$C,d3
		moveq	#$A,d5

loc_17508:				
		move.w	#$12,d4
		add.w	d5,d5

loc_1750E:				
		move.w	(a1),d0
		andi.w	#$E,d0
		lea	byte_17558(pc,d0.w),a3
		moveq	#0,d1
		move.b	(a3)+,d1
		move.w	2(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_17530
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_17536
		bra.w	loc_1756E
; ===========================================================================

loc_17530:				
		cmp.w	d4,d0
		bhi.w	loc_1756E

loc_17536:				
		moveq	#0,d1
		move.b	(a3)+,d1
		move.w	4(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_17550
		add.w	d1,d1
		add.w	d1,d0
		bcs.w	loc_17564
		bra.w	loc_1756E
; ===========================================================================

loc_17550:				
		cmp.w	d5,d0
		bhi.w	loc_1756E
		bra.s	loc_17564
; ===========================================================================
byte_17558:	dc.b $20		; 0
		dc.b $20		; 1
		dc.b $20		; 2
		dc.b $20		; 3
		dc.b $40		; 4
		dc.b   8		; 5
		dc.b $40		; 6
		dc.b   8		; 7
		dc.b   8		; 8
		dc.b $40		; 9
		dc.b   8		; 10
		dc.b $40		; 11
; ===========================================================================

loc_17564:				
		move.w	(a1),d0
		move.w	off_1757A(pc,d0.w),d0
		jmp	off_1757A(pc,d0.w)
; ===========================================================================

loc_1756E:				
		lea	6(a1),a1
		cmpa.l	a1,a2
		bne.w	loc_1750E

locret_17578:				
		rts	
; ===========================================================================
off_1757A:	dc.w loc_17586-off_1757A; 0 
		dc.w loc_17638-off_1757A; 1
		dc.w loc_1769E-off_1757A; 2
		dc.w loc_176F6-off_1757A; 3
		dc.w loc_1774C-off_1757A; 4
		dc.w loc_177A4-off_1757A; 5
; ===========================================================================

loc_17586:				
		move.w	4(a1),d0
		sub.w	$C(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0	; ' '
		blt.s	loc_175A0
		move.w	#$A00,$12(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_175A0:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0	; ' '
		blt.s	loc_175BA
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_175BA:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#$20,d0	; ' '
		blt.s	loc_175CC
		move.w	#$20,d0	; ' '

loc_175CC:				
		add.w	4(a1),d0
		subq.w	#8,d0
		move.w	$C(a0),d1
		addi.w	#$E,d1
		sub.w	d1,d0
		bcc.s	locret_175E8
		move.w	#$20,d3	; ' '
		bsr.s	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

locret_175E8:				
		rts	
; ===========================================================================

loc_175EA:				
		move.w	$10(a0),d1
		move.w	$12(a0),d2
		jsr	(CalcAngle).l
		move.b	d0,(v_cnz_bumper_debug1).w
		sub.w	d3,d0
		move.w	d0,d1
		bpl.s	loc_17604
		neg.w	d1

loc_17604:				
		neg.w	d0
		add.w	d3,d0
		move.b	d0,(v_cnz_bumper_debug2).w
		move.b	d1,(v_cnz_bumper_debug4).w
		cmpi.b	#$38,d1	; '8'
		bcs.s	loc_17618
		move.w	d3,d0

loc_17618:				
		move.b	d0,(v_cnz_bumper_debug3).w
		jsr	(CalcSine).l
		muls.w	#-$A00,d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	#-$A00,d0
		asr.l	#8,d0
		move.w	d0,$12(a0)
		rts	
; ===========================================================================

loc_17638:				
		move.w	4(a1),d0
		sub.w	$C(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0	; ' '
		blt.s	loc_17652
		move.w	#$A00,$12(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17652:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#$20,d0	; ' '
		blt.s	loc_1766A
		move.w	#-$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_1766A:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		neg.w	d0
		cmpi.w	#$20,d0	; ' '
		blt.s	loc_1767E
		move.w	#$20,d0	; ' '

loc_1767E:				
		add.w	4(a1),d0
		subq.w	#8,d0
		move.w	$C(a0),d1
		addi.w	#$E,d1
		sub.w	d1,d0
		bcc.s	locret_1769C
		move.w	#$60,d3	; '`'
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

locret_1769C:				
		rts	
; ===========================================================================

loc_1769E:				
		move.w	4(a1),d0
		sub.w	$C(a0),d0
		neg.w	d0
		cmpi.w	#8,d0
		blt.s	loc_176B8
		move.w	#$A00,$12(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_176B8:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_176D0
		move.w	#-$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_176D0:				
		neg.w	d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_176E2
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_176E2:				
		move.w	#$38,d3	; '8'
		tst.w	d0
		bmi.s	loc_176EE
		move.w	#$48,d3	; 'H'

loc_176EE:				
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

loc_176F6:				
		move.w	4(a1),d0
		sub.w	$C(a0),d0
		cmpi.w	#8,d0
		blt.s	loc_1770E
		move.w	#-$A00,$12(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_1770E:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_17726
		move.w	#-$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17726:				
		neg.w	d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_17738
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17738:				
		move.w	#$C8,d3	
		tst.w	d0
		bmi.s	loc_17744
		move.w	#$B8,d3	

loc_17744:				
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

loc_1774C:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		neg.w	d0
		cmpi.w	#8,d0
		blt.s	loc_17766
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17766:				
		move.w	4(a1),d0
		sub.w	$C(a0),d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_1777E
		move.w	#-$A00,$12(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_1777E:				
		neg.w	d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_17790
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_17790:				
		move.w	#8,d3
		tst.w	d0
		bmi.s	loc_1779C
		move.w	#$F8,d3	

loc_1779C:				
		bsr.w	loc_175EA
		bra.w	loc_177FA
; ===========================================================================

loc_177A4:				
		move.w	2(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#8,d0
		blt.s	loc_177BC
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_177BC:				
		move.w	4(a1),d0
		sub.w	$C(a0),d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_177D4
		move.w	#-$A00,$12(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_177D4:				
		neg.w	d0
		cmpi.w	#$40,d0	; '@'
		blt.s	loc_177E6
		move.w	#$A00,$10(a0)
		bra.w	loc_177FA
; ===========================================================================

loc_177E6:				
		move.w	#$78,d3	; 'x'
		tst.w	d0
		bmi.s	loc_177F2
		move.w	#$88,d3	

loc_177F2:				
		bsr.w	loc_175EA
		bra.w	*+4

loc_177FA:				
		bset	#1,$22(a0)
		bclr	#4,$22(a0)
		bclr	#5,$22(a0)
		clr.b	$3C(a0)
		move.w	#$D9,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_1781A:	
    if FixBugs
	; Sonic Team forgot to start this file with a boundary marker,
	; meaning the game could potentially read past the start of the file
	; and load random bumpers.
		dc.w	$0000, $0000, $0000
   	endc	
		incbin	"level/objects/CNZ 1 Bumpers.bin"

byte_1795E:		
		incbin	"level/objects/CNZ 2 Bumpers.bin"
; ===========================================================================

	if Revision<2
		nop	
	endc



; ===========================================================================
; ---------------------------------------------------------------------------
; Objects Manager
; Subroutine that keeps track of any objects that need to remember
; their state, such as monitors or enemies.
;
; input variables:
;  -none-
;
; writes:
;  d0, d1
;  d2 = respawn index of object to load
;  d6 = camera position
;
;  a0 = address in object placement list
;  a2 = respawn table
; ---------------------------------------------------------------------------

; loc_17AA4: ObjectsManager:
ObjPosLoad:								
		moveq	#0,d0
		move.b	(v_opl_routine).w,d0
		move.w	OPL_Index(pc,d0.w),d0
		jmp	OPL_Index(pc,d0.w)
; ===========================================================================
; ObjectsManager_States:
OPL_Index:	
		dc.w OPL_Init-OPL_Index; 0 
		dc.w loc_17B84-OPL_Index; 1
		dc.w loc_17CCC-OPL_Index; 2
; ===========================================================================
; loc_17AB8: ObjectsManager_Init:
OPL_Init:				
		addq.b	#2,(v_opl_routine).w
		move.w	(v_zone).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(Off_Sprites).l,a0
		movea.l	a0,a1
		adda.w	(a0,d0.w),a0
		tst.w	(f_two_player).w
		beq.s	loc_17AF0
		cmpi.b	#$C,(v_zone).w
		bne.s	loc_17AF0
		lea	(Objects_CNZ1_2P).l,a0
		tst.b	(v_act).w
		beq.s	loc_17AF0
		lea	(Objects_CNZ2_2P).l,a0

loc_17AF0:				
		move.l	a0,(v_opl_ptr_right).w
		move.l	a0,(v_opl_ptr_left).w
		move.l	a0,(v_opl_ptr_right_p2).w
		move.l	a0,(v_opl_ptr_left_p2).w
		lea	(v_respawn_list).w,a2
		move.w	#$101,(a2)+
		move.w	#$5E,d0	; '^'

loc_17B0C:				
		clr.l	(a2)+
		dbf	d0,loc_17B0C
		lea	(v_respawn_list).w,a2
		moveq	#0,d2
		move.w	(v_camera_x_pos).w,d6
		subi.w	#$80,d6	
		bcc.s	loc_17B24
		moveq	#0,d6

loc_17B24:				
		andi.w	#-$80,d6
		movea.l	(v_opl_ptr_right).w,a0

loc_17B2C:				
		cmp.w	(a0),d6
		bls.s	loc_17B3E
		tst.b	2(a0)
		bpl.s	loc_17B3A
		move.b	(a2),d2
		addq.b	#1,(a2)

loc_17B3A:				
		addq.w	#6,a0
		bra.s	loc_17B2C
; ===========================================================================

loc_17B3E:				
		move.l	a0,(v_opl_ptr_right).w
		move.l	a0,(v_opl_ptr_right_p2).w
		movea.l	(v_opl_ptr_left).w,a0
		subi.w	#$80,d6	
		bcs.s	loc_17B62

loc_17B50:				
		cmp.w	(a0),d6
		bls.s	loc_17B62
		tst.b	2(a0)
		bpl.s	loc_17B5E
		addq.b	#1,1(a2)

loc_17B5E:				
		addq.w	#6,a0
		bra.s	loc_17B50
; ===========================================================================

loc_17B62:				
		move.l	a0,(v_opl_ptr_left).w
		move.l	a0,(v_opl_ptr_left_p2).w
		move.w	#-1,(v_opl_screen_x_pos).w
		move.w	#-1,(v_opl_screen_x_pos_p2).w
		tst.w	(f_two_player).w
		beq.s	loc_17B84
		addq.b	#2,(v_opl_routine).w
		bra.w	loc_17C50
; ===========================================================================

loc_17B84:				
					
		move.w	(v_camera_x_pos).w,d1
		subi.w	#$80,d1	
		andi.w	#-$80,d1
		move.w	d1,(v_camera_x_pos_coarse).w
		lea	(v_respawn_list).w,a2
		moveq	#0,d2
		move.w	(v_camera_x_pos).w,d6
		andi.w	#-$80,d6
		cmp.w	(v_opl_screen_x_pos).w,d6
		beq.w	locret_17C4E
		bge.s	loc_17C0A
		move.w	d6,(v_opl_screen_x_pos).w
		movea.l	(v_opl_ptr_left).w,a0
		subi.w	#$80,d6	
		bcs.s	loc_17BE6

loc_17BBA:				
		cmp.w	-6(a0),d6
		bge.s	loc_17BE6
		subq.w	#6,a0
		tst.b	2(a0)
		bpl.s	loc_17BD0
		subq.b	#1,1(a2)
		move.b	1(a2),d2

loc_17BD0:				
		bsr.w	loc_17F36
		bne.s	loc_17BDA
		subq.w	#6,a0
		bra.s	loc_17BBA
; ===========================================================================

loc_17BDA:				
		tst.b	2(a0)
		bpl.s	loc_17BE4
		addq.b	#1,1(a2)

loc_17BE4:				
		addq.w	#6,a0

loc_17BE6:				
		move.l	a0,(v_opl_ptr_left).w
		movea.l	(v_opl_ptr_right).w,a0
		addi.w	#$300,d6

loc_17BF2:				
		cmp.w	-6(a0),d6
		bgt.s	loc_17C04
		tst.b	-4(a0)
		bpl.s	loc_17C00
		subq.b	#1,(a2)

loc_17C00:				
		subq.w	#6,a0
		bra.s	loc_17BF2
; ===========================================================================

loc_17C04:				
		move.l	a0,(v_opl_ptr_right).w
		rts	
; ===========================================================================

loc_17C0A:				
		move.w	d6,(v_opl_screen_x_pos).w
		movea.l	(v_opl_ptr_right).w,a0
		addi.w	#$280,d6

loc_17C16:				
		cmp.w	(a0),d6
		bls.s	loc_17C2A
		tst.b	2(a0)
		bpl.s	loc_17C24
		move.b	(a2),d2
		addq.b	#1,(a2)

loc_17C24:				
		bsr.w	loc_17F36
		beq.s	loc_17C16

loc_17C2A:				
		move.l	a0,(v_opl_ptr_right).w
		movea.l	(v_opl_ptr_left).w,a0
		subi.w	#$300,d6
		bcs.s	loc_17C4A

loc_17C38:				
		cmp.w	(a0),d6
		bls.s	loc_17C4A
		tst.b	2(a0)
		bpl.s	loc_17C46
		addq.b	#1,1(a2)

loc_17C46:				
		addq.w	#6,a0
		bra.s	loc_17C38
; ===========================================================================

loc_17C4A:				
		move.l	a0,(v_opl_ptr_left).w

locret_17C4E:				
		rts	
; ===========================================================================

loc_17C50:				
		moveq	#-1,d0 	; Reset all of the 2P object manager variables to $FF.
		move.l	d0,(v_opl_ram_block_indices).w
		move.l	d0,(v_opl_ram_block_indices+4).w
		move.l	d0,(v_opl_ram_block_indices+8).w
		move.l	d0,(v_opl_screen_x_pos_p2).w
		move.w	#0,(v_opl_screen_x_pos).w
		move.w	#0,(v_opl_screen_x_pos_p2).w
		lea	(v_respawn_list).w,a2
		move.w	(a2),(v_respawn_list_p2).w
		moveq	#0,d2
		lea	(v_respawn_list).w,a5
		lea	(v_opl_ptr_right).w,a4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		lea	(v_opl_loaded_object_blocks_p2).w,a6
		moveq	#-2,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		moveq	#-1,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		moveq	#0,d6
		bsr.w	loc_17DE4
		lea	(v_respawn_list_p2).w,a5
		lea	(v_opl_ptr_right_p2).w,a4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		lea	(v_opl_loaded_object_blocks_p1).w,a6
		moveq	#-2,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		moveq	#-1,d6
		bsr.w	loc_17DE4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		moveq	#0,d6
		bsr.w	loc_17DE4

loc_17CCC:				
		move.w	(v_camera_x_pos).w,d1
		andi.w	#-$100,d1
		move.w	d1,(v_camera_x_pos_coarse).w
		move.w	(v_camera_x_pos_p2).w,d1
		andi.w	#-$100,d1
		move.w	d1,(v_camera_x_pos_coarse_p2).w
		move.b	(v_camera_x_pos).w,d6
		andi.w	#$FF,d6
		move.w	(v_opl_screen_x_pos).w,d0
		cmp.w	(v_opl_screen_x_pos).w,d6
		beq.s	loc_17D0C
		move.w	d6,(v_opl_screen_x_pos).w
		lea	(v_respawn_list).w,a5
		lea	(v_opl_ptr_right).w,a4
		lea	(v_opl_loaded_object_blocks_p1).w,a1
		lea	(v_opl_loaded_object_blocks_p2).w,a6
		bsr.s	loc_17D36

loc_17D0C:				
		move.b	(v_camera_x_pos_p2).w,d6
		andi.w	#$FF,d6
		move.w	(v_opl_screen_x_pos_p2).w,d0
		cmp.w	(v_opl_screen_x_pos_p2).w,d6
		beq.s	locret_17D34
		move.w	d6,(v_opl_screen_x_pos_p2).w
		lea	(v_respawn_list_p2).w,a5
		lea	(v_opl_ptr_right_p2).w,a4
		lea	(v_opl_loaded_object_blocks_p2).w,a1
		lea	(v_opl_loaded_object_blocks_p1).w,a6
		bsr.s	loc_17D36

locret_17D34:				
		rts	
; ===========================================================================

loc_17D36:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d2
		cmp.w	d0,d6
		beq.w	locret_17C4E
		bge.w	loc_17DE4
		move.b	2(a1),d2
		move.b	1(a1),2(a1)
		move.b	(a1),1(a1)
		move.b	d6,(a1)
		cmp.b	(a6),d2
		beq.s	loc_17D6C
		cmp.b	1(a6),d2
		beq.s	loc_17D6C
		cmp.b	2(a6),d2
		beq.s	loc_17D6C
		bsr.w	loc_17EC6
		bra.s	loc_17D70
; ===========================================================================

loc_17D6C:				
		bsr.w	loc_17E8A

loc_17D70:				
		bsr.w	loc_17E66
		bne.s	loc_17D94
		movea.l	4(a4),a0

loc_17D7A:				
		cmp.b	-6(a0),d6
		bne.s	loc_17D8E
		tst.b	-4(a0)
		bpl.s	loc_17D8A
		subq.b	#1,1(a5)

loc_17D8A:				
		subq.w	#6,a0
		bra.s	loc_17D7A
; ===========================================================================

loc_17D8E:				
		move.l	a0,4(a4)
		bra.s	loc_17DCA
; ===========================================================================

loc_17D94:				
		movea.l	4(a4),a0
		move.b	d6,(a1)

loc_17D9A:				
		cmp.b	-6(a0),d6
		bne.s	loc_17DC6
		subq.w	#6,a0
		tst.b	2(a0)
		bpl.s	loc_17DB0
		subq.b	#1,1(a5)
		move.b	1(a5),d2

loc_17DB0:				
		bsr.w	loc_17F80
		bne.s	loc_17DBA
		subq.w	#6,a0
		bra.s	loc_17D9A
; ===========================================================================

loc_17DBA:				
		tst.b	2(a0)
		bpl.s	loc_17DC4
		addq.b	#1,1(a5)

loc_17DC4:				
		addq.w	#6,a0

loc_17DC6:				
		move.l	a0,4(a4)

loc_17DCA:				
		movea.l	(a4),a0
		addq.w	#3,d6

loc_17DCE:				
		cmp.b	-6(a0),d6
		bne.s	loc_17DE0
		tst.b	-4(a0)
		bpl.s	loc_17DDC
		subq.b	#1,(a5)

loc_17DDC:				
		subq.w	#6,a0
		bra.s	loc_17DCE
; ===========================================================================

loc_17DE0:				
		move.l	a0,(a4)
		rts	
; ===========================================================================

loc_17DE4:				
		addq.w	#2,d6
		move.b	(a1),d2
		move.b	1(a1),(a1)
		move.b	2(a1),1(a1)
		move.b	d6,2(a1)
		cmp.b	(a6),d2
		beq.s	loc_17E0C
		cmp.b	1(a6),d2
		beq.s	loc_17E0C
		cmp.b	2(a6),d2
		beq.s	loc_17E0C
		bsr.w	loc_17EC6
		bra.s	loc_17E10
; ===========================================================================

loc_17E0C:				
		bsr.w	loc_17E8A

loc_17E10:				
		bsr.w	loc_17E66
		bne.s	loc_17E2C
		movea.l	(a4),a0

loc_17E18:				
		cmp.b	(a0),d6
		bne.s	loc_17E28
		tst.b	2(a0)
		bpl.s	loc_17E24
		addq.b	#1,(a5)

loc_17E24:				
		addq.w	#6,a0
		bra.s	loc_17E18
; ===========================================================================

loc_17E28:				
		move.l	a0,(a4)
		bra.s	loc_17E46
; ===========================================================================

loc_17E2C:				
		movea.l	(a4),a0
		move.b	d6,(a1)

loc_17E30:				
		cmp.b	(a0),d6
		bne.s	loc_17E44
		tst.b	2(a0)
		bpl.s	loc_17E3E
		move.b	(a5),d2
		addq.b	#1,(a5)

loc_17E3E:				
		bsr.w	loc_17F80
		beq.s	loc_17E30

loc_17E44:				
		move.l	a0,(a4)

loc_17E46:				
		movea.l	4(a4),a0
		subq.w	#3,d6
		bcs.s	loc_17E60

loc_17E4E:				
		cmp.b	(a0),d6
		bne.s	loc_17E60
		tst.b	2(a0)
		bpl.s	loc_17E5C
		addq.b	#1,1(a5)

loc_17E5C:				
		addq.w	#6,a0
		bra.s	loc_17E4E
; ===========================================================================

loc_17E60:				
		move.l	a0,4(a4)
		rts	
; ===========================================================================

loc_17E66:				
		move.l	a1,-(sp)
		lea	(v_opl_ram_block_indices).w,a1
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		cmp.b	(a1)+,d6
		beq.s	loc_17E86
		moveq	#1,d0

loc_17E86:				
		movea.l	(sp)+,a1
		rts	
; ===========================================================================

loc_17E8A:				
		lea	(v_opl_ram_block_indices).w,a1
		lea	($FFFFBE00).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFC100).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFC400).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFC700).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFCA00).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		lea	($FFFFCD00).w,a3
		tst.b	(a1)+
		bmi.s	loc_17EC2
		nop	
		nop	

loc_17EC2:				
		subq.w	#1,a1
		rts	
; ===========================================================================

loc_17EC6:				
		lea	(v_opl_ram_block_indices).w,a1
		lea	($FFFFBE00).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFC100).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFC400).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFC700).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFCA00).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		lea	($FFFFCD00).w,a3
		cmp.b	(a1)+,d2
		beq.s	loc_17EFE
		nop	
		nop	

loc_17EFE:				
		move.b	#-1,-(a1)
		movem.l	a1/a3,-(sp)
		moveq	#0,d1
		moveq	#$B,d2

loc_17F0A:				
		tst.b	(a3)
		beq.s	loc_17F26
		movea.l	a3,a1
		moveq	#0,d0
		move.b	$23(a1),d0
		beq.s	loc_17F1E
		bclr	#7,2(a2,d0.w)

loc_17F1E:				
		moveq	#$F,d0

loc_17F20:				
		move.l	d1,(a1)+
		dbf	d0,loc_17F20

loc_17F26:				
		lea	$40(a3),a3
		dbf	d2,loc_17F0A
		moveq	#0,d2
		movem.l	(sp)+,a1/a3
		rts	
; ===========================================================================

loc_17F36:				
		tst.b	2(a0)
		bpl.s	loc_17F4A
		bset	#7,2(a2,d2.w)
		beq.s	loc_17F4A
		addq.w	#6,a0
		moveq	#0,d0
		rts	
; ===========================================================================

loc_17F4A:				
		bsr.w	SingleObjLoad
		bne.s	locret_17F7E
		move.w	(a0)+,8(a1)
		move.w	(a0)+,d0
		bpl.s	loc_17F5C
		move.b	d2,$23(a1)

loc_17F5C:				
		move.w	d0,d1
		andi.w	#$FFF,d0
		move.w	d0,$C(a1)
		rol.w	#3,d1
		andi.b	#3,d1
		move.b	d1,1(a1)
		move.b	d1,$22(a1)
		_move.b	(a0)+,ost_id(a1)
		move.b	(a0)+,$28(a1)
		moveq	#0,d0

locret_17F7E:				
		rts	
; ===========================================================================

loc_17F80:				
		tst.b	2(a0)
		bpl.s	loc_17F94
		bset	#7,2(a2,d2.w)
		beq.s	loc_17F94
		addq.w	#6,a0
		moveq	#0,d0
		rts	
; ===========================================================================

loc_17F94:				
		btst	#4,2(a0)
		beq.s	loc_17FA4
		bsr.w	SingleObjLoad
		bne.s	locret_17FD8
		bra.s	loc_17FAA
; ===========================================================================

loc_17FA4:				
		bsr.w	SingleObjLoad3
		bne.s	locret_17FD8

loc_17FAA:				
		move.w	(a0)+,8(a1)
		move.w	(a0)+,d0
		bpl.s	loc_17FB6
		move.b	d2,$23(a1)

loc_17FB6:				
		move.w	d0,d1
		andi.w	#$FFF,d0
		move.w	d0,$C(a1)
		rol.w	#3,d1
		andi.b	#3,d1
		move.b	d1,1(a1)
		move.b	d1,$22(a1)
		_move.b	(a0)+,0(a1)
		move.b	(a0)+,$28(a1)
		moveq	#0,d0

locret_17FD8:				
		rts	
; ===========================================================================
; Single object loading subroutine
; Find an empty object array
; ---------------------------------------------------------------------------
; loc_17FDA: ; allocObject:
SingleObjLoad:				
		lea	($FFFFB400).w,a1 	; a1=object
		move.w	#$6F,d0 		; search to end of table
		tst.w	(f_two_player).w
		beq.s	.loop
		move.w	#$27,d0 		; search to $BF00 exclusive

	.loop:				
		tst.b	(a1)	; is object RAM slot empty?
		beq.s	.return		; if yes, branch
		lea	$40(a1),a1 		; load obj address ; goto next object RAM slot
		dbf	d0,.loop		; repeat until end

	.return:				
		rts	
; ===========================================================================
; Single object loading subroutine
; Find an empty object array AFTER the current one in the table
; ---------------------------------------------------------------------------
; loc_17FFA: ; allocObjectAfterCurrent:
SingleObjLoad2:				
		movea.l	a0,a1
		move.w	#-$3000,d0
		sub.w	a0,d0
		lsr.w	#6,d0
		subq.w	#1,d0
		bcs.s	locret_18014

	loc_18008:				
		tst.b	(a1)
		beq.s	locret_18014
		lea	$40(a1),a1
		dbf	d0,loc_18008

	locret_18014:				
		rts	
; ===========================================================================
; Single object loading subroutine
; Find an empty object at or within < 12 slots after a3
; ---------------------------------------------------------------------------
; loc_18016:
SingleObjLoad3:				
		movea.l	a3,a1
		move.w	#$B,d0

	loc_1801C:				
		tst.b	(a1)
		beq.s	locret_18028
		lea	$40(a1),a1
		dbf	d0,loc_1801C

	locret_18028:				
		rts	
; ===========================================================================

    if FixBugs
	; Sonic Team forgot to put a boundary marker here, meaning the game
	; could potentially read past the start of the file and load random
	; objects.
		endobj
    endif
    
	if Revision=0
Objects_CNZ1_2P:	incbin	"level/objects/CNZ 1 2P (REV00).bin"
	else
	; a Crawl badnik was moved slightly further away from a ledge
    ; 2 flippers were moved closer to a wall
Objects_CNZ1_2P:	incbin	"level/objects/CNZ 1 2P.bin"
	endc
	
		endobj
	
	if Revision=0
Objects_CNZ2_2P:	incbin	"level/objects/CNZ22P (REV00).bin"
	else	
	; 4 Crawl badniks were slightly moved, placing them closer/farther away from ledges
    ; 2 flippers were moved away from a wall to keep players from getting stuck behind them
Objects_CNZ2_2P:	incbin	"level/objects/CNZ 2 2P.bin"
	endc

		endobj
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 41 - Spring
; ----------------------------------------------------------------------------

Springs:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1889C(pc,d0.w),d1
		jsr	off_1889C(pc,d1.w)
		jmp	MarkObjGone
; ===========================================================================
off_1889C:	dc.w loc_188A8-off_1889C; 0 
		dc.w loc_18980-off_1889C; 1
		dc.w loc_18A70-off_1889C; 2
		dc.w loc_18C80-off_1889C; 3
		dc.w loc_18D6A-off_1889C; 4
		dc.w loc_18E9E-off_1889C; 5
; ===========================================================================

loc_188A8:				
		addq.b	#2,$24(a0)
		move.l	#Map_1901C,4(a0)
		move.w	#$45C,2(a0)
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_188DE(pc,d0.w),d0
		jmp	off_188DE(pc,d0.w)
; ===========================================================================
off_188DE:	dc.w loc_18954-off_188DE; 0 
		dc.w loc_188E8-off_188DE; 1
		dc.w loc_18908-off_188DE; 2
		dc.w loc_1891C-off_188DE; 3
		dc.w loc_18936-off_188DE; 4
; ===========================================================================

loc_188E8:				
		move.b	#4,$24(a0)
		move.b	#2,$1C(a0)
		move.b	#3,$1A(a0)
		move.w	#$470,2(a0)
		move.b	#8,$19(a0)
		bra.s	loc_18954
; ===========================================================================

loc_18908:				
		move.b	#6,$24(a0)
		move.b	#6,$1A(a0)
		bset	#1,$22(a0)
		bra.s	loc_18954
; ===========================================================================

loc_1891C:				
		move.b	#8,$24(a0)
		move.b	#4,$1C(a0)
		move.b	#7,$1A(a0)
		move.w	#$43C,2(a0)
		bra.s	loc_18954
; ===========================================================================

loc_18936:				
		move.b	#$A,$24(a0)
		move.b	#4,$1C(a0)
		move.b	#$A,$1A(a0)
		move.w	#$43C,2(a0)
		bset	#1,$22(a0)

loc_18954:				
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_1897C(pc,d0.w),$30(a0)
		btst	#1,d0
		beq.s	loc_18976
		bset	#5,2(a0)
		move.l	#Map_19032,4(a0)

loc_18976:				
		bsr.w	Adjust2PArtPointer
		rts	
; ===========================================================================
word_1897C:	dc.w $F000		; 0
		dc.w $F600		; 1
; ===========================================================================

loc_18980:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_1978E
		btst	#3,$22(a0)
		beq.s	loc_189A8
		bsr.s	loc_189CA

loc_189A8:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_1978E
		btst	#4,$22(a0)
		beq.s	loc_189C0
		bsr.s	loc_189CA

loc_189C0:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_189CA:				
		move.w	#$100,$1C(a0)
		addq.w	#8,$C(a1)
		move.w	$30(a0),$12(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		bpl.s	loc_189FE
		move.w	#0,$10(a1)

loc_189FE:				
		btst	#0,d0
		beq.s	loc_18A3E
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_18A2E
		move.b	#1,$2C(a1)

loc_18A2E:				
		btst	#0,$22(a1)
		beq.s	loc_18A3E
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_18A3E:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18A54
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18A54:				
		cmpi.b	#8,d0
		bne.s	loc_18A66
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18A66:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_18A70:				
		move.w	#$13,d1
		move.w	#$E,d2
		move.w	#$F,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_1978E
		btst	#5,$22(a0)
		beq.s	loc_18AB0
		move.b	$22(a0),d1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcs.s	loc_18AA8
		eori.b	#1,d1

loc_18AA8:				
		andi.b	#1,d1
		bne.s	loc_18AB0
		bsr.s	loc_18AEE

loc_18AB0:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_1978E
		btst	#6,$22(a0)
		beq.s	loc_18AE0
		move.b	$22(a0),d1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcs.s	loc_18AD8
		eori.b	#1,d1

loc_18AD8:				
		andi.b	#1,d1
		bne.s	loc_18AE0
		bsr.s	loc_18AEE

loc_18AE0:				
		bsr.w	loc_18BC6
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_18AEE:				
		move.w	#$300,$1C(a0)
		move.w	$30(a0),$10(a1)
		addq.w	#8,8(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_18B1C
		bclr	#0,$22(a1)
		subi.w	#$10,8(a1)
		neg.w	$10(a1)

loc_18B1C:				
		move.w	#$F,$2E(a1)
		move.w	$10(a1),$14(a1)
		btst	#2,$22(a1)
		bne.s	loc_18B36
		move.b	#0,$1C(a1)

loc_18B36:				
		move.b	$28(a0),d0
		bpl.s	loc_18B42
		move.w	#0,$12(a1)

loc_18B42:				
		btst	#0,d0
		beq.s	loc_18B82
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_18B72
		move.b	#3,$2C(a1)

loc_18B72:				
		btst	#0,$22(a1)
		beq.s	loc_18B82
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_18B82:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18B98
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18B98:				
		cmpi.b	#8,d0
		bne.s	loc_18BAA
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18BAA:				
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_18BC6:				
		cmpi.b	#3,$1C(a0)
		beq.w	locret_18C7E
		move.w	8(a0),d0
		move.w	d0,d1
		addi.w	#$28,d1	; '('
		btst	#0,$22(a0)
		beq.s	loc_18BE8
		move.w	d0,d1
		subi.w	#$28,d0	; '('

loc_18BE8:				
		move.w	$C(a0),d2
		move.w	d2,d3
		subi.w	#$18,d2
		addi.w	#$18,d3
		lea	($FFFFB000).w,a1
		btst	#1,$22(a1)
		bne.s	loc_18C3C
		move.w	$14(a1),d4
		btst	#0,$22(a0)
		beq.s	loc_18C10
		neg.w	d4

loc_18C10:				
		tst.w	d4
		bmi.s	loc_18C3C
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_18C3C
		cmp.w	d1,d4
		bcc.w	loc_18C3C
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_18C3C
		cmp.w	d3,d4
		bcc.w	loc_18C3C
		move.w	d0,-(sp)
		bsr.w	loc_18AEE
		move.w	(sp)+,d0

loc_18C3C:				
		lea	($FFFFB040).w,a1
		btst	#1,$22(a1)
		bne.s	locret_18C7E
		move.w	$14(a1),d4
		btst	#0,$22(a0)
		beq.s	loc_18C56
		neg.w	d4

loc_18C56:				
		tst.w	d4
		bmi.s	locret_18C7E
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	locret_18C7E
		cmp.w	d1,d4
		bcc.w	locret_18C7E
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	locret_18C7E
		cmp.w	d3,d4
		bcc.w	locret_18C7E
		bsr.w	loc_18AEE

locret_18C7E:				
		rts	
; ===========================================================================

loc_18C80:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_1978E
		cmpi.w	#-2,d4
		bne.s	loc_18CA6
		bsr.s	loc_18CC6

loc_18CA6:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_1978E
		cmpi.w	#-2,d4
		bne.s	loc_18CBC
		bsr.s	loc_18CC6

loc_18CBC:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_18CC6:				
		move.w	#$100,$1C(a0)
		subq.w	#8,$C(a1)
		move.w	$30(a0),$12(a1)
		neg.w	$12(a1)
		move.b	$28(a0),d0
		bpl.s	loc_18CE6
		move.w	#0,$10(a1)

loc_18CE6:				
		btst	#0,d0
		beq.s	loc_18D26
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_18D16
		move.b	#1,$2C(a1)

loc_18D16:				
		btst	#0,$22(a1)
		beq.s	loc_18D26
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_18D26:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18D3C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18D3C:				
		cmpi.b	#8,d0
		bne.s	loc_18D4E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18D4E:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_18D6A:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	8(a0),d4
		lea	(byte_18FAA)(pc),a2
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_197E6
		btst	#3,$22(a0)
		beq.s	loc_18D92
		bsr.s	loc_18DB4

loc_18D92:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_197E6
		btst	#4,$22(a0)
		beq.s	loc_18DAA
		bsr.s	loc_18DB4

loc_18DAA:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================

loc_18DB4:				
		btst	#0,$22(a0)
		bne.s	loc_18DCA
		move.w	8(a0),d0
		subq.w	#4,d0
		cmp.w	8(a1),d0
		bcs.s	loc_18DD8
		rts	
; ===========================================================================

loc_18DCA:				
		move.w	8(a0),d0
		addq.w	#4,d0
		cmp.w	8(a1),d0
		bcc.s	loc_18DD8
		rts	
; ===========================================================================

loc_18DD8:				
		move.w	#$500,$1C(a0)
		move.w	$30(a0),$12(a1)
		move.w	$30(a0),$10(a1)
		addq.w	#6,$C(a1)
		addq.w	#6,8(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_18E10
		bclr	#0,$22(a1)
		subi.w	#$C,8(a1)
		neg.w	$10(a1)

loc_18E10:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		btst	#0,d0
		beq.s	loc_18E6C
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_18E5C
		move.b	#3,$2C(a1)

loc_18E5C:				
		btst	#0,$22(a1)
		beq.s	loc_18E6C
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_18E6C:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18E82
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18E82:				
		cmpi.b	#8,d0
		bne.s	loc_18E94
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18E94:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_18E9E:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	8(a0),d4
		lea	(byte_18FC6)(pc),a2
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_197E6
		cmpi.w	#-2,d4
		bne.s	loc_18EC4
		bsr.s	loc_18EE6

loc_18EC4:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_197E6
		cmpi.w	#-2,d4
		bne.s	loc_18EDA
		bsr.s	loc_18EE6

loc_18EDA:				
		lea	(off_18FE2).l,a1
		bra.w	AnimateSprite
; ===========================================================================
		rts	
; ===========================================================================

loc_18EE6:				
		move.w	#$500,$1C(a0)
		move.w	$30(a0),$12(a1)
		neg.w	$12(a1)
		move.w	$30(a0),$10(a1)
		subq.w	#6,$C(a1)
		addq.w	#6,8(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_18F22
		bclr	#0,$22(a1)
		subi.w	#$C,8(a1)
		neg.w	$10(a1)

loc_18F22:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		btst	#0,d0
		beq.s	loc_18F78
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_18F68
		move.b	#3,$2C(a1)

loc_18F68:				
		btst	#0,$22(a1)
		beq.s	loc_18F78
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_18F78:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_18F8E
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_18F8E:				
		cmpi.b	#8,d0
		bne.s	loc_18FA0
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_18FA0:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_18FAA:	dc.b $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10, $E, $C, $A,  8; 0
					
		dc.b   6,  4,  2,  0,$FE,$FC,$FC,$FC,$FC,$FC,$FC,$FC; 16
byte_18FC6:	dc.b $F4,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F2,$F4,$F6,$F8; 0
					
		dc.b $FA,$FC,$FE,  0,  2,  4,  4,  4,  4,  4,  4,  4; 16
off_18FE2:	dc.w byte_18FEE-off_18FE2; 0 
		dc.w byte_18FF1-off_18FE2; 1
		dc.w byte_18FFD-off_18FE2; 2
		dc.w byte_19000-off_18FE2; 3
		dc.w byte_1900C-off_18FE2; 4
		dc.w byte_1900F-off_18FE2; 5
byte_18FEE:	dc.b  $F		; 0 
		dc.b   0		; 1
		dc.b $FF		; 2
byte_18FF1:	dc.b   0		; 0 
		dc.b   1		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   2		; 4
		dc.b   2		; 5
		dc.b   2		; 6
		dc.b   2		; 7
		dc.b   2		; 8
		dc.b   2		; 9
		dc.b $FD		; 10
		dc.b   0		; 11
byte_18FFD:	dc.b  $F		; 0 
		dc.b   3		; 1
		dc.b $FF		; 2
byte_19000:	dc.b   0		; 0 
		dc.b   4		; 1
		dc.b   3		; 2
		dc.b   3		; 3
		dc.b   5		; 4
		dc.b   5		; 5
		dc.b   5		; 6
		dc.b   5		; 7
		dc.b   5		; 8
		dc.b   5		; 9
		dc.b $FD		; 10
		dc.b   2		; 11
byte_1900C:	dc.b  $F		; 0 
		dc.b   7		; 1
		dc.b $FF		; 2
byte_1900F:	dc.b   0		; 0 
		dc.b   8		; 1
		dc.b   7		; 2
		dc.b   7		; 3
		dc.b   9		; 4
		dc.b   9		; 5
		dc.b   9		; 6
		dc.b   9		; 7
		dc.b   9		; 8
		dc.b   9		; 9
		dc.b $FD		; 10
		dc.b   4		; 11
		dc.b   0		; 12
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_1901C:				
		dc.w word_19048-Map_1901C; 0
		dc.w word_1905A-Map_1901C; 1
		dc.w word_19064-Map_1901C; 2
		dc.w word_19076-Map_1901C; 3
		dc.w word_19088-Map_1901C; 4
		dc.w word_19092-Map_1901C; 5
		dc.w word_190A4-Map_1901C; 6
		dc.w word_190B6-Map_1901C; 7
		dc.w word_190D8-Map_1901C; 8
		dc.w word_190F2-Map_1901C; 9
		dc.w word_19114-Map_1901C; 10
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_19032:				
		dc.w word_19048-Map_19032; 0
		dc.w word_1905A-Map_19032; 1
		dc.w word_19064-Map_19032; 2
		dc.w word_19076-Map_19032; 3
		dc.w word_19088-Map_19032; 4
		dc.w word_19092-Map_19032; 5
		dc.w word_190A4-Map_19032; 6
		dc.w word_19136-Map_19032; 7
		dc.w word_19158-Map_19032; 8
		dc.w word_19172-Map_19032; 9
		dc.w word_19194-Map_19032; 10
word_19048:	dc.w 2			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	 5,    8,    4,$FFF8; 4
word_1905A:	dc.w 1			
		dc.w $F80D,    0,    0,$FFF0; 0
word_19064:	dc.w 2			
		dc.w $E00D,    0,    0,$FFF0; 0
		dc.w $F007,   $C,    6,$FFF8; 4
word_19076:	dc.w 2			
		dc.w $F003,    0,    0,	   0; 0
		dc.w $F801,    4,    2,$FFF8; 4
word_19088:	dc.w 1			
		dc.w $F003,    0,    0,$FFF8; 0
word_19092:	dc.w 2			
		dc.w $F003,    0,    0,	 $10; 0
		dc.w $F809,    6,    3,$FFF8; 4
word_190A4:	dc.w 2			
		dc.w	$D,$1000,$1000,$FFF0; 0
		dc.w $F005,$1008,$1004,$FFF8; 4
word_190B6:	dc.w 4			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	 5,    8,    4,	   0; 4
		dc.w $FB05,   $C,    6,$FFF6; 8
		dc.w	 5,$201C,$200E,$FFF0; 12
word_190D8:	dc.w 3			
		dc.w $F60D,    0,    0,$FFEA; 0
		dc.w  $605,    8,    4,$FFFA; 4
		dc.w	 5,$201C,$200E,$FFF0; 8
word_190F2:	dc.w 4			
		dc.w $E60D,    0,    0,$FFFB; 0
		dc.w $F605,    8,    4,	  $B; 4
		dc.w $F30B,  $10,    8,$FFF6; 8
		dc.w	 5,$201C,$200E,$FFF0; 12
word_19114:	dc.w 4			
		dc.w	$D,$1000,$1000,$FFF0; 0
		dc.w $F005,$1008,$1004,	   0; 4
		dc.w $F505,$100C,$1006,$FFF6; 8
		dc.w $F005,$301C,$300E,$FFF0; 12
word_19136:	dc.w 4			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	 5,    8,    4,	   0; 4
		dc.w $FB05,   $C,    6,$FFF6; 8
		dc.w	 5,  $1C,   $E,$FFF0; 12
word_19158:	dc.w 3			
		dc.w $F60D,    0,    0,$FFEA; 0
		dc.w  $605,    8,    4,$FFFA; 4
		dc.w	 5,  $1C,   $E,$FFF0; 8
word_19172:	dc.w 4			
		dc.w $E60D,    0,    0,$FFFB; 0
		dc.w $F605,    8,    4,	  $B; 4
		dc.w $F30B,  $10,    8,$FFF6; 8
		dc.w	 5,  $1C,   $E,$FFF0; 12
word_19194:	dc.w 4			
		dc.w	$D,$1000,$1000,$FFF0; 0
		dc.w $F005,$1008,$1004,	   0; 4
		dc.w $F505,$100C,$1006,$FFF6; 8
		dc.w $F005,$101C,$100E,$FFF0; 12
; ===========================================================================
    if Revision<2
		nop
    endc
; ----------------------------------------------------------------------------
; Object 0D - End of level sign post
; ----------------------------------------------------------------------------

Signpost:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_191D8(pc,d0.w),d1
		jsr	off_191D8(pc,d1.w)
		lea	(off_1958E).l,a1
		bsr.w	AnimateSprite
		bsr.w	loc_19534
		bra.w	MarkObjGone
; ===========================================================================
off_191D8:	dc.w loc_191DC-off_191D8; 0 
		dc.w loc_1924C-off_191D8; 1
; ===========================================================================

loc_191DC:				
		tst.w	(f_two_player).w
		beq.s	loc_19208
		move.l	#Map_19656,4(a0)
		move.w	#$5E8,2(a0)
		move.b	#-1,(v_signpost_prev_frame).w
		moveq	#0,d1
		move.w	#$1020,d1
		move.w	#-$80,d4
		moveq	#0,d5
		bsr.w	loc_19564
		bra.s	loc_1922C
; ===========================================================================

loc_19208:				
		cmpi.w	#$401,(v_zone).w
		beq.s	loc_1921E
		tst.b	(v_act).w
		beq.s	loc_1921E
		move.w	#0,8(a0)
		rts	
; ===========================================================================

loc_1921E:				
		move.l	#Map_195BE,4(a0)
		move.w	#$434,2(a0)

loc_1922C:				
		addq.b	#2,$24(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)
		move.w	#$3C3C,(v_loser_time_left).w

loc_1924C:				
		tst.b	(f_hud_time_update).w
		beq.w	loc_192D6
		lea	($FFFFB000).w,a1
		move.w	8(a1),d0
		sub.w	8(a0),d0
		bcs.s	loc_192D6
		cmpi.w	#$20,d0	; ' '
		bcc.s	loc_192D6
		move.w	#$CF,d0	
		jsr	(PlayMusic).l
		clr.b	(f_hud_time_update).w
		move.w	#1,$1C(a0)
		move.w	#0,$30(a0)
		move.w	(v_boundary_right_next).w,(v_boundary_left_next).w
		move.b	#2,$25(a0)
		cmpi.b	#$C,(v_loser_time_left).w
		bhi.s	loc_192A0

loc_19296:
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_192A0:				
		tst.b	$36(a0)
		bne.w	loc_19350
		move.b	#3,$36(a0)
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_192BC
		move.b	#4,$36(a0)

loc_192BC:				
		tst.w	(f_two_player).w
		beq.w	loc_19350
		move.w	#$3C3C,(v_loser_time_left).w
		move.w	#$D3,d0	
		jsr	(PlaySound).l
		bra.s	loc_19350
; ===========================================================================

loc_192D6:				
		tst.w	(f_two_player).w
		beq.s	loc_19350
		tst.b	(f_hud_time_update_p2).w
		beq.s	loc_19350
		lea	($FFFFB040).w,a1
		move.w	8(a1),d0
		sub.w	8(a0),d0
		bcs.s	loc_19350
		cmpi.w	#$20,d0	; ' '
		bcc.s	loc_19350
		move.w	#$CF,d0	
		jsr	(PlayMusic).l
		clr.b	(f_hud_time_update_p2).w
		move.w	#1,$1C(a0)
		move.w	#0,$30(a0)
		move.w	(v_boundary_right_next_p2).w,(v_boundary_left_next_p2).w
		move.b	#2,$25(a0)
		cmpi.b	#$C,(v_loser_time_left).w
		bhi.s	loc_1932E
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_1932E:				
		tst.b	$36(a0)
		bne.s	loc_19350
		move.b	#4,$36(a0)
		tst.w	(f_two_player).w
		beq.s	loc_19350
		move.w	#$3C3C,(v_loser_time_left).w
		move.w	#$D3,d0	
		jsr	(PlaySound).l

loc_19350:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_1935E(pc,d0.w),d1
		jmp	off_1935E(pc,d1.w)
; ===========================================================================
off_1935E:	dc.w locret_19366-off_1935E; 0 
		dc.w loc_19368-off_1935E; 1
		dc.w loc_19418-off_1935E; 2
		dc.w loc_194FC-off_1935E; 3
; ===========================================================================

locret_19366:				
		rts	
; ===========================================================================

loc_19368:				
		subq.w	#1,$30(a0)
		bpl.s	loc_19398
		move.w	#$3C,$30(a0) ; '<'
		addq.b	#1,$1C(a0)
		cmpi.b	#3,$1C(a0)
		bne.s	loc_19398
		move.b	#4,$25(a0)
		move.b	$36(a0),$1C(a0)
		tst.w	(f_two_player).w
		beq.s	loc_19398
		move.b	#6,$25(a0)

loc_19398:				
		subq.w	#1,$32(a0)
		bpl.s	locret_19406
		move.w	#$B,$32(a0)
		moveq	#0,d0
		move.b	$34(a0),d0
		addq.b	#2,$34(a0)
		andi.b	#$E,$34(a0)
		lea	byte_19408(pc,d0.w),a2
		bsr.w	SingleObjLoad
		bne.s	locret_19406
		_move.b	#$25,0(a1) ; '%'
		move.b	#6,$24(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	8(a0),d0
		move.w	d0,8(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	$C(a0),d0
		move.w	d0,$C(a1)
		move.l	#Map_12382,4(a1)
		move.w	#$26BC,2(a1)
		bsr.w	sub_16D8A
		move.b	#4,1(a1)
		move.b	#2,$18(a1)
		move.b	#8,$19(a1)

locret_19406:				
		rts	
; ===========================================================================
byte_19408:	dc.b $E8		; 0
		dc.b $F0		; 1
		dc.b   8		; 2
		dc.b   8		; 3
		dc.b $F0		; 4
		dc.b   0		; 5
		dc.b $18		; 6
		dc.b $F8		; 7
		dc.b   0		; 8
		dc.b $F8		; 9
		dc.b $10		; 10
		dc.b   0		; 11
		dc.b $E8		; 12
		dc.b   8		; 13
		dc.b $18		; 14
		dc.b $10		; 15
; ===========================================================================

loc_19418:				
		tst.w	(v_debug_active).w
		bne.w	locret_194D0
		btst	#1,($FFFFB022).w
		bne.s	loc_19434
		move.b	#1,(f_lock_controls).w
		move.w	#$800,(v_joypad_hold).w

loc_19434:				
		tst.b	($FFFFB000).w
		beq.s	loc_1944C
		move.w	($FFFFB008).w,d0
		move.w	(v_boundary_right_next).w,d1
		addi.w	#$128,d1
		cmp.w	d1,d0
		bcs.w	locret_194D0

loc_1944C:				
		move.b	#0,$25(a0)

loc_19452:				
		lea	($FFFFB000).w,a1
		clr.b	$2B(a1)
		clr.b	(f_hud_time_update).w
		bsr.w	SingleObjLoad
		bne.s	loc_19468
		move.b	#$3A,(a1) ; ':'

loc_19468:				
		moveq	#$26,d0	; '&'
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_19474
		moveq	#$42,d0	; 'B'

loc_19474:				
		jsr	(NewPLC).l
		move.b	#1,(f_pass_bonus_update).w
		moveq	#0,d0
		move.b	(v_time_min).w,d0
		mulu.w	#$3C,d0	; '<'
		moveq	#0,d1
		move.b	(v_time_sec).w,d1
		add.w	d1,d0
		divu.w	#$F,d0
		moveq	#$14,d1
		cmp.w	d1,d0
		bcs.s	loc_1949E
		move.w	d1,d0

loc_1949E:				
		add.w	d0,d0
		move.w	word_194D2(pc,d0.w),(v_bonus_count_1).w
		move.w	(v_rings).w,d0
		mulu.w	#$A,d0
		move.w	d0,(v_bonus_count_2).w
		clr.w	(v_total_bonus_countdown).w
		clr.w	(v_bonus_count_3).w
		tst.w	(v_perfect_rings_left).w
		bne.s	loc_194C6
		move.w	#$1388,(v_bonus_count_3).w

loc_194C6:				
		move.w	#$9A,d0	
		jsr	(PlayMusic).l

locret_194D0:				
		rts	
; ===========================================================================
word_194D2:	dc.w $1388		; 0
		dc.w $1388		; 1
		dc.w  $3E8		; 2
		dc.w  $1F4		; 3
		dc.w  $190		; 4
		dc.w  $190		; 5
		dc.w  $12C		; 6
		dc.w  $12C		; 7
		dc.w   $C8		; 8
		dc.w   $C8		; 9
		dc.w   $C8		; 10
		dc.w   $C8		; 11
		dc.w   $64		; 12
		dc.w   $64		; 13
		dc.w   $64		; 14
		dc.w   $64		; 15
		dc.w   $32		; 16
		dc.w   $32		; 17
		dc.w   $32		; 18
		dc.w   $32		; 19
		dc.w	 0		; 20
; ===========================================================================

loc_194FC:				
		subq.w	#1,$30(a0)
		bpl.s	locret_19532
		tst.b	(f_time_over).w
		bne.s	locret_19532
		tst.b	(f_time_over_p2).w
		bne.s	locret_19532
		tst.b	(f_hud_time_update).w
		bne.s	locret_19532
		tst.b	(f_hud_time_update_p2).w
		bne.s	locret_19532
		move.b	#0,(v_last_lamppost).w
		move.b	#0,(v_last_lamppost_p2).w
		move.b	#$18,(v_gamemode).w
		move.w	#0,(v_results_screen_2p).w

locret_19532:				
		rts	
; ===========================================================================

loc_19534:				
		tst.w	(f_two_player).w
		beq.s	locret_1958C
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(v_signpost_prev_frame).w,d0
		beq.s	locret_1958C
		move.b	d0,(v_signpost_prev_frame).w
		lea	(off_196EE).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1958C
		move.w	#-$4300,d4

loc_19560:				
		moveq	#0,d1
		move.w	(a2)+,d1

loc_19564:				
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Signpost,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,loc_19560

locret_1958C:				
		rts	
; ===========================================================================
off_1958E:	dc.w byte_19598-off_1958E; 0 
		dc.w byte_1959B-off_1958E; 1
		dc.w byte_195A9-off_1958E; 2
		dc.w byte_195B7-off_1958E; 3
		dc.w byte_195BA-off_1958E; 4
byte_19598:	dc.b  $F,  2,$FF	; 0 
byte_1959B:	dc.b   1,  2,  3,  4,  5,  1,  3,  4,  5,  0,  3,  4,  5,$FF; 0
					
byte_195A9:	dc.b   1,  2,  3,  4,  5,  1,  3,  4,  5,  0,  3,  4,  5,$FF; 0
					
byte_195B7:	dc.b  $F,  0,$FF	; 0 
byte_195BA:	dc.b  $F,  1,$FF,  0	; 0 
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_195BE:				
		dc.w word_195CA-Map_195BE; 0
		dc.w word_195E4-Map_195BE; 1
		dc.w word_19606-Map_195BE; 2
		dc.w word_19620-Map_195BE; 3
		dc.w word_19632-Map_195BE; 4
		dc.w word_19644-Map_195BE; 5
word_195CA:	dc.w 3			
		dc.w $F00B,  $22,  $11,$FFE8; 0
		dc.w $F00B,  $2E,  $17,	   0; 4
		dc.w $1001,  $20,  $10,$FFFC; 8
word_195E4:	dc.w 4			
		dc.w $F003,  $3A,  $1D,$FFE8; 0
		dc.w $F00F,  $3E,  $1F,$FFF0; 4
		dc.w $F003, $83A, $81D,	 $10; 8
		dc.w $1001,  $20,  $10,$FFFC; 12
word_19606:	dc.w 3			
		dc.w $F00B,    0,    0,$FFE8; 0
		dc.w $F00B, $800, $800,	   0; 4
		dc.w $1001,  $20,  $10,$FFFC; 8
word_19620:	dc.w 2			
		dc.w $F00F,   $C,    6,$FFF0; 0
		dc.w $1001,  $20,  $10,$FFFC; 4
word_19632:	dc.w 2			
		dc.w $F003,  $1C,   $E,$FFFC; 0
		dc.w $1001,  $20,  $10,$FFFC; 4
word_19644:	dc.w 2			
		dc.w $F00F, $80C, $806,$FFF0; 0
		dc.w $1001,  $20,  $10,$FFFC; 4
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_19656:				
		dc.w word_19662-Map_19656; 0
		dc.w word_1967C-Map_19656; 1
		dc.w word_1969E-Map_19656; 2
		dc.w word_196B8-Map_19656; 3
		dc.w word_196CA-Map_19656; 4
		dc.w word_196DC-Map_19656; 5
word_19662:	dc.w	 3		; 0 
		dc.w $F00B,    0,    0,$FFE8; 0
		dc.w $F00B,   $C,    6,	   0; 4
		dc.w $1001, $214, $10A,$FFFC; 8
word_1967C:	dc.w 4			
		dc.w $F003,    0,    0,$FFE8; 0
		dc.w $F00F,    4,    2,$FFF0; 4
		dc.w $F003, $814, $80A,	 $10; 8
		dc.w $1001, $214, $10A,$FFFC; 12
word_1969E:	dc.w 3			
		dc.w $F00B,    0,    0,$FFE8; 0
		dc.w $F00B, $800, $800,	   0; 4
		dc.w $1001, $214, $10A,$FFFC; 8
word_196B8:	dc.w 2			
		dc.w $F00F,    0,    0,$FFF0; 0
		dc.w $1001, $214, $10A,$FFFC; 4
word_196CA:	dc.w 2			
		dc.w $F003,    0,    0,$FFFC; 0
		dc.w $1001, $214, $10A,$FFFC; 4
word_196DC:	dc.w 2			
		dc.w $F00F, $800, $800,$FFF0; 0
		dc.w $1001, $214, $10A,$FFFC; 4
off_196EE:	dc.w word_196FA-off_196EE; 0 
		dc.w word_19700-off_196EE; 1
		dc.w word_19708-off_196EE; 2
		dc.w word_1970E-off_196EE; 3
		dc.w word_19712-off_196EE; 4
		dc.w word_1970E-off_196EE; 5
word_196FA:	dc.w 2			
		dc.w $B022		; 0
		dc.w $B02E		; 1
word_19700:	dc.w 3			
		dc.w $303A		; 0
		dc.w $F03E		; 1
		dc.w $303A		; 2
word_19708:	dc.w 2			
		dc.w $B000		; 0
		dc.w $B000		; 1
word_1970E:	dc.w 1			
		dc.w $F00C		; 0
word_19712:	dc.w 1			
		dc.w $301C		; 0
; ===========================================================================
 
    if Revision<2
		nop
    endc

; ---------------------------------------------------------------------------
; Solid object subroutines (includes spikes, blocks, rocks etc)
; These check collision of Sonic/Tails with objects on the screen
;
; input variables:
; d1 = object width / 2
; d2 = object height / 2 (when jumping)
; d3 = object height / 2 (when walking)
; d4 = object x-axis position
;
; address registers:
; a0 = the object to check collision with
; a1 = Sonic or Tails (set inside these subroutines)
; ---------------------------------------------------------------------------

SolidObject:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19736
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		tst.b	1(a1)
		bpl.w	locret_19776
		addq.b	#1,d6

loc_19736:				
		btst	d6,$22(a0)
		beq.w	loc_199E8
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_1975A
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_1975A
		cmp.w	d2,d0
		bcs.s	loc_1976E

loc_1975A:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_1976E:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4

locret_19776:				
		rts	
; ===========================================================================

loc_19778:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_1978E
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_1978E:				
		btst	d6,$22(a0)
		beq.w	loc_199F0
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_197B2
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_197B2
		cmp.w	d2,d0
		bcs.s	loc_197C6

loc_197B2:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_197C6:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================

loc_197D0:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_197E6
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_197E6:				
		btst	d6,$22(a0)
		beq.w	loc_1992E
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_1980A
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_1980A
		cmp.w	d2,d0
		bcs.s	loc_1981E

loc_1980A:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_1981E:				
		move.w	d4,d2
		bsr.w	loc_19BCC
		moveq	#0,d4
		rts	
; ===========================================================================
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_1983E
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_1983E:				
		btst	d6,$22(a0)
		beq.w	loc_19988
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19862
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_19862
		cmp.w	d2,d0
		bcs.s	loc_19876

loc_19862:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19876:				
		move.w	d4,d2
		bsr.w	loc_19C0E
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19880:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19896
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19896:				
		btst	d6,$22(a0)
		beq.w	loc_198EC
		btst	#1,$22(a1)
		bne.s	loc_198B8
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_198B8
		add.w	d1,d1
		cmp.w	d1,d0
		bcs.s	loc_198CC

loc_198B8:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_198CC:				
		move.w	$C(a0),d0
		sub.w	d2,d0
		add.w	d3,d0
		moveq	#0,d1
		move.b	$16(a1),d1
		sub.w	d1,d0
		move.w	d0,$C(a1)
		sub.w	8(a0),d4
		sub.w	d4,8(a1)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_198EC:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d4
		add.w	d4,d4
		cmp.w	d4,d0
		bhi.w	loc_19AC4
		move.w	$C(a0),d5
		add.w	d3,d5
		move.b	$16(a1),d3
		ext.w	d3
		add.w	d3,d2
		move.w	$C(a1),d3
		sub.w	d5,d3
		addq.w	#4,d3
		add.w	d2,d3
		bmi.w	loc_19AC4
		move.w	d2,d4
		add.w	d4,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4
		bra.w	loc_19A2E
; ===========================================================================

loc_1992E:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d3
		add.w	d3,d3
		cmp.w	d3,d0
		bhi.w	loc_19AC4
		move.w	d0,d5
		btst	#0,1(a0)
		beq.s	loc_19954
		not.w	d5
		add.w	d3,d5

loc_19954:				
		lsr.w	#1,d5
		move.b	(a2,d5.w),d3
		sub.b	(a2),d3
		ext.w	d3
		move.w	$C(a0),d5
		sub.w	d3,d5
		move.b	$16(a1),d3
		ext.w	d3
		add.w	d3,d2
		move.w	$C(a1),d3
		sub.w	d5,d3
		addq.w	#4,d3
		add.w	d2,d3
		bmi.w	loc_19AC4
		move.w	d2,d4
		add.w	d4,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4
		bra.w	loc_19A2E
; ===========================================================================

loc_19988:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d3
		add.w	d3,d3
		cmp.w	d3,d0
		bhi.w	loc_19AC4
		move.w	d0,d5
		btst	#0,1(a0)
		beq.s	loc_199AE
		not.w	d5
		add.w	d3,d5

loc_199AE:				
		andi.w	#-2,d5
		move.b	(a2,d5.w),d3
		move.b	1(a2,d5.w),d2
		ext.w	d2
		ext.w	d3
		move.w	$C(a0),d5
		sub.w	d3,d5
		move.w	$C(a1),d3
		sub.w	d5,d3
		move.b	$16(a1),d5
		ext.w	d5
		add.w	d5,d3
		addq.w	#4,d3
		bmi.w	loc_19AC4
		add.w	d5,d2
		move.w	d2,d4
		add.w	d5,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4
		bra.w	loc_19A2E
; ===========================================================================

loc_199E8:				
		tst.b	1(a0)
		bpl.w	loc_19AC4

loc_199F0:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	loc_19AC4
		move.w	d1,d3
		add.w	d3,d3
		cmp.w	d3,d0
		bhi.w	loc_19AC4
		move.b	$16(a1),d3
		ext.w	d3
		add.w	d3,d2
		move.w	$C(a1),d3
		sub.w	$C(a0),d3
		addq.w	#4,d3
		add.w	d2,d3
		bmi.w	loc_19AC4
		andi.w	#$7FF,d3
		move.w	d2,d4
		add.w	d4,d4
		cmp.w	d4,d3
		bcc.w	loc_19AC4

loc_19A2E:				
		tst.b	$2A(a1)
		bmi.w	loc_19AC4
		cmpi.b	#6,$24(a1)
		bcc.w	loc_19AEA
		tst.w	(v_debug_active).w
		bne.w	loc_19AEA
		move.w	d0,d5
		cmp.w	d0,d1
		bcc.s	loc_19A56
		add.w	d1,d1
		sub.w	d1,d0
		move.w	d0,d5
		neg.w	d5

loc_19A56:				
		move.w	d3,d1
		cmp.w	d3,d2
		bcc.s	loc_19A64
		subq.w	#4,d3
		sub.w	d4,d3
		move.w	d3,d1
		neg.w	d1

loc_19A64:				
		cmp.w	d1,d5
		bhi.w	loc_19AEE

loc_19A6A:				
		cmpi.w	#4,d1
		bls.s	loc_19AB6
		tst.w	d0
		beq.s	loc_19A90
		bmi.s	loc_19A7E
		tst.w	$10(a1)
		bmi.s	loc_19A90
		bra.s	loc_19A84
; ===========================================================================

loc_19A7E:				
		tst.w	$10(a1)
		bpl.s	loc_19A90

loc_19A84:				
		move.w	#0,$14(a1)
		move.w	#0,$10(a1)

loc_19A90:				
		sub.w	d0,8(a1)
		btst	#1,$22(a1)
		bne.s	loc_19AB6
		move.l	d6,d4
		addq.b	#2,d4
		bset	d4,$22(a0)
		bset	#5,$22(a1)
		move.w	d6,d4
		addi.b	#$D,d4
		bset	d4,d6
		moveq	#1,d4
		rts	
; ===========================================================================

loc_19AB6:				
		bsr.s	loc_19ADC
		move.w	d6,d4
		addi.b	#$D,d4
		bset	d4,d6
		moveq	#1,d4
		rts	
; ===========================================================================

loc_19AC4:				
		move.l	d6,d4
		addq.b	#2,d4
		btst	d4,$22(a0)
		beq.s	loc_19AEA
		cmpi.b	#2,$1C(a1)
		beq.s	loc_19ADC
		move.w	#1,$1C(a1)

loc_19ADC:				
		move.l	d6,d4
		addq.b	#2,d4
		bclr	d4,$22(a0)
		bclr	#5,$22(a1)

loc_19AEA:				
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19AEE:				
		tst.w	d3
		bmi.s	loc_19B06
		cmpi.w	#$10,d3
		bcs.s	loc_19B56
		cmpi.b	#-$7B,(a0)
		bne.s	loc_19AC4
		cmpi.w	#$14,d3
		bcs.s	loc_19B56
		bra.s	loc_19AC4
; ===========================================================================

loc_19B06:				
		tst.w	$12(a1)
		beq.s	loc_19B28
		bpl.s	loc_19B1C
		tst.w	d3
		bpl.s	loc_19B1C
		sub.w	d3,$C(a1)
		move.w	#0,$12(a1)

loc_19B1C:				
		move.w	d6,d4
		addi.b	#$F,d4
		bset	d4,d6
		moveq	#-2,d4
		rts	
; ===========================================================================

loc_19B28:				
		btst	#1,$22(a1)
		bne.s	loc_19B1C
		move.w	d0,d4
		bpl.s	loc_19B36
		neg.w	d4

loc_19B36:				
		cmpi.w	#$10,d4
		bcs.w	loc_19A6A
		move.l	a0,-(sp)
		movea.l	a1,a0
		jsr	KillCharacter
		movea.l	(sp)+,a0
		move.w	d6,d4
		addi.b	#$F,d4
		bset	d4,d6
		moveq	#-2,d4
		rts	
; ===========================================================================

loc_19B56:				
		subq.w	#4,d3
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	d1,d2
		add.w	d2,d2
		add.w	8(a1),d1
		sub.w	8(a0),d1
		bmi.s	loc_19B8E
		cmp.w	d2,d1
		bcc.s	loc_19B8E
		tst.w	$12(a1)
		bmi.s	loc_19B8E
		sub.w	d3,$C(a1)
		subq.w	#1,$C(a1)
		bsr.w	loc_19E14
		move.w	d6,d4
		addi.b	#$11,d4
		bset	d4,d6
		moveq	#-1,d4
		rts	
; ===========================================================================

loc_19B8E:				
		moveq	#0,d4
		rts	
; ===========================================================================

MoveWithPlatform:				
		move.w	$C(a0),d0
		sub.w	d3,d0
		bra.s	loc_19BA2
; ===========================================================================
		; a couple lines of unused/leftover/dead code from Sonic 1 ; a0=object
		move.w	$C(a0),d0
		subi.w	#9,d0

loc_19BA2:				
		tst.b	$2A(a1)
		bmi.s	locret_19BCA
		cmpi.b	#6,$24(a1)
		bcc.s	locret_19BCA
		tst.w	(v_debug_active).w
		bne.s	locret_19BCA
		moveq	#0,d1
		move.b	$16(a1),d1
		sub.w	d1,d0
		move.w	d0,$C(a1)
		sub.w	8(a0),d2
		sub.w	d2,8(a1)

locret_19BCA:				
		rts	
; ===========================================================================

loc_19BCC:				
		btst	#3,$22(a1)
		beq.s	locret_19C0C
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		lsr.w	#1,d0
		btst	#0,1(a0)
		beq.s	loc_19BEC
		not.w	d0
		add.w	d1,d0

loc_19BEC:				
		move.b	(a2,d0.w),d1
		ext.w	d1
		move.w	$C(a0),d0
		sub.w	d1,d0
		moveq	#0,d1
		move.b	$16(a1),d1
		sub.w	d1,d0
		move.w	d0,$C(a1)
		sub.w	8(a0),d2
		sub.w	d2,8(a1)

locret_19C0C:				
		rts	
; ===========================================================================

loc_19C0E:				
		btst	#3,$22(a1)
		beq.s	locret_19C0C
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		btst	#0,1(a0)
		beq.s	loc_19C2C
		not.w	d0
		add.w	d1,d0

loc_19C2C:				
		andi.w	#-2,d0
		bra.s	loc_19BEC
; ===========================================================================

DetectPlatform:				
		lea	(v_ost_maincharacter).w,a1
		moveq	#3,d6
		pushr	d1-d4
		bsr.s	loc_19C48
		movem.l	(sp)+,d1-d4
		lea	(v_ost_sidekick).w,a1
		addq.b	#1,d6

loc_19C48:				
		btst	d6,$22(a0)
		beq.w	loc_19DBA
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19C6C
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_19C6C
		cmp.w	d2,d0
		bcs.s	loc_19C80

loc_19C6C:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19C80:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19C8A:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19CA0
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19CA0:				
		btst	d6,$22(a0)
		beq.w	loc_19E90
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19CC4
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_19CC4
		cmp.w	d2,d0
		bcs.s	loc_19CD8

loc_19CC4:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19CD8:				
		move.w	d4,d2
		bsr.w	loc_19BCC
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19CE2:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19CF8
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19CF8:				
		btst	d6,$22(a0)
		beq.w	loc_19EC8
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19D1C
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_19D1C
		cmp.w	d2,d0
		bcs.s	loc_19D30

loc_19D1C:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D30:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D3A:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_19D50
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_19D50:				
		btst	d6,$22(a0)
		bne.s	loc_19D62
		btst	#3,$22(a1)
		bne.s	loc_19D8E
		bra.w	loc_19DBA
; ===========================================================================

loc_19D62:				
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,$22(a1)
		bne.s	loc_19D7E
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	loc_19D7E
		cmp.w	d2,d0
		bcs.s	loc_19D92

loc_19D7E:				
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	d6,$22(a0)

loc_19D8E:				
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D92:				
		move.w	d4,d2
		bsr.w	MoveWithPlatform
		moveq	#0,d4
		rts	
; ===========================================================================

loc_19D9C:				
		tst.w	$12(a1)
		bmi.w	locret_19E8E
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	locret_19E8E
		cmp.w	d2,d0
		bcc.w	locret_19E8E
		bra.s	loc_19DD8
; ===========================================================================

loc_19DBA:				
		tst.w	$12(a1)
		bmi.w	locret_19E8E
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	locret_19E8E
		add.w	d1,d1
		cmp.w	d1,d0
		bcc.w	locret_19E8E

loc_19DD8:				
		move.w	$C(a0),d0
		sub.w	d3,d0

loc_19DDE:				
		move.w	$C(a1),d2
		move.b	$16(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.w	locret_19E8E
		cmpi.w	#-$10,d0
		bcs.w	locret_19E8E
		tst.b	$2A(a1)
		bmi.w	locret_19E8E
		cmpi.b	#6,$24(a1)
		bcc.w	locret_19E8E
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,$C(a1)

loc_19E14:				
		btst	#3,$22(a1)
		beq.s	loc_19E30
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		bclr	d6,$22(a3)

loc_19E30:				
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0	; ''
		move.b	d0,$3D(a1)
		move.b	#0,$26(a1)
		move.w	#0,$12(a1)
		move.w	$10(a1),$14(a1)
		btst	#1,$22(a1)
		beq.s	loc_19E7E
		move.l	a0,-(sp)
		movea.l	a1,a0
		move.w	a0,d1
		subi.w	#-$5000,d1
		bne.s	loc_19E76
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_19E76
		jsr	loc_1B0AC
		bra.s	loc_19E7C
; ===========================================================================

loc_19E76:				
		jsr	loc_1CB5C

loc_19E7C:				
		movea.l	(sp)+,a0

loc_19E7E:				
		bset	#3,$22(a1)
		bclr	#1,$22(a1)
		bset	d6,$22(a0)

locret_19E8E:				
		rts	
; ===========================================================================

loc_19E90:				
		tst.w	$12(a1)
		bmi.w	locret_19E8E
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.s	locret_19E8E
		add.w	d1,d1
		cmp.w	d1,d0
		bcc.s	locret_19E8E
		btst	#0,1(a0)
		beq.s	loc_19EB6
		not.w	d0
		add.w	d1,d0

loc_19EB6:				
		lsr.w	#1,d0
		move.b	(a2,d0.w),d3
		ext.w	d3
		move.w	$C(a0),d0
		sub.w	d3,d0
		bra.w	loc_19DDE
; ===========================================================================

loc_19EC8:				
		tst.w	$12(a1)
		bmi.w	locret_19E8E
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d1,d0
		bmi.w	locret_19E8E
		add.w	d1,d1
		cmp.w	d1,d0
		bcc.w	locret_19E8E
		move.w	$C(a0),d0
		sub.w	d3,d0
		bra.w	loc_19DDE
; ===========================================================================

loc_19EF0:				
		lea	($FFFFB000).w,a1
		btst	#3,$22(a0)
		beq.s	loc_19F1E
		jsr	loc_1EDA8
		tst.w	d1
		beq.s	loc_19F08
		bpl.s	loc_19F1E

loc_19F08:				
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a0)

loc_19F1E:				
		lea	($FFFFB040).w,a1
		btst	#4,$22(a0)
		beq.s	loc_19F4C
		jsr	loc_1EDA8
		tst.w	d1
		beq.s	loc_19F36
		bpl.s	loc_19F4C

loc_19F36:				
		lea	($FFFFB040).w,a1
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a0)

loc_19F4C:				
		moveq	#0,d4
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 01 - Sonic
; ----------------------------------------------------------------------------

Sonic:				
		tst.w	(v_debug_active).w
		beq.s	loc_19F5C
		jmp	DebugMode
; ===========================================================================

loc_19F5C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_19F6A(pc,d0.w),d1
		jmp	off_19F6A(pc,d1.w)
; ===========================================================================
off_19F6A:	dc.w loc_19F76-off_19F6A; 0 
		dc.w loc_1A030-off_19F6A; 1
		dc.w loc_1B120-off_19F6A; 2
		dc.w loc_1B1E6-off_19F6A; 3
		dc.w loc_1B31C-off_19F6A; 4
		dc.w loc_1B330-off_19F6A; 5
; ===========================================================================

loc_19F76:				
		addq.b	#2,$24(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.l	#Map_Sonic,4(a0)
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#4,1(a0)
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		tst.b	(v_last_lamppost).w
		bne.s	loc_19FE6
		move.w	#$780,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.w	8(a0),(v_x_pos_lampcopy).w
		move.w	$C(a0),(v_y_pos_lampcopy).w
		move.w	2(a0),(v_ost_tile_lampcopy).w
		move.w	$3E(a0),(v_ost_top_solid_bit_lampcopy).w

loc_19FE6:				
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.b	#0,(f_super).w
		move.b	#$1E,$28(a0)
		subi.w	#$20,8(a0) ; ' '
		addi.w	#4,$C(a0)
		move.w	#0,(v_sonic_pos_tracker_num).w
		move.w	#$3F,d2	; '?'

loc_1A014:				
		bsr.w	loc_1A15C
		subq.w	#4,a1
		move.l	#0,(a1)
		dbf	d2,loc_1A014
		addi.w	#$20,8(a0) ; ' '
		subi.w	#4,$C(a0)

loc_1A030:				
		tst.w	(f_debug_enable).w
		beq.s	loc_1A04A
		btst	#4,(v_joypad_press_actual).w
		beq.s	loc_1A04A
		move.w	#1,(v_debug_active).w
		clr.b	(f_lock_controls).w
		rts	
; ===========================================================================

loc_1A04A:				
		tst.b	(f_lock_controls).w
		bne.s	loc_1A056
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w

loc_1A056:				
		btst	#0,$2A(a0)
		bne.s	loc_1A070
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	off_1A0BE(pc,d0.w),d1
		jsr	off_1A0BE(pc,d1.w)

loc_1A070:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1A07E
		andi.w	#$7FF,$C(a0)

loc_1A07E:				
		bsr.s	loc_1A0C6
		bsr.w	loc_1ABA6
		bsr.w	loc_1A15C
		bsr.w	loc_1A186
		move.b	(v_angle_right).w,$36(a0)
		move.b	(v_angle_left).w,$37(a0)
		tst.b	(f_wind_tunnel_now).w
		beq.s	loc_1A0AA
		tst.b	$1C(a0)
		bne.s	loc_1A0AA
		move.b	$1D(a0),$1C(a0)

loc_1A0AA:				
		bsr.w	loc_1B350
		tst.b	$2A(a0)
		bmi.s	loc_1A0BA
		jsr	loc_3F554

loc_1A0BA:				
		bra.w	loc_1B848
; ===========================================================================
off_1A0BE:	dc.w loc_1A26E-off_1A0BE; 0 
		dc.w loc_1A2E0-off_1A0BE; 1
		dc.w loc_1A30A-off_1A0BE; 2
		dc.w loc_1A330-off_1A0BE; 3
; ===========================================================================

loc_1A0C6:				
		move.w	$30(a0),d0
		beq.s	loc_1A0D4
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	loc_1A0DA

loc_1A0D4:				
		jsr	DisplaySprite

loc_1A0DA:				
		btst	#1,$2B(a0)
		beq.s	loc_1A10C
		tst.w	$32(a0)
		beq.s	loc_1A10C
		subq.w	#1,$32(a0)
		bne.s	loc_1A10C
		tst.b	(v_current_boss).w
		bne.s	loc_1A106
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1A106
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_1A106:				
		bclr	#1,$2B(a0)

loc_1A10C:				
		btst	#2,$2B(a0)
		beq.s	locret_1A15A
		tst.w	$34(a0)
		beq.s	locret_1A15A
		subq.w	#1,$34(a0)
		bne.s	locret_1A15A
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		tst.b	(f_super).w
		beq.s	loc_1A14A
		move.w	#$A00,(v_sonic_max_speed).w
		move.w	#$30,(v_sonic_acceleration).w ; '0'
		move.w	#$100,(v_sonic_deceleration).w

loc_1A14A:				
		bclr	#2,$2B(a0)
		move.w	#$FC,d0	
		jmp	(PlayMusic).l
; ===========================================================================

locret_1A15A:				
		rts	
; ===========================================================================

loc_1A15C:				
		move.w	(v_sonic_pos_tracker_num).w,d0
		lea	(v_sonic_pos_tracker).w,a1
		lea	(a1,d0.w),a1
		move.w	8(a0),(a1)+
		move.w	$C(a0),(a1)+
		addq.b	#4,($FFFFEED3).w
		lea	(v_sonic_stat_tracker).w,a1
		lea	(a1,d0.w),a1
		move.w	(v_joypad_hold).w,(a1)+
		move.w	$22(a0),(a1)+
		rts	
; ===========================================================================

loc_1A186:				
		tst.b	(f_water_flag).w
		bne.s	loc_1A18E

locret_1A18C:				
		rts	
; ===========================================================================

loc_1A18E:				
		move.w	(v_water_height_actual).w,d0
		cmp.w	$C(a0),d0
		bge.s	loc_1A1FE
		bset	#6,$22(a0)
		bne.s	locret_1A18C
		movea.l	a0,a1
		bsr.w	loc_1D81E
		move.b	#$A,($FFFFD080).w
		move.b	#-$7F,($FFFFD0A8).w
		move.l	a0,($FFFFD0BC).w
		move.w	#$300,(v_sonic_max_speed).w
		move.w	#6,(v_sonic_acceleration).w
		move.w	#$40,(v_sonic_deceleration).w ; '@'
		tst.b	(f_super).w
		beq.s	loc_1A1E0
		move.w	#$500,(v_sonic_max_speed).w
		move.w	#$18,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w

loc_1A1E0:				
		asr	$10(a0)
		asr	$12(a0)
		asr	$12(a0)
		beq.s	locret_1A18C
		move.w	#$100,($FFFFD11C).w
		move.w	#$AA,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_1A1FE:				
		bclr	#6,$22(a0)
		beq.s	locret_1A18C
		movea.l	a0,a1
		bsr.w	loc_1D81E
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		tst.b	(f_super).w
		beq.s	loc_1A236
		move.w	#$A00,(v_sonic_max_speed).w
		move.w	#$30,(v_sonic_acceleration).w ; '0'
		move.w	#$100,(v_sonic_deceleration).w

loc_1A236:				
		cmpi.b	#4,$24(a0)
		beq.s	loc_1A242
		asl	$12(a0)

loc_1A242:				
		tst.w	$12(a0)
		beq.w	locret_1A18C
		move.w	#$100,($FFFFD11C).w
		movea.l	a0,a1
		bsr.w	loc_1D81E
		cmpi.w	#-$1000,$12(a0)
		bgt.s	loc_1A264
		move.w	#-$1000,$12(a0)

loc_1A264:				
		move.w	#$AA,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_1A26E:				
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0	; 'p'
		bne.s	loc_1A2B8
		cmpi.b	#$A,$1C(a0)
		beq.s	locret_1A2DE
		cmpi.b	#$B,$1C(a0)
		beq.s	locret_1A2DE
		cmpi.b	#5,$1C(a0)
		bne.s	loc_1A2B8
		cmpi.b	#$1E,$1B(a0)
		bcs.s	loc_1A2B8
		move.b	(v_joypad_hold).w,d0
		andi.b	#$7F,d0	; ''
		beq.s	locret_1A2DE
		move.b	#$A,$1C(a0)
		cmpi.b	#-$54,$1B(a0)
		bcs.s	locret_1A2DE
		move.b	#$B,$1C(a0)
		bra.s	locret_1A2DE
; ===========================================================================

loc_1A2B8:				
		bsr.w	loc_1AC3E
		bsr.w	loc_1AA38
		bsr.w	loc_1AD96
		bsr.w	loc_1A35A
		bsr.w	loc_1A9D2
		bsr.w	loc_1A974
		jsr	SpeedToPos
		bsr.w	loc_1E234
		bsr.w	loc_1AE08

locret_1A2DE:				
		rts	
; ===========================================================================

loc_1A2E0:				
		bsr.w	loc_1AAF0
		bsr.w	loc_1A8E8
		bsr.w	loc_1A974
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1A300
		subi.w	#$28,$12(a0) ; '('

loc_1A300:				
		bsr.w	loc_1AE4A
		bsr.w	loc_1AEAA
		rts	
; ===========================================================================

loc_1A30A:				
		tst.b	$39(a0)
		bne.s	loc_1A314
		bsr.w	loc_1AA38

loc_1A314:				
		bsr.w	loc_1ADCC
		bsr.w	loc_1A7C6
		bsr.w	loc_1A974
		jsr	SpeedToPos
		bsr.w	loc_1E234
		bsr.w	loc_1AE08
		rts	
; ===========================================================================

loc_1A330:				
		bsr.w	loc_1AAF0
		bsr.w	loc_1A8E8
		bsr.w	loc_1A974
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1A350
		subi.w	#$28,$12(a0) ; '('

loc_1A350:				
		bsr.w	loc_1AE4A
		bsr.w	loc_1AEAA
		rts	
; ===========================================================================

loc_1A35A:				
		move.w	(v_sonic_max_speed).w,d6
		move.w	(v_sonic_acceleration).w,d5
		move.w	(v_sonic_deceleration).w,d4
		tst.b	$2B(a0)
		bmi.w	loc_1A630
		tst.w	$2E(a0)
		bne.w	loc_1A5E0
		btst	#2,(v_joypad_hold).w
		beq.s	loc_1A382
		bsr.w	loc_1A6C0

loc_1A382:				
		btst	#3,(v_joypad_hold).w
		beq.s	loc_1A38E
		bsr.w	loc_1A746

loc_1A38E:				
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		bne.w	loc_1A5E0
		tst.w	$14(a0)
		bne.w	loc_1A5E0
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)
		btst	#3,$22(a0)
		beq.w	loc_1A48C
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	($FFFFB000).w,a1
		lea	(a1,d0.w),a1
		tst.b	$22(a1)
		bmi.w	loc_1A584
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#2,d2
		add.w	8(a0),d1
		sub.w	8(a1),d1
		tst.b	(f_super).w
		bne.w	loc_1A3FE
		cmpi.w	#2,d1
		blt.s	loc_1A44E
		cmp.w	d2,d1
		bge.s	loc_1A410
		bra.w	loc_1A584
; ===========================================================================

loc_1A3FE:				
		cmpi.w	#2,d1
		blt.w	loc_1A576
		cmp.w	d2,d1
		bge.w	loc_1A566
		bra.w	loc_1A584
; ===========================================================================

loc_1A410:				
		btst	#0,$22(a0)
		bne.s	loc_1A430
		move.b	#6,$1C(a0)
		addq.w	#6,d2
		cmp.w	d2,d1
		blt.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A430:				
		move.b	#$1D,$1C(a0)
		addq.w	#6,d2
		cmp.w	d2,d1
		blt.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bclr	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A44E:				
		btst	#0,$22(a0)
		beq.s	loc_1A46E
		move.b	#6,$1C(a0)
		cmpi.w	#-4,d1
		bge.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A46E:				
		move.b	#$1D,$1C(a0)
		cmpi.w	#-4,d1
		bge.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bset	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A48C:				
		jsr	loc_1ED56
		cmpi.w	#$C,d1
		blt.w	loc_1A584
		tst.b	(f_super).w
		bne.w	loc_1A55E
		cmpi.b	#3,$36(a0)
		bne.s	loc_1A500
		btst	#0,$22(a0)
		bne.s	loc_1A4D6
		move.b	#6,$1C(a0)
		move.w	8(a0),d3
		subq.w	#6,d3
		jsr	loc_1ED5A
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A4D6:				
		move.b	#$1D,$1C(a0)
		move.w	8(a0),d3
		subq.w	#6,d3
		jsr	loc_1ED5A
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bclr	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A500:				
		cmpi.b	#3,$37(a0)
		bne.s	loc_1A584
		btst	#0,$22(a0)
		beq.s	loc_1A534
		move.b	#6,$1C(a0)
		move.w	8(a0),d3
		addq.w	#6,d3
		jsr	loc_1ED5A
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$C,$1C(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A534:				
		move.b	#$1D,$1C(a0)
		move.w	8(a0),d3
		addq.w	#6,d3
		jsr	loc_1ED5A
		cmpi.w	#$C,d1
		blt.w	loc_1A5E0
		move.b	#$1E,$1C(a0)
		bset	#0,$22(a0)
		bra.w	loc_1A5E0
; ===========================================================================

loc_1A55E:				
		cmpi.b	#3,$36(a0)
		bne.s	loc_1A56E

loc_1A566:				
		bclr	#0,$22(a0)
		bra.s	loc_1A57C
; ===========================================================================

loc_1A56E:				
		cmpi.b	#3,$37(a0)
		bne.s	loc_1A584

loc_1A576:				
		bset	#0,$22(a0)

loc_1A57C:				
		move.b	#6,$1C(a0)
		bra.s	loc_1A5E0
; ===========================================================================

loc_1A584:				
		btst	#0,(v_joypad_hold).w
		beq.s	loc_1A5B2
		move.b	#7,$1C(a0)
		addq.w	#1,(v_sonic_look_delay_counter).w
		cmpi.w	#$78,(v_sonic_look_delay_counter).w ; 'x'
		bcs.s	loc_1A5E6
		move.w	#$78,(v_sonic_look_delay_counter).w ; 'x'
		cmpi.w	#$C8,(v_camera_y_shift).w
		beq.s	loc_1A5F8
		addq.w	#2,(v_camera_y_shift).w
		bra.s	loc_1A5F8
; ===========================================================================

loc_1A5B2:				
		btst	#1,(v_joypad_hold).w
		beq.s	loc_1A5E0
		move.b	#8,$1C(a0)
		addq.w	#1,(v_sonic_look_delay_counter).w
		cmpi.w	#$78,(v_sonic_look_delay_counter).w ; 'x'
		bcs.s	loc_1A5E6
		move.w	#$78,(v_sonic_look_delay_counter).w ; 'x'
		cmpi.w	#8,(v_camera_y_shift).w
		beq.s	loc_1A5F8
		subq.w	#2,(v_camera_y_shift).w
		bra.s	loc_1A5F8
; ===========================================================================

loc_1A5E0:				
		move.w	#0,(v_sonic_look_delay_counter).w

loc_1A5E6:				
		cmpi.w	#$60,(v_camera_y_shift).w ; '`'
		beq.s	loc_1A5F8
		bcc.s	loc_1A5F4
		addq.w	#4,(v_camera_y_shift).w

loc_1A5F4:				
		subq.w	#2,(v_camera_y_shift).w

loc_1A5F8:				
		tst.b	(f_super).w
		beq.w	loc_1A604
		move.w	#$C,d5

loc_1A604:				
		move.b	(v_joypad_hold).w,d0
		andi.b	#$C,d0
		bne.s	loc_1A630
		move.w	$14(a0),d0
		beq.s	loc_1A630
		bmi.s	loc_1A624
		sub.w	d5,d0
		bcc.s	loc_1A61E
		move.w	#0,d0

loc_1A61E:				
		move.w	d0,$14(a0)
		bra.s	loc_1A630
; ===========================================================================

loc_1A624:				
		add.w	d5,d0
		bcc.s	loc_1A62C
		move.w	#0,d0

loc_1A62C:				
		move.w	d0,$14(a0)

loc_1A630:				
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)

loc_1A64E:				
		move.b	$26(a0),d0
		addi.b	#$40,d0	; '@'
		bmi.s	locret_1A6BE
		move.b	#$40,d1	; '@'
		tst.w	$14(a0)
		beq.s	locret_1A6BE
		bmi.s	loc_1A666
		neg.w	d1

loc_1A666:				
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	loc_1EB84
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_1A6BE
		asl.w	#8,d1
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		beq.s	loc_1A6BA
		cmpi.b	#$40,d0	; '@'
		beq.s	loc_1A6A8
		cmpi.b	#-$80,d0
		beq.s	loc_1A6A2
		add.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts	
; ===========================================================================

loc_1A6A2:				
		sub.w	d1,$12(a0)
		rts	
; ===========================================================================

loc_1A6A8:				
		sub.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts	
; ===========================================================================

loc_1A6BA:				
		add.w	d1,$12(a0)

locret_1A6BE:				
		rts	
; ===========================================================================

loc_1A6C0:				
		move.w	$14(a0),d0
		beq.s	loc_1A6C8
		bpl.s	loc_1A6FA

loc_1A6C8:				
		bset	#0,$22(a0)
		bne.s	loc_1A6DC
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1A6DC:				
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1A6EE
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_1A6EE
		move.w	d1,d0

loc_1A6EE:				
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1A6FA:				
		sub.w	d4,d0
		bcc.s	loc_1A702
		move.w	#-$80,d0

loc_1A702:				
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		bne.s	locret_1A744
		cmpi.w	#$400,d0
		blt.s	locret_1A744
		move.b	#$D,$1C(a0)
		bclr	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	(PlaySound).l
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1A744
		move.b	#6,($FFFFD124).w
		move.b	#$15,($FFFFD11A).w

locret_1A744:				
		rts	
; ===========================================================================

loc_1A746:				
		move.w	$14(a0),d0
		bmi.s	loc_1A77A
		bclr	#0,$22(a0)
		beq.s	loc_1A760
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1A760:				
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1A76E
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_1A76E
		move.w	d6,d0

loc_1A76E:				
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1A77A:				
		add.w	d4,d0
		bcc.s	loc_1A782
		move.w	#$80,d0	

loc_1A782:				
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		bne.s	locret_1A7C4
		cmpi.w	#-$400,d0
		bgt.s	locret_1A7C4
		move.b	#$D,$1C(a0)
		bset	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	(PlaySound).l
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1A7C4
		move.b	#6,($FFFFD124).w
		move.b	#$15,($FFFFD11A).w

locret_1A7C4:				
		rts	
; ===========================================================================

loc_1A7C6:				
		move.w	(v_sonic_max_speed).w,d6
		asl.w	#1,d6
		move.w	(v_sonic_acceleration).w,d5
		asr.w	#1,d5
		move.w	#$20,d4	; ' '
		tst.b	$2B(a0)
		bmi.w	loc_1A85A
		tst.w	$2E(a0)
		bne.s	loc_1A7FC
		btst	#2,(v_joypad_hold).w
		beq.s	loc_1A7F0
		bsr.w	loc_1A8A2

loc_1A7F0:				
		btst	#3,(v_joypad_hold).w
		beq.s	loc_1A7FC
		bsr.w	loc_1A8C6

loc_1A7FC:				
		move.w	$14(a0),d0
		beq.s	loc_1A81E
		bmi.s	loc_1A812
		sub.w	d5,d0
		bcc.s	loc_1A80C
		move.w	#0,d0

loc_1A80C:				
		move.w	d0,$14(a0)
		bra.s	loc_1A81E
; ===========================================================================

loc_1A812:				
		add.w	d5,d0
		bcc.s	loc_1A81A
		move.w	#0,d0

loc_1A81A:				
		move.w	d0,$14(a0)

loc_1A81E:				
		tst.w	$14(a0)
		bne.s	loc_1A85A
		tst.b	$39(a0)
		bne.s	loc_1A848
		bclr	#2,$22(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#5,$C(a0)
		bra.s	loc_1A85A
; ===========================================================================

loc_1A848:				
		move.w	#$400,$14(a0)
		btst	#0,$22(a0)
		beq.s	loc_1A85A
		neg.w	$14(a0)

loc_1A85A:				
		cmpi.w	#$60,(v_camera_y_shift).w ; '`'
		beq.s	loc_1A86C
		bcc.s	loc_1A868
		addq.w	#4,(v_camera_y_shift).w

loc_1A868:				
		subq.w	#2,(v_camera_y_shift).w

loc_1A86C:				
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)
		muls.w	$14(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_1A890
		move.w	#$1000,d1

loc_1A890:				
		cmpi.w	#-$1000,d1
		bge.s	loc_1A89A
		move.w	#-$1000,d1

loc_1A89A:				
		move.w	d1,$10(a0)
		bra.w	loc_1A64E
; ===========================================================================

loc_1A8A2:				
		move.w	$14(a0),d0
		beq.s	loc_1A8AA
		bpl.s	loc_1A8B8

loc_1A8AA:				
		bset	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1A8B8:				
		sub.w	d4,d0
		bcc.s	loc_1A8C0
		move.w	#-$80,d0

loc_1A8C0:				
		move.w	d0,$14(a0)
		rts	
; ===========================================================================

loc_1A8C6:				
		move.w	$14(a0),d0
		bmi.s	loc_1A8DA
		bclr	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1A8DA:				
		add.w	d4,d0
		bcc.s	loc_1A8E2
		move.w	#$80,d0	

loc_1A8E2:				
		move.w	d0,$14(a0)
		rts	
; ===========================================================================

loc_1A8E8:				
		move.w	(v_sonic_max_speed).w,d6
		move.w	(v_sonic_acceleration).w,d5
		asl.w	#1,d5
		btst	#4,$22(a0)
		bne.s	loc_1A932
		move.w	$10(a0),d0
		btst	#2,(v_joypad_hold).w
		beq.s	loc_1A918
		bset	#0,$22(a0)
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1A918
		move.w	d1,d0

loc_1A918:				
		btst	#3,(v_joypad_hold).w
		beq.s	loc_1A92E
		bclr	#0,$22(a0)
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1A92E
		move.w	d6,d0

loc_1A92E:				
		move.w	d0,$10(a0)

loc_1A932:				
		cmpi.w	#$60,(v_camera_y_shift).w ; '`'
		beq.s	loc_1A944
		bcc.s	loc_1A940
		addq.w	#4,(v_camera_y_shift).w

loc_1A940:				
		subq.w	#2,(v_camera_y_shift).w

loc_1A944:				
		cmpi.w	#-$400,$12(a0)
		bcs.s	locret_1A972
		move.w	$10(a0),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	locret_1A972
		bmi.s	loc_1A966
		sub.w	d1,d0
		bcc.s	loc_1A960
		move.w	#0,d0

loc_1A960:				
		move.w	d0,$10(a0)
		rts	
; ===========================================================================

loc_1A966:				
		sub.w	d1,d0
		bcs.s	loc_1A96E
		move.w	#0,d0

loc_1A96E:				
		move.w	d0,$10(a0)

locret_1A972:				
		rts	
; ===========================================================================

loc_1A974:				
		move.l	8(a0),d1
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(v_boundary_left_next).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0
		bhi.s	loc_1A9BA
		move.w	(v_boundary_right_next).w,d0
		addi.w	#$128,d0
		tst.b	(v_current_boss).w
		bne.s	loc_1A9A2
		addi.w	#$40,d0	; '@'

loc_1A9A2:				
		cmp.w	d1,d0
		bls.s	loc_1A9BA

loc_1A9A6:				
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		blt.s	loc_1A9B6
		rts	
; ===========================================================================

loc_1A9B6:				
		jmpto	KillCharacter, JmpTo_KillCharacter		
; ===========================================================================

loc_1A9BA:				
		move.w	d0,8(a0)
		move.w	#0,$A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		bra.s	loc_1A9A6
; ===========================================================================

loc_1A9D2:				
		tst.b	$2B(a0)
		bmi.s	locret_1A9F8
		move.w	$14(a0),d0
		bpl.s	loc_1A9E0
		neg.w	d0

loc_1A9E0:				
		cmpi.w	#$80,d0	
		bcs.s	locret_1A9F8
		move.b	(v_joypad_hold).w,d0
		andi.b	#$C,d0
		bne.s	locret_1A9F8
		btst	#1,(v_joypad_hold).w
		bne.s	loc_1A9FA

locret_1A9F8:				
		rts	
; ===========================================================================

loc_1A9FA:				
		btst	#2,$22(a0)
		beq.s	loc_1AA04
		rts	
; ===========================================================================

loc_1AA04:				
		bset	#2,$22(a0)
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#5,$C(a0)
		move.w	#$BE,d0	
		jsr	(PlaySound).l
		tst.w	$14(a0)
		bne.s	locret_1AA36
		move.w	#$200,$14(a0)

locret_1AA36:				
		rts	
; ===========================================================================

loc_1AA38:				
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0	; 'p'
		beq.w	locret_1AAE6
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#-$80,d0
		bsr.w	loc_1EC0A
		cmpi.w	#6,d1
		blt.w	locret_1AAE6
		move.w	#$680,d2
		tst.b	(f_super).w
		beq.s	loc_1AA68
		move.w	#$800,d2

loc_1AA68:				
		btst	#6,$22(a0)
		beq.s	loc_1AA74
		move.w	#$380,d2

loc_1AA74:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0	; '@'
		jsr	(CalcSine).l
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$10(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$12(a0)
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		addq.l	#4,sp
		move.b	#1,$3C(a0)
		clr.b	$38(a0)
		move.w	#$A0,d0	
		jsr	(PlaySound).l
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		btst	#2,$22(a0)
		bne.s	loc_1AAE8
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		bset	#2,$22(a0)
		addq.w	#5,$C(a0)

locret_1AAE6:				
		rts	
; ===========================================================================

loc_1AAE8:				
		bset	#4,$22(a0)
		rts	
; ===========================================================================

loc_1AAF0:				
		tst.b	$3C(a0)
		beq.s	loc_1AB22
		move.w	#-$400,d1
		btst	#6,$22(a0)
		beq.s	loc_1AB06
		move.w	#-$200,d1

loc_1AB06:				
		cmp.w	$12(a0),d1
		ble.s	loc_1AB1A
		move.b	(v_joypad_hold).w,d0
		andi.b	#$70,d0	; 'p'
		bne.s	loc_1AB1A
		move.w	d1,$12(a0)

loc_1AB1A:				
		tst.b	$12(a0)
		beq.s	loc_1AB38
		rts	
; ===========================================================================

loc_1AB22:				
		tst.b	$39(a0)
		bne.s	locret_1AB36
		cmpi.w	#-$FC0,$12(a0)
		bge.s	locret_1AB36
		move.w	#-$FC0,$12(a0)

locret_1AB36:				
		rts	
; ===========================================================================

loc_1AB38:				
		tst.b	(f_super).w
		bne.s	locret_1ABA4
		cmpi.b	#7,(v_emeralds).w
		bne.s	locret_1ABA4
		cmpi.w	#$32,(v_rings).w ; '2'
		bcs.s	locret_1ABA4
		move.b	#1,(v_super_sonic_palette).w
		move.b	#$F,(v_palette_timer).w
		move.b	#1,(f_super).w
		move.b	#-$7F,$2A(a0)
		move.b	#$1F,$1C(a0)
		move.b	#$7E,($FFFFD040).w ; '~'
		move.w	#$A00,(v_sonic_max_speed).w
		move.w	#$30,(v_sonic_acceleration).w ; '0'
		move.w	#$100,(v_sonic_deceleration).w
		move.w	#0,$32(a0)
		bset	#1,$2B(a0)
		move.w	#$DF,d0	
		jsr	(PlaySound).l
		move.w	#$96,d0	
		jmp	(PlayMusic).l
; ===========================================================================

locret_1ABA4:				
		rts	
; ===========================================================================

loc_1ABA6:				
		tst.b	(f_super).w
		beq.w	locret_1AC3C
		tst.b	(f_hud_time_update).w
		beq.s	loc_1ABF2
		subq.w	#1,(v_super_sonic_frame_count).w
		bpl.w	locret_1AC3C
		move.w	#$3C,(v_super_sonic_frame_count).w ; '<'
		tst.w	(v_rings).w
		beq.s	loc_1ABF2
		ori.b	#1,(v_hud_rings_update).w
		cmpi.w	#1,(v_rings).w
		beq.s	loc_1ABE6
		cmpi.w	#$A,(v_rings).w
		beq.s	loc_1ABE6
		cmpi.w	#$64,(v_rings).w ; 'd'
		bne.s	loc_1ABEC

loc_1ABE6:				
		ori.b	#-$80,(v_hud_rings_update).w

loc_1ABEC:				
		subq.w	#1,(v_rings).w
		bne.s	locret_1AC3C

loc_1ABF2:				
		move.b	#2,(v_super_sonic_palette).w
		move.w	#$28,(v_palette_frame).w ; '('
		move.b	#0,(f_super).w
		move.b	#1,$1D(a0)
		move.w	#1,$32(a0)
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		btst	#6,$22(a0)
		beq.s	locret_1AC3C
		move.w	#$300,(v_sonic_max_speed).w
		move.w	#6,(v_sonic_acceleration).w
		move.w	#$40,(v_sonic_deceleration).w ; '@'

locret_1AC3C:				
		rts	
; ===========================================================================

loc_1AC3E:				
		tst.b	$39(a0)
		bne.s	loc_1AC8E
		cmpi.b	#8,$1C(a0)
		bne.s	locret_1AC8C
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0	; 'p'
		beq.w	locret_1AC8C
		move.b	#9,$1C(a0)
		move.w	#$E0,d0	
		jsr	(PlaySound).l
		addq.l	#4,sp
		move.b	#1,$39(a0)
		move.w	#0,$3A(a0)
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1AC84
		move.b	#2,($FFFFD11C).w

loc_1AC84:				
		bsr.w	loc_1A974
		bsr.w	loc_1E234

locret_1AC8C:				
		rts	
; ===========================================================================

loc_1AC8E:				
		move.b	(v_joypad_hold).w,d0
		btst	#1,d0
		bne.w	loc_1AD30
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#5,$C(a0)
		move.b	#0,$39(a0)
		moveq	#0,d0
		move.b	$3A(a0),d0
		add.w	d0,d0
		move.w	word_1AD0C(pc,d0.w),$14(a0)
		tst.b	(f_super).w
		beq.s	loc_1ACD0
		move.w	word_1AD1E(pc,d0.w),$14(a0)

loc_1ACD0:				
		move.w	$14(a0),d0
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0
		neg.w	d0
		addi.w	#$2000,d0
		move.w	d0,(v_hscroll_delay_val).w
		btst	#0,$22(a0)
		beq.s	loc_1ACF4
		neg.w	$14(a0)

loc_1ACF4:				
		bset	#2,$22(a0)
		move.b	#0,($FFFFD11C).w
		move.w	#$BC,d0	
		jsr	(PlaySound).l
		bra.s	loc_1AD78
; ===========================================================================
word_1AD0C:	dc.w  $800		; 0
		dc.w  $880		; 1
		dc.w  $900		; 2
		dc.w  $980		; 3
		dc.w  $A00		; 4
		dc.w  $A80		; 5
		dc.w  $B00		; 6
		dc.w  $B80		; 7
		dc.w  $C00		; 8
word_1AD1E:	dc.w  $B00		; 0
		dc.w  $B80		; 1
		dc.w  $C00		; 2
		dc.w  $C80		; 3
		dc.w  $D00		; 4
		dc.w  $D80		; 5
		dc.w  $E00		; 6
		dc.w  $E80		; 7
		dc.w  $F00		; 8
; ===========================================================================

loc_1AD30:				
		tst.w	$3A(a0)
		beq.s	loc_1AD48
		move.w	$3A(a0),d0
		lsr.w	#5,d0
		sub.w	d0,$3A(a0)
		bcc.s	loc_1AD48
		move.w	#0,$3A(a0)

loc_1AD48:				
		move.b	(v_joypad_press).w,d0
		andi.b	#$70,d0	; 'p'
		beq.w	loc_1AD78
		move.w	#$900,$1C(a0)
		move.w	#$E0,d0	
		jsr	(PlaySound).l
		addi.w	#$200,$3A(a0)
		cmpi.w	#$800,$3A(a0)
		bcs.s	loc_1AD78
		move.w	#$800,$3A(a0)

loc_1AD78:				
		addq.l	#4,sp
		cmpi.w	#$60,(v_camera_y_shift).w ; '`'
		beq.s	loc_1AD8C
		bcc.s	loc_1AD88
		addq.w	#4,(v_camera_y_shift).w

loc_1AD88:				
		subq.w	#2,(v_camera_y_shift).w

loc_1AD8C:				
		bsr.w	loc_1A974
		bsr.w	loc_1E234
		rts	
; ===========================================================================

loc_1AD96:				
		move.b	$26(a0),d0
		addi.b	#$60,d0	; '`'
		cmpi.b	#-$40,d0
		bcc.s	locret_1ADCA
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$20,d0	; ' '
		asr.l	#8,d0
		tst.w	$14(a0)
		beq.s	locret_1ADCA
		bmi.s	loc_1ADC6
		tst.w	d0
		beq.s	locret_1ADC4
		add.w	d0,$14(a0)

locret_1ADC4:				
		rts	
; ===========================================================================

loc_1ADC6:				
		add.w	d0,$14(a0)

locret_1ADCA:				
		rts	
; ===========================================================================

loc_1ADCC:				
		move.b	$26(a0),d0
		addi.b	#$60,d0	; '`'
		cmpi.b	#-$40,d0
		bcc.s	locret_1AE06
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$50,d0	; 'P'
		asr.l	#8,d0
		tst.w	$14(a0)
		bmi.s	loc_1ADFC
		tst.w	d0
		bpl.s	loc_1ADF6
		asr.l	#2,d0

loc_1ADF6:				
		add.w	d0,$14(a0)
		rts	
; ===========================================================================

loc_1ADFC:				
		tst.w	d0
		bmi.s	loc_1AE02
		asr.l	#2,d0

loc_1AE02:				
		add.w	d0,$14(a0)

locret_1AE06:				
		rts	
; ===========================================================================

loc_1AE08:				
		nop	
		tst.b	$38(a0)
		bne.s	locret_1AE42
		tst.w	$2E(a0)
		bne.s	loc_1AE44
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		beq.s	locret_1AE42
		move.w	$14(a0),d0
		bpl.s	loc_1AE2C
		neg.w	d0

loc_1AE2C:				
		cmpi.w	#$280,d0
		bcc.s	locret_1AE42
		clr.w	$14(a0)
		bset	#1,$22(a0)
		move.w	#$1E,$2E(a0)

locret_1AE42:				
		rts	
; ===========================================================================

loc_1AE44:				
		subq.w	#1,$2E(a0)
		rts	
; ===========================================================================

loc_1AE4A:				
		move.b	$26(a0),d0
		beq.s	loc_1AE64
		bpl.s	loc_1AE5A
		addq.b	#2,d0
		bcc.s	loc_1AE58
		moveq	#0,d0

loc_1AE58:				
		bra.s	loc_1AE60
; ===========================================================================

loc_1AE5A:				
		subq.b	#2,d0
		bcc.s	loc_1AE60
		moveq	#0,d0

loc_1AE60:				
		move.b	d0,$26(a0)

loc_1AE64:				
		move.b	$27(a0),d0
		beq.s	locret_1AEA8
		tst.w	$14(a0)
		bmi.s	loc_1AE88

loc_1AE70:				
		move.b	$2D(a0),d1
		add.b	d1,d0
		bcc.s	loc_1AE86
		subq.b	#1,$2C(a0)
		bcc.s	loc_1AE86
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1AE86:				
		bra.s	loc_1AEA4
; ===========================================================================

loc_1AE88:				
		tst.b	$29(a0)
		bne.s	loc_1AE70
		move.b	$2D(a0),d1
		sub.b	d1,d0
		bcc.s	loc_1AEA4
		subq.b	#1,$2C(a0)
		bcc.s	loc_1AEA4
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1AEA4:				
		move.b	d0,$27(a0)

locret_1AEA8:				
		rts	
; ===========================================================================

loc_1AEAA:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1AEC2
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1AEC2:				
		move.b	$3F(a0),d5
		move.w	$10(a0),d1
		move.w	$12(a0),d2
		jsr	(CalcAngle).l
		subi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		cmpi.b	#$40,d0	; '@'
		beq.w	loc_1AF8C
		cmpi.b	#-$80,d0
		beq.w	loc_1AFE8
		cmpi.b	#-$40,d0
		beq.w	loc_1B044
		bsr.w	loc_1F05E
		tst.w	d1
		bpl.s	loc_1AF06
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1AF06:				
		bsr.w	loc_1EEDC
		tst.w	d1
		bpl.s	loc_1AF18
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1AF18:				
		bsr.w	loc_1EC4E
		tst.w	d1
		bpl.s	locret_1AF8A
		move.b	$12(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_1AF30
		cmp.b	d2,d0
		blt.s	locret_1AF8A

loc_1AF30:				
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1B0A0
		move.b	d3,d0
		addi.b	#$20,d0	; ' '
		andi.b	#$40,d0	; '@'
		bne.s	loc_1AF68
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0	; ' '
		beq.s	loc_1AF5A
		asr	$12(a0)
		bra.s	loc_1AF7C
; ===========================================================================

loc_1AF5A:				
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)
		rts	
; ===========================================================================

loc_1AF68:				
		move.w	#0,$10(a0)
		cmpi.w	#$FC0,$12(a0)
		ble.s	loc_1AF7C
		move.w	#$FC0,$12(a0)

loc_1AF7C:				
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	locret_1AF8A
		neg.w	$14(a0)

locret_1AF8A:				
		rts	
; ===========================================================================

loc_1AF8C:				
		bsr.w	loc_1F05E
		tst.w	d1
		bpl.s	loc_1AFA6
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)
		move.w	$12(a0),$14(a0)
		rts	
; ===========================================================================

loc_1AFA6:				
		bsr.w	loc_1EF2E
		tst.w	d1
		bpl.s	loc_1AFC0
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	locret_1AFBE
		move.w	#0,$12(a0)

locret_1AFBE:				
		rts	
; ===========================================================================

loc_1AFC0:				
		tst.w	$12(a0)
		bmi.s	locret_1AFE6
		bsr.w	loc_1EC4E
		tst.w	d1
		bpl.s	locret_1AFE6
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1B0A0
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)

locret_1AFE6:				
		rts	
; ===========================================================================

loc_1AFE8:				
		bsr.w	loc_1F05E
		tst.w	d1
		bpl.s	loc_1AFFA
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1AFFA:				
		bsr.w	loc_1EEDC
		tst.w	d1
		bpl.s	loc_1B00C
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1B00C:				
		bsr.w	loc_1EF2E
		tst.w	d1
		bpl.s	locret_1B042
		sub.w	d1,$C(a0)
		move.b	d3,d0
		addi.b	#$20,d0	; ' '
		andi.b	#$40,d0	; '@'
		bne.s	loc_1B02C
		move.w	#0,$12(a0)
		rts	
; ===========================================================================

loc_1B02C:				
		move.b	d3,$26(a0)
		bsr.w	loc_1B0A0
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	locret_1B042
		neg.w	$14(a0)

locret_1B042:				
		rts	
; ===========================================================================

loc_1B044:				
		bsr.w	loc_1EEDC
		tst.w	d1
		bpl.s	loc_1B05E
		add.w	d1,8(a0)
		move.w	#0,$10(a0)
		move.w	$12(a0),$14(a0)
		rts	
; ===========================================================================

loc_1B05E:				
		bsr.w	loc_1EF2E
		tst.w	d1
		bpl.s	loc_1B078
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	locret_1B076
		move.w	#0,$12(a0)

locret_1B076:				
		rts	
; ===========================================================================

loc_1B078:				
		tst.w	$12(a0)
		bmi.s	locret_1B09E
		bsr.w	loc_1EC4E
		tst.w	d1
		bpl.s	locret_1B09E
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1B0A0
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)

locret_1B09E:				
		rts	
; ===========================================================================

loc_1B0A0:				
		tst.b	$39(a0)
		bne.s	loc_1B0DA
		move.b	#0,$1C(a0)

loc_1B0AC:				
		_cmpi.b	#1,0(a0)
		bne.w	loc_1CB5C
		btst	#2,$22(a0)
		beq.s	loc_1B0DA
		bclr	#2,$22(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.b	#0,$1C(a0)
		subq.w	#5,$C(a0)

loc_1B0DA:				
		bclr	#1,$22(a0)
		bclr	#5,$22(a0)
		bclr	#4,$22(a0)
		move.b	#0,$3C(a0)
		move.w	#0,(v_enemy_combo).w
		move.b	#0,$27(a0)
		move.b	#0,$29(a0)
		move.b	#0,$2C(a0)
		move.w	#0,(v_sonic_look_delay_counter).w
		cmpi.b	#$14,$1C(a0)
		bne.s	locret_1B11E
		move.b	#0,$1C(a0)

locret_1B11E:				
		rts	
; ===========================================================================

loc_1B120:				
		tst.w	(f_debug_enable).w
		beq.s	loc_1B13A
		btst	#4,(v_joypad_press_actual).w
		beq.s	loc_1B13A
		move.w	#1,(v_debug_active).w
		clr.b	(f_lock_controls).w
		rts	
; ===========================================================================

loc_1B13A:				
		tst.b	$25(a0)
		bmi.w	loc_1B1CA
		jsr	SpeedToPos
		addi.w	#$30,$12(a0) ; '0'
		btst	#6,$22(a0)
		beq.s	loc_1B15C
		subi.w	#$20,$12(a0) ; ' '

loc_1B15C:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1B16A
		andi.w	#$7FF,$C(a0)

loc_1B16A:				
		bsr.w	loc_1B184
		bsr.w	loc_1A974
		bsr.w	loc_1A15C
		bsr.w	loc_1B350
		bsr.w	loc_1B848
		jmp	DisplaySprite
; ===========================================================================

loc_1B184:				
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		blt.w	JmpTo_KillCharacter
		bsr.w	loc_1AEAA
		btst	#1,$22(a0)
		bne.s	locret_1B1C8
		moveq	#0,d0
		move.w	d0,$12(a0)
		move.w	d0,$10(a0)
		move.w	d0,$14(a0)
		move.b	d0,$2A(a0)
		move.b	#0,$1C(a0)
		subq.b	#2,$24(a0)
		move.w	#$78,$30(a0) ; 'x'
		move.b	#0,$39(a0)

locret_1B1C8:				
		rts	
; ===========================================================================

loc_1B1CA:				
		subq.b	#2,$24(a0)
		move.b	#0,$25(a0)
		bsr.w	loc_1A15C
		bsr.w	loc_1B350
		bsr.w	loc_1B848
		jmp	DisplaySprite
; ===========================================================================

loc_1B1E6:				
		tst.w	(f_debug_enable).w
		beq.s	loc_1B200
		btst	#4,(v_joypad_press_actual).w
		beq.s	loc_1B200
		move.w	#1,(v_debug_active).w
		clr.b	(f_lock_controls).w
		rts	
; ===========================================================================

loc_1B200:				
		bsr.w	loc_1B21C
		jsr	ObjectFall
		bsr.w	loc_1A15C
		bsr.w	loc_1B350
		bsr.w	loc_1B848
		jmp	DisplaySprite
; ===========================================================================

loc_1B21C:				
		move.b	#1,(f_disable_horiz_scroll).w
		move.b	#0,$39(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$100,d0
		cmp.w	$C(a0),d0
		bge.w	locret_1B31A
		move.b	#8,$24(a0)
		move.w	#$3C,$3A(a0) ; '<'
		addq.b	#1,(f_hud_lives_update).w
		subq.b	#1,(v_lives).w
		bne.s	loc_1B28E
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w ; '9'
		move.b	#$39,($FFFFB0C0).w ; '9'
		move.b	#1,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		clr.b	(f_time_over).w

loc_1B26E:				
		clr.b	(f_hud_time_update).w
		clr.b	(f_hud_time_update_p2).w
		move.b	#8,$24(a0)
		move.w	#$9B,d0	
		jsr	(PlayMusic).l
		moveq	#3,d0
		jmp	(AddPLC).l
; ===========================================================================

loc_1B28E:				
		tst.b	(f_time_over).w
		beq.s	loc_1B2B8
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w ; '9'
		move.b	#$39,($FFFFB0C0).w ; '9'
		move.b	#2,($FFFFB09A).w
		move.b	#3,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		bra.s	loc_1B26E
; ===========================================================================

loc_1B2B8:				
		tst.w	(f_two_player).w
		beq.s	locret_1B31A
		move.b	#0,(f_disable_horiz_scroll).w
		move.b	#$A,$24(a0)
		move.w	(v_x_pos_lampcopy).w,8(a0)
		move.w	(v_y_pos_lampcopy).w,$C(a0)
		move.w	(v_ost_tile_lampcopy).w,2(a0)
		move.w	(v_ost_top_solid_bit_lampcopy).w,$3E(a0)
		clr.w	(v_rings).w
		clr.b	(v_ring_reward).w
		move.b	#0,$2A(a0)
		move.b	#5,$1C(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		move.w	#0,$14(a0)
		move.b	#2,$22(a0)
		move.w	#0,$2E(a0)
		move.w	#0,$3A(a0)

locret_1B31A:				
		rts	
; ===========================================================================

loc_1B31C:				
		tst.w	$3A(a0)
		beq.s	locret_1B32E
		subq.w	#1,$3A(a0)
		bne.s	locret_1B32E
		move.w	#1,(f_restart).w

locret_1B32E:				
		rts	
; ===========================================================================

loc_1B330:				
		tst.w	(v_camera_x_pos_diff).w
		bne.s	loc_1B342
		tst.w	(v_camera_y_pos_diff).w
		bne.s	loc_1B342
		move.b	#2,$24(a0)

loc_1B342:				
		bsr.w	loc_1B350
		bsr.w	loc_1B848
		jmp	DisplaySprite
; ===========================================================================

loc_1B350:				
					
		lea	(off_1B618).l,a1
		tst.b	(f_super).w
		beq.s	loc_1B362
		lea	(off_1B7C6).l,a1

loc_1B362:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_1B384
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		bclr	#5,$22(a0)

loc_1B384:				
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_1B3F4
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_1B3C2
		move.b	d0,$1E(a0)

loc_1B3AA:				
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-$10,d0
		bcc.s	loc_1B3C4

loc_1B3BA:				
		move.b	d0,$1A(a0)
		addq.b	#1,$1B(a0)

locret_1B3C2:				
		rts	
; ===========================================================================

loc_1B3C4:				
		addq.b	#1,d0
		bne.s	loc_1B3D4
		move.b	#0,$1B(a0)
		move.b	1(a1),d0
		bra.s	loc_1B3BA
; ===========================================================================

loc_1B3D4:				
		addq.b	#1,d0
		bne.s	loc_1B3E8
		move.b	2(a1,d1.w),d0
		sub.b	d0,$1B(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_1B3BA
; ===========================================================================

loc_1B3E8:				
		addq.b	#1,d0
		bne.s	locret_1B3F2
		move.b	2(a1,d1.w),$1C(a0)

locret_1B3F2:				
		rts	
; ===========================================================================

loc_1B3F4:				
		addq.b	#1,d0
		bne.w	loc_1B586
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	loc_1B520
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_1B410
		beq.s	loc_1B410
		subq.b	#1,d0

loc_1B410:				
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1B41C
		not.b	d0

loc_1B41C:				
		addi.b	#$10,d0
		bpl.s	loc_1B424
		moveq	#3,d1

loc_1B424:				
		andi.b	#-4,1(a0)
		eor.b	d1,d2
		or.b	d2,1(a0)
		btst	#5,$22(a0)
		bne.w	loc_1B5D2
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	$14(a0),d2
		bpl.s	loc_1B448
		neg.w	d2

loc_1B448:				
		tst.b	$2B(a0)
		bpl.w	loc_1B452
		add.w	d2,d2

loc_1B452:				
		tst.b	(f_super).w
		bne.s	loc_1B4AE
		lea	(byte_1B666).l,a1
		cmpi.w	#$600,d2
		bcc.s	loc_1B46C
		lea	(byte_1B65C).l,a1
		add.b	d0,d0

loc_1B46C:				
		add.b	d0,d0
		move.b	d0,d3
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_1B48A
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_1B48A:				
		move.b	d0,$1A(a0)
		add.b	d3,$1A(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_1B4AC
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1B4A2
		moveq	#0,d2

loc_1B4A2:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		addq.b	#1,$1B(a0)

locret_1B4AC:				
		rts	
; ===========================================================================

loc_1B4AE:				
		lea	(byte_1B810).l,a1

loc_1B4B4:
		cmpi.w	#$800,d2
		bcc.s	loc_1B4C6
		lea	(byte_1B806).l,a1
		add.b	d0,d0
		add.b	d0,d0
		bra.s	loc_1B4C8
; ===========================================================================

loc_1B4C6:				
		lsr.b	#1,d0

loc_1B4C8:				
		move.b	d0,d3
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-1,d0
		bne.s	loc_1B4E4
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_1B4E4:				
		move.b	d0,$1A(a0)
		add.b	d3,$1A(a0)
		move.b	($FFFFFE05).w,d1
		andi.b	#3,d1
		bne.s	loc_1B504
		cmpi.b	#-$4B,$1A(a0)
		bcc.s	loc_1B504
		addi.b	#$20,$1A(a0) ; ' '

loc_1B504:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_1B51E
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1B514
		moveq	#0,d2

loc_1B514:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		addq.b	#1,$1B(a0)

locret_1B51E:				
		rts	
; ===========================================================================

loc_1B520:				
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1B54E

loc_1B530:
		andi.b	#-4,1(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		addi.b	#$5F,d0	; '_'
		move.b	d0,$1A(a0)

loc_1B546:
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1B54E:				
		andi.b	#-4,1(a0)

loc_1B554:
		tst.b	$29(a0)
		beq.s	loc_1B566
		ori.b	#1,1(a0)

loc_1B560:
		addi.b	#$B,d0
		bra.s	loc_1B572
; ===========================================================================

loc_1B566:				
		ori.b	#3,1(a0)
		neg.b	d0
		addi.b	#-$71,d0

loc_1B572:				
		divu.w	#$16,d0
		addi.b	#$5F,d0	; '_'
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1B586:				
		subq.b	#1,$1E(a0)
		bpl.w	locret_1B3C2
		addq.b	#1,d0
		bne.s	loc_1B5D2
		move.w	$14(a0),d2
		bpl.s	loc_1B59A
		neg.w	d2

loc_1B59A:				
		lea	(byte_1B67A).l,a1
		cmpi.w	#$600,d2
		bcc.s	loc_1B5AC
		lea	(byte_1B670).l,a1

loc_1B5AC:				
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_1B5B6
		moveq	#0,d2

loc_1B5B6:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		bra.w	loc_1B3AA
; ===========================================================================

loc_1B5D2:				
		subq.b	#1,$1E(a0)
		bpl.w	locret_1B3C2
		move.w	$14(a0),d2
		bmi.s	loc_1B5E2
		neg.w	d2

loc_1B5E2:				
		addi.w	#$800,d2
		bpl.s	loc_1B5EA
		moveq	#0,d2

loc_1B5EA:				
		lsr.w	#6,d2
		move.b	d2,$1E(a0)
		lea	(byte_1B684).l,a1
		tst.b	(f_super).w
		beq.s	loc_1B602
		lea	(byte_1B81A).l,a1

loc_1B602:				
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		bra.w	loc_1B3AA
; ===========================================================================
off_1B618:	dc.w byte_1B65C-off_1B618; 0 
		dc.w byte_1B666-off_1B618; 1
		dc.w byte_1B670-off_1B618; 2
		dc.w byte_1B67A-off_1B618; 3
		dc.w byte_1B684-off_1B618; 4
		dc.w byte_1B68E-off_1B618; 5
		dc.w byte_1B744-off_1B618; 6
		dc.w byte_1B74A-off_1B618; 7
		dc.w byte_1B74F-off_1B618; 8
		dc.w byte_1B754-off_1B618; 9
		dc.w byte_1B760-off_1B618; 10
		dc.w byte_1B764-off_1B618; 11
		dc.w byte_1B768-off_1B618; 12
		dc.w byte_1B76E-off_1B618; 13
		dc.w byte_1B775-off_1B618; 14
		dc.w byte_1B779-off_1B618; 15
		dc.w byte_1B780-off_1B618; 16
		dc.w byte_1B784-off_1B618; 17
		dc.w byte_1B788-off_1B618; 18
		dc.w byte_1B78E-off_1B618; 19
		dc.w byte_1B793-off_1B618; 20
		dc.w byte_1B797-off_1B618; 21
		dc.w byte_1B79E-off_1B618; 22
		dc.w byte_1B7A1-off_1B618; 23
		dc.w byte_1B7A4-off_1B618; 24
		dc.w byte_1B7A7-off_1B618; 25
		dc.w byte_1B7A7-off_1B618; 26
		dc.w byte_1B7AA-off_1B618; 27
		dc.w byte_1B7AE-off_1B618; 28
		dc.w byte_1B7B2-off_1B618; 29
		dc.w byte_1B7B6-off_1B618; 30
		dc.w byte_1B837-off_1B618; 31
		dc.w byte_1B7BE-off_1B618; 32
		dc.w byte_1B7C2-off_1B618; 33
byte_1B65C:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF; 0	
					; h+46A4o
byte_1B666:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF; 0	
					; h+46A4o
byte_1B670:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF; 0	
					; h+46A4o ...
byte_1B67A:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF; 0	
					; h+46A4o
byte_1B684:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF; 0	
					; h+46A4o
byte_1B68E:	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1; 0
					
		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2; 16
		dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5; 32
		dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6; 48
		dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4; 64
		dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6; 80
		dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4; 96
		dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5; 112
		dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5; 128
		dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4; 144
		dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8; 160
		dc.b   8,  9,  9,  9,$FE,  6; 176
byte_1B744:	dc.b   9,$CC,$CD,$CE,$CD,$FF; 0	
byte_1B74A:	dc.b   5, $B, $C,$FE,  1; 0 
byte_1B74F:	dc.b   5,$4C,$4D,$FE,  1; 0 
byte_1B754:	dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF; 0	
byte_1B760:	dc.b   1,  2,$FD,  0	; 0 
byte_1B764:	dc.b   3, $A,$FD,  0	; 0 
byte_1B768:	dc.b   3,$C8,$C9,$CA,$CB,$FF; 0	
byte_1B76E:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0; 0 
byte_1B775:	dc.b   7,$54,$59,$FF	; 0 
byte_1B779:	dc.b   7,$54,$55,$56,$57,$58,$FF; 0 
byte_1B780:	dc.b $2F,$5B,$FD,  0	; 0 
byte_1B784:	dc.b   1,$50,$51,$FF	; 0 
byte_1B788:	dc.b  $F,$43,$43,$43,$FE,  1; 0	
byte_1B78E:	dc.b  $F,$43,$44,$FE,  1; 0 
byte_1B793:	dc.b $13,$6B,$6C,$FF	; 0 
byte_1B797:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0; 0 
byte_1B79E:	dc.b $20,$5E,$FF	; 0 
byte_1B7A1:	dc.b $20,$5D,$FF	; 0 
byte_1B7A4:	dc.b $20,$5C,$FF	; 0 
byte_1B7A7:	dc.b $40,$4E,$FF	; 0 
byte_1B7AA:	dc.b   9,$4E,$4F,$FF	; 0 
byte_1B7AE:	dc.b $77,  0,$FD,  0	; 0 
byte_1B7B2:	dc.b $13,$D0,$D1,$FF	; 0 
byte_1B7B6:	dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4; 0	
byte_1B7BE:	dc.b   9,  8,  9,$FF	; 0 
byte_1B7C2:	dc.b   3,  7,$FD,  0	; 0 
off_1B7C6:	dc.w byte_1B806-off_1B7C6 
		dc.w byte_1B810-off_1B7C6
		dc.w $FEAA
		dc.w $FEB4
		dc.w byte_1B81A-off_1B7C6
		dc.w byte_1B824-off_1B7C6
		dc.w byte_1B82A-off_1B7C6
		dc.w $FF84
		dc.w byte_1B834-off_1B7C6
		dc.w $FF8E		; 0
		dc.w $FF9A		; 1
		dc.w $FF9E		; 2
		dc.w $FFA2		; 3
		dc.w $FFA8		; 4
		dc.w $FFAF		; 5
		dc.w $FFB3		; 6
		dc.w $FFBA		; 7
		dc.w $FFBE		; 8
		dc.w $FFC2		; 9
		dc.w $FFC8		; 10
		dc.w $FFCD		; 11
		dc.w $FFD1		; 12
		dc.w $FFD8		; 13
		dc.w $FFDB		; 14
		dc.w $FFDE		; 15
		dc.w $FFE1		; 16
		dc.w $FFE1		; 17
		dc.w $FFE4		; 18
		dc.w $FFE8		; 19
		dc.w $FFEC		; 20
		dc.w $FFF0		; 21
		dc.w byte_1B837-off_1B7C6
byte_1B806:	dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF; 0	
					; h+4852o
byte_1B810:	dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF; 0	
					; h+4854o
byte_1B81A:	dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF; 0	
					; h+485Ao
byte_1B824:	dc.b   7,$72,$73,$74,$73,$FF; 0	
byte_1B82A:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF; 0	
byte_1B834:	dc.b   5,$C1,$FF	; 0 
byte_1B837:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0; 0
					
		dc.b   0		; 16
; ===========================================================================

loc_1B848:				
					
		moveq	#0,d0
		move.b	$1A(a0),d0

loc_1B84E:				
		cmp.b	(v_sonic_last_frame_id).w,d0
		beq.s	locret_1B89A
		move.b	d0,(v_sonic_last_frame_id).w
		lea	(DPLC_Sonic).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1B89A
		move.w	#-$1000,d4

loc_1B86E:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Sonic,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,loc_1B86E

locret_1B89A:				
		rts	
; ===========================================================================

JmpTo_KillCharacter:				
		jmp	(KillCharacter).l
; ===========================================================================
	if ~RemoveJmpTos
		align 4
	endc	 

; ===========================================================================
; ----------------------------------------------------------------------------
; Object 02 - Tails
; ----------------------------------------------------------------------------
; Sprite_1B8A4: Object_Tails: Obj02:
Tails:				
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_1B8BE
		move.w	(v_boundary_left_next).w,(v_boundary_left_next_p2).w
		move.w	(v_boundary_right_next).w,(v_boundary_right_next_p2).w
		move.w	(v_boundary_bottom).w,(v_boundary_bottom_next_p2).w

loc_1B8BE:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1B8CC(pc,d0.w),d1
		jmp	off_1B8CC(pc,d1.w)
; ===========================================================================
off_1B8CC:	dc.w loc_1B8D8-off_1B8CC; 0 
		dc.w loc_1B9B4-off_1B8CC; 1
		dc.w loc_1CBC6-off_1B8CC; 2
		dc.w loc_1CC50-off_1B8CC; 3
		dc.w loc_1CD90-off_1B8CC; 4
		dc.w loc_1CDA4-off_1B8CC; 5
; ===========================================================================

loc_1B8D8:				
		addq.b	#2,$24(a0)
		move.b	#$F,$16(a0)
		move.b	#9,$17(a0)
		move.l	#Map_Tails,4(a0)
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#-$7C,1(a0)
		move.w	#$600,(v_tails_max_speed).w
		move.w	#$C,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_1B952
		tst.b	(v_last_lamppost).w
		bne.s	loc_1B96E
		move.w	#$7A0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.w	8(a0),(v_x_pos_lampcopy).w
		move.w	$C(a0),(v_y_pos_lampcopy).w
		move.w	2(a0),(v_ost_tile_lampcopy).w
		move.w	$3E(a0),(v_ost_top_solid_bit_lampcopy).w
		bra.s	loc_1B96E
; ===========================================================================

loc_1B952:				
		move.w	#$7A0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.w	(v_ost_maincharacter+ost_top_solid_bit).w,$3E(a0)
		tst.w	(v_ost_maincharacter+ost_tile).w
		bpl.s	loc_1B96E
		ori.w	#-$8000,2(a0)

loc_1B96E:				
		move.w	8(a0),(v_x_pos_p2_lampcopy).w
		move.w	$C(a0),(v_y_pos_p2_lampcopy).w
		move.w	2(a0),(v_ost_tile_p2_lampcopy).w
		move.w	$3E(a0),(v_ost_top_solid_bit_p2_lampcopy).w
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.b	#$1E,$28(a0)
		move.w	#0,(v_tails_cpu_routine).w
		move.w	#0,(v_tails_control_counter).w
		move.w	#0,(v_tails_respawn_counter).w
		move.b	#5,(v_ost_lo_tails_tails).w
		move.w	a0,(v_ost_lo_tails_tails+ost_parent1).w

loc_1B9B4:				
		cmpa.w	#v_ost_maincharacter,a0
		bne.s	loc_1B9D4
		move.w	(v_joypad_hold).w,(v_joypad2_hold).w
		tst.b	(f_lock_controls).w
		bne.s	loc_1B9EA
		move.w	(v_joypad_hold_actual).w,(v_joypad2_hold).w
		move.w	(v_joypad_hold_actual).w,(v_joypad_hold).w
		bra.s	loc_1B9EA
; ===========================================================================

loc_1B9D4:				
		tst.b	(f_lock_controls_p2).w
		bne.s	loc_1B9E0
		move.w	(v_joypad2_hold_actual).w,(v_joypad2_hold).w

loc_1B9E0:				
		tst.w	(f_two_player).w
		bne.s	loc_1B9EA
		bsr.w	loc_1BAD4

loc_1B9EA:				
		btst	#0,$2A(a0)
		bne.s	loc_1BA04
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	off_1BA4E(pc,d0.w),d1
		jsr	off_1BA4E(pc,d1.w)

loc_1BA04:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1BA12
		andi.w	#$7FF,$C(a0)

loc_1BA12:				
		bsr.s	loc_1BA56
		bsr.w	loc_1BF38
		bsr.w	loc_1BF52
		move.b	(v_angle_right).w,$36(a0)
		move.b	(v_angle_left).w,$37(a0)
		tst.b	(f_wind_tunnel_now).w
		beq.s	loc_1BA3A
		tst.b	$1C(a0)
		bne.s	loc_1BA3A
		move.b	$1D(a0),$1C(a0)

loc_1BA3A:				
		bsr.w	loc_1CDC4
		tst.b	$2A(a0)
		bmi.s	loc_1BA4A
		jsr	loc_3F554

loc_1BA4A:				
		bra.w	loc_1D1AC
; ===========================================================================
off_1BA4E:	dc.w loc_1C00A-off_1BA4E; 0 
		dc.w loc_1C032-off_1BA4E; 1
		dc.w loc_1C05C-off_1BA4E; 2
		dc.w loc_1C082-off_1BA4E; 3
; ===========================================================================

loc_1BA56:				
		move.w	$30(a0),d0
		beq.s	loc_1BA64
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	loc_1BA6A

loc_1BA64:				
		jsr	DisplaySprite

loc_1BA6A:				
		btst	#1,$2B(a0)
		beq.s	loc_1BA9C
		tst.w	$32(a0)
		beq.s	loc_1BA9C
		subq.w	#1,$32(a0)
		bne.s	loc_1BA9C
		tst.b	(v_current_boss).w
		bne.s	loc_1BA96
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1BA96
		move.w	(v_level_music).w,d0
		jsr	(PlayMusic).l

loc_1BA96:				
		bclr	#1,$2B(a0)

loc_1BA9C:				
		btst	#2,$2B(a0)
		beq.s	locret_1BAD2
		tst.w	$34(a0)
		beq.s	locret_1BAD2
		subq.w	#1,$34(a0)
		bne.s	locret_1BAD2
		move.w	#$600,(v_tails_max_speed).w
		move.w	#$C,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w
		bclr	#2,$2B(a0)
		move.w	#$FC,d0	
		jmp	(PlayMusic).l
; ===========================================================================

locret_1BAD2:				
		rts	
; ===========================================================================

loc_1BAD4:				
		move.b	(v_joypad2_hold_actual).w,d0
		andi.b	#$7F,d0	; ''
		beq.s	loc_1BAE4
		move.w	#$258,(v_tails_control_counter).w

loc_1BAE4:				
		lea	($FFFFB000).w,a1
		move.w	(v_tails_cpu_routine).w,d0
		move.w	off_1BAF4(pc,d0.w),d0
		jmp	off_1BAF4(pc,d0.w)
; ===========================================================================
off_1BAF4:	dc.w loc_1BAFE-off_1BAF4; 0 
		dc.w loc_1BB30-off_1BAF4; 1
		dc.w loc_1BB8A-off_1BAF4; 2
		dc.w loc_1BCE0-off_1BAF4; 3
		dc.w loc_1BEB8-off_1BAF4; 4
; ===========================================================================

loc_1BAFE:				
		move.w	#6,(v_tails_cpu_routine).w
		move.b	#0,$2A(a0)
		move.b	#0,$1C(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		move.w	#0,$14(a0)
		move.b	#0,$22(a0)
		move.w	#0,(v_tails_respawn_counter).w
		rts	
; ===========================================================================

loc_1BB30:				
		move.b	(v_joypad2_hold).w,d0
		andi.b	#-$10,d0
		bne.s	loc_1BB54
		move.w	(v_frame_counter).w,d0
		andi.w	#$3F,d0	; '?'
		bne.s	locret_1BB88
		tst.b	$2A(a1)
		bne.s	locret_1BB88
		move.b	$22(a1),d0
		andi.b	#-$2E,d0
		bne.s	locret_1BB88

loc_1BB54:				
		move.w	#4,(v_tails_cpu_routine).w
		move.w	8(a1),d0
		move.w	d0,8(a0)
		move.w	d0,(v_tails_cpu_target_x).w
		move.w	$C(a1),d0
		move.w	d0,(v_tails_cpu_target_y).w
		subi.w	#$C0,d0	
		move.w	d0,$C(a0)
		ori.w	#-$8000,2(a0)
		move.b	#0,$39(a0)
		move.w	#0,$3A(a0)

locret_1BB88:				
		rts	
; ===========================================================================

loc_1BB8A:				
		tst.b	1(a0)
		bmi.s	loc_1BBC8
		addq.w	#1,(v_tails_respawn_counter).w
		cmpi.w	#$12C,(v_tails_respawn_counter).w
		bcs.s	loc_1BBCE
		move.w	#0,(v_tails_respawn_counter).w
		move.w	#2,(v_tails_cpu_routine).w
		move.b	#-$7F,$2A(a0)
		move.b	#2,$22(a0)
		move.w	#0,8(a0)
		move.w	#0,$C(a0)
		move.b	#$20,$1C(a0) ; ' '
		rts	
; ===========================================================================

loc_1BBC8:				
		move.w	#0,(v_tails_respawn_counter).w

loc_1BBCE:				
		lea	(v_sonic_pos_tracker).w,a2
		move.w	#$10,d2
		lsl.b	#2,d2
		addq.b	#4,d2
		move.w	(v_sonic_pos_tracker_num).w,d3
		sub.b	d2,d3
		move.w	(a2,d3.w),(v_tails_cpu_target_x).w
		move.w	2(a2,d3.w),(v_tails_cpu_target_y).w
		tst.b	(f_water_flag).w
		beq.s	loc_1BC04
		move.w	(v_water_height_actual).w,d0
		subi.w	#$10,d0
		cmp.w	(v_tails_cpu_target_y).w,d0
		bge.s	loc_1BC04
		move.w	d0,(v_tails_cpu_target_y).w

loc_1BC04:				
		move.w	8(a0),d0
		sub.w	(v_tails_cpu_target_x).w,d0
		beq.s	loc_1BC54
		move.w	d0,d2
		bpl.s	loc_1BC14
		neg.w	d2

loc_1BC14:				
		lsr.w	#4,d2
		cmpi.w	#$C,d2
		bcs.s	loc_1BC1E
		moveq	#$C,d2

loc_1BC1E:				
		move.b	$10(a1),d1
		bpl.s	loc_1BC26
		neg.b	d1

loc_1BC26:				
		add.b	d1,d2
		addq.w	#1,d2
		tst.w	d0
		bmi.s	loc_1BC40
		bset	#0,$22(a0)
		cmp.w	d0,d2
		bcs.s	loc_1BC3C
		move.w	d0,d2
		moveq	#0,d0

loc_1BC3C:				
		neg.w	d2
		bra.s	loc_1BC50
; ===========================================================================

loc_1BC40:				
		bclr	#0,$22(a0)
		neg.w	d0
		cmp.w	d0,d2
		bcs.s	loc_1BC50
		move.b	d0,d2
		moveq	#0,d0

loc_1BC50:				
		add.w	d2,8(a0)

loc_1BC54:				
		moveq	#1,d2
		move.w	$C(a0),d1
		sub.w	(v_tails_cpu_target_y).w,d1
		beq.s	loc_1BC68
		bmi.s	loc_1BC64
		neg.w	d2

loc_1BC64:				
		add.w	d2,$C(a0)

loc_1BC68:				
		lea	(v_sonic_stat_tracker).w,a2
		move.b	2(a2,d3.w),d2
		andi.b	#-$2E,d2
		bne.s	locret_1BCDE
		or.w	d0,d1
		bne.s	locret_1BCDE
		move.w	#6,(v_tails_cpu_routine).w
		move.b	#0,$2A(a0)
		move.b	#0,$1C(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		move.w	#0,$14(a0)
		move.b	#2,$22(a0)
		move.w	#0,$2E(a0)
		andi.w	#$7FFF,2(a0)
		tst.b	2(a1)
		bpl.s	loc_1BCBC
		ori.w	#-$8000,2(a0)

loc_1BCBC:				
		move.b	$3E(a1),$3E(a0)
		move.b	$3F(a1),$3F(a0)
		cmpi.b	#9,$1C(a1)
		beq.s	locret_1BCDE
		move.b	$39(a0),d0
		beq.s	locret_1BCDE
		move.b	d0,$39(a1)
		bsr.w	loc_212C4

locret_1BCDE:				
		rts	
; ===========================================================================

loc_1BCE0:				
		cmpi.b	#6,($FFFFB024).w
		bcs.s	loc_1BD0E
		move.w	#4,(v_tails_cpu_routine).w
		move.b	#0,$39(a0)
		move.w	#0,$3A(a0)
		move.b	#-$7F,$2A(a0)
		move.b	#2,$22(a0)
		move.b	#$20,$1C(a0) ; ' '
		rts	
; ===========================================================================

loc_1BD0E:				
		bsr.w	loc_1BE66
		tst.w	(v_tails_control_counter).w
		bne.w	loc_1BE28
		tst.b	$2A(a0)
		bmi.w	loc_1BE28
		tst.w	$2E(a0)
		beq.s	loc_1BD34
		tst.w	$14(a0)
		bne.s	loc_1BD34
		move.w	#8,(v_tails_cpu_routine).w

loc_1BD34:				
		lea	(v_sonic_pos_tracker).w,a1
		move.w	#$10,d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	(v_sonic_pos_tracker_num).w,d0
		sub.b	d1,d0
		move.w	(a1,d0.w),d2
		move.w	2(a1,d0.w),d3
		lea	(v_sonic_stat_tracker).w,a1
		move.w	(a1,d0.w),d1
		move.b	2(a1,d0.w),d4
		move.w	d1,d0
		btst	#5,$22(a0)
		beq.s	loc_1BD6C
		btst	#5,d4
		beq.w	loc_1BE06

loc_1BD6C:				
		sub.w	8(a0),d2
		beq.s	loc_1BDBA
		bpl.s	loc_1BD98
		neg.w	d2
		cmpi.w	#$10,d2
		bcs.s	loc_1BD84
		andi.w	#-$C0D,d1
		ori.w	#$404,d1

loc_1BD84:				
		tst.w	$14(a0)
		beq.s	loc_1BDCE
		btst	#0,$22(a0)
		beq.s	loc_1BDCE
		subq.w	#1,8(a0)
		bra.s	loc_1BDCE
; ===========================================================================

loc_1BD98:				
		cmpi.w	#$10,d2
		bcs.s	loc_1BDA6
		andi.w	#-$C0D,d1
		ori.w	#$808,d1

loc_1BDA6:				
		tst.w	$14(a0)
		beq.s	loc_1BDCE
		btst	#0,$22(a0)
		bne.s	loc_1BDCE
		addq.w	#1,8(a0)
		bra.s	loc_1BDCE
; ===========================================================================

loc_1BDBA:				
		bclr	#0,$22(a0)
		move.b	d4,d0
		andi.b	#1,d0
		beq.s	loc_1BDCE
		bset	#0,$22(a0)

loc_1BDCE:				
		tst.b	(f_tails_cpu_jumping).w
		beq.s	loc_1BDE6
		ori.w	#$7000,d1
		btst	#1,$22(a0)
		bne.s	loc_1BE22
		move.b	#0,(f_tails_cpu_jumping).w

loc_1BDE6:				
		move.w	(v_frame_counter).w,d0
		andi.w	#$FF,d0
		beq.s	loc_1BDF6
		cmpi.w	#$40,d2	; '@'
		bcc.s	loc_1BE22

loc_1BDF6:				
		sub.w	$C(a0),d3
		beq.s	loc_1BE22
		bpl.s	loc_1BE22
		neg.w	d3
		cmpi.w	#$20,d3	; ' '
		bcs.s	loc_1BE22

loc_1BE06:				
		move.b	($FFFFFE05).w,d0
		andi.b	#$3F,d0	; '?'
		bne.s	loc_1BE22
		cmpi.b	#8,$1C(a0)
		beq.s	loc_1BE22
		ori.w	#$7070,d1
		move.b	#1,(f_tails_cpu_jumping).w

loc_1BE22:				
		move.w	d1,(v_joypad2_hold).w
		rts	
; ===========================================================================

loc_1BE28:				
		tst.w	(v_tails_control_counter).w
		beq.s	locret_1BE32
		subq.w	#1,(v_tails_control_counter).w

locret_1BE32:				
		rts	
; ===========================================================================

loc_1BE34:				
		move.w	#0,(v_tails_control_counter).w
		move.w	#0,(v_tails_respawn_counter).w
		move.w	#2,(v_tails_cpu_routine).w
		move.b	#-$7F,$2A(a0)
		move.b	#2,$22(a0)
		move.w	#$4000,8(a0)
		move.w	#0,$C(a0)
		move.b	#$20,$1C(a0) ; ' '
		rts	
; ===========================================================================

loc_1BE66:				
		tst.b	1(a0)
		bmi.s	loc_1BE9C
		btst	#3,$22(a0)
		beq.s	loc_1BE8C
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		move.b	(v_tails_interact_id).w,d0
		cmp.b	(a3),d0
		bne.s	loc_1BE98

loc_1BE8C:				
		addq.w	#1,(v_tails_respawn_counter).w
		cmpi.w	#$12C,(v_tails_respawn_counter).w
		bcs.s	loc_1BEA2

loc_1BE98:				
		bra.w	loc_1BE34
; ===========================================================================

loc_1BE9C:				
		move.w	#0,(v_tails_respawn_counter).w

loc_1BEA2:				
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		move.b	(a3),(v_tails_interact_id).w
		rts	
; ===========================================================================

loc_1BEB8:				
		bsr.w	loc_1BE66
		tst.w	(v_tails_control_counter).w
		bne.w	locret_1BF36
		tst.w	$2E(a0)
		bne.s	locret_1BF36
		tst.b	$39(a0)
		bne.s	loc_1BF0C
		tst.w	$14(a0)
		bne.s	locret_1BF36
		bclr	#0,$22(a0)
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcs.s	loc_1BEEC
		bset	#0,$22(a0)

loc_1BEEC:				
		move.w	#$202,(v_joypad2_hold).w
		move.b	($FFFFFE05).w,d0
		andi.b	#$7F,d0	; ''
		beq.s	loc_1BF1C
		cmpi.b	#8,$1C(a0)
		bne.s	locret_1BF36
		move.w	#$7272,(v_joypad2_hold).w
		rts	
; ===========================================================================

loc_1BF0C:				
		move.w	#$202,(v_joypad2_hold).w
		move.b	($FFFFFE05).w,d0
		andi.b	#$7F,d0	; ''
		bne.s	loc_1BF2A

loc_1BF1C:				
		move.w	#0,(v_joypad2_hold).w
		move.w	#6,(v_tails_cpu_routine).w
		rts	
; ===========================================================================

loc_1BF2A:				
		andi.b	#$1F,d0
		bne.s	locret_1BF36
		ori.w	#$7070,(v_joypad2_hold).w

locret_1BF36:				
		rts	
; ===========================================================================

loc_1BF38:				
		move.w	(v_tails_pos_tracker_num).w,d0
		lea	(v_tails_pos_tracker).w,a1
		lea	(a1,d0.w),a1
		move.w	8(a0),(a1)+
		move.w	$C(a0),(a1)+
		addq.b	#4,($FFFFEED7).w
		rts	
; ===========================================================================

loc_1BF52:				
		tst.b	(f_water_flag).w
		bne.s	loc_1BF5A

locret_1BF58:				
		rts	
; ===========================================================================

loc_1BF5A:				
		move.w	(v_water_height_actual).w,d0
		cmp.w	$C(a0),d0
		bge.s	loc_1BFB2
		bset	#6,$22(a0)
		bne.s	locret_1BF58
		movea.l	a0,a1
		bsr.w	loc_1D81E
		move.b	#$A,($FFFFD0C0).w
		move.b	#-$7F,($FFFFD0E8).w
		move.l	a0,($FFFFD0FC).w
		move.w	#$300,(v_tails_max_speed).w
		move.w	#6,(v_tails_acceleration).w
		move.w	#$40,(v_tails_deceleration).w ; '@'
		asr	$10(a0)
		asr	$12(a0)
		asr	$12(a0)
		beq.s	locret_1BF58
		move.w	#$100,($FFFFD15C).w
		move.w	#$AA,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_1BFB2:				
		bclr	#6,$22(a0)
		beq.s	locret_1BF58
		movea.l	a0,a1
		bsr.w	loc_1D81E
		move.w	#$600,(v_tails_max_speed).w
		move.w	#$C,(v_tails_acceleration).w
		move.w	#$80,(v_tails_deceleration).w
		cmpi.b	#4,$24(a0)
		beq.s	loc_1BFDE
		asl	$12(a0)

loc_1BFDE:				
		tst.w	$12(a0)
		beq.w	locret_1BF58
		move.w	#$100,($FFFFD15C).w
		movea.l	a0,a1
		bsr.w	loc_1D81E
		cmpi.w	#-$1000,$12(a0)
		bgt.s	loc_1C000
		move.w	#-$1000,$12(a0)

loc_1C000:				
		move.w	#$AA,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_1C00A:				
		bsr.w	loc_1C70E
		bsr.w	loc_1C61E
		bsr.w	loc_1C846
		bsr.w	loc_1C0AC
		bsr.w	loc_1C5B8
		bsr.w	loc_1C55A
		jsr	SpeedToPos
		bsr.w	loc_1E234
		bsr.w	loc_1C8B8
		rts	
; ===========================================================================

loc_1C032:				
		bsr.w	loc_1C6CC
		bsr.w	loc_1C4CE
		bsr.w	loc_1C55A
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1C052
		subi.w	#$28,$12(a0) ; '('

loc_1C052:				
		bsr.w	loc_1C8FA
		bsr.w	loc_1C95A
		rts	
; ===========================================================================

loc_1C05C:				
		tst.b	$39(a0)
		bne.s	loc_1C066
		bsr.w	loc_1C61E

loc_1C066:				
		bsr.w	loc_1C87C
		bsr.w	loc_1C3AA
		bsr.w	loc_1C55A
		jsr	SpeedToPos
		bsr.w	loc_1E234
		bsr.w	loc_1C8B8
		rts	
; ===========================================================================

loc_1C082:				
		bsr.w	loc_1C6CC
		bsr.w	loc_1C4CE
		bsr.w	loc_1C55A
		jsr	ObjectFall
		btst	#6,$22(a0)
		beq.s	loc_1C0A2
		subi.w	#$28,$12(a0) ; '('

loc_1C0A2:				
		bsr.w	loc_1C8FA
		bsr.w	loc_1C95A
		rts	
; ===========================================================================

loc_1C0AC:				
		move.w	(v_tails_max_speed).w,d6
		move.w	(v_tails_acceleration).w,d5
		move.w	(v_tails_deceleration).w,d4
		tst.b	$2B(a0)
		bmi.w	loc_1C214
		tst.w	$2E(a0)
		bne.w	loc_1C1D0
		btst	#2,(v_joypad2_hold).w
		beq.s	loc_1C0D4
		bsr.w	loc_1C2A4

loc_1C0D4:				
		btst	#3,(v_joypad2_hold).w
		beq.s	loc_1C0E0
		bsr.w	loc_1C32A

loc_1C0E0:				
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		bne.w	loc_1C1D0
		tst.w	$14(a0)
		bne.w	loc_1C1D0
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)
		btst	#3,$22(a0)
		beq.s	loc_1C142
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	($FFFFB000).w,a1
		lea	(a1,d0.w),a1
		tst.b	$22(a1)
		bmi.s	loc_1C174
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#4,d2
		add.w	8(a0),d1
		sub.w	8(a1),d1
		cmpi.w	#4,d1
		blt.s	loc_1C166
		cmp.w	d2,d1
		bge.s	loc_1C156
		bra.s	loc_1C174
; ===========================================================================

loc_1C142:				
		jsr	loc_1ED56
		cmpi.w	#$C,d1
		blt.s	loc_1C174
		cmpi.b	#3,$36(a0)
		bne.s	loc_1C15E

loc_1C156:				
		bclr	#0,$22(a0)
		bra.s	loc_1C16C
; ===========================================================================

loc_1C15E:				
		cmpi.b	#3,$37(a0)
		bne.s	loc_1C174

loc_1C166:				
		bset	#0,$22(a0)

loc_1C16C:				
		move.b	#6,$1C(a0)
		bra.s	loc_1C1D0
; ===========================================================================

loc_1C174:				
		btst	#0,(v_joypad2_hold).w
		beq.s	loc_1C1A2
		move.b	#7,$1C(a0)
		addq.w	#1,(v_tails_look_delay_counter).w
		cmpi.w	#$78,(v_tails_look_delay_counter).w ; 'x'
		bcs.s	loc_1C1D6
		move.w	#$78,(v_tails_look_delay_counter).w ; 'x'
		cmpi.w	#$C8,(v_camera_y_shift_p2).w
		beq.s	loc_1C1E8
		addq.w	#2,(v_camera_y_shift_p2).w
		bra.s	loc_1C1E8
; ===========================================================================

loc_1C1A2:				
		btst	#1,(v_joypad2_hold).w
		beq.s	loc_1C1D0
		move.b	#8,$1C(a0)
		addq.w	#1,(v_tails_look_delay_counter).w
		cmpi.w	#$78,(v_tails_look_delay_counter).w ; 'x'
		bcs.s	loc_1C1D6
		move.w	#$78,(v_tails_look_delay_counter).w ; 'x'
		cmpi.w	#8,(v_camera_y_shift_p2).w
		beq.s	loc_1C1E8
		subq.w	#2,(v_camera_y_shift_p2).w
		bra.s	loc_1C1E8
; ===========================================================================

loc_1C1D0:				
		move.w	#0,(v_tails_look_delay_counter).w

loc_1C1D6:				
		cmpi.w	#$60,(v_camera_y_shift_p2).w ; '`'
		beq.s	loc_1C1E8
		bcc.s	loc_1C1E4
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C1E4:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C1E8:				
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$C,d0
		bne.s	loc_1C214
		move.w	$14(a0),d0
		beq.s	loc_1C214
		bmi.s	loc_1C208
		sub.w	d5,d0
		bcc.s	loc_1C202
		move.w	#0,d0

loc_1C202:				
		move.w	d0,$14(a0)
		bra.s	loc_1C214
; ===========================================================================

loc_1C208:				
		add.w	d5,d0
		bcc.s	loc_1C210
		move.w	#0,d0

loc_1C210:				
		move.w	d0,$14(a0)

loc_1C214:				
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)

loc_1C232:				
		move.b	$26(a0),d0
		addi.b	#$40,d0	; '@'
		bmi.s	locret_1C2A2
		move.b	#$40,d1	; '@'
		tst.w	$14(a0)
		beq.s	locret_1C2A2
		bmi.s	loc_1C24A
		neg.w	d1

loc_1C24A:				
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	loc_1EB84
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	locret_1C2A2
		asl.w	#8,d1
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		beq.s	loc_1C29E
		cmpi.b	#$40,d0	; '@'
		beq.s	loc_1C28C
		cmpi.b	#-$80,d0
		beq.s	loc_1C286
		add.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts	
; ===========================================================================

loc_1C286:				
		sub.w	d1,$12(a0)
		rts	
; ===========================================================================

loc_1C28C:				
		sub.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts	
; ===========================================================================

loc_1C29E:				
		add.w	d1,$12(a0)

locret_1C2A2:				
		rts	
; ===========================================================================

loc_1C2A4:				
		move.w	$14(a0),d0
		beq.s	loc_1C2AC
		bpl.s	loc_1C2DE

loc_1C2AC:				
		bset	#0,$22(a0)
		bne.s	loc_1C2C0
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1C2C0:				
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1C2D2
		add.w	d5,d0
		cmp.w	d1,d0
		ble.s	loc_1C2D2
		move.w	d1,d0

loc_1C2D2:				
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1C2DE:				
		sub.w	d4,d0
		bcc.s	loc_1C2E6
		move.w	#-$80,d0

loc_1C2E6:				
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		bne.s	locret_1C328
		cmpi.w	#$400,d0
		blt.s	locret_1C328
		move.b	#$D,$1C(a0)
		bclr	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	(PlaySound).l
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1C328
		move.b	#6,($FFFFD164).w
		move.b	#$15,($FFFFD15A).w

locret_1C328:				
		rts	
; ===========================================================================

loc_1C32A:				
		move.w	$14(a0),d0
		bmi.s	loc_1C35E
		bclr	#0,$22(a0)
		beq.s	loc_1C344
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)

loc_1C344:				
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1C352
		sub.w	d5,d0
		cmp.w	d6,d0
		bge.s	loc_1C352
		move.w	d6,d0

loc_1C352:				
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1C35E:				
		add.w	d4,d0
		bcc.s	loc_1C366
		move.w	#$80,d0	

loc_1C366:				
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		bne.s	locret_1C3A8
		cmpi.w	#-$400,d0
		bgt.s	locret_1C3A8
		move.b	#$D,$1C(a0)
		bset	#0,$22(a0)
		move.w	#$A4,d0	
		jsr	(PlaySound).l
		cmpi.b	#$C,$28(a0)
		bcs.s	locret_1C3A8
		move.b	#6,($FFFFD164).w
		move.b	#$15,($FFFFD15A).w

locret_1C3A8:				
		rts	
; ===========================================================================

loc_1C3AA:				
		move.w	(v_tails_max_speed).w,d6
		asl.w	#1,d6
		move.w	(v_tails_acceleration).w,d5
		asr.w	#1,d5
		move.w	(v_tails_deceleration).w,d4
		asr.w	#2,d4
		tst.b	$2B(a0)
		bmi.w	loc_1C440
		tst.w	$2E(a0)
		bne.s	loc_1C3E2
		btst	#2,(v_joypad2_hold).w
		beq.s	loc_1C3D6
		bsr.w	loc_1C488

loc_1C3D6:				
		btst	#3,(v_joypad2_hold).w
		beq.s	loc_1C3E2
		bsr.w	loc_1C4AC

loc_1C3E2:				
		move.w	$14(a0),d0
		beq.s	loc_1C404
		bmi.s	loc_1C3F8
		sub.w	d5,d0
		bcc.s	loc_1C3F2
		move.w	#0,d0

loc_1C3F2:				
		move.w	d0,$14(a0)
		bra.s	loc_1C404
; ===========================================================================

loc_1C3F8:				
		add.w	d5,d0
		bcc.s	loc_1C400
		move.w	#0,d0

loc_1C400:				
		move.w	d0,$14(a0)

loc_1C404:				
		tst.w	$14(a0)
		bne.s	loc_1C440
		tst.b	$39(a0)
		bne.s	loc_1C42E
		bclr	#2,$22(a0)
		move.b	#$F,$16(a0)
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#1,$C(a0)
		bra.s	loc_1C440
; ===========================================================================

loc_1C42E:				
		move.w	#$400,$14(a0)
		btst	#0,$22(a0)
		beq.s	loc_1C440
		neg.w	$14(a0)

loc_1C440:				
		cmpi.w	#$60,(v_camera_y_shift_p2).w ; '`'
		beq.s	loc_1C452
		bcc.s	loc_1C44E
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C44E:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C452:				
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)
		muls.w	$14(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_1C476
		move.w	#$1000,d1

loc_1C476:				
		cmpi.w	#-$1000,d1
		bge.s	loc_1C480
		move.w	#-$1000,d1

loc_1C480:				
		move.w	d1,$10(a0)
		bra.w	loc_1C232
; ===========================================================================

loc_1C488:				
		move.w	$14(a0),d0
		beq.s	loc_1C490
		bpl.s	loc_1C49E

loc_1C490:				
		bset	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1C49E:				
		sub.w	d4,d0
		bcc.s	loc_1C4A6
		move.w	#-$80,d0

loc_1C4A6:				
		move.w	d0,$14(a0)
		rts	
; ===========================================================================

loc_1C4AC:				
		move.w	$14(a0),d0
		bmi.s	loc_1C4C0
		bclr	#0,$22(a0)
		move.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_1C4C0:				
		add.w	d4,d0
		bcc.s	loc_1C4C8
		move.w	#$80,d0	

loc_1C4C8:				
		move.w	d0,$14(a0)
		rts	
; ===========================================================================

loc_1C4CE:				
		move.w	(v_tails_max_speed).w,d6
		move.w	(v_tails_acceleration).w,d5
		asl.w	#1,d5
		btst	#4,$22(a0)
		bne.s	loc_1C518
		move.w	$10(a0),d0
		btst	#2,(v_joypad2_hold).w
		beq.s	loc_1C4FE
		bset	#0,$22(a0)
		sub.w	d5,d0
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0
		bgt.s	loc_1C4FE
		move.w	d1,d0

loc_1C4FE:				
		btst	#3,(v_joypad2_hold).w
		beq.s	loc_1C514
		bclr	#0,$22(a0)
		add.w	d5,d0
		cmp.w	d6,d0
		blt.s	loc_1C514
		move.w	d6,d0

loc_1C514:				
		move.w	d0,$10(a0)

loc_1C518:				
		cmpi.w	#$60,(v_camera_y_shift_p2).w ; '`'
		beq.s	loc_1C52A
		bcc.s	loc_1C526
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C526:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C52A:				
		cmpi.w	#-$400,$12(a0)
		bcs.s	locret_1C558
		move.w	$10(a0),d0
		move.w	d0,d1
		asr.w	#5,d1
		beq.s	locret_1C558
		bmi.s	loc_1C54C
		sub.w	d1,d0
		bcc.s	loc_1C546
		move.w	#0,d0

loc_1C546:				
		move.w	d0,$10(a0)
		rts	
; ===========================================================================

loc_1C54C:				
		sub.w	d1,d0
		bcs.s	loc_1C554
		move.w	#0,d0

loc_1C554:				
		move.w	d0,$10(a0)

locret_1C558:				
		rts	
; ===========================================================================

loc_1C55A:				
		move.l	8(a0),d1
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(v_boundary_left_next_p2).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0
		bhi.s	loc_1C5A0
		move.w	(v_boundary_right_next_p2).w,d0
		addi.w	#$128,d0
		tst.b	(v_current_boss).w
		bne.s	loc_1C588
		addi.w	#$40,d0	; '@'

loc_1C588:				
		cmp.w	d1,d0
		bls.s	loc_1C5A0

loc_1C58C:				
		move.w	(v_boundary_bottom_next_p2).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		blt.s	loc_1C59C
		rts	
; ===========================================================================

loc_1C59C:				
		bra.w	loc_1D318
; ===========================================================================

loc_1C5A0:				
		move.w	d0,8(a0)
		move.w	#0,$A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		bra.s	loc_1C58C
; ===========================================================================

loc_1C5B8:				
		tst.b	$2B(a0)
		bmi.s	locret_1C5DE
		move.w	$14(a0),d0
		bpl.s	loc_1C5C6
		neg.w	d0

loc_1C5C6:				
		cmpi.w	#$80,d0	
		bcs.s	locret_1C5DE
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$C,d0
		bne.s	locret_1C5DE
		btst	#1,(v_joypad2_hold).w
		bne.s	loc_1C5E0

locret_1C5DE:				
		rts	
; ===========================================================================

loc_1C5E0:				
		btst	#2,$22(a0)
		beq.s	loc_1C5EA
		rts	
; ===========================================================================

loc_1C5EA:				
		bset	#2,$22(a0)
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#1,$C(a0)
		move.w	#$BE,d0	
		jsr	(PlaySound).l
		tst.w	$14(a0)
		bne.s	locret_1C61C
		move.w	#$200,$14(a0)

locret_1C61C:				
		rts	
; ===========================================================================

loc_1C61E:				
		move.b	(v_joypad2_press).w,d0
		andi.b	#$70,d0	; 'p'
		beq.w	locret_1C6C2
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#-$80,d0
		bsr.w	loc_1EC0A
		cmpi.w	#6,d1
		blt.w	locret_1C6C2
		move.w	#$680,d2
		btst	#6,$22(a0)
		beq.s	loc_1C650
		move.w	#$380,d2

loc_1C650:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0	; '@'
		jsr	(CalcSine).l
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$10(a0)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$12(a0)
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		addq.l	#4,sp
		move.b	#1,$3C(a0)
		clr.b	$38(a0)
		move.w	#$A0,d0	
		jsr	(PlaySound).l
		move.b	#$F,$16(a0)
		move.b	#9,$17(a0)
		btst	#2,$22(a0)
		bne.s	loc_1C6C4
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		bset	#2,$22(a0)
		addq.w	#1,$C(a0)

locret_1C6C2:				
		rts	
; ===========================================================================

loc_1C6C4:				
		bset	#4,$22(a0)
		rts	
; ===========================================================================

loc_1C6CC:				
		tst.b	$3C(a0)
		beq.s	loc_1C6F8
		move.w	#-$400,d1
		btst	#6,$22(a0)
		beq.s	loc_1C6E2
		move.w	#-$200,d1

loc_1C6E2:				
		cmp.w	$12(a0),d1
		ble.s	locret_1C6F6
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$70,d0	; 'p'
		bne.s	locret_1C6F6
		move.w	d1,$12(a0)

locret_1C6F6:				
		rts	
; ===========================================================================

loc_1C6F8:				
		tst.b	$39(a0)
		bne.s	locret_1C70C
		cmpi.w	#-$FC0,$12(a0)
		bge.s	locret_1C70C
		move.w	#-$FC0,$12(a0)

locret_1C70C:				
		rts	
; ===========================================================================

loc_1C70E:				
		tst.b	$39(a0)
		bne.s	loc_1C75E
		cmpi.b	#8,$1C(a0)
		bne.s	locret_1C75C
		move.b	(v_joypad2_press).w,d0
		andi.b	#$70,d0	; 'p'
		beq.w	locret_1C75C
		move.b	#9,$1C(a0)
		move.w	#$E0,d0	
		jsr	(PlaySound).l
		addq.l	#4,sp
		move.b	#1,$39(a0)
		move.w	#0,$3A(a0)
		cmpi.b	#$C,$28(a0)
		bcs.s	loc_1C754
		move.b	#2,($FFFFD15C).w

loc_1C754:				
		bsr.w	loc_1C55A
		bsr.w	loc_1E234

locret_1C75C:				
		rts	
; ===========================================================================

loc_1C75E:				
		move.b	(v_joypad2_hold).w,d0
		btst	#1,d0
		bne.s	loc_1C7E0
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#1,$C(a0)
		move.b	#0,$39(a0)
		moveq	#0,d0
		move.b	$3A(a0),d0
		add.w	d0,d0
		move.w	word_1C7CE(pc,d0.w),$14(a0)
		move.w	$14(a0),d0
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0
		neg.w	d0
		addi.w	#$2000,d0
		move.w	d0,(v_hscroll_delay_val_p2).w
		btst	#0,$22(a0)
		beq.s	loc_1C7B6
		neg.w	$14(a0)

loc_1C7B6:				
		bset	#2,$22(a0)
		move.b	#0,($FFFFD15C).w
		move.w	#$BC,d0	
		jsr	(PlaySound).l
		bra.s	loc_1C828
; ===========================================================================
word_1C7CE:	dc.w  $800		; 0
		dc.w  $880		; 1
		dc.w  $900		; 2
		dc.w  $980		; 3
		dc.w  $A00		; 4
		dc.w  $A80		; 5
		dc.w  $B00		; 6
		dc.w  $B80		; 7
		dc.w  $C00		; 8
; ===========================================================================

loc_1C7E0:				
		tst.w	$3A(a0)
		beq.s	loc_1C7F8
		move.w	$3A(a0),d0
		lsr.w	#5,d0
		sub.w	d0,$3A(a0)
		bcc.s	loc_1C7F8
		move.w	#0,$3A(a0)

loc_1C7F8:				
		move.b	(v_joypad2_press).w,d0
		andi.b	#$70,d0	; 'p'
		beq.w	loc_1C828
		move.w	#$900,$1C(a0)
		move.w	#$E0,d0	
		jsr	(PlaySound).l
		addi.w	#$200,$3A(a0)
		cmpi.w	#$800,$3A(a0)
		bcs.s	loc_1C828
		move.w	#$800,$3A(a0)

loc_1C828:				
		addq.l	#4,sp
		cmpi.w	#$60,(v_camera_y_shift_p2).w ; '`'
		beq.s	loc_1C83C
		bcc.s	loc_1C838
		addq.w	#4,(v_camera_y_shift_p2).w

loc_1C838:				
		subq.w	#2,(v_camera_y_shift_p2).w

loc_1C83C:				
		bsr.w	loc_1C55A
		bsr.w	loc_1E234
		rts	
; ===========================================================================

loc_1C846:				
		move.b	$26(a0),d0
		addi.b	#$60,d0	; '`'
		cmpi.b	#-$40,d0
		bcc.s	locret_1C87A
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$20,d0	; ' '
		asr.l	#8,d0
		tst.w	$14(a0)
		beq.s	locret_1C87A
		bmi.s	loc_1C876
		tst.w	d0
		beq.s	locret_1C874
		add.w	d0,$14(a0)

locret_1C874:				
		rts	
; ===========================================================================

loc_1C876:				
		add.w	d0,$14(a0)

locret_1C87A:				
		rts	
; ===========================================================================

loc_1C87C:				
		move.b	$26(a0),d0
		addi.b	#$60,d0	; '`'
		cmpi.b	#-$40,d0
		bcc.s	locret_1C8B6
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$50,d0	; 'P'
		asr.l	#8,d0
		tst.w	$14(a0)
		bmi.s	loc_1C8AC
		tst.w	d0
		bpl.s	loc_1C8A6
		asr.l	#2,d0

loc_1C8A6:				
		add.w	d0,$14(a0)
		rts	
; ===========================================================================

loc_1C8AC:				
		tst.w	d0
		bmi.s	loc_1C8B2
		asr.l	#2,d0

loc_1C8B2:				
		add.w	d0,$14(a0)

locret_1C8B6:				
		rts	
; ===========================================================================

loc_1C8B8:				
		nop	
		tst.b	$38(a0)
		bne.s	locret_1C8F2
		tst.w	$2E(a0)
		bne.s	loc_1C8F4
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		beq.s	locret_1C8F2
		move.w	$14(a0),d0
		bpl.s	loc_1C8DC
		neg.w	d0

loc_1C8DC:				
		cmpi.w	#$280,d0
		bcc.s	locret_1C8F2
		clr.w	$14(a0)
		bset	#1,$22(a0)
		move.w	#$1E,$2E(a0)

locret_1C8F2:				
		rts	
; ===========================================================================

loc_1C8F4:				
		subq.w	#1,$2E(a0)
		rts	
; ===========================================================================

loc_1C8FA:				
		move.b	$26(a0),d0
		beq.s	loc_1C914
		bpl.s	loc_1C90A
		addq.b	#2,d0
		bcc.s	loc_1C908
		moveq	#0,d0

loc_1C908:				
		bra.s	loc_1C910
; ===========================================================================

loc_1C90A:				
		subq.b	#2,d0
		bcc.s	loc_1C910
		moveq	#0,d0

loc_1C910:				
		move.b	d0,$26(a0)

loc_1C914:				
		move.b	$27(a0),d0
		beq.s	locret_1C958
		tst.w	$14(a0)
		bmi.s	loc_1C938

loc_1C920:				
		move.b	$2D(a0),d1
		add.b	d1,d0
		bcc.s	loc_1C936
		subq.b	#1,$2C(a0)
		bcc.s	loc_1C936
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1C936:				
		bra.s	loc_1C954
; ===========================================================================

loc_1C938:				
		tst.b	$29(a0)
		bne.s	loc_1C920
		move.b	$2D(a0),d1
		sub.b	d1,d0
		bcc.s	loc_1C954
		subq.b	#1,$2C(a0)
		bcc.s	loc_1C954
		move.b	#0,$2C(a0)
		moveq	#0,d0

loc_1C954:				
		move.b	d0,$27(a0)

locret_1C958:				
		rts	
; ===========================================================================

loc_1C95A:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1C972
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1C972:				
		move.b	$3F(a0),d5
		move.w	$10(a0),d1
		move.w	$12(a0),d2
		jsr	(CalcAngle).l
		subi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		cmpi.b	#$40,d0	; '@'
		beq.w	loc_1CA3C
		cmpi.b	#-$80,d0
		beq.w	loc_1CA98
		cmpi.b	#-$40,d0
		beq.w	loc_1CAF4
		bsr.w	loc_1F05E
		tst.w	d1
		bpl.s	loc_1C9B6
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1C9B6:				
		bsr.w	loc_1EEDC
		tst.w	d1
		bpl.s	loc_1C9C8
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1C9C8:				
		bsr.w	loc_1EC4E
		tst.w	d1
		bpl.s	locret_1CA3A
		move.b	$12(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_1C9E0
		cmp.b	d2,d0
		blt.s	locret_1CA3A

loc_1C9E0:				
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.b	d3,d0
		addi.b	#$20,d0	; ' '
		andi.b	#$40,d0	; '@'
		bne.s	loc_1CA18
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0	; ' '
		beq.s	loc_1CA0A
		asr	$12(a0)
		bra.s	loc_1CA2C
; ===========================================================================

loc_1CA0A:				
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)
		rts	
; ===========================================================================

loc_1CA18:				
		move.w	#0,$10(a0)
		cmpi.w	#$FC0,$12(a0)
		ble.s	loc_1CA2C
		move.w	#$FC0,$12(a0)

loc_1CA2C:				
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	locret_1CA3A
		neg.w	$14(a0)

locret_1CA3A:				
		rts	
; ===========================================================================

loc_1CA3C:				
		bsr.w	loc_1F05E
		tst.w	d1
		bpl.s	loc_1CA56
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)
		move.w	$12(a0),$14(a0)
		rts	
; ===========================================================================

loc_1CA56:				
		bsr.w	loc_1EF2E
		tst.w	d1
		bpl.s	loc_1CA70
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	locret_1CA6E
		move.w	#0,$12(a0)

locret_1CA6E:				
		rts	
; ===========================================================================

loc_1CA70:				
		tst.w	$12(a0)
		bmi.s	locret_1CA96
		bsr.w	loc_1EC4E
		tst.w	d1
		bpl.s	locret_1CA96
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)

locret_1CA96:				
		rts	
; ===========================================================================

loc_1CA98:				
		bsr.w	loc_1F05E
		tst.w	d1
		bpl.s	loc_1CAAA
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1CAAA:				
		bsr.w	loc_1EEDC
		tst.w	d1
		bpl.s	loc_1CABC
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_1CABC:				
		bsr.w	loc_1EF2E
		tst.w	d1
		bpl.s	locret_1CAF2
		sub.w	d1,$C(a0)
		move.b	d3,d0
		addi.b	#$20,d0	; ' '
		andi.b	#$40,d0	; '@'
		bne.s	loc_1CADC
		move.w	#0,$12(a0)
		rts	
; ===========================================================================

loc_1CADC:				
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	locret_1CAF2
		neg.w	$14(a0)

locret_1CAF2:				
		rts	
; ===========================================================================

loc_1CAF4:				
		bsr.w	loc_1EEDC
		tst.w	d1
		bpl.s	loc_1CB0E
		add.w	d1,8(a0)
		move.w	#0,$10(a0)
		move.w	$12(a0),$14(a0)
		rts	
; ===========================================================================

loc_1CB0E:				
		bsr.w	loc_1EF2E
		tst.w	d1
		bpl.s	loc_1CB28
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	locret_1CB26
		move.w	#0,$12(a0)

locret_1CB26:				
		rts	
; ===========================================================================

loc_1CB28:				
		tst.w	$12(a0)
		bmi.s	locret_1CB4E
		bsr.w	loc_1EC4E
		tst.w	d1
		bpl.s	locret_1CB4E
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	loc_1CB50
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)

locret_1CB4E:				
		rts	
; ===========================================================================

loc_1CB50:				
		tst.b	$39(a0)
		bne.s	loc_1CB80
		move.b	#0,$1C(a0)

loc_1CB5C:				
		btst	#2,$22(a0)
		beq.s	loc_1CB80
		bclr	#2,$22(a0)
		move.b	#$F,$16(a0)
		move.b	#9,$17(a0)
		move.b	#0,$1C(a0)
		subq.w	#1,$C(a0)

loc_1CB80:				
		bclr	#1,$22(a0)
		bclr	#5,$22(a0)
		bclr	#4,$22(a0)
		move.b	#0,$3C(a0)
		move.w	#0,(v_enemy_combo).w
		move.b	#0,$27(a0)
		move.b	#0,$29(a0)
		move.b	#0,$2C(a0)
		move.w	#0,(v_tails_look_delay_counter).w
		cmpi.b	#$14,$1C(a0)
		bne.s	locret_1CBC4
		move.b	#0,$1C(a0)

locret_1CBC4:				
		rts	
; ===========================================================================

loc_1CBC6:				
		jsr	SpeedToPos
		addi.w	#$30,$12(a0) ; '0'
		btst	#6,$22(a0)
		beq.s	loc_1CBE0
		subi.w	#$20,$12(a0) ; ' '

loc_1CBE0:				
		cmpi.w	#-$100,(v_boundary_top_next).w
		bne.s	loc_1CBEE
		andi.w	#$7FF,$C(a0)

loc_1CBEE:				
		bsr.w	loc_1CC08
		bsr.w	loc_1C55A
		bsr.w	loc_1BF38
		bsr.w	loc_1CDC4
		bsr.w	loc_1D1AC
		jmp	DisplaySprite
; ===========================================================================

loc_1CC08:				
		move.w	(v_boundary_bottom_next_p2).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		blt.w	loc_1D318
		bsr.w	loc_1C95A
		btst	#1,$22(a0)
		bne.s	locret_1CC4E
		moveq	#0,d0
		move.w	d0,$12(a0)
		move.w	d0,$10(a0)
		move.w	d0,$14(a0)
		move.b	d0,$2A(a0)
		move.b	#0,$1C(a0)
		move.b	#2,$24(a0)
		move.w	#$78,$30(a0) ; 'x'
		move.b	#0,$39(a0)

locret_1CC4E:				
		rts	
; ===========================================================================

loc_1CC50:				
		bsr.w	loc_1CC6C
		jsr	ObjectFall
		bsr.w	loc_1BF38
		bsr.w	loc_1CDC4
		bsr.w	loc_1D1AC
		jmp	DisplaySprite
; ===========================================================================

loc_1CC6C:				
		cmpi.w	#2,(v_player_mode).w
		beq.w	loc_1B21C
		move.b	#1,(f_disable_horiz_scroll_p2).w
		move.b	#0,$39(a0)
		move.w	(v_boundary_bottom_next_p2).w,d0
		addi.w	#$100,d0
		cmp.w	$C(a0),d0
		bge.w	locret_1CD8E
		move.b	#2,$24(a0)
		tst.w	(f_two_player).w
		bne.s	loc_1CCA2
		bra.w	loc_1BE34
; ===========================================================================

loc_1CCA2:				
		addq.b	#1,(f_hud_lives_update_p2).w
		subq.b	#1,(v_lives_p2).w
		bne.s	loc_1CCEC
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w ; '9'
		move.b	#$39,($FFFFB0C0).w ; '9'
		move.b	#1,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		clr.b	(f_time_over_p2).w

loc_1CCCC:				
		clr.b	(f_hud_time_update).w
		clr.b	(f_hud_time_update_p2).w
		move.b	#8,$24(a0)
		move.w	#$9B,d0	
		jsr	(PlayMusic).l
		moveq	#3,d0
		jmp	(AddPLC).l
; ===========================================================================

loc_1CCEC:				
		tst.b	(f_time_over).w
		beq.s	loc_1CD0E
		tst.b	(f_time_over_p2).w
		beq.s	loc_1CD38
		move.w	#0,$3A(a0)
		clr.b	(f_hud_time_update).w
		clr.b	(f_hud_time_update_p2).w
		move.b	#8,$24(a0)
		rts	
; ===========================================================================

loc_1CD0E:				
		tst.b	(f_time_over_p2).w
		beq.s	loc_1CD38
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w ; '9'
		move.b	#$39,($FFFFB0C0).w ; '9'
		move.b	#2,($FFFFB09A).w
		move.b	#3,($FFFFB0DA).w
		move.w	a0,($FFFFB0BE).w
		bra.s	loc_1CCCC
; ===========================================================================

loc_1CD38:				
		move.b	#0,(f_disable_horiz_scroll_p2).w
		move.b	#$A,$24(a0)
		move.w	(v_x_pos_p2_lampcopy).w,8(a0)
		move.w	(v_y_pos_p2_lampcopy).w,$C(a0)
		move.w	(v_ost_tile_p2_lampcopy).w,2(a0)
		move.w	(v_ost_top_solid_bit_p2_lampcopy).w,$3E(a0)
		clr.w	(v_rings_p2).w
		clr.b	(v_ring_reward_p2).w
		move.b	#0,$2A(a0)
		move.b	#5,$1C(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		move.w	#0,$14(a0)
		move.b	#2,$22(a0)
		move.w	#0,$2E(a0)

locret_1CD8E:				
		rts	
; ===========================================================================

loc_1CD90:				
		tst.w	$3A(a0)
		beq.s	locret_1CDA2
		subq.w	#1,$3A(a0)
		bne.s	locret_1CDA2
		move.w	#1,(f_restart).w

locret_1CDA2:				
		rts	
; ===========================================================================

loc_1CDA4:				
		tst.w	(v_camera_x_pos_diff_p2).w
		bne.s	loc_1CDB6
		tst.w	(v_camera_y_pos_diff_p2).w
		bne.s	loc_1CDB6
		move.b	#2,$24(a0)

loc_1CDB6:				
		bsr.w	loc_1CDC4
		bsr.w	loc_1D1AC
		jmp	DisplaySprite
; ===========================================================================

loc_1CDC4:				
		lea	(off_1D038).l,a1

loc_1CDCA:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_1CDEC
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		bclr	#5,$22(a0)

loc_1CDEC:				
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),d0
		bmi.s	loc_1CE5C
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_1CE2A
		move.b	d0,$1E(a0)

loc_1CE12:				
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		cmpi.b	#-$10,d0
		bcc.s	loc_1CE2C

loc_1CE22:				
		move.b	d0,$1A(a0)
		addq.b	#1,$1B(a0)

locret_1CE2A:				
		rts	
; ===========================================================================

loc_1CE2C:				
		addq.b	#1,d0
		bne.s	loc_1CE3C
		move.b	#0,$1B(a0)
		move.b	1(a1),d0
		bra.s	loc_1CE22
; ===========================================================================

loc_1CE3C:				
		addq.b	#1,d0
		bne.s	loc_1CE50
		move.b	2(a1,d1.w),d0
		sub.b	d0,$1B(a0)
		sub.b	d0,d1
		move.b	1(a1,d1.w),d0
		bra.s	loc_1CE22
; ===========================================================================

loc_1CE50:				
		addq.b	#1,d0
		bne.s	locret_1CE5A
		move.b	2(a1,d1.w),$1C(a0)

locret_1CE5A:				
		rts	
; ===========================================================================

loc_1CE5C:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_1CE2A
		addq.b	#1,d0
		bne.w	loc_1CF6E
		moveq	#0,d0
		move.b	$27(a0),d0
		bne.w	loc_1CF08
		moveq	#0,d1
		move.b	$26(a0),d0
		bmi.s	loc_1CE7E
		beq.s	loc_1CE7E
		subq.b	#1,d0

loc_1CE7E:				
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1CE8A
		not.b	d0

loc_1CE8A:				
		addi.b	#$10,d0
		bpl.s	loc_1CE92
		moveq	#3,d1

loc_1CE92:				
		andi.b	#-4,1(a0)
		eor.b	d1,d2
		or.b	d2,1(a0)
		btst	#5,$22(a0)
		bne.w	loc_1CFB2
		lsr.b	#4,d0
		andi.b	#6,d0
		move.w	$14(a0),d2
		bpl.s	loc_1CEB6
		neg.w	d2

loc_1CEB6:				
		tst.b	$2B(a0)
		bpl.w	loc_1CEC0
		add.w	d2,d2

loc_1CEC0:				
		move.b	d0,d3
		add.b	d3,d3
		add.b	d3,d3
		lea	(byte_1D07A).l,a1
		cmpi.w	#$600,d2
		bcs.s	loc_1CEEE
		lea	(byte_1D084).l,a1
		move.b	d0,d1
		lsr.b	#1,d1
		add.b	d1,d0
		add.b	d0,d0
		move.b	d0,d3
		cmpi.w	#$700,d2
		bcs.s	loc_1CEEE
		lea	(byte_1D176).l,a1

loc_1CEEE:				
		neg.w	d2
		addi.w	#$800,d2
		bpl.s	loc_1CEF8
		moveq	#0,d2

loc_1CEF8:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		bsr.w	loc_1CE12
		add.b	d3,$1A(a0)
		rts	
; ===========================================================================

loc_1CF08:				
		move.b	$27(a0),d0
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1CF36
		andi.b	#-4,1(a0)
		addi.b	#$B,d0
		divu.w	#$16,d0
		addi.b	#$75,d0	; 'u'
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1CF36:				
		andi.b	#-4,1(a0)
		tst.b	$29(a0)
		beq.s	loc_1CF4E
		ori.b	#1,1(a0)
		addi.b	#$B,d0
		bra.s	loc_1CF5A
; ===========================================================================

loc_1CF4E:				
		ori.b	#3,1(a0)
		neg.b	d0
		addi.b	#-$71,d0

loc_1CF5A:				
		divu.w	#$16,d0
		addi.b	#$75,d0	; 'u'
		move.b	d0,$1A(a0)
		move.b	#0,$1E(a0)
		rts	
; ===========================================================================

loc_1CF6E:				
		addq.b	#1,d0
		bne.s	loc_1CFE4
		move.w	$14(a0),d2
		bpl.s	loc_1CF7A
		neg.w	d2

loc_1CF7A:				
		lea	(byte_1D093).l,a1
		cmpi.w	#$600,d2
		bcc.s	loc_1CF8C
		lea	(byte_1D08E).l,a1

loc_1CF8C:				
		neg.w	d2
		addi.w	#$400,d2
		bpl.s	loc_1CF96
		moveq	#0,d2

loc_1CF96:				
		lsr.w	#8,d2
		move.b	d2,$1E(a0)
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		bra.w	loc_1CE12
; ===========================================================================

loc_1CFB2:				
		move.w	$14(a0),d2
		bmi.s	loc_1CFBA
		neg.w	d2

loc_1CFBA:				
		addi.w	#$800,d2
		bpl.s	loc_1CFC2
		moveq	#0,d2

loc_1CFC2:				
		lsr.w	#6,d2
		move.b	d2,$1E(a0)
		lea	(byte_1D098).l,a1
		move.b	$22(a0),d1
		andi.b	#1,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		bra.w	loc_1CE12
; ===========================================================================

loc_1CFE4:				
		move.w	$10(a2),d1
		move.w	$12(a2),d2
		jsr	(CalcAngle).l
		moveq	#0,d1
		move.b	$22(a0),d2
		andi.b	#1,d2
		bne.s	loc_1D002
		not.b	d0
		bra.s	loc_1D006
; ===========================================================================

loc_1D002:				
		addi.b	#-$80,d0

loc_1D006:				
		addi.b	#$10,d0
		bpl.s	loc_1D00E
		moveq	#3,d1

loc_1D00E:				
		andi.b	#-4,1(a0)
		eor.b	d1,d2
		or.b	d2,1(a0)
		lsr.b	#3,d0
		andi.b	#$C,d0
		move.b	d0,d3
		lea	(byte_1D2E8).l,a1
		move.b	#3,$1E(a0)
		bsr.w	loc_1CE12
		add.b	d3,$1A(a0)
		rts	
; ===========================================================================
off_1D038:	dc.w byte_1D07A-off_1D038; 0 
		dc.w byte_1D084-off_1D038; 1
		dc.w byte_1D08E-off_1D038; 2
		dc.w byte_1D093-off_1D038; 3
		dc.w byte_1D098-off_1D038; 4
		dc.w byte_1D0A2-off_1D038; 5
		dc.w byte_1D0E0-off_1D038; 6
		dc.w byte_1D0F8-off_1D038; 7
		dc.w byte_1D0FB-off_1D038; 8
		dc.w byte_1D0FE-off_1D038; 9
		dc.w byte_1D103-off_1D038; 10
		dc.w byte_1D106-off_1D038; 11
		dc.w byte_1D10C-off_1D038; 12
		dc.w byte_1D110-off_1D038; 13
		dc.w byte_1D117-off_1D038; 14
		dc.w byte_1D11B-off_1D038; 15
		dc.w byte_1D122-off_1D038; 16
		dc.w byte_1D131-off_1D038; 17
		dc.w byte_1D135-off_1D038; 18
		dc.w byte_1D13B-off_1D038; 19
		dc.w byte_1D140-off_1D038; 20
		dc.w byte_1D144-off_1D038; 21
		dc.w byte_1D14B-off_1D038; 22
		dc.w byte_1D14E-off_1D038; 23
		dc.w byte_1D151-off_1D038; 24
		dc.w byte_1D154-off_1D038; 25
		dc.w byte_1D157-off_1D038; 26
		dc.w byte_1D15A-off_1D038; 27
		dc.w byte_1D15E-off_1D038; 28
		dc.w byte_1D162-off_1D038; 29
		dc.w byte_1D16C-off_1D038; 30
		dc.w byte_1D176-off_1D038; 31
		dc.w byte_1D180-off_1D038; 32
byte_1D07A:	dc.b $FF,$10,$11,$12,$13,$14,$15, $E, $F,$FF; 0	
					; h+60C4o
byte_1D084:	dc.b $FF,$2E,$2F,$30,$31,$FF,$FF,$FF,$FF,$FF; 0	
					; h+60C4o
byte_1D08E:	dc.b   1,$48,$47,$46,$FF; 0 
byte_1D093:	dc.b   1,$48,$47,$46,$FF; 0 
byte_1D098:	dc.b $FD,$63,$64,$65,$66,$FF,$FF,$FF,$FF,$FF; 0	
					; h+60C4o
byte_1D0A2:	dc.b   7,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  2,  1,  1,  1; 0
					
		dc.b   1,  1,  1,  1,  1,  3,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1; 16
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5; 32
		dc.b   6,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  6,$FE,$1C; 48
byte_1D0E0:	dc.b   9,$69,$69,$6A,$6A,$69,$69,$6A,$6A,$69,$69,$6A,$6A,$69,$69,$6A; 0
					
		dc.b $6A,$69,$69,$6A,$6A,$69,$6A,$FF; 16
byte_1D0F8:	dc.b $3F,  4,$FF	; 0 
byte_1D0FB:	dc.b $3F,$5B,$FF	; 0 
byte_1D0FE:	dc.b   0,$60,$61,$62,$FF; 0 
byte_1D103:	dc.b $3F,$82,$FF	; 0 
byte_1D106:	dc.b   7,  8,  8,  9,$FD,  5; 0	
byte_1D10C:	dc.b   7,  9,$FD,  5	; 0 
byte_1D110:	dc.b   7,$67,$68,$67,$68,$FD,  0; 0 
byte_1D117:	dc.b   9,$6E,$73,$FF	; 0 
byte_1D11B:	dc.b   9,$6E,$6F,$70,$71,$72,$FF; 0 
byte_1D122:	dc.b   3,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$59,$5A,$FD,  0; 0
					
byte_1D131:	dc.b   5,$6C,$6D,$FF	; 0 
byte_1D135:	dc.b  $F,  1,  2,  3,$FE,  1; 0	
byte_1D13B:	dc.b  $F,  1,  2,$FE,  1; 0 
byte_1D140:	dc.b $13,$85,$86,$FF	; 0 
byte_1D144:	dc.b  $B,$74,$74,$12,$13,$FD,  0; 0 
byte_1D14B:	dc.b $20,$5D,$FF	; 0 
byte_1D14E:	dc.b $2F,$5D,$FF	; 0 
byte_1D151:	dc.b   3,$5D,$FF	; 0 
byte_1D154:	dc.b   3,$5D,$FF	; 0 
byte_1D157:	dc.b   3,$5C,$FF	; 0 
byte_1D15A:	dc.b   9,$6B,$5C,$FF	; 0 
byte_1D15E:	dc.b $77,  0,$FD,  0	
byte_1D162:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,$FF; 0	
byte_1D16C:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,$FF; 0	
byte_1D176:	dc.b $FF,$32,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF; 0	
					; h+60C4o
byte_1D180:	dc.b   1,$5E,$5F,$FF	; 0 
; ===========================================================================

loc_1D184:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(v_tailstails_last_frame_id).w,d0
		beq.s	locret_1D1FE
		move.b	d0,(v_tailstails_last_frame_id).w
		lea	(DPLC_Tails).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1D1FE
		move.w	#-$A00,d4
		bra.s	loc_1D1D2
; ===========================================================================

loc_1D1AC:				
		moveq	#0,d0
		move.b	$1A(a0),d0

loc_1D1B2:				
		cmp.b	(v_tails_last_frame_id).w,d0
		beq.s	locret_1D1FE
		move.b	d0,(v_tails_last_frame_id).w
		lea	(DPLC_Tails).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1D1FE
		move.w	#-$C00,d4

loc_1D1D2:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Tails,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,loc_1D1D2

locret_1D1FE:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

TailsTails:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1D20E(pc,d0.w),d1
		jmp	off_1D20E(pc,d1.w)
; ===========================================================================
off_1D20E:	dc.w loc_1D212-off_1D20E; 0 
		dc.w loc_1D23A-off_1D20E; 1
; ===========================================================================

loc_1D212:				
		addq.b	#2,$24(a0)
		move.l	#Map_Tails,4(a0)
		move.w	#$7B0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#4,1(a0)

loc_1D23A:				
		movea.w	$3E(a0),a2
		move.b	$26(a2),$26(a0)
		move.b	$22(a2),$22(a0)
		move.w	8(a2),8(a0)
		move.w	$C(a2),$C(a0)
		andi.w	#$7FFF,2(a0)
		tst.w	2(a2)
		bpl.s	loc_1D268
		ori.w	#-$8000,2(a0)

loc_1D268:				
		moveq	#0,d0
		move.b	$1C(a2),d0
		btst	#5,$22(a2)
		beq.s	loc_1D278
		moveq	#4,d0

loc_1D278:				
		cmp.b	$30(a0),d0
		beq.s	loc_1D288
		move.b	d0,$30(a0)
		move.b	byte_1D29E(pc,d0.w),$1C(a0)

loc_1D288:				
		lea	(off_1D2C0).l,a1
		bsr.w	loc_1CDCA
		bsr.w	loc_1D184
		jsr	DisplaySprite
		rts	
; ===========================================================================
byte_1D29E:	dc.b   0,  0,  3,  3,  9,  1,  0,  2,  1,  7,  0,  0,  0,  8,  0,  0; 0
		dc.b   0,  0,  0,  0, $A,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 16
		dc.b   0,  0		; 32
off_1D2C0:	dc.w byte_1D2D6-off_1D2C0; 0 
		dc.w byte_1D2D9-off_1D2C0; 1
		dc.w byte_1D2E0-off_1D2C0; 2
		dc.w byte_1D2E8-off_1D2C0; 3
		dc.w byte_1D2EE-off_1D2C0; 4
		dc.w byte_1D2F4-off_1D2C0; 5
		dc.w byte_1D2FA-off_1D2C0; 6
		dc.w byte_1D300-off_1D2C0; 7
		dc.w byte_1D306-off_1D2C0; 8
		dc.w byte_1D30C-off_1D2C0; 9
		dc.w byte_1D312-off_1D2C0; 10
byte_1D2D6:	dc.b $20,  0,$FF	; 0 
byte_1D2D9:	dc.b   7,  9, $A, $B, $C, $D,$FF; 0 
byte_1D2E0:	dc.b   3,  9, $A, $B, $C, $D,$FD,  1; 0	
byte_1D2E8:	dc.b $FC,$49,$4A,$4B,$4C,$FF; 0	
byte_1D2EE:	dc.b   3,$4D,$4E,$4F,$50,$FF; 0	
byte_1D2F4:	dc.b   3,$51,$52,$53,$54,$FF; 0	
byte_1D2FA:	dc.b 3,	$55, $56, $57, $58, $FF; 0 ; DATA XREF:	h+634Co
byte_1D300:	dc.b   2,$81,$82,$83,$84,$FF; 0	
byte_1D306:	dc.b   2,$87,$88,$89,$8A,$FF; 0	
byte_1D30C:	dc.b   9,$87,$88,$89,$8A,$FF; 0	
byte_1D312:	dc.b   9,$81,$82,$83,$84,$FF; 0	
; ===========================================================================

loc_1D318:				
		jmp	KillCharacter
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

DrownCount:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1D32E(pc,d0.w),d1
		jmp	off_1D32E(pc,d1.w)
; ===========================================================================
off_1D32E:	dc.w loc_1D340-off_1D32E; 0 
		dc.w loc_1D398-off_1D32E; 1
		dc.w loc_1D3A4-off_1D32E; 2
		dc.w loc_1D41A-off_1D32E; 3
		dc.w loc_1D42E-off_1D32E; 4
		dc.w loc_1D606-off_1D32E; 5
		dc.w loc_1D434-off_1D32E; 6
		dc.w loc_1D40E-off_1D32E; 7
		dc.w loc_1D42E-off_1D32E; 8
; ===========================================================================

loc_1D340:				
		addq.b	#2,$24(a0)
		move.l	#Map_1FBF6,4(a0)
		tst.b	$3F(a0)
		beq.s	loc_1D35A
		move.l	#Map_1FC18,4(a0)

loc_1D35A:				
		move.w	#-$7AA5,2(a0)
		move.b	#-$7C,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		bpl.s	loc_1D388
		addq.b	#8,$24(a0)
		andi.w	#$7F,d0	; ''
		move.b	d0,$33(a0)
		bra.w	loc_1D606
; ===========================================================================

loc_1D388:				
		move.b	d0,$1C(a0)
		move.w	8(a0),$30(a0)
		move.w	#-$88,$12(a0)

loc_1D398:				
		lea	(off_1D860).l,a1
		jsr	AnimateSprite

loc_1D3A4:				
		move.w	(v_water_height_actual).w,d0
		cmp.w	$C(a0),d0
		bcs.s	loc_1D3CA
		move.b	#6,$24(a0)
		addq.b	#7,$1C(a0)
		cmpi.b	#$D,$1C(a0)
		beq.s	loc_1D41A
		bcs.s	loc_1D41A
		move.b	#$D,$1C(a0)
		bra.s	loc_1D41A
; ===========================================================================

loc_1D3CA:				
		; If in a wind-tunnel, then make the bubbles move to the right.
		; Used in Sonic 1 and 3, but unused here, as there are no underwater
		; wind tunnels in Sonic 2.
		tst.b	(f_wind_tunnel_now).w
		beq.s	loc_1D3D4
		addq.w	#4,$30(a0)

loc_1D3D4:				
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		andi.w	#$7F,d0	; ''
		lea	(byte_1D4C0).l,a1
		move.b	(a1,d0.w),d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		bsr.s	loc_1D474
		jsr	SpeedToPos
		tst.b	1(a0)
		bpl.s	loc_1D408
		jmp	DisplaySprite
; ===========================================================================

loc_1D408:				
		jmp	DeleteObject
; ===========================================================================

loc_1D40E:				
		movea.l	$3C(a0),a2
		cmpi.b	#$C,$28(a2)
		bhi.s	loc_1D42E

loc_1D41A:				
		bsr.s	loc_1D474
		lea	(off_1D860).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_1D42E:				
					
		jmp	DeleteObject
; ===========================================================================

loc_1D434:				
		movea.l	$3C(a0),a2
		cmpi.b	#$C,$28(a2)
		bhi.s	loc_1D46E
		subq.w	#1,$38(a0)
		bne.s	loc_1D452
		move.b	#$E,$24(a0)
		addq.b	#7,$1C(a0)
		bra.s	loc_1D41A
; ===========================================================================

loc_1D452:				
		lea	(off_1D860).l,a1
		jsr	AnimateSprite
		bsr.w	loc_1D5C0
		tst.b	1(a0)
		bpl.s	loc_1D46E
		jmp	DisplaySprite
; ===========================================================================

loc_1D46E:				
		jmp	DeleteObject
; ===========================================================================

loc_1D474:				
		tst.w	$38(a0)
		beq.s	locret_1D4BE
		subq.w	#1,$38(a0)
		bne.s	locret_1D4BE
		cmpi.b	#7,$1C(a0)
		bcc.s	locret_1D4BE
		move.w	#$F,$38(a0)
		clr.w	$12(a0)
		move.b	#-$80,1(a0)
		move.w	8(a0),d0
		sub.w	(v_camera_x_pos).w,d0
		addi.w	#$80,d0	
		move.w	d0,8(a0)
		move.w	$C(a0),d0
		sub.w	(v_camera_y_pos).w,d0
		addi.w	#$80,d0	
		move.w	d0,$A(a0)
		move.b	#$C,$24(a0)

locret_1D4BE:				
		rts	
; ===========================================================================
byte_1D4C0:	dc.b   0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2; 0
					
		dc.b   2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3; 16
		dc.b   3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2; 32
		dc.b   2,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0; 48
		dc.b   0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD; 64
		dc.b $FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC; 80
		dc.b $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD; 96
		dc.b $FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF; 112
		dc.b   0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2; 128
		dc.b   2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3; 144
		dc.b   3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2; 160
		dc.b   2,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0; 176
		dc.b   0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD; 192
		dc.b $FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC; 208
		dc.b $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD; 224
		dc.b $FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF; 240
; ===========================================================================

loc_1D5C0:				
		moveq	#0,d1
		move.b	$1A(a0),d1
		cmpi.b	#8,d1
		bcs.s	locret_1D604
		cmpi.b	#$E,d1
		bcc.s	locret_1D604
		cmp.b	$2E(a0),d1
		beq.s	locret_1D604
		move.b	d1,$2E(a0)
		subq.w	#8,d1
		move.w	d1,d0
		add.w	d1,d1
		add.w	d0,d1
		lsl.w	#6,d1
		addi.l	#Art_Countdown,d1
		move.w	#-$6C80,d2
		tst.b	$3F(a0)
		beq.s	loc_1D5FA
		move.w	#-$6E80,d2

loc_1D5FA:				
		move.w	#$60,d3	; '`'
		jsr	(QueueDMATransfer).l

locret_1D604:				
		rts	
; ===========================================================================

loc_1D606:				
					
		movea.l	$3C(a0),a2
		tst.w	$2C(a0)
		bne.w	loc_1D708
		cmpi.b	#6,$24(a2)
		bcc.w	locret_1D81C
		btst	#6,$22(a2)
		beq.w	locret_1D81C
		subq.w	#1,$38(a0)
		bpl.w	loc_1D72C
		move.w	#$3B,$38(a0) ; ';'
		move.w	#1,$36(a0)
		jsr	(RandomNumber).l
		andi.w	#1,d0
		move.b	d0,$34(a0)
		moveq	#0,d0
		move.b	$28(a2),d0
		cmpi.w	#$19,d0
		beq.s	loc_1D68C
		cmpi.w	#$14,d0
		beq.s	loc_1D68C
		cmpi.w	#$F,d0
		beq.s	loc_1D68C
		cmpi.w	#$C,d0
		bhi.s	loc_1D69C
		bne.s	loc_1D678
		tst.b	$3F(a0)
		bne.s	loc_1D678
		move.w	#$9F,d0	
		jsr	(PlayMusic).l

loc_1D678:				
		subq.b	#1,$32(a0)
		bpl.s	loc_1D69C
		move.b	$33(a0),$32(a0)
		bset	#7,$36(a0)
		bra.s	loc_1D69C
; ===========================================================================

loc_1D68C:				
		tst.b	$3F(a0)
		bne.s	loc_1D69C
		move.w	#$C2,d0	
		jsr	(PlaySound).l

loc_1D69C:				
		subq.b	#1,$28(a2)
		bcc.w	loc_1D72A
		move.b	#-$7F,$2A(a2)
		move.w	#$B2,d0	
		jsr	(PlaySound).l
		move.b	#$A,$34(a0)
		move.w	#1,$36(a0)
		move.w	#$78,$2C(a0) ; 'x'
		movea.l	a2,a1
		bsr.w	loc_1D81E
		move.l	a0,-(sp)
		movea.l	a2,a0
		bsr.w	loc_1B0AC
		move.b	#$17,$1C(a0)
		bset	#1,$22(a0)
		bset	#7,2(a0)
		move.w	#0,$12(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		movea.l	(sp)+,a0
		cmpa.w	#-$5000,a2
		bne.s	locret_1D706
		move.b	#1,(f_disable_scrolling).w

locret_1D706:				
		rts	
; ===========================================================================

loc_1D708:				
		subq.w	#1,$2C(a0)
		bne.s	loc_1D716
		move.b	#6,$24(a2)
		rts	
; ===========================================================================

loc_1D716:				
		move.l	a0,-(sp)
		movea.l	a2,a0
		jsr	SpeedToPos
		addi.w	#$10,$12(a0)
		movea.l	(sp)+,a0
		bra.s	loc_1D72C
; ===========================================================================

loc_1D72A:				
		bra.s	loc_1D73C
; ===========================================================================

loc_1D72C:				
		tst.w	$36(a0)
		beq.w	locret_1D81C
		subq.w	#1,$3A(a0)
		bpl.w	locret_1D81C

loc_1D73C:				
		jsr	(RandomNumber).l
		andi.w	#$F,d0
		addq.w	#8,d0
		move.w	d0,$3A(a0)
		jsr	SingleObjLoad
		bne.w	locret_1D81C
		_move.b	0(a0),0(a1)
		move.w	8(a2),8(a1)
		moveq	#6,d0
		btst	#0,$22(a2)
		beq.s	loc_1D774
		neg.w	d0
		move.b	#$40,$26(a1) ; '@'

loc_1D774:				
		add.w	d0,8(a1)
		move.w	$C(a2),$C(a1)
		move.l	$3C(a0),$3C(a1)
		move.b	#6,$28(a1)
		tst.w	$2C(a0)
		beq.w	loc_1D7C6
		andi.w	#7,$3A(a0)
		addi.w	#0,$3A(a0)
		move.w	$C(a2),d0
		subi.w	#$C,d0
		move.w	d0,$C(a1)
		jsr	(RandomNumber).l
		move.b	d0,$26(a1)
		move.w	(v_frame_counter).w,d0
		andi.b	#3,d0
		bne.s	loc_1D812
		move.b	#$E,$28(a1)
		bra.s	loc_1D812
; ===========================================================================

loc_1D7C6:				
		btst	#7,$36(a0)
		beq.s	loc_1D812
		moveq	#0,d2
		move.b	$28(a2),d2
		cmpi.b	#$C,d2
		bcc.s	loc_1D812
		lsr.w	#1,d2
		jsr	(RandomNumber).l
		andi.w	#3,d0
		bne.s	loc_1D7FA
		bset	#6,$36(a0)
		bne.s	loc_1D812
		move.b	d2,$28(a1)
		move.w	#$1C,$38(a1)

loc_1D7FA:				
		tst.b	$34(a0)
		bne.s	loc_1D812

loc_1D800:
		bset	#6,$36(a0)
		bne.s	loc_1D812
		move.b	d2,$28(a1)
		move.w	#$1C,$38(a1)

loc_1D812:				
		subq.b	#1,$34(a0)
		bpl.s	locret_1D81C
		clr.w	$36(a0)

locret_1D81C:				
		rts	
; ===========================================================================

loc_1D81E:				
		cmpi.b	#$C,$28(a1)
		bhi.s	loc_1D858
		cmpa.w	#-$5000,a1
		bne.s	loc_1D858
		move.w	(v_level_music).w,d0
		btst	#1,$2B(a1)
		beq.s	loc_1D83C
		move.w	#$97,d0	

loc_1D83C:				
		tst.b	(f_super).w
		beq.w	loc_1D848
		move.w	#$96,d0	

loc_1D848:				
		tst.b	(v_current_boss).w
		beq.s	loc_1D852
		move.w	#$93,d0	

loc_1D852:				
		jsr	(PlayMusic).l

loc_1D858:				
		move.b	#$1E,$28(a1)
		rts	
; ===========================================================================
off_1D860:	dc.w byte_1D87E-off_1D860; 0 
		dc.w byte_1D887-off_1D860; 1
		dc.w byte_1D890-off_1D860; 2
		dc.w byte_1D899-off_1D860; 3
		dc.w byte_1D8A2-off_1D860; 4
		dc.w byte_1D8AB-off_1D860; 5
		dc.w byte_1D8B4-off_1D860; 6
		dc.w byte_1D8B9-off_1D860; 7
		dc.w byte_1D8C1-off_1D860; 8
		dc.w byte_1D8C9-off_1D860; 9
		dc.w byte_1D8D1-off_1D860; 10
		dc.w byte_1D8D9-off_1D860; 11
		dc.w byte_1D8E1-off_1D860; 12
		dc.w byte_1D8E9-off_1D860; 13
		dc.w byte_1D8EB-off_1D860; 14
byte_1D87E:	dc.b   5,  0,  1,  2,  3,  4,  8,  8,$FC; 0 
byte_1D887:	dc.b   5,  0,  1,  2,  3,  4,  9,  9,$FC; 0 
byte_1D890:	dc.b   5,  0,  1,  2,  3,  4, $A, $A,$FC; 0 
byte_1D899:	dc.b   5,  0,  1,  2,  3,  4, $B, $B,$FC; 0 
byte_1D8A2:	dc.b   5,  0,  1,  2,  3,  4, $C, $C,$FC; 0 
byte_1D8AB:	dc.b   5,  0,  1,  2,  3,  4, $D, $D,$FC; 0 
byte_1D8B4:	dc.b  $E,  0,  1,  2,$FC; 0 
byte_1D8B9:	dc.b   7,$10,  8,$10,  8,$10,  8,$FC; 0	
byte_1D8C1:	dc.b   7,$10,  9,$10,  9,$10,  9,$FC; 0	
byte_1D8C9:	dc.b   7,$10, $A,$10, $A,$10, $A,$FC; 0	
byte_1D8D1:	dc.b   7,$10, $B,$10, $B,$10, $B,$FC; 0	
byte_1D8D9:	dc.b   7,$10, $C,$10, $C,$10, $C,$FC; 0	
byte_1D8E1:	dc.b   7,$10, $D,$10, $D,$10, $D,$FC; 0	
byte_1D8E9:	dc.b  $E,$FC		; 0 
byte_1D8EB:	dc.b  $E,  1,  2,  3,  4,$FC,  0; 0 
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_1D8F2:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1D900(pc,d0.w),d1
		jmp	off_1D900(pc,d1.w)
; ===========================================================================
off_1D900:	dc.w loc_1D904-off_1D900; 0 
		dc.w loc_1D92C-off_1D900; 1
; ===========================================================================

loc_1D904:				
		addq.b	#2,$24(a0)
		move.l	#Map_1DBE4,4(a0)
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#$18,$19(a0)
		move.w	#$4BE,2(a0)
		bsr.w	Adjust2PArtPointer

loc_1D92C:				
		movea.w	$3E(a0),a2
		btst	#1,$2B(a2)
		bne.s	locret_1D976
		btst	#0,$2B(a2)
		beq.s	loc_1D978
		move.w	8(a2),8(a0)
		move.w	$C(a2),$C(a0)
		move.b	$22(a2),$22(a0)
		andi.w	#$7FFF,2(a0)
		tst.w	2(a2)
		bpl.s	loc_1D964
		ori.w	#-$8000,2(a0)

loc_1D964:				
		lea	(byte_1DBD6).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

locret_1D976:				
		rts	
; ===========================================================================

loc_1D978:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_1D97E:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_1D98C(pc,d0.w),d1
		jmp	off_1D98C(pc,d1.w)
; ===========================================================================
off_1D98C:	dc.w loc_1D9A4-off_1D98C; 0 
		dc.w loc_1DA0C-off_1D98C; 1
		dc.w loc_1DA80-off_1D98C; 2
		dc.l byte_1DB8F		; 0
		dc.w $B
		dc.l byte_1DBA4
		dc.w $160D
		dc.l byte_1DBBD
		dc.w $2C0D
; ===========================================================================

loc_1D9A4:				
		moveq	#0,d2
		lea	(off_1D98C)(pc),a2
		lea	(a0),a1
		moveq	#3,d1

loc_1D9AE:				
		_move.b	0(a0),0(a1)
		move.b	#4,$A(a1)
		move.l	#off_1DCBC,4(a1)
		move.w	#$4DE,2(a1)
		bsr.w	sub_16D8A
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#$10,$E(a1)
		move.b	#2,$F(a1)
		move.w	$3E(a0),$3E(a1)
		move.b	d2,$36(a1)
		addq.w	#1,d2
		move.l	(a2)+,$30(a1)
		move.w	(a2)+,$34(a1)
		lea	$40(a1),a1
		dbf	d1,loc_1D9AE
		move.b	#2,$A(a0)
		move.b	#4,$34(a0)

loc_1DA0C:				
		movea.w	$3E(a0),a1
		btst	#1,$2B(a1)
		beq.w	DeleteObject
		move.w	8(a1),d0
		move.w	d0,8(a0)
		move.w	$C(a1),d1
		move.w	d1,$C(a0)
		lea	$10(a0),a2
		lea	(byte_1DB82)(pc),a3
		moveq	#0,d5

loc_1DA34:				
		move.w	$38(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	loc_1DA44
		clr.w	$38(a0)
		bra.s	loc_1DA34
; ===========================================================================

loc_1DA44:				
		addq.w	#1,$38(a0)
		lea	(byte_1DB42)(pc),a6
		move.b	$34(a0),d6
		jsr	(loc_1DB2C)(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6	; ' '
		jsr	(loc_1DB2C)(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#$12,d0
		btst	#0,$22(a1)
		beq.s	loc_1DA74
		neg.w	d0

loc_1DA74:				
		add.b	d0,$34(a0)
		move.w	#$80,d0	
		bra.w	DisplaySprite3
; ===========================================================================

loc_1DA80:				
		movea.w	$3E(a0),a1
		btst	#1,$2B(a1)
		beq.w	DeleteObject
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_1DAA4
		lea	(v_sonic_pos_tracker_num).w,a5
		lea	(v_sonic_pos_tracker).w,a6
		tst.b	$3F(a0)
		beq.s	loc_1DAAC

loc_1DAA4:				
		lea	(v_tails_pos_tracker_num).w,a5
		lea	(v_tails_pos_tracker).w,a6

loc_1DAAC:				
		move.b	$36(a0),d1
		lsl.b	#2,d1
		move.w	d1,d2
		add.w	d1,d1
		add.w	d2,d1
		move.w	(a5),d0
		sub.b	d1,d0
		lea	(a6,d0.w),a2
		move.w	(a2)+,d0
		move.w	(a2)+,d1
		move.w	d0,8(a0)
		move.w	d1,$C(a0)
		lea	$10(a0),a2
		movea.l	$30(a0),a3

loc_1DAD4:				
		move.w	$38(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	loc_1DAE4
		clr.w	$38(a0)
		bra.s	loc_1DAD4
; ===========================================================================

loc_1DAE4:				
		swap	d5
		add.b	$35(a0),d2
		move.b	(a3,d2.w),d5
		addq.w	#1,$38(a0)
		lea	(byte_1DB42)(pc),a6
		move.b	$34(a0),d6
		jsr	(loc_1DB2C)(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6	; ' '
		swap	d5
		jsr	(loc_1DB2C)(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#2,d0
		btst	#0,$22(a1)
		beq.s	loc_1DB20
		neg.w	d0

loc_1DB20:				
		add.b	d0,$34(a0)
		move.w	#$80,d0	
		bra.w	DisplaySprite3
; ===========================================================================

loc_1DB2C:				
		andi.w	#$3E,d6	; '>'
		move.b	(a6,d6.w),d2
		move.b	1(a6,d6.w),d3
		ext.w	d2
		ext.w	d3
		add.w	d0,d2
		add.w	d1,d3
		rts	
; ===========================================================================
byte_1DB42:	dc.b  $F,  0, $F,  3, $E,  6, $D,  8, $B, $B,  8, $D,  6, $E,  3, $F; 0
					
		dc.b   0,$10,$FC, $F,$F9, $E,$F7, $D,$F4, $B,$F2,  8,$F1,  6,$F0,  3; 16
		dc.b $F0,  0,$F0,$FC,$F1,$F9,$F2,$F7,$F4,$F4,$F7,$F2,$F9,$F1,$FC,$F0; 32
		dc.b $FF,$F0,  3,$F0,  6,$F1,  8,$F2, $B,$F4, $D,$F7, $E,$F9, $F,$FC; 48
byte_1DB82:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF; 0
					
byte_1DB8F:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF,  3,  4,  5,  6,  7; 0
					
		dc.b   8,  7,  6,  5,  4; 16
byte_1DBA4:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF,  2,  3,  4; 0
					
		dc.b   5,  6,  7,  8,  7,  6,  5,  4,  3; 16
byte_1DBBD:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF,  1,  2,  3; 0
					
		dc.b   4,  5,  6,  7,  6,  5,  4,  3,  2; 16
byte_1DBD6:	dc.b   0,  2,  0,  5,  0,  5,  1,  5,  2,  5,  3,  5,  4,$FF; 0
					
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1DBE4:				
		dc.w word_1DBF0-Map_1DBE4; 0
		dc.w word_1DC12-Map_1DBE4; 1
		dc.w word_1DC34-Map_1DBE4; 2
		dc.w word_1DC56-Map_1DBE4; 3
		dc.w word_1DC78-Map_1DBE4; 4
		dc.w word_1DC9A-Map_1DBE4; 5
word_1DBF0:	dc.w 4			
		dc.w $F005,    0,    0,$FFF0; 0
		dc.w $F005, $800, $800,	   0; 4
		dc.w	 5,$1000,$1000,$FFF0; 8
		dc.w	 5,$1800,$1800,	   0; 12
word_1DC12:	dc.w 4			
		dc.w $F005,    4,    2,$FFF0; 0
		dc.w $F005, $804, $802,	   0; 4
		dc.w	 5,$1004,$1002,$FFF0; 8
		dc.w	 5,$1804,$1802,	   0; 12
word_1DC34:	dc.w 4			
		dc.w $F005,    8,    4,$FFF0; 0
		dc.w $F005, $808, $804,	   0; 4
		dc.w	 5,$1008,$1004,$FFF0; 8
		dc.w	 5,$1808,$1804,	   0; 12
word_1DC56:	dc.w 4			
		dc.w $F005,   $C,    6,$FFF0; 0
		dc.w $F005, $80C, $806,	   0; 4
		dc.w	 5,$100C,$1006,$FFF0; 8
		dc.w	 5,$180C,$1806,	   0; 12
word_1DC78:	dc.w 4			
		dc.w $F005,  $10,    8,$FFF0; 0
		dc.w $F005, $810, $808,	   0; 4
		dc.w	 5,$1010,$1008,$FFF0; 8
		dc.w	 5,$1810,$1808,	   0; 12
word_1DC9A:	dc.w 4			
		dc.w $E00B,  $14,   $A,$FFE8; 0
		dc.w $E00B, $814, $80A,	   0; 4
		dc.w	$B,$1014,$100A,$FFE8; 8
		dc.w	$B,$1814,$180A,	   0; 12
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
off_1DCBC:	dc.w word_1DCCE-off_1DCBC; 0 
		dc.w word_1DCD0-off_1DCBC; 1
		dc.w word_1DCDA-off_1DCBC; 2
		dc.w word_1DCE4-off_1DCBC; 3
		dc.w word_1DCEE-off_1DCBC; 4
		dc.w word_1DCF8-off_1DCBC; 5
		dc.w word_1DD02-off_1DCBC; 6
		dc.w word_1DD0C-off_1DCBC; 7
		dc.w word_1DD16-off_1DCBC; 8
word_1DCCE:	dc.w 0			
word_1DCD0:	dc.w 1			
		dc.w $F801,    0,    0,$FFFC; 0
word_1DCDA:	dc.w 1			
		dc.w $F801,    2,    1,$FFFC; 0
word_1DCE4:	dc.w 1			
		dc.w $F801,    4,    2,$FFFC; 0
word_1DCEE:	dc.w 1			
		dc.w $F801,    6,    3,$FFFC; 0
word_1DCF8:	dc.w 1			
		dc.w $F801,    8,    4,$FFFC; 0
word_1DD02:	dc.w 1			
		dc.w $F805,   $A,    5,$FFF8; 0
word_1DD0C:	dc.w 1			
		dc.w $F805,   $E,    7,$FFF8; 0
word_1DD16:	dc.w 1			
		dc.w $F00F,  $12,    9,$FFF0; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Splash_SpindashDust:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1DD2E(pc,d0.w),d1
		jmp	off_1DD2E(pc,d1.w)
; ===========================================================================
off_1DD2E:	dc.w loc_1DD36-off_1DD2E; 0 
		dc.w loc_1DD90-off_1DD2E; 1
		dc.w loc_1DE46-off_1DD2E; 2
		dc.w loc_1DE4A-off_1DD2E; 3
; ===========================================================================

loc_1DD36:				
		addq.b	#2,$24(a0)
		move.l	#Map_1DF5E,4(a0)
		ori.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#$10,$19(a0)
		move.w	#$49C,2(a0)
		move.w	#-$5000,$3E(a0)
		move.w	#-$6C80,$3C(a0)
		cmpa.w	#-$2F00,a0
		beq.s	loc_1DD8C
		move.b	#1,$34(a0)
		cmpi.w	#2,(v_player_mode).w
		beq.s	loc_1DD8C
		move.w	#$48C,2(a0)
		move.w	#-$4FC0,$3E(a0)
		move.w	#-$6E80,$3C(a0)

loc_1DD8C:				
		bsr.w	Adjust2PArtPointer

loc_1DD90:				
		movea.w	$3E(a0),a2
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w	d0,d0
		move.w	off_1DDA4(pc,d0.w),d1
		jmp	off_1DDA4(pc,d1.w)
; ===========================================================================
off_1DDA4:	dc.w loc_1DE28-off_1DDA4; 0 
		dc.w loc_1DDAC-off_1DDA4; 1
		dc.w loc_1DDCC-off_1DDA4; 2
		dc.w loc_1DE20-off_1DDA4; 3
; ===========================================================================

loc_1DDAC:				
		move.w	(v_water_height_actual).w,$C(a0)
		tst.b	$1D(a0)
		bne.s	loc_1DE28
		move.w	8(a2),8(a0)
		move.b	#0,$22(a0)
		andi.w	#$7FFF,2(a0)
		bra.s	loc_1DE28
; ===========================================================================

loc_1DDCC:				
		cmpi.b	#$C,$28(a2)
		bcs.s	loc_1DE3E
		cmpi.b	#4,$24(a2)
		bcc.s	loc_1DE3E
		tst.b	$39(a2)
		beq.s	loc_1DE3E
		move.w	8(a2),8(a0)
		move.w	$C(a2),$C(a0)
		move.b	$22(a2),$22(a0)
		andi.b	#1,$22(a0)
		tst.b	$34(a0)
		beq.s	loc_1DE06
		subi.w	#4,$C(a0)

loc_1DE06:				
		tst.b	$1D(a0)
		bne.s	loc_1DE28
		andi.w	#$7FFF,2(a0)
		tst.w	2(a2)
		bpl.s	loc_1DE28
		ori.w	#-$8000,2(a0)
		bra.s	loc_1DE28
; ===========================================================================

loc_1DE20:				
		cmpi.b	#$C,$28(a2)
		bcs.s	loc_1DE3E

loc_1DE28:				
		lea	(off_1DF38).l,a1
		jsr	AnimateSprite
		bsr.w	loc_1DEE4
		jmp	DisplaySprite
; ===========================================================================

loc_1DE3E:				
		move.b	#0,$1C(a0)
		rts	
; ===========================================================================

loc_1DE46:				
		bra.w	DeleteObject
; ===========================================================================

loc_1DE4A:				
		movea.w	$3E(a0),a2
		cmpi.b	#$D,$1C(a2)
		beq.s	loc_1DE64
		move.b	#2,$24(a0)
		move.b	#0,$32(a0)
		rts	
; ===========================================================================

loc_1DE64:				
		subq.b	#1,$32(a0)
		bpl.s	loc_1DEE0
		move.b	#3,$32(a0)
		bsr.w	SingleObjLoad
		bne.s	loc_1DEE0
		_move.b	0(a0),0(a1)
		move.w	8(a2),8(a1)
		move.w	$C(a2),$C(a1)
		addi.w	#$10,$C(a1)
		tst.b	$34(a0)
		beq.s	loc_1DE9A
		subi.w	#4,$C(a1)

loc_1DE9A:				
		move.b	#0,$22(a1)
		move.b	#3,$1C(a1)
		addq.b	#2,$24(a1)
		move.l	4(a0),4(a1)
		move.b	1(a0),1(a1)
		move.b	#1,$18(a1)
		move.b	#4,$19(a1)
		move.w	2(a0),2(a1)
		move.w	$3E(a0),$3E(a1)
		andi.w	#$7FFF,2(a1)
		tst.w	2(a2)
		bpl.s	loc_1DEE0
		ori.w	#-$8000,2(a1)

loc_1DEE0:				
		bsr.s	loc_1DEE4
		rts	
; ===========================================================================

loc_1DEE4:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	$30(a0),d0
		beq.s	locret_1DF36
		move.b	d0,$30(a0)
		lea	(off_1E074).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_1DF36

loc_1DF06:
		move.w	$3C(a0),d4

loc_1DF0A:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_SplashAndDust,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,loc_1DF0A

locret_1DF36:				
		rts	
; ===========================================================================
off_1DF38:	dc.w byte_1DF40-off_1DF38; 0 
		dc.w byte_1DF43-off_1DF38; 1
		dc.w byte_1DF4F-off_1DF38; 2
		dc.w byte_1DF58-off_1DF38; 3
byte_1DF40:	dc.b $1F,  0,$FF	; 0 
byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	
byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 
byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1DF5E:				
		dc.w word_1DF8A-Map_1DF5E; 0
		dc.w word_1DF8C-Map_1DF5E; 1
		dc.w word_1DF96-Map_1DF5E; 2
		dc.w word_1DFA0-Map_1DF5E; 3
		dc.w word_1DFAA-Map_1DF5E; 4
		dc.w word_1DFB4-Map_1DF5E; 5
		dc.w word_1DFBE-Map_1DF5E; 6
		dc.w word_1DFC8-Map_1DF5E; 7
		dc.w word_1DFD2-Map_1DF5E; 8
		dc.w word_1DFDC-Map_1DF5E; 9
		dc.w word_1DFE6-Map_1DF5E; 10
		dc.w word_1DFF0-Map_1DF5E; 11
		dc.w word_1DFFA-Map_1DF5E; 12
		dc.w word_1E004-Map_1DF5E; 13
		dc.w word_1E016-Map_1DF5E; 14
		dc.w word_1E028-Map_1DF5E; 15
		dc.w word_1E03A-Map_1DF5E; 16
		dc.w word_1E04C-Map_1DF5E; 17
		dc.w word_1E056-Map_1DF5E; 18
		dc.w word_1E060-Map_1DF5E; 19
		dc.w word_1E06A-Map_1DF5E; 20
		dc.w word_1DF8A-Map_1DF5E; 21
word_1DF8A:	dc.w 0			
word_1DF8C:	dc.w 1			
		dc.w $F20D,    0,    0,$FFF0; 0
word_1DF96:	dc.w 1			
		dc.w $E20F,    0,    0,$FFF0; 0
word_1DFA0:	dc.w 1			
		dc.w $E20F,    0,    0,$FFF0; 0
word_1DFAA:	dc.w 1			
		dc.w $E20F,    0,    0,$FFF0; 0
word_1DFB4:	dc.w 1			
		dc.w $E20F,    0,    0,$FFF0; 0
word_1DFBE:	dc.w 1			
		dc.w $E20F,    0,    0,$FFF0; 0
word_1DFC8:	dc.w 1			
		dc.w $F20D,    0,    0,$FFF0; 0
word_1DFD2:	dc.w 1			
		dc.w $F20D,    0,    0,$FFF0; 0
word_1DFDC:	dc.w 1			
		dc.w $F20D,    0,    0,$FFF0; 0
word_1DFE6:	dc.w 1			
		dc.w  $40D,    0,    0,$FFE0; 0
word_1DFF0:	dc.w 1			
		dc.w  $40D,    0,    0,$FFE0; 0
word_1DFFA:	dc.w 1			
		dc.w  $40D,    0,    0,$FFE0; 0
word_1E004:	dc.w 2			
word_1E006:	dc.w $F401,    0,    0,$FFE8; 0
		dc.w  $40D,    2,    1,$FFE0; 4
word_1E016:	dc.w 2			
		dc.w $F405,    0,    0,$FFE8; 0
		dc.w  $40D,    4,    2,$FFE0; 4
word_1E028:	dc.w 2			
		dc.w $F409,    0,    0,$FFE0; 0
		dc.w  $40D,    6,    3,$FFE0; 4
word_1E03A:	dc.w 2			
		dc.w $F409,    0,    0,$FFE0; 0
		dc.w  $40D,    6,    3,$FFE0; 4
word_1E04C:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_1E056:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8; 0
word_1E060:	dc.w 1			
		dc.w $F805,    8,    4,$FFF8; 0
word_1E06A:	dc.w 1			
		dc.w $F805,   $C,    6,$FFF8; 0
off_1E074:	dc.w word_1E0A0-off_1E074; 0 
		dc.w word_1E0A2-off_1E074; 1
		dc.w word_1E0A6-off_1E074; 2
		dc.w word_1E0AA-off_1E074; 3
		dc.w word_1E0AE-off_1E074; 4
		dc.w word_1E0B2-off_1E074; 5
		dc.w word_1E0B6-off_1E074; 6
		dc.w word_1E0BA-off_1E074; 7
		dc.w word_1E0BE-off_1E074; 8
		dc.w word_1E0C2-off_1E074; 9
		dc.w word_1E0C6-off_1E074; 10
		dc.w word_1E0CA-off_1E074; 11
		dc.w word_1E0CE-off_1E074; 12
		dc.w word_1E0D2-off_1E074; 13
		dc.w word_1E0D8-off_1E074; 14
		dc.w word_1E0DE-off_1E074; 15
		dc.w word_1E0E4-off_1E074; 16
		dc.w word_1E0EA-off_1E074; 17
		dc.w word_1E0EA-off_1E074; 18
		dc.w word_1E0EA-off_1E074; 19
		dc.w word_1E0EA-off_1E074; 20
		dc.w word_1E0EC-off_1E074; 21
word_1E0A0:	dc.w 0			
word_1E0A2:	dc.w 1			
		dc.w $7000		; 0
word_1E0A6:	dc.w 1			
		dc.w $F008		; 0
word_1E0AA:	dc.w 1			
		dc.w $F018		; 0
word_1E0AE:	dc.w 1			
		dc.w $F028		; 0
word_1E0B2:	dc.w 1			
		dc.w $F038		; 0
word_1E0B6:	dc.w 1			
		dc.w $F048		; 0
word_1E0BA:	dc.w 1			
		dc.w $7058		; 0
word_1E0BE:	dc.w 1			
		dc.w $7060		; 0
word_1E0C2:	dc.w 1			
		dc.w $7068		; 0
word_1E0C6:	dc.w 1			
		dc.w $7070		; 0
word_1E0CA:	dc.w 1			
		dc.w $7078		; 0
word_1E0CE:	dc.w 1			
		dc.w $7080		; 0
word_1E0D2:	dc.w 2			
		dc.w $1088		; 0
		dc.w $708A		; 1
word_1E0D8:	dc.w 2			
		dc.w $3092		; 0
		dc.w $7096		; 1
word_1E0DE:	dc.w 2			
		dc.w $509E		; 0
		dc.w $70A4		; 1
word_1E0E4:	dc.w 2			
		dc.w $50AC		; 0
		dc.w $70B2		; 1
word_1E0EA:	dc.w 0			
word_1E0EC:	dc.w	 1		; 0 
		dc.w $F0BA		; 1
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_1E0F0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1E0FE(pc,d0.w),d1
		jmp	off_1E0FE(pc,d1.w)
; ===========================================================================
off_1E0FE:	dc.w loc_1E102-off_1E0FE; 0 
		dc.w loc_1E138-off_1E0FE; 1
; ===========================================================================

loc_1E102:				
		addq.b	#2,$24(a0)
		move.l	#Map_1E1BE,4(a0)
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#$18,$19(a0)
		move.w	#$5F2,2(a0)
		bsr.w	Adjust2PArtPointer
		btst	#7,(v_ost_maincharacter+ost_tile).w
		beq.s	loc_1E138
		bset	#7,2(a0)

loc_1E138:				
					
		tst.b	(f_super).w
		beq.s	loc_1E1B8
		tst.b	$30(a0)
		beq.s	loc_1E188
		subq.b	#1,$1E(a0)
		bpl.s	loc_1E170
		move.b	#1,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#6,$1A(a0)
		bcs.s	loc_1E170
		move.b	#0,$1A(a0)
		move.b	#0,$30(a0)
		move.b	#1,$31(a0)
		rts	
; ===========================================================================

loc_1E170:				
		tst.b	$31(a0)
		bne.s	loc_1E182

loc_1E176:				
		move.w	($FFFFB008).w,8(a0)
		move.w	($FFFFB00C).w,$C(a0)

loc_1E182:				
		jmp	DisplaySprite
; ===========================================================================

loc_1E188:				
		tst.b	($FFFFB02A).w
		bne.s	loc_1E1AA
		move.w	($FFFFB014).w,d0
		bpl.s	loc_1E196
		neg.w	d0

loc_1E196:				
		cmpi.w	#$800,d0
		bcs.s	loc_1E1AA
		move.b	#0,$1A(a0)
		move.b	#1,$30(a0)
		bra.s	loc_1E176
; ===========================================================================

loc_1E1AA:				
		move.b	#0,$30(a0)
		move.b	#0,$31(a0)
		rts	
; ===========================================================================

loc_1E1B8:				
		jmp	DeleteObject
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1E1BE:				
		dc.w word_1E1CA-Map_1E1BE; 0
		dc.w word_1E1EC-Map_1E1BE; 1
		dc.w word_1E20E-Map_1E1BE; 2
		dc.w word_1E1EC-Map_1E1BE; 3
		dc.w word_1E1CA-Map_1E1BE; 4
		dc.w word_1E230-Map_1E1BE; 5
word_1E1CA:	dc.w 4			
		dc.w $F800,    0,    0,$FFF8; 0
		dc.w $F800, $800, $800,	   0; 4
		dc.w	 0,$1000,$1000,$FFF8; 8
		dc.w	 0,$1800,$1800,	   0; 12
word_1E1EC:	dc.w 4			
		dc.w $F005,    1,    0,$FFF0; 0
		dc.w $F005, $801, $800,	   0; 4
		dc.w	 5,$1001,$1000,$FFF0; 8
		dc.w	 5,$1801,$1800,	   0; 12
word_1E20E:	dc.w 4			
		dc.w $E80A,    5,    2,$FFE8; 0
		dc.w $E80A, $805, $802,	   0; 4
		dc.w	$A,$1005,$1002,$FFE8; 8
		dc.w	$A,$1805,$1802,	   0; 12
word_1E230:	dc.w 0			
; ===========================================================================
		nop	

loc_1E234:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1E24C
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1E24C:				
		move.b	$3E(a0),d5
		btst	#3,$22(a0)
		beq.s	loc_1E264
		moveq	#0,d0
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		rts	
; ===========================================================================

loc_1E264:				
		moveq	#3,d0
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		move.b	$26(a0),d0
		addi.b	#$20,d0	; ' '
		bpl.s	loc_1E286
		move.b	$26(a0),d0
		bpl.s	loc_1E280
		subq.b	#1,d0

loc_1E280:				
		addi.b	#$20,d0	; ' '
		bra.s	loc_1E292
; ===========================================================================

loc_1E286:				
		move.b	$26(a0),d0
		bpl.s	loc_1E28E
		addq.b	#1,d0

loc_1E28E:				
		addi.b	#$1F,d0

loc_1E292:				
		andi.b	#-$40,d0
		cmpi.b	#$40,d0	; '@'
		beq.w	loc_1E4E8
		cmpi.b	#-$80,d0
		beq.w	loc_1E43A
		cmpi.b	#-$40,d0
		beq.w	loc_1E392
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E7D0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		neg.w	d0
		add.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E7D0
		move.w	(sp)+,d0
		bsr.w	loc_1E356
		tst.w	d1
		beq.s	locret_1E31C
		bpl.s	loc_1E31E
		cmpi.w	#-$E,d1
		blt.s	locret_1E31C
		add.w	d1,$C(a0)

locret_1E31C:				
		rts	
; ===========================================================================

loc_1E31E:				
		move.b	$10(a0),d0
		bpl.s	loc_1E326
		neg.b	d0

loc_1E326:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E332
		move.b	#$E,d0

loc_1E332:				
		cmp.b	d0,d1
		bgt.s	loc_1E33C

loc_1E336:				
		add.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_1E33C:				
		tst.b	$38(a0)
		bne.s	loc_1E336
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================

loc_1E356:				
		move.b	(v_angle_left).w,d2
		cmp.w	d0,d1
		ble.s	loc_1E364
		move.b	(v_angle_right).w,d2
		move.w	d0,d1

loc_1E364:				
		btst	#0,d2
		bne.s	loc_1E380
		move.b	d2,d0
		sub.b	$26(a0),d0
		bpl.s	loc_1E374
		neg.b	d0

loc_1E374:				
		cmpi.b	#$20,d0	; ' '
		bcc.s	loc_1E380
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_1E380:				
		move.b	$26(a0),d2
		addi.b	#$20,d2	; ' '
		andi.b	#-$40,d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_1E392:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		neg.w	d0
		add.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E9B0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E9B0
		move.w	(sp)+,d0
		bsr.w	loc_1E356
		tst.w	d1
		beq.s	locret_1E400
		bpl.s	loc_1E402
		cmpi.w	#-$E,d1
		blt.s	locret_1E400
		add.w	d1,8(a0)

locret_1E400:				
		rts	
; ===========================================================================

loc_1E402:				
		move.b	$12(a0),d0
		bpl.s	loc_1E40A
		neg.b	d0

loc_1E40A:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E416
		move.b	#$E,d0

loc_1E416:				
		cmp.b	d0,d1
		bgt.s	loc_1E420

loc_1E41A:				
		add.w	d1,8(a0)
		rts	
; ===========================================================================

loc_1E420:				
		tst.b	$38(a0)
		bne.s	loc_1E41A
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================

loc_1E43A:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	loc_1E7D0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	loc_1E7D0
		move.w	(sp)+,d0
		bsr.w	loc_1E356
		tst.w	d1
		beq.s	locret_1E4AE
		bpl.s	loc_1E4B0
		cmpi.w	#-$E,d1
		blt.s	locret_1E4AE
		sub.w	d1,$C(a0)

locret_1E4AE:				
		rts	
; ===========================================================================

loc_1E4B0:				
		move.b	$10(a0),d0
		bpl.s	loc_1E4B8
		neg.b	d0

loc_1E4B8:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E4C4
		move.b	#$E,d0

loc_1E4C4:				
		cmp.b	d0,d1
		bgt.s	loc_1E4CE

loc_1E4C8:				
		sub.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_1E4CE:				
		tst.b	$38(a0)
		bne.s	loc_1E4C8
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================

loc_1E4E8:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	loc_1E9B0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	loc_1E9B0
		move.w	(sp)+,d0
		bsr.w	loc_1E356
		tst.w	d1
		beq.s	locret_1E55C
		bpl.s	loc_1E55E
		cmpi.w	#-$E,d1
		blt.s	locret_1E55C
		sub.w	d1,8(a0)

locret_1E55C:				
		rts	
; ===========================================================================

loc_1E55E:				
		move.b	$12(a0),d0
		bpl.s	loc_1E566
		neg.b	d0

loc_1E566:				
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	loc_1E572
		move.b	#$E,d0

loc_1E572:				
		cmp.b	d0,d1
		bgt.s	loc_1E57C

loc_1E576:				
		sub.w	d1,8(a0)
		rts	
; ===========================================================================

loc_1E57C:				
		tst.b	$38(a0)
		bne.s	loc_1E576
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)
		rts	
; ===========================================================================

loc_1E596:				
		move.w	d2,d0
		add.w	d0,d0
		andi.w	#$F00,d0
		move.w	d3,d1
		lsr.w	#3,d1
		move.w	d1,d4
		lsr.w	#4,d1
		andi.w	#$7F,d1	; ''
		add.w	d1,d0
		moveq	#-1,d1
		clr.w	d1
		lea	(v_level_layout).w,a1
		move.b	(a1,d0.w),d1
		add.w	d1,d1
		move.w	word_1E5D0(pc,d1.w),d1
		move.w	d2,d0
		andi.w	#$70,d0	; 'p'
		add.w	d0,d1
		andi.w	#$E,d4
		add.w	d4,d1
		movea.l	d1,a1
		rts	
; ===========================================================================
word_1E5D0:	dc.w	 0,  $80	; 0
		dc.w  $100, $180	; 2
		dc.w  $200, $280	; 4
		dc.w  $300, $380	; 6
		dc.w  $400, $480	; 8
		dc.w  $500, $580	; 10
		dc.w  $600, $680	; 12
		dc.w  $700, $780	; 14
		dc.w  $800, $880	; 16
		dc.w  $900, $980	; 18
		dc.w  $A00, $A80	; 20
		dc.w  $B00, $B80	; 22
		dc.w  $C00, $C80	; 24
		dc.w  $D00, $D80	; 26
		dc.w  $E00, $E80	; 28
		dc.w  $F00, $F80	; 30
		dc.w $1000,$1080	; 32
		dc.w $1100,$1180	; 34
		dc.w $1200,$1280	; 36
		dc.w $1300,$1380	; 38
		dc.w $1400,$1480	; 40
		dc.w $1500,$1580	; 42
		dc.w $1600,$1680	; 44
		dc.w $1700,$1780	; 46
		dc.w $1800,$1880	; 48
		dc.w $1900,$1980	; 50
		dc.w $1A00,$1A80	; 52
		dc.w $1B00,$1B80	; 54
		dc.w $1C00,$1C80	; 56
		dc.w $1D00,$1D80	; 58
		dc.w $1E00,$1E80	; 60
		dc.w $1F00,$1F80	; 62
		dc.w $2000,$2080	; 64
		dc.w $2100,$2180	; 66
		dc.w $2200,$2280	; 68
		dc.w $2300,$2380	; 70
		dc.w $2400,$2480	; 72
		dc.w $2500,$2580	; 74
		dc.w $2600,$2680	; 76
		dc.w $2700,$2780	; 78
		dc.w $2800,$2880	; 80
		dc.w $2900,$2980	; 82
		dc.w $2A00,$2A80	; 84
		dc.w $2B00,$2B80	; 86
		dc.w $2C00,$2C80	; 88
		dc.w $2D00,$2D80	; 90
		dc.w $2E00,$2E80	; 92
		dc.w $2F00,$2F80	; 94
		dc.w $3000,$3080	; 96
		dc.w $3100,$3180	; 98
		dc.w $3200,$3280	; 100
		dc.w $3300,$3380	; 102
		dc.w $3400,$3480	; 104
		dc.w $3500,$3580	; 106
		dc.w $3600,$3680	; 108
		dc.w $3700,$3780	; 110
		dc.w $3800,$3880	; 112
		dc.w $3900,$3980	; 114
		dc.w $3A00,$3A80	; 116
		dc.w $3B00,$3B80	; 118
		dc.w $3C00,$3C80	; 120
		dc.w $3D00,$3D80	; 122
		dc.w $3E00,$3E80	; 124
		dc.w $3F00,$3F80	; 126
		dc.w $4000,$4080	; 128
		dc.w $4100,$4180	; 130
		dc.w $4200,$4280	; 132
		dc.w $4300,$4380	; 134
		dc.w $4400,$4480	; 136
		dc.w $4500,$4580	; 138
		dc.w $4600,$4680	; 140
		dc.w $4700,$4780	; 142
		dc.w $4800,$4880	; 144
		dc.w $4900,$4980	; 146
		dc.w $4A00,$4A80	; 148
		dc.w $4B00,$4B80	; 150
		dc.w $4C00,$4C80	; 152
		dc.w $4D00,$4D80	; 154
		dc.w $4E00,$4E80	; 156
		dc.w $4F00,$4F80	; 158
		dc.w $5000,$5080	; 160
		dc.w $5100,$5180	; 162
		dc.w $5200,$5280	; 164
		dc.w $5300,$5380	; 166
		dc.w $5400,$5480	; 168
		dc.w $5500,$5580	; 170
		dc.w $5600,$5680	; 172
		dc.w $5700,$5780	; 174
		dc.w $5800,$5880	; 176
		dc.w $5900,$5980	; 178
		dc.w $5A00,$5A80	; 180
		dc.w $5B00,$5B80	; 182
		dc.w $5C00,$5C80	; 184
		dc.w $5D00,$5D80	; 186
		dc.w $5E00,$5E80	; 188
		dc.w $5F00,$5F80	; 190
		dc.w $6000,$6080	; 192
		dc.w $6100,$6180	; 194
		dc.w $6200,$6280	; 196
		dc.w $6300,$6380	; 198
		dc.w $6400,$6480	; 200
		dc.w $6500,$6580	; 202
		dc.w $6600,$6680	; 204
		dc.w $6700,$6780	; 206
		dc.w $6800,$6880	; 208
		dc.w $6900,$6980	; 210
		dc.w $6A00,$6A80	; 212
		dc.w $6B00,$6B80	; 214
		dc.w $6C00,$6C80	; 216
		dc.w $6D00,$6D80	; 218
		dc.w $6E00,$6E80	; 220
		dc.w $6F00,$6F80	; 222
		dc.w $7000,$7080	; 224
		dc.w $7100,$7180	; 226
		dc.w $7200,$7280	; 228
		dc.w $7300,$7380	; 230
		dc.w $7400,$7480	; 232
		dc.w $7500,$7580	; 234
		dc.w $7600,$7680	; 236
		dc.w $7700,$7780	; 238
		dc.w $7800,$7880	; 240
		dc.w $7900,$7980	; 242
		dc.w $7A00,$7A80	; 244
		dc.w $7B00,$7B80	; 246
		dc.w $7C00,$7C80	; 248
		dc.w $7D00,$7D80	; 250
		dc.w $7E00,$7E80	; 252
		dc.w $7F00,$7F80	; 254
; ===========================================================================

loc_1E7D0:				
		bsr.w	loc_1E596
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E7E2
		btst	d5,d4
		bne.s	loc_1E7F0

loc_1E7E2:				
		add.w	a3,d2
		bsr.w	loc_1E878
		sub.w	a3,d2
		addi.w	#$10,d1
		rts	
; ===========================================================================

loc_1E7F0:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E7E2
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d3,d1

loc_1E80C:
		btst	#$A,d4
		beq.s	loc_1E816
		not.w	d1
		neg.b	(a4)

loc_1E816:				
		btst	#$B,d4
		beq.s	loc_1E826
		addi.b	#$40,(a4) ; '@'
		neg.b	(a4)
		subi.b	#$40,(a4) ; '@'

loc_1E826:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray1).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$B,d4
		beq.s	loc_1E842
		neg.w	d0

loc_1E842:				
		tst.w	d0
		beq.s	loc_1E7E2
		bmi.s	loc_1E85E
		cmpi.b	#$10,d0
		beq.s	loc_1E86A
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E85E:				
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E7E2

loc_1E86A:				
		sub.w	a3,d2
		bsr.w	loc_1E878
		add.w	a3,d2
		subi.w	#$10,d1
		rts	
; ===========================================================================

loc_1E878:				
		bsr.w	loc_1E596
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E88A
		btst	d5,d4
		bne.s	loc_1E898

loc_1E88A:				
		move.w	#$F,d1
		move.w	d2,d0
		andi.w	#$F,d0
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E898:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E88A
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d3,d1
		btst	#$A,d4
		beq.s	loc_1E8BE
		not.w	d1
		neg.b	(a4)

loc_1E8BE:				
		btst	#$B,d4
		beq.s	loc_1E8CE
		addi.b	#$40,(a4) ; '@'
		neg.b	(a4)
		subi.b	#$40,(a4) ; '@'

loc_1E8CE:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray1).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$B,d4
		beq.s	loc_1E8EA
		neg.w	d0

loc_1E8EA:				
		tst.w	d0
		beq.s	loc_1E88A
		bmi.s	loc_1E900
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E900:				
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E88A
		not.w	d1
		rts	
; ===========================================================================

loc_1E910:				
		bsr.w	loc_1E596
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E922
		btst	d5,d4
		bne.s	loc_1E928

loc_1E922:				
		move.w	#$10,d1
		rts	
; ===========================================================================

loc_1E928:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E922
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d3,d1
		btst	#$A,d4
		beq.s	loc_1E94E
		not.w	d1
		neg.b	(a4)

loc_1E94E:				
		btst	#$B,d4
		beq.s	loc_1E95E
		addi.b	#$40,(a4) ; '@'
		neg.b	(a4)
		subi.b	#$40,(a4) ; '@'

loc_1E95E:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray1).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$B,d4
		beq.s	loc_1E97A
		neg.w	d0

loc_1E97A:				
		tst.w	d0
		beq.s	loc_1E922
		bmi.s	loc_1E996
		cmpi.b	#$10,d0
		beq.s	loc_1E9A2
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1E996:				
		move.w	d2,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E922

loc_1E9A2:				
		sub.w	a3,d2
		bsr.w	loc_1E878
		add.w	a3,d2
		subi.w	#$10,d1
		rts	
; ===========================================================================

loc_1E9B0:				
		bsr.w	loc_1E596
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1E9C2
		btst	d5,d4
		bne.s	loc_1E9D0

loc_1E9C2:				
		add.w	a3,d3
		bsr.w	loc_1EA58
		sub.w	a3,d3
		addi.w	#$10,d1
		rts	
; ===========================================================================

loc_1E9D0:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1E9C2
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d2,d1
		btst	#$B,d4
		beq.s	loc_1E9FE
		not.w	d1
		addi.b	#$40,(a4) ; '@'
		neg.b	(a4)
		subi.b	#$40,(a4) ; '@'

loc_1E9FE:				
		btst	#$A,d4
		beq.s	loc_1EA06
		neg.b	(a4)

loc_1EA06:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray2).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$A,d4
		beq.s	loc_1EA22
		neg.w	d0

loc_1EA22:				
		tst.w	d0
		beq.s	loc_1E9C2
		bmi.s	loc_1EA3E
		cmpi.b	#$10,d0
		beq.s	loc_1EA4A
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1EA3E:				
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1E9C2

loc_1EA4A:				
		sub.w	a3,d3
		bsr.w	loc_1EA58
		add.w	a3,d3
		subi.w	#$10,d1
		rts	
; ===========================================================================

loc_1EA58:				
		bsr.w	loc_1E596
		move.w	(a1),d0
		move.w	d0,d4
		andi.w	#$3FF,d0
		beq.s	loc_1EA6A
		btst	d5,d4
		bne.s	loc_1EA78

loc_1EA6A:				
		move.w	#$F,d1
		move.w	d3,d0
		andi.w	#$F,d0
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1EA78:				
		movea.l	(v_collision_index_ptr).w,a2
		move.b	(a2,d0.w),d0
		andi.w	#$FF,d0
		beq.s	loc_1EA6A
		lea	(ColCurveMap).l,a2
		move.b	(a2,d0.w),(a4)
		lsl.w	#4,d0
		move.w	d2,d1
		btst	#$B,d4
		beq.s	loc_1EAA6
		not.w	d1
		addi.b	#$40,(a4) ; '@'
		neg.b	(a4)
		subi.b	#$40,(a4) ; '@'

loc_1EAA6:				
		btst	#$A,d4
		beq.s	loc_1EAAE
		neg.b	(a4)

loc_1EAAE:				
		andi.w	#$F,d1
		add.w	d0,d1
		lea	(CollArray2).l,a2
		move.b	(a2,d1.w),d0
		ext.w	d0
		eor.w	d6,d4
		btst	#$A,d4
		beq.s	loc_1EACA
		neg.w	d0

loc_1EACA:				
		tst.w	d0
		beq.s	loc_1EA6A
		bmi.s	loc_1EAE0
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		move.w	#$F,d1
		sub.w	d0,d1
		rts	
; ===========================================================================

loc_1EAE0:				
		move.w	d3,d1
		andi.w	#$F,d1
		add.w	d1,d0
		bpl.w	loc_1EA6A
		not.w	d1
		rts	
; ===========================================================================

locret_1EAF0:				
		rts	
; ===========================================================================
		lea	(CollArray1).l,a1
		lea	(CollArray1).l,a2
		move.w	#$FF,d3

loc_1EB02:				
		moveq	#$10,d5
		move.w	#$F,d2

loc_1EB08:				
		moveq	#0,d4
		move.w	#$F,d1

loc_1EB0E:				
		move.w	(a1)+,d0
		lsr.l	d5,d0
		addx.w	d4,d4
		dbf	d1,loc_1EB0E
		move.w	d4,(a2)+
		suba.w	#$20,a1	; ' '
		subq.w	#1,d5
		dbf	d2,loc_1EB08
		adda.w	#$20,a1	; ' '
		dbf	d3,loc_1EB02
		lea	(CollArray1).l,a1
		lea	(CollArray2).l,a2
		bsr.s	loc_1EB46
		lea	(CollArray1).l,a1
		lea	(CollArray1).l,a2

loc_1EB46:				
		move.w	#$FFF,d3

loc_1EB4A:				
		moveq	#0,d2
		move.w	#$F,d1
		move.w	(a1)+,d0
		beq.s	loc_1EB78
		bmi.s	loc_1EB62

loc_1EB56:				
		lsr.w	#1,d0
		bcc.s	loc_1EB5C
		addq.b	#1,d2

loc_1EB5C:				
		dbf	d1,loc_1EB56
		bra.s	loc_1EB7A
; ===========================================================================

loc_1EB62:				
		cmpi.w	#-1,d0
		beq.s	loc_1EB74

loc_1EB68:				
		lsl.w	#1,d0
		bcc.s	loc_1EB6E
		subq.b	#1,d2

loc_1EB6E:				
		dbf	d1,loc_1EB68
		bra.s	loc_1EB7A
; ===========================================================================

loc_1EB74:				
		move.w	#$10,d0

loc_1EB78:				
		move.w	d0,d2

loc_1EB7A:				
		move.b	d2,(a2)+
		dbf	d3,loc_1EB4A
		rts	
; ===========================================================================
		nop	

loc_1EB84:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1EB9C
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EB9C:				
		move.b	$3F(a0),d5
		move.l	8(a0),d3
		move.l	$C(a0),d2
		move.w	$10(a0),d1
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d3
		move.w	$12(a0),d1
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d2
		swap	d2
		swap	d3
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		move.b	d0,d1
		addi.b	#$20,d0	; ' '
		bpl.s	loc_1EBDC
		move.b	d1,d0
		bpl.s	loc_1EBD6
		subq.b	#1,d0

loc_1EBD6:				
		addi.b	#$20,d0	; ' '
		bra.s	loc_1EBE6
; ===========================================================================

loc_1EBDC:				
		move.b	d1,d0
		bpl.s	loc_1EBE2
		addq.b	#1,d0

loc_1EBE2:				
		addi.b	#$1F,d0

loc_1EBE6:				
		andi.b	#-$40,d0
		beq.w	loc_1ECE6
		cmpi.b	#-$80,d0
		beq.w	loc_1EF9E
		andi.b	#$38,d1	; '8'
		bne.s	loc_1EBFE
		addq.w	#8,d2

loc_1EBFE:				
		cmpi.b	#$40,d0	; '@'
		beq.w	loc_1F066

loc_1EC06:
		bra.w	loc_1EEE4
; ===========================================================================

loc_1EC0A:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1EC22
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EC22:				
		move.b	$3F(a0),d5
		move.b	d0,(v_angle_right).w
		move.b	d0,(v_angle_left).w
		addi.b	#$20,d0	; ' '
		andi.b	#-$40,d0
		cmpi.b	#$40,d0	; '@'
		beq.w	loc_1EFF6
		cmpi.b	#-$80,d0
		beq.w	loc_1EF2E
		cmpi.b	#-$40,d0
		beq.w	loc_1EE7C

loc_1EC4E:				
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1EC66
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EC66:				
		move.b	$3E(a0),d5
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E7D0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E7D0
		move.w	(sp)+,d0
		move.b	#0,d2

loc_1ECC6:				
		move.b	(v_angle_left).w,d3
		cmp.w	d0,d1
		ble.s	loc_1ECD4
		move.b	(v_angle_right).w,d3
		exg	d0,d1

loc_1ECD4:				
		btst	#0,d3
		beq.s	locret_1ECDC
		move.b	d2,d3

locret_1ECDC:				
		rts	
; ===========================================================================
		move.w	$C(a0),d2
		move.w	8(a0),d3

loc_1ECE6:				
		addi.w	#$A,d2
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E7D0
		move.b	#0,d2

loc_1ECFE:				
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1ED0A
		move.b	d2,d3

locret_1ED0A:				
		rts	
; ===========================================================================
		move.w	8(a0),d3
		move.w	$C(a0),d2
		subq.w	#4,d2
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$D,$3F(a0)
		beq.s	loc_1ED2E
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1ED2E:				
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$3F(a0),d5
		bsr.w	loc_1E7D0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1ED54
		move.b	#0,d3

locret_1ED54:				
		rts	
; ===========================================================================

loc_1ED56:				
		move.w	8(a0),d3

loc_1ED5A:				
		move.w	$C(a0),d2
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_1ED80
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1ED80:				
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$3E(a0),d5
		bsr.w	loc_1E7D0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EDA6
		move.b	#0,d3

locret_1EDA6:				
		rts	
; ===========================================================================

loc_1EDA8:				
		move.w	8(a1),d3
		move.w	$C(a1),d2
		moveq	#0,d0
		move.b	$16(a1),d0
		ext.w	d0
		add.w	d0,d2
		move.l	#-$2A00,(v_collision_index_ptr).w
		cmpi.b	#$C,$3E(a1)
		beq.s	loc_1EDD2
		move.l	#-$2700,(v_collision_index_ptr).w

loc_1EDD2:				
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		move.b	$3E(a1),d5
		bsr.w	loc_1E7D0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EDF8
		move.b	#0,d3

locret_1EDF8:				
		rts	
; ===========================================================================

loc_1EDFA:				
					
		move.w	8(a0),d3
		move.w	$C(a0),d2
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		lea	(v_angle_right).w,a4

loc_1EE0E:
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bsr.w	loc_1E7D0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EE2E
		move.b	#0,d3

locret_1EE2E:				
		rts	
; ===========================================================================

loc_1EE30:				
		move.w	8(a1),d3
		move.w	$C(a1),d2
		move.b	$16(a1),d0
		ext.w	d0
		add.w	d0,d2
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bra.w	loc_1E7D0
; ===========================================================================

loc_1EE56:				
		move.w	8(a0),d3
		move.w	$C(a0),d2
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d2
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bra.w	loc_1E910
; ===========================================================================

loc_1EE7C:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E9B0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E9B0
		move.w	(sp)+,d0
		move.b	#-$40,d2
		bra.w	loc_1ECC6
; ===========================================================================

loc_1EEDC:				
		move.w	$C(a0),d2
		move.w	8(a0),d3

loc_1EEE4:				
		addi.w	#$A,d3
		lea	(v_angle_right).w,a4
		movea.w	#$10,a3
		move.w	#0,d6
		bsr.w	loc_1E9B0
		move.b	#-$40,d2
		bra.w	loc_1ECFE
; ===========================================================================

loc_1EF00:				
		add.w	8(a0),d3
		move.w	$C(a0),d2
		lea	(v_angle_right).w,a4

loc_1EF0C:
		move.b	#0,(a4)
		movea.w	#$10,a3
		move.w	#0,d6
		moveq	#$D,d5
		bsr.w	loc_1E9B0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EF2C
		move.b	#-$40,d3

locret_1EF2C:				
		rts	
; ===========================================================================

loc_1EF2E:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	loc_1E7D0
		move.w	d1,-(sp)
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		move.b	$17(a0),d0
		ext.w	d0
		sub.w	d0,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	loc_1E7D0
		move.w	(sp)+,d0
		move.b	#-$80,d2
		bra.w	loc_1ECC6
; ===========================================================================
		move.w	$C(a0),d2
		move.w	8(a0),d3

loc_1EF9E:				
		subi.w	#$A,d2
		eori.w	#$F,d2
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	loc_1E7D0
		move.b	#-$80,d2
		bra.w	loc_1ECFE
; ===========================================================================

loc_1EFBE:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d2
		eori.w	#$F,d2
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$800,d6
		moveq	#$D,d5
		bsr.w	loc_1E7D0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1EFF4
		move.b	#-$80,d3

locret_1EFF4:				
		rts	
; ===========================================================================

loc_1EFF6:				
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0

loc_1F000:
		move.b	$17(a0),d0
		ext.w	d0

loc_1F006:
		sub.w	d0,d2

loc_1F008:
		move.b	$16(a0),d0

loc_1F00C:
		ext.w	d0

loc_1F00E:
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	loc_1E9B0
		move.w	d1,-(sp)

loc_1F026:
		move.w	$C(a0),d2
		move.w	8(a0),d3
		moveq	#0,d0
		move.b	$17(a0),d0
		ext.w	d0
		add.w	d0,d2
		move.b	$16(a0),d0
		ext.w	d0
		sub.w	d0,d3
		eori.w	#$F,d3
		lea	(v_angle_left).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	loc_1E9B0
		move.w	(sp)+,d0
		move.b	#$40,d2	; '@'
		bra.w	loc_1ECC6
; ===========================================================================

loc_1F05E:				
		move.w	$C(a0),d2
		move.w	8(a0),d3

loc_1F066:				
		subi.w	#$A,d3
		eori.w	#$F,d3
		lea	(v_angle_right).w,a4
		movea.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	loc_1E9B0
		move.b	#$40,d2	; '@'
		bra.w	loc_1ECFE
; ===========================================================================

loc_1F086:				
		add.w	8(a0),d3
		move.w	$C(a0),d2
		lea	(v_angle_right).w,a4
		move.b	#0,(a4)
		movea.w	#-$10,a3
		move.w	#$400,d6
		moveq	#$D,d5
		bsr.w	loc_1E9B0
		move.b	(v_angle_right).w,d3
		btst	#0,d3
		beq.s	locret_1F0B2
		move.b	#$40,d3	; '@'

locret_1F0B2:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_1F0B4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1F0C2(pc,d0.w),d1
		jmp	off_1F0C2(pc,d1.w)
; ===========================================================================
off_1F0C2:	dc.w loc_1F0CC-off_1F0C2; 0 
		dc.w loc_1F12C-off_1F0C2; 1
		dc.w loc_1F230-off_1F0C2; 2
		dc.w loc_1F240-off_1F0C2; 3
		dc.w loc_1F536-off_1F0C2; 4
; ===========================================================================

loc_1F0CC:				
		addq.b	#2,$24(a0)
		move.l	#Map_1F424,4(a0)
		move.w	#$47C,2(a0)
		bsr.w	loc_1F61C
		move.b	#4,1(a0)
		move.b	#8,$19(a0)
		move.b	#5,$18(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bclr	#7,2(a2,d0.w)
		btst	#0,2(a2,d0.w)
		bne.s	loc_1F120
		move.b	(v_last_lamppost).w,d1
		andi.b	#$7F,d1	; ''
		move.b	$28(a0),d2
		andi.b	#$7F,d2	; ''
		cmp.b	d2,d1
		bcs.s	loc_1F12C

loc_1F120:				
		bset	#0,2(a2,d0.w)
		move.b	#2,$1C(a0)

loc_1F12C:				
					
		tst.w	(v_debug_active).w
		bne.w	loc_1F230
		lea	($FFFFB000).w,a3
		move.b	(v_last_lamppost).w,d1
		bsr.s	loc_1F154
		tst.w	(f_two_player).w
		beq.w	loc_1F230
		lea	($FFFFB040).w,a3
		move.b	(v_last_lamppost_p2).w,d1
		bsr.s	loc_1F154
		bra.w	loc_1F230
; ===========================================================================

loc_1F154:				
		andi.b	#$7F,d1	; ''
		move.b	$28(a0),d2
		andi.b	#$7F,d2	; ''
		cmp.b	d2,d1
		bcc.w	loc_1F222
		move.w	8(a3),d0
		sub.w	8(a0),d0
		addi.w	#8,d0
		cmpi.w	#$10,d0
		bcc.w	locret_1F220
		move.w	$C(a3),d0
		sub.w	$C(a0),d0
		addi.w	#$40,d0	; '@'
		cmpi.w	#$68,d0	; 'h'
		bcc.w	locret_1F220
		move.w	#$A1,d0	
		jsr	(PlaySound).l
		jsr	SingleObjLoad
		bne.s	loc_1F206
		_move.b	#$79,0(a1) ; 'y'
		move.b	#6,$24(a1)
		move.w	8(a0),$30(a1)
		move.w	$C(a0),$32(a1)
		subi.w	#$14,$32(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		move.b	#8,$19(a1)
		move.b	#4,$18(a1)
		move.b	#2,$1A(a1)
		move.w	#$20,$36(a1) ; ' '
		move.w	a0,$3E(a1)
		tst.w	(f_two_player).w
		bne.s	loc_1F206
		cmpi.b	#7,(v_emeralds).w
		beq.s	loc_1F206
		cmpi.w	#$32,(v_rings).w ; '2'

loc_1F200:
		bcs.s	loc_1F206
		bsr.w	loc_1F4C4

loc_1F206:				
		move.b	#1,$1C(a0)

loc_1F20C:
		bsr.w	loc_1F298
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		bset	#0,2(a2,d0.w)

locret_1F220:				
		rts	
; ===========================================================================

loc_1F222:				
		tst.b	$1C(a0)
		bne.s	locret_1F22E
		move.b	#2,$1C(a0)

locret_1F22E:				
		rts	
; ===========================================================================

loc_1F230:				
		lea	(byte_1F414).l,a1
		bsr.w	loc_1F616
		jmp	MarkObjGone
; ===========================================================================

loc_1F240:				
		subq.w	#1,$36(a0)
		bpl.s	loc_1F262
		movea.w	$3E(a0),a1
		cmpi.b	#$79,(a1) ; 'y'
		bne.s	loc_1F25C
		move.b	#2,$1C(a1)
		move.b	#0,$1A(a1)

loc_1F25C:				
		jmp	DeleteObject
; ===========================================================================

loc_1F262:				
		move.b	$26(a0),d0
		subi.b	#$10,$26(a0)
		subi.b	#$40,d0	; '@'
		jsr	(CalcSine).l
		muls.w	#$C00,d1
		swap	d1
		add.w	$30(a0),d1
		move.w	d1,8(a0)
		muls.w	#$C00,d0
		swap	d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		jmp	MarkObjGone
; ===========================================================================

loc_1F298:				
		cmpa.w	#v_ost_maincharacter,a3
		bne.w	loc_1F326
		move.b	$28(a0),(v_last_lamppost).w
		move.b	(v_last_lamppost).w,(v_last_lamppost_lampcopy).w
		move.w	8(a0),(v_x_pos_lampcopy).w
		move.w	$C(a0),(v_y_pos_lampcopy).w
		move.w	(v_ost_maincharacter+ost_tile).w,(v_ost_tile_lampcopy).w
		move.w	(v_ost_maincharacter+ost_top_solid_bit).w,(v_ost_top_solid_bit_lampcopy).w
		move.w	(v_rings).w,(v_rings_lampcopy).w
		move.b	(v_ring_reward).w,(v_ring_reward_lampcopy).w
		move.l	(v_time).w,(v_time_lampcopy).w
		move.b	(v_dle_routine).w,(v_dle_routine_lampcopy).w
		move.w	(v_boundary_bottom).w,(v_boundary_bottom_next_lampcopy).w
		move.w	(v_camera_x_pos).w,(v_camera_x_pos_lampcopy).w
		move.w	(v_camera_y_pos).w,(v_camera_y_pos_lampcopy).w
		move.w	(v_bg1_x_pos).w,(v_bg1_x_pos_lampcopy).w
		move.w	(v_bg1_y_pos).w,(v_bg1_y_pos_lampcopy).w
		move.w	(v_bg2_x_pos).w,(v_bg2_x_pos_lampcopy).w
		move.w	(v_bg2_y_pos).w,(v_bg2_y_pos_lampcopy).w

loc_1F306:
		move.w	(v_bg3_x_pos).w,(v_bg3_x_pos_lampcopy).w
		move.w	(v_bg3_y_pos).w,(v_bg3_y_pos_lampcopy).w
		move.w	(v_water_height_normal).w,(v_water_height_normal_lampcopy).w
		move.b	(v_water_routine).w,(v_water_routine_lampcopy).w
		move.b	(f_water_pal_full).w,(f_water_pal_full_lampcopy).w
		rts	
; ===========================================================================

loc_1F326:				
		move.b	$28(a0),(v_last_lamppost_p2).w
		move.b	(v_last_lamppost_p2).w,(v_last_lamppost_p2_lampcopy).w
		move.w	8(a0),(v_x_pos_p2_lampcopy).w
		move.w	$C(a0),(v_y_pos_p2_lampcopy).w
		move.w	($FFFFB042).w,(v_ost_tile_p2_lampcopy).w
		move.w	(v_ost_sidekick+ost_top_solid_bit).w,(v_ost_top_solid_bit_p2_lampcopy).w
		move.w	(v_rings_p2).w,(v_rings_p2_lampcopy).w
		move.b	(v_ring_reward_p2).w,(v_ring_reward_lampcopy_2p).w

loc_1F356:
		move.l	(v_time_p2).w,(v_time_p2_lampcopy).w
		rts	
; ===========================================================================

loc_1F35E:				
		move.b	(v_last_lamppost_lampcopy).w,(v_last_lamppost).w
		move.w	(v_x_pos_lampcopy).w,($FFFFB008).w
		move.w	(v_y_pos_lampcopy).w,($FFFFB00C).w
		move.w	(v_rings_lampcopy).w,(v_rings).w
		move.b	(v_ring_reward_lampcopy).w,(v_ring_reward).w
		clr.w	(v_rings).w
		clr.b	(v_ring_reward).w
		move.l	(v_time_lampcopy).w,(v_time).w
		move.b	#$3B,(v_time_frames).w ; ';'
		subq.b	#1,(v_time_sec).w
		move.w	(v_ost_tile_lampcopy).w,(v_ost_maincharacter+ost_tile).w
		move.w	(v_ost_top_solid_bit_lampcopy).w,(v_ost_maincharacter+ost_top_solid_bit).w
		move.b	(v_dle_routine_lampcopy).w,(v_dle_routine).w
		move.b	(v_water_routine_lampcopy).w,(v_water_routine).w
		move.w	(v_boundary_bottom_next_lampcopy).w,(v_boundary_bottom).w
		move.w	(v_boundary_bottom_next_lampcopy).w,(v_boundary_bottom_next).w
		move.w	(v_camera_x_pos_lampcopy).w,(v_camera_x_pos).w
		move.w	(v_camera_y_pos_lampcopy).w,(v_camera_y_pos).w
		move.w	(v_bg1_x_pos_lampcopy).w,(v_bg1_x_pos).w
		move.w	(v_bg1_y_pos_lampcopy).w,(v_bg1_y_pos).w
		move.w	(v_bg2_x_pos_lampcopy).w,(v_bg2_x_pos).w

loc_1F3D6:
		move.w	(v_bg2_y_pos_lampcopy).w,(v_bg2_y_pos).w
		move.w	(v_bg3_x_pos_lampcopy).w,(v_bg3_x_pos).w
		move.w	(v_bg3_y_pos_lampcopy).w,(v_bg3_y_pos).w

loc_1F3E8:
		tst.b	(f_water_flag).w
		beq.s	loc_1F400
		move.w	(v_water_height_normal_lampcopy).w,(v_water_height_normal).w
		move.b	(v_water_routine_lampcopy).w,(v_water_routine).w
		move.b	(f_water_pal_full_lampcopy).w,(f_water_pal_full).w

loc_1F400:				
		tst.b	(v_last_lamppost).w

loc_1F404:
		bpl.s	locret_1F412
		move.w	(v_x_pos_lampcopy).w,d0
		subi.w	#$A0,d0	
		move.w	d0,(v_boundary_left_next).w

locret_1F412:				
		rts	
; ===========================================================================
byte_1F414:	dc.b   0		; 0 
		dc.b   6		; 1
		dc.b   0		; 2
		dc.b   9		; 3
		dc.b   0		; 4
		dc.b  $C		; 5
		dc.b  $F		; 6
		dc.b   0		; 7
		dc.b $FF		; 8
		dc.b  $F		; 9
		dc.b   1		; 10
		dc.b $FF		; 11
		dc.b   3		; 12
		dc.b   0		; 13
		dc.b   4		; 14
		dc.b $FF		; 15
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1F424:				
		dc.w word_1F42E-Map_1F424; 0
		dc.w word_1F450-Map_1F424; 1
		dc.w word_1F46A-Map_1F424; 2
		dc.w word_1F474-Map_1F424; 3
		dc.w word_1F47E-Map_1F424; 4
word_1F42E:	dc.w 4			
word_1F430:	dc.w $E801,$2004,$2002,$FFFC; 0
		dc.w $F803,$2006,$2003,$FFF8; 4
		dc.w $F803,$2806,$2803,	   0; 8
		dc.w $D805,    0,    0,$FFF8; 12
word_1F450:	dc.w 3			
word_1F452:	dc.w $E801,$2004,$2002,$FFFC; 0
		dc.w $F803,$2006,$2003,$FFF8; 4
		dc.w $F803,$2806,$2803,	   0; 8
word_1F46A:	dc.w 1			
word_1F46C:	dc.w $F805,    0,    0,$FFF8; 0
word_1F474:	dc.w 1			
		dc.w $F805,$2000,$2000,$FFF8; 0
word_1F47E:	dc.w 4			
word_1F480:	dc.w $E801,$2004,$2002,$FFFC; 0
		dc.w $F803,$2006,$2003,$FFF8; 4
		dc.w $F803,$2806,$2803,	   0; 8
		dc.w $D805,$2000,$2000,$FFF8; 12
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
off_1F4A0:	dc.w word_1F4A6-off_1F4A0; 0 
		dc.w word_1F4B0-off_1F4A0; 1
		dc.w word_1F4BA-off_1F4A0; 2
word_1F4A6:	dc.w 1			
		dc.w $F805,   $A,    5,$FFF8; 0
word_1F4B0:	dc.w 1			
		dc.w $FC00,   $E,    7,$FFFC; 0
word_1F4BA:	dc.w 1			
word_1F4BC:	dc.w $FC00,   $F,    7,$FFFC; 0
; ===========================================================================

loc_1F4C4:				
		moveq	#3,d1
		moveq	#0,d2

loc_1F4C8:				
		bsr.w	SingleObjLoad2
		bne.s	locret_1F534
		_move.b	0(a0),0(a1)
		move.l	#off_1F4A0,4(a1)
		move.w	#$47C,2(a1)
		move.b	#4,1(a1)
		move.b	#8,$24(a1)
		move.w	8(a0),d0
		move.w	d0,8(a1)
		move.w	d0,$30(a1)
		move.w	$C(a0),d0
		subi.w	#$30,d0	; '0'

loc_1F502:
		move.w	d0,$C(a1)
		move.w	d0,$32(a1)

loc_1F50A:
		move.b	$18(a0),$18(a1)
		move.b	#8,$19(a1)
		move.b	#1,$1A(a1)
		move.w	#-$400,$10(a1)
		move.w	#0,$12(a1)
		move.w	d2,$34(a1)
		addi.w	#$40,d2	; '@'
		dbf	d1,loc_1F4C8

locret_1F534:				
		rts	
; ===========================================================================

loc_1F536:				
		move.b	$21(a0),d0
		beq.w	loc_1F554
		andi.b	#1,d0
		beq.s	loc_1F550
		move.b	#1,(f_unused_ss_flag).w
		move.b	#$10,(v_gamemode).w

loc_1F550:				
		clr.b	$21(a0)

loc_1F554:				
		addi.w	#$A,$34(a0)
		move.w	$34(a0),d0
		andi.w	#$FF,d0
		jsr	(CalcSine).l
		asr.w	#5,d0
		asr.w	#3,d1
		move.w	d1,d3
		move.w	$34(a0),d2
		andi.w	#$3E0,d2
		lsr.w	#5,d2
		moveq	#2,d5
		moveq	#0,d4
		cmpi.w	#$10,d2
		ble.s	loc_1F584
		neg.w	d1

loc_1F584:				
		andi.w	#$F,d2
		cmpi.w	#8,d2
		ble.s	loc_1F594
		neg.w	d2
		andi.w	#7,d2

loc_1F594:				
		lsr.w	#1,d2
		beq.s	loc_1F59A
		add.w	d1,d4

loc_1F59A:				
		asl.w	#1,d1
		dbf	d5,loc_1F594
		asr.w	#4,d4
		add.w	d4,d0
		addq.w	#1,$36(a0)
		move.w	$36(a0),d1
		cmpi.w	#$80,d1	
		beq.s	loc_1F5BE
		bgt.s	loc_1F5C4

loc_1F5B4:				
		muls.w	d1,d0
		muls.w	d1,d3
		asr.w	#7,d0
		asr.w	#7,d3
		bra.s	loc_1F5D6
; ===========================================================================

loc_1F5BE:				
		move.b	#-$28,$20(a0)

loc_1F5C4:				
		cmpi.w	#$180,d1
		ble.s	loc_1F5D6
		neg.w	d1
		addi.w	#$200,d1
		bmi.w	loc_1F608
		bra.s	loc_1F5B4
; ===========================================================================

loc_1F5D6:				
		move.w	$30(a0),d2
		add.w	d3,d2
		move.w	d2,8(a0)
		move.w	$32(a0),d2
		add.w	d0,d2
		move.w	d2,$C(a0)
		addq.b	#1,$1B(a0)
		move.b	$1B(a0),d0
		andi.w	#6,d0
		lsr.w	#1,d0
		cmpi.b	#3,d0
		bne.s	loc_1F600
		moveq	#1,d0

loc_1F600:				
		move.b	d0,$1A(a0)

loc_1F604:
		bra.w	loc_1F610
; ===========================================================================

loc_1F608:				
		jmp	DeleteObject
; ===========================================================================
		nop	

loc_1F610:				
		jmp	MarkObjGone
; ===========================================================================

loc_1F616:				
		jmp	AnimateSprite
; ===========================================================================

loc_1F61C:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_1F624:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1F632(pc,d0.w),d1
		jmp	off_1F632(pc,d1.w)
; ===========================================================================
off_1F632:	dc.w loc_1F636-off_1F632; 0 
		dc.w loc_1F6DA-off_1F632; 1
; ===========================================================================

loc_1F636:				
		moveq	#$10,d2
		move.w	d2,d3
		add.w	d3,d3
		lea	($FFFFB000).w,a1
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bcc.s	loc_1F6B8
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		add.w	d2,d1
		cmp.w	d3,d1
		bcc.s	loc_1F6B8
		tst.w	(v_debug_active).w
		bne.s	loc_1F6B8
		tst.b	(f_unused_ss_flag).w
		bne.s	loc_1F6B8
		addq.b	#2,$24(a0)
		move.l	#Map_1F6FE,4(a0)
		move.w	#-$7B4A,2(a0)
		bsr.w	loc_1F728
		ori.b	#4,1(a0)
		move.b	#0,$18(a0)
		move.b	#$10,$19(a0)
		move.b	$28(a0),$1A(a0)
		move.w	#$77,$30(a0) ; 'w'
		move.w	#$C9,d0	
		jsr	(PlaySound).l
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	word_1F6D2(pc,d0.w),d0
		jsr	sub_40D06

loc_1F6B8:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_1F6CC
		rts	
; ===========================================================================

loc_1F6CC:				
		jmp	DeleteObject
; ===========================================================================
word_1F6D2:	dc.w	 0		; 0
		dc.w  $3E8		; 1
		dc.w   $64		; 2
		dc.w	 1		; 3
; ===========================================================================

loc_1F6DA:				
		subq.w	#1,$30(a0)
		bmi.s	loc_1F6F8
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_1F6F8
		jmp	DisplaySprite
; ===========================================================================

loc_1F6F8:				
		jmp	DeleteObject
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1F6FE:				
		dc.w word_1F706-Map_1F6FE; 0
		dc.w word_1F708-Map_1F6FE; 1
		dc.w word_1F712-Map_1F6FE; 2
		dc.w word_1F71C-Map_1F6FE; 3
word_1F706:	dc.w 0			
word_1F708:	dc.w 1			
		dc.w $F40E,    0,    0,$FFF0; 0
word_1F712:	dc.w 1			
		dc.w $F40E,   $C,    6,$FFF0; 0
word_1F71C:	dc.w 1			
		dc.w $F40E,  $18,   $C,$FFF0; 0
; ===========================================================================
		nop	

loc_1F728:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Round	bumper from CNZ
; ----------------------------------------------------------------------------

Sprite_1F730:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1F73E(pc,d0.w),d1
		jmp	off_1F73E(pc,d1.w)
; ===========================================================================
off_1F73E:	dc.w loc_1F742-off_1F73E; 0 
		dc.w loc_1F770-off_1F73E; 1
; ===========================================================================

loc_1F742:				
		addq.b	#2,$24(a0)
		move.l	#Map_1F85A,4(a0)
		move.w	#$439A,2(a0)
		bsr.w	loc_1F8A0
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#-$29,$20(a0)

loc_1F770:				
		move.b	$21(a0),d0
		beq.w	loc_1F83E
		lea	($FFFFB000).w,a1
		bclr	#0,$21(a0)
		beq.s	loc_1F786
		bsr.s	loc_1F79C

loc_1F786:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_1F794
		bsr.s	loc_1F79C

loc_1F794:				
		clr.b	$21(a0)
		bra.w	loc_1F83E
; ===========================================================================

loc_1F79C:				
		move.w	8(a0),d1
		move.w	$C(a0),d2
		sub.w	8(a1),d1
		sub.w	$C(a1),d2
		jsr	(CalcAngle).l
		move.b	(v_frame_counter).w,d1
		andi.w	#3,d1
		add.w	d1,d0
		jsr	(CalcSine).l
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,$10(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,$12(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b	$3C(a1)
		move.b	#1,$1C(a0)
		move.w	#$B4,d0	
		jsr	(PlaySound).l
		lea	(v_respawn_list).w,a2

loc_1F800:
		moveq	#0,d0

loc_1F802:
		move.b	$23(a0),d0
		beq.s	loc_1F814

loc_1F808:
		cmpi.b	#-$76,2(a2,d0.w)

loc_1F80E:
		bcc.s	locret_1F83C
		addq.b	#1,2(a2,d0.w)

loc_1F814:				
		moveq	#1,d0
		movea.w	a1,a3
		jsr	sub_40D42
		bsr.w	SingleObjLoad
		bne.s	locret_1F83C
		_move.b	#$29,0(a1) ; ')'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#4,$1A(a1)

locret_1F83C:				
		rts	
; ===========================================================================

loc_1F83E:				
		lea	(off_1F84C).l,a1
		bsr.w	loc_1F89A
		bra.w	loc_1F894
; ===========================================================================
off_1F84C:	dc.w byte_1F850-off_1F84C; 0 
		dc.w byte_1F853-off_1F84C; 1
byte_1F850:	dc.b  $F,  0,$FF	; 0 
byte_1F853:	dc.b   3,  1,  0,  1,$FD,  0,  0; 0 
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1F85A:				
		dc.w word_1F85E-Map_1F85A; 0
		dc.w word_1F870-Map_1F85A; 1
word_1F85E:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0; 0
		dc.w $F007, $800, $800,	   0; 4
word_1F870:	dc.w 4			
		dc.w $EC0B,    8,    4,$FFE8; 0
		dc.w $EC0B, $808, $804,	   0; 4
		dc.w  $C05,  $14,   $A,$FFF0; 8
		dc.w  $C05, $814, $80A,	   0; 12
; ===========================================================================
		nop	

loc_1F894:				
		jmp	MarkObjGone
; ===========================================================================

loc_1F89A:				
		jmp	AnimateSprite
; ===========================================================================

loc_1F8A0:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Bubble:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1F8B6(pc,d0.w),d1
		jmp	off_1F8B6(pc,d1.w)
; ===========================================================================
off_1F8B6:	dc.w loc_1F8C2-off_1F8B6; 0 
		dc.w loc_1F924-off_1F8B6; 1
		dc.w loc_1F93E-off_1F8B6; 2
		dc.w loc_1F99E-off_1F8B6; 3
		dc.w loc_1F9BC-off_1F8B6; 4
		dc.w loc_1F9C0-off_1F8B6; 5
; ===========================================================================

loc_1F8C2:				
		addq.b	#2,$24(a0)
		move.l	#Map_1FBF6,4(a0)
		move.w	#-$7AA5,2(a0)
		bsr.w	loc_1FCD0
		move.b	#-$7C,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		bpl.s	loc_1F90A
		addq.b	#8,$24(a0)
		andi.w	#$7F,d0	; ''
		move.b	d0,$32(a0)
		move.b	d0,$33(a0)

loc_1F900:
		move.b	#6,$1C(a0)
		bra.w	loc_1F9C0
; ===========================================================================

loc_1F90A:				
		move.b	d0,$1C(a0)
		move.w	8(a0),$30(a0)
		move.w	#-$88,$12(a0)
		jsr	(RandomNumber).l
		move.b	d0,$26(a0)

loc_1F924:				
		lea	(off_1FBCC).l,a1
		jsr	AnimateSprite
		cmpi.b	#6,$1A(a0)
		bne.s	loc_1F93E
		move.b	#1,$2E(a0)

loc_1F93E:				
					
		move.w	(v_water_height_actual).w,d0
		cmp.w	$C(a0),d0
		bcs.s	loc_1F956
		move.b	#6,$24(a0)
		addq.b	#3,$1C(a0)
		bra.w	loc_1F99E
; ===========================================================================

loc_1F956:				
		move.b	$26(a0),d0
		addq.b	#1,$26(a0)
		andi.w	#$7F,d0	; ''
		lea	(byte_1D4C0).l,a1
		move.b	(a1,d0.w),d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		tst.b	$2E(a0)
		beq.s	loc_1F988
		bsr.w	loc_1FB02
		cmpi.b	#6,$24(a0)
		beq.s	loc_1F99E

loc_1F988:				
		bsr.w	loc_1FCD6
		tst.b	1(a0)
		bpl.s	loc_1F998
		jmp	DisplaySprite
; ===========================================================================

loc_1F998:				
		jmp	DeleteObject
; ===========================================================================

loc_1F99E:				
					; DATA XREF: ...
		lea	(off_1FBCC).l,a1
		jsr	AnimateSprite
		tst.b	1(a0)
		bpl.s	loc_1F9B6
		jmp	DisplaySprite
; ===========================================================================

loc_1F9B6:				
		jmp	DeleteObject
; ===========================================================================

loc_1F9BC:				
		bra.w	loc_1FCCA
; ===========================================================================

loc_1F9C0:				
					
		tst.w	$36(a0)
		bne.s	loc_1FA22
		move.w	(v_water_height_actual).w,d0
		cmp.w	$C(a0),d0
		bcc.w	loc_1FACE
		tst.b	1(a0)
		bpl.w	loc_1FACE
		subq.w	#1,$38(a0)
		bpl.w	loc_1FAC2
		move.w	#1,$36(a0)

loc_1F9E8:				
		jsr	(RandomNumber).l
		move.w	d0,d1
		andi.w	#7,d0
		cmpi.w	#6,d0
		bcc.s	loc_1F9E8
		move.b	d0,$34(a0)
		andi.w	#$C,d1

loc_1FA02:
		lea	(byte_1FAF0).l,a1

loc_1FA08:
		adda.w	d1,a1

loc_1FA0A:
		move.l	a1,$3C(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_1FA20
		move.b	$33(a0),$32(a0)
		bset	#7,$36(a0)

loc_1FA20:				
		bra.s	loc_1FA2A
; ===========================================================================

loc_1FA22:				
		subq.w	#1,$38(a0)
		bpl.w	loc_1FAC2

loc_1FA2A:				
		jsr	(RandomNumber).l
		andi.w	#$1F,d0
		move.w	d0,$38(a0)
		bsr.w	SingleObjLoad
		bne.s	loc_1FAA6
		_move.b	0(a0),0(a1)
		move.w	8(a0),8(a1)
		jsr	(RandomNumber).l
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,8(a1)
		move.w	$C(a0),$C(a1)
		moveq	#0,d0
		move.b	$34(a0),d0
		movea.l	$3C(a0),a2
		move.b	(a2,d0.w),$28(a1)
		btst	#7,$36(a0)
		beq.s	loc_1FAA6
		jsr	(RandomNumber).l
		andi.w	#3,d0
		bne.s	loc_1FA92
		bset	#6,$36(a0)
		bne.s	loc_1FAA6
		move.b	#2,$28(a1)

loc_1FA92:				
		tst.b	$34(a0)
		bne.s	loc_1FAA6
		bset	#6,$36(a0)
		bne.s	loc_1FAA6
		move.b	#2,$28(a1)

loc_1FAA6:				
		subq.b	#1,$34(a0)
		bpl.s	loc_1FAC2
		jsr	(RandomNumber).l
		andi.w	#$7F,d0	; ''
		addi.w	#$80,d0	
		add.w	d0,$38(a0)
		clr.w	$36(a0)

loc_1FAC2:				
		lea	(off_1FBCC).l,a1
		jsr	AnimateSprite

loc_1FACE:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_1FCCA
		move.w	(v_water_height_actual).w,d0
		cmp.w	$C(a0),d0
		bcs.w	loc_1FCC4
		rts	
; ===========================================================================
byte_1FAF0:	dc.b   0		; 0 
		dc.b   1		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   0		; 4
		dc.b   0		; 5
		dc.b   1		; 6
		dc.b   0		; 7
		dc.b   0		; 8
		dc.b   0		; 9
		dc.b   0		; 10
		dc.b   1		; 11
		dc.b   0		; 12
		dc.b   1		; 13
		dc.b   0		; 14
		dc.b   0		; 15
		dc.b   1		; 16
		dc.b   0		; 17
; ===========================================================================

loc_1FB02:				
		lea	($FFFFB000).w,a1
		bsr.s	loc_1FB0C
		lea	($FFFFB040).w,a1

loc_1FB0C:				
		tst.b	$2A(a1)
		bmi.w	locret_1FBCA
		move.w	8(a1),d0
		move.w	8(a0),d1
		subi.w	#$10,d1
		cmp.w	d0,d1
		bcc.w	locret_1FBCA
		addi.w	#$20,d1	; ' '
		cmp.w	d0,d1
		bcs.w	locret_1FBCA
		move.w	$C(a1),d0
		move.w	$C(a0),d1
		cmp.w	d0,d1
		bcc.w	locret_1FBCA
		addi.w	#$10,d1
		cmp.w	d0,d1
		bcs.w	locret_1FBCA
		bsr.w	loc_1D81E
		move.w	#$AD,d0	
		jsr	(PlaySound).l
		clr.w	$10(a1)
		clr.w	$12(a1)
		clr.w	$14(a1)
		move.b	#$15,$1C(a1)
		move.w	#$23,$2E(a1) ; '#'
		move.b	#0,$3C(a1)
		bclr	#5,$22(a1)
		bclr	#4,$22(a1)
		btst	#2,$22(a1)
		beq.w	loc_1FBB8
		cmpi.b	#1,(a1)
		bne.s	loc_1FBA8
		bclr	#2,$22(a1)
		move.b	#$13,$16(a1)
		move.b	#9,$17(a1)
		subq.w	#5,$C(a1)
		bra.s	loc_1FBB8
; ===========================================================================

loc_1FBA8:				
		move.b	#$F,$16(a1)
		move.b	#9,$17(a1)
		subq.w	#1,$C(a1)

loc_1FBB8:				
		cmpi.b	#6,$24(a0)
		beq.s	locret_1FBCA
		move.b	#6,$24(a0)
		addq.b	#3,$1C(a0)

locret_1FBCA:				
		rts	
; ===========================================================================
off_1FBCC:	dc.w byte_1FBDA-off_1FBCC; 0 
		dc.w byte_1FBDF-off_1FBCC; 1
		dc.w byte_1FBE5-off_1FBCC; 2
		dc.w byte_1FBEC-off_1FBCC; 3
		dc.w byte_1FBEC-off_1FBCC; 4
		dc.w byte_1FBEE-off_1FBCC; 5
		dc.w byte_1FBF2-off_1FBCC; 6
byte_1FBDA:	dc.b  $E,  0,  1,  2,$FC; 0 
byte_1FBDF:	dc.b  $E,  1,  2,  3,  4,$FC; 0	
byte_1FBE5:	dc.b  $E,  2,  3,  4,  5,  6,$FC; 0 
byte_1FBEC:	dc.b   4,$FC		; 0 
byte_1FBEE:	dc.b   4,  6,  7,$FC	; 0 
byte_1FBF2:	dc.b  $F, $E, $F,$FF	; 0 
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1FBF6:	dc.w word_1FC3A-Map_1FBF6; 0	
		dc.w word_1FC44-Map_1FBF6; 1
		dc.w word_1FC44-Map_1FBF6; 2
		dc.w word_1FC4E-Map_1FBF6; 3
		dc.w word_1FC58-Map_1FBF6; 4
		dc.w word_1FC62-Map_1FBF6; 5
		dc.w word_1FC6C-Map_1FBF6; 6
		dc.w word_1FC76-Map_1FBF6; 7
		dc.w word_1FC98-Map_1FBF6; 8
		dc.w word_1FC98-Map_1FBF6; 9
		dc.w word_1FC98-Map_1FBF6; 10
		dc.w word_1FC98-Map_1FBF6; 11
		dc.w word_1FC98-Map_1FBF6; 12
		dc.w word_1FC98-Map_1FBF6; 13
		dc.w word_1FCA2-Map_1FBF6; 14
		dc.w word_1FCAC-Map_1FBF6; 15
		dc.w word_1FCB6-Map_1FBF6; 16
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1FC18:				
		dc.w word_1FC3A-Map_1FC18; 0
		dc.w word_1FC44-Map_1FC18; 1
		dc.w word_1FC44-Map_1FC18; 2
		dc.w word_1FC4E-Map_1FC18; 3
		dc.w word_1FC58-Map_1FC18; 4
		dc.w word_1FC62-Map_1FC18; 5
		dc.w word_1FC6C-Map_1FC18; 6
		dc.w word_1FC76-Map_1FC18; 7
		dc.w word_1FCB8-Map_1FC18; 8
		dc.w word_1FCB8-Map_1FC18; 9
		dc.w word_1FCB8-Map_1FC18; 10
		dc.w word_1FCB8-Map_1FC18; 11
		dc.w word_1FCB8-Map_1FC18; 12
		dc.w word_1FCB8-Map_1FC18; 13
		dc.w word_1FCA2-Map_1FC18; 14
		dc.w word_1FCAC-Map_1FC18; 15
		dc.w word_1FCB6-Map_1FC18; 16
word_1FC3A:	dc.w 1			
		dc.w $FC00,  $8D,  $46,$FFFC; 0
word_1FC44:	dc.w 1			
		dc.w $FC00,  $8E,  $47,$FFFC; 0
word_1FC4E:	dc.w 1			
		dc.w $F805,  $8F,  $47,$FFF8; 0
word_1FC58:	dc.w 1			
		dc.w $F805,  $93,  $49,$FFF8; 0
word_1FC62:	dc.w 1			
		dc.w $F40A,  $1C,   $E,$FFF4; 0
word_1FC6C:	dc.w 1			
		dc.w $F00F,    8,    4,$FFF0; 0
word_1FC76:	dc.w 4			
		dc.w $F005,  $18,   $C,$FFF0; 0
		dc.w $F005, $818, $80C,	   0; 4
		dc.w	 5,$1018,$100C,$FFF0; 8
		dc.w	 5,$1818,$180C,	   0; 12
word_1FC98:	dc.w 1			
		dc.w $F406,$1F41,$1BA0,$FFF8; 0
word_1FCA2:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_1FCAC:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8; 0
word_1FCB6:	dc.w 0			
word_1FCB8:	dc.w	 1,$F406,$1F31,$1B98; 0	
		dc.w $FFF8		; 4
; ===========================================================================
		nop	

loc_1FCC4:				
		jmp	DisplaySprite
; ===========================================================================

loc_1FCCA:				
		jmp	DeleteObject
; ===========================================================================

loc_1FCD0:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_1FCD6:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

PlaneSwitcher:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_1FCF0(pc,d0.w),d1
		jsr	off_1FCF0(pc,d1.w)
		jmp	MarkObjGone3
; ===========================================================================
off_1FCF0:	dc.w loc_1FCF6-off_1FCF0; 0 
		dc.w loc_1FDA4-off_1FCF0; 1
		dc.w loc_1FEAE-off_1FCF0; 2
; ===========================================================================

loc_1FCF6:				
		addq.b	#2,$24(a0)
		move.l	#Map_1FFB8,4(a0)
		move.w	#$26BC,2(a0)

loc_1FD08:
		bsr.w	loc_20094
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		btst	#2,d0
		beq.s	loc_1FD70
		addq.b	#2,$24(a0)
		andi.w	#7,d0
		move.b	d0,$1A(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_1FD68(pc,d0.w),$32(a0)
		move.w	$C(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	$C(a1),d1
		bcc.s	loc_1FD54
		move.b	#1,$34(a0)

loc_1FD54:				
		lea	($FFFFB040).w,a1
		cmp.w	$C(a1),d1
		bcc.s	loc_1FD64
		move.b	#1,$35(a0)

loc_1FD64:				
		bra.w	loc_1FEAE
; ===========================================================================
word_1FD68:	dc.w   $20		; 0
		dc.w   $40		; 1
		dc.w   $80		; 2
		dc.w  $100		; 3
; ===========================================================================

loc_1FD70:				
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	word_1FD68(pc,d0.w),$32(a0)
		move.w	8(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	8(a1),d1
		bcc.s	loc_1FD94
		move.b	#1,$34(a0)

loc_1FD94:				
		lea	($FFFFB040).w,a1
		cmp.w	8(a1),d1
		bcc.s	loc_1FDA4
		move.b	#1,$35(a0)

loc_1FDA4:				
					
		tst.w	(v_debug_active).w
		bne.w	locret_1FEAC
		move.w	8(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_1FDBE
		lea	($FFFFB040).w,a1

loc_1FDBE:				
		tst.b	(a2)+
		bne.s	loc_1FE38
		cmp.w	8(a1),d1
		bhi.w	locret_1FEAC
		move.b	#1,-1(a2)
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$C(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FEAC
		cmp.w	d3,d4
		bge.w	locret_1FEAC
		move.b	$28(a0),d0
		bpl.s	loc_1FDFE
		btst	#1,$22(a1)
		bne.w	locret_1FEAC

loc_1FDFE:				
		btst	#0,1(a0)
		bne.s	loc_1FE24
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_1FE24
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FE24:				
		andi.w	#$7FFF,2(a1)
		btst	#5,d0
		beq.s	locret_1FEAC
		ori.w	#-$8000,2(a1)
		bra.s	locret_1FEAC
; ===========================================================================

loc_1FE38:				
		cmp.w	8(a1),d1
		bls.w	locret_1FEAC
		move.b	#0,-1(a2)
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$C(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FEAC
		cmp.w	d3,d4
		bge.w	locret_1FEAC
		move.b	$28(a0),d0
		bpl.s	loc_1FE74
		btst	#1,$22(a1)
		bne.w	locret_1FEAC

loc_1FE74:				
		btst	#0,1(a0)
		bne.s	loc_1FE9A
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_1FE9A
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FE9A:				
		andi.w	#$7FFF,2(a1)
		btst	#6,d0
		beq.s	locret_1FEAC
		ori.w	#-$8000,2(a1)

locret_1FEAC:				
		rts	
; ===========================================================================

loc_1FEAE:				
					
		tst.w	(v_debug_active).w
		bne.w	locret_1FFB6
		move.w	$C(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_1FEC8
		lea	($FFFFB040).w,a1

loc_1FEC8:				
		tst.b	(a2)+
		bne.s	loc_1FF42
		cmp.w	$C(a1),d1
		bhi.w	locret_1FFB6
		move.b	#1,-1(a2)
		move.w	8(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	8(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FFB6
		cmp.w	d3,d4
		bge.w	locret_1FFB6
		move.b	$28(a0),d0
		bpl.s	loc_1FF08

loc_1FEFE:
		btst	#1,$22(a1)
		bne.w	locret_1FFB6

loc_1FF08:				
		btst	#0,1(a0)
		bne.s	loc_1FF2E
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_1FF2E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FF2E:				
		andi.w	#$7FFF,2(a1)
		btst	#5,d0
		beq.s	locret_1FFB6
		ori.w	#-$8000,2(a1)
		bra.s	locret_1FFB6
; ===========================================================================

loc_1FF42:				
		cmp.w	$C(a1),d1
		bls.w	locret_1FFB6
		move.b	#0,-1(a2)
		move.w	8(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	8(a1),d4
		cmp.w	d2,d4
		blt.w	locret_1FFB6
		cmp.w	d3,d4
		bge.w	locret_1FFB6
		move.b	$28(a0),d0
		bpl.s	loc_1FF7E
		btst	#1,$22(a1)
		bne.w	locret_1FFB6

loc_1FF7E:				
		btst	#0,1(a0)
		bne.s	loc_1FFA4
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_1FFA4
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1FFA4:				
		andi.w	#$7FFF,2(a1)
		btst	#6,d0
		beq.s	locret_1FFB6
		ori.w	#-$8000,2(a1)

locret_1FFB6:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_1FFB8:				
		dc.w word_1FFC8-Map_1FFB8; 0
		dc.w word_1FFEA-Map_1FFB8; 1
		dc.w word_2000C-Map_1FFB8; 2
		dc.w word_2000C-Map_1FFB8; 3
		dc.w word_2002E-Map_1FFB8; 4
		dc.w word_20050-Map_1FFB8; 5
		dc.w word_20072-Map_1FFB8; 6
		dc.w word_20072-Map_1FFB8; 7
word_1FFC8:	dc.w 4			
word_1FFCA:	dc.w $E005,    0,    0,$FFF8; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
		dc.w $1005,    0,    0,$FFF8; 12
word_1FFEA:	dc.w 4			
word_1FFEC:	dc.w $C005,    0,    0,$FFF8; 0
		dc.w $E005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
		dc.w $3005,    0,    0,$FFF8; 12
word_2000C:	dc.w 4			
		dc.w $8005,    0,    0,$FFF8; 0
		dc.w $E005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
		dc.w $7005,    0,    0,$FFF8; 12
word_2002E:	dc.w 4			
		dc.w $F805,    0,    0,$FFE0; 0
		dc.w $F805,    0,    0,$FFF0; 4
		dc.w $F805,    0,    0,	   0; 8
		dc.w $F805,    0,    0,	 $10; 12
word_20050:	dc.w 4			
		dc.w $F805,    0,    0,$FFC0; 0
		dc.w $F805,    0,    0,$FFE0; 4
		dc.w $F805,    0,    0,	   0; 8
		dc.w $F805,    0,    0,	 $30; 12
word_20072:	dc.w 4			
		dc.w $F805,    0,    0,$FF80; 0
		dc.w $F805,    0,    0,$FFE0; 4
		dc.w $F805,    0,    0,	   0; 8
		dc.w $F805,    0,    0,	 $70; 12
; ===========================================================================

loc_20094:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Section of pipe that tips you	off from CPZ
; ----------------------------------------------------------------------------

TippingFloor:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_200AA(pc,d0.w),d1
		jmp	off_200AA(pc,d1.w)
; ===========================================================================
off_200AA:	dc.w loc_200B0-off_200AA; 0 
		dc.w loc_20104-off_200AA; 1
		dc.w loc_20112-off_200AA; 2
; ===========================================================================

loc_200B0:				
		addq.b	#2,$24(a0)
		move.l	#Map_obj0B,4(a0)
		move.w	#-$1C50,2(a0)
		bsr.w	JmpTo8_Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		addq.w	#1,d0
		lsl.w	#4,d0
		move.b	d0,$36(a0)

loc_20104:				
		move.b	($FFFFFE0F).w,d0
		add.b	$36(a0),d0
		bne.s	loc_2013C
		addq.b	#2,$24(a0)

loc_20112:				
		subq.w	#1,$30(a0)
		bpl.s	loc_20130
		move.w	#$7F,$30(a0) ; ''
		tst.b	$1C(a0)
		beq.s	loc_2012A
		move.w	$32(a0),$30(a0)

loc_2012A:				
		bchg	#0,$1C(a0)

loc_20130:				
		lea	(Ani_obj0B).l,a1
		jsr	AnimateSprite

loc_2013C:				
		tst.b	$1A(a0)
		bne.s	loc_20156
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#$11,d3
		move.w	8(a0),d4
		bsr.w	DetectPlatform
		bra.w	JmpTo3_MarkObjGone
; ===========================================================================

loc_20156:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	BranchTo_JmpTo3_MarkObjGone
		bclr	#3,$22(a0)
		beq.s	loc_20174
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

loc_20174:				
		bclr	#4,$22(a0)
		beq.s	BranchTo_JmpTo3_MarkObjGone
		bclr	#3,($FFFFB062).w
		bset	#1,($FFFFB062).w

BranchTo_JmpTo3_MarkObjGone:				
		jmpto	MarkObjGone, JmpTo3_MarkObjGone
; ===========================================================================
Ani_obj0B:	dc.w byte_20190-Ani_obj0B; 0 
		dc.w byte_20198-Ani_obj0B; 1
byte_20190:	dc.b   7,  0,  1,  2,  3,  4,$FE,  1; 0	
byte_20198:	dc.b   7,  4,  3,  2,  1,  0,$FE,  1; 0	

	include "mappings/sprite/CPZ Dumping Pipe Platform.asm"

; ===========================================================================
  
    if ~RemoveJmpTos
JmpTo3_MarkObjGone:				
		jmp	MarkObjGone
		
JmpTo8_Adjust2PArtPointer:				
		jmp	Adjust2PArtPointer
		
		align 4
		
    endc
		
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

CPZBetaPlatform:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2021E(pc,d0.w),d1
		jmp	off_2021E(pc,d1.w)
; ===========================================================================
off_2021E:	dc.w loc_20222-off_2021E; 0 
		dc.w loc_20282-off_2021E; 1
; ===========================================================================

loc_20222:				
		addq.b	#2,$24(a0)
		move.l	#Map_202FA,4(a0)
		move.w	#-$1BE8,2(a0)
		bsr.w	JmpTo9_Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),d0
		subi.w	#$10,d0
		move.w	d0,$3A(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		move.b	d0,$3E(a0)
		move.b	d0,$3F(a0)

loc_20282:				
		move.b	$3C(a0),d0
		beq.s	loc_202C0
		cmpi.b	#-$80,d0
		bne.s	loc_202D0
		move.b	$3D(a0),d1
		bne.s	loc_202A2
		subq.b	#1,$3E(a0)
		bpl.s	loc_202A2
		move.b	$3F(a0),$3E(a0)
		bra.s	loc_202D0
; ===========================================================================

loc_202A2:				
		addq.b	#1,$3D(a0)
		move.b	d1,d0
		bsr.w	JmpTo5_CalcSine
		addi.w	#8,d0
		asr.w	#6,d0
		subi.w	#$10,d0
		add.w	$3A(a0),d0
		move.w	d0,$C(a0)
		bra.s	loc_202E6
; ===========================================================================

loc_202C0:				
		move.w	($FFFFFE0E).w,d1
		andi.w	#$3FF,d1
		bne.s	loc_202D4
		move.b	#1,$3D(a0)

loc_202D0:				
		addq.b	#1,$3C(a0)

loc_202D4:				
		bsr.w	JmpTo5_CalcSine
		addi.w	#8,d1
		asr.w	#4,d1
		add.w	$3A(a0),d1
		move.w	d1,$C(a0)

loc_202E6:				
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#9,d3
		move.w	8(a0),d4
		bsr.w	DetectPlatform
		bra.w	JmpTo4_MarkObjGone
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_202FA:				
		dc.w word_202FC-Map_202FA; 0
word_202FC:	dc.w 1			
word_202FE:	dc.w $F80D,  0,	 0,$FFF0; 0
; ===========================================================================

    if Revision<2
		nop
    endc

    if ~RemoveJmpTos
JmpTo4_MarkObjGone ; JmpTo
		jmp	(MarkObjGone).l
JmpTo9_Adjust2PArtPointer ; JmpTo
		jmp	(Adjust2PArtPointer).l
JmpTo5_CalcSine ; JmpTo
		jmp	(CalcSine).l

		align 4
    endc
    
; ===========================================================================
; ----------------------------------------------------------------------------
; Object 12 - Emerald from Hidden Palace Zone (unused)
; ----------------------------------------------------------------------------

GiantEmerald:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2032A(pc,d0.w),d1
		jmp	off_2032A(pc,d1.w)
; ===========================================================================
off_2032A:	dc.w loc_2032E-off_2032A; 0 
		dc.w loc_20356-off_2032A; 1
; ===========================================================================

loc_2032E:				
		addq.b	#2,$24(a0)
		move.l	#Map_20382,4(a0)
		move.w	#$6392,2(a0)
		bsr.w	loc_203A4
		move.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#4,$18(a0)

loc_20356:				
		move.w	#$20,d1	; ' '
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2039E
		bra.w	loc_20398
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20382:				
		dc.w word_20384-Map_20382; 0
word_20384:	dc.w 2			
		dc.w $F00F,    0,    0,$FFE0; 0
		dc.w $F00F,  $10,    8,	   0; 4
; ===========================================================================
		nop	

loc_20398:				
		jmp	DisplaySprite
; ===========================================================================

loc_2039E:				
		jmp	DeleteObject
; ===========================================================================

loc_203A4:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

HPZWaterfall:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_203BA(pc,d0.w),d1
		jmp	off_203BA(pc,d1.w)
; ===========================================================================
off_203BA:	dc.w loc_203C0-off_203BA; 0 
		dc.w loc_20486-off_203BA; 1
		dc.w loc_20510-off_203BA; 2
; ===========================================================================

loc_203C0:				
		addq.b	#2,$24(a0)
		move.l	#Map_20528,4(a0)
		move.w	#-$1CEB,2(a0)
		bsr.w	loc_208D6
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#$12,$1A(a0)
		bsr.s	loc_20428
		move.b	#-$60,$16(a1)
		bset	#4,1(a1)
		move.l	a1,$38(a0)

loc_20400:
		move.w	$C(a0),$34(a0)
		move.w	$C(a0),$36(a0)
		cmpi.b	#$10,$28(a0)
		bcs.s	loc_2046C
		bsr.s	loc_20428
		move.l	a1,$3C(a0)
		move.w	$C(a0),$C(a1)
		addi.w	#$98,$C(a1)
		bra.s	loc_2046C
; ===========================================================================

loc_20428:				
		jsr	SingleObjLoad2
		bne.s	locret_2046A
		_move.b	#$13,0(a1)
		addq.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#Map_20528,4(a1)
		move.w	#-$1CEB,2(a1)
		bsr.w	loc_208D0
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$18(a1)

locret_2046A:				
		rts	
; ===========================================================================

loc_2046C:				
		moveq	#0,d1
		move.b	$28(a0),d1
		move.w	$34(a0),d0
		subi.w	#$78,d0	; 'x'
		lsl.w	#4,d1
		add.w	d1,d0
		move.w	d0,$C(a0)
		move.w	d0,$34(a0)

loc_20486:				
		movea.l	$38(a0),a1
		move.b	#$12,$1A(a0)
		move.w	$34(a0),d0
		move.w	(v_water_height_actual).w,d1
		cmp.w	d0,d1
		bcc.s	loc_2049E
		move.w	d1,d0

loc_2049E:				
		move.w	d0,$C(a0)
		sub.w	$36(a0),d0
		addi.w	#$80,d0	
		bmi.s	loc_204F0
		lsr.w	#4,d0
		move.w	d0,d1
		cmpi.w	#$F,d0
		bcs.s	loc_204B8
		moveq	#$F,d0

loc_204B8:				
		move.b	d0,$1A(a1)
		cmpi.b	#$10,$28(a0)
		bcs.s	loc_204D8
		movea.l	$3C(a0),a1
		subi.w	#$F,d1
		bcc.s	loc_204D0
		moveq	#0,d1

loc_204D0:				
		addi.w	#$13,d1
		move.b	d1,$1A(a1)

loc_204D8:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_208CA
		bra.w	loc_208C4
; ===========================================================================

loc_204F0:				
		moveq	#$13,d0
		move.b	d0,$1A(a0)
		move.b	d0,$1A(a1)
		move.w	8(a0),d0

loc_204FE:
		andi.w	#-$80,d0

loc_20502:
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_208CA
		rts	
; ===========================================================================

loc_20510:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_208CA
		bra.w	loc_208C4
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20528:				
		dc.w word_20562-Map_20528; 0
		dc.w word_2056C-Map_20528; 1
		dc.w word_2057E-Map_20528; 2
		dc.w word_20590-Map_20528; 3
		dc.w word_205AA-Map_20528; 4
		dc.w word_205C4-Map_20528; 5
		dc.w word_205E6-Map_20528; 6
		dc.w word_20608-Map_20528; 7
		dc.w word_20632-Map_20528; 8
		dc.w word_2065C-Map_20528; 9
		dc.w word_2068E-Map_20528; 10
		dc.w word_206C0-Map_20528; 11
		dc.w word_206FA-Map_20528; 12
		dc.w word_20734-Map_20528; 13
		dc.w word_20776-Map_20528; 14
		dc.w word_207B8-Map_20528; 15
		dc.w word_20802-Map_20528; 16
		dc.w word_20802-Map_20528; 17
		dc.w word_20802-Map_20528; 18
		dc.w word_20560-Map_20528; 19
		dc.w word_20814-Map_20528; 20
		dc.w word_2081E-Map_20528; 21
		dc.w word_20828-Map_20528; 22
		dc.w word_2083A-Map_20528; 23
		dc.w word_2084C-Map_20528; 24
		dc.w word_20866-Map_20528; 25
		dc.w word_20880-Map_20528; 26
		dc.w word_208A2-Map_20528; 27
word_20560:	dc.w 0			
word_20562:	dc.w 1			
		dc.w $800C,  $10,    8,$FFF0; 0
word_2056C:	dc.w 2			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880D,  $2D,  $16,$FFF0; 4
word_2057E:	dc.w 2			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
word_20590:	dc.w 3			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80D,  $2D,  $16,$FFF0; 8
word_205AA:	dc.w 3			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
word_205C4:	dc.w 4			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80D,  $2D,  $16,$FFF0; 12
word_205E6:	dc.w 4			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
word_20608:	dc.w 5			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80D,  $2D,  $16,$FFF0; 16
word_20632:	dc.w 5			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
word_2065C:	dc.w 6			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80D,  $2D,  $16,$FFF0; 20
word_2068E:	dc.w 6			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80F,    0,    0,$FFF0; 20
word_206C0:	dc.w 7			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80F,    0,    0,$FFF0; 20
		dc.w $280D,  $2D,  $16,$FFF0; 24
word_206FA:	dc.w 7			
word_206FC:	dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80F,    0,    0,$FFF0; 20
		dc.w $280F,    0,    0,$FFF0; 24
word_20734:	dc.w 8			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80F,    0,    0,$FFF0; 20
		dc.w $280F,    0,    0,$FFF0; 24
		dc.w $480D,  $2D,  $16,$FFF0; 28
word_20776:	dc.w 8			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80F,    0,    0,$FFF0; 20
		dc.w $280F,    0,    0,$FFF0; 24
		dc.w $480F,    0,    0,$FFF0; 28
word_207B8:	dc.w 9			
		dc.w $800C,  $10,    8,$FFF0; 0
		dc.w $880F,    0,    0,$FFF0; 4
		dc.w $A80F,    0,    0,$FFF0; 8
		dc.w $C80F,    0,    0,$FFF0; 12
		dc.w $E80F,    0,    0,$FFF0; 16
		dc.w  $80F,    0,    0,$FFF0; 20
		dc.w $280F,    0,    0,$FFF0; 24
		dc.w $480F,    0,    0,$FFF0; 28
		dc.w $680D,  $2D,  $16,$FFF0; 32
word_20802:	dc.w 2			
		dc.w $F00A,  $18,   $C,$FFE8; 0
		dc.w $F00A, $818, $80C,	   0; 4
word_20814:	dc.w 1			
		dc.w $E00D,  $2D,  $16,$FFF0; 0
word_2081E:	dc.w 1			
		dc.w $E00F,    0,    0,$FFF0; 0
word_20828:	dc.w 2			
		dc.w $E00F,    0,    0,$FFF0; 0
		dc.w	$D,  $2D,  $16,$FFF0; 4
word_2083A:	dc.w 2			
		dc.w $E00F,    0,    0,$FFF0; 0
		dc.w	$F,    0,    0,$FFF0; 4
word_2084C:	dc.w 3			
		dc.w $E00F,    0,    0,$FFF0; 0
		dc.w	$F,    0,    0,$FFF0; 4
		dc.w $200D,  $2D,  $16,$FFF0; 8
word_20866:	dc.w 3			
		dc.w $E00F,    0,    0,$FFF0; 0
		dc.w	$F,    0,    0,$FFF0; 4
		dc.w $200F,    0,    0,$FFF0; 8
word_20880:	dc.w 4			
		dc.w $E00F,    0,    0,$FFF0; 0
		dc.w	$F,    0,    0,$FFF0; 4
		dc.w $200F,    0,    0,$FFF0; 8
		dc.w $400D,  $2D,  $16,$FFF0; 12
word_208A2:	dc.w 4			
		dc.w $E00F,    0,    0,$FFF0; 0
		dc.w	$F,    0,    0,$FFF0; 4
		dc.w $200F,    0,    0,$FFF0; 8
		dc.w $400F,    0,    0,$FFF0; 12
; ===========================================================================

loc_208C4:				
		jmp	DisplaySprite
; ===========================================================================

loc_208CA:				
		jmp	DeleteObject
; ===========================================================================

loc_208D0:				
		jmp	sub_16D8A
; ===========================================================================

loc_208D6:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

WaterSurface:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_208EA(pc,d0.w),d1
		jmp	off_208EA(pc,d1.w)
; ===========================================================================
off_208EA:	dc.w loc_208F0-off_208EA; 0 
		dc.w loc_20930-off_208EA; 1
		dc.w loc_209C2-off_208EA; 2
; ===========================================================================

loc_208F0:				
		addq.b	#2,$24(a0)
		move.l	#Map_20A0E,4(a0)

loc_208FC:
		move.w	#-$7C00,2(a0)

loc_20902:
		bsr.w	loc_214BE
		move.b	#4,1(a0)
		move.b	#-$80,$19(a0)
		move.w	8(a0),$30(a0)
		cmpi.b	#$F,(v_zone).w
		bne.s	loc_20930
		addq.b	#2,$24(a0)
		move.l	#Map_20AFE,4(a0)
		bra.w	loc_209C2
; ===========================================================================

loc_20930:				
					
		move.w	(v_water_height_actual).w,d1
		move.w	d1,$C(a0)
		tst.b	$32(a0)
		bne.s	loc_20952
		btst	#7,(v_joypad_press_actual).w
		beq.s	loc_20962
		addq.b	#3,$1A(a0)
		move.b	#1,$32(a0)
		bra.s	loc_20962
; ===========================================================================

loc_20952:				
		tst.w	(f_pause).w
		bne.s	loc_20962
		move.b	#0,$32(a0)
		subq.b	#3,$1A(a0)

loc_20962:				
		lea	(byte_20982).l,a1
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	(a1,d1.w),$1A(a0)
		addq.b	#1,$1B(a0)
		andi.b	#$3F,$1B(a0) ; '?'
		bra.w	loc_214AC
; ===========================================================================
byte_20982:	dc.b   0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1; 0
					
		dc.b   1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2; 16
		dc.b   2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1; 32
		dc.b   1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0; 48
; ===========================================================================

loc_209C2:				
					
		move.w	(v_water_height_actual).w,d1
		move.w	d1,$C(a0)
		tst.b	$32(a0)
		bne.s	loc_209E4
		btst	#7,(v_joypad_press_actual).w
		beq.s	loc_209F4
		addq.b	#2,$1A(a0)
		move.b	#1,$32(a0)
		bra.s	loc_20A0A
; ===========================================================================

loc_209E4:				
		tst.w	(f_pause).w
		bne.s	loc_20A0A
		move.b	#0,$32(a0)
		subq.b	#2,$1A(a0)

loc_209F4:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_20A0A
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_20A0A:				
		bra.w	loc_214AC
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20A0E:				
		dc.w word_20A1A-Map_20A0E; 0
		dc.w word_20A34-Map_20A0E; 1
		dc.w word_20A4E-Map_20A0E; 2
		dc.w word_20A68-Map_20A0E; 3
		dc.w word_20A9A-Map_20A0E; 4
		dc.w word_20ACC-Map_20A0E; 5
word_20A1A:	dc.w 3			
		dc.w $F80D,    0,    0,$FFA0; 0
		dc.w $F80D,    0,    0,$FFE0; 4
		dc.w $F80D,    0,    0,	 $20; 8
word_20A34:	dc.w 3			
		dc.w $F80D,    8,    4,$FFA0; 0
		dc.w $F80D,    8,    4,$FFE0; 4
		dc.w $F80D,    8,    4,	 $20; 8
word_20A4E:	dc.w 3			
		dc.w $F80D,  $10,    8,$FFA0; 0
		dc.w $F80D,  $10,    8,$FFE0; 4
		dc.w $F80D,  $10,    8,	 $20; 8
word_20A68:	dc.w 6			
		dc.w $F80D,    0,    0,$FFA0; 0
		dc.w $F80D,    8,    4,$FFC0; 4
		dc.w $F80D,    0,    0,$FFE0; 8
		dc.w $F80D,    8,    4,	   0; 12
		dc.w $F80D,    0,    0,	 $20; 16
		dc.w $F80D,    8,    4,	 $40; 20
word_20A9A:	dc.w 6			
		dc.w $F80D,    8,    4,$FFA0; 0
		dc.w $F80D,  $10,    8,$FFC0; 4
		dc.w $F80D,    8,    4,$FFE0; 8
		dc.w $F80D,  $10,    8,	   0; 12
		dc.w $F80D,    8,    4,	 $20; 16
		dc.w $F80D,  $10,    8,	 $40; 20
word_20ACC:	dc.w 6			
		dc.w $F80D,  $10,    8,$FFA0; 0
		dc.w $F80D,    8,    4,$FFC0; 4
		dc.w $F80D,  $10,    8,$FFE0; 8
		dc.w $F80D,    8,    4,	   0; 12
		dc.w $F80D,  $10,    8,	 $20; 16
		dc.w $F80D,    8,    4,	 $40; 20
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20AFE:				
		dc.w word_20B06-Map_20AFE; 0
		dc.w word_20B20-Map_20AFE; 1
		dc.w word_20B3A-Map_20AFE; 2
		dc.w word_20B6C-Map_20AFE; 3
word_20B06:	dc.w 3			
		dc.w $FC0D,    0,    0,$FFA0; 0
		dc.w $FC0D,    0,    0,$FFE0; 4
		dc.w $FC0D,    0,    0,	 $20; 8
word_20B20:	dc.w 3			
		dc.w $FC0D,    8,    4,$FFA0; 0
		dc.w $FC0D,    8,    4,$FFE0; 4
		dc.w $FC0D,    8,    4,	 $20; 8
word_20B3A:	dc.w 6			
		dc.w $FC0D,    0,    0,$FFA0; 0
		dc.w $FC0D,    0,    0,$FFC0; 4
		dc.w $FC0D,    0,    0,$FFE0; 8
		dc.w $FC0D,    0,    0,	   0; 12
		dc.w $FC0D,    0,    0,	 $20; 16
		dc.w $FC0D,    0,    0,	 $40; 20
word_20B6C:	dc.w 6			
		dc.w $FC0D,    8,    4,$FFA0; 0
		dc.w $FC0D,    8,    4,$FFC0; 4
		dc.w $FC0D,    8,    4,$FFE0; 8
		dc.w $FC0D,    8,    4,	   0; 12
		dc.w $FC0D,    8,    4,	 $20; 16
		dc.w $FC0D,    8,    4,	 $40; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_20B9E:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_20BAC(pc,d0.w),d1
		jmp	off_20BAC(pc,d1.w)
; ===========================================================================
off_20BAC:	dc.w loc_20BB0-off_20BAC; 0 
		dc.w loc_20BEA-off_20BAC; 1
; ===========================================================================

loc_20BB0:				
		addq.b	#2,$24(a0)
		move.l	#Map_20C50,4(a0)
		move.w	#$239E,2(a0)
		bsr.w	loc_214BE
		move.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.w	8(a0),$30(a0)
		move.b	#0,$18(a0)
		move.b	#-$80,$16(a0)
		bset	#4,1(a0)

loc_20BEA:				
		tst.w	(f_two_player).w
		bne.s	loc_20C04
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_214B2

loc_20C04:				
		move.w	8(a0),d1
		move.w	d1,d2
		subi.w	#$40,d1	; '@'
		addi.w	#$40,d2	; '@'
		move.b	$28(a0),d3
		move.b	#0,$1A(a0)
		move.w	($FFFFB008).w,d0
		cmp.w	d1,d0
		bcs.s	loc_20C36
		cmp.w	d2,d0
		bcc.s	loc_20C36
		move.b	#1,$1A(a0)
		add.b	d3,$1A(a0)
		bra.w	loc_214AC
; ===========================================================================

loc_20C36:				
		move.w	($FFFFB048).w,d0
		cmp.w	d1,d0
		bcs.s	loc_20C48
		cmp.w	d2,d0
		bcc.s	loc_20C48
		move.b	#1,$1A(a0)

loc_20C48:				
		add.b	d3,$1A(a0)
		bra.w	loc_214AC
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20C50:				
		dc.w word_20C60-Map_20C50; 0
		dc.w word_20C72-Map_20C50; 1
		dc.w word_20D04-Map_20C50; 2
		dc.w word_20D06-Map_20C50; 3
		dc.w word_20D04-Map_20C50; 4
		dc.w word_20D28-Map_20C50; 5
		dc.w word_20C60-Map_20C50; 6
		dc.w word_20D7A-Map_20C50; 7
word_20C60:	dc.w 2			
		dc.w $800D,    0,    0,$FFE0; 0
		dc.w $800D,    0,    0,	   0; 4
word_20C72:	dc.w   $12		; 0 
		dc.w $800D,    0,    0,$FFE0; 0
		dc.w $800D,    0,    0,	   0; 4
		dc.w $800F,    8,    4,$FFE0; 8
		dc.w $800F,    8,    4,	   0; 12
		dc.w $A00F,    8,    4,$FFE0; 16
		dc.w $A00F,    8,    4,	   0; 20
		dc.w $C00F,    8,    4,$FFE0; 24
		dc.w $C00F,    8,    4,	   0; 28
		dc.w $E00F,    8,    4,$FFE0; 32
		dc.w $E00F,    8,    4,	   0; 36
		dc.w	$F,    8,    4,$FFE0; 40
		dc.w	$F,    8,    4,	   0; 44
		dc.w $200F,    8,    4,$FFE0; 48
		dc.w $200F,    8,    4,	   0; 52
		dc.w $400F,    8,    4,$FFE0; 56
		dc.w $400F,    8,    4,	   0; 60
		dc.w $600F,    8,    4,$FFE0; 64
		dc.w $600F,    8,    4,	   0; 68
word_20D04:	dc.w 0			
word_20D06:	dc.w 4			
		dc.w $E00F,    8,    4,$FFE0; 0
		dc.w $E00F,    8,    4,	   0; 4
		dc.w	$F,    8,    4,$FFE0; 8
		dc.w	$F,    8,    4,	   0; 12
word_20D28:	dc.w $A			
		dc.w $C00F,    8,    4,$FFE0; 0
		dc.w $C00F,    8,    4,	   0; 4
		dc.w $E00F,    8,    4,$FFE0; 8
		dc.w $E00F,    8,    4,	   0; 12
		dc.w	$F,    8,    4,$FFE0; 16
		dc.w	$F,    8,    4,	   0; 20
		dc.w $200F,    8,    4,$FFE0; 24
		dc.w $200F,    8,    4,	   0; 28
		dc.w $400F,    8,    4,$FFE0; 32
		dc.w $400F,    8,    4,	   0; 36
word_20D7A:	dc.w $E			
		dc.w $800D,    0,    0,$FFE0; 0
		dc.w $800D,    0,    0,	   0; 4
		dc.w $800F,    8,    4,$FFE0; 8
		dc.w $800F,    8,    4,	   0; 12
		dc.w $A00F,    8,    4,$FFE0; 16
		dc.w $A00F,    8,    4,	   0; 20
		dc.w $C00F,    8,    4,$FFE0; 24
		dc.w $C00F,    8,    4,	   0; 28
		dc.w $E00F,    8,    4,$FFE0; 32
		dc.w $E00F,    8,    4,	   0; 36
		dc.w	$F,    8,    4,$FFE0; 40
		dc.w	$F,    8,    4,	   0; 44
		dc.w $200F,    8,    4,$FFE0; 48
		dc.w $200F,    8,    4,	   0; 52
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_20DEC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_20DFA(pc,d0.w),d1
		jmp	off_20DFA(pc,d1.w)
; ===========================================================================
off_20DFA:	dc.w loc_20E02-off_20DFA; 0 
		dc.w loc_20E46-off_20DFA; 1
byte_20DFE:	dc.b $96		; 0
		dc.b $94		; 1
		dc.b $95		; 2
		dc.b   0		; 3
; ===========================================================================

loc_20E02:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	byte_20DFE(pc,d0.w),$20(a0)
		move.l	#Map_20E6C,4(a0)
		tst.w	(v_debug_active).w
		beq.s	loc_20E28
		move.l	#Map_20E74,4(a0)

loc_20E28:				
		move.w	#-$7980,2(a0)
		move.b	#-$7C,1(a0)
		move.b	#-$80,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)

loc_20E46:				
		tst.w	(f_two_player).w
		bne.s	loc_20E60
		move.w	8(a0),d0

loc_20E50:
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_214B2

loc_20E60:				
		tst.w	(v_debug_active).w
		beq.s	locret_20E6A
		bsr.w	loc_214AC

locret_20E6A:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20E6C:				
		dc.w word_20E72-Map_20E6C; 0
		dc.w word_20E72-Map_20E6C; 1
		dc.w word_20E72-Map_20E6C; 2
word_20E72:	dc.w 0			
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20E74:				
		dc.w word_20E7A-Map_20E74; 0
		dc.w word_20E9C-Map_20E74; 1
		dc.w word_20EBE-Map_20E74; 2
word_20E7A:	dc.w 4			
		dc.w $E005,  $34,  $1A,$FFE0; 0
		dc.w $E005,  $34,  $1A,	 $10; 4
		dc.w $1005,  $34,  $1A,$FFE0; 8
		dc.w $1005,  $34,  $1A,	 $10; 12
word_20E9C:	dc.w 4			
		dc.w $E005,  $34,  $1A,$FFC0; 0
		dc.w $E005,  $34,  $1A,	 $30; 4
		dc.w $1005,  $34,  $1A,$FFC0; 8
		dc.w $1005,  $34,  $1A,	 $30; 12
word_20EBE:	dc.w 4			
		dc.w $E005,  $34,  $1A,$FF80; 0
		dc.w $E005,  $34,  $1A,	 $70; 4
		dc.w $1005,  $34,  $1A,$FF80; 8
		dc.w $1005,  $34,  $1A,	 $70; 12
; ===========================================================================

Sprite_20EE0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_20EEE(pc,d0.w),d1
		jmp	off_20EEE(pc,d1.w)
; ===========================================================================
off_20EEE:	dc.w loc_20EF2-off_20EEE; 0 
		dc.w loc_20F2E-off_20EEE; 1
; ===========================================================================

loc_20EF2:				
		addq.b	#2,$24(a0)
		move.l	#Map_20F66,4(a0)
		move.w	#-$7980,2(a0)
		bsr.w	loc_214BE
		ori.b	#4,1(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d0	
		addi.w	#$10,d0
		lsr.w	#1,d0
		move.b	d0,$19(a0)
		andi.w	#$F,d1
		addq.w	#1,d1
		lsl.w	#3,d1
		move.b	d1,$16(a0)

loc_20F2E:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	loc_19778
		tst.w	(f_two_player).w
		bne.s	locret_20F64
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_214B2

locret_20F64:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_20F66:				
		dc.w word_20F6C-Map_20F66; 0
		dc.w word_20F8E-Map_20F66; 1
		dc.w word_20FB0-Map_20F66; 2
word_20F6C:	dc.w 4			
		dc.w $F005,  $1C,   $E,$FFF0; 0
		dc.w $F005,  $1C,   $E,	   0; 4
		dc.w	 5,  $1C,   $E,$FFF0; 8
		dc.w	 5,  $1C,   $E,	   0; 12
word_20F8E:	dc.w 4			
		dc.w $E005,  $1C,   $E,$FFC0; 0
		dc.w $E005,  $1C,   $E,	 $30; 4
		dc.w $1005,  $1C,   $E,$FFC0; 8
		dc.w $1005,  $1C,   $E,	 $30; 12
word_20FB0:	dc.w 4			
		dc.w $E005,  $1C,   $E,$FF80; 0
		dc.w $E005,  $1C,   $E,	 $70; 4
		dc.w $1005,  $1C,   $E,$FF80; 8
		dc.w $1005,  $1C,   $E,	 $70; 12
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Big pylon in foreground of CPZ
; ----------------------------------------------------------------------------

Sprite_20FD2:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_20FE0(pc,d0.w),d1
		jmp	off_20FE0(pc,d1.w)
; ===========================================================================
off_20FE0:	dc.w loc_20FE4-off_20FE0; 0 
		dc.w loc_21006-off_20FE0; 1
; ===========================================================================

loc_20FE4:				
		addq.b	#2,$24(a0)
		move.l	#Map_2103C,4(a0)
		move.w	#-$3C8D,2(a0)
		bsr.w	loc_214BE
		move.b	#$10,$19(a0)
		move.b	#7,$18(a0)

loc_21006:				
		move.w	(v_camera_x_pos).w,d1

loc_2100A:
		andi.w	#$3FF,d1

loc_2100E:
		cmpi.w	#$2E0,d1
		bcc.s	locret_2103A
		asr.w	#1,d1
		move.w	d1,d0
		asr.w	#1,d1
		add.w	d1,d0
		neg.w	d0
		move.w	d0,8(a0)
		move.w	(v_camera_y_pos).w,d1
		asr.w	#1,d1
		andi.w	#$3F,d1	; '?'
		neg.w	d1
		addi.w	#$100,d1
		move.w	d1,$A(a0)
		bra.w	loc_214AC
; ===========================================================================

locret_2103A:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_2103C:				
		dc.w word_2103E-Map_2103C
word_2103E:	dc.w 9			
		dc.w $800F,$A000,$A000,$FFF0; 0
		dc.w $A00F,$B000,$B000,$FFF0; 4
		dc.w $C00F,$A000,$A000,$FFF0; 8
		dc.w $E00F,$B000,$B000,$FFF0; 12
		dc.w	$F,$A000,$A000,$FFF0; 16
		dc.w $200F,$B000,$B000,$FFF0; 20
		dc.w $400F,$A000,$A000,$FFF0; 24
		dc.w $600F,$B000,$B000,$FFF0; 28
		dc.w $7F0F,$A000,$A000,$FFF0; 32
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; An explosion,	giving off an animal and 100 points
; ----------------------------------------------------------------------------

ExplosionItem:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_21096(pc,d0.w),d1

loc_21092:
		jmp	off_21096(pc,d1.w)
; ===========================================================================
off_21096:	dc.w loc_2109C-off_21096; 0 
		dc.w loc_210BE-off_21096; 1
		dc.w loc_21102-off_21096; 2
; ===========================================================================

loc_2109C:				
		addq.b	#2,$24(a0)
		bsr.w	loc_214B8
		bne.s	loc_210BE
		_move.b	#$28,0(a1) ; '('
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$3E(a0),$3E(a1)

loc_210BE:				
					
		addq.b	#2,$24(a0)
		move.l	#Map_21120,4(a0)
		move.w	#$5A4,2(a0)
		bsr.w	loc_214BE
		move.b	#4,1(a0)
		move.b	#1,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#3,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#$C1,d0	
		jsr	(PlaySound).l

loc_21102:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2111C
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		beq.w	loc_214B2

loc_2111C:				
		bra.w	loc_214AC
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21120:				
		dc.w word_2112A-Map_21120; 0
		dc.w word_21134-Map_21120; 1
		dc.w word_2113E-Map_21120; 2
		dc.w word_21148-Map_21120; 3
		dc.w word_21152-Map_21120; 4
word_2112A:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_21134:	dc.w 1			
		dc.w $F00F,$2004,$2002,$FFF0; 0
word_2113E:	dc.w 1			
		dc.w $F00F,$2014,$200A,$FFF0; 0
word_21148:	dc.w 1			
		dc.w $F00F,$2024,$2012,$FFF0; 0
word_21152:	dc.w 1			
		dc.w $F00F,$2034,$201A,$FFF0; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2115C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_21170(pc,d0.w),d1
		jsr	off_21170(pc,d1.w)
		jmp	MarkObjGone3
; ===========================================================================
off_21170:	dc.w loc_21176-off_21170; 0 
		dc.w loc_21224-off_21170; 1
		dc.w loc_212F6-off_21170; 2
; ===========================================================================

loc_21176:				
		addq.b	#2,$24(a0)
		move.l	#Map_1FFB8,4(a0)
		move.w	#$6BC,2(a0)
		bsr.w	loc_214BE
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		btst	#2,d0
		beq.s	loc_211F0
		addq.b	#2,$24(a0)
		andi.w	#7,d0
		move.b	d0,$1A(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_211E8(pc,d0.w),$32(a0)
		move.w	$C(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	$C(a1),d1
		bcc.s	loc_211D4
		move.b	#1,$34(a0)

loc_211D4:				
		lea	($FFFFB040).w,a1
		cmp.w	$C(a1),d1
		bcc.s	loc_211E4
		move.b	#1,$35(a0)

loc_211E4:				
		bra.w	loc_212F6
; ===========================================================================
word_211E8:	dc.w   $20		; 0
		dc.w   $40		; 1
		dc.w   $80		; 2
		dc.w  $100		; 3
; ===========================================================================

loc_211F0:				
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	word_211E8(pc,d0.w),$32(a0)
		move.w	8(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	8(a1),d1
		bcc.s	loc_21214

loc_2120E:
		move.b	#1,$34(a0)

loc_21214:				
		lea	($FFFFB040).w,a1
		cmp.w	8(a1),d1
		bcc.s	loc_21224

loc_2121E:
		move.b	#1,$35(a0)

loc_21224:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_21284
		move.w	8(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_21244
		lea	($FFFFB040).w,a1
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.s	locret_21284

loc_21244:				
		tst.b	(a2)+
		bne.s	loc_21286
		cmp.w	8(a1),d1
		bhi.s	locret_21284
		move.b	#1,-1(a2)
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21284
		cmp.w	d3,d4
		bcc.s	locret_21284
		btst	#0,1(a0)
		bne.s	loc_2127E
		move.b	#1,$39(a1)
		bra.s	loc_212C4
; ===========================================================================

loc_2127E:				
		move.b	#0,$39(a1)

locret_21284:				
		rts	
; ===========================================================================

loc_21286:				
		cmp.w	8(a1),d1
		bls.s	locret_21284
		move.b	#0,-1(a2)
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21284
		cmp.w	d3,d4
		bcc.s	locret_21284
		btst	#0,1(a0)
		beq.s	loc_212BC
		move.b	#1,$39(a1)
		bra.s	loc_212C4
; ===========================================================================

loc_212BC:				
		move.b	#0,$39(a1)
		rts	
; ===========================================================================

loc_212C4:				
		btst	#2,$22(a1)
		beq.s	loc_212CE
		rts	
; ===========================================================================

loc_212CE:				
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		addq.w	#5,$C(a1)
		move.w	#$BE,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================

loc_212F6:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_21350
		move.w	$C(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_2130E
		lea	($FFFFB040).w,a1

loc_2130E:				
		tst.b	(a2)+
		bne.s	loc_21352
		cmp.w	$C(a1),d1
		bhi.s	locret_21350
		move.b	#1,-1(a2)
		move.w	8(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	8(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21350
		cmp.w	d3,d4
		bcc.s	locret_21350
		btst	#0,1(a0)
		bne.s	loc_2134A
		move.b	#1,$39(a1)
		bra.w	loc_212C4
; ===========================================================================

loc_2134A:				
		move.b	#0,$39(a1)

locret_21350:				
		rts	
; ===========================================================================

loc_21352:				
		cmp.w	$C(a1),d1
		bls.s	locret_21350
		move.b	#0,-1(a2)
		move.w	8(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	8(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_21350
		cmp.w	d3,d4
		bcc.s	locret_21350
		btst	#0,1(a0)
		beq.s	loc_2138A
		move.b	#1,$39(a1)
		bra.w	loc_212C4
; ===========================================================================

loc_2138A:				
		move.b	#0,$39(a1)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_21392:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_213A6(pc,d0.w),d1
		jsr	off_213A6(pc,d1.w)
		jmp	MarkObjGone3
; ===========================================================================
off_213A6:	dc.w loc_213B2-off_213A6; 0 
		dc.w loc_21412-off_213A6; 1
word_213AA:	dc.w   $20		; 0
		dc.w   $40		; 1
		dc.w   $80		; 2
		dc.w  $100		; 3
; ===========================================================================

loc_213B2:				
		addq.b	#2,$24(a0)
		move.l	#Map_1FFB8,4(a0)
		move.w	#$6BC,2(a0)

loc_213C4:
		bsr.w	loc_214BE
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	word_213AA(pc,d0.w),$32(a0)
		move.w	8(a0),d1
		lea	($FFFFB000).w,a1
		cmp.w	8(a1),d1
		bcc.s	loc_21402
		move.b	#1,$34(a0)

loc_21402:				
		lea	($FFFFB040).w,a1
		cmp.w	8(a1),d1
		bcc.s	loc_21412
		move.b	#1,$35(a0)

loc_21412:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_2146A
		move.w	8(a0),d1
		lea	$34(a0),a2
		lea	($FFFFB000).w,a1
		bsr.s	loc_2142A
		lea	($FFFFB040).w,a1

loc_2142A:				
		tst.b	(a2)+
		bne.s	loc_2146C
		cmp.w	8(a1),d1
		bhi.s	locret_2146A
		move.b	#1,-1(a2)
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_2146A
		cmp.w	d3,d4
		bcc.s	locret_2146A
		btst	#0,1(a0)
		bne.s	loc_21464
		move.b	#1,(f_wfz_scz_fire_toggle).w
		rts	
; ===========================================================================

loc_21464:				
		move.b	#0,(f_wfz_scz_fire_toggle).w

locret_2146A:				
		rts	
; ===========================================================================

loc_2146C:				
		cmp.w	8(a1),d1
		bls.s	locret_2146A
		move.b	#0,-1(a2)
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.s	locret_2146A
		cmp.w	d3,d4
		bcc.s	locret_2146A
		btst	#0,1(a0)
		beq.s	loc_214A2
		move.b	#1,(f_wfz_scz_fire_toggle).w
		rts	
; ===========================================================================

loc_214A2:				
		move.b	#0,(f_wfz_scz_fire_toggle).w
		rts	
; ===========================================================================
		nop	

loc_214AC:				
		jmp	DisplaySprite
; ===========================================================================

loc_214B2:				
		jmp	DeleteObject
; ===========================================================================

loc_214B8:				
		jmp	SingleObjLoad
; ===========================================================================

loc_214BE:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Rotating cylinder from MTZ
; ----------------------------------------------------------------------------

Spiral:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_214F4(pc,d0.w),d1
		jsr	off_214F4(pc,d1.w)
		tst.w	(f_two_player).w
		beq.s	loc_214DA
		rts	
; ===========================================================================

loc_214DA:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_214EE
		rts	
; ===========================================================================

loc_214EE:				
		jmp	DeleteObject
; ===========================================================================
off_214F4:	dc.w loc_214FA-off_214F4; 0 
		dc.w loc_21512-off_214F4; 1
		dc.w loc_21808-off_214F4; 2
; ===========================================================================

loc_214FA:				
		addq.b	#2,$24(a0)
		move.b	#-$30,$19(a0)
		tst.b	$28(a0)
		bpl.s	loc_21512
		addq.b	#2,$24(a0)
		bra.w	loc_21808
; ===========================================================================

loc_21512:				
					
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_21520
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_21520:				
		btst	d6,$22(a0)
		bne.w	loc_215C0
		btst	#1,$22(a1)
		bne.w	locret_215BE
		btst	#3,$22(a1)
		bne.s	loc_21580
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.w	$10(a1)
		bmi.s	loc_21556
		cmpi.w	#-$C0,d0
		bgt.s	locret_215BE
		cmpi.w	#-$D0,d0
		blt.s	locret_215BE
		bra.s	loc_21562
; ===========================================================================

loc_21556:				
		cmpi.w	#$C0,d0	
		blt.s	locret_215BE
		cmpi.w	#$D0,d0	
		bgt.s	locret_215BE

loc_21562:				
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1	; '0'
		bcc.s	locret_215BE
		tst.b	$2A(a1)
		bne.s	locret_215BE
		bsr.w	loc_19E14
		rts	
; ===========================================================================

loc_21580:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.w	$10(a1)
		bmi.s	loc_2159C
		cmpi.w	#-$B0,d0
		bgt.s	locret_215BE
		cmpi.w	#-$C0,d0
		blt.s	locret_215BE
		bra.s	loc_215A8
; ===========================================================================

loc_2159C:				
		cmpi.w	#$B0,d0	
		blt.s	locret_215BE
		cmpi.w	#$C0,d0	
		bgt.s	locret_215BE

loc_215A8:				
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1	; '0'
		bcc.s	locret_215BE
		bsr.w	loc_19E14

locret_215BE:				
		rts	
; ===========================================================================

loc_215C0:				
		move.w	$14(a1),d0
		bpl.s	loc_215C8
		neg.w	d0

loc_215C8:				
		cmpi.w	#$600,d0
		bcs.s	loc_215EA
		btst	#1,$22(a1)
		bne.s	loc_215EA
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$D0,d0	
		bmi.s	loc_215EA
		cmpi.w	#$1A0,d0
		bcs.s	loc_21602

loc_215EA:				
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		rts	
; ===========================================================================

loc_21602:				
		btst	#3,$22(a1)
		beq.s	locret_215BE
		move.b	byte_21668(pc,d0.w),d1
		ext.w	d1
		move.w	$C(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$16(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$C(a1)
		lsr.w	#3,d0
		andi.w	#$3F,d0	; '?'
		move.b	byte_21634(pc,d0.w),$27(a1)
		rts	
; ===========================================================================
byte_21634:	dc.b	 0,    0,    1,	   1; 0
		dc.b   $16,  $16,  $16,	 $16; 4
		dc.b   $2C,  $2C,  $2C,	 $2C; 8
		dc.b   $42,  $42,  $42,	 $42; 12
		dc.b   $58,  $58,  $58,	 $58; 16
		dc.b   $6E,  $6E,  $6E,	 $6E; 20
		dc.b   $84,  $84,  $84,	 $84; 24
		dc.b   $9A,  $9A,  $9A,	 $9A; 28
		dc.b   $B0,  $B0,  $B0,	 $B0; 32
		dc.b   $C6,  $C6,  $C6,	 $C6; 36
		dc.b   $DC,  $DC,  $DC,	 $DC; 40
		dc.b   $F2,  $F2,  $F2,	 $F2; 44
		dc.b	 1,    1,    0,	   0; 48
byte_21668:	dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20; 0
		dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1F,$1F; 16
		dc.b $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1E,$1E,$1E; 32
		dc.b $1E,$1E,$1E,$1E,$1E,$1E,$1D,$1D,$1D,$1D,$1D,$1C,$1C,$1C,$1C,$1B; 48
		dc.b $1B,$1B,$1B,$1A,$1A,$1A,$19,$19,$19,$18,$18,$18,$17,$17,$16,$16; 64
		dc.b $15,$15,$14,$14,$13,$12,$12,$11,$10,$10, $F, $E, $E, $D, $C, $C; 80
		dc.b  $B, $A, $A,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1; 96
		dc.b   0,$FF,$FE,$FE,$FD,$FC,$FC,$FB,$FA,$F9,$F9,$F8,$F7,$F7,$F6,$F6; 112
		dc.b $F5,$F5,$F4,$F4,$F3,$F2,$F2,$F1,$F1,$F0,$F0,$EF,$EF,$EE,$EE,$ED; 128
		dc.b $ED,$ED,$EC,$EB,$EB,$EA,$EA,$E9,$E9,$E8,$E8,$E7,$E7,$E6,$E6,$E5; 144
		dc.b $E5,$E4,$E4,$E4,$E3,$E3,$E2,$E2,$E2,$E1,$E1,$E1,$E0,$E0,$E0,$DF; 160
		dc.b $DF,$DF,$DF,$DE,$DE,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC; 176
		dc.b $DC,$DC,$DC,$DC,$DC,$DC,$DC,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB; 192
		dc.b $DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB,$DB; 208
		dc.b $DB,$DB,$DB,$DB,$DC,$DC,$DC,$DC,$DC,$DC,$DC,$DD,$DD,$DD,$DD,$DD; 224
		dc.b $DD,$DD,$DD,$DE,$DE,$DE,$DF,$DF,$DF,$DF,$E0,$E0,$E0,$E1,$E1,$E1; 240
		dc.b $E2,$E2,$E2,$E3,$E3,$E4,$E4,$E4,$E5,$E5,$E6,$E6,$E7,$E7,$E8,$E8; 256
		dc.b $E9,$E9,$EA,$EA,$EB,$EB,$EC,$ED,$ED,$EE,$EE,$EF,$F0,$F0,$F1,$F2; 272
		dc.b $F2,$F3,$F4,$F5,$F5,$F6,$F7,$F8,$F9,$F9,$FA,$FB,$FC,$FD,$FE,$FF; 288
		dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, $A, $A, $B, $C, $D; 304
		dc.b  $D, $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$13,$13,$14,$14,$15; 320
		dc.b $15,$16,$16,$17,$17,$18,$18,$18,$19,$19,$19,$19,$1A,$1A,$1A,$1A; 336
		dc.b $1B,$1B,$1B,$1B,$1C,$1C,$1C,$1C,$1C,$1C,$1D,$1D,$1D,$1D,$1D,$1D; 352
		dc.b $1D,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F; 368
		dc.b $1F,$1F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20; 384
		dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20; 400
; ===========================================================================

loc_21808:				
					
		lea	($FFFFB000).w,a1
		lea	(v_mtz_cylinder_angle_sonic).w,a2
		moveq	#3,d6
		bsr.s	loc_2181E
		lea	($FFFFB040).w,a1
		lea	(v_mtz_cylinder_angle_tails).w,a2
		addq.b	#1,d6

loc_2181E:				
		btst	d6,$22(a0)
		bne.w	loc_2188C
		move.w	8(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#-$C0,d0
		blt.s	locret_2188A
		cmpi.w	#$C0,d0	
		bge.s	locret_2188A
		move.w	$C(a0),d0
		addi.w	#$3C,d0	; '<'
		move.w	$C(a1),d2
		move.b	$16(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	locret_2188A
		cmpi.w	#-$10,d0
		bcs.s	locret_2188A
		cmpi.b	#6,$24(a1)
		bcc.s	locret_2188A
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,$C(a1)
		move.b	#1,$29(a1)
		bsr.w	loc_19E14
		move.w	#1,$1C(a1)
		move.b	#0,(a2)
		tst.w	$14(a1)
		bne.s	locret_2188A
		move.w	#1,$14(a1)

locret_2188A:				
		rts	
; ===========================================================================

loc_2188C:				
		btst	#1,$22(a1)
		bne.s	loc_218C6
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$C0,d0	
		bmi.s	loc_218A8
		cmpi.w	#$180,d0
		bcs.s	loc_218E0

loc_218A8:				
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		bset	#1,$22(a1)
		rts	
; ===========================================================================

loc_218C6:				
		move.b	(a2),d0
		addi.b	#$20,d0	; ' '
		cmpi.b	#$40,d0	; '@'
		bcc.s	loc_218D8
		asr	$12(a1)
		bra.s	loc_218A8
; ===========================================================================

loc_218D8:				
		move.w	#0,$12(a1)
		bra.s	loc_218A8
; ===========================================================================

loc_218E0:				
		btst	#3,$22(a1)
		beq.s	locret_2188A
		move.b	(a2),d0
		bsr.w	loc_21920
		muls.w	#$2800,d1
		swap	d1
		move.w	$C(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$16(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$C(a1)
		move.b	(a2),d0
		move.b	d0,$27(a1)
		addq.b	#4,(a2)
		tst.w	$14(a1)
		bne.s	locret_2191E
		move.w	#1,$14(a1)

locret_2191E:				
		rts	
; ===========================================================================

loc_21920:				
		jmp	(CalcSine).l
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; See-saw from HTZ
; ----------------------------------------------------------------------------

Seesaw:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2193E(pc,d0.w),d1
		jsr	off_2193E(pc,d1.w)
		move.w	$30(a0),d0
		bra.w	loc_21DA6
; ===========================================================================
off_2193E:	dc.w loc_2194A-off_2193E; 0 
		dc.w loc_219B8-off_2193E; 1
		dc.w locret_21A74-off_2193E; 2
		dc.w loc_21AA2-off_2193E; 3
		dc.w loc_21AFC-off_2193E; 4
		dc.w loc_21B94-off_2193E; 5
; ===========================================================================

loc_2194A:				
		addq.b	#2,$24(a0)
		move.l	#Map_21CF0,4(a0)
		move.w	#$3C6,2(a0)
		bsr.w	loc_21D9A
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#$30,$19(a0) ; '0'
		move.w	8(a0),$30(a0)
		tst.b	$28(a0)
		bne.s	loc_219A4
		bsr.w	loc_21D94
		bne.s	loc_219A4
		_move.b	#$14,0(a1)
		addq.b	#6,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	$22(a0),$22(a1)
		move.l	a0,$3C(a1)

loc_219A4:				
		btst	#0,$22(a0)
		beq.s	loc_219B2
		move.b	#2,$1A(a0)

loc_219B2:				
		move.b	$1A(a0),$3A(a0)

loc_219B8:				
		move.b	$3A(a0),d1
		btst	#3,$22(a0)
		beq.s	loc_21A12
		moveq	#2,d1
		lea	($FFFFB000).w,a1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_219D8
		neg.w	d0
		moveq	#0,d1

loc_219D8:				
		cmpi.w	#8,d0
		bcc.s	loc_219E0
		moveq	#1,d1

loc_219E0:				
		btst	#4,$22(a0)
		beq.s	loc_21A4A
		moveq	#2,d2
		lea	($FFFFB040).w,a1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_219FC
		neg.w	d0
		moveq	#0,d2

loc_219FC:				
		cmpi.w	#8,d0
		bcc.s	loc_21A04
		moveq	#1,d2

loc_21A04:				
		add.w	d2,d1
		cmpi.w	#3,d1
		bne.s	loc_21A0E
		addq.w	#1,d1

loc_21A0E:				
		lsr.w	#1,d1
		bra.s	loc_21A4A
; ===========================================================================

loc_21A12:				
		btst	#4,$22(a0)
		beq.s	loc_21A38
		moveq	#2,d1
		lea	($FFFFB040).w,a1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_21A2E
		neg.w	d0
		moveq	#0,d1

loc_21A2E:				
		cmpi.w	#8,d0
		bcc.s	loc_21A4A
		moveq	#1,d1
		bra.s	loc_21A4A
; ===========================================================================

loc_21A38:				
		move.w	($FFFFB012).w,d0
		move.w	($FFFFB052).w,d2
		cmp.w	d0,d2
		blt.s	loc_21A46
		move.w	d2,d0

loc_21A46:				
		move.w	d0,$38(a0)

loc_21A4A:				
		bsr.w	loc_21A76
		lea	(byte_21C8E).l,a2
		btst	#0,$1A(a0)
		beq.s	loc_21A62
		lea	(byte_21CBF).l,a2

loc_21A62:				
		move.w	8(a0),-(sp)
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		bra.w	loc_19C8A
; ===========================================================================

locret_21A74:				
		rts	
; ===========================================================================

loc_21A76:				
		move.b	$1A(a0),d0
		cmp.b	d1,d0
		beq.s	locret_21AA0
		bcc.s	loc_21A82
		addq.b	#2,d0

loc_21A82:				
		subq.b	#1,d0
		move.b	d0,$1A(a0)
		move.b	d1,$3A(a0)
		bclr	#0,1(a0)
		btst	#1,$1A(a0)
		beq.s	locret_21AA0
		bset	#0,1(a0)

locret_21AA0:				
		rts	
; ===========================================================================

loc_21AA2:				
		addq.b	#2,$24(a0)
		move.l	#Map_21D7C,4(a0)
		move.w	#$3DE,2(a0)
		bsr.w	loc_21D9A
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#-$75,$20(a0)
		move.b	#$C,$19(a0)
		move.w	8(a0),$30(a0)
		addi.w	#$28,8(a0) ; '('
		addi.w	#$10,$C(a0)
		move.w	$C(a0),$34(a0)
		btst	#0,$22(a0)
		beq.s	loc_21AFC
		subi.w	#$50,8(a0) ; 'P'
		move.b	#2,$3A(a0)

loc_21AFC:				
					
		bsr.w	loc_21C66
		movea.l	$3C(a0),a1
		moveq	#0,d0
		move.b	$3A(a0),d0
		sub.b	$3A(a1),d0
		beq.s	loc_21B56
		bcc.s	loc_21B14
		neg.b	d0

loc_21B14:				
		move.w	#-$818,d1
		move.w	#-$114,d2
		cmpi.b	#1,d0
		beq.s	loc_21B3A
		move.w	#-$AF0,d1
		move.w	#-$CC,d2
		cmpi.w	#$A00,$38(a1)
		blt.s	loc_21B3A
		move.w	#-$E00,d1
		move.w	#-$A0,d2

loc_21B3A:				
		move.w	d1,$12(a0)
		move.w	d2,$10(a0)
		move.w	8(a0),d0
		sub.w	$30(a0),d0
		bcc.s	loc_21B50
		neg.w	$10(a0)

loc_21B50:				
		addq.b	#2,$24(a0)
		bra.s	loc_21B94
; ===========================================================================

loc_21B56:				
		lea	(word_21C5C).l,a2
		moveq	#0,d0
		move.b	$1A(a1),d0
		move.w	#$28,d2	; '('
		move.w	8(a0),d1
		sub.w	$30(a0),d1
		bcc.s	loc_21B74
		neg.w	d2
		addq.w	#2,d0

loc_21B74:				
		add.w	d0,d0
		move.w	$34(a0),d1
		add.w	(a2,d0.w),d1
		move.w	d1,$C(a0)
		add.w	$30(a0),d2
		move.w	d2,8(a0)
		clr.w	$E(a0)
		clr.w	$A(a0)
		rts	
; ===========================================================================

loc_21B94:				
					
		bsr.w	loc_21C66
		tst.w	$12(a0)
		bpl.s	loc_21BB6
		bsr.w	loc_21DA0
		move.w	$34(a0),d0
		subi.w	#$2F,d0	; '/'
		cmp.w	$C(a0),d0
		bgt.s	locret_21BB4
		bsr.w	loc_21DA0

locret_21BB4:				
		rts	
; ===========================================================================

loc_21BB6:				
		bsr.w	loc_21DA0
		movea.l	$3C(a0),a1
		lea	(word_21C5C).l,a2
		moveq	#0,d0
		move.b	$1A(a1),d0
		move.w	8(a0),d1
		sub.w	$30(a0),d1
		bcc.s	loc_21BD6
		addq.w	#2,d0

loc_21BD6:				
		add.w	d0,d0
		move.w	$34(a0),d1
		add.w	(a2,d0.w),d1
		cmp.w	$C(a0),d1
		bgt.s	locret_21C2A
		movea.l	$3C(a0),a1
		moveq	#2,d1
		tst.w	$10(a0)
		bmi.s	loc_21BF4
		moveq	#0,d1

loc_21BF4:				
		move.b	d1,$3A(a1)
		move.b	d1,$3A(a0)
		cmp.b	$1A(a1),d1
		beq.s	loc_21C1E
		lea	($FFFFB000).w,a2
		bclr	#3,$22(a1)
		beq.s	loc_21C10
		bsr.s	loc_21C2C

loc_21C10:				
		lea	($FFFFB040).w,a2
		bclr	#4,$22(a1)
		beq.s	loc_21C1E
		bsr.s	loc_21C2C

loc_21C1E:				
		clr.w	$10(a0)
		clr.w	$12(a0)
		subq.b	#2,$24(a0)

locret_21C2A:				
		rts	
; ===========================================================================

loc_21C2C:				
		move.w	$12(a0),$12(a2)
		neg.w	$12(a2)
		bset	#1,$22(a2)
		bclr	#3,$22(a2)
		clr.b	$3C(a2)
		move.b	#$10,$1C(a2)
		move.b	#2,$24(a2)
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================
word_21C5C:	dc.w $FFF8		; 0 
		dc.w $FFE4		; 1
		dc.w $FFD1		; 2
		dc.w $FFE4		; 3
		dc.w $FFF8		; 4
; ===========================================================================

loc_21C66:				
		move.b	($FFFFFE05).w,d0
		andi.b	#3,d0
		bne.s	loc_21C76
		bchg	#5,2(a0)

loc_21C76:				
		andi.b	#-2,1(a0)
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		bcs.s	locret_21C8C
		ori.b	#1,1(a0)

locret_21C8C:				
		rts	
; ===========================================================================
byte_21C8E:	dc.b $14,$14,$16,$18,$1A,$1C,$1A,$18,$16,$14,$13,$12,$11,$10, $F, $E; 0
					
		dc.b  $D, $C, $B, $A,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,$FF,$FE; 16
		dc.b $FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F2,$F2,$F2,$F2; 32
		dc.b $F2		; 48
byte_21CBF:	dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5; 0
					
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5; 16
		dc.b   5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5; 32
		dc.b   0		; 48
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21CF0:				
		dc.w word_21CF8-Map_21CF0; 0
		dc.w word_21D3A-Map_21CF0; 1
		dc.w word_21CF8-Map_21CF0; 2
		dc.w word_21D3A-Map_21CF0; 3
word_21CF8:	dc.w 8			
		dc.w $FC05,$4014,$400A,$FFF8; 0
		dc.w  $C01,$2012,$2009,$FFFC; 4
		dc.w $E405,$4006,$4003,$FFD0; 8
		dc.w $EC05,$400A,$4005,$FFE0; 12
		dc.w $F405,$400A,$4005,$FFF0; 16
		dc.w $FC05,$400A,$4005,	   0; 20
		dc.w  $405,$400A,$4005,	 $10; 24
		dc.w  $C05,$400E,$4007,	 $20; 28
word_21D3A:	dc.w 8			
		dc.w $FC05,$4014,$400A,$FFF8; 0
		dc.w  $C01,$2012,$2009,$FFFC; 4
		dc.w $F405,$4000,$4000,$FFD0; 8
		dc.w $F405,$4002,$4001,$FFE0; 12
		dc.w $F405,$4002,$4001,$FFF0; 16
		dc.w $F405,$4002,$4001,	   0; 20
		dc.w $F405,$4002,$4001,	 $10; 24
		dc.w $F405,$4800,$4800,	 $20; 28
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21D7C:				
		dc.w word_21D80-Map_21D7C; 0
		dc.w word_21D8A-Map_21D7C; 1
word_21D80:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_21D8A:	dc.w 1			
		dc.w $F805,$2000,$2000,$FFF8; 0
; ===========================================================================

loc_21D94:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_21D9A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_21DA0:				
		jmp	ObjectFall
; ===========================================================================

loc_21DA6:				
		jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Diagonally moving lift from HTZ
; ----------------------------------------------------------------------------

Tram:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_21DBA(pc,d0.w),d1
		jmp	off_21DBA(pc,d1.w)
; ===========================================================================
off_21DBA:	dc.w loc_21DBE-off_21DBA; 0 
		dc.w loc_21E10-off_21DBA; 1
; ===========================================================================

loc_21DBE:				
		addq.b	#2,$24(a0)
		move.l	#Map_21F14,4(a0)
		move.w	#$43E6,2(a0)
		bsr.w	loc_22004
		ori.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#0,$1A(a0)
		move.b	#1,$18(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		move.b	#$40,$16(a0) ; '@'
		bset	#4,1(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#3,d0
		move.w	d0,$34(a0)

loc_21E10:				
		move.w	8(a0),-(sp)
		bsr.w	loc_21E2C
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#-$28,d3
		move.w	(sp)+,d4
		bsr.w	loc_2200A
		bra.w	loc_21FF8
; ===========================================================================

loc_21E2C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_21E3A(pc,d0.w),d1
		jmp	off_21E3A(pc,d1.w)
; ===========================================================================
off_21E3A:	dc.w loc_21E40-off_21E3A; 0 
		dc.w loc_21E68-off_21E3A; 1
		dc.w loc_21EC2-off_21E3A; 2
; ===========================================================================

loc_21E40:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_21E66
		addq.b	#2,$25(a0)
		move.w	#$200,$10(a0)
		btst	#0,$22(a0)
		beq.s	loc_21E60
		neg.w	$10(a0)

loc_21E60:				
		move.w	#$100,$12(a0)

locret_21E66:				
		rts	
; ===========================================================================

loc_21E68:				
		move.w	(v_frame_counter).w,d0
		andi.w	#$F,d0
		bne.s	loc_21E7C
		move.w	#$E4,d0	
		jsr	(PlaySound).l

loc_21E7C:				
		bsr.w	loc_22010
		subq.w	#1,$34(a0)
		bne.s	locret_21EC0
		addq.b	#2,$25(a0)
		move.b	#2,$1A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		bsr.w	loc_21FFE
		bne.s	locret_21EC0
		_move.b	#$1C,0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	1(a0),1(a1)
		move.b	#6,$28(a1)

locret_21EC0:				
		rts	
; ===========================================================================

loc_21EC2:				
		bsr.w	loc_22010
		addi.w	#$38,$12(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		bcc.s	locret_21F12
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_21F0C
		bclr	#3,$22(a0)
		beq.s	loc_21EF8
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

loc_21EF8:				
		bclr	#4,$22(a0)
		beq.s	loc_21F0C
		bclr	#3,($FFFFB062).w
		bset	#1,($FFFFB062).w

loc_21F0C:				
		move.w	#$4000,8(a0)

locret_21F12:				
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_21F14:				
		dc.w word_21F1E-Map_21F14; 0
		dc.w word_21F70-Map_21F14; 1
		dc.w word_21FB2-Map_21F14; 2
		dc.w word_21FC4-Map_21F14; 3
		dc.w word_21FDE-Map_21F14; 4
word_21F1E:	dc.w $A			
		dc.w $C105,    0,    0,$FFE4; 0
		dc.w $D003,    4,    2,$FFE6; 4
		dc.w $F003,    4,    2,$FFE6; 8
		dc.w $1001,    8,    4,$FFE7; 12
		dc.w $D505,   $A,    5,	  $C; 16
		dc.w $E003,   $E,    7,	 $11; 20
		dc.w $1001,  $12,    9,	 $11; 24
		dc.w	 3,   $E,    7,	 $11; 28
		dc.w $200D,  $14,   $A,$FFE0; 32
		dc.w $200D, $814, $80A,	   0; 36
word_21F70:	dc.w 8			
		dc.w $C105,    0,    0,$FFE4; 0
		dc.w $D003,    4,    2,$FFE6; 4
		dc.w $F003,    4,    2,$FFE6; 8
		dc.w $1001,  $2C,  $16,$FFE6; 12
		dc.w $D505,   $A,    5,	  $C; 16
		dc.w $E003,   $E,    7,	 $11; 20
		dc.w $1801,  $2E,  $17,	 $11; 24
		dc.w	 3,   $E,    7,	 $11; 28
word_21FB2:	dc.w 2			
		dc.w $200D,  $14,   $A,$FFE0; 0
		dc.w $200D, $814, $80A,	   0; 4
word_21FC4:	dc.w 3			
		dc.w $D805,  $1C,   $E,$FFF8; 0
		dc.w $E807,  $20,  $10,$FFF8; 4
		dc.w  $807,  $20,  $10,$FFF8; 8
word_21FDE:	dc.w 3			
		dc.w $D805,  $28,  $14,$FFF8; 0
		dc.w $E807, $820, $810,$FFF8; 4
		dc.w  $807, $820, $810,$FFF8; 8
; ===========================================================================

loc_21FF8:				
		jmp	MarkObjGone
; ===========================================================================

loc_21FFE:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_22004:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2200A:				
		jmp	DetectPlatform
; ===========================================================================

loc_22010:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

BasicPlatform2:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_22026(pc,d0.w),d1
		jmp	off_22026(pc,d1.w)
; ===========================================================================
off_22026:	dc.w loc_22032-off_22026; 0 
		dc.w loc_220B8-off_22026; 1
word_2202A:	dc.w $2000		; 0
		dc.w $1801		; 1
		dc.w $4002		; 2
		dc.w $2003		; 3
; ===========================================================================

loc_22032:				
		addq.b	#2,$24(a0)
		move.l	#Map_2222A,4(a0)
		move.w	#$63A0,2(a0)
		cmpi.b	#$A,(v_zone).w
		bne.s	loc_22052
		move.w	#$62F4,2(a0)

loc_22052:				
		cmpi.b	#6,(v_zone).w
		bne.s	loc_22060
		move.w	#-$5B93,2(a0)

loc_22060:				
		bsr.w	loc_22298
		move.b	#4,1(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$1E,d0
		lea	word_2202A(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$1A(a0)
		move.b	#4,$18(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		andi.b	#$F,$28(a0)
		cmpi.b	#3,$28(a0)
		bne.s	loc_220AA
		btst	#0,$22(a0)
		bne.s	loc_220B2

loc_220AA:				
		cmpi.b	#7,$28(a0)
		bne.s	loc_220B8

loc_220B2:				
		subi.w	#$C0,$C(a0)

loc_220B8:				
					
		move.w	8(a0),-(sp)
		bsr.w	loc_220E8
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#$11,d3
		move.w	(sp)+,d4
		bsr.w	loc_2229E
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_22292
		bra.w	loc_2228C
; ===========================================================================

loc_220E8:				
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_220FC(pc,d0.w),d1
		jmp	off_220FC(pc,d1.w)
; ===========================================================================
off_220FC:	dc.w loc_2211C-off_220FC; 0 
		dc.w loc_22126-off_220FC; 1
		dc.w loc_22146-off_220FC; 2
		dc.w loc_22166-off_220FC; 3
		dc.w loc_22176-off_220FC; 4
		dc.w locret_22196-off_220FC; 5
		dc.w loc_22198-off_220FC; 6
		dc.w loc_22198-off_220FC; 7
		dc.w loc_221B4-off_220FC; 8
		dc.w loc_221B4-off_220FC; 9
		dc.w loc_221B4-off_220FC; 10
		dc.w loc_221B4-off_220FC; 11
		dc.w loc_221EE-off_220FC; 12
		dc.w loc_221EE-off_220FC; 13
		dc.w loc_221EE-off_220FC; 14
		dc.w loc_221EE-off_220FC; 15
; ===========================================================================

loc_2211C:				
		move.b	($FFFFFE68).w,d0
		move.w	#$40,d1	; '@'
		bra.s	loc_2212E
; ===========================================================================

loc_22126:				
		move.b	($FFFFFE6C).w,d0
		move.w	#$60,d1	; '`'

loc_2212E:				
		btst	#0,$22(a0)
		beq.s	loc_2213A
		neg.w	d0
		add.w	d1,d0

loc_2213A:				
		move.w	$30(a0),d1
		sub.w	d0,d1
		move.w	d1,8(a0)
		rts	
; ===========================================================================

loc_22146:				
		move.b	($FFFFFE7C).w,d0
		move.w	#$80,d1	
		btst	#0,$22(a0)
		beq.s	loc_2215A
		neg.w	d0
		add.w	d1,d0

loc_2215A:				
		move.w	$32(a0),d1
		sub.w	d0,d1
		move.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_22166:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_22174
		addq.b	#1,$28(a0)

locret_22174:				
		rts	
; ===========================================================================

loc_22176:				
		bsr.w	loc_222A4
		moveq	#8,d1
		move.w	$32(a0),d0
		subi.w	#$60,d0	; '`'
		cmp.w	$C(a0),d0
		bcc.s	loc_2218C
		neg.w	d1

loc_2218C:				
		add.w	d1,$12(a0)
		bne.s	locret_22196
		addq.b	#1,$28(a0)

locret_22196:				
					
		rts	
; ===========================================================================

loc_22198:				
		bsr.w	loc_222A4
		moveq	#8,d1
		move.w	$32(a0),d0
		subi.w	#$60,d0	; '`'
		cmp.w	$C(a0),d0
		bcc.s	loc_221AE
		neg.w	d1

loc_221AE:				
		add.w	d1,$12(a0)
		rts	
; ===========================================================================

loc_221B4:				
		move.b	($FFFFFE98).w,d1
		subi.b	#$40,d1	; '@'
		ext.w	d1
		move.b	($FFFFFE9C).w,d2
		subi.b	#$40,d2	; '@'
		ext.w	d2
		btst	#2,d0
		beq.s	loc_221D2
		neg.w	d1
		neg.w	d2

loc_221D2:				
		btst	#1,d0
		beq.s	loc_221DC
		neg.w	d1
		exg	d1,d2

loc_221DC:				
		add.w	$30(a0),d1
		move.w	d1,8(a0)
		add.w	$32(a0),d2
		move.w	d2,$C(a0)
		rts	
; ===========================================================================

loc_221EE:				
		move.b	($FFFFFE98).w,d1
		subi.b	#$40,d1	; '@'
		ext.w	d1
		move.b	($FFFFFE9C).w,d2
		subi.b	#$40,d2	; '@'
		ext.w	d2
		btst	#2,d0
		beq.s	loc_2220C
		neg.w	d1
		neg.w	d2

loc_2220C:				
		btst	#1,d0
		beq.s	loc_22216
		neg.w	d1
		exg	d1,d2

loc_22216:				
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,8(a0)
		add.w	$32(a0),d2
		move.w	d2,$C(a0)
		rts	
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_2222A:				
		dc.w word_22232-Map_2222A; 0
		dc.w word_22244-Map_2222A; 1
		dc.w word_22256-Map_2222A; 2
		dc.w word_22278-Map_2222A; 3
word_22232:	dc.w 2			
		dc.w $F00F,    0,    0,$FFE0; 0
		dc.w $F00F, $800, $800,	   0; 4
word_22244:	dc.w 2			
		dc.w $F00B,    0,    0,$FFE8; 0
		dc.w $F00B, $800, $800,	   0; 4
word_22256:	dc.w 4			
		dc.w $F00E,    0,    0,$FFC0; 0
		dc.w $F00E,   $C,    6,$FFE0; 4
		dc.w $F00E, $80C, $806,	   0; 8
		dc.w $F00E, $800, $800,	 $20; 12
word_22278:	dc.w 2			
		dc.w $F00E,    0,    0,$FFE0; 0
		dc.w $F00E, $800, $800,	   0; 4
; ===========================================================================
		nop	

loc_2228C:				
		jmp	DisplaySprite
; ===========================================================================

loc_22292:				
		jmp	DeleteObject
; ===========================================================================

loc_22298:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2229E:				
		jmp	DetectPlatform
; ===========================================================================

loc_222A4:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Booster things from CPZ
; ----------------------------------------------------------------------------

SpeedBooster:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_222BA(pc,d0.w),d1
		jmp	off_222BA(pc,d1.w)
; ===========================================================================
off_222BA:	dc.w loc_222C2-off_222BA; 0 
		dc.w loc_222F8-off_222BA; 1
word_222BE:	dc.w $1000		; 0
		dc.w  $A00		; 1
; ===========================================================================

loc_222C2:				
		addq.b	#2,$24(a0)
		move.l	#Map_223E2,4(a0)
		move.w	#-$1C64,2(a0)
		bsr.w	loc_22402
		ori.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_222BE(pc,d0.w),$30(a0)

loc_222F8:				
		move.b	($FFFFFE05).w,d0
		andi.b	#2,d0
		move.b	d0,$1A(a0)
		move.w	8(a0),d0
		move.w	d0,d1
		subi.w	#$10,d0
		addi.w	#$10,d1
		move.w	$C(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$10,d3
		lea	($FFFFB000).w,a1
		btst	#1,$22(a1)
		bne.s	loc_22354
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_22354
		cmp.w	d1,d4
		bcc.w	loc_22354
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_22354
		cmp.w	d3,d4
		bcc.w	loc_22354
		move.w	d0,-(sp)
		bsr.w	loc_22388
		move.w	(sp)+,d0

loc_22354:				
		lea	($FFFFB040).w,a1
		btst	#1,$22(a1)
		bne.s	loc_22384
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_22384
		cmp.w	d1,d4
		bcc.w	loc_22384
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_22384
		cmp.w	d3,d4
		bcc.w	loc_22384
		bsr.w	loc_22388

loc_22384:				
		bra.w	loc_223FC
; ===========================================================================

loc_22388:				
		move.w	$10(a1),d0
		btst	#0,$22(a0)
		beq.s	loc_22396
		neg.w	d0

loc_22396:				
		cmpi.w	#$1000,d0
		bge.s	loc_223D8
		move.w	$30(a0),$10(a1)
		bclr	#0,$22(a1)
		btst	#0,$22(a0)
		beq.s	loc_223BA
		bset	#0,$22(a1)
		neg.w	$10(a1)

loc_223BA:				
		move.w	#$F,$2E(a1)
		move.w	$10(a1),$14(a1)
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)

loc_223D8:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_223E2:				
		dc.w word_223E8-Map_223E2; 0
		dc.w word_223E8-Map_223E2; 1
		dc.w word_223FA-Map_223E2; 2
word_223E8:	dc.w 2			
		dc.w $F805,    0,    0,$FFE8; 0
		dc.w $F805,    0,    0,	   8; 4
word_223FA:	dc.w 0			
; ===========================================================================

loc_223FC:				
		jmp	MarkObjGone
; ===========================================================================

loc_22402:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

BlueBalls:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_22416(pc,d0.w),d1
		jmp	off_22416(pc,d1.w)
; ===========================================================================
off_22416:	dc.w loc_22428-off_22416; 0 
		dc.w loc_224D6-off_22416; 1
		dc.w loc_224F4-off_22416; 2
		dc.w loc_224D6-off_22416; 3
		dc.w loc_22528-off_22416; 4
		dc.w $FB80		; 0
		dc.w $FB00		; 1
		dc.w $FA00		; 2
		dc.w $F900		; 3
; ===========================================================================

loc_22428:				
		addq.b	#2,$24(a0)
		move.w	#-$480,$12(a0)
		moveq	#0,d1
		move.b	$28(a0),d1
		move.b	d1,d0
		andi.b	#$F,d1
		moveq	#2,d5
		andi.b	#-$10,d0
		beq.s	loc_22448
		moveq	#6,d5

loc_22448:				
		move.b	$22(a0),d4
		moveq	#0,d2
		movea.l	a0,a1
		bra.s	loc_22458
; ===========================================================================

loc_22452:				
		bsr.w	loc_2258A
		bne.s	loc_224D0

loc_22458:				
		_move.b	0(a0),0(a1)
		move.b	d5,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#Map_22576,4(a1)
		move.w	#$643C,2(a1)
		bsr.w	loc_22590
		move.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#-$75,$20(a1)
		move.w	8(a1),$38(a1)
		move.w	$C(a1),$30(a1)
		move.w	$12(a0),$12(a1)
		move.w	$12(a1),$34(a1)
		move.b	#8,$19(a1)
		move.w	#$60,$3A(a1) ; '`'
		move.w	#$B,$36(a1)
		andi.b	#1,d4
		beq.s	loc_224CA
		neg.w	$36(a1)
		neg.w	$3A(a1)

loc_224CA:				
		move.w	d2,$32(a1)
		addq.w	#3,d2

loc_224D0:				
		dbf	d1,loc_22452
		rts	
; ===========================================================================

loc_224D6:				
		subq.w	#1,$32(a0)
		bpl.s	loc_224F0
		addq.b	#2,$24(a0)
		move.w	#$3B,$32(a0) ; ';'
		move.w	#$DA,d0	
		jsr	(PlaySoundLocal).l

loc_224F0:				
		bra.w	loc_22584
; ===========================================================================

loc_224F4:				
		bsr.w	loc_22596
		move.w	$36(a0),d0
		add.w	d0,$10(a0)

loc_22500:
		addi.w	#$18,$12(a0)
		bne.s	loc_2250C
		neg.w	$36(a0)

loc_2250C:				
		move.w	$30(a0),d0
		cmp.w	$C(a0),d0
		bhi.s	loc_22524
		move.w	$34(a0),$12(a0)
		clr.w	$10(a0)
		subq.b	#2,$24(a0)

loc_22524:				
		bra.w	loc_22584
; ===========================================================================

loc_22528:				
		bsr.w	loc_22596
		addi.w	#$18,$12(a0)
		bne.s	loc_22540
		move.w	$3A(a0),d0
		add.w	$38(a0),d0
		move.w	d0,8(a0)

loc_22540:				
		cmpi.w	#$180,$12(a0)
		bne.s	loc_22552
		move.w	#$DA,d0	
		jsr	(PlaySoundLocal).l

loc_22552:				
		move.w	$30(a0),d0
		cmp.w	$C(a0),d0
		bhi.s	loc_22572
		move.w	$34(a0),$12(a0)
		move.w	$38(a0),8(a0)
		move.w	#$DA,d0	
		jsr	(PlaySoundLocal).l

loc_22572:				
		bra.w	loc_22584
; ===========================================================================
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_22576:				
		dc.w word_22578-Map_22576
word_22578:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
; ===========================================================================
		nop	

loc_22584:				
		jmp	MarkObjGone
; ===========================================================================

loc_2258A:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_22590:				
		jmp	sub_16D8A
; ===========================================================================

loc_22596:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Spin tube from CPZ
; ----------------------------------------------------------------------------

CPZSpinTube:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_225B8(pc,d0.w),d1
		jsr	off_225B8(pc,d1.w)
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	loc_22FF0
		rts	
; ===========================================================================
off_225B8:	dc.w loc_225C2-off_225B8; 0 
		dc.w loc_225D6-off_225B8; 1
word_225BC:	dc.w   $A0		; 0
		dc.w  $100		; 1
		dc.w  $120		; 2
; ===========================================================================

loc_225C2:				
		addq.b	#2,$24(a0)
		move.b	$28(a0),d0
		add.w	d0,d0
		andi.w	#6,d0
		move.w	word_225BC(pc,d0.w),$2A(a0)

loc_225D6:				
		lea	($FFFFB000).w,a1
		lea	$2C(a0),a4
		bsr.s	loc_225E8
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4

loc_225E8:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_225F4(pc,d0.w),d0
		jmp	off_225F4(pc,d0.w)
; ===========================================================================
off_225F4:	dc.w loc_225FC-off_225F4; 0 
		dc.w loc_2271A-off_225F4; 1
		dc.w loc_227FE-off_225F4; 2
		dc.w loc_2286A-off_225F4; 3
; ===========================================================================

loc_225FC:				
		tst.w	(v_debug_active).w
		bne.w	locret_22718
		move.w	$2A(a0),d2
		move.w	8(a1),d0
		sub.w	8(a0),d0
		cmp.w	d2,d0
		bcc.w	locret_22718
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		cmpi.w	#$80,d1	
		bcc.w	locret_22718
		cmpi.b	#$20,$1C(a1) ; ' '
		beq.w	locret_22718
		moveq	#0,d3
		cmpi.w	#$A0,d2	
		beq.s	loc_22648
		moveq	#8,d3
		cmpi.w	#$120,d2
		beq.s	loc_22648
		moveq	#4,d3
		neg.w	d0
		addi.w	#$100,d0

loc_22648:				
		cmpi.w	#$80,d0	
		bcs.s	loc_2267E
		moveq	#0,d2
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$F,d0
		move.b	byte_2266E(pc,d0.w),d2
		cmpi.b	#2,d2
		bne.s	loc_22688
		move.b	(v_time_sec).w,d2
		andi.b	#1,d2
		bra.s	loc_22688
; ===========================================================================
byte_2266E:	dc.b   2		; 0
		dc.b   2		; 1
		dc.b   2		; 2
		dc.b   2		; 3
		dc.b   2		; 4
		dc.b   2		; 5
		dc.b   2		; 6
		dc.b   2		; 7
		dc.b   2		; 8
		dc.b   2		; 9
		dc.b   0		; 10
		dc.b   2		; 11
		dc.b   0		; 12
		dc.b   1		; 13
		dc.b   2		; 14
		dc.b   1		; 15
; ===========================================================================

loc_2267E:				
		moveq	#2,d2
		cmpi.w	#$40,d1	; '@'
		bcc.s	loc_22688
		moveq	#3,d2

loc_22688:				
		move.b	d2,1(a4)
		add.w	d3,d2
		add.w	d2,d2
		andi.w	#$1E,d2
		lea	(off_22980)(pc),a2
		adda.w	(a2,d2.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4
		add.w	8(a0),d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		add.w	$C(a0),d5
		move.w	d5,$C(a1)
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		add.w	8(a0),d4
		move.w	(a2)+,d5
		add.w	$C(a0),d5
		addq.b	#2,(a4)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,$14(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		move.b	#0,$3C(a1)
		bclr	#7,2(a1)
		move.w	#$800,d2
		bsr.w	loc_22902
		move.w	#$BE,d0	
		jsr	(PlaySound).l

locret_22718:				
		rts	
; ===========================================================================

loc_2271A:				
		subq.b	#1,2(a4)
		bpl.s	loc_2275E
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		add.w	8(a0),d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		add.w	$C(a0),d5
		move.w	d5,$C(a1)
		tst.b	1(a4)
		bpl.s	loc_22740
		subq.w	#8,a2

loc_22740:				
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_22784
		move.w	(a2)+,d4
		add.w	8(a0),d4
		move.w	(a2)+,d5
		add.w	$C(a0),d5
		move.w	#$800,d2
		bra.w	loc_22902
; ===========================================================================

loc_2275E:				
		move.l	8(a1),d2
		move.l	$C(a1),d3
		move.w	$10(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,8(a1)
		move.l	d3,$C(a1)
		rts	
; ===========================================================================

loc_22784:				
		cmpi.b	#4,1(a4)
		bcc.s	loc_227A6
		move.b	$28(a0),d0
		andi.w	#$FC,d0	
		add.b	1(a4),d0
		move.b	#4,1(a4)
		move.b	byte_227BE(pc,d0.w),d0
		bne.w	loc_22892

loc_227A6:				
		andi.w	#$7FF,$C(a1)
		move.b	#6,(a4)
		clr.b	$2A(a1)
		move.w	#$BC,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_227BE:	dc.b   2,  1,  0,  0,$FF,  3,  0,  0,  4,$FE,  0,  0,$FD,$FC,  0,  0; 0
		dc.b $FB,$FB,  0,  0,  7,  6,  0,  0,$F9,$FA,  0,  0,  8,  9,  0,  0; 16
		dc.b $F8,$F7,  0,  0, $B, $A,  0,  0, $C,  0,  0,  0,$F5,$F6,  0,  0; 32
		dc.b $F4,  0,  0,  0,  0, $D,  0,  0,$F3, $E,  0,  0,  0,$F2,  0,  0; 48
; ===========================================================================

loc_227FE:				
		subq.b	#1,2(a4)
		bpl.s	loc_22832
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$C(a1)
		tst.b	1(a4)
		bpl.s	loc_2281C
		subq.w	#8,a2

loc_2281C:				
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_22858
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$800,d2
		bra.w	loc_22902
; ===========================================================================

loc_22832:				
		move.l	8(a1),d2
		move.l	$C(a1),d3
		move.w	$10(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,8(a1)
		move.l	d3,$C(a1)
		rts	
; ===========================================================================

loc_22858:				
		andi.w	#$7FF,$C(a1)
		clr.b	(a4)
		move.w	#$BC,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_2286A:				
		move.w	$2A(a0),d2
		move.w	8(a1),d0
		sub.w	8(a0),d0
		cmp.w	d2,d0
		bcc.w	loc_2288E
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		cmpi.w	#$80,d1	
		bcc.w	loc_2288E
		rts	
; ===========================================================================

loc_2288E:				
		clr.b	(a4)
		rts	
; ===========================================================================

loc_22892:				
		bpl.s	loc_228C4
		neg.b	d0
		move.b	#-4,1(a4)
		add.w	d0,d0
		lea	(off_22E88).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d0
		subq.w	#4,d0
		move.w	d0,4(a4)
		lea	(a2,d0.w),a2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$C(a1)
		subq.w	#8,a2
		bra.s	loc_228E4
; ===========================================================================

loc_228C4:				
		add.w	d0,d0
		lea	(off_22E88).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$C(a1)

loc_228E4:				
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$800,d2
		bsr.w	loc_22902

loc_228F4:
		move.w	#$BE,d0	
		jsr	(PlaySound).l
		addq.b	#2,(a4)
		rts	
; ===========================================================================

loc_22902:				
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	8(a1),d0
		bge.s	loc_22912
		neg.w	d0
		neg.w	d2

loc_22912:				
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$C(a1),d1
		bge.s	loc_22920
		neg.w	d1
		neg.w	d3

loc_22920:				
		cmp.w	d0,d1
		bcs.s	loc_22952
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$C(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	8(a1),d0
		beq.s	loc_2293E
		swap	d0
		divs.w	d1,d0

loc_2293E:				
		move.w	d0,$10(a1)
		move.w	d3,$12(a1)
		tst.w	d1
		bpl.s	loc_2294C
		neg.w	d1

loc_2294C:				
		move.w	d1,2(a4)
		rts	
; ===========================================================================

loc_22952:				
		moveq	#0,d0
		move.w	d4,d0
		sub.w	8(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$C(a1),d1
		beq.s	loc_2296C
		swap	d1
		divs.w	d0,d1

loc_2296C:				
		move.w	d1,$12(a1)
		move.w	d2,$10(a1)
		tst.w	d0
		bpl.s	loc_2297A
		neg.w	d0

loc_2297A:				
		move.w	d0,2(a4)
		rts	
; ===========================================================================
off_22980:	dc.w word_22998-off_22980; 0 
		dc.w word_22A0E-off_22980; 1
		dc.w word_22A6C-off_22980; 2
		dc.w word_22AE2-off_22980; 3
		dc.w word_22B40-off_22980; 4
		dc.w word_22BB2-off_22980; 5
		dc.w word_22C10-off_22980; 6
		dc.w word_22C82-off_22980; 7
		dc.w word_22CE0-off_22980; 8
		dc.w word_22D56-off_22980; 9
		dc.w word_22DB4-off_22980; 10
		dc.w word_22E2A-off_22980; 11
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
word_22998:	dc.w   $74,  $90,  $10,	 $90,  $70,  $40,  $70,	 $35; 0	
		dc.w   $6F,  $28,  $6A,	 $1E,  $62,  $15,  $58,	 $11; 8
		dc.w   $4A,  $10,  $40,	 $11,  $35,  $15,  $27,	 $1E; 16
		dc.w   $1E,  $28,  $15,	 $35,  $11,  $40,  $10,	 $50; 24
		dc.w   $10,  $5E,  $12,	 $68,  $18,  $6D,  $24,	 $70; 32
		dc.w   $30,  $6D,  $3D,	 $68,  $48,  $5E,  $4E,	 $50; 40
		dc.w   $50,  $30,  $50,	 $22,  $52,  $17,  $5A,	 $11; 48
		dc.w   $63,  $10,  $70	; 56
word_22A0E:	dc.w   $5C,  $90,  $10,	 $90,  $70,  $40,  $70,	 $2E; 0	
		dc.w   $6E,  $1D,  $62,	 $13,  $53,  $10,  $40,	 $13; 8
		dc.w   $2D,  $1D,  $1E,	 $2E,  $13,  $40,  $10,	 $58; 16
		dc.w   $10,  $64,  $14,	 $6C,  $1A,  $70,  $28,	 $6C; 24
		dc.w   $36,  $64,  $3C,	 $58,  $40,  $4B,  $3D,	 $40; 32
		dc.w   $38,  $36,  $32,	 $28,  $30,  $10,  $30;	40
word_22A6C:	dc.w   $74,  $10,  $70,	 $11,  $63,  $17,  $5A,	 $22; 0	
		dc.w   $52,  $30,  $50,	 $50,  $50,  $5E,  $4E,	 $68; 8
		dc.w   $48,  $6D,  $3D,	 $70,  $30,  $6D,  $24,	 $68; 16
		dc.w   $18,  $5E,  $12,	 $50,  $10,  $40,  $10,	 $35; 24
		dc.w   $11,  $28,  $15,	 $1E,  $1E,  $15,  $27,	 $11; 32
		dc.w   $35,  $10,  $40,	 $11,  $4A,  $15,  $58,	 $1E; 40
		dc.w   $62,  $28,  $6A,	 $35,  $6F,  $40,  $70,	 $90; 48
		dc.w   $70,  $90,  $10	; 56
word_22AE2:	dc.w   $5C,  $10,  $30,	 $28,  $30,  $36,  $32,	 $40; 0	
		dc.w   $38,  $4B,  $3D,	 $58,  $40,  $64,  $3C,	 $6C; 8
		dc.w   $36,  $70,  $28,	 $6C,  $1A,  $64,  $14,	 $58; 16
		dc.w   $10,  $40,  $10,	 $2E,  $13,  $1D,  $1E,	 $13; 24
		dc.w   $2D,  $10,  $40,	 $13,  $53,  $1D,  $62,	 $2E; 32
		dc.w   $6E,  $40,  $70,	 $90,  $70,  $90,  $10;	40
word_22B40:	dc.w   $70,  $10,  $10,	 $10,  $70,  $C0,  $70,	 $CA; 0	
		dc.w   $6F,  $D4,  $6C,	 $DB,  $68,  $E3,  $62,	 $E8; 8
		dc.w   $5A,  $ED,  $52,	 $EF,  $48,  $F0,  $40,	 $EF; 16
		dc.w   $36,  $ED,  $2E,	 $E8,  $26,  $E3,  $1E,	 $DB; 24
		dc.w   $17,  $D4,  $14,	 $CA,  $12,  $C0,  $10,	 $B7; 32
		dc.w   $11,  $AF,  $12,	 $A6,  $17,  $9E,  $1E,	 $97; 40
		dc.w   $26,  $93,  $2E,	 $91,  $36,  $90,  $40,	 $90; 48
		dc.w   $70		; 56
word_22BB2:	dc.w   $5C,  $10,  $10,	 $10,  $70,  $C0,  $70,	 $D2; 0	
		dc.w   $6E,  $E3,  $62,	 $ED,  $53,  $F0,  $40,	 $ED; 8
		dc.w   $2D,  $E3,  $1E,	 $D2,  $13,  $C0,  $10,	 $A8; 16
		dc.w   $10,  $9C,  $14,	 $94,  $1A,  $90,  $28,	 $94; 24
		dc.w   $36,  $9C,  $3C,	 $A8,  $40,  $B5,  $3D,	 $C0; 32
		dc.w   $38,  $CA,  $32,	 $D8,  $30,  $F0,  $30;	40
word_22C10:	dc.w   $70,  $90,  $70,	 $90,  $40,  $91,  $36,	 $93; 0	
		dc.w   $2E,  $97,  $26,	 $9E,  $1E,  $A6,  $17,	 $AF; 8
		dc.w   $12,  $B7,  $11,	 $C0,  $10,  $CA,  $12,	 $D4; 16
		dc.w   $14,  $DB,  $17,	 $E3,  $1E,  $E8,  $26,	 $ED; 24
		dc.w   $2E,  $EF,  $36,	 $F0,  $40,  $EF,  $48,	 $ED; 32
		dc.w   $52,  $E8,  $5A,	 $E3,  $62,  $DB,  $68,	 $D4; 40
		dc.w   $6C,  $CA,  $6F,	 $C0,  $70,  $10,  $70,	 $10; 48
		dc.w   $10		; 56
word_22C82:	dc.w   $5C,  $F0,  $30,	 $D8,  $30,  $CA,  $32,	 $C0; 0	
		dc.w   $38,  $B5,  $3D,	 $A8,  $40,  $9C,  $3C,	 $94; 8
		dc.w   $36,  $90,  $28,	 $94,  $1A,  $9C,  $14,	 $A8; 16
		dc.w   $10,  $C0,  $10,	 $D2,  $13,  $E3,  $1E,	 $ED; 24
		dc.w   $2D,  $F0,  $40,	 $ED,  $53,  $E3,  $62,	 $D2; 32
		dc.w   $6E,  $C0,  $70,	 $10,  $70,  $10,  $10;	40
word_22CE0:	dc.w   $74, $110,  $10,	$110,  $70,  $40,  $70,	 $35; 0	
		dc.w   $6F,  $28,  $6A,	 $1E,  $62,  $15,  $58,	 $11; 8
		dc.w   $4A,  $10,  $40,	 $11,  $35,  $15,  $27,	 $1E; 16
		dc.w   $1E,  $28,  $15,	 $35,  $11,  $40,  $10,	 $50; 24
		dc.w   $10,  $5E,  $12,	 $68,  $18,  $6D,  $24,	 $70; 32
		dc.w   $30,  $6D,  $3D,	 $68,  $48,  $5E,  $4E,	 $50; 40
		dc.w   $50,  $30,  $50,	 $22,  $52,  $17,  $5A,	 $11; 48
		dc.w   $63,  $10,  $70	; 56
word_22D56:	dc.w   $5C, $110,  $10,	$110,  $70,  $40,  $70,	 $2E; 0	
		dc.w   $6E,  $1D,  $62,	 $13,  $53,  $10,  $40,	 $13; 8
		dc.w   $2D,  $1D,  $1E,	 $2E,  $13,  $40,  $10,	 $58; 16
		dc.w   $10,  $64,  $14,	 $6C,  $1A,  $70,  $28,	 $6C; 24
		dc.w   $36,  $64,  $3C,	 $58,  $40,  $4B,  $3D,	 $40; 32
		dc.w   $38,  $36,  $32,	 $28,  $30,  $10,  $30;	40
word_22DB4:	dc.w   $74,  $10,  $70,	 $11,  $63,  $17,  $5A,	 $22; 0	
		dc.w   $52,  $30,  $50,	 $50,  $50,  $5E,  $4E,	 $68; 8
		dc.w   $48,  $6D,  $3D,	 $70,  $30,  $6D,  $24,	 $68; 16
		dc.w   $18,  $5E,  $12,	 $50,  $10,  $40,  $10,	 $35; 24
		dc.w   $11,  $28,  $15,	 $1E,  $1E,  $15,  $27,	 $11; 32
		dc.w   $35,  $10,  $40,	 $11,  $4A,  $15,  $58,	 $1E; 40
		dc.w   $62,  $28,  $6A,	 $35,  $6F,  $40,  $70,	$110; 48
		dc.w   $70, $110,  $10	; 56
word_22E2A:	dc.w   $5C,  $10,  $30,	 $28,  $30,  $36,  $32,	 $40; 0	
		dc.w   $38,  $4B,  $3D,	 $58,  $40,  $64,  $3C,	 $6C; 8
		dc.w   $36,  $70,  $28,	 $6C,  $1A,  $64,  $14,	 $58; 16
		dc.w   $10,  $40,  $10,	 $2E,  $13,  $1D,  $1E,	 $13; 24
		dc.w   $2D,  $10,  $40,	 $13,  $53,  $1D,  $62,	 $2E; 32
		dc.w   $6E,  $40,  $70,	$110,  $70, $110,  $10;	40
off_22E88:	dc.w byte_22EA6-off_22E88; 0 
		dc.w byte_22EA6-off_22E88; 1
		dc.w byte_22EBC-off_22E88; 2
		dc.w byte_22EE6-off_22E88; 3
		dc.w byte_22EFC-off_22E88; 4
		dc.w byte_22F12-off_22E88; 5
		dc.w byte_22F28-off_22E88; 6
		dc.w byte_22F3A-off_22E88; 7
		dc.w byte_22F54-off_22E88; 8
		dc.w byte_22F6E-off_22E88; 9
		dc.w word_22F80-off_22E88; 10
		dc.w word_22F92-off_22E88; 11
		dc.w word_22FAC-off_22E88; 12
		dc.w word_22FC2-off_22E88; 13
		dc.w word_22FD0-off_22E88; 14
byte_22EA6:	dc.b   0,$14,  7,$90,  3,$B0,  7,$10,  3,$B0,  7,$10,  6,$B0, $A,$90; 0
					
		dc.b   6,$B0, $A,$90,  6,$70; 16
byte_22EBC:	dc.b   0,$28,  7,$90,  3,$F0,  7,$90,  4,$B0, $A,  0,  4,$B0, $C,$10; 0
					
		dc.b   4,$B0, $C,$10,  3,$30, $D,$90,  3,$30, $D,$90,  1,$B0, $F,$10; 16
		dc.b   1,$B0, $F,$10,  2,$B0, $F,$90,  2,$B0; 32
byte_22EE6:	dc.b   0,$14, $A,$F0,  6,$30, $E,$90,  6,$30, $E,$90,  6,$B0, $F,$90; 0
					
		dc.b   6,$B0, $F,$90,  6,$70; 16
byte_22EFC:	dc.b   0,$14, $F,$90,  2,$F0, $F,$90,  4,$B0, $F,$10,  4,$B0, $F,$10; 0
					
		dc.b   6,$30, $F,$90,  6,$30; 16
byte_22F12:	dc.b   0,$14,$14,$10,  5,$30,$11,$90,  5,$30,$11,$90,  6,$B0,$14,$10; 0
					
		dc.b   6,$B0,$14,$10,  5,$70; 16
byte_22F28:	dc.b   0,$10,$1A,$F0,  5,$30,$1B,$90,  5,$30,$1B,$90,  3,$30,$1E,$10; 0
					
		dc.b   3,$30		; 16
byte_22F3A:	dc.b   0,$18,$1A,$90,  5,$70,$1A,$90,  5,$B0,$1C,$10,  5,$B0,$1C,$10; 0
					
		dc.b   4,$30,$1E,$10,  4,$30,$1E,$10,  3,$70; 16
byte_22F54:	dc.b   0,$18,$24,$90,  3,$70,$24,$90,  3,$D0,$23,$90,  3,$D0,$23,$90; 0
					
		dc.b   5,$D0,$25,$10,  5,$D0,$25,$10,  5,$70; 16
byte_22F6E:	dc.b   0,$10,$24,$F0,  3,$30,$25,$90,  3,$30,$25,$90,  5,$30,$25,$70; 0
					
		dc.b   5,$30		; 16
word_22F80:	dc.w   $10, $310, $330,	$290, $330, $290, $230,	$490; 0	
		dc.w  $230		; 8
word_22F92:	dc.w   $18, $310, $370,	$310, $3B0, $410, $3B0,	$410; 0	
		dc.w  $2B0, $490, $2B0,	$490, $270; 8
word_22FAC:	dc.w   $14, $490, $6F0,	$490, $730, $690, $730,	$890; 0	
		dc.w  $730, $890, $6F0	; 8
word_22FC2:	dc.w	$C, $BF0, $330,	$D90, $330, $D90, $2F0;	0 
word_22FD0:	dc.w   $1C, $D90, $2B0,	$C90, $2B0, $C90,  $B0,	$E80; 0	
		dc.w   $B0,$1110,  $B0,$1110, $230,$10F0, $230;	8
; ===========================================================================
		nop	

loc_22FF0:				
		jmp	MarkObjGone3
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

LavaBubble:				
					
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_23006(pc,d0.w),d1
		jmp	off_23006(pc,d1.w)
; ===========================================================================
off_23006:	dc.w loc_23014-off_23006; 0 
		dc.w loc_23076-off_23006; 1
		dc.w loc_23084-off_23006; 2
		dc.w loc_2311E-off_23006; 3
		dc.w loc_23144-off_23006; 4
		dc.w loc_231D2-off_23006; 5
		dc.w loc_23232-off_23006; 6
; ===========================================================================

loc_23014:				
		addq.b	#2,$24(a0)
		move.b	#8,$16(a0)
		move.b	#8,$17(a0)
		move.l	#Map_23254,4(a0)
		move.w	#-$7BEA,2(a0)
		bsr.w	loc_232F4
		ori.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#8,$19(a0)
		move.w	$C(a0),$30(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#3,d0
		andi.w	#$780,d0
		neg.w	d0
		move.w	d0,$10(a0)
		move.w	d0,$12(a0)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lsl.w	#4,d0
		move.w	d0,$32(a0)
		move.w	d0,$34(a0)

loc_23076:				
		lea	(off_23236).l,a1
		bsr.w	loc_232EE
		bra.w	loc_232E2
; ===========================================================================

loc_23084:				
		cmpi.b	#5,$1E(a0)
		bne.s	loc_230B4
		bsr.w	loc_232E8
		bne.s	loc_230A6
		bsr.s	loc_230C2
		bsr.w	loc_232E8
		bne.s	loc_230A6
		bsr.s	loc_230C2
		neg.w	$10(a1)
		bset	#0,1(a1)

loc_230A6:				
		move.w	#$AE,d0	
		jsr	(PlaySound).l
		addq.b	#2,$24(a0)

loc_230B4:				
		lea	(off_23236).l,a1
		bsr.w	loc_232EE
		bra.w	loc_232E2
; ===========================================================================

loc_230C2:				
		_move.b	#$20,0(a1) ; ' '
		move.b	#8,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$10(a0),$10(a1)
		move.w	$12(a0),$12(a1)
		move.b	#8,$16(a1)
		move.b	#8,$17(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		ori.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#8,$19(a1)
		move.b	#-$75,$20(a1)
		move.w	$C(a1),$30(a1)
		rts	
; ===========================================================================

loc_2311E:				
		subq.w	#1,$32(a0)
		bpl.s	loc_23136
		move.w	$34(a0),$32(a0)
		move.b	#2,$24(a0)
		move.w	#1,$1C(a0)

loc_23136:				
		lea	(off_23236).l,a1
		bsr.w	loc_232EE
		bra.w	loc_232E2
; ===========================================================================

loc_23144:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2315A
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_2315A:				
		bsr.w	loc_232FA
		addi.w	#$18,$12(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		bcc.s	loc_23176
		bra.w	loc_232DC
; ===========================================================================

loc_23176:				
		bclr	#1,1(a0)
		tst.w	$12(a0)
		bmi.s	loc_231CE
		bset	#1,1(a0)
		bsr.w	loc_1EDFA
		tst.w	d1
		bpl.s	loc_231CE
		add.w	d1,$C(a0)
		addq.b	#2,$24(a0)
		move.b	#2,$1C(a0)
		move.b	#4,$1A(a0)
		move.w	#0,$12(a0)
		move.l	#Map_23294,4(a0)
		move.w	#-$7C62,2(a0)
		bsr.w	loc_232F4
		move.b	#0,$1A(a0)
		move.w	#9,$32(a0)
		move.b	#3,$36(a0)

loc_231CE:				
		bra.w	loc_232E2
; ===========================================================================

loc_231D2:				
		subq.w	#1,$32(a0)
		bpl.s	loc_23224
		move.w	#$7F,$32(a0) ; ''
		subq.b	#1,$36(a0)
		bmi.s	loc_23224
		bsr.w	loc_232E8
		bne.s	loc_23224
		moveq	#0,d0
		move.w	#$F,d1

loc_231F0:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_231F0
		move.w	#9,$32(a1)
		move.w	#$200,$1C(a1)
		move.w	#$E,d0
		tst.w	$10(a1)
		bpl.s	loc_23214
		neg.w	d0

loc_23214:				
		add.w	d0,8(a1)
		move.l	a1,-(sp)
		bsr.w	loc_1EE30
		movea.l	(sp)+,a1
		add.w	d1,$C(a1)

loc_23224:				
		lea	(off_23236).l,a1
		bsr.w	loc_232EE
		bra.w	loc_232E2
; ===========================================================================

loc_23232:				
		bra.w	loc_232DC
; ===========================================================================
off_23236:	dc.w byte_2323C-off_23236; 0 
		dc.w byte_23243-off_23236; 1
		dc.w byte_23246-off_23236; 2
byte_2323C:	dc.b  $B,  2,  3,$FC,  4,$FD,  1; 0 
byte_23243:	dc.b $7F,  5,$FF	; 0 
byte_23246:	dc.b   5,  4,  5,  2,  3,  0,  1,  0,  1,  2,  3,  4,  5,$FC; 0
					
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_23254:				
		dc.w word_23260-Map_23254; 0
		dc.w word_2326A-Map_23254; 1
		dc.w word_23274-Map_23254; 2
		dc.w word_2327E-Map_23254; 3
		dc.w word_23288-Map_23254; 4
		dc.w word_23292-Map_23254; 5
word_23260:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_2326A:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8; 0
word_23274:	dc.w 1			
		dc.w $F905,    8,    4,$FFF8; 0
word_2327E:	dc.w 1			
		dc.w $F605,    8,    4,$FFF8; 0
word_23288:	dc.w 1			
		dc.w $F605,   $C,    6,$FFF8; 0
word_23292:	dc.w 0			
; -------------------------------------------------------------------------------
; Unknown Sprite Mappings
; -------------------------------------------------------------------------------
Map_23294:				
		dc.w byte_2329E-word_23292; 0
		dc.w byte_232A8-word_23292; 1
		dc.w byte_232B2-word_23292; 2
		dc.w byte_232BC-word_23292; 3
		dc.w byte_232C6-word_23292; 4
byte_2329E:	dc.b   0,$3E,  0,  1,$F0,  7,  0,  0,  0,  0; 0	
byte_232A8:	dc.b $FF,$F8,  0,  1,$F0,  7,  8,  0,  8,  0; 0	
byte_232B2:	dc.b $FF,$F8,  0,  1,$F0,  7,  0,  8,  0,  4; 0	
byte_232BC:	dc.b $FF,$F8,  0,  1,$F0,  7,  8,  8,  8,  4; 0	
byte_232C6:	dc.b $FF,$F8,  0,  1,  0,  5,  0,$10,  0,  8,$FF,$F8,  0,  1,  0,  5; 0
					
		dc.b   8,$10,  8,  8,$FF,$F8; 16
; ===========================================================================

loc_232DC:				
		jmp	DeleteObject
; ===========================================================================

loc_232E2:				
		jmp	MarkObjGone
; ===========================================================================

loc_232E8:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_232EE:				
		jmp	AnimateSprite
; ===========================================================================

loc_232F4:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_232FA:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_23300:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2330E(pc,d0.w),d1
		jmp	off_2330E(pc,d1.w)
; ===========================================================================
off_2330E:	dc.w loc_2331E-off_2330E; 0 
		dc.w loc_23368-off_2330E; 1
		dc.w loc_234DC-off_2330E; 2
byte_23314:	dc.b $24		; 0
		dc.b   0		; 1
		dc.b $20		; 2
		dc.b   2		; 3
		dc.b $18		; 4
		dc.b   4		; 5
		dc.b $10		; 6
		dc.b   6		; 7
		dc.b   8		; 8
		dc.b   8		; 9
; ===========================================================================

loc_2331E:				
		addq.b	#2,$24(a0)
		move.l	#Map_236FA,4(a0)
		move.w	#-$4000,2(a0)
		bsr.w	loc_238C4
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$1E,d0
		lea	byte_23314(pc,d0.w),a2
		move.b	(a2)+,$16(a0)
		move.b	(a2)+,$1A(a0)
		move.b	#$20,$16(a0) ; ' '
		bset	#4,1(a0)

loc_23368:				
		move.w	(v_enemy_combo).w,$38(a0)
		move.b	($FFFFB01C).w,$32(a0)
		move.b	($FFFFB05C).w,$33(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	loc_238D0
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_233A4

loc_233A0:				
		bra.w	loc_238BE
; ===========================================================================

loc_233A4:				
		cmpi.b	#$18,d0
		bne.s	loc_23408
		cmpi.b	#2,$32(a0)
		bne.s	loc_233C0
		tst.b	$28(a0)
		bmi.s	loc_233F0
		cmpi.b	#$E,(v_ost_maincharacter+ost_top_solid_bit).w
		beq.s	loc_233F0

loc_233C0:				
		move.b	#$C,(v_ost_maincharacter+ost_top_solid_bit).w
		move.b	#$D,($FFFFB03F).w
		cmpi.b	#2,$33(a0)
		bne.s	loc_233E2
		tst.b	$28(a0)
		bmi.s	loc_233F0
		cmpi.b	#$E,(v_ost_sidekick+ost_top_solid_bit).w
		beq.s	loc_233F0

loc_233E2:				
		move.b	#$C,(v_ost_sidekick+ost_top_solid_bit).w
		move.b	#$D,($FFFFB07F).w
		bra.s	loc_233A0
; ===========================================================================

loc_233F0:				
		lea	($FFFFB000).w,a1
		move.b	$32(a0),d0
		bsr.s	loc_2343E
		lea	($FFFFB040).w,a1
		move.b	$33(a0),d0
		bsr.s	loc_2343E
		bra.w	loc_234A4
; ===========================================================================

loc_23408:				
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_23470
		cmpi.b	#2,$32(a0)
		bne.s	loc_23426
		tst.b	$28(a0)
		bmi.s	loc_23436
		cmpi.b	#$E,(v_ost_maincharacter+ost_top_solid_bit).w
		beq.s	loc_23436

loc_23426:				
		move.b	#$C,(v_ost_maincharacter+ost_top_solid_bit).w
		move.b	#$D,($FFFFB03F).w
		bra.w	loc_233A0
; ===========================================================================

loc_23436:				
		lea	($FFFFB000).w,a1
		bsr.s	loc_23444
		bra.s	loc_234A4
; ===========================================================================

loc_2343E:				
		cmpi.b	#2,d0
		bne.s	loc_2345C

loc_23444:				
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)

loc_2345C:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		rts	
; ===========================================================================

loc_23470:				
		andi.b	#$10,d0
		beq.w	loc_233A0
		cmpi.b	#2,$33(a0)
		bne.s	loc_2348E
		tst.b	$28(a0)
		bmi.s	loc_2349E
		cmpi.b	#$E,(v_ost_sidekick+ost_top_solid_bit).w
		beq.s	loc_2349E

loc_2348E:				
		move.b	#$C,(v_ost_sidekick+ost_top_solid_bit).w
		move.b	#$D,($FFFFB07F).w
		bra.w	loc_233A0
; ===========================================================================

loc_2349E:				
		lea	($FFFFB040).w,a1
		bsr.s	loc_23444

loc_234A4:				
		move.w	$38(a0),(v_enemy_combo).w
		andi.b	#-$19,$22(a0)
		lea	(byte_234F2).l,a4
		moveq	#0,d0
		move.b	$1A(a0),d0
		addq.b	#1,$1A(a0)
		move.l	d0,d1
		add.w	d0,d0
		add.w	d0,d0
		lea	(a4,d0.w),a4
		neg.w	d1
		addi.w	#9,d1

loc_234D0:
		move.w	#$18,d2
		bsr.w	loc_238CA
		bsr.w	loc_236A8

loc_234DC:				
		bsr.w	loc_238D6

loc_234E0:
		addi.w	#$18,$12(a0)
		tst.b	1(a0)
		bpl.w	loc_238B2
		bra.w	loc_238AC
; ===========================================================================
byte_234F2:	dc.b $FF		; 0 
		dc.b   0		; 1
		dc.b $F8		; 2
		dc.b   0		; 3
		dc.b   1		; 4
		dc.b   0		; 5
		dc.b $F8		; 6
		dc.b   0		; 7
		dc.b $FF		; 8
		dc.b $20		; 9
		dc.b $F9		; 10
		dc.b   0		; 11
		dc.b   0		; 12
		dc.b $E0		; 13
		dc.b $F9		; 14
		dc.b   0		; 15
		dc.b $FF		; 16
		dc.b $40		; 17
		dc.b $FA		; 18
		dc.b   0		; 19
		dc.b   0		; 20
		dc.b $C0		; 21
		dc.b $FA		; 22
		dc.b   0		; 23
		dc.b $FF		; 24
		dc.b $60		; 25
		dc.b $FB		; 26
		dc.b   0		; 27
		dc.b   0		; 28
		dc.b $A0		; 29
		dc.b $FB		; 30
		dc.b   0		; 31
		dc.b $FF		; 32
		dc.b $80		; 33
		dc.b $FC		; 34
		dc.b   0		; 35
		dc.b   0		; 36
		dc.b $80		; 37
		dc.b $FC		; 38
		dc.b   0		; 39
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2351A:				
		moveq	#0,d0
		move.b	$24(a0),d0

loc_23520:
		move.w	off_23528(pc,d0.w),d1
		jmp	off_23528(pc,d1.w)
; ===========================================================================
off_23528:	dc.w loc_2352E-off_23528; 0 
		dc.w loc_23582-off_23528; 1
		dc.w loc_2366A-off_23528; 2
; ===========================================================================

loc_2352E:				
		addq.b	#2,$24(a0)
		move.l	#Map_23852,4(a0)
		move.w	#$43B2,2(a0)
		move.b	#$18,$19(a0)
		move.l	#byte_23680,$3C(a0)
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_23572
		move.l	#Map_23886,4(a0)
		move.w	#$6430,2(a0)
		move.b	#$10,$19(a0)
		move.l	#byte_23698,$3C(a0)

loc_23572:				
		bsr.w	loc_238C4
		move.b	#4,1(a0)
		move.b	#4,$18(a0)

loc_23582:				
		move.w	(v_enemy_combo).w,$38(a0)
		move.b	($FFFFB01C).w,$32(a0)
		move.b	($FFFFB05C).w,$33(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	8(a0),d4
		bsr.w	loc_238D0
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_235BC

loc_235B8:				
		bra.w	loc_238BE
; ===========================================================================

loc_235BC:				
		cmpi.b	#$18,d0
		bne.s	loc_235EA
		cmpi.b	#2,$32(a0)
		beq.s	loc_235D2
		cmpi.b	#2,$33(a0)
		bne.s	loc_235B8

loc_235D2:				
		lea	($FFFFB000).w,a1
		move.b	$32(a0),d0
		bsr.s	loc_23602
		lea	($FFFFB040).w,a1
		move.b	$33(a0),d0
		bsr.s	loc_23602
		bra.w	loc_23652
; ===========================================================================

loc_235EA:				
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_2363A
		cmpi.b	#2,$32(a0)
		bne.s	loc_235B8
		lea	($FFFFB000).w,a1
		bsr.s	loc_23608
		bra.s	loc_23652
; ===========================================================================

loc_23602:				
		cmpi.b	#2,d0
		bne.s	loc_23626

loc_23608:				
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		move.w	#-$300,$12(a1)

loc_23626:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		rts	
; ===========================================================================

loc_2363A:				
		andi.b	#$10,d0
		beq.w	loc_235B8
		cmpi.b	#2,$33(a0)
		bne.w	loc_235B8
		lea	($FFFFB040).w,a1
		bsr.s	loc_23608

loc_23652:				
		move.w	$38(a0),(v_enemy_combo).w
		andi.b	#-$19,$22(a0)
		movea.l	$3C(a0),a4
		bsr.w	loc_238CA
		bsr.w	loc_236A8

loc_2366A:				
		bsr.w	loc_238D6
		addi.w	#$18,$12(a0)
		tst.b	1(a0)
		bpl.w	loc_238B2
		bra.w	loc_238AC
; ===========================================================================
byte_23680:	dc.b $FE,  0,$FE,  0,  0,  0,$FD,$80,  2,  0,$FE,  0,$FE,$40,$FE,$40; 0
					
		dc.b   0,  0,$FE,  0,  1,$C0,$FE,$40; 16
byte_23698:	dc.b $FF,  0,$FE,  0,  1,  0,$FE,  0,$FF,$40,$FE,$40,  0,$C0,$FE,$40; 0
					
; ===========================================================================

loc_236A8:				
		bsr.w	loc_238B8
		bne.s	locret_236F0
		_move.b	#$29,0(a1) ; ')'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	(v_enemy_combo).w,d2
		addq.w	#2,(v_enemy_combo).w
		cmpi.w	#6,d2
		bcs.s	loc_236D0
		moveq	#6,d2

loc_236D0:				
		moveq	#0,d0
		move.w	word_236F2(pc,d2.w),d0
		cmpi.w	#$20,(v_enemy_combo).w ; ' '
		bcs.s	loc_236E4
		move.w	#$3E8,d0
		moveq	#$A,d2

loc_236E4:				
		jsr	sub_40D06
		lsr.w	#1,d2
		move.b	d2,$1A(a1)

locret_236F0:				
		rts	
; ===========================================================================
word_236F2:	dc.w	$A		; 0 
		dc.w   $14		; 1
		dc.w   $32		; 2
		dc.w   $64		; 3
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_236FA:				
		dc.w word_2370E-Map_236FA; 0
		dc.w word_23758-Map_236FA; 1
		dc.w word_237AA-Map_236FA; 2
		dc.w word_237AA-Map_236FA; 3
		dc.w word_237EC-Map_236FA; 4
		dc.w word_237EC-Map_236FA; 5
		dc.w word_2381E-Map_236FA; 6
		dc.w word_2381E-Map_236FA; 7
		dc.w word_23840-Map_236FA; 8
		dc.w word_23840-Map_236FA; 9
word_2370E:	dc.w 9			
		dc.w $D80D,  $12,    9,$FFF0; 0
		dc.w $E805,  $4A,  $25,$FFF0; 4
		dc.w $E805,  $4A,  $25,	   0; 8
		dc.w $F805,  $4E,  $27,$FFF0; 12
		dc.w $F805,  $4E,  $27,	   0; 16
		dc.w  $805,  $52,  $29,$FFF0; 20
		dc.w  $805,  $52,  $29,	   0; 24
		dc.w $1805,  $52,  $29,$FFF0; 28
		dc.w $1805,  $52,  $29,	   0; 32
word_23758:	dc.w $A			
		dc.w $D805,  $12,    9,$FFF0; 0
		dc.w $D805,  $16,   $B,	   0; 4
		dc.w $E805,  $4A,  $25,$FFF0; 8
		dc.w $E805,  $4A,  $25,	   0; 12
		dc.w $F805,  $4E,  $27,$FFF0; 16
		dc.w $F805,  $4E,  $27,	   0; 20
		dc.w  $805,  $52,  $29,$FFF0; 24
		dc.w  $805,  $52,  $29,	   0; 28
		dc.w $1805,  $52,  $29,$FFF0; 32
		dc.w $1805,  $52,  $29,	   0; 36
word_237AA:	dc.w 8			
		dc.w $E005,  $4A,  $25,$FFF0; 0
		dc.w $E005,  $4A,  $25,	   0; 4
		dc.w $F005,  $4E,  $27,$FFF0; 8
		dc.w $F005,  $4E,  $27,	   0; 12
		dc.w	 5,  $52,  $29,$FFF0; 16
		dc.w	 5,  $52,  $29,	   0; 20
		dc.w $1005,  $52,  $29,$FFF0; 24
		dc.w $1005,  $52,  $29,	   0; 28
word_237EC:	dc.w 6			
		dc.w $E805,  $4E,  $27,$FFF0; 0
		dc.w $E805,  $4E,  $27,	   0; 4
		dc.w $F805,  $52,  $29,$FFF0; 8
		dc.w $F805,  $52,  $29,	   0; 12
		dc.w  $805,  $52,  $29,$FFF0; 16
		dc.w  $805,  $52,  $29,	   0; 20
word_2381E:	dc.w 4			
		dc.w $F005,  $52,  $29,$FFF0; 0
		dc.w $F005,  $52,  $29,	   0; 4
		dc.w	 5,  $52,  $29,$FFF0; 8
		dc.w	 5,  $52,  $29,	   0; 12
word_23840:	dc.w 2			
		dc.w $F805,  $52,  $29,$FFF0; 0
		dc.w $F805,  $52,  $29,	   0; 4
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23852:				
		dc.w word_23854-Map_23852
word_23854:	dc.w 6			
		dc.w $F005,    0,    0,$FFE8; 0
		dc.w $F005,    4,    2,$FFF8; 4
		dc.w $F005,    8,    4,	   8; 8
		dc.w	 5,   $C,    6,$FFE8; 12
		dc.w	 5,  $10,    8,$FFF8; 16
		dc.w	 5,  $10,    8,	   8; 20
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23886:				
		dc.w word_23888-Map_23886
word_23888:	dc.w 4			
		dc.w $F005,    0,    0,$FFF0; 0
		dc.w $F005, $800, $800,	   0; 4
		dc.w	 5,    0,    0,$FFF0; 8
		dc.w	 5, $800, $800,	   0; 12
; ===========================================================================
		nop	

loc_238AC:				
		jmp	DisplaySprite
; ===========================================================================

loc_238B2:				
		jmp	DeleteObject
; ===========================================================================

loc_238B8:				
		jmp	SingleObjLoad
; ===========================================================================

loc_238BE:				
		jmp	MarkObjGone
; ===========================================================================

loc_238C4:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_238CA:				
		jmp	sub_15E18
; ===========================================================================

loc_238D0:				
		jmp	SolidObject
; ===========================================================================

loc_238D6:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_238DC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_238EA(pc,d0.w),d1
		jmp	off_238EA(pc,d1.w)
; ===========================================================================
off_238EA:	dc.w loc_238F8-off_238EA; 0 
		dc.w loc_23944-off_238EA; 1
byte_238EE:	dc.b $C0		; 0
		dc.b   0		; 1
		dc.b $C0		; 2
		dc.b   0		; 3
		dc.b $C0		; 4
		dc.b   0		; 5
		dc.b $E0		; 6
		dc.b   0		; 7
		dc.b $C0		; 8
		dc.b   0		; 9
; ===========================================================================

loc_238F8:				
		addq.b	#2,$24(a0)
		move.w	$C(a0),$32(a0)
		move.w	8(a0),$30(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	byte_238EE(pc,d0.w),$19(a0)
		cmpi.b	#6,d0
		bcs.s	loc_23944
		bne.s	loc_23926
		cmpi.w	#$380,(v_camera_y_pos).w
		bcc.s	loc_23944
		bra.s	loc_2392E
; ===========================================================================

loc_23926:				
		cmpi.w	#$380,(v_camera_y_pos).w
		bcs.s	loc_23944

loc_2392E:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_23940
		bclr	#7,2(a2,d0.w)

loc_23940:				
		bra.w	loc_23AD0
; ===========================================================================

loc_23944:				
		move.w	$32(a0),d0
		add.w	(v_camera_y_pos_offset).w,d0
		move.w	d0,$C(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	off_23968(pc,d0.w),d1
		jsr	off_23968(pc,d1.w)
		tst.b	(f_screen_shake_htz).w
		beq.w	loc_23ADC
		rts	
; ===========================================================================
off_23968:	dc.w loc_23972-off_23968; 0 
		dc.w loc_23972-off_23968; 1
		dc.w loc_2398A-off_23968; 2
		dc.w loc_239D0-off_23968; 3
		dc.w loc_239EA-off_23968; 4
; ===========================================================================

loc_23972:				
		move.w	#$CB,d1	
		move.w	#$80,d2	
		move.w	#$81,d3	
		move.w	8(a0),d4
		bsr.w	loc_23AE8
		bra.w	loc_23AE2
; ===========================================================================

loc_2398A:				
		move.w	#$CB,d1	
		move.w	#$78,d2	; 'x'
		move.w	#$79,d3	; 'y'
		move.w	8(a0),d4
		bsr.w	loc_23AE8
		bsr.w	loc_23AE2

loc_239A2:				
		btst	#3,$22(a0)
		beq.s	loc_239B8
		move.l	a0,-(sp)
		movea.l	a0,a1
		lea	($FFFFB000).w,a0
		bsr.w	loc_23AD6
		movea.l	(sp)+,a0

loc_239B8:				
		btst	#4,$22(a0)
		beq.s	locret_239CE
		move.l	a0,-(sp)
		movea.l	a0,a1
		lea	($FFFFB040).w,a0
		bsr.w	loc_23AD6
		movea.l	(sp)+,a0

locret_239CE:				
		rts	
; ===========================================================================

loc_239D0:				
		move.w	#$EB,d1	
		move.w	#$78,d2	; 'x'
		move.w	#$79,d3	; 'y'
		move.w	8(a0),d4
		bsr.w	loc_23AE8
		bsr.w	loc_23AE2
		bra.s	loc_239A2
; ===========================================================================

loc_239EA:				
		move.w	#$CB,d1	
		move.w	#$2E,d2	; '.'
		move.w	8(a0),d4
		lea	(byte_23A04).l,a2
		bsr.w	loc_23AEE
		bra.w	loc_23AE2
; ===========================================================================
byte_23A04:	dc.b $30,$30,$30,$30,$30,$30,$30,$30,$2F,$2F,$2E,$2E,$2D,$2D,$2C,$2C; 0
					
		dc.b $2B,$2B,$2A,$2A,$29,$29,$28,$28,$27,$27,$26,$26,$25,$25,$24,$24; 16
		dc.b $23,$23,$22,$22,$21,$21,$20,$20,$1F,$1F,$1E,$1E,$1D,$1D,$1C,$1C; 32
		dc.b $1B,$1B,$1A,$1A,$19,$19,$18,$18,$17,$17,$16,$16,$15,$15,$14,$14; 48
		dc.b $13,$13,$12,$12,$11,$11,$10,$10, $F, $F, $E, $E, $D, $D, $C, $C; 64
		dc.b  $B, $B, $A, $A,  9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4; 80
		dc.b   3,  3,  2,  2,  1,  1,  0,  0,$FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC; 96
		dc.b $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8,$F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4; 112
		dc.b $F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0,$EF,$EF,$EE,$EE,$ED,$ED,$EC,$EC; 128
		dc.b $EB,$EB,$EA,$EA,$E9,$E9,$E8,$E8,$E7,$E7,$E6,$E6,$E5,$E5,$E4,$E4; 144
		dc.b $E3,$E3,$E2,$E2,$E1,$E1,$E0,$E0,$DF,$DF,$DE,$DE,$DD,$DD,$DC,$DC; 160
		dc.b $DB,$DB,$DA,$DA,$D9,$D9,$D8,$D8,$D7,$D7,$D6,$D6,$D5,$D5,$D4,$D4; 176
		dc.b $D3,$D3,$D2,$D2,$D1,$D1,$D0,$D0,$D0,$D0,$D0,$D0; 192
; ===========================================================================

loc_23AD0:				
		jmp	DeleteObject
; ===========================================================================

loc_23AD6:				
		jmp	loc_3F862
; ===========================================================================

loc_23ADC:				
		jmp	MarkObjGone3
; ===========================================================================

loc_23AE2:				
		jmp	loc_19EF0
; ===========================================================================

loc_23AE8:				
		jmp	loc_19778
; ===========================================================================

loc_23AEE:				
		jmp	loc_197D0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Platform that	shoots up in the air from OOZ
; ----------------------------------------------------------------------------

Sprite_23AF4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_23B02(pc,d0.w),d1
		jmp	off_23B02(pc,d1.w)
; ===========================================================================
off_23B02:	dc.w loc_23B08-off_23B02; 0 
		dc.w loc_23B90-off_23B02; 1
		dc.w loc_23D9A-off_23B02; 2
; ===========================================================================

loc_23B08:				
		addq.b	#2,$24(a0)
		move.l	#Map_23DDC,4(a0)
		move.w	#$632C,2(a0)
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$18,$19(a0)
		move.w	$C(a0),$30(a0)
		addq.b	#2,$25(a0)
		move.w	#$78,$36(a0) ; 'x'
		tst.b	$28(a0)
		beq.s	loc_23B48
		move.b	#4,$25(a0)

loc_23B48:				
		bsr.w	loc_23E32
		bne.s	loc_23B90
		_move.b	0(a0),0(a1)
		move.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		subi.w	#$10,$C(a1)
		move.l	#off_23DF0,4(a1)
		move.w	#$62E2,2(a1)
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.l	a0,$3C(a1)

loc_23B90:				
					
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_23BBC(pc,d0.w),d1
		jsr	off_23BBC(pc,d1.w)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_23E38
		bra.w	loc_23E2C
; ===========================================================================
off_23BBC:	dc.w loc_23BC6-off_23BBC; 0 
		dc.w loc_23BEA-off_23BBC; 1
		dc.w loc_23C26-off_23BBC; 2
		dc.w loc_23D20-off_23BBC; 3
		dc.w locret_23D98-off_23BBC; 4
; ===========================================================================

loc_23BC6:				
		subq.w	#1,$36(a0)
		bpl.s	locret_23BE8
		move.w	#$78,$36(a0) ; 'x'
		move.l	#-$96800,$32(a0)
		addq.b	#2,$25(a0)
		move.w	#$D4,d0	
		jsr	(PlaySoundLocal).l

locret_23BE8:				
		rts	
; ===========================================================================

loc_23BEA:				
		move.l	$C(a0),d1
		add.l	$32(a0),d1
		move.l	d1,$C(a0)
		addi.l	#$3800,$32(a0)
		swap	d1
		cmp.w	$30(a0),d1
		bcs.s	locret_23C24
		move.l	$32(a0),d0
		cmpi.l	#loc_10000,d0
		bcc.s	loc_23C16
		subq.b	#2,$25(a0)

loc_23C16:				
		lsr.l	#2,d0
		neg.l	d0
		move.l	d0,$32(a0)
		move.w	$30(a0),$C(a0)

locret_23C24:				
		rts	
; ===========================================================================

loc_23C26:				
		move.w	8(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$10,d3
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_23C9E
		cmpi.b	#$18,d0
		beq.s	loc_23CA0
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_23C52
		lea	($FFFFB040).w,a1
		addq.b	#1,d6

loc_23C52:				
		btst	d6,$22(a0)
		beq.s	locret_23C9E
		move.w	8(a1),d0
		cmp.w	d2,d0
		bcs.s	locret_23C9E
		cmp.w	d3,d0
		bcc.s	locret_23C9E
		move.b	#1,$2A(a1)
		move.w	#0,$14(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		bclr	#5,$22(a1)
		bclr	#7,2(a1)
		move.l	#-$96800,$32(a0)
		addq.b	#2,$25(a0)
		move.w	#$D4,d0	
		jsr	(PlaySoundLocal).l

locret_23C9E:				
		rts	
; ===========================================================================

loc_23CA0:				
		lea	($FFFFB000).w,a1
		move.w	8(a1),d0
		cmp.w	d2,d0
		bcs.s	locret_23D1E
		cmp.w	d3,d0
		bcc.s	locret_23D1E
		lea	($FFFFB040).w,a2
		move.w	8(a2),d0
		cmp.w	d2,d0
		bcs.s	locret_23D1E
		cmp.w	d3,d0
		bcc.s	locret_23D1E
		move.b	#1,$2A(a1)
		move.w	#0,$14(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		bclr	#5,$22(a1)
		bclr	#7,2(a1)
		move.b	#1,$2A(a2)
		move.w	#0,$14(a2)
		move.w	#0,$10(a2)
		move.w	#0,$12(a2)
		bclr	#5,$22(a2)
		bclr	#7,2(a2)
		move.l	#-$96800,$32(a0)
		addq.b	#2,$25(a0)
		move.w	#$D4,d0	
		jsr	(PlaySoundLocal).l

locret_23D1E:				
		rts	
; ===========================================================================

loc_23D20:				
		move.l	$C(a0),d1
		add.l	$32(a0),d1
		move.l	d1,$C(a0)
		addi.l	#$3800,$32(a0)
		swap	d1
		move.w	$30(a0),d0
		subi.w	#$7D,d0	; '}'
		cmp.w	d0,d1
		bne.s	locret_23D96
		addq.b	#2,$25(a0)
		lea	($FFFFB000).w,a1
		move.b	$22(a0),d0
		andi.b	#8,d0
		bsr.s	loc_23D60
		lea	($FFFFB040).w,a1
		move.b	$22(a0),d0
		andi.b	#$10,d0

loc_23D60:				
		beq.s	locret_23D96
		move.w	8(a0),8(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,$14(a1)
		bset	#1,$22(a1)
		move.w	#-$1000,$12(a1)
		bclr	#3,$22(a1)
		move.b	#0,$2A(a1)
		move.w	#$CC,d0	
		jsr	(PlaySoundLocal).l

locret_23D96:				
		rts	
; ===========================================================================

locret_23D98:				
		rts	
; ===========================================================================

loc_23D9A:				
		movea.l	$3C(a0),a1
		move.w	$C(a0),d0
		sub.w	$C(a1),d0
		cmpi.w	#$14,d0
		blt.s	loc_23DC2
		move.b	#-$65,$20(a0)
		lea	(off_23DD0).l,a1
		jsr	AnimateSprite
		bra.w	loc_23E2C
; ===========================================================================

loc_23DC2:				
		move.b	#0,$20(a0)
		move.b	#0,$1B(a0)
		rts	
; ===========================================================================
off_23DD0:	dc.w byte_23DD2-off_23DD0 
byte_23DD2:	dc.b   2,  2,  0,  2,  0,  2,  0,  1,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23DDC:				
		dc.w word_23DDE-Map_23DDC
word_23DDE:	dc.w 2			
		dc.w $F809,    0,    0,$FFE8; 0
		dc.w $F809, $800, $800,	   0; 4
off_23DF0:	dc.w word_23DF6-off_23DF0; 0 
		dc.w word_23E08-off_23DF0; 1
		dc.w word_23E1A-off_23DF0; 2
word_23DF6:	dc.w 2			
		dc.w $F806,    0,    0,$FFF0; 0
		dc.w $F806, $800, $800,	   0; 4
word_23E08:	dc.w 2			
		dc.w $F007,    6,    3,$FFF0; 0
		dc.w $F007, $806, $803,	   0; 4
word_23E1A:	dc.w 2			
		dc.w	 5,   $E,    7,$FFF0; 0
		dc.w	 5, $80E, $807,	   0; 4
; ===========================================================================

loc_23E2C:				
		jmp	MarkObjGone
; ===========================================================================

loc_23E32:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_23E38:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Oil in OOZ
; ----------------------------------------------------------------------------

Sprite_23E40:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_23E4E(pc,d0.w),d1
		jmp	off_23E4E(pc,d1.w)
; ===========================================================================
off_23E4E:	dc.w loc_23E66-off_23E4E; 0 
		dc.w loc_23F0A-off_23E4E; 1
		dc.w loc_23F5C-off_23E4E; 2
byte_23E54:	dc.b   0		; 0
		dc.b $68		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   0		; 4
		dc.b   0		; 5
		dc.b   1		; 6
		dc.b $E8		; 7
		dc.b $FF		; 8
		dc.b $E8		; 9
		dc.b   0		; 10
		dc.b $18		; 11
		dc.b   1		; 12
		dc.b $A8		; 13
		dc.b $FF		; 14
		dc.b $A8		; 15
		dc.b $FF		; 16
		dc.b $D8		; 17
; ===========================================================================

loc_23E66:				
		addq.b	#2,$24(a0)
		move.w	#-$3CF4,2(a0)
		bsr.w	loc_2401A
		moveq	#0,d1
		move.b	$28(a0),d1
		lea	byte_23E54(pc,d1.w),a2
		move.b	(a2)+,d1
		movea.l	a0,a1
		bra.s	loc_23EA8
; ===========================================================================

loc_23E84:				
		bsr.w	loc_24014
		bne.s	loc_23ED4
		_move.b	0(a0),0(a1)
		move.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#1,$36(a1)

loc_23EA8:				
		move.l	#Map_23FE0,4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.b	#$18,$19(a1)
		move.b	#-$5B,$20(a1)
		move.w	8(a1),$30(a1)

loc_23ED4:				
		dbf	d1,loc_23E84
		move.l	a0,$3C(a1)
		move.l	a1,$3C(a0)
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$30(a0),d0
		sub.w	d1,d0
		move.w	d0,$32(a0)
		move.w	d0,$32(a1)
		add.w	d1,d0
		add.w	d1,d0
		move.w	d0,$34(a0)
		move.w	d0,$34(a1)
		move.w	(a2)+,d0
		add.w	d0,8(a0)
		move.w	(a2)+,d0
		add.w	d0,8(a1)

loc_23F0A:				
		bsr.s	loc_23F66
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_23F30
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_23F36

loc_23F30:				
		jmp	DisplaySprite
; ===========================================================================

loc_23F36:				
		movea.l	$3C(a0),a1
		cmpa.l	a0,a1
		beq.s	loc_23F44
		jsr	DeleteObject2

loc_23F44:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_23F56
		bclr	#7,2(a2,d0.w)

loc_23F56:				
		jmp	DeleteObject
; ===========================================================================

loc_23F5C:				
		bsr.s	loc_23F66
		bsr.s	loc_23FB0
		jmp	DisplaySprite
; ===========================================================================

loc_23F66:				
		tst.b	$36(a0)
		bne.s	loc_23F8E
		move.w	8(a0),d1
		subq.w	#1,d1
		cmp.w	$32(a0),d1
		bne.s	loc_23F88
		move.b	#1,$36(a0)
		move.w	#$D5,d0	
		jsr	(PlaySoundLocal).l

loc_23F88:				
		move.w	d1,8(a0)
		rts	
; ===========================================================================

loc_23F8E:				
		move.w	8(a0),d1
		addq.w	#1,d1
		cmp.w	$34(a0),d1
		bne.s	loc_23FAA
		move.b	#0,$36(a0)
		move.w	#$D5,d0	
		jsr	(PlaySoundLocal).l

loc_23FAA:				
		move.w	d1,8(a0)
		rts	
; ===========================================================================

loc_23FB0:				
		movea.l	$3C(a0),a1
		move.w	8(a0),d0
		subi.w	#$18,d0
		move.w	8(a1),d2
		addi.w	#$18,d2
		cmp.w	d0,d2
		bne.s	locret_23FDE
		eori.b	#1,$36(a0)
		eori.b	#1,$36(a1)
		move.w	#$D5,d0	
		jsr	(PlaySoundLocal).l

locret_23FDE:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_23FE0:				
		dc.w word_23FE2-Map_23FE0
word_23FE2:	dc.w 6			
word_23FE4:	dc.w $E005,    0,    0,$FFE8; 0
		dc.w $D80F,    4,    2,$FFF8; 4
		dc.w $F809,  $14,   $A,$FFE8; 8
		dc.w $F809,  $1A,   $D,	   0; 12
		dc.w $1005,$1000,$1000,$FFE8; 16
		dc.w  $80F,$1004,$1002,$FFF8; 20
; ===========================================================================

loc_24014:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2401A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

Oil:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2402E(pc,d0.w),d1
		jmp	off_2402E(pc,d1.w)
; ===========================================================================
off_2402E:	dc.w loc_24032-off_2402E; 0 
		dc.w loc_24054-off_2402E; 1
; ===========================================================================

loc_24032:				
		addq.b	#2,$24(a0)
		move.w	#$758,$C(a0)
		move.b	#$20,$19(a0) ; ' '
		move.w	$C(a0),$30(a0)
		move.b	#$30,$38(a0) ; '0'
		bset	#7,$22(a0)

loc_24054:				
		tst.w	(v_debug_active).w
		bne.w	locret_240E8
		lea	($FFFFB000).w,a1
		moveq	#8,d1
		move.b	$22(a0),d0
		and.b	d1,d0
		bne.s	loc_24078
		cmpi.b	#$30,$38(a0) ; '0'
		beq.s	loc_24082
		addq.b	#1,$38(a0)
		bra.s	loc_24082
; ===========================================================================

loc_24078:				
		tst.b	$38(a0)
		beq.s	loc_240D6
		subq.b	#1,$38(a0)

loc_24082:				
		moveq	#$20,d1	; ' '
		moveq	#0,d3
		move.b	$38(a0),d3
		moveq	#3,d6
		move.w	8(a1),d4
		move.w	d4,8(a0)
		bsr.w	loc_240F2
		lea	($FFFFB040).w,a1
		moveq	#$10,d1
		move.b	$22(a0),d0
		and.b	d1,d0
		bne.s	loc_240B4
		cmpi.b	#$30,$3A(a0) ; '0'
		beq.s	loc_240BE
		addq.b	#1,$3A(a0)
		bra.s	loc_240BE
; ===========================================================================

loc_240B4:				
		tst.b	$3A(a0)
		beq.s	loc_240D6
		subq.b	#1,$3A(a0)

loc_240BE:				
		moveq	#$20,d1	; ' '
		moveq	#0,d3
		move.b	$3A(a0),d3
		moveq	#4,d6
		move.w	8(a1),d4
		move.w	d4,8(a0)
		bsr.w	loc_240F2
		rts	
; ===========================================================================

loc_240D6:				
		not.b	d1
		and.b	d1,$22(a0)
		move.l	a0,-(sp)
		movea.l	a0,a2
		movea.l	a1,a0
		bsr.w	loc_240EC
		movea.l	(sp)+,a0

locret_240E8:				
		rts	
; ===========================================================================
		nop	

loc_240EC:				
		jmp	KillCharacter
; ===========================================================================

loc_240F2:				
		jmp	loc_19C48
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Strange spring from OOZ
; ----------------------------------------------------------------------------

Sprite_240F8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2410A(pc,d0.w),d1
		jsr	off_2410A(pc,d1.w)
		bra.w	loc_24CD0
; ===========================================================================
off_2410A:	dc.w loc_24110-off_2410A; 0 
		dc.w loc_24186-off_2410A; 1
		dc.w loc_2427A-off_2410A; 2
; ===========================================================================

loc_24110:				
		addq.b	#2,$24(a0)
		move.l	#Map_2451A,4(a0)
		move.w	#$43C5,2(a0)
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	off_24146(pc,d0.w),d0
		jmp	off_24146(pc,d0.w)
; ===========================================================================
off_24146:	dc.w loc_2416E-off_24146; 0 
		dc.w loc_2414A-off_24146; 1
; ===========================================================================

loc_2414A:				
		move.b	#4,$24(a0)
		move.b	#1,$1C(a0)
		move.b	#$A,$1A(a0)
		move.w	#$43C5,2(a0)
		move.b	#$14,$19(a0)
		move.w	8(a0),$34(a0)

loc_2416E:				
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_24182(pc,d0.w),$30(a0)
		bsr.w	loc_24CD6
		rts	
; ===========================================================================
word_24182:	dc.w $F000		; 0
		dc.w $F600		; 1
; ===========================================================================

loc_24186:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2419C
		tst.b	$32(a0)
		beq.s	loc_241A8
		subq.b	#1,$32(a0)
		bra.s	loc_241A8
; ===========================================================================

loc_2419C:				
		cmpi.b	#9,$32(a0)
		beq.s	loc_241C6
		addq.b	#1,$32(a0)

loc_241A8:				
		moveq	#0,d3
		move.b	$32(a0),d3
		move.b	d3,$1A(a0)
		add.w	d3,d3
		move.w	#$1B,d1
		move.w	#$14,d2
		move.w	8(a0),d4
		bsr.w	loc_24CE8
		rts	
; ===========================================================================

loc_241C6:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_241D4
		lea	($FFFFB040).w,a1
		moveq	#4,d6

loc_241D4:				
		bclr	d6,$22(a0)
		beq.w	locret_24278
		move.w	$30(a0),$12(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		bpl.s	loc_24206
		move.w	#0,$10(a1)

loc_24206:				
		btst	#0,d0
		beq.s	loc_24246
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_24236
		move.b	#1,$2C(a1)

loc_24236:				
		btst	#0,$22(a1)
		beq.s	loc_24246
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_24246:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2425C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_2425C:				
		cmpi.b	#8,d0
		bne.s	loc_2426E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_2426E:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

locret_24278:				
		rts	
; ===========================================================================

loc_2427A:				
		move.b	#0,$36(a0)
		move.w	#$1F,d1
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_24CE2
		cmpi.w	#1,d4
		bne.s	loc_242C0
		move.b	$22(a0),d1
		move.w	8(a0),d2
		sub.w	8(a1),d2
		bcs.s	loc_242B6
		eori.b	#1,d1

loc_242B6:				
		andi.b	#1,d1
		bne.s	loc_242C0
		bsr.w	loc_2433C

loc_242C0:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_24CE2
		cmpi.w	#1,d4
		bne.s	loc_242EE
		move.b	$22(a0),d1
		move.w	8(a0),d2
		sub.w	8(a1),d2
		bcs.s	loc_242E6
		eori.b	#1,d1

loc_242E6:				
		andi.b	#1,d1
		bne.s	loc_242EE
		bsr.s	loc_2433C

loc_242EE:				
		tst.b	$36(a0)
		bne.s	locret_2433A
		move.w	$34(a0),d0
		cmp.w	8(a0),d0
		beq.s	locret_2433A
		bcc.s	loc_2431C
		subq.b	#4,$1A(a0)
		subq.w	#4,8(a0)
		cmp.w	8(a0),d0
		bcs.s	loc_24336
		move.b	#$A,$1A(a0)
		move.w	$34(a0),8(a0)
		bra.s	loc_24336
; ===========================================================================

loc_2431C:				
		subq.b	#4,$1A(a0)
		addq.w	#4,8(a0)
		cmp.w	8(a0),d0
		bcc.s	loc_24336
		move.b	#$A,$1A(a0)
		move.w	$34(a0),8(a0)

loc_24336:				
		bsr.w	loc_243D0

locret_2433A:				
		rts	
; ===========================================================================

loc_2433C:				
		btst	#0,$22(a0)
		beq.s	loc_24378
		btst	#0,$22(a1)
		bne.w	locret_243CE
		tst.w	d0
		bne.w	loc_2435E
		tst.w	$14(a1)
		beq.s	locret_243CE
		bpl.s	loc_243C8
		bra.s	locret_243CE
; ===========================================================================

loc_2435E:				
		move.w	$34(a0),d0
		addi.w	#$12,d0
		cmp.w	8(a0),d0
		beq.s	loc_243C8
		addq.w	#1,8(a0)
		moveq	#1,d0
		move.w	#$40,d1	; '@'
		bra.s	loc_243A6
; ===========================================================================

loc_24378:				
		btst	#0,$22(a1)
		beq.s	locret_243CE
		tst.w	d0
		bne.w	loc_2438E
		tst.w	$14(a1)
		bmi.s	loc_243C8
		bra.s	locret_243CE
; ===========================================================================

loc_2438E:				
		move.w	$34(a0),d0
		subi.w	#$12,d0
		cmp.w	8(a0),d0
		beq.s	loc_243C8
		subq.w	#1,8(a0)
		moveq	#-1,d0
		move.w	#-$40,d1

loc_243A6:				
		add.w	d0,8(a1)
		move.w	d1,$14(a1)
		move.w	#0,$10(a1)
		move.w	$34(a0),d0
		sub.w	8(a0),d0
		bcc.s	loc_243C0
		neg.w	d0

loc_243C0:				
		addi.w	#$A,d0
		move.b	d0,$1A(a0)

loc_243C8:				
		move.b	#1,$36(a0)

locret_243CE:				
		rts	
; ===========================================================================

loc_243D0:				
		move.b	$22(a0),d0
		andi.b	#$60,d0	; '`'
		beq.w	locret_244D0
		lea	($FFFFB000).w,a1
		moveq	#5,d6
		bsr.s	loc_243EA
		lea	($FFFFB040).w,a1
		moveq	#6,d6

loc_243EA:				
		bclr	d6,$22(a0)
		beq.w	locret_244D0
		move.w	$34(a0),d0
		sub.w	8(a0),d0
		bcc.s	loc_243FE
		neg.w	d0

loc_243FE:				
		addi.w	#$A,d0
		lsl.w	#7,d0
		neg.w	d0
		move.w	d0,$10(a1)
		subq.w	#4,8(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_2442C
		bclr	#0,$22(a1)
		addi.w	#8,8(a1)
		neg.w	$10(a1)

loc_2442C:				
		move.w	#$F,$2E(a1)
		move.w	$10(a1),$14(a1)
		btst	#2,$22(a1)
		bne.s	loc_24446
		move.b	#0,$1C(a1)

loc_24446:				
		move.b	$28(a0),d0
		bpl.s	loc_24452
		move.w	#0,$12(a1)

loc_24452:				
		btst	#0,d0
		beq.s	loc_24492
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_24482
		move.b	#3,$2C(a1)

loc_24482:				
		btst	#0,$22(a1)
		beq.s	loc_24492
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_24492:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_244A8
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_244A8:				
		cmpi.b	#8,d0
		bne.s	loc_244BA
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_244BA:				
		bclr	#5,$22(a1)
		move.b	#1,$1D(a1)
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

locret_244D0:				
		rts	
; ===========================================================================
off_244D2:	dc.w byte_244D6-off_244D2; 0 
		dc.w byte_244F8-off_244D2; 1
byte_244D6:	dc.b   0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,  9,  9,  9; 0
					
		dc.b   9,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0,  0,  0,  0,  0,  0; 16
		dc.b   0,$FF		; 32
byte_244F8:	dc.b   0, $A, $B, $C, $D, $E, $F,$10,$11,$12,$13,$13,$13,$13,$13,$13; 0
					
		dc.b $13,$13,$12,$11,$10, $F, $E, $D, $C, $B, $A, $A, $A, $A, $A, $A; 16
		dc.b  $A,$FF		; 32
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2451A:				
		dc.w word_24554-Map_2451A; 0
		dc.w word_2457E-Map_2451A; 1
		dc.w word_245A8-Map_2451A; 2
		dc.w word_245D2-Map_2451A; 3
		dc.w word_245FC-Map_2451A; 4
		dc.w word_24626-Map_2451A; 5
		dc.w word_24650-Map_2451A; 6
		dc.w word_2467A-Map_2451A; 7
		dc.w word_246A4-Map_2451A; 8
		dc.w word_246CE-Map_2451A; 9
		dc.w word_246F8-Map_2451A; 10
		dc.w word_24722-Map_2451A; 11
		dc.w word_2474C-Map_2451A; 12
		dc.w word_24776-Map_2451A; 13
		dc.w word_247A0-Map_2451A; 14
		dc.w word_247CA-Map_2451A; 15
		dc.w word_247F4-Map_2451A; 16
		dc.w word_2481E-Map_2451A; 17
		dc.w word_24848-Map_2451A; 18
		dc.w word_24872-Map_2451A; 19
		dc.w word_2489C-Map_2451A; 20
		dc.w word_248C6-Map_2451A; 21
		dc.w word_248F0-Map_2451A; 22
		dc.w word_2491A-Map_2451A; 23
		dc.w word_24944-Map_2451A; 24
		dc.w word_2496E-Map_2451A; 25
		dc.w word_24998-Map_2451A; 26
		dc.w word_249C2-Map_2451A; 27
		dc.w word_249EC-Map_2451A; 28
word_24554:	dc.w 5			
		dc.w $EC0C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $408,$1007,$1003,$FFF4; 8
		dc.w $FC08,$300A,$3005,$FFF4; 12
		dc.w $F404,$100D,$1006,$FFF8; 16
word_2457E:	dc.w 5			
		dc.w $EE0C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $408,$1007,$1003,$FFF4; 8
		dc.w $FC08,$300A,$3005,$FFF4; 12
		dc.w $F604,$100D,$1006,$FFF8; 16
word_245A8:	dc.w 5			
		dc.w $F00C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $408,$1007,$1003,$FFF4; 8
		dc.w $FE08,$300A,$3005,$FFF4; 12
		dc.w $F804,$100D,$1006,$FFF8; 16
word_245D2:	dc.w 5			
		dc.w $F20C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $608,$1007,$1003,$FFF4; 8
		dc.w	 8,$300A,$3005,$FFF4; 12
		dc.w $FA04,$100D,$1006,$FFF8; 16
word_245FC:	dc.w 5			
		dc.w $F40C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $608,$1007,$1003,$FFF4; 8
		dc.w	 8,$300A,$3005,$FFF4; 12
		dc.w $FC04,$100D,$1006,$FFF8; 16
word_24626:	dc.w 5			
		dc.w $F60C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $608,$1007,$1003,$FFF4; 8
		dc.w  $208,$300A,$3005,$FFF4; 12
		dc.w $FE04,$100D,$1006,$FFF8; 16
word_24650:	dc.w 5			
		dc.w $F80C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $808,$1007,$1003,$FFF4; 8
		dc.w  $408,$300A,$3005,$FFF4; 12
		dc.w	 4,$100D,$1006,$FFF8; 16
word_2467A:	dc.w 5			
		dc.w $FA0C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $808,$1007,$1003,$FFF4; 8
		dc.w  $408,$300A,$3005,$FFF4; 12
		dc.w  $204,$100D,$1006,$FFF8; 16
word_246A4:	dc.w 5			
		dc.w $FC0C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $808,$1007,$1003,$FFF4; 8
		dc.w  $608,$300A,$3005,$FFF4; 12
		dc.w  $404,$100D,$1006,$FFF8; 16
word_246CE:	dc.w 5			
		dc.w $FE0C,$3000,$3000,$FFF0; 0
		dc.w  $C08,$3004,$3002,$FFF4; 4
		dc.w  $A08,$1007,$1003,$FFF4; 8
		dc.w  $808,$300A,$3005,$FFF4; 12
		dc.w  $604,$100D,$1006,$FFF8; 16
word_246F8:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFEC; 4
		dc.w $F402,  $16,   $B,$FFF4; 8
		dc.w $F402,$2019,$200C,$FFFC; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_24722:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFED; 4
		dc.w $F402,  $16,   $B,$FFF5; 8
		dc.w $F402,$2019,$200C,$FFFD; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_2474C:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C
		dc.w $F402,$2013,$2009,$FFEE
		dc.w $F402,  $16,   $B,$FFF6
		dc.w $F402,$2019,$200C,$FFFE
		dc.w $F801,  $1C,   $E,	   4
word_24776:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFEF; 4
		dc.w $F402,  $16,   $B,$FFF7; 8
		dc.w $F402,$2019,$200C,$FFFF; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_247A0:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF0; 4
		dc.w $F402,  $16,   $B,$FFF8; 8
		dc.w $F402,$2019,$200C,$FFFE; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_247CA:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF1; 4
		dc.w $F402,  $16,   $B,$FFF9; 8
		dc.w $F402,$2019,$200C,$FFFF; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_247F4:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF2; 4
		dc.w $F402,  $16,   $B,$FFF8; 8
		dc.w $F402,$2019,$200C,$FFFE; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_2481E:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF3; 4
		dc.w $F402,  $16,   $B,$FFF9; 8
		dc.w $F402,$2019,$200C,$FFFF; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_24848:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF4; 4
		dc.w $F402,  $16,   $B,$FFFA; 8
		dc.w $F402,$2019,$200C,	   0; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_24872:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF5; 4
		dc.w $F402,  $16,   $B,$FFFB; 8
		dc.w $F402,$2019,$200C,	   1; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_2489C:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF6; 4
		dc.w $F402,  $16,   $B,$FFFC; 8
		dc.w $F402,$2019,$200C,	   0; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_248C6:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF7; 4
		dc.w $F402,  $16,   $B,$FFFD; 8
		dc.w $F402,$2019,$200C,	   1; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_248F0:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF8; 4
		dc.w $F402,  $16,   $B,$FFFC; 8
		dc.w $F402,$2019,$200C,	   0; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_2491A:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFF9; 4
		dc.w $F402,  $16,   $B,$FFFD; 8
		dc.w $F402,$2019,$200C,	   1; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_24944:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFFA; 4
		dc.w $F402,  $16,   $B,$FFFE; 8
		dc.w $F402,$2019,$200C,	   2; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_2496E:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFFB; 4
		dc.w $F402,  $16,   $B,$FFFF; 8
		dc.w $F402,$2019,$200C,	   3; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_24998:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFFC; 4
		dc.w $F402,  $16,   $B,	   0; 8
		dc.w $F402,$2019,$200C,	   2; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_249C2:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFFD; 4
		dc.w $F402,  $16,   $B,	   1; 8
		dc.w $F402,$2019,$200C,	   3; 12
		dc.w $F801,  $1C,   $E,	   4; 16
word_249EC:	dc.w 5			
		dc.w $F003,$200F,$2007,	  $C; 0
		dc.w $F402,$2013,$2009,$FFFE; 4
		dc.w $F402,  $16,   $B,	   0; 8
		dc.w $F402,$2019,$200C,	   2; 12
		dc.w $F801,  $1C,   $E,	   4; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Ball sitting on strange spring from OOZ
; ----------------------------------------------------------------------------

Sprite_24A16:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_24A24(pc,d0.w),d1
		jmp	off_24A24(pc,d1.w)
; ===========================================================================
off_24A24:	dc.w loc_24A2C-off_24A24; 0 
		dc.w loc_24AEA-off_24A24; 1
		dc.w loc_24B38-off_24A24; 2
		dc.w loc_24BDC-off_24A24; 3
; ===========================================================================

loc_24A2C:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_24A48
		bclr	#7,2(a2,d0.w)
		bset	#0,2(a2,d0.w)
		bne.w	loc_24CC4

loc_24A48:				
		addq.b	#2,$24(a0)
		move.b	#$F,$16(a0)
		move.b	#$F,$17(a0)
		move.l	#Map_24C52,4(a0)
		move.w	#$6354,2(a0)
		bsr.w	loc_24CD6
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$36(a0)
		move.b	#$10,$19(a0)
		move.b	#0,$1A(a0)
		move.w	#0,$14(a0)
		move.b	#1,$1F(a0)
		bsr.w	loc_24CCA
		bne.s	loc_24AE6
		_move.b	#$46,0(a1) ; 'F'
		addq.b	#6,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$12,$C(a1)
		move.l	#Map_2451A,4(a1)
		move.w	#$43C5,2(a1)
		ori.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.b	#9,$1A(a1)
		move.l	a0,$3C(a1)

loc_24AE6:				
		move.l	a1,$3C(a0)

loc_24AEA:				
		btst	#6,(v_joypad2_press_actual).w
		bne.s	loc_24B04
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#4,d0
		tst.b	(a2,d0.w)
		beq.s	loc_24B30

loc_24B04:				
		addq.b	#2,$24(a0)
		bset	#1,$22(a0)
		move.w	#-$300,$12(a0)
		move.w	#$100,$14(a0)
		movea.l	$3C(a0),a1
		move.b	#1,$30(a1)
		btst	#0,$22(a0)
		beq.s	loc_24B30
		neg.w	$14(a0)

loc_24B30:				
		bsr.w	loc_24BF0
		bra.w	loc_24CD0
; ===========================================================================

loc_24B38:				
		move.w	8(a0),-(sp)
		bsr.w	loc_24CEE

loc_24B40:
		btst	#1,$22(a0)
		beq.s	loc_24B8C
		addi.w	#$18,$12(a0)
		bmi.s	loc_24B8A
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		bcs.s	loc_24BC4
		jsr	loc_1EDFA
		tst.w	d1
		bpl.w	loc_24B8A
		add.w	d1,$C(a0)
		clr.w	$12(a0)
		bclr	#1,$22(a0)
		move.w	#$100,$10(a0)
		btst	#0,$22(a0)
		beq.s	loc_24B8A
		neg.w	$10(a0)

loc_24B8A:				
		bra.s	loc_24BA4
; ===========================================================================

loc_24B8C:				
		jsr	loc_1EDFA
		cmpi.w	#8,d1
		blt.s	loc_24BA0
		bset	#1,$22(a0)
		bra.s	loc_24BA4
; ===========================================================================

loc_24BA0:				
		add.w	d1,$C(a0)

loc_24BA4:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	(sp)+,d4
		bsr.w	loc_24CDC
		bsr.w	loc_24BF0
		bra.w	loc_24CD0
; ===========================================================================

loc_24BC4:				
		move.w	(sp)+,d4

loc_24BC6:
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_24BD8
		bclr	#7,2(a2,d0.w)

loc_24BD8:				
		bra.w	loc_24CC4
; ===========================================================================

loc_24BDC:				
		tst.b	$30(a0)
		beq.s	loc_24BEC
		subq.b	#1,$1A(a0)
		bne.s	loc_24BEC

loc_24BE8:
		clr.b	$30(a0)

loc_24BEC:				
		bra.w	loc_24CD0
; ===========================================================================

loc_24BF0:				
		tst.b	$1A(a0)
		beq.s	loc_24BFE
		move.b	#0,$1A(a0)
		rts	
; ===========================================================================

loc_24BFE:				
		move.b	$14(a0),d0
		beq.s	loc_24C2A
		bmi.s	loc_24C32
		subq.b	#1,$1E(a0)
		bpl.s	loc_24C2A
		neg.b	d0
		addq.b	#8,d0
		bcs.s	loc_24C14
		moveq	#0,d0

loc_24C14:				
		move.b	d0,$1E(a0)
		move.b	$1F(a0),d0
		addq.b	#1,d0
		cmpi.b	#4,d0
		bne.s	loc_24C26
		moveq	#1,d0

loc_24C26:				
		move.b	d0,$1F(a0)

loc_24C2A:				
		move.b	$1F(a0),$1A(a0)
		rts	
; ===========================================================================

loc_24C32:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_24C2A
		addq.b	#8,d0
		bcs.s	loc_24C3E
		moveq	#0,d0

loc_24C3E:				
		move.b	d0,$1E(a0)
		move.b	$1F(a0),d0
		subq.b	#1,d0
		bne.s	loc_24C4C
		moveq	#3,d0

loc_24C4C:				
		move.b	d0,$1F(a0)
		bra.s	loc_24C2A
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_24C52:				
		dc.w word_24C5A-Map_24C52; 0
		dc.w word_24C7C-Map_24C52; 1
		dc.w word_24C9E-Map_24C52; 2
		dc.w word_24CB0-Map_24C52; 3
word_24C5A:	dc.w 4			
		dc.w $F005,    0,    0,$FFF0; 0
		dc.w $F005,    4,    2,	   0; 4
		dc.w	 5,$1804,$1802,$FFF0; 8
		dc.w	 5,$1004,$1002,	   0; 12
word_24C7C:	dc.w 4			
		dc.w $F005,    8,    4,$FFF0; 0
		dc.w $F005, $808, $804,	   0; 4
		dc.w	 5,$1008,$1004,$FFF0; 8
		dc.w	 5,$1808,$1804,	   0; 12
word_24C9E:	dc.w 2			
		dc.w $F00D,   $C,    6,$FFF0
		dc.w	$D,$180C,$1806,$FFF0
word_24CB0:	dc.w 2			
		dc.w $F00D, $80C, $806,$FFF0; 0
		dc.w	$D,$100C,$1006,$FFF0; 4
; ===========================================================================
		nop	

loc_24CC4:				
		jmp	DeleteObject
; ===========================================================================

loc_24CCA:				
		jmp	SingleObjLoad
; ===========================================================================

loc_24CD0:				
		jmp	MarkObjGone
; ===========================================================================

loc_24CD6:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_24CDC:				
		jmp	SolidObject
; ===========================================================================

loc_24CE2:				
		jmp	loc_1978E
; ===========================================================================

loc_24CE8:				
		jmp	loc_19880
; ===========================================================================

loc_24CEE:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Button
; ----------------------------------------------------------------------------

Sprite_24CF4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_24D02(pc,d0.w),d1
		jmp	off_24D02(pc,d1.w)
; ===========================================================================
off_24D02:	dc.w loc_24D06-off_24D02; 0 
		dc.w loc_24D32-off_24D02; 1
; ===========================================================================

loc_24D06:				
		addq.b	#2,$24(a0)
		move.l	#Map_24D96,4(a0)
		move.w	#$424,2(a0)
		bsr.w	loc_24DC2
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		addq.w	#4,$C(a0)

loc_24D32:				
		tst.b	1(a0)
		bpl.s	loc_24D92
		move.w	#$1B,d1
		move.w	#4,d2
		move.w	#5,d3
		move.w	8(a0),d4
		bsr.w	loc_24DC8
		move.b	#0,$1A(a0)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		lea	(a3,d0.w),a3
		moveq	#0,d3
		btst	#6,$28(a0)
		beq.s	loc_24D6E
		moveq	#7,d3

loc_24D6E:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_24D7C
		bclr	d3,(a3)
		bra.s	loc_24D92
; ===========================================================================

loc_24D7C:				
		tst.b	(a3)
		bne.s	loc_24D8A
		move.w	#$CD,d0	
		jsr	(PlaySound).l

loc_24D8A:				
		bset	d3,(a3)
		move.b	#1,$1A(a0)

loc_24D92:				
		bra.w	loc_24DBC
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_24D96:				
		dc.w word_24D9C-Map_24D96; 0
		dc.w word_24DA6-Map_24D96; 1
		dc.w word_24DB0-Map_24D96; 2
word_24D9C:	dc.w 1			
		dc.w $F40D,    0,    0,$FFF0; 0
word_24DA6:	dc.w 1			
		dc.w $F40D,    8,    4,$FFF0; 0
word_24DB0:	dc.w 1			
		dc.w $F80D,    0,    0,$FFF0; 0
; ===========================================================================
		nop	

loc_24DBC:				
		jmp	MarkObjGone
; ===========================================================================

loc_24DC2:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_24DC8:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Block	thingy in OOZ that launches you	into the round ball things
; ----------------------------------------------------------------------------

Sprite_24DD0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_24DDE(pc,d0.w),d1
		jmp	off_24DDE(pc,d1.w)
; ===========================================================================
off_24DDE:	dc.w loc_24DE6-off_24DDE; 0 
		dc.w loc_24E26-off_24DDE; 1
		dc.w loc_24F3C-off_24DDE; 2
		dc.w loc_24F52-off_24DDE; 3
; ===========================================================================

loc_24DE6:				
		addq.b	#2,$24(a0)
		move.l	#Map_250BA,4(a0)
		move.w	#$6332,2(a0)
		tst.b	$28(a0)
		beq.s	loc_24E0A
		move.w	#$63FF,2(a0)
		move.b	#2,$1A(a0)

loc_24E0A:				
		bsr.w	loc_2522A
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		bset	#7,$22(a0)
		move.b	#4,$18(a0)

loc_24E26:				
		move.b	($FFFFB01C).w,$32(a0)
		move.b	($FFFFB05C).w,$33(a0)
		move.w	($FFFFB012).w,$34(a0)
		move.w	($FFFFB052).w,$36(a0)
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	8(a0),d4
		bsr.w	loc_25236
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_24E60

loc_24E5C:				
		bra.w	loc_25218
; ===========================================================================

loc_24E60:				
		cmpi.b	#$18,d0
		bne.s	loc_24E96
		cmpi.b	#2,$32(a0)
		beq.s	loc_24E76
		cmpi.b	#2,$33(a0)
		bne.s	loc_24E5C

loc_24E76:				
		lea	($FFFFB000).w,a1
		move.b	$32(a0),d0
		move.w	$34(a0),d1
		bsr.s	loc_24EB2
		lea	($FFFFB040).w,a1
		move.b	$33(a0),d0
		move.w	$36(a0),d1
		bsr.s	loc_24EB2
		bra.w	loc_24F04
; ===========================================================================

loc_24E96:				
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_24EE8
		cmpi.b	#2,$32(a0)
		bne.s	loc_24E5C
		lea	($FFFFB000).w,a1
		move.w	$34(a0),d1
		bsr.s	loc_24EB8
		bra.s	loc_24F04
; ===========================================================================

loc_24EB2:				
		cmpi.b	#2,d0
		bne.s	loc_24ED4

loc_24EB8:				
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		move.w	d1,$12(a1)

loc_24ED4:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		rts	
; ===========================================================================

loc_24EE8:				
		andi.b	#$10,d0
		beq.w	loc_24E5C
		cmpi.b	#2,$33(a0)
		bne.w	loc_24E5C
		lea	($FFFFB040).w,a1
		move.w	$36(a0),d1
		bsr.s	loc_24EB8

loc_24F04:				
		andi.b	#-$19,$22(a0)
		bsr.w	loc_2521E
		bne.s	loc_24F28
		moveq	#0,d0
		move.w	#$A,d1

loc_24F16:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_24F16
		move.b	#6,$24(a1)

loc_24F28:				
		lea	(word_2507A).l,a4
		addq.b	#1,$1A(a0)
		moveq	#$F,d1
		move.w	#$18,d2
		bsr.w	loc_25230

loc_24F3C:				
		bsr.w	loc_2523C
		addi.w	#$18,$12(a0)
		tst.b	1(a0)
		bpl.w	loc_25212
		bra.w	loc_2520C
; ===========================================================================

loc_24F52:				
		lea	($FFFFB000).w,a1
		lea	$2C(a0),a4
		bsr.s	loc_24F74
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4
		bsr.s	loc_24F74
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	loc_25224
		rts	
; ===========================================================================

loc_24F74:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_24F80(pc,d0.w),d0
		jmp	off_24F80(pc,d0.w)
; ===========================================================================
off_24F80:	dc.w loc_24F84-off_24F80; 0 
		dc.w loc_25036-off_24F80; 1
; ===========================================================================

loc_24F84:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0	; ' '
		bcc.w	locret_25034
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		tst.b	$28(a0)
		beq.s	loc_24FAA
		addi.w	#$10,d1

loc_24FAA:				
		cmpi.w	#$10,d1
		bcc.w	locret_25034
		cmpa.w	#-$4FC0,a1
		bne.s	loc_24FC2
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.w	locret_25034

loc_24FC2:				
		addq.b	#2,(a4)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,$14(a1)
		tst.b	$28(a0)
		beq.s	loc_24FF0
		move.w	8(a0),8(a1)
		move.w	#0,$10(a1)
		move.w	#-$800,$12(a1)
		bra.s	loc_25002
; ===========================================================================

loc_24FF0:				
		move.w	$C(a0),$C(a1)
		move.w	#$800,$10(a1)

loc_24FFC:
		move.w	#0,$12(a1)

loc_25002:				
		bclr	#5,$22(a0)

loc_25008:
		bclr	#5,$22(a1)

loc_2500E:
		bset	#1,$22(a1)

loc_25014:
		bset	#3,$22(a1)
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0	; ''
		move.b	d0,$3D(a1)
		move.w	#$BE,d0	
		jsr	(PlaySound).l

locret_25034:				
		rts	
; ===========================================================================

loc_25036:				
		tst.b	1(a1)
		bmi.s	loc_25054
		move.b	#0,$2A(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#0,(a4)
		rts	
; ===========================================================================

loc_25054:				
		move.l	8(a1),d2
		move.l	$C(a1),d3
		move.w	$10(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,8(a1)
		move.l	d3,$C(a1)
		rts	
; ===========================================================================
word_2507A:	dc.w $FC00		; 0 
		dc.w $FC00		; 1
		dc.w $FE00		; 2
		dc.w $FC00		; 3
		dc.w  $200		; 4
		dc.w $FC00		; 5
		dc.w  $400		; 6
		dc.w $FC00		; 7
		dc.w $FC40		; 8
		dc.w $FE00		; 9
		dc.w $FE40		; 10
		dc.w $FE00		; 11
		dc.w  $1C0		; 12
		dc.w $FE00		; 13
		dc.w  $3C0		; 14
		dc.w $FE00		; 15
		dc.w $FC80		; 16
		dc.w  $200		; 17
		dc.w $FE80		; 18
		dc.w  $200		; 19
		dc.w  $180		; 20
		dc.w  $200		; 21
		dc.w  $380		; 22
		dc.w  $200		; 23
		dc.w $FCC0		; 24
		dc.w  $400		; 25
		dc.w $FEC0		; 26
		dc.w  $400		; 27
		dc.w  $140		; 28
		dc.w  $400		; 29
		dc.w  $340		; 30
		dc.w  $400		; 31
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_250BA:				
		dc.w word_250C2-Map_250BA; 0
		dc.w word_250E4-Map_250BA; 1
		dc.w word_25166-Map_250BA; 2
		dc.w word_25188-Map_250BA; 3
word_250C2:	dc.w 4			
word_250C4:	dc.w $F003,    0,    0,$FFF0; 0
		dc.w $F003,    0,    0,$FFF8; 4
		dc.w $F003,    0,    0,	   0; 8
		dc.w $F003,    0,    0,	   8; 12
word_250E4:	dc.w $10		
		dc.w $F000,    0,    0,$FFF0; 0
		dc.w $F000,    0,    0,$FFF8; 4
		dc.w $F000,    0,    0,	   0; 8
		dc.w $F000,    0,    0,	   8; 12
		dc.w $F800,    1,    0,$FFF0; 16
		dc.w $F800,    1,    0,$FFF8; 20
		dc.w $F800,    1,    0,	   0; 24
		dc.w $F800,    1,    0,	   8; 28
		dc.w	 0,    2,    1,$FFF0; 32
		dc.w	 0,    2,    1,$FFF8; 36
		dc.w	 0,    2,    1,	   0; 40
		dc.w	 0,    2,    1,	   8; 44
		dc.w  $800,    3,    1,$FFF0; 48
		dc.w  $800,    3,    1,$FFF8; 52
		dc.w  $800,    3,    1,	   0; 56
		dc.w  $800,    3,    1,	   8; 60
word_25166:	dc.w 4			
		dc.w $F00C,    0,    0,$FFF0; 0
		dc.w $F80C,    0,    0,$FFF0; 4
		dc.w	$C,    0,    0,$FFF0; 8
		dc.w  $80C,    0,    0,$FFF0; 12
word_25188:	dc.w $10		
		dc.w $F000,    0,    0,$FFF0; 0
		dc.w $F000,    1,    0,$FFF8; 4
		dc.w $F000,    2,    1,	   0; 8
		dc.w $F000,    3,    1,	   8; 12
		dc.w $F800,    0,    0,$FFF0; 16
		dc.w $F800,    1,    0,$FFF8; 20
		dc.w $F800,    2,    1,	   0; 24
		dc.w $F800,    3,    1,	   8; 28
		dc.w	 0,    0,    0,$FFF0; 32
		dc.w	 0,    1,    0,$FFF8; 36
		dc.w	 0,    2,    1,	   0; 40
		dc.w	 0,    3,    1,	   8; 44
		dc.w  $800,    0,    0,$FFF0; 48
		dc.w  $800,    1,    0,$FFF8; 52
		dc.w  $800,    2,    1,	   0; 56
		dc.w  $800,    3,    1,	   8; 60
; ===========================================================================
		nop	

loc_2520C:				
		jmp	DisplaySprite
; ===========================================================================

loc_25212:				
		jmp	DeleteObject
; ===========================================================================

loc_25218:				
		jmp	MarkObjGone
; ===========================================================================

loc_2521E:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_25224:				
		jmp	MarkObjGone3
; ===========================================================================

loc_2522A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_25230:				
		jmp	sub_15E18
; ===========================================================================

loc_25236:				
		jmp	SolidObject
; ===========================================================================

loc_2523C:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Round	ball thing from	OOZ that fires you off in a different direction
; ----------------------------------------------------------------------------

Sprite_25244:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_25262(pc,d0.w),d1
		jsr	off_25262(pc,d1.w)
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	loc_25686
		bra.w	loc_25680
; ===========================================================================
off_25262:	dc.w loc_25276-off_25262; 0 
		dc.w loc_252C6-off_25262; 1
byte_25266:	dc.b   4,  0		; 0
		dc.b   6,  7		; 2
		dc.b   7,  0		; 4
		dc.b   5,  7		; 6
		dc.b   5,  0		; 8
		dc.b   4,  7		; 10
		dc.b   6,  0		; 12
		dc.b   7,  7		; 14
; ===========================================================================

loc_25276:				
		addq.b	#2,$24(a0)
		move.l	#Map_254FE,4(a0)
		move.w	#$6368,2(a0)
		bsr.w	loc_2568C
		move.b	$28(a0),d0
		andi.w	#$F,d0
		btst	#0,$22(a0)
		beq.s	loc_2529E
		addq.w	#4,d0

loc_2529E:				
		add.w	d0,d0
		move.b	byte_25266(pc,d0.w),1(a0)
		move.b	byte_25266+1(pc,d0.w),$3F(a0)
		beq.s	loc_252B4
		move.b	#1,$3E(a0)

loc_252B4:				
		move.b	$3F(a0),$1A(a0)
		move.b	#$28,$19(a0) ; '('
		move.b	#1,$18(a0)

loc_252C6:				
		lea	($FFFFB000).w,a1

loc_252CA:
		lea	$2C(a0),a4
		moveq	#$2C,d2	; ','
		bsr.s	loc_252DC
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4
		moveq	#$36,d2	; '6'

loc_252DC:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_252E8(pc,d0.w),d0
		jmp	off_252E8(pc,d0.w)
; ===========================================================================
off_252E8:	dc.w loc_252F0-off_252E8; 0 
		dc.w loc_253C6-off_252E8; 1
		dc.w loc_25474-off_252E8; 2
		dc.w loc_254F2-off_252E8; 3
; ===========================================================================

loc_252F0:				
		tst.w	(v_debug_active).w
		bne.w	locret_253C4
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0	; ' '
		bcc.w	locret_253C4
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		addi.w	#$10,d1
		cmpi.w	#$20,d1	; ' '
		bcc.w	locret_253C4
		cmpa.w	#-$4FC0,a1
		bne.s	loc_25330
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.w	locret_253C4

loc_25330:				
		cmpi.b	#6,$24(a1)
		bcc.w	locret_253C4
		tst.w	(v_debug_active).w
		bne.w	locret_253C4
		btst	#3,$22(a1)
		beq.s	loc_25360
		moveq	#0,d0
		move.b	$3D(a1),d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a3
		move.b	#0,(a3,d2.w)

loc_25360:				
		move.w	a0,d0
		subi.w	#-$5000,d0
		lsr.w	#6,d0
		andi.w	#$7F,d0	; ''
		move.b	d0,$3D(a1)
		addq.b	#2,(a4)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$1000,$14(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		bset	#3,$22(a1)
		move.b	$3F(a0),$1A(a0)
		move.w	#$BE,d0	
		jsr	(PlaySound).l

locret_253C4:				
		rts	
; ===========================================================================

loc_253C6:				
		tst.b	$3E(a0)
		bne.s	loc_253EE
		cmpi.b	#7,$1A(a0)
		beq.s	loc_25408
		subq.w	#1,$1E(a0)
		bpl.s	locret_253EC
		move.w	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#7,$1A(a0)
		beq.s	loc_25408

locret_253EC:				
		rts	
; ===========================================================================

loc_253EE:				
		tst.b	$1A(a0)
		beq.s	loc_25408
		subq.w	#1,$1E(a0)
		bpl.s	locret_253EC
		move.w	#7,$1E(a0)
		subq.b	#1,$1A(a0)
		beq.s	loc_25408
		rts	
; ===========================================================================

loc_25408:				
		addq.b	#2,(a4)
		move.b	$28(a0),d0
		addq.b	#1,d0
		btst	#0,$22(a0)
		beq.s	loc_2541A
		subq.b	#2,d0

loc_2541A:				
		andi.w	#3,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	word_25464(pc,d0.w),$10(a1)
		move.w	word_25464+2(pc,d0.w),$12(a1)
		move.w	#3,$1E(a0)
		tst.b	$28(a0)
		bpl.s	locret_25462
		move.b	#0,$2A(a1)

loc_25440:
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#0,$3C(a1)
		move.b	#2,$24(a1)
		move.b	#6,(a4)
		move.w	#7,$3C(a0)

locret_25462:				
		rts	
; ===========================================================================
word_25464:	dc.w	 0,$F000	; 0
		dc.w $1000,    0	; 2
		dc.w	 0,$1000	; 4
		dc.w $F000,    0	; 6
; ===========================================================================

loc_25474:				
		tst.b	1(a1)
		bmi.s	loc_25492
		move.b	#0,$2A(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#0,(a4)
		rts	
; ===========================================================================

loc_25492:				
		cmpi.b	#2,$2C(a0)
		beq.s	loc_254CC
		cmpi.b	#2,$36(a0)
		beq.s	loc_254CC
		subq.w	#1,$1E(a0)
		bpl.s	loc_254CC
		move.w	#1,$1E(a0)
		tst.b	$3E(a0)
		beq.s	loc_254C2
		cmpi.b	#7,$1A(a0)
		beq.s	loc_254CC
		addq.b	#1,$1A(a0)
		bra.s	loc_254CC
; ===========================================================================

loc_254C2:				
		tst.b	$1A(a0)
		beq.s	loc_254CC
		subq.b	#1,$1A(a0)

loc_254CC:				
		move.l	8(a1),d2
		move.l	$C(a1),d3
		move.w	$10(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,8(a1)
		move.l	d3,$C(a1)
		rts	
; ===========================================================================

loc_254F2:				
		subq.w	#1,$3C(a0)
		bpl.s	locret_254FC
		move.b	#0,(a4)

locret_254FC:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_254FE:				
		dc.w word_2550E-Map_254FE; 0
		dc.w word_25550-Map_254FE; 1
		dc.w word_25582-Map_254FE; 2
		dc.w word_255A4-Map_254FE; 3
		dc.w word_255C6-Map_254FE; 4
		dc.w word_255E8-Map_254FE; 5
		dc.w word_2560A-Map_254FE; 6
		dc.w word_2563C-Map_254FE; 7
word_2550E:	dc.w 8			
		dc.w $D804,    0,    0,$FFF0; 0
		dc.w $D804, $800, $800,	   0; 4
		dc.w $E004,    2,    1,$FFF0; 8
		dc.w $E004, $802, $801,	   0; 12
		dc.w $E80A,  $11,    8,$FFE8; 16
		dc.w $E80A, $811, $808,	   0; 20
		dc.w	$A,$1008,$1004,$FFE8; 24
		dc.w	$A,$1808,$1804,	   0; 28
word_25550:	dc.w 6			
		dc.w $E004,    0,    0,$FFF0; 0
		dc.w $E004, $800, $800,	   0; 4
		dc.w $E80A,  $11,    8,$FFE8; 8
		dc.w $E80A, $811, $808,	   0; 12
		dc.w	$A,$1008,$1004,$FFE8; 16
		dc.w	$A,$1808,$1804,	   0; 20
word_25582:	dc.w 4			
word_25584:	dc.w $E80A,  $11,    8,$FFE8; 0
		dc.w $E80A, $811, $808,	   0; 4
		dc.w	$A,$1008,$1004,$FFE8; 8
		dc.w	$A,$1808,$1804,	   0; 12
word_255A4:	dc.w 4			
word_255A6:	dc.w $E80A,  $1A,   $D,$FFE8; 0
		dc.w $E80A,$1823,$1811,	   0; 4
		dc.w	$A,  $23,  $11,$FFE8; 8
		dc.w	$A,$181A,$180D,	   0; 12
word_255C6:	dc.w 4			
		dc.w $E80A,$1023,$1011,$FFE8; 0
		dc.w $E80A, $81A, $80D,	   0; 4
		dc.w	$A,$101A,$100D,$FFE8; 8
		dc.w	$A, $823, $811,	   0; 12
word_255E8:	dc.w 4			
		dc.w $E80A,    8,    4,$FFE8; 0
		dc.w $E80A,$102C,$1016,	   0; 4
		dc.w	$A,$1008,$1004,$FFE8; 8
		dc.w	$A,  $2C,  $16,	   0; 12
word_2560A:	dc.w 6			
		dc.w $E80A,    8,    4,$FFE8; 0
		dc.w $E80A,$102C,$1016,	   0; 4
		dc.w	$A,$1008,$1004,$FFE8; 8
		dc.w	$A,  $2C,  $16,	   0; 12
		dc.w $F001,    6,    3,	 $18; 16
		dc.w	 1,$1006,$1003,	 $18; 20
word_2563C:	dc.w 8			
		dc.w $E80A,    8,    4,$FFE8; 0
		dc.w $E80A,$102C,$1016,	   0; 4
		dc.w	$A,$1008,$1004,$FFE8; 8
		dc.w	$A,  $2C,  $16,	   0; 12
		dc.w $F001,    4,    2,	 $18; 16
		dc.w	 1,$1004,$1002,	 $18; 20
		dc.w $F001,    6,    3,	 $20; 24
		dc.w	 1,$1006,$1003,	 $20; 28
; ===========================================================================
		nop	

loc_25680:				
		jmp	DisplaySprite
; ===========================================================================

loc_25686:				
		jmp	MarkObjGone
; ===========================================================================

loc_2568C:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Arrow	shooter	from ARZ
; ----------------------------------------------------------------------------

ArrowShooter:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_256A2(pc,d0.w),d1
		jmp	off_256A2(pc,d1.w)
; ===========================================================================
off_256A2:	dc.w loc_256AC-off_256A2; 0 
		dc.w loc_256E0-off_256A2; 1
		dc.w loc_2572A-off_256A2; 2
		dc.w loc_2577A-off_256A2; 3
		dc.w loc_257BE-off_256A2; 4
; ===========================================================================

loc_256AC:				
		addq.b	#2,$24(a0)
		move.l	#Map_25804,4(a0)
		move.w	#$417,2(a0)
		bsr.w	loc_25880
		ori.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$1A(a0)
		andi.b	#$F,$28(a0)

loc_256E0:				
		cmpi.b	#2,$1C(a0)
		beq.s	loc_25706
		moveq	#0,d2
		lea	($FFFFB000).w,a1
		bsr.s	loc_25714
		lea	($FFFFB040).w,a1
		bsr.s	loc_25714
		tst.b	d2
		bne.s	loc_25702
		tst.b	$1C(a0)
		beq.s	loc_25702
		moveq	#2,d2

loc_25702:				
		move.b	d2,$1C(a0)

loc_25706:				
		lea	(off_257EE).l,a1
		bsr.w	loc_2587A
		bra.w	loc_25874
; ===========================================================================

loc_25714:				
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_25720
		neg.w	d0

loc_25720:				
		cmpi.w	#$40,d0	; '@'
		bcc.s	locret_25728
		moveq	#1,d2

locret_25728:				
		rts	
; ===========================================================================

loc_2572A:				
		bsr.w	loc_2586E
		bne.s	loc_25768
		_move.b	0(a0),0(a1)
		addq.b	#6,$24(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	1(a0),1(a1)
		move.b	$22(a0),$22(a1)
		move.w	#$DB,d0	
		jsr	(PlaySound).l

loc_25768:				
		subq.b	#2,$24(a0)
		lea	(off_257EE).l,a1
		bsr.w	loc_2587A
		bra.w	loc_25874
; ===========================================================================

loc_2577A:				
		addq.b	#2,$24(a0)
		move.b	#8,$16(a0)
		move.b	#$10,$17(a0)
		move.b	#4,$18(a0)
		move.b	#-$65,$20(a0)
		move.b	#8,$19(a0)
		move.b	#0,$1A(a0)
		move.w	#$400,$10(a0)
		btst	#0,$22(a0)
		beq.s	loc_257B4
		neg.w	$10(a0)

loc_257B4:				
		move.w	#$AE,d0	
		jsr	(PlaySound).l

loc_257BE:				
		bsr.w	loc_25886
		btst	#0,$22(a0)
		bne.s	loc_257DE
		moveq	#-8,d3
		bsr.w	loc_1F086
		tst.w	d1
		bmi.w	loc_257DA
		bra.w	loc_25874
; ===========================================================================

loc_257DA:				
		bra.w	loc_25868
; ===========================================================================

loc_257DE:				
		moveq	#8,d3
		bsr.w	loc_1EF00
		tst.w	d1
		bmi.w	loc_257DA
		bra.w	loc_25874
; ===========================================================================
off_257EE:	dc.w byte_257F4-off_257EE; 0 
		dc.w byte_257F7-off_257EE; 1
		dc.w byte_257FB-off_257EE; 2
byte_257F4:	dc.b $1F,  1,$FF	; 0 
byte_257F7:	dc.b   3,  1,  2,$FF	; 0 
byte_257FB:	dc.b   7,  3,  4,$FC,  4,  3,  1,$FD,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_25804:				
		dc.w word_2580E-Map_25804; 0
		dc.w word_25818-Map_25804; 1
		dc.w word_2582A-Map_25804; 2
		dc.w word_25844-Map_25804; 3
		dc.w word_25856-Map_25804; 4
word_2580E:	dc.w 1			
		dc.w $FC0C,$2000,$2000,$FFF0; 0
word_25818:	dc.w 2			
		dc.w $F809,$2004,$2002,$FFF0; 0
		dc.w $F801,$200B,$2005,	   8; 4
word_2582A:	dc.w 3			
		dc.w $FC00,   $A,    5,$FFFC; 0
		dc.w $F809,$2004,$2002,$FFF0; 4
		dc.w $F801,$200B,$2005,	   8; 8
word_25844:	dc.w 2			
		dc.w $F809,$2004,$2002,$FFF0; 0
		dc.w $F801,$200D,$2006,	   8; 4
word_25856:	dc.w 2			
		dc.w $F809,$2004,$2002,$FFF0; 0
		dc.w $F801,$200F,$2007,	   8; 4
; ===========================================================================

loc_25868:				
		jmp	DeleteObject
; ===========================================================================

loc_2586E:				
		jmp	SingleObjLoad
; ===========================================================================

loc_25874:				
		jmp	MarkObjGone
; ===========================================================================

loc_2587A:				
		jmp	AnimateSprite
; ===========================================================================

loc_25880:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_25886:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Pillar that drops its	lower part from	ARZ
; ----------------------------------------------------------------------------

FallingPillar:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2589A(pc,d0.w),d1
		jmp	off_2589A(pc,d1.w)
; ===========================================================================
off_2589A:	dc.w loc_2589E-off_2589A; 0 
		dc.w loc_25922-off_2589A; 1
; ===========================================================================

loc_2589E:				
		addq.b	#2,$24(a0)
		move.l	#Map_259E6,4(a0)
		move.w	#$2000,2(a0)
		bsr.w	loc_260F0
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#$20,$16(a0) ; ' '
		move.b	#4,$18(a0)
		bsr.w	loc_260EA
		bne.s	loc_25922
		_move.b	0(a0),0(a1)
		addq.b	#2,$24(a1)
		addq.b	#2,$25(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.w	8(a0),8(a1)
		move.w	8(a0),$30(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$30,$C(a1) ; '0'
		move.b	1(a0),1(a1)
		move.b	#$10,$19(a1)
		move.b	#$10,$16(a1)
		move.b	#4,$18(a1)
		move.b	#1,$1A(a1)

loc_25922:				
					
		move.w	8(a0),-(sp)
		bsr.w	loc_25948
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_260F6
		bra.w	loc_260E4
; ===========================================================================

loc_25948:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_25956(pc,d0.w),d1
		jmp	off_25956(pc,d1.w)
; ===========================================================================
off_25956:	dc.w locret_2598C-off_25956; 0 
		dc.w loc_2595E-off_25956; 1
		dc.w loc_2598E-off_25956; 2
		dc.w loc_259B8-off_25956; 3
; ===========================================================================

loc_2595E:				
		tst.w	(v_debug_active).w
		bne.s	locret_2598C
		lea	($FFFFB000).w,a1
		bsr.s	loc_2596E
		lea	($FFFFB040).w,a1

loc_2596E:				
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_2597A
		neg.w	d0

loc_2597A:				
		cmpi.w	#$80,d0	
		bcc.s	locret_2598C
		move.b	#4,$25(a0)
		move.w	#8,$34(a0)

locret_2598C:				
					; DATA XREF: ...
		rts	
; ===========================================================================

loc_2598E:				
		move.w	$34(a0),d0
		subq.w	#1,d0
		bcc.s	loc_2599C
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2599C:				
		move.w	d0,$34(a0)
		move.b	byte_259B0(pc,d0.w),d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		rts	
; ===========================================================================
byte_259B0:	dc.b   0		; 0
		dc.b   1		; 1
		dc.b $FF		; 2
		dc.b   1		; 3
		dc.b   0		; 4
		dc.b $FF		; 5
		dc.b   0		; 6
		dc.b   1		; 7
; ===========================================================================

loc_259B8:				
		bsr.w	loc_260FC
		addi.w	#$38,$12(a0)
		bsr.w	loc_1EDFA
		tst.w	d1
		bpl.w	locret_259E4
		add.w	d1,$C(a0)
		clr.w	$12(a0)
		move.w	$C(a0),$32(a0)
		move.b	#2,$1A(a0)
		clr.b	$25(a0)

locret_259E4:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_259E6:				
		dc.w word_259EC-Map_259E6; 0
		dc.w word_25A1E-Map_259E6; 1
		dc.w word_25A38-Map_259E6; 2
word_259EC:	dc.w 6			
word_259EE:	dc.w $E005,  $5D,  $2E,$FFE0; 0
		dc.w $E005, $85D, $82E,	 $10; 4
		dc.w $E00D,  $61,  $30,$FFF0; 8
		dc.w $F00D,  $69,  $34,$FFF0; 12
		dc.w	$D,  $69,  $34,$FFF0; 16
		dc.w $100D,  $71,  $38,$FFF0; 20
word_25A1E:	dc.w 3			
		dc.w $F00D,  $69,  $34,$FFF0; 0
		dc.w	$D,  $79,  $3C,$FFF0; 4
		dc.w $1004,  $81,  $40,$FFF0; 8
word_25A38:	dc.w 4			
		dc.w  $90D,$208B,$2045,$FFF0; 0
		dc.w $F00D,  $69,  $34,$FFF0; 4
		dc.w	$D,  $79,  $3C,$FFF0; 8
		dc.w $1004,  $81,  $40,$FFF0; 12
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Raising pillar from ARZ
; ----------------------------------------------------------------------------

RisingPillar:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_25A68(pc,d0.w),d1
		jmp	off_25A68(pc,d1.w)
; ===========================================================================
off_25A68:	dc.w loc_25A6E-off_25A68; 0 
		dc.w loc_25A9C-off_25A68; 1
		dc.w loc_25B8E-off_25A68; 2
; ===========================================================================

loc_25A6E:				
		addq.b	#2,$24(a0)
		move.l	#Map_25C6E,4(a0)
		move.w	#$2000,2(a0)
		bsr.w	loc_260F0
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#$18,$16(a0)
		move.b	#4,$18(a0)

loc_25A9C:				
		move.w	8(a0),-(sp)
		bsr.w	loc_25B28
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_260F6
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.w	loc_25ACE
		bra.w	loc_260E4
; ===========================================================================

loc_25ACE:				
		lea	(word_25BBE).l,a4
		lea	(byte_25BB0).l,a2
		addq.b	#7,$1A(a0)
		bsr.w	loc_25BF6
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	loc_25AF6
		lea	($FFFFB040).w,a1
		addq.b	#1,d6
		bsr.s	loc_25AF6
		bra.w	loc_25B8E
; ===========================================================================

loc_25AF6:				
		bclr	d6,$22(a0)
		beq.s	locret_25B26
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)

locret_25B26:				
		rts	
; ===========================================================================

loc_25B28:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_25B36(pc,d0.w),d1
		jmp	off_25B36(pc,d1.w)
; ===========================================================================
off_25B36:	dc.w loc_25B3C-off_25B36; 0 
		dc.w loc_25B66-off_25B36; 1
		dc.w locret_25B64-off_25B36; 2
; ===========================================================================

loc_25B3C:				
		tst.w	(v_debug_active).w
		bne.s	locret_25B64
		lea	($FFFFB000).w,a1
		bsr.s	loc_25B4C
		lea	($FFFFB040).w,a1

loc_25B4C:				
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_25B58
		neg.w	d0

loc_25B58:				
		cmpi.w	#$40,d0	; '@'
		bcc.s	locret_25B64
		move.b	#2,$25(a0)

locret_25B64:				
					; DATA XREF: ...
		rts	
; ===========================================================================

loc_25B66:				
		subq.w	#1,$34(a0)
		bcc.s	locret_25B8C
		move.w	#3,$34(a0)
		subq.w	#4,$C(a0)
		addq.b	#4,$16(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#6,$1A(a0)
		bne.s	locret_25B8C
		move.b	#4,$25(a0)

locret_25B8C:				
		rts	
; ===========================================================================

loc_25B8E:				
					
		tst.b	$3F(a0)
		beq.s	loc_25B9A
		subq.b	#1,$3F(a0)
		bra.s	loc_25BA4
; ===========================================================================

loc_25B9A:				
		bsr.w	loc_260FC
		addi.w	#$18,$12(a0)

loc_25BA4:				
		tst.b	1(a0)
		bpl.w	loc_260DE
		bra.w	loc_260D8
; ===========================================================================
byte_25BB0:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   4		; 4
		dc.b   4		; 5
		dc.b   8		; 6
		dc.b   8		; 7
		dc.b  $C		; 8
		dc.b  $C		; 9
		dc.b $10		; 10
		dc.b $10		; 11
		dc.b $14		; 12
		dc.b $14		; 13
word_25BBE:	dc.w $FE00,$FE00,$200,$FE00; 0 
		dc.w $FE40,$FE40,$1C0,$FE40; 4
		dc.w $FE80,$FE80,$180,$FE80; 8
		dc.w $FEC0,$FEC0,$140,$FEC0; 12
		dc.w $FF00,$FF00,$100,$FF00; 16
		dc.w $FF40,$FF40,$C0,$FF40; 20
		dc.w $FF80,$FF80,$80,$FF80; 24
; ===========================================================================

loc_25BF6:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		movea.l	4(a0),a3
		adda.w	(a3,d0.w),a3
		move.w	(a3)+,d1
		subq.w	#1,d1
		bset	#5,1(a0)
		_move.b	0(a0),d4
		move.b	1(a0),d5
		movea.l	a0,a1
		bra.s	loc_25C24
; ===========================================================================

loc_25C1C:				
		bsr.w	loc_260EA
		bne.s	loc_25C64
		addq.w	#8,a3

loc_25C24:				
		move.b	#4,$24(a1)
		_move.b	d4,0(a1)
		move.l	a3,4(a1)
		move.b	d5,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	2(a0),2(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.w	(a4)+,$10(a1)
		move.w	(a4)+,$12(a1)
		move.b	(a2)+,$3F(a1)
		dbf	d1,loc_25C1C

loc_25C64:				
		move.w	#$CB,d0	
		jmp	(PlaySound).l
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_25C6E:				
		dc.w word_25C8A-Map_25C6E; 0
		dc.w word_25CBC-Map_25C6E; 1
		dc.w word_25CF6-Map_25C6E; 2
		dc.w word_25D30-Map_25C6E; 3
		dc.w word_25D72-Map_25C6E; 4
		dc.w word_25DB4-Map_25C6E; 5
		dc.w word_25DFE-Map_25C6E; 6
		dc.w word_25E48-Map_25C6E; 7
		dc.w word_25E8A-Map_25C6E; 8
		dc.w word_25EDC-Map_25C6E; 9
		dc.w word_25F2E-Map_25C6E; 10
		dc.w word_25F90-Map_25C6E; 11
		dc.w word_25FF2-Map_25C6E; 12
		dc.w word_26064-Map_25C6E; 13
word_25C8A:	dc.w 6			
		dc.w $100D,$208B,$2045,$FFF0; 0
		dc.w $E805,  $5D,  $2E,$FFE0; 4
		dc.w $E805, $85D, $82E,	 $10; 8
		dc.w $E80D,  $61,  $30,$FFF0; 12
		dc.w $F80D,  $69,  $34,$FFF0; 16
		dc.w  $80D,  $83,  $41,$FFF0; 20
word_25CBC:	dc.w 7			
		dc.w $140D,$208B,$2045,$FFF0; 0
		dc.w $E405,  $5D,  $2E,$FFE0; 4
		dc.w $E405, $85D, $82E,	 $10; 8
		dc.w $E40D,  $61,  $30,$FFF0; 12
		dc.w $F40D,  $69,  $34,$FFF0; 16
		dc.w $FC0D,  $69,  $34,$FFF0; 20
		dc.w  $C0D,  $83,  $41,$FFF0; 24
word_25CF6:	dc.w 7			
		dc.w $180D,$208B,$2045,$FFF0; 0
		dc.w $E005,  $5D,  $2E,$FFE0; 4
		dc.w $E005, $85D, $82E,	 $10; 8
		dc.w $E00D,  $61,  $30,$FFF0; 12
		dc.w $F00D,  $69,  $34,$FFF0; 16
		dc.w	$D,  $69,  $34,$FFF0; 20
		dc.w $100D,  $83,  $41,$FFF0; 24
word_25D30:	dc.w 8			
		dc.w $1C0D,$208B,$2045,$FFF0; 0
		dc.w $DC05,  $5D,  $2E,$FFE0; 4
		dc.w $DC05, $85D, $82E,	 $10; 8
		dc.w $DC0D,  $61,  $30,$FFF0; 12
		dc.w $EC0D,  $69,  $34,$FFF0; 16
		dc.w $FC0D,  $69,  $34,$FFF0; 20
		dc.w  $40D,  $69,  $34,$FFF0; 24
		dc.w $140D,  $83,  $41,$FFF0; 28
word_25D72:	dc.w 8			
		dc.w $200D,$208B,$2045,$FFF0; 0
		dc.w $D805,  $5D,  $2E,$FFE0; 4
		dc.w $D805, $85D, $82E,	 $10; 8
		dc.w $D80D,  $61,  $30,$FFF0; 12
		dc.w $E80D,  $69,  $34,$FFF0; 16
		dc.w $F80D,  $69,  $34,$FFF0; 20
		dc.w  $80D,  $69,  $34,$FFF0; 24
		dc.w $180D,  $83,  $41,$FFF0; 28
word_25DB4:	dc.w 9			
		dc.w $240D,$208B,$2045,$FFF0; 0
		dc.w $D405,  $5D,  $2E,$FFE0; 4
		dc.w $D405, $85D, $82E,	 $10; 8
		dc.w $D40D,  $61,  $30,$FFF0; 12
		dc.w $E40D,  $69,  $34,$FFF0; 16
		dc.w $F40D,  $69,  $34,$FFF0; 20
		dc.w  $40D,  $69,  $34,$FFF0; 24
		dc.w  $C0D,  $69,  $34,$FFF0; 28
		dc.w $1C0D,  $83,  $41,$FFF0; 32
word_25DFE:	dc.w 9			
		dc.w $280D,$208B,$2045,$FFF0; 0
		dc.w $D005,  $5D,  $2E,$FFE0; 4
		dc.w $D005, $85D, $82E,	 $10; 8
		dc.w $D00D,  $61,  $30,$FFF0; 12
		dc.w $E00D,  $69,  $34,$FFF0; 16
		dc.w $F00D,  $69,  $34,$FFF0; 20
		dc.w	$D,  $69,  $34,$FFF0; 24
		dc.w $100D,  $69,  $34,$FFF0; 28
		dc.w $200D,  $83,  $41,$FFF0; 32
word_25E48:	dc.w 8			
		dc.w $E805,  $5D,  $2E,$FFE0; 0
		dc.w $E805, $85D, $82E,	 $10; 4
		dc.w $E805,  $61,  $30,$FFF0; 8
		dc.w $E805,  $65,  $32,	   0; 12
		dc.w $F805,  $69,  $34,$FFF0; 16
		dc.w $F805,  $6D,  $36,	   0; 20
		dc.w  $805,  $83,  $41,$FFF0; 24
		dc.w  $805,  $87,  $43,	   0; 28
word_25E8A:	dc.w $A			
		dc.w $E405,  $5D,  $2E,$FFE0; 0
		dc.w $E405, $85D, $82E,	 $10; 4
		dc.w $E405,  $61,  $30,$FFF0; 8
		dc.w $E405,  $65,  $32,	   0; 12
		dc.w $F405,  $69,  $34,$FFF0; 16
		dc.w $F405,  $6D,  $36,	   0; 20
		dc.w $FC05,  $69,  $34,$FFF0; 24
		dc.w $FC05,  $6D,  $36,	   0; 28
		dc.w  $C05,  $83,  $41,$FFF0; 32
		dc.w  $C05,  $87,  $43,	   0; 36
word_25EDC:	dc.w $A			
		dc.w $E005,  $5D,  $2E,$FFE0; 0
		dc.w $E005, $85D, $82E,	 $10; 4
		dc.w $E005,  $61,  $30,$FFF0; 8
		dc.w $E005,  $65,  $32,	   0; 12
		dc.w $F005,  $69,  $34,$FFF0; 16
		dc.w $F005,  $6D,  $36,	   0; 20
		dc.w	 5,  $69,  $34,$FFF0; 24
		dc.w	 5,  $6D,  $36,	   0; 28
		dc.w $1005,  $83,  $41,$FFF0; 32
		dc.w $1005,  $87,  $43,	   0; 36
word_25F2E:	dc.w $C			
		dc.w $DC05,  $5D,  $2E,$FFE0; 0
		dc.w $DC05, $85D, $82E,	 $10; 4
		dc.w $DC05,  $61,  $30,$FFF0; 8
		dc.w $DC05,  $65,  $32,	   0; 12
		dc.w $EC05,  $69,  $34,$FFF0; 16
		dc.w $EC05,  $6D,  $36,	   0; 20
		dc.w $FC05,  $69,  $34,$FFF0; 24
		dc.w $FC05,  $6D,  $36,	   0; 28
		dc.w  $405,  $69,  $34,$FFF0; 32
		dc.w  $405,  $6D,  $36,	   0; 36
		dc.w $1405,  $83,  $41,$FFF0; 40
		dc.w $1405,  $87,  $43,	   0; 44
word_25F90:	dc.w $C			
		dc.w $D805,  $5D,  $2E,$FFE0; 0
		dc.w $D805, $85D, $82E,	 $10; 4
		dc.w $D805,  $61,  $30,$FFF0; 8
		dc.w $D805,  $65,  $32,	   0; 12
		dc.w $E805,  $69,  $34,$FFF0; 16
		dc.w $E805,  $6D,  $36,	   0; 20
		dc.w $F805,  $69,  $34,$FFF0; 24
		dc.w $F805,  $6D,  $36,	   0; 28
		dc.w  $805,  $69,  $34,$FFF0; 32
		dc.w  $805,  $6D,  $36,	   0; 36
		dc.w $1805,  $83,  $41,$FFF0; 40
		dc.w $1805,  $87,  $43,	   0; 44
word_25FF2:	dc.w $E			
		dc.w $D405,  $5D,  $2E,$FFE0; 0
		dc.w $D405, $85D, $82E,	 $10; 4
		dc.w $D405,  $61,  $30,$FFF0; 8
		dc.w $D405,  $65,  $32,	   0; 12
		dc.w $E405,  $69,  $34,$FFF0; 16
		dc.w $E405,  $6D,  $36,	   0; 20
		dc.w $F405,  $69,  $34,$FFF0; 24
		dc.w $F405,  $6D,  $36,	   0; 28
		dc.w  $405,  $69,  $34,$FFF0; 32
		dc.w  $405,  $6D,  $36,	   0; 36
		dc.w  $C05,  $69,  $34,$FFF0; 40
		dc.w  $C05,  $6D,  $36,	   0; 44
		dc.w $1C05,  $83,  $41,$FFF0; 48
		dc.w $1C05,  $87,  $43,	   0; 52
word_26064:	dc.w $E			
		dc.w $D005,  $5D,  $2E,$FFE0; 0
		dc.w $D005, $85D, $82E,	 $10; 4
		dc.w $D005,  $61,  $30,$FFF0; 8
		dc.w $D005,  $65,  $32,	   0; 12
		dc.w $E005,  $69,  $34,$FFF0; 16
		dc.w $E005,  $6D,  $36,	   0; 20
		dc.w $F005,  $69,  $34,$FFF0; 24
		dc.w $F005,  $6D,  $36,	   0; 28
		dc.w	 5,  $69,  $34,$FFF0; 32
		dc.w	 5,  $6D,  $36,	   0; 36
		dc.w $1005,  $69,  $34,$FFF0; 40
		dc.w $1005,  $6D,  $36,	   0; 44
		dc.w $2005,  $83,  $41,$FFF0; 48
		dc.w $2005,  $87,  $43,	   0; 52
; ===========================================================================
		nop	

loc_260D8:				
		jmp	DisplaySprite
; ===========================================================================

loc_260DE:				
		jmp	DeleteObject
; ===========================================================================

loc_260E4:				
		jmp	MarkObjGone
; ===========================================================================

loc_260EA:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_260F0:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_260F6:				
		jmp	SolidObject
; ===========================================================================

loc_260FC:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Sprite that makes leaves fly off when	you hit	it from	ARZ
; ----------------------------------------------------------------------------

LeavesGenerator:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_26112(pc,d0.w),d1
		jmp	off_26112(pc,d1.w)
; ===========================================================================
off_26112:	dc.w loc_2611C-off_26112; 0 
		dc.w loc_26152-off_26112; 1
		dc.w loc_26296-off_26112; 2
byte_26118:	dc.b $D6		; 0
		dc.b $D4		; 1
		dc.b $D5		; 2
		dc.b   0		; 3
; ===========================================================================

loc_2611C:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.b	byte_26118(pc,d0.w),$20(a0)
		move.l	#Map_20E74,4(a0)
		move.w	#-$7980,2(a0)
		move.b	#-$7C,1(a0)
		move.b	#-$80,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)

loc_26152:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_26356
		move.b	$21(a0),d0
		beq.s	loc_261C2
		move.w	$2E(a0),d0
		beq.s	loc_2617C
		add.b	($FFFFFE05).w,d0
		andi.w	#$F,d0
		bne.s	loc_26198

loc_2617C:				
		lea	($FFFFB000).w,a2
		bclr	#0,$21(a0)
		beq.s	loc_261BC
		bsr.s	loc_261C8
		tst.w	$2E(a0)
		bne.s	loc_261BC
		move.w	(v_frame_counter).w,$2E(a0)
		bra.s	loc_261BC
; ===========================================================================

loc_26198:				
		addi.w	#8,d0
		andi.w	#$F,d0
		bne.s	loc_261BC
		lea	($FFFFB040).w,a2
		bclr	#1,$21(a0)
		beq.s	loc_261BC
		bsr.s	loc_261C8
		tst.w	$2E(a0)
		bne.s	loc_261BC
		move.w	(v_frame_counter).w,$2E(a0)

loc_261BC:				
		clr.b	$21(a0)
		rts	
; ===========================================================================

loc_261C2:				
		clr.w	$2E(a0)
		rts	
; ===========================================================================

loc_261C8:				
		move.w	$10(a2),d0
		bpl.s	loc_261D0
		neg.w	d0

loc_261D0:				
		cmpi.w	#$200,d0
		bcc.s	loc_261E4
		move.w	$12(a2),d0
		bpl.s	loc_261DE
		neg.w	d0

loc_261DE:				
		cmpi.w	#$200,d0
		bcs.s	loc_261C2

loc_261E4:				
		lea	(byte_26286).l,a3
		moveq	#3,d6

loc_261EC:				
		bsr.w	loc_2635C
		bne.w	loc_26278
		_move.b	#$2C,0(a1) ; ','
		move.b	#4,$24(a1)
		move.w	8(a2),8(a1)
		move.w	$C(a2),$C(a1)
		bsr.w	loc_26362
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,8(a1)
		swap	d0
		andi.w	#$F,d0
		subq.w	#8,d0
		add.w	d0,$C(a1)
		move.w	(a3)+,$10(a1)
		move.w	(a3)+,$12(a1)
		btst	#0,$22(a2)
		beq.s	loc_2623A
		neg.w	$10(a1)

loc_2623A:				
		move.w	8(a1),$30(a1)
		move.w	$C(a1),$34(a1)
		andi.b	#1,d0
		move.b	d0,$1A(a1)
		move.l	#off_2631E,4(a1)
		move.w	#-$1BF0,2(a1)
		move.b	#-$7C,1(a1)
		move.b	#8,$19(a1)
		move.b	#1,$18(a1)
		move.b	#4,$38(a1)
		move.b	d1,$26(a0)

loc_26278:				
		dbf	d6,loc_261EC
		move.w	#$E5,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_26286:	dc.b $FF		; 0 
		dc.b $80		; 1
		dc.b $FF		; 2
		dc.b $80		; 3
		dc.b   0		; 4
		dc.b $C0		; 5
		dc.b $FF		; 6
		dc.b $C0		; 7
		dc.b $FF		; 8
		dc.b $40		; 9
		dc.b   0		; 10
		dc.b $40		; 11
		dc.b   0		; 12
		dc.b $80		; 13
		dc.b   0		; 14
		dc.b $80		; 15
; ===========================================================================

loc_26296:				
		move.b	$38(a0),d0
		add.b	d0,$26(a0)
		add.b	($FFFFFE0F).w,d0
		andi.w	#$1F,d0
		bne.s	loc_262B4
		add.b	d7,d0
		andi.b	#1,d0
		beq.s	loc_262B4
		neg.b	$38(a0)

loc_262B4:				
		move.l	$30(a0),d2
		move.l	$34(a0),d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$30(a0)
		move.l	d3,$34(a0)
		swap	d2
		andi.w	#3,d3
		addq.w	#4,d3
		add.w	d3,$12(a0)
		move.b	$26(a0),d0
		bsr.w	loc_26368
		asr.w	#6,d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		asr.w	#6,d1
		add.w	$34(a0),d1
		move.w	d1,$C(a0)
		subq.b	#1,$1E(a0)
		bpl.s	loc_26312
		move.b	#$B,$1E(a0)
		bchg	#1,$1A(a0)

loc_26312:				
		tst.b	1(a0)
		bpl.w	loc_26356
		bra.w	loc_26350
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_2631E:	dc.w word_26326-off_2631E; 0 
		dc.w word_26330-off_2631E; 1
		dc.w word_2633A-off_2631E; 2
		dc.w word_26344-off_2631E; 3
word_26326:	dc.w 1			
		dc.w $FC00,    0,    0,$FFFC; 0
word_26330:	dc.w 1			
		dc.w $FC04,    1,    0,$FFF8; 0
word_2633A:	dc.w 1			
		dc.w $FC04,    3,    1,$FFF8; 0
word_26344:	dc.w 1			
		dc.w $FC04,    5,    2,$FFF8; 0
; ===========================================================================
		nop	

loc_26350:				
		jmp	DisplaySprite
; ===========================================================================

loc_26356:				
		jmp	DeleteObject
; ===========================================================================

loc_2635C:				
		jmp	SingleObjLoad
; ===========================================================================

loc_26362:				
		jmp	(RandomNumber).l
; ===========================================================================

loc_26368:				
		jmp	(CalcSine).l
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Weird	level spring from CPZ and ARZ
; ----------------------------------------------------------------------------

Sprite_26370:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_26382(pc,d0.w),d1
		jsr	off_26382(pc,d1.w)
		bra.w	loc_2661C
; ===========================================================================
off_26382:	dc.w loc_2638C-off_26382; 0 
		dc.w loc_263C8-off_26382; 1
word_26386:	dc.w $FC00		; 0
		dc.w $F600		; 1
		dc.w $F800		; 2
; ===========================================================================

loc_2638C:				
		addq.b	#2,$24(a0)
		move.l	#Map_265F4,4(a0)
		move.w	#$440,2(a0)
		bsr.w	loc_26628
		ori.b	#4,1(a0)
		move.b	#$1C,$19(a0)
		move.b	#4,$18(a0)
		bset	#7,$22(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	word_26386(pc,d0.w),$30(a0)

loc_263C8:				
		lea	(off_265E8).l,a1
		bsr.w	loc_26622
		move.w	#$27,d1	; '''
		move.w	#8,d2
		move.w	8(a0),d4
		lea	(byte_26598)(pc),a2
		tst.b	$1A(a0)
		beq.s	loc_263EC
		lea	(byte_265C0)(pc),a2

loc_263EC:				
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_2662E
		btst	#3,$22(a0)
		beq.s	loc_26404
		bsr.s	loc_2641E

loc_26404:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_2662E
		btst	#4,$22(a0)
		beq.s	locret_2641C
		bsr.s	loc_2641E

locret_2641C:				
		rts	
; ===========================================================================

loc_2641E:				
		btst	#0,$22(a0)
		bne.s	loc_26436
		move.w	8(a0),d0
		subi.w	#$10,d0
		cmp.w	8(a1),d0
		bcs.s	loc_26446
		rts	
; ===========================================================================

loc_26436:				
		move.w	8(a0),d0
		addi.w	#$10,d0
		cmp.w	8(a1),d0
		bcc.s	loc_26446
		rts	
; ===========================================================================

loc_26446:				
		cmpi.b	#1,$1C(a0)
		beq.s	loc_26456
		move.w	#$100,$1C(a0)
		rts	
; ===========================================================================

loc_26456:				
		tst.b	$1A(a0)
		beq.s	loc_2645E
		rts	
; ===========================================================================

loc_2645E:				
		move.w	8(a0),d0
		subi.w	#$1C,d0
		sub.w	8(a1),d0
		neg.w	d0
		btst	#0,$22(a0)
		beq.s	loc_2647A
		not.w	d0
		addi.w	#$27,d0	; '''

loc_2647A:				
		tst.w	d0
		bpl.s	loc_26480
		moveq	#0,d0

loc_26480:				
		lea	(byte_26550).l,a3
		move.b	(a3,d0.w),d0
		move.w	#-$400,$12(a1)
		sub.b	d0,$12(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_264AA
		bclr	#0,$22(a1)
		neg.b	d0

loc_264AA:				
		move.w	$10(a1),d1
		bpl.s	loc_264B2
		neg.w	d1

loc_264B2:				
		cmpi.w	#$400,d1
		bcs.s	loc_264BC
		sub.b	d0,$10(a1)

loc_264BC:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	#0,$39(a1)
		move.b	$28(a0),d0
		btst	#0,d0
		beq.s	loc_2651E
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_2650E
		move.b	#3,$2C(a1)

loc_2650E:				
		btst	#0,$22(a1)
		beq.s	loc_2651E
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_2651E:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_26534
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_26534:				
		cmpi.b	#8,d0
		bne.s	loc_26546
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_26546:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_26550:	dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 0
					
		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1; 16
		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2; 32
		dc.b   3,  3,  3,  3,  3,  3,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0; 48
		dc.b   0,  0,  0,  0,  0,  0,  0,  0; 64
byte_26598:	dc.b   8,  8,  8,  8,  8,  8,  8,  9, $A, $B, $C, $D, $E, $F,$10,$10; 0
					
		dc.b $11,$12,$13,$14,$14,$15,$15,$16,$17,$18,$18,$18,$18,$18,$18,$18; 16
		dc.b $18,$18,$18,$18,$18,$18,$18,$18; 32
byte_265C0:	dc.b   8,  8,  8,  8,  8,  8,  8,  9, $A, $B, $C, $C, $C, $C, $D, $D; 0
					
		dc.b  $D, $D, $D, $D, $E, $E, $F, $F,$10,$10,$10,$10, $F, $F, $E, $E; 16
		dc.b  $D, $D, $D, $D, $D, $D, $D, $D; 32
off_265E8:	dc.w byte_265EC-off_265E8; 0 
		dc.w byte_265EF-off_265E8; 1
byte_265EC:	dc.b  $F,  0,$FF	; 0 
byte_265EF:	dc.b   3,  1,  0,$FD,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_265F4:				
		dc.w word_265F8-Map_265F4; 0
		dc.w word_2660A-Map_265F4; 1
word_265F8:	dc.w 2			
		dc.w $E809,    0,    0,$FFE4; 0
		dc.w $E80D,    6,    3,$FFFC; 4
word_2660A:	dc.w 2			
		dc.w $E809,   $E,    7,$FFE4; 0
		dc.w $E80D,  $14,   $A,$FFFC; 4
; ===========================================================================

loc_2661C:				
		jmp	MarkObjGone
; ===========================================================================

loc_26622:				
		jmp	AnimateSprite
; ===========================================================================

loc_26628:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2662E:				
		jmp	loc_197E6
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Thing	that pops up and releases steam	sideways from MTZ
; ----------------------------------------------------------------------------

Sprite_26634:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_26642(pc,d0.w),d1
		jmp	off_26642(pc,d1.w)
; ===========================================================================
off_26642:	dc.w loc_26648-off_26642; 0 
		dc.w loc_26688-off_26642; 1
		dc.w loc_2683A-off_26642; 2
; ===========================================================================

loc_26648:				
		addq.b	#2,$24(a0)
		move.l	#Map_2686C,4(a0)
		move.w	#$6000,2(a0)
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		bsr.w	loc_26914
		move.b	#7,$1A(a0)
		move.w	$C(a0),$34(a0)
		move.w	#$10,$36(a0)
		addi.w	#$10,$C(a0)

loc_26688:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_2691A
		btst	#3,$22(a0)
		beq.s	loc_266B2
		bsr.w	loc_2678E

loc_266B2:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_2691A
		btst	#4,$22(a0)
		beq.s	loc_266CC
		bsr.w	loc_2678E

loc_266CC:				
		move.b	$25(a0),d0
		bne.s	loc_266E4
		subq.w	#1,$32(a0)
		bpl.s	loc_26748
		move.w	#$3B,$32(a0) ; ';'
		addq.b	#2,$25(a0)
		bra.s	loc_26748
; ===========================================================================

loc_266E4:				
		subq.b	#2,d0
		bne.s	loc_26716
		subq.w	#8,$36(a0)
		bne.s	loc_26708
		addq.b	#2,$25(a0)
		bsr.s	loc_2674C
		addi.w	#$28,8(a1) ; '('
		bsr.s	loc_2674C
		subi.w	#$28,8(a1) ; '('
		bset	#0,1(a1)

loc_26708:				
		move.w	$36(a0),d0
		add.w	$34(a0),d0
		move.w	d0,$C(a0)
		bra.s	loc_26748
; ===========================================================================

loc_26716:				
		subq.b	#2,d0
		bne.s	loc_2672C
		subq.w	#1,$32(a0)
		bpl.s	loc_26748
		move.w	#$3B,$32(a0) ; ';'
		addq.b	#2,$25(a0)
		bra.s	loc_26748
; ===========================================================================

loc_2672C:				
		addq.w	#8,$36(a0)
		cmpi.w	#$10,$36(a0)
		bne.s	loc_2673C
		clr.b	$25(a0)

loc_2673C:				
		move.w	$36(a0),d0
		add.w	$34(a0),d0
		move.w	d0,$C(a0)

loc_26748:				
		bra.w	loc_2690E
; ===========================================================================

loc_2674C:				
		bsr.w	loc_26908
		bne.s	locret_2678C
		_move.b	0(a0),0(a1)
		addq.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$34(a0),$C(a1)
		move.b	#7,$1E(a1)
		move.l	4(a0),4(a1)
		move.w	#$2405,2(a1)
		ori.b	#4,1(a1)
		move.b	#$18,$19(a1)
		move.b	#4,$18(a1)

locret_2678C:				
		rts	
; ===========================================================================

loc_2678E:				
		cmpi.b	#2,$25(a0)
		beq.s	loc_26798
		rts	
; ===========================================================================

loc_26798:				
		move.w	#-$A00,$12(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	#0,$39(a1)
		move.b	$28(a0),d0
		bpl.s	loc_267C8
		move.w	#0,$10(a1)

loc_267C8:				
		btst	#0,d0
		beq.s	loc_26808
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_267F8
		move.b	#1,$2C(a1)

loc_267F8:				
		btst	#0,$22(a1)
		beq.s	loc_26808
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_26808:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2681E
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_2681E:				
		cmpi.b	#8,d0
		bne.s	loc_26830
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_26830:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_2683A:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_26868
		move.b	#7,$1E(a0)
		move.b	#0,$20(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#3,$1A(a0)
		bne.s	loc_2685E
		move.b	#-$5A,$20(a0)

loc_2685E:				
		cmpi.b	#7,$1A(a0)
		beq.w	loc_26902

loc_26868:				
		bra.w	loc_268FC
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2686C:				
		dc.w word_2687C-Map_2686C; 0
		dc.w word_26886-Map_2686C; 1
		dc.w word_26890-Map_2686C; 2
		dc.w word_2689A-Map_2686C; 3
		dc.w word_268AC-Map_2686C; 4
		dc.w word_268BE-Map_2686C; 5
		dc.w word_268D8-Map_2686C; 6
		dc.w word_268EA-Map_2686C; 7
word_2687C:	dc.w 1			
		dc.w $FF00,    0,    0,$FFE8; 0
word_26886:	dc.w 1			
		dc.w $FF04,    1,    0,$FFE8; 0
word_26890:	dc.w 1			
		dc.w $FC05,    3,    1,$FFEC; 0
word_2689A:	dc.w 2			
		dc.w $FC05,    7,    3,$FFF8; 0
		dc.w $FC05,    3,    1,$FFF0; 4
word_268AC:	dc.w 2			
		dc.w $FC05,$1007,$1003,	   0; 0
		dc.w $FC01,$100B,$1005,$FFF8; 4
word_268BE:	dc.w 3			
		dc.w $FC01,   $D,    6,	  $C; 0
		dc.w $FC01,   $B,    5,	   4; 4
		dc.w $FC01,$180D,$1806,$FFFC; 8
word_268D8:	dc.w 2			
		dc.w $FC01,   $D,    6,	 $10; 0
		dc.w $FC01,$180D,$1806,	   8; 4
word_268EA:	dc.w 2			
		dc.w $F007,  $15,   $A,$FFF0; 0
		dc.w $F007,  $1D,   $E,	   0; 4
; ===========================================================================

loc_268FC:				
		jmp	DisplaySprite
; ===========================================================================

loc_26902:				
		jmp	DeleteObject
; ===========================================================================

loc_26908:				
		jmp	SingleObjLoad
; ===========================================================================

loc_2690E:				
		jmp	MarkObjGone
; ===========================================================================

loc_26914:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2691A:				
		jmp	loc_1978E
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Twin stompers	from MTZ
; ----------------------------------------------------------------------------

Sprite_26920:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2692E(pc,d0.w),d1
		jmp	off_2692E(pc,d1.w)
; ===========================================================================
off_2692E:	dc.w loc_2693A-off_2692E; 0 
		dc.w loc_269A2-off_2692E; 1
byte_26932:	dc.b $40, $C		; 0
		dc.b $40,  1		; 2
		dc.b $10,$20		; 4
		dc.b $40,  1		; 6
; ===========================================================================

loc_2693A:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_26932(pc,d0.w),a3
		move.b	(a3)+,$19(a0)
		move.b	(a3)+,$2E(a0)
		lsr.w	#2,d0
		move.b	d0,$1A(a0)
		bne.s	loc_2696A
		move.b	#$6C,$16(a0) ; 'l'
		bset	#4,1(a0)

loc_2696A:				
		move.l	#Map_26A5C,4(a0)
		move.w	#$2000,2(a0)
		bsr.w	loc_26AD4
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$30(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		move.w	d0,$3C(a0)
		andi.b	#$F,$28(a0)

loc_269A2:				
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_269F4(pc,d0.w),d1
		jsr	off_269F4(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	1(a0)
		bpl.s	loc_269D6
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$2E(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_26ADA

loc_269D6:				
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_269EE
		jmp	DisplaySprite
; ===========================================================================

loc_269EE:				
		jmp	DeleteObject
; ===========================================================================
off_269F4:	dc.w locret_269F8-off_269F4; 0 
		dc.w loc_269FA-off_269F4; 1
; ===========================================================================

locret_269F8:				
		rts	
; ===========================================================================

loc_269FA:				
		tst.b	$38(a0)
		bne.s	loc_26A1E
		tst.w	$3A(a0)
		beq.s	loc_26A0C
		subq.w	#8,$3A(a0)
		bra.s	loc_26A3E
; ===========================================================================

loc_26A0C:				
		subq.w	#1,$36(a0)
		bpl.s	loc_26A3E
		move.w	#$5A,$36(a0) ; 'Z'
		move.b	#1,$38(a0)

loc_26A1E:				
		move.w	$3A(a0),d0
		cmp.w	$3C(a0),d0
		beq.s	loc_26A2E
		addq.w	#8,$3A(a0)
		bra.s	loc_26A3E
; ===========================================================================

loc_26A2E:				
		subq.w	#1,$36(a0)
		bpl.s	loc_26A3E
		move.w	#$5A,$36(a0) ; 'Z'
		clr.b	$38(a0)

loc_26A3E:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26A50
		neg.w	d0
		addi.w	#$40,d0	; '@'

loc_26A50:				
		move.w	$30(a0),d1
		add.w	d0,d1
		move.w	d1,$C(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_26A5C:				
		dc.w word_26A60-Map_26A5C; 0
		dc.w word_26AB2-Map_26A5C; 1
word_26A60:	dc.w $A			
		dc.w $F40E,    1,    0,$FFC0; 0
		dc.w $F40E, $801, $800,$FFE0; 4
		dc.w $F40E,    1,    0,	   0; 8
		dc.w $F40E, $801, $800,	 $20; 12
		dc.w  $C07,   $D,    6,$FFD8; 16
		dc.w $2C07,   $D,    6,$FFD8; 20
		dc.w $4C07,   $D,    6,$FFD8; 24
		dc.w  $C07,   $D,    6,	 $18; 28
		dc.w $2C07,   $D,    6,	 $18; 32
		dc.w $4C07,   $D,    6,	 $18; 36
word_26AB2:	dc.w 4			
		dc.w $E007,  $57,  $2B,$FFF0; 0
		dc.w $E007, $857, $82B,	   0; 4
		dc.w	 7,$1057,$102B,$FFF0; 8
		dc.w	 7,$1857,$182B,	   0; 12
; ===========================================================================

loc_26AD4:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_26ADA:				
		jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_26AE0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_26AEE(pc,d0.w),d1
		jmp	off_26AEE(pc,d1.w)
; ===========================================================================
off_26AEE:	dc.w loc_26B06-off_26AEE; 0 
		dc.w loc_26C1C-off_26AEE; 1
		dc.w loc_26EA4-off_26AEE; 2
		dc.w loc_26EC2-off_26AEE; 3
byte_26AF6:	dc.b $40, $C		; 0
		dc.b $80,  1		; 2
		dc.b $20, $C		; 4
		dc.b $40,  3		; 6
		dc.b $10,$10		; 8
		dc.b $20,  0		; 10
		dc.b $40, $C		; 12
		dc.b $80,  7		; 14
; ===========================================================================

loc_26B06:				
		addq.b	#2,$24(a0)
		move.l	#Map_26EC8,4(a0)
		move.w	#$6000,2(a0)
		bsr.w	loc_26F4C
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_26AF6(pc,d0.w),a3
		move.b	(a3)+,$19(a0)
		move.b	(a3)+,$16(a0)
		lsr.w	#2,d0
		move.b	d0,$1A(a0)
		cmpi.b	#1,d0
		bne.s	loc_26B52
		bset	#7,$22(a0)

loc_26B52:				
		cmpi.b	#2,d0
		bne.s	loc_26B6E
		addq.b	#4,$24(a0)
		move.l	#Map_26F04,4(a0)
		move.w	#$655F,2(a0)
		bra.w	loc_26EC2
; ===========================================================================

loc_26B6E:				
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$30(a0)
		moveq	#0,d0
		move.b	(a3)+,d0
		move.w	d0,$3C(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		bpl.w	loc_26C16
		andi.b	#$F,d0
		move.b	d0,$3E(a0)
		move.b	(a3),$28(a0)
		cmpi.b	#7,(a3)
		bne.s	loc_26BA4
		move.w	$3C(a0),$3A(a0)

loc_26BA4:				
		bsr.w	loc_26F46
		bne.s	loc_26C04
		_move.b	0(a0),0(a1)
		addq.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#-$4C,8(a1)
		addi.w	#$14,$C(a1)
		btst	#0,$22(a0)
		bne.s	loc_26BE0
		subi.w	#-$18,8(a1)
		bset	#0,1(a1)

loc_26BE0:				
		move.l	#Map_26F04,4(a1)
		move.w	#$655F,2(a1)
		ori.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.l	a0,$3C(a1)

loc_26C04:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26C16
		bclr	#7,2(a2,d0.w)

loc_26C16:				
		andi.b	#$F,$28(a0)

loc_26C1C:				
		move.w	8(a0),$2E(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_26C7E(pc,d0.w),d1
		jsr	off_26C7E(pc,d1.w)
		move.w	$2E(a0),d4
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#5,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_26F52
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_26C66
		jmp	DisplaySprite
; ===========================================================================

loc_26C66:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26C78
		bclr	#7,2(a2,d0.w)

loc_26C78:				
		jmp	DeleteObject
; ===========================================================================
off_26C7E:	dc.w locret_26C8E-off_26C7E; 0 
		dc.w loc_26CA4-off_26C7E; 1
		dc.w loc_26D34-off_26C7E; 2
		dc.w loc_26D94-off_26C7E; 3
		dc.w loc_26E3C-off_26C7E; 4
		dc.w loc_26E4A-off_26C7E; 5
		dc.w loc_26C90-off_26C7E; 6
		dc.w loc_26D14-off_26C7E; 7
; ===========================================================================

locret_26C8E:				
		rts	
; ===========================================================================

loc_26C90:				
		tst.b	$38(a0)
		bne.s	loc_26CA2
		subq.w	#1,$36(a0)
		bne.s	loc_26CD0
		move.b	#1,$38(a0)

loc_26CA2:				
		bra.s	loc_26CC2
; ===========================================================================

loc_26CA4:				
		tst.b	$38(a0)
		bne.s	loc_26CC2
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$3E(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_26CD0
		move.b	#1,$38(a0)

loc_26CC2:				
		move.w	$3C(a0),d0
		cmp.w	$3A(a0),d0
		beq.s	loc_26CF2
		addq.w	#2,$3A(a0)

loc_26CD0:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26CE2
		neg.w	d0
		addi.w	#$80,d0	

loc_26CE2:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,8(a0)
		move.w	d1,$2E(a0)
		rts	
; ===========================================================================

loc_26CF2:				
		addq.b	#1,$28(a0)
		move.w	#$B4,$36(a0)
		clr.b	$38(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26CD0
		bset	#0,2(a2,d0.w)
		bra.s	loc_26CD0
; ===========================================================================

loc_26D14:				
		tst.b	$38(a0)
		bne.s	loc_26D32
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$3E(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_26D50
		move.b	#1,$38(a0)

loc_26D32:				
		bra.s	loc_26D46
; ===========================================================================

loc_26D34:				
		tst.b	$38(a0)
		bne.s	loc_26D46
		subq.w	#1,$36(a0)
		bne.s	loc_26D50
		move.b	#1,$38(a0)

loc_26D46:				
		tst.w	$3A(a0)
		beq.s	loc_26D72
		subq.w	#2,$3A(a0)

loc_26D50:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26D62
		neg.w	d0
		addi.w	#$80,d0	

loc_26D62:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,8(a0)
		move.w	d1,$2E(a0)
		rts	
; ===========================================================================

loc_26D72:				
		subq.b	#1,$28(a0)
		move.w	#$B4,$36(a0)
		clr.b	$38(a0)
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_26D50
		bclr	#0,2(a2,d0.w)
		bra.s	loc_26D50
; ===========================================================================

loc_26D94:				
		move.w	$34(a0),d4
		move.w	d4,d5
		btst	#0,$22(a0)
		bne.s	loc_26DAC
		subi.w	#$20,d4	; ' '
		addi.w	#$60,d5	; '`'
		bra.s	loc_26DB4
; ===========================================================================

loc_26DAC:				
		subi.w	#$A0,d4	
		subi.w	#$20,d5	; ' '

loc_26DB4:				
		move.w	$C(a0),d2
		move.w	d2,d3
		subi.w	#$10,d2
		addi.w	#$40,d3	; '@'
		moveq	#0,d1
		move.w	($FFFFB008).w,d0
		cmp.w	d4,d0
		bcs.s	loc_26DDE
		cmp.w	d5,d0
		bcc.s	loc_26DDE
		move.w	($FFFFB00C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_26DDE
		cmp.w	d3,d0
		bcc.s	loc_26DDE
		moveq	#1,d1

loc_26DDE:				
		move.w	($FFFFB048).w,d0
		cmp.w	d4,d0
		bcs.s	loc_26DF8
		cmp.w	d5,d0
		bcc.s	loc_26DF8
		move.w	($FFFFB04C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_26DF8
		cmp.w	d3,d0
		bcc.s	loc_26DF8
		moveq	#1,d1

loc_26DF8:				
		tst.b	d1
		beq.s	loc_26E0E
		move.w	$3C(a0),d0
		cmp.w	$3A(a0),d0
		beq.s	locret_26E3A
		addi.w	#$10,$3A(a0)
		bra.s	loc_26E1A
; ===========================================================================

loc_26E0E:				
		tst.w	$3A(a0)
		beq.s	loc_26E1A
		subi.w	#$10,$3A(a0)

loc_26E1A:				
		move.w	$3A(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_26E2C
		neg.w	d0
		addi.w	#$40,d0	; '@'

loc_26E2C:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,8(a0)
		move.w	d1,$2E(a0)

locret_26E3A:				
		rts	
; ===========================================================================

loc_26E3C:				
		btst	#3,$22(a0)
		beq.s	locret_26E48
		addq.b	#1,$28(a0)

locret_26E48:				
		rts	
; ===========================================================================

loc_26E4A:				
		tst.b	$38(a0)
		bne.s	loc_26E84
		addq.w	#2,8(a0)
		cmpi.b	#5,(v_zone).w
		bne.s	loc_26E74
		cmpi.w	#$1CC0,8(a0)
		beq.s	loc_26E6C
		cmpi.w	#$2940,8(a0)
		bne.s	loc_26E96

loc_26E6C:				
		move.b	#0,$28(a0)
		bra.s	loc_26E96
; ===========================================================================

loc_26E74:				
		cmpi.w	#$1BC0,8(a0)
		bne.s	loc_26E96
		move.b	#1,$38(a0)
		bra.s	loc_26E96
; ===========================================================================

loc_26E84:				
		subq.w	#2,8(a0)
		cmpi.w	#$1880,8(a0)
		bne.s	loc_26E96
		move.b	#0,$38(a0)

loc_26E96:				
		move.w	8(a0),$34(a0)
		move.w	8(a0),(v_mtz_platform_cog_x_pos).w
		rts	
; ===========================================================================

loc_26EA4:				
		movea.l	$3C(a0),a1
		move.w	$3A(a1),d0

loc_26EAC:				
		andi.w	#7,d0
		move.b	byte_26EBA(pc,d0.w),$1A(a0)
		bra.w	loc_26F40
; ===========================================================================
byte_26EBA:	dc.b   0		; 0
		dc.b   0		; 1
		dc.b   2		; 2
		dc.b   2		; 3
		dc.b   2		; 4
		dc.b   1		; 5
		dc.b   1		; 6
		dc.b   1		; 7
; ===========================================================================

loc_26EC2:				
					
		move.w	(v_mtz_platform_cog_x_pos).w,d0
		bra.s	loc_26EAC
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_26EC8:				
		dc.w word_26ED0-Map_26EC8; 0
		dc.w word_26EF2-Map_26EC8; 1
		dc.w word_26ED0-Map_26EC8; 2
		dc.w word_26ED0-Map_26EC8; 3
word_26ED0:	dc.w 4			
		dc.w $F40E,  $4B,  $25,$FFC0; 0
		dc.w $F40E,  $4B,  $25,$FFE0; 4
		dc.w $F40E,  $4B,  $25,	   0; 8
		dc.w $F40E,  $4B,  $25,	 $20; 12
word_26EF2:	dc.w 2			
		dc.w $F40E,  $39,  $1C,$FFE0; 0
		dc.w $F40E, $839, $81C,	   0; 4
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_26F04:				
		dc.w word_26F0A-Map_26F04; 0
		dc.w word_26F1C-Map_26F04; 1
		dc.w word_26F2E-Map_26F04; 2
word_26F0A:	dc.w 2			
		dc.w $F406,    0,    0,$FFF0; 0
		dc.w $F406, $800, $800,	   0; 4
word_26F1C:	dc.w 2			
		dc.w $F406,    6,    3,$FFF0; 0
		dc.w $F406,$1806,$1803,	   0; 4
word_26F2E:	dc.w 2			
		dc.w $F406,$1006,$1003,$FFF0; 0
		dc.w $F406, $806, $803,	   0; 4
; ===========================================================================

loc_26F40:				
		jmp	MarkObjGone
; ===========================================================================

loc_26F46:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_26F4C:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_26F52:				
		jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_26F58:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_26F66(pc,d0.w),d1
		jmp	off_26F66(pc,d1.w)
; ===========================================================================
off_26F66:	dc.w loc_26F6A-off_26F66; 0 
		dc.w loc_26FAE-off_26F66; 1
; ===========================================================================

loc_26F6A:				
		addq.b	#2,$24(a0)
		move.l	#Map_27120,4(a0)
		move.w	#-$7980,2(a0)
		bsr.w	loc_2714E
		ori.b	#4,1(a0)
		move.b	#8,$19(a0)
		move.b	#4,$18(a0)
		move.b	#$40,$16(a0) ; '@'
		move.b	$28(a0),d0
		lsr.b	#4,d0
		andi.b	#7,d0
		move.b	d0,$1A(a0)
		beq.s	loc_26FAE
		move.b	#-$80,$16(a0)

loc_26FAE:				
					
		move.w	#$13,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_27154
		cmpi.b	#1,d4
		bne.s	loc_26FF6
		btst	#1,$22(a1)
		beq.s	loc_26FF6
		move.b	$22(a0),d1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcs.s	loc_26FEE
		eori.b	#1,d1

loc_26FEE:				
		andi.b	#1,d1
		bne.s	loc_26FF6
		bsr.s	loc_27042

loc_26FF6:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_27154
		cmpi.b	#1,d4
		bne.s	loc_2702C
		btst	#1,$22(a1)
		beq.s	loc_2702C
		move.b	$22(a0),d1
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcs.s	loc_27024
		eori.b	#1,d1

loc_27024:				
		andi.b	#1,d1
		bne.s	loc_2702C
		bsr.s	loc_27042

loc_2702C:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_27148
		rts	
; ===========================================================================

loc_27042:				
		cmpi.b	#4,$24(a1)
		bcs.s	loc_2704C
		rts	
; ===========================================================================

loc_2704C:				
		move.w	$30(a0),$10(a1)
		move.w	#-$800,$10(a1)
		move.w	#-$800,$12(a1)
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_27076
		bclr	#0,$22(a1)
		neg.w	$10(a1)

loc_27076:				
		move.w	#$F,$2E(a1)
		move.w	$10(a1),$14(a1)
		btst	#2,$22(a1)
		bne.s	loc_27090
		move.b	#0,$1C(a1)

loc_27090:				
		move.b	$28(a0),d0
		bpl.s	loc_2709C

loc_27096:
		move.w	#0,$12(a1)

loc_2709C:				
		btst	#0,d0
		beq.s	loc_270DC
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#1,$2C(a1)
		move.b	#8,$2D(a1)
		btst	#1,d0
		bne.s	loc_270CC
		move.b	#3,$2C(a1)

loc_270CC:				
		btst	#0,$22(a1)
		beq.s	loc_270DC
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_270DC:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_270F2
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_270F2:				
		cmpi.b	#8,d0
		bne.s	loc_27104
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_27104:				
		bclr	#5,$22(a0)
		bclr	#6,$22(a0)
		bclr	#5,$22(a1)
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27120:				
		dc.w word_27124-Map_27120; 0
		dc.w word_27136-Map_27120; 1
word_27124:	dc.w 2			
		dc.w $C005,  $34,  $1A,$FFF8; 0
		dc.w $3005,  $34,  $1A,$FFF8; 4
word_27136:	dc.w 2			
		dc.w $8005,  $34,  $1A,$FFF8; 0
		dc.w $7005,  $34,  $1A,$FFF8; 4
; ===========================================================================

loc_27148:				
		jmp	DeleteObject
; ===========================================================================

loc_2714E:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_27154:				
		jmp	loc_1978E
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Spin tube from MTZ
; ----------------------------------------------------------------------------

Sprite_2715C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_27184(pc,d0.w),d1
		jsr	off_27184(pc,d1.w)
		move.b	$2C(a0),d0
		add.b	$36(a0),d0
		beq.w	loc_2758C
		lea	(byte_2752E).l,a1
		bsr.w	loc_27586
		bra.w	loc_27580
; ===========================================================================
off_27184:	dc.w loc_27188-off_27184; 0 
		dc.w loc_271AC-off_27184; 1
; ===========================================================================

loc_27188:				
		addq.b	#2,$24(a0)
		move.l	#Map_27548,4(a0)
		move.w	#$656B,2(a0)
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)

loc_271AC:				
		lea	($FFFFB000).w,a1
		lea	$2C(a0),a4
		bsr.s	loc_271BE
		lea	($FFFFB040).w,a1
		lea	$36(a0),a4

loc_271BE:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_271CA(pc,d0.w),d0
		jmp	off_271CA(pc,d0.w)
; ===========================================================================
off_271CA:	dc.w loc_271D0-off_271CA; 0 
		dc.w loc_27260-off_271CA; 1
		dc.w loc_27294-off_271CA; 2
; ===========================================================================

loc_271D0:				
		tst.w	(v_debug_active).w
		bne.w	locret_2725E
		move.w	8(a1),d0

loc_271DC:
		sub.w	8(a0),d0
		addq.w	#3,d0
		btst	#0,$22(a0)
		beq.s	loc_271EE
		addi.w	#$A,d0

loc_271EE:				
		cmpi.w	#$10,d0
		bcc.s	locret_2725E
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		addi.w	#$20,d1	; ' '
		cmpi.w	#$40,d1	; '@'
		bcc.s	locret_2725E
		tst.b	$2A(a1)
		bne.s	locret_2725E
		addq.b	#2,(a4)
		move.b	#-$7F,$2A(a1)
		move.b	#2,$1C(a1)
		move.w	#$800,$14(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bset	#1,$22(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		clr.b	1(a4)
		move.w	#$BE,d0	
		jsr	(PlaySound).l
		move.w	#$100,$1C(a0)

locret_2725E:				
		rts	
; ===========================================================================

loc_27260:				
		move.b	1(a4),d0
		addq.b	#2,1(a4)
		jsr	(CalcSine).l
		asr.w	#5,d0
		move.w	$C(a0),d2
		sub.w	d0,d2
		move.w	d2,$C(a1)
		cmpi.b	#-$80,1(a4)
		bne.s	locret_27292
		bsr.w	loc_27310
		addq.b	#2,(a4)
		move.w	#$BC,d0	
		jsr	(PlaySound).l

locret_27292:				
		rts	
; ===========================================================================

loc_27294:				
		subq.b	#1,2(a4)
		bpl.s	loc_272C8
		movea.l	6(a4),a2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$C(a1)
		tst.b	$28(a0)
		bpl.s	loc_272B2
		subq.w	#8,a2

loc_272B2:				
		move.l	a2,6(a4)
		subq.w	#4,4(a4)
		beq.s	loc_272EE
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2
		bra.w	loc_27374
; ===========================================================================

loc_272C8:				
		move.l	8(a1),d2
		move.l	$C(a1),d3
		move.w	$10(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a1),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,8(a1)
		move.l	d3,$C(a1)
		rts	
; ===========================================================================

loc_272EE:				
		andi.w	#$7FF,$C(a1)
		clr.b	(a4)
		clr.b	$2A(a1)
		btst	#4,$28(a0)
		bne.s	locret_2730E
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)

locret_2730E:				
		rts	
; ===========================================================================

loc_27310:				
		move.b	$28(a0),d0
		bpl.s	loc_27344
		neg.b	d0
		andi.w	#$F,d0
		add.w	d0,d0
		lea	(off_273F2).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d0
		subq.w	#4,d0
		move.w	d0,4(a4)
		lea	(a2,d0.w),a2
		move.w	(a2)+,d4
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$C(a1)
		subq.w	#8,a2
		bra.s	loc_27368
; ===========================================================================

loc_27344:				
		andi.w	#$F,d0
		add.w	d0,d0

loc_2734A:
		lea	(off_273F2).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,4(a4)
		subq.w	#4,4(a4)
		move.w	(a2)+,d4

loc_2735E:
		move.w	d4,8(a1)
		move.w	(a2)+,d5
		move.w	d5,$C(a1)

loc_27368:				
		move.l	a2,6(a4)
		move.w	(a2)+,d4
		move.w	(a2)+,d5
		move.w	#$1000,d2

loc_27374:				
		moveq	#0,d0
		move.w	d2,d3
		move.w	d4,d0
		sub.w	8(a1),d0
		bge.s	loc_27384
		neg.w	d0
		neg.w	d2

loc_27384:				
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$C(a1),d1
		bge.s	loc_27392
		neg.w	d1
		neg.w	d3

loc_27392:				
		cmp.w	d0,d1
		bcs.s	loc_273C4
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$C(a1),d1
		swap	d1
		divs.w	d3,d1
		moveq	#0,d0
		move.w	d4,d0
		sub.w	8(a1),d0
		beq.s	loc_273B0
		swap	d0
		divs.w	d1,d0

loc_273B0:				
		move.w	d0,$10(a1)
		move.w	d3,$12(a1)
		tst.w	d1
		bpl.s	loc_273BE
		neg.w	d1

loc_273BE:				
		move.w	d1,2(a4)
		rts	
; ===========================================================================

loc_273C4:				
		moveq	#0,d0
		move.w	d4,d0
		sub.w	8(a1),d0
		swap	d0
		divs.w	d2,d0
		moveq	#0,d1
		move.w	d5,d1
		sub.w	$C(a1),d1
		beq.s	loc_273DE
		swap	d1
		divs.w	d0,d1

loc_273DE:				
		move.w	d1,$12(a1)
		move.w	d2,$10(a1)
		tst.w	d0
		bpl.s	loc_273EC
		neg.w	d0

loc_273EC:				
		move.w	d0,2(a4)
		rts	
; ===========================================================================
off_273F2:	dc.w byte_2740C-off_273F2; 0 
		dc.w byte_27426-off_273F2; 1
		dc.w byte_27430-off_273F2; 2
		dc.w byte_2744A-off_273F2; 3
		dc.w byte_27454-off_273F2; 4
		dc.w byte_2745E-off_273F2; 5
		dc.w byte_27478-off_273F2; 6
		dc.w byte_27492-off_273F2; 7
		dc.w byte_274AC-off_273F2; 8
		dc.w byte_274C6-off_273F2; 9
		dc.w byte_274E0-off_273F2; 10
		dc.w byte_274FA-off_273F2; 11
		dc.w byte_27514-off_273F2; 12
byte_2740C:	dc.b   0,$18,  7,$A8,  2,$70,  7,$50,  2,$70,  7,$40,  2,$80,  7,$40; 0
					
		dc.b   3,$E0,  7,$50,  3,$F0,  7,$A8,  3,$F0; 16
byte_27426:	dc.b   0,  8, $C,$58,  5,$F0, $E,$28,  5,$F0; 0	
byte_27430:	dc.b   0,$18,$18,$28,  6,$B0,$17,$D0,  6,$B0,$17,$C0,  6,$C0,$17,$C0; 0
					
		dc.b   7,$E0,$17,$B0,  7,$F0,$17,$58,  7,$F0; 16
byte_2744A:	dc.b   0,  8,  5,$D8,  3,$70,  7,$80,  3,$70; 0	
byte_27454:	dc.b   0,  8,  5,$D8,  5,$F0,  7,  0,  5,$F0; 0	
byte_2745E:	dc.b   0,$18, $B,$D8,  1,$F0, $C,$30,  1,$F0, $C,$40,  1,$E0, $C,$40; 0
					
		dc.b   0,$C0, $C,$50,  0,$B0, $C,$A8,  0,$B0; 16
byte_27478:	dc.b   0,$18,$17,$28,  3,$30,$15,$D0,  3,$30,$15,$C0,  3,$20,$15,$C0; 0
					
		dc.b   2,$40,$15,$D0,  2,$30,$16,$28,  2,$30; 16
byte_27492:	dc.b   0,$18,  6,$D8,  1,$F0,  7,$30,  1,$F0,  7,$40,  1,$E0,  7,$40; 0
					
		dc.b   1,  0,  7,$50,  0,$F0,  7,$A8,  0,$F0; 16
byte_274AC:	dc.b   0,$18,  7,$D8,  3,$30,  8,$28,  3,$30,  8,$40,  3,$40,  8,$40; 0
					
		dc.b   4,$58,  8,$28,  4,$70,  7,$D8,  4,$70; 16
byte_274C6:	dc.b   0,$18, $F,$D8,  3,$B0,$10,$28,  3,$B0,$10,$40,  3,$98,$10,$40; 0
					
		dc.b   2,$C4,$10,$58,  2,$B0,$10,$A8,  2,$B0; 16
byte_274E0:	dc.b   0,$18		; 0 
		dc.b  $F,$D8,  4,$B0,$10,$28,  4,$B0; 0
		dc.b $10,$40,  4,$C0,$10,$40,  5,$D8,$10,$58,  5,$F0,$10,$A8,  5,$F0; 0
byte_274FA:	dc.b   0,$18,$20,$58,  4,$30,$20,$A8,  4,$30,$20,$C0,  4,$18,$20,$C0; 0
					
		dc.b   2,$C0,$20,$D0,  2,$B0,$21,$28,  2,$B0; 16
byte_27514:	dc.b   0,$18,$23,$28,  5,$B0,$22,$D0,  5,$B0,$22,$C0,  5,$A0,$22,$C0; 0
					
		dc.b   4,$C0,$22,$D0,  4,$B0,$23,$28,  4,$B0; 16
byte_2752E:	dc.b   0,  4,  0,  7,$1F,  0,$FF,  1,  1,  0,  0,  0,  0,  0,  1,  0; 0
					
		dc.b   0,  0,  1,  0,  0,  1,  0,$FE,  2,  0; 16
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_27548:				
		dc.w word_2754C-Map_27548; 0
		dc.w word_2754E-Map_27548; 1
word_2754C:	dc.w 0			
word_2754E:	dc.w 6			
		dc.w $E005,    0,    0,$FFEC; 0
		dc.w $E005,    0,    0,$FFF8; 4
		dc.w $F005,    0,    0,$FFEC; 8
		dc.w $F005,    0,    0,$FFF8; 12
		dc.w	 5,    0,    0,$FFEC; 16
		dc.w	 5,    0,    0,$FFF8; 20
; ===========================================================================

loc_27580:				
		jmp	DisplaySprite
; ===========================================================================

loc_27586:				
		jmp	AnimateSprite
; ===========================================================================

loc_2758C:				
		jmp	MarkObjGone3
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; BLock	that has a spike that comes out	o each side sequentially from MTZ
; ----------------------------------------------------------------------------

Sprite_27594:				
		moveq	#0,d0
		move.b	$24(a0),d0

loc_2759A:
		move.w	off_275A2(pc,d0.w),d1
		jmp	off_275A2(pc,d1.w)
; ===========================================================================
off_275A2:	dc.w loc_275A8-off_275A2; 0 
		dc.w loc_2764A-off_275A2; 1
		dc.w loc_27662-off_275A2; 2
; ===========================================================================

loc_275A8:				
		addq.b	#2,$24(a0)
		move.l	#Map_27750,4(a0)
		move.w	#$6414,2(a0)
		bsr.w	loc_27870
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		bsr.w	loc_2786A
		bne.s	loc_27644
		_move.b	0(a0),0(a1)
		addq.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	8(a1),$30(a1)
		move.w	$C(a1),$32(a1)
		move.l	4(a0),4(a1)
		move.w	#$241C,2(a1)
		ori.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.w	(v_frame_counter).w,d0
		lsr.w	#6,d0
		move.w	d0,d1
		andi.w	#1,d0
		move.w	d0,$36(a1)
		lsr.w	#1,d1
		add.b	$28(a0),d1
		andi.w	#3,d1
		move.b	d1,$25(a1)
		move.b	d1,$1A(a1)
		lea	(byte_2774C).l,a2
		move.b	(a2,d1.w),$20(a1)

loc_27644:				
		move.b	#4,$1A(a0)

loc_2764A:				
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	8(a0),d4
		bsr.w	loc_27876
		bra.w	loc_27864
; ===========================================================================

loc_27662:				
		bsr.w	loc_276CA
		moveq	#0,d0
		move.b	$25(a0),d0
		add.w	d0,d0
		move.w	off_2767E(pc,d0.w),d1
		jsr	off_2767E(pc,d1.w)
		move.w	$30(a0),d0
		bra.w	loc_2787C
; ===========================================================================
off_2767E:	dc.w loc_27686-off_2767E; 0 
		dc.w loc_27698-off_2767E; 1
		dc.w loc_276A8-off_2767E; 2
		dc.w loc_276B8-off_2767E; 3
; ===========================================================================

loc_27686:				
		moveq	#0,d0
		move.b	$34(a0),d0
		neg.w	d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_27698:				
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		rts	
; ===========================================================================

loc_276A8:				
		moveq	#0,d0
		move.b	$34(a0),d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_276B8:				
		moveq	#0,d0
		move.b	$34(a0),d0
		neg.w	d0
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		rts	
; ===========================================================================

loc_276CA:				
		tst.w	$38(a0)
		beq.s	loc_276EE
		move.b	($FFFFFE05).w,d0
		andi.b	#$3F,d0	; '?'
		bne.s	locret_2774A
		clr.w	$38(a0)
		tst.b	1(a0)
		bpl.s	loc_276EE
		move.w	#$B6,d0	
		jsr	(PlaySound).l

loc_276EE:				
		tst.w	$36(a0)
		beq.s	loc_2772A
		subi.w	#$800,$34(a0)
		bcc.s	locret_2774A
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#1,$38(a0)
		addq.b	#1,$25(a0)
		andi.b	#3,$25(a0)
		moveq	#0,d0
		move.b	$25(a0),d0
		move.b	d0,$1A(a0)
		move.b	byte_2774C(pc,d0.w),$20(a0)
		rts	
; ===========================================================================

loc_2772A:				
		addi.w	#$800,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	locret_2774A
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#1,$38(a0)

locret_2774A:				
		rts	
; ===========================================================================
byte_2774C:	dc.b $84		; 0 
		dc.b $A6		; 1
		dc.b $84		; 2
		dc.b $A6		; 3
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27750:				
		dc.w word_2775A-Map_27750; 0
		dc.w word_27764-Map_27750; 1
		dc.w word_2776E-Map_27750; 2
		dc.w word_27778-Map_27750; 3
		dc.w word_27782-Map_27750; 4
word_2775A:	dc.w 1			
		dc.w $F003,$1000,$1000,$FFFC; 0
word_27764:	dc.w 1			
		dc.w $FC0C,    4,    2,$FFF0; 0
word_2776E:	dc.w 1			
		dc.w $F003,    0,    0,$FFFC; 0
word_27778:	dc.w 1			
		dc.w $FC0C, $804, $802,$FFF0; 0
word_27782:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0; 0
		dc.w $F007, $800, $800,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Floor	spike from MTZ
; ----------------------------------------------------------------------------

Sprite_27794:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_277A2(pc,d0.w),d1
		jmp	off_277A2(pc,d1.w)
; ===========================================================================
off_277A2:	dc.w loc_277A6-off_277A2; 0 
		dc.w loc_277E0-off_277A2; 1
; ===========================================================================

loc_277A6:				
		addq.b	#2,$24(a0)
		move.l	#Map_27750,4(a0)
		move.w	#$241C,2(a0)
		bsr.w	loc_27870
		ori.b	#4,1(a0)
		move.b	#4,$19(a0)
		move.b	#4,$18(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		move.b	#-$7C,$20(a0)

loc_277E0:				
		bsr.w	loc_277FC
		moveq	#0,d0
		move.b	$34(a0),d0
		neg.w	d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		move.w	$30(a0),d0
		bra.w	loc_2787C
; ===========================================================================

loc_277FC:				
		tst.w	$3A(a0)
		beq.s	loc_27808
		subq.w	#1,$3A(a0)
		rts	
; ===========================================================================

loc_27808:				
		tst.w	$38(a0)
		beq.s	loc_27820
		move.b	($FFFFFE05).w,d0
		sub.b	$28(a0),d0
		andi.b	#$7F,d0	; ''
		bne.s	locret_27862
		clr.w	$38(a0)

loc_27820:				
		tst.w	$36(a0)
		beq.s	loc_27842
		subi.w	#$400,$34(a0)
		bcc.s	locret_27862
		move.w	#0,$34(a0)
		move.w	#0,$36(a0)
		move.w	#1,$38(a0)
		rts	
; ===========================================================================

loc_27842:				
		addi.w	#$400,$34(a0)
		cmpi.w	#$2000,$34(a0)
		bcs.s	locret_27862
		move.w	#$2000,$34(a0)
		move.w	#1,$36(a0)
		move.w	#3,$3A(a0)

locret_27862:				
		rts	
; ===========================================================================

loc_27864:				
		jmp	MarkObjGone
; ===========================================================================

loc_2786A:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_27870:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_27876:				
		jmp	SolidObject
; ===========================================================================

loc_2787C:				
		jmp	MarkObjGone2
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Nut from MTZ
; ----------------------------------------------------------------------------

Sprite_27884:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_27892(pc,d0.w),d1
		jmp	off_27892(pc,d1.w)
; ===========================================================================
off_27892:	dc.w loc_2789A-off_27892; 0 
		dc.w loc_278DC-off_27892; 1
		dc.w loc_279FC-off_27892; 2
		dc.w loc_278F4-off_27892; 3
; ===========================================================================

loc_2789A:				
		addq.b	#2,$24(a0)
		move.l	#Map_27A26,4(a0)
		move.w	#$2500,2(a0)
		bsr.w	loc_27A9C
		move.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#$B,$16(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$32(a0)
		move.b	$28(a0),d0
		andi.w	#$7F,d0	; ''
		lsl.w	#3,d0
		move.w	d0,$36(a0)

loc_278DC:				
		lea	($FFFFB000).w,a1
		lea	$38(a0),a4
		moveq	#3,d6
		bsr.s	loc_27912
		lea	($FFFFB040).w,a1
		lea	$3C(a0),a4
		moveq	#4,d6
		bsr.s	loc_27912

loc_278F4:				
					
		andi.w	#$7FF,$C(a0)
		move.w	#$2B,d1	; '+'
		move.w	#$C,d2
		move.w	#$D,d3
		move.w	8(a0),d4
		bsr.w	loc_27AA2
		bra.w	loc_27A90
; ===========================================================================

loc_27912:				
		btst	d6,$22(a0)
		bne.s	loc_2791A
		clr.b	(a4)

loc_2791A:				
		moveq	#0,d0
		move.b	(a4),d0
		move.w	off_27926(pc,d0.w),d0
		jmp	off_27926(pc,d0.w)
; ===========================================================================
off_27926:	dc.w loc_2792C-off_27926; 0 
		dc.w loc_2794C-off_27926; 1
		dc.w loc_2796E-off_27926; 2
; ===========================================================================

loc_2792C:				
		btst	d6,$22(a0)
		bne.s	loc_27934
		rts	
; ===========================================================================

loc_27934:				
		addq.b	#2,(a4)
		move.b	#0,1(a4)
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_2794C
		move.b	#1,1(a4)

loc_2794C:				
					
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.b	1(a4)
		beq.s	loc_2795E
		addi.w	#$F,d0

loc_2795E:				
		cmpi.w	#$10,d0
		bcc.s	locret_2796C
		move.w	8(a0),8(a1)
		addq.b	#2,(a4)

locret_2796C:				
		rts	
; ===========================================================================

loc_2796E:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		bcc.s	loc_279D4
		add.w	d0,$34(a0)
		move.w	8(a0),8(a1)
		move.w	$34(a0),d0
		asr.w	#3,d0
		move.w	d0,d1
		asr.w	#1,d0
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		neg.w	d1
		add.w	$32(a0),d1
		move.w	d1,$C(a0)
		sub.w	$32(a0),d1
		move.w	$36(a0),d0
		cmp.w	d0,d1
		blt.s	locret_279D2
		move.w	d0,d1
		add.w	$32(a0),d1
		move.w	d1,$C(a0)
		lsl.w	#3,d0
		neg.w	d0
		move.w	d0,$34(a0)
		move.b	#0,$1A(a0)
		tst.b	$28(a0)
		bmi.s	loc_279CC
		clr.b	(a4)
		rts	
; ===========================================================================

loc_279CC:				
		move.b	#4,$24(a0)

locret_279D2:				
		rts	
; ===========================================================================

loc_279D4:				
		add.w	d0,$34(a0)
		move.w	8(a0),8(a1)
		move.w	$34(a0),d0
		asr.w	#3,d0
		move.w	d0,d1
		asr.w	#1,d0
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		neg.w	d1
		add.w	$32(a0),d1
		move.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_279FC:				
		bsr.w	loc_27AA8
		addi.w	#$38,$12(a0)
		bsr.w	loc_27A96
		tst.w	d1
		bpl.w	loc_27A22
		add.w	d1,$C(a0)
		andi.w	#$7FF,$C(a0)
		clr.w	$12(a0)
		addq.b	#2,$24(a0)

loc_27A22:				
		bra.w	loc_278F4
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27A26:				
		dc.w word_27A2E-Map_27A26; 0
		dc.w word_27A40-Map_27A26; 1
		dc.w word_27A5A-Map_27A26; 2
		dc.w word_27A74-Map_27A26; 3
word_27A2E:	dc.w 2			
		dc.w $F40E,    0,    0,$FFE0; 0
		dc.w $F40E,   $C,    6,	   0; 4
word_27A40:	dc.w 3			
		dc.w $F40A,    3,    1,$FFE0; 0
		dc.w $F40E,   $C,    6,$FFF8; 4
		dc.w $F402, $809, $804,	 $18; 8
word_27A5A:	dc.w 3			
		dc.w $F406,  $24,  $12,$FFE0; 0
		dc.w $F40E,  $2A,  $15,$FFF0; 4
		dc.w $F406,  $18,   $C,	 $10; 8
word_27A74:	dc.w 3			
		dc.w $F402,  $27,  $13,$FFE0; 0
		dc.w $F40E,  $18,   $C,$FFE8; 4
		dc.w $F40A, $82D, $816,	   8; 8
; ===========================================================================
		nop	

loc_27A90:				
		jmp	MarkObjGone
; ===========================================================================

loc_27A96:				
		jmp	loc_1EDFA
; ===========================================================================

loc_27A9C:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_27AA2:				
		jmp	SolidObject
; ===========================================================================

loc_27AA8:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_27AB0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_27ABE(pc,d0.w),d1
		jmp	off_27ABE(pc,d1.w)
; ===========================================================================
off_27ABE:	dc.w loc_27AC4-off_27ABE; 0 
		dc.w loc_27BDE-off_27ABE; 1
		dc.w loc_27C66-off_27ABE; 2
; ===========================================================================

loc_27AC4:				
		addq.b	#2,$24(a0)
		move.l	#Map_26EC8,4(a0)
		move.w	#$6000,2(a0)
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#$C,$16(a0)
		move.l	#byte_27CDC,$2C(a0)
		move.b	#1,$1A(a0)
		cmpi.b	#$B,(v_zone).w
		bne.w	loc_27BC4
		addq.b	#2,$24(a0)
		move.l	#Map_27D30,4(a0)
		move.w	#$63D4,2(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#$20,$16(a0) ; ' '
		move.l	#byte_27CF4,$2C(a0)
		btst	#0,$22(a0)
		beq.s	loc_27B3C
		move.l	#byte_27D12,$2C(a0)

loc_27B3C:				
		move.b	#0,$1A(a0)
		cmpi.b	#$18,$28(a0)
		bne.w	loc_27BD0
		bsr.w	loc_27D54
		bne.s	loc_27B9C
		bsr.s	loc_27B9E
		addi.w	#$40,8(a1) ; '@'
		addi.w	#$40,$C(a1) ; '@'
		move.b	#6,$28(a1)
		btst	#0,$22(a0)
		beq.s	loc_27B74
		move.b	#$C,$28(a1)

loc_27B74:				
		bsr.w	loc_27D54
		bne.s	loc_27B9C
		bsr.s	loc_27B9E
		subi.w	#$40,8(a1) ; '@'
		addi.w	#$40,$C(a1) ; '@'
		move.b	#$C,$28(a1)
		btst	#0,$22(a0)
		beq.s	loc_27B9C
		move.b	#6,$28(a1)

loc_27B9C:				
		bra.s	loc_27BC4
; ===========================================================================

loc_27B9E:				
		_move.b	0(a0),0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	8(a0),$32(a1)
		move.w	$C(a0),$30(a1)
		move.b	$22(a0),$22(a1)
		rts	
; ===========================================================================

loc_27BC4:				
		move.w	8(a0),$32(a0)
		move.w	$C(a0),$30(a0)

loc_27BD0:				
		bsr.w	loc_27D5A
		move.b	$28(a0),$38(a0)
		bra.w	loc_27CA2
; ===========================================================================

loc_27BDE:				
		move.w	8(a0),-(sp)
		tst.w	$36(a0)
		bne.s	loc_27C2E
		move.b	$3C(a0),d1
		move.b	$22(a0),d0
		btst	#3,d0
		bne.s	loc_27C0A
		btst	#3,d1
		beq.s	loc_27C0E
		move.b	#1,$36(a0)
		move.b	#0,$3C(a0)
		bra.s	loc_27C3E
; ===========================================================================

loc_27C0A:				
		move.b	d0,$3C(a0)

loc_27C0E:				
		btst	#4,d0
		bne.s	loc_27C28
		btst	#4,d1
		beq.s	loc_27C3E
		move.b	#1,$36(a0)
		move.b	#0,$3C(a0)
		bra.s	loc_27C3E
; ===========================================================================

loc_27C28:				
		move.b	d0,$3C(a0)
		bra.s	loc_27C3E
; ===========================================================================

loc_27C2E:				
		jsr	SpeedToPos
		subq.w	#1,$34(a0)
		bne.s	loc_27C3E
		bsr.w	loc_27CA2

loc_27C3E:				
		move.w	(sp)+,d4
		tst.b	1(a0)
		bpl.s	loc_27C5E
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_27D60

loc_27C5E:				
		move.w	$32(a0),d0
		bra.w	loc_27D66
; ===========================================================================

loc_27C66:				
		move.w	8(a0),-(sp)
		jsr	SpeedToPos
		subq.w	#1,$34(a0)
		bne.s	loc_27C7A
		bsr.w	loc_27CA2

loc_27C7A:				
		move.w	(sp)+,d4
		tst.b	1(a0)
		bpl.s	loc_27C9A
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_27D60

loc_27C9A:				
		move.w	$32(a0),d0
		bra.w	loc_27D66
; ===========================================================================

loc_27CA2:				
		moveq	#0,d0
		move.b	$38(a0),d0
		movea.l	$2C(a0),a1
		lea	(a1,d0.w),a1
		move.w	(a1)+,$10(a0)
		move.w	(a1)+,$12(a0)
		move.w	(a1)+,$34(a0)
		move.w	#7,$3A(a0)
		move.b	#0,$36(a0)
		addq.b	#6,$38(a0)
		cmpi.b	#$18,$38(a0)
		bcs.s	locret_27CDA
		move.b	#0,$38(a0)

locret_27CDA:				
		rts	
; ===========================================================================
byte_27CDC:	dc.b   0,  0,  4,  0,  0,$10,  4,  0,$FE,  0,  0,$20,  0,  0,  4,  0; 0
					
		dc.b   0,$10,$FC,  0,$FE,  0,  0,$20; 16
byte_27CF4:	dc.b   0,  0,  1,  0,  0,$40,$FF,  0,  0,  0,  0,$80,  0,  0,$FF,  0; 0
					
		dc.b   0,$40,  1,  0,  0,  0,  0,$80,  1,  0,  0,  0,  0,$40; 16
byte_27D12:	dc.b   0,  0,  1,  0,  0,$40,  1,  0,  0,  0,  0,$80,  0,  0,$FF,  0; 0
					
		dc.b   0,$40,$FF,  0,  0,  0,  0,$80,$FF,  0,  0,  0,  0,$40; 16
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_27D30:				
		dc.w word_27D32-Map_27D30
word_27D32:	dc.w 4			
		dc.w $E00F,    0,    0,$FFE0; 0
		dc.w $E00F,  $10,    8,	   0; 4
		dc.w	$F,$1810,$1808,$FFE0; 8
		dc.w	$F,$1800,$1800,	   0; 12
; ===========================================================================

loc_27D54:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_27D5A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_27D60:				
		jmp	SolidObject
; ===========================================================================

loc_27D66:				
		jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_27D6C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_27D7A(pc,d0.w),d1
		jmp	off_27D7A(pc,d1.w)
; ===========================================================================
off_27D7A:	dc.w loc_27D86-off_27D7A; 0 
		dc.w loc_27E0E-off_27D7A; 1
byte_27D7E:	dc.b $20		; 0
		dc.b  $C		; 1
		dc.b   1		; 2
		dc.b   0		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b   0		; 6
		dc.b   0		; 7
; ===========================================================================

loc_27D86:				
		addq.b	#2,$24(a0)
		move.l	#Map_26EC8,4(a0)
		move.w	#$6000,2(a0)
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_27DAE
		move.l	#Map_2800E,4(a0)
		move.w	#$6418,2(a0)

loc_27DAE:				
		bsr.w	loc_2801C
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_27D7E(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$16(a0)
		move.b	(a2)+,$1A(a0)
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$30(a0)
		move.b	$22(a0),$2E(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		subq.w	#8,d0
		bcs.s	loc_27E0E
		lsl.w	#2,d0
		lea	($FFFFFE8A).w,a2
		lea	(a2,d0.w),a2
		tst.w	(a2)
		bpl.s	loc_27E0E
		bchg	#0,$2E(a0)

loc_27E0E:				
					; DATA XREF: ...
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		add.w	d0,d0
		move.w	off_27E4E(pc,d0.w),d1
		jsr	off_27E4E(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	1(a0)
		bpl.s	loc_27E46
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_28022

loc_27E46:				
		move.w	$34(a0),d0
		bra.w	loc_28028
; ===========================================================================
off_27E4E:	dc.w locret_27E66-off_27E4E; 0 
		dc.w loc_27E68-off_27E4E; 1
		dc.w loc_27E74-off_27E4E; 2
		dc.w loc_27E96-off_27E4E; 3
		dc.w loc_27EA2-off_27E4E; 4
		dc.w loc_27EC4-off_27E4E; 5
		dc.w loc_27EE2-off_27E4E; 6
		dc.w loc_27F10-off_27E4E; 7
		dc.w loc_27F4E-off_27E4E; 8
		dc.w loc_27F60-off_27E4E; 9
		dc.w loc_27F70-off_27E4E; 10
		dc.w loc_27F80-off_27E4E; 11
; ===========================================================================

locret_27E66:				
		rts	
; ===========================================================================

loc_27E68:				
		move.w	#$40,d1	; '@'
		moveq	#0,d0
		move.b	($FFFFFE68).w,d0
		bra.s	loc_27E7E
; ===========================================================================

loc_27E74:				
		move.w	#$80,d1	
		moveq	#0,d0
		move.b	($FFFFFE7C).w,d0

loc_27E7E:				
		btst	#0,$22(a0)
		beq.s	loc_27E8A
		neg.w	d0
		add.w	d1,d0

loc_27E8A:				
		move.w	$34(a0),d1
		sub.w	d0,d1
		move.w	d1,8(a0)
		rts	
; ===========================================================================

loc_27E96:				
		move.w	#$40,d1	; '@'
		moveq	#0,d0
		move.b	($FFFFFE68).w,d0
		bra.s	loc_27EAC
; ===========================================================================

loc_27EA2:				
		move.w	#$80,d1	
		moveq	#0,d0
		move.b	($FFFFFE7C).w,d0

loc_27EAC:				
		btst	#0,$22(a0)
		beq.s	loc_27EB8
		neg.w	d0
		add.w	d1,d0

loc_27EB8:				
		move.w	$30(a0),d1
		sub.w	d0,d1
		move.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_27EC4:				
		move.b	($FFFFFE60).w,d0
		lsr.w	#1,d0
		add.w	$30(a0),d0
		move.w	d0,$C(a0)
		move.b	$22(a0),d1
		andi.b	#$18,d1
		beq.s	locret_27EE0
		addq.b	#1,$28(a0)

locret_27EE0:				
		rts	
; ===========================================================================

loc_27EE2:				
		move.l	$C(a0),d3
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$C(a0)
		addi.w	#8,$12(a0)
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		bcc.s	locret_27F0E
		move.b	#0,$28(a0)

locret_27F0E:				
		rts	
; ===========================================================================

loc_27F10:				
		tst.b	$38(a0)
		bne.s	loc_27F26
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_27F4C
		move.b	#8,$38(a0)

loc_27F26:				
		bsr.w	loc_2802E
		andi.w	#$7FF,$C(a0)
		cmpi.w	#$2A8,$12(a0)
		bne.s	loc_27F3C
		neg.b	$38(a0)

loc_27F3C:				
		move.b	$38(a0),d1
		ext.w	d1
		add.w	d1,$12(a0)
		bne.s	locret_27F4C
		clr.b	$28(a0)

locret_27F4C:				
		rts	
; ===========================================================================

loc_27F4E:				
		move.w	#$10,d1
		moveq	#0,d0
		move.b	($FFFFFE88).w,d0
		lsr.w	#1,d0
		move.w	($FFFFFE8A).w,d3
		bra.s	loc_27F8E
; ===========================================================================

loc_27F60:				
		move.w	#$30,d1	; '0'
		moveq	#0,d0
		move.b	($FFFFFE8C).w,d0
		move.w	($FFFFFE8E).w,d3
		bra.s	loc_27F8E
; ===========================================================================

loc_27F70:				
		move.w	#$50,d1	; 'P'
		moveq	#0,d0
		move.b	($FFFFFE90).w,d0
		move.w	($FFFFFE92).w,d3
		bra.s	loc_27F8E
; ===========================================================================

loc_27F80:				
		move.w	#$70,d1	; 'p'
		moveq	#0,d0
		move.b	($FFFFFE94).w,d0
		move.w	($FFFFFE96).w,d3

loc_27F8E:				
		tst.w	d3
		bne.s	loc_27F9C
		addq.b	#1,$2E(a0)
		andi.b	#3,$2E(a0)

loc_27F9C:				
		move.b	$2E(a0),d2
		andi.b	#3,d2
		bne.s	loc_27FBC
		sub.w	d1,d0
		add.w	$34(a0),d0
		move.w	d0,8(a0)
		neg.w	d1
		add.w	$30(a0),d1
		move.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_27FBC:				
		subq.b	#1,d2
		bne.s	loc_27FDA
		subq.w	#1,d1
		sub.w	d1,d0
		neg.w	d0
		add.w	$30(a0),d0
		move.w	d0,$C(a0)
		addq.w	#1,d1
		add.w	$34(a0),d1
		move.w	d1,8(a0)
		rts	
; ===========================================================================

loc_27FDA:				
		subq.b	#1,d2
		bne.s	loc_27FF8
		subq.w	#1,d1
		sub.w	d1,d0
		neg.w	d0
		add.w	$34(a0),d0
		move.w	d0,8(a0)
		addq.w	#1,d1
		add.w	$30(a0),d1
		move.w	d1,$C(a0)
		rts	
; ===========================================================================

loc_27FF8:				
		sub.w	d1,d0
		add.w	$30(a0),d0

loc_27FFE:
		move.w	d0,$C(a0)
		neg.w	d1

loc_28004:
		add.w	$34(a0),d1
		move.w	d1,8(a0)

locret_2800C:
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2800E:				
		dc.w word_28010-Map_2800E
word_28010:	dc.w 1			
		dc.w $F00F,    0,    0,$FFF0; 0
; ===========================================================================
		nop	

loc_2801C:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_28022:				
		jmp	SolidObject
; ===========================================================================

loc_28028:				
		jmp	MarkObjGone2
; ===========================================================================

loc_2802E:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_28034:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2805C(pc,d0.w),d1
		jsr	off_2805C(pc,d1.w)
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_28058
		bra.w	loc_28388
; ===========================================================================

loc_28058:				
		bra.w	loc_2838E
; ===========================================================================
off_2805C:	dc.w loc_28060-off_2805C; 0 
		dc.w loc_28168-off_2805C; 1
; ===========================================================================

loc_28060:				
		move.b	$28(a0),d0
		bmi.w	loc_28112
		addq.b	#2,$24(a0)
		move.l	#Map_28372,4(a0)
		move.w	#$63F9,2(a0)
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		bsr.w	loc_2839A
		move.b	#0,$1A(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	d0,d1
		lsr.w	#3,d0
		andi.w	#$1E,d0
		lea	(off_28252)(pc),a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,$38(a0)
		move.l	a2,$3C(a0)
		andi.w	#$F,d1
		lsl.w	#2,d1
		move.b	d1,$38(a0)
		move.b	#4,$3A(a0)
		btst	#0,$22(a0)
		beq.s	loc_280F2
		neg.b	$3A(a0)
		moveq	#0,d1
		move.b	$38(a0),d1
		add.b	$3A(a0),d1
		cmp.b	$39(a0),d1
		bcs.s	loc_280EE
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_280EE
		move.b	$39(a0),d1
		subq.b	#4,d1

loc_280EE:				
		move.b	d1,$38(a0)

loc_280F2:				
		move.w	(a2,d1.w),d0
		add.w	$30(a0),d0
		move.w	d0,$34(a0)
		move.w	2(a2,d1.w),d0
		add.w	$32(a0),d0
		move.w	d0,$36(a0)
		bsr.w	loc_281DA
		bra.w	loc_28168
; ===========================================================================

loc_28112:				
		andi.w	#$7F,d0	; ''
		add.w	d0,d0
		lea	(off_282D6).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d1
		movea.l	a0,a1
		move.w	8(a0),d2
		move.w	$C(a0),d3
		bra.s	loc_28136
; ===========================================================================

loc_28130:				
		bsr.w	loc_28394
		bne.s	loc_28160

loc_28136:				
		_move.b	#$6C,0(a1) ; 'l'
		move.w	(a2)+,d0
		add.w	d2,d0
		move.w	d0,8(a1)
		move.w	(a2)+,d0
		add.w	d3,d0
		move.w	d0,$C(a1)
		move.w	d2,$30(a1)
		move.w	d3,$32(a1)
		move.w	(a2)+,d0
		move.b	d0,$28(a1)
		move.b	$22(a0),$22(a1)

loc_28160:				
		dbf	d1,loc_28130
		addq.l	#4,sp
		rts	
; ===========================================================================

loc_28168:				
					
		move.w	8(a0),-(sp)
		bsr.w	loc_2817E
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#8,d3
		move.w	(sp)+,d4
		bra.w	loc_283A0
; ===========================================================================

loc_2817E:				
		move.w	8(a0),d0
		cmp.w	$34(a0),d0
		bne.s	loc_281D4
		move.w	$C(a0),d0
		cmp.w	$36(a0),d0
		bne.s	loc_281D4
		moveq	#0,d1
		move.b	$38(a0),d1
		add.b	$3A(a0),d1
		cmp.b	$39(a0),d1
		bcs.s	loc_281B0
		move.b	d1,d0
		moveq	#0,d1
		tst.b	d0
		bpl.s	loc_281B0
		move.b	$39(a0),d1
		subq.b	#4,d1

loc_281B0:				
		move.b	d1,$38(a0)
		movea.l	$3C(a0),a1
		move.w	(a1,d1.w),d0
		add.w	$30(a0),d0
		move.w	d0,$34(a0)
		move.w	2(a1,d1.w),d0
		add.w	$32(a0),d0
		move.w	d0,$36(a0)
		bsr.w	loc_281DA

loc_281D4:				
		bsr.w	loc_283A6
		rts	
; ===========================================================================

loc_281DA:				
		moveq	#0,d0
		move.w	#-$100,d2
		move.w	8(a0),d0
		sub.w	$34(a0),d0
		bcc.s	loc_281EE
		neg.w	d0
		neg.w	d2

loc_281EE:				
		moveq	#0,d1
		move.w	#-$100,d3
		move.w	$C(a0),d1
		sub.w	$36(a0),d1
		bcc.s	loc_28202
		neg.w	d1
		neg.w	d3

loc_28202:				
		cmp.w	d0,d1
		bcs.s	loc_2822C
		move.w	8(a0),d0
		sub.w	$34(a0),d0
		beq.s	loc_28218
		ext.l	d0
		asl.l	#8,d0
		divs.w	d1,d0
		neg.w	d0

loc_28218:				
		move.w	d0,$10(a0)
		move.w	d3,$12(a0)
		swap	d0
		move.w	d0,$A(a0)
		clr.w	$E(a0)
		rts	
; ===========================================================================

loc_2822C:				
		move.w	$C(a0),d1
		sub.w	$36(a0),d1
		beq.s	loc_2823E
		ext.l	d1
		asl.l	#8,d1
		divs.w	d0,d1
		neg.w	d1

loc_2823E:				
		move.w	d1,$12(a0)
		move.w	d2,$10(a0)
		swap	d1
		move.w	d1,$E(a0)
		clr.w	$A(a0)
		rts	
; ===========================================================================
off_28252:	dc.w byte_28258-off_28252; 0 
		dc.w byte_28282-off_28252; 1
		dc.w byte_282AC-off_28252; 2
byte_28258:	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0; 0
					
		dc.b   0,$E0,$FF,$EA,  0,$F6,  0,  0,  1,  0,  0,$16,  0,$F6,  0,$20; 16
		dc.b   0,$E0,  0,$20,  0,$20,  0,$16,  0, $A; 32
byte_28282:	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0; 0
					
		dc.b   1,$60,$FF,$EA,  1,$76,  0,  0,  1,$80,  0,$16,  1,$76,  0,$20; 16
		dc.b   1,$60,  0,$20,  0,$20,  0,$16,  0, $A; 32
byte_282AC:	dc.b   0,$28,  0,  0,  0,  0,$FF,$EA,  0, $A,$FF,$E0,  0,$20,$FF,$E0; 0
					
		dc.b   1,$E0,$FF,$EA,  1,$F6,  0,  0,  2,  0,  0,$16,  1,$F6,  0,$20; 16
		dc.b   1,$E0,  0,$20,  0,$20,  0,$16,  0, $A; 32
off_282D6:	dc.w byte_282DC-off_282D6; 0 
		dc.w byte_2830E-off_282D6; 1
		dc.w byte_28340-off_282D6; 2
byte_282DC:	dc.b   0,  7,  0,  0,  0,  0,  0,  1,$FF,$E0,  0,$3A,  0,  3,$FF,$E0; 0
					
		dc.b   0,$80,  0,  3,$FF,$E0,  0,$C6,  0,  3,  0,  0,  1,  0,  0,  6; 16
		dc.b   0,$20,  0,$C6,  0,  8,  0,$20,  0,$80,  0,  8,  0,$20,  0,$3A; 32
		dc.b   0,  8		; 48
byte_2830E:	dc.b   0,  7,  0,  0,  0,  0,  0,$11,$FF,$E0,  0,$5A,  0,$13,$FF,$E0; 0
					
		dc.b   0,$C0,  0,$13,$FF,$E0,  1,$26,  0,$13,  0,  0,  1,$80,  0,$16; 16
		dc.b   0,$20,  1,$26,  0,$18,  0,$20,  0,$C0,  0,$18,  0,$20,  0,$5A; 32
		dc.b   0,$18		; 48
byte_28340:	dc.b   0,  7,  0,  0,  0,  0,  0,$21,$FF,$E0,  0,$7A,  0,$23,$FF,$E0; 0
					
		dc.b   1,  0,  0,$23,$FF,$E0,  1,$86,  0,$23,  0,  0,  2,  0,  0,$26; 16
		dc.b   0,$20,  1,$86,  0,$28,  0,$20,  1,  0,  0,$28,  0,$20,  0,$7A; 32
		dc.b   0,$28		; 48
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28372:				
		dc.w word_28374-Map_28372; 0
word_28374:	dc.w 2			
		dc.w $F805,    0,    0,$FFF0; 0
		dc.w $F805, $800, $800,	   0; 4
; ===========================================================================
		nop	

loc_28388:				
		jmp	DisplaySprite
; ===========================================================================

loc_2838E:				
		jmp	DeleteObject
; ===========================================================================

loc_28394:				
		jmp	SingleObjLoad
; ===========================================================================

loc_2839A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_283A0:				
		jmp	DetectPlatform
; ===========================================================================

loc_283A6:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_283AC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_283BA(pc,d0.w),d1
		jmp	off_283BA(pc,d1.w)
; ===========================================================================
off_283BA:	dc.w loc_283C8-off_283BA; 0 
		dc.w loc_28432-off_283BA; 1
		dc.w loc_284BC-off_283BA; 2
byte_283C0:	dc.b $10, $C		; 0
		dc.b $28,  8		; 2
		dc.b $60,$18		; 4
		dc.b  $C, $C		; 6
; ===========================================================================

loc_283C8:				
		addq.b	#2,$24(a0)
		move.l	#Map_2852C,4(a0)
		move.w	#$6000,2(a0)
		bsr.w	loc_285B4
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		lea	byte_283C0(pc,d0.w),a3
		move.b	(a3)+,$19(a0)
		move.b	(a3)+,$16(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$30(a0)
		cmpi.b	#3,d0
		bne.s	loc_28432
		addq.b	#2,$24(a0)
		move.w	#$63F0,2(a0)
		bsr.w	loc_285B4
		move.b	#5,$18(a0)
		bra.w	loc_284BC
; ===========================================================================

loc_28432:				
					
		move.w	8(a0),-(sp)
		move.b	($FFFFFE80).w,d1
		subi.b	#$38,d1	; '8'
		ext.w	d1
		move.b	($FFFFFE84).w,d2
		subi.b	#$38,d2	; '8'
		ext.w	d2
		btst	#0,$28(a0)
		beq.s	loc_28456
		neg.w	d1
		neg.w	d2

loc_28456:				
		btst	#1,$28(a0)
		beq.s	loc_28462
		neg.w	d1
		exg	d1,d2

loc_28462:				
		add.w	$34(a0),d1
		move.w	d1,8(a0)
		add.w	$30(a0),d2
		move.w	d2,$C(a0)
		move.w	(sp)+,d4
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_285BA
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_284A4
		jmp	DisplaySprite
; ===========================================================================

loc_284A4:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_284B6
		bclr	#7,2(a2,d0.w)

loc_284B6:				
		jmp	DeleteObject
; ===========================================================================

loc_284BC:				
					
		move.b	($FFFFFE80).w,d1
		lsr.b	#1,d1
		subi.b	#$1C,d1
		ext.w	d1
		move.b	($FFFFFE84).w,d2
		lsr.b	#1,d2
		subi.b	#$1C,d2
		ext.w	d2
		btst	#0,$28(a0)
		beq.s	loc_284E0
		neg.w	d1
		neg.w	d2

loc_284E0:				
		btst	#1,$28(a0)
		beq.s	loc_284EC
		neg.w	d1
		exg	d1,d2

loc_284EC:				
		add.w	$34(a0),d1
		move.w	d1,8(a0)
		add.w	$30(a0),d2
		move.w	d2,$C(a0)
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_28514
		jmp	DisplaySprite
; ===========================================================================

loc_28514:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_28526
		bclr	#7,2(a2,d0.w)

loc_28526:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2852C:				
		dc.w word_28534-Map_2852C; 0
		dc.w word_2853E-Map_2852C; 1
		dc.w word_28558-Map_2852C; 2
		dc.w word_285AA-Map_2852C; 3
word_28534:	dc.w 1			
		dc.w $F40E,  $25,  $12,$FFF0; 0
word_2853E:	dc.w 3			
		dc.w $F80D,  $31,  $18,$FFD8; 0
		dc.w $F80D,  $31,  $18,$FFF8; 4
		dc.w $F805,  $31,  $18,	 $18; 8
word_28558:	dc.w $A			
		dc.w $E80E,  $39,  $1C,$FFA0; 0
		dc.w $E80E, $839, $81C,$FFC0; 4
		dc.w $E80E,  $39,  $1C,$FFE0; 8
		dc.w $E80E, $839, $81C,	   0; 12
		dc.w $E80E,  $39,  $1C,	 $20; 16
		dc.w $E80E, $839, $81C,	 $40; 20
		dc.w	 6,  $45,  $22,$FFA0; 24
		dc.w	 6, $845, $822,$FFB0; 28
		dc.w	 6,  $45,  $22,	 $40; 32
		dc.w	 6, $845, $822,	 $50; 36
word_285AA:	dc.w 1			
		dc.w $F40A,    0,    0,$FFF4; 0
; ===========================================================================

loc_285B4:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_285BA:				
		jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_285C0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_285CE(pc,d0.w),d1
		jmp	off_285CE(pc,d1.w)
; ===========================================================================
off_285CE:	dc.w loc_285D2-off_285CE; 0 
		dc.w loc_28652-off_285CE; 1
; ===========================================================================

loc_285D2:				
		moveq	#7,d1
		moveq	#0,d4
		lea	(byte_28726).l,a2
		movea.l	a0,a1
		move.w	8(a0),d2
		move.w	$C(a0),d3
		bset	#7,$22(a0)
		bra.s	loc_285F4
; ===========================================================================

loc_285EE:				
		bsr.w	loc_28928
		bne.s	loc_2864E

loc_285F4:				
		_move.b	0(a0),0(a1)
		addq.b	#2,$24(a1)
		move.l	#Map_28786,4(a1)
		move.w	#$6378,2(a1)
		bsr.w	loc_2892E
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.w	d2,$32(a1)
		move.w	d3,$30(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,8(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d3,d0
		move.w	d0,$C(a1)
		move.b	(a2)+,$1A(a1)
		move.w	d4,$34(a1)
		addq.w	#3,d4
		move.b	$22(a0),$22(a1)

loc_2864E:				
		dbf	d1,loc_285EE

loc_28652:				
		move.w	8(a0),-(sp)
		move.b	($FFFFFE05).w,d0
		move.b	d0,d1
		andi.w	#$F,d0
		bne.s	loc_286CA
		move.w	$36(a0),d1
		btst	#0,$22(a0)
		beq.s	loc_28684
		subi.w	#$18,d1
		bcc.s	loc_286A2
		moveq	#$48,d1	; 'H'
		subq.w	#3,$34(a0)
		bcc.s	loc_286A2
		move.w	#$15,$34(a0)
		bra.s	loc_286A2
; ===========================================================================

loc_28684:				
		addi.w	#$18,d1
		cmpi.w	#$60,d1	; '`'
		bcs.s	loc_286A2
		moveq	#0,d1
		addq.w	#3,$34(a0)
		cmpi.w	#$18,$34(a0)
		bcs.s	loc_286A2
		move.w	#0,$34(a0)

loc_286A2:				
		move.w	d1,$36(a0)
		add.w	$34(a0),d1
		lea	byte_28726(pc,d1.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$32(a0),d0
		move.w	d0,8(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$30(a0),d0
		move.w	d0,$C(a0)
		move.b	(a1)+,$1A(a0)

loc_286CA:				
		move.b	$1A(a0),d0
		add.w	d0,d0
		andi.w	#$1E,d0
		moveq	#0,d1
		moveq	#0,d2
		move.b	byte_28706(pc,d0.w),d1
		move.b	byte_28706+1(pc,d0.w),d2
		move.w	d2,d3
		move.w	(sp)+,d4
		bsr.w	loc_28934
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_28700
		jmp	DisplaySprite
; ===========================================================================

loc_28700:				
		jmp	DeleteObject
; ===========================================================================
byte_28706:	dc.b $10,$10		; 0
		dc.b $10,$10		; 2
		dc.b $10,$10		; 4
		dc.b $10,$10		; 6
		dc.b $10,$10		; 8
		dc.b $10,$10		; 10
		dc.b $10,$10		; 12
		dc.b $10, $C		; 14
		dc.b $10,  8		; 16
		dc.b $10, $C		; 18
		dc.b $10,$10		; 20
		dc.b $10,$10		; 22
		dc.b $10,$10		; 24
		dc.b $10,$10		; 26
		dc.b $10,$10		; 28
		dc.b $10,$10		; 30
byte_28726:	dc.b   0,$B8,  0,$32,$CE,  4,$48,  0,  8,$32,$32, $C,  0,$48,$10,$CE; 0
					
		dc.b $32,$14,$B8,  0,$18,$CE,$CE,$1C, $D,$B8,  1,$3F,$DA,  5,$48, $C; 16
		dc.b   9,$27,$3C, $D,$F3,$48,$11,$C1,$26,$15,$B8,$F4,$19,$D9,$C4,$1D; 32
		dc.b $19,$BC,  2,$46,$E9,  6,$46,$17, $A,$19,$44, $E,$E7,$44,$12,$BA; 48
		dc.b $17,$16,$BA,$E9,$1A,$E7,$BC,$1E,$27,$C4,  3,$48,$F4,  7,$3F,$26; 64
		dc.b  $B, $D,$48, $F,$D9,$3C,$13,$B8, $C,$17,$C1,$DA,$1B,$F3,$B8,$1F; 80
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28786:				
		dc.w word_287C6-Map_28786; 0
		dc.w word_287D8-Map_28786; 1
		dc.w word_287E2-Map_28786; 2
		dc.w word_287EC-Map_28786; 3
		dc.w word_287F6-Map_28786; 4
		dc.w word_28800-Map_28786; 5
		dc.w word_2880A-Map_28786; 6
		dc.w word_28814-Map_28786; 7
		dc.w word_2881E-Map_28786; 8
		dc.w word_28830-Map_28786; 9
		dc.w word_2883A-Map_28786; 10
		dc.w word_28844-Map_28786; 11
		dc.w word_2884E-Map_28786; 12
		dc.w word_28858-Map_28786; 13
		dc.w word_28862-Map_28786; 14
		dc.w word_2886C-Map_28786; 15
		dc.w word_28876-Map_28786; 16
		dc.w word_28888-Map_28786; 17
		dc.w word_28892-Map_28786; 18
		dc.w word_2889C-Map_28786; 19
		dc.w word_288A6-Map_28786; 20
		dc.w word_288B0-Map_28786; 21
		dc.w word_288BA-Map_28786; 22
		dc.w word_288C4-Map_28786; 23
		dc.w word_288CE-Map_28786; 24
		dc.w word_288E0-Map_28786; 25
		dc.w word_288EA-Map_28786; 26
		dc.w word_288F4-Map_28786; 27
		dc.w word_288FE-Map_28786; 28
		dc.w word_28908-Map_28786; 29
		dc.w word_28912-Map_28786; 30
		dc.w word_2891C-Map_28786; 31
word_287C6:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0; 0
		dc.w $F007, $800, $800,	   0; 4
word_287D8:	dc.w 1			
		dc.w $F00B, $808, $804,$FFF4; 0
word_287E2:	dc.w 1			
		dc.w $F00F, $814, $80A,$FFF0; 0
word_287EC:	dc.w 1			
		dc.w $F00F, $824, $812,$FFF0; 0
word_287F6:	dc.w 1			
		dc.w $F00F, $834, $81A,$FFF0; 0
word_28800:	dc.w 1			
		dc.w $F00F, $844, $822,$FFF0; 0
word_2880A:	dc.w 1			
		dc.w $F00F, $854, $82A,$FFF0; 0
word_28814:	dc.w 1			
		dc.w $F40E, $864, $832,$FFF0; 0
word_2881E:	dc.w 2			
word_28820:	dc.w $F00D, $870, $838,$FFF0; 0
		dc.w	$D,$1870,$1838,$FFF0; 4
word_28830:	dc.w 1			
word_28832:	dc.w $F40E,$1864,$1832,$FFF0; 0
word_2883A:	dc.w 1			
		dc.w $F00F,$1854,$182A,$FFF0; 0
word_28844:	dc.w 1			
		dc.w $F00F,$1844,$1822,$FFF0; 0
word_2884E:	dc.w 1			
		dc.w $F00F,$1834,$181A,$FFF0; 0
word_28858:	dc.w 1			
		dc.w $F00F,$1824,$1812,$FFF0; 0
word_28862:	dc.w 1			
		dc.w $F00F,$1814,$180A,$FFF0; 0
word_2886C:	dc.w 1			
		dc.w $F00B,$1808,$1804,$FFF4; 0
word_28876:	dc.w 2			
		dc.w $F007,$1000,$1000,$FFF0; 0
		dc.w $F007,$1800,$1800,	   0; 4
word_28888:	dc.w 1			
		dc.w $F00B,$1008,$1004,$FFF4; 0
word_28892:	dc.w 1			
		dc.w $F00F,$1014,$100A,$FFF0; 0
word_2889C:	dc.w 1			
		dc.w $F00F,$1024,$1012,$FFF0; 0
word_288A6:	dc.w 1			
		dc.w $F00F,$1034,$101A,$FFF0; 0
word_288B0:	dc.w 1			
		dc.w $F00F,$1044,$1022,$FFF0; 0
word_288BA:	dc.w 1			
		dc.w $F00F,$1054,$102A,$FFF0; 0
word_288C4:	dc.w 1			
		dc.w $F40E,$1064,$1032,$FFF0; 0
word_288CE:	dc.w 2			
		dc.w $F00D,  $70,  $38,$FFF0; 0
		dc.w	$D,$1070,$1038,$FFF0; 4
word_288E0:	dc.w 1			
		dc.w $F40E,  $64,  $32,$FFF0; 0
word_288EA:	dc.w 1			
		dc.w $F00F,  $54,  $2A,$FFF0; 0
word_288F4:	dc.w 1			
		dc.w $F00F,  $44,  $22,$FFF0; 0
word_288FE:	dc.w 1			
		dc.w $F00F,  $34,  $1A,$FFF0; 0
word_28908:	dc.w 1			
		dc.w $F00F,  $24,  $12,$FFF0; 0
word_28912:	dc.w 1			
		dc.w $F00F,  $14,   $A,$FFF0; 0
word_2891C:	dc.w 1			
		dc.w $F00B,    8,    4,$FFF4; 0
; ===========================================================================
		nop	

loc_28928:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2892E:				
		jmp	sub_16D8A
; ===========================================================================

loc_28934:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================

Sprite_2893C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2894A(pc,d0.w),d1
		jmp	off_2894A(pc,d1.w)
; ===========================================================================
off_2894A:	dc.w loc_2894E-off_2894A; 0 
		dc.w loc_28980-off_2894A; 1
; ===========================================================================

loc_2894E:				
		addq.b	#2,$24(a0)
		move.w	#$30,$3C(a0) ; '0'
		move.b	$28(a0),d0
		bpl.s	loc_28964
		move.w	#$70,$3C(a0) ; 'p'

loc_28964:				
		andi.b	#$7F,d0	; ''
		lsl.b	#4,d0
		move.b	d0,$38(a0)
		move.w	#2,$36(a0)
		btst	#0,$22(a0)
		beq.s	loc_28980
		neg.w	$36(a0)

loc_28980:				
					
		lea	($FFFFB000).w,a1
		bsr.s	loc_28990
		lea	($FFFFB040).w,a1
		bsr.s	loc_28990
		bra.w	loc_289CC
; ===========================================================================

loc_28990:				
		moveq	#0,d2
		move.b	$38(a0),d2
		move.w	d2,d3
		add.w	d3,d3
		move.w	8(a1),d0
		sub.w	8(a0),d0
		add.w	d2,d0
		cmp.w	d3,d0
		bcc.s	locret_289CA
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		move.w	$3C(a0),d0
		add.w	d0,d1
		cmp.w	d0,d1
		bcc.s	locret_289CA
		btst	#1,$22(a1)
		bne.s	locret_289CA
		move.w	$36(a0),d0
		add.w	d0,8(a1)

locret_289CA:				
		rts	
; ===========================================================================

loc_289CC:				
		jmp	MarkObjGone3
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================

Sprite_289D4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_289E2(pc,d0.w),d1
		jmp	off_289E2(pc,d1.w)
; ===========================================================================
off_289E2:	dc.w loc_289E8-off_289E2; 0 
		dc.w loc_28AD6-off_289E2; 1
		dc.w loc_28B7E-off_289E2; 2
; ===========================================================================

loc_289E8:				
		addq.b	#2,$24(a0)
		move.l	#Map_28B9C,4(a0)
		move.w	#$26BC,2(a0)
		bsr.w	loc_28BBA
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#8,$19(a0)
		move.w	8(a0),$3A(a0)
		move.w	$C(a0),$38(a0)
		move.b	#0,$20(a0)
		bset	#7,$22(a0)
		move.b	$28(a0),d1
		andi.b	#-$10,d1
		ext.w	d1
		asl.w	#3,d1
		move.w	d1,$3E(a0)
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#-$40,d0
		move.b	d0,$26(a0)
		lea	$29(a0),a2
		move.b	$28(a0),d1
		andi.w	#7,d1
		move.b	#0,(a2)+
		move.w	d1,d3
		lsl.w	#4,d3
		move.b	d3,$3C(a0)
		subq.w	#1,d1
		bcs.s	loc_28AC8
		btst	#3,$28(a0)
		beq.s	loc_28A6E
		subq.w	#1,d1
		bcs.s	loc_28AC8

loc_28A6E:				
		bsr.w	loc_28BAE
		bne.s	loc_28AC8
		addq.b	#1,$29(a0)
		move.w	a1,d5
		subi.w	#-$5000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5	; ''
		move.b	d5,(a2)+
		move.b	#4,$24(a1)
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	1(a0),1(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.b	$20(a0),$20(a1)
		move.b	$22(a0),$22(a1)
		subi.b	#$10,d3
		move.b	d3,$3C(a1)
		dbf	d1,loc_28A6E

loc_28AC8:				
		move.w	a0,d5
		subi.w	#-$5000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5	; ''
		move.b	d5,(a2)+

loc_28AD6:				
		move.w	8(a0),-(sp)
		bsr.w	loc_28AF4
		move.w	#8,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	(sp)+,d4
		bsr.w	loc_28BC0
		bra.w	loc_28B46
; ===========================================================================

loc_28AF4:				
		move.w	$3E(a0),d0
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		move.w	$38(a0),d2
		move.w	$3A(a0),d3
		lea	$29(a0),a2
		moveq	#0,d6
		move.b	(a2)+,d6

loc_28B16:				
		moveq	#0,d4
		move.b	(a2)+,d4
		lsl.w	#6,d4
		addi.l	#-$5000,d4
		movea.l	d4,a1
		moveq	#0,d4
		move.b	$3C(a1),d4
		move.l	d4,d5
		muls.w	d0,d4
		asr.l	#8,d4
		muls.w	d1,d5
		asr.l	#8,d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d4,$C(a1)
		move.w	d5,8(a1)
		dbf	d6,loc_28B16
		rts	
; ===========================================================================

loc_28B46:				
		move.w	$3A(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_28B5E
		bra.w	loc_28BA8
; ===========================================================================

loc_28B5E:				
		moveq	#0,d2
		lea	$29(a0),a2
		move.b	(a2)+,d2

loc_28B66:				
		moveq	#0,d0
		move.b	(a2)+,d0
		lsl.w	#6,d0
		addi.l	#-$5000,d0
		movea.l	d0,a1
		bsr.w	loc_28BB4
		dbf	d2,loc_28B66
		rts	
; ===========================================================================

loc_28B7E:				
		move.w	#8,d1
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	$36(a0),d4
		bsr.w	loc_28BC0
		move.w	8(a0),$36(a0)
		bra.w	loc_28BA8
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28B9C:				
		dc.w word_28B9E-Map_28B9C
word_28B9E:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
; ===========================================================================

loc_28BA8:				
		jmp	DisplaySprite
; ===========================================================================

loc_28BAE:				
		jmp	SingleObjLoad
; ===========================================================================

loc_28BB4:				
		jmp	DeleteObject2
; ===========================================================================

loc_28BBA:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_28BC0:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_28BC8:				
		btst	#6,1(a0)
		bne.w	loc_28BE0
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_28BE8(pc,d0.w),d1
		jmp	off_28BE8(pc,d1.w)
; ===========================================================================

loc_28BE0:				
		move.w	#$280,d0
		bra.w	loc_28DC0
; ===========================================================================
off_28BE8:	dc.w loc_28BEE-off_28BE8; 0 
		dc.w loc_28CCA-off_28BE8; 1
		dc.w loc_28D6C-off_28BE8; 2
; ===========================================================================

loc_28BEE:				
		addq.b	#2,$24(a0)
		move.l	#Map_28D8A,4(a0)
		move.w	#$2000,2(a0)
		bsr.w	loc_28DE4
		move.b	#4,1(a0)
		move.b	#5,$18(a0)
		move.b	#$10,$19(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		move.b	$28(a0),d1
		move.b	d1,d0
		andi.w	#$F,d1
		andi.b	#-$10,d0
		ext.w	d0
		asl.w	#3,d0
		move.w	d0,$34(a0)
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#-$40,d0
		move.b	d0,$26(a0)
		cmpi.b	#$F,d1
		bne.s	loc_28C5E
		addq.b	#2,$24(a0)
		move.b	#4,$18(a0)
		move.b	#2,$1A(a0)
		rts	
; ===========================================================================

loc_28C5E:				
		move.b	#-$66,$20(a0)
		bsr.w	loc_28DDE
		bne.s	loc_28CCA
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#$40,$E(a1) ; '@'
		move.w	8(a0),d2
		move.w	$C(a0),d3
		move.b	d1,$F(a1)
		subq.w	#1,d1
		lea	$10(a1),a2

loc_28CA0:				
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_28CA0
		move.w	d2,8(a1)
		move.w	d3,$C(a1)
		move.b	#0,$B(a1)
		move.l	a1,$3C(a0)
		move.b	#$40,$14(a1) ; '@'
		bset	#4,1(a1)

loc_28CCA:				
					
		moveq	#0,d0
		moveq	#0,d1
		move.w	$34(a0),d0
		add.w	d0,$26(a0)
		move.b	$26(a0),d0
		bsr.w	loc_28DEA
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.l	$3C(a0),a1
		move.b	$F(a1),d6
		subq.w	#1,d6
		bcs.s	loc_28D3E
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		moveq	#0,d4
		moveq	#0,d5
		lea	$10(a1),a2

loc_28D04:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_28D04
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,8(a0)
		move.w	d4,$C(a0)
		move.w	$28(a1),8(a1)
		move.w	$2A(a1),$C(a1)

loc_28D3E:				
		tst.w	(f_two_player).w
		beq.s	loc_28D48
		bra.w	loc_28DC6
; ===========================================================================

loc_28D48:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_28D60
		bra.w	loc_28DC6
; ===========================================================================

loc_28D60:				
		movea.l	$3C(a0),a1
		bsr.w	loc_28DD8
		bra.w	loc_28DCC
; ===========================================================================

loc_28D6C:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	8(a0),d4
		bsr.w	loc_28DF0
		bra.w	loc_28DD2
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28D8A:				
		dc.w word_28D90-Map_28D8A; 0
		dc.w word_28DA2-Map_28D8A; 1
		dc.w word_28DAC-Map_28D8A; 2
word_28D90:	dc.w 2			
		dc.w $F00D,  $7A,  $3D,$FFF0; 0
		dc.w	$D,$187A,$183D,$FFF0; 4
word_28DA2:	dc.w 1			
		dc.w $F805,$4066,$4033,$FFF8; 0
word_28DAC:	dc.w 2			
		dc.w $F007,$4040,$4020,$FFF0; 0
		dc.w $F007,$4840,$4820,	   0; 4
; ===========================================================================
		nop	

loc_28DC0:				
		jmp	DisplaySprite3
; ===========================================================================

loc_28DC6:				
		jmp	DisplaySprite
; ===========================================================================

loc_28DCC:				
		jmp	DeleteObject
; ===========================================================================

loc_28DD2:				
		jmp	MarkObjGone
; ===========================================================================

loc_28DD8:				
		jmp	DeleteObject2
; ===========================================================================

loc_28DDE:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_28DE4:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_28DEA:				
		jmp	(CalcSine).l
; ===========================================================================

loc_28DF0:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Spike	block thing from MCZ
; ----------------------------------------------------------------------------

Sprite_28DF8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_28E06(pc,d0.w),d1
		jmp	off_28E06(pc,d1.w)
; ===========================================================================
off_28E06:	dc.w loc_28E0E-off_28E06; 0 
		dc.w loc_28E5E-off_28E06; 1
byte_28E0A:	dc.b $40		; 0
		dc.b $10		; 1
		dc.b   0		; 2
		dc.b   0		; 3
; ===========================================================================

loc_28E0E:				
		addq.b	#2,$24(a0)
		move.l	#Map_28F3A,4(a0)
		move.w	#0,2(a0)
		bsr.w	loc_28F76
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#2,d0
		andi.w	#$1C,d0
		lea	byte_28E0A(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2)+,$16(a0)
		move.b	(a2)+,$1A(a0)
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$30(a0)
		andi.w	#$F,$28(a0)

loc_28E5E:				
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	off_28ECA(pc,d0.w),d1
		jsr	off_28ECA(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	1(a0)
		bpl.s	loc_28EC2
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_28F7C
		swap	d6
		andi.w	#3,d6
		beq.s	loc_28EC2
		move.b	d6,d0
		andi.b	#1,d0
		beq.s	loc_28EAE
		lea	($FFFFB000).w,a1
		bsr.w	loc_28F70
		bclr	#5,$22(a0)

loc_28EAE:				
		andi.b	#2,d6
		beq.s	loc_28EC2
		lea	($FFFFB040).w,a1
		bsr.w	loc_28F70
		bclr	#6,$22(a0)

loc_28EC2:				
		move.w	$34(a0),d0
		bra.w	loc_28F82
; ===========================================================================
off_28ECA:	dc.w loc_28ECE-off_28ECA; 0 
		dc.w loc_28F1E-off_28ECA; 1
; ===========================================================================

loc_28ECE:				
		lea	($FFFFB000).w,a1
		bsr.s	loc_28ED8
		lea	($FFFFB040).w,a1

loc_28ED8:				
		btst	#1,$22(a1)
		bne.s	locret_28F1C
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$C0,d0	
		btst	#0,$22(a0)
		beq.s	loc_28EF8
		subi.w	#$100,d0

loc_28EF8:				
		cmpi.w	#$80,d0	
		bcc.s	locret_28F1C
		move.w	$C(a1),d0
		sub.w	$C(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0	; ' '
		bcc.s	locret_28F1C
		move.b	#2,$28(a0)
		move.w	#$80,$36(a0)

locret_28F1C:				
		rts	
; ===========================================================================

loc_28F1E:				
		tst.w	$36(a0)
		beq.s	locret_28F38
		subq.w	#1,$36(a0)
		moveq	#-1,d0
		btst	#0,$22(a0)
		beq.s	loc_28F34
		neg.w	d0

loc_28F34:				
		add.w	d0,8(a0)

locret_28F38:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_28F3A:				
		dc.w word_28F3C-Map_28F3A
word_28F3C:	dc.w 6			
		dc.w $F005,$242C,$2216,$FFC0; 0
		dc.w	 5,$242C,$2216,$FFC0; 4
		dc.w $F007,$6040,$6020,$FFD0; 8
		dc.w $F00F,$6048,$6024,$FFE0; 12
		dc.w $F00F,$6048,$6024,	   0; 16
		dc.w $F00F,$6048,$6024,	 $20; 20
; ===========================================================================
		nop	

loc_28F70:				
		jmp	sub_15A90
; ===========================================================================

loc_28F76:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_28F7C:				
		jmp	SolidObject
; ===========================================================================

loc_28F82:				
		jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_28F88:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_28F96(pc,d0.w),d1
		jmp	off_28F96(pc,d1.w)
; ===========================================================================
off_28F96:	dc.w loc_28F9A-off_28F96; 0 
		dc.w loc_28FBC-off_28F96; 1
; ===========================================================================

loc_28F9A:				
		addq.b	#2,$24(a0)
		move.l	#Map_29064,4(a0)
		move.w	#$643C,2(a0)
		bsr.w	loc_291BE
		ori.b	#4,1(a0)
		move.b	#-$80,$19(a0)

loc_28FBC:				
		tst.b	$34(a0)
		bne.s	loc_28FF0
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_28FF0
		move.b	#1,$34(a0)
		bchg	#0,$1C(a0)
		tst.b	1(a0)
		bpl.s	loc_28FF0
		move.w	#$BB,d0	
		jsr	(PlaySound).l

loc_28FF0:				
		lea	(off_29050).l,a1
		jsr	AnimateSprite
		tst.b	$1A(a0)
		bne.s	loc_2901A
		move.w	#$4B,d1	; 'K'
		move.w	#8,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	loc_291C4
		bra.w	loc_291B8
; ===========================================================================

loc_2901A:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_2904C
		move.b	d0,d1
		andi.b	#8,d0
		beq.s	loc_29036
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)

loc_29036:				
		andi.b	#$10,d1
		beq.s	loc_29046
		lea	($FFFFB040).w,a1
		bclr	#3,$22(a1)

loc_29046:				
		andi.b	#-$19,$22(a0)

loc_2904C:				
		bra.w	loc_291B8
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_29050:	dc.w byte_29054-off_29050; 0 
		dc.w byte_2905C-off_29050; 1
byte_29054:	dc.b   3,  4,  3,  2,  1,  0,$FE,  1; 0	
byte_2905C:	dc.b   3,  0,  1,  2,  3,  4,$FE,  1; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29064:				
		dc.w word_2906E-Map_29064; 0
		dc.w word_290B0-Map_29064; 1
		dc.w word_290F2-Map_29064; 2
		dc.w word_29134-Map_29064; 3
		dc.w word_29176-Map_29064; 4
word_2906E:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0; 0
		dc.w $F805,    0,    0,$FFD0; 4
		dc.w $F805,    0,    0,$FFE0; 8
		dc.w $F805,    0,    0,$FFF0; 12
		dc.w $F805,    0,    0,	   0; 16
		dc.w $F805,    0,    0,	 $10; 20
		dc.w $F805,    0,    0,	 $20; 24
		dc.w $F805,    0,    0,	 $30; 28
word_290B0:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0; 0
		dc.w $FE05,    0,    0,$FFCE; 4
		dc.w  $405,    0,    0,$FFDD; 8
		dc.w  $A05,    0,    0,$FFEC; 12
		dc.w  $A05,    0,    0,	   4; 16
		dc.w  $405,    0,    0,	 $13; 20
		dc.w $FE05,    0,    0,	 $22; 24
		dc.w $F805,    0,    0,	 $30; 28
word_290F2:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0; 0
		dc.w  $305,    0,    0,$FFCB; 4
		dc.w  $E05,    0,    0,$FFD6; 8
		dc.w $1905,    0,    0,$FFE1; 12
		dc.w $1905,    0,    0,	  $F; 16
		dc.w  $E05,    0,    0,	 $1A; 20
		dc.w  $305,    0,    0,	 $25; 24
		dc.w $F805,    0,    0,	 $30; 28
word_29134:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0; 0
		dc.w  $605,    0,    0,$FFC6; 4
		dc.w $1505,    0,    0,$FFCC; 8
		dc.w $2405,    0,    0,$FFD2; 12
		dc.w $2405,    0,    0,	 $1E; 16
		dc.w $1505,    0,    0,	 $24; 20
		dc.w  $605,    0,    0,	 $2A; 24
		dc.w $F805,    0,    0,	 $30; 28
word_29176:	dc.w 8			
		dc.w $F805,    0,    0,$FFC0; 0
		dc.w  $805,    0,    0,$FFC0; 4
		dc.w $1805,    0,    0,$FFC0; 8
		dc.w $2805,    0,    0,$FFC0; 12
		dc.w $F805,    0,    0,	 $30; 16
		dc.w  $805,    0,    0,	 $30; 20
		dc.w $1805,    0,    0,	 $30; 24
		dc.w $2805,    0,    0,	 $30; 28
; ===========================================================================

loc_291B8:				
		jmp	MarkObjGone
; ===========================================================================

loc_291BE:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_291C4:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Stairs from CPZ that move down to open the way
; ----------------------------------------------------------------------------

Sprite_291CC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_291E2(pc,d0.w),d1
		jsr	off_291E2(pc,d1.w)
		move.w	$30(a0),d0
		bra.w	loc_2939A
; ===========================================================================
off_291E2:	dc.w loc_291E8-off_291E2; 0 
		dc.w loc_2926C-off_291E2; 1
		dc.w loc_29280-off_291E2; 2
; ===========================================================================

loc_291E8:				
		addq.b	#2,$24(a0)
		moveq	#$34,d3	; '4'
		moveq	#2,d4
		btst	#0,$22(a0)
		beq.s	loc_291FC
		moveq	#$3A,d3	; ':'
		moveq	#-2,d4

loc_291FC:				
		move.w	8(a0),d2
		movea.l	a0,a1
		moveq	#3,d1
		bra.s	loc_29214
; ===========================================================================

loc_29206:				
		bsr.w	loc_29388
		bne.w	loc_2926C
		move.b	#4,$24(a1)

loc_29214:				
		_move.b	0(a0),0(a1)
		move.l	#Map_2800E,4(a1)
		move.w	#$6418,2(a1)
		bsr.w	loc_2938E
		move.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#$10,$19(a1)
		move.b	$28(a0),$28(a1)
		move.w	d2,8(a1)
		move.w	$C(a0),$C(a1)
		move.w	8(a0),$30(a1)
		move.w	$C(a1),$32(a1)
		addi.w	#$20,d2	; ' '
		move.b	d3,$2F(a1)
		move.l	a0,$3C(a1)
		add.b	d4,d3
		dbf	d1,loc_29206

loc_2926C:				
					
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#7,d0
		add.w	d0,d0
		move.w	off_292B8(pc,d0.w),d1
		jsr	off_292B8(pc,d1.w)

loc_29280:				
		movea.l	$3C(a0),a2
		moveq	#0,d0
		move.b	$2F(a0),d0
		move.w	(a2,d0.w),d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	8(a0),d4
		bsr.w	loc_29394
		swap	d6
		or.b	d6,$2E(a2)
		rts	
; ===========================================================================
off_292B8:	dc.w loc_292C8-off_292B8; 0 
		dc.w loc_29334-off_292B8; 1
		dc.w loc_292EC-off_292B8; 2
		dc.w loc_29334-off_292B8; 3
		dc.w loc_292C8-off_292B8; 4
		dc.w loc_2935E-off_292B8; 5
		dc.w loc_292EC-off_292B8; 6
		dc.w loc_2935E-off_292B8; 7
; ===========================================================================

loc_292C8:				
		tst.w	$2C(a0)
		bne.s	loc_292E0
		move.b	$2E(a0),d0
		andi.b	#$30,d0	; '0'
		beq.s	locret_292DE
		move.w	#$1E,$2C(a0)

locret_292DE:				
		rts	
; ===========================================================================

loc_292E0:				
		subq.w	#1,$2C(a0)
		bne.s	locret_292DE
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_292EC:				
		tst.w	$2C(a0)
		bne.s	loc_29304
		move.b	$2E(a0),d0
		andi.b	#$C,d0
		beq.s	locret_29302
		move.w	#$3C,$2C(a0) ; '<'

locret_29302:				
		rts	
; ===========================================================================

loc_29304:				
		subq.w	#1,$2C(a0)
		bne.s	loc_29310
		addq.b	#1,$28(a0)
		rts	
; ===========================================================================

loc_29310:				
		lea	$34(a0),a1
		move.w	$2C(a0),d0
		lsr.b	#2,d0
		andi.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		eori.b	#1,d0
		move.w	d0,(a1)+
		rts	
; ===========================================================================

loc_29334:				
		lea	$34(a0),a1
		cmpi.w	#$80,(a1)
		beq.s	locret_2935C
		addq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		lsr.l	#1,d1
		move.l	d1,d2
		lsr.l	#1,d1
		move.l	d1,d3
		add.l	d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+

locret_2935C:				
		rts	
; ===========================================================================

loc_2935E:				
		lea	$34(a0),a1
		cmpi.w	#-$80,(a1)
		beq.s	locret_29386
		subq.w	#1,(a1)
		moveq	#0,d1
		move.w	(a1)+,d1
		swap	d1
		asr.l	#1,d1
		move.l	d1,d2
		asr.l	#1,d1
		move.l	d1,d3
		add.l	d2,d3
		swap	d1
		swap	d2
		swap	d3
		move.w	d3,(a1)+
		move.w	d2,(a1)+
		move.w	d1,(a1)+

locret_29386:				
		rts	
; ===========================================================================

loc_29388:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2938E:				
		jmp	sub_16D8A
; ===========================================================================

loc_29394:				
		jmp	SolidObject
; ===========================================================================

loc_2939A:				
		jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Platform that	moves back and fourth on top of	water in CPZ
; ----------------------------------------------------------------------------

Sprite_293A0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_293AE(pc,d0.w),d1
		jmp	off_293AE(pc,d1.w)
; ===========================================================================
off_293AE:	dc.w loc_293CC-off_293AE; 0 
		dc.w loc_2948E-off_293AE; 1
		dc.w loc_294EA-off_293AE; 2
byte_293B4:	dc.b   0		; 0
		dc.b $68		; 1
		dc.b $FF		; 2
		dc.b $98		; 3
		dc.b   0		; 4
		dc.b   0		; 5
		dc.b   1		; 6
		dc.b $A8		; 7
		dc.b $FF		; 8
		dc.b $50		; 9
		dc.b   0		; 10
		dc.b $40		; 11
		dc.b   1		; 12
		dc.b $E8		; 13
		dc.b $FF		; 14
		dc.b $80		; 15
		dc.b   0		; 16
		dc.b $80		; 17
		dc.b   0		; 18
		dc.b $68		; 19
		dc.b   0		; 20
		dc.b $67		; 21
		dc.b   0		; 22
		dc.b   0		; 23
; ===========================================================================

loc_293CC:				
		addq.b	#2,$24(a0)
		move.l	#Map_29564,4(a0)
		move.w	#-$1BE8,2(a0)
		cmpi.b	#$B,(v_zone).w
		bne.s	loc_293F4
		move.l	#Map_10256,4(a0)
		move.w	#0,2(a0)

loc_293F4:				
		bsr.w	loc_29584
		moveq	#0,d1
		move.b	$28(a0),d1
		lea	byte_293B4(pc,d1.w),a2
		move.b	(a2)+,d1
		movea.l	a0,a1
		bra.s	loc_29426
; ===========================================================================

loc_29408:				
		bsr.w	loc_2957E
		bne.s	loc_2944A
		_move.b	0(a0),0(a1)
		move.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

loc_29426:				
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.b	#$18,$19(a1)
		move.w	8(a1),$30(a1)

loc_2944A:				
		dbf	d1,loc_29408
		move.l	a0,$3C(a1)
		move.l	a1,$3C(a0)
		cmpi.b	#$C,$28(a0)
		bne.s	loc_29464
		move.b	#1,$36(a0)

loc_29464:				
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$30(a0),d0
		sub.w	d1,d0
		move.w	d0,$32(a0)
		move.w	d0,$32(a1)
		add.w	d1,d0
		add.w	d1,d0
		move.w	d0,$34(a0)
		move.w	d0,$34(a1)
		move.w	(a2)+,d0
		add.w	d0,8(a0)
		move.w	(a2)+,d0
		add.w	d0,8(a1)

loc_2948E:				
		bsr.s	loc_294F4
		tst.w	(f_two_player).w
		beq.s	loc_2949A
		bra.w	loc_29578
; ===========================================================================

loc_2949A:				
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_294BE
		move.w	$34(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_294C4

loc_294BE:				
		jmp	DisplaySprite
; ===========================================================================

loc_294C4:				
		movea.l	$3C(a0),a1
		cmpa.l	a0,a1
		beq.s	loc_294D2
		jsr	DeleteObject2

loc_294D2:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_294E4
		bclr	#7,2(a2,d0.w)

loc_294E4:				
		jmp	DeleteObject
; ===========================================================================

loc_294EA:				
		bsr.s	loc_294F4
		bsr.s	loc_2953E
		jmp	DisplaySprite
; ===========================================================================

loc_294F4:				
		move.w	8(a0),-(sp)
		tst.b	$36(a0)
		beq.s	loc_29516
		move.w	8(a0),d0
		subq.w	#1,d0
		cmp.w	$32(a0),d0
		bne.s	loc_29510
		move.b	#0,$36(a0)

loc_29510:				
		move.w	d0,8(a0)
		bra.s	loc_2952C
; ===========================================================================

loc_29516:				
		move.w	8(a0),d0
		addq.w	#1,d0
		cmp.w	$34(a0),d0
		bne.s	loc_29528
		move.b	#1,$36(a0)

loc_29528:				
		move.w	d0,8(a0)

loc_2952C:				
		moveq	#0,d1
		move.b	$19(a0),d1
		move.w	#8,d3
		move.w	(sp)+,d4
		bsr.w	loc_2958A
		rts	
; ===========================================================================

loc_2953E:				
		movea.l	$3C(a0),a1
		move.w	8(a0),d0
		subi.w	#$18,d0
		move.w	8(a1),d2
		addi.w	#$18,d2
		cmp.w	d0,d2
		bne.s	locret_29562
		eori.b	#1,$36(a0)
		eori.b	#1,$36(a1)

locret_29562:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29564:				
		dc.w word_29566-Map_29564
word_29566:	dc.w 2			
		dc.w $F809,  $10,    8,$FFE8; 0
		dc.w $F809, $810, $808,	   0; 4
; ===========================================================================

loc_29578:				
		jmp	DisplaySprite
; ===========================================================================

loc_2957E:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_29584:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2958A:				
		jmp	DetectPlatform
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_29590:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_295C0(pc,d0.w),d1
		jsr	off_295C0(pc,d1.w)
		tst.w	(f_two_player).w
		beq.s	loc_295A8
		bra.w	loc_297C4
; ===========================================================================

loc_295A8:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_297CA
		bra.w	loc_297C4
; ===========================================================================
off_295C0:	dc.w loc_295C8-off_295C0; 0 
		dc.w loc_295FE-off_295C0; 1
byte_295C4:	dc.b $F0		; 0
		dc.b   0		; 1
		dc.b $F5		; 2
		dc.b $80		; 3
; ===========================================================================

loc_295C8:				
		addq.b	#2,$24(a0)
		move.l	#Map_29780,4(a0)
		move.w	#$3E0,2(a0)
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	$28(a0),d0
		andi.w	#2,d0
		move.w	byte_295C4(pc,d0.w),$30(a0)
		bsr.w	loc_297D6

loc_295FE:				
		cmpi.b	#1,$1A(a0)
		beq.s	loc_29648
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_297DC
		btst	#3,$22(a0)
		beq.s	loc_29630
		bsr.w	loc_296C2

loc_29630:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_297DC
		btst	#4,$22(a0)
		beq.s	loc_29648
		bsr.s	loc_296C2

loc_29648:				
		move.w	8(a0),d4
		move.w	d4,d5
		subi.w	#$10,d4
		addi.w	#$10,d5
		move.w	$C(a0),d2
		move.w	d2,d3
		addi.w	#$30,d3	; '0'
		move.w	($FFFFB008).w,d0
		cmp.w	d4,d0
		bcs.s	loc_29686
		cmp.w	d5,d0
		bcc.s	loc_29686
		move.w	($FFFFB00C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_29686
		cmp.w	d3,d0
		bcc.s	loc_29686
		cmpi.b	#2,$1D(a0)
		beq.s	loc_29686
		move.b	#2,$1C(a0)

loc_29686:				
		move.w	($FFFFB048).w,d0
		cmp.w	d4,d0
		bcs.s	loc_296B6
		cmp.w	d5,d0
		bcc.s	loc_296B6
		move.w	($FFFFB04C).w,d0
		cmp.w	d2,d0
		bcs.s	loc_296B6
		cmp.w	d3,d0
		bcc.s	loc_296B6
		cmpi.w	#4,(v_tails_cpu_routine).w
		beq.w	loc_296B6
		cmpi.b	#3,$1D(a0)
		beq.s	loc_296B6
		move.b	#3,$1C(a0)

loc_296B6:				
		lea	(off_29768).l,a1
		bra.w	loc_297D0
; ===========================================================================
		rts	
; ===========================================================================

loc_296C2:				
		move.w	#$100,$1C(a0)
		addq.w	#4,$C(a1)
		move.w	$30(a0),$12(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#$10,$1C(a1)
		move.b	#2,$24(a1)
		move.b	$28(a0),d0
		bpl.s	loc_296F6
		move.w	#0,$10(a1)

loc_296F6:				
		btst	#0,d0
		beq.s	loc_29736
		move.w	#1,$14(a1)
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		btst	#1,d0
		bne.s	loc_29726
		move.b	#1,$2C(a1)

loc_29726:				
		btst	#0,$22(a1)
		beq.s	loc_29736
		neg.b	$27(a1)
		neg.w	$14(a1)

loc_29736:				
		andi.b	#$C,d0
		cmpi.b	#4,d0
		bne.s	loc_2974C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)

loc_2974C:				
		cmpi.b	#8,d0
		bne.s	loc_2975E
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_2975E:				
		move.w	#$CC,d0	
		jmp	(PlaySound).l
; ===========================================================================
off_29768:	dc.w byte_29770-off_29768; 0 
		dc.w byte_29773-off_29768; 1
		dc.w byte_29777-off_29768; 2
		dc.w byte_29777-off_29768; 3
byte_29770:	dc.b  $F,  0,$FF	; 0 
byte_29773:	dc.b   0,  3,$FD,  0	; 0 
byte_29777:	dc.b   5,  1,  2,  2,  2,  4,$FD,  0,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29780:				
		dc.w word_2978A-Map_29780; 0
		dc.w word_29794-Map_29780; 1
		dc.w word_297A6-Map_29780; 2
		dc.w word_297B8-Map_29780; 3
		dc.w word_29794-Map_29780; 4
word_2978A:	dc.w 1			
		dc.w $F00D,    0,    0,$FFF0; 0
word_29794:	dc.w 2			
		dc.w $E007,    8,    4,$FFF0; 0
		dc.w $E007, $808, $804,	   0; 4
word_297A6:	dc.w 2			
		dc.w $E007,  $10,    8,$FFF0; 0
		dc.w $E007, $810, $808,	   0; 4
word_297B8:	dc.w 1			
		dc.w $F00D,  $18,   $C,$FFF0; 0
; ===========================================================================
		nop	

loc_297C4:				
		jmp	DisplaySprite
; ===========================================================================

loc_297CA:				
		jmp	DeleteObject
; ===========================================================================

loc_297D0:				
		jmp	AnimateSprite
; ===========================================================================

loc_297D6:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_297DC:				
		jmp	loc_1978E
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Vine switch that you hang off	in MCZ
; ----------------------------------------------------------------------------

Sprite_297E4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_297F2(pc,d0.w),d1
		jmp	off_297F2(pc,d1.w)
; ===========================================================================
off_297F2:	dc.w loc_297F6-off_297F2; 0 
		dc.w loc_2981E-off_297F2; 1
; ===========================================================================

loc_297F6:				
		addq.b	#2,$24(a0)
		move.l	#Map_29938,4(a0)
		move.w	#$640E,2(a0)
		bsr.w	loc_29976
		move.b	#4,1(a0)
		move.b	#8,$19(a0)
		move.b	#4,$18(a0)

loc_2981E:				
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.s	loc_2983C
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.s	loc_2983C
		bra.w	loc_29970
; ===========================================================================

loc_2983C:				
		tst.b	(a2)
		beq.s	loc_29890
		andi.b	#$70,d0	; 'p'
		beq.w	locret_29936
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.s	loc_29860
		move.b	#$3C,2(a2) ; '<'

loc_29860:				
		move.w	#-$300,$12(a1)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		lea	(a3,d0.w),a3
		bclr	#0,(a3)

loc_2987A:
		move.b	#0,$1A(a0)
		tst.w	$30(a0)
		beq.s	loc_2988C
		move.b	#1,$1A(a0)

loc_2988C:				
		bra.w	locret_29936
; ===========================================================================

loc_29890:				
		tst.b	2(a2)
		beq.s	loc_2989E
		subq.b	#1,2(a2)
		bne.w	locret_29936

loc_2989E:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$C,d0
		cmpi.w	#$18,d0
		bcc.w	locret_29936
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$28,d1	; '('
		cmpi.w	#$10,d1
		bcc.w	locret_29936
		tst.b	$2A(a1)
		bmi.s	locret_29936
		cmpi.b	#4,$24(a1)
		bcc.s	locret_29936
		tst.w	(v_debug_active).w
		bne.s	locret_29936
		clr.w	$10(a1)
		clr.w	$12(a1)
		clr.w	$14(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$30,$C(a1) ; '0'
		move.b	#$14,$1C(a1)
		move.b	#1,$2A(a1)
		move.b	#1,(a2)
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		bset	#0,(a3,d0.w)
		move.w	#$CD,d0	
		jsr	(PlaySound).l
		move.b	#0,$1A(a0)
		tst.w	$30(a0)
		beq.s	locret_29936
		move.b	#1,$1A(a0)

locret_29936:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29938:				
		dc.w word_2993C-Map_29938; 0
		dc.w word_29956-Map_29938; 1
word_2993C:	dc.w 3			
		dc.w $D007,    0,    0,$FFF8; 0
		dc.w $F007,    0,    0,$FFF8; 4
		dc.w $1007,    8,    4,$FFF8; 8
word_29956:	dc.w 3			
		dc.w $D407,    0,    0,$FFF8; 0
		dc.w $F407,    0,    0,$FFF8; 4
		dc.w $1407,    8,    4,$FFF8; 8
; ===========================================================================

loc_29970:				
		jmp	MarkObjGone
; ===========================================================================

loc_29976:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Vine that you	hang off and it	moves down from	MCZ
; ----------------------------------------------------------------------------

Sprite_2997C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2998A(pc,d0.w),d1
		jmp	off_2998A(pc,d1.w)
; ===========================================================================
off_2998A:	dc.w loc_29990-off_2998A; 0 
		dc.w loc_29A66-off_2998A; 1
		dc.w loc_29BFA-off_2998A; 2
; ===========================================================================

loc_29990:				
		addq.b	#2,$24(a0)
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	#-$80,$16(a0)
		bset	#4,1(a0)
		move.w	$C(a0),$3C(a0)
		cmpi.b	#6,(v_zone).w
		bne.s	loc_29A1C
		addq.b	#2,$24(a0)
		move.l	#Map_29DD0,4(a0)
		move.w	#$23FE,2(a0)
		bsr.w	loc_29FFA
		move.w	#$A0,$2E(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		andi.b	#$F,d0
		beq.s	loc_299EE
		move.w	#$60,$2E(a0) ; '`'

loc_299EE:				
		move.b	$28(a0),d0
		move.w	#2,$3A(a0)
		andi.b	#$70,d1	; 'p'
		beq.s	loc_29A18
		move.w	$2E(a0),d0
		move.w	d0,$38(a0)
		move.b	#1,$36(a0)
		add.w	d0,$C(a0)
		lsr.w	#4,d0
		addq.w	#1,d0
		move.b	d0,$1A(a0)

loc_29A18:				
		bra.w	loc_29BFA
; ===========================================================================

loc_29A1C:				
		move.l	#Map_29C64,4(a0)
		move.w	#$641E,2(a0)
		bsr.w	loc_29FFA
		move.w	#$B0,$2E(a0)
		move.b	$28(a0),d0
		bpl.s	loc_29A40
		move.b	#1,$34(a0)

loc_29A40:				
		move.w	#2,$3A(a0)
		andi.b	#$70,d0	; 'p'
		beq.s	loc_29A66
		move.w	$2E(a0),d0
		move.w	d0,$38(a0)
		move.b	#1,$36(a0)
		add.w	d0,$C(a0)
		lsr.w	#5,d0
		addq.w	#1,d0
		move.b	d0,$1A(a0)

loc_29A66:				
					
		tst.b	$36(a0)
		beq.s	loc_29A74
		tst.w	$30(a0)
		bne.s	loc_29A8A
		bra.s	loc_29A7A
; ===========================================================================

loc_29A74:				
		tst.w	$30(a0)
		beq.s	loc_29A8A

loc_29A7A:				
		move.w	$38(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_29AAE
		add.w	$3A(a0),d2
		bra.s	loc_29A94
; ===========================================================================

loc_29A8A:				
		move.w	$38(a0),d2
		beq.s	loc_29AAE
		sub.w	$3A(a0),d2

loc_29A94:				
		move.w	d2,$38(a0)
		move.w	$3C(a0),d0
		add.w	d2,d0
		move.w	d0,$C(a0)
		move.w	d2,d0
		beq.s	loc_29AAA
		lsr.w	#5,d0
		addq.w	#1,d0

loc_29AAA:				
		move.b	d0,$1A(a0)

loc_29AAE:				
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.s	loc_29ACC
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.s	loc_29ACC
		bra.w	loc_29FF4
; ===========================================================================

loc_29ACC:				
		tst.b	(a2)
		beq.w	loc_29B5E
		tst.b	1(a1)
		bpl.s	loc_29B42
		cmpi.b	#4,$24(a1)
		bcc.s	loc_29B42
		andi.b	#$70,d0	; 'p'
		beq.w	loc_29B50
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.w	loc_29B02
		move.b	#$3C,2(a2) ; '<'

loc_29B02:				
		btst	#$A,d0
		beq.s	loc_29B0E
		move.w	#-$200,$10(a1)

loc_29B0E:				
		btst	#$B,d0
		beq.s	loc_29B1A
		move.w	#$200,$10(a1)

loc_29B1A:				
		move.w	#-$380,$12(a1)
		bset	#1,$22(a1)
		tst.b	$34(a0)
		beq.s	locret_29B40
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		lea	(a3,d0.w),a3
		bclr	#0,(a3)

locret_29B40:				
		rts	
; ===========================================================================

loc_29B42:				
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$3C,2(a2) ; '<'
		rts	
; ===========================================================================

loc_29B50:				
		move.w	$C(a0),$C(a1)
		addi.w	#$94,$C(a1)
		rts	
; ===========================================================================

loc_29B5E:				
		tst.b	2(a2)
		beq.s	loc_29B6C
		subq.b	#1,2(a2)
		bne.w	locret_29BF8

loc_29B6C:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0	; ' '
		bcc.w	locret_29BF8
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$88,d1	
		cmpi.w	#$18,d1
		bcc.w	locret_29BF8
		tst.b	$2A(a1)
		bmi.s	locret_29BF8
		cmpi.b	#4,$24(a1)
		bcc.s	locret_29BF8
		tst.w	(v_debug_active).w
		bne.s	locret_29BF8
		clr.w	$10(a1)
		clr.w	$12(a1)
		clr.w	$14(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$94,$C(a1)
		move.b	#$14,$1C(a1)
		move.b	#1,$2A(a1)
		move.b	#1,(a2)
		tst.b	$34(a0)
		beq.s	locret_29BF8
		move.b	$28(a0),d0
		andi.w	#$F,d0
		lea	(v_button_state).w,a3
		bset	#0,(a3,d0.w)
		move.w	#$CD,d0	
		jsr	(PlaySound).l

locret_29BF8:				
		rts	
; ===========================================================================

loc_29BFA:				
					
		tst.b	$36(a0)
		beq.s	loc_29C08
		tst.w	$30(a0)
		bne.s	loc_29C1E
		bra.s	loc_29C0E
; ===========================================================================

loc_29C08:				
		tst.w	$30(a0)
		beq.s	loc_29C1E

loc_29C0E:				
		move.w	$38(a0),d2
		cmp.w	$2E(a0),d2
		beq.s	loc_29C42
		add.w	$3A(a0),d2
		bra.s	loc_29C28
; ===========================================================================

loc_29C1E:				
		move.w	$38(a0),d2
		beq.s	loc_29C42
		sub.w	$3A(a0),d2

loc_29C28:				
		move.w	d2,$38(a0)
		move.w	$3C(a0),d0
		add.w	d2,d0
		move.w	d0,$C(a0)
		move.w	d2,d0
		beq.s	loc_29C3E
		lsr.w	#4,d0
		addq.w	#1,d0

loc_29C3E:				
		move.b	d0,$1A(a0)

loc_29C42:				
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.w	loc_29ACC
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.w	loc_29ACC
		bra.w	loc_29FF4
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29C64:				
		dc.w word_29C72-Map_29C64; 0
		dc.w word_29C8C-Map_29C64; 1
		dc.w word_29CAE-Map_29C64; 2
		dc.w word_29CD8-Map_29C64; 3
		dc.w word_29D0A-Map_29C64; 4
		dc.w word_29D44-Map_29C64; 5
		dc.w word_29D86-Map_29C64; 6
word_29C72:	dc.w 3			
		dc.w $3003,    0,    0,$FFFC; 0
		dc.w $5003,    0,    0,$FFFC; 4
		dc.w $7009,    4,    2,$FFF4; 8
word_29C8C:	dc.w 4			
		dc.w $1003,    0,    0,$FFFC; 0
		dc.w $3003,    0,    0,$FFFC; 4
		dc.w $5003,    0,    0,$FFFC; 8
		dc.w $7009,    4,    2,$FFF4; 12
word_29CAE:	dc.w 5			
		dc.w $F003,    0,    0,$FFFC; 0
		dc.w $1003,    0,    0,$FFFC; 4
		dc.w $3003,    0,    0,$FFFC; 8
		dc.w $5003,    0,    0,$FFFC; 12
		dc.w $7009,    4,    2,$FFF4; 16
word_29CD8:	dc.w 6			
		dc.w $D003,    0,    0,$FFFC; 0
		dc.w $F003,    0,    0,$FFFC; 4
		dc.w $1003,    0,    0,$FFFC; 8
		dc.w $3003,    0,    0,$FFFC; 12
		dc.w $5003,    0,    0,$FFFC; 16
		dc.w $7009,    4,    2,$FFF4; 20
word_29D0A:	dc.w 7			
		dc.w $B003,    0,    0,$FFFC; 0
		dc.w $D003,    0,    0,$FFFC; 4
		dc.w $F003,    0,    0,$FFFC; 8
		dc.w $1003,    0,    0,$FFFC; 12
		dc.w $3003,    0,    0,$FFFC; 16
		dc.w $5003,    0,    0,$FFFC; 20
		dc.w $7009,    4,    2,$FFF4; 24
word_29D44:	dc.w 8			
		dc.w $9003,    0,    0,$FFFC; 0
		dc.w $B003,    0,    0,$FFFC; 4
		dc.w $D003,    0,    0,$FFFC; 8
		dc.w $F003,    0,    0,$FFFC; 12
		dc.w $1003,    0,    0,$FFFC; 16
		dc.w $3003,    0,    0,$FFFC; 20
		dc.w $5003,    0,    0,$FFFC; 24
		dc.w $7009,    4,    2,$FFF4; 28
word_29D86:	dc.w 9			
		dc.w $8001,    2,    1,$FFFC; 0
		dc.w $9003,    0,    0,$FFFC; 4
		dc.w $B003,    0,    0,$FFFC; 8
		dc.w $D003,    0,    0,$FFFC; 12
		dc.w $F003,    0,    0,$FFFC; 16
		dc.w $1003,    0,    0,$FFFC; 20
		dc.w $3003,    0,    0,$FFFC; 24
		dc.w $5003,    0,    0,$FFFC; 28
		dc.w $7009,    4,    2,$FFF4; 32
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_29DD0:				
		dc.w word_29DEA-Map_29DD0; 0
		dc.w word_29DFC-Map_29DD0; 1
		dc.w word_29E0E-Map_29DD0; 2
		dc.w word_29E28-Map_29DD0; 3
		dc.w word_29E42-Map_29DD0; 4
		dc.w word_29E64-Map_29DD0; 5
		dc.w word_29E86-Map_29DD0; 6
		dc.w word_29EB0-Map_29DD0; 7
		dc.w word_29EDA-Map_29DD0; 8
		dc.w word_29F0C-Map_29DD0; 9
		dc.w word_29F3E-Map_29DD0; 10
		dc.w word_29F78-Map_29DD0; 11
		dc.w word_29FB2-Map_29DD0; 12
word_29DEA:	dc.w 2			
		dc.w $5001,    0,    0,$FFFC; 0
		dc.w $600B,    4,    2,$FFF4; 4
word_29DFC:	dc.w 2			
		dc.w $4003,    0,    0,$FFFC; 0
		dc.w $600B,    4,    2,$FFF4; 4
word_29E0E:	dc.w 3			
		dc.w $3001,    0,    0,$FFFC; 0
		dc.w $4003,    0,    0,$FFFC; 4
		dc.w $600B,    4,    2,$FFF4; 8
word_29E28:	dc.w 3			
		dc.w $2003,    0,    0,$FFFC; 0
		dc.w $4003,    0,    0,$FFFC; 4
		dc.w $600B,    4,    2,$FFF4; 8
word_29E42:	dc.w 4			
		dc.w $1001,    0,    0,$FFFC; 0
		dc.w $2003,    0,    0,$FFFC; 4
		dc.w $4003,    0,    0,$FFFC; 8
		dc.w $600B,    4,    2,$FFF4; 12
word_29E64:	dc.w 4			
		dc.w	 3,    0,    0,$FFFC; 0
		dc.w $2003,    0,    0,$FFFC; 4
		dc.w $4003,    0,    0,$FFFC; 8
		dc.w $600B,    4,    2,$FFF4; 12
word_29E86:	dc.w 5			
		dc.w $F001,    0,    0,$FFFC; 0
		dc.w	 3,    0,    0,$FFFC; 4
		dc.w $2003,    0,    0,$FFFC; 8
		dc.w $4003,    0,    0,$FFFC; 12
		dc.w $600B,    4,    2,$FFF4; 16
word_29EB0:	dc.w 5			
		dc.w $E003,    0,    0,$FFFC; 0
		dc.w	 3,    0,    0,$FFFC; 4
		dc.w $2003,    0,    0,$FFFC; 8
		dc.w $4003,    0,    0,$FFFC; 12
		dc.w $600B,    4,    2,$FFF4; 16
word_29EDA:	dc.w 6			
		dc.w $D001,    0,    0,$FFFC; 0
		dc.w $E003,    0,    0,$FFFC; 4
		dc.w	 3,    0,    0,$FFFC; 8
		dc.w $2003,    0,    0,$FFFC; 12
		dc.w $4003,    0,    0,$FFFC; 16
		dc.w $600B,    4,    2,$FFF4; 20
word_29F0C:	dc.w 6			
		dc.w $C003,    0,    0,$FFFC; 0
		dc.w $E003,    0,    0,$FFFC; 4
		dc.w	 3,    0,    0,$FFFC; 8
		dc.w $2003,    0,    0,$FFFC; 12
		dc.w $4003,    0,    0,$FFFC; 16
		dc.w $600B,    4,    2,$FFF4; 20
word_29F3E:	dc.w 7			
		dc.w $B001,    0,    0,$FFFC; 0
		dc.w $C003,    0,    0,$FFFC; 4
		dc.w $E003,    0,    0,$FFFC; 8
		dc.w	 3,    0,    0,$FFFC; 12
		dc.w $2003,    0,    0,$FFFC; 16
		dc.w $4003,    0,    0,$FFFC; 20
		dc.w $600B,    4,    2,$FFF4; 24
word_29F78:	dc.w 7			
		dc.w $A003,    0,    0,$FFFC; 0
		dc.w $C003,    0,    0,$FFFC; 4
		dc.w $E003,    0,    0,$FFFC; 8
		dc.w	 3,    0,    0,$FFFC; 12
		dc.w $2003,    0,    0,$FFFC; 16
		dc.w $4003,    0,    0,$FFFC; 20
		dc.w $600B,    4,    2,$FFF4; 24
word_29FB2:	dc.w 8			
		dc.w $9001,    0,    0,$FFFC; 0
		dc.w $A003,    0,    0,$FFFC; 4
		dc.w $C003,    0,    0,$FFFC; 8
		dc.w $E003,    0,    0,$FFFC; 12
		dc.w	 3,    0,    0,$FFFC; 16
		dc.w $2003,    0,    0,$FFFC; 20
		dc.w $4003,    0,    0,$FFFC; 24
		dc.w $600B,    4,    2,$FFF4; 28
; ===========================================================================

loc_29FF4:				
		jmp	MarkObjGone
; ===========================================================================

loc_29FFA:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2A000:				
		btst	#6,1(a0)
		bne.w	loc_2A018
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2A020(pc,d0.w),d1
		jmp	off_2A020(pc,d1.w)
; ===========================================================================

loc_2A018:				
		move.w	#$280,d0
		bra.w	loc_2A260
; ===========================================================================
off_2A020:	dc.w loc_2A026-off_2A020; 0 
		dc.w loc_2A0FE-off_2A020; 1
		dc.w loc_2A18A-off_2A020; 2
; ===========================================================================

loc_2A026:				
		addq.b	#2,$24(a0)
		move.l	#Map_2A24E,4(a0)
		move.w	#$643C,2(a0)
		bsr.w	loc_2A27E
		move.b	#4,1(a0)
		move.b	#5,$18(a0)
		move.b	#8,$19(a0)
		ori.b	#-$80,$22(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		subi.w	#$48,$C(a0) ; 'H'
		move.b	#-$40,$26(a0)
		moveq	#-$10,d4
		btst	#1,$22(a0)
		beq.s	loc_2A084
		addi.w	#$90,$C(a0)
		move.b	#$40,$26(a0) ; '@'
		neg.w	d4

loc_2A084:				
		move.w	#$100,d1
		btst	#0,$22(a0)
		beq.s	loc_2A092
		neg.w	d1

loc_2A092:				
		move.w	d1,$34(a0)
		bsr.w	loc_2A278
		bne.s	loc_2A0FE
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#$40,$E(a1) ; '@'
		move.w	$30(a0),d2
		move.w	$32(a0),d3
		moveq	#8,d1
		move.b	d1,$F(a1)
		subq.w	#1,d1
		lea	$10(a1),a2

loc_2A0D4:				
		add.w	d4,d3
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#1,(a2)+
		dbf	d1,loc_2A0D4
		move.w	$28(a1),8(a1)
		move.w	$2A(a1),$C(a1)
		move.l	a1,$3C(a0)
		move.b	#$40,$14(a1) ; '@'
		bset	#4,1(a1)

loc_2A0FE:				
					
		lea	(v_button_state).w,a2
		moveq	#0,d0
		move.b	$28(a0),d0
		btst	#0,(a2,d0.w)
		beq.s	loc_2A13A
		tst.b	$36(a0)
		bne.s	loc_2A13A
		move.b	#1,$36(a0)
		move.w	#$E7,d0	
		jsr	(PlaySound2).l
		cmpi.b	#-$7F,$22(a0)
		bne.s	loc_2A13A
		move.w	$30(a0),8(a0)
		subi.w	#$48,8(a0) ; 'H'

loc_2A13A:				
		tst.b	$36(a0)
		beq.s	loc_2A188
		move.w	#$48,d1	; 'H'
		tst.b	$26(a0)
		beq.s	loc_2A154
		cmpi.b	#-$80,$26(a0)
		bne.s	loc_2A180
		neg.w	d1

loc_2A154:				
		move.w	$32(a0),$C(a0)
		move.w	$30(a0),8(a0)
		add.w	d1,8(a0)
		move.b	#$40,$19(a0) ; '@'
		move.b	#0,$36(a0)
		move.w	#$E9,d0	
		jsr	(PlaySound).l
		addq.b	#2,$24(a0)
		bra.s	loc_2A188
; ===========================================================================

loc_2A180:				
		move.w	$34(a0),d0
		add.w	d0,$26(a0)

loc_2A188:				
		bsr.s	loc_2A1EA

loc_2A18A:				
		move.w	#$13,d1
		move.w	#$40,d2	; '@'
		move.w	#$41,d3	; 'A'
		move.b	$26(a0),d0
		beq.s	loc_2A1A8
		cmpi.b	#$40,d0	; '@'
		beq.s	loc_2A1B4
		cmpi.b	#-$40,d0
		bcc.s	loc_2A1B4

loc_2A1A8:				
		move.w	#$4B,d1	; 'K'
		move.w	#8,d2
		move.w	#9,d3

loc_2A1B4:				
		move.w	8(a0),d4
		bsr.w	loc_2A28A
		tst.w	(f_two_player).w
		beq.s	loc_2A1C6
		bra.w	loc_2A266
; ===========================================================================

loc_2A1C6:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2A1DE
		bra.w	loc_2A266
; ===========================================================================

loc_2A1DE:				
		movea.l	$3C(a0),a1
		bsr.w	loc_2A272
		bra.w	loc_2A26C
; ===========================================================================

loc_2A1EA:				
		tst.b	$36(a0)
		beq.s	locret_2A24C
		moveq	#0,d0
		moveq	#0,d1
		move.b	$26(a0),d0
		bsr.w	loc_2A284
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.l	$3C(a0),a1
		move.b	$F(a1),d6
		subq.w	#1,d6
		bcs.s	locret_2A24C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		lea	$10(a1),a2

loc_2A222:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_2A222
		move.w	$28(a1),8(a1)
		move.w	$2A(a1),$C(a1)

locret_2A24C:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2A24E:				
		dc.w word_2A252-Map_2A24E; 0
		dc.w word_2A254-Map_2A24E; 1
word_2A252:	dc.w 0			
word_2A254:	dc.w	 1		; 0 
		dc.w $F805,    0,    0,$FFF8; 0
; ===========================================================================
		nop	

loc_2A260:				
		jmp	DisplaySprite3
; ===========================================================================

loc_2A266:				
		jmp	DisplaySprite
; ===========================================================================

loc_2A26C:				
		jmp	DeleteObject
; ===========================================================================

loc_2A272:				
		jmp	DeleteObject2
; ===========================================================================

loc_2A278:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2A27E:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2A284:				
		jmp	(CalcSine).l
; ===========================================================================

loc_2A28A:				
		jmp	SolidObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Platform that	is usually swinging from ARZ
; ----------------------------------------------------------------------------

Sprite_2A290:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2A29E(pc,d0.w),d1
		jmp	off_2A29E(pc,d1.w)
; ===========================================================================
off_2A29E:	dc.w loc_2A2AA-off_2A29E; 0 
		dc.w loc_2A312-off_2A29E; 1
byte_2A2A2:	dc.b $20		; 0
		dc.b   8		; 1
		dc.b $1C		; 2
		dc.b $30		; 3
		dc.b $10		; 4
		dc.b $10		; 5
		dc.b $10		; 6
		dc.b $10		; 7
; ===========================================================================

loc_2A2AA:				
		addq.b	#2,$24(a0)
		move.l	#Map_2A476,4(a0)
		move.w	#0,2(a0)
		bsr.w	loc_2A4DE
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		lea	byte_2A2A2(pc,d0.w),a2
		move.b	(a2)+,$19(a0)
		move.b	(a2),$16(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		move.w	8(a0),$34(a0)
		move.w	$C(a0),$30(a0)
		move.b	$28(a0),d0
		andi.b	#$F,d0
		beq.s	loc_2A30C
		cmpi.b	#7,d0
		beq.s	loc_2A30C
		move.b	#1,$38(a0)

loc_2A30C:				
		andi.b	#$F,$28(a0)

loc_2A312:				
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		add.w	d0,d0
		move.w	off_2A358(pc,d0.w),d1
		jsr	off_2A358(pc,d1.w)
		move.w	(sp)+,d4
		tst.b	1(a0)
		bpl.s	loc_2A350
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	$16(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		bsr.w	loc_2A4EA
		swap	d6
		move.b	d6,$3F(a0)
		bsr.w	loc_2A432

loc_2A350:				
		move.w	$34(a0),d0
		bra.w	loc_2A4F0
; ===========================================================================
off_2A358:	dc.w locret_2A368-off_2A358; 0 
		dc.w loc_2A36A-off_2A358; 1
		dc.w loc_2A392-off_2A358; 2
		dc.w loc_2A36A-off_2A358; 3
		dc.w loc_2A3B6-off_2A358; 4
		dc.w loc_2A3D8-off_2A358; 5
		dc.w loc_2A392-off_2A358; 6
		dc.w loc_2A3EC-off_2A358; 7
; ===========================================================================

locret_2A368:				
		rts	
; ===========================================================================

loc_2A36A:				
		tst.w	$36(a0)
		bne.s	loc_2A382
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_2A380
		move.w	#$1E,$36(a0)

locret_2A380:				
		rts	
; ===========================================================================

loc_2A382:				
		subq.w	#1,$36(a0)
		bne.s	locret_2A380
		addq.b	#1,$28(a0)
		clr.b	$38(a0)
		rts	
; ===========================================================================

loc_2A392:				
		bsr.w	loc_2A4F6
		addi.w	#8,$12(a0)
		bsr.w	loc_2A4D8
		tst.w	d1
		bpl.w	locret_2A3B4
		addq.w	#1,d1
		add.w	d1,$C(a0)
		clr.w	$12(a0)
		clr.b	$28(a0)

locret_2A3B4:				
		rts	
; ===========================================================================

loc_2A3B6:				
		bsr.w	loc_2A4F6
		subi.w	#8,$12(a0)
		bsr.w	loc_2A4E4
		tst.w	d1
		bpl.w	locret_2A3D6
		sub.w	d1,$C(a0)
		clr.w	$12(a0)
		clr.b	$28(a0)

locret_2A3D6:				
		rts	
; ===========================================================================

loc_2A3D8:				
		move.b	$3F(a0),d0
		andi.b	#3,d0
		beq.s	locret_2A3EA
		addq.b	#1,$28(a0)
		clr.b	$38(a0)

locret_2A3EA:				
		rts	
; ===========================================================================

loc_2A3EC:				
		move.w	(v_water_height_actual).w,d0
		sub.w	$C(a0),d0
		beq.s	locret_2A430
		bcc.s	loc_2A414
		cmpi.w	#-2,d0
		bge.s	loc_2A400
		moveq	#-2,d0

loc_2A400:				
		add.w	d0,$C(a0)
		bsr.w	loc_2A4E4
		tst.w	d1
		bpl.w	locret_2A412
		sub.w	d1,$C(a0)

locret_2A412:				
		rts	
; ===========================================================================

loc_2A414:				
		cmpi.w	#2,d0
		ble.s	loc_2A41C
		moveq	#2,d0

loc_2A41C:				
		add.w	d0,$C(a0)
		bsr.w	loc_2A4D8
		tst.w	d1
		bpl.w	locret_2A430
		addq.w	#1,d1
		add.w	d1,$C(a0)

locret_2A430:				
		rts	
; ===========================================================================

loc_2A432:				
		tst.b	$38(a0)
		beq.s	locret_2A474
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_2A44E
		tst.b	$3E(a0)
		beq.s	locret_2A474
		subq.b	#4,$3E(a0)
		bra.s	loc_2A45A
; ===========================================================================

loc_2A44E:				
		cmpi.b	#$40,$3E(a0) ; '@'
		beq.s	locret_2A474
		addq.b	#4,$3E(a0)

loc_2A45A:				
		move.b	$3E(a0),d0
		jsr	(CalcSine).l
		move.w	#$400,d1
		muls.w	d1,d0
		swap	d0
		add.w	$30(a0),d0
		move.w	d0,$C(a0)

locret_2A474:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2A476:				
		dc.w word_2A47A-Map_2A476; 0
		dc.w word_2A48C-Map_2A476; 1
word_2A47A:	dc.w 2			
		dc.w $F80D,$6055,$602A,$FFE0; 0
		dc.w $F80D,$6055,$602A,	   0; 4
word_2A48C:	dc.w 9			
		dc.w $D005,$205D,$202E,$FFE0; 0
		dc.w $D005,$285D,$282E,	 $10; 4
		dc.w $D00D,$2061,$2030,$FFF0; 8
		dc.w $E00D,$2069,$2034,$FFF0; 12
		dc.w $F00D,$2069,$2034,$FFF0; 16
		dc.w	$D,$2071,$2038,$FFF0; 20
		dc.w $100D,$2069,$2034,$FFF0; 24
		dc.w $200D,$2079,$203C,$FFF0; 28
		dc.w $3004,$2081,$2040,$FFF0; 32
; ===========================================================================
		nop	

loc_2A4D8:				
		jmp	loc_1EDFA
; ===========================================================================

loc_2A4DE:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2A4E4:				
		jmp	loc_1EFBE
; ===========================================================================

loc_2A4EA:				
		jmp	SolidObject
; ===========================================================================

loc_2A4F0:				
		jmp	MarkObjGone2
; ===========================================================================

loc_2A4F6:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; 3 adjoined platforms from ARZ	that rotate in a circle
; ----------------------------------------------------------------------------

Sprite_2A4FC:				
		btst	#6,1(a0)
		bne.w	loc_2A514
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2A51C(pc,d0.w),d1
		jmp	off_2A51C(pc,d1.w)
; ===========================================================================

loc_2A514:				
		move.w	#$280,d0
		bra.w	loc_2A778
; ===========================================================================
off_2A51C:	dc.w loc_2A522-off_2A51C; 0 
		dc.w loc_2A620-off_2A51C; 1
		dc.w loc_2A74E-off_2A51C; 2
; ===========================================================================

loc_2A522:				
		addq.b	#2,$24(a0)
		move.l	#Map_1021E,4(a0)
		move.w	#0,2(a0)
		bsr.w	loc_2A796
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#$20,$19(a0) ; ' '
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		move.b	$28(a0),d1
		move.b	d1,d0
		andi.w	#$F,d1
		andi.b	#-$10,d0
		ext.w	d0
		asl.w	#3,d0
		move.w	d0,$2E(a0)
		move.b	$22(a0),d0
		ror.b	#2,d0
		andi.b	#-$40,d0
		move.b	d0,$26(a0)
		bsr.w	loc_2A790
		bne.s	loc_2A5DC
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		bset	#6,1(a1)
		move.b	#$40,$E(a1) ; '@'
		moveq	#8,d1
		move.b	d1,$F(a1)
		subq.w	#1,d1
		lea	$10(a1),a2

loc_2A5B0:				
		addq.w	#4,a2
		move.w	#1,(a2)+
		dbf	d1,loc_2A5B0
		move.b	#1,$B(a1)
		move.b	#$40,$14(a1) ; '@'
		bset	#4,1(a1)
		move.l	a1,$34(a0)
		bsr.s	loc_2A5DE
		move.l	a1,$38(a0)
		bsr.s	loc_2A5DE
		move.l	a1,$3C(a0)

loc_2A5DC:				
		bra.s	loc_2A620
; ===========================================================================

loc_2A5DE:				
		bsr.w	loc_2A790
		bne.s	locret_2A61E
		addq.b	#4,$24(a1)
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.b	#$20,$19(a1) ; ' '
		move.w	8(a0),$30(a1)
		move.w	$C(a0),$32(a1)
		move.w	8(a0),$2C(a1)

locret_2A61E:				
		rts	
; ===========================================================================

loc_2A620:				
					
		move.w	8(a0),-(sp)
		moveq	#0,d0
		moveq	#0,d1
		move.w	$2E(a0),d0
		add.w	d0,$26(a0)
		move.w	$32(a0),d2
		move.w	$30(a0),d3
		moveq	#0,d6
		movea.l	$34(a0),a1
		lea	$10(a1),a2
		move.b	$26(a0),d0
		bsr.w	loc_2A79C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,8(a1)
		move.w	d4,$C(a1)
		move.l	d0,d4
		move.l	d1,d5
		add.l	d0,d4
		add.l	d1,d5
		moveq	#1,d6
		bsr.w	loc_2A72E
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,8(a0)
		move.w	d4,$C(a0)
		move.b	$26(a0),d0
		addi.b	#$55,d0	; 'U'
		bsr.w	loc_2A79C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		moveq	#2,d6
		bsr.w	loc_2A72E
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		movea.l	$38(a0),a1
		move.w	d5,8(a1)
		move.w	d4,$C(a1)
		move.b	$26(a0),d0
		subi.b	#$55,d0	; 'U'
		bsr.w	loc_2A79C
		swap	d0
		swap	d1
		asr.l	#4,d0
		asr.l	#4,d1
		move.l	d0,d4
		move.l	d1,d5
		moveq	#2,d6
		bsr.w	loc_2A72E
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		movea.l	$3C(a0),a1
		move.w	d5,8(a1)
		move.w	d4,$C(a1)
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		bsr.w	loc_2A7A2
		tst.w	(f_two_player).w
		beq.s	loc_2A70A
		bra.w	loc_2A77E
; ===========================================================================

loc_2A70A:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_2A722
		bra.w	loc_2A77E
; ===========================================================================

loc_2A722:				
		movea.l	$34(a0),a1
		bsr.w	loc_2A78A
		bra.w	loc_2A784
; ===========================================================================

loc_2A72E:				
		movem.l	d4-d5,-(sp)
		swap	d4
		swap	d5
		add.w	d2,d4
		add.w	d3,d5
		move.w	d5,(a2)+
		move.w	d4,(a2)+
		movem.l	(sp)+,d4-d5
		add.l	d0,d4
		add.l	d1,d5
		addq.w	#2,a2
		dbf	d6,loc_2A72E
		rts	
; ===========================================================================

loc_2A74E:				
		moveq	#0,d1
		move.b	$19(a0),d1
		addi.w	#$B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	$2C(a0),d4
		bsr.w	loc_2A7A2
		move.w	8(a0),$2C(a0)
		move.w	$30(a0),d0
		bra.w	loc_2A7A8
; ===========================================================================
		nop	

loc_2A778:				
		jmp	DisplaySprite3
; ===========================================================================

loc_2A77E:				
		jmp	DisplaySprite
; ===========================================================================

loc_2A784:				
		jmp	DeleteObject
; ===========================================================================

loc_2A78A:				
		jmp	DeleteObject2
; ===========================================================================

loc_2A790:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2A796:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2A79C:				
		jmp	(CalcSine).l
; ===========================================================================

loc_2A7A2:				
		jmp	DetectPlatform
; ===========================================================================

loc_2A7A8:				
		jmp	MarkObjGone2
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Fan from OOZ
; ----------------------------------------------------------------------------

Sprite_2A7B0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2A7BE(pc,d0.w),d1
		jmp	off_2A7BE(pc,d1.w)
; ===========================================================================
off_2A7BE:	dc.w loc_2A7C4-off_2A7BE; 0 
		dc.w loc_2A802-off_2A7BE; 1
		dc.w loc_2A8FE-off_2A7BE; 2
; ===========================================================================

loc_2A7C4:				
		addq.b	#2,$24(a0)
		move.l	#Map_2AA12,4(a0)
		move.w	#$6403,2(a0)
		bsr.w	loc_2AB7E
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		tst.b	$28(a0)
		bpl.s	loc_2A802
		addq.b	#2,$24(a0)
		move.l	#Map_2AAC4,4(a0)
		bra.w	loc_2A8FE
; ===========================================================================

loc_2A802:				
					
		btst	#1,$28(a0)
		bne.s	loc_2A82A
		subq.w	#1,$30(a0)
		bpl.s	loc_2A82A
		move.w	#0,$34(a0)
		move.w	#$78,$30(a0) ; 'x'
		bchg	#0,$32(a0)
		beq.s	loc_2A82A
		move.w	#$B4,$30(a0)

loc_2A82A:				
		tst.b	$32(a0)
		beq.w	loc_2A84E
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A890
		cmpi.w	#$400,$34(a0)
		bcc.s	loc_2A890
		addi.w	#$2A,$34(a0) ; '*'
		move.b	$34(a0),$1E(a0)
		bra.s	loc_2A86A
; ===========================================================================

loc_2A84E:				
		lea	($FFFFB000).w,a1
		bsr.w	loc_2A894
		lea	($FFFFB040).w,a1
		bsr.w	loc_2A894
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A890
		move.b	#0,$1E(a0)

loc_2A86A:				
		addq.b	#1,$1B(a0)
		cmpi.b	#6,$1B(a0)
		bcs.s	loc_2A87C
		move.b	#0,$1B(a0)

loc_2A87C:				
		moveq	#0,d0
		btst	#0,$28(a0)
		beq.s	loc_2A888
		moveq	#5,d0

loc_2A888:				
		add.b	$1B(a0),d0
		move.b	d0,$1A(a0)

loc_2A890:				
		bra.w	loc_2AB78
; ===========================================================================

loc_2A894:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2A8FC
		tst.b	$2A(a1)
		bne.s	locret_2A8FC
		move.w	8(a1),d0
		sub.w	8(a0),d0
		btst	#0,$22(a0)
		bne.s	loc_2A8B4
		neg.w	d0

loc_2A8B4:				
		addi.w	#$50,d0	; 'P'
		cmpi.w	#$F0,d0	
		bcc.s	locret_2A8FC
		move.w	$C(a1),d1
		addi.w	#$60,d1	; '`'
		sub.w	$C(a0),d1
		bcs.s	locret_2A8FC
		cmpi.w	#$70,d1	; 'p'
		bcc.s	locret_2A8FC
		subi.w	#$50,d0	; 'P'
		bcc.s	loc_2A8DC
		not.w	d0
		add.w	d0,d0

loc_2A8DC:				
		addi.w	#$60,d0	; '`'
		btst	#0,$22(a0)
		bne.s	loc_2A8EA
		neg.w	d0

loc_2A8EA:				
		neg.b	d0
		asr.w	#4,d0
		btst	#0,$28(a0)
		beq.s	loc_2A8F8
		neg.w	d0

loc_2A8F8:				
		add.w	d0,8(a1)

locret_2A8FC:				
		rts	
; ===========================================================================

loc_2A8FE:				
					
		btst	#1,$28(a0)
		bne.s	loc_2A926
		subq.w	#1,$30(a0)
		bpl.s	loc_2A926
		move.w	#0,$34(a0)
		move.w	#$78,$30(a0) ; 'x'
		bchg	#0,$32(a0)
		beq.s	loc_2A926
		move.w	#$B4,$30(a0)

loc_2A926:				
		tst.b	$32(a0)
		beq.w	loc_2A94A
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A98C
		cmpi.w	#$400,$34(a0)
		bcc.s	loc_2A98C
		addi.w	#$2A,$34(a0) ; '*'
		move.b	$34(a0),$1E(a0)
		bra.s	loc_2A966
; ===========================================================================

loc_2A94A:				
		lea	($FFFFB000).w,a1
		bsr.w	loc_2A990
		lea	($FFFFB040).w,a1
		bsr.w	loc_2A990
		subq.b	#1,$1E(a0)
		bpl.s	loc_2A98C
		move.b	#0,$1E(a0)

loc_2A966:				
		addq.b	#1,$1B(a0)
		cmpi.b	#6,$1B(a0)
		bcs.s	loc_2A978
		move.b	#0,$1B(a0)

loc_2A978:				
		moveq	#0,d0
		btst	#0,$28(a0)
		beq.s	loc_2A984
		moveq	#5,d0

loc_2A984:				
		add.b	$1B(a0),d0
		move.b	d0,$1A(a0)

loc_2A98C:				
		bra.w	loc_2AB78
; ===========================================================================

loc_2A990:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2AA10
		tst.b	$2A(a1)
		bne.s	locret_2AA10
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$40,d0	; '@'
		cmpi.w	#$80,d0	
		bcc.s	locret_2AA10
		moveq	#0,d1
		move.b	($FFFFFE74).w,d1
		add.w	$C(a1),d1
		addi.w	#$60,d1	; '`'
		sub.w	$C(a0),d1
		bcs.s	locret_2AA10
		cmpi.w	#$90,d1	
		bcc.s	locret_2AA10
		subi.w	#$60,d1	; '`'
		bcs.s	loc_2A9D4
		not.w	d1
		add.w	d1,d1

loc_2A9D4:				
		addi.w	#$60,d1	; '`'
		neg.w	d1
		asr.w	#4,d1
		add.w	d1,$C(a1)
		bset	#1,$22(a1)
		move.w	#0,$12(a1)
		move.w	#1,$14(a1)
		tst.b	$27(a1)
		bne.s	locret_2AA10
		move.b	#1,$27(a1)
		move.b	#0,$1C(a1)
		move.b	#$7F,$2C(a1) ; ''
		move.b	#8,$2D(a1)

locret_2AA10:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2AA12:				
		dc.w word_2AA28-Map_2AA12; 0
		dc.w word_2AA42-Map_2AA12; 1
		dc.w word_2AA5C-Map_2AA12; 2
		dc.w word_2AA76-Map_2AA12; 3
		dc.w word_2AA90-Map_2AA12; 4
		dc.w word_2AAAA-Map_2AA12; 5
		dc.w word_2AA90-Map_2AA12; 6
		dc.w word_2AA76-Map_2AA12; 7
		dc.w word_2AA5C-Map_2AA12; 8
		dc.w word_2AA42-Map_2AA12; 9
		dc.w word_2AA28-Map_2AA12; 10
word_2AA28:	dc.w 3			
		dc.w $F302,    0,    0,$FFF4; 0
		dc.w $F005,    7,    3,$FFFC; 4
		dc.w	 5,$1007,$1003,$FFFC; 8
word_2AA42:	dc.w 3			
		dc.w $F502,$1000,$1000,$FFF4; 0
		dc.w $F005,    7,    3,$FFFC; 4
		dc.w	 5,$1007,$1003,$FFFC; 8
word_2AA5C:	dc.w 3			
		dc.w $F003,    3,    1,$FFF4; 0
		dc.w $F005,    7,    3,$FFFC; 4
		dc.w	 5,$1007,$1003,$FFFC; 8
word_2AA76:	dc.w 3			
		dc.w $F302,    0,    0,$FFF4; 0
		dc.w $F005,   $B,    5,$FFFC; 4
		dc.w	 5,$100B,$1005,$FFFC; 8
word_2AA90:	dc.w 3			
		dc.w $F502,$1000,$1000,$FFF4; 0
		dc.w $F005,   $B,    5,$FFFC; 4
		dc.w	 5,$100B,$1005,$FFFC; 8
word_2AAAA:	dc.w 3			
		dc.w $F003,    3,    1,$FFF4; 0
		dc.w $F005,   $B,    5,$FFFC; 4
		dc.w	 5,$100B,$1005,$FFFC; 8
Map_2AAC4:				
		dc.w $16
		dc.w   $30,  $4A,  $64,	 $7E; 0
		dc.w   $98,  $7E,  $64,	 $4A; 4
		dc.w   $30,  $16,    3,$F408; 8
		dc.w	$F,    7,$FFF3,$FC05; 12
		dc.w   $16,   $B,$FFF0,$FC05; 16
		dc.w  $816, $80B,    0,	   3; 20
		dc.w $F408, $80F, $807,$FFF5; 24
		dc.w $FC05,  $16,   $B,$FFF0; 28
		dc.w $FC05, $816, $80B,	   0; 32
		dc.w	 3,$F40C,  $12,	   9; 36
		dc.w $FFF0,$FC05,  $16,	  $B; 40
		dc.w $FFF0,$FC05, $816,	$80B; 44
		dc.w	 0,    3,$F408,	  $F; 48
		dc.w	 7,$FFF3,$FC05,	 $1A; 52
		dc.w	$D,$FFF0,$FC05,	$81A; 56
		dc.w  $80D,    0,    3,$F408; 60
		dc.w  $80F, $807,$FFF5,$FC05; 64
		dc.w   $1A,   $D,$FFF0,$FC05; 68
		dc.w  $81A, $80D,    0,	   3; 72
		dc.w $F40C,  $12,    9,$FFF0; 76
		dc.w $FC05,  $1A,   $D,$FFF0; 80
		dc.w $FC05, $81A, $80D,	   0; 84
; ===========================================================================
		nop	

loc_2AB78:				
		jmp	MarkObjGone
; ===========================================================================

loc_2AB7E:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Spring from CNZ that you hold	down jump on to	pull back further
; ----------------------------------------------------------------------------

Sprite_2AB84:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2ABCE(pc,d0.w),d1
		jsr	off_2ABCE(pc,d1.w)
		move.w	#$200,d0
		tst.w	(f_two_player).w
		beq.s	loc_2ABA0
		bra.w	loc_2B128
; ===========================================================================

loc_2ABA0:				
		move.w	8(a0),d1
		andi.w	#-$80,d1
		sub.w	(v_camera_x_pos_coarse).w,d1
		cmpi.w	#$280,d1
		bhi.w	loc_2ABB8 ; could be optimized to .s
		bra.w	loc_2B128
; ===========================================================================

loc_2ABB8:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_2ABCA
		bclr	#7,2(a2,d0.w)

loc_2ABCA:				
		bra.w	loc_2B12E
; ===========================================================================
off_2ABCE:	dc.w loc_2ABD4-off_2ABCE; 0 
		dc.w loc_2AC84-off_2ABCE; 1
		dc.w loc_2AE56-off_2ABCE; 2
; ===========================================================================

loc_2ABD4:				
		addq.b	#2,$24(a0)
		move.l	#Map_2B07E,4(a0)
		move.w	#$422,2(a0)
		tst.b	$28(a0)
		beq.s	loc_2ABFA
		move.l	#Map_2B0EC,4(a0)
		move.w	#$402,2(a0)

loc_2ABFA:				
		bsr.w	loc_2B134
		move.b	#4,1(a0)
		bset	#6,1(a0)
		move.b	#1,$B(a0)
		tst.b	$28(a0)
		beq.s	loc_2AC54
		addq.b	#2,$24(a0)
		move.b	#$20,$E(a0) ; ' '
		move.b	#$18,$19(a0)
		move.w	8(a0),$2E(a0)
		move.w	$C(a0),$34(a0)
		move.w	8(a0),d2
		move.w	$C(a0),d3
		addi.w	#0,d3
		move.b	#1,$F(a0)
		lea	$10(a0),a2
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#2,(a2)+
		bra.w	loc_2AE56
; ===========================================================================

loc_2AC54:				
		move.b	#$18,$E(a0)
		move.b	#$18,$19(a0)
		move.w	$C(a0),$34(a0)
		move.w	8(a0),d2
		move.w	$C(a0),d3
		addi.w	#$20,d3	; ' '
		move.b	#1,$F(a0)
		lea	$10(a0),a2
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#2,(a2)+

loc_2AC84:				
		move.b	#0,$3A(a0)
		move.w	$34(a0),d0
		add.w	$38(a0),d0
		move.w	d0,$C(a0)
		move.b	#2,$15(a0)
		cmpi.w	#$10,$38(a0)
		bcs.s	loc_2ACAA
		move.b	#3,$15(a0)

loc_2ACAA:				
		move.w	#$23,d1	; '#'
		move.w	#$20,d2	; ' '
		move.w	#$1D,d3
		move.w	8(a0),d4
		lea	$36(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold).w,d5
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_2AD26
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d5
		moveq	#4,d6
		bsr.s	loc_2AD26
		tst.w	$36(a0)
		beq.s	loc_2AD14
		tst.w	$38(a0)
		beq.s	locret_2AD24
		moveq	#0,d0
		cmpi.b	#1,$36(a0)
		bne.s	loc_2ACFA
		or.w	(v_joypad_hold).w,d0

loc_2ACFA:				
		cmpi.b	#1,$37(a0)
		bne.s	loc_2AD06
		or.w	(v_joypad2_hold_actual).w,d0

loc_2AD06:				
		andi.w	#$7000,d0
		bne.s	locret_2AD24
		move.w	#$202,$36(a0)
		rts	
; ===========================================================================

loc_2AD14:				
		move.b	#1,$B(a0)
		subq.w	#4,$38(a0)
		bcc.s	locret_2AD24
		clr.w	$38(a0)

locret_2AD24:				
		rts	
; ===========================================================================

loc_2AD26:				
		move.b	(a2),d0
		bne.s	loc_2AD7A

loc_2AD2A:				
		tst.w	(v_debug_active).w
		bne.s	locret_2AD78
		tst.w	$12(a1)
		bmi.s	locret_2AD78
		bsr.w	loc_2B13A
		btst	d6,$22(a0)
		beq.s	locret_2AD78
		move.b	#-$7F,$2A(a1)
		move.w	8(a0),8(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		move.w	#0,$14(a1)
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		addq.b	#1,(a2)

locret_2AD78:				
		rts	
; ===========================================================================

loc_2AD7A:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2AD78
		subq.b	#1,d0
		bne.w	loc_2AE0C
		tst.b	1(a1)
		bmi.s	loc_2ADB0
		bclr	d6,$22(a0)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.b	#0,(a2)
		rts	
; ===========================================================================

loc_2ADB0:				
		andi.w	#$7000,d5
		beq.s	loc_2ADFE
		tst.b	$3A(a0)
		bne.s	loc_2ADFE
		move.b	#1,$3A(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_2ADDA
		move.b	#3,$32(a0)
		cmpi.w	#$20,$38(a0) ; ' '
		beq.s	loc_2ADDA
		addq.w	#1,$38(a0)

loc_2ADDA:				
		subq.b	#1,$33(a0)
		bpl.s	loc_2ADF8
		move.w	$38(a0),d0
		subi.w	#$20,d0	; ' '
		neg.w	d0
		lsr.w	#1,d0
		move.b	d0,$33(a0)
		bchg	#2,$B(a0)
		bra.s	loc_2ADFE
; ===========================================================================

loc_2ADF8:				
		move.b	#1,$B(a0)

loc_2ADFE:				
		move.w	$C(a0),d0
		subi.w	#$2E,d0	; '.'
		move.w	d0,$C(a1)
		rts	
; ===========================================================================

loc_2AE0C:				
		move.b	#0,(a2)
		bclr	d6,$22(a0)
		beq.w	loc_2AD2A
		move.w	$38(a0),d0
		addi.w	#$10,d0
		lsl.w	#7,d0
		neg.w	d0
		move.w	d0,$12(a1)
		move.w	#0,$10(a1)
		move.w	#$800,$14(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.w	#$E2,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_2AE56:				
					
		move.b	#0,$3A(a0)
		move.w	$38(a0),d1
		lsr.w	#1,d1
		move.w	$2E(a0),d0
		sub.w	d1,d0
		move.w	d0,8(a0)
		move.w	$34(a0),d0
		add.w	d1,d0
		move.w	d0,$C(a0)
		move.b	#2,$15(a0)
		cmpi.w	#$10,$38(a0)
		bcs.s	loc_2AE8A
		move.b	#3,$15(a0)

loc_2AE8A:				
		move.w	#$23,d1	; '#'
		move.w	#8,d2
		move.w	#5,d3
		move.w	8(a0),d4
		lea	$36(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold).w,d5
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.s	loc_2AF06
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d5
		moveq	#4,d6
		bsr.s	loc_2AF06
		tst.w	$36(a0)
		beq.s	loc_2AEF4
		tst.w	$38(a0)
		beq.s	locret_2AF04
		moveq	#0,d0
		cmpi.b	#1,$36(a0)
		bne.s	loc_2AEDA
		or.w	(v_joypad_hold).w,d0

loc_2AEDA:				
		cmpi.b	#1,$37(a0)
		bne.s	loc_2AEE6
		or.w	(v_joypad2_hold_actual).w,d0

loc_2AEE6:				
		andi.w	#$7000,d0
		bne.s	locret_2AF04
		move.w	#$202,$36(a0)
		rts	
; ===========================================================================

loc_2AEF4:				
		move.b	#1,$B(a0)
		subq.w	#4,$38(a0)
		bcc.s	locret_2AF04
		clr.w	$38(a0)

locret_2AF04:				
		rts	
; ===========================================================================

loc_2AF06:				
		move.b	(a2),d0
		bne.s	loc_2AF7A
		tst.w	(v_debug_active).w
		bne.s	locret_2AF78
		tst.w	$12(a1)
		bmi.s	locret_2AF78
		bsr.w	loc_2B13A
		btst	d6,$22(a0)
		bne.s	loc_2AF2E
		move.b	d6,d0
		addq.b	#2,d0
		btst	d0,$22(a0)
		beq.s	locret_2AF78
		bset	d6,$22(a0)

loc_2AF2E:				
		move.b	#-$7F,$2A(a1)
		move.w	8(a0),8(a1)
		addi.w	#$13,8(a1)
		move.w	$C(a0),$C(a1)
		subi.w	#$13,$C(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		move.w	#0,$14(a1)
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		addq.b	#1,(a2)

locret_2AF78:				
		rts	
; ===========================================================================

loc_2AF7A:				
		cmpi.b	#4,$24(a1)
		bcc.s	locret_2AF78
		subq.b	#1,d0
		bne.w	loc_2B018
		tst.b	1(a1)
		bmi.s	loc_2AFB0
		bclr	d6,$22(a0)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.b	#0,(a2)
		rts	
; ===========================================================================

loc_2AFB0:				
		andi.w	#$7000,d5
		beq.s	loc_2AFFE
		tst.b	$3A(a0)
		bne.s	loc_2AFFE
		move.b	#1,$3A(a0)
		subq.b	#1,$32(a0)
		bpl.s	loc_2AFDA
		move.b	#3,$32(a0)
		cmpi.w	#$1C,$38(a0)
		beq.s	loc_2AFDA
		addq.w	#1,$38(a0)

loc_2AFDA:				
		subq.b	#1,$33(a0)
		bpl.s	loc_2AFF8
		move.w	$38(a0),d0
		subi.w	#$1C,d0
		neg.w	d0
		lsr.w	#1,d0
		move.b	d0,$33(a0)
		bchg	#2,$B(a0)
		bra.s	loc_2AFFE
; ===========================================================================

loc_2AFF8:				
		move.b	#1,$B(a0)

loc_2AFFE:				
		move.w	8(a0),d0
		addi.w	#$13,d0
		move.w	d0,8(a1)
		move.w	$C(a0),d0
		subi.w	#$13,d0

loc_2B012:
		move.w	d0,$C(a1)
		rts	
; ===========================================================================

loc_2B018:				
		move.b	#0,(a2)
		bclr	d6,$22(a0)

loc_2B020:
		beq.w	locret_2AF78
		move.w	$38(a0),d0
		addi.w	#4,d0
		lsl.w	#7,d0
		move.w	d0,$10(a1)
		neg.w	d0
		move.w	d0,$12(a1)
		move.w	#$800,$14(a1)
		bset	#1,$22(a1)

loc_2B044:
		bclr	#3,$22(a1)
		tst.b	$28(a0)
		bpl.s	loc_2B068
		neg.w	d0
		move.w	d0,$14(a1)
		bclr	#0,$22(a1)
		bclr	#1,$22(a1)
		move.b	#-$20,$26(a1)

loc_2B068:				
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.w	#$E2,d0	
		jmp	(PlaySound).l
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B07E:				
		dc.w word_2B08A-Map_2B07E; 0
		dc.w word_2B0AC-Map_2B07E; 1
		dc.w word_2B0B6-Map_2B07E; 2
		dc.w word_2B0D0-Map_2B07E; 3
		dc.w word_2B0E2-Map_2B07E; 4
		dc.w word_2B0E2-Map_2B07E; 5
word_2B08A:	dc.w 4			
		dc.w $C809,    0,    0,$FFF4; 0
		dc.w $D809,    6,    3,$FFF4; 4
		dc.w $E809,    6,    3,$FFF4; 8
		dc.w $F809,   $C,    6,$FFF4; 12
word_2B0AC:	dc.w 1			
		dc.w $E009,    0,    0,$FFF4; 0
word_2B0B6:	dc.w 3			
		dc.w $D009,    6,    3,$FFF4; 0
		dc.w $E009,    6,    3,$FFF4; 4
		dc.w $F009,   $C,    6,$FFF4; 8
word_2B0D0:	dc.w 2			
		dc.w $E009,    6,    3,$FFF4; 0
		dc.w $F009,   $C,    6,$FFF4; 4
word_2B0E2:	dc.w 1			
		dc.w $E009,$2000,$2000,$FFF4; 0
Map_2B0EC:				
		dc.w $C
		dc.w   $1E,  $28,  $28,	 $32; 0
		dc.w   $32,    2,$F00F,	   0; 4
		dc.w	 0,$FFF0,   $F,	 $10; 8
		dc.w	 8,$FFE0,    1,$F00F; 12
		dc.w	 0,    0,$FFF0,	   1; 16
		dc.w	$F,  $10,    8,$FFE0; 20
		dc.w	 1,$F00F,$2000,$2000; 24
		dc.w $FFF0		; 28
; ===========================================================================

loc_2B128:				
		jmp	DisplaySprite3
; ===========================================================================

loc_2B12E:				
		jmp	DeleteObject
; ===========================================================================

loc_2B134:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2B13A:				
		jmp	loc_1978E
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2B140:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2B152(pc,d0.w),d1
		jsr	off_2B152(pc,d1.w)
		bra.w	loc_2B504
; ===========================================================================
off_2B152:	dc.w loc_2B158-off_2B152; 0 
		dc.w loc_2B194-off_2B152; 1
		dc.w loc_2B312-off_2B152; 2
; ===========================================================================

loc_2B158:				
		addq.b	#2,$24(a0)
		move.l	#Map_2B45A,4(a0)
		move.w	#$43B2,2(a0)
		bsr.w	loc_2B510
		ori.b	#4,1(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)
		tst.b	$28(a0)
		beq.s	loc_2B194
		addq.b	#2,$24(a0)
		move.b	#2,$1C(a0)
		bra.w	loc_2B312
; ===========================================================================

loc_2B194:				
					
		tst.w	(v_debug_active).w
		bne.s	locret_2B208
		lea	(byte_2B3C6).l,a2
		move.b	$1A(a0),d0
		beq.s	loc_2B1B6
		lea	(byte_2B3EA).l,a2
		subq.b	#1,d0
		beq.s	loc_2B1B6
		lea	(byte_2B40E).l,a2

loc_2B1B6:				
		move.w	#$23,d1	; '#'
		move.w	#6,d2
		move.w	8(a0),d4
		bsr.w	loc_2B522
		lea	$36(a0),a3
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold).w,d5
		moveq	#3,d6
		bsr.s	loc_2B20A
		addq.w	#1,a3
		lea	($FFFFB040).w,a1
		move.w	(v_joypad2_hold_actual).w,d5
		moveq	#4,d6
		bsr.s	loc_2B20A
		tst.b	$38(a0)
		beq.s	loc_2B1FE
		clr.b	$38(a0)
		bsr.w	loc_2B290
		subq.w	#1,a3
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.w	loc_2B290

loc_2B1FE:				
		lea	(off_2B432).l,a1
		bra.w	loc_2B50A
; ===========================================================================

locret_2B208:				
		rts	
; ===========================================================================

loc_2B20A:				
		move.b	(a3),d0
		bne.s	loc_2B23C
		btst	d6,$22(a0)
		beq.s	locret_2B208
		move.b	#1,$2A(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		bset	#2,$22(a1)
		bne.s	loc_2B238
		addq.w	#5,$C(a1)

loc_2B238:				
		addq.b	#1,(a3)
		rts	
; ===========================================================================

loc_2B23C:				
		andi.w	#$70,d5	; 'p'
		bne.s	loc_2B288
		btst	d6,$22(a0)
		bne.s	loc_2B254
		move.b	#0,$2A(a1)
		move.b	#0,(a3)
		rts	
; ===========================================================================

loc_2B254:				
		moveq	#0,d1
		move.b	$1A(a0),d1
		subq.w	#1,d1
		bset	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	loc_2B272
		neg.w	d1
		bclr	#0,$22(a1)

loc_2B272:				
		add.w	d1,8(a1)
		lsl.w	#8,d1
		move.w	d1,$10(a1)
		move.w	d1,$14(a1)
		move.w	#0,$12(a1)
		rts	
; ===========================================================================

loc_2B288:				
		move.b	#1,$38(a0)
		rts	
; ===========================================================================

loc_2B290:				
		bclr	d6,$22(a0)
		beq.w	locret_2B208
		move.w	8(a1),d0
		sub.w	8(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_2B2AA
		neg.w	d0

loc_2B2AA:				
		addi.w	#$23,d0	; '#'
		move.w	d0,d2
		cmpi.w	#$40,d2	; '@'
		bcs.s	loc_2B2BA
		move.w	#$40,d2	; '@'

loc_2B2BA:				
		lsl.w	#5,d2
		addi.w	#$800,d2
		neg.w	d2
		asr.w	#2,d0
		addi.w	#$40,d0	; '@'
		bsr.w	loc_2B516
		muls.w	d2,d0
		muls.w	d2,d1
		asr.l	#8,d0
		asr.l	#8,d1
		move.w	d0,$12(a1)
		btst	#0,$22(a0)
		beq.s	loc_2B2E2
		neg.w	d1

loc_2B2E2:				
		move.w	d1,$10(a1)
		bset	#1,$22(a1)
		bclr	#3,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$2A(a1)
		move.b	#1,$1C(a0)
		move.b	#0,(a3)
		move.w	#$E3,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_2B312:				
					
		move.w	#$13,d1
		move.w	#$18,d2
		move.w	#$19,d3
		move.w	8(a0),d4
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_2B51C
		btst	#5,$22(a0)
		beq.s	loc_2B33A
		bsr.s	loc_2B35C

loc_2B33A:				
		movem.l	(sp)+,d1-d4
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_2B51C
		btst	#6,$22(a0)
		beq.s	loc_2B352
		bsr.s	loc_2B35C

loc_2B352:				
		lea	(off_2B432).l,a1
		bra.w	loc_2B50A
; ===========================================================================

loc_2B35C:				
		move.w	#$300,$1C(a0)
		move.w	#-$1000,$10(a1)
		addq.w	#8,8(a1)
		bset	#0,$22(a1)
		move.w	8(a0),d0
		sub.w	8(a1),d0
		bcc.s	loc_2B392
		bclr	#0,$22(a1)
		subi.w	#$10,8(a1)
		neg.w	$10(a1)
		move.w	#$400,$1C(a0)

loc_2B392:				
		move.w	#$F,$2E(a1)
		move.w	$10(a1),$14(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		bset	#2,$22(a1)
		bne.s	loc_2B3BC
		addq.w	#5,$C(a1)

loc_2B3BC:				
		move.w	#$E3,d0	
		jmp	(PlaySound).l
; ===========================================================================
byte_2B3C6:	dc.b   7,  7,  7,  7,  7,  7,  7,  8,  9, $A, $B, $A,  9,  8,  7,  6; 0
					
		dc.b   5,  4,  3,  2,  1,  0,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6; 16
		dc.b $F5,$F4,$F3,$F2	; 32
byte_2B3EA:	dc.b   6,  6,  6,  6,  6,  6,  7,  8,  9,  9,  9,  9,  9,  9,  8,  8; 0
					
		dc.b   8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  4,  4; 16
		dc.b   4,  4,  4,  4	; 32
byte_2B40E:	dc.b   5,  5,  5,  5,  5,  6,  7,  8,  9, $A, $B, $B, $C, $C, $D, $D; 0
					
		dc.b  $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$11,$11,$10,$10,$10,$10; 16
		dc.b $10,$10,$10,$10	; 32
off_2B432:	dc.w byte_2B43C-off_2B432; 0 
		dc.w byte_2B43F-off_2B432; 1
		dc.w byte_2B445-off_2B432; 2
		dc.w byte_2B448-off_2B432; 3
		dc.w byte_2B451-off_2B432; 4
byte_2B43C:	dc.b  $F,  0,$FF	; 0 
byte_2B43F:	dc.b   3,  1,  2,  1,$FD,  0; 0	
byte_2B445:	dc.b  $F,  4,$FF	; 0 
byte_2B448:	dc.b   0,  5,  4,  3,  3,  3,  3,$FD,  2; 0 
byte_2B451:	dc.b   0,  3,  4,  5,  5,  5,  5,$FD,  2; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B45A:				
		dc.w word_2B466-Map_2B45A; 0
		dc.w word_2B480-Map_2B45A; 1
		dc.w word_2B492-Map_2B45A; 2
		dc.w word_2B4AC-Map_2B45A; 3
		dc.w word_2B4C6-Map_2B45A; 4
		dc.w word_2B4E8-Map_2B45A; 5
word_2B466:	dc.w 3			
		dc.w $F70B,   $C,    6,$FFE7; 0
		dc.w $FE01,  $18,   $C,$FFFF; 4
		dc.w  $105,  $1A,   $D,	   7; 8
word_2B480:	dc.w 2			
		dc.w $F80D,    0,    0,$FFE8; 0
		dc.w $F805,    8,    4,	   8; 4
word_2B492:	dc.w 3			
		dc.w $E90B,$100C,$1006,$FFE7; 0
		dc.w $F201,$1018,$100C,$FFFF; 4
		dc.w $EF05,$101A,$100D,	   7; 8
word_2B4AC:	dc.w 3			
		dc.w $E709,  $24,  $12,$FFF1; 0
		dc.w $F709,  $2A,  $15,$FFEF; 4
		dc.w  $705,  $30,  $18,$FFEF; 8
word_2B4C6:	dc.w 4			
		dc.w $E803,  $1E,   $F,$FFF8; 0
		dc.w $E803, $81E, $80F,	   0; 4
		dc.w  $801,  $22,  $11,$FFF8; 8
		dc.w  $801, $822, $811,	   0; 12
word_2B4E8:	dc.w 3			
word_2B4EA:	dc.w $E709, $824, $812,$FFF7; 0
		dc.w $F709, $82A, $815,$FFF9; 4
		dc.w  $705, $830, $818,	   1; 8
; ===========================================================================
		nop	

loc_2B504:				
		jmp	MarkObjGone
; ===========================================================================

loc_2B50A:				
		jmp	AnimateSprite
; ===========================================================================

loc_2B510:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2B516:				
		jmp	(CalcSine).l
; ===========================================================================

loc_2B51C:				
		jmp	loc_1978E
; ===========================================================================

loc_2B522:				
		jmp	loc_197D0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Flashing blocks in CNZ that appear and disappear in a	rectangular shape that
; you can walk across
; ----------------------------------------------------------------------------

Sprite_2B528:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2B536(pc,d0.w),d1
		jmp	off_2B536(pc,d1.w)
; ===========================================================================
off_2B536:	dc.w loc_2B53A-off_2B536; 0 
		dc.w loc_2B57E-off_2B536; 1
; ===========================================================================

loc_2B53A:				
		addq.b	#2,$24(a0)
		move.l	#Map_2B694,4(a0)
		move.w	#$437C,2(a0)
		bsr.w	loc_2B83A
		ori.b	#4,1(a0)
		move.b	#8,$19(a0)
		move.b	#4,$18(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		move.w	d0,$38(a0)
		bsr.w	loc_2B60C

loc_2B57E:				
		tst.w	$38(a0)
		beq.s	loc_2B58C
		subq.w	#1,$38(a0)
		bra.w	loc_2B834
; ===========================================================================

loc_2B58C:				
		subq.w	#1,$3A(a0)
		bpl.s	loc_2B5EC
		move.w	#$F,$3A(a0)
		addq.b	#1,$1A(a0)

loc_2B59C:
		andi.b	#$F,$1A(a0)
		bne.s	loc_2B5EA
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		move.w	d0,$38(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_2B5E2
		bclr	#3,$22(a0)
		beq.s	loc_2B5CE
		bclr	#3,($FFFFB022).w
		bset	#1,($FFFFB022).w

loc_2B5CE:				
		bclr	#4,$22(a0)
		beq.s	loc_2B5E2
		bclr	#3,($FFFFB062).w
		bset	#1,($FFFFB062).w

loc_2B5E2:				
		move.w	$30(a0),8(a0)
		bra.s	loc_2B60C
; ===========================================================================

loc_2B5EA:				
		bsr.s	loc_2B60C

loc_2B5EC:				
		move.w	$34(a0),d1
		addi.w	#$B,d1
		move.w	$36(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	8(a0),d4
		bsr.w	loc_2B840
		move.w	$30(a0),d0
		bra.w	loc_2B846
; ===========================================================================

loc_2B60C:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		add.w	d0,d0
		add.w	d0,d0
		lea	byte_2B654(pc,d0.w),a1
		move.b	(a1)+,d0
		ext.w	d0
		btst	#0,$22(a0)
		beq.s	loc_2B628
		neg.w	d0

loc_2B628:				
		add.w	$30(a0),d0
		move.w	d0,8(a0)
		move.b	(a1)+,d0
		ext.w	d0
		add.w	$32(a0),d0
		move.w	d0,$C(a0)
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d3
		move.b	(a1)+,d1
		move.b	(a1)+,d2
		move.w	d1,$34(a0)
		move.b	d1,$19(a0)
		move.w	d2,$36(a0)
		rts	
; ===========================================================================
byte_2B654:	dc.b $D8,$18,  8,  8,$D8,$10,  8,$10,$D8,  8,  8,$18,$D8,  0,  8,$20; 0
		dc.b $E0,  0,$10,$20,$E8,$F8,$18,$18,$F0,$F0,$20,$10,$F8,$E8,$28,  8; 16
		dc.b   8,$E8,$28,  8,$10,$F0,$20,$10,$18,$F8,$18,$18,$20,  0,$10,$20; 32
		dc.b $28,  0,  8,$20,$28,  8,  8,$18,$28,$10,  8,$10,$28,$18,  8,  8; 48
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B694:				
		dc.w word_2B6B4-Map_2B694; 0
		dc.w word_2B6BE-Map_2B694; 1
		dc.w word_2B6D0-Map_2B694; 2
		dc.w word_2B6EA-Map_2B694; 3
		dc.w word_2B70C-Map_2B694; 4
		dc.w word_2B736-Map_2B694; 5
		dc.w word_2B760-Map_2B694; 6
		dc.w word_2B78A-Map_2B694; 7
		dc.w word_2B78A-Map_2B694; 8
		dc.w word_2B7B4-Map_2B694; 9
		dc.w word_2B7DE-Map_2B694; 10
		dc.w word_2B808-Map_2B694; 11
		dc.w word_2B6EA-Map_2B694; 12
		dc.w word_2B6D0-Map_2B694; 13
		dc.w word_2B6BE-Map_2B694; 14
		dc.w word_2B6B4-Map_2B694; 15
word_2B6B4:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_2B6BE:	dc.w 2			
		dc.w $F005,    0,    0,$FFF8; 0
		dc.w	 5,    0,    0,$FFF8; 4
word_2B6D0:	dc.w 3			
word_2B6D2:	dc.w $E805,    0,    0,$FFF8; 0
		dc.w $F805,    0,    0,$FFF8; 4
		dc.w  $805,    0,    0,$FFF8; 8
word_2B6EA:	dc.w 4			
		dc.w $E005,    0,    0,$FFF8; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
		dc.w $1005,    0,    0,$FFF8; 12
word_2B70C:	dc.w 5			
word_2B70E:	dc.w $E005,    0,    0,	   0; 0
		dc.w $E005,    0,    0,$FFF0; 4
		dc.w $F005,    0,    0,$FFF0; 8
		dc.w	 5,    0,    0,$FFF0; 12
		dc.w $1005,    0,    0,$FFF0; 16
word_2B736:	dc.w 5			
word_2B738:	dc.w $E805,    0,    0,	   8; 0
		dc.w $E805,    0,    0,$FFF8; 4
		dc.w $E805,    0,    0,$FFE8; 8
		dc.w $F805,    0,    0,$FFE8; 12
		dc.w  $805,    0,    0,$FFE8; 16
word_2B760:	dc.w 5			
word_2B762:	dc.w $F005,    0,    0,	 $10; 0
		dc.w $F005,    0,    0,	   0; 4
		dc.w $F005,    0,    0,$FFF0; 8
		dc.w $F005,    0,    0,$FFE0; 12
		dc.w	 5,    0,    0,$FFE0; 16
word_2B78A:	dc.w 5			
word_2B78C:	dc.w $F805,    0,    0,	 $18; 0
		dc.w $F805,    0,    0,	   8; 4
		dc.w $F805,    0,    0,$FFF8; 8
		dc.w $F805,    0,    0,$FFE8; 12
		dc.w $F805,    0,    0,$FFD8; 16
word_2B7B4:	dc.w 5			
		dc.w	 5,    0,    0,	 $10; 0
		dc.w $F005,    0,    0,	 $10; 4
		dc.w $F005,    0,    0,	   0; 8
		dc.w $F005,    0,    0,$FFF0; 12
		dc.w $F005,    0,    0,$FFE0; 16
word_2B7DE:	dc.w 5			
		dc.w  $805,    0,    0,	   8; 0
		dc.w $F805,    0,    0,	   8; 4
		dc.w $E805,    0,    0,	   8; 8
		dc.w $E805,    0,    0,$FFF8; 12
		dc.w $E805,    0,    0,$FFE8; 16
word_2B808:	dc.w 5			
		dc.w $1005,    0,    0,	   0; 0
		dc.w	 5,    0,    0,	   0; 4
		dc.w $F005,    0,    0,	   0; 8
		dc.w $E005,    0,    0,	   0; 12
		dc.w $E005,    0,    0,$FFF0; 16
; ===========================================================================
		nop	

loc_2B834:				
		jmp	MarkObjGone3
; ===========================================================================

loc_2B83A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2B840:				
		jmp	SolidObject
; ===========================================================================

loc_2B846:				
		jmp	MarkObjGone2
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2B84C:				
		moveq	#0,d1
		move.w	$38(a0),d1
		swap	d1
		move.l	$30(a0),d0
		sub.l	d1,d0
		asr.l	#4,d0
		sub.l	d0,$30(a0)
		move.w	$30(a0),8(a0)
		moveq	#0,d1
		move.w	$3A(a0),d1
		swap	d1
		move.l	$34(a0),d0
		sub.l	d1,d0
		asr.l	#4,d0
		sub.l	d0,$34(a0)
		move.w	$34(a0),$C(a0)
		subq.w	#1,$3C(a0)
		bne.w	loc_2B8E0
		movea.l	$2A(a0),a1
		subq.w	#1,(a1)
		cmpi.w	#5,(v_bonus_count_3).w
		bcs.s	loc_2B8A4
		clr.w	(v_bonus_count_3).w
		move.w	#$A6,d0	
		jsr	(PlaySound2).l

loc_2B8A4:				
		tst.b	$3F(a0)
		beq.s	loc_2B8C0
		tst.w	(v_rings_p2).w
		beq.s	loc_2B8BA
		subq.w	#1,(v_rings_p2).w
		ori.b	#-$7F,(v_hud_rings_update_p2).w

loc_2B8BA:				
		tst.w	(f_two_player).w
		bne.s	loc_2B8D0

loc_2B8C0:				
		tst.w	(v_rings).w
		beq.s	loc_2B8D0
		subq.w	#1,(v_rings).w
		ori.b	#-$7F,(v_hud_rings_update).w

loc_2B8D0:				
		bra.w	loc_2B8E6
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B8D4:				
		dc.w word_2B8D6-Map_2B8D4
word_2B8D6:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
; ===========================================================================

loc_2B8E0:				
		jmp	DisplaySprite
; ===========================================================================

loc_2B8E6:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Big block from CNZ that moves	back and fourth
; ----------------------------------------------------------------------------

Sprite_2B8EC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2B8FA(pc,d0.w),d1
		jmp	off_2B8FA(pc,d1.w)
; ===========================================================================
off_2B8FA:	dc.w loc_2B8FE-off_2B8FA; 0 
		dc.w loc_2B96E-off_2B8FA; 1
; ===========================================================================

loc_2B8FE:				
		addq.b	#2,$24(a0)
		move.l	#Map_2B9CA,4(a0)
		move.w	#$436C,2(a0)
		bsr.w	loc_2B9F0
		move.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#4,$18(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$32(a0)
		move.w	#-$8000,$A(a0)
		move.w	#-$8000,$E(a0)
		tst.b	$28(a0)
		bne.s	loc_2B95A
		subi.w	#$60,8(a0) ; '`'
		btst	#0,$22(a0)
		beq.s	loc_2B96E
		addi.w	#$C0,8(a0)
		bra.s	loc_2B96E
; ===========================================================================

loc_2B95A:				
		subi.w	#$60,$C(a0) ; '`'
		btst	#1,$22(a0)
		beq.s	loc_2B96E
		addi.w	#$C0,$C(a0)

loc_2B96E:				
		move.w	8(a0),-(sp)
		moveq	#0,d0
		move.b	$28(a0),d0
		move.w	off_2B99E(pc,d0.w),d1
		jsr	off_2B99E(pc,d1.w)
		bsr.w	loc_2BA02
		move.w	#$2B,d1	; '+'
		move.w	#$20,d2	; ' '
		move.w	#$21,d3	; '!'
		move.w	(sp)+,d4
		bsr.w	loc_2B9F6
		move.w	$30(a0),d0
		bra.w	loc_2B9FC
; ===========================================================================
off_2B99E:	dc.w loc_2B9A2-off_2B99E; 0 
		dc.w loc_2B9B6-off_2B99E; 1
; ===========================================================================

loc_2B9A2:				
		moveq	#4,d1
		move.w	$30(a0),d0
		cmp.w	8(a0),d0
		bhi.s	loc_2B9B0
		neg.w	d1

loc_2B9B0:				
		add.w	d1,$10(a0)
		rts	
; ===========================================================================

loc_2B9B6:				
		moveq	#4,d1
		move.w	$32(a0),d0
		cmp.w	$C(a0),d0
		bhi.s	loc_2B9C4
		neg.w	d1

loc_2B9C4:				
		add.w	d1,$12(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2B9CA:				
		dc.w word_2B9CC-Map_2B9CA
word_2B9CC:	dc.w 4			
		dc.w $E00F,    0,    0,$FFE0; 0
		dc.w $E00F, $800, $800,	   0; 4
		dc.w	$F,$1000,$1000,$FFE0; 8
		dc.w	$F,$1800,$1800,	   0; 12
; ===========================================================================
		nop	

loc_2B9F0:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2B9F6:				
		jmp	SolidObject
; ===========================================================================

loc_2B9FC:				
		jmp	MarkObjGone2
; ===========================================================================

loc_2BA02:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Elevator from	CNZ
; ----------------------------------------------------------------------------

Sprite_2BA08:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2BA16(pc,d0.w),d1
		jmp	off_2BA16(pc,d1.w)
; ===========================================================================
off_2BA16:	dc.w loc_2BA1A-off_2BA16; 0 
		dc.w loc_2BA68-off_2BA16; 1
; ===========================================================================

loc_2BA1A:				
		addq.b	#2,$24(a0)
		move.l	#Map_2BB40,4(a0)
		move.w	#$4384,2(a0)
		bsr.w	loc_2BB5A
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),$32(a0)
		move.w	#-$8000,$E(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		sub.w	d0,$C(a0)
		btst	#0,$22(a0)
		beq.s	loc_2BA68
		add.w	d0,d0
		add.w	d0,$C(a0)

loc_2BA68:				
					
		bsr.w	loc_2BB66
		move.w	$34(a0),d0
		move.w	off_2BA94(pc,d0.w),d1
		jsr	off_2BA94(pc,d1.w)
		cmpi.w	#6,$34(a0)
		bcc.s	loc_2BA90
		move.w	#$10,d1
		move.w	#9,d3
		move.w	8(a0),d4
		bsr.w	loc_2BB60

loc_2BA90:				
		bra.w	loc_2BB54
; ===========================================================================
off_2BA94:	dc.w loc_2BA9C-off_2BA94; 0 
		dc.w loc_2BAB6-off_2BA94; 1
		dc.w loc_2BAEE-off_2BA94; 2
		dc.w loc_2BB08-off_2BA94; 3
; ===========================================================================

loc_2BA9C:				
		move.b	$22(a0),d0
		andi.w	#$18,d0
		beq.s	locret_2BAB4
		move.w	#$D6,d0	
		jsr	(PlaySound).l
		addq.w	#2,$34(a0)

locret_2BAB4:				
		rts	
; ===========================================================================

loc_2BAB6:				
		moveq	#8,d1
		move.w	$32(a0),d0
		cmp.w	$C(a0),d0
		bcc.s	loc_2BAC4
		neg.w	d1

loc_2BAC4:				
		add.w	d1,$12(a0)
		bne.s	locret_2BAEC
		addq.w	#2,$34(a0)
		move.w	d0,$C(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		sub.w	d0,$C(a0)
		btst	#0,$22(a0)
		bne.s	locret_2BAEC
		add.w	d0,d0
		add.w	d0,$C(a0)

locret_2BAEC:				
		rts	
; ===========================================================================

loc_2BAEE:				
		move.b	$22(a0),d0
		andi.w	#$18,d0
		bne.s	locret_2BB06
		move.w	#$D6,d0	
		jsr	(PlaySound).l
		addq.w	#2,$34(a0)

locret_2BB06:				
		rts	
; ===========================================================================

loc_2BB08:				
		moveq	#8,d1
		move.w	$32(a0),d0
		cmp.w	$C(a0),d0
		bcc.s	loc_2BB16
		neg.w	d1

loc_2BB16:				
		add.w	d1,$12(a0)
		bne.s	locret_2BB3E
		clr.w	$34(a0)
		move.w	d0,$C(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#2,d0
		sub.w	d0,$C(a0)
		btst	#0,$22(a0)
		beq.s	locret_2BB3E
		add.w	d0,d0
		add.w	d0,$C(a0)

locret_2BB3E:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2BB40:				
		dc.w word_2BB42-Map_2BB40
word_2BB42:	dc.w 2			
		dc.w $F805,    0,    0,$FFF0; 0
		dc.w $F805, $800, $800,	   0; 4
; ===========================================================================

loc_2BB54:				
		jmp	MarkObjGone
; ===========================================================================

loc_2BB5A:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2BB60:				
		jmp	loc_19D3A
; ===========================================================================

loc_2BB66:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Pokey	that gives out points from CNZ
; ----------------------------------------------------------------------------

Sprite_2BB6C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2BB7A(pc,d0.w),d1
		jmp	off_2BB7A(pc,d1.w)
; ===========================================================================
off_2BB7A:	dc.w loc_2BB7E-off_2BB7A; 0 
		dc.w loc_2BBA6-off_2BB7A; 1
; ===========================================================================

loc_2BB7E:				
		addq.b	#2,$24(a0)
		move.l	#Map_2BEBC,4(a0)
		move.w	#$388,2(a0)
		bsr.w	loc_2C434
		move.b	#4,1(a0)
		move.b	#$18,$19(a0)
		move.b	#1,$18(a0)

loc_2BBA6:				
		move.w	#$23,d1	; '#'
		move.w	#$10,d2
		move.w	#$11,d3
		move.w	8(a0),d4
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	loc_2BBE8
		movem.l	(sp)+,d1-d4
		lea	$34(a0),a2
		lea	($FFFFB040).w,a1
		moveq	#4,d6
		bsr.w	loc_2BBE8
		lea	(off_2BEB0).l,a1
		bsr.w	loc_2C428
		bra.w	loc_2C422
; ===========================================================================

loc_2BBE8:				
		move.w	(a2),d0
		move.w	off_2BBF2(pc,d0.w),d0
		jmp	off_2BBF2(pc,d0.w)
; ===========================================================================
off_2BBF2:	dc.w loc_2BBF8-off_2BBF2; 0 
		dc.w loc_2BDF8-off_2BBF2; 1
		dc.w loc_2BE9C-off_2BBF2; 2
; ===========================================================================

loc_2BBF8:				
		tst.b	$2A(a1)
		bne.w	locret_2BC84
		tst.b	$28(a0)
		beq.s	loc_2BC0C
		tst.w	($FFFFFF4C).w
		bne.s	locret_2BC84

loc_2BC0C:				
		bsr.w	loc_2C440
		tst.w	d4
		bpl.s	locret_2BC84
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#0,$10(a1)
		move.w	#0,$12(a1)
		move.w	#0,$14(a1)
		move.b	#-$7F,$2A(a1)
		bset	#2,$22(a1)
		move.b	#$E,$16(a1)
		move.b	#7,$17(a1)
		move.b	#2,$1C(a1)
		move.b	#1,$1C(a0)
		addq.w	#2,(a2)+
		move.w	#$78,(a2) ; 'x'
		move.w	a1,$3E(a0)
		tst.b	$28(a0)
		beq.s	locret_2BC84
		cmpi.b	#$18,($FFFFFF4E).w
		bne.s	locret_2BC84
		move.b	#8,($FFFFFF4E).w
		clr.w	$2E(a0)
		move.w	#-1,($FFFFFF4C).w
		move.w	#-1,$2A(a0)

locret_2BC84:				
		rts	
; ===========================================================================

loc_2BC86:				
		move.w	(v_slot_machine_reward).w,d0
		bpl.w	loc_2BD4E
		tst.w	$2A(a0)
		bpl.s	loc_2BC9A
		move.w	#$64,$2A(a0) ; 'd'

loc_2BC9A:				
		tst.w	$2A(a0)
		beq.w	loc_2BD40
		btst	#0,($FFFFFE05).w
		beq.w	loc_2BD48
		cmpi.w	#$10,$2C(a0)
		bcc.w	loc_2BD48
		bsr.w	loc_2C41C
		bne.w	loc_2BD48
		_move.b	#-$2D,0(a1)
		move.l	#Map_2B8D4,4(a1)
		move.w	#$380,2(a1)
		bsr.w	loc_2C42E
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.w	#$1E,$3C(a1)
		move.w	$2E(a0),$2E(a1)
		addi.w	#$90,$2E(a0)
		move.w	8(a0),$38(a1)
		move.w	$C(a0),$3A(a1)
		move.w	$2E(a1),d0
		bsr.w	loc_2C43A
		asr.w	#1,d1
		add.w	$38(a1),d1
		move.w	d1,$30(a1)
		move.w	d1,8(a1)
		asr.w	#1,d0
		add.w	$3A(a1),d0
		move.w	d0,$34(a1)
		move.w	d0,$C(a1)
		lea	$2C(a0),a2
		move.l	a2,$2A(a1)
		move.w	$3E(a0),$3E(a1)
		addq.w	#1,$2C(a0)
		subq.w	#1,$2A(a0)

loc_2BD40:				
		tst.w	$2C(a0)
		beq.w	loc_2BE2E

loc_2BD48:				
		addq.w	#1,(v_bonus_count_3).w
		rts	
; ===========================================================================

loc_2BD4E:				
		beq.w	loc_2BDF0
		btst	#0,($FFFFFE05).w
		beq.w	locret_2BDF6
		cmpi.w	#$10,$2C(a0)
		bcc.w	locret_2BDF6
		bsr.w	loc_2C41C
		bne.w	locret_2BDF6
		_move.b	#-$24,0(a1)
		move.l	#Map_12382,4(a1)
		move.w	#$26BC,2(a1)
		bsr.w	loc_2C42E
		move.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#8,$19(a1)
		move.w	#$1A,$3C(a1)
		move.w	$2E(a0),$2E(a1)
		addi.w	#$89,$2E(a0)
		move.w	8(a0),$38(a1)
		move.w	$C(a0),$3A(a1)
		move.w	$2E(a1),d0
		bsr.w	loc_2C43A
		asr.w	#1,d1
		add.w	$38(a1),d1
		move.w	d1,$30(a1)
		move.w	d1,8(a1)
		asr.w	#1,d0
		add.w	$3A(a1),d0
		move.w	d0,$34(a1)
		move.w	d0,$C(a1)
		lea	$2C(a0),a2
		move.l	a2,$2A(a1)
		move.w	$3E(a0),$3E(a1)
		addq.w	#1,$2C(a0)
		subq.w	#1,(v_slot_machine_reward).w

loc_2BDF0:				
		tst.w	$2C(a0)
		beq.s	loc_2BE2E

locret_2BDF6:				
		rts	
; ===========================================================================

loc_2BDF8:				
		tst.b	1(a0)
		bpl.s	loc_2BE2E
		tst.b	$28(a0)
		beq.s	loc_2BE28
		move.w	a1,$3E(a0)
		cmpi.b	#$18,($FFFFFF4E).w
		beq.w	loc_2BC86
		move.b	($FFFFFE0F).w,d0
		andi.w	#$F,d0
		bne.s	locret_2BE26
		move.w	#$C0,d0	
		jsr	(PlaySound).l

locret_2BE26:				
		rts	
; ===========================================================================

loc_2BE28:				
		subq.w	#1,2(a2)
		bpl.s	loc_2BE5E

loc_2BE2E:				
		move.w	#0,$2C(a0)
		move.b	#0,$1C(a0)
		move.b	#0,$2A(a1)
		bclr	d6,$22(a0)
		bclr	#3,$22(a1)
		bset	#1,$22(a1)
		move.w	#$400,$12(a1)
		addq.w	#2,(a2)+
		move.w	#$1E,(a2)
		rts	
; ===========================================================================

loc_2BE5E:				
		move.w	2(a2),d0
		andi.w	#$F,d0
		bne.s	locret_2BE9A
		move.w	#$C0,d0	
		jsr	(PlaySound).l
		moveq	#$A,d0
		movea.w	a1,a3
		jsr	sub_40D42
		bsr.w	loc_2C41C
		bne.s	locret_2BE9A
		_move.b	#$29,0(a1) ; ')'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#0,$1A(a1)

locret_2BE9A:				
		rts	
; ===========================================================================

loc_2BE9C:				
		subq.w	#1,2(a2)
		bpl.s	locret_2BEAE
		clr.w	(a2)
		tst.b	$28(a0)
		beq.s	locret_2BEAE
		clr.w	($FFFFFF4C).w

locret_2BEAE:				
		rts	
; ===========================================================================
off_2BEB0:	dc.w byte_2BEB4-off_2BEB0; 0 
		dc.w byte_2BEB7-off_2BEB0; 1
byte_2BEB4:	dc.b  $F,  0,$FF	; 0 
byte_2BEB7:	dc.b   1,  1,  0,$FF,  0; 0 
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Map_2BEBC:				
		dc.w byte_2BEC0-Map_2BEBC; 0
		dc.w byte_2BEF2-Map_2BEBC; 1
byte_2BEC0:	dc.b   0,  6,$EC,  9,  0,  0,  0,  0,$FF,$E8,$EC,  9,  8,  0,  8,  0; 0
					
		dc.b   0,  0,$FC,  9,  0,  0,  0,  0,$FF,$E8,$FC,  9,  8,  0,  8,  0; 16
		dc.b   0,  0, $C,  9,  0,  0,  0,  0,$FF,$E8, $C,  9,  8,  0,  8,  0; 32
		dc.b   0,  0		; 48
byte_2BEF2:	dc.b   0,  6,$EC,  9,$20,  6,$20,  3,$FF,$E8,$EC,  9,$28,  6,$28,  3; 0
					
		dc.b   0,  0,$FC,  9,$20,  6,$20,  3,$FF,$E8,$FC,  9,$28,  6,$28,  3; 16
		dc.b   0,  0, $C,  9,$20,  6,$20,  3,$FF,$E8, $C,  9,$28,  6,$28,  3; 32
		dc.b   0,  0		; 48
; ===========================================================================

loc_2BF24:				
		lea	($FFFFFF4E).w,a4
		moveq	#0,d0
		_move.b	0(a4),d0
		jmp	loc_2BF32(pc,d0.w)
; ===========================================================================

loc_2BF32:
		bra.w	loc_2BF4C
; ===========================================================================
		bra.w	loc_2BF9A
; ===========================================================================
		bra.w	loc_2BFBA
; ===========================================================================
		bra.w	loc_2C070
; ===========================================================================
		bra.w	loc_2C0A8
; ===========================================================================
		bra.w	loc_2C1EE
; ===========================================================================
		rts	
; ===========================================================================

loc_2BF4C:				
		movea.l	a4,a1
		moveq	#8,d0

loc_2BF50:				
		clr.w	(a1)+
		dbf	d0,loc_2BF50
		move.b	($FFFFFE0F).w,d0
		move.b	d0,6(a4)
		ror.b	#3,d0
		move.b	d0,$A(a4)
		ror.b	#3,d0
		move.b	d0,$E(a4)
		move.b	#8,7(a4)
		move.b	#8,$B(a4)
		move.b	#8,$F(a4)
		move.b	#8,8(a4)
		move.b	#8,$C(a4)
		move.b	#8,$10(a4)
		move.b	#1,1(a4)
		_addq.b	#4,0(a4)
		rts	
; ===========================================================================

loc_2BF9A:				
		bsr.w	loc_2C20A
		tst.b	1(a4)
		beq.s	loc_2BFA6
		rts	
; ===========================================================================

loc_2BFA6:				
		_move.b	#$18,0(a4)
		clr.w	8(a4)
		clr.w	$C(a4)
		clr.w	$10(a4)
		rts	
; ===========================================================================

loc_2BFBA:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		subq.b	#4,d0
		addi.b	#$30,d0	; '0'
		move.b	d0,8(a4)
		move.b	($FFFFFE0F).w,d0
		rol.b	#4,d0
		andi.b	#7,d0
		subq.b	#4,d0
		addi.b	#$30,d0	; '0'
		move.b	d0,$C(a4)
		move.b	($FFFFFE0E).w,d0
		andi.b	#7,d0
		subq.b	#4,d0
		addi.b	#$30,d0	; '0'
		move.b	d0,$10(a4)
		move.b	#2,1(a4)
		clr.b	3(a4)
		clr.b	9(a4)

loc_2C000:
		clr.b	$D(a4)

loc_2C004:
		clr.b	$11(a4)
		_addq.b	#4,0(a4)
		move.b	($FFFFFE0F).w,d0
		ror.b	#3,d0
		lea	(byte_2C3EC).l,a2

loc_2C018:				
		sub.b	(a2),d0
		bcs.s	loc_2C020
		addq.w	#3,a2
		bra.s	loc_2C018
; ===========================================================================

loc_2C020:				
		cmpi.b	#-1,(a2)
		beq.s	loc_2C034
		move.b	1(a2),4(a4)
		move.b	2(a2),5(a4)
		rts	
; ===========================================================================

loc_2C034:				
		move.b	d0,d1
		andi.w	#7,d1
		lea	(byte_2C401).l,a1
		move.b	(a1,d0.w),4(a4)
		ror.b	#3,d0
		move.b	d0,d1
		andi.w	#7,d1
		lea	(byte_2C409).l,a1
		move.b	(a1,d1.w),d2
		lsl.b	#4,d2
		ror.b	#3,d0
		andi.w	#7,d0
		lea	(byte_2C411).l,a1
		or.b	(a1,d0.w),d2
		move.b	d2,5(a4)
		rts	
; ===========================================================================

loc_2C070:				
		bsr.w	loc_2C20A
		tst.b	1(a4)
		beq.s	loc_2C07C
		rts	
; ===========================================================================

loc_2C07C:				
		addi.b	#$30,8(a4) ; '0'
		addi.b	#$30,$C(a4) ; '0'
		addi.b	#$30,$10(a4) ; '0'
		move.b	($FFFFFE0F).w,d0
		andi.b	#$F,d0
		addi.b	#$C,d0
		move.b	d0,1(a4)
		clr.b	2(a4)
		_addq.b	#4,0(a4)
		rts	
; ===========================================================================

loc_2C0A8:				
		bsr.w	loc_2C20A
		cmpi.b	#$C,9(a4)
		bne.s	loc_2C0C6
		cmpi.b	#$C,$D(a4)
		bne.s	loc_2C0C6
		cmpi.b	#$C,$11(a4)
		beq.w	loc_2C1EE

loc_2C0C6:				
		moveq	#0,d0
		move.b	3(a4),d0
		lea	6(a4),a1
		adda.w	d0,a1
		lea	(byte_2C401).l,a3
		add.w	d0,d0
		adda.w	d0,a3
		moveq	#0,d0
		move.b	3(a1),d0
		jmp	loc_2C0E6(pc,d0.w)
; ===========================================================================

loc_2C0E6:
		bra.w	loc_2C134
; ===========================================================================
		bra.w	loc_2C170
; ===========================================================================
		bra.w	loc_2C1DA
; ===========================================================================
		bra.w	locret_2C1EC
; ===========================================================================

loc_2C0F6:				
		move.w	4(a4),d1
		move.b	3(a4),d0
		beq.s	loc_2C102
		lsr.w	d0,d1

loc_2C102:				
		andi.w	#7,d1
		cmpi.b	#5,d1
		bgt.s	loc_2C10E
		rts	
; ===========================================================================

loc_2C10E:				
		subq.b	#2,d1
		rts	
; ===========================================================================

loc_2C112:				
		move.w	#-$10,d2
		andi.w	#$F,d1
		move.b	3(a4),d0
		beq.s	loc_2C124
		lsl.w	d0,d1
		rol.w	d0,d2

loc_2C124:				
		and.w	d2,4(a4)
		or.w	d1,4(a4)
		andi.w	#$777,4(a4)
		rts	
; ===========================================================================

loc_2C134:				
		tst.b	3(a4)
		bne.s	loc_2C142
		tst.b	1(a4)
		bmi.s	loc_2C14C
		rts	
; ===========================================================================

loc_2C142:				
		cmpi.b	#8,-1(a1)
		bge.s	loc_2C14C
		rts	
; ===========================================================================

loc_2C14C:				
		bsr.s	loc_2C0F6
		move.w	(a1),d0
		subi.w	#$A0,d0	
		lsr.w	#8,d0
		andi.w	#7,d0
		move.b	(a3,d0.w),d0
		cmp.b	d1,d0
		beq.s	loc_2C164
		rts	
; ===========================================================================

loc_2C164:				
		addq.b	#4,3(a1)
		move.b	#$60,2(a1) ; '`'
		rts	
; ===========================================================================

loc_2C170:				
		bsr.s	loc_2C0F6
		move.w	(a1),d0
		addi.w	#$F0,d0	
		andi.w	#$700,d0
		lsr.w	#8,d0
		move.b	(a3,d0.w),d0
		cmp.b	d0,d1
		beq.s	loc_2C1AE
		cmpi.b	#$20,2(a1) ; ' '
		bls.s	loc_2C194
		subi.b	#$C,2(a1)

loc_2C194:				
		cmpi.b	#$18,2(a1)
		bgt.s	loc_2C19E
		rts	
; ===========================================================================

loc_2C19E:				
		cmpi.b	#-$80,1(a1)
		bls.s	loc_2C1A8
		rts	
; ===========================================================================

loc_2C1A8:				
		subq.b	#2,2(a1)
		rts	
; ===========================================================================

loc_2C1AE:				
		move.w	(a1),d0
		addi.w	#$80,d0	
		move.w	d0,d1
		andi.w	#$700,d1
		subi.w	#$10,d1
		move.w	d1,(a1)
		lsr.w	#8,d0
		andi.w	#7,d0
		move.b	(a3,d0.w),d1
		bsr.w	loc_2C112
		move.b	#-8,2(a1)
		addq.b	#4,3(a1)
		rts	
; ===========================================================================

loc_2C1DA:				
		tst.b	1(a1)
		beq.s	loc_2C1E2
		rts	
; ===========================================================================

loc_2C1E2:				
		clr.b	2(a1)
		addq.b	#4,3(a1)
		rts	
; ===========================================================================

locret_2C1EC:				
		rts	
; ===========================================================================

loc_2C1EE:				
		clr.w	8(a4)
		clr.w	$C(a4)
		clr.w	$10(a4)
		clr.b	1(a4)
		bsr.w	loc_2C2DE
		_move.b	#$18,0(a4)
		rts	
; ===========================================================================

loc_2C20A:				
		moveq	#0,d0
		move.b	3(a4),d0
		lea	6(a4),a1
		adda.w	d0,a1
		lea	(byte_2C401).l,a3
		adda.w	d0,a3
		adda.w	d0,a3
		jmp	loc_2C224(pc,d0.w)
; ===========================================================================

loc_2C224:
		bra.w	loc_2C23A
; ===========================================================================
		bra.w	loc_2C246
; ===========================================================================
		clr.b	3(a4)
		subq.b	#1,1(a4)
		move.w	#-$5200,d2
		bra.s	loc_2C24E
; ===========================================================================

loc_2C23A:				
		addq.b	#4,3(a4)
		move.w	#-$5600,d2
		bra.w	loc_2C24E
; ===========================================================================

loc_2C246:				
		addq.b	#4,3(a4)
		move.w	#-$5400,d2

loc_2C24E:				
		move.w	(a1),d0
		move.b	2(a1),d1
		ext.w	d1
		sub.w	d1,(a1)
		move.w	(a1),d3
		andi.w	#$7F8,d0
		andi.w	#$7F8,d3
		cmp.w	d0,d3
		bne.s	loc_2C268
		rts	
; ===========================================================================

loc_2C268:				
		bsr.w	loc_2C2B8
		lea	($FFFFA000).w,a1
		move.w	#$1F,d1

loc_2C274:				
		move.l	$80(a2),$80(a1)
		move.l	$100(a2),$100(a1)
		move.l	$180(a2),$180(a1)
		move.l	(a2)+,(a1)+
		addq.b	#8,d3
		bne.s	loc_2C298
		addi.w	#$100,d3
		andi.w	#$700,d3
		bsr.w	loc_2C2B8

loc_2C298:				
		dbf	d1,loc_2C274
		move.l	#$FFA000,d1
		tst.w	(f_two_player).w
		beq.s	loc_2C2AC
		addi.w	#$4000,d2

loc_2C2AC:				
		move.w	#$100,d3
		jsr	(QueueDMATransfer).l
		rts	
; ===========================================================================

loc_2C2B8:				
		move.w	d3,d0
		lsr.w	#8,d0
		andi.w	#7,d0
		move.b	(a3,d0.w),d0
		andi.w	#7,d0
		ror.w	#7,d0
		lea	(Art_CNZSlotPics).l,a2
		adda.w	d0,a2
		move.w	d3,d0
		andi.w	#$F8,d0	
		lsr.w	#1,d0
		adda.w	d0,a2
		rts	
; ===========================================================================

loc_2C2DE:				
		move.b	5(a4),d2
		move.b	d2,d3
		andi.w	#$F0,d2	
		lsr.w	#4,d2
		andi.w	#$F,d3
		moveq	#0,d0
		cmp.b	4(a4),d2
		bne.s	loc_2C2F8
		addq.w	#4,d0

loc_2C2F8:				
		cmp.b	4(a4),d3
		bne.s	loc_2C300
		addq.w	#8,d0

loc_2C300:				
		jmp	loc_2C304(pc,d0.w)
; ===========================================================================

loc_2C304:
		bra.w	loc_2C374
; ===========================================================================
		bra.w	loc_2C34A
; ===========================================================================
		bra.w	loc_2C31C
; ===========================================================================
		move.w	d2,d0
		bsr.w	loc_2C3CA
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C31C:				
		cmpi.b	#3,d3
		bne.s	loc_2C332
		move.w	d2,d0
		bsr.w	loc_2C3CA
		bsr.w	loc_2C3D8
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C332:				
		cmpi.b	#3,d2
		bne.w	loc_2C374
		move.w	d3,d0
		bsr.w	loc_2C3CA
		bsr.w	loc_2C3DC
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C34A:				
		cmpi.b	#3,d2
		bne.s	loc_2C35E
		move.w	d3,d0
		bsr.s	loc_2C3CA
		bsr.w	loc_2C3D8
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C35E:				
		cmpi.b	#3,d3
		bne.w	loc_2C374
		move.w	d2,d0
		bsr.s	loc_2C3CA
		bsr.w	loc_2C3DC
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C374:				
		cmp.b	d2,d3
		bne.s	loc_2C3A8
		cmpi.b	#3,4(a4)
		bne.s	loc_2C38E
		move.w	d2,d0
		bsr.s	loc_2C3CA
		bsr.w	loc_2C3DC
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C38E:				
		cmpi.b	#3,d2
		bne.s	loc_2C3A8
		move.b	4(a4),d0
		andi.w	#$F,d0
		bsr.s	loc_2C3CA
		bsr.w	loc_2C3D8
		move.w	d0,4(a4)
		rts	
; ===========================================================================

loc_2C3A8:				
		moveq	#2,d1
		moveq	#0,d0
		cmpi.b	#5,4(a4)
		bne.s	loc_2C3B6
		add.w	d1,d0

loc_2C3B6:				
		cmpi.b	#5,d2
		bne.s	loc_2C3BE
		add.w	d1,d0

loc_2C3BE:				
		cmpi.b	#5,d3
		bne.s	loc_2C3C6
		add.w	d1,d0

loc_2C3C6:				
		move.w	d0,4(a4)

loc_2C3CA:				
		add.w	d0,d0
		lea	(byte_2C3E0).l,a2
		move.w	(a2,d0.w),d0
		rts	
; ===========================================================================

loc_2C3D8:				
		asl.w	#2,d0
		rts	
; ===========================================================================

loc_2C3DC:				
		add.w	d0,d0
		rts	
; ===========================================================================
byte_2C3E0:	dc.b   0,$1E,  0,$19,$FF,$FF,  0,$96,  0, $A,  0,$14; 0
					
byte_2C3EC:	dc.b 8,3,$33,$12,0,0,$12,1,$11,$24,2,$22,$1E,4,$44,$1E;	0
					
		dc.b 5,$55,$FF,$F,$FF	; 16
byte_2C401:	dc.b   3,  0,  1,  4,  2,  5,  4,  1; 0	
					; h+1515Eo ...
byte_2C409:	dc.b   3,  0,  1,  4,  2,  5,  0,  2; 0	
byte_2C411:	dc.b   3,  0,  1,  4,  2,  5,  4,  1,  0; 0 
; ===========================================================================
		nop	

loc_2C41C:				
		jmp	SingleObjLoad
; ===========================================================================

loc_2C422:				
		jmp	MarkObjGone
; ===========================================================================

loc_2C428:				
		jmp	AnimateSprite
; ===========================================================================

loc_2C42E:				
		jmp	sub_16D8A
; ===========================================================================

loc_2C434:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2C43A:				
		jmp	(CalcSine).l
; ===========================================================================

loc_2C440:				
		jmp	loc_1978E
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2C448:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2C456(pc,d0.w),d1
		jmp	off_2C456(pc,d1.w)
; ===========================================================================
off_2C456:	dc.w loc_2C45A-off_2C456; 0 
		dc.w loc_2C4AC-off_2C456; 1
; ===========================================================================

loc_2C45A:				
		addq.b	#2,$24(a0)
		move.l	#Map_2C626,4(a0)
		move.w	#$4394,2(a0)
		bsr.w	loc_2C6A6
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#-$36,$20(a0)
		btst	#0,$22(a0)
		beq.s	loc_2C496
		move.b	#1,$34(a0)

loc_2C496:				
		move.w	8(a0),d0
		move.w	d0,d1
		subi.w	#$60,d0	; '`'
		move.w	d0,$30(a0)
		addi.w	#$60,d1	; '`'
		move.w	d1,$32(a0)

loc_2C4AC:				
		move.b	$21(a0),d0
		beq.w	loc_2C57E
		lea	($FFFFB000).w,a1
		bclr	#0,$21(a0)
		beq.s	loc_2C4C2
		bsr.s	loc_2C4D8

loc_2C4C2:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_2C4D0
		bsr.s	loc_2C4D8

loc_2C4D0:				
		clr.b	$21(a0)
		bra.w	loc_2C57E
; ===========================================================================

loc_2C4D8:				
		move.w	8(a0),d1
		move.w	$C(a0),d2
		sub.w	8(a1),d1
		sub.w	$C(a1),d2
		jsr	(CalcAngle).l
		addi.b	#$20,d0	; ' '
		andi.w	#$C0,d0	
		cmpi.w	#$40,d0	; '@'
		beq.s	loc_2C516
		cmpi.w	#$80,d0	
		beq.s	loc_2C534
		cmpi.w	#$C0,d0	
		beq.s	loc_2C542
		move.w	#-$800,$10(a1)
		move.b	#2,$1C(a0)
		bra.s	loc_2C55E
; ===========================================================================

loc_2C516:				
		subi.w	#$200,$10(a1)
		tst.w	d1
		bpl.s	loc_2C526
		addi.w	#$400,$10(a1)

loc_2C526:				
		move.w	#-$800,$12(a1)
		move.b	#1,$1C(a0)
		bra.s	loc_2C55E
; ===========================================================================

loc_2C534:				
		move.w	#$800,$10(a1)
		move.b	#2,$1C(a0)
		bra.s	loc_2C55E
; ===========================================================================

loc_2C542:				
		subi.w	#$200,$10(a1)
		tst.w	d1
		bpl.s	loc_2C552
		addi.w	#$400,$10(a1)

loc_2C552:				
		move.w	#$800,$12(a1)
		move.b	#1,$1C(a0)

loc_2C55E:				
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b	$3C(a1)
		move.w	#$B4,d0	
		jmp	(PlaySound).l
; ===========================================================================

loc_2C57E:				
		lea	(off_2C610).l,a1
		bsr.w	loc_2C6A0
		tst.b	$28(a0)
		beq.w	loc_2C69A
		tst.b	$34(a0)
		beq.s	loc_2C5AE
		move.w	8(a0),d0
		subq.w	#1,d0
		cmp.w	$30(a0),d0
		bne.s	loc_2C5A8
		move.b	#0,$34(a0)

loc_2C5A8:				
		move.w	d0,8(a0)
		bra.s	loc_2C5C4
; ===========================================================================

loc_2C5AE:				
		move.w	8(a0),d0
		addq.w	#1,d0
		cmp.w	$32(a0),d0
		bne.s	loc_2C5C0
		move.b	#1,$34(a0)

loc_2C5C0:				
		move.w	d0,8(a0)

loc_2C5C4:				
		tst.w	(f_two_player).w
		beq.s	loc_2C5CE
		bra.w	loc_2C694
; ===========================================================================

loc_2C5CE:				
		move.w	$30(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bls.s	loc_2C5F2
		move.w	$32(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	loc_2C5F8

loc_2C5F2:				
		jmp	DisplaySprite
; ===========================================================================

loc_2C5F8:				
		lea	(v_respawn_list).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_2C60A
		bclr	#7,2(a2,d0.w)

loc_2C60A:				
		jmp	DeleteObject
; ===========================================================================
off_2C610:	dc.w byte_2C616-off_2C610; 0 
		dc.w byte_2C619-off_2C610; 1
		dc.w byte_2C61F-off_2C610; 2
byte_2C616:	dc.b  $F,  0,$FF	; 0 
byte_2C619:	dc.b   3,  1,  0,  1,$FD,  0; 0	
byte_2C61F:	dc.b   3,  2,  0,  2,$FD,  0,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2C626:				
		dc.w word_2C62C-Map_2C626; 0
		dc.w word_2C64E-Map_2C626; 1
		dc.w word_2C670-Map_2C626; 2
word_2C62C:	dc.w 4			
		dc.w $F009,    0,    0,$FFE8; 0
		dc.w $F009, $800, $800,	   0; 4
		dc.w	 9,$1000,$1000,$FFE8; 8
		dc.w	 9,$1800,$1800,	   0; 12
word_2C64E:	dc.w 4			
		dc.w $F409,    0,    0,$FFE8; 0
		dc.w $F409, $800, $800,	   0; 4
		dc.w  $409,$1000,$1000,$FFE8; 8
		dc.w  $409,$1800,$1800,	   0; 12
word_2C670:	dc.w 4			
		dc.w $F009,    0,    0,$FFEC; 0
		dc.w $F009, $800, $800,	   4; 4
		dc.w	 9,$1000,$1000,$FFEC; 8
		dc.w	 9,$1800,$1800,	   4; 12
; ===========================================================================
		nop	

loc_2C694:				
		jmp	DisplaySprite
; ===========================================================================

loc_2C69A:				
		jmp	MarkObjGone
; ===========================================================================

loc_2C6A0:				
		jmp	AnimateSprite
; ===========================================================================

loc_2C6A6:				
		jmp	Adjust2PArtPointer
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Block	thingy from CNZ	that disappears	after 3	hits
; ----------------------------------------------------------------------------

Sprite_2C6AC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2C6BA(pc,d0.w),d1
		jmp	off_2C6BA(pc,d1.w)
; ===========================================================================
off_2C6BA:	dc.w loc_2C6C0-off_2C6BA; 0 
		dc.w loc_2C6FC-off_2C6BA; 1
		dc.w loc_2C884-off_2C6BA; 2
; ===========================================================================

loc_2C6C0:				
		addq.b	#2,$24(a0)
		move.l	#Map_2C8C4,4(a0)
		move.w	#$43E6,2(a0)
		bsr.w	loc_2C924
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#1,$18(a0)
		move.b	#-$29,$20(a0)
		move.b	$28(a0),d0
		rol.b	#2,d0
		andi.b	#3,d0
		move.b	d0,$1C(a0)

loc_2C6FC:				
		move.b	$21(a0),d0
		bne.w	loc_2C70A
		tst.w	$30(a0)
		beq.s	loc_2C740

loc_2C70A:				
		lea	$30(a0),a4
		tst.b	(a4)
		beq.s	loc_2C716
		subq.b	#1,(a4)
		bra.s	loc_2C724
; ===========================================================================

loc_2C716:				
		lea	($FFFFB000).w,a1
		bclr	#0,$21(a0)
		beq.s	loc_2C724
		bsr.s	loc_2C74E

loc_2C724:				
		addq.w	#1,a4
		tst.b	(a4)
		beq.s	loc_2C72E
		subq.b	#1,(a4)
		bra.s	loc_2C73C
; ===========================================================================

loc_2C72E:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_2C73C
		bsr.s	loc_2C74E

loc_2C73C:				
		clr.b	$21(a0)

loc_2C740:				
		lea	(off_2C89C).l,a1
		bsr.w	loc_2C91E
		bra.w	loc_2C918
; ===========================================================================

loc_2C74E:				
		move.b	$1A(a0),d0
		subq.b	#3,d0
		beq.s	loc_2C75C
		bcc.s	loc_2C77A
		addq.b	#3,d0
		bne.s	loc_2C77A

loc_2C75C:				
		move.b	#3,$1C(a0)
		move.w	#-$700,$12(a1)
		move.w	$C(a0),d2
		sub.w	$C(a1),d2
		bpl.s	loc_2C776
		neg.w	$12(a1)

loc_2C776:				
		bra.w	loc_2C806
; ===========================================================================

loc_2C77A:				
		subq.b	#1,d0
		bne.s	loc_2C7EC
		move.b	#4,$1C(a0)
		move.w	#$20,d3	; ' '
		btst	#0,$22(a0)
		bne.s	loc_2C794
		move.w	#$60,d3	; '`'

loc_2C794:				
		move.w	$10(a1),d1
		move.w	$12(a1),d2
		jsr	(CalcAngle).l
		sub.w	d3,d0
		move.w	d0,d1
		bpl.s	loc_2C7AA
		neg.w	d1

loc_2C7AA:				
		neg.w	d0
		add.w	d3,d0
		cmpi.b	#$40,d1	; '@'
		bcc.s	loc_2C7BE
		cmpi.b	#$38,d1	; '8'
		bcs.s	loc_2C7D0
		move.w	d3,d0
		bra.s	loc_2C7D0
; ===========================================================================

loc_2C7BE:				
		subi.w	#$80,d1	
		neg.w	d1
		cmpi.b	#$38,d1	; '8'
		bcs.s	loc_2C7D0
		move.w	d3,d0
		addi.w	#$80,d0	

loc_2C7D0:				
		jsr	(CalcSine).l
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,$10(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,$12(a1)
		bra.s	loc_2C806
; ===========================================================================

loc_2C7EC:				
		move.b	#5,$1C(a0)
		move.w	#-$700,$10(a1)
		move.w	8(a0),d2
		sub.w	8(a1),d2
		bpl.s	loc_2C806
		neg.w	$10(a1)

loc_2C806:				
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)
		clr.b	$3C(a1)
		move.w	#$D8,d0	
		jsr	(PlaySound).l
		movea.w	a1,a3
		moveq	#4,d3
		moveq	#1,d0
		subi.w	#$2000,2(a0)
		bcc.s	loc_2C85C
		addi.w	#$2000,2(a0)
		move.b	#4,$24(a0)
		lea	(v_cnz_saucer_data).w,a1
		move.b	$28(a0),d1
		andi.w	#$3F,d1	; '?'
		lea	(a1,d1.w),a1
		addq.b	#1,(a1)
		cmpi.b	#3,(a1)
		bcs.s	loc_2C85C
		moveq	#2,d3
		moveq	#$32,d0	; '2'

loc_2C85C:				
		jsr	sub_40D42
		bsr.w	loc_2C912
		bne.s	loc_2C87E
		_move.b	#$29,0(a1) ; ')'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	d3,$1A(a1)

loc_2C87E:				
		move.b	#4,(a4)
		rts	
; ===========================================================================

loc_2C884:				
		lea	(off_2C89C).l,a1
		bsr.w	loc_2C91E
		cmpi.b	#3,$1C(a0)
		bcs.w	loc_2C90C
		bra.w	loc_2C918
; ===========================================================================
off_2C89C:	dc.w byte_2C8A8-off_2C89C; 0 
		dc.w byte_2C8AB-off_2C89C; 1
		dc.w byte_2C8AE-off_2C89C; 2
		dc.w byte_2C8B1-off_2C89C; 3
		dc.w byte_2C8B7-off_2C89C; 4
		dc.w byte_2C8BD-off_2C89C; 5
byte_2C8A8:	dc.b  $F,  0,$FF	; 0 
byte_2C8AB:	dc.b  $F,  1,$FF	; 0 
byte_2C8AE:	dc.b  $F,  2,$FF	; 0 
byte_2C8B1:	dc.b   3,  3,  0,  3,$FD,  0; 0	
byte_2C8B7:	dc.b   3,  4,  1,  4,$FD,  1; 0	
byte_2C8BD:	dc.b   3,  5,  2,  5,$FD,  2,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2C8C4:				
		dc.w word_2C8D0-Map_2C8C4; 0
		dc.w word_2C8DA-Map_2C8C4; 1
		dc.w word_2C8E4-Map_2C8C4; 2
		dc.w word_2C8EE-Map_2C8C4; 3
		dc.w word_2C8F8-Map_2C8C4; 4
		dc.w word_2C902-Map_2C8C4; 5
word_2C8D0:	dc.w 1			
		dc.w $F80D,    0,    0,$FFF0; 0
word_2C8DA:	dc.w 1			
		dc.w $F00B,    8,    4,$FFF4; 0
word_2C8E4:	dc.w 1			
		dc.w $F007,  $14,   $A,$FFF8; 0
word_2C8EE:	dc.w 1			
		dc.w $FA0D,    0,    0,$FFF0; 0
word_2C8F8:	dc.w 1			
		dc.w $F20B,    8,    4,$FFF2; 0
word_2C902:	dc.w 1			
		dc.w $F007,  $14,   $A,$FFF6; 0
; ===========================================================================

loc_2C90C:				
		jmp	DeleteObject
; ===========================================================================

loc_2C912:				
		jmp	SingleObjLoad
; ===========================================================================

loc_2C918:				
		jmp	MarkObjGone
; ===========================================================================

loc_2C91E:				
		jmp	AnimateSprite
; ===========================================================================

loc_2C924:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; A sprite that	you can	hold on	to, like the rails in WFZ
; ----------------------------------------------------------------------------

Sprite_2C92C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2C93A(pc,d0.w),d1
		jmp	off_2C93A(pc,d1.w)
; ===========================================================================
off_2C93A:	dc.w loc_2C93E-off_2C93A; 0 
		dc.w loc_2C954-off_2C93A; 1
; ===========================================================================

loc_2C93E:				
		addq.b	#2,$24(a0)
		move.b	#4,1(a0)
		move.b	#$18,$19(a0)
		move.b	#4,$18(a0)

loc_2C954:				
		lea	$30(a0),a2
		lea	($FFFFB000).w,a1
		move.w	(v_joypad_hold_actual).w,d0
		bsr.s	loc_2C972
		lea	($FFFFB040).w,a1
		addq.w	#1,a2
		move.w	(v_joypad2_hold_actual).w,d0
		bsr.s	loc_2C972
		bra.w	loc_2CA0C
; ===========================================================================

loc_2C972:				
		tst.b	(a2)
		beq.s	loc_2C9A0
		andi.b	#$70,d0	; 'p'
		beq.w	locret_2CA08
		clr.b	$2A(a1)
		clr.b	(a2)
		move.b	#$12,2(a2)
		andi.w	#$F00,d0
		beq.s	loc_2C996
		move.b	#$3C,2(a2) ; '<'

loc_2C996:				
		move.w	#-$300,$12(a1)
		bra.w	locret_2CA08
; ===========================================================================

loc_2C9A0:				
		tst.b	2(a2)
		beq.s	loc_2C9AE
		subq.b	#1,2(a2)
		bne.w	locret_2CA08

loc_2C9AE:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$18,d0
		cmpi.w	#$30,d0	; '0'
		bcc.w	locret_2CA08
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		cmpi.w	#$10,d1
		bcc.w	locret_2CA08
		tst.b	$2A(a1)
		bmi.s	locret_2CA08
		cmpi.b	#6,$24(a1)
		bcc.s	locret_2CA08
		tst.w	(v_debug_active).w
		bne.s	locret_2CA08
		clr.w	$10(a1)
		clr.w	$12(a1)
		clr.w	$14(a1)
		move.w	$C(a0),$C(a1)
		move.b	#$14,$1C(a1)
		move.b	#1,$2A(a1)
		move.b	#1,(a2)

locret_2CA08:				
		rts	
; ===========================================================================
		nop	

loc_2CA0C:				
		jmp	MarkObjGone3
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Octopus badnick from OOZ
; ----------------------------------------------------------------------------

Sprite_2CA14:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2CA22(pc,d0.w),d1
		jmp	off_2CA22(pc,d1.w)
; ===========================================================================
off_2CA22:	dc.w loc_2CA52-off_2CA22; 0 
		dc.w loc_2CAB8-off_2CA22; 1
		dc.w loc_2CA46-off_2CA22; 2
		dc.w loc_2CA2A-off_2CA22; 3
; ===========================================================================

loc_2CA2A:				
		subi.w	#1,$2C(a0)
		bmi.s	loc_2CA34
		rts	
; ===========================================================================

loc_2CA34:				
		bsr.w	loc_2CCC2
		lea	(off_2CBDC).l,a1
		bsr.w	loc_2CCB6
		bra.w	loc_2CCB0
; ===========================================================================

loc_2CA46:				
		subq.w	#1,$2C(a0)
		beq.w	loc_2CCAA
		bra.w	loc_2CCA4
; ===========================================================================

loc_2CA52:				
		move.l	#Map_2CBFE,4(a0)
		move.w	#$2538,2(a0)
		ori.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#$B,$16(a0)
		move.b	#8,$17(a0)
		bsr.w	loc_2CCBC
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_2CAB0
		add.w	d1,$C(a0)
		move.w	#0,$12(a0)
		addq.b	#2,$24(a0)
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		bpl.s	loc_2CAB0
		bchg	#0,$22(a0)

loc_2CAB0:				
		move.w	$C(a0),$2A(a0)
		rts	
; ===========================================================================

loc_2CAB8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2CAD4(pc,d0.w),d1
		jsr	off_2CAD4(pc,d1.w)
		lea	(off_2CBDC).l,a1
		bsr.w	loc_2CCB6
		bra.w	loc_2CCB0
; ===========================================================================
off_2CAD4:	dc.w loc_2CADE-off_2CAD4; 0 
		dc.w loc_2CB04-off_2CAD4; 1
		dc.w loc_2CB20-off_2CAD4; 2
		dc.w loc_2CB3A-off_2CAD4; 3
		dc.w loc_2CB48-off_2CAD4; 4
; ===========================================================================

loc_2CADE:				
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		cmpi.w	#$80,d0	
		bgt.s	locret_2CB02
		cmpi.w	#-$80,d0
		blt.s	locret_2CB02
		addq.b	#2,$25(a0)
		move.b	#3,$1C(a0)
		move.w	#$20,$2C(a0) ; ' '

locret_2CB02:				
		rts	
; ===========================================================================

loc_2CB04:				
		subq.w	#1,$2C(a0)
		bmi.s	loc_2CB0C
		rts	
; ===========================================================================

loc_2CB0C:				
		addq.b	#2,$25(a0)
		move.b	#4,$1C(a0)
		move.w	#-$200,$12(a0)
		bra.w	loc_2CCC2
; ===========================================================================

loc_2CB20:				
		addi.w	#$10,$12(a0)
		bpl.s	loc_2CB2C
		bra.w	loc_2CCC2
; ===========================================================================

loc_2CB2C:				
		addq.b	#2,$25(a0)
		move.w	#$3C,$2C(a0) ; '<'
		bra.w	loc_2CB70
; ===========================================================================

loc_2CB3A:				
		subq.w	#1,$2C(a0)
		bmi.s	loc_2CB42
		rts	
; ===========================================================================

loc_2CB42:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2CB48:				
		addi.w	#$10,$12(a0)
		move.w	$C(a0),d0
		cmp.w	$2A(a0),d0
		bcc.s	loc_2CB5C
		bra.w	loc_2CCC2
; ===========================================================================

loc_2CB5C:				
		clr.b	$25(a0)
		clr.b	$1C(a0)
		clr.w	$12(a0)
		move.b	#1,$1A(a0)
		rts	
; ===========================================================================

loc_2CB70:				
		jsr	SingleObjLoad
		bne.s	locret_2CBDA
		_move.b	#$4A,0(a1) ; 'J'
		move.b	#6,$24(a1)
		move.l	#Map_2CBFE,4(a1)
		move.w	#$2538,2(a1)
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#$F,$2C(a1)
		move.b	1(a0),1(a1)
		move.b	$22(a0),$22(a1)
		move.b	#2,$1C(a1)
		move.b	#-$68,$20(a1)
		move.w	#-$200,$10(a1)
		btst	#0,1(a1)
		beq.s	locret_2CBDA
		neg.w	$10(a1)

locret_2CBDA:				
		rts	
; ===========================================================================
off_2CBDC:	dc.w byte_2CBE6-off_2CBDC; 0 
		dc.w byte_2CBEA-off_2CBDC; 1
		dc.w byte_2CBEF-off_2CBDC; 2
		dc.w byte_2CBF4-off_2CBDC; 3
		dc.w byte_2CBF8-off_2CBDC; 4
byte_2CBE6:	dc.b  $F,  1,  0,$FF	; 0 
byte_2CBEA:	dc.b   3,  1,  2,  3,$FF; 0 
byte_2CBEF:	dc.b   2,  5,  6,$FF,  0; 0 
byte_2CBF4:	dc.b  $F,  4,$FF,  0	; 0 
byte_2CBF8:	dc.b   7,  0,  1,$FD,  1,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2CBFE:				
		dc.w word_2CC0C-Map_2CBFE; 0
		dc.w word_2CC1E-Map_2CBFE; 1
		dc.w word_2CC38-Map_2CBFE; 2
		dc.w word_2CC52-Map_2CBFE; 3
		dc.w word_2CC6C-Map_2CBFE; 4
		dc.w word_2CC8E-Map_2CBFE; 5
		dc.w word_2CC98-Map_2CBFE; 6
word_2CC0C:	dc.w 2			
		dc.w $EB0D,    0,    0,$FFF0; 0
		dc.w $FB0D,    8,    4,$FFF0; 4
word_2CC1E:	dc.w 3			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	 9,  $10,    8,$FFE8; 4
		dc.w	 9,  $16,   $B,	   0; 8
word_2CC38:	dc.w 3			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	 9,  $1C,   $E,$FFE8; 4
		dc.w	 9,  $22,  $11,	   0; 8
word_2CC52:	dc.w 3			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	 9,  $28,  $14,$FFE8; 4
		dc.w	 9,  $2E,  $17,	   0; 8
word_2CC6C:	dc.w 4			
		dc.w $F001,  $34,  $1A,$FFF7; 0
		dc.w $F00D,    0,    0,$FFF0; 4
		dc.w	 9,  $10,    8,$FFE8; 8
		dc.w	 9,  $16,   $B,	   0; 12
word_2CC8E:	dc.w 1			
		dc.w $F201,  $36,  $1B,$FFF0; 0
word_2CC98:	dc.w 1			
		dc.w $F201,  $38,  $1C,$FFF0; 0
		dc.w	 0		; 4
; ===========================================================================

loc_2CCA4:				
		jmp	DisplaySprite
; ===========================================================================

loc_2CCAA:				
		jmp	DeleteObject
; ===========================================================================

loc_2CCB0:				
		jmp	MarkObjGone
; ===========================================================================

loc_2CCB6:				
		jmp	AnimateSprite
; ===========================================================================

loc_2CCBC:				
		jmp	ObjectFall
; ===========================================================================

loc_2CCC2:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Seahorse badnick from	OOZ
; ----------------------------------------------------------------------------

Sprite_2CCC8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2CCD6(pc,d0.w),d1
		jmp	off_2CCD6(pc,d1.w)
; ===========================================================================
off_2CCD6:	dc.w loc_2CCDE-off_2CCD6; 0 
		dc.w loc_2CDA2-off_2CCD6; 1
		dc.w loc_2CDCA-off_2CCD6; 2
		dc.w loc_2CDF4-off_2CCD6; 3
; ===========================================================================

loc_2CCDE:				
		addq.b	#2,$24(a0)
		move.l	#Map_2CF94,4(a0)
		move.w	#$2500,2(a0)
		ori.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.w	#-$100,$10(a0)
		move.b	$28(a0),d0
		move.b	d0,d1
		andi.w	#$F0,d1	
		lsl.w	#4,d1
		move.w	d1,$2E(a0)
		move.w	d1,$30(a0)
		andi.w	#$F,d0
		lsl.w	#4,d0
		subq.w	#1,d0
		move.w	d0,$32(a0)
		move.w	d0,$34(a0)
		move.w	$C(a0),$2A(a0)
		move.w	(v_water_height_actual).w,$3A(a0)
		move.b	#3,$2E(a0)
		bsr.w	loc_2D03C
		bne.s	loc_2CDA2
		_move.b	#$50,0(a1) ; 'P'
		move.b	#4,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$A,8(a1)
		addi.w	#-6,$C(a1)
		move.l	#Map_2CF94,4(a1)
		move.w	#$2500,2(a1)
		ori.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	$22(a0),$22(a1)
		move.b	#3,$1C(a1)
		move.l	a1,$36(a0)
		move.l	a0,$36(a1)
		bset	#6,$22(a0)

loc_2CDA2:				
					
		lea	(off_2CF6C).l,a1
		bsr.w	loc_2D048
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2CDC2(pc,d0.w),d1
		jsr	off_2CDC2(pc,d1.w)
		bsr.w	loc_2CF32
		bra.w	loc_2D042
; ===========================================================================
off_2CDC2:	dc.w loc_2CE06-off_2CDC2; 0 
		dc.w loc_2CE14-off_2CDC2; 1
		dc.w loc_2CE1A-off_2CDC2; 2
		dc.w loc_2CF2E-off_2CDC2; 3
; ===========================================================================

loc_2CDCA:				
		movea.l	$36(a0),a1
		tst.b	(a1)
		beq.w	loc_2D036
		cmpi.b	#$50,(a1) ; 'P'
		bne.w	loc_2D036
		btst	#7,$22(a1)
		bne.w	loc_2D036
		lea	(off_2CF6C).l,a1
		bsr.w	loc_2D048
		bra.w	loc_2D030
; ===========================================================================

loc_2CDF4:				
		bsr.w	loc_2D060
		lea	(off_2CF6C).l,a1
		bsr.w	loc_2D048
		bra.w	loc_2D042
; ===========================================================================

loc_2CE06:				
		tst.b	1(a0)
		bmi.s	loc_2CE0E
		rts	
; ===========================================================================

loc_2CE0E:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2CE14:				
		bsr.w	loc_2CEAE
		rts	
; ===========================================================================

loc_2CE1A:				
		bsr.w	loc_2CEF8
		bsr.w	loc_2CE24
		rts	
; ===========================================================================

loc_2CE24:				
		tst.b	$2D(a0)
		bne.w	locret_2CEAC
		st.b	$2D(a0)
		bsr.w	loc_2D04E
		tst.w	d1
		beq.s	locret_2CEAC
		cmpi.w	#-$10,d1
		bcc.s	locret_2CEAC
		bsr.w	loc_2D03C
		bne.s	locret_2CEAC
		_move.b	#$50,0(a1) ; 'P'
		move.b	#6,$24(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#Map_2CF94,4(a1)
		move.w	#$2500,2(a1)
		ori.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#-$68,$20(a1)
		move.b	#2,$1C(a1)
		move.w	#$A,d0
		move.w	#$10,d1
		move.w	#-$300,d2
		btst	#0,$22(a0)
		beq.s	loc_2CE9A
		neg.w	d1
		neg.w	d2

loc_2CE9A:				
		sub.w	d0,$C(a1)
		sub.w	d1,8(a1)
		move.w	d2,$10(a1)
		move.w	#$200,$12(a1)

locret_2CEAC:				
		rts	
; ===========================================================================

loc_2CEAE:				
		subq.b	#1,$3C(a0)
		bmi.s	loc_2CEEA
		bsr.w	loc_2D04E
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_2CEC8
		bset	#0,$22(a0)

loc_2CEC8:				
		move.w	word_2CEE6(pc,d0.w),d2
		add.w	d2,$10(a0)
		move.w	word_2CEE6(pc,d1.w),d2
		add.w	d2,$12(a0)
		move.w	#$100,d0
		move.w	d0,d1
		bsr.w	loc_2D054
		bra.w	loc_2D060
; ===========================================================================
word_2CEE6:	dc.w $FFF0		; 0
		dc.w   $10		; 1
; ===========================================================================

loc_2CEEA:				
		addq.b	#2,$25(a0)
		move.b	#$20,$3C(a0) ; ' '
		bra.w	loc_2D05A
; ===========================================================================

loc_2CEF8:				
		subq.b	#1,$3C(a0)
		bmi.s	loc_2CF00
		rts	
; ===========================================================================

loc_2CF00:				
		subq.b	#1,$2E(a0)
		bmi.s	loc_2CF1C
		subq.b	#2,$25(a0)
		move.w	#-$100,$12(a0)
		move.b	#-$80,$3C(a0)
		clr.b	$2D(a0)
		rts	
; ===========================================================================

loc_2CF1C:				
		move.b	#6,$25(a0)
		move.w	#-$200,$10(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_2CF2E:				
		bra.w	loc_2D060
; ===========================================================================

loc_2CF32:				
		moveq	#$A,d0
		moveq	#-6,d1
		movea.l	$36(a0),a1
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	$22(a0),$22(a1)
		move.b	$23(a0),$23(a1)
		move.b	1(a0),1(a1)
		btst	#0,$22(a1)
		beq.s	loc_2CF62
		neg.w	d0

loc_2CF62:				
		add.w	d0,8(a1)
		add.w	d1,$C(a1)
		rts	
; ===========================================================================
off_2CF6C:	dc.w byte_2CF78-off_2CF6C; 0 
		dc.w byte_2CF7B-off_2CF6C; 1
		dc.w byte_2CF83-off_2CF6C; 2
		dc.w byte_2CF89-off_2CF6C; 3
		dc.w byte_2CF8D-off_2CF6C; 4
		dc.w byte_2CF90-off_2CF6C; 5
byte_2CF78:	dc.b  $E,  0,$FF	; 0 
byte_2CF7B:	dc.b   5,  3,  4,  3,  4,  3,  4,$FF; 0	
byte_2CF83:	dc.b   3,  5,  6,  7,  6,$FF; 0	
byte_2CF89:	dc.b   3,  1,  2,$FF	; 0 
byte_2CF8D:	dc.b   1,  5,$FF	; 0 
byte_2CF90:	dc.b  $E,  8,$FF,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2CF94:				
		dc.w word_2CFA6-Map_2CF94; 0
		dc.w word_2CFC0-Map_2CF94; 1
		dc.w word_2CFCA-Map_2CF94; 2
		dc.w word_2CFD4-Map_2CF94; 3
		dc.w word_2CFEE-Map_2CF94; 4
		dc.w word_2D008-Map_2CF94; 5
		dc.w word_2D012-Map_2CF94; 6
		dc.w word_2D01C-Map_2CF94; 7
		dc.w word_2D026-Map_2CF94; 8
word_2CFA6:	dc.w 3			
		dc.w $E80D,    0,    0,$FFF0; 0
		dc.w $F809,    8,    4,$FFF8; 4
		dc.w  $805,   $E,    7,$FFF8; 8
word_2CFC0:	dc.w 1			
		dc.w $F805,  $22,  $11,$FFF8; 0
word_2CFCA:	dc.w 1			
		dc.w $F805,  $26,  $13,$FFF8; 0
word_2CFD4:	dc.w 3			
		dc.w $E80D,  $12,    9,$FFF0; 0
		dc.w $F809,    8,    4,$FFF8; 4
		dc.w  $805,   $E,    7,$FFF8; 8
word_2CFEE:	dc.w 3			
word_2CFF0:	dc.w $E80D,  $1A,   $D,$FFF0; 0
		dc.w $F809,    8,    4,$FFF8; 4
		dc.w  $805,   $E,    7,$FFF8; 8
word_2D008:	dc.w 1			
		dc.w $F801,  $2A,  $15,$FFFC; 0
word_2D012:	dc.w 1			
		dc.w $F801,  $2C,  $16,$FFFC; 0
word_2D01C:	dc.w 1			
		dc.w $F801,  $2E,  $17,$FFFC; 0
word_2D026:	dc.w 1			
		dc.w $F80D,  $30,  $18,$FFF0; 0
; ===========================================================================

loc_2D030:				
		jmp	DisplaySprite
; ===========================================================================

loc_2D036:				
		jmp	DeleteObject
; ===========================================================================

loc_2D03C:				
		jmp	SingleObjLoad
; ===========================================================================

loc_2D042:				
		jmp	MarkObjGone
; ===========================================================================

loc_2D048:				
		jmp	AnimateSprite
; ===========================================================================

loc_2D04E:				
		jmp	loc_366D6
; ===========================================================================

loc_2D054:				
		jmp	loc_3671A
; ===========================================================================

loc_2D05A:				
		jmp	loc_36754
; ===========================================================================

loc_2D060:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Buzz bomber from EHZ
; ----------------------------------------------------------------------------

Sprite_2D068:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2D076(pc,d0.w),d1
		jmp	off_2D076(pc,d1.w)
; ===========================================================================
off_2D076:	dc.w loc_2D0C8-off_2D076; 0 
		dc.w loc_2D174-off_2D076; 1
		dc.w loc_2D090-off_2D076; 2
		dc.w loc_2D07E-off_2D076; 3
; ===========================================================================

loc_2D07E:				
		bsr.w	loc_2D38C
		lea	(off_2D2CE).l,a1
		bsr.w	loc_2D374
		bra.w	loc_2D380
; ===========================================================================

loc_2D090:				
		movea.l	$2A(a0),a1
		tst.b	(a1)
		beq.w	loc_2D368
		tst.w	$30(a1)
		bmi.s	loc_2D0A2
		rts	
; ===========================================================================

loc_2D0A2:				
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		lea	(off_2D2CE).l,a1
		bsr.w	loc_2D374
		bra.w	loc_2D380
; ===========================================================================

loc_2D0C8:				
		move.l	#Map_2D2EA,4(a0)
		move.w	#$3D2,2(a0)
		bsr.w	loc_2D386
		ori.b	#4,1(a0)
		move.b	#$A,$20(a0)
		move.b	#4,$18(a0)
		move.b	#$10,$19(a0)
		move.b	#$10,$16(a0)
		move.b	#$18,$17(a0)
		move.b	#3,$18(a0)
		addq.b	#2,$24(a0)
		bsr.w	loc_2D36E
		bne.s	locret_2D172
		_move.b	#$4B,0(a1) ; 'K'
		move.b	#4,$24(a1)
		move.l	#Map_2D2EA,4(a1)
		move.w	#$3D2,2(a1)
		bsr.w	loc_2D37A
		move.b	#4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	$22(a0),$22(a1)
		move.b	1(a0),1(a1)
		move.b	#1,$1C(a1)
		move.l	a0,$2A(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#$100,$2E(a0)
		move.w	#-$100,$10(a0)
		btst	#0,1(a0)
		beq.s	locret_2D172
		neg.w	$10(a0)

locret_2D172:				
		rts	
; ===========================================================================

loc_2D174:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2D190(pc,d0.w),d1
		jsr	off_2D190(pc,d1.w)
		lea	(off_2D2CE).l,a1
		bsr.w	loc_2D374
		bra.w	loc_2D380
; ===========================================================================
off_2D190:	dc.w loc_2D194-off_2D190; 0 
		dc.w loc_2D234-off_2D190; 1
; ===========================================================================

loc_2D194:				
		bsr.w	loc_2D1D6
		subq.w	#1,$30(a0)
		move.w	$30(a0),d0
		cmpi.w	#$F,d0
		beq.s	loc_2D1BA
		tst.w	d0
		bpl.s	locret_2D1B8
		subq.w	#1,$2E(a0)
		bgt.w	loc_2D38C
		move.w	#$1E,$30(a0)

locret_2D1B8:				
		rts	
; ===========================================================================

loc_2D1BA:				
		sf.b	$32(a0)
		neg.w	$10(a0)
		bchg	#0,1(a0)
		bchg	#0,$22(a0)
		move.w	#$100,$2E(a0)
		rts	
; ===========================================================================

loc_2D1D6:				
		tst.b	$32(a0)
		bne.w	locret_2D232
		move.w	8(a0),d0
		lea	($FFFFB000).w,a1
		btst	#0,($FFFFFE0F).w
		beq.s	loc_2D1F2
		lea	($FFFFB040).w,a1

loc_2D1F2:				
		sub.w	8(a1),d0
		move.w	d0,d1
		bpl.s	loc_2D1FC
		neg.w	d0

loc_2D1FC:				
		cmpi.w	#$28,d0	; '('
		blt.s	locret_2D232
		cmpi.w	#$30,d0	; '0'
		bgt.s	locret_2D232
		tst.w	d1
		bpl.s	loc_2D216
		btst	#0,1(a0)
		beq.s	locret_2D232
		bra.s	loc_2D21E
; ===========================================================================

loc_2D216:				
		btst	#0,1(a0)
		bne.s	locret_2D232

loc_2D21E:				
		st.b	$32(a0)
		addq.b	#2,$25(a0)
		move.b	#3,$1C(a0)
		move.w	#$32,$34(a0) ; '2'

locret_2D232:				
		rts	
; ===========================================================================

loc_2D234:				
		move.w	$34(a0),d0
		subq.w	#1,d0
		blt.s	loc_2D248
		move.w	d0,$34(a0)
		cmpi.w	#$14,d0
		beq.s	loc_2D24E
		rts	
; ===========================================================================

loc_2D248:				
		subq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_2D24E:				
		jsr	SingleObjLoad2
		bne.s	loc_2D2C8
		_move.b	#$4B,0(a1) ; 'K'
		move.b	#6,$24(a1)
		move.l	#Map_2D2EA,4(a1)
		move.w	#$3D2,2(a1)
		bsr.w	loc_2D37A
		move.b	#4,$18(a1)
		move.b	#-$68,$20(a1)
		move.b	#$10,$19(a1)
		move.b	$22(a0),$22(a1)
		move.b	1(a0),1(a1)
		move.b	#2,$1C(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$18,$C(a1)
		move.w	#$D,d0
		move.w	#$180,$12(a1)
		move.w	#-$180,$10(a1)
		btst	#0,1(a1)
		beq.s	loc_2D2C8
		neg.w	$10(a1)
		neg.w	d0

loc_2D2C8:				
		add.w	d0,8(a1)
		rts	
; ===========================================================================
off_2D2CE:	dc.w byte_2D2D6-off_2D2CE; 0 
		dc.w byte_2D2D9-off_2D2CE; 1
		dc.w byte_2D2DD-off_2D2CE; 2
		dc.w byte_2D2E1-off_2D2CE; 3
byte_2D2D6:	dc.b  $F,  0,$FF	; 0 
byte_2D2D9:	dc.b   2,  3,  4,$FF	; 0 
byte_2D2DD:	dc.b   3,  5,  6,$FF	; 0 
byte_2D2E1:	dc.b   9,  1,  1,  1,  1,  1,$FD,  0,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2D2EA:				
		dc.w word_2D2F8-Map_2D2EA; 0
		dc.w word_2D30A-Map_2D2EA; 1
		dc.w word_2D324-Map_2D2EA; 2
		dc.w word_2D33E-Map_2D2EA; 3
		dc.w word_2D348-Map_2D2EA; 4
		dc.w word_2D352-Map_2D2EA; 5
		dc.w word_2D35C-Map_2D2EA; 6
word_2D2F8:	dc.w 2			
		dc.w $F809,    0,    0,$FFE8; 0
		dc.w $F809,    6,    3,	   0; 4
word_2D30A:	dc.w 3			
		dc.w $F809,    0,    0,$FFE8; 0
		dc.w $F805,   $C,    6,	   0; 4
		dc.w  $805,  $10,    8,	   2; 8
word_2D324:	dc.w 3			
		dc.w $F809,    0,    0,$FFE8; 0
		dc.w $F805,   $C,    6,	   0; 4
		dc.w  $805,  $14,   $A,	   2; 8
word_2D33E:	dc.w 1			
		dc.w $F001,  $14,   $A,	   4; 0
word_2D348:	dc.w 1			
		dc.w $F001,  $16,   $B,	   4; 0
word_2D352:	dc.w 1			
		dc.w $F801,  $18,   $C,$FFF4; 0
word_2D35C:	dc.w 1			
		dc.w $F801,  $1A,   $D,$FFF4; 0
		dc.w	 0		; 4
; ===========================================================================

loc_2D368:				
		jmp	DeleteObject
; ===========================================================================

loc_2D36E:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2D374:				
		jmp	AnimateSprite
; ===========================================================================

loc_2D37A:				
		jmp	sub_16D8A
; ===========================================================================

loc_2D380:				
		jmp	MarkObjGone_P1
; ===========================================================================

loc_2D386:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2D38C:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Jumping fish from EHZ
; ----------------------------------------------------------------------------

Sprite_2D394:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2D3A6(pc,d0.w),d1
		jsr	off_2D3A6(pc,d1.w)
		bra.w	loc_2D47C
; ===========================================================================
off_2D3A6:	dc.w loc_2D3AA-off_2D3A6; 0 
		dc.w loc_2D3E4-off_2D3A6; 1
; ===========================================================================

loc_2D3AA:				
		addq.b	#2,$24(a0)
		move.l	#Map_2D442,4(a0)
		move.w	#$414,2(a0)
		bsr.w	loc_2D488
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#9,$20(a0)
		move.b	#$10,$19(a0)
		move.w	#-$400,$12(a0)
		move.w	$C(a0),$30(a0)

loc_2D3E4:				
		lea	(off_2D430).l,a1
		bsr.w	loc_2D482
		bsr.w	loc_2D48E
		addi.w	#$18,$12(a0)
		move.w	$30(a0),d0
		cmp.w	$C(a0),d0
		bcc.s	loc_2D40C
		move.w	d0,$C(a0)
		move.w	#-$500,$12(a0)

loc_2D40C:				
		move.b	#1,$1C(a0)
		subi.w	#$C0,d0	
		cmp.w	$C(a0),d0
		bcc.s	locret_2D42E
		move.b	#0,$1C(a0)
		tst.w	$12(a0)
		bmi.s	locret_2D42E
		move.b	#2,$1C(a0)

locret_2D42E:				
		rts	
; ===========================================================================
off_2D430:	dc.w byte_2D436-off_2D430; 0 
		dc.w byte_2D43A-off_2D430; 1
		dc.w byte_2D43E-off_2D430; 2
byte_2D436:	dc.b   7,  0,  1,$FF	; 0 
byte_2D43A:	dc.b   3,  0,  1,$FF	; 0 
byte_2D43E:	dc.b   7,  0,$FF,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2D442:				
		dc.w word_2D446-Map_2D442; 0
		dc.w word_2D460-Map_2D442; 1
word_2D446:	dc.w 3			
		dc.w $F005,    0,    0,$FFF4; 0
		dc.w $F001,    4,    2,	   4; 4
		dc.w	 9,   $A,    5,$FFF4; 8
word_2D460:	dc.w 3			
		dc.w $F005,    0,    0,$FFF4; 0
		dc.w $F005,    6,    3,	   2; 4
		dc.w	 9,  $10,    8,$FFF4; 8
		dc.w	 0		; 12
; ===========================================================================

loc_2D47C:				
		jmp	MarkObjGone
; ===========================================================================

loc_2D482:				
		jmp	AnimateSprite
; ===========================================================================

loc_2D488:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2D48E:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_2D494:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2D4A2(pc,d0.w),d1
		jmp	off_2D4A2(pc,d1.w)
; ===========================================================================
off_2D4A2:	dc.w loc_2D4A6-off_2D4A2; 0 
		dc.w loc_2D4EC-off_2D4A2; 1
; ===========================================================================

loc_2D4A6:				
		addq.b	#2,$24(a0)
		move.l	#Map_2D50A,4(a0)
		move.w	#-$7A80,2(a0)
		bsr.w	loc_2D72C
		move.b	#4,1(a0)
		move.b	#0,$18(a0)
		move.b	#0,$20(a0)
		move.b	#$C,$19(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#$C4,d0	
		jmp	(PlaySound).l
; ===========================================================================
		rts	
; ===========================================================================

loc_2D4EC:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2D506
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#7,$1A(a0)
		beq.w	loc_2D71A

loc_2D506:				
		bra.w	loc_2D714
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2D50A:				
		dc.w word_2D518-Map_2D50A; 0
		dc.w word_2D522-Map_2D50A; 1
		dc.w word_2D52C-Map_2D50A; 2
		dc.w word_2D536-Map_2D50A; 3
		dc.w word_2D540-Map_2D50A; 4
		dc.w word_2D54A-Map_2D50A; 5
		dc.w word_2D554-Map_2D50A; 6
word_2D518:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_2D522:	dc.w 1			
		dc.w $F00F,    4,    2,$FFF0; 0
word_2D52C:	dc.w 1			
		dc.w $F00F,  $14,   $A,$FFF0; 0
word_2D536:	dc.w 1			
		dc.w $F00F,  $24,  $12,$FFF0; 0
word_2D540:	dc.w 1			
		dc.w $F00F,  $34,  $1A,$FFF0; 0
word_2D54A:	dc.w 1			
		dc.w $F00F,  $44,  $22,$FFF0; 0
word_2D554:	dc.w 1			
		dc.w $F00F,  $54,  $2A,$FFF0; 0
; ===========================================================================
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		addq.b	#2,$1A(a0)

loc_2D57C:				
		cmpi.b	#8,$26(a0)
		bcc.s	locret_2D5C2
		tst.b	$32(a0)
		beq.s	loc_2D5C4
		tst.b	$20(a0)
		bne.s	locret_2D5C2
		tst.b	$14(a0)
		bne.s	loc_2D5A6
		move.b	#$20,$14(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_2D5A6:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_2D5B4
		move.w	#$EEE,d0

loc_2D5B4:				
		move.w	d0,(a1)
		subq.b	#1,$14(a0)
		bne.s	locret_2D5C2
		move.b	#$F,$20(a0)

locret_2D5C2:				
		rts	
; ===========================================================================

loc_2D5C4:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_2D726
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,$26(a0)
		moveq	#$40,d0	; '@'
		bsr.w	loc_2D720
		rts	
; ===========================================================================

loc_2D5DE:				
		move.l	($FFFFF750).w,d2
		move.l	(v_boss_y_pos).w,d3
		move.w	(v_boss_x_vel).w,d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	(v_boss_y_vel).w,d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,($FFFFF750).w
		move.l	d3,(v_boss_y_pos).w
		rts	
; ===========================================================================

loc_2D604:				
		moveq	#0,d6
		movea.l	a1,a4
		lea	($FFFFF740).w,a2
		lea	$B(a0),a3
		tst.b	(a3)
		bne.s	loc_2D618
		addq.w	#2,a2
		bra.s	loc_2D61C
; ===========================================================================

loc_2D618:				
		bsr.w	loc_2D62A

loc_2D61C:				
		moveq	#0,d6
		move.b	$F(a0),d6
		subq.w	#1,d6
		bmi.s	locret_2D690
		lea	$15(a0),a3

loc_2D62A:				
		movea.l	a4,a1
		moveq	#0,d0
		moveq	#0,d1
		moveq	#0,d2
		moveq	#0,d4
		move.b	(a2)+,d0
		move.b	d0,d1
		lsr.b	#4,d1
		andi.b	#$F,d0
		move.b	d0,d2
		cmp.b	d0,d1
		beq.s	loc_2D646
		st.b	d4

loc_2D646:				
		move.b	d0,d5
		lsl.b	#4,d5
		or.b	d0,d5
		move.b	(a2)+,d0
		move.b	d0,d1
		lsr.b	#4,d1
		tst.b	d4
		beq.s	loc_2D65A
		moveq	#0,d0
		moveq	#0,d1

loc_2D65A:				
		andi.b	#$F,d0
		subi.b	#1,d0
		bpl.s	loc_2D67C
		add.w	d2,d2
		adda.w	(a1,d2.w),a1
		move.b	(a1),d0
		move.b	1(a1,d1.w),d2
		bmi.s	loc_2D692

loc_2D672:				
		andi.b	#$7F,d2	; ''
		move.b	d2,(a3)
		addi.b	#1,d1

loc_2D67C:				
		lsl.b	#4,d1
		or.b	d1,d0
		move.b	d0,-1(a2)
		move.b	d5,-2(a2)
		adda.w	#6,a3
		dbf	d6,loc_2D62A

locret_2D690:				
		rts	
; ===========================================================================

loc_2D692:				
		addq.b	#1,d2
		bne.s	loc_2D6A0
		move.b	#0,d1
		move.b	1(a1),d2
		bra.s	loc_2D672
; ===========================================================================

loc_2D6A0:				
		addq.b	#1,d2
		bne.s	loc_2D6AC
		addi.b	#2,$26(a0)
		rts	
; ===========================================================================

loc_2D6AC:				
		addq.b	#1,d2
		bne.s	loc_2D6BA
		andi.b	#-$10,d5
		or.b	2(a1,d1.w),d5
		bra.s	loc_2D67C
; ===========================================================================

loc_2D6BA:				
		addq.b	#1,d2
		bne.s	locret_2D6CA
		moveq	#0,d3
		move.b	2(a1,d1.w),d1
		move.b	1(a1,d1.w),d2
		bra.s	loc_2D672
; ===========================================================================

locret_2D6CA:				
		rts	
; ===========================================================================

loc_2D6CC:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		bne.s	locret_2D712
		jsr	SingleObjLoad
		bne.s	locret_2D712
		_move.b	#$58,0(a1) ; 'X'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	(RandomNumber).l
		move.w	d0,d1
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$20,d1	; ' '
		add.w	d1,8(a1)
		lsr.w	#8,d0
		lsr.b	#2,d0
		subi.w	#$20,d0	; ' '
		add.w	d0,$C(a1)

locret_2D712:				
		rts	
; ===========================================================================

loc_2D714:				
		jmp	DisplaySprite
; ===========================================================================

loc_2D71A:				
		jmp	DeleteObject
; ===========================================================================

loc_2D720:				
		jmp	(AddPLC).l
; ===========================================================================

loc_2D726:				
		jmp	sub_40D06
; ===========================================================================

loc_2D72C:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; CPZ boss
; ----------------------------------------------------------------------------

Sprite_2D734:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2D742(pc,d0.w),d1
		jmp	off_2D742(pc,d1.w)
; ===========================================================================
off_2D742:	dc.w loc_2D75E-off_2D742; 0 
		dc.w loc_2D94E-off_2D742; 1
		dc.w loc_2DDA2-off_2D742; 2
		dc.w loc_2DE66-off_2D742; 3
		dc.w loc_2DFB2-off_2D742; 4
		dc.w loc_2E07A-off_2D742; 5
		dc.w loc_2E67A-off_2D742; 6
		dc.w loc_2DFFE-off_2D742; 7
		dc.w loc_2E192-off_2D742; 8
		dc.w loc_2DCB6-off_2D742; 9
		dc.w loc_2DC5E-off_2D742; 10
		dc.w loc_2E8F6-off_2D742; 11
		dc.w loc_2E94E-off_2D742; 12
		dc.w loc_2E9F6-off_2D742; 13
; ===========================================================================

loc_2D75E:				
		move.l	#Map_2ED8C,4(a0)
		move.w	#$2420,2(a0)
		ori.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.w	#$2B80,8(a0)
		move.w	#$4B0,$C(a0)
		move.b	#3,$18(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$21(a0)
		addq.b	#2,$24(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$38(a0)
		bclr	#3,$2D(a0)
		bsr.w	loc_2EEFA
		jsr	SingleObjLoad2
		bne.w	loc_2D8AC
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	a1,$34(a0)
		move.l	#Map_2ED8C,4(a1)
		move.w	#$420,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#3,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#$16,$24(a1)
		move.b	#1,$1C(a1)
		move.b	1(a0),1(a1)
		bsr.w	loc_2EEE8
		tst.b	$28(a0)
		bmi.w	loc_2D8AC
		jsr	SingleObjLoad2
		bne.w	loc_2D8AC
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EE88,4(a1)
		move.w	#$418,2(a1)
		bsr.w	loc_2EEE8
		move.b	#1,$1E(a0)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#3,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#$18,$24(a1)
		move.b	1(a0),1(a1)
		jsr	SingleObjLoad2
		bne.s	loc_2D8AC
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#2,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#$12,$24(a1)

loc_2D8AC:				
		jsr	SingleObjLoad2
		bne.s	loc_2D908
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		subi.w	#$38,$C(a1)
		subi.w	#$10,8(a1)
		move.w	#-$10,$2E(a1)
		addi.b	#$10,$24(a1)
		move.b	#6,$1C(a1)

loc_2D908:				
		jsr	SingleObjLoad2
		bne.s	locret_2D94C
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#4,$24(a1)

locret_2D94C:				
		rts	
; ===========================================================================

loc_2D94E:				
		bsr.w	loc_2D992
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2D984(pc,d0.w),d1
		jsr	off_2D984(pc,d1.w)
		lea	(off_2ED5C).l,a1
		jsr	AnimateSprite
		move.b	$22(a0),d0
		andi.b	#3,d0
		andi.b	#-4,1(a0)
		or.b	d0,1(a0)
		jmp	DisplaySprite
; ===========================================================================
off_2D984:	dc.w loc_2DA62-off_2D984; 0 
		dc.w loc_2DB98-off_2D984; 1
		dc.w loc_2DC00-off_2D984; 2
		dc.w loc_2DC14-off_2D984; 3
		dc.w loc_2D9B4-off_2D984; 4
		dc.w loc_2D9D8-off_2D984; 5
		dc.w loc_2DA22-off_2D984; 6
; ===========================================================================

loc_2D992:				
		cmpi.b	#8,$25(a0)
		bge.s	locret_2D9AA
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		bgt.s	loc_2D9AC
		bclr	#0,$22(a0)

locret_2D9AA:				
		rts	
; ===========================================================================

loc_2D9AC:				
		bset	#0,$22(a0)
		rts	
; ===========================================================================

loc_2D9B4:				
		subq.w	#1,$3C(a0)
		bpl.w	loc_2DB34
		bset	#0,$22(a0)
		bclr	#7,$22(a0)
		clr.w	$10(a0)
		addq.b	#2,$25(a0)
		move.w	#-$26,$3C(a0)
		rts	
; ===========================================================================

loc_2D9D8:				
		addq.w	#1,$3C(a0)
		beq.s	loc_2D9E8
		bpl.s	loc_2D9EE
		addi.w	#$18,$12(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2D9E8:				
		clr.w	$12(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2D9EE:				
		cmpi.w	#$30,$3C(a0) ; '0'
		bcs.s	loc_2DA06
		beq.s	loc_2DA0E
		cmpi.w	#$38,$3C(a0)
		bcs.s	loc_2DA1A
		addq.b	#2,$25(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2DA06:				
		subi.w	#8,$12(a0)
		bra.s	loc_2DA1A
; ===========================================================================

loc_2DA0E:				
		clr.w	$12(a0)
		bsr.w	loc_2EF00
		bsr.w	loc_2EF06

loc_2DA1A:				
		bsr.w	loc_2DB0E
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DA22:				
		bset	#6,$2E(a0)
		move.w	#$400,$10(a0)
		move.w	#-$40,$12(a0)
		cmpi.w	#$2C30,(v_boundary_right_next).w
		bcc.s	loc_2DA42
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_2DA48
; ===========================================================================

loc_2DA42:				
		tst.b	1(a0)
		bpl.s	loc_2DA50

loc_2DA48:				
		bsr.w	loc_2DB0E
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DA50:				
		addq.l	#4,sp
		movea.l	$34(a0),a1
		jsr	DeleteObject2
		jmp	DeleteObject
; ===========================================================================

loc_2DA62:				
		move.w	#$100,$12(a0)
		bsr.w	loc_2DB0E
		cmpi.w	#$4C0,$38(a0)
		bne.s	loc_2DA7E
		move.w	#0,$12(a0)
		addq.b	#2,$25(a0)

loc_2DA7E:				
		move.b	$3F(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	$38(a0),d0
		move.w	d0,$C(a0)
		move.w	$30(a0),8(a0)
		addq.b	#2,$3F(a0)
		cmpi.b	#8,$25(a0)
		bcc.s	locret_2DAE8
		tst.b	$22(a0)
		bmi.s	loc_2DAEA
		tst.b	$20(a0)
		bne.s	locret_2DAE8
		tst.b	$3E(a0)
		bne.s	loc_2DAC6
		move.b	#$20,$3E(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_2DAC6:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_2DAD4
		move.w	#$EEE,d0

loc_2DAD4:				
		move.w	d0,(a1)
		subq.b	#1,$3E(a0)
		bne.s	locret_2DAE8
		move.b	#$F,$20(a0)
		bclr	#1,$2D(a0)

locret_2DAE8:				
		rts	
; ===========================================================================

loc_2DAEA:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_2EEF4
		move.b	#8,$25(a0)
		move.w	#$B3,$3C(a0)
		movea.l	$34(a0),a1
		move.b	#4,$1C(a1)
		moveq	#$40,d0	; '@'
		bra.w	loc_2EEEE
; ===========================================================================
		rts	
; ===========================================================================

loc_2DB0E:				
		move.l	$30(a0),d2
		move.l	$38(a0),d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$30(a0)
		move.l	d3,$38(a0)
		rts	
; ===========================================================================

loc_2DB34:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		bne.s	locret_2DB7A
		jsr	SingleObjLoad
		bne.s	locret_2DB7A
		_move.b	#$58,0(a1) ; 'X'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	(RandomNumber).l
		move.w	d0,d1
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$20,d1	; ' '
		add.w	d1,8(a1)
		lsr.w	#8,d0
		lsr.b	#2,d0
		subi.w	#$20,d0	; ' '
		add.w	d0,$C(a1)

locret_2DB7A:				
		rts	
; ===========================================================================

loc_2DB7C:				
		jsr	SingleObjLoad
		bne.s	locret_2DB96
		_move.b	#$58,0(a1) ; 'X'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

locret_2DB96:				
		rts	
; ===========================================================================

loc_2DB98:				
		btst	#3,$2D(a0)
		bne.s	loc_2DBA6
		move.w	#$2B30,d0
		bra.s	loc_2DBAA
; ===========================================================================

loc_2DBA6:				
		move.w	#$2A50,d0

loc_2DBAA:				
		move.w	d0,d1
		sub.w	$30(a0),d0
		bpl.s	loc_2DBB4
		neg.w	d0

loc_2DBB4:				
		cmpi.w	#3,d0
		ble.s	loc_2DBD6
		cmp.w	$30(a0),d1
		bgt.s	loc_2DBC8
		move.w	#-$300,$10(a0)
		bra.s	loc_2DBCE
; ===========================================================================

loc_2DBC8:				
		move.w	#$300,$10(a0)

loc_2DBCE:				
		bsr.w	loc_2DB0E
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DBD6:				
		cmpi.w	#$4C0,$38(a0)
		bne.w	loc_2DA7E
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		addq.b	#2,$25(a0)
		bchg	#3,$2D(a0)
		bset	#0,$2E(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC00:				
		btst	#0,$2E(a0)
		beq.s	loc_2DC0C
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC0C:				
		addq.b	#2,$25(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC14:				
		move.w	($FFFFB008).w,d0
		addi.w	#$4C,d0	; 'L'
		cmp.w	$30(a0),d0
		bgt.s	loc_2DC42
		beq.w	loc_2DA7E
		subi.l	#loc_10000,$30(a0)
		cmpi.w	#$2A28,$30(a0)
		bgt.w	loc_2DA7E
		move.w	#$2A28,$30(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC42:				
		addi.l	#loc_10000,$30(a0)
		cmpi.w	#$2B70,$30(a0)
		blt.w	loc_2DA7E
		move.w	#$2B70,$30(a0)
		bra.w	loc_2DA7E
; ===========================================================================

loc_2DC5E:				
		cmpi.b	#-7,$30(a0)
		beq.s	loc_2DC80
		subi.b	#1,$30(a0)
		bgt.w	loc_2EED0
		bsr.w	loc_2DB7C
		move.b	#-7,$30(a0)
		move.w	#$1E,$2A(a0)

loc_2DC80:				
		subq.w	#1,$2A(a0)
		bpl.w	loc_2EED0
		move.w	$10(a0),d0
		add.w	d0,8(a0)
		move.l	$C(a0),d3
		move.w	$12(a0),d0
		addi.w	#$38,$12(a0)
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d3,$C(a0)
		cmpi.l	#$5800000,d3
		bcc.w	loc_2EED6
		bra.w	loc_2EEDC
; ===========================================================================

loc_2DCB6:				
		btst	#7,$22(a0)
		bne.s	loc_2DCEC
		movea.l	$34(a0),a1
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		move.b	1(a1),1(a0)
		move.b	$22(a1),$22(a0)
		movea.l	#off_2EA3C,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2DCEC:				
		moveq	#$22,d3	; '"'
		move.b	#$78,$30(a0) ; 'x'
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	d3,$1A(a0)
		move.b	#$14,$24(a0)
		jsr	(RandomNumber).l
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,$10(a0)
		move.w	#-$380,$12(a0)
		moveq	#1,d2
		addq.w	#1,d3

loc_2DD26:				
		jsr	SingleObjLoad
		bne.w	loc_2EED6
		_move.b	#$5D,0(a1) ; ']'
		move.l	#Map_2EADC,4(a1)
		move.b	d3,$1A(a1)
		move.b	#$14,$24(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#2,$18(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	$22(a0),$22(a1)
		move.b	1(a0),1(a1)
		jsr	(RandomNumber).l
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,$10(a1)
		move.w	#-$380,$12(a1)
		swap	d0
		addi.b	#$1E,d0
		andi.w	#$7F,d0	; ''
		move.b	d0,$30(a1)
		addq.w	#1,d3
		dbf	d2,loc_2DD26
		rts	
; ===========================================================================

loc_2DDA2:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2DDB0(pc,d0.w),d1
		jmp	off_2DDB0(pc,d1.w)
; ===========================================================================
off_2DDB0:	dc.w loc_2DDB4-off_2DDB0; 0 
		dc.w loc_2DDE2-off_2DDB0; 1
; ===========================================================================

loc_2DDB4:				
		movea.l	$34(a0),a1
		btst	#0,$2E(a1)
		bne.s	loc_2DDC2
		rts	
; ===========================================================================

loc_2DDC2:				
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#$18,$C(a0)
		move.w	#$C,$2C(a0)
		addq.b	#2,$25(a0)
		movea.l	a0,a1
		bra.s	loc_2DDF0
; ===========================================================================

loc_2DDE2:				
		jsr	SingleObjLoad2
		beq.s	loc_2DDEC
		rts	
; ===========================================================================

loc_2DDEC:				
		move.l	a0,$34(a1)

loc_2DDF0:				
		subq.w	#1,$2C(a0)
		blt.s	loc_2DE56
		_move.b	#$5D,0(a1) ; ']'
		move.l	#Map_2EADC,4(a1)

loc_2DE04:
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#5,$18(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$2C(a0),d0
		subi.w	#$B,d0
		neg.w	d0
		lsl.w	#3,d0
		move.w	d0,$38(a1)
		add.w	d0,$C(a1)
		move.b	#1,$1C(a1)
		cmpi.b	#2,$25(a1)
		beq.w	loc_2DFFE
		move.b	#$E,$24(a1)
		bra.w	loc_2DFFE
; ===========================================================================

loc_2DE56:				
		move.b	#0,$25(a0)
		move.b	#6,$24(a0)
		bra.w	loc_2DFFE
; ===========================================================================

loc_2DE66:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2DE74(pc,d0.w),d1
		jmp	off_2DE74(pc,d1.w)
; ===========================================================================
off_2DE74:	dc.w loc_2DE7A-off_2DE74; 0 
		dc.w loc_2DF08-off_2DE74; 1
		dc.w loc_2DF76-off_2DE74; 2
; ===========================================================================

loc_2DE7A:				
		jsr	SingleObjLoad2
		bne.w	loc_2DFFE
		move.b	#$E,$24(a0)
		move.b	#6,$24(a1)
		move.b	#2,$25(a1)
		_move.b	#$5D,0(a1) ; ']'
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.b	#2,$32(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#$58,d0	; 'X'
		move.b	d0,$31(a1)
		add.w	d0,$C(a1)
		move.b	#2,$1C(a1)
		move.l	a0,$34(a1)
		move.b	#$12,$30(a1)
		jsr	SingleObjLoad2
		bne.s	loc_2DF04
		_move.b	#$5D,0(a1) ; ']'
		move.b	#$A,$24(a1)
		move.l	$34(a0),$34(a1)

loc_2DF04:				
		bra.w	loc_2DFFE
; ===========================================================================

loc_2DF08:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a2
		btst	#7,$22(a2)
		bne.w	loc_2EED6
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		subi.b	#1,$30(a0)
		bne.s	loc_2DF5A
		move.b	#$12,$30(a0)
		subi.b	#8,$31(a0)
		bgt.s	loc_2DF5A
		bmi.s	loc_2DF4C
		move.b	#3,$1C(a0)
		move.b	#$C,$30(a0)
		bra.s	loc_2DF5A
; ===========================================================================

loc_2DF4C:				
		move.b	#6,$30(a0)
		move.b	#4,$25(a0)
		rts	
; ===========================================================================

loc_2DF5A:				
		moveq	#0,d0
		move.b	$31(a0),d0
		add.w	d0,$C(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2DF76:				
		subi.b	#1,$30(a0)
		beq.s	loc_2DF80
		rts	
; ===========================================================================

loc_2DF80:				
		subq.b	#1,$32(a0)
		beq.s	loc_2DF9E
		move.b	#2,$1C(a0)
		move.b	#$12,$30(a0)
		move.b	#2,$25(a0)
		move.b	#$58,$31(a0) ; 'X'

loc_2DF9E:				
		movea.l	$34(a0),a1
		move.b	#8,$24(a1)
		move.b	#$58,$31(a1) ; 'X'
		bra.w	loc_2EED6
; ===========================================================================

loc_2DFB2:				
		tst.b	$3C(a0)
		bne.s	loc_2DFEE
		moveq	#0,d0
		move.b	$31(a0),d0
		add.w	$C(a0),d0
		lea	($FFFFB000).w,a1
		moveq	#$7F,d1	; ''

loc_2DFC8:				
		cmp.w	$C(a1),d0
		beq.s	loc_2DFDE
		lea	$40(a1),a1
		dbf	d1,loc_2DFC8
		bra.s	loc_2DFFE
; ===========================================================================

loc_2DFD8:				
		st.b	$3C(a0)
		bra.s	loc_2DFFE
; ===========================================================================

loc_2DFDE:				
		moveq	#0,d7
		move.b	#$5D,d7	; ']'
		cmp.b	(a1),d7
		beq.s	loc_2DFF0
		dbf	d1,loc_2DFC8
		bra.s	loc_2DFFE
; ===========================================================================

loc_2DFEE:				
		movea.l	a0,a1

loc_2DFF0:				
		bset	#7,$22(a1)
		subi.b	#8,$31(a0)
		beq.s	loc_2DFD8

loc_2DFFE:				
		movea.l	$34(a0),a1

loc_2E002:
		movea.l	$34(a1),a2

loc_2E006:
		btst	#7,$22(a2)

loc_2E00C:
		bne.s	loc_2E04E

loc_2E00E:
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		cmpi.b	#4,$25(a0)
		bne.s	loc_2E028
		addi.w	#$18,$C(a0)

loc_2E028:				
		btst	#7,$22(a0)
		bne.s	loc_2E04A
		move.w	$38(a0),d0
		add.w	d0,$C(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E04A:				
		bra.w	loc_2EED6
; ===========================================================================

loc_2E04E:				
		move.b	#$14,$24(a0)
		jsr	(RandomNumber).l
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,$10(a0)
		move.w	#-$380,$12(a0)
		swap	d0
		addi.b	#$1E,d0
		andi.w	#$7F,d0	; ''
		move.b	d0,$30(a0)
		bra.w	loc_2EED0
; ===========================================================================

loc_2E07A:				
		btst	#7,$22(a0)
		bne.w	loc_2EED6
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2E092(pc,d0.w),d1
		jmp	off_2E092(pc,d1.w)
; ===========================================================================
off_2E092:	dc.w loc_2E098-off_2E092; 0 
		dc.w loc_2E0DE-off_2E092; 1
		dc.w loc_2E130-off_2E092; 2
; ===========================================================================

loc_2E098:				
		addq.b	#2,$25(a0)
		_move.b	#$5D,0(a0) ; ']'
		move.l	#Map_2EADC,4(a0)
		move.w	#$6500,2(a0)
		move.b	#4,1(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#4,$18(a0)
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	#$F,$30(a0)
		move.b	#4,$1C(a0)

loc_2E0DE:				
		subq.b	#1,$30(a0)
		bne.s	loc_2E102
		move.b	#5,$1C(a0)
		move.b	#4,$30(a0)
		addq.b	#2,$25(a0)
		subi.w	#$24,$C(a0) ; '$'
		subi.w	#2,8(a0)
		rts	
; ===========================================================================

loc_2E102:				
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E130:				
		subq.b	#1,$30(a0)
		bne.s	loc_2E156
		move.b	#0,$25(a0)
		movea.l	$34(a0),a1
		bset	#1,$2E(a1)
		addq.b	#1,$3C(a0)
		cmpi.b	#$C,$3C(a0)
		bge.w	loc_2EED6
		rts	
; ===========================================================================

loc_2E156:				
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		subi.w	#$24,$C(a0) ; '$'
		subi.w	#2,8(a0)
		btst	#0,1(a0)
		beq.s	loc_2E180
		addi.w	#4,8(a0)

loc_2E180:				
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E192:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2E1A0(pc,d0.w),d1
		jmp	off_2E1A0(pc,d1.w)
; ===========================================================================
off_2E1A0:	dc.w loc_2E1AC-off_2E1A0; 0 
		dc.w loc_2E25C-off_2E1A0; 1
		dc.w loc_2E610-off_2E1A0; 2
		dc.w loc_2E5A4-off_2E1A0; 3
		dc.w loc_2E666-off_2E1A0; 4
		dc.w loc_2E2E8-off_2E1A0; 5
; ===========================================================================

loc_2E1AC:				
		movea.l	$34(a0),a1
		btst	#7,$2E(a1)
		bne.s	loc_2E20E
		bset	#7,$2E(a1)
		jsr	SingleObjLoad2
		bne.s	loc_2E20E
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#$10,$24(a1)
		move.b	#4,$25(a1)
		move.b	#9,$1C(a1)

loc_2E20E:				
		jsr	SingleObjLoad2
		bne.s	loc_2E258
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$6500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addi.b	#$10,$24(a1)
		move.b	#6,$25(a1)

loc_2E258:				
		addq.b	#2,$25(a0)

loc_2E25C:				
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		subi.w	#$38,$C(a0)
		btst	#7,$22(a0)
		bne.s	loc_2E2E0
		btst	#2,$2E(a1)
		beq.s	loc_2E28C
		bsr.w	loc_2E4CE
		bsr.w	loc_2E3F2
		bra.s	loc_2E2AC
; ===========================================================================

loc_2E28C:				
		btst	#5,$2E(a1)
		beq.s	loc_2E2AC
		subq.w	#1,$2A(a0)
		bne.s	loc_2E2AC
		bclr	#5,$2E(a1)
		bset	#3,$2E(a1)
		bset	#4,$2E(a1)

loc_2E2AC:				
		movea.l	$34(a0),a1
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		move.w	$2E(a0),d0
		btst	#0,1(a0)
		beq.s	loc_2E2CA
		neg.w	d0

loc_2E2CA:				
		add.w	d0,8(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E2E0:				
		move.b	#$A,$25(a0)
		bra.s	loc_2E2AC
; ===========================================================================

loc_2E2E8:				
		move.l	d7,-(sp)
		move.b	#$1E,$30(a0)
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		subi.w	#$38,$C(a0)
		move.w	$2E(a0),d0
		btst	#0,1(a0)
		beq.s	loc_2E314
		neg.w	d0

loc_2E314:				
		add.w	d0,8(a0)
		move.b	#$20,$1A(a0) ; ' '
		move.b	#$14,$24(a0)
		jsr	(RandomNumber).l
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,$10(a0)
		move.w	#-$380,$12(a0)
		moveq	#0,d7
		move.w	$2E(a0),d0
		addi.w	#$18,d0
		bge.s	loc_2E356
		addi.w	#$18,d0
		bge.s	loc_2E354
		addi.w	#$18,d0
		bge.s	loc_2E352
		addq.w	#1,d7

loc_2E352:				
		addq.w	#1,d7

loc_2E354:				
		addq.w	#1,d7

loc_2E356:				
		subq.w	#1,d7
		bmi.w	loc_2E3E6

loc_2E35C:				
		jsr	SingleObjLoad
		bne.w	loc_2EED6
		_move.b	#$5D,0(a1) ; ']'
		move.l	#Map_2EADC,4(a1)
		move.b	#$21,$1A(a1) ; '!'
		move.b	#$14,$24(a1)
		move.w	#$2500,2(a1)
		move.b	1(a0),1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#2,$18(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#8,$C(a1)
		move.w	d7,d2
		add.w	d2,d2
		move.w	word_2E3EC(pc,d2.w),d3
		btst	#0,1(a0)
		beq.s	loc_2E3BC
		neg.w	d3

loc_2E3BC:				
		add.w	d3,8(a1)
		jsr	(RandomNumber).l
		asr.w	#8,d0
		asr.w	#6,d0
		move.w	d0,$10(a1)
		move.w	#-$380,$12(a1)
		swap	d0
		addi.b	#$1E,d0
		andi.w	#$7F,d0	; ''
		move.b	d0,$30(a1)
		dbf	d7,loc_2E35C

loc_2E3E6:				
		move.l	(sp)+,d7
		bra.w	loc_2EED0
; ===========================================================================
word_2E3EC:	dc.w   $18		; 0
		dc.w   $30		; 1
		dc.w   $48		; 2
; ===========================================================================

loc_2E3F2:				
		btst	#3,$2E(a1)
		bne.w	locret_2E4CC
		btst	#4,$2E(a1)

loc_2E402:
		bne.w	locret_2E4CC

loc_2E406:
		cmpi.w	#-$14,$2E(a0)
		blt.s	loc_2E426
		btst	#1,$2D(a1)
		beq.w	locret_2E4CC
		bclr	#1,$2D(a1)
		bset	#2,$2D(a1)
		bra.s	loc_2E464
; ===========================================================================

loc_2E426:				
		cmpi.w	#-$40,$2E(a0)
		bge.w	locret_2E4CC
		move.w	($FFFFB008).w,d1
		subi.w	#8,d1
		btst	#0,1(a0)
		beq.s	loc_2E454
		add.w	$2E(a0),d1
		sub.w	8(a0),d1
		bgt.w	locret_2E4CC
		cmpi.w	#-$18,d1
		bge.s	loc_2E464
		rts	
; ===========================================================================

loc_2E454:				
		sub.w	$2E(a0),d1
		sub.w	8(a0),d1
		blt.s	locret_2E4CC
		cmpi.w	#$18,d1
		bgt.s	locret_2E4CC

loc_2E464:				
		bset	#5,$2E(a1)
		bclr	#2,$2E(a1)
		move.w	#$12,$2A(a0)
		jsr	SingleObjLoad2
		bne.s	locret_2E4CC
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.b	#$10,$24(a1)
		move.b	#8,$25(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#5,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#$B,$1C(a1)
		move.w	#$24,$2A(a1) ; '$'

locret_2E4CC:				
		rts	
; ===========================================================================

loc_2E4CE:				
		moveq	#1,d0
		btst	#4,$2E(a1)
		bne.s	loc_2E4DA
		moveq	#-1,d0

loc_2E4DA:				
		cmpi.w	#-$10,$2E(a0)
		bne.s	loc_2E552
		bclr	#4,$2E(a1)
		beq.s	loc_2E552
		bclr	#2,$2E(a1)
		clr.b	$25(a0)
		movea.l	a1,a2
		jsr	SingleObjLoad2
		bne.s	locret_2E550
		_move.b	#$5D,0(a1) ; ']'
		move.l	$34(a0),$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$2500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#4,$24(a1)
		move.b	#0,$25(a0)
		bra.s	locret_2E550
; ===========================================================================
		move.b	#$A,$24(a1)
		move.l	$34(a0),$34(a1)

locret_2E550:				
		rts	
; ===========================================================================

loc_2E552:				
		move.w	$2E(a0),d1
		cmpi.w	#-$28,d1
		bge.s	loc_2E59C
		cmpi.w	#-$40,d1
		bge.s	loc_2E594
		move.b	#8,$1C(a0)
		cmpi.w	#-$58,d1
		blt.s	loc_2E57E
		bgt.s	loc_2E578
		btst	#4,$2E(a1)
		beq.s	locret_2E57C

loc_2E578:				
		add.w	d0,$2E(a0)

locret_2E57C:				
		rts	
; ===========================================================================

loc_2E57E:				
		move.w	#-$58,$2E(a0)
		btst	#0,1(a0)
		beq.s	loc_2E578
		move.w	#$58,$2E(a0) ; 'X'
		bra.s	loc_2E578
; ===========================================================================

loc_2E594:				
		move.b	#7,$1C(a0)
		bra.s	loc_2E578
; ===========================================================================

loc_2E59C:				
		move.b	#6,$1C(a0)
		bra.s	loc_2E578
; ===========================================================================

loc_2E5A4:				
		btst	#7,$22(a0)
		bne.w	loc_2EED6
		movea.l	$34(a0),a1
		move.l	$34(a1),d0
		beq.w	loc_2EED6
		movea.l	d0,a1
		bclr	#3,$2E(a1)
		beq.s	loc_2E5D8
		move.b	#$C,$24(a0)
		move.b	#0,$25(a0)
		move.b	#-$79,$20(a0)
		bra.s	loc_2E638
; ===========================================================================

loc_2E5D8:				
		bclr	#1,$2E(a1)
		bne.s	loc_2E5E8
		tst.b	$1C(a0)
		bne.s	loc_2E638
		rts	
; ===========================================================================

loc_2E5E8:				
		tst.b	$1C(a0)
		bne.s	loc_2E5F4
		move.b	#$B,$1C(a0)

loc_2E5F4:				
		addi.b	#1,$1C(a0)
		cmpi.b	#$17,$1C(a0)
		blt.s	loc_2E638
		bclr	#0,$2E(a1)
		bset	#2,$2E(a1)
		bra.s	loc_2E638
; ===========================================================================

loc_2E610:				
		btst	#7,$22(a0)
		bne.w	loc_2EED6
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		btst	#5,$2E(a1)
		beq.s	loc_2E638
		cmpi.b	#9,$1C(a0)
		bne.s	loc_2E638
		move.b	#$A,$1C(a0)

loc_2E638:				
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	1(a1),1(a0)
		move.b	$22(a1),$22(a0)
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E666:				
		btst	#7,$22(a0)
		bne.w	loc_2EED6
		subq.w	#1,$2A(a0)
		beq.w	loc_2EED6
		bra.s	loc_2E638
; ===========================================================================

loc_2E67A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2E688(pc,d0.w),d1
		jmp	off_2E688(pc,d1.w)
; ===========================================================================
off_2E688:	dc.w loc_2E692-off_2E688; 0 
		dc.w loc_2E6CA-off_2E688; 1
		dc.w loc_2E7D0-off_2E688; 2
		dc.w loc_2E746-off_2E688; 3
		dc.w loc_2E790-off_2E688; 4
; ===========================================================================

loc_2E692:				
		addq.b	#2,$25(a0)
		move.b	#$20,$16(a0) ; ' '
		move.b	#$19,$1C(a0)
		move.w	#0,$12(a0)
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		btst	#2,$2D(a1)
		beq.s	loc_2E6CA
		bclr	#2,$2D(a1)
		move.b	#6,$25(a0)
		move.w	#9,$2A(a0)

loc_2E6CA:				
					
		bsr.w	loc_2EF0C
		jsr	loc_1EDFA
		tst.w	d1
		bmi.s	loc_2E6F2
		cmpi.w	#$518,$C(a0)
		bge.s	loc_2E728
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E6F2:				
		add.w	d1,$C(a0)
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		bset	#2,$2E(a1)
		bset	#4,$2E(a1)
		move.b	#2,$25(a1)
		addq.b	#2,$25(a0)
		move.b	#0,$28(a0)
		move.w	#$E6,d0	
		bsr.w	loc_2EEE2
		jmp	DisplaySprite
; ===========================================================================

loc_2E728:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		bset	#2,$2E(a1)
		bset	#4,$2E(a1)
		move.b	#2,$25(a1)
		bra.w	loc_2EED6
; ===========================================================================

loc_2E746:				
		subi.w	#1,$2A(a0)
		bpl.s	loc_2E77A
		move.b	#2,$18(a0)
		move.b	#$25,$1A(a0) ; '%'
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addq.b	#2,$25(a0)
		move.b	#8,$1E(a0)
		bra.s	loc_2E790
; ===========================================================================

loc_2E77A:				
		bsr.w	loc_2EF12
		lea	(off_2EA3C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================

loc_2E790:				
					
		subi.b	#1,$1E(a0)
		bpl.s	loc_2E7B6
		addi.b	#1,$1A(a0)
		move.b	#8,$1E(a0)
		cmpi.b	#$27,$1A(a0) ; '''
		bgt.w	loc_2E728
		blt.s	loc_2E7B6
		addi.b	#$C,$1E(a0)

loc_2E7B6:				
		movea.l	$34(a0),a1
		movea.l	$34(a1),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		jmp	DisplaySprite
; ===========================================================================

loc_2E7D0:				
		moveq	#0,d0
		move.b	$28(a0),d0
		bne.w	loc_2E8CC
		addi.w	#$18,$C(a0)
		addi.w	#$C,8(a0)
		btst	#0,1(a0)
		beq.s	loc_2E7F4
		subi.w	#$18,8(a0)

loc_2E7F4:				
		move.b	#4,$16(a0)
		move.b	#4,$17(a0)

loc_2E800:
		addq.b	#1,$28(a0)

loc_2E804:
		move.b	#9,$1A(a0)

loc_2E80A:
		move.w	$12(a0),d0
		lsr.w	#1,d0
		neg.w	d0
		move.w	d0,$12(a0)
		jsr	(RandomNumber).l
		asr.w	#6,d0
		bmi.s	loc_2E824
		addi.w	#$200,d0

loc_2E824:				
		addi.w	#-$100,d0
		move.w	d0,$10(a0)
		move.b	#0,$20(a0)
		moveq	#3,d3

loc_2E834:				
		jsr	SingleObjLoad2
		bne.w	loc_2E8C8
		_move.b	#$5D,0(a1) ; ']'
		move.l	a0,$34(a1)
		move.l	#Map_2EADC,4(a1)
		move.w	#$6500,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#2,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#4,$16(a1)
		move.b	#4,$17(a1)
		move.b	#9,$1A(a1)
		move.b	#$C,$24(a1)
		move.b	#4,$25(a1)
		move.b	#1,$28(a1)
		move.w	$12(a0),$12(a1)
		move.b	$20(a0),$20(a1)
		jsr	(RandomNumber).l
		asr.w	#6,d0
		bmi.s	loc_2E8B2
		addi.w	#$80,d0	

loc_2E8B2:				
		addi.w	#-$80,d0
		move.w	d0,$10(a1)
		swap	d0
		andi.w	#$3FF,d0
		sub.w	d0,$12(a1)
		dbf	d3,loc_2E834

loc_2E8C8:				
		bra.w	loc_2EED0
; ===========================================================================

loc_2E8CC:				
		bsr.w	loc_2EF0C
		jsr	loc_1EDFA
		tst.w	d1
		bmi.s	loc_2E8DE
		bra.w	loc_2EEDC
; ===========================================================================

loc_2E8DE:				
		bra.w	loc_2EED6
; ===========================================================================
		add.w	d1,$C(a0)
		move.w	$12(a0),d0
		lsr.w	#1,d0
		neg.w	d0
		move.w	d0,$12(a0)
		bra.w	loc_2EED0
; ===========================================================================

loc_2E8F6:				
		movea.l	$34(a0),a1
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)

loc_2E906:
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		move.b	$3E(a1),d0
		cmpi.b	#$1F,d0
		bne.s	loc_2E922
		move.b	#2,$1C(a0)

loc_2E922:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_2E932
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_2E938

loc_2E932:				
		move.b	#3,$1C(a0)

loc_2E938:				
		lea	(off_2ED5C).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================
byte_2E94A:	dc.b   0		; 0
		dc.b $FF		; 1
		dc.b   1		; 2
		dc.b   0		; 3
; ===========================================================================

loc_2E94E:				
		btst	#7,$22(a0)
		bne.s	loc_2E9A8
		movea.l	$34(a0),a1
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		subq.b	#1,$1E(a0)
		bpl.s	loc_2E996
		move.b	#1,$1E(a0)
		move.b	$2A(a0),d0
		addq.b	#1,d0
		cmpi.b	#2,d0
		ble.s	loc_2E98C
		moveq	#0,d0

loc_2E98C:				
		move.b	byte_2E94A(pc,d0.w),$1A(a0)
		move.b	d0,$2A(a0)

loc_2E996:				
		cmpi.b	#-1,$1A(a0)
		bne.w	loc_2EED0
		move.b	#0,$1A(a0)
		rts	
; ===========================================================================

loc_2E9A8:				
		movea.l	$34(a0),a1
		btst	#6,$2E(a1)
		bne.s	loc_2E9B6
		rts	
; ===========================================================================

loc_2E9B6:				
		addq.b	#2,$25(a0)
		move.l	#Map_2EEA0,4(a0)
		move.w	#$418,2(a0)
		bsr.w	loc_2EEFA
		move.b	#0,$1A(a0)
		move.b	#5,$1E(a0)
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#4,$C(a0)
		subi.w	#$28,8(a0) ; '('
		rts	
; ===========================================================================

loc_2E9F6:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_2EA38
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#4,$1A(a0)
		bne.w	loc_2EA38
		move.b	#0,$1A(a0)
		movea.l	$34(a0),a1
		move.b	(a1),d0
		beq.w	loc_2EED6
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#4,$C(a0)
		subi.w	#$28,8(a0) ; '('

loc_2EA38:				
		bra.w	loc_2EED0
; ===========================================================================
off_2EA3C:	dc.w byte_2EA72-off_2EA3C; 0 
		dc.w byte_2EA75-off_2EA3C; 1
		dc.w byte_2EA78-off_2EA3C; 2
		dc.w byte_2EA7D-off_2EA3C; 3
		dc.w byte_2EA81-off_2EA3C; 4
		dc.w byte_2EA88-off_2EA3C; 5
		dc.w byte_2EA8B-off_2EA3C; 6
		dc.w byte_2EA8E-off_2EA3C; 7
		dc.w byte_2EA91-off_2EA3C; 8
		dc.w byte_2EA94-off_2EA3C; 9
		dc.w byte_2EA97-off_2EA3C; 10
		dc.w byte_2EAA3-off_2EA3C; 11
		dc.w byte_2EAAE-off_2EA3C; 12
		dc.w byte_2EAB1-off_2EA3C; 13
		dc.w byte_2EAB4-off_2EA3C; 14
		dc.w byte_2EAB7-off_2EA3C; 15
		dc.w byte_2EABA-off_2EA3C; 16
		dc.w byte_2EABD-off_2EA3C; 17
		dc.w byte_2EAC0-off_2EA3C; 18
		dc.w byte_2EAC3-off_2EA3C; 19
		dc.w byte_2EAC6-off_2EA3C; 20
		dc.w byte_2EAC9-off_2EA3C; 21
		dc.w byte_2EACC-off_2EA3C; 22
		dc.w byte_2EACF-off_2EA3C; 23
		dc.w byte_2EAD2-off_2EA3C; 24
		dc.w byte_2EAD5-off_2EA3C; 25
		dc.w byte_2EAD9-off_2EA3C; 26
byte_2EA72:	dc.b  $F,  0,$FF	; 0 
byte_2EA75:	dc.b  $F,  1,$FF	; 0 
byte_2EA78:	dc.b   5,  2,  3,  2,$FF; 0 
byte_2EA7D:	dc.b   5,  2,  3,$FF	; 0 
byte_2EA81:	dc.b   2,  4,  5,  6,  7,  8,$FF; 0 
byte_2EA88:	dc.b   3,  9,$FF	; 0 
byte_2EA8B:	dc.b  $F, $A,$FF	; 0 
byte_2EA8E:	dc.b  $F,$1C,$FF	; 0 
byte_2EA91:	dc.b  $F,$1E,$FF	; 0 
byte_2EA94:	dc.b  $F, $B,$FF	; 0 
byte_2EA97:	dc.b   3, $C, $C, $D, $D, $D, $D, $D, $C, $C,$FD,  9; 0
					
byte_2EAA3:	dc.b   3, $E, $E, $F, $F, $F, $F, $F, $E, $E,$FF; 0 
byte_2EAAE:	dc.b  $F,$10,$FF	; 0 
byte_2EAB1:	dc.b  $F,$11,$FF	; 0 
byte_2EAB4:	dc.b  $F,$12,$FF	; 0 
byte_2EAB7:	dc.b  $F,$13,$FF	; 0 
byte_2EABA:	dc.b  $F,$14,$FF	; 0 
byte_2EABD:	dc.b  $F,$15,$FF	; 0 
byte_2EAC0:	dc.b  $F,$16,$FF	; 0 
byte_2EAC3:	dc.b  $F,$17,$FF	; 0 
byte_2EAC6:	dc.b  $F,$18,$FF	; 0 
byte_2EAC9:	dc.b  $F,$19,$FF	; 0 
byte_2EACC:	dc.b  $F,$1A,$FF	; 0 
byte_2EACF:	dc.b  $F,$1B,$FF	; 0 
byte_2EAD2:	dc.b  $F,$1C,$FF	; 0 
byte_2EAD5:	dc.b   1,$1D,$1F,$FF	; 0 
byte_2EAD9:	dc.b  $F,$1E,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2EADC:				
		dc.w word_2EB2C-Map_2EADC; 0
		dc.w word_2EB46-Map_2EADC; 1
		dc.w word_2EB50-Map_2EADC; 2
		dc.w word_2EB5A-Map_2EADC; 3
		dc.w word_2EB64-Map_2EADC; 4
		dc.w word_2EB6E-Map_2EADC; 5
		dc.w word_2EB78-Map_2EADC; 6
		dc.w word_2EB82-Map_2EADC; 7
		dc.w word_2EB8C-Map_2EADC; 8
		dc.w word_2EB96-Map_2EADC; 9
		dc.w word_2EBA0-Map_2EADC; 10
		dc.w word_2EBB2-Map_2EADC; 11
		dc.w word_2EBBC-Map_2EADC; 12
		dc.w word_2EBC6-Map_2EADC; 13
		dc.w word_2EBD0-Map_2EADC; 14
		dc.w word_2EBDA-Map_2EADC; 15
		dc.w word_2EBE4-Map_2EADC; 16
		dc.w word_2EBEE-Map_2EADC; 17
		dc.w word_2EBF8-Map_2EADC; 18
		dc.w word_2EC02-Map_2EADC; 19
		dc.w word_2EC0C-Map_2EADC; 20
		dc.w word_2EC1E-Map_2EADC; 21
		dc.w word_2EC30-Map_2EADC; 22
		dc.w word_2EC42-Map_2EADC; 23
		dc.w word_2EC54-Map_2EADC; 24
		dc.w word_2EC6E-Map_2EADC; 25
		dc.w word_2EC88-Map_2EADC; 26
		dc.w word_2ECA2-Map_2EADC; 27
		dc.w word_2ECBC-Map_2EADC; 28
		dc.w word_2ECD6-Map_2EADC; 29
		dc.w word_2ECE0-Map_2EADC; 30
		dc.w word_2ED02-Map_2EADC; 31
		dc.w word_2ED0C-Map_2EADC; 32
		dc.w word_2ED16-Map_2EADC; 33
		dc.w word_2ED20-Map_2EADC; 34
		dc.w word_2ED2A-Map_2EADC; 35
		dc.w word_2ED34-Map_2EADC; 36
		dc.w word_2ED3E-Map_2EADC; 37
		dc.w word_2ED48-Map_2EADC; 38
		dc.w word_2ED52-Map_2EADC; 39
word_2EB2C:	dc.w 3			
		dc.w $B80D,    0,    0,$FFF8; 0
		dc.w $C80A,    8,    4,	   8; 4
		dc.w $E005,  $11,    8,	 $10; 8
word_2EB46:	dc.w 1			
		dc.w $FC00,  $24,  $12,$FFFC; 0
word_2EB50:	dc.w 1			
		dc.w $FC04,  $25,  $12,$FFF5; 0
word_2EB5A:	dc.w 1			
		dc.w $FC04,  $27,  $13,$FFF6; 0
word_2EB64:	dc.w 1			
		dc.w $C400,  $36,  $1B,$FFFB; 0
word_2EB6E:	dc.w 1			
		dc.w $C400,  $37,  $1B,$FFFB; 0
word_2EB78:	dc.w 1			
		dc.w $C400,  $38,  $1C,$FFFB; 0
word_2EB82:	dc.w 1			
		dc.w $C401,  $39,  $1C,$FFFB; 0
word_2EB8C:	dc.w 1			
		dc.w $C401,  $3B,  $1D,$FFFB; 0
word_2EB96:	dc.w 1			
		dc.w $FC00,  $3D,  $1E,$FFFC; 0
word_2EBA0:	dc.w 2			
		dc.w	$E,  $15,   $A,	   0
		dc.w  $808,  $21,  $10,	 $18
word_2EBB2:	dc.w 1			
		dc.w $1808,  $29,  $14,	   0; 0
word_2EBBC:	dc.w 1			
		dc.w $1808,  $2C,  $16,	   0; 0
word_2EBC6:	dc.w 1			
		dc.w $1808,  $2F,  $17,	   8; 0
word_2EBD0:	dc.w 1			
		dc.w $1804,  $32,  $19,$FFFC; 0
word_2EBDA:	dc.w 1			
		dc.w $1804,  $34,  $1A,$FFFC; 0
word_2EBE4:	dc.w 1			
		dc.w $1008,  $63,  $31,	   0; 0
word_2EBEE:	dc.w 1			
		dc.w $1008,  $66,  $33,	   0; 0
word_2EBF8:	dc.w 1			
		dc.w $1008,  $69,  $34,	   0; 0
word_2EC02:	dc.w 1			
word_2EC04:	dc.w $1008,  $6C,  $36,	   0; 0
word_2EC0C:	dc.w 2			
word_2EC0E:	dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $63,  $31,	   0; 4
word_2EC1E:	dc.w 2			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $66,  $33,	   0; 4
word_2EC30:	dc.w 2			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $69,  $34,	   0; 4
word_2EC42:	dc.w 2			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $6C,  $36,	   0; 4
word_2EC54:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $6C,  $36,	   0; 4
		dc.w	 8,  $63,  $31,	   0; 8
word_2EC6E:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $6C,  $36,	   0; 4
		dc.w	 8,  $66,  $33,	   0; 8
word_2EC88:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $6C,  $36,	   0; 4
		dc.w	 8,  $69,  $34,	   0; 8
word_2ECA2:	dc.w 3			
		dc.w $1008,  $6C,  $36,	   0; 0
		dc.w  $808,  $6C,  $36,	   0; 4
		dc.w	 8,  $6C,  $36,	   0; 8
word_2ECBC:	dc.w 3			
		dc.w	$E,  $15,   $A,	   0; 0
		dc.w  $808,  $21,  $10,	 $18; 4
		dc.w  $808,  $21,  $10,	 $30; 8
word_2ECD6:	dc.w 1			
		dc.w	$B,  $3E,  $1F,	   0; 0
word_2ECE0:	dc.w 4			
		dc.w	$E,  $15,   $A,	   0; 0
		dc.w  $808,  $21,  $10,	 $18; 4
		dc.w  $808,  $21,  $10,	 $30; 8
		dc.w  $808,  $21,  $10,	 $48; 12
word_2ED02:	dc.w 1			
word_2ED04:	dc.w	$B, $83E, $81F,	   0; 0
word_2ED0C:	dc.w 1			
		dc.w	$E,  $15,   $A,	   0; 0
word_2ED16:	dc.w 1			
		dc.w	 8,  $21,  $10,	   0; 0
word_2ED20:	dc.w 1			
		dc.w $B80D,    0,    0,$FFF8; 0
word_2ED2A:	dc.w 1			
		dc.w $C80A,    8,    4,	   8; 0
word_2ED34:	dc.w 1			
		dc.w $E005,  $11,    8,	 $10; 0
word_2ED3E:	dc.w 1			
		dc.w $E00A,  $4A,  $25,$FFF0; 0
word_2ED48:	dc.w 1			
		dc.w $E80D,  $53,  $29,$FFF0; 0
word_2ED52:	dc.w 1			
		dc.w $E80D,  $5B,  $2D,$FFF0; 0
off_2ED5C:	dc.w byte_2ED66-off_2ED5C; 0 
		dc.w byte_2ED69-off_2ED5C; 1
		dc.w byte_2ED6D-off_2ED5C; 2
		dc.w byte_2ED76-off_2ED5C; 3
		dc.w byte_2ED7F-off_2ED5C; 4
byte_2ED66:	dc.b  $F,  0,$FF	; 0 
byte_2ED69:	dc.b   7,  1,  2,$FF	; 0 
byte_2ED6D:	dc.b   7,  5,  5,  5,  5,  5,  5,$FD,  1; 0 
byte_2ED76:	dc.b   7,  3,  4,  3,  4,  3,  4,$FD,  1; 0 
byte_2ED7F:	dc.b  $F,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,$FD,  1; 0
					
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2ED8C:				
		dc.w word_2ED9A-Map_2ED8C; 0
		dc.w word_2EDBC-Map_2ED8C; 1
		dc.w word_2EDDE-Map_2ED8C; 2
		dc.w word_2EE00-Map_2ED8C; 3
		dc.w word_2EE22-Map_2ED8C; 4
		dc.w word_2EE44-Map_2ED8C; 5
		dc.w word_2EE66-Map_2ED8C; 6
word_2ED9A:	dc.w 4			
		dc.w $F805,    0,    0,$FFE0; 0
		dc.w  $805,    4,    2,$FFE0; 4
		dc.w $F80F,    8,    4,$FFF0; 8
		dc.w $F807,  $18,   $C,	 $10; 12
word_2EDBC:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $30,  $18,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2EDDE:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $38,  $1C,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2EE00:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $40,  $20,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2EE22:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $48,  $24,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2EE44:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $50,  $28,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2EE66:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $58,  $2C,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2EE88:				
		dc.w word_2EE8C-Map_2EE88; 0
		dc.w word_2EE96-Map_2EE88; 1
word_2EE8C:	dc.w 1			
		dc.w	 5,    0,    0,	 $1C; 0
word_2EE96:	dc.w 1			
		dc.w	 5,    4,    2,	 $1C; 0
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2EEA0:				
		dc.w word_2EEA8-Map_2EEA0; 0
		dc.w word_2EEB2-Map_2EEA0; 1
		dc.w word_2EEBC-Map_2EEA0; 2
		dc.w word_2EEC6-Map_2EEA0; 3
word_2EEA8:	dc.w 1			
		dc.w $F805,    0,    0,$FFF8; 0
word_2EEB2:	dc.w 1			
		dc.w $F805,    4,    2,$FFF8; 0
word_2EEBC:	dc.w 1			
		dc.w $F805,    8,    4,$FFF8; 0
word_2EEC6:	dc.w 1			
		dc.w $F805,   $C,    6,$FFF8; 0
; ===========================================================================

loc_2EED0:				
		jmp	DisplaySprite
; ===========================================================================

loc_2EED6:				
		jmp	DeleteObject
; ===========================================================================

loc_2EEDC:				
		jmp	MarkObjGone
; ===========================================================================

loc_2EEE2:				
		jmp	(PlaySound).l
; ===========================================================================

loc_2EEE8:				
		jmp	sub_16D8A
; ===========================================================================

loc_2EEEE:				
		jmp	(AddPLC).l
; ===========================================================================

loc_2EEF4:				
		jmp	sub_40D06
; ===========================================================================

loc_2EEFA:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2EF00:				
		jmp	loc_F626
; ===========================================================================

loc_2EF06:				
		jmp	loc_F62E
; ===========================================================================

loc_2EF0C:				
		jmp	ObjectFall
; ===========================================================================

loc_2EF12:				
		jmp	SpeedToPos
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; EHZ boss
; ----------------------------------------------------------------------------

Sprite_2EF18:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_2EF26(pc,d0.w),d1
		jmp	off_2EF26(pc,d1.w)
; ===========================================================================
off_2EF26:	dc.w loc_2EF36-off_2EF26; 0 
		dc.w loc_2F262-off_2EF26; 1
		dc.w loc_2F54E-off_2EF26; 2
		dc.w loc_2F5F6-off_2EF26; 3
		dc.w loc_2F664-off_2EF26; 4
		dc.w loc_2F7F4-off_2EF26; 5
		dc.w loc_2F52A-off_2EF26; 6
		dc.w loc_2F8DA-off_2EF26; 7
; ===========================================================================

loc_2EF36:				
		move.l	#Map_2FAF8,4(a0)
		move.w	#$23A0,2(a0)
		ori.b	#4,1(a0)
		move.b	#-$7F,$28(a0)
		move.w	#$29D0,8(a0)
		move.w	#$426,$C(a0)
		move.b	#$20,$19(a0) ; ' '
		move.b	#$14,$16(a0)
		move.b	#4,$18(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$21(a0)
		addq.b	#2,$24(a0)
		move.w	8(a0),$30(a0)
		move.w	$C(a0),$38(a0)
		bsr.w	loc_2FC36
		jsr	SingleObjLoad2
		bne.w	loc_2EFE4
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	a1,$34(a0)
		move.l	#Map_2FAF8,4(a1)
		move.w	#$3A0,2(a1)
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#4,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#$E,$24(a1)
		move.b	#1,$1C(a1)
		move.b	1(a0),1(a1)

loc_2EFE4:				
		jsr	SingleObjLoad2
		bne.s	loc_2F032
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2FA58,4(a1)

loc_2EFFE:
		move.w	#$400,2(a1)

loc_2F004:
		bsr.w	loc_2FC1E

loc_2F008:
		move.b	#4,1(a1)
		move.b	#$30,$19(a1) ; '0'
		move.b	#$10,$16(a1)
		move.b	#3,$18(a1)
		move.w	#$2AF0,8(a1)
		move.l	$C(a0),$C(a1)
		move.b	#6,$24(a1)

loc_2F032:				
		bsr.w	loc_2F098
		subi.w	#8,$38(a0)
		move.w	#$2AF0,8(a0)
		move.w	#$2F8,$C(a0)
		jsr	SingleObjLoad2
		bne.s	locret_2F096
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2F970,4(a1)
		move.w	#$256C,2(a1)
		bsr.w	loc_2FC1E
		move.b	#4,1(a1)
		move.b	#$40,$19(a1) ; '@'
		move.b	#3,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		move.w	#$1E,$2A(a1)
		move.b	#4,$24(a1)

locret_2F096:				
		rts	
; ===========================================================================

loc_2F098:				
		jsr	SingleObjLoad2
		bne.s	loc_2F110
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2FA58,4(a1)
		move.w	#$2400,2(a1)
		bsr.w	loc_2FC1E
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#2,$18(a1)
		move.b	#$10,$16(a1)
		move.b	#$10,$17(a1)
		move.w	#$2AF0,8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#$1C,8(a1)
		addi.w	#$C,$C(a1)
		move.b	#8,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#1,$1C(a1)
		move.w	#$A,$2A(a1)
		move.b	#0,$28(a1)

loc_2F110:				
		jsr	SingleObjLoad2
		bne.s	loc_2F188
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2FA58,4(a1)
		move.w	#$2400,2(a1)
		bsr.w	loc_2FC1E
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#2,$18(a1)
		move.b	#$10,$16(a1)
		move.b	#$10,$17(a1)
		move.w	#$2AF0,8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#-$C,8(a1)
		addi.w	#$C,$C(a1)
		move.b	#8,$24(a1)
		move.b	#4,$1A(a1)
		move.b	#1,$1C(a1)
		move.w	#$A,$2A(a1)
		move.b	#1,$28(a1)

loc_2F188:				
		jsr	SingleObjLoad2
		bne.s	loc_2F200
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2FA58,4(a1)
		move.w	#$2400,2(a1)
		bsr.w	loc_2FC1E
		move.b	#4,1(a1)
		move.b	#$10,$19(a1)
		move.b	#3,$18(a1)
		move.b	#$10,$16(a1)
		move.b	#$10,$17(a1)
		move.w	#$2AF0,8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#-$2C,8(a1)
		addi.w	#$C,$C(a1)
		move.b	#8,$24(a1)
		move.b	#6,$1A(a1)
		move.b	#2,$1C(a1)
		move.w	#$A,$2A(a1)
		move.b	#2,$28(a1)

loc_2F200:				
		jsr	SingleObjLoad2

loc_2F206:
		bne.s	locret_2F260

loc_2F208:
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2FA58,4(a1)
		move.w	#$2400,2(a1)
		bsr.w	loc_2FC1E
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#2,$18(a1)
		move.w	#$2AF0,8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#-$36,8(a1)
		addi.w	#8,$C(a1)
		move.b	#$A,$24(a1)
		move.b	#1,$1A(a1)
		move.b	#0,$1C(a1)

locret_2F260:				
		rts	
; ===========================================================================

loc_2F262:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2F270(pc,d0.w),d1
		jmp	off_2F270(pc,d1.w)
; ===========================================================================
off_2F270:	dc.w loc_2F27C-off_2F270; 0 
		dc.w loc_2F2A8-off_2F270; 1
		dc.w loc_2F304-off_2F270; 2
		dc.w loc_2F336-off_2F270; 3
		dc.w loc_2F374-off_2F270; 4
		dc.w loc_2F38A-off_2F270; 5
; ===========================================================================

loc_2F27C:				
		move.b	#0,$20(a0)
		cmpi.w	#$29D0,8(a0)
		ble.s	loc_2F29A

loc_2F28A:
		subi.w	#1,8(a0)
		addi.w	#1,$C(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F29A:				
		move.w	#$29D0,8(a0)
		addq.b	#2,$25(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2A8:				
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_2F2B6(pc,d0.w),d1
		jmp	off_2F2B6(pc,d1.w)
; ===========================================================================
off_2F2B6:	dc.w loc_2F2BA-off_2F2B6; 0 
		dc.w loc_2F2E0-off_2F2B6; 1
; ===========================================================================

loc_2F2BA:				
		cmpi.w	#$41E,$C(a0)
		bge.s	loc_2F2CC
		addi.w	#1,$C(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2CC:				
		addq.b	#2,$2C(a0)
		bset	#0,$2D(a0)
		move.w	#$3C,$2A(a0) ; '<'
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F2E0:				
		subi.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		move.w	#-$200,$10(a0)
		addq.b	#2,$25(a0)
		move.b	#$F,$20(a0)
		bset	#1,$2D(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F304:				
		bsr.w	loc_2F4A6
		bsr.w	loc_2F484
		move.w	$2E(a0),d0
		lsr.w	#1,d0
		subi.w	#$14,d0
		move.w	d0,$C(a0)
		move.w	#0,$2E(a0)
		move.l	8(a0),d2
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.l	d2,8(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F336:				
		subq.w	#1,$3C(a0)
		bmi.s	loc_2F35C
		bsr.w	loc_2D6CC
		bsr.w	loc_2FC48
		bsr.w	loc_2FC24
		tst.w	d1
		bpl.w	JmpTo35_DisplaySprite
		add.w	d1,$C(a0)
		move.w	#0,$12(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F35C:				
		clr.w	$10(a0)
		addq.b	#2,$25(a0)
		move.w	#-$26,$3C(a0)
		move.w	#$C,$2A(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F374:				
		subq.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		addq.b	#2,$25(a0)
		move.b	#0,$2C(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F38A:				
		moveq	#0,d0
		move.b	$2C(a0),d0
		move.w	off_2F39C(pc,d0.w),d1
		jsr	off_2F39C(pc,d1.w)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================
off_2F39C:	dc.w loc_2F3A2-off_2F39C; 0 
		dc.w loc_2F424-off_2F39C; 1
		dc.w loc_2F442-off_2F39C; 2
; ===========================================================================

loc_2F3A2:				
		bclr	#0,$2D(a0)
		bsr.w	loc_2FC12
		bne.w	locret_2F422
		_move.b	#$56,0(a1) ; 'V'
		move.l	a0,$34(a1)
		move.l	#off_2F970,4(a1)
		move.w	#$256C,2(a1)
		bsr.w	loc_2FC1E
		move.b	#4,1(a1)
		move.b	#$20,$19(a1) ; ' '
		move.b	#3,$18(a1)
		move.l	8(a0),8(a1)
		move.l	$C(a0),$C(a1)
		addi.w	#$C,$C(a1)
		move.b	$22(a0),$22(a1)

loc_2F3F6:
		move.b	1(a0),1(a1)

loc_2F3FC:
		move.b	#$C,$24(a1)

loc_2F402:
		move.b	#2,$1C(a1)

loc_2F408:
		move.w	#$10,$2A(a1)
		move.w	#$32,$2A(a0) ; '2'
		addq.b	#2,$2C(a0)
		bsr.w	loc_2FC3C
		move.b	#1,(v_boss_status).w

locret_2F422:				
		rts	
; ===========================================================================

loc_2F424:				
		subi.w	#1,$2A(a0)
		bpl.s	locret_2F440
		bset	#2,$2D(a0)
		move.w	#$60,$2A(a0) ; '`'
		addq.b	#2,$2C(a0)
		bsr.w	loc_2FC42

locret_2F440:				
		rts	
; ===========================================================================

loc_2F442:				
		subi.w	#1,$2A(a0)
		bpl.s	loc_2F45C
		bset	#0,$22(a0)
		bset	#0,1(a0)
		addq.w	#6,8(a0)
		bra.s	loc_2F460
; ===========================================================================

loc_2F45C:				
		subq.w	#1,$C(a0)

loc_2F460:				
		cmpi.w	#$2AB0,(v_boundary_right_next).w
		bcc.s	loc_2F46E
		addq.w	#2,(v_boundary_right_next).w
		bra.s	locret_2F482
; ===========================================================================

loc_2F46E:				
		tst.b	1(a0)
		bmi.s	locret_2F482
		addq.w	#4,sp
		movea.l	$34(a0),a1
		bsr.w	JmpTo5_DeleteObject2
		bra.w	JmpTo52_DeleteObject
; ===========================================================================

locret_2F482:				
		rts	
; ===========================================================================

loc_2F484:				
		move.w	8(a0),d0
		cmpi.w	#$28A0,d0
		ble.s	loc_2F494
		cmpi.w	#$2B08,d0
		blt.s	locret_2F4A4

loc_2F494:				
		bchg	#0,$22(a0)
		bchg	#0,1(a0)
		neg.w	$10(a0)

locret_2F4A4:				
		rts	
; ===========================================================================

loc_2F4A6:				
		cmpi.b	#6,$25(a0)
		bcc.s	locret_2F4EC
		tst.b	$22(a0)
		bmi.s	loc_2F4EE
		tst.b	$20(a0)
		bne.s	locret_2F4EC
		tst.b	$3E(a0)
		bne.s	loc_2F4D0
		move.b	#$20,$3E(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_2F4D0:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_2F4DE
		move.w	#$EEE,d0

loc_2F4DE:				
		move.w	d0,(a1)
		subq.b	#1,$3E(a0)
		bne.s	locret_2F4EC
		move.b	#$F,$20(a0)

locret_2F4EC:				
		rts	
; ===========================================================================

loc_2F4EE:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_2FC30
		move.b	#6,$25(a0)
		move.w	#0,$10(a0)

loc_2F500:
		move.w	#-$180,$12(a0)
		move.w	#$B3,$3C(a0)
		bset	#3,$2D(a0)
		movea.l	$34(a0),a1
		move.b	#4,$1C(a1)
		move.b	#6,$1A(a1)
		moveq	#$40,d0	; '@'
		bra.w	loc_2FC2A
; ===========================================================================
		rts	
; ===========================================================================

loc_2F52A:				
		subi.w	#1,$C(a0)
		subi.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		move.b	#4,$24(a0)
		lea	(off_2F936).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F54E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2F55C(pc,d0.w),d1
		jmp	off_2F55C(pc,d1.w)
; ===========================================================================
off_2F55C:	dc.w loc_2F560-off_2F55C; 0 
		dc.w loc_2F5C6-off_2F55C; 1
; ===========================================================================

loc_2F560:				
		movea.l	$34(a0),a1
		cmpi.b	#$56,(a1) ; 'V'
		bne.w	JmpTo52_DeleteObject
		btst	#0,$2D(a1)
		beq.s	loc_2F58E
		move.b	#1,$1C(a0)
		move.w	#$18,$2A(a0)
		addq.b	#2,$25(a0)
		move.b	#-8,d0
		bsr.w	loc_2FC0C
		bra.s	loc_2F5A0
; ===========================================================================

loc_2F58E:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_2F5A0
		move.b	#-$22,d0
		bsr.w	loc_2FC0C

loc_2F5A0:				
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		lea	(off_2F936).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5C6:				
		subi.w	#1,$2A(a0)
		bpl.s	loc_2F5E8
		cmpi.w	#-$10,$2A(a0)
		ble.w	JmpTo52_DeleteObject
		move.b	#4,$18(a0)
		addi.w	#1,$C(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5E8:				
		lea	(off_2F936).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F5F6:				
		tst.b	$25(a0)
		bne.s	loc_2F626
		cmpi.w	#$28F0,(v_boundary_left_next).w
		bcs.w	JmpTo35_DisplaySprite
		cmpi.w	#$29D0,8(a0)
		ble.s	loc_2F618
		subi.w	#1,8(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F618:				
		move.w	#$29D0,8(a0)
		addq.b	#2,$25(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F626:				
		movea.l	$34(a0),a1
		btst	#1,$2D(a1)
		beq.w	JmpTo35_DisplaySprite
		btst	#2,$2D(a1)
		bne.w	JmpTo35_DisplaySprite
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#8,$C(a0)
		move.b	$22(a1),$22(a0)
		bmi.w	JmpTo35_DisplaySprite
		move.b	1(a1),1(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F664:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2F672(pc,d0.w),d1
		jmp	off_2F672(pc,d1.w)
; ===========================================================================
off_2F672:	dc.w loc_2F67C-off_2F672; 0 
		dc.w loc_2F714-off_2F672; 1
		dc.w loc_2F746-off_2F672; 2
		dc.w loc_2F7A6-off_2F672; 3
		dc.w loc_2F7D2-off_2F672; 4
; ===========================================================================

loc_2F67C:				
		cmpi.w	#$28F0,(v_boundary_left_next).w
		bcs.w	JmpTo35_DisplaySprite
		move.w	#$100,$12(a0)
		cmpi.b	#1,$28(a0)
		bgt.s	loc_2F6B6
		beq.s	loc_2F6A6
		cmpi.w	#$29EC,8(a0)
		ble.s	loc_2F6C6
		subi.w	#1,8(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6A6:				
		cmpi.w	#$29C4,8(a0)
		ble.s	loc_2F6D2
		subi.w	#1,8(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6B6:				
		cmpi.w	#$29A4,8(a0)
		ble.s	loc_2F6DE
		subi.w	#1,8(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6C6:				
		move.w	#$29EC,8(a0)
		addq.b	#2,$25(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6D2:				
		move.w	#$29C4,8(a0)
		addq.b	#2,$25(a0)
		bra.s	loc_2F6E8
; ===========================================================================

loc_2F6DE:				
		move.w	#$29A4,8(a0)
		addq.b	#2,$25(a0)

loc_2F6E8:				
		bsr.w	loc_2FC48
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_2F6FA
		add.w	d1,$C(a0)

loc_2F6FA:				
		tst.b	$25(a0)
		beq.s	loc_2F706

loc_2F700:
		move.w	#-$200,$10(a0)

loc_2F706:				
		lea	(off_2FA44).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F714:				
		movea.l	$34(a0),a1
		cmpi.b	#$56,(a1) ; 'V'
		bne.w	JmpTo52_DeleteObject
		btst	#1,$2D(a1)
		beq.w	JmpTo35_DisplaySprite
		addq.b	#2,$25(a0)
		cmpi.b	#2,$18(a0)
		bne.s	loc_2F742
		move.w	$C(a0),d0
		movea.l	$34(a0),a1
		add.w	d0,$2E(a1)

loc_2F742:				
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F746:				
		movea.l	$34(a0),a1
		cmpi.b	#$56,(a1) ; 'V'
		bne.w	JmpTo52_DeleteObject
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		tst.b	$22(a0)
		bpl.s	loc_2F768
		addq.b	#2,$25(a0)

loc_2F768:				
		bsr.w	loc_2F484
		bsr.w	loc_2FC48
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_2F77E
		add.w	d1,$C(a0)

loc_2F77E:				
		move.w	#$100,$12(a0)
		cmpi.b	#2,$18(a0)
		bne.s	loc_2F798
		move.w	$C(a0),d0
		movea.l	$34(a0),a1
		add.w	d0,$2E(a1)

loc_2F798:				
		lea	(off_2FA44).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F7A6:				
		subi.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		addq.b	#2,$25(a0)
		move.w	#$A,$2A(a0)
		move.w	#-$300,$12(a0)
		cmpi.b	#2,$18(a0)
		beq.w	JmpTo35_DisplaySprite
		neg.w	$10(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F7D2:				
		subq.w	#1,$2A(a0)
		bpl.w	JmpTo35_DisplaySprite
		bsr.w	loc_2FC48
		bsr.w	loc_2FC24
		tst.w	d1
		bpl.s	loc_2F7F0
		move.w	#-$200,$12(a0)
		add.w	d1,$C(a0)

loc_2F7F0:				
		bra.w	JmpTo36_MarkObjGone
; ===========================================================================

loc_2F7F4:				
		tst.b	$25(a0)
		bne.s	loc_2F824
		cmpi.w	#$28F0,(v_boundary_left_next).w

loc_2F800:
		bcs.w	JmpTo35_DisplaySprite
		cmpi.w	#$299A,8(a0)
		ble.s	loc_2F816

loc_2F80C:
		subi.w	#1,8(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F816:				
		move.w	#$299A,8(a0)
		addq.b	#2,$25(a0)
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F824:				
		movea.l	$34(a0),a1
		cmpi.b	#$56,(a1) ; 'V'
		bne.w	JmpTo52_DeleteObject
		btst	#3,$2D(a1)
		bne.s	loc_2F88A
		bsr.w	loc_2F8AA
		btst	#1,$2D(a1)
		beq.w	JmpTo35_DisplaySprite
		move.b	#-$75,$20(a0)
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		addi.w	#$10,$C(a0)
		move.w	#-$36,d0
		btst	#0,$22(a0)
		beq.s	loc_2F878
		neg.w	d0

loc_2F878:				
		add.w	d0,8(a0)
		lea	(off_2FA44).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F88A:				
		move.w	#-3,d0
		btst	#0,$22(a0)
		beq.s	loc_2F898
		neg.w	d0

loc_2F898:				
		add.w	d0,8(a0)
		lea	(off_2FA44).l,a1
		bsr.w	loc_2FC18
		bra.w	JmpTo35_DisplaySprite
; ===========================================================================

loc_2F8AA:				
		cmpi.b	#1,$21(a1)
		beq.s	loc_2F8B4
		rts	
; ===========================================================================

loc_2F8B4:				
		move.w	8(a0),d0
		sub.w	($FFFFB008).w,d0
		bpl.s	loc_2F8C8
		btst	#0,$22(a1)
		bne.s	loc_2F8D2
		rts	
; ===========================================================================

loc_2F8C8:				
		btst	#0,$22(a1)
		beq.s	loc_2F8D2
		rts	
; ===========================================================================

loc_2F8D2:				
		bset	#3,$2D(a1)
		rts	
; ===========================================================================

loc_2F8DA:				
		movea.l	$34(a0),a1
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		move.b	$22(a1),$22(a0)
		move.b	1(a1),1(a0)
		move.b	$3E(a1),d0
		cmpi.b	#$1F,d0
		bne.s	loc_2F906

loc_2F900:
		move.b	#2,$1C(a0)

loc_2F906:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_2F916
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_2F924

loc_2F916:				
		cmpi.b	#2,$1C(a0)
		beq.s	loc_2F924
		move.b	#3,$1C(a0)

loc_2F924:				
		lea	(off_2FAC8).l,a1
		jsr	AnimateSprite
		jmp	DisplaySprite
; ===========================================================================
off_2F936:	dc.w byte_2F93C-off_2F936; 0 
		dc.w byte_2F940-off_2F936; 1
		dc.w byte_2F956-off_2F936; 2
byte_2F93C:	dc.b   1,  5,  6,$FF	; 0 
byte_2F940:	dc.b   1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  0,  0,  0; 0
					
		dc.b   0,  0,  0,  0,  0,$FF; 16
byte_2F956:	dc.b   1,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  4,  3,  3,  3,  2; 0
					
		dc.b   2,  2,  1,  1,  1,  5,  6,$FE,  2,  0; 16
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_2F970:	dc.w word_2F97E-off_2F970; 0 
		dc.w word_2F988-off_2F970; 1
		dc.w word_2F9B2-off_2F970; 2
		dc.w word_2F9DC-off_2F970; 3
		dc.w word_2F9F6-off_2F970; 4
		dc.w word_2FA10-off_2F970; 5
		dc.w word_2FA2A-off_2F970; 6
word_2F97E:	dc.w 1			
		dc.w $D805,    0,    0,	   2; 0
word_2F988:	dc.w 5			
		dc.w $D805,    4,    2,	   2; 0
		dc.w $D80D,   $C,    6,	 $12; 4
		dc.w $D80D,   $C,    6,	 $32; 8
		dc.w $D80D,   $C,    6,$FFE2; 12
		dc.w $D80D,   $C,    6,$FFC2; 16
word_2F9B2:	dc.w 5			
		dc.w $D805,    4,    2,	   2; 0
		dc.w $D80D,   $C,    6,	 $12; 4
		dc.w $D805,    8,    4,	 $32; 8
		dc.w $D80D,   $C,    6,$FFE2; 12
		dc.w $D805,    8,    4,$FFD2; 16
word_2F9DC:	dc.w 3			
		dc.w $D805,    4,    2,	   2; 0
		dc.w $D80D,   $C,    6,	 $12; 4
		dc.w $D80D,   $C,    6,$FFE2; 8
word_2F9F6:	dc.w 3			
		dc.w $D805,    4,    2,	   2; 0
		dc.w $D805,    8,    4,	 $12; 4
		dc.w $D805,    8,    4,$FFF2; 8
word_2FA10:	dc.w 3			
		dc.w $D805,    0,    0,	   2; 0
		dc.w $D80D,   $C,    6,	 $12; 4
		dc.w $D80D,   $C,    6,	 $32; 8
word_2FA2A:	dc.w 3			
		dc.w $D805,    4,    2,	   2; 0
		dc.w $D80D,   $C,    6,$FFE2; 4
		dc.w $D80D,   $C,    6,$FFC2; 8
off_2FA44:	dc.w byte_2FA4A-off_2FA44; 0 
		dc.w byte_2FA4F-off_2FA44; 1
		dc.w byte_2FA53-off_2FA44; 2
byte_2FA4A:	dc.b   5,  1,  2,  3,$FF; 0 
byte_2FA4F:	dc.b   1,  4,  5,$FF	; 0 
byte_2FA53:	dc.b   1,  6,  7,$FF,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_2FA58:	dc.w word_2FA68-off_2FA58; 0 
		dc.w word_2FA82-off_2FA58; 1
		dc.w word_2FA8C-off_2FA58; 2
		dc.w word_2FA96-off_2FA58; 3
		dc.w word_2FAA0-off_2FA58; 4
		dc.w word_2FAAA-off_2FA58; 5
		dc.w word_2FAB4-off_2FA58; 6
		dc.w word_2FABE-off_2FA58; 7
word_2FA68:	dc.w 3			
		dc.w $F00F,  0,	 0,$FFD0,$F00F,$10,  8,$FFF0,$F00F,$20,$10,$10;	0
word_2FA82:	dc.w 1			
		dc.w $F00F,$30,$18,$FFF0; 0
word_2FA8C:	dc.w 1			
		dc.w $F00F,$40,$20,$FFF0; 0
word_2FA96:	dc.w 1			
		dc.w $F00F,$50,$28,$FFF0; 0
word_2FAA0:	dc.w 1			
		dc.w $F00F,$60,$30,$FFF0; 0
word_2FAAA:	dc.w 1			
		dc.w $F00F,$1060,$1030,$FFF0; 0
word_2FAB4:	dc.w 1			
		dc.w $F00F,$70,$38,$FFF0; 0
word_2FABE:	dc.w 1			
		dc.w $F00F,$1070,$1038,$FFF0; 0
off_2FAC8:	dc.w byte_2FAD2-off_2FAC8; 0 
		dc.w byte_2FAD5-off_2FAC8; 1
		dc.w byte_2FAD9-off_2FAC8; 2
		dc.w byte_2FAE2-off_2FAC8; 3
		dc.w byte_2FAEB-off_2FAC8; 4
byte_2FAD2:	dc.b  $F,  0,$FF	; 0 
byte_2FAD5:	dc.b   7,  1,  2,$FF	; 0 
byte_2FAD9:	dc.b   7,  5,  5,  5,  5,  5,  5,$FD,  1; 0 
byte_2FAE2:	dc.b   7,  3,  4,  3,  4,  3,  4,$FD,  1; 0 
byte_2FAEB:	dc.b  $F,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,$FD,  1; 0
					
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_2FAF8:				
		dc.w word_2FB06-Map_2FAF8; 0
		dc.w word_2FB28-Map_2FAF8; 1
		dc.w word_2FB4A-Map_2FAF8; 2
		dc.w word_2FB6C-Map_2FAF8; 3
		dc.w word_2FB8E-Map_2FAF8; 4
		dc.w word_2FBB0-Map_2FAF8; 5
		dc.w word_2FBD2-Map_2FAF8; 6
word_2FB06:	dc.w 4			
		dc.w $F805,    0,    0,$FFE0; 0
		dc.w  $805,    4,    2,$FFE0; 4
		dc.w $F80F,    8,    4,$FFF0; 8
		dc.w $F807,  $18,   $C,	 $10; 12
word_2FB28:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $30,  $18,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2FB4A:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $38,  $1C,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2FB6C:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $40,  $20,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2FB8E:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $48,  $24,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2FBB0:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $50,  $28,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
word_2FBD2:	dc.w 4			
		dc.w $E805,  $28,  $14,$FFE0; 0
		dc.w $E80D,  $58,  $2C,$FFF0; 4
		dc.w $E805,  $24,  $12,	 $10; 8
		dc.w $D805,  $20,  $10,	   2; 12
; ===========================================================================

;	if ~RemoveJmpTos
JmpTo35_DisplaySprite:				
		jmp	DisplaySprite

JmpTo52_DeleteObject:				
		jmp	DeleteObject

JmpTo36_MarkObjGone:				
		jmp	MarkObjGone

JmpTo5_DeleteObject2:				
		jmp	DeleteObject2
		
loc_2FC0C:				
		jmp	(PlaySound).l
; ===========================================================================

loc_2FC12:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_2FC18:				
		jmp	AnimateSprite
; ===========================================================================

loc_2FC1E:				
		jmp	sub_16D8A
; ===========================================================================

loc_2FC24:				
		jmp	loc_1EDFA
; ===========================================================================

loc_2FC2A:				
		jmp	(AddPLC).l
; ===========================================================================

loc_2FC30:				
		jmp	sub_40D06
; ===========================================================================

loc_2FC36:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_2FC3C:				
		jmp	loc_F626
; ===========================================================================

loc_2FC42:				
		jmp	loc_F62E
; ===========================================================================

loc_2FC48:				
		jmp	ObjectFall
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; HTZ boss
; ----------------------------------------------------------------------------

Sprite_2FC50:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_2FC5E(pc,d0.w),d1
		jmp	off_2FC5E(pc,d1.w)
; ===========================================================================
off_2FC5E:	dc.w loc_2FC68-off_2FC5E; 0 
		dc.w loc_2FD00-off_2FC5E; 1
		dc.w loc_2FEF0-off_2FC5E; 2
		dc.w loc_2FF66-off_2FC5E; 3
		dc.w loc_30210-off_2FC5E; 4
; ===========================================================================

loc_2FC68:				
		move.l	#Map_302BC,4(a0)
		move.w	#$3C1,2(a0)
		ori.b	#4,1(a0)
		move.b	#$90,ost_mainspr_width(a0)		
	if ~FixBugs	
		; This instruction is pointless, as render_useheight_bit is not
		; set. Additionally, it clashes with 'boss_invulnerable_time', as they
		; use the same SST slot. Unlike the Casino Night Zone boss, this does
		; not result in any bugs, because 'boss_invulnerable_time' is cleared
		; right after this. 
		move.b	#$90,ost_mainspr_height(a0)
	endc	
		move.b	#4,$18(a0)
		move.w	#$3040,8(a0)
		move.w	#$580,$C(a0)
		move.b	#1,$2C(a0)
		move.b	#1,$B(a0)
		addq.b	#2,$A(a0)
		bset	#6,1(a0)
		move.b	#$32,$20(a0) ; '2'
		move.b	#8,$32(a0)
		move.w	#-$E0,(v_boss_y_vel).w
		move.w	8(a0),($FFFFF750).w
		move.w	$C(a0),(v_boss_y_pos).w
		clr.b	$14(a0)
		move.w	8(a0),$10(a0)
		move.w	$C(a0),$12(a0)
		move.b	#2,$15(a0)
		bsr.w	loc_2FCEA
		rts	
; ===========================================================================

loc_2FCEA:				
		lea	($FFFFF740).w,a2
		move.b	#6,(a2)+
		move.b	#0,(a2)+
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_2FD00:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_2FD0E(pc,d0.w),d1
		jmp	off_2FD0E(pc,d1.w)
; ===========================================================================
off_2FD0E:	dc.w loc_2FD18-off_2FD0E; 0 
		dc.w loc_2FD5E-off_2FD0E; 1
		dc.w loc_2FDDA-off_2FD0E; 2
		dc.w loc_2FE0E-off_2FD0E; 3
		dc.w loc_30106-off_2FD0E; 4
; ===========================================================================

loc_2FD18:				
		move.b	#0,(v_boss_collision_routine).w
		bsr.w	loc_2D5DE
		tst.b	$2C(a0)
		bne.s	loc_2FD32
		cmpi.w	#$518,(v_boss_y_pos).w
		bgt.s	loc_2FD50
		bra.s	loc_2FD3A
; ===========================================================================

loc_2FD32:				
		cmpi.w	#$4FC,(v_boss_y_pos).w
		bgt.s	loc_2FD50

loc_2FD3A:				
		move.w	#0,(v_boss_y_vel).w
		move.b	#4,$1A(a0)
		addq.b	#2,$26(a0)
		move.b	#$3C,$3E(a0) ; '<'

loc_2FD50:				
		move.w	(v_boss_y_pos).w,$C(a0)
		bsr.w	loc_300A4
		bra.w	loc_30430
; ===========================================================================

loc_2FD5E:				
		subi.b	#1,$3E(a0)
		bpl.s	loc_2FDC0
		move.b	#1,(v_boss_collision_routine).w
		move.b	#1,$F(a0)
		cmpi.b	#-$18,$3E(a0)
		bne.s	loc_2FDC0
		bsr.w	loc_3043C
		bne.s	loc_2FDAA
		_move.b	#$52,0(a1) ; 'R'
		move.b	#4,$A(a1)
		move.b	1(a0),1(a1)
		andi.b	#1,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#$2F,$3E(a0) ; '/'

loc_2FDAA:				
		bsr.w	loc_300A4
		bsr.w	loc_2FEDE
		lea	(off_30288).l,a1
		bsr.w	loc_2D604
		bra.w	loc_30430
; ===========================================================================

loc_2FDC0:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#7,d1
		add.w	(v_boss_y_pos).w,d1
		move.w	d1,$C(a0)
		addq.b	#4,$1A(a0)
		bra.s	loc_2FDAA
; ===========================================================================

loc_2FDDA:				
		move.b	#0,(v_boss_collision_routine).w
		move.b	#0,$F(a0)
		move.b	#$10,($FFFFF742).w
		move.b	#0,($FFFFF743).w
		subi.b	#1,$3E(a0)
		bne.w	loc_2FDC0
		move.w	#$E0,(v_boss_y_vel).w
		addq.b	#2,$26(a0)
		bsr.w	loc_2FEDE
		bra.w	loc_30430
; ===========================================================================

loc_2FE0E:				
		bsr.w	loc_2D5DE
		tst.b	$2C(a0)
		bne.s	loc_2FE22
		cmpi.w	#$538,(v_boss_y_pos).w
		blt.s	loc_2FE58
		bra.s	loc_2FE2A
; ===========================================================================

loc_2FE22:				
		cmpi.w	#$548,(v_boss_y_pos).w
		blt.s	loc_2FE58

loc_2FE2A:				
		tst.b	$38(a0)
		bne.s	loc_2FE58
		st.b	$38(a0)
		bsr.w	loc_3043C
		bne.s	loc_2FE58
		move.b	#$52,(a1) ; 'R'
		move.b	#6,$A(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#-$52,d0
		bsr.w	loc_30448

loc_2FE58:				
		tst.b	$2C(a0)
		bne.s	loc_2FE6E
		cmpi.w	#$5A0,(v_boss_y_pos).w
		blt.s	loc_2FED0
		move.w	#$5A0,(v_boss_y_pos).w
		bra.s	loc_2FE7C
; ===========================================================================

loc_2FE6E:				
		cmpi.w	#$580,(v_boss_y_pos).w
		blt.s	loc_2FED0
		move.w	#$580,(v_boss_y_pos).w

loc_2FE7C:				
		move.w	#-$E0,(v_boss_y_vel).w
		move.b	#0,$26(a0)
		sf.b	$38(a0)
		move.w	($FFFFB008).w,d0
		subi.w	#$2FC0,d0
		bmi.s	loc_2FEA8
		move.w	#$580,(v_boss_y_pos).w
		move.w	#$3040,8(a0)
		st.b	$2C(a0)
		bra.s	loc_2FEB8
; ===========================================================================

loc_2FEA8:				
		move.w	#$2F40,8(a0)
		move.w	#$5A0,(v_boss_y_pos).w
		sf.b	$2C(a0)

loc_2FEB8:				
		move.w	8(a0),d0
		cmp.w	($FFFFB008).w,d0
		bgt.s	loc_2FECA
		bset	#0,1(a0)
		bra.s	loc_2FED0
; ===========================================================================

loc_2FECA:				
		bclr	#0,1(a0)

loc_2FED0:				
		move.w	(v_boss_y_pos).w,$C(a0)
		bsr.w	loc_300A4
		bra.w	loc_30430
; ===========================================================================

loc_2FEDE:				
		move.w	8(a0),d0
		move.w	$C(a0),d1
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		rts	
; ===========================================================================

loc_2FEF0:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2FEFE(pc,d0.w),d1
		jmp	off_2FEFE(pc,d1.w)
; ===========================================================================
off_2FEFE:	dc.w loc_2FF02-off_2FEFE; 0 
		dc.w loc_2FF50-off_2FEFE; 1
; ===========================================================================

loc_2FF02:				
		move.l	#Map_302BC,4(a0)
		move.w	#$421,2(a0)
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		addq.b	#2,$25(a0)
		move.b	#5,$1C(a0)
		move.b	#-$68,$20(a0)
		subi.w	#$1C,$C(a0)
		move.w	#-$70,d0
		move.w	#-4,d1
		btst	#0,1(a0)
		beq.s	loc_2FF46
		neg.w	d0
		neg.w	d1

loc_2FF46:				
		add.w	d0,8(a0)
		move.w	d1,$10(a0)
		rts	
; ===========================================================================

loc_2FF50:				
		move.w	$10(a0),d1
		add.w	d1,8(a0)
		lea	(off_30288).l,a1
		bsr.w	loc_3044E
		bra.w	loc_30442
; ===========================================================================

loc_2FF66:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_2FF74(pc,d0.w),d1
		jmp	off_2FF74(pc,d1.w)
; ===========================================================================
off_2FF74:	dc.w loc_2FF78-off_2FF74; 0 
		dc.w loc_30008-off_2FF74; 1
; ===========================================================================

loc_2FF78:				
		movea.l	a0,a1
		moveq	#0,d2
		moveq	#1,d1
		bra.s	loc_2FF94
; ===========================================================================

loc_2FF80:				
		bsr.w	loc_3043C
		bne.w	locret_30006
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

loc_2FF94:				
		move.b	#$52,(a1) ; 'R'
		move.b	#6,$A(a1)
		move.l	#Map_302BC,4(a1)
		move.w	#$421,2(a1)
		ori.b	#4,1(a1)
		move.b	#3,$18(a1)
		addq.b	#2,$25(a1)
		move.b	#7,$1C(a1)
		move.b	#-$75,$20(a1)
		move.b	d2,$2E(a1)
		move.b	#8,$16(a1)
		move.b	#8,$17(a1)
		move.w	8(a1),$2A(a1)
		move.w	#$1C00,d0
		tst.w	d2
		bne.s	loc_2FFE8
		neg.w	d0

loc_2FFE8:				
		move.w	d0,$10(a1)
		move.w	#-$5400,$12(a1)
		cmpi.w	#$2F40,8(a1)
		beq.s	loc_30000
		move.w	#-$6400,$12(a1)

loc_30000:				
		addq.w	#1,d2

loc_30002:
		dbf	d1,loc_2FF80

locret_30006:				
		rts	
; ===========================================================================

loc_30008:				
		bsr.w	loc_30072

loc_3000C:
		bsr.w	loc_30454
		tst.w	d1
		bpl.s	loc_30064
		add.w	d1,$C(a0)
		move.b	#$20,(a0) ; ' '
		move.b	#$A,$24(a0)
		move.b	#2,$1C(a0)
		move.b	#4,$1A(a0)

loc_3002E:
		move.w	#0,$12(a0)
		move.l	#Map_23294,4(a0)
		move.w	#-$7C62,2(a0)
		bsr.w	loc_3046C
		move.b	#0,$1A(a0)
		move.w	#9,$32(a0)
		move.b	#3,$36(a0)
		move.b	#-$4D,d0
		bsr.w	loc_30448
		bra.w	loc_30460
; ===========================================================================

loc_30064:				
		lea	(off_30288).l,a1
		bsr.w	loc_3044E
		bra.w	loc_30442
; ===========================================================================

loc_30072:				
		move.l	$2A(a0),d2
		move.l	$C(a0),d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#4,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		addi.w	#$380,$12(a0)
		ext.l	d0
		asl.l	#4,d0
		add.l	d0,d3
		move.l	d2,$2A(a0)
		move.l	d3,$C(a0)
		move.w	$2A(a0),8(a0)
		rts	
; ===========================================================================

loc_300A4:				
		cmpi.b	#8,$26(a0)
		bcc.s	locret_300EA
		tst.b	$32(a0)
		beq.s	loc_300EC
		tst.b	$20(a0)
		bne.s	locret_300EA
		tst.b	$14(a0)
		bne.s	loc_300CE
		move.b	#$20,$14(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_300CE:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_300DC
		move.w	#$EEE,d0

loc_300DC:				
		move.w	d0,(a1)
		subq.b	#1,$14(a0)
		bne.s	locret_300EA
		move.b	#$32,$20(a0) ; '2'

locret_300EA:				
		rts	
; ===========================================================================

loc_300EC:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_30466
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,$26(a0)
		moveq	#$40,d0	; '@'
		bsr.w	loc_3045A
		rts	
; ===========================================================================

loc_30106:				
		move.b	#0,$F(a0)
		subi.w	#1,(v_boss_timer).w
		bmi.s	loc_30142
		cmpi.w	#$1E,(v_boss_timer).w
		bgt.s	loc_3013A
		move.b	#$10,$B(a0)
		bsr.w	loc_2D6CC
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.w	loc_30430
		bsr.w	loc_301B4
		bra.w	loc_30430
; ===========================================================================

loc_3013A:				
		bsr.w	loc_2D6CC
		bra.w	loc_30430
; ===========================================================================

loc_30142:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.w	loc_30152
		bsr.w	loc_301B4

loc_30152:				
		cmpi.w	#-$3C,(v_boss_timer).w
		bgt.w	loc_30430
		tst.b	(v_boss_status).w
		bne.s	loc_30170
		bsr.w	loc_30472
		bsr.w	loc_30478
		move.b	#1,(v_boss_status).w

loc_30170:				
		addq.w	#2,$C(a0)
		cmpi.w	#$3160,(v_boundary_right_next).w
		bcc.s	loc_30182
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_301A6
; ===========================================================================

loc_30182:				
		tst.b	1(a0)
		bpl.s	loc_301AA
		tst.b	$2C(a0)
		bne.s	loc_3019C
		cmpi.w	#$578,$C(a0)
		bgt.w	loc_301AA
		bra.w	loc_30430
; ===========================================================================

loc_3019C:				
		cmpi.w	#$588,$C(a0)
		bgt.w	loc_301AA

loc_301A6:				
		bra.w	loc_30430
; ===========================================================================

loc_301AA:				
		move.w	#$3160,(v_boundary_right_next).w
		bra.w	loc_30436
; ===========================================================================

loc_301B4:				
		bsr.w	loc_3043C
		bne.s	locret_3020E
		move.b	#$52,(a1) ; 'R'
		move.b	#8,$A(a1)
		move.l	#off_30258,4(a1)
		move.w	#$5E4,2(a1)
		ori.b	#4,1(a1)
		move.b	#1,$18(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	8(a0),$2A(a1)
		subi.w	#$28,$C(a1) ; '('
		move.w	#-$60,$10(a1)
		move.w	#-$C0,$12(a1)
		move.b	#0,$1A(a1)
		move.b	#$11,$1E(a1)

locret_3020E:				
		rts	
; ===========================================================================

loc_30210:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_3022A
		move.b	#$11,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#4,$1A(a0)
		beq.w	loc_30436

loc_3022A:				
		move.l	$2A(a0),d2
		move.l	$C(a0),d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$2A(a0)
		move.w	$2A(a0),8(a0)
		move.l	d3,$C(a0)
		bra.w	loc_30430
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_30258:	dc.w word_30260-off_30258; 0 
		dc.w word_3026A-off_30258; 1
		dc.w word_30274-off_30258; 2
		dc.w word_3027E-off_30258; 3
word_30260:	dc.w 1			
		dc.w $F805,$2000,$2000,$FFF8; 0
word_3026A:	dc.w 1			
		dc.w $F805,$2004,$2002,$FFF8; 0
word_30274:	dc.w 1			
		dc.w $F805,$2008,$2004,$FFF8; 0
word_3027E:	dc.w 1			
		dc.w $F805,$200C,$2006,$FFF8; 0
off_30288:	dc.w byte_30298-off_30288; 0 
		dc.w byte_3029D-off_30288; 1
		dc.w byte_302A2-off_30288; 2
		dc.w byte_302A7-off_30288; 3
		dc.w byte_302AC-off_30288; 4
		dc.w byte_302B0-off_30288; 5
		dc.w byte_302B4-off_30288; 6
		dc.w byte_302B7-off_30288; 7
byte_30298:	dc.b   1,  2,  3,$FD,  1; 0 
byte_3029D:	dc.b   2,  4,  5,$FD,  2; 0 
byte_302A2:	dc.b   3,  6,  7,$FD,  3; 0 
byte_302A7:	dc.b   4,  8,  9,$FD,  4; 0 
byte_302AC:	dc.b   5, $A, $B,$FE	; 0 
byte_302B0:	dc.b   3, $C, $D,$FF	; 0 
byte_302B4:	dc.b  $F,  1,$FF	; 0 
byte_302B7:	dc.b   3, $E, $F,$FF,  0; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_302BC:				
		dc.w Map_302BC-Map_302BC;	0
		dc.w word_302DE-Map_302BC; 1
		dc.w word_30320-Map_302BC; 2
		dc.w word_3032A-Map_302BC; 3
		dc.w word_30334-Map_302BC; 4
		dc.w word_3033E-Map_302BC; 5
		dc.w word_30350-Map_302BC; 6
		dc.w word_30362-Map_302BC; 7
		dc.w word_3037C-Map_302BC; 8
		dc.w word_30396-Map_302BC; 9
		dc.w word_303B0-Map_302BC; 10
		dc.w word_303C2-Map_302BC; 11
		dc.w word_303CC-Map_302BC; 12
		dc.w word_303D6-Map_302BC; 13
		dc.w word_303E0-Map_302BC; 14
		dc.w word_303EA-Map_302BC; 15
		dc.w word_303F4-Map_302BC; 16
word_302DE:	dc.w 8			
		dc.w  $405,$2000,$2000,$FFE0; 0
		dc.w $1405,$2004,$2002,$FFE0; 4
		dc.w  $40F,$2008,$2004,$FFF0; 8
		dc.w  $407,$2018,$200C,	 $10; 12
		dc.w $F40D,  $60,  $30,$FFE0; 16
		dc.w $F40D,  $68,  $34,	   0; 20
		dc.w $DC0A,$2070,$2038,$FFE8; 24
		dc.w $DC06,$2079,$203C,	   0; 28
word_30320:	dc.w 1			
		dc.w $DF04,  $83,  $41,$FFD8; 0
word_3032A:	dc.w 1			
		dc.w $DF04,  $85,  $42,$FFD8; 0
word_30334:	dc.w 1			
		dc.w $DF08,  $87,  $43,$FFD0; 0
word_3033E:	dc.w 2			
		dc.w $DF0C,  $8A,  $45,$FFC0; 0
		dc.w $DF00,  $8E,  $47,$FFE0; 4
word_30350:	dc.w 2			
		dc.w $DF0C,  $8F,  $47,$FFB0; 0
		dc.w $DF08,  $93,  $49,$FFD0; 4
word_30362:	dc.w 3			
		dc.w $DF0C,  $96,  $4B,$FFA0; 0
		dc.w $DF0C,  $9A,  $4D,$FFC0; 4
		dc.w $DF00,  $9E,  $4F,$FFE0; 8
word_3037C:	dc.w 3			
		dc.w $DF0C,  $9F,  $4F,$FF90; 0
		dc.w $DF0C,  $A3,  $51,$FFB0; 4
		dc.w $DF08,  $A7,  $53,$FFD0; 8
word_30396:	dc.w 3			
		dc.w $DF0C,  $AA,  $55,$FF88; 0
		dc.w $DF0C,  $AE,  $57,$FFA8; 4
		dc.w $DF08,  $B2,  $59,$FFC8; 8
word_303B0:	dc.w 2			
		dc.w $DF0C,  $B5,  $5A,$FF88; 0
		dc.w $DF0C,  $B9,  $5C,$FFA8; 4
word_303C2:	dc.w 1			
		dc.w $DF0C,  $BD,  $5E,$FF88; 0
word_303CC:	dc.w 1			
		dc.w $FC00,  $61,  $30,$FFFC; 0
word_303D6:	dc.w 1			
		dc.w $FC00,  $62,  $31,$FFFC; 0
word_303E0:	dc.w 1			
		dc.w $F805,  $63,  $31,$FFF8; 0
word_303EA:	dc.w 1			
		dc.w $F805,  $67,  $33,$FFF8; 0
word_303F4:	dc.w 7			
		dc.w  $405,$2000,$2000,$FFE0; 0
		dc.w $1405,$2004,$2002,$FFE0; 4
		dc.w  $40F,$2008,$2004,$FFF0; 8
		dc.w  $407,$2018,$200C,	 $10; 12
		dc.w $F40D,  $60,  $30,$FFE0; 16
		dc.w $F40D,  $68,  $34,	   0; 20
		dc.w $EC0C,$207F,$203F,$FFF0; 24
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================

loc_30430:				
		jmp	DisplaySprite
; ===========================================================================

loc_30436:				
		jmp	DeleteObject
; ===========================================================================

loc_3043C:				
		jmp	SingleObjLoad
; ===========================================================================

loc_30442:				
		jmp	MarkObjGone
; ===========================================================================

loc_30448:				
		jmp	(PlaySound).l
; ===========================================================================

loc_3044E:				
		jmp	AnimateSprite
; ===========================================================================

loc_30454:				
		jmp	loc_1EDFA
; ===========================================================================

loc_3045A:				
		jmp	(AddPLC).l
; ===========================================================================

loc_30460:				
		jmp	LavaBubble
; ===========================================================================

loc_30466:				
		jmp	sub_40D06
; ===========================================================================

loc_3046C:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_30472:				
		jmp	loc_F626
; ===========================================================================

loc_30478:				
		jmp	loc_F62E
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; ARZ boss
; ----------------------------------------------------------------------------

Sprite_30480:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_3048E(pc,d0.w),d1
		jmp	off_3048E(pc,d1.w)
; ===========================================================================
off_3048E:	dc.w loc_30494-off_3048E; 0 
		dc.w loc_30620-off_3048E; 1
		dc.w loc_309A8-off_3048E; 2
; ===========================================================================

loc_30494:				
		tst.l	(v_plc_buffer).w
		beq.s	loc_3049C
		rts	
; ===========================================================================

loc_3049C:				
		tst.w	(v_player_mode).w
		bne.s	loc_304D4
		move.w	($FFFFB008).w,d0
		cmpi.w	#$2A60,d0
		blt.w	loc_305F4
		cmpi.w	#$2B60,d0
		bgt.w	loc_305F4
		cmpi.b	#-$7F,($FFFFB06A).w
		beq.w	loc_304D4
		move.w	($FFFFB048).w,d0
		cmpi.w	#$2A60,d0
		blt.w	loc_305F4
		cmpi.w	#$2B60,d0
		bgt.w	loc_305F4

loc_304D4:				
		move.b	#1,(f_screen_shake).w
		move.w	#$3E0,2(a0)
		move.l	#Map_30E04,4(a0)
		ori.b	#4,1(a0)
		move.b	#$20,$E(a0) ; ' '
		move.b	#2,$18(a0)
		move.b	#2,$A(a0)

loc_30500:
		move.w	#$2AE0,8(a0)
		move.w	#$388,$C(a0)
		move.w	#$2AE0,($FFFFF750).w
		move.w	#$388,(v_boss_y_pos).w
		bset	#6,1(a0)
		move.b	#3,$F(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$32(a0)
		move.b	#8,$B(a0)
		move.w	#-$380,$2E(a0)
		clr.b	(v_boss_collision_routine).w
		move.w	#$2AE0,$10(a0)
		move.w	#$488,$12(a0)
		move.b	#0,$15(a0)
		move.w	#$2AE0,$16(a0)
		move.w	#$488,$18(a0)
		move.b	#9,$1B(a0)
		move.w	#$2AE0,$1C(a0)
		move.w	#$488,$1E(a0)
		move.b	#6,$21(a0)
		move.w	#$100,(v_boss_y_vel).w
		bsr.w	loc_30F60
		bne.w	loc_305F4
		move.b	#-$77,(a1)
		move.l	#Map_30D68,4(a1)
		ori.b	#4,1(a1)
		move.w	#$3E0,2(a1)
		move.b	#$10,$19(a1)
		move.b	#4,$18(a1)
		move.w	#$2A50,8(a1)
		move.w	#$510,$C(a1)
		addq.b	#4,$A(a1)
		move.l	a0,$2A(a1)
		move.b	#0,$1A(a1)
		move.b	#2,$18(a1)
		move.b	#$20,$16(a1) ; ' '
		movea.l	a1,a2
		bsr.w	loc_30F6C
		bne.s	loc_305F4
		moveq	#0,d0
		move.w	#$F,d1

loc_305DC:				
		move.l	(a2,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_305DC
		bset	#0,1(a1)
		move.w	#$2B70,8(a1)

loc_305F4:				
		bsr.w	loc_305FA
		rts	
; ===========================================================================

loc_305FA:				
		lea	($FFFFF740).w,a2
		move.b	#4,(a2)+
		move.b	#0,(a2)+
		move.b	#0,(a2)+
		move.b	#0,(a2)+
		move.b	#2,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_30620:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_3062E(pc,d0.w),d1
		jmp	off_3062E(pc,d1.w)
; ===========================================================================
off_3062E:	dc.w loc_3063C-off_3062E; 0 
		dc.w loc_3067A-off_3062E; 1
		dc.w loc_306B8-off_3062E; 2
		dc.w loc_30706-off_3062E; 3
		dc.w loc_3088C-off_3062E; 4
		dc.w loc_308F4-off_3062E; 5
		dc.w loc_3095C-off_3062E; 6
; ===========================================================================

loc_3063C:				
		bsr.w	loc_2D5DE
		bsr.w	loc_3075C
		bsr.w	loc_30824
		cmpi.w	#$430,(v_boss_y_pos).w
		blt.s	loc_3066C
		move.w	#$430,(v_boss_y_pos).w
		addi.b	#2,$26(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$C8,(v_boss_x_vel).w
		st.b	$38(a0)

loc_3066C:				
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bra.w	loc_30F54
; ===========================================================================

loc_3067A:				
		bsr.w	loc_2D5DE
		bsr.w	loc_3075C
		bsr.w	loc_30824
		tst.b	$38(a0)
		bne.s	loc_30696
		cmpi.w	#$2B10,($FFFFF750).w
		blt.s	loc_306AA
		bra.s	loc_3069E
; ===========================================================================

loc_30696:				
		cmpi.w	#$2AB0,($FFFFF750).w
		bgt.s	loc_306AA

loc_3069E:				
		addi.b	#2,$26(a0)
		move.w	#0,(v_boss_x_vel).w

loc_306AA:				
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bra.w	loc_30F54
; ===========================================================================

loc_306B8:				
		bsr.w	loc_2D5DE
		bsr.w	loc_3075C
		bsr.w	loc_30824
		cmpi.b	#-$40,$1A(a0)
		bne.s	loc_306F8
		lea	($FFFFF740).w,a1
		andi.b	#-$10,4(a1)
		ori.b	#3,4(a1)
		addq.b	#2,$26(a0)
		btst	#0,1(a0)
		sne	$38(a0)
		move.w	#$1E,(v_boss_timer).w
		move.b	#-$43,d0
		bsr.w	loc_30F66

loc_306F8:				
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bra.w	loc_30F54
; ===========================================================================

loc_30706:				
		cmpi.w	#$14,(v_boss_timer).w
		bne.s	loc_3071A
		bset	#0,$3E(a0)
		move.b	#1,(v_boss_collision_routine).w

loc_3071A:				
		subi.w	#1,(v_boss_timer).w
		bpl.s	loc_30742
		clr.b	(v_boss_collision_routine).w
		move.b	#2,$26(a0)
		bchg	#0,1(a0)
		beq.s	loc_3073C
		move.w	#-$C8,(v_boss_x_vel).w
		bra.s	loc_30742
; ===========================================================================

loc_3073C:				
		move.w	#$C8,(v_boss_x_vel).w

loc_30742:				
		bsr.w	loc_2D5DE
		bsr.w	loc_3075C
		bsr.w	loc_30824
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bra.w	loc_30F54
; ===========================================================================

loc_3075C:				
		bsr.w	loc_3078E
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_30770
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_3077A

loc_30770:				
		lea	($FFFFF740).w,a1
		move.b	#$31,3(a1) ; '1'

loc_3077A:				
		cmpi.b	#$3F,$14(a0) ; '?'
		bne.s	locret_3078C
		lea	($FFFFF740).w,a1
		move.b	#-$40,3(a1)

locret_3078C:				
		rts	
; ===========================================================================

loc_3078E:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		addq.b	#2,$1A(a0)
		cmpi.b	#8,$26(a0)
		bcc.s	locret_307F2
		tst.b	$32(a0)
		beq.s	loc_307F4
		tst.b	$20(a0)
		bne.s	locret_307F2
		tst.b	$14(a0)
		bne.s	loc_307D6
		move.b	#$40,$14(a0) ; '@'
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_307D6:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_307E4
		move.w	#$EEE,d0

loc_307E4:				
		move.w	d0,(a1)
		subq.b	#1,$14(a0)
		bne.s	locret_307F2
		move.b	#$F,$20(a0)

locret_307F2:				
		rts	
; ===========================================================================

loc_307F4:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_30F84
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,$26(a0)

loc_30806:
		lea	($FFFFF740).w,a1
		move.b	#5,2(a1)
		move.b	#0,3(a1)
		moveq	#$40,d0	; '@'
		bsr.w	loc_30F7E
		move.b	#5,$15(a0)
		rts	
; ===========================================================================

loc_30824:				
		move.w	8(a0),d0
		move.w	$C(a0),d1
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		move.w	d0,$1C(a0)
		move.w	d1,$1E(a0)
		tst.b	$2C(a0)
		bne.s	loc_30850
		move.w	d0,$16(a0)
		move.w	d1,$18(a0)
		move.w	d1,$3A(a0)
		rts	
; ===========================================================================

loc_30850:				
		cmpi.w	#$78,(v_boss_timer).w ; 'x'
		bgt.s	locret_3088A
		subi.w	#1,$16(a0)
		move.l	$3A(a0),d0
		move.w	$2E(a0),d1
		addi.w	#$38,$2E(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$3A(a0)
		move.w	$3A(a0),$18(a0)
		cmpi.w	#$540,$18(a0)
		blt.s	locret_3088A
		move.w	#0,$2E(a0)

locret_3088A:				
		rts	
; ===========================================================================

loc_3088C:				
		st.b	$2C(a0)
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_3089C
		bsr.w	loc_2D6CC
		bra.s	loc_308D6
; ===========================================================================

loc_3089C:				
		move.b	#3,$F(a0)
		lea	($FFFFF740).w,a2
		move.b	#1,4(a2)
		move.b	#0,5(a2)
		move.b	#0,2(a2)
		move.b	#0,3(a2)
		bset	#0,1(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,$26(a0)
		move.w	#-$12,(v_boss_timer).w

loc_308D6:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_30824
		bra.w	loc_30F54
; ===========================================================================

loc_308F4:				
		addq.w	#1,(v_boss_timer).w
		beq.s	loc_30904
		bpl.s	loc_3090A
		addi.w	#$18,(v_boss_y_vel).w
		bra.s	loc_30936
; ===========================================================================

loc_30904:				
		clr.w	(v_boss_y_vel).w
		bra.s	loc_30936
; ===========================================================================

loc_3090A:				
		cmpi.w	#$18,(v_boss_timer).w
		bcs.s	loc_30922
		beq.s	loc_3092A
		cmpi.w	#$20,(v_boss_timer).w ; ' '
		bcs.s	loc_30936
		addq.b	#2,$26(a0)
		bra.s	loc_30936
; ===========================================================================

loc_30922:				
		subi.w	#8,(v_boss_y_vel).w
		bra.s	loc_30936
; ===========================================================================

loc_3092A:				
		clr.w	(v_boss_y_vel).w
		bsr.w	loc_30F8A
		bsr.w	loc_30F90

loc_30936:				
		bsr.w	loc_2D5DE
		bsr.w	loc_3078E
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_30824
		bra.w	loc_30F54
; ===========================================================================

loc_3095C:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2C00,(v_boundary_right_next).w
		bcc.s	loc_30976
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_3097C
; ===========================================================================

loc_30976:				
		tst.b	1(a0)
		bpl.s	loc_309A2

loc_3097C:				
		bsr.w	loc_2D5DE
		bsr.w	loc_3078E
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		lea	(off_30DC8).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_30824
		bra.w	loc_30F54
; ===========================================================================

loc_309A2:				
		jmp	DeleteObject
; ===========================================================================

loc_309A8:				
		moveq	#0,d0
		movea.l	$2A(a0),a1
		cmpi.b	#8,$26(a1)
		blt.s	loc_309BC
		move.b	#4,$25(a0)

loc_309BC:				
		move.b	$25(a0),d0
		move.w	off_309C8(pc,d0.w),d1
		jmp	off_309C8(pc,d1.w)
; ===========================================================================
off_309C8:	dc.w loc_309D2-off_309C8; 0 
		dc.w loc_30A04-off_309C8; 1
		dc.w loc_30B4A-off_309C8; 2
		dc.w loc_30B9E-off_309C8; 3
		dc.w loc_30B6C-off_309C8; 4
; ===========================================================================

loc_309D2:				
		bsr.w	loc_30B7A
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_309E8
		move.w	#$E1,d0	
		bsr.w	loc_30F66

loc_309E8:				
		subi.w	#1,$C(a0)
		cmpi.w	#$488,$C(a0)
		bgt.s	loc_30A00
		addq.b	#2,$25(a0)
		move.b	#0,(f_screen_shake).w

loc_30A00:				
		bra.w	loc_30F54
; ===========================================================================

loc_30A04:				
		bsr.w	loc_30B7A
		movea.l	$2A(a0),a3
		btst	#0,$3E(a3)
		beq.s	loc_30A3A
		tst.b	$38(a3)
		beq.s	loc_30A24
		btst	#0,1(a0)
		beq.s	loc_30A3A
		bra.s	loc_30A2C
; ===========================================================================

loc_30A24:				
		btst	#0,1(a0)
		bne.s	loc_30A3A

loc_30A2C:				
		bclr	#0,$3E(a3)
		bsr.w	loc_30AB4
		st.b	$38(a0)

loc_30A3A:				
		bsr.w	loc_30A42
		bra.w	loc_30F54
; ===========================================================================

loc_30A42:				
		tst.b	$38(a0)
		beq.s	locret_30AAE
		tst.w	$30(a0)
		bgt.s	loc_30A54
		move.w	#$1F,$30(a0)

loc_30A54:				
		subi.w	#1,$30(a0)
		bgt.s	loc_30A82
		sf.b	$38(a0)
		move.w	#0,$30(a0)
		tst.b	$38(a3)
		bne.s	loc_30A74
		move.w	#$2A50,8(a0)
		bra.s	loc_30A7A
; ===========================================================================

loc_30A74:				
		move.w	#$2B70,8(a0)

loc_30A7A:				
		move.w	#$488,$C(a0)
		bra.s	locret_30AAE
; ===========================================================================

loc_30A82:				
		move.w	#$2A50,d1
		tst.b	$38(a3)
		beq.s	loc_30A90
		move.w	#$2B70,d1

loc_30A90:				
		move.b	($FFFFFE0F).w,d0
		andi.w	#1,d0
		add.w	d0,d0
		add.w	word_30AB0(pc,d0.w),d1
		move.w	d1,8(a0)
		move.w	#$488,d1
		add.w	word_30AB0(pc,d0.w),d1
		move.w	d1,$C(a0)

locret_30AAE:				
		rts	
; ===========================================================================
word_30AB0:	dc.w	 1		; 0
		dc.w $FFFF		; 1
; ===========================================================================

loc_30AB4:				
		bsr.w	loc_30F60
		bne.w	locret_30B40
		_move.b	#-$77,0(a1)
		move.b	#4,$A(a1)
		move.b	#8,$25(a1)
		move.l	#Map_30D68,4(a1)
		move.w	#$3E0,2(a1)
		ori.b	#4,1(a1)
		moveq	#0,d6
		move.b	#2,$1A(a1)
		move.w	#$2A6A,8(a1)
		tst.b	$38(a3)
		beq.s	loc_30B04
		st.b	d6
		move.w	#$2B56,8(a1)
		bset	#0,1(a1)

loc_30B04:				
		move.w	#$28,$30(a1) ; '('
		bsr.w	loc_30F78
		andi.w	#3,d0
		add.w	d0,d0
		move.w	word_30B42(pc,d0.w),$C(a1)
		movea.l	a1,a2
		bsr.w	loc_30F60
		bne.s	locret_30B40
		_move.b	#-$77,0(a1)
		move.b	#4,$A(a1)
		move.b	#6,$25(a1)
		move.l	a2,$34(a1)
		move.b	d6,$28(a1)
		move.l	a3,$38(a1)

locret_30B40:				
		rts	
; ===========================================================================
word_30B42:	dc.w  $458		; 0
		dc.w  $478		; 1
		dc.w  $498		; 2
		dc.w  $4B8		; 3
; ===========================================================================

loc_30B4A:				
		move.b	#1,(f_screen_shake).w
		addi.w	#1,$C(a0)
		cmpi.w	#$510,$C(a0)
		blt.s	loc_30B68
		move.b	#0,(f_screen_shake).w
		bra.w	loc_30F5A
; ===========================================================================

loc_30B68:				
		bra.w	loc_30F54
; ===========================================================================

loc_30B6C:				
		subi.w	#1,$30(a0)
		beq.w	loc_30F5A
		bra.w	loc_30F54
; ===========================================================================

loc_30B7A:				
		move.w	#$23,d1	; '#'
		move.w	#$44,d2	; 'D'
		move.w	#$45,d3	; 'E'
		move.w	8(a0),d4
		move.w	$C(a0),-(sp)
		addi.w	#4,$C(a0)
		bsr.w	loc_30F9C
		move.w	(sp)+,$C(a0)
		rts	
; ===========================================================================

loc_30B9E:				
		moveq	#0,d0
		movea.l	$38(a0),a1
		cmpi.b	#8,$26(a1)
		blt.s	loc_30BB2
		move.b	#6,$2A(a0)

loc_30BB2:				
		move.b	$2A(a0),d0
		move.w	off_30BBE(pc,d0.w),d1
		jmp	off_30BBE(pc,d1.w)
; ===========================================================================
off_30BBE:	dc.w loc_30BC8-off_30BBE; 0 
		dc.w loc_30C36-off_30BBE; 1
		dc.w loc_30C86-off_30BBE; 2
		dc.w loc_30CAC-off_30BBE; 3
		dc.w loc_30CC8-off_30BBE; 4
; ===========================================================================

loc_30BC8:				
		move.l	#Map_30D68,4(a0)
		move.w	#$3E0,2(a0)
		ori.b	#4,1(a0)
		move.b	#-$70,$E(a0)
		move.b	#4,$18(a0)
		addq.b	#2,$2A(a0)
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.w	#4,$12(a0)
		move.b	#4,$1A(a0)
		addi.w	#9,$C(a0)
		tst.b	$28(a0)
		beq.s	loc_30C28
		bset	#0,$22(a0)
		bset	#0,1(a0)
		move.w	#-3,$10(a0)
		bra.s	loc_30C2E
; ===========================================================================

loc_30C28:				
		move.w	#3,$10(a0)

loc_30C2E:				
		move.b	#-$50,$20(a0)
		rts	
; ===========================================================================

loc_30C36:				
		btst	#7,$22(a0)
		beq.s	loc_30C44
		move.b	#8,$2A(a0)

loc_30C44:				
		move.w	8(a0),d0
		add.w	$10(a0),d0
		tst.w	$10(a0)
		bpl.s	loc_30C5E
		cmpi.w	#$2A77,d0
		bgt.s	loc_30C7E
		move.w	#$2A77,d0
		bra.s	loc_30C68
; ===========================================================================

loc_30C5E:				
		cmpi.w	#$2B49,d0
		blt.s	loc_30C7E
		move.w	#$2B49,d0

loc_30C68:				
		addi.b	#2,$2A(a0)
		move.w	d0,8(a0)
		move.b	#-$23,d0
		bsr.w	loc_30F66
		bra.w	loc_30F54
; ===========================================================================

loc_30C7E:				
		move.w	d0,8(a0)
		bra.w	loc_30F54
; ===========================================================================

loc_30C86:				
		move.b	#0,$20(a0)
		btst	#7,$22(a0)
		beq.s	loc_30C9A
		addi.b	#2,$2A(a0)

loc_30C9A:				
		bsr.w	loc_30CCC
		lea	(off_30D2C).l,a1
		bsr.w	loc_30F72
		bra.w	loc_30F54
; ===========================================================================

loc_30CAC:				
		bsr.w	loc_30D04
		move.w	$C(a0),d0
		add.w	$12(a0),d0
		cmpi.w	#$4F0,d0
		bgt.w	loc_30F5A
		move.w	d0,$C(a0)
		bra.w	loc_30F54
; ===========================================================================

loc_30CC8:				
		bra.w	loc_30F5A
; ===========================================================================

loc_30CCC:				
		tst.w	$30(a0)
		bne.s	loc_30CF4
		move.w	#$1B,d1
		move.w	#1,d2
		move.w	#2,d3
		move.w	8(a0),d4
		bsr.w	loc_30F96
		btst	#3,$22(a0)
		beq.s	locret_30D02
		move.w	#$1F,$30(a0)

loc_30CF4:				
		subi.w	#1,$30(a0)
		bne.s	locret_30D02
		move.b	#6,$2A(a0)

locret_30D02:				
		rts	
; ===========================================================================

loc_30D04:				
		bclr	#3,$22(a0)
		beq.s	loc_30D12
		lea	($FFFFB000).w,a1
		bsr.s	loc_30D1E

loc_30D12:				
		bclr	#4,$22(a0)
		beq.s	locret_30D2A
		lea	($FFFFB040).w,a1

loc_30D1E:				
		bset	#1,$22(a1)
		bclr	#3,$22(a1)

locret_30D2A:				
		rts	
; ===========================================================================
off_30D2C:	dc.w byte_30D30-off_30D2C; 0 
		dc.w byte_30D47-off_30D2C; 1
byte_30D30:	dc.b   1,  4,  6,  5,  4,  6,  4,  5,  4,  6,  4,  4,  6,  5,  4,  6; 0
					
		dc.b   4,  5,  4,  6,  4,$FD,  1; 16
byte_30D47:	dc.b  $F,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4; 0
					
		dc.b   4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,$F9; 16
		dc.b   0		; 32
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_30D68:				
		dc.w word_30D76-Map_30D68; 0
		dc.w word_30DA0-Map_30D68; 1
		dc.w word_30DA0-Map_30D68; 2
		dc.w word_30DAA-Map_30D68; 3
		dc.w word_30DAA-Map_30D68; 4
		dc.w word_30DB4-Map_30D68; 5
		dc.w word_30DBE-Map_30D68; 6
word_30D76:	dc.w 5			
		dc.w $280F,$2088,$2044,	   0; 0
		dc.w  $80F,$2088,$2044,	   0; 4
		dc.w $E80F,$2088,$2044,	   0; 8
		dc.w $C80F,$2088,$2044,	   0; 12
		dc.w $C00C,$2084,$2042,	   0; 16
word_30DA0:	dc.w 1			
		dc.w $FC04,$2098,$204C,$FFF8; 0
word_30DAA:	dc.w 1			
		dc.w $FC0C,$209A,$204D,$FFF0; 0
word_30DB4:	dc.w 1			
		dc.w $FC0C,$209E,$204F,$FFF0; 0
word_30DBE:	dc.w 1			
		dc.w $FC0C,$20A2,$2051,$FFF0; 0
off_30DC8:	dc.w byte_30DD4-off_30DC8; 0 
		dc.w byte_30DEA-off_30DC8; 1
		dc.w byte_30DEE-off_30DC8; 2
		dc.w byte_30DF1-off_30DC8; 3
		dc.w byte_30DFD-off_30DC8; 4
		dc.w byte_30E00-off_30DC8; 5
byte_30DD4:	dc.b   7,  0,  1,$FF,  2,  3,  2,  3,  2,  3,  2,  3,$FF,  4,  4,  4; 0
					
		dc.b   4,  4,  4,  4,  4,$FF; 16
byte_30DEA:	dc.b   1,  6,  7,$FF	; 0 
byte_30DEE:	dc.b  $F,  9,$FF	; 0 
byte_30DF1:	dc.b   2, $A, $A, $B, $B, $B, $B, $B, $A, $A,$FD,  2; 0
					
byte_30DFD:	dc.b  $F,  8,$FF	; 0 
byte_30E00:	dc.b   7,  5,$FF,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_30E04:				
		dc.w word_30E1C-Map_30E04; 0
		dc.w word_30E2E-Map_30E04; 1
		dc.w word_30E40-Map_30E04; 2
		dc.w word_30E52-Map_30E04; 3
		dc.w word_30E64-Map_30E04; 4
		dc.w word_30E76-Map_30E04; 5
		dc.w word_30E88-Map_30E04; 6
		dc.w word_30E9A-Map_30E04; 7
		dc.w word_30EAC-Map_30E04; 8
		dc.w word_30EE6-Map_30E04; 9
		dc.w word_30F10-Map_30E04; 10
		dc.w word_30F3A-Map_30E04; 11
word_30E1C:	dc.w 2			
		dc.w $E80D, $150,  $A8,$FFE8; 0
		dc.w $E805, $148,  $A4,$FFD8; 4
word_30E2E:	dc.w 2			
		dc.w $E80D, $158,  $AC,$FFE8; 0
		dc.w $E805, $148,  $A4,$FFD8; 4
word_30E40:	dc.w 2			
		dc.w $E80D, $160,  $B0,$FFE8; 0
		dc.w $E805, $14C,  $A6,$FFD8; 4
word_30E52:	dc.w 2			
		dc.w $E80D, $168,  $B4,$FFE8; 0
		dc.w $E805, $14C,  $A6,$FFD8; 4
word_30E64:	dc.w 2			
		dc.w $E80D, $170,  $B8,$FFE8; 0
		dc.w $E805, $14C,  $A6,$FFD8; 4
word_30E76:	dc.w 2			
		dc.w $E80D, $178,  $BC,$FFE8; 0
		dc.w $E805, $14C,  $A6,$FFD8; 4
word_30E88:	dc.w 2			
		dc.w $1805,  $7E,  $3F,$FFE8; 0
		dc.w $1805,  $7E,  $3F,	   8; 4
word_30E9A:	dc.w 2			
		dc.w $1804,  $82,  $41,$FFE8; 0
		dc.w $1804,  $82,  $41,	   8; 4
word_30EAC:	dc.w 7			
		dc.w $D805, $140,  $A0,$FFFA; 0
		dc.w $E805, $144,  $A2,	   8; 4
		dc.w	 0,$206F,$2037,$FFD0; 8
		dc.w $F806,$2070,$2038,$FFD8; 12
		dc.w $F80F,$2128,$2094,$FFE8; 16
		dc.w $F807,$2076,$203B,$FFE8; 20
		dc.w $F807,$2076,$203B,	   8; 24
word_30EE6:	dc.w 5			
		dc.w $EA0F,$2000,$2000,$FF9C; 0
		dc.w $D20A,$2010,$2008,$FFA4; 4
		dc.w $D20B,$2019,$200C,$FFBC; 8
		dc.w $F205,$2025,$2012,$FFBC; 12
		dc.w $F805,$2065,$2032,$FFC0; 16
word_30F10:	dc.w 5			
		dc.w $F10F,$2029,$2014,$FF9D; 0
		dc.w $D90A,$2039,$201C,$FFA5; 4
		dc.w $D907,$2042,$2021,$FFBD; 8
		dc.w $F902,$204A,$2025,$FFBD; 12
		dc.w $F805,$2069,$2034,$FFC0; 16
word_30F3A:	dc.w 3			
		dc.w $EC0F,$204D,$2026,$FFA0; 0
		dc.w  $C0D,$205D,$202E,$FFA0; 4
		dc.w	 4,$206D,$2036,$FFC0; 8
; ===========================================================================

loc_30F54:				
		jmp	DisplaySprite
; ===========================================================================

loc_30F5A:				
		jmp	DeleteObject
; ===========================================================================

loc_30F60:				
		jmp	SingleObjLoad
; ===========================================================================

loc_30F66:				
		jmp	(PlaySound).l
; ===========================================================================

loc_30F6C:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_30F72:				
		jmp	AnimateSprite
; ===========================================================================

loc_30F78:				
		jmp	(RandomNumber).l
; ===========================================================================

loc_30F7E:				
		jmp	(AddPLC).l
; ===========================================================================

loc_30F84:				
		jmp	sub_40D06
; ===========================================================================

loc_30F8A:				
		jmp	loc_F626
; ===========================================================================

loc_30F90:				
		jmp	loc_F62E
; ===========================================================================

loc_30F96:				
		jmp	DetectPlatform
; ===========================================================================

loc_30F9C:				
		jmp	SolidObject
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; MCZ boss
; ----------------------------------------------------------------------------

Sprite_30FA4:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_30FB2(pc,d0.w),d1
		jmp	off_30FB2(pc,d1.w)
; ===========================================================================
off_30FB2:	dc.w loc_30FB8-off_30FB2; 0 
		dc.w loc_310BE-off_30FB2; 1
		dc.w loc_315F2-off_30FB2; 2
; ===========================================================================

loc_30FB8:				
		move.l	#Map_316EC,4(a0)
		move.w	#$3C0,2(a0)
		ori.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.w	#$21A0,8(a0)
		move.w	#$560,$C(a0)
		move.b	#5,$B(a0)
		addq.b	#2,$A(a0)
		move.b	#2,$26(a0)
		bset	#6,1(a0)
		move.b	#4,$F(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$32(a0)

loc_31006:
		move.w	8(a0),($FFFFF750).w
		move.w	$C(a0),(v_boss_y_pos).w
		move.w	#$C0,(v_boss_y_vel).w
		move.b	#0,(v_boss_collision_routine).w
		move.b	#1,(f_screen_shake).w
		move.b	#$40,$E(a0) ; '@'
		move.w	8(a0),$10(a0)
		move.w	$C(a0),$12(a0)
		move.b	#2,$15(a0)
		move.w	8(a0),$16(a0)
		move.w	$C(a0),$18(a0)
		move.b	#1,$1B(a0)
		move.w	8(a0),$1C(a0)
		move.w	$C(a0),$1E(a0)
		move.b	#$E,$21(a0)
		move.w	8(a0),$22(a0)
		move.w	$C(a0),$24(a0)
		move.b	#2,$27(a0)
		subi.w	#$28,$22(a0) ; '('
		move.w	#$28,(v_boss_timer).w ; '('
		move.w	#-$380,$2E(a0)
		move.w	#-$380,$30(a0)
		bsr.w	loc_31090
		rts	
; ===========================================================================

loc_31090:				
		lea	($FFFFF740).w,a2
		move.b	#2,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		move.b	#$D,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_310BE:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_310CC(pc,d0.w),d1
		jmp	off_310CC(pc,d1.w)
; ===========================================================================
off_310CC:	dc.w loc_310DA-off_310CC; 0 
		dc.w loc_3116E-off_310CC; 1
		dc.w loc_311AA-off_310CC; 2
		dc.w loc_3124A-off_310CC; 3
		dc.w loc_314D2-off_310CC; 4
		dc.w loc_31526-off_310CC; 5
		dc.w loc_315A6-off_310CC; 6
; ===========================================================================

loc_310DA:				
		subi.w	#1,(v_boss_timer).w
		bpl.s	loc_3112C
		move.b	#0,($FFFFF745).w
		bsr.w	loc_2D5DE
		cmpi.w	#$560,(v_boss_y_pos).w
		bgt.s	loc_3112C
		move.w	#$100,(v_boss_y_vel).w
		move.w	($FFFFB008).w,d3
		cmpi.w	#$2190,d3
		bcc.s	loc_3110A
		move.w	#$2200,d3
		bra.s	loc_3110E
; ===========================================================================

loc_3110A:				
		move.w	#$2120,d3

loc_3110E:				
		move.w	d3,($FFFFF750).w
		addq.b	#2,$26(a0)
		bclr	#0,1(a0)
		move.w	($FFFFB008).w,d0
		sub.w	($FFFFF750).w,d0
		bmi.s	loc_3112C
		bset	#0,1(a0)

loc_3112C:				
		cmpi.w	#$28,(v_boss_timer).w ; '('
		bne.s	loc_3113A
		move.b	#0,(v_boss_collision_routine).w

loc_3113A:				
		cmpi.w	#$620,(v_boss_y_pos).w
		bge.s	loc_3114C
		move.b	#1,(f_screen_shake).w
		bsr.w	loc_313C6

loc_3114C:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_3130A
		bra.w	loc_318B8
; ===========================================================================

loc_3116E:				
		bsr.w	loc_2D5DE
		bsr.w	loc_313C6
		cmpi.w	#$620,(v_boss_y_pos).w
		blt.s	loc_31188
		addq.b	#2,$26(a0)
		move.b	#0,(f_screen_shake).w

loc_31188:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_3130A
		bra.w	loc_318B8
; ===========================================================================

loc_311AA:				
		bsr.w	loc_2D5DE
		cmpi.w	#$660,(v_boss_y_pos).w
		blt.s	loc_31228
		move.w	#$660,(v_boss_y_pos).w
		addq.b	#2,$26(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,2(a1)
		ori.b	#6,2(a1)
		andi.b	#-$10,8(a1)
		ori.b	#6,8(a1)
		andi.b	#-$10,6(a1)
		ori.b	#$D,6(a1)
		move.b	#$20,5(a1) ; ' '
		move.w	#$64,(v_boss_timer).w ; 'd'
		move.b	#$30,1(a1) ; '0'
		bclr	#0,1(a0)
		move.w	($FFFFB008).w,d0
		sub.w	($FFFFF750).w,d0
		bmi.s	loc_31210
		bset	#0,1(a0)

loc_31210:				
		move.w	#-$200,(v_boss_x_vel).w
		move.w	#0,(v_boss_y_vel).w
		btst	#0,1(a0)
		beq.s	loc_31228
		neg.w	(v_boss_x_vel).w

loc_31228:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_3130A

loc_31246:
		bra.w	loc_318B8
; ===========================================================================

loc_3124A:				
		subi.w	#1,(v_boss_timer).w
		cmpi.w	#$28,(v_boss_timer).w ; '('
		bgt.w	loc_312E8
		move.b	#1,(v_boss_collision_routine).w
		tst.w	(v_boss_timer).w
		bpl.w	loc_312E8

loc_31268:
		tst.b	$38(a0)
		beq.s	loc_31274
		sf.b	$38(a0)
		bra.s	loc_31298
; ===========================================================================

loc_31274:				
		bsr.w	loc_2D5DE
		cmpi.w	#$2120,($FFFFF750).w
		bgt.s	loc_31288
		move.w	#$2120,($FFFFF750).w
		bra.s	loc_312A2
; ===========================================================================

loc_31288:				
		cmpi.w	#$2200,($FFFFF750).w
		blt.s	loc_312E8
		move.w	#$2200,($FFFFF750).w
		bra.s	loc_312A2
; ===========================================================================

loc_31298:				
		lea	($FFFFF740).w,a1
		move.b	#$30,7(a1) ; '0'

loc_312A2:				
		move.w	#0,(v_boss_x_vel).w
		move.b	#0,$26(a0)
		lea	($FFFFF740).w,a1

loc_312B2:
		andi.b	#-$10,2(a1)
		ori.b	#$B,2(a1)
		andi.b	#-$10,8(a1)
		ori.b	#$B,8(a1)
		move.b	#0,1(a1)
		andi.b	#-$10,6(a1)
		ori.b	#$D,6(a1)
		move.w	#$64,(v_boss_timer).w ; 'd'
		move.w	#-$C0,(v_boss_y_vel).w

loc_312E8:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3143A
		lea	(off_3160A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_3130A
		bra.w	loc_318B8
; ===========================================================================

loc_3130A:				
		move.w	8(a0),d0
		move.w	$C(a0),d1
		move.w	d0,$16(a0)
		move.w	d1,$18(a0)
		move.w	d0,$1C(a0)
		move.w	d1,$1E(a0)
		tst.b	$2C(a0)
		bne.s	loc_31358
		move.w	d0,$22(a0)
		move.w	d1,$24(a0)
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		move.w	d1,$3A(a0)
		move.w	d1,$34(a0)
		btst	#0,1(a0)
		beq.s	loc_31350
		addi.w	#$28,$22(a0) ; '('
		rts	
; ===========================================================================

loc_31350:				
		subi.w	#$28,$22(a0) ; '('
		rts	
; ===========================================================================

loc_31358:				
		cmpi.w	#$78,(v_boss_timer).w ; 'x'
		bgt.s	locret_313C4
		subi.w	#1,$22(a0)
		move.l	$3A(a0),d0
		move.w	$2E(a0),d1
		addi.w	#$38,$2E(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$3A(a0)
		move.w	$3A(a0),$24(a0)
		cmpi.w	#$6F0,$24(a0)
		blt.s	loc_31392
		move.w	#0,$2E(a0)

loc_31392:				
		addi.w	#1,$10(a0)
		move.l	$34(a0),d0
		move.w	$30(a0),d1
		addi.w	#$38,$30(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$34(a0)
		move.w	$34(a0),$12(a0)
		cmpi.w	#$6F0,$12(a0)
		blt.s	locret_313C4
		move.w	#0,$30(a0)

locret_313C4:				
		rts	
; ===========================================================================

loc_313C6:				
		move.b	($FFFFFE0F).w,d1
		sf.b	d2
		andi.b	#$1F,d1
		beq.s	loc_313DA
		andi.b	#7,d1
		bne.s	locret_31438
		st.b	d2

loc_313DA:				
		bsr.w	loc_318CA
		swap	d1
		andi.w	#$1FF,d1
		addi.w	#$20F0,d1
		cmpi.w	#$2230,d1
		bgt.s	loc_313DA
		bsr.w	loc_318C4
		bne.s	locret_31438
		move.b	#$57,(a1) ; 'W'
		move.b	#4,$A(a1)
		move.w	d1,8(a1)
		move.w	#$5F0,$C(a1)
		move.l	#Map_316EC,4(a1)
		move.w	#$560,2(a1)
		ori.b	#4,1(a1)
		move.b	#3,$18(a1)
		move.b	#$D,$1A(a1)
		tst.b	d2
		bne.s	locret_31438
		move.b	#$14,$1A(a1)
		move.b	#-$4F,$20(a1)

locret_31438:				
		rts	
; ===========================================================================

loc_3143A:				
		bsr.w	loc_31470
		cmpi.b	#$1F,$14(a0)
		bne.s	locret_31450
		lea	($FFFFF740).w,a1
		move.b	#-$40,7(a1)

locret_31450:				
		rts	
; ===========================================================================

loc_31452:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		addq.b	#2,$1A(a0)

loc_31470:				
		cmpi.b	#8,$26(a0)
		bcc.s	locret_314B6
		tst.b	$32(a0)
		beq.s	loc_314B8
		tst.b	$20(a0)
		bne.s	locret_314B6
		tst.b	$14(a0)
		bne.s	loc_3149A
		move.b	#$20,$14(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_3149A:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_314A8
		move.w	#$EEE,d0

loc_314A8:				
		move.w	d0,(a1)
		subq.b	#1,$14(a0)
		bne.s	locret_314B6
		move.b	#$F,$20(a0)

locret_314B6:				
		rts	
; ===========================================================================

loc_314B8:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_318D6
		move.w	#$B3,(v_boss_timer).w
		move.b	#8,$26(a0)
		moveq	#$40,d0	; '@'
		bsr.w	loc_318D0
		rts	
; ===========================================================================

loc_314D2:				
		st.b	$2C(a0)
		move.b	#0,(f_screen_shake).w
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_314F4
		move.b	#$13,$21(a0)
		move.b	#7,$B(a0)
		bsr.w	loc_2D6CC
		bra.s	loc_31512
; ===========================================================================

loc_314F4:				
		bset	#0,1(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,$26(a0)
		move.b	#$12,$21(a0)
		move.w	#-$12,(v_boss_timer).w

loc_31512:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3130A
		bra.w	loc_318B8
; ===========================================================================

loc_31526:				
		addq.w	#1,(v_boss_timer).w
		beq.s	loc_31542
		bpl.s	loc_31548
		cmpi.w	#$620,(v_boss_y_pos).w
		bcc.s	loc_3153A
		subq.w	#1,(v_boss_timer).w

loc_3153A:				
		addi.w	#$10,(v_boss_y_vel).w
		bra.s	loc_3158A
; ===========================================================================

loc_31542:				
		clr.w	(v_boss_y_vel).w
		bra.s	loc_3158A
; ===========================================================================

loc_31548:				
		cmpi.w	#$18,(v_boss_timer).w
		bcs.s	loc_31576
		beq.s	loc_3157E
		cmpi.w	#$20,(v_boss_timer).w ; ' '
		bcs.s	loc_3158A
		lea	($FFFFF740).w,a1
		move.b	#$D,7(a1)
		_move.b	#2,0(a2)
		move.b	#0,1(a1)
		addq.b	#2,$26(a0)
		bra.s	loc_3158A
; ===========================================================================

loc_31576:				
		subi.w	#8,(v_boss_y_vel).w
		bra.s	loc_3158A
; ===========================================================================

loc_3157E:				
		clr.w	(v_boss_y_vel).w
		bsr.w	loc_318DC
		bsr.w	loc_318E2

loc_3158A:				
		bsr.w	loc_2D5DE
		bsr.w	loc_31452
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3130A
		bra.w	loc_318B8
; ===========================================================================

loc_315A6:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2240,(v_boundary_right_next).w
		beq.s	loc_315C0
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_315C6
; ===========================================================================

loc_315C0:				
		tst.b	1(a0)
		bpl.s	loc_315EC

loc_315C6:				
		bsr.w	loc_2D5DE
		bsr.w	loc_31452
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		lea	(off_3160A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_3130A
		bra.w	loc_318B8
; ===========================================================================

loc_315EC:				
		jmp	DeleteObject
; ===========================================================================

loc_315F2:				
		bsr.w	loc_318E8
		subi.w	#$28,$12(a0) ; '('
		cmpi.w	#$6F0,$C(a0)
		bgt.w	loc_318BE
		bra.w	loc_318B8
; ===========================================================================
off_3160A:	dc.w byte_31628-off_3160A; 0 
		dc.w byte_3162E-off_3160A; 1
		dc.w byte_31631-off_3160A; 2
		dc.w byte_31638-off_3160A; 3
		dc.w byte_31649-off_3160A; 4
		dc.w byte_3165A-off_3160A; 5
		dc.w byte_31661-off_3160A; 6
		dc.w byte_31673-off_3160A; 7
		dc.w byte_31684-off_3160A; 8
		dc.w byte_31695-off_3160A; 9
		dc.w byte_316A6-off_3160A; 10
		dc.w byte_316AD-off_3160A; 11
		dc.w byte_316BF-off_3160A; 12
		dc.w byte_316D1-off_3160A; 13
		dc.w byte_316E8-off_3160A; 14
byte_31628:	dc.b  $F,  1,$FF,  0,$FC,  2; 0	
byte_3162E:	dc.b   5,  8,$FF	; 0 
byte_31631:	dc.b   1,  5,  6,$FF,  7,$FC,  3; 0 
byte_31638:	dc.b   1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,$FD; 0
					
		dc.b   4		; 16
byte_31649:	dc.b   1,  2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  2,  2,  3,  3,$FD; 0
					
		dc.b   5		; 16
byte_3165A:	dc.b   1,  4,  2,  3,  4,$FC,  1; 0 
byte_31661:	dc.b   1,  2,  3,  4,  4,  2,  2,  3,  3,  3,  4,  4,  4,  2,  2,  2; 0
					
		dc.b $FD,  7		; 16
byte_31673:	dc.b   1,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  2,  8,  8,  8,$FD; 0
					
		dc.b   8		; 16
byte_31684:	dc.b   1,  9,  9,  9,  9,  9, $A, $A, $A, $A, $A, $B, $B, $B, $B,$FD; 0
					
		dc.b   9		; 16
byte_31695:	dc.b   1,  9,  9,  9,  9, $A, $A, $A, $B, $B, $B,  9,  9, $A, $A,$FD; 0
					
		dc.b  $A		; 16
byte_316A6:	dc.b   1, $B,  9, $A, $B,$FC,  1; 0 
byte_316AD:	dc.b   1,  9, $A, $B, $B,  9,  9, $A, $A, $A, $B, $B, $B,  9,  9,  9; 0
					
		dc.b $FD, $C		; 16
byte_316BF:	dc.b   1,  9, $A, $A, $A, $A, $B, $B, $B, $B, $B,  9,  8,  8,  8,  8; 0
					
		dc.b $FD,  3		; 16
byte_316D1:	dc.b   7, $E, $F,$FF,$10,$11,$10,$11,$10,$11,$10,$11,$FF,$12,$12,$12; 0
					
		dc.b $12,$12,$12,$12,$12,$12,$FF; 16
byte_316E8:	dc.b   7,$12,$FF,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_316EC:				
		dc.w word_31716-Map_316EC; 0
		dc.w word_31740-Map_316EC; 1
		dc.w word_3176A-Map_316EC; 2
		dc.w word_3177C-Map_316EC; 3
		dc.w word_3178E-Map_316EC; 4
		dc.w word_317A0-Map_316EC; 5
		dc.w word_317B2-Map_316EC; 6
		dc.w word_317C4-Map_316EC; 7
		dc.w word_317CE-Map_316EC; 8
		dc.w word_317F8-Map_316EC; 9
		dc.w word_3180A-Map_316EC; 10
		dc.w word_3181C-Map_316EC; 11
		dc.w word_3182E-Map_316EC; 12
		dc.w word_31838-Map_316EC; 13
		dc.w word_31842-Map_316EC; 14
		dc.w word_31854-Map_316EC; 15
		dc.w word_31866-Map_316EC; 16
		dc.w word_31878-Map_316EC; 17
		dc.w word_3188A-Map_316EC; 18
		dc.w word_3189C-Map_316EC; 19
		dc.w word_318AE-Map_316EC; 20
word_31716:	dc.w 5			
		dc.w $F80F,$2148,$20A4,$FFF0; 0
		dc.w $F807,$2158,$20AC,	 $10; 4
		dc.w $E805, $164,  $B2,	 $10; 8
		dc.w $F80A,$2009,$2004,$FFD8; 12
		dc.w $D809,  $21,  $10,$FFF8; 16
word_31740:	dc.w 5			
		dc.w $F80F,$2148,$20A4,$FFF0; 0
		dc.w $F807,$2158,$20AC,	 $10; 4
		dc.w $E805, $164,  $B2,	 $10; 8
		dc.w $F80A,$2000,$2000,$FFD8; 12
		dc.w $D809,  $21,  $10,$FFF8; 16
word_3176A:	dc.w 2			
		dc.w $D007,$2027,$2013,	  $C; 0
		dc.w $F00B,$203F,$201F,	   8; 4
word_3177C:	dc.w 2			
		dc.w $D007,$202F,$2017,	  $C; 0
		dc.w $F00B,$204B,$2025,	   8; 4
word_3178E:	dc.w 2			
		dc.w $D007,$2037,$201B,	  $C; 0
		dc.w $F00B,$2057,$202B,	   8; 4
word_317A0:	dc.w 2			
		dc.w $1208,  $12,    9,$FFF8; 0
		dc.w $1A08,  $15,   $A,$FFF8; 4
word_317B2:	dc.w 2			
		dc.w $1208,  $12,    9,$FFF8; 0
		dc.w $1A0A,  $18,   $C,$FFF8; 4
word_317C4:	dc.w 1			
		dc.w $1208,  $12,    9,$FFF8; 0
word_317CE:	dc.w 5			
		dc.w $E009,$2063,$2031,$FFF8; 0
		dc.w $F001,$2069,$2034,	   0; 4
		dc.w $F00F,$206B,$2035,	   8; 8
		dc.w $F802,$207B,$203D,	 $28; 12
		dc.w $1004,$207E,$203F,	 $18; 16
word_317F8:	dc.w 2			
		dc.w $FC0D,$2080,$2040,$FFF0; 0
		dc.w $F80E,$2098,$204C,	 $10; 4
word_3180A:	dc.w 2			
		dc.w $FC0D,$2088,$2044,$FFF0; 0
		dc.w $F80E,$20A4,$2052,	 $10; 4
word_3181C:	dc.w 2			
		dc.w $FC0D,$2090,$2048,$FFF0; 0
		dc.w $F80E,$20B0,$2058,	 $10; 4
word_3182E:	dc.w 1			
		dc.w $F00F,$40BC,$405E,$FFF0; 0
word_31838:	dc.w 1			
		dc.w $F805,$4000,$4000,$FFF8; 0
word_31842:	dc.w 2			
		dc.w $E80D, $170,  $B8,$FFF0; 0
		dc.w $E805, $168,  $B4,$FFE0; 4
word_31854:	dc.w 2			
		dc.w $E80D, $178,  $BC,$FFF0; 0
		dc.w $E805, $168,  $B4,$FFE0; 4
word_31866:	dc.w 2			
		dc.w $E80D, $180,  $C0,$FFF0; 0
		dc.w $E805, $16C,  $B6,$FFE0; 4
word_31878:	dc.w 2			
		dc.w $E80D, $188,  $C4,$FFF0; 0
		dc.w $E805, $16C,  $B6,$FFE0; 4
word_3188A:	dc.w 2			
		dc.w $E80D, $190,  $C8,$FFF0; 0
		dc.w $E805, $16C,  $B6,$FFE0; 4
word_3189C:	dc.w 2			
		dc.w $E80D, $198,  $CC,$FFF0; 0
		dc.w $E805, $16C,  $B6,$FFE0; 4
word_318AE:	dc.w 1			
		dc.w $F003,$4004,$4002,$FFFC; 0
; ===========================================================================

loc_318B8:				
		jmp	DisplaySprite
; ===========================================================================

loc_318BE:				
		jmp	DeleteObject
; ===========================================================================

loc_318C4:				
		jmp	SingleObjLoad
; ===========================================================================

loc_318CA:				
		jmp	(RandomNumber).l
; ===========================================================================

loc_318D0:				
		jmp	(AddPLC).l
; ===========================================================================

loc_318D6:				
		jmp	sub_40D06
; ===========================================================================

loc_318DC:				
		jmp	loc_F626
; ===========================================================================

loc_318E2:				
		jmp	loc_F62E
; ===========================================================================

loc_318E8:				
		jmp	ObjectFall
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; CNZ boss
; ----------------------------------------------------------------------------

Sprite_318F0:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_318FE(pc,d0.w),d1
		jmp	off_318FE(pc,d1.w)
; ===========================================================================
off_318FE:	dc.w loc_31904-off_318FE; 0 
		dc.w loc_31A04-off_318FE; 1
		dc.w loc_31F24-off_318FE; 2
; ===========================================================================

loc_31904:				
		move.l	#Map_320EA,4(a0)
		move.w	#$3A7,2(a0)
		ori.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.w	#$2A46,8(a0)
		move.w	#$654,$C(a0)
		move.b	#0,$B(a0)
		move.b	#$20,$E(a0) ; ' '
		move.b	#-$80,$14(a0)
		addq.b	#2,$A(a0)
		move.b	#0,$26(a0)
		bset	#6,1(a0)
		move.b	#4,$F(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$32(a0)
		move.w	8(a0),($FFFFF750).w
		move.w	$C(a0),(v_boss_y_pos).w
		move.w	8(a0),$10(a0)
		move.w	$C(a0),$12(a0)
		move.b	#5,$15(a0)
		move.w	8(a0),$16(a0)
		move.w	$C(a0),$18(a0)
		move.b	#1,$1B(a0)
		move.w	8(a0),$1C(a0)
		move.w	$C(a0),$1E(a0)
		move.b	#6,$21(a0)
		move.w	8(a0),$22(a0)
		move.w	$C(a0),$24(a0)
		move.b	#2,$27(a0)
		move.b	#0,$38(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$180,(v_boss_x_vel).w
		move.b	#0,$2D(a0)
		move.w	#1,(v_boss_timer).w
		bsr.w	loc_319D6
		rts	
; ===========================================================================

loc_319D6:				
		lea	($FFFFF740).w,a2
		move.b	#8,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)+
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		move.b	#2,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_31A04:				
		tst.b	(v_boss_collision_routine).w
		beq.s	loc_31A1C
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_31A1C
		move.b	#-$30,d0
		bsr.w	loc_3225E

loc_31A1C:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_31A2A(pc,d0.w),d1
		jmp	off_31A2A(pc,d1.w)
; ===========================================================================
off_31A2A:	dc.w loc_31A36-off_31A2A; 0 
		dc.w loc_31BA8-off_31A2A; 1
		dc.w loc_31C22-off_31A2A; 2
		dc.w loc_31D5C-off_31A2A; 3
		dc.w loc_31DCC-off_31A2A; 4
		dc.w loc_31E2A-off_31A2A; 5
; ===========================================================================

loc_31A36:				
		moveq	#0,d0
		move.b	$38(a0),d0
		move.w	off_31A44(pc,d0.w),d0
		jmp	off_31A44(pc,d0.w)
; ===========================================================================
off_31A44:	dc.w loc_31A48-off_31A44; 0 
		dc.w loc_31A78-off_31A44; 1
; ===========================================================================

loc_31A48:				
		cmpi.w	#$28C0,($FFFFF750).w
		bgt.s	loc_31A74
		move.w	#$28C0,($FFFFF750).w
		move.w	#0,(v_boss_y_vel).w
		move.w	#$180,(v_boss_x_vel).w
		move.b	#2,$38(a0)
		bset	#0,1(a0)
		move.b	#0,$2D(a0)

loc_31A74:				
		bra.w	loc_31AA4
; ===========================================================================

loc_31A78:				
		cmpi.w	#$29C0,($FFFFF750).w
		blt.s	loc_31AA4
		move.w	#$29C0,($FFFFF750).w
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$180,(v_boss_x_vel).w
		move.b	#0,$38(a0)
		bclr	#0,1(a0)
		move.b	#0,$2D(a0)

loc_31AA4:				
		bsr.w	loc_2D5DE
		tst.b	$3F(a0)
		beq.s	loc_31AB6
		subq.b	#1,$3F(a0)
		bra.w	loc_31B46
; ===========================================================================

loc_31AB6:				
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$20,d0	; ' '
		bcc.s	loc_31B46
		cmpi.w	#$6B0,($FFFFB00C).w
		bcs.s	loc_31B06
		cmpi.b	#3,$2D(a0)
		bcc.s	loc_31B46
		addq.b	#1,$2D(a0)
		addq.b	#2,$26(a0)
		move.b	#8,($FFFFF740).w
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#0,(v_boss_collision_routine).w
		bsr.w	loc_31BF2
		move.w	#$50,(v_boss_timer).w ; 'P'
		bra.w	loc_31C08
; ===========================================================================

loc_31B06:				
		cmpi.w	#$67C,($FFFFB00C).w
		bcs.s	loc_31B46
		move.b	#$F,$B(a0)
		move.b	#2,(v_boss_collision_routine).w
		move.b	#$20,($FFFFF743).w ; ' '
		move.b	#$20,($FFFFF749).w ; ' '
		move.b	#9,($FFFFF740).w
		addq.b	#4,$26(a0)
		move.w	#0,(v_boss_x_vel).w
		move.w	#$180,(v_boss_y_vel).w
		move.b	#0,$3E(a0)
		bra.w	loc_31C08
; ===========================================================================

loc_31B46:				
		bra.w	*+4
		addi.w	#1,(v_boss_timer).w
		move.w	(v_boss_timer).w,d0
		andi.w	#$3F,d0	; '?'
		bne.w	loc_31C08
		btst	#6,($FFFFF75D).w
		beq.s	loc_31B86
		move.b	#$F,$B(a0)
		move.b	#2,(v_boss_collision_routine).w
		move.b	#$20,($FFFFF743).w ; ' '
		move.b	#$20,($FFFFF749).w ; ' '
		move.b	#9,($FFFFF740).w
		bra.w	loc_31C08
; ===========================================================================

loc_31B86:				
		move.b	#$C,$B(a0)
		move.b	#1,(v_boss_collision_routine).w
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#4,($FFFFF740).w
		bra.w	loc_31C08
; ===========================================================================

loc_31BA8:				
		move.b	#0,(v_boss_collision_routine).w
		subi.w	#1,(v_boss_timer).w
		bne.s	loc_31BC6
		move.b	#$20,($FFFFF743).w ; ' '
		move.b	#$20,($FFFFF749).w ; ' '
		bra.w	loc_31C08
; ===========================================================================

loc_31BC6:				
		cmpi.w	#-$14,(v_boss_timer).w
		bgt.w	loc_31C08
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#0,$26(a0)
		move.w	#-1,(v_boss_timer).w
		move.b	#$40,$3F(a0) ; '@'
		bra.w	loc_31C08
; ===========================================================================

loc_31BF2:				
		bsr.w	loc_32258
		bne.s	locret_31C06
		move.b	#$51,(a1) ; 'Q'
		move.b	#4,$A(a1)
		move.l	a0,$34(a1)

locret_31C06:				
		rts	
; ===========================================================================

loc_31C08:				
		bsr.w	loc_31CDC
		bsr.w	loc_31E76
		bsr.w	loc_31C92
		lea	(off_3209C).l,a1
		bsr.w	loc_2D604
		bra.w	loc_3224C
; ===========================================================================

loc_31C22:				
		bsr.w	loc_2D5DE
		tst.b	$3E(a0)
		bne.s	loc_31C60
		cmpi.w	#$680,$C(a0)
		bcs.s	loc_31C08
		move.w	#0,(v_boss_x_vel).w
		move.w	#-$180,(v_boss_y_vel).w
		move.b	#-1,$3E(a0)
		move.b	#1,(v_boss_collision_routine).w
		move.b	#0,($FFFFF743).w
		move.b	#0,($FFFFF749).w
		move.b	#4,($FFFFF740).w
		bra.s	loc_31C08
; ===========================================================================

loc_31C60:				
		cmpi.w	#$654,$C(a0)
		bcc.s	loc_31C08
		move.b	#0,$26(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$180,(v_boss_x_vel).w
		btst	#0,1(a0)
		beq.s	loc_31C8E
		move.w	#$180,(v_boss_x_vel).w
		move.b	#$C,$B(a0)

loc_31C8E:				
		bra.w	loc_31C08
; ===========================================================================

loc_31C92:				
		cmpi.b	#$2F,$14(a0) ; '/'
		bne.s	loc_31CAC
		lea	($FFFFF740).w,a1
		andi.b	#-$10,6(a1)
		ori.b	#6,6(a1)
		rts	
; ===========================================================================

loc_31CAC:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_31CBC
		cmpi.b	#4,($FFFFB064).w
		bne.s	locret_31CDA

loc_31CBC:				
		lea	($FFFFF740).w,a1
		move.b	6(a1),d0
		andi.b	#$F,d0
		cmpi.b	#6,d0
		beq.s	locret_31CDA
		andi.b	#-$10,6(a1)
		ori.b	#5,6(a1)

locret_31CDA:				
		rts	
; ===========================================================================

loc_31CDC:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		addq.b	#2,$1A(a0)
		cmpi.b	#6,$26(a0)
		bcc.s	locret_31D40
		tst.b	$32(a0)
		beq.s	loc_31D42
		tst.b	$20(a0)
		bne.s	locret_31D40
		tst.b	$14(a0)
		bne.s	loc_31D24
		move.b	#$30,$14(a0) ; '0'
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_31D24:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_31D32
		move.w	#$EEE,d0

loc_31D32:				
		move.w	d0,(a1)
		subq.b	#1,$14(a0)
		bne.s	locret_31D40
		move.b	#$F,$20(a0)

locret_31D40:				
		rts	
; ===========================================================================

loc_31D42:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_32276
		move.w	#$B3,(v_boss_timer).w
		move.b	#6,$26(a0)
		moveq	#$40,d0	; '@'
		bsr.w	loc_32270
		rts	
; ===========================================================================

loc_31D5C:				
		st.b	$2C(a0)
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_31D7E
		move.b	#0,(v_boss_collision_routine).w
		move.b	#0,$B(a0)
		move.b	#$B,$21(a0)
		bsr.w	loc_2D6CC
		bra.s	loc_31DB8
; ===========================================================================

loc_31D7E:				
		bset	#0,1(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,$26(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,6(a1)
		ori.b	#3,6(a1)
		_move.b	#8,0(a1)
		move.b	#-$23,($FFFF8C54).w
		move.b	#1,(f_screen_redraw).w
		move.w	#-$12,(v_boss_timer).w

loc_31DB8:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_31E76
		bra.w	loc_3224C
; ===========================================================================

loc_31DCC:				
		addq.w	#1,(v_boss_timer).w
		beq.s	loc_31DDC
		bpl.s	loc_31DE2
		addi.w	#$18,(v_boss_y_vel).w
		bra.s	loc_31E0E
; ===========================================================================

loc_31DDC:				
		clr.w	(v_boss_y_vel).w
		bra.s	loc_31E0E
; ===========================================================================

loc_31DE2:				
		cmpi.w	#$18,(v_boss_timer).w
		bcs.s	loc_31DFA
		beq.s	loc_31E02
		cmpi.w	#$20,(v_boss_timer).w ; ' '
		bcs.s	loc_31E0E
		addq.b	#2,$26(a0)
		bra.s	loc_31E0E
; ===========================================================================

loc_31DFA:				
		subi.w	#8,(v_boss_y_vel).w
		bra.s	loc_31E0E
; ===========================================================================

loc_31E02:				
		clr.w	(v_boss_y_vel).w
		bsr.w	loc_3227C
		bsr.w	loc_32282

loc_31E0E:				
		bsr.w	loc_2D5DE
		bsr.w	loc_31CDC
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_31E76
		bra.w	loc_3224C
; ===========================================================================

loc_31E2A:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2B20,(v_boundary_right_next).w
		beq.s	loc_31E44
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_31E4A
; ===========================================================================

loc_31E44:				
		tst.b	1(a0)
		bpl.s	loc_31E70

loc_31E4A:				
		bsr.w	loc_2D5DE
		bsr.w	loc_31CDC
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_31E76
		lea	(off_3209C).l,a1
		bsr.w	loc_2D604
		bra.w	loc_3224C
; ===========================================================================

loc_31E70:				
		jmp	DeleteObject
; ===========================================================================

loc_31E76:				
		move.w	8(a0),d0
		move.w	$C(a0),d1
		move.w	d0,$16(a0)
		move.w	d1,$18(a0)
		move.w	d0,$1C(a0)
		move.w	d1,$1E(a0)
		tst.b	$2C(a0)
		bne.s	loc_31EAE
		move.w	d0,$22(a0)
		move.w	d1,$24(a0)
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		move.w	d1,$3A(a0)
		move.w	d1,$34(a0)
		rts	
; ===========================================================================

loc_31EAE:				
		cmpi.w	#$78,(v_boss_timer).w ; 'x'
		bgt.s	locret_31F22
		subi.w	#1,$22(a0)
		move.l	$3A(a0),d0
		move.w	$2E(a0),d1
		addi.w	#$38,$2E(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$3A(a0)
		move.w	$3A(a0),$24(a0)
		cmpi.w	#$6F0,$24(a0)
		blt.s	loc_31EE8
		move.w	#0,$2E(a0)

loc_31EE8:				
		cmpi.w	#$3C,(v_boss_timer).w ; '<'
		bgt.s	locret_31F22
		addi.w	#1,$10(a0)
		move.l	$34(a0),d0
		move.w	$30(a0),d1
		addi.w	#$38,$30(a0)
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d0
		move.l	d0,$34(a0)
		move.w	$34(a0),$12(a0)
		cmpi.w	#$6F0,$12(a0)
		blt.s	locret_31F22
		move.w	#0,$30(a0)

locret_31F22:				
		rts	
; ===========================================================================

loc_31F24:				
		movea.l	$34(a0),a1
		cmpi.b	#6,$26(a1)
		bcc.w	loc_32252
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_31F40(pc,d0.w),d1
		jmp	off_31F40(pc,d1.w)
; ===========================================================================
off_31F40:	dc.w loc_31F48-off_31F40; 0 
		dc.w loc_31F96-off_31F40; 1
		dc.w loc_31FDC-off_31F40; 2
		dc.w loc_32080-off_31F40; 3
; ===========================================================================

loc_31F48:				
		move.l	#Map_320EA,4(a0)
		move.w	#$3A7,2(a0)
		ori.b	#4,1(a0)
		move.b	#7,$18(a0)
		addq.b	#2,$25(a0)
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#$30,$C(a0) ; '0'
		move.b	#8,$16(a0)
		move.b	#8,$17(a0)
		move.b	#$12,$1A(a0)
		move.b	#-$68,$20(a0)
		rts	
; ===========================================================================

loc_31F96:				
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.w	$28(a0),d0
		add.w	d0,$C(a0)
		addi.w	#1,d0
		cmpi.w	#$2E,d0	; '.'
		blt.s	loc_31FBC
		move.w	#$2E,d0	; '.'

loc_31FBC:				
		move.w	d0,$28(a0)
		tst.w	(v_boss_timer).w
		bne.w	loc_3224C
		addq.b	#2,$25(a0)
		move.w	#0,$10(a0)
		move.w	#0,$12(a0)
		bra.w	loc_3224C
; ===========================================================================

loc_31FDC:				
		bsr.w	loc_31FF8
		jsr	loc_1EDFA
		tst.w	d1
		bpl.w	loc_3224C
		add.w	d1,$C(a0)
		bsr.w	loc_32030
		bra.w	loc_3224C
; ===========================================================================

loc_31FF8:				
		moveq	#0,d2
		move.w	8(a0),d2
		swap	d2
		moveq	#0,d3

loc_32002:
		move.w	$C(a0),d3
		swap	d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		addi.w	#$38,$12(a0)
		swap	d2
		move.w	d2,8(a0)
		swap	d3
		move.w	d3,$C(a0)
		rts	
; ===========================================================================

loc_32030:				
		move.b	#-$3C,d0
		bsr.w	loc_3225E
		move.w	#$3A7,2(a0)
		move.b	#7,$1C(a0)
		move.w	#-$300,$12(a0)
		move.w	#-$100,$10(a0)
		move.b	#4,$A(a0)
		move.b	#6,$25(a0)
		move.b	#-$68,$20(a0)
		bsr.w	loc_32264
		bne.s	locret_3207E
		moveq	#0,d0
		move.w	#$F,d1

loc_3206E:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_3206E
		neg.w	$10(a1)

locret_3207E:				
		rts	
; ===========================================================================

loc_32080:				
		bsr.w	loc_31FF8
		lea	(off_3209C).l,a1
		bsr.w	loc_3226A
		cmpi.w	#$705,$C(a0)
		bcs.w	loc_3224C
		bra.w	loc_32252
; ===========================================================================
off_3209C:	dc.w byte_320B0-off_3209C; 0 
		dc.w byte_320B3-off_3209C; 1
		dc.w byte_320B9-off_3209C; 2
		dc.w byte_320BF-off_3209C; 3
		dc.w byte_320C3-off_3209C; 4
		dc.w byte_320C8-off_3209C; 5
		dc.w byte_320D3-off_3209C; 6
		dc.w byte_320DD-off_3209C; 7
		dc.w byte_320E1-off_3209C; 8
		dc.w byte_320E4-off_3209C; 9
byte_320B0:	dc.b  $F,  1,$FF	; 0 
byte_320B3:	dc.b  $F,  4,$FF,  5,$FC,  2; 0	
byte_320B9:	dc.b  $F,  2,$FF,  3,$FC,  2; 0	
byte_320BF:	dc.b   7,  6,  7,$FF	; 0 
byte_320C3:	dc.b   1, $C, $D, $E,$FF; 0 
byte_320C8:	dc.b   7,  8,  9,  8,  9,  8,  9,  8,  9,$FD,  3; 0 
byte_320D3:	dc.b   7, $A, $A, $A, $A, $A, $A, $A,$FD,  3; 0	
byte_320DD:	dc.b   3,$13,$14,$FF	; 0 
byte_320E1:	dc.b   1,  0,$FF	; 0 
byte_320E4:	dc.b   1, $F,$10,$11,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_320EA:				
		dc.w Map_320EA-Map_320EA;	0
		dc.w word_32114-Map_320EA; 1
		dc.w word_3213E-Map_320EA; 2
		dc.w word_32148-Map_320EA; 3
		dc.w word_32152-Map_320EA; 4
		dc.w word_3215C-Map_320EA; 5
		dc.w word_3216E-Map_320EA; 6
		dc.w word_32180-Map_320EA; 7
		dc.w word_32192-Map_320EA; 8
		dc.w word_321A4-Map_320EA; 9
		dc.w word_321B6-Map_320EA; 10
		dc.w word_321C8-Map_320EA; 11
		dc.w word_321DA-Map_320EA; 12
		dc.w word_321E4-Map_320EA; 13
		dc.w word_321EE-Map_320EA; 14
		dc.w word_321F8-Map_320EA; 15
		dc.w word_3220A-Map_320EA; 16
		dc.w word_3221C-Map_320EA; 17
		dc.w word_3222E-Map_320EA; 18
		dc.w word_32238-Map_320EA; 19
		dc.w word_32242-Map_320EA; 20
word_32114:	dc.w 5			
		dc.w $F005, $17D,  $BE,	 $10; 0
		dc.w $D80E,$2060,$2030,$FFF9; 4
		dc.w	$F,$206C,$2036,$FFD8; 8
		dc.w	$F,$207C,$203E,$FFF8; 12
		dc.w	 6,$208C,$2046,	 $18; 16
word_3213E:	dc.w 1			
		dc.w $1806,$20AA,$2055,$FFE4; 0
word_32148:	dc.w 1			
		dc.w $1006,$20B0,$2058,$FFDB; 0
word_32152:	dc.w 1			
		dc.w $100B,$2092,$2049,	   8; 0
word_3215C:	dc.w 2			
		dc.w $1009,$209E,$204F,	   8; 0
		dc.w $1006,$20A4,$2052,	 $20; 4
word_3216E:	dc.w 2			
		dc.w $F00D, $189,  $C4,$FFF0; 0
		dc.w $F005, $181,  $C0,$FFE0; 4
word_32180:	dc.w 2			
		dc.w $F00D, $191,  $C8,$FFF0; 0
		dc.w $F005, $181,  $C0,$FFE0; 4
word_32192:	dc.w 2			
		dc.w $F00D, $199,  $CC,$FFF0; 0
		dc.w $F005, $185,  $C2,$FFE0; 4
word_321A4:	dc.w 2			
		dc.w $F00D, $1A1,  $D0,$FFF0; 0
		dc.w $F005, $185,  $C2,$FFE0; 4
word_321B6:	dc.w 2			
		dc.w $F00D, $1A9,  $D4,$FFF0; 0
		dc.w $F005, $185,  $C2,$FFE0; 4
word_321C8:	dc.w 2			
		dc.w $F00D, $1B1,  $D8,$FFF0; 0
		dc.w $F005, $185,  $C2,$FFE0; 4
word_321DA:	dc.w 1			
		dc.w $280C,$20B6,$205B,$FFF0; 0
word_321E4:	dc.w 1			
		dc.w $280C,$20BA,$205D,$FFF0; 0
word_321EE:	dc.w 1			
		dc.w $280C,$20BE,$205F,$FFF0; 0
word_321F8:	dc.w 2			
		dc.w $200C,$20C2,$2061,$FFE4; 0
		dc.w $200C,$20C6,$2063,	   4; 4
word_3220A:	dc.w 2			
		dc.w $200C,$20CA,$2065,$FFE4; 0
		dc.w $200C,$20CE,$2067,	   4; 4
word_3221C:	dc.w 2			
		dc.w $200C,$20D2,$2069,$FFE4; 0
		dc.w $200C,$20D6,$206B,	   4; 4
word_3222E:	dc.w 1			
		dc.w $F40A,  $DA,  $6D,$FFF4; 0
word_32238:	dc.w 1			
		dc.w $FC00,  $E3,  $71,$FFFC; 0
word_32242:	dc.w 1			
		dc.w $FC00,  $E4,  $72,$FFFC; 0
; ===========================================================================

loc_3224C:				
		jmp	DisplaySprite
; ===========================================================================

loc_32252:				
		jmp	DeleteObject
; ===========================================================================

loc_32258:				
		jmp	SingleObjLoad
; ===========================================================================

loc_3225E:				
		jmp	(PlaySound).l
; ===========================================================================

loc_32264:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_3226A:				
		jmp	AnimateSprite
; ===========================================================================

loc_32270:				
		jmp	(AddPLC).l
; ===========================================================================

loc_32276:				
		jmp	sub_40D06
; ===========================================================================

loc_3227C:				
		jmp	loc_F626
; ===========================================================================

loc_32282:				
		jmp	loc_F62E
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; MTZ boss
; ----------------------------------------------------------------------------

Sprite_32288:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_32296(pc,d0.w),d1
		jmp	off_32296(pc,d1.w)
; ===========================================================================
off_32296:	dc.w loc_3229E-off_32296; 0 
		dc.w loc_323BA-off_32296; 1
		dc.w loc_32CAE-off_32296; 2
		dc.w loc_32D48-off_32296; 3
; ===========================================================================

loc_3229E:				
		move.l	#Map_32DC6,4(a0)
		move.w	#$37C,2(a0)
		ori.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.w	#$2B50,8(a0)
		move.w	#$380,$C(a0)
		move.b	#2,$B(a0)
		addq.b	#2,$A(a0)

loc_322CE:
		bset	#6,1(a0)
		move.b	#2,$F(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$32(a0)
		move.b	#7,$3E(a0)
		move.w	8(a0),($FFFFF750).w
		move.w	$C(a0),(v_boss_y_pos).w
		move.w	#0,(v_boss_x_vel).w
		move.w	#$100,(v_boss_y_vel).w
		move.b	#$20,$E(a0) ; ' '
		clr.b	$2B(a0)
		clr.b	$2C(a0)
		move.b	#$40,$1A(a0) ; '@'
		move.b	#$27,$33(a0) ; '''
		move.b	#$27,$39(a0) ; '''
		move.w	8(a0),$10(a0)
		move.w	$C(a0),$12(a0)
		move.b	#$C,$15(a0)
		move.w	8(a0),$16(a0)

loc_3233C:
		move.w	$C(a0),$18(a0)
		move.b	#0,$1B(a0)
		bsr.w	loc_32F58
		bne.s	loc_3239C
		move.b	#$54,(a1) ; 'T'
		move.b	#6,$A(a1)
		move.b	#$13,$1A(a1)
		move.l	#Map_32DC6,4(a1)
		move.w	#$37C,2(a1)
		ori.b	#4,1(a1)
		move.b	#6,$18(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	a0,$34(a1)
		move.b	#$20,$19(a1) ; ' '
		bsr.w	loc_32F58
		bne.s	loc_3239C
		move.b	#$53,(a1) ; 'S'
		move.l	a0,$34(a1)

loc_3239C:				
		lea	($FFFFF740).w,a2
		move.b	#$10,(a2)+
		move.b	#0,(a2)+
		move.b	#3,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)+
		rts	
; ===========================================================================

loc_323BA:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_323C8(pc,d0.w),d1
		jmp	off_323C8(pc,d1.w)
; ===========================================================================
off_323C8:	dc.w loc_323DC-off_323C8; 0 
		dc.w loc_32456-off_323C8; 1
		dc.w loc_324DC-off_323C8; 2
		dc.w loc_32524-off_323C8; 3
		dc.w loc_32544-off_323C8; 4
		dc.w loc_32574-off_323C8; 5
		dc.w loc_325BE-off_323C8; 6
		dc.w loc_3262E-off_323C8; 7
		dc.w loc_32802-off_323C8; 8
		dc.w loc_32864-off_323C8; 9
; ===========================================================================

loc_323DC:				
		bsr.w	loc_2D5DE
		move.w	(v_boss_y_pos).w,$C(a0)
		cmpi.w	#$4A0,(v_boss_y_pos).w
		bcs.s	loc_32426
		addq.b	#2,$26(a0)
		move.w	#0,(v_boss_y_vel).w
		move.w	#-$100,(v_boss_x_vel).w
		bclr	#7,$2B(a0)
		bclr	#0,1(a0)
		move.w	($FFFFB008).w,d0
		cmp.w	($FFFFF750).w,d0
		bcs.s	loc_32426
		move.w	#$100,(v_boss_x_vel).w
		bset	#7,$2B(a0)
		bset	#0,1(a0)

loc_32426:				
		bsr.w	loc_3278E
		lea	(off_32D7A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_32774
		bra.w	loc_32F4C
; ===========================================================================

loc_3243C:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,$C(a0)
		addq.b	#4,$1A(a0)
		rts	
; ===========================================================================

loc_32456:				
		bsr.w	loc_2D5DE
		btst	#7,$2B(a0)
		bne.s	loc_32490
		cmpi.w	#$2AD0,($FFFFF750).w
		bcc.s	loc_324BC
		bchg	#7,$2B(a0)
		move.w	#$100,(v_boss_x_vel).w
		bset	#0,1(a0)
		bset	#6,$2B(a0)
		beq.s	loc_324BC
		addq.b	#2,$26(a0)
		move.w	#-$100,(v_boss_y_vel).w
		bra.s	loc_324BC
; ===========================================================================

loc_32490:				
		cmpi.w	#$2BD0,($FFFFF750).w
		bcs.s	loc_324BC
		bchg	#7,$2B(a0)
		move.w	#-$100,(v_boss_x_vel).w
		bclr	#0,1(a0)
		bset	#6,$2B(a0)
		beq.s	loc_324BC
		addq.b	#2,$26(a0)
		move.w	#-$100,(v_boss_y_vel).w

loc_324BC:				
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_3243C

loc_324C6:				
		bsr.w	loc_3278E
		lea	(off_32D7A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_32774
		bra.w	loc_32F4C
; ===========================================================================

loc_324DC:				
		bsr.w	loc_2D5DE
		cmpi.w	#$470,(v_boss_y_pos).w
		bcc.s	loc_324EE
		move.w	#0,(v_boss_y_vel).w

loc_324EE:				
		btst	#7,$2B(a0)
		bne.s	loc_32506
		cmpi.w	#$2B50,($FFFFF750).w
		bcc.s	loc_32514
		move.w	#0,(v_boss_x_vel).w
		bra.s	loc_32514
; ===========================================================================

loc_32506:				
		cmpi.w	#$2B50,($FFFFF750).w
		bcs.s	loc_32514
		move.w	#0,(v_boss_x_vel).w

loc_32514:				
		move.w	(v_boss_x_vel).w,d0
		or.w	(v_boss_y_vel).w,d0
		bne.s	loc_32522
		addq.b	#2,$26(a0)

loc_32522:				
		bra.s	loc_324BC
; ===========================================================================

loc_32524:				
		cmpi.b	#$68,$33(a0) ; 'h'
		bcc.s	loc_32536
		addq.b	#1,$33(a0)
		addq.b	#1,$39(a0)
		bra.s	loc_32540
; ===========================================================================

loc_32536:				
		subq.b	#1,$39(a0)
		bne.s	loc_32540
		addq.b	#2,$26(a0)

loc_32540:				
		bra.w	loc_324BC
; ===========================================================================

loc_32544:				
		cmpi.b	#$27,$33(a0) ; '''
		bcs.s	loc_32552
		subq.b	#1,$33(a0)
		bra.s	loc_32570
; ===========================================================================

loc_32552:				
		addq.b	#1,$39(a0)
		cmpi.b	#$27,$39(a0) ; '''
		bcs.s	loc_32570
		move.w	#$100,(v_boss_y_vel).w
		move.b	#0,$26(a0)
		bclr	#6,$2B(a0)

loc_32570:				
		bra.w	loc_324BC
; ===========================================================================

loc_32574:				
		tst.b	$39(a0)
		beq.s	loc_32580
		subq.b	#1,$39(a0)
		bra.s	loc_32586
; ===========================================================================

loc_32580:				
		move.b	#-1,$3A(a0)

loc_32586:				
		cmpi.b	#$27,$33(a0) ; '''
		bcs.s	loc_32592
		subq.b	#1,$33(a0)

loc_32592:				
		bsr.w	loc_2D5DE
		cmpi.w	#$420,(v_boss_y_pos).w
		bcc.s	loc_325A4
		move.w	#0,(v_boss_y_vel).w

loc_325A4:				
		tst.b	$2C(a0)
		bne.s	loc_325BA
		tst.b	$3A(a0)
		beq.s	loc_325B6
		move.b	#-$80,$3A(a0)

loc_325B6:				
		addq.b	#2,$26(a0)

loc_325BA:				
		bra.w	loc_324BC
; ===========================================================================

loc_325BE:				
		tst.b	$3E(a0)
		beq.s	loc_325EC
		tst.b	$3A(a0)
		bne.s	loc_3262A
		cmpi.b	#$27,$39(a0) ; '''
		bcc.s	loc_325D8
		addq.b	#1,$39(a0)
		bra.s	loc_3262A
; ===========================================================================

loc_325D8:				
		move.w	#$100,(v_boss_y_vel).w
		move.b	#0,$26(a0)
		bclr	#6,$2B(a0)
		bra.s	loc_3262A
; ===========================================================================

loc_325EC:				
		move.w	#-$180,(v_boss_y_vel).w
		move.w	#-$100,(v_boss_x_vel).w
		bclr	#0,1(a0)
		btst	#7,$2B(a0)
		beq.s	loc_32612
		move.w	#$100,(v_boss_x_vel).w
		bset	#0,1(a0)

loc_32612:				
		move.b	#$E,$26(a0)
		move.b	#0,$2E(a0)
		bclr	#6,$2B(a0)
		move.b	#0,$2F(a0)

loc_3262A:				
		bra.w	loc_324BC
; ===========================================================================

loc_3262E:				
		tst.b	$2F(a0)
		beq.s	loc_3263C
		subq.b	#1,$2F(a0)
		bra.w	loc_324C6
; ===========================================================================

loc_3263C:				
		moveq	#0,d0
		move.b	$2E(a0),d0
		move.w	off_3264A(pc,d0.w),d1
		jmp	off_3264A(pc,d1.w)
; ===========================================================================
off_3264A:	dc.w loc_32650-off_3264A; 0 
		dc.w loc_326B8-off_3264A; 1
		dc.w loc_32704-off_3264A; 2
; ===========================================================================

loc_32650:				
		bsr.w	loc_2D5DE
		cmpi.w	#$420,(v_boss_y_pos).w
		bcc.s	loc_32662
		move.w	#0,(v_boss_y_vel).w

loc_32662:				
		btst	#7,$2B(a0)
		bne.s	loc_32690
		cmpi.w	#$2AF0,($FFFFF750).w
		bcc.s	loc_326B4
		addq.b	#2,$2E(a0)
		move.w	#$180,(v_boss_y_vel).w
		move.b	#3,$2D(a0)
		move.w	#$1E,(v_boss_timer).w
		bset	#0,1(a0)
		bra.s	loc_326B4
; ===========================================================================

loc_32690:				
		cmpi.w	#$2BB0,($FFFFF750).w
		bcs.s	loc_326B4
		addq.b	#2,$2E(a0)
		move.w	#$180,(v_boss_y_vel).w
		move.b	#3,$2D(a0)
		move.w	#$1E,(v_boss_timer).w
		bclr	#0,1(a0)

loc_326B4:				
		bra.w	loc_324BC
; ===========================================================================

loc_326B8:				
		bsr.w	loc_2D5DE
		cmpi.w	#$4A0,(v_boss_y_pos).w
		bcs.s	loc_326D6
		move.w	#-$180,(v_boss_y_vel).w
		addq.b	#2,$2E(a0)
		bchg	#7,$2B(a0)
		bra.s	loc_326FC
; ===========================================================================

loc_326D6:				
		btst	#7,$2B(a0)
		bne.s	loc_326EE
		cmpi.w	#$2AD0,($FFFFF750).w
		bcc.s	loc_326FC
		move.w	#0,(v_boss_x_vel).w
		bra.s	loc_326FC
; ===========================================================================

loc_326EE:				
		cmpi.w	#$2BD0,($FFFFF750).w
		bcs.s	loc_326FC
		move.w	#0,(v_boss_x_vel).w

loc_326FC:				
		bsr.w	loc_32740
		bra.w	loc_324BC
; ===========================================================================

loc_32704:				
		bsr.w	loc_2D5DE
		cmpi.w	#$470,(v_boss_y_pos).w
		bcc.s	loc_32724
		move.w	#$100,(v_boss_x_vel).w
		btst	#7,$2B(a0)
		bne.s	loc_32724
		move.w	#-$100,(v_boss_x_vel).w

loc_32724:				
		cmpi.w	#$420,(v_boss_y_pos).w
		bcc.s	loc_32738
		move.w	#0,(v_boss_y_vel).w
		move.b	#0,$2E(a0)

loc_32738:				
		bsr.w	loc_32740
		bra.w	loc_324BC
; ===========================================================================

loc_32740:				
		subi.w	#1,(v_boss_timer).w
		bne.s	locret_32772
		tst.b	$2D(a0)
		beq.s	locret_32772
		subq.b	#1,$2D(a0)
		bsr.w	loc_32F58
		bne.s	locret_32772
		move.b	#$54,(a1) ; 'T'
		move.b	#4,$A(a1)
		move.l	a0,$34(a1)
		move.w	#$1E,(v_boss_timer).w
		move.b	#$10,$2F(a0)

locret_32772:				
		rts	
; ===========================================================================

loc_32774:				
		move.w	8(a0),d0
		move.w	$C(a0),d1
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		move.w	d0,$16(a0)
		move.w	d1,$18(a0)
		rts	
; ===========================================================================

loc_3278E:				
		bsr.w	loc_328DE
		cmpi.b	#$3F,$14(a0) ; '?'
		bne.s	loc_327D2
		st.b	$38(a0)
		lea	($FFFFF740).w,a1
		andi.b	#-$10,2(a1)
		ori.b	#5,2(a1)
		tst.b	$3E(a0)
		beq.s	loc_327CA
		move.b	#$A,$26(a0)
		move.w	#-$180,(v_boss_y_vel).w
		subq.b	#1,$3E(a0)
		move.w	#0,(v_boss_x_vel).w

loc_327CA:				
		move.w	#0,(v_boss_x_vel).w
		rts	
; ===========================================================================

loc_327D2:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_327E2
		cmpi.b	#4,($FFFFB064).w
		bne.s	locret_32800

loc_327E2:				
		lea	($FFFFF740).w,a1
		move.b	2(a1),d0
		andi.b	#$F,d0
		cmpi.b	#4,d0
		beq.s	locret_32800
		andi.b	#-$10,2(a1)
		ori.b	#4,2(a1)

locret_32800:				
		rts	
; ===========================================================================

loc_32802:				
		subq.w	#1,(v_boss_timer).w
		cmpi.w	#$3C,(v_boss_timer).w ; '<'
		bcs.s	loc_32846
		bmi.s	loc_32820
		bsr.w	loc_2D6CC
		lea	($FFFFF740).w,a1
		move.b	#7,2(a1)
		bra.s	loc_32846
; ===========================================================================

loc_32820:				
		bset	#0,1(a0)
		clr.w	(v_boss_x_vel).w
		clr.w	(v_boss_y_vel).w
		addq.b	#2,$26(a0)
		move.w	#-$12,(v_boss_timer).w
		lea	($FFFFF740).w,a1
		move.b	#3,2(a1)
		bsr.w	loc_32F76

loc_32846:				
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		lea	(off_32D7A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_32774
		bra.w	loc_32F4C
; ===========================================================================

loc_32864:				
		move.w	#$400,(v_boss_x_vel).w
		move.w	#-$40,(v_boss_y_vel).w
		cmpi.w	#$2BF0,(v_boundary_right_next).w
		bcc.s	loc_3287E
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_32884
; ===========================================================================

loc_3287E:				
		tst.b	1(a0)
		bpl.s	loc_328BA

loc_32884:				
		tst.b	(v_boss_status).w
		bne.s	loc_32894
		move.b	#1,(v_boss_status).w
		bsr.w	loc_32F7C

loc_32894:				
		bsr.w	loc_2D5DE
		bsr.w	loc_328C0
		move.w	(v_boss_y_pos).w,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		lea	(off_32D7A).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_32774
		bra.w	loc_32F4C
; ===========================================================================

loc_328BA:				
		jmp	DeleteObject
; ===========================================================================

loc_328C0:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#6,d0
		add.w	(v_boss_y_pos).w,d0
		move.w	d0,$C(a0)
		move.w	($FFFFF750).w,8(a0)
		addq.b	#2,$1A(a0)

loc_328DE:				
		cmpi.b	#$10,$26(a0)
		bcc.s	locret_32924
		tst.b	$32(a0)
		beq.s	loc_32926
		tst.b	$20(a0)
		bne.s	locret_32924
		tst.b	$14(a0)
		bne.s	loc_32908
		move.b	#$40,$14(a0) ; '@'
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_32908:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_32916
		move.w	#$EEE,d0

loc_32916:				
		move.w	d0,(a1)
		subq.b	#1,$14(a0)
		bne.s	locret_32924
		move.b	#$F,$20(a0)

locret_32924:				
		rts	
; ===========================================================================

loc_32926:				
		moveq	#$64,d0	; 'd'
		bsr.w	loc_32F70
		move.w	#$EF,(v_boss_timer).w
		move.b	#$10,$26(a0)
		moveq	#$40,d0	; '@'
		bsr.w	loc_32F6A
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_32940:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3294E(pc,d0.w),d1
		jmp	off_3294E(pc,d1.w)
; ===========================================================================
off_3294E:	dc.w loc_32958-off_3294E; 0 
		dc.w loc_329DA-off_3294E; 1
		dc.w loc_32B64-off_3294E; 2
		dc.w loc_32BDC-off_3294E; 3
		dc.w loc_32C98-off_3294E; 4
; ===========================================================================

loc_32958:				
		movea.l	a0,a1
		moveq	#6,d3
		moveq	#0,d2
		bra.s	loc_32966
; ===========================================================================

loc_32960:				
		bsr.w	loc_32F58
		bne.s	locret_329CA

loc_32966:				
		move.b	#$20,$19(a1) ; ' '
		move.l	$34(a0),$34(a1)
		move.b	#$53,(a1) ; 'S'
		move.l	#Map_32DC6,4(a1)
		move.w	#$37C,2(a1)
		ori.b	#4,1(a1)
		move.b	#3,$18(a1)
		addq.b	#2,$24(a1)
		move.b	#5,$1A(a1)
		move.b	byte_329CC(pc,d2.w),$28(a1)
		move.b	byte_329CC(pc,d2.w),$3B(a1)
		move.b	byte_329D3(pc,d2.w),$3A(a1)
		move.b	#$40,$29(a1) ; '@'
		move.b	#-$79,$20(a1)
		move.b	#2,$21(a1)
		move.b	#0,$3C(a1)
		addq.w	#1,d2
		dbf	d3,loc_32960

locret_329CA:				
		rts	
; ===========================================================================
byte_329CC:	dc.b $24		; 0
		dc.b $6C		; 1
		dc.b $B4		; 2
		dc.b $FC		; 3
		dc.b $48		; 4
		dc.b $90		; 5
		dc.b $D8		; 6
byte_329D3:	dc.b   0		; 0
		dc.b   1		; 1
		dc.b   1		; 2
		dc.b   0		; 3
		dc.b   1		; 4
		dc.b   1		; 5
		dc.b   0		; 6
; ===========================================================================

loc_329DA:				
		movea.l	$34(a0),a1
		move.w	$C(a1),$2A(a0)
		subi.w	#4,$2A(a0)
		move.w	8(a1),$38(a0)
		tst.b	$38(a1)
		beq.s	loc_32A56
		move.b	#0,$38(a1)
		addi.b	#1,$2C(a1)
		addq.b	#2,$24(a0)
		move.b	#$3C,$32(a0) ; '<'
		move.b	#2,$1C(a0)
		move.w	#-$400,$12(a0)
		move.w	#-$80,d1
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		bpl.s	loc_32A28
		neg.w	d1

loc_32A28:				
		cmpi.w	#$2AF0,8(a0)
		bcc.s	loc_32A34
		move.w	#$80,d1	

loc_32A34:				
		cmpi.w	#$2BB0,8(a0)
		bcs.s	loc_32A40
		move.w	#-$80,d1

loc_32A40:				
		bclr	#0,1(a0)
		tst.w	d1
		bmi.s	loc_32A50
		bset	#0,1(a0)

loc_32A50:				
		move.w	d1,$10(a0)
		bra.s	loc_32A64
; ===========================================================================

loc_32A56:				
		cmpi.b	#2,$21(a0)
		beq.s	loc_32A64
		move.b	#0,$20(a1)

loc_32A64:				
		bsr.w	loc_32A70
		bsr.w	loc_32B1A
		bra.w	loc_32F4C
; ===========================================================================

loc_32A70:				
		move.b	$29(a0),d0
		jsr	(CalcSine).l
		move.w	d0,d3
		moveq	#0,d1
		move.b	$33(a1),d1
		muls.w	d1,d0
		move.w	d0,d5
		move.w	d0,d4
		move.b	$39(a1),d2
		tst.b	$3A(a1)
		beq.s	loc_32A96
		move.w	#$10,d2

loc_32A96:				
		muls.w	d3,d2
		move.w	$38(a0),d6
		move.b	$28(a0),d0
		jsr	(CalcSine).l
		muls.w	d0,d5
		swap	d5
		add.w	d6,d5
		move.w	d5,8(a0)
		muls.w	d1,d4
		swap	d4
		move.w	d4,$30(a0)
		move.w	$2A(a0),d6
		move.b	$3B(a0),d0
		tst.b	$3A(a1)
		beq.s	loc_32ACA
		move.b	$3C(a0),d0

loc_32ACA:				
		jsr	(CalcSine).l
		muls.w	d0,d2
		swap	d2
		add.w	d6,d2
		move.w	d2,$C(a0)
		addq.b	#4,$28(a0)
		tst.b	$3A(a1)
		bne.s	loc_32AEA
		addq.b	#8,$3B(a0)
		rts	
; ===========================================================================

loc_32AEA:				
		cmpi.b	#-1,$3A(a1)
		beq.s	loc_32B0C
		cmpi.b	#-$80,$3A(a1)
		bne.s	loc_32B04
		subq.b	#2,$3C(a0)
		bpl.s	locret_32B18
		clr.b	$3C(a0)

loc_32B04:				
		move.b	#0,$3A(a1)
		rts	
; ===========================================================================

loc_32B0C:				
		cmpi.b	#$40,$3C(a0) ; '@'
		bcc.s	locret_32B18
		addq.b	#2,$3C(a0)

locret_32B18:				
		rts	
; ===========================================================================

loc_32B1A:				
		move.w	$30(a0),d0
		bmi.s	loc_32B42
		cmpi.w	#$C,d0
		blt.s	loc_32B34
		move.b	#3,$1A(a0)
		move.b	#1,$18(a0)
		rts	
; ===========================================================================

loc_32B34:				
		move.b	#4,$1A(a0)
		move.b	#2,$18(a0)
		rts	
; ===========================================================================

loc_32B42:				
		cmpi.w	#-$C,d0
		blt.s	loc_32B56
		move.b	#4,$1A(a0)
		move.b	#6,$18(a0)
		rts	
; ===========================================================================

loc_32B56:				
		move.b	#5,$1A(a0)
		move.b	#7,$18(a0)
		rts	
; ===========================================================================

loc_32B64:				
		tst.b	$32(a0)
		bmi.s	loc_32B76
		subq.b	#1,$32(a0)
		bpl.s	loc_32B76
		move.b	#-$26,$20(a0)

loc_32B76:				
		bsr.w	loc_32F82
		subi.w	#$20,$12(a0) ; ' '
		cmpi.w	#$180,$12(a0)
		blt.s	loc_32B8E
		move.w	#$180,$12(a0)

loc_32B8E:				
		cmpi.w	#$4AC,$C(a0)
		bcs.s	loc_32BB0
		move.w	#$4AC,$C(a0)
		move.w	#$4AC,$2E(a0)
		move.b	#1,$2C(a0)
		addq.b	#2,$24(a0)
		bsr.w	loc_32C4C

loc_32BB0:				
		bsr.w	loc_32BC2
		lea	(off_32D7A).l,a1
		bsr.w	loc_32F64
		bra.w	loc_32F4C
; ===========================================================================

loc_32BC2:				
		cmpi.b	#-2,$21(a0)
		bgt.s	locret_32BDA
		move.b	#$14,$1A(a0)
		move.b	#6,$1C(a0)
		addq.b	#2,$24(a0)

locret_32BDA:				
		rts	
; ===========================================================================

loc_32BDC:				
		tst.b	$32(a0)
		bmi.s	loc_32BEE
		subq.b	#1,$32(a0)
		bpl.s	loc_32BEE
		move.b	#-$26,$20(a0)

loc_32BEE:				
		bsr.w	loc_32C66
		cmpi.b	#$B,$1A(a0)
		bne.s	loc_32BB0
		move.b	$2C(a0),d0
		jsr	(CalcSine).l
		neg.w	d0
		asr.w	#2,d0
		add.w	$2E(a0),d0
		cmpi.w	#$4AC,d0
		bcc.s	loc_32C38
		move.w	d0,$C(a0)
		addq.b	#1,$2C(a0)
		btst	#0,$2C(a0)
		beq.w	loc_32F4C
		moveq	#-1,d0
		btst	#0,1(a0)
		beq.s	loc_32C30
		neg.w	d0

loc_32C30:				
		add.w	d0,8(a0)
		bra.w	loc_32F4C
; ===========================================================================

loc_32C38:				
		move.w	#$4AC,$C(a0)
		bsr.w	loc_32C4C
		move.b	#1,$2C(a0)
		bra.w	loc_32F4C
; ===========================================================================

loc_32C4C:				
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		bpl.s	loc_32C5E
		bclr	#0,1(a0)
		rts	
; ===========================================================================

loc_32C5E:				
		bset	#0,1(a0)
		rts	
; ===========================================================================

loc_32C66:				
		cmpi.b	#4,($FFFFB024).w
		beq.s	loc_32C76
		cmpi.b	#4,($FFFFB064).w
		bne.s	loc_32C82

loc_32C76:				
		move.b	#$14,$1A(a0)
		move.b	#6,$1C(a0)

loc_32C82:				
		cmpi.b	#-2,$21(a0)
		bgt.s	locret_32C96
		move.b	#$14,$1A(a0)
		move.b	#6,$1C(a0)

locret_32C96:				
		rts	
; ===========================================================================

loc_32C98:				
		move.b	#-$3C,d0
		bsr.w	loc_32F5E
		movea.l	$34(a0),a1
		subi.b	#1,$2C(a1)
		bra.w	loc_32F52
; ===========================================================================

loc_32CAE:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_32CBC(pc,d0.w),d0
		jmp	off_32CBC(pc,d0.w)
; ===========================================================================
off_32CBC:	dc.w loc_32CC0-off_32CBC; 0 
		dc.w loc_32D2C-off_32CBC; 1
; ===========================================================================

loc_32CC0:				
		move.l	#Map_32DC6,4(a0)
		move.w	#$37C,2(a0)
		ori.b	#4,1(a0)
		move.b	#5,$18(a0)
		move.b	#$12,$1A(a0)
		addq.b	#2,$25(a0)
		movea.l	$34(a0),a1
		move.b	#$50,$19(a0) ; 'P'
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		addi.w	#7,$C(a0)
		subi.w	#4,8(a0)
		move.w	#-$400,d0
		btst	#0,1(a1)
		beq.s	loc_32D1A
		neg.w	d0
		addi.w	#8,8(a0)

loc_32D1A:				
		move.w	d0,$10(a0)
		move.b	#-$67,$20(a0)
		move.b	#-$16,d0
		bsr.w	loc_32F5E

loc_32D2C:				
		bsr.w	loc_32F88
		cmpi.w	#$2AB0,8(a0)
		bcs.w	loc_32F52
		cmpi.w	#$2BF0,8(a0)
		bcc.w	loc_32F52
		bra.w	loc_32F4C
; ===========================================================================

loc_32D48:				
		movea.l	$34(a0),a1
		cmpi.b	#$54,(a1) ; 'T'
		bne.w	loc_32F52
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		bclr	#0,1(a0)
		btst	#0,1(a1)
		beq.w	loc_32F4C
		bset	#0,1(a0)
		bra.w	loc_32F4C
; ===========================================================================
off_32D7A:	dc.w byte_32D8A-off_32D7A; 0 
		dc.w byte_32D8D-off_32D7A; 1
		dc.w byte_32D91-off_32D7A; 2
		dc.w byte_32DA6-off_32D7A; 3
		dc.w byte_32DAA-off_32D7A; 4
		dc.w byte_32DB5-off_32D7A; 5
		dc.w byte_32DC0-off_32D7A; 6
		dc.w byte_32DC3-off_32D7A; 7
byte_32D8A:	dc.b  $F,  2,$FF	; 0 
byte_32D8D:	dc.b   1,  0,  1,$FF	; 0 
byte_32D91:	dc.b   3,  5,  5,  5,  5,  5,  5,  5,  5,  6,  7,  6,  7,  6,  7,  8; 0
					
		dc.b   9, $A, $B,$FE,  1; 16
byte_32DA6:	dc.b   7, $C, $D,$FF	; 0 
byte_32DAA:	dc.b   7, $E, $F, $E, $F, $E, $F, $E, $F,$FD,  3; 0 
byte_32DB5:	dc.b   7,$10,$10,$10,$10,$10,$10,$10,$10,$FD,  3; 0 
byte_32DC0:	dc.b   1,$14,$FC	; 0 
byte_32DC3:	dc.b   7,$11,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_32DC6:				
		dc.w word_32DF0-Map_32DC6; 0
		dc.w word_32DFA-Map_32DC6; 1
		dc.w word_32E04-Map_32DC6; 2
		dc.w word_32E2E-Map_32DC6; 3
		dc.w word_32E38-Map_32DC6; 4
		dc.w word_32E42-Map_32DC6; 5
		dc.w word_32E4C-Map_32DC6; 6
		dc.w word_32E56-Map_32DC6; 7
		dc.w word_32E60-Map_32DC6; 8
		dc.w word_32E6A-Map_32DC6; 9
		dc.w word_32E74-Map_32DC6; 10
		dc.w word_32E7E-Map_32DC6; 11
		dc.w word_32EA0-Map_32DC6; 12
		dc.w word_32EB2-Map_32DC6; 13
		dc.w word_32EC4-Map_32DC6; 14
		dc.w word_32ED6-Map_32DC6; 15
		dc.w word_32EE8-Map_32DC6; 16
		dc.w word_32EFA-Map_32DC6; 17
		dc.w word_32F0C-Map_32DC6; 18
		dc.w word_32F1E-Map_32DC6; 19
		dc.w word_32F28-Map_32DC6; 20
word_32DF0:	dc.w 1			
		dc.w	 5, $1E4,  $F2,	 $1C; 0
word_32DFA:	dc.w 1			
		dc.w	 5, $1E8,  $F4,	 $1C; 0
word_32E04:	dc.w 5			
		dc.w $D805, $1A4,  $D2,	   2; 0
		dc.w $E805, $1A8,  $D4,	 $10; 4
		dc.w $F80F,$218C,$20C6,$FFF0; 8
		dc.w $F807,$219C,$20CE,	 $10; 12
		dc.w $F802,$2003,$2001,$FFE8; 16
word_32E2E:	dc.w 1			
		dc.w $F40A,$200E,$2007,$FFF4; 0
word_32E38:	dc.w 1			
		dc.w $F40A,$206F,$2037,$FFF4; 0
word_32E42:	dc.w 1			
		dc.w $F805,$2078,$203C,$FFF8; 0
word_32E4C:	dc.w 1			
		dc.w $F406,$2017,$200B,$FFF8; 0
word_32E56:	dc.w 1			
		dc.w $F809,$201D,$200E,$FFF4; 0
word_32E60:	dc.w 1			
		dc.w $F406,$2023,$2011,$FFF8; 0
word_32E6A:	dc.w 1			
		dc.w $F40A,  $29,  $14,$FFF4; 0
word_32E74:	dc.w 1			
		dc.w $F00F,  $32,  $19,$FFF0; 0
word_32E7E:	dc.w 4			
		dc.w $E80A,  $42,  $21,$FFE8; 0
		dc.w $E80A,  $4B,  $25,	   0; 4
		dc.w	$A,  $54,  $2A,$FFE8; 8
		dc.w	$A,  $5D,  $2E,	   0; 12
word_32EA0:	dc.w 2			
		dc.w $E80D, $1B4,  $DA,$FFF0; 0
		dc.w $E805, $1AC,  $D6,$FFE0; 4
word_32EB2:	dc.w 2			
		dc.w $E80D, $1BC,  $DE,$FFF0; 0
		dc.w $E805, $1AC,  $D6,$FFE0; 4
word_32EC4:	dc.w 2			
		dc.w $E80D, $1C4,  $E2,$FFF0; 0
		dc.w $E805, $1B0,  $D8,$FFE0; 4
word_32ED6:	dc.w 2			
		dc.w $E80D, $1CC,  $E6,$FFF0; 0
		dc.w $E805, $1B0,  $D8,$FFE0; 4
word_32EE8:	dc.w 2			
		dc.w $E80D, $1D4,  $EA,$FFF0; 0
		dc.w $E805, $1B0,  $D8,$FFE0; 4
word_32EFA:	dc.w 2			
		dc.w $E80D, $1DC,  $EE,$FFF0; 0
		dc.w $E805, $1B0,  $D8,$FFE0; 4
word_32F0C:	dc.w 2			
		dc.w $F80D,$2006,$2003,$FFE0; 0
		dc.w $F80D,$2806,$2803,	   0; 4
word_32F1E:	dc.w 1			
		dc.w $F802,$2000,$2000,$FFE0; 0
word_32F28:	dc.w 4			
		dc.w $E80A,  $66,  $33,$FFE8
		dc.w $E80A, $866, $833,	   0
		dc.w	$A,$1066,$1033,$FFE8
		dc.w	$A,$1866,$1833,	   0
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================

loc_32F4C:				
		jmp	DisplaySprite
; ===========================================================================

loc_32F52:				
		jmp	DeleteObject
; ===========================================================================

loc_32F58:				
		jmp	SingleObjLoad
; ===========================================================================

loc_32F5E:				
		jmp	(PlaySound).l
; ===========================================================================

loc_32F64:				
		jmp	AnimateSprite
; ===========================================================================

loc_32F6A:				
		jmp	(AddPLC).l
; ===========================================================================

loc_32F70:				
		jmp	sub_40D06
; ===========================================================================

loc_32F76:				
		jmp	loc_F626
; ===========================================================================

loc_32F7C:				
		jmp	loc_F62E
; ===========================================================================

loc_32F82:				
		jmp	ObjectFall
; ===========================================================================

loc_32F88:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; OOZ boss
; ----------------------------------------------------------------------------

Sprite_32F90:				
		moveq	#0,d0
		move.b	$A(a0),d0
		move.w	off_32F9E(pc,d0.w),d1
		jmp	off_32F9E(pc,d1.w)
; ===========================================================================
off_32F9E:	dc.w loc_32FA8-off_32F9E; 0 
		dc.w loc_32FE6-off_32F9E; 1
		dc.w loc_3320A-off_32F9E; 2
		dc.w loc_33456-off_32F9E; 3
		dc.w loc_33570-off_32F9E; 4
; ===========================================================================

loc_32FA8:				
		move.l	#Map_33756,4(a0)
		move.w	#$38C,2(a0)
		ori.b	#4,1(a0)
		move.b	#3,$18(a0)
		bset	#6,1(a0)
		move.b	#0,$F(a0)
		addq.b	#2,$A(a0)
		move.b	#$F,$20(a0)
		move.b	#8,$32(a0)
		move.b	#$40,$E(a0) ; '@'
		rts	
; ===========================================================================

loc_32FE6:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_32FF4(pc,d0.w),d1
		jmp	off_32FF4(pc,d1.w)
; ===========================================================================
off_32FF4:	dc.w loc_32FFE-off_32FF4; 0 
		dc.w loc_33078-off_32FF4; 1
		dc.w loc_330BA-off_32FF4; 2
		dc.w loc_33104-off_32FF4; 3
		dc.w loc_331A6-off_32FF4; 4
; ===========================================================================

loc_32FFE:				
		move.w	#$2940,($FFFFF750).w
		bclr	#0,1(a0)
		move.w	($FFFFB008).w,d1
		cmpi.w	#$293A,d1
		bcc.s	loc_3301A
		bchg	#0,1(a0)

loc_3301A:				
		move.w	#$2D0,$C(a0)
		move.w	#$2D0,(v_boss_y_pos).w
		move.b	#8,$B(a0)
		move.b	#1,$F(a0)
		addq.b	#2,$26(a0)

loc_33036:
		move.w	#-$80,(v_boss_y_vel).w
		move.b	#$F,$20(a0)
		move.w	8(a0),$10(a0)
		move.w	$C(a0),$12(a0)
		clr.b	$1A(a0)
		clr.b	$2A(a0)
		move.b	#8,$15(a0)
		lea	($FFFFF740).w,a2
		move.b	#5,(a2)+
		move.b	#0,(a2)+
		move.b	#1,(a2)+
		move.b	#0,(a2)
		move.b	#0,(v_boss_collision_routine).w
		rts	
; ===========================================================================

loc_33078:				
		bsr.w	loc_2D5DE
		move.w	($FFFFF750).w,8(a0)
		bsr.w	loc_330EA
		cmpi.w	#$290,(v_boss_y_pos).w
		bcc.w	loc_3315E
		move.w	#$290,(v_boss_y_pos).w
		addq.b	#2,$26(a0)
		move.w	#$A8,(v_boss_timer).w
		btst	#7,$2A(a0)
		bne.w	loc_3315E
		lea	($FFFFF740).w,a2
		move.b	#$10,(a2)+
		move.b	#0,(a2)
		bra.w	loc_3315E
; ===========================================================================

loc_330BA:				
		btst	#7,$2A(a0)
		bne.s	loc_330DC
		bsr.w	loc_330EA
		subi.w	#1,(v_boss_timer).w
		bpl.w	loc_3315E
		lea	($FFFFF740).w,a2
		move.b	#5,(a2)+
		move.b	#0,(a2)

loc_330DC:				
		addq.b	#2,$26(a0)
		move.w	#-$40,(v_boss_y_vel).w
		bra.w	loc_3315E
; ===========================================================================

loc_330EA:				
		move.b	$1A(a0),d0
		jsr	(CalcSine).l
		asr.w	#7,d1
		add.w	(v_boss_y_pos).w,d1
		move.w	d1,$C(a0)
		addq.b	#4,$1A(a0)
		rts	
; ===========================================================================

loc_33104:				
		bsr.w	loc_2D5DE
		move.w	(v_boss_y_pos).w,$C(a0)

loc_3310E:
		move.w	($FFFFF750).w,8(a0)
		btst	#6,$2A(a0)
		bne.s	loc_3313C
		cmpi.w	#$28C,(v_boss_y_pos).w
		bcc.w	loc_3315E
		move.w	#$28C,(v_boss_y_pos).w
		move.w	#$80,(v_boss_y_vel).w
		ori.b	#$40,$2A(a0) ; '@'
		bra.w	loc_3315E
; ===========================================================================

loc_3313C:				
		cmpi.w	#$2D0,(v_boss_y_pos).w
		bcs.s	loc_3315E
		move.w	#$2D0,(v_boss_y_pos).w
		clr.b	$26(a0)
		addq.b	#2,$A(a0)
		btst	#7,$2A(a0)
		beq.s	loc_3315E
		addq.b	#2,$A(a0)

loc_3315E:				
		bsr.w	loc_33174
		lea	(off_33712).l,a1
		bsr.w	loc_2D604
		bsr.w	loc_33194
		bra.w	loc_3389C
; ===========================================================================

loc_33174:				
		bsr.w	loc_2D57C
		cmpi.b	#$1F,$14(a0)
		bne.s	locret_33192
		lea	($FFFFF740).w,a1
		andi.b	#-$10,(a1)
		ori.b	#3,(a1)
		ori.b	#-$80,$2A(a0)

locret_33192:				
		rts	
; ===========================================================================

loc_33194:				
		move.w	8(a0),d0
		move.w	$C(a0),d1
		move.w	d0,$10(a0)
		move.w	d1,$12(a0)
		rts	
; ===========================================================================

loc_331A6:				
		clr.w	($FFFFFB22).w
		subq.w	#1,(v_boss_timer).w
		bmi.s	loc_331CA
		cmpi.w	#$1E,(v_boss_timer).w
		bcc.s	loc_331C2
		move.b	#$B,$B(a0)
		bra.w	loc_3389C
; ===========================================================================

loc_331C2:				
		bsr.w	loc_2D6CC
		bra.w	loc_3389C
; ===========================================================================

loc_331CA:				
		tst.b	(v_boss_status).w
		bne.s	loc_331DE
		bsr.w	loc_338D8
		bsr.w	loc_338DE
		move.b	#1,(v_boss_status).w

loc_331DE:				
		cmpi.w	#$2A20,(v_boundary_right_next).w
		bcc.s	loc_331EC
		addq.w	#2,(v_boundary_right_next).w
		bra.s	loc_331FA
; ===========================================================================

loc_331EC:				
		move.w	#$2A20,(v_boundary_right_next).w
		cmpi.w	#$2D0,$C(a0)
		bcc.s	loc_33206

loc_331FA:				
		addi.w	#1,$C(a0)
		bsr.s	loc_33194
		bra.w	loc_3389C
; ===========================================================================

loc_33206:				
		bra.w	loc_338A2
; ===========================================================================

loc_3320A:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_33218(pc,d0.w),d1
		jmp	off_33218(pc,d1.w)
; ===========================================================================
off_33218:	dc.w loc_33222-off_33218; 0 
		dc.w loc_33296-off_33218; 1
		dc.w loc_332C6-off_33218; 2
		dc.w loc_33324-off_33218; 3
		dc.w loc_33388-off_33218; 4
; ===========================================================================

loc_33222:				
		clr.w	($FFFFFB22).w
		move.w	#$2940,($FFFFF750).w
		bclr	#0,1(a0)
		move.w	($FFFFB008).w,d1
		cmpi.w	#$293A,d1
		bcs.s	loc_33242
		bchg	#0,1(a0)

loc_33242:				
		move.w	#$2B0,(v_boss_y_pos).w
		move.w	#$2B0,$C(a0)
		move.b	#2,$26(a0)
		move.b	#-$76,$20(a0)
		move.b	#5,$B(a0)
		moveq	#7,d0
		moveq	#7,d2
		moveq	#0,d4
		move.w	(v_boss_y_pos).w,d5

loc_3326A:				
		addi.w	#$F,d5
		move.b	d0,$15(a0,d4.w)
		move.w	d5,$12(a0,d4.w)
		addq.w	#6,d4
		dbf	d2,loc_3326A
		move.b	#8,$F(a0)
		move.w	#-$80,(v_boss_y_vel).w
		move.b	#0,$3E(a0)
		move.b	#1,(v_boss_collision_routine).w
		rts	
; ===========================================================================

loc_33296:				
		bsr.w	loc_2D5DE
		cmpi.w	#$240,(v_boss_y_pos).w
		bcc.w	loc_333BA
		move.w	#$240,(v_boss_y_pos).w
		move.w	#0,(v_boss_y_vel).w
		addi.b	#2,$26(a0)
		move.w	#$80,(v_boss_timer).w
		move.b	#3,$38(a0)
		bra.w	loc_333BA
; ===========================================================================

loc_332C6:				
		subq.b	#1,$2C(a0)
		bne.s	loc_332D2
		move.b	#5,$B(a0)

loc_332D2:				
		subi.w	#1,(v_boss_timer).w
		bne.w	loc_333BA
		subi.b	#1,$38(a0)
		bmi.s	loc_3330C
		bsr.w	loc_338C6

loc_332E8:				
		addq.b	#1,d0
		andi.w	#3,d0
		btst	d0,$3E(a0)
		bne.s	loc_332E8
		bset	d0,$3E(a0)
		add.w	d0,d0
		move.w	word_3331C(pc,d0.w),(v_boss_timer).w
		addq.b	#2,$26(a0)
		bsr.w	loc_333C6
		bra.w	loc_333BA
; ===========================================================================

loc_3330C:				
		move.w	#$80,(v_boss_y_vel).w
		move.b	#8,$26(a0)
		bra.w	loc_333BA
; ===========================================================================
word_3331C:	dc.w  $238		; 0
		dc.w  $230		; 1
		dc.w  $240		; 2
		dc.w  $25F		; 3
; ===========================================================================

loc_33324:				
		bsr.w	loc_2D5DE
		move.w	(v_boss_timer).w,d0
		tst.w	(v_boss_y_vel).w
		bmi.s	loc_3333C
		cmp.w	(v_boss_y_pos).w,d0
		bcs.s	loc_33342
		bra.w	loc_333BA
; ===========================================================================

loc_3333C:				
		cmp.w	(v_boss_y_pos).w,d0
		bcs.s	loc_333BA

loc_33342:				
		move.w	#0,(v_boss_y_vel).w
		move.b	#8,$2C(a0)
		move.b	#6,$B(a0)
		bsr.w	loc_338A8
		bne.w	loc_333BA
		move.b	#$55,(a1) ; 'U'
		move.b	#8,$A(a1)
		move.l	a0,$34(a1)
		move.b	#-$16,d0
		bsr.w	loc_338B4
		move.b	#4,$26(a0)
		move.w	#$28,(v_boss_timer).w ; '('
		move.w	#-$80,(v_boss_y_vel).w
		bra.w	loc_333BA
; ===========================================================================

loc_33388:				
		subq.b	#1,$2C(a0)
		bne.s	loc_33394
		move.b	#5,$B(a0)

loc_33394:				
		bsr.w	loc_2D5DE
		cmpi.w	#$2B0,(v_boss_y_pos).w
		bcs.s	loc_333BA
		move.w	#$2B0,(v_boss_y_pos).w
		move.w	#0,(v_boss_y_vel).w
		move.b	#0,$26(a0)
		move.b	#2,$A(a0)
		rts	
; ===========================================================================

loc_333BA:				
		bsr.w	loc_333E0
		bsr.w	loc_33406
		bra.w	loc_3389C
; ===========================================================================

loc_333C6:				
		move.w	(v_boss_timer).w,d0
		sub.w	(v_boss_y_pos).w,d0
		bpl.s	loc_333D8
		move.w	#-$80,(v_boss_y_vel).w
		rts	
; ===========================================================================

loc_333D8:				
		move.w	#$80,(v_boss_y_vel).w
		rts	
; ===========================================================================

loc_333E0:				
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		blt.s	loc_333F8
		subi.w	#8,d0
		blt.s	locret_333F6
		bset	#0,1(a0)

locret_333F6:				
		rts	
; ===========================================================================

loc_333F8:				
		addi.w	#8,d0
		bgt.s	locret_333F6
		bclr	#0,1(a0)
		rts	
; ===========================================================================

loc_33406:				
		move.w	($FFFFF750).w,d5
		move.w	(v_boss_y_pos).w,d6
		move.b	$1A(a0),d3
		move.b	d3,d0
		bsr.w	loc_33446
		move.w	d1,8(a0)
		move.w	d0,$C(a0)
		addi.b	#2,$1A(a0)
		moveq	#7,d2
		moveq	#0,d4

loc_3342A:				
		addi.w	#$F,d6
		subi.b	#$10,d3
		bsr.w	loc_33446
		move.w	d1,$10(a0,d4.w)
		move.w	d0,$12(a0,d4.w)
		addq.w	#6,d4
		dbf	d2,loc_3342A
		rts	
; ===========================================================================

loc_33446:				
		move.b	d3,d0
		bsr.w	loc_338D2
		asr.w	#4,d1
		add.w	d5,d1
		asr.w	#6,d0
		add.w	d6,d0
		rts	
; ===========================================================================

loc_33456:				
		moveq	#0,d0
		move.b	$26(a0),d0
		move.w	off_33464(pc,d0.w),d1
		jmp	off_33464(pc,d1.w)
; ===========================================================================
off_33464:	dc.w loc_33468-off_33464; 0 
		dc.w loc_334CC-off_33464; 1
; ===========================================================================

loc_33468:				
		clr.w	($FFFFFB22).w
		move.w	#$28C0,($FFFFF750).w
		bclr	#0,1(a0)
		move.w	($FFFFB008).w,d1
		cmpi.w	#$293A,d1
		bcs.s	loc_3348E
		move.w	#$29C0,($FFFFF750).w
		bset	#0,1(a0)

loc_3348E:				
		move.w	#$2A0,(v_boss_y_pos).w
		move.b	#2,$B(a0)
		move.b	#-$76,$20(a0)
		addq.b	#2,$26(a0)
		move.b	#-$80,$E(a0)
		clr.b	$1A(a0)
		moveq	#7,d0
		moveq	#7,d1
		moveq	#0,d2

loc_334B4:				
		move.b	d1,$15(a0,d2.w)
		addq.w	#6,d2
		dbf	d0,loc_334B4
		move.b	#8,$F(a0)
		move.b	#2,(v_boss_collision_routine).w
		rts	
; ===========================================================================

loc_334CC:				
		bsr.w	loc_334EE
		cmpi.b	#-2,$1A(a0)
		bcs.s	loc_334E6
		move.b	#0,$26(a0)
		move.b	#4,$A(a0)
		rts	
; ===========================================================================

loc_334E6:				
		bsr.w	loc_3354C
		bra.w	loc_3389C
; ===========================================================================

loc_334EE:				
		move.b	$1A(a0),d0
		addi.b	#$40,d0	; '@'
		move.b	d0,d3
		bsr.w	loc_33526
		move.w	d1,8(a0)
		move.w	d0,$C(a0)
		addi.b	#1,$1A(a0)
		moveq	#7,d2
		moveq	#0,d4

loc_3350E:				
		subi.b	#6,d3
		bsr.w	loc_33526
		move.w	d1,$10(a0,d4.w)
		move.w	d0,$12(a0,d4.w)
		addq.w	#6,d4
		dbf	d2,loc_3350E
		rts	
; ===========================================================================

loc_33526:				
		move.b	d3,d0
		bsr.w	loc_338D2
		muls.w	#$68,d1	; 'h'
		asr.l	#8,d1
		btst	#0,1(a0)
		bne.s	loc_3353C
		neg.w	d1

loc_3353C:				
		add.w	($FFFFF750).w,d1
		muls.w	#$68,d0	; 'h'
		asr.l	#8,d0

loc_33546:
		add.w	(v_boss_y_pos).w,d0
		rts	
; ===========================================================================

loc_3354C:				
		move.b	$1A(a0),d0
		moveq	#$15,d1
		cmpi.b	#$52,d0	; 'R'
		bcs.s	loc_3356A
		moveq	#3,d1
		cmpi.b	#$6B,d0	; 'k'
		bcs.s	loc_3356A
		moveq	#2,d1
		cmpi.b	#-$6E,d0
		bcs.s	loc_3356A
		moveq	#4,d1

loc_3356A:				
		move.b	d1,$B(a0)
		rts	
; ===========================================================================

loc_33570:				
		moveq	#0,d0

loc_33572:
		move.b	$25(a0),d0
		move.w	off_3357E(pc,d0.w),d0
		jmp	off_3357E(pc,d0.w)
; ===========================================================================
off_3357E:	dc.w loc_33586-off_3357E; 0 
		dc.w loc_335DE-off_3357E; 1
		dc.w loc_336B2-off_3357E; 2
		dc.w loc_3370E-off_3357E; 3
; ===========================================================================

loc_33586:				
		addq.b	#2,$25(a0)
		move.l	#Map_33756,4(a0)
		move.w	#$38C,2(a0)
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		movea.l	$34(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	#$C,$1A(a0)
		move.w	#-$20,d0
		move.w	#-$400,$10(a0)
		btst	#0,1(a1)
		beq.s	loc_335D2
		neg.w	d0
		neg.w	$10(a0)

loc_335D2:				
		add.w	d0,8(a0)
		move.b	#-$51,$20(a0)
		rts	
; ===========================================================================

loc_335DE:				
		bsr.w	loc_335FE
		bsr.w	loc_338E4
		cmpi.w	#$2870,8(a0)
		bcs.w	loc_338A2
		cmpi.w	#$2A10,8(a0)
		bcc.w	loc_338A2
		bra.w	loc_3389C
; ===========================================================================

loc_335FE:				
		cmpi.w	#$250,$C(a0)
		bcs.s	locret_33626
		tst.w	$10(a0)
		bmi.w	loc_33628
		move.w	8(a0),d0
		cmpi.w	#$2980,d0
		bcc.s	locret_33626
		cmpi.w	#$297C,d0
		bcs.w	locret_33626
		move.w	#$2988,d1
		bra.s	loc_33640
; ===========================================================================

locret_33626:				
		rts	
; ===========================================================================

loc_33628:				
		move.w	8(a0),d0
		cmpi.w	#$2900,d0
		bcs.s	locret_3363E
		cmpi.w	#$2904,d0
		bcc.s	locret_3363E
		move.w	#$28F8,d1
		bra.s	loc_33640
; ===========================================================================

locret_3363E:				
		rts	
; ===========================================================================

loc_33640:				
		bsr.w	loc_338A8
		bne.s	locret_336B0
		move.b	#$55,(a1) ; 'U'
		move.b	#8,$A(a1)
		move.b	#4,$25(a1)
		move.b	#-$75,$20(a1)

loc_3365C:
		move.b	#2,$1C(a1)
		move.b	#$D,$1A(a1)
		move.w	#0,$12(a1)
		move.l	#Map_33756,4(a1)
		move.w	#$38C,2(a1)
		bsr.w	loc_338CC
		ori.b	#4,1(a1)
		move.b	#2,$18(a1)

loc_3368C:
		move.w	#5,$32(a1)
		move.b	#7,$36(a1)
		move.w	$10(a0),$10(a1)
		move.w	d1,8(a1)
		move.w	#$250,$C(a1)
		move.b	#-$15,d0
		bsr.w	loc_338B4

locret_336B0:				
		rts	
; ===========================================================================

loc_336B2:				
		subq.w	#1,$32(a0)
		bpl.s	loc_33700
		move.w	#$C7,$32(a0)
		subq.b	#1,$36(a0)
		bmi.s	loc_33700
		bsr.w	loc_338BA
		bne.s	loc_33700
		moveq	#0,d0
		move.w	#$F,d1

loc_336D0:				
		move.l	(a0,d0.w),(a1,d0.w)
		addq.w	#4,d0
		dbf	d1,loc_336D0
		move.w	#5,$32(a1)
		move.w	#$200,$1C(a1)
		move.w	#$10,d0
		tst.w	$10(a1)
		bpl.s	loc_336F4
		neg.w	d0

loc_336F4:				
		add.w	d0,8(a1)
		move.b	#-$15,d0
		bsr.w	loc_338B4

loc_33700:				
		lea	(off_33712).l,a1
		bsr.w	loc_338C0
		bra.w	loc_338AE
; ===========================================================================

loc_3370E:				
		bra.w	loc_338A2
; ===========================================================================
off_33712:	dc.w byte_3371E-off_33712; 0 
		dc.w byte_33738-off_33712; 1
		dc.w byte_3373B-off_33712; 2
		dc.w byte_3374D-off_33712; 3
		dc.w byte_33750-off_33712; 4
		dc.w byte_33753-off_33712; 5
byte_3371E:	dc.b   9,  8,  8,  8,  8,  9,  9,  9,  9,  8,  8,  8,  8,  9,  9,  9; 0
					
		dc.b   9,  8,  8,  8,  8,  9,  9,  9,  9,$FF; 16
byte_33738:	dc.b  $F,  1,$FF	; 0 
byte_3373B:	dc.b   1, $D,$11, $E,$12, $F,$13,$10,$14,$14,$10,$13, $F,$12, $E,$11; 0
					
		dc.b  $D,$FA		; 16
byte_3374D:	dc.b  $F, $A,$FF	; 0 
byte_33750:	dc.b  $F, $B,$FF	; 0 
byte_33753:	dc.b  $F,  8,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_33756:				
		dc.w Map_33756-Map_33756;	0
		dc.w word_33782-Map_33756; 1
		dc.w word_337BC-Map_33756; 2
		dc.w word_337CE-Map_33756; 3
		dc.w word_337E8-Map_33756; 4
		dc.w word_33814-Map_33756; 5
		dc.w word_33826-Map_33756; 6
		dc.w word_33838-Map_33756; 7
		dc.w word_33842-Map_33756; 8
		dc.w word_3384C-Map_33756; 9
		dc.w word_33856-Map_33756; 10
		dc.w word_33860-Map_33756; 11
		dc.w word_3386A-Map_33756; 12
		dc.w word_33874-Map_33756; 13
		dc.w word_3387E-Map_33756; 14
		dc.w word_33888-Map_33756; 15
		dc.w word_33892-Map_33756; 16
		dc.w word_33874-Map_33756; 17
		dc.w word_3387E-Map_33756; 18
		dc.w word_33888-Map_33756; 19
		dc.w word_33892-Map_33756; 20
		dc.w word_33802-Map_33756; 21
word_33782:	dc.w 7			
		dc.w $E00D,$2001,$2000,	   0; 0
		dc.w $E800,$2000,$2000,$FFF8; 4
		dc.w $F00D,$2009,$2004,$FFE8; 8
		dc.w $F00D,$2011,$2008,	   8; 12
		dc.w	$F,$2019,$200C,$FFD0; 16
		dc.w	$F,$2029,$2014,$FFF0; 20
		dc.w	$F,$2039,$201C,	 $10; 24
word_337BC:	dc.w 2			
		dc.w $F80D,$2049,$2024,$FFDE; 0
		dc.w $F805,$2079,$203C,$FFF8; 4
word_337CE:	dc.w 3			
		dc.w $E209,$2051,$2028,$FFE2; 0
		dc.w $F209,$2057,$202B,$FFEA; 4
		dc.w $F805,$2079,$203C,$FFF8; 8
word_337E8:	dc.w 3			
		dc.w  $606,$2063,$2031,$FFE2; 0
		dc.w $FE06,$205D,$202E,$FFF2; 4
		dc.w $F805,$2079,$203C,$FFF8; 8
word_33802:	dc.w 2			
		dc.w $DE07,$20AD,$2056,$FFF8; 0
		dc.w $F805,$2079,$203C,$FFF8; 4
word_33814:	dc.w 2			
		dc.w $F80D,$2069,$2034,$FFE0; 0
		dc.w $F805,$2079,$203C,$FFF8; 4
word_33826:	dc.w 2			
		dc.w $F80D,$2071,$2038,$FFE0; 0
		dc.w $F805,$2079,$203C,$FFF8; 4
word_33838:	dc.w 1			
		dc.w $F805,$2079,$203C,$FFF8; 0
word_33842:	dc.w 1			
		dc.w $F009,  $7D,  $3E,$FFF4; 0
word_3384C:	dc.w 1			
		dc.w $F009,  $83,  $41,$FFF4; 0
word_33856:	dc.w 1			
		dc.w $F009,  $89,  $44,$FFF4; 0
word_33860:	dc.w 1			
		dc.w $F009,  $8F,  $47,$FFF4; 0
word_3386A:	dc.w 1			
		dc.w $FC0C,$20A9,$2054,$FFF0; 0
word_33874:	dc.w 1			
		dc.w  $804,$2095,$204A,$FFF8; 0
word_3387E:	dc.w 1			
		dc.w	 5,$2097,$204B,$FFF8; 0
word_33888:	dc.w 1			
		dc.w $F806,$209B,$204D,$FFF8; 0
word_33892:	dc.w 1			
		dc.w $F007,$20A1,$2050,$FFF8; 0
; ===========================================================================

loc_3389C:				
		jmp	DisplaySprite
; ===========================================================================

loc_338A2:				
		jmp	DeleteObject
; ===========================================================================

loc_338A8:				
		jmp	SingleObjLoad
; ===========================================================================

loc_338AE:				
		jmp	MarkObjGone
; ===========================================================================

loc_338B4:				
		jmp	(PlaySound).l
; ===========================================================================

loc_338BA:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_338C0:				
		jmp	AnimateSprite
; ===========================================================================

loc_338C6:				
		jmp	(RandomNumber).l
; ===========================================================================

loc_338CC:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_338D2:				
		jmp	(CalcSine).l
; ===========================================================================

loc_338D8:				
		jmp	loc_F626
; ===========================================================================

loc_338DE:				
		jmp	loc_F62E
; ===========================================================================

loc_338E4:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

SonicSpecial:				
		bsr.w	loc_33908
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_338FE(pc,d0.w),d1
		jmp	off_338FE(pc,d1.w)
; ===========================================================================
off_338FE:	dc.w loc_3391C-off_338FE; 0 
		dc.w loc_339D6-off_338FE; 1
		dc.w loc_33BAE-off_338FE; 2
		dc.w off_338FE-off_338FE; 3
		dc.w loc_33BD8-off_338FE; 4
; ===========================================================================

loc_33908:				
		lea	(v_ss_ctrl_record_buffer_end).w,a1
		moveq	#$E,d0

loc_3390E:				
		move.w	-4(a1),-(a1)
		dbf	d0,loc_3390E
		move.w	(v_joypad_hold).w,-(a1)
		rts	
; ===========================================================================

loc_3391C:				
		move.b	#2,$24(a0)
		moveq	#0,d0
		move.l	d0,$2A(a0)
		move.w	#$80,d1	
		move.w	d1,$2E(a0)
		move.w	d0,$30(a0)
		add.w	($FFFFF73E).w,d0
		move.w	d0,8(a0)
		add.w	($FFFFF740).w,d1
		move.w	d1,$C(a0)
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.l	#Map_34212,4(a0)
		move.w	#$22E5,2(a0)
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.w	#$6E,$34(a0) ; 'n'
		clr.b	($FFFFF742).w
		move.w	#$400,$32(a0)
		move.b	#$40,$26(a0) ; '@'
		move.b	#1,(v_sonic_last_frame_id).w
		clr.b	$37(a0)
		bclr	#6,$22(a0)
		clr.b	$21(a0)
		clr.b	$23(a0)
		movea.l	#-$4EC0,a1
		move.b	#$63,(a1) ; 'c'
		move.w	8(a0),8(a1)

loc_339A8:
		move.w	$C(a0),$C(a1)
		addi.w	#$18,$C(a1)
		move.l	#off_34492,4(a1)

loc_339BC:
		move.w	#$623C,2(a1)
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.l	a0,$38(a1)
		bra.w	loc_33AB2
; ===========================================================================

loc_339D6:				
		tst.b	$25(a0)
		bne.s	loc_33A0E
		lea	(v_joypad_hold).w,a2
		bsr.w	loc_33F8A
		bsr.w	loc_3400A
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		bsr.w	loc_33B40
		bsr.w	loc_33EA0
		lea	(off_341E4).l,a1
		bsr.w	loc_33F00
		bsr.w	loc_33DFC
		bra.w	loc_33AB2
; ===========================================================================

loc_33A0E:				
		bsr.w	loc_33A22
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		bra.w	loc_33AB2
; ===========================================================================

loc_33A22:				
		moveq	#0,d0
		move.b	$36(a0),d0
		addi.b	#8,d0
		move.b	d0,$36(a0)
		bne.s	loc_33A3E
		move.b	#0,$25(a0)
		move.b	#$1E,$23(a0)

loc_33A3E:				
		add.b	$26(a0),d0
		andi.b	#-4,1(a0)
		subi.b	#$10,d0
		lsr.b	#5,d0
		add.w	d0,d0
		move.b	byte_33A92(pc,d0.w),$1A(a0)
		move.b	byte_33A92+1(pc,d0.w),d0
		or.b	d0,1(a0)
		move.b	$36(a0),d0
		subi.b	#8,d0
		bne.s	locret_33A90
		move.b	d0,$21(a0)
		cmpa.l	#-$5000,a0
		bne.s	loc_33A7C
		tst.w	(v_rings).w
		beq.s	locret_33A90
		bra.s	loc_33A82
; ===========================================================================

loc_33A7C:				
		tst.w	(v_rings_p2).w
		beq.s	locret_33A90

loc_33A82:				
		bsr.w	loc_347E6
		bne.s	locret_33A90
		move.l	a0,$38(a1)
		move.b	#$5B,(a1) ; '['

locret_33A90:				
		rts	
; ===========================================================================
byte_33A92:	dc.b   4,  1		; 0
		dc.b   0,  0		; 2
		dc.b   4,  0		; 4
		dc.b  $C,  0		; 6
		dc.b   4,  2		; 8
		dc.b   0,  2		; 10
		dc.b   4,  3		; 12
		dc.b  $C,  1		; 14
dword_33AA2:	dc.l   $FF0000		; 0 
		dc.l   $FF0B00		; 1
		dc.l   $FF2480		; 2
		dc.l   $FF2E20		; 3
; ===========================================================================

loc_33AB2:				
		move.b	$23(a0),d0
		beq.s	loc_33AC6
		subq.b	#1,d0
		move.b	d0,$23(a0)
		andi.b	#1,d0
		beq.s	loc_33AC6
		rts	
; ===========================================================================

loc_33AC6:				
		bsr.w	JmpTo42_DisplaySprite
		lea	(dword_33AA2)(pc),a3
		lea	(v_sonic_last_frame_id).w,a4
		move.w	#$5CA0,d4
		moveq	#0,d1

loc_33AD8:				
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(a4),d0
		beq.s	locret_33B3E
		move.b	d0,(a4)
		moveq	#0,d6
		cmpi.b	#4,d0
		blt.s	loc_33AFE
		addq.w	#4,d6
		cmpi.b	#$C,d0
		blt.s	loc_33AFE
		addq.w	#4,d6
		cmpi.b	#$10,d0
		blt.s	loc_33AFE
		addq.b	#4,d6

loc_33AFE:				
		move.l	(a3,d6.w),d6
		add.w	d1,d0
		add.w	d0,d0
		lea	(SS_Sonic_Tails_DPLC).l,a2
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	locret_33B3E

loc_33B16:				
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.w	#1,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,loc_33B16

locret_33B3E:				
		rts	
; ===========================================================================

loc_33B40:				
		lea	(v_joypad_press).w,a2

loc_33B44:				
		move.b	(a2),d0
		andi.b	#$70,d0	; 'p'
		beq.w	locret_33BAC
		move.w	#$780,d2
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#-$80,d0
		jsr	(CalcSine).l
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$10(a0)
		muls.w	d2,d0
		asr.l	#7,d0
		add.w	d0,$12(a0)
		bset	#2,$22(a0)
		move.b	#4,$24(a0)
		move.b	#3,$1C(a0)
		moveq	#0,d0
		move.b	d0,$1E(a0)
		move.b	d0,$1B(a0)
		move.b	d0,$21(a0)
		tst.b	(f_ss_2p).w
		bne.s	loc_33B9E
		tst.w	(v_player_mode).w
		bne.s	loc_33BA2

loc_33B9E:				
		not.b	($FFFFF742).w

loc_33BA2:				
		move.w	#$A0,d0	
		jsr	(PlaySound).l

locret_33BAC:				
		rts	
; ===========================================================================

loc_33BAE:				
		lea	(v_joypad_hold).w,a2
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33C54
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		lea	(off_341E4).l,a1
		bsr.w	loc_33F00
		bra.w	loc_33AB2
; ===========================================================================

loc_33BD8:				
		lea	(v_joypad_hold).w,a2
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33C54
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		bsr.w	loc_33EA0
		lea	(off_341E4).l,a1
		bsr.w	loc_33F00
		bra.w	loc_33AB2
; ===========================================================================

loc_33C06:				
		move.l	$2A(a0),d2
		move.l	$2E(a0),d3
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d2
		move.w	$12(a0),d0
		addi.w	#$A8,$12(a0)
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d3
		move.l	d2,$2A(a0)
		move.l	d3,$2E(a0)
		rts	
; ===========================================================================

loc_33C32:				
		move.b	(a2),d0
		btst	#2,d0
		bne.s	loc_33C44
		btst	#3,d0
		bne.w	loc_33C4C
		rts	
; ===========================================================================

loc_33C44:				
		subi.w	#$40,$10(a0) ; '@'
		rts	
; ===========================================================================

loc_33C4C:				
		addi.w	#$40,$10(a0) ; '@'
		rts	
; ===========================================================================

loc_33C54:				
		moveq	#0,d2
		moveq	#0,d3
		move.w	$2E(a0),d2
		bmi.s	loc_33CB4
		move.w	$2A(a0),d3
		bmi.s	loc_33C90
		cmp.w	d2,d3
		bcs.s	loc_33C80
		bne.s	loc_33C76
		tst.w	d3
		bne.s	loc_33C76
		move.b	#$40,$26(a0) ; '@'
		rts	
; ===========================================================================

loc_33C76:				
		lsl.l	#5,d2
		divu.w	d3,d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33C80:				
		lsl.l	#5,d3
		divu.w	d2,d3
		subi.w	#$40,d3	; '@'
		neg.w	d3
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33C90:				
		neg.w	d3
		cmp.w	d2,d3
		bcc.s	loc_33CA4
		lsl.l	#5,d3
		divu.w	d2,d3
		addi.w	#$40,d3	; '@'
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33CA4:				
		lsl.l	#5,d2
		divu.w	d3,d2
		subi.w	#$80,d2	
		neg.w	d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33CB4:				
		neg.w	d2
		move.w	$2A(a0),d3
		bpl.s	loc_33CE0
		neg.w	d3
		cmp.w	d2,d3
		bcs.s	loc_33CD0
		lsl.l	#5,d2
		divu.w	d3,d2
		addi.w	#$80,d2	
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33CD0:				
		lsl.l	#5,d3
		divu.w	d2,d3
		subi.w	#$C0,d3	
		neg.w	d3
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33CE0:				
		cmp.w	d2,d3
		bcc.s	loc_33CF2
		lsl.l	#5,d3
		divu.w	d2,d3
		addi.w	#$C0,d3	
		move.b	d3,$26(a0)
		rts	
; ===========================================================================

loc_33CF2:				
		lsl.l	#5,d2
		divu.w	d3,d2
		subi.w	#$100,d2
		neg.w	d2
		move.b	d2,$26(a0)
		rts	
; ===========================================================================

loc_33D02:				
		moveq	#0,d6
		moveq	#0,d0
		move.w	$2A(a1),d0
		bpl.s	loc_33D10
		st.b	d6
		neg.w	d0

loc_33D10:				
		lsl.l	#7,d0
		divu.w	$34(a1),d0
		move.b	byte_33D32(pc,d0.w),d0
		tst.b	d6
		bne.s	loc_33D24
		subi.b	#-$80,d0
		neg.b	d0

loc_33D24:				
		tst.w	$2E(a1)
		bpl.s	loc_33D2C
		neg.b	d0

loc_33D2C:				
		move.b	d0,$26(a0)
		rts	
; ===========================================================================
byte_33D32:	dc.b $40,$40,$40,$40,$41,$41,$41,$42,$42,$42,$43,$43,$43,$44,$44,$44; 0
		dc.b $45,$45,$45,$46,$46,$46,$47,$47,$47,$48,$48,$48,$48,$49,$49,$49; 16
		dc.b $4A,$4A,$4A,$4B,$4B,$4B,$4C,$4C,$4C,$4D,$4D,$4D,$4E,$4E,$4E,$4F; 32
		dc.b $4F,$50,$50,$50,$51,$51,$51,$52,$52,$52,$53,$53,$53,$54,$54,$54; 48
		dc.b $55,$55,$56,$56,$56,$57,$57,$57,$58,$58,$59,$59,$59,$5A,$5A,$5B; 64
		dc.b $5B,$5B,$5C,$5C,$5D,$5D,$5E,$5E,$5E,$5F,$5F,$60,$60,$61,$61,$62; 80
		dc.b $62,$63,$63,$64,$64,$65,$65,$66,$66,$67,$67,$68,$68,$69,$6A,$6A; 96
		dc.b $6B,$6C,$6C,$6D,$6E,$6E,$6F,$70,$71,$72,$73,$74,$75,$77,$78,$7A; 112
		dc.b $80,  0		; 128
; ===========================================================================

loc_33DB4:				
		move.w	$2E(a0),d0
		ble.s	locret_33DFA
		muls.w	d0,d0
		move.w	$2A(a0),d1
		muls.w	d1,d1
		add.w	d1,d0
		move.w	$34(a0),d1
		mulu.w	d1,d1
		cmp.l	d1,d0
		bcs.s	locret_33DFA
		move.b	#2,$24(a0)
		bclr	#2,$22(a0)
		moveq	#0,d0
		move.w	d0,$10(a0)
		move.w	d0,$12(a0)
		move.w	d0,$14(a0)
		move.b	d0,$37(a0)
		bset	#6,$22(a0)
		bsr.w	loc_3404A
		bsr.w	loc_34084

locret_33DFA:				
		rts	
; ===========================================================================

loc_33DFC:				
		tst.b	$21(a0)
		beq.s	locret_33E42
		clr.b	$21(a0)
		tst.b	$23(a0)
		bne.s	locret_33E42
		clr.b	$14(a0)
		cmpa.l	#-$5000,a0
		bne.s	loc_33E24
		st.b	($FFFFF742).w
		tst.w	(v_rings).w
		beq.s	loc_33E38
		bra.s	loc_33E2E
; ===========================================================================

loc_33E24:				
		clr.b	($FFFFF742).w
		tst.w	(v_rings_p2).w
		beq.s	loc_33E38

loc_33E2E:				
		move.w	#$C6,d0	
		jsr	(PlaySound).l

loc_33E38:				
		move.b	#2,$25(a0)
		clr.b	$36(a0)

locret_33E42:				
		rts	
; ===========================================================================

loc_33E44:				
		tst.w	(v_player_mode).w
		bne.s	locret_33E8E
		move.w	$34(a0),d0
		cmpa.l	#-$5000,a0
		bne.s	loc_33E5E
		tst.b	($FFFFF742).w
		beq.s	loc_33E6E
		bra.s	loc_33E64
; ===========================================================================

loc_33E5E:				
		tst.b	($FFFFF742).w
		bne.s	loc_33E6E

loc_33E64:				
		cmpi.w	#$80,d0	
		beq.s	locret_33E8E
		addq.w	#1,d0
		bra.s	loc_33E76
; ===========================================================================

loc_33E6E:				
		cmpi.w	#$6E,d0	; 'n'
		beq.s	locret_33E8E
		subq.w	#1,d0

loc_33E76:				
		move.w	d0,$34(a0)
		cmpi.w	#$77,d0	; 'w'
		bcc.s	loc_33E88
		move.b	#3,$18(a0)
		rts	
; ===========================================================================

loc_33E88:				
		move.b	#2,$18(a0)

locret_33E8E:				
		rts	
; ===========================================================================
byte_33E90:	dc.b   1,  1		; 0
		dc.b   0,  0		; 2
		dc.b   1,  0		; 4
		dc.b   2,  0		; 6
		dc.b   1,  2		; 8
		dc.b   0,  2		; 10
		dc.b   1,  3		; 12
		dc.b   2,  1		; 14
; ===========================================================================

loc_33EA0:				
		btst	#2,$22(a0)
		beq.s	loc_33EB6
		move.b	#3,$1C(a0)
		andi.b	#-4,$22(a0)
		rts	
; ===========================================================================

loc_33EB6:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$10,d0
		lsr.b	#5,d0
		move.b	d0,d1
		add.w	d0,d0
		move.b	byte_33E90(pc,d0.w),d2
		cmp.b	$1C(a0),d2
		bne.s	loc_33ED6
		cmp.b	$3F(a0),d1
		beq.s	locret_33EFE

loc_33ED6:				
		move.b	d1,$3F(a0)
		move.b	d2,$1C(a0)
		move.b	byte_33E90+1(pc,d0.w),d0
		andi.b	#-4,$22(a0)
		or.b	d0,$22(a0)
		cmpi.b	#1,d1
		beq.s	loc_33EF8
		cmpi.b	#5,d1
		bne.s	locret_33EFE

loc_33EF8:				
		move.w	#$400,$32(a0)

locret_33EFE:				
		rts	
; ===========================================================================

loc_33F00:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_33F1C
		move.b	#0,$1B(a0)
		move.b	d0,$1D(a0)
		move.b	#0,$1E(a0)

loc_33F1C:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_33F88
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(v_ss_player_anim_frame_timer).w,d0
		lsr.b	#1,d0
		move.b	d0,$1E(a0)
		cmpi.b	#0,$1C(a0)
		bne.s	loc_33F54
		subi.b	#1,$33(a0)
		bgt.s	loc_33F54
		bchg	#0,$22(a0)
		bchg	#0,1(a0)
		move.b	$32(a0),$33(a0)

loc_33F54:				
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bpl.s	loc_33F6A
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_33F6A:				
		andi.b	#$7F,d0	; ''
		move.b	d0,$1A(a0)
		move.b	$22(a0),d1
		andi.b	#3,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		addq.b	#1,$1B(a0)

locret_33F88:				
		rts	
; ===========================================================================

loc_33F8A:				
		move.w	$14(a0),d2
		move.b	(a2),d0
		btst	#2,d0
		bne.s	loc_33FDC
		btst	#3,d0
		bne.w	loc_33FEC
		bset	#6,$22(a0)
		bne.s	loc_33FAC
		move.b	#$1E,$37(a0)

loc_33FAC:				
		move.b	$26(a0),d0
		bmi.s	loc_33FC4
		subi.b	#$38,d0	; '8'
		cmpi.b	#$10,d0
		bcc.s	loc_33FC4
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d2
		bra.s	loc_33FCA
; ===========================================================================

loc_33FC4:				
		move.w	d2,d1
		asr.w	#3,d1
		sub.w	d1,d2

loc_33FCA:				
		move.w	d2,$14(a0)
		move.b	$37(a0),d0
		beq.s	locret_33FDA
		subq.b	#1,d0
		move.b	d0,$37(a0)

locret_33FDA:				
		rts	
; ===========================================================================

loc_33FDC:				
		addi.w	#$60,d2	; '`'
		cmpi.w	#$600,d2
		ble.s	loc_33FFA
		move.w	#$600,d2
		bra.s	loc_33FFA
; ===========================================================================

loc_33FEC:				
		subi.w	#$60,d2	; '`'
		cmpi.w	#-$600,d2
		bge.s	loc_33FFA
		move.w	#-$600,d2

loc_33FFA:				
		move.w	d2,$14(a0)
		bclr	#6,$22(a0)
		clr.b	$37(a0)
		rts	
; ===========================================================================

loc_3400A:				
		tst.b	$37(a0)
		bne.s	loc_34024
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$50,d1	; 'P'
		asr.l	#8,d1
		add.w	d1,$14(a0)

loc_34024:				
		move.b	$26(a0),d0
		bpl.s	locret_34048
		addi.b	#4,d0
		cmpi.b	#-$78,d0
		bcs.s	locret_34048
		move.w	$14(a0),d0
		bpl.s	loc_3403C
		neg.w	d0

loc_3403C:				
		cmpi.w	#$100,d0
		bcc.s	locret_34048
		move.b	#8,$24(a0)

locret_34048:				
		rts	
; ===========================================================================

loc_3404A:				
		moveq	#0,d0
		moveq	#0,d1
		move.w	$14(a0),d2
		bpl.s	loc_3405E
		neg.w	d2
		lsr.w	#8,d2
		sub.b	d2,$26(a0)
		bra.s	loc_34064
; ===========================================================================

loc_3405E:				
		lsr.w	#8,d2
		add.b	d2,$26(a0)

loc_34064:				
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$34(a0),d1
		asr.l	#8,d1
		move.w	d1,$2A(a0)
		muls.w	$34(a0),d0
		asr.l	#8,d0
		move.w	d0,$2E(a0)
		rts	
; ===========================================================================

loc_34084:				
		move.w	$2A(a0),d0
		muls.w	#$CC,d0	
		asr.l	#8,d0
		add.w	($FFFFF73E).w,d0
		move.w	d0,8(a0)
		move.w	$2E(a0),d0
		add.w	($FFFFF740).w,d0
		move.w	d0,$C(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_340A4:				
		movea.l	$38(a0),a1
		cmpa.l	#-$5000,a1
		bne.s	loc_340BC
		movea.l	#-$5000,a1
		bsr.s	loc_340CC
		bra.w	JmpTo42_DisplaySprite
; ===========================================================================

loc_340BC:				
		movea.l	#-$4FC0,a1
		bsr.s	loc_340CC
		bsr.w	loc_341BA
		bra.w	JmpTo42_DisplaySprite
; ===========================================================================

loc_340CC:				
		cmpi.b	#2,$24(a1)
		beq.w	loc_34108
		bsr.w	loc_33D02
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$34(a1),d1
		muls.w	#$CC,d1	
		swap	d1
		add.w	($FFFFF73E).w,d1
		move.w	d1,8(a0)
		muls.w	$34(a1),d0
		asr.l	#8,d0
		add.w	($FFFFF740).w,d0
		move.w	d0,$C(a0)
		bra.w	loc_3411A
; ===========================================================================

loc_34108:				
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	$26(a1),$26(a0)

loc_3411A:				
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$10,d0
		lsr.b	#5,d0
		move.b	d0,d1
		lsl.w	#3,d0
		lea	(word_3417A)(pc),a2
		adda.w	d0,a2
		move.w	(a2)+,2(a0)
		move.w	(a2)+,d0
		add.w	d0,8(a0)
		move.w	(a2)+,d0
		add.w	d0,$C(a0)
		move.b	(a2)+,$1A(a0)
		move.b	1(a0),d0
		andi.b	#-4,d0
		or.b	(a2)+,d0
		move.b	d0,1(a0)
		tst.b	$26(a0)
		bpl.s	locret_34178
		cmpi.b	#3,d1
		beq.s	loc_34164
		cmpi.b	#7,d1
		bne.s	loc_3416A

loc_34164:				
		addi.b	#3,$1A(a0)

loc_3416A:				
		move.w	($FFFFF740).w,d1
		sub.w	$C(a0),d1
		add.w	d1,d1
		add.w	d1,$C(a0)

locret_34178:				
		rts	
; ===========================================================================
word_3417A:	dc.w $6262,  $14,  $14,	$101; 0	
		dc.w $623C,    0,  $18,	   0; 4
		dc.w $6262,$FFEC,  $14,	$100; 8
		dc.w $629C,$FFEC,    0,	$200; 12
		dc.w $6262,$FFEC,$FFEC,	$700; 16
		dc.w $623C,    0,$FFE8,	$900; 20
		dc.w $6262,  $14,$FFEC,	$701; 24
		dc.w $629C,  $14,    0,	$201; 28
; ===========================================================================

loc_341BA:				
		cmpi.b	#1,$1C(a1)
		bne.s	locret_341E0
		move.b	$22(a1),d1
		andi.w	#3,d1
		cmpi.b	#2,d1
		bcc.s	locret_341E0
		move.b	byte_341E2(pc,d1.w),d0
		ext.w	d0
		add.w	d0,8(a0)
		subi.w	#4,$C(a0)

locret_341E0:				
		rts	
; ===========================================================================
byte_341E2:	dc.b   4		; 0
		dc.b $FC		; 1
off_341E4:	dc.w byte_341EE-off_341E4; 0 
		dc.w byte_341F4-off_341E4; 1
		dc.w byte_341FE-off_341E4; 2
		dc.w byte_34204-off_341E4; 3
		dc.w byte_34208-off_341E4; 4
byte_341EE:	dc.b   3,  0,  1,  2,  3,$FF; 0	
byte_341F4:	dc.b   3,  4,  5,  6,  7,  8,  9, $A, $B,$FF; 0	
byte_341FE:	dc.b   3, $C, $D, $E, $F,$FF; 0	
byte_34204:	dc.b   1,$10,$11,$FF	; 0 
byte_34208:	dc.b   3,  0,  4, $C,  4,  0,  4, $C,  4,$FF; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_34212:				
		dc.w word_34236-Map_34212; 0
		dc.w word_34250-Map_34212; 1
		dc.w word_3426A-Map_34212; 2
		dc.w word_34284-Map_34212; 3
		dc.w word_3429E-Map_34212; 4
		dc.w word_342C0-Map_34212; 5
		dc.w word_342EA-Map_34212; 6
		dc.w word_34314-Map_34212; 7
		dc.w word_3433E-Map_34212; 8
		dc.w word_34360-Map_34212; 9
		dc.w word_3438A-Map_34212; 10
		dc.w word_343B4-Map_34212; 11
		dc.w word_343E6-Map_34212; 12
		dc.w word_34400-Map_34212; 13
		dc.w word_3441A-Map_34212; 14
		dc.w word_34434-Map_34212; 15
		dc.w word_3444E-Map_34212; 16
		dc.w word_34470-Map_34212; 17
word_34236:	dc.w 3			
		dc.w $E40F,$8000,$8000,$FFF0; 0
		dc.w  $40A,$8010,$8008,$FFF0; 4
		dc.w  $401,$8019,$800C,	   8; 8
word_34250:	dc.w 3			
		dc.w $E40A,$8000,$8000,$FFF2; 0
		dc.w $FC0D,$8009,$8004,$FFF0; 4
		dc.w  $C05,$8011,$8008,$FFF7; 8
word_3426A:	dc.w 3			
		dc.w $E40E,$8000,$8000,$FFF0; 0
		dc.w $FC0D,$800C,$8006,$FFF0; 4
		dc.w  $C09,$8014,$800A,$FFF0; 8
word_34284:	dc.w 3			
		dc.w $E40A,$8800,$8800,$FFF6; 0
		dc.w $FC0D,$8009,$8004,$FFF0; 4
		dc.w  $C09,$8011,$8008,$FFF8; 8
word_3429E:	dc.w 4			
		dc.w $E40A,$8000,$8000,$FFEC; 0
		dc.w $E403,$8009,$8004,	   4; 4
		dc.w $EC01,$800D,$8006,	  $C; 8
		dc.w $FC0E,$800F,$8007,$FFE4; 12
word_342C0:	dc.w 5			
		dc.w $E409,$8000,$8000,$FFF4; 0
		dc.w $EC01,$8006,$8003,	  $C; 4
		dc.w $F40D,$8008,$8004,$FFEC; 8
		dc.w  $40D,$8010,$8008,$FFE6; 12
		dc.w $1400,$8018,$800C,$FFEE; 16
word_342EA:	dc.w 5			
		dc.w $E404,$8000,$8000,$FFFB; 0
		dc.w $EC0E,$8002,$8001,$FFEC; 4
		dc.w $EC02,$800E,$8007,	  $C; 8
		dc.w  $406,$8011,$8008,$FFE7; 12
		dc.w  $405,$8017,$800B,$FFF7; 16
word_34314:	dc.w 5			
		dc.w $E404,$8000,$8000,$FFFC; 0
		dc.w $EC0F,$8002,$8001,$FFEC; 4
		dc.w $EC02,$8012,$8009,	  $C; 8
		dc.w  $400,$8015,$800A,$FFE4; 12
		dc.w  $C05,$8016,$800B,$FFEA; 16
word_3433E:	dc.w 4			
		dc.w $E405,$8000,$8000,$FFFC; 0
		dc.w $EC03,$8004,$8002,	  $C; 4
		dc.w $F40E,$8008,$8004,$FFEC; 8
		dc.w  $C05,$8014,$800A,$FFEC; 12
word_34360:	dc.w 5			
		dc.w $E405,$8000,$8000,$FFFC; 0
		dc.w $EC02,$8004,$8002,	  $C; 4
		dc.w $F40D,$8007,$8003,$FFEC; 8
		dc.w  $40D,$800F,$8007,$FFE8; 12
		dc.w $EC00,$8017,$800B,$FFF4; 16
word_3438A:	dc.w 5			
		dc.w $E409,$8000,$8000,$FFFB; 0
		dc.w $F401,$8006,$8003,	  $E; 4
		dc.w $F40D,$8008,$8004,$FFEE; 8
		dc.w  $40D,$8010,$8008,$FFE7; 12
		dc.w $1400,$8018,$800C,$FFEF; 16
word_343B4:	dc.w 6			
		dc.w $E400,$8000,$8000,	   2; 0
		dc.w $EC0D,$8001,$8000,$FFF4; 4
		dc.w $FC00,$8009,$8004,	  $C; 8
		dc.w  $401,$800A,$8005,$FFE4; 12
		dc.w $FC07,$800C,$8006,$FFEC; 16
		dc.w $FC06,$8014,$800A,$FFFC; 20
word_343E6:	dc.w 3			
		dc.w $F006,$8000,$8000,$FFE8; 0
		dc.w  $800,$8006,$8003,$FFF0; 4
		dc.w $F00F,$8007,$8003,$FFF8; 8
word_34400:	dc.w 3			
		dc.w $F006,$8000,$8000,$FFE8; 0
		dc.w $F103,$8006,$8003,$FFF8; 4
		dc.w $F00B,$800A,$8005,	   0; 8
word_3441A:	dc.w 3			
		dc.w $F102,$8000,$8000,$FFE8; 0
		dc.w $F002,$8003,$8001,$FFF0; 4
		dc.w $F00F,$8006,$8003,$FFF8; 8
word_34434:	dc.w 3			
		dc.w $F806,$8000,$8000,$FFE8; 0
		dc.w $EF03,$8006,$8003,$FFF8; 4
		dc.w $F00B,$800A,$8005,	   0; 8
word_3444E:	dc.w 4			
		dc.w $EC07,$8000,$8000,$FFF0; 0
		dc.w  $C04,$8008,$8004,$FFF0; 4
		dc.w $EC07,$8800,$8800,	   0; 8
		dc.w  $C04,$8808,$8804,	   0; 12
word_34470:	dc.w 4			
		dc.w $EC07,$8000,$8000,$FFF0; 0
		dc.w  $C04,$8008,$8004,$FFF0; 4
		dc.w $EC07,$8800,$8800,	   0; 8
		dc.w  $C04,$8808,$8804,	   0; 12
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_34492:	dc.w word_34528-off_34492; 0 
		dc.w word_3458C-off_34492; 1
		dc.w word_345F0-off_34492; 2
		dc.w word_3451E-off_34492; 3
		dc.w word_34582-off_34492; 4
		dc.w word_345E6-off_34492; 5
		dc.w word_34514-off_34492; 6
		dc.w word_34578-off_34492; 7
		dc.w word_345DC-off_34492; 8
		dc.w word_3450A-off_34492; 9
		dc.w word_3456E-off_34492; 10
		dc.w word_345D2-off_34492; 11
		dc.w word_34500-off_34492; 12
		dc.w word_34564-off_34492; 13
		dc.w word_345C8-off_34492; 14
		dc.w word_344F6-off_34492; 15
		dc.w word_3455A-off_34492; 16
		dc.w word_345BE-off_34492; 17
		dc.w word_344EC-off_34492; 18
		dc.w word_34550-off_34492; 19
		dc.w word_345B4-off_34492; 20
		dc.w word_344E2-off_34492; 21
		dc.w word_34546-off_34492; 22
		dc.w word_345AA-off_34492; 23
		dc.w word_344D8-off_34492; 24
		dc.w word_3453C-off_34492; 25
		dc.w word_345A0-off_34492; 26
		dc.w word_344CE-off_34492; 27
		dc.w word_34532-off_34492; 28
		dc.w word_34596-off_34492; 29
word_344CE:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC; 0
word_344D8:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC; 0
word_344E2:	dc.w 1			
		dc.w $FC04,$8002,$8001,$FFF8; 0
word_344EC:	dc.w 1			
		dc.w $FC04,$8004,$8002,$FFF8; 0
word_344F6:	dc.w 1			
		dc.w $FC04,$8006,$8003,$FFF8; 0
word_34500:	dc.w 1			
		dc.w $FC08,$8008,$8004,$FFF4; 0
word_3450A:	dc.w 1			
		dc.w $FC08,$800B,$8005,$FFF4; 0
word_34514:	dc.w 1			
		dc.w $F80D,$800E,$8007,$FFF0; 0
word_3451E:	dc.w 1			
		dc.w $F80D,$8016,$800B,$FFF0; 0
word_34528:	dc.w 1			
		dc.w $F80D,$801E,$800F,$FFF0; 0
word_34532:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC; 0
word_3453C:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC; 0
word_34546:	dc.w 1			
		dc.w $FC00,$8002,$8001,$FFFC; 0
word_34550:	dc.w 1			
		dc.w $F805,$8003,$8001,$FFF8; 0
word_3455A:	dc.w 1			
		dc.w $F805,$8007,$8003,$FFF8; 0
word_34564:	dc.w 1			
		dc.w $F405,$800B,$8005,$FFFC; 0
word_3456E:	dc.w 1			
		dc.w $F40A,$800F,$8007,$FFF4; 0
word_34578:	dc.w 1			
		dc.w $F40A,$8018,$800C,$FFF4; 0
word_34582:	dc.w 1			
		dc.w $F00A,$8021,$8010,$FFF8; 0
word_3458C:	dc.w 1			
		dc.w $F00F,$802A,$8015,$FFF0; 0
word_34596:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC; 0
word_345A0:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC; 0
word_345AA:	dc.w 1			
		dc.w $F801,$8002,$8001,$FFFC; 0
word_345B4:	dc.w 1			
		dc.w $F801,$8004,$8002,$FFFC; 0
word_345BE:	dc.w 1			
		dc.w $F801,$8006,$8003,$FFFC; 0
word_345C8:	dc.w 1			
		dc.w $F402,$8008,$8004,$FFFC; 0
word_345D2:	dc.w 1			
		dc.w $F402,$800B,$8005,$FFFC; 0
word_345DC:	dc.w 1			
		dc.w $F402,$800E,$8007,$FFFC; 0
word_345E6:	dc.w 1			
		dc.w $F003,$8011,$8008,$FFFC; 0
word_345F0:	dc.w 1			
		dc.w $F003,$8015,$800A,$FFFC; 0
		
		
; custom dynamic pattern loading cues for special stage Sonic, Tails and
; Tails' tails
; The first $12 frames are for Sonic, and the next $12 frames are for Tails.
; The last $15 frames are for Tails' tails.
; The first $24 frames are almost normal dplcs -- the only difference being
; that the art tile to load is pre-shifted left by 4 bits.
; The same applies to the last $15 frames, but they have yet another difference:
; a small space optimization. These frames only have one dplc per frame ever,
; hence the two-byte dplc count is removed from each frame.		
SS_Sonic_Tails_DPLC:	

		dc.w word_3466C-SS_Sonic_Tails_DPLC; 0 
		dc.w word_34674-SS_Sonic_Tails_DPLC; 1
		dc.w word_3467C-SS_Sonic_Tails_DPLC; 2
		dc.w word_34684-SS_Sonic_Tails_DPLC; 3
		dc.w word_3468C-SS_Sonic_Tails_DPLC; 4
		dc.w word_34696-SS_Sonic_Tails_DPLC; 5
		dc.w word_346A2-SS_Sonic_Tails_DPLC; 6
		dc.w word_346AE-SS_Sonic_Tails_DPLC; 7
		dc.w word_346BA-SS_Sonic_Tails_DPLC; 8
		dc.w word_346C4-SS_Sonic_Tails_DPLC; 9
		dc.w word_346D0-SS_Sonic_Tails_DPLC; 10
		dc.w word_346DC-SS_Sonic_Tails_DPLC; 11
		dc.w word_346EA-SS_Sonic_Tails_DPLC; 12
		dc.w word_346F2-SS_Sonic_Tails_DPLC; 13
		dc.w word_346FA-SS_Sonic_Tails_DPLC; 14
		dc.w word_34702-SS_Sonic_Tails_DPLC; 15
		dc.w word_3470A-SS_Sonic_Tails_DPLC; 16
		dc.w word_34710-SS_Sonic_Tails_DPLC; 17
		dc.w word_34716-SS_Sonic_Tails_DPLC; 18
		dc.w word_3471E-SS_Sonic_Tails_DPLC; 19
		dc.w word_34728-SS_Sonic_Tails_DPLC; 20
		dc.w word_34732-SS_Sonic_Tails_DPLC; 21
		dc.w word_3473E-SS_Sonic_Tails_DPLC; 22
		dc.w word_34746-SS_Sonic_Tails_DPLC; 23
		dc.w word_34750-SS_Sonic_Tails_DPLC; 24
		dc.w word_3475C-SS_Sonic_Tails_DPLC; 25
		dc.w word_34766-SS_Sonic_Tails_DPLC; 26
		dc.w word_34770-SS_Sonic_Tails_DPLC; 27
		dc.w word_3477C-SS_Sonic_Tails_DPLC; 28
		dc.w word_34788-SS_Sonic_Tails_DPLC; 29
		dc.w word_34792-SS_Sonic_Tails_DPLC; 30
		dc.w word_34798-SS_Sonic_Tails_DPLC; 31
		dc.w word_347A0-SS_Sonic_Tails_DPLC; 32
		dc.w word_347A6-SS_Sonic_Tails_DPLC; 33
		dc.w word_347AE-SS_Sonic_Tails_DPLC; 34
		dc.w word_347B2-SS_Sonic_Tails_DPLC; 35
		dc.w word_347B6-SS_Sonic_Tails_DPLC; 36
		dc.w word_347B8-SS_Sonic_Tails_DPLC; 37
		dc.w word_347BA-SS_Sonic_Tails_DPLC; 38
		dc.w word_347BC-SS_Sonic_Tails_DPLC; 39
		dc.w word_347BE-SS_Sonic_Tails_DPLC; 40
		dc.w word_347C0-SS_Sonic_Tails_DPLC; 41
		dc.w word_347C2-SS_Sonic_Tails_DPLC; 42
		dc.w word_347C4-SS_Sonic_Tails_DPLC; 43
		dc.w word_347C6-SS_Sonic_Tails_DPLC; 44
		dc.w word_347C8-SS_Sonic_Tails_DPLC; 45
		dc.w word_347CA-SS_Sonic_Tails_DPLC; 46
		dc.w word_347CC-SS_Sonic_Tails_DPLC; 47
		dc.w word_347CE-SS_Sonic_Tails_DPLC; 48
		dc.w word_347D0-SS_Sonic_Tails_DPLC; 49
		dc.w word_347D2-SS_Sonic_Tails_DPLC; 50
		dc.w word_347D4-SS_Sonic_Tails_DPLC; 51
		dc.w word_347D6-SS_Sonic_Tails_DPLC; 52
		dc.w word_347D8-SS_Sonic_Tails_DPLC; 53
		dc.w word_347DA-SS_Sonic_Tails_DPLC; 54
		dc.w word_347DC-SS_Sonic_Tails_DPLC; 55
		dc.w word_347DE-SS_Sonic_Tails_DPLC; 56
word_3466C:	dc.w 3			
		dc.w $F000		; 0
		dc.w $8100		; 1
		dc.w $1190		; 2
word_34674:	dc.w 3			
		dc.w $81B0		; 0
		dc.w $7240		; 1
		dc.w $32C0		; 2
word_3467C:	dc.w 3			
		dc.w $B300		; 0
		dc.w $73C0		; 1
		dc.w $5440		; 2
word_34684:	dc.w 3			
		dc.w $81B0		; 0
		dc.w $74A0		; 1
		dc.w $5520		; 2
word_3468C:	dc.w 4			
		dc.w $8000		; 0
		dc.w $3090		; 1
		dc.w $10D0		; 2
		dc.w $B0F0		; 3
word_34696:	dc.w 5			
		dc.w $51B0		; 0
		dc.w $1210		; 1
		dc.w $7230		; 2
		dc.w $72B0		; 3
		dc.w  $330		; 4
word_346A2:	dc.w 5			
		dc.w $1340		; 0
		dc.w $B360		; 1
		dc.w $2420		; 2
		dc.w $5450		; 3
		dc.w $34B0		; 4
word_346AE:	dc.w 5			
		dc.w $14F0		; 0
		dc.w $F510		; 1
		dc.w $2610		; 2
		dc.w  $640		; 3
		dc.w $3650		; 4
word_346BA:	dc.w 4			
		dc.w $3690		; 0
		dc.w $36D0		; 1
		dc.w $B710		; 2
		dc.w $37D0		; 3
word_346C4:	dc.w 5			
		dc.w $3810		; 0
		dc.w $2850		; 1
		dc.w $7880		; 2
		dc.w $7900		; 3
		dc.w  $980		; 4
word_346D0:	dc.w 5			
		dc.w $5990		; 0
		dc.w $19F0		; 1
		dc.w $7A10		; 2
		dc.w $7A90		; 3
		dc.w  $B10		; 4
word_346DC:	dc.w 6			
		dc.w  $B20		; 0
		dc.w $7B30		; 1
		dc.w  $BB0		; 2
		dc.w $1BC0		; 3
		dc.w $7BE0		; 4
		dc.w $5C60		; 5
word_346EA:	dc.w 3			
		dc.w $5000		; 0
		dc.w   $60		; 1
		dc.w $F070		; 2
word_346F2:	dc.w 3			
		dc.w $5170		; 0
		dc.w $31D0		; 1
		dc.w $B210		; 2
word_346FA:	dc.w 3			
		dc.w $22D0		; 0
		dc.w $2300		; 1
		dc.w $F330		; 2
word_34702:	dc.w 3			
		dc.w $5430		; 0
		dc.w $3490		; 1
		dc.w $B210		; 2
word_3470A:	dc.w 2			
		dc.w $7000		; 0
		dc.w $1080		; 1
word_34710:	dc.w 2			
		dc.w $70A0		; 0
		dc.w $1080		; 1
word_34716:	dc.w 3			
		dc.w $8000		; 0
		dc.w $5090		; 1
		dc.w   $F0		; 2
word_3471E:	dc.w 4			
		dc.w $3100		; 0
		dc.w $5140		; 1
		dc.w $31A0		; 2
		dc.w $31E0		; 3
word_34728:	dc.w 4			
		dc.w $3220		; 0
		dc.w $5260		; 1
		dc.w $32C0		; 2
		dc.w $3300		; 3
word_34732:	dc.w 5			
		dc.w $3100		; 0
		dc.w $5140		; 1
		dc.w $3340		; 2
		dc.w $3380		; 3
		dc.w  $3C0		; 4
word_3473E:	dc.w 3			
		dc.w $3000		; 0
		dc.w $7040		; 1
		dc.w $70C0		; 2
word_34746:	dc.w 4			
		dc.w $1140		; 0
		dc.w $7160		; 1
		dc.w $81E0		; 2
		dc.w $1270		; 3
word_34750:	dc.w 5			
		dc.w  $290		; 0
		dc.w $22A0		; 1
		dc.w $72D0		; 2
		dc.w  $350		; 3
		dc.w $5360		; 4
word_3475C:	dc.w 4			
		dc.w  $3C0		; 0
		dc.w $F3D0		; 1
		dc.w  $4D0		; 2
		dc.w $14E0		; 3
word_34766:	dc.w 4			
		dc.w $3500		; 0
		dc.w $3540		; 1
		dc.w $7580		; 2
		dc.w $5600		; 3
word_34770:	dc.w 5			
		dc.w  $660		; 0
		dc.w $7670		; 1
		dc.w  $6F0		; 2
		dc.w $7700		; 3
		dc.w $1780		; 4
word_3477C:	dc.w 5			
		dc.w  $7A0		; 0
		dc.w $B7B0		; 1
		dc.w  $870		; 2
		dc.w $3880		; 3
		dc.w $18C0		; 4
word_34788:	dc.w 4			
		dc.w  $8E0		; 0
		dc.w $B8F0		; 1
		dc.w  $9B0		; 2
		dc.w $79C0		; 3
word_34792:	dc.w 2			
		dc.w $8000		; 0
		dc.w $7090		; 1
word_34798:	dc.w 3			
		dc.w $3110		; 0
		dc.w  $150		; 1
		dc.w $B160		; 2
word_347A0:	dc.w 2			
		dc.w $1220		; 0
		dc.w $F240		; 1
word_347A6:	dc.w 3			
		dc.w $2340		; 0
		dc.w $2370		; 1
		dc.w $B160		; 2
word_347AE:	dc.w 1			
		dc.w $7000
word_347B2:	dc.w 1			
		dc.w $7080
word_347B6:	dc.w $5000		
word_347B8:	dc.w $8060		
word_347BA:	dc.w $50F0		
word_347BC:	dc.w $5150		
word_347BE:	dc.w $71B0		
word_347C0:	dc.w $8230		
word_347C2:	dc.w $82C0		
word_347C4:	dc.w $8000		
word_347C6:	dc.w $5090		
word_347C8:	dc.w $50F0		
word_347CA:	dc.w $7150		
word_347CC:	dc.w $B1D0		
word_347CE:	dc.w $8290		
word_347D0:	dc.w $8320		
word_347D2:	dc.w $5000		
word_347D4:	dc.w $8060		
word_347D6:	dc.w $50F0		
word_347D8:	dc.w $5150		
word_347DA:	dc.w $71B0		
word_347DC:	dc.w $8230		
word_347DE:	dc.w $82C0		

; ===========================================================================

	if ~RemoveJmpTos
JmpTo42_DisplaySprite:				
		jmp	(DisplaySprite).l
loc_347E6:				
		jmp	(sub_6F8E).l
		
		align 4
	endc	
; ===========================================================================

; ----------------------------------------------------------------------------
; Object 10 - Tails in Special Stage
; ----------------------------------------------------------------------------

TailsSpecial:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_347FA(pc,d0.w),d1
		jmp	off_347FA(pc,d1.w)
; ===========================================================================
off_347FA:	dc.w loc_34804-off_347FA; 0 
		dc.w loc_34908-off_347FA; 1
		dc.w loc_349F2-off_347FA; 2
		dc.w off_347FA-off_347FA; 3
		dc.w loc_34A24-off_347FA; 4
; ===========================================================================

loc_34804:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.w	d0,$2A(a0)
		move.w	#$80,d1	
		move.w	d1,$2E(a0)
		add.w	($FFFFF73E).w,d0
		move.w	d0,8(a0)
		add.w	($FFFFF740).w,d1
		move.w	d1,$C(a0)
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.l	#Map_34B3E,4(a0)
		move.w	#$4300,2(a0)
		move.b	#4,1(a0)
		move.b	#2,$18(a0)
		move.w	#$80,$34(a0)
		tst.w	(v_player_mode).w
		beq.s	loc_34864
		move.b	#3,$18(a0)
		move.w	#$6E,$34(a0) ; 'n'

loc_34864:				
		move.w	#$400,$32(a0)
		move.b	#$40,$26(a0) ; '@'
		move.b	#1,(v_tails_last_frame_id).w
		clr.b	$21(a0)
		clr.b	$23(a0)
		bsr.w	loc_349C8
		movea.l	#-$4E80,a1
		move.b	#$63,(a1) ; 'c'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$18,$C(a1)
		move.l	#off_34492,4(a1)
		move.w	#$623C,2(a1)
		move.b	#4,1(a1)
		move.b	#4,$18(a1)
		move.l	a0,$38(a1)
		movea.l	#-$4E40,a1
		move.b	#-$78,(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	#off_34DA8,4(a1)
		move.w	#$4316,2(a1)
		move.b	#4,1(a1)
		move.b	$18(a0),$18(a1)
		subi.b	#1,$18(a1)
		move.l	a0,$38(a1)
		movea.l	a1,a0
		move.b	#1,(v_tailstails_last_frame_id).w
		clr.b	$23(a0)
		movea.l	$38(a0),a0
		rts	
; ===========================================================================

loc_34908:				
		tst.b	$25(a0)
		bne.s	loc_3495E
		bsr.w	loc_34972
		lea	(v_joypad2_hold).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34920
		lea	(v_joypad_hold).w,a2

loc_34920:				
		bsr.w	loc_33F8A
		bsr.w	loc_3400A
		moveq	#1,d0
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		lea	(v_joypad2_press).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34944
		lea	(v_joypad_press).w,a2

loc_34944:				
		bsr.w	loc_33B44
		bsr.w	loc_33EA0
		lea	(off_34B1C).l,a1
		bsr.w	loc_33F00
		bsr.w	loc_33DFC
		bra.w	loc_349C8
; ===========================================================================

loc_3495E:				
		bsr.w	loc_33A22
		bsr.w	loc_33E44
		bsr.w	loc_3404A
		bsr.w	loc_34084
		bra.w	loc_349C8
; ===========================================================================

loc_34972:				
		tst.b	(f_ss_2p).w
		bne.s	locret_3497E
		tst.w	(v_player_mode).w
		beq.s	loc_34980

locret_3497E:				
		rts	
; ===========================================================================

loc_34980:				
		move.b	(v_joypad2_hold).w,d0
		andi.b	#$7F,d0	; ''
		beq.s	loc_349A2
		moveq	#0,d0
		moveq	#3,d1
		lea	(v_ss_ctrl_record_buffer).w,a1

loc_34992:				
		move.l	d0,(a1)
		move.l	d0,(a1)
		dbf	d1,loc_34992
		move.w	#$B4,(v_tails_control_counter).w
		rts	
; ===========================================================================

loc_349A2:				
		tst.w	(v_tails_control_counter).w
		beq.s	loc_349AE
		subq.w	#1,(v_tails_control_counter).w
		rts	
; ===========================================================================

loc_349AE:				
		lea	(v_ss_last_ctrl_record).w,a1
		move.w	(a1),(v_joypad2_hold).w
		rts	
; ===========================================================================
dword_349B8:	dc.l   $FF3060		; 0 
		dc.l   $FF3800		; 1
		dc.l   $FF4C80		; 2
		dc.l   $FF53C0		; 3
; ===========================================================================

loc_349C8:				
		move.b	$23(a0),d0
		beq.s	loc_349DC
		subq.b	#1,d0
		move.b	d0,$23(a0)
		andi.b	#1,d0
		beq.s	loc_349DC
		rts	
; ===========================================================================

loc_349DC:				
		bsr.w	loc_34EA4
		lea	(dword_349B8)(pc),a3
		lea	(v_tails_last_frame_id).w,a4
		move.w	#$6000,d4
		moveq	#$12,d1
		bra.w	loc_33AD8
; ===========================================================================

loc_349F2:				
		lea	(v_joypad2_hold).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34A00
		lea	(v_joypad_hold).w,a2

loc_34A00:				
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		bsr.w	loc_33C54
		lea	(off_34B1C).l,a1
		bsr.w	loc_33F00
		bra.s	loc_349C8
; ===========================================================================

loc_34A24:				
		lea	(v_joypad2_hold).w,a2
		tst.w	(v_player_mode).w
		beq.s	loc_34A32
		lea	(v_joypad_hold).w,a2

loc_34A32:				
		bsr.w	loc_33C32
		bsr.w	loc_33C06
		bsr.w	loc_33C54
		bsr.w	loc_33DB4
		bsr.w	loc_33E44
		bsr.w	loc_34084
		bsr.w	loc_33EA0
		lea	(off_34B1C).l,a1
		bsr.w	loc_33F00
		bra.w	loc_349C8
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_34A5C:				
		movea.l	$38(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.b	1(a1),1(a0)
		move.b	$22(a1),$22(a0)
		move.b	$1C(a1),$1C(a0)
		move.b	$18(a1),d0
		subq.b	#1,d0
		move.b	d0,$18(a0)
		cmpi.b	#3,$1C(a0)
		bcc.s	locret_34A9E
		lea	(off_34D86).l,a1
		bsr.w	loc_34EAA
		bra.w	loc_34AAC
; ===========================================================================

locret_34A9E:				
		rts	
; ===========================================================================
dword_34AA0:	dc.l   $FF55C0		; 0
		dc.l   $FF5C60		; 1
		dc.l   $FF63C0		; 2
; ===========================================================================

loc_34AAC:				
		movea.l	$38(a0),a1
		move.b	$23(a1),d0
		beq.s	loc_34ABE
		andi.b	#1,d0
		beq.s	loc_34ABE
		rts	
; ===========================================================================

loc_34ABE:				
		bsr.w	loc_34EA4
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(v_tailstails_last_frame_id).w,d0
		beq.s	locret_34B1A
		move.b	d0,(v_tailstails_last_frame_id).w
		moveq	#0,d6
		cmpi.b	#7,d0
		blt.s	loc_34AE4
		addq.w	#4,d6
		cmpi.b	#$E,d0
		blt.s	loc_34AE4
		addq.w	#4,d6

loc_34AE4:				
		move.l	dword_34AA0(pc,d6.w),d6
		addi.w	#$24,d0	; '$'
		add.w	d0,d0
		lea	(SS_Sonic_Tails_DPLC).l,a2
		adda.w	(a2,d0.w),a2
		move.w	#$62C0,d2
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3	
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.w	#1,d1
		add.l	d6,d1
		jsr	(QueueDMATransfer).l

locret_34B1A:				
		rts	
; ===========================================================================
off_34B1C:	dc.w byte_34B24-off_34B1C; 0 
		dc.w byte_34B2A-off_34B1C; 1
		dc.w byte_34B34-off_34B1C; 2
		dc.w byte_34B3A-off_34B1C; 3
byte_34B24:	dc.b   3,  0,  1,  2,  3,$FF; 0	
byte_34B2A:	dc.b   3,  4,  5,  6,  7,  8,  9, $A, $B,$FF; 0	
byte_34B34:	dc.b   3, $C, $D, $E, $F,$FF; 0	
byte_34B3A:	dc.b   1,$10,$11,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_34B3E:				
		dc.w word_34B62-Map_34B3E; 0
		dc.w word_34B7C-Map_34B3E; 1
		dc.w word_34B9E-Map_34B3E; 2
		dc.w word_34BC0-Map_34B3E; 3
		dc.w word_34BEA-Map_34B3E; 4
		dc.w word_34C04-Map_34B3E; 5
		dc.w word_34C26-Map_34B3E; 6
		dc.w word_34C50-Map_34B3E; 7
		dc.w word_34C72-Map_34B3E; 8
		dc.w word_34C94-Map_34B3E; 9
		dc.w word_34CBE-Map_34B3E; 10
		dc.w word_34CE8-Map_34B3E; 11
		dc.w word_34D0A-Map_34B3E; 12
		dc.w word_34D1C-Map_34B3E; 13
		dc.w word_34D36-Map_34B3E; 14
		dc.w word_34D48-Map_34B3E; 15
		dc.w word_34D62-Map_34B3E; 16
		dc.w word_34D74-Map_34B3E; 17
word_34B62:	dc.w 3			
		dc.w $E80A,$8000,$8000,$FFF4; 0
		dc.w	 9,$8009,$8004,$FFF4; 4
		dc.w $1000,$800F,$8007,$FFF4; 8
word_34B7C:	dc.w 4			
		dc.w $E80C,$8000,$8000,$FFF0; 0
		dc.w $F009,$8004,$8002,$FFF3; 4
		dc.w	$C,$800A,$8005,$FFF0; 8
		dc.w  $805,$800E,$8007,$FFF8; 12
word_34B9E:	dc.w 4			
		dc.w $E80C,$8000,$8000,$FFF0; 0
		dc.w $F009,$8004,$8002,$FFF3; 4
		dc.w	$C,$800A,$8005,$FFF0; 8
		dc.w  $805,$800E,$8007,$FFF8; 12
word_34BC0:	dc.w 5			
		dc.w $E80C,$8800,$8800,$FFF0; 0
		dc.w $F009,$8804,$8802,$FFF5; 4
		dc.w	$C,$800A,$8005,$FFF0; 8
		dc.w  $805,$800E,$8007,$FFF8; 12
		dc.w $1000,$8012,$8009,	   8; 16
word_34BEA:	dc.w 3			
		dc.w $E105,$8000,$8000,	   0; 0
		dc.w $F10D,$8004,$8002,$FFF8; 4
		dc.w  $10D,$800C,$8006,$FFEC; 8
word_34C04:	dc.w 4			
		dc.w $E101,$8000,$8000,	   0; 0
		dc.w $F10D,$8002,$8001,$FFF7; 4
		dc.w  $10A,$800A,$8005,$FFEF; 8
		dc.w  $101,$8013,$8009,	   7; 12
word_34C26:	dc.w 5			
		dc.w $E800,$8000,$8000,	   0; 0
		dc.w $EC08,$8001,$8000,$FFF8; 4
		dc.w $F40D,$8004,$8002,$FFF0; 8
		dc.w $F400,$800C,$8006,	 $10; 12
		dc.w  $409,$800D,$8006,$FFF0; 16
word_34C50:	dc.w 4			
		dc.w $E900,$8000,$8000,	   1; 0
		dc.w $F10F,$8001,$8000,$FFF0; 4
		dc.w $F900,$8011,$8008,	 $10; 8
		dc.w $1104,$8012,$8009,$FFF0; 12
word_34C72:	dc.w 4			
		dc.w $E205,$8000,$8000,	   0; 0
		dc.w $F20C,$8004,$8002,$FFF8; 4
		dc.w $FA07,$8008,$8004,$FFF0; 8
		dc.w $FA09,$8010,$8008,	   0; 12
word_34C94:	dc.w 5			
		dc.w $E800,$8000,$8000,	   0; 0
		dc.w $F00D,$8001,$8000,$FFF0; 4
		dc.w $F800,$8009,$8004,	 $10; 8
		dc.w	$D,$800A,$8005,$FFF0; 12
		dc.w $1004,$8012,$8009,$FFF0; 16
word_34CBE:	dc.w 5			
		dc.w $E800,$8000,$8000,	   0; 0
		dc.w $F00E,$8001,$8000,$FFF0; 4
		dc.w $F800,$800D,$8006,	 $10; 8
		dc.w  $80C,$800E,$8007,$FFE8; 12
		dc.w $1004,$8012,$8009,$FFF0; 16
word_34CE8:	dc.w 4			
		dc.w $E800,$8000,$8000,	   0; 0
		dc.w $F00E,$8001,$8000,$FFF0; 4
		dc.w $F800,$800D,$8006,	 $10; 8
		dc.w  $80D,$800E,$8007,$FFE8; 12
word_34D0A:	dc.w 2			
		dc.w $F80A,$8000,$8000,$FFEC; 0
		dc.w $F007,$8009,$8004,	   4; 4
word_34D1C:	dc.w 3			
		dc.w $F805,$8000,$8000,$FFEC; 0
		dc.w  $800,$8004,$8002,$FFF4; 4
		dc.w $F00B,$8005,$8002,$FFFC; 8
word_34D36:	dc.w 2			
		dc.w $F701,$8000,$8000,$FFEC; 0
		dc.w $F00F,$8002,$8001,$FFF4; 4
word_34D48:	dc.w 3			
		dc.w $F802,$8000,$8000,$FFEC; 0
		dc.w $F002,$8003,$8001,$FFF4; 4
		dc.w $F00B,$8006,$8003,$FFFC; 8
word_34D62:	dc.w 2			
		dc.w $F007,$8000,$8000,$FFF0; 0
		dc.w $F007,$8800,$8800,	   0; 4
word_34D74:	dc.w 2			
		dc.w $F007,$8000,$8000,$FFF0; 0
		dc.w $F007,$8800,$8800,	   0; 4
off_34D86:	dc.w byte_34D8C-off_34D86; 0 
		dc.w byte_34D95-off_34D86; 1
		dc.w byte_34D9E-off_34D86; 2
byte_34D8C:	dc.b   3,  0,  1,  2,  3,  4,  5,  6,$FF; 0 
byte_34D95:	dc.b   3,  7,  8,  9, $A, $B, $C, $D,$FF; 0 
byte_34D9E:	dc.b   3, $E, $F,$10,$11,$12,$13,$14,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
off_34DA8:	dc.w word_34DD2-off_34DA8; 0 
		dc.w word_34DDC-off_34DA8; 1
		dc.w word_34DE6-off_34DA8; 2
		dc.w word_34DF0-off_34DA8; 3
		dc.w word_34DFA-off_34DA8; 4
		dc.w word_34E04-off_34DA8; 5
		dc.w word_34E0E-off_34DA8; 6
		dc.w word_34E18-off_34DA8; 7
		dc.w word_34E22-off_34DA8; 8
		dc.w word_34E2C-off_34DA8; 9
		dc.w word_34E36-off_34DA8; 10
		dc.w word_34E40-off_34DA8; 11
		dc.w word_34E4A-off_34DA8; 12
		dc.w word_34E54-off_34DA8; 13
		dc.w word_34E5E-off_34DA8; 14
		dc.w word_34E68-off_34DA8; 15
		dc.w word_34E72-off_34DA8; 16
		dc.w word_34E7C-off_34DA8; 17
		dc.w word_34E86-off_34DA8; 18
		dc.w word_34E90-off_34DA8; 19
		dc.w word_34E9A-off_34DA8; 20
word_34DD2:	dc.w 1			
		dc.w $FA06,$8000,$8000,$FFFA; 0
word_34DDC:	dc.w 1			
		dc.w	$A,$8000,$8000,$FFF8; 0
word_34DE6:	dc.w 1			
		dc.w  $809,$8000,$8000,$FFF8; 0
word_34DF0:	dc.w 1			
		dc.w $FF06,$8000,$8000,$FFF7; 0
word_34DFA:	dc.w 1			
		dc.w $F707,$8000,$8000,$FFF5; 0
word_34E04:	dc.w 1			
		dc.w $F70A,$8000,$8000,$FFF0; 0
word_34E0E:	dc.w 1			
		dc.w $F70A,$8000,$8000,$FFF0; 0
word_34E18:	dc.w 1			
		dc.w	$A,$8000,$8000,$FFF4; 0
word_34E22:	dc.w 1			
		dc.w  $809,$8000,$8000,$FFF3; 0
word_34E2C:	dc.w 1			
		dc.w	 6,$8000,$8000,$FFF1; 0
word_34E36:	dc.w 1			
		dc.w $F807,$8000,$8000,$FFF4; 0
word_34E40:	dc.w 1			
		dc.w $F80B,$8000,$8000,$FFF2; 0
word_34E4A:	dc.w 1			
		dc.w $F80A,$8000,$8000,$FFF3; 0
word_34E54:	dc.w 1			
		dc.w $F80A,$8000,$8000,$FFF4; 0
word_34E5E:	dc.w 1			
		dc.w $FC09,$8000,$8000,$FFEA; 0
word_34E68:	dc.w 1			
		dc.w $F80A,$8000,$8000,$FFED; 0
word_34E72:	dc.w 1			
		dc.w $F806,$8000,$8000,$FFED; 0
word_34E7C:	dc.w 1			
		dc.w $F709,$8000,$8000,$FFED; 0
word_34E86:	dc.w 1			
		dc.w $F50D,$8000,$8000,$FFE5; 0
word_34E90:	dc.w 1			
		dc.w $F00A,$8000,$8000,$FFED; 0
word_34E9A:	dc.w 1			
		dc.w $F00A,$8000,$8000,$FFED; 0
; ===========================================================================

loc_34EA4:				
		jmp	DisplaySprite
; ===========================================================================

loc_34EAA:				
		jmp	AnimateSprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_34EB0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_34EBE(pc,d0.w),d1
		jmp	off_34EBE(pc,d1.w)
; ===========================================================================
off_34EBE:	dc.w loc_34EC6-off_34EBE; 0 
		dc.w loc_34F06-off_34EBE; 1
		dc.w loc_3533A-off_34EBE; 2
		dc.w loc_34F6A-off_34EBE; 3
; ===========================================================================

loc_34EC6:				
		addq.b	#2,$24(a0)
		move.w	#$7F,8(a0)
		move.w	#$58,$C(a0)
		move.l	#Map_36508,4(a0)
		move.w	#$238A,2(a0)
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#2,$20(a0)
		move.b	#-1,(f_unknown_ss_bomb).w ; never used again
		tst.b	$26(a0)
		bmi.s	loc_34F06
		bsr.w	loc_3529C

loc_34F06:				
					
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		lea	(off_364CE).l,a1
		bsr.w	loc_3539E
		tst.b	1(a0)
		bpl.s	locret_34F26
		bsr.w	loc_34F28
		bra.w	loc_365BC
; ===========================================================================

locret_34F26:				
		rts	
; ===========================================================================

loc_34F28:				
		move.w	#8,d6
		bsr.w	loc_350A0
		bcc.s	locret_34F68
		move.b	#1,$21(a1)
		move.w	#$CB,d0	
		jsr	(PlaySound2).l
		move.b	#6,$24(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)
		move.l	$34(a0),d0
		beq.s	locret_34F68
		move.l	#0,$34(a0)
		movea.l	d0,a1
		st.b	$2A(a1)

locret_34F68:				
		rts	
; ===========================================================================

loc_34F6A:				
		move.b	#$A,$1C(a0)
		move.w	#$42B5,2(a0)
		bsr.w	loc_34F90
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		lea	(off_364CE).l,a1
		bsr.w	loc_365C8
		bra.w	loc_365BC
; ===========================================================================

loc_34F90:				
		cmpi.w	#4,$30(a0)
		bcc.s	locret_34F9E
		move.b	#1,$18(a0)

locret_34F9E:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_34FA0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_34FAE(pc,d0.w),d1
		jmp	off_34FAE(pc,d1.w)
; ===========================================================================
off_34FAE:	dc.w loc_34FB6-off_34FAE; 0 
		dc.w loc_34FF0-off_34FAE; 1
		dc.w loc_3533A-off_34FAE; 2
		dc.w loc_35010-off_34FAE; 3
; ===========================================================================

loc_34FB6:				
		addq.b	#2,$24(a0)
		move.w	#$7F,8(a0) ; ''
		move.w	#$58,$C(a0) ; 'X'
		move.l	#Map_3632A,4(a0)
		move.w	#$6322,2(a0)
		move.b	#4,1(a0)
		move.b	#3,$18(a0)
		move.b	#1,$20(a0)
		tst.b	$26(a0)
		bmi.s	loc_34FF0
		bsr.w	loc_3529C

loc_34FF0:				
					
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		bsr.w	loc_35036

loc_34FFC:
		lea	(off_362D2).l,a1
		bsr.w	loc_3539E
		tst.b	1(a0)
		bmi.w	loc_365BC
		rts	
; ===========================================================================

loc_35010:				
		move.b	#$A,$1C(a0)
		move.w	#$477F,2(a0)
		bsr.w	loc_34F90
		bsr.w	loc_3512A
		bsr.w	loc_351A0
		lea	(off_362D2).l,a1
		bsr.w	loc_365C8
		bra.w	loc_365BC
; ===========================================================================

loc_35036:				
		move.w	#$A,d6
		bsr.w	loc_350A0
		bcc.s	locret_3509E
		cmpa.l	#-$5000,a1
		bne.s	loc_3504E
		addq.w	#1,(v_rings).w
		bra.s	loc_35052
; ===========================================================================

loc_3504E:				
		addq.w	#1,(v_rings_p2).w

loc_35052:				
		addq.b	#1,$3E(a1)
		cmpi.b	#$A,$3E(a1)
		blt.s	loc_3507A
		addq.b	#1,$3D(a1)
		move.b	#0,$3E(a1)
		cmpi.b	#$A,$3D(a1)
		blt.s	loc_3507A
		addq.b	#1,$3C(a1)
		move.b	#0,$3D(a1)

loc_3507A:				
		move.b	#6,$24(a0)
		move.l	$34(a0),d0
		beq.s	loc_35094

loc_35086:
		move.l	#0,$34(a0)
		movea.l	d0,a1
		st.b	$2A(a1)

loc_35094:				
		move.w	#$B5,d0	
		jsr	(PlaySound2).l

locret_3509E:				
		rts	
; ===========================================================================

loc_350A0:				
		cmpi.b	#8,$1C(a0)
		bne.s	loc_350DC
		tst.b	$20(a0)
		beq.s	loc_350DC
		lea	($FFFFB000).w,a2
		lea	($FFFFB040).w,a3
		move.w	$34(a2),d0
		cmp.w	$34(a3),d0
		bcs.s	loc_350CE
		movea.l	a3,a1
		bsr.w	loc_350E2
		bcs.s	locret_350E0
		movea.l	a2,a1
		bra.w	loc_350E2
; ===========================================================================

loc_350CE:				
		movea.l	a2,a1
		bsr.w	loc_350E2
		bcs.s	locret_350E0
		movea.l	a3,a1
		bra.w	loc_350E2
; ===========================================================================

loc_350DC:				
		move	#0,ccr

locret_350E0:				
		rts	
; ===========================================================================

loc_350E2:				
		tst.b	(a1)
		beq.s	loc_3511A
		cmpi.b	#2,$24(a1)
		bne.s	loc_3511A
		tst.b	$25(a1)
		bne.s	loc_3511A
		move.b	$26(a1),d0
		move.b	$26(a0),d1
		move.b	d1,d2
		add.b	d6,d1
		bcs.s	loc_35110
		sub.b	d6,d2
		bcs.s	loc_35112
		cmp.b	d1,d0
		bcc.s	loc_3511A
		cmp.b	d2,d0
		bcc.s	loc_35120
		bra.s	loc_3511A
; ===========================================================================

loc_35110:				
		sub.b	d6,d2

loc_35112:				
		cmp.b	d1,d0
		bcs.s	loc_35120
		cmp.b	d2,d0
		bcc.s	loc_35120

loc_3511A:				
		move	#0,ccr
		rts	
; ===========================================================================

loc_35120:				
		clr.b	$20(a0)
		move	#1,ccr
		rts	
; ===========================================================================

loc_3512A:				
		btst	#7,$22(a0)
		bne.s	loc_3516C
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.s	loc_35146
		subi.l	#$CCCC,$30(a0)
		ble.s	loc_3516C
		bra.s	loc_35150
; ===========================================================================

loc_35146:				
		subi.l	#$CCCD,$30(a0)
		ble.s	loc_3516C

loc_35150:				
		cmpi.b	#$A,$1C(a0)
		beq.s	locret_3516A
		move.w	$30(a0),d0
		cmpi.w	#$1D,d0
		ble.s	loc_35164
		moveq	#$1E,d0

loc_35164:				
		move.b	byte_35180(pc,d0.w),$1C(a0)

locret_3516A:				
		rts	
; ===========================================================================

loc_3516C:				
		move.l	(sp)+,d0

loc_3516E:
		move.l	$34(a0),d0
		beq.w	loc_365C2
		movea.l	d0,a1
		st.b	$2A(a1)
		bra.w	loc_365C2
; ===========================================================================
byte_35180:	dc.b   9,  9,  9,  8,  8,  7,  7,  6,  6,  5,  5,  4,  4,  3,  3,  3; 0
					
		dc.b   2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0; 16
; ===========================================================================

loc_351A0:				
		move.w	d7,-(sp)
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		moveq	#0,d5
		moveq	#0,d6
		moveq	#0,d7
		movea.l	(v_ss_ctrl_record_buffer_end).w,a1
		move.w	$30(a0),d0
		beq.w	loc_35258
		cmp.w	(a1)+,d0
		bgt.w	loc_35258
		subq.w	#1,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		tst.b	(v_ss_track_orientation).w
		bne.w	loc_35260
		move.b	4(a1,d0.w),d6
		move.b	5(a1,d0.w),d7
		beq.s	loc_351E8
		move.b	$26(a0),d1
		cmp.b	d6,d1
		bcs.s	loc_351E8
		cmp.b	d7,d1
		bcs.s	loc_35258

loc_351E8:				
		move.b	(a1,d0.w),d2
		move.b	2(a1,d0.w),d4
		move.b	3(a1,d0.w),d5
		move.b	1(a1,d0.w),d3

loc_351F8:				
		bpl.s	loc_35202
		cmpi.b	#$48,d3	; 'H'
		bcs.s	loc_35202
		ext.w	d3

loc_35202:				
		move.b	$26(a0),d0
		bsr.w	loc_365DA
		muls.w	d4,d1
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,8(a0)
		move.w	d0,$C(a0)
		move.l	$34(a0),d0
		beq.s	loc_3524E
		movea.l	d0,a1
		move.b	$26(a0),d0
		bsr.w	loc_365DA
		move.w	d4,d7
		lsr.w	#2,d7
		add.w	d7,d4
		muls.w	d4,d1
		move.w	d5,d7
		asr.w	#2,d7
		add.w	d7,d5
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,8(a1)
		move.w	d0,$C(a1)

loc_3524E:				
		ori.b	#-$80,1(a0)

loc_35254:				
		move.w	(sp)+,d7
		rts	
; ===========================================================================

loc_35258:				
		andi.b	#$7F,1(a0) ; ''
		bra.s	loc_35254
; ===========================================================================

loc_35260:				
		move.b	#-$80,d1
		move.b	4(a1,d0.w),d6
		move.b	5(a1,d0.w),d7
		beq.s	loc_35282
		sub.w	d1,d6
		sub.w	d1,d7
		neg.w	d6
		neg.w	d7
		move.b	$26(a0),d1
		cmp.b	d7,d1
		bcs.s	loc_35282
		cmp.b	d6,d1
		bcs.s	loc_35258

loc_35282:				
		move.b	(a1,d0.w),d2
		move.b	2(a1,d0.w),d4
		move.b	3(a1,d0.w),d5
		subi.w	#$100,d2
		neg.w	d2
		move.b	1(a1,d0.w),d3
		bra.w	loc_351F8
; ===========================================================================

loc_3529C:				
		bsr.w	loc_365E6
		bne.w	locret_3532C
		move.l	a0,$34(a1)
		move.b	(a0),(a1)
		move.b	#4,$24(a1)
		move.l	#off_34492,4(a1)
		move.w	#$623C,2(a1)
		move.b	#4,1(a1)
		move.b	#5,$18(a1)
		move.b	$26(a0),d0
		cmpi.b	#$10,d0
		bgt.s	loc_352E6
		bset	#0,1(a1)
		move.b	#2,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_352E6:				
		cmpi.b	#$30,d0	; '0'
		bgt.s	loc_352FE
		bset	#0,1(a1)

loc_352F2:
		move.b	#1,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_352FE:				
		cmpi.b	#$50,d0	; 'P'
		bgt.s	loc_35310
		move.b	#0,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_35310:				
		cmpi.b	#$70,d0	; 'p'
		bgt.s	loc_35322
		move.b	#1,$2B(a1)
		move.l	a1,$34(a0)
		rts	
; ===========================================================================

loc_35322:				
		move.b	#2,$2B(a1)
		move.l	a1,$34(a0)

locret_3532C:				
		rts	
; ===========================================================================
		dc.b   0		; 0
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b $18		; 3
		dc.b   0		; 4
		dc.b $14		; 5
		dc.b   0		; 6
		dc.b $14		; 7
		dc.b   0		; 8
		dc.b $14		; 9
		dc.b   0		; 10
		dc.b   0		; 11
; ===========================================================================

loc_3533A:				
		tst.b	$2A(a0)
		bne.w	loc_3539A
		movea.l	$34(a0),a1
		tst.b	1(a1)
		bmi.s	loc_3534E
		rts	
; ===========================================================================

loc_3534E:				
		moveq	#9,d0
		sub.b	$1C(a1),d0
		addi.b	#1,d0
		cmpi.b	#$A,d0
		bne.s	loc_35362
		move.w	#9,d0

loc_35362:				
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		moveq	#0,d1
		move.b	$2B(a0),d1
		beq.s	loc_3538A
		cmpi.b	#1,d1
		beq.s	loc_35380
		add.w	d1,d0
		move.w	#$629C,2(a0)
		bra.s	loc_35392
; ===========================================================================

loc_35380:				
		add.w	d1,d0
		move.w	#$6262,2(a0)
		bra.s	loc_35392
; ===========================================================================

loc_3538A:				
		add.w	d1,d0
		move.w	#$623C,2(a0)

loc_35392:				
		move.b	d0,$1A(a0)
		bra.w	loc_365BC
; ===========================================================================

loc_3539A:				
		bra.w	loc_365C2
; ===========================================================================

loc_3539E:				
		subq.b	#1,$1E(a0)
		bpl.s	locret_353E8
		moveq	#0,d0
		move.b	$1C(a0),d0
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),$1E(a0)
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bpl.s	loc_353CA
		move.b	#0,$1B(a0)
		move.b	1(a1),d0

loc_353CA:				
		andi.b	#$7F,d0	; ''
		move.b	d0,$1A(a0)
		move.b	$22(a0),d1

loc_353D6:
		andi.b	#3,d1
		andi.b	#-4,1(a0)
		or.b	d1,1(a0)
		addq.b	#1,$1B(a0)

locret_353E8:				
		rts	
; ===========================================================================
byte_353EA:	dc.b $38		; 0 
		dc.b $48		; 1
		dc.b $2A		; 2
		dc.b $56		; 3
		dc.b $1C		; 4
		dc.b $64		; 5
		dc.b  $E		; 6
		dc.b $72		; 7
		dc.b   0		; 8
		dc.b $80		; 9
byte_353F4:	dc.b $40		; 0 
		dc.b $30		; 1
		dc.b $50		; 2
		dc.b $20		; 3
		dc.b $60		; 4
		dc.b $10		; 5
		dc.b $70		; 6
		dc.b   0		; 7
		dc.b $80		; 8
		dc.b   0		; 9
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_353FE:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3540C(pc,d0.w),d1
		jmp	off_3540C(pc,d1.w)
; ===========================================================================
off_3540C:	dc.w loc_35410-off_3540C; 0 
		dc.w loc_354E4-off_3540C; 1
; ===========================================================================

loc_35410:				
		movea.l	$38(a0),a3
		moveq	#0,d1
		move.b	$3D(a3),d1
		beq.s	loc_35428
		subi.b	#1,$3D(a3)
		move.w	#$A,d1
		bra.s	loc_35458
; ===========================================================================

loc_35428:				
		move.b	$3C(a3),d1
		beq.s	loc_35440

loc_3542E:
		subi.b	#1,$3C(a3)
		move.b	#9,$3D(a3)
		move.w	#$A,d1
		bra.s	loc_35458
; ===========================================================================

loc_35440:				
		move.b	$3E(a3),d1
		beq.s	loc_3545C
		move.b	#0,$3E(a3)
		btst	#0,d1
		beq.s	loc_35458
		lea	(byte_353F4)(pc),a2
		bra.s	loc_3545C
; ===========================================================================

loc_35458:				
		lea	(byte_353EA)(pc),a2

loc_3545C:				
		cmpi.b	#9,(a3)
		bne.s	loc_35468
		sub.w	d1,(v_rings).w
		bra.s	loc_3546C
; ===========================================================================

loc_35468:				
		sub.w	d1,(v_rings_p2).w

loc_3546C:				
		move.w	d1,d2
		subq.w	#1,d2
		bmi.w	loc_365C2
		movea.l	a0,a1
		bra.s	loc_3547E
; ===========================================================================

loc_35478:				
		bsr.w	loc_365EC
		bne.s	loc_354DE

loc_3547E:				
		move.b	#$5B,(a1) ; '['
		move.b	#2,$24(a1)
		move.l	#Map_3632A,4(a1)
		move.w	#$6322,2(a1)
		move.b	#4,1(a1)
		move.b	#5,$18(a1)
		move.b	#0,$20(a1)
		move.b	#8,$1C(a1)
		move.w	8(a3),8(a1)
		move.w	$C(a3),$C(a1)
		move.b	$26(a3),d0
		addi.b	#$40,d0	; '@'
		add.b	(a2)+,d0
		jsr	(CalcSine).l
		muls.w	#$400,d1
		asr.l	#8,d1
		move.w	d1,$10(a1)
		muls.w	#$1000,d0
		asr.l	#8,d0
		move.w	d0,$12(a1)

loc_354DE:				
		dbf	d2,loc_35478
		rts	
; ===========================================================================

loc_354E4:				
		bsr.w	loc_365E0
		addi.w	#$80,$12(a0)
		bsr.w	loc_3551C
		tst.w	8(a0)
		bmi.w	loc_365C2
		cmpi.w	#$100,8(a0)
		bcc.w	loc_365C2
		cmpi.w	#$E0,$C(a0)
		bgt.w	loc_365C2
		lea	(off_362D2).l,a1
		bsr.w	loc_365C8
		bra.w	loc_365BC
; ===========================================================================

loc_3551C:				
		tst.w	$12(a0)
		bmi.w	locret_35530
		move.b	#0,$18(a0)
		move.b	#9,$1C(a0)

locret_35530:				
		rts	
; ===========================================================================
		rts	
; ===========================================================================

loc_35534:				
		move.w	word_35548(pc,d0.w),($FFFFFB76).w
		move.w	word_35548+2(pc,d0.w),($FFFFFB78).w
		move.w	word_35548+4(pc,d0.w),($FFFFFB7A).w
		rts	
; ===========================================================================
word_35548:	dc.w   $EE,  $88,  $44	; 0
		dc.w   $EE,  $CC,  $88	; 3
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_35554:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_35562(pc,d0.w),d1
		jmp	off_35562(pc,d1.w)
; ===========================================================================
off_35562:	dc.w loc_35578-off_35562; 0 
		dc.w loc_357FE-off_35562; 1
		dc.w loc_35B5A-off_35562; 2
		dc.w loc_359CE-off_35562; 3
		dc.w loc_35B96-off_35562; 4
		dc.w loc_359A6-off_35562; 5
		dc.w loc_359BC-off_35562; 6
		dc.w loc_35706-off_35562; 7
		dc.w loc_357B2-off_35562; 8
		dc.w loc_357D2-off_35562; 9
		dc.w loc_357E8-off_35562; 10
; ===========================================================================

loc_35578:				
		tst.b	(f_ss_no_checkpoint).w
		bne.s	loc_355E0
		movea.l	(v_ss_track_last_mappings_copy).w,a1

loc_35582:
		cmpa.l	#MapSpec_Straight4,a1
		blt.s	locret_355DE
		cmpa.l	#MapSpec_Drop1,a1
		bge.s	locret_355DE
		moveq	#6,d0
		bsr.s	loc_35534
		st.b	(f_ss_checkpoint_rainbow).w
		moveq	#6,d0

loc_3559C:				
		bsr.w	loc_365EC
		bne.s	loc_355D6
		move.b	#$5A,(a1) ; 'Z'
		move.b	#2,$24(a1)
		move.l	#Map_3632A,4(a1)
		move.w	#$6322,2(a1)
		move.b	#4,1(a1)
		move.b	#5,$18(a1)
		move.b	d0,$2A(a1)
		move.w	#0,$30(a1)
		move.b	#-1,$1A(a1)

loc_355D6:				
		dbf	d0,loc_3559C
		bra.w	loc_365C2
; ===========================================================================

locret_355DE:				
		rts	
; ===========================================================================

loc_355E0:				
		sf.b	(f_ss_no_checkpoint).w
		tst.b	(f_ss_2p).w
		bne.w	loc_365C2
		sf.b	(f_ss_hide_ringstogo).w
		sf.b	(f_ss_trigger_ringstogo).w
		move.w	#0,(v_ss_no_ringstogo_lifetime).w
		move.b	#0,$3A(a0)
		bra.w	loc_365C2
; ===========================================================================
byte_35604:	dc.b   3		; 0 
		dc.b   4		; 1
		dc.b   5		; 2
		dc.b   0		; 3
		dc.b $FF		; 4
		dc.b $11		; 5
		dc.b   8		; 6
		dc.b   0		; 7
		dc.b   8		; 8
		dc.b   2		; 9
		dc.b $FF		; 10
		dc.b   6		; 11
		dc.b $FF		; 12
		dc.b   0		; 13
word_35612:	dc.w   $C0		; 0 
		dc.w   $B8		; 1
		dc.w   $B0		; 2
		dc.w   $A0		; 3
		dc.w   $98		; 4
		dc.w   $88		; 5
; ===========================================================================

loc_3561E:				
		st.b	(f_ss_trigger_ringstogo).w
		bsr.w	loc_365EC
		bne.w	locret_356E4
		move.l	#Map_72D2,4(a1)
		move.w	#$41FA,2(a1)
		move.b	#$5A,(a1) ; 'Z'
		move.b	#4,1(a1)
		move.b	#1,$18(a1)

loc_35648:
		bset	#6,1(a1)
		move.b	#0,$F(a1)
		move.b	#$E,$24(a1)
		lea	$10(a1),a2
		move.w	#$5A,d1	; 'Z'
		move.w	#$38,d2	; '8'
		moveq	#0,d0
		moveq	#2,d3

loc_3566A:				
		move.w	d1,(a2)+
		move.w	d2,(a2)+
		move.w	d0,(a2)+
		subq.w	#8,d1
		dbf	d3,loc_3566A
		lea	(byte_35604)(pc),a3
		move.w	#$68,d1	; 'h'
		move.w	#$38,d2	; '8'

loc_35682:				
		move.b	(a3)+,d0
		bmi.s	loc_356A4
		bsr.w	loc_365EC
		bne.s	locret_356E4
		bsr.s	loc_356E6
		move.b	#$10,$24(a1)
		move.w	d1,8(a1)
		move.w	d2,$C(a1)
		move.b	d0,$1A(a1)
		addq.w	#8,d1
		bra.s	loc_35682
; ===========================================================================

loc_356A4:				
		lea	(word_35612)(pc),a2

loc_356A8:				
		move.b	(a3)+,d0
		bmi.s	loc_356C8
		bsr.w	loc_365EC
		bne.s	locret_356E4
		bsr.s	loc_356E6
		move.b	#$12,$24(a1)
		move.w	(a2)+,$2A(a1)
		move.w	d2,$C(a1)
		move.b	d0,$1A(a1)
		bra.s	loc_356A8
; ===========================================================================

loc_356C8:				
		move.b	(a3)+,d0
		bsr.w	loc_365EC
		bne.s	locret_356E4
		bsr.s	loc_356E6
		move.b	#$14,$24(a1)
		move.w	(a2)+,8(a1)
		move.w	d2,$C(a1)
		move.b	d0,$1A(a1)

locret_356E4:				
		rts	
; ===========================================================================

loc_356E6:				
		move.b	#$5A,(a1) ; 'Z'
		move.l	#Map_35E1E,4(a1)
		move.w	#$41A2,2(a1)
		move.b	#4,1(a1)
		move.b	#1,$18(a1)
		rts	
; ===========================================================================

loc_35706:				
		move.b	(f_ss_trigger_ringstogo).w,(f_ss_hide_ringstogo).w
		bne.s	locret_35714
		bsr.s	loc_35716
		bra.w	loc_357B2
; ===========================================================================

locret_35714:				
		rts	
; ===========================================================================

loc_35716:				
		move.w	(v_rings).w,d0
		cmpi.w	#1,(v_player_mode).w
		blt.s	loc_3572A
		beq.s	loc_3572E
		move.w	(v_rings_p2).w,d0
		bra.s	loc_3572E
; ===========================================================================

loc_3572A:				
		add.w	(v_rings_p2).w,d0

loc_3572E:				
		sub.w	(v_ss_ring_requirement).w,d0
		neg.w	d0
		bgt.s	loc_3574E
		moveq	#0,d0
		moveq	#1,d2
		addi.w	#1,(v_ss_no_ringstogo_lifetime).w
		cmpi.w	#$C,(v_ss_no_ringstogo_lifetime).w
		bcs.s	loc_3577A
		st.b	(f_ss_hide_ringstogo).w
		bra.s	loc_3577A
; ===========================================================================

loc_3574E:				
		moveq	#0,d1
		move.w	d0,d1
		moveq	#0,d0
		cmpi.w	#$64,d1	; 'd'
		blt.s	loc_35764

loc_3575A:				
		addi.w	#$100,d0
		subi.w	#$64,d1	; 'd'
		bgt.s	loc_3575A

loc_35764:				
		divu.w	#$A,d1
		lsl.w	#4,d1
		or.b	d1,d0
		swap	d1
		or.b	d1,d0
		move.w	#0,(v_ss_no_ringstogo_lifetime).w
		sf.b	(f_ss_hide_ringstogo).w

loc_3577A:				
		moveq	#1,d2
		lea	$10(a0),a1
		move.w	d0,(v_ss_ringstogo_bcd).w
		move.w	d0,d1
		andi.w	#$F,d1
		move.b	d1,5(a1)
		lsr.w	#4,d0
		beq.s	loc_357AC
		addq.w	#1,d2
		move.w	d0,d1
		andi.w	#$F,d1
		move.b	d1,$B(a1)
		lsr.w	#4,d0
		beq.s	loc_357AC
		addq.w	#1,d2
		andi.w	#$F,d0
		move.b	d0,$11(a1)

loc_357AC:				
		move.b	d2,$F(a0)
		rts	
; ===========================================================================

loc_357B2:				
		tst.b	(f_ss_no_checkpoint_msg).w
		bne.w	locret_357D0
		tst.b	(f_ss_hide_ringstogo).w
		bne.s	locret_357D0
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		cmpi.b	#6,d0
		bcs.w	loc_365BC

locret_357D0:				
		rts	
; ===========================================================================

loc_357D2:				
		moveq	#0,d0
		cmpi.w	#2,(v_ss_ringstogo_bcd).w
		bcc.s	loc_357DE
		moveq	#-8,d0

loc_357DE:				
		add.w	$2A(a0),d0
		move.w	d0,8(a0)
		bra.s	loc_357B2
; ===========================================================================

loc_357E8:				
		moveq	#0,d0
		cmpi.w	#2,(v_ss_ringstogo_bcd).w
		bcc.s	loc_357B2
		rts	
; ===========================================================================
byte_357F4:	dc.b   0		; 0
		dc.b   1		; 1
		dc.b   1		; 2
		dc.b   1		; 3
		dc.b   2		; 4
		dc.b   4		; 5
		dc.b   6		; 6
		dc.b   8		; 7
		dc.b   9		; 8
		dc.b $FF		; 9
; ===========================================================================

loc_357FE:				
		cmpi.b	#4,(v_ss_track_drawing_index).w
		bne.s	loc_3583C
		move.w	$2C(a0),d0
		move.b	byte_357F4(pc,d0.w),$1A(a0)
		bmi.w	loc_358C4
		addi.w	#1,$2C(a0)
		moveq	#0,d0
		move.b	$2A(a0),d0
		add.w	d0,d0
		add.w	$30(a0),d0
		move.b	byte_35846(pc,d0.w),9(a0)
		move.b	byte_35846+1(pc,d0.w),$D(a0)
		addi.w	#$E,$30(a0)
		bra.w	loc_365BC
; ===========================================================================

loc_3583C:				
		tst.b	$1A(a0)
		bpl.w	loc_365BC
		rts	
; ===========================================================================
byte_35846:	dc.b $F6,$F6		; 0
		dc.b $70,$5E		; 2
		dc.b $76,$58		; 4
		dc.b $7E,$56		; 6
		dc.b $88,$58		; 8
		dc.b $8E,$5E		; 10
		dc.b $F6,$F6		; 12
		dc.b $F6,$F6		; 14
		dc.b $6D,$5A		; 16
		dc.b $74,$54		; 18
		dc.b $7E,$50		; 20
		dc.b $8A,$54		; 22
		dc.b $92,$5A		; 24
		dc.b $F6,$F6		; 26
		dc.b $F6,$F6		; 28
		dc.b $6A,$58		; 30
		dc.b $72,$50		; 32
		dc.b $7E,$4C		; 34
		dc.b $8C,$50		; 36
		dc.b $94,$58		; 38
		dc.b $F6,$F6		; 40
		dc.b $F6,$F6		; 42
		dc.b $68,$56		; 44
		dc.b $70,$4C		; 46
		dc.b $7E,$48		; 48
		dc.b $8E,$4C		; 50
		dc.b $96,$56		; 52
		dc.b $F6,$F6		; 54
		dc.b $62,$5E		; 56
		dc.b $66,$50		; 58
		dc.b $70,$46		; 60
		dc.b $7E,$42		; 62
		dc.b $8E,$46		; 64
		dc.b $98,$50		; 66
		dc.b $9C,$5E		; 68
		dc.b $5C,$5A		; 70
		dc.b $62,$4A		; 72
		dc.b $70,$3E		; 74
		dc.b $7E,$38		; 76
		dc.b $8E,$3E		; 78
		dc.b $9C,$4A		; 80
		dc.b $A2,$5A		; 82
		dc.b $54,$54		; 84
		dc.b $5A,$3E		; 86
		dc.b $6A,$30		; 88
		dc.b $7E,$2A		; 90
		dc.b $94,$30		; 92
		dc.b $A4,$3E		; 94
		dc.b $AA,$54		; 96
		dc.b $42,$4A		; 98
		dc.b $4C,$28		; 100
		dc.b $62,$12		; 102
		dc.b $7E, $A		; 104
		dc.b $9C,$12		; 106
		dc.b $B2,$28		; 108
		dc.b $BC,$4A		; 110
		dc.b $16,$26		; 112
		dc.b $28,$FC		; 114
		dc.b $EC,$EC		; 116
		dc.b $EC,$EC		; 118
		dc.b $EC,$EC		; 120
		dc.b $D6,$FC		; 122
		dc.b $E8,$26		; 124
; ===========================================================================

loc_358C4:				
		cmpi.w	#$E8,8(a0)
		bne.w	loc_365C2
		moveq	#0,d0
		bsr.w	loc_35534
		sf.b	(f_ss_checkpoint_rainbow).w
		st.b	(f_ss_no_checkpoint_msg).w
		tst.b	(f_ss_2p).w
		beq.w	loc_35978
		move.w	#$A1,d0	
		jsr	(PlaySound).l
		addi.b	#$10,(v_ss_2p_bcd_score).w
		moveq	#0,d6
		addi.b	#1,(v_special_act).w
		move.w	#$C,d0
		move.w	(v_rings).w,d2
		cmp.w	(v_rings_p2).w,d2
		bgt.s	loc_3592A
		beq.s	loc_35942
		subi.b	#$10,(v_ss_2p_bcd_score).w
		addi.b	#1,(v_ss_2p_bcd_score).w
		move.w	#$E,d0
		tst.b	(v_console_region).w
		bpl.s	loc_35926
		move.w	#$14,d0

loc_35926:				
		move.w	#$2000,d6

loc_3592A:				
		move.w	#$80,d3	
		bsr.w	loc_35AB6
		add.w	d6,2(a1)
		add.w	d6,2(a2)
		bsr.w	loc_35DAA
		bra.w	loc_365C2
; ===========================================================================

loc_35942:				
		subi.b	#$10,(v_ss_2p_bcd_score).w
		move.w	#$10,d0
		bsr.w	loc_35DAA
		cmpi.b	#3,(v_special_act).w
		beq.s	loc_35966
		move.w	#$46,$2A(a0) ; 'F'
		move.b	#$A,$24(a0)
		rts	
; ===========================================================================

loc_35966:				
		bsr.w	loc_35A7A
		move.w	#$46,$2A(a0) ; 'F'
		move.b	#$C,$24(a0)
		rts	
; ===========================================================================

loc_35978:				
		move.w	#6,d1
		move.w	#$ED,d0	
		move.w	(v_rings).w,d2
		add.w	(v_rings_p2).w,d2
		cmp.w	(v_ss_ring_requirement).w,d2
		blt.s	loc_35996
		move.w	#4,d1
		move.w	#$A1,d0	

loc_35996:				
		jsr	(PlaySound).l
		move.w	d1,d0
		bsr.w	loc_35D52
		bra.w	loc_365C2
; ===========================================================================

loc_359A6:				
		subi.w	#1,$2A(a0)
		beq.s	loc_359B0
		rts	
; ===========================================================================

loc_359B0:				
		move.w	#$A,d0
		bsr.w	loc_35DAA
		bra.w	loc_365C2
; ===========================================================================

loc_359BC:				
		subi.w	#1,$2A(a0)
		beq.s	loc_359C6
		rts	
; ===========================================================================

loc_359C6:				
		st.b	(f_ss_chk_rings).w
		bra.w	loc_361CC
; ===========================================================================

loc_359CE:				
		cmpi.b	#$15,$1A(a0)
		bne.s	loc_35A1A
		move.w	$30(a0),d0
		tst.b	$2E(a0)
		bne.s	loc_359FE
		subi.w	#1,$C(a0)
		subi.w	#4,d0
		cmp.w	$C(a0),d0
		blt.s	loc_35A1A
		addi.w	#1,d0
		move.w	d0,$C(a0)
		st.b	$2E(a0)
		bra.s	loc_35A1A
; ===========================================================================

loc_359FE:				
		addi.w	#1,$C(a0)
		addi.w	#4,d0
		cmp.w	$C(a0),d0
		bgt.s	loc_35A1A
		subi.w	#1,d0
		move.w	d0,$C(a0)
		sf.b	$2E(a0)

loc_35A1A:				
		subi.w	#1,$2A(a0)
		bne.w	loc_365BC
		tst.b	$2F(a0)
		beq.s	loc_35A42

loc_35A2A:				
		move.w	#$F9,d0	
		jsr	(PlayMusic).l
		move.w	#$30,$2A(a0) ; '0'
		move.b	#$C,$24(a0)
		rts	
; ===========================================================================

loc_35A42:				
		cmpi.b	#$15,$1A(a0)
		bne.w	loc_365C2
		tst.w	$30(a0)
		beq.w	loc_365C2
		tst.b	(f_ss_2p).w
		beq.s	loc_35A72
		bsr.w	loc_35A7A
		cmpi.b	#3,(v_special_act).w
		beq.s	loc_35A2A
		move.w	#$A,d0
		bsr.w	loc_35DAA
		bra.w	loc_365C2
; ===========================================================================

loc_35A72:				
		bsr.w	loc_35CE2
		bra.w	loc_365C2
; ===========================================================================

loc_35A7A:				
		lea	(v_ss_2p_ring_buffer).w,a3
		moveq	#0,d0
		move.b	(v_special_act).w,d0
		subq.w	#1,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	(v_rings).w,(a3,d0.w)
		move.w	(v_rings_p2).w,2(a3,d0.w)
		move.w	#0,(v_rings).w
		move.w	#0,(v_rings_p2).w
		moveq	#0,d0
		move.w	d0,($FFFFB03C).w
		move.b	d0,(v_ost_maincharacter+ost_top_solid_bit).w
		move.w	d0,($FFFFB07C).w
		move.b	d0,(v_ost_sidekick+ost_top_solid_bit).w
		rts	
; ===========================================================================

loc_35AB6:				
		move.w	#$48,d4	; 'H'
		tst.b	(f_ss_2p).w
		beq.s	loc_35AC4
		move.w	#$1C,d4

loc_35AC4:				
		bsr.w	loc_365EC
		bne.w	locret_35B58
		move.b	#$5A,(a1) ; 'Z'
		move.b	#6,$24(a1)
		move.l	#Map_35E1E,4(a1)
		move.w	#$21A2,2(a1)
		move.b	#4,1(a1)
		move.b	#1,$18(a1)
		move.w	d3,8(a1)
		move.w	d4,$C(a1)
		move.w	#$46,$2A(a1) ; 'F'
		move.b	#$14,$1A(a1)
		movea.l	a1,a2
		bsr.w	loc_365EC
		bne.s	locret_35B58
		move.b	#$5A,(a1) ; 'Z'
		move.b	#6,$24(a1)
		move.l	#Map_35E1E,4(a1)
		move.w	#$21A2,2(a1)
		move.b	#4,1(a1)
		move.b	#0,$18(a1)
		move.w	d3,8(a1)
		move.w	d4,$C(a1)
		move.w	d4,$30(a1)
		move.w	#$46,$2A(a1) ; 'F'
		move.b	#$15,$1A(a1)
		cmpi.w	#6,d0
		bne.s	locret_35B58
		st.b	$2F(a1)
		bset	#1,1(a1)

locret_35B58:				
		rts	
; ===========================================================================

loc_35B5A:				
		subi.w	#1,$2A(a0)
		bne.w	loc_365BC
		cmpi.b	#$13,$1A(a0)
		bgt.w	loc_365C2
		move.b	#8,$24(a0)
		move.w	#8,$14(a0)
		move.w	8(a0),d1
		subi.w	#$80,d1	
		move.w	$C(a0),d2
		subi.w	#$70,d2	; 'p'
		bsr.w	loc_365D4
		move.b	d0,$26(a0)
		bra.w	loc_365BC
; ===========================================================================

loc_35B96:				
		moveq	#0,d0
		move.b	$26(a0),d0
		bsr.w	loc_365DA
		muls.w	$14(a0),d0
		muls.w	$14(a0),d1
		asr.w	#8,d0
		asr.w	#8,d1
		add.w	d1,8(a0)
		add.w	d0,$C(a0)
		cmpi.w	#0,8(a0)
		blt.w	loc_365C2
		cmpi.w	#$100,8(a0)
		bgt.w	loc_365C2
		cmpi.w	#0,$C(a0)
		blt.w	loc_365C2
		bra.w	loc_365BC
; ===========================================================================

loc_35BD6:				
		bsr.w	loc_365E6
		bne.s	locret_35C12
		move.b	d0,$1A(a1)
		move.l	#Map_72D2,4(a1)
		move.w	#$41FA,2(a1)
		move.b	#$5A,(a1) ; 'Z'
		move.b	#4,$24(a1)
		move.b	#4,1(a1)
		move.b	#1,$18(a1)
		move.w	d1,8(a1)
		move.w	d2,$C(a1)
		move.w	#$46,$2A(a1) ; 'F'

locret_35C12:				
		rts	
; ===========================================================================

loc_35C14:				
		lea	(off_35C62)(pc),a3
		adda.w	(a3,d0.w),a3

loc_35C1C:				
		move.b	(a3)+,d0
		bmi.s	locret_35C60
		bsr.w	loc_365E6
		bne.s	locret_35C60
		move.b	d0,$1A(a1)
		move.l	#Map_35E1E,4(a1)
		move.w	#$41A2,2(a1)
		move.b	#$5A,(a1) ; 'Z'
		move.b	#4,$24(a1)
		move.b	#4,1(a1)
		move.b	#1,$18(a1)
		move.w	d1,8(a1)
		move.w	d2,$C(a1)
		move.w	#$46,$2A(a1) ; 'F'
		addq.w	#8,d1
		bra.s	loc_35C1C
; ===========================================================================

locret_35C60:				
		rts	
; ===========================================================================
off_35C62:	dc.w byte_35C86-off_35C62; 0 
		dc.w byte_35C8A-off_35C62; 1
		dc.w byte_35C90-off_35C62; 2
		dc.w byte_35C96-off_35C62; 3
		dc.w byte_35C9A-off_35C62; 4
		dc.w byte_35CA1-off_35C62; 5
		dc.w byte_35CA8-off_35C62; 6
		dc.w byte_35CAD-off_35C62; 7
		dc.w byte_35CB3-off_35C62; 8
		dc.w byte_35CB9-off_35C62; 9
		dc.w byte_35CBF-off_35C62; 10
		dc.w byte_35CC4-off_35C62; 11
		dc.w byte_35CC8-off_35C62; 12
		dc.w byte_35CCE-off_35C62; 13
		dc.w byte_35CD3-off_35C62; 14
		dc.w byte_35CD5-off_35C62; 15
		dc.w byte_35CD9-off_35C62; 16
		dc.w byte_35CDB-off_35C62; 17
byte_35C86:	dc.b   0,  1,  2,$FF	; 0 
byte_35C8A:	dc.b   3,  4,  5,  0,  6,$FF; 0	
byte_35C90:	dc.b   7,  8,  8,  9,$11,$FF; 0	
byte_35C96:	dc.b   5,  8,  2,$FF	; 0 
byte_35C9A:	dc.b   1,  5,  8, $A,  0, $B,$FF; 0 
byte_35CA1:	dc.b  $C,  9, $D, $E,  1,  3,$FF; 0 
byte_35CA8:	dc.b  $F,  8,  6,  2,$FF; 0 
byte_35CAD:	dc.b $10,  4,  5,  6,$11,$FF; 0	
byte_35CB3:	dc.b   6,  8,  5,  4,  7,$FF; 0	
byte_35CB9:	dc.b  $F,  4,  9,  1,  6,$FF; 0	
byte_35CBF:	dc.b   2,  4,  1,$11,$FF; 0 
byte_35CC4:	dc.b $10,  4,  5,$FF	; 0 
byte_35CC8:	dc.b   2,$10,  4,  7,  1,$FF; 0	
byte_35CCE:	dc.b  $D,  9,  9,$11,$FF; 0 
byte_35CD3:	dc.b $11,$FF		; 0 
byte_35CD5:	dc.b $12,$12,$12,$FF	; 0 
byte_35CD9:	dc.b $13,$FF		; 0 
byte_35CDB:	dc.b   2, $D,  4,  9,  6,$FF; 0	
		dc.b   0 ;  
; ===========================================================================

loc_35CE2:				
		moveq	#0,d0
		move.w	#$54,d1	; 'T'
		move.w	#$6C,d2	; 'l'
		bsr.w	loc_35C14
		bsr.w	loc_365CE
		move.w	d1,d4
		move.w	d2,d5
		movea.w	d2,a3
		move.w	#$80,d1	
		cmpi.w	#2,d2
		beq.s	loc_35D08
		subi.w	#8,d1

loc_35D08:				
		move.w	#$6C,d2	; 'l'

loc_35D0C:				
		move.w	d4,d6
		lsr.w	#4,d4
		andi.w	#$F,d6
		move.b	d6,d0
		swap	d5
		bsr.w	loc_35BD6
		subi.w	#8,d1
		swap	d5
		dbf	d5,loc_35D0C
		moveq	#2,d0
		lea	(off_35DDE).l,a2
		adda.w	(a2,d0.w),a2
		move.w	#$6C,d2	; 'l'
		move.w	#$84,d1	
		cmpa.w	#2,a3
		bne.s	loc_35D44
		addi.w	#8,d1

loc_35D44:				
		moveq	#0,d0
		move.b	(a2)+,d0
		bmi.s	locret_35D50
		bsr.w	loc_35C14
		bra.s	loc_35D44
; ===========================================================================

locret_35D50:				
		rts	
; ===========================================================================

loc_35D52:				
		move.w	#$80,d3	
		bsr.w	loc_35AB6
		cmpi.w	#1,(v_player_mode).w
		ble.s	loc_35D6E
		addi.w	#$2000,2(a1)
		addi.w	#$2000,2(a2)

loc_35D6E:				
		move.w	#$74,d1	; 't'
		move.w	#$68,d2	; 'h'
		lea	(off_35DDE).l,a2
		adda.w	(a2,d0.w),a2
		cmpi.b	#4,d0
		beq.s	loc_35D8A
		move.w	#$5E,d1	; '^'

loc_35D8A:				
		moveq	#0,d0
		move.b	(a2)+,d0
		bmi.s	locret_35DA8
		cmpi.b	#2,d0
		bne.s	loc_35D9E
		move.w	#$5E,d1	; '^'
		move.w	#$7E,d2	; '~'

loc_35D9E:				
		bsr.w	loc_35C14
		addi.w	#8,d1
		bra.s	loc_35D8A
; ===========================================================================

locret_35DA8:				
		rts	
; ===========================================================================

loc_35DAA:				
		move.w	d0,d3
		subq.w	#8,d3
		lsr.w	#1,d3
		moveq	#0,d1
		move.b	byte_35DD6(pc,d3.w),d1
		move.w	#$48,d2	; 'H'
		lea	(off_35DDE).l,a2
		adda.w	(a2,d0.w),a2

loc_35DC4:				
		moveq	#0,d0
		move.b	(a2)+,d0
		bmi.s	locret_35DD4
		bsr.w	loc_35C14
		addi.w	#8,d1
		bra.s	loc_35DC4
; ===========================================================================

locret_35DD4:				
		rts	
; ===========================================================================
byte_35DD6:	dc.b $48		; 0
		dc.b $44		; 1
		dc.b $58		; 2
		dc.b $58		; 3
		dc.b $74		; 4
		dc.b $3C		; 5
		dc.b $58		; 6
		dc.b   0		; 7
off_35DDE:	dc.w byte_35DF6-off_35DDE; 0 
		dc.w byte_35DF7-off_35DDE; 1
		dc.w byte_35DFA-off_35DDE; 2
		dc.w byte_35DFC-off_35DDE; 3
		dc.w byte_35E01-off_35DDE; 4
		dc.w byte_35E05-off_35DDE; 5
		dc.w byte_35E09-off_35DDE; 6
		dc.w byte_35E0C-off_35DDE; 7
		dc.w byte_35E0F-off_35DDE; 8
		dc.w byte_35E11-off_35DDE; 9
		dc.w byte_35E16-off_35DDE; 10
		dc.w byte_35E19-off_35DDE; 11
byte_35DF6:	dc.b $FF		; 0 
byte_35DF7:	dc.b   2,$1C,$FF	; 0 
byte_35DFA:	dc.b   4,$FF		; 0 
byte_35DFC:	dc.b   6,  8,  2,$1E,$FF; 0 
byte_35E01:	dc.b  $A,$20, $A,$FF	; 0 
byte_35E05:	dc.b  $C,  2, $E,$FF	; 0 
byte_35E09:	dc.b $10, $E,$FF	; 0 
byte_35E0C:	dc.b $12, $E,$FF	; 0 
byte_35E0F:	dc.b $14,$FF		; 0 
byte_35E11:	dc.b $16,$18,$16,$1A,$FF; 0 
byte_35E16:	dc.b $22, $E,$FF	; 0 
byte_35E19:	dc.b   2,$24,$26,$1C,$FF; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_35E1E:				
		dc.w word_35E4A-Map_35E1E; 0
		dc.w word_35E54-Map_35E1E; 1
		dc.w word_35E5E-Map_35E1E; 2
		dc.w word_35E68-Map_35E1E; 3
		dc.w word_35E72-Map_35E1E; 4
		dc.w word_35E7C-Map_35E1E; 5
		dc.w word_35E86-Map_35E1E; 6
		dc.w word_35E90-Map_35E1E; 7
		dc.w word_35E9A-Map_35E1E; 8
		dc.w word_35EA4-Map_35E1E; 9
		dc.w word_35EAE-Map_35E1E; 10
		dc.w word_35EB8-Map_35E1E; 11
		dc.w word_35EC2-Map_35E1E; 12
		dc.w word_35ECC-Map_35E1E; 13
		dc.w word_35ED6-Map_35E1E; 14
		dc.w word_35EE0-Map_35E1E; 15
		dc.w word_35EEA-Map_35E1E; 16
		dc.w word_35EF4-Map_35E1E; 17
		dc.w word_35EFE-Map_35E1E; 18
		dc.w word_35F08-Map_35E1E; 19
		dc.w word_35F12-Map_35E1E; 20
		dc.w word_35F54-Map_35E1E; 21
word_35E4A:	dc.w 1			
		dc.w $F801,$8004,$8002,$FFFC; 0
word_35E54:	dc.w 1			
		dc.w $F801,$8002,$8001,$FFFC; 0
word_35E5E:	dc.w 1			
		dc.w $F801,$8014,$800A,$FFFC; 0
word_35E68:	dc.w 1			
		dc.w $F801,$8010,$8008,$FFFC; 0
word_35E72:	dc.w 1			
		dc.w $F801,$8008,$8004,$FFFC; 0
word_35E7C:	dc.w 1			
		dc.w $F801,$800C,$8006,$FFFC; 0
word_35E86:	dc.w 1			
		dc.w $F801,$8012,$8009,$FFFC; 0
word_35E90:	dc.w 1			
		dc.w $F801,$8000,$8000,$FFFC; 0
word_35E9A:	dc.w 1			
		dc.w $F801,$806A,$8035,$FFFC; 0
word_35EA4:	dc.w 1			
		dc.w $F801,$800A,$8005,$FFFC; 0
word_35EAE:	dc.w 1			
		dc.w $F801,$8016,$800B,$FFFC; 0
word_35EB8:	dc.w 1			
		dc.w $F801,$8006,$8003,$FFFC; 0
word_35EC2:	dc.w 1			
		dc.w $F801,$823D,$811E,$FFFC; 0
word_35ECC:	dc.w 1			
		dc.w $F801,$823F,$811F,$FFFC; 0
word_35ED6:	dc.w 1			
		dc.w $F801,$8241,$8120,$FFFC; 0
word_35EE0:	dc.w 1			
		dc.w $F801,$8243,$8121,$FFFC; 0
word_35EEA:	dc.w 1			
		dc.w $F801,$8245,$8122,$FFFC; 0
word_35EF4:	dc.w 1			
		dc.w $F801,$8018,$800C,$FFFC; 0
word_35EFE:	dc.w 1			
		dc.w $F801,$800E,$8007,$FFFC; 0
word_35F08:	dc.w 1			
		dc.w $FC04,$8247,$8123,$FFF8; 0
word_35F12:	dc.w 8			
		dc.w $E403,$801A,$800D,$FFD0; 0
		dc.w $EC0F,$801E,$800F,$FFD8; 4
		dc.w $EC03,$802E,$8017,$FFF8; 8
		dc.w  $C0D,$8032,$8019,$FFE0; 12
		dc.w $EC03,$882E,$8817,	   0; 16
		dc.w  $C0D,$8832,$8819,	   0; 20
		dc.w $EC0F,$881E,$880F,	   8; 24
		dc.w $E403,$881A,$880D,	 $28; 28
word_35F54:	dc.w 4			
		dc.w $F00B,$803A,$801D,$FFE8; 0
		dc.w $1008,$8046,$8023,$FFE8; 4
		dc.w	$A,$8049,$8024,	   0; 8
		dc.w $E806,$8052,$8029,	   0; 12
; ===========================================================================

loc_35F76:				
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.w	Pal_SSEmeralds(pc,d0.w),($FFFFFB76).w
		move.w	Pal_SSEmeralds+2(pc,d0.w),($FFFFFB78).w
		move.w	Pal_SSEmeralds+4(pc,d0.w),($FFFFFB7A).w
		rts	
; ===========================================================================
		incfile Pal_SSEmeralds
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_35FBC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_35FCA(pc,d0.w),d1
		jmp	off_35FCA(pc,d1.w)
; ===========================================================================
off_35FCA:	dc.w loc_35FD4-off_35FCA; 0 
		dc.w loc_36022-off_35FCA
		dc.w loc_3533A-off_35FCA
		dc.w loc_36160-off_35FCA
		dc.w loc_36172-off_35FCA
; ===========================================================================

loc_35FD4:				
		st.b	(f_ss_no_checkpoint_msg).w
		st.b	(f_ss_pause_only).w
		subi.w	#1,$2A(a0)
		cmpi.w	#-$3C,$2A(a0)
		beq.s	loc_35FEC
		rts	
; ===========================================================================

loc_35FEC:				
		moveq	#0,d0
		move.b	(v_special_stage).w,d0
		bsr.s	loc_35F76
		addq.b	#2,$24(a0)
		move.l	#Map_3625A,4(a0)
		move.w	#$6174,2(a0)
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.w	#$36,$30(a0) ; '6'
		move.b	#$40,$26(a0) ; '@'
		bsr.w	loc_3529C

loc_36022:				
		bsr.w	loc_360F0
		bsr.w	loc_3512A
		bsr.w	loc_3603C
		lea	(off_36228).l,a1
		bsr.w	loc_3539E
		bra.w	loc_365BC
; ===========================================================================

loc_3603C:				
		move.w	d7,-(sp)
		moveq	#0,d2
		moveq	#0,d3
		moveq	#0,d4
		moveq	#0,d5
		moveq	#0,d6
		moveq	#0,d7
		movea.l	(v_ss_ctrl_record_buffer_end).w,a1
		adda.l	#2,a1
		move.w	$30(a0),d0
		subq.w	#1,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		move.b	(a1,d0.w),d2
		move.b	1(a1,d0.w),d3
		move.b	2(a1,d0.w),d4
		move.b	3(a1,d0.w),d5
		move.w	d5,d6
		swap	d5
		move.w	d6,d5
		move.w	d4,d6
		swap	d4
		move.w	d6,d4
		bpl.s	loc_36088
		cmpi.b	#$48,d3	; 'H'
		bcs.s	loc_36088
		ext.w	d3

loc_36088:				
		move.w	d4,d6
		add.w	d4,d4
		add.w	d6,d4
		lsr.w	#2,d4
		move.w	d5,d6
		add.w	d5,d5
		add.w	d6,d5
		lsr.w	#2,d5
		move.b	$26(a0),d0
		bsr.w	loc_365DA
		muls.w	d4,d1
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,8(a0)
		move.w	d0,$C(a0)
		move.b	d1,$3A(a0)
		move.b	d0,$3B(a0)
		swap	d4
		swap	d5
		movea.l	$34(a0),a1
		move.b	$26(a0),d0
		bsr.w	loc_365DA
		move.w	d4,d6
		lsr.w	#2,d6
		add.w	d6,d4
		muls.w	d4,d1
		move.w	d5,d6
		asr.w	#2,d6
		add.w	d6,d5
		muls.w	d5,d0
		asr.l	#8,d0
		asr.l	#8,d1
		add.w	d2,d1
		add.w	d3,d0
		move.w	d1,8(a1)
		move.w	d0,$C(a1)
		move.w	(sp)+,d7
		rts	
; ===========================================================================

loc_360F0:				
		cmpi.b	#3,$1C(a0)
		bcs.s	locret_36140
		tst.b	$3E(a0)
		bne.s	loc_3610C
		move.w	#$F9,d0	
		jsr	(PlayMusic).l
		st.b	$3E(a0)

loc_3610C:				
		cmpi.b	#6,$1C(a0)
		bcs.s	locret_36140
		move.w	(v_rings).w,d2
		add.w	(v_rings_p2).w,d2
		cmp.w	(v_ss_ring_requirement).w,d2
		blt.s	loc_36142
		cmpi.b	#9,$1C(a0)
		bcs.s	locret_36140
		move.w	#$63,$2A(a0) ; 'c'
		move.b	#8,$24(a0)
		move.w	#$9D,d0	
		jsr	(PlayMusic).l

locret_36140:				
		rts	
; ===========================================================================

loc_36142:				
		move.l	#0,(v_ss_new_speed_factor).w
		move.b	#6,$24(a0)
		move.w	#$4F,$2A(a0) ; 'O'
		move.w	#6,d0
		bsr.w	loc_35D6E
		rts	
; ===========================================================================

loc_36160:				
		subi.w	#1,$2A(a0)
		bpl.w	loc_365BC
		st.b	(f_ss_chk_rings).w
		bra.w	loc_361CC
; ===========================================================================

loc_36172:				
		subi.w	#1,$2A(a0)
		bpl.s	loc_361A4
		moveq	#0,d0
		move.b	(v_special_stage).w,d0
		lea	(v_emerald_list).w,a0
		st.b	(a0,d0.w)
		st.b	(f_got_emerald).w
		addi.b	#1,(v_special_stage).w
		addi.b	#1,(v_emeralds).w
		st.b	(f_ss_chk_rings).w
		bsr.w	loc_361CC
		move.l	(sp)+,d0
		rts	
; ===========================================================================

loc_361A4:				
		addi.b	#1,$3C(a0)
		moveq	#0,d0
		moveq	#0,d2
		move.b	$3B(a0),d2
		move.b	$3C(a0),d0
		lsr.w	#2,d0
		andi.w	#3,d0
		add.b	byte_361C8(pc,d0.w),d2
		move.w	d2,$C(a0)
		bra.w	loc_365BC
; ===========================================================================
byte_361C8:	dc.b $FF		; 0
		dc.b   0		; 1
		dc.b   1		; 2
		dc.b   0		; 3
; ===========================================================================

loc_361CC:				
		movea.l	#$FFB000,a1
		move.w	#$1FF,d0
		moveq	#0,d1

loc_361D8:				
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		move.l	d1,(a1)+
		dbf	d0,loc_361D8
		lea	(v_sprite_buffer).w,a1
		moveq	#0,d0
		move.w	#$A0,d1	

loc_361EE:				
		move.l	d0,(a1)+
		dbf	d1,loc_361EE
		rts	
; ===========================================================================
	; Unused/dead code; a0 = object
		cmpi.b	#$B,(v_ss_track_drawing_index).w
		bcs.s	loc_36208
		subi.l	#$4445,$30(a0)
		bra.s	loc_36210
; ===========================================================================

loc_36208:				
		subi.l	#$4444,$30(a0)

loc_36210:				
		move.w	$30(a0),d0
		cmpi.w	#$1D,d0
		ble.s	loc_3621C
		moveq	#$1E,d0

loc_3621C:				
		lea	(byte_35180)(pc),a1
		move.b	(a1,d0.w),$1C(a0)
		rts	
	
	; end of unused/dead code	
; ===========================================================================
off_36228:	dc.w byte_3623C-off_36228; 0 
		dc.w byte_3623F-off_36228; 1
		dc.w byte_36242-off_36228; 2
		dc.w byte_36245-off_36228; 3
		dc.w byte_36248-off_36228; 4
		dc.w byte_3624B-off_36228; 5
		dc.w byte_3624E-off_36228; 6
		dc.w byte_36251-off_36228; 7
		dc.w byte_36254-off_36228; 8
		dc.w byte_36257-off_36228; 9
byte_3623C:	dc.b  $B,  0,$FF	; 0 
byte_3623F:	dc.b  $B,  1,$FF	; 0 
byte_36242:	dc.b  $B,  2,$FF	; 0 
byte_36245:	dc.b  $B,  3,$FF	; 0 
byte_36248:	dc.b  $B,  4,$FF	; 0 
byte_3624B:	dc.b  $B,  5,$FF	; 0 
byte_3624E:	dc.b  $B,  6,$FF	; 0 
byte_36251:	dc.b  $B,  7,$FF	; 0 
byte_36254:	dc.b  $B,  8,$FF	; 0 
byte_36257:	dc.b  $B,  9,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3625A:				
		dc.w word_3626E-Map_3625A; 0
		dc.w word_36278-Map_3625A; 1
		dc.w word_36282-Map_3625A; 2
		dc.w word_3628C-Map_3625A; 3
		dc.w word_36296-Map_3625A; 4
		dc.w word_362A0-Map_3625A; 5
		dc.w word_362AA-Map_3625A; 6
		dc.w word_362B4-Map_3625A; 7
		dc.w word_362BE-Map_3625A; 8
		dc.w word_362C8-Map_3625A; 9
word_3626E:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC; 0
word_36278:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC; 0
word_36282:	dc.w 1			
		dc.w $FC00,$8002,$8001,$FFFC; 0
word_3628C:	dc.w 1			
		dc.w $F805,$8003,$8001,$FFF8; 0
word_36296:	dc.w 1			
		dc.w $F805,$8007,$8003,$FFF8; 0
word_362A0:	dc.w 1			
		dc.w $F805,$800B,$8005,$FFF8; 0
word_362AA:	dc.w 1			
		dc.w $F805,$800F,$8007,$FFF8; 0
word_362B4:	dc.w 1			
		dc.w $F40A,$8013,$8009,$FFF4; 0
word_362BE:	dc.w 1			
		dc.w $F40A,$801C,$800E,$FFF4; 0
word_362C8:	dc.w 1			
		dc.w $F40A,$8025,$8012,$FFF4; 0
off_362D2:	dc.w byte_362E8-off_362D2; 0 
		dc.w byte_362EE-off_362D2; 1
		dc.w byte_362F4-off_362D2; 2
		dc.w byte_362FA-off_362D2; 3
		dc.w byte_36300-off_362D2; 4
		dc.w byte_36306-off_362D2; 5
		dc.w byte_3630C-off_362D2; 6
		dc.w byte_36312-off_362D2; 7
		dc.w byte_36318-off_362D2; 8
		dc.w byte_3631E-off_362D2; 9
		dc.w byte_36324-off_362D2; 10
byte_362E8:	dc.b   5,  0, $A,$14, $A,$FF; 0	
byte_362EE:	dc.b   5,  1, $B,$15, $B,$FF; 0	
byte_362F4:	dc.b   5,  2, $C,$16, $C,$FF; 0	
byte_362FA:	dc.b   5,  3, $D,$17, $D,$FF; 0	
byte_36300:	dc.b   5,  4, $E,$18, $E,$FF; 0	
byte_36306:	dc.b   5,  5, $F,$19, $F,$FF; 0	
byte_3630C:	dc.b   5,  6,$10,$1A,$10,$FF; 0	
byte_36312:	dc.b   5,  7,$11,$1B,$11,$FF; 0	
byte_36318:	dc.b   5,  8,$12,$1C,$12,$FF; 0	
byte_3631E:	dc.b   5,  9,$13,$1D,$13,$FF; 0	
byte_36324:	dc.b   1,$1E,$1F,$20,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3632A:				
		dc.w word_3636C-Map_3632A; 0
		dc.w word_36376-Map_3632A; 1
		dc.w word_36380-Map_3632A; 2
		dc.w word_3638A-Map_3632A; 3
		dc.w word_36394-Map_3632A; 4
		dc.w word_3639E-Map_3632A; 5
		dc.w word_363A8-Map_3632A; 6
		dc.w word_363B2-Map_3632A; 7
		dc.w word_363BC-Map_3632A; 8
		dc.w word_363C6-Map_3632A; 9
		dc.w word_363D0-Map_3632A; 10
		dc.w word_363DA-Map_3632A; 11
		dc.w word_363E4-Map_3632A; 12
		dc.w word_363EE-Map_3632A; 13
		dc.w word_363F8-Map_3632A; 14
		dc.w word_36402-Map_3632A; 15
		dc.w word_3640C-Map_3632A; 16
		dc.w word_36416-Map_3632A; 17
		dc.w word_36420-Map_3632A; 18
		dc.w word_3642A-Map_3632A; 19
		dc.w word_36434-Map_3632A; 20
		dc.w word_3643E-Map_3632A; 21
		dc.w word_36448-Map_3632A; 22
		dc.w word_36452-Map_3632A; 23
		dc.w word_3645C-Map_3632A; 24
		dc.w word_36466-Map_3632A; 25
		dc.w word_36470-Map_3632A; 26
		dc.w word_3647A-Map_3632A; 27
		dc.w word_36484-Map_3632A; 28
		dc.w word_3648E-Map_3632A; 29
		dc.w word_36498-Map_3632A; 30
		dc.w word_364AA-Map_3632A; 31
		dc.w word_364BC-Map_3632A; 32
word_3636C:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC; 0
word_36376:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC; 0
word_36380:	dc.w 1			
		dc.w $FC00,$8002,$8001,$FFFC; 0
word_3638A:	dc.w 1			
		dc.w $F805,$8003,$8001,$FFF8; 0
word_36394:	dc.w 1			
		dc.w $F805,$8007,$8003,$FFF8; 0
word_3639E:	dc.w 1			
		dc.w $F805,$800B,$8005,$FFF8; 0
word_363A8:	dc.w 1			
		dc.w $F805,$800F,$8007,$FFF8; 0
word_363B2:	dc.w 1			
		dc.w $F40A,$8013,$8009,$FFF4; 0
word_363BC:	dc.w 1			
		dc.w $F40A,$801C,$800E,$FFF4; 0
word_363C6:	dc.w 1			
		dc.w $F40A,$8025,$8012,$FFF4; 0
word_363D0:	dc.w 1			
		dc.w $FC00,$802E,$8017,$FFFC; 0
word_363DA:	dc.w 1			
		dc.w $FC00,$802F,$8017,$FFFC; 0
word_363E4:	dc.w 1			
		dc.w $FC00,$8030,$8018,$FFFC; 0
word_363EE:	dc.w 1			
		dc.w $F801,$8031,$8018,$FFFC; 0
word_363F8:	dc.w 1			
		dc.w $F805,$8033,$8019,$FFF8; 0
word_36402:	dc.w 1			
		dc.w $F805,$8037,$801B,$FFF8; 0
word_3640C:	dc.w 1			
		dc.w $F805,$803B,$801D,$FFF8; 0
word_36416:	dc.w 1			
		dc.w $F406,$803F,$801F,$FFF8; 0
word_36420:	dc.w 1			
		dc.w $F406,$8045,$8022,$FFF8; 0
word_3642A:	dc.w 1			
		dc.w $F40A,$804B,$8025,$FFF4; 0
word_36434:	dc.w 1			
		dc.w $FC00,$8054,$802A,$FFFC; 0
word_3643E:	dc.w 1			
		dc.w $FC00,$8055,$802A,$FFFC; 0
word_36448:	dc.w 1			
		dc.w $FC00,$8056,$802B,$FFFC; 0
word_36452:	dc.w 1			
		dc.w $F801,$8057,$802B,$FFFC; 0
word_3645C:	dc.w 1			
		dc.w $F801,$8059,$802C,$FFFC; 0
word_36466:	dc.w 1			
		dc.w $F801,$805B,$802D,$FFFC; 0
word_36470:	dc.w 1			
		dc.w $F801,$805D,$802E,$FFFC; 0
word_3647A:	dc.w 1			
		dc.w $F402,$805F,$802F,$FFFC; 0
word_36484:	dc.w 1			
		dc.w $F402,$8062,$8031,$FFFC; 0
word_3648E:	dc.w 1			
		dc.w $F402,$8065,$8032,$FFFC; 0
word_36498:	dc.w 2			
		dc.w $F007,$8000,$8000,$FFF0; 0
		dc.w $F805,$8008,$8004,	   0; 4
word_364AA:	dc.w 2			
		dc.w $F00E,$800C,$8006,$FFF0; 0
		dc.w  $800,$8018,$800C,$FFF8; 4
word_364BC:	dc.w 2			
		dc.w $F002,$8019,$800C,$FFF0; 0
		dc.w $F80A,$801C,$800E,$FFF8; 4
off_364CE:	dc.w byte_364E4-off_364CE; 0 
		dc.w byte_364E7-off_364CE; 1
		dc.w byte_364EA-off_364CE; 2
		dc.w byte_364ED-off_364CE; 3
		dc.w byte_364F0-off_364CE; 4
		dc.w byte_364F3-off_364CE; 5
		dc.w byte_364F6-off_364CE; 6
		dc.w byte_364F9-off_364CE; 7
		dc.w byte_364FC-off_364CE; 8
		dc.w byte_364FF-off_364CE; 9
		dc.w byte_36502-off_364CE; 10
byte_364E4:	dc.b  $B,  0,$FF	; 0 
byte_364E7:	dc.b  $B,  1,$FF	; 0 
byte_364EA:	dc.b  $B,  2,$FF	; 0 
byte_364ED:	dc.b  $B,  3,$FF	; 0 
byte_364F0:	dc.b  $B,  4,$FF	; 0 
byte_364F3:	dc.b  $B,  5,$FF	; 0 
byte_364F6:	dc.b  $B,  6,$FF	; 0 
byte_364F9:	dc.b  $B,  7,$FF	; 0 
byte_364FC:	dc.b  $B,  8,$FF	
byte_364FF:	dc.b  $B,  9,$FF	; 0 
byte_36502:	dc.b   2, $A, $B, $C,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_36508:				
		dc.w word_36522-Map_36508; 0
		dc.w word_3652C-Map_36508; 1
		dc.w word_36536-Map_36508; 2
		dc.w word_36540-Map_36508; 3
		dc.w word_3654A-Map_36508; 4
		dc.w word_36554-Map_36508; 5
		dc.w word_3655E-Map_36508; 6
		dc.w word_36568-Map_36508; 7
		dc.w word_36572-Map_36508; 8
		dc.w word_3657C-Map_36508; 9
		dc.w word_36586-Map_36508; 10
		dc.w word_36590-Map_36508; 11
		dc.w word_365A2-Map_36508; 12
word_36522:	dc.w 1			
		dc.w $FC00,$8000,$8000,$FFFC; 0
word_3652C:	dc.w 1			
		dc.w $FC00,$8001,$8000,$FFFC; 0
word_36536:	dc.w 1			
		dc.w $F805,$8002,$8001,$FFF8; 0
word_36540:	dc.w 1			
		dc.w $F805,$8006,$8003,$FFF8; 0
word_3654A:	dc.w 1			
		dc.w $F805,$800A,$8005,$FFF8; 0
word_36554:	dc.w 1			
		dc.w $F40A,$800E,$8007,$FFF4; 0
word_3655E:	dc.w 1			
		dc.w $F40A,$8017,$800B,$FFF4; 0
word_36568:	dc.w 1			
		dc.w $F00F,$8020,$8010,$FFF0; 0
word_36572:	dc.w 1			
		dc.w $F00F,$8030,$8018,$FFF0; 0
word_3657C:	dc.w 1			
		dc.w $F00F,$8040,$8020,$FFF0; 0
word_36586:	dc.w 1			
		dc.w $F00F,$8000,$8000,$FFF0; 0
word_36590:	dc.w 2			
		dc.w $E80F,$8010,$8008,$FFE8; 0
		dc.w $E80F,$8010,$8008,$FFF8; 4
word_365A2:	dc.w 3			
		dc.w $E00F,$8020,$8010,$FFD8; 0
		dc.w $D80F,$9020,$9010,$FFF0; 4
		dc.w $E00F,$8820,$8810,	   8; 8
; ===========================================================================

loc_365BC:				
		jmp	DisplaySprite
; ===========================================================================

loc_365C2:				
		jmp	DeleteObject
; ===========================================================================

loc_365C8:				
		jmp	AnimateSprite
; ===========================================================================

loc_365CE:				
		jmp	(loc_76FA).l
; ===========================================================================

loc_365D4:				
		jmp	(CalcAngle).l
; ===========================================================================

loc_365DA:				
		jmp	(CalcSine).l
; ===========================================================================

loc_365E0:				
		jmp	ObjectFall
; ===========================================================================

loc_365E6:				
		jmp	(loc_6FA4).l
; ===========================================================================

loc_365EC:				
		jmp	(sub_6F8E).l
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================

loc_365F4:				
		moveq	#0,d0
		move.b	$28(a0),d0

loc_365FA:				
		move.w	off_36628(pc,d0.w),d0
		lea	off_36628(pc,d0.w),a1

loc_36602:				
		move.l	(a1)+,4(a0)
		move.w	(a1)+,2(a0)
		jsr	Adjust2PArtPointer
		move.b	(a1)+,d0
		or.b	d0,1(a0)
		move.b	(a1)+,$18(a0)
		move.b	(a1)+,$19(a0)
		move.b	(a1),$20(a0)
		addq.b	#2,$24(a0)
		rts	
; ===========================================================================
off_36628:	dc.w off_36A3E-off_36628; 0 
		dc.w off_36CC4-off_36628; 1
		dc.w off_36CCE-off_36628; 2
		dc.w off_36CD8-off_36628; 3
		dc.w off_36EE6-off_36628; 4
		dc.w off_3707C-off_36628; 5
		dc.w Sprite_37322-off_36628; 6
		dc.w off_3766E-off_36628; 7
		dc.w off_37764-off_36628; 8
		dc.w off_37888-off_36628; 9
		dc.w off_3776E-off_36628; 10
		dc.w off_37B32-off_36628; 11
		dc.w off_37B3C-off_36628; 12
		dc.w off_37B46-off_36628; 13
		dc.w off_37778-off_36628; 14
		dc.w off_37D7E-off_36628; 15
		dc.w off_37782-off_36628; 16
		dc.w off_37FE8-off_36628; 17
		dc.w off_382F0-off_36628; 18
		dc.w off_382FA-off_36628; 19
		dc.w off_385C0-off_36628; 20
		dc.w off_385CA-off_36628; 21
		dc.w off_388AC-off_36628; 22
		dc.w off_38A86-off_36628; 23
		dc.w off_3778C-off_36628; 24
		dc.w off_38CAE-off_36628; 25
		dc.w off_37796-off_36628; 26
		dc.w off_391EC-off_36628; 27
		dc.w off_391F6-off_36628; 28
		dc.w off_39200-off_36628; 29
		dc.w off_3920A-off_36628; 30
		dc.w off_377A0-off_36628; 31
		dc.w off_393C2-off_36628; 32
		dc.w off_39576-off_36628; 33
		dc.w off_39580-off_36628; 34
		dc.w off_377AA-off_36628; 35
		dc.w off_39DCE-off_36628; 36
		dc.w off_377B4-off_36628; 37
		dc.w off_3A58A-off_36628; 38
		dc.w off_3A594-off_36628; 39
		dc.w off_3AFC8-off_36628; 40
		dc.w off_3AFC8-off_36628; 41
		dc.w off_3AFC8-off_36628; 42
		dc.w off_3BBFE-off_36628; 43
		dc.w off_3BBFE-off_36628; 44
		dc.w off_3B322-off_36628; 45
		dc.w off_3AFD2-off_36628; 46
		dc.w off_3B322-off_36628; 47
		dc.w off_3B322-off_36628; 48
		dc.w off_3B322-off_36628; 49
		dc.w off_3B3AC-off_36628; 50
		dc.w off_3B4DE-off_36628; 51
		dc.w off_3B4DE-off_36628; 52
		dc.w off_3B818-off_36628; 53
		dc.w off_3B818-off_36628; 54
		dc.w off_3B818-off_36628; 55
		dc.w off_3B818-off_36628; 56
		dc.w off_3B8DA-off_36628; 57
		dc.w off_3BA36-off_36628; 58
		dc.w off_3BB0E-off_36628; 59
		dc.w off_3BB66-off_36628; 60
		dc.w off_3BB96-off_36628; 61
		dc.w off_3BBFE-off_36628; 62
		dc.w off_3BD24-off_36628; 63
		dc.w off_3BD24-off_36628; 64
		dc.w off_3BE2C-off_36628; 65
		dc.w off_3BECE-off_36628; 66
		dc.w off_3C08E-off_36628; 67
		dc.w off_3C276-off_36628; 68
		dc.w off_3C3B8-off_36628; 69
		dc.w Sprite_3C3D6-off_36628; 70
		dc.w off_377BE-off_36628; 71
		dc.w off_3C438-off_36628; 72
		dc.w off_3CC80-off_36628; 73
		dc.w off_3CC8A-off_36628; 74
		dc.w off_3CC94-off_36628; 75
		dc.w off_3CC94-off_36628; 76
		dc.w off_3CC94-off_36628; 77
		dc.w off_3CC94-off_36628; 78
		dc.w off_3CC94-off_36628; 79
		dc.w off_3CC9E-off_36628; 80
		dc.w off_3CCA8-off_36628; 81
		dc.w off_39DD8-off_36628; 82
		dc.w off_3D0B2-off_36628; 83
		dc.w off_3D0BC-off_36628; 84
		dc.w off_3D0C6-off_36628; 85
		dc.w off_3D440-off_36628; 86
; ===========================================================================

loc_366D6:				
		moveq	#0,d0
		moveq	#0,d1
		lea	($FFFFB000).w,a1
		move.w	8(a0),d2
		sub.w	8(a1),d2
		move.w	d2,d4
		bpl.s	loc_366EC
		neg.w	d4

loc_366EC:				
		lea	($FFFFB040).w,a2
		move.w	8(a0),d3
		sub.w	8(a2),d3
		move.w	d3,d5
		bpl.s	loc_366FE
		neg.w	d5

loc_366FE:				
		cmp.w	d5,d4
		bls.s	loc_36706
		movea.l	a2,a1
		move.w	d3,d2

loc_36706:				
		tst.w	d2
		bpl.s	loc_3670C
		addq.w	#2,d0

loc_3670C:				
		move.w	$C(a0),d3
		sub.w	$C(a1),d3
		bcc.s	locret_36718
		addq.w	#2,d1

locret_36718:				
		rts	
; ===========================================================================

loc_3671A:				
		move.w	$10(a0),d2
		bpl.s	loc_3672C
		neg.w	d0
		cmp.w	d0,d2
		bcc.s	loc_36732
		move.w	d0,d2
		bra.w	loc_36732
; ===========================================================================

loc_3672C:				
		cmp.w	d0,d2
		bls.s	loc_36732
		move.w	d0,d2

loc_36732:				
		move.w	$12(a0),d3
		bpl.s	loc_36744
		neg.w	d1
		cmp.w	d1,d3
		bcc.s	loc_3674A
		move.w	d1,d3
		bra.w	loc_3674A
; ===========================================================================

loc_36744:				
		cmp.w	d1,d3
		bls.s	loc_3674A
		move.w	d1,d3

loc_3674A:				
		move.w	d2,$10(a0)
		move.w	d3,$12(a0)
		rts	
; ===========================================================================

loc_36754:				
		moveq	#0,d0
		move.w	d0,$10(a0)
		move.w	d0,$12(a0)
		rts	
; ===========================================================================

loc_36760:				
		move.w	8(a0),d2
		add.w	d0,d2
		move.w	d2,8(a1)
		move.w	$C(a0),d3
		add.w	d1,d3
		move.w	d3,$C(a1)
		rts	
; ===========================================================================

loc_36776:				
		move.w	(v_tornado_x_vel).w,d0
		add.w	d0,8(a0)
		move.w	(v_tornado_y_vel).w,d0
		add.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_36788:				
		tst.w	(f_two_player).w
		beq.s	loc_36794
		jmp	DisplaySprite
; ===========================================================================

loc_36794:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		bmi.w	loc_3691E
		jmp	DisplaySprite
; ===========================================================================

loc_367AA:				
		move.b	1(a0),d0
		andi.b	#-4,d0
		move.b	$22(a0),d2
		andi.b	#-4,d2
		move.b	1(a1),d1
		andi.b	#3,d1
		or.b	d1,d0
		or.b	d1,d2
		move.b	d0,1(a0)
		move.b	d2,$22(a0)
		rts	
; ===========================================================================

loc_367D0:				
		jsr	SingleObjLoad2
		bne.s	locret_367F6
		move.w	(a2)+,d0
		move.w	a1,(a0,d0.w)
		_move.b	(a2)+,0(a1)
		move.b	(a2)+,$28(a1)
		move.w	a0,$2C(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

locret_367F6:				
		rts	
; ===========================================================================
		bsr.w	loc_366D6
		bclr	#0,1(a0)
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	locret_36818
		bset	#0,1(a0)
		bset	#0,$22(a0)

locret_36818:				
		rts	
; ===========================================================================

loc_3681A:				
		moveq	#0,d1

loc_3681C:				
		jsr	SingleObjLoad2
		bne.s	locret_3686E
		_move.b	#-$68,0(a1)
		move.b	d2,$28(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		lea	(SpeedToPos).l,a3
		move.l	a3,$2A(a1)
		lea	(a2,d1.w),a3
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d0,8(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	d0,$C(a1)
		move.b	(a3)+,$10(a1)
		move.b	(a3)+,$12(a1)
		move.b	(a3)+,$1A(a1)
		move.b	(a3)+,1(a1)
		addq.w	#6,d1
		dbf	d6,loc_3681C

locret_3686E:				
		rts	
; ===========================================================================

loc_36870:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		cmp.b	$1D(a0),d0
		beq.s	loc_3688C
		move.b	d0,$1D(a0)
		move.b	#0,$1B(a0)
		move.b	#0,$1E(a0)

loc_3688C:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_368B0
		add.w	d0,d0
		adda.w	(a1,d0.w),a1
		move.b	(a1),$1E(a0)
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	1(a1,d1.w),d0
		bmi.s	loc_368B4

loc_368A8:				
		move.b	d0,$1A(a0)
		addq.b	#1,$1B(a0)

loc_368B0:				
		moveq	#0,d0
		rts	
; ===========================================================================

loc_368B4:				
		addq.b	#1,d0
		bne.s	loc_368C8
		move.b	#0,$1B(a0)
		move.b	1(a1),d0
		bsr.s	loc_368A8
		moveq	#1,d0
		rts	
; ===========================================================================

loc_368C8:				
		addq.b	#1,d0
		bne.s	loc_368DE
		addq.b	#2,$24(a0)
		move.b	#0,$1E(a0)
		addq.b	#1,$1B(a0)
		moveq	#1,d0
		rts	
; ===========================================================================

loc_368DE:				
		addq.b	#1,d0
		bne.s	loc_368EA
		addq.b	#2,$25(a0)
		moveq	#1,d0
		rts	
; ===========================================================================

loc_368EA:				
		addq.b	#1,d0
		bne.s	locret_368F6
		move.b	#1,$1E(a0)
		moveq	#1,d0

locret_368F6:				
		rts	
; ===========================================================================

loc_368F8:				
		tst.w	(f_two_player).w
		beq.s	loc_36904
		jmp	DisplaySprite
; ===========================================================================

loc_36904:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_3691E
		jmp	DisplaySprite
; ===========================================================================

loc_3691E:				
		jmp	DeleteObject
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Blowfly badnick from ARZ
; ----------------------------------------------------------------------------

Sprite_36924:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36932(pc,d0.w),d1
		jmp	off_36932(pc,d1.w)
; ===========================================================================
off_36932:	dc.w loc_3693C-off_36932; 0 
		dc.w loc_3694E-off_36932; 1
		dc.w loc_369A8-off_36932; 2
		dc.w loc_36958-off_36932; 3
		dc.w loc_36A26-off_36932; 4
; ===========================================================================

loc_3693C:				
		bsr.w	loc_365F4
		move.b	#$10,$2A(a0)
		move.b	#4,$2B(a0)
		rts	
; ===========================================================================

loc_3694E:				
		tst.b	1(a0)
		bmi.s	loc_36970
		bra.w	loc_3695E
; ===========================================================================

loc_36958:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_36970

loc_3695E:				
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	MarkObjGone
; ===========================================================================

loc_36970:				
		subq.b	#1,$2B(a0)
		bpl.s	loc_36996
		move.b	#8,$24(a0)
		bclr	#0,$22(a0)
		clr.w	$12(a0)
		move.w	#-$200,$10(a0)
		move.w	#-$200,$12(a0)
		bra.w	loc_36A26
; ===========================================================================

loc_36996:				
		move.b	#4,$24(a0)
		move.w	#-$100,$12(a0)
		move.b	#$60,$2A(a0) ; '`'

loc_369A8:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_369F8
		bsr.w	loc_366D6
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_369C2
		bset	#0,$22(a0)

loc_369C2:				
		move.w	word_369F4(pc,d0.w),d2
		add.w	d2,$10(a0)
		move.w	word_369F4(pc,d1.w),d2
		add.w	d2,$12(a0)
		move.w	#$200,d0
		move.w	d0,d1
		bsr.w	loc_3671A
		jsr	SpeedToPos
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	MarkObjGone
; ===========================================================================
word_369F4:	dc.w $FFF0		; 0
		dc.w   $10		; 1
; ===========================================================================

loc_369F8:				
		move.b	#6,$24(a0)
		jsr	(RandomNumber).l
		move.l	(v_random).w,d0
		andi.b	#$1F,d0
		move.b	d0,$2A(a0)
		bsr.w	loc_36754
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	MarkObjGone
; ===========================================================================

loc_36A26:				
					
		jsr	SpeedToPos
		lea	(off_36A48).l,a1
		jsr	AnimateSprite
		jmp	MarkObjGone
; ===========================================================================
off_36A3E:	dc.l Map_36A4E	
		dc.w $A500
		dc.w $404
		dc.w $C0B
off_36A48:	dc.w byte_36A4A-off_36A48 
byte_36A4A:	dc.b   1,  0,  1,$FF	; 0 
; ------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------
Map_36A4E:				
		dc.w byte_36A52-Map_36A4E; 0
		dc.w byte_36A64-Map_36A4E; 1
byte_36A52:	dc.b   0,  2,$F8,  8,  0,  0,  0,  0,$FF,$F4,  0,  8,  0,  3,  0,  1; 0
					
		dc.b $FF,$F4		; 16
byte_36A64:	dc.b   0,  2,$F8,  8,  0,  6,  0,  3,$FF,$F4,  0,  8,  0,  3,  0,  1; 0
					
		dc.b $FF,$F4		; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_36A76:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36A84(pc,d0.w),d1
		jmp	off_36A84(pc,d1.w)
; ===========================================================================
off_36A84:	dc.w loc_36A90-off_36A84; 0 
		dc.w loc_36ADC-off_36A84; 1
		dc.w loc_36B00-off_36A84; 2
		dc.w loc_36B0E-off_36A84; 3
		dc.w loc_36B34-off_36A84; 4
		dc.w loc_36B6A-off_36A84; 5
; ===========================================================================

loc_36A90:				
		bsr.w	loc_365F4
		bclr	#1,1(a0)
		beq.s	loc_36AA8
		bclr	#1,$22(a0)
		andi.w	#$7FFF,2(a0)

loc_36AA8:				
		move.b	#$14,$16(a0)
		move.b	#$10,$17(a0)
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_36AC8
		add.w	d1,$C(a0)
		move.w	#0,$12(a0)

loc_36AC8:				
		_move.b	0(a0),d0
		subi.b	#-$73,d0
		beq.w	loc_36C64
		move.b	#6,$24(a0)
		rts	
; ===========================================================================

loc_36ADC:				
		bsr.w	loc_366D6
		tst.w	d2
		bpl.s	loc_36AE6
		neg.w	d2

loc_36AE6:				
		cmpi.w	#$60,d2	; '`'
		bls.s	loc_36AF0
		bra.w	loc_3EA54
; ===========================================================================

loc_36AF0:				
		addq.b	#2,$24(a0)
		st.b	$2B(a0)
		bsr.w	loc_36C2C
		bra.w	loc_3EA54
; ===========================================================================

loc_36B00:				
		lea	(off_36CEA).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_36B0E:				
		addq.b	#2,$24(a0)
		bsr.w	loc_366D6
		move.w	word_36B30(pc,d0.w),$10(a0)
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_36B2C
		bset	#0,$22(a0)

loc_36B2C:				
		bra.w	loc_3EA54
; ===========================================================================
word_36B30:	dc.w $FF00		; 0
		dc.w $100		; 1
; ===========================================================================

loc_36B34:				
		bsr.w	loc_3EAC0
		jsr	loc_1EDFA
		cmpi.w	#-1,d1
		blt.s	loc_36B5C
		cmpi.w	#$C,d1
		bge.s	loc_36B5C
		add.w	d1,$C(a0)
		lea	(off_36CE2).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_36B5C:				
		addq.b	#2,$24(a0)
		move.b	#$3B,$2A(a0) ; ';'
		bra.w	loc_3EA54
; ===========================================================================

loc_36B6A:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_36B74
		bra.w	loc_3EA54
; ===========================================================================

loc_36B74:				
		move.b	#8,$24(a0)
		neg.w	$10(a0)
		bchg	#0,$22(a0)
		bra.w	loc_3EA54
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_36B88:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36B96(pc,d0.w),d1
		jmp	off_36B96(pc,d1.w)
; ===========================================================================
off_36B96:	dc.w loc_36B9C-off_36B96; 0 
		dc.w loc_36BA6-off_36B96; 1
		dc.w loc_36C1C-off_36B96; 2
; ===========================================================================

loc_36B9C:				
		bsr.w	loc_365F4
		clr.w	2(a0)
		rts	
; ===========================================================================

loc_36BA6:				
		movea.w	$2C(a0),a1
		tst.b	$2B(a1)
		bne.s	loc_36BB4
		bra.w	loc_3EA54
; ===========================================================================

loc_36BB4:				
		addq.b	#2,$24(a0)
		move.w	$2E(a0),d0
		move.b	byte_36BCC(pc,d0.w),$10(a0)
		move.b	byte_36BCC+1(pc,d0.w),$12(a0)
		bra.w	loc_3EA54
; ===========================================================================
byte_36BCC:	dc.b   1,$FE		; 0
		dc.b   1,$FF		; 2
		dc.b $FF,$FE		; 4
		dc.b $FF,$FF		; 6
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_36BD4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36BE2(pc,d0.w),d1
		jmp	off_36BE2(pc,d1.w)
; ===========================================================================
off_36BE2:	dc.w loc_36BE6-off_36BE2; 0 
		dc.w loc_36C1C-off_36BE2; 1
; ===========================================================================

loc_36BE6:				
		bsr.w	loc_365F4
		move.w	#$4509,2(a0)
		move.w	$2E(a0),d0
		move.b	byte_36C12(pc,d0.w),$10(a0)
		move.b	byte_36C12+1(pc,d0.w),$12(a0)
		lsr.w	#1,d0
		move.b	byte_36C0C(pc,d0.w),$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================
byte_36C0C:	dc.b   0		; 0
		dc.b   2		; 1
		dc.b   0		; 2
		dc.b   1		; 3
		dc.b   0		; 4
		dc.b   0		; 5
byte_36C12:	dc.b $FF,$FC		; 0
		dc.b   4,$FD		; 2
		dc.b   2,  0		; 4
		dc.b $FD,$FF		; 6
		dc.b $FD,$FD		; 8
; ===========================================================================

loc_36C1C:				
		tst.b	1(a0)
		bpl.w	loc_3EA48
		bsr.w	loc_3EABA
		bra.w	loc_3EA54
; ===========================================================================

loc_36C2C:				
		moveq	#0,d1
		moveq	#4,d6

loc_36C30:				
		bsr.w	loc_3EA4E
		bne.s	locret_36C3E
		bsr.w	loc_36C40
		dbf	d6,loc_36C30

locret_36C3E:				
		rts	
; ===========================================================================

loc_36C40:				
		_move.b	#-$70,0(a1)
		move.b	#6,$28(a1)
		move.w	a0,$2C(a1)
		move.w	d1,$2E(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addq.w	#2,d1
		rts	
; ===========================================================================

loc_36C64:				
		moveq	#0,d1
		moveq	#3,d6

loc_36C68:				
		bsr.w	loc_3EA4E
		bne.s	locret_36C76
		bsr.w	loc_36C78
		dbf	d6,loc_36C68

locret_36C76:				
		rts	
; ===========================================================================

loc_36C78:				
		_move.b	#-$71,0(a1)
		move.b	#4,$28(a1)
		move.w	a0,$2C(a1)
		move.w	d1,$2E(a1)
		move.l	8(a0),d0
		swap	d0
		moveq	#0,d2
		move.b	byte_36CBC(pc,d1.w),d2
		ext.w	d2
		add.w	d2,d0
		swap	d0
		move.l	d0,8(a1)
		move.l	$C(a0),d0
		swap	d0
		moveq	#0,d2
		move.b	byte_36CBC+1(pc,d1.w),d2
		ext.w	d2
		add.w	d2,d0
		swap	d0
		move.l	d0,$C(a1)
		addq.w	#2,d1
		rts	
; ===========================================================================
byte_36CBC:	dc.b   0,$EC		; 0
		dc.b $10,$FC		; 2
		dc.b   0, $C		; 4
		dc.b $F0,$FC		; 6
off_36CC4:	dc.l Map_36CF0	
		dc.w $A509
		dc.w $405
		dc.w $1002
off_36CCE:	dc.l Map_36D00	
		dc.w 0
		dc.w $8404
		dc.w $1000
off_36CD8:	dc.l Map_36CFA	
		dc.w $A509
		dc.w $8404
		dc.w $800
off_36CE2:	dc.w byte_36CE4-off_36CE2 
byte_36CE4:	dc.b   3,  2,  3,  4,$FF,  0; 0	
off_36CEA:	dc.w byte_36CEC-off_36CEA; 0 
byte_36CEC:	dc.b   7,  0,  1,$FC	; 0 
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_36CF0:	dc.w word_36D02-Map_36CF0 
		dc.w word_36D24-Map_36CF0
		dc.w word_36D46-Map_36CF0
		dc.w word_36D58-Map_36CF0
		dc.w word_36D6A-Map_36CF0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_36CFA:				
		dc.w word_36D7C-Map_36CFA
		dc.w word_36D86-Map_36CFA
		dc.w word_36D90-Map_36CFA
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_36D00:				
		dc.w word_36D9A-Map_36D00
word_36D02:	dc.w 4			
		dc.w $F400,    0,    0,$FFF8; 0
		dc.w $FC06,    1,    0,$FFF0; 4
		dc.w $F400, $800, $800,	   0; 8
		dc.w $FC06, $801, $800,	   0; 12
word_36D24:	dc.w 4			
		dc.w $EC00,    7,    3,$FFF8; 0
		dc.w $F407,    8,    4,$FFF0; 4
		dc.w $EC00, $807, $803,	   0; 8
		dc.w $F407, $808, $804,	   0; 12
word_36D46:	dc.w 2			
		dc.w $EC0F,  $10,    8,$FFF0; 0
		dc.w  $C0C,  $20,  $10,$FFF0; 4
word_36D58:	dc.w 2			
		dc.w $EC0F,  $10,    8,$FFF0; 0
		dc.w  $C0C,  $24,  $12,$FFF0; 4
word_36D6A:	dc.w 2			
word_36D6C:	dc.w $EC0F,  $10,    8,$FFF0; 0
		dc.w  $C0C,  $28,  $14,$FFF0; 4
word_36D7C:	dc.w 1			
		dc.w $F805,  $2C,  $16,$FFF8; 0
word_36D86:	dc.w 1			
word_36D88:	dc.w $FC00,  $30,  $18,$FFFC; 0
word_36D90:	dc.w 1			
		dc.w $FC00,  $31,  $18,$FFFC; 0
word_36D9A:	dc.w 2			
		dc.w $F805,$4093,$4049,$FFF0; 0
		dc.w $F805,$4097,$404B,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Shark	from ARZ
; ----------------------------------------------------------------------------

Sprite_36DAC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36DBA(pc,d0.w),d1
		jmp	off_36DBA(pc,d1.w)
; ===========================================================================
off_36DBA:	dc.w loc_36DC2-off_36DBA; 0 
		dc.w loc_36DE4-off_36DBA; 1
		dc.w loc_36E32-off_36DBA; 2
		dc.w loc_36E66-off_36DBA; 3
; ===========================================================================

loc_36DC2:				
		bsr.w	loc_365F4
		move.w	#$200,$2A(a0)
		move.w	#$50,$2C(a0) ; 'P'
		moveq	#$40,d0	; '@'
		btst	#0,$22(a0)
		bne.s	loc_36DDE
		neg.w	d0

loc_36DDE:				
		move.w	d0,$10(a0)
		rts	
; ===========================================================================

loc_36DE4:				
		subq.b	#1,$2C(a0)
		bne.s	loc_36DEE
		bsr.w	loc_36E78

loc_36DEE:				
		subq.w	#1,$2A(a0)
		bpl.s	loc_36E0A
		move.w	#$200,$2A(a0)
		bchg	#0,$22(a0)
		bchg	#0,1(a0)
		neg.w	$10(a0)

loc_36E0A:				
		bsr.w	loc_3EAC0
		bsr.w	loc_366D6
		move.w	d2,d4
		move.w	d3,d5
		bsr.w	loc_36EB2
		bne.s	loc_36E20
		bra.w	loc_3EA54
; ===========================================================================

loc_36E20:				
		addq.b	#2,$24(a0)
		move.b	#$10,$2A(a0)
		clr.w	$10(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_36E32:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_36E3C
		bra.w	loc_36E6A
; ===========================================================================

loc_36E3C:				
		addq.b	#2,$24(a0)
		bsr.w	loc_366D6
		lsr.w	#1,d0
		move.b	byte_36E62(pc,d0.w),$10(a0)
		addi.w	#$10,d3
		cmpi.w	#$20,d3	; ' '
		bcs.s	loc_36E5E
		lsr.w	#1,d1
		move.b	byte_36E64(pc,d1.w),$13(a0)

loc_36E5E:				
		bra.w	loc_36E6A
; ===========================================================================
byte_36E62:	dc.b $FE		; 0
		dc.b   2		; 1
byte_36E64:	dc.b $80		; 0
		dc.b $80		; 1
; ===========================================================================

loc_36E66:				
		bsr.w	loc_3EAC0

loc_36E6A:				
		lea	(off_36EF0).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_36E78:				
		move.w	#$50,$2C(a0) ; 'P'
		bsr.w	loc_3EA4E
		bne.s	locret_36EB0
		_move.b	#$A,0(a1)
		move.b	#6,$28(a1)
		move.w	8(a0),8(a1)
		moveq	#$14,d0
		btst	#0,1(a0)
		beq.s	loc_36EA2
		neg.w	d0

loc_36EA2:				
		add.w	d0,8(a1)
		move.w	$C(a0),$C(a1)
		addq.w	#6,$C(a1)

locret_36EB0:				
		rts	
; ===========================================================================

loc_36EB2:				
		addi.w	#$20,d3	; ' '
		cmpi.w	#$40,d3	; '@'
		bcc.s	loc_36EDE
		tst.w	d2
		bmi.s	loc_36ECA
		tst.w	$10(a0)
		bpl.s	loc_36EDE
		bra.w	loc_36ED2
; ===========================================================================

loc_36ECA:				
		tst.w	$10(a0)
		bmi.s	loc_36EDE
		neg.w	d2

loc_36ED2:				
		cmpi.w	#$20,d2	; ' '
		bcs.s	loc_36EDE
		cmpi.w	#$A0,d2	
		bcs.s	loc_36EE2

loc_36EDE:				
		moveq	#0,d2
		rts	
; ===========================================================================

loc_36EE2:				
		moveq	#1,d2
		rts	
; ===========================================================================
off_36EE6:	dc.l Map_36EF6	
		dc.w $253B
		dc.w $404
		dc.w $1002
off_36EF0:	dc.w byte_36EF2-off_36EF0 
byte_36EF2:	dc.b   4,  0,  1,$FF	; 0 
; --------------------------------------------------------------------------
; Unknown sprite mappings
; --------------------------------------------------------------------------
Map_36EF6:				
		dc.w word_36EFA-Map_36EF6; 0
		dc.w word_36F04-Map_36EF6; 1
word_36EFA:	dc.w 1			
		dc.w $F40E,    0,    0,$FFF0; 0
word_36F04:	dc.w 1			
		dc.w $F40E,   $C,    6,$FFF0; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_36F0E:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36F1C(pc,d0.w),d1
		jmp	off_36F1C(pc,d1.w)
; ===========================================================================
off_36F1C:	dc.w loc_36F24-off_36F1C; 0 
		dc.w loc_36F3C-off_36F1C; 1
		dc.w loc_36F68-off_36F1C; 2
		dc.w loc_36F90-off_36F1C; 3
; ===========================================================================

loc_36F24:				
		bsr.w	loc_365F4
		move.b	#$40,$2A(a0) ; '@'
		move.w	#$80,$10(a0)
		bchg	#0,$22(a0)
		rts	
; ===========================================================================

loc_36F3C:				
		bsr.w	loc_3703E
		bne.s	loc_36F48
		subq.b	#1,$2A(a0)
		bmi.s	loc_36F5A

loc_36F48:				
		bsr.w	loc_3EAC0
		lea	(off_37086).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_36F5A:				
		addq.b	#2,$24(a0)
		move.b	#$10,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_36F68:				
		bsr.w	loc_3703E
		bne.s	loc_36F74
		subq.b	#1,$2A(a0)
		bmi.s	loc_36F78

loc_36F74:				
		bra.w	loc_3EA54
; ===========================================================================

loc_36F78:				
		subq.b	#2,$24(a0)
		move.b	#$40,$2A(a0) ; '@'
		neg.w	$10(a0)
		bchg	#0,$22(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_36F90:				
		move.b	$2E(a0),d0
		cmpi.b	#8,d0
		beq.s	loc_36FA4
		subq.b	#1,d0
		move.b	d0,$2E(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_36FA4:				
		bsr.w	loc_3EA66
		bne.s	loc_36FDC
		st.b	$2B(a0)
		_move.b	#-$6D,0(a1)
		move.b	$28(a0),$28(a1)
		move.w	a0,$2C(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#4,$1A(a1)
		move.b	#2,$1A(a0)
		move.b	#1,$1C(a0)

loc_36FDC:				
		move.b	$2F(a0),$24(a0)
		bra.w	loc_3EA54
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_36FE6:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_36FF4(pc,d0.w),d1
		jmp	off_36FF4(pc,d1.w)
; ===========================================================================
off_36FF4:	dc.w loc_36FF8-off_36FF4; 0 
		dc.w loc_37028-off_36FF4; 1
; ===========================================================================

loc_36FF8:				
		bsr.w	loc_365F4
		ori.b	#-$80,1(a0)
		ori.b	#-$80,$20(a0)
		movea.w	$2C(a0),a1
		move.b	1(a1),d0
		andi.b	#3,d0
		or.b	d0,1(a0)
		moveq	#2,d1
		btst	#1,d0
		bne.s	loc_37022
		neg.w	d1

loc_37022:				
		move.b	d1,$12(a0)
		rts	
; ===========================================================================

loc_37028:				
		tst.b	1(a0)
		bpl.w	loc_3EA48
		bchg	#0,1(a0)
		bsr.w	loc_3EAC0
		bra.w	loc_3EA54
; ===========================================================================

loc_3703E:				
		tst.b	$2B(a0)
		bne.s	loc_37062
		tst.b	1(a0)
		bpl.s	loc_37062
		bsr.w	loc_366D6
		addi.w	#$20,d2	; ' '
		cmpi.w	#$40,d2	; '@'
		bcc.s	loc_37062
		addi.w	#$80,d3	
		cmpi.w	#$100,d3
		bcs.s	loc_37066

loc_37062:				
		moveq	#0,d0
		rts	
; ===========================================================================

loc_37066:				
		move.b	$24(a0),$2F(a0)
		move.b	#6,$24(a0)
		move.b	#$10,$2E(a0)
		moveq	#1,d0
		rts	
; ===========================================================================
off_3707C:	dc.l Map_37092	
		dc.w 0
		dc.w $404
		dc.w $1012
off_37086:	dc.w byte_3708A-off_37086; 0 
		dc.w byte_3708E-off_37086; 1
byte_3708A:	dc.b   9,  0,  1,$FF	; 0 
byte_3708E:	dc.b   9,  2,  3,$FF	; 0 
; ---------------------------------------------------------------------------
; Unknown sprite mappings
; ---------------------------------------------------------------------------
Map_37092:				
		dc.w word_3709C-Map_37092; 0
		dc.w word_370B6-Map_37092; 1
		dc.w word_370D0-Map_37092; 2
		dc.w word_370E2-Map_37092; 3
		dc.w word_370F4-Map_37092; 4
word_3709C:	dc.w 3			
		dc.w  $809, $520, $290,$FFF4; 0
		dc.w $E807,$252C,$2296,$FFF8; 4
		dc.w	 5, $3DE, $1EF,$FFF8; 8
word_370B6:	dc.w	 3		; 0 
word_370B8:	dc.w  $809, $526, $293,$FFF4; 0
		dc.w $E807,$252C,$2296,$FFF8; 4
		dc.w	 5, $3DE, $1EF,$FFF8; 8
word_370D0:	dc.w 2			
		dc.w  $809, $520, $290,$FFF4; 0
		dc.w	 5, $3DE, $1EF,$FFF8; 4
word_370E2:	dc.w 2			
		dc.w  $809, $526, $293,$FFF4; 0
		dc.w	 5, $3DE, $1EF,$FFF8; 4
word_370F4:	dc.w 1			
		dc.w $EC07,$252C,$2296,$FFF8; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Orbit	badnick	from HTZ
; ----------------------------------------------------------------------------

Sprite_370FE:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3710C(pc,d0.w),d1
		jmp	off_3710C(pc,d1.w)
; ===========================================================================
off_3710C:	dc.w loc_37116-off_3710C; 0 
		dc.w loc_371DC-off_3710C; 1
		dc.w loc_37224-off_3710C; 2
		dc.w loc_3723C-off_3710C; 3
		dc.w loc_372B8-off_3710C; 4
; ===========================================================================

loc_37116:				
		move.l	#Map_372E6,4(a0)
		move.w	#0,2(a0)
		bsr.w	loc_3EA9C
		ori.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#$B,$20(a0)
		move.b	#$C,$19(a0)
		move.w	#-$40,$10(a0)
		moveq	#0,d2
		lea	$37(a0),a2
		movea.l	a2,a3
		addq.w	#1,a2
		moveq	#3,d1

loc_37152:				
		bsr.w	loc_3EA66
		bne.s	loc_371AE
		addq.b	#1,(a3)
		move.w	a1,d5
		subi.w	#-$5000,d5
		lsr.w	#6,d5
		andi.w	#$7F,d5	; ''
		move.b	d5,(a2)+

loc_37168:
		_move.b	0(a0),0(a1)
		move.b	#6,$24(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		ori.b	#4,1(a1)

loc_37186:
		move.b	#4,$18(a1)
		move.b	#8,$19(a1)
		move.b	#3,$1A(a1)

loc_37198:
		move.b	#-$68,$20(a1)
		move.b	d2,$26(a1)
		addi.b	#$40,d2	; '@'
		move.l	a0,$3C(a1)
		dbf	d1,loc_37152

loc_371AE:				
		moveq	#1,d0
		btst	#0,$22(a0)
		beq.s	loc_371BA
		neg.w	d0

loc_371BA:				
		move.b	d0,$36(a0)
		move.b	$28(a0),$24(a0)
		addq.b	#2,$24(a0)
		move.w	#-$40,$10(a0)
		btst	#0,$22(a0)
		beq.s	locret_371DA
		neg.w	$10(a0)

locret_371DA:				
		rts	
; ===========================================================================

loc_371DC:				
		move.w	($FFFFB008).w,d0
		sub.w	8(a0),d0
		bcc.s	loc_371E8
		neg.w	d0

loc_371E8:				
		cmpi.w	#$A0,d0	
		bcc.s	loc_3720C
		move.w	($FFFFB00C).w,d0
		sub.w	$C(a0),d0
		bcc.s	loc_371FA
		neg.w	d0

loc_371FA:				
		cmpi.w	#$50,d0	; 'P'
		bcc.s	loc_3720C
		tst.w	(v_debug_active).w
		bne.s	loc_3720C
		move.b	#1,$1C(a0)

loc_3720C:				
		bsr.w	loc_3EAC0
		lea	(off_372D2).l,a1
		bsr.w	loc_3EA6C
		andi.b	#3,$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_37224:				
		bsr.w	loc_3EAC0
		lea	(off_372E0).l,a1
		bsr.w	loc_3EA6C
		andi.b	#3,$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3723C:				
		lea	(off_372E0).l,a1
		bsr.w	loc_3EA6C
		movea.l	$3C(a0),a1
		_cmpi.b	#-$6B,0(a1)
		bne.w	loc_3EA48
		cmpi.b	#2,$1A(a1)
		bne.s	loc_3728E
		cmpi.b	#$40,$26(a0) ; '@'
		bne.s	loc_3728E
		addq.b	#2,$24(a0)
		move.b	#0,$1C(a0)
		subq.b	#1,$37(a1)
		bne.s	loc_37278
		addq.b	#2,$24(a1)

loc_37278:				
		move.w	#-$200,$10(a0)
		btst	#0,$22(a1)
		beq.s	loc_3728A
		neg.w	$10(a0)

loc_3728A:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3728E:				
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		asr.w	#4,d1
		add.w	8(a1),d1
		move.w	d1,8(a0)
		asr.w	#4,d0
		add.w	$C(a1),d0
		move.w	d0,$C(a0)
		move.b	$36(a1),d0
		add.b	d0,$26(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_372B8:				
		bsr.w	loc_3EAC0
		tst.b	1(a0)
		bpl.w	loc_3EA48
		lea	(off_372E0).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================
off_372D2:	dc.w byte_372D6-off_372D2; 0 
		dc.w byte_372DA-off_372D2; 1
byte_372D6:	dc.b  $F,  0,$FF,  0	; 0 
byte_372DA:	dc.b  $F,  1,  2,$FE,  1,  0; 0	
off_372E0:	dc.w byte_372E2-off_372E0 
byte_372E2:	dc.b   5,  3,  4,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_372E6:				
		dc.w word_372F0-Map_372E6; 0
		dc.w word_372FA-Map_372E6; 1
		dc.w word_37304-Map_372E6; 2
		dc.w word_3730E-Map_372E6; 3
		dc.w word_37318-Map_372E6; 4
word_372F0:	dc.w 1			
		dc.w $F805, $3DE, $1EF,$FFF8; 0
word_372FA:	dc.w 1			
		dc.w $F805, $3DE, $1EF,$FFF8; 0
word_37304:	dc.w 1			
		dc.w $F805, $3DE, $1EF,$FFF8; 0
word_3730E:	dc.w 1			
		dc.w $F805,$83AE,$81D7,$FFF8; 0
word_37318:	dc.w 1			
		dc.w $F805,$8BAE,$89D7,$FFF8; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Lava snake from HTZ
; ----------------------------------------------------------------------------

Sprite_37322:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_37330(pc,d0.w),d1
		jmp	off_37330(pc,d1.w)
; ===========================================================================
off_37330:	dc.w loc_37338-off_37330; 0 
		dc.w loc_37350-off_37330; 1
		dc.w loc_3739C-off_37330; 2
		dc.w loc_373CA-off_37330; 3
; ===========================================================================

loc_37338:				
		bsr.w	loc_365F4
		move.b	#2,$1A(a0)
		move.w	#-$20,$10(a0)
		move.b	#-$80,$2A(a0)
		rts	
; ===========================================================================

loc_37350:				
		bsr.w	loc_366D6
		addi.w	#$60,d2	; '`'
		cmpi.w	#$100,d2
		bcc.s	loc_37362
		bsr.w	loc_375AC

loc_37362:				
		move.w	8(a0),-(sp)
		bsr.w	loc_37380
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#$11,d3
		move.w	(sp)+,d4
		bsr.w	loc_3EAB4
		bra.w	loc_3EA54
; ===========================================================================

loc_37380:				
		subq.b	#1,$2A(a0)
		bpl.s	loc_37396
		move.b	#-$80,$2A(a0)
		neg.w	$10(a0)
		bchg	#0,1(a0)

loc_37396:				
		bsr.w	loc_3EAC0
		rts	
; ===========================================================================

loc_3739C:				
		bsr.w	loc_366D6
		addi.w	#$60,d2	; '`'
		cmpi.w	#$100,d2
		bcc.s	loc_373AE
		bsr.w	loc_375AC

loc_373AE:				
		bsr.w	loc_373B6
		bra.w	loc_3EA54
; ===========================================================================

loc_373B6:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	8(a0),d4
		bra.w	loc_3EAB4
; ===========================================================================

loc_373CA:				
		bsr.s	loc_373B6
		bra.w	loc_3EA54
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_373D0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_373DE(pc,d0.w),d1
		jmp	off_373DE(pc,d1.w)
; ===========================================================================
off_373DE:	dc.w loc_373E8-off_373DE; 0 
		dc.w loc_37454-off_373DE; 1
		dc.w loc_37488-off_373DE; 2
		dc.w loc_374C2-off_373DE; 3
		dc.w loc_374F4-off_373DE; 4
; ===========================================================================

loc_373E8:				
		bsr.w	loc_365F4
		move.b	#8,$19(a0)
		moveq	#$28,d0	; '('
		btst	#0,1(a0)
		bne.s	loc_373FE
		moveq	#-$18,d0

loc_373FE:				
		add.w	d0,8(a0)
		addi.w	#$10,$C(a0)
		move.b	#1,$38(a0)
		movea.w	$2C(a0),a1
		lea	$2E(a1),a1
		move.b	#$B,$20(a0)
		moveq	#0,d0
		move.w	$2E(a0),d0
		cmpi.w	#8,d0
		beq.s	loc_3743A
		move.b	#1,$1A(a0)
		move.b	#-$75,$20(a0)
		move.w	(a1,d0.w),$30(a0)

loc_3743A:				
		move.w	6(a1),$32(a0)
		lsr.w	#1,d0
		move.b	byte_3744E(pc,d0.w),$2A(a0)
		move.b	d0,$39(a0)
		rts	
; ===========================================================================
byte_3744E:	dc.b $1E		; 0
		dc.b $18		; 1
		dc.b $12		; 2
		dc.b  $C		; 3
		dc.b   6		; 4
		dc.b   0		; 5
; ===========================================================================

loc_37454:				
		bsr.w	loc_3750C
		subq.b	#1,$2A(a0)
		bmi.s	loc_37462
		bra.w	loc_3EA54
; ===========================================================================

loc_37462:				
		addq.b	#2,$24(a0)
		move.w	#-$120,$10(a0)
		move.w	#-$200,$12(a0)
		move.w	$2E(a0),d0
		subi.w	#8,d0
		neg.w	d0
		lsr.w	#1,d0
		move.b	byte_3744E(pc,d0.w),$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_37488:				
		bsr.w	loc_3750C
		moveq	#$10,d0
		add.w	d0,$10(a0)
		subq.b	#1,$2A(a0)
		bmi.s	loc_374A0
		bsr.w	loc_3EAC0
		bra.w	loc_3EA54
; ===========================================================================

loc_374A0:				
		addq.b	#2,$24(a0)
		bsr.w	loc_36754
		move.b	#$20,$2A(a0) ; ' '
		move.w	$2E(a0),d0
		lsr.w	#1,d0
		move.b	byte_374BE(pc,d0.w),$2B(a0)
		bra.w	loc_3EA54
; ===========================================================================
byte_374BE:	dc.b $24		; 0
		dc.b $20		; 1
		dc.b $1C		; 2
		dc.b $1A		; 3
; ===========================================================================

loc_374C2:				
		bsr.w	loc_3750C
		cmpi.w	#8,$2E(a0)
		bne.s	loc_374D8
		subq.b	#1,$2A(a0)
		bpl.s	loc_374D8
		bsr.w	loc_37532

loc_374D8:				
		move.b	$39(a0),d0
		addq.b	#1,d0
		move.b	d0,$39(a0)
		andi.b	#3,d0
		bne.s	loc_374F0
		bsr.w	loc_3758A
		bsr.w	loc_37604

loc_374F0:				
		bra.w	loc_3EA54
; ===========================================================================

loc_374F4:				
		move.w	(v_boundary_bottom).w,d0
		addi.w	#$E0,d0	
		cmp.w	$C(a0),d0
		bcs.w	loc_3EA48
		bsr.w	loc_3EABA
		bra.w	loc_3EA54
; ===========================================================================

loc_3750C:				
		movea.w	$32(a0),a1
		cmpi.b	#-$69,(a1)
		beq.s	locret_37526
		move.b	#8,$24(a0)
		move.w	$2E(a0),d0
		move.w	word_37528(pc,d0.w),$10(a0)

locret_37526:				
		rts	
; ===========================================================================
word_37528:	dc.w   $80		; 0
		dc.w $FF00		; 1
		dc.w  $100		; 2
		dc.w $FF80		; 3
		dc.w   $80		; 4
; ===========================================================================

loc_37532:				
		move.b	#$7F,$2A(a0) ; ''
		bsr.w	loc_3EA66
		bne.s	locret_37588
		_move.b	#-$68,0(a1)
		move.b	#3,$1A(a1)
		move.b	#$10,$28(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		lea	(SpeedToPos).l,a2
		move.l	a2,$2A(a1)
		moveq	#1,d0
		moveq	#$10,d1
		btst	#0,1(a0)
		bne.s	loc_37576
		neg.w	d0
		neg.w	d1

loc_37576:				
		move.b	d0,$10(a1)
		add.w	d1,8(a1)
		addq.w	#4,$C(a1)
		move.b	#-$80,$13(a1)

locret_37588:				
		rts	
; ===========================================================================

loc_3758A:				
		move.b	$2B(a0),d0
		move.b	$38(a0),d1
		add.b	d1,d0
		move.b	d0,$2B(a0)
		subi.b	#$18,d0
		beq.s	loc_375A6
		bcs.s	loc_375A6
		cmpi.b	#$10,d0
		bcs.s	locret_375AA

loc_375A6:				
		neg.b	$38(a0)

locret_375AA:				
		rts	
; ===========================================================================

loc_375AC:				
		move.b	#6,$24(a0)
		bclr	#0,1(a0)
		tst.w	d0
		beq.s	loc_375C2
		bset	#0,1(a0)

loc_375C2:				
		bsr.w	loc_36754
		lea	$2C(a0),a2
		moveq	#0,d1
		moveq	#4,d6

loc_375CE:				
		bsr.w	loc_3EA4E
		bne.s	locret_37602
		_move.b	#-$69,0(a1)
		move.b	1(a0),1(a1)
		move.b	$28(a0),$28(a1)
		move.w	a0,$2C(a1)
		move.w	a1,(a2)+
		move.w	d1,$2E(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addq.w	#2,d1
		dbf	d6,loc_375CE

locret_37602:				
		rts	
; ===========================================================================

loc_37604:				
		move.w	$30(a0),d0
		beq.s	locret_37650
		movea.w	d0,a1
		lea	(word_376A8)(pc),a2
		moveq	#0,d0
		move.b	$2B(a0),d0
		andi.b	#$7F,d0	; ''
		move.w	d0,d1
		andi.w	#$1F,d0
		add.w	d0,d0
		move.b	(a2,d0.w),d2
		ext.w	d2
		move.b	1(a2,d0.w),d3
		ext.w	d3
		lsr.w	#4,d1
		andi.w	#6,d1
		move.w	off_37652(pc,d1.w),d1
		jsr	off_37652(pc,d1.w)
		move.w	8(a0),d4
		add.w	d2,d4
		move.w	d4,8(a1)
		move.b	$D(a0),d5
		add.b	d3,d5
		move.b	d5,$D(a1)

locret_37650:				
		rts	
; ===========================================================================
off_37652:	dc.w locret_3765A-off_37652; 0 
		dc.w loc_3765C-off_37652; 1
		dc.w loc_37662-off_37652; 2
		dc.w loc_37668-off_37652; 3
; ===========================================================================

locret_3765A:				
		rts	
; ===========================================================================

loc_3765C:				
		exg	d2,d3
		neg.w	d3
		rts	
; ===========================================================================

loc_37662:				
		neg.w	d2
		neg.w	d3
		rts	
; ===========================================================================

loc_37668:				
		exg	d2,d3
		neg.w	d2
		rts	
; ===========================================================================
off_3766E:	dc.l Map_37678	
		dc.w $637E
		dc.w $404
		dc.w $1000
; ------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------
Map_37678:				
		dc.w word_37680-Map_37678; 0
		dc.w word_3768A-Map_37678; 1
		dc.w word_37694-Map_37678; 2
		dc.w word_3769E-Map_37678; 3
word_37680:	dc.w   1		; 0 
		dc.w $FA09,    0,    0,$FFEC; 0
word_3768A:	dc.w   1		; 0 
		dc.w $F805,    6,    3,$FFF8; 0
word_37694:	dc.w   1		; 0 
		dc.w $F80D,   $A,    5,$FFF0; 0
word_3769E:	dc.w   1		; 0 
		dc.w $FC00,  $12,    9,$FFFC; 0
word_376A8:	dc.w  $F00		; 0 
		dc.w  $FFF		; 1
		dc.w  $FFF		; 2
		dc.w  $FFE		; 3
		dc.w  $FFD		; 4
		dc.w  $FFC		; 5
		dc.w  $EFC		; 6
		dc.w  $EFB		; 7
		dc.w  $EFA		; 8
		dc.w  $EFA		; 9
		dc.w  $DF9		; 10
		dc.w  $DF8		; 11
		dc.w  $CF8		; 12
		dc.w  $CF7		; 13
		dc.w  $CF6		; 14
		dc.w  $BF6		; 15
		dc.w  $BF5		; 16
		dc.w  $AF5		; 17
		dc.w  $AF4		; 18
		dc.w  $9F4		; 19
		dc.w  $8F4		; 20
		dc.w  $8F3		; 21
		dc.w  $7F3		; 22
		dc.w  $6F2		; 23
		dc.w  $6F2		; 24
		dc.w  $5F2		; 25
		dc.w  $4F2		; 26
		dc.w  $4F1		; 27
		dc.w  $3F1		; 28
		dc.w  $2F1		; 29
		dc.w  $1F1		; 30
		dc.w  $1F1		; 31
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_376E8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_376F6(pc,d0.w),d1
		jmp	off_376F6(pc,d1.w)
; ===========================================================================
off_376F6:	dc.w loc_376FA-off_376F6; 0 
		dc.w loc_376FE-off_376F6; 1
; ===========================================================================

loc_376FA:				
		bra.w	loc_365F4
; ===========================================================================

loc_376FE:				
		tst.b	1(a0)
		bpl.w	loc_3EA48
		movea.l	$2A(a0),a1
		jsr	(a1)
		bra.w	loc_3EA54
; ===========================================================================

loc_37710:				
		bchg	#5,2(a0)
		bra.w	loc_3EABA
; ===========================================================================

loc_3771A:				
		bsr.w	loc_3EAC0
		lea	(off_37B50).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_37728:				
		addi.w	#$20,$12(a0) ; ' '
		bsr.w	loc_3EAC0
		rts	
; ===========================================================================

loc_37734:				
		bsr.w	loc_3EAC0
		lea	(off_395A8).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_37742:				
		addi.w	#$20,$12(a0) ; ' '
		bsr.w	loc_3EAC0
		lea	(off_38CC4).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_37756:				
		bsr.w	loc_3EAC0
		lea	(off_3BA40).l,a1
		bra.w	loc_3EA6C
; ===========================================================================
off_37764:	dc.l Map_37678	
		dc.w $237E
		dc.w $8404
		dc.w $498
off_3776E:	dc.l Map_3789A	
		dc.w $A36E
		dc.w $8404
		dc.w $88B
off_37778:	dc.l Map_37B62	
		dc.w $38A
		dc.w $8404
		dc.w $498
off_37782:	dc.l Map_37D96	
		dc.w $3EE
		dc.w $8404
		dc.w $88B
off_3778C:	dc.l Map_38A96	
		dc.w $8368
		dc.w $8405
		dc.w $498
off_37796:	dc.l Map_38CCA	
		dc.w $252D
		dc.w $8405
		dc.w $498
off_377A0:	dc.l Map_3921A	
		dc.w $A500
		dc.w $8404
		dc.w $498
off_377AA:	dc.l Map_395B4	
		dc.w $379
		dc.w $8405
		dc.w $498
off_377B4:	dc.l Map_39E68	
		dc.w $2380
		dc.w $8405
		dc.w $498
off_377BE:	dc.l Map_3BA46	
		dc.w $3AB
		dc.w $8403
		dc.w $498
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Bomber badnick from SCZ
; ----------------------------------------------------------------------------

Sprite_377C8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_377D6(pc,d0.w),d1
		jmp	off_377D6(pc,d1.w)
; ===========================================================================
off_377D6:	dc.w loc_377DC-off_377D6; 0 
		dc.w loc_377E8-off_377D6; 1
		dc.w loc_3781C-off_377D6; 2
; ===========================================================================

loc_377DC:				
		bsr.w	loc_365F4
		move.w	#-$C0,$10(a0)
		rts	
; ===========================================================================

loc_377E8:				
		bsr.w	loc_366D6
		tst.w	d0
		bne.s	loc_377FA
		cmpi.w	#$80,d2	
		bcc.s	loc_377FA
		bsr.w	loc_37810

loc_377FA:				
		bsr.w	loc_3EAC0
		bsr.w	loc_36776
		lea	(off_37892).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_36788
; ===========================================================================

loc_37810:				
		addq.b	#2,$24(a0)
		move.w	#-$A0,$12(a0)
		rts	
; ===========================================================================

loc_3781C:				
		tst.b	$2A(a0)
		bne.s	loc_37834
		bsr.w	loc_366D6
		addi.w	#8,d2
		cmpi.w	#$10,d2
		bcc.s	loc_37834
		bsr.w	loc_37850

loc_37834:				
		addi.w	#1,$12(a0)
		bsr.w	loc_3EAC0
		bsr.w	loc_36776
		lea	(off_37892).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_36788
; ===========================================================================

loc_37850:				
		st.b	$2A(a0)
		bsr.w	loc_3EA66
		bne.s	locret_37886
		_move.b	#-$68,0(a1)
		move.b	#4,$1A(a1)
		move.b	#$14,$28(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$18,$C(a1)
		lea	(loc_37710)(pc),a2
		move.l	a2,$2A(a1)

locret_37886:				
		rts	
; ===========================================================================
off_37888:	dc.l Map_3789A	
		dc.w $A36E
		dc.w $404
		dc.w $1006
off_37892:	dc.w byte_37894-off_37892 
byte_37894:	dc.b   3,  0,  1,  2,  3,$FF; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3789A:				
		dc.w word_378A4-Map_3789A; 0
		dc.w word_378C6-Map_3789A; 1
		dc.w word_378E8-Map_3789A; 2
		dc.w word_3790A-Map_3789A; 3
		dc.w word_3792C-Map_3789A; 4
word_378A4:	dc.w 4			
		dc.w $EC08,  $12,    9,$FFE8; 0
		dc.w $EC08,$1812,$1809,	   0; 4
		dc.w $EC04,    0,    0,$FFF8; 8
		dc.w $F40F,    2,    1,$FFF0; 12
word_378C6:	dc.w 4			
		dc.w $EC04,  $15,   $A,$FFF0; 0
		dc.w $EC04,$1815,$180A,	   0; 4
		dc.w $EC04,    0,    0,$FFF8; 8
		dc.w $F40F,    2,    1,$FFF0; 12
word_378E8:	dc.w 4			
		dc.w $EC00,  $17,   $B,$FFF8; 0
		dc.w $EC00, $817, $80B,	   0; 4
		dc.w $EC04,    0,    0,$FFF8; 8
		dc.w $F40F,    2,    1,$FFF0; 12
word_3790A:	dc.w 4			
		dc.w $EC04,$1015,$100A,$FFF0; 0
		dc.w $EC04, $815, $80A,	   0; 4
		dc.w $EC04,    0,    0,$FFF8; 8
		dc.w $F40F,    2,    1,$FFF0; 12
word_3792C:	dc.w 1			
		dc.w $F805,  $18,   $C,$FFF8; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Small	turtle on back of larger flying	turtle from SCZ
; ----------------------------------------------------------------------------

Sprite_37936:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_37944(pc,d0.w),d1
		jmp	off_37944(pc,d1.w)
; ===========================================================================
off_37944:	dc.w loc_37948-off_37944; 0 
		dc.w loc_37964-off_37944; 1
; ===========================================================================

loc_37948:				
		bsr.w	loc_365F4
		move.w	#-$80,$10(a0)
		bsr.w	loc_37A4A
		lea	(off_37B56).l,a1
		move.l	a1,$2E(a0)
		bra.w	loc_37ABE
; ===========================================================================

loc_37964:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3797A(pc,d0.w),d1
		jsr	off_3797A(pc,d1.w)
		bsr.w	loc_37982
		bra.w	loc_36788
; ===========================================================================
off_3797A:	dc.w loc_379A0-off_3797A; 0 
		dc.w loc_379CA-off_3797A; 1
		dc.w loc_379EA-off_3797A; 2
		dc.w locret_37A04-off_3797A; 3
; ===========================================================================

loc_37982:				
		move.w	8(a0),-(sp)
		bsr.w	loc_3EAC0
		bsr.w	loc_36776
		move.w	#$18,d1
		move.w	#8,d2
		move.w	#$E,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAAE
; ===========================================================================

loc_379A0:				
		bsr.w	loc_366D6
		tst.w	d0
		bmi.w	locret_37A48
		cmpi.w	#$80,d2	
		bcc.w	locret_37A48
		addq.b	#2,$25(a0)
		move.w	#0,$10(a0)
		move.b	#4,$2A(a0)
		move.b	#1,$1A(a0)
		rts	
; ===========================================================================

loc_379CA:				
		subq.b	#1,$2A(a0)
		bpl.w	locret_37A48
		addq.b	#2,$25(a0)
		move.b	#8,$2A(a0)
		movea.w	$2C(a0),a1
		move.b	#3,$1A(a1)
		bra.w	loc_37AF2
; ===========================================================================

loc_379EA:				
		subq.b	#1,$2A(a0)
		bpl.s	locret_37A02
		addq.b	#2,$25(a0)
		move.w	#-$80,$10(a0)
		clr.b	$1A(a0)
		movea.w	$2C(a0),a1

locret_37A02:				
		rts	
; ===========================================================================

locret_37A04:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_37A06:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_37A14(pc,d0.w),d1
		jmp	off_37A14(pc,d1.w)
; ===========================================================================
off_37A14:	dc.w loc_37A18-off_37A14; 0 
		dc.w loc_37A1C-off_37A14; 1
; ===========================================================================

loc_37A18:				
		bra.w	loc_365F4
; ===========================================================================

loc_37A1C:				
		movea.w	$2C(a0),a1
		lea	(word_37A2C)(pc),a2
		bsr.w	loc_37A30
		bra.w	loc_36788
; ===========================================================================
word_37A2C:	dc.w	 4		; 0 
		dc.w $FFE8		; 1
; ===========================================================================

loc_37A30:				
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		move.w	(a2)+,d0
		add.w	d0,8(a0)
		move.w	(a2)+,d0
		add.w	d0,$C(a0)

locret_37A48:				
		rts	
; ===========================================================================

loc_37A4A:				
		bsr.w	loc_3EA66
		bne.s	locret_37A80
		_move.b	#-$65,0(a1)
		move.b	#2,$1A(a1)
		move.b	#$18,$28(a1)
		move.w	a0,$2C(a1)
		move.w	a1,$2C(a0)
		move.w	8(a0),8(a1)
		addq.w	#4,8(a1)
		move.w	$C(a0),$C(a1)
		subi.w	#$18,$C(a1)

locret_37A80:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_37A82:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_37A90(pc,d0.w),d1
		jmp	off_37A90(pc,d1.w)
; ===========================================================================
off_37A90:	dc.w loc_37A94-off_37A90; 0 
		dc.w loc_37A98-off_37A90; 1
; ===========================================================================

loc_37A94:				
		bra.w	loc_365F4
; ===========================================================================

loc_37A98:				
		movea.w	$2C(a0),a1
		move.b	$32(a0),d0
		cmp.b	(a1),d0
		bne.w	loc_3EA48
		move.l	8(a1),8(a0)
		move.l	$C(a1),$C(a0)
		movea.l	$2E(a0),a1
		bsr.w	loc_3EA6C
		bra.w	loc_36788
; ===========================================================================

loc_37ABE:				
		bsr.w	loc_3EA66
		bne.s	locret_37AF0
		_move.b	#-$64,0(a1)
		move.b	#6,$1A(a1)
		move.b	#$1A,$28(a1)
		move.w	a0,$2C(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.l	$2E(a0),$2E(a1)
		move.b	(a0),$32(a1)

locret_37AF0:				
		rts	
; ===========================================================================

loc_37AF2:				
		bsr.w	loc_3EA4E
		bne.s	locret_37B30
		_move.b	#-$68,0(a1)
		move.b	#6,$1A(a1)
		move.b	#$1C,$28(a1)
		move.w	8(a0),8(a1)
		subi.w	#$14,8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$A,$C(a1)
		move.w	#-$100,$10(a1)
		lea	(loc_3771A)(pc),a2
		move.l	a2,$2A(a1)

locret_37B30:				
		rts	
; ===========================================================================
off_37B32:	dc.l Map_37B62	
		dc.w $38A
		dc.w $405
		dc.w $1800
off_37B3C:	dc.l Map_37B62	
		dc.w $38A
		dc.w $404
		dc.w $C1A
off_37B46:	dc.l Map_37B62	
		dc.w $38A
		dc.w $405
		dc.w $800
off_37B50:	dc.w byte_37B52-off_37B50 
byte_37B52:	dc.b   1,  4,  5,$FF	; 0 
off_37B56:	dc.w byte_37B58-off_37B56 
byte_37B58:	dc.b   1,  6,  7,$FF	; 0 
off_37B5C:	dc.w byte_37B5E-off_37B5C 
byte_37B5E:	dc.b   1,  8,  9,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_37B62:	dc.w word_37B76-Map_37B62 
		dc.w word_37B90-Map_37B62
		dc.w word_37BAA-Map_37B62
		dc.w word_37BB4-Map_37B62
		dc.w word_37BBE-Map_37B62
		dc.w word_37BC8-Map_37B62
		dc.w word_37BD2-Map_37B62
		dc.w word_37BDC-Map_37B62
		dc.w word_37BE6-Map_37B62
		dc.w word_37BF0-Map_37B62
word_37B76:	dc.w 3			
		dc.w $F009,$A000,$A000,$FFE4; 0
		dc.w $F00F,$A006,$A003,$FFFC; 4
		dc.w	 9,$A016,$A00B,$FFE4; 8
word_37B90:	dc.w 3			
		dc.w $F009,$A000,$A000,$FFE4; 0
		dc.w	 9,$A01C,$A00E,$FFE4; 4
		dc.w $F00F,$A006,$A003,$FFFC; 8
word_37BAA:	dc.w 1			
		dc.w $F40A,$A022,$A011,$FFF4; 0
word_37BB4:	dc.w 1			
		dc.w $F40A,$A02B,$A015,$FFF4; 0
word_37BBE:	dc.w 1			
		dc.w $FC00,$8034,$801A,$FFFC; 0
word_37BC8:	dc.w 1			
		dc.w $FC00,$8035,$801A,$FFFC; 0
word_37BD2:	dc.w 1			
		dc.w  $604,$8036,$801B,	 $1C; 0
word_37BDC:	dc.w 1			
		dc.w  $600,$8038,$801C,	 $1C; 0
word_37BE6:	dc.w 1			
		dc.w $FB04,$8036,$801B,	 $1B; 0
word_37BF0:	dc.w 1			
		dc.w $FB00,$8038,$801C,	 $1B; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Coconuts badnick from	EHZ
; ----------------------------------------------------------------------------

Sprite_37BFA:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_37C08(pc,d0.w),d1
		jmp	off_37C08(pc,d1.w)
; ===========================================================================
off_37C08:	dc.w loc_37C10-off_37C08; 0 
		dc.w loc_37C1C-off_37C08; 1
		dc.w loc_37CAE-off_37C08; 2
		dc.w loc_37CD4-off_37C08; 3
; ===========================================================================

loc_37C10:				
		bsr.w	loc_365F4
		move.b	#$10,$2A(a0)
		rts	
; ===========================================================================

loc_37C1C:				
		bsr.w	loc_366D6
		bclr	#0,1(a0)
		bclr	#0,$22(a0)
		tst.w	d0
		beq.s	loc_37C3C
		bset	#0,1(a0)
		bset	#0,$22(a0)

loc_37C3C:				
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcc.s	loc_37C50
		tst.b	$2E(a0)
		beq.s	loc_37C66
		subq.b	#1,$2E(a0)

loc_37C50:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_37C5A
		bra.w	loc_3EA54
; ===========================================================================

loc_37C5A:				
		addq.b	#2,$24(a0)
		bsr.w	loc_37C82
		bra.w	loc_3EA54
; ===========================================================================

loc_37C66:				
		move.b	#6,$24(a0)
		move.b	#1,$1A(a0)
		move.b	#8,$2A(a0)
		move.b	#$20,$2E(a0) ; ' '
		bra.w	loc_3EA54
; ===========================================================================

loc_37C82:				
		move.w	$2C(a0),d0
		cmpi.w	#$C,d0
		bcs.s	loc_37C8E
		moveq	#0,d0

loc_37C8E:				
		lea	byte_37CA2(pc,d0.w),a1
		addq.w	#2,d0
		move.w	d0,$2C(a0)
		move.b	(a1)+,$12(a0)
		move.b	(a1)+,$2A(a0)
		rts	
; ===========================================================================
byte_37CA2:	dc.b $FF,$20		; 0
		dc.b   1,$18		; 2
		dc.b $FF,$10		; 4
		dc.b   1,$28		; 6
		dc.b $FF,$20		; 8
		dc.b   1,$10		; 10
; ===========================================================================

loc_37CAE:				
		subq.b	#1,$2A(a0)
		beq.s	loc_37CC6
		bsr.w	loc_3EAC0
		lea	(off_37D88).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_37CC6:				
		subq.b	#2,$24(a0)
		move.b	#$10,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_37CD4:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_37CE6(pc,d0.w),d1
		jsr	off_37CE6(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_37CE6:	dc.w loc_37CEA-off_37CE6; 0 
		dc.w loc_37D06-off_37CE6; 1
; ===========================================================================

loc_37CEA:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_37CF2
		rts	
; ===========================================================================

loc_37CF2:				
		addq.b	#2,$25(a0)
		move.b	#8,$2A(a0)
		move.b	#2,$1A(a0)
		bra.w	loc_37D22
; ===========================================================================

loc_37D06:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_37D0E
		rts	
; ===========================================================================

loc_37D0E:				
		clr.b	$25(a0)
		move.b	#4,$24(a0)
		move.b	#8,$2A(a0)
		bra.w	loc_37C82
; ===========================================================================

loc_37D22:				
		bsr.w	loc_3EA4E
		bne.s	locret_37D74
		_move.b	#-$68,0(a1)
		move.b	#3,$1A(a1)
		move.b	#$20,$28(a1) ; ' '
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#-$D,$C(a1)
		moveq	#0,d0
		btst	#0,1(a0)
		bne.s	loc_37D58
		moveq	#4,d0

loc_37D58:				
		lea	word_37D76(pc,d0.w),a2
		move.w	(a2)+,d0
		add.w	d0,8(a1)
		move.w	(a2)+,$10(a1)
		move.w	#-$100,$12(a1)
		lea	(loc_37728)(pc),a2
		move.l	a2,$2A(a1)

locret_37D74:				
		rts	
; ===========================================================================
word_37D76:	dc.w $FFF5		; 0
		dc.w  $100		; 1
		dc.w	$B		; 2
		dc.w $FF00		; 3
off_37D7E:	dc.l Map_37D96	
		dc.w $3EE
		dc.w $405
		dc.w $C09
off_37D88:	dc.w byte_37D8C-off_37D88; 0 
		dc.w Map_37D90-off_37D88; 1
byte_37D8C:	dc.b   5,  0,  1,$FF	; 0 
Map_37D90:				
		dc.b   9,  1,  2,  1,$FF,  0; 0
; ------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------
Map_37D96:				
		dc.w byte_37D9E-Map_37D96; 0
		dc.w byte_37DC0-Map_37D96; 1
		dc.w byte_37DE2-Map_37D96; 2
		dc.w byte_37E04-Map_37D96; 3
byte_37D9E:	dc.b   0,  4,  0,  5,  0,$1A,  0, $D,$FF,$FE,$F0,  9,  0,  0,  0,  0; 0
					
		dc.b $FF,$FC,  0, $D,  0,  6,  0,  3,$FF,$F4,$10,  1,  0, $E,  0,  7; 16
		dc.b   0, $C		; 32
byte_37DC0:	dc.b   0,  4,  0,  5,  0,$1E,  0, $F,$FF,$FE,$F0,  9,  0,  0,  0,  0; 0
					
		dc.b $FF,$FC,  0, $D,  0,$10,  0,  8,$FF,$F4,$10,  1,  0,$18,  0, $C; 16
		dc.b   0, $C		; 32
byte_37DE2:	dc.b   0,  4,$F8,  1,  0,$22,  0,$11,  0,  7,$F0,  9,  0,  0,  0,  0; 0
					
		dc.b $FF,$FC,  0, $D,  0,$10,  0,  8,$FF,$F4,$10,  1,  0,$18,  0, $C; 16
		dc.b   0, $C		; 32
byte_37E04:	dc.b   0,  2,$F8,  1,$40,$24,$40,$12,$FF,$F8,$F8,  1,$48,$24,$48,$12; 0
					
		dc.b   0,  0		; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Snake	badnick	from MCZ
; ----------------------------------------------------------------------------

Sprite_37E16:				
		moveq	#0,d0
		move.b	$3B(a0),d0
		move.w	off_37E24(pc,d0.w),d1
		jmp	off_37E24(pc,d1.w)
; ===========================================================================
off_37E24:	dc.w loc_37E30-off_37E24; 0 
		dc.w loc_37E42-off_37E24; 1
		dc.w loc_37E98-off_37E24; 2
		dc.w loc_37EB6-off_37E24; 3
		dc.w loc_37ED4-off_37E24; 4
		dc.w loc_37EFC-off_37E24; 5
; ===========================================================================

loc_37E30:				
		bsr.w	loc_365F4
		move.b	#-$80,$16(a0)
		addq.b	#2,$3B(a0)
		bra.w	loc_37F74
; ===========================================================================

loc_37E42:				
		bsr.w	loc_366D6
		move.w	d2,d4
		move.w	d3,d5
		addi.w	#$80,d2	
		cmpi.w	#$100,d2
		bcc.s	loc_37E5E
		addi.w	#$80,d3	
		cmpi.w	#$100,d3
		bcs.s	loc_37E62

loc_37E5E:				
		bra.w	loc_3EA54
; ===========================================================================

loc_37E62:				
		addq.b	#2,$3B(a0)
		move.b	#$10,$3A(a0)
		bclr	#0,1(a0)
		tst.w	d0
		beq.s	loc_37E7C
		bset	#0,1(a0)

loc_37E7C:				
		neg.w	d4
		lsl.w	#3,d4
		andi.w	#-$100,d4
		move.w	d4,$10(a0)
		neg.w	d5
		lsl.w	#3,d5
		andi.w	#-$100,d5
		move.w	d5,$12(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_37E98:				
		subq.b	#1,$3A(a0)
		bmi.s	loc_37EA2
		bra.w	loc_3EA54
; ===========================================================================

loc_37EA2:				
		addq.b	#2,$3B(a0)
		move.b	#8,$39(a0)
		move.b	#$1C,$3A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_37EB6:				
		subq.b	#1,$3A(a0)
		beq.s	loc_37EC4
		bsr.w	loc_3EAC0
		bra.w	loc_3EA54
; ===========================================================================

loc_37EC4:				
		move.b	$39(a0),$3B(a0)
		move.b	#$20,$3A(a0) ; ' '
		bra.w	loc_3EA54
; ===========================================================================

loc_37ED4:				
		subq.b	#1,$3A(a0)
		beq.s	loc_37EDE
		bra.w	loc_3EA54
; ===========================================================================

loc_37EDE:				
		move.b	#6,$3B(a0)
		move.b	#2,$39(a0)
		move.b	#$1C,$3A(a0)
		neg.w	$10(a0)
		neg.w	$12(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_37EFC:				
		movea.w	$3E(a0),a1
		cmpi.b	#-$62,(a1)
		bne.w	loc_3EA48
		bclr	#0,1(a0)
		btst	#0,1(a1)
		beq.s	loc_37F1C
		bset	#0,1(a0)

loc_37F1C:				
		move.b	#-$80,$14(a0)
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		cmpi.b	#6,$3B(a1)
		bne.s	loc_37F6C
		move.w	$10(a1),d2
		asr.w	#8,d2
		move.w	$12(a1),d3
		asr.w	#8,d3
		lea	$10(a0),a2
		move.b	$3A(a1),d0
		moveq	#$18,d1
		moveq	#6,d6

loc_37F4E:				
		move.w	(a2),d4
		move.w	2(a2),d5
		cmp.b	d1,d0
		bcc.s	loc_37F5C
		add.w	d2,d4
		add.w	d3,d5

loc_37F5C:				
		move.w	d4,(a2)+
		move.w	d5,(a2)+
		subi.b	#4,d1
		bcs.s	loc_37F6C
		addq.w	#2,a2
		dbf	d6,loc_37F4E

loc_37F6C:				
		move.w	#$280,d0
		bra.w	loc_3EA3C
; ===========================================================================

loc_37F74:				
		bsr.w	loc_3EA4E
		bne.s	locret_37FE6
		_move.b	#-$62,0(a1)
		move.b	1(a0),1(a1)
		bset	#6,1(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#$A,$3B(a1)
		move.b	#0,$B(a1)
		move.b	#-$80,$E(a1)
		move.b	#7,$F(a1)
		move.w	a0,$3E(a1)
		move.w	8(a0),d2
		move.w	d2,8(a1)
		move.w	$C(a0),d3
		move.w	d3,$C(a1)
		move.b	#-$80,$14(a1)
		bset	#4,1(a1)
		lea	$10(a1),a2
		moveq	#6,d6

loc_37FD6:				
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	#2,(a2)+
		addi.w	#$10,d1
		dbf	d6,loc_37FD6

locret_37FE6:				
		rts	
; ===========================================================================
off_37FE8:	dc.l Map_37FF2	
		dc.w $23C0
		dc.w $404
		dc.w $800B
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_37FF2:				
		dc.w byte_37FF8-Map_37FF2; 0
		dc.w byte_37FF8-Map_37FF2; 1
		dc.w byte_38002-Map_37FF2; 2
byte_37FF8:	dc.b   0,  1,$F8,  9,  0,  0,  0,  0,$FF,$F0; 0	
byte_38002:	dc.b   0,  1,$F8,  5,  0,  6,  0,  3,$FF,$F8; 0	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Crab badnick from MTZ
; ----------------------------------------------------------------------------

Sprite_3800C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3801A(pc,d0.w),d1
		jmp	off_3801A(pc,d1.w)
; ===========================================================================
off_3801A:	dc.w loc_38022-off_3801A; 0 
		dc.w loc_3804E-off_3801A; 1
		dc.w loc_380C4-off_3801A; 2
		dc.w loc_380FC-off_3801A; 3
; ===========================================================================

loc_38022:				
		bsr.w	loc_365F4
		btst	#0,1(a0)
		beq.s	loc_38034
		bset	#0,$22(a0)

loc_38034:				
		move.w	#-$40,$10(a0)
		move.b	#$C,$16(a0)
		move.b	#$18,$17(a0)
		move.w	#$140,$2A(a0)
		rts	
; ===========================================================================

loc_3804E:				
		bsr.w	loc_366D6
		tst.w	d0
		beq.s	loc_3805E
		btst	#0,1(a0)
		beq.s	loc_38068

loc_3805E:				
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcs.s	loc_380AE

loc_38068:				
		bsr.w	loc_3EAC0
		jsr	loc_1EDFA
		cmpi.w	#-8,d1
		blt.s	loc_38096
		cmpi.w	#$C,d1
		bge.s	loc_38096
		add.w	d1,$C(a0)
		subq.w	#1,$2A(a0)
		bmi.s	loc_3809A
		lea	(off_38304).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_38096:				
		neg.w	$10(a0)

loc_3809A:				
		addq.b	#2,$24(a0)
		move.b	#0,$1A(a0)
		move.w	#$3B,$2A(a0) ; ';'
		bra.w	loc_3EA54
; ===========================================================================

loc_380AE:				
		move.b	#6,$24(a0)
		move.b	#0,$1A(a0)
		move.w	#8,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_380C4:				
		tst.b	1(a0)
		bpl.s	loc_380E4
		bsr.w	loc_366D6
		tst.w	d0
		beq.s	loc_380DA
		btst	#0,1(a0)
		beq.s	loc_380E4

loc_380DA:				
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcs.s	loc_380AE

loc_380E4:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_380EE
		bra.w	loc_3EA54
; ===========================================================================

loc_380EE:				
		subq.b	#2,$24(a0)
		move.w	#$140,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_380FC:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3810E(pc,d0.w),d1
		jsr	off_3810E(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_3810E:	dc.w loc_38114-off_3810E; 0 
		dc.w loc_3812A-off_3810E; 1
		dc.w loc_3813E-off_3810E; 2
; ===========================================================================

loc_38114:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3811C
		rts	
; ===========================================================================

loc_3811C:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		bra.w	loc_38292
; ===========================================================================

loc_3812A:				
		tst.b	$2C(a0)
		bne.s	loc_38132
		rts	
; ===========================================================================

loc_38132:				
		addq.b	#2,$25(a0)
		move.w	#$20,$2A(a0) ; ' '
		rts	
; ===========================================================================

loc_3813E:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_38146
		rts	
; ===========================================================================

loc_38146:				
		clr.b	$25(a0)
		clr.b	$2C(a0)
		move.b	#2,$24(a0)
		move.w	#$140,$2A(a0)
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3815C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3816A(pc,d0.w),d1
		jmp	off_3816A(pc,d1.w)
; ===========================================================================
off_3816A:	dc.w loc_38170-off_3816A; 0 
		dc.w loc_381AC-off_3816A; 1
		dc.w loc_38280-off_3816A; 2
; ===========================================================================

loc_38170:				
		bsr.w	loc_365F4
		movea.w	$2C(a0),a1
		move.b	1(a1),d0
		andi.b	#1,d0
		or.b	d0,1(a0)
		move.w	$2E(a0),d0
		beq.s	loc_38198
		move.b	#4,$1A(a0)
		addq.w	#6,8(a0)
		addq.w	#6,$C(a0)

loc_38198:				
		lsr.w	#1,d0
		move.b	byte_381A4(pc,d0.w),$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================
byte_381A4:	dc.b   0		; 0
		dc.b   3		; 1
		dc.b   5		; 2
		dc.b   7		; 3
		dc.b   9		; 4
		dc.b  $B		; 5
		dc.b  $D		; 6
		dc.b  $F		; 7
; ===========================================================================

loc_381AC:				
		movea.w	$2C(a0),a1
		cmpi.b	#-$61,(a1)
		bne.s	loc_381D0
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_381C8(pc,d0.w),d1
		jsr	off_381C8(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_381C8:	dc.w loc_381E0-off_381C8; 0 
		dc.w loc_3822A-off_381C8; 1
		dc.w loc_38244-off_381C8; 2
		dc.w loc_38258-off_381C8; 3
; ===========================================================================

loc_381D0:				
		move.b	#4,$24(a0)
		move.w	#$40,$2A(a0) ; '@'
		bra.w	loc_3EA54
; ===========================================================================

loc_381E0:				
		subq.b	#1,$2A(a0)
		beq.s	loc_381EA
		bmi.s	loc_381EA
		rts	
; ===========================================================================

loc_381EA:				
		addq.b	#2,$25(a0)
		move.w	$2E(a0),d0
		cmpi.w	#$E,d0
		bcc.s	loc_3821A
		move.w	#-$400,d2
		btst	#0,1(a0)
		beq.s	loc_38206
		neg.w	d2

loc_38206:				
		move.w	d2,$10(a0)
		lsr.w	#1,d0
		move.b	byte_38222(pc,d0.w),d1
		move.b	d1,$2A(a0)
		move.b	d1,$2B(a0)
		rts	
; ===========================================================================

loc_3821A:				
		move.w	#$B,$2A(a0)
		rts	
; ===========================================================================
byte_38222:	dc.b  $D		; 0
		dc.b  $C		; 1
		dc.b  $A		; 2
		dc.b   8		; 3
		dc.b   6		; 4
		dc.b   4		; 5
		dc.b   2		; 6
		dc.b   0		; 7
; ===========================================================================

loc_3822A:				
		bsr.w	loc_3EAC0
		subq.b	#1,$2A(a0)
		beq.s	loc_38238
		bmi.s	loc_38238
		rts	
; ===========================================================================

loc_38238:				
		addq.b	#2,$25(a0)
		move.b	#8,$2A(a0)
		rts	
; ===========================================================================

loc_38244:				
		subq.b	#1,$2A(a0)
		beq.s	loc_3824E
		bmi.s	loc_3824E
		rts	
; ===========================================================================

loc_3824E:				
		addq.b	#2,$25(a0)
		neg.w	$10(a0)
		rts	
; ===========================================================================

loc_38258:				
		bsr.w	loc_3EAC0
		subq.b	#1,$2B(a0)
		beq.s	loc_38266
		bmi.s	loc_38266
		rts	
; ===========================================================================

loc_38266:				
		tst.w	$2E(a0)
		bne.s	loc_3827A
		movea.w	$2C(a0),a1
		move.b	#0,$1A(a1)
		st.b	$2C(a1)

loc_3827A:				
		addq.w	#4,sp
		bra.w	loc_3EA48
; ===========================================================================

loc_38280:				
		bsr.w	loc_3EABA
		subi.w	#1,$2A(a0)
		bmi.w	loc_3EA48
		bra.w	loc_3EA54
; ===========================================================================

loc_38292:				
		moveq	#0,d1
		moveq	#7,d6

loc_38296:				
		bsr.w	loc_3EA66
		bne.s	locret_382EE
		_move.b	#-$60,0(a1)
		move.b	#$26,$28(a1) ; '&'
		move.b	#5,$1A(a1)
		move.b	#4,$18(a1)
		move.w	a0,$2C(a1)
		move.w	d1,$2E(a1)
		move.w	8(a0),8(a1)
		move.w	#-$14,d2
		btst	#0,1(a0)
		beq.s	loc_382D8
		neg.w	d2
		tst.w	d1
		beq.s	loc_382D8
		subi.w	#$C,d2

loc_382D8:				
		add.w	d2,8(a1)
		move.w	$C(a0),$C(a1)
		subi.w	#8,$C(a1)
		addq.w	#2,d1
		dbf	d6,loc_38296

locret_382EE:				
		rts	
; ===========================================================================
off_382F0:	dc.l Map_38314	
		dc.w $31C
		dc.w $405
		dc.w $180A
off_382FA:	dc.l Map_38314	
		dc.w $31C
		dc.w $404
		dc.w $C9A
off_38304:	dc.w byte_38308-off_38304; 0 
		dc.w byte_3830E-off_38304; 1
byte_38308:	dc.b  $E,  0,  1,  2,$FF,  0; 0	
byte_3830E:	dc.b  $E,  0,  2,  1,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_38314:				
		dc.w word_38320-Map_38314; 0
		dc.w word_38342-Map_38314; 1
		dc.w word_38364-Map_38314; 2
		dc.w word_38386-Map_38314; 3
		dc.w word_383A0-Map_38314; 4
		dc.w word_383AA-Map_38314; 5
word_38320:	dc.w 4			
		dc.w $EC0A,  $18,   $C,$FFE0; 0
		dc.w $F804,  $21,  $10,	   8; 4
		dc.w $F40A,    0,    0,$FFE8; 8
		dc.w $F40A, $800, $800,	   0; 12
word_38342:	dc.w 4			
		dc.w $EC0A,  $18,   $C,$FFE0; 0
		dc.w $F804,  $21,  $10,	   8; 4
		dc.w $F406, $812, $809,$FFF0; 8
		dc.w $F40A, $809, $804,	   0; 12
word_38364:	dc.w 4			
		dc.w $EC0A,  $18,   $C,$FFE0; 0
		dc.w $F804,  $21,  $10,	   8; 4
		dc.w $F40A,    9,    4,$FFE8; 8
		dc.w $F406,  $12,    9,	   0; 12
word_38386:	dc.w 3			
		dc.w $F804,  $21,  $10,	   8; 0
		dc.w $F40A,    0,    0,$FFE8; 4
		dc.w $F40A, $800, $800,	   0; 8
word_383A0:	dc.w 1			
		dc.w $FC00,  $23,  $11,$FFFC; 0
word_383AA:	dc.w 1			
		dc.w $F40A,  $18,   $C,$FFF4; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Praying mantis dude from MTZ
; ----------------------------------------------------------------------------

Sprite_383B4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_383C2(pc,d0.w),d1
		jmp	off_383C2(pc,d1.w)
; ===========================================================================
off_383C2:	dc.w loc_383CC-off_383C2; 0 
		dc.w loc_383F0-off_383C2; 1
		dc.w loc_38466-off_383C2; 2
		dc.w loc_38482-off_383C2; 3
		dc.w loc_3849E-off_383C2; 4
; ===========================================================================

loc_383CC:				
		bsr.w	loc_365F4
		move.w	#-$40,d0
		btst	#0,1(a0)
		beq.s	loc_383DE
		neg.w	d0

loc_383DE:				
		move.w	d0,$10(a0)
		move.b	#$10,$16(a0)
		move.b	#$10,$17(a0)
		rts	
; ===========================================================================

loc_383F0:				
		tst.b	1(a0)
		bpl.s	loc_3841C
		bsr.w	loc_366D6
		btst	#0,1(a0)
		beq.s	loc_38404
		subq.w	#2,d0

loc_38404:				
		tst.w	d0
		bne.s	loc_3841C
		addi.w	#$80,d2	
		cmpi.w	#$100,d2
		bcc.s	loc_3841C
		addi.w	#$40,d3	; '@'
		cmpi.w	#$80,d3	
		bcs.s	loc_38452

loc_3841C:				
		bsr.w	loc_3EAC0
		jsr	loc_1EDFA
		cmpi.w	#-8,d1
		blt.s	loc_38444
		cmpi.w	#$C,d1
		bge.s	loc_38444
		add.w	d1,$C(a0)
		lea	(off_385D4).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_38444:				
		addq.b	#2,$24(a0)
		move.b	#$3B,$2A(a0) ; ';'
		bra.w	loc_3EA54
; ===========================================================================

loc_38452:				
		addq.b	#4,$24(a0)
		move.b	#3,$1A(a0)
		move.b	#8,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_38466:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_38470
		bra.w	loc_3EA54
; ===========================================================================

loc_38470:				
		subq.b	#2,$24(a0)
		neg.w	$10(a0)
		bchg	#0,$22(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_38482:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_3848C
		bra.w	loc_3EA54
; ===========================================================================

loc_3848C:				
		addq.b	#2,$24(a0)
		move.b	#4,$1A(a0)
		bsr.w	loc_3853E
		bra.w	loc_3EA54
; ===========================================================================

loc_3849E:				
		bra.w	loc_3EA54
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_384A2:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_384B0(pc,d0.w),d1
		jmp	off_384B0(pc,d1.w)
; ===========================================================================
off_384B0:	dc.w loc_384B6-off_384B0; 0 
		dc.w loc_384BE-off_384B0; 1
		dc.w loc_38524-off_384B0; 2
; ===========================================================================

loc_384B6:				
		bsr.w	loc_365F4
		bra.w	loc_3EA54
; ===========================================================================

loc_384BE:				
		tst.b	1(a0)
		bpl.w	loc_3EA48
		subq.w	#1,$2A(a0)
		bmi.s	loc_3851A
		movea.w	$2C(a0),a1
		cmpi.b	#-$5F,(a1)
		bne.s	loc_3851A
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_384F6(pc,d0.w),d1
		jsr	off_384F6(pc,d1.w)
		bsr.w	loc_3EAC0
		lea	(off_385DA).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================
off_384F6:	dc.w loc_384F8-off_384F6 ; DATA	XREF: h+21582o
; ===========================================================================

loc_384F8:				
		bsr.w	loc_366D6
		move.w	word_38516(pc,d0.w),d2
		add.w	d2,$10(a0)
		move.w	word_38516(pc,d1.w),d2
		add.w	d2,$12(a0)
		move.w	#$200,d0
		move.w	d0,d1
		bra.w	loc_3671A
; ===========================================================================
word_38516:	dc.w $FFF0		; 0
		dc.w   $10		; 1
; ===========================================================================

loc_3851A:				
		addq.b	#2,$24(a0)
		move.w	#$60,$2A(a0) ; '`'

loc_38524:				
		subq.w	#1,$2A(a0)
		bmi.w	loc_3EA48
		bsr.w	loc_3EABA
		lea	(off_385DA).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_3853E:				
		lea	$3C(a0),a2
		moveq	#0,d1
		moveq	#1,d6

loc_38546:				
		bsr.w	loc_3EA66
		bne.s	locret_385BA
		_move.b	#-$5E,0(a1)
		move.b	#$2A,$28(a1) ; '*'
		move.b	1(a0),1(a1)
		move.b	#5,$1A(a1)
		move.b	#4,$18(a1)
		move.w	#$78,$2A(a1) ; 'x'
		move.w	a0,$2C(a1)
		move.w	a1,(a2)+
		move.w	#-$200,d0
		btst	#0,1(a1)
		beq.s	loc_3858A
		neg.w	d0
		bset	#0,$22(a1)

loc_3858A:				
		move.w	d0,$10(a1)
		lea	byte_385BC(pc,d1.w),a3
		move.b	(a3)+,d0
		ext.w	d0
		btst	#0,1(a1)
		beq.s	loc_385A0
		neg.w	d0

loc_385A0:				
		add.w	8(a0),d0
		move.w	d0,8(a1)
		move.b	(a3)+,d0
		ext.w	d0
		add.w	$C(a0),d0
		move.w	d0,$C(a1)
		addq.w	#2,d1
		dbf	d6,loc_38546

locret_385BA:				
		rts	
; ===========================================================================
byte_385BC:	dc.b   6		; 0
		dc.b   0		; 1
		dc.b $F0		; 2
		dc.b   0		; 3
off_385C0:	dc.l Map_385E2	
		dc.w $243C
		dc.w $405
		dc.w $1006
off_385CA:	dc.l Map_385E2	
		dc.w $243C
		dc.w $404
		dc.w $109A
off_385D4:	dc.w byte_385D6-off_385D4 
byte_385D6:	dc.b $13,  0,  2,$FF	; 0 
off_385DA:	dc.w byte_385DC-off_385DA 
byte_385DC:	dc.b   3,  5,  6,  7,  8,$FF; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_385E2:				
		dc.w word_385F4-Map_385E2; 0
		dc.w word_3862E-Map_385E2; 1
		dc.w word_38668-Map_385E2; 2
		dc.w word_386A2-Map_385E2; 3
		dc.w word_386DC-Map_385E2; 4
		dc.w word_386F6-Map_385E2; 5
		dc.w word_38708-Map_385E2; 6
		dc.w word_3871A-Map_385E2; 7
		dc.w word_3872C-Map_385E2; 8
word_385F4:	dc.w 7			
		dc.w $F904,  $1A,   $D,$FFF4; 0
		dc.w  $100,  $1C,   $E,$FFF4; 4
		dc.w $F009,    0,    0,$FFF0; 8
		dc.w	 9,    6,    3,$FFF0; 12
		dc.w	 1,   $C,    6,	   8; 16
		dc.w $F704,  $1A,   $D,$FFE0; 20
		dc.w $FF00,  $1C,   $E,$FFE0; 24
word_3862E:	dc.w 7			
		dc.w $F804,  $1A,   $D,$FFF4; 0
		dc.w	 0,  $1C,   $E,$FFF4; 4
		dc.w $F009,    0,    0,$FFF0; 8
		dc.w	 9,   $E,    7,$FFF0; 12
		dc.w	 1,   $C,    6,	   8; 16
		dc.w $F804,  $1A,   $D,$FFE0; 20
		dc.w	 0,  $1C,   $E,$FFE0; 24
word_38668:	dc.w 7			
		dc.w $F704,  $1A,   $D,$FFF4; 0
		dc.w $FF00,  $1C,   $E,$FFF4; 4
		dc.w $F009,    0,    0,$FFF0; 8
		dc.w	 9,  $14,   $A,$FFF0; 12
		dc.w	 1,   $C,    6,	   8; 16
		dc.w $F904,  $1A,   $D,$FFE0; 20
		dc.w  $100,  $1C,   $E,$FFE0; 24
word_386A2:	dc.w 7			
		dc.w $E004,$181E,$180F,$FFF4; 0
		dc.w $E800,$181D,$180E,$FFFC; 4
		dc.w $F009,    0,    0,$FFF0; 8
		dc.w	 9,    6,    3,$FFF0; 12
		dc.w	 1,   $C,    6,	   8; 16
		dc.w $E004,$181E,$180F,$FFE0; 20
		dc.w $E800,$181D,$180E,$FFE8; 24
word_386DC:	dc.w 3			
		dc.w $F009,    0,    0,$FFF0; 0
		dc.w	 9,    6,    3,$FFF0; 4
		dc.w	 1,   $C,    6,	   8; 8
word_386F6:	dc.w 2			
		dc.w $F004,  $1A,   $D,$FFF0; 0
		dc.w $F800,  $1C,   $E,$FFF0; 4
word_38708:	dc.w 2			
		dc.w	 0,  $1D,   $E,$FFF0; 0
		dc.w  $804,  $1E,   $F,$FFF0; 4
word_3871A:	dc.w 2			
		dc.w	 0,$181C,$180E,	   8
		dc.w  $804,$181A,$180D,	   0
word_3872C:	dc.w 2			
		dc.w $F004,$181E,$180F,	   0; 0
		dc.w $F800,$181D,$180E,	   8; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Glowbug from MCZ
; ----------------------------------------------------------------------------

Sprite_3873E:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3874C(pc,d0.w),d1
		jmp	off_3874C(pc,d1.w)
; ===========================================================================
off_3874C:	dc.w loc_3875A-off_3874C; 0 
		dc.w loc_38766-off_3874C; 1
		dc.w loc_38794-off_3874C; 2
		dc.w loc_38832-off_3874C; 3
		dc.w loc_3885C-off_3874C; 4
		dc.w loc_38880-off_3874C; 5
		dc.w loc_3888E-off_3874C; 6
; ===========================================================================

loc_3875A:				
		bsr.w	loc_365F4
		move.w	#$40,$2A(a0) ; '@'
		rts	
; ===========================================================================

loc_38766:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_38770
		bra.w	loc_3EA7E
; ===========================================================================

loc_38770:				
		addq.b	#2,$24(a0)
		move.w	#-$100,$10(a0)
		move.w	#$40,$12(a0) ; '@'
		move.w	#2,$2E(a0)
		clr.w	$2A(a0)
		move.w	#$80,$30(a0)
		bra.w	loc_3EA7E
; ===========================================================================

loc_38794:				
		subq.w	#1,$30(a0)
		bmi.s	loc_387FC
		move.w	$2A(a0),d0
		bmi.w	loc_3EA48
		bclr	#0,1(a0)
		bclr	#0,$22(a0)
		tst.w	$10(a0)
		bmi.s	loc_387C0
		bset	#0,1(a0)
		bset	#0,$22(a0)

loc_387C0:				
		addq.w	#1,d0
		move.w	d0,$2A(a0)
		move.w	$2C(a0),d1
		move.w	word_38810(pc,d1.w),d2
		cmp.w	d2,d0
		bcs.s	loc_387EC
		addq.w	#2,d1
		move.w	d1,$2C(a0)
		lea	byte_38820(pc,d1.w),a1
		tst.b	(a1)+
		beq.s	loc_387E4
		neg.w	$2E(a0)

loc_387E4:				
		tst.b	(a1)+
		beq.s	loc_387EC
		neg.w	$12(a0)

loc_387EC:				
		move.w	$2E(a0),d0
		add.w	d0,$10(a0)

loc_387F4:
		bsr.w	loc_3EAC0
		bra.w	loc_3EA7E
; ===========================================================================

loc_387FC:				
		addq.b	#2,$24(a0)
		move.w	#$80,$30(a0)
		ori.b	#-$80,$20(a0)
		bra.w	loc_3EA7E
; ===========================================================================
word_38810:	dc.w  $100		; 0
		dc.w  $1A0		; 1
		dc.w  $208		; 2
		dc.w  $285		; 3
		dc.w  $300		; 4
		dc.w  $340		; 5
		dc.w  $390		; 6
		dc.w  $440		; 7
byte_38820:	dc.b $F0		; 0
		dc.b   0		; 1
		dc.b   1		; 2
		dc.b   1		; 3
		dc.b   0		; 4
		dc.b   1		; 5
		dc.b   1		; 6
		dc.b   1		; 7
		dc.b   0		; 8
		dc.b   1		; 9
		dc.b   0		; 10
		dc.b   1		; 11
		dc.b   1		; 12
		dc.b   0		; 13
		dc.b   0		; 14
		dc.b   1		; 15
		dc.b   0		; 16
		dc.b   1		; 17
; ===========================================================================

loc_38832:				
		move.b	$24(a0),d2
		lea	(off_388B6).l,a1
		bsr.w	loc_3EA6C
		cmp.b	$24(a0),d2
		bne.s	loc_3884A
		bra.w	loc_3EA7E
; ===========================================================================

loc_3884A:				
		clr.l	$1A(a0)
		clr.w	$1E(a0)
		move.b	#3,$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3885C:				
		subq.w	#1,$30(a0)
		bmi.s	loc_38870
		lea	(off_388DA).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA7E
; ===========================================================================

loc_38870:				
		addq.b	#2,$24(a0)
		clr.l	$1A(a0)
		clr.w	$1E(a0)
		bra.w	loc_3EA7E
; ===========================================================================

loc_38880:				
		lea	(off_388E6).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA7E
; ===========================================================================

loc_3888E:				
		move.b	#4,$24(a0)
		move.w	#$80,$30(a0)
		andi.b	#$7F,$20(a0) ; ''
		clr.l	$1A(a0)
		clr.w	$1E(a0)
		bra.w	loc_3EA7E
; ===========================================================================
off_388AC:	dc.l Map_388F0	
		dc.w $83A8
		dc.w $404
		dc.w $1006
off_388B6:	dc.w byte_388B8-off_388B6 
byte_388B8:	dc.b   0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  1; 0
					
		dc.b   0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  2,  3,  4; 16
		dc.b $FC,  0		; 32
off_388DA:	dc.w byte_388DC-off_388DA 
byte_388DC:	dc.b   0,  2,  0,  3,  0,  4,  0,  3,  0,$FF; 0	
off_388E6:	dc.w Map_388E8-off_388E6 
Map_388E8:				
		dc.b   3,  4,  3,  2,  1,  0,$FC,  0; 0
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_388F0:				
		dc.w word_388FA-Map_388F0; 0
		dc.w word_38904-Map_388F0; 1
		dc.w word_38916-Map_388F0; 2
		dc.w word_38938-Map_388F0; 3
		dc.w word_3896A-Map_388F0; 4
word_388FA:	dc.w 1			
		dc.w $F809,    0,    0,$FFF0; 0
word_38904:	dc.w 2			
		dc.w $F805,$2006,$2003,$FFF8; 0
		dc.w $F809,    0,    0,$FFF0; 4
word_38916:	dc.w 4			
		dc.w $F801,$200A,$2005,$FFF8; 0
		dc.w $F801,$280A,$2805,	   0; 4
		dc.w $F805,$2006,$2003,$FFF8; 8
		dc.w $F809,    0,    0,$FFF0; 12
word_38938:	dc.w 6			
		dc.w $F005,$200C,$2006,$FFF0; 0
		dc.w $F005,$280C,$2806,	   0; 4
		dc.w	 5,$300C,$3006,$FFF0; 8
		dc.w	 5,$380C,$3806,	   0; 12
		dc.w $F805,$2006,$2003,$FFF8; 16
		dc.w $F809,    0,    0,$FFF0; 20
word_3896A:	dc.w 6			
		dc.w $F005,$2010,$2008,$FFF0; 0
		dc.w $F005,$2810,$2808,	   0; 4
		dc.w	 5,$3010,$3008,$FFF0; 8
		dc.w	 5,$3810,$3808,	   0; 12
		dc.w $F805,$2006,$2003,$FFF8; 16
		dc.w $F809,    0,    0,$FFF0; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Exploding star from MTZ
; ----------------------------------------------------------------------------

Sprite_3899C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_389AA(pc,d0.w),d1
		jmp	off_389AA(pc,d1.w)
; ===========================================================================
off_389AA:	dc.w loc_389B2-off_389AA; 0 
		dc.w loc_389B6-off_389AA; 1
		dc.w loc_389DA-off_389AA; 2
		dc.w loc_38A2C-off_389AA; 3
; ===========================================================================

loc_389B2:				
		bra.w	loc_365F4
; ===========================================================================

loc_389B6:				
		bsr.w	loc_366D6
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcc.s	loc_389CE
		addi.w	#$40,d3	; '@'
		cmpi.w	#$80,d3	
		bcs.s	loc_389D2

loc_389CE:				
		bra.w	loc_3EA54
; ===========================================================================

loc_389D2:				
		addq.b	#2,$24(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_389DA:				
		bsr.w	loc_366D6
		tst.w	d2
		bpl.s	loc_389E4
		neg.w	d2

loc_389E4:				
		cmpi.w	#$10,d2
		bcs.s	loc_389FA
		cmpi.w	#$60,d2	; '`'
		bcc.s	loc_389FA
		move.w	word_38A1A(pc,d0.w),$10(a0)
		bsr.w	loc_38A1E

loc_389FA:				
		tst.w	d3
		bpl.s	loc_38A00
		neg.w	d3

loc_38A00:				
		cmpi.w	#$10,d3
		bcs.s	loc_38A16
		cmpi.w	#$60,d3	; '`'
		bcc.s	loc_38A16
		move.w	word_38A1A(pc,d1.w),$12(a0)
		bsr.w	loc_38A1E

loc_38A16:				
		bra.w	loc_3EA54
; ===========================================================================
word_38A1A:	dc.w $FFC0		; 0
		dc.w   $40		; 1
; ===========================================================================

loc_38A1E:				
		move.b	#6,$24(a0)
		move.b	#$40,$2A(a0) ; '@'
		rts	
; ===========================================================================

loc_38A2C:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_38A44
		bsr.w	loc_3EAC0
		lea	(off_38A90).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_38A44:				
		_move.b	#$27,0(a0) ; '''
		move.b	#2,$24(a0)
		bsr.w	loc_38A58
		bra.w	loc_3EA54
; ===========================================================================

loc_38A58:				
		move.b	#$30,d2	; '0'
		moveq	#4,d6
		lea	(word_38A68).l,a2
		bra.w	loc_3681A
; ===========================================================================
word_38A68:	dc.w $F8		; 0 
		dc.w $FC
		dc.w $200
		dc.w $8FC
		dc.w $3FF
		dc.w $301
		dc.w $808
		dc.w $303
		dc.w $401
		dc.w $F808
		dc.w $FD03
		dc.w $400
		dc.w $F8FC
		dc.w $FDFF
		dc.w $300
off_38A86:	dc.l Map_38A96	
		dc.w $8368
		dc.w $404
		dc.w $100B
off_38A90:	dc.w Map_38A92-off_38A90 
Map_38A92:				
		dc.b   1,  0,  1,$FF	; 0
; ----------------------------------------------------------------------------
; Unknown sprite mappings
; ----------------------------------------------------------------------------
Map_38A96:	dc.w word_38AA0-Map_38A96; 0	
		dc.w word_38AB2-Map_38A96; 1
		dc.w word_38ACC-Map_38A96; 2
		dc.w word_38AD6-Map_38A96; 3
		dc.w word_38AE0-Map_38A96; 4
word_38AA0:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0; 0
		dc.w $F007, $800, $800,	   0; 4
word_38AB2:	dc.w 3			
		dc.w $FD00,$200E,$2007,$FFFC; 0
		dc.w $F007,    0,    0,$FFF0; 4
		dc.w $F007, $800, $800,	   0; 8
word_38ACC:	dc.w 1			
		dc.w $F801,    8,    4,$FFFC; 0
word_38AD6:	dc.w 1			
		dc.w $FC04,   $A,    5,$FFF8; 0
word_38AE0:	dc.w 1			
		dc.w $F801,   $C,    6,$FFFC; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Guy with shield that crawls along floor from CNZ
; ----------------------------------------------------------------------------

Sprite_38AEA:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_38AF8(pc,d0.w),d1
		jmp	off_38AF8(pc,d1.w)
; ===========================================================================
off_38AF8:	dc.w loc_38AFE-off_38AF8; 0 
		dc.w loc_38B10-off_38AF8; 1
		dc.w loc_38B62-off_38AF8; 2
; ===========================================================================

loc_38AFE:				
		bsr.w	loc_365F4
		move.w	#-$40,$10(a0)
		move.w	#$80,$2A(a0)
		rts	
; ===========================================================================

loc_38B10:				
		tst.b	$2B(a0)
		beq.s	loc_38B1E
		subq.b	#1,$2B(a0)
		bra.w	loc_38B2C
; ===========================================================================

loc_38B1E:				
		bsr.w	loc_366D6
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcs.s	loc_38B4E

loc_38B2C:				
		subq.b	#1,$2A(a0)
		bne.s	loc_38B3C
		move.w	#$80,$2A(a0)
		neg.w	$10(a0)

loc_38B3C:				
		bsr.w	loc_3EAC0
		lea	(off_38CB8).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_38B4E:				
		addq.b	#2,$24(a0)
		move.b	#$28,$2B(a0) ; '('
		move.b	#2,$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_38B62:				
		subq.b	#1,$2B(a0)
		bmi.s	loc_38B78
		cmpi.b	#$14,$2B(a0)
		bne.s	loc_38B74
		bsr.w	loc_38C22

loc_38B74:				
		bra.w	loc_3EA54
; ===========================================================================

loc_38B78:				
		subq.b	#2,$24(a0)
		move.b	#$40,$2B(a0) ; '@'
		bra.w	loc_3EA54
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_38B86:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_38B94(pc,d0.w),d1
		jmp	off_38B94(pc,d1.w)
; ===========================================================================
off_38B94:	dc.w loc_38B9A-off_38B94; 0 
		dc.w loc_38BAC-off_38B94; 1
		dc.w loc_38BFE-off_38B94; 2
; ===========================================================================

loc_38B9A:				
		bsr.w	loc_365F4
		move.w	#-$40,$12(a0)
		move.w	#$80,$2A(a0)
		rts	
; ===========================================================================

loc_38BAC:				
		tst.b	$2B(a0)
		beq.s	loc_38BBA
		subq.b	#1,$2B(a0)
		bra.w	loc_38BC8
; ===========================================================================

loc_38BBA:				
		bsr.w	loc_366D6
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcs.s	loc_38BEA

loc_38BC8:				
		subq.b	#1,$2A(a0)
		bne.s	loc_38BD8
		move.w	#$80,$2A(a0)
		neg.w	$12(a0)

loc_38BD8:				
		bsr.w	loc_3EAC0
		lea	(off_38CBE).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_38BEA:				
		addq.b	#2,$24(a0)
		move.b	#$28,$2B(a0) ; '('
		move.b	#5,$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_38BFE:				
		subq.b	#1,$2B(a0)
		bmi.s	loc_38C14
		cmpi.b	#$14,$2B(a0)
		bne.s	loc_38C10
		bsr.w	loc_38C6E

loc_38C10:				
		bra.w	loc_3EA54
; ===========================================================================

loc_38C14:				
		subq.b	#2,$24(a0)
		move.b	#$40,$2B(a0) ; '@'
		bra.w	loc_3EA54
; ===========================================================================

loc_38C22:				
		bsr.w	loc_3EA66
		bne.s	locret_38C6C
		_move.b	#-$68,0(a1)
		move.b	#6,$1A(a1)
		move.b	#$34,$28(a1) ; '4'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#-$300,$12(a1)
		move.w	#$100,d1
		lea	($FFFFB000).w,a2
		move.w	8(a0),d0
		cmp.w	8(a2),d0
		bcs.s	loc_38C60
		neg.w	d1

loc_38C60:				
		move.w	d1,$10(a1)
		lea	(loc_37742)(pc),a2
		move.l	a2,$2A(a1)

locret_38C6C:				
		rts	
; ===========================================================================

loc_38C6E:				
		bsr.w	loc_3EA66
		bne.s	locret_38CAC
		_move.b	#-$68,0(a1)
		move.b	#6,$1A(a1)
		move.b	#$34,$28(a1) ; '4'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	#$300,d1
		btst	#0,1(a0)
		beq.s	loc_38CA0
		neg.w	d1

loc_38CA0:				
		move.w	d1,$10(a1)
		lea	(loc_37742)(pc),a2
		move.l	a2,$2A(a1)

locret_38CAC:				
		rts	
; ===========================================================================
off_38CAE:	dc.l Map_38CCA	
		dc.w $252D
		dc.w $404
		dc.w $80B
off_38CB8:	dc.w byte_38CBA-off_38CB8 
byte_38CBA:	dc.b   9,  0,  1,$FF	; 0 
off_38CBE:	dc.w byte_38CC0-off_38CBE 
byte_38CC0:	dc.b   9,  3,  4,$FF	; 0 
off_38CC4:	dc.w byte_38CC6-off_38CC4 
byte_38CC6:	dc.b   3,  6,  7,$FF	; 0 
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Map_38CCA:	dc.w byte_38CD6-byte_38CC6; 0 ;	DATA XREF: h+20822o h+21D3Ao
		dc.w byte_38CF8-byte_38CC6; 1
		dc.w byte_38D1A-byte_38CC6; 2
		dc.w Map_38D3C-byte_38CC6; 3
		dc.w byte_38D5E-byte_38CC6; 4
		dc.w byte_38D80-byte_38CC6; 5
byte_38CD6:	dc.b   0,$DC,  0,$E6,  0,  4,$F4,  0,  0,  0,  0,  0,$FF,$F8,$FC,  9; 0
					
		dc.b   0,  1,  0,  0,$FF,$E8,$F4,  0,  8,  0,  8,  0,  0,  0,$FC,  9; 16
		dc.b   8,  1		; 32
byte_38CF8:	dc.b   8,  0,  0,  0,  0,  4,$F4,  0,  0,  0,  0,  0,$FF,$F8,$FC,  9; 0
					
		dc.b   0,  7,  0,  3,$FF,$E8,$F4,  0,  8,  0,  8,  0,  0,  0,$FC,  9; 16
		dc.b   8,  7		; 32
byte_38D1A:	dc.b   8,  3,  0,  0,  0,  4,$F4,  4,  0, $D,  0,  6,$FF,$F0,$FC,  9; 0
					
		dc.b   0,  1,  0,  0,$FF,$E8,$F4,  4,  8, $D,  8,  6,  0,  0,$FC,  9; 16
		dc.b   8,  1		; 32
Map_38D3C:				
		dc.b   8,  0,  0,  0,  0,  4,$E8,  6,  0, $F,  0,  7,$FF,$F4,$F8,  0; 0
		dc.b   0,$15,  0, $A,  0,  4,  0,  6,$10, $F,$10,  7,$FF,$F4,  0,  0; 16
		dc.b $10,$15		; 32
byte_38D5E:	dc.b $10, $A,  0,  4,  0,  4,$E8,  6,  0,$16,  0, $B,$FF,$F4,$F8,  0; 0
					
		dc.b   0,$15,  0, $A,  0,  4,  0,  6,$10,$16,$10, $B,$FF,$F4,  0,  0; 16
		dc.b $10,$15		; 32
byte_38D80:	dc.b $10, $A,  0,  4,  0,  4,$E8,  6,  0, $F,  0,  7,$FF,$F4,$F0,  1; 0
					
		dc.b   0,$1C,  0, $E,  0,  4,  0,  6,$10, $F,$10,  7,$FF,$F4,  0,  1; 16
		dc.b $10,$1C,$10, $E,  0,  4,  0,  1,$FC,  0,  0,$1E,  0, $F,$FF,$FC; 32
		dc.b   0,  1,$FC,  0,  0,$1F,  0, $F,$FF,$FC; 48
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Spider badnick from CPZ
; ----------------------------------------------------------------------------

Sprite_38DBA:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_38DC8(pc,d0.w),d1
		jmp	off_38DC8(pc,d1.w)
; ===========================================================================
off_38DC8:	dc.w loc_38DCC-off_38DC8; 0 
		dc.w loc_38E0C-off_38DC8; 1
; ===========================================================================

loc_38DCC:				
		bsr.w	loc_365F4
		move.w	#-$40,d0
		btst	#0,1(a0)
		beq.s	loc_38DDE
		neg.w	d0

loc_38DDE:				
		move.w	d0,$10(a0)
		move.w	#$FF,$2A(a0)
		move.b	#2,$2D(a0)
		lea	(byte_391E0).l,a2
		bsr.w	loc_367D0
		lea	(byte_391E4).l,a2
		bsr.w	loc_367D0
		lea	(byte_391E8).l,a2
		bra.w	loc_367D0
; ===========================================================================

loc_38E0C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_38E46(pc,d0.w),d1
		jsr	off_38E46(pc,d1.w)
		bsr.w	loc_3EAC0
		moveq	#0,d0
		moveq	#$10,d1
		movea.w	$3C(a0),a1
		bsr.w	loc_36760
		movea.w	$3E(a0),a1
		move.w	8(a0),8(a1)
		movea.w	$3A(a0),a1
		move.w	8(a0),8(a1)
		lea	$3A(a0),a2
		bra.w	loc_39182
; ===========================================================================
off_38E46:	dc.w loc_38E52-off_38E46; 0 
		dc.w loc_38E9A-off_38E46; 1
		dc.w loc_38EB4-off_38E46; 2
		dc.w loc_38F3E-off_38E46; 3
		dc.w loc_38F58-off_38E46; 4
		dc.w loc_38F62-off_38E46; 5
; ===========================================================================

loc_38E52:				
		bsr.w	loc_366D6
		addi.w	#$40,d2	; '@'
		cmpi.w	#$80,d2	
		bcc.s	loc_38E66
		cmpi.w	#-$80,d3
		bhi.s	loc_38E84

loc_38E66:				
		subq.w	#1,$2A(a0)
		bpl.s	locret_38E82
		move.w	#$FF,$2A(a0)
		neg.w	$10(a0)
		bchg	#0,1(a0)
		bchg	#0,$22(a0)

locret_38E82:				
		rts	
; ===========================================================================

loc_38E84:				
		addq.b	#2,$25(a0)
		move.w	$10(a0),$2E(a0)
		clr.w	$10(a0)
		move.b	#$10,$2C(a0)
		rts	
; ===========================================================================

loc_38E9A:				
		subq.b	#1,$2C(a0)
		bmi.s	loc_38EA2
		rts	
; ===========================================================================

loc_38EA2:				
		addq.b	#2,$25(a0)
		move.w	#$200,$12(a0)
		move.b	#$40,$2C(a0) ; '@'
		rts	
; ===========================================================================

loc_38EB4:				
		tst.b	$30(a0)
		bne.s	loc_38EEE
		subq.b	#1,$2C(a0)
		beq.s	loc_38ED6
		cmpi.b	#$20,$2C(a0) ; ' '
		bne.s	loc_38ECC
		neg.w	$12(a0)

loc_38ECC:				
		lea	(off_39214).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_38ED6:				
		move.b	#0,$25(a0)
		clr.w	$12(a0)
		move.w	$2E(a0),$10(a0)
		move.b	#0,$1A(a0)
		rts	
; ===========================================================================

loc_38EEE:				
		addq.b	#2,$25(a0)
		movea.w	$32(a0),a1
		move.b	#-$7F,$2A(a1)
		clr.w	$10(a1)
		clr.w	$12(a1)
		move.b	#$E,$1C(a1)
		move.b	#1,$1A(a0)
		tst.w	$12(a0)
		bmi.s	loc_38F2A
		neg.w	$12(a0)
		move.b	$2C(a0),d0
		subi.b	#$40,d0	; '@'
		neg.w	d0
		addq.b	#1,d0
		move.b	d0,$2C(a0)

loc_38F2A:				
		move.b	#1,$2A(a0)
		move.b	#$10,$2B(a0)
		move.b	#$20,$37(a0) ; ' '
		rts	
; ===========================================================================

loc_38F3E:				
		bsr.w	loc_3913A
		bsr.w	loc_390BC
		subq.b	#1,$2C(a0)
		beq.s	loc_38F4E
		rts	
; ===========================================================================

loc_38F4E:				
		addq.b	#2,$25(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_38F58:				
		bsr.w	loc_3913A
		bra.w	loc_390BC
; ===========================================================================
		rts	
; ===========================================================================

loc_38F62:				
		bra.w	loc_3913A
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_38F66:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_38F74(pc,d0.w),d1
		jmp	off_38F74(pc,d1.w)
; ===========================================================================
off_38F74:	dc.w loc_38F7C-off_38F74; 0 
		dc.w loc_38F88-off_38F74; 1
		dc.w loc_38FE8-off_38F74; 2
		dc.w loc_39022-off_38F74; 3
; ===========================================================================

loc_38F7C:				
		bsr.w	loc_365F4
		move.b	#3,$1A(a0)
		rts	
; ===========================================================================

loc_38F88:				
		movea.w	$2C(a0),a1
		cmpi.b	#-$59,(a1)
		bne.w	loc_3EA48
		bsr.w	loc_367AA
		movea.w	$2C(a0),a1
		move.b	$1A(a1),d0
		addq.b	#3,d0
		move.b	d0,$1A(a0)
		move.b	$21(a0),d0
		beq.s	loc_38FD8
		clr.b	$21(a0)
		cmpi.b	#4,$25(a1)
		bne.s	loc_38FD8
		andi.b	#3,d0
		beq.s	loc_38FD8
		clr.b	$20(a0)
		addq.b	#2,$24(a0)
		add.w	d0,d0
		st.b	$30(a1)
		move.w	loc_38FD8+2(pc,d0.w),$32(a1)
		move.w	word_38FE0(pc,d0.w),$34(a1)

loc_38FD8:				
		bra.w	loc_3EA42
; ===========================================================================
		dc.w $B000		; 0
		dc.w $B040		; 1
word_38FE0:	dc.w $B000		; 0
		dc.w $F604		; 1
		dc.w $F606		; 2
		dc.w $F604		; 3
; ===========================================================================

loc_38FE8:				
		movea.w	$2C(a0),a1
		move.w	$32(a1),d0
		beq.s	loc_3901A
		movea.w	d0,a2
		cmpi.b	#-$59,(a1)
		bne.s	loc_3900A
		move.w	8(a0),8(a2)
		move.w	$C(a0),$C(a2)
		bra.w	loc_3EA42
; ===========================================================================

loc_3900A:				
		move.b	#0,$2A(a2)
		bset	#1,$22(a2)
		bra.w	loc_3EA48
; ===========================================================================

loc_3901A:				
		addq.b	#2,$24(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_39022:				
		movea.w	$2C(a0),a1
		cmpi.b	#-$59,(a1)
		bne.w	loc_3EA48
		bra.w	loc_3EA42
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_39032:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_39040(pc,d0.w),d1
		jmp	off_39040(pc,d1.w)
; ===========================================================================
off_39040:	dc.w loc_39044-off_39040; 0 
		dc.w loc_39056-off_39040; 1
; ===========================================================================

loc_39044:				
		bsr.w	loc_365F4
		move.b	#2,$1A(a0)
		subi.w	#$C,$C(a0)
		rts	
; ===========================================================================

loc_39056:				
		movea.w	$2C(a0),a1
		cmpi.b	#-$59,(a1)
		bne.w	loc_3EA48
		bra.w	loc_3EA42
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_39066:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_39074(pc,d0.w),d1
		jmp	off_39074(pc,d1.w)
; ===========================================================================
off_39074:	dc.w loc_39078-off_39074; 0 
		dc.w loc_39082-off_39074; 1
; ===========================================================================

loc_39078:				
		bsr.w	loc_365F4
		subq.w	#8,$C(a0)
		rts	
; ===========================================================================

loc_39082:				
		movea.w	$2C(a0),a1
		cmpi.b	#-$59,(a1)
		bne.w	loc_3EA48
		move.w	$C(a1),d0
		sub.w	$C(a0),d0
		bmi.s	loc_3909E
		lsr.w	#4,d0
		move.b	d0,$1A(a0)

loc_3909E:				
		bra.w	loc_3EA42
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_390A2:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_390B0(pc,d0.w),d1
		jmp	off_390B0(pc,d1.w)
; ===========================================================================
off_390B0:	dc.w loc_390B4-off_390B0; 0 
		dc.w loc_390B8-off_390B0; 1
; ===========================================================================

loc_390B4:				
		bra.w	loc_365F4
; ===========================================================================

loc_390B8:				
		bra.w	loc_3EA54
; ===========================================================================

loc_390BC:				
		movea.w	$34(a0),a1
		move.w	(a1),d0
		tst.b	$31(a0)
		beq.s	loc_390E6
		subq.b	#1,$37(a0)
		beq.s	loc_390FA
		move.b	$36(a0),d1
		andi.b	#$C,d0
		beq.s	locret_390E4
		cmp.b	d1,d0
		beq.s	locret_390E4
		move.b	d0,$36(a0)
		addq.b	#1,$38(a0)

locret_390E4:				
		rts	
; ===========================================================================

loc_390E6:				
		andi.b	#$C,d0
		beq.s	locret_390E4
		nop	
		st.b	$31(a0)
		move.b	d0,$36(a0)
		nop	
		rts	
; ===========================================================================

loc_390FA:				
		cmpi.b	#4,$38(a0)
		bcs.s	loc_3912A
		move.b	#$A,$25(a0)
		clr.w	$12(a0)
		clr.b	$20(a0)
		movea.w	$32(a0),a2
		move.b	#0,$2A(a2)
		bset	#1,$22(a2)
		move.b	#0,$1C(a2)
		clr.w	$32(a0)

loc_3912A:				
		move.b	#$20,$37(a0) ; ' '
		clr.b	$31(a0)
		clr.b	$38(a0)
		rts	
; ===========================================================================

loc_3913A:				
		subq.b	#1,$2A(a0)
		bne.s	locret_39152
		move.b	$2B(a0),$2A(a0)
		subq.b	#1,$2B(a0)
		beq.s	loc_39154
		bchg	#5,2(a0)

locret_39152:				
		rts	
; ===========================================================================

loc_39154:				
		_move.b	#$27,0(a0) ; '''
		move.b	#2,$24(a0)
		bset	#5,2(a0)
		move.w	$32(a0),d0
		beq.s	locret_39180
		movea.w	d0,a2
		move.b	#0,$2A(a2)
		bset	#1,$22(a2)
		move.b	#$B,$20(a0)

locret_39180:				
		rts	
; ===========================================================================

loc_39182:				
		tst.w	(f_two_player).w
		beq.s	loc_3918C
		bra.w	loc_3EA42
; ===========================================================================

loc_3918C:				
		move.w	8(a0),d0
		andi.w	#-$80,d0
		sub.w	(v_camera_x_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	loc_391A4
		bra.w	loc_3EA42
; ===========================================================================

loc_391A4:				
		lea	(v_respawn_list).w,a3
		moveq	#0,d0
		move.b	$23(a0),d0
		beq.s	loc_391B6
		bclr	#7,2(a3,d0.w)

loc_391B6:				
		tst.b	$30(a0)
		beq.s	loc_391CC
		movea.w	$32(a0),a3
		move.b	#0,$2A(a3)
		bset	#1,$22(a3)

loc_391CC:				
		moveq	#0,d6
		move.b	$2D(a0),d6

loc_391D2:				
		movea.w	(a2)+,a1
		bsr.w	loc_3EA5A
		dbf	d6,loc_391D2
		bra.w	loc_3EA48
; ===========================================================================
byte_391E0:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $A9		; 2
		dc.b $3A		; 3
byte_391E4:	dc.b   0		; 0 
		dc.b $3C		; 1
		dc.b $A8		; 2
		dc.b $38		; 3
byte_391E8:	dc.b   0		; 0 
		dc.b $3A		; 1
		dc.b $AA		; 2
		dc.b $3C		; 3
off_391EC:	dc.l Map_3921A	; 0 
		dc.w $A500
		dc.w $404
		dc.w $100B
off_391F6:	dc.l Map_3921A	
		dc.w $A500
		dc.w $401
		dc.w $10D7
off_39200:	dc.l Map_3921A	
		dc.w $A500
		dc.w $404
		dc.w $400
off_3920A:	dc.l Map_39228	
		dc.w $A500
		dc.w $405
		dc.w $400
off_39214:	dc.w byte_39216-off_39214 
byte_39216:	dc.b   7,  0,  1,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3921A:				
		dc.w word_3923A-Map_3921A; 0
		dc.w word_39254-Map_3921A; 1
		dc.w word_3926E-Map_3921A; 2
		dc.w word_39278-Map_3921A; 3
		dc.w word_39282-Map_3921A; 4
		dc.w word_3928C-Map_3921A; 5
		dc.w word_39296-Map_3921A; 6
; -------------------------------------------------------------------------------
; Unknown sprite mappings
; -------------------------------------------------------------------------------
Map_39228:				
		dc.w word_392A0-Map_39228; 0
		dc.w word_392AA-Map_39228; 1
		dc.w word_392B4-Map_39228; 2
		dc.w word_392C6-Map_39228; 3
		dc.w word_392D8-Map_39228; 4
		dc.w word_3930C-Map_39228; 5
		dc.w word_392F2-Map_39228; 6
		dc.w word_3932E-Map_39228; 7
		dc.w word_3932E-Map_39228; 8
word_3923A:	dc.w 3			
		dc.w $F801,    0,    0,$FFE5; 0
		dc.w $F80D,    2,    1,$FFED; 4
		dc.w  $809,  $1D,   $E,$FFF1; 8
word_39254:	dc.w 3			
		dc.w $F801,    0,    0,$FFE5; 0
		dc.w $F80D,    2,    1,$FFED; 4
		dc.w  $80D,  $23,  $11,$FFF1; 8
word_3926E:	dc.w 1			
		dc.w $FC00,   $A,    5,$FFFC; 0
word_39278:	dc.w 1			
		dc.w $F809,   $F,    7,$FFF9; 0
word_39282:	dc.w 1			
		dc.w $F80D,  $15,   $A,$FFF9; 0
word_3928C:	dc.w 1			
		dc.w $FC00,  $2B,  $15,$FFFC; 0
word_39296:	dc.w 1			
		dc.w $FC00,  $2C,  $16,$FFFC; 0
word_392A0:	dc.w 1			
		dc.w	 1,   $B,    5,$FFFC; 0
word_392AA:	dc.w 1			; 0 
		dc.w	 3,   $B,    5,$FFFC; 0
word_392B4:	dc.w 2			; 0 
		dc.w	 1,   $B,    5,$FFFC; 0
		dc.w $1003,   $B,    5,$FFFC; 4
word_392C6:	dc.w 2			
		dc.w	 3,   $B,    5,$FFFC; 0
		dc.w $2003,   $B,    5,$FFFC; 4
word_392D8:	dc.w 3			; 0 
		dc.w	 1,   $B,    5,$FFFC; 0
		dc.w $1003,   $B,    5,$FFFC; 4
		dc.w $3003,   $B,    5,$FFFC; 8
word_392F2:	dc.w 3			
		dc.w	 3,   $B,    5,$FFFC; 0
		dc.w $2003,   $B,    5,$FFFC; 4
		dc.w $4003,   $B,    5,$FFFC; 8
word_3930C:	dc.w 4			
		dc.w	 1,   $B,    5,$FFFC; 0
		dc.w $1003,   $B,    5,$FFFC; 4
		dc.w $3003,   $B,    5,$FFFC; 8
		dc.w $5003,   $B,    5,$FFFC; 12
word_3932E:	dc.w 4			
		dc.w	 3,   $B,    5,$FFFC; 0
		dc.w $2003,   $B,    5,$FFFC; 4
		dc.w $4003,   $B,    5,$FFFC; 8
		dc.w $6003,   $B,    5,$FFFC; 12
		dc.w 5
		dc.w	 1,   $B,    5,$FFFC; 0
		dc.w $1003,   $B,    5,$FFFC; 4
		dc.w $3003,   $B,    5,$FFFC; 8
		dc.w $5003,   $B,    5,$FFFC; 12
		dc.w $7003,   $B,    5,$FFFC; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Jet badnick from SCZ
; ----------------------------------------------------------------------------

Sprite_3937A:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_39388(pc,d0.w),d1
		jmp	off_39388(pc,d1.w)
; ===========================================================================
off_39388:	dc.w loc_3938C-off_39388; 0 
		dc.w loc_393B6-off_39388; 1
; ===========================================================================

loc_3938C:				
		bsr.w	loc_365F4
		move.b	#1,$1A(a0)
		move.w	#-$300,$10(a0)
		bclr	#1,1(a0)
		beq.s	loc_393AA
		move.w	#-$500,$10(a0)

loc_393AA:				
		lea	(off_37B5C)(pc),a1
		move.l	a1,$2E(a0)
		bra.w	loc_37ABE
; ===========================================================================

loc_393B6:				
		bsr.w	loc_3EAC0
		bsr.w	loc_36776
		bra.w	loc_36788
; ===========================================================================
off_393C2:	dc.l Map_393CC	
		dc.w $565
		dc.w $404
		dc.w $2008
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_393CC:				
		dc.w word_393D0-Map_393CC; 0
		dc.w word_393F2-Map_393CC; 1
word_393D0:	dc.w 4			
		dc.w $F40D,$8000,$8000,$FFDC; 0
		dc.w $EC04,$8008,$8004,	  $C; 4
		dc.w $F40D,$800A,$8005,$FFFC; 8
		dc.w  $408,$8012,$8009,$FFFC; 12
word_393F2:	dc.w 5			
		dc.w $F40D,$8000,$8000,$FFDC; 0
		dc.w $EC04,$8008,$8004,	  $C; 4
		dc.w $F40D,$800A,$8005,$FFFC; 8
		dc.w  $408,$8015,$800A,	  $C; 12
		dc.w  $C00,$8018,$800C,	 $1C; 16
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3941C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3942A(pc,d0.w),d1
		jmp	off_3942A(pc,d1.w)
; ===========================================================================
off_3942A:	dc.w loc_3942E-off_3942A; 0 
		dc.w loc_3943A-off_3942A; 1
; ===========================================================================

loc_3942E:				
		bsr.w	loc_365F4
		move.b	#$C,$1A(a0)
		rts	
; ===========================================================================

loc_3943A:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	8(a0),d4
		bsr.w	loc_3EAB4
		bra.w	loc_3EA54
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_39452:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_39460(pc,d0.w),d1
		jmp	off_39460(pc,d1.w)
; ===========================================================================
off_39460:	dc.w loc_3946E-off_39460; 0 
		dc.w loc_39488-off_39460; 1
		dc.w loc_394A2-off_39460; 2
		dc.w loc_394D2-off_39460; 3
		dc.w loc_394E0-off_39460; 4
		dc.w loc_39508-off_39460; 5
		dc.w loc_39516-off_39460; 6
; ===========================================================================

loc_3946E:				
		bsr.w	loc_365F4
		move.b	#$15,$1A(a0)
		btst	#0,1(a0)
		beq.s	locret_39486
		bset	#0,$22(a0)

locret_39486:				
		rts	
; ===========================================================================

loc_39488:				
		bsr.w	loc_366D6
		addi.w	#$80,d2	
		cmpi.w	#$100,d2
		bcs.s	loc_3949A
		bra.w	loc_3EA54
; ===========================================================================

loc_3949A:				
		addq.b	#2,$24(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_394A2:				
		move.b	$24(a0),d2
		lea	(off_3958A).l,a1
		bsr.w	loc_3EA6C
		cmp.b	$24(a0),d2
		bne.s	loc_394BA
		bra.w	loc_3EA54
; ===========================================================================

loc_394BA:				
		lea	$1A(a0),a1
		clr.l	(a1)
		clr.w	4(a1)
		move.b	#8,(a1)
		move.b	#6,$20(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_394D2:				
		lea	(off_39596).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_394E0:				
		tst.b	$2A(a0)
		beq.s	loc_394EE
		subq.b	#1,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_394EE:				
		addq.b	#2,$24(a0)
		lea	$1A(a0),a1
		clr.l	(a1)
		clr.w	4(a1)
		move.b	#$B,(a1)
		bsr.w	loc_39526
		bra.w	loc_3EA54
; ===========================================================================

loc_39508:				
		lea	(off_395A2).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_39516:				
		move.b	#8,$24(a0)
		move.b	#$40,$2A(a0) ; '@'
		bra.w	loc_3EA54
; ===========================================================================

loc_39526:				
		bsr.w	loc_3EA66
		bne.s	locret_39574
		_move.b	#-$68,0(a1)
		move.b	#$D,$1A(a1)
		move.b	#$46,$28(a1) ; 'F'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		addi.w	#$B,$C(a1)
		move.w	#-$200,d0
		move.w	#-8,d1
		btst	#0,1(a0)
		beq.s	loc_39564
		neg.w	d0
		neg.w	d1

loc_39564:				
		move.w	d0,$10(a1)
		add.w	d1,8(a1)
		lea	(loc_37734)(pc),a2
		move.l	a2,$2A(a1)

locret_39574:				
		rts	
; ===========================================================================
off_39576:	dc.l Map_395B4	
		dc.w $379
		dc.w $404
		dc.w $1800
off_39580:	dc.l Map_395B4	
		dc.w $379
		dc.w $405
		dc.w $1000
off_3958A:	dc.w byte_3958C-off_3958A 
byte_3958C:	dc.b   1,  0,  1,  2,  3,  4,  5,  6,  7,$FC; 0	
off_39596:	dc.w byte_39598-off_39596 
byte_39598:	dc.b   1,  8,  9, $A, $B, $B, $B, $B,$FC,  0; 0	
off_395A2:	dc.w byte_395A4-off_395A2 
byte_395A4:	dc.b   3, $A, $B,$FC	; 0 
off_395A8:	dc.w byte_395AA-off_395A8 
byte_395AA:	dc.b   3, $D, $E, $F,$10,$11,$12,$13,$14,$FF; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_395B4:				
		dc.w word_395E0-Map_395B4; 0
		dc.w word_395EA-Map_395B4; 1
		dc.w word_395F4-Map_395B4; 2
		dc.w word_395FE-Map_395B4; 3
		dc.w word_39610-Map_395B4; 4
		dc.w word_39622-Map_395B4; 5
		dc.w word_39634-Map_395B4; 6
		dc.w word_39646-Map_395B4; 7
		dc.w word_39658-Map_395B4; 8
		dc.w word_39672-Map_395B4; 9
		dc.w word_3968C-Map_395B4; 10
		dc.w word_396A6-Map_395B4; 11
		dc.w word_396C0-Map_395B4; 12
		dc.w word_396D2-Map_395B4; 13
		dc.w word_396DC-Map_395B4; 14
		dc.w word_396E6-Map_395B4; 15
		dc.w word_396F0-Map_395B4; 16
		dc.w word_396FA-Map_395B4; 17
		dc.w word_39704-Map_395B4; 18
		dc.w word_3970E-Map_395B4; 19
		dc.w word_39718-Map_395B4; 20
		dc.w word_39722-Map_395B4; 21
word_395E0:	dc.w 1			
		dc.w  $C0D,$2000,$2000,$FFF0; 0
word_395EA:	dc.w 1			
		dc.w  $80D,$2000,$2000,$FFF0; 0
word_395F4:	dc.w 1			
		dc.w  $40D,$2000,$2000,$FFF0; 0
word_395FE:	dc.w 2			
		dc.w	$D,$2000,$2000,$FFF0; 0
		dc.w $100D,$2008,$2004,$FFF0; 4
word_39610:	dc.w 2			
		dc.w $FC0D,$2000,$2000,$FFF0; 0
		dc.w  $C0D,$2008,$2004,$FFF0; 4
word_39622:	dc.w 2			
		dc.w $F80D,$2000,$2000,$FFF0; 0
		dc.w  $80D,$2008,$2004,$FFF0; 4
word_39634:	dc.w 2			
		dc.w $F40D,$2000,$2000,$FFF0; 0
		dc.w  $40D,$2008,$2004,$FFF0; 4
word_39646:	dc.w 2			
		dc.w $F00D,$2000,$2000,$FFF0; 0
		dc.w	$D,$2008,$2004,$FFF0; 4
word_39658:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0; 0
		dc.w	$D,$2008,$2004,$FFF0; 4
		dc.w  $700,$2010,$2008,$FFEE; 8
word_39672:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0; 0
		dc.w	$D,$2008,$2004,$FFF0; 4
		dc.w  $700,$2010,$2008,$FFEC; 8
word_3968C:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0; 0
		dc.w	$D,$2008,$2004,$FFF0; 4
		dc.w  $700,$2010,$2008,$FFEA; 8
word_396A6:	dc.w 3			
		dc.w $F00D,$2000,$2000,$FFF0; 0
		dc.w	$D,$2008,$2004,$FFF0; 4
		dc.w  $700,$2010,$2008,$FFE8; 8
word_396C0:	dc.w 2			
		dc.w $F809,$6011,$6008,$FFE8; 0
		dc.w $F809,$6811,$6808,	   0; 4
word_396D2:	dc.w 1			
		dc.w $FC00,  $17,   $B,$FFFC; 0
word_396DC:	dc.w 1			
		dc.w $FC00,  $18,   $C,$FFFC; 0
word_396E6:	dc.w 1			
		dc.w $FC00,  $19,   $C,$FFFC; 0
word_396F0:	dc.w 1			
		dc.w $FC00,$1018,$100C,$FFFC; 0
word_396FA:	dc.w 1			
		dc.w $FC00,$1017,$100B,$FFFC; 0
word_39704:	dc.w 1			
		dc.w $FC00,$1818,$180C,$FFFC; 0
word_3970E:	dc.w 1			
		dc.w $FC00, $819, $80C,$FFFC; 0
word_39718:	dc.w 1			
		dc.w $FC00, $818, $80C,$FFFC; 0
word_39722:	dc.w 1			
		dc.w $100D,$2000,$2000,$FFF0; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3972C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3973A(pc,d0.w),d1
		jmp	off_3973A(pc,d1.w)
; ===========================================================================
off_3973A:	dc.w loc_3975E-off_3973A; 0 
		dc.w loc_397AC-off_3973A; 1
		dc.w loc_397E6-off_3973A; 2
		dc.w loc_397FE-off_3973A; 3
		dc.w loc_3984A-off_3973A; 4
		dc.w loc_398C0-off_3973A; 5
		dc.w loc_39B92-off_3973A; 6
		dc.w loc_39BBA-off_3973A; 7
		dc.w loc_39BCC-off_3973A; 8
		dc.w loc_39BE2-off_3973A; 9
		dc.w loc_39BEA-off_3973A; 10
		dc.w loc_39C02-off_3973A; 11
		dc.w loc_39C0A-off_3973A; 12
		dc.w loc_39C12-off_3973A; 13
		dc.w loc_39C2A-off_3973A; 14
		dc.w loc_39C42-off_3973A; 15
		dc.w loc_39C50-off_3973A; 16
		dc.w loc_39CA0-off_3973A; 17
; ===========================================================================

loc_3975E:				
		bsr.w	loc_365F4
		move.b	#$1B,$16(a0)
		move.b	#$10,$17(a0)
		move.b	#0,$20(a0)
		move.b	#8,$21(a0)
		lea	(byte_39DC2).l,a2
		bsr.w	loc_367D0
		move.b	#$E,$24(a1)
		lea	(byte_39DC6).l,a2
		bsr.w	loc_367D0
		move.b	#$14,$24(a1)
		lea	(byte_39DCA).l,a2
		bsr.w	loc_367D0
		move.b	#$1A,$24(a1)
		rts	
; ===========================================================================

loc_397AC:				
		move.w	(v_camera_x_pos).w,d0
		cmpi.w	#$224,d0
		bcc.s	loc_397BA
		bra.w	loc_3EA42
; ===========================================================================

loc_397BA:				
		addq.b	#2,$24(a0)
		move.w	#$3C,$2A(a0) ; '<'
		move.w	#$100,$12(a0)
		move.w	#$224,d0
		move.w	d0,(v_boundary_left_next).w
		move.w	d0,(v_boundary_right_next).w
		move.b	#9,(v_current_boss).w
		moveq	#-7,d0
		bsr.w	loc_3EA60
		bra.w	loc_3EA42
; ===========================================================================

loc_397E6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_397F0
		bra.w	loc_3EA42
; ===========================================================================

loc_397F0:				
		addq.b	#2,$24(a0)
		moveq	#-$6D,d0
		bsr.w	loc_3EAA2
		bra.w	loc_3EA42
; ===========================================================================

loc_397FE:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3980E
		moveq	#-$24,d0
		bsr.w	loc_3EA60

loc_3980E:				
		jsr	loc_1EDFA
		tst.w	d1
		bmi.s	loc_39830
		bsr.w	loc_3EAC0
		moveq	#0,d0
		moveq	#0,d1
		movea.w	$3E(a0),a1
		bsr.w	loc_36760
		bsr.w	loc_39D4A
		bra.w	loc_3EA42
; ===========================================================================

loc_39830:				
		add.w	d1,$C(a0)
		move.w	#0,$12(a0)
		move.b	#$1A,$20(a0)
		bset	#1,$22(a0)
		bra.w	loc_399D6
; ===========================================================================

loc_3984A:				
		bsr.w	loc_39CAE
		bsr.w	loc_39D1C
		subq.b	#1,$2A(a0)
		beq.s	loc_39886
		cmpi.b	#$32,$2A(a0) ; '2'
		bne.s	loc_3986A
		moveq	#-$12,d0
		bsr.w	loc_3EA60
		bsr.w	loc_3EA42

loc_3986A:				
		jsr	loc_1EDFA
		add.w	d1,$C(a0)
		lea	(off_39DE2).l,a1
		bsr.w	loc_36870
		bsr.w	loc_39D4A
		bra.w	loc_3EA42
; ===========================================================================

loc_39886:				
		addq.b	#2,$24(a0)
		moveq	#0,d0
		move.b	$2F(a0),d0
		andi.b	#$F,d0
		move.b	byte_398B0(pc,d0.w),$25(a0)
		addq.b	#1,$2F(a0)
		clr.b	$2E(a0)
		movea.w	$3C(a0),a1
		move.b	#$16,$24(a1)
		bra.w	loc_3EA42
; ===========================================================================
byte_398B0:	dc.b   6		; 0
		dc.b   0		; 1
		dc.b $10		; 2
		dc.b   6		; 3
		dc.b   6		; 4
		dc.b $1E		; 5
		dc.b   0		; 6
		dc.b $10		; 7
		dc.b   6		; 8
		dc.b   6		; 9
		dc.b $10		; 10
		dc.b   6		; 11
		dc.b   0		; 12
		dc.b   6		; 13
		dc.b $10		; 14
		dc.b $1E		; 15
; ===========================================================================

loc_398C0:				
		bsr.w	loc_39CAE
		bsr.w	loc_39D1C
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_398F2(pc,d0.w),d1
		jsr	off_398F2(pc,d1.w)
		moveq	#0,d0
		moveq	#0,d1
		movea.w	$3E(a0),a1
		bsr.w	loc_36760
		bsr.w	loc_39D4A
		bsr.w	loc_36760
		bsr.w	loc_3EAC0
		bra.w	loc_3EA42
; ===========================================================================
off_398F2:	dc.w loc_3991E-off_398F2; 0 
		dc.w loc_39946-off_398F2; 1
		dc.w loc_39976-off_398F2; 2
		dc.w loc_39A0A-off_398F2; 3
		dc.w loc_39A1C-off_398F2; 4
		dc.w loc_39A44-off_398F2; 5
		dc.w loc_39A68-off_398F2; 6
		dc.w loc_39A96-off_398F2; 7
		dc.w loc_39A0A-off_398F2; 8
		dc.w loc_39A1C-off_398F2; 9
		dc.w loc_39AAA-off_398F2; 10
		dc.w loc_39ACE-off_398F2; 11
		dc.w loc_39AF4-off_398F2; 12
		dc.w loc_39B28-off_398F2; 13
		dc.w loc_39A96-off_398F2; 14
		dc.w loc_39A0A-off_398F2; 15
		dc.w loc_39A1C-off_398F2; 16
		dc.w loc_39AAA-off_398F2; 17
		dc.w loc_39ACE-off_398F2; 18
		dc.w loc_39B44-off_398F2; 19
		dc.w loc_39B28-off_398F2; 20
		dc.w loc_39A96-off_398F2; 21
; ===========================================================================

loc_3991E:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		move.b	#2,$2C(a0)

loc_3992E:				
		move.b	#$20,$2A(a0) ; ' '
		movea.w	$3E(a0),a1
		move.b	#$10,$24(a1)
		move.b	#1,$1C(a1)
		rts	
; ===========================================================================

loc_39946:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_3994E
		rts	
; ===========================================================================

loc_3994E:				
		addq.b	#2,$25(a0)
		move.b	#$40,$2A(a0) ; '@'
		move.b	#1,$1C(a0)
		move.w	#$800,d0
		bsr.w	loc_39D60
		movea.w	$3E(a0),a1
		move.b	#2,$1C(a1)
		moveq	#-$44,d0
		bra.w	loc_3EA60
; ===========================================================================

loc_39976:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_399C2
		cmpi.b	#$20,$2A(a0) ; ' '
		bne.s	loc_39994
		move.b	#2,$1C(a0)
		movea.w	$3E(a0),a1
		move.b	#$12,$24(a1)

loc_39994:				
		bsr.w	loc_39D72
		lea	(off_39DE2).l,a1
		bsr.w	loc_36870
		cmpi.b	#2,$1C(a0)
		bne.s	locret_399C0
		cmpi.b	#2,$1B(a0)
		bne.s	locret_399C0
		cmpi.b	#3,$1E(a0)
		bne.s	locret_399C0
		bchg	#0,1(a0)

locret_399C0:				
		rts	
; ===========================================================================

loc_399C2:				
		subq.b	#1,$2C(a0)
		beq.s	loc_399D6
		move.b	#2,$25(a0)
		clr.w	$10(a0)
		bra.w	loc_3992E
; ===========================================================================

loc_399D6:				
		move.b	#8,$24(a0)
		move.b	#0,$1C(a0)
		move.b	#$64,$2A(a0) ; 'd'
		clr.w	$10(a0)
		movea.w	$3E(a0),a1
		move.b	#$12,$24(a1)
		movea.w	$3C(a0),a1
		move.b	#$18,$24(a1)
		moveq	#-$12,d0
		bsr.w	loc_3EA60
		bra.w	loc_3EA42
; ===========================================================================

loc_39A0A:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		move.b	#3,$1C(a0)
		rts	
; ===========================================================================

loc_39A1C:				
		lea	(off_39DE2).l,a1
		bsr.w	loc_36870
		bne.s	loc_39A2A
		rts	
; ===========================================================================

loc_39A2A:				
		addq.b	#2,$25(a0)
		move.b	#$20,$2A(a0) ; ' '
		move.b	#4,$1C(a0)
		moveq	#-$50,d0
		bsr.w	loc_3EA60
		bra.w	loc_3EA42
; ===========================================================================

loc_39A44:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_39A56
		lea	(off_39DE2).l,a1
		bsr.w	loc_36870
		rts	
; ===========================================================================

loc_39A56:				
		addq.b	#2,$25(a0)
		move.b	#$40,$2A(a0) ; '@'
		move.w	#$800,d0
		bra.w	loc_39D60
; ===========================================================================

loc_39A68:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_39A7C
		bsr.w	loc_39D72
		lea	(off_39DE2).l,a1
		bra.w	loc_36870
; ===========================================================================

loc_39A7C:				
		addq.b	#2,$25(a0)
		move.b	#5,$1C(a0)
		bchg	#0,1(a0)
		clr.w	$10(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_39A96:				
		lea	(off_39DE2).l,a1
		bsr.w	loc_36870
		bne.w	loc_39AA6
		rts	
; ===========================================================================

loc_39AA6:				
		bra.w	loc_399D6
; ===========================================================================

loc_39AAA:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_39ABC
		lea	(off_39DE2).l,a1
		bsr.w	loc_36870
		rts	
; ===========================================================================

loc_39ABC:				
		addq.b	#2,$25(a0)
		move.b	#$40,$2A(a0) ; '@'
		move.w	#$400,d0
		bra.w	loc_39D60
; ===========================================================================

loc_39ACE:				
		subq.b	#1,$2A(a0)
		cmpi.b	#$3C,$2A(a0) ; '<'
		bne.s	loc_39ADE
		bsr.w	loc_39AE8

loc_39ADE:				
		lea	(off_39DE2).l,a1
		bra.w	loc_36870
; ===========================================================================

loc_39AE8:				
		addq.b	#2,$25(a0)
		move.w	#-$600,$12(a0)
		rts	
; ===========================================================================

loc_39AF4:				
		subq.b	#1,$2A(a0)
		bmi.w	loc_39A7C
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_39B0A
		bsr.w	loc_39B1A

loc_39B0A:				
		addi.w	#$38,$12(a0)
		lea	(off_39DE2).l,a1
		bra.w	loc_36870
; ===========================================================================

loc_39B1A:				
		addq.b	#2,$25(a0)
		add.w	d1,$C(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_39B28:				
		subq.b	#1,$2A(a0)
		bmi.w	loc_39A7C
		jsr	loc_1EDFA
		add.w	d1,$C(a0)
		lea	(off_39DE2).l,a1
		bra.w	loc_36870
; ===========================================================================

loc_39B44:				
		subq.b	#1,$2A(a0)
		bmi.w	loc_39A7C
		tst.b	$2E(a0)
		bne.s	loc_39B66
		tst.w	$12(a0)
		bmi.s	loc_39B66
		st.b	$2E(a0)
		bsr.w	loc_39D82
		moveq	#-$5E,d0
		bsr.w	loc_3EA60

loc_39B66:				
		jsr	loc_1EDFA
		tst.w	d1
		bpl.s	loc_39B74
		bsr.w	loc_39B84

loc_39B74:				
		addi.w	#$38,$12(a0)
		lea	(off_39DE2).l,a1
		bra.w	loc_36870
; ===========================================================================

loc_39B84:				
		addq.b	#2,$25(a0)
		add.w	d1,$C(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_39B92:				
		clr.b	$20(a0)
		subq.w	#1,$32(a0)
		bmi.s	loc_39BA4
		bsr.w	loc_3EAA8
		bra.w	loc_3EA42
; ===========================================================================

loc_39BA4:				
		move.w	#$1000,(v_boundary_right_next).w
		addq.b	#2,(v_dle_routine).w
		move.b	(v_level_music).w,d0
		bsr.w	loc_3EAA2
		bra.w	loc_3EA48
; ===========================================================================

loc_39BBA:				
		bsr.w	loc_365F4
		move.b	#8,$19(a0)
		move.b	#0,$20(a0)
		rts	
; ===========================================================================

loc_39BCC:				
		movea.w	$2C(a0),a1
		bsr.w	loc_367AA
		lea	(off_39E30).l,a1
		bsr.w	loc_36870
		bra.w	loc_3EA42
; ===========================================================================

loc_39BE2:				
		andi.b	#$7F,1(a0) ; ''
		rts	
; ===========================================================================

loc_39BEA:				
		bsr.w	loc_365F4
		move.b	#8,$19(a0)
		move.b	#$B,$1A(a0)
		move.b	#3,$18(a0)
		rts	
; ===========================================================================

loc_39C02:				
		move.b	#0,$20(a0)
		rts	
; ===========================================================================

loc_39C0A:				
		move.b	#-$68,$20(a0)
		rts	
; ===========================================================================

loc_39C12:				
		bsr.w	loc_365F4
		move.b	#4,$1A(a0)
		move.w	#$2C0,8(a0)
		move.w	#$139,$C(a0)
		rts	
; ===========================================================================

loc_39C2A:				
		movea.w	$2C(a0),a1
		bclr	#1,$22(a1)
		bne.s	loc_39C3A
		bra.w	loc_3EA42
; ===========================================================================

loc_39C3A:				
		addq.b	#2,$24(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_39C42:				
		lea	(off_39E42).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_39C50:				
		movea.w	$2C(a0),a1
		lea	($FFFFB000).w,a2
		btst	#2,$22(a1)
		bne.s	loc_39C92
		move.b	#2,$1C(a0)
		cmpi.b	#4,$24(a2)
		bne.s	loc_39C78
		move.b	#3,$1C(a0)
		bra.w	loc_39C84
; ===========================================================================

loc_39C78:				
		tst.b	$20(a1)
		bne.s	loc_39C84
		move.b	#4,$1C(a0)

loc_39C84:				
		lea	(off_39E42).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_39C92:				
		addq.b	#2,$24(a0)
		move.b	#1,$1C(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_39CA0:				
		lea	(off_39E42).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_39CAE:				
		tst.b	$21(a0)
		beq.s	loc_39CF0
		tst.b	$20(a0)
		bne.s	locret_39CEE
		tst.b	$30(a0)
		bne.s	loc_39CD0
		move.b	#$20,$30(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_39CD0:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_39CDE
		move.w	#$EEE,d0

loc_39CDE:				
		move.w	d0,(a1)
		subq.b	#1,$30(a0)
		bne.s	locret_39CEE
		clr.w	($FFFFFB22).w
		bsr.w	loc_39D24

locret_39CEE:				
		rts	
; ===========================================================================

loc_39CF0:				
		moveq	#$64,d0	; 'd'
		bsr.w	sub_40D06
		move.w	#$FF,$32(a0)
		move.b	#$C,$24(a0)
		clr.b	$20(a0)
		bset	#2,$22(a0)
		movea.w	$3C(a0),a1
		bsr.w	loc_3EA5A
		movea.w	$3E(a0),a1
		bra.w	loc_3EA5A
; ===========================================================================

loc_39D1C:				
		tst.b	$20(a0)
		beq.w	locret_37A48

loc_39D24:				
		move.b	$1A(a0),d0
		cmpi.b	#6,d0
		beq.s	loc_39D42
		cmpi.b	#7,d0
		beq.s	loc_39D42
		cmpi.b	#8,d0
		beq.s	loc_39D42
		move.b	#$1A,$20(a0)
		rts	
; ===========================================================================

loc_39D42:				
		move.b	#-$66,$20(a0)
		rts	
; ===========================================================================

loc_39D4A:				
		moveq	#$C,d0
		moveq	#-$C,d1
		btst	#0,1(a0)
		beq.s	loc_39D58
		neg.w	d0

loc_39D58:				
		movea.w	$3C(a0),a1
		bra.w	loc_36760
; ===========================================================================

loc_39D60:				
		tst.b	$2D(a0)
		bne.s	loc_39D68
		neg.w	d0

loc_39D68:				
		not.b	$2D(a0)
		move.w	d0,$10(a0)
		rts	
; ===========================================================================

loc_39D72:				
		moveq	#$20,d0	; ' '
		tst.w	$10(a0)
		bmi.s	loc_39D7C
		neg.w	d0

loc_39D7C:				
		add.w	d0,$10(a0)
		rts	
; ===========================================================================

loc_39D82:				
		move.b	#$4A,d2	; 'J'
		moveq	#7,d6
		lea	(byte_39D92).l,a2
		bra.w	loc_3681A
; ===========================================================================
byte_39D92:	dc.b   0,$E8,  0,$FD, $F,  0,$F0,$F0,$FE,$FE,$10,  0,$E8,  0,$FD,  0; 0
					
		dc.b $11,  0,$F0,$10,$FE,  2,$12,  0,  0,$18,  0,  3,$13,  0,$10,$10; 16
		dc.b   2,  2,$14,  0,$18,  0,  3,  0,$15,  0,$10,$F0,  2,$FE,$16,  0; 32
byte_39DC2:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $AF		; 2
		dc.b $48		; 3
byte_39DC6:	dc.b   0		; 0 
		dc.b $3C		; 1
		dc.b $AF		; 2
		dc.b $48		; 3
byte_39DCA:	dc.b   0		; 0 
		dc.b $3A		; 1
		dc.b $AF		; 2
		dc.b $A4		; 3
off_39DCE:	dc.l Map_39E68	
		dc.w $2380
		dc.w $404
		dc.w $101A
off_39DD8:	dc.l Map_3A08C	
		dc.w $378
		dc.w $406
		dc.w $1000
off_39DE2:	dc.w byte_39DEE-off_39DE2; 0 
		dc.w byte_39DF4-off_39DE2; 1
		dc.w byte_39DF8-off_39DE2; 2
		dc.w byte_39DFE-off_39DE2; 3
		dc.w byte_39E14-off_39DE2; 4
		dc.w byte_39E1A-off_39DE2; 5
byte_39DEE:	dc.b   2,  0,  1,  2,$FF,  0; 0	
byte_39DF4:	dc.b $45,  3,$FD,  0	; 0 
byte_39DF8:	dc.b   3,  4,  5,  4,  3,$FC; 0	
byte_39DFE:	dc.b   3,  3,  3,  6,  6,  6,  7,  7,  7,  8,  8,  8,  6,  6,  7,  7; 0
					
		dc.b   8,  8,  6,  7,  8,$FC; 16
byte_39E14:	dc.b   2,  6,  7,  8,$FF,  0; 0	
byte_39E1A:	dc.b   3,  8,  7,  6,  8,  8,  7,  7,  6,  6,  8,  8,  8,  7,  7,  7; 0
					
		dc.b   6,  6,  6,  3,  3,$FC; 16
off_39E30:	dc.w byte_39E36-off_39E30; 0 
		dc.w byte_39E3A-off_39E30; 1
		dc.w byte_39E3E-off_39E30; 2
byte_39E36:	dc.b   1, $B, $C,$FF	; 0 
byte_39E3A:	dc.b   1, $D, $E,$FF	; 0 
byte_39E3E:	dc.b   1,  9, $A,$FF	; 0 
off_39E42:	dc.w byte_39E4C-off_39E42; 0 
		dc.w byte_39E54-off_39E42; 1
		dc.w byte_39E5C-off_39E42; 2
		dc.w byte_39E60-off_39E42; 3
		dc.w byte_39E64-off_39E42; 4
byte_39E4C:	dc.b   3,  4,  3,  2,  1,  0,$FC,  0; 0	
byte_39E54:	dc.b   3,  0,  1,  2,  3,  4,$FA,  0; 0	
byte_39E5C:	dc.b   3,  5,  5,$FF	; 0 
byte_39E60:	dc.b   3,  5,  6,$FF	; 0 
byte_39E64:	dc.b   3,  7,  7,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_39E68:				
		dc.w word_39E96-Map_39E68; 0
		dc.w word_39EC0-Map_39E68; 1
		dc.w word_39EEA-Map_39E68; 2
		dc.w word_39F14-Map_39E68; 3
		dc.w word_39F36-Map_39E68; 4
		dc.w word_39F58-Map_39E68; 5
		dc.w word_39F7A-Map_39E68; 6
		dc.w word_39F9C-Map_39E68; 7
		dc.w word_39FBE-Map_39E68; 8
		dc.w word_39FE0-Map_39E68; 9
		dc.w word_39FF2-Map_39E68; 10
		dc.w word_3A004-Map_39E68; 11
		dc.w word_3A016-Map_39E68; 12
		dc.w word_3A028-Map_39E68; 13
		dc.w word_3A032-Map_39E68; 14
		dc.w word_3A03C-Map_39E68; 15
		dc.w word_3A046-Map_39E68; 16
		dc.w word_3A050-Map_39E68; 17
		dc.w word_3A05A-Map_39E68; 18
		dc.w word_3A064-Map_39E68; 19
		dc.w word_3A06E-Map_39E68; 20
		dc.w word_3A078-Map_39E68; 21
		dc.w word_3A082-Map_39E68; 22
word_39E96:	dc.w 5			
		dc.w $E409,    0,    0,$FFF3; 0
		dc.w $F40F,    6,    3,$FFEF; 4
		dc.w $140C,  $16,   $B,$FFEC; 8
		dc.w $E404,  $6F,  $37,$FFF4; 12
		dc.w $E407,  $71,  $38,	   4; 16
word_39EC0:	dc.w 5			
		dc.w $E409,    0,    0,$FFF3; 0
		dc.w $F40F,    6,    3,$FFEF; 4
		dc.w $140C,  $16,   $B,$FFEC; 8
		dc.w $E404,  $79,  $3C,$FFF4; 12
		dc.w $E407,  $7B,  $3D,	   4; 16
word_39EEA:	dc.w 5			
		dc.w $E409,    0,    0,$FFF3; 0
		dc.w $F40F,    6,    3,$FFEF; 4
		dc.w $140C,  $16,   $B,$FFEC; 8
		dc.w $E404,  $83,  $41,$FFF4; 12
		dc.w $E407,  $85,  $42,	   4; 16
word_39F14:	dc.w 4			
		dc.w $E40F,  $1A,   $D,$FFEC; 0
		dc.w $E403,  $2A,  $15,	  $C; 4
		dc.w  $40E,  $2E,  $17,$FFF4; 8
		dc.w $1400,  $3A,  $1D,$FFEC; 12
word_39F36:	dc.w 4			
		dc.w $E40E,  $3B,  $1D,$FFF0; 0
		dc.w  $401,  $47,  $23,$FFE8; 4
		dc.w $FC0F,  $49,  $24,$FFF0; 8
		dc.w $FC03,  $59,  $2C,	 $10; 12
word_39F58:	dc.w 4			
		dc.w $E406,  $5D,  $2E,$FFF0; 0
		dc.w $E406, $85D, $82E,	   0; 4
		dc.w $FC0B,  $63,  $31,$FFE8; 8
		dc.w $FC0B, $863, $831,	   0; 12
word_39F7A:	dc.w 4			
		dc.w $EE0A,  $8D,  $46,$FFE8; 0
		dc.w $EE0A,  $96,  $4B,	   0; 4
		dc.w  $60A,$1896,$184B,$FFE8; 8
		dc.w  $60A,$188D,$1846,	   0; 12
word_39F9C:	dc.w 4			
		dc.w $EE0A,  $9F,  $4F,$FFE8; 0
		dc.w $EE0A,  $A8,  $54,	   0; 4
		dc.w  $60A,$18A8,$1854,$FFE8; 8
		dc.w  $60A,$189F,$184F,	   0; 12
word_39FBE:	dc.w 4			
		dc.w $EE0A,  $B1,  $58,$FFE8; 0
		dc.w $EE0A,  $BA,  $5D,	   0; 4
		dc.w  $60A,$18BA,$185D,$FFE8; 8
		dc.w  $60A,$18B1,$1858,	   0; 12
word_39FE0:	dc.w 2			
		dc.w  $400,  $C3,  $61,	  $E; 0
		dc.w $1408,  $CB,  $65,	 $12; 4
word_39FF2:	dc.w 2			
		dc.w  $408,  $C4,  $62,	  $E; 0
		dc.w $1408,  $CE,  $67,	 $12; 4
word_3A004:	dc.w 2			
		dc.w $1C00,  $C7,  $63,$FFF4; 0
		dc.w $1C00,  $C7,  $63,$FFFC; 4
word_3A016:	dc.w 2			
		dc.w $1C02,  $C8,  $64,$FFF4; 0
		dc.w $1C02,  $C8,  $64,$FFFC; 4
word_3A028:	dc.w 1			
		dc.w $1408,  $CB,  $65,	 $12; 0
word_3A032:	dc.w 1			
		dc.w $1408,  $CE,  $67,	 $12; 0
word_3A03C:	dc.w 1			
		dc.w $F801,  $D1,  $68,$FFFC; 0
word_3A046:	dc.w 1			
		dc.w $F805,  $D3,  $69,$FFF8; 0
word_3A050:	dc.w 1			
		dc.w $FC04,  $D7,  $6B,$FFF8; 0
word_3A05A:	dc.w 1			
		dc.w $F805,$10D3,$1069,$FFF8; 0
word_3A064:	dc.w 1			
		dc.w $F801,$10D1,$1068,$FFFC; 0
word_3A06E:	dc.w 1			
		dc.w $F805,$18D3,$1869,$FFF8; 0
word_3A078:	dc.w 1			
		dc.w $FC04, $8D7, $86B,$FFF8; 0
word_3A082:	dc.w 1			
		dc.w $F805, $8D3, $869,$FFF8; 0
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3A08C:				
		dc.w word_3A09C-Map_3A08C; 0
		dc.w word_3A0C6-Map_3A08C; 1
		dc.w word_3A0F0-Map_3A08C; 2
		dc.w word_3A11A-Map_3A08C; 3
		dc.w word_3A154-Map_3A08C; 4
		dc.w word_3A18E-Map_3A08C; 5
		dc.w word_3A1A8-Map_3A08C; 6
		dc.w word_3A1C2-Map_3A08C; 7
word_3A09C:	dc.w 5			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w  $404,$2006,$2003,$FFF0; 8
		dc.w  $404,$2006,$2003,	   0; 12
		dc.w $F80D, $190,  $C8,$FFF0; 16
word_3A0C6:	dc.w 5			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w	 4,$2006,$2003,$FFF0; 8
		dc.w	 4,$2006,$2003,	   0; 12
		dc.w $F80D, $190,  $C8,$FFF0; 16
word_3A0F0:	dc.w 5			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w $FC04,$2006,$2003,$FFF0; 8
		dc.w $FC04,$2006,$2003,	   0; 12
		dc.w $F80D, $190,  $C8,$FFF0; 16
word_3A11A:	dc.w 7			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w $F804,$2006,$2003,$FFF0; 8
		dc.w $F804,$2006,$2003,	   0; 12
		dc.w	 4,$2006,$2003,$FFF0; 16
		dc.w	 4,$2006,$2003,	   0; 20
		dc.w $F80D, $190,  $C8,$FFF0; 24
word_3A154:	dc.w 7			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w $F404,$2006,$2003,$FFF0; 8
		dc.w $F404,$2006,$2003,	   0; 12
		dc.w $FC04,$2006,$2003,$FFF0; 16
		dc.w $FC04,$2006,$2003,	   0; 20
		dc.w $F80D, $190,  $C8,$FFF0; 24
word_3A18E:	dc.w 3			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w $F80D, $190,  $C8,$FFF0; 8
word_3A1A8:	dc.w 3			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w $F90D, $190,  $C8,$FFF0; 8
word_3A1C2:	dc.w 3			
		dc.w $F406,$2000,$2000,$FFF0; 0
		dc.w $F406,$2800,$2800,	   0; 4
		dc.w $F80D, $198,  $CC,$FFF0; 8
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3A1DC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3A1EA(pc,d0.w),d1
		jmp	off_3A1EA(pc,d1.w)
; ===========================================================================
off_3A1EA:	dc.w loc_3A1F6-off_3A1EA; 0 
		dc.w loc_3A2F4-off_3A1EA; 1
		dc.w loc_3A32C-off_3A1EA; 2
		dc.w loc_3A396-off_3A1EA; 3
		dc.w loc_3A3CC-off_3A1EA; 4
		dc.w locret_3A3F6-off_3A1EA; 5
; ===========================================================================

loc_3A1F6:				
		bsr.w	loc_365F4
		move.w	#$1E8,8(a0)
		move.w	#$F0,$A(a0)
		move.w	#$B,$2A(a0)
		move.w	#2,($FFFFF662).w
		bset	#0,1(a0)
		bset	#0,$22(a0)
		lea	($FFFFE138).w,a1
		lea	(byte_3A76C)(pc),a2
		moveq	#0,d0
		moveq	#$22,d6	; '"'

loc_3A22A:				
		move.b	(a2)+,d0
		add.w	d0,(a1)
		addq.w	#8,a1
		dbf	d6,loc_3A22A
		lea	(off_3A294)(pc),a1
		lea	(Art_Sonic).l,a3
		lea	(v_128x128_tiles).l,a5
		moveq	#3,d5

loc_3A246:				
		movea.l	(a1)+,a2
		move.w	(a2)+,d6
		subq.w	#1,d6

loc_3A24C:				
		move.w	(a2)+,d0
		move.w	d0,d1
		andi.w	#$FFF,d0
		lsl.w	#5,d0
		lea	(a3,d0.w),a4
		andi.w	#-$1000,d1
		rol.w	#4,d1
		addq.w	#1,d1
		lsl.w	#3,d1
		subq.w	#1,d1

loc_3A266:				
		move.l	(a4)+,(a5)+
		dbf	d1,loc_3A266
		dbf	d6,loc_3A24C
		dbf	d5,loc_3A246
		move.w	d7,-(sp)
		moveq	#0,d0
		moveq	#0,d1
		lea	(word_3A2A4)(pc),a6
		moveq	#7,d7

loc_3A280:				
		movea.l	(a6)+,a1
		movea.l	(a6)+,a2
		move.b	(a6)+,d0
		move.b	(a6)+,d1
		bsr.w	loc_3E89E
		dbf	d7,loc_3A280
		move.w	(sp)+,d7
		rts	
; ===========================================================================
off_3A294:	dc.l DPLC_Sonic_033A		; 0 
		dc.l DPLC_Sonic_0340		; 1
		dc.l DPLC_Sonic_0346		; 2
		dc.l DPLC_Sonic_034C		; 3
word_3A2A4:	dc.w $FFFF,    0,$FFFF,	$B00, $201; 0 ;	DATA XREF: h+23306t
		dc.w $FFFF,  $C0,$FFFF,	$E00, $303; 5
		dc.w $FFFF, $2C0,$FFFF,$1600, $201; 10
		dc.w $FFFF, $380,$FFFF,$1900, $303; 15
		dc.w $FFFF, $580,$FFFF,$2100, $201; 20
		dc.w $FFFF, $640,$FFFF,$2400, $303; 25
		dc.w $FFFF, $840,$FFFF,$2C00, $201; 30
		dc.w $FFFF, $900,$FFFF,$2F00, $303; 35
; ===========================================================================

loc_3A2F4:				
		subi.w	#$20,8(a0) ; ' '
		subq.w	#1,$2A(a0)
		bmi.s	loc_3A312
		bsr.w	loc_3A426
		lea	(off_3A59E).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3A312:				
		addq.b	#2,$24(a0)
		move.w	#$C,$2A(a0)
		move.b	#1,$2C(a0)
		move.b	#-1,$2D(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3A32C:				
		tst.w	$2A(a0)
		beq.s	loc_3A33A
		subq.w	#1,$2A(a0)
		bsr.w	loc_3A426

loc_3A33A:				
		lea	(word_3A49E)(pc),a1
		bsr.w	loc_3A44E
		bne.s	loc_3A346
		rts	
; ===========================================================================

loc_3A346:				
		addq.b	#2,$24(a0)
		bchg	#0,1(a0)
		move.w	#$B,$2A(a0)
		move.w	#4,($FFFFF662).w
		subi.w	#$28,8(a0) ; '('
		bchg	#0,1(a0)
		bchg	#0,$22(a0)
		lea	(v_hscroll_buffer).w,a1
		moveq	#0,d0
		move.w	#$400,d1

loc_3A378:				
		move.l	d0,(a1)+
		dbf	d1,loc_3A378
		lea	($FFFFE13C).w,a1
		lea	(byte_3A76C)(pc),a2
		moveq	#0,d0
		moveq	#$22,d6	; '"'

loc_3A38A:				
		move.b	(a2)+,d0
		sub.w	d0,(a1)
		addq.w	#8,a1
		dbf	d6,loc_3A38A
		rts	
; ===========================================================================

loc_3A396:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3A3B4
		addi.w	#$20,8(a0) ; ' '
		bsr.w	loc_3A43A
		lea	(off_3A59E).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3A3B4:				
		addq.b	#2,$24(a0)
		move.w	#$C,$2A(a0)
		move.b	#1,$2C(a0)
		move.b	#-1,$2D(a0)
		rts	
; ===========================================================================

loc_3A3CC:				
		tst.w	$2A(a0)
		beq.s	loc_3A3DA
		subq.w	#1,$2A(a0)
		bsr.w	loc_3A43A

loc_3A3DA:				
		lea	(word_3A514)(pc),a1
		bsr.w	loc_3A44E
		bne.s	loc_3A3E6
		rts	
; ===========================================================================

loc_3A3E6:				
		addq.b	#2,$24(a0)
		st.b	($FFFFF660).w
		move.b	#-6,d0
		bsr.w	loc_3EA60

locret_3A3F6:				
		rts	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3A3F8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3A406(pc,d0.w),d1
		jmp	off_3A406(pc,d1.w)
; ===========================================================================
off_3A406:	dc.w loc_3A40A-off_3A406; 0 
		dc.w loc_3A422-off_3A406; 1
; ===========================================================================

loc_3A40A:				
		bsr.w	loc_365F4
		move.b	#4,$1A(a0)
		move.w	#$174,8(a0)
		move.w	#$D8,$A(a0)
		rts	
; ===========================================================================

loc_3A422:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3A426:				
		lea	($FFFFE138).w,a1
		move.w	#$22,d6	; '"'

loc_3A42E:				
		subi.w	#$20,(a1) ; ' '
		addq.w	#8,a1
		dbf	d6,loc_3A42E
		rts	
; ===========================================================================

loc_3A43A:				
		lea	($FFFFE13C).w,a1
		move.w	#$22,d6	; '"'

loc_3A442:				
		addi.w	#$20,(a1) ; ' '
		addq.w	#8,a1
		dbf	d6,loc_3A442
		rts	
; ===========================================================================

loc_3A44E:				
		subq.b	#1,$2C(a0)
		bne.s	loc_3A496
		moveq	#0,d0
		move.b	$2D(a0),d0
		addq.b	#1,d0
		cmp.b	1(a1),d0
		bcs.s	loc_3A468
		tst.b	3(a1)
		bne.s	loc_3A49A

loc_3A468:				
		move.b	d0,$2D(a0)
		_move.b	0(a1),$2C(a0)
		lea	6(a1),a2
		moveq	#0,d1
		move.b	2(a1),d1
		move.w	d1,d2
		tst.w	d0
		beq.s	loc_3A48C

loc_3A482:				
		subq.b	#1,d0
		beq.s	loc_3A48A
		add.w	d2,d1
		bra.s	loc_3A482
; ===========================================================================

loc_3A48A:				
		adda.w	d1,a2

loc_3A48C:				
		movea.w	4(a1),a3

loc_3A490:				
		move.w	(a2)+,(a3)+
		subq.w	#2,d2
		bne.s	loc_3A490

loc_3A496:				
		moveq	#0,d0
		rts	
; ===========================================================================

loc_3A49A:				
		moveq	#1,d0
		rts	
; ===========================================================================
word_3A49E:	
		; some data describing how to use the following palette
		dc.b   4	; 0	; How many frames before each iteration
		dc.b   7	; 1	; How many iterations
		dc.b $10	; 2	; Number of colors * 2 to skip each iteration
		dc.b $FF	; 3	; Some sort of flag
		dc.w v_pal_dry+$10	; 4	; First target palette entry

		incbin "art/palettes/Sega Screen 2.bin"

word_3A514:
		; some data describing how to use the following palette
		dc.b   4	; 0	; How many frames before each iteration
		dc.b   7	; 1	; How many iterations
		dc.b $10	; 2	; Number of colors * 2 to skip each iteration
		dc.b $FF	; 3	; Some sort of flag
		dc.w v_pal_dry	; 4	; First target palette entry
		
		incbin	"art/palettes/Sega Screen 3.bin"
		
		
off_3A58A:	dc.l Art_3A5A6	
		dc.w $C088
		dc.w 1
		dc.w $1000
off_3A594:	dc.l Art_3A5A6	
		dc.w 3
		dc.w 2
		dc.w $800
off_3A59E:	dc.w byte_3A5A0-off_3A59E 
byte_3A5A0:	dc.b   0,  0,  1,  2,  3,$FF; 0	
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Art_3A5A6:				
		dc.w word_3A5B0-Art_3A5A6; 0
		dc.w word_3A5E2-Art_3A5A6; 1
		dc.w word_3A614-Art_3A5A6; 2
		dc.w word_3A646-Art_3A5A6; 3
		dc.w word_3A678-Art_3A5A6; 4
word_3A5B0:	dc.w 6			
		dc.w $D80F,    0,    0,$FFF0; 0
		dc.w $D807,  $10,    8,	 $10; 4
		dc.w $F80F,  $18,   $C,$FFE0; 8
		dc.w $180F,  $28,  $14,$FFE0; 12
		dc.w $F80F,  $38,  $1C,	   0; 16
		dc.w $180F,  $48,  $24,	   0; 20
word_3A5E2:	dc.w 6			
		dc.w $D80F,  $58,  $2C,$FFF0; 0
		dc.w $D807,  $68,  $34,	 $10; 4
		dc.w $F80F,  $70,  $38,$FFE0; 8
		dc.w $180F,  $80,  $40,$FFE0; 12
		dc.w $F80F,  $90,  $48,	   0; 16
		dc.w $180F,  $A0,  $50,	   0; 20
word_3A614:	dc.w 6			
		dc.w $D80F,  $B0,  $58,$FFF0; 0
		dc.w $D807,  $C0,  $60,	 $10; 4
		dc.w $F80F,  $C8,  $64,$FFE0; 8
		dc.w $180F,  $D8,  $6C,$FFE0; 12
		dc.w $F80F,  $E8,  $74,	   0; 16
		dc.w $180F,  $F8,  $7C,	   0; 20
word_3A646:	dc.w 6			
		dc.w $D80F, $108,  $84,$FFF0; 0
		dc.w $D807, $118,  $8C,	 $10; 4
		dc.w $F80F, $120,  $90,$FFE0; 8
		dc.w $180F, $130,  $98,$FFE0; 12
		dc.w $F80F, $140,  $A0,	   0; 16
		dc.w $180F, $150,  $A8,	   0; 20
word_3A678:	dc.w 2			
		dc.w $FC00,    0,    0,$FFF8; 0
		dc.w $FC00,    0,    0,	   0; 4
; ===========================================================================

loc_3A68A:				
		move.w	($FFFFF662).w,d0
		beq.w	locret_37A48
		clr.w	($FFFFF662).w
		move.w	loc_3A69A+2(pc,d0.w),d0

loc_3A69A:
		jmp	off_3A69E(pc,d0.w)
; ===========================================================================
off_3A69E:	dc.w loc_3A6A2-off_3A69E; 0 
		dc.w loc_3A6D4-off_3A69E; 1
; ===========================================================================

loc_3A6A2:				
		lea	(vdp_control_port).l,a5
		move.l	#$94169300,(a5)
		move.l	#$96859580,(a5)
		move.w	#$977F,(a5)
		move.w	#$5100,(a5)
		move.w	#$80,(v_vdp_dma_buffer).w
		move.w	(v_vdp_dma_buffer).w,(a5)
		lea	(byte_3A74C)(pc),a1
		move.l	#$49500003,d0
		bra.w	loc_3A710
; ===========================================================================

loc_3A6D4:				
		lea	(vdp_control_port).l,a5
		move.w	#-$70FF,(a5)
		move.l	#-$6BE06C01,(a5)
		move.w	#-$6880,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(vdp_data_port).l

loc_3A6F6:				
		move.w	(a5),d1
		btst	#1,d1
		bne.s	loc_3A6F6
		move.w	#-$70FE,(a5)
		lea	(byte_3A75C)(pc),a1
		move.l	#$49A00003,d0
		bra.w	*+4

loc_3A710:				
		lea	(vdp_data_port).l,a6
		move.l	#$1000000,d6
		moveq	#7,d1
		moveq	#9,d2

loc_3A720:				
		move.l	d0,4(a6)
		move.w	d1,d3
		movea.l	a1,a2

loc_3A728:				
		move.w	(a2)+,d4
		bclr	#$A,d4
		beq.s	loc_3A734
		bsr.w	loc_3A742

loc_3A734:				
		move.w	d4,(a6)
		dbf	d3,loc_3A728
		add.l	d6,d0
		dbf	d2,loc_3A720
		rts	
; ===========================================================================

loc_3A742:				
		moveq	#$28,d5	; '('

loc_3A744:				
		move.w	d4,(a6)
		dbf	d5,loc_3A744
		rts	
; ===========================================================================
byte_3A74C:	dc.b $A0,$80		; 0 
		dc.b $A0,$81		; 2
		dc.b $A0,$82		; 4
		dc.b $A0,$83		; 6
		dc.b $A0,$84		; 8
		dc.b $A0,$85		; 10
		dc.b $A0,$86		; 12
		dc.b $A4,$87		; 14
byte_3A75C:	dc.b $A4,$87		; 0 
		dc.b $A0,$86		; 2
		dc.b $A0,$85		; 4
		dc.b $A0,$84		; 6
		dc.b $A0,$83		; 8
		dc.b $A0,$82		; 10
		dc.b $A0,$81		; 12
		dc.b $A0,$80		; 14
byte_3A76C:	dc.b $12		; 0 
		dc.b   4		; 1
		dc.b   4		; 2
		dc.b   2		; 3
		dc.b   2		; 4
		dc.b   2		; 5
		dc.b   2		; 6
		dc.b   0		; 7
		dc.b   0		; 8
		dc.b   0		; 9
		dc.b   0		; 10
		dc.b   0		; 11
		dc.b   0		; 12
		dc.b   0		; 13
		dc.b   0		; 14
		dc.b   4		; 15
		dc.b   4		; 16
		dc.b   6		; 17
		dc.b  $A		; 18
		dc.b   8		; 19
		dc.b   6		; 20
		dc.b   4		; 21
		dc.b   4		; 22
		dc.b   4		; 23
		dc.b   4		; 24
		dc.b   6		; 25
		dc.b   6		; 26
		dc.b   8		; 27
		dc.b   8		; 28
		dc.b  $A		; 29
		dc.b  $A		; 30
		dc.b  $C		; 31
		dc.b  $E		; 32
		dc.b $10		; 33
		dc.b $16		; 34
		dc.b   0		; 35
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; The Tornado
; ----------------------------------------------------------------------------

Sprite_3A790:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3A79E(pc,d0.w),d1
		jmp	off_3A79E(pc,d1.w)
; ===========================================================================
off_3A79E:	dc.w loc_3A7AE-off_3A79E; 0 
		dc.w loc_3A7DE-off_3A79E; 1
		dc.w loc_3A89A-off_3A79E; 2
		dc.w loc_3A954-off_3A79E; 3
		dc.w loc_3AC6A-off_3A79E; 4
		dc.w loc_3AD0C-off_3A79E; 5
		dc.w loc_3AD2A-off_3A79E; 6
		dc.w loc_3AD42-off_3A79E; 7
; ===========================================================================

loc_3A7AE:				
		bsr.w	loc_365F4
		moveq	#0,d0
		move.b	$28(a0),d0
		subi.b	#$4E,d0	; 'N'
		move.b	d0,$24(a0)
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_3A7DA
		cmpi.b	#8,d0
		bcc.s	loc_3A7DA
		move.b	#4,$1A(a0)
		move.b	#1,$1C(a0)

loc_3A7DA:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3A7DE:				
		bsr.w	loc_3AF58
		tst.w	(v_debug_active).w
		bne.w	loc_3A880
		lea	($FFFFB000).w,a1
		move.w	2(a1),d0
		andi.w	#-$8000,d0
		move.w	2(a0),d1
		andi.w	#$7FFF,d1
		or.w	d0,d1
		move.w	d1,2(a0)
		move.w	8(a0),-(sp)
		bsr.w	loc_3ADAA
		move.b	$22(a0),$2E(a0)
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		bsr.w	loc_3EAB4
		bsr.w	loc_3AE3A
		move.b	$2E(a0),d0
		move.b	$22(a0),d1
		andi.b	#8,d0
		andi.b	#8,d1
		eor.b	d0,d1
		move.b	d1,$2E(a0)
		lea	($FFFFB000).w,a1
		move.w	8(a1),d1
		move.w	(v_camera_x_pos).w,d0
		move.w	d0,(v_boundary_left_next).w
		move.w	d0,d2
		addi.w	#$11,d2
		cmp.w	d2,d1
		bhi.s	loc_3A85E
		addq.w	#1,d1
		move.w	d1,8(a1)

loc_3A85E:				
		cmpi.w	#$1400,d0
		bcs.s	loc_3A878
		cmpi.w	#$1568,d1
		bcc.s	loc_3A88E
		st.b	(f_lock_controls).w
		move.w	#$808,(v_joypad_hold).w
		bra.w	loc_3A87C
; ===========================================================================

loc_3A878:				
		subi.w	#$40,d0	; '@'

loc_3A87C:				
		move.w	d0,(v_boundary_right_next).w

loc_3A880:				
		lea	(off_3AFDC).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3A88E:				
		bsr.w	loc_3AC46
		move.w	#$600,(v_zone).w
		bra.s	loc_3A880
; ===========================================================================

loc_3A89A:				
		bsr.w	loc_3AF58
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3A8BA(pc,d0.w),d1
		jsr	off_3A8BA(pc,d1.w)
		lea	(off_3AFDC).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_368F8
; ===========================================================================
off_3A8BA:	dc.w loc_3A8C2-off_3A8BA; 0 
		dc.w loc_3A8D4-off_3A8BA; 1
		dc.w loc_3A91A-off_3A8BA; 2
		dc.w loc_3A94E-off_3A8BA; 3
; ===========================================================================

loc_3A8C2:				
		addq.b	#2,$25(a0)
		move.w	#$C0,$32(a0)
		move.w	#$100,$10(a0)
		rts	
; ===========================================================================

loc_3A8D4:				
		subq.w	#1,$32(a0)
		bmi.s	loc_3A8FC
		move.w	8(a0),-(sp)
		bsr.w	loc_3EAC0
		bsr.w	loc_36776
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		bsr.w	loc_3EAB4
		bra.w	loc_3AEEC
; ===========================================================================

loc_3A8FC:				
		addq.b	#2,$25(a0)
		move.w	#$60,$2A(a0) ; '`'
		move.w	#1,$32(a0)
		move.w	#$100,$10(a0)
		move.w	#$100,$12(a0)
		rts	
; ===========================================================================

loc_3A91A:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3A92A
		moveq	#-$15,d0
		bsr.w	loc_3EA60

loc_3A92A:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3A946

loc_3A930:				
		bsr.w	loc_3AD8C
		subq.w	#1,$32(a0)
		bne.w	locret_37A48
		move.w	#$E,$32(a0)
		bra.w	loc_3AF34
; ===========================================================================

loc_3A946:				
		addq.b	#2,$25(a0)
		bra.w	loc_3B7BC
; ===========================================================================

loc_3A94E:				
		bsr.w	loc_3EAC0
		bra.s	loc_3A930
; ===========================================================================

loc_3A954:				
		bsr.w	loc_3AF58
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3A970(pc,d0.w),d1
		jsr	off_3A970(pc,d1.w)
		lea	(off_3AFDC).l,a1
		bra.w	loc_3EA6C
; ===========================================================================
off_3A970:	dc.w loc_3A982-off_3A970; 0 
		dc.w loc_3AA0E-off_3A970; 1
		dc.w loc_3AA4C-off_3A970; 2
		dc.w loc_3AA74-off_3A970; 3
		dc.w loc_3AAA8-off_3A970; 4
		dc.w loc_3AAFE-off_3A970; 5
		dc.w loc_3AB68-off_3A970; 6
		dc.w loc_3AB7C-off_3A970; 7
		dc.w loc_3ABDE-off_3A970; 8
; ===========================================================================

loc_3A982:				
		lea	($FFFFB000).w,a1
		cmpi.w	#$5EC,$C(a1)
		bcs.s	locret_3A99E
		clr.w	(v_joypad_hold).w
		addq.w	#1,$2E(a0)
		cmpi.w	#$40,$2E(a0) ; '@'
		bcc.s	loc_3A9A0

locret_3A99E:				
		rts	
; ===========================================================================

loc_3A9A0:				
		addq.b	#2,$25(a0)
		move.w	#$2E58,8(a0)
		move.w	#$66C,$C(a0)
		lea	($FFFFB000).w,a1
		bsr.w	loc_3AC56
		lea	(word_3AFBC).l,a2
		bsr.w	loc_367D0
		move.w	#$3118,8(a1)
		move.w	#$3F0,$C(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	loc_367D0
		move.w	#$3070,8(a1)
		move.w	#$3B0,$C(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	loc_367D0
		move.w	#$3070,8(a1)
		move.w	#$430,$C(a1)
		lea	(word_3AFC0).l,a2
		bsr.w	loc_367D0
		clr.w	8(a1)
		clr.w	$C(a1)
		rts	
; ===========================================================================

loc_3AA0E:				
		lea	($FFFFB000).w,a1
		cmpi.w	#$2E30,8(a1)
		bcc.s	loc_3AA22
		move.w	#$808,(v_joypad_hold).w
		rts	
; ===========================================================================

loc_3AA22:				
		addq.b	#2,$25(a0)
		clr.w	(v_joypad_hold).w
		clr.w	$10(a1)
		clr.w	$12(a1)
		clr.w	$14(a1)
		move.w	#$600,(v_sonic_max_speed).w
		move.w	#$C,(v_sonic_acceleration).w
		move.w	#$80,(v_sonic_deceleration).w
		bra.w	loc_3AC56
; ===========================================================================

loc_3AA4C:				
		cmpi.w	#$380,(v_camera_x_pos_offset).w
		bcc.s	loc_3AA5C
		clr.w	(v_joypad_hold).w
		bra.w	loc_3AC56
; ===========================================================================

loc_3AA5C:				
		addq.b	#2,$25(a0)
		move.w	#$100,$10(a0)
		move.w	#-$100,$12(a0)
		clr.w	$2A(a0)
		bra.w	loc_3AC56
; ===========================================================================

loc_3AA74:				
		bsr.w	loc_3AC56
		addq.w	#1,$2A(a0)
		cmpi.w	#$30,$2A(a0) ; '0'
		bne.s	loc_3AAA0
		addq.b	#2,$25(a0)
		move.w	#$4040,(v_joypad_hold).w
		move.w	#$38,$2E(a0)
		tst.b	(f_super).w
		beq.s	loc_3AAA0
		move.w	#$28,$2E(a0) ; '('

loc_3AAA0:				
		bsr.w	loc_3AD8C
		bra.w	loc_3EA42
; ===========================================================================

loc_3AAA8:				
		clr.w	(v_joypad_hold).w
		addq.w	#1,$2A(a0)
		subq.w	#1,$2E(a0)
		bmi.s	loc_3AABC
		move.w	#$4848,(v_joypad_hold).w

loc_3AABC:				
		bsr.w	loc_3AD8C
		btst	#3,$22(a0)
		beq.s	loc_3AAFA
		addq.b	#2,$25(a0)
		move.w	#$20,$2E(a0) ; ' '
		lea	($FFFF80D2).w,a1
		move.l	#$501F0025,(a1)+
		lea	($FFFF81D2).w,a1
		move.l	#$25001F50,(a1)+
		lea	($FFFF8BD6).w,a1
		move.l	#$501F0025,(a1)+
		lea	($FFFF8CD6).w,a1
		move.l	#$25001F50,(a1)+

loc_3AAFA:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3AAFE:				
		addq.w	#1,$2A(a0)
		cmpi.w	#$100,$2A(a0)
		bcs.s	loc_3AB18
		addq.b	#2,$25(a0)
		movea.w	$3A(a0),a1
		move.b	#2,$25(a1)

loc_3AB18:				
		clr.w	(v_joypad_hold).w
		lea	($FFFFB000).w,a1
		move.w	8(a0),8(a1)
		clr.w	$10(a1)
		clr.w	$12(a1)
		clr.w	$14(a1)
		bclr	#1,$22(a1)
		bclr	#2,$22(a1)
		move.l	#$1000505,$1A(a1)
		move.w	#$100,$1E(a1)
		move.b	#$13,$16(a1)
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_3AB60
		move.b	#$F,$16(a1)

loc_3AB60:				
		bsr.w	loc_3AD8C
		bra.w	loc_3EA42
; ===========================================================================

loc_3AB68:				
		clr.w	(v_joypad_hold).w
		bsr.w	loc_3AC56
		cmpi.w	#$437,$2A(a0)
		bcs.s	loc_3AB8A
		addq.b	#2,$25(a0)

loc_3AB7C:				
		cmpi.w	#$447,$2A(a0)
		bcc.s	loc_3AB8A
		move.w	#$4040,(v_joypad_hold).w

loc_3AB8A:				
		cmpi.w	#$460,$2A(a0)
		bcs.s	loc_3ABDE
		move.b	#6,(v_dle_routine).w
		addq.b	#2,$25(a0)
		lea	(word_3AFB8).l,a2
		bsr.w	loc_367D0
		move.w	#$3090,8(a1)
		move.w	#$3D0,$C(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	loc_367D0
		move.w	#$30C0,8(a1)
		move.w	#$3F0,$C(a1)
		lea	(word_3AFB8).l,a2
		bsr.w	loc_367D0
		move.w	#$3090,8(a1)
		move.w	#$410,$C(a1)

loc_3ABDE:				
					
		cmpi.w	#$9C0,$2A(a0)
		bcc.s	loc_3AC40
		move.w	$2A(a0),d0
		addq.w	#1,d0
		move.w	d0,$2A(a0)
		move.w	$34(a0),d1
		move.w	word_3AC16(pc,d1.w),d2
		cmp.w	d2,d0
		bcs.s	loc_3AC0E
		addq.w	#2,d1
		move.w	d1,$34(a0)
		lea	byte_3AC2A(pc,d1.w),a1
		move.b	(a1)+,$10(a0)
		move.b	(a1)+,$12(a0)

loc_3AC0E:				
		bsr.w	loc_3AD8C
		bra.w	loc_3EA42
; ===========================================================================
word_3AC16:	dc.w  $1E0		; 0
		dc.w  $260		; 1
		dc.w  $2A0		; 2
		dc.w  $2C0		; 3
		dc.w  $300		; 4
		dc.w  $3A0		; 5
		dc.w  $3F0		; 6
		dc.w  $460		; 7
		dc.w  $4A0		; 8
		dc.w  $580		; 9
byte_3AC2A:	dc.b $FF		; 0
		dc.b $FF		; 1
		dc.b   1		; 2
		dc.b   0		; 3
		dc.b   0		; 4
		dc.b   1		; 5
		dc.b   1		; 6
		dc.b $FF		; 7
		dc.b   1		; 8
		dc.b   1		; 9
		dc.b   1		; 10
		dc.b $FF		; 11
		dc.b $FF		; 12
		dc.b   1		; 13
		dc.b $FF		; 14
		dc.b $FF		; 15
		dc.b $FF		; 16
		dc.b   1		; 17
		dc.b $FE		; 18
		dc.b   0		; 19
		dc.b   0		; 20
		dc.b   0		; 21
; ===========================================================================

loc_3AC40:				
		move.w	#$E00,(v_zone).w

loc_3AC46:				
		move.w	#1,(f_restart).w
		clr.b	(v_last_lamppost).w
		clr.b	(v_last_lamppost_p2).w
		rts	
; ===========================================================================

loc_3AC56:				
		lea	($FFFFB000).w,a1
		move.l	#$1000505,$1A(a1)
		move.w	#$100,$1E(a1)
		rts	
; ===========================================================================

loc_3AC6A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AC78(pc,d0.w),d1
		jmp	off_3AC78(pc,d1.w)
; ===========================================================================
off_3AC78:	dc.w loc_3AC7E-off_3AC78; 0 
		dc.w loc_3AC84-off_3AC78; 1
		dc.w loc_3ACF2-off_3AC78; 2
; ===========================================================================

loc_3AC7E:				
		move.b	#-$39,$20(a0)

loc_3AC84:				
		tst.b	$21(a0)
		beq.s	locret_3ACF0
		addq.b	#2,$25(a0)
		clr.b	$20(a0)
		move.w	#$78,(v_camera_y_shift).w ; 'x'
		movea.w	$2C(a0),a1
		bset	#6,$22(a1)
		lea	($FFFFB000).w,a1
		clr.w	$10(a1)
		clr.w	$12(a1)
		move.w	8(a0),d0
		subi.w	#$10,d0
		move.w	d0,8(a1)
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_3ACC8
		subi.w	#$10,$C(a1)

loc_3ACC8:				
		bset	#0,$22(a1)
		bclr	#1,$22(a1)
		bclr	#2,$22(a1)
		move.b	#$11,$1C(a1)
		move.b	#1,($FFFFB02A).w
		move.b	#1,(f_wind_tunnel_disable).w
		clr.w	(v_joypad_hold).w

locret_3ACF0:				
		rts	
; ===========================================================================

loc_3ACF2:				
		lea	($FFFFB000).w,a1
		clr.w	$10(a1)
		clr.w	$12(a1)
		move.w	8(a0),d0
		subi.w	#$10,d0
		move.w	d0,8(a1)
		rts	
; ===========================================================================

loc_3AD0C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AD1A(pc,d0.w),d1
		jmp	off_3AD1A(pc,d1.w)
; ===========================================================================
off_3AD1A:	dc.w loc_3AD1C-off_3AD1A ; DATA	XREF: h+23DA6o
; ===========================================================================

loc_3AD1C:				
		bchg	#2,$22(a0)
		bne.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================

loc_3AD2A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AD38(pc,d0.w),d1
		jmp	off_3AD38(pc,d1.w)
; ===========================================================================
off_3AD38:	dc.w loc_3AD3A-off_3AD38 ; DATA	XREF: h+23DC4o
; ===========================================================================

loc_3AD3A:				
		bsr.w	loc_3EAC0
		bra.w	loc_3EA54
; ===========================================================================

loc_3AD42:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3AD50(pc,d0.w),d1
		jmp	off_3AD50(pc,d1.w)
; ===========================================================================
off_3AD50:	dc.w loc_3AD54-off_3AD50; 0 
		dc.w loc_3AD5C-off_3AD50; 1
; ===========================================================================

loc_3AD54:				
		bsr.w	loc_3AD6E
		bra.w	loc_3EA42
; ===========================================================================

loc_3AD5C:				
		bsr.w	loc_3AD6E
		lea	(off_3AFEC).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3AD6E:				
		movea.w	$2C(a0),a1
		move.w	8(a1),d0
		subi.w	#$C,d0
		move.w	d0,8(a0)
		move.w	$C(a1),d0
		addi.w	#$28,d0	; '('
		move.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_3AD8C:				
		move.w	8(a0),-(sp)
		bsr.w	loc_3EAC0
		bsr.w	loc_36776
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAB4
; ===========================================================================

loc_3ADAA:				
		lea	($FFFFB000).w,a1
		btst	#3,$22(a1)
		beq.s	loc_3ADC6
		bsr.w	loc_3ADF6
		bsr.w	loc_3AF0C
		bsr.w	loc_3EAC0
		bra.w	loc_36776
; ===========================================================================

loc_3ADC6:				
		tst.b	$2E(a0)
		beq.s	loc_3ADD4
		bsr.w	loc_366D6
		move.w	d2,$38(a0)

loc_3ADD4:				
		move.w	#1,d0
		move.w	$38(a0),d3
		beq.s	loc_3ADE8
		bmi.s	loc_3ADE2
		neg.w	d0

loc_3ADE2:				
		add.w	d0,d3
		move.w	d3,$38(a0)

loc_3ADE8:				
		move.w	8(a1),d1
		add.w	d3,d1
		move.w	d1,8(a0)
		bra.w	loc_36776
; ===========================================================================

loc_3ADF6:				
		tst.b	$2F(a0)
		bne.s	loc_3AE16
		tst.b	$2E(a0)
		beq.s	locret_3AE38
		st.b	$2F(a0)
		clr.b	$30(a0)
		move.w	#$200,$12(a0)
		move.b	#$14,$31(a0)

loc_3AE16:				
		subq.b	#1,$31(a0)
		bpl.s	loc_3AE26
		clr.b	$2F(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_3AE26:				
		move.w	$12(a0),d0
		cmpi.w	#-$100,d0
		ble.s	loc_3AE34
		addi.w	#-$20,d0

loc_3AE34:				
		move.w	d0,$12(a0)

locret_3AE38:				
		rts	
; ===========================================================================

loc_3AE3A:				
		lea	($FFFFB000).w,a1
		btst	#3,$22(a1)
		beq.s	loc_3AEA0
		tst.b	$2F(a0)
		bne.s	loc_3AE72
		clr.w	$12(a0)
		move.w	(v_joypad_hold_actual).w,d2
		move.w	#$80,d3	
		andi.w	#$300,d2
		beq.s	loc_3AE72
		andi.w	#$200,d2
		bne.s	loc_3AE66
		neg.w	d3

loc_3AE66:				
		move.w	d3,$12(a0)
		bsr.w	loc_3AF0C
		bsr.w	loc_3EAC0

loc_3AE72:				
		bsr.w	loc_366D6
		moveq	#$10,d3
		add.w	d3,d2
		cmpi.w	#$20,d2	; ' '
		bcs.s	locret_3AE9E
		move.w	$14(a1),d2
		bpl.s	loc_3AE88
		neg.w	d2

loc_3AE88:				
		cmpi.w	#$900,d2
		bcc.s	locret_3AE9E
		tst.w	d0
		beq.s	loc_3AE94
		neg.w	d3

loc_3AE94:				
		move.w	8(a1),d1
		add.w	d3,d1
		move.w	d1,8(a0)

locret_3AE9E:				
		rts	
; ===========================================================================

loc_3AEA0:				
		tst.b	$30(a0)
		bne.s	loc_3AEC0
		tst.b	$2E(a0)
		beq.s	locret_3AE9E
		st.b	$30(a0)
		clr.b	$2F(a0)
		move.w	#$200,$12(a0)
		move.b	#$2B,$31(a0) ; '+'

loc_3AEC0:				
		subq.b	#1,$31(a0)
		bpl.s	loc_3AED0
		clr.b	$30(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_3AED0:				
		move.w	$12(a0),d0
		cmpi.w	#-$100,d0
		ble.s	loc_3AEDE
		addi.w	#-$20,d0

loc_3AEDE:				
		move.w	d0,$12(a0)
		bsr.w	loc_3AF0C
		bsr.w	loc_3EAC0
		rts	
; ===========================================================================

loc_3AEEC:				
		bsr.w	loc_366D6
		moveq	#$10,d3
		add.w	d3,d2
		cmpi.w	#$20,d2	; ' '
		bcs.s	locret_3AF0A
		tst.w	d0
		beq.s	loc_3AF00
		neg.w	d3

loc_3AF00:				
		move.w	8(a0),d1
		sub.w	d3,d1
		move.w	d1,8(a1)

locret_3AF0A:				
		rts	
; ===========================================================================

loc_3AF0C:				
		move.w	(v_camera_y_pos).w,d0
		move.w	$C(a0),d1
		move.w	$12(a0),d2
		beq.s	locret_3AF32
		bpl.s	loc_3AF26
		addi.w	#$34,d0	; '4'
		cmp.w	d0,d1
		bcs.s	loc_3AF2E
		rts	
; ===========================================================================

loc_3AF26:				
		addi.w	#$A8,d0	
		cmp.w	d0,d1
		bcs.s	locret_3AF32

loc_3AF2E:				
		clr.w	$12(a0)

locret_3AF32:				
		rts	
; ===========================================================================

loc_3AF34:				
		bsr.w	loc_3EA66
		bne.s	locret_3AF56
		_move.b	#-$3C,0(a1)
		move.b	#-$70,$28(a1)
		move.w	a0,$2C(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

locret_3AF56:				
		rts	
; ===========================================================================

loc_3AF58:				
		subq.b	#1,$37(a0)
		bmi.s	loc_3AF60
		rts	
; ===========================================================================

loc_3AF60:				
		move.b	#8,$37(a0)
		moveq	#0,d0
		move.b	$36(a0),d0
		moveq	#$18,d1
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_3AF78
		moveq	#4,d1

loc_3AF78:				
		addq.b	#1,d0
		cmp.w	d1,d0
		bcs.s	loc_3AF80
		moveq	#0,d0

loc_3AF80:				
		move.b	d0,$36(a0)
		cmpi.w	#2,(v_player_mode).w
		bne.s	loc_3AF94
		move.b	byte_3AF9C(pc,d0.w),d0
		bra.w	loc_3EA90
; ===========================================================================

loc_3AF94:				
		move.b	byte_3AFA0(pc,d0.w),d0
		bra.w	loc_3EA8A
; ===========================================================================
byte_3AF9C:	dc.b $2D		; 0
		dc.b $2E		; 1
		dc.b $2F		; 2
		dc.b $30		; 3
byte_3AFA0:	dc.b $10		; 0
		dc.b $10		; 1
		dc.b $10		; 2
		dc.b $10		; 3
		dc.b   1		; 4
		dc.b   2		; 5
		dc.b   3		; 6
		dc.b   2		; 7
		dc.b   1		; 8
		dc.b   1		; 9
		dc.b $10		; 10
		dc.b $10		; 11
		dc.b $10		; 12
		dc.b $10		; 13
		dc.b   1		; 14
		dc.b   2		; 15
		dc.b   3		; 16
		dc.b   2		; 17
		dc.b   1		; 18
		dc.b   1		; 19
		dc.b   4		; 20
		dc.b   4		; 21
		dc.b   1		; 22
		dc.b   1		; 23
word_3AFB8:	dc.w   $3E		; 0 
		dc.w $B258		; 1
word_3AFBC:	dc.w   $3C		; 0 
		dc.w $B256		; 1
word_3AFC0:	dc.w   $3A		; 0 
		dc.w $B25C		; 1
		dc.w   $3E		; 0
		dc.w $B25A		; 1
off_3AFC8:	dc.l Map_3AFF2	; 0 
					; h+1F6B4o
		dc.w $8500
		dc.w $404
		dc.w $6000
off_3AFD2:	dc.l Map_3B292	
		dc.w $561
		dc.w $403
		dc.w $4000
off_3AFDC:	dc.w byte_3AFE0-off_3AFDC; 0 
					; h+2390Co ...
		dc.w byte_3AFE6-off_3AFDC; 1
byte_3AFE0:	dc.b   0,  0,  1,  2,  3,$FF; 0	
byte_3AFE6:	dc.b   0,  4,  5,  6,  7,$FF; 0	
off_3AFEC:	dc.w byte_3AFEE-off_3AFEC 
byte_3AFEE:	dc.b   0,  1,  2,$FF	; 0 
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3AFF2:				
		dc.w byte_3AFFE-byte_3AFEE; 0
		dc.w byte_3B050-byte_3AFEE; 1
		dc.w byte_3B0A2-byte_3AFEE; 2
		dc.w byte_3B0F4-byte_3AFEE; 3
		dc.w byte_3B146-byte_3AFEE; 4
		dc.w byte_3B198-byte_3AFEE; 5
byte_3AFFE:	dc.b   1,$FC,  2,$4E,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$3F,  0,$1F,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
byte_3B050:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$46,  0,$23,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
byte_3B0A2:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$49,  0,$24,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
byte_3B0F4:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$A0,  1,$50,$FF,$D0,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$4C,  0,$26,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
byte_3B146:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$3F,  0,$1F,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
byte_3B198:	dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
					
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$46,  0,$23,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
		dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$49,  0,$24,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
		dc.b   0,$21,$FF,$F4,  0, $A,$F0, $B,  0,  0,  0,  0,$FF,$A0,$10,  8; 0
		dc.b   0, $C,  0,  6,$FF,$A0,  3, $A,  0, $F,  0,  7,$FF,$B8,$F8,  9; 16
		dc.b   2,$80,  1,$40,$FF,$CE,  8, $E,  0,$1E,  0, $F,$FF,$D0,$F8, $D; 32
		dc.b   0,$2A,  0,$15,$FF,$E8,$F8,  0,  0,$32,  0,$19,  0,  8,  8, $E; 48
		dc.b   0,$33,  0,$19,$FF,$F0,  8,  2,  0,$4C,  0,$26,  0,$10,$20,  5; 64
		dc.b   0,$42		; 80
		dc.b   0,$21,$FF,$F4	; 0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3B292:				
		dc.w word_3B298-Map_3B292; 0
		dc.w word_3B2AA-Map_3B292; 1
		dc.w word_3B2C4-Map_3B292; 2
word_3B298:	dc.w 2			
		dc.w $F809,$2000,$2000,$FFE4; 0
		dc.w $F80D,$2006,$2003,$FFFC; 4
word_3B2AA:	dc.w 3			
		dc.w $F809,$2000,$2000,$FFE4; 0
		dc.w $F80D,$2006,$2003,$FFFC; 4
		dc.w $F80D,$400E,$4007,$FFC4; 8
word_3B2C4:	dc.w 3			
		dc.w $F809,$2000,$2000,$FFE4; 0
		dc.w $F80D,$2006,$2003,$FFFC; 4
		dc.w $F805,$4016,$400B,$FFD4; 8
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3B2DE:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3B2EC(pc,d0.w),d1
		jmp	off_3B2EC(pc,d1.w)
; ===========================================================================
off_3B2EC:	dc.w loc_3B2F0-off_3B2EC; 0 
		dc.w loc_3B312-off_3B2EC; 1
; ===========================================================================

loc_3B2F0:				
		bsr.w	loc_365F4
		moveq	#0,d0
		move.b	$28(a0),d0
		subi.b	#$5E,d0	; '^'

loc_3B2FE:
		move.w	word_3B30C(pc,d0.w),$10(a0)
		lsr.w	#1,d0
		move.b	d0,$1A(a0)
		rts	
; ===========================================================================
word_3B30C:	dc.w $FF80		; 0
		dc.w $FFC0		; 1
		dc.w $FFE0		; 2
; ===========================================================================

loc_3B312:				
		bsr.w	loc_3EAC0
		move.w	(v_tornado_x_vel).w,d0
		add.w	d0,8(a0)
		bra.w	loc_36788
; ===========================================================================
off_3B322:	dc.l Map_3B32C	
					
		dc.w $454F
		dc.w $406
		dc.w $3000
Map_3B32C:				
		dc.w byte_3B334-Map_3B32C; 0
		dc.w byte_3B34E-Map_3B32C; 1
		dc.w byte_3B360-Map_3B32C; 2
		dc.w byte_3B334-Map_3B32C; 3
byte_3B334:	dc.b   0,  3,$FC, $C,  0,  0,  0,  0,$FF,$D8,$FC, $C,  0,  4,  0,  2; 0
					
		dc.b $FF,$F8,$FC,  4,  0,  8,  0,  4,  0,$18; 16
byte_3B34E:	dc.b   0,  2,$FC, $C,  0, $A,  0,  5,$FF,$E8,$FC,  4,  0, $E,  0,  7; 0
					
		dc.b   0,  8		; 16
byte_3B360:	dc.b   0,  1,$FC,  4,  0,$10,  0,  8,$FF,$F8; 0	
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3B36A:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3B378(pc,d0.w),d1
		jmp	off_3B378(pc,d1.w)
; ===========================================================================
off_3B378:	dc.w loc_3B37C-off_3B378; 0 
		dc.w loc_3B38E-off_3B378; 1
; ===========================================================================

loc_3B37C:				
		bsr.w	loc_365F4
		bclr	#1,1(a0)
		beq.s	locret_3B38C
		clr.b	$20(a0)

locret_3B38C:				
		rts	
; ===========================================================================

loc_3B38E:				
		lea	(off_3B3B6).l,a1
		bsr.w	loc_3EA6C
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3B3A8
		moveq	#-$22,d0
		bsr.w	loc_3EA72

loc_3B3A8:				
		bra.w	loc_3EA54
; ===========================================================================
off_3B3AC:	dc.l Map_3B3BE	
		dc.w $A561
		dc.w $404
		dc.w $4A8
off_3B3B6:	dc.w byte_3B3B8-off_3B3B6 
byte_3B3B8:	dc.b   1,  0,  1,  2,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3B3BE:				
		dc.w word_3B3C4-Map_3B3BE; 0
		dc.w word_3B3D6-Map_3B3BE; 1
		dc.w word_3B3E8-Map_3B3BE; 2
word_3B3C4:	dc.w 2			
		dc.w $C003,    0,    0,$FFFC; 0
		dc.w $E003,$1000,$1000,$FFFC; 4
word_3B3D6:	dc.w 2			
		dc.w $E003,    0,    0,$FFFC; 0
		dc.w	 3,$1000,$1000,$FFFC; 4
word_3B3E8:	dc.w 2			
		dc.w	 3,    0,    0,$FFFC; 0
		dc.w $2003,$1000,$1000,$FFFC; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3B3FA:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3B408(pc,d0.w),d1
		jmp	off_3B408(pc,d1.w)
; ===========================================================================
off_3B408:	dc.w loc_3B40E-off_3B408; 0 
		dc.w loc_3B426-off_3B408; 1
		dc.w loc_3B448-off_3B408; 2
; ===========================================================================

loc_3B40E:				
		bsr.w	loc_365F4
		move.b	#4,$1C(a0)
		move.b	$28(a0),d0
		subi.b	#$64,d0	; 'd'
		move.b	d0,$24(a0)
		rts	
; ===========================================================================

loc_3B426:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B442(pc,d0.w),d1
		jsr	off_3B442(pc,d1.w)
		lea	(off_3B4E8).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================
off_3B442:	dc.w loc_3B444-off_3B442 ; DATA	XREF: h+244CEo
; ===========================================================================

loc_3B444:				
		bra.w	loc_3B456
; ===========================================================================

loc_3B448:				
		lea	(off_3B4E8).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_3B456:				
		cmpi.b	#4,$1C(a0)
		bne.s	locret_3B4DC
		lea	($FFFFB000).w,a1
		bsr.w	loc_3B46A
		lea	($FFFFB040).w,a1

loc_3B46A:				
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$40,d0	; '@'
		cmpi.w	#$80,d0	
		bcc.s	locret_3B4DC
		moveq	#0,d1
		move.b	($FFFFFE74).w,d1
		add.w	$C(a1),d1
		addi.w	#$60,d1	; '`'
		sub.w	$C(a0),d1
		bcs.s	locret_3B4DC
		cmpi.w	#$90,d1	
		bcc.s	locret_3B4DC
		subi.w	#$60,d1	; '`'
		bcs.s	loc_3B4A0
		not.w	d1
		add.w	d1,d1

loc_3B4A0:				
		addi.w	#$60,d1	; '`'
		neg.w	d1
		asr.w	#4,d1
		add.w	d1,$C(a1)
		bset	#1,$22(a1)
		move.w	#0,$12(a1)
		move.w	#1,$14(a1)
		tst.b	$27(a1)
		bne.s	locret_3B4DC
		move.b	#1,$27(a1)
		move.b	#$F,$1C(a1)
		move.b	#$7F,$2C(a1) ; ''
		move.b	#8,$2D(a1)

locret_3B4DC:				
		rts	
; ===========================================================================
off_3B4DE:	dc.l Map_3B548	
		dc.w $A3CD
		dc.w $404
		dc.w $4000
off_3B4E8:	dc.w byte_3B4FC-off_3B4E8; 0 
		dc.w byte_3B506-off_3B4E8; 1
		dc.w byte_3B50E-off_3B4E8; 2
		dc.w byte_3B516-off_3B4E8; 3
		dc.w byte_3B51C-off_3B4E8; 4
		dc.w byte_3B524-off_3B4E8; 5
		dc.w byte_3B52A-off_3B4E8; 6
		dc.w byte_3B532-off_3B4E8; 7
		dc.w byte_3B53A-off_3B4E8; 8
		dc.w byte_3B544-off_3B4E8; 9
byte_3B4FC:	dc.b   7,  0,  1,  2,  3,  4,  5,$FD,  1,  0; 0	
byte_3B506:	dc.b   4,  0,  1,  2,  3,  4,$FD,  2; 0	
byte_3B50E:	dc.b   3,  5,  0,  1,  2,$FD,  3,  0; 0	
byte_3B516:	dc.b   2,  3,  4,  5,$FD,  4; 0	
byte_3B51C:	dc.b   1,  0,  1,  2,  3,  4,  5,$FF; 0	
byte_3B524:	dc.b   2,  5,  4,  3,$FD,  6; 0	
byte_3B52A:	dc.b   3,  2,  1,  0,  5,$FD,  7,  0; 0	
byte_3B532:	dc.b   4,  4,  3,  2,  1,  0,$FD,  8; 0	
byte_3B53A:	dc.b   7,  5,  4,  3,  2,  1,  0,$FD,  9,  0; 0	
byte_3B544:	dc.b $7E,  0,$FF,  0	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3B548:				
		dc.w word_3B554-Map_3B548; 0
		dc.w word_3B576-Map_3B548; 1
		dc.w word_3B588-Map_3B548; 2
		dc.w word_3B59A-Map_3B548; 3
		dc.w word_3B5AC-Map_3B548; 4
		dc.w word_3B5BE-Map_3B548; 5
word_3B554:	dc.w 4			
		dc.w $FC0C,    0,    0,$FFC0; 0
		dc.w $FC08,    4,    2,$FFE0; 4
		dc.w $FC08,    7,    3,	   8; 8
		dc.w $FC0C,   $A,    5,	 $20; 12
word_3B576:	dc.w 2			
		dc.w $FC0C,   $E,    7,$FFD8; 0
		dc.w $FC0C,  $12,    9,	   8; 4
word_3B588:	dc.w 2			
		dc.w $FC08,  $16,   $B,$FFE8; 0
		dc.w $FC04,  $19,   $C,	   8; 4
word_3B59A:	dc.w 2			
		dc.w $FC04,  $1B,   $D,$FFF0; 0
		dc.w $FC04, $81B, $80D,	   0; 4
word_3B5AC:	dc.w 2			
		dc.w $FC04, $819, $80C,$FFE8; 0
		dc.w $FC08, $816, $80B,	   0; 4
word_3B5BE:	dc.w 2			
		dc.w $FC0C, $812, $809,$FFD8; 0
		dc.w $FC0C, $80E, $807,	   8; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Tilting platform from	WFZ
; ----------------------------------------------------------------------------

Sprite_3B5D0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3B5DE(pc,d0.w),d1
		jmp	off_3B5DE(pc,d1.w)
; ===========================================================================
off_3B5DE:	dc.w loc_3B5E8-off_3B5DE; 0 
		dc.w loc_3B602-off_3B5DE; 1
		dc.w loc_3B65C-off_3B5DE; 2
		dc.w loc_3B6C8-off_3B5DE; 3
		dc.w loc_3B73C-off_3B5DE; 4
; ===========================================================================

loc_3B5E8:				
		moveq	#0,d0
		move.b	#$6A,d0	; 'j'
		bsr.w	loc_365FA
		move.b	$28(a0),d0
		andi.b	#6,d0
		addq.b	#2,d0
		move.b	d0,$24(a0)
		rts	
; ===========================================================================

loc_3B602:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B614(pc,d0.w),d1
		jsr	off_3B614(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_3B614:	dc.w loc_3B61C-off_3B614; 0 
		dc.w loc_3B624-off_3B614; 1
		dc.w loc_3B644-off_3B614; 2
		dc.w loc_3B64E-off_3B614; 3
; ===========================================================================

loc_3B61C:				
		addq.b	#2,$25(a0)
		bra.w	loc_3B77E
; ===========================================================================

loc_3B624:				
		bsr.w	loc_3B790
		move.b	($FFFFFE0F).w,d0
		andi.b	#-$10,d0
		cmp.b	$28(a0),d0
		beq.s	loc_3B638
		rts	
; ===========================================================================

loc_3B638:				
		addq.b	#2,$25(a0)
		clr.b	$1C(a0)
		bra.w	loc_3B7BC
; ===========================================================================

loc_3B644:				
		lea	(off_3B822).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_3B64E:				
		move.b	#2,$25(a0)
		move.w	#$C0,$2A(a0)
		rts	
; ===========================================================================

loc_3B65C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	word_3B66E(pc,d0.w),d1
		jsr	word_3B66E(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
word_3B66E:	dc.w loc_3B61C-word_3B66E; 0 
		dc.w loc_3B674-word_3B66E
		dc.w loc_3B6A6-word_3B66E
; ===========================================================================

loc_3B674:				
		bsr.w	loc_3B790
		subq.w	#1,$2A(a0)
		bmi.s	loc_3B680
		rts	
; ===========================================================================

loc_3B680:				
		addq.b	#2,$25(a0)
		move.b	#$20,$2A(a0) ; ' '
		move.b	#3,$1C(a0)
		clr.b	$1B(a0)
		clr.b	$1E(a0)
		bsr.w	loc_3B7BC
		bsr.w	loc_3B7F8
		moveq	#-$24,d0
		bra.w	loc_3EA60
; ===========================================================================

loc_3B6A6:				
		subq.b	#1,$2A(a0)
		bmi.s	loc_3B6B6
		lea	(off_3B822).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_3B6B6:				
		move.b	#2,$25(a0)
		clr.b	$1A(a0)
		move.w	#$C0,$2A(a0)
		rts	
; ===========================================================================

loc_3B6C8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B6DA(pc,d0.w),d1

loc_3B6D2:
		jsr	off_3B6DA(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_3B6DA:	dc.w loc_3B6E2-off_3B6DA; 0 
		dc.w loc_3B6FE-off_3B6DA; 1
		dc.w loc_3B72C-off_3B6DA; 2
		dc.w loc_3B736-off_3B6DA; 3
; ===========================================================================

loc_3B6E2:				
		bsr.w	loc_3B790
		move.b	$22(a0),d0
		andi.b	#$18,d0
		bne.s	loc_3B6F2
		rts	
; ===========================================================================

loc_3B6F2:				
		addq.b	#2,$25(a0)
		move.w	#$10,$2A(a0)
		rts	
; ===========================================================================

loc_3B6FE:				
		bsr.w	loc_3B790
		subq.w	#1,$2A(a0)
		bmi.s	loc_3B70A
		rts	
; ===========================================================================

loc_3B70A:				
		addq.b	#2,$25(a0)

loc_3B70E:
		move.b	#0,$1C(a0)
		bsr.w	loc_366D6

loc_3B718:
		bclr	#0,$22(a0)
		tst.w	d0
		bne.s	loc_3B728
		bset	#0,$22(a0)

loc_3B728:				
		bra.w	loc_3B7BC
; ===========================================================================

loc_3B72C:				
		lea	(off_3B822).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_3B736:				
		clr.b	$25(a0)
		rts	
; ===========================================================================

loc_3B73C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3B74E(pc,d0.w),d1
		jsr	off_3B74E(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_3B74E:	dc.w loc_3B756-off_3B74E; 0 
		dc.w loc_3B764-off_3B74E
		dc.w loc_3B644-off_3B74E
		dc.w loc_3B64E-off_3B74E
; ===========================================================================

loc_3B756:				
		addq.b	#2,$25(a0)

loc_3B75A:
		move.b	#2,$1A(a0)
		bra.w	loc_3B77E
; ===========================================================================

loc_3B764:				
		bsr.w	loc_3B7A6
		subq.w	#1,$2A(a0)
		bmi.s	loc_3B770
		rts	
; ===========================================================================

loc_3B770:				
		addq.b	#2,$25(a0)
		move.b	#4,$1C(a0)
		bra.w	loc_3B7BC
; ===========================================================================

loc_3B77E:				
		move.b	$28(a0),d0
		andi.w	#$F0,d0	
		move.b	d0,$28(a0)
		move.w	d0,$2A(a0)
		rts	
; ===========================================================================

loc_3B790:				
		move.w	8(a0),-(sp)
		move.w	#$23,d1	; '#'
		move.w	#4,d2
		move.w	#4,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAB4
; ===========================================================================

loc_3B7A6:				
		move.w	8(a0),-(sp)
		move.w	#$F,d1
		move.w	#$18,d2
		move.w	#$18,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAB4
; ===========================================================================

loc_3B7BC:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_3B7F6
		bclr	#3,$22(a0)
		beq.s	loc_3B7DE
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)
		bset	#1,$22(a1)

loc_3B7DE:				
		bclr	#4,$22(a0)
		beq.s	locret_3B7F6
		lea	($FFFFB040).w,a1
		bclr	#4,$22(a1)
		bset	#1,$22(a1)

locret_3B7F6:				
		rts	
; ===========================================================================

loc_3B7F8:				
		bsr.w	loc_3EA66
		bne.s	locret_3B816
		_move.b	#-$49,0(a1)
		move.b	#$72,$28(a1) ; 'r'

loc_3B80A:
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)

locret_3B816:				
		rts	
; ===========================================================================
off_3B818:	dc.l Map_3B856	
		dc.w $A393
		dc.w $404
		dc.w $1000
off_3B822:	dc.w byte_3B830-off_3B822; 0 
		dc.w byte_3B836-off_3B822; 1
		dc.w byte_3B83A-off_3B822; 2
		dc.w byte_3B840-off_3B822; 3
		dc.w byte_3B846-off_3B822; 4
		dc.w byte_3B84C-off_3B822; 5
		dc.w byte_3B850-off_3B822; 6
byte_3B830:	dc.b   3,  1,  2,$FD,  1,  0; 0	
byte_3B836:	dc.b $3F,  2,$FD,  2	; 0 
byte_3B83A:	dc.b   3,  2,  1,  0,$FA,  0; 0	
byte_3B840:	dc.b   1,  0,  1,  2,  3,$FF; 0	
byte_3B846:	dc.b   3,  1,  0,$FD,  5,  0; 0	
byte_3B84C:	dc.b $3F,  0,$FD,  6	; 0 
byte_3B850:	dc.b   3,  0,  1,  2,$FA,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3B856:				
		dc.w word_3B85E-Map_3B856; 0
		dc.w word_3B870-Map_3B856; 1
		dc.w word_3B882-Map_3B856; 2
		dc.w word_3B894-Map_3B856; 3
word_3B85E:	dc.w 2			
		dc.w $FC08,    0,    0,$FFE8; 0
		dc.w $FC08, $800, $800,	   0; 4
word_3B870:	dc.w 2			
		dc.w $EC06,    3,    1,$FFF0; 0
		dc.w $FC06,$1803,$1801,	   0; 4
word_3B882:	dc.w 2			
		dc.w $E802,    9,    4,$FFFC; 0
		dc.w	 2,$1009,$1004,$FFFC; 4
word_3B894:	dc.w 2			
		dc.w $EC06, $803, $801,	   0; 0
		dc.w $FC06,$1003,$1001,$FFF0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3B8A6:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3B8B4(pc,d0.w),d1
		jmp	off_3B8B4(pc,d1.w)
; ===========================================================================
off_3B8B4:	dc.w loc_3B8B8-off_3B8B4; 0 
		dc.w loc_3B8C4-off_3B8B4; 1
; ===========================================================================

loc_3B8B8:				
		bsr.w	loc_365F4
		move.b	#$20,$2A(a0) ; ' '
		rts	
; ===========================================================================

loc_3B8C4:				
		subq.b	#1,$2A(a0)
		beq.w	loc_3EA48
		bchg	#0,$2B(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA54
; ===========================================================================
off_3B8DA:	dc.l Map_3B8E4	
		dc.w $C39F
		dc.w $404
		dc.w $18A9
Map_3B8E4:				
		dc.w byte_3B8E6-Map_3B8E4
byte_3B8E6:	dc.b   0,$10,$90, $B,  0,  0,  0,  0,$FF,$E8,$90, $B,  8,  0,  8,  0; 0
					
		dc.b   0,  0,$B0, $B,  0,  0,  0,  0,$FF,$E8,$B0, $B,  8,  0,  8,  0; 16
		dc.b   0,  0,$D0, $B,  0,  0,  0,  0,$FF,$E8,$D0, $B,  8,  0,  8,  0; 32
		dc.b   0,  0,$F0, $B,  0,  0,  0,  0,$FF,$E8,$F0, $B,  8,  0,  8,  0; 48
		dc.b   0,  0,$10, $B,  0,  0,  0,  0,$FF,$E8,$10, $B,  8,  0,  8,  0; 64
		dc.b   0,  0,$30, $B,  0,  0,  0,  0,$FF,$E8,$30, $B,  8,  0,  8,  0; 80
		dc.b   0,  0,$50, $B,  0,  0,  0,  0,$FF,$E8,$50, $B,  8,  0,  8,  0; 96
		dc.b   0,  0,$70, $B,  0,  0,  0,  0,$FF,$E8,$70, $B,  8,  0,  8,  0; 112
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Wall turret from WFZ
; ----------------------------------------------------------------------------

Sprite_3B968:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3B976(pc,d0.w),d1
		jmp	off_3B976(pc,d1.w)
; ===========================================================================
off_3B976:	dc.w loc_3B97C-off_3B976; 0 
		dc.w loc_3B980-off_3B976; 1
		dc.w loc_3B9AA-off_3B976; 2
; ===========================================================================

loc_3B97C:				
		bra.w	loc_365F4
; ===========================================================================

loc_3B980:				
		tst.b	1(a0)
		bpl.s	loc_3B998
		bsr.w	loc_366D6
		tst.w	d1
		beq.s	loc_3B998
		addi.w	#$60,d2	; '`'
		cmpi.w	#$C0,d2	
		bcs.s	loc_3B99C

loc_3B998:				
		bra.w	loc_3EA54
; ===========================================================================

loc_3B99C:				
		addq.b	#2,$24(a0)
		move.w	#2,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3B9AA:				
		bsr.w	loc_366D6
		moveq	#0,d6
		addi.w	#$20,d2	; ' '
		cmpi.w	#$40,d2	; '@'
		bcs.s	loc_3B9C0
		move.w	d0,d6
		lsr.w	#1,d6
		addq.w	#1,d6

loc_3B9C0:				
		move.b	d6,$1A(a0)
		subq.w	#1,$2A(a0)
		bne.s	loc_3B9D4
		move.w	#$60,$2A(a0) ; '`'
		bsr.w	loc_3B9D8

loc_3B9D4:				
		bra.w	loc_3EA54
; ===========================================================================

loc_3B9D8:				
		bsr.w	loc_3EA66
		bne.s	locret_3BA28
		_move.b	#-$68,0(a1)
		move.b	#3,$1A(a1)
		move.b	#-$72,$28(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		lea	(loc_37756)(pc),a2
		move.l	a2,$2A(a1)
		moveq	#0,d0
		move.b	$1A(a0),d0
		lsl.w	#2,d0
		lea	byte_3BA2A(pc,d0.w),a2
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,8(a1)
		move.b	(a2)+,d0
		ext.w	d0
		add.w	d0,$C(a1)
		move.b	(a2)+,$10(a1)
		move.b	(a2)+,$12(a1)

locret_3BA28:				
		rts	
; ===========================================================================
byte_3BA2A:	dc.b   0		; 0
		dc.b $18		; 1
		dc.b   0		; 2
		dc.b   1		; 3
		dc.b $EF		; 4
		dc.b $10		; 5
		dc.b $FF		; 6
		dc.b   1		; 7
		dc.b $11		; 8
		dc.b $10		; 9
		dc.b   1		; 10
		dc.b   1		; 11
off_3BA36:	dc.l Map_3BA46	
		dc.w $3AB
		dc.w $404
		dc.w $1000
off_3BA40:	dc.w byte_3BA42-off_3BA40 
byte_3BA42:	dc.b   2,  3,  4,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BA46:				
		dc.w word_3BA50-Map_3BA46; 0
		dc.w word_3BA72-Map_3BA46; 1
		dc.w word_3BA8C-Map_3BA46; 2
		dc.w word_3BAA6-Map_3BA46; 3
		dc.w word_3BAB0-Map_3BA46; 4
word_3BA50:	dc.w 4			
		dc.w $F007,$E000,$E000,$FFF0; 0
		dc.w $F007,$E008,$E004,	   0; 4
		dc.w  $E00,$E010,$E008,$FFF8; 8
		dc.w  $E00,$E011,$E008,	   0; 12
word_3BA72:	dc.w 3			
		dc.w $F007,$E000,$E000,$FFF0; 0
		dc.w $F007,$E008,$E004,	   0; 4
		dc.w  $405,$E012,$E009,$FFEB; 8
word_3BA8C:	dc.w 3			
		dc.w $F007,$E000,$E000,$FFF0; 0
		dc.w $F007,$E008,$E004,	   0; 4
		dc.w  $405,$E812,$E809,	   5; 8
word_3BAA6:	dc.w 1			
		dc.w $FC00,$8016,$800B,$FFFC; 0
word_3BAB0:	dc.w 1			
		dc.w $FC00,$8017,$800B,$FFFC; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BABA:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BAC8(pc,d0.w),d1
		jmp	off_3BAC8(pc,d1.w)
; ===========================================================================
off_3BAC8:	dc.w loc_3BACE-off_3BAC8; 0 
		dc.w loc_3BAD2-off_3BAC8; 1
		dc.w loc_3BAF0-off_3BAC8; 2
; ===========================================================================

loc_3BACE:				
		bra.w	loc_365F4
; ===========================================================================

loc_3BAD2:				
		tst.b	1(a0)
		bmi.s	loc_3BADC
		bra.w	loc_3BAF8
; ===========================================================================

loc_3BADC:				
		addq.b	#2,$24(a0)
		move.w	#-$1000,$10(a0)
		moveq	#-$11,d0
		bsr.w	loc_3EA60
		bra.w	loc_3BAF8
; ===========================================================================

loc_3BAF0:				
		bsr.w	loc_3EAC0
		bra.w	*+4

loc_3BAF8:				
		move.w	8(a0),d0
		move.w	(v_camera_x_pos).w,d1
		subi.w	#$40,d1	; '@'
		cmp.w	d1,d0
		blt.w	loc_3EA48
		bra.w	loc_3EA42
; ===========================================================================
off_3BB0E:	dc.l Map_3BB18	; 0 
		dc.w $C3C3
		dc.w $401
		dc.w $6000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BB18:				
		dc.w word_3BB1A-Map_3BB18
word_3BB1A:	dc.w 6			
		dc.w $F801,    0,    0,$FFB8; 0
		dc.w $F80D,    2,    1,$FFC0; 4
		dc.w $F80D,    2,    1,$FFE0; 8
		dc.w $F80D,    2,    1,	   0; 12
		dc.w $F80D,    2,    1,	 $20; 16
		dc.w $F801, $800, $800,	 $40; 20
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BB4C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BB5A(pc,d0.w),d1
		jmp	off_3BB5A(pc,d1.w)
; ===========================================================================
off_3BB5A:	dc.w loc_3BB5E-off_3BB5A; 0 
		dc.w loc_3BB62-off_3BB5A; 1
; ===========================================================================

loc_3BB5E:				
		bra.w	loc_365F4
; ===========================================================================

loc_3BB62:				
		bra.w	loc_3EA54
; ===========================================================================
off_3BB66:	dc.l Map_3BB70	
		dc.w $C3EA
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BB70:				
		dc.w word_3BB72-Map_3BB70
word_3BB72:	dc.w 1			
		dc.w $F00F,    0,    0,$FFF0; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BB7C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BB8A(pc,d0.w),d1
		jmp	off_3BB8A(pc,d1.w)
; ===========================================================================
off_3BB8A:	dc.w loc_3BB8E-off_3BB8A; 0 
		dc.w loc_3BB92-off_3BB8A; 1
; ===========================================================================

loc_3BB8E:				
		bra.w	loc_365F4
; ===========================================================================

loc_3BB92:				
		bra.w	loc_3EA54
; ===========================================================================
off_3BB96:	dc.l Map_3BBA0	
		dc.w $23FA
		dc.w $404
		dc.w $C09
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BBA0:				
		dc.w word_3BBA2-Map_3BBA0
word_3BBA2:	dc.w 3			
		dc.w $C005,    0,    0,$FFF4; 0
		dc.w $D003,    4,    2,$FFFC; 4
		dc.w $F00B,    8,    4,$FFF4; 8
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BBBC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BBCA(pc,d0.w),d1
		jmp	off_3BBCA(pc,d1.w)
; ===========================================================================
off_3BBCA:	dc.w loc_3BBCE-off_3BBCA; 0 
		dc.w loc_3BBDA-off_3BBCA; 1
; ===========================================================================

loc_3BBCE:				
		bsr.w	loc_365F4
		move.w	8(a0),$2C(a0)
		rts	
; ===========================================================================

loc_3BBDA:				
		move.w	$2C(a0),d0
		move.w	(v_camera_x_pos_offset).w,d1
		cmpi.w	#$380,d1
		bcc.w	loc_3EA48
		add.w	d1,d0
		move.w	d0,8(a0)
		bchg	#0,$2A(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3BBFE:	dc.l Map_3BC08	
		dc.w $4465
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BC08:				
		dc.w word_3BC0A-Map_3BC08
word_3BC0A:	dc.w 2			
		dc.w $F00D,    0,    0,$FFF0; 0
		dc.w	$D,$1000,$1000,$FFF0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BC1C:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BC2A(pc,d0.w),d1
		jmp	off_3BC2A(pc,d1.w)
; ===========================================================================
off_3BC2A:	dc.w loc_3BC30-off_3BC2A; 0 
		dc.w loc_3BC3C-off_3BC2A; 1
		dc.w loc_3BC50-off_3BC2A; 2
; ===========================================================================

loc_3BC30:				
		addq.b	#2,$24(a0)
		move.w	#1,$2A(a0)
		rts	
; ===========================================================================

loc_3BC3C:				
		subq.w	#1,$2A(a0)
		bne.s	loc_3BC4C
		move.w	#$40,$2A(a0) ; '@'
		bsr.w	loc_3BCF8

loc_3BC4C:				
		bra.w	loc_3EA96
; ===========================================================================

loc_3BC50:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3BC62(pc,d0.w),d1
		jsr	off_3BC62(pc,d1.w)
		bra.w	loc_3EA54
; ===========================================================================
off_3BC62:	dc.w loc_3BC6C-off_3BC62; 0 
		dc.w loc_3BCAC-off_3BC62; 1
		dc.w loc_3BCB6-off_3BC62; 2
		dc.w loc_3BCCC-off_3BC62; 3
		dc.w loc_3BCD6-off_3BC62; 4
; ===========================================================================

loc_3BC6C:				
		bsr.w	loc_365F4
		move.b	#2,$1A(a0)
		subq.b	#2,$24(a0)
		addq.b	#2,$25(a0)
		move.w	#$C7,$2A(a0)
		btst	#0,1(a0)
		beq.s	loc_3BC92
		move.w	#$1C7,$2A(a0)

loc_3BC92:				
		moveq	#0,d0
		move.b	$28(a0),d0
		subi.b	#$7E,d0	; '~'
		move.b	d0,$28(a0)
		move.w	word_3BCA8(pc,d0.w),$12(a0)
		rts	
; ===========================================================================
word_3BCA8:	dc.w $FF00		; 0
		dc.w  $100		; 1
; ===========================================================================

loc_3BCAC:				
		lea	(off_3BD2E).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_3BCB6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3BCC0
		bra.w	loc_3BCDE
; ===========================================================================

loc_3BCC0:				
		addq.b	#2,$25(a0)
		move.b	#1,$1C(a0)
		rts	
; ===========================================================================

loc_3BCCC:				
		lea	(off_3BD2E).l,a1
		bra.w	loc_3EA6C
; ===========================================================================

loc_3BCD6:				
		bsr.w	loc_3B7BC
		bra.w	loc_3EA48
; ===========================================================================

loc_3BCDE:				
		move.w	8(a0),-(sp)
		bsr.w	loc_3EAC0
		move.w	#$23,d1	; '#'
		move.w	#4,d2
		move.w	#5,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAAE
; ===========================================================================

loc_3BCF8:				
		bsr.w	loc_3EA66
		bne.s	locret_3BD22
		_move.b	#-$43,0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.b	#4,$24(a1)
		move.b	$28(a0),$28(a1)
		move.b	1(a0),1(a1)

locret_3BD22:				
		rts	
; ===========================================================================
off_3BD24:	dc.l Map_3BD3E	
		dc.w $E40E
		dc.w $404
		dc.w $1800
off_3BD2E:	dc.w byte_3BD32-off_3BD2E; 0 
		dc.w byte_3BD38-off_3BD2E; 1
byte_3BD32:	dc.b   3,  2,  1,  0,$FA,  0; 0	
byte_3BD38:	dc.b   1,  0,  1,  2,$FA,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BD3E:				
		dc.w word_3BD44-Map_3BD3E; 0
		dc.w word_3BD56-Map_3BD3E; 1
		dc.w word_3BD68-Map_3BD3E; 2
word_3BD44:	dc.w 2			
		dc.w $FC08,    0,    0,$FFE8; 0
		dc.w $FC08,    3,    1,	   0; 4
word_3BD56:	dc.w 2			
		dc.w $FC08,    6,    3,$FFE8; 0
		dc.w $FC08, $806, $803,	   0; 4
word_3BD68:	dc.w 2			
		dc.w $FC08,    9,    4,$FFE8; 0
		dc.w $FC08, $809, $804,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Platform that	pops in	and out	from WFZ
; ----------------------------------------------------------------------------

Sprite_3BD7A:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BD88(pc,d0.w),d1
		jmp	off_3BD88(pc,d1.w)
; ===========================================================================
off_3BD88:	dc.w loc_3BD94-off_3BD88; 0 
		dc.w loc_3BDA2-off_3BD88; 1
		dc.w loc_3BDC6-off_3BD88; 2
		dc.w loc_3BDD4-off_3BD88; 3
		dc.w loc_3BDC6-off_3BD88; 4
		dc.w loc_3BDF4-off_3BD88; 5
; ===========================================================================

loc_3BD94:				
		moveq	#0,d0
		move.b	#-$7E,d0
		bsr.w	loc_365FA
		bra.w	loc_3B77E
; ===========================================================================

loc_3BDA2:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#-$10,d0
		cmp.b	$28(a0),d0
		beq.s	loc_3BDB4
		bra.w	loc_3EA54
; ===========================================================================

loc_3BDB4:				
		addq.b	#2,$24(a0)
		clr.b	$1C(a0)
		move.w	#$A0,$2A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3BDC6:				
		lea	(off_3BE36).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_3BDD4:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3BDE2
		bsr.w	loc_3BE04
		bra.w	loc_3EA54
; ===========================================================================

loc_3BDE2:				
		addq.b	#2,$24(a0)
		move.b	#1,$1C(a0)
		bsr.w	loc_3B7BC
		bra.w	loc_3EA54
; ===========================================================================

loc_3BDF4:				
		move.b	#2,$24(a0)
		move.w	#$40,$2A(a0) ; '@'
		bra.w	loc_3EA54
; ===========================================================================

loc_3BE04:				
		move.b	$1A(a0),d0
		cmpi.b	#3,d0
		beq.s	loc_3BE16
		cmpi.b	#4,d0
		bne.w	loc_3B7BC

loc_3BE16:				
		move.w	8(a0),-(sp)
		move.w	#$23,d1	; '#'
		move.w	#$18,d2
		move.w	#$19,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAAE
; ===========================================================================
off_3BE2C:	dc.l Map_3BE46	
		dc.w $E41A
		dc.w $404
		dc.w $1800
off_3BE36:	dc.w byte_3BE3A-off_3BE36; 0 
		dc.w byte_3BE40-off_3BE36; 1
byte_3BE3A:	dc.b   5,  0,  1,  2,  3,$FC; 0	
byte_3BE40:	dc.b   5,  3,  2,  1,  0,$FC; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3BE46:				
		dc.w word_3BE50-Map_3BE46; 0
		dc.w word_3BE62-Map_3BE46; 1
		dc.w word_3BE74-Map_3BE46; 2
		dc.w word_3BE86-Map_3BE46; 3
		dc.w word_3BE98-Map_3BE46; 4
word_3BE50:	dc.w 2			
		dc.w $E809,    0,    0,$FFE8; 0
		dc.w $E809,    6,    3,	   0; 4
word_3BE62:	dc.w 2			
		dc.w $E809,   $C,    6,$FFE8; 0
		dc.w $E809,  $12,    9,	   0; 4
word_3BE74:	dc.w 2			
		dc.w $E809,  $18,   $C,$FFE8; 0
		dc.w $E809, $818, $80C,	   0; 4
word_3BE86:	dc.w 2			
		dc.w $E80E,  $1E,   $F,$FFE0; 0
		dc.w $E80E, $81E, $80F,	   0; 4
word_3BE98:	dc.w 2			
		dc.w $E80E,  $2A,  $15,$FFE0; 0
		dc.w $E80E, $82A, $815,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BEAA:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BEB8(pc,d0.w),d1
		jmp	off_3BEB8(pc,d1.w)
; ===========================================================================
off_3BEB8:	dc.w loc_3BEBC-off_3BEB8; 0 
		dc.w loc_3BEC0-off_3BEB8; 1
; ===========================================================================

loc_3BEBC:				
		bra.w	loc_365F4
; ===========================================================================

loc_3BEC0:				
		lea	(off_3BED8).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================
off_3BECE:	dc.l Map_3BEE0	
		dc.w $E450
		dc.w $404
		dc.w $404
off_3BED8:	dc.w byte_3BEDA-off_3BED8 
byte_3BEDA:	dc.b   1,  0,  1,  2,$FF,  0; 0	
Map_3BEE0:				
		dc.w word_3BEE6-Map_3BEE0; 0
		dc.w word_3BEF0-Map_3BEE0; 1
		dc.w word_3BEFA-Map_3BEE0; 2
word_3BEE6:	dc.w 1			
		dc.w $F003,    0,    0,$FFFC; 0
word_3BEF0:	dc.w 1			
		dc.w $F003,    4,    2,$FFFC; 0
word_3BEFA:	dc.w 1			
		dc.w $F003,    8,    4,$FFFC; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3BF04:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3BF12(pc,d0.w),d1
		jmp	off_3BF12(pc,d1.w)
; ===========================================================================
off_3BF12:	dc.w loc_3BF16-off_3BF12; 0 
		dc.w loc_3BF3E-off_3BF12; 1
; ===========================================================================

loc_3BF16:				
		move.w	#$86,d0	
		bsr.w	loc_365FA
		moveq	#0,d0
		move.b	$28(a0),d0
		lsl.w	#4,d0
		btst	#0,$22(a0)
		bne.s	loc_3BF30
		neg.w	d0

loc_3BF30:				
		move.w	8(a0),d1
		move.w	d1,$34(a0)
		add.w	d1,d0
		move.w	d0,$32(a0)

loc_3BF3E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3BF60(pc,d0.w),d1
		jsr	off_3BF60(pc,d1.w)
		move.w	#$10,d1
		move.w	#$11,d3
		move.w	8(a0),d4
		bsr.w	loc_3EAAE
		bra.w	loc_3EA54
; ===========================================================================
off_3BF60:	dc.w loc_3BF66-off_3BF60; 0 
		dc.w loc_3BFD8-off_3BF60; 1
		dc.w loc_3C062-off_3BF60; 2
; ===========================================================================

loc_3BF66:				
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_3BFB2
		addq.b	#2,$25(a0)
		move.w	#$C00,$10(a0)
		move.w	#$80,$30(a0)
		btst	#0,$22(a0)
		bne.s	loc_3BF90
		neg.w	$10(a0)
		neg.w	$30(a0)

loc_3BF90:				
		bsr.w	loc_3EAC0
		move.b	$22(a0),d0
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_3BFA6
		lea	($FFFFB000).w,a1
		bsr.s	loc_3BFB4

loc_3BFA6:				
		andi.b	#$10,d0
		beq.s	locret_3BFB2
		lea	($FFFFB040).w,a1
		bsr.s	loc_3BFB4

locret_3BFB2:				
		rts	
; ===========================================================================

loc_3BFB4:				
		clr.w	$14(a1)
		clr.w	$10(a1)
		move.w	8(a0),8(a1)
		bclr	#0,$22(a1)
		btst	#0,$22(a0)
		bne.s	locret_3BFD6
		bset	#0,$22(a1)

locret_3BFD6:				
		rts	
; ===========================================================================

loc_3BFD8:				
		move.w	$30(a0),d0
		add.w	d0,$10(a0)
		bsr.w	loc_3EAC0
		move.w	$32(a0),d0
		sub.w	8(a0),d0
		btst	#0,$22(a0)
		beq.s	loc_3BFF6
		neg.w	d0

loc_3BFF6:				
		tst.w	d0
		bpl.s	loc_3C034
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	locret_3C01E

loc_3C004:
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_3C012
		lea	($FFFFB000).w,a1
		bsr.s	loc_3BFB4

loc_3C012:				
		andi.b	#$10,d0
		beq.s	locret_3C01E
		lea	($FFFFB040).w,a1
		bsr.s	loc_3BFB4

locret_3C01E:				
		rts	
; ===========================================================================

loc_3C020:				
		move.w	$10(a0),$10(a1)
		move.w	#-$400,$12(a1)
		bset	#1,$22(a1)
		rts	
; ===========================================================================

loc_3C034:				
		addq.b	#2,$25(a0)
		move.w	$32(a0),8(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3C062
		move.b	d0,d1
		andi.b	#8,d1
		beq.s	loc_3C056
		lea	($FFFFB000).w,a1
		bsr.s	loc_3C020

loc_3C056:				
		andi.b	#$10,d0
		beq.s	loc_3C062
		lea	($FFFFB040).w,a1
		bsr.s	loc_3C020

loc_3C062:				
					; DATA XREF: ...
		move.w	8(a0),d0
		moveq	#4,d1
		tst.w	$30(a0)
		spl	d2
		bmi.s	loc_3C072
		neg.w	d1

loc_3C072:				
		add.w	d1,d0
		cmp.w	$34(a0),d0
		bcc.s	loc_3C07C
		not.b	d2

loc_3C07C:				
		tst.b	d2
		bne.s	loc_3C088
		clr.b	$25(a0)
		move.w	$34(a0),d0

loc_3C088:				
		move.w	d0,8(a0)
		rts	
; ===========================================================================
off_3C08E:	dc.l Map_3C098	
		dc.w $245C
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3C098:				
		dc.w word_3C09A-Map_3C098
word_3C09A:	dc.w 2			
		dc.w $E908,    0,    0,$FFF0; 0
		dc.w $E101,    3,    1,	   8; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Sprite that sonic hangs onto on the back of Robotnic's getaway ship from WFZ
; ----------------------------------------------------------------------------

Sprite_3C0AC:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3C0BA(pc,d0.w),d1
		jmp	off_3C0BA(pc,d1.w)
; ===========================================================================
off_3C0BA:	dc.w loc_3C0C0-off_3C0BA; 0 
		dc.w loc_3C0D6-off_3C0BA; 1
		dc.w loc_3C1AA-off_3C0BA; 2
; ===========================================================================

loc_3C0C0:				
		move.w	#$88,d0	
		bsr.w	loc_365FA
		moveq	#0,d0
		move.b	$28(a0),d0
		mulu.w	#$3C,d0	; '<'
		move.w	d0,$30(a0)

loc_3C0D6:				
		tst.b	$32(a0)
		beq.s	loc_3C140
		tst.w	$30(a0)
		beq.s	loc_3C0E8
		subq.w	#1,$30(a0)
		beq.s	loc_3C12E

loc_3C0E8:				
		lea	($FFFFB000).w,a1
		move.w	$C(a0),d0
		subi.w	#$18,d0
		btst	#0,(v_joypad_hold_actual).w
		beq.s	loc_3C10A
		subq.w	#1,$C(a1)
		cmp.w	$C(a1),d0
		bcs.s	loc_3C10A
		move.w	d0,$C(a1)

loc_3C10A:				
		addi.w	#$30,d0	; '0'
		btst	#1,(v_joypad_hold_actual).w
		beq.s	loc_3C124
		addq.w	#1,$C(a1)
		cmp.w	$C(a1),d0
		bcc.s	loc_3C124
		move.w	d0,$C(a1)

loc_3C124:				
		move.b	(v_joypad_press).w,d0
		andi.w	#$70,d0	; 'p'
		beq.s	loc_3C196

loc_3C12E:				
		clr.b	$20(a0)
		clr.b	($FFFFB02A).w
		clr.b	(f_wind_tunnel_disable).w
		clr.b	$32(a0)
		bra.s	loc_3C19A
; ===========================================================================

loc_3C140:				
		tst.b	$21(a0)
		beq.s	loc_3C196
		lea	($FFFFB000).w,a1
		move.w	8(a0),d0
		subi.w	#$14,d0
		cmp.w	8(a1),d0
		bcc.s	loc_3C196
		clr.b	$21(a0)
		cmpi.b	#4,$24(a1)
		bcc.s	loc_3C196
		clr.w	$10(a1)
		clr.w	$12(a1)
		move.w	8(a0),d0
		subi.w	#$14,d0
		move.w	d0,8(a1)
		bset	#0,$22(a1)
		move.b	#$11,$1C(a1)
		move.b	#1,($FFFFB02A).w
		move.b	#1,(f_wind_tunnel_disable).w
		move.b	#1,$32(a0)

loc_3C196:				
		bra.w	loc_3EA54
; ===========================================================================

loc_3C19A:				
		lea	(byte_3C1E4).l,a4
		lea	(byte_3C1E0).l,a2
		bsr.w	loc_3C1F4

loc_3C1AA:				
		tst.b	$3F(a0)
		beq.s	loc_3C1B6
		subq.b	#1,$3F(a0)
		bra.s	loc_3C1CA
; ===========================================================================

loc_3C1B6:				
		bsr.w	loc_3EAC0
		addi.w	#8,$12(a0)
		lea	(off_3C1D6).l,a1
		bsr.w	loc_3EA6C

loc_3C1CA:				
		tst.b	1(a0)
		bpl.w	loc_3EA48
		bra.w	loc_3EA42
; ===========================================================================
off_3C1D6:	dc.w byte_3C1D8-off_3C1D6 
byte_3C1D8:	dc.b   3,  2,  3,  4,  5,  1,$FF,  0; 0	
byte_3C1E0:	dc.b   0		; 0 
		dc.b   4		; 1
		dc.b $18		; 2
		dc.b $20		; 3
byte_3C1E4:	dc.b $FF,$F0		; 0 
		dc.b $FF,$F0		; 2
		dc.b $FF,$F0		; 4
		dc.b   0,$10		; 6
		dc.b $FF,$D0		; 8
		dc.b $FF,$F0		; 10
		dc.b $FF,$D0		; 12
		dc.b   0,$10		; 14
; ===========================================================================

loc_3C1F4:				
		move.w	8(a0),d2
		move.w	$C(a0),d3
		move.b	$18(a0),d4
		subq.b	#1,d4
		moveq	#3,d1
		movea.l	a0,a1
		bra.s	loc_3C20E
; ===========================================================================

loc_3C208:				
		bsr.w	loc_3EA66
		bne.s	loc_3C26C

loc_3C20E:				
		move.b	#4,$24(a1)
		_move.b	0(a0),0(a1)
		move.l	4(a0),4(a1)
		move.w	2(a0),2(a1)
		move.b	#-$7C,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	(a4)+,d0
		add.w	d2,d0
		move.w	d0,8(a1)
		move.w	(a4)+,d0
		add.w	d3,d0
		move.w	d0,$C(a1)
		move.b	d4,$18(a1)
		move.b	#$10,$19(a1)
		move.b	#1,$1A(a1)
		move.w	#-$400,$10(a1)
		move.w	#0,$12(a1)
		move.b	(a2)+,$3F(a1)
		dbf	d1,loc_3C208

loc_3C26C:				
		move.w	#$CB,d0	
		jmp	(PlaySound).l
; ===========================================================================
off_3C276:	dc.l Map_3C280	
		dc.w $E48C
		dc.w $404
		dc.w $40E1
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3C280:				
		dc.w word_3C28C-Map_3C280; 0
		dc.w word_3C2CE-Map_3C280; 1
		dc.w word_3C2E0-Map_3C280; 2
		dc.w word_3C2F2-Map_3C280; 3
		dc.w word_3C304-Map_3C280; 4
		dc.w word_3C316-Map_3C280; 5
word_3C28C:	dc.w 8			
		dc.w $E007,    0,    0,$FFE0; 0
		dc.w $E007, $800, $800,$FFF0; 4
		dc.w	 7,    0,    0,$FFE0; 8
		dc.w	 7, $800, $800,$FFF0; 12
		dc.w $E007,    0,    0,$FFC0; 16
		dc.w $E007, $800, $800,$FFD0; 20
		dc.w	 7,    0,    0,$FFC0; 24
		dc.w	 7, $800, $800,$FFD0; 28
word_3C2CE:	dc.w 2			
		dc.w $F007,    0,    0,$FFF0; 0
		dc.w $F007, $800, $800,	   0; 4
word_3C2E0:	dc.w 2			
		dc.w $F005,    8,    4,$FFF8; 0
		dc.w	 5,$1008,$1004,$FFF8; 4
word_3C2F2:	dc.w 2			
		dc.w $F001,   $C,    6,$FFFC; 0
		dc.w	 1,$100C,$1006,$FFFC; 4
word_3C304:	dc.w 2			
		dc.w $F001, $80C, $806,$FFFC; 0
		dc.w	 1,$180C,$1806,$FFFC; 4
word_3C316:	dc.w 2			
		dc.w $F005, $808, $804,$FFF8; 0
		dc.w	 5,$1808,$1804,$FFF8; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Rivet	thing you bust to get into ship	at the end of WFZ
; ----------------------------------------------------------------------------

Sprite_3C328:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3C336(pc,d0.w),d1
		jmp	off_3C336(pc,d1.w)
; ===========================================================================
off_3C336:	dc.w loc_3C33A-off_3C336; 0 
		dc.w loc_3C33E-off_3C336; 1
; ===========================================================================

loc_3C33A:				
		bra.w	loc_365F4
; ===========================================================================

loc_3C33E:				
		move.b	($FFFFB01C).w,$30(a0)
		move.w	8(a0),-(sp)
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#9,d3
		move.w	(sp)+,d4
		bsr.w	loc_3EAB4
		btst	#3,$22(a0)
		bne.s	loc_3C366
		bra.w	loc_3EA54
; ===========================================================================

loc_3C366:				
		cmpi.b	#2,$30(a0)
		bne.s	loc_3C3B4
		move.w	#$2880,(v_boundary_left_next).w
		bclr	#3,$22(a0)
		_move.b	#$27,0(a0) ; '''
		move.b	#2,$24(a0)
		bset	#1,($FFFFB022).w
		bclr	#3,($FFFFB022).w
		lea	($FFFF8850).w,a1
		move.l	#-$758F8E8E,(a1)+
		move.w	#$7374,(a1)+
		lea	($FFFF8950).w,a1
		move.l	#$6E787978,(a1)+
		move.w	#$787A,(a1)+
		move.b	#1,(f_screen_redraw).w

loc_3C3B4:				
		bra.w	loc_3EA54
; ===========================================================================
off_3C3B8:	dc.l Map_3C3C2	
		dc.w $A461
		dc.w $404
		dc.w $1000
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3C3C2:				
		dc.w word_3C3C4-Map_3C3C2
word_3C3C4:	dc.w 2			
		dc.w $F805,    0,    0,$FFF0; 0
		dc.w $F805, $800, $800,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3C3D6:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3C3E4(pc,d0.w),d1
		jmp	off_3C3E4(pc,d1.w)
; ===========================================================================
off_3C3E4:	dc.w loc_3C3E8-off_3C3E4; 0 
		dc.w loc_3C416-off_3C3E4; 1
; ===========================================================================

loc_3C3E8:				
		bsr.w	loc_365F4
		move.b	#7,$1E(a0)
		bsr.w	loc_3EA78
		move.w	(v_random).w,d0
		andi.w	#$1C,d0
		sub.w	d0,8(a0)
		addi.w	#$10,$C(a0)
		move.w	#-$100,$12(a0)
		move.w	#-$100,$10(a0)
		rts	
; ===========================================================================

loc_3C416:				
		bsr.w	loc_3EAC0
		subq.b	#1,$1E(a0)
		bpl.s	loc_3C434
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		beq.w	loc_3EA48

loc_3C434:				
		bra.w	loc_3EA42
; ===========================================================================
off_3C438:	dc.l Map_21120	
		dc.w $5A4
		dc.w $405
		dc.w $C00
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; WFZ boss
; ----------------------------------------------------------------------------

Sprite_3C442:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3C450(pc,d0.w),d1
		jmp	off_3C450(pc,d1.w)
; ===========================================================================
off_3C450:	dc.w loc_3C464-off_3C450; 0 
		dc.w loc_3C476-off_3C450; 1
		dc.w loc_3C748-off_3C450; 2
		dc.w loc_3C7EE-off_3C450; 3
		dc.w loc_3C8C8-off_3C450; 4
		dc.w loc_3C9AA-off_3C450; 5
		dc.w loc_3C9EA-off_3C450; 6
		dc.w loc_3CA3C-off_3C450; 7
		dc.w loc_3CB3E-off_3C450; 8
		dc.w loc_3CBBE-off_3C450; 9
; ===========================================================================

loc_3C464:				
		bsr.w	loc_365F4
		move.b	$28(a0),d0
		subi.b	#-$70,d0
		move.b	d0,$24(a0)
		rts	
; ===========================================================================

loc_3C476:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C488(pc,d0.w),d1
		jsr	off_3C488(pc,d1.w)
		bra.w	loc_3CBEC
; ===========================================================================
off_3C488:	dc.w loc_3C4A8-off_3C488; 0 
		dc.w loc_3C4DC-off_3C488; 1
		dc.w loc_3C552-off_3C488; 2
		dc.w loc_3C570-off_3C488; 3
		dc.w loc_3C58A-off_3C488; 4
		dc.w loc_3C5B0-off_3C488; 5
		dc.w loc_3C5E8-off_3C488; 6
		dc.w loc_3C5F6-off_3C488; 7
		dc.w loc_3C60E-off_3C488; 8
		dc.w loc_3C640-off_3C488; 9
		dc.w loc_3C65C-off_3C488; 10
		dc.w loc_3C68C-off_3C488; 11
		dc.w loc_3C6E4-off_3C488; 12
		dc.w loc_3C5E8-off_3C488; 13
		dc.w loc_3C704-off_3C488; 14
		dc.w loc_3C712-off_3C488; 15
; ===========================================================================

loc_3C4A8:				
		addq.b	#2,$25(a0)
		move.b	#0,$20(a0)
		move.b	#8,$21(a0)
		move.w	#$442,d0
		move.w	d0,(v_boundary_bottom).w
		move.w	d0,(v_boundary_bottom_next).w
		move.w	8(a0),d0
		subi.w	#$60,d0	; '`'
		move.w	d0,$34(a0)
		addi.w	#$C0,d0	
		move.w	d0,$36(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C4DC:				
		bsr.w	loc_366D6
		addi.w	#$20,d2	; ' '
		cmpi.w	#$40,d2	; '@'
		bcs.s	loc_3C4EE
		bra.w	loc_3EA42
; ===========================================================================

loc_3C4EE:				
		addq.b	#2,$25(a0)
		move.w	#$40,$12(a0) ; '@'
		lea	(byte_3CC60).l,a2
		bsr.w	loc_367D0
		subi.w	#$88,8(a1)
		addi.w	#$60,$C(a1) ; '`'
		lea	(byte_3CC60).l,a2
		bsr.w	loc_367D0
		addi.w	#$88,8(a1)
		addi.w	#$60,$C(a1) ; '`'
		lea	(byte_3CC6C).l,a2
		bsr.w	loc_367D0
		lea	(byte_3CC70).l,a2
		bsr.w	loc_367D0
		lea	(byte_3CC78).l,a2
		bsr.w	loc_367D0
		move.w	#$5A,$2A(a0) ; 'Z'
		moveq	#-7,d0
		bsr.w	loc_3EA60
		bra.w	loc_3EA42
; ===========================================================================

loc_3C552:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C55C
		bra.w	loc_3EA42
; ===========================================================================

loc_3C55C:				
		addq.b	#2,$25(a0)
		move.w	#$60,$2A(a0) ; '`'
		moveq	#-$6D,d0
		bsr.w	loc_3EAA2
		bra.w	loc_3EA42
; ===========================================================================

loc_3C570:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C57E
		bsr.w	loc_3EAC0
		bra.w	loc_3EA42
; ===========================================================================

loc_3C57E:				
		addq.b	#2,$25(a0)
		clr.w	$12(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C58A:				
					
		addq.b	#2,$25(a0)
		bsr.w	loc_366D6
		move.w	#$100,d1
		tst.w	d0
		bne.s	loc_3C59C
		neg.w	d1

loc_3C59C:				
		move.w	d1,$10(a0)
		bset	#2,$22(a0)
		move.w	#$70,$2A(a0) ; 'p'
		bra.w	loc_3EA42
; ===========================================================================

loc_3C5B0:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C5DC
		move.w	8(a0),d0
		tst.w	$10(a0)
		bmi.s	loc_3C5CA
		cmp.w	$36(a0),d0
		bcc.s	loc_3C5D0
		bra.w	loc_3C5D4
; ===========================================================================

loc_3C5CA:				
		cmp.w	$34(a0),d0
		bcc.s	loc_3C5D4

loc_3C5D0:				
		neg.w	$10(a0)

loc_3C5D4:				
		bsr.w	loc_3EAC0
		bra.w	loc_3EA42
; ===========================================================================

loc_3C5DC:				
		addq.b	#2,$25(a0)
		clr.b	$1C(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C5E8:				
		lea	(off_3CCB2).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3C5F6:				
		addq.b	#2,$25(a0)
		move.w	#$E,$2A(a0)
		movea.w	$3C(a0),a1
		move.b	#4,$25(a1)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C60E:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C620
		movea.w	$3C(a0),a1
		addq.w	#1,$C(a1)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C620:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0) ; '@'
		bset	#4,$22(a0)
		bset	#6,$22(a0)
		move.b	#6,$20(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C640:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C64A
		bra.w	loc_3EA42
; ===========================================================================

loc_3C64A:				
		addq.b	#2,$25(a0)
		lea	(byte_3CC74).l,a2
		bsr.w	loc_367D0
		bra.w	loc_3EA42
; ===========================================================================

loc_3C65C:				
		movea.w	$3E(a0),a1
		btst	#2,$22(a1)
		bne.s	loc_3C66C
		bra.w	loc_3EA42
; ===========================================================================

loc_3C66C:				
		addq.b	#2,$25(a0)
		move.w	#$80,$2A(a0)
		bsr.w	loc_366D6
		move.w	#$80,d1	
		tst.w	d0
		bne.s	loc_3C684
		neg.w	d1

loc_3C684:				
		move.w	d1,$10(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C68C:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3C6B8
		move.w	8(a0),d0
		tst.w	$10(a0)
		bmi.s	loc_3C6A6
		cmp.w	$36(a0),d0
		bcc.s	loc_3C6AC
		bra.w	loc_3C6B0
; ===========================================================================

loc_3C6A6:				
		cmp.w	$34(a0),d0
		bcc.s	loc_3C6B0

loc_3C6AC:				
		clr.w	$10(a0)

loc_3C6B0:				
		bsr.w	loc_3EAC0
		bra.w	loc_3EA42
; ===========================================================================

loc_3C6B8:				
		addq.b	#2,$25(a0)
		move.w	#$E,$2A(a0)
		bclr	#3,$22(a0)
		bclr	#4,$22(a0)
		bclr	#6,$22(a0)
		clr.b	$20(a0)
		movea.w	$3E(a0),a1
		bsr.w	loc_3EA5A
		bra.w	loc_3EA42
; ===========================================================================

loc_3C6E4:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C6F6
		movea.w	$3C(a0),a1
		subq.w	#1,$C(a1)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C6F6:				
		addq.b	#2,$25(a0)
		move.b	#1,$1C(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C704:				
		move.b	#8,$25(a0)
		bsr.w	loc_3C58A
		bra.w	loc_3EA42
; ===========================================================================

loc_3C712:				
		clr.b	$20(a0)
		st.b	$21(a0)
		bclr	#6,$22(a0)
		subq.w	#1,$30(a0)
		bmi.s	loc_3C72E
		bsr.w	loc_3EAA8
		bra.w	loc_3EA42
; ===========================================================================

loc_3C72E:				
		moveq	#-$71,d0
		bsr.w	loc_3EAA2
		move.w	#$720,d0
		move.w	d0,(v_boundary_bottom).w
		move.w	d0,(v_boundary_bottom_next).w
		bsr.w	loc_3EA48
		addq.w	#4,sp
		rts	
; ===========================================================================

loc_3C748:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C772(pc,d0.w),d1
		jsr	off_3C772(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		move.w	8(a0),-(sp)
		move.w	#$13,d1
		move.w	#$40,d2	; '@'
		move.w	#$80,d3	
		move.w	(sp)+,d4
		bra.w	loc_3EAB4
; ===========================================================================
off_3C772:	dc.w loc_3C778-off_3C772; 0 
		dc.w loc_3C786-off_3C772; 1
		dc.w loc_3C7AE-off_3C772; 2
; ===========================================================================

loc_3C778:				
		addq.b	#2,$25(a0)
		move.b	#$C,$1A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C786:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.s	loc_3C7A0
		bchg	#0,$2F(a0)
		bne.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================

loc_3C7A0:				
		addq.b	#2,$25(a0)
		move.b	#4,$30(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C7AE:				
		subq.b	#1,$1E(a0)
		bpl.w	locret_37A48
		move.b	$1E(a0),d0
		move.b	$1B(a0),d1
		addq.b	#2,d0
		bpl.s	loc_3C7E4
		move.b	d1,$1E(a0)
		subq.b	#1,$30(a0)
		bpl.s	loc_3C7E4
		move.b	#$10,$30(a0)
		addq.b	#1,d1
		cmpi.b	#5,d1
		bcc.w	loc_3EA48
		move.b	d1,$1B(a0)
		move.b	d1,$1E(a0)

loc_3C7E4:				
		bclr	#0,$2F(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C7EE:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C7FC(pc,d0.w),d1
		jmp	off_3C7FC(pc,d1.w)
; ===========================================================================
off_3C7FC:	dc.w loc_3C806-off_3C7FC; 0 
		dc.w loc_3C818-off_3C7FC; 1
		dc.w loc_3C83C-off_3C7FC; 2
		dc.w loc_3C85C-off_3C7FC; 3
		dc.w loc_3C8B4-off_3C7FC; 4
; ===========================================================================

loc_3C806:				
		addq.b	#2,$25(a0)
		move.b	#5,$1A(a0)
		addq.w	#8,$C(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C818:				
		movea.w	$2C(a0),a1
		btst	#2,$22(a1)
		bne.s	loc_3C828
		bra.w	loc_3EA42
; ===========================================================================

loc_3C828:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0) ; '@'
		move.w	#$40,$12(a0) ; '@'
		bra.w	loc_3EA42
; ===========================================================================

loc_3C83C:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3C84A
		bsr.w	loc_3EAC0
		bra.w	loc_3EA42
; ===========================================================================

loc_3C84A:				
		addq.b	#2,$25(a0)
		clr.w	$12(a0)
		move.w	#$10,$2A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C85C:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.s	loc_3C8A6
		subq.w	#1,$2A(a0)
		bne.s	loc_3C8A2
		move.w	#$80,$2A(a0)
		moveq	#0,d0
		move.b	$2E(a0),d0
		addq.b	#1,d0
		cmpi.b	#3,d0
		bcs.s	loc_3C884
		moveq	#0,d0

loc_3C884:				
		move.b	d0,$2E(a0)
		tst.b	$30(a0,d0.w)
		bne.s	loc_3C8A2
		st.b	$30(a0,d0.w)
		lea	(byte_3CC64).l,a2
		bsr.w	loc_367D0
		move.b	$2E(a0),$2E(a1)

loc_3C8A2:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3C8A6:				
		addq.b	#2,$25(a0)
		bset	#5,$22(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3C8B4:				
		movea.w	$2C(a0),a1
		cmpi.b	#-$3B,(a1)
		bne.w	loc_3EA48
		bsr.w	loc_3EAA8
		bra.w	loc_3EA42
; ===========================================================================

loc_3C8C8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C8EA(pc,d0.w),d1
		jsr	off_3C8EA(pc,d1.w)
		lea	(off_3CCB2).l,a1
		bsr.w	loc_3EA6C
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3C8EA:	dc.w loc_3C8F0-off_3C8EA; 0 
		dc.w loc_3C916-off_3C8EA; 1
		dc.w loc_3C93E-off_3C8EA; 2
; ===========================================================================

loc_3C8F0:				
		addq.b	#2,$25(a0)
		move.b	#3,$1C(a0)
		move.b	#7,$1A(a0)
		move.w	#$100,$12(a0)
		move.w	#$60,$2A(a0) ; '`'
		lea	(byte_3CC68).l,a2
		bra.w	loc_367D0
; ===========================================================================

loc_3C916:				
		bsr.w	loc_3C982
		subq.w	#1,$2A(a0)
		beq.s	loc_3C924
		bra.w	loc_3C968
; ===========================================================================

loc_3C924:				
		addq.b	#2,$25(a0)
		move.w	#$60,$2A(a0) ; '`'
		move.w	#-$100,$10(a0)
		move.w	$C(a0),$34(a0)
		bra.w	loc_3C968
; ===========================================================================

loc_3C93E:				
		bsr.w	loc_3C982
		subq.w	#1,$2A(a0)
		bne.s	loc_3C952
		move.w	#$C0,$2A(a0)
		neg.w	$10(a0)

loc_3C952:				
		moveq	#4,d0
		move.w	$C(a0),d1
		cmp.w	$34(a0),d1
		bcs.s	loc_3C960
		neg.w	d0

loc_3C960:				
		add.w	d0,$12(a0)
		bra.w	*+4

loc_3C968:				
		move.w	8(a0),-(sp)
		bsr.w	loc_3EAC0
		move.w	#$10,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAAE
; ===========================================================================

loc_3C982:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	loc_3C992
		rts	
; ===========================================================================

loc_3C992:				
		bsr.w	loc_3B7BC
		move.b	#$58,(a0) ; 'X'
		clr.b	$24(a0)
		movea.w	$3C(a0),a1
		bsr.w	loc_3EA5A
		addq.w	#4,sp
		rts	
; ===========================================================================

loc_3C9AA:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3C9B8(pc,d0.w),d1
		jmp	off_3C9B8(pc,d1.w)
; ===========================================================================
off_3C9B8:	dc.w loc_3C9BC-off_3C9B8; 0 
		dc.w loc_3C9C8-off_3C9B8; 1
; ===========================================================================

loc_3C9BC:				
		addq.b	#2,$25(a0)
		move.b	#-$68,$20(a0)
		rts	
; ===========================================================================

loc_3C9C8:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	loc_3EA48
		move.w	8(a1),8(a0)
		move.w	$C(a1),d0
		addi.w	#$C,d0
		move.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_3C9EA:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	loc_3EA48
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CA06(pc,d0.w),d1
		jmp	off_3CA06(pc,d1.w)
; ===========================================================================
off_3CA06:	dc.w loc_3CA0C-off_3CA06; 0 
		dc.w loc_3CA1A-off_3CA06; 1
		dc.w loc_3CA2E-off_3CA06; 2
; ===========================================================================

loc_3CA0C:				
		addq.b	#2,$25(a0)
		move.b	#4,$1A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CA1A:				
		movea.w	$2C(a0),a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CA2E:				
		movea.w	$2C(a0),a1
		move.w	8(a1),8(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CA3C:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.w	loc_3EA48
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CA66(pc,d0.w),d1
		jsr	off_3CA66(pc,d1.w)
		bchg	#0,$2F(a0)
		bne.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3CA66:	dc.w loc_3CA70-off_3CA66; 0 
		dc.w loc_3CA98-off_3CA66; 1
		dc.w loc_3CAD0-off_3CA66; 2
		dc.w loc_3CAE4-off_3CA66; 3
		dc.w loc_3CB32-off_3CA66; 4
; ===========================================================================

loc_3CA70:				
		addq.b	#2,$25(a0)
		move.b	#$D,$1A(a0)
		move.b	#4,$18(a0)
		move.b	#0,$20(a0)
		addi.w	#$10,$C(a0)
		move.b	#$C,$1B(a0)
		subq.w	#3,$C(a0)
		rts	
; ===========================================================================

loc_3CA98:				
		bset	#0,$2F(a0)
		subq.b	#1,$1E(a0)
		bpl.s	locret_3CAC2
		move.b	$1E(a0),d0
		addq.b	#2,d0
		bpl.s	loc_3CABC
		move.b	$1B(a0),d0
		subq.b	#1,d0
		beq.s	loc_3CAC4
		move.b	d0,$1B(a0)
		move.b	d0,$1E(a0)

loc_3CABC:				
		bclr	#0,$2F(a0)

locret_3CAC2:				
		rts	
; ===========================================================================

loc_3CAC4:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0) ; '@'
		rts	
; ===========================================================================

loc_3CAD0:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3CAD8
		rts	
; ===========================================================================

loc_3CAD8:				
		addq.b	#2,$25(a0)
		addi.w	#$10,$C(a0)
		rts	
; ===========================================================================

loc_3CAE4:				
		moveq	#0,d0
		move.b	$2E(a0),d0
		addq.b	#1,d0
		cmpi.b	#5,d0
		bcc.s	loc_3CB0A
		addi.w	#$10,$C(a0)
		move.b	d0,$2E(a0)
		move.b	byte_3CB26(pc,d0.w),$1A(a0)
		move.b	byte_3CB2C(pc,d0.w),$20(a0)
		rts	
; ===========================================================================

loc_3CB0A:				
		addq.b	#2,$25(a0)
		move.w	#$80,$2A(a0)
		bset	#2,$22(a0)
		movea.w	$2C(a0),a1
		bset	#3,$22(a1)
		rts	
; ===========================================================================
byte_3CB26:	dc.b  $E		; 0
		dc.b  $F		; 1
		dc.b $10		; 2
		dc.b $11		; 3
		dc.b $12		; 4
		dc.b   0		; 5
byte_3CB2C:	dc.b $86		; 0
		dc.b $AB		; 1
		dc.b $AC		; 2
		dc.b $AD		; 3
		dc.b $AE		; 4
		dc.b   0		; 5
; ===========================================================================

loc_3CB32:				
		movea.w	$2C(a0),a1
		move.w	8(a1),8(a0)
		rts	
; ===========================================================================

loc_3CB3E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CB4C(pc,d0.w),d1
		jmp	off_3CB4C(pc,d1.w)
; ===========================================================================
off_3CB4C:	dc.w loc_3CB52-off_3CB4C; 0 
		dc.w loc_3CB7C-off_3CB4C; 1
		dc.w loc_3CBA4-off_3CB4C; 2
; ===========================================================================

loc_3CB52:				
		addq.b	#2,$25(a0)
		move.b	#0,$1A(a0)
		move.b	#1,$1C(a0)
		move.w	#$2C60,8(a0)
		move.w	#$4E6,$C(a0)
		lea	(byte_3CC7C).l,a2
		bsr.w	loc_367D0
		bra.w	loc_3EA42
; ===========================================================================

loc_3CB7C:				
		movea.w	$2C(a0),a1
		btst	#5,$22(a1)
		bne.s	loc_3CB96
		lea	(off_3D0D8).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3CB96:				
		addq.b	#2,$25(a0)
		move.w	#$C0,$2A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CBA4:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3CBB2
		addq.w	#1,$C(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CBB2:				
		movea.w	$3E(a0),a1
		bsr.w	loc_3EA5A
		bra.w	loc_3EA48
; ===========================================================================

loc_3CBBE:				
		movea.w	$2C(a0),a1
		move.w	$C(a1),d0
		addi.w	#$26,d0	; '&'
		move.w	d0,$C(a0)
		bra.w	loc_3EA42
; ===========================================================================
		move.w	8(a0),-(sp)
		bsr.w	loc_3EAC0
		move.w	#$F,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	(sp)+,d4
		bra.w	loc_3EAAE
; ===========================================================================

loc_3CBEC:				
		tst.b	$21(a0)
		beq.s	loc_3CC3C
		tst.b	$20(a0)
		bne.s	locret_3CC3A
		tst.b	$30(a0)
		bne.s	loc_3CC16
		btst	#6,$22(a0)
		beq.s	locret_3CC3A
		move.b	#$20,$30(a0) ; ' '
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_3CC16:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_3CC24
		move.w	#$EEE,d0

loc_3CC24:				
		move.w	d0,(a1)
		subq.b	#1,$30(a0)
		bne.s	locret_3CC3A
		btst	#4,$22(a0)
		beq.s	locret_3CC3A
		move.b	#6,$20(a0)

locret_3CC3A:				
		rts	
; ===========================================================================

loc_3CC3C:				
		moveq	#$64,d0	; 'd'
		bsr.w	sub_40D06
		clr.b	$20(a0)
		move.w	#$EF,$30(a0)
		move.b	#$1E,$25(a0)
		bset	#5,$22(a0)
		bclr	#6,$22(a0)
		rts	
; ===========================================================================
byte_3CC60:	dc.b   0		; 0 
		dc.b $2A		; 1
		dc.b $C5		; 2
		dc.b $94		; 3
byte_3CC64:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $C5		; 2
		dc.b $98		; 3
byte_3CC68:	dc.b   0		; 0 
		dc.b $3C		; 1
		dc.b $C5		; 2
		dc.b $9A		; 3
byte_3CC6C:	dc.b   0		; 0 
		dc.b $3C		; 1
		dc.b $C5		; 2
		dc.b $9C		; 3
byte_3CC70:	dc.b   0		; 0 
		dc.b $3A		; 1
		dc.b $C5		; 2
		dc.b $96		; 3
byte_3CC74:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $C5		; 2
		dc.b $9E		; 3
byte_3CC78:	dc.b   0		; 0 
		dc.b $38		; 1
		dc.b $C5		; 2
		dc.b $A0		; 3
byte_3CC7C:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $C5		; 2
		dc.b $A2		; 3
off_3CC80:	dc.l Map_3CCD8	
		dc.w $379
		dc.w $404
		dc.w $2000
off_3CC8A:	dc.l Map_3CCD8	
		dc.w $379
		dc.w $401
		dc.w $800
off_3CC94:	dc.l Map_3CCD8	
		dc.w $379
		dc.w $405
		dc.w $1000
off_3CC9E:	dc.l Map_3D0EE	
		dc.w 0
		dc.w $405
		dc.w $2000
off_3CCA8:	dc.l Map_3CEBC	
		dc.w $A46D
		dc.w $405
		dc.w $2000
off_3CCB2:	dc.w byte_3CCBA-off_3CCB2; 0 
		dc.w byte_3CCC4-off_3CCB2; 1
		dc.w byte_3CCCC-off_3CCB2; 2
		dc.w byte_3CCD0-off_3CCB2; 3
byte_3CCBA:	dc.b   5,  0,  1,  2,  3,  3,  3,  3,$FA,  0; 0	
byte_3CCC4:	dc.b   3,  3,  2,  1,  0,  0,$FA,  0; 0	
byte_3CCCC:	dc.b   3,  5,  6,$FF	; 0 
byte_3CCD0:	dc.b   3,  7,  8,  9, $A, $B,$FF,  0; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3CCD8:				
		dc.w word_3CCFE-Map_3CCD8; 0
		dc.w word_3CD20-Map_3CCD8; 1
		dc.w word_3CD42-Map_3CCD8; 2
		dc.w word_3CD64-Map_3CCD8; 3
		dc.w word_3CD86-Map_3CCD8; 4
		dc.w word_3CD98-Map_3CCD8; 5
		dc.w word_3CDAA-Map_3CCD8; 6
		dc.w word_3CDB4-Map_3CCD8; 7
		dc.w word_3CDBE-Map_3CCD8; 8
		dc.w word_3CDC8-Map_3CCD8; 9
		dc.w word_3CDD2-Map_3CCD8; 10
		dc.w word_3CDDC-Map_3CCD8; 11
		dc.w word_3CDE6-Map_3CCD8; 12
		dc.w word_3CE08-Map_3CCD8; 13
		dc.w word_3CE12-Map_3CCD8; 14
		dc.w word_3CE24-Map_3CCD8; 15
		dc.w word_3CE3E-Map_3CCD8; 16
		dc.w word_3CE60-Map_3CCD8; 17
		dc.w word_3CE8A-Map_3CCD8; 18
word_3CCFE:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0; 0
		dc.w $F80C,$2004,$2002,	   0; 4
		dc.w	 9,$2008,$2004,$FFE8; 8
		dc.w	 9,$2808,$2804,	   0; 12
word_3CD20:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0; 0
		dc.w $F80C,$2800,$2800,	   0; 4
		dc.w	 9,$200E,$2007,$FFE8; 8
		dc.w	 9,$280E,$2807,	   0; 12
word_3CD42:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0; 0
		dc.w $F80C,$2800,$2800,	   0; 4
		dc.w	 9,$2014,$200A,$FFE8; 8
		dc.w	 9,$2814,$280A,	   0; 12
word_3CD64:	dc.w 4			
		dc.w $F80C,$2000,$2000,$FFE0; 0
		dc.w $F80C,$2800,$2800,	   0; 4
		dc.w	 8,$201A,$200D,$FFE8; 8
		dc.w	 8,$281A,$280D,	   0; 12
word_3CD86:	dc.w 2			
		dc.w $F805,$401D,$400E,$FFF0; 0
		dc.w $F805,$481D,$480E,	   0; 4
word_3CD98:	dc.w 2			
		dc.w $F80D,$2021,$2010,$FFE0; 0
		dc.w $F80D,$2821,$2810,	   0; 4
word_3CDAA:	dc.w 1			
		dc.w $F80E,$2029,$2014,$FFF0; 0
word_3CDB4:	dc.w 1			
		dc.w $F80E,$2035,$201A,$FFF0; 0
word_3CDBE:	dc.w 1			
		dc.w $F80E,$2041,$2020,$FFF0; 0
word_3CDC8:	dc.w 1			
		dc.w $F80E,$204D,$2026,$FFF0; 0
word_3CDD2:	dc.w 1			
		dc.w $F80E,$2841,$2820,$FFF0; 0
word_3CDDC:	dc.w 1			
		dc.w $F80E,$2835,$281A,$FFF0; 0
word_3CDE6:	dc.w 4			
		dc.w $C007,$2059,$202C,$FFF8; 0
		dc.w $E007,$2059,$202C,$FFF8; 4
		dc.w	 7,$2059,$202C,$FFF8; 8
		dc.w $2007,$2059,$202C,$FFF8; 12
word_3CE08:	dc.w 1			
		dc.w	$C,$4071,$4038,$FFF0; 0
word_3CE12:	dc.w 2			
		dc.w $F00F,$4061,$4030,$FFF0; 0
		dc.w $100C,$4071,$4038,$FFF0; 4
word_3CE24:	dc.w 3			
		dc.w $E00F,$4061,$4030,$FFF0; 0
		dc.w	$F,$4061,$4030,$FFF0; 4
		dc.w $200C,$4071,$4038,$FFF0; 8
word_3CE3E:	dc.w 4			
		dc.w $D00F,$4061,$4030,$FFF0; 0
		dc.w $F00F,$4061,$4030,$FFF0; 4
		dc.w $100F,$4061,$4030,$FFF0; 8
		dc.w $300C,$4071,$4038,$FFF0; 12
word_3CE60:	dc.w 5			
		dc.w $C00F,$4061,$4030,$FFF0; 0
		dc.w $E00F,$4061,$4030,$FFF0; 4
		dc.w	$F,$4061,$4030,$FFF0; 8
		dc.w $200F,$4061,$4030,$FFF0; 12
		dc.w $400C,$4071,$4038,$FFF0; 16
word_3CE8A:	dc.w 6			
		dc.w $B00F,$4061,$4030,$FFF0; 0
		dc.w $D00F,$4061,$4030,$FFF0; 4
		dc.w $F00F,$4061,$4030,$FFF0; 8
		dc.w $100F,$4061,$4030,$FFF0; 12
		dc.w $300F,$4061,$4030,$FFF0; 16
		dc.w $500C,$4071,$4038,$FFF0; 20
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3CEBC:				
		dc.w word_3CEBE-Map_3CEBC
word_3CEBE:	dc.w 2			
		dc.w $F40E,    0,    0,$FFE0; 0
		dc.w $F40E, $800, $800,	   0; 4
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3CED0:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3CEDE(pc,d0.w),d1
		jmp	off_3CEDE(pc,d1.w)
; ===========================================================================
off_3CEDE:	dc.w loc_3CEE6-off_3CEDE; 0 
		dc.w loc_3CEF8-off_3CEDE; 1
		dc.w loc_3D036-off_3CEDE; 2
		dc.w loc_3D09C-off_3CEDE; 3
; ===========================================================================

loc_3CEE6:				
		bsr.w	loc_365F4
		move.b	$28(a0),d0
		subi.b	#-$5C,d0
		move.b	d0,$24(a0)
		rts	
; ===========================================================================

loc_3CEF8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3CF06(pc,d0.w),d1
		jmp	off_3CF06(pc,d1.w)
; ===========================================================================
off_3CF06:	dc.w loc_3CF10-off_3CF06; 0 
		dc.w loc_3CF32-off_3CF06; 1
		dc.w loc_3CF58-off_3CF06; 2
		dc.w loc_3CF7C-off_3CF06; 3
		dc.w loc_3CFF6-off_3CF06; 4
; ===========================================================================

loc_3CF10:				
		addq.b	#2,$25(a0)
		lea	(byte_3D0D0).l,a2
		bsr.w	loc_367D0
		move.w	#$3F8,8(a1)
		move.w	#$160,$C(a1)
		move.w	a0,($FFFFF660).w
		bra.w	loc_3EA42
; ===========================================================================

loc_3CF32:				
		bsr.w	loc_366D6
		addi.w	#$5C,d2	; '\'
		cmpi.w	#$B8,d2	
		bcs.s	loc_3CF44
		bra.w	loc_3EA42
; ===========================================================================

loc_3CF44:				
		addq.b	#2,$25(a0)
		move.w	#$18,$2A(a0)
		move.b	#1,$1A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CF58:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3CF62
		bra.w	loc_3EA42
; ===========================================================================

loc_3CF62:				
		addq.b	#2,$25(a0)
		bset	#2,$22(a0)
		move.w	#$200,$10(a0)
		move.w	#$10,$2A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3CF7C:				
		cmpi.w	#$810,8(a0)
		bcc.s	loc_3CFC0
		bsr.w	loc_366D6
		addi.w	#$50,d2	; 'P'
		cmpi.w	#$A0,d2	
		bcc.s	loc_3CF9E
		move.w	8(a1),d0
		addi.w	#$50,d0	; 'P'
		move.w	d0,8(a0)

loc_3CF9E:				
		subq.w	#1,$2A(a0)
		bpl.s	loc_3CFAE
		move.w	#$20,$2A(a0) ; ' '
		bsr.w	loc_3D00C

loc_3CFAE:				
		bsr.w	loc_3EAC0
		lea	(off_3D0D8).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3CFC0:				
		move.b	#2,$1A(a0)
		clr.w	$10(a0)
		tst.b	1(a0)
		bpl.s	loc_3CFF2
		addq.b	#2,$25(a0)
		move.w	#$80,$10(a0)
		move.w	#-$200,$12(a0)
		move.b	#2,$1A(a0)
		move.w	#$50,$2A(a0) ; 'P'
		bset	#3,$22(a0)

loc_3CFF2:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3CFF6:				
		subq.w	#1,$2A(a0)
		bmi.w	loc_3EA48

loc_3CFFE:
		addi.w	#$10,$12(a0)

loc_3D004:
		bsr.w	loc_3EAC0

loc_3D008:
		bra.w	loc_3EA42
; ===========================================================================

loc_3D00C:				
		lea	(byte_3D0D4).l,a2
		bsr.w	loc_367D0
		move.b	#-$56,$28(a1)
		move.b	#5,$1A(a1)
		move.w	#-$100,$10(a1)
		subi.w	#$18,$C(a1)
		move.w	#8,$2A(a1)
		rts	
; ===========================================================================

loc_3D036:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3D044(pc,d0.w),d1
		jmp	off_3D044(pc,d1.w)
; ===========================================================================
off_3D044:	dc.w loc_3D04A-off_3D044; 0 
		dc.w loc_3D066-off_3D044; 1
		dc.w loc_3D078-off_3D044; 2
; ===========================================================================

loc_3D04A:				
		movea.w	$2C(a0),a1
		btst	#2,$22(a1)
		bne.s	loc_3D05E
		bsr.w	loc_3D086
		bra.w	loc_3EA42
; ===========================================================================

loc_3D05E:				
		addq.b	#2,$25(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3D066:				
		bsr.w	loc_3D086
		lea	(off_3D0E6).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3D078:				
		lea	($FFFFB000).w,a1
		bclr	#5,$22(a1)
		bra.w	loc_3EA48
; ===========================================================================

loc_3D086:				
		move.w	8(a0),-(sp)
		move.w	#$13,d1
		move.w	#$20,d2	; ' '
		move.w	#$20,d3	; ' '
		move.w	(sp)+,d4
		bra.w	loc_3EAB4
; ===========================================================================

loc_3D09C:				
		subq.w	#1,$2A(a0)
		bmi.w	loc_3EA48
		addi.w	#$10,$12(a0)
		bsr.w	loc_3EAC0
		bra.w	loc_3EA54
; ===========================================================================
off_3D0B2:	dc.l Map_3D0EE	
		dc.w 0
		dc.w $405
		dc.w $1800
off_3D0BC:	dc.l Map_3D1DE	
		dc.w $2328
		dc.w $401
		dc.w $800
off_3D0C6:	dc.l Map_3D0EE	
		dc.w 0
		dc.w $405
		dc.w $400
byte_3D0D0:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $C6		; 2
		dc.b $A8		; 3
byte_3D0D4:	dc.b   0		; 0 
		dc.b $3C		; 1
		dc.b $C6		; 2
		dc.b $AA		; 3
off_3D0D8:	dc.w byte_3D0DC-off_3D0D8; 0 
		dc.w byte_3D0E2-off_3D0D8; 1
byte_3D0DC:	dc.b   5,  2,  3,  4,$FF,  0; 0	
byte_3D0E2:	dc.b   5,  6,  7,$FF	; 0 
off_3D0E6:	dc.w byte_3D0E8-off_3D0E6 
byte_3D0E8:	dc.b   1,  0,  1,  2,  3,$FA; 0	
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3D0EE:				
		dc.w word_3D0FE-Map_3D0EE; 0
		dc.w word_3D118-Map_3D0EE; 1
		dc.w word_3D132-Map_3D0EE; 2
		dc.w word_3D15C-Map_3D0EE; 3
		dc.w word_3D17E-Map_3D0EE; 4
		dc.w word_3D1A0-Map_3D0EE; 5
		dc.w word_3D1AA-Map_3D0EE; 6
		dc.w word_3D1C4-Map_3D0EE; 7
word_3D0FE:	dc.w 3			
		dc.w $E60D, $500, $280,$FFF0; 0
		dc.w $F60E, $564, $2B2,$FFF0; 4
		dc.w  $E0D, $570, $2B8,$FFF0; 8
word_3D118:	dc.w 3			
		dc.w $E60D, $510, $288,$FFF0; 0
		dc.w $F60E, $564, $2B2,$FFF0; 4
		dc.w  $E0D, $570, $2B8,$FFF0; 8
word_3D132:	dc.w 5			
		dc.w $EC04, $518, $28C,$FFE0; 0
		dc.w $E40D, $51A, $28D,$FFF0; 4
		dc.w $F40E, $522, $291,$FFF0; 8
		dc.w  $401, $52E, $297,$FFE8; 12
		dc.w  $405, $530, $298,	 $10; 16
word_3D15C:	dc.w 4			
		dc.w $EC04, $518, $28C,$FFE0; 0
		dc.w $E40D, $51A, $28D,$FFF0; 4
		dc.w $F40E, $534, $29A,$FFF0; 8
		dc.w  $C05, $540, $2A0,$FFF8; 12
word_3D17E:	dc.w 4			
		dc.w $EC04, $518, $28C,$FFE0; 0
		dc.w $E40E, $544, $2A2,$FFF0; 4
		dc.w $FC0F, $550, $2A8,$FFF0; 8
		dc.w  $C01, $560, $2B0,	 $10; 12
word_3D1A0:	dc.w 1			
		dc.w $FC04, $562, $2B1,$FFF8; 0
word_3D1AA:	dc.w 3			
		dc.w $E60D, $508, $284,$FFF0; 0
		dc.w $F60E, $564, $2B2,$FFF0; 4
		dc.w  $E0D, $570, $2B8,$FFF0; 8
word_3D1C4:	dc.w 3			
		dc.w $E70D, $508, $284,$FFF0; 0
		dc.w $F70E, $564, $2B2,$FFF0; 4
		dc.w  $F0D, $578, $2BC,$FFF0; 8
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3D1DE:				
		dc.w word_3D1E6-Map_3D1DE; 0
		dc.w word_3D208-Map_3D1DE; 1
		dc.w word_3D222-Map_3D1DE; 2
		dc.w word_3D234-Map_3D1DE; 3
word_3D1E6:	dc.w 4			
		dc.w $E005,    0,    0,$FFF8; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
		dc.w $1005,    0,    0,$FFF8; 12
word_3D208:	dc.w 3			
		dc.w $E005,    0,    0,$FFF8; 0
		dc.w $F005,    0,    0,$FFF8; 4
		dc.w	 5,    0,    0,$FFF8; 8
word_3D222:	dc.w 2			
		dc.w $E005,    0,    0,$FFF8; 0
		dc.w $F005,    0,    0,$FFF8; 4
word_3D234:	dc.w 1			
		dc.w $E005,    0,    0,$FFF8; 0
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Guy with shield that crawls along floor from CNZ
; ----------------------------------------------------------------------------

Sprite_3D23E:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3D24C(pc,d0.w),d1
		jmp	off_3D24C(pc,d1.w)
; ===========================================================================
off_3D24C:	dc.w loc_3D254-off_3D24C; 0 
		dc.w loc_3D27C-off_3D24C; 1
		dc.w loc_3D2A6-off_3D24C; 2
		dc.w loc_3D2D4-off_3D24C; 3
; ===========================================================================

loc_3D254:				
		bsr.w	loc_365F4
		move.w	#$200,$2A(a0)
		moveq	#$20,d0	; ' '
		btst	#0,1(a0)
		bne.s	loc_3D26A
		neg.w	d0

loc_3D26A:				
		move.w	d0,$10(a0)
		move.b	#$F,$16(a0)
		move.b	#$10,$17(a0)
		rts	
; ===========================================================================

loc_3D27C:				
		subq.w	#1,$2A(a0)
		beq.s	loc_3D298
		bsr.w	loc_3EAC0
		bsr.w	loc_3D416
		lea	(off_3D44A).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA54
; ===========================================================================

loc_3D298:				
		addq.b	#2,$24(a0)
		move.w	#$3B,$2A(a0) ; ';'
		bra.w	loc_3EA54
; ===========================================================================

loc_3D2A6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3D2B4
		bsr.w	loc_3D416
		bra.w	loc_3EA54
; ===========================================================================

loc_3D2B4:				
		move.b	#2,$24(a0)
		move.w	#$200,$2A(a0)
		neg.w	$10(a0)
		bchg	#0,1(a0)
		bchg	#0,$22(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3D2D4:				
		move.b	#-$29,$20(a0)
		bsr.w	loc_366D6
		move.w	d2,d4
		addi.w	#$40,d2	; '@'
		cmpi.w	#$80,d2	
		bcc.w	loc_3D39A
		addi.w	#$40,d3	; '@'
		cmpi.w	#$80,d3	
		bcc.w	loc_3D39A
		bclr	#3,$22(a0)
		bne.w	loc_3D386
		move.b	$21(a0),d0
		beq.s	loc_3D368
		bclr	#0,$21(a0)
		beq.s	loc_3D334
		cmpi.b	#2,$1C(a1)
		bne.s	loc_3D36C
		btst	#1,$22(a1)
		bne.s	loc_3D332
		bsr.w	loc_366D6
		btst	#0,1(a0)
		beq.s	loc_3D32E
		subq.w	#2,d0

loc_3D32E:				
		tst.w	d0
		bne.s	loc_3D390

loc_3D332:				
		bsr.s	loc_3D3A4

loc_3D334:				
		lea	($FFFFB040).w,a1
		bclr	#1,$21(a0)
		beq.s	loc_3D364
		cmpi.b	#2,$1C(a1)
		bne.s	loc_3D36C
		btst	#1,$22(a1)
		bne.s	loc_3D362
		bsr.w	loc_366D6
		btst	#0,1(a0)
		beq.s	loc_3D35E
		subq.w	#2,d0

loc_3D35E:				
		tst.w	d0
		bne.s	loc_3D390

loc_3D362:				
		bsr.s	loc_3D3A4

loc_3D364:				
		clr.b	$21(a0)

loc_3D368:				
		bra.w	loc_3EA54
; ===========================================================================

loc_3D36C:				
		move.b	#-$69,$20(a0)
		btst	#1,$2B(a1)
		beq.s	loc_3D380
		move.b	#$17,$20(a0)

loc_3D380:				
		bset	#3,$22(a0)

loc_3D386:				
		move.b	#1,$1A(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3D390:				
		move.b	#$17,$20(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3D39A:				
		move.b	$2C(a0),$24(a0)
		bra.w	loc_3EA54
; ===========================================================================

loc_3D3A4:				
		move.b	#2,$1A(a0)
		btst	#1,$22(a1)
		beq.s	loc_3D3B8
		move.b	#3,$1A(a0)

loc_3D3B8:				
		move.w	8(a0),d1
		move.w	$C(a0),d2
		sub.w	8(a1),d1
		sub.w	$C(a1),d2
		jsr	(CalcAngle).l
		move.b	(v_frame_counter).w,d1
		andi.w	#3,d1
		add.w	d1,d0
		jsr	(CalcSine).l
		muls.w	#-$700,d1
		asr.l	#8,d1
		move.w	d1,$10(a1)
		muls.w	#-$700,d0
		asr.l	#8,d0
		move.w	d0,$12(a1)
		bset	#1,$22(a1)
		bclr	#4,$22(a1)
		bclr	#5,$22(a1)

loc_3D404:
		clr.b	$3C(a1)
		move.w	#$B4,d0	
		jsr	(PlaySound).l
		rts	
; ===========================================================================
		rts	
; ===========================================================================

loc_3D416:				
		bsr.w	loc_366D6
		addi.w	#$40,d2	; '@'
		cmpi.w	#$80,d2	
		bcc.s	locret_3D43E
		addi.w	#$40,d3	; '@'
		cmpi.w	#$80,d3	
		bcc.s	locret_3D43E
		move.b	$24(a0),$2C(a0)
		move.b	#6,$24(a0)
		clr.b	$1A(a0)

locret_3D43E:				
		rts	
; ===========================================================================
off_3D440:	dc.l Map_3D450	
		dc.w $8340
		dc.w $403
		dc.w $10D7
off_3D44A:	dc.w byte_3D44C-off_3D44A 
byte_3D44C:	dc.b $13,  0,  1,$FF	; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3D450:				
		dc.w word_3D458-Map_3D450; 0
		dc.w word_3D472-Map_3D450; 1
		dc.w word_3D48C-Map_3D450; 2
		dc.w word_3D4A6-Map_3D450; 3
word_3D458:	dc.w 3			
		dc.w $F00B,$2010,$2008,	   0; 0
		dc.w $F00F,$2000,$2000,$FFF0; 4
		dc.w	 9,$2024,$2012,$FFE8; 8
word_3D472:	dc.w 3			
		dc.w $F00B,$2010,$2008,	   4; 0
		dc.w $F00F,$2000,$2000,$FFF0; 4
		dc.w	 9,$2024,$2012,$FFE0; 8
word_3D48C:	dc.w 3			
		dc.w $F00B,$2010,$2008,$FFE8; 0
		dc.w	 9,$2024,$2012,$FFF0; 4
		dc.w $F00F,$2000,$2000,$FFF0; 8
word_3D4A6:	dc.w 4			
		dc.w $F00D,$201C,$200E,$FFF0; 0
		dc.w	 9,$2024,$2012,$FFF8; 4
		dc.w	 9,$2824,$2812,$FFE0; 8
		dc.w $F00F,$2000,$2000,$FFF0; 12
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Death	Egg
; ----------------------------------------------------------------------------

Sprite_3D4C8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3D4D6(pc,d0.w),d1
		jmp	off_3D4D6(pc,d1.w)
; ===========================================================================
off_3D4D6:	dc.w loc_3D4F8-off_3D4D6; 0 
		dc.w loc_3D508-off_3D4D6; 1
		dc.w loc_3DA14-off_3D4D6; 2
		dc.w loc_3DA4A-off_3D4D6; 3
		dc.w loc_3DA74-off_3D4D6; 4
		dc.w loc_3DB74-off_3D4D6; 5
		dc.w loc_3DB9E-off_3D4D6; 6
		dc.w loc_3DBC8-off_3D4D6; 7
		dc.w loc_3DC50-off_3D4D6; 8
		dc.w loc_3DC9C-off_3D4D6; 9
		dc.w loc_3DCCC-off_3D4D6; 10
		dc.w loc_3DD20-off_3D4D6; 11
		dc.w loc_3DD50-off_3D4D6; 12
		dc.w loc_3DE70-off_3D4D6; 13
		dc.w loc_3DEC2-off_3D4D6; 14
		dc.w loc_3DFAA-off_3D4D6; 15
		dc.w loc_3D970-off_3D4D6; 16
; ===========================================================================

loc_3D4F8:				
		lea	(off_3E590)(pc),a1
		bsr.w	loc_36602
		move.b	$28(a0),$24(a0)
		rts	
; ===========================================================================

loc_3D508:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3D51A(pc,d0.w),d1
		jsr	off_3D51A(pc,d1.w)
		bra.w	loc_3EA42
; ===========================================================================
off_3D51A:	dc.w loc_3D52A-off_3D51A; 0 
		dc.w loc_3D5A8-off_3D51A; 1
		dc.w loc_3D5C2-off_3D51A; 2
		dc.w loc_3D5EA-off_3D51A; 3
		dc.w loc_3D62E-off_3D51A; 4
		dc.w loc_3D640-off_3D51A; 5
		dc.w loc_3D684-off_3D51A; 6
		dc.w loc_3D8D2-off_3D51A; 7
; ===========================================================================

loc_3D52A:				
		addq.b	#2,$25(a0)
		move.b	#3,$1A(a0)
		move.b	#5,$18(a0)
		lea	(byte_3E55C).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E564).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E560).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E568).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E56C).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E570).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E574).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E578).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E57C).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E580).l,a2
		bsr.w	loc_367D0
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D5A8:				
		btst	#2,$22(a0)
		bne.s	loc_3D5B2
		rts	
; ===========================================================================

loc_3D5B2:				
		addq.b	#2,$25(a0)
		move.b	#$3C,$1E(a0) ; '<'
		moveq	#-7,d0
		bra.w	loc_3EA60
; ===========================================================================

loc_3D5C2:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D5CA
		rts	
; ===========================================================================

loc_3D5CA:				
		addq.b	#2,$25(a0)
		move.b	#$79,$1E(a0) ; 'y'
		move.w	#-$100,$12(a0)
		movea.w	$38(a0),a1
		move.b	#4,$25(a1)
		moveq	#-$6C,d0
		bra.w	loc_3EAA2
; ===========================================================================

loc_3D5EA:				
		subq.b	#1,$1E(a0)
		beq.s	loc_3D604
		moveq	#-$49,d0
		bsr.w	loc_3EA60
		bsr.w	loc_3EAC0
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D604:				
		addq.b	#2,$25(a0)
		clr.w	$12(a0)
		move.b	#$1F,$1E(a0)
		move.b	#$16,$20(a0)
		move.b	#$C,$21(a0)
		bsr.w	loc_3E0EE
		movea.w	$38(a0),a1
		move.b	#6,$25(a1)
		rts	
; ===========================================================================

loc_3D62E:				
		bsr.w	loc_3DFF8
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D63A
		rts	
; ===========================================================================

loc_3D63A:				
		addq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_3D640:				
		bsr.w	loc_3DFF8
		addq.b	#2,$25(a0)
		move.b	#$20,$1E(a0) ; ' '
		move.b	$26(a0),d0
		addq.b	#1,d0
		move.b	d0,$26(a0)
		andi.w	#3,d0
		move.b	byte_3D680(pc,d0.w),d0
		move.b	d0,$1C(a0)
		clr.b	$1D(a0)
		cmpi.b	#2,d0
		bne.s	locret_3D67E
		movea.w	$38(a0),a1
		move.b	#4,$25(a1)
		move.b	#2,$1C(a1)

locret_3D67E:				
		rts	
; ===========================================================================
byte_3D680:	dc.b   2		; 0
		dc.b   0		; 1
		dc.b   2		; 2
		dc.b   4		; 3
; ===========================================================================

loc_3D684:				
		bsr.w	loc_3DFF8
		moveq	#0,d0
		move.b	$1C(a0),d0
		move.w	off_3D696(pc,d0.w),d1
		jmp	off_3D696(pc,d1.w)
; ===========================================================================
off_3D696:	dc.w loc_3D6AA-off_3D696; 0 
		dc.w loc_3D702-off_3D696; 1
		dc.w loc_3D83C-off_3D696; 2
; ===========================================================================
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D6A4
		rts	
; ===========================================================================

loc_3D6A4:				
		addq.b	#2,$1C(a0)
		rts	
; ===========================================================================

loc_3D6AA:				
		moveq	#0,d0
		move.b	$1D(a0),d0
		move.w	off_3D6B8(pc,d0.w),d1
		jmp	off_3D6B8(pc,d1.w)
; ===========================================================================
off_3D6B8:	dc.w loc_3D6C0-off_3D6B8; 0 
		dc.w loc_3D6CE-off_3D6B8; 1
		dc.w loc_3D6C0-off_3D6B8; 2
		dc.w loc_3D6E8-off_3D6B8; 3
; ===========================================================================

loc_3D6C0:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D6C8
		rts	
; ===========================================================================

loc_3D6C8:				
		addq.b	#2,$1D(a0)
		rts	
; ===========================================================================

loc_3D6CE:				
		lea	(off_3E40C).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D6DC
		rts	
; ===========================================================================

loc_3D6DC:				
		addq.b	#2,$1D(a0)
		move.b	#$40,$1E(a0) ; '@'
		rts	
; ===========================================================================

loc_3D6E8:				
		lea	(off_3E42C).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D6F6
		rts	
; ===========================================================================

loc_3D6F6:				
		subq.b	#2,$25(a0)
		move.b	#$40,$1E(a0) ; '@'
		rts	
; ===========================================================================

loc_3D702:				
		moveq	#0,d0
		move.b	$1D(a0),d0
		move.w	word_3D710(pc,d0.w),d1
		jmp	word_3D710(pc,d1.w)
; ===========================================================================
word_3D710:	dc.w loc_3D6C0-word_3D710; 0 
		dc.w loc_3D720-word_3D710
		dc.w loc_3D744-word_3D710
		dc.w loc_3D6C0-word_3D710
		dc.w loc_3D784-word_3D710
		dc.w loc_3D7B8-word_3D710
		dc.w loc_3D7F0-word_3D710
		dc.w loc_3D82E-word_3D710
; ===========================================================================

loc_3D720:				
		lea	(off_3E3D0).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D72E
		rts	
; ===========================================================================

loc_3D72E:				
		addq.b	#2,$1D(a0)
		move.b	#-$80,$1E(a0)
		clr.w	$10(a0)
		move.w	#-$200,$12(a0)
		rts	
; ===========================================================================

loc_3D744:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D768
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3D75A
		moveq	#-$24,d0
		bsr.w	loc_3EA72

loc_3D75A:				
		bsr.w	loc_3EAC0
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D768:				
		addq.b	#2,$1D(a0)
		clr.w	$12(a0)
		lea	(byte_3E584).l,a2
		bsr.w	loc_367D0
		clr.w	$10(a0)
		clr.w	$28(a0)
		rts	
; ===========================================================================

loc_3D784:				
		move.w	$28(a0),d0
		bne.s	loc_3D78C
		rts	
; ===========================================================================

loc_3D78C:				
		addq.b	#2,$1D(a0)
		move.w	d0,8(a0)
		bclr	#0,1(a0)
		cmpi.w	#$780,d0
		bcc.s	loc_3D7A6
		bset	#0,1(a0)

loc_3D7A6:				
		bsr.w	loc_3E168
		move.w	#$800,$12(a0)
		move.b	#$20,$1E(a0) ; ' '
		rts	
; ===========================================================================

loc_3D7B8:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D7CC
		bsr.w	loc_3EAC0
		lea	(byte_3E2E0).l,a1
		bra.w	loc_3E2A8
; ===========================================================================

loc_3D7CC:				
		addq.b	#2,$1D(a0)
		clr.w	$12(a0)
		move.b	#1,(f_screen_shake).w
		move.w	#$40,($FFFFF660).w ; '@'
		movea.w	$38(a0),a1
		move.b	#6,$25(a1)
		moveq	#-$47,d0
		bra.w	loc_3EA60
; ===========================================================================

loc_3D7F0:				
		lea	(off_3E30A).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D7FE
		rts	
; ===========================================================================

loc_3D7FE:				
		lea	(byte_3E2E0).l,a1

loc_3D804:
		bsr.w	loc_3E2A8
		bsr.w	loc_366D6
		btst	#0,1(a0)
		beq.s	loc_3D816
		subq.w	#2,d0

loc_3D816:				
		tst.w	d0
		bne.s	loc_3D820
		subq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_3D820:				
		addq.b	#2,$1D(a0)
		move.b	#$60,$1E(a0) ; '`'
		bra.w	loc_3E136
; ===========================================================================

loc_3D82E:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D836
		rts	
; ===========================================================================

loc_3D836:				
		subq.b	#2,$25(a0)
		rts	
; ===========================================================================

loc_3D83C:				
		moveq	#0,d0
		move.b	$1D(a0),d0
		move.w	word_3D84A(pc,d0.w),d1
		jmp	word_3D84A(pc,d1.w)
; ===========================================================================
word_3D84A:	dc.w loc_3D6C0-word_3D84A; 0 
		dc.w loc_3D856-word_3D84A
		dc.w loc_3D6C0-word_3D84A
		dc.w loc_3D89E-word_3D84A
		dc.w loc_3D6C0-word_3D84A
		dc.w loc_3D8B8-word_3D84A
; ===========================================================================

loc_3D856:				
		bset	#6,$22(a0)
		lea	(off_3E2F6).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D86A
		rts	
; ===========================================================================

loc_3D86A:				
		bsr.w	loc_366D6
		btst	#0,1(a0)
		beq.s	loc_3D878
		subq.w	#2,d0

loc_3D878:				
		tst.w	d0
		bne.s	loc_3D88E
		addq.b	#2,$1D(a0)
		move.b	#$40,$1E(a0) ; '@'
		bset	#4,$22(a0)
		rts	
; ===========================================================================

loc_3D88E:				
		move.b	#8,$1D(a0)
		move.b	#$20,$1E(a0) ; ' '
		bra.w	loc_3E136
; ===========================================================================

loc_3D89E:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D8A6
		rts	
; ===========================================================================

loc_3D8A6:				
		addq.b	#2,$1D(a0)
		bset	#5,$22(a0)
		move.b	#$40,$1E(a0) ; '@'
		rts	
; ===========================================================================

loc_3D8B8:				
		lea	(off_3E300).l,a1
		bsr.w	loc_3E1AA
		bne.s	loc_3D8C6
		rts	
; ===========================================================================

loc_3D8C6:				
		subq.b	#2,$25(a0)
		bclr	#6,$22(a0)
		rts	
; ===========================================================================

loc_3D8D2:				
		moveq	#0,d0
		move.b	$1C(a0),d0
		move.w	off_3D8E0(pc,d0.w),d1
		jmp	off_3D8E0(pc,d1.w)
; ===========================================================================
off_3D8E0:	dc.w loc_3D8E6-off_3D8E0; 0 
		dc.w loc_3D922-off_3D8E0; 1
		dc.w loc_3D93C-off_3D8E0; 2
; ===========================================================================

loc_3D8E6:				
		bsr.w	loc_3EAA8
		bsr.w	loc_3EABA
		move.w	$C(a0),d0
		cmpi.w	#$15C,d0
		bcc.s	loc_3D8FA
		rts	
; ===========================================================================

loc_3D8FA:				
		move.w	#$15C,$C(a0)
		move.w	$12(a0),d0
		bmi.s	loc_3D916
		lsr.w	#2,d0
		cmpi.w	#$100,d0
		bcs.s	loc_3D916
		neg.w	d0
		move.w	d0,$12(a0)
		rts	
; ===========================================================================

loc_3D916:				
		addq.b	#2,$1C(a0)
		move.b	#$40,$1E(a0) ; '@'
		rts	
; ===========================================================================

loc_3D922:				
		subq.b	#1,$1E(a0)
		bmi.s	loc_3D92C
		bra.w	loc_3EAA8
; ===========================================================================

loc_3D92C:				
		addq.b	#2,$1C(a0)
		st.b	(f_lock_controls).w
		move.w	#$1000,(v_boundary_right_next).w
		rts	
; ===========================================================================

loc_3D93C:				
		move.w	#$808,(v_joypad_hold).w
		cmpi.w	#$840,(v_camera_x_pos).w
		bcc.s	loc_3D94C
		rts	
; ===========================================================================

loc_3D94C:				
		move.b	#$20,$24(a0) ; ' '
		clr.b	$25(a0)
		move.w	#$20,$2A(a0) ; ' '
		move.b	#1,(f_screen_shake).w
		move.w	#$1000,($FFFFF660).w
		movea.w	$36(a0),a1
		bra.w	loc_3EA5A
; ===========================================================================

loc_3D970:				
		move.b	($FFFFFE0F).w,d0
		andi.b	#$1F,d0
		bne.s	loc_3D984
		moveq	#-$1F,d0
		bsr.w	loc_3EA60
		subq.w	#1,$2A(a0)

loc_3D984:				
		lea	($FFFFB000).w,a1
		move.w	8(a1),d0
		sub.w	$2A(a0),d0
		move.w	d0,8(a0)
		move.w	$C(a1),$C(a0)
		bsr.w	loc_3DFBA
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3D9AC(pc,d0.w),d1
		jmp	off_3D9AC(pc,d1.w)
; ===========================================================================
off_3D9AC:	dc.w loc_3D9B0-off_3D9AC; 0 
		dc.w loc_3D9D6-off_3D9AC; 1
; ===========================================================================

loc_3D9B0:				
		lea	($FFFFB000).w,a1
		cmpi.w	#$EC0,8(a1)
		bcc.s	loc_3D9BE
		rts	
; ===========================================================================

loc_3D9BE:				
		addq.b	#2,$25(a0)
		move.w	#$3F,(v_palfade_start).w ; '?'
		move.b	#$16,$1E(a0)
		move.w	#$7FFF,(v_palcycle_time).w
		rts	
; ===========================================================================

loc_3D9D6:				
		subq.b	#1,$1E(a0)
		beq.w	loc_3D9F2
		movea.l	a0,a1
		lea	($FFFFFB00).w,a0
		moveq	#$3F,d0	; '?'

loc_3D9E6:				
		bsr.w	loc_3EA84
		dbf	d0,loc_3D9E6
		movea.l	a1,a0
		rts	
; ===========================================================================

loc_3D9F2:				
		move.l	#$EEE0EEE,d0
		lea	($FFFFFB00).w,a1
		moveq	#$1F,d6

loc_3D9FE:				
		move.l	d0,(a1)+
		dbf	d6,loc_3D9FE
		moveq	#-7,d0
		bsr.w	loc_3EA60
		move.b	#$20,(v_gamemode).w ; ' '
		bra.w	loc_3EA48
; ===========================================================================

loc_3DA14:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DA34(pc,d0.w),d1
		jsr	off_3DA34(pc,d1.w)
		lea	(byte_3DA38)(pc),a1
		bsr.w	loc_3E282
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DA34:	dc.w loc_3DA3C-off_3DA34; 0 
		dc.w locret_3DA48-off_3DA34; 1
byte_3DA38:	dc.b   0		; 0 
		dc.b  $C		; 1
		dc.b $FF		; 2
		dc.b $EC		; 3
; ===========================================================================

loc_3DA3C:				
		addq.b	#2,$25(a0)
		move.b	#4,$1A(a0)
		rts	
; ===========================================================================

locret_3DA48:				
		rts	
; ===========================================================================

loc_3DA4A:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DA62(pc,d0.w),d1
		jsr	off_3DA62(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DA62:	dc.w loc_3DA66-off_3DA62; 0 
		dc.w locret_3DA72-off_3DA62; 1
; ===========================================================================

loc_3DA66:				
		addq.b	#2,$25(a0)
		move.b	#$B,$1A(a0)
		rts	
; ===========================================================================

locret_3DA72:				
		rts	
; ===========================================================================

loc_3DA74:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DA96(pc,d0.w),d1
		jsr	off_3DA96(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		btst	#6,$22(a0)
		bne.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DA96:	dc.w loc_3DAA0-off_3DA96; 0 
		dc.w loc_3DAAC-off_3DA96; 1
		dc.w loc_3DACC-off_3DA96; 2
		dc.w loc_3DB32-off_3DA96; 3
		dc.w loc_3DB5A-off_3DA96; 4
; ===========================================================================

loc_3DAA0:				
		addq.b	#2,$25(a0)
		move.b	#6,$1A(a0)
		rts	
; ===========================================================================

loc_3DAAC:				
		movea.w	$2C(a0),a1
		bclr	#4,$22(a1)
		bne.s	loc_3DABA
		rts	
; ===========================================================================

loc_3DABA:				
		addq.b	#2,$25(a0)
		move.w	#$10,$2A(a0)
		move.w	$C(a0),$2E(a0)
		rts	
; ===========================================================================

loc_3DACC:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DADC
		addi.w	#$20,$12(a0) ; ' '
		bra.w	loc_3EAC0
; ===========================================================================

loc_3DADC:				
		addq.b	#2,$25(a0)
		move.w	#$20,$2A(a0) ; ' '
		bsr.w	loc_366D6
		tst.w	d2
		bpl.s	loc_3DAF0
		neg.w	d2

loc_3DAF0:				
		cmpi.w	#$100,d2
		bcs.s	loc_3DAFA
		move.w	#$FF,d2

loc_3DAFA:				
		andi.w	#$C0,d2	
		lsr.w	#5,d2
		move.w	word_3DB2A(pc,d2.w),d2
		tst.w	d1
		bne.s	loc_3DB0A
		neg.w	d2

loc_3DB0A:				
		move.w	d2,$12(a0)
		move.w	#$800,d2
		movea.w	$2C(a0),a1
		btst	#0,1(a0)
		bne.s	loc_3DB20
		neg.w	d2

loc_3DB20:				
		move.w	d2,$10(a0)
		moveq	#-$44,d0
		bra.w	loc_3EA60
; ===========================================================================
word_3DB2A:	dc.w  $200		; 0
		dc.w  $100		; 1
		dc.w   $80		; 2
		dc.w	 0		; 3
; ===========================================================================

loc_3DB32:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DB3C
		bra.w	loc_3EAC0
; ===========================================================================

loc_3DB3C:				
		addq.b	#2,$25(a0)
		neg.w	$10(a0)
		move.w	#$20,$2A(a0) ; ' '
		move.w	$2E(a0),d0
		sub.w	$C(a0),d0
		asl.w	#3,d0
		move.w	d0,$12(a0)
		rts	
; ===========================================================================

loc_3DB5A:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DB64
		bra.w	loc_3EAC0
; ===========================================================================

loc_3DB64:				
		move.b	#2,$25(a0)
		clr.w	$10(a0)
		clr.w	$12(a0)
		rts	
; ===========================================================================

loc_3DB74:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DB8C(pc,d0.w),d1
		jsr	off_3DB8C(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DB8C:	dc.w loc_3DB90-off_3DB8C; 0 
		dc.w locret_3DB9C-off_3DB8C; 1
; ===========================================================================

loc_3DB90:				
		addq.b	#2,$25(a0)
		move.b	#5,$1A(a0)
		rts	
; ===========================================================================

locret_3DB9C:				
		rts	
; ===========================================================================

loc_3DB9E:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DBB6(pc,d0.w),d1
		jsr	off_3DBB6(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DBB6:	dc.w loc_3DBBA-off_3DBB6; 0 
		dc.w locret_3DBC6-off_3DBB6; 1
; ===========================================================================

loc_3DBBA:				
		addq.b	#2,$25(a0)
		move.b	#$A,$1A(a0)
		rts	
; ===========================================================================

locret_3DBC6:				
		rts	
; ===========================================================================

loc_3DBC8:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DBE8(pc,d0.w),d1
		jsr	off_3DBE8(pc,d1.w)
		lea	(byte_3DBF2)(pc),a1
		bsr.w	loc_3E282
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DBE8:	dc.w loc_3DBF6-off_3DBE8; 0 
		dc.w loc_3DC02-off_3DBE8; 1
		dc.w loc_3DC1C-off_3DBE8; 2
		dc.w loc_3DC2A-off_3DBE8; 3
		dc.w loc_3DC46-off_3DBE8; 4
byte_3DBF2:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b $FF		; 2
		dc.b $CC		; 3
; ===========================================================================

loc_3DBF6:				
		addq.b	#2,$25(a0)
		move.b	#$15,$1A(a0)
		rts	
; ===========================================================================

loc_3DC02:				
		movea.w	($FFFFF660).w,a1
		btst	#3,$22(a1)
		bne.s	loc_3DC10
		rts	
; ===========================================================================

loc_3DC10:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0) ; '@'
		rts	
; ===========================================================================

loc_3DC1C:				
		lea	(off_3E59A).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3DC2A:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DC34
		bra.w	loc_3EA42
; ===========================================================================

loc_3DC34:				
		addq.b	#2,$25(a0)
		movea.w	$2C(a0),a1
		bset	#2,$22(a1)
		bra.w	loc_3EA42
; ===========================================================================

loc_3DC46:				
		move.b	#-1,$21(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3DC50:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DC66(pc,d0.w),d1
		jsr	off_3DC66(pc,d1.w)
		lea	(byte_3DC70)(pc),a1
		bra.w	loc_3E282
; ===========================================================================
off_3DC66:	dc.w loc_3DC74-off_3DC66; 0 
		dc.w loc_3DC80-off_3DC66; 1
		dc.w loc_3DC86-off_3DC66; 2
		dc.w loc_3DC94-off_3DC66; 3
		dc.w loc_3DC80-off_3DC66; 4
byte_3DC70:	dc.b   0		; 0 
		dc.b $38		; 1
		dc.b   0		; 2
		dc.b $18		; 3
; ===========================================================================

loc_3DC74:				
		addq.b	#2,$25(a0)
		move.b	#$C,$1A(a0)
		rts	
; ===========================================================================

loc_3DC80:				
		move.b	#3,$1C(a0)

loc_3DC86:				
					
		lea	(off_3E5AA).l,a1
		bsr.w	loc_3EA6C
		bra.w	loc_3EA42
; ===========================================================================

loc_3DC94:				
		move.b	#1,$1C(a0)
		bra.s	loc_3DC86
; ===========================================================================

loc_3DC9C:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DCB4(pc,d0.w),d1
		jsr	off_3DCB4(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DCB4:	dc.w loc_3DCB8-off_3DCB4; 0 
		dc.w locret_3DCCA-off_3DCB4; 1
; ===========================================================================

loc_3DCB8:				
		addq.b	#2,$25(a0)
		move.b	#$B,$1A(a0)
		move.b	#5,$18(a0)
		rts	
; ===========================================================================

locret_3DCCA:				
		rts	
; ===========================================================================

loc_3DCCC:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DCE4(pc,d0.w),d1
		jsr	off_3DCE4(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DCE4:	dc.w loc_3DCEE-off_3DCE4; 0 
		dc.w loc_3DD00-off_3DCE4
		dc.w loc_3DACC-off_3DCE4
		dc.w loc_3DB32-off_3DCE4
		dc.w loc_3DB5A-off_3DCE4
; ===========================================================================

loc_3DCEE:				
		addq.b	#2,$25(a0)
		move.b	#6,$1A(a0)
		move.b	#5,$18(a0)
		rts	
; ===========================================================================

loc_3DD00:				
		movea.w	$2C(a0),a1
		bclr	#5,$22(a1)
		bne.s	loc_3DD0E
		rts	
; ===========================================================================

loc_3DD0E:				
		addq.b	#2,$25(a0)
		move.w	#$10,$2A(a0)
		move.w	$C(a0),$2E(a0)
		rts	
; ===========================================================================

loc_3DD20:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DD38(pc,d0.w),d1
		jsr	off_3DD38(pc,d1.w)
		tst.b	(a0)
		beq.w	locret_37A48
		bra.w	loc_3EA42
; ===========================================================================
off_3DD38:	dc.w loc_3DD3C-off_3DD38; 0 
		dc.w locret_3DD4E-off_3DD38; 1
; ===========================================================================

loc_3DD3C:				
		addq.b	#2,$25(a0)
		move.b	#$A,$1A(a0)
		move.b	#5,$18(a0)
		rts	
; ===========================================================================

locret_3DD4E:				
		rts	
; ===========================================================================

loc_3DD50:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DD5E(pc,d0.w),d1
		jmp	off_3DD5E(pc,d1.w)
; ===========================================================================
off_3DD5E:	dc.w loc_3DD64-off_3DD5E; 0 
		dc.w loc_3DDA6-off_3DD5E; 1
		dc.w loc_3DE3C-off_3DD5E; 2
; ===========================================================================

loc_3DD64:				
		addq.b	#2,$25(a0)
		move.b	#$10,$1A(a0)
		ori.w	#-$8000,2(a0)
		move.b	#1,$18(a0)
		move.w	#$A0,$2A(a0)
		lea	($FFFFB000).w,a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		move.w	$10(a1),$30(a0)
		move.w	$12(a1),$32(a0)
		move.w	#$18,$26(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3DDA6:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DE0A
		lea	$40(a0),a1
		movea.l	a1,a2
		move.w	-(a1),$12(a0)
		move.w	-(a1),$10(a0)
		moveq	#2,d6

loc_3DDBC:				
		move.l	-(a1),-(a2)
		dbf	d6,loc_3DDBC
		lea	($FFFFB000).w,a2
		move.w	$10(a2),d0
		bne.s	loc_3DDD2
		move.w	8(a2),8(a0)

loc_3DDD2:				
		move.w	d0,(a1)+
		move.w	$12(a2),d0
		bne.s	loc_3DDE0
		move.w	$C(a2),$C(a0)

loc_3DDE0:				
		move.w	d0,(a1)+
		bsr.w	loc_3EAC0
		lea	(off_3E5EE).l,a1
		bsr.w	loc_3EA6C
		subq.b	#1,$26(a0)
		bpl.s	loc_3DE06
		subq.b	#1,$27(a0)
		move.b	$27(a0),$26(a0)
		moveq	#-$58,d0
		bsr.w	loc_3EA60

loc_3DE06:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3DE0A:				
		addq.b	#2,$25(a0)
		move.w	#$40,$2A(a0) ; '@'
		move.b	#4,$26(a0)
		lea	($FFFFB000).w,a1
		move.w	8(a1),8(a0)
		move.w	$C(a1),$C(a0)
		lea	(byte_3E588).l,a2
		bsr.w	loc_367D0
		clr.w	$10(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3DE3C:				
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DE62
		lea	(off_3E5EE).l,a1
		bsr.w	loc_3EA6C
		subq.b	#1,$26(a0)
		bpl.s	loc_3DE5E
		move.b	#4,$26(a0)
		moveq	#-$58,d0
		bsr.w	loc_3EA60

loc_3DE5E:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3DE62:				
		movea.w	$2C(a0),a1
		move.w	8(a0),$28(a1)
		bra.w	loc_3EA48
; ===========================================================================

loc_3DE70:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DE7E(pc,d0.w),d1
		jmp	off_3DE7E(pc,d1.w)
; ===========================================================================
off_3DE7E:	dc.w loc_3DE82-off_3DE7E; 0 
		dc.w loc_3DEA2-off_3DE7E; 1
; ===========================================================================

loc_3DE82:				
		addq.b	#2,$25(a0)
		move.b	#$14,$1A(a0)
		move.b	#1,$18(a0)
		ori.w	#-$8000,2(a0)
		move.w	#4,$2A(a0)
		bra.w	loc_3EA42
; ===========================================================================

loc_3DEA2:				
		movea.w	$2C(a0),a1
		tst.b	(a1)
		beq.w	loc_3EA48
		subq.w	#1,$2A(a0)
		bne.s	loc_3DEBE
		move.w	#4,$2A(a0)
		bchg	#5,2(a0)

loc_3DEBE:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3DEC2:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3DED0(pc,d0.w),d1
		jmp	off_3DED0(pc,d1.w)
; ===========================================================================
off_3DED0:	dc.w loc_3DED8-off_3DED0; 0 
		dc.w loc_3DF04-off_3DED0; 1
		dc.w loc_3DF36-off_3DED0; 2
		dc.w loc_3DF80-off_3DED0; 3
; ===========================================================================

loc_3DED8:				
		addq.b	#2,$25(a0)
		move.b	#$E,$1A(a0)
		move.b	#-$77,$20(a0)
		move.b	#5,$18(a0)
		move.b	#$C,$19(a0)
		lea	(byte_3DF00)(pc),a1
		bsr.w	loc_3E282
		bra.w	loc_3EA42
; ===========================================================================
byte_3DF00:	dc.b   0		; 0 
		dc.b $38		; 1
		dc.b $FF		; 2
		dc.b $EC		; 3
; ===========================================================================

loc_3DF04:				
		movea.w	$2C(a0),a1

loc_3DF08:
		btst	#7,$22(a1)
		bne.s	loc_3DF4C
		bsr.w	loc_3EABA
		move.w	$C(a0),d0
		cmpi.w	#$170,d0
		bcc.s	loc_3DF22
		bra.w	loc_3EA42
; ===========================================================================

loc_3DF22:				
		addq.b	#2,$25(a0)
		move.w	#$170,$C(a0)
		move.w	#$40,$2A(a0) ; '@'
		bra.w	loc_3EA42
; ===========================================================================

loc_3DF36:				
		movea.w	$2C(a0),a1
		btst	#7,$22(a1)
		bne.s	loc_3DF4C
		subq.w	#1,$2A(a0)
		bmi.s	loc_3DF4C
		bra.w	loc_3EA42
; ===========================================================================

loc_3DF4C:				
		move.b	#6,$25(a0)
		move.l	#Map_2D50A,4(a0)
		move.w	#$580,2(a0)
		move.b	#1,$18(a0)
		move.b	#7,$1E(a0)
		move.b	#0,$1A(a0)
		move.w	#$C4,d0	
		jsr	(PlaySound).l
		bra.w	loc_3EA42
; ===========================================================================

loc_3DF80:				
		subq.b	#1,$1E(a0)
		bpl.s	loc_3DFA6
		move.b	#7,$1E(a0)
		addq.b	#1,$1A(a0)
		cmpi.b	#5,$1A(a0)
		bcs.s	loc_3DFA6
		clr.b	$20(a0)
		cmpi.b	#7,$1A(a0)
		beq.w	loc_3EA48

loc_3DFA6:				
		bra.w	loc_3EA42
; ===========================================================================

loc_3DFAA:				
		subq.w	#1,$2A(a0)
		bmi.w	loc_3EA48
		bsr.w	loc_3EABA
		bra.w	loc_3EA42
; ===========================================================================

loc_3DFBA:				
		jsr	SingleObjLoad
		bne.s	locret_3DFF6
		_move.b	#$58,0(a1) ; 'X'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	(RandomNumber).l
		move.w	d0,d1
		moveq	#0,d1
		move.b	d0,d1
		lsr.b	#2,d1
		subi.w	#$30,d1	; '0'
		add.w	d1,8(a1)
		lsr.w	#8,d0
		lsr.b	#2,d0
		subi.w	#$30,d0	; '0'
		add.w	d0,$C(a1)

locret_3DFF6:				
		rts	
; ===========================================================================

loc_3DFF8:				
		tst.b	$21(a0)
		beq.s	loc_3E05A
		tst.b	$2A(a0)
		bne.s	loc_3E02E

loc_3E004:
		tst.b	$20(a0)
		beq.s	loc_3E01E
		movea.w	$36(a0),a1

loc_3E00E:
		tst.b	$20(a1)
		bne.s	locret_3E058
		clr.b	$20(a0)
		subq.b	#1,$21(a0)
		beq.s	loc_3E05A

loc_3E01E:				
		move.b	#$3C,$2A(a0) ; '<'
		move.w	#$AC,d0	
		jsr	(PlaySound).l

loc_3E02E:				
		lea	($FFFFFB22).w,a1
		moveq	#0,d0
		tst.w	(a1)
		bne.s	loc_3E03C
		move.w	#$EEE,d0

loc_3E03C:				
		move.w	d0,(a1)
		subq.b	#1,$2A(a0)
		bne.s	locret_3E058
		clr.w	($FFFFFB22).w
		move.b	#$16,$20(a0)
		movea.w	$36(a0),a1
		move.b	#$2A,$20(a1) ; '*'

locret_3E058:				
		rts	
; ===========================================================================

loc_3E05A:				
		moveq	#$64,d0	; 'd'
		bsr.w	sub_40D06
		clr.b	$1E(a0)
		move.b	#$E,$25(a0)
		bset	#7,$22(a0)
		clr.b	$1C(a0)
		clr.b	$20(a0)
		clr.w	$10(a0)
		clr.w	$12(a0)
		bsr.w	loc_3E11E
		bsr.w	loc_3E094
		movea.w	$38(a0),a1
		bsr.w	loc_3EA5A
		addq.w	#4,sp
		rts	
; ===========================================================================

loc_3E094:				
		lea	(byte_3E0E6).l,a1
		lea	(word_3E0C6)(pc),a2
		moveq	#0,d0
		moveq	#7,d6

loc_3E0A2:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a3
		move.b	#$1E,$24(a3)
		clr.b	$25(a3)
		move.w	#$80,$2A(a3)
		move.w	(a2)+,$10(a3)
		move.w	(a2)+,$12(a3)
		dbf	d6,loc_3E0A2
		rts	
; ===========================================================================
word_3E0C6:	dc.w  $200,$FC00	; 0 
		dc.w $FF00,$FF00	; 2
		dc.w  $300,$FD00	; 4
		dc.w $FF00,$FC00	; 6
		dc.w  $180,$FE00	; 8
		dc.w $FE00,$FD00	; 10
		dc.w	 0,$FC00	; 12
		dc.w  $100,$FD00	; 14
byte_3E0E6:	dc.b $2C		; 0 
		dc.b $2E		; 1
		dc.b $30		; 2
		dc.b $32		; 3
		dc.b $34		; 4
		dc.b $3A		; 5
		dc.b $3C		; 6
		dc.b $3E		; 7
; ===========================================================================

loc_3E0EE:				
		lea	(byte_3E114)(pc),a1
		lea	(byte_3E10A)(pc),a2
		moveq	#0,d0
		moveq	#9,d6

loc_3E0FA:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a3
		move.b	(a2)+,$20(a3)

loc_3E104:
		dbf	d6,loc_3E0FA
		rts	
; ===========================================================================
byte_3E10A:	dc.b   0		; 0 
		dc.b $8F		; 1
		dc.b $9C		; 2
		dc.b   0		; 3
		dc.b $86		; 4
		dc.b $2A		; 5
		dc.b $8B		; 6
		dc.b $8F		; 7
		dc.b $9C		; 8
		dc.b $8B		; 9
byte_3E114:	dc.b $2C		; 0 
		dc.b $2E		; 1
		dc.b $30		; 2
		dc.b $32		; 3
		dc.b $34		; 4
		dc.b $36		; 5
		dc.b $38		; 6
		dc.b $3A		; 7
		dc.b $3C		; 8
		dc.b $3E		; 9
; ===========================================================================

loc_3E11E:				
		lea	(byte_3E114)(pc),a1
		moveq	#0,d0
		moveq	#9,d6

loc_3E126:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a3
		clr.b	$20(a3)
		dbf	d6,loc_3E126
		rts	
; ===========================================================================

loc_3E136:				
		lea	(word_3E160)(pc),a3
		moveq	#1,d6

loc_3E13C:				
		lea	(byte_3E58C).l,a2
		bsr.w	loc_367D0
		move.w	(a3)+,d0
		btst	#0,1(a0)
		beq.s	loc_3E152
		neg.w	d0

loc_3E152:				
		move.w	d0,$10(a1)
		move.w	(a3)+,$12(a1)
		dbf	d6,loc_3E13C
		rts	
; ===========================================================================
word_3E160:	dc.w   $60,$F800	; 0 
		dc.w   $C0,$F600	; 2
; ===========================================================================

loc_3E168:				
		move.b	1(a0),d0
		andi.b	#1,d0
		moveq	#0,d1
		lea	(byte_3E19E)(pc),a1

loc_3E176:				
		move.b	(a1)+,d1
		beq.w	locret_37A48
		movea.w	(a0,d1.w),a2
		move.b	1(a2),d2
		andi.b	#-2,d2
		or.b	d0,d2
		move.b	d2,1(a2)
		move.b	$22(a2),d2
		andi.b	#-2,d2
		or.b	d0,d2
		move.b	d2,$22(a2)
		bra.s	loc_3E176
; ===========================================================================
byte_3E19E:	dc.b $2C		; 0 
		dc.b $2E		; 1
		dc.b $30		; 2
		dc.b $32		; 3
		dc.b $34		; 4
		dc.b $36		; 5
		dc.b $38		; 6
		dc.b $3A		; 7
		dc.b $3C		; 8
		dc.b $3E		; 9
		dc.b   0		; 10
		dc.b   0		; 11
; ===========================================================================

loc_3E1AA:				
		movea.l	(a1)+,a2
		moveq	#0,d0
		move.b	$1B(a0),d0
		move.b	(a1,d0.w),d0
		move.b	d0,d1
		moveq	#0,d4
		andi.w	#$C0,d1	
		beq.s	loc_3E1C4
		bsr.w	loc_3E23E

loc_3E1C4:				
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.b	(a2)+,d0
		move.b	(a2)+,d3
		move.b	$1F(a0),d2
		addq.b	#1,d2
		cmp.b	d3,d2
		bcs.s	loc_3E1DE
		addq.b	#1,$1B(a0)
		moveq	#0,d2

loc_3E1DE:				
		move.b	d2,$1F(a0)
		moveq	#0,d5

loc_3E1E4:				
		move.b	(a2)+,d5
		movea.w	(a0,d5.w),a3
		tst.w	d5
		bne.s	loc_3E1F0
		movea.l	a0,a3

loc_3E1F0:				
		move.l	8(a3),d2
		move.b	(a2)+,d1
		ext.w	d1
		asl.w	#4,d1
		btst	#0,1(a0)

loc_3E200:
		beq.s	loc_3E204
		neg.w	d1

loc_3E204:				
		tst.w	d4
		beq.s	loc_3E20A

loc_3E208:
		neg.w	d1

loc_3E20A:				
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d2
		move.l	d2,8(a3)
		move.l	$C(a3),d3
		move.b	(a2)+,d1
		ext.w	d1
		asl.w	#4,d1
		tst.w	d4
		beq.s	loc_3E224
		neg.w	d1

loc_3E224:				
		ext.l	d1
		asl.l	#8,d1
		add.l	d1,d3
		move.l	d3,$C(a3)
		dbf	d0,loc_3E1E4
		moveq	#0,d1
		rts	
; ===========================================================================

loc_3E236:				
		clr.b	$1B(a0)
		moveq	#1,d1

locret_3E23C:				
		rts	
; ===========================================================================

loc_3E23E:				
		andi.b	#$3F,d0	; '?'
		rol.b	#3,d1
		move.w	loc_3E248+2(pc,d1.w),d1

loc_3E248:
		jmp	off_3E24C(pc,d1.w)
; ===========================================================================
off_3E24C:	dc.w loc_3E252-off_3E24C; 0 
		dc.w loc_3E27A-off_3E24C; 1
		dc.w loc_3E27E-off_3E24C; 2
; ===========================================================================

loc_3E252:				
		tst.b	$1F(a0)
		bne.s	locret_3E23C
		move.b	$1B(a0),d1
		addq.b	#1,d1
		move.b	(a1,d1.w),d0
		bsr.w	loc_3EA60
		addq.b	#1,d1
		move.b	d1,$1B(a0)
		move.b	(a1,d1.w),d0
		move.b	d0,d1
		andi.b	#-$40,d1
		bne.s	loc_3E23E
		rts	
; ===========================================================================

loc_3E27A:				
		moveq	#1,d4
		rts	
; ===========================================================================

loc_3E27E:				
		addq.w	#4,sp
		bra.s	loc_3E236
; ===========================================================================

loc_3E282:				
		movea.w	$2C(a0),a2
		move.w	8(a2),d0
		move.w	(a1)+,d1
		btst	#0,1(a2)
		beq.s	loc_3E296
		neg.w	d1

loc_3E296:				
		add.w	d1,d0
		move.w	d0,8(a0)
		move.w	$C(a2),d0
		add.w	(a1)+,d0
		move.w	d0,$C(a0)
		rts	
; ===========================================================================

loc_3E2A8:				
		moveq	#0,d0
		moveq	#0,d6
		move.b	(a1)+,d6

loc_3E2AE:				
		move.b	(a1)+,d0
		movea.w	(a0,d0.w),a2
		move.w	8(a0),d1
		move.b	(a1)+,d2
		ext.w	d2
		btst	#0,1(a0)
		beq.s	loc_3E2C6
		neg.w	d2

loc_3E2C6:				
		add.w	d2,d1
		move.w	d1,8(a2)
		move.w	$C(a0),d1
		move.b	(a1)+,d2
		ext.w	d2
		add.w	d2,d1
		move.w	d1,$C(a2)
		dbf	d6,loc_3E2AE
		rts	
; ===========================================================================
byte_3E2E0:	dc.b   6		; 0 
		dc.b $2E		; 1
		dc.b $FC		; 2
		dc.b $3C		; 3
		dc.b $30		; 4
		dc.b $F4		; 5
		dc.b   8		; 6
		dc.b $32		; 7
		dc.b  $C		; 8
		dc.b $F8		; 9
		dc.b $34		; 10
		dc.b   4		; 11
		dc.b $24		; 12
		dc.b $3A		; 13
		dc.b $FC		; 14
		dc.b $3C		; 15
		dc.b $3C		; 16
		dc.b $F4		; 17
		dc.b   8		; 18
		dc.b $3E		; 19
		dc.b   4		; 20
		dc.b $24		; 21
off_3E2F6:	dc.l Map_3E318	; 0 
		dc.w 1
		dc.w $203
		dc.w $FF00
off_3E300:	dc.l Map_3E318	; 0 
		dc.w $506
		dc.w $708
		dc.w $FF00
off_3E30A:	dc.l Map_3E318	; 0 
		dc.w 1
		dc.w $203
		dc.w $405
		dc.w $607
		dc.w $8C0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3E318:				
		dc.w byte_3E32A-Map_3E318; 0
		dc.w byte_3E33E-Map_3E318; 1
		dc.w byte_3E352-Map_3E318; 2
		dc.w byte_3E366-Map_3E318; 3
		dc.w byte_3E37A-Map_3E318; 4
		dc.w byte_3E380-Map_3E318; 5
		dc.w byte_3E394-Map_3E318; 6
		dc.w byte_3E3A8-Map_3E318; 7
		dc.w byte_3E3BC-Map_3E318; 8
byte_3E32A:	dc.b   5,  8,  0,$E0, $C,$30,$E0, $C,$32,$E0, $C,$3C,$E0, $C,$34,$F8; 0
					
		dc.b   4,$3E,$F8,  4	; 16
byte_3E33E:	dc.b   5,  8,  0,$EC,$14,$30,$EC,$14,$32,$EC,$14,$3C,$EC,$14,$34,$FA; 0
					
		dc.b   6,$3E,$FA,  6	; 16
byte_3E352:	dc.b   5,  8,  0,$F8,$14,$30,$F8,$14,$32,$F8,$14,$3C,$F8,$14,$34,$FE; 0
					
		dc.b   4,$3E,$FE,  4	; 16
byte_3E366:	dc.b   5,  8,  0,$FC, $C,$30,$FC, $C,$32,$FC, $C,$3C,$FC, $C,$34,  0; 0
					
		dc.b   2,$3E,  0,  2	; 16
byte_3E37A:	dc.b   0,  8,  0,  0,  0,  0; 0	
byte_3E380:	dc.b   5,  8,  0,  4,$E8,$30,  4,$E8,$32,  4,$E8,$3C,  4,$E8,$34,  2; 0
					
		dc.b $FA,$3E,  2,$FA	; 16
byte_3E394:	dc.b   5,  8,  0, $C,$E8,$30, $C,$E8,$32, $C,$E8,$3C, $C,$E8,$34,  4; 0
					
		dc.b $FC,$3E,  4,$FC	; 16
byte_3E3A8:	dc.b   5,  8,  0,$18,$F4,$30,$18,$F4,$32,$18,$F4,$3C,$18,$F4,$34,  4; 0
					
		dc.b $FC,$3E,  4,$FC	; 16
byte_3E3BC:	dc.b   5,  8,  0,$18,$FC,$30,$18,$FC,$32,$18,$FC,$3C,$18,$FC,$34,  6; 0
					
		dc.b $FE,$3E,  6,$FE	; 16
off_3E3D0:	dc.l Map_3E3D8	; 0 
		dc.w 1
		dc.w $2C0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3E3D8:				
		dc.w byte_3E3DE-Map_3E3D8; 0
		dc.w byte_3E3F2-Map_3E3D8; 1
		dc.w byte_3E3F8-Map_3E3D8; 2
byte_3E3DE:	dc.b   5,$10,  0,  0,  4,$30,  0,  4,$32,  0,  4,$3C,  0,  4,$34,  0; 0
					
		dc.b   4,$3E,  0,  4	; 16
byte_3E3F2:	dc.b   0,$10,  0,  0,  0,  0; 0	
byte_3E3F8:	dc.b   5,  8,  0,  0,$F8,$30,  0,$F8,$32,  0,$F8,$3C,  0,$F8,$34,  0; 0
					
		dc.b $F8,$3E,  0,$F8	; 16
off_3E40C:	dc.l Map_3E438	; 0 
		dc.b   0,  1,  2,  3,$40,$BD,  4,  5,  6,  7,  8,$40,$BD,  9, $A,  1; 0
		dc.b   2,  3,$40,$BD,  4,  5,  6,  7,  8,$40,$BD,$C0; 16
off_3E42C:	dc.l Map_3E438	; 0 
		dc.w $8887
		dc.w $8685
		dc.w $B40
		dc.w $BDC0
; -----------------------------------------------------------------------------
; Unknown sprite mappings
; -----------------------------------------------------------------------------
Map_3E438:				
		dc.w byte_3E450-Map_3E438; 0
		dc.w byte_3E468-Map_3E438; 1
		dc.w byte_3E480-Map_3E438; 2
		dc.w byte_3E494-Map_3E438; 3
		dc.w byte_3E4AC-Map_3E438; 4
		dc.w byte_3E4C4-Map_3E438; 5
		dc.w byte_3E4D6-Map_3E438; 6
		dc.w byte_3E4EE-Map_3E438; 7
		dc.w byte_3E502-Map_3E438; 8
		dc.w byte_3E51A-Map_3E438; 9
		dc.w byte_3E532-Map_3E438; 10
		dc.w byte_3E544-Map_3E438; 11
byte_3E450:	dc.b   6,$20,$34,$F8,$F8,$2E,$F8,$F8,  0,  0,$FC,$30,  4,$FB,$32,  3; 0
					
		dc.b $FB,$3C,$FC,$FB,$3E,  0,$FE,  0; 16
byte_3E468:	dc.b   6,$10,$34,$F0,$FC,$2E,$F0,$FC,  0,$F0,$FC,$30,$F4,$FB,$32,$F3; 0
					
		dc.b $FB,$3C,$EC,$FB,$3E,$F8,  0,  0; 16
byte_3E480:	dc.b   5,$10,$34,$F8,  4,$2E,$F8,  4,  0,$F8,  4,$30,$FC,  3,$32,$FB; 0
					
		dc.b   3,$3C,$F4,  3	; 16
byte_3E494:	dc.b   6,$10,$34,$FC,$10,$2E,$F8,$10,  0,  0,  8,$30,$F8, $A,$32,$FA; 0
					
		dc.b  $A,$3C,  8, $A,$3E,  0,  8,  0; 16
byte_3E4AC:	dc.b   6,$20,$34,$FE,$FE,  0,$F4,$FC,$30,$F0,$FD,$32,$F1,$FD,$3C,$F8; 0
					
		dc.b $FD,$3E,$EC,$FA,$3A,$E8,$FC,  0; 16
byte_3E4C4:	dc.b   4,$20,$3E,$F8,$FC,$3A,$F8,$FC,$30,$FC,$FF,$32,$FD,$FF,$3C,  4; 0
					
		dc.b $FF,  0		; 16
byte_3E4D6:	dc.b   6,$10,$3E,$F0,$FC,$3A,$F0,$FC,  0,$F0,$FC,$30,$EC,$FB,$32,$ED; 0
					
		dc.b $FB,$3C,$F4,$FB,$34,$F8,  0,  0; 16
byte_3E4EE:	dc.b   5,$10,$3E,$F8,  4,$3A,$F8,  4,  0,$F8,  4,$30,$F4,  3,$32,$F5; 0
					
		dc.b   3,$3C,$FC,  3	; 16
byte_3E502:	dc.b   6,$10,$3E,$FC,$10,$3A,$F8,$10,  0,  0,  8,$30,  8, $A,$32,  6; 0
					
		dc.b  $A,$3C,$F8, $A,$34,  0,  8,  0; 16
byte_3E51A:	dc.b   6,$20,$3E,$FE,$FE,  0,$F4,$FC,$30,$F8,$FD,$32,$F7,$FD,$3C,$F1; 0
					
		dc.b $FD,$34,$EC,$FA,$2E,$E8,$FC,  0; 16
byte_3E532:	dc.b   4,$20,$34,$F8,$FC,$2E,$F8,$FC,$30,  4,$FF,$32,  3,$FF,$3C,$FC; 0
					
		dc.b $FF,  0		; 16
byte_3E544:	dc.b   6,$10,$3E,  0,  8,$3A,  0,  8,  0,  0,  8,$30,  0,  8,$32,  0; 0
					
		dc.b   8,$3C,  0,  8,$34,  0,  8,  0; 16
byte_3E55C:	dc.b   0		; 0 
		dc.b $2C		; 1
		dc.b $C7		; 2
		dc.b   4		; 3
byte_3E560:	dc.b   0		; 0 
		dc.b $2E		; 1
		dc.b $C7		; 2
		dc.b   6		; 3
byte_3E564:	dc.b   0		; 0 
		dc.b $30		; 1
		dc.b $C7		; 2
		dc.b   8		; 3
byte_3E568:	dc.b   0		; 0 
		dc.b $32		; 1
		dc.b $C7		; 2
		dc.b  $A		; 3
byte_3E56C:	dc.b   0		; 0 
		dc.b $34		; 1
		dc.b $C7		; 2
		dc.b  $C		; 3
byte_3E570:	dc.b   0		; 0 
		dc.b $36		; 1
		dc.b $C7		; 2
		dc.b  $E		; 3
byte_3E574:	dc.b   0		; 0 
		dc.b $38		; 1
		dc.b $C7		; 2
		dc.b $10		; 3
byte_3E578:	dc.b   0		; 0 
		dc.b $3A		; 1
		dc.b $C7		; 2
		dc.b $12		; 3
byte_3E57C:	dc.b   0		; 0 
		dc.b $3C		; 1
		dc.b $C7		; 2
		dc.b $14		; 3
byte_3E580:	dc.b   0		; 0 
		dc.b $3E		; 1
		dc.b $C7		; 2
		dc.b $16		; 3
byte_3E584:	dc.b   0		; 0 
		dc.b $10		; 1
		dc.b $C7		; 2
		dc.b $18		; 3
byte_3E588:	dc.b   0		; 0 
		dc.b $10		; 1
		dc.b $C7		; 2
		dc.b $1A		; 3
byte_3E58C:	dc.b   0		; 0 
		dc.b $10		; 1
		dc.b $C7		; 2
		dc.b $1C		; 3
off_3E590:	dc.l Art_3E5F8	; 0 
		dc.w $330
		dc.w $404
		dc.w $3800
off_3E59A:	dc.w byte_3E59C-off_3E59A 
byte_3E59C:	dc.b   7,$15,$15,$15,$15,$15,$15,$15,$15,  0,  1,  2,$FA,  0; 0
					
off_3E5AA:	dc.w byte_3E5B2-off_3E5AA; 0 
		dc.w byte_3E5B6-off_3E5AA; 1
		dc.w byte_3E5D0-off_3E5AA; 2
		dc.w byte_3E5EA-off_3E5AA; 3
byte_3E5B2:	dc.b   1, $C, $D,$FF	; 0 
byte_3E5B6:	dc.b   1, $C, $D, $C, $C, $D, $D, $C, $C, $C, $D, $D, $D, $C, $C, $C; 0
					
		dc.b  $C, $C, $D, $D, $D, $D, $D, $D,$FA,  0; 16
byte_3E5D0:	dc.b   1, $D, $D, $D, $D, $D, $D, $C, $C, $C, $C, $C, $D, $D, $D, $C; 0
					
		dc.b  $C, $C, $D, $D, $C, $C, $D, $C,$FD,  0; 16
byte_3E5EA:	dc.b   0, $D,$15,$FF	; 0 
off_3E5EE:	dc.w byte_3E5F0-off_3E5EE 
byte_3E5F0:	dc.b   3,$13,$12,$11,$10,$16,$FF,  0; 0	
; ------------------------------------------------------------------------------
; Unknown sprite mappings
; ------------------------------------------------------------------------------
Art_3E5F8:				
		dc.w word_3E626-Art_3E5F8; 0
		dc.w word_3E630-Art_3E5F8; 1
		dc.w word_3E64A-Art_3E5F8; 2
		dc.w word_3E664-Art_3E5F8; 3
		dc.w word_3E6B6-Art_3E5F8; 4
		dc.w word_3E6C0-Art_3E5F8; 5
		dc.w word_3E6CA-Art_3E5F8; 6
		dc.w word_3E6DC-Art_3E5F8; 7
		dc.w word_3E6DC-Art_3E5F8; 8
		dc.w word_3E6DC-Art_3E5F8; 9
		dc.w word_3E6DC-Art_3E5F8; 10
		dc.w word_3E6E6-Art_3E5F8; 11
		dc.w word_3E718-Art_3E5F8; 12
		dc.w word_3E722-Art_3E5F8; 13
		dc.w word_3E72C-Art_3E5F8; 14
		dc.w word_3E736-Art_3E5F8; 15
		dc.w word_3E740-Art_3E5F8; 16
		dc.w word_3E782-Art_3E5F8; 17
		dc.w word_3E7C4-Art_3E5F8; 18
		dc.w word_3E806-Art_3E5F8; 19
		dc.w word_3E848-Art_3E5F8; 20
		dc.w word_3E852-Art_3E5F8; 21
		dc.w word_3E85C-Art_3E5F8; 22
word_3E626:	dc.w 1			
		dc.w $F00B,    0,    0,	  $C; 0
word_3E630:	dc.w 3			
		dc.w $F00D,   $C,    6,$FFEC; 0
		dc.w	 9,  $14,   $A,$FFF4; 4
		dc.w $F80A,  $1A,   $D,	  $C; 8
word_3E64A:	dc.w 3			
		dc.w  $800,  $23,  $11,$FFDC; 0
		dc.w $F80E,  $24,  $12,$FFE4; 4
		dc.w $F80E,  $30,  $18,	   4; 8
word_3E664:	dc.w $A			
		dc.w $DC0F,$203C,$201E,$FFD4; 0
		dc.w $DC0F,$204C,$2026,$FFF4; 4
		dc.w $DC0B,$205C,$202E,	 $14; 8
		dc.w $DC0B,$2068,$2034,	 $2C; 12
		dc.w $FC0F,$2074,$203A,$FFD4; 16
		dc.w $FC0F,$2084,$2042,$FFF4; 20
		dc.w $FC0B,$2094,$204A,	 $14; 24
		dc.w $FC09,$20A0,$2050,	 $2C; 28
		dc.w $1C0C,$20A6,$2053,$FFE4; 32
		dc.w $1C0C,$20AA,$2055,	   4; 36
word_3E6B6:	dc.w 1			
		dc.w $F00F,$20AE,$2057,$FFF0; 0
word_3E6C0:	dc.w 1			
		dc.w $F40A,$20BE,$205F,$FFF4; 0
word_3E6CA:	dc.w 2			
		dc.w $F40E,$20C7,$2063,	   0; 0
		dc.w $F40E,$20D3,$2069,$FFE0; 4
word_3E6DC:	dc.w 1			
		dc.w $F00F,$20E2,$2071,$FFF0; 0
word_3E6E6:	dc.w 6			
word_3E6E8:	dc.w $E006,$20F2,$2079,$FFEB; 0
		dc.w $E809,$20F8,$207C,$FFFB; 4
		dc.w $F806,$20FE,$207F,$FFEE; 8
		dc.w $100D,$2104,$2082,$FFE0; 12
		dc.w $F80E,$210C,$2086,$FFFE; 16
		dc.w $100D,$2118,$208C,	   0; 20
word_3E718:	dc.w 1			
		dc.w $F406,$2120,$2090,$FFF8; 0
word_3E722:	dc.w 1			
		dc.w $F405,$2126,$2093,$FFF8; 0
word_3E72C:	dc.w 1			
		dc.w $F00F, $12B,  $95,$FFF0; 0
word_3E736:	dc.w 1			
		dc.w $FC00, $13B,  $9D,$FFFC; 0
word_3E740:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0; 0
		dc.w $F005,$293C,$289E,	   0; 4
		dc.w	 5,$313C,$309E,$FFF0; 8
		dc.w	 5,$393C,$389E,	   0; 12
		dc.w $E000,$2144,$20A2,$FFE0; 16
		dc.w $E000,$2944,$28A2,	 $18; 20
		dc.w $1800,$3144,$30A2,$FFE0; 24
		dc.w $1800,$3944,$38A2,	 $18; 28
word_3E782:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0; 0
		dc.w $F005,$293C,$289E,	   0; 4
		dc.w	 5,$313C,$309E,$FFF0; 8
		dc.w	 5,$393C,$389E,	   0; 12
		dc.w $D800,$2145,$20A2,$FFD8; 16
		dc.w $D800,$2945,$28A2,	 $20; 20
		dc.w $2000,$3145,$30A2,$FFD8; 24
		dc.w $2000,$3945,$38A2,	 $20; 28
word_3E7C4:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0; 0
		dc.w $F005,$293C,$289E,	   0; 4
		dc.w	 5,$313C,$309E,$FFF0; 8
		dc.w	 5,$393C,$389E,	   0; 12
		dc.w $D000,$2146,$20A3,$FFD0; 16
		dc.w $D000,$2946,$28A3,	 $28; 20
		dc.w $2800,$3146,$30A3,$FFD0; 24
		dc.w $2800,$3946,$38A3,	 $28; 28
word_3E806:	dc.w 8			
word_3E808:	dc.w $F005,$213C,$209E,$FFF0; 0
		dc.w $F005,$293C,$289E,	   0; 4
		dc.w	 5,$313C,$309E,$FFF0; 8
		dc.w	 5,$393C,$389E,	   0; 12
		dc.w $C800,$212A,$2095,$FFC8; 16
		dc.w $C800,$292A,$2895,	 $30; 20
		dc.w $3000,$312A,$3095,$FFC8; 24
		dc.w $3000,$392A,$3895,	 $30; 28
word_3E848:	dc.w 1			
		dc.w $F805, $140,  $A0,$FFF8; 0
word_3E852:	dc.w 1			
		dc.w	 0,    4,    2,	   0; 0
word_3E85C:	dc.w 8			
		dc.w $F005,$213C,$209E,$FFF0; 0
		dc.w $F005,$293C,$289E,	   0; 4
		dc.w	 5,$313C,$309E,$FFF0; 8
		dc.w	 5,$393C,$389E,	   0; 12
		dc.w $E800,$2144,$20A2,$FFE8; 16
		dc.w $E800,$2944,$28A2,	 $10; 20
		dc.w $1000,$3144,$30A2,$FFE8; 24
		dc.w $1000,$3944,$38A2,	 $10; 28
; ===========================================================================

loc_3E89E:				
		move.w	d1,d2
		andi.w	#1,d2
		addq.w	#1,d2
		lsl.w	#6,d2
		swap	d2
		move.w	d1,d3
		lsr.w	#1,d3
		addq.w	#1,d3
		lsl.w	#6,d3
		swap	d3
		bsr.w	loc_3E8CA
		btst	#1,d0
		beq.w	locret_37A48
		btst	#1,d1
		bne.s	loc_3E8C8
		movea.l	a3,a5

loc_3E8C8:				
		movea.l	a5,a2

loc_3E8CA:				
		movea.l	a2,a4
		swap	d2
		lea	(a2,d2.w),a3
		swap	d2
		move.w	d1,d5
		andi.w	#1,d5
		bsr.w	loc_3E944
		btst	#1,d1
		beq.s	loc_3E906
		swap	d2
		move.w	d2,d4
		swap	d2
		add.w	d4,d4
		move.w	d0,d3
		andi.w	#1,d3
		lsl.w	d3,d4
		adda.w	d4,a4
		move.w	d1,d5
		lsr.w	#1,d5
		swap	d3
		lea	(a4,d3.w),a5

loc_3E900:
		swap	d3
		bsr.w	loc_3E95C

loc_3E906:				
		btst	#0,d0

loc_3E90A:
		bne.s	loc_3E912
		btst	#1,d0
		beq.s	locret_3E942

loc_3E912:				
		swap	d2
		lea	(a2,d2.w),a2
		lea	(a2,d2.w),a3
		swap	d2
		move.w	d1,d5
		andi.w	#1,d5
		bsr.w	loc_3E944
		btst	#1,d1
		beq.s	locret_3E942
		move.w	d1,d5
		lsr.w	#1,d5
		swap	d3
		lea	(a4,d3.w),a4
		lea	(a4,d3.w),a5
		swap	d3
		bsr.w	loc_3E95C

locret_3E942:				
		rts	
; ===========================================================================

loc_3E944:				
		moveq	#7,d6

loc_3E946:				
		bsr.w	loc_3E974
		addq.w	#4,a2
		bsr.w	loc_3E99E
		addq.w	#4,a3
		dbf	d6,loc_3E946
		dbf	d5,loc_3E944
		rts	
; ===========================================================================

loc_3E95C:				
		moveq	#7,d6

loc_3E95E:				
		bsr.w	loc_3E9C8
		addq.w	#4,a4
		bsr.w	loc_3E9F2
		addq.w	#4,a5
		dbf	d6,loc_3E95E
		dbf	d5,loc_3E95C
		rts	
; ===========================================================================

loc_3E974:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a2)+
		move.b	d4,3(a2)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a2)+
		move.b	d4,3(a2)
		rts	
; ===========================================================================

loc_3E99E:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a3)+
		move.b	d4,3(a3)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a3)+
		move.b	d4,3(a3)
		rts	
; ===========================================================================

loc_3E9C8:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a4)+
		move.b	d4,3(a4)
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a4)+
		move.b	d4,3(a4)
		rts	
; ===========================================================================

loc_3E9F2:				
		bsr.w	*+4
		move.b	(a1)+,d2
		move.b	d2,d3
		andi.b	#-$10,d2
		move.b	d2,d4
		lsr.b	#4,d4
		or.b	d2,d4
		move.b	d4,(a5)+
		move.b	d4,3(a5)

loc_3EA0A:
		andi.b	#$F,d3
		move.b	d3,d4
		lsl.b	#4,d4
		or.b	d3,d4
		move.b	d4,(a5)+
		move.b	d4,3(a5)
		rts	
; ===========================================================================
		dc.b $12,$34,$56,$78	; 0
		dc.b $12,$34,$56,$78	; 4
		dc.b $12,$34,$56,$78	; 8
		dc.b $12,$34,$56,$78	; 12
		dc.b $12,$34,$56,$78	; 16
		dc.b $12,$34,$56,$78	; 20
		dc.b $12,$34,$56,$78	; 24
		dc.b $12,$34,$56,$78	; 28
; ===========================================================================

loc_3EA3C:				
		jmp	DisplaySprite3
; ===========================================================================

loc_3EA42:				
		jmp	DisplaySprite
; ===========================================================================

loc_3EA48:				
		jmp	DeleteObject
; ===========================================================================

loc_3EA4E:				
		jmp	SingleObjLoad
; ===========================================================================

loc_3EA54:				
		jmp	MarkObjGone
; ===========================================================================

loc_3EA5A:				
		jmp	DeleteObject2
; ===========================================================================

loc_3EA60:				
		jmp	(PlaySound).l
; ===========================================================================

loc_3EA66:				
		jmp	SingleObjLoad2
; ===========================================================================

loc_3EA6C:				
		jmp	AnimateSprite
; ===========================================================================

loc_3EA72:				
		jmp	(PlaySoundLocal).l
; ===========================================================================

loc_3EA78:				
		jmp	(RandomNumber).l
; ===========================================================================

loc_3EA7E:				
		jmp	MarkObjGone_P1
; ===========================================================================

loc_3EA84:				
		jmp	(sub_25E0).l
; ===========================================================================

loc_3EA8A:				
		jmp	loc_1D1B2
; ===========================================================================

loc_3EA90:				
		jmp	loc_1B84E
; ===========================================================================

loc_3EA96:				
		jmp	MarkObjGone3
; ===========================================================================

loc_3EA9C:				
		jmp	Adjust2PArtPointer
; ===========================================================================

loc_3EAA2:				
		jmp	(PlayMusic).l
; ===========================================================================

loc_3EAA8:				
		jmp	loc_2D6CC
; ===========================================================================

loc_3EAAE:				
		jmp	DetectPlatform
; ===========================================================================

loc_3EAB4:				
		jmp	SolidObject
; ===========================================================================

loc_3EABA:				
		jmp	ObjectFall
; ===========================================================================

loc_3EAC0:				
		jmp	SpeedToPos
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Unknown
; ----------------------------------------------------------------------------

Sprite_3EAC8:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3EAD6(pc,d0.w),d1
		jmp	off_3EAD6(pc,d1.w)
; ===========================================================================
off_3EAD6:	dc.w loc_3EADA-off_3EAD6; 0 
		dc.w loc_3EB48-off_3EAD6; 1
; ===========================================================================

loc_3EADA:				
		addq.b	#2,$24(a0)
		move.w	#$120,8(a0)
		move.w	#$F0,$A(a0)
		move.l	#Map_3EB4E,4(a0)
		move.w	#$5A0,2(a0)
		bsr.w	loc_3F1DC
		move.w	(v_s1_ending_demo_num).w,d0
		move.b	d0,$1A(a0)

loc_3EB04:
		move.b	#0,1(a0)

loc_3EB0A:
		move.b	#0,$18(a0)
		cmpi.b	#4,(v_gamemode).w
		bne.s	loc_3EB48
		move.w	#$300,2(a0)
		bsr.w	loc_3F1DC
		move.b	#$A,$1A(a0)
		tst.b	(f_s1_credits_cheat).w
		beq.s	loc_3EB48
		cmpi.b	#$72,(v_joypad_hold_actual).w ; 'r'
		bne.s	loc_3EB48
		move.w	#$EEE,($FFFFFBC0).w
		move.w	#$880,($FFFFFBC2).w
		jmp	DeleteObject
; ===========================================================================

loc_3EB48:				
		jmp	DisplaySprite
; ===========================================================================
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3EB4E:				
		dc.w word_3EB64-Map_3EB4E; 0
		dc.w word_3EBD6-Map_3EB4E; 1
		dc.w word_3EC58-Map_3EB4E; 2
		dc.w word_3ECAA-Map_3EB4E; 3
		dc.w word_3ED6C-Map_3EB4E; 4
		dc.w word_3EE0E-Map_3EB4E; 5
		dc.w word_3EEE0-Map_3EB4E; 6
		dc.w word_3EF9A-Map_3EB4E; 7
		dc.w word_3F094-Map_3EB4E; 8
		dc.w word_3F10E-Map_3EB4E; 9
		dc.w word_3F150-Map_3EB4E; 10
word_3EB64:	dc.w $E			
		dc.w $F805,  $2E,  $17,$FF88; 0
		dc.w $F805,  $26,  $13,$FF98; 4
		dc.w $F805,  $1A,   $D,$FFA8; 8
		dc.w $F801,  $46,  $23,$FFB8; 12
		dc.w $F805,  $1E,   $F,$FFC0; 16
		dc.w $F805,  $3E,  $1F,$FFD8; 20
		dc.w $F805,   $E,    7,$FFE8; 24
		dc.w $F805,    4,    2,$FFF8; 28
		dc.w $F809,    8,    4,	   8; 32
		dc.w $F805,  $2E,  $17,	 $28; 36
		dc.w $F805,  $3E,  $1F,	 $38; 40
		dc.w $F805,    4,    2,	 $48; 44
		dc.w $F805,  $5C,  $2E,	 $58; 48
		dc.w $F805,  $5C,  $2E,	 $68; 52
word_3EBD6:	dc.w $10		
word_3EBD8:	dc.w $D805,    0,    0,$FF80; 0
		dc.w $D805,    4,    2,$FF90; 4
		dc.w $D809,    8,    4,$FFA0; 8
		dc.w $D805,   $E,    7,$FFB4; 12
		dc.w $D805,  $12,    9,$FFD0; 16
		dc.w $D805,  $16,   $B,$FFE0; 20
		dc.w $D805,    4,    2,$FFF0; 24
		dc.w $D805,  $1A,   $D,	   0; 28
		dc.w  $805,  $1E,   $F,$FFC8; 32
		dc.w  $805,    4,    2,$FFD8; 36
		dc.w  $805,  $22,  $11,$FFE8; 40
		dc.w  $805,  $26,  $13,$FFF8; 44
		dc.w  $805,  $16,   $B,	   8; 48
		dc.w  $805,  $2A,  $15,	 $20; 52
		dc.w  $805,    4,    2,	 $30; 56
		dc.w  $805,  $2E,  $17,	 $44; 60
word_3EC58:	dc.w $A			
		dc.w $D805,  $12,    9,$FF80; 0
		dc.w $D805,  $22,  $11,$FF90; 4
		dc.w $D805,  $26,  $13,$FFA0; 8
		dc.w $D805,    0,    0,$FFB0; 12
		dc.w $D805,  $22,  $11,$FFC0; 16
		dc.w $D805,    4,    2,$FFD0; 20
		dc.w $D809,    8,    4,$FFE0; 24
		dc.w  $805,  $2A,  $15,$FFE8; 28
		dc.w  $805,  $32,  $19,$FFF8; 32
		dc.w  $805,  $36,  $1B,	   8; 36
word_3ECAA:	dc.w $18		
word_3ECAC:	dc.w $D805,  $1E,   $F,$FF88; 0
		dc.w $D805,  $3A,  $1D,$FF98; 4
		dc.w $D805,    4,    2,$FFA8; 8
		dc.w $D805,  $22,  $11,$FFB8; 12
		dc.w $D805,    4,    2,$FFC8; 16
		dc.w $D805,  $1E,   $F,$FFD8; 20
		dc.w $D805,  $3E,  $1F,$FFE8; 24
		dc.w $D805,   $E,    7,$FFF8; 28
		dc.w $D805,  $22,  $11,	   8; 32
		dc.w $D805,  $42,  $21,	 $20; 36
		dc.w $D805,   $E,    7,	 $30; 40
		dc.w $D805,  $2E,  $17,	 $40; 44
		dc.w $D801,  $46,  $23,	 $50; 48
		dc.w $D805,    0,    0,	 $58; 52
		dc.w $D805,  $1A,   $D,	 $68; 56
		dc.w  $805,  $48,  $24,$FFC0; 60
		dc.w  $801,  $46,  $23,$FFD0; 64
		dc.w  $805,    0,    0,$FFD8; 68
		dc.w  $801,  $46,  $23,$FFE8; 72
		dc.w  $805,  $2E,  $17,$FFF0; 76
		dc.w  $805,  $16,   $B,	   0; 80
		dc.w  $805,    4,    2,	 $10; 84
		dc.w  $805,  $1A,   $D,	 $20; 88
		dc.w  $805,  $42,  $21,	 $30; 92
word_3ED6C:	dc.w $14		
		dc.w $D005,  $42,  $21,$FFA0; 0
		dc.w $D005,   $E,    7,$FFB0; 4
		dc.w $D005,  $2E,  $17,$FFC0; 8
		dc.w $D001,  $46,  $23,$FFD0; 12
		dc.w $D005,    0,    0,$FFD8; 16
		dc.w $D005,  $1A,   $D,$FFE8; 20
		dc.w	 5,  $4C,  $26,$FFE8; 24
		dc.w	 1,  $46,  $23,$FFF8; 28
		dc.w	 5,  $1A,   $D,	   4; 32
		dc.w	 5,  $2A,  $15,	 $14; 36
		dc.w	 5,    4,    2,	 $24; 40
		dc.w $2005,  $12,    9,$FFD0; 44
		dc.w $2005,  $3A,  $1D,$FFE0; 48
		dc.w $2005,   $E,    7,$FFF0; 52
		dc.w $2005,  $1A,   $D,	   0; 56
		dc.w $2001,  $46,  $23,	 $10; 60
		dc.w $2005,  $50,  $28,	 $18; 64
		dc.w $2005,  $22,  $11,	 $30; 68
		dc.w $2001,  $46,  $23,	 $40; 72
		dc.w $2005,   $E,    7,	 $48; 76
word_3EE0E:	dc.w $1A		
		dc.w $D805,  $2E,  $17,$FF98; 0
		dc.w $D805,  $26,  $13,$FFA8; 4
		dc.w $D805,  $32,  $19,$FFB8; 8
		dc.w $D805,  $1A,   $D,$FFC8; 12
		dc.w $D805,  $54,  $2A,$FFD8; 16
		dc.w $D805,  $12,    9,$FFF8; 20
		dc.w $D805,  $22,  $11,	   8; 24
		dc.w $D805,  $26,  $13,	 $18; 28
		dc.w $D805,  $42,  $21,	 $28; 32
		dc.w $D805,  $32,  $19,	 $38; 36
		dc.w $D805,  $1E,   $F,	 $48; 40
		dc.w $D805,   $E,    7,	 $58; 44
		dc.w  $809,    8,    4,$FF88; 48
		dc.w  $805,    4,    2,$FF9C; 52
		dc.w  $805,  $2E,  $17,$FFAC; 56
		dc.w  $805,    4,    2,$FFBC; 60
		dc.w  $805,  $3E,  $1F,$FFCC; 64
		dc.w  $805,  $26,  $13,$FFDC; 68
		dc.w  $805,  $1A,   $D,$FFF8; 72
		dc.w  $805,    4,    2,	   8; 76
		dc.w  $805,  $58,  $2C,	 $18; 80
		dc.w  $805,    4,    2,	 $28; 84
		dc.w  $809,    8,    4,	 $38; 88
		dc.w  $805,  $32,  $19,	 $4C; 92
		dc.w  $805,  $22,  $11,	 $5C; 96
		dc.w  $805,    4,    2,	 $6C; 100
word_3EEE0:	dc.w $17		
		dc.w $D005,  $2E,  $17,$FF98; 0
		dc.w $D005,  $26,  $13,$FFA8; 4
		dc.w $D005,  $32,  $19,$FFB8; 8
		dc.w $D005,  $1A,   $D,$FFC8; 12
		dc.w $D005,  $54,  $2A,$FFD8; 16
		dc.w $D005,  $12,    9,$FFF8; 20
		dc.w $D005,  $22,  $11,	   8; 24
		dc.w $D005,  $26,  $13,	 $18; 28
		dc.w $D005,    0,    0,	 $28; 32
		dc.w $D005,  $22,  $11,	 $38; 36
		dc.w $D005,    4,    2,	 $48; 40
		dc.w $D009,    8,    4,	 $58; 44
		dc.w	 5,  $4C,  $26,$FFD0; 48
		dc.w	 1,  $46,  $23,$FFE0; 52
		dc.w	 9,    8,    4,$FFE8; 56
		dc.w	 1,  $46,  $23,$FFFC; 60
		dc.w	 5,  $3E,  $1F,	   4; 64
		dc.w	 5,    4,    2,	 $14; 68
		dc.w $2009,    8,    4,$FFD0; 72
		dc.w $2005,    4,    2,$FFE4; 76
		dc.w $2005,  $1E,   $F,$FFF4; 80
		dc.w $2005,  $58,  $2C,	   4; 84
		dc.w $2005,  $2A,  $15,	 $14; 88
word_3EF9A:	dc.w $1F		
word_3EF9C:	dc.w $D805,  $2E,  $17,$FF80; 0
		dc.w $D805,  $12,    9,$FF90; 4
		dc.w $D805,   $E,    7,$FFA0; 8
		dc.w $D805,  $1E,   $F,$FFB0; 12
		dc.w $D801,  $46,  $23,$FFC0; 16
		dc.w $D805,    4,    2,$FFC8; 20
		dc.w $D805,  $16,   $B,$FFD8; 24
		dc.w $D805,  $3E,  $1F,$FFF8; 28
		dc.w $D805,  $3A,  $1D,	   8; 32
		dc.w $D805,    4,    2,	 $18; 36
		dc.w $D805,  $1A,   $D,	 $28; 40
		dc.w $D805,  $58,  $2C,	 $38; 44
		dc.w $D805,  $2E,  $17,	 $48; 48
		dc.w	 5,  $5C,  $2E,$FFB0; 52
		dc.w	 5,  $32,  $19,$FFC0; 56
		dc.w	 5,  $4C,  $26,$FFD0; 60
		dc.w	 1,  $46,  $23,$FFE0; 64
		dc.w	 5,  $26,  $13,$FFE8; 68
		dc.w	 9,    8,    4,	   0; 72
		dc.w	 1,  $46,  $23,	 $14; 76
		dc.w	 5,  $1A,   $D,	 $1C; 80
		dc.w	 5,   $E,    7,	 $2C; 84
		dc.w	 5,    0,    0,	 $3C; 88
		dc.w	 1,  $46,  $23,	 $4C; 92
		dc.w	 5,  $2E,  $17,	 $54; 96
		dc.w	 5,  $3A,  $1D,	 $64; 100
		dc.w	 1,  $46,  $23,	 $74; 104
		dc.w $2005,  $12,    9,$FFF8; 108
		dc.w $2005,    4,    2,	   8; 112
		dc.w $2005,  $12,    9,	 $18; 116
		dc.w $2005,    4,    2,	 $28; 120
word_3F094:	dc.w $F			
		dc.w $F805,  $12,    9,$FF80; 0
		dc.w $F805,  $22,  $11,$FF90; 4
		dc.w $F805,   $E,    7,$FFA0; 8
		dc.w $F805,  $2E,  $17,$FFB0; 12
		dc.w $F805,   $E,    7,$FFC0; 16
		dc.w $F805,  $1A,   $D,$FFD0; 20
		dc.w $F805,  $3E,  $1F,$FFE0; 24
		dc.w $F805,   $E,    7,$FFF0; 28
		dc.w $F805,  $42,  $21,	   0; 32
		dc.w $F805,  $48,  $24,	 $18; 36
		dc.w $F805,  $2A,  $15,	 $28; 40
		dc.w $F805,  $2E,  $17,	 $40; 44
		dc.w $F805,   $E,    7,	 $50; 48
		dc.w $F805,    0,    0,	 $60; 52
		dc.w $F805,    4,    2,	 $70; 56
word_3F10E:	dc.w 8			
		dc.w $3005,  $3E,  $1F,$FFC0; 0
		dc.w $3005,  $22,  $11,$FFD0; 4
		dc.w $3005,  $2A,  $15,$FFE0; 8
		dc.w $3005,    4,    2,$FFF8; 12
		dc.w $3005,    0,    0,	   8; 16
		dc.w $3005,    4,    2,	 $18; 20
		dc.w $3001,  $46,  $23,	 $28; 24
		dc.w $3005,  $1A,   $D,	 $30; 28
word_3F150:	dc.w $11		
		dc.w $E805,  $2E,  $17,$FFB4; 0
		dc.w $E805,  $26,  $13,$FFC4; 4
		dc.w $E805,  $1A,   $D,$FFD4; 8
		dc.w $E801,  $46,  $23,$FFE4; 12
		dc.w $E805,  $1E,   $F,$FFEC; 16
		dc.w $E805,  $3E,  $1F,	   4; 20
		dc.w $E805,   $E,    7,	 $14; 24
		dc.w $E805,    4,    2,	 $24; 28
		dc.w $E809,    8,    4,	 $34; 32
		dc.w	 5,  $12,    9,$FFC0; 36
		dc.w	 5,  $22,  $11,$FFD0; 40
		dc.w	 5,   $E,    7,$FFE0; 44
		dc.w	 5,  $2E,  $17,$FFF0; 48
		dc.w	 5,   $E,    7,	   0; 52
		dc.w	 5,  $1A,   $D,	 $10; 56
		dc.w	 5,  $3E,  $1F,	 $20; 60
		dc.w	 5,  $2E,  $17,	 $30; 64
; ===========================================================================
		nop	

loc_3F1DC:				
		jmp	Adjust2PArtPointer
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================
; ----------------------------------------------------------------------------
; Sprite
;
; Egg prison
; ----------------------------------------------------------------------------

Sprite_3F1E4:				
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	off_3F1F2(pc,d0.w),d1
		jmp	off_3F1F2(pc,d1.w)
; ===========================================================================
off_3F1F2:	dc.w loc_3F212-off_3F1F2; 0 
		dc.w loc_3F278-off_3F1F2; 1
		dc.w loc_3F354-off_3F1F2; 2
		dc.w loc_3F38E-off_3F1F2; 3
		dc.w loc_3F3A8-off_3F1F2; 4
		dc.w loc_3F406-off_3F1F2; 5
byte_3F1FE:	dc.b   0		; 0 
		dc.b   2		; 1
		dc.b $20		; 2
		dc.b   4		; 3
		dc.b   0		; 4
		dc.b $28		; 5
		dc.b   4		; 6
		dc.b $10		; 7
		dc.b   5		; 8
		dc.b   4		; 9
		dc.b $18		; 10
		dc.b   6		; 11
		dc.b   8		; 12
		dc.b   3		; 13
		dc.b   5		; 14
		dc.b   0		; 15
		dc.b   8		; 16
		dc.b $20		; 17
		dc.b   4		; 18
		dc.b   0		; 19
; ===========================================================================

loc_3F212:				
		movea.l	a0,a1
		lea	$38(a0),a3
		lea	(byte_3F1FE)(pc),a2
		moveq	#3,d1
		bra.s	loc_3F228
; ===========================================================================

loc_3F220:				
		bsr.w	loc_3F54E
		bne.s	loc_3F272
		move.w	a1,(a3)+

loc_3F228:				
		_move.b	0(a0),0(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	$C(a0),$30(a1)
		move.l	#Map_3F436,4(a1)
		move.w	#$2680,2(a1)
		move.b	#-$7C,1(a1)
		moveq	#0,d0
		move.b	(a2)+,d0
		sub.w	d0,$C(a1)
		move.w	$C(a1),$30(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,$19(a1)
		move.b	(a2)+,$18(a1)
		move.b	(a2)+,$1A(a1)

loc_3F272:				
		dbf	d1,loc_3F220
		rts	
; ===========================================================================

loc_3F278:				
		moveq	#0,d0
		move.b	$25(a0),d0
		move.w	off_3F2AE(pc,d0.w),d1
		jsr	off_3F2AE(pc,d1.w)
		move.w	#$2B,d1	; '+'
		move.w	#$18,d2
		move.w	#$18,d3
		move.w	8(a0),d4
		jsr	SolidObject
		lea	(off_3F428).l,a1
		jsr	AnimateSprite
		jmp	MarkObjGone
; ===========================================================================
off_3F2AE:	dc.w loc_3F2B4-off_3F2AE; 0 
		dc.w loc_3F2FC-off_3F2AE; 1
		dc.w locret_3F352-off_3F2AE; 2
; ===========================================================================

loc_3F2B4:				
		movea.w	$38(a0),a1
		tst.w	$32(a1)
		beq.s	locret_3F2FA
		movea.w	$3A(a0),a2
		jsr	SingleObjLoad
		bne.s	loc_3F2E0
		_move.b	#$27,0(a1) ; '''
		addq.b	#2,$24(a1)
		move.w	8(a2),8(a1)
		move.w	$C(a2),$C(a1)

loc_3F2E0:				
		move.w	#-$400,$12(a2)
		move.w	#$800,$10(a2)
		addq.b	#2,$25(a2)
		move.w	#$1D,$34(a0)
		addq.b	#2,$25(a0)

locret_3F2FA:				
		rts	
; ===========================================================================

loc_3F2FC:				
		subq.w	#1,$34(a0)
		bpl.s	locret_3F352

loc_3F302:
		move.b	#1,$1C(a0)
		moveq	#7,d6

loc_3F30A:
		move.w	#$9A,d5	
		moveq	#-$1C,d4

loc_3F310:				
		jsr	SingleObjLoad
		bne.s	loc_3F340
		_move.b	#$28,0(a1) ; '('
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		add.w	d4,8(a1)
		move.b	#1,$38(a1)
		addq.w	#7,d4
		move.w	d5,$36(a1)
		subq.w	#8,d5
		dbf	d6,loc_3F310

loc_3F340:				
		movea.w	$3C(a0),a2
		move.w	#$B4,$1E(a2)
		addq.b	#2,$25(a2)
		addq.b	#2,$25(a0)

locret_3F352:				
					
		rts	
; ===========================================================================

loc_3F354:				
		move.w	#$1B,d1
		move.w	#8,d2
		move.w	#8,d3
		move.w	8(a0),d4
		jsr	SolidObject
		move.w	$30(a0),$C(a0)
		move.b	$22(a0),d0
		andi.b	#$18,d0
		beq.s	loc_3F388
		addq.w	#8,$C(a0)
		clr.b	(f_hud_time_update).w
		move.w	#1,$32(a0)

loc_3F388:				
		jmp	MarkObjGone
; ===========================================================================

loc_3F38E:				
		tst.b	$25(a0)
		beq.s	loc_3F3A2
		tst.b	1(a0)
		bpl.w	loc_3F548
		jsr	ObjectFall

loc_3F3A2:				
		jmp	MarkObjGone
; ===========================================================================

loc_3F3A8:				
		tst.b	$25(a0)
		beq.s	locret_3F404
		move.b	($FFFFFE0F).w,d0
		andi.b	#7,d0
		bne.s	loc_3F3F4
		jsr	SingleObjLoad
		bne.s	loc_3F3F4
		_move.b	#$28,0(a1) ; '('
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		jsr	(RandomNumber).l
		andi.w	#$1F,d0
		subq.w	#6,d0
		tst.w	d1
		bpl.s	loc_3F3E4
		neg.w	d0

loc_3F3E4:				
		add.w	d0,8(a1)
		move.b	#1,$38(a1)
		move.w	#$C,$36(a1)

loc_3F3F4:				
		subq.w	#1,$1E(a0)
		bne.s	locret_3F404
		addq.b	#2,$24(a0)

loc_3F3FE:
		move.w	#$B4,$1E(a0)

locret_3F404:				
		rts	
; ===========================================================================

loc_3F406:				
		moveq	#$6F,d0	; 'o'
		moveq	#$28,d1	; '('
		lea	($FFFFB400).w,a1

loc_3F40E:				
		cmp.b	(a1),d1
		beq.s	locret_3F426
		lea	$40(a1),a1
		dbf	d0,loc_3F40E
		jsr	loc_19452
		jmp	DeleteObject
; ===========================================================================

locret_3F426:				
		rts	
; ===========================================================================
off_3F428:	dc.w byte_3F42C-off_3F428; 0 
		dc.w byte_3F42F-off_3F428; 1
byte_3F42C:	dc.b  $F,  0,$FF	; 0 
byte_3F42F:	dc.b   3,  0,  1,  2,  3,$FE,  1; 0 
; ----------------------------------------------------------------------------
; Unknown Sprite Mappings
; ----------------------------------------------------------------------------
Map_3F436:				
		dc.w word_3F442-Map_3F436; 0
		dc.w word_3F47C-Map_3F436; 1
		dc.w word_3F4BE-Map_3F436; 2
		dc.w word_3F500-Map_3F436; 3
		dc.w word_3F52A-Map_3F436; 4
		dc.w word_3F53C-Map_3F436; 5
word_3F442:	dc.w 7			
		dc.w $E00D,    0,    0,$FFE0; 0
		dc.w $E00D, $800, $800,	   0; 4
		dc.w $F00A,    8,    4,$FFE0; 8
		dc.w $F006,  $11,    8,$FFF8; 12
		dc.w $F00A, $808, $804,	   8; 16
		dc.w  $80E,  $17,   $B,$FFE0; 20
		dc.w  $80E, $817, $80B,	   0; 24
word_3F47C:	dc.w 7			
		dc.w $E00D,    0,    0,$FFE0; 0
		dc.w $E00D, $800, $800,	   0; 4
		dc.w  $80E,  $17,   $B,$FFE0; 8
		dc.w  $80E, $817, $80B,	   0; 12
		dc.w $E806,  $11,    8,$FFF8; 16
		dc.w $F80A,    8,    4,$FFE0; 20
		dc.w $F80A, $808, $804,	   8; 24
		dc.w $F006,  $23,  $11,$FFF8; 28
word_3F4BE:	dc.w 7			
word_3F4C0:	dc.w $E00D,    0,    0,$FFE0; 0
		dc.w $E00D, $800, $800,	   0; 4
		dc.w  $80E,  $17,   $B,$FFE0; 8
		dc.w  $80E, $817, $80B,	   0; 12
		dc.w $E006,  $11,    8,$FFF8; 16
		dc.w	$A,    8,    4,$FFE0; 20
		dc.w	$A, $808, $804,	   8; 24
		dc.w $F006,  $23,  $11,$FFF8; 28
word_3F500:	dc.w 5			
word_3F502:	dc.w $E00D,    0,    0,$FFE0; 0
		dc.w $E00D, $800, $800,	   0; 4
		dc.w $F006,  $23,  $11,$FFF8; 8
		dc.w  $80E,  $17,   $B,$FFE0; 12
		dc.w  $80E, $817, $80B,	   0; 16
word_3F52A:	dc.w 2			
		dc.w $F805,  $29,  $14,$FFF0; 0
		dc.w $F805, $829, $814,	   0; 4
word_3F53C:	dc.w 1			
		dc.w $F805,  $2D,  $16,$FFF8; 0
; ===========================================================================
		nop	

loc_3F548:				
		jmp	DeleteObject
; ===========================================================================

loc_3F54E:				
		jmp	SingleObjLoad
; ===========================================================================

loc_3F554:				
		nop	
		jsrto	Touch_Rings,JmpTo_Touch_Rings
		cmpi.b	#$C,(v_zone).w
		bne.s	loc_3F566
		bsr.w	loc_3FCB6

loc_3F566:				
		tst.b	(v_current_boss).w
		bne.w	loc_3F666
		move.w	8(a0),d2
		move.w	$C(a0),d3
		subi.w	#8,d2
		moveq	#0,d5
		move.b	$16(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0) ; 'M'
		bne.s	loc_3F592
		addi.w	#$C,d3
		moveq	#$A,d5

loc_3F592:				
		move.w	#$10,d4
		add.w	d5,d5
		lea	($FFFFB400).w,a1
		move.w	#$6F,d6	; 'o'

loc_3F5A0:				
		move.b	$20(a1),d0
		bne.w	loc_3F5B4

loc_3F5A8:				
		lea	$40(a1),a1
		dbf	d6,loc_3F5A0
		moveq	#0,d0
		rts	
; ===========================================================================

loc_3F5B4:				
		andi.w	#$3F,d0	; '?'
		add.w	d0,d0
		lea	byte_3F600(pc,d0.w),a2
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	8(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3F5D6
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3F5DC
		bra.w	loc_3F5A8
; ===========================================================================

loc_3F5D6:				
		cmp.w	d4,d0
		bhi.w	loc_3F5A8

loc_3F5DC:				
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$C(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_3F5F6
		add.w	d1,d1
		add.w	d1,d0
		bcs.w	loc_3F6F2
		bra.w	loc_3F5A8
; ===========================================================================

loc_3F5F6:				
		cmp.w	d5,d0
		bhi.w	loc_3F5A8
		bra.w	loc_3F6F2
; ===========================================================================
byte_3F600:	dc.b   4,  4,$14,$14, $C,$14,$14, $C,  4,$10, $C,$12,$10,$10,  6,  6; 0
					
		dc.b $18, $C, $C,$10,$10,  8,  8,  8,$14,$10,$14,  8, $E, $E,$18,$18; 16
		dc.b $28,$10,$10,$18,  8,$10,$20,$70,$40,$20,$80,$20,$20,$20,  8,  8; 32
		dc.b   4,  4,$20,  8, $C, $C,  8,  4,$18,  4,$28,  4,  4,  8,  4,$18; 48
		dc.b   4,$28,  4,$10,$18,$18, $C,$18,$48,  8,$18,$28,$10,  4,$20,  2; 64
		dc.b   4,$40,$18,$80,$20,$10,$10,$20,$10,$30,$10,$40,$10,$50,$10,  2; 80
		dc.b $10,  1,  2,  8,$20,$1C; 96
; ===========================================================================

loc_3F666:				
		lea	(byte_3F600)(pc),a3
		move.w	8(a0),d2
		move.w	$C(a0),d3
		subi.w	#8,d2
		moveq	#0,d5
		move.b	$16(a0),d5
		subq.b	#3,d5
		sub.w	d5,d3
		cmpi.b	#$4D,$1A(a0) ; 'M'
		bne.s	loc_3F68E
		addi.w	#$C,d3
		moveq	#$A,d5

loc_3F68E:				
		move.w	#$10,d4
		add.w	d5,d5
		lea	($FFFFB400).w,a1
		move.w	#$6F,d6	; 'o'

loc_3F69C:				
		move.b	$20(a1),d0
		bne.s	loc_3F6AE

loc_3F6A2:				
		lea	$40(a1),a1
		dbf	d6,loc_3F69C
		moveq	#0,d0
		rts	
; ===========================================================================

loc_3F6AE:				
		bsr.w	loc_3FA2C
		andi.w	#$3F,d0	; '?'
		beq.s	loc_3F6A2
		add.w	d0,d0
		lea	(a3,d0.w),a2
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	8(a1),d0
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3F6D4
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3F6D8
		bra.s	loc_3F6A2
; ===========================================================================

loc_3F6D4:				
		cmp.w	d4,d0
		bhi.s	loc_3F6A2

loc_3F6D8:				
		moveq	#0,d1
		move.b	(a2)+,d1
		move.w	$C(a1),d0
		sub.w	d1,d0
		sub.w	d3,d0
		bcc.s	loc_3F6EE
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3F6F2
		bra.s	loc_3F6A2
; ===========================================================================

loc_3F6EE:				
		cmp.w	d5,d0
		bhi.s	loc_3F6A2

loc_3F6F2:				
		move.b	$20(a1),d1
		andi.b	#-$40,d1
		beq.w	loc_3F78C
		cmpi.b	#-$40,d1
		beq.w	loc_3F976
		tst.b	d1

loc_3F708:
		bmi.w	loc_3F862
		move.b	$20(a1),d0
		andi.b	#$3F,d0	; '?'
		cmpi.b	#6,d0
		beq.s	React_Monitor
		move.w	($FFFFB030).w,d0
		tst.w	(f_two_player).w
		beq.s	loc_3F728
		move.w	$30(a0),d0

loc_3F728:				
		cmpi.w	#$5A,d0	; 'Z'
		bcc.w	locret_3F73A
		move.b	#4,$24(a1)
		move.w	a0,$3E(a1)

locret_3F73A:				
		rts	
; ===========================================================================

React_Monitor:				
		tst.w	ost_y_vel(a0) 		; is character moving upwards?
		bpl.s	.chkcharacter		; if not, branch
		move.w	ost_y_pos(a0),d0
		subi.w	#$10,d0				; d0 = y pos above character
		cmp.w	ost_y_pos(a1),d0	; is center of character above the monitor?
		bcs.s	.donothing			; if not, branch (they will phase through the side instead of breaking it)

	;.knock_down
		; knock down the monitor if they jumped into the bottom of it
		neg.w	ost_y_vel(a0)			; reverse the character's y-vel
		move.w	#-$180,ost_y_vel(a1)	; set monitor's y-vel
		tst.b	ost_secondary_routine(a1)
		bne.s	.donothing
		move.b	#4,ost_secondary_routine(a1)
		rts	
; ===========================================================================

	.chkcharacter:				
		cmpa.w	#v_ost_maincharacter,a0
		beq.s	.break_monitor
		tst.w	(f_two_player).w
		beq.s	.donothing

	.break_monitor:				
		cmpi.b	#2,ost_anim(a0)
		bne.s	.donothing
		neg.w	ost_y_vel(a0)
		move.b	#4,ost_primary_routine(a1)
		move.w	a0,$3E(a1)

	.donothing:				
		rts	
; ===========================================================================

loc_3F78C:				
		btst	#1,$2B(a0)
		bne.s	loc_3F7A6
		cmpi.b	#9,$1C(a0)
		beq.s	loc_3F7A6
		cmpi.b	#2,$1C(a0)
		bne.w	loc_3F862

loc_3F7A6:				
		btst	#6,1(a1)
		beq.s	loc_3F7C8
		tst.b	$32(a1)
		beq.s	locret_3F7C6
		neg.w	$10(a0)
		neg.w	$12(a0)
		move.b	#0,$20(a1)
		subq.b	#1,$32(a1)

locret_3F7C6:				
		rts	
; ===========================================================================

loc_3F7C8:				
		tst.b	$21(a1)
		beq.s	loc_3F7EA
		neg.w	$10(a0)
		neg.w	$12(a0)
		move.b	#0,$20(a1)
		subq.b	#1,$21(a1)
		bne.s	locret_3F7E8
		bset	#7,$22(a1)

locret_3F7E8:				
		rts	
; ===========================================================================

loc_3F7EA:				
		bset	#7,$22(a1)
		moveq	#0,d0
		move.w	(v_enemy_combo).w,d0
		addq.w	#2,(v_enemy_combo).w
		cmpi.w	#6,d0
		bcs.s	loc_3F802

loc_3F800:
		moveq	#6,d0

loc_3F802:				
		move.w	d0,$3E(a1)

loc_3F806:
		move.w	off_3F854(pc,d0.w),d0

loc_3F80A:
		cmpi.w	#$20,(v_enemy_combo).w ; ' '
		bcs.s	loc_3F81C
		move.w	#$3E8,d0
		move.w	#$A,$3E(a1)

loc_3F81C:				
		movea.w	a0,a3
		bsr.w	sub_40D42
		_move.b	#$27,0(a1) ; '''
		move.b	#0,$24(a1)
		tst.w	$12(a0)
		bmi.s	loc_3F844
		move.w	$C(a0),d0
		cmp.w	$C(a1),d0
		bcc.s	loc_3F84C
		neg.w	$12(a0)
		rts	
; ===========================================================================

loc_3F844:				
		addi.w	#$100,$12(a0)
		rts	
; ===========================================================================

loc_3F84C:				
		subi.w	#$100,$12(a0)
		rts	
; ===========================================================================
off_3F854:	dc.w loc_3F85C+2-off_3F854; 0 ;	DATA XREF: h+288E0o h+288E2o ...
		dc.w loc_3F868-off_3F854; 1
		dc.w loc_3F886-off_3F854; 2
		dc.w loc_3F8B8-off_3F854; 3
; ===========================================================================

loc_3F85C:				
					
		bset	#7,$22(a1)

loc_3F862:				
		btst	#1,$2B(a0)

loc_3F868:				
		beq.s	loc_3F86E

loc_3F86A:				
		moveq	#-1,d0
		rts	
; ===========================================================================

loc_3F86E:				
		nop	
		tst.w	$30(a0)
		bne.s	loc_3F86A
		movea.l	a1,a2

loc_3F878:				
		move.w	(v_rings).w,d0
		cmpa.w	#-$5000,a0
		beq.s	loc_3F88C
		tst.w	(f_two_player).w

loc_3F886:				
		beq.s	loc_3F8BE
		move.w	(v_rings_p2).w,d0

loc_3F88C:				
		btst	#0,$2B(a0)
		bne.s	loc_3F8B8
		tst.w	d0
		beq.w	KillCharacter
		jsr	SingleObjLoad
		bne.s	loc_3F8B8
		_move.b	#$37,0(a1) ; '7'
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	a0,$3E(a1)

loc_3F8B8:				
					; DATA XREF: ...
		bclr	#0,$2B(a0)

loc_3F8BE:				
		move.b	#4,$24(a0)
		bsr.w	loc_3FCB0
		bset	#1,$22(a0)
		move.w	#-$400,$12(a0)
		move.w	#-$200,$10(a0)
		btst	#6,$22(a0)
		beq.s	loc_3F8EE
		move.w	#-$200,$12(a0)
		move.w	#-$100,$10(a0)

loc_3F8EE:				
		move.w	8(a0),d0
		cmp.w	8(a2),d0
		bcs.s	loc_3F8FC
		neg.w	$10(a0)

loc_3F8FC:				
		move.w	#0,$14(a0)
		move.b	#$1A,$1C(a0)
		move.w	#$78,$30(a0) ; 'x'
		move.w	#$A3,d0	
		cmpi.b	#$36,(a2) ; '6'
		bne.s	loc_3F91C
		move.w	#$A6,d0	

loc_3F91C:				
		jsr	(PlaySound).l
		moveq	#-1,d0
		rts	
; ===========================================================================
; loc_3F926: KillSonic:
KillCharacter:				
		tst.w	(v_debug_active).w
		bne.s	loc_3F972
		clr.b	$2B(a0)
		move.b	#6,$24(a0)
		bsr.w	loc_3FCB0
		bset	#1,$22(a0)
		move.w	#-$700,$12(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		move.b	#$18,$1C(a0)
		bset	#7,2(a0)
		move.w	#$A3,d0	
		cmpi.b	#$36,(a2) ; '6'
		bne.s	loc_3F96C
		move.w	#$A6,d0	

loc_3F96C:				
		jsr	(PlaySound).l

loc_3F972:				
		moveq	#-1,d0
		rts	
; ===========================================================================

loc_3F976:				
		move.b	$20(a1),d1
		andi.b	#$3F,d1	; '?'
		cmpi.b	#6,d1
		beq.s	loc_3FA00
		cmpi.b	#7,d1
		beq.w	loc_3FA18
		cmpi.b	#$B,d1
		beq.s	loc_3F9CA
		cmpi.b	#$A,d1
		beq.s	loc_3FA00
		cmpi.b	#$C,d1
		beq.s	loc_3F9CE
		cmpi.b	#$14,d1
		beq.s	loc_3FA00
		cmpi.b	#$15,d1
		beq.s	loc_3FA00
		cmpi.b	#$16,d1
		beq.s	loc_3FA00
		cmpi.b	#$17,d1
		beq.s	loc_3FA00
		cmpi.b	#$18,d1
		beq.s	loc_3FA00
		cmpi.b	#$1A,d1
		beq.s	loc_3FA22
		cmpi.b	#$21,d1	; '!'
		beq.s	loc_3FA12
		rts	
; ===========================================================================

loc_3F9CA:				
		bra.w	loc_3F85C
; ===========================================================================

loc_3F9CE:				
		sub.w	d0,d5
		cmpi.w	#8,d5
		bcc.s	loc_3F9FC
		move.w	8(a1),d0
		subq.w	#4,d0
		btst	#0,$22(a1)
		beq.s	loc_3F9E8
		subi.w	#$10,d0

loc_3F9E8:				
		sub.w	d2,d0
		bcc.s	loc_3F9F4
		addi.w	#$18,d0
		bcs.s	loc_3F9F8
		bra.s	loc_3F9FC
; ===========================================================================

loc_3F9F4:				
		cmp.w	d4,d0
		bhi.s	loc_3F9FC

loc_3F9F8:				
		bra.w	loc_3F862
; ===========================================================================

loc_3F9FC:				
		bra.w	loc_3F78C
; ===========================================================================

loc_3FA00:				
		move.w	a0,d1
		subi.w	#-$5000,d1
		beq.s	loc_3FA0C
		addq.b	#1,$21(a1)

loc_3FA0C:				
		addq.b	#1,$21(a1)
		rts	
; ===========================================================================

loc_3FA12:				
		addq.b	#1,$21(a1)
		rts	
; ===========================================================================

loc_3FA18:				
		move.b	#2,$21(a1)
		bra.w	loc_3F78C
; ===========================================================================

loc_3FA22:				
		move.b	#-1,$21(a1)
		bra.w	loc_3F78C
; ===========================================================================

loc_3FA2C:				
		cmpi.b	#$F,d0
		bne.s	locret_3FA46
		moveq	#0,d0
		move.b	(v_current_boss).w,d0
		beq.s	locret_3FA46
		subq.w	#1,d0
		add.w	d0,d0
		move.w	off_3FA48(pc,d0.w),d0
		jmp	off_3FA48(pc,d0.w)
; ===========================================================================

locret_3FA46:				
		rts	
; ===========================================================================
off_3FA48:	dc.w loc_3FA5A-off_3FA48; 0 
		dc.w loc_3FA5A-off_3FA48; 1
		dc.w loc_3FA60-off_3FA48; 2
		dc.w loc_3FAC8-off_3FA48; 3
		dc.w loc_3FAFE-off_3FA48; 4
		dc.w loc_3FB8A-off_3FA48; 5
		dc.w loc_3FBC4-off_3FA48; 6
		dc.w loc_3FBCA-off_3FA48; 7
		dc.w locret_3FA5E-off_3FA48; 8
; ===========================================================================

loc_3FA5A:				
		move.b	$20(a1),d0

locret_3FA5E:				
		rts	
; ===========================================================================

loc_3FA60:				
		tst.b	(v_boss_collision_routine).w
		bne.s	loc_3FA68
		rts	
; ===========================================================================

loc_3FA68:				
		move.w	d7,-(sp)
		moveq	#0,d1
		move.b	$15(a1),d1
		subq.b	#2,d1
		cmpi.b	#7,d1
		bgt.s	loc_3FAA8
		move.w	d1,d7
		add.w	d7,d7
		move.w	8(a1),d0
		btst	#0,1(a1)
		beq.s	loc_3FA8E
		add.w	word_3FAB0(pc,d7.w),d0
		bra.s	loc_3FA92
; ===========================================================================

loc_3FA8E:				
		sub.w	word_3FAB0(pc,d7.w),d0

loc_3FA92:				
		move.b	byte_3FAC0(pc,d1.w),d1
		ori.l	#262144,d1
		move.w	$C(a1),d7
		subi.w	#$1C,d7
		bsr.w	loc_3FC4C

loc_3FAA8:				
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		rts	
; ===========================================================================
word_3FAB0:	dc.w   $1C		; 0
		dc.w   $20		; 1
		dc.w   $28		; 2
		dc.w   $34		; 3
		dc.w   $3C		; 4
		dc.w   $44		; 5
		dc.w   $60		; 6
		dc.w   $70		; 7
byte_3FAC0:	dc.b   4		; 0
		dc.b   4		; 1
		dc.b   8		; 2
		dc.b  $C		; 3
		dc.b $14		; 4
		dc.b $1C		; 5
		dc.b $24		; 6
		dc.b   8		; 7
; ===========================================================================

loc_3FAC8:				
		move.w	d7,-(sp)

loc_3FACA:
		move.w	8(a1),d0
		move.w	$C(a1),d7
		tst.b	(v_boss_collision_routine).w
		beq.s	loc_3FAF6
		addi.w	#4,d7
		subi.w	#$50,d0	; 'P'
		btst	#0,1(a1)
		beq.s	loc_3FAEC
		addi.w	#$A0,d0	

loc_3FAEC:				
		move.l	#$140010,d1
		bsr.w	loc_3FC4C

loc_3FAF6:				
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FAFE:				
		sf.b	$38(a1)
		cmpi.b	#1,(v_boss_collision_routine).w
		blt.s	loc_3FB46
		move.w	d7,-(sp)
		move.w	8(a1),d0
		move.w	$C(a1),d7
		addi.w	#4,d7
		subi.w	#$30,d0	; '0'
		btst	#0,1(a1)
		beq.s	loc_3FB28
		addi.w	#$60,d0	; '`'

loc_3FB28:				
		move.l	#262148,d1
		bsr.w	loc_3FC4C
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		cmpi.w	#$78,$30(a0) ; 'x'
		bne.s	locret_3FB44
		st.b	$38(a1)

locret_3FB44:				
		rts	
; ===========================================================================

loc_3FB46:				
		move.w	d7,-(sp)
		movea.w	#$14,a5
		movea.w	#0,a4

loc_3FB50:				
		move.w	8(a1),d0
		move.w	$C(a1),d7
		subi.w	#$20,d7	; ' '
		add.w	a5,d0
		move.l	#$100004,d1
		bsr.w	loc_3FC4C
		movea.w	#-$14,a5
		adda.w	#1,a4
		cmpa.w	#1,a4
		beq.s	loc_3FB50
		move.w	(sp)+,d7
		move.b	$20(a1),d0
		cmpi.w	#$78,$30(a0) ; 'x'
		bne.s	locret_3FB88
		st.b	$38(a1)

locret_3FB88:				
		rts	
; ===========================================================================

loc_3FB8A:				
		tst.b	(v_boss_collision_routine).w
		beq.s	loc_3FBBE
		move.w	d7,-(sp)
		move.w	8(a1),d0
		move.w	$C(a1),d7
		addi.w	#$28,d7	; '('
		move.l	#$80010,d1
		cmpi.b	#1,(v_boss_collision_routine).w
		beq.s	loc_3FBB8
		move.w	#$20,d1	; ' '
		subi.w	#8,d7
		addi.w	#4,d0

loc_3FBB8:				
		bsr.w	loc_3FC4C
		move.w	(sp)+,d7

loc_3FBBE:				
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FBC4:				
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FBCA:				
		cmpi.b	#1,(v_boss_collision_routine).w
		blt.s	loc_3FC46
		beq.s	loc_3FC1C
		move.w	d7,-(sp)
		move.w	8(a1),d0
		move.w	$C(a1),d7
		moveq	#0,d1
		move.b	$B(a1),d1
		subq.b	#2,d1
		add.w	d1,d1
		btst	#0,1(a1)
		beq.s	loc_3FBF6
		add.w	word_3FC10(pc,d1.w),d0
		bra.s	loc_3FBFA
; ===========================================================================

loc_3FBF6:				
		sub.w	word_3FC10(pc,d1.w),d0

loc_3FBFA:				
		sub.w	word_3FC10+2(pc,d1.w),d7

loc_3FBFE:
		move.l	#$60008,d1

loc_3FC04:
		bsr.w	loc_3FC4C
		move.w	(sp)+,d7

loc_3FC0A:
		move.w	#0,d0
		rts	
; ===========================================================================
word_3FC10:	dc.w   $14,    0	; 0
		dc.w   $10,  $10	; 2
		dc.w   $10,$FFF0	; 4
; ===========================================================================

loc_3FC1C:				
		move.w	d7,-(sp)
		move.w	8(a1),d0
		move.w	$C(a1),d7
		moveq	#$10,d1
		btst	#0,1(a1)
		beq.s	loc_3FC32
		neg.w	d1

loc_3FC32:				
		sub.w	d1,d0
		move.l	#$8000C,d1
		bsr.w	loc_3FC7A
		move.w	(sp)+,d7
		move.b	#0,d0
		rts	
; ===========================================================================

loc_3FC46:				
		move.b	$20(a1),d0
		rts	
; ===========================================================================

loc_3FC4C:				
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3FC5A
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3FC5E

locret_3FC58:				
		rts	
; ===========================================================================

loc_3FC5A:				
		cmp.w	d4,d0
		bhi.s	locret_3FC58

loc_3FC5E:				
		swap	d1
		sub.w	d1,d7
		sub.w	d3,d7
		bcc.s	loc_3FC70
		add.w	d1,d1
		add.w	d1,d7
		bcs.w	loc_3F862
		bra.s	locret_3FC58
; ===========================================================================

loc_3FC70:				
		cmp.w	d5,d7
		bhi.w	locret_3FC58
		bra.w	loc_3F862
; ===========================================================================

loc_3FC7A:				
		sub.w	d1,d0
		sub.w	d2,d0
		bcc.s	loc_3FC88
		add.w	d1,d1
		add.w	d1,d0
		bcs.s	loc_3FC8C

locret_3FC86:				
		rts	
; ===========================================================================

loc_3FC88:				
		cmp.w	d4,d0
		bhi.s	locret_3FC86

loc_3FC8C:				
		swap	d1
		sub.w	d1,d7
		sub.w	d3,d7
		bcc.s	loc_3FC9E
		add.w	d1,d1
		add.w	d1,d7
		bcs.w	loc_3FCA4
		bra.s	locret_3FC86
; ===========================================================================

loc_3FC9E:				
		cmp.w	d5,d7
		bhi.w	locret_3FC86

loc_3FCA4:				
		neg.w	$10(a0)
		neg.w	$12(a0)
		rts	
; ===========================================================================
	if Revision<2
		nop	
	endc

	if ~RemoveJmpTos
loc_3FCB0:				
		jmp	loc_1B0AC

loc_3FCB6:				
		jmp	loc_174C8

JmpTo_Touch_Rings:				
		jmp	(Touch_Rings).l
		
		align 4
	endc 
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to	load uncompressed gfx for and animate level animations
; (e.g., EHZ flowers, HTZ lava)
; ---------------------------------------------------------------------------
; loc_3FCC4: AniArt_Load:
AnimateLevelGFX:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	PLC_DYNANM+2(pc,d0.w),d1
		lea	PLC_DYNANM(pc,d1.w),a2
		move.w	PLC_DYNANM(pc,d0.w),d0
		jmp	PLC_DYNANM(pc,d0.w)
; ===========================================================================
		rts	; dead code
; ===========================================================================
; ---------------------------------------------------------------------------
; Dynamic and Animated pattern load cue
;
; Two offsets per level. First points to the Animated pattern load cue to
; use for the level. Second points to the Dynamic reload script.
; ---------------------------------------------------------------------------
PLC_DYNANM:				
		dc.w Dynamic_Normal-PLC_DYNANM;	0
		dc.w Animated_EHZ-PLC_DYNANM  ;	1
		dc.w Dynamic_Null-PLC_DYNANM  ;	2
		dc.w Animated_Null-PLC_DYNANM ;	3
		dc.w Dynamic_Null-PLC_DYNANM  ;	4
		dc.w Animated_Null-PLC_DYNANM ;	5
		dc.w Dynamic_Null-PLC_DYNANM  ;	6
		dc.w Animated_Null-PLC_DYNANM ;	7
		dc.w Dynamic_Normal-PLC_DYNANM;	8
		dc.w Animated_MTZ-PLC_DYNANM  ;	9
		dc.w Dynamic_Normal-PLC_DYNANM;	10
		dc.w Animated_MTZ-PLC_DYNANM  ;	11
		dc.w Dynamic_Null-PLC_DYNANM  ;	12
		dc.w Animated_Null-PLC_DYNANM ;	13
		dc.w Dynamic_HTZ-PLC_DYNANM   ;	14
		dc.w Animated_HTZ-PLC_DYNANM  ;	15
		dc.w Dynamic_Normal-PLC_DYNANM;	16
		dc.w Animated_HPZ-PLC_DYNANM  ;	17
		dc.w Dynamic_Null-PLC_DYNANM  ;	18
		dc.w Animated_Null-PLC_DYNANM ;	19
		dc.w Dynamic_Normal-PLC_DYNANM;	20
		dc.w Animated_OOZ-PLC_DYNANM  ;	21
		dc.w Dynamic_Null-PLC_DYNANM  ;	22
		dc.w Animated_Null-PLC_DYNANM ;	23
		dc.w Dynamic_CNZ-PLC_DYNANM   ;	24
		dc.w Animated_CNZ-PLC_DYNANM  ;	25
		dc.w Dynamic_Normal-PLC_DYNANM;	26
		dc.w Animated_CPZ-PLC_DYNANM  ;	27
		dc.w Dynamic_Normal-PLC_DYNANM;	28
		dc.w Animated_DEZ-PLC_DYNANM  ;	29
		dc.w Dynamic_ARZ-PLC_DYNANM   ;	30
		dc.w Animated_ARZ-PLC_DYNANM  ;	31
		dc.w Dynamic_Null-PLC_DYNANM  ;	32
		dc.w Animated_Null-PLC_DYNANM ;	33
; ===========================================================================

Dynamic_Null:				
		rts	
; ===========================================================================

Dynamic_HTZ:				
		tst.w	(f_two_player).w
		bne.w	Dynamic_Normal
		lea	(v_anim_counters).w,a3
		moveq	#0,d0
		move.w	(v_camera_x_pos).w,d1
		neg.w	d1
		asr.w	#3,d1
		move.w	(v_camera_x_pos).w,d0
		lsr.w	#4,d0
		add.w	d1,d0
		subi.w	#$10,d0
		divu.w	#$30,d0	; '0'
		swap	d0
		cmp.b	1(a3),d0
		beq.s	loc_3FD98
		move.b	d0,1(a3)
		move.w	d0,d2
		andi.w	#7,d0
		add.w	d0,d0
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		andi.w	#$38,d2	; '8'
		lsr.w	#2,d2
		add.w	d2,d0
		lea	word_3FD9C(pc,d0.w),a4
		moveq	#5,d5
		move.w	#-$6000,d4

loc_3FD7C:				
		moveq	#-1,d1
		move.w	(a4)+,d1
		andi.l	#$FFFFFF,d1
		move.w	d4,d2
		moveq	#$40,d3	; '@'
		jsr	(QueueDMATransfer).l
		addi.w	#$80,d4	
		dbf	d5,loc_3FD7C

loc_3FD98:				
		bra.w	loc_3FE5C
; ===========================================================================
word_3FD9C:	dc.w   $80		; 0 
		dc.w  $180		; 1
		dc.w  $280		; 2
		dc.w  $580		; 3
		dc.w  $600		; 4
		dc.w  $700		; 5
		dc.w   $80		; 6
		dc.w  $180		; 7
		dc.w  $280		; 8
		dc.w  $580		; 9
		dc.w  $600		; 10
		dc.w  $700		; 11
		dc.w  $980		; 12
		dc.w  $A80		; 13
		dc.w  $B80		; 14
		dc.w  $C80		; 15
		dc.w  $D00		; 16
		dc.w  $D80		; 17
		dc.w  $980		; 18
		dc.w  $A80		; 19
		dc.w  $B80		; 20
		dc.w  $C80		; 21
		dc.w  $D00		; 22
		dc.w  $D80		; 23
		dc.w  $E80		; 24
		dc.w $1180		; 25
		dc.w $1200		; 26
		dc.w $1280		; 27
		dc.w $1300		; 28
		dc.w $1380		; 29
		dc.w  $E80		; 30
		dc.w $1180		; 31
		dc.w $1200		; 32
		dc.w $1280		; 33
		dc.w $1300		; 34
		dc.w $1380		; 35
		dc.w $1400		; 36
		dc.w $1480		; 37
		dc.w $1500		; 38
		dc.w $1580		; 39
		dc.w $1600		; 40
		dc.w $1900		; 41
		dc.w $1400		; 42
		dc.w $1480		; 43
		dc.w $1500		; 44
		dc.w $1580		; 45
		dc.w $1600		; 46
		dc.w $1900		; 47
		dc.w $1D00		; 48
		dc.w $1D80		; 49
		dc.w $1E00		; 50
		dc.w $1F80		; 51
		dc.w $2400		; 52
		dc.w $2580		; 53
		dc.w $1D00		; 54
		dc.w $1D80		; 55
		dc.w $1E00		; 56
		dc.w $1F80		; 57
		dc.w $2400		; 58
		dc.w $2580		; 59
		dc.w $2600		; 60
		dc.w $2680		; 61
		dc.w $2780		; 62
		dc.w $2B00		; 63
		dc.w $2F00		; 64
		dc.w $3280		; 65
		dc.w $2600		; 66
		dc.w $2680		; 67
		dc.w $2780		; 68
		dc.w $2B00		; 69
		dc.w $2F00		; 70
		dc.w $3280		; 71
		dc.w $3600		; 72
		dc.w $3680		; 73
		dc.w $3780		; 74
		dc.w $3C80		; 75
		dc.w $3D00		; 76
		dc.w $3F00		; 77
		dc.w $3600		; 78
		dc.w $3680		; 79
		dc.w $3780		; 80
		dc.w $3C80		; 81
		dc.w $3D00		; 82
		dc.w $3F00		; 83
		dc.w $3F80		; 84
		dc.w $4080		; 85
		dc.w $4480		; 86
		dc.w $4580		; 87
		dc.w $4880		; 88
		dc.w $4900		; 89
		dc.w $3F80		; 90
		dc.w $4080		; 91
		dc.w $4480		; 92
		dc.w $4580		; 93
		dc.w $4880		; 94
		dc.w $4900		; 95
; ===========================================================================

loc_3FE5C:				
		lea	(v_bgscroll_buffer).w,a1
		move.w	(v_camera_x_pos).w,d2
		neg.w	d2
		asr.w	#3,d2
		move.l	a2,-(sp)
		lea	(Art_HTZClouds).l,a0
		lea	($FFFF7C00).l,a2
		moveq	#$F,d1

loc_3FE78:				
		move.w	(a1)+,d0
		neg.w	d0
		add.w	d2,d0
		andi.w	#$1F,d0
		lsr.w	#1,d0
		bcc.s	loc_3FE8A
		addi.w	#$200,d0

loc_3FE8A:				
		lea	(a0,d0.w),a4
		lsr.w	#1,d0
		bcs.s	loc_3FEB4
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2	; '<'
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2	; '<'
		move.l	(a4)+,(a2)+
		adda.w	#$3C,a2	; '<'
		move.l	(a4)+,(a2)+
		suba.w	#$C0,a2	
		adda.w	#$20,a0	; ' '
		dbf	d1,loc_3FE78
		bra.s	loc_3FEEC
; ===========================================================================

loc_3FEB4:				
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2	; '<'
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2	; '<'
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		adda.w	#$3C,a2	; '<'
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		move.b	(a4)+,(a2)+
		suba.w	#$C0,a2	
		adda.w	#$20,a0	; ' '
		dbf	d1,loc_3FE78

loc_3FEEC:				
		move.l	#$FF7C00,d1
		move.w	#-$5D00,d2
		move.w	#$80,d3	
		jsr	(QueueDMATransfer).l
		movea.l	(sp)+,a2
		addq.w	#2,a3
		bra.w	loc_3FF30
; ===========================================================================

Dynamic_CNZ:				
		tst.b	(v_current_boss).w
		beq.s	loc_3FF10
		rts	
; ===========================================================================

loc_3FF10:				
		lea	(Animated_CNZ).l,a2
		tst.w	(f_two_player).w
		beq.s	Dynamic_Normal
		lea	(word_40160).l,a2
		bra.s	Dynamic_Normal
; ===========================================================================

Dynamic_ARZ:				
		tst.b	(v_current_boss).w
		beq.s	Dynamic_Normal
		rts	
; ===========================================================================

Dynamic_Normal:				; CODE XREF: j_Dynamic_Normal_0j
					; j_Dynamic_Normalj ...
		lea	(v_anim_counters).w,a3

loc_3FF30:				
		move.w	(a2)+,d6

loc_3FF32:				
		subq.b	#1,(a3)
		bcc.s	loc_3FF78
		moveq	#0,d0
		move.b	1(a3),d0
		cmp.b	6(a2),d0
		bcs.s	loc_3FF48
		moveq	#0,d0
		move.b	d0,1(a3)

loc_3FF48:				
		addq.b	#1,1(a3)
		move.b	(a2),(a3)
		bpl.s	loc_3FF56
		add.w	d0,d0
		move.b	9(a2,d0.w),(a3)

loc_3FF56:				
		move.b	8(a2,d0.w),d0
		lsl.w	#5,d0
		move.w	4(a2),d2
		move.l	(a2),d1
		andi.l	#$FFFFFF,d1
		add.l	d0,d1
		moveq	#0,d3
		move.b	7(a2),d3
		lsl.w	#4,d3
		jsr	(QueueDMATransfer).l

loc_3FF78:				
		move.b	6(a2),d0
		tst.b	(a2)
		bpl.s	loc_3FF82
		add.b	d0,d0

loc_3FF82:				
		addq.b	#1,d0
		andi.w	#$FE,d0	
		lea	8(a2,d0.w),a2
		addq.w	#2,a3
		dbf	d6,loc_3FF32
		rts	
; ===========================================================================
Animated_EHZ:				
		dc.w 4
; Flowers
		dc.l $FF000000+Art_Flowers1
		dc.w $7280
		dc.b 6
		dc.b 2
		dc.b   0,$7F		; 0
		dc.b   2,$13		; 2
		dc.b   0,  7		; 4
		dc.b   2,  7		; 6
		dc.b   0,  7		; 8
		dc.b   2,  7		; 10
; Flowers
		dc.l $FF000000+Art_Flowers2
		dc.w $72C0
		dc.b 8
		dc.b 2
		dc.b   2,$7F		; 0
		dc.b   0, $B		; 2
		dc.b   2, $B		; 4
		dc.b   0, $B		; 6
		dc.b   2,  5		; 8
		dc.b   0,  5		; 10
		dc.b   2,  5		; 12
		dc.b   0,  5		; 14
; Flowers
		dc.l $7000000+Art_Flowers3
		dc.w $7300
		dc.b 2
		dc.b 2
		dc.b   0		; 0
		dc.b   2		; 1
; Flowers
		dc.l $FF000000+Art_Flowers4
		dc.w $7340
		dc.b 8
		dc.b 2
		dc.b   0,$7F		; 0
		dc.b   2,  7		; 2
		dc.b   0,  7		; 4
		dc.b   2,  7		; 6
		dc.b   0,  7		; 8
		dc.b   2, $B		; 10
		dc.b   0, $B		; 12
		dc.b   2, $B		; 14
; Pulsing thing	against	checkered background
		dc.l $FF000000+Art_EHZPulseBall
		dc.w $7380
		dc.b 6
		dc.b 2
		dc.b   0,$17		; 0
		dc.b   2,  9		; 2
		dc.b   4, $B		; 4
		dc.b   6,$17		; 6
		dc.b   4, $B		; 8
		dc.b   2,  9		; 10
Animated_MTZ:				
		dc.w 3
; Spinning metal cylinder
		dc.l $00000000+Art_MTZCylinder
		dc.w $6980
		dc.b 8
		dc.b $10
byte_40002:	dc.b   0		; 0
		dc.b $10		; 1
		dc.b $20		; 2
		dc.b $30		; 3
		dc.b $40		; 4
		dc.b $50		; 5
		dc.b $60		; 6
		dc.b $70		; 7
; lava
		dc.l $D000000+Art_Lava
		dc.w $6800
		dc.b 6
		dc.b $C
		dc.b   0		; 0
		dc.b  $C		; 1
		dc.b $18		; 2
		dc.b $24		; 3
		dc.b $18		; 4
		dc.b  $C		; 5
; MTZ background animated section
		dc.l $FF000000+Art_MTZAnimBack
		dc.w $6B80
		dc.b 4
		dc.b 6
		dc.b   0,$13		; 0
		dc.b   6,  7		; 2
		dc.b  $C,$13		; 4
		dc.b   6,  7		; 6
; MTZ background animated section
		dc.l $FF000000+Art_MTZAnimBack
		dc.w $6C40
		dc.b 4
		dc.b 6
		dc.b  $C,$13		; 0
		dc.b   6,  7		; 2
		dc.b   0,$13		; 4
		dc.b   6,  7		; 6
Animated_HTZ:				
		dc.w 4
; Flowers
		dc.l $FF000000+Art_Flowers1
		dc.w $7280
		dc.b 6
		dc.b 2
		dc.b   0,$7F		; 0
		dc.b   2,$13		; 2
		dc.b   0,  7		; 4
		dc.b   2,  7		; 6
		dc.b   0,  7		; 8
		dc.b   2,  7		; 10
; Flowers
		dc.l $FF000000+Art_Flowers2
		dc.w $72C0
		dc.b 8
		dc.b 2
		dc.b   2,$7F		; 0
		dc.b   0, $B		; 2
		dc.b   2, $B		; 4
		dc.b   0, $B		; 6
		dc.b   2,  5		; 8
		dc.b   0,  5		; 10
		dc.b   2,  5		; 12
		dc.b   0,  5		; 14
; Flowers
		dc.l $7000000+Art_Flowers3
		dc.w $7300
		dc.b 2
		dc.b 2
		dc.b   0		; 0
		dc.b   2		; 1
; Flowers
		dc.l $FF000000+Art_Flowers4
		dc.w $7340
		dc.b 8
		dc.b 2
		dc.b   0,$7F		; 0
		dc.b   2,  7		; 2
		dc.b   0,  7		; 4
		dc.b   2,  7		; 6
		dc.b   0,  7		; 8
		dc.b   2, $B		; 10
		dc.b   0, $B		; 12
		dc.b   2, $B		; 14
; Pulsing thing	against	checkered background
		dc.l $FF000000+Art_EHZPulseBall
		dc.w $7380
		dc.b 6
		dc.b 2
		dc.b   0,$17		; 0
		dc.b   2,  9		; 2
		dc.b   4, $B		; 4
		dc.b   6,$17		; 6
		dc.b   4, $B		; 8
		dc.b   2,  9		; 10
Animated_HPZ:				
		dc.w 2
; Pulsing ball from OOZ
		dc.l $8000000+Art_OOZPulseBall
		dc.w $5D00
		dc.b 6
		dc.b 8
		dc.b   0		; 0
		dc.b   0		; 1
		dc.b   8		; 2
		dc.b $10		; 3
		dc.b $10		; 4
		dc.b   8		; 5
; Pulsing ball from OOZ
		dc.l $8000000+Art_OOZPulseBall
		dc.w $5E00
		dc.b 6
		dc.b 8
		dc.b   8		; 0
		dc.b $10		; 1
		dc.b $10		; 2
		dc.b   8		; 3
		dc.b   0		; 4
		dc.b   0		; 5
; Pulsing ball from OOZ
		dc.l $8000000+Art_OOZPulseBall
		dc.w $5F00
		dc.b 6
		dc.b 8
		dc.b $10		; 0
		dc.b   8		; 1
		dc.b   0		; 2
		dc.b   0		; 3
		dc.b   8		; 4
		dc.b $10		; 5
Animated_OOZ:				
		dc.w 4
; Pusling ball from OOZ
		dc.l $FF000000+Art_OOZPulseBall
		dc.w $56C0
		dc.b 4
		dc.b 4
		dc.b   0		; 0
		dc.b  $B		; 1
		dc.b   4		; 2
		dc.b   5		; 3
		dc.b   8		; 4
		dc.b   9		; 5
		dc.b   4		; 6
		dc.b   3		; 7
; Square rotating around ball in OOZ
		dc.l $6000000+Art_OOZSquareBall1
		dc.w $5740
		dc.b 4
		dc.b 4
		dc.b   0		; 0
		dc.b   4		; 1
		dc.b   8		; 2
		dc.b  $C		; 3
; Square rotating around ball
		dc.l $6000000+Art_OOZSquareBall2
		dc.w $57C0
		dc.b 4
		dc.b 4
		dc.b   0		; 0
		dc.b   4		; 1
		dc.b   8		; 2
		dc.b  $C		; 3
; Oil
		dc.l $11000000+Art_Oil1
		dc.w $5840
		dc.b 6
		dc.b $10
		dc.b   0		; 0
		dc.b $10		; 1
		dc.b $20		; 2
		dc.b $30		; 3
		dc.b $20		; 4
		dc.b $10		; 5
; Oil
		dc.l $11000000+Art_Oil2
		dc.w $5A40
		dc.b 6
		dc.b $10
		dc.b   0		; 0
		dc.b $10		; 1
		dc.b $20		; 2
		dc.b $30		; 3
		dc.b $20		; 4
		dc.b $10		; 5
Animated_CNZ:				
		dc.w 1
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $A800
		dc.b $10
		dc.b $10
		dc.b   0,$C7		; 0
		dc.b $10,  5		; 2
		dc.b $20,  5		; 4
		dc.b $30,  5		; 6
		dc.b $40,$C7		; 8
		dc.b $50,  5		; 10
		dc.b $20,  5		; 12
		dc.b $60,  5		; 14
		dc.b   0,  5		; 16
		dc.b $10,  5		; 18
		dc.b $20,  5		; 20
		dc.b $30,  5		; 22
		dc.b $40,  5		; 24
		dc.b $50,  5		; 26
		dc.b $20,  5		; 28
		dc.b $60,  5		; 30
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $6600
		dc.b $10
		dc.b $10
		dc.b $70,  5		; 0
		dc.b $80,  5		; 2
		dc.b $20,  5		; 4
		dc.b $90,  5		; 6
		dc.b $A0,  5		; 8
		dc.b $B0,  5		; 10
		dc.b $20,  5		; 12
		dc.b $C0,  5		; 14
		dc.b $70,$C7		; 16
		dc.b $80,  5		; 18
		dc.b $20,  5		; 20
		dc.b $90,  5		; 22
		dc.b $A0,$C7		; 24
		dc.b $B0,  5		; 26
		dc.b $20,  5		; 28
		dc.b $C0,  5		; 30
word_40160:	dc.w 1			
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $E800
		dc.b $10
		dc.b $10
		dc.b   0,$C7		; 0
		dc.b $10,  5		; 2
		dc.b $20,  5		; 4
		dc.b $30,  5		; 6
		dc.b $40,$C7		; 8
		dc.b $50,  5		; 10
		dc.b $20,  5		; 12
		dc.b $60,  5		; 14
		dc.b   0,  5		; 16
		dc.b $10,  5		; 18
		dc.b $20,  5		; 20
		dc.b $30,  5		; 22
		dc.b $40,  5		; 24
		dc.b $50,  5		; 26
		dc.b $20,  5		; 28
		dc.b $60,  5		; 30
; Flipping foreground section in CNZ
		dc.l $FF000000+Art_CNZFlipTiles
		dc.w $6600
		dc.b $10
		dc.b $10
		dc.b $70,  5		; 0
		dc.b $80,  5		; 2
		dc.b $20,  5		; 4
		dc.b $90,  5		; 6
		dc.b $A0,  5		; 8
		dc.b $B0,  5		; 10
		dc.b $20,  5		; 12
		dc.b $C0,  5		; 14
		dc.b $70,$C7		; 16
		dc.b $80,  5		; 18
		dc.b $20,  5		; 20
		dc.b $90,  5		; 22
		dc.b $A0,$C7		; 24
		dc.b $B0,  5		; 26
		dc.b $20,  5		; 28
		dc.b $C0,  5		; 30
Animated_CPZ:				
		dc.w 0
; Animated background section in CPZ and DEZ
		dc.l $4000000+Art_CPZAnimBack; 0
		dc.w $6E00
		dc.b 8
		dc.b 2
		dc.b   0		; 0
		dc.b   2		; 1
		dc.b   4		; 2
		dc.b   6		; 3
		dc.b   8		; 4
		dc.b  $A		; 5
		dc.b  $C		; 6
		dc.b  $E		; 7
Animated_DEZ:				
		dc.w 0
; Animated background section in CPZ and DEZ
		dc.l $4000000+Art_CPZAnimBack
		dc.w $64C0
		dc.b 8
		dc.b 2
		dc.b   0		; 0
		dc.b   2		; 1
		dc.b   4		; 2
		dc.b   6		; 3
		dc.b   8		; 4
		dc.b  $A		; 5
		dc.b  $C		; 6
		dc.b  $E		; 7
Animated_ARZ:				
		dc.w 3
; Waterfall patterns
		dc.l $5000000+Art_Waterfall1
		dc.w $AAE0
		dc.b 2
		dc.b 4
		dc.b   0		; 0
		dc.b   4		; 1
; Waterfall patterns
		dc.l $5000000+Art_Waterfall1
		dc.w $8600
		dc.b 2
		dc.b 4
		dc.b   4		; 0
		dc.b   0		; 1
; Waterfall patterns
		dc.l $5000000+Art_Waterfall2
		dc.w $8580
		dc.b 2
		dc.b 4
		dc.b   0		; 0
		dc.b   4		; 1
; Waterfall patterns
		dc.l $5000000+Art_Waterfall3
		dc.w $8500
		dc.b 2
		dc.b 4
		dc.b   0		; 0
		dc.b   4		; 1
; ===========================================================================

Animated_Null:				
		cmpi.b	#id_CPZ,(v_zone).w
		beq.s	loc_4020A

locret_40208:				
		rts	
; ===========================================================================

loc_4020A:				
		move.w	(v_camera_x_pos).w,d0
		cmpi.w	#$1940,d0
		bcs.s	locret_40208
		cmpi.w	#$1F80,d0
		bcc.s	locret_40208
		subq.b	#1,(v_unused_cpz_scroll_timer).w
		bpl.s	locret_40208
		move.b	#7,(v_unused_cpz_scroll_timer).w
		move.b	#1,(f_screen_redraw).w
		lea	($FFFF7500).l,a1
		bsr.s	loc_4023A
		lea	($FFFF7D00).l,a1

loc_4023A:				
		move.w	#7,d1

loc_4023E:				
		move.w	(a1),d0
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	$72(a1),(a1)+
		adda.w	#$70,a1	; 'p'
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	$72(a1),(a1)+
		adda.w	#$70,a1	; 'p'
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	$72(a1),(a1)+
		adda.w	#$70,a1	; 'p'
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	2(a1),(a1)+
		move.w	d0,(a1)+
		suba.w	#$180,a1
		dbf	d1,loc_4023E
		rts	
; ===========================================================================

loc_402D4:				
		cmpi.b	#7,(v_zone).w
		bne.s	loc_402EC
		bsr.w	loc_407C0
		move.b	#-1,($FFFFF7F1).w
		move.w	#-1,($FFFFA820).w

loc_402EC:				
		cmpi.b	#id_CPZ,(v_zone).w
		bne.s	loc_402FA
		move.b	#-1,($FFFFF7F1).w

loc_402FA:				
		moveq	#0,d0
		move.b	(v_zone).w,d0
		add.w	d0,d0

loc_40302:
		move.w	off_40350(pc,d0.w),d0
		lea	off_40350(pc,d0.w),a0
		tst.w	(f_two_player).w
		beq.s	loc_4031E
		cmpi.b	#$C,(v_zone).w
		bne.s	loc_4031E
		lea	(byte_406BE).l,a0

loc_4031E:				
		tst.w	(a0)
		beq.s	locret_40336
		lea	(v_16x16_tiles).w,a1
		adda.w	(a0)+,a1
		move.w	(a0)+,d1
		tst.w	(f_two_player).w
		bne.s	loc_40338

loc_40330:				
		move.w	(a0)+,(a1)+
		dbf	d1,loc_40330

locret_40336:				
		rts	
; ===========================================================================

loc_40338:				
		move.w	(a0)+,d0
		move.w	d0,d1
		andi.w	#-$800,d0
		andi.w	#$7FF,d1
		lsr.w	#1,d1
		or.w	d1,d0
		move.w	d0,(a1)+
		dbf	d1,loc_40338
		rts	
; ===========================================================================
off_40350:	dc.w byte_40372-off_40350; 0 
		dc.w byte_407BE-off_40350; 1
		dc.w byte_407BE-off_40350; 2
		dc.w byte_407BE-off_40350; 3
		dc.w byte_403EE-off_40350; 4
		dc.w byte_403EE-off_40350; 5
		dc.w byte_407BE-off_40350; 6
		dc.w byte_40372-off_40350; 7
		dc.w byte_404C2-off_40350; 8
		dc.w byte_407BE-off_40350; 9
		dc.w byte_405B6-off_40350; 10
		dc.w byte_407BE-off_40350; 11
		dc.w byte_4061A-off_40350; 12
		dc.w byte_40762-off_40350; 13
		dc.w byte_4076E-off_40350; 14
		dc.w byte_4077A-off_40350; 15
		dc.w byte_407BE-off_40350; 16
byte_40372:	dc.b $17,$88,  0,$3B,$45,  0,$45,  4,$45,  1,$45,  5,$45,  8,$45, $C; 0
					
		dc.b $45,  9,$45, $D,$45,$10,$45,$14,$45,$11,$45,$15,$45,  2,$45,  6; 16
		dc.b $45,  3,$45,  7,$45, $A,$45, $E,$45, $B,$45, $F,$45,$12,$45,$16; 32
		dc.b $45,$13,$45,$17,$65,$18,$65,$1A,$65,$19,$65,$1B,$65,$1C,$65,$1E; 48
		dc.b $65,$1D,$65,$1F,$43,$9C,$4B,$9C,$43,$9D,$4B,$9D,$41,$58,$43,$9C; 64
		dc.b $41,$59,$43,$9D,$4B,$9C,$49,$58,$4B,$9D,$49,$59,$63,$94,$6B,$94; 80
		dc.b $63,$95,$6B,$95,$E3,$96,$EB,$96,$E3,$97,$EB,$97,$63,$98,$6B,$98; 96
		dc.b $63,$99,$6B,$99,$E3,$9A,$EB,$9A,$E3,$9B,$EB,$9B; 112
byte_403EE:	dc.b $17,$30,  0,$67,$23,$5C,$2B,$5C,$23,$5D,$2B,$5D,$23,$5E,$2B,$5E; 0
					
		dc.b $23,$5F,$2B,$5F,$63,$5A,$63,$5A,$63,$5B,$63,$5B,$63,$58,$63,$58; 16
		dc.b $63,$59,$63,$59,$63,$56,$63,$56,$63,$57,$63,$57,$63,$54,$63,$54; 32
		dc.b $63,$55,$63,$55,$63,$52,$63,$52,$63,$53,$63,$53,$63,$50,$63,$50; 48
		dc.b $63,$51,$63,$51,$63,$4E,$63,$4E,$63,$4F,$63,$4F,$63,$4C,$63,$4C; 64
		dc.b $63,$4D,$63,$4D,$23,$60,$2B,$60,$23,$61,$2B,$61,$23,$62,$2B,$62; 80
		dc.b $23,$63,$2B,$63,$23,$64,$2B,$64,$23,$65,$2B,$65,$23,$66,$2B,$66; 96
		dc.b $23,$67,$2B,$67,$C0,  0,$C0,  0,$C3,$40,$C3,$41,$C0,  0,$C0,  0; 112
		dc.b $C3,$42,$C3,$43,$C3,$44,$C3,$45,$C3,$48,$C3,$49,$C3,$46,$C3,$47; 128
		dc.b $C3,$4A,$C3,$4B,$E3,$5A,$E3,$5A,$E3,$5B,$E3,$5B,$E3,$58,$E3,$58; 144
		dc.b $E3,$59,$E3,$59,$E3,$56,$E3,$56,$E3,$57,$E3,$57,$E3,$54,$E3,$54; 160
		dc.b $E3,$55,$E3,$55,$E3,$52,$E3,$52,$E3,$53,$E3,$53,$E3,$50,$E3,$50; 176
		dc.b $E3,$51,$E3,$51,$E3,$4E,$E3,$4E,$E3,$4F,$E3,$4F,$E3,$4C,$E3,$4C; 192
		dc.b $E3,$4D,$E3,$4D	; 208
byte_404C2:	dc.b $17,$10,  0,$77,$62,$E8,$62,$E9,$62,$EA,$62,$EB,$62,$EC,$62,$ED; 0
					
		dc.b $62,$EE,$62,$EF,$62,$F0,$62,$F1,$62,$F2,$62,$F3,$62,$F4,$62,$F5; 16
		dc.b $62,$F6,$62,$F7,$62,$F8,$62,$F9,$62,$FA,$62,$FB,$62,$FC,$62,$FD; 32
		dc.b $62,$FE,$62,$FF,$42,$E8,$42,$E9,$42,$EA,$42,$EB,$42,$EC,$42,$ED; 48
		dc.b $42,$EE,$42,$EF,$42,$F0,$42,$F1,$42,$F2,$42,$F3,$42,$F4,$42,$F5; 64
		dc.b $42,$F6,$42,$F7,$42,$F8,$42,$F9,$42,$FA,$42,$FB,$42,$FC,$42,$FD; 80
		dc.b $42,$FE,$42,$FF,  0,  0,$62,$E8,  0,  0,$62,$EA,$62,$E9,$62,$EC; 96
		dc.b $62,$EB,$62,$EE,$62,$ED,  0,  0,$62,$EF,  0,  0,  0,  0,$62,$F0; 112
		dc.b   0,  0,$62,$F2,$62,$F1,$62,$F4,$62,$F3,$62,$F6,$62,$F5,  0,  0; 128
		dc.b $62,$F7,  0,  0,  0,  0,$62,$F8,  0,  0,$62,$FA,$62,$F9,$62,$FC; 144
		dc.b $62,$FB,$62,$FE,$62,$FD,  0,  0,$62,$FF,  0,  0,  0,  0,$42,$E8; 160
		dc.b   0,  0,$42,$EA,$42,$E9,$42,$EC,$42,$EB,$42,$EE,$42,$ED,  0,  0; 176
		dc.b $42,$EF,  0,  0,  0,  0,$42,$F0,  0,  0,$42,$F2,$42,$F1,$42,$F4; 192
		dc.b $42,$F3,$42,$F6,$42,$F5,  0,  0,$42,$F7,  0,  0,  0,  0,$42,$F8; 208
		dc.b   0,  0,$42,$FA,$42,$F9,$42,$FC,$42,$FB,$42,$FE,$42,$FD,  0,  0; 224
		dc.b $42,$FF,  0,  0	; 240
byte_405B6:	dc.b $17,$A0,  0,$2F,$82,$B6,$82,$B8,$82,$B7,$82,$B9,$E2,$BA,$E2,$BB; 0
					
		dc.b $E2,$BC,$E2,$BD,  0,  0,$62,$BE,  0,  0,$62,$C0,$62,$BF,  0,  0; 16
		dc.b $62,$C1,  0,  0,$C2,$C2,$C2,$C3,$C2,$CA,$C2,$CB,$C2,$C4,$C2,$C5; 32
		dc.b $C2,$CC,$C2,$CD,$C2,$C6,$C2,$C7,$C2,$CE,$C2,$CF,$C2,$C8,$C2,$C9; 48
		dc.b $C2,$D0,$C2,$D1,$C2,$D2,$C2,$D3,$C2,$DA,$C2,$DB,$C2,$D4,$C2,$D5; 64
		dc.b $C2,$DC,$C2,$DD,$C2,$D6,$C2,$D7,$C2,$DE,$C2,$DF,$C2,$D8,$C2,$D9; 80
		dc.b $C2,$E0,$C2,$E1	; 96
byte_4061A:	dc.b $17,$60,  0,$4F,  5,$50,  5,$54,  5,$51,  5,$55,  5,$58,  5,$5C; 0
					
		dc.b   5,$59,  5,$5D,  5,$52,  5,$56,  5,$53,  5,$57,  5,$5A,  5,$5E; 16
		dc.b   5,$5B,  5,$5F,  5,$60,  5,$64,  5,$61,  5,$65,  5,$68,  5,$6C; 32
		dc.b   5,$69,  5,$6D,  5,$62,  5,$66,  5,$63,  5,$67,  5,$6A,  5,$6E; 48
		dc.b   5,$6B,  5,$6F,  5,$70,  5,$74,  5,$71,  5,$75,  5,$78,  5,$7C; 64
		dc.b   5,$79,  5,$7D,  5,$72,  5,$76,  5,$73,  5,$77,  5,$7A,  5,$7E; 80
		dc.b   5,$7B,  5,$7F,$E5,$40,$E5,$44,$E5,$41,$E5,$45,$E5,$48,$E5,$4C; 96
		dc.b $E5,$49,$E5,$4D,$E5,$42,$E5,$46,$E5,$43,$E5,$47,$E5,$4A,$E5,$4E; 112
		dc.b $E5,$4B,$E5,$4F,$E3,$30,$E3,$34,$E3,$31,$E3,$35,$E3,$38,$E3,$3C; 128
		dc.b $E3,$39,$E3,$3D,$E3,$32,$E3,$36,$E3,$33,$E3,$37,$E3,$3A,$E3,$3E; 144
		dc.b $E3,$3B,$E3,$3F	; 160
byte_406BE:	dc.b $17,$60,  0,$4F,  7,$50,  7,$54,  7,$51,  7,$55,  7,$58,  7,$5C
					
		dc.b   7,$59,  7,$5D,  7,$52,  7,$56,  7,$53,  7,$57,  7,$5A,  7,$5E
		dc.b   7,$5B,  7,$5F,  7,$60,  7,$64,  7,$61,  7,$65,  7,$68,  7,$6C
		dc.b   7,$69,  7,$6D,  7,$62,  7,$66,  7,$63,  7,$67,  7,$6A,  7,$6E
		dc.b   7,$6B,  7,$6F,  7,$70,  7,$74,  7,$71,  7,$75,  7,$78,  7,$7C
		dc.b   7,$79,  7,$7D,  7,$72,  7,$76,  7,$73,  7,$77,  7,$7A,  7,$7E
		dc.b   7,$7B,  7,$7F,$E7,$40,$E7,$44,$E7,$41,$E7,$45,$E7,$48,$E7,$4C
		dc.b $E7,$49,$E7,$4D,$E7,$42,$E7,$46,$E7,$43,$E7,$47,$E7,$4A,$E7,$4E
		dc.b $E7,$4B,$E7,$4F,$E3,$30,$E3,$34,$E3,$31,$E3,$35,$E3,$38,$E3,$3C
		dc.b $E3,$39,$E3,$3D,$E3,$32,$E3,$36,$E3,$33,$E3,$37,$E3,$3A,$E3,$3E
		dc.b $E3,$3B,$E3,$3F
byte_40762:	dc.b $17,$F8,  0,  3,$43,$70,$43,$71,$43,$70,$43,$71; 0
					
byte_4076E:	dc.b $17,$F8,  0,  3,$43,$26,$43,$27,$43,$26,$43,$27; 0
					
byte_4077A:	dc.b $17,$C0,  0,$1F,$C4,$28,$C4,$29,$C4,$2A,$C4,$2B,$C4,$2C,$C4,$2D; 0
					
		dc.b $C4,$2E,$C4,$2F,$C4,$30,$C4,$31,$C4,$32,$C4,$33,$C5,$63,$C5,$64; 16
		dc.b $C5,$65,$C5,$66,$44,$28,$44,$29,$44,$2A,$44,$2B,$44,$2C,$44,$2D; 32
		dc.b $44,$2E,$44,$2F,$44,$30,$44,$31,$44,$32,$44,$33,$45,$63,$45,$64; 48
		dc.b $45,$65,$45,$66	; 64
byte_407BE:	dc.b   0,  0		; 0 
; ===========================================================================

loc_407C0:				
		lea	(Nem_HTZCliffs).l,a0
		lea	($FFFFB800).w,a4
		bsr.w	loc_407FC
		lea	($FFFFB800).w,a1
		lea	(word_3FD9C)(pc),a4
		moveq	#0,d2
		moveq	#7,d4

loc_407DA:				
		moveq	#5,d3

loc_407DC:				
		moveq	#-1,d0
		move.w	(a4)+,d0
		movea.l	d0,a2
		moveq	#$1F,d1

loc_407E4:				
		move.l	(a1),(a2)+
		move.l	d2,(a1)+
		dbf	d1,loc_407E4
		dbf	d3,loc_407DC
		adda.w	#$C,a4
		dbf	d4,loc_407DA
		rts	
; ===========================================================================
		nop	

loc_407FC:				
		jmp	(NemDecToRAM).l
; ===========================================================================
		dc.b   0 ;  
		dc.b   0 ;  
; ===========================================================================

BuildHUD:				
		tst.w	(v_rings).w
		beq.s	loc_40820
		moveq	#0,d1
		btst	#3,($FFFFFE05).w
		bne.s	loc_4081E
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_4081E
		addq.w	#2,d1

loc_4081E:				
		bra.s	loc_40836
; ===========================================================================

loc_40820:				
		moveq	#0,d1
		btst	#3,($FFFFFE05).w
		bne.s	loc_40836
		addq.w	#1,d1
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_40836
		addq.w	#2,d1

loc_40836:				
		move.w	#$90,d3	
		move.w	#$108,d2
		lea	(off_40A9A).l,a1
		movea.w	#-$7936,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	locret_40858
		bsr.w	sub_41A72

locret_40858:				
		rts	
; End of function h

; ===========================================================================

BuildHUD_P1:				
		tst.w	(v_rings).w
		beq.s	loc_40876
		moveq	#0,d1
		btst	#3,($FFFFFE05).w
		bne.s	loc_40874
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_40874
		addq.w	#2,d1

loc_40874:				
					
		bra.s	loc_4088C
; ===========================================================================

loc_40876:				
		moveq	#0,d1
		btst	#3,($FFFFFE05).w
		bne.s	loc_4088C
		addq.w	#1,d1
		cmpi.b	#9,(v_time_min).w
		bne.s	loc_4088C
		addq.w	#2,d1

loc_4088C:				
					
		move.w	#$90,d3	
		move.w	#$188,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7C9B,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C
		move.w	#$B8,d3	
		move.w	#$108,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_time_min).w,d7
		bsr.w	sub_4092E
		bsr.w	sub_4096A
		moveq	#0,d7
		move.b	(v_time_sec).w,d7
		bsr.w	loc_40938
		move.w	#$C0,d3	
		move.w	#$118,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7

loc_408DE:
		move.w	(v_rings).w,d7
		bsr.w	sub_40984
		tst.b	(f_hud_time_update_p2).w
		bne.s	loc_40908
		tst.b	(f_hud_time_update).w
		beq.s	loc_40908
		move.w	#$110,d3
		move.w	#$1B8,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_loser_time_left).w,d7
		bsr.w	loc_40938

loc_40908:				
					
		moveq	#4,d1

loc_4090A:
		move.w	#$90,d3	
		move.w	#$188,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7C9B,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C
		moveq	#0,d4
		rts	

; =============== S U B	R O U T	I N E =======================================


sub_4092E:				
					
		lea	(byte_41210).l,a4
		moveq	#0,d6
		bra.s	loc_40940
; ===========================================================================

loc_40938:				
					
		lea	(byte_4120C).l,a4
		moveq	#1,d6

loc_40940:				
					
		moveq	#0,d1
		move.l	(a4)+,d4

loc_40944:				
		sub.l	d4,d7
		bcs.s	loc_4094C
		addq.w	#1,d1
		bra.s	loc_40944
; ===========================================================================

loc_4094C:				
		add.l	d4,d7
		lea	(off_40C82).l,a1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C
		addq.w	#8,d3
		dbf	d6,loc_40940
		rts	
; End of function sub_4092E


; =============== S U B	R O U T	I N E =======================================


sub_4096A:				
					
		moveq	#$A,d1
		lea	(off_40C82).l,a1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C
		addq.w	#8,d3
		rts	
; End of function sub_4096A


; =============== S U B	R O U T	I N E =======================================


sub_40984:				
					
		lea	(byte_41208).l,a4
		moveq	#2,d6

loc_4098C:				
		moveq	#0,d1
		move.l	(a4)+,d4

loc_40990:				
		sub.l	d4,d7
		bcs.s	loc_40998
		addq.w	#1,d1
		bra.s	loc_40990
; ===========================================================================

loc_40998:				
		add.l	d4,d7
		tst.w	d6
		beq.s	loc_409AA
		tst.w	d1
		beq.s	loc_409A6
		bset	#$1F,d6

loc_409A6:				
		tst.l	d6
		bpl.s	loc_409BE

loc_409AA:				
		lea	(off_40C82).l,a1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C

loc_409BE:				
		addq.w	#8,d3
		dbf	d6,loc_4098C
		rts	
; End of function sub_40984

; ===========================================================================

BuildHUD_P2:				
		tst.w	(v_rings_p2).w
		beq.s	loc_409E2
		moveq	#0,d1
		btst	#3,($FFFFFE05).w
		bne.s	loc_409E0
		cmpi.b	#9,(v_time_min_p2).w
		bne.s	loc_409E0
		addq.w	#2,d1

loc_409E0:				
					
		bra.s	loc_409F8
; ===========================================================================

loc_409E2:				
		moveq	#0,d1
		btst	#3,($FFFFFE05).w
		bne.s	loc_409F8
		addq.w	#1,d1
		cmpi.b	#9,(v_time_min_p2).w
		bne.s	loc_409F8
		addq.w	#2,d1

loc_409F8:				
					
		move.w	#$90,d3	
		move.w	#$268,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7C9B,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C
		move.w	#$B8,d3	
		move.w	#$1E8,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_time_min_p2).w,d7
		bsr.w	sub_4092E
		bsr.w	sub_4096A
		moveq	#0,d7
		move.b	(v_time_sec_p2).w,d7
		bsr.w	loc_40938
		move.w	#$C0,d3	
		move.w	#$1F8,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.w	(v_rings_p2).w,d7
		bsr.w	sub_40984
		tst.b	(f_hud_time_update).w
		bne.s	loc_40A74
		tst.b	(f_hud_time_update_p2).w
		beq.s	loc_40A74
		move.w	#$110,d3
		move.w	#$298,d2
		movea.w	#-$7C8F,a3
		moveq	#0,d7
		move.b	(v_loser_time_left).w,d7
		bsr.w	loc_40938

loc_40A74:				
					
		moveq	#5,d1
		move.w	#$90,d3	
		move.w	#$268,d2
		lea	(off_40BEA).l,a1
		movea.w	#-$7CC0,a3
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bsr.w	sub_41A6C
		moveq	#0,d4
		rts	
; ===========================================================================
off_40A9A:	dc.w word_40AA2-off_40A9A; 0 
					
		dc.w word_40AF4-off_40A9A; 1
		dc.w word_40B46-off_40A9A; 2
		dc.w word_40B98-off_40A9A; 3
word_40AA2:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,$2010,$2008; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,$2008,$2004; 16
		dc.w	 0,$A001,$2000,$2000,  $20,$A009,$2030,$2018; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087; 32
		dc.w   $10		; 40
word_40AF4:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,$2010,$2008; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,    8,	   4; 16
		dc.w	 0,$A001,    0,	   0,  $20,$A009,$2030,$2018; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087; 32
		dc.w   $10		; 40
word_40B46:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,  $10,	   8; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,$2008,$2004; 16
		dc.w	 0,$A001,$2000,$2000,  $20,$A009,$2030,$2018; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087; 32
		dc.w   $10		; 40
word_40B98:	dc.w	$A,$800D,$2000,$2000,	 0,$800D,$2018,$200C; 0
					
		dc.w   $20,$800D,$2020,$2010,  $40,$900D,  $10,	   8; 8
		dc.w	 0,$900D,$2028,$2014,  $28,$A00D,    8,	   4; 16
		dc.w	 0,$A001,    0,	   0,  $20,$A009,$2030,$2018; 24
		dc.w   $30,$4005, $10A,	 $85,	 0,$400D,$210E,$2087; 32
		dc.w   $10		; 40
off_40BEA:	dc.w word_40BF6-off_40BEA; 0 
					
		dc.w word_40C10-off_40BEA; 1
		dc.w word_40C2A-off_40BEA; 2
		dc.w word_40C44-off_40BEA; 3
		dc.w word_40C5E-off_40BEA; 4
		dc.w word_40C70-off_40BEA; 5
word_40BF6:	dc.w	 3,$800D,$2010,$2008,	 0,$900D,$2008,$2004; 0
					
		dc.w	 0,$9001,$2000,$2000,  $20; 8
word_40C10:	dc.w	 3,$800D,$2010,$2008,	 0,$900D,    8,	   4; 0
					
		dc.w	 0,$9001,    0,	   0,  $20; 8
word_40C2A:	dc.w	 3,$800D,  $10,	   8,	 0,$900D,$2008,$2004; 0
					
		dc.w	 0,$9001,$2000,$2000,  $20; 8
word_40C44:	dc.w	 3,$800D,  $10,	   8,	 0,$900D,    8,	   4; 0
					
		dc.w	 0,$9001,    0,	   0,  $20; 8
word_40C5E:	dc.w	 2,$4005, $10A,	 $85,	 0,$400D,$210E,$2087; 0
					
		dc.w   $10		; 8
word_40C70:	dc.w	 2,$4005,  $1C,	  $E,	 0,$400D,$2078,$203C; 0
					
		dc.w   $10		; 8
off_40C82:	dc.w byte_40C98-off_40C82; 0 
					
		dc.w byte_40CA2-off_40C82; 1
		dc.w byte_40CAC-off_40C82; 2
		dc.w byte_40CB6-off_40C82; 3
		dc.w byte_40CC0-off_40C82; 4
		dc.w byte_40CCA-off_40C82; 5
		dc.w byte_40CD4-off_40C82; 6
		dc.w byte_40CDE-off_40C82; 7
		dc.w byte_40CE8-off_40C82; 8
		dc.w byte_40CF2-off_40C82; 9
		dc.w byte_40CFC-off_40C82; 10
byte_40C98:	dc.b   0,  1,  0,  1,$20,  0,$20,  0,  0,  0; 0	
byte_40CA2:	dc.b   0,  1,  0,  1,$20,  2,$20,  1,  0,  0; 0	
byte_40CAC:	dc.b   0,  1,  0,  1,$20,  4,$20,  2,  0,  0; 0	
byte_40CB6:	dc.b   0,  1,  0,  1,$20,  6,$20,  3,  0,  0; 0	
byte_40CC0:	dc.b   0,  1,  0,  1,$20,  8,$20,  4,  0,  0; 0	
byte_40CCA:	dc.b   0,  1,  0,  1,$20, $A,$20,  5,  0,  0; 0	
byte_40CD4:	dc.b   0,  1,  0,  1,$20, $C,$20,  6,  0,  0; 0	
byte_40CDE:	dc.b   0,  1,  0,  1,$20, $E,$20,  7,  0,  0; 0	
byte_40CE8:	dc.b   0,  1,  0,  1,$20,$10,$20,  8,  0,  0; 0	
byte_40CF2:	dc.b   0,  1,  0,  1,$20,$12,$20,  9,  0,  0; 0	
byte_40CFC:	dc.b   0,  1,  0,  1,$20,$14,$20, $A,  0,  0; 0	

; =============== S U B	R O U T	I N E =======================================


sub_40D06:				
					
		move.b	#1,(f_hud_score_update).w
		lea	(v_score).w,a3
		add.l	d0,(a3)
		move.l	#999999,d1
		cmp.l	(a3),d1
		bhi.s	loc_40D1E
		move.l	d1,(a3)

loc_40D1E:				
		move.l	(a3),d0
		cmp.l	(v_score_next_life).w,d0
		bcs.s	locret_40D40
		addi.l	#$1388,(v_score_next_life).w
		addq.b	#1,(v_lives).w
		addq.b	#1,(f_hud_lives_update).w
		move.w	#$98,d0	
		jmp	(PlayMusic).l
; ===========================================================================

locret_40D40:				
		rts	
; End of function sub_40D06


; =============== S U B	R O U T	I N E =======================================


sub_40D42:				
		tst.w	(f_two_player).w
		beq.s	sub_40D06
		cmpa.w	#-$5000,a3
		beq.s	sub_40D06
		move.b	#1,(f_hud_score_update_p2).w
		lea	(v_score_p2).w,a3
		add.l	d0,(a3)
		move.l	#999999,d1
		cmp.l	(a3),d1
		bhi.s	loc_40D66
		move.l	d1,(a3)

loc_40D66:				
		move.l	(a3),d0
		cmp.l	(v_score_next_life_p2).w,d0
		bcs.s	locret_40D88
		addi.l	#$1388,(v_score_next_life_p2).w
		addq.b	#1,(v_lives_p2).w
		addq.b	#1,(f_hud_lives_update_p2).w
		move.w	#$98,d0	
		jmp	(PlayMusic).l
; ===========================================================================

locret_40D88:				
		rts	
; End of function sub_40D42


; =============== S U B	R O U T	I N E =======================================


sub_40D8A:				
		nop	
		lea	(vdp_data_port).l,a6
		tst.w	(f_two_player).w
		bne.w	loc_40F50
		tst.w	(f_debug_enable).w
		bne.w	loc_40E9A
		tst.b	(f_hud_score_update).w
		beq.s	loc_40DBA
		clr.b	(f_hud_score_update).w
		move.l	#$5C800003,d0
		move.l	(v_score).w,d1
		bsr.w	sub_41146

loc_40DBA:				
		tst.b	(v_hud_rings_update).w
		beq.s	loc_40DDA
		bpl.s	loc_40DC6
		bsr.w	sub_4105A

loc_40DC6:				
		clr.b	(v_hud_rings_update).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(v_rings).w,d1
		bsr.w	sub_4113C

loc_40DDA:				
		tst.b	(f_hud_time_update).w
		beq.s	loc_40E38
		tst.w	(f_pause).w
		bne.s	loc_40E38
		lea	(v_time).w,a1
		cmpi.l	#$93B3B,(a1)+
		beq.w	loc_40E84
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	loc_40E38
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	loc_40E18
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_40E18
		move.b	#9,(a1)

loc_40E18:				
					
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.b	(v_time_min).w,d1
		bsr.w	sub_41214
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(v_time_sec).w,d1
		bsr.w	loc_4121C

loc_40E38:				
					
		tst.b	(f_hud_lives_update).w
		beq.s	loc_40E46
		clr.b	(f_hud_lives_update).w
		bsr.w	sub_412E2

loc_40E46:				
		tst.b	(f_pass_bonus_update).w
		beq.s	locret_40E82
		clr.b	(f_pass_bonus_update).w
		move.l	#$64000002,(vdp_control_port).l
		moveq	#0,d1
		move.w	(v_total_bonus_countdown).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_1).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_2).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_3).w,d1
		bsr.w	loc_41274

locret_40E82:				
		rts	
; ===========================================================================

loc_40E84:				
		clr.b	(f_hud_time_update).w
		lea	($FFFFB000).w,a0
		movea.l	a0,a2
		bsr.w	KillCharacter
		move.b	#1,(f_time_over).w
		rts	
; ===========================================================================

loc_40E9A:				
		bsr.w	sub_410E4
		tst.b	(v_hud_rings_update).w
		beq.s	loc_40EBE
		bpl.s	loc_40EAA
		bsr.w	sub_4105A

loc_40EAA:				
		clr.b	(v_hud_rings_update).w
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(v_rings).w,d1
		bsr.w	sub_4113C

loc_40EBE:				
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(v_spritecount).w,d1
		bsr.w	loc_4121C
		tst.b	(f_hud_lives_update).w
		beq.s	loc_40EDC
		clr.b	(f_hud_lives_update).w
		bsr.w	sub_412E2

loc_40EDC:				
		tst.b	(f_pass_bonus_update).w
		beq.s	loc_40F18
		clr.b	(f_pass_bonus_update).w
		move.l	#$64000002,(vdp_control_port).l
		moveq	#0,d1
		move.w	(v_total_bonus_countdown).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_1).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_2).w,d1
		bsr.w	loc_41274
		moveq	#0,d1
		move.w	(v_bonus_count_3).w,d1
		bsr.w	loc_41274

loc_40F18:				
		tst.w	(f_pause).w
		bne.s	locret_40F4E
		lea	(v_time).w,a1
		cmpi.l	#604987,(a1)+
		nop	
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	locret_40F4E
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	locret_40F4E
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	locret_40F4E
		move.b	#9,(a1)

locret_40F4E:				
					
		rts	
; ===========================================================================

loc_40F50:				
		tst.w	(f_pause).w
		bne.w	locret_4101A
		tst.b	(f_hud_time_update).w
		beq.s	loc_40F90
		lea	(v_time).w,a1
		cmpi.l	#$93B3B,(a1)+
		beq.w	loc_4102A
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	loc_40F90
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	loc_40F90
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_40F90
		move.b	#9,(a1)

loc_40F90:				
					
		tst.b	(f_hud_time_update_p2).w
		beq.s	loc_40FC8
		lea	(v_time_p2).w,a1
		cmpi.l	#$93B3B,(a1)+
		beq.w	loc_41044
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	loc_40FC8
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#$3C,(a1) ; '<'
		bcs.s	loc_40FC8
		move.b	#0,(a1)
		addq.b	#1,-(a1)
		cmpi.b	#9,(a1)
		bcs.s	loc_40FC8
		move.b	#9,(a1)

loc_40FC8:				
					
		tst.b	(f_hud_lives_update).w
		beq.s	loc_40FD6
		clr.b	(f_hud_lives_update).w
		bsr.w	sub_412E2

loc_40FD6:				
		tst.b	(f_hud_lives_update_p2).w
		beq.s	loc_40FE4
		clr.b	(f_hud_lives_update_p2).w
		bsr.w	sub_412D4

loc_40FE4:				
		move.b	(f_hud_time_update).w,d0
		or.b	(f_hud_time_update_p2).w,d0
		beq.s	locret_4101A
		lea	(v_loser_time_left).w,a1
		tst.w	(a1)+
		beq.s	locret_4101A
		subq.b	#1,-(a1)
		bhi.s	locret_4101A
		move.b	#$3C,(a1) ; '<'

loc_40FFE:
		cmpi.b	#$C,-1(a1)
		bne.s	loc_41010
		move.w	#$9F,d0	

loc_4100A:
		jsr	(PlayMusic).l

loc_41010:				
		subq.b	#1,-(a1)
		bcc.s	locret_4101A
		move.w	#0,(a1)
		bsr.s	sub_4101C

locret_4101A:				
					
		rts	
; End of function sub_40D8A


; =============== S U B	R O U T	I N E =======================================


sub_4101C:				
		tst.b	(f_hud_time_update).w
		bne.s	loc_4102A
		tst.b	(f_hud_time_update_p2).w
		bne.s	loc_41044
		rts	
; ===========================================================================

loc_4102A:				
					
		clr.b	(f_hud_time_update).w
		lea	($FFFFB000).w,a0
		movea.l	a0,a2
		bsr.w	KillCharacter
		move.b	#1,(f_time_over).w
		tst.b	(f_hud_time_update_p2).w
		beq.s	locret_41058

loc_41044:				
					
		clr.b	(f_hud_time_update_p2).w
		lea	($FFFFB040).w,a0
		movea.l	a0,a2
		bsr.w	KillCharacter
		move.b	#1,(f_time_over_p2).w

locret_41058:				
		rts	
; End of function sub_4101C


; =============== S U B	R O U T	I N E =======================================


sub_4105A:				
					
		move.l	#$5F400003,(vdp_control_port).l
		lea	(byte_410E0)(pc),a2
		move.w	#2,d2
		bra.s	loc_41090
; ===========================================================================

loc_4106E:				
		lea	(vdp_data_port).l,a6
		bsr.w	sub_412E2
		tst.w	(f_two_player).w
		bne.s	loc_410BC
		move.l	#$5C400003,(vdp_control_port).l
		lea	(byte_410D4)(pc),a2
		move.w	#$E,d2

loc_41090:				
		lea	(Art_HUD)(pc),a1

loc_41094:				
		move.w	#$F,d1
		move.b	(a2)+,d0
		bmi.s	loc_410B0
		ext.w	d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a3

loc_410A4:				
		move.l	(a3)+,(a6)
		dbf	d1,loc_410A4

loc_410AA:				
		dbf	d2,loc_41094
		rts	
; ===========================================================================

loc_410B0:				
					
		move.l	#0,(a6)
		dbf	d1,loc_410B0
		bra.s	loc_410AA
; End of function sub_4105A

; ===========================================================================

loc_410BC:				
		bsr.w	sub_412D4
		move.l	#Art_HUD,d1
		move.w	#$DC40,d2
		move.w	#$160,d3
		jmp	(QueueDMATransfer).l
; ===========================================================================
byte_410D4:	dc.b $16		; 0 
		dc.b $FF		; 1
		dc.b $FF		; 2
		dc.b $FF		; 3
		dc.b $FF		; 4
		dc.b $FF		; 5
		dc.b $FF		; 6
		dc.b   0		; 7
		dc.b   0		; 8
		dc.b $14		; 9
		dc.b   0		; 10
		dc.b   0		; 11
byte_410E0:	dc.b $FF		; 0 
		dc.b $FF		; 1
		dc.b   0		; 2
		dc.b   0		; 3

; =============== S U B	R O U T	I N E =======================================


sub_410E4:				
		move.l	#$5C400003,(vdp_control_port).l
		move.w	(v_camera_x_pos).w,d1
		swap	d1
		move.w	($FFFFB008).w,d1
		bsr.s	loc_41104
		move.w	(v_camera_y_pos).w,d1
		swap	d1
		move.w	($FFFFB00C).w,d1

loc_41104:				
		moveq	#7,d6
		lea	(Art_HUDText).l,a1

loc_4110C:				
		rol.w	#4,d1
		move.w	d1,d2
		andi.w	#$F,d2
		cmpi.w	#$A,d2
		bcs.s	loc_4111E
		addi.w	#7,d2

loc_4111E:				
		lsl.w	#5,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		swap	d1
		dbf	d6,loc_4110C
		rts	
; End of function sub_410E4


; =============== S U B	R O U T	I N E =======================================


sub_4113C:				
					
		lea	(byte_41208).l,a2
		moveq	#2,d6
		bra.s	loc_4114E
; End of function sub_4113C


; =============== S U B	R O U T	I N E =======================================


sub_41146:				
		lea	(byte_411FC).l,a2
		moveq	#5,d6

loc_4114E:				
		moveq	#0,d4
		lea	(Art_HUD)(pc),a1

loc_41154:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_41158:				
		sub.l	d3,d1
		bcs.s	loc_41160
		addq.w	#1,d2
		bra.s	loc_41158
; ===========================================================================

loc_41160:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_4116A
		move.w	#1,d4

loc_4116A:				
		tst.w	d4
		beq.s	loc_41198
		lsl.w	#6,d2
		move.l	d0,4(a6)
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

loc_41198:				
		addi.l	#$400000,d0
		dbf	d6,loc_41154
		rts	
; End of function sub_41146


; =============== S U B	R O U T	I N E =======================================


sub_411A4:				
					
		move.l	#$5F800003,(vdp_control_port).l
		lea	(vdp_data_port).l,a6
		lea	(byte_4120C).l,a2
		moveq	#1,d6
		moveq	#0,d4
		lea	(Art_HUD)(pc),a1

loc_411C2:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_411C6:				
		sub.l	d3,d1
		bcs.s	loc_411CE
		addq.w	#1,d2
		bra.s	loc_411C6
; ===========================================================================

loc_411CE:				
		add.l	d3,d1
		lsl.w	#6,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		dbf	d6,loc_411C2
		rts	
; End of function sub_411A4

; ===========================================================================
byte_411FC:	dc.b   0		; 0 
		dc.b   1		; 1
		dc.b $86		; 2
		dc.b $A0		; 3
		dc.b   0		; 4
		dc.b   0		; 5
		dc.b $27		; 6
		dc.b $10		; 7
byte_41204:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   3		; 2
		dc.b $E8		; 3
byte_41208:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b $64		; 3
byte_4120C:	dc.b   0		; 0 
					
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b  $A		; 3
byte_41210:	dc.b   0		; 0 
		dc.b   0		; 1
		dc.b   0		; 2
		dc.b   1		; 3

; =============== S U B	R O U T	I N E =======================================


sub_41214:				
		lea	(byte_41210)(pc),a2
		moveq	#0,d6
		bra.s	loc_41222
; ===========================================================================

loc_4121C:				
					
		lea	(byte_4120C)(pc),a2
		moveq	#1,d6

loc_41222:				
		moveq	#0,d4
		lea	(Art_HUD)(pc),a1

loc_41228:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_4122C:				
		sub.l	d3,d1
		bcs.s	loc_41234
		addq.w	#1,d2
		bra.s	loc_4122C
; ===========================================================================

loc_41234:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_4123E
		move.w	#1,d4

loc_4123E:				
		lsl.w	#6,d2
		move.l	d0,4(a6)
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		addi.l	#$400000,d0
		dbf	d6,loc_41228
		rts	
; End of function sub_41214

; ===========================================================================

loc_41274:				
					
		lea	(byte_41204)(pc),a2
		moveq	#3,d6
		moveq	#0,d4
		lea	(Art_HUD)(pc),a1

loc_41280:				
		moveq	#0,d2
		move.l	(a2)+,d3

loc_41284:				
		sub.l	d3,d1
		bcs.s	loc_4128C
		addq.w	#1,d2
		bra.s	loc_41284
; ===========================================================================

loc_4128C:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_41296
		move.w	#1,d4

loc_41296:				
		tst.w	d4
		beq.s	loc_412C6
		lsl.w	#6,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

loc_412C0:				
		dbf	d6,loc_41280
		rts	
; ===========================================================================

loc_412C6:				
		moveq	#$F,d5

loc_412C8:				
		move.l	#0,(a6)
		dbf	d5,loc_412C8
		bra.s	loc_412C0

; =============== S U B	R O U T	I N E =======================================


sub_412D4:				
					
		move.l	#$5FA00003,d0
		moveq	#0,d1
		move.b	(v_lives_p2).w,d1
		bra.s	loc_412EE
; End of function sub_412D4


; =============== S U B	R O U T	I N E =======================================


sub_412E2:				
					
		move.l	#$7BA00003,d0
		moveq	#0,d1
		move.b	(v_lives).w,d1

loc_412EE:				
		lea	(byte_4120C)(pc),a2
		moveq	#1,d6
		moveq	#0,d4
		lea	(Art_LivesNums)(pc),a1

loc_412FA:				
		move.l	d0,4(a6)
		moveq	#0,d2
		move.l	(a2)+,d3

loc_41302:				
		sub.l	d3,d1
		bcs.s	loc_4130A
		addq.w	#1,d2
		bra.s	loc_41302
; ===========================================================================

loc_4130A:				
		add.l	d3,d1
		tst.w	d2
		beq.s	loc_41314
		move.w	#1,d4

loc_41314:				
		tst.w	d4
		beq.s	loc_4133A

loc_41318:				
		lsl.w	#5,d2
		lea	(a1,d2.w),a3
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)
		move.l	(a3)+,(a6)

loc_4132E:				
		addi.l	#$400000,d0
		dbf	d6,loc_412FA
		rts	
; ===========================================================================

loc_4133A:				
		tst.w	d6
		beq.s	loc_41318
		moveq	#7,d5

loc_41340:				
		move.l	#0,(a6)
		dbf	d5,loc_41340
		bra.s	loc_4132E
; End of function sub_412E2

; ===========================================================================

		incfile Art_HUD
		incfile	Art_LivesNums
		incfile	Art_HUDText

; ===========================================================================

	if ~RemoveJmpTos
sub_41A6C:							
		jmp	loc_16DC6
sub_41A72:				
		jmp	loc_1682A
		
		align 4
	endc
	
; ===========================================================================
; ---------------------------------------------------------------------------
; When debug mode is currently in use
; ---------------------------------------------------------------------------
; loc_41A78:
DebugMode:				
		moveq	#0,d0
		move.b	(v_debug_active).w,d0
		move.w	Debug_Index(pc,d0.w),d1
		jmp	Debug_Index(pc,d1.w)
; ===========================================================================
; off_41A86:
Debug_Index:
		dc.w loc_41A8A-Debug_Index; 0 		
		dc.w loc_41B0C-Debug_Index; 2
; ===========================================================================

loc_41A8A:				
		addq.b	#2,(v_debug_active).w
		move.w	(v_boundary_top_next).w,(v_boundary_top_next_debug).w
		move.w	(v_boundary_bottom_next).w,(v_boundary_bottom_next_debug).w
		cmpi.b	#$10,(v_zone).w
		bne.s	loc_41AAE
		move.w	#0,(v_boundary_left_next).w
		move.w	#$3FFF,(v_boundary_right_next).w

	loc_41AAE:				
		andi.w	#$7FF,(v_ost_maincharacter+ost_y_pos).w
		andi.w	#$7FF,(v_camera_y_pos).w
		andi.w	#$7FF,(v_bg1_y_pos).w
		clr.b	(f_disable_horiz_scroll).w
		move.b	#0,ost_frame(a0)
		move.b	#0,ost_anim(a0)
		cmpi.b	#$10,(v_gamemode).w
		bne.s	loc_41ADC
		moveq	#6,d0
		bra.s	loc_41AE2
; ===========================================================================

loc_41ADC:				
		moveq	#0,d0
		move.b	(v_zone).w,d0

loc_41AE2:				
		lea	(off_41D0C).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d6
		cmp.b	(v_debug_item_index).w,d6
		bhi.s	loc_41AFC
		move.b	#0,(v_debug_item_index).w

loc_41AFC:				
		bsr.w	sub_41CEC
		move.b	#$C,(v_debug_move_delay).w
		move.b	#1,(v_debug_move_speed).w

loc_41B0C:				
		moveq	#6,d0
		cmpi.b	#$10,(v_gamemode).w
		beq.s	loc_41B1C
		moveq	#0,d0
		move.b	(v_zone).w,d0

loc_41B1C:				
		lea	(off_41D0C).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d6
		bsr.w	sub_41B34
		jmp	DisplaySprite

; =============== S U B	R O U T	I N E =======================================


sub_41B34:				
		moveq	#0,d4
		move.w	#1,d1
		move.b	(v_joypad_press_actual).w,d4
		andi.w	#$F,d4
		bne.s	loc_41B76
		move.b	(v_joypad_hold_actual).w,d0
		andi.w	#$F,d0
		bne.s	loc_41B5E
		move.b	#$C,(v_debug_move_delay).w
		move.b	#$F,(v_debug_move_speed).w
		bra.w	loc_41BDA
; ===========================================================================

loc_41B5E:				
		subq.b	#1,(v_debug_move_delay).w
		bne.s	loc_41B7A
		move.b	#1,(v_debug_move_delay).w
		addq.b	#1,(v_debug_move_speed).w
		bne.s	loc_41B76
		move.b	#-1,(v_debug_move_speed).w

loc_41B76:				
					
		move.b	(v_joypad_hold_actual).w,d4

loc_41B7A:				
		moveq	#0,d1
		move.b	(v_debug_move_speed).w,d1
		addq.w	#1,d1
		swap	d1
		asr.l	#4,d1
		move.l	$C(a0),d2
		move.l	8(a0),d3
		btst	#0,d4
		beq.s	loc_41BA4
		sub.l	d1,d2
		moveq	#0,d0
		move.w	(v_boundary_top_next).w,d0
		swap	d0
		cmp.l	d0,d2
		bge.s	loc_41BA4
		move.l	d0,d2

loc_41BA4:				
					
		btst	#1,d4
		beq.s	loc_41BBE
		add.l	d1,d2
		moveq	#0,d0
		move.w	(v_boundary_bottom_next).w,d0
		addi.w	#$DF,d0	
		swap	d0
		cmp.l	d0,d2
		blt.s	loc_41BBE
		move.l	d0,d2

loc_41BBE:				
					
		btst	#2,d4
		beq.s	loc_41BCA
		sub.l	d1,d3
		bcc.s	loc_41BCA
		moveq	#0,d3

loc_41BCA:				
					
		btst	#3,d4
		beq.s	loc_41BD2
		add.l	d1,d3

loc_41BD2:				
		move.l	d2,$C(a0)
		move.l	d3,8(a0)

loc_41BDA:				
		btst	#6,(v_joypad_hold_actual).w
		beq.s	loc_41C12
		btst	#5,(v_joypad_press_actual).w
		beq.s	loc_41BF6
		subq.b	#1,(v_debug_item_index).w
		bcc.s	loc_41C0E
		add.b	d6,(v_debug_item_index).w
		bra.s	loc_41C0E
; ===========================================================================

loc_41BF6:				
		btst	#6,(v_joypad_press_actual).w
		beq.s	loc_41C12
		addq.b	#1,(v_debug_item_index).w
		cmp.b	(v_debug_item_index).w,d6
		bhi.s	loc_41C0E
		move.b	#0,(v_debug_item_index).w

loc_41C0E:				
					
		bra.w	sub_41CEC
; ===========================================================================

loc_41C12:				
					
		btst	#5,(v_joypad_press_actual).w
		beq.s	loc_41C56
		jsr	SingleObjLoad
		bne.s	loc_41C56
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		_move.b	4(a0),0(a1)
		move.b	1(a0),1(a1)
		move.b	1(a0),$22(a1)
		andi.b	#$7F,$22(a1) ; ''
		moveq	#0,d0
		move.b	(v_debug_item_index).w,d0
		lsl.w	#3,d0
		move.b	4(a2,d0.w),$28(a1)
		rts	
; ===========================================================================

loc_41C56:				
					
		btst	#4,(v_joypad_press_actual).w
		beq.s	locret_41CB6
		moveq	#0,d0
		move.w	d0,(v_debug_active).w
		lea	($FFFFB000).w,a1
		move.l	#Map_Sonic,4(a1)
		move.w	#$780,2(a1)
		tst.w	(f_two_player).w
		beq.s	loc_41C82
		move.w	#$3C0,2(a1)

loc_41C82:				
		bsr.s	sub_41CB8
		move.b	#$13,$16(a1)
		move.b	#9,$17(a1)
		move.w	(v_boundary_top_next_debug).w,(v_boundary_top_next).w
		move.w	(v_boundary_bottom_next_debug).w,(v_boundary_bottom_next).w
		cmpi.b	#$10,(v_gamemode).w
		bne.s	locret_41CB6
		move.b	#2,($FFFFB01C).w
		bset	#2,($FFFFB022).w
		bset	#1,($FFFFB022).w

locret_41CB6:				
					
		rts	
; End of function sub_41B34


; =============== S U B	R O U T	I N E =======================================


sub_41CB8:				
		move.b	d0,$1C(a1)
		move.w	d0,$A(a1)
		move.w	d0,$E(a1)
		move.b	d0,$2A(a1)
		move.b	d0,$39(a1)
		move.w	d0,$10(a1)
		move.w	d0,$12(a1)
		move.w	d0,$14(a1)
		move.b	#2,$22(a1)
		move.b	#2,$24(a1)
		move.b	#0,$25(a1)
		rts	
; End of function sub_41CB8


; =============== S U B	R O U T	I N E =======================================


sub_41CEC:				
					
		moveq	#0,d0
		move.b	(v_debug_item_index).w,d0
		lsl.w	#3,d0
		move.l	(a2,d0.w),4(a0)
		move.w	6(a2,d0.w),2(a0)
		move.b	5(a2,d0.w),$1A(a0)
		bsr.w	JmpTo66_Adjust2PArtPointer
		rts	
; End of function sub_41CEC

; ===========================================================================
; ---------------------------------------------------------------------------
; Offset index of object debug lists
; ---------------------------------------------------------------------------
off_41D0C:	dc.w DbgEHZ_41D40-off_41D0C; 0 
					
		dc.w DbgDef_41D2E-off_41D0C; 1
		dc.w DbgDef_41D2E-off_41D0C; 2
		dc.w DbgDef_41D2E-off_41D0C; 3
		dc.w DbgMTZ_41DDA-off_41D0C; 4
		dc.w DbgMTZ_41DDA-off_41D0C; 5
		dc.w DbgWFZ_41EEC-off_41D0C; 6
		dc.w DbgHTZ_41FEE-off_41D0C; 7
		dc.w DbgOOZ_420E8-off_41D0C; 8
		dc.w DbgDef_41D2E-off_41D0C; 9
		dc.w DbgOOZ_420E8-off_41D0C; 10
		dc.w DbgMCZ_421F2-off_41D0C; 11
		dc.w DbgCNZ_422B4-off_41D0C; 12
		dc.w DbgCPZ_42376-off_41D0C; 13
		dc.w DbgDef_41D2E-off_41D0C; 14
		dc.w DbgARZ_42438-off_41D0C; 15
		dc.w DbgSCZ_42522-off_41D0C; 16
DbgDef_41D2E:	dc.w 2			
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
DbgEHZ_41D40:	dc.w $13		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $49000000+Map_20C50
		dc.w 0
		dc.w $239E
		dc.l $49000000+Map_20C50
		dc.w $203
		dc.w $239E
		dc.l $49000000+Map_20C50
		dc.w $405
		dc.w $239E
		dc.l $18000000+Map_107F6
		dc.w $100
		dc.w $4000
		dc.l $18000000+Map_107F6
		dc.w $9A01
		dc.w $4000
		dc.l $36000000+Map_15B68
		dc.w 0
		dc.w $2434
		dc.l $41000000+Map_1901C
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_1901C
		dc.w $A006
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $3007
		dc.w $43C
		dc.l $41000000+Map_1901C
		dc.w $400A
		dc.w $43C
		dc.l $4B000000+Map_2D2EA
		dc.w 0
		dc.w $3D2
		dc.l $5C000000+Map_2D442
		dc.w 0
		dc.w $414
		dc.l $9D000000+Map_37D96
		dc.w $1E00
		dc.w $3EE
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgMTZ_41DDA:	dc.w $22		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $42000000+Map_2686C
		dc.w $107
		dc.w $6000
		dc.l $64000000+Map_26A5C
		dc.w $100
		dc.w $2000
		dc.l $64000000+Map_26A5C
		dc.w $1101
		dc.w $2000
		dc.l $65000000+Map_26EC8
		dc.w $8000
		dc.w $6000
		dc.l $65000000+Map_26EC8
		dc.w $1301
		dc.w $6000
		dc.l $47000000+Map_24D96
		dc.w 2
		dc.w $424
		dc.l $2D000000+Map_11822
		dc.w $101
		dc.w $6000
		dc.l $66000000+Map_27120
		dc.w $100
		dc.w $8680
		dc.l $66000000+Map_27120
		dc.w $1101
		dc.w $8680
		dc.l $68000000+Map_27750
		dc.w 4
		dc.w $6414
		dc.l $69000000+Map_27A26
		dc.w $400
		dc.w $2500
		dc.l $6A000000+Map_26EC8
		dc.w 1
		dc.w $6000
		dc.l $6B000000+Map_26EC8
		dc.w $701
		dc.w $6000
		dc.l $6D000000+Map_27750
		dc.w 0
		dc.w $241C
		dc.l $6E000000+Map_2852C
		dc.w 0
		dc.w $6000
		dc.l $6E000000+Map_2852C
		dc.w $1001
		dc.w $6000
		dc.l $6E000000+Map_2852C
		dc.w $2002
		dc.w $6000
		dc.l $70000000+Map_28786
		dc.w $1000
		dc.w $E378
		dc.l $71000000+Map_11576
		dc.w $2205
		dc.w $4536
		dc.l $1C000000+Map_11552
		dc.w 0
		dc.w $43FD
		dc.l $1C000000+Map_11552
		dc.w $101
		dc.w $43FD
		dc.l $1C000000+Map_11552
		dc.w $302
		dc.w $23FD
		dc.l $65000000+Map_26EC8
		dc.w $B000
		dc.w $6000
		dc.l $9F000000+Map_38314
		dc.w $2400
		dc.w $31C
		dc.l $A4000000+Map_38A96
		dc.w $2E00
		dc.w $8368
		dc.l $A1000000+Map_385E2
		dc.w $2800
		dc.w $243C
		dc.l $31000000+Map_20E74
		dc.w 0
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $101
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $202
		dc.w $8680
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgWFZ_41EEC:	dc.w $20		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $8B000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $B3000000+Map_3B32C
		dc.w $5E00
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6001
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6202
		dc.w $454F
		dc.l $B4000000+Map_3B3BE
		dc.w $6400
		dc.w $A561
		dc.l $B5000000+Map_3B548
		dc.w $6600
		dc.w $A3CD
		dc.l $B5000000+Map_3B548
		dc.w $6800
		dc.w $A3CD
		dc.l $AD000000+Map_395B4
		dc.w $420C
		dc.w $379
		dc.l $AE000000+Map_395B4
		dc.w $440B
		dc.w $379
		dc.l $B6000000+Map_3B856
		dc.w $6A00
		dc.w $A393
		dc.l $B6000000+Map_3B856
		dc.w $6C00
		dc.w $A393
		dc.l $B6000000+Map_3B856
		dc.w $6E00
		dc.w $A393
		dc.l $B6000000+Map_3B856
		dc.w $7000
		dc.w $A393
		dc.l $B7000000+Map_3B8E4
		dc.w $7200
		dc.w $C39F
		dc.l $B8000000+Map_3BA46
		dc.w $7400
		dc.w $3AB
		dc.l $B9000000+Map_3BB18
		dc.w $7600
		dc.w $C3C3
		dc.l $BA000000+Map_3BB70
		dc.w $7800
		dc.w $C3EA
		dc.l $BC000000+Map_3BC08
		dc.w $7C00
		dc.w $4465
		dc.l $BD000000+Map_3BD3E
		dc.w $7E00
		dc.w $E40E
		dc.l $BD000000+Map_3BD3E
		dc.w $8000
		dc.w $E40E
		dc.l $BE000000+Map_3BE46
		dc.w $8200
		dc.w $E41A
		dc.l $BF000000+Map_3BEE0
		dc.w $8400
		dc.w $E450
		dc.l $C0000000+Map_3C098
		dc.w $800
		dc.w $245C
		dc.l $C1000000+Map_3C280
		dc.w $8800
		dc.w $E48C
		dc.l $C2000000+Map_3C3C2
		dc.w $8A00
		dc.w $A461
		dc.l $19000000+Map_2222A
		dc.w $3803
		dc.w $A46D
		dc.l $D9000000+Map_12382
		dc.w 0
		dc.w $26BC
		dc.l $80000000+Map_29DD0
		dc.w 0
		dc.w $23FE
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgHTZ_41FEE:	dc.w $1F		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $84000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $84000000+Map_1FFB8
		dc.w $404
		dc.w $6BC
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $18000000+Map_107F6
		dc.w $100
		dc.w $4000
		dc.l $18000000+Map_107F6
		dc.w $9A01
		dc.w $4000
		dc.l $36000000+Map_15B68
		dc.w 0
		dc.w $2434
		dc.l $14000000+Map_21CF0
		dc.w 0
		dc.w $3C6
		dc.l $2D000000+Map_11822
		dc.w 0
		dc.w $2426
		dc.l $2F000000+Map_236FA
		dc.w 0
		dc.w $C000
		dc.l $20000000+Map_23254
		dc.w $4402
		dc.w $8416
		dc.l $41000000+Map_1901C
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_1901C
		dc.w $A006
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $3007
		dc.w $43C
		dc.l $41000000+Map_1901C
		dc.w $400A
		dc.w $43C
		dc.l $16000000+Map_21F14
		dc.w 0
		dc.w $43E6
		dc.l $1C000000+Map_21F14
		dc.w $403
		dc.w $43E6
		dc.l $1C000000+Map_21F14
		dc.w $504
		dc.w $43E6
		dc.l $1C000000+Map_113D6
		dc.w $700
		dc.w $4000
		dc.l $1C000000+Map_113D6
		dc.w $801
		dc.w $4000
		dc.l $32000000+Map_23852
		dc.w 0
		dc.w $43B2
		dc.l $31000000+Map_20E74
		dc.w 0
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $101
		dc.w $8680
		dc.l $31000000+Map_20E74
		dc.w $202
		dc.w $8680
		dc.l $96000000+Map_37678
		dc.w $E02
		dc.w $637E
		dc.l $92000000+Map_37092
		dc.w $A00
		dc.w 0
		dc.l $95000000+Map_372E6
		dc.w 0
		dc.w 0
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgOOZ_420E8:	dc.w $21		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $33000000+Map_23DDC
		dc.w $100
		dc.w $632C
		dc.l $43000000+Map_23FE0
		dc.w 0
		dc.w $C30C
		dc.l $19000000+Map_2222A
		dc.w $2302
		dc.w $62F4
		dc.l $45000000+Map_2451A
		dc.w $200
		dc.w $43C5
		dc.l $45000000+Map_2451A
		dc.w $120A
		dc.w $43C5
		dc.l $46000000+Map_24C52
		dc.w 1
		dc.w $6354
		dc.l $47000000+Map_24D96
		dc.w 2
		dc.w $424
		dc.l $15000000+Map_101E8
		dc.w $8801
		dc.w $43E3
		dc.l $3D000000+Map_250BA
		dc.w 0
		dc.w $6332
		dc.l $48000000+Map_254FE
		dc.w $8000
		dc.w $6368
		dc.l $48000000+Map_254FE
		dc.w $8101
		dc.w $6368
		dc.l $48000000+Map_254FE
		dc.w $8202
		dc.w $6368
		dc.l $48000000+Map_254FE
		dc.w $8303
		dc.w $6368
		dc.l $1F000000+Map_110C6
		dc.w 0
		dc.w $639D
		dc.l $3F000000+Map_2AA12
		dc.w 0
		dc.w $6403
		dc.l $3F000000+Map_2AAC4
		dc.w $8000
		dc.w $6403
		dc.l $50000000+Map_2CF94
		dc.w 0
		dc.w $2500
		dc.l $4A000000+Map_2CBFE
		dc.w 0
		dc.w $2538
		dc.l $1C000000+Map_11406
		dc.w $A00
		dc.w $4346
		dc.l $1C000000+Map_11406
		dc.w $B01
		dc.w $4346
		dc.l $1C000000+Map_11406
		dc.w $C02
		dc.w $4346
		dc.l $1C000000+Map_11406
		dc.w $D03
		dc.w $4346
		dc.l $1C000000+Map_11406
		dc.w $E04
		dc.w $4346
		dc.l $1C000000+Map_11406
		dc.w $F05
		dc.w $4346
		dc.l $1C000000+Map_114AE
		dc.w $1000
		dc.w $4346
		dc.l $1C000000+Map_114AE
		dc.w $1101
		dc.w $4346
		dc.l $1C000000+Map_114AE
		dc.w $1202
		dc.w $4346
		dc.l $1C000000+Map_114AE
		dc.w $1303
		dc.w $4346
		dc.l $1C000000+Map_114AE
		dc.w $1404
		dc.w $4346
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgMCZ_421F2:	dc.w $18		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $15000000+Map_10256
		dc.w $4802
		dc.w 0
		dc.l $1F000000+Map_11106
		dc.w 0
		dc.w $63F4
		dc.l $73000000+Map_28B9C
		dc.w $F500
		dc.w $26BC
		dc.l $6A000000+Map_27D30
		dc.w $1800
		dc.w $63D4
		dc.l $2A000000+Map_11666
		dc.w 0
		dc.w $4000
		dc.l $36000000+Map_15B68
		dc.w 0
		dc.w $2434
		dc.l $36000000+Map_15B68
		dc.w $4004
		dc.w $242C
		dc.l $41000000+Map_1901C
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $9003
		dc.w $470
		dc.l $40000000+Map_265F4
		dc.w $100
		dc.w $440
		dc.l $74000000+Map_20F66
		dc.w $1100
		dc.w $8680
		dc.l $75000000+Map_28D8A
		dc.w $1802
		dc.w $2000
		dc.l $76000000+Map_28F3A
		dc.w 0
		dc.w 0
		dc.l $77000000+Map_29064
		dc.w $100
		dc.w $643C
		dc.l $7F000000+Map_29938
		dc.w 0
		dc.w $640E
		dc.l $80000000+Map_29C64
		dc.w 0
		dc.w $641E
		dc.l $81000000+Map_2A24E
		dc.w 1
		dc.w $643C
		dc.l $7A000000+Map_10256
		dc.w $1200
		dc.w 0
		dc.l $A3000000+Map_388F0
		dc.w $2C00
		dc.w $83A8
		dc.l $9E000000+Map_37FF2
		dc.w $2200
		dc.w $23C0
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgCNZ_422B4:	dc.w $18		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $84000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $84000000+Map_1FFB8
		dc.w $404
		dc.w $6BC
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $3000000+Map_1FFB8
		dc.w $D05
		dc.w $26BC
		dc.l $44000000+Map_1F85A
		dc.w 0
		dc.w $439A
		dc.l $85000000+Map_2B07E
		dc.w 0
		dc.w $422
		dc.l $85000000+Map_2B0EC
		dc.w $8100
		dc.w $402
		dc.l $86000000+Map_2B45A
		dc.w 0
		dc.w $43B2
		dc.l $86000000+Map_2B45A
		dc.w $104
		dc.w $43B2
		dc.l $D2000000+Map_2B694
		dc.w $100
		dc.w $437C
		dc.l $D3000000+Map_2B8D4
		dc.w 0
		dc.w $380
		dc.l $D4000000+Map_2B9CA
		dc.w 0
		dc.w $436C
		dc.l $D4000000+Map_2B9CA
		dc.w $200
		dc.w $436C
		dc.l $D5000000+Map_2BB40
		dc.w $1800
		dc.w $4384
		dc.l $D6000000+Map_2BEBC
		dc.w $100
		dc.w $388
		dc.l $D7000000+Map_2C626
		dc.w 0
		dc.w $4394
		dc.l $D8000000+Map_2C8C4
		dc.w 0
		dc.w $43E6
		dc.l $D8000000+Map_2C8C4
		dc.w $4001
		dc.w $43E6
		dc.l $D8000000+Map_2C8C4
		dc.w $8002
		dc.w $43E6
		dc.l $C8000000+Map_3D450
		dc.w $AC00
		dc.w $8340
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgCPZ_42376:	dc.w $18		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $B000000+Map_obj0B
		dc.w $7000
		dc.w $E3B0
		dc.l $1B000000+Map_223E2
		dc.w 0
		dc.w $E39C
		dc.l $1D000000+Map_22576
		dc.w $500
		dc.w $E43C
		dc.l $19000000+Map_2222A
		dc.w $600
		dc.w $63A0
		dc.l $2D000000+Map_11822
		dc.w $202
		dc.w $2394
		dc.l $32000000+Map_23886
		dc.w 0
		dc.w $6430
		dc.l $6B000000+Map_2800E
		dc.w $1000
		dc.w $6418
		dc.l $78000000+Map_2800E
		dc.w 0
		dc.w $6418
		dc.l $7A000000+Map_29564
		dc.w 0
		dc.w $E418
		dc.l $7B000000+Map_29780
		dc.w $200
		dc.w $3E0
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $3000000+Map_1FFB8
		dc.w $D05
		dc.w $26BC
		dc.l $36000000+Map_15B68
		dc.w 0
		dc.w $2434
		dc.l $41000000+Map_1901C
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_1901C
		dc.w $A006
		dc.w $45C
		dc.l $40000000+Map_265F4
		dc.w $100
		dc.w $440
		dc.l $A5000000+Map_38CCA
		dc.w $3200
		dc.w $252D
		dc.l $A6000000+Map_38CCA
		dc.w $3203
		dc.w $252D
		dc.l $A7000000+Map_3921A
		dc.w $3600
		dc.w $A500
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgARZ_42438:	dc.w $1D		
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $79000000+Map_1F424
		dc.w $100
		dc.w $47C
		dc.l $15000000+Map_1021E
		dc.w $8802
		dc.w 0
		dc.l $18000000+Map_1084E
		dc.w $100
		dc.w $4000
		dc.l $18000000+Map_1084E
		dc.w $9A01
		dc.w $4000
		dc.l $22000000+Map_25804
		dc.w 1
		dc.w $417
		dc.l $23000000+Map_259E6
		dc.w 0
		dc.w $2000
		dc.l $2B000000+Map_25C6E
		dc.w 0
		dc.w $2000
		dc.l $2C000000+Map_20E74
		dc.w 0
		dc.w $8680
		dc.l $2C000000+Map_20E74
		dc.w $101
		dc.w $8680
		dc.l $2C000000+Map_20E74
		dc.w $202
		dc.w $8680
		dc.l $40000000+Map_265F4
		dc.w $100
		dc.w $440
		dc.l $41000000+Map_1901C
		dc.w $8100
		dc.w $45C
		dc.l $41000000+Map_1901C
		dc.w $9003
		dc.w $470
		dc.l $41000000+Map_1901C
		dc.w $A006
		dc.w $45C
		dc.l $3000000+Map_1FFB8
		dc.w $901
		dc.w $26BC
		dc.l $36000000+Map_15B68
		dc.w 0
		dc.w $2434
		dc.l $2D000000+Map_11822
		dc.w $303
		dc.w $23F8
		dc.l $1F000000+Map_1115E
		dc.w 0
		dc.w $4000
		dc.l $82000000+Map_2A476
		dc.w $300
		dc.w 0
		dc.l $82000000+Map_2A476
		dc.w $1101
		dc.w 0
		dc.l $83000000+Map_1021E
		dc.w $1001
		dc.w 0
		dc.l $24000000+Map_1FBF6
		dc.w $810E
		dc.w $855B
		dc.l $91000000+Map_36EF6
		dc.w $800
		dc.w $253B
		dc.l $8C000000+Map_36A4E
		dc.w 0
		dc.w $A500
		dc.l $8D000000+Map_36CF0
		dc.w $200
		dc.w $A509
		dc.l $8E000000+Map_36CF0
		dc.w $200
		dc.w $A509
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680
DbgSCZ_42522:	dc.w $D			
		dc.l $25000000+Map_12382; 0
		dc.w 0
		dc.w $26BC
		dc.l $26000000+Map_12D36
		dc.w $800
		dc.w $680
		dc.l $8B000000+Map_1FFB8
		dc.w 0
		dc.w $6BC
		dc.l $B3000000+Map_3B32C
		dc.w $5E00
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6001
		dc.w $454F
		dc.l $B3000000+Map_3B32C
		dc.w $6202
		dc.w $454F
		dc.l $B4000000+Map_3B3BE
		dc.w $6400
		dc.w $A561
		dc.l $B5000000+Map_3B548
		dc.w $6600
		dc.w $A3CD
		dc.l $B5000000+Map_3B548
		dc.w $6800
		dc.w $A3CD
		dc.l $9A000000+Map_37B62
		dc.w $1600
		dc.w $38A
		dc.l $AC000000+Map_393CC
		dc.w $4000
		dc.w $565
		dc.l $99000000+Map_3789A
		dc.w $1200
		dc.w $A36E
		dc.l $3E000000+Map_3F436
		dc.w 0
		dc.w $2680


    if ~RemoveJmpTos
JmpTo66_Adjust2PArtPointer:				
		jmp	(Adjust2PArtPointer).l
		align 4	
	endc


; ===========================================================================		
; ---------------------------------------------------------------------------
; Level Headers

; This struct array tells the engine where to find all the art associated with
; a particular zone. Each zone gets three longwords, in which it stores three
; pointers (in the lower 24 bits) and three jump table indeces (in the upper eight
; bits). The assembled data looks something like this:
;
; aaBBBBBB
; ccDDDDDD
; eeFFFFFF
;
; aa = index for primary pattern load request list
; BBBBBB = pointer to level art
; cc = index for secondary pattern load request list
; DDDDDD = pointer to 16x16 block mappings
; ee = index for palette
; FFFFFF = pointer to 128x128 block mappings
;
; Nemesis refers to this as the "main level load block". However, that name implies
; that this is code (obviously, it isn't), or at least that it points to the level's
; collision, object and ring placement arrays (it only points to art...
; although the 128x128 mappings do affect the actual level layout and collision)
; ---------------------------------------------------------------------------

lhead:	macro plc1,plc2,palette,art,map16x16,map128x128
		dc.l (plc1<<24)+art
		dc.l (plc2<<24)+map16x16
		dc.l (palette<<24)|map128x128
	endm
		
; LevelArtPointers:		
LevelHeaders:	
	
		lhead id_PLC_EHZ1,		id_PLC_EHZ2,		id_Pal_EHZ,		Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   0 ; Emerald Hill
		lhead id_PLC_Miles1Up,	id_PLC_MilesLife,	id_Pal_EHZ2,	Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   1 ; Level 1; unused	
		lhead id_PLC_Tails1Up,	id_PLC_TailsLife,	id_Pal_WZ,		Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   2 ; Level 2; unused
		lhead id_PLC_Unused1,	id_PLC_Unused2,		id_Pal_EHZ3,	Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   3 ; Level 3; unused
		lhead id_PLC_MTZ1,		id_PLC_MTZ2,		id_Pal_MTZ,		Kos_MTZ,	BM16_MTZ,	BM128_MTZ ;   4 ; Metropolis Acts 1 & 2
		lhead id_PLC_MTZ1,		id_PLC_MTZ2,		id_Pal_MTZ,		Kos_MTZ,	BM16_MTZ,	BM128_MTZ ;   5 ; Metropolis Act 3
		lhead id_PLC_WFZ1,		id_PLC_WFZ2,		id_Pal_WFZ,		Kos_SCZ,	BM16_WFZ,	BM128_WFZ ;   6 ; Wing Fortress
		lhead id_PLC_HTZ1,		id_PLC_HTZ2,		id_Pal_HTZ,		Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   7 ; Hill Top; art is patched later by LoadZoneTiles
		lhead id_PLC_HPZ1,		id_PLC_HPZ2,		id_Pal_HPZ,		Kos_HPZ,	BM16_HPZ,	BM128_HPZ ;   8 ; Hidden Palace; unused
		lhead id_PLC_Unused5,	id_PLC_Unused6,		id_Pal_EHZ4,	Kos_EHZ,	BM16_EHZ,	BM128_EHZ ;   9 ; Level 9; unused
		lhead id_PLC_OOZ1,		id_PLC_OOZ2,		id_Pal_OOZ,		Kos_OOZ,	BM16_OOZ,	BM128_OOZ ;  $A ; Oil Ocean
		lhead id_PLC_MCZ1,		id_PLC_MCZ2,		id_Pal_MCZ,		Kos_MCZ,	BM16_MCZ,	BM128_MCZ ;  $B ; Mystic Cave
		lhead id_PLC_CNZ1,		id_PLC_CNZ2,		id_Pal_CNZ,		Kos_CNZ,	BM16_CNZ,	BM128_CNZ ;  $C ; Casino Night
		lhead id_PLC_CPZ1,		id_PLC_CPZ2,		id_Pal_CPZ,		Kos_CPZ,	BM16_CPZ,	BM128_CPZ ;  $D ; Chemical Plant
		lhead id_PLC_DEZ1,		id_PLC_DEZ2,		id_Pal_DEZ,		Kos_CPZ,	BM16_CPZ,	BM128_CPZ ;  $E ; Death Egg;  art is patched later by LoadZoneTiles
		lhead id_PLC_ARZ1,		id_PLC_ARZ2,		id_Pal_ARZ,		Kos_ARZ,	BM16_ARZ,	BM128_ARZ ;  $F ; Aquatic Ruin
		lhead id_PLC_SCZ1,		id_PLC_SCZ2,		id_Pal_SCZ,		Kos_SCZ,	BM16_WFZ,	BM128_WFZ ; $10 ; Sky Chase
		
		

;---------------------------------------------------------------------------------------
; Macro to make PLC pointers and generate symbolic constants
; (modification of standard ptr macro)
;---------------------------------------------------------------------------------------

plcp:	macro plcaddress,altid,alias1,alias2

	nolist
	pusho
	opt	m-
	
		dc.\index_width \plcaddress-index_start ; make pointer
	ifarg \altid
		\prefix_id\\altid: equ ptr_id ; generate an alternate ID constant for duplicate pointers
	else
		\prefix_id\\plcaddress:	equ ptr_id ; generate ID constant
	endc	
	ifarg \alias1
		\prefix_id\\alias1:	equ ptr_id ; make aliased ID constant
	endc
	ifarg \alias1
		\prefix_id\\alias2:	equ ptr_id	; make aliased ID constant
	endc			
		ptr_id: = ptr_id+ptr_id_inc	; increment ptr_id
		
	popo
	list
	endm
	
PatternLoadCues:	
		index offset(*)

		plcp 	PLC_Main		; 0
		plcp 	PLC_Main2		; 1
		plcp	PLC_Water 		; 2
		plcp 	PLC_GameOver	; 3
		plcp 	PLC_EHZ1		; 4
		plcp 	PLC_EHZ2		; 5
		plcp 	PLC_Miles1Up	; 6
		plcp 	PLC_MilesLife	; 7
		plcp 	PLC_Tails1Up	; 8
		plcp	PLC_TailsLife	; 9
		plcp	PLC_MTZ1,PLC_Unused1	; 10 - unused, but referenced in LevelHeaders array
		plcp	PLC_MTZ1,PLC_Unused2	; 11 - unused, but referenced in LevelHeaders array
		plcp	PLC_MTZ1		; 12
		plcp	PLC_MTZ2		; 13
		plcp	PLC_WFZ1,PLC_Unused3	; 14 - unused, never referenced
		plcp	PLC_WFZ1,PLC_Unused4	; 15 - unused, never referenced
		plcp	PLC_WFZ1		; 16
		plcp	PLC_WFZ2		; 17
		plcp	PLC_HTZ1		; 18
		plcp	PLC_HTZ2		; 19
		plcp	PLC_HPZ1		; 20
		plcp	PLC_HPZ2		; 21
		plcp	PLC_OOZ1,PLC_Unused5	; 22 - unused, but referenced in LevelHeaders array
		plcp	PLC_OOZ1,PLC_Unused6	; 23 - unused, but referenced in LevelHeaders array
		plcp	PLC_OOZ1		; 24
		plcp	PLC_OOZ2		; 25
		plcp	PLC_MCZ1		; 26
		plcp	PLC_MCZ2		; 27
		plcp	PLC_CNZ1		; 28
		plcp	PLC_CNZ2		; 29
		plcp	PLC_CPZ1		; 30
		plcp	PLC_CPZ2		; 31
		plcp	PLC_DEZ1		; 32
		plcp	PLC_DEZ2		; 33
		plcp	PLC_ARZ1		; 34
		plcp	PLC_ARZ2		; 35
		plcp	PLC_SCZ1		; 36
		plcp	PLC_SCZ2		; 37
		plcp	PLC_ResultsSonic		; 38
		plcp	PLC_Signpost	; 39
		plcp	PLC_CPZBoss		; 40
		plcp	PLC_EHZBoss		; 41
		plcp	PLC_HTZBoss		; 42
		plcp	PLC_ARZBoss		; 43
		plcp	PLC_MCZBoss		; 44
		plcp	PLC_CNZBoss		; 45
		plcp	PLC_MTZBoss		; 46
		plcp	PLC_OOZBoss		; 47
		plcp	PLC_FieryExplosion	; 48
		plcp	PLC_DEZBoss		; 49
		plcp	PLC_EHZAnimals	; 50
		plcp	PLC_MCZAnimals	; 51
		plcp	PLC_WFZAnimals,,PLC_HTZAnimals,PLC_MTZAnimals	; 52, these zones share the same list
		plcp	PLC_DEZAnimals	; 53
		plcp	PLC_HPZAnimals	; 54
		plcp	PLC_OOZAnimals	; 55
		plcp	PLC_SCZAnimals	; 56
		plcp	PLC_CNZAnimals	; 57
		plcp	PLC_CPZAnimals	; 58
		plcp	PLC_ARZAnimals	; 59
		plcp	PLC_SpecialStage	; 60
		plcp	PLC_SpecialStageBombs	; 61
		plcp	PLC_WFZBoss	; 62
		plcp	PLC_Tornado	; 63
		plcp	PLC_Capsule	; 64
		plcp	PLC_Explosion	; 65
		plcp	PLC_ResultsTails	; 66

		
		
;plcm:		macro gfx,vram,suffix
;		dc.l gfx
;		if strlen("\vram")>0
;			plcm_vram: = \vram
;		else
;			plcm_vram: = last_vram
;		endc
;		last_vram: = plcm_vram+sizeof_\gfx
;		dc.w plcm_vram
;		ifarg \suffix
;			tile_\gfx\_\suffix: equ plcm_vram/sizeof_cell
;			vram_\gfx\_\suffix: equ plcm_vram
;		else
;			if ~def(tile_\gfx)
;			tile_\gfx: equ plcm_vram/sizeof_cell
;			vram_\gfx: equ plcm_vram
;			endc
;		endc
;		endm

;plcheader:	macro *
;		\*: equ *
;		plc_count\@: equ (\*_end-\*-2)/sizeof_plc
;		dc.w plc_count\@-1
;		endm		
		
;---------------------------------------------------------------------------------------
;Pattern load cues - standard block	1
;---------------------------------------------------------------------------------------
PLC_Main: ;plcheader
		dc.w 3			
		dc.l Nem_HUD
		dc.w $D940
		;plcm Nem_HUD,$06BC+$4A
		dc.l Nem_Sonic_Life_Counter
		dc.w $FA80
		dc.l Nem_Ring
		dc.w $D780
		dc.l Nem_Numbers
		dc.w $9580
;---------------------------------------------------------------------------------------
;Pattern load cues - standard block	2
;---------------------------------------------------------------------------------------
PLC_Main2:		dc.w 3			
		dc.l Nem_Checkpoint
		dc.w $8F80
		dc.l Nem_Monitors_and_PowerUps
		dc.w $D000
		dc.l Nem_Shield
		dc.w $97C0
		dc.l Nem_Invinciblity_Stars
		dc.w $9BC0
;---------------------------------------------------------------------------------------
;Pattern load cues - water level standard block
;---------------------------------------------------------------------------------------
PLC_Water:		dc.w 2			
		dc.l Nem_Explosion
		dc.w $B480
		dc.l Nem_SuperSonic_Stars
		dc.w $BE40
		dc.l Nem_Bubbles
		dc.w $BD00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Game/Time over
;---------------------------------------------------------------------------------------
PLC_GameOver:		dc.w 0			
		dc.l Nem_Game_Over
		dc.w $9BC0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;EHZ Primary
;---------------------------------------------------------------------------------------
PLC_EHZ1:		dc.w 5			
		dc.l Nem_Waterfall
		dc.w $73C0
		dc.l Nem_EHZBridge
		dc.w $76C0
		dc.l Nem_HTZFireball1
		dc.w $77C0
		dc.l Nem_Buzzer
		dc.w $7A40
		dc.l Nem_Coconuts
		dc.w $7DC0
		dc.l Nem_Masher
		dc.w $8280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;EHZ Secondary
;---------------------------------------------------------------------------------------
PLC_EHZ2:		dc.w 3			
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_DignlSprng
		dc.w $8780
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Miles 1up patch
;---------------------------------------------------------------------------------------
PLC_Miles1Up:		dc.w 0			
		dc.l Nem_MilesLife
		dc.w $DE80
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Miles life counter
;---------------------------------------------------------------------------------------
PLC_MilesLife:		dc.w 0			
		dc.l Nem_MilesLife
		dc.w $FA80
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Tails 1up patch
;---------------------------------------------------------------------------------------
PLC_Tails1Up:		dc.w 0			
		dc.l Nem_TailsLife
		dc.w $DE80
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Tails life counter
;---------------------------------------------------------------------------------------
PLC_TailsLife:		dc.w 0			
		dc.l Nem_TailsLife
		dc.w $FA80
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MTZ primary
;---------------------------------------------------------------------------------------
PLC_MTZ1:		dc.w 8			
		dc.l Nem_MTZWheel
		dc.w $6F00
		dc.l Nem_MTZWheelIndent
		dc.w $7E00
		dc.l Nem_MTZLavaCup
		dc.w $7F20
		dc.l Nem_MTZBoltEnd_Rope
		dc.w $7FA0
		dc.l Nem_MTZSteam
		dc.w $80A0
		dc.l Nem_MTZSpikeBlock
		dc.w $8280
		dc.l Nem_MTZSpike
		dc.w $8380
		dc.l Nem_Shellcracker
		dc.w $6380
		dc.l Nem_Asteron
		dc.w $6D00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MTZ Secondary
;---------------------------------------------------------------------------------------
PLC_MTZ2:		dc.w 8			
		dc.l Nem_Button
		dc.w $8480
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_Slicer
		dc.w $8780
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
		dc.l Nem_MTZAsstBlocks
		dc.w $A000
		dc.l Nem_MTZLavaBubble
		dc.w $A6C0
		dc.l Nem_MTZCog
		dc.w $ABE0
		dc.l Nem_MTZSpinTubeFlash
		dc.w $AD60
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;WFZ Primary
;---------------------------------------------------------------------------------------
PLC_WFZ1:		dc.w 9			
		dc.l Nem_Tornado
		dc.w $A000
		dc.l Nem_Clouds
		dc.w $A9E0
		dc.l Nem_WFZVrtclPrpllr
		dc.w $AC20
		dc.l Nem_WFZHrzntlPrpllr
		dc.w $79A0
		dc.l Nem_Balkiry
		dc.w $ACA0
		dc.l Nem_BreakPanels
		dc.w $9180
		dc.l Nem_Clucker
		dc.w $6F20
		dc.l Nem_WFZTiltPlatforms
		dc.w $7260
		dc.l Nem_Tornado
		dc.w $A000
		dc.l Nem_Clouds
		dc.w $A9E0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;WFZ Secondary
;---------------------------------------------------------------------------------------
PLC_WFZ2:		dc.w $D			
		dc.l Nem_WFZVrtclPrpllr
		dc.w $AC20
		dc.l Nem_WFZHrzntlPrpllr
		dc.w $79A0
		dc.l Nem_WFZVrtclLazer
		dc.w $73E0
		dc.l Nem_WFZWallTurret
		dc.w $7560
		dc.l Nem_WFZHrzntlLazer
		dc.w $7860
		dc.l Nem_WFZConveyorBeltWheel
		dc.w $7D40
		dc.l Nem_WFZHook
		dc.w $7F40
		dc.l Nem_WFZThrust
		dc.w $8CA0
		dc.l Nem_WFZBeltPlatform
		dc.w $81C0
		dc.l Nem_WFZGunPlatform
		dc.w $8340
		dc.l Nem_WFZUnusedBadnik
		dc.w $8A00
		dc.l Nem_WFZLaunchCatapult
		dc.w $8B80
		dc.l Nem_WFZSwitch
		dc.w $8C20
		dc.l Nem_WFZFloatingPlatform
		dc.w $8DA0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;HTZ Primary
;---------------------------------------------------------------------------------------
PLC_HTZ1:		dc.w 9			
		dc.l Nem_HTZFireball1
		dc.w $73C0
		dc.l Nem_HTZRock
		dc.w $7640
		dc.l Nem_HTZSeeSaw
		dc.w $78C0
		dc.l Nem_Sol
		dc.w $7BC0
		dc.l Nem_Rexon
		dc.w $6FC0
		dc.l Nem_Spiker
		dc.w $A400
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_DignlSprng
		dc.w $8780
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;HTZ Secondary
;---------------------------------------------------------------------------------------
PLC_HTZ2:		dc.w 2			
		dc.l Nem_HTZZipline
		dc.w $7CC0
		dc.l Nem_HTZFireball2
		dc.w $82C0
		dc.l Nem_HTZOneWayBarrier
		dc.w $84C0
		
		
		
		
		
PLC_HPZ1:		
PLC_HPZ2:		
		
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;OOZ Primary
;---------------------------------------------------------------------------------------
PLC_OOZ1:		dc.w 8			
		dc.l Nem_OOZBurn
		dc.w $5C40
		dc.l Nem_OOZElevator
		dc.w $5E80
		dc.l Nem_OOZSpikedBall
		dc.w $6180
		dc.l Nem_BurnerLid
		dc.w $6580
		dc.l Nem_StripedBlocksVert
		dc.w $6640
		dc.l Nem_Oilfall
		dc.w $66C0
		dc.l Nem_Oilfall2
		dc.w $68C0
		dc.l Nem_OOZSpringBall
		dc.w $6A80
		dc.l Nem_LaunchBall
		dc.w $6D00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;OOZ Secondary
;---------------------------------------------------------------------------------------
PLC_OOZ2:		dc.w $B			
		dc.l Nem_OOZPlatform
		dc.w $73A0
		dc.l Nem_PushSpring
		dc.w $78A0
		dc.l Nem_OOZSwingPlat
		dc.w $7C60
		dc.l Nem_StripedBlocksHoriz
		dc.w $7FE0
		dc.l Nem_OOZFan
		dc.w $8060
		dc.l Nem_Button
		dc.w $8480
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_DignlSprng
		dc.w $8780
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
		dc.l Nem_Aquis
		dc.w $A000
		dc.l Nem_Octus
		dc.w $A700
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MCZ Primary
;---------------------------------------------------------------------------------------
PLC_MCZ1:		dc.w 5			
		dc.l Nem_MCZCrate
		dc.w $7A80
		dc.l Nem_MCZCollapsingPlat
		dc.w $7E80
		dc.l Nem_MCZVineSwitch
		dc.w $81C0
		dc.l Nem_MCZVinePulley
		dc.w $83C0
		dc.l Nem_Flasher
		dc.w $7500
		dc.l Nem_Crawlton
		dc.w $7800
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MCZ Secondary
;---------------------------------------------------------------------------------------
PLC_MCZ2:		dc.w 5			
		dc.l Nem_HorizSpike
		dc.w $8580
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_MCZDrawbridgeLogs
		dc.w $8780
		dc.l Nem_LeverSpring
		dc.w $8800
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CNZ Primary
;---------------------------------------------------------------------------------------
PLC_CNZ1:		dc.w 9			
		dc.l Nem_Crawl
		dc.w $6800
		dc.l Nem_CNZBigMovingBlock
		dc.w $6D80
		dc.l Nem_CNZCaterpillarPlats
		dc.w $6F80
		dc.l Nem_CNZBonusSpike
		dc.w $7000
		dc.l Nem_CNZElevator
		dc.w $7080
		dc.l Nem_CNZCage
		dc.w $7100
		dc.l Nem_CNZHexBumper
		dc.w $7280
		dc.l Nem_CNZRoundBumper
		dc.w $7340
		dc.l Nem_CNZFlipper
		dc.w $7640
		dc.l Nem_CNZSaucerBumper
		dc.w $7CC0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CNZ Secondary
;---------------------------------------------------------------------------------------
PLC_CNZ2:		dc.w 5			
		dc.l Nem_CNZDiagPlunger
		dc.w $8040
		dc.l Nem_CNZVertPlunger
		dc.w $8440
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_DignlSprng
		dc.w $8780
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CPZ Primary
;---------------------------------------------------------------------------------------
PLC_CPZ1:		dc.w 8			
		dc.l Nem_CPZPylons
		dc.w $6E60
		dc.l Nem_ConstructionStripes
		dc.w $7280
		dc.l Nem_CPZBooster
		dc.w $7380
		dc.l Nem_CPZElevator
		dc.w $7400
		dc.l Nem_CPZDumpingPipePlat
		dc.w $7600
		dc.l Nem_CPZTubeSpring
		dc.w $7C00
		dc.l Nem_WaterSurface1
		dc.w $8000
		dc.l Nem_CPZStairBlock
		dc.w $8300
		dc.l Nem_CPZMetalBlock
		dc.w $8600
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CPZ Secondary
;---------------------------------------------------------------------------------------
PLC_CPZ2:		dc.w 6			
		dc.l Nem_Grabber
		dc.w $A000
		dc.l Nem_Spiny
		dc.w $A5A0
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_CPZDroplet
		dc.w $8780
		dc.l Nem_LeverSpring
		dc.w $8800
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;DEZ Primary
;---------------------------------------------------------------------------------------
PLC_DEZ1:		dc.w 0			
		dc.l Nem_ConstructionStripes
		dc.w $6500
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;DEZ Secondary
;---------------------------------------------------------------------------------------
PLC_DEZ2:		dc.w 4			
		dc.l Nem_MechaSonic
		dc.w $7000
		dc.l Nem_DEZWindow
		dc.w $6F00
		dc.l Nem_RobotnikRunning
		dc.w $A300
		dc.l Nem_RobotnikUpper
		dc.w $A000
		dc.l Nem_RobotnikLower
		dc.w $AC80
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;ARZ Primary
;---------------------------------------------------------------------------------------
PLC_ARZ1:		dc.w 3			
		dc.l Nem_ARZBarrier
		dc.w $7F00
		dc.l Nem_WaterSurface2
		dc.w $8000
		dc.l Nem_Leaves
		dc.w $8200
		dc.l Nem_ArrowAndShooter
		dc.w $82E0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;ARZ Secondary
;---------------------------------------------------------------------------------------
PLC_ARZ2:		dc.w 7			
		dc.l Nem_ChopChop
		dc.w $A760
		dc.l Nem_Whisp
		dc.w $A000
		dc.l Nem_Grounder
		dc.w $A120
		dc.l Nem_BubbleGenerator
		dc.w $AB60
		dc.l Nem_Spikes
		dc.w $8680
		dc.l Nem_LeverSpring
		dc.w $8800
		dc.l Nem_VrtclSprng
		dc.w $8B80
		dc.l Nem_HrzntlSprng
		dc.w $8E00
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;SCZ Primary
;---------------------------------------------------------------------------------------
PLC_SCZ1:		dc.w 0			
		dc.l Nem_Tornado
		dc.w $A000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;SCZ Secondary
;---------------------------------------------------------------------------------------
PLC_SCZ2:		dc.w 5			
		dc.l Nem_Clouds
		dc.w $A9E0
		dc.l Nem_WFZVrtclPrpllr
		dc.w $AC20
		dc.l Nem_WFZHrzntlPrpllr
		dc.w $79A0
		dc.l Nem_Balkiry
		dc.w $ACA0
		dc.l Nem_Turtloid
		dc.w $7140
		dc.l Nem_Nebula
		dc.w $6DC0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Sonic end of level results screen
;---------------------------------------------------------------------------------------
PLC_ResultsSonic:		dc.w 3			
		dc.l Nem_TitleCard
		dc.w $B000
		dc.l Nem_ResultsText
		dc.w $B600
		dc.l Nem_MiniSonic
		dc.w $BE80
		dc.l Nem_Perfect
		dc.w $A800
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;End of	level signpost
;---------------------------------------------------------------------------------------
PLC_Signpost:		dc.w 0			
		dc.l Nem_Signpost
		dc.w $8680
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CPZ Boss
;---------------------------------------------------------------------------------------
PLC_CPZBoss:		dc.w 4			
		dc.l Nem_Eggpod
		dc.w $8400
		dc.l Nem_CPZBoss
		dc.w $A000
		dc.l Nem_EggpodJets
		dc.w $8300
		dc.l Nem_BossSmoke
		dc.w $AE00
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;EHZ Boss
;---------------------------------------------------------------------------------------
PLC_EHZBoss:		dc.w 3			
		dc.l Nem_Eggpod
		dc.w $7400
		dc.l Nem_EHZBoss
		dc.w $8000
		dc.l Nem_EggChopperBlades
		dc.w $AD80
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;HTZ Boss
;---------------------------------------------------------------------------------------
PLC_HTZBoss:		dc.w 3			
		dc.l Nem_Eggpod
		dc.w $7820
		dc.l Nem_HTZBoss
		dc.w $8420
		dc.l Nem_FieryExplosion
		dc.w $B000
		dc.l Nem_BossSmoke
		dc.w $BC80
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;ARZ Boss
;---------------------------------------------------------------------------------------
PLC_ARZBoss:		dc.w 2			
		dc.l Nem_Eggpod
		dc.w $A000
		dc.l Nem_ARZBoss
		dc.w $7C00
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MCZ Boss
;---------------------------------------------------------------------------------------
PLC_MCZBoss:		dc.w 2			
		dc.l Nem_Eggpod
		dc.w $A000
		dc.l Nem_MCZBoss
		dc.w $7800
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CNZ Boss
;---------------------------------------------------------------------------------------
PLC_CNZBoss:		dc.w 2			
		dc.l Nem_Eggpod
		dc.w $A000
		dc.l Nem_CNZBoss
		dc.w $80E0
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MTZ Boss
;---------------------------------------------------------------------------------------
PLC_MTZBoss:		dc.w 3			
		dc.l Nem_Eggpod
		dc.w $A000
		dc.l Nem_MTZBoss
		dc.w $6F80
		dc.l Nem_EggpodJets
		dc.w $AC00
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;OOZ Boss
;---------------------------------------------------------------------------------------
PLC_OOZBoss:		dc.w 1			
		dc.l Nem_OOZBoss
		dc.w $7180
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Unknown
;---------------------------------------------------------------------------------------
PLC_FieryExplosion:		dc.w 0			
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Death Egg
;---------------------------------------------------------------------------------------
PLC_DEZBoss:		dc.w 0			
		dc.l Nem_DEZBoss
		dc.w $6600
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;EHZ Animals
;---------------------------------------------------------------------------------------
PLC_EHZAnimals:		dc.w 1			
		dc.l Nem_Squirrel
		dc.w $B000
		dc.l Nem_Flicky
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;MCZ Animals
;---------------------------------------------------------------------------------------
PLC_MCZAnimals:		dc.w 1			
		dc.l Nem_Mouse
		dc.w $B000
		dc.l Nem_Chicken
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;HTZ/MTZ/WFZ animals
;---------------------------------------------------------------------------------------
PLC_WFZAnimals:		dc.w 1			
		dc.l Nem_Beaver
		dc.w $B000
		dc.l Nem_Eagle
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;DEZ Animals
;---------------------------------------------------------------------------------------
PLC_DEZAnimals:		dc.w 1			
		dc.l Nem_Pig
		dc.w $B000
		dc.l Nem_Chicken
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;HPZ animals
;---------------------------------------------------------------------------------------
PLC_HPZAnimals:		dc.w 1			
		dc.l Nem_Mouse
		dc.w $B000
		dc.l Nem_Seal
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;OOZ Animals
;---------------------------------------------------------------------------------------
PLC_OOZAnimals:		dc.w 1			
		dc.l Nem_Penguin
		dc.w $B000
		dc.l Nem_Seal
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;SCZ Animals
;---------------------------------------------------------------------------------------
PLC_SCZAnimals:		dc.w 1			
		dc.l Nem_Turtle
		dc.w $B000
		dc.l Nem_Chicken
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CNZ Animals
;---------------------------------------------------------------------------------------
PLC_CNZAnimals:		dc.w 1			
		dc.l Nem_Bear
		dc.w $B000
		dc.l Nem_Flicky
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;CPZ Animals
;---------------------------------------------------------------------------------------
PLC_CPZAnimals:		dc.w 1			
		dc.l Nem_Rabbit
		dc.w $B000
		dc.l Nem_Eagle
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;ARZ Animals
;---------------------------------------------------------------------------------------
PLC_ARZAnimals:		dc.w 1			
		dc.l Nem_Penguin
		dc.w $B000
		dc.l Nem_Flicky
		dc.w $B280
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Special Stage
;---------------------------------------------------------------------------------------
PLC_SpecialStage:		dc.w $C			
		dc.l Nem_SpecialEmerald
		dc.w $2E80
		dc.l Nem_SpecialMessages
		dc.w $3440
		dc.l Nem_SpecialHUD
		dc.w $3F40
		dc.l Nem_SpecialHorizShadow
		dc.w $4780
		dc.l Nem_SpecialDiagShadow
		dc.w $4C40
		dc.l Nem_SpecialVertShadow
		dc.w $5380
		dc.l Nem_SpecialExplosion
		dc.w $56A0
		dc.l Nem_SpecialRings
		dc.w $6440
		dc.l Nem_SpecialStart
		dc.w $7140
		dc.l Nem_SpecialPlayerVSPlayer
		dc.w $7BE0
		dc.l Nem_SpecialBack
		dc.w $E000
		dc.l Nem_SpecialStars
		dc.w $EFE0
		dc.l Nem_SpecialTailsText
		dc.w $F480
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Unknown
;---------------------------------------------------------------------------------------
PLC_SpecialStageBombs:		dc.w 0			
		dc.l Nem_SpecialBomb
		dc.w $7140
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;WFZ Boss
;---------------------------------------------------------------------------------------
PLC_WFZBoss:		dc.w 4			
		dc.l Nem_WFZBoss
		dc.w $6F20
		dc.l Nem_RobotnikRunning
		dc.w $A300
		dc.l Nem_RobotnikUpper
		dc.w $A000
		dc.l Nem_RobotnikLower
		dc.w $AC80
		dc.l Nem_FieryExplosion
		dc.w $B000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Tornado
;---------------------------------------------------------------------------------------
PLC_Tornado:		dc.w 2			
		dc.l Nem_Tornado
		dc.w $A000
		dc.l Nem_TornadoThruster
		dc.w $AC20
		dc.l Nem_Clouds
		dc.w $A9E0
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Egg Prison
;---------------------------------------------------------------------------------------
PLC_Capsule:		dc.w 0			
		dc.l Nem_Capsule
		dc.w $D000
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Normal	explosion
;---------------------------------------------------------------------------------------
PLC_Explosion:		dc.w 0			
		dc.l Nem_Explosion
		dc.w $B480
;---------------------------------------------------------------------------------------
;Pattern load cue
;
;Tails end of level results screen
;---------------------------------------------------------------------------------------
PLC_ResultsTails:		dc.w 3			
		dc.l Nem_TitleCard
		dc.w $B000
		dc.l Nem_ResultsText
		dc.w $B600
		dc.l Nem_MiniTails
		dc.w $BE80
		dc.l Nem_Perfect
		dc.w $A800
		
		
;---------------------------------------------------------------------------------------
; Collision Data
;---------------------------------------------------------------------------------------

		incfile ColCurveMap
		incfile CollArray1
		incfile CollArray2

;---------------------------------------------------------------------------------------
; 16x16 collision indicies (Kosinski compression)
;---------------------------------------------------------------------------------------

		incfile	ColP_EHZHTZ
		incfile	ColS_EHZHTZ
		incfile	ColP_MTZ
;		incfile	ColP_HPZ
;		incfile	ColS_HPZ		
		incfile	ColP_OOZ
		incfile	ColP_MCZ
		incfile	ColP_CNZ
		incfile	ColS_CNZ
		incfile	ColP_CPZDEZ
		incfile	ColS_CPZDEZ
		incfile	ColP_ARZ
		incfile	ColS_ARZ
		incfile	ColP_WFZSCZ
		incfile	ColS_WFZSCZ
		
;---------------------------------------------------------------------------------------
;Offset	index of level layouts
;
;Two entries per act, pointing to the level layouts for	acts 1 and 2 of	each level
;respectively.
; TODO: Figure out which ones are unused and note them accordingly
;---------------------------------------------------------------------------------------
LevelIndex:		index offset(*)

		
		ptr Level_EHZ1	; 0 					
		ptr Level_EHZ2	; 1
		ptr Level_EHZ1	; 2
		ptr Level_EHZ1	; 3
		ptr Level_EHZ1	; 4
		ptr Level_EHZ1	; 5
		ptr Level_EHZ1	; 6
		ptr Level_EHZ1	; 7
		ptr Level_MTZ1	; 8
		ptr Level_MTZ2	; 9
		ptr Level_MTZ3	; $A
		ptr Level_MTZ3	; $B
		ptr Level_WFZ	; $C
		ptr Level_WFZ	; $D
		ptr Level_HTZ1	; $E
		ptr Level_HTZ2	; $F
		ptr Level_OOZ1	; $10
		ptr Level_OOZ1	; $11
		ptr Level_EHZ1	; $12
		ptr Level_EHZ1	; $13
		ptr Level_OOZ1	; $14
		ptr Level_OOZ2	; $15
		ptr Level_MCZ1	; $16
		ptr Level_MCZ2	; $17
		ptr Level_CNZ1	; $18
		ptr Level_CNZ2	; $19
		ptr Level_CPZ1	; $1A
		ptr Level_CPZ2	; $1B
		ptr Level_DEZ	; $1C
		ptr Level_DEZ	; $1D
		ptr Level_ARZ1	; $1E
		ptr Level_ARZ2	; $1F
		ptr Level_SCZ	; $20
		ptr Level_SCZ	; $21


; ---------------------------------------------------------------------------
; Level	layouts (Kosinski Compression)
; ---------------------------------------------------------------------------
		incfile	Level_EHZ1
		incfile	Level_EHZ2
		incfile	Level_MTZ1
		incfile	Level_MTZ2
		incfile	Level_MTZ3
		incfile	Level_WFZ
		incfile	Level_HTZ1
		incfile	Level_HTZ2
		incfile	Level_OOZ1
		incfile	Level_OOZ2
		incfile	Level_MCZ1
		incfile	Level_MCZ2
		incfile	Level_CNZ1
		incfile	Level_CNZ2
		incfile	Level_CPZ1
		incfile	Level_CPZ2
		incfile	Level_DEZ
		incfile	Level_ARZ1
		incfile	Level_ARZ2
		incfile	Level_SCZ


;---------------------------------------------------------------------------------------
; Graphics - various
;---------------------------------------------------------------------------------------

		incfile	Art_Flowers1	; ArtUnc_49714:
		incfile	Art_Flowers2	; ArtUnc_49794:
		incfile	Art_Flowers3	; ArtUnc_49814:
		incfile	Art_Flowers4	; ArtUnc_49894:
		incfile	Art_EHZPulseBall	; ArtUnc_49914:
		incfile	Nem_HTZCliffs	; ArtNem_49A14: ArtUnc_HTZCliffs:
		incfile	Art_HTZClouds	; ArtUnc_4A33E:
		incfile	Art_MTZCylinder	; ArtUnc_4A73E:
		incfile	Art_Lava	; ArtUnc_4B73E:
		incfile	Art_MTZAnimBack	 ; ArtUnc_4BD3E:
;		incfile Art_HPZPulseOrb
		incfile	Art_OOZPulseBall	; ArtUnc_4BF7E:
		incfile	Art_OOZSquareBall1	; ArtUnc_4C0FE:
		incfile	Art_OOZSquareBall2	; ArtUnc_4C2FE:
		incfile	Art_Oil1	; ArtUnc_4C4FE:
		incfile	Art_Oil2	; ArtUnc_4CCFE:
;---------------------------------------------------------------------------------------
; Uncompressed art
; Flipping foreground section in CNZ ; ArtUnc_4D4FE:
Art_CNZFlipTiles:	incbin	"art/uncompressed/CNZ Flipping Foreground Panel.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
;Ppictures for slot machines in CNZ ; ArtUnc_4EEFE:
Art_CNZSlotPics:	incbin	"art/uncompressed/CNZ Slot Pictures.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated background section in CPZ and DEZ ; ArtUnc_4FAFE:
Art_CPZAnimBack:	incbin	"art/uncompressed/CPZ & DEZ Animated Background.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated background section in CPZ and DEZ ; ArtUnc_4FAFE:
Art_Waterfall1:	incbin	"art/uncompressed/ARZ Waterfalls - 1.bin"
Art_Waterfall2:	incbin	"art/uncompressed/ARZ Waterfalls - 2.bin"
Art_Waterfall3:	incbin	"art/uncompressed/ARZ Waterfalls - 3.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Patterns for Sonic  ; ArtUnc_50000:
		align $20
Art_Sonic:	incbin	"art/uncompressed/Sonic.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Patterns for Tails  ; ArtUnc_64320:
		align offset(*),$20
Art_Tails:	incbin	"art/uncompressed/Tails.bin"

		
		include	"mappings/sprite/Sonic.asm"	; MapUnc_6FBE0: SprTbl_Sonic: Map_Sonic:
		include	"mappings/spriteDPLC/Sonic.asm"	; Sonic DPLCs  ; MapRUnc_714E0:
		incfile	Nem_Shield	; ArtNem_71D8E:
		incfile	Nem_Invinciblity_Stars	; ArtNem_71F14:

; ArtUnc_71FFC:
Art_SplashAndDust:	incbin	"art/uncompressed/Water Splash & Skid Dust.bin"
		even

		incfile Nem_SuperSonic_Stars	; ArtNem_7393C:	
		include	"mappings/sprite/Tails.asm"	; MapUnc_739E2: ; Map_Tails
		include	"mappings/spriteDPLC/Tails.asm"	 Tails DPLCs	; MapRUnc_7446C:
		even

		incfile	Nem_SEGA	; ArtNem_74876:	
		incfile Nem_IntroTrails	; ArtNem_74CF6:
		incfile Eni_SEGA	; MapEng_74D0E:
		incfile Eni_TitleScreen		; ArtNem_74DC6:
		incfile Eni_TitleBack	; MapEng_74E86:
		incfile	Eni_TitleLogo
		incfile Nem_Title	; ArtNem_74F6C:
		incfile	Nem_TitleSprites	; ArtNem_7667A:
		incfile	Nem_MenuJunk	; ArtNem_78CBC:
		incfile	Nem_Button	; ArtNem_78DAC:
		incfile	Nem_VrtclSprng	; ArtNem_78E84:
		incfile	Nem_HrzntlSprng	; ArtNem_78FA0:
		incfile Nem_DignlSprng	; ArtNem_7906A:
		incfile	Nem_HUD	; ArtNem_7923E:
		incfile	Nem_Sonic_Life_Counter	; ArtNem_79346:
		incfile	Nem_Ring	; ArtNem_7945C:
		incfile	Nem_Monitors_and_PowerUps	; ArtNem_79550:
		incfile Nem_Spikes	; ArtNem_7995C:
		incfile	Nem_Numbers	; ArtNem_799AC:
		incfile	Nem_Checkpoint	; ArtNem_79A86:
		incfile Nem_Signpost	; ArtNem_79BDE:
		
; ArtUnc_7A18A:
Art_Signpost:	incbin	"art/uncompressed/Signpost.bin" ; Yep, it's in the ROM twice: once compressed and once uncompressed
		even

		incfile	Nem_LeverSpring	; ArtNem_7AB4A:
		incfile	Nem_HorizSpike	; ArtNem_7AC9A:
		incfile	Nem_BubbleGenerator	; ArtNem_7AD16: ArtNem_BigBubbles:
		incfile	Nem_Bubbles	; ArtNem_7AEE2:
		
; ArtUnc_7AF80:
Art_Countdown:	incbin	"art/uncompressed/Drowning Countdown Numbers.bin"
		even

		incfile	Nem_Game_Over	; ArtNem_7B400:
		incfile	Nem_Explosion	; ArtNem_7B592:
		incfile	Nem_MilesLife	; ArtNem_7B946:
		incfile	Nem_Capsule	; ArtNem_7BA32:
		incfile	Nem_ContinueTails	; ArtNem_7BDBE:
		incfile	Nem_MiniSonic	; ArtNem_7C0AA:
		incfile	Nem_TailsLife	; ArtNem_7C20C:
		incfile	Nem_MiniTails	; ArtNem_7C2F2:
		incfile	Nem_StandardFont	; ArtNem_7C43A:
		incfile	Nem_1P2PWins	; ArtNem_7C9AE:
		

; MapEng_7CB80:
Eni_MenuBack:		incbin	"mappings/planes/Sonic & Miles Animated Background.eni"
		even

; ArtUnc_7CD2C:
Art_MenuBack:		incbin	"art/uncompressed/Sonic & Miles Animated Background.bin"
		even

		incfile	Nem_TitleCard	; ArtNem_7D22C:
		incfile	Nem_TitleCardFont	; ArtNem_7D58A:
		incfile	Nem_MenuBox	; ArtNem_7D990:
		incfile	Nem_LevelSelectPics	; ArtNem_7DA10:
		incfile	Nem_ResultsText	; ArtNem_7E86A:
		incfile	Nem_SpecialStageResults	; ArtNem_7EB58:
		incfile	Nem_Perfect	; ArtNem_7EEBE:
		incfile	Nem_Flicky	; ArtNem_7EF60: ; ArtNem_Bird:
		incfile	Nem_Squirrel	; ArtNem_7F0A2:
		incfile	Nem_Mouse	; ArtNem_7F206
		incfile	Nem_Chicken	; ArtNem_7F340:
		incfile	Nem_Beaver	; ArtNem_7F4A2:
		incfile	Nem_Eagle	; ArtNem_7F5E2:
		incfile	Nem_Pig	; ArtNem_7F710:
		incfile	Nem_Seal	; ArtNem_7F846:
		incfile	Nem_Penguin	; ArtNem_7F962:
		incfile	Nem_Turtle	; ArtNem_7FADE:
		incfile	Nem_Bear	; ArtNem_7FC90:
		incfile	Nem_Rabbit	; ArtNem_7FDD2:
		incfile	Nem_WFZSwitch	; ArtNem_7FF2A:
		incfile	Nem_BreakPanels	; ArtNem_7FF98:
		incfile	Nem_OOZSpikedBall	; ArtNem_8007C:
		incfile	Nem_BurnerLid	; ArtNem_80274:
		incfile	Nem_StripedBlocksVert	; ArtNem_8030A:
		incfile	Nem_Oilfall		; ArtNem_80376:
		incfile	Nem_Oilfall2	; ArtNem_804F2:
		incfile	Nem_OOZSpringBall	; ArtNem_805C0:
		incfile	Nem_LaunchBall	; ArtNem_806E0:
		
; --------------------------------------------------------------------------------------
; Nemesis compressed art (40 blocks)
; Collapsing platform from OOZ	; ArtNem_806E0:
Nem_OOZPlatform:		incbin	"art/nemesis/OOZ Collapsing Platform.nem"
		even
		;incfile	
; --------------------------------------------------------------------------------------
; Nemesis compressed art (30 blocks)
; Diagonal and vertical weird spring from OOZ	; ArtNem_80C64:
Nem_PushSpring:		incbin	"art/nemesis/OOZ Pressure Spring.nem"
		even
		;incfile	
; --------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Swinging platform from OOZ	; ArtNem_80E26:
Nem_OOZSwingPlat:		incbin	"art/nemesis/OOZ Swinging Platform.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; 4 stripy blocks from OOZ	; ArtNem_81048:
Nem_StripedBlocksHoriz:		incbin	"art/nemesis/OOZ Striped Blocks.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Raising platform from OOZ	; ArtNem_810B8:
Nem_OOZElevator:		incbin	"art/nemesis/OOZ Elevator.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (30 blocks)
; Fan in OOZ		; ArtNem_81254:
Nem_OOZFan:		incbin	"art/nemesis/OOZ Fan.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Green flame thing that shoots platform up in OOZ	; ArtNem_81514:
Nem_OOZBurn:		incbin	"art/nemesis/OOZ Burner Flame.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Patterns for appearing and disappearing string of platforms in CNZ	; ArtNem_81600: ; ArtNem_CNZSnake: 
Nem_CNZCaterpillarPlats:		incbin	"art/nemesis/CNZ Caterpillar Platforms.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Spikey ball from pokie in CNZ		; ArtNem_81668:
Nem_CNZBonusSpike:		incbin	"art/nemesis/CNZ Slot Spikeballs.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Moving cube from either CNZ or CPZ	; ArtNem_816C8:
Nem_CNZBigMovingBlock:		incbin	"art/nemesis/CNZ Big Moving Block.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Elevator in CNZ		; ArtNem_817B4:
Nem_CNZElevator:		incbin	"art/nemesis/CNZ Elevator.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Bars from pokies in CNZ	; ArtNem_81826:
Nem_CNZCage:		incbin	"art/nemesis/CNZ Cages.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (6 blocks)
; Hexagonal bumper in CNZ	; ArtNem_81894:
Nem_CNZHexBumper:		incbin	"art/nemesis/CNZ Hexagonal Bumper.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Normal round bumper from CNZ	; ArtNem_8191E:
Nem_CNZRoundBumper:		incbin	"art/nemesis/CNZ Round Bumper.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Diagonal spring from CNZ that you charge up	; ArtNem_81AB0:
Nem_CNZDiagPlunger:		incbin	"art/nemesis/CNZ Diagonal Pinball Launcher.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Vertical spring from CNZ that you charge up		; ArtNem_81C96:
Nem_CNZVertPlunger:		incbin	"art/nemesis/CNZ Vertical Pinball Launcher.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Weird blocks from CNZ that you hit 3 times to get rid of	; ArtNem_81DCC: ; ArtNem_CNZMiniBumper
Nem_CNZSaucerBumper:		incbin	"art/nemesis/CNZ Saucer Bumper.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (52 blocks)
; Flippers from CNZ	; ArtNem_81EF2:
Nem_CNZFlipper:		incbin	"art/nemesis/CNZ Flipper.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Large moving platform from CPZ	; ArtNem_82216:
Nem_CPZElevator:		incbin	"art/nemesis/CPZ Elevator.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Top of water in HPZ and CPZ	; ArtNem_82364:
Nem_WaterSurface1:		incbin	"art/nemesis/CPZ & HPZ Water Surface.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Booster things in CPZ		; ArtNem_824D4:
Nem_CPZBooster:		incbin	"art/nemesis/CPZ Speed Booster.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; CPZ droplet chain enemy	; ArtNem_8253C:
Nem_CPZDroplet:		incbin	"art/nemesis/CPZ Blue Balls.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (33 blocks)
; CPZ metal things (girder, cylinders)	; ArtNem_825AE:
Nem_CPZPylons:		incbin	"art/nemesis/CPZ Pylons.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; CPZ metal block		; ArtNem_827B8:
Nem_CPZMetalBlock:		incbin	"art/nemesis/CPZ Breakable Metal Block.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Yellow and black stripy tiles from CPZ & DEZ	; ArtNem_827F8:
Nem_ConstructionStripes:		incbin	"art/nemesis/CPZ & DEZ Yellow & Black Striped Blocks.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; Yellow flipping platforms and stuff CPZ	; ArtNem_82864: ; ArtNem_CPZAnimatedBits
Nem_CPZDumpingPipePlat:		incbin	"art/nemesis/CPZ Dumping Pipe Platform.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Moving block from CPZ		; ArtNem_82A46:
Nem_CPZStairBlock:		incbin	"art/nemesis/CPZ Stair Block.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Spring that covers tube in CPZ	; ArtNem_82C06:
Nem_CPZTubeSpring:		incbin	"art/nemesis/CPZ Spintube Exit Cover & Spring.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Top of water in ARZ		; ArtNem_82E02:
Nem_WaterSurface2:		incbin	"art/nemesis/ARZ Water Surface.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (7 blocks)
; Leaves from ARZ	; ArtNem_82EE8:
Nem_Leaves:		incbin	"art/nemesis/ARZ Leaves.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (17 blocks)
; Arrow shooter and arrow from ARZ	; ArtNem_82F74:
Nem_ArrowAndShooter:		incbin	"art/nemesis/ARZ Arrow Shooter & Arrow.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; One way barrier from ARZ (unused?)	; ArtNem_830D2: ; ArtNem_ARZBarrierThing
Nem_ARZBarrier:		incbin	"art/nemesis/ARZ One-Way Barrier.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Buzz bomber			; ArtNem_8316A:
Nem_Buzzer:		incbin	"art/nemesis/Buzzer.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (58 blocks)
; Octus (OOZ octopus badnik)	; ArtNem_8336A:
Nem_Octus:		incbin	"art/nemesis/Octus.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (56 blocks)
; Aquis (OOZ seahorse badnik)	; ArtNem_8368A:
Nem_Aquis:		incbin	"art/nemesis/Aquis.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (22 blocks)
; Fish badnik from EHZ		; ArtNem_839EA:	ArtNem_Pirahna:
Nem_Masher:		incbin	"art/nemesis/Masher.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (96 blocks)
; Robotnik's main ship		; ArtNem_83BF6:
Nem_Eggpod:		incbin	"art/nemesis/Eggpod.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (111 blocks)
; CPZ Boss			; ArtNem_84332:
Nem_CPZBoss:		incbin	"art/nemesis/CPZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (100 blocks)
; Large explosion		; ArtNem_84890:
Nem_FieryExplosion:		incbin	"art/nemesis/Large Explosion.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Horizontal jet		; ArtNem_84F18:
Nem_EggpodJets:		incbin	"art/nemesis/Eggpod Jets.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Smoke trail from CPZ and HTZ bosses	; ArtNem_84F96:
Nem_BossSmoke:		incbin	"art/nemesis/CPZ & HTZ Boss Smoke Trail.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (128 blocks)
; EHZ Boss	; ArtNem_8507C:
Nem_EHZBoss:		incbin	"art/nemesis/EHZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Helicopter blades for EHZ boss	; ArtNem_85868:  ; ArtNem_EggChoppers:
Nem_EggChopperBlades:		incbin	"art/nemesis/EHZ Boss Helicopter Blades.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (107 blocks)
; HTZ boss			; ArtNem_8595C:
Nem_HTZBoss:		incbin	"art/nemesis/HTZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (166 blocks)
; ARZ boss			; ArtNem_86128:
Nem_ARZBoss:		incbin	"art/nemesis/ARZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (204 blocks)
; MCZ boss			; ArtNem_86B6E:
Nem_MCZBoss:		incbin	"art/nemesis/MCZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (133 blocks)
; CNZ boss			; ArtNem_87AAC:
Nem_CNZBoss:		incbin	"art/nemesis/CNZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (181 blocks)
; OOZ boss			; ArtNem_882D6:
Nem_OOZBoss:		incbin	"art/nemesis/OOZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (124 blocks)
; MTZ boss			; ArtNem_88DA6:
Nem_MTZBoss:		incbin	"art/nemesis/MTZ Boss.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Uncompressed art (8 blocks)
; Falling rocks and stalactites from MCZ	; Art_FallingRocks:
Art_FallingRocks:		incbin	"art/uncompressed/MCZ Boss Falling Rocks & Stalactites.bin"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Blowfly from ARZ	; ArtNem_895E4:
Nem_Whisp:		incbin	"art/nemesis/Whisp.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (50 blocks)
; Grounder from ARZ	; ArtNem_8970E:
Nem_Grounder:		incbin	"art/nemesis/Grounder.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Fish from ARZ		; ArtNem_89B9A:
Nem_ChopChop:		incbin	"art/nemesis/Chop Chop.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (19 blocks)
; Lava snake from HTZ		89DEC: ArtNem_HtzRexxon:
Nem_Rexon:		incbin	"art/nemesis/Rexon.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Enemy with spike cone on top from HTZ		89FAA:	ArtNem_HtzDriller:
Nem_Spiker:		incbin	"art/nemesis/Spiker.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Bomber badnik from SCZ	; ArtNem_8A142:
Nem_Nebula:		incbin	"art/nemesis/Nebula.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (57 blocks)
; Turtle badnik from SCZ	; ArtNem_8A362:
Nem_Turtloid:		incbin	"art/nemesis/Turtloid.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (38 blocks)
; Coconuts (EHZ monkey badnik)
Nem_Coconuts:		incbin	"art/nemesis/Coconuts.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Snake badnik from MCZ		; ArtNem_8AB36:
Nem_Crawlton:		incbin	"art/nemesis/Crawlton.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Firefly from MCZ		; ArtNem_8AC5E:
Nem_Flasher:		incbin	"art/nemesis/Flasher.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Praying mantis badnik from MTZ	8AD80: ; ArtNem_MtzMantis
Nem_Slicer:		incbin	"art/nemesis/Slicer.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (36 blocks)
; Crab badnik from MTZ			8B058: ; 
Nem_Shellcracker:		incbin	"art/nemesis/Shellcracker.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (15 blocks)
; Exploding star badnik from MTZ	8B300: ArtNem_MtzSupernova
Nem_Asteron:		incbin	"art/nemesis/Asteron.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Weird crawling badnik from CPZ	; ArtNem_8B430:
Nem_Spiny:		incbin	"art/nemesis/Spiny.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (45 blocks)
; Spider badnik from CPZ 	ArtNem_8B6B4:
Nem_Grabber:	incbin	"art/nemesis/Grabber.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (26 blocks)
; Chicken badnik from WFZ		8B9DC:
Nem_Clucker:		incbin	"art/nemesis/Clucker.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (25 blocks)
; Jet like badnik from SCZ		8BC16:
Nem_Balkiry:		incbin	"art/nemesis/Balkiry.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (217 blocks)
; Silver Sonic			; ArtNem_8BE12:
Nem_MechaSonic:		incbin	"art/nemesis/Mecha Sonic.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (79 blocks)
; The Tornado			8CC44:
Nem_Tornado:		incbin	"art/nemesis/The Tornado.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Wall turret from WFZ		8D1A0:
Nem_WFZWallTurret:		incbin	"art/nemesis/WFZ Wall Turret.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Hook on chain in WFZ		8D388:
Nem_WFZHook:		incbin	"art/nemesis/WFZ Hook & Chain.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (54 blocks)
; Retracting platform from WFZ		8D540:
Nem_WFZGunPlatform:		incbin	"art/nemesis/WFZ Gun Platform.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Wheel for belt in WFZ		8D7D8:
Nem_WFZConveyorBeltWheel:		incbin	"art/nemesis/WFZ Conveyer Belt Wheel.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Moving platform in WFZ	8D96E:
; --------------------------------------------------------------------------------------
Nem_WFZFloatingPlatform:		incbin	"art/nemesis/WFZ Floating Platform.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Giant unused vertical red laser in WFZ	8DA6E:
Nem_WFZVrtclLazer:		incbin	"art/nemesis/WFZ Vertical Laser.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (18 blocks)
; Clouds			8DAFC:
Nem_Clouds:		incbin	"art/nemesis/SCZ, WFZ, and Ending Clouds.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Red horizontal laser in WFZ		8DC42:
Nem_WFZHrzntlLazer:		incbin	"art/nemesis/WFZ Horizontal Laser.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (5 blocks)
; Catapult that shoots Sonic across quickly in WFZ	8DCA2:
Nem_WFZLaunchCatapult:		incbin	"art/nemesis/WFZ Catapult.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Rising platforms on belt from WFZ	8DD0C:
Nem_WFZBeltPlatform:		incbin	"art/nemesis/WFZ Belt Platform.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Unused badnik in WFZ		8DDF6:
Nem_WFZUnusedBadnik:		incbin	"art/nemesis/WFZ Unused Badnik.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Vertical spinning blades from WFZ	8DEB8:
Nem_WFZVrtclPrpllr:		incbin	"art/nemesis/WFZ Vertical Propeller.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (29 blocks)
; Horizontal spinning blades from WFZ		8DEE8:
Nem_WFZHrzntlPrpllr:		incbin	"art/nemesis/WFZ Horizontal Propeller.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Platforms that tilt in WFZ		8E010:
Nem_WFZTiltPlatforms:		incbin	"art/nemesis/WFZ Tilting Platforms.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Thrust from Robotnik's getaway ship in WFZ		8E0C4:
Nem_WFZThrust:		incbin	"art/nemesis/WFZ Getaway Ship Thrust.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (117 blocks)
; Laser boss from WFZ	; ArtNem_WFZBoss:
Nem_WFZBoss:		incbin	"art/nemesis/WFZ Boss.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Robotnik's head	; ArtNem_RobotnikUpper:
Nem_RobotnikUpper:		incbin	"art/nemesis/Eggman's Head.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (76 blocks)
; Robotnik		; ArtNem_RobotnikRunning:
Nem_RobotnikRunning:		incbin	"art/nemesis/Eggman.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (28 blocks)
; Robotnik's lower half	; Nem_RobotnikLower:
; --------------------------------------------------------------------------------------
Nem_RobotnikLower:		incbin	"art/nemesis/Eggman's Lower Half.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Window in back that Robotnik looks through in DEZ	; Nem_DEZWindow:
; --------------------------------------------------------------------------------------
Nem_DEZWindow:		incbin	"art/nemesis/Eggman's Window in Mecha Sonic Boss Arena.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (327 blocks)
; Eggrobo		; ArtNem_DEZBoss:
Nem_DEZBoss:		incbin	"art/nemesis/Eggrobo.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (42 blocks)
; Bouncer badnik from CNZ	; ArtNem_Crawl:
Nem_Crawl:		incbin	"art/nemesis/Crawl.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Nemesis compressed art (26 blocks)
; Rocket thruster for Tornado	; ArtNem_TornadoThruster:
Nem_TornadoThruster:		incbin	"art/nemesis/The Tornado's Rocket Booster.nem"
		even
		;incfile
; --------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 1 of end of game sequence	; MapEng_906E0:
Eni_Ending1:		incbin	"mappings/planes/Ending Still 1.eni"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 2 of end of game sequence	; MapEng_906F8:
Eni_Ending2:		incbin	"mappings/planes/Ending Still 2.eni"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 3 of end of game sequence	; MapEng_90722:
Eni_Ending3:		incbin	"mappings/planes/Ending Still 3.eni"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Frame 4 of end of game sequence	; MapEng_9073C:
Eni_Ending4:		incbin	"mappings/planes/Ending Still 4.eni"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Closeup of Tails flying plane in ending sequence	; MapEng_9076E:
Eni_EndingTailsPlane:		incbin	"mappings/planes/Tails Piloting Tornado in Ending Cutscene.eni"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed sprite mappings
; Closeup of Sonic flying plane in ending sequence	; MapEng_907C0:
Eni_EndingSonicPlane:		incbin	"mappings/planes/Sonic Piloting Tornado in Ending Cutscene.eni"
		even
; --------------------------------------------------------------------------------------

; Unused duplicates of Eni_EndGameLogo
;Eni_9082A:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_90852:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_9087A:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_908A2:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_908CA:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_908F2:	
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_9091A:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_90942:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
;Eni_9096A:		
		incbin	"mappings/planes/Sonic 2 Ending Logo.eni"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (363 blocks)
; Movie sequence at end of game		; ArtNem_EndingPics:
Nem_EndingPics:		incbin	"art/nemesis/Ending Stills.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (127 blocks)
; Final image of Tornado with it and Sonic facing screen	; ArtNem_EndingFinalTornado:
Nem_EndingFinalTornado:		incbin	"art/nemesis/Tornado Facing Camera at End of Ending Sequence.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (109 blocks)
; Mini pictures of Tornado in final ending sequence	; ArtNem_EndingMiniTornado:
Nem_EndingMiniTornado:		incbin	"art/nemesis/Tornado Distant Shots in Ending Sequence.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (135 blocks)
; Mini pictures of Sonic and final image of Sonic
Nem_EndingSonic:		incbin	"art/nemesis/Ending Sequence Sonic.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (117 blocks)
; Mini pictures of Sonic and final image of Sonic in Super Sonic mode	; ArtNem_EndingSuperSonic:
Nem_EndingSuperSonic:		incbin	"art/nemesis/Ending Sequence Super Sonic.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (181 blocks)
; Final image of Tails		; ArtNem_93F3C:
Nem_EndingTails:		incbin	"art/nemesis/Ending Sequence Tails.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (72 blocks)
; Sonic the Hedgehog 2 image at end of credits	; ArtNem_94B28:
Nem_EndingTitle:		incbin	"art/nemesis/Sonic the Hedgehog 2 Credits Logo.nem"


; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; LEVEL ART AND BLOCK MAPPINGS (16x16 and 128x128)
;
; #define BLOCK_TBL_LEN  // table length unknown
; #define BIGBLOCK_TBL_LEN // table length unknown
; typedef uint16_t uword
;
; struct blockMapElement {
;  uword unk : 5;    // u
;  uword patternIndex : 11; };  // i
; // uuuu uiii iiii iiii
;
; blockMapElement (*blockMapTable)[BLOCK_TBL_LEN][4] = 0xFFFF9000
;
; struct bigBlockMapElement {
;  uword : 4
;  uword blockMapIndex : 12; };  //I
; // 0000 IIII IIII IIII
;
; bigBlockMapElement (*bigBlockMapTable)[BIGBLOCK_TBL_LEN][64] = 0xFFFF0000
;
; /*
; This data determines how the level blocks will be constructed graphically. There are
; two kinds of block mappings: 16x16 and 128x128.
;
; 16x16 blocks are made up of four cells arranged in a square (thus, 16x16 pixels).
; Two bytes are used to define each cell, so the block is 8 bytes long. It can be
; represented by the bitmap blockMapElement, of which the members are:
;
; unk
;  These bits have to do with pattern orientation. I do not know their exact
;  meaning.
; patternIndex
;  The pattern's address divided by $20. Otherwise said: an index into the
;  pattern array.
;
; Each mapping can be expressed as an array of four blockMapElements, while the
; whole table is expressed as a two-dimensional array of blockMapElements (blockMapTable).
; The maps are read in left-to-right, top-to-bottom order.
;
; 128x128 maps are basically lists of indices into blockMapTable. The levels are built
; out of these "big blocks", rather than the "small" 16x16 blocks. bigBlockMapTable is,
; predictably, the table of big block mappings.
; Each big block is 8 16x16 blocks, or 16 cells, square. This produces a total of 16
; blocks or 64 cells.
; As noted earlier, each element of the table provides 'i' for blockMapTable[i][j].
; */

; ----------------------------------------------------------------------------------
; EHZ 16x16 block mappings (Kosinski compression)
; ----------------------------------------------------------------------------------
BM16_EHZ:		incbin	"mappings/16x16/EHZ.kos"
;-----------------------------------------------------------------------------------
;EHZ/HTZ main level patterns (Kosinski compression)
; ArtKoz_95C24:
Kos_EHZ:		incbin	"art/kosinski/EHZ_HTZ.kos"
;-----------------------------------------------------------------------------------
;HTZ 16x16 block mappings (Kosinski compression)
BM16_HTZ:		incbin	"mappings/16x16/HTZ.kos"
;-----------------------------------------------------------------------------------
;HTZ pattern suppliment	to EHZ level patterns (Kosinski	compression)
; ArtKoz_98AB4:
Kos_HTZ:		incbin	"art/kosinski/HTZ_Supp.kos"
;-----------------------------------------------------------------------------------
;EHZ/HTZ 128x128 block mappings	(Kosinski compression)
BM128_EHZ:		incbin	"mappings/128x128/EHZ_HTZ.kos"
;-----------------------------------------------------------------------------------
; MTZ 16x16 block mappings (Kosinski compression)
BM16_MTZ:		incbin	"mappings/16x16/MTZ.kos"
;-----------------------------------------------------------------------------------
; MTZ main level patterns (Kosinski compression)
; ArtKoz_9DB64:
Kos_MTZ:		incbin	"art/kosinski/MTZ.kos"
;-----------------------------------------------------------------------------------
; MTZ 128x128 block mappings (Kosinski compression)
BM128_MTZ:		incbin	"mappings/128x128/MTZ.kos"
;-----------------------------------------------------------------------------------
; HPZ 16x16 block mappings (Kosinski compression)
BM16_HPZ:		;incbin	"mappings/16x16/HPZ.kos"
;-----------------------------------------------------------------------------------
; HPZ main level patterns (Kosinski compression)
Kos_HPZ:		;incbin	"art/kosinski/HPZ.kos"
;-----------------------------------------------------------------------------------
; HPZ 128x128 block mappings (Kosinski compression)
BM128_HPZ:		;incbin	"mappings/128x128/HPZ.kos"
;-----------------------------------------------------------------------------------
;OOZ 16x16 block mappings (Kosinski compression)
BM16_OOZ:		incbin	"mappings/16x16/OOZ.kos"
;-----------------------------------------------------------------------------------
;OOZ main level	patterns (Kosinski compression)
Kos_OOZ:		incbin	"art/kosinski/OOZ.kos"
;-----------------------------------------------------------------------------------
;OOZ 128x128 block mappings (Kosinski compression)
BM128_OOZ:		incbin	"mappings/128x128/OOZ.kos"
;-----------------------------------------------------------------------------------
;MCZ 16x16 block mappings (Kosinski compression)
BM16_MCZ:		incbin	"mappings/16x16/MCZ.kos"
;-----------------------------------------------------------------------------------
;MCZ main level	patterns (Kosinski compression)
Kos_MCZ:		incbin	"art/kosinski/MCZ.kos"
;-----------------------------------------------------------------------------------
;MCZ 128x128 block mappings (Kosinski compression)
BM128_MCZ:		incbin	"mappings/128x128/MCZ.kos"
;-----------------------------------------------------------------------------------
;CNZ 16x16 block mappings (Kosinski compression)
BM16_CNZ:		incbin	"mappings/16x16/CNZ.kos"
;-----------------------------------------------------------------------------------
;CNZ main level	patterns (Kosinski compression)
Kos_CNZ:		incbin	"art/kosinski/CNZ.kos"
;-----------------------------------------------------------------------------------
;CNZ 128x128 block mappings (Kosinski compression)
BM128_CNZ:		incbin	"mappings/128x128/CNZ.kos"
;-----------------------------------------------------------------------------------
;CPZ/DEZ 16x16 block mappings (Kosinski	compression)
BM16_CPZ:		incbin	"mappings/16x16/CPZ_DEZ.kos"
;-----------------------------------------------------------------------------------
;CPZ/DEZ main level patterns (Kosinski compression)
Kos_CPZ:		incbin	"art/kosinski/CPZ_DEZ.kos"
;-----------------------------------------------------------------------------------
;CPZ/DEZ 128x128 block mappings	(Kosinski compression)
BM128_CPZ:		incbin	"mappings/128x128/CPZ_DEZ.kos"
;-----------------------------------------------------------------------------------
;ARZ 16x16 block mappings (Kosinski compression)
; This file contains $320 blocks, overflowing the 'Block_table' buffer. This causes
; 'TempArray_LayerDef' to be overwritten with (empty) block data.
BM16_ARZ:		incbin	"mappings/16x16/ARZ.kos"
;-----------------------------------------------------------------------------------
;ARZ main level	patterns (Kosinski compression)
Kos_ARZ:		incbin	"art/kosinski/ARZ.kos"
;-----------------------------------------------------------------------------------
;ARZ 128x128 block mappings (Kosinski compression)
BM128_ARZ:		incbin		"mappings/128x128/ARZ.kos"
;-----------------------------------------------------------------------------------
;WFZ/SCZ 16x16 block mappings (Kosinski	compression)
BM16_WFZ:		incbin	"mappings/16x16/WFZ_SCZ.kos"
;-----------------------------------------------------------------------------------
;WFZ/SCZ main level patterns (Kosinski compression)
Kos_SCZ:		incbin	"art/kosinski/WFZ_SCZ.kos"
;-----------------------------------------------------------------------------------
;WFZ pattern suppliment	to SCZ tiles (Kosinski compression)
Kos_WFZ:		incbin	"art/kosinski/WFZ_Supp.kos"
;-----------------------------------------------------------------------------------
;WFZ/SCZ 128x128 block mappings	(Kosinski compression)
BM128_WFZ:		incbin	"mappings/128x128/WFZ_SCZ.kos"
;-----------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------
; Special stage	tube mappings - End curve right, slope up, slope down, begin curve right
; Frame	1
MapSpec_Rise1:		incbin	"mappings/special stage/Slope Up 1.bin"
;-----------------------------------------------------------------------------------
;Frame 2
MapSpec_Rise2:		incbin	"mappings/special stage/Slope Up 2.bin"
;-----------------------------------------------------------------------------------
;Frame 3
MapSpec_Rise3:		incbin	"mappings/special stage/Slope Up 3.bin"
;-----------------------------------------------------------------------------------
;Frame 4
MapSpec_Rise4:		incbin	"mappings/special stage/Slope Up 4.bin"
;-----------------------------------------------------------------------------------
;Frame 5
MapSpec_Rise5:		incbin	"mappings/special stage/Slope Up 5.bin"
;-----------------------------------------------------------------------------------
;Frame 6
MapSpec_Rise6:		incbin	"mappings/special stage/Slope Up 6.bin"
;-----------------------------------------------------------------------------------
;Frame 7
MapSpec_Rise7:		incbin	"mappings/special stage/Slope Up 7.bin"
;-----------------------------------------------------------------------------------
;Frame 8
MapSpec_Rise8:		incbin	"mappings/special stage/Slope Up 8.bin"
;-----------------------------------------------------------------------------------
;Frame 9
MapSpec_Rise9:		incbin	"mappings/special stage/Slope Up 9.bin"
;-----------------------------------------------------------------------------------
;Frame 10
MapSpec_Rise10:		incbin	"mappings/special stage/Slope Up 10.bin"
;-----------------------------------------------------------------------------------
;Frame 11
MapSpec_Rise11:		incbin	"mappings/special stage/Slope Up 11.bin"
;-----------------------------------------------------------------------------------
;Frame 12
MapSpec_Rise12:		incbin	"mappings/special stage/Slope Up 12.bin"
;-----------------------------------------------------------------------------------
;Frame 13
MapSpec_Rise13:		incbin	"mappings/special stage/Slope Up 13.bin"
;-----------------------------------------------------------------------------------
;Frame 14
MapSpec_Rise14:		incbin	"mappings/special stage/Slope Up 14.bin"
;-----------------------------------------------------------------------------------
;Frame 15
MapSpec_Rise15:		incbin	"mappings/special stage/Slope Up 15.bin"
;-----------------------------------------------------------------------------------
;Frame 16
MapSpec_Rise16:		incbin	"mappings/special stage/Slope Up 16.bin"
;-----------------------------------------------------------------------------------
;Frame 17
MapSpec_Rise17:		incbin	"mappings/special stage/Slope Up 17.bin"
;-----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------
;Special stage tube mappings - Straight path
;Frame 1
MapSpec_Straight1:		incbin	"mappings/special stage/Straight Path 1.bin"
;-----------------------------------------------------------------------------------
;Frame 2
MapSpec_Straight2:		incbin	"mappings/special stage/Straight Path 2.bin"
;-----------------------------------------------------------------------------------
;Frame 3
MapSpec_Straight3:		incbin	"mappings/special stage/Straight Path 3.bin"
;-----------------------------------------------------------------------------------
;Frame 4
MapSpec_Straight4:		incbin	"mappings/special stage/Straight Path 4.bin"
;-----------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------
;Special stage tube mappings - Exit curve & slope down
;Frame 1
MapSpec_Drop1:		incbin	"mappings/special stage/Slope Down 1.bin"
;-----------------------------------------------------------------------------------
;Frame 2
MapSpec_Drop2:		incbin	"mappings/special stage/Slope Down 2.bin"
;-----------------------------------------------------------------------------------
;Frame 3
MapSpec_Drop3:		incbin	"mappings/special stage/Slope Down 3.bin"
;-----------------------------------------------------------------------------------
;Frame 4
MapSpec_Drop4:		incbin	"mappings/special stage/Slope Down 4.bin"
;-----------------------------------------------------------------------------------
;Frame 5
MapSpec_Drop5:		incbin	"mappings/special stage/Slope Down 5.bin"
;-----------------------------------------------------------------------------------
;Frame 6
MapSpec_Drop6:		incbin	"mappings/special stage/Slope Down 6.bin"
;-----------------------------------------------------------------------------------
;Frame 7
MapSpec_Drop7:		incbin	"mappings/special stage/Slope Down 7.bin"
;-----------------------------------------------------------------------------------
;Frame 8
MapSpec_Drop8:		incbin	"mappings/special stage/Slope Down 8.bin"
;-----------------------------------------------------------------------------------
;Frame 9
MapSpec_Drop9:		incbin	"mappings/special stage/Slope Down 9.bin"
;-----------------------------------------------------------------------------------
;Frame 10
MapSpec_Drop10:		incbin	"mappings/special stage/Slope Down 10.bin"
;-----------------------------------------------------------------------------------
;Frame 11
MapSpec_Drop11:		incbin	"mappings/special stage/Slope Down 11.bin"
;-----------------------------------------------------------------------------------
;Frame 12
MapSpec_Drop12:		incbin	"mappings/special stage/Slope Down 12.bin"
;-----------------------------------------------------------------------------------
;Frame 13
MapSpec_Drop13:		incbin	"mappings/special stage/Slope Down 13.bin"
;-----------------------------------------------------------------------------------
;Frame 14
MapSpec_Drop14:		incbin	"mappings/special stage/Slope Down 14.bin"
;-----------------------------------------------------------------------------------
;Frame 15
MapSpec_Drop15:		incbin	"mappings/special stage/Slope Down 15.bin"
;-----------------------------------------------------------------------------------
;Frame 16
MapSpec_Drop16:		incbin	"mappings/special stage/Slope Down 16.bin"
;-----------------------------------------------------------------------------------
;Frame 17
MapSpec_Drop17:		incbin	"mappings/special stage/Slope Down 17.bin"
;-----------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------
;Special stage tube mappings - Curve
;Frame 1
MapSpec_Turning1:		incbin	"mappings/special stage/Curve 1.bin"
;-----------------------------------------------------------------------------------
;Frame 2
MapSpec_Turning2:		incbin	"mappings/special stage/Curve 2.bin"
;-----------------------------------------------------------------------------------
;Frame 3
MapSpec_Turning3:		incbin	"mappings/special stage/Curve 3.bin"
;-----------------------------------------------------------------------------------
;Frame 4
MapSpec_Turning4:		incbin	"mappings/special stage/Curve 4.bin"
;-----------------------------------------------------------------------------------
;Frame 5
MapSpec_Turning5:		incbin	"mappings/special stage/Curve 5.bin"
;-----------------------------------------------------------------------------------
;Frame 6
MapSpec_Turning6:		incbin	"mappings/special stage/Curve 6.bin"
;-----------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------
;Special stage tube mappings - Exit curve
;Frame 1
MapSpec_Unturn1:		incbin "mappings/special stage/Exit Curve 1.bin"
;-----------------------------------------------------------------------------------
;Frame 2
MapSpec_Unturn2:		incbin "mappings/special stage/Exit Curve 2.bin"
;-----------------------------------------------------------------------------------
;Frame 3
MapSpec_Unturn3:		incbin "mappings/special stage/Exit Curve 3.bin"
;-----------------------------------------------------------------------------------
;Frame 4
MapSpec_Unturn4:		incbin "mappings/special stage/Exit Curve 4.bin"
;-----------------------------------------------------------------------------------
;Frame 5
MapSpec_Unturn5:		incbin "mappings/special stage/Exit Curve 5.bin"
;-----------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------
; Special stage tube mappings - Begin curve right
;Frame 1
MapSpec_Turn1:		incbin "mappings/special stage/Curve Right 1.bin"
;-----------------------------------------------------------------------------------
;Frame 2
MapSpec_Turn2:		incbin "mappings/special stage/Curve Right 2.bin"
;-----------------------------------------------------------------------------------
;Frame 3
MapSpec_Turn3:		incbin "mappings/special stage/Curve Right 3.bin"
;-----------------------------------------------------------------------------------
;Frame 4
MapSpec_Turn4:		incbin "mappings/special stage/Curve Right 4.bin"
;-----------------------------------------------------------------------------------
;Frame 5
MapSpec_Turn5:		incbin "mappings/special stage/Curve Right 5.bin"
;-----------------------------------------------------------------------------------
;Frame 6
MapSpec_Turn6:		incbin "mappings/special stage/Curve Right 6.bin"
;-----------------------------------------------------------------------------------
;Frame 7
MapSpec_Turn7:		incbin "mappings/special stage/Curve Right 7.bin"
; --------------------------------------------------------------------------------------


; --------------------------------------------------------------------------------------
; Kosinski compressed art
; Special stage	level patterns
; Note:	Only one line of each tile is stored in	this archive. The other	7 lines	are
; the same at this one line, so to get the full tiles, each line needs to be
; duplicated 7 times over. A clever optimization documented in Coding Secrets.
; Koz_DCA38
Kos_Special:		incbin	"art/kosinski/SpecialStage.kos"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (127 blocks)
; Background patterns for special stage ; ArtNem_DCD68:
Nem_SpecialBack:		incbin	"art/nemesis/Special Stage Background.nem"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed tile mappings
; Main background mappings for special stage ; MapEng_SpecialBack: ; MapEng_DD1DE:
Eni_SpecialBack:		incbin	"mappings/planes/Special Stage Background (Main).eni"
		even
; --------------------------------------------------------------------------------------
; Enigma compressed tile mappings
; Lower	background mappings for	special	stage	; MapEng_DD30C:
Eni_SpecialBackBottom:		incbin	"mappings/planes/Special Stage Background (Lower).eni"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (62 blocks)
; Sonic/Miles and number text from special stage	; ArtNem_DD48A:
Nem_SpecialHUD:		incbin	"art/nemesis/Special Stage HUD.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; "Start" and checkered flag patterns in special stage	; ArtNem_DD790:
Nem_SpecialStart:		incbin	"art/nemesis/Special Stage Checkered Flag & Start Text.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (37 blocks)
; Stars in special stage	; ArtNem_DD8CE:
Nem_SpecialStars:		incbin	"art/nemesis/Special Stage Stars.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (13 blocks)
; Text for most of the "Player VS Player" message in 2P special stage	; ArtNem_DD9C8:
Nem_SpecialPlayerVSPlayer:		incbin	"art/nemesis/Special Stage Player VS Player Text.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (104 blocks)
; Ring patterns in special stage	; ArtNem_DDA7E:
Nem_SpecialRings:		incbin	"art/nemesis/Special Stage Rings.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (38 blocks)
; Horizontal shadow patterns in special stage	; ArtNem_DDFA4: ; ArtNem_SpecialFlatShadow
Nem_SpecialHorizShadow:		incbin	"art/nemesis/Special Stage Horizontal Shadow.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (58 blocks)
; Diagonal shadow patterns in special stage	; ArtNem_DE05A:
Nem_SpecialDiagShadow:		incbin	"art/nemesis/Special Stage Diagonal Shadow.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (25 blocks)
; Vertical shadow patterns in special stage	; ArtNem_DE120: ; ArtNem_SpecialSideShadow
Nem_SpecialVertShadow:		incbin	"art/nemesis/Special Stage Vertical Shadow.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; Explosion patterns in special stage	; ArtNem_DE188:
Nem_SpecialExplosion:		incbin	"art/nemesis/Special Stage Explosion.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (80 blocks)
; Bomb patterns in special stage	; ArtNem_DE4BC:
Nem_SpecialBomb:		incbin	"art/nemesis/Special Stage Bomb.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (46 blocks)
; Emerald patterns in special stage	; ArtNem_DE8AC:
Nem_SpecialEmerald:		incbin	"art/nemesis/Special Stage Emerald.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (99 blocks)
; Text for the messages and thumbs up/down icon in special stage	; ArtNem_DEAF4:
Nem_SpecialMessages:		incbin	"art/nemesis/Special Stage Checkpoint Messages & Icons.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art - 851 blocks
; Sonic	and Tails animation frames from	special	stage ; Nem_DEEAE
; [FixBugs] In this file, Tails' arms are tan instead of orange.
; Art for Obj09 and Obj10 and Obj88
Nem_SpecialSonicAndTails:		incbin	"art/nemesis/Special Stage Sonic & Tails.nem"
		even
; --------------------------------------------------------------------------------------
; Nemesis compressed art (5 blocks)
; "Tails" patterns from special stage	; ArtNem_E247E:
Nem_SpecialTailsText:		incbin	"art/nemesis/Special Stage Tails HUD Text.nem"
		even
; --------------------------------------------------------------------------------------
; Special stage	object perspective data	(Kosinski compression) 
; MiscKoz_E24FE: ; MiscKoz_SpecialPerspective:
Kos_SpecialPerspective:		incbin	"misc/Special Stage Object Perspective Data.kos"
		even
; --------------------------------------------------------------------------------------
; Special stage	level layout (Nemesis compression)
Nem_SpecialLevelLayouts:		incbin	"misc/Special Stage Level Layouts.nem"
		even
; --------------------------------------------------------------------------------------
; Special stage	object location	list (Kosinski compression) ; MiscKoz_SpecialObjectLocations:
Koz_SpecialObjectLocations:		incbin	"misc/Special Stage Object Locations.kos"
		even
		
; --------------------------------------------------------------------------------------
; Filler (free space) (unnecessary; could be replaced with "even")
; --------------------------------------------------------------------------------------
		align $100
; --------------------------------------------------------------------------------------
; Offset index of ring locations
; --------------------------------------------------------------------------------------
Off_Rings:	dc.w Rings_EHZ_1-Off_Rings; 0 ;	DATA XREF: h+35Ao
					
		dc.w Rings_EHZ_2-Off_Rings; 1
		dc.w Rings_Lev1_1-Off_Rings; 2
		dc.w Rings_Lev1_2-Off_Rings; 3
		dc.w Rings_Lev2_1-Off_Rings; 4
		dc.w Rings_Lev2_2-Off_Rings; 5
		dc.w Rings_Lev3_1-Off_Rings; 6
		dc.w Rings_Lev3_2-Off_Rings; 7
		dc.w Rings_MTZ_1-Off_Rings; 8
		dc.w Rings_MTZ_2-Off_Rings; 9
		dc.w Rings_MTZ_3-Off_Rings; 10
		dc.w Rings_MTZ_4-Off_Rings; 11
		dc.w Rings_WFZ_1-Off_Rings; 12
		dc.w Rings_WFZ_2-Off_Rings; 13
		dc.w Rings_HTZ_1-Off_Rings; 14
		dc.w Rings_HTZ_2-Off_Rings; 15
		dc.w Rings_HPZ_1-Off_Rings; 16
		dc.w Rings_HPZ_2-Off_Rings; 17
		dc.w Rings_Lev9_1-Off_Rings; 18
		dc.w Rings_Lev9_2-Off_Rings; 19
		dc.w Rings_OOZ_1-Off_Rings; 20
		dc.w Rings_OOZ_2-Off_Rings; 21
		dc.w Rings_MCZ_1-Off_Rings; 22
		dc.w Rings_MCZ_2-Off_Rings; 23
		dc.w Rings_CNZ_1-Off_Rings; 24
		dc.w Rings_CNZ_2-Off_Rings; 25
		dc.w Rings_CPZ_1-Off_Rings; 26
		dc.w Rings_CPZ_2-Off_Rings; 27
		dc.w Rings_DEZ_1-Off_Rings; 28
		dc.w Rings_DEZ_2-Off_Rings; 29
		dc.w Rings_ARZ_1-Off_Rings; 30
		dc.w Rings_ARZ_2-Off_Rings; 31
		dc.w Rings_SCZ_1-Off_Rings; 32
		dc.w Rings_SCZ_2-Off_Rings; 33
		
Rings_EHZ_1:	incbin	"level/rings/EHZ 1.bin"
Rings_EHZ_2:	incbin	"level/rings/EHZ 2.bin"
Rings_Lev1_1:	incbin	"level/rings/01 1.bin"	; null
Rings_Lev1_2:	incbin	"level/rings/01 2.bin"	; null
Rings_Lev2_1:	incbin	"level/rings/02 1.bin"	; null
Rings_Lev2_2:	incbin	"level/rings/02 2.bin"	; null
Rings_Lev3_1:	incbin	"level/rings/03 1.bin"	; null
Rings_Lev3_2:	incbin	"level/rings/03 2.bin"	; null
Rings_MTZ_1:	incbin	"level/rings/MTZ 1.bin"
Rings_MTZ_2:	incbin	"level/rings/MTZ 2.bin"
Rings_MTZ_3:	incbin	"level/rings/MTZ 3.bin"
Rings_MTZ_4:	incbin	"level/rings/MTZ 4.bin"	; null
Rings_HTZ_1:	incbin	"level/rings/HTZ 1.bin"
Rings_HTZ_2:	incbin	"level/rings/HTZ 2.bin"
Rings_HPZ_1:	incbin	"level/rings/HPZ 1.bin"
Rings_HPZ_2:	incbin	"level/rings/HPZ 2.bin"	; null
Rings_Lev9_1:	incbin	"level/rings/09 1.bin"	; null
Rings_Lev9_2:	incbin	"level/rings/09 2.bin"	; null
Rings_OOZ_1:	incbin	"level/rings/OOZ 1.bin"
Rings_OOZ_2:	incbin	"level/rings/OOZ 2.bin"
Rings_MCZ_1:	incbin	"level/rings/MCZ 1.bin"
Rings_MCZ_2:	incbin	"level/rings/MCZ 2.bin"
Rings_CNZ_1:	incbin	"level/rings/CNZ 1.bin"
Rings_CNZ_2:	incbin	"level/rings/CNZ 2.bin"
Rings_CPZ_1:	incbin	"level/rings/CPZ 1.bin"
Rings_CPZ_2:	incbin	"level/rings/CPZ 2.bin"
Rings_DEZ_1:	incbin	"level/rings/DEZ 1.bin"	; null
Rings_DEZ_2:	incbin	"level/rings/DEZ 2.bin"	; null
Rings_WFZ_1:	incbin	"level/rings/WFZ 1.bin"
Rings_WFZ_2:	incbin	"level/rings/WFZ 2.bin"
Rings_ARZ_1:	incbin	"level/rings/ARZ 1.bin"
Rings_ARZ_2:	incbin	"level/rings/ARZ 2.bin"
Rings_SCZ_1:	incbin	"level/rings/SCZ 1.bin"
Rings_SCZ_2:	incbin	"level/rings/SCZ 2.bin"	; null
; --------------------------------------------------------------------------------------
; Filler (free space)
; --------------------------------------------------------------------------------------
		align $200
; --------------------------------------------------------------------------------------
; Offset index of sprite locations
; --------------------------------------------------------------------------------------
Off_Sprites:	dc.w ObjPos_EHZ_1-Off_Sprites;	0 
					
		dc.w ObjPos_EHZ_2-Off_Sprites;	1
		dc.w ObjPos_Null-Off_Sprites;	2
		dc.w ObjPos_Null-Off_Sprites;	3
		dc.w ObjPos_Null-Off_Sprites;	4
		dc.w ObjPos_Null-Off_Sprites;	5
		dc.w ObjPos_Null-Off_Sprites;	6
		dc.w ObjPos_Null-Off_Sprites;	7
		dc.w ObjPos_MTZ_1-Off_Sprites;	8
		dc.w ObjPos_MTZ_2-Off_Sprites;	9
		dc.w ObjPos_MTZ_3-Off_Sprites;	10
		dc.w ObjPos_MTZ_3-Off_Sprites;	11
		dc.w ObjPos_WFZ_1-Off_Sprites;	12
		dc.w ObjPos_WFZ_2-Off_Sprites;	13
		dc.w ObjPos_HTZ_1-Off_Sprites;	14
		dc.w ObjPos_HTZ_2-Off_Sprites;	15
		dc.w ObjPos_HPZ_1-Off_Sprites;	16
		dc.w ObjPos_HPZ_2-Off_Sprites;	17
		dc.w ObjPos_Null-Off_Sprites;	18
		dc.w ObjPos_Null-Off_Sprites;	19
		dc.w ObjPos_OOZ_1-Off_Sprites;	20
		dc.w ObjPos_OOZ_2-Off_Sprites;	21
		dc.w ObjPos_MCZ_1-Off_Sprites;	22
		dc.w ObjPos_MCZ_2-Off_Sprites;	23
		dc.w ObjPos_CNZ_1-Off_Sprites;	24
		dc.w ObjPos_CNZ_2-Off_Sprites;	25
		dc.w ObjPos_CPZ_1-Off_Sprites;	26
		dc.w ObjPos_CPZ_2-Off_Sprites;	27
		dc.w ObjPos_DEZ_1-Off_Sprites;	28
		dc.w ObjPos_DEZ_2-Off_Sprites;	29
		dc.w ObjPos_ARZ_1-Off_Sprites;	30
		dc.w ObjPos_ARZ_2-Off_Sprites;	31
		dc.w ObjPos_SCZ_1-Off_Sprites;	32
		dc.w ObjPos_SCZ_2-Off_Sprites;	33
		endobj
ObjPos_EHZ_1:		incbin	"level/objects/EHZ 1.bin"
		endobj
	;if Revision=0
		; a plane switcher was improperly placed
;ObjPos_EHZ_2:		incbin 	"level/objects/EHZ 2 (REV00).bin"
	;else
ObjPos_EHZ_2:		incbin	"level/objects/EHZ 2.bin"
	;endc
		endobj
ObjPos_MTZ_1:		incbin	"level/objects/MTZ 1.bin"
		endobj
ObjPos_MTZ_2:		incbin	"level/objects/MTZ 2.bin"
		endobj
ObjPos_MTZ_3:		incbin	"level/objects/MTZ 3.bin"
		endobj

	;if Revision=0
		; the lampposts were bugged: their 'remember state' flags weren't set
;ObjPos_WFZ_1:		incbin  "level/objects/WFZ 1 (REV00).bin"
	;else
ObjPos_WFZ_1:		incbin	"level/objects/WFZ 1.bin"
	;endc
		endobj
ObjPos_WFZ_2:		;incbin	"level/objects/WFZ 2.bin"
		endobj
ObjPos_HTZ_1:		incbin	"level/objects/HTZ 1.bin"
		endobj
ObjPos_HTZ_2:		incbin	"level/objects/HTZ 2.bin"
		endobj
ObjPos_HPZ_1:		incbin	"level/objects/HPZ 1.bin"
		endobj
ObjPos_HPZ_2:		;incbin	"level/objects/HPZ 2.bin"
		endobj
		endobj
ObjPos_OOZ_1:		incbin	"level/objects/OOZ 1.bin"
		endobj
ObjPos_OOZ_2:		incbin	"level/objects/OOZ 2.bin"
		endobj
ObjPos_MCZ_1:		incbin	"level/objects/MCZ 1.bin"
		endobj
ObjPos_MCZ_2:		incbin	"level/objects/MCZ 2.bin"
		endobj

	;if Revision=0
	; the signposts are too low, causing them to poke out the bottom of the ground
;ObjPos_CNZ_1:		incbin	"level/objects/CNZ 1 (REV00).bin"
;		endobj
;ObjPos_CNZ_2:		incbin	"level/objects/CNZ 2 (REV00).bin"
	;else
ObjPos_CNZ_1:		incbin	"level/objects/CNZ 1.bin"
		endobj
ObjPos_CNZ_2:		incbin	"level/objects/CNZ 2.bin"
	;endc
		endobj	
ObjPos_CPZ_1:		incbin	"level/objects/CPZ 1.bin"
		endobj
ObjPos_CPZ_2:		incbin	"level/objects/CPZ 2.bin"
		endobj
ObjPos_DEZ_1:		incbin	"level/objects/DEZ 1.bin"
		endobj
ObjPos_DEZ_2:		;incbin	"level/objects/DEZ 2.bin"
		endobj
ObjPos_ARZ_1:		incbin	"level/objects/ARZ 1.bin"
		endobj
ObjPos_ARZ_2:		incbin	"level/objects/ARZ 2.bin"
		endobj
ObjPos_SCZ_1:		incbin	"level/objects/SCZ 1.bin"
		endobj
ObjPos_SCZ_2:		;incbin	"level/objects/SCZ 2.bin"
		endobj
ObjPos_Null:
		endobj
		endobj
		endobj
		endobj
ObjPos_End:		
; --------------------------------------------------------------------------------------
; Filler (free space) (unnecessary; could be replaced with "even")
; --------------------------------------------------------------------------------------
		align $1000

; ---------------------------------------------------------------------------
; Subroutine to load the sound driver
; ---------------------------------------------------------------------------
; sub_EC000:
SoundDriverLoad:
		move	sr,-(sp)
		pushr	d0-a6
		disable_ints
		lea	(z80_bus_request).l,a3
		lea	(z80_reset).l,a2
		moveq	#0,d2
		move.w	#$100,d1
		move.w	d1,(a3)	; get Z80 bus
		move.w	d1,(a2)	; release Z80 reset (was held high by console on startup)

	.waitforbus:				
		btst	d2,(a3)
		bne.s	.waitforbus
		jsr	DecompressSoundDriver(pc)
		btst	#0,(vdp_control_port+1).l	; check video mode
		sne	(z80_ram+7).l					; set if PAL
		move.w	d2,(a2)	; hold Z80 reset
		move.w	d2,(a3)	; release Z80 bus
		moveq	#-$1A,d0

	.wait:				
		dbf	d0,.wait	; wait for 2,314 cycles
		move.w	d1,(a2)	; release Z80 reset
		popr	d0-a6
		move	(sp)+,sr
		rts	

; =============== S U B	R O U T	I N E =======================================

DecompressSoundDriver:				
		lea	SoundDriver(pc),a6
 ; WARNING: SndDriverCompress.exe needs a source code edit if you rename this label
movewZ80CompSize:		move.w	#$0F64,d7 ; patched after compression by SndDriverCompress.exe, since the compressed size is impossible to know beforehand
		moveq	#0,d6	; The decompressor knows it's run out of descriptor bits when it starts reading 0's in bit 8
		lea	(z80_ram).l,a5
		moveq	#0,d5
		lea	(z80_ram).l,a4


SaxDec_Loop:								
		lsr.w	#1,d6	; Next descriptor bit
		btst	#8,d6	; Check if we've run out of bits
		bne.s	.bitsremaining	; (lsr 'shifts in' 0's)
		jsr	SaxDec_GetByte(pc)
		move.b	d0,d6
		ori.w	#$FF00,d6	; These set bits will disappear from the high byte as the register is shifted

	.bitsremaining:				
		btst	#0,d6
		beq.s	loc_EC086

; SaxDec_ReadUncompressed:		
		jsr	SaxDec_GetByte(pc)
		move.b	d0,(a5)+
		addq.w	#1,d5
		bra.w	SaxDec_Loop
; ===========================================================================

loc_EC086:				
		jsr	SaxDec_GetByte(pc)
		moveq	#0,d4
		move.b	d0,d4
		jsr	SaxDec_GetByte(pc)
		move.b	d0,d3
		andi.w	#$F,d3
		addq.w	#2,d3	; d3 is the length of the match minus 1
		andi.w	#$F0,d0
		lsl.w	#4,d0
		add.w	d0,d4
		addi.w	#$12,d4
		andi.w	#$FFF,d4	; d4 is the offset into the current $1000-byte window
		; This part is a little tricky. You see, d4 currently contains the low three nibbles of an offset into the decompressed data,
		; where the dictionary match lies. The way the high nibble is decided is first by taking it from d5 - the offset of the end
		; of the decompressed data so far. Then, we see if the resulting offset in d4 is somehow higher than d5.
		; If it is, then it's invalid... *unless* you subtract $1000 from it, in which case it refers to data in the previous $1000 block of bytes.
		; This is all just a really gimmicky way of having an offset with a range of $1000 bytes from the end of the decompressed data.
		; If, however, we cannot subtract $1000 because that would put the pointer before the start of the decompressed data, then
		; this is actually a 'zero-fill' match, which encodes a series of zeroes.		
		move.w	d5,d0
		andi.w	#$F000,d0
		add.w	d0,d4
		cmp.w	d4,d5
		bcc.s	SaxDec_IsDictionaryReference
		subi.w	#$1000,d4
		bcc.s	SaxDec_IsDictionaryReference
		
	; SaxDec_IsSequenceOfZeroes:		
		add.w	d3,d5
		addq.w	#1,d5

	.loop:				
		move.b	#0,(a5)+
		dbf	d3,.loop

		bra.w	SaxDec_Loop
		
; ===========================================================================
; loc_EC0CC:
SaxDec_IsDictionaryReference:								
		add.w	d3,d5
		addq.w	#1,d5

	.loop:				
		move.b	(a4,d4.w),(a5)+
		addq.w	#1,d4
		dbf	d3,.loop
		
		bra.w	SaxDec_Loop


; =============== S U B	R O U T	I N E =======================================

; sub_EC0DE
SaxDec_GetByte:						
		move.b	(a6)+,d0
		subq.w	#1,d7	; Decrement remaining number of bytes
		bne.s	.exit
		addq.w	#4,sp	; Exit the decompressor by meddling with the stack

	.exit:				
		rts	

; ===========================================================================
; --------------------------------------------------------------------------------------
; S2 sound driver (Saxman compression)
; --------------------------------------------------------------------------------------

;SoundDriver:	
;		pushs	; save current section info	

;Z80_Code:	section	org(0),file("sound/Sound Driver.unc"),over(Main)	; new section for the sound driver
;		cpu Z80

;		include "sound/Sound Driver.asm" ; include the actual sound driver code
		
;		cpu 68000
;		pops	; return to main section...
;		pushs	; ...and save section info again	
		
;MergeCode: section org(0), file("sound/MergeData.dat"),over(Main)	; make data file for hypothetical S2 Driver Compress
;		dc.l offset(SoundDriver),Z80_Space,movewZ80CompSize+2 ; start location of compressed sound driver; space reserved for sound driver; location of data to patch in the Saxman decompressor
;		pops	; return to main section for good
;		ds.b Z80_Space	; reserve space for the compressed sound driver
;		even



SoundDriver:	include "sound/Sound Driver Raw.asm" ; precompressed sound driver in dc.b form, copied from Nemesis text disassembly


; ----------------------------------------------------------------------------------
; Filler (free space)
; ----------------------------------------------------------------------------------
		; the DAC data has to line up with the end of the bank.

		; actually it only has to fit within one bank, but we'll line it up to the end anyway
		; because the padding gives the sound driver some room to grow
		dcb.b ((-sizeof_DAC_samples+$8000-offset(*))&($8000-1)),0 ; replaces cnop -$2F00,$8000

; --------------------------------------------------------------------------------------
; DAC samples
; --------------------------------------------------------------------------------------
SndDAC_Start:
SndDAC_Sample1:		incbin	"sound/DAC/Sample 1.bin" ; kick
SndDAC_Sample2:		incbin	"sound/DAC/Sample 2.bin" ; snare
SndDAC_Sample5:		incbin	"sound/DAC/Sample 5.bin" ; timpani
SndDAC_Sample6:		incbin	"sound/DAC/Sample 6.bin" ; tom
SndDAC_Sample3:		incbin	"sound/DAC/Sample 3.bin" ; clap
SndDAC_Sample4:		incbin	"sound/DAC/Sample 4.bin" ; record scratch
SndDAC_Sample7:		incbin	"sound/DAC/Sample 7.bin" ; low clap
SndDAC_End:

;	if (SndDAC_End-SndDAC_Start)>$8000
;		inform 3,"DAC samples must fit within $8000 bytes, but you have $%h bytes of DAC samples.",(SndDAC_End-SndDAC_Start)
;	endc

;	if (SndDAC_End-SndDAC_Start)>Size_of_DAC_samples
;		inform 3,"Size_of_DAC_samples = $%h, but you have $%h bytes of DAC samples.",Size_of_DAC_samples,(SndDAC_End-SndDAC_Start)
;	endc

; ------------------------------------------------------------------------------
; Music	pointers
; ------------------------------------------------------------------------------
MusicPoint1:	dc.w (((Mus_Continue-(MusicPoint1-$8000))<<8)&$FF00)+((Mus_Continue-(MusicPoint1-$8000))>>8)
					
Mus_Continue:		incbin	"sound/music/compressed/Continue.sax"

		align $20
; --------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; HTZ boss lava ball / Sol fireball
Nem_HTZFireball1:		incbin	"art/nemesis/HTZ Fireball 1.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Waterfall tiles
Nem_Waterfall:		incbin	"art/nemesis/Waterfall.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Another fireball
Nem_HTZFireball2:		incbin	"art/nemesis/HTZ Fireball 2.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Bridge in EHZ
Nem_EHZBridge:		incbin	"art/nemesis//EHZ Bridge.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (48 blocks)
; Diagonally moving lift in HTZ
Nem_HTZZipline:		incbin	"art/nemesis/HTZ Zipline Platform.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; One way barrier from HTZ ;ArtNem_HtzValveBarrier
Nem_HTZOneWayBarrier:		incbin	"art/nemesis/HTZ One-Way Barrier.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; See-saw in HTZ
Nem_HTZSeeSaw:		incbin	"art/nemesis/HTZ See-saw.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; Unused Fireball; Nem_F0B06:	
		incbin	"art/nemesis/Unused Fireball.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Rock from HTZ
Nem_HTZRock:		incbin	"art/nemesis/HTZ Rock.nem"
		even
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Orbit badnik from HTZ		; ArtNem_HtzSol:
Nem_Sol:		incbin	"art/nemesis/Sol.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (120 blocks)
; Large spinning wheel from MTZ
Nem_MTZWheel:		incbin	"art/nemesis/MTZ Large Spinning Wheel.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Indent in large spinning wheel from MTZ
Nem_MTZWheelIndent:		incbin	"art/nemesis/MTZ Large Spinning Wheel Indent.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spike block from MTZ
Nem_MTZSpikeBlock:		incbin	"art/nemesis/MTZ Spike Block.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (15 blocks)
; Steam from MTZ
Nem_MTZSteam:		incbin	"art/nemesis/MTZ Steam.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spike from MTZ
Nem_MTZSpike:		incbin	"art/nemesis/MTZ Spike.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (54 blocks)
; Similarly shaded blocks from MTZ
Nem_MTZAsstBlocks:		incbin	"art/nemesis/MTZ Misc Blocks.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (9 blocks)
; Lava bubble from MTZ
Nem_MTZLavaBubble:		incbin	"art/nemesis/MTZ Lava Bubble.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Lava cup
Nem_MTZLavaCup:		incbin	"art/nemesis/MTZ Lava Cup.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; End of a bolt and rope from MTZ
Nem_MTZBoltEnd_Rope:		incbin	"art/nemesis/MTZ Bolt End & Rope.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (12 blocks)
; Small cog from MTZ
Nem_MTZCog:		incbin	"art/nemesis/MTZ Small Cog.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (4 blocks)
; Flash inside spin tube from MTZ
Nem_MTZSpinTubeFlash:		incbin	"art/nemesis/MTZ Spin Tube Flash.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (32 blocks)
; Large wooden box from MCZ	; ArtNem_F187C:
Nem_MCZCrate:		incbin	"art/nemesis/MCZ Crate.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (26 blocks)
; Collapsing platform from MCZ	; ArtNem_F1ABA:
Nem_MCZCollapsingPlat:		incbin	"art/nemesis/MCZ Collapsing Platform.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (16 blocks)
; Switch that you pull on from MCZ	; ArtNem_F1C64:
Nem_MCZVineSwitch:		incbin	"art/nemesis/MCZ Vine Switch.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (10 blocks)
; Vine that lowers in MCZ	; ArtNem_F1D5C:
Nem_MCZVinePulley:		incbin	"art/nemesis/MCZ Vine Pulley.nem"
; --------------------------------------------------------------------
; Nemesis compressed art (20 blocks)
; Log viewed from the end for folding gates in MCZ 	; ArtNem_MCZDrawbridgeLogs:
	even
Nem_MCZDrawbridgeLogs:		incbin	"art/nemesis/MCZ Drawbridge Logs.nem"
; ----------------------------------------------------------------------------------
; Filler (free space)
; ----------------------------------------------------------------------------------
		dcb.b ((-$6174+$8000-offset(*))&($8000-1)),0
;		cnop -$6174,$8000
; -------------------------------------------------------------------------------
; Sega Intro Sound
;
; 8-bit	unsigned raw audio at 16Khz
; -------------------------------------------------------------------------------
Snd_Sega:		incbin	"sound/PCM/SEGA.pcm"
; ------------------------------------------------------------------------------
; Music	pointers
; ------------------------------------------------------------------------------
		align $8000

						
MusicPoint2:	dc.w ((((Mus_CNZ_2P&$7FFF)+$8000)<<8)&$FF00)+(((Mus_CNZ_2P&$7FFF)+$8000)>>8)
		dc.w ((((Mus_EHZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_EHZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_MTZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_MTZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_CNZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_CNZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_MCZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_MCZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_MCZ_2P&$7FFF)+$8000)<<8)&$FF00)+(((Mus_MCZ_2P&$7FFF)+$8000)>>8)
		dc.w ((((Mus_ARZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_ARZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_DEZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_DEZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_SpecStage&$7FFF)+$8000)<<8)&$FF00)+(((Mus_SpecStage&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Options&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Options&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Ending&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Ending&$7FFF)+$8000)>>8)
		dc.w ((((Mus_EndBoss&$7FFF)+$8000)<<8)&$FF00)+(((Mus_EndBoss&$7FFF)+$8000)>>8)
		dc.w ((((Mus_CPZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_CPZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Boss&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Boss&$7FFF)+$8000)>>8)
		dc.w ((((Mus_SCZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_SCZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_OOZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_OOZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_WFZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_WFZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_EHZ_2P&$7FFF)+$8000)<<8)&$FF00)+(((Mus_EHZ_2P&$7FFF)+$8000)>>8)
		dc.w ((((Mus_2PResult&$7FFF)+$8000)<<8)&$FF00)+(((Mus_2PResult&$7FFF)+$8000)>>8)
		dc.w ((((Mus_SuperSonic&$7FFF)+$8000)<<8)&$FF00)+(((Mus_SuperSonic&$7FFF)+$8000)>>8)
		dc.w ((((Mus_HTZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_HTZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_ExtraLife&$7FFF)+$8000)<<8)&$FF00)+(((Mus_ExtraLife&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Title&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Title&$7FFF)+$8000)>>8)
		dc.w ((((Mus_EndLevel&$7FFF)+$8000)<<8)&$FF00)+(((Mus_EndLevel&$7FFF)+$8000)>>8)
		dc.w ((((Mus_GameOver&$7FFF)+$8000)<<8)&$FF00)+(((Mus_GameOver&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Invincible&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Invincible&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Emerald&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Emerald&$7FFF)+$8000)>>8)
		dc.w ((((Mus_HPZ&$7FFF)+$8000)<<8)&$FF00)+(((Mus_HPZ&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Drowning&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Drowning&$7FFF)+$8000)>>8)
		dc.w ((((Mus_Credits&$7FFF)+$8000)<<8)&$FF00)+(((Mus_Credits&$7FFF)+$8000)>>8)
Mus_HPZ:	incbin	"sound/music/compressed/HPZ.sax"
Mus_Drowning:	incbin	"sound/music/compressed/Drowning.sax"
Mus_Invincible:	incbin	"sound/music/compressed/Invincible.sax"
Mus_CNZ_2P:	incbin	"sound/music/compressed/CNZ2P.sax"
Mus_EHZ:	incbin	"sound/music/compressed/EHZ.sax"
Mus_MTZ:	incbin	"sound/music/compressed/MTZ.sax"
Mus_CNZ:	incbin	"sound/music/compressed/CNZ.sax"
Mus_MCZ:	incbin	"sound/music/compressed/MCZ.sax"
Mus_MCZ_2P:	incbin	"sound/music/compressed/MCZ2P.sax"
Mus_ARZ:	incbin	"sound/music/compressed/ARZ.sax"
Mus_DEZ:	incbin	"sound/music/compressed/DEZ.sax"
Mus_SpecStage:	incbin	"sound/music/compressed/SpecialStage.sax"
Mus_Options:	incbin	"sound/music/compressed/Options.sax"
Mus_Ending:	incbin	"sound/music/compressed/Ending.sax"
Mus_EndBoss:	incbin	"sound/music/compressed/FinalBoss.sax"
Mus_CPZ:	incbin	"sound/music/compressed/CPZ.sax"
Mus_Boss:	incbin	"sound/music/compressed/Boss.sax"
Mus_SCZ:	incbin	"sound/music/compressed/SCZ.sax"
Mus_OOZ:	incbin	"sound/music/compressed/OOZ.sax"
Mus_WFZ:	incbin	"sound/music/compressed/WFZ.sax"
Mus_EHZ_2P:	incbin	"sound/music/compressed/EHZ2P.sax"
Mus_2PResult:	incbin	"sound/music/compressed/TwoPlayerMenu.sax"
Mus_SuperSonic:	incbin	"sound/music/compressed/SuperSonic.sax"
Mus_HTZ:	incbin	"sound/music/compressed/HTZ.sax"
Mus_Title:	incbin	"sound/music/compressed/TitleScreen.sax"
Mus_EndLevel:	incbin	"sound/music/compressed/EndOfAct.sax"

Mus_ExtraLife:		include	"sound/music/ExtraLife.asm"
Mus_GameOver:		include	"sound/music/GameOver.asm"
Mus_Emerald:		include	"sound/music/GotEmerald.asm"
Mus_Credits:		include	"sound/music/Credits.asm"
; ------------------------------------------------------------------------------------------
; Sound	effect pointers
; ------------------------------------------------------------------------------------------
SoundIndex:	dc.w ((((Sound20&$7FFF)+$8000)<<8)&$FF00)+(((Sound20&$7FFF)+$8000)>>8)
		dc.w ((((Sound21&$7FFF)+$8000)<<8)&$FF00)+(((Sound21&$7FFF)+$8000)>>8)
		dc.w ((((Sound22&$7FFF)+$8000)<<8)&$FF00)+(((Sound22&$7FFF)+$8000)>>8)
		dc.w ((((Sound23&$7FFF)+$8000)<<8)&$FF00)+(((Sound23&$7FFF)+$8000)>>8)
		dc.w ((((Sound24&$7FFF)+$8000)<<8)&$FF00)+(((Sound24&$7FFF)+$8000)>>8)
		dc.w ((((Sound25&$7FFF)+$8000)<<8)&$FF00)+(((Sound25&$7FFF)+$8000)>>8)
		dc.w ((((Sound26&$7FFF)+$8000)<<8)&$FF00)+(((Sound26&$7FFF)+$8000)>>8)
		dc.w ((((Sound27&$7FFF)+$8000)<<8)&$FF00)+(((Sound27&$7FFF)+$8000)>>8)
		dc.w ((((Sound28&$7FFF)+$8000)<<8)&$FF00)+(((Sound28&$7FFF)+$8000)>>8)
		dc.w ((((Sound29&$7FFF)+$8000)<<8)&$FF00)+(((Sound29&$7FFF)+$8000)>>8)
		dc.w ((((Sound2A&$7FFF)+$8000)<<8)&$FF00)+(((Sound2A&$7FFF)+$8000)>>8)
		dc.w ((((Sound2B&$7FFF)+$8000)<<8)&$FF00)+(((Sound2B&$7FFF)+$8000)>>8)
		dc.w ((((Sound2C&$7FFF)+$8000)<<8)&$FF00)+(((Sound2C&$7FFF)+$8000)>>8)
		dc.w ((((Sound2D&$7FFF)+$8000)<<8)&$FF00)+(((Sound2D&$7FFF)+$8000)>>8)
		dc.w ((((Sound2E&$7FFF)+$8000)<<8)&$FF00)+(((Sound2E&$7FFF)+$8000)>>8)
		dc.w ((((Sound2F&$7FFF)+$8000)<<8)&$FF00)+(((Sound2F&$7FFF)+$8000)>>8)
		dc.w ((((Sound30&$7FFF)+$8000)<<8)&$FF00)+(((Sound30&$7FFF)+$8000)>>8)
		dc.w ((((Sound31&$7FFF)+$8000)<<8)&$FF00)+(((Sound31&$7FFF)+$8000)>>8)
		dc.w ((((Sound32&$7FFF)+$8000)<<8)&$FF00)+(((Sound32&$7FFF)+$8000)>>8)
		dc.w ((((Sound33&$7FFF)+$8000)<<8)&$FF00)+(((Sound33&$7FFF)+$8000)>>8)
		dc.w ((((Sound34&$7FFF)+$8000)<<8)&$FF00)+(((Sound34&$7FFF)+$8000)>>8)
		dc.w ((((Sound35&$7FFF)+$8000)<<8)&$FF00)+(((Sound35&$7FFF)+$8000)>>8)
		dc.w ((((Sound36&$7FFF)+$8000)<<8)&$FF00)+(((Sound36&$7FFF)+$8000)>>8)
		dc.w ((((Sound37&$7FFF)+$8000)<<8)&$FF00)+(((Sound37&$7FFF)+$8000)>>8)
		dc.w ((((Sound38&$7FFF)+$8000)<<8)&$FF00)+(((Sound38&$7FFF)+$8000)>>8)
		dc.w ((((Sound39&$7FFF)+$8000)<<8)&$FF00)+(((Sound39&$7FFF)+$8000)>>8)
		dc.w ((((Sound3A&$7FFF)+$8000)<<8)&$FF00)+(((Sound3A&$7FFF)+$8000)>>8)
		dc.w ((((Sound3B&$7FFF)+$8000)<<8)&$FF00)+(((Sound3B&$7FFF)+$8000)>>8)
		dc.w ((((Sound3C&$7FFF)+$8000)<<8)&$FF00)+(((Sound3C&$7FFF)+$8000)>>8)
		dc.w ((((Sound3D&$7FFF)+$8000)<<8)&$FF00)+(((Sound3D&$7FFF)+$8000)>>8)
		dc.w ((((Sound3E&$7FFF)+$8000)<<8)&$FF00)+(((Sound3E&$7FFF)+$8000)>>8)
		dc.w ((((Sound3F&$7FFF)+$8000)<<8)&$FF00)+(((Sound3F&$7FFF)+$8000)>>8)
		dc.w ((((Sound40&$7FFF)+$8000)<<8)&$FF00)+(((Sound40&$7FFF)+$8000)>>8)
		dc.w ((((Sound41&$7FFF)+$8000)<<8)&$FF00)+(((Sound41&$7FFF)+$8000)>>8)
		dc.w ((((Sound42&$7FFF)+$8000)<<8)&$FF00)+(((Sound42&$7FFF)+$8000)>>8)
		dc.w ((((Sound43&$7FFF)+$8000)<<8)&$FF00)+(((Sound43&$7FFF)+$8000)>>8)
		dc.w ((((Sound44&$7FFF)+$8000)<<8)&$FF00)+(((Sound44&$7FFF)+$8000)>>8)
		dc.w ((((Sound45&$7FFF)+$8000)<<8)&$FF00)+(((Sound45&$7FFF)+$8000)>>8)
		dc.w ((((Sound46&$7FFF)+$8000)<<8)&$FF00)+(((Sound46&$7FFF)+$8000)>>8)
		dc.w ((((Sound47&$7FFF)+$8000)<<8)&$FF00)+(((Sound47&$7FFF)+$8000)>>8)
		dc.w ((((Sound48&$7FFF)+$8000)<<8)&$FF00)+(((Sound48&$7FFF)+$8000)>>8)
		dc.w ((((Sound49&$7FFF)+$8000)<<8)&$FF00)+(((Sound49&$7FFF)+$8000)>>8)
		dc.w ((((Sound4A&$7FFF)+$8000)<<8)&$FF00)+(((Sound4A&$7FFF)+$8000)>>8)
		dc.w ((((Sound4B&$7FFF)+$8000)<<8)&$FF00)+(((Sound4B&$7FFF)+$8000)>>8)
		dc.w ((((Sound4C&$7FFF)+$8000)<<8)&$FF00)+(((Sound4C&$7FFF)+$8000)>>8)
		dc.w ((((Sound4D&$7FFF)+$8000)<<8)&$FF00)+(((Sound4D&$7FFF)+$8000)>>8)
		dc.w ((((Sound4E&$7FFF)+$8000)<<8)&$FF00)+(((Sound4E&$7FFF)+$8000)>>8)
		dc.w ((((Sound4F&$7FFF)+$8000)<<8)&$FF00)+(((Sound4F&$7FFF)+$8000)>>8)
		dc.w ((((Sound50&$7FFF)+$8000)<<8)&$FF00)+(((Sound50&$7FFF)+$8000)>>8)
		dc.w ((((Sound51&$7FFF)+$8000)<<8)&$FF00)+(((Sound51&$7FFF)+$8000)>>8)
		dc.w ((((Sound52&$7FFF)+$8000)<<8)&$FF00)+(((Sound52&$7FFF)+$8000)>>8)
		dc.w ((((Sound53&$7FFF)+$8000)<<8)&$FF00)+(((Sound53&$7FFF)+$8000)>>8)
		dc.w ((((Sound54&$7FFF)+$8000)<<8)&$FF00)+(((Sound54&$7FFF)+$8000)>>8)
		dc.w ((((Sound55&$7FFF)+$8000)<<8)&$FF00)+(((Sound55&$7FFF)+$8000)>>8)
		dc.w ((((Sound56&$7FFF)+$8000)<<8)&$FF00)+(((Sound56&$7FFF)+$8000)>>8)
		dc.w ((((Sound57&$7FFF)+$8000)<<8)&$FF00)+(((Sound57&$7FFF)+$8000)>>8)
		dc.w ((((Sound58&$7FFF)+$8000)<<8)&$FF00)+(((Sound58&$7FFF)+$8000)>>8)
		dc.w ((((Sound59&$7FFF)+$8000)<<8)&$FF00)+(((Sound59&$7FFF)+$8000)>>8)
		dc.w ((((Sound5A&$7FFF)+$8000)<<8)&$FF00)+(((Sound5A&$7FFF)+$8000)>>8)
		dc.w ((((Sound5B&$7FFF)+$8000)<<8)&$FF00)+(((Sound5B&$7FFF)+$8000)>>8)
		dc.w ((((Sound5C&$7FFF)+$8000)<<8)&$FF00)+(((Sound5C&$7FFF)+$8000)>>8)
		dc.w ((((Sound5D&$7FFF)+$8000)<<8)&$FF00)+(((Sound5D&$7FFF)+$8000)>>8)
		dc.w ((((Sound5E&$7FFF)+$8000)<<8)&$FF00)+(((Sound5E&$7FFF)+$8000)>>8)
		dc.w ((((Sound5F&$7FFF)+$8000)<<8)&$FF00)+(((Sound5F&$7FFF)+$8000)>>8)
		dc.w ((((Sound60&$7FFF)+$8000)<<8)&$FF00)+(((Sound60&$7FFF)+$8000)>>8)
		dc.w ((((Sound61&$7FFF)+$8000)<<8)&$FF00)+(((Sound61&$7FFF)+$8000)>>8)
		dc.w ((((Sound62&$7FFF)+$8000)<<8)&$FF00)+(((Sound62&$7FFF)+$8000)>>8)
		dc.w ((((Sound63&$7FFF)+$8000)<<8)&$FF00)+(((Sound63&$7FFF)+$8000)>>8)
		dc.w ((((Sound64&$7FFF)+$8000)<<8)&$FF00)+(((Sound64&$7FFF)+$8000)>>8)
		dc.w ((((Sound65&$7FFF)+$8000)<<8)&$FF00)+(((Sound65&$7FFF)+$8000)>>8)
		dc.w ((((Sound66&$7FFF)+$8000)<<8)&$FF00)+(((Sound66&$7FFF)+$8000)>>8)
		dc.w ((((Sound67&$7FFF)+$8000)<<8)&$FF00)+(((Sound67&$7FFF)+$8000)>>8)
		dc.w ((((Sound68&$7FFF)+$8000)<<8)&$FF00)+(((Sound68&$7FFF)+$8000)>>8)
		dc.w ((((Sound69&$7FFF)+$8000)<<8)&$FF00)+(((Sound69&$7FFF)+$8000)>>8)
		dc.w ((((Sound6A&$7FFF)+$8000)<<8)&$FF00)+(((Sound6A&$7FFF)+$8000)>>8)
		dc.w ((((Sound6B&$7FFF)+$8000)<<8)&$FF00)+(((Sound6B&$7FFF)+$8000)>>8)
		dc.w ((((Sound6C&$7FFF)+$8000)<<8)&$FF00)+(((Sound6C&$7FFF)+$8000)>>8)
		dc.w ((((Sound6D&$7FFF)+$8000)<<8)&$FF00)+(((Sound6D&$7FFF)+$8000)>>8)
		dc.w ((((Sound6E&$7FFF)+$8000)<<8)&$FF00)+(((Sound6E&$7FFF)+$8000)>>8)
		dc.w ((((Sound6F&$7FFF)+$8000)<<8)&$FF00)+(((Sound6F&$7FFF)+$8000)>>8)
		dc.w ((((Sound70&$7FFF)+$8000)<<8)&$FF00)+(((Sound70&$7FFF)+$8000)>>8)
Sound20:	include "sound/sfx/A0 - Jump.asm"
Sound21:	include "sound/sfx/A1 - Checkpoint.asm"
Sound22:	include "sound/sfx/A2 - Spike Switch.asm"
Sound23:	include "sound/sfx/A3 - Hurt.asm"
Sound24:	include "sound/sfx/A4 - Skidding.asm"
Sound25:	include "sound/sfx/A5 - Block Push.asm"
Sound26:	include "sound/sfx/A6 - Hurt by Spikes.asm"
Sound27:	include "sound/sfx/A7 - Sparkle.asm"
Sound28:	include "sound/sfx/A8 - Beep.asm"
Sound29:	include "sound/sfx/A9 - Special Stage Item (Unused).asm" ; Sonic 1 leftover, 
Sound2A:	include "sound/sfx/AA - Splash.asm"
Sound2B:	include "sound/sfx/AB - Swish.asm"
Sound2C:	include "sound/sfx/AC - Boss Hit.asm"
Sound2D:	include "sound/sfx/AD - Inhaling Bubble.asm"
Sound2E:	include "sound/sfx/AE - Lava Ball.asm"
Sound2F:	include "sound/sfx/AF - Shield.asm"
Sound30:	include "sound/sfx/B0 - Laser Beam.asm"
Sound31:	include "sound/sfx/B1 - Electricity (Unused).asm" ; Sonic 1 leftover
Sound32:	include "sound/sfx/B2 - Drown.asm"
Sound33:	include "sound/sfx/B3 - Fire Burn.asm"
Sound34:	include "sound/sfx/B4 - Bumper.asm"
Sound35:	include "sound/sfx/B5 - Ring.asm"
Sound36:	include "sound/sfx/B6 - Spikes Move.asm"
Sound37:	include "sound/sfx/B7 - Rumbling.asm"
Sound38:	include "sound/sfx/B8 - Unknown (Unused).asm"
Sound39:	include "sound/sfx/B9 - Smash.asm"
Sound3A:	include "sound/sfx/BA - Special Stage Glass (Unused).asm" ; Sonic 1 leftover
Sound3B:	include "sound/sfx/BB - Door Slam.asm"
Sound3C:	include "sound/sfx/BC - Spin Dash Release.asm"
Sound3D:	include "sound/sfx/BD - Hammer.asm"
Sound3E:	include "sound/sfx/BE - Roll.asm"
Sound3F:	include "sound/sfx/BF - Continue Jingle.asm"
Sound40:	include "sound/sfx/C0 - Casino Bonus.asm"
Sound41:	include "sound/sfx/C1 - Explosion.asm"
Sound42:	include "sound/sfx/C2 - Water Warning.asm"
Sound43:	include "sound/sfx/C3 - Enter Giant Ring (Unused).asm" ; Sonic 1 leftover
Sound44:	include "sound/sfx/C4 - Boss Explosion.asm"
Sound45:	include "sound/sfx/C5 - Tally End.asm"
Sound46:	include "sound/sfx/C6 - Ring Spill.asm"
Sound47:	include "sound/sfx/C7 - Chain Rise (Unused).asm" ; Sonic 1 leftover
Sound48:	include "sound/sfx/C8 - Flamethrower.asm"
Sound49:	include "sound/sfx/C9 - Hidden Bonus (Unused).asm" ; Sonic 1 leftover
Sound4A:	include "sound/sfx/CA - Special Stage Entry.asm"
Sound4B:	include "sound/sfx/CB - Slow Smash.asm"
Sound4C:	include "sound/sfx/CC - Spring.asm"
Sound4D:	include "sound/sfx/CD - Switch.asm"
Sound4E:	include "sound/sfx/CE - Ring Left Speaker.asm"
Sound4F:	include "sound/sfx/CF - Signpost.asm"
Sound50:	include "sound/sfx/D0 - CNZ Boss Zap.asm"
Sound51:	include "sound/sfx/D1 - Unknown (Unused).asm"
Sound52:	include "sound/sfx/D2 - Unknown (Unused).asm"
Sound53:	include "sound/sfx/D3 - Signpost 2P.asm"
Sound54:	include "sound/sfx/D4 - OOZ Lid Pop.asm"
Sound55:	include "sound/sfx/D5 - Sliding Spike.asm"
Sound56:	include "sound/sfx/D6 - CNZ Elevator.asm"
Sound57:	include "sound/sfx/D7 - Platform Knock.asm"
Sound58:	include "sound/sfx/D8 - Bonus Bumper.asm"
Sound59:	include "sound/sfx/D9 - Large Bumper.asm"
Sound5A:	include "sound/sfx/DA - Gloop.asm"
Sound5B:	include "sound/sfx/DB - Pre-Arrow Firing.asm"
Sound5C:	include "sound/sfx/DC - Fire.asm"
Sound5D:	include "sound/sfx/DD - Arrow Stick.asm"
Sound5E:	include "sound/sfx/DE - Helicopter.asm"
Sound5F:	include "sound/sfx/DF - Super Transform.asm"
Sound60:	include "sound/sfx/E0 - Spin Dash Rev.asm"
Sound61:	include "sound/sfx/E1 - Rumbling 2.asm"
Sound62:	include "sound/sfx/E2 - CNZ Launch.asm"
Sound63:	include "sound/sfx/E3 - Flipper.asm"
Sound64:	include "sound/sfx/E4 - HTZ Lift Click.asm"
Sound65:	include "sound/sfx/E5 - Leaves.asm"
Sound66:	include "sound/sfx/E6 - Mega Mack Drop.asm"
Sound67:	include "sound/sfx/E7 - Drawbridge Move.asm"
Sound68:	include "sound/sfx/E8 - Quick Door Slam.asm"
Sound69:	include "sound/sfx/E9 - Drawbridge Down.asm"
Sound6A:	include "sound/sfx/EA - Laser Burst.asm"
Sound6B:	include "sound/sfx/EB - Scatter.asm"
Sound6C:	include "sound/sfx/EC - Teleport.asm"
Sound6D:	include "sound/sfx/ED - Error.asm"
Sound6E:	include "sound/sfx/EE - Mecha Sonic Buzz.asm"
Sound6F:	include "sound/sfx/EF - Large Laser.asm"
Sound70:	include "sound/sfx/F0 - Oil Slide.asm"

;		dc.w $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
		align $FFFFF
ROM_End:

		end
