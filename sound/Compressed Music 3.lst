00000000                            		include "sound/Compressed Music Header.asm"
00000000                            		opt	l.					; . is the local label symbol
00000000                            		opt	ae-					; automatic evens disabled by default
00000000                            		opt an+					; allow -h suffix for hexadecimal (used in the Z80 code)		
00000000                            		opt	ws+					; allow statements to contain white-spaces
00000000                            		opt	w+					; print warnings
00000000                            ;		opt	m+					; do not expand macros - if enabled, this can break assembling
00000000                            
00000000                            Header: group word,org($1380)
00000000                            		section _Header,Header
00000000                            
00000000                            ifarg:		macros
00000000                            		if strlen("\1")>0
00000000                            		
00000000                            z80_ptr: macros	; make a z80 pointer for use with compressed music (that is, NOT relative to $8000, the starting address of a ROM bank)
00000000                            		dc.w ((\1&$7FFF)<<8)&$FF00+(\1&$7FFF)>>8		
00000000                            
00000000                            		include "sound/SMPS2ASM.asm"
00000000                            ; ===========================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; Ported to ASM68K by Brainulator with additional modifications by OrionNavattan
00000000                            ; ===========================================================================
00000000                            ; Permission to use, copy, modify, and/or distribute this software for any
00000000                            ; purpose with or without fee is hereby granted.
00000000                            ;
00000000                            ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
00000000                            ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
00000000                            ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
00000000                            ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
00000000                            ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
00000000                            ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
00000000                            ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
00000000                            ; ===========================================================================
00000000                            
00000000 =00000002                  SonicDriverVer			= 2
00000000 =00000001                  SMPS2ASMVer			= 1
00000000                            ; Set the following to non-zero to use all S2 DAC samples, or to zero otherwise.
00000000                            ; The S1 samples are a subset of this.
00000000 =00000001                  use_s2_samples			= 1
00000000                            ; Set the following to non-zero to use all S3D DAC samples, or to zero
00000000                            ; otherwise. Most of the S3D samples are also present in S3/S&K, but
00000000                            ; there are two samples specific to S3D.
00000000 =00000001                  use_s3d_samples			= 1
00000000                            ; Set the following to non-zero to use all S3 DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_s3_samples			= 1
00000000                            ; Set the following to non-zero to use all S&K DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_sk_samples			= 1
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000                            		rsset	$88
00000000 =00000088                  smpsPitch10lo		rs.b	$C
00000000 =00000094                  smpsPitch09lo		rs.b	$C
00000000 =000000A0                  smpsPitch08lo		rs.b	$C
00000000 =000000AC                  smpsPitch07lo		rs.b	$C
00000000 =000000B8                  smpsPitch06lo		rs.b	$C
00000000 =000000C4                  smpsPitch05lo		rs.b	$C
00000000 =000000D0                  smpsPitch04lo		rs.b	$C
00000000 =000000DC                  smpsPitch03lo		rs.b	$C
00000000 =000000E8                  smpsPitch02lo		rs.b	$C
00000000 =000000F4                  smpsPitch01lo		rs.b	$C
00000000                            	rsreset
00000000 =00000000                  smpsPitch00		rs.b	$C
00000000 =0000000C                  smpsPitch01hi		rs.b	$C
00000000 =00000018                  smpsPitch02hi		rs.b	$C
00000000 =00000024                  smpsPitch03hi		rs.b	$C
00000000 =00000030                  smpsPitch04hi		rs.b	$C
00000000 =0000003C                  smpsPitch05hi		rs.b	$C
00000000 =00000048                  smpsPitch06hi		rs.b	$C
00000000 =00000054                  smpsPitch07hi		rs.b	$C
00000000 =00000060                  smpsPitch08hi		rs.b	$C
00000000 =0000006C                  smpsPitch09hi		rs.b	$C
00000000 =00000078                  smpsPitch10hi		rs.b	$C
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Note Equates
00000000                            		rsset	$80
00000000 =00000080                  nRst		rs.b	1
00000000 =00000081                  nC0		rs.b	1
00000000 =00000082                  nCs0		rs.b	1
00000000 =00000083                  nD0		rs.b	1
00000000 =00000084                  nEb0		rs.b	1
00000000 =00000085                  nE0		rs.b	1
00000000 =00000086                  nF0		rs.b	1
00000000 =00000087                  nFs0		rs.b	1
00000000 =00000088                  nG0		rs.b	1
00000000 =00000089                  nAb0		rs.b	1
00000000 =0000008A                  nA0		rs.b	1
00000000 =0000008B                  nBb0		rs.b	1
00000000 =0000008C                  nB0		rs.b	1
00000000 =0000008D                  nC1		rs.b	1
00000000 =0000008E                  nCs1		rs.b	1
00000000 =0000008F                  nD1		rs.b	1
00000000 =00000090                  nEb1		rs.b	1
00000000 =00000091                  nE1		rs.b	1
00000000 =00000092                  nF1		rs.b	1
00000000 =00000093                  nFs1		rs.b	1
00000000 =00000094                  nG1		rs.b	1
00000000 =00000095                  nAb1		rs.b	1
00000000 =00000096                  nA1		rs.b	1
00000000 =00000097                  nBb1		rs.b	1
00000000 =00000098                  nB1		rs.b	1
00000000 =00000099                  nC2		rs.b	1
00000000 =0000009A                  nCs2		rs.b	1
00000000 =0000009B                  nD2		rs.b	1
00000000 =0000009C                  nEb2		rs.b	1
00000000 =0000009D                  nE2		rs.b	1
00000000 =0000009E                  nF2		rs.b	1
00000000 =0000009F                  nFs2		rs.b	1
00000000 =000000A0                  nG2		rs.b	1
00000000 =000000A1                  nAb2		rs.b	1
00000000 =000000A2                  nA2		rs.b	1
00000000 =000000A3                  nBb2		rs.b	1
00000000 =000000A4                  nB2		rs.b	1
00000000 =000000A5                  nC3		rs.b	1
00000000 =000000A6                  nCs3		rs.b	1
00000000 =000000A7                  nD3		rs.b	1
00000000 =000000A8                  nEb3		rs.b	1
00000000 =000000A9                  nE3		rs.b	1
00000000 =000000AA                  nF3		rs.b	1
00000000 =000000AB                  nFs3		rs.b	1
00000000 =000000AC                  nG3		rs.b	1
00000000 =000000AD                  nAb3		rs.b	1
00000000 =000000AE                  nA3		rs.b	1
00000000 =000000AF                  nBb3		rs.b	1
00000000 =000000B0                  nB3		rs.b	1
00000000 =000000B1                  nC4		rs.b	1
00000000 =000000B2                  nCs4		rs.b	1
00000000 =000000B3                  nD4		rs.b	1
00000000 =000000B4                  nEb4		rs.b	1
00000000 =000000B5                  nE4		rs.b	1
00000000 =000000B6                  nF4		rs.b	1
00000000 =000000B7                  nFs4		rs.b	1
00000000 =000000B8                  nG4		rs.b	1
00000000 =000000B9                  nAb4		rs.b	1
00000000 =000000BA                  nA4		rs.b	1
00000000 =000000BB                  nBb4		rs.b	1
00000000 =000000BC                  nB4		rs.b	1
00000000 =000000BD                  nC5		rs.b	1
00000000 =000000BE                  nCs5		rs.b	1
00000000 =000000BF                  nD5		rs.b	1
00000000 =000000C0                  nEb5		rs.b	1
00000000 =000000C1                  nE5		rs.b	1
00000000 =000000C2                  nF5		rs.b	1
00000000 =000000C3                  nFs5		rs.b	1
00000000 =000000C4                  nG5		rs.b	1
00000000 =000000C5                  nAb5		rs.b	1
00000000 =000000C6                  nA5		rs.b	1
00000000 =000000C7                  nBb5		rs.b	1
00000000 =000000C8                  nB5		rs.b	1
00000000 =000000C9                  nC6		rs.b	1
00000000 =000000CA                  nCs6		rs.b	1
00000000 =000000CB                  nD6		rs.b	1
00000000 =000000CC                  nEb6		rs.b	1
00000000 =000000CD                  nE6		rs.b	1
00000000 =000000CE                  nF6		rs.b	1
00000000 =000000CF                  nFs6		rs.b	1
00000000 =000000D0                  nG6		rs.b	1
00000000 =000000D1                  nAb6		rs.b	1
00000000 =000000D2                  nA6		rs.b	1
00000000 =000000D3                  nBb6		rs.b	1
00000000 =000000D4                  nB6		rs.b	1
00000000 =000000D5                  nC7		rs.b	1
00000000 =000000D6                  nCs7		rs.b	1
00000000 =000000D7                  nD7		rs.b	1
00000000 =000000D8                  nEb7		rs.b	1
00000000 =000000D9                  nE7		rs.b	1
00000000 =000000DA                  nF7		rs.b	1
00000000 =000000DB                  nFs7		rs.b	1
00000000 =000000DC                  nG7		rs.b	1
00000000 =000000DD                  nAb7		rs.b	1
00000000 =000000DE                  nA7		rs.b	1
00000000 =000000DF                  nBb7		rs.b	1
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; PSG volume envelope equates
00000000                            		rsset	1
00000000 =00000001                  fTone_01	rs.b	1
00000000 =00000002                  fTone_02	rs.b	1
00000000 =00000003                  fTone_03	rs.b	1
00000000 =00000004                  fTone_04	rs.b	1
00000000 =00000005                  fTone_05	rs.b	1
00000000 =00000006                  fTone_06	rs.b	1
00000000 =00000007                  fTone_07	rs.b	1
00000000 =00000008                  fTone_08	rs.b	1
00000000 =00000009                  fTone_09	rs.b	1
00000000 =0000000A                  fTone_0A	rs.b	1
00000000 =0000000B                  fTone_0B	rs.b	1
00000000 =0000000C                  fTone_0C	rs.b	1
00000000 =0000000D                  fTone_0D	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000                            		rsset	$81
00000000 =00000081                  dKick		rs.b	1
00000000 =00000082                  dSnare		rs.b	1
00000000 =00000083                  dClap		rs.b	1
00000000 =00000084                  dScratch	rs.b	1
00000000 =00000085                  dTimpani	rs.b	1
00000000 =00000086                  dHiTom		rs.b	1
00000000 =00000087                  dVLowClap	rs.b	1
00000000 =00000088                  dHiTimpani	rs.b	1
00000000 =00000089                  dMidTimpani	rs.b	1
00000000 =0000008A                  dLowTimpani	rs.b	1
00000000 =0000008B                  dVLowTimpani	rs.b	1
00000000 =0000008C                  dMidTom		rs.b	1
00000000 =0000008D                  dLowTom		rs.b	1
00000000 =0000008E                  dFloorTom	rs.b	1
00000000 =0000008F                  dHiClap		rs.b	1
00000000 =00000090                  dMidClap	rs.b	1
00000000 =00000091                  dLowClap	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            little_endian macros
00000000                            		dc.w	((\1<<8)&$FF00)|((\1>>8)&$FF)
00000000                            
00000000                            ;	if ~def(z80_ptr)
00000000                            ;z80_ptr macros
00000000                            ;		dc.w	((\1<<8)&$FF00)|((\1>>8)&$7F)|$80
00000000                            ;	endc
00000000                            
00000000                            ;conv0To256  function n,((n==0)<<8)|n
00000000                            ;s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
00000000                            ;s2TempotoS3 function n,($100-((n==0)|n))&$FF
00000000                            ;s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
00000000                            ;s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
00000000                            ;s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
00000000                            ;s3TempotoS2 function n,s2TempotoS3(n)
00000000                            
00000000                            s2TempotoS1 macro n
00000000                            	s21convval:	= (((768-n)>>1)/(256-n))&$FF
00000000                            	endm
00000000                            
00000000                            s2TempotoS3 macro n
00000000                            	s23convval:	= ($100-((n=0)|n))&$FF
00000000                            	s32convval:	= s23convval
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro n
00000000                            	if n=0
00000000                            		s12convval:	= ((((256-1)<<8)+(256>>1))/256)&$FF
00000000                            	else
00000000                            		s12convval:	= ((((n-1)<<8)+(n>>1))/n)&$FF
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            s1TempotoS3 macro n
00000000                            	s1TempotoS2	n
00000000                            	s2TempotoS3	s12convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS1 macro n
00000000                            	s2TempotoS3	n
00000000                            	s2TempotoS1	s23convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS2 macros
00000000                            	s2TempotoS3	\_
00000000                            
00000000                            convertMainTempoMod macro val
00000000                            	if ((SourceDriver>=3)&(SonicDriverVer>=3))|(SonicDriverVer=SourceDriver)
00000000                            		dc.b \val
00000000                            	elseif SourceDriver=1
00000000                            		if \val\=1
00000000                            			inform 3,"Invalid main tempo of 1 in song from Sonic 1"
00000000                            		endc
00000000                            		if SonicDriverVer=2
00000000                            			s1TempotoS2	\val
00000000                            			dc.b s12convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s1TempotoS3	\val
00000000                            			dc.b s13convval
00000000                            		endc
00000000                            	elseif SourceDriver=2
00000000                            		if \val\=0
00000000                            			inform 3,"Invalid main tempo of 0 in song from Sonic 2"
00000000                            		endc
00000000                            		if SonicDriverVer=1
00000000                            			s2TempotoS1	\val
00000000                            			dc.b s21convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s2TempotoS3	\val
00000000                            			dc.b s23convval
00000000                            		endc
00000000                            	else;if SourceDriver>=3
00000000                            		if \val\=0
00000000                            			inform 2,"Performing approximate conversion of Sonic 3 main tempo modifier of 0"
00000000                            		endc
00000000                            		if SonicDriverVer=1
00000000                            			s3TempotoS1	\val
00000000                            			dc.b s31convval
00000000                            		else;if SonicDriverVer=2
00000000                            			s3TempotoS2	\val
00000000                          M 	s2tempotos3	\val
00000000                            			dc.b s32convval
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            PSGPitchConvert macro val
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b (\val\+psgdelta)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b (\val\-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b \val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            CheckedChannelPointer macro location
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                          M 	dc.w	((\location\&$7fff)<<8)&$ff00+(\location\&$7fff)>>8
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Tracks for Sonic 1 songs must come after the start of the song"
00000000                            		else
00000000                            			dc.w \location\-songStart
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver,sourcesmps2asmver
00000000                            SourceDriver = ver
00000000                            	if (narg=2)
00000000                            SourceSMPS2ASM = sourcesmps2asmver
00000000                            	else
00000000                            SourceSMPS2ASM = 0
00000000                            	endc
00000000                            songStart = offset(*)
00000000                            	if SMPS2ASMVer<SourceSMPS2ASM
00000000                            		inform 1,"Song at 0x%h was made for a newer version of SMPS2ASM (this is version %d, but song wants at least version %d).",songStart,SMPS2ASMVer,SourceSMPS2ASM
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            		dc.w $0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro location
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                          M 	dc.w	((\location\&$7fff)<<8)&$ff00+(\location\&$7fff)>>8
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Voice banks for Sonic 1 songs must come after the song"
00000000                            		else
00000000                            			dc.w \location\-songStart
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            	if SonicDriverVer>=5
00000000                            		z80_ptr	z80_UniVoiceBank
00000000                          M 	dc.w	((z80_univoicebank&$7fff)<<8)&$ff00+(z80_univoicebank&$7fff)>>8
00000000                            	elseif SonicDriverVer>=3
00000000                            		little_endian	z80_UniVoiceBank
00000000                          M 	dc.w	((z80_univoicebank<<8)&$ff00)|((z80_univoicebank>>8)&$ff)
00000000                            	else
00000000                            		inform 3,"Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b \fm,\psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            	convertMainTempoMod \mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	if strlen("\pitch")>0
00000000                            		dc.b	pitch
00000000                            		if strlen("\vol")>0
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	dc.b \pitch,\vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro location,pitch,vol,mod,voice
00000000                            	CheckedChannelPointer \location
00000000                            	PSGPitchConvert \pitch
00000000                            	dc.b \vol
00000000                            	; Frequency envelope
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
00000000                            		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
00000000                            		; other drivers may try to process as valid data, so manually force it to 0 here.
00000000                            		dc.b	0
00000000                            	else
00000000                            		if (SonicDriverVer<3)&(SourceDriver>=3)&(\mod<>0)
00000000                            			inform 1,"This track header specifies a frequency envelope, but this driver does not support them."
00000000                            		endc
00000000                            		dc.b \mod
00000000                            	endc
00000000                            	; Volume envelope
00000000                            	dc.b \voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b \div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b \chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,location,pitch,vol
00000000                            	if (SonicDriverVer>=3)&(chanid=cNoise)
00000000                            		inform 3,"Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	elseif (SonicDriverVer<3)&(chanid=cFM6)
00000000                            		inform 3,"Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	CheckedChannelPointer \location\
00000000                            	if (chanid&$80)<>0
00000000                            		PSGPitchConvert \pitch
00000000                            	else
00000000                            		dc.b \pitch
00000000                            	endc
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000 =00000000                  panNone equ $00
00000000 =00000040                  panRight equ $40
00000000 =00000080                  panLeft equ $80
00000000 =000000C0                  panCentre equ $C0 ; silly Brits :U
00000000 =000000C0                  panCenter equ $C0
00000000                            
00000000                            ; E1xx - Set channel detune to val
00000000                            smpsDetune macro val
00000000                            	dc.b $E1,\val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	if SonicDriverVer<3
00000000                            		dc.b $E2,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $F9
00000000                            	else
00000000                            		dc.b $E3
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $E2
00000000                            		ifarg val
00000000                          M 	if	strlen("val")>0
00000000                            			dc.b \val
00000000                            		else
00000000                            			dc.b $FF
00000000                            		endc
00000000                            		if SourceDriver<3
00000000                            			smpsStop
00000000                            		endc
00000000                            	elseif (SourceDriver>=3)&(strlen("\val"))&(strcmp("\val","$FF"))
00000000                            		; This is one of those weird S3+ "fades" that we don't need
00000000                            	else
00000000                            		dc.b $E4
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	if SonicDriverVer>=5
00000000                            		; New flag unique to Flamewing's modified S&K driver
00000000                            		dc.b $FF,$08,\val
00000000                            	elseif SonicDriverVer=3
00000000                            		inform 3,"Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
00000000                            	else
00000000                            		dc.b $E5,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b $E6,\val
00000000                            	endm
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	if (SonicDriverVer>=5)&(SourceDriver<3)
00000000                            		; Unique to Flamewing's modified driver
00000000                            		dc.b $FF,$0A,\val
00000000                            	else
00000000                            		if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            			inform 1,"Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            			inform 1,"Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		endc
00000000                            		dc.b $E8,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsChangeTransposition macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FB,\val
00000000                            	else
00000000                            		dc.b $E9,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FF,$00
00000000                            	else
00000000                            		dc.b $EA
00000000                            	endc
00000000                            	convertMainTempoMod \val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FF,$04,val
00000000                            	else
00000000                            		dc.b $EB,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $E4,\val
00000000                            	else
00000000                            		inform 3,"Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b $EC,\vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b $ED
00000000                            	else
00000000                            		inform 3,"Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b $EE
00000000                            	else
00000000                            		inform 2,"Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
00000000                            		smpsStop
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsFMvoice macro voice,songID
00000000                            	if (SonicDriverVer>=3)&(strlen("\songID")>0)
00000000                            		dc.b $EF,\voice|$80,\songID+$81
00000000                            	else
00000000                            		dc.b $EF,\voice
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b \wait+1,\speed,\change,((\step+1)*\speed)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b wait-1,\speed,\change
00000000                            		conv_step:	= ((step=0)<<8)|step
00000000                            		conv_speed:	= ((speed=0)<<8)|speed
00000000                            		dc.b (\conv_step/\conv_speed)-1
00000000                            	else
00000000                            		dc.b \wait,\speed,\change,\step
00000000                            	endc
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro type
00000000                            	if SonicDriverVer>=3
00000000                            		if strlen("\type")>0
00000000                            			dc.b $F4,\type
00000000                            		else
00000000                            			dc.b $F4,$80
00000000                            		endc
00000000                            	else
00000000                            		dc.b $F1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b $F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b $F3,\form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FA
00000000                            	else
00000000                            		dc.b $F4
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b $F5,\voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b $F6
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if (SonicDriverVer>=3)&(strlen("\val2")>0)
00000000                            		dc.b $E5,\val1,\val2
00000000                            	else
00000000                            		dc.b $E6,\val1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsMaxRelRate macro
00000000                            	if SonicDriverVer>=3
00000000                            		; Emulate it in S3/S&K/S3D driver
00000000                            		smpsFMICommand $88,$0F
00000000                            		smpsFMICommand $8C,$0F
00000000                            	else
00000000                            		dc.b $F9
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Backwards compatibility
00000000                            smpsAlterNote macro
00000000                            	smpsDetune	\_
00000000                            	endm
00000000                            
00000000                            smpsAlterPitch macro
00000000                            	smpsChangeTransposition	\_
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro
00000000                            	smpsFMVolEnv	\_
00000000                            	endm
00000000                            
00000000                            smpsWeirdD1LRR macro
00000000                            	smpsMaxRelRate \_
00000000                            	endm
00000000                            
00000000                            smpsSetvoice macro
00000000                            	smpsFMvoice \_
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback = val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm = val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
00000000                            vcUnusedBits = val
00000000                            	if (strlen("\d1r1")>0)&(strlen("\d1r2")>0)&(strlen("\d1r3")>0)&(strlen("\d1r4")>0)
00000000                            vcD1R1Unk = d1r1<<5
00000000                            vcD1R2Unk = d1r2<<5
00000000                            vcD1R3Unk = d1r3<<5
00000000                            vcD1R4Unk = d1r4<<5
00000000                            	else
00000000                            vcD1R1Unk = 0
00000000                            vcD1R2Unk = 0
00000000                            vcD1R3Unk = 0
00000000                            vcD1R4Unk = 0
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 = op1
00000000                            vcDT2 = op2
00000000                            vcDT3 = op3
00000000                            vcDT4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 = op1
00000000                            vcCF2 = op2
00000000                            vcCF3 = op3
00000000                            vcCF4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 = op1
00000000                            vcRS2 = op2
00000000                            vcRS3 = op3
00000000                            vcRS4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 = op1
00000000                            vcAR2 = op2
00000000                            vcAR3 = op3
00000000                            vcAR4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
00000000                            ; were the Amplitude Modulation.
00000000                            ; According to several docs, however, it's actually the high bit.
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            	if SourceSMPS2ASM=0
00000000                            vcAM1 = op1<<5
00000000                            vcAM2 = op2<<5
00000000                            vcAM3 = op3<<5
00000000                            vcAM4 = op4<<5
00000000                            	else
00000000                            vcAM1 = op1<<7
00000000                            vcAM2 = op2<<7
00000000                            vcAM3 = op3<<7
00000000                            vcAM4 = op4<<7
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 = op1
00000000                            vcD1R2 = op2
00000000                            vcD1R3 = op3
00000000                            vcD1R4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 = op1
00000000                            vcD2R2 = op2
00000000                            vcD2R3 = op3
00000000                            vcD2R4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 = op1
00000000                            vcDL2 = op2
00000000                            vcDL3 = op3
00000000                            vcDL4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 = op1
00000000                            vcRR2 = op2
00000000                            vcRR3 = op3
00000000                            vcRR4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            ; The original SMPS2ASM decides TL high bits automatically,
00000000                            ; but later versions leave it up to the user.
00000000                            ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
00000000                            ; then we *want* the TL bits to match the algorithm, because SMPS 68k
00000000                            ; prefers the algorithm over the TL bits, ignoring the latter, while
00000000                            ; SMPS Z80 does the opposite.
00000000                            ; Unfortunately, there's nothing we can do if we're trying to convert
00000000                            ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
00000000                            ; what we do, so we just print a warning.
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 = op1
00000000                            vcTL2 = op2
00000000                            vcTL3 = op3
00000000                            vcTL4 = op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            	if SourceSMPS2ASM=0
00000000                            vcTLMask4 = ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 = ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 = ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 = $80
00000000                            	else
00000000                            vcTLMask4 = 0
00000000                            vcTLMask3 = 0
00000000                            vcTLMask2 = 0
00000000                            vcTLMask1 = 0
00000000                            	endc
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            vcTLMask4 = ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 = ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 = ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 = $80
00000000                            vcTL1 = vcTL1&$7F
00000000                            vcTL2 = vcTL2&$7F
00000000                            vcTL3 = vcTL3&$7F
00000000                            vcTL4 = vcTL4&$7F
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)&((((vcTL1|vcTLMask1)&$80)<>$80)|(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))|(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))|(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm=7)<<7)))
00000000                            		inform 1,"Voice at 0x%h has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers.",offset(*)
00000000                            	endc
00000000                            	if SonicDriverVer=2
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT2<<4)+vcCF2,       (vcDT3<<4)+vcCF3,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS2<<6)+vcAR2,       (vcRS3<<6)+vcAR3,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R2,                 vcD2R3,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL2<<4)+vcRR2,       (vcDL3<<4)+vcRR3,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL2|vcTLMask2,        vcTL3|vcTLMask3,        vcTL1|vcTLMask1
00000000                            	else
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT3<<4)+vcCF3,       (vcDT2<<4)+vcCF2,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS3<<6)+vcAR3,       (vcRS2<<6)+vcAR2,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R3,                 vcD2R2,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL3<<4)+vcRR3,       (vcDL2<<4)+vcRR2,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL3|vcTLMask3,        vcTL2|vcTLMask2,        vcTL1|vcTLMask1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            		
00000000                            ; Generate an include for a music file and output the assembled bytecode to its own file.		
00000000                            inc_music:	macro songname
00000000                            		pushs
00000000                            Music\@:	section	org($1380),file("sound/music/compressed/\songname\.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/\songname\.asm"	; include the actual music file for assembly
00000000                            		
00000000                            		if offset(*)>7C0h ; size of Z80 decompression buffer
00000000                            			inform 2,"\songname is too large for the Z80 decompression buffer! It should be uncompressed instead."
00000000                            		endc	
00000000                            		pops					
00000000                            		endm
00000000                            		
00000000                            		inc_music	EndOfAct
00000000                          M 	pushs
00000000                          M music_13:	section	org($1380),file("sound/music/compressed/endofact.unc"),over(header)
00000000                          M 	include	"sound/music/endofact.asm"
00000000                            End_of_level_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     End_of_level_Voices
00000000 0000                     M 	dc.w	((end_of_level_voices&$7fff)<<8)&$ff00+(end_of_level_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $02, $AA
00000004 02                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$aa
00000005 AA                       M 	dc.b	$aa
00000006                            
00000006                            	smpsHeaderDAC       End_of_level_DAC
00000006                          M 	checkedchannelpointer	end_of_level_dac
00000006 0000                     M 	dc.w	((end_of_level_dac&$7fff)<<8)&$ff00+(end_of_level_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        End_of_level_FM1,	$F4, $0A
0000000A                          M 	checkedchannelpointer	end_of_level_fm1
0000000A 0000                     M 	dc.w	((end_of_level_fm1&$7fff)<<8)&$ff00+(end_of_level_fm1&$7fff)>>8
0000000C F40A                     M 	dc.b	$f4,$0a
0000000E                            	smpsHeaderFM        End_of_level_FM2,	$DC, $0A
0000000E                          M 	checkedchannelpointer	end_of_level_fm2
0000000E 0000                     M 	dc.w	((end_of_level_fm2&$7fff)<<8)&$ff00+(end_of_level_fm2&$7fff)>>8
00000010 DC0A                     M 	dc.b	$dc,$0a
00000012                            	smpsHeaderFM        End_of_level_FM3,	$F4, $15
00000012                          M 	checkedchannelpointer	end_of_level_fm3
00000012 0000                     M 	dc.w	((end_of_level_fm3&$7fff)<<8)&$ff00+(end_of_level_fm3&$7fff)>>8
00000014 F415                     M 	dc.b	$f4,$15
00000016                            	smpsHeaderFM        End_of_level_FM4,	$F4, $15
00000016                          M 	checkedchannelpointer	end_of_level_fm4
00000016 0000                     M 	dc.w	((end_of_level_fm4&$7fff)<<8)&$ff00+(end_of_level_fm4&$7fff)>>8
00000018 F415                     M 	dc.b	$f4,$15
0000001A                            	smpsHeaderFM        End_of_level_FM5,	$F4, $14
0000001A                          M 	checkedchannelpointer	end_of_level_fm5
0000001A 0000                     M 	dc.w	((end_of_level_fm5&$7fff)<<8)&$ff00+(end_of_level_fm5&$7fff)>>8
0000001C F414                     M 	dc.b	$f4,$14
0000001E                            	smpsHeaderPSG       End_of_level_PSG1,	$D0, $05, $00, fTone_05
0000001E                          M 	checkedchannelpointer	end_of_level_psg1
0000001E 0000                     M 	dc.w	((end_of_level_psg1&$7fff)<<8)&$ff00+(end_of_level_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 05                       M 	dc.b	$05
00000022 00                       M 	dc.b	$00
00000023 05                       M 	dc.b	ftone_05
00000024                            	smpsHeaderPSG       End_of_level_PSG2,	$DC, $07, $00, fTone_05
00000024                          M 	checkedchannelpointer	end_of_level_psg2
00000024 0000                     M 	dc.w	((end_of_level_psg2&$7fff)<<8)&$ff00+(end_of_level_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 07                       M 	dc.b	$07
00000028 00                       M 	dc.b	$00
00000029 05                       M 	dc.b	ftone_05
0000002A                            	smpsHeaderPSG       End_of_level_PSG3,	$DC, $00, $00, fTone_04
0000002A                          M 	checkedchannelpointer	end_of_level_psg3
0000002A 0000                     M 	dc.w	((end_of_level_psg3&$7fff)<<8)&$ff00+(end_of_level_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$dc
0000002C DC                       M 	dc.b	$dc
0000002D 00                       M 	dc.b	$00
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM1 Data
00000030                            End_of_level_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032                            
00000032                            ; PSG1 Data
00000032                            End_of_level_PSG1:
00000032 8006 B8BA BCBD BFC1 C2C4+  	dc.b	nRst, $06, nG4, nA4, nB4, nC5, nD5, nE5, nF5, nG5, $0C, nB6
0000003E 02E7 D501 D403 D0          	dc.b	$02, smpsNoAttack, nC7, $01, nB6, $03, nG6
00000045                            	smpsModSet          $0C, $01, $08, $04
00000045 F0                       M 	dc.b	$f0
00000046 0C01 0804                M 	dc.b	$0c,$01,$08,$04
0000004A D233                       	dc.b	nA6, $33
0000004C                            	smpsStop
0000004C F2                       M 	dc.b	$f2
0000004D                            
0000004D                            ; FM2 Data
0000004D                            End_of_level_FM2:
0000004D                            	smpsSetvoice        $01
0000004D                          M 	smpsfmvoice	$01
0000004D EF01                     M 	dc.b	$ef,$01
0000004F                            	smpsNoteFill        $0B
0000004F E80B                     M 	dc.b	$e8,$0b
00000051                            	smpsNop             $01
00000051 E201                     M 	dc.b	$e2,$01
00000053 C403 C4B8 06B8 C403 C4B8+  	dc.b	nG5, $03, nG5, nG4, $06, nG4, nG5, $03, nG5, nG4, $06, nG4
0000005F C403 C480 0680 0CB8 09     	dc.b	nG5, $03, nG5, nRst, $06, nRst, $0C, nG4, $09
00000068                            	smpsNoteFill        $00
00000068 E800                     M 	dc.b	$e8,$00
0000006A BA33                       	dc.b	nA4, $33
0000006C                            	smpsNop             $01
0000006C E201                     M 	dc.b	$e2,$01
0000006E                            	smpsStop
0000006E F2                       M 	dc.b	$f2
0000006F                            
0000006F                            ; FM3 Data
0000006F                            End_of_level_FM3:
0000006F                            	smpsPan             panLeft, $00
0000006F E080                     M 	dc.b	$e0,direction+amsfms
00000071                            	smpsSetvoice        $02
00000071                          M 	smpsfmvoice	$02
00000071 EF02                     M 	dc.b	$ef,$02
00000073                            	smpsNoteFill        $06
00000073 E806                     M 	dc.b	$e8,$06
00000075 C903 C980 0CC9 03C9 800C+  	dc.b	nC6, $03, nC6, nRst, $0C, nC6, $03, nC6, nRst, $0C, nC6, $03
00000081 C980 12                    	dc.b	nC6, nRst, $12
00000084                            	smpsNoteFill        $00
00000084 E800                     M 	dc.b	$e8,$00
00000086 C909 CB33                  	dc.b	nC6, $09, nD6, $33
0000008A                            	smpsStop
0000008A F2                       M 	dc.b	$f2
0000008B                            
0000008B                            ; FM4 Data
0000008B                            End_of_level_FM4:
0000008B                            	smpsPan             panRight, $00
0000008B E040                     M 	dc.b	$e0,direction+amsfms
0000008D                            	smpsSetvoice        $02
0000008D                          M 	smpsfmvoice	$02
0000008D EF02                     M 	dc.b	$ef,$02
0000008F                            	smpsNoteFill        $06
0000008F E806                     M 	dc.b	$e8,$06
00000091 C603 C680 0CC6 03C6 800C+  	dc.b	nA5, $03, nA5, nRst, $0C, nA5, $03, nA5, nRst, $0C, nA5, $03
0000009D C680 12                    	dc.b	nA5, nRst, $12
000000A0                            	smpsNoteFill        $00
000000A0 E800                     M 	dc.b	$e8,$00
000000A2 C609 C833                  	dc.b	nA5, $09, nB5, $33
000000A6                            	smpsStop
000000A6 F2                       M 	dc.b	$f2
000000A7                            
000000A7                            ; FM5 Data
000000A7                            End_of_level_FM5:
000000A7                            	smpsSetvoice        $03
000000A7                          M 	smpsfmvoice	$03
000000A7 EF03                     M 	dc.b	$ef,$03
000000A9                            	smpsModSet          $0D, $01, $02, $05
000000A9 F0                       M 	dc.b	$f0
000000AA 0D01 0205                M 	dc.b	$0d,$01,$02,$05
000000AE                            
000000AE                            ; PSG2 Data
000000AE                            End_of_level_PSG2:
000000AE C406 C9C8 C4C9 C8C4 C9C8+  	dc.b	nG5, $06, nC6, nB5, nG5, nC6, nB5, nG5, nC6, nB5, $0C, nC6
000000BA 09C8 33                    	dc.b	$09, nB5, $33
000000BD                            
000000BD                            ; PSG3 Data
000000BD                            End_of_level_PSG3:
000000BD                            	smpsStop
000000BD F2                       M 	dc.b	$f2
000000BE                            
000000BE                            ; DAC Data
000000BE                            End_of_level_DAC:
000000BE 8203 8281 0681 8203 8281+  	dc.b	dSnare, $03, dSnare, dKick, $06, dKick, dSnare, $03, dSnare, dKick, $06, dKick
000000CA 8203 8288 888B 8B03 8B8B+  	dc.b	dSnare, $03, dSnare, dHiTimpani, dHiTimpani, dVLowTimpani, dVLowTimpani, $03, dVLowTimpani, dVLowTimpani, dSnare, $09
000000D6 33                         	dc.b	$33
000000D7                            	smpsStop
000000D7 F2                       M 	dc.b	$f2
000000D8                            
000000D8                            End_of_level_Voices:
000000D8                            ;	Voice $00
000000D8                            ;	$3D
000000D8                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000000D8                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000000D8                            	smpsVcAlgorithm     $05
000000D8 =00000005                M vcalgorithm	=	val
000000D8                            	smpsVcFeedback      $07
000000D8 =00000007                M vcfeedback	=	val
000000D8                            	smpsVcUnusedBits    $00
000000D8 =00000000                M vcunusedbits	=	val
000000D8 =00000000                M vcd1r1unk	=	0
000000D8 =00000000                M vcd1r2unk	=	0
000000D8 =00000000                M vcd1r3unk	=	0
000000D8 =00000000                M vcd1r4unk	=	0
000000D8                            	smpsVcDetune        $00, $00, $00, $00
000000D8 =00000000                M vcdt1	=	op1
000000D8 =00000000                M vcdt2	=	op2
000000D8 =00000000                M vcdt3	=	op3
000000D8 =00000000                M vcdt4	=	op4
000000D8                            	smpsVcCoarseFreq    $01, $00, $02, $01
000000D8 =00000001                M vccf1	=	op1
000000D8 =00000000                M vccf2	=	op2
000000D8 =00000002                M vccf3	=	op3
000000D8 =00000001                M vccf4	=	op4
000000D8                            	smpsVcRateScale     $00, $00, $00, $00
000000D8 =00000000                M vcrs1	=	op1
000000D8 =00000000                M vcrs2	=	op2
000000D8 =00000000                M vcrs3	=	op3
000000D8 =00000000                M vcrs4	=	op4
000000D8                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000000D8 =0000000E                M vcar1	=	op1
000000D8 =0000000E                M vcar2	=	op2
000000D8 =0000000E                M vcar3	=	op3
000000D8 =0000001F                M vcar4	=	op4
000000D8                            	smpsVcAmpMod        $00, $00, $00, $00
000000D8 =00000000                M vcam1	=	op1<<5
000000D8 =00000000                M vcam2	=	op2<<5
000000D8 =00000000                M vcam3	=	op3<<5
000000D8 =00000000                M vcam4	=	op4<<5
000000D8                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000000D8 =0000001F                M vcd1r1	=	op1
000000D8 =0000001F                M vcd1r2	=	op2
000000D8 =0000001F                M vcd1r3	=	op3
000000D8 =00000007                M vcd1r4	=	op4
000000D8                            	smpsVcDecayRate2    $00, $00, $00, $00
000000D8 =00000000                M vcd2r1	=	op1
000000D8 =00000000                M vcd2r2	=	op2
000000D8 =00000000                M vcd2r3	=	op3
000000D8 =00000000                M vcd2r4	=	op4
000000D8                            	smpsVcDecayLevel    $00, $00, $00, $01
000000D8 =00000000                M vcdl1	=	op1
000000D8 =00000000                M vcdl2	=	op2
000000D8 =00000000                M vcdl3	=	op3
000000D8 =00000001                M vcdl4	=	op4
000000D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000D8 =0000000F                M vcrr1	=	op1
000000D8 =0000000F                M vcrr2	=	op2
000000D8 =0000000F                M vcrr3	=	op3
000000D8 =0000000F                M vcrr4	=	op4
000000D8                            	smpsVcTotalLevel    $0C, $0C, $0D, $17
000000D8 =0000000C                M vctl1	=	op1
000000D8 =0000000C                M vctl2	=	op2
000000D8 =0000000D                M vctl3	=	op3
000000D8 =00000017                M vctl4	=	op4
000000D8 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000D9 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000000D9 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000000D9 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000000D9 =00000080                M vctlmask1	=	$80
000000D9 0100 0201                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000DD 1F0E 0E0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000E1 071F 1F1F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000000E5 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000E9 1F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000ED 178C 8D8C                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000F1                            
000000F1                            ;	Voice $01
000000F1                            ;	$3A
000000F1                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000000F1                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $0F, 	$21, $47, $31, $80
000000F1                            	smpsVcAlgorithm     $02
000000F1 =00000002                M vcalgorithm	=	val
000000F1                            	smpsVcFeedback      $07
000000F1 =00000007                M vcfeedback	=	val
000000F1                            	smpsVcUnusedBits    $00
000000F1 =00000000                M vcunusedbits	=	val
000000F1 =00000000                M vcd1r1unk	=	0
000000F1 =00000000                M vcd1r2unk	=	0
000000F1 =00000000                M vcd1r3unk	=	0
000000F1 =00000000                M vcd1r4unk	=	0
000000F1                            	smpsVcDetune        $03, $01, $03, $06
000000F1 =00000003                M vcdt1	=	op1
000000F1 =00000001                M vcdt2	=	op2
000000F1 =00000003                M vcdt3	=	op3
000000F1 =00000006                M vcdt4	=	op4
000000F1                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000000F1 =00000001                M vccf1	=	op1
000000F1 =00000004                M vccf2	=	op2
000000F1 =0000000C                M vccf3	=	op3
000000F1 =00000001                M vccf4	=	op4
000000F1                            	smpsVcRateScale     $03, $02, $03, $02
000000F1 =00000003                M vcrs1	=	op1
000000F1 =00000002                M vcrs2	=	op2
000000F1 =00000003                M vcrs3	=	op3
000000F1 =00000002                M vcrs4	=	op4
000000F1                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000000F1 =0000001A                M vcar1	=	op1
000000F1 =0000001C                M vcar2	=	op2
000000F1 =0000001B                M vcar3	=	op3
000000F1 =0000001C                M vcar4	=	op4
000000F1                            	smpsVcAmpMod        $00, $00, $00, $00
000000F1 =00000000                M vcam1	=	op1<<5
000000F1 =00000000                M vcam2	=	op2<<5
000000F1 =00000000                M vcam3	=	op3<<5
000000F1 =00000000                M vcam4	=	op4<<5
000000F1                            	smpsVcDecayRate1    $03, $04, $09, $04
000000F1 =00000003                M vcd1r1	=	op1
000000F1 =00000004                M vcd1r2	=	op2
000000F1 =00000009                M vcd1r3	=	op3
000000F1 =00000004                M vcd1r4	=	op4
000000F1                            	smpsVcDecayRate2    $00, $03, $01, $03
000000F1 =00000000                M vcd2r1	=	op1
000000F1 =00000003                M vcd2r2	=	op2
000000F1 =00000001                M vcd2r3	=	op3
000000F1 =00000003                M vcd2r4	=	op4
000000F1                            	smpsVcDecayLevel    $00, $00, $00, $01
000000F1 =00000000                M vcdl1	=	op1
000000F1 =00000000                M vcdl2	=	op2
000000F1 =00000000                M vcdl3	=	op3
000000F1 =00000001                M vcdl4	=	op4
000000F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000F1 =0000000F                M vcrr1	=	op1
000000F1 =0000000F                M vcrr2	=	op2
000000F1 =0000000F                M vcrr3	=	op3
000000F1 =0000000F                M vcrr4	=	op4
000000F1                            	smpsVcTotalLevel    $00, $31, $47, $21
000000F1 =00000000                M vctl1	=	op1
000000F1 =00000031                M vctl2	=	op2
000000F1 =00000047                M vctl3	=	op3
000000F1 =00000021                M vctl4	=	op4
000000F1 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000F2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000000F2 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000000F2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000000F2 =00000080                M vctlmask1	=	$80
000000F2 6114 3C31                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000F6 9C9C DBDA                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000FA 0404 0903                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000000FE 0303 0100                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000102 1F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000106 2131 4780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000010A                            
0000010A                            ;	Voice $02
0000010A                            ;	$3D
0000010A                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
0000010A                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
0000010A                            	smpsVcAlgorithm     $05
0000010A =00000005                M vcalgorithm	=	val
0000010A                            	smpsVcFeedback      $07
0000010A =00000007                M vcfeedback	=	val
0000010A                            	smpsVcUnusedBits    $00
0000010A =00000000                M vcunusedbits	=	val
0000010A =00000000                M vcd1r1unk	=	0
0000010A =00000000                M vcd1r2unk	=	0
0000010A =00000000                M vcd1r3unk	=	0
0000010A =00000000                M vcd1r4unk	=	0
0000010A                            	smpsVcDetune        $00, $00, $00, $00
0000010A =00000000                M vcdt1	=	op1
0000010A =00000000                M vcdt2	=	op2
0000010A =00000000                M vcdt3	=	op3
0000010A =00000000                M vcdt4	=	op4
0000010A                            	smpsVcCoarseFreq    $01, $01, $01, $01
0000010A =00000001                M vccf1	=	op1
0000010A =00000001                M vccf2	=	op2
0000010A =00000001                M vccf3	=	op3
0000010A =00000001                M vccf4	=	op4
0000010A                            	smpsVcRateScale     $01, $00, $01, $02
0000010A =00000001                M vcrs1	=	op1
0000010A =00000000                M vcrs2	=	op2
0000010A =00000001                M vcrs3	=	op3
0000010A =00000002                M vcrs4	=	op4
0000010A                            	smpsVcAttackRate    $0C, $14, $12, $0E
0000010A =0000000C                M vcar1	=	op1
0000010A =00000014                M vcar2	=	op2
0000010A =00000012                M vcar3	=	op3
0000010A =0000000E                M vcar4	=	op4
0000010A                            	smpsVcAmpMod        $00, $00, $00, $00
0000010A =00000000                M vcam1	=	op1<<5
0000010A =00000000                M vcam2	=	op2<<5
0000010A =00000000                M vcam3	=	op3<<5
0000010A =00000000                M vcam4	=	op4<<5
0000010A                            	smpsVcDecayRate1    $03, $0E, $08, $08
0000010A =00000003                M vcd1r1	=	op1
0000010A =0000000E                M vcd1r2	=	op2
0000010A =00000008                M vcd1r3	=	op3
0000010A =00000008                M vcd1r4	=	op4
0000010A                            	smpsVcDecayRate2    $00, $00, $00, $00
0000010A =00000000                M vcd2r1	=	op1
0000010A =00000000                M vcd2r2	=	op2
0000010A =00000000                M vcd2r3	=	op3
0000010A =00000000                M vcd2r4	=	op4
0000010A                            	smpsVcDecayLevel    $01, $01, $01, $01
0000010A =00000001                M vcdl1	=	op1
0000010A =00000001                M vcdl2	=	op2
0000010A =00000001                M vcdl3	=	op3
0000010A =00000001                M vcdl4	=	op4
0000010A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000010A =0000000F                M vcrr1	=	op1
0000010A =0000000F                M vcrr2	=	op2
0000010A =0000000F                M vcrr3	=	op3
0000010A =0000000F                M vcrr4	=	op4
0000010A                            	smpsVcTotalLevel    $1B, $00, $00, $1B
0000010A =0000001B                M vctl1	=	op1
0000010A =00000000                M vctl2	=	op2
0000010A =00000000                M vctl3	=	op3
0000010A =0000001B                M vctl4	=	op4
0000010A 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000010B =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000010B =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000010B =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000010B =00000080                M vctlmask1	=	$80
0000010B 0101 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000010F 8E14 524C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000113 080E 0803                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000117 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000011B 1F1F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000011F 1B80 809B                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000123                            
00000123                            ;	Voice $03
00000123                            ;	$3D
00000123                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
00000123                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
00000123                            	smpsVcAlgorithm     $05
00000123 =00000005                M vcalgorithm	=	val
00000123                            	smpsVcFeedback      $07
00000123 =00000007                M vcfeedback	=	val
00000123                            	smpsVcUnusedBits    $00
00000123 =00000000                M vcunusedbits	=	val
00000123 =00000000                M vcd1r1unk	=	0
00000123 =00000000                M vcd1r2unk	=	0
00000123 =00000000                M vcd1r3unk	=	0
00000123 =00000000                M vcd1r4unk	=	0
00000123                            	smpsVcDetune        $00, $00, $00, $00
00000123 =00000000                M vcdt1	=	op1
00000123 =00000000                M vcdt2	=	op2
00000123 =00000000                M vcdt3	=	op3
00000123 =00000000                M vcdt4	=	op4
00000123                            	smpsVcCoarseFreq    $01, $01, $01, $01
00000123 =00000001                M vccf1	=	op1
00000123 =00000001                M vccf2	=	op2
00000123 =00000001                M vccf3	=	op3
00000123 =00000001                M vccf4	=	op4
00000123                            	smpsVcRateScale     $01, $00, $01, $02
00000123 =00000001                M vcrs1	=	op1
00000123 =00000000                M vcrs2	=	op2
00000123 =00000001                M vcrs3	=	op3
00000123 =00000002                M vcrs4	=	op4
00000123                            	smpsVcAttackRate    $0C, $14, $12, $0E
00000123 =0000000C                M vcar1	=	op1
00000123 =00000014                M vcar2	=	op2
00000123 =00000012                M vcar3	=	op3
00000123 =0000000E                M vcar4	=	op4
00000123                            	smpsVcAmpMod        $00, $00, $00, $00
00000123 =00000000                M vcam1	=	op1<<5
00000123 =00000000                M vcam2	=	op2<<5
00000123 =00000000                M vcam3	=	op3<<5
00000123 =00000000                M vcam4	=	op4<<5
00000123                            	smpsVcDecayRate1    $03, $0E, $08, $08
00000123 =00000003                M vcd1r1	=	op1
00000123 =0000000E                M vcd1r2	=	op2
00000123 =00000008                M vcd1r3	=	op3
00000123 =00000008                M vcd1r4	=	op4
00000123                            	smpsVcDecayRate2    $00, $00, $00, $00
00000123 =00000000                M vcd2r1	=	op1
00000123 =00000000                M vcd2r2	=	op2
00000123 =00000000                M vcd2r3	=	op3
00000123 =00000000                M vcd2r4	=	op4
00000123                            	smpsVcDecayLevel    $01, $01, $01, $01
00000123 =00000001                M vcdl1	=	op1
00000123 =00000001                M vcdl2	=	op2
00000123 =00000001                M vcdl3	=	op3
00000123 =00000001                M vcdl4	=	op4
00000123                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000123 =0000000F                M vcrr1	=	op1
00000123 =0000000F                M vcrr2	=	op2
00000123 =0000000F                M vcrr3	=	op3
00000123 =0000000F                M vcrr4	=	op4
00000123                            	smpsVcTotalLevel    $1B, $00, $00, $1B
00000123 =0000001B                M vctl1	=	op1
00000123 =00000000                M vctl2	=	op2
00000123 =00000000                M vctl3	=	op3
00000123 =0000001B                M vctl4	=	op4
00000123 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000124 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000124 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000124 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000124 =00000080                M vctlmask1	=	$80
00000124 0101 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000128 8E14 524C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000012C 080E 0803                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000130 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000134 1F1F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000138 1B80 809B                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000013C                            
0000013C                            ; Unused voice
0000013C                            ;	Voice $04
0000013C                            ;	$3D
0000013C                            ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
0000013C                            ;	$01, $00, $00, $00, 	$2F, $1F, $1F, $1F, 	$1C, $82, $82, $82
0000013C                            	smpsVcAlgorithm     $05
0000013C =00000005                M vcalgorithm	=	val
0000013C                            	smpsVcFeedback      $07
0000013C =00000007                M vcfeedback	=	val
0000013C                            	smpsVcUnusedBits    $00
0000013C =00000000                M vcunusedbits	=	val
0000013C =00000000                M vcd1r1unk	=	0
0000013C =00000000                M vcd1r2unk	=	0
0000013C =00000000                M vcd1r3unk	=	0
0000013C =00000000                M vcd1r4unk	=	0
0000013C                            	smpsVcDetune        $00, $00, $00, $00
0000013C =00000000                M vcdt1	=	op1
0000013C =00000000                M vcdt2	=	op2
0000013C =00000000                M vcdt3	=	op3
0000013C =00000000                M vcdt4	=	op4
0000013C                            	smpsVcCoarseFreq    $02, $02, $02, $01
0000013C =00000002                M vccf1	=	op1
0000013C =00000002                M vccf2	=	op2
0000013C =00000002                M vccf3	=	op3
0000013C =00000001                M vccf4	=	op4
0000013C                            	smpsVcRateScale     $01, $01, $01, $00
0000013C =00000001                M vcrs1	=	op1
0000013C =00000001                M vcrs2	=	op2
0000013C =00000001                M vcrs3	=	op3
0000013C =00000000                M vcrs4	=	op4
0000013C                            	smpsVcAttackRate    $10, $10, $10, $10
0000013C =00000010                M vcar1	=	op1
0000013C =00000010                M vcar2	=	op2
0000013C =00000010                M vcar3	=	op3
0000013C =00000010                M vcar4	=	op4
0000013C                            	smpsVcAmpMod        $00, $00, $00, $00
0000013C =00000000                M vcam1	=	op1<<5
0000013C =00000000                M vcam2	=	op2<<5
0000013C =00000000                M vcam3	=	op3<<5
0000013C =00000000                M vcam4	=	op4<<5
0000013C                            	smpsVcDecayRate1    $08, $08, $08, $07
0000013C =00000008                M vcd1r1	=	op1
0000013C =00000008                M vcd1r2	=	op2
0000013C =00000008                M vcd1r3	=	op3
0000013C =00000007                M vcd1r4	=	op4
0000013C                            	smpsVcDecayRate2    $00, $00, $00, $01
0000013C =00000000                M vcd2r1	=	op1
0000013C =00000000                M vcd2r2	=	op2
0000013C =00000000                M vcd2r3	=	op3
0000013C =00000001                M vcd2r4	=	op4
0000013C                            	smpsVcDecayLevel    $01, $01, $01, $02
0000013C =00000001                M vcdl1	=	op1
0000013C =00000001                M vcdl2	=	op2
0000013C =00000001                M vcdl3	=	op3
0000013C =00000002                M vcdl4	=	op4
0000013C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000013C =0000000F                M vcrr1	=	op1
0000013C =0000000F                M vcrr2	=	op2
0000013C =0000000F                M vcrr3	=	op3
0000013C =0000000F                M vcrr4	=	op4
0000013C                            	smpsVcTotalLevel    $82, $82, $82, $1C
0000013C =00000082                M vctl1	=	op1
0000013C =00000082                M vctl2	=	op2
0000013C =00000082                M vctl3	=	op3
0000013C =0000001C                M vctl4	=	op4
0000013C 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000013D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000013D =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000013D =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000013D =00000080                M vctlmask1	=	$80
0000013D 0102 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000141 1050 5050                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000145 0708 0808                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000149 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000014D 2F1F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000151 1C82 8282                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000155                            
00000155                          M 	pops
00000000                            		
