00000000                            
00000000                            
00000000                            		opt	l.					; . is the local label symbol
00000000                            		opt	ae-					; automatic evens disabled by default
00000000                            		opt an+					; allow -h suffix for hexadecimal (used in the Z80 code)			
00000000                            		opt	ws+					; allow statements to contain white-spaces
00000000                            		opt	w+					; print warnings
00000000                            ;		opt	m+					; do not expand macros - if enabled, this can break assembling
00000000                            
00000000                            
00000000                            
00000000                            Header: group word,org($1380)
00000000                            		section _Header,Header
00000000                            
00000000                            ifarg:		macros
00000000                            		if strlen("\1")>0
00000000                            		
00000000                            z80_ptr: macros	; make a z80 pointer for use with compressed music (that is, NOT relative to $8000, the starting address of a ROM bank)
00000000                            		dc.w ((\1&$7FFF)<<8)&$FF00+(\1&$7FFF)>>8		
00000000                            
00000000                            		include "sound/SMPS2ASM.asm"
00000000                            ; ===========================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; Ported to ASM68K by Brainulator with additional modifications by OrionNavattan
00000000                            ; ===========================================================================
00000000                            ; Permission to use, copy, modify, and/or distribute this software for any
00000000                            ; purpose with or without fee is hereby granted.
00000000                            ;
00000000                            ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
00000000                            ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
00000000                            ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
00000000                            ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
00000000                            ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
00000000                            ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
00000000                            ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
00000000                            ; ===========================================================================
00000000                            
00000000 =00000002                  SonicDriverVer			= 2
00000000 =00000001                  SMPS2ASMVer			= 1
00000000                            ; Set the following to non-zero to use all S2 DAC samples, or to zero otherwise.
00000000                            ; The S1 samples are a subset of this.
00000000 =00000001                  use_s2_samples			= 1
00000000                            ; Set the following to non-zero to use all S3D DAC samples, or to zero
00000000                            ; otherwise. Most of the S3D samples are also present in S3/S&K, but
00000000                            ; there are two samples specific to S3D.
00000000 =00000001                  use_s3d_samples			= 1
00000000                            ; Set the following to non-zero to use all S3 DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_s3_samples			= 1
00000000                            ; Set the following to non-zero to use all S&K DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_sk_samples			= 1
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000                            		rsset	$88
00000000 =00000088                  smpsPitch10lo		rs.b	$C
00000000 =00000094                  smpsPitch09lo		rs.b	$C
00000000 =000000A0                  smpsPitch08lo		rs.b	$C
00000000 =000000AC                  smpsPitch07lo		rs.b	$C
00000000 =000000B8                  smpsPitch06lo		rs.b	$C
00000000 =000000C4                  smpsPitch05lo		rs.b	$C
00000000 =000000D0                  smpsPitch04lo		rs.b	$C
00000000 =000000DC                  smpsPitch03lo		rs.b	$C
00000000 =000000E8                  smpsPitch02lo		rs.b	$C
00000000 =000000F4                  smpsPitch01lo		rs.b	$C
00000000                            	rsreset
00000000 =00000000                  smpsPitch00		rs.b	$C
00000000 =0000000C                  smpsPitch01hi		rs.b	$C
00000000 =00000018                  smpsPitch02hi		rs.b	$C
00000000 =00000024                  smpsPitch03hi		rs.b	$C
00000000 =00000030                  smpsPitch04hi		rs.b	$C
00000000 =0000003C                  smpsPitch05hi		rs.b	$C
00000000 =00000048                  smpsPitch06hi		rs.b	$C
00000000 =00000054                  smpsPitch07hi		rs.b	$C
00000000 =00000060                  smpsPitch08hi		rs.b	$C
00000000 =0000006C                  smpsPitch09hi		rs.b	$C
00000000 =00000078                  smpsPitch10hi		rs.b	$C
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Note Equates
00000000                            		rsset	$80
00000000 =00000080                  nRst		rs.b	1
00000000 =00000081                  nC0		rs.b	1
00000000 =00000082                  nCs0		rs.b	1
00000000 =00000083                  nD0		rs.b	1
00000000 =00000084                  nEb0		rs.b	1
00000000 =00000085                  nE0		rs.b	1
00000000 =00000086                  nF0		rs.b	1
00000000 =00000087                  nFs0		rs.b	1
00000000 =00000088                  nG0		rs.b	1
00000000 =00000089                  nAb0		rs.b	1
00000000 =0000008A                  nA0		rs.b	1
00000000 =0000008B                  nBb0		rs.b	1
00000000 =0000008C                  nB0		rs.b	1
00000000 =0000008D                  nC1		rs.b	1
00000000 =0000008E                  nCs1		rs.b	1
00000000 =0000008F                  nD1		rs.b	1
00000000 =00000090                  nEb1		rs.b	1
00000000 =00000091                  nE1		rs.b	1
00000000 =00000092                  nF1		rs.b	1
00000000 =00000093                  nFs1		rs.b	1
00000000 =00000094                  nG1		rs.b	1
00000000 =00000095                  nAb1		rs.b	1
00000000 =00000096                  nA1		rs.b	1
00000000 =00000097                  nBb1		rs.b	1
00000000 =00000098                  nB1		rs.b	1
00000000 =00000099                  nC2		rs.b	1
00000000 =0000009A                  nCs2		rs.b	1
00000000 =0000009B                  nD2		rs.b	1
00000000 =0000009C                  nEb2		rs.b	1
00000000 =0000009D                  nE2		rs.b	1
00000000 =0000009E                  nF2		rs.b	1
00000000 =0000009F                  nFs2		rs.b	1
00000000 =000000A0                  nG2		rs.b	1
00000000 =000000A1                  nAb2		rs.b	1
00000000 =000000A2                  nA2		rs.b	1
00000000 =000000A3                  nBb2		rs.b	1
00000000 =000000A4                  nB2		rs.b	1
00000000 =000000A5                  nC3		rs.b	1
00000000 =000000A6                  nCs3		rs.b	1
00000000 =000000A7                  nD3		rs.b	1
00000000 =000000A8                  nEb3		rs.b	1
00000000 =000000A9                  nE3		rs.b	1
00000000 =000000AA                  nF3		rs.b	1
00000000 =000000AB                  nFs3		rs.b	1
00000000 =000000AC                  nG3		rs.b	1
00000000 =000000AD                  nAb3		rs.b	1
00000000 =000000AE                  nA3		rs.b	1
00000000 =000000AF                  nBb3		rs.b	1
00000000 =000000B0                  nB3		rs.b	1
00000000 =000000B1                  nC4		rs.b	1
00000000 =000000B2                  nCs4		rs.b	1
00000000 =000000B3                  nD4		rs.b	1
00000000 =000000B4                  nEb4		rs.b	1
00000000 =000000B5                  nE4		rs.b	1
00000000 =000000B6                  nF4		rs.b	1
00000000 =000000B7                  nFs4		rs.b	1
00000000 =000000B8                  nG4		rs.b	1
00000000 =000000B9                  nAb4		rs.b	1
00000000 =000000BA                  nA4		rs.b	1
00000000 =000000BB                  nBb4		rs.b	1
00000000 =000000BC                  nB4		rs.b	1
00000000 =000000BD                  nC5		rs.b	1
00000000 =000000BE                  nCs5		rs.b	1
00000000 =000000BF                  nD5		rs.b	1
00000000 =000000C0                  nEb5		rs.b	1
00000000 =000000C1                  nE5		rs.b	1
00000000 =000000C2                  nF5		rs.b	1
00000000 =000000C3                  nFs5		rs.b	1
00000000 =000000C4                  nG5		rs.b	1
00000000 =000000C5                  nAb5		rs.b	1
00000000 =000000C6                  nA5		rs.b	1
00000000 =000000C7                  nBb5		rs.b	1
00000000 =000000C8                  nB5		rs.b	1
00000000 =000000C9                  nC6		rs.b	1
00000000 =000000CA                  nCs6		rs.b	1
00000000 =000000CB                  nD6		rs.b	1
00000000 =000000CC                  nEb6		rs.b	1
00000000 =000000CD                  nE6		rs.b	1
00000000 =000000CE                  nF6		rs.b	1
00000000 =000000CF                  nFs6		rs.b	1
00000000 =000000D0                  nG6		rs.b	1
00000000 =000000D1                  nAb6		rs.b	1
00000000 =000000D2                  nA6		rs.b	1
00000000 =000000D3                  nBb6		rs.b	1
00000000 =000000D4                  nB6		rs.b	1
00000000 =000000D5                  nC7		rs.b	1
00000000 =000000D6                  nCs7		rs.b	1
00000000 =000000D7                  nD7		rs.b	1
00000000 =000000D8                  nEb7		rs.b	1
00000000 =000000D9                  nE7		rs.b	1
00000000 =000000DA                  nF7		rs.b	1
00000000 =000000DB                  nFs7		rs.b	1
00000000 =000000DC                  nG7		rs.b	1
00000000 =000000DD                  nAb7		rs.b	1
00000000 =000000DE                  nA7		rs.b	1
00000000 =000000DF                  nBb7		rs.b	1
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; PSG volume envelope equates
00000000                            		rsset	1
00000000 =00000001                  fTone_01	rs.b	1
00000000 =00000002                  fTone_02	rs.b	1
00000000 =00000003                  fTone_03	rs.b	1
00000000 =00000004                  fTone_04	rs.b	1
00000000 =00000005                  fTone_05	rs.b	1
00000000 =00000006                  fTone_06	rs.b	1
00000000 =00000007                  fTone_07	rs.b	1
00000000 =00000008                  fTone_08	rs.b	1
00000000 =00000009                  fTone_09	rs.b	1
00000000 =0000000A                  fTone_0A	rs.b	1
00000000 =0000000B                  fTone_0B	rs.b	1
00000000 =0000000C                  fTone_0C	rs.b	1
00000000 =0000000D                  fTone_0D	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000                            		rsset	$81
00000000 =00000081                  dKick		rs.b	1
00000000 =00000082                  dSnare		rs.b	1
00000000 =00000083                  dClap		rs.b	1
00000000 =00000084                  dScratch	rs.b	1
00000000 =00000085                  dTimpani	rs.b	1
00000000 =00000086                  dHiTom		rs.b	1
00000000 =00000087                  dVLowClap	rs.b	1
00000000 =00000088                  dHiTimpani	rs.b	1
00000000 =00000089                  dMidTimpani	rs.b	1
00000000 =0000008A                  dLowTimpani	rs.b	1
00000000 =0000008B                  dVLowTimpani	rs.b	1
00000000 =0000008C                  dMidTom		rs.b	1
00000000 =0000008D                  dLowTom		rs.b	1
00000000 =0000008E                  dFloorTom	rs.b	1
00000000 =0000008F                  dHiClap		rs.b	1
00000000 =00000090                  dMidClap	rs.b	1
00000000 =00000091                  dLowClap	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            little_endian macros
00000000                            		dc.w	((\1<<8)&$FF00)|((\1>>8)&$FF)
00000000                            
00000000                            ;	if ~def(z80_ptr)
00000000                            ;z80_ptr macros
00000000                            ;		dc.w	((\1<<8)&$FF00)|((\1>>8)&$7F)|$80
00000000                            ;	endc
00000000                            
00000000                            ;conv0To256  function n,((n==0)<<8)|n
00000000                            ;s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
00000000                            ;s2TempotoS3 function n,($100-((n==0)|n))&$FF
00000000                            ;s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
00000000                            ;s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
00000000                            ;s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
00000000                            ;s3TempotoS2 function n,s2TempotoS3(n)
00000000                            
00000000                            s2TempotoS1 macro n
00000000                            	s21convval:	= (((768-n)>>1)/(256-n))&$FF
00000000                            	endm
00000000                            
00000000                            s2TempotoS3 macro n
00000000                            	s23convval:	= ($100-((n=0)|n))&$FF
00000000                            	s32convval:	= s23convval
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro n
00000000                            	if n=0
00000000                            		s12convval:	= ((((256-1)<<8)+(256>>1))/256)&$FF
00000000                            	else
00000000                            		s12convval:	= ((((n-1)<<8)+(n>>1))/n)&$FF
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            s1TempotoS3 macro n
00000000                            	s1TempotoS2	n
00000000                            	s2TempotoS3	s12convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS1 macro n
00000000                            	s2TempotoS3	n
00000000                            	s2TempotoS1	s23convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS2 macros
00000000                            	s2TempotoS3	\_
00000000                            
00000000                            convertMainTempoMod macro val
00000000                            	if ((SourceDriver>=3)&(SonicDriverVer>=3))|(SonicDriverVer=SourceDriver)
00000000                            		dc.b \val
00000000                            	elseif SourceDriver=1
00000000                            		if \val\=1
00000000                            			inform 3,"Invalid main tempo of 1 in song from Sonic 1"
00000000                            		endc
00000000                            		if SonicDriverVer=2
00000000                            			s1TempotoS2	\val
00000000                            			dc.b s12convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s1TempotoS3	\val
00000000                            			dc.b s13convval
00000000                            		endc
00000000                            	elseif SourceDriver=2
00000000                            		if \val\=0
00000000                            			inform 3,"Invalid main tempo of 0 in song from Sonic 2"
00000000                            		endc
00000000                            		if SonicDriverVer=1
00000000                            			s2TempotoS1	\val
00000000                            			dc.b s21convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s2TempotoS3	\val
00000000                            			dc.b s23convval
00000000                            		endc
00000000                            	else;if SourceDriver>=3
00000000                            		if \val\=0
00000000                            			inform 2,"Performing approximate conversion of Sonic 3 main tempo modifier of 0"
00000000                            		endc
00000000                            		if SonicDriverVer=1
00000000                            			s3TempotoS1	\val
00000000                            			dc.b s31convval
00000000                            		else;if SonicDriverVer=2
00000000                            			s3TempotoS2	\val
00000000                          M 	s2tempotos3	\val
00000000                            			dc.b s32convval
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            PSGPitchConvert macro val
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b (\val\+psgdelta)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b (\val\-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b \val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            CheckedChannelPointer macro location
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                          M 	dc.w	((\location\&$7fff)<<8)&$ff00+(\location\&$7fff)>>8
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Tracks for Sonic 1 songs must come after the start of the song"
00000000                            		else
00000000                            			dc.w \location\-songStart
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver,sourcesmps2asmver
00000000                            SourceDriver set ver
00000000                            	if (narg=2)
00000000                            SourceSMPS2ASM set sourcesmps2asmver
00000000                            	else
00000000                            SourceSMPS2ASM set 0
00000000                            	endc
00000000                            songStart set offset(*)
00000000                            	if SMPS2ASMVer<SourceSMPS2ASM
00000000                            		inform 1,"Song at 0x%h was made for a newer version of SMPS2ASM (this is version %d, but song wants at least version %d).",songStart,SMPS2ASMVer,SourceSMPS2ASM
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            		dc.w $0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro location
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                          M 	dc.w	((\location\&$7fff)<<8)&$ff00+(\location\&$7fff)>>8
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Voice banks for Sonic 1 songs must come after the song"
00000000                            		else
00000000                            			dc.w \location\-songStart
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            	if SonicDriverVer>=5
00000000                            		z80_ptr	z80_UniVoiceBank
00000000                          M 	dc.w	((z80_univoicebank&$7fff)<<8)&$ff00+(z80_univoicebank&$7fff)>>8
00000000                            	elseif SonicDriverVer>=3
00000000                            		little_endian	z80_UniVoiceBank
00000000                          M 	dc.w	((z80_univoicebank<<8)&$ff00)|((z80_univoicebank>>8)&$ff)
00000000                            	else
00000000                            		inform 3,"Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b \fm,\psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            	convertMainTempoMod \mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	if strlen("\pitch")>0
00000000                            		dc.b	pitch
00000000                            		if strlen("\vol")>0
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	dc.b \pitch,\vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro location,pitch,vol,mod,voice
00000000                            	CheckedChannelPointer \location
00000000                            	PSGPitchConvert \pitch
00000000                            	dc.b \vol
00000000                            	; Frequency envelope
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
00000000                            		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
00000000                            		; other drivers may try to process as valid data, so manually force it to 0 here.
00000000                            		dc.b	0
00000000                            	else
00000000                            		if (SonicDriverVer<3)&(SourceDriver>=3)&(\mod<>0)
00000000                            			inform 1,"This track header specifies a frequency envelope, but this driver does not support them."
00000000                            		endc
00000000                            		dc.b \mod
00000000                            	endc
00000000                            	; Volume envelope
00000000                            	dc.b \voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b \div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b \chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,location,pitch,vol
00000000                            	if (SonicDriverVer>=3)&(chanid=cNoise)
00000000                            		inform 3,"Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	elseif (SonicDriverVer<3)&(chanid=cFM6)
00000000                            		inform 3,"Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	CheckedChannelPointer \location\
00000000                            	if (chanid&$80)<>0
00000000                            		PSGPitchConvert \pitch
00000000                            	else
00000000                            		dc.b \pitch
00000000                            	endc
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000 =00000000                  panNone equ $00
00000000 =00000040                  panRight equ $40
00000000 =00000080                  panLeft equ $80
00000000 =000000C0                  panCentre equ $C0 ; silly Brits :U
00000000 =000000C0                  panCenter equ $C0
00000000                            
00000000                            ; E1xx - Set channel detune to val
00000000                            smpsDetune macro val
00000000                            	dc.b $E1,\val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	if SonicDriverVer<3
00000000                            		dc.b $E2,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $F9
00000000                            	else
00000000                            		dc.b $E3
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $E2
00000000                            		ifarg val
00000000                          M 	if	strlen("val")>0
00000000                            			dc.b \val
00000000                            		else
00000000                            			dc.b $FF
00000000                            		endc
00000000                            		if SourceDriver<3
00000000                            			smpsStop
00000000                            		endc
00000000                            	elseif (SourceDriver>=3)&(strlen("\val"))&(strcmp("\val","$FF"))
00000000                            		; This is one of those weird S3+ "fades" that we don't need
00000000                            	else
00000000                            		dc.b $E4
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	if SonicDriverVer>=5
00000000                            		; New flag unique to Flamewing's modified S&K driver
00000000                            		dc.b $FF,$08,\val
00000000                            	elseif SonicDriverVer=3
00000000                            		inform 3,"Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
00000000                            	else
00000000                            		dc.b $E5,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b $E6,\val
00000000                            	endm
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	if (SonicDriverVer>=5)&(SourceDriver<3)
00000000                            		; Unique to Flamewing's modified driver
00000000                            		dc.b $FF,$0A,\val
00000000                            	else
00000000                            		if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            			inform 1,"Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            			inform 1,"Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		endc
00000000                            		dc.b $E8,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsChangeTransposition macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FB,\val
00000000                            	else
00000000                            		dc.b $E9,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FF,$00
00000000                            	else
00000000                            		dc.b $EA
00000000                            	endc
00000000                            	convertMainTempoMod \val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FF,$04,val
00000000                            	else
00000000                            		dc.b $EB,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $E4,\val
00000000                            	else
00000000                            		inform 3,"Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b $EC,\vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b $ED
00000000                            	else
00000000                            		inform 3,"Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b $EE
00000000                            	else
00000000                            		inform 2,"Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
00000000                            		smpsStop
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsFMvoice macro voice,songID
00000000                            	if (SonicDriverVer>=3)&(strlen("\songID")>0)
00000000                            		dc.b $EF,\voice|$80,\songID+$81
00000000                            	else
00000000                            		dc.b $EF,\voice
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b \wait+1,\speed,\change,((\step+1)*\speed)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b wait-1,\speed,\change
00000000                            		conv_step:	= ((step=0)<<8)|step
00000000                            		conv_speed:	= ((speed=0)<<8)|speed
00000000                            		dc.b (\conv_step/\conv_speed)-1
00000000                            	else
00000000                            		dc.b \wait,\speed,\change,\step
00000000                            	endc
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro type
00000000                            	if SonicDriverVer>=3
00000000                            		if strlen("\type")>0
00000000                            			dc.b $F4,\type
00000000                            		else
00000000                            			dc.b $F4,$80
00000000                            		endc
00000000                            	else
00000000                            		dc.b $F1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b $F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b $F3,\form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FA
00000000                            	else
00000000                            		dc.b $F4
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b $F5,\voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b $F6
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if (SonicDriverVer>=3)&(strlen("\val2")>0)
00000000                            		dc.b $E5,\val1,\val2
00000000                            	else
00000000                            		dc.b $E6,\val1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsMaxRelRate macro
00000000                            	if SonicDriverVer>=3
00000000                            		; Emulate it in S3/S&K/S3D driver
00000000                            		smpsFMICommand $88,$0F
00000000                            		smpsFMICommand $8C,$0F
00000000                            	else
00000000                            		dc.b $F9
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Backwards compatibility
00000000                            smpsAlterNote macro
00000000                            	smpsDetune	\_
00000000                            	endm
00000000                            
00000000                            smpsAlterPitch macro
00000000                            	smpsChangeTransposition	\_
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro
00000000                            	smpsFMVolEnv	\_
00000000                            	endm
00000000                            
00000000                            smpsWeirdD1LRR macro
00000000                            	smpsMaxRelRate \_
00000000                            	endm
00000000                            
00000000                            smpsSetvoice macro
00000000                            	smpsFMvoice \_
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
00000000                            vcUnusedBits set val
00000000                            	if (strlen("\d1r1")>0)&(strlen("\d1r2")>0)&(strlen("\d1r3")>0)&(strlen("\d1r4")>0)
00000000                            vcD1R1Unk set d1r1<<5
00000000                            vcD1R2Unk set d1r2<<5
00000000                            vcD1R3Unk set d1r3<<5
00000000                            vcD1R4Unk set d1r4<<5
00000000                            	else
00000000                            vcD1R1Unk set 0
00000000                            vcD1R2Unk set 0
00000000                            vcD1R3Unk set 0
00000000                            vcD1R4Unk set 0
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
00000000                            ; were the Amplitude Modulation.
00000000                            ; According to several docs, however, it's actually the high bit.
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            	if SourceSMPS2ASM=0
00000000                            vcAM1 set op1<<5
00000000                            vcAM2 set op2<<5
00000000                            vcAM3 set op3<<5
00000000                            vcAM4 set op4<<5
00000000                            	else
00000000                            vcAM1 set op1<<7
00000000                            vcAM2 set op2<<7
00000000                            vcAM3 set op3<<7
00000000                            vcAM4 set op4<<7
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            ; The original SMPS2ASM decides TL high bits automatically,
00000000                            ; but later versions leave it up to the user.
00000000                            ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
00000000                            ; then we *want* the TL bits to match the algorithm, because SMPS 68k
00000000                            ; prefers the algorithm over the TL bits, ignoring the latter, while
00000000                            ; SMPS Z80 does the opposite.
00000000                            ; Unfortunately, there's nothing we can do if we're trying to convert
00000000                            ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
00000000                            ; what we do, so we just print a warning.
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            	if SourceSMPS2ASM=0
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            	else
00000000                            vcTLMask4 set 0
00000000                            vcTLMask3 set 0
00000000                            vcTLMask2 set 0
00000000                            vcTLMask1 set 0
00000000                            	endc
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            vcTL1 set vcTL1&$7F
00000000                            vcTL2 set vcTL2&$7F
00000000                            vcTL3 set vcTL3&$7F
00000000                            vcTL4 set vcTL4&$7F
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)&((((vcTL1|vcTLMask1)&$80)<>$80)|(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))|(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))|(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm=7)<<7)))
00000000                            		inform 1,"Voice at 0x%h has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers.",offset(*)
00000000                            	endc
00000000                            	if SonicDriverVer=2
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT2<<4)+vcCF2,       (vcDT3<<4)+vcCF3,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS2<<6)+vcAR2,       (vcRS3<<6)+vcAR3,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R2,                 vcD2R3,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL2<<4)+vcRR2,       (vcDL3<<4)+vcRR3,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL2|vcTLMask2,        vcTL3|vcTLMask3,        vcTL1|vcTLMask1
00000000                            	else
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT3<<4)+vcCF3,       (vcDT2<<4)+vcCF2,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS3<<6)+vcAR3,       (vcRS2<<6)+vcAR2,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R3,                 vcD2R2,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL3<<4)+vcRR3,       (vcDL2<<4)+vcRR2,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL3|vcTLMask3,        vcTL2|vcTLMask2,        vcTL1|vcTLMask1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            		
00000000                            ; Generate an include for a music file and output the assembled bytecode to its own file.		
00000000                            ;inc_music:	macro songname
00000000                            ;		pushs
00000000                            
00000000                            ;Music\@:	section	org($1380),file("sound/music/compressed/\songname\.unc"),over(Header)	; output each music track to its own file
00000000                            ;		include "sound/music/\songname\.asm"	; include the actual music file for assembly
00000000                            		
00000000                            ;		if offset(*)>7C0h ; size of Z80 decompression buffer
00000000                            ;			inform 2,"\songname is too large for the Z80 decompression buffer! It should be uncompressed instead."
00000000                            ;		endc	
00000000                            ;		pops					
00000000                            ;		endm
00000000                            
00000000                            
00000000                            ;		inc_music	Continue
00000000                            ;		inc_music	HPZ
00000000                            ;		inc_music	Drowning
00000000                            ;		inc_music	Invincible
00000000                            ;		inc_music	CNZ2P
00000000                            ;		inc_music	EHZ
00000000                            ;		inc_music	MTZ
00000000                            ;		inc_music	CNZ
00000000                            ;		inc_music	MCZ
00000000                            ;		inc_music	MCZ2P
00000000                            ;		inc_music	ARZ
00000000                            ;		inc_music	DEZ
00000000                            ;		inc_music	SpecialStage
00000000                            ;		inc_music	Options
00000000                            ;		inc_music	Ending
00000000                            ;		inc_music	FinalBoss
00000000                            ;		inc_music	CPZ
00000000                            ;		inc_music	Boss
00000000                            ;		inc_music	SCZ
00000000                            ;		inc_music	OOZ
00000000                            ;		inc_music	WFZ
00000000                            ;		inc_music	EHZ2P
00000000                            ;		inc_music	TwoPlayerMenu
00000000                            ;		inc_music	SuperSonic
00000000                            ;		inc_music	HTZ
00000000                            ;		inc_music	TitleScreen
00000000                            ;		inc_music	EndOfAct
00000000                            
00000000                            		pushs
00000000                            Music1:	section	org($1380),file("sound/music/compressed/Continue.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/Continue.asm"	; include the actual music file for assembly
00000000                            Continue_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000000                M sourcesmps2asm	set	0
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     Continue_Voices
00000000 0000                     M 	dc.w	((continue_voices&$7fff)<<8)&$ff00+(continue_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $DB
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$db
00000005 DB                       M 	dc.b	$db
00000006                            
00000006                            	smpsHeaderDAC       Continue_DAC
00000006                          M 	checkedchannelpointer	continue_dac
00000006 0000                     M 	dc.w	((continue_dac&$7fff)<<8)&$ff00+(continue_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Continue_FM1,	$E5, $08
0000000A                          M 	checkedchannelpointer	continue_fm1
0000000A 0000                     M 	dc.w	((continue_fm1&$7fff)<<8)&$ff00+(continue_fm1&$7fff)>>8
0000000C E508                     M 	dc.b	$e5,$08
0000000E                            	smpsHeaderFM        Continue_FM2,	$E8, $08
0000000E                          M 	checkedchannelpointer	continue_fm2
0000000E 0000                     M 	dc.w	((continue_fm2&$7fff)<<8)&$ff00+(continue_fm2&$7fff)>>8
00000010 E808                     M 	dc.b	$e8,$08
00000012                            	smpsHeaderFM        Continue_FM3,	$F4, $0F
00000012                          M 	checkedchannelpointer	continue_fm3
00000012 0000                     M 	dc.w	((continue_fm3&$7fff)<<8)&$ff00+(continue_fm3&$7fff)>>8
00000014 F40F                     M 	dc.b	$f4,$0f
00000016                            	smpsHeaderFM        Continue_FM4,	$F4, $0F
00000016                          M 	checkedchannelpointer	continue_fm4
00000016 0000                     M 	dc.w	((continue_fm4&$7fff)<<8)&$ff00+(continue_fm4&$7fff)>>8
00000018 F40F                     M 	dc.b	$f4,$0f
0000001A                            	smpsHeaderFM        Continue_FM5,	$F4, $0A
0000001A                          M 	checkedchannelpointer	continue_fm5
0000001A 0000                     M 	dc.w	((continue_fm5&$7fff)<<8)&$ff00+(continue_fm5&$7fff)>>8
0000001C F40A                     M 	dc.b	$f4,$0a
0000001E                            	smpsHeaderPSG       Continue_PSG1,	$D0, $03, $00, fTone_05
0000001E                          M 	checkedchannelpointer	continue_psg1
0000001E 0000                     M 	dc.w	((continue_psg1&$7fff)<<8)&$ff00+(continue_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 03                       M 	dc.b	$03
00000022 00                       M 	dc.b	$00
00000023 05                       M 	dc.b	ftone_05
00000024                            	smpsHeaderPSG       Continue_PSG2,	$DC, $06, $00, fTone_05
00000024                          M 	checkedchannelpointer	continue_psg2
00000024 0000                     M 	dc.w	((continue_psg2&$7fff)<<8)&$ff00+(continue_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 06                       M 	dc.b	$06
00000028 00                       M 	dc.b	$00
00000029 05                       M 	dc.b	ftone_05
0000002A                            	smpsHeaderPSG       Continue_PSG3,	$DC, $00, $00, fTone_04
0000002A                          M 	checkedchannelpointer	continue_psg3
0000002A 0000                     M 	dc.w	((continue_psg3&$7fff)<<8)&$ff00+(continue_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$dc
0000002C DC                       M 	dc.b	$dc
0000002D 00                       M 	dc.b	$00
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM1 Data
00000030                            Continue_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032 8030                       	dc.b	nRst, $30
00000034                            
00000034                            Continue_Loop04:
00000034                            	smpsAlterPitch      $01
00000034                          M 	smpschangetransposition	$01
00000034 E901                     M 	dc.b	$e9,$01
00000036 800C CC12 8006 CC80 CD0C+  	dc.b	nRst, $0C, nEb6, $12, nRst, $06, nEb6, nRst, nE6, $0C, nRst, $06
00000042 CA18 8006                  	dc.b	nCs6, $18, nRst, $06
00000046                            	smpsLoop            $00, $03, Continue_Loop04
00000046 F7                       M 	dc.b	$f7
00000047 0003                     M 	dc.b	index,loops
00000049 0000                     M 	dc.w	((continue_loop04&$7fff)<<8)&$ff00+(continue_loop04&$7fff)>>8
0000004B CE06 80CE 80CE 80C9 80C7+  	dc.b	nF6, $06, nRst, nF6, nRst, nF6, nRst, nC6, nRst, nBb5, $0C, nRst
00000057 06CB 4E                    	dc.b	$06, nD6, $4E
0000005A                            	smpsStop
0000005A F2                       M 	dc.b	$f2
0000005B                            
0000005B                            ; FM2 Data
0000005B                            Continue_FM2:
0000005B                            	smpsSetvoice        $01
0000005B                          M 	smpsfmvoice	$01
0000005B EF01                     M 	dc.b	$ef,$01
0000005D                            	smpsAlterVol        $02
0000005D E602                     M 	dc.b	$e6,$02
0000005F                            	smpsAlterPitch      $F4
0000005F                          M 	smpschangetransposition	$f4
0000005F E9F4                     M 	dc.b	$e9,$f4
00000061                            	smpsNop             $01
00000061 E201                     M 	dc.b	$e2,$01
00000063 C60C C5C4 C3               	dc.b	nA5, $0C, nAb5, nG5, nFs5
00000068                            	smpsAlterVol        $FE
00000068 E6FE                     M 	dc.b	$e6,$fe
0000006A                            	smpsAlterPitch      $0C
0000006A                          M 	smpschangetransposition	$0c
0000006A E90C                     M 	dc.b	$e9,$0c
0000006C                            	smpsSetvoice        $02
0000006C                          M 	smpsfmvoice	$02
0000006C EF02                     M 	dc.b	$ef,$02
0000006E                            
0000006E                            Continue_Loop03:
0000006E BA06 80BA 80B5 80B5 80B8+  	dc.b	nA4, $06, nRst, nA4, nRst, nE4, nRst, nE4, nRst, nG4, $12, nFs4
0000007A 0CB8 06B7 0C               	dc.b	$0C, nG4, $06, nFs4, $0C
0000007F                            	smpsAlterPitch      $01
0000007F                          M 	smpschangetransposition	$01
0000007F E901                     M 	dc.b	$e9,$01
00000081                            	smpsLoop            $00, $03, Continue_Loop03
00000081 F7                       M 	dc.b	$f7
00000082 0003                     M 	dc.b	index,loops
00000084 0000                     M 	dc.w	((continue_loop03&$7fff)<<8)&$ff00+(continue_loop03&$7fff)>>8
00000086                            	smpsAlterPitch      $FD
00000086                          M 	smpschangetransposition	$fd
00000086 E9FD                     M 	dc.b	$e9,$fd
00000088 BC06 80BC 80B7 80B7 80C1+  	dc.b	nB4, $06, nRst, nB4, nRst, nFs4, nRst, nFs4, nRst, nE5, $0C, nRst
00000094 06C0 4E                    	dc.b	$06, nEb5, $4E
00000097                            	smpsNop             $01
00000097 E201                     M 	dc.b	$e2,$01
00000099                            	smpsStop
00000099 F2                       M 	dc.b	$f2
0000009A                            
0000009A                            ; FM3 Data
0000009A                            Continue_FM3:
0000009A                            	smpsSetvoice        $03
0000009A                          M 	smpsfmvoice	$03
0000009A EF03                     M 	dc.b	$ef,$03
0000009C 8030                       	dc.b	nRst, $30
0000009E                            
0000009E                            Continue_Loop02:
0000009E CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000000AA 1E                         	dc.b	$1E
000000AB                            	smpsLoop            $00, $03, Continue_Loop02
000000AB F7                       M 	dc.b	$f7
000000AC 0003                     M 	dc.b	index,loops
000000AE 0000                     M 	dc.w	((continue_loop02&$7fff)<<8)&$ff00+(continue_loop02&$7fff)>>8
000000B0 CD06 80CD 80CA 80CA 80D0+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $0C, nRst
000000BC 06D0 1EE7 30               	dc.b	$06, nG6, $1E, smpsNoAttack, $30
000000C1                            	smpsStop
000000C1 F2                       M 	dc.b	$f2
000000C2                            
000000C2                            ; FM4 Data
000000C2                            Continue_FM4:
000000C2                            	smpsSetvoice        $03
000000C2                          M 	smpsfmvoice	$03
000000C2 EF03                     M 	dc.b	$ef,$03
000000C4 8030                       	dc.b	nRst, $30
000000C6                            
000000C6                            Continue_Loop01:
000000C6 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000000D2 1E                         	dc.b	$1E
000000D3                            	smpsLoop            $00, $03, Continue_Loop01
000000D3 F7                       M 	dc.b	$f7
000000D4 0003                     M 	dc.b	index,loops
000000D6 0000                     M 	dc.w	((continue_loop01&$7fff)<<8)&$ff00+(continue_loop01&$7fff)>>8
000000D8 CA06 80CA 80C6 80C6 80CB+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $0C, nRst
000000E4 06CB 4E                    	dc.b	$06, nD6, $4E
000000E7                            
000000E7                            ; FM5 Data
000000E7                            Continue_FM5:
000000E7                            ; PSG1 Data
000000E7                            Continue_PSG1:
000000E7                            ; PSG2 Data
000000E7                            Continue_PSG2:
000000E7                            ; PSG3 Data
000000E7                            Continue_PSG3:
000000E7                            	smpsStop
000000E7 F2                       M 	dc.b	$f2
000000E8                            
000000E8                            ; DAC Data
000000E8                            Continue_DAC:
000000E8 8030                       	dc.b	nRst, $30
000000EA                            
000000EA                            Continue_Loop00:
000000EA 810C 82                    	dc.b	dKick, $0C, dSnare
000000ED                            	smpsLoop            $00, $0E, Continue_Loop00
000000ED F7                       M 	dc.b	$f7
000000EE 000E                     M 	dc.b	index,loops
000000F0 0000                     M 	dc.w	((continue_loop00&$7fff)<<8)&$ff00+(continue_loop00&$7fff)>>8
000000F2 810C 8206 810C             	dc.b	dKick, $0C, dSnare, $06, dKick, $0C
000000F8                            	smpsStop
000000F8 F2                       M 	dc.b	$f2
000000F9                            
000000F9                            Continue_Voices:
000000F9                            ;	Voice $00
000000F9                            ;	$3A
000000F9                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000000F9                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000000F9                            	smpsVcAlgorithm     $02
000000F9 =00000002                M vcalgorithm	set	val
000000F9                            	smpsVcFeedback      $07
000000F9 =00000007                M vcfeedback	set	val
000000F9                            	smpsVcUnusedBits    $00
000000F9 =00000000                M vcunusedbits	set	val
000000F9 =00000000                M vcd1r1unk	set	0
000000F9 =00000000                M vcd1r2unk	set	0
000000F9 =00000000                M vcd1r3unk	set	0
000000F9 =00000000                M vcd1r4unk	set	0
000000F9                            	smpsVcDetune        $00, $05, $00, $05
000000F9 =00000000                M vcdt1	set	op1
000000F9 =00000005                M vcdt2	set	op2
000000F9 =00000000                M vcdt3	set	op3
000000F9 =00000005                M vcdt4	set	op4
000000F9                            	smpsVcCoarseFreq    $02, $01, $08, $01
000000F9 =00000002                M vccf1	set	op1
000000F9 =00000001                M vccf2	set	op2
000000F9 =00000008                M vccf3	set	op3
000000F9 =00000001                M vccf4	set	op4
000000F9                            	smpsVcRateScale     $00, $00, $00, $00
000000F9 =00000000                M vcrs1	set	op1
000000F9 =00000000                M vcrs2	set	op2
000000F9 =00000000                M vcrs3	set	op3
000000F9 =00000000                M vcrs4	set	op4
000000F9                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000000F9 =00000010                M vcar1	set	op1
000000F9 =0000001E                M vcar2	set	op2
000000F9 =0000001E                M vcar3	set	op3
000000F9 =0000001E                M vcar4	set	op4
000000F9                            	smpsVcAmpMod        $00, $00, $00, $00
000000F9 =00000000                M vcam1	set	op1<<5
000000F9 =00000000                M vcam2	set	op2<<5
000000F9 =00000000                M vcam3	set	op3<<5
000000F9 =00000000                M vcam4	set	op4<<5
000000F9                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000000F9 =0000000F                M vcd1r1	set	op1
000000F9 =0000001F                M vcd1r2	set	op2
000000F9 =0000001F                M vcd1r3	set	op3
000000F9 =0000001F                M vcd1r4	set	op4
000000F9                            	smpsVcDecayRate2    $02, $00, $00, $00
000000F9 =00000002                M vcd2r1	set	op1
000000F9 =00000000                M vcd2r2	set	op2
000000F9 =00000000                M vcd2r3	set	op3
000000F9 =00000000                M vcd2r4	set	op4
000000F9                            	smpsVcDecayLevel    $01, $00, $00, $00
000000F9 =00000001                M vcdl1	set	op1
000000F9 =00000000                M vcdl2	set	op2
000000F9 =00000000                M vcdl3	set	op3
000000F9 =00000000                M vcdl4	set	op4
000000F9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000F9 =0000000F                M vcrr1	set	op1
000000F9 =0000000F                M vcrr2	set	op2
000000F9 =0000000F                M vcrr3	set	op3
000000F9 =0000000F                M vcrr4	set	op4
000000F9                            	smpsVcTotalLevel    $01, $22, $24, $18
000000F9 =00000001                M vctl1	set	op1
000000F9 =00000022                M vctl2	set	op2
000000F9 =00000024                M vctl3	set	op3
000000F9 =00000018                M vctl4	set	op4
000000F9 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000FA =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000000FA =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
000000FA =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000000FA =00000080                M vctlmask1	set	$80
000000FA 5151 0802                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000FE 1E1E 1E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000102 1F1F 1F0F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000106 0000 0002                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000010A 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000010E 1822 2481                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000112                            
00000112                            ;	Voice $01
00000112                            ;	$3B
00000112                            ;	$52, $31, $31, $51, 	$12, $14, $12, $14, 	$0D, $00, $0D, $02
00000112                            ;	$00, $00, $00, $01, 	$4F, $0F, $5F, $3F, 	$1E, $18, $2D, $80
00000112                            	smpsVcAlgorithm     $03
00000112 =00000003                M vcalgorithm	set	val
00000112                            	smpsVcFeedback      $07
00000112 =00000007                M vcfeedback	set	val
00000112                            	smpsVcUnusedBits    $00
00000112 =00000000                M vcunusedbits	set	val
00000112 =00000000                M vcd1r1unk	set	0
00000112 =00000000                M vcd1r2unk	set	0
00000112 =00000000                M vcd1r3unk	set	0
00000112 =00000000                M vcd1r4unk	set	0
00000112                            	smpsVcDetune        $05, $03, $03, $05
00000112 =00000005                M vcdt1	set	op1
00000112 =00000003                M vcdt2	set	op2
00000112 =00000003                M vcdt3	set	op3
00000112 =00000005                M vcdt4	set	op4
00000112                            	smpsVcCoarseFreq    $01, $01, $01, $02
00000112 =00000001                M vccf1	set	op1
00000112 =00000001                M vccf2	set	op2
00000112 =00000001                M vccf3	set	op3
00000112 =00000002                M vccf4	set	op4
00000112                            	smpsVcRateScale     $00, $00, $00, $00
00000112 =00000000                M vcrs1	set	op1
00000112 =00000000                M vcrs2	set	op2
00000112 =00000000                M vcrs3	set	op3
00000112 =00000000                M vcrs4	set	op4
00000112                            	smpsVcAttackRate    $14, $12, $14, $12
00000112 =00000014                M vcar1	set	op1
00000112 =00000012                M vcar2	set	op2
00000112 =00000014                M vcar3	set	op3
00000112 =00000012                M vcar4	set	op4
00000112                            	smpsVcAmpMod        $00, $00, $00, $00
00000112 =00000000                M vcam1	set	op1<<5
00000112 =00000000                M vcam2	set	op2<<5
00000112 =00000000                M vcam3	set	op3<<5
00000112 =00000000                M vcam4	set	op4<<5
00000112                            	smpsVcDecayRate1    $02, $0D, $00, $0D
00000112 =00000002                M vcd1r1	set	op1
00000112 =0000000D                M vcd1r2	set	op2
00000112 =00000000                M vcd1r3	set	op3
00000112 =0000000D                M vcd1r4	set	op4
00000112                            	smpsVcDecayRate2    $01, $00, $00, $00
00000112 =00000001                M vcd2r1	set	op1
00000112 =00000000                M vcd2r2	set	op2
00000112 =00000000                M vcd2r3	set	op3
00000112 =00000000                M vcd2r4	set	op4
00000112                            	smpsVcDecayLevel    $03, $05, $00, $04
00000112 =00000003                M vcdl1	set	op1
00000112 =00000005                M vcdl2	set	op2
00000112 =00000000                M vcdl3	set	op3
00000112 =00000004                M vcdl4	set	op4
00000112                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000112 =0000000F                M vcrr1	set	op1
00000112 =0000000F                M vcrr2	set	op2
00000112 =0000000F                M vcrr3	set	op3
00000112 =0000000F                M vcrr4	set	op4
00000112                            	smpsVcTotalLevel    $00, $2D, $18, $1E
00000112 =00000000                M vctl1	set	op1
00000112 =0000002D                M vctl2	set	op2
00000112 =00000018                M vctl3	set	op3
00000112 =0000001E                M vctl4	set	op4
00000112 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000113 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000113 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000113 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000113 =00000080                M vctlmask1	set	$80
00000113 5231 3151                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000117 1212 1414                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000011B 0D0D 0002                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000011F 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000123 4F5F 0F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000127 1E2D 1880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000012B                            
0000012B                            ;	Voice $02
0000012B                            ;	$3A
0000012B                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
0000012B                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
0000012B                            	smpsVcAlgorithm     $02
0000012B =00000002                M vcalgorithm	set	val
0000012B                            	smpsVcFeedback      $07
0000012B =00000007                M vcfeedback	set	val
0000012B                            	smpsVcUnusedBits    $00
0000012B =00000000                M vcunusedbits	set	val
0000012B =00000000                M vcd1r1unk	set	0
0000012B =00000000                M vcd1r2unk	set	0
0000012B =00000000                M vcd1r3unk	set	0
0000012B =00000000                M vcd1r4unk	set	0
0000012B                            	smpsVcDetune        $03, $01, $03, $06
0000012B =00000003                M vcdt1	set	op1
0000012B =00000001                M vcdt2	set	op2
0000012B =00000003                M vcdt3	set	op3
0000012B =00000006                M vcdt4	set	op4
0000012B                            	smpsVcCoarseFreq    $01, $04, $0C, $01
0000012B =00000001                M vccf1	set	op1
0000012B =00000004                M vccf2	set	op2
0000012B =0000000C                M vccf3	set	op3
0000012B =00000001                M vccf4	set	op4
0000012B                            	smpsVcRateScale     $03, $02, $03, $02
0000012B =00000003                M vcrs1	set	op1
0000012B =00000002                M vcrs2	set	op2
0000012B =00000003                M vcrs3	set	op3
0000012B =00000002                M vcrs4	set	op4
0000012B                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
0000012B =0000001A                M vcar1	set	op1
0000012B =0000001C                M vcar2	set	op2
0000012B =0000001B                M vcar3	set	op3
0000012B =0000001C                M vcar4	set	op4
0000012B                            	smpsVcAmpMod        $00, $00, $00, $00
0000012B =00000000                M vcam1	set	op1<<5
0000012B =00000000                M vcam2	set	op2<<5
0000012B =00000000                M vcam3	set	op3<<5
0000012B =00000000                M vcam4	set	op4<<5
0000012B                            	smpsVcDecayRate1    $03, $04, $09, $04
0000012B =00000003                M vcd1r1	set	op1
0000012B =00000004                M vcd1r2	set	op2
0000012B =00000009                M vcd1r3	set	op3
0000012B =00000004                M vcd1r4	set	op4
0000012B                            	smpsVcDecayRate2    $00, $03, $01, $03
0000012B =00000000                M vcd2r1	set	op1
0000012B =00000003                M vcd2r2	set	op2
0000012B =00000001                M vcd2r3	set	op3
0000012B =00000003                M vcd2r4	set	op4
0000012B                            	smpsVcDecayLevel    $0A, $00, $00, $01
0000012B =0000000A                M vcdl1	set	op1
0000012B =00000000                M vcdl2	set	op2
0000012B =00000000                M vcdl3	set	op3
0000012B =00000001                M vcdl4	set	op4
0000012B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000012B =0000000F                M vcrr1	set	op1
0000012B =0000000F                M vcrr2	set	op2
0000012B =0000000F                M vcrr3	set	op3
0000012B =0000000F                M vcrr4	set	op4
0000012B                            	smpsVcTotalLevel    $00, $31, $47, $21
0000012B =00000000                M vctl1	set	op1
0000012B =00000031                M vctl2	set	op2
0000012B =00000047                M vctl3	set	op3
0000012B =00000021                M vctl4	set	op4
0000012B 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000012C =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000012C =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000012C =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000012C =00000080                M vctlmask1	set	$80
0000012C 6114 3C31                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000130 9C9C DBDA                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000134 0404 0903                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000138 0303 0100                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000013C 1F0F 0FAF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000140 2131 4780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000144                            
00000144                            ;	Voice $03
00000144                            ;	$1C
00000144                            ;	$6F, $01, $21, $71, 	$9F, $DB, $9E, $5E, 	$0F, $07, $06, $07
00000144                            ;	$08, $0A, $0B, $00, 	$8F, $8F, $FF, $FF, 	$18, $8D, $26, $80
00000144                            	smpsVcAlgorithm     $04
00000144 =00000004                M vcalgorithm	set	val
00000144                            	smpsVcFeedback      $03
00000144 =00000003                M vcfeedback	set	val
00000144                            	smpsVcUnusedBits    $00
00000144 =00000000                M vcunusedbits	set	val
00000144 =00000000                M vcd1r1unk	set	0
00000144 =00000000                M vcd1r2unk	set	0
00000144 =00000000                M vcd1r3unk	set	0
00000144 =00000000                M vcd1r4unk	set	0
00000144                            	smpsVcDetune        $07, $02, $00, $06
00000144 =00000007                M vcdt1	set	op1
00000144 =00000002                M vcdt2	set	op2
00000144 =00000000                M vcdt3	set	op3
00000144 =00000006                M vcdt4	set	op4
00000144                            	smpsVcCoarseFreq    $01, $01, $01, $0F
00000144 =00000001                M vccf1	set	op1
00000144 =00000001                M vccf2	set	op2
00000144 =00000001                M vccf3	set	op3
00000144 =0000000F                M vccf4	set	op4
00000144                            	smpsVcRateScale     $01, $02, $03, $02
00000144 =00000001                M vcrs1	set	op1
00000144 =00000002                M vcrs2	set	op2
00000144 =00000003                M vcrs3	set	op3
00000144 =00000002                M vcrs4	set	op4
00000144                            	smpsVcAttackRate    $1E, $1E, $1B, $1F
00000144 =0000001E                M vcar1	set	op1
00000144 =0000001E                M vcar2	set	op2
00000144 =0000001B                M vcar3	set	op3
00000144 =0000001F                M vcar4	set	op4
00000144                            	smpsVcAmpMod        $00, $00, $00, $00
00000144 =00000000                M vcam1	set	op1<<5
00000144 =00000000                M vcam2	set	op2<<5
00000144 =00000000                M vcam3	set	op3<<5
00000144 =00000000                M vcam4	set	op4<<5
00000144                            	smpsVcDecayRate1    $07, $06, $07, $0F
00000144 =00000007                M vcd1r1	set	op1
00000144 =00000006                M vcd1r2	set	op2
00000144 =00000007                M vcd1r3	set	op3
00000144 =0000000F                M vcd1r4	set	op4
00000144                            	smpsVcDecayRate2    $00, $0B, $0A, $08
00000144 =00000000                M vcd2r1	set	op1
00000144 =0000000B                M vcd2r2	set	op2
00000144 =0000000A                M vcd2r3	set	op3
00000144 =00000008                M vcd2r4	set	op4
00000144                            	smpsVcDecayLevel    $0F, $0F, $08, $08
00000144 =0000000F                M vcdl1	set	op1
00000144 =0000000F                M vcdl2	set	op2
00000144 =00000008                M vcdl3	set	op3
00000144 =00000008                M vcdl4	set	op4
00000144                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000144 =0000000F                M vcrr1	set	op1
00000144 =0000000F                M vcrr2	set	op2
00000144 =0000000F                M vcrr3	set	op3
00000144 =0000000F                M vcrr4	set	op4
00000144                            	smpsVcTotalLevel    $00, $26, $0D, $18
00000144 =00000000                M vctl1	set	op1
00000144 =00000026                M vctl2	set	op2
00000144 =0000000D                M vctl3	set	op3
00000144 =00000018                M vctl4	set	op4
00000144 1C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000145 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000145 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000145 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000145 =00000080                M vctlmask1	set	$80
00000145 6F21 0171                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000149 9F9E DB5E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000014D 0F06 0707                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000151 080B 0A00                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000155 8FFF 8FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000159 1826 8D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000015D                            
0000015D                            		pops					
00000000                            
00000000                            		pushs
00000000                            Music2:	section	org($1380),file("sound/music/compressed/HPZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/HPZ.asm"	; include the actual music file for assembly
00000000                            HPZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     HPZ_Voices
00000000 0000                     M 	dc.w	((hpz_voices&$7fff)<<8)&$ff00+(hpz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $02, $E0
00000004 02                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$e0
00000005 E0                       M 	dc.b	$e0
00000006                            
00000006                            	smpsHeaderDAC       HPZ_DAC
00000006                          M 	checkedchannelpointer	hpz_dac
00000006 0000                     M 	dc.w	((hpz_dac&$7fff)<<8)&$ff00+(hpz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        HPZ_FM1,	$00, $06
0000000A                          M 	checkedchannelpointer	hpz_fm1
0000000A 0000                     M 	dc.w	((hpz_fm1&$7fff)<<8)&$ff00+(hpz_fm1&$7fff)>>8
0000000C 0006                     M 	dc.b	$00,$06
0000000E                            	smpsHeaderFM        HPZ_FM2,	$0C, $10
0000000E                          M 	checkedchannelpointer	hpz_fm2
0000000E 0000                     M 	dc.w	((hpz_fm2&$7fff)<<8)&$ff00+(hpz_fm2&$7fff)>>8
00000010 0C10                     M 	dc.b	$0c,$10
00000012                            	smpsHeaderFM        HPZ_FM3,	$00, $14
00000012                          M 	checkedchannelpointer	hpz_fm3
00000012 0000                     M 	dc.w	((hpz_fm3&$7fff)<<8)&$ff00+(hpz_fm3&$7fff)>>8
00000014 0014                     M 	dc.b	$00,$14
00000016                            	smpsHeaderFM        HPZ_FM4,	$00, $0E
00000016                          M 	checkedchannelpointer	hpz_fm4
00000016 0000                     M 	dc.w	((hpz_fm4&$7fff)<<8)&$ff00+(hpz_fm4&$7fff)>>8
00000018 000E                     M 	dc.b	$00,$0e
0000001A                            	smpsHeaderFM        HPZ_FM5,	$F4, $14
0000001A                          M 	checkedchannelpointer	hpz_fm5
0000001A 0000                     M 	dc.w	((hpz_fm5&$7fff)<<8)&$ff00+(hpz_fm5&$7fff)>>8
0000001C F414                     M 	dc.b	$f4,$14
0000001E                            	smpsHeaderPSG       HPZ_PSG1,	$E8, $06, $00, $00
0000001E                          M 	checkedchannelpointer	hpz_psg1
0000001E 0000                     M 	dc.w	((hpz_psg1&$7fff)<<8)&$ff00+(hpz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$e8
00000020 E8                       M 	dc.b	$e8
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       HPZ_PSG2,	$E8, $08, $00, fTone_08
00000024                          M 	checkedchannelpointer	hpz_psg2
00000024 0000                     M 	dc.w	((hpz_psg2&$7fff)<<8)&$ff00+(hpz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$e8
00000026 E8                       M 	dc.b	$e8
00000027 08                       M 	dc.b	$08
00000028 00                       M 	dc.b	$00
00000029 08                       M 	dc.b	ftone_08
0000002A                            	smpsHeaderPSG       HPZ_PSG3,	$F4, $08, $00, fTone_08
0000002A                          M 	checkedchannelpointer	hpz_psg3
0000002A 0000                     M 	dc.w	((hpz_psg3&$7fff)<<8)&$ff00+(hpz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$f4
0000002C F4                       M 	dc.b	$f4
0000002D 08                       M 	dc.b	$08
0000002E 00                       M 	dc.b	$00
0000002F 08                       M 	dc.b	ftone_08
00000030                            
00000030                            ; FM5 Data
00000030                            HPZ_FM5:
00000030                            	smpsPan             panRight, $00
00000030 E040                     M 	dc.b	$e0,direction+amsfms
00000032                            	smpsModSet          $18, $01, $FE, $04
00000032 F0                       M 	dc.b	$f0
00000033 1801 FE04                M 	dc.b	$18,$01,$fe,$04
00000037                            	smpsSetvoice        $03
00000037                          M 	smpsfmvoice	$03
00000037 EF03                     M 	dc.b	$ef,$03
00000039                            	smpsAlterNote       $02
00000039                          M 	smpsdetune	$02
00000039 E102                     M 	dc.b	$e1,$02
0000003B                            	smpsJump            HPZ_Loop02
0000003B F6                       M 	dc.b	$f6
0000003C 0000                     M 	dc.w	((hpz_loop02&$7fff)<<8)&$ff00+(hpz_loop02&$7fff)>>8
0000003E                            
0000003E                            ; FM4 Data
0000003E                            HPZ_FM4:
0000003E                            	smpsModSet          $0C, $01, $FD, $05
0000003E F0                       M 	dc.b	$f0
0000003F 0C01 FD05                M 	dc.b	$0c,$01,$fd,$05
00000043                            	smpsSetvoice        $00
00000043                          M 	smpsfmvoice	$00
00000043 EF00                     M 	dc.b	$ef,$00
00000045                            	smpsAlterNote       $02
00000045                          M 	smpsdetune	$02
00000045 E102                     M 	dc.b	$e1,$02
00000047 8006                       	dc.b	nRst, $06
00000049                            	smpsJump            HPZ_Jump02
00000049 F6                       M 	dc.b	$f6
0000004A 0000                     M 	dc.w	((hpz_jump02&$7fff)<<8)&$ff00+(hpz_jump02&$7fff)>>8
0000004C                            
0000004C                            ; PSG1 Data
0000004C                            HPZ_PSG1:
0000004C                            	smpsModSet          $0C, $01, $01, $04
0000004C F0                       M 	dc.b	$f0
0000004D 0C01 0104                M 	dc.b	$0c,$01,$01,$04
00000051                            	smpsJump            HPZ_Jump02
00000051 F6                       M 	dc.b	$f6
00000052 0000                     M 	dc.w	((hpz_jump02&$7fff)<<8)&$ff00+(hpz_jump02&$7fff)>>8
00000054                            
00000054                            ; PSG2 Data
00000054                            HPZ_PSG2:
00000054                            	smpsModSet          $0C, $01, $FF, $04
00000054 F0                       M 	dc.b	$f0
00000055 0C01 FF04                M 	dc.b	$0c,$01,$ff,$04
00000059                            	smpsAlterNote       $FF
00000059                          M 	smpsdetune	$ff
00000059 E1FF                     M 	dc.b	$e1,$ff
0000005B 8006                       	dc.b	nRst, $06
0000005D                            	smpsJump            HPZ_Jump02
0000005D F6                       M 	dc.b	$f6
0000005E 0000                     M 	dc.w	((hpz_jump02&$7fff)<<8)&$ff00+(hpz_jump02&$7fff)>>8
00000060                            
00000060                            ; FM1 Data
00000060                            HPZ_FM1:
00000060                            	smpsModSet          $0C, $01, $03, $05
00000060 F0                       M 	dc.b	$f0
00000061 0C01 0305                M 	dc.b	$0c,$01,$03,$05
00000065                            	smpsSetvoice        $00
00000065                          M 	smpsfmvoice	$00
00000065 EF00                     M 	dc.b	$ef,$00
00000067                            
00000067                            HPZ_Jump02:
00000067 8018                       	dc.b	nRst, $18
00000069                            
00000069                            HPZ_Loop04:
00000069 B606 B8BA 18B8 0CBA 18BD+  	dc.b	nF4, $06, nG4, nA4, $18, nG4, $0C, nA4, $18, nC5, $0C, nB4
00000075 BAB8 BA18 B606 B8BA 18B8+  	dc.b	nA4, nG4, nA4, $18, nF4, $06, nG4, nA4, $18, nG4, $0C, nA4
00000081 18BD 0CBF BCB8 BA18 B60C+  	dc.b	$18, nC5, $0C, nD5, nB4, nG4, nA4, $18, nF4, $0C, nG4, $18
0000008D B60C B818 BD0C BA24 B818+  	dc.b	nF4, $0C, nG4, $18, nC5, $0C, nA4, $24, nG4, $18, nF4, $0C
00000099 BA24 BCBD BC18             	dc.b	nA4, $24, nB4, nC5, nB4, $18
0000009F                            	smpsLoop            $01, $02, HPZ_Loop04
0000009F F7                       M 	dc.b	$f7
000000A0 0102                     M 	dc.b	index,loops
000000A2 0000                     M 	dc.w	((hpz_loop04&$7fff)<<8)&$ff00+(hpz_loop04&$7fff)>>8
000000A4 E7BC 0CC2 240C C4C2 C124+  	dc.b	smpsNoAttack, nB4, $0C, nF5, $24, $0C, nG5, nF5, nE5, $24, nCs5, $18
000000B0                            	smpsJump            HPZ_Loop04
000000B0 F6                       M 	dc.b	$f6
000000B1 0000                     M 	dc.w	((hpz_loop04&$7fff)<<8)&$ff00+(hpz_loop04&$7fff)>>8
000000B3                            
000000B3                            ; FM2 Data
000000B3                            HPZ_FM2:
000000B3                            	smpsSetvoice        $01
000000B3                          M 	smpsfmvoice	$01
000000B3 EF01                     M 	dc.b	$ef,$01
000000B5                            
000000B5                            HPZ_Loop03:
000000B5 8018 960C 9B06 8012 960C   	dc.b	nRst, $18, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
000000BF                            
000000BF                            HPZ_Jump01:
000000BF 9B06 8012 960C 9406 8012+  	dc.b	nD2, $06, nRst, $12, nA1, $0C, nG1, $06, nRst, $12, nG1, $0C
000000CB 9B06 8012 960C 9B06 8012+  	dc.b	nD2, $06, nRst, $12, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
000000D7 9B06 8012 960C 9406 8012+  	dc.b	nD2, $06, nRst, $12, nA1, $0C, nG1, $06, nRst, $12, nG1, $0C
000000E3 9B06 8012 9B0C 9406 8012+  	dc.b	nD2, $06, nRst, $12, nD2, $0C, nG1, $06, nRst, $12, nD2, $0C
000000EF 9406 8012 940C 9206 8012+  	dc.b	nG1, $06, nRst, $12, nG1, $0C, nF1, $06, nRst, $12, nC2, $0C
000000FB 9206 8012 990C 9B06 8012+  	dc.b	nF1, $06, nRst, $12, nC2, $0C, nD2, $06, nRst, $12, nA1, $0C
00000107 9B06 8012 960C 9B06 8012+  	dc.b	nD2, $06, nRst, $12, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
00000113                            	smpsLoop            $00, $02, HPZ_Loop03
00000113 F7                       M 	dc.b	$f7
00000114 0002                     M 	dc.b	index,loops
00000116 0000                     M 	dc.w	((hpz_loop03&$7fff)<<8)&$ff00+(hpz_loop03&$7fff)>>8
00000118 9B06 8012 960C 9718 0C18+  	dc.b	nD2, $06, nRst, $12, nA1, $0C, nBb1, $18, $0C, $18, $0C, nC2
00000124 180C 9A18 960C 9B06 8012+  	dc.b	$18, $0C, nCs2, $18, nA1, $0C, nD2, $06, nRst, $12, nA1, $0C
00000130                            	smpsJump            HPZ_Jump01
00000130 F6                       M 	dc.b	$f6
00000131 0000                     M 	dc.w	((hpz_jump01&$7fff)<<8)&$ff00+(hpz_jump01&$7fff)>>8
00000133                            
00000133                            ; FM3 Data
00000133                            HPZ_FM3:
00000133                            	smpsPan             panLeft, $00
00000133 E080                     M 	dc.b	$e0,direction+amsfms
00000135                            	smpsAlterPitch      $F4
00000135                          M 	smpschangetransposition	$f4
00000135 E9F4                     M 	dc.b	$e9,$f4
00000137                            	smpsModSet          $18, $01, $02, $04
00000137 F0                       M 	dc.b	$f0
00000138 1801 0204                M 	dc.b	$18,$01,$02,$04
0000013C                            	smpsSetvoice        $02
0000013C                          M 	smpsfmvoice	$02
0000013C EF02                     M 	dc.b	$ef,$02
0000013E                            
0000013E                            HPZ_Loop02:
0000013E B30C BAB6                  	dc.b	nD4, $0C, nA4, nF4
00000142                            
00000142                            HPZ_Jump00:
00000142 BD24 E7BD BCC1 18BA 0CBD+  	dc.b	nC5, $24, smpsNoAttack, nC5, nB4, nE5, $18, nA4, $0C, nC5, $24, smpsNoAttack
0000014E BDBC BF80 0CB8 BABC 18BA+  	dc.b	nC5, nB4, nD5, nRst, $0C, nG4, nA4, nB4, $18, nA4, $0C, nRst
0000015A BABC BDBC BDBF 24E7 18C1+  	dc.b	nA4, nB4, nC5, nB4, nC5, nD5, $24, smpsNoAttack, $18, nE5, $0C, nD5
00000166 24                         	dc.b	$24
00000167                            	smpsLoop            $00, $02, HPZ_Loop02
00000167 F7                       M 	dc.b	$f7
00000168 0002                     M 	dc.b	index,loops
0000016A 0000                     M 	dc.w	((hpz_loop02&$7fff)<<8)&$ff00+(hpz_loop02&$7fff)>>8
0000016C                            	smpsAlterPitch      $0C
0000016C                          M 	smpschangetransposition	$0c
0000016C E90C                     M 	dc.b	$e9,$0c
0000016E E7B3 24B3 AF0C B3BA B824   	dc.b	smpsNoAttack, nD4, $24, nD4, nBb3, $0C, nD4, nA4, nG4, $24
00000178                            	smpsAlterPitch      $F4
00000178                          M 	smpschangetransposition	$f4
00000178 E9F4                     M 	dc.b	$e9,$f4
0000017A B50C BAB6                  	dc.b	nE4, $0C, nA4, nF4
0000017E                            	smpsJump            HPZ_Jump00
0000017E F6                       M 	dc.b	$f6
0000017F 0000                     M 	dc.w	((hpz_jump00&$7fff)<<8)&$ff00+(hpz_jump00&$7fff)>>8
00000181                            
00000181                            ; PSG3 Data
00000181                            HPZ_PSG3:
00000181 8024                       	dc.b	nRst, $24
00000183                            	smpsNoteFill        $10
00000183 E810                     M 	dc.b	$e8,$10
00000185                            
00000185                            HPZ_Loop05:
00000185                            	smpsAlterVol        $FE
00000185 E6FE                     M 	dc.b	$e6,$fe
00000187 B606                       	dc.b	nF4, $06
00000189                            	smpsAlterVol        $02
00000189 E602                     M 	dc.b	$e6,$02
0000018B BDBD B6BA B6               	dc.b	nC5, nC5, nF4, nA4, nF4
00000190                            	smpsAlterVol        $FE
00000190 E6FE                     M 	dc.b	$e6,$fe
00000192 BC                         	dc.b	nB4
00000193                            	smpsAlterVol        $02
00000193 E602                     M 	dc.b	$e6,$02
00000195 B6BD B6BC B6               	dc.b	nF4, nC5, nF4, nB4, nF4
0000019A                            	smpsLoop            $01, $10, HPZ_Loop05
0000019A F7                       M 	dc.b	$f7
0000019B 0110                     M 	dc.b	index,loops
0000019D 0000                     M 	dc.w	((hpz_loop05&$7fff)<<8)&$ff00+(hpz_loop05&$7fff)>>8
0000019F                            
0000019F                            HPZ_Loop06:
0000019F C606 C2C1 BF               	dc.b	nA5, $06, nF5, nE5, nD5
000001A4                            	smpsLoop            $01, $04, HPZ_Loop06
000001A4 F7                       M 	dc.b	$f7
000001A5 0104                     M 	dc.b	index,loops
000001A7 0000                     M 	dc.w	((hpz_loop06&$7fff)<<8)&$ff00+(hpz_loop06&$7fff)>>8
000001A9 C606 C2C1 BEC6 C4C1 BE     	dc.b	nA5, $06, nF5, nE5, nCs5, nA5, nG5, nE5, nCs5
000001B2                            	smpsJump            HPZ_Loop05
000001B2 F6                       M 	dc.b	$f6
000001B3 0000                     M 	dc.w	((hpz_loop05&$7fff)<<8)&$ff00+(hpz_loop05&$7fff)>>8
000001B5                            
000001B5                            HPZ_Call00:
000001B5 8112 8206 8E0C 810C 8212+  	dc.b	dKick, $12, dSnare, $06, dFloorTom, $0C, dKick, $0C, dSnare, $12, dFloorTom, $06
000001C1                            	smpsReturn
000001C1 E3                       M 	dc.b	$e3
000001C2                            
000001C2                            ; DAC Data
000001C2                            HPZ_DAC:
000001C2 8206 8C0C 8D06 8E0C        	dc.b	dSnare, $06, dMidTom, $0C, dLowTom, $06, dFloorTom, $0C
000001CA                            
000001CA                            HPZ_Loop00:
000001CA                            	smpsCall            HPZ_Call00
000001CA F8                       M 	dc.b	$f8
000001CB 0000                     M 	dc.w	((hpz_call00&$7fff)<<8)&$ff00+(hpz_call00&$7fff)>>8
000001CD                            	smpsLoop            $00, $07, HPZ_Loop00
000001CD F7                       M 	dc.b	$f7
000001CE 0007                     M 	dc.b	index,loops
000001D0 0000                     M 	dc.w	((hpz_loop00&$7fff)<<8)&$ff00+(hpz_loop00&$7fff)>>8
000001D2 8112 8206 8E0C 8106 8C0C+  	dc.b	dKick, $12, dSnare, $06, dFloorTom, $0C, dKick, $06, dMidTom, $0C, dLowTom, $06
000001DE 810C                       	dc.b	dKick, $0C
000001E0                            
000001E0                            HPZ_Loop01:
000001E0                            	smpsCall            HPZ_Call00
000001E0 F8                       M 	dc.b	$f8
000001E1 0000                     M 	dc.w	((hpz_call00&$7fff)<<8)&$ff00+(hpz_call00&$7fff)>>8
000001E3                            	smpsLoop            $00, $08, HPZ_Loop01
000001E3 F7                       M 	dc.b	$f7
000001E4 0008                     M 	dc.b	index,loops
000001E6 0000                     M 	dc.w	((hpz_loop01&$7fff)<<8)&$ff00+(hpz_loop01&$7fff)>>8
000001E8 8112 8206 810C 810C 8182+  	dc.b	dKick, $12, dSnare, $06, dKick, $0C, dKick, $0C, dKick, dSnare, dKick, $12
000001F4 8206 810C                  	dc.b	dSnare, $06, dKick, $0C
000001F8                            	smpsJump            HPZ_DAC
000001F8 F6                       M 	dc.b	$f6
000001F9 0000                     M 	dc.w	((hpz_dac&$7fff)<<8)&$ff00+(hpz_dac&$7fff)>>8
000001FB                            
000001FB                            HPZ_Voices:
000001FB                            ;	Voice $00
000001FB                            ;	$3B
000001FB                            ;	$01, $02, $13, $02, 	$5D, $5D, $5D, $4A, 	$00, $00, $00, $00
000001FB                            ;	$00, $00, $00, $00, 	$05, $05, $04, $0A, 	$1E, $1E, $28, $09
000001FB                            	smpsVcAlgorithm     $03
000001FB =00000003                M vcalgorithm	set	val
000001FB                            	smpsVcFeedback      $07
000001FB =00000007                M vcfeedback	set	val
000001FB                            	smpsVcUnusedBits    $00
000001FB =00000000                M vcunusedbits	set	val
000001FB =00000000                M vcd1r1unk	set	0
000001FB =00000000                M vcd1r2unk	set	0
000001FB =00000000                M vcd1r3unk	set	0
000001FB =00000000                M vcd1r4unk	set	0
000001FB                            	smpsVcDetune        $00, $01, $00, $00
000001FB =00000000                M vcdt1	set	op1
000001FB =00000001                M vcdt2	set	op2
000001FB =00000000                M vcdt3	set	op3
000001FB =00000000                M vcdt4	set	op4
000001FB                            	smpsVcCoarseFreq    $02, $03, $02, $01
000001FB =00000002                M vccf1	set	op1
000001FB =00000003                M vccf2	set	op2
000001FB =00000002                M vccf3	set	op3
000001FB =00000001                M vccf4	set	op4
000001FB                            	smpsVcRateScale     $01, $01, $01, $01
000001FB =00000001                M vcrs1	set	op1
000001FB =00000001                M vcrs2	set	op2
000001FB =00000001                M vcrs3	set	op3
000001FB =00000001                M vcrs4	set	op4
000001FB                            	smpsVcAttackRate    $0A, $1D, $1D, $1D
000001FB =0000000A                M vcar1	set	op1
000001FB =0000001D                M vcar2	set	op2
000001FB =0000001D                M vcar3	set	op3
000001FB =0000001D                M vcar4	set	op4
000001FB                            	smpsVcAmpMod        $00, $00, $00, $00
000001FB =00000000                M vcam1	set	op1<<7
000001FB =00000000                M vcam2	set	op2<<7
000001FB =00000000                M vcam3	set	op3<<7
000001FB =00000000                M vcam4	set	op4<<7
000001FB                            	smpsVcDecayRate1    $00, $00, $00, $00
000001FB =00000000                M vcd1r1	set	op1
000001FB =00000000                M vcd1r2	set	op2
000001FB =00000000                M vcd1r3	set	op3
000001FB =00000000                M vcd1r4	set	op4
000001FB                            	smpsVcDecayRate2    $00, $00, $00, $00
000001FB =00000000                M vcd2r1	set	op1
000001FB =00000000                M vcd2r2	set	op2
000001FB =00000000                M vcd2r3	set	op3
000001FB =00000000                M vcd2r4	set	op4
000001FB                            	smpsVcDecayLevel    $00, $00, $00, $00
000001FB =00000000                M vcdl1	set	op1
000001FB =00000000                M vcdl2	set	op2
000001FB =00000000                M vcdl3	set	op3
000001FB =00000000                M vcdl4	set	op4
000001FB                            	smpsVcReleaseRate   $0A, $04, $05, $05
000001FB =0000000A                M vcrr1	set	op1
000001FB =00000004                M vcrr2	set	op2
000001FB =00000005                M vcrr3	set	op3
000001FB =00000005                M vcrr4	set	op4
000001FB                            	smpsVcTotalLevel    $09, $28, $1E, $1E
000001FB =00000009                M vctl1	set	op1
000001FB =00000028                M vctl2	set	op2
000001FB =0000001E                M vctl3	set	op3
000001FB =0000001E                M vctl4	set	op4
000001FB 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001FC =00000000                M vctlmask4	set	0
000001FC =00000000                M vctlmask3	set	0
000001FC =00000000                M vctlmask2	set	0
000001FC =00000000                M vctlmask1	set	0
000001FC 0113 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000200 5D5D 5D4A                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000204 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000208 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000020C 0504 050A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000210 1E28 1E09                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000214                            
00000214                            ;	Voice $01
00000214                            ;	$3A
00000214                            ;	$22, $68, $71, $32, 	$12, $16, $14, $0C, 	$0A, $06, $0A, $04
00000214                            ;	$00, $00, $00, $00, 	$16, $26, $56, $06, 	$1F, $22, $1C, $00
00000214                            	smpsVcAlgorithm     $02
00000214 =00000002                M vcalgorithm	set	val
00000214                            	smpsVcFeedback      $07
00000214 =00000007                M vcfeedback	set	val
00000214                            	smpsVcUnusedBits    $00
00000214 =00000000                M vcunusedbits	set	val
00000214 =00000000                M vcd1r1unk	set	0
00000214 =00000000                M vcd1r2unk	set	0
00000214 =00000000                M vcd1r3unk	set	0
00000214 =00000000                M vcd1r4unk	set	0
00000214                            	smpsVcDetune        $03, $07, $06, $02
00000214 =00000003                M vcdt1	set	op1
00000214 =00000007                M vcdt2	set	op2
00000214 =00000006                M vcdt3	set	op3
00000214 =00000002                M vcdt4	set	op4
00000214                            	smpsVcCoarseFreq    $02, $01, $08, $02
00000214 =00000002                M vccf1	set	op1
00000214 =00000001                M vccf2	set	op2
00000214 =00000008                M vccf3	set	op3
00000214 =00000002                M vccf4	set	op4
00000214                            	smpsVcRateScale     $00, $00, $00, $00
00000214 =00000000                M vcrs1	set	op1
00000214 =00000000                M vcrs2	set	op2
00000214 =00000000                M vcrs3	set	op3
00000214 =00000000                M vcrs4	set	op4
00000214                            	smpsVcAttackRate    $0C, $14, $16, $12
00000214 =0000000C                M vcar1	set	op1
00000214 =00000014                M vcar2	set	op2
00000214 =00000016                M vcar3	set	op3
00000214 =00000012                M vcar4	set	op4
00000214                            	smpsVcAmpMod        $00, $00, $00, $00
00000214 =00000000                M vcam1	set	op1<<7
00000214 =00000000                M vcam2	set	op2<<7
00000214 =00000000                M vcam3	set	op3<<7
00000214 =00000000                M vcam4	set	op4<<7
00000214                            	smpsVcDecayRate1    $04, $0A, $06, $0A
00000214 =00000004                M vcd1r1	set	op1
00000214 =0000000A                M vcd1r2	set	op2
00000214 =00000006                M vcd1r3	set	op3
00000214 =0000000A                M vcd1r4	set	op4
00000214                            	smpsVcDecayRate2    $00, $00, $00, $00
00000214 =00000000                M vcd2r1	set	op1
00000214 =00000000                M vcd2r2	set	op2
00000214 =00000000                M vcd2r3	set	op3
00000214 =00000000                M vcd2r4	set	op4
00000214                            	smpsVcDecayLevel    $00, $05, $02, $01
00000214 =00000000                M vcdl1	set	op1
00000214 =00000005                M vcdl2	set	op2
00000214 =00000002                M vcdl3	set	op3
00000214 =00000001                M vcdl4	set	op4
00000214                            	smpsVcReleaseRate   $06, $06, $06, $06
00000214 =00000006                M vcrr1	set	op1
00000214 =00000006                M vcrr2	set	op2
00000214 =00000006                M vcrr3	set	op3
00000214 =00000006                M vcrr4	set	op4
00000214                            	smpsVcTotalLevel    $00, $1C, $22, $1F
00000214 =00000000                M vctl1	set	op1
00000214 =0000001C                M vctl2	set	op2
00000214 =00000022                M vctl3	set	op3
00000214 =0000001F                M vctl4	set	op4
00000214 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000215 =00000000                M vctlmask4	set	0
00000215 =00000000                M vctlmask3	set	0
00000215 =00000000                M vctlmask2	set	0
00000215 =00000000                M vctlmask1	set	0
00000215 2271 6832                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000219 1214 160C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000021D 0A0A 0604                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000221 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000225 1656 2606                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000229 1F1C 2200                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000022D                            
0000022D                            ;	Voice $02
0000022D                            ;	$3B
0000022D                            ;	$32, $32, $32, $72, 	$4F, $18, $1A, $11, 	$0E, $16, $0B, $00
0000022D                            ;	$04, $00, $00, $00, 	$50, $10, $00, $0A, 	$1B, $1F, $1E, $00
0000022D                            	smpsVcAlgorithm     $03
0000022D =00000003                M vcalgorithm	set	val
0000022D                            	smpsVcFeedback      $07
0000022D =00000007                M vcfeedback	set	val
0000022D                            	smpsVcUnusedBits    $00
0000022D =00000000                M vcunusedbits	set	val
0000022D =00000000                M vcd1r1unk	set	0
0000022D =00000000                M vcd1r2unk	set	0
0000022D =00000000                M vcd1r3unk	set	0
0000022D =00000000                M vcd1r4unk	set	0
0000022D                            	smpsVcDetune        $07, $03, $03, $03
0000022D =00000007                M vcdt1	set	op1
0000022D =00000003                M vcdt2	set	op2
0000022D =00000003                M vcdt3	set	op3
0000022D =00000003                M vcdt4	set	op4
0000022D                            	smpsVcCoarseFreq    $02, $02, $02, $02
0000022D =00000002                M vccf1	set	op1
0000022D =00000002                M vccf2	set	op2
0000022D =00000002                M vccf3	set	op3
0000022D =00000002                M vccf4	set	op4
0000022D                            	smpsVcRateScale     $00, $00, $00, $01
0000022D =00000000                M vcrs1	set	op1
0000022D =00000000                M vcrs2	set	op2
0000022D =00000000                M vcrs3	set	op3
0000022D =00000001                M vcrs4	set	op4
0000022D                            	smpsVcAttackRate    $11, $1A, $18, $0F
0000022D =00000011                M vcar1	set	op1
0000022D =0000001A                M vcar2	set	op2
0000022D =00000018                M vcar3	set	op3
0000022D =0000000F                M vcar4	set	op4
0000022D                            	smpsVcAmpMod        $00, $00, $00, $00
0000022D =00000000                M vcam1	set	op1<<7
0000022D =00000000                M vcam2	set	op2<<7
0000022D =00000000                M vcam3	set	op3<<7
0000022D =00000000                M vcam4	set	op4<<7
0000022D                            	smpsVcDecayRate1    $00, $0B, $16, $0E
0000022D =00000000                M vcd1r1	set	op1
0000022D =0000000B                M vcd1r2	set	op2
0000022D =00000016                M vcd1r3	set	op3
0000022D =0000000E                M vcd1r4	set	op4
0000022D                            	smpsVcDecayRate2    $00, $00, $00, $04
0000022D =00000000                M vcd2r1	set	op1
0000022D =00000000                M vcd2r2	set	op2
0000022D =00000000                M vcd2r3	set	op3
0000022D =00000004                M vcd2r4	set	op4
0000022D                            	smpsVcDecayLevel    $00, $00, $01, $05
0000022D =00000000                M vcdl1	set	op1
0000022D =00000000                M vcdl2	set	op2
0000022D =00000001                M vcdl3	set	op3
0000022D =00000005                M vcdl4	set	op4
0000022D                            	smpsVcReleaseRate   $0A, $00, $00, $00
0000022D =0000000A                M vcrr1	set	op1
0000022D =00000000                M vcrr2	set	op2
0000022D =00000000                M vcrr3	set	op3
0000022D =00000000                M vcrr4	set	op4
0000022D                            	smpsVcTotalLevel    $00, $1E, $1F, $1B
0000022D =00000000                M vctl1	set	op1
0000022D =0000001E                M vctl2	set	op2
0000022D =0000001F                M vctl3	set	op3
0000022D =0000001B                M vctl4	set	op4
0000022D 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000022E =00000000                M vctlmask4	set	0
0000022E =00000000                M vctlmask3	set	0
0000022E =00000000                M vctlmask2	set	0
0000022E =00000000                M vctlmask1	set	0
0000022E 3232 3272                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000232 4F1A 1811                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000236 0E0B 1600                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000023A 0400 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000023E 5000 100A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000242 1B1E 1F00                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000246                            
00000246                            ;	Voice $03
00000246                            ;	$38
00000246                            ;	$32, $52, $32, $72, 	$17, $18, $1A, $11, 	$17, $16, $0B, $00
00000246                            ;	$00, $00, $00, $00, 	$10, $10, $00, $0A, 	$20, $11, $21, $00
00000246                            	smpsVcAlgorithm     $00
00000246 =00000000                M vcalgorithm	set	val
00000246                            	smpsVcFeedback      $07
00000246 =00000007                M vcfeedback	set	val
00000246                            	smpsVcUnusedBits    $00
00000246 =00000000                M vcunusedbits	set	val
00000246 =00000000                M vcd1r1unk	set	0
00000246 =00000000                M vcd1r2unk	set	0
00000246 =00000000                M vcd1r3unk	set	0
00000246 =00000000                M vcd1r4unk	set	0
00000246                            	smpsVcDetune        $07, $03, $05, $03
00000246 =00000007                M vcdt1	set	op1
00000246 =00000003                M vcdt2	set	op2
00000246 =00000005                M vcdt3	set	op3
00000246 =00000003                M vcdt4	set	op4
00000246                            	smpsVcCoarseFreq    $02, $02, $02, $02
00000246 =00000002                M vccf1	set	op1
00000246 =00000002                M vccf2	set	op2
00000246 =00000002                M vccf3	set	op3
00000246 =00000002                M vccf4	set	op4
00000246                            	smpsVcRateScale     $00, $00, $00, $00
00000246 =00000000                M vcrs1	set	op1
00000246 =00000000                M vcrs2	set	op2
00000246 =00000000                M vcrs3	set	op3
00000246 =00000000                M vcrs4	set	op4
00000246                            	smpsVcAttackRate    $11, $1A, $18, $17
00000246 =00000011                M vcar1	set	op1
00000246 =0000001A                M vcar2	set	op2
00000246 =00000018                M vcar3	set	op3
00000246 =00000017                M vcar4	set	op4
00000246                            	smpsVcAmpMod        $00, $00, $00, $00
00000246 =00000000                M vcam1	set	op1<<7
00000246 =00000000                M vcam2	set	op2<<7
00000246 =00000000                M vcam3	set	op3<<7
00000246 =00000000                M vcam4	set	op4<<7
00000246                            	smpsVcDecayRate1    $00, $0B, $16, $17
00000246 =00000000                M vcd1r1	set	op1
00000246 =0000000B                M vcd1r2	set	op2
00000246 =00000016                M vcd1r3	set	op3
00000246 =00000017                M vcd1r4	set	op4
00000246                            	smpsVcDecayRate2    $00, $00, $00, $00
00000246 =00000000                M vcd2r1	set	op1
00000246 =00000000                M vcd2r2	set	op2
00000246 =00000000                M vcd2r3	set	op3
00000246 =00000000                M vcd2r4	set	op4
00000246                            	smpsVcDecayLevel    $00, $00, $01, $01
00000246 =00000000                M vcdl1	set	op1
00000246 =00000000                M vcdl2	set	op2
00000246 =00000001                M vcdl3	set	op3
00000246 =00000001                M vcdl4	set	op4
00000246                            	smpsVcReleaseRate   $0A, $00, $00, $00
00000246 =0000000A                M vcrr1	set	op1
00000246 =00000000                M vcrr2	set	op2
00000246 =00000000                M vcrr3	set	op3
00000246 =00000000                M vcrr4	set	op4
00000246                            	smpsVcTotalLevel    $00, $21, $11, $20
00000246 =00000000                M vctl1	set	op1
00000246 =00000021                M vctl2	set	op2
00000246 =00000011                M vctl3	set	op3
00000246 =00000020                M vctl4	set	op4
00000246 38                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000247 =00000000                M vctlmask4	set	0
00000247 =00000000                M vctlmask3	set	0
00000247 =00000000                M vctlmask2	set	0
00000247 =00000000                M vctlmask1	set	0
00000247 3232 5272                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000024B 171A 1811                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000024F 170B 1600                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000253 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000257 1000 100A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000025B 2021 1100                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000025F                            
0000025F                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music3:	section	org($1380),file("sound/music/compressed/Drowning.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/Drowning.asm"	; include the actual music file for assembly
00000000                            Drowning_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000000                M sourcesmps2asm	set	0
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     Drowning_Voices
00000000 0000                     M 	dc.w	((drowning_voices&$7fff)<<8)&$ff00+(drowning_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $00
00000002 0600                     M 	dc.b	$06,$00
00000004                            	smpsHeaderTempo     $01, $80
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$80
00000005 80                       M 	dc.b	$80
00000006                            
00000006                            	smpsHeaderDAC       Drowning_DAC
00000006                          M 	checkedchannelpointer	drowning_dac
00000006 0000                     M 	dc.w	((drowning_dac&$7fff)<<8)&$ff00+(drowning_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Drowning_FM1,	$0C, $08
0000000A                          M 	checkedchannelpointer	drowning_fm1
0000000A 0000                     M 	dc.w	((drowning_fm1&$7fff)<<8)&$ff00+(drowning_fm1&$7fff)>>8
0000000C 0C08                     M 	dc.b	$0c,$08
0000000E                            	smpsHeaderFM        Drowning_FM2,	$E8, $0E
0000000E                          M 	checkedchannelpointer	drowning_fm2
0000000E 0000                     M 	dc.w	((drowning_fm2&$7fff)<<8)&$ff00+(drowning_fm2&$7fff)>>8
00000010 E80E                     M 	dc.b	$e8,$0e
00000012                            	smpsHeaderFM        Drowning_FM3,	$F4, $40
00000012                          M 	checkedchannelpointer	drowning_fm3
00000012 0000                     M 	dc.w	((drowning_fm3&$7fff)<<8)&$ff00+(drowning_fm3&$7fff)>>8
00000014 F440                     M 	dc.b	$f4,$40
00000016                            	smpsHeaderFM        Drowning_FM4,	$06, $11
00000016                          M 	checkedchannelpointer	drowning_fm4
00000016 0000                     M 	dc.w	((drowning_fm4&$7fff)<<8)&$ff00+(drowning_fm4&$7fff)>>8
00000018 0611                     M 	dc.b	$06,$11
0000001A                            	smpsHeaderFM        Drowning_FM5,	$0C, $19
0000001A                          M 	checkedchannelpointer	drowning_fm5
0000001A 0000                     M 	dc.w	((drowning_fm5&$7fff)<<8)&$ff00+(drowning_fm5&$7fff)>>8
0000001C 0C19                     M 	dc.b	$0c,$19
0000001E                            
0000001E                            ; FM1 Data
0000001E                            Drowning_FM1:
0000001E                            	smpsSetvoice        $00
0000001E                          M 	smpsfmvoice	$00
0000001E EF00                     M 	dc.b	$ef,$00
00000020                            	smpsNop             $01
00000020 E201                     M 	dc.b	$e2,$01
00000022                            	smpsNoteFill        $05
00000022 E805                     M 	dc.b	$e8,$05
00000024                            	smpsCall            Drowning_Call01
00000024 F8                       M 	dc.b	$f8
00000025 0000                     M 	dc.w	((drowning_call01&$7fff)<<8)&$ff00+(drowning_call01&$7fff)>>8
00000027                            	smpsSetTempoMod     $AB
00000027 EA                       M 	dc.b	$ea
00000028                          M 	convertmaintempomod	$ab
00000028 AB                       M 	dc.b	$ab
00000029                            	smpsCall            Drowning_Call01
00000029 F8                       M 	dc.b	$f8
0000002A 0000                     M 	dc.w	((drowning_call01&$7fff)<<8)&$ff00+(drowning_call01&$7fff)>>8
0000002C                            	smpsSetTempoMod     $C0
0000002C EA                       M 	dc.b	$ea
0000002D                          M 	convertmaintempomod	$c0
0000002D C0                       M 	dc.b	$c0
0000002E                            	smpsCall            Drowning_Call01
0000002E F8                       M 	dc.b	$f8
0000002F 0000                     M 	dc.w	((drowning_call01&$7fff)<<8)&$ff00+(drowning_call01&$7fff)>>8
00000031                            	smpsSetTempoMod     $D6
00000031 EA                       M 	dc.b	$ea
00000032                          M 	convertmaintempomod	$d6
00000032 D6                       M 	dc.b	$d6
00000033                            	smpsCall            Drowning_Call01
00000033 F8                       M 	dc.b	$f8
00000034 0000                     M 	dc.w	((drowning_call01&$7fff)<<8)&$ff00+(drowning_call01&$7fff)>>8
00000036                            	smpsSetTempoMod     $E7
00000036 EA                       M 	dc.b	$ea
00000037                          M 	convertmaintempomod	$e7
00000037 E7                       M 	dc.b	$e7
00000038                            	smpsCall            Drowning_Call01
00000038 F8                       M 	dc.b	$f8
00000039 0000                     M 	dc.w	((drowning_call01&$7fff)<<8)&$ff00+(drowning_call01&$7fff)>>8
0000003B BD06                       	dc.b	nC5, $06
0000003D                            	smpsNop             $01
0000003D E201                     M 	dc.b	$e2,$01
0000003F                            	smpsStop
0000003F F2                       M 	dc.b	$f2
00000040                            
00000040                            ; FM2 Data
00000040                            Drowning_FM2:
00000040                            	smpsSetvoice        $01
00000040                          M 	smpsfmvoice	$01
00000040 EF01                     M 	dc.b	$ef,$01
00000042                            
00000042                            Drowning_Loop03:
00000042                            	smpsAlterVol        $FF
00000042 E6FF                     M 	dc.b	$e6,$ff
00000044                            	smpsCall            Drowning_Call00
00000044 F8                       M 	dc.b	$f8
00000045 0000                     M 	dc.w	((drowning_call00&$7fff)<<8)&$ff00+(drowning_call00&$7fff)>>8
00000047                            	smpsLoop            $00, $0A, Drowning_Loop03
00000047 F7                       M 	dc.b	$f7
00000048 000A                     M 	dc.b	index,loops
0000004A 0000                     M 	dc.w	((drowning_loop03&$7fff)<<8)&$ff00+(drowning_loop03&$7fff)>>8
0000004C BD06                       	dc.b	nC5, $06
0000004E                            	smpsStop
0000004E F2                       M 	dc.b	$f2
0000004F                            
0000004F                            ; FM3 Data
0000004F                            Drowning_FM3:
0000004F                            	smpsSetvoice        $02
0000004F                          M 	smpsfmvoice	$02
0000004F EF02                     M 	dc.b	$ef,$02
00000051                            
00000051                            Drowning_Loop02:
00000051                            	smpsAlterVol        $FE
00000051 E6FE                     M 	dc.b	$e6,$fe
00000053 E7C9 02E7 CAE7 C9E7 CAE7+  	dc.b	smpsNoAttack, nC6, $02, smpsNoAttack, nCs6, smpsNoAttack, nC6, smpsNoAttack, nCs6, smpsNoAttack, nC6, smpsNoAttack
0000005F CAE7 C9E7 CA               	dc.b	nCs6, smpsNoAttack, nC6, smpsNoAttack, nCs6
00000064                            	smpsLoop            $00, $1E, Drowning_Loop02
00000064 F7                       M 	dc.b	$f7
00000065 001E                     M 	dc.b	index,loops
00000067 0000                     M 	dc.w	((drowning_loop02&$7fff)<<8)&$ff00+(drowning_loop02&$7fff)>>8
00000069 C906                       	dc.b	nC6, $06
0000006B                            	smpsStop
0000006B F2                       M 	dc.b	$f2
0000006C                            
0000006C                            ; FM4 Data
0000006C                            Drowning_FM4:
0000006C                            	smpsSetvoice        $03
0000006C                          M 	smpsfmvoice	$03
0000006C EF03                     M 	dc.b	$ef,$03
0000006E                            	smpsNoteFill        $05
0000006E E805                     M 	dc.b	$e8,$05
00000070 8003                       	dc.b	nRst, $03
00000072                            
00000072                            Drowning_Loop01:
00000072                            	smpsPan             panRight, $00
00000072 E040                     M 	dc.b	$e0,direction+amsfms
00000074 B106 BD                    	dc.b	nC4, $06, nC5
00000077                            	smpsPan             panCenter, $00
00000077 E0C0                     M 	dc.b	$e0,direction+amsfms
00000079 B1BD                       	dc.b	nC4, nC5
0000007B                            	smpsPan             panLeft, $00
0000007B E080                     M 	dc.b	$e0,direction+amsfms
0000007D B2BE                       	dc.b	nCs4, nCs5
0000007F                            	smpsPan             panCenter, $00
0000007F E0C0                     M 	dc.b	$e0,direction+amsfms
00000081 B2BE                       	dc.b	nCs4, nCs5
00000083                            	smpsLoop            $00, $0A, Drowning_Loop01
00000083 F7                       M 	dc.b	$f7
00000084 000A                     M 	dc.b	index,loops
00000086 0000                     M 	dc.w	((drowning_loop01&$7fff)<<8)&$ff00+(drowning_loop01&$7fff)>>8
00000088                            	smpsStop
00000088 F2                       M 	dc.b	$f2
00000089                            
00000089                            ; FM5 Data
00000089                            Drowning_FM5:
00000089                            	smpsSetvoice        $00
00000089                          M 	smpsfmvoice	$00
00000089 EF00                     M 	dc.b	$ef,$00
0000008B                            	smpsNoteFill        $05
0000008B E805                     M 	dc.b	$e8,$05
0000008D 8004                       	dc.b	nRst, $04
0000008F                            
0000008F                            Drowning_Loop00:
0000008F                            	smpsPan             panLeft, $00
0000008F E080                     M 	dc.b	$e0,direction+amsfms
00000091 B106 BD                    	dc.b	nC4, $06, nC5
00000094                            	smpsPan             panLeft, $00
00000094 E080                     M 	dc.b	$e0,direction+amsfms
00000096 B1BD                       	dc.b	nC4, nC5
00000098                            	smpsPan             panRight, $00
00000098 E040                     M 	dc.b	$e0,direction+amsfms
0000009A B2BE                       	dc.b	nCs4, nCs5
0000009C                            	smpsPan             panRight, $00
0000009C E040                     M 	dc.b	$e0,direction+amsfms
0000009E B2BE                       	dc.b	nCs4, nCs5
000000A0                            	smpsLoop            $00, $0A, Drowning_Loop00
000000A0 F7                       M 	dc.b	$f7
000000A1 000A                     M 	dc.b	index,loops
000000A3 0000                     M 	dc.w	((drowning_loop00&$7fff)<<8)&$ff00+(drowning_loop00&$7fff)>>8
000000A5                            	smpsStop
000000A5 F2                       M 	dc.b	$f2
000000A6                            
000000A6                            ; DAC Data
000000A6                            Drowning_DAC:
000000A6 820C 8282 82               	dc.b	dSnare, $0C, dSnare, dSnare, dSnare
000000AB                            	smpsLoop            $00, $0A, Drowning_DAC
000000AB F7                       M 	dc.b	$f7
000000AC 000A                     M 	dc.b	index,loops
000000AE 0000                     M 	dc.w	((drowning_dac&$7fff)<<8)&$ff00+(drowning_dac&$7fff)>>8
000000B0 8206                       	dc.b	dSnare, $06
000000B2                            	smpsStop
000000B2 F2                       M 	dc.b	$f2
000000B3                            
000000B3                            Drowning_Call01:
000000B3 B106 BDB1 BDB2 BEB2 BE     	dc.b	nC4, $06, nC5, nC4, nC5, nCs4, nCs5, nCs4, nCs5
000000BC                            
000000BC                            Drowning_Call00:
000000BC B106 BDB1 BDB2 BEB2 BE     	dc.b	nC4, $06, nC5, nC4, nC5, nCs4, nCs5, nCs4, nCs5
000000C5                            	smpsReturn
000000C5 E3                       M 	dc.b	$e3
000000C6                            
000000C6                            Drowning_Voices:
000000C6                            ;	Voice $00
000000C6                            ;	$3C
000000C6                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000000C6                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000000C6                            	smpsVcAlgorithm     $04
000000C6 =00000004                M vcalgorithm	set	val
000000C6                            	smpsVcFeedback      $07
000000C6 =00000007                M vcfeedback	set	val
000000C6                            	smpsVcUnusedBits    $00
000000C6 =00000000                M vcunusedbits	set	val
000000C6 =00000000                M vcd1r1unk	set	0
000000C6 =00000000                M vcd1r2unk	set	0
000000C6 =00000000                M vcd1r3unk	set	0
000000C6 =00000000                M vcd1r4unk	set	0
000000C6                            	smpsVcDetune        $03, $05, $05, $03
000000C6 =00000003                M vcdt1	set	op1
000000C6 =00000005                M vcdt2	set	op2
000000C6 =00000005                M vcdt3	set	op3
000000C6 =00000003                M vcdt4	set	op4
000000C6                            	smpsVcCoarseFreq    $00, $00, $02, $01
000000C6 =00000000                M vccf1	set	op1
000000C6 =00000000                M vccf2	set	op2
000000C6 =00000002                M vccf3	set	op3
000000C6 =00000001                M vccf4	set	op4
000000C6                            	smpsVcRateScale     $01, $01, $01, $01
000000C6 =00000001                M vcrs1	set	op1
000000C6 =00000001                M vcrs2	set	op2
000000C6 =00000001                M vcrs3	set	op3
000000C6 =00000001                M vcrs4	set	op4
000000C6                            	smpsVcAttackRate    $13, $12, $13, $12
000000C6 =00000013                M vcar1	set	op1
000000C6 =00000012                M vcar2	set	op2
000000C6 =00000013                M vcar3	set	op3
000000C6 =00000012                M vcar4	set	op4
000000C6                            	smpsVcAmpMod        $00, $00, $00, $00
000000C6 =00000000                M vcam1	set	op1<<5
000000C6 =00000000                M vcam2	set	op2<<5
000000C6 =00000000                M vcam3	set	op3<<5
000000C6 =00000000                M vcam4	set	op4<<5
000000C6                            	smpsVcDecayRate1    $00, $08, $00, $08
000000C6 =00000000                M vcd1r1	set	op1
000000C6 =00000008                M vcd1r2	set	op2
000000C6 =00000000                M vcd1r3	set	op3
000000C6 =00000008                M vcd1r4	set	op4
000000C6                            	smpsVcDecayRate2    $00, $04, $00, $04
000000C6 =00000000                M vcd2r1	set	op1
000000C6 =00000004                M vcd2r2	set	op2
000000C6 =00000000                M vcd2r3	set	op3
000000C6 =00000004                M vcd2r4	set	op4
000000C6                            	smpsVcDecayLevel    $00, $01, $00, $01
000000C6 =00000000                M vcdl1	set	op1
000000C6 =00000001                M vcdl2	set	op2
000000C6 =00000000                M vcdl3	set	op3
000000C6 =00000001                M vcdl4	set	op4
000000C6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000C6 =0000000F                M vcrr1	set	op1
000000C6 =0000000F                M vcrr2	set	op2
000000C6 =0000000F                M vcrr3	set	op3
000000C6 =0000000F                M vcrr4	set	op4
000000C6                            	smpsVcTotalLevel    $00, $16, $00, $1A
000000C6 =00000000                M vctl1	set	op1
000000C6 =00000016                M vctl2	set	op2
000000C6 =00000000                M vctl3	set	op3
000000C6 =0000001A                M vctl4	set	op4
000000C6 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000C7 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000000C7 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
000000C7 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000000C7 =00000080                M vctlmask1	set	$80
000000C7 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000CB 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000CF 0808 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000000D3 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000D7 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000DB 1A16 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000DF                            
000000DF                            ;	Voice $01
000000DF                            ;	$18
000000DF                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000000DF                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000000DF                            	smpsVcAlgorithm     $00
000000DF =00000000                M vcalgorithm	set	val
000000DF                            	smpsVcFeedback      $03
000000DF =00000003                M vcfeedback	set	val
000000DF                            	smpsVcUnusedBits    $00
000000DF =00000000                M vcunusedbits	set	val
000000DF =00000000                M vcd1r1unk	set	0
000000DF =00000000                M vcd1r2unk	set	0
000000DF =00000000                M vcd1r3unk	set	0
000000DF =00000000                M vcd1r4unk	set	0
000000DF                            	smpsVcDetune        $03, $03, $03, $03
000000DF =00000003                M vcdt1	set	op1
000000DF =00000003                M vcdt2	set	op2
000000DF =00000003                M vcdt3	set	op3
000000DF =00000003                M vcdt4	set	op4
000000DF                            	smpsVcCoarseFreq    $01, $00, $00, $07
000000DF =00000001                M vccf1	set	op1
000000DF =00000000                M vccf2	set	op2
000000DF =00000000                M vccf3	set	op3
000000DF =00000007                M vccf4	set	op4
000000DF                            	smpsVcRateScale     $02, $00, $03, $02
000000DF =00000002                M vcrs1	set	op1
000000DF =00000000                M vcrs2	set	op2
000000DF =00000003                M vcrs3	set	op3
000000DF =00000002                M vcrs4	set	op4
000000DF                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000000DF =0000001C                M vcar1	set	op1
000000DF =0000001C                M vcar2	set	op2
000000DF =0000001C                M vcar3	set	op3
000000DF =0000001E                M vcar4	set	op4
000000DF                            	smpsVcAmpMod        $00, $00, $00, $00
000000DF =00000000                M vcam1	set	op1<<5
000000DF =00000000                M vcam2	set	op2<<5
000000DF =00000000                M vcam3	set	op3<<5
000000DF =00000000                M vcam4	set	op4<<5
000000DF                            	smpsVcDecayRate1    $01, $04, $06, $0D
000000DF =00000001                M vcd1r1	set	op1
000000DF =00000004                M vcd1r2	set	op2
000000DF =00000006                M vcd1r3	set	op3
000000DF =0000000D                M vcd1r4	set	op4
000000DF                            	smpsVcDecayRate2    $05, $03, $0A, $08
000000DF =00000005                M vcd2r1	set	op1
000000DF =00000003                M vcd2r2	set	op2
000000DF =0000000A                M vcd2r3	set	op3
000000DF =00000008                M vcd2r4	set	op4
000000DF                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000000DF =00000002                M vcdl1	set	op1
000000DF =00000003                M vcdl2	set	op2
000000DF =0000000B                M vcdl3	set	op3
000000DF =0000000B                M vcdl4	set	op4
000000DF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000DF =0000000F                M vcrr1	set	op1
000000DF =0000000F                M vcrr2	set	op2
000000DF =0000000F                M vcrr3	set	op3
000000DF =0000000F                M vcrr4	set	op4
000000DF                            	smpsVcTotalLevel    $00, $14, $22, $2C
000000DF =00000000                M vctl1	set	op1
000000DF =00000014                M vctl2	set	op2
000000DF =00000022                M vctl3	set	op3
000000DF =0000002C                M vctl4	set	op4
000000DF 18                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000E0 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000000E0 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
000000E0 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000000E0 =00000080                M vctlmask1	set	$80
000000E0 3730 3031                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000E4 9E1C DC9C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000E8 0D04 0601                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000000EC 0803 0A05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000F0 BF3F BF2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000F4 2C14 2280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000F8                            
000000F8                            ;	Voice $02
000000F8                            ;	$2C
000000F8                            ;	$52, $58, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000000F8                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$15, $82, $14, $82
000000F8                            	smpsVcAlgorithm     $04
000000F8 =00000004                M vcalgorithm	set	val
000000F8                            	smpsVcFeedback      $05
000000F8 =00000005                M vcfeedback	set	val
000000F8                            	smpsVcUnusedBits    $00
000000F8 =00000000                M vcunusedbits	set	val
000000F8 =00000000                M vcd1r1unk	set	0
000000F8 =00000000                M vcd1r2unk	set	0
000000F8 =00000000                M vcd1r3unk	set	0
000000F8 =00000000                M vcd1r4unk	set	0
000000F8                            	smpsVcDetune        $03, $03, $05, $05
000000F8 =00000003                M vcdt1	set	op1
000000F8 =00000003                M vcdt2	set	op2
000000F8 =00000005                M vcdt3	set	op3
000000F8 =00000005                M vcdt4	set	op4
000000F8                            	smpsVcCoarseFreq    $04, $04, $08, $02
000000F8 =00000004                M vccf1	set	op1
000000F8 =00000004                M vccf2	set	op2
000000F8 =00000008                M vccf3	set	op3
000000F8 =00000002                M vccf4	set	op4
000000F8                            	smpsVcRateScale     $00, $00, $00, $00
000000F8 =00000000                M vcrs1	set	op1
000000F8 =00000000                M vcrs2	set	op2
000000F8 =00000000                M vcrs3	set	op3
000000F8 =00000000                M vcrs4	set	op4
000000F8                            	smpsVcAttackRate    $12, $1F, $12, $1F
000000F8 =00000012                M vcar1	set	op1
000000F8 =0000001F                M vcar2	set	op2
000000F8 =00000012                M vcar3	set	op3
000000F8 =0000001F                M vcar4	set	op4
000000F8                            	smpsVcAmpMod        $00, $00, $00, $00
000000F8 =00000000                M vcam1	set	op1<<5
000000F8 =00000000                M vcam2	set	op2<<5
000000F8 =00000000                M vcam3	set	op3<<5
000000F8 =00000000                M vcam4	set	op4<<5
000000F8                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000000F8 =0000000A                M vcd1r1	set	op1
000000F8 =00000000                M vcd1r2	set	op2
000000F8 =0000000A                M vcd1r3	set	op3
000000F8 =00000000                M vcd1r4	set	op4
000000F8                            	smpsVcDecayRate2    $00, $00, $00, $00
000000F8 =00000000                M vcd2r1	set	op1
000000F8 =00000000                M vcd2r2	set	op2
000000F8 =00000000                M vcd2r3	set	op3
000000F8 =00000000                M vcd2r4	set	op4
000000F8                            	smpsVcDecayLevel    $01, $00, $01, $00
000000F8 =00000001                M vcdl1	set	op1
000000F8 =00000000                M vcdl2	set	op2
000000F8 =00000001                M vcdl3	set	op3
000000F8 =00000000                M vcdl4	set	op4
000000F8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000F8 =0000000F                M vcrr1	set	op1
000000F8 =0000000F                M vcrr2	set	op2
000000F8 =0000000F                M vcrr3	set	op3
000000F8 =0000000F                M vcrr4	set	op4
000000F8                            	smpsVcTotalLevel    $02, $14, $02, $15
000000F8 =00000002                M vctl1	set	op1
000000F8 =00000014                M vctl2	set	op2
000000F8 =00000002                M vctl3	set	op3
000000F8 =00000015                M vctl4	set	op4
000000F8 2C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000F9 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000000F9 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
000000F9 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000000F9 =00000080                M vctlmask1	set	$80
000000F9 5234 5834                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000FD 1F1F 1212                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000101 0000 0A0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000105 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000109 0F0F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000010D 1514 8282                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000111                            
00000111                            ;	Voice $03
00000111                            ;	$07
00000111                            ;	$34, $31, $54, $51, 	$14, $14, $14, $14, 	$00, $00, $00, $00
00000111                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$91, $91, $91, $91
00000111                            	smpsVcAlgorithm     $07
00000111 =00000007                M vcalgorithm	set	val
00000111                            	smpsVcFeedback      $00
00000111 =00000000                M vcfeedback	set	val
00000111                            	smpsVcUnusedBits    $00
00000111 =00000000                M vcunusedbits	set	val
00000111 =00000000                M vcd1r1unk	set	0
00000111 =00000000                M vcd1r2unk	set	0
00000111 =00000000                M vcd1r3unk	set	0
00000111 =00000000                M vcd1r4unk	set	0
00000111                            	smpsVcDetune        $05, $05, $03, $03
00000111 =00000005                M vcdt1	set	op1
00000111 =00000005                M vcdt2	set	op2
00000111 =00000003                M vcdt3	set	op3
00000111 =00000003                M vcdt4	set	op4
00000111                            	smpsVcCoarseFreq    $01, $04, $01, $04
00000111 =00000001                M vccf1	set	op1
00000111 =00000004                M vccf2	set	op2
00000111 =00000001                M vccf3	set	op3
00000111 =00000004                M vccf4	set	op4
00000111                            	smpsVcRateScale     $00, $00, $00, $00
00000111 =00000000                M vcrs1	set	op1
00000111 =00000000                M vcrs2	set	op2
00000111 =00000000                M vcrs3	set	op3
00000111 =00000000                M vcrs4	set	op4
00000111                            	smpsVcAttackRate    $14, $14, $14, $14
00000111 =00000014                M vcar1	set	op1
00000111 =00000014                M vcar2	set	op2
00000111 =00000014                M vcar3	set	op3
00000111 =00000014                M vcar4	set	op4
00000111                            	smpsVcAmpMod        $00, $00, $00, $00
00000111 =00000000                M vcam1	set	op1<<5
00000111 =00000000                M vcam2	set	op2<<5
00000111 =00000000                M vcam3	set	op3<<5
00000111 =00000000                M vcam4	set	op4<<5
00000111                            	smpsVcDecayRate1    $00, $00, $00, $00
00000111 =00000000                M vcd1r1	set	op1
00000111 =00000000                M vcd1r2	set	op2
00000111 =00000000                M vcd1r3	set	op3
00000111 =00000000                M vcd1r4	set	op4
00000111                            	smpsVcDecayRate2    $00, $00, $00, $00
00000111 =00000000                M vcd2r1	set	op1
00000111 =00000000                M vcd2r2	set	op2
00000111 =00000000                M vcd2r3	set	op3
00000111 =00000000                M vcd2r4	set	op4
00000111                            	smpsVcDecayLevel    $00, $00, $00, $00
00000111 =00000000                M vcdl1	set	op1
00000111 =00000000                M vcdl2	set	op2
00000111 =00000000                M vcdl3	set	op3
00000111 =00000000                M vcdl4	set	op4
00000111                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000111 =0000000F                M vcrr1	set	op1
00000111 =0000000F                M vcrr2	set	op2
00000111 =0000000F                M vcrr3	set	op3
00000111 =0000000F                M vcrr4	set	op4
00000111                            	smpsVcTotalLevel    $11, $11, $11, $11
00000111 =00000011                M vctl1	set	op1
00000111 =00000011                M vctl2	set	op2
00000111 =00000011                M vctl3	set	op3
00000111 =00000011                M vctl4	set	op4
00000111 07                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000112 =FFFFFF80                M vctlmask4	set	((vcalgorithm=7)<<7)
00000112 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000112 =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000112 =00000080                M vctlmask1	set	$80
00000112 3454 3151                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000116 1414 1414                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000011A 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000011E 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000122 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000126 9191 9191                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000012A                            
0000012A                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music4:	section	org($1380),file("sound/music/compressed/Invincible.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/Invincible.asm"	; include the actual music file for assembly
00000000                            Invincible_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000000                M sourcesmps2asm	set	0
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     Invincible_Voices
00000000 0000                     M 	dc.w	((invincible_voices&$7fff)<<8)&$ff00+(invincible_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $E8
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$e8
00000005 E8                       M 	dc.b	$e8
00000006                            
00000006                            	smpsHeaderDAC       Invincible_DAC
00000006                          M 	checkedchannelpointer	invincible_dac
00000006 0000                     M 	dc.w	((invincible_dac&$7fff)<<8)&$ff00+(invincible_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Invincible_FM1,	$F4, $11
0000000A                          M 	checkedchannelpointer	invincible_fm1
0000000A 0000                     M 	dc.w	((invincible_fm1&$7fff)<<8)&$ff00+(invincible_fm1&$7fff)>>8
0000000C F411                     M 	dc.b	$f4,$11
0000000E                            	smpsHeaderFM        Invincible_FM2,	$F4, $09
0000000E                          M 	checkedchannelpointer	invincible_fm2
0000000E 0000                     M 	dc.w	((invincible_fm2&$7fff)<<8)&$ff00+(invincible_fm2&$7fff)>>8
00000010 F409                     M 	dc.b	$f4,$09
00000012                            	smpsHeaderFM        Invincible_FM3,	$E8, $0F
00000012                          M 	checkedchannelpointer	invincible_fm3
00000012 0000                     M 	dc.w	((invincible_fm3&$7fff)<<8)&$ff00+(invincible_fm3&$7fff)>>8
00000014 E80F                     M 	dc.b	$e8,$0f
00000016                            	smpsHeaderFM        Invincible_FM4,	$E8, $0F
00000016                          M 	checkedchannelpointer	invincible_fm4
00000016 0000                     M 	dc.w	((invincible_fm4&$7fff)<<8)&$ff00+(invincible_fm4&$7fff)>>8
00000018 E80F                     M 	dc.b	$e8,$0f
0000001A                            	smpsHeaderFM        Invincible_FM5,	$F4, $11
0000001A                          M 	checkedchannelpointer	invincible_fm5
0000001A 0000                     M 	dc.w	((invincible_fm5&$7fff)<<8)&$ff00+(invincible_fm5&$7fff)>>8
0000001C F411                     M 	dc.b	$f4,$11
0000001E                            	smpsHeaderPSG       Invincible_PSG1,	$F4, $02, $00, fTone_08
0000001E                          M 	checkedchannelpointer	invincible_psg1
0000001E 0000                     M 	dc.w	((invincible_psg1&$7fff)<<8)&$ff00+(invincible_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$f4
00000020 F4                       M 	dc.b	$f4
00000021 02                       M 	dc.b	$02
00000022 00                       M 	dc.b	$00
00000023 08                       M 	dc.b	ftone_08
00000024                            	smpsHeaderPSG       Invincible_PSG2,	$DC, $05, $00, fTone_05
00000024                          M 	checkedchannelpointer	invincible_psg2
00000024 0000                     M 	dc.w	((invincible_psg2&$7fff)<<8)&$ff00+(invincible_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 05                       M 	dc.b	$05
00000028 00                       M 	dc.b	$00
00000029 05                       M 	dc.b	ftone_05
0000002A                            	smpsHeaderPSG       Invincible_PSG3,	$00, $03, $00, fTone_04
0000002A                          M 	checkedchannelpointer	invincible_psg3
0000002A 0000                     M 	dc.w	((invincible_psg3&$7fff)<<8)&$ff00+(invincible_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 03                       M 	dc.b	$03
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM5 Data
00000030                            Invincible_FM5:
00000030                            	smpsAlterNote       $03
00000030                          M 	smpsdetune	$03
00000030 E103                     M 	dc.b	$e1,$03
00000032                            
00000032                            ; FM1 Data
00000032                            Invincible_FM1:
00000032 8030                       	dc.b	nRst, $30
00000034                            	smpsSetvoice        $00
00000034                          M 	smpsfmvoice	$00
00000034 EF00                     M 	dc.b	$ef,$00
00000036                            
00000036                            Invincible_Loop07:
00000036 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
00000042 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
0000004E C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
00000058                            	smpsLoop            $00, $02, Invincible_Loop07
00000058 F7                       M 	dc.b	$f7
00000059 0002                     M 	dc.b	index,loops
0000005B 0000                     M 	dc.w	((invincible_loop07&$7fff)<<8)&$ff00+(invincible_loop07&$7fff)>>8
0000005D                            	smpsAlterVol        $FD
0000005D E6FD                     M 	dc.b	$e6,$fd
0000005F 8030 80C6 04C8 CACB CDCF+  	dc.b	nRst, $30, nRst, nA5, $04, nB5, nCs6, nD6, nE6, nFs6, nB5, nCs6
0000006B CCCD CFD1 CACC CECF D1D3+  	dc.b	nEb6, nE6, nFs6, nAb6, nCs6, nEb6, nF6, nFs6, nAb6, nBb6, nF6, nFs6
00000077 D1D3 D5D6                  	dc.b	nAb6, nBb6, nC7, nCs7
0000007B                            	smpsAlterVol        $03
0000007B E603                     M 	dc.b	$e6,$03
0000007D                            	smpsJump            Invincible_Loop07
0000007D F6                       M 	dc.b	$f6
0000007E 0000                     M 	dc.w	((invincible_loop07&$7fff)<<8)&$ff00+(invincible_loop07&$7fff)>>8
00000080                            
00000080                            ; FM2 Data
00000080                            Invincible_FM2:
00000080                            	smpsNop             $01
00000080 E201                     M 	dc.b	$e2,$01
00000082                            	smpsSetvoice        $01
00000082                          M 	smpsfmvoice	$01
00000082 EF01                     M 	dc.b	$ef,$01
00000084 8030                       	dc.b	nRst, $30
00000086                            
00000086                            Invincible_Loop05:
00000086 AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
00000092 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
0000009E A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000000A8                            	smpsLoop            $00, $02, Invincible_Loop05
000000A8 F7                       M 	dc.b	$f7
000000A9 0002                     M 	dc.b	index,loops
000000AB 0000                     M 	dc.w	((invincible_loop05&$7fff)<<8)&$ff00+(invincible_loop05&$7fff)>>8
000000AD                            
000000AD                            Invincible_Loop06:
000000AD A406 A012 A206 80A4 80     	dc.b	nB2, $06, nG2, $12, nA2, $06, nRst, nB2, nRst
000000B6                            	smpsLoop            $00, $02, Invincible_Loop06
000000B6 F7                       M 	dc.b	$f7
000000B7 0002                     M 	dc.b	index,loops
000000B9 0000                     M 	dc.w	((invincible_loop06&$7fff)<<8)&$ff00+(invincible_loop06&$7fff)>>8
000000BB A20C A4A6 A8A4 06A6 A8AA+  	dc.b	nA2, $0C, nB2, nCs3, nEb3, nB2, $06, nCs3, nEb3, nF3, nCs3, nEb3
000000C7 AAAB                       	dc.b	nF3, nFs3
000000C9                            	smpsNop             $01
000000C9 E201                     M 	dc.b	$e2,$01
000000CB                            	smpsJump            Invincible_Loop05
000000CB F6                       M 	dc.b	$f6
000000CC 0000                     M 	dc.w	((invincible_loop05&$7fff)<<8)&$ff00+(invincible_loop05&$7fff)>>8
000000CE                            
000000CE                            ; FM3 Data
000000CE                            Invincible_FM3:
000000CE                            	smpsSetvoice        $00
000000CE                          M 	smpsfmvoice	$00
000000CE EF00                     M 	dc.b	$ef,$00
000000D0 8030                       	dc.b	nRst, $30
000000D2                            
000000D2                            Invincible_Loop03:
000000D2 CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nFs6
000000DE D20C CD06 80CD 80CA 80CA+  	dc.b	nA6, $0C, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6
000000EA 12D0 1E                    	dc.b	$12, nG6, $1E
000000ED                            	smpsLoop            $00, $02, Invincible_Loop03
000000ED F7                       M 	dc.b	$f7
000000EE 0002                     M 	dc.b	index,loops
000000F0 0000                     M 	dc.w	((invincible_loop03&$7fff)<<8)&$ff00+(invincible_loop03&$7fff)>>8
000000F2                            
000000F2                            Invincible_Loop04:
000000F2 8006 C412 C606 8012        	dc.b	nRst, $06, nG5, $12, nA5, $06, nRst, $12
000000FA                            	smpsLoop            $00, $04, Invincible_Loop04
000000FA F7                       M 	dc.b	$f7
000000FB 0004                     M 	dc.b	index,loops
000000FD 0000                     M 	dc.w	((invincible_loop04&$7fff)<<8)&$ff00+(invincible_loop04&$7fff)>>8
000000FF                            	smpsJump            Invincible_Loop03
000000FF F6                       M 	dc.b	$f6
00000100 0000                     M 	dc.w	((invincible_loop03&$7fff)<<8)&$ff00+(invincible_loop03&$7fff)>>8
00000102                            
00000102                            ; FM4 Data
00000102                            Invincible_FM4:
00000102                            	smpsSetvoice        $00
00000102                          M 	smpsfmvoice	$00
00000102 EF00                     M 	dc.b	$ef,$00
00000104 8030                       	dc.b	nRst, $30
00000106                            
00000106                            Invincible_Loop01:
00000106 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nD6
00000112 CF0C CA06 80CA 80C6 80C6+  	dc.b	nFs6, $0C, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6
0000011E 12CB 1E                    	dc.b	$12, nD6, $1E
00000121                            	smpsLoop            $00, $02, Invincible_Loop01
00000121 F7                       M 	dc.b	$f7
00000122 0002                     M 	dc.b	index,loops
00000124 0000                     M 	dc.w	((invincible_loop01&$7fff)<<8)&$ff00+(invincible_loop01&$7fff)>>8
00000126                            
00000126                            Invincible_Loop02:
00000126 8006 C812 CA06 8012        	dc.b	nRst, $06, nB5, $12, nCs6, $06, nRst, $12
0000012E                            	smpsLoop            $00, $04, Invincible_Loop02
0000012E F7                       M 	dc.b	$f7
0000012F 0004                     M 	dc.b	index,loops
00000131 0000                     M 	dc.w	((invincible_loop02&$7fff)<<8)&$ff00+(invincible_loop02&$7fff)>>8
00000133                            	smpsJump            Invincible_Loop01
00000133 F6                       M 	dc.b	$f6
00000134 0000                     M 	dc.w	((invincible_loop01&$7fff)<<8)&$ff00+(invincible_loop01&$7fff)>>8
00000136                            
00000136                            ; PSG1 Data
00000136                            Invincible_PSG1:
00000136                            ; PSG2 Data
00000136                            Invincible_PSG2:
00000136                            	smpsStop
00000136 F2                       M 	dc.b	$f2
00000137                            
00000137                            ; PSG3 Data
00000137                            Invincible_PSG3:
00000137                            	smpsPSGform         $E7
00000137 F3E7                     M 	dc.b	$f3,$e7
00000139 8030                       	dc.b	nRst, $30
0000013B                            
0000013B                            Invincible_Jump00:
0000013B                            	smpsNoteFill        $03
0000013B E803                     M 	dc.b	$e8,$03
0000013D C60C                       	dc.b	nMaxPSG, $0C
0000013F                            	smpsNoteFill        $0C
0000013F E80C                     M 	dc.b	$e8,$0c
00000141 0C                         	dc.b	$0C
00000142                            	smpsNoteFill        $03
00000142 E803                     M 	dc.b	$e8,$03
00000144 0C                         	dc.b	$0C
00000145                            	smpsNoteFill        $0C
00000145 E80C                     M 	dc.b	$e8,$0c
00000147 0C                         	dc.b	$0C
00000148                            	smpsJump            Invincible_Jump00
00000148 F6                       M 	dc.b	$f6
00000149 0000                     M 	dc.w	((invincible_jump00&$7fff)<<8)&$ff00+(invincible_jump00&$7fff)>>8
0000014B                            
0000014B                            ; DAC Data
0000014B                            Invincible_DAC:
0000014B 8206 8281 8182 8282 82     	dc.b	dSnare, $06, dSnare, dKick, dKick, dSnare, dSnare, dSnare, dSnare
00000154                            
00000154                            Invincible_Loop00:
00000154 810C 8281 8281 0C82 8182+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $0C, dSnare, dKick, dSnare, dKick, $0C
00000160 8281 8281 0C82 8104 8082+  	dc.b	dSnare, dKick, dSnare, dKick, $0C, dSnare, dKick, $04, nRst, dSnare, dSnare, $0C
0000016C                            	smpsLoop            $00, $02, Invincible_Loop00
0000016C F7                       M 	dc.b	$f7
0000016D 0002                     M 	dc.b	index,loops
0000016F 0000                     M 	dc.w	((invincible_loop00&$7fff)<<8)&$ff00+(invincible_loop00&$7fff)>>8
00000171 8106 8212 810C 8282 0681+  	dc.b	dKick, $06, dSnare, $12, dKick, $0C, dSnare, dSnare, $06, dKick, $12, dKick
0000017D 0C82 8206 810C 8206 810C+  	dc.b	$0C, dSnare, dSnare, $06, dKick, $0C, dSnare, $06, dKick, $0C, dSnare, dSnare
00000189 0482 8282 8282 8282 8282+  	dc.b	$04, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
00000195                            	smpsJump            Invincible_Loop00
00000195 F6                       M 	dc.b	$f6
00000196 0000                     M 	dc.w	((invincible_loop00&$7fff)<<8)&$ff00+(invincible_loop00&$7fff)>>8
00000198                            
00000198                            	; Unreachable
00000198                            	smpsStop
00000198 F2                       M 	dc.b	$f2
00000199                            
00000199                            Invincible_Voices:
00000199                            ;	Voice $00
00000199                            ;	$3A
00000199                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00000199                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00000199                            	smpsVcAlgorithm     $02
00000199 =00000002                M vcalgorithm	set	val
00000199                            	smpsVcFeedback      $07
00000199 =00000007                M vcfeedback	set	val
00000199                            	smpsVcUnusedBits    $00
00000199 =00000000                M vcunusedbits	set	val
00000199 =00000000                M vcd1r1unk	set	0
00000199 =00000000                M vcd1r2unk	set	0
00000199 =00000000                M vcd1r3unk	set	0
00000199 =00000000                M vcd1r4unk	set	0
00000199                            	smpsVcDetune        $00, $00, $00, $00
00000199 =00000000                M vcdt1	set	op1
00000199 =00000000                M vcdt2	set	op2
00000199 =00000000                M vcdt3	set	op3
00000199 =00000000                M vcdt4	set	op4
00000199                            	smpsVcCoarseFreq    $01, $01, $07, $01
00000199 =00000001                M vccf1	set	op1
00000199 =00000001                M vccf2	set	op2
00000199 =00000007                M vccf3	set	op3
00000199 =00000001                M vccf4	set	op4
00000199                            	smpsVcRateScale     $01, $02, $02, $02
00000199 =00000001                M vcrs1	set	op1
00000199 =00000002                M vcrs2	set	op2
00000199 =00000002                M vcrs3	set	op3
00000199 =00000002                M vcrs4	set	op4
00000199                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00000199 =00000013                M vcar1	set	op1
00000199 =0000000D                M vcar2	set	op2
00000199 =0000000E                M vcar3	set	op3
00000199 =0000000E                M vcar4	set	op4
00000199                            	smpsVcAmpMod        $00, $00, $00, $00
00000199 =00000000                M vcam1	set	op1<<5
00000199 =00000000                M vcam2	set	op2<<5
00000199 =00000000                M vcam3	set	op3<<5
00000199 =00000000                M vcam4	set	op4<<5
00000199                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00000199 =00000003                M vcd1r1	set	op1
00000199 =0000000E                M vcd1r2	set	op2
00000199 =0000000E                M vcd1r3	set	op3
00000199 =0000000E                M vcd1r4	set	op4
00000199                            	smpsVcDecayRate2    $00, $00, $00, $00
00000199 =00000000                M vcd2r1	set	op1
00000199 =00000000                M vcd2r2	set	op2
00000199 =00000000                M vcd2r3	set	op3
00000199 =00000000                M vcd2r4	set	op4
00000199                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000199 =00000000                M vcdl1	set	op1
00000199 =00000001                M vcdl2	set	op2
00000199 =0000000F                M vcdl3	set	op3
00000199 =00000001                M vcdl4	set	op4
00000199                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000199 =0000000F                M vcrr1	set	op1
00000199 =0000000F                M vcrr2	set	op2
00000199 =0000000F                M vcrr3	set	op3
00000199 =0000000F                M vcrr4	set	op4
00000199                            	smpsVcTotalLevel    $00, $27, $28, $18
00000199 =00000000                M vctl1	set	op1
00000199 =00000027                M vctl2	set	op2
00000199 =00000028                M vctl3	set	op3
00000199 =00000018                M vctl4	set	op4
00000199 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000019A =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000019A =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000019A =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000019A =00000080                M vctlmask1	set	$80
0000019A 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000019E 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001A2 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000001A6 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001AA 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001AE 1827 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001B2                            
000001B2                            ;	Voice $01
000001B2                            ;	$20
000001B2                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000001B2                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000001B2                            	smpsVcAlgorithm     $00
000001B2 =00000000                M vcalgorithm	set	val
000001B2                            	smpsVcFeedback      $04
000001B2 =00000004                M vcfeedback	set	val
000001B2                            	smpsVcUnusedBits    $00
000001B2 =00000000                M vcunusedbits	set	val
000001B2 =00000000                M vcd1r1unk	set	0
000001B2 =00000000                M vcd1r2unk	set	0
000001B2 =00000000                M vcd1r3unk	set	0
000001B2 =00000000                M vcd1r4unk	set	0
000001B2                            	smpsVcDetune        $00, $00, $03, $07
000001B2 =00000000                M vcdt1	set	op1
000001B2 =00000000                M vcdt2	set	op2
000001B2 =00000003                M vcdt3	set	op3
000001B2 =00000007                M vcdt4	set	op4
000001B2                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000001B2 =00000000                M vccf1	set	op1
000001B2 =00000000                M vccf2	set	op2
000001B2 =00000001                M vccf3	set	op3
000001B2 =0000000A                M vccf4	set	op4
000001B2                            	smpsVcRateScale     $03, $03, $03, $02
000001B2 =00000003                M vcrs1	set	op1
000001B2 =00000003                M vcrs2	set	op2
000001B2 =00000003                M vcrs3	set	op3
000001B2 =00000002                M vcrs4	set	op4
000001B2                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000001B2 =0000001F                M vcar1	set	op1
000001B2 =0000001C                M vcar2	set	op2
000001B2 =00000018                M vcar3	set	op3
000001B2 =0000001F                M vcar4	set	op4
000001B2                            	smpsVcAmpMod        $00, $00, $00, $00
000001B2 =00000000                M vcam1	set	op1<<5
000001B2 =00000000                M vcam2	set	op2<<5
000001B2 =00000000                M vcam3	set	op3<<5
000001B2 =00000000                M vcam4	set	op4<<5
000001B2                            	smpsVcDecayRate1    $04, $04, $0A, $10
000001B2 =00000004                M vcd1r1	set	op1
000001B2 =00000004                M vcd1r2	set	op2
000001B2 =0000000A                M vcd1r3	set	op3
000001B2 =00000010                M vcd1r4	set	op4
000001B2                            	smpsVcDecayRate2    $08, $08, $08, $0F
000001B2 =00000008                M vcd2r1	set	op1
000001B2 =00000008                M vcd2r2	set	op2
000001B2 =00000008                M vcd2r3	set	op3
000001B2 =0000000F                M vcd2r4	set	op4
000001B2                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000001B2 =0000000B                M vcdl1	set	op1
000001B2 =0000000B                M vcdl2	set	op2
000001B2 =00000005                M vcdl3	set	op3
000001B2 =00000005                M vcdl4	set	op4
000001B2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001B2 =0000000F                M vcrr1	set	op1
000001B2 =0000000F                M vcrr2	set	op2
000001B2 =0000000F                M vcrr3	set	op3
000001B2 =0000000F                M vcrr4	set	op4
000001B2                            	smpsVcTotalLevel    $00, $17, $2B, $14
000001B2 =00000000                M vctl1	set	op1
000001B2 =00000017                M vctl2	set	op2
000001B2 =0000002B                M vctl3	set	op3
000001B2 =00000014                M vctl4	set	op4
000001B2 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001B3 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000001B3 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
000001B3 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000001B3 =00000080                M vctlmask1	set	$80
000001B3 7A00 3100                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001B7 9FDC D8DF                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001BB 1004 0A04                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000001BF 0F08 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001C3 5FBF 5FBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001C7 1417 2B80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001CB                            
000001CB                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music5:	section	org($1380),file("sound/music/compressed/CNZ2P.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/CNZ2P.asm"	; include the actual music file for assembly
00000000                            CNZ_2p_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000000                M sourcesmps2asm	set	0
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     CNZ_2p_Voices
00000000 0000                     M 	dc.w	((cnz_2p_voices&$7fff)<<8)&$ff00+(cnz_2p_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $BD
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$bd
00000005 BD                       M 	dc.b	$bd
00000006                            
00000006                            	smpsHeaderDAC       CNZ_2p_DAC
00000006                          M 	checkedchannelpointer	cnz_2p_dac
00000006 0000                     M 	dc.w	((cnz_2p_dac&$7fff)<<8)&$ff00+(cnz_2p_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        CNZ_2p_FM1,	$F4, $06
0000000A                          M 	checkedchannelpointer	cnz_2p_fm1
0000000A 0000                     M 	dc.w	((cnz_2p_fm1&$7fff)<<8)&$ff00+(cnz_2p_fm1&$7fff)>>8
0000000C F406                     M 	dc.b	$f4,$06
0000000E                            	smpsHeaderFM        CNZ_2p_FM2,	$F4, $0D
0000000E                          M 	checkedchannelpointer	cnz_2p_fm2
0000000E 0000                     M 	dc.w	((cnz_2p_fm2&$7fff)<<8)&$ff00+(cnz_2p_fm2&$7fff)>>8
00000010 F40D                     M 	dc.b	$f4,$0d
00000012                            	smpsHeaderFM        CNZ_2p_FM3,	$F4, $10
00000012                          M 	checkedchannelpointer	cnz_2p_fm3
00000012 0000                     M 	dc.w	((cnz_2p_fm3&$7fff)<<8)&$ff00+(cnz_2p_fm3&$7fff)>>8
00000014 F410                     M 	dc.b	$f4,$10
00000016                            	smpsHeaderFM        CNZ_2p_FM4,	$E8, $0E
00000016                          M 	checkedchannelpointer	cnz_2p_fm4
00000016 0000                     M 	dc.w	((cnz_2p_fm4&$7fff)<<8)&$ff00+(cnz_2p_fm4&$7fff)>>8
00000018 E80E                     M 	dc.b	$e8,$0e
0000001A                            	smpsHeaderFM        CNZ_2p_FM5,	$F4, $10
0000001A                          M 	checkedchannelpointer	cnz_2p_fm5
0000001A 0000                     M 	dc.w	((cnz_2p_fm5&$7fff)<<8)&$ff00+(cnz_2p_fm5&$7fff)>>8
0000001C F410                     M 	dc.b	$f4,$10
0000001E                            	smpsHeaderPSG       CNZ_2p_PSG1,	$D0, $04, $00, $00
0000001E                          M 	checkedchannelpointer	cnz_2p_psg1
0000001E 0000                     M 	dc.w	((cnz_2p_psg1&$7fff)<<8)&$ff00+(cnz_2p_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 04                       M 	dc.b	$04
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       CNZ_2p_PSG2,	$D0, $04, $00, $00
00000024                          M 	checkedchannelpointer	cnz_2p_psg2
00000024 0000                     M 	dc.w	((cnz_2p_psg2&$7fff)<<8)&$ff00+(cnz_2p_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 04                       M 	dc.b	$04
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       CNZ_2p_PSG3,	$C4, $05, $00, $00
0000002A                          M 	checkedchannelpointer	cnz_2p_psg3
0000002A 0000                     M 	dc.w	((cnz_2p_psg3&$7fff)<<8)&$ff00+(cnz_2p_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$c4
0000002C C4                       M 	dc.b	$c4
0000002D 05                       M 	dc.b	$05
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; FM1 Data
00000030                            CNZ_2p_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032 AE06 80AE 80B0 80B0 80B1+  	dc.b	nA3, $06, nRst, nA3, nRst, nB3, nRst, nB3, nRst, nC4, nRst, nC4
0000003E 80B2 80B2 80               	dc.b	nRst, nCs4, nRst, nCs4, nRst
00000043                            
00000043                            CNZ_2p_Loop0B:
00000043 A709 AE03 B306 80B1 80B0+  	dc.b	nD3, $09, nA3, $03, nD4, $06, nRst, nC4, nRst, nB3, $0C, nC4
0000004F 0680 2AAC 0680 AC80 AE80+  	dc.b	$06, nRst, $2A, nG3, $06, nRst, nG3, nRst, nA3, nRst, nA3, nRst
0000005B AF80 2A                    	dc.b	nBb3, nRst, $2A
0000005E                            	smpsLoop            $00, $02, CNZ_2p_Loop0B
0000005E F7                       M 	dc.b	$f7
0000005F 0002                     M 	dc.b	index,loops
00000061 0000                     M 	dc.w	((cnz_2p_loop0b&$7fff)<<8)&$ff00+(cnz_2p_loop0b&$7fff)>>8
00000063                            	smpsCall            CNZ_2p_Call0C
00000063 F8                       M 	dc.b	$f8
00000064 0000                     M 	dc.w	((cnz_2p_call0c&$7fff)<<8)&$ff00+(cnz_2p_call0c&$7fff)>>8
00000066 A70C B306 80B1 80B3 0CA7+  	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
00000072 06A7 03B3 0CB1 B3AC 0680+  	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, nG3, $06, nRst, nG3, $0C
0000007E AE06 80AE 0CAF 0680 2A     	dc.b	nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $2A
00000087                            	smpsCall            CNZ_2p_Call0C
00000087 F8                       M 	dc.b	$f8
00000088 0000                     M 	dc.w	((cnz_2p_call0c&$7fff)<<8)&$ff00+(cnz_2p_call0c&$7fff)>>8
0000008A A70C B306 80B1 80B3 0CA7+  	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
00000096 06A7 03B3 0CB1 B309 BA03+  	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, $09, nA4, $03, nG3, $06
000000A2 80AC 0CAE 0680 AE0C AF06+  	dc.b	nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $2A
000000AE                            	smpsAlterVol        $FE
000000AE E6FE                     M 	dc.b	$e6,$fe
000000B0                            
000000B0                            CNZ_2p_Loop0C:
000000B0 B106 80B1 80B0 80AF 80AE+  	dc.b	nC4, $06, nRst, nC4, nRst, nB3, nRst, nBb3, nRst, nA3, nRst, nA3
000000BC 80B5 80AE 80B3 80AE 80B1+  	dc.b	nRst, nE4, nRst, nA3, nRst, nD4, nRst, nA3, nRst, nC4, nRst, nCs4
000000C8 80B3 09B3 03AE 0680 B180+  	dc.b	nRst, nD4, $09, nD4, $03, nA3, $06, nRst, nC4, nRst, nD4, nRst
000000D4                            	smpsLoop            $00, $03, CNZ_2p_Loop0C
000000D4 F7                       M 	dc.b	$f7
000000D5 0003                     M 	dc.b	index,loops
000000D7 0000                     M 	dc.w	((cnz_2p_loop0c&$7fff)<<8)&$ff00+(cnz_2p_loop0c&$7fff)>>8
000000D9 B106 80B1 80B0 80AF 80AE+  	dc.b	nC4, $06, nRst, nC4, nRst, nB3, nRst, nBb3, nRst, nA3, nRst, nA3
000000E5 80B5 80AE 8080 09A7 03B3+  	dc.b	nRst, nE4, nRst, nA3, nRst, nRst, $09, nD3, $03, nD4, $0C, nD3
000000F1 B306 8003 A706 802D        	dc.b	nD4, $06, nRst, $03, nD3, $06, nRst, $2D
000000F9                            	smpsAlterVol        $02
000000F9 E602                     M 	dc.b	$e6,$02
000000FB                            	smpsJump            CNZ_2p_Loop0B
000000FB F6                       M 	dc.b	$f6
000000FC 0000                     M 	dc.w	((cnz_2p_loop0b&$7fff)<<8)&$ff00+(cnz_2p_loop0b&$7fff)>>8
000000FE                            
000000FE                            CNZ_2p_Call0C:
000000FE A70C B306 80B1 80B3 0CA7+  	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
0000010A 06A7 03B3 0CB1 B309 AE03+  	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, $09, nA3, $03, nG3, $06
00000116 80AC 0CAE 0680 AE0C AF06+  	dc.b	nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $27
00000122 B103                       	dc.b	nC4, $03
00000124                            	smpsReturn
00000124 E3                       M 	dc.b	$e3
00000125                            
00000125                            ; FM2 Data
00000125                            CNZ_2p_FM2:
00000125                            	smpsSetvoice        $01
00000125                          M 	smpsfmvoice	$01
00000125 EF01                     M 	dc.b	$ef,$01
00000127                            	smpsCall            CNZ_2p_Call05
00000127 F8                       M 	dc.b	$f8
00000128 0000                     M 	dc.w	((cnz_2p_call05&$7fff)<<8)&$ff00+(cnz_2p_call05&$7fff)>>8
0000012A                            
0000012A                            CNZ_2p_Loop08:
0000012A                            	smpsCall            CNZ_2p_Call06
0000012A F8                       M 	dc.b	$f8
0000012B 0000                     M 	dc.w	((cnz_2p_call06&$7fff)<<8)&$ff00+(cnz_2p_call06&$7fff)>>8
0000012D                            	smpsLoop            $00, $02, CNZ_2p_Loop08
0000012D F7                       M 	dc.b	$f7
0000012E 0002                     M 	dc.b	index,loops
00000130 0000                     M 	dc.w	((cnz_2p_loop08&$7fff)<<8)&$ff00+(cnz_2p_loop08&$7fff)>>8
00000132                            	smpsSetvoice        $03
00000132                          M 	smpsfmvoice	$03
00000132 EF03                     M 	dc.b	$ef,$03
00000134                            	smpsAlterNote       $02
00000134                          M 	smpsdetune	$02
00000134 E102                     M 	dc.b	$e1,$02
00000136                            	smpsAlterVol        $07
00000136 E607                     M 	dc.b	$e6,$07
00000138                            
00000138                            CNZ_2p_Loop09:
00000138                            	smpsCall            CNZ_2p_Call07
00000138 F8                       M 	dc.b	$f8
00000139 0000                     M 	dc.w	((cnz_2p_call07&$7fff)<<8)&$ff00+(cnz_2p_call07&$7fff)>>8
0000013B                            	smpsLoop            $00, $02, CNZ_2p_Loop09
0000013B F7                       M 	dc.b	$f7
0000013C 0002                     M 	dc.b	index,loops
0000013E 0000                     M 	dc.w	((cnz_2p_loop09&$7fff)<<8)&$ff00+(cnz_2p_loop09&$7fff)>>8
00000140                            
00000140                            CNZ_2p_Loop0A:
00000140                            	smpsCall            CNZ_2p_Call08
00000140 F8                       M 	dc.b	$f8
00000141 0000                     M 	dc.w	((cnz_2p_call08&$7fff)<<8)&$ff00+(cnz_2p_call08&$7fff)>>8
00000143                            	smpsLoop            $00, $02, CNZ_2p_Loop0A
00000143 F7                       M 	dc.b	$f7
00000144 0002                     M 	dc.b	index,loops
00000146 0000                     M 	dc.w	((cnz_2p_loop0a&$7fff)<<8)&$ff00+(cnz_2p_loop0a&$7fff)>>8
00000148                            	smpsSetvoice        $01
00000148                          M 	smpsfmvoice	$01
00000148 EF01                     M 	dc.b	$ef,$01
0000014A                            	smpsAlterNote       $00
0000014A                          M 	smpsdetune	$00
0000014A E100                     M 	dc.b	$e1,$00
0000014C                            	smpsAlterVol        $F9
0000014C E6F9                     M 	dc.b	$e6,$f9
0000014E                            	smpsCall            CNZ_2p_Call0A
0000014E F8                       M 	dc.b	$f8
0000014F 0000                     M 	dc.w	((cnz_2p_call0a&$7fff)<<8)&$ff00+(cnz_2p_call0a&$7fff)>>8
00000151                            	smpsCall            CNZ_2p_Call0B
00000151 F8                       M 	dc.b	$f8
00000152 0000                     M 	dc.w	((cnz_2p_call0b&$7fff)<<8)&$ff00+(cnz_2p_call0b&$7fff)>>8
00000154                            	smpsJump            CNZ_2p_Loop08
00000154 F6                       M 	dc.b	$f6
00000155 0000                     M 	dc.w	((cnz_2p_loop08&$7fff)<<8)&$ff00+(cnz_2p_loop08&$7fff)>>8
00000157                            
00000157                            CNZ_2p_Call0A:
00000157 8009 D00F CD06 80C9 80CE+  	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
00000163 CB06 80CB 80C9 09CB 0680+  	dc.b	nD6, $06, nRst, nD6, nRst, nC6, $09, nD6, $06, nRst, nA5, $33
0000016F 8009 D00F CD06 80C9 80CE+  	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
0000017B 800C CB06 80CD 09CB 0680+  	dc.b	nRst, $0C, nD6, $06, nRst, nE6, $09, nD6, $06, nRst, nF6, $33
00000187                            	smpsReturn
00000187 E3                       M 	dc.b	$e3
00000188                            
00000188                            CNZ_2p_Call0B:
00000188 8009 D00F CD06 80C9 80CE+  	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
00000194 CB06 80CB 80C9 09CB 0680+  	dc.b	nD6, $06, nRst, nD6, nRst, nC6, $09, nD6, $06, nRst, nA5, $33
000001A0 8009 D00F CD06 80C9 80CE+  	dc.b	nRst, $09, nG6, $0F, nE6, $06, nRst, nC6, nRst, nF6, $18, nE6
000001AC 8009 CB0F CE06 80CD 8003+  	dc.b	nRst, $09, nD6, $0F, nF6, $06, nRst, nE6, nRst, $03, nD6, $06
000001B8 802D                       	dc.b	nRst, $2D
000001BA                            	smpsReturn
000001BA E3                       M 	dc.b	$e3
000001BB                            
000001BB                            CNZ_2p_Call05:
000001BB D206 8012 D215 CD03 D206+  	dc.b	nA6, $06, nRst, $12, nA6, $15, nE6, $03, nA6, $06, nRst, nG6
000001C7 80CE 80CD 80               	dc.b	nRst, nF6, nRst, nE6, nRst
000001CC                            	smpsReturn
000001CC E3                       M 	dc.b	$e3
000001CD                            
000001CD                            CNZ_2p_Call06:
000001CD C909 CB06 80CB 80CB 03C9+  	dc.b	nC6, $09, nD6, $06, nRst, nD6, nRst, nD6, $03, nC6, $0C, nF6
000001D9 0680 CB24 8060             	dc.b	$06, nRst, nD6, $24, nRst, $60
000001DF                            	smpsReturn
000001DF E3                       M 	dc.b	$e3
000001E0                            
000001E0                            ; FM3 Data
000001E0                            CNZ_2p_FM3:
000001E0                            	smpsSetvoice        $02
000001E0                          M 	smpsfmvoice	$02
000001E0 EF02                     M 	dc.b	$ef,$02
000001E2 8060                       	dc.b	nRst, $60
000001E4                            
000001E4                            CNZ_2p_Loop06:
000001E4 8060 3CCE 09CD 03CE 09CD+  	dc.b	nRst, $60, $3C, nF6, $09, nE6, $03, nF6, $09, nE6, $03
000001EF CE06 80                    	dc.b	nF6, $06, nRst
000001F2                            	smpsLoop            $00, $02, CNZ_2p_Loop06
000001F2 F7                       M 	dc.b	$f7
000001F3 0002                     M 	dc.b	index,loops
000001F5 0000                     M 	dc.w	((cnz_2p_loop06&$7fff)<<8)&$ff00+(cnz_2p_loop06&$7fff)>>8
000001F7                            	smpsAlterVol        $04
000001F7 E604                     M 	dc.b	$e6,$04
000001F9                            	smpsPan             panRight, $00
000001F9 E040                     M 	dc.b	$e0,direction+amsfms
000001FB                            
000001FB                            CNZ_2p_Loop07:
000001FB 8060 30C6 0680 C20C C409+  	dc.b	nRst, $60, $30, nA5, $06, nRst, nF5, $0C, nG5, $09, nF5
00000206 03BF 0C80 6030 C606 80C2+  	dc.b	$03, nD5, $0C, nRst, $60, $30, nA5, $06, nRst, nF5, $0C
00000211 C409 C603 800C             	dc.b	nG5, $09, nA5, $03, nRst, $0C
00000217                            	smpsLoop            $00, $02, CNZ_2p_Loop07
00000217 F7                       M 	dc.b	$f7
00000218 0002                     M 	dc.b	index,loops
0000021A 0000                     M 	dc.w	((cnz_2p_loop07&$7fff)<<8)&$ff00+(cnz_2p_loop07&$7fff)>>8
0000021C                            	smpsAlterVol        $FC
0000021C E6FC                     M 	dc.b	$e6,$fc
0000021E                            	smpsPan             panCenter, $00
0000021E E0C0                     M 	dc.b	$e0,direction+amsfms
00000220                            	smpsSetvoice        $01
00000220                          M 	smpsfmvoice	$01
00000220 EF01                     M 	dc.b	$ef,$01
00000222                            	smpsAlterNote       $02
00000222                          M 	smpsdetune	$02
00000222 E102                     M 	dc.b	$e1,$02
00000224                            	smpsAlterPitch      $F4
00000224                          M 	smpschangetransposition	$f4
00000224 E9F4                     M 	dc.b	$e9,$f4
00000226                            	smpsAlterVol        $FF
00000226 E6FF                     M 	dc.b	$e6,$ff
00000228                            	smpsCall            CNZ_2p_Call0A
00000228 F8                       M 	dc.b	$f8
00000229 0000                     M 	dc.w	((cnz_2p_call0a&$7fff)<<8)&$ff00+(cnz_2p_call0a&$7fff)>>8
0000022B                            	smpsCall            CNZ_2p_Call0B
0000022B F8                       M 	dc.b	$f8
0000022C 0000                     M 	dc.w	((cnz_2p_call0b&$7fff)<<8)&$ff00+(cnz_2p_call0b&$7fff)>>8
0000022E                            	smpsSetvoice        $02
0000022E                          M 	smpsfmvoice	$02
0000022E EF02                     M 	dc.b	$ef,$02
00000230                            	smpsAlterNote       $00
00000230                          M 	smpsdetune	$00
00000230 E100                     M 	dc.b	$e1,$00
00000232                            	smpsAlterPitch      $0C
00000232                          M 	smpschangetransposition	$0c
00000232 E90C                     M 	dc.b	$e9,$0c
00000234                            	smpsAlterVol        $01
00000234 E601                     M 	dc.b	$e6,$01
00000236                            	smpsJump            CNZ_2p_Loop06
00000236 F6                       M 	dc.b	$f6
00000237 0000                     M 	dc.w	((cnz_2p_loop06&$7fff)<<8)&$ff00+(cnz_2p_loop06&$7fff)>>8
00000239                            
00000239                            ; FM4 Data
00000239                            CNZ_2p_FM4:
00000239                            	smpsSetvoice        $01
00000239                          M 	smpsfmvoice	$01
00000239 EF01                     M 	dc.b	$ef,$01
0000023B                            	smpsAlterNote       $02
0000023B                          M 	smpsdetune	$02
0000023B E102                     M 	dc.b	$e1,$02
0000023D                            	smpsCall            CNZ_2p_Call05
0000023D F8                       M 	dc.b	$f8
0000023E 0000                     M 	dc.w	((cnz_2p_call05&$7fff)<<8)&$ff00+(cnz_2p_call05&$7fff)>>8
00000240                            
00000240                            CNZ_2p_Loop03:
00000240                            	smpsCall            CNZ_2p_Call06
00000240 F8                       M 	dc.b	$f8
00000241 0000                     M 	dc.w	((cnz_2p_call06&$7fff)<<8)&$ff00+(cnz_2p_call06&$7fff)>>8
00000243                            	smpsLoop            $00, $02, CNZ_2p_Loop03
00000243 F7                       M 	dc.b	$f7
00000244 0002                     M 	dc.b	index,loops
00000246 0000                     M 	dc.w	((cnz_2p_loop03&$7fff)<<8)&$ff00+(cnz_2p_loop03&$7fff)>>8
00000248                            	smpsSetvoice        $03
00000248                          M 	smpsfmvoice	$03
00000248 EF03                     M 	dc.b	$ef,$03
0000024A                            	smpsAlterNote       $00
0000024A                          M 	smpsdetune	$00
0000024A E100                     M 	dc.b	$e1,$00
0000024C                            	smpsAlterPitch      $0C
0000024C                          M 	smpschangetransposition	$0c
0000024C E90C                     M 	dc.b	$e9,$0c
0000024E                            	smpsAlterVol        $04
0000024E E604                     M 	dc.b	$e6,$04
00000250                            	smpsModSet          $01, $01, $03, $03
00000250 F0                       M 	dc.b	$f0
00000251 0101 0303                M 	dc.b	$01,$01,$03,$03
00000255                            
00000255                            CNZ_2p_Loop04:
00000255                            	smpsCall            CNZ_2p_Call07
00000255 F8                       M 	dc.b	$f8
00000256 0000                     M 	dc.w	((cnz_2p_call07&$7fff)<<8)&$ff00+(cnz_2p_call07&$7fff)>>8
00000258                            	smpsLoop            $00, $02, CNZ_2p_Loop04
00000258 F7                       M 	dc.b	$f7
00000259 0002                     M 	dc.b	index,loops
0000025B 0000                     M 	dc.w	((cnz_2p_loop04&$7fff)<<8)&$ff00+(cnz_2p_loop04&$7fff)>>8
0000025D                            
0000025D                            CNZ_2p_Loop05:
0000025D                            	smpsCall            CNZ_2p_Call08
0000025D F8                       M 	dc.b	$f8
0000025E 0000                     M 	dc.w	((cnz_2p_call08&$7fff)<<8)&$ff00+(cnz_2p_call08&$7fff)>>8
00000260                            	smpsLoop            $00, $02, CNZ_2p_Loop05
00000260 F7                       M 	dc.b	$f7
00000261 0002                     M 	dc.b	index,loops
00000263 0000                     M 	dc.w	((cnz_2p_loop05&$7fff)<<8)&$ff00+(cnz_2p_loop05&$7fff)>>8
00000265                            	smpsSetvoice        $01
00000265                          M 	smpsfmvoice	$01
00000265 EF01                     M 	dc.b	$ef,$01
00000267                            	smpsCall            CNZ_2p_Call09
00000267 F8                       M 	dc.b	$f8
00000268 0000                     M 	dc.w	((cnz_2p_call09&$7fff)<<8)&$ff00+(cnz_2p_call09&$7fff)>>8
0000026A C003 E7C1 2DC0 03E7 C12D   	dc.b	nEb5, $03, smpsNoAttack, nE5, $2D, nEb5, $03, smpsNoAttack, nE5, $2D
00000274                            	smpsPan             panLeft, $00
00000274 E080                     M 	dc.b	$e0,direction+amsfms
00000276 800C C206 80C4 09C2 0680+  	dc.b	nRst, $0C, nF5, $06, nRst, nG5, $09, nF5, $06, nRst, nA5, $2D
00000282 8006                       	dc.b	nRst, $06
00000284                            	smpsCall            CNZ_2p_Call09
00000284 F8                       M 	dc.b	$f8
00000285 0000                     M 	dc.w	((cnz_2p_call09&$7fff)<<8)&$ff00+(cnz_2p_call09&$7fff)>>8
00000287 C003 E7C1 2DC0 03E7 C12D   	dc.b	nEb5, $03, smpsNoAttack, nE5, $2D, nEb5, $03, smpsNoAttack, nE5, $2D
00000291                            	smpsPan             panLeft, $00
00000291 E080                     M 	dc.b	$e0,direction+amsfms
00000293 8009 C280 06C2 0980 0CC2+  	dc.b	nRst, $09, nF5, nRst, $06, nF5, $09, nRst, $0C, nF5, $06, nRst
0000029F 2D                         	dc.b	$2D
000002A0                            	smpsAlterNote       $02
000002A0                          M 	smpsdetune	$02
000002A0 E102                     M 	dc.b	$e1,$02
000002A2                            	smpsAlterPitch      $F4
000002A2                          M 	smpschangetransposition	$f4
000002A2 E9F4                     M 	dc.b	$e9,$f4
000002A4                            	smpsAlterVol        $FC
000002A4 E6FC                     M 	dc.b	$e6,$fc
000002A6                            	smpsPan             panCenter, $00
000002A6 E0C0                     M 	dc.b	$e0,direction+amsfms
000002A8                            	smpsModOff
000002A8 F4                       M 	dc.b	$f4
000002A9                            	smpsJump            CNZ_2p_Loop03
000002A9 F6                       M 	dc.b	$f6
000002AA 0000                     M 	dc.w	((cnz_2p_loop03&$7fff)<<8)&$ff00+(cnz_2p_loop03&$7fff)>>8
000002AC                            
000002AC                            CNZ_2p_Call09:
000002AC                            	smpsPan             panCenter, $00
000002AC E0C0                     M 	dc.b	$e0,direction+amsfms
000002AE C003 E7C1 2DC0 03E7 C12D   	dc.b	nEb5, $03, smpsNoAttack, nE5, $2D, nEb5, $03, smpsNoAttack, nE5, $2D
000002B8                            	smpsPan             panLeft, $00
000002B8 E080                     M 	dc.b	$e0,direction+amsfms
000002BA C206 80C2 80C1 09C2 0680+  	dc.b	nF5, $06, nRst, nF5, nRst, nE5, $09, nF5, $06, nRst, nF5, $0C
000002C6 C103 C206 80C1 09C2 0680+  	dc.b	nE5, $03, nF5, $06, nRst, nE5, $09, nF5, $06, nRst, $09
000002D1                            	smpsPan             panCenter, $00
000002D1 E0C0                     M 	dc.b	$e0,direction+amsfms
000002D3                            	smpsReturn
000002D3 E3                       M 	dc.b	$e3
000002D4                            
000002D4                            CNZ_2p_Call07:
000002D4 CE15 CD03 CB06 80C9 0CCD+  	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
000002E0 C90C CB06 8012 8060        	dc.b	nC6, $0C, nD6, $06, nRst, $12, nRst, $60
000002E8                            	smpsReturn
000002E8 E3                       M 	dc.b	$e3
000002E9                            
000002E9                            CNZ_2p_Call08:
000002E9 D215 D003 CE06 80CD 0CD0+  	dc.b	nA6, $15, nG6, $03, nF6, $06, nRst, nE6, $0C, nG6, $06, nRst
000002F5 CD0C CE06 8012 8060        	dc.b	nE6, $0C, nF6, $06, nRst, $12, nRst, $60
000002FD                            	smpsReturn
000002FD E3                       M 	dc.b	$e3
000002FE                            
000002FE                            ; FM5 Data
000002FE                            CNZ_2p_FM5:
000002FE                            	smpsSetvoice        $02
000002FE                          M 	smpsfmvoice	$02
000002FE EF02                     M 	dc.b	$ef,$02
00000300 8060                       	dc.b	nRst, $60
00000302                            	smpsPan             panRight, $00
00000302 E040                     M 	dc.b	$e0,direction+amsfms
00000304                            
00000304                            CNZ_2p_Loop02:
00000304 8060 803C CB09 C903 CB09+  	dc.b	nRst, $60, nRst, $3C, nD6, $09, nC6, $03, nD6, $09, nC6, $03
00000310 CB06 80                    	dc.b	nD6, $06, nRst
00000313                            	smpsLoop            $00, $02, CNZ_2p_Loop02
00000313 F7                       M 	dc.b	$f7
00000314 0002                     M 	dc.b	index,loops
00000316 0000                     M 	dc.w	((cnz_2p_loop02&$7fff)<<8)&$ff00+(cnz_2p_loop02&$7fff)>>8
00000318                            	smpsSetvoice        $04
00000318                          M 	smpsfmvoice	$04
00000318 EF04                     M 	dc.b	$ef,$04
0000031A                            	smpsPan             panCenter, $00
0000031A E0C0                     M 	dc.b	$e0,direction+amsfms
0000031C 8060                       	dc.b	nRst, $60
0000031E                            	smpsCall            CNZ_2p_Call01
0000031E F8                       M 	dc.b	$f8
0000031F 0000                     M 	dc.w	((cnz_2p_call01&$7fff)<<8)&$ff00+(cnz_2p_call01&$7fff)>>8
00000321 8060                       	dc.b	nRst, $60
00000323                            	smpsCall            CNZ_2p_Call02
00000323 F8                       M 	dc.b	$f8
00000324 0000                     M 	dc.w	((cnz_2p_call02&$7fff)<<8)&$ff00+(cnz_2p_call02&$7fff)>>8
00000326                            	smpsSetvoice        $03
00000326                          M 	smpsfmvoice	$03
00000326 EF03                     M 	dc.b	$ef,$03
00000328                            	smpsAlterVol        $02
00000328 E602                     M 	dc.b	$e6,$02
0000032A                            	smpsPan             panLeft, $00
0000032A E080                     M 	dc.b	$e0,direction+amsfms
0000032C                            	smpsModSet          $01, $01, $03, $03
0000032C F0                       M 	dc.b	$f0
0000032D 0101 0303                M 	dc.b	$01,$01,$03,$03
00000331                            	smpsCall            CNZ_2p_Call03
00000331 F8                       M 	dc.b	$f8
00000332 0000                     M 	dc.w	((cnz_2p_call03&$7fff)<<8)&$ff00+(cnz_2p_call03&$7fff)>>8
00000334                            	smpsSetvoice        $04
00000334                          M 	smpsfmvoice	$04
00000334 EF04                     M 	dc.b	$ef,$04
00000336                            	smpsAlterVol        $FC
00000336 E6FC                     M 	dc.b	$e6,$fc
00000338                            	smpsPan             panCenter, $00
00000338 E0C0                     M 	dc.b	$e0,direction+amsfms
0000033A                            	smpsCall            CNZ_2p_Call01
0000033A F8                       M 	dc.b	$f8
0000033B 0000                     M 	dc.w	((cnz_2p_call01&$7fff)<<8)&$ff00+(cnz_2p_call01&$7fff)>>8
0000033D                            	smpsSetvoice        $03
0000033D                          M 	smpsfmvoice	$03
0000033D EF03                     M 	dc.b	$ef,$03
0000033F                            	smpsPan             panLeft, $00
0000033F E080                     M 	dc.b	$e0,direction+amsfms
00000341                            	smpsAlterVol        $04
00000341 E604                     M 	dc.b	$e6,$04
00000343                            	smpsCall            CNZ_2p_Call03
00000343 F8                       M 	dc.b	$f8
00000344 0000                     M 	dc.w	((cnz_2p_call03&$7fff)<<8)&$ff00+(cnz_2p_call03&$7fff)>>8
00000346                            	smpsSetvoice        $04
00000346                          M 	smpsfmvoice	$04
00000346 EF04                     M 	dc.b	$ef,$04
00000348                            	smpsAlterVol        $FC
00000348 E6FC                     M 	dc.b	$e6,$fc
0000034A                            	smpsPan             panCenter, $00
0000034A E0C0                     M 	dc.b	$e0,direction+amsfms
0000034C                            	smpsCall            CNZ_2p_Call02
0000034C F8                       M 	dc.b	$f8
0000034D 0000                     M 	dc.w	((cnz_2p_call02&$7fff)<<8)&$ff00+(cnz_2p_call02&$7fff)>>8
0000034F                            	smpsAlterVol        $04
0000034F E604                     M 	dc.b	$e6,$04
00000351                            	smpsSetvoice        $01
00000351                          M 	smpsfmvoice	$01
00000351 EF01                     M 	dc.b	$ef,$01
00000353                            	smpsCall            CNZ_2p_Call04
00000353 F8                       M 	dc.b	$f8
00000354 0000                     M 	dc.w	((cnz_2p_call04&$7fff)<<8)&$ff00+(cnz_2p_call04&$7fff)>>8
00000356 BC03 E7BD 2DBD 03E7 BE2D   	dc.b	nB4, $03, smpsNoAttack, nC5, $2D, nC5, $03, smpsNoAttack, nCs5, $2D
00000360                            	smpsPan             panRight, $00
00000360 E040                     M 	dc.b	$e0,direction+amsfms
00000362 800C BF06 80C1 09BF 0380+  	dc.b	nRst, $0C, nD5, $06, nRst, nE5, $09, nD5, $03, nRst, $09, nF5
0000036E 2D80 06                    	dc.b	$2D, nRst, $06
00000371                            	smpsCall            CNZ_2p_Call04
00000371 F8                       M 	dc.b	$f8
00000372 0000                     M 	dc.w	((cnz_2p_call04&$7fff)<<8)&$ff00+(cnz_2p_call04&$7fff)>>8
00000374 BC03 E7BD 2DBD 03E7 BE2D   	dc.b	nB4, $03, smpsNoAttack, nC5, $2D, nC5, $03, smpsNoAttack, nCs5, $2D
0000037E                            	smpsPan             panRight, $00
0000037E E040                     M 	dc.b	$e0,direction+amsfms
00000380 8009 BF80 06BF 0980 0CBF+  	dc.b	nRst, $09, nD5, nRst, $06, nD5, $09, nRst, $0C, nD5, $06, nRst
0000038C 2D                         	dc.b	$2D
0000038D                            	smpsSetvoice        $02
0000038D                          M 	smpsfmvoice	$02
0000038D EF02                     M 	dc.b	$ef,$02
0000038F                            	smpsPan             panRight, $00
0000038F E040                     M 	dc.b	$e0,direction+amsfms
00000391                            	smpsAlterVol        $FE
00000391 E6FE                     M 	dc.b	$e6,$fe
00000393                            	smpsModOff
00000393 F4                       M 	dc.b	$f4
00000394                            	smpsJump            CNZ_2p_Loop02
00000394 F6                       M 	dc.b	$f6
00000395 0000                     M 	dc.w	((cnz_2p_loop02&$7fff)<<8)&$ff00+(cnz_2p_loop02&$7fff)>>8
00000397                            
00000397                            CNZ_2p_Call04:
00000397                            	smpsPan             panCenter, $00
00000397 E0C0                     M 	dc.b	$e0,direction+amsfms
00000399 BC03 E7BD 2DBD 03E7 BE2D   	dc.b	nB4, $03, smpsNoAttack, nC5, $2D, nC5, $03, smpsNoAttack, nCs5, $2D
000003A3                            	smpsPan             panRight, $00
000003A3 E040                     M 	dc.b	$e0,direction+amsfms
000003A5 BF06 80BF 80BD 09BF 0680+  	dc.b	nD5, $06, nRst, nD5, nRst, nC5, $09, nD5, $06, nRst, nD5, $0C
000003B1 BD03 BF06 80BD 09BF 0680+  	dc.b	nC5, $03, nD5, $06, nRst, nC5, $09, nD5, $06, nRst, $09
000003BC                            	smpsPan             panCenter, $00
000003BC E0C0                     M 	dc.b	$e0,direction+amsfms
000003BE                            	smpsReturn
000003BE E3                       M 	dc.b	$e3
000003BF                            
000003BF                            CNZ_2p_Call01:
000003BF AC06 80AC 0CAE 0680 AE0C+  	dc.b	nG3, $06, nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06
000003CB 8027 B103                  	dc.b	nRst, $27, nC4, $03
000003CF                            	smpsReturn
000003CF E3                       M 	dc.b	$e3
000003D0                            
000003D0                            CNZ_2p_Call03:
000003D0 CE15 CD03 CB06 80C9 0CCD+  	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
000003DC C90C CB06 8012             	dc.b	nC6, $0C, nD6, $06, nRst, $12
000003E2                            	smpsReturn
000003E2 E3                       M 	dc.b	$e3
000003E3                            
000003E3                            CNZ_2p_Call02:
000003E3 AC06 80AC 0CAE 0680 AE0C+  	dc.b	nG3, $06, nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06
000003EF 802A                       	dc.b	nRst, $2A
000003F1                            	smpsReturn
000003F1 E3                       M 	dc.b	$e3
000003F2                            
000003F2                            ; PSG1 Data
000003F2                            CNZ_2p_PSG1:
000003F2 8060                       	dc.b	nRst, $60
000003F4                            	smpsNoteFill        $06
000003F4 E806                     M 	dc.b	$e8,$06
000003F6                            
000003F6                            CNZ_2p_Loop10:
000003F6 800C C280 C280 C280 C280+  	dc.b	nRst, $0C, nF5, nRst, nF5, nRst, nF5, nRst, nF5, nRst, nD5, nRst
00000402 BF80 BF80 BF               	dc.b	nD5, nRst, nD5, nRst, nD5
00000407                            	smpsLoop            $00, $02, CNZ_2p_Loop10
00000407 F7                       M 	dc.b	$f7
00000408 0002                     M 	dc.b	index,loops
0000040A 0000                     M 	dc.w	((cnz_2p_loop10&$7fff)<<8)&$ff00+(cnz_2p_loop10&$7fff)>>8
0000040C 8060 800C C280 C280 C280+  	dc.b	nRst, $60, nRst, $0C, nF5, nRst, nF5, nRst, nF5, nRst, nF5, nRst
00000418 6080 0CC2 80C2 80C2 0480+  	dc.b	$60, nRst, $0C, nF5, nRst, nF5, nRst, nF5, $04, nRst, nF5, nRst
00000424 0CC2                       	dc.b	$0C, nF5
00000426                            
00000426                            CNZ_2p_Loop11:
00000426 8060 800C C280 C280 C280+  	dc.b	nRst, $60, nRst, $0C, nF5, nRst, nF5, nRst, nF5, nRst, nF5
00000431                            	smpsLoop            $00, $02, CNZ_2p_Loop11
00000431 F7                       M 	dc.b	$f7
00000432 0002                     M 	dc.b	index,loops
00000434 0000                     M 	dc.w	((cnz_2p_loop11&$7fff)<<8)&$ff00+(cnz_2p_loop11&$7fff)>>8
00000436                            
00000436                            CNZ_2p_Loop12:
00000436 800C C980 C980 CA80 CA80+  	dc.b	nRst, $0C, nC6, nRst, nC6, nRst, nCs6, nRst, nCs6, nRst, nD6, nRst
00000442 CB80 CB80 CB               	dc.b	nD6, nRst, nD6, nRst, nD6
00000447                            	smpsLoop            $00, $03, CNZ_2p_Loop12
00000447 F7                       M 	dc.b	$f7
00000448 0003                     M 	dc.b	index,loops
0000044A 0000                     M 	dc.w	((cnz_2p_loop12&$7fff)<<8)&$ff00+(cnz_2p_loop12&$7fff)>>8
0000044C 800C C980 C980 CA80 CA80+  	dc.b	nRst, $0C, nC6, nRst, nC6, nRst, nCs6, nRst, nCs6, nRst, $60
00000457                            	smpsJump            CNZ_2p_Loop10
00000457 F6                       M 	dc.b	$f6
00000458 0000                     M 	dc.w	((cnz_2p_loop10&$7fff)<<8)&$ff00+(cnz_2p_loop10&$7fff)>>8
0000045A                            
0000045A                            ; PSG2 Data
0000045A                            CNZ_2p_PSG2:
0000045A 8060                       	dc.b	nRst, $60
0000045C                            	smpsNoteFill        $06
0000045C E806                     M 	dc.b	$e8,$06
0000045E                            
0000045E                            CNZ_2p_Loop0D:
0000045E 800C BF80 BF80 BF80 BF80+  	dc.b	nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5, nRst, nBb4, nRst
0000046A BB80 BB80 BB               	dc.b	nBb4, nRst, nBb4, nRst, nBb4
0000046F                            	smpsLoop            $00, $02, CNZ_2p_Loop0D
0000046F F7                       M 	dc.b	$f7
00000470 0002                     M 	dc.b	index,loops
00000472 0000                     M 	dc.w	((cnz_2p_loop0d&$7fff)<<8)&$ff00+(cnz_2p_loop0d&$7fff)>>8
00000474 8060 800C BF80 BF80 BF80+  	dc.b	nRst, $60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5, nRst
00000480 6080 0CBF 80BF 80BF 0480+  	dc.b	$60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, $04, nRst, nD5, nRst
0000048C 0CBF                       	dc.b	$0C, nD5
0000048E                            
0000048E                            CNZ_2p_Loop0E:
0000048E 8060 800C BF80 BF80 BF80+  	dc.b	nRst, $60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5
00000499                            	smpsLoop            $00, $02, CNZ_2p_Loop0E
00000499 F7                       M 	dc.b	$f7
0000049A 0002                     M 	dc.b	index,loops
0000049C 0000                     M 	dc.w	((cnz_2p_loop0e&$7fff)<<8)&$ff00+(cnz_2p_loop0e&$7fff)>>8
0000049E                            
0000049E                            CNZ_2p_Loop0F:
0000049E 800C C680 C680 C680 C680+  	dc.b	nRst, $0C, nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst
000004AA C680 C680 C6               	dc.b	nA5, nRst, nA5, nRst, nA5
000004AF                            	smpsLoop            $00, $03, CNZ_2p_Loop0F
000004AF F7                       M 	dc.b	$f7
000004B0 0003                     M 	dc.b	index,loops
000004B2 0000                     M 	dc.w	((cnz_2p_loop0f&$7fff)<<8)&$ff00+(cnz_2p_loop0f&$7fff)>>8
000004B4 800C C680 C680 C680 C680+  	dc.b	nRst, $0C, nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst, $60
000004BF                            	smpsJump            CNZ_2p_Loop0D
000004BF F6                       M 	dc.b	$f6
000004C0 0000                     M 	dc.w	((cnz_2p_loop0d&$7fff)<<8)&$ff00+(cnz_2p_loop0d&$7fff)>>8
000004C2                            
000004C2                            ; PSG3 Data
000004C2                            CNZ_2p_PSG3:
000004C2                            	smpsJump            CNZ_2p_PSG1
000004C2 F6                       M 	dc.b	$f6
000004C3 0000                     M 	dc.w	((cnz_2p_psg1&$7fff)<<8)&$ff00+(cnz_2p_psg1&$7fff)>>8
000004C5                            
000004C5                            ; DAC Data
000004C5                            CNZ_2p_DAC:
000004C5 800C 8281 8282 8282 82     	dc.b	nRst, $0C, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare
000004CE                            
000004CE                            CNZ_2p_Loop00:
000004CE                            	smpsCall            CNZ_2p_Call00
000004CE F8                       M 	dc.b	$f8
000004CF 0000                     M 	dc.w	((cnz_2p_call00&$7fff)<<8)&$ff00+(cnz_2p_call00&$7fff)>>8
000004D1                            	smpsLoop            $00, $03, CNZ_2p_Loop00
000004D1 F7                       M 	dc.b	$f7
000004D2 0003                     M 	dc.b	index,loops
000004D4 0000                     M 	dc.w	((cnz_2p_loop00&$7fff)<<8)&$ff00+(cnz_2p_loop00&$7fff)>>8
000004D6 8109 8103 0C82 8181 1582+  	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $15, dSnare, $03, $18
000004E2                            
000004E2                            CNZ_2p_Loop01:
000004E2                            	smpsCall            CNZ_2p_Call00
000004E2 F8                       M 	dc.b	$f8
000004E3 0000                     M 	dc.w	((cnz_2p_call00&$7fff)<<8)&$ff00+(cnz_2p_call00&$7fff)>>8
000004E5                            	smpsLoop            $00, $0F, CNZ_2p_Loop01
000004E5 F7                       M 	dc.b	$f7
000004E6 000F                     M 	dc.b	index,loops
000004E8 0000                     M 	dc.w	((cnz_2p_loop01&$7fff)<<8)&$ff00+(cnz_2p_loop01&$7fff)>>8
000004EA 8009 810F 820C 8109 821B+  	dc.b	nRst, $09, dKick, $0F, dSnare, $0C, dKick, $09, dSnare, $1B, $0C, $09
000004F6 03                         	dc.b	$03
000004F7                            	smpsJump            CNZ_2p_Loop00
000004F7 F6                       M 	dc.b	$f6
000004F8 0000                     M 	dc.w	((cnz_2p_loop00&$7fff)<<8)&$ff00+(cnz_2p_loop00&$7fff)>>8
000004FA                            
000004FA                            CNZ_2p_Call00:
000004FA 8109 8103 0C82 8181 1882   	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $18, dSnare
00000504                            	smpsReturn
00000504 E3                       M 	dc.b	$e3
00000505                            
00000505                            CNZ_2p_Voices:
00000505                            ;	Voice $00
00000505                            ;	$08
00000505                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00000505                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $80
00000505                            	smpsVcAlgorithm     $00
00000505 =00000000                M vcalgorithm	set	val
00000505                            	smpsVcFeedback      $01
00000505 =00000001                M vcfeedback	set	val
00000505                            	smpsVcUnusedBits    $00
00000505 =00000000                M vcunusedbits	set	val
00000505 =00000000                M vcd1r1unk	set	0
00000505 =00000000                M vcd1r2unk	set	0
00000505 =00000000                M vcd1r3unk	set	0
00000505 =00000000                M vcd1r4unk	set	0
00000505                            	smpsVcDetune        $00, $03, $07, $00
00000505 =00000000                M vcdt1	set	op1
00000505 =00000003                M vcdt2	set	op2
00000505 =00000007                M vcdt3	set	op3
00000505 =00000000                M vcdt4	set	op4
00000505                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000505 =00000000                M vccf1	set	op1
00000505 =00000000                M vccf2	set	op2
00000505 =00000000                M vccf3	set	op3
00000505 =00000009                M vccf4	set	op4
00000505                            	smpsVcRateScale     $01, $01, $00, $00
00000505 =00000001                M vcrs1	set	op1
00000505 =00000001                M vcrs2	set	op2
00000505 =00000000                M vcrs3	set	op3
00000505 =00000000                M vcrs4	set	op4
00000505                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000505 =0000001F                M vcar1	set	op1
00000505 =0000001F                M vcar2	set	op2
00000505 =0000001F                M vcar3	set	op3
00000505 =0000001F                M vcar4	set	op4
00000505                            	smpsVcAmpMod        $00, $00, $00, $00
00000505 =00000000                M vcam1	set	op1<<5
00000505 =00000000                M vcam2	set	op2<<5
00000505 =00000000                M vcam3	set	op3<<5
00000505 =00000000                M vcam4	set	op4<<5
00000505                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00000505 =0000000A                M vcd1r1	set	op1
00000505 =0000000A                M vcd1r2	set	op2
00000505 =0000000E                M vcd1r3	set	op3
00000505 =00000012                M vcd1r4	set	op4
00000505                            	smpsVcDecayRate2    $03, $04, $04, $00
00000505 =00000003                M vcd2r1	set	op1
00000505 =00000004                M vcd2r2	set	op2
00000505 =00000004                M vcd2r3	set	op3
00000505 =00000000                M vcd2r4	set	op4
00000505                            	smpsVcDecayLevel    $02, $02, $02, $02
00000505 =00000002                M vcdl1	set	op1
00000505 =00000002                M vcdl2	set	op2
00000505 =00000002                M vcdl3	set	op3
00000505 =00000002                M vcdl4	set	op4
00000505                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000505 =0000000F                M vcrr1	set	op1
00000505 =0000000F                M vcrr2	set	op2
00000505 =0000000F                M vcrr3	set	op3
00000505 =0000000F                M vcrr4	set	op4
00000505                            	smpsVcTotalLevel    $00, $13, $30, $25
00000505 =00000000                M vctl1	set	op1
00000505 =00000013                M vctl2	set	op2
00000505 =00000030                M vctl3	set	op3
00000505 =00000025                M vctl4	set	op4
00000505 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000506 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000506 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000506 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000506 =00000080                M vctlmask1	set	$80
00000506 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000050A 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000050E 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000512 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000516 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000051A 2513 3080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000051E                            
0000051E                            ;	Voice $01
0000051E                            ;	$3A
0000051E                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0000051E                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
0000051E                            	smpsVcAlgorithm     $02
0000051E =00000002                M vcalgorithm	set	val
0000051E                            	smpsVcFeedback      $07
0000051E =00000007                M vcfeedback	set	val
0000051E                            	smpsVcUnusedBits    $00
0000051E =00000000                M vcunusedbits	set	val
0000051E =00000000                M vcd1r1unk	set	0
0000051E =00000000                M vcd1r2unk	set	0
0000051E =00000000                M vcd1r3unk	set	0
0000051E =00000000                M vcd1r4unk	set	0
0000051E                            	smpsVcDetune        $00, $00, $00, $00
0000051E =00000000                M vcdt1	set	op1
0000051E =00000000                M vcdt2	set	op2
0000051E =00000000                M vcdt3	set	op3
0000051E =00000000                M vcdt4	set	op4
0000051E                            	smpsVcCoarseFreq    $01, $01, $07, $01
0000051E =00000001                M vccf1	set	op1
0000051E =00000001                M vccf2	set	op2
0000051E =00000007                M vccf3	set	op3
0000051E =00000001                M vccf4	set	op4
0000051E                            	smpsVcRateScale     $01, $02, $02, $02
0000051E =00000001                M vcrs1	set	op1
0000051E =00000002                M vcrs2	set	op2
0000051E =00000002                M vcrs3	set	op3
0000051E =00000002                M vcrs4	set	op4
0000051E                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0000051E =00000013                M vcar1	set	op1
0000051E =0000000D                M vcar2	set	op2
0000051E =0000000E                M vcar3	set	op3
0000051E =0000000E                M vcar4	set	op4
0000051E                            	smpsVcAmpMod        $00, $00, $00, $00
0000051E =00000000                M vcam1	set	op1<<5
0000051E =00000000                M vcam2	set	op2<<5
0000051E =00000000                M vcam3	set	op3<<5
0000051E =00000000                M vcam4	set	op4<<5
0000051E                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0000051E =00000003                M vcd1r1	set	op1
0000051E =0000000E                M vcd1r2	set	op2
0000051E =0000000E                M vcd1r3	set	op3
0000051E =0000000E                M vcd1r4	set	op4
0000051E                            	smpsVcDecayRate2    $00, $00, $00, $00
0000051E =00000000                M vcd2r1	set	op1
0000051E =00000000                M vcd2r2	set	op2
0000051E =00000000                M vcd2r3	set	op3
0000051E =00000000                M vcd2r4	set	op4
0000051E                            	smpsVcDecayLevel    $00, $01, $0F, $01
0000051E =00000000                M vcdl1	set	op1
0000051E =00000001                M vcdl2	set	op2
0000051E =0000000F                M vcdl3	set	op3
0000051E =00000001                M vcdl4	set	op4
0000051E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000051E =0000000F                M vcrr1	set	op1
0000051E =0000000F                M vcrr2	set	op2
0000051E =0000000F                M vcrr3	set	op3
0000051E =0000000F                M vcrr4	set	op4
0000051E                            	smpsVcTotalLevel    $00, $27, $28, $17
0000051E =00000000                M vctl1	set	op1
0000051E =00000027                M vctl2	set	op2
0000051E =00000028                M vctl3	set	op3
0000051E =00000017                M vctl4	set	op4
0000051E 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000051F =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000051F =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000051F =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000051F =00000080                M vctlmask1	set	$80
0000051F 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000523 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000527 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000052B 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000052F 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000533 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000537                            
00000537                            ;	Voice $02
00000537                            ;	$3A
00000537                            ;	$03, $08, $03, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00000537                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $20, $80
00000537                            	smpsVcAlgorithm     $02
00000537 =00000002                M vcalgorithm	set	val
00000537                            	smpsVcFeedback      $07
00000537 =00000007                M vcfeedback	set	val
00000537                            	smpsVcUnusedBits    $00
00000537 =00000000                M vcunusedbits	set	val
00000537 =00000000                M vcd1r1unk	set	0
00000537 =00000000                M vcd1r2unk	set	0
00000537 =00000000                M vcd1r3unk	set	0
00000537 =00000000                M vcd1r4unk	set	0
00000537                            	smpsVcDetune        $00, $00, $00, $00
00000537 =00000000                M vcdt1	set	op1
00000537 =00000000                M vcdt2	set	op2
00000537 =00000000                M vcdt3	set	op3
00000537 =00000000                M vcdt4	set	op4
00000537                            	smpsVcCoarseFreq    $01, $03, $08, $03
00000537 =00000001                M vccf1	set	op1
00000537 =00000003                M vccf2	set	op2
00000537 =00000008                M vccf3	set	op3
00000537 =00000003                M vccf4	set	op4
00000537                            	smpsVcRateScale     $01, $02, $02, $02
00000537 =00000001                M vcrs1	set	op1
00000537 =00000002                M vcrs2	set	op2
00000537 =00000002                M vcrs3	set	op3
00000537 =00000002                M vcrs4	set	op4
00000537                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00000537 =00000013                M vcar1	set	op1
00000537 =0000000D                M vcar2	set	op2
00000537 =0000000E                M vcar3	set	op3
00000537 =0000000E                M vcar4	set	op4
00000537                            	smpsVcAmpMod        $00, $00, $00, $00
00000537 =00000000                M vcam1	set	op1<<5
00000537 =00000000                M vcam2	set	op2<<5
00000537 =00000000                M vcam3	set	op3<<5
00000537 =00000000                M vcam4	set	op4<<5
00000537                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00000537 =00000003                M vcd1r1	set	op1
00000537 =0000000E                M vcd1r2	set	op2
00000537 =0000000E                M vcd1r3	set	op3
00000537 =0000000E                M vcd1r4	set	op4
00000537                            	smpsVcDecayRate2    $00, $00, $00, $00
00000537 =00000000                M vcd2r1	set	op1
00000537 =00000000                M vcd2r2	set	op2
00000537 =00000000                M vcd2r3	set	op3
00000537 =00000000                M vcd2r4	set	op4
00000537                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000537 =00000000                M vcdl1	set	op1
00000537 =00000001                M vcdl2	set	op2
00000537 =0000000F                M vcdl3	set	op3
00000537 =00000001                M vcdl4	set	op4
00000537                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000537 =0000000F                M vcrr1	set	op1
00000537 =0000000F                M vcrr2	set	op2
00000537 =0000000F                M vcrr3	set	op3
00000537 =0000000F                M vcrr4	set	op4
00000537                            	smpsVcTotalLevel    $00, $20, $28, $17
00000537 =00000000                M vctl1	set	op1
00000537 =00000020                M vctl2	set	op2
00000537 =00000028                M vctl3	set	op3
00000537 =00000017                M vctl4	set	op4
00000537 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000538 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000538 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000538 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000538 =00000080                M vctlmask1	set	$80
00000538 0303 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000053C 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000540 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000544 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000548 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000054C 1720 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000550                            
00000550                            ;	Voice $03
00000550                            ;	$3A
00000550                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00000550                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $4E, $16, $80
00000550                            	smpsVcAlgorithm     $02
00000550 =00000002                M vcalgorithm	set	val
00000550                            	smpsVcFeedback      $07
00000550 =00000007                M vcfeedback	set	val
00000550                            	smpsVcUnusedBits    $00
00000550 =00000000                M vcunusedbits	set	val
00000550 =00000000                M vcd1r1unk	set	0
00000550 =00000000                M vcd1r2unk	set	0
00000550 =00000000                M vcd1r3unk	set	0
00000550 =00000000                M vcd1r4unk	set	0
00000550                            	smpsVcDetune        $00, $00, $00, $00
00000550 =00000000                M vcdt1	set	op1
00000550 =00000000                M vcdt2	set	op2
00000550 =00000000                M vcdt3	set	op3
00000550 =00000000                M vcdt4	set	op4
00000550                            	smpsVcCoarseFreq    $01, $01, $07, $01
00000550 =00000001                M vccf1	set	op1
00000550 =00000001                M vccf2	set	op2
00000550 =00000007                M vccf3	set	op3
00000550 =00000001                M vccf4	set	op4
00000550                            	smpsVcRateScale     $01, $02, $02, $02
00000550 =00000001                M vcrs1	set	op1
00000550 =00000002                M vcrs2	set	op2
00000550 =00000002                M vcrs3	set	op3
00000550 =00000002                M vcrs4	set	op4
00000550                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00000550 =00000013                M vcar1	set	op1
00000550 =0000000D                M vcar2	set	op2
00000550 =0000000E                M vcar3	set	op3
00000550 =0000000E                M vcar4	set	op4
00000550                            	smpsVcAmpMod        $00, $00, $00, $00
00000550 =00000000                M vcam1	set	op1<<5
00000550 =00000000                M vcam2	set	op2<<5
00000550 =00000000                M vcam3	set	op3<<5
00000550 =00000000                M vcam4	set	op4<<5
00000550                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00000550 =00000003                M vcd1r1	set	op1
00000550 =0000000E                M vcd1r2	set	op2
00000550 =0000000E                M vcd1r3	set	op3
00000550 =0000000E                M vcd1r4	set	op4
00000550                            	smpsVcDecayRate2    $00, $00, $00, $00
00000550 =00000000                M vcd2r1	set	op1
00000550 =00000000                M vcd2r2	set	op2
00000550 =00000000                M vcd2r3	set	op3
00000550 =00000000                M vcd2r4	set	op4
00000550                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000550 =00000000                M vcdl1	set	op1
00000550 =00000001                M vcdl2	set	op2
00000550 =0000000F                M vcdl3	set	op3
00000550 =00000001                M vcdl4	set	op4
00000550                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000550 =0000000F                M vcrr1	set	op1
00000550 =0000000F                M vcrr2	set	op2
00000550 =0000000F                M vcrr3	set	op3
00000550 =0000000F                M vcrr4	set	op4
00000550                            	smpsVcTotalLevel    $00, $16, $4E, $18
00000550 =00000000                M vctl1	set	op1
00000550 =00000016                M vctl2	set	op2
00000550 =0000004E                M vctl3	set	op3
00000550 =00000018                M vctl4	set	op4
00000550 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000551 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000551 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000551 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000551 =00000080                M vctlmask1	set	$80
00000551 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000555 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000559 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000055D 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000561 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000565 1816 4E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000569                            
00000569                            ;	Voice $04
00000569                            ;	$20
00000569                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00000569                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00000569                            	smpsVcAlgorithm     $00
00000569 =00000000                M vcalgorithm	set	val
00000569                            	smpsVcFeedback      $04
00000569 =00000004                M vcfeedback	set	val
00000569                            	smpsVcUnusedBits    $00
00000569 =00000000                M vcunusedbits	set	val
00000569 =00000000                M vcd1r1unk	set	0
00000569 =00000000                M vcd1r2unk	set	0
00000569 =00000000                M vcd1r3unk	set	0
00000569 =00000000                M vcd1r4unk	set	0
00000569                            	smpsVcDetune        $00, $00, $03, $07
00000569 =00000000                M vcdt1	set	op1
00000569 =00000000                M vcdt2	set	op2
00000569 =00000003                M vcdt3	set	op3
00000569 =00000007                M vcdt4	set	op4
00000569                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00000569 =00000000                M vccf1	set	op1
00000569 =00000000                M vccf2	set	op2
00000569 =00000001                M vccf3	set	op3
00000569 =0000000A                M vccf4	set	op4
00000569                            	smpsVcRateScale     $03, $03, $03, $02
00000569 =00000003                M vcrs1	set	op1
00000569 =00000003                M vcrs2	set	op2
00000569 =00000003                M vcrs3	set	op3
00000569 =00000002                M vcrs4	set	op4
00000569                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00000569 =0000001F                M vcar1	set	op1
00000569 =0000001C                M vcar2	set	op2
00000569 =00000018                M vcar3	set	op3
00000569 =0000001F                M vcar4	set	op4
00000569                            	smpsVcAmpMod        $00, $00, $00, $00
00000569 =00000000                M vcam1	set	op1<<5
00000569 =00000000                M vcam2	set	op2<<5
00000569 =00000000                M vcam3	set	op3<<5
00000569 =00000000                M vcam4	set	op4<<5
00000569                            	smpsVcDecayRate1    $04, $04, $0A, $10
00000569 =00000004                M vcd1r1	set	op1
00000569 =00000004                M vcd1r2	set	op2
00000569 =0000000A                M vcd1r3	set	op3
00000569 =00000010                M vcd1r4	set	op4
00000569                            	smpsVcDecayRate2    $08, $08, $08, $0F
00000569 =00000008                M vcd2r1	set	op1
00000569 =00000008                M vcd2r2	set	op2
00000569 =00000008                M vcd2r3	set	op3
00000569 =0000000F                M vcd2r4	set	op4
00000569                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00000569 =0000000B                M vcdl1	set	op1
00000569 =0000000B                M vcdl2	set	op2
00000569 =00000005                M vcdl3	set	op3
00000569 =00000005                M vcdl4	set	op4
00000569                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000569 =0000000F                M vcrr1	set	op1
00000569 =0000000F                M vcrr2	set	op2
00000569 =0000000F                M vcrr3	set	op3
00000569 =0000000F                M vcrr4	set	op4
00000569                            	smpsVcTotalLevel    $00, $17, $2B, $14
00000569 =00000000                M vctl1	set	op1
00000569 =00000017                M vctl2	set	op2
00000569 =0000002B                M vctl3	set	op3
00000569 =00000014                M vctl4	set	op4
00000569 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000056A =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000056A =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000056A =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000056A =00000080                M vctlmask1	set	$80
0000056A 7A00 3100                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000056E 9FDC D8DF                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000572 1004 0A04                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000576 0F08 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000057A 5FBF 5FBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000057E 1417 2B80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000582                            
00000582                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music6:	section	org($1380),file("sound/music/compressed/EHZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/EHZ.asm"	; include the actual music file for assembly
00000000                            EHZ_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000000                M sourcesmps2asm	set	0
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     EHZ_Voices
00000000 0000                     M 	dc.w	((ehz_voices&$7fff)<<8)&$ff00+(ehz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $9E
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$9e
00000005 9E                       M 	dc.b	$9e
00000006                            
00000006                            	smpsHeaderDAC       EHZ_DAC
00000006                          M 	checkedchannelpointer	ehz_dac
00000006 0000                     M 	dc.w	((ehz_dac&$7fff)<<8)&$ff00+(ehz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        EHZ_FM1,	$00, $0E
0000000A                          M 	checkedchannelpointer	ehz_fm1
0000000A 0000                     M 	dc.w	((ehz_fm1&$7fff)<<8)&$ff00+(ehz_fm1&$7fff)>>8
0000000C 000E                     M 	dc.b	$00,$0e
0000000E                            	smpsHeaderFM        EHZ_FM2,	$00, $16
0000000E                          M 	checkedchannelpointer	ehz_fm2
0000000E 0000                     M 	dc.w	((ehz_fm2&$7fff)<<8)&$ff00+(ehz_fm2&$7fff)>>8
00000010 0016                     M 	dc.b	$00,$16
00000012                            	smpsHeaderFM        EHZ_FM3,	$00, $16
00000012                          M 	checkedchannelpointer	ehz_fm3
00000012 0000                     M 	dc.w	((ehz_fm3&$7fff)<<8)&$ff00+(ehz_fm3&$7fff)>>8
00000014 0016                     M 	dc.b	$00,$16
00000016                            	smpsHeaderFM        EHZ_FM4,	$00, $20
00000016                          M 	checkedchannelpointer	ehz_fm4
00000016 0000                     M 	dc.w	((ehz_fm4&$7fff)<<8)&$ff00+(ehz_fm4&$7fff)>>8
00000018 0020                     M 	dc.b	$00,$20
0000001A                            	smpsHeaderFM        EHZ_FM5,	$00, $25
0000001A                          M 	checkedchannelpointer	ehz_fm5
0000001A 0000                     M 	dc.w	((ehz_fm5&$7fff)<<8)&$ff00+(ehz_fm5&$7fff)>>8
0000001C 0025                     M 	dc.b	$00,$25
0000001E                            	smpsHeaderPSG       EHZ_PSG1,	$DC, $04, $00, fTone_03
0000001E                          M 	checkedchannelpointer	ehz_psg1
0000001E 0000                     M 	dc.w	((ehz_psg1&$7fff)<<8)&$ff00+(ehz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$dc
00000020 DC                       M 	dc.b	$dc
00000021 04                       M 	dc.b	$04
00000022 00                       M 	dc.b	$00
00000023 03                       M 	dc.b	ftone_03
00000024                            	smpsHeaderPSG       EHZ_PSG2,	$DC, $04, $00, fTone_01
00000024                          M 	checkedchannelpointer	ehz_psg2
00000024 0000                     M 	dc.w	((ehz_psg2&$7fff)<<8)&$ff00+(ehz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 04                       M 	dc.b	$04
00000028 00                       M 	dc.b	$00
00000029 01                       M 	dc.b	ftone_01
0000002A                            	smpsHeaderPSG       EHZ_PSG3,	$00, $02, $00, fTone_02
0000002A                          M 	checkedchannelpointer	ehz_psg3
0000002A 0000                     M 	dc.w	((ehz_psg3&$7fff)<<8)&$ff00+(ehz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 02                       M 	dc.b	$02
0000002E 00                       M 	dc.b	$00
0000002F 02                       M 	dc.b	ftone_02
00000030                            
00000030                            ; FM5 Data
00000030                            EHZ_FM5:
00000030 8020                       	dc.b	nRst, $20
00000032                            	smpsSetvoice        $00
00000032                          M 	smpsfmvoice	$00
00000032 EF00                     M 	dc.b	$ef,$00
00000034                            	smpsAlterVol        $F8
00000034 E6F8                     M 	dc.b	$e6,$f8
00000036 D404 D0CD C9D0 CDC9 C6D0+  	dc.b	nB6, $04, nG6, nE6, nC6, nG6, nE6, nC6, nA5, nG6, nE6, nC6
00000042 C6D0 CDC9 C6D2 CECB C7D2+  	dc.b	nA5, nG6, nE6, nC6, nA5, nA6, nF6, nD6, nBb5, nA6, nF6, nD6
0000004E C7                         	dc.b	nBb5
0000004F                            	smpsAlterVol        $08
0000004F E608                     M 	dc.b	$e6,$08
00000051                            
00000051                            EHZ_Jump03:
00000051                            	smpsAlterVol        $F8
00000051 E6F8                     M 	dc.b	$e6,$f8
00000053                            	smpsPan             panCenter, $00
00000053 E0C0                     M 	dc.b	$e0,direction+amsfms
00000055                            	smpsModSet          $30, $01, $04, $04
00000055 F0                       M 	dc.b	$f0
00000056 3001 0404                M 	dc.b	$30,$01,$04,$04
0000005A                            	smpsSetvoice        $01
0000005A                          M 	smpsfmvoice	$01
0000005A EF01                     M 	dc.b	$ef,$01
0000005C                            
0000005C                            EHZ_Loop06:
0000005C C420 E720 C6E7 20C2 E720+  	dc.b	nG5, $20, smpsNoAttack, $20, nA5, smpsNoAttack, $20, nF5, smpsNoAttack, $20, nE5, smpsNoAttack
00000068 20                         	dc.b	$20
00000069                            	smpsLoop            $00, $04, EHZ_Loop06
00000069 F7                       M 	dc.b	$f7
0000006A 0004                     M 	dc.b	index,loops
0000006C 0000                     M 	dc.w	((ehz_loop06&$7fff)<<8)&$ff00+(ehz_loop06&$7fff)>>8
0000006E                            	smpsSetvoice        $02
0000006E                          M 	smpsfmvoice	$02
0000006E EF02                     M 	dc.b	$ef,$02
00000070                            	smpsAlterVol        $FC
00000070 E6FC                     M 	dc.b	$e6,$fc
00000072                            	smpsPan             panLeft, $00
00000072 E080                     M 	dc.b	$e0,direction+amsfms
00000074 C110 C1C1 C1BF BFBF BFBF+  	dc.b	nE5, $10, nE5, nE5, nE5, nD5, nD5, nD5, nD5, nD5, nD5, nD5
00000080 BFC1 C1C1 C1C1 C1C1 C1BF+  	dc.b	nD5, nE5, nE5, nE5, nE5, nE5, nE5, nE5, nE5, nD5, nD5, nD5
0000008C BF                         	dc.b	nD5
0000008D                            	smpsAlterVol        $06
0000008D E606                     M 	dc.b	$e6,$06
0000008F                            	smpsSetvoice        $03
0000008F                          M 	smpsfmvoice	$03
0000008F EF03                     M 	dc.b	$ef,$03
00000091 B804 8008 BA20 E714 E720+  	dc.b	nG4, $04, nRst, $08, nA4, $20, smpsNoAttack, $14, smpsNoAttack, $20, smpsNoAttack, $0C
0000009D 8014                       	dc.b	nRst, $14
0000009F                            	smpsAlterVol        $06
0000009F E606                     M 	dc.b	$e6,$06
000000A1                            	smpsJump            EHZ_Jump03
000000A1 F6                       M 	dc.b	$f6
000000A2 0000                     M 	dc.w	((ehz_jump03&$7fff)<<8)&$ff00+(ehz_jump03&$7fff)>>8
000000A4                            
000000A4                            ; FM2 Data
000000A4                            EHZ_FM2:
000000A4                            	smpsSetvoice        $03
000000A4                          M 	smpsfmvoice	$03
000000A4 EF03                     M 	dc.b	$ef,$03
000000A6 BF08 8004 C120 E714 BD20+  	dc.b	nD5, $08, nRst, $04, nE5, $20, smpsNoAttack, $14, nC5, $20, nD5
000000B1                            
000000B1                            EHZ_Jump02:
000000B1                            	smpsSetvoice        $03
000000B1                          M 	smpsfmvoice	$03
000000B1 EF03                     M 	dc.b	$ef,$03
000000B3 8008 C404 80C6 80C4 80C9+  	dc.b	nRst, $08, nG5, $04, nRst, nA5, nRst, nG5, nRst, nC6, nRst, nC6
000000BF 80CB CD80 0880 CB10 C604+  	dc.b	nRst, nD6, nE6, nRst, $08, nRst, nD6, $10, nA5, $04, nRst, nC6
000000CB C980 CB08 800C 8014 C704+  	dc.b	nC6, nRst, nD6, $08, nRst, $0C, nRst, $14, nBb5, $04, nC6, nBb5
000000D7 CB80 C980 C7C9 80C6 E7C6+  	dc.b	nD6, nRst, nC6, nRst, nBb5, nC6, nRst, nA5, smpsNoAttack, nA5, $20, smpsNoAttack
000000E3 1080 1080 08C4 0480 C680+  	dc.b	$10, nRst, $10, nRst, $08, nG5, $04, nRst, nA5, nRst, nG5, nRst
000000EF C980 C980 CBCD 8008 80CB+  	dc.b	nC6, nRst, nC6, nRst, nD6, nE6, nRst, $08, nRst, nD6, $10, nA5
000000FB 08C9 8004 CB08 800C 8014+  	dc.b	$08, nC6, nRst, $04, nD6, $08, nRst, $0C, nRst, $14, nBb5, $04
00000107 C9C7 CB80 C980 C7C9 80C6+  	dc.b	nC6, nBb5, nD6, nRst, nC6, nRst, nBb5, nC6, nRst, nA5, smpsNoAttack, nA5
00000113 20E7 1080 10               	dc.b	$20, smpsNoAttack, $10, nRst, $10
00000118                            	smpsSetvoice        $04
00000118                          M 	smpsfmvoice	$04
00000118 EF04                     M 	dc.b	$ef,$04
0000011A                            	smpsAlterVol        $FD
0000011A E6FD                     M 	dc.b	$e6,$fd
0000011C                            	smpsModSet          $12, $01, $0C, $04
0000011C F0                       M 	dc.b	$f0
0000011D 1201 0C04                M 	dc.b	$12,$01,$0c,$04
00000121 8008 B804 80B8 08BA 0480+  	dc.b	nRst, $08, nG4, $04, nRst, nG4, $08, nA4, $04, nRst, nC5, nRst
0000012D BD08 BFBD C1BF 10BA 20E7+  	dc.b	nC5, $08, nD5, nC5, nE5, nD5, $10, nA4, $20, smpsNoAttack, $08, nRst
00000139 08BB 0480 BB08 BDBF BDBB+  	dc.b	$08, nBb4, $04, nRst, nBb4, $08, nC5, nD5, nC5, nBb4, $04, nC5
00000145 0CBA 20E7 2080 08B8 10BA+  	dc.b	$0C, nA4, $20, smpsNoAttack, $20, nRst, $08, nG4, $10, nA4, $08, nC5
00000151 0480 BD08 BFBD C1BF 10BA+  	dc.b	$04, nRst, nC5, $08, nD5, nC5, nE5, nD5, $10, nA4, $20, smpsNoAttack
0000015D 0880 08BB 0480 BB08 BDBF+  	dc.b	$08, nRst, $08, nBb4, $04, nRst, nBb4, $08, nC5, nD5, nC5, nBb4
00000169 04BD 08BA 04E7 20E7 20     	dc.b	$04, nC5, $08, nA4, $04, smpsNoAttack, $20, smpsNoAttack, $20
00000172                            	smpsAlterVol        $03
00000172 E603                     M 	dc.b	$e6,$03
00000174                            	smpsModOff
00000174 F4                       M 	dc.b	$f4
00000175                            	smpsSetvoice        $05
00000175                          M 	smpsfmvoice	$05
00000175 EF05                     M 	dc.b	$ef,$05
00000177                            	smpsAlterPitch      $F4
00000177                          M 	smpschangetransposition	$f4
00000177 E9F4                     M 	dc.b	$e9,$f4
00000179 8010 C2C4 C6C8 C9CB C880+  	dc.b	nRst, $10, nF5, nG5, nA5, nB5, nC6, nD6, nB5, nRst, nB5, nC6
00000185 CBC9 CBCD C980 C2C4 C6C8+  	dc.b	nD6, nC6, nD6, nE6, nC6, nRst, nF5, nG5, nA5, nB5, nC6, nD6
00000191 C8                         	dc.b	nB5
00000192                            	smpsAlterPitch      $0C
00000192                          M 	smpschangetransposition	$0c
00000192 E90C                     M 	dc.b	$e9,$0c
00000194                            	smpsAlterVol        $FD
00000194 E6FD                     M 	dc.b	$e6,$fd
00000196                            	smpsSetvoice        $06
00000196                          M 	smpsfmvoice	$06
00000196 EF06                     M 	dc.b	$ef,$06
00000198 CB04 CB80 CD20 E714        	dc.b	nD6, $04, nD6, nRst, nE6, $20, smpsNoAttack, $14
000001A0                            	smpsSetvoice        $00
000001A0                          M 	smpsfmvoice	$00
000001A0 EF00                     M 	dc.b	$ef,$00
000001A2                            	smpsAlterPitch      $0C
000001A2                          M 	smpschangetransposition	$0c
000001A2 E90C                     M 	dc.b	$e9,$0c
000001A4                            	smpsAlterVol        $09
000001A4 E609                     M 	dc.b	$e6,$09
000001A6 D204 CDC9 C6CD C9C6 C1C9+  	dc.b	nA6, $04, nE6, nC6, nA5, nE6, nC6, nA5, nE5, nC6, nA5, nE5
000001B2 BDC6 C1BD BA               	dc.b	nC5, nA5, nE5, nC5, nA4
000001B7                            	smpsAlterPitch      $F4
000001B7                          M 	smpschangetransposition	$f4
000001B7 E9F4                     M 	dc.b	$e9,$f4
000001B9                            	smpsAlterVol        $FA
000001B9 E6FA                     M 	dc.b	$e6,$fa
000001BB                            	smpsJump            EHZ_Jump02
000001BB F6                       M 	dc.b	$f6
000001BC 0000                     M 	dc.w	((ehz_jump02&$7fff)<<8)&$ff00+(ehz_jump02&$7fff)>>8
000001BE                            
000001BE                            ; FM3 Data
000001BE                            EHZ_FM3:
000001BE                            	smpsSetvoice        $03
000001BE                          M 	smpsfmvoice	$03
000001BE EF03                     M 	dc.b	$ef,$03
000001C0                            	smpsAlterNote       $01
000001C0                          M 	smpsdetune	$01
000001C0 E101                     M 	dc.b	$e1,$01
000001C2 C208 8004 C420 E714 C120+  	dc.b	nF5, $08, nRst, $04, nG5, $20, smpsNoAttack, $14, nE5, $20, nF5
000001CD                            
000001CD                            EHZ_Jump01:
000001CD                            	smpsAlterNote       $03
000001CD                          M 	smpsdetune	$03
000001CD E103                     M 	dc.b	$e1,$03
000001CF                            	smpsSetvoice        $03
000001CF                          M 	smpsfmvoice	$03
000001CF EF03                     M 	dc.b	$ef,$03
000001D1                            	smpsPan             panLeft, $00
000001D1 E080                     M 	dc.b	$e0,direction+amsfms
000001D3 8008 B804 80BA 80B8 80BD+  	dc.b	nRst, $08, nG4, $04, nRst, nA4, nRst, nG4, nRst, nC5, nRst, nC5
000001DF 80BF C180 0880 BF10 BA04+  	dc.b	nRst, nD5, nE5, nRst, $08, nRst, nD5, $10, nA4, $04, nRst, nC5
000001EB BD80 BF08 800C 8014 BB04+  	dc.b	nC5, nRst, nD5, $08, nRst, $0C, nRst, $14, nBb4, $04, nC5, nBb4
000001F7 BF80 BD80 BBBD 80BA E7BA+  	dc.b	nD5, nRst, nC5, nRst, nBb4, nC5, nRst, nA4, smpsNoAttack, nA4, $20, smpsNoAttack
00000203 1080 1080 08B8 0480 BA80+  	dc.b	$10, nRst, $10, nRst, $08, nG4, $04, nRst, nA4, nRst, nG4, nRst
0000020F BD80 BD80 BFC1 8008 80BF+  	dc.b	nC5, nRst, nC5, nRst, nD5, nE5, nRst, $08, nRst, nD5, $10, nA4
0000021B 08BD 8004 BF08 800C 8014+  	dc.b	$08, nC5, nRst, $04, nD5, $08, nRst, $0C, nRst, $14, nBb4, $04
00000227 BDBB BF80 BD80 BBBD 80BA+  	dc.b	nC5, nBb4, nD5, nRst, nC5, nRst, nBb4, nC5, nRst, nA4, smpsNoAttack, nA4
00000233 20E7 1080 10               	dc.b	$20, smpsNoAttack, $10, nRst, $10
00000238                            	smpsSetvoice        $04
00000238                          M 	smpsfmvoice	$04
00000238 EF04                     M 	dc.b	$ef,$04
0000023A                            	smpsAlterVol        $07
0000023A E607                     M 	dc.b	$e6,$07
0000023C                            	smpsPan             panLeft, $00
0000023C E080                     M 	dc.b	$e0,direction+amsfms
0000023E 8014 B804 80B8 08BA 0480+  	dc.b	nRst, $14, nG4, $04, nRst, nG4, $08, nA4, $04, nRst, nC5, nRst
0000024A BD08 BFBD C1BF 10BA 20E7+  	dc.b	nC5, $08, nD5, nC5, nE5, nD5, $10, nA4, $20, smpsNoAttack, $08, nRst
00000256 08BB 0480 BB08 BDBF BDBB+  	dc.b	$08, nBb4, $04, nRst, nBb4, $08, nC5, nD5, nC5, nBb4, $04, nC5
00000262 0CBA 14                    	dc.b	$0C, nA4, $14
00000265                            	smpsSetvoice        $06
00000265                          M 	smpsfmvoice	$06
00000265 EF06                     M 	dc.b	$ef,$06
00000267                            	smpsAlterNote       $00
00000267                          M 	smpsdetune	$00
00000267 E100                     M 	dc.b	$e1,$00
00000269                            	smpsAlterVol        $F9
00000269 E6F9                     M 	dc.b	$e6,$f9
0000026B C604 CD02 8002 8004 CD02+  	dc.b	nA5, $04, nE6, $02, nRst, $02, nRst, $04, nE6, $02, nRst, $02
00000277 CB08 C9                    	dc.b	nD6, $08, nC6
0000027A                            	smpsSetvoice        $04
0000027A                          M 	smpsfmvoice	$04
0000027A EF04                     M 	dc.b	$ef,$04
0000027C                            	smpsAlterNote       $01
0000027C                          M 	smpsdetune	$01
0000027C E101                     M 	dc.b	$e1,$01
0000027E                            	smpsAlterVol        $07
0000027E E607                     M 	dc.b	$e6,$07
00000280 8010 B8BA 08BD 0480 BD08+  	dc.b	nRst, $10, nG4, nA4, $08, nC5, $04, nRst, nC5, $08, nD5, nC5
0000028C C1BF 10BA 20E7 0880 08BB+  	dc.b	nE5, nD5, $10, nA4, $20, smpsNoAttack, $08, nRst, $08, nBb4, $04, nRst
00000298 BB08 BDBF BDBB 04BD 08BA+  	dc.b	nBb4, $08, nC5, nD5, nC5, nBb4, $04, nC5, $08, nA4, $04
000002A3                            	smpsSetvoice        $06
000002A3                          M 	smpsfmvoice	$06
000002A3 EF06                     M 	dc.b	$ef,$06
000002A5                            	smpsAlterVol        $F9
000002A5 E6F9                     M 	dc.b	$e6,$f9
000002A7                            	smpsAlterNote       $00
000002A7                          M 	smpsdetune	$00
000002A7 E100                     M 	dc.b	$e1,$00
000002A9 C608 C904 80C6 80CB 0CC9+  	dc.b	nA5, $08, nC6, $04, nRst, nA5, nRst, nD6, $0C, nC6, $04, nRst
000002B5 10                         	dc.b	$10
000002B6                            	smpsSetvoice        $03
000002B6                          M 	smpsfmvoice	$03
000002B6 EF03                     M 	dc.b	$ef,$03
000002B8                            	smpsPan             panCenter, $00
000002B8 E0C0                     M 	dc.b	$e0,direction+amsfms
000002BA                            	smpsAlterNote       $01
000002BA                          M 	smpsdetune	$01
000002BA E101                     M 	dc.b	$e1,$01
000002BC C918 C608 8014 C604 C908+  	dc.b	nC6, $18, nA5, $08, nRst, $14, nA5, $04, nC6, $08, nB5, $04
000002C8 80C9 C804 8010             	dc.b	nRst, nC6, nB5, $04, nRst, $10
000002CE                            	smpsSetvoice        $00
000002CE                          M 	smpsfmvoice	$00
000002CE EF00                     M 	dc.b	$ef,$00
000002D0                            	smpsAlterNote       $00
000002D0                          M 	smpsdetune	$00
000002D0 E100                     M 	dc.b	$e1,$00
000002D2                            	smpsAlterVol        $FE
000002D2 E6FE                     M 	dc.b	$e6,$fe
000002D4                            	smpsAlterPitch      $0C
000002D4                          M 	smpschangetransposition	$0c
000002D4 E90C                     M 	dc.b	$e9,$0c
000002D6                            	smpsPan             panRight, $00
000002D6 E040                     M 	dc.b	$e0,direction+amsfms
000002D8 C802 8006 C904 C814        	dc.b	nB5, $02, nRst, $06, nC6, $04, nB5, $14
000002E0                            	smpsAlterPitch      $F4
000002E0                          M 	smpschangetransposition	$f4
000002E0 E9F4                     M 	dc.b	$e9,$f4
000002E2                            	smpsAlterVol        $02
000002E2 E602                     M 	dc.b	$e6,$02
000002E4                            	smpsSetvoice        $03
000002E4                          M 	smpsfmvoice	$03
000002E4 EF03                     M 	dc.b	$ef,$03
000002E6                            	smpsPan             panCenter, $00
000002E6 E0C0                     M 	dc.b	$e0,direction+amsfms
000002E8                            	smpsAlterNote       $01
000002E8                          M 	smpsdetune	$01
000002E8 E101                     M 	dc.b	$e1,$01
000002EA 8010 C808 C9CB C9C8 CBC9+  	dc.b	nRst, $10, nB5, $08, nC6, nD6, nC6, nB5, nD6, nC6, $04, nRst
000002F6 C910 C608 8020 C918 C608+  	dc.b	nC6, $10, nA5, $08, nRst, $20, nC6, $18, nA5, $08, nRst, $14
00000302 C604 C908 C804 80C9 C804+  	dc.b	nA5, $04, nC6, $08, nB5, $04, nRst, nC6, nB5, $04, nRst, $10
0000030E                            	smpsSetvoice        $00
0000030E                          M 	smpsfmvoice	$00
0000030E EF00                     M 	dc.b	$ef,$00
00000310                            	smpsAlterNote       $00
00000310                          M 	smpsdetune	$00
00000310 E100                     M 	dc.b	$e1,$00
00000312                            	smpsAlterVol        $FE
00000312 E6FE                     M 	dc.b	$e6,$fe
00000314                            	smpsAlterPitch      $0C
00000314                          M 	smpschangetransposition	$0c
00000314 E90C                     M 	dc.b	$e9,$0c
00000316                            	smpsPan             panRight, $00
00000316 E040                     M 	dc.b	$e0,direction+amsfms
00000318 C802 8006 C904 C814        	dc.b	nB5, $02, nRst, $06, nC6, $04, nB5, $14
00000320                            	smpsAlterVol        $02
00000320 E602                     M 	dc.b	$e6,$02
00000322                            	smpsAlterPitch      $F4
00000322                          M 	smpschangetransposition	$f4
00000322 E9F4                     M 	dc.b	$e9,$f4
00000324                            	smpsSetvoice        $03
00000324                          M 	smpsfmvoice	$03
00000324 EF03                     M 	dc.b	$ef,$03
00000326                            	smpsPan             panCenter, $00
00000326 E0C0                     M 	dc.b	$e0,direction+amsfms
00000328                            	smpsAlterNote       $01
00000328                          M 	smpsdetune	$01
00000328 E101                     M 	dc.b	$e1,$01
0000032A CB04 C980 C620 E714 E720+  	dc.b	nD6, $04, nC6, nRst, nA5, $20, smpsNoAttack, $14, smpsNoAttack, $20, smpsNoAttack, $0C
00000336 8014                       	dc.b	nRst, $14
00000338                            	smpsJump            EHZ_Jump01
00000338 F6                       M 	dc.b	$f6
00000339 0000                     M 	dc.w	((ehz_jump01&$7fff)<<8)&$ff00+(ehz_jump01&$7fff)>>8
0000033B                            
0000033B                            ; FM4 Data
0000033B                            EHZ_FM4:
0000033B                            	smpsSetvoice        $03
0000033B                          M 	smpsfmvoice	$03
0000033B EF03                     M 	dc.b	$ef,$03
0000033D                            	smpsAlterVol        $F8
0000033D E6F8                     M 	dc.b	$e6,$f8
0000033F B608 8004 B820 E714 B520+  	dc.b	nF4, $08, nRst, $04, nG4, $20, smpsNoAttack, $14, nE4, $20, nF4
0000034A                            	smpsAlterVol        $04
0000034A E604                     M 	dc.b	$e6,$04
0000034C                            
0000034C                            EHZ_Jump00:
0000034C                            	smpsPan             panCenter, $00
0000034C E0C0                     M 	dc.b	$e0,direction+amsfms
0000034E                            	smpsSetvoice        $08
0000034E                          M 	smpsfmvoice	$08
0000034E EF08                     M 	dc.b	$ef,$08
00000350                            	smpsModSet          $02, $01, $FE, $04
00000350 F0                       M 	dc.b	$f0
00000351 0201 FE04                M 	dc.b	$02,$01,$fe,$04
00000355                            	smpsAlterPitch      $0C
00000355                          M 	smpschangetransposition	$0c
00000355 E90C                     M 	dc.b	$e9,$0c
00000357                            
00000357                            EHZ_Loop05:
00000357 C120 E720 C3E7 20BF E720+  	dc.b	nE5, $20, smpsNoAttack, $20, nFs5, smpsNoAttack, $20, nD5, smpsNoAttack, $20, nC5, smpsNoAttack
00000363 20                         	dc.b	$20
00000364                            	smpsLoop            $00, $04, EHZ_Loop05
00000364 F7                       M 	dc.b	$f7
00000365 0004                     M 	dc.b	index,loops
00000367 0000                     M 	dc.w	((ehz_loop05&$7fff)<<8)&$ff00+(ehz_loop05&$7fff)>>8
00000369                            	smpsAlterPitch      $F4
00000369                          M 	smpschangetransposition	$f4
00000369 E9F4                     M 	dc.b	$e9,$f4
0000036B                            	smpsModOff
0000036B F4                       M 	dc.b	$f4
0000036C                            	smpsSetvoice        $02
0000036C                          M 	smpsfmvoice	$02
0000036C EF02                     M 	dc.b	$ef,$02
0000036E                            	smpsPan             panCenter, $00
0000036E E0C0                     M 	dc.b	$e0,direction+amsfms
00000370 BD10 BDBD BDBC BCBC BCBC+  	dc.b	nC5, $10, nC5, nC5, nC5, nB4, nB4, nB4, nB4, nB4, nB4, nB4
0000037C BCBD BDBD BDBD BDBD BDBC+  	dc.b	nB4, nC5, nC5, nC5, nC5, nC5, nC5, nC5, nC5, nB4, nB4, nB4
00000388 BC                         	dc.b	nB4
00000389                            	smpsSetvoice        $03
00000389                          M 	smpsfmvoice	$03
00000389 EF03                     M 	dc.b	$ef,$03
0000038B                            	smpsAlterVol        $04
0000038B E604                     M 	dc.b	$e6,$04
0000038D B304 8008 B520 E714 E720+  	dc.b	nD4, $04, nRst, $08, nE4, $20, smpsNoAttack, $14, smpsNoAttack, $20, smpsNoAttack, $0C
00000399 8014                       	dc.b	nRst, $14
0000039B                            	smpsAlterVol        $FC
0000039B E6FC                     M 	dc.b	$e6,$fc
0000039D                            	smpsJump            EHZ_Jump00
0000039D F6                       M 	dc.b	$f6
0000039E 0000                     M 	dc.w	((ehz_jump00&$7fff)<<8)&$ff00+(ehz_jump00&$7fff)>>8
000003A0                            
000003A0                            ; FM1 Data
000003A0                            EHZ_FM1:
000003A0                            	smpsSetvoice        $07
000003A0                          M 	smpsfmvoice	$07
000003A0 EF07                     M 	dc.b	$ef,$07
000003A2 A30C A520 E708 AC04 A9A5+  	dc.b	nBb2, $0C, nC3, $20, smpsNoAttack, $08, nG3, $04, nE3, nC3, nA2, $08
000003AE AE04 AEA2 08AE 04AE A308+  	dc.b	nA3, $04, nA3, nA2, $08, nA3, $04, nA3, nBb2, $08, nBb3, $04
000003BA AFA3 08AF 04AF             	dc.b	nBb3, nBb2, $08, nBb3, $04, nBb3
000003C0                            
000003C0                            EHZ_Loop04:
000003C0 A508 B104 80B1 08AC B30C+  	dc.b	nC3, $08, nC4, $04, nRst, nC4, $08, nG3, nD4, $0C, nC4, $08
000003CC AC04 AEB1 A708 B304 80B3+  	dc.b	nG3, $04, nA3, nC4, nD3, $08, nD4, $04, nRst, nD4, $08, nA3
000003D8 B50C B304 80AE B0B3 A308+  	dc.b	nE4, $0C, nD4, $04, nRst, nA3, nB3, nD4, nBb2, $08, nBb3, $04
000003E4 80AF 08AA B10C AF08 AA04+  	dc.b	nRst, nBb3, $08, nF3, nC4, $0C, nBb3, $08, nF3, $04, nG3, nBb3
000003F0 A208 AE04 A2A4 08B0 04A4+  	dc.b	nA2, $08, nA3, $04, nA2, nB2, $08, nB3, $04, nB2, nC3, $08
000003FC B104 A5A2 08AE 04A2        	dc.b	nC4, $04, nC3, nA2, $08, nA3, $04, nA2
00000404                            	smpsLoop            $00, $04, EHZ_Loop04
00000404 F7                       M 	dc.b	$f7
00000405 0004                     M 	dc.b	index,loops
00000407 0000                     M 	dc.w	((ehz_loop04&$7fff)<<8)&$ff00+(ehz_loop04&$7fff)>>8
00000409 AA08 B6A5 B1AA B6A5 B1A9+  	dc.b	nF3, $08, nF4, nC3, nC4, nF3, nF4, nC3, nC4, nE3, nE4, nB2
00000415 B0A9 B5A4 B0A9 B5A4 B0A1+  	dc.b	nB3, nE3, nE4, nB2, nB3, nE3, nE4, nB2, nB3, nAb2, nAb3, nE2
00000421 A9A2 AEA4 B0A5 B1A2 AEAA+  	dc.b	nE3, nA2, nA3, nB2, nB3, nC3, nC4, nA2, nA3, nF3, nF4, nC3
0000042D B1AA B6A5 B1A9 B5A4 B0A9+  	dc.b	nC4, nF3, nF4, nC3, nC4, nE3, nE4, nB2, nB3, nE3, nE4, nB2
00000439 B0A0 04A0 80A2 20E7 1404+  	dc.b	nB3, nG2, $04, nG2, nRst, nA2, $20, smpsNoAttack, $14, $04, $08, $04
00000445 A408 A5A7 A5A4 04A2 0C     	dc.b	nB2, $08, nC3, nD3, nC3, nB2, $04, nA2, $0C
0000044E                            	smpsJump            EHZ_Loop04
0000044E F6                       M 	dc.b	$f6
0000044F 0000                     M 	dc.w	((ehz_loop04&$7fff)<<8)&$ff00+(ehz_loop04&$7fff)>>8
00000451                            
00000451                            ; PSG1 Data
00000451                            EHZ_PSG1:
00000451 8020 8080 80               	dc.b	nRst, $20, nRst, nRst, nRst
00000456                            
00000456                            EHZ_Jump05:
00000456                            	smpsAlterPitch      $0C
00000456                          M 	smpschangetransposition	$0c
00000456 E90C                     M 	dc.b	$e9,$0c
00000458                            	smpsPSGvoice        fTone_0B
00000458 F50B                     M 	dc.b	$f5,ftone_0b
0000045A                            	smpsPSGAlterVol     $02
0000045A EC02                     M 	dc.b	$ec,$02
0000045C                            
0000045C                            EHZ_Loop0B:
0000045C C420 E720 C6E7 20C2 E720+  	dc.b	nG5, $20, smpsNoAttack, $20, nA5, smpsNoAttack, $20, nF5, smpsNoAttack, $20, nE5, smpsNoAttack
00000468 20                         	dc.b	$20
00000469                            	smpsLoop            $00, $04, EHZ_Loop0B
00000469 F7                       M 	dc.b	$f7
0000046A 0004                     M 	dc.b	index,loops
0000046C 0000                     M 	dc.w	((ehz_loop0b&$7fff)<<8)&$ff00+(ehz_loop0b&$7fff)>>8
0000046E 8020 80                    	dc.b	nRst, $20, nRst
00000471                            	smpsPSGvoice        fTone_08
00000471 F508                     M 	dc.b	$f5,ftone_08
00000473                            	smpsPSGAlterVol     $FF
00000473 ECFF                     M 	dc.b	$ec,$ff
00000475 80C8 0280 06C9 04C8 08     	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
0000047E                            	smpsPSGAlterVol     $FF
0000047E ECFF                     M 	dc.b	$ec,$ff
00000480                            	smpsPSGvoice        fTone_02
00000480 F502                     M 	dc.b	$f5,ftone_02
00000482                            	smpsPSGAlterVol     $03
00000482 EC03                     M 	dc.b	$ec,$03
00000484 C804 8004                  	dc.b	nB5, $04, nRst, $04
00000488                            	smpsPSGAlterVol     $03
00000488 EC03                     M 	dc.b	$ec,$03
0000048A C802 8002                  	dc.b	nB5, $02, nRst, $02
0000048E                            	smpsPSGAlterVol     $FA
0000048E ECFA                     M 	dc.b	$ec,$fa
00000490                            	smpsPSGvoice        fTone_08
00000490 F508                     M 	dc.b	$f5,ftone_08
00000492                            	smpsAlterPitch      $F4
00000492                          M 	smpschangetransposition	$f4
00000492 E9F4                     M 	dc.b	$e9,$f4
00000494 8020 80C9 0480 C910 C608+  	dc.b	nRst, $20, nRst, nC6, $04, nRst, nC6, $10, nA5, $08, nRst, $20
000004A0 8080                       	dc.b	nRst, nRst
000004A2                            	smpsAlterPitch      $0C
000004A2                          M 	smpschangetransposition	$0c
000004A2 E90C                     M 	dc.b	$e9,$0c
000004A4                            	smpsPSGAlterVol     $01
000004A4 EC01                     M 	dc.b	$ec,$01
000004A6 80C8 0280 06C9 04C8 08     	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
000004AF                            	smpsPSGAlterVol     $FF
000004AF ECFF                     M 	dc.b	$ec,$ff
000004B1                            	smpsPSGvoice        fTone_02
000004B1 F502                     M 	dc.b	$f5,ftone_02
000004B3                            	smpsPSGAlterVol     $03
000004B3 EC03                     M 	dc.b	$ec,$03
000004B5 C804 8004                  	dc.b	nB5, $04, nRst, $04
000004B9                            	smpsPSGAlterVol     $03
000004B9 EC03                     M 	dc.b	$ec,$03
000004BB C802 8002                  	dc.b	nB5, $02, nRst, $02
000004BF                            	smpsPSGAlterVol     $FA
000004BF ECFA                     M 	dc.b	$ec,$fa
000004C1                            	smpsAlterPitch      $F4
000004C1                          M 	smpschangetransposition	$f4
000004C1 E9F4                     M 	dc.b	$e9,$f4
000004C3 8020 8080 80               	dc.b	nRst, $20, nRst, nRst, nRst
000004C8                            	smpsJump            EHZ_Jump05
000004C8 F6                       M 	dc.b	$f6
000004C9 0000                     M 	dc.w	((ehz_jump05&$7fff)<<8)&$ff00+(ehz_jump05&$7fff)>>8
000004CB                            
000004CB                            ; PSG2 Data
000004CB                            EHZ_PSG2:
000004CB 8020 8080 80               	dc.b	nRst, $20, nRst, nRst, nRst
000004D0                            
000004D0                            EHZ_Jump04:
000004D0                            	smpsPSGAlterVol     $03
000004D0 EC03                     M 	dc.b	$ec,$03
000004D2                            	smpsPSGvoice        fTone_0B
000004D2 F50B                     M 	dc.b	$f5,ftone_0b
000004D4                            	smpsAlterNote       $00
000004D4                          M 	smpsdetune	$00
000004D4 E100                     M 	dc.b	$e1,$00
000004D6                            
000004D6                            EHZ_Loop0A:
000004D6 C120 E720 C3E7 20BF E720+  	dc.b	nE5, $20, smpsNoAttack, $20, nFs5, smpsNoAttack, $20, nD5, smpsNoAttack, $20, nC5, smpsNoAttack
000004E2 20                         	dc.b	$20
000004E3                            	smpsLoop            $00, $04, EHZ_Loop0A
000004E3 F7                       M 	dc.b	$f7
000004E4 0004                     M 	dc.b	index,loops
000004E6 0000                     M 	dc.w	((ehz_loop0a&$7fff)<<8)&$ff00+(ehz_loop0a&$7fff)>>8
000004E8                            	smpsModOff
000004E8 F4                       M 	dc.b	$f4
000004E9                            	smpsPSGAlterVol     $FD
000004E9 ECFD                     M 	dc.b	$ec,$fd
000004EB 8020 80                    	dc.b	nRst, $20, nRst
000004EE                            	smpsPSGvoice        $00
000004EE F500                     M 	dc.b	$f5,$00
000004F0                            	smpsAlterNote       $01
000004F0                          M 	smpsdetune	$01
000004F0 E101                     M 	dc.b	$e1,$01
000004F2                            	smpsPSGAlterVol     $01
000004F2 EC01                     M 	dc.b	$ec,$01
000004F4 80C8 0280 06C9 04C8 08     	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
000004FD                            	smpsPSGAlterVol     $FF
000004FD ECFF                     M 	dc.b	$ec,$ff
000004FF                            	smpsPSGvoice        fTone_02
000004FF F502                     M 	dc.b	$f5,ftone_02
00000501                            	smpsPSGAlterVol     $03
00000501 EC03                     M 	dc.b	$ec,$03
00000503 C804 8004                  	dc.b	nB5, $04, nRst, $04
00000507                            	smpsPSGAlterVol     $03
00000507 EC03                     M 	dc.b	$ec,$03
00000509 C802 8002                  	dc.b	nB5, $02, nRst, $02
0000050D                            	smpsPSGAlterVol     $FA
0000050D ECFA                     M 	dc.b	$ec,$fa
0000050F                            	smpsPSGvoice        $00
0000050F F500                     M 	dc.b	$f5,$00
00000511 8020 8080 8080 80          	dc.b	nRst, $20, nRst, nRst, nRst, nRst, nRst
00000518                            	smpsPSGAlterVol     $01
00000518 EC01                     M 	dc.b	$ec,$01
0000051A 80C8 0280 06C9 04C8 08     	dc.b	nRst, nB5, $02, nRst, $06, nC6, $04, nB5, $08
00000523                            	smpsPSGAlterVol     $FF
00000523 ECFF                     M 	dc.b	$ec,$ff
00000525                            	smpsPSGvoice        fTone_02
00000525 F502                     M 	dc.b	$f5,ftone_02
00000527                            	smpsPSGAlterVol     $03
00000527 EC03                     M 	dc.b	$ec,$03
00000529 C804 8004                  	dc.b	nB5, $04, nRst, $04
0000052D                            	smpsPSGAlterVol     $03
0000052D EC03                     M 	dc.b	$ec,$03
0000052F C802 8002                  	dc.b	nB5, $02, nRst, $02
00000533                            	smpsPSGAlterVol     $FA
00000533 ECFA                     M 	dc.b	$ec,$fa
00000535 8020 8080 80               	dc.b	nRst, $20, nRst, nRst, nRst
0000053A                            	smpsJump            EHZ_Jump04
0000053A F6                       M 	dc.b	$f6
0000053B 0000                     M 	dc.w	((ehz_jump04&$7fff)<<8)&$ff00+(ehz_jump04&$7fff)>>8
0000053D                            
0000053D                            ; PSG3 Data
0000053D                            EHZ_PSG3:
0000053D                            	smpsPSGform         $E7
0000053D F3E7                     M 	dc.b	$f3,$e7
0000053F                            	smpsPSGvoice        fTone_02
0000053F F502                     M 	dc.b	$f5,ftone_02
00000541 8008 C610 C6C6 C608 8020+  	dc.b	nRst, $08, nMaxPSG, $10, nMaxPSG, nMaxPSG, nMaxPSG, $08, nRst, $20, nRst
0000054C                            
0000054C                            EHZ_Loop07:
0000054C C608 04C6 C608 04C6 C608+  	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
00000558 C608 04C6                  	dc.b	nMaxPSG, $08, $04, nMaxPSG
0000055C                            	smpsLoop            $00, $07, EHZ_Loop07
0000055C F7                       M 	dc.b	$f7
0000055D 0007                     M 	dc.b	index,loops
0000055F 0000                     M 	dc.w	((ehz_loop07&$7fff)<<8)&$ff00+(ehz_loop07&$7fff)>>8
00000561 C608 04C6 C608 04C6 C608+  	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
0000056D C608                       	dc.b	nMaxPSG, $08
0000056F                            	smpsPSGvoice        fTone_03
0000056F F503                     M 	dc.b	$f5,ftone_03
00000571 C6                         	dc.b	nMaxPSG
00000572                            	smpsPSGvoice        fTone_02
00000572 F502                     M 	dc.b	$f5,ftone_02
00000574                            
00000574                            EHZ_Loop08:
00000574 C608 04C6 C608 04C6 C608+  	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
00000580 C608 04C6                  	dc.b	nMaxPSG, $08, $04, nMaxPSG
00000584                            	smpsLoop            $00, $07, EHZ_Loop08
00000584 F7                       M 	dc.b	$f7
00000585 0007                     M 	dc.b	index,loops
00000587 0000                     M 	dc.w	((ehz_loop08&$7fff)<<8)&$ff00+(ehz_loop08&$7fff)>>8
00000589 C608 04C6 C608 04C6 C608+  	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
00000595                            	smpsPSGvoice        fTone_03
00000595 F503                     M 	dc.b	$f5,ftone_03
00000597 C608                       	dc.b	nMaxPSG, $08
00000599                            	smpsPSGvoice        fTone_02
00000599 F502                     M 	dc.b	$f5,ftone_02
0000059B C604 C6                    	dc.b	nMaxPSG, $04, nMaxPSG
0000059E                            
0000059E                            EHZ_Loop09:
0000059E C608 04C6 C608 04C6 C608+  	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
000005AA C608 C604 C6               	dc.b	nMaxPSG, $08, nMaxPSG, $04, nMaxPSG
000005AF                            	smpsLoop            $00, $03, EHZ_Loop09
000005AF F7                       M 	dc.b	$f7
000005B0 0003                     M 	dc.b	index,loops
000005B2 0000                     M 	dc.w	((ehz_loop09&$7fff)<<8)&$ff00+(ehz_loop09&$7fff)>>8
000005B4 C608 04C6 C608 04C6 C608+  	dc.b	nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
000005C0                            	smpsPSGvoice        fTone_03
000005C0 F503                     M 	dc.b	$f5,ftone_03
000005C2 C608                       	dc.b	nMaxPSG, $08
000005C4                            	smpsPSGvoice        fTone_02
000005C4 F502                     M 	dc.b	$f5,ftone_02
000005C6 C604 C6C6 0804 C6C6 0804+  	dc.b	nMaxPSG, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG
000005D2 0804 C6C6 0804 C6C6 0804+  	dc.b	$08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG
000005DE 0804 C6C6 0804 C6          	dc.b	$08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG
000005E5                            	smpsPSGvoice        fTone_03
000005E5 F503                     M 	dc.b	$f5,ftone_03
000005E7 C608                       	dc.b	nMaxPSG, $08
000005E9                            	smpsPSGvoice        fTone_02
000005E9 F502                     M 	dc.b	$f5,ftone_02
000005EB C604 C6C6 0804 C6C6 0804+  	dc.b	nMaxPSG, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG, $08, $04, nMaxPSG, nMaxPSG
000005F7 0804 C6                    	dc.b	$08, $04, nMaxPSG
000005FA                            	smpsPSGvoice        fTone_03
000005FA F503                     M 	dc.b	$f5,ftone_03
000005FC C608                       	dc.b	nMaxPSG, $08
000005FE                            	smpsPSGvoice        fTone_02
000005FE F502                     M 	dc.b	$f5,ftone_02
00000600 C604 C6                    	dc.b	nMaxPSG, $04, nMaxPSG
00000603                            	smpsPSGvoice        fTone_01
00000603 F501                     M 	dc.b	$f5,ftone_01
00000605 C610 C6C6 C6               	dc.b	nMaxPSG, $10, nMaxPSG, nMaxPSG, nMaxPSG
0000060A                            	smpsPSGvoice        fTone_02
0000060A F502                     M 	dc.b	$f5,ftone_02
0000060C                            	smpsJump            EHZ_Loop07
0000060C F6                       M 	dc.b	$f6
0000060D 0000                     M 	dc.w	((ehz_loop07&$7fff)<<8)&$ff00+(ehz_loop07&$7fff)>>8
0000060F                            
0000060F                            ; DAC Data
0000060F                            EHZ_DAC:
0000060F 810C 20E7 1404 8C08 8E04+  	dc.b	dKick, $0C, $20, smpsNoAttack, $14, $04, dMidTom, $08, dFloorTom, $04, dMidTom, $08
0000061B 8C8C 818E 048C 8E08        	dc.b	dMidTom, dMidTom, dKick, dFloorTom, $04, dMidTom, dFloorTom, $08
00000623                            
00000623                            EHZ_Loop00:
00000623 8110 8281 82               	dc.b	dKick, $10, dSnare, dKick, dSnare
00000628                            	smpsLoop            $00, $07, EHZ_Loop00
00000628 F7                       M 	dc.b	$f7
00000629 0007                     M 	dc.b	index,loops
0000062B 0000                     M 	dc.w	((ehz_loop00&$7fff)<<8)&$ff00+(ehz_loop00&$7fff)>>8
0000062D 8110 8281 0882 1004 82     	dc.b	dKick, $10, dSnare, dKick, $08, dSnare, $10, $04, dSnare
00000636                            
00000636                            EHZ_Loop01:
00000636 8110 8281 82               	dc.b	dKick, $10, dSnare, dKick, dSnare
0000063B                            	smpsLoop            $00, $03, EHZ_Loop01
0000063B F7                       M 	dc.b	$f7
0000063C 0003                     M 	dc.b	index,loops
0000063E 0000                     M 	dc.w	((ehz_loop01&$7fff)<<8)&$ff00+(ehz_loop01&$7fff)>>8
00000640 8110 8281 0882 1008        	dc.b	dKick, $10, dSnare, dKick, $08, dSnare, $10, $08
00000648                            
00000648                            EHZ_Loop02:
00000648 8110 8281 82               	dc.b	dKick, $10, dSnare, dKick, dSnare
0000064D                            	smpsLoop            $00, $03, EHZ_Loop02
0000064D F7                       M 	dc.b	$f7
0000064E 0003                     M 	dc.b	index,loops
00000650 0000                     M 	dc.w	((ehz_loop02&$7fff)<<8)&$ff00+(ehz_loop02&$7fff)>>8
00000652 8110 8281 8208 0482 8110+  	dc.b	dKick, $10, dSnare, dKick, dSnare, $08, $04, dSnare, dKick, $10, dSnare, dKick
0000065E 8281 8281 0882 8210        	dc.b	dSnare, dKick, dSnare, dKick, $08, dSnare, dSnare, $10
00000666                            
00000666                            EHZ_Loop03:
00000666 8110 8281 82               	dc.b	dKick, $10, dSnare, dKick, dSnare
0000066B                            	smpsLoop            $00, $03, EHZ_Loop03
0000066B F7                       M 	dc.b	$f7
0000066C 0003                     M 	dc.b	index,loops
0000066E 0000                     M 	dc.w	((ehz_loop03&$7fff)<<8)&$ff00+(ehz_loop03&$7fff)>>8
00000670 8110 8281 0882 8210 810C+  	dc.b	dKick, $10, dSnare, dKick, $08, dSnare, dSnare, $10, dKick, $0C, dSnare, $20
0000067C 8004 8210 8104 8C08 0482+  	dc.b	nRst, $04, dSnare, $10, dKick, $04, dMidTom, $08, $04, dSnare, $08, dMidTom
00000688 818E 8E8E 048E             	dc.b	dKick, dFloorTom, dFloorTom, dFloorTom, $04, dFloorTom
0000068E                            	smpsJump            EHZ_Loop00
0000068E F6                       M 	dc.b	$f6
0000068F 0000                     M 	dc.w	((ehz_loop00&$7fff)<<8)&$ff00+(ehz_loop00&$7fff)>>8
00000691                            
00000691                            EHZ_Voices:
00000691                            ;	Voice $00
00000691                            ;	$07
00000691                            ;	$05, $00, $01, $02, 	$1F, $1F, $1F, $1F, 	$0E, $0E, $0E, $0E
00000691                            ;	$02, $02, $02, $02, 	$55, $55, $55, $54, 	$80, $80, $80, $80
00000691                            	smpsVcAlgorithm     $07
00000691 =00000007                M vcalgorithm	set	val
00000691                            	smpsVcFeedback      $00
00000691 =00000000                M vcfeedback	set	val
00000691                            	smpsVcUnusedBits    $00
00000691 =00000000                M vcunusedbits	set	val
00000691 =00000000                M vcd1r1unk	set	0
00000691 =00000000                M vcd1r2unk	set	0
00000691 =00000000                M vcd1r3unk	set	0
00000691 =00000000                M vcd1r4unk	set	0
00000691                            	smpsVcDetune        $00, $00, $00, $00
00000691 =00000000                M vcdt1	set	op1
00000691 =00000000                M vcdt2	set	op2
00000691 =00000000                M vcdt3	set	op3
00000691 =00000000                M vcdt4	set	op4
00000691                            	smpsVcCoarseFreq    $02, $01, $00, $05
00000691 =00000002                M vccf1	set	op1
00000691 =00000001                M vccf2	set	op2
00000691 =00000000                M vccf3	set	op3
00000691 =00000005                M vccf4	set	op4
00000691                            	smpsVcRateScale     $00, $00, $00, $00
00000691 =00000000                M vcrs1	set	op1
00000691 =00000000                M vcrs2	set	op2
00000691 =00000000                M vcrs3	set	op3
00000691 =00000000                M vcrs4	set	op4
00000691                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000691 =0000001F                M vcar1	set	op1
00000691 =0000001F                M vcar2	set	op2
00000691 =0000001F                M vcar3	set	op3
00000691 =0000001F                M vcar4	set	op4
00000691                            	smpsVcAmpMod        $00, $00, $00, $00
00000691 =00000000                M vcam1	set	op1<<5
00000691 =00000000                M vcam2	set	op2<<5
00000691 =00000000                M vcam3	set	op3<<5
00000691 =00000000                M vcam4	set	op4<<5
00000691                            	smpsVcDecayRate1    $0E, $0E, $0E, $0E
00000691 =0000000E                M vcd1r1	set	op1
00000691 =0000000E                M vcd1r2	set	op2
00000691 =0000000E                M vcd1r3	set	op3
00000691 =0000000E                M vcd1r4	set	op4
00000691                            	smpsVcDecayRate2    $02, $02, $02, $02
00000691 =00000002                M vcd2r1	set	op1
00000691 =00000002                M vcd2r2	set	op2
00000691 =00000002                M vcd2r3	set	op3
00000691 =00000002                M vcd2r4	set	op4
00000691                            	smpsVcDecayLevel    $05, $05, $05, $05
00000691 =00000005                M vcdl1	set	op1
00000691 =00000005                M vcdl2	set	op2
00000691 =00000005                M vcdl3	set	op3
00000691 =00000005                M vcdl4	set	op4
00000691                            	smpsVcReleaseRate   $04, $05, $05, $05
00000691 =00000004                M vcrr1	set	op1
00000691 =00000005                M vcrr2	set	op2
00000691 =00000005                M vcrr3	set	op3
00000691 =00000005                M vcrr4	set	op4
00000691                            	smpsVcTotalLevel    $00, $00, $00, $00
00000691 =00000000                M vctl1	set	op1
00000691 =00000000                M vctl2	set	op2
00000691 =00000000                M vctl3	set	op3
00000691 =00000000                M vctl4	set	op4
00000691 07                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000692 =FFFFFF80                M vctlmask4	set	((vcalgorithm=7)<<7)
00000692 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000692 =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000692 =00000080                M vctlmask1	set	$80
00000692 0501 0002                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000696 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000069A 0E0E 0E0E                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000069E 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006A2 5555 5554                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000006A6 8080 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006AA                            
000006AA                            ;	Voice $01
000006AA                            ;	$35
000006AA                            ;	$01, $01, $13, $00, 	$1F, $1D, $18, $19, 	$00, $09, $06, $0D
000006AA                            ;	$00, $00, $02, $03, 	$00, $06, $15, $16, 	$1E, $80, $83, $80
000006AA                            	smpsVcAlgorithm     $05
000006AA =00000005                M vcalgorithm	set	val
000006AA                            	smpsVcFeedback      $06
000006AA =00000006                M vcfeedback	set	val
000006AA                            	smpsVcUnusedBits    $00
000006AA =00000000                M vcunusedbits	set	val
000006AA =00000000                M vcd1r1unk	set	0
000006AA =00000000                M vcd1r2unk	set	0
000006AA =00000000                M vcd1r3unk	set	0
000006AA =00000000                M vcd1r4unk	set	0
000006AA                            	smpsVcDetune        $00, $01, $00, $00
000006AA =00000000                M vcdt1	set	op1
000006AA =00000001                M vcdt2	set	op2
000006AA =00000000                M vcdt3	set	op3
000006AA =00000000                M vcdt4	set	op4
000006AA                            	smpsVcCoarseFreq    $00, $03, $01, $01
000006AA =00000000                M vccf1	set	op1
000006AA =00000003                M vccf2	set	op2
000006AA =00000001                M vccf3	set	op3
000006AA =00000001                M vccf4	set	op4
000006AA                            	smpsVcRateScale     $00, $00, $00, $00
000006AA =00000000                M vcrs1	set	op1
000006AA =00000000                M vcrs2	set	op2
000006AA =00000000                M vcrs3	set	op3
000006AA =00000000                M vcrs4	set	op4
000006AA                            	smpsVcAttackRate    $19, $18, $1D, $1F
000006AA =00000019                M vcar1	set	op1
000006AA =00000018                M vcar2	set	op2
000006AA =0000001D                M vcar3	set	op3
000006AA =0000001F                M vcar4	set	op4
000006AA                            	smpsVcAmpMod        $00, $00, $00, $00
000006AA =00000000                M vcam1	set	op1<<5
000006AA =00000000                M vcam2	set	op2<<5
000006AA =00000000                M vcam3	set	op3<<5
000006AA =00000000                M vcam4	set	op4<<5
000006AA                            	smpsVcDecayRate1    $0D, $06, $09, $00
000006AA =0000000D                M vcd1r1	set	op1
000006AA =00000006                M vcd1r2	set	op2
000006AA =00000009                M vcd1r3	set	op3
000006AA =00000000                M vcd1r4	set	op4
000006AA                            	smpsVcDecayRate2    $03, $02, $00, $00
000006AA =00000003                M vcd2r1	set	op1
000006AA =00000002                M vcd2r2	set	op2
000006AA =00000000                M vcd2r3	set	op3
000006AA =00000000                M vcd2r4	set	op4
000006AA                            	smpsVcDecayLevel    $01, $01, $00, $00
000006AA =00000001                M vcdl1	set	op1
000006AA =00000001                M vcdl2	set	op2
000006AA =00000000                M vcdl3	set	op3
000006AA =00000000                M vcdl4	set	op4
000006AA                            	smpsVcReleaseRate   $06, $05, $06, $00
000006AA =00000006                M vcrr1	set	op1
000006AA =00000005                M vcrr2	set	op2
000006AA =00000006                M vcrr3	set	op3
000006AA =00000000                M vcrr4	set	op4
000006AA                            	smpsVcTotalLevel    $00, $03, $00, $1E
000006AA =00000000                M vctl1	set	op1
000006AA =00000003                M vctl2	set	op2
000006AA =00000000                M vctl3	set	op3
000006AA =0000001E                M vctl4	set	op4
000006AA 35                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006AB =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000006AB =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
000006AB =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
000006AB =00000080                M vctlmask1	set	$80
000006AB 0113 0100                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006AF 1F18 1D19                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006B3 0006 090D                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000006B7 0002 0003                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006BB 0015 0616                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000006BF 1E83 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006C3                            
000006C3                            ;	Voice $02
000006C3                            ;	$3D
000006C3                            ;	$02, $02, $01, $02, 	$14, $0E, $8C, $0E, 	$08, $0A, $07, $0A
000006C3                            ;	$00, $0E, $0E, $0E, 	$1F, $1F, $1F, $1F, 	$1A, $84, $84, $84
000006C3                            	smpsVcAlgorithm     $05
000006C3 =00000005                M vcalgorithm	set	val
000006C3                            	smpsVcFeedback      $07
000006C3 =00000007                M vcfeedback	set	val
000006C3                            	smpsVcUnusedBits    $00
000006C3 =00000000                M vcunusedbits	set	val
000006C3 =00000000                M vcd1r1unk	set	0
000006C3 =00000000                M vcd1r2unk	set	0
000006C3 =00000000                M vcd1r3unk	set	0
000006C3 =00000000                M vcd1r4unk	set	0
000006C3                            	smpsVcDetune        $00, $00, $00, $00
000006C3 =00000000                M vcdt1	set	op1
000006C3 =00000000                M vcdt2	set	op2
000006C3 =00000000                M vcdt3	set	op3
000006C3 =00000000                M vcdt4	set	op4
000006C3                            	smpsVcCoarseFreq    $02, $01, $02, $02
000006C3 =00000002                M vccf1	set	op1
000006C3 =00000001                M vccf2	set	op2
000006C3 =00000002                M vccf3	set	op3
000006C3 =00000002                M vccf4	set	op4
000006C3                            	smpsVcRateScale     $00, $02, $00, $00
000006C3 =00000000                M vcrs1	set	op1
000006C3 =00000002                M vcrs2	set	op2
000006C3 =00000000                M vcrs3	set	op3
000006C3 =00000000                M vcrs4	set	op4
000006C3                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000006C3 =0000000E                M vcar1	set	op1
000006C3 =0000000C                M vcar2	set	op2
000006C3 =0000000E                M vcar3	set	op3
000006C3 =00000014                M vcar4	set	op4
000006C3                            	smpsVcAmpMod        $00, $00, $00, $00
000006C3 =00000000                M vcam1	set	op1<<5
000006C3 =00000000                M vcam2	set	op2<<5
000006C3 =00000000                M vcam3	set	op3<<5
000006C3 =00000000                M vcam4	set	op4<<5
000006C3                            	smpsVcDecayRate1    $0A, $07, $0A, $08
000006C3 =0000000A                M vcd1r1	set	op1
000006C3 =00000007                M vcd1r2	set	op2
000006C3 =0000000A                M vcd1r3	set	op3
000006C3 =00000008                M vcd1r4	set	op4
000006C3                            	smpsVcDecayRate2    $0E, $0E, $0E, $00
000006C3 =0000000E                M vcd2r1	set	op1
000006C3 =0000000E                M vcd2r2	set	op2
000006C3 =0000000E                M vcd2r3	set	op3
000006C3 =00000000                M vcd2r4	set	op4
000006C3                            	smpsVcDecayLevel    $01, $01, $01, $01
000006C3 =00000001                M vcdl1	set	op1
000006C3 =00000001                M vcdl2	set	op2
000006C3 =00000001                M vcdl3	set	op3
000006C3 =00000001                M vcdl4	set	op4
000006C3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000006C3 =0000000F                M vcrr1	set	op1
000006C3 =0000000F                M vcrr2	set	op2
000006C3 =0000000F                M vcrr3	set	op3
000006C3 =0000000F                M vcrr4	set	op4
000006C3                            	smpsVcTotalLevel    $04, $04, $04, $1A
000006C3 =00000004                M vctl1	set	op1
000006C3 =00000004                M vctl2	set	op2
000006C3 =00000004                M vctl3	set	op3
000006C3 =0000001A                M vctl4	set	op4
000006C3 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006C4 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000006C4 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
000006C4 =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
000006C4 =00000080                M vctlmask1	set	$80
000006C4 0201 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006C8 148C 0E0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006CC 0807 0A0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000006D0 000E 0E0E                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006D4 1F1F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000006D8 1A84 8484                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006DC                            
000006DC                            ;	Voice $03
000006DC                            ;	$3D
000006DC                            ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
000006DC                            ;	$00, $00, $00, $00, 	$2B, $2B, $2B, $1B, 	$19, $80, $80, $80
000006DC                            	smpsVcAlgorithm     $05
000006DC =00000005                M vcalgorithm	set	val
000006DC                            	smpsVcFeedback      $07
000006DC =00000007                M vcfeedback	set	val
000006DC                            	smpsVcUnusedBits    $00
000006DC =00000000                M vcunusedbits	set	val
000006DC =00000000                M vcd1r1unk	set	0
000006DC =00000000                M vcd1r2unk	set	0
000006DC =00000000                M vcd1r3unk	set	0
000006DC =00000000                M vcd1r4unk	set	0
000006DC                            	smpsVcDetune        $00, $05, $02, $00
000006DC =00000000                M vcdt1	set	op1
000006DC =00000005                M vcdt2	set	op2
000006DC =00000002                M vcdt3	set	op3
000006DC =00000000                M vcdt4	set	op4
000006DC                            	smpsVcCoarseFreq    $01, $01, $01, $01
000006DC =00000001                M vccf1	set	op1
000006DC =00000001                M vccf2	set	op2
000006DC =00000001                M vccf3	set	op3
000006DC =00000001                M vccf4	set	op4
000006DC                            	smpsVcRateScale     $00, $00, $00, $00
000006DC =00000000                M vcrs1	set	op1
000006DC =00000000                M vcrs2	set	op2
000006DC =00000000                M vcrs3	set	op3
000006DC =00000000                M vcrs4	set	op4
000006DC                            	smpsVcAttackRate    $0F, $14, $14, $12
000006DC =0000000F                M vcar1	set	op1
000006DC =00000014                M vcar2	set	op2
000006DC =00000014                M vcar3	set	op3
000006DC =00000012                M vcar4	set	op4
000006DC                            	smpsVcAmpMod        $00, $00, $00, $00
000006DC =00000000                M vcam1	set	op1<<5
000006DC =00000000                M vcam2	set	op2<<5
000006DC =00000000                M vcam3	set	op3<<5
000006DC =00000000                M vcam4	set	op4<<5
000006DC                            	smpsVcDecayRate1    $05, $05, $05, $0A
000006DC =00000005                M vcd1r1	set	op1
000006DC =00000005                M vcd1r2	set	op2
000006DC =00000005                M vcd1r3	set	op3
000006DC =0000000A                M vcd1r4	set	op4
000006DC                            	smpsVcDecayRate2    $00, $00, $00, $00
000006DC =00000000                M vcd2r1	set	op1
000006DC =00000000                M vcd2r2	set	op2
000006DC =00000000                M vcd2r3	set	op3
000006DC =00000000                M vcd2r4	set	op4
000006DC                            	smpsVcDecayLevel    $01, $02, $02, $02
000006DC =00000001                M vcdl1	set	op1
000006DC =00000002                M vcdl2	set	op2
000006DC =00000002                M vcdl3	set	op3
000006DC =00000002                M vcdl4	set	op4
000006DC                            	smpsVcReleaseRate   $0B, $0B, $0B, $0B
000006DC =0000000B                M vcrr1	set	op1
000006DC =0000000B                M vcrr2	set	op2
000006DC =0000000B                M vcrr3	set	op3
000006DC =0000000B                M vcrr4	set	op4
000006DC                            	smpsVcTotalLevel    $00, $00, $00, $19
000006DC =00000000                M vctl1	set	op1
000006DC =00000000                M vctl2	set	op2
000006DC =00000000                M vctl3	set	op3
000006DC =00000019                M vctl4	set	op4
000006DC 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006DD =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000006DD =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
000006DD =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
000006DD =00000080                M vctlmask1	set	$80
000006DD 0151 2101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006E1 1214 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006E5 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000006E9 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006ED 2B2B 2B1B                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000006F1 1980 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006F5                            
000006F5                            ;	Voice $04
000006F5                            ;	$3B
000006F5                            ;	$07, $34, $32, $01, 	$1F, $14, $5F, $5F, 	$02, $02, $03, $04
000006F5                            ;	$01, $01, $02, $03, 	$13, $13, $13, $17, 	$1E, $28, $28, $80
000006F5                            	smpsVcAlgorithm     $03
000006F5 =00000003                M vcalgorithm	set	val
000006F5                            	smpsVcFeedback      $07
000006F5 =00000007                M vcfeedback	set	val
000006F5                            	smpsVcUnusedBits    $00
000006F5 =00000000                M vcunusedbits	set	val
000006F5 =00000000                M vcd1r1unk	set	0
000006F5 =00000000                M vcd1r2unk	set	0
000006F5 =00000000                M vcd1r3unk	set	0
000006F5 =00000000                M vcd1r4unk	set	0
000006F5                            	smpsVcDetune        $00, $03, $03, $00
000006F5 =00000000                M vcdt1	set	op1
000006F5 =00000003                M vcdt2	set	op2
000006F5 =00000003                M vcdt3	set	op3
000006F5 =00000000                M vcdt4	set	op4
000006F5                            	smpsVcCoarseFreq    $01, $02, $04, $07
000006F5 =00000001                M vccf1	set	op1
000006F5 =00000002                M vccf2	set	op2
000006F5 =00000004                M vccf3	set	op3
000006F5 =00000007                M vccf4	set	op4
000006F5                            	smpsVcRateScale     $01, $01, $00, $00
000006F5 =00000001                M vcrs1	set	op1
000006F5 =00000001                M vcrs2	set	op2
000006F5 =00000000                M vcrs3	set	op3
000006F5 =00000000                M vcrs4	set	op4
000006F5                            	smpsVcAttackRate    $1F, $1F, $14, $1F
000006F5 =0000001F                M vcar1	set	op1
000006F5 =0000001F                M vcar2	set	op2
000006F5 =00000014                M vcar3	set	op3
000006F5 =0000001F                M vcar4	set	op4
000006F5                            	smpsVcAmpMod        $00, $00, $00, $00
000006F5 =00000000                M vcam1	set	op1<<5
000006F5 =00000000                M vcam2	set	op2<<5
000006F5 =00000000                M vcam3	set	op3<<5
000006F5 =00000000                M vcam4	set	op4<<5
000006F5                            	smpsVcDecayRate1    $04, $03, $02, $02
000006F5 =00000004                M vcd1r1	set	op1
000006F5 =00000003                M vcd1r2	set	op2
000006F5 =00000002                M vcd1r3	set	op3
000006F5 =00000002                M vcd1r4	set	op4
000006F5                            	smpsVcDecayRate2    $03, $02, $01, $01
000006F5 =00000003                M vcd2r1	set	op1
000006F5 =00000002                M vcd2r2	set	op2
000006F5 =00000001                M vcd2r3	set	op3
000006F5 =00000001                M vcd2r4	set	op4
000006F5                            	smpsVcDecayLevel    $01, $01, $01, $01
000006F5 =00000001                M vcdl1	set	op1
000006F5 =00000001                M vcdl2	set	op2
000006F5 =00000001                M vcdl3	set	op3
000006F5 =00000001                M vcdl4	set	op4
000006F5                            	smpsVcReleaseRate   $07, $03, $03, $03
000006F5 =00000007                M vcrr1	set	op1
000006F5 =00000003                M vcrr2	set	op2
000006F5 =00000003                M vcrr3	set	op3
000006F5 =00000003                M vcrr4	set	op4
000006F5                            	smpsVcTotalLevel    $00, $28, $28, $1E
000006F5 =00000000                M vctl1	set	op1
000006F5 =00000028                M vctl2	set	op2
000006F5 =00000028                M vctl3	set	op3
000006F5 =0000001E                M vctl4	set	op4
000006F5 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006F6 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000006F6 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
000006F6 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000006F6 =00000080                M vctlmask1	set	$80
000006F6 0732 3401                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006FA 1F5F 145F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006FE 0203 0204                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000702 0102 0103                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000706 1313 1317                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000070A 1E28 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000070E                            
0000070E                            ;	Voice $05
0000070E                            ;	$3B
0000070E                            ;	$52, $31, $31, $51, 	$12, $14, $12, $14, 	$0E, $00, $0E, $02
0000070E                            ;	$00, $00, $00, $01, 	$47, $07, $57, $37, 	$1C, $18, $1D, $80
0000070E                            	smpsVcAlgorithm     $03
0000070E =00000003                M vcalgorithm	set	val
0000070E                            	smpsVcFeedback      $07
0000070E =00000007                M vcfeedback	set	val
0000070E                            	smpsVcUnusedBits    $00
0000070E =00000000                M vcunusedbits	set	val
0000070E =00000000                M vcd1r1unk	set	0
0000070E =00000000                M vcd1r2unk	set	0
0000070E =00000000                M vcd1r3unk	set	0
0000070E =00000000                M vcd1r4unk	set	0
0000070E                            	smpsVcDetune        $05, $03, $03, $05
0000070E =00000005                M vcdt1	set	op1
0000070E =00000003                M vcdt2	set	op2
0000070E =00000003                M vcdt3	set	op3
0000070E =00000005                M vcdt4	set	op4
0000070E                            	smpsVcCoarseFreq    $01, $01, $01, $02
0000070E =00000001                M vccf1	set	op1
0000070E =00000001                M vccf2	set	op2
0000070E =00000001                M vccf3	set	op3
0000070E =00000002                M vccf4	set	op4
0000070E                            	smpsVcRateScale     $00, $00, $00, $00
0000070E =00000000                M vcrs1	set	op1
0000070E =00000000                M vcrs2	set	op2
0000070E =00000000                M vcrs3	set	op3
0000070E =00000000                M vcrs4	set	op4
0000070E                            	smpsVcAttackRate    $14, $12, $14, $12
0000070E =00000014                M vcar1	set	op1
0000070E =00000012                M vcar2	set	op2
0000070E =00000014                M vcar3	set	op3
0000070E =00000012                M vcar4	set	op4
0000070E                            	smpsVcAmpMod        $00, $00, $00, $00
0000070E =00000000                M vcam1	set	op1<<5
0000070E =00000000                M vcam2	set	op2<<5
0000070E =00000000                M vcam3	set	op3<<5
0000070E =00000000                M vcam4	set	op4<<5
0000070E                            	smpsVcDecayRate1    $02, $0E, $00, $0E
0000070E =00000002                M vcd1r1	set	op1
0000070E =0000000E                M vcd1r2	set	op2
0000070E =00000000                M vcd1r3	set	op3
0000070E =0000000E                M vcd1r4	set	op4
0000070E                            	smpsVcDecayRate2    $01, $00, $00, $00
0000070E =00000001                M vcd2r1	set	op1
0000070E =00000000                M vcd2r2	set	op2
0000070E =00000000                M vcd2r3	set	op3
0000070E =00000000                M vcd2r4	set	op4
0000070E                            	smpsVcDecayLevel    $03, $05, $00, $04
0000070E =00000003                M vcdl1	set	op1
0000070E =00000005                M vcdl2	set	op2
0000070E =00000000                M vcdl3	set	op3
0000070E =00000004                M vcdl4	set	op4
0000070E                            	smpsVcReleaseRate   $07, $07, $07, $07
0000070E =00000007                M vcrr1	set	op1
0000070E =00000007                M vcrr2	set	op2
0000070E =00000007                M vcrr3	set	op3
0000070E =00000007                M vcrr4	set	op4
0000070E                            	smpsVcTotalLevel    $00, $1D, $18, $1C
0000070E =00000000                M vctl1	set	op1
0000070E =0000001D                M vctl2	set	op2
0000070E =00000018                M vctl3	set	op3
0000070E =0000001C                M vctl4	set	op4
0000070E 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000070F =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000070F =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000070F =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000070F =00000080                M vctlmask1	set	$80
0000070F 5231 3151                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000713 1212 1414                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000717 0E0E 0002                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000071B 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000071F 4757 0737                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000723 1C1D 1880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000727                            
00000727                            ;	Voice $06
00000727                            ;	$3D
00000727                            ;	$01, $21, $50, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
00000727                            ;	$00, $00, $00, $00, 	$26, $28, $28, $18, 	$19, $80, $80, $80
00000727                            	smpsVcAlgorithm     $05
00000727 =00000005                M vcalgorithm	set	val
00000727                            	smpsVcFeedback      $07
00000727 =00000007                M vcfeedback	set	val
00000727                            	smpsVcUnusedBits    $00
00000727 =00000000                M vcunusedbits	set	val
00000727 =00000000                M vcd1r1unk	set	0
00000727 =00000000                M vcd1r2unk	set	0
00000727 =00000000                M vcd1r3unk	set	0
00000727 =00000000                M vcd1r4unk	set	0
00000727                            	smpsVcDetune        $00, $05, $02, $00
00000727 =00000000                M vcdt1	set	op1
00000727 =00000005                M vcdt2	set	op2
00000727 =00000002                M vcdt3	set	op3
00000727 =00000000                M vcdt4	set	op4
00000727                            	smpsVcCoarseFreq    $01, $00, $01, $01
00000727 =00000001                M vccf1	set	op1
00000727 =00000000                M vccf2	set	op2
00000727 =00000001                M vccf3	set	op3
00000727 =00000001                M vccf4	set	op4
00000727                            	smpsVcRateScale     $00, $00, $00, $00
00000727 =00000000                M vcrs1	set	op1
00000727 =00000000                M vcrs2	set	op2
00000727 =00000000                M vcrs3	set	op3
00000727 =00000000                M vcrs4	set	op4
00000727                            	smpsVcAttackRate    $0F, $14, $14, $12
00000727 =0000000F                M vcar1	set	op1
00000727 =00000014                M vcar2	set	op2
00000727 =00000014                M vcar3	set	op3
00000727 =00000012                M vcar4	set	op4
00000727                            	smpsVcAmpMod        $00, $00, $00, $00
00000727 =00000000                M vcam1	set	op1<<5
00000727 =00000000                M vcam2	set	op2<<5
00000727 =00000000                M vcam3	set	op3<<5
00000727 =00000000                M vcam4	set	op4<<5
00000727                            	smpsVcDecayRate1    $05, $05, $05, $0A
00000727 =00000005                M vcd1r1	set	op1
00000727 =00000005                M vcd1r2	set	op2
00000727 =00000005                M vcd1r3	set	op3
00000727 =0000000A                M vcd1r4	set	op4
00000727                            	smpsVcDecayRate2    $00, $00, $00, $00
00000727 =00000000                M vcd2r1	set	op1
00000727 =00000000                M vcd2r2	set	op2
00000727 =00000000                M vcd2r3	set	op3
00000727 =00000000                M vcd2r4	set	op4
00000727                            	smpsVcDecayLevel    $01, $02, $02, $02
00000727 =00000001                M vcdl1	set	op1
00000727 =00000002                M vcdl2	set	op2
00000727 =00000002                M vcdl3	set	op3
00000727 =00000002                M vcdl4	set	op4
00000727                            	smpsVcReleaseRate   $08, $08, $08, $06
00000727 =00000008                M vcrr1	set	op1
00000727 =00000008                M vcrr2	set	op2
00000727 =00000008                M vcrr3	set	op3
00000727 =00000006                M vcrr4	set	op4
00000727                            	smpsVcTotalLevel    $00, $00, $00, $19
00000727 =00000000                M vctl1	set	op1
00000727 =00000000                M vctl2	set	op2
00000727 =00000000                M vctl3	set	op3
00000727 =00000019                M vctl4	set	op4
00000727 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000728 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000728 =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000728 =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000728 =00000080                M vctlmask1	set	$80
00000728 0150 2101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000072C 1214 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000730 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000734 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000738 2628 2818                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000073C 1980 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000740                            
00000740                            ;	Voice $07
00000740                            ;	$08
00000740                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00000740                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
00000740                            	smpsVcAlgorithm     $00
00000740 =00000000                M vcalgorithm	set	val
00000740                            	smpsVcFeedback      $01
00000740 =00000001                M vcfeedback	set	val
00000740                            	smpsVcUnusedBits    $00
00000740 =00000000                M vcunusedbits	set	val
00000740 =00000000                M vcd1r1unk	set	0
00000740 =00000000                M vcd1r2unk	set	0
00000740 =00000000                M vcd1r3unk	set	0
00000740 =00000000                M vcd1r4unk	set	0
00000740                            	smpsVcDetune        $00, $03, $07, $00
00000740 =00000000                M vcdt1	set	op1
00000740 =00000003                M vcdt2	set	op2
00000740 =00000007                M vcdt3	set	op3
00000740 =00000000                M vcdt4	set	op4
00000740                            	smpsVcCoarseFreq    $00, $00, $00, $0A
00000740 =00000000                M vccf1	set	op1
00000740 =00000000                M vccf2	set	op2
00000740 =00000000                M vccf3	set	op3
00000740 =0000000A                M vccf4	set	op4
00000740                            	smpsVcRateScale     $01, $01, $00, $00
00000740 =00000001                M vcrs1	set	op1
00000740 =00000001                M vcrs2	set	op2
00000740 =00000000                M vcrs3	set	op3
00000740 =00000000                M vcrs4	set	op4
00000740                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000740 =0000001F                M vcar1	set	op1
00000740 =0000001F                M vcar2	set	op2
00000740 =0000001F                M vcar3	set	op3
00000740 =0000001F                M vcar4	set	op4
00000740                            	smpsVcAmpMod        $00, $00, $00, $00
00000740 =00000000                M vcam1	set	op1<<5
00000740 =00000000                M vcam2	set	op2<<5
00000740 =00000000                M vcam3	set	op3<<5
00000740 =00000000                M vcam4	set	op4<<5
00000740                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00000740 =0000000A                M vcd1r1	set	op1
00000740 =0000000A                M vcd1r2	set	op2
00000740 =0000000E                M vcd1r3	set	op3
00000740 =00000012                M vcd1r4	set	op4
00000740                            	smpsVcDecayRate2    $03, $04, $04, $00
00000740 =00000003                M vcd2r1	set	op1
00000740 =00000004                M vcd2r2	set	op2
00000740 =00000004                M vcd2r3	set	op3
00000740 =00000000                M vcd2r4	set	op4
00000740                            	smpsVcDecayLevel    $02, $02, $02, $02
00000740 =00000002                M vcdl1	set	op1
00000740 =00000002                M vcdl2	set	op2
00000740 =00000002                M vcdl3	set	op3
00000740 =00000002                M vcdl4	set	op4
00000740                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000740 =0000000F                M vcrr1	set	op1
00000740 =0000000F                M vcrr2	set	op2
00000740 =0000000F                M vcrr3	set	op3
00000740 =0000000F                M vcrr4	set	op4
00000740                            	smpsVcTotalLevel    $00, $13, $2D, $24
00000740 =00000000                M vctl1	set	op1
00000740 =00000013                M vctl2	set	op2
00000740 =0000002D                M vctl3	set	op3
00000740 =00000024                M vctl4	set	op4
00000740 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000741 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000741 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000741 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000741 =00000080                M vctlmask1	set	$80
00000741 0A30 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000745 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000749 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000074D 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000751 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000755 2413 2D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000759                            
00000759                            ;	Voice $08
00000759                            ;	$04
00000759                            ;	$57, $02, $70, $50, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
00000759                            ;	$06, $0A, $00, $0A, 	$00, $0F, $00, $0F, 	$1A, $80, $10, $80
00000759                            	smpsVcAlgorithm     $04
00000759 =00000004                M vcalgorithm	set	val
00000759                            	smpsVcFeedback      $00
00000759 =00000000                M vcfeedback	set	val
00000759                            	smpsVcUnusedBits    $00
00000759 =00000000                M vcunusedbits	set	val
00000759 =00000000                M vcd1r1unk	set	0
00000759 =00000000                M vcd1r2unk	set	0
00000759 =00000000                M vcd1r3unk	set	0
00000759 =00000000                M vcd1r4unk	set	0
00000759                            	smpsVcDetune        $05, $07, $00, $05
00000759 =00000005                M vcdt1	set	op1
00000759 =00000007                M vcdt2	set	op2
00000759 =00000000                M vcdt3	set	op3
00000759 =00000005                M vcdt4	set	op4
00000759                            	smpsVcCoarseFreq    $00, $00, $02, $07
00000759 =00000000                M vccf1	set	op1
00000759 =00000000                M vccf2	set	op2
00000759 =00000002                M vccf3	set	op3
00000759 =00000007                M vccf4	set	op4
00000759                            	smpsVcRateScale     $00, $00, $00, $00
00000759 =00000000                M vcrs1	set	op1
00000759 =00000000                M vcrs2	set	op2
00000759 =00000000                M vcrs3	set	op3
00000759 =00000000                M vcrs4	set	op4
00000759                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000759 =0000001F                M vcar1	set	op1
00000759 =0000001F                M vcar2	set	op2
00000759 =0000001F                M vcar3	set	op3
00000759 =0000001F                M vcar4	set	op4
00000759                            	smpsVcAmpMod        $00, $00, $00, $00
00000759 =00000000                M vcam1	set	op1<<5
00000759 =00000000                M vcam2	set	op2<<5
00000759 =00000000                M vcam3	set	op3<<5
00000759 =00000000                M vcam4	set	op4<<5
00000759                            	smpsVcDecayRate1    $00, $00, $00, $00
00000759 =00000000                M vcd1r1	set	op1
00000759 =00000000                M vcd1r2	set	op2
00000759 =00000000                M vcd1r3	set	op3
00000759 =00000000                M vcd1r4	set	op4
00000759                            	smpsVcDecayRate2    $0A, $00, $0A, $06
00000759 =0000000A                M vcd2r1	set	op1
00000759 =00000000                M vcd2r2	set	op2
00000759 =0000000A                M vcd2r3	set	op3
00000759 =00000006                M vcd2r4	set	op4
00000759                            	smpsVcDecayLevel    $00, $00, $00, $00
00000759 =00000000                M vcdl1	set	op1
00000759 =00000000                M vcdl2	set	op2
00000759 =00000000                M vcdl3	set	op3
00000759 =00000000                M vcdl4	set	op4
00000759                            	smpsVcReleaseRate   $0F, $00, $0F, $00
00000759 =0000000F                M vcrr1	set	op1
00000759 =00000000                M vcrr2	set	op2
00000759 =0000000F                M vcrr3	set	op3
00000759 =00000000                M vcrr4	set	op4
00000759                            	smpsVcTotalLevel    $00, $10, $00, $1A
00000759 =00000000                M vctl1	set	op1
00000759 =00000010                M vctl2	set	op2
00000759 =00000000                M vctl3	set	op3
00000759 =0000001A                M vctl4	set	op4
00000759 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000075A =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000075A =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000075A =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000075A =00000080                M vctlmask1	set	$80
0000075A 5770 0250                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000075E 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000762 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000766 0600 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000076A 0000 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000076E 1A10 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000772                            
00000772                            		pops			
00000000                            		
00000000                            		pushs
00000000                            Music7:	section	org($1380),file("sound/music/compressed/MTZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/MTZ.asm"	; include the actual music file for assembly
00000000                            MTZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     MTZ_Voices
00000000 0000                     M 	dc.w	((mtz_voices&$7fff)<<8)&$ff00+(mtz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $EA
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$ea
00000005 EA                       M 	dc.b	$ea
00000006                            
00000006                            	smpsHeaderDAC       MTZ_DAC
00000006                          M 	checkedchannelpointer	mtz_dac
00000006 0000                     M 	dc.w	((mtz_dac&$7fff)<<8)&$ff00+(mtz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        MTZ_FM1,	$F4, $0E
0000000A                          M 	checkedchannelpointer	mtz_fm1
0000000A 0000                     M 	dc.w	((mtz_fm1&$7fff)<<8)&$ff00+(mtz_fm1&$7fff)>>8
0000000C F40E                     M 	dc.b	$f4,$0e
0000000E                            	smpsHeaderFM        MTZ_FM2,	$18, $0A
0000000E                          M 	checkedchannelpointer	mtz_fm2
0000000E 0000                     M 	dc.w	((mtz_fm2&$7fff)<<8)&$ff00+(mtz_fm2&$7fff)>>8
00000010 180A                     M 	dc.b	$18,$0a
00000012                            	smpsHeaderFM        MTZ_FM3,	$0C, $14
00000012                          M 	checkedchannelpointer	mtz_fm3
00000012 0000                     M 	dc.w	((mtz_fm3&$7fff)<<8)&$ff00+(mtz_fm3&$7fff)>>8
00000014 0C14                     M 	dc.b	$0c,$14
00000016                            	smpsHeaderFM        MTZ_FM4,	$0C, $16
00000016                          M 	checkedchannelpointer	mtz_fm4
00000016 0000                     M 	dc.w	((mtz_fm4&$7fff)<<8)&$ff00+(mtz_fm4&$7fff)>>8
00000018 0C16                     M 	dc.b	$0c,$16
0000001A                            	smpsHeaderFM        MTZ_FM5,	$0C, $16
0000001A                          M 	checkedchannelpointer	mtz_fm5
0000001A 0000                     M 	dc.w	((mtz_fm5&$7fff)<<8)&$ff00+(mtz_fm5&$7fff)>>8
0000001C 0C16                     M 	dc.b	$0c,$16
0000001E                            	smpsHeaderPSG       MTZ_PSG1,	$E8, $06, $00, $00
0000001E                          M 	checkedchannelpointer	mtz_psg1
0000001E 0000                     M 	dc.w	((mtz_psg1&$7fff)<<8)&$ff00+(mtz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$e8
00000020 E8                       M 	dc.b	$e8
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       MTZ_PSG2,	$DC, $08, $00, $00
00000024                          M 	checkedchannelpointer	mtz_psg2
00000024 0000                     M 	dc.w	((mtz_psg2&$7fff)<<8)&$ff00+(mtz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 08                       M 	dc.b	$08
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       MTZ_PSG3,	$00, $02, $00, fTone_03
0000002A                          M 	checkedchannelpointer	mtz_psg3
0000002A 0000                     M 	dc.w	((mtz_psg3&$7fff)<<8)&$ff00+(mtz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 02                       M 	dc.b	$02
0000002E 00                       M 	dc.b	$00
0000002F 03                       M 	dc.b	ftone_03
00000030                            
00000030                            ; PSG1 Data
00000030                            MTZ_PSG1:
00000030                            	smpsJump            MTZ_Jump02
00000030 F6                       M 	dc.b	$f6
00000031 0000                     M 	dc.w	((mtz_jump02&$7fff)<<8)&$ff00+(mtz_jump02&$7fff)>>8
00000033                            
00000033                            ; PSG2 Data
00000033                            MTZ_PSG2:
00000033                            	smpsAlterPitch      $0C
00000033                          M 	smpschangetransposition	$0c
00000033 E90C                     M 	dc.b	$e9,$0c
00000035                            	smpsJump            MTZ_Jump02
00000035 F6                       M 	dc.b	$f6
00000036 0000                     M 	dc.w	((mtz_jump02&$7fff)<<8)&$ff00+(mtz_jump02&$7fff)>>8
00000038                            
00000038                            ; FM1 Data
00000038                            MTZ_FM1:
00000038 8030 80                    	dc.b	nRst, $30, nRst
0000003B                            	smpsLoop            $00, $04, MTZ_FM1
0000003B F7                       M 	dc.b	$f7
0000003C 0004                     M 	dc.b	index,loops
0000003E 0000                     M 	dc.w	((mtz_fm1&$7fff)<<8)&$ff00+(mtz_fm1&$7fff)>>8
00000040                            
00000040                            MTZ_Loop09:
00000040 8030 80                    	dc.b	nRst, $30, nRst
00000043                            	smpsLoop            $00, $04, MTZ_Loop09
00000043 F7                       M 	dc.b	$f7
00000044 0004                     M 	dc.b	index,loops
00000046 0000                     M 	dc.w	((mtz_loop09&$7fff)<<8)&$ff00+(mtz_loop09&$7fff)>>8
00000048                            	smpsAlterPitch      $0C
00000048                          M 	smpschangetransposition	$0c
00000048 E90C                     M 	dc.b	$e9,$0c
0000004A                            	smpsSetvoice        $03
0000004A                          M 	smpsfmvoice	$03
0000004A EF03                     M 	dc.b	$ef,$03
0000004C                            	smpsModSet          $01, $02, $01, $7F
0000004C F0                       M 	dc.b	$f0
0000004D 0102 017F                M 	dc.b	$01,$02,$01,$7f
00000051 A460                       	dc.b	nB2, $60
00000053                            	smpsModSet          $01, $01, $08, $06
00000053 F0                       M 	dc.b	$f0
00000054 0101 0806                M 	dc.b	$01,$01,$08,$06
00000058 E7A5                       	dc.b	smpsNoAttack, nC3
0000005A                            	smpsAlterVol        $04
0000005A E604                     M 	dc.b	$e6,$04
0000005C E70C                       	dc.b	smpsNoAttack, $0C
0000005E                            	smpsAlterVol        $04
0000005E E604                     M 	dc.b	$e6,$04
00000060 E70C                       	dc.b	smpsNoAttack, $0C
00000062                            	smpsAlterVol        $04
00000062 E604                     M 	dc.b	$e6,$04
00000064 E70C                       	dc.b	smpsNoAttack, $0C
00000066                            	smpsAlterVol        $04
00000066 E604                     M 	dc.b	$e6,$04
00000068 E70C 8030                  	dc.b	smpsNoAttack, $0C, nRst, $30
0000006C                            	smpsAlterVol        $F0
0000006C E6F0                     M 	dc.b	$e6,$f0
0000006E                            	smpsModSet          $0C, $01, $04, $04
0000006E F0                       M 	dc.b	$f0
0000006F 0C01 0404                M 	dc.b	$0c,$01,$04,$04
00000073                            	smpsSetvoice        $03
00000073                          M 	smpsfmvoice	$03
00000073 EF03                     M 	dc.b	$ef,$03
00000075                            
00000075                            MTZ_Loop0A:
00000075 8030 800C                  	dc.b	nRst, $30, nRst, $0C
00000079                            	smpsModSet          $01, $01, $0C, $0C
00000079 F0                       M 	dc.b	$f0
0000007A 0101 0C0C                M 	dc.b	$01,$01,$0c,$0c
0000007E A80C                       	dc.b	nEb3, $0C
00000080                            	smpsModOff
00000080 F4                       M 	dc.b	$f4
00000081 E7A9 0CA7 0CA5 18          	dc.b	smpsNoAttack, nE3, $0C, nD3, $0C, nC3, $18
00000088                            	smpsModSet          $01, $01, $10, $06
00000088 F0                       M 	dc.b	$f0
00000089 0101 1006                M 	dc.b	$01,$01,$10,$06
0000008D A806                       	dc.b	nEb3, $06
0000008F                            	smpsModOff
0000008F F4                       M 	dc.b	$f4
00000090 E7A9 0680 3080 0C80 3080+  	dc.b	smpsNoAttack, nE3, $06, nRst, $30, nRst, $0C, nRst, $30, nRst, $0C, nE3
0000009C AAA9                       	dc.b	nF3, nE3
0000009E                            	smpsModSet          $01, $01, $06, $18
0000009E F0                       M 	dc.b	$f0
0000009F 0101 0618                M 	dc.b	$01,$01,$06,$18
000000A3 AB0C                       	dc.b	nFs3, $0C
000000A5                            	smpsModOff
000000A5 F4                       M 	dc.b	$f4
000000A6 E7AC 0C                    	dc.b	smpsNoAttack, nG3, $0C
000000A9                            	smpsModSet          $01, $01, $06, $18
000000A9 F0                       M 	dc.b	$f0
000000AA 0101 0618                M 	dc.b	$01,$01,$06,$18
000000AE A80C                       	dc.b	nEb3, $0C
000000B0                            	smpsModOff
000000B0 F4                       M 	dc.b	$f4
000000B1 E7A9 0C                    	dc.b	smpsNoAttack, nE3, $0C
000000B4                            	smpsModSet          $01, $01, $05, $18
000000B4 F0                       M 	dc.b	$f0
000000B5 0101 0518                M 	dc.b	$01,$01,$05,$18
000000B9 A40C                       	dc.b	nB2, $0C
000000BB                            	smpsModOff
000000BB F4                       M 	dc.b	$f4
000000BC E7A5 0C80 18               	dc.b	smpsNoAttack, nC3, $0C, nRst, $18
000000C1                            	smpsLoop            $00, $02, MTZ_Loop0A
000000C1 F7                       M 	dc.b	$f7
000000C2 0002                     M 	dc.b	index,loops
000000C4 0000                     M 	dc.w	((mtz_loop0a&$7fff)<<8)&$ff00+(mtz_loop0a&$7fff)>>8
000000C6 8030 8080 8080 80          	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
000000CD                            	smpsAlterPitch      $F4
000000CD                          M 	smpschangetransposition	$f4
000000CD E9F4                     M 	dc.b	$e9,$f4
000000CF                            	smpsModSet          $06, $01, $08, $04
000000CF F0                       M 	dc.b	$f0
000000D0 0601 0804                M 	dc.b	$06,$01,$08,$04
000000D4                            	smpsSetvoice        $00
000000D4                          M 	smpsfmvoice	$00
000000D4 EF00                     M 	dc.b	$ef,$00
000000D6                            	smpsAlterVol        $0A
000000D6 E60A                     M 	dc.b	$e6,$0a
000000D8 C40A 8002 C406 80          	dc.b	nG5, $0A, nRst, $02, nG5, $06, nRst
000000DF                            	smpsAlterVol        $FB
000000DF E6FB                     M 	dc.b	$e6,$fb
000000E1                            	smpsAlterPitch      $0C
000000E1                          M 	smpschangetransposition	$0c
000000E1 E90C                     M 	dc.b	$e9,$0c
000000E3                            	smpsSetvoice        $03
000000E3                          M 	smpsfmvoice	$03
000000E3 EF03                     M 	dc.b	$ef,$03
000000E5 A006 A3A5 A812 A505 8007+  	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $05, nRst, $07, nBb2, $06
000000F1 A508 800A                  	dc.b	nC3, $08, nRst, $0A
000000F5                            	smpsAlterPitch      $F4
000000F5                          M 	smpschangetransposition	$f4
000000F5 E9F4                     M 	dc.b	$e9,$f4
000000F7                            	smpsSetvoice        $00
000000F7                          M 	smpsfmvoice	$00
000000F7 EF00                     M 	dc.b	$ef,$00
000000F9                            	smpsAlterVol        $05
000000F9 E605                     M 	dc.b	$e6,$05
000000FB C40A 8002 C406 80          	dc.b	nG5, $0A, nRst, $02, nG5, $06, nRst
00000102                            	smpsAlterVol        $FB
00000102 E6FB                     M 	dc.b	$e6,$fb
00000104                            	smpsAlterPitch      $0C
00000104                          M 	smpschangetransposition	$0c
00000104 E90C                     M 	dc.b	$e9,$0c
00000106                            	smpsSetvoice        $03
00000106                          M 	smpsfmvoice	$03
00000106 EF03                     M 	dc.b	$ef,$03
00000108 A006 A3A5 A812 A506 80A3+  	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2, $06, nC3
00000114 0580 0D80 3080 8080        	dc.b	$05, nRst, $0D, nRst, $30, nRst, nRst, nRst
0000011C                            	smpsAlterPitch      $F4
0000011C                          M 	smpschangetransposition	$f4
0000011C E9F4                     M 	dc.b	$e9,$f4
0000011E                            	smpsSetvoice        $00
0000011E                          M 	smpsfmvoice	$00
0000011E EF00                     M 	dc.b	$ef,$00
00000120                            	smpsAlterVol        $05
00000120 E605                     M 	dc.b	$e6,$05
00000122 C40A 8002 C406 80          	dc.b	nG5, $0A, nRst, $02, nG5, $06, nRst
00000129                            	smpsAlterVol        $FB
00000129 E6FB                     M 	dc.b	$e6,$fb
0000012B                            	smpsAlterPitch      $0C
0000012B                          M 	smpschangetransposition	$0c
0000012B E90C                     M 	dc.b	$e9,$0c
0000012D                            	smpsSetvoice        $03
0000012D                          M 	smpsfmvoice	$03
0000012D EF03                     M 	dc.b	$ef,$03
0000012F A006 A3A5 A812 A506 80A3+  	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2, $06, nC3
0000013B 0580 0D                    	dc.b	$05, nRst, $0D
0000013E                            	smpsAlterVol        $FB
0000013E E6FB                     M 	dc.b	$e6,$fb
00000140                            	smpsSetvoice        $03
00000140                          M 	smpsfmvoice	$03
00000140 EF03                     M 	dc.b	$ef,$03
00000142                            	smpsModSet          $01, $04, $F4, $78
00000142 F0                       M 	dc.b	$f0
00000143 0104 F478                M 	dc.b	$01,$04,$f4,$78
00000147 B830                       	dc.b	nG4, $30
00000149                            	smpsAlterVol        $04
00000149 E604                     M 	dc.b	$e6,$04
0000014B E70C                       	dc.b	smpsNoAttack, $0C
0000014D                            	smpsAlterVol        $04
0000014D E604                     M 	dc.b	$e6,$04
0000014F E70C                       	dc.b	smpsNoAttack, $0C
00000151                            	smpsAlterVol        $04
00000151 E604                     M 	dc.b	$e6,$04
00000153 E70C                       	dc.b	smpsNoAttack, $0C
00000155                            	smpsAlterVol        $04
00000155 E604                     M 	dc.b	$e6,$04
00000157 E70C                       	dc.b	smpsNoAttack, $0C
00000159                            	smpsAlterVol        $F0
00000159 E6F0                     M 	dc.b	$e6,$f0
0000015B                            	smpsModOff
0000015B F4                       M 	dc.b	$f4
0000015C                            	smpsAlterPitch      $F4
0000015C                          M 	smpschangetransposition	$f4
0000015C E9F4                     M 	dc.b	$e9,$f4
0000015E                            	smpsJump            MTZ_Loop09
0000015E F6                       M 	dc.b	$f6
0000015F 0000                     M 	dc.w	((mtz_loop09&$7fff)<<8)&$ff00+(mtz_loop09&$7fff)>>8
00000161                            
00000161                            MTZ_Jump02:
00000161                            	smpsModSet          $06, $01, $02, $04
00000161 F0                       M 	dc.b	$f0
00000162 0601 0204                M 	dc.b	$06,$01,$02,$04
00000166                            
00000166                            MTZ_Loop0B:
00000166 8030 80                    	dc.b	nRst, $30, nRst
00000169                            	smpsLoop            $00, $04, MTZ_Loop0B
00000169 F7                       M 	dc.b	$f7
0000016A 0004                     M 	dc.b	index,loops
0000016C 0000                     M 	dc.w	((mtz_loop0b&$7fff)<<8)&$ff00+(mtz_loop0b&$7fff)>>8
0000016E                            
0000016E                            MTZ_Loop0C:
0000016E 8030 80                    	dc.b	nRst, $30, nRst
00000171                            	smpsLoop            $00, $07, MTZ_Loop0C
00000171 F7                       M 	dc.b	$f7
00000172 0007                     M 	dc.b	index,loops
00000174 0000                     M 	dc.w	((mtz_loop0c&$7fff)<<8)&$ff00+(mtz_loop0c&$7fff)>>8
00000176                            
00000176                            MTZ_Loop0D:
00000176 8030 800C A918 A70C A518+  	dc.b	nRst, $30, nRst, $0C, nE3, $18, nD3, $0C, nC3, $18, nE3, $0C
00000182 8030 800C 8030 800C A9AA+  	dc.b	nRst, $30, nRst, $0C, nRst, $30, nRst, $0C, nE3, nF3, nE3, nG3
0000018E 18A9 18A5 1880 18          	dc.b	$18, nE3, $18, nC3, $18, nRst, $18
00000195                            	smpsLoop            $00, $02, MTZ_Loop0D
00000195 F7                       M 	dc.b	$f7
00000196 0002                     M 	dc.b	index,loops
00000198 0000                     M 	dc.w	((mtz_loop0d&$7fff)<<8)&$ff00+(mtz_loop0d&$7fff)>>8
0000019A                            
0000019A                            MTZ_Loop0E:
0000019A 8030 80                    	dc.b	nRst, $30, nRst
0000019D                            	smpsLoop            $00, $09, MTZ_Loop0E
0000019D F7                       M 	dc.b	$f7
0000019E 0009                     M 	dc.b	index,loops
000001A0 0000                     M 	dc.w	((mtz_loop0e&$7fff)<<8)&$ff00+(mtz_loop0e&$7fff)>>8
000001A2                            	smpsJump            MTZ_Loop0C
000001A2 F6                       M 	dc.b	$f6
000001A3 0000                     M 	dc.w	((mtz_loop0c&$7fff)<<8)&$ff00+(mtz_loop0c&$7fff)>>8
000001A5                            
000001A5                            ; FM3 Data
000001A5                            MTZ_FM3:
000001A5                            	smpsSetvoice        $01
000001A5                          M 	smpsfmvoice	$01
000001A5 EF01                     M 	dc.b	$ef,$01
000001A7                            	smpsAlterPitch      $F4
000001A7                          M 	smpschangetransposition	$f4
000001A7 E9F4                     M 	dc.b	$e9,$f4
000001A9 8030 8080 80AA 0CE7        	dc.b	nRst, $30, nRst, nRst, nRst, nF3, $0C, smpsNoAttack
000001B1                            
000001B1                            MTZ_Loop05:
000001B1                            	smpsModSet          $01, $01, $06, $08
000001B1 F0                       M 	dc.b	$f0
000001B2 0101 0608                M 	dc.b	$01,$01,$06,$08
000001B6 AB04                       	dc.b	nFs3, $04
000001B8                            	smpsModOff
000001B8 F4                       M 	dc.b	$f4
000001B9 E7AC 08E7                  	dc.b	smpsNoAttack, nG3, $08, smpsNoAttack
000001BD                            	smpsModSet          $01, $01, $FA, $08
000001BD F0                       M 	dc.b	$f0
000001BE 0101 FA08                M 	dc.b	$01,$01,$fa,$08
000001C2 AB04                       	dc.b	nFs3, $04
000001C4                            	smpsModOff
000001C4 F4                       M 	dc.b	$f4
000001C5 E7AA 08                    	dc.b	smpsNoAttack, nF3, $08
000001C8                            	smpsLoop            $00, $06, MTZ_Loop05
000001C8 F7                       M 	dc.b	$f7
000001C9 0006                     M 	dc.b	index,loops
000001CB 0000                     M 	dc.w	((mtz_loop05&$7fff)<<8)&$ff00+(mtz_loop05&$7fff)>>8
000001CD 8024                       	dc.b	nRst, $24
000001CF                            	smpsSetvoice        $00
000001CF                          M 	smpsfmvoice	$00
000001CF EF00                     M 	dc.b	$ef,$00
000001D1                            	smpsAlterPitch      $0C
000001D1                          M 	smpschangetransposition	$0c
000001D1 E90C                     M 	dc.b	$e9,$0c
000001D3                            
000001D3                            MTZ_Loop06:
000001D3 8018 B80B 800D BA0C 0B80+  	dc.b	nRst, $18, nG4, $0B, nRst, $0D, nA4, $0C, $0B, nRst, $19, nC5
000001DF 0C0B 800D B830 E70C 8018+  	dc.b	$0C, $0B, nRst, $0D, nG4, $30, smpsNoAttack, $0C, nRst, $18, nG4, $0B
000001EB 800D BA0C 0B80 19BD 0C0B+  	dc.b	nRst, $0D, nA4, $0C, $0B, nRst, $19, nC5, $0C, $0B, nRst, $0D
000001F7 BD30 E70C                  	dc.b	nC5, $30, smpsNoAttack, $0C
000001FB                            	smpsLoop            $00, $04, MTZ_Loop06
000001FB F7                       M 	dc.b	$f7
000001FC 0004                     M 	dc.b	index,loops
000001FE 0000                     M 	dc.w	((mtz_loop06&$7fff)<<8)&$ff00+(mtz_loop06&$7fff)>>8
00000200                            
00000200                            MTZ_Loop07:
00000200 CB06 C9C7 C6               	dc.b	nD6, $06, nC6, nBb5, nA5
00000205                            	smpsLoop            $00, $08, MTZ_Loop07
00000205 F7                       M 	dc.b	$f7
00000206 0008                     M 	dc.b	index,loops
00000208 0000                     M 	dc.w	((mtz_loop07&$7fff)<<8)&$ff00+(mtz_loop07&$7fff)>>8
0000020A BD0C 0680 3080 12BB 0CC9+  	dc.b	nC5, $0C, $06, nRst, $30, nRst, $12, nBb4, $0C, nC6, nC6, $06
00000216 8030 801E                  	dc.b	nRst, $30, nRst, $1E
0000021A                            
0000021A                            MTZ_Loop08:
0000021A CB06 C9C7 C6               	dc.b	nD6, $06, nC6, nBb5, nA5
0000021F                            	smpsLoop            $00, $08, MTZ_Loop08
0000021F F7                       M 	dc.b	$f7
00000220 0008                     M 	dc.b	index,loops
00000222 0000                     M 	dc.w	((mtz_loop08&$7fff)<<8)&$ff00+(mtz_loop08&$7fff)>>8
00000224 C90C 0680 3080 1EBF 06C3+  	dc.b	nC6, $0C, $06, nRst, $30, nRst, $1E, nD5, $06, nFs5, nCs5, nF5
00000230 BDC1 BCC0 BCBF BBBF BABE+  	dc.b	nC5, nE5, nB4, nEb5, nB4, nD5, nBb4, nD5, nA4, nCs5, nAb4, nC5
0000023C                            	smpsJump            MTZ_Loop06
0000023C F6                       M 	dc.b	$f6
0000023D 0000                     M 	dc.w	((mtz_loop06&$7fff)<<8)&$ff00+(mtz_loop06&$7fff)>>8
0000023F                            
0000023F                            ; FM4 Data
0000023F                            MTZ_FM4:
0000023F                            	smpsSetvoice        $01
0000023F                          M 	smpsfmvoice	$01
0000023F EF01                     M 	dc.b	$ef,$01
00000241                            	smpsAlterPitch      $F4
00000241                          M 	smpschangetransposition	$f4
00000241 E9F4                     M 	dc.b	$e9,$f4
00000243 8030 8080 80AF 0CE7        	dc.b	nRst, $30, nRst, nRst, nRst, nBb3, $0C, smpsNoAttack
0000024B                            
0000024B                            MTZ_Loop03:
0000024B                            	smpsModSet          $01, $01, $06, $08
0000024B F0                       M 	dc.b	$f0
0000024C 0101 0608                M 	dc.b	$01,$01,$06,$08
00000250 B004                       	dc.b	nB3, $04
00000252                            	smpsModOff
00000252 F4                       M 	dc.b	$f4
00000253 E7B1 08E7                  	dc.b	smpsNoAttack, nC4, $08, smpsNoAttack
00000257                            	smpsModSet          $01, $01, $FA, $08
00000257 F0                       M 	dc.b	$f0
00000258 0101 FA08                M 	dc.b	$01,$01,$fa,$08
0000025C B004                       	dc.b	nB3, $04
0000025E                            	smpsModOff
0000025E F4                       M 	dc.b	$f4
0000025F E7AF 08                    	dc.b	smpsNoAttack, nBb3, $08
00000262                            	smpsLoop            $00, $06, MTZ_Loop03
00000262 F7                       M 	dc.b	$f7
00000263 0006                     M 	dc.b	index,loops
00000265 0000                     M 	dc.w	((mtz_loop03&$7fff)<<8)&$ff00+(mtz_loop03&$7fff)>>8
00000267 8024                       	dc.b	nRst, $24
00000269                            	smpsAlterPitch      $0C
00000269                          M 	smpschangetransposition	$0c
00000269 E90C                     M 	dc.b	$e9,$0c
0000026B                            	smpsSetvoice        $00
0000026B                          M 	smpsfmvoice	$00
0000026B EF00                     M 	dc.b	$ef,$00
0000026D                            
0000026D                            MTZ_Loop04:
0000026D 8018 B50B 800D B70C 0B80+  	dc.b	nRst, $18, nE4, $0B, nRst, $0D, nFs4, $0C, $0B, nRst, $19, nA4
00000279 0C0B 800D B530 E70C 8018+  	dc.b	$0C, $0B, nRst, $0D, nE4, $30, smpsNoAttack, $0C, nRst, $18, nE4, $0B
00000285 800D B70C 0B80 19BA 0C0B+  	dc.b	nRst, $0D, nFs4, $0C, $0B, nRst, $19, nA4, $0C, $0B, nRst, $0D
00000291 B830 E70C                  	dc.b	nG4, $30, smpsNoAttack, $0C
00000295                            	smpsLoop            $00, $04, MTZ_Loop04
00000295 F7                       M 	dc.b	$f7
00000296 0004                     M 	dc.b	index,loops
00000298 0000                     M 	dc.w	((mtz_loop04&$7fff)<<8)&$ff00+(mtz_loop04&$7fff)>>8
0000029A                            	smpsPan             panLeft, $00
0000029A E080                     M 	dc.b	$e0,direction+amsfms
0000029C                            	smpsAlterPitch      $F4
0000029C                          M 	smpschangetransposition	$f4
0000029C E9F4                     M 	dc.b	$e9,$f4
0000029E                            	smpsSetvoice        $02
0000029E                          M 	smpsfmvoice	$02
0000029E EF02                     M 	dc.b	$ef,$02
000002A0 AA30 E730 AEAA             	dc.b	nF3, $30, smpsNoAttack, $30, nA3, nF3
000002A6                            	smpsAlterPitch      $0C
000002A6                          M 	smpschangetransposition	$0c
000002A6 E90C                     M 	dc.b	$e9,$0c
000002A8                            	smpsSetvoice        $00
000002A8                          M 	smpsfmvoice	$00
000002A8 EF00                     M 	dc.b	$ef,$00
000002AA BD0A 8002 BD06 8080 3080+  	dc.b	nC5, $0A, nRst, $02, nC5, $06, nRst, nRst, $30, nRst, $0C, nBb3
000002B6 BD0A 8002 BD06 8080 3080+  	dc.b	nC5, $0A, nRst, $02, nC5, $06, nRst, nRst, $30, nRst, $18
000002C1                            	smpsAlterPitch      $F4
000002C1                          M 	smpschangetransposition	$f4
000002C1 E9F4                     M 	dc.b	$e9,$f4
000002C3                            	smpsSetvoice        $02
000002C3                          M 	smpsfmvoice	$02
000002C3 EF02                     M 	dc.b	$ef,$02
000002C5 AA30 E730 AEAA             	dc.b	nF3, $30, smpsNoAttack, $30, nA3, nF3
000002CB                            	smpsAlterPitch      $0C
000002CB                          M 	smpschangetransposition	$0c
000002CB E90C                     M 	dc.b	$e9,$0c
000002CD                            	smpsPan             panCenter, $00
000002CD E0C0                     M 	dc.b	$e0,direction+amsfms
000002CF                            	smpsSetvoice        $00
000002CF                          M 	smpsfmvoice	$00
000002CF EF00                     M 	dc.b	$ef,$00
000002D1 BD0A 8002 BD06 8080 3080+  	dc.b	nC5, $0A, nRst, $02, nC5, $06, nRst, nRst, $30, nRst, nRst, nRst
000002DD 18                         	dc.b	$18
000002DE                            	smpsJump            MTZ_Loop04
000002DE F6                       M 	dc.b	$f6
000002DF 0000                     M 	dc.w	((mtz_loop04&$7fff)<<8)&$ff00+(mtz_loop04&$7fff)>>8
000002E1                            
000002E1                            ; FM5 Data
000002E1                            MTZ_FM5:
000002E1                            	smpsSetvoice        $00
000002E1                          M 	smpsfmvoice	$00
000002E1 EF00                     M 	dc.b	$ef,$00
000002E3                            	smpsModSet          $0C, $01, $FC, $04
000002E3 F0                       M 	dc.b	$f0
000002E4 0C01 FC04                M 	dc.b	$0c,$01,$fc,$04
000002E8                            
000002E8                            MTZ_Loop01:
000002E8 8060                       	dc.b	nRst, $60
000002EA                            	smpsLoop            $00, $04, MTZ_Loop01
000002EA F7                       M 	dc.b	$f7
000002EB 0004                     M 	dc.b	index,loops
000002ED 0000                     M 	dc.w	((mtz_loop01&$7fff)<<8)&$ff00+(mtz_loop01&$7fff)>>8
000002EF                            
000002EF                            MTZ_Loop02:
000002EF 8018 B10B 800D B30C 0B80+  	dc.b	nRst, $18, nC4, $0B, nRst, $0D, nD4, $0C, $0B, nRst, $19, nF4
000002FB 0C0B 800D B130 E70C 8018+  	dc.b	$0C, $0B, nRst, $0D, nC4, $30, smpsNoAttack, $0C, nRst, $18, nC4, $0B
00000307 800D B30C 0B80 19B6 0C0B+  	dc.b	nRst, $0D, nD4, $0C, $0B, nRst, $19, nF4, $0C, $0B, nRst, $0D
00000313 B530 E70C                  	dc.b	nE4, $30, smpsNoAttack, $0C
00000317                            	smpsLoop            $00, $04, MTZ_Loop02
00000317 F7                       M 	dc.b	$f7
00000318 0004                     M 	dc.b	index,loops
0000031A 0000                     M 	dc.w	((mtz_loop02&$7fff)<<8)&$ff00+(mtz_loop02&$7fff)>>8
0000031C                            	smpsPan             panRight, $00
0000031C E040                     M 	dc.b	$e0,direction+amsfms
0000031E                            	smpsAlterPitch      $F4
0000031E                          M 	smpschangetransposition	$f4
0000031E E9F4                     M 	dc.b	$e9,$f4
00000320                            	smpsSetvoice        $02
00000320                          M 	smpsfmvoice	$02
00000320 EF02                     M 	dc.b	$ef,$02
00000322 AF30 E730 B3AF             	dc.b	nBb3, $30, smpsNoAttack, $30, nD4, nBb3
00000328                            	smpsAlterPitch      $0C
00000328                          M 	smpschangetransposition	$0c
00000328 E90C                     M 	dc.b	$e9,$0c
0000032A                            	smpsSetvoice        $00
0000032A                          M 	smpsfmvoice	$00
0000032A EF00                     M 	dc.b	$ef,$00
0000032C B10A 8002 B106 8080 3080+  	dc.b	nC4, $0A, nRst, $02, nC4, $06, nRst, nRst, $30, nRst, $0C, nBb3
00000338 B10A 8002 B106 8080 3080+  	dc.b	nC4, $0A, nRst, $02, nC4, $06, nRst, nRst, $30, nRst, $18
00000343                            	smpsAlterPitch      $F4
00000343                          M 	smpschangetransposition	$f4
00000343 E9F4                     M 	dc.b	$e9,$f4
00000345                            	smpsSetvoice        $02
00000345                          M 	smpsfmvoice	$02
00000345 EF02                     M 	dc.b	$ef,$02
00000347 AF30 E730 B3AF             	dc.b	nBb3, $30, smpsNoAttack, $30, nD4, nBb3
0000034D                            	smpsAlterPitch      $0C
0000034D                          M 	smpschangetransposition	$0c
0000034D E90C                     M 	dc.b	$e9,$0c
0000034F                            	smpsPan             panCenter, $00
0000034F E0C0                     M 	dc.b	$e0,direction+amsfms
00000351                            	smpsSetvoice        $00
00000351                          M 	smpsfmvoice	$00
00000351 EF00                     M 	dc.b	$ef,$00
00000353 B10A 8002 B106 8080 3080+  	dc.b	nC4, $0A, nRst, $02, nC4, $06, nRst, nRst, $30, nRst, $18, nRst
0000035F 3080                       	dc.b	$30, nRst
00000361                            	smpsJump            MTZ_Loop02
00000361 F6                       M 	dc.b	$f6
00000362 0000                     M 	dc.w	((mtz_loop02&$7fff)<<8)&$ff00+(mtz_loop02&$7fff)>>8
00000364                            
00000364                            ; FM2 Data
00000364                            MTZ_FM2:
00000364                            	smpsSetvoice        $04
00000364                          M 	smpsfmvoice	$04
00000364 EF04                     M 	dc.b	$ef,$04
00000366 8030 8080 8080 80          	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
0000036D                            	smpsAlterVol        $FC
0000036D E6FC                     M 	dc.b	$e6,$fc
0000036F 8080 0C8A 8B8C             	dc.b	nRst, nRst, $0C, nA0, nBb0, nB0
00000375                            	smpsAlterVol        $04
00000375 E604                     M 	dc.b	$e6,$04
00000377                            
00000377                            MTZ_Jump00:
00000377                            	smpsNoteFill        $09
00000377 E809                     M 	dc.b	$e8,$09
00000379 8D0C 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, $0C, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
00000385 8D                         	dc.b	nC1
00000386                            	smpsNoteFill        $00
00000386 E800                     M 	dc.b	$e8,$00
00000388 8D8A 8B8C                  	dc.b	nC1, nA0, nBb0, nB0
0000038C                            	smpsNoteFill        $09
0000038C E809                     M 	dc.b	$e8,$09
0000038E 8D8D 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
0000039A 8D06 99                    	dc.b	nC1, $06, nC2
0000039D                            	smpsNoteFill        $00
0000039D E800                     M 	dc.b	$e8,$00
0000039F 8A0C 8B8C                  	dc.b	nA0, $0C, nBb0, nB0
000003A3                            	smpsNoteFill        $09
000003A3 E809                     M 	dc.b	$e8,$09
000003A5 8D8D 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
000003B1                            	smpsNoteFill        $00
000003B1 E800                     M 	dc.b	$e8,$00
000003B3 8D8A 8B8C                  	dc.b	nC1, nA0, nBb0, nB0
000003B7                            	smpsNoteFill        $09
000003B7 E809                     M 	dc.b	$e8,$09
000003B9 8D8D 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
000003C5                            	smpsNoteFill        $00
000003C5 E800                     M 	dc.b	$e8,$00
000003C7 8D90 8F8E                  	dc.b	nC1, nEb1, nD1, nCs1
000003CB                            	smpsNoteFill        $09
000003CB E809                     M 	dc.b	$e8,$09
000003CD 8D8D 8D8D 8D8D 8D0C 8D06+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, $0C, nC1, $06, nC1, $06
000003D9 0C8D 8D8D                  	dc.b	$0C, nC1, nC1, nC1
000003DD                            	smpsNoteFill        $00
000003DD E800                     M 	dc.b	$e8,$00
000003DF 8D8A 8B8C                  	dc.b	nC1, nA0, nBb0, nB0
000003E3                            	smpsNoteFill        $09
000003E3 E809                     M 	dc.b	$e8,$09
000003E5 8D8D 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
000003F1 8D06 99                    	dc.b	nC1, $06, nC2
000003F4                            	smpsNoteFill        $00
000003F4 E800                     M 	dc.b	$e8,$00
000003F6 8A0C 8B8C                  	dc.b	nA0, $0C, nBb0, nB0
000003FA                            	smpsNoteFill        $09
000003FA E809                     M 	dc.b	$e8,$09
000003FC 8D8D 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
00000408                            	smpsNoteFill        $00
00000408 E800                     M 	dc.b	$e8,$00
0000040A 8D8A 8B8C                  	dc.b	nC1, nA0, nBb0, nB0
0000040E                            	smpsNoteFill        $09
0000040E E809                     M 	dc.b	$e8,$09
00000410 8D8D 8D8D 8D8D 8D8D 8D8D+  	dc.b	nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1, nC1
0000041C                            	smpsNoteFill        $00
0000041C E800                     M 	dc.b	$e8,$00
0000041E 8D90 8F8E 8B8B 8B8B 8B8B+  	dc.b	nC1, nEb1, nD1, nCs1, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0
0000042A 8F8F 8F8F 8B8B 8B8B 8D8D+  	dc.b	nD1, nD1, nD1, nD1, nBb0, nBb0, nBb0, nBb0, nC1, nC1, $06
00000435                            	smpsSetvoice        $05
00000435                          M 	smpsfmvoice	$05
00000435 EF05                     M 	dc.b	$ef,$05
00000437 8006 A006 A3A5 A812 A506+  	dc.b	nRst, $06, nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2
00000443 06A5 0580 01               	dc.b	$06, nC3, $05, nRst, $01
00000448                            	smpsSetvoice        $04
00000448                          M 	smpsfmvoice	$04
00000448 EF04                     M 	dc.b	$ef,$04
0000044A 8B06 8C8D 808D 80          	dc.b	nBb0, $06, nB0, nC1, nRst, nC1, nRst
00000451                            	smpsSetvoice        $05
00000451                          M 	smpsfmvoice	$05
00000451 EF05                     M 	dc.b	$ef,$05
00000453 A006 A3A5 A812 A506 80A3+  	dc.b	nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2, $06, nC3
0000045F 0580 01                    	dc.b	$05, nRst, $01
00000462                            	smpsSetvoice        $04
00000462                          M 	smpsfmvoice	$04
00000462 EF04                     M 	dc.b	$ef,$04
00000464 8C0C 8B8B 8B8B 8B8B 8B8B+  	dc.b	nB0, $0C, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nBb0, nD1, nD1
00000470 8F8F 8B8B 8B8B 8D8D 06     	dc.b	nD1, nD1, nBb0, nBb0, nBb0, nBb0, nC1, nC1, $06
00000479                            	smpsSetvoice        $05
00000479                          M 	smpsfmvoice	$05
00000479 EF05                     M 	dc.b	$ef,$05
0000047B 8006 A006 A3A5 A812 A506+  	dc.b	nRst, $06, nG2, $06, nBb2, nC3, nEb3, $12, nC3, $06, nRst, nBb2
00000487 06A5 0580 01               	dc.b	$06, nC3, $05, nRst, $01
0000048C                            	smpsSetvoice        $04
0000048C                          M 	smpsfmvoice	$04
0000048C EF04                     M 	dc.b	$ef,$04
0000048E 8B06 8C8D 0680 3080 2A     	dc.b	nBb0, $06, nB0, nC1, $06, nRst, $30, nRst, $2A
00000497                            	smpsJump            MTZ_Jump00
00000497 F6                       M 	dc.b	$f6
00000498 0000                     M 	dc.w	((mtz_jump00&$7fff)<<8)&$ff00+(mtz_jump00&$7fff)>>8
0000049A                            
0000049A                            MTZ_Call00:
0000049A 810C 8D82 8181 8E82 8404+  	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
000004A6 810C 8D82 8181 8E82 83     	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dClap
000004AF                            	smpsReturn
000004AF E3                       M 	dc.b	$e3
000004B0                            
000004B0                            ; DAC Data
000004B0                            MTZ_DAC:
000004B0                            	smpsCall            MTZ_Call00
000004B0 F8                       M 	dc.b	$f8
000004B1 0000                     M 	dc.w	((mtz_call00&$7fff)<<8)&$ff00+(mtz_call00&$7fff)>>8
000004B3                            	smpsLoop            $00, $02, MTZ_DAC
000004B3 F7                       M 	dc.b	$f7
000004B4 0002                     M 	dc.b	index,loops
000004B6 0000                     M 	dc.w	((mtz_dac&$7fff)<<8)&$ff00+(mtz_dac&$7fff)>>8
000004B8                            
000004B8                            MTZ_Loop00:
000004B8                            	smpsCall            MTZ_Call00
000004B8 F8                       M 	dc.b	$f8
000004B9 0000                     M 	dc.w	((mtz_call00&$7fff)<<8)&$ff00+(mtz_call00&$7fff)>>8
000004BB                            	smpsLoop            $00, $0B, MTZ_Loop00
000004BB F7                       M 	dc.b	$f7
000004BC 000B                     M 	dc.b	index,loops
000004BE 0000                     M 	dc.w	((mtz_loop00&$7fff)<<8)&$ff00+(mtz_loop00&$7fff)>>8
000004C0 810C 8D82 8181 8E82 8404+  	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
000004CC 810C 8080 8080 8080 83     	dc.b	dKick, $0C, nRst, nRst, nRst, nRst, nRst, nRst, dClap
000004D5                            	smpsJump            MTZ_Loop00
000004D5 F6                       M 	dc.b	$f6
000004D6 0000                     M 	dc.w	((mtz_loop00&$7fff)<<8)&$ff00+(mtz_loop00&$7fff)>>8
000004D8                            
000004D8                            ; PSG3 Data
000004D8                            MTZ_PSG3:
000004D8                            	smpsPSGform         $E7
000004D8 F3E7                     M 	dc.b	$f3,$e7
000004DA                            
000004DA                            MTZ_Jump01:
000004DA 8030 8080 8024 C50C        	dc.b	nRst, $30, nRst, nRst, nRst, $24, nAb5, $0C
000004E2                            	smpsJump            MTZ_Jump01
000004E2 F6                       M 	dc.b	$f6
000004E3 0000                     M 	dc.w	((mtz_jump01&$7fff)<<8)&$ff00+(mtz_jump01&$7fff)>>8
000004E5                            
000004E5                            MTZ_Voices:
000004E5                            ;	Voice $00
000004E5                            ;	$3C
000004E5                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000004E5                            ;	$04, $00, $04, $00, 	$10, $0B, $10, $0D, 	$19, $80, $0B, $80
000004E5                            	smpsVcAlgorithm     $04
000004E5 =00000004                M vcalgorithm	set	val
000004E5                            	smpsVcFeedback      $07
000004E5 =00000007                M vcfeedback	set	val
000004E5                            	smpsVcUnusedBits    $00
000004E5 =00000000                M vcunusedbits	set	val
000004E5 =00000000                M vcd1r1unk	set	0
000004E5 =00000000                M vcd1r2unk	set	0
000004E5 =00000000                M vcd1r3unk	set	0
000004E5 =00000000                M vcd1r4unk	set	0
000004E5                            	smpsVcDetune        $03, $05, $05, $03
000004E5 =00000003                M vcdt1	set	op1
000004E5 =00000005                M vcdt2	set	op2
000004E5 =00000005                M vcdt3	set	op3
000004E5 =00000003                M vcdt4	set	op4
000004E5                            	smpsVcCoarseFreq    $00, $00, $02, $01
000004E5 =00000000                M vccf1	set	op1
000004E5 =00000000                M vccf2	set	op2
000004E5 =00000002                M vccf3	set	op3
000004E5 =00000001                M vccf4	set	op4
000004E5                            	smpsVcRateScale     $01, $01, $01, $01
000004E5 =00000001                M vcrs1	set	op1
000004E5 =00000001                M vcrs2	set	op2
000004E5 =00000001                M vcrs3	set	op3
000004E5 =00000001                M vcrs4	set	op4
000004E5                            	smpsVcAttackRate    $13, $12, $13, $12
000004E5 =00000013                M vcar1	set	op1
000004E5 =00000012                M vcar2	set	op2
000004E5 =00000013                M vcar3	set	op3
000004E5 =00000012                M vcar4	set	op4
000004E5                            	smpsVcAmpMod        $00, $00, $00, $00
000004E5 =00000000                M vcam1	set	op1<<7
000004E5 =00000000                M vcam2	set	op2<<7
000004E5 =00000000                M vcam3	set	op3<<7
000004E5 =00000000                M vcam4	set	op4<<7
000004E5                            	smpsVcDecayRate1    $00, $08, $00, $08
000004E5 =00000000                M vcd1r1	set	op1
000004E5 =00000008                M vcd1r2	set	op2
000004E5 =00000000                M vcd1r3	set	op3
000004E5 =00000008                M vcd1r4	set	op4
000004E5                            	smpsVcDecayRate2    $00, $04, $00, $04
000004E5 =00000000                M vcd2r1	set	op1
000004E5 =00000004                M vcd2r2	set	op2
000004E5 =00000000                M vcd2r3	set	op3
000004E5 =00000004                M vcd2r4	set	op4
000004E5                            	smpsVcDecayLevel    $00, $01, $00, $01
000004E5 =00000000                M vcdl1	set	op1
000004E5 =00000001                M vcdl2	set	op2
000004E5 =00000000                M vcdl3	set	op3
000004E5 =00000001                M vcdl4	set	op4
000004E5                            	smpsVcReleaseRate   $0D, $00, $0B, $00
000004E5 =0000000D                M vcrr1	set	op1
000004E5 =00000000                M vcrr2	set	op2
000004E5 =0000000B                M vcrr3	set	op3
000004E5 =00000000                M vcrr4	set	op4
000004E5                            	smpsVcTotalLevel    $80, $0B, $80, $19
000004E5 =00000080                M vctl1	set	op1
000004E5 =0000000B                M vctl2	set	op2
000004E5 =00000080                M vctl3	set	op3
000004E5 =00000019                M vctl4	set	op4
000004E5 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004E6 =00000000                M vctlmask4	set	0
000004E6 =00000000                M vctlmask3	set	0
000004E6 =00000000                M vctlmask2	set	0
000004E6 =00000000                M vctlmask1	set	0
000004E6 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004EA 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004EE 0808 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004F2 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004F6 1010 0B0D                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004FA 190B 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004FE                            
000004FE                            ;	Voice $01
000004FE                            ;	$3A
000004FE                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000004FE                            ;	$00, $00, $00, $01, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
000004FE                            	smpsVcAlgorithm     $02
000004FE =00000002                M vcalgorithm	set	val
000004FE                            	smpsVcFeedback      $07
000004FE =00000007                M vcfeedback	set	val
000004FE                            	smpsVcUnusedBits    $00
000004FE =00000000                M vcunusedbits	set	val
000004FE =00000000                M vcd1r1unk	set	0
000004FE =00000000                M vcd1r2unk	set	0
000004FE =00000000                M vcd1r3unk	set	0
000004FE =00000000                M vcd1r4unk	set	0
000004FE                            	smpsVcDetune        $00, $00, $00, $00
000004FE =00000000                M vcdt1	set	op1
000004FE =00000000                M vcdt2	set	op2
000004FE =00000000                M vcdt3	set	op3
000004FE =00000000                M vcdt4	set	op4
000004FE                            	smpsVcCoarseFreq    $01, $01, $07, $01
000004FE =00000001                M vccf1	set	op1
000004FE =00000001                M vccf2	set	op2
000004FE =00000007                M vccf3	set	op3
000004FE =00000001                M vccf4	set	op4
000004FE                            	smpsVcRateScale     $01, $02, $02, $02
000004FE =00000001                M vcrs1	set	op1
000004FE =00000002                M vcrs2	set	op2
000004FE =00000002                M vcrs3	set	op3
000004FE =00000002                M vcrs4	set	op4
000004FE                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000004FE =00000013                M vcar1	set	op1
000004FE =0000000D                M vcar2	set	op2
000004FE =0000000E                M vcar3	set	op3
000004FE =0000000E                M vcar4	set	op4
000004FE                            	smpsVcAmpMod        $00, $00, $00, $00
000004FE =00000000                M vcam1	set	op1<<7
000004FE =00000000                M vcam2	set	op2<<7
000004FE =00000000                M vcam3	set	op3<<7
000004FE =00000000                M vcam4	set	op4<<7
000004FE                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000004FE =00000003                M vcd1r1	set	op1
000004FE =0000000E                M vcd1r2	set	op2
000004FE =0000000E                M vcd1r3	set	op3
000004FE =0000000E                M vcd1r4	set	op4
000004FE                            	smpsVcDecayRate2    $01, $00, $00, $00
000004FE =00000001                M vcd2r1	set	op1
000004FE =00000000                M vcd2r2	set	op2
000004FE =00000000                M vcd2r3	set	op3
000004FE =00000000                M vcd2r4	set	op4
000004FE                            	smpsVcDecayLevel    $00, $01, $0F, $01
000004FE =00000000                M vcdl1	set	op1
000004FE =00000001                M vcdl2	set	op2
000004FE =0000000F                M vcdl3	set	op3
000004FE =00000001                M vcdl4	set	op4
000004FE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004FE =0000000F                M vcrr1	set	op1
000004FE =0000000F                M vcrr2	set	op2
000004FE =0000000F                M vcrr3	set	op3
000004FE =0000000F                M vcrr4	set	op4
000004FE                            	smpsVcTotalLevel    $80, $27, $28, $17
000004FE =00000080                M vctl1	set	op1
000004FE =00000027                M vctl2	set	op2
000004FE =00000028                M vctl3	set	op3
000004FE =00000017                M vctl4	set	op4
000004FE 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004FF =00000000                M vctlmask4	set	0
000004FF =00000000                M vctlmask3	set	0
000004FF =00000000                M vctlmask2	set	0
000004FF =00000000                M vctlmask1	set	0
000004FF 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000503 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000507 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000050B 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000050F 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000513 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000517                            
00000517                            ;	Voice $02
00000517                            ;	$3A
00000517                            ;	$01, $40, $01, $31, 	$1F, $1F, $1F, $1F, 	$0B, $04, $04, $04
00000517                            ;	$02, $04, $03, $02, 	$5F, $1F, $5F, $2F, 	$18, $05, $11, $80
00000517                            	smpsVcAlgorithm     $02
00000517 =00000002                M vcalgorithm	set	val
00000517                            	smpsVcFeedback      $07
00000517 =00000007                M vcfeedback	set	val
00000517                            	smpsVcUnusedBits    $00
00000517 =00000000                M vcunusedbits	set	val
00000517 =00000000                M vcd1r1unk	set	0
00000517 =00000000                M vcd1r2unk	set	0
00000517 =00000000                M vcd1r3unk	set	0
00000517 =00000000                M vcd1r4unk	set	0
00000517                            	smpsVcDetune        $03, $00, $04, $00
00000517 =00000003                M vcdt1	set	op1
00000517 =00000000                M vcdt2	set	op2
00000517 =00000004                M vcdt3	set	op3
00000517 =00000000                M vcdt4	set	op4
00000517                            	smpsVcCoarseFreq    $01, $01, $00, $01
00000517 =00000001                M vccf1	set	op1
00000517 =00000001                M vccf2	set	op2
00000517 =00000000                M vccf3	set	op3
00000517 =00000001                M vccf4	set	op4
00000517                            	smpsVcRateScale     $00, $00, $00, $00
00000517 =00000000                M vcrs1	set	op1
00000517 =00000000                M vcrs2	set	op2
00000517 =00000000                M vcrs3	set	op3
00000517 =00000000                M vcrs4	set	op4
00000517                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000517 =0000001F                M vcar1	set	op1
00000517 =0000001F                M vcar2	set	op2
00000517 =0000001F                M vcar3	set	op3
00000517 =0000001F                M vcar4	set	op4
00000517                            	smpsVcAmpMod        $00, $00, $00, $00
00000517 =00000000                M vcam1	set	op1<<7
00000517 =00000000                M vcam2	set	op2<<7
00000517 =00000000                M vcam3	set	op3<<7
00000517 =00000000                M vcam4	set	op4<<7
00000517                            	smpsVcDecayRate1    $04, $04, $04, $0B
00000517 =00000004                M vcd1r1	set	op1
00000517 =00000004                M vcd1r2	set	op2
00000517 =00000004                M vcd1r3	set	op3
00000517 =0000000B                M vcd1r4	set	op4
00000517                            	smpsVcDecayRate2    $02, $03, $04, $02
00000517 =00000002                M vcd2r1	set	op1
00000517 =00000003                M vcd2r2	set	op2
00000517 =00000004                M vcd2r3	set	op3
00000517 =00000002                M vcd2r4	set	op4
00000517                            	smpsVcDecayLevel    $02, $05, $01, $05
00000517 =00000002                M vcdl1	set	op1
00000517 =00000005                M vcdl2	set	op2
00000517 =00000001                M vcdl3	set	op3
00000517 =00000005                M vcdl4	set	op4
00000517                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000517 =0000000F                M vcrr1	set	op1
00000517 =0000000F                M vcrr2	set	op2
00000517 =0000000F                M vcrr3	set	op3
00000517 =0000000F                M vcrr4	set	op4
00000517                            	smpsVcTotalLevel    $80, $11, $05, $18
00000517 =00000080                M vctl1	set	op1
00000517 =00000011                M vctl2	set	op2
00000517 =00000005                M vctl3	set	op3
00000517 =00000018                M vctl4	set	op4
00000517 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000518 =00000000                M vctlmask4	set	0
00000518 =00000000                M vctlmask3	set	0
00000518 =00000000                M vctlmask2	set	0
00000518 =00000000                M vctlmask1	set	0
00000518 0101 4031                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000051C 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000520 0B04 0404                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000524 0203 0402                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000528 5F5F 1F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000052C 1811 0580                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000530                            
00000530                            ;	Voice $03
00000530                            ;	$29
00000530                            ;	$16, $14, $58, $54, 	$1F, $1F, $DF, $1F, 	$00, $00, $01, $00
00000530                            ;	$00, $00, $03, $00, 	$06, $06, $06, $0A, 	$1B, $1C, $16, $00
00000530                            	smpsVcAlgorithm     $01
00000530 =00000001                M vcalgorithm	set	val
00000530                            	smpsVcFeedback      $05
00000530 =00000005                M vcfeedback	set	val
00000530                            	smpsVcUnusedBits    $00
00000530 =00000000                M vcunusedbits	set	val
00000530 =00000000                M vcd1r1unk	set	0
00000530 =00000000                M vcd1r2unk	set	0
00000530 =00000000                M vcd1r3unk	set	0
00000530 =00000000                M vcd1r4unk	set	0
00000530                            	smpsVcDetune        $05, $05, $01, $01
00000530 =00000005                M vcdt1	set	op1
00000530 =00000005                M vcdt2	set	op2
00000530 =00000001                M vcdt3	set	op3
00000530 =00000001                M vcdt4	set	op4
00000530                            	smpsVcCoarseFreq    $04, $08, $04, $06
00000530 =00000004                M vccf1	set	op1
00000530 =00000008                M vccf2	set	op2
00000530 =00000004                M vccf3	set	op3
00000530 =00000006                M vccf4	set	op4
00000530                            	smpsVcRateScale     $00, $03, $00, $00
00000530 =00000000                M vcrs1	set	op1
00000530 =00000003                M vcrs2	set	op2
00000530 =00000000                M vcrs3	set	op3
00000530 =00000000                M vcrs4	set	op4
00000530                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000530 =0000001F                M vcar1	set	op1
00000530 =0000001F                M vcar2	set	op2
00000530 =0000001F                M vcar3	set	op3
00000530 =0000001F                M vcar4	set	op4
00000530                            	smpsVcAmpMod        $00, $00, $00, $00
00000530 =00000000                M vcam1	set	op1<<7
00000530 =00000000                M vcam2	set	op2<<7
00000530 =00000000                M vcam3	set	op3<<7
00000530 =00000000                M vcam4	set	op4<<7
00000530                            	smpsVcDecayRate1    $00, $01, $00, $00
00000530 =00000000                M vcd1r1	set	op1
00000530 =00000001                M vcd1r2	set	op2
00000530 =00000000                M vcd1r3	set	op3
00000530 =00000000                M vcd1r4	set	op4
00000530                            	smpsVcDecayRate2    $00, $03, $00, $00
00000530 =00000000                M vcd2r1	set	op1
00000530 =00000003                M vcd2r2	set	op2
00000530 =00000000                M vcd2r3	set	op3
00000530 =00000000                M vcd2r4	set	op4
00000530                            	smpsVcDecayLevel    $00, $00, $00, $00
00000530 =00000000                M vcdl1	set	op1
00000530 =00000000                M vcdl2	set	op2
00000530 =00000000                M vcdl3	set	op3
00000530 =00000000                M vcdl4	set	op4
00000530                            	smpsVcReleaseRate   $0A, $06, $06, $06
00000530 =0000000A                M vcrr1	set	op1
00000530 =00000006                M vcrr2	set	op2
00000530 =00000006                M vcrr3	set	op3
00000530 =00000006                M vcrr4	set	op4
00000530                            	smpsVcTotalLevel    $00, $16, $1C, $1B
00000530 =00000000                M vctl1	set	op1
00000530 =00000016                M vctl2	set	op2
00000530 =0000001C                M vctl3	set	op3
00000530 =0000001B                M vctl4	set	op4
00000530 29                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000531 =00000000                M vctlmask4	set	0
00000531 =00000000                M vctlmask3	set	0
00000531 =00000000                M vctlmask2	set	0
00000531 =00000000                M vctlmask1	set	0
00000531 1658 1454                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000535 1FDF 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000539 0001 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000053D 0003 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000541 0606 060A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000545 1B16 1C00                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000549                            
00000549                            ;	Voice $04
00000549                            ;	$08
00000549                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00000549                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $0E, $84
00000549                            	smpsVcAlgorithm     $00
00000549 =00000000                M vcalgorithm	set	val
00000549                            	smpsVcFeedback      $01
00000549 =00000001                M vcfeedback	set	val
00000549                            	smpsVcUnusedBits    $00
00000549 =00000000                M vcunusedbits	set	val
00000549 =00000000                M vcd1r1unk	set	0
00000549 =00000000                M vcd1r2unk	set	0
00000549 =00000000                M vcd1r3unk	set	0
00000549 =00000000                M vcd1r4unk	set	0
00000549                            	smpsVcDetune        $00, $03, $07, $00
00000549 =00000000                M vcdt1	set	op1
00000549 =00000003                M vcdt2	set	op2
00000549 =00000007                M vcdt3	set	op3
00000549 =00000000                M vcdt4	set	op4
00000549                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000549 =00000000                M vccf1	set	op1
00000549 =00000000                M vccf2	set	op2
00000549 =00000000                M vccf3	set	op3
00000549 =00000009                M vccf4	set	op4
00000549                            	smpsVcRateScale     $01, $01, $00, $00
00000549 =00000001                M vcrs1	set	op1
00000549 =00000001                M vcrs2	set	op2
00000549 =00000000                M vcrs3	set	op3
00000549 =00000000                M vcrs4	set	op4
00000549                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000549 =0000001F                M vcar1	set	op1
00000549 =0000001F                M vcar2	set	op2
00000549 =0000001F                M vcar3	set	op3
00000549 =0000001F                M vcar4	set	op4
00000549                            	smpsVcAmpMod        $00, $00, $00, $00
00000549 =00000000                M vcam1	set	op1<<7
00000549 =00000000                M vcam2	set	op2<<7
00000549 =00000000                M vcam3	set	op3<<7
00000549 =00000000                M vcam4	set	op4<<7
00000549                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00000549 =0000000A                M vcd1r1	set	op1
00000549 =0000000A                M vcd1r2	set	op2
00000549 =0000000E                M vcd1r3	set	op3
00000549 =00000012                M vcd1r4	set	op4
00000549                            	smpsVcDecayRate2    $03, $04, $04, $00
00000549 =00000003                M vcd2r1	set	op1
00000549 =00000004                M vcd2r2	set	op2
00000549 =00000004                M vcd2r3	set	op3
00000549 =00000000                M vcd2r4	set	op4
00000549                            	smpsVcDecayLevel    $02, $02, $02, $02
00000549 =00000002                M vcdl1	set	op1
00000549 =00000002                M vcdl2	set	op2
00000549 =00000002                M vcdl3	set	op3
00000549 =00000002                M vcdl4	set	op4
00000549                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000549 =0000000F                M vcrr1	set	op1
00000549 =0000000F                M vcrr2	set	op2
00000549 =0000000F                M vcrr3	set	op3
00000549 =0000000F                M vcrr4	set	op4
00000549                            	smpsVcTotalLevel    $84, $0E, $30, $25
00000549 =00000084                M vctl1	set	op1
00000549 =0000000E                M vctl2	set	op2
00000549 =00000030                M vctl3	set	op3
00000549 =00000025                M vctl4	set	op4
00000549 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000054A =00000000                M vctlmask4	set	0
0000054A =00000000                M vctlmask3	set	0
0000054A =00000000                M vctlmask2	set	0
0000054A =00000000                M vctlmask1	set	0
0000054A 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000054E 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000552 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000556 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000055A 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000055E 250E 3084                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000562                            
00000562                            ;	Voice $05
00000562                            ;	$08
00000562                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00000562                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $84
00000562                            	smpsVcAlgorithm     $00
00000562 =00000000                M vcalgorithm	set	val
00000562                            	smpsVcFeedback      $01
00000562 =00000001                M vcfeedback	set	val
00000562                            	smpsVcUnusedBits    $00
00000562 =00000000                M vcunusedbits	set	val
00000562 =00000000                M vcd1r1unk	set	0
00000562 =00000000                M vcd1r2unk	set	0
00000562 =00000000                M vcd1r3unk	set	0
00000562 =00000000                M vcd1r4unk	set	0
00000562                            	smpsVcDetune        $00, $03, $07, $00
00000562 =00000000                M vcdt1	set	op1
00000562 =00000003                M vcdt2	set	op2
00000562 =00000007                M vcdt3	set	op3
00000562 =00000000                M vcdt4	set	op4
00000562                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000562 =00000000                M vccf1	set	op1
00000562 =00000000                M vccf2	set	op2
00000562 =00000000                M vccf3	set	op3
00000562 =00000009                M vccf4	set	op4
00000562                            	smpsVcRateScale     $01, $01, $00, $00
00000562 =00000001                M vcrs1	set	op1
00000562 =00000001                M vcrs2	set	op2
00000562 =00000000                M vcrs3	set	op3
00000562 =00000000                M vcrs4	set	op4
00000562                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000562 =0000001F                M vcar1	set	op1
00000562 =0000001F                M vcar2	set	op2
00000562 =0000001F                M vcar3	set	op3
00000562 =0000001F                M vcar4	set	op4
00000562                            	smpsVcAmpMod        $00, $00, $00, $00
00000562 =00000000                M vcam1	set	op1<<7
00000562 =00000000                M vcam2	set	op2<<7
00000562 =00000000                M vcam3	set	op3<<7
00000562 =00000000                M vcam4	set	op4<<7
00000562                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00000562 =0000000A                M vcd1r1	set	op1
00000562 =0000000A                M vcd1r2	set	op2
00000562 =0000000E                M vcd1r3	set	op3
00000562 =00000012                M vcd1r4	set	op4
00000562                            	smpsVcDecayRate2    $03, $04, $04, $00
00000562 =00000003                M vcd2r1	set	op1
00000562 =00000004                M vcd2r2	set	op2
00000562 =00000004                M vcd2r3	set	op3
00000562 =00000000                M vcd2r4	set	op4
00000562                            	smpsVcDecayLevel    $02, $02, $02, $02
00000562 =00000002                M vcdl1	set	op1
00000562 =00000002                M vcdl2	set	op2
00000562 =00000002                M vcdl3	set	op3
00000562 =00000002                M vcdl4	set	op4
00000562                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000562 =0000000F                M vcrr1	set	op1
00000562 =0000000F                M vcrr2	set	op2
00000562 =0000000F                M vcrr3	set	op3
00000562 =0000000F                M vcrr4	set	op4
00000562                            	smpsVcTotalLevel    $84, $13, $30, $25
00000562 =00000084                M vctl1	set	op1
00000562 =00000013                M vctl2	set	op2
00000562 =00000030                M vctl3	set	op3
00000562 =00000025                M vctl4	set	op4
00000562 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000563 =00000000                M vctlmask4	set	0
00000563 =00000000                M vctlmask3	set	0
00000563 =00000000                M vctlmask2	set	0
00000563 =00000000                M vctlmask1	set	0
00000563 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000567 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000056B 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000056F 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000573 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000577 2513 3084                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000057B                            
0000057B                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music8:	section	org($1380),file("sound/music/compressed/CNZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/CNZ.asm"	; include the actual music file for assembly
00000000                            CNZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     CNZ_Voices
00000000 0000                     M 	dc.w	((cnz_voices&$7fff)<<8)&$ff00+(cnz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $48
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$48
00000005 48                       M 	dc.b	$48
00000006                            
00000006                            	smpsHeaderDAC       CNZ_DAC
00000006                          M 	checkedchannelpointer	cnz_dac
00000006 0000                     M 	dc.w	((cnz_dac&$7fff)<<8)&$ff00+(cnz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        CNZ_FM1,	$0C, $08
0000000A                          M 	checkedchannelpointer	cnz_fm1
0000000A 0000                     M 	dc.w	((cnz_fm1&$7fff)<<8)&$ff00+(cnz_fm1&$7fff)>>8
0000000C 0C08                     M 	dc.b	$0c,$08
0000000E                            	smpsHeaderFM        CNZ_FM2,	$F4, $0A
0000000E                          M 	checkedchannelpointer	cnz_fm2
0000000E 0000                     M 	dc.w	((cnz_fm2&$7fff)<<8)&$ff00+(cnz_fm2&$7fff)>>8
00000010 F40A                     M 	dc.b	$f4,$0a
00000012                            	smpsHeaderFM        CNZ_FM3,	$F4, $12
00000012                          M 	checkedchannelpointer	cnz_fm3
00000012 0000                     M 	dc.w	((cnz_fm3&$7fff)<<8)&$ff00+(cnz_fm3&$7fff)>>8
00000014 F412                     M 	dc.b	$f4,$12
00000016                            	smpsHeaderFM        CNZ_FM4,	$F4, $12
00000016                          M 	checkedchannelpointer	cnz_fm4
00000016 0000                     M 	dc.w	((cnz_fm4&$7fff)<<8)&$ff00+(cnz_fm4&$7fff)>>8
00000018 F412                     M 	dc.b	$f4,$12
0000001A                            	smpsHeaderFM        CNZ_FM5,	$F4, $0F
0000001A                          M 	checkedchannelpointer	cnz_fm5
0000001A 0000                     M 	dc.w	((cnz_fm5&$7fff)<<8)&$ff00+(cnz_fm5&$7fff)>>8
0000001C F40F                     M 	dc.b	$f4,$0f
0000001E                            	smpsHeaderPSG       CNZ_PSG1,	$DC, $05, $00, $00
0000001E                          M 	checkedchannelpointer	cnz_psg1
0000001E 0000                     M 	dc.w	((cnz_psg1&$7fff)<<8)&$ff00+(cnz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$dc
00000020 DC                       M 	dc.b	$dc
00000021 05                       M 	dc.b	$05
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       CNZ_PSG2,	$DC, $05, $00, $00
00000024                          M 	checkedchannelpointer	cnz_psg2
00000024 0000                     M 	dc.w	((cnz_psg2&$7fff)<<8)&$ff00+(cnz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 05                       M 	dc.b	$05
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       CNZ_PSG3,	$00, $04, $00, $00
0000002A                          M 	checkedchannelpointer	cnz_psg3
0000002A 0000                     M 	dc.w	((cnz_psg3&$7fff)<<8)&$ff00+(cnz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 04                       M 	dc.b	$04
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; FM1 Data
00000030                            CNZ_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032 8018                       	dc.b	nRst, $18
00000034                            
00000034                            CNZ_Jump04:
00000034 A506 99A5 99A5 99A5 9980+  	dc.b	nC3, $06, nC2, nC3, nC2, nC3, nC2, nC3, nC2, nRst, nG1, $04
00000040 8002 9704 9506 9404 8002+  	dc.b	nRst, $02, nBb1, $04, nAb1, $06, nG1, $04, nRst, $02, nG2, $02
0000004C 9406 9698 9906 9896 9499+  	dc.b	nG1, $06, nA1, nB1, nC2, $06, nB1, nA1, nG1, nC2, nG1, nC2
00000058 9B9D 9B99 9891 9395 9196+  	dc.b	nD2, nE2, nD2, nC2, nB1, nE1, nFs1, nAb1, nE1, nA1, nA1, nE2
00000064 9D96 9899 9695 9799 9B9C+  	dc.b	nE2, nA1, nB1, nC2, nA1, nAb1, nBb1, nC2, nD2, nEb2, $04, $02
00000070 9506 9995 9999 9B9C 9D04+  	dc.b	nAb1, $06, nC2, nAb1, nC2, nC2, nD2, nEb2, nE2, $04, $02, nE1
0000007C 0693 9596 9694 9492 9992+  	dc.b	$06, nFs1, nAb1, nA1, nA1, nG1, nG1, nF1, nC2, nF1, nA1, nRst
00000088 9980 9980 9E80 9E95 0C06+  	dc.b	nC2, nRst, nC2, nRst, nF2, nRst, nF2, nAb1, $0C, $06, nRst, $04
00000094 9404 8002 A09E 069D 9B99+  	dc.b	nG1, $04, nRst, $02, nG2, nF2, $06, nE2, nD2, nC2, $04, $02
000000A0 9106 9293 9498 999B 9D98+  	dc.b	nE1, $06, nF1, nFs1, nG1, nB1, nC2, nD2, nE2, nB1, nAb1, nFs1
000000AC 9198 9D91 9698 9998 9699+  	dc.b	nE1, nB1, nE2, nE1, nA1, nB1, nC2, nB1, nA1, nC2, nE2, nA1
000000B8 9597 9997 9596 9798 9998+  	dc.b	nAb1, nBb1, nC2, nBb1, nAb1, nA1, nBb1, nB1, nC2, nB1, nC2, nD2
000000C4 9D04 0298 0691 9596 9899+  	dc.b	nE2, $04, $02, nB1, $06, nE1, nAb1, nA1, nB1, nC2, nE2, nF2
000000D0 0496 0897 0698 8099 8099+  	dc.b	$04, nA1, $08, nBb1, $06, nB1, nRst, nC2, nRst, nC2, nRst, nF2
000000DC 809E                       	dc.b	nRst, nF2
000000DE                            	smpsAlterVol        $04
000000DE E604                     M 	dc.b	$e6,$04
000000E0 8099 8099 809E 809E        	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst, nF2
000000E8                            	smpsAlterVol        $FC
000000E8 E6FC                     M 	dc.b	$e6,$fc
000000EA 8099 8099 809E 809E 0499+  	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst, nF2, $04, nC2, $02, nRst
000000F6 1899 0280 9998 0696 94     	dc.b	$18, nC2, $02, nRst, nC2, nB1, $06, nA1, nG1
000000FF                            	smpsJump            CNZ_Jump04
000000FF F6                       M 	dc.b	$f6
00000100 0000                     M 	dc.w	((cnz_jump04&$7fff)<<8)&$ff00+(cnz_jump04&$7fff)>>8
00000102                            
00000102                            ; FM3 Data
00000102                            CNZ_FM3:
00000102                            	smpsSetvoice        $02
00000102                          M 	smpsfmvoice	$02
00000102 EF02                     M 	dc.b	$ef,$02
00000104                            	smpsPan             panLeft, $00
00000104 E080                     M 	dc.b	$e0,direction+amsfms
00000106 8018                       	dc.b	nRst, $18
00000108                            
00000108                            CNZ_Jump03:
00000108                            	smpsSetvoice        $02
00000108                          M 	smpsfmvoice	$02
00000108 EF02                     M 	dc.b	$ef,$02
0000010A 8006 C480 C480 C480 C480+  	dc.b	nRst, $06, nG5, nRst, nG5, nRst, nG5, nRst, nG5, nRst, nF5, $02
00000116 8004 C204 0280 04C2 0280+  	dc.b	nRst, $04, nF5, $04, $02, nRst, $04, nF5, $02, nRst, $18
00000121                            	smpsCall            CNZ_Call02
00000121 F8                       M 	dc.b	$f8
00000122 0000                     M 	dc.w	((cnz_call02&$7fff)<<8)&$ff00+(cnz_call02&$7fff)>>8
00000124                            	smpsSetvoice        $01
00000124                          M 	smpsfmvoice	$01
00000124 EF01                     M 	dc.b	$ef,$01
00000126                            	smpsAlterPitch      $F4
00000126                          M 	smpschangetransposition	$f4
00000126 E9F4                     M 	dc.b	$e9,$f4
00000128                            	smpsAlterVol        $FC
00000128 E6FC                     M 	dc.b	$e6,$fc
0000012A                            	smpsCall            CNZ_Call03
0000012A F8                       M 	dc.b	$f8
0000012B 0000                     M 	dc.w	((cnz_call03&$7fff)<<8)&$ff00+(cnz_call03&$7fff)>>8
0000012D CD18 CB0C CD06 CBC9 18CE+  	dc.b	nE6, $18, nD6, $0C, nE6, $06, nD6, nC6, $18, nF6, nRst, $06
00000139 C480 C480 C680 C6          	dc.b	nG5, nRst, nG5, nRst, nA5, nRst, nA5
00000140                            	smpsAlterVol        $04
00000140 E604                     M 	dc.b	$e6,$04
00000142 80C4 80C4 80C6 80C6        	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, nRst, nA5
0000014A                            	smpsAlterVol        $FC
0000014A E6FC                     M 	dc.b	$e6,$fc
0000014C 80C4 80C4 80C6 0C04 C402+  	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, $0C, $04, nG5, $02, nRst, $30
00000158                            	smpsAlterPitch      $0C
00000158                          M 	smpschangetransposition	$0c
00000158 E90C                     M 	dc.b	$e9,$0c
0000015A                            	smpsAlterVol        $04
0000015A E604                     M 	dc.b	$e6,$04
0000015C                            	smpsJump            CNZ_Jump03
0000015C F6                       M 	dc.b	$f6
0000015D 0000                     M 	dc.w	((cnz_jump03&$7fff)<<8)&$ff00+(cnz_jump03&$7fff)>>8
0000015F                            
0000015F                            CNZ_Call02:
0000015F 8006 B802 8008 B802 8006+  	dc.b	nRst, $06, nG4, $02, nRst, $08, nG4, $02, nRst, $06, nG4, $08
0000016B 8002 B806 8002 B804 0280+  	dc.b	nRst, $02, nG4, $06, nRst, $02, nG4, $04, $02, nRst, $06, nAb4
00000177 0280 08B9 0280 06B9 0880+  	dc.b	$02, nRst, $08, nAb4, $02, nRst, $06, nAb4, $08, nRst, $02, nAb4
00000183 0680 02B9 0402 8006 BA02+  	dc.b	$06, nRst, $02, nAb4, $04, $02, nRst, $06, nA4, $02, nRst, $08
0000018F BA02 8006 BA08 8002 BA06+  	dc.b	nA4, $02, nRst, $06, nA4, $08, nRst, $02, nA4, $06, nRst, $02
0000019B BA04 0280 06B9 0280 08B9+  	dc.b	nA4, $04, $02, nRst, $06, nAb4, $02, nRst, $08, nAb4, $02, nRst
000001A7 06B9 0880 02B9 0680 02B9+  	dc.b	$06, nAb4, $08, nRst, $02, nAb4, $06, nRst, $02, nAb4, $04, $02
000001B3 8006 B802 8008 B802 8006+  	dc.b	nRst, $06, nG4, $02, nRst, $08, nG4, $02, nRst, $06, nAb4, $08
000001BF 8002 B906 8002 B904 0280+  	dc.b	nRst, $02, nAb4, $06, nRst, $02, nAb4, $04, $02, nRst, $06, nA4
000001CB 0280 08BA 0280 06BA 0880+  	dc.b	$02, nRst, $08, nA4, $02, nRst, $06, nA4, $08, nRst, $02, nA4
000001D7 0680 02BA 0402 8006 B880+  	dc.b	$06, nRst, $02, nA4, $04, $02, nRst, $06, nG4, nRst, nG4, nRst
000001E3 BA80 BABD 0C06 04BC 0280+  	dc.b	nA4, nRst, nA4, nC5, $0C, $06, $04, nB4, $02, nRst, $18
000001EE                            	smpsReturn
000001EE E3                       M 	dc.b	$e3
000001EF                            
000001EF                            CNZ_Call03:
000001EF 8006 CD02 8008 CD02 8006+  	dc.b	nRst, $06, nE6, $02, nRst, $08, nE6, $02, nRst, $06, nE6, $06
000001FB CE04 CD02 800C 8006 CB02+  	dc.b	nF6, $04, nE6, $02, nRst, $0C, nRst, $06, nD6, $02, nRst, $08
00000207 CB02 8006 CB06 CD04 CB02+  	dc.b	nD6, $02, nRst, $06, nD6, $06, nE6, $04, nD6, $02, nRst, $0C
00000213 8006 C902 8008 C902 8006+  	dc.b	nRst, $06, nC6, $02, nRst, $08, nC6, $02, nRst, $06, nC6, $06
0000021F CB04 C902 800C 8006 C902+  	dc.b	nD6, $04, nC6, $02, nRst, $0C, nRst, $06, nC6, $02, nRst, $08
0000022B C902 8006 C906 CB04 C902+  	dc.b	nC6, $02, nRst, $06, nC6, $06, nD6, $04, nC6, $02, nRst, $0C
00000237                            	smpsReturn
00000237 E3                       M 	dc.b	$e3
00000238                            
00000238                            ; FM4 Data
00000238                            CNZ_FM4:
00000238                            	smpsSetvoice        $02
00000238                          M 	smpsfmvoice	$02
00000238 EF02                     M 	dc.b	$ef,$02
0000023A                            	smpsPan             panRight, $00
0000023A E040                     M 	dc.b	$e0,direction+amsfms
0000023C 8018                       	dc.b	nRst, $18
0000023E                            
0000023E                            CNZ_Jump02:
0000023E                            	smpsSetvoice        $02
0000023E                          M 	smpsfmvoice	$02
0000023E EF02                     M 	dc.b	$ef,$02
00000240 8006 C080 C080 C080 C080+  	dc.b	nRst, $06, nEb5, nRst, nEb5, nRst, nEb5, nRst, nEb5, nRst, nD5, $02
0000024C 8004 BF04 0280 04BF 0280+  	dc.b	nRst, $04, nD5, $04, $02, nRst, $04, nD5, $02, nRst, $18
00000257                            	smpsCall            CNZ_Call00
00000257 F8                       M 	dc.b	$f8
00000258 0000                     M 	dc.w	((cnz_call00&$7fff)<<8)&$ff00+(cnz_call00&$7fff)>>8
0000025A                            	smpsSetvoice        $01
0000025A                          M 	smpsfmvoice	$01
0000025A EF01                     M 	dc.b	$ef,$01
0000025C                            	smpsAlterPitch      $F4
0000025C                          M 	smpschangetransposition	$f4
0000025C E9F4                     M 	dc.b	$e9,$f4
0000025E                            	smpsAlterVol        $FC
0000025E E6FC                     M 	dc.b	$e6,$fc
00000260                            	smpsCall            CNZ_Call01
00000260 F8                       M 	dc.b	$f8
00000261 0000                     M 	dc.w	((cnz_call01&$7fff)<<8)&$ff00+(cnz_call01&$7fff)>>8
00000263 C918 C80C C906 C8C6 18C9+  	dc.b	nC6, $18, nB5, $0C, nC6, $06, nB5, nA5, $18, nC6, nRst, $06
0000026F C180 C180 C280 C2          	dc.b	nE5, nRst, nE5, nRst, nF5, nRst, nF5
00000276                            	smpsAlterVol        $04
00000276 E604                     M 	dc.b	$e6,$04
00000278 80C1 80C1 80C2 80C2        	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, nRst, nF5
00000280                            	smpsAlterVol        $FC
00000280 E6FC                     M 	dc.b	$e6,$fc
00000282 80C1 80C1 80C2 0C04 C102+  	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, $0C, $04, nE5, $02, nRst, $30
0000028E                            	smpsAlterPitch      $0C
0000028E                          M 	smpschangetransposition	$0c
0000028E E90C                     M 	dc.b	$e9,$0c
00000290                            	smpsAlterVol        $04
00000290 E604                     M 	dc.b	$e6,$04
00000292                            	smpsJump            CNZ_Jump02
00000292 F6                       M 	dc.b	$f6
00000293 0000                     M 	dc.w	((cnz_jump02&$7fff)<<8)&$ff00+(cnz_jump02&$7fff)>>8
00000295                            
00000295                            CNZ_Call00:
00000295 8006 B502 8008 B502 8006+  	dc.b	nRst, $06, nE4, $02, nRst, $08, nE4, $02, nRst, $06, nE4, $08
000002A1 8002 B506 8002 B504 02     	dc.b	nRst, $02, nE4, $06, nRst, $02, nE4, $04, $02
000002AA                            	smpsLoop            $00, $03, CNZ_Call00
000002AA F7                       M 	dc.b	$f7
000002AB 0003                     M 	dc.b	index,loops
000002AD 0000                     M 	dc.w	((cnz_call00&$7fff)<<8)&$ff00+(cnz_call00&$7fff)>>8
000002AF 8006 B402 8008 B402 8006+  	dc.b	nRst, $06, nEb4, $02, nRst, $08, nEb4, $02, nRst, $06, nEb4, $08
000002BB 8002 B406 8002 B404 0280+  	dc.b	nRst, $02, nEb4, $06, nRst, $02, nEb4, $04, $02, nRst, $06, nE4
000002C7 0280 08B5 0280 06B5 0880+  	dc.b	$02, nRst, $08, nE4, $02, nRst, $06, nE4, $08, nRst, $02, nE4
000002D3 0680 02B5 0402 8006 B502+  	dc.b	$06, nRst, $02, nE4, $04, $02, nRst, $06, nE4, $02, nRst, $08
000002DF B502 8006 B608 8002 B606+  	dc.b	nE4, $02, nRst, $06, nF4, $08, nRst, $02, nF4, $06, nRst, $02
000002EB B604 0280 06B5 80B5 80B6+  	dc.b	nF4, $04, $02, nRst, $06, nE4, nRst, nE4, nRst, nF4, nRst, nF4
000002F7 B90C 0604 B802 8018        	dc.b	nAb4, $0C, $06, $04, nG4, $02, nRst, $18
000002FF                            	smpsReturn
000002FF E3                       M 	dc.b	$e3
00000300                            
00000300                            CNZ_Call01:
00000300 8006 C902 8008 C902 8006+  	dc.b	nRst, $06, nC6, $02, nRst, $08, nC6, $02, nRst, $06, nC6, $06
0000030C CB04 C902 800C 8006 C802+  	dc.b	nD6, $04, nC6, $02, nRst, $0C, nRst, $06, nB5, $02, nRst, $08
00000318 C802 8006 C806 C904 C802+  	dc.b	nB5, $02, nRst, $06, nB5, $06, nC6, $04, nB5, $02, nRst, $0C
00000324 8006 C602 8008 C602 8006+  	dc.b	nRst, $06, nA5, $02, nRst, $08, nA5, $02, nRst, $06, nA5, $06
00000330 C804 C602 800C 8006 C502+  	dc.b	nB5, $04, nA5, $02, nRst, $0C, nRst, $06, nAb5, $02, nRst, $08
0000033C C502 8006 C506 C704 C502+  	dc.b	nAb5, $02, nRst, $06, nAb5, $06, nBb5, $04, nAb5, $02, nRst, $0C
00000348                            	smpsReturn
00000348 E3                       M 	dc.b	$e3
00000349                            
00000349                            ; FM2 Data
00000349                            CNZ_FM2:
00000349                            	smpsSetvoice        $01
00000349                          M 	smpsfmvoice	$01
00000349 EF01                     M 	dc.b	$ef,$01
0000034B                            	smpsModSet          $1C, $01, $06, $04
0000034B F0                       M 	dc.b	$f0
0000034C 1C01 0604                M 	dc.b	$1c,$01,$06,$04
00000350 8018                       	dc.b	nRst, $18
00000352                            
00000352                            CNZ_Jump01:
00000352                            	smpsSetvoice        $01
00000352                          M 	smpsfmvoice	$01
00000352 EF01                     M 	dc.b	$ef,$01
00000354 8006 C00C BD02 8004 C3C2+  	dc.b	nRst, $06, nEb5, $0C, nC5, $02, nRst, $04, nFs5, nF5, $02, nRst
00000360 04C0 0280 04BD 0880 06B8+  	dc.b	$04, nEb5, $02, nRst, $04, nC5, $08, nRst, $06, nG4, $02, nRst
0000036C 04BB B902 8004 B802 800C+  	dc.b	$04, nBb4, nAb4, $02, nRst, $04, nG4, $02, nRst, $0C, nE4, $04
00000378 8002 B504 8002 B518 8006+  	dc.b	nRst, $02, nE4, $04, nRst, $02, nE4, $18, nRst, $06, nE4, $04
00000384 8002 B604 B508 B904 0280+  	dc.b	nRst, $02, nF4, $04, nE4, $08, nAb4, $04, $02, nRst, $04, nE4
00000390 1A80 06B5 BA04 0280 04B5+  	dc.b	$1A, nRst, $06, nE4, nA4, $04, $02, nRst, $04, nE4, $02, nC4
0000039C 1280 06B1 0480 02B3 04B1+  	dc.b	$12, nRst, $06, nC4, $04, nRst, $02, nD4, $04, nC4, $02, nEb4
000003A8 06B3 04B1 2680 06B5 0480+  	dc.b	$06, nD4, $04, nC4, $26, nRst, $06, nE4, $04, nRst, $02, nF4
000003B4 0480 02B5 0480 02B9 0402+  	dc.b	$04, nRst, $02, nE4, $04, nRst, $02, nAb4, $04, $02, nRst, $04
000003C0 B50E 8006 BA0C BC04 BA02+  	dc.b	nE4, $0E, nRst, $06, nA4, $0C, nB4, $04, nA4, $02, nC5, $0C
000003CC 8006 BA02 8004 B80C B5B1+  	dc.b	nRst, $06, nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, nEb4
000003D8 B604 B402 B604 B802 8010+  	dc.b	nF4, $04, nEb4, $02, nF4, $04, nG4, $02, nRst, $10, nG3, $02
000003E4 AE04 B102 B518 8006 B504+  	dc.b	nA3, $04, nC4, $02, nE4, $18, nRst, $06, nE4, $04, nRst, $02
000003F0 B604 B508 B904 0280 04B5+  	dc.b	nF4, $04, nE4, $08, nAb4, $04, $02, nRst, $04, nE4, $1A, nRst
000003FC 06B5 BA04 0280 04B5 02B1+  	dc.b	$06, nE4, nA4, $04, $02, nRst, $04, nE4, $02, nC4, $12, nRst
00000408 06B1 0480 02B3 04B1 02B4+  	dc.b	$06, nC4, $04, nRst, $02, nD4, $04, nC4, $02, nEb4, $06, nD4
00000414 04B1 2680 06B5 0480 02B6+  	dc.b	$04, nC4, $26, nRst, $06, nE4, $04, nRst, $02, nF4, $04, nRst
00000420 02B5 0480 02B9 0402 8004+  	dc.b	$02, nE4, $04, nRst, $02, nAb4, $04, $02, nRst, $04, nE4, $0E
0000042C 8006 BA0C BC04 BA02 BD0C+  	dc.b	nRst, $06, nA4, $0C, nB4, $04, nA4, $02, nC5, $0C, nRst, $06
00000438 BA02 8004 B80C B5B1 B306   	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $06
00000442                            	smpsAlterVol        $04
00000442 E604                     M 	dc.b	$e6,$04
00000444 BA02 8004 B80C B5B1 B306   	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $06
0000044E                            	smpsAlterVol        $FC
0000044E E6FC                     M 	dc.b	$e6,$fc
00000450 BA02 8004 B80C B5B1 B30A+  	dc.b	nA4, $02, nRst, $04, nG4, $0C, nE4, nC4, nD4, $0A, nC4, $02
0000045C 8030                       	dc.b	nRst, $30
0000045E                            	smpsJump            CNZ_Jump01
0000045E F6                       M 	dc.b	$f6
0000045F 0000                     M 	dc.w	((cnz_jump01&$7fff)<<8)&$ff00+(cnz_jump01&$7fff)>>8
00000461                            
00000461                            ; FM5 Data
00000461                            CNZ_FM5:
00000461                            	smpsSetvoice        $01
00000461                          M 	smpsfmvoice	$01
00000461 EF01                     M 	dc.b	$ef,$01
00000463 8018                       	dc.b	nRst, $18
00000465                            	smpsModSet          $1C, $01, $06, $04
00000465 F0                       M 	dc.b	$f0
00000466 1C01 0604                M 	dc.b	$1c,$01,$06,$04
0000046A                            
0000046A                            CNZ_Jump00:
0000046A                            	smpsSetvoice        $01
0000046A                          M 	smpsfmvoice	$01
0000046A EF01                     M 	dc.b	$ef,$01
0000046C 8006 BD0C B802 8004 C0BF+  	dc.b	nRst, $06, nC5, $0C, nG4, $02, nRst, $04, nEb5, nD5, $02, nRst
00000478 04BD 0280 04B8 0880 06B3+  	dc.b	$04, nC5, $02, nRst, $04, nG4, $08, nRst, $06, nD4, $02, nRst
00000484 04B6 B402 8004 B302 800C+  	dc.b	$04, nF4, nEb4, $02, nRst, $04, nD4, $02, nRst, $0C, nA3, $04
00000490 8002 B004 8002 B118 8006+  	dc.b	nRst, $02, nB3, $04, nRst, $02, nC4, $18, nRst, $06, nC4, $04
0000049C 8002 B304 B108 B504 B502+  	dc.b	nRst, $02, nD4, $04, nC4, $08, nE4, $04, nE4, $02, nRst, $04
000004A8 B01A 8006 B0B5 0402 8004+  	dc.b	nB3, $1A, nRst, $06, nB3, nE4, $04, $02, nRst, $04, nC4, $02
000004B4 AE12 8006 AE04 8002 B004+  	dc.b	nA3, $12, nRst, $06, nA3, $04, nRst, $02, nB3, $04, nA3, $02
000004C0 B106 AF04 AD26 8006 B104+  	dc.b	nC4, $06, nBb3, $04, nAb3, $26, nRst, $06, nC4, $04, nRst, $02
000004CC B304 8002 B104 8002 B504+  	dc.b	nD4, $04, nRst, $02, nC4, $04, nRst, $02, nE4, $04, nE4, $02
000004D8 8004 B00E 8006 B50C B804+  	dc.b	nRst, $04, nB3, $0E, nRst, $06, nE4, $0C, nG4, $04, nE4, $02
000004E4 BA0C 8006 B602 8004 B50C+  	dc.b	nA4, $0C, nRst, $06, nF4, $02, nRst, $04, nE4, $0C, nC4, nA3
000004F0 B0B1 B304 B102 B304 B302+  	dc.b	nB3, nC4, nD4, $04, nC4, $02, nD4, $04, nD4, $02, nRst, $10
000004FC A702 A904 AC02 B118 8006+  	dc.b	nD3, $02, nE3, $04, nG3, $02, nC4, $18, nRst, $06, nC4, $04
00000508 8002 B304 B108 B504 B502+  	dc.b	nRst, $02, nD4, $04, nC4, $08, nE4, $04, nE4, $02, nRst, $04
00000514 B01A 8006 B0B5 0402 8004+  	dc.b	nB3, $1A, nRst, $06, nB3, nE4, $04, $02, nRst, $04, nC4, $02
00000520 AE12 8006 AE04 8002 B004+  	dc.b	nA3, $12, nRst, $06, nA3, $04, nRst, $02, nB3, $04, nA3, $02
0000052C B106 AF04 AD26 8006 B104+  	dc.b	nC4, $06, nBb3, $04, nAb3, $26, nRst, $06, nC4, $04, nRst, $02
00000538 B304 8002 B104 8002 B504+  	dc.b	nD4, $04, nRst, $02, nC4, $04, nRst, $02, nE4, $04, nE4, $02
00000544 8004 B00E 8006 B50C B804+  	dc.b	nRst, $04, nB3, $0E, nRst, $06, nE4, $0C, nG4, $04, nE4, $02
00000550 BA0C 8006 B602 8004 B50C+  	dc.b	nA4, $0C, nRst, $06, nF4, $02, nRst, $04, nE4, $0C, nC4, nA3
0000055C B006                       	dc.b	nB3, $06
0000055E                            	smpsAlterVol        $04
0000055E E604                     M 	dc.b	$e6,$04
00000560 B602 8004 B50C B1AE B006   	dc.b	nF4, $02, nRst, $04, nE4, $0C, nC4, nA3, nB3, $06
0000056A                            	smpsAlterVol        $F8
0000056A E6F8                     M 	dc.b	$e6,$f8
0000056C B602 8004 B50C B1AE AA0A+  	dc.b	nF4, $02, nRst, $04, nE4, $0C, nC4, nA3, nF3, $0A, nE3, $02
00000578 8030                       	dc.b	nRst, $30
0000057A                            	smpsAlterVol        $04
0000057A E604                     M 	dc.b	$e6,$04
0000057C                            	smpsJump            CNZ_Jump00
0000057C F6                       M 	dc.b	$f6
0000057D 0000                     M 	dc.w	((cnz_jump00&$7fff)<<8)&$ff00+(cnz_jump00&$7fff)>>8
0000057F                            
0000057F                            ; PSG1 Data
0000057F                            CNZ_PSG1:
0000057F 8018                       	dc.b	nRst, $18
00000581                            
00000581                            CNZ_Jump06:
00000581 8006 B80C B402 8004 BAB9+  	dc.b	nRst, $06, nG4, $0C, nEb4, $02, nRst, $04, nA4, nAb4, $02, nRst
0000058D 04B8 0280 04B4 0880 06B0+  	dc.b	$04, nG4, $02, nRst, $04, nEb4, $08, nRst, $06, nB3, $02, nRst
00000599 04B3 B102 8004 B002 8018   	dc.b	$04, nD4, nC4, $02, nRst, $04, nB3, $02, nRst, $18
000005A3                            	smpsPSGvoice        fTone_01
000005A3 F501                     M 	dc.b	$f5,ftone_01
000005A5                            	smpsPSGAlterVol     $FF
000005A5 ECFF                     M 	dc.b	$ec,$ff
000005A7                            	smpsCall            CNZ_Call02
000005A7 F8                       M 	dc.b	$f8
000005A8 0000                     M 	dc.w	((cnz_call02&$7fff)<<8)&$ff00+(cnz_call02&$7fff)>>8
000005AA                            	smpsPSGAlterVol     $01
000005AA EC01                     M 	dc.b	$ec,$01
000005AC                            	smpsPSGvoice        $00
000005AC F500                     M 	dc.b	$f5,$00
000005AE                            	smpsAlterPitch      $E8
000005AE                          M 	smpschangetransposition	$e8
000005AE E9E8                     M 	dc.b	$e9,$e8
000005B0                            	smpsCall            CNZ_Call03
000005B0 F8                       M 	dc.b	$f8
000005B1 0000                     M 	dc.w	((cnz_call03&$7fff)<<8)&$ff00+(cnz_call03&$7fff)>>8
000005B3                            	smpsAlterPitch      $18
000005B3                          M 	smpschangetransposition	$18
000005B3 E918                     M 	dc.b	$e9,$18
000005B5                            	smpsPSGAlterVol     $02
000005B5 EC02                     M 	dc.b	$ec,$02
000005B7 B518 B30C B506 B3B1 18B6   	dc.b	nE4, $18, nD4, $0C, nE4, $06, nD4, nC4, $18, nF4
000005C1                            	smpsPSGAlterVol     $FE
000005C1 ECFE                     M 	dc.b	$ec,$fe
000005C3 8006 B880 B880 BA80 BA     	dc.b	nRst, $06, nG4, nRst, nG4, nRst, nA4, nRst, nA4
000005CC                            	smpsPSGAlterVol     $03
000005CC EC03                     M 	dc.b	$ec,$03
000005CE C40C C1BD BF06 80          	dc.b	nG5, $0C, nE5, nC5, nD5, $06, nRst
000005D5                            	smpsPSGAlterVol     $FC
000005D5 ECFC                     M 	dc.b	$ec,$fc
000005D7 80B8 80B8 80BA 0C04 B802+  	dc.b	nRst, nG4, nRst, nG4, nRst, nA4, $0C, $04, nG4, $02, nRst, $30
000005E3                            	smpsPSGAlterVol     $01
000005E3 EC01                     M 	dc.b	$ec,$01
000005E5                            	smpsJump            CNZ_Jump06
000005E5 F6                       M 	dc.b	$f6
000005E6 0000                     M 	dc.w	((cnz_jump06&$7fff)<<8)&$ff00+(cnz_jump06&$7fff)>>8
000005E8                            
000005E8                            ; PSG2 Data
000005E8                            CNZ_PSG2:
000005E8 8018                       	dc.b	nRst, $18
000005EA                            
000005EA                            CNZ_Jump05:
000005EA 8006 C00C BD02 8004 C3C2+  	dc.b	nRst, $06, nEb5, $0C, nC5, $02, nRst, $04, nFs5, nF5, $02, nRst
000005F6 04C0 0280 04BD 0880 06B8+  	dc.b	$04, nEb5, $02, nRst, $04, nC5, $08, nRst, $06, nG4, $02, nRst
00000602 04BB B902 8004 B802 8018   	dc.b	$04, nBb4, nAb4, $02, nRst, $04, nG4, $02, nRst, $18
0000060C                            	smpsPSGvoice        fTone_01
0000060C F501                     M 	dc.b	$f5,ftone_01
0000060E                            	smpsPSGAlterVol     $FF
0000060E ECFF                     M 	dc.b	$ec,$ff
00000610                            	smpsCall            CNZ_Call00
00000610 F8                       M 	dc.b	$f8
00000611 0000                     M 	dc.w	((cnz_call00&$7fff)<<8)&$ff00+(cnz_call00&$7fff)>>8
00000613                            	smpsPSGAlterVol     $01
00000613 EC01                     M 	dc.b	$ec,$01
00000615                            	smpsPSGvoice        $00
00000615 F500                     M 	dc.b	$f5,$00
00000617                            	smpsAlterPitch      $E8
00000617                          M 	smpschangetransposition	$e8
00000617 E9E8                     M 	dc.b	$e9,$e8
00000619                            	smpsCall            CNZ_Call01
00000619 F8                       M 	dc.b	$f8
0000061A 0000                     M 	dc.w	((cnz_call01&$7fff)<<8)&$ff00+(cnz_call01&$7fff)>>8
0000061C                            	smpsAlterPitch      $18
0000061C                          M 	smpschangetransposition	$18
0000061C E918                     M 	dc.b	$e9,$18
0000061E                            	smpsPSGAlterVol     $02
0000061E EC02                     M 	dc.b	$ec,$02
00000620 B118 B00C B106 B0AE 18B1   	dc.b	nC4, $18, nB3, $0C, nC4, $06, nB3, nA3, $18, nC4
0000062A                            	smpsPSGAlterVol     $FE
0000062A ECFE                     M 	dc.b	$ec,$fe
0000062C 8006 B580 B580 B680 B6     	dc.b	nRst, $06, nE4, nRst, nE4, nRst, nF4, nRst, nF4
00000635                            	smpsPSGAlterVol     $03
00000635 EC03                     M 	dc.b	$ec,$03
00000637 80B1 80B1 80B1 80B1        	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, nRst, nC4
0000063F                            	smpsPSGAlterVol     $FC
0000063F ECFC                     M 	dc.b	$ec,$fc
00000641 80B1 80B1 80B1 0C04 B102   	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, $0C, $04, nC4, $02
0000064B                            	smpsPSGAlterVol     $01
0000064B EC01                     M 	dc.b	$ec,$01
0000064D 8030                       	dc.b	nRst, $30
0000064F                            	smpsJump            CNZ_Jump05
0000064F F6                       M 	dc.b	$f6
00000650 0000                     M 	dc.w	((cnz_jump05&$7fff)<<8)&$ff00+(cnz_jump05&$7fff)>>8
00000652                            
00000652                            	; Unreachable
00000652                            	smpsStop
00000652 F2                       M 	dc.b	$f2
00000653                            
00000653                            ; PSG3 Data
00000653                            CNZ_PSG3:
00000653                            	smpsPSGform         $E7
00000653 F3E7                     M 	dc.b	$f3,$e7
00000655 8018                       	dc.b	nRst, $18
00000657                            
00000657                            CNZ_Loop03:
00000657                            	smpsCall            CNZ_Call04
00000657 F8                       M 	dc.b	$f8
00000658 0000                     M 	dc.w	((cnz_call04&$7fff)<<8)&$ff00+(cnz_call04&$7fff)>>8
0000065A                            	smpsLoop            $01, $07, CNZ_Loop03
0000065A F7                       M 	dc.b	$f7
0000065B 0107                     M 	dc.b	index,loops
0000065D 0000                     M 	dc.w	((cnz_loop03&$7fff)<<8)&$ff00+(cnz_loop03&$7fff)>>8
0000065F 0402 0402                  	dc.b	$04, $02, $04, $02
00000663                            
00000663                            CNZ_Loop04:
00000663                            	smpsCall            CNZ_Call04
00000663 F8                       M 	dc.b	$f8
00000664 0000                     M 	dc.w	((cnz_call04&$7fff)<<8)&$ff00+(cnz_call04&$7fff)>>8
00000666                            	smpsLoop            $01, $1F, CNZ_Loop04
00000666 F7                       M 	dc.b	$f7
00000667 011F                     M 	dc.b	index,loops
00000669 0000                     M 	dc.w	((cnz_loop04&$7fff)<<8)&$ff00+(cnz_loop04&$7fff)>>8
0000066B 0402 0402                  	dc.b	$04, $02, $04, $02
0000066F                            
0000066F                            CNZ_Loop05:
0000066F                            	smpsCall            CNZ_Call04
0000066F F8                       M 	dc.b	$f8
00000670 0000                     M 	dc.w	((cnz_call04&$7fff)<<8)&$ff00+(cnz_call04&$7fff)>>8
00000672                            	smpsLoop            $01, $24, CNZ_Loop05
00000672 F7                       M 	dc.b	$f7
00000673 0124                     M 	dc.b	index,loops
00000675 0000                     M 	dc.w	((cnz_loop05&$7fff)<<8)&$ff00+(cnz_loop05&$7fff)>>8
00000677 8030                       	dc.b	nRst, $30
00000679                            	smpsJump            CNZ_Loop03
00000679 F6                       M 	dc.b	$f6
0000067A 0000                     M 	dc.w	((cnz_loop03&$7fff)<<8)&$ff00+(cnz_loop03&$7fff)>>8
0000067C                            
0000067C                            CNZ_Call04:
0000067C                            	smpsPSGvoice        fTone_01
0000067C F501                     M 	dc.b	$f5,ftone_01
0000067E C606                       	dc.b	nMaxPSG, $06
00000680                            	smpsPSGvoice        fTone_02
00000680 F502                     M 	dc.b	$f5,ftone_02
00000682                            	smpsPSGAlterVol     $FF
00000682 ECFF                     M 	dc.b	$ec,$ff
00000684 04                         	dc.b	$04
00000685                            	smpsPSGvoice        fTone_01
00000685 F501                     M 	dc.b	$f5,ftone_01
00000687                            	smpsPSGAlterVol     $01
00000687 EC01                     M 	dc.b	$ec,$01
00000689 02                         	dc.b	$02
0000068A                            	smpsReturn
0000068A E3                       M 	dc.b	$e3
0000068B                            
0000068B                            ; DAC Data
0000068B                            CNZ_DAC:
0000068B 8106 8181 0482 0206        	dc.b	dKick, $06, dKick, dKick, $04, dSnare, $02, $06
00000693                            
00000693                            CNZ_Loop00:
00000693 8106 82                    	dc.b	dKick, $06, dSnare
00000696                            	smpsLoop            $00, $04, CNZ_Loop00
00000696 F7                       M 	dc.b	$f7
00000697 0004                     M 	dc.b	index,loops
00000699 0000                     M 	dc.w	((cnz_loop00&$7fff)<<8)&$ff00+(cnz_loop00&$7fff)>>8
0000069B 8106 8282 0406 0681 0206+  	dc.b	dKick, $06, dSnare, dSnare, $04, $06, $06, dKick, $02, $06, $06, dSnare
000006A7                            
000006A7                            CNZ_Loop01:
000006A7 8182                       	dc.b	dKick, dSnare
000006A9                            	smpsLoop            $00, $1C, CNZ_Loop01
000006A9 F7                       M 	dc.b	$f7
000006AA 001C                     M 	dc.b	index,loops
000006AC 0000                     M 	dc.w	((cnz_loop01&$7fff)<<8)&$ff00+(cnz_loop01&$7fff)>>8
000006AE 8182 8204 0606 8102 0606+  	dc.b	dKick, dSnare, dSnare, $04, $06, $06, dKick, $02, $06, $06, dSnare
000006B9                            
000006B9                            CNZ_Loop02:
000006B9 8182                       	dc.b	dKick, dSnare
000006BB                            	smpsLoop            $00, $20, CNZ_Loop02
000006BB F7                       M 	dc.b	$f7
000006BC 0020                     M 	dc.b	index,loops
000006BE 0000                     M 	dc.w	((cnz_loop02&$7fff)<<8)&$ff00+(cnz_loop02&$7fff)>>8
000006C0 8182 8182 8182 8204 0602+  	dc.b	dKick, dSnare, dKick, dSnare, dKick, dSnare, dSnare, $04, $06, $02, nRst, $28
000006CC 8202 06                    	dc.b	dSnare, $02, $06
000006CF                            	smpsJump            CNZ_Loop00
000006CF F6                       M 	dc.b	$f6
000006D0 0000                     M 	dc.w	((cnz_loop00&$7fff)<<8)&$ff00+(cnz_loop00&$7fff)>>8
000006D2                            
000006D2                            CNZ_Voices:
000006D2                            ;	Voice $00
000006D2                            ;	$3A
000006D2                            ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
000006D2                            ;	$05, $07, $0A, $08, 	$A4, $85, $96, $78, 	$21, $25, $28, $00
000006D2                            	smpsVcAlgorithm     $02
000006D2 =00000002                M vcalgorithm	set	val
000006D2                            	smpsVcFeedback      $07
000006D2 =00000007                M vcfeedback	set	val
000006D2                            	smpsVcUnusedBits    $00
000006D2 =00000000                M vcunusedbits	set	val
000006D2 =00000000                M vcd1r1unk	set	0
000006D2 =00000000                M vcd1r2unk	set	0
000006D2 =00000000                M vcd1r3unk	set	0
000006D2 =00000000                M vcd1r4unk	set	0
000006D2                            	smpsVcDetune        $00, $06, $02, $02
000006D2 =00000000                M vcdt1	set	op1
000006D2 =00000006                M vcdt2	set	op2
000006D2 =00000002                M vcdt3	set	op3
000006D2 =00000002                M vcdt4	set	op4
000006D2                            	smpsVcCoarseFreq    $01, $00, $03, $00
000006D2 =00000001                M vccf1	set	op1
000006D2 =00000000                M vccf2	set	op2
000006D2 =00000003                M vccf3	set	op3
000006D2 =00000000                M vccf4	set	op4
000006D2                            	smpsVcRateScale     $00, $00, $00, $00
000006D2 =00000000                M vcrs1	set	op1
000006D2 =00000000                M vcrs2	set	op2
000006D2 =00000000                M vcrs3	set	op3
000006D2 =00000000                M vcrs4	set	op4
000006D2                            	smpsVcAttackRate    $1F, $1F, $1F, $1E
000006D2 =0000001F                M vcar1	set	op1
000006D2 =0000001F                M vcar2	set	op2
000006D2 =0000001F                M vcar3	set	op3
000006D2 =0000001E                M vcar4	set	op4
000006D2                            	smpsVcAmpMod        $00, $00, $00, $00
000006D2 =00000000                M vcam1	set	op1<<7
000006D2 =00000000                M vcam2	set	op2<<7
000006D2 =00000000                M vcam3	set	op3<<7
000006D2 =00000000                M vcam4	set	op4<<7
000006D2                            	smpsVcDecayRate1    $0A, $0B, $0A, $0A
000006D2 =0000000A                M vcd1r1	set	op1
000006D2 =0000000B                M vcd1r2	set	op2
000006D2 =0000000A                M vcd1r3	set	op3
000006D2 =0000000A                M vcd1r4	set	op4
000006D2                            	smpsVcDecayRate2    $08, $0A, $07, $05
000006D2 =00000008                M vcd2r1	set	op1
000006D2 =0000000A                M vcd2r2	set	op2
000006D2 =00000007                M vcd2r3	set	op3
000006D2 =00000005                M vcd2r4	set	op4
000006D2                            	smpsVcDecayLevel    $07, $09, $08, $0A
000006D2 =00000007                M vcdl1	set	op1
000006D2 =00000009                M vcdl2	set	op2
000006D2 =00000008                M vcdl3	set	op3
000006D2 =0000000A                M vcdl4	set	op4
000006D2                            	smpsVcReleaseRate   $08, $06, $05, $04
000006D2 =00000008                M vcrr1	set	op1
000006D2 =00000006                M vcrr2	set	op2
000006D2 =00000005                M vcrr3	set	op3
000006D2 =00000004                M vcrr4	set	op4
000006D2                            	smpsVcTotalLevel    $00, $28, $25, $21
000006D2 =00000000                M vctl1	set	op1
000006D2 =00000028                M vctl2	set	op2
000006D2 =00000025                M vctl3	set	op3
000006D2 =00000021                M vctl4	set	op4
000006D2 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006D3 =00000000                M vctlmask4	set	0
000006D3 =00000000                M vctlmask3	set	0
000006D3 =00000000                M vctlmask2	set	0
000006D3 =00000000                M vctlmask1	set	0
000006D3 2060 2301                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006D7 1E1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006DB 0A0B 0A0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000006DF 050A 0708                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006E3 A496 8578                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000006E7 2128 2500                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006EB                            
000006EB                            ;	Voice $01
000006EB                            ;	$3A
000006EB                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000006EB                            ;	$02, $00, $00, $00, 	$18, $18, $28, $28, 	$19, $20, $2A, $00
000006EB                            	smpsVcAlgorithm     $02
000006EB =00000002                M vcalgorithm	set	val
000006EB                            	smpsVcFeedback      $07
000006EB =00000007                M vcfeedback	set	val
000006EB                            	smpsVcUnusedBits    $00
000006EB =00000000                M vcunusedbits	set	val
000006EB =00000000                M vcd1r1unk	set	0
000006EB =00000000                M vcd1r2unk	set	0
000006EB =00000000                M vcd1r3unk	set	0
000006EB =00000000                M vcd1r4unk	set	0
000006EB                            	smpsVcDetune        $04, $03, $05, $03
000006EB =00000004                M vcdt1	set	op1
000006EB =00000003                M vcdt2	set	op2
000006EB =00000005                M vcdt3	set	op3
000006EB =00000003                M vcdt4	set	op4
000006EB                            	smpsVcCoarseFreq    $02, $02, $06, $02
000006EB =00000002                M vccf1	set	op1
000006EB =00000002                M vccf2	set	op2
000006EB =00000006                M vccf3	set	op3
000006EB =00000002                M vccf4	set	op4
000006EB                            	smpsVcRateScale     $01, $00, $01, $02
000006EB =00000001                M vcrs1	set	op1
000006EB =00000000                M vcrs2	set	op2
000006EB =00000001                M vcrs3	set	op3
000006EB =00000002                M vcrs4	set	op4
000006EB                            	smpsVcAttackRate    $12, $15, $0F, $0D
000006EB =00000012                M vcar1	set	op1
000006EB =00000015                M vcar2	set	op2
000006EB =0000000F                M vcar3	set	op3
000006EB =0000000D                M vcar4	set	op4
000006EB                            	smpsVcAmpMod        $00, $00, $00, $00
000006EB =00000000                M vcam1	set	op1<<7
000006EB =00000000                M vcam2	set	op2<<7
000006EB =00000000                M vcam3	set	op3<<7
000006EB =00000000                M vcam4	set	op4<<7
000006EB                            	smpsVcDecayRate1    $04, $07, $08, $06
000006EB =00000004                M vcd1r1	set	op1
000006EB =00000007                M vcd1r2	set	op2
000006EB =00000008                M vcd1r3	set	op3
000006EB =00000006                M vcd1r4	set	op4
000006EB                            	smpsVcDecayRate2    $00, $00, $00, $02
000006EB =00000000                M vcd2r1	set	op1
000006EB =00000000                M vcd2r2	set	op2
000006EB =00000000                M vcd2r3	set	op3
000006EB =00000002                M vcd2r4	set	op4
000006EB                            	smpsVcDecayLevel    $02, $02, $01, $01
000006EB =00000002                M vcdl1	set	op1
000006EB =00000002                M vcdl2	set	op2
000006EB =00000001                M vcdl3	set	op3
000006EB =00000001                M vcdl4	set	op4
000006EB                            	smpsVcReleaseRate   $08, $08, $08, $08
000006EB =00000008                M vcrr1	set	op1
000006EB =00000008                M vcrr2	set	op2
000006EB =00000008                M vcrr3	set	op3
000006EB =00000008                M vcrr4	set	op4
000006EB                            	smpsVcTotalLevel    $00, $2A, $20, $19
000006EB =00000000                M vctl1	set	op1
000006EB =0000002A                M vctl2	set	op2
000006EB =00000020                M vctl3	set	op3
000006EB =00000019                M vctl4	set	op4
000006EB 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006EC =00000000                M vctlmask4	set	0
000006EC =00000000                M vctlmask3	set	0
000006EC =00000000                M vctlmask2	set	0
000006EC =00000000                M vctlmask1	set	0
000006EC 3232 5642                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006F0 8D15 4F52                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006F4 0607 0804                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000006F8 0200 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006FC 1828 1828                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000700 192A 2000                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000704                            
00000704                            ;	Voice $02
00000704                            ;	$2C
00000704                            ;	$61, $03, $01, $33, 	$5F, $94, $5F, $94, 	$05, $05, $05, $07
00000704                            ;	$02, $02, $02, $02, 	$1F, $6F, $1F, $AF, 	$1E, $80, $1E, $80
00000704                            	smpsVcAlgorithm     $04
00000704 =00000004                M vcalgorithm	set	val
00000704                            	smpsVcFeedback      $05
00000704 =00000005                M vcfeedback	set	val
00000704                            	smpsVcUnusedBits    $00
00000704 =00000000                M vcunusedbits	set	val
00000704 =00000000                M vcd1r1unk	set	0
00000704 =00000000                M vcd1r2unk	set	0
00000704 =00000000                M vcd1r3unk	set	0
00000704 =00000000                M vcd1r4unk	set	0
00000704                            	smpsVcDetune        $03, $00, $00, $06
00000704 =00000003                M vcdt1	set	op1
00000704 =00000000                M vcdt2	set	op2
00000704 =00000000                M vcdt3	set	op3
00000704 =00000006                M vcdt4	set	op4
00000704                            	smpsVcCoarseFreq    $03, $01, $03, $01
00000704 =00000003                M vccf1	set	op1
00000704 =00000001                M vccf2	set	op2
00000704 =00000003                M vccf3	set	op3
00000704 =00000001                M vccf4	set	op4
00000704                            	smpsVcRateScale     $02, $01, $02, $01
00000704 =00000002                M vcrs1	set	op1
00000704 =00000001                M vcrs2	set	op2
00000704 =00000002                M vcrs3	set	op3
00000704 =00000001                M vcrs4	set	op4
00000704                            	smpsVcAttackRate    $14, $1F, $14, $1F
00000704 =00000014                M vcar1	set	op1
00000704 =0000001F                M vcar2	set	op2
00000704 =00000014                M vcar3	set	op3
00000704 =0000001F                M vcar4	set	op4
00000704                            	smpsVcAmpMod        $00, $00, $00, $00
00000704 =00000000                M vcam1	set	op1<<7
00000704 =00000000                M vcam2	set	op2<<7
00000704 =00000000                M vcam3	set	op3<<7
00000704 =00000000                M vcam4	set	op4<<7
00000704                            	smpsVcDecayRate1    $07, $05, $05, $05
00000704 =00000007                M vcd1r1	set	op1
00000704 =00000005                M vcd1r2	set	op2
00000704 =00000005                M vcd1r3	set	op3
00000704 =00000005                M vcd1r4	set	op4
00000704                            	smpsVcDecayRate2    $02, $02, $02, $02
00000704 =00000002                M vcd2r1	set	op1
00000704 =00000002                M vcd2r2	set	op2
00000704 =00000002                M vcd2r3	set	op3
00000704 =00000002                M vcd2r4	set	op4
00000704                            	smpsVcDecayLevel    $0A, $01, $06, $01
00000704 =0000000A                M vcdl1	set	op1
00000704 =00000001                M vcdl2	set	op2
00000704 =00000006                M vcdl3	set	op3
00000704 =00000001                M vcdl4	set	op4
00000704                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000704 =0000000F                M vcrr1	set	op1
00000704 =0000000F                M vcrr2	set	op2
00000704 =0000000F                M vcrr3	set	op3
00000704 =0000000F                M vcrr4	set	op4
00000704                            	smpsVcTotalLevel    $80, $1E, $80, $1E
00000704 =00000080                M vctl1	set	op1
00000704 =0000001E                M vctl2	set	op2
00000704 =00000080                M vctl3	set	op3
00000704 =0000001E                M vctl4	set	op4
00000704 2C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000705 =00000000                M vctlmask4	set	0
00000705 =00000000                M vctlmask3	set	0
00000705 =00000000                M vctlmask2	set	0
00000705 =00000000                M vctlmask1	set	0
00000705 6101 0333                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000709 5F5F 9494                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000070D 0505 0507                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000711 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000715 1F1F 6FAF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000719 1E1E 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000071D                            
0000071D                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music9:	section	org($1380),file("sound/music/compressed/MCZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/MCZ.asm"	; include the actual music file for assembly
00000000                            MCZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     MCZ_Voices
00000000 0000                     M 	dc.w	((mcz_voices&$7fff)<<8)&$ff00+(mcz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $B6
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$b6
00000005 B6                       M 	dc.b	$b6
00000006                            
00000006                            	smpsHeaderDAC       MCZ_DAC
00000006                          M 	checkedchannelpointer	mcz_dac
00000006 0000                     M 	dc.w	((mcz_dac&$7fff)<<8)&$ff00+(mcz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        MCZ_FM1,	$00, $0C
0000000A                          M 	checkedchannelpointer	mcz_fm1
0000000A 0000                     M 	dc.w	((mcz_fm1&$7fff)<<8)&$ff00+(mcz_fm1&$7fff)>>8
0000000C 000C                     M 	dc.b	$00,$0c
0000000E                            	smpsHeaderFM        MCZ_FM2,	$00, $0A
0000000E                          M 	checkedchannelpointer	mcz_fm2
0000000E 0000                     M 	dc.w	((mcz_fm2&$7fff)<<8)&$ff00+(mcz_fm2&$7fff)>>8
00000010 000A                     M 	dc.b	$00,$0a
00000012                            	smpsHeaderFM        MCZ_FM3,	$00, $0C
00000012                          M 	checkedchannelpointer	mcz_fm3
00000012 0000                     M 	dc.w	((mcz_fm3&$7fff)<<8)&$ff00+(mcz_fm3&$7fff)>>8
00000014 000C                     M 	dc.b	$00,$0c
00000016                            	smpsHeaderFM        MCZ_FM4,	$00, $10
00000016                          M 	checkedchannelpointer	mcz_fm4
00000016 0000                     M 	dc.w	((mcz_fm4&$7fff)<<8)&$ff00+(mcz_fm4&$7fff)>>8
00000018 0010                     M 	dc.b	$00,$10
0000001A                            	smpsHeaderFM        MCZ_FM5,	$00, $10
0000001A                          M 	checkedchannelpointer	mcz_fm5
0000001A 0000                     M 	dc.w	((mcz_fm5&$7fff)<<8)&$ff00+(mcz_fm5&$7fff)>>8
0000001C 0010                     M 	dc.b	$00,$10
0000001E                            	smpsHeaderPSG       MCZ_PSG1,	$DC, $04, $00, fTone_0B
0000001E                          M 	checkedchannelpointer	mcz_psg1
0000001E 0000                     M 	dc.w	((mcz_psg1&$7fff)<<8)&$ff00+(mcz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$dc
00000020 DC                       M 	dc.b	$dc
00000021 04                       M 	dc.b	$04
00000022 00                       M 	dc.b	$00
00000023 0B                       M 	dc.b	ftone_0b
00000024                            	smpsHeaderPSG       MCZ_PSG2,	$DC, $02, $00, fTone_01
00000024                          M 	checkedchannelpointer	mcz_psg2
00000024 0000                     M 	dc.w	((mcz_psg2&$7fff)<<8)&$ff00+(mcz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 02                       M 	dc.b	$02
00000028 00                       M 	dc.b	$00
00000029 01                       M 	dc.b	ftone_01
0000002A                            	smpsHeaderPSG       MCZ_PSG3,	$00, $03, $00, fTone_02
0000002A                          M 	checkedchannelpointer	mcz_psg3
0000002A 0000                     M 	dc.w	((mcz_psg3&$7fff)<<8)&$ff00+(mcz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 03                       M 	dc.b	$03
0000002E 00                       M 	dc.b	$00
0000002F 02                       M 	dc.b	ftone_02
00000030                            
00000030                            MCZ_Call00:
00000030                            	smpsSetvoice        $04
00000030                          M 	smpsfmvoice	$04
00000030 EF04                     M 	dc.b	$ef,$04
00000032 A214 A404 A504 8008 A904+  	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
0000003E A804 8008 A904 8008 AC08+  	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
0000004A                            	smpsSetvoice        $03
0000004A                          M 	smpsfmvoice	$03
0000004A EF03                     M 	dc.b	$ef,$03
0000004C                            	smpsReturn
0000004C E3                       M 	dc.b	$e3
0000004D                            
0000004D                            MCZ_Call03:
0000004D                            	smpsAlterPitch      $FE
0000004D                          M 	smpschangetransposition	$fe
0000004D E9FE                     M 	dc.b	$e9,$fe
0000004F C604 E7C5 E7C6 04E7 C5E7+  	dc.b	nA5, $04, smpsNoAttack, nAb5, smpsNoAttack, nA5, $04, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack
0000005B C5E7 C6E7 C5               	dc.b	nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
00000060                            	smpsAlterPitch      $01
00000060                          M 	smpschangetransposition	$01
00000060 E901                     M 	dc.b	$e9,$01
00000062 E7C6 E7C5 E7C6 E7C5 E7C6+  	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
0000006E                            	smpsAlterPitch      $01
0000006E                          M 	smpschangetransposition	$01
0000006E E901                     M 	dc.b	$e9,$01
00000070 E7C6 E7C5 E7C6 E7C5 E7C6+  	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $05, smpsNoAttack
0000007C C5E7 C605 E7C5 8004        	dc.b	nAb5, smpsNoAttack, nA5, $05, smpsNoAttack, nAb5, nRst, $04
00000084                            	smpsReturn
00000084 E3                       M 	dc.b	$e3
00000085                            
00000085                            MCZ_Call04:
00000085                            	smpsAlterPitch      $FD
00000085                          M 	smpschangetransposition	$fd
00000085 E9FD                     M 	dc.b	$e9,$fd
00000087 C604 E7C5 E7C6 E7C5 E7C6+  	dc.b	nA5, $04, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
00000093 E7C6 E7C5                  	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5
00000097                            	smpsAlterPitch      $FF
00000097                          M 	smpschangetransposition	$ff
00000097 E9FF                     M 	dc.b	$e9,$ff
00000099 E7C6 E7C5 E7C6 E7C5        	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
000000A1                            	smpsAlterPitch      $FF
000000A1                          M 	smpschangetransposition	$ff
000000A1 E9FF                     M 	dc.b	$e9,$ff
000000A3 E7C6 E7C5 E7C6 E7C5 E7C6+  	dc.b	smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5, smpsNoAttack, nA5, smpsNoAttack, nAb5
000000AF                            	smpsAlterPitch      $FF
000000AF                          M 	smpschangetransposition	$ff
000000AF E9FF                     M 	dc.b	$e9,$ff
000000B1 E7C6 05E7 C5E7 C605 E7C5+  	dc.b	smpsNoAttack, nA5, $05, smpsNoAttack, nAb5, smpsNoAttack, nA5, $05, smpsNoAttack, nAb5, nRst, $04
000000BD                            	smpsAlterPitch      $06
000000BD                          M 	smpschangetransposition	$06
000000BD E906                     M 	dc.b	$e9,$06
000000BF                            	smpsReturn
000000BF E3                       M 	dc.b	$e3
000000C0                            
000000C0                            ; FM5 Data
000000C0                            MCZ_FM5:
000000C0                            	smpsSetvoice        $01
000000C0                          M 	smpsfmvoice	$01
000000C0 EF01                     M 	dc.b	$ef,$01
000000C2                            	smpsPan             panLeft, $00
000000C2 E080                     M 	dc.b	$e0,direction+amsfms
000000C4 8001                       	dc.b	nRst, $01
000000C6                            	smpsCall            MCZ_Call00
000000C6 F8                       M 	dc.b	$f8
000000C7 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
000000C9                            
000000C9                            MCZ_Jump03:
000000C9 802F 801E                  	dc.b	nRst, $2F, nRst, $1E
000000CD                            	smpsSetvoice        $06
000000CD                          M 	smpsfmvoice	$06
000000CD EF06                     M 	dc.b	$ef,$06
000000CF A412 A506                  	dc.b	nB2, $12, nC3, $06
000000D3                            	smpsSetvoice        $01
000000D3                          M 	smpsfmvoice	$01
000000D3 EF01                     M 	dc.b	$ef,$01
000000D5 8030 8006 BD08 BC04 BB08+  	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
000000E1 B908 B804 8030 801E        	dc.b	nAb4, $08, nG4, $04, nRst, $30, nRst, $1E
000000E9                            	smpsSetvoice        $06
000000E9                          M 	smpsfmvoice	$06
000000E9 EF06                     M 	dc.b	$ef,$06
000000EB A412 A506                  	dc.b	nB2, $12, nC3, $06
000000EF                            	smpsSetvoice        $01
000000EF                          M 	smpsfmvoice	$01
000000EF EF01                     M 	dc.b	$ef,$01
000000F1 8030 8006 BD08 BC04 BB08+  	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
000000FD B908 B804 8030 801E        	dc.b	nAb4, $08, nG4, $04, nRst, $30, nRst, $1E
00000105                            	smpsSetvoice        $06
00000105                          M 	smpsfmvoice	$06
00000105 EF06                     M 	dc.b	$ef,$06
00000107 A412 A506                  	dc.b	nB2, $12, nC3, $06
0000010B                            	smpsSetvoice        $01
0000010B                          M 	smpsfmvoice	$01
0000010B EF01                     M 	dc.b	$ef,$01
0000010D 8030 8006 BD08 BC04 BB08+  	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
00000119 B908 B804 8030 801E        	dc.b	nAb4, $08, nG4, $04, nRst, $30, nRst, $1E
00000121                            	smpsSetvoice        $06
00000121                          M 	smpsfmvoice	$06
00000121 EF06                     M 	dc.b	$ef,$06
00000123 A412 A506                  	dc.b	nB2, $12, nC3, $06
00000127                            	smpsSetvoice        $01
00000127                          M 	smpsfmvoice	$01
00000127 EF01                     M 	dc.b	$ef,$01
00000129 8030 8006 BD08 BC04 BB08+  	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
00000135 B908 B804                  	dc.b	nAb4, $08, nG4, $04
00000139                            
00000139                            MCZ_Loop05:
00000139 800C C106 8012 0680 12C1+  	dc.b	nRst, $0C, nE5, $06, nRst, $12, $06, nRst, $12, nE5, $06
00000144 800C                       	dc.b	nRst, $0C
00000146                            	smpsSetvoice        $06
00000146                          M 	smpsfmvoice	$06
00000146 EF06                     M 	dc.b	$ef,$06
00000148 A412 A506 80               	dc.b	nB2, $12, nC3, $06, nRst
0000014D                            	smpsSetvoice        $01
0000014D                          M 	smpsfmvoice	$01
0000014D EF01                     M 	dc.b	$ef,$01
0000014F C106 8012 0680 12C1 08C0+  	dc.b	nE5, $06, nRst, $12, $06, nRst, $12, nE5, $08, nEb5, $04
0000015A C108 C004 C10C             	dc.b	nE5, $08, nEb5, $04, nE5, $0C
00000160                            	smpsLoop            $00, $04, MCZ_Loop05
00000160 F7                       M 	dc.b	$f7
00000161 0004                     M 	dc.b	index,loops
00000163 0000                     M 	dc.w	((mcz_loop05&$7fff)<<8)&$ff00+(mcz_loop05&$7fff)>>8
00000165 8001                       	dc.b	nRst, $01
00000167                            	smpsCall            MCZ_Call00
00000167 F8                       M 	dc.b	$f8
00000168 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
0000016A 800B AE08 B004 B108 B004+  	dc.b	nRst, $0B, nA3, $08, nB3, $04, nC4, $08, nB3, $04, nA3, $0C
00000176 08B0 04B1 08B0 04AE 0680+  	dc.b	$08, nB3, $04, nC4, $08, nB3, $04, nA3, $06, nRst, $12, nRst
00000182 01                         	dc.b	$01
00000183                            	smpsCall            MCZ_Call00
00000183 F8                       M 	dc.b	$f8
00000184 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
00000186 A20C 80A0 809E 809D 80     	dc.b	nA2, $0C, nRst, nG2, nRst, nF2, nRst, nE2, nRst
0000018F                            	smpsCall            MCZ_Call00
0000018F F8                       M 	dc.b	$f8
00000190 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
00000192 800B B108 B304 B508 B304+  	dc.b	nRst, $0B, nC4, $08, nD4, $04, nE4, $08, nD4, $04, nC4, $0C
0000019E 08B3 04B5 08B3 04B1 0680+  	dc.b	$08, nD4, $04, nE4, $08, nD4, $04, nC4, $06, nRst, $12, nRst
000001AA 01                         	dc.b	$01
000001AB                            	smpsCall            MCZ_Call00
000001AB F8                       M 	dc.b	$f8
000001AC 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
000001AE A20C A29D 08A0 0CA2 0680+  	dc.b	nA2, $0C, nA2, nE2, $08, nG2, $0C, nA2, $06, nRst, $2E
000001B9                            	smpsJump            MCZ_Jump03
000001B9 F6                       M 	dc.b	$f6
000001BA 0000                     M 	dc.w	((mcz_jump03&$7fff)<<8)&$ff00+(mcz_jump03&$7fff)>>8
000001BC                            
000001BC                            MCZ_Call01:
000001BC C301 E7C4 E7C5 E7C6 2D     	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
000001C5                            	smpsReturn
000001C5 E3                       M 	dc.b	$e3
000001C6                            
000001C6                            MCZ_Call02:
000001C6 E724 E7C5 01E7 C4E7 C3E7+  	dc.b	smpsNoAttack, $24, smpsNoAttack, nAb5, $01, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack
000001D2 C1E7 C0E7 BFE7 BEE7 BDE7+  	dc.b	nE5, smpsNoAttack, nEb5, smpsNoAttack, nD5, smpsNoAttack, nCs5, smpsNoAttack, nC5, smpsNoAttack, nB4, smpsNoAttack
000001DE BBE7 BA                    	dc.b	nBb4, smpsNoAttack, nA4
000001E1                            	smpsReturn
000001E1 E3                       M 	dc.b	$e3
000001E2                            
000001E2                            ; FM1 Data
000001E2                            MCZ_FM1:
000001E2                            	smpsSetvoice        $02
000001E2                          M 	smpsfmvoice	$02
000001E2 EF02                     M 	dc.b	$ef,$02
000001E4                            	smpsModSet          $18, $01, $0A, $04
000001E4 F0                       M 	dc.b	$f0
000001E5 1801 0A04                M 	dc.b	$18,$01,$0a,$04
000001E9 8030 80                    	dc.b	nRst, $30, nRst
000001EC                            
000001EC                            MCZ_Jump02:
000001EC                            	smpsCall            MCZ_Call01
000001EC F8                       M 	dc.b	$f8
000001ED 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
000001EF                            	smpsAlterPitch      $02
000001EF                          M 	smpschangetransposition	$02
000001EF E902                     M 	dc.b	$e9,$02
000001F1                            	smpsCall            MCZ_Call01
000001F1 F8                       M 	dc.b	$f8
000001F2 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
000001F4                            	smpsAlterPitch      $01
000001F4                          M 	smpschangetransposition	$01
000001F4 E901                     M 	dc.b	$e9,$01
000001F6                            	smpsCall            MCZ_Call01
000001F6 F8                       M 	dc.b	$f8
000001F7 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
000001F9                            	smpsAlterPitch      $FC
000001F9                          M 	smpschangetransposition	$fc
000001F9 E9FC                     M 	dc.b	$e9,$fc
000001FB                            	smpsCall            MCZ_Call01
000001FB F8                       M 	dc.b	$f8
000001FC 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
000001FE                            	smpsAlterPitch      $01
000001FE                          M 	smpschangetransposition	$01
000001FE E901                     M 	dc.b	$e9,$01
00000200                            	smpsCall            MCZ_Call01
00000200 F8                       M 	dc.b	$f8
00000201 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000203 E730 E730                  	dc.b	smpsNoAttack, $30, smpsNoAttack, $30
00000207                            	smpsCall            MCZ_Call02
00000207 F8                       M 	dc.b	$f8
00000208 0000                     M 	dc.w	((mcz_call02&$7fff)<<8)&$ff00+(mcz_call02&$7fff)>>8
0000020A                            	smpsCall            MCZ_Call01
0000020A F8                       M 	dc.b	$f8
0000020B 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
0000020D                            	smpsAlterPitch      $03
0000020D                          M 	smpschangetransposition	$03
0000020D E903                     M 	dc.b	$e9,$03
0000020F                            	smpsCall            MCZ_Call01
0000020F F8                       M 	dc.b	$f8
00000210 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000212                            	smpsAlterPitch      $FF
00000212                          M 	smpschangetransposition	$ff
00000212 E9FF                     M 	dc.b	$e9,$ff
00000214                            	smpsCall            MCZ_Call01
00000214 F8                       M 	dc.b	$f8
00000215 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000217                            	smpsAlterPitch      $FF
00000217                          M 	smpschangetransposition	$ff
00000217 E9FF                     M 	dc.b	$e9,$ff
00000219                            	smpsCall            MCZ_Call01
00000219 F8                       M 	dc.b	$f8
0000021A 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
0000021C                            	smpsAlterPitch      $FF
0000021C                          M 	smpschangetransposition	$ff
0000021C E9FF                     M 	dc.b	$e9,$ff
0000021E                            	smpsCall            MCZ_Call01
0000021E F8                       M 	dc.b	$f8
0000021F 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000221 E730 E724                  	dc.b	smpsNoAttack, $30, smpsNoAttack, $24
00000225                            	smpsCall            MCZ_Call02
00000225 F8                       M 	dc.b	$f8
00000226 0000                     M 	dc.w	((mcz_call02&$7fff)<<8)&$ff00+(mcz_call02&$7fff)>>8
00000228 800C                       	dc.b	nRst, $0C
0000022A                            
0000022A                            MCZ_Loop04:
0000022A 8030 80                    	dc.b	nRst, $30, nRst
0000022D                            	smpsLoop            $00, $09, MCZ_Loop04
0000022D F7                       M 	dc.b	$f7
0000022E 0009                     M 	dc.b	index,loops
00000230 0000                     M 	dc.w	((mcz_loop04&$7fff)<<8)&$ff00+(mcz_loop04&$7fff)>>8
00000232                            	smpsCall            MCZ_Call03
00000232 F8                       M 	dc.b	$f8
00000233 0000                     M 	dc.w	((mcz_call03&$7fff)<<8)&$ff00+(mcz_call03&$7fff)>>8
00000235 8030 80                    	dc.b	nRst, $30, nRst
00000238                            	smpsAlterPitch      $03
00000238                          M 	smpschangetransposition	$03
00000238 E903                     M 	dc.b	$e9,$03
0000023A                            	smpsCall            MCZ_Call04
0000023A F8                       M 	dc.b	$f8
0000023B 0000                     M 	dc.w	((mcz_call04&$7fff)<<8)&$ff00+(mcz_call04&$7fff)>>8
0000023D 8030 80                    	dc.b	nRst, $30, nRst
00000240                            	smpsAlterPitch      $FD
00000240                          M 	smpschangetransposition	$fd
00000240 E9FD                     M 	dc.b	$e9,$fd
00000242                            	smpsCall            MCZ_Call03
00000242 F8                       M 	dc.b	$f8
00000243 0000                     M 	dc.w	((mcz_call03&$7fff)<<8)&$ff00+(mcz_call03&$7fff)>>8
00000245 8030 8080 80               	dc.b	nRst, $30, nRst, nRst, nRst
0000024A                            	smpsJump            MCZ_Jump02
0000024A F6                       M 	dc.b	$f6
0000024B 0000                     M 	dc.w	((mcz_jump02&$7fff)<<8)&$ff00+(mcz_jump02&$7fff)>>8
0000024D                            
0000024D                            ; PSG1 Data
0000024D                            MCZ_PSG1:
0000024D 8004 8030 80               	dc.b	nRst, $04, nRst, $30, nRst
00000252                            
00000252                            MCZ_Jump05:
00000252                            	smpsCall            MCZ_Call01
00000252 F8                       M 	dc.b	$f8
00000253 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000255                            	smpsAlterPitch      $02
00000255                          M 	smpschangetransposition	$02
00000255 E902                     M 	dc.b	$e9,$02
00000257                            	smpsCall            MCZ_Call01
00000257 F8                       M 	dc.b	$f8
00000258 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
0000025A                            	smpsAlterPitch      $01
0000025A                          M 	smpschangetransposition	$01
0000025A E901                     M 	dc.b	$e9,$01
0000025C                            	smpsCall            MCZ_Call01
0000025C F8                       M 	dc.b	$f8
0000025D 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
0000025F                            	smpsAlterPitch      $FC
0000025F                          M 	smpschangetransposition	$fc
0000025F E9FC                     M 	dc.b	$e9,$fc
00000261                            	smpsCall            MCZ_Call01
00000261 F8                       M 	dc.b	$f8
00000262 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000264                            	smpsAlterPitch      $01
00000264                          M 	smpschangetransposition	$01
00000264 E901                     M 	dc.b	$e9,$01
00000266                            	smpsCall            MCZ_Call01
00000266 F8                       M 	dc.b	$f8
00000267 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000269 E730 E730                  	dc.b	smpsNoAttack, $30, smpsNoAttack, $30
0000026D                            	smpsCall            MCZ_Call02
0000026D F8                       M 	dc.b	$f8
0000026E 0000                     M 	dc.w	((mcz_call02&$7fff)<<8)&$ff00+(mcz_call02&$7fff)>>8
00000270                            	smpsCall            MCZ_Call01
00000270 F8                       M 	dc.b	$f8
00000271 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000273                            	smpsAlterPitch      $03
00000273                          M 	smpschangetransposition	$03
00000273 E903                     M 	dc.b	$e9,$03
00000275                            	smpsCall            MCZ_Call01
00000275 F8                       M 	dc.b	$f8
00000276 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000278                            	smpsAlterPitch      $FF
00000278                          M 	smpschangetransposition	$ff
00000278 E9FF                     M 	dc.b	$e9,$ff
0000027A                            	smpsCall            MCZ_Call01
0000027A F8                       M 	dc.b	$f8
0000027B 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
0000027D                            	smpsAlterPitch      $FF
0000027D                          M 	smpschangetransposition	$ff
0000027D E9FF                     M 	dc.b	$e9,$ff
0000027F                            	smpsCall            MCZ_Call01
0000027F F8                       M 	dc.b	$f8
00000280 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000282                            	smpsAlterPitch      $FF
00000282                          M 	smpschangetransposition	$ff
00000282 E9FF                     M 	dc.b	$e9,$ff
00000284                            	smpsCall            MCZ_Call01
00000284 F8                       M 	dc.b	$f8
00000285 0000                     M 	dc.w	((mcz_call01&$7fff)<<8)&$ff00+(mcz_call01&$7fff)>>8
00000287 E730 E724                  	dc.b	smpsNoAttack, $30, smpsNoAttack, $24
0000028B                            	smpsCall            MCZ_Call02
0000028B F8                       M 	dc.b	$f8
0000028C 0000                     M 	dc.w	((mcz_call02&$7fff)<<8)&$ff00+(mcz_call02&$7fff)>>8
0000028E 800C                       	dc.b	nRst, $0C
00000290                            
00000290                            MCZ_Loop08:
00000290 8030 80                    	dc.b	nRst, $30, nRst
00000293                            	smpsLoop            $00, $09, MCZ_Loop08
00000293 F7                       M 	dc.b	$f7
00000294 0009                     M 	dc.b	index,loops
00000296 0000                     M 	dc.w	((mcz_loop08&$7fff)<<8)&$ff00+(mcz_loop08&$7fff)>>8
00000298                            	smpsCall            MCZ_Call03
00000298 F8                       M 	dc.b	$f8
00000299 0000                     M 	dc.w	((mcz_call03&$7fff)<<8)&$ff00+(mcz_call03&$7fff)>>8
0000029B 8030 80                    	dc.b	nRst, $30, nRst
0000029E                            	smpsAlterPitch      $03
0000029E                          M 	smpschangetransposition	$03
0000029E E903                     M 	dc.b	$e9,$03
000002A0                            	smpsCall            MCZ_Call04
000002A0 F8                       M 	dc.b	$f8
000002A1 0000                     M 	dc.w	((mcz_call04&$7fff)<<8)&$ff00+(mcz_call04&$7fff)>>8
000002A3 8030 80                    	dc.b	nRst, $30, nRst
000002A6                            	smpsAlterPitch      $FD
000002A6                          M 	smpschangetransposition	$fd
000002A6 E9FD                     M 	dc.b	$e9,$fd
000002A8                            	smpsCall            MCZ_Call03
000002A8 F8                       M 	dc.b	$f8
000002A9 0000                     M 	dc.w	((mcz_call03&$7fff)<<8)&$ff00+(mcz_call03&$7fff)>>8
000002AB 8030 8080 80               	dc.b	nRst, $30, nRst, nRst, nRst
000002B0                            	smpsJump            MCZ_Jump05
000002B0 F6                       M 	dc.b	$f6
000002B1 0000                     M 	dc.w	((mcz_jump05&$7fff)<<8)&$ff00+(mcz_jump05&$7fff)>>8
000002B3                            
000002B3                            ; PSG2 Data
000002B3                            MCZ_PSG2:
000002B3 8030 80                    	dc.b	nRst, $30, nRst
000002B6                            
000002B6                            MCZ_Loop06:
000002B6 8030 80                    	dc.b	nRst, $30, nRst
000002B9                            	smpsLoop            $00, $08, MCZ_Loop06
000002B9 F7                       M 	dc.b	$f7
000002BA 0008                     M 	dc.b	index,loops
000002BC 0000                     M 	dc.w	((mcz_loop06&$7fff)<<8)&$ff00+(mcz_loop06&$7fff)>>8
000002BE C60C C5C4 08C5 04C4 08C3+  	dc.b	nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5, $04, nF5
000002CA 0804 C10C C008 BF10 BD0C+  	dc.b	$08, $04, nE5, $0C, nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4
000002D6 08BD 0CC1 0680 2EC6 0CC5+  	dc.b	$08, nC5, $0C, nE5, $06, nRst, $2E, nA5, $0C, nAb5, nG5, $08
000002E2 C504 C408 C304 C208 04C1+  	dc.b	nAb5, $04, nG5, $08, nFs5, $04, nF5, $08, $04, nE5, $0C, nEb5
000002EE 08BF 10BD 0CBD BC08 BD0C+  	dc.b	$08, nD5, $10, nC5, $0C, nC5, nB4, $08, nC5, $0C, nA4, $06
000002FA 802E C90C C8C7 08C8 04C7+  	dc.b	nRst, $2E, nC6, $0C, nB5, nBb5, $08, nB5, $04, nBb5, $08, nA5
00000306 04C5 0804 C40C C308 C210+  	dc.b	$04, nAb5, $08, $04, nG5, $0C, nFs5, $08, nF5, $10, nE5, $0C
00000312 C1BF 08C1 0CC4 0680 2EC9+  	dc.b	nE5, nD5, $08, nE5, $0C, nG5, $06, nRst, $2E, nC6, $0C, nB5
0000031E C708 C804 C708 C604 C508+  	dc.b	nBb5, $08, nB5, $04, nBb5, $08, nA5, $04, nAb5, $08, $04, nG5
0000032A 0CC3 08C2 10C1 0CC1 BF08+  	dc.b	$0C, nFs5, $08, nF5, $10, nE5, $0C, nE5, nD5, $08, nE5, $0C
00000336 BD06 802E                  	dc.b	nC5, $06, nRst, $2E
0000033A                            
0000033A                            MCZ_Loop07:
0000033A C60C CD08 C60C CBC6 04C9+  	dc.b	nA5, $0C, nE6, $08, nA5, $0C, nD6, nA5, $04, nC6, $0C, nA5
00000346 08C8 0CC6 04C9 0C          	dc.b	$08, nB5, $0C, nA5, $04, nC6, $0C
0000034D                            	smpsLoop            $00, $07, MCZ_Loop07
0000034D F7                       M 	dc.b	$f7
0000034E 0007                     M 	dc.b	index,loops
00000350 0000                     M 	dc.w	((mcz_loop07&$7fff)<<8)&$ff00+(mcz_loop07&$7fff)>>8
00000352 C60C CD08 C60C C9C6 0680+  	dc.b	nA5, $0C, nE6, $08, nA5, $0C, nC6, nA5, $06, nRst, $2E
0000035D                            	smpsJump            MCZ_Loop06
0000035D F6                       M 	dc.b	$f6
0000035E 0000                     M 	dc.w	((mcz_loop06&$7fff)<<8)&$ff00+(mcz_loop06&$7fff)>>8
00000360                            
00000360                            ; FM3 Data
00000360                            MCZ_FM3:
00000360                            	smpsModSet          $18, $01, $03, $04
00000360 F0                       M 	dc.b	$f0
00000361 1801 0304                M 	dc.b	$18,$01,$03,$04
00000365                            	smpsSetvoice        $06
00000365                          M 	smpsfmvoice	$06
00000365 EF06                     M 	dc.b	$ef,$06
00000367 A214 A404 A504 8008 A904+  	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
00000373 A804 8008 A904 8008 AC08+  	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
0000037F                            	smpsPan             panRight, $00
0000037F E040                     M 	dc.b	$e0,direction+amsfms
00000381                            	smpsSetvoice        $00
00000381                          M 	smpsfmvoice	$00
00000381 EF00                     M 	dc.b	$ef,$00
00000383                            
00000383                            MCZ_Loop02:
00000383 8030 80                    	dc.b	nRst, $30, nRst
00000386                            	smpsLoop            $00, $08, MCZ_Loop02
00000386 F7                       M 	dc.b	$f7
00000387 0008                     M 	dc.b	index,loops
00000389 0000                     M 	dc.w	((mcz_loop02&$7fff)<<8)&$ff00+(mcz_loop02&$7fff)>>8
0000038B C60C C5C4 08C5 04C4 08C3+  	dc.b	nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5, $04, nF5
00000397 0804 C10C C008 BF10 BD0C+  	dc.b	$08, $04, nE5, $0C, nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4
000003A3 08BD 0CC1 06E7 2EC6 0CC5+  	dc.b	$08, nC5, $0C, nE5, $06, smpsNoAttack, $2E, nA5, $0C, nAb5, nG5, $08
000003AF C504 C408 C304 C208 04C1+  	dc.b	nAb5, $04, nG5, $08, nFs5, $04, nF5, $08, $04, nE5, $0C, nEb5
000003BB 08BF 10BD 0CBD BC08 BD0C+  	dc.b	$08, nD5, $10, nC5, $0C, nC5, nB4, $08, nC5, $0C, nA4, $06
000003C7 E72E C60C C5C4 08C5 04C4+  	dc.b	smpsNoAttack, $2E, nA5, $0C, nAb5, nG5, $08, nAb5, $04, nG5, $08, nFs5
000003D3 04C2 0804 C10C C008 BF10+  	dc.b	$04, nF5, $08, $04, nE5, $0C, nEb5, $08, nD5, $10, nC5, $0C
000003DF BDBC 08BD 0CC1 06E7 2EC6+  	dc.b	nC5, nB4, $08, nC5, $0C, nE5, $06, smpsNoAttack, $2E, nA5, $0C, nAb5
000003EB C408 C504 C408 C304 C208+  	dc.b	nG5, $08, nAb5, $04, nG5, $08, nFs5, $04, nF5, $08, $04, nE5
000003F7 0CC0 08BF 10BD 0CBD BC08+  	dc.b	$0C, nEb5, $08, nD5, $10, nC5, $0C, nC5, nB4, $08, nC5, $0C
00000403 BA06 E72E                  	dc.b	nA4, $06, smpsNoAttack, $2E
00000407                            	smpsPan             panCenter, $00
00000407 E0C0                     M 	dc.b	$e0,direction+amsfms
00000409                            	smpsAlterVol        $06
00000409 E606                     M 	dc.b	$e6,$06
0000040B                            
0000040B                            MCZ_Loop03:
0000040B C60C CDC6 08CB 0CC6 04C9+  	dc.b	nA5, $0C, nE6, nA5, $08, nD6, $0C, nA5, $04, nC6, $08, nA5
00000417 0CC8 C604 C90C             	dc.b	$0C, nB5, nA5, $04, nC6, $0C
0000041D                            	smpsLoop            $00, $07, MCZ_Loop03
0000041D F7                       M 	dc.b	$f7
0000041E 0007                     M 	dc.b	index,loops
00000420 0000                     M 	dc.w	((mcz_loop03&$7fff)<<8)&$ff00+(mcz_loop03&$7fff)>>8
00000422                            	smpsAlterVol        $FA
00000422 E6FA                     M 	dc.b	$e6,$fa
00000424 C60C CD08 C60C C9C6 0680+  	dc.b	nA5, $0C, nE6, $08, nA5, $0C, nC6, nA5, $06, nRst, $2E
0000042F                            	smpsPan             panRight, $00
0000042F E040                     M 	dc.b	$e0,direction+amsfms
00000431                            	smpsJump            MCZ_Loop02
00000431 F6                       M 	dc.b	$f6
00000432 0000                     M 	dc.w	((mcz_loop02&$7fff)<<8)&$ff00+(mcz_loop02&$7fff)>>8
00000434                            
00000434                            ; FM2 Data
00000434                            MCZ_FM2:
00000434                            	smpsSetvoice        $05
00000434                          M 	smpsfmvoice	$05
00000434 EF05                     M 	dc.b	$ef,$05
00000436 8030 80                    	dc.b	nRst, $30, nRst
00000439                            
00000439                            MCZ_Loop01:
00000439 A20C AEAC 08AE 04AC 08A9+  	dc.b	nA2, $0C, nA3, nG3, $08, nA3, $04, nG3, $08, nE3, $04, nD3
00000445 0804 A80C A908 A110 A20C+  	dc.b	$08, $04, nEb3, $0C, nE3, $08, nAb2, $10, nA2, $0C, nA3, nG3
00000451 08AE 04AC 08A9 04A7 0804+  	dc.b	$08, nA3, $04, nG3, $08, nE3, $04, nD3, $08, $04, nEb3, $08
0000045D A904 8018                  	dc.b	nE3, $04, nRst, $18
00000461                            	smpsLoop            $00, $08, MCZ_Loop01
00000461 F7                       M 	dc.b	$f7
00000462 0008                     M 	dc.b	index,loops
00000464 0000                     M 	dc.w	((mcz_loop01&$7fff)<<8)&$ff00+(mcz_loop01&$7fff)>>8
00000466 8030 80A2 0804 A40C A5A7+  	dc.b	nRst, $30, nRst, nA2, $08, $04, nB2, $0C, nC3, nD3, nEb3, nD3
00000472 A5A4 8030 80A2 0C80 A080+  	dc.b	nC3, nB2, nRst, $30, nRst, nA2, $0C, nRst, nG2, nRst, nF2, nRst
0000047E 9D80 8030 80A2 0804 A40C+  	dc.b	nE2, nRst, nRst, $30, nRst, nA2, $08, $04, nB2, $0C, nC3, nD3
0000048A A8A7 A5A4 8030 80A2 0CA2+  	dc.b	nEb3, nD3, nC3, nB2, nRst, $30, nRst, nA2, $0C, nA2, nE2, $08
00000496 A00C A2A2 049F 0CA0 A1     	dc.b	nG2, $0C, nA2, nA2, $04, nFs2, $0C, nG2, nAb2
0000049F                            	smpsJump            MCZ_Loop01
0000049F F6                       M 	dc.b	$f6
000004A0 0000                     M 	dc.w	((mcz_loop01&$7fff)<<8)&$ff00+(mcz_loop01&$7fff)>>8
000004A2                            
000004A2                            ; FM4 Data
000004A2                            MCZ_FM4:
000004A2                            	smpsSetvoice        $01
000004A2                          M 	smpsfmvoice	$01
000004A2 EF01                     M 	dc.b	$ef,$01
000004A4                            	smpsPan             panRight, $00
000004A4 E040                     M 	dc.b	$e0,direction+amsfms
000004A6                            	smpsCall            MCZ_Call00
000004A6 F8                       M 	dc.b	$f8
000004A7 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
000004A9                            
000004A9                            MCZ_Jump01:
000004A9 8030 801E                  	dc.b	nRst, $30, nRst, $1E
000004AD                            	smpsPan             panRight, $00
000004AD E040                     M 	dc.b	$e0,direction+amsfms
000004AF                            	smpsSetvoice        $06
000004AF                          M 	smpsfmvoice	$06
000004AF EF06                     M 	dc.b	$ef,$06
000004B1 A112 A206                  	dc.b	nAb2, $12, nA2, $06
000004B5                            	smpsPan             panCenter, $00
000004B5 E0C0                     M 	dc.b	$e0,direction+amsfms
000004B7                            	smpsSetvoice        $01
000004B7                          M 	smpsfmvoice	$01
000004B7 EF01                     M 	dc.b	$ef,$01
000004B9 8030 8006 BA08 B904 B808+  	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
000004C5 B608 B504 8030 801E        	dc.b	nF4, $08, nE4, $04, nRst, $30, nRst, $1E
000004CD                            	smpsPan             panRight, $00
000004CD E040                     M 	dc.b	$e0,direction+amsfms
000004CF                            	smpsSetvoice        $06
000004CF                          M 	smpsfmvoice	$06
000004CF EF06                     M 	dc.b	$ef,$06
000004D1 A112 A206                  	dc.b	nAb2, $12, nA2, $06
000004D5                            	smpsPan             panCenter, $00
000004D5 E0C0                     M 	dc.b	$e0,direction+amsfms
000004D7                            	smpsSetvoice        $01
000004D7                          M 	smpsfmvoice	$01
000004D7 EF01                     M 	dc.b	$ef,$01
000004D9 8030 8006 BA08 B904 B808+  	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
000004E5 B608 B504 8030 801E        	dc.b	nF4, $08, nE4, $04, nRst, $30, nRst, $1E
000004ED                            	smpsPan             panRight, $00
000004ED E040                     M 	dc.b	$e0,direction+amsfms
000004EF                            	smpsSetvoice        $06
000004EF                          M 	smpsfmvoice	$06
000004EF EF06                     M 	dc.b	$ef,$06
000004F1 A112 A206                  	dc.b	nAb2, $12, nA2, $06
000004F5                            	smpsPan             panCenter, $00
000004F5 E0C0                     M 	dc.b	$e0,direction+amsfms
000004F7                            	smpsSetvoice        $01
000004F7                          M 	smpsfmvoice	$01
000004F7 EF01                     M 	dc.b	$ef,$01
000004F9 8030 8006 BA08 B904 B808+  	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
00000505 B608 B504 8030 801E        	dc.b	nF4, $08, nE4, $04, nRst, $30, nRst, $1E
0000050D                            	smpsPan             panRight, $00
0000050D E040                     M 	dc.b	$e0,direction+amsfms
0000050F                            	smpsSetvoice        $06
0000050F                          M 	smpsfmvoice	$06
0000050F EF06                     M 	dc.b	$ef,$06
00000511 A112 A206                  	dc.b	nAb2, $12, nA2, $06
00000515                            	smpsPan             panCenter, $00
00000515 E0C0                     M 	dc.b	$e0,direction+amsfms
00000517                            	smpsSetvoice        $01
00000517                          M 	smpsfmvoice	$01
00000517 EF01                     M 	dc.b	$ef,$01
00000519 8030 8006 BA08 B904 B808+  	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
00000525 B608 B504                  	dc.b	nF4, $08, nE4, $04
00000529                            
00000529                            MCZ_Loop00:
00000529 800C BD06 8012 0680 12BD+  	dc.b	nRst, $0C, nC5, $06, nRst, $12, $06, nRst, $12, nC5, $06
00000534 800C                       	dc.b	nRst, $0C
00000536                            	smpsSetvoice        $06
00000536                          M 	smpsfmvoice	$06
00000536 EF06                     M 	dc.b	$ef,$06
00000538 A112 A206 80               	dc.b	nAb2, $12, nA2, $06, nRst
0000053D                            	smpsSetvoice        $01
0000053D                          M 	smpsfmvoice	$01
0000053D EF01                     M 	dc.b	$ef,$01
0000053F BD06 8012 0680 12BD 08BC+  	dc.b	nC5, $06, nRst, $12, $06, nRst, $12, nC5, $08, nB4, $04
0000054A BD08 BC04 BD0C             	dc.b	nC5, $08, nB4, $04, nC5, $0C
00000550                            	smpsLoop            $00, $04, MCZ_Loop00
00000550 F7                       M 	dc.b	$f7
00000551 0004                     M 	dc.b	index,loops
00000553 0000                     M 	dc.w	((mcz_loop00&$7fff)<<8)&$ff00+(mcz_loop00&$7fff)>>8
00000555                            	smpsCall            MCZ_Call00
00000555 F8                       M 	dc.b	$f8
00000556 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
00000558                            	smpsPan             panRight, $00
00000558 E040                     M 	dc.b	$e0,direction+amsfms
0000055A                            	smpsAlterPitch      $F4
0000055A                          M 	smpschangetransposition	$f4
0000055A E9F4                     M 	dc.b	$e9,$f4
0000055C 800C AE08 B004 B108 B004+  	dc.b	nRst, $0C, nA3, $08, nB3, $04, nC4, $08, nB3, $04, nA3, $0C
00000568 08B0 04B1 08B0 04AE 0680+  	dc.b	$08, nB3, $04, nC4, $08, nB3, $04, nA3, $06, nRst, $12
00000573                            	smpsPan             panCenter, $00
00000573 E0C0                     M 	dc.b	$e0,direction+amsfms
00000575                            	smpsAlterPitch      $0C
00000575                          M 	smpschangetransposition	$0c
00000575 E90C                     M 	dc.b	$e9,$0c
00000577                            	smpsCall            MCZ_Call00
00000577 F8                       M 	dc.b	$f8
00000578 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
0000057A                            	smpsPan             panRight, $00
0000057A E040                     M 	dc.b	$e0,direction+amsfms
0000057C A20C 80A0 809E 809D 80     	dc.b	nA2, $0C, nRst, nG2, nRst, nF2, nRst, nE2, nRst
00000585                            	smpsPan             panCenter, $00
00000585 E0C0                     M 	dc.b	$e0,direction+amsfms
00000587                            	smpsCall            MCZ_Call00
00000587 F8                       M 	dc.b	$f8
00000588 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
0000058A                            	smpsPan             panRight, $00
0000058A E040                     M 	dc.b	$e0,direction+amsfms
0000058C 800C AE08 B004 B108 B004+  	dc.b	nRst, $0C, nA3, $08, nB3, $04, nC4, $08, nB3, $04, nA3, $0C
00000598 08B0 04B1 08B0 04AE 0680+  	dc.b	$08, nB3, $04, nC4, $08, nB3, $04, nA3, $06, nRst, $12
000005A3                            	smpsPan             panCenter, $00
000005A3 E0C0                     M 	dc.b	$e0,direction+amsfms
000005A5                            	smpsCall            MCZ_Call00
000005A5 F8                       M 	dc.b	$f8
000005A6 0000                     M 	dc.w	((mcz_call00&$7fff)<<8)&$ff00+(mcz_call00&$7fff)>>8
000005A8                            	smpsPan             panRight, $00
000005A8 E040                     M 	dc.b	$e0,direction+amsfms
000005AA A20C A29D 08A0 0CA2 0680+  	dc.b	nA2, $0C, nA2, nE2, $08, nG2, $0C, nA2, $06, nRst, $2E
000005B5                            	smpsPan             panCenter, $00
000005B5 E0C0                     M 	dc.b	$e0,direction+amsfms
000005B7                            	smpsJump            MCZ_Jump01
000005B7 F6                       M 	dc.b	$f6
000005B8 0000                     M 	dc.w	((mcz_jump01&$7fff)<<8)&$ff00+(mcz_jump01&$7fff)>>8
000005BA                            
000005BA                            ; PSG3 Data
000005BA                            MCZ_PSG3:
000005BA                            	smpsPSGform         $E7
000005BA F3E7                     M 	dc.b	$f3,$e7
000005BC 8030 80                    	dc.b	nRst, $30, nRst
000005BF                            
000005BF                            MCZ_Jump04:
000005BF C60C 0804                  	dc.b	nMaxPSG, $0C, $08, $04
000005C3                            	smpsJump            MCZ_Jump04
000005C3 F6                       M 	dc.b	$f6
000005C4 0000                     M 	dc.w	((mcz_jump04&$7fff)<<8)&$ff00+(mcz_jump04&$7fff)>>8
000005C6                            
000005C6                            ; DAC Data
000005C6                            MCZ_DAC:
000005C6 8030 8018 810C 0804        	dc.b	nRst, $30, nRst, $18, dKick, $0C, $08, $04
000005CE                            
000005CE                            MCZ_Jump00:
000005CE 8108 0C04 820C 8108 0C82+  	dc.b	dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C, dSnare, $04, dKick
000005DA 0C82 8181 080C 0482 0C81+  	dc.b	$0C, dSnare, dKick, dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C
000005E6 8204 810C 8282 0804        	dc.b	dSnare, $04, dKick, $0C, dSnare, dSnare, $08, $04
000005EE                            	smpsJump            MCZ_Jump00
000005EE F6                       M 	dc.b	$f6
000005EF 0000                     M 	dc.w	((mcz_jump00&$7fff)<<8)&$ff00+(mcz_jump00&$7fff)>>8
000005F1                            
000005F1                            MCZ_Voices:
000005F1                            ;	Voice $00
000005F1                            ;	$04
000005F1                            ;	$35, $72, $54, $46, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000005F1                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $14, $1D, $80
000005F1                            	smpsVcAlgorithm     $04
000005F1 =00000004                M vcalgorithm	set	val
000005F1                            	smpsVcFeedback      $00
000005F1 =00000000                M vcfeedback	set	val
000005F1                            	smpsVcUnusedBits    $00
000005F1 =00000000                M vcunusedbits	set	val
000005F1 =00000000                M vcd1r1unk	set	0
000005F1 =00000000                M vcd1r2unk	set	0
000005F1 =00000000                M vcd1r3unk	set	0
000005F1 =00000000                M vcd1r4unk	set	0
000005F1                            	smpsVcDetune        $04, $05, $07, $03
000005F1 =00000004                M vcdt1	set	op1
000005F1 =00000005                M vcdt2	set	op2
000005F1 =00000007                M vcdt3	set	op3
000005F1 =00000003                M vcdt4	set	op4
000005F1                            	smpsVcCoarseFreq    $06, $04, $02, $05
000005F1 =00000006                M vccf1	set	op1
000005F1 =00000004                M vccf2	set	op2
000005F1 =00000002                M vccf3	set	op3
000005F1 =00000005                M vccf4	set	op4
000005F1                            	smpsVcRateScale     $00, $00, $00, $00
000005F1 =00000000                M vcrs1	set	op1
000005F1 =00000000                M vcrs2	set	op2
000005F1 =00000000                M vcrs3	set	op3
000005F1 =00000000                M vcrs4	set	op4
000005F1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000005F1 =0000001F                M vcar1	set	op1
000005F1 =0000001F                M vcar2	set	op2
000005F1 =0000001F                M vcar3	set	op3
000005F1 =0000001F                M vcar4	set	op4
000005F1                            	smpsVcAmpMod        $00, $00, $00, $00
000005F1 =00000000                M vcam1	set	op1<<7
000005F1 =00000000                M vcam2	set	op2<<7
000005F1 =00000000                M vcam3	set	op3<<7
000005F1 =00000000                M vcam4	set	op4<<7
000005F1                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000005F1 =0000000D                M vcd1r1	set	op1
000005F1 =00000007                M vcd1r2	set	op2
000005F1 =0000000A                M vcd1r3	set	op3
000005F1 =00000007                M vcd1r4	set	op4
000005F1                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000005F1 =0000000B                M vcd2r1	set	op1
000005F1 =00000000                M vcd2r2	set	op2
000005F1 =0000000B                M vcd2r3	set	op3
000005F1 =00000000                M vcd2r4	set	op4
000005F1                            	smpsVcDecayLevel    $00, $01, $00, $01
000005F1 =00000000                M vcdl1	set	op1
000005F1 =00000001                M vcdl2	set	op2
000005F1 =00000000                M vcdl3	set	op3
000005F1 =00000001                M vcdl4	set	op4
000005F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005F1 =0000000F                M vcrr1	set	op1
000005F1 =0000000F                M vcrr2	set	op2
000005F1 =0000000F                M vcrr3	set	op3
000005F1 =0000000F                M vcrr4	set	op4
000005F1                            	smpsVcTotalLevel    $80, $1D, $14, $23
000005F1 =00000080                M vctl1	set	op1
000005F1 =0000001D                M vctl2	set	op2
000005F1 =00000014                M vctl3	set	op3
000005F1 =00000023                M vctl4	set	op4
000005F1 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005F2 =00000000                M vctlmask4	set	0
000005F2 =00000000                M vctlmask3	set	0
000005F2 =00000000                M vctlmask2	set	0
000005F2 =00000000                M vctlmask1	set	0
000005F2 3554 7246                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005F6 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005FA 0707 0A0D                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005FE 0000 0B0B                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000602 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000606 231D 1480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000060A                            
0000060A                            ;	Voice $01
0000060A                            ;	$3A
0000060A                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
0000060A                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
0000060A                            	smpsVcAlgorithm     $02
0000060A =00000002                M vcalgorithm	set	val
0000060A                            	smpsVcFeedback      $07
0000060A =00000007                M vcfeedback	set	val
0000060A                            	smpsVcUnusedBits    $00
0000060A =00000000                M vcunusedbits	set	val
0000060A =00000000                M vcd1r1unk	set	0
0000060A =00000000                M vcd1r2unk	set	0
0000060A =00000000                M vcd1r3unk	set	0
0000060A =00000000                M vcd1r4unk	set	0
0000060A                            	smpsVcDetune        $00, $00, $00, $00
0000060A =00000000                M vcdt1	set	op1
0000060A =00000000                M vcdt2	set	op2
0000060A =00000000                M vcdt3	set	op3
0000060A =00000000                M vcdt4	set	op4
0000060A                            	smpsVcCoarseFreq    $02, $01, $01, $01
0000060A =00000002                M vccf1	set	op1
0000060A =00000001                M vccf2	set	op2
0000060A =00000001                M vccf3	set	op3
0000060A =00000001                M vccf4	set	op4
0000060A                            	smpsVcRateScale     $01, $00, $00, $02
0000060A =00000001                M vcrs1	set	op1
0000060A =00000000                M vcrs2	set	op2
0000060A =00000000                M vcrs3	set	op3
0000060A =00000002                M vcrs4	set	op4
0000060A                            	smpsVcAttackRate    $12, $07, $07, $0D
0000060A =00000012                M vcar1	set	op1
0000060A =00000007                M vcar2	set	op2
0000060A =00000007                M vcar3	set	op3
0000060A =0000000D                M vcar4	set	op4
0000060A                            	smpsVcAmpMod        $00, $00, $00, $00
0000060A =00000000                M vcam1	set	op1<<7
0000060A =00000000                M vcam2	set	op2<<7
0000060A =00000000                M vcam3	set	op3<<7
0000060A =00000000                M vcam4	set	op4<<7
0000060A                            	smpsVcDecayRate1    $03, $00, $00, $09
0000060A =00000003                M vcd1r1	set	op1
0000060A =00000000                M vcd1r2	set	op2
0000060A =00000000                M vcd1r3	set	op3
0000060A =00000009                M vcd1r4	set	op4
0000060A                            	smpsVcDecayRate2    $00, $02, $02, $01
0000060A =00000000                M vcd2r1	set	op1
0000060A =00000002                M vcd2r2	set	op2
0000060A =00000002                M vcd2r3	set	op3
0000060A =00000001                M vcd2r4	set	op4
0000060A                            	smpsVcDecayLevel    $02, $00, $00, $05
0000060A =00000002                M vcdl1	set	op1
0000060A =00000000                M vcdl2	set	op2
0000060A =00000000                M vcdl3	set	op3
0000060A =00000005                M vcdl4	set	op4
0000060A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000060A =0000000F                M vcrr1	set	op1
0000060A =0000000F                M vcrr2	set	op2
0000060A =0000000F                M vcrr3	set	op3
0000060A =0000000F                M vcrr4	set	op4
0000060A                            	smpsVcTotalLevel    $80, $18, $22, $18
0000060A =00000080                M vctl1	set	op1
0000060A =00000018                M vctl2	set	op2
0000060A =00000022                M vctl3	set	op3
0000060A =00000018                M vctl4	set	op4
0000060A 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000060B =00000000                M vctlmask4	set	0
0000060B =00000000                M vctlmask3	set	0
0000060B =00000000                M vctlmask2	set	0
0000060B =00000000                M vctlmask1	set	0
0000060B 0101 0102                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000060F 8D07 0752                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000613 0900 0003                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000617 0102 0200                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000061B 5F0F 0F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000061F 1818 2280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000623                            
00000623                            ;	Voice $02
00000623                            ;	$3C
00000623                            ;	$42, $41, $32, $41, 	$12, $12, $12, $12, 	$00, $00, $00, $00
00000623                            ;	$00, $00, $00, $00, 	$06, $08, $06, $08, 	$24, $08, $24, $08
00000623                            	smpsVcAlgorithm     $04
00000623 =00000004                M vcalgorithm	set	val
00000623                            	smpsVcFeedback      $07
00000623 =00000007                M vcfeedback	set	val
00000623                            	smpsVcUnusedBits    $00
00000623 =00000000                M vcunusedbits	set	val
00000623 =00000000                M vcd1r1unk	set	0
00000623 =00000000                M vcd1r2unk	set	0
00000623 =00000000                M vcd1r3unk	set	0
00000623 =00000000                M vcd1r4unk	set	0
00000623                            	smpsVcDetune        $04, $03, $04, $04
00000623 =00000004                M vcdt1	set	op1
00000623 =00000003                M vcdt2	set	op2
00000623 =00000004                M vcdt3	set	op3
00000623 =00000004                M vcdt4	set	op4
00000623                            	smpsVcCoarseFreq    $01, $02, $01, $02
00000623 =00000001                M vccf1	set	op1
00000623 =00000002                M vccf2	set	op2
00000623 =00000001                M vccf3	set	op3
00000623 =00000002                M vccf4	set	op4
00000623                            	smpsVcRateScale     $00, $00, $00, $00
00000623 =00000000                M vcrs1	set	op1
00000623 =00000000                M vcrs2	set	op2
00000623 =00000000                M vcrs3	set	op3
00000623 =00000000                M vcrs4	set	op4
00000623                            	smpsVcAttackRate    $12, $12, $12, $12
00000623 =00000012                M vcar1	set	op1
00000623 =00000012                M vcar2	set	op2
00000623 =00000012                M vcar3	set	op3
00000623 =00000012                M vcar4	set	op4
00000623                            	smpsVcAmpMod        $00, $00, $00, $00
00000623 =00000000                M vcam1	set	op1<<7
00000623 =00000000                M vcam2	set	op2<<7
00000623 =00000000                M vcam3	set	op3<<7
00000623 =00000000                M vcam4	set	op4<<7
00000623                            	smpsVcDecayRate1    $00, $00, $00, $00
00000623 =00000000                M vcd1r1	set	op1
00000623 =00000000                M vcd1r2	set	op2
00000623 =00000000                M vcd1r3	set	op3
00000623 =00000000                M vcd1r4	set	op4
00000623                            	smpsVcDecayRate2    $00, $00, $00, $00
00000623 =00000000                M vcd2r1	set	op1
00000623 =00000000                M vcd2r2	set	op2
00000623 =00000000                M vcd2r3	set	op3
00000623 =00000000                M vcd2r4	set	op4
00000623                            	smpsVcDecayLevel    $00, $00, $00, $00
00000623 =00000000                M vcdl1	set	op1
00000623 =00000000                M vcdl2	set	op2
00000623 =00000000                M vcdl3	set	op3
00000623 =00000000                M vcdl4	set	op4
00000623                            	smpsVcReleaseRate   $08, $06, $08, $06
00000623 =00000008                M vcrr1	set	op1
00000623 =00000006                M vcrr2	set	op2
00000623 =00000008                M vcrr3	set	op3
00000623 =00000006                M vcrr4	set	op4
00000623                            	smpsVcTotalLevel    $08, $24, $08, $24
00000623 =00000008                M vctl1	set	op1
00000623 =00000024                M vctl2	set	op2
00000623 =00000008                M vctl3	set	op3
00000623 =00000024                M vctl4	set	op4
00000623 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000624 =00000000                M vctlmask4	set	0
00000624 =00000000                M vctlmask3	set	0
00000624 =00000000                M vctlmask2	set	0
00000624 =00000000                M vctlmask1	set	0
00000624 4232 4141                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000628 1212 1212                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000062C 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000630 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000634 0606 0808                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000638 2424 0808                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000063C                            
0000063C                            ;	Voice $03
0000063C                            ;	$3C
0000063C                            ;	$51, $51, $11, $11, 	$12, $14, $11, $0F, 	$0A, $05, $05, $05
0000063C                            ;	$00, $00, $00, $00, 	$A6, $1A, $56, $1A, 	$13, $00, $0D, $00
0000063C                            	smpsVcAlgorithm     $04
0000063C =00000004                M vcalgorithm	set	val
0000063C                            	smpsVcFeedback      $07
0000063C =00000007                M vcfeedback	set	val
0000063C                            	smpsVcUnusedBits    $00
0000063C =00000000                M vcunusedbits	set	val
0000063C =00000000                M vcd1r1unk	set	0
0000063C =00000000                M vcd1r2unk	set	0
0000063C =00000000                M vcd1r3unk	set	0
0000063C =00000000                M vcd1r4unk	set	0
0000063C                            	smpsVcDetune        $01, $01, $05, $05
0000063C =00000001                M vcdt1	set	op1
0000063C =00000001                M vcdt2	set	op2
0000063C =00000005                M vcdt3	set	op3
0000063C =00000005                M vcdt4	set	op4
0000063C                            	smpsVcCoarseFreq    $01, $01, $01, $01
0000063C =00000001                M vccf1	set	op1
0000063C =00000001                M vccf2	set	op2
0000063C =00000001                M vccf3	set	op3
0000063C =00000001                M vccf4	set	op4
0000063C                            	smpsVcRateScale     $00, $00, $00, $00
0000063C =00000000                M vcrs1	set	op1
0000063C =00000000                M vcrs2	set	op2
0000063C =00000000                M vcrs3	set	op3
0000063C =00000000                M vcrs4	set	op4
0000063C                            	smpsVcAttackRate    $0F, $11, $14, $12
0000063C =0000000F                M vcar1	set	op1
0000063C =00000011                M vcar2	set	op2
0000063C =00000014                M vcar3	set	op3
0000063C =00000012                M vcar4	set	op4
0000063C                            	smpsVcAmpMod        $00, $00, $00, $00
0000063C =00000000                M vcam1	set	op1<<7
0000063C =00000000                M vcam2	set	op2<<7
0000063C =00000000                M vcam3	set	op3<<7
0000063C =00000000                M vcam4	set	op4<<7
0000063C                            	smpsVcDecayRate1    $05, $05, $05, $0A
0000063C =00000005                M vcd1r1	set	op1
0000063C =00000005                M vcd1r2	set	op2
0000063C =00000005                M vcd1r3	set	op3
0000063C =0000000A                M vcd1r4	set	op4
0000063C                            	smpsVcDecayRate2    $00, $00, $00, $00
0000063C =00000000                M vcd2r1	set	op1
0000063C =00000000                M vcd2r2	set	op2
0000063C =00000000                M vcd2r3	set	op3
0000063C =00000000                M vcd2r4	set	op4
0000063C                            	smpsVcDecayLevel    $01, $05, $01, $0A
0000063C =00000001                M vcdl1	set	op1
0000063C =00000005                M vcdl2	set	op2
0000063C =00000001                M vcdl3	set	op3
0000063C =0000000A                M vcdl4	set	op4
0000063C                            	smpsVcReleaseRate   $0A, $06, $0A, $06
0000063C =0000000A                M vcrr1	set	op1
0000063C =00000006                M vcrr2	set	op2
0000063C =0000000A                M vcrr3	set	op3
0000063C =00000006                M vcrr4	set	op4
0000063C                            	smpsVcTotalLevel    $00, $0D, $00, $13
0000063C =00000000                M vctl1	set	op1
0000063C =0000000D                M vctl2	set	op2
0000063C =00000000                M vctl3	set	op3
0000063C =00000013                M vctl4	set	op4
0000063C 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000063D =00000000                M vctlmask4	set	0
0000063D =00000000                M vctlmask3	set	0
0000063D =00000000                M vctlmask2	set	0
0000063D =00000000                M vctlmask1	set	0
0000063D 5111 5111                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000641 1211 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000645 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000649 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000064D A656 1A1A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000651 130D 0000                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000655                            
00000655                            ;	Voice $04
00000655                            ;	$24
00000655                            ;	$70, $74, $30, $38, 	$12, $1F, $1F, $1F, 	$05, $03, $05, $03
00000655                            ;	$05, $03, $05, $03, 	$36, $2C, $26, $2C, 	$0A, $08, $06, $08
00000655                            	smpsVcAlgorithm     $04
00000655 =00000004                M vcalgorithm	set	val
00000655                            	smpsVcFeedback      $04
00000655 =00000004                M vcfeedback	set	val
00000655                            	smpsVcUnusedBits    $00
00000655 =00000000                M vcunusedbits	set	val
00000655 =00000000                M vcd1r1unk	set	0
00000655 =00000000                M vcd1r2unk	set	0
00000655 =00000000                M vcd1r3unk	set	0
00000655 =00000000                M vcd1r4unk	set	0
00000655                            	smpsVcDetune        $03, $03, $07, $07
00000655 =00000003                M vcdt1	set	op1
00000655 =00000003                M vcdt2	set	op2
00000655 =00000007                M vcdt3	set	op3
00000655 =00000007                M vcdt4	set	op4
00000655                            	smpsVcCoarseFreq    $08, $00, $04, $00
00000655 =00000008                M vccf1	set	op1
00000655 =00000000                M vccf2	set	op2
00000655 =00000004                M vccf3	set	op3
00000655 =00000000                M vccf4	set	op4
00000655                            	smpsVcRateScale     $00, $00, $00, $00
00000655 =00000000                M vcrs1	set	op1
00000655 =00000000                M vcrs2	set	op2
00000655 =00000000                M vcrs3	set	op3
00000655 =00000000                M vcrs4	set	op4
00000655                            	smpsVcAttackRate    $1F, $1F, $1F, $12
00000655 =0000001F                M vcar1	set	op1
00000655 =0000001F                M vcar2	set	op2
00000655 =0000001F                M vcar3	set	op3
00000655 =00000012                M vcar4	set	op4
00000655                            	smpsVcAmpMod        $00, $00, $00, $00
00000655 =00000000                M vcam1	set	op1<<7
00000655 =00000000                M vcam2	set	op2<<7
00000655 =00000000                M vcam3	set	op3<<7
00000655 =00000000                M vcam4	set	op4<<7
00000655                            	smpsVcDecayRate1    $03, $05, $03, $05
00000655 =00000003                M vcd1r1	set	op1
00000655 =00000005                M vcd1r2	set	op2
00000655 =00000003                M vcd1r3	set	op3
00000655 =00000005                M vcd1r4	set	op4
00000655                            	smpsVcDecayRate2    $03, $05, $03, $05
00000655 =00000003                M vcd2r1	set	op1
00000655 =00000005                M vcd2r2	set	op2
00000655 =00000003                M vcd2r3	set	op3
00000655 =00000005                M vcd2r4	set	op4
00000655                            	smpsVcDecayLevel    $02, $02, $02, $03
00000655 =00000002                M vcdl1	set	op1
00000655 =00000002                M vcdl2	set	op2
00000655 =00000002                M vcdl3	set	op3
00000655 =00000003                M vcdl4	set	op4
00000655                            	smpsVcReleaseRate   $0C, $06, $0C, $06
00000655 =0000000C                M vcrr1	set	op1
00000655 =00000006                M vcrr2	set	op2
00000655 =0000000C                M vcrr3	set	op3
00000655 =00000006                M vcrr4	set	op4
00000655                            	smpsVcTotalLevel    $08, $06, $08, $0A
00000655 =00000008                M vctl1	set	op1
00000655 =00000006                M vctl2	set	op2
00000655 =00000008                M vctl3	set	op3
00000655 =0000000A                M vctl4	set	op4
00000655 24                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000656 =00000000                M vctlmask4	set	0
00000656 =00000000                M vctlmask3	set	0
00000656 =00000000                M vctlmask2	set	0
00000656 =00000000                M vctlmask1	set	0
00000656 7030 7438                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000065A 121F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000065E 0505 0303                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000662 0505 0303                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000666 3626 2C2C                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000066A 0A06 0808                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000066E                            
0000066E                            ;	Voice $05
0000066E                            ;	$31
0000066E                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
0000066E                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
0000066E                            	smpsVcAlgorithm     $01
0000066E =00000001                M vcalgorithm	set	val
0000066E                            	smpsVcFeedback      $06
0000066E =00000006                M vcfeedback	set	val
0000066E                            	smpsVcUnusedBits    $00
0000066E =00000000                M vcunusedbits	set	val
0000066E =00000000                M vcd1r1unk	set	0
0000066E =00000000                M vcd1r2unk	set	0
0000066E =00000000                M vcd1r3unk	set	0
0000066E =00000000                M vcd1r4unk	set	0
0000066E                            	smpsVcDetune        $03, $03, $03, $03
0000066E =00000003                M vcdt1	set	op1
0000066E =00000003                M vcdt2	set	op2
0000066E =00000003                M vcdt3	set	op3
0000066E =00000003                M vcdt4	set	op4
0000066E                            	smpsVcCoarseFreq    $01, $00, $05, $04
0000066E =00000001                M vccf1	set	op1
0000066E =00000000                M vccf2	set	op2
0000066E =00000005                M vccf3	set	op3
0000066E =00000004                M vccf4	set	op4
0000066E                            	smpsVcRateScale     $02, $02, $03, $03
0000066E =00000002                M vcrs1	set	op1
0000066E =00000002                M vcrs2	set	op2
0000066E =00000003                M vcrs3	set	op3
0000066E =00000003                M vcrs4	set	op4
0000066E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000066E =0000001F                M vcar1	set	op1
0000066E =0000001F                M vcar2	set	op2
0000066E =0000001F                M vcar3	set	op3
0000066E =0000001F                M vcar4	set	op4
0000066E                            	smpsVcAmpMod        $00, $00, $00, $00
0000066E =00000000                M vcam1	set	op1<<7
0000066E =00000000                M vcam2	set	op2<<7
0000066E =00000000                M vcam3	set	op3<<7
0000066E =00000000                M vcam4	set	op4<<7
0000066E                            	smpsVcDecayRate1    $09, $0C, $07, $0C
0000066E =00000009                M vcd1r1	set	op1
0000066E =0000000C                M vcd1r2	set	op2
0000066E =00000007                M vcd1r3	set	op3
0000066E =0000000C                M vcd1r4	set	op4
0000066E                            	smpsVcDecayRate2    $08, $07, $07, $07
0000066E =00000008                M vcd2r1	set	op1
0000066E =00000007                M vcd2r2	set	op2
0000066E =00000007                M vcd2r3	set	op3
0000066E =00000007                M vcd2r4	set	op4
0000066E                            	smpsVcDecayLevel    $02, $01, $01, $02
0000066E =00000002                M vcdl1	set	op1
0000066E =00000001                M vcdl2	set	op2
0000066E =00000001                M vcdl3	set	op3
0000066E =00000002                M vcdl4	set	op4
0000066E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000066E =0000000F                M vcrr1	set	op1
0000066E =0000000F                M vcrr2	set	op2
0000066E =0000000F                M vcrr3	set	op3
0000066E =0000000F                M vcrr4	set	op4
0000066E                            	smpsVcTotalLevel    $80, $14, $32, $17
0000066E =00000080                M vctl1	set	op1
0000066E =00000014                M vctl2	set	op2
0000066E =00000032                M vctl3	set	op3
0000066E =00000017                M vctl4	set	op4
0000066E 31                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000066F =00000000                M vctlmask4	set	0
0000066F =00000000                M vctlmask3	set	0
0000066F =00000000                M vctlmask2	set	0
0000066F =00000000                M vctlmask1	set	0
0000066F 3430 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000673 DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000677 0C0C 0709                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000067B 0707 0708                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000067F 2F1F 1F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000683 1714 3280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000687                            
00000687                            ;	Voice $06
00000687                            ;	$3D
00000687                            ;	$01, $01, $01, $01, 	$10, $50, $50, $50, 	$07, $08, $08, $08
00000687                            ;	$01, $00, $00, $00, 	$20, $1A, $1A, $1A, 	$19, $84, $84, $84
00000687                            	smpsVcAlgorithm     $05
00000687 =00000005                M vcalgorithm	set	val
00000687                            	smpsVcFeedback      $07
00000687 =00000007                M vcfeedback	set	val
00000687                            	smpsVcUnusedBits    $00
00000687 =00000000                M vcunusedbits	set	val
00000687 =00000000                M vcd1r1unk	set	0
00000687 =00000000                M vcd1r2unk	set	0
00000687 =00000000                M vcd1r3unk	set	0
00000687 =00000000                M vcd1r4unk	set	0
00000687                            	smpsVcDetune        $00, $00, $00, $00
00000687 =00000000                M vcdt1	set	op1
00000687 =00000000                M vcdt2	set	op2
00000687 =00000000                M vcdt3	set	op3
00000687 =00000000                M vcdt4	set	op4
00000687                            	smpsVcCoarseFreq    $01, $01, $01, $01
00000687 =00000001                M vccf1	set	op1
00000687 =00000001                M vccf2	set	op2
00000687 =00000001                M vccf3	set	op3
00000687 =00000001                M vccf4	set	op4
00000687                            	smpsVcRateScale     $01, $01, $01, $00
00000687 =00000001                M vcrs1	set	op1
00000687 =00000001                M vcrs2	set	op2
00000687 =00000001                M vcrs3	set	op3
00000687 =00000000                M vcrs4	set	op4
00000687                            	smpsVcAttackRate    $10, $10, $10, $10
00000687 =00000010                M vcar1	set	op1
00000687 =00000010                M vcar2	set	op2
00000687 =00000010                M vcar3	set	op3
00000687 =00000010                M vcar4	set	op4
00000687                            	smpsVcAmpMod        $00, $00, $00, $00
00000687 =00000000                M vcam1	set	op1<<7
00000687 =00000000                M vcam2	set	op2<<7
00000687 =00000000                M vcam3	set	op3<<7
00000687 =00000000                M vcam4	set	op4<<7
00000687                            	smpsVcDecayRate1    $08, $08, $08, $07
00000687 =00000008                M vcd1r1	set	op1
00000687 =00000008                M vcd1r2	set	op2
00000687 =00000008                M vcd1r3	set	op3
00000687 =00000007                M vcd1r4	set	op4
00000687                            	smpsVcDecayRate2    $00, $00, $00, $01
00000687 =00000000                M vcd2r1	set	op1
00000687 =00000000                M vcd2r2	set	op2
00000687 =00000000                M vcd2r3	set	op3
00000687 =00000001                M vcd2r4	set	op4
00000687                            	smpsVcDecayLevel    $01, $01, $01, $02
00000687 =00000001                M vcdl1	set	op1
00000687 =00000001                M vcdl2	set	op2
00000687 =00000001                M vcdl3	set	op3
00000687 =00000002                M vcdl4	set	op4
00000687                            	smpsVcReleaseRate   $0A, $0A, $0A, $00
00000687 =0000000A                M vcrr1	set	op1
00000687 =0000000A                M vcrr2	set	op2
00000687 =0000000A                M vcrr3	set	op3
00000687 =00000000                M vcrr4	set	op4
00000687                            	smpsVcTotalLevel    $84, $84, $84, $19
00000687 =00000084                M vctl1	set	op1
00000687 =00000084                M vctl2	set	op2
00000687 =00000084                M vctl3	set	op3
00000687 =00000019                M vctl4	set	op4
00000687 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000688 =00000000                M vctlmask4	set	0
00000688 =00000000                M vctlmask3	set	0
00000688 =00000000                M vctlmask2	set	0
00000688 =00000000                M vctlmask1	set	0
00000688 0101 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000068C 1050 5050                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000690 0708 0808                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000694 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000698 201A 1A1A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000069C 1984 8484                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006A0                            
000006A0                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music10:	section	org($1380),file("sound/music/compressed/MCZ2P.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/MCZ2P.asm"	; include the actual music file for assembly
00000000                            MCZ_2p_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     MCZ_2p_Voices
00000000 0000                     M 	dc.w	((mcz_2p_voices&$7fff)<<8)&$ff00+(mcz_2p_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $EC
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$ec
00000005 EC                       M 	dc.b	$ec
00000006                            
00000006                            	smpsHeaderDAC       MCZ_2p_DAC
00000006                          M 	checkedchannelpointer	mcz_2p_dac
00000006 0000                     M 	dc.w	((mcz_2p_dac&$7fff)<<8)&$ff00+(mcz_2p_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        MCZ_2p_FM1,	$00, $10
0000000A                          M 	checkedchannelpointer	mcz_2p_fm1
0000000A 0000                     M 	dc.w	((mcz_2p_fm1&$7fff)<<8)&$ff00+(mcz_2p_fm1&$7fff)>>8
0000000C 0010                     M 	dc.b	$00,$10
0000000E                            	smpsHeaderFM        MCZ_2p_FM2,	$18, $0D
0000000E                          M 	checkedchannelpointer	mcz_2p_fm2
0000000E 0000                     M 	dc.w	((mcz_2p_fm2&$7fff)<<8)&$ff00+(mcz_2p_fm2&$7fff)>>8
00000010 180D                     M 	dc.b	$18,$0d
00000012                            	smpsHeaderFM        MCZ_2p_FM3,	$00, $12
00000012                          M 	checkedchannelpointer	mcz_2p_fm3
00000012 0000                     M 	dc.w	((mcz_2p_fm3&$7fff)<<8)&$ff00+(mcz_2p_fm3&$7fff)>>8
00000014 0012                     M 	dc.b	$00,$12
00000016                            	smpsHeaderFM        MCZ_2p_FM4,	$00, $18
00000016                          M 	checkedchannelpointer	mcz_2p_fm4
00000016 0000                     M 	dc.w	((mcz_2p_fm4&$7fff)<<8)&$ff00+(mcz_2p_fm4&$7fff)>>8
00000018 0018                     M 	dc.b	$00,$18
0000001A                            	smpsHeaderFM        MCZ_2p_FM5,	$00, $18
0000001A                          M 	checkedchannelpointer	mcz_2p_fm5
0000001A 0000                     M 	dc.w	((mcz_2p_fm5&$7fff)<<8)&$ff00+(mcz_2p_fm5&$7fff)>>8
0000001C 0018                     M 	dc.b	$00,$18
0000001E                            	smpsHeaderPSG       MCZ_2p_PSG1,	$DC, $05, $00, fTone_0C
0000001E                          M 	checkedchannelpointer	mcz_2p_psg1
0000001E 0000                     M 	dc.w	((mcz_2p_psg1&$7fff)<<8)&$ff00+(mcz_2p_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$dc
00000020 DC                       M 	dc.b	$dc
00000021 05                       M 	dc.b	$05
00000022 00                       M 	dc.b	$00
00000023 0C                       M 	dc.b	ftone_0c
00000024                            	smpsHeaderPSG       MCZ_2p_PSG2,	$E8, $04, $00, fTone_04
00000024                          M 	checkedchannelpointer	mcz_2p_psg2
00000024 0000                     M 	dc.w	((mcz_2p_psg2&$7fff)<<8)&$ff00+(mcz_2p_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$e8
00000026 E8                       M 	dc.b	$e8
00000027 04                       M 	dc.b	$04
00000028 00                       M 	dc.b	$00
00000029 04                       M 	dc.b	ftone_04
0000002A                            	smpsHeaderPSG       MCZ_2p_PSG3,	$DC, $04, $00, fTone_0C
0000002A                          M 	checkedchannelpointer	mcz_2p_psg3
0000002A 0000                     M 	dc.w	((mcz_2p_psg3&$7fff)<<8)&$ff00+(mcz_2p_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$dc
0000002C DC                       M 	dc.b	$dc
0000002D 04                       M 	dc.b	$04
0000002E 00                       M 	dc.b	$00
0000002F 0C                       M 	dc.b	ftone_0c
00000030                            
00000030                            MCZ_2p_Call01:
00000030 B808 BABC                  	dc.b	nG4, $08, nA4, nB4
00000034                            	smpsReturn
00000034 E3                       M 	dc.b	$e3
00000035                            
00000035                            MCZ_2p_Call02:
00000035 B630 E730 E7B6 8018 B808+  	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, nF4, nRst, $18, nG4, $08, nA4, nB4
00000041 B630 E730 E730 E724        	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $24
00000049                            	smpsReturn
00000049 E3                       M 	dc.b	$e3
0000004A                            
0000004A                            MCZ_2p_Call00:
0000004A 8030 80BC 06BD BCB8 BAB6+  	dc.b	nRst, $30, nRst, nB4, $06, nC5, nB4, nG4, nA4, nF4, $0C, nG4
00000056 B3B3 06B6 0CB8             	dc.b	nD4, nD4, $06, nF4, $0C, nG4
0000005C                            	smpsReturn
0000005C E3                       M 	dc.b	$e3
0000005D                            
0000005D                            MCZ_2p_Call03:
0000005D BC30 E730 BD30 E724 BC06+  	dc.b	nB4, $30, smpsNoAttack, $30, nC5, $30, smpsNoAttack, $24, nB4, $06, nC5, nD5
00000069 30E7 30BC 30E7 30BC 30E7+  	dc.b	$30, smpsNoAttack, $30, nB4, $30, smpsNoAttack, $30, nB4, $30, smpsNoAttack, $30, nC5
00000075 30E7 24BC 06BD BF30 E730+  	dc.b	$30, smpsNoAttack, $24, nB4, $06, nC5, nD5, $30, smpsNoAttack, $30, nF5, $30
00000081 E730 C424 C2C1 18C2 24C1+  	dc.b	smpsNoAttack, $30, nG5, $24, nF5, nE5, $18, nF5, $24, nE5, nC5, $18
0000008D                            	smpsReturn
0000008D E3                       M 	dc.b	$e3
0000008E                            
0000008E                            ; FM2 Data
0000008E                            MCZ_2p_FM2:
0000008E 8018                       	dc.b	nRst, $18
00000090                            	smpsSetvoice        $00
00000090                          M 	smpsfmvoice	$00
00000090 EF00                     M 	dc.b	$ef,$00
00000092                            
00000092                            MCZ_2p_Jump05:
00000092 940C 8F92 8F06 9405 9407+  	dc.b	nG1, $0C, nD1, nF1, nD1, $06, nG1, $05, nG1, $07, $06, nD1
0000009E 0C92 8F                    	dc.b	$0C, nF1, nD1
000000A1                            	smpsJump            MCZ_2p_Jump05
000000A1 F6                       M 	dc.b	$f6
000000A2 0000                     M 	dc.w	((mcz_2p_jump05&$7fff)<<8)&$ff00+(mcz_2p_jump05&$7fff)>>8
000000A4                            
000000A4                            ; FM1 Data
000000A4                            MCZ_2p_FM1:
000000A4                            	smpsSetvoice        $02
000000A4                          M 	smpsfmvoice	$02
000000A4 EF02                     M 	dc.b	$ef,$02
000000A6                            	smpsAlterVol        $12
000000A6 E612                     M 	dc.b	$e6,$12
000000A8                            	smpsCall            MCZ_2p_Call01
000000A8 F8                       M 	dc.b	$f8
000000A9 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
000000AB                            
000000AB                            MCZ_2p_Jump04:
000000AB                            	smpsCall            MCZ_2p_Call02
000000AB F8                       M 	dc.b	$f8
000000AC 0000                     M 	dc.w	((mcz_2p_call02&$7fff)<<8)&$ff00+(mcz_2p_call02&$7fff)>>8
000000AE                            	smpsModSet          $24, $01, $03, $04
000000AE F0                       M 	dc.b	$f0
000000AF 2401 0304                M 	dc.b	$24,$01,$03,$04
000000B3 800C                       	dc.b	nRst, $0C
000000B5                            	smpsAlterVol        $E6
000000B5 E6E6                     M 	dc.b	$e6,$e6
000000B7                            	smpsSetvoice        $03
000000B7                          M 	smpsfmvoice	$03
000000B7 EF03                     M 	dc.b	$ef,$03
000000B9                            	smpsCall            MCZ_2p_Call03
000000B9 F8                       M 	dc.b	$f8
000000BA 0000                     M 	dc.w	((mcz_2p_call03&$7fff)<<8)&$ff00+(mcz_2p_call03&$7fff)>>8
000000BC 24BC BF18 E730 E730 C824+  	dc.b	$24, nB4, nD5, $18, smpsNoAttack, $30, smpsNoAttack, $30, nB5, $24, nA5, nG5
000000C8 18C6 24C4 C118 C1C2 0CBF+  	dc.b	$18, nA5, $24, nG5, nE5, $18, nE5, nF5, $0C, nD5, $30, smpsNoAttack
000000D4 0CE7 30E7 2480 0C80 3080+  	dc.b	$0C, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C, nRst, $30, nRst, nRst, nRst
000000E0 BD24 C1C4 18C2 24BF BC18+  	dc.b	nC5, $24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB4, nC5
000000EC 0CBC 30E7 0CE7 30E7 1880+  	dc.b	$0C, nB4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18, nC5
000000F8 24C1 C418 C224 BFBC 18C8+  	dc.b	$24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB5, $30, smpsNoAttack
00000104 30E7 30E7 0C80 0C          	dc.b	$30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $0C
0000010B                            	smpsModOff
0000010B F4                       M 	dc.b	$f4
0000010C                            	smpsAlterVol        $1A
0000010C E61A                     M 	dc.b	$e6,$1a
0000010E                            	smpsSetvoice        $02
0000010E                          M 	smpsfmvoice	$02
0000010E EF02                     M 	dc.b	$ef,$02
00000110 B508 B6B8                  	dc.b	nE4, $08, nF4, nG4
00000114                            	smpsJump            MCZ_2p_Jump04
00000114 F6                       M 	dc.b	$f6
00000115 0000                     M 	dc.w	((mcz_2p_jump04&$7fff)<<8)&$ff00+(mcz_2p_jump04&$7fff)>>8
00000117                            
00000117                            ; PSG1 Data
00000117                            MCZ_2p_PSG1:
00000117                            	smpsAlterNote       $02
00000117                          M 	smpsdetune	$02
00000117 E102                     M 	dc.b	$e1,$02
00000119 801B                       	dc.b	nRst, $1B
0000011B                            
0000011B                            MCZ_2p_Jump08:
0000011B 8030 8080 8080 8080 80     	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst
00000124                            	smpsCall            MCZ_2p_Call03
00000124 F8                       M 	dc.b	$f8
00000125 0000                     M 	dc.w	((mcz_2p_call03&$7fff)<<8)&$ff00+(mcz_2p_call03&$7fff)>>8
00000127 24BC BF18 E730 E730 C824+  	dc.b	$24, nB4, nD5, $18, smpsNoAttack, $30, smpsNoAttack, $30, nB5, $24, nA5, nG5
00000133 18C6 24C4 C118 C1C2 0CBF+  	dc.b	$18, nA5, $24, nG5, nE5, $18, nE5, nF5, $0C, nD5, $30, smpsNoAttack
0000013F 0CE7 30E7 2480 0C80 3080+  	dc.b	$0C, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C, nRst, $30, nRst, nRst, nRst
0000014B BD24 C1C4 18C2 24BF BC18+  	dc.b	nC5, $24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB4, nC5
00000157 0CBC 30E7 0CE7 30E7 1880+  	dc.b	$0C, nB4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18, nC5
00000163 24C1 C418 C224 BFBC 18C8+  	dc.b	$24, nE5, nG5, $18, nF5, $24, nD5, nB4, $18, nB5, $30, smpsNoAttack
0000016F 30E7 30E7 0C80 24          	dc.b	$30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $24
00000176                            	smpsJump            MCZ_2p_Jump08
00000176 F6                       M 	dc.b	$f6
00000177 0000                     M 	dc.w	((mcz_2p_jump08&$7fff)<<8)&$ff00+(mcz_2p_jump08&$7fff)>>8
00000179                            
00000179                            ; PSG3 Data
00000179                            MCZ_2p_PSG3:
00000179 8018                       	dc.b	nRst, $18
0000017B                            
0000017B                            MCZ_2p_Jump07:
0000017B 8030 8080 8080 8080 80     	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst
00000184                            	smpsCall            MCZ_2p_Call03
00000184 F8                       M 	dc.b	$f8
00000185 0000                     M 	dc.w	((mcz_2p_call03&$7fff)<<8)&$ff00+(mcz_2p_call03&$7fff)>>8
00000187 24BC BF18 E730 E730        	dc.b	$24, nB4, nD5, $18, smpsNoAttack, $30, smpsNoAttack, $30
0000018F                            	smpsAlterVol        $FE
0000018F E6FE                     M 	dc.b	$e6,$fe
00000191 C424 C2C1 18C2 24C1 BD18+  	dc.b	nG5, $24, nF5, nE5, $18, nF5, $24, nE5, nC5, $18, nC5, nD5
0000019D 0CBC 30E7 0CE7 30E7 2480+  	dc.b	$0C, nB4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C, nRst
000001A9 3080 8080 BA24 BDC1 18BF+  	dc.b	$30, nRst, nRst, nRst, nA4, $24, nC5, nE5, $18, nD5, $24, nB4
000001B5 B818 B6B3 0CB8 30E7 0CE7+  	dc.b	nG4, $18, nF4, nD4, $0C, nG4, $30, smpsNoAttack, $0C, smpsNoAttack, $30, smpsNoAttack
000001C1 1880 18BA 24BD C118 BF24+  	dc.b	$18, nRst, $18, nA4, $24, nC5, nE5, $18, nD5, $24, nB4, nG4
000001CD 18C4 30E7 30E7 30E7 0C80+  	dc.b	$18, nG5, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $24
000001D8                            	smpsAlterVol        $02
000001D8 E602                     M 	dc.b	$e6,$02
000001DA                            	smpsJump            MCZ_2p_Jump07
000001DA F6                       M 	dc.b	$f6
000001DB 0000                     M 	dc.w	((mcz_2p_jump07&$7fff)<<8)&$ff00+(mcz_2p_jump07&$7fff)>>8
000001DD                            
000001DD                            ; FM4 Data
000001DD                            MCZ_2p_FM4:
000001DD                            	smpsSetvoice        $02
000001DD                          M 	smpsfmvoice	$02
000001DD EF02                     M 	dc.b	$ef,$02
000001DF                            	smpsAlterNote       $02
000001DF                          M 	smpsdetune	$02
000001DF E102                     M 	dc.b	$e1,$02
000001E1                            	smpsPan             panLeft, $00
000001E1 E080                     M 	dc.b	$e0,direction+amsfms
000001E3                            	smpsCall            MCZ_2p_Call01
000001E3 F8                       M 	dc.b	$f8
000001E4 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
000001E6                            
000001E6                            MCZ_2p_Jump03:
000001E6                            	smpsCall            MCZ_2p_Call02
000001E6 F8                       M 	dc.b	$f8
000001E7 0000                     M 	dc.w	((mcz_2p_call02&$7fff)<<8)&$ff00+(mcz_2p_call02&$7fff)>>8
000001E9                            	smpsAlterNote       $00
000001E9                          M 	smpsdetune	$00
000001E9 E100                     M 	dc.b	$e1,$00
000001EB                            	smpsSetvoice        $01
000001EB                          M 	smpsfmvoice	$01
000001EB EF01                     M 	dc.b	$ef,$01
000001ED                            	smpsAlterVol        $F2
000001ED E6F2                     M 	dc.b	$e6,$f2
000001EF                            	smpsAlterPitch      $F4
000001EF                          M 	smpschangetransposition	$f4
000001EF E9F4                     M 	dc.b	$e9,$f4
000001F1 AE0C B006 8030 802A 8030+  	dc.b	nA3, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
000001FD B10C B006 8030 802A 8030+  	dc.b	nC4, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
00000209 AE0C B006 8030 802A 8030+  	dc.b	nA3, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
00000215 B10C B006 8030 802A 8030+  	dc.b	nC4, $0C, nB3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nRst
00000221 80B8 24B6 B518 B624 B5B1+  	dc.b	nRst, nG4, $24, nF4, nE4, $18, nF4, $24, nE4, nC4, $18, $24
0000022D B0B3 18E7 30E7 30BC 24BA+  	dc.b	nB3, nD4, $18, smpsNoAttack, $30, smpsNoAttack, $30, nB4, $24, nA4, nG4, $18
00000239 BA24 B8B5 18B5 B60C B324   	dc.b	nA4, $24, nG4, nE4, $18, nE4, nF4, $0C, nD4, $24
00000243                            	smpsAlterVol        $0E
00000243 E60E                     M 	dc.b	$e6,$0e
00000245                            	smpsAlterPitch      $0C
00000245                          M 	smpschangetransposition	$0c
00000245 E90C                     M 	dc.b	$e9,$0c
00000247                            	smpsSetvoice        $02
00000247                          M 	smpsfmvoice	$02
00000247 EF02                     M 	dc.b	$ef,$02
00000249                            	smpsCall            MCZ_2p_Call01
00000249 F8                       M 	dc.b	$f8
0000024A 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
0000024C B630 E730 E730 E718 8018   	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18
00000256                            	smpsAlterVol        $F2
00000256 E6F2                     M 	dc.b	$e6,$f2
00000258                            	smpsAlterPitch      $F4
00000258                          M 	smpschangetransposition	$f4
00000258 E9F4                     M 	dc.b	$e9,$f4
0000025A                            	smpsSetvoice        $01
0000025A                          M 	smpsfmvoice	$01
0000025A EF01                     M 	dc.b	$ef,$01
0000025C 8030 8080 8024 B806 B6B8+  	dc.b	nRst, $30, nRst, nRst, nRst, $24, nG4, $06, nF4, nG4, $0C, nG4
00000268 B606 B80C 0680 2406 B6B8+  	dc.b	nF4, $06, nG4, $0C, $06, nRst, $24, $06, nF4, nG4, $0C
00000273 B8B6 06B8 0C06 8030 8030+  	dc.b	nG4, nF4, $06, nG4, $0C, $06, nRst, $30, nRst, $30, nRst, nRst
0000027F 8024 06B6 B80C B8B6 06B8+  	dc.b	nRst, $24, $06, nF4, nG4, $0C, nG4, nF4, $06, nG4, $0C
0000028A 0680 2406 B6B8 0CB8 B606+  	dc.b	$06, nRst, $24, $06, nF4, nG4, $0C, nG4, nF4, $06, nG4
00000295 0C06 8018                  	dc.b	$0C, $06, nRst, $18
00000299                            	smpsAlterVol        $0E
00000299 E60E                     M 	dc.b	$e6,$0e
0000029B                            	smpsAlterPitch      $0C
0000029B                          M 	smpschangetransposition	$0c
0000029B E90C                     M 	dc.b	$e9,$0c
0000029D                            	smpsSetvoice        $02
0000029D                          M 	smpsfmvoice	$02
0000029D EF02                     M 	dc.b	$ef,$02
0000029F                            	smpsCall            MCZ_2p_Call01
0000029F F8                       M 	dc.b	$f8
000002A0 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
000002A2                            	smpsJump            MCZ_2p_Jump03
000002A2 F6                       M 	dc.b	$f6
000002A3 0000                     M 	dc.w	((mcz_2p_jump03&$7fff)<<8)&$ff00+(mcz_2p_jump03&$7fff)>>8
000002A5                            
000002A5                            ; FM5 Data
000002A5                            MCZ_2p_FM5:
000002A5 8001                       	dc.b	nRst, $01
000002A7                            	smpsSetvoice        $02
000002A7                          M 	smpsfmvoice	$02
000002A7 EF02                     M 	dc.b	$ef,$02
000002A9                            	smpsAlterNote       $FE
000002A9                          M 	smpsdetune	$fe
000002A9 E1FE                     M 	dc.b	$e1,$fe
000002AB                            	smpsPan             panRight, $00
000002AB E040                     M 	dc.b	$e0,direction+amsfms
000002AD                            	smpsCall            MCZ_2p_Call01
000002AD F8                       M 	dc.b	$f8
000002AE 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
000002B0                            
000002B0                            MCZ_2p_Jump02:
000002B0                            	smpsCall            MCZ_2p_Call02
000002B0 F8                       M 	dc.b	$f8
000002B1 0000                     M 	dc.w	((mcz_2p_call02&$7fff)<<8)&$ff00+(mcz_2p_call02&$7fff)>>8
000002B3                            	smpsAlterNote       $FA
000002B3                          M 	smpsdetune	$fa
000002B3 E1FA                     M 	dc.b	$e1,$fa
000002B5                            	smpsAlterVol        $F2
000002B5 E6F2                     M 	dc.b	$e6,$f2
000002B7                            	smpsAlterPitch      $F4
000002B7                          M 	smpschangetransposition	$f4
000002B7 E9F4                     M 	dc.b	$e9,$f4
000002B9                            	smpsSetvoice        $01
000002B9                          M 	smpsfmvoice	$01
000002B9 EF01                     M 	dc.b	$ef,$01
000002BB AA0B AC06 8030 802A 8030+  	dc.b	nF3, $0B, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
000002C7 AE0C AC06 8030 802A 8030+  	dc.b	nA3, $0C, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
000002D3 AA0C AC06 8030 802A 8030+  	dc.b	nF3, $0C, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, $24
000002DF AE0C AC06 8030 802A 8030+  	dc.b	nA3, $0C, nG3, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nRst
000002EB 80B8 24B6 B518 B624 B5B1+  	dc.b	nRst, nG4, $24, nF4, nE4, $18, nF4, $24, nE4, nC4, $18, $24
000002F7 B0B3 18E7 30E7 30B8 24B6+  	dc.b	nB3, nD4, $18, smpsNoAttack, $30, smpsNoAttack, $30, nG4, $24, nF4, nE4, $18
00000303 B624 B5B1 18B1 B30C B024   	dc.b	nF4, $24, nE4, nC4, $18, nC4, nD4, $0C, nB3, $24
0000030D                            	smpsAlterVol        $0E
0000030D E60E                     M 	dc.b	$e6,$0e
0000030F                            	smpsAlterPitch      $0C
0000030F                          M 	smpschangetransposition	$0c
0000030F E90C                     M 	dc.b	$e9,$0c
00000311                            	smpsSetvoice        $02
00000311                          M 	smpsfmvoice	$02
00000311 EF02                     M 	dc.b	$ef,$02
00000313                            	smpsCall            MCZ_2p_Call01
00000313 F8                       M 	dc.b	$f8
00000314 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
00000316 B630 E730 E730 E718 8018   	dc.b	nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $18
00000320                            	smpsAlterVol        $F2
00000320 E6F2                     M 	dc.b	$e6,$f2
00000322                            	smpsAlterPitch      $F4
00000322                          M 	smpschangetransposition	$f4
00000322 E9F4                     M 	dc.b	$e9,$f4
00000324                            	smpsSetvoice        $01
00000324                          M 	smpsfmvoice	$01
00000324 EF01                     M 	dc.b	$ef,$01
00000326 8030 8030 8030 8024 B306+  	dc.b	nRst, $30, nRst, $30, nRst, $30, nRst, $24, nD4, $06, nC4, nD4
00000332 0CB3 B106 B30C 0680 2406+  	dc.b	$0C, nD4, nC4, $06, nD4, $0C, $06, nRst, $24, $06, nC4
0000033D B30C B3B1 06B3 0C06 8030+  	dc.b	nD4, $0C, nD4, nC4, $06, nD4, $0C, $06, nRst, $30, nRst, $30
00000349 8080 8024 06B1 B30C B3B1+  	dc.b	nRst, nRst, nRst, $24, $06, nC4, nD4, $0C, nD4, nC4, $06
00000354 B30C 0680 2406 B1B3 0CB3+  	dc.b	nD4, $0C, $06, nRst, $24, $06, nC4, nD4, $0C, nD4, nD4
0000035F 06B1 0C06 8019             	dc.b	$06, nC4, $0C, $06, nRst, $19
00000365                            	smpsAlterVol        $0E
00000365 E60E                     M 	dc.b	$e6,$0e
00000367                            	smpsAlterPitch      $0C
00000367                          M 	smpschangetransposition	$0c
00000367 E90C                     M 	dc.b	$e9,$0c
00000369                            	smpsSetvoice        $02
00000369                          M 	smpsfmvoice	$02
00000369 EF02                     M 	dc.b	$ef,$02
0000036B                            	smpsCall            MCZ_2p_Call01
0000036B F8                       M 	dc.b	$f8
0000036C 0000                     M 	dc.w	((mcz_2p_call01&$7fff)<<8)&$ff00+(mcz_2p_call01&$7fff)>>8
0000036E                            	smpsJump            MCZ_2p_Jump02
0000036E F6                       M 	dc.b	$f6
0000036F 0000                     M 	dc.w	((mcz_2p_jump02&$7fff)<<8)&$ff00+(mcz_2p_jump02&$7fff)>>8
00000371                            
00000371                            ; FM3 Data
00000371                            MCZ_2p_FM3:
00000371                            	smpsSetvoice        $04
00000371                          M 	smpsfmvoice	$04
00000371 EF04                     M 	dc.b	$ef,$04
00000373 8018                       	dc.b	nRst, $18
00000375                            
00000375                            MCZ_2p_Jump01:
00000375                            	smpsAlterVol        $FC
00000375 E6FC                     M 	dc.b	$e6,$fc
00000377                            	smpsCall            MCZ_2p_Call00
00000377 F8                       M 	dc.b	$f8
00000378 0000                     M 	dc.w	((mcz_2p_call00&$7fff)<<8)&$ff00+(mcz_2p_call00&$7fff)>>8
0000037A                            	smpsCall            MCZ_2p_Call00
0000037A F8                       M 	dc.b	$f8
0000037B 0000                     M 	dc.w	((mcz_2p_call00&$7fff)<<8)&$ff00+(mcz_2p_call00&$7fff)>>8
0000037D                            	smpsAlterVol        $04
0000037D E604                     M 	dc.b	$e6,$04
0000037F                            
0000037F                            MCZ_2p_Loop00:
0000037F BC0C BCBC 0680 12BA 0CBA+  	dc.b	nB4, $0C, nB4, nB4, $06, nRst, $12, nA4, $0C, nA4, nB4, $06
0000038B 8012 0C06 BC0C BCBC 06BA   	dc.b	nRst, $12, $0C, $06, nB4, $0C, nB4, nB4, $06, nA4
00000395 0CBD BC06 8012             	dc.b	$0C, nC5, nB4, $06, nRst, $12
0000039B                            	smpsLoop            $00, $09, MCZ_2p_Loop00
0000039B F7                       M 	dc.b	$f7
0000039C 0009                     M 	dc.b	index,loops
0000039E 0000                     M 	dc.w	((mcz_2p_loop00&$7fff)<<8)&$ff00+(mcz_2p_loop00&$7fff)>>8
000003A0                            
000003A0                            MCZ_2p_Loop01:
000003A0 BA0C BABA 0680 12B8 0CB8+  	dc.b	nA4, $0C, nA4, nA4, $06, nRst, $12, nG4, $0C, nG4, nA4, $06
000003AC 8012 B80C 06B8 0CB8 B806+  	dc.b	nRst, $12, nG4, $0C, $06, nG4, $0C, nG4, nG4, $06, nG4, $0C
000003B8 B5B8 0680 12BC 0CBC BC06+  	dc.b	nE4, nG4, $06, nRst, $12, nB4, $0C, nB4, nB4, $06, nRst, $12
000003C4 BA0C BABC 0680 120C 06BC   	dc.b	nA4, $0C, nA4, nB4, $06, nRst, $12, $0C, $06, nB4
000003CE 0CBC BC06 BA0C BDBC 0680+  	dc.b	$0C, nB4, nB4, $06, nA4, $0C, nC5, nB4, $06, nRst, $12
000003D9                            	smpsLoop            $00, $02, MCZ_2p_Loop01
000003D9 F7                       M 	dc.b	$f7
000003DA 0002                     M 	dc.b	index,loops
000003DC 0000                     M 	dc.w	((mcz_2p_loop01&$7fff)<<8)&$ff00+(mcz_2p_loop01&$7fff)>>8
000003DE                            	smpsJump            MCZ_2p_Jump01
000003DE F6                       M 	dc.b	$f6
000003DF 0000                     M 	dc.w	((mcz_2p_jump01&$7fff)<<8)&$ff00+(mcz_2p_jump01&$7fff)>>8
000003E1                            
000003E1                            ; PSG2 Data
000003E1                            MCZ_2p_PSG2:
000003E1                            	smpsNoteFill        $08
000003E1 E808                     M 	dc.b	$e8,$08
000003E3 8018                       	dc.b	nRst, $18
000003E5                            
000003E5                            MCZ_2p_Jump06:
000003E5                            	smpsCall            MCZ_2p_Call00
000003E5 F8                       M 	dc.b	$f8
000003E6 0000                     M 	dc.w	((mcz_2p_call00&$7fff)<<8)&$ff00+(mcz_2p_call00&$7fff)>>8
000003E8                            	smpsCall            MCZ_2p_Call00
000003E8 F8                       M 	dc.b	$f8
000003E9 0000                     M 	dc.w	((mcz_2p_call00&$7fff)<<8)&$ff00+(mcz_2p_call00&$7fff)>>8
000003EB                            
000003EB                            MCZ_2p_Loop02:
000003EB B80C B8B8 0680 12B6 0CB6+  	dc.b	nG4, $0C, nG4, nG4, $06, nRst, $12, nF4, $0C, nF4, nG4, $06
000003F7 8012 0C06 B80C B8B8 06B6   	dc.b	nRst, $12, $0C, $06, nG4, $0C, nG4, nG4, $06, nF4
00000401 0CBA B806 8012             	dc.b	$0C, nA4, nG4, $06, nRst, $12
00000407                            	smpsLoop            $00, $09, MCZ_2p_Loop02
00000407 F7                       M 	dc.b	$f7
00000408 0009                     M 	dc.b	index,loops
0000040A 0000                     M 	dc.w	((mcz_2p_loop02&$7fff)<<8)&$ff00+(mcz_2p_loop02&$7fff)>>8
0000040C                            
0000040C                            MCZ_2p_Loop03:
0000040C B60C B6B6 0680 12B5 0CB5+  	dc.b	nF4, $0C, nF4, nF4, $06, nRst, $12, nE4, $0C, nE4, nF4, $06
00000418 8012 B50C 06B5 0CB5 B506+  	dc.b	nRst, $12, nE4, $0C, $06, nE4, $0C, nE4, nE4, $06, nE4, $0C
00000424 B1B5 0680 12B8 0CB8 B806+  	dc.b	nC4, nE4, $06, nRst, $12, nG4, $0C, nG4, nG4, $06, nRst, $12
00000430 B60C B6B8 0680 120C 06B8   	dc.b	nF4, $0C, nF4, nG4, $06, nRst, $12, $0C, $06, nG4
0000043A 0CB8 B806 B60C BAB8 0680+  	dc.b	$0C, nG4, nG4, $06, nF4, $0C, nA4, nG4, $06, nRst, $12
00000445                            	smpsLoop            $00, $02, MCZ_2p_Loop03
00000445 F7                       M 	dc.b	$f7
00000446 0002                     M 	dc.b	index,loops
00000448 0000                     M 	dc.w	((mcz_2p_loop03&$7fff)<<8)&$ff00+(mcz_2p_loop03&$7fff)>>8
0000044A                            	smpsJump            MCZ_2p_Jump06
0000044A F6                       M 	dc.b	$f6
0000044B 0000                     M 	dc.w	((mcz_2p_jump06&$7fff)<<8)&$ff00+(mcz_2p_jump06&$7fff)>>8
0000044D                            
0000044D                            ; DAC Data
0000044D                            MCZ_2p_DAC:
0000044D 8018                       	dc.b	nRst, $18
0000044F                            
0000044F                            MCZ_2p_Jump00:
0000044F 810C 8F06 9082 0C90 0691+  	dc.b	dKick, $0C, dHiClap, $06, dMidClap, dSnare, $0C, dMidClap, $06, dLowClap, dKick, $0C
0000045B 8F06 9182 0C8F 0691        	dc.b	dHiClap, $06, dLowClap, dSnare, $0C, dHiClap, $06, dLowClap
00000463                            	smpsJump            MCZ_2p_Jump00
00000463 F6                       M 	dc.b	$f6
00000464 0000                     M 	dc.w	((mcz_2p_jump00&$7fff)<<8)&$ff00+(mcz_2p_jump00&$7fff)>>8
00000466                            
00000466                            MCZ_2p_Voices:
00000466                            ;	Voice $00
00000466                            ;	$3A
00000466                            ;	$69, $70, $50, $60, 	$1C, $18, $1A, $18, 	$10, $0C, $02, $09
00000466                            ;	$08, $06, $06, $03, 	$F9, $56, $06, $06, 	$28, $15, $14, $00
00000466                            	smpsVcAlgorithm     $02
00000466 =00000002                M vcalgorithm	set	val
00000466                            	smpsVcFeedback      $07
00000466 =00000007                M vcfeedback	set	val
00000466                            	smpsVcUnusedBits    $00
00000466 =00000000                M vcunusedbits	set	val
00000466 =00000000                M vcd1r1unk	set	0
00000466 =00000000                M vcd1r2unk	set	0
00000466 =00000000                M vcd1r3unk	set	0
00000466 =00000000                M vcd1r4unk	set	0
00000466                            	smpsVcDetune        $06, $05, $07, $06
00000466 =00000006                M vcdt1	set	op1
00000466 =00000005                M vcdt2	set	op2
00000466 =00000007                M vcdt3	set	op3
00000466 =00000006                M vcdt4	set	op4
00000466                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000466 =00000000                M vccf1	set	op1
00000466 =00000000                M vccf2	set	op2
00000466 =00000000                M vccf3	set	op3
00000466 =00000009                M vccf4	set	op4
00000466                            	smpsVcRateScale     $00, $00, $00, $00
00000466 =00000000                M vcrs1	set	op1
00000466 =00000000                M vcrs2	set	op2
00000466 =00000000                M vcrs3	set	op3
00000466 =00000000                M vcrs4	set	op4
00000466                            	smpsVcAttackRate    $18, $1A, $18, $1C
00000466 =00000018                M vcar1	set	op1
00000466 =0000001A                M vcar2	set	op2
00000466 =00000018                M vcar3	set	op3
00000466 =0000001C                M vcar4	set	op4
00000466                            	smpsVcAmpMod        $00, $00, $00, $00
00000466 =00000000                M vcam1	set	op1<<7
00000466 =00000000                M vcam2	set	op2<<7
00000466 =00000000                M vcam3	set	op3<<7
00000466 =00000000                M vcam4	set	op4<<7
00000466                            	smpsVcDecayRate1    $09, $02, $0C, $10
00000466 =00000009                M vcd1r1	set	op1
00000466 =00000002                M vcd1r2	set	op2
00000466 =0000000C                M vcd1r3	set	op3
00000466 =00000010                M vcd1r4	set	op4
00000466                            	smpsVcDecayRate2    $03, $06, $06, $08
00000466 =00000003                M vcd2r1	set	op1
00000466 =00000006                M vcd2r2	set	op2
00000466 =00000006                M vcd2r3	set	op3
00000466 =00000008                M vcd2r4	set	op4
00000466                            	smpsVcDecayLevel    $00, $00, $05, $0F
00000466 =00000000                M vcdl1	set	op1
00000466 =00000000                M vcdl2	set	op2
00000466 =00000005                M vcdl3	set	op3
00000466 =0000000F                M vcdl4	set	op4
00000466                            	smpsVcReleaseRate   $06, $06, $06, $09
00000466 =00000006                M vcrr1	set	op1
00000466 =00000006                M vcrr2	set	op2
00000466 =00000006                M vcrr3	set	op3
00000466 =00000009                M vcrr4	set	op4
00000466                            	smpsVcTotalLevel    $00, $14, $15, $28
00000466 =00000000                M vctl1	set	op1
00000466 =00000014                M vctl2	set	op2
00000466 =00000015                M vctl3	set	op3
00000466 =00000028                M vctl4	set	op4
00000466 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000467 =00000000                M vctlmask4	set	0
00000467 =00000000                M vctlmask3	set	0
00000467 =00000000                M vctlmask2	set	0
00000467 =00000000                M vctlmask1	set	0
00000467 6950 7060                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000046B 1C1A 1818                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000046F 1002 0C09                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000473 0806 0603                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000477 F906 5606                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000047B 2814 1500                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000047F                            
0000047F                            ;	Voice $01
0000047F                            ;	$3A
0000047F                            ;	$02, $04, $02, $02, 	$8E, $8E, $8D, $53, 	$0E, $0B, $0E, $0D
0000047F                            ;	$01, $00, $00, $00, 	$13, $FA, $13, $0A, 	$19, $19, $29, $00
0000047F                            	smpsVcAlgorithm     $02
0000047F =00000002                M vcalgorithm	set	val
0000047F                            	smpsVcFeedback      $07
0000047F =00000007                M vcfeedback	set	val
0000047F                            	smpsVcUnusedBits    $00
0000047F =00000000                M vcunusedbits	set	val
0000047F =00000000                M vcd1r1unk	set	0
0000047F =00000000                M vcd1r2unk	set	0
0000047F =00000000                M vcd1r3unk	set	0
0000047F =00000000                M vcd1r4unk	set	0
0000047F                            	smpsVcDetune        $00, $00, $00, $00
0000047F =00000000                M vcdt1	set	op1
0000047F =00000000                M vcdt2	set	op2
0000047F =00000000                M vcdt3	set	op3
0000047F =00000000                M vcdt4	set	op4
0000047F                            	smpsVcCoarseFreq    $02, $02, $04, $02
0000047F =00000002                M vccf1	set	op1
0000047F =00000002                M vccf2	set	op2
0000047F =00000004                M vccf3	set	op3
0000047F =00000002                M vccf4	set	op4
0000047F                            	smpsVcRateScale     $01, $02, $02, $02
0000047F =00000001                M vcrs1	set	op1
0000047F =00000002                M vcrs2	set	op2
0000047F =00000002                M vcrs3	set	op3
0000047F =00000002                M vcrs4	set	op4
0000047F                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0000047F =00000013                M vcar1	set	op1
0000047F =0000000D                M vcar2	set	op2
0000047F =0000000E                M vcar3	set	op3
0000047F =0000000E                M vcar4	set	op4
0000047F                            	smpsVcAmpMod        $00, $00, $00, $00
0000047F =00000000                M vcam1	set	op1<<7
0000047F =00000000                M vcam2	set	op2<<7
0000047F =00000000                M vcam3	set	op3<<7
0000047F =00000000                M vcam4	set	op4<<7
0000047F                            	smpsVcDecayRate1    $0D, $0E, $0B, $0E
0000047F =0000000D                M vcd1r1	set	op1
0000047F =0000000E                M vcd1r2	set	op2
0000047F =0000000B                M vcd1r3	set	op3
0000047F =0000000E                M vcd1r4	set	op4
0000047F                            	smpsVcDecayRate2    $00, $00, $00, $01
0000047F =00000000                M vcd2r1	set	op1
0000047F =00000000                M vcd2r2	set	op2
0000047F =00000000                M vcd2r3	set	op3
0000047F =00000001                M vcd2r4	set	op4
0000047F                            	smpsVcDecayLevel    $00, $01, $0F, $01
0000047F =00000000                M vcdl1	set	op1
0000047F =00000001                M vcdl2	set	op2
0000047F =0000000F                M vcdl3	set	op3
0000047F =00000001                M vcdl4	set	op4
0000047F                            	smpsVcReleaseRate   $0A, $03, $0A, $03
0000047F =0000000A                M vcrr1	set	op1
0000047F =00000003                M vcrr2	set	op2
0000047F =0000000A                M vcrr3	set	op3
0000047F =00000003                M vcrr4	set	op4
0000047F                            	smpsVcTotalLevel    $00, $29, $19, $19
0000047F =00000000                M vctl1	set	op1
0000047F =00000029                M vctl2	set	op2
0000047F =00000019                M vctl3	set	op3
0000047F =00000019                M vctl4	set	op4
0000047F 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000480 =00000000                M vctlmask4	set	0
00000480 =00000000                M vctlmask3	set	0
00000480 =00000000                M vctlmask2	set	0
00000480 =00000000                M vctlmask1	set	0
00000480 0202 0402                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000484 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000488 0E0E 0B0D                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000048C 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000490 1313 FA0A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000494 1929 1900                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000498                            
00000498                            ;	Voice $02
00000498                            ;	$3D
00000498                            ;	$00, $01, $02, $01, 	$4C, $0F, $50, $12, 	$0C, $02, $00, $05
00000498                            ;	$01, $00, $00, $00, 	$28, $29, $2A, $19, 	$1A, $00, $06, $00
00000498                            	smpsVcAlgorithm     $05
00000498 =00000005                M vcalgorithm	set	val
00000498                            	smpsVcFeedback      $07
00000498 =00000007                M vcfeedback	set	val
00000498                            	smpsVcUnusedBits    $00
00000498 =00000000                M vcunusedbits	set	val
00000498 =00000000                M vcd1r1unk	set	0
00000498 =00000000                M vcd1r2unk	set	0
00000498 =00000000                M vcd1r3unk	set	0
00000498 =00000000                M vcd1r4unk	set	0
00000498                            	smpsVcDetune        $00, $00, $00, $00
00000498 =00000000                M vcdt1	set	op1
00000498 =00000000                M vcdt2	set	op2
00000498 =00000000                M vcdt3	set	op3
00000498 =00000000                M vcdt4	set	op4
00000498                            	smpsVcCoarseFreq    $01, $02, $01, $00
00000498 =00000001                M vccf1	set	op1
00000498 =00000002                M vccf2	set	op2
00000498 =00000001                M vccf3	set	op3
00000498 =00000000                M vccf4	set	op4
00000498                            	smpsVcRateScale     $00, $01, $00, $01
00000498 =00000000                M vcrs1	set	op1
00000498 =00000001                M vcrs2	set	op2
00000498 =00000000                M vcrs3	set	op3
00000498 =00000001                M vcrs4	set	op4
00000498                            	smpsVcAttackRate    $12, $10, $0F, $0C
00000498 =00000012                M vcar1	set	op1
00000498 =00000010                M vcar2	set	op2
00000498 =0000000F                M vcar3	set	op3
00000498 =0000000C                M vcar4	set	op4
00000498                            	smpsVcAmpMod        $00, $00, $00, $00
00000498 =00000000                M vcam1	set	op1<<7
00000498 =00000000                M vcam2	set	op2<<7
00000498 =00000000                M vcam3	set	op3<<7
00000498 =00000000                M vcam4	set	op4<<7
00000498                            	smpsVcDecayRate1    $05, $00, $02, $0C
00000498 =00000005                M vcd1r1	set	op1
00000498 =00000000                M vcd1r2	set	op2
00000498 =00000002                M vcd1r3	set	op3
00000498 =0000000C                M vcd1r4	set	op4
00000498                            	smpsVcDecayRate2    $00, $00, $00, $01
00000498 =00000000                M vcd2r1	set	op1
00000498 =00000000                M vcd2r2	set	op2
00000498 =00000000                M vcd2r3	set	op3
00000498 =00000001                M vcd2r4	set	op4
00000498                            	smpsVcDecayLevel    $01, $02, $02, $02
00000498 =00000001                M vcdl1	set	op1
00000498 =00000002                M vcdl2	set	op2
00000498 =00000002                M vcdl3	set	op3
00000498 =00000002                M vcdl4	set	op4
00000498                            	smpsVcReleaseRate   $09, $0A, $09, $08
00000498 =00000009                M vcrr1	set	op1
00000498 =0000000A                M vcrr2	set	op2
00000498 =00000009                M vcrr3	set	op3
00000498 =00000008                M vcrr4	set	op4
00000498                            	smpsVcTotalLevel    $00, $06, $00, $1A
00000498 =00000000                M vctl1	set	op1
00000498 =00000006                M vctl2	set	op2
00000498 =00000000                M vctl3	set	op3
00000498 =0000001A                M vctl4	set	op4
00000498 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000499 =00000000                M vctlmask4	set	0
00000499 =00000000                M vctlmask3	set	0
00000499 =00000000                M vctlmask2	set	0
00000499 =00000000                M vctlmask1	set	0
00000499 0002 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000049D 4C50 0F12                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004A1 0C00 0205                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004A5 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004A9 282A 2919                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004AD 1A06 0000                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004B1                            
000004B1                            ;	Voice $03
000004B1                            ;	$06
000004B1                            ;	$62, $23, $13, $71, 	$0D, $0D, $6D, $0E, 	$09, $06, $06, $06
000004B1                            ;	$00, $00, $00, $00, 	$1F, $2F, $2F, $2F, 	$10, $94, $97, $80
000004B1                            	smpsVcAlgorithm     $06
000004B1 =00000006                M vcalgorithm	set	val
000004B1                            	smpsVcFeedback      $00
000004B1 =00000000                M vcfeedback	set	val
000004B1                            	smpsVcUnusedBits    $00
000004B1 =00000000                M vcunusedbits	set	val
000004B1 =00000000                M vcd1r1unk	set	0
000004B1 =00000000                M vcd1r2unk	set	0
000004B1 =00000000                M vcd1r3unk	set	0
000004B1 =00000000                M vcd1r4unk	set	0
000004B1                            	smpsVcDetune        $07, $01, $02, $06
000004B1 =00000007                M vcdt1	set	op1
000004B1 =00000001                M vcdt2	set	op2
000004B1 =00000002                M vcdt3	set	op3
000004B1 =00000006                M vcdt4	set	op4
000004B1                            	smpsVcCoarseFreq    $01, $03, $03, $02
000004B1 =00000001                M vccf1	set	op1
000004B1 =00000003                M vccf2	set	op2
000004B1 =00000003                M vccf3	set	op3
000004B1 =00000002                M vccf4	set	op4
000004B1                            	smpsVcRateScale     $00, $01, $00, $00
000004B1 =00000000                M vcrs1	set	op1
000004B1 =00000001                M vcrs2	set	op2
000004B1 =00000000                M vcrs3	set	op3
000004B1 =00000000                M vcrs4	set	op4
000004B1                            	smpsVcAttackRate    $0E, $2D, $0D, $0D
000004B1 =0000000E                M vcar1	set	op1
000004B1 =0000002D                M vcar2	set	op2
000004B1 =0000000D                M vcar3	set	op3
000004B1 =0000000D                M vcar4	set	op4
000004B1                            	smpsVcAmpMod        $00, $00, $00, $00
000004B1 =00000000                M vcam1	set	op1<<7
000004B1 =00000000                M vcam2	set	op2<<7
000004B1 =00000000                M vcam3	set	op3<<7
000004B1 =00000000                M vcam4	set	op4<<7
000004B1                            	smpsVcDecayRate1    $06, $06, $06, $09
000004B1 =00000006                M vcd1r1	set	op1
000004B1 =00000006                M vcd1r2	set	op2
000004B1 =00000006                M vcd1r3	set	op3
000004B1 =00000009                M vcd1r4	set	op4
000004B1                            	smpsVcDecayRate2    $00, $00, $00, $00
000004B1 =00000000                M vcd2r1	set	op1
000004B1 =00000000                M vcd2r2	set	op2
000004B1 =00000000                M vcd2r3	set	op3
000004B1 =00000000                M vcd2r4	set	op4
000004B1                            	smpsVcDecayLevel    $02, $02, $02, $01
000004B1 =00000002                M vcdl1	set	op1
000004B1 =00000002                M vcdl2	set	op2
000004B1 =00000002                M vcdl3	set	op3
000004B1 =00000001                M vcdl4	set	op4
000004B1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004B1 =0000000F                M vcrr1	set	op1
000004B1 =0000000F                M vcrr2	set	op2
000004B1 =0000000F                M vcrr3	set	op3
000004B1 =0000000F                M vcrr4	set	op4
000004B1                            	smpsVcTotalLevel    $80, $97, $94, $10
000004B1 =00000080                M vctl1	set	op1
000004B1 =00000097                M vctl2	set	op2
000004B1 =00000094                M vctl3	set	op3
000004B1 =00000010                M vctl4	set	op4
000004B1 06                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004B2 =00000000                M vctlmask4	set	0
000004B2 =00000000                M vctlmask3	set	0
000004B2 =00000000                M vctlmask2	set	0
000004B2 =00000000                M vctlmask1	set	0
000004B2 6213 2371                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004B6 0D6D 0D0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004BA 0906 0606                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004BE 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004C2 1F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004C6 1097 9480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004CA                            
000004CA                            ;	Voice $04
000004CA                            ;	$2C
000004CA                            ;	$71, $71, $31, $31, 	$1F, $16, $1F, $16, 	$00, $0F, $00, $0F
000004CA                            ;	$00, $0F, $00, $0F, 	$00, $FA, $00, $FA, 	$15, $00, $14, $00
000004CA                            	smpsVcAlgorithm     $04
000004CA =00000004                M vcalgorithm	set	val
000004CA                            	smpsVcFeedback      $05
000004CA =00000005                M vcfeedback	set	val
000004CA                            	smpsVcUnusedBits    $00
000004CA =00000000                M vcunusedbits	set	val
000004CA =00000000                M vcd1r1unk	set	0
000004CA =00000000                M vcd1r2unk	set	0
000004CA =00000000                M vcd1r3unk	set	0
000004CA =00000000                M vcd1r4unk	set	0
000004CA                            	smpsVcDetune        $03, $03, $07, $07
000004CA =00000003                M vcdt1	set	op1
000004CA =00000003                M vcdt2	set	op2
000004CA =00000007                M vcdt3	set	op3
000004CA =00000007                M vcdt4	set	op4
000004CA                            	smpsVcCoarseFreq    $01, $01, $01, $01
000004CA =00000001                M vccf1	set	op1
000004CA =00000001                M vccf2	set	op2
000004CA =00000001                M vccf3	set	op3
000004CA =00000001                M vccf4	set	op4
000004CA                            	smpsVcRateScale     $00, $00, $00, $00
000004CA =00000000                M vcrs1	set	op1
000004CA =00000000                M vcrs2	set	op2
000004CA =00000000                M vcrs3	set	op3
000004CA =00000000                M vcrs4	set	op4
000004CA                            	smpsVcAttackRate    $16, $1F, $16, $1F
000004CA =00000016                M vcar1	set	op1
000004CA =0000001F                M vcar2	set	op2
000004CA =00000016                M vcar3	set	op3
000004CA =0000001F                M vcar4	set	op4
000004CA                            	smpsVcAmpMod        $00, $00, $00, $00
000004CA =00000000                M vcam1	set	op1<<7
000004CA =00000000                M vcam2	set	op2<<7
000004CA =00000000                M vcam3	set	op3<<7
000004CA =00000000                M vcam4	set	op4<<7
000004CA                            	smpsVcDecayRate1    $0F, $00, $0F, $00
000004CA =0000000F                M vcd1r1	set	op1
000004CA =00000000                M vcd1r2	set	op2
000004CA =0000000F                M vcd1r3	set	op3
000004CA =00000000                M vcd1r4	set	op4
000004CA                            	smpsVcDecayRate2    $0F, $00, $0F, $00
000004CA =0000000F                M vcd2r1	set	op1
000004CA =00000000                M vcd2r2	set	op2
000004CA =0000000F                M vcd2r3	set	op3
000004CA =00000000                M vcd2r4	set	op4
000004CA                            	smpsVcDecayLevel    $0F, $00, $0F, $00
000004CA =0000000F                M vcdl1	set	op1
000004CA =00000000                M vcdl2	set	op2
000004CA =0000000F                M vcdl3	set	op3
000004CA =00000000                M vcdl4	set	op4
000004CA                            	smpsVcReleaseRate   $0A, $00, $0A, $00
000004CA =0000000A                M vcrr1	set	op1
000004CA =00000000                M vcrr2	set	op2
000004CA =0000000A                M vcrr3	set	op3
000004CA =00000000                M vcrr4	set	op4
000004CA                            	smpsVcTotalLevel    $00, $14, $00, $15
000004CA =00000000                M vctl1	set	op1
000004CA =00000014                M vctl2	set	op2
000004CA =00000000                M vctl3	set	op3
000004CA =00000015                M vctl4	set	op4
000004CA 2C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004CB =00000000                M vctlmask4	set	0
000004CB =00000000                M vctlmask3	set	0
000004CB =00000000                M vctlmask2	set	0
000004CB =00000000                M vctlmask1	set	0
000004CB 7131 7131                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004CF 1F1F 1616                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004D3 0000 0F0F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004D7 0000 0F0F                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004DB 0000 FAFA                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004DF 1514 0000                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004E3                            
000004E3                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music11:	section	org($1380),file("sound/music/compressed/ARZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/ARZ.asm"	; include the actual music file for assembly
00000000                            ARZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     ARZ_Voices
00000000 0000                     M 	dc.w	((arz_voices&$7fff)<<8)&$ff00+(arz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $E0
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$e0
00000005 E0                       M 	dc.b	$e0
00000006                            
00000006                            	smpsHeaderDAC       ARZ_DAC
00000006                          M 	checkedchannelpointer	arz_dac
00000006 0000                     M 	dc.w	((arz_dac&$7fff)<<8)&$ff00+(arz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        ARZ_FM1,	$00, $0C
0000000A                          M 	checkedchannelpointer	arz_fm1
0000000A 0000                     M 	dc.w	((arz_fm1&$7fff)<<8)&$ff00+(arz_fm1&$7fff)>>8
0000000C 000C                     M 	dc.b	$00,$0c
0000000E                            	smpsHeaderFM        ARZ_FM2,	$00, $0F
0000000E                          M 	checkedchannelpointer	arz_fm2
0000000E 0000                     M 	dc.w	((arz_fm2&$7fff)<<8)&$ff00+(arz_fm2&$7fff)>>8
00000010 000F                     M 	dc.b	$00,$0f
00000012                            	smpsHeaderFM        ARZ_FM3,	$00, $13
00000012                          M 	checkedchannelpointer	arz_fm3
00000012 0000                     M 	dc.w	((arz_fm3&$7fff)<<8)&$ff00+(arz_fm3&$7fff)>>8
00000014 0013                     M 	dc.b	$00,$13
00000016                            	smpsHeaderFM        ARZ_FM4,	$00, $0F
00000016                          M 	checkedchannelpointer	arz_fm4
00000016 0000                     M 	dc.w	((arz_fm4&$7fff)<<8)&$ff00+(arz_fm4&$7fff)>>8
00000018 000F                     M 	dc.b	$00,$0f
0000001A                            	smpsHeaderFM        ARZ_FM5,	$00, $0C
0000001A                          M 	checkedchannelpointer	arz_fm5
0000001A 0000                     M 	dc.w	((arz_fm5&$7fff)<<8)&$ff00+(arz_fm5&$7fff)>>8
0000001C 000C                     M 	dc.b	$00,$0c
0000001E                            	smpsHeaderPSG       ARZ_PSG1,	$D0, $04, $00, fTone_01
0000001E                          M 	checkedchannelpointer	arz_psg1
0000001E 0000                     M 	dc.w	((arz_psg1&$7fff)<<8)&$ff00+(arz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 04                       M 	dc.b	$04
00000022 00                       M 	dc.b	$00
00000023 01                       M 	dc.b	ftone_01
00000024                            	smpsHeaderPSG       ARZ_PSG2,	$D0, $06, $00, fTone_01
00000024                          M 	checkedchannelpointer	arz_psg2
00000024 0000                     M 	dc.w	((arz_psg2&$7fff)<<8)&$ff00+(arz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 06                       M 	dc.b	$06
00000028 00                       M 	dc.b	$00
00000029 01                       M 	dc.b	ftone_01
0000002A                            	smpsHeaderPSG       ARZ_PSG3,	$00, $01, $00, fTone_02
0000002A                          M 	checkedchannelpointer	arz_psg3
0000002A 0000                     M 	dc.w	((arz_psg3&$7fff)<<8)&$ff00+(arz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 01                       M 	dc.b	$01
0000002E 00                       M 	dc.b	$00
0000002F 02                       M 	dc.b	ftone_02
00000030                            
00000030                            ARZ_Call04:
00000030 BF06 BDBF 12C2 BF0C C180+  	dc.b	nD5, $06, nC5, nD5, $12, nF5, nD5, $0C, nE5, nRst, $06
0000003B 12C4 0CC2 0680 C9C6 30E7+  	dc.b	$12, nG5, $0C, nF5, $06, nRst, nC6, nA5, $30, smpsNoAttack, $0C
00000046                            	smpsReturn
00000046 E3                       M 	dc.b	$e3
00000047                            
00000047                            ARZ_Call05:
00000047 BD12 BBB8 BD06 80BB BD80+  	dc.b	nC5, $12, nBb4, nG4, nC5, $06, nRst, nBb4, nC5, nRst, nBb4, nRst
00000053 BB12 BAB6 BB06 80BA BB80+  	dc.b	nBb4, $12, nA4, nF4, nBb4, $06, nRst, nA4, nBb4, nRst, nA4, nRst
0000005F BA12 B8B5 BA06 80B8 BA80+  	dc.b	nA4, $12, nG4, nE4, nA4, $06, nRst, nG4, nA4, nRst, nG4, nRst
0000006B                            	smpsReturn
0000006B E3                       M 	dc.b	$e3
0000006C                            
0000006C                            ARZ_Call03:
0000006C C712 C9CB CB06 80CB C980+  	dc.b	nBb5, $12, nC6, nD6, nD6, $06, nRst, nD6, nC6, nRst, nBb5, nRst
00000078 C630 8006 C980 C9C7 80C6+  	dc.b	nA5, $30, nRst, $06, nC6, nRst, nC6, nBb5, nRst, nA5, nRst, nG5
00000084 3080 06C7 80C7 C680 C480   	dc.b	$30, nRst, $06, nBb5, nRst, nBb5, nA5, nRst, nG5, nRst
0000008E                            	smpsReturn
0000008E E3                       M 	dc.b	$e3
0000008F                            
0000008F                            ARZ_Call02:
0000008F C212 C4C6 C406 80C4 C280+  	dc.b	nF5, $12, nG5, nA5, nG5, $06, nRst, nG5, nF5, nRst, nG5, nRst
0000009B C230 8006 C680 C6C4 80C2+  	dc.b	nF5, $30, nRst, $06, nA5, nRst, nA5, nG5, nRst, nF5, nRst, nE5
000000A7 3080 06C4 80C4 C180 C180+  	dc.b	$30, nRst, $06, nG5, nRst, nG5, nE5, nRst, nE5, nRst, $06
000000B2                            	smpsReturn
000000B2 E3                       M 	dc.b	$e3
000000B3                            
000000B3                            ; FM1 Data
000000B3                            ARZ_FM1:
000000B3                            	smpsSetvoice        $00
000000B3                          M 	smpsfmvoice	$00
000000B3 EF00                     M 	dc.b	$ef,$00
000000B5                            	smpsModSet          $06, $02, $02, $02
000000B5 F0                       M 	dc.b	$f0
000000B6 0602 0202                M 	dc.b	$06,$02,$02,$02
000000BA 9906 9B                    	dc.b	nC2, $06, nD2
000000BD                            
000000BD                            ARZ_Jump04:
000000BD 8F30 E730 E78F 8012 9606+  	dc.b	nD1, $30, smpsNoAttack, $30, smpsNoAttack, nD1, nRst, $12, nA1, $06, nA1, nRst
000000C9 999B 8F30 E730 E78F 8012+  	dc.b	nC2, nD2, nD1, $30, smpsNoAttack, $30, smpsNoAttack, nD1, nRst, $12, nA1, $06
000000D5 9680 1280 9497 0680 1899+  	dc.b	nA1, nRst, $12, nRst, nG1, nBb1, $06, nRst, $18, nC2, $12, nG1
000000E1 0680 8012 9296 0680 1897+  	dc.b	$06, nRst, nRst, $12, nF1, nA1, $06, nRst, $18, nBb1, $12, nF1
000000ED 0680 8012 9194 0680 1896+  	dc.b	$06, nRst, nRst, $12, nE1, nG1, $06, nRst, $18, nA1, $12, nCs2
000000F9 0680 8012 8F93 0880 1696+  	dc.b	$06, nRst, nRst, $12, nD1, nFs1, $08, nRst, $16, nA1, $06, nE1
00000105 9294 9680 1294 9708 8016+  	dc.b	nF1, nG1, nA1, nRst, $12, nG1, nBb1, $08, nRst, $16, nC2, $12
00000111 9409 8003 8012 9296 0680+  	dc.b	nG1, $09, nRst, $03, nRst, $12, nF1, nA1, $06, nRst, $18, nBb1
0000011D 1292 0780 0580 129D 9A08+  	dc.b	$12, nF1, $07, nRst, $05, nRst, $12, nE2, nCs2, $08, nRst, $16
00000129 9612 9D08 8004 8012 9B06+  	dc.b	nA1, $12, nE2, $08, nRst, $04, nRst, $12, nD2, $06, $0C, nA1
00000135 0680 9696 0C06 9B96 1294+  	dc.b	$06, nRst, nA1, nA1, $0C, $06, nD2, nA1, $12, nG1, $0C, nRst
00000141 069B 1294 0C94 8006 9B12+  	dc.b	$06, nD2, $12, nG1, $0C, nG1, nRst, $06, nD2, $12, nG1, $0C
0000014D 9280 0699 1292 0C92 8006+  	dc.b	nF1, nRst, $06, nC2, $12, nF1, $0C, nF1, nRst, $06, nC2, $12
00000159 920C 9180 069D 129A 0C96+  	dc.b	nF1, $0C, nE1, nRst, $06, nE2, $12, nCs2, $0C, nA1, nRst, $06
00000165 9112 960C 9B80 0696 1293+  	dc.b	nE1, $12, nA1, $0C, nD2, nRst, $06, nA1, $12, nFs1, $0C, nRst
00000171 088F 9193 9496 940C 8006+  	dc.b	$08, nD1, nE1, nFs1, nG1, nA1, nG1, $0C, nRst, $06, nD2, $12
0000017D A00C 8006 A080 9B12 940C+  	dc.b	nG2, $0C, nRst, $06, nG2, nRst, nD2, $12, nG1, $0C, nF1, nRst
00000189 0699 129E 0C9E 8006 9912+  	dc.b	$06, nC2, $12, nF2, $0C, nF2, nRst, $06, nC2, $12, nA1, $0C
00000195 9180 0696 129A 0C9D 129A+  	dc.b	nE1, nRst, $06, nA1, $12, nCs2, $0C, nE2, $12, nCs2, nA1, $0C
000001A1 9B03 809B 809B 0680 129B+  	dc.b	nD2, $03, nRst, nD2, nRst, nD2, $06, nRst, $12, nD2, $03, nRst
000001AD 039B 809B 0680 1E99 069B   	dc.b	$03, nD2, nRst, nD2, $06, nRst, $1E, nC2, $06, nD2
000001B7                            	smpsJump            ARZ_Jump04
000001B7 F6                       M 	dc.b	$f6
000001B8 0000                     M 	dc.w	((arz_jump04&$7fff)<<8)&$ff00+(arz_jump04&$7fff)>>8
000001BA                            
000001BA                            ; FM2 Data
000001BA                            ARZ_FM2:
000001BA 800C                       	dc.b	nRst, $0C
000001BC                            
000001BC                            ARZ_Jump03:
000001BC                            	smpsSetvoice        $01
000001BC                          M 	smpsfmvoice	$01
000001BC EF01                     M 	dc.b	$ef,$01
000001BE                            	smpsModSet          $04, $02, $03, $02
000001BE F0                       M 	dc.b	$f0
000001BF 0402 0302                M 	dc.b	$04,$02,$03,$02
000001C3 BF12 C1C2 0CC6 30E7 30E7+  	dc.b	nD5, $12, nE5, nF5, $0C, nA5, $30, smpsNoAttack, $30, smpsNoAttack, $0C, nRst
000001CF 06BE BE80 12BF C1C2 06BF+  	dc.b	$06, nCs5, nCs5, nRst, $12, nD5, nE5, nF5, $06, nD5, nA5, $30
000001DB E730 E70C 8006 BEBE 80     	dc.b	smpsNoAttack, $30, smpsNoAttack, $0C, nRst, $06, nCs5, nCs5, nRst
000001E4                            	smpsSetvoice        $02
000001E4                          M 	smpsfmvoice	$02
000001E4 EF02                     M 	dc.b	$ef,$02
000001E6                            	smpsAlterVol        $06
000001E6 E606                     M 	dc.b	$e6,$06
000001E8                            	smpsCall            ARZ_Call04
000001E8 F8                       M 	dc.b	$f8
000001E9 0000                     M 	dc.w	((arz_call04&$7fff)<<8)&$ff00+(arz_call04&$7fff)>>8
000001EB 8006 C680 C712 C6C4 06C2+  	dc.b	nRst, $06, nA5, nRst, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
000001F7 C4C3 30E7 1880 0C          	dc.b	nG5, nFs5, $30, smpsNoAttack, $18, nRst, $0C
000001FE                            	smpsCall            ARZ_Call04
000001FE F8                       M 	dc.b	$f8
000001FF 0000                     M 	dc.w	((arz_call04&$7fff)<<8)&$ff00+(arz_call04&$7fff)>>8
00000201 8006 0CC7 12C6 C406 C2C1+  	dc.b	nRst, $06, $0C, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
0000020C BEBF 30E7 1880 18          	dc.b	nCs5, nD5, $30, smpsNoAttack, $18, nRst, $18
00000213                            	smpsSetvoice        $01
00000213                          M 	smpsfmvoice	$01
00000213 EF01                     M 	dc.b	$ef,$01
00000215                            	smpsAlterVol        $F8
00000215 E6F8                     M 	dc.b	$e6,$f8
00000217                            	smpsCall            ARZ_Call05
00000217 F8                       M 	dc.b	$f8
00000218 0000                     M 	dc.w	((arz_call05&$7fff)<<8)&$ff00+(arz_call05&$7fff)>>8
0000021A B780 B780 B8B8 80BA 3080+  	dc.b	nFs4, nRst, nFs4, nRst, nG4, nG4, nRst, nA4, $30, nRst, $06
00000225                            	smpsCall            ARZ_Call05
00000225 F8                       M 	dc.b	$f8
00000226 0000                     M 	dc.w	((arz_call05&$7fff)<<8)&$ff00+(arz_call05&$7fff)>>8
00000228 B303 80B3 80B3 0680 12B3+  	dc.b	nD4, $03, nRst, nD4, nRst, nD4, $06, nRst, $12, nD4, $03, nRst
00000234 03B3 80B3 0680 2A          	dc.b	$03, nD4, nRst, nD4, $06, nRst, $2A
0000023B                            	smpsAlterVol        $02
0000023B E602                     M 	dc.b	$e6,$02
0000023D                            	smpsJump            ARZ_Jump03
0000023D F6                       M 	dc.b	$f6
0000023E 0000                     M 	dc.w	((arz_jump03&$7fff)<<8)&$ff00+(arz_jump03&$7fff)>>8
00000240                            
00000240                            ; FM3 Data
00000240                            ARZ_FM3:
00000240                            	smpsSetvoice        $01
00000240                          M 	smpsfmvoice	$01
00000240 EF01                     M 	dc.b	$ef,$01
00000242                            	smpsModSet          $04, $02, $03, $02
00000242 F0                       M 	dc.b	$f0
00000243 0402 0302                M 	dc.b	$04,$02,$03,$02
00000247 800C                       	dc.b	nRst, $0C
00000249                            	smpsPan             panLeft, $00
00000249 E080                     M 	dc.b	$e0,direction+amsfms
0000024B                            
0000024B                            ARZ_Jump02:
0000024B 8007 BF12 C1C2 0CC6 30E7+  	dc.b	nRst, $07, nD5, $12, nE5, nF5, $0C, nA5, $30, smpsNoAttack, $30, smpsNoAttack
00000257 0BC4 06C4 8012 8007 BF12+  	dc.b	$0B, nG5, $06, nG5, nRst, $12, nRst, $07, nD5, $12, nE5, nF5
00000263 06BF C630 E730 E70B C406+  	dc.b	$06, nD5, nA5, $30, smpsNoAttack, $30, smpsNoAttack, $0B, nG5, $06, nG5, nRst
0000026F 8007                       	dc.b	nRst, $07
00000271                            	smpsSetvoice        $02
00000271                          M 	smpsfmvoice	$02
00000271 EF02                     M 	dc.b	$ef,$02
00000273                            	smpsAlterVol        $06
00000273 E606                     M 	dc.b	$e6,$06
00000275                            	smpsCall            ARZ_Call04
00000275 F8                       M 	dc.b	$f8
00000276 0000                     M 	dc.w	((arz_call04&$7fff)<<8)&$ff00+(arz_call04&$7fff)>>8
00000278 8006 C680 C712 C6C4 06C2+  	dc.b	nRst, $06, nA5, nRst, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
00000284 C4C3 30E7 1880 0C          	dc.b	nG5, nFs5, $30, smpsNoAttack, $18, nRst, $0C
0000028B                            	smpsCall            ARZ_Call04
0000028B F8                       M 	dc.b	$f8
0000028C 0000                     M 	dc.w	((arz_call04&$7fff)<<8)&$ff00+(arz_call04&$7fff)>>8
0000028E 8006 0CC7 12C6 C406 C2C1+  	dc.b	nRst, $06, $0C, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
00000299 BEBF 30E7 1880 18          	dc.b	nCs5, nD5, $30, smpsNoAttack, $18, nRst, $18
000002A0                            	smpsSetvoice        $01
000002A0                          M 	smpsfmvoice	$01
000002A0 EF01                     M 	dc.b	$ef,$01
000002A2                            	smpsAlterVol        $F8
000002A2 E6F8                     M 	dc.b	$e6,$f8
000002A4                            	smpsCall            ARZ_Call05
000002A4 F8                       M 	dc.b	$f8
000002A5 0000                     M 	dc.w	((arz_call05&$7fff)<<8)&$ff00+(arz_call05&$7fff)>>8
000002A7 B780 B780 B8B8 80BA 3080+  	dc.b	nFs4, nRst, nFs4, nRst, nG4, nG4, nRst, nA4, $30, nRst, $06, nC5
000002B3 12BB B8BD 0680 BBBD 80BB+  	dc.b	$12, nBb4, nG4, nC5, $06, nRst, nBb4, nC5, nRst, nBb4, nRst, nBb4
000002BF 12BA B6BB 0680 BABB 80BA+  	dc.b	$12, nA4, nF4, nBb4, $06, nRst, nA4, nBb4, nRst, nA4, nRst, nA4
000002CB 12B8 B5BA 0680 B8BA 80B8+  	dc.b	$12, nG4, nE4, nA4, $06, nRst, nG4, nA4, nRst, nG4, $05
000002D6                            	smpsAlterVol        $FC
000002D6 E6FC                     M 	dc.b	$e6,$fc
000002D8 C203 80C2 80C2 0680 12C2+  	dc.b	nF5, $03, nRst, nF5, nRst, nF5, $06, nRst, $12, nF5, $03, nRst
000002E4 03C2 80C2 0680 2A          	dc.b	$03, nF5, nRst, nF5, $06, nRst, $2A
000002EB                            	smpsAlterVol        $06
000002EB E606                     M 	dc.b	$e6,$06
000002ED                            	smpsJump            ARZ_Jump02
000002ED F6                       M 	dc.b	$f6
000002EE 0000                     M 	dc.w	((arz_jump02&$7fff)<<8)&$ff00+(arz_jump02&$7fff)>>8
000002F0                            
000002F0                            ; FM4 Data
000002F0                            ARZ_FM4:
000002F0 800C                       	dc.b	nRst, $0C
000002F2                            
000002F2                            ARZ_Loop05:
000002F2                            	smpsSetvoice        $03
000002F2                          M 	smpsfmvoice	$03
000002F2 EF03                     M 	dc.b	$ef,$03
000002F4                            	smpsPan             panRight, $00
000002F4 E040                     M 	dc.b	$e0,direction+amsfms
000002F6 B30C B606 B180 B580 B30C+  	dc.b	nD4, $0C, nF4, $06, nC4, nRst, nE4, nRst, nD4, $0C, nD4, $06
00000302 80B6 B10C B5B3 B606 B10C+  	dc.b	nRst, nF4, nC4, $0C, nE4, nD4, nF4, $06, nC4, $0C, nE4, $06
0000030E 80B3 18                    	dc.b	nRst, nD4, $18
00000311                            	smpsSetvoice        $05
00000311                          M 	smpsfmvoice	$05
00000311 EF05                     M 	dc.b	$ef,$05
00000313 AE06 AE80 12               	dc.b	nA3, $06, nA3, nRst, $12
00000318                            	smpsSetvoice        $03
00000318                          M 	smpsfmvoice	$03
00000318 EF03                     M 	dc.b	$ef,$03
0000031A                            	smpsLoop            $00, $02, ARZ_Loop05
0000031A F7                       M 	dc.b	$f7
0000031B 0002                     M 	dc.b	index,loops
0000031D 0000                     M 	dc.w	((arz_loop05&$7fff)<<8)&$ff00+(arz_loop05&$7fff)>>8
0000031F                            
0000031F                            ARZ_Loop06:
0000031F AF0C B306 B60C AFB1 0680+  	dc.b	nBb3, $0C, nD4, $06, nF4, $0C, nBb3, nC4, $06, nRst, nC4, $0C
0000032B B506 B80C B106 80B6 0CBA+  	dc.b	nE4, $06, nG4, $0C, nC4, $06, nRst, nF4, $0C, nA4, $06, nC4
00000337 0CB5 B6BA 0680 BAAF 0CB3+  	dc.b	$0C, nE4, nF4, nA4, $06, nRst, nA4, nBb3, $0C, nD4, nE4, nG4
00000343 06B2 0CB3 B5B8 0680 B8B2+  	dc.b	$06, nCs4, $0C, nD4, nE4, nG4, $06, nRst, nG4, nCs4, $0C, nE4
0000034F B3B7 06AE 0CB1 B3B7 0680+  	dc.b	nD4, nFs4, $06, nA3, $0C, nC4, nD4, nFs4, $06, nRst, nFs4, nA3
0000035B 0CB1                       	dc.b	$0C, nC4
0000035D                            	smpsLoop            $00, $02, ARZ_Loop06
0000035D F7                       M 	dc.b	$f7
0000035E 0002                     M 	dc.b	index,loops
00000360 0000                     M 	dc.w	((arz_loop06&$7fff)<<8)&$ff00+(arz_loop06&$7fff)>>8
00000362                            	smpsSetvoice        $01
00000362                          M 	smpsfmvoice	$01
00000362 EF01                     M 	dc.b	$ef,$01
00000364                            	smpsAlterVol        $04
00000364 E604                     M 	dc.b	$e6,$04
00000366                            	smpsModSet          $02, $02, $01, $02
00000366 F0                       M 	dc.b	$f0
00000367 0202 0102                M 	dc.b	$02,$02,$01,$02
0000036B                            	smpsCall            ARZ_Call03
0000036B F8                       M 	dc.b	$f8
0000036C 0000                     M 	dc.w	((arz_call03&$7fff)<<8)&$ff00+(arz_call03&$7fff)>>8
0000036E C606 80C6 80C7 C780 C980+  	dc.b	nA5, $06, nRst, nA5, nRst, nBb5, nBb5, nRst, nC6, nRst, nRst, $02
0000037A C308 C4C6 C7C9             	dc.b	nFs5, $08, nG5, nA5, nBb5, nC6
00000380                            	smpsCall            ARZ_Call03
00000380 F8                       M 	dc.b	$f8
00000381 0000                     M 	dc.w	((arz_call03&$7fff)<<8)&$ff00+(arz_call03&$7fff)>>8
00000383 C2C2 C280 12C2 06C2 C280+  	dc.b	nF5, nF5, nF5, nRst, $12, nF5, $06, nF5, nF5, nRst, $2A
0000038E                            	smpsAlterVol        $FC
0000038E E6FC                     M 	dc.b	$e6,$fc
00000390                            	smpsJump            ARZ_Loop05
00000390 F6                       M 	dc.b	$f6
00000391 0000                     M 	dc.w	((arz_loop05&$7fff)<<8)&$ff00+(arz_loop05&$7fff)>>8
00000393                            
00000393                            ; FM5 Data
00000393                            ARZ_FM5:
00000393 800C                       	dc.b	nRst, $0C
00000395                            
00000395                            ARZ_Jump01:
00000395                            	smpsModSet          $06, $01, $06, $05
00000395 F0                       M 	dc.b	$f0
00000396 0601 0605                M 	dc.b	$06,$01,$06,$05
0000039A                            	smpsAlterPitch      $F4
0000039A                          M 	smpschangetransposition	$f4
0000039A E9F4                     M 	dc.b	$e9,$f4
0000039C                            	smpsPan             panCenter, $00
0000039C E0C0                     M 	dc.b	$e0,direction+amsfms
0000039E                            
0000039E                            ARZ_Loop04:
0000039E 8030 80                    	dc.b	nRst, $30, nRst
000003A1                            	smpsSetvoice        $04
000003A1                          M 	smpsfmvoice	$04
000003A1 EF04                     M 	dc.b	$ef,$04
000003A3 CB06 D2CB D2CB 1880 12CA+  	dc.b	nD6, $06, nA6, nD6, nA6, nD6, $18, nRst, $12, nCs6, $06, nCs6
000003AF 8012                       	dc.b	nRst, $12
000003B1                            	smpsLoop            $00, $02, ARZ_Loop04
000003B1 F7                       M 	dc.b	$f7
000003B2 0002                     M 	dc.b	index,loops
000003B4 0000                     M 	dc.w	((arz_loop04&$7fff)<<8)&$ff00+(arz_loop04&$7fff)>>8
000003B6 8030 8080 C206 C2C9 C61E+  	dc.b	nRst, $30, nRst, nRst, nF5, $06, nF5, nC6, nA5, $1E, nRst, $30
000003C2 8080 06CB 80CB C980 C980+  	dc.b	nRst, nRst, $06, nD6, nRst, nD6, nC6, nRst, nC6, nRst, nBb5, nRst
000003CE C780 C603 80C6 8009 8006+  	dc.b	nBb5, nRst, nA5, $03, nRst, nA5, nRst, $09, nRst, $06, nRst, $30
000003DA 8080 C206 C2C9 C61E 8030+  	dc.b	nRst, nRst, nF5, $06, nF5, nC6, nA5, $1E, nRst, $30, nRst, nRst
000003E6 06CB 80CB CB80 C980 CB0C+  	dc.b	$06, nD6, nRst, nD6, nD6, nRst, nC6, nRst, nD6, $0C, nC6, $06
000003F2 CB12 C902 C8C6 C4C2 C1     	dc.b	nD6, $12, nC6, $02, nB5, nA5, nG5, nF5, nE5
000003FB                            	smpsAlterVol        $04
000003FB E604                     M 	dc.b	$e6,$04
000003FD                            	smpsAlterPitch      $0C
000003FD                          M 	smpschangetransposition	$0c
000003FD E90C                     M 	dc.b	$e9,$0c
000003FF                            	smpsSetvoice        $01
000003FF                          M 	smpsfmvoice	$01
000003FF EF01                     M 	dc.b	$ef,$01
00000401                            	smpsModSet          $02, $02, $01, $02
00000401 F0                       M 	dc.b	$f0
00000402 0202 0102                M 	dc.b	$02,$02,$01,$02
00000406                            	smpsPan             panLeft, $00
00000406 E080                     M 	dc.b	$e0,direction+amsfms
00000408                            	smpsCall            ARZ_Call02
00000408 F8                       M 	dc.b	$f8
00000409 0000                     M 	dc.w	((arz_call02&$7fff)<<8)&$ff00+(arz_call02&$7fff)>>8
0000040B C306 80C3 80C4 C480 C680+  	dc.b	nFs5, $06, nRst, nFs5, nRst, nG5, nG5, nRst, nA5, nRst, nRst, $02
00000417 BF08 C1C3 C4C6             	dc.b	nD5, $08, nE5, nFs5, nG5, nA5
0000041D                            	smpsCall            ARZ_Call02
0000041D F8                       M 	dc.b	$f8
0000041E 0000                     M 	dc.w	((arz_call02&$7fff)<<8)&$ff00+(arz_call02&$7fff)>>8
00000420 C606 C6C6 8012 C606 C6C6+  	dc.b	nA5, $06, nA5, nA5, nRst, $12, nA5, $06, nA5, nA5, nRst, $2A
0000042C                            	smpsAlterVol        $FC
0000042C E6FC                     M 	dc.b	$e6,$fc
0000042E                            	smpsJump            ARZ_Jump01
0000042E F6                       M 	dc.b	$f6
0000042F 0000                     M 	dc.w	((arz_jump01&$7fff)<<8)&$ff00+(arz_jump01&$7fff)>>8
00000431                            
00000431                            ARZ_Call00:
00000431 810C 8206 8112 8106 8112+  	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dKick, $06, dKick, $12, dMidTom, $06
0000043D 820C 8306 8180             	dc.b	dSnare, $0C, dClap, $06, dKick, nRst
00000443                            	smpsReturn
00000443 E3                       M 	dc.b	$e3
00000444                            
00000444                            ARZ_Call01:
00000444 810C 8206 8112 8C06 8C     	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dMidTom, $06, dMidTom
0000044D                            	smpsReturn
0000044D E3                       M 	dc.b	$e3
0000044E                            
0000044E                            ; DAC Data
0000044E                            ARZ_DAC:
0000044E 8306 83                    	dc.b	dClap, $06, dClap
00000451                            
00000451                            ARZ_Jump00:
00000451 8112 1E12 1E12 1E12 8306+  	dc.b	dKick, $12, $1E, $12, $1E, $12, $1E, $12, dClap, $06, dSnare, nRst
0000045D 800C 8112 818C 068D 8112+  	dc.b	nRst, $0C, dKick, $12, dKick, dMidTom, $06, dLowTom, dKick, $12, dKick, dLowTom
00000469 068E 8112 068C 8C8D 8D8E+  	dc.b	$06, dFloorTom, dKick, $12, $06, dMidTom, dMidTom, dLowTom, dLowTom, dFloorTom, dFloorTom, nRst
00000475 8206 0C81                  	dc.b	dSnare, $06, $0C, dKick
00000479                            
00000479                            ARZ_Loop00:
00000479                            	smpsCall            ARZ_Call00
00000479 F8                       M 	dc.b	$f8
0000047A 0000                     M 	dc.w	((arz_call00&$7fff)<<8)&$ff00+(arz_call00&$7fff)>>8
0000047C                            	smpsLoop            $00, $03, ARZ_Loop00
0000047C F7                       M 	dc.b	$f7
0000047D 0003                     M 	dc.b	index,loops
0000047F 0000                     M 	dc.w	((arz_loop00&$7fff)<<8)&$ff00+(arz_loop00&$7fff)>>8
00000481 8306 8281 8282 8082 8082+  	dc.b	dClap, $06, dSnare, dKick, dSnare, dSnare, nRst, dSnare, nRst, dSnare, nRst, dSnare
0000048D 8082 8283 83               	dc.b	nRst, dSnare, dSnare, dClap, dClap
00000492                            
00000492                            ARZ_Loop01:
00000492                            	smpsCall            ARZ_Call00
00000492 F8                       M 	dc.b	$f8
00000493 0000                     M 	dc.w	((arz_call00&$7fff)<<8)&$ff00+(arz_call00&$7fff)>>8
00000495                            	smpsLoop            $00, $03, ARZ_Loop01
00000495 F7                       M 	dc.b	$f7
00000496 0003                     M 	dc.b	index,loops
00000498 0000                     M 	dc.w	((arz_loop01&$7fff)<<8)&$ff00+(arz_loop01&$7fff)>>8
0000049A 8204 8383 8383 8383 0C06+  	dc.b	dSnare, $04, dClap, dClap, dClap, dClap, dClap, dClap, $0C, $06, dClap, dClap
000004A6 8383 8383 8383 0C          	dc.b	dClap, dClap, dClap, dClap, dClap, dClap, $0C
000004AD                            
000004AD                            ARZ_Loop02:
000004AD                            	smpsCall            ARZ_Call01
000004AD F8                       M 	dc.b	$f8
000004AE 0000                     M 	dc.w	((arz_call01&$7fff)<<8)&$ff00+(arz_call01&$7fff)>>8
000004B0                            	smpsLoop            $00, $06, ARZ_Loop02
000004B0 F7                       M 	dc.b	$f7
000004B1 0006                     M 	dc.b	index,loops
000004B3 0000                     M 	dc.w	((arz_loop02&$7fff)<<8)&$ff00+(arz_loop02&$7fff)>>8
000004B5 810C 8281 0683 0C06 8108+  	dc.b	dKick, $0C, dSnare, dKick, $06, dClap, $0C, $06, dKick, $08, dSnare, dSnare
000004C1 8282 82                    	dc.b	dSnare, dSnare, dSnare
000004C4                            
000004C4                            ARZ_Loop03:
000004C4                            	smpsCall            ARZ_Call01
000004C4 F8                       M 	dc.b	$f8
000004C5 0000                     M 	dc.w	((arz_call01&$7fff)<<8)&$ff00+(arz_call01&$7fff)>>8
000004C7                            	smpsLoop            $00, $06, ARZ_Loop03
000004C7 F7                       M 	dc.b	$f7
000004C8 0006                     M 	dc.b	index,loops
000004CA 0000                     M 	dc.w	((arz_loop03&$7fff)<<8)&$ff00+(arz_loop03&$7fff)>>8
000004CC 8306 8282 1882 0682 8218+  	dc.b	dClap, $06, dSnare, dSnare, $18, dSnare, $06, dSnare, dSnare, $18, dKick, $0C
000004D8 8306 83                    	dc.b	dClap, $06, dClap
000004DB                            	smpsJump            ARZ_Jump00
000004DB F6                       M 	dc.b	$f6
000004DC 0000                     M 	dc.w	((arz_jump00&$7fff)<<8)&$ff00+(arz_jump00&$7fff)>>8
000004DE                            
000004DE                            ; PSG1 Data
000004DE                            ARZ_PSG1:
000004DE 800C                       	dc.b	nRst, $0C
000004E0                            
000004E0                            ARZ_Jump05:
000004E0                            	smpsAlterPitch      $0C
000004E0                          M 	smpschangetransposition	$0c
000004E0 E90C                     M 	dc.b	$e9,$0c
000004E2                            
000004E2                            ARZ_Loop09:
000004E2 AE0C B306 AC80 B180 AE0C+  	dc.b	nA3, $0C, nD4, $06, nG3, nRst, nC4, nRst, nA3, $0C, nA3, $06
000004EE 80B3 AC0C B1AE B306 AC80+  	dc.b	nRst, nD4, nG3, $0C, nC4, nA3, nD4, $06, nG3, nRst, nC4, nRst
000004FA AE18 AA06 AA80 12          	dc.b	nA3, $18, nF3, $06, nF3, nRst, $12
00000501                            	smpsLoop            $00, $02, ARZ_Loop09
00000501 F7                       M 	dc.b	$f7
00000502 0002                     M 	dc.b	index,loops
00000504 0000                     M 	dc.w	((arz_loop09&$7fff)<<8)&$ff00+(arz_loop09&$7fff)>>8
00000506                            
00000506                            ARZ_Loop0A:
00000506 AC0C AF06 B30C ACAC 0680+  	dc.b	nG3, $0C, nBb3, $06, nD4, $0C, nG3, nG3, $06, nRst, nG3, $0C
00000512 AF06 B50C AC06 8006 B10C+  	dc.b	nBb3, $06, nE4, $0C, nG3, $06, nRst, $06, nC4, $0C, nF4, $06
0000051E AE0C B1B3 B606 80B6 AA0C+  	dc.b	nA3, $0C, nC4, nD4, nF4, $06, nRst, nF4, nF3, $0C, nBb3, nBb3
0000052A B506 AC0C AFB2 B506 80B5+  	dc.b	nE4, $06, nG3, $0C, nBb3, nCs4, nE4, $06, nRst, nE4, nA3, $0C
00000536 B2AE B306 AC0C AEAE B306+  	dc.b	nCs4, nA3, nD4, $06, nG3, $0C, nA3, nA3, nD4, $06, nRst, nD4
00000542 AB0C AE                    	dc.b	nFs3, $0C, nA3
00000545                            	smpsLoop            $00, $02, ARZ_Loop0A
00000545 F7                       M 	dc.b	$f7
00000546 0002                     M 	dc.b	index,loops
00000548 0000                     M 	dc.w	((arz_loop0a&$7fff)<<8)&$ff00+(arz_loop0a&$7fff)>>8
0000054A                            	smpsAlterPitch      $F4
0000054A                          M 	smpschangetransposition	$f4
0000054A E9F4                     M 	dc.b	$e9,$f4
0000054C C40C C706 BF0C C2C4 0680+  	dc.b	nG5, $0C, nBb5, $06, nD5, $0C, nF5, nG5, $06, nRst, nBb5, nRst
00000558 BFC2 0CC4 0680 C20C C606+  	dc.b	nD5, nF5, $0C, nG5, $06, nRst, nF5, $0C, nA5, $06, nC5, $0C
00000564 C1C2 0680 C680 BDC1 0CC2+  	dc.b	nE5, nF5, $06, nRst, nA5, nRst, nC5, nE5, $0C, nF5, $06, nRst
00000570 C10C C406 BE0C BFC1 0680+  	dc.b	nE5, $0C, nG5, $06, nCs5, $0C, nD5, nE5, $06, nRst, nG5, nRst
0000057C BEBF 0CC1 0680 C30C C606+  	dc.b	nCs5, nD5, $0C, nE5, $06, nRst, nFs5, $0C, nA5, $06, nD5, $0C
00000588 C1C3 0680 C680 BFC1 0CC3+  	dc.b	nE5, nFs5, $06, nRst, nA5, nRst, nD5, nE5, $0C, nFs5, $06, nRst
00000594 C40C C706 BF0C C2C4 C706+  	dc.b	nG5, $0C, nBb5, $06, nD5, $0C, nF5, nG5, nBb5, $06, nRst, nD5
000005A0 C20C C406 80C2 0CC6 06BD+  	dc.b	nF5, $0C, nG5, $06, nRst, nF5, $0C, nA5, $06, nC5, $0C, nE5
000005AC C2C6 0680 BDC1 0CC2 0680+  	dc.b	nF5, nA5, $06, nRst, nC5, nE5, $0C, nF5, $06, nRst, nE5, $0C
000005B8 C406 BE0C BFC1 C406 80BE+  	dc.b	nG5, $06, nCs5, $0C, nD5, nE5, nG5, $06, nRst, nCs5, nD5, $0C
000005C4 C106 80C6 C6C6 8012 C606+  	dc.b	nE5, $06, nRst, nA5, nA5, nA5, nRst, $12, nA5, $06, nA5, nA5
000005D0 802A                       	dc.b	nRst, $2A
000005D2                            	smpsJump            ARZ_Jump05
000005D2 F6                       M 	dc.b	$f6
000005D3 0000                     M 	dc.w	((arz_jump05&$7fff)<<8)&$ff00+(arz_jump05&$7fff)>>8
000005D5                            
000005D5                            	; Unreachable
000005D5                            	smpsStop
000005D5 F2                       M 	dc.b	$f2
000005D6                            
000005D6                            ; PSG2 Data
000005D6                            ARZ_PSG2:
000005D6 800C                       	dc.b	nRst, $0C
000005D8                            	smpsModSet          $03, $02, $01, $05
000005D8 F0                       M 	dc.b	$f0
000005D9 0302 0105                M 	dc.b	$03,$02,$01,$05
000005DD                            
000005DD                            ARZ_Loop08:
000005DD 8030 80                    	dc.b	nRst, $30, nRst
000005E0                            	smpsPSGvoice        fTone_0A
000005E0 F50A                     M 	dc.b	$f5,ftone_0a
000005E2 C606 CDC6 CDC6 1880 12C2+  	dc.b	nA5, $06, nE6, nA5, nE6, nA5, $18, nRst, $12, nF5, $06, nF5
000005EE 8012                       	dc.b	nRst, $12
000005F0                            	smpsLoop            $00, $02, ARZ_Loop08
000005F0 F7                       M 	dc.b	$f7
000005F1 0002                     M 	dc.b	index,loops
000005F3 0000                     M 	dc.w	((arz_loop08&$7fff)<<8)&$ff00+(arz_loop08&$7fff)>>8
000005F5 8030 8080 BD06 BFC6 C21E+  	dc.b	nRst, $30, nRst, nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $30
00000601 8080 06C6 80C6 C480 C480+  	dc.b	nRst, nRst, $06, nA5, nRst, nA5, nG5, nRst, nG5, nRst, nFs5, nRst
0000060D C380 BF03 80BF 8009 8006+  	dc.b	nFs5, nRst, nD5, $03, nRst, nD5, nRst, $09, nRst, $06, nRst, $30
00000619 8080 BD06 BFC6 C21E 8030+  	dc.b	nRst, nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $30, nRst, nRst
00000625 06C6 80C4 C680 C480 C60C+  	dc.b	$06, nA5, nRst, nG5, nA5, nRst, nG5, nRst, nA5, $0C, nG5, $06
00000631 C612 C402 C2C1 BFBD BC     	dc.b	nA5, $12, nG5, $02, nF5, nE5, nD5, nC5, nB4
0000063A                            	smpsPSGvoice        fTone_01
0000063A F501                     M 	dc.b	$f5,ftone_01
0000063C                            	smpsAlterVol        $FE
0000063C E6FE                     M 	dc.b	$e6,$fe
0000063E BF0C C406 BB0C BFBF 0680+  	dc.b	nD5, $0C, nG5, $06, nBb4, $0C, nD5, nD5, $06, nRst, nF5, nRst
0000064A B8BF 0CBF 0680 BD0C C206+  	dc.b	nG4, nD5, $0C, nD5, $06, nRst, nC5, $0C, nF5, $06, nA4, $0C
00000656 BDBD 0680 C280 BABD 0CBD+  	dc.b	nC5, nC5, $06, nRst, nF5, nRst, nA4, nC5, $0C, nC5, $06, nRst
00000662 BE0C C106 BA0C BBBE 0680+  	dc.b	nCs5, $0C, nE5, $06, nA4, $0C, nBb4, nCs5, $06, nRst, nE5, nRst
0000066E BABA 0CBA 0680 BF0C C306+  	dc.b	nA4, nA4, $0C, nA4, $06, nRst, nD5, $0C, nFs5, $06, nA4, $0C
0000067A BDBF 0680 C380 BABD 0CBF+  	dc.b	nC5, nD5, $06, nRst, nFs5, nRst, nA4, nC5, $0C, nD5, $06, nRst
00000686 BF0C C406 BB0C BFBF C206+  	dc.b	nD5, $0C, nG5, $06, nBb4, $0C, nD5, nD5, nF5, $06, nRst, nG4
00000692 BF0C BF06 80BD 0CC2 06BA+  	dc.b	nD5, $0C, nD5, $06, nRst, nC5, $0C, nF5, $06, nA4, $0C, nC5
0000069E BDC2 0680 BABD 0CBD 0680+  	dc.b	nC5, nF5, $06, nRst, nA4, nC5, $0C, nC5, $06, nRst, nCs5, $0C
000006AA C106 BA0C BBBE C106 80BA+  	dc.b	nE5, $06, nA4, $0C, nBb4, nCs5, nE5, $06, nRst, nA4, nA4, $0C
000006B6 BA06 80C1 C1C1 8012 C106+  	dc.b	nA4, $06, nRst, nE5, nE5, nE5, nRst, $12, nE5, $06, nE5, nE5
000006C2 802A                       	dc.b	nRst, $2A
000006C4                            	smpsAlterVol        $02
000006C4 E602                     M 	dc.b	$e6,$02
000006C6                            	smpsJump            ARZ_Loop08
000006C6 F6                       M 	dc.b	$f6
000006C7 0000                     M 	dc.w	((arz_loop08&$7fff)<<8)&$ff00+(arz_loop08&$7fff)>>8
000006C9                            
000006C9                            ; PSG3 Data
000006C9                            ARZ_PSG3:
000006C9                            	smpsPSGform         $E7
000006C9 F3E7                     M 	dc.b	$f3,$e7
000006CB 800C                       	dc.b	nRst, $0C
000006CD                            	smpsPSGvoice        fTone_02
000006CD F502                     M 	dc.b	$f5,ftone_02
000006CF                            
000006CF                            ARZ_Loop07:
000006CF 800C C606 8007 C606 8011+  	dc.b	nRst, $0C, nMaxPSG, $06, nRst, $07, nMaxPSG, $06, nRst, $11, nMaxPSG, $0C
000006DB 8006 C60C 8006 C680        	dc.b	nRst, $06, nMaxPSG, $0C, nRst, $06, nMaxPSG, nRst
000006E3                            	smpsLoop            $00, $13, ARZ_Loop07
000006E3 F7                       M 	dc.b	$f7
000006E4 0013                     M 	dc.b	index,loops
000006E6 0000                     M 	dc.w	((arz_loop07&$7fff)<<8)&$ff00+(arz_loop07&$7fff)>>8
000006E8 C606 C6C6 8012 C606 C6C6+  	dc.b	nMaxPSG, $06, nMaxPSG, nMaxPSG, nRst, $12, nMaxPSG, $06, nMaxPSG, nMaxPSG, nRst, $2A
000006F4                            	smpsJump            ARZ_Loop07
000006F4 F6                       M 	dc.b	$f6
000006F5 0000                     M 	dc.w	((arz_loop07&$7fff)<<8)&$ff00+(arz_loop07&$7fff)>>8
000006F7                            
000006F7                            ARZ_Voices:
000006F7                            ;	Voice $00
000006F7                            ;	$18
000006F7                            ;	$37, $32, $31, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000006F7                            ;	$08, $0A, $03, $05, 	$B6, $B6, $36, $28, 	$2C, $22, $14, $00
000006F7                            	smpsVcAlgorithm     $00
000006F7 =00000000                M vcalgorithm	set	val
000006F7                            	smpsVcFeedback      $03
000006F7 =00000003                M vcfeedback	set	val
000006F7                            	smpsVcUnusedBits    $00
000006F7 =00000000                M vcunusedbits	set	val
000006F7 =00000000                M vcd1r1unk	set	0
000006F7 =00000000                M vcd1r2unk	set	0
000006F7 =00000000                M vcd1r3unk	set	0
000006F7 =00000000                M vcd1r4unk	set	0
000006F7                            	smpsVcDetune        $03, $03, $03, $03
000006F7 =00000003                M vcdt1	set	op1
000006F7 =00000003                M vcdt2	set	op2
000006F7 =00000003                M vcdt3	set	op3
000006F7 =00000003                M vcdt4	set	op4
000006F7                            	smpsVcCoarseFreq    $01, $01, $02, $07
000006F7 =00000001                M vccf1	set	op1
000006F7 =00000001                M vccf2	set	op2
000006F7 =00000002                M vccf3	set	op3
000006F7 =00000007                M vccf4	set	op4
000006F7                            	smpsVcRateScale     $02, $00, $03, $02
000006F7 =00000002                M vcrs1	set	op1
000006F7 =00000000                M vcrs2	set	op2
000006F7 =00000003                M vcrs3	set	op3
000006F7 =00000002                M vcrs4	set	op4
000006F7                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000006F7 =0000001C                M vcar1	set	op1
000006F7 =0000001C                M vcar2	set	op2
000006F7 =0000001C                M vcar3	set	op3
000006F7 =0000001E                M vcar4	set	op4
000006F7                            	smpsVcAmpMod        $00, $00, $00, $00
000006F7 =00000000                M vcam1	set	op1<<7
000006F7 =00000000                M vcam2	set	op2<<7
000006F7 =00000000                M vcam3	set	op3<<7
000006F7 =00000000                M vcam4	set	op4<<7
000006F7                            	smpsVcDecayRate1    $01, $04, $06, $0D
000006F7 =00000001                M vcd1r1	set	op1
000006F7 =00000004                M vcd1r2	set	op2
000006F7 =00000006                M vcd1r3	set	op3
000006F7 =0000000D                M vcd1r4	set	op4
000006F7                            	smpsVcDecayRate2    $05, $03, $0A, $08
000006F7 =00000005                M vcd2r1	set	op1
000006F7 =00000003                M vcd2r2	set	op2
000006F7 =0000000A                M vcd2r3	set	op3
000006F7 =00000008                M vcd2r4	set	op4
000006F7                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000006F7 =00000002                M vcdl1	set	op1
000006F7 =00000003                M vcdl2	set	op2
000006F7 =0000000B                M vcdl3	set	op3
000006F7 =0000000B                M vcdl4	set	op4
000006F7                            	smpsVcReleaseRate   $08, $06, $06, $06
000006F7 =00000008                M vcrr1	set	op1
000006F7 =00000006                M vcrr2	set	op2
000006F7 =00000006                M vcrr3	set	op3
000006F7 =00000006                M vcrr4	set	op4
000006F7                            	smpsVcTotalLevel    $00, $14, $22, $2C
000006F7 =00000000                M vctl1	set	op1
000006F7 =00000014                M vctl2	set	op2
000006F7 =00000022                M vctl3	set	op3
000006F7 =0000002C                M vctl4	set	op4
000006F7 18                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006F8 =00000000                M vctlmask4	set	0
000006F8 =00000000                M vctlmask3	set	0
000006F8 =00000000                M vctlmask2	set	0
000006F8 =00000000                M vctlmask1	set	0
000006F8 3731 3231                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006FC 9E1C DC9C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000700 0D04 0601                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000704 0803 0A05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000708 B636 B628                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000070C 2C14 2200                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000710                            
00000710                            ;	Voice $01
00000710                            ;	$3A
00000710                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
00000710                            ;	$01, $02, $02, $00, 	$52, $02, $02, $28, 	$18, $22, $18, $80
00000710                            	smpsVcAlgorithm     $02
00000710 =00000002                M vcalgorithm	set	val
00000710                            	smpsVcFeedback      $07
00000710 =00000007                M vcfeedback	set	val
00000710                            	smpsVcUnusedBits    $00
00000710 =00000000                M vcunusedbits	set	val
00000710 =00000000                M vcd1r1unk	set	0
00000710 =00000000                M vcd1r2unk	set	0
00000710 =00000000                M vcd1r3unk	set	0
00000710 =00000000                M vcd1r4unk	set	0
00000710                            	smpsVcDetune        $00, $00, $00, $00
00000710 =00000000                M vcdt1	set	op1
00000710 =00000000                M vcdt2	set	op2
00000710 =00000000                M vcdt3	set	op3
00000710 =00000000                M vcdt4	set	op4
00000710                            	smpsVcCoarseFreq    $02, $01, $01, $01
00000710 =00000002                M vccf1	set	op1
00000710 =00000001                M vccf2	set	op2
00000710 =00000001                M vccf3	set	op3
00000710 =00000001                M vccf4	set	op4
00000710                            	smpsVcRateScale     $01, $00, $00, $02
00000710 =00000001                M vcrs1	set	op1
00000710 =00000000                M vcrs2	set	op2
00000710 =00000000                M vcrs3	set	op3
00000710 =00000002                M vcrs4	set	op4
00000710                            	smpsVcAttackRate    $12, $07, $07, $0D
00000710 =00000012                M vcar1	set	op1
00000710 =00000007                M vcar2	set	op2
00000710 =00000007                M vcar3	set	op3
00000710 =0000000D                M vcar4	set	op4
00000710                            	smpsVcAmpMod        $00, $00, $00, $00
00000710 =00000000                M vcam1	set	op1<<7
00000710 =00000000                M vcam2	set	op2<<7
00000710 =00000000                M vcam3	set	op3<<7
00000710 =00000000                M vcam4	set	op4<<7
00000710                            	smpsVcDecayRate1    $03, $00, $00, $09
00000710 =00000003                M vcd1r1	set	op1
00000710 =00000000                M vcd1r2	set	op2
00000710 =00000000                M vcd1r3	set	op3
00000710 =00000009                M vcd1r4	set	op4
00000710                            	smpsVcDecayRate2    $00, $02, $02, $01
00000710 =00000000                M vcd2r1	set	op1
00000710 =00000002                M vcd2r2	set	op2
00000710 =00000002                M vcd2r3	set	op3
00000710 =00000001                M vcd2r4	set	op4
00000710                            	smpsVcDecayLevel    $02, $00, $00, $05
00000710 =00000002                M vcdl1	set	op1
00000710 =00000000                M vcdl2	set	op2
00000710 =00000000                M vcdl3	set	op3
00000710 =00000005                M vcdl4	set	op4
00000710                            	smpsVcReleaseRate   $08, $02, $02, $02
00000710 =00000008                M vcrr1	set	op1
00000710 =00000002                M vcrr2	set	op2
00000710 =00000002                M vcrr3	set	op3
00000710 =00000002                M vcrr4	set	op4
00000710                            	smpsVcTotalLevel    $80, $18, $22, $18
00000710 =00000080                M vctl1	set	op1
00000710 =00000018                M vctl2	set	op2
00000710 =00000022                M vctl3	set	op3
00000710 =00000018                M vctl4	set	op4
00000710 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000711 =00000000                M vctlmask4	set	0
00000711 =00000000                M vctlmask3	set	0
00000711 =00000000                M vctlmask2	set	0
00000711 =00000000                M vctlmask1	set	0
00000711 0101 0102                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000715 8D07 0752                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000719 0900 0003                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000071D 0102 0200                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000721 5202 0228                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000725 1818 2280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000729                            
00000729                            ;	Voice $02
00000729                            ;	$3D
00000729                            ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
00000729                            ;	$01, $00, $00, $00, 	$24, $18, $18, $18, 	$1C, $82, $82, $82
00000729                            	smpsVcAlgorithm     $05
00000729 =00000005                M vcalgorithm	set	val
00000729                            	smpsVcFeedback      $07
00000729 =00000007                M vcfeedback	set	val
00000729                            	smpsVcUnusedBits    $00
00000729 =00000000                M vcunusedbits	set	val
00000729 =00000000                M vcd1r1unk	set	0
00000729 =00000000                M vcd1r2unk	set	0
00000729 =00000000                M vcd1r3unk	set	0
00000729 =00000000                M vcd1r4unk	set	0
00000729                            	smpsVcDetune        $00, $00, $00, $00
00000729 =00000000                M vcdt1	set	op1
00000729 =00000000                M vcdt2	set	op2
00000729 =00000000                M vcdt3	set	op3
00000729 =00000000                M vcdt4	set	op4
00000729                            	smpsVcCoarseFreq    $02, $02, $02, $01
00000729 =00000002                M vccf1	set	op1
00000729 =00000002                M vccf2	set	op2
00000729 =00000002                M vccf3	set	op3
00000729 =00000001                M vccf4	set	op4
00000729                            	smpsVcRateScale     $01, $01, $01, $00
00000729 =00000001                M vcrs1	set	op1
00000729 =00000001                M vcrs2	set	op2
00000729 =00000001                M vcrs3	set	op3
00000729 =00000000                M vcrs4	set	op4
00000729                            	smpsVcAttackRate    $10, $10, $10, $10
00000729 =00000010                M vcar1	set	op1
00000729 =00000010                M vcar2	set	op2
00000729 =00000010                M vcar3	set	op3
00000729 =00000010                M vcar4	set	op4
00000729                            	smpsVcAmpMod        $00, $00, $00, $00
00000729 =00000000                M vcam1	set	op1<<7
00000729 =00000000                M vcam2	set	op2<<7
00000729 =00000000                M vcam3	set	op3<<7
00000729 =00000000                M vcam4	set	op4<<7
00000729                            	smpsVcDecayRate1    $08, $08, $08, $07
00000729 =00000008                M vcd1r1	set	op1
00000729 =00000008                M vcd1r2	set	op2
00000729 =00000008                M vcd1r3	set	op3
00000729 =00000007                M vcd1r4	set	op4
00000729                            	smpsVcDecayRate2    $00, $00, $00, $01
00000729 =00000000                M vcd2r1	set	op1
00000729 =00000000                M vcd2r2	set	op2
00000729 =00000000                M vcd2r3	set	op3
00000729 =00000001                M vcd2r4	set	op4
00000729                            	smpsVcDecayLevel    $01, $01, $01, $02
00000729 =00000001                M vcdl1	set	op1
00000729 =00000001                M vcdl2	set	op2
00000729 =00000001                M vcdl3	set	op3
00000729 =00000002                M vcdl4	set	op4
00000729                            	smpsVcReleaseRate   $08, $08, $08, $04
00000729 =00000008                M vcrr1	set	op1
00000729 =00000008                M vcrr2	set	op2
00000729 =00000008                M vcrr3	set	op3
00000729 =00000004                M vcrr4	set	op4
00000729                            	smpsVcTotalLevel    $82, $82, $82, $1C
00000729 =00000082                M vctl1	set	op1
00000729 =00000082                M vctl2	set	op2
00000729 =00000082                M vctl3	set	op3
00000729 =0000001C                M vctl4	set	op4
00000729 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000072A =00000000                M vctlmask4	set	0
0000072A =00000000                M vctlmask3	set	0
0000072A =00000000                M vctlmask2	set	0
0000072A =00000000                M vctlmask1	set	0
0000072A 0102 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000072E 1050 5050                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000732 0708 0808                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000736 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000073A 2418 1818                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000073E 1C82 8282                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000742                            
00000742                            ;	Voice $03
00000742                            ;	$32
00000742                            ;	$71, $0D, $33, $01, 	$5F, $99, $5F, $94, 	$05, $05, $05, $07
00000742                            ;	$02, $02, $02, $02, 	$11, $11, $11, $72, 	$23, $2D, $26, $80
00000742                            	smpsVcAlgorithm     $02
00000742 =00000002                M vcalgorithm	set	val
00000742                            	smpsVcFeedback      $06
00000742 =00000006                M vcfeedback	set	val
00000742                            	smpsVcUnusedBits    $00
00000742 =00000000                M vcunusedbits	set	val
00000742 =00000000                M vcd1r1unk	set	0
00000742 =00000000                M vcd1r2unk	set	0
00000742 =00000000                M vcd1r3unk	set	0
00000742 =00000000                M vcd1r4unk	set	0
00000742                            	smpsVcDetune        $00, $03, $00, $07
00000742 =00000000                M vcdt1	set	op1
00000742 =00000003                M vcdt2	set	op2
00000742 =00000000                M vcdt3	set	op3
00000742 =00000007                M vcdt4	set	op4
00000742                            	smpsVcCoarseFreq    $01, $03, $0D, $01
00000742 =00000001                M vccf1	set	op1
00000742 =00000003                M vccf2	set	op2
00000742 =0000000D                M vccf3	set	op3
00000742 =00000001                M vccf4	set	op4
00000742                            	smpsVcRateScale     $02, $01, $02, $01
00000742 =00000002                M vcrs1	set	op1
00000742 =00000001                M vcrs2	set	op2
00000742 =00000002                M vcrs3	set	op3
00000742 =00000001                M vcrs4	set	op4
00000742                            	smpsVcAttackRate    $14, $1F, $19, $1F
00000742 =00000014                M vcar1	set	op1
00000742 =0000001F                M vcar2	set	op2
00000742 =00000019                M vcar3	set	op3
00000742 =0000001F                M vcar4	set	op4
00000742                            	smpsVcAmpMod        $00, $00, $00, $00
00000742 =00000000                M vcam1	set	op1<<7
00000742 =00000000                M vcam2	set	op2<<7
00000742 =00000000                M vcam3	set	op3<<7
00000742 =00000000                M vcam4	set	op4<<7
00000742                            	smpsVcDecayRate1    $07, $05, $05, $05
00000742 =00000007                M vcd1r1	set	op1
00000742 =00000005                M vcd1r2	set	op2
00000742 =00000005                M vcd1r3	set	op3
00000742 =00000005                M vcd1r4	set	op4
00000742                            	smpsVcDecayRate2    $02, $02, $02, $02
00000742 =00000002                M vcd2r1	set	op1
00000742 =00000002                M vcd2r2	set	op2
00000742 =00000002                M vcd2r3	set	op3
00000742 =00000002                M vcd2r4	set	op4
00000742                            	smpsVcDecayLevel    $07, $01, $01, $01
00000742 =00000007                M vcdl1	set	op1
00000742 =00000001                M vcdl2	set	op2
00000742 =00000001                M vcdl3	set	op3
00000742 =00000001                M vcdl4	set	op4
00000742                            	smpsVcReleaseRate   $02, $01, $01, $01
00000742 =00000002                M vcrr1	set	op1
00000742 =00000001                M vcrr2	set	op2
00000742 =00000001                M vcrr3	set	op3
00000742 =00000001                M vcrr4	set	op4
00000742                            	smpsVcTotalLevel    $80, $26, $2D, $23
00000742 =00000080                M vctl1	set	op1
00000742 =00000026                M vctl2	set	op2
00000742 =0000002D                M vctl3	set	op3
00000742 =00000023                M vctl4	set	op4
00000742 32                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000743 =00000000                M vctlmask4	set	0
00000743 =00000000                M vctlmask3	set	0
00000743 =00000000                M vctlmask2	set	0
00000743 =00000000                M vctlmask1	set	0
00000743 7133 0D01                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000747 5F5F 9994                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000074B 0505 0507                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000074F 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000753 1111 1172                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000757 2326 2D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000075B                            
0000075B                            ;	Voice $04
0000075B                            ;	$3A
0000075B                            ;	$32, $01, $52, $31, 	$1F, $1F, $1F, $18, 	$01, $1F, $00, $00
0000075B                            ;	$00, $0F, $00, $00, 	$5A, $0F, $03, $1A, 	$3B, $30, $4F, $00
0000075B                            	smpsVcAlgorithm     $02
0000075B =00000002                M vcalgorithm	set	val
0000075B                            	smpsVcFeedback      $07
0000075B =00000007                M vcfeedback	set	val
0000075B                            	smpsVcUnusedBits    $00
0000075B =00000000                M vcunusedbits	set	val
0000075B =00000000                M vcd1r1unk	set	0
0000075B =00000000                M vcd1r2unk	set	0
0000075B =00000000                M vcd1r3unk	set	0
0000075B =00000000                M vcd1r4unk	set	0
0000075B                            	smpsVcDetune        $03, $05, $00, $03
0000075B =00000003                M vcdt1	set	op1
0000075B =00000005                M vcdt2	set	op2
0000075B =00000000                M vcdt3	set	op3
0000075B =00000003                M vcdt4	set	op4
0000075B                            	smpsVcCoarseFreq    $01, $02, $01, $02
0000075B =00000001                M vccf1	set	op1
0000075B =00000002                M vccf2	set	op2
0000075B =00000001                M vccf3	set	op3
0000075B =00000002                M vccf4	set	op4
0000075B                            	smpsVcRateScale     $00, $00, $00, $00
0000075B =00000000                M vcrs1	set	op1
0000075B =00000000                M vcrs2	set	op2
0000075B =00000000                M vcrs3	set	op3
0000075B =00000000                M vcrs4	set	op4
0000075B                            	smpsVcAttackRate    $18, $1F, $1F, $1F
0000075B =00000018                M vcar1	set	op1
0000075B =0000001F                M vcar2	set	op2
0000075B =0000001F                M vcar3	set	op3
0000075B =0000001F                M vcar4	set	op4
0000075B                            	smpsVcAmpMod        $00, $00, $00, $00
0000075B =00000000                M vcam1	set	op1<<7
0000075B =00000000                M vcam2	set	op2<<7
0000075B =00000000                M vcam3	set	op3<<7
0000075B =00000000                M vcam4	set	op4<<7
0000075B                            	smpsVcDecayRate1    $00, $00, $1F, $01
0000075B =00000000                M vcd1r1	set	op1
0000075B =00000000                M vcd1r2	set	op2
0000075B =0000001F                M vcd1r3	set	op3
0000075B =00000001                M vcd1r4	set	op4
0000075B                            	smpsVcDecayRate2    $00, $00, $0F, $00
0000075B =00000000                M vcd2r1	set	op1
0000075B =00000000                M vcd2r2	set	op2
0000075B =0000000F                M vcd2r3	set	op3
0000075B =00000000                M vcd2r4	set	op4
0000075B                            	smpsVcDecayLevel    $01, $00, $00, $05
0000075B =00000001                M vcdl1	set	op1
0000075B =00000000                M vcdl2	set	op2
0000075B =00000000                M vcdl3	set	op3
0000075B =00000005                M vcdl4	set	op4
0000075B                            	smpsVcReleaseRate   $0A, $03, $0F, $0A
0000075B =0000000A                M vcrr1	set	op1
0000075B =00000003                M vcrr2	set	op2
0000075B =0000000F                M vcrr3	set	op3
0000075B =0000000A                M vcrr4	set	op4
0000075B                            	smpsVcTotalLevel    $00, $4F, $30, $3B
0000075B =00000000                M vctl1	set	op1
0000075B =0000004F                M vctl2	set	op2
0000075B =00000030                M vctl3	set	op3
0000075B =0000003B                M vctl4	set	op4
0000075B 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000075C =00000000                M vctlmask4	set	0
0000075C =00000000                M vctlmask3	set	0
0000075C =00000000                M vctlmask2	set	0
0000075C =00000000                M vctlmask1	set	0
0000075C 3252 0131                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000760 1F1F 1F18                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000764 0100 1F00                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000768 0000 0F00                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000076C 5A03 0F1A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000770 3B4F 3000                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000774                            
00000774                            ;	Voice $05
00000774                            ;	$32
00000774                            ;	$71, $0D, $33, $01, 	$5F, $99, $5F, $94, 	$05, $05, $05, $07
00000774                            ;	$02, $02, $02, $02, 	$11, $11, $11, $77, 	$23, $2D, $26, $80
00000774                            	smpsVcAlgorithm     $02
00000774 =00000002                M vcalgorithm	set	val
00000774                            	smpsVcFeedback      $06
00000774 =00000006                M vcfeedback	set	val
00000774                            	smpsVcUnusedBits    $00
00000774 =00000000                M vcunusedbits	set	val
00000774 =00000000                M vcd1r1unk	set	0
00000774 =00000000                M vcd1r2unk	set	0
00000774 =00000000                M vcd1r3unk	set	0
00000774 =00000000                M vcd1r4unk	set	0
00000774                            	smpsVcDetune        $00, $03, $00, $07
00000774 =00000000                M vcdt1	set	op1
00000774 =00000003                M vcdt2	set	op2
00000774 =00000000                M vcdt3	set	op3
00000774 =00000007                M vcdt4	set	op4
00000774                            	smpsVcCoarseFreq    $01, $03, $0D, $01
00000774 =00000001                M vccf1	set	op1
00000774 =00000003                M vccf2	set	op2
00000774 =0000000D                M vccf3	set	op3
00000774 =00000001                M vccf4	set	op4
00000774                            	smpsVcRateScale     $02, $01, $02, $01
00000774 =00000002                M vcrs1	set	op1
00000774 =00000001                M vcrs2	set	op2
00000774 =00000002                M vcrs3	set	op3
00000774 =00000001                M vcrs4	set	op4
00000774                            	smpsVcAttackRate    $14, $1F, $19, $1F
00000774 =00000014                M vcar1	set	op1
00000774 =0000001F                M vcar2	set	op2
00000774 =00000019                M vcar3	set	op3
00000774 =0000001F                M vcar4	set	op4
00000774                            	smpsVcAmpMod        $00, $00, $00, $00
00000774 =00000000                M vcam1	set	op1<<7
00000774 =00000000                M vcam2	set	op2<<7
00000774 =00000000                M vcam3	set	op3<<7
00000774 =00000000                M vcam4	set	op4<<7
00000774                            	smpsVcDecayRate1    $07, $05, $05, $05
00000774 =00000007                M vcd1r1	set	op1
00000774 =00000005                M vcd1r2	set	op2
00000774 =00000005                M vcd1r3	set	op3
00000774 =00000005                M vcd1r4	set	op4
00000774                            	smpsVcDecayRate2    $02, $02, $02, $02
00000774 =00000002                M vcd2r1	set	op1
00000774 =00000002                M vcd2r2	set	op2
00000774 =00000002                M vcd2r3	set	op3
00000774 =00000002                M vcd2r4	set	op4
00000774                            	smpsVcDecayLevel    $07, $01, $01, $01
00000774 =00000007                M vcdl1	set	op1
00000774 =00000001                M vcdl2	set	op2
00000774 =00000001                M vcdl3	set	op3
00000774 =00000001                M vcdl4	set	op4
00000774                            	smpsVcReleaseRate   $07, $01, $01, $01
00000774 =00000007                M vcrr1	set	op1
00000774 =00000001                M vcrr2	set	op2
00000774 =00000001                M vcrr3	set	op3
00000774 =00000001                M vcrr4	set	op4
00000774                            	smpsVcTotalLevel    $80, $26, $2D, $23
00000774 =00000080                M vctl1	set	op1
00000774 =00000026                M vctl2	set	op2
00000774 =0000002D                M vctl3	set	op3
00000774 =00000023                M vctl4	set	op4
00000774 32                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000775 =00000000                M vctlmask4	set	0
00000775 =00000000                M vctlmask3	set	0
00000775 =00000000                M vctlmask2	set	0
00000775 =00000000                M vctlmask1	set	0
00000775 7133 0D01                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000779 5F5F 9994                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000077D 0505 0507                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000781 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000785 1111 1177                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000789 2326 2D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000078D                            
0000078D                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music12:	section	org($1380),file("sound/music/compressed/DEZ.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/DEZ.asm"	; include the actual music file for assembly
00000000                            DEZ_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000000                M sourcesmps2asm	set	0
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     DEZ_Voices
00000000 0000                     M 	dc.w	((dez_voices&$7fff)<<8)&$ff00+(dez_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $60
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$60
00000005 60                       M 	dc.b	$60
00000006                            
00000006                            	smpsHeaderDAC       DEZ_DAC
00000006                          M 	checkedchannelpointer	dez_dac
00000006 0000                     M 	dc.w	((dez_dac&$7fff)<<8)&$ff00+(dez_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        DEZ_FM1,	$00, $16
0000000A                          M 	checkedchannelpointer	dez_fm1
0000000A 0000                     M 	dc.w	((dez_fm1&$7fff)<<8)&$ff00+(dez_fm1&$7fff)>>8
0000000C 0016                     M 	dc.b	$00,$16
0000000E                            	smpsHeaderFM        DEZ_FM2,	$00, $08
0000000E                          M 	checkedchannelpointer	dez_fm2
0000000E 0000                     M 	dc.w	((dez_fm2&$7fff)<<8)&$ff00+(dez_fm2&$7fff)>>8
00000010 0008                     M 	dc.b	$00,$08
00000012                            	smpsHeaderFM        DEZ_FM3,	$00, $10
00000012                          M 	checkedchannelpointer	dez_fm3
00000012 0000                     M 	dc.w	((dez_fm3&$7fff)<<8)&$ff00+(dez_fm3&$7fff)>>8
00000014 0010                     M 	dc.b	$00,$10
00000016                            	smpsHeaderFM        DEZ_FM4,	$00, $10
00000016                          M 	checkedchannelpointer	dez_fm4
00000016 0000                     M 	dc.w	((dez_fm4&$7fff)<<8)&$ff00+(dez_fm4&$7fff)>>8
00000018 0010                     M 	dc.b	$00,$10
0000001A                            	smpsHeaderFM        DEZ_FM5,	$00, $06
0000001A                          M 	checkedchannelpointer	dez_fm5
0000001A 0000                     M 	dc.w	((dez_fm5&$7fff)<<8)&$ff00+(dez_fm5&$7fff)>>8
0000001C 0006                     M 	dc.b	$00,$06
0000001E                            	smpsHeaderPSG       DEZ_PSG1,	$E8, $06, $00, $00
0000001E                          M 	checkedchannelpointer	dez_psg1
0000001E 0000                     M 	dc.w	((dez_psg1&$7fff)<<8)&$ff00+(dez_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$e8
00000020 E8                       M 	dc.b	$e8
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       DEZ_PSG2,	$E8, $06, $00, $00
00000024                          M 	checkedchannelpointer	dez_psg2
00000024 0000                     M 	dc.w	((dez_psg2&$7fff)<<8)&$ff00+(dez_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$e8
00000026 E8                       M 	dc.b	$e8
00000027 06                       M 	dc.b	$06
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       DEZ_PSG3,	$00, $02, $00, fTone_01
0000002A                          M 	checkedchannelpointer	dez_psg3
0000002A 0000                     M 	dc.w	((dez_psg3&$7fff)<<8)&$ff00+(dez_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 02                       M 	dc.b	$02
0000002E 00                       M 	dc.b	$00
0000002F 01                       M 	dc.b	ftone_01
00000030                            
00000030                            ; FM1 Data
00000030                            DEZ_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032                            
00000032                            DEZ_Jump01:
00000032 C604 C4C7 C3C6 C2C5 C3C8+  	dc.b	nA5, $04, nG5, nBb5, nFs5, nA5, nF5, nAb5, nFs5, nB5, nF5, nA5
0000003E C4C7 C3C5 C2C6 C4C8 C2C7+  	dc.b	nG5, nBb5, nFs5, nAb5, nF5, nA5, nG5, nB5, nF5, nBb5, nFs5, nC6
0000004A C2C7 C4C8 C3C6 C2C5 C3C7+  	dc.b	nF5, nBb5, nG5, nB5, nFs5, nA5, nF5, nAb5, nFs5, nBb5, nE5, nG5
00000056 C0C6 C2C7 C3C8 C4C6 C2C5+  	dc.b	nEb5, nA5, nF5, nBb5, nFs5, nB5, nG5, nA5, nF5, nAb5, nFs5, nBb5
00000062 C4C8 C5C9 C6CA C4C9 C2C8+  	dc.b	nG5, nB5, nAb5, nC6, nA5, nCs6, nG5, nC6, nF5, nB5, nFs5, nBb5
0000006E C4C6 C2C5 C1C4 C0C6 C2C7+  	dc.b	nG5, nA5, nF5, nAb5, nE5, nG5, nEb5, nA5, nF5, nBb5, nFs5, nB5
0000007A C4C9 C5CC C4CB C2C9 C4C8+  	dc.b	nG5, nC6, nAb5, nEb6, nG5, nD6, nF5, nC6, nG5, nB5, nFs5, nBb5
00000086 C4C6 C2C5 C3C8 C2C6 C4C7+  	dc.b	nG5, nA5, nF5, nAb5, nFs5, nB5, nF5, nA5, nG5, nBb5, nFs5, nC6
00000092 C2C7 C3C8 C2C6 C1C5 C0C6+  	dc.b	nF5, nBb5, nFs5, nB5, nF5, nA5, nE5, nAb5, nEb5, nA5, nE5, nBb5
0000009E C2C8 C3C9 C4CB C2C7 C3C6+  	dc.b	nF5, nB5, nFs5, nC6, nG5, nD6, nF5, nBb5, nFs5, nA5, nG5, nB5
000000AA C3C7 C2C8 C1C6 C2C7 C4C8+  	dc.b	nFs5, nBb5, nF5, nB5, nE5, nA5, nF5, nBb5, nG5, nB5, nFs5, nA5
000000B6 C2C7 C3C9 C1CB C0CA C2C9+  	dc.b	nF5, nBb5, nFs5, nC6, nE5, nD6, nEb5, nCs6, nF5, nC6, nFs5, nB5
000000C2 C2C7 C4C6 C3C5 C2C6 C3C7+  	dc.b	nF5, nBb5, nG5, nA5, nFs5, nAb5, nF5, nA5, nFs5, nBb5, nG5, nB5
000000CE C5C9 C2C6 C3C7 C2C8 C1C9+  	dc.b	nAb5, nC6, nF5, nA5, nFs5, nBb5, nF5, nB5, nE5, nC6, nF5, nB5
000000DA C3C6 C4C7 C3C5 C2C6 C4C7+  	dc.b	nFs5, nA5, nG5, nBb5, nFs5, nAb5, nF5, nA5, nG5, nBb5, nFs5, nB5
000000E6 C2C9 C1C7 C2C6 C3C8 C4C5+  	dc.b	nF5, nC6, nE5, nBb5, nF5, nA5, nFs5, nB5, nG5, nAb5, nF5, nA5
000000F2 C3C7 C2C8 C1C9 C0CA C1C7+  	dc.b	nFs5, nBb5, nF5, nB5, nE5, nC6, nEb5, nCs6, nE5, nBb5, nF5, nA5
000000FE C3C5 C4C8 C2C6 C3C7 C4C5+  	dc.b	nFs5, nAb5, nG5, nB5, nF5, nA5, nFs5, nBb5, nG5, nAb5, nF5, nB5
0000010A C1C9 C0C7 C2C6 C3C8 C4C7+  	dc.b	nE5, nC6, nEb5, nBb5, nF5, nA5, nFs5, nB5, nG5, nBb5, nF5, nA5
00000116 C3C5 C4C8 C2C7 C3C9 BFC8+  	dc.b	nFs5, nAb5, nG5, nB5, nF5, nBb5, nFs5, nC6, nD5, nB5, nF5, nA5
00000122 C3C7 C4C5 C3C6 C2C7 C1C8+  	dc.b	nFs5, nBb5, nG5, nAb5, nFs5, nA5, nF5, nBb5, nE5, nB5, nEb5, nC6
0000012E C2CA C3C8 C4C7 C3C6 C2C5+  	dc.b	nF5, nCs6, nFs5, nB5, nG5, nBb5, nFs5, nA5, nF5, nAb5, nEb5, nG5
0000013A C2C6 C3C7 C4C8 C5C9 C4C7+  	dc.b	nF5, nA5, nFs5, nBb5, nG5, nB5, nAb5, nC6, nG5, nBb5, nFs5, nA5
00000146 C4C8 C2C7 C3C6 C4C8 C2C7+  	dc.b	nG5, nB5, nF5, nBb5, nFs5, nA5, nG5, nB5, nF5, nBb5, nFs5, nA5
00000152 C2                         	dc.b	nF5
00000153                            	smpsJump            DEZ_Jump01
00000153 F6                       M 	dc.b	$f6
00000154 0000                     M 	dc.w	((dez_jump01&$7fff)<<8)&$ff00+(dez_jump01&$7fff)>>8
00000156                            
00000156                            ; FM3 Data
00000156                            DEZ_FM3:
00000156                            	smpsSetvoice        $02
00000156                          M 	smpsfmvoice	$02
00000156 EF02                     M 	dc.b	$ef,$02
00000158                            	smpsModSet          $08, $01, $05, $04
00000158 F0                       M 	dc.b	$f0
00000159 0801 0504                M 	dc.b	$08,$01,$05,$04
0000015D                            
0000015D                            DEZ_Loop06:
0000015D 8030                       	dc.b	nRst, $30
0000015F                            
0000015F                            DEZ_Loop05:
0000015F 8008 CC02 CAC6 80CC CAC6+  	dc.b	nRst, $08, nEb6, $02, nCs6, nA5, nRst, nEb6, nCs6, nA5, nRst
0000016A                            	smpsLoop            $01, $02, DEZ_Loop05
0000016A F7                       M 	dc.b	$f7
0000016B 0102                     M 	dc.b	index,loops
0000016D 0000                     M 	dc.w	((dez_loop05&$7fff)<<8)&$ff00+(dez_loop05&$7fff)>>8
0000016F                            	smpsLoop            $00, $02, DEZ_Loop06
0000016F F7                       M 	dc.b	$f7
00000170 0002                     M 	dc.b	index,loops
00000172 0000                     M 	dc.w	((dez_loop06&$7fff)<<8)&$ff00+(dez_loop06&$7fff)>>8
00000174                            	smpsCall            DEZ_Call00
00000174 F8                       M 	dc.b	$f8
00000175 0000                     M 	dc.w	((dez_call00&$7fff)<<8)&$ff00+(dez_call00&$7fff)>>8
00000177 BA10 BC08 BE10 BA08 C10C+  	dc.b	nA4, $10, nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04
00000183 C108 BE10 BA08 C610 C304+  	dc.b	nE5, $08, nCs5, $10, nA4, $08, nA5, $10, nFs5, $04, nA5, nFs5
0000018F 10C1 04C3 C118 C310 BE08+  	dc.b	$10, nE5, $04, nFs5, nE5, $18, nFs5, $10, nCs5, $08, nA4, $10
0000019B BC08 BE10 BA08 C10C C304+  	dc.b	nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04, nE5, $08
000001A7 BE10 BA08 C660             	dc.b	nCs5, $10, nA4, $08, nA5, $60
000001AD                            
000001AD                            DEZ_Loop07:
000001AD CD04 CBCA 10               	dc.b	nE6, $04, nD6, nCs6, $10
000001B2                            	smpsLoop            $00, $03, DEZ_Loop07
000001B2 F7                       M 	dc.b	$f7
000001B3 0003                     M 	dc.b	index,loops
000001B5 0000                     M 	dc.w	((dez_loop07&$7fff)<<8)&$ff00+(dez_loop07&$7fff)>>8
000001B7 CD04 CBCA 08C6 CA30 80     	dc.b	nE6, $04, nD6, nCs6, $08, nA5, nCs6, $30, nRst
000001C0                            	smpsJump            DEZ_FM3
000001C0 F6                       M 	dc.b	$f6
000001C1 0000                     M 	dc.w	((dez_fm3&$7fff)<<8)&$ff00+(dez_fm3&$7fff)>>8
000001C3                            
000001C3                            DEZ_Call00:
000001C3                            	smpsSetvoice        $03
000001C3                          M 	smpsfmvoice	$03
000001C3 EF03                     M 	dc.b	$ef,$03
000001C5 BA10 BC08 BE10 BA08 C10C+  	dc.b	nA4, $10, nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04
000001D1 C108 BE10 BA08 C618 C3C1+  	dc.b	nE5, $08, nCs5, $10, nA4, $08, nA5, $18, nFs5, nE5, nCs5, nA4
000001DD 10BC 08BE 10BA 08C1 0CC3+  	dc.b	$10, nB4, $08, nCs5, $10, nA4, $08, nE5, $0C, nFs5, $04, nE5
000001E9 08BE 10BA 08C6 20C3 08C5+  	dc.b	$08, nCs5, $10, nA4, $08, nA5, $20, nFs5, $08, nAb5, nA5, $30
000001F5                            	smpsReturn
000001F5 E3                       M 	dc.b	$e3
000001F6                            
000001F6                            ; FM4 Data
000001F6                            DEZ_FM4:
000001F6                            	smpsSetvoice        $02
000001F6                          M 	smpsfmvoice	$02
000001F6 EF02                     M 	dc.b	$ef,$02
000001F8                            	smpsModSet          $08, $01, $05, $04
000001F8 F0                       M 	dc.b	$f0
000001F9 0801 0504                M 	dc.b	$08,$01,$05,$04
000001FD                            
000001FD                            DEZ_Loop03:
000001FD                            	smpsAlterNote       $02
000001FD                          M 	smpsdetune	$02
000001FD E102                     M 	dc.b	$e1,$02
000001FF 8030                       	dc.b	nRst, $30
00000201                            
00000201                            DEZ_Loop02:
00000201 8008 CC02 CAC6 80CC CAC6+  	dc.b	nRst, $08, nEb6, $02, nCs6, nA5, nRst, nEb6, nCs6, nA5, nRst
0000020C                            	smpsLoop            $01, $02, DEZ_Loop02
0000020C F7                       M 	dc.b	$f7
0000020D 0102                     M 	dc.b	index,loops
0000020F 0000                     M 	dc.w	((dez_loop02&$7fff)<<8)&$ff00+(dez_loop02&$7fff)>>8
00000211                            	smpsLoop            $00, $02, DEZ_Loop03
00000211 F7                       M 	dc.b	$f7
00000212 0002                     M 	dc.b	index,loops
00000214 0000                     M 	dc.w	((dez_loop03&$7fff)<<8)&$ff00+(dez_loop03&$7fff)>>8
00000216                            	smpsCall            DEZ_Call00
00000216 F8                       M 	dc.b	$f8
00000217 0000                     M 	dc.w	((dez_call00&$7fff)<<8)&$ff00+(dez_call00&$7fff)>>8
00000219 BE10 BF08 C110 BE08 C50C+  	dc.b	nCs5, $10, nD5, $08, nE5, $10, nCs5, $08, nAb5, $0C, nA5, $04
00000225 C508 C110 BE08 CA10 C604+  	dc.b	nAb5, $08, nE5, $10, nCs5, $08, nCs6, $10, nA5, $04, nCs6, nA5
00000231 10C5 04C6 C518 C610 C108+  	dc.b	$10, nAb5, $04, nA5, nAb5, $18, nA5, $10, nE5, $08, nCs5, $10
0000023D BF08 C110 BE08 C50C C604+  	dc.b	nD5, $08, nE5, $10, nCs5, $08, nAb5, $0C, nA5, $04, nAb5, $08
00000249 C110 BE08 CA60             	dc.b	nE5, $10, nCs5, $08, nCs6, $60
0000024F                            
0000024F                            DEZ_Loop04:
0000024F CA04 C8C6 10               	dc.b	nCs6, $04, nB5, nA5, $10
00000254                            	smpsLoop            $00, $03, DEZ_Loop04
00000254 F7                       M 	dc.b	$f7
00000255 0003                     M 	dc.b	index,loops
00000257 0000                     M 	dc.w	((dez_loop04&$7fff)<<8)&$ff00+(dez_loop04&$7fff)>>8
00000259 CA04 C8C6 08C3 C630 80     	dc.b	nCs6, $04, nB5, nA5, $08, nFs5, nA5, $30, nRst
00000262                            	smpsJump            DEZ_Loop03
00000262 F6                       M 	dc.b	$f6
00000263 0000                     M 	dc.w	((dez_loop03&$7fff)<<8)&$ff00+(dez_loop03&$7fff)>>8
00000265                            
00000265                            ; FM5 Data
00000265                            DEZ_FM5:
00000265                            	smpsSetvoice        $05
00000265                          M 	smpsfmvoice	$05
00000265 EF05                     M 	dc.b	$ef,$05
00000267                            	smpsNoteFill        $00
00000267 E800                     M 	dc.b	$e8,$00
00000269                            	smpsAlterVol        $0C
00000269 E60C                     M 	dc.b	$e6,$0c
0000026B A230                       	dc.b	nA2, $30
0000026D                            	smpsModSet          $10, $01, $FF, $FF
0000026D F0                       M 	dc.b	$f0
0000026E 1001 FFFF                M 	dc.b	$10,$01,$ff,$ff
00000272 E730 E7                    	dc.b	smpsNoAttack, $30, smpsNoAttack
00000275                            	smpsModSet          $00, $01, $10, $FF
00000275 F0                       M 	dc.b	$f0
00000276 0001 10FF                M 	dc.b	$00,$01,$10,$ff
0000027A A008                       	dc.b	nG2, $08
0000027C                            	smpsModOff
0000027C F4                       M 	dc.b	$f4
0000027D A540                       	dc.b	nC3, $40
0000027F                            	smpsModSet          $10, $01, $FE, $FF
0000027F F0                       M 	dc.b	$f0
00000280 1001 FEFF                M 	dc.b	$10,$01,$fe,$ff
00000284 E718                       	dc.b	smpsNoAttack, $18
00000286                            	smpsAlterVol        $F4
00000286 E6F4                     M 	dc.b	$e6,$f4
00000288                            	smpsSetvoice        $04
00000288                          M 	smpsfmvoice	$04
00000288 EF04                     M 	dc.b	$ef,$04
0000028A                            	smpsNoteFill        $09
0000028A E809                     M 	dc.b	$e8,$09
0000028C                            
0000028C                            DEZ_Loop00:
0000028C A204 8028 A104 A2A2 0280+  	dc.b	nA2, $04, nRst, $28, nAb2, $04, nA2, nA2, $02, nRst, $2A, nA2
00000298 0480 28A1 04A2 A280 18BA+  	dc.b	$04, nRst, $28, nAb2, $04, nA2, nA2, nRst, $18, nA4, $04, nB4
000002A4 BDBE                       	dc.b	nC5, nCs5
000002A6                            	smpsLoop            $00, $04, DEZ_Loop00
000002A6 F7                       M 	dc.b	$f7
000002A7 0004                     M 	dc.b	index,loops
000002A9 0000                     M 	dc.w	((dez_loop00&$7fff)<<8)&$ff00+(dez_loop00&$7fff)>>8
000002AB                            
000002AB                            DEZ_Loop01:
000002AB A204 80BA BAB7 BA          	dc.b	nA2, $04, nRst, nA4, nA4, nFs4, nA4
000002B2                            	smpsLoop            $00, $04, DEZ_Loop01
000002B2 F7                       M 	dc.b	$f7
000002B3 0004                     M 	dc.b	index,loops
000002B5 0000                     M 	dc.w	((dez_loop01&$7fff)<<8)&$ff00+(dez_loop01&$7fff)>>8
000002B7 A204 8028 A104 A2A2 BABC+  	dc.b	nA2, $04, nRst, $28, nAb2, $04, nA2, nA2, nA4, nB4, nC5, nCs5
000002C3 8008 BA04 BCBD BE          	dc.b	nRst, $08, nA4, $04, nB4, nC5, nCs5
000002CA                            	smpsJump            DEZ_FM5
000002CA F6                       M 	dc.b	$f6
000002CB 0000                     M 	dc.w	((dez_fm5&$7fff)<<8)&$ff00+(dez_fm5&$7fff)>>8
000002CD                            
000002CD                            ; FM2 Data
000002CD                            DEZ_FM2:
000002CD                            	smpsSetvoice        $01
000002CD                          M 	smpsfmvoice	$01
000002CD EF01                     M 	dc.b	$ef,$01
000002CF                            	smpsNoteFill        $0A
000002CF E80A                     M 	dc.b	$e8,$0a
000002D1                            
000002D1                            DEZ_Jump00:
000002D1 9604 A2A2 96A0 969F 969E+  	dc.b	nA1, $04, nA2, nA2, nA1, nG2, nA1, nFs2, nA1, nF2, nF2, nA1
000002DD 9D96 0280 2E96 04A2 A296+  	dc.b	nE2, nA1, $02, nRst, $2E, nA1, $04, nA2, nA2, nA1, nG2, nA1
000002E9 9F96 A5A5 96A5 9602 802E   	dc.b	nFs2, nA1, nC3, nC3, nA1, nC3, nA1, $02, nRst, $2E
000002F3                            	smpsJump            DEZ_Jump00
000002F3 F6                       M 	dc.b	$f6
000002F4 0000                     M 	dc.w	((dez_jump00&$7fff)<<8)&$ff00+(dez_jump00&$7fff)>>8
000002F6                            
000002F6                            ; PSG2 Data
000002F6                            DEZ_PSG2:
000002F6                            	smpsAlterNote       $FE
000002F6                          M 	smpsdetune	$fe
000002F6 E1FE                     M 	dc.b	$e1,$fe
000002F8                            
000002F8                            ; PSG1 Data
000002F8                            DEZ_PSG1:
000002F8 8018                       	dc.b	nRst, $18
000002FA                            	smpsLoop            $00, $18, DEZ_PSG1
000002FA F7                       M 	dc.b	$f7
000002FB 0018                     M 	dc.b	index,loops
000002FD 0000                     M 	dc.w	((dez_psg1&$7fff)<<8)&$ff00+(dez_psg1&$7fff)>>8
000002FF                            
000002FF                            DEZ_Loop09:
000002FF                            	smpsModSet          $06, $02, $FE, $FF
000002FF F0                       M 	dc.b	$f0
00000300 0602 FEFF                M 	dc.b	$06,$02,$fe,$ff
00000304 A018                       	dc.b	nG2, $18
00000306                            	smpsModOff
00000306 F4                       M 	dc.b	$f4
00000307 A230                       	dc.b	nA2, $30
00000309                            	smpsModSet          $06, $01, $01, $FF
00000309 F0                       M 	dc.b	$f0
0000030A 0601 01FF                M 	dc.b	$06,$01,$01,$ff
0000030E E718                       	dc.b	smpsNoAttack, $18
00000310                            	smpsModSet          $00, $01, $FA, $FF
00000310 F0                       M 	dc.b	$f0
00000311 0001 FAFF                M 	dc.b	$00,$01,$fa,$ff
00000315 A008                       	dc.b	nG2, $08
00000317                            	smpsModOff
00000317 F4                       M 	dc.b	$f4
00000318 A540                       	dc.b	nC3, $40
0000031A                            	smpsModSet          $00, $01, $01, $FF
0000031A F0                       M 	dc.b	$f0
0000031B 0001 01FF                M 	dc.b	$00,$01,$01,$ff
0000031F E718                       	dc.b	smpsNoAttack, $18
00000321                            	smpsLoop            $00, $02, DEZ_Loop09
00000321 F7                       M 	dc.b	$f7
00000322 0002                     M 	dc.b	index,loops
00000324 0000                     M 	dc.w	((dez_loop09&$7fff)<<8)&$ff00+(dez_loop09&$7fff)>>8
00000326                            
00000326                            DEZ_Loop0A:
00000326                            	smpsModSet          $00, $01, $FD, $FF
00000326 F0                       M 	dc.b	$f0
00000327 0001 FDFF                M 	dc.b	$00,$01,$fd,$ff
0000032B A008                       	dc.b	nG2, $08
0000032D                            	smpsModOff
0000032D F4                       M 	dc.b	$f4
0000032E A210                       	dc.b	nA2, $10
00000330                            	smpsModSet          $00, $01, $FC, $FF
00000330 F0                       M 	dc.b	$f0
00000331 0001 FCFF                M 	dc.b	$00,$01,$fc,$ff
00000335 08                         	dc.b	$08
00000336                            	smpsModOff
00000336 F4                       M 	dc.b	$f4
00000337 A510                       	dc.b	nC3, $10
00000339                            	smpsLoop            $00, $02, DEZ_Loop0A
00000339 F7                       M 	dc.b	$f7
0000033A 0002                     M 	dc.b	index,loops
0000033C 0000                     M 	dc.w	((dez_loop0a&$7fff)<<8)&$ff00+(dez_loop0a&$7fff)>>8
0000033E                            	smpsModSet          $00, $01, $FD, $FF
0000033E F0                       M 	dc.b	$f0
0000033F 0001 FDFF                M 	dc.b	$00,$01,$fd,$ff
00000343 A008                       	dc.b	nG2, $08
00000345                            	smpsModOff
00000345 F4                       M 	dc.b	$f4
00000346 A240                       	dc.b	nA2, $40
00000348                            	smpsModSet          $06, $01, $01, $FF
00000348 F0                       M 	dc.b	$f0
00000349 0601 01FF                M 	dc.b	$06,$01,$01,$ff
0000034D E718                       	dc.b	smpsNoAttack, $18
0000034F                            	smpsJump            DEZ_PSG1
0000034F F6                       M 	dc.b	$f6
00000350 0000                     M 	dc.w	((dez_psg1&$7fff)<<8)&$ff00+(dez_psg1&$7fff)>>8
00000352                            
00000352                            ; DAC Data
00000352                            DEZ_DAC:
00000352 8030 8204 8181 1082 0481+  	dc.b	nRst, $30, dSnare, $04, dKick, dKick, $10, dSnare, $04, dKick, dKick, $10
0000035E 8030 8204 8180 8180 8181+  	dc.b	nRst, $30, dSnare, $04, dKick, nRst, dKick, nRst, dKick, dKick, dKick, dSnare
0000036A 0882 8108 8204 0408 8182+  	dc.b	$08, dSnare, dKick, $08, dSnare, $04, $04, $08, dKick, dSnare, dSnare, dKick
00000376 820C 0481 0882 8281 8204+  	dc.b	dSnare, $0C, $04, dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $08, $04
00000382 8108 8282 8182 0408 0481+  	dc.b	dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $08, $04, dKick, $08, dSnare
0000038E 0404 0881 8282 8182 0408+  	dc.b	$04, $04, $08, dKick, dSnare, dSnare, dKick, dSnare, $04, $08, $04, dKick
0000039A 0882 8281 0882 0404 0881+  	dc.b	$08, dSnare, dSnare, dKick, $08, dSnare, $04, $04, $08, dKick, dSnare, dSnare
000003A6 8182 0408 0481 0882 8281+  	dc.b	dKick, dSnare, $04, $08, $04, dKick, $08, dSnare, dSnare, dKick, dSnare, $04
000003B2 8281 8281 0882 8281 8204+  	dc.b	dSnare, dKick, dSnare, dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $08, $04
000003BE 8108 8282 8108 8204 0408+  	dc.b	dKick, $08, dSnare, dSnare, dKick, $08, dSnare, $04, $04, $08, dKick, dSnare
000003CA 8281 8204 0804 8108 8282+  	dc.b	dSnare, dKick, dSnare, $04, $08, $04, dKick, $08, dSnare, dSnare, dKick, $04
000003D6 8182 8182 8181 0882 8281+  	dc.b	dKick, dSnare, dKick, dSnare, dKick, dKick, $08, dSnare, dSnare, dKick, dSnare, $04
000003E2 0804 8108 8282 8182 0404+  	dc.b	$08, $04, dKick, $08, dSnare, dSnare, dKick, dSnare, $04, $04, $08, dKick
000003EE 8282 8182 0408 0481 0882+  	dc.b	dSnare, dSnare, dKick, dSnare, $04, $08, $04, dKick, $08, dSnare, dSnare, dSnare
000003FA 0481 0804 8281 8108 8282+  	dc.b	$04, dKick, $08, $04, dSnare, dKick, dKick, $08, dSnare, dSnare, dKick, $08
00000406 8204 8282 8281 0882 8281+  	dc.b	dSnare, $04, dSnare, dSnare, dSnare, dKick, $08, dSnare, dSnare, dKick, $08, dSnare
00000412 0482 8282 8108 8282 8108+  	dc.b	$04, dSnare, dSnare, dSnare, dKick, $08, dSnare, dSnare, dKick, $08, dSnare, $04
0000041E 0804 8204 8108 0482 8182+  	dc.b	$08, $04, dSnare, $04, dKick, $08, $04, dSnare, dKick, dSnare, $04, dKick
0000042A 0804 8281                  	dc.b	$08, $04, dSnare, dKick
0000042E                            	smpsJump            DEZ_DAC
0000042E F6                       M 	dc.b	$f6
0000042F 0000                     M 	dc.w	((dez_dac&$7fff)<<8)&$ff00+(dez_dac&$7fff)>>8
00000431                            
00000431                            ; PSG3 Data
00000431                            DEZ_PSG3:
00000431                            	smpsPSGform         $E7
00000431 F3E7                     M 	dc.b	$f3,$e7
00000433                            
00000433                            DEZ_Jump02:
00000433 8008 C6C6 8008 C6C6 8030+  	dc.b	nRst, $08, nMaxPSG, nMaxPSG, nRst, $08, nMaxPSG, nMaxPSG, nRst, $30, nRst, $08
0000043F C6C6 8008 C6C6 8030        	dc.b	nMaxPSG, nMaxPSG, nRst, $08, nMaxPSG, nMaxPSG, nRst, $30
00000447                            
00000447                            DEZ_Loop08:
00000447 8018                       	dc.b	nRst, $18
00000449                            	smpsLoop            $00, $28, DEZ_Loop08
00000449 F7                       M 	dc.b	$f7
0000044A 0028                     M 	dc.b	index,loops
0000044C 0000                     M 	dc.w	((dez_loop08&$7fff)<<8)&$ff00+(dez_loop08&$7fff)>>8
0000044E                            	smpsJump            DEZ_Jump02
0000044E F6                       M 	dc.b	$f6
0000044F 0000                     M 	dc.w	((dez_jump02&$7fff)<<8)&$ff00+(dez_jump02&$7fff)>>8
00000451                            
00000451                            DEZ_Voices:
00000451                            ;	Voice $00
00000451                            ;	$30
00000451                            ;	$75, $75, $71, $31, 	$D8, $58, $96, $94, 	$01, $1B, $03, $08
00000451                            ;	$01, $04, $01, $01, 	$FF, $2F, $3F, $3F, 	$34, $29, $10, $80
00000451                            	smpsVcAlgorithm     $00
00000451 =00000000                M vcalgorithm	set	val
00000451                            	smpsVcFeedback      $06
00000451 =00000006                M vcfeedback	set	val
00000451                            	smpsVcUnusedBits    $00
00000451 =00000000                M vcunusedbits	set	val
00000451 =00000000                M vcd1r1unk	set	0
00000451 =00000000                M vcd1r2unk	set	0
00000451 =00000000                M vcd1r3unk	set	0
00000451 =00000000                M vcd1r4unk	set	0
00000451                            	smpsVcDetune        $03, $07, $07, $07
00000451 =00000003                M vcdt1	set	op1
00000451 =00000007                M vcdt2	set	op2
00000451 =00000007                M vcdt3	set	op3
00000451 =00000007                M vcdt4	set	op4
00000451                            	smpsVcCoarseFreq    $01, $01, $05, $05
00000451 =00000001                M vccf1	set	op1
00000451 =00000001                M vccf2	set	op2
00000451 =00000005                M vccf3	set	op3
00000451 =00000005                M vccf4	set	op4
00000451                            	smpsVcRateScale     $02, $02, $01, $03
00000451 =00000002                M vcrs1	set	op1
00000451 =00000002                M vcrs2	set	op2
00000451 =00000001                M vcrs3	set	op3
00000451 =00000003                M vcrs4	set	op4
00000451                            	smpsVcAttackRate    $14, $16, $18, $18
00000451 =00000014                M vcar1	set	op1
00000451 =00000016                M vcar2	set	op2
00000451 =00000018                M vcar3	set	op3
00000451 =00000018                M vcar4	set	op4
00000451                            	smpsVcAmpMod        $00, $00, $00, $00
00000451 =00000000                M vcam1	set	op1<<5
00000451 =00000000                M vcam2	set	op2<<5
00000451 =00000000                M vcam3	set	op3<<5
00000451 =00000000                M vcam4	set	op4<<5
00000451                            	smpsVcDecayRate1    $08, $03, $1B, $01
00000451 =00000008                M vcd1r1	set	op1
00000451 =00000003                M vcd1r2	set	op2
00000451 =0000001B                M vcd1r3	set	op3
00000451 =00000001                M vcd1r4	set	op4
00000451                            	smpsVcDecayRate2    $01, $01, $04, $01
00000451 =00000001                M vcd2r1	set	op1
00000451 =00000001                M vcd2r2	set	op2
00000451 =00000004                M vcd2r3	set	op3
00000451 =00000001                M vcd2r4	set	op4
00000451                            	smpsVcDecayLevel    $03, $03, $02, $0F
00000451 =00000003                M vcdl1	set	op1
00000451 =00000003                M vcdl2	set	op2
00000451 =00000002                M vcdl3	set	op3
00000451 =0000000F                M vcdl4	set	op4
00000451                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000451 =0000000F                M vcrr1	set	op1
00000451 =0000000F                M vcrr2	set	op2
00000451 =0000000F                M vcrr3	set	op3
00000451 =0000000F                M vcrr4	set	op4
00000451                            	smpsVcTotalLevel    $00, $10, $29, $34
00000451 =00000000                M vctl1	set	op1
00000451 =00000010                M vctl2	set	op2
00000451 =00000029                M vctl3	set	op3
00000451 =00000034                M vctl4	set	op4
00000451 30                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000452 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000452 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000452 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000452 =00000080                M vctlmask1	set	$80
00000452 7571 7531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000456 D896 5894                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000045A 0103 1B08                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000045E 0101 0401                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000462 FF3F 2F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000466 3410 2980                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000046A                            
0000046A                            ;	Voice $01
0000046A                            ;	$3A
0000046A                            ;	$32, $11, $72, $11, 	$1F, $1F, $9F, $1F, 	$03, $0A, $03, $0A
0000046A                            ;	$02, $02, $02, $02, 	$AF, $7F, $AF, $7F, 	$1E, $00, $28, $80
0000046A                            	smpsVcAlgorithm     $02
0000046A =00000002                M vcalgorithm	set	val
0000046A                            	smpsVcFeedback      $07
0000046A =00000007                M vcfeedback	set	val
0000046A                            	smpsVcUnusedBits    $00
0000046A =00000000                M vcunusedbits	set	val
0000046A =00000000                M vcd1r1unk	set	0
0000046A =00000000                M vcd1r2unk	set	0
0000046A =00000000                M vcd1r3unk	set	0
0000046A =00000000                M vcd1r4unk	set	0
0000046A                            	smpsVcDetune        $01, $07, $01, $03
0000046A =00000001                M vcdt1	set	op1
0000046A =00000007                M vcdt2	set	op2
0000046A =00000001                M vcdt3	set	op3
0000046A =00000003                M vcdt4	set	op4
0000046A                            	smpsVcCoarseFreq    $01, $02, $01, $02
0000046A =00000001                M vccf1	set	op1
0000046A =00000002                M vccf2	set	op2
0000046A =00000001                M vccf3	set	op3
0000046A =00000002                M vccf4	set	op4
0000046A                            	smpsVcRateScale     $00, $02, $00, $00
0000046A =00000000                M vcrs1	set	op1
0000046A =00000002                M vcrs2	set	op2
0000046A =00000000                M vcrs3	set	op3
0000046A =00000000                M vcrs4	set	op4
0000046A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000046A =0000001F                M vcar1	set	op1
0000046A =0000001F                M vcar2	set	op2
0000046A =0000001F                M vcar3	set	op3
0000046A =0000001F                M vcar4	set	op4
0000046A                            	smpsVcAmpMod        $00, $00, $00, $00
0000046A =00000000                M vcam1	set	op1<<5
0000046A =00000000                M vcam2	set	op2<<5
0000046A =00000000                M vcam3	set	op3<<5
0000046A =00000000                M vcam4	set	op4<<5
0000046A                            	smpsVcDecayRate1    $0A, $03, $0A, $03
0000046A =0000000A                M vcd1r1	set	op1
0000046A =00000003                M vcd1r2	set	op2
0000046A =0000000A                M vcd1r3	set	op3
0000046A =00000003                M vcd1r4	set	op4
0000046A                            	smpsVcDecayRate2    $02, $02, $02, $02
0000046A =00000002                M vcd2r1	set	op1
0000046A =00000002                M vcd2r2	set	op2
0000046A =00000002                M vcd2r3	set	op3
0000046A =00000002                M vcd2r4	set	op4
0000046A                            	smpsVcDecayLevel    $07, $0A, $07, $0A
0000046A =00000007                M vcdl1	set	op1
0000046A =0000000A                M vcdl2	set	op2
0000046A =00000007                M vcdl3	set	op3
0000046A =0000000A                M vcdl4	set	op4
0000046A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000046A =0000000F                M vcrr1	set	op1
0000046A =0000000F                M vcrr2	set	op2
0000046A =0000000F                M vcrr3	set	op3
0000046A =0000000F                M vcrr4	set	op4
0000046A                            	smpsVcTotalLevel    $00, $28, $00, $1E
0000046A =00000000                M vctl1	set	op1
0000046A =00000028                M vctl2	set	op2
0000046A =00000000                M vctl3	set	op3
0000046A =0000001E                M vctl4	set	op4
0000046A 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000046B =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000046B =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000046B =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000046B =00000080                M vctlmask1	set	$80
0000046B 3272 1111                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000046F 1F9F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000473 0303 0A0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000477 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000047B AFAF 7F7F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000047F 1E28 0080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000483                            
00000483                            ;	Voice $02
00000483                            ;	$3A
00000483                            ;	$11, $15, $01, $11, 	$59, $59, $5C, $4E, 	$0A, $0B, $0D, $04
00000483                            ;	$00, $00, $00, $00, 	$1F, $5F, $2F, $0F, 	$1A, $0E, $2E, $80
00000483                            	smpsVcAlgorithm     $02
00000483 =00000002                M vcalgorithm	set	val
00000483                            	smpsVcFeedback      $07
00000483 =00000007                M vcfeedback	set	val
00000483                            	smpsVcUnusedBits    $00
00000483 =00000000                M vcunusedbits	set	val
00000483 =00000000                M vcd1r1unk	set	0
00000483 =00000000                M vcd1r2unk	set	0
00000483 =00000000                M vcd1r3unk	set	0
00000483 =00000000                M vcd1r4unk	set	0
00000483                            	smpsVcDetune        $01, $00, $01, $01
00000483 =00000001                M vcdt1	set	op1
00000483 =00000000                M vcdt2	set	op2
00000483 =00000001                M vcdt3	set	op3
00000483 =00000001                M vcdt4	set	op4
00000483                            	smpsVcCoarseFreq    $01, $01, $05, $01
00000483 =00000001                M vccf1	set	op1
00000483 =00000001                M vccf2	set	op2
00000483 =00000005                M vccf3	set	op3
00000483 =00000001                M vccf4	set	op4
00000483                            	smpsVcRateScale     $01, $01, $01, $01
00000483 =00000001                M vcrs1	set	op1
00000483 =00000001                M vcrs2	set	op2
00000483 =00000001                M vcrs3	set	op3
00000483 =00000001                M vcrs4	set	op4
00000483                            	smpsVcAttackRate    $0E, $1C, $19, $19
00000483 =0000000E                M vcar1	set	op1
00000483 =0000001C                M vcar2	set	op2
00000483 =00000019                M vcar3	set	op3
00000483 =00000019                M vcar4	set	op4
00000483                            	smpsVcAmpMod        $00, $00, $00, $00
00000483 =00000000                M vcam1	set	op1<<5
00000483 =00000000                M vcam2	set	op2<<5
00000483 =00000000                M vcam3	set	op3<<5
00000483 =00000000                M vcam4	set	op4<<5
00000483                            	smpsVcDecayRate1    $04, $0D, $0B, $0A
00000483 =00000004                M vcd1r1	set	op1
00000483 =0000000D                M vcd1r2	set	op2
00000483 =0000000B                M vcd1r3	set	op3
00000483 =0000000A                M vcd1r4	set	op4
00000483                            	smpsVcDecayRate2    $00, $00, $00, $00
00000483 =00000000                M vcd2r1	set	op1
00000483 =00000000                M vcd2r2	set	op2
00000483 =00000000                M vcd2r3	set	op3
00000483 =00000000                M vcd2r4	set	op4
00000483                            	smpsVcDecayLevel    $00, $02, $05, $01
00000483 =00000000                M vcdl1	set	op1
00000483 =00000002                M vcdl2	set	op2
00000483 =00000005                M vcdl3	set	op3
00000483 =00000001                M vcdl4	set	op4
00000483                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000483 =0000000F                M vcrr1	set	op1
00000483 =0000000F                M vcrr2	set	op2
00000483 =0000000F                M vcrr3	set	op3
00000483 =0000000F                M vcrr4	set	op4
00000483                            	smpsVcTotalLevel    $00, $2E, $0E, $1A
00000483 =00000000                M vctl1	set	op1
00000483 =0000002E                M vctl2	set	op2
00000483 =0000000E                M vctl3	set	op3
00000483 =0000001A                M vctl4	set	op4
00000483 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000484 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
00000484 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
00000484 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
00000484 =00000080                M vctlmask1	set	$80
00000484 1101 1511                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000488 595C 594E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000048C 0A0D 0B04                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000490 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000494 1F2F 5F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000498 1A2E 0E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000049C                            
0000049C                            ;	Voice $03
0000049C                            ;	$06
0000049C                            ;	$01, $33, $72, $31, 	$0A, $8C, $4C, $52, 	$00, $00, $00, $00
0000049C                            ;	$01, $00, $01, $00, 	$0F, $0F, $2F, $0F, 	$4D, $87, $80, $91
0000049C                            	smpsVcAlgorithm     $06
0000049C =00000006                M vcalgorithm	set	val
0000049C                            	smpsVcFeedback      $00
0000049C =00000000                M vcfeedback	set	val
0000049C                            	smpsVcUnusedBits    $00
0000049C =00000000                M vcunusedbits	set	val
0000049C =00000000                M vcd1r1unk	set	0
0000049C =00000000                M vcd1r2unk	set	0
0000049C =00000000                M vcd1r3unk	set	0
0000049C =00000000                M vcd1r4unk	set	0
0000049C                            	smpsVcDetune        $03, $07, $03, $00
0000049C =00000003                M vcdt1	set	op1
0000049C =00000007                M vcdt2	set	op2
0000049C =00000003                M vcdt3	set	op3
0000049C =00000000                M vcdt4	set	op4
0000049C                            	smpsVcCoarseFreq    $01, $02, $03, $01
0000049C =00000001                M vccf1	set	op1
0000049C =00000002                M vccf2	set	op2
0000049C =00000003                M vccf3	set	op3
0000049C =00000001                M vccf4	set	op4
0000049C                            	smpsVcRateScale     $01, $01, $02, $00
0000049C =00000001                M vcrs1	set	op1
0000049C =00000001                M vcrs2	set	op2
0000049C =00000002                M vcrs3	set	op3
0000049C =00000000                M vcrs4	set	op4
0000049C                            	smpsVcAttackRate    $12, $0C, $0C, $0A
0000049C =00000012                M vcar1	set	op1
0000049C =0000000C                M vcar2	set	op2
0000049C =0000000C                M vcar3	set	op3
0000049C =0000000A                M vcar4	set	op4
0000049C                            	smpsVcAmpMod        $00, $00, $00, $00
0000049C =00000000                M vcam1	set	op1<<5
0000049C =00000000                M vcam2	set	op2<<5
0000049C =00000000                M vcam3	set	op3<<5
0000049C =00000000                M vcam4	set	op4<<5
0000049C                            	smpsVcDecayRate1    $00, $00, $00, $00
0000049C =00000000                M vcd1r1	set	op1
0000049C =00000000                M vcd1r2	set	op2
0000049C =00000000                M vcd1r3	set	op3
0000049C =00000000                M vcd1r4	set	op4
0000049C                            	smpsVcDecayRate2    $00, $01, $00, $01
0000049C =00000000                M vcd2r1	set	op1
0000049C =00000001                M vcd2r2	set	op2
0000049C =00000000                M vcd2r3	set	op3
0000049C =00000001                M vcd2r4	set	op4
0000049C                            	smpsVcDecayLevel    $00, $02, $00, $00
0000049C =00000000                M vcdl1	set	op1
0000049C =00000002                M vcdl2	set	op2
0000049C =00000000                M vcdl3	set	op3
0000049C =00000000                M vcdl4	set	op4
0000049C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000049C =0000000F                M vcrr1	set	op1
0000049C =0000000F                M vcrr2	set	op2
0000049C =0000000F                M vcrr3	set	op3
0000049C =0000000F                M vcrr4	set	op4
0000049C                            	smpsVcTotalLevel    $11, $00, $07, $4D
0000049C =00000011                M vctl1	set	op1
0000049C =00000000                M vctl2	set	op2
0000049C =00000007                M vctl3	set	op3
0000049C =0000004D                M vctl4	set	op4
0000049C 06                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000049D =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
0000049D =FFFFFF80                M vctlmask3	set	((vcalgorithm>=4)<<7)
0000049D =FFFFFF80                M vctlmask2	set	((vcalgorithm>=5)<<7)
0000049D =00000080                M vctlmask1	set	$80
0000049D 0172 3331                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004A1 0A4C 8C52                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004A5 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004A9 0101 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004AD 0F2F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004B1 4D80 8791                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004B5                            
000004B5                            ;	Voice $04
000004B5                            ;	$3A
000004B5                            ;	$01, $02, $01, $01, 	$10, $0E, $14, $10, 	$0C, $0E, $0E, $0E
000004B5                            ;	$00, $00, $00, $00, 	$0F, $FF, $7F, $1F, 	$1C, $28, $31, $80
000004B5                            	smpsVcAlgorithm     $02
000004B5 =00000002                M vcalgorithm	set	val
000004B5                            	smpsVcFeedback      $07
000004B5 =00000007                M vcfeedback	set	val
000004B5                            	smpsVcUnusedBits    $00
000004B5 =00000000                M vcunusedbits	set	val
000004B5 =00000000                M vcd1r1unk	set	0
000004B5 =00000000                M vcd1r2unk	set	0
000004B5 =00000000                M vcd1r3unk	set	0
000004B5 =00000000                M vcd1r4unk	set	0
000004B5                            	smpsVcDetune        $00, $00, $00, $00
000004B5 =00000000                M vcdt1	set	op1
000004B5 =00000000                M vcdt2	set	op2
000004B5 =00000000                M vcdt3	set	op3
000004B5 =00000000                M vcdt4	set	op4
000004B5                            	smpsVcCoarseFreq    $01, $01, $02, $01
000004B5 =00000001                M vccf1	set	op1
000004B5 =00000001                M vccf2	set	op2
000004B5 =00000002                M vccf3	set	op3
000004B5 =00000001                M vccf4	set	op4
000004B5                            	smpsVcRateScale     $00, $00, $00, $00
000004B5 =00000000                M vcrs1	set	op1
000004B5 =00000000                M vcrs2	set	op2
000004B5 =00000000                M vcrs3	set	op3
000004B5 =00000000                M vcrs4	set	op4
000004B5                            	smpsVcAttackRate    $10, $14, $0E, $10
000004B5 =00000010                M vcar1	set	op1
000004B5 =00000014                M vcar2	set	op2
000004B5 =0000000E                M vcar3	set	op3
000004B5 =00000010                M vcar4	set	op4
000004B5                            	smpsVcAmpMod        $00, $00, $00, $00
000004B5 =00000000                M vcam1	set	op1<<5
000004B5 =00000000                M vcam2	set	op2<<5
000004B5 =00000000                M vcam3	set	op3<<5
000004B5 =00000000                M vcam4	set	op4<<5
000004B5                            	smpsVcDecayRate1    $0E, $0E, $0E, $0C
000004B5 =0000000E                M vcd1r1	set	op1
000004B5 =0000000E                M vcd1r2	set	op2
000004B5 =0000000E                M vcd1r3	set	op3
000004B5 =0000000C                M vcd1r4	set	op4
000004B5                            	smpsVcDecayRate2    $00, $00, $00, $00
000004B5 =00000000                M vcd2r1	set	op1
000004B5 =00000000                M vcd2r2	set	op2
000004B5 =00000000                M vcd2r3	set	op3
000004B5 =00000000                M vcd2r4	set	op4
000004B5                            	smpsVcDecayLevel    $01, $07, $0F, $00
000004B5 =00000001                M vcdl1	set	op1
000004B5 =00000007                M vcdl2	set	op2
000004B5 =0000000F                M vcdl3	set	op3
000004B5 =00000000                M vcdl4	set	op4
000004B5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004B5 =0000000F                M vcrr1	set	op1
000004B5 =0000000F                M vcrr2	set	op2
000004B5 =0000000F                M vcrr3	set	op3
000004B5 =0000000F                M vcrr4	set	op4
000004B5                            	smpsVcTotalLevel    $00, $31, $28, $1C
000004B5 =00000000                M vctl1	set	op1
000004B5 =00000031                M vctl2	set	op2
000004B5 =00000028                M vctl3	set	op3
000004B5 =0000001C                M vctl4	set	op4
000004B5 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004B6 =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000004B6 =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
000004B6 =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000004B6 =00000080                M vctlmask1	set	$80
000004B6 0101 0201                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004BA 1014 0E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004BE 0C0E 0E0E                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004C2 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004C6 0F7F FF1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004CA 1C31 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004CE                            
000004CE                            ;	Voice $05
000004CE                            ;	$39
000004CE                            ;	$02, $01, $02, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000004CE                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1B, $32, $28, $80
000004CE                            	smpsVcAlgorithm     $01
000004CE =00000001                M vcalgorithm	set	val
000004CE                            	smpsVcFeedback      $07
000004CE =00000007                M vcfeedback	set	val
000004CE                            	smpsVcUnusedBits    $00
000004CE =00000000                M vcunusedbits	set	val
000004CE =00000000                M vcd1r1unk	set	0
000004CE =00000000                M vcd1r2unk	set	0
000004CE =00000000                M vcd1r3unk	set	0
000004CE =00000000                M vcd1r4unk	set	0
000004CE                            	smpsVcDetune        $00, $00, $00, $00
000004CE =00000000                M vcdt1	set	op1
000004CE =00000000                M vcdt2	set	op2
000004CE =00000000                M vcdt3	set	op3
000004CE =00000000                M vcdt4	set	op4
000004CE                            	smpsVcCoarseFreq    $01, $02, $01, $02
000004CE =00000001                M vccf1	set	op1
000004CE =00000002                M vccf2	set	op2
000004CE =00000001                M vccf3	set	op3
000004CE =00000002                M vccf4	set	op4
000004CE                            	smpsVcRateScale     $00, $00, $00, $00
000004CE =00000000                M vcrs1	set	op1
000004CE =00000000                M vcrs2	set	op2
000004CE =00000000                M vcrs3	set	op3
000004CE =00000000                M vcrs4	set	op4
000004CE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000004CE =0000001F                M vcar1	set	op1
000004CE =0000001F                M vcar2	set	op2
000004CE =0000001F                M vcar3	set	op3
000004CE =0000001F                M vcar4	set	op4
000004CE                            	smpsVcAmpMod        $00, $00, $00, $00
000004CE =00000000                M vcam1	set	op1<<5
000004CE =00000000                M vcam2	set	op2<<5
000004CE =00000000                M vcam3	set	op3<<5
000004CE =00000000                M vcam4	set	op4<<5
000004CE                            	smpsVcDecayRate1    $00, $00, $00, $00
000004CE =00000000                M vcd1r1	set	op1
000004CE =00000000                M vcd1r2	set	op2
000004CE =00000000                M vcd1r3	set	op3
000004CE =00000000                M vcd1r4	set	op4
000004CE                            	smpsVcDecayRate2    $00, $00, $00, $00
000004CE =00000000                M vcd2r1	set	op1
000004CE =00000000                M vcd2r2	set	op2
000004CE =00000000                M vcd2r3	set	op3
000004CE =00000000                M vcd2r4	set	op4
000004CE                            	smpsVcDecayLevel    $00, $00, $00, $00
000004CE =00000000                M vcdl1	set	op1
000004CE =00000000                M vcdl2	set	op2
000004CE =00000000                M vcdl3	set	op3
000004CE =00000000                M vcdl4	set	op4
000004CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004CE =0000000F                M vcrr1	set	op1
000004CE =0000000F                M vcrr2	set	op2
000004CE =0000000F                M vcrr3	set	op3
000004CE =0000000F                M vcrr4	set	op4
000004CE                            	smpsVcTotalLevel    $00, $28, $32, $1B
000004CE =00000000                M vctl1	set	op1
000004CE =00000028                M vctl2	set	op2
000004CE =00000032                M vctl3	set	op3
000004CE =0000001B                M vctl4	set	op4
000004CE 39                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004CF =00000000                M vctlmask4	set	((vcalgorithm=7)<<7)
000004CF =00000000                M vctlmask3	set	((vcalgorithm>=4)<<7)
000004CF =00000000                M vctlmask2	set	((vcalgorithm>=5)<<7)
000004CF =00000080                M vctlmask1	set	$80
000004CF 0202 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004D3 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004D7 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004DB 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004DF 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004E3 1B28 3280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004E7                            
000004E7                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music13:	section	org($1380),file("sound/music/compressed/SpecialStage.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/SpecialStage.asm"	; include the actual music file for assembly
00000000                            SpecStg_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	set	ver
00000000 =00000001                M sourcesmps2asm	set	sourcesmps2asmver
00000000 =00000000                M songstart	set	offset(*)
00000000                            	smpsHeaderVoice     SpecStg_Voices
00000000 0000                     M 	dc.w	((specstg_voices&$7fff)<<8)&$ff00+(specstg_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $FF
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$ff
00000005 FF                       M 	dc.b	$ff
00000006                            
00000006                            	smpsHeaderDAC       SpecStg_DAC
00000006                          M 	checkedchannelpointer	specstg_dac
00000006 0000                     M 	dc.w	((specstg_dac&$7fff)<<8)&$ff00+(specstg_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        SpecStg_FM1,	$0C, $08
0000000A                          M 	checkedchannelpointer	specstg_fm1
0000000A 0000                     M 	dc.w	((specstg_fm1&$7fff)<<8)&$ff00+(specstg_fm1&$7fff)>>8
0000000C 0C08                     M 	dc.b	$0c,$08
0000000E                            	smpsHeaderFM        SpecStg_FM2,	$00, $05
0000000E                          M 	checkedchannelpointer	specstg_fm2
0000000E 0000                     M 	dc.w	((specstg_fm2&$7fff)<<8)&$ff00+(specstg_fm2&$7fff)>>8
00000010 0005                     M 	dc.b	$00,$05
00000012                            	smpsHeaderFM        SpecStg_FM3,	$00, $0E
00000012                          M 	checkedchannelpointer	specstg_fm3
00000012 0000                     M 	dc.w	((specstg_fm3&$7fff)<<8)&$ff00+(specstg_fm3&$7fff)>>8
00000014 000E                     M 	dc.b	$00,$0e
00000016                            	smpsHeaderFM        SpecStg_FM4,	$00, $0E
00000016                          M 	checkedchannelpointer	specstg_fm4
00000016 0000                     M 	dc.w	((specstg_fm4&$7fff)<<8)&$ff00+(specstg_fm4&$7fff)>>8
00000018 000E                     M 	dc.b	$00,$0e
0000001A                            	smpsHeaderFM        SpecStg_FM5,	$00, $0F
0000001A                          M 	checkedchannelpointer	specstg_fm5
0000001A 0000                     M 	dc.w	((specstg_fm5&$7fff)<<8)&$ff00+(specstg_fm5&$7fff)>>8
0000001C 000F                     M 	dc.b	$00,$0f
0000001E                            	smpsHeaderPSG       SpecStg_PSG1,	$DC, $02, $00, fTone_0B
0000001E                          M 	checkedchannelpointer	specstg_psg1
0000001E 0000                     M 	dc.w	((specstg_psg1&$7fff)<<8)&$ff00+(specstg_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$dc
00000020 DC                       M 	dc.b	$dc
00000021 02                       M 	dc.b	$02
00000022 00                       M 	dc.b	$00
00000023 0B                       M 	dc.b	ftone_0b
00000024                            	smpsHeaderPSG       SpecStg_PSG2,	$DC, $04, $00, fTone_0B
00000024                          M 	checkedchannelpointer	specstg_psg2
00000024 0000                     M 	dc.w	((specstg_psg2&$7fff)<<8)&$ff00+(specstg_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 04                       M 	dc.b	$04
00000028 00                       M 	dc.b	$00
00000029 0B                       M 	dc.b	ftone_0b
0000002A                            	smpsHeaderPSG       SpecStg_PSG3,	$00, $01, $00, $00
0000002A                          M 	checkedchannelpointer	specstg_psg3
0000002A 0000                     M 	dc.w	((specstg_psg3&$7fff)<<8)&$ff00+(specstg_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 01                       M 	dc.b	$01
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; FM1 Data
00000030                            SpecStg_FM1:
00000030                            	smpsAlterVol        $08
00000030 E608                     M 	dc.b	$e6,$08
00000032                            	smpsAlterPitch      $E8
00000032                          M 	smpschangetransposition	$e8
00000032 E9E8                     M 	dc.b	$e9,$e8
00000034                            	smpsPan             panRight, $00
00000034 E040                     M 	dc.b	$e0,direction+amsfms
00000036                            	smpsSetvoice        $02
00000036                          M 	smpsfmvoice	$02
00000036 EF02                     M 	dc.b	$ef,$02
00000038                            	smpsCall            SpecStg_Call00
00000038 F8                       M 	dc.b	$f8
00000039 0000                     M 	dc.w	((specstg_call00&$7fff)<<8)&$ff00+(specstg_call00&$7fff)>>8
0000003B                            	smpsAlterPitch      $18
0000003B                          M 	smpschangetransposition	$18
0000003B E918                     M 	dc.b	$e9,$18
0000003D                            	smpsPan             panCenter, $00
0000003D E0C0                     M 	dc.b	$e0,direction+amsfms
0000003F                            	smpsAlterVol        $F8
0000003F E6F8                     M 	dc.b	$e6,$f8
00000041                            	smpsSetvoice        $03
00000041                          M 	smpsfmvoice	$03
00000041 EF03                     M 	dc.b	$ef,$03
00000043                            
00000043                            SpecStg_Loop0C:
00000043 9D06 A995 0C96 97A0 06AC+  	dc.b	nE2, $06, nE3, nAb1, $0C, nA1, nBb1, nG2, $06, nG3, nCs2, $0C
0000004F 9B9C 9D06 A995 0C96 97A0+  	dc.b	nD2, nEb2, nE2, $06, nE3, nAb1, $0C, nA1, nBb1, nG2, $06, nG3
0000005B 9A0C 9B9C 9D06 A995 0C96+  	dc.b	nCs2, $0C, nD2, nEb2, nE2, $06, nE3, nAb1, $0C, nA1, nBb1, nG2
00000067 06AC 9A0C 9B9C 9D06 A995+  	dc.b	$06, nG3, nCs2, $0C, nD2, nEb2, nE2, $06, nE3, nAb1, $0C, nA1
00000073 9798 06A4 9A0C 9B9C        	dc.b	nBb1, nB1, $06, nB2, nCs2, $0C, nD2, nEb2
0000007B                            	smpsLoop            $00, $07, SpecStg_Loop0C
0000007B F7                       M 	dc.b	$f7
0000007C 0007                     M 	dc.b	index,loops
0000007E 0000                     M 	dc.w	((specstg_loop0c&$7fff)<<8)&$ff00+(specstg_loop0c&$7fff)>>8
00000080                            	smpsJump            SpecStg_Loop0C
00000080 F6                       M 	dc.b	$f6
00000081 0000                     M 	dc.w	((specstg_loop0c&$7fff)<<8)&$ff00+(specstg_loop0c&$7fff)>>8
00000083                            
00000083                            ; FM2 Data
00000083                            SpecStg_FM2:
00000083                            	smpsSetvoice        $06
00000083                          M 	smpsfmvoice	$06
00000083 EF06                     M 	dc.b	$ef,$06
00000085                            	smpsAlterVol        $0A
00000085 E60A                     M 	dc.b	$e6,$0a
00000087                            	smpsAlterPitch      $F4
00000087                          M 	smpschangetransposition	$f4
00000087 E9F4                     M 	dc.b	$e9,$f4
00000089                            	smpsPan             panLeft, $00
00000089 E080                     M 	dc.b	$e0,direction+amsfms
0000008B                            	smpsModSet          $06, $01, $02, $04
0000008B F0                       M 	dc.b	$f0
0000008C 0601 0204                M 	dc.b	$06,$01,$02,$04
00000090                            	smpsCall            SpecStg_Call00
00000090 F8                       M 	dc.b	$f8
00000091 0000                     M 	dc.w	((specstg_call00&$7fff)<<8)&$ff00+(specstg_call00&$7fff)>>8
00000093 C506 8030 802A             	dc.b	nAb5, $06, nRst, $30, nRst, $2A
00000099                            	smpsAlterPitch      $0C
00000099                          M 	smpschangetransposition	$0c
00000099 E90C                     M 	dc.b	$e9,$0c
0000009B                            	smpsAlterVol        $F6
0000009B E6F6                     M 	dc.b	$e6,$f6
0000009D                            	smpsPan             panCenter, $00
0000009D E0C0                     M 	dc.b	$e0,direction+amsfms
0000009F 8030 30                    	dc.b	nRst, $30, $30
000000A2                            	smpsSetvoice        $05
000000A2                          M 	smpsfmvoice	$05
000000A2 EF05                     M 	dc.b	$ef,$05
000000A4 B812 B9BA 0CBB 12BC BD0C+  	dc.b	nG4, $12, nAb4, nA4, $0C, nBb4, $12, nB4, nC5, $0C, nB4, $12
000000B0 BDBE 0CBD 12BE BF0C        	dc.b	nC5, nCs5, $0C, nC5, $12, nCs5, nD5, $0C
000000B8                            	smpsAlterVol        $02
000000B8 E602                     M 	dc.b	$e6,$02
000000BA                            
000000BA                            SpecStg_Loop0A:
000000BA                            	smpsSetvoice        $00
000000BA                          M 	smpsfmvoice	$00
000000BA EF00                     M 	dc.b	$ef,$00
000000BC                            	smpsPan             panCenter, $00
000000BC E0C0                     M 	dc.b	$e0,direction+amsfms
000000BE                            	smpsModSet          $01, $01, $08, $04
000000BE F0                       M 	dc.b	$f0
000000BF 0101 0804                M 	dc.b	$01,$01,$08,$04
000000C3 C118 C50C C818 C6C5 0CE7+  	dc.b	nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack, nAb5, nFs5
000000CF 18C1 C50C                  	dc.b	$18, nE5, nAb5, $0C
000000D3                            	smpsModSet          $18, $01, $10, $04
000000D3 F0                       M 	dc.b	$f0
000000D4 1801 1004                M 	dc.b	$18,$01,$10,$04
000000D8 C3C1 BF30 E730             	dc.b	nFs5, nE5, nD5, $30, smpsNoAttack, $30
000000DE                            	smpsModSet          $01, $01, $08, $04
000000DE F0                       M 	dc.b	$f0
000000DF 0101 0804                M 	dc.b	$01,$01,$08,$04
000000E3 8030 80C1 18C5 0CC8 18C6+  	dc.b	nRst, $30, nRst, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C
000000EF E7C5 C318 C1C5 0C          	dc.b	smpsNoAttack, nAb5, nFs5, $18, nE5, nAb5, $0C
000000F6                            	smpsModSet          $18, $01, $10, $04
000000F6 F0                       M 	dc.b	$f0
000000F7 1801 1004                M 	dc.b	$18,$01,$10,$04
000000FB C3C1 CB30 E730 8030 80     	dc.b	nFs5, nE5, nD6, $30, smpsNoAttack, $30, nRst, $30, nRst
00000104                            	smpsLoop            $00, $02, SpecStg_Loop0A
00000104 F7                       M 	dc.b	$f7
00000105 0002                     M 	dc.b	index,loops
00000107 0000                     M 	dc.w	((specstg_loop0a&$7fff)<<8)&$ff00+(specstg_loop0a&$7fff)>>8
00000109                            	smpsAlterVol        $FE
00000109 E6FE                     M 	dc.b	$e6,$fe
0000010B                            	smpsPan             panRight, $00
0000010B E040                     M 	dc.b	$e0,direction+amsfms
0000010D                            
0000010D                            SpecStg_Loop0B:
0000010D                            	smpsSetvoice        $05
0000010D                          M 	smpsfmvoice	$05
0000010D EF05                     M 	dc.b	$ef,$05
0000010F BC06 80BC 80BE BC12 C10C+  	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $0C, nRst, nE5
0000011B 80BC 0680 BC80 BEBC 12B9+  	dc.b	nRst, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nAb4, $18, nRst
00000127 BC06 80BC 80BE BC12 C106+  	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $06, nRst, nE5
00000133 80BE C112 BC06 80BC 80BE+  	dc.b	nRst, nCs5, nE5, $12, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12
0000013F B918 80                    	dc.b	nAb4, $18, nRst
00000142                            	smpsLoop            $00, $02, SpecStg_Loop0B
00000142 F7                       M 	dc.b	$f7
00000143 0002                     M 	dc.b	index,loops
00000145 0000                     M 	dc.w	((specstg_loop0b&$7fff)<<8)&$ff00+(specstg_loop0b&$7fff)>>8
00000147                            	smpsAlterVol        $02
00000147 E602                     M 	dc.b	$e6,$02
00000149                            	smpsJump            SpecStg_Loop0A
00000149 F6                       M 	dc.b	$f6
0000014A 0000                     M 	dc.w	((specstg_loop0a&$7fff)<<8)&$ff00+(specstg_loop0a&$7fff)>>8
0000014C                            
0000014C                            SpecStg_Call00:
0000014C C106                       	dc.b	nE5, $06
0000014E                            	smpsAlterVol        $10
0000014E E610                     M 	dc.b	$e6,$10
00000150 0680 0C                    	dc.b	$06, nRst, $0C
00000153                            	smpsAlterVol        $F0
00000153 E6F0                     M 	dc.b	$e6,$f0
00000155 C508 C1C5 C806             	dc.b	nAb5, $08, nE5, nAb5, nB5, $06
0000015B                            	smpsAlterVol        $10
0000015B E610                     M 	dc.b	$e6,$10
0000015D 0680 0C                    	dc.b	$06, nRst, $0C
00000160                            	smpsAlterVol        $F0
00000160 E6F0                     M 	dc.b	$e6,$f0
00000162 C606                       	dc.b	nA5, $06
00000164                            	smpsAlterVol        $10
00000164 E610                     M 	dc.b	$e6,$10
00000166 0680 0C                    	dc.b	$06, nRst, $0C
00000169                            	smpsAlterVol        $F0
00000169 E6F0                     M 	dc.b	$e6,$f0
0000016B C524 C306                  	dc.b	nAb5, $24, nFs5, $06
0000016F                            	smpsAlterVol        $10
0000016F E610                     M 	dc.b	$e6,$10
00000171 06                         	dc.b	$06
00000172                            	smpsAlterVol        $F0
00000172 E6F0                     M 	dc.b	$e6,$f0
00000174 C1                         	dc.b	nE5
00000175                            	smpsAlterVol        $10
00000175 E610                     M 	dc.b	$e6,$10
00000177 0680 0C                    	dc.b	$06, nRst, $0C
0000017A                            	smpsAlterVol        $F0
0000017A E6F0                     M 	dc.b	$e6,$f0
0000017C C018 E730 E724 800C        	dc.b	nEb5, $18, smpsNoAttack, $30, smpsNoAttack, $24, nRst, $0C
00000184                            	smpsReturn
00000184 E3                       M 	dc.b	$e3
00000185                            
00000185                            ; FM3 Data
00000185                            SpecStg_FM3:
00000185                            	smpsSetvoice        $02
00000185                          M 	smpsfmvoice	$02
00000185 EF02                     M 	dc.b	$ef,$02
00000187                            	smpsAlterNote       $F8
00000187                          M 	smpsdetune	$f8
00000187 E1F8                     M 	dc.b	$e1,$f8
00000189                            	smpsPan             panLeft, $00
00000189 E080                     M 	dc.b	$e0,direction+amsfms
0000018B                            	smpsCall            SpecStg_Call00
0000018B F8                       M 	dc.b	$f8
0000018C 0000                     M 	dc.w	((specstg_call00&$7fff)<<8)&$ff00+(specstg_call00&$7fff)>>8
0000018E                            	smpsPan             panCenter, $00
0000018E E0C0                     M 	dc.b	$e0,direction+amsfms
00000190                            	smpsSetvoice        $05
00000190                          M 	smpsfmvoice	$05
00000190 EF05                     M 	dc.b	$ef,$05
00000192                            	smpsAlterNote       $00
00000192                          M 	smpsdetune	$00
00000192 E100                     M 	dc.b	$e1,$00
00000194 C506 8030 802A 8030 80B8+  	dc.b	nAb5, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nG4, $12, nAb4
000001A0 BA0C BB12 BCBD 0CBC 12BD+  	dc.b	nA4, $0C, nBb4, $12, nB4, nC5, $0C, nB4, $12, nC5, nCs5, $0C
000001AC BD12 BEBF 0C               	dc.b	nC5, $12, nCs5, nD5, $0C
000001B1                            
000001B1                            SpecStg_Loop08:
000001B1 8030 8080 80               	dc.b	nRst, $30, nRst, nRst, nRst
000001B6                            
000001B6                            SpecStg_Loop07:
000001B6                            	smpsPan             panRight, $00
000001B6 E040                     M 	dc.b	$e0,direction+amsfms
000001B8 B906 800C B906 800C B906+  	dc.b	nAb4, $06, nRst, $0C, nAb4, $06, nRst, $0C, nAb4, $06, nRst, nFs4
000001C4 12B9 0680 18               	dc.b	$12, nAb4, $06, nRst, $18
000001C9                            	smpsLoop            $01, $02, SpecStg_Loop07
000001C9 F7                       M 	dc.b	$f7
000001CA 0102                     M 	dc.b	index,loops
000001CC 0000                     M 	dc.w	((specstg_loop07&$7fff)<<8)&$ff00+(specstg_loop07&$7fff)>>8
000001CE                            	smpsPan             panCenter, $00
000001CE E0C0                     M 	dc.b	$e0,direction+amsfms
000001D0 8030 8080 80B9 0680 0C06+  	dc.b	nRst, $30, nRst, nRst, nRst, nAb4, $06, nRst, $0C, $06, nRst
000001DB 0CB9 0680 B980 0C06 800C+  	dc.b	$0C, nAb4, $06, nRst, nAb4, nRst, $0C, $06, nRst, $0C, nAb4
000001E6 0680 B980 0C06 800C B906+  	dc.b	$06, nRst, nAb4, nRst, $0C, $06, nRst, $0C, nAb4, $06, nRst
000001F1 B980 2A                    	dc.b	nAb4, nRst, $2A
000001F4                            	smpsLoop            $00, $02, SpecStg_Loop08
000001F4 F7                       M 	dc.b	$f7
000001F5 0002                     M 	dc.b	index,loops
000001F7 0000                     M 	dc.w	((specstg_loop08&$7fff)<<8)&$ff00+(specstg_loop08&$7fff)>>8
000001F9                            	smpsPan             panLeft, $00
000001F9 E080                     M 	dc.b	$e0,direction+amsfms
000001FB                            	smpsAlterNote       $FE
000001FB                          M 	smpsdetune	$fe
000001FB E1FE                     M 	dc.b	$e1,$fe
000001FD                            	smpsAlterVol        $F8
000001FD E6F8                     M 	dc.b	$e6,$f8
000001FF                            
000001FF                            SpecStg_Loop09:
000001FF BC06 80BC 80BE BC12 C10C+  	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $0C, nRst, nE5
0000020B 80BC 0680 BC80 BEBC 12B9+  	dc.b	nRst, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nAb4, $18, nRst
00000217 BC06 80BC 80BE BC12 C106+  	dc.b	nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12, nE5, $06, nRst, nE5
00000223 80BE C112 BC06 80BC 80BE+  	dc.b	nRst, nCs5, nE5, $12, nB4, $06, nRst, nB4, nRst, nCs5, nB4, $12
0000022F B918 80                    	dc.b	nAb4, $18, nRst
00000232                            	smpsLoop            $00, $02, SpecStg_Loop09
00000232 F7                       M 	dc.b	$f7
00000233 0002                     M 	dc.b	index,loops
00000235 0000                     M 	dc.w	((specstg_loop09&$7fff)<<8)&$ff00+(specstg_loop09&$7fff)>>8
00000237                            	smpsAlterNote       $00
00000237                          M 	smpsdetune	$00
00000237 E100                     M 	dc.b	$e1,$00
00000239                            	smpsAlterVol        $08
00000239 E608                     M 	dc.b	$e6,$08
0000023B                            	smpsJump            SpecStg_Loop08
0000023B F6                       M 	dc.b	$f6
0000023C 0000                     M 	dc.w	((specstg_loop08&$7fff)<<8)&$ff00+(specstg_loop08&$7fff)>>8
0000023E                            
0000023E                            ; FM4 Data
0000023E                            SpecStg_FM4:
0000023E                            	smpsSetvoice        $06
0000023E                          M 	smpsfmvoice	$06
0000023E EF06                     M 	dc.b	$ef,$06
00000240                            	smpsAlterNote       $08
00000240                          M 	smpsdetune	$08
00000240 E108                     M 	dc.b	$e1,$08
00000242                            	smpsPan             panRight, $00
00000242 E040                     M 	dc.b	$e0,direction+amsfms
00000244                            	smpsCall            SpecStg_Call00
00000244 F8                       M 	dc.b	$f8
00000245 0000                     M 	dc.w	((specstg_call00&$7fff)<<8)&$ff00+(specstg_call00&$7fff)>>8
00000247                            	smpsPan             panCenter, $00
00000247 E0C0                     M 	dc.b	$e0,direction+amsfms
00000249                            	smpsSetvoice        $05
00000249                          M 	smpsfmvoice	$05
00000249 EF05                     M 	dc.b	$ef,$05
0000024B                            	smpsAlterNote       $00
0000024B                          M 	smpsdetune	$00
0000024B E100                     M 	dc.b	$e1,$00
0000024D C106 8030 802A 8030 80B4+  	dc.b	nE5, $06, nRst, $30, nRst, $2A, nRst, $30, nRst, nEb4, $12, nE4
00000259 B60C B712 B8B9 0CB8 12B9+  	dc.b	nF4, $0C, nFs4, $12, nG4, nAb4, $0C, nG4, $12, nAb4, nA4, $0C
00000265 B912 BABB 0C               	dc.b	nAb4, $12, nA4, nBb4, $0C
0000026A                            
0000026A                            SpecStg_Loop05:
0000026A 8030 8080 80               	dc.b	nRst, $30, nRst, nRst, nRst
0000026F                            
0000026F                            SpecStg_Loop04:
0000026F B506 800C B506 800C B506+  	dc.b	nE4, $06, nRst, $0C, nE4, $06, nRst, $0C, nE4, $06, nRst, nD4
0000027B 12B5 0680 18               	dc.b	$12, nE4, $06, nRst, $18
00000280                            	smpsLoop            $01, $02, SpecStg_Loop04
00000280 F7                       M 	dc.b	$f7
00000281 0102                     M 	dc.b	index,loops
00000283 0000                     M 	dc.w	((specstg_loop04&$7fff)<<8)&$ff00+(specstg_loop04&$7fff)>>8
00000285 8030 8080 80B5 0680 0C06+  	dc.b	nRst, $30, nRst, nRst, nRst, nE4, $06, nRst, $0C, $06, nRst
00000290 0CB5 0680 B580 0C06 800C+  	dc.b	$0C, nE4, $06, nRst, nE4, nRst, $0C, $06, nRst, $0C, nE4
0000029B 0680 B580 0C06 800C B506+  	dc.b	$06, nRst, nE4, nRst, $0C, $06, nRst, $0C, nE4, $06, nRst
000002A6 B580 2A                    	dc.b	nE4, nRst, $2A
000002A9                            	smpsLoop            $00, $02, SpecStg_Loop05
000002A9 F7                       M 	dc.b	$f7
000002AA 0002                     M 	dc.b	index,loops
000002AC 0000                     M 	dc.w	((specstg_loop05&$7fff)<<8)&$ff00+(specstg_loop05&$7fff)>>8
000002AE                            
000002AE                            SpecStg_Loop06:
000002AE B906 80B9 80BA B912 BC0C+  	dc.b	nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12, nB4, $0C, nRst, nB4
000002BA 80B9 0680 B980 BAB9 12B5+  	dc.b	nRst, nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12, nE4, $18, nRst
000002C6 B906 80B9 80BA B912 BC06+  	dc.b	nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12, nB4, $06, nRst, nB4
000002D2 80BA BC12 B906 80B9 80BA+  	dc.b	nRst, nA4, nB4, $12, nAb4, $06, nRst, nAb4, nRst, nA4, nAb4, $12
000002DE B518 80                    	dc.b	nE4, $18, nRst
000002E1                            	smpsLoop            $00, $02, SpecStg_Loop06
000002E1 F7                       M 	dc.b	$f7
000002E2 0002                     M 	dc.b	index,loops
000002E4 0000                     M 	dc.w	((specstg_loop06&$7fff)<<8)&$ff00+(specstg_loop06&$7fff)>>8
000002E6                            	smpsJump            SpecStg_Loop05
000002E6 F6                       M 	dc.b	$f6
000002E7 0000                     M 	dc.w	((specstg_loop05&$7fff)<<8)&$ff00+(specstg_loop05&$7fff)>>8
000002E9                            
000002E9                            ; FM5 Data
000002E9                            SpecStg_FM5:
000002E9                            	smpsAlterPitch      $F4
000002E9                          M 	smpschangetransposition	$f4
000002E9 E9F4                     M 	dc.b	$e9,$f4
000002EB                            	smpsPan             panCenter, $00
000002EB E0C0                     M 	dc.b	$e0,direction+amsfms
000002ED                            	smpsSetvoice        $06
000002ED                          M 	smpsfmvoice	$06
000002ED EF06                     M 	dc.b	$ef,$06
000002EF                            	smpsAlterNote       $FA
000002EF                          M 	smpsdetune	$fa
000002EF E1FA                     M 	dc.b	$e1,$fa
000002F1                            	smpsCall            SpecStg_Call00
000002F1 F8                       M 	dc.b	$f8
000002F2 0000                     M 	dc.w	((specstg_call00&$7fff)<<8)&$ff00+(specstg_call00&$7fff)>>8
000002F4                            	smpsAlterPitch      $0C
000002F4                          M 	smpschangetransposition	$0c
000002F4 E90C                     M 	dc.b	$e9,$0c
000002F6                            	smpsSetvoice        $01
000002F6                          M 	smpsfmvoice	$01
000002F6 EF01                     M 	dc.b	$ef,$01
000002F8                            	smpsModSet          $06, $01, $02, $03
000002F8 F0                       M 	dc.b	$f0
000002F9 0601 0203                M 	dc.b	$06,$01,$02,$03
000002FD                            
000002FD                            SpecStg_Loop03:
000002FD                            	smpsPan             panCenter, $00
000002FD E0C0                     M 	dc.b	$e0,direction+amsfms
000002FF C50C C1                    	dc.b	nAb5, $0C, nE5
00000302                            	smpsPan             panLeft, $00
00000302 E080                     M 	dc.b	$e0,direction+amsfms
00000304 C3BF 06                    	dc.b	nFs5, nD5, $06
00000307                            	smpsPan             panCenter, $00
00000307 E0C0                     M 	dc.b	$e0,direction+amsfms
00000309 C50C 06                    	dc.b	nAb5, $0C, $06
0000030C                            	smpsPan             panRight, $00
0000030C E040                     M 	dc.b	$e0,direction+amsfms
0000030E C10C C3                    	dc.b	nE5, $0C, nFs5
00000311                            	smpsPan             panCenter, $00
00000311 E0C0                     M 	dc.b	$e0,direction+amsfms
00000313 BF                         	dc.b	nD5
00000314                            	smpsLoop            $00, $1C, SpecStg_Loop03
00000314 F7                       M 	dc.b	$f7
00000315 001C                     M 	dc.b	index,loops
00000317 0000                     M 	dc.w	((specstg_loop03&$7fff)<<8)&$ff00+(specstg_loop03&$7fff)>>8
00000319                            	smpsJump            SpecStg_Loop03
00000319 F6                       M 	dc.b	$f6
0000031A 0000                     M 	dc.w	((specstg_loop03&$7fff)<<8)&$ff00+(specstg_loop03&$7fff)>>8
0000031C                            
0000031C                            ; PSG1 Data
0000031C                            SpecStg_PSG1:
0000031C 8030 8080 8080 8080 8080+  	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst
00000328 8080 80                    	dc.b	nRst, nRst, nRst
0000032B                            
0000032B                            SpecStg_Loop11:
0000032B C118 C50C C818 C6C5 0CE7+  	dc.b	nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack, nAb5, nFs5
00000337 18C1 C50C C3C1 BF30 E730+  	dc.b	$18, nE5, nAb5, $0C, nFs5, nE5, nD5, $30, smpsNoAttack, $30, nRst, $30
00000343 80C1 18C5 0CC8 18C6 C50C+  	dc.b	nRst, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack, nAb5
0000034F C318 C1C5 0CC3 C1CB 30E7+  	dc.b	nFs5, $18, nE5, nAb5, $0C, nFs5, nE5, nD6, $30, smpsNoAttack, $30, nRst
0000035B 3080                       	dc.b	$30, nRst
0000035D                            	smpsLoop            $00, $02, SpecStg_Loop11
0000035D F7                       M 	dc.b	$f7
0000035E 0002                     M 	dc.b	index,loops
00000360 0000                     M 	dc.w	((specstg_loop11&$7fff)<<8)&$ff00+(specstg_loop11&$7fff)>>8
00000362 8030 8080 8080 8080 80     	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst
0000036B                            	smpsPSGAlterVol     $FF
0000036B ECFF                     M 	dc.b	$ec,$ff
0000036D                            	smpsAlterPitch      $F4
0000036D                          M 	smpschangetransposition	$f4
0000036D E9F4                     M 	dc.b	$e9,$f4
0000036F D406 80D4 80D6 D412 D90C+  	dc.b	nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12, nE7, $0C, nRst, nE7
0000037B 80D4 0680 D480 D6D4 12D1+  	dc.b	nRst, nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12, nAb6, $18, nRst
00000387 D406 80D4 80D6 D412 D906+  	dc.b	nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12, nE7, $06, nRst, nE7
00000393 80D6 D912 D406 80D4 80D6+  	dc.b	nRst, nCs7, nE7, $12, nB6, $06, nRst, nB6, nRst, nCs7, nB6, $12
0000039F D118 80                    	dc.b	nAb6, $18, nRst
000003A2                            	smpsAlterPitch      $0C
000003A2                          M 	smpschangetransposition	$0c
000003A2 E90C                     M 	dc.b	$e9,$0c
000003A4                            	smpsPSGAlterVol     $01
000003A4 EC01                     M 	dc.b	$ec,$01
000003A6                            	smpsJump            SpecStg_Loop11
000003A6 F6                       M 	dc.b	$f6
000003A7 0000                     M 	dc.w	((specstg_loop11&$7fff)<<8)&$ff00+(specstg_loop11&$7fff)>>8
000003A9                            
000003A9                            ; PSG2 Data
000003A9                            SpecStg_PSG2:
000003A9                            	smpsAlterNote       $FF
000003A9                          M 	smpsdetune	$ff
000003A9 E1FF                     M 	dc.b	$e1,$ff
000003AB 8030 8080 8080 8080 8080+  	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst
000003B7 8080 80                    	dc.b	nRst, nRst, nRst
000003BA                            
000003BA                            SpecStg_Jump00:
000003BA 8012 C118 C50C C818 C6C5+  	dc.b	nRst, $12, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C, smpsNoAttack
000003C6 C5C3 18C1 C50C C3C1 BF30+  	dc.b	nAb5, nFs5, $18, nE5, nAb5, $0C, nFs5, nE5, nD5, $30, smpsNoAttack, $30
000003D2 8030 80C1 18C5 0CC8 18C6+  	dc.b	nRst, $30, nRst, nE5, $18, nAb5, $0C, nB5, $18, nA5, nAb5, $0C
000003DE E7C5 C318 C1C5 0CC3 C1CB+  	dc.b	smpsNoAttack, nAb5, nFs5, $18, nE5, nAb5, $0C, nFs5, nE5, nD6, $30, smpsNoAttack
000003EA 3080 3080 1E               	dc.b	$30, nRst, $30, nRst, $1E
000003EF                            	smpsPSGAlterVol     $FC
000003EF ECFC                     M 	dc.b	$ec,$fc
000003F1 C518 C80C CC18 CAC8 0CE7+  	dc.b	nAb5, $18, nB5, $0C, nEb6, $18, nCs6, nB5, $0C, smpsNoAttack, nB5, nA5
000003FD 18C5 C80C C6C5 C330 E730+  	dc.b	$18, nAb5, nB5, $0C, nA5, nAb5, nFs5, $30, smpsNoAttack, $30, nRst, $30
00000409 80C5 18C8 0CCC 18CA C80C+  	dc.b	nRst, nAb5, $18, nB5, $0C, nEb6, $18, nCs6, nB5, $0C, smpsNoAttack, nB5
00000415 C618 C5C8 0CC6 C5CF 30E7+  	dc.b	nA5, $18, nAb5, nB5, $0C, nA5, nAb5, nFs6, $30, smpsNoAttack, $30, nRst
00000421 3080 8080 8080 8080 8080   	dc.b	$30, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst, nRst
0000042B                            	smpsAlterPitch      $E8
0000042B                          M 	smpschangetransposition	$e8
0000042B E9E8                     M 	dc.b	$e9,$e8
0000042D D106 80D1 80D2 D112 D40C+  	dc.b	nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12, nB6, $0C, nRst, nB6
00000439 80D1 0680 D180 D2D1 12CD+  	dc.b	nRst, nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12, nE6, $18, nRst
00000445 D106 80D1 80D2 D112 D406+  	dc.b	nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12, nB6, $06, nRst, nB6
00000451 80D2 D412 D106 80D1 80D2+  	dc.b	nRst, nA6, nB6, $12, nAb6, $06, nRst, nAb6, nRst, nA6, nAb6, $12
0000045D CD18 80                    	dc.b	nE6, $18, nRst
00000460                            	smpsPSGAlterVol     $04
00000460 EC04                     M 	dc.b	$ec,$04
00000462                            	smpsAlterPitch      $18
00000462                          M 	smpschangetransposition	$18
00000462 E918                     M 	dc.b	$e9,$18
00000464                            	smpsJump            SpecStg_Jump00
00000464 F6                       M 	dc.b	$f6
00000465 0000                     M 	dc.w	((specstg_jump00&$7fff)<<8)&$ff00+(specstg_jump00&$7fff)>>8
00000467                            
00000467                            ; DAC Data
00000467                            SpecStg_DAC:
00000467 8030 8080 8080 80          	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
0000046E                            
0000046E                            SpecStg_Loop00:
0000046E 8118 8181 810C 82          	dc.b	dKick, $18, dKick, dKick, dKick, $0C, dSnare
00000475                            	smpsLoop            $00, $03, SpecStg_Loop00
00000475 F7                       M 	dc.b	$f7
00000476 0003                     M 	dc.b	index,loops
00000478 0000                     M 	dc.w	((specstg_loop00&$7fff)<<8)&$ff00+(specstg_loop00&$7fff)>>8
0000047A 8118 8181 810C 8206 81     	dc.b	dKick, $18, dKick, dKick, dKick, $0C, dSnare, $06, dKick
00000483                            
00000483                            SpecStg_Loop01:
00000483 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, $12
0000048F 8281 0C82 1881 0C81 8212+  	dc.b	dSnare, dKick, $0C, dSnare, $18, dKick, $0C, dKick, dSnare, $12, dSnare, dKick
0000049B 0C82 8106 81               	dc.b	$0C, dSnare, dKick, $06, dKick
000004A0                            	smpsLoop            $00, $04, SpecStg_Loop01
000004A0 F7                       M 	dc.b	$f7
000004A1 0004                     M 	dc.b	index,loops
000004A3 0000                     M 	dc.w	((specstg_loop01&$7fff)<<8)&$ff00+(specstg_loop01&$7fff)>>8
000004A5                            
000004A5                            SpecStg_Loop02:
000004A5 8118 8212 0681 1882 8182+  	dc.b	dKick, $18, dSnare, $12, $06, dKick, $18, dSnare, dKick, dSnare, $12, dSnare
000004B1 810C 8218 8182 1206 8118+  	dc.b	dKick, $0C, dSnare, $18, dKick, dSnare, $12, $06, dKick, $18, dSnare, dKick
000004BD 8212 8281 0C82 18          	dc.b	dSnare, $12, dSnare, dKick, $0C, dSnare, $18
000004C4                            	smpsLoop            $00, $02, SpecStg_Loop02
000004C4 F7                       M 	dc.b	$f7
000004C5 0002                     M 	dc.b	index,loops
000004C7 0000                     M 	dc.w	((specstg_loop02&$7fff)<<8)&$ff00+(specstg_loop02&$7fff)>>8
000004C9                            	smpsJump            SpecStg_Loop01
000004C9 F6                       M 	dc.b	$f6
000004CA 0000                     M 	dc.w	((specstg_loop01&$7fff)<<8)&$ff00+(specstg_loop01&$7fff)>>8
000004CC                            
000004CC                            ; PSG3 Data
000004CC                            SpecStg_PSG3:
000004CC                            	smpsPSGform         $E7
000004CC F3E7                     M 	dc.b	$f3,$e7
000004CE                            	smpsPSGvoice        fTone_04
000004CE F504                     M 	dc.b	$f5,ftone_04
000004D0                            	smpsNoteFill        $03
000004D0 E803                     M 	dc.b	$e8,$03
000004D2 8030 8080 8080 80          	dc.b	nRst, $30, nRst, nRst, nRst, nRst, nRst
000004D9                            
000004D9                            SpecStg_Loop0D:
000004D9 C60C 06C6 C6C6 0CC6 C606+  	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, nMaxPSG
000004E5 C60C C6                    	dc.b	nMaxPSG, $0C, nMaxPSG
000004E8                            	smpsLoop            $00, $03, SpecStg_Loop0D
000004E8 F7                       M 	dc.b	$f7
000004E9 0003                     M 	dc.b	index,loops
000004EB 0000                     M 	dc.w	((specstg_loop0d&$7fff)<<8)&$ff00+(specstg_loop0d&$7fff)>>8
000004ED C60C 06C6 C6C6 0CC6 C606+  	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, nMaxPSG
000004F9 C60C C6                    	dc.b	nMaxPSG, $0C, nMaxPSG
000004FC                            
000004FC                            SpecStg_Loop0E:
000004FC C612 C606 C6C6 C6C6 0C06+  	dc.b	nMaxPSG, $12, nMaxPSG, $06, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG, $0C, $06, $0C, $06
00000508 0C06 0CC6 06C6 C60C 060C+  	dc.b	$0C, $06, $0C, nMaxPSG, $06, nMaxPSG, nMaxPSG, $0C, $06, $0C, $06, $0C
00000514 060C 060C C6C6 C6C6 24C6+  	dc.b	$06, $0C, $06, $0C, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG, $24, nMaxPSG, $0C, nMaxPSG
00000520 06C6 C60C C6C6 C618 C60C+  	dc.b	$06, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, nMaxPSG, $18, nMaxPSG, $0C, nMaxPSG
0000052B                            	smpsLoop            $00, $04, SpecStg_Loop0E
0000052B F7                       M 	dc.b	$f7
0000052C 0004                     M 	dc.b	index,loops
0000052E 0000                     M 	dc.w	((specstg_loop0e&$7fff)<<8)&$ff00+(specstg_loop0e&$7fff)>>8
00000530                            
00000530                            SpecStg_Loop0F:
00000530 C618 06C6 0CC6 C606 C60C+  	dc.b	nMaxPSG, $18, $06, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, $0C, nMaxPSG, nMaxPSG
0000053C                            	smpsLoop            $00, $04, SpecStg_Loop0F
0000053C F7                       M 	dc.b	$f7
0000053D 0004                     M 	dc.b	index,loops
0000053F 0000                     M 	dc.w	((specstg_loop0f&$7fff)<<8)&$ff00+(specstg_loop0f&$7fff)>>8
00000541                            
00000541                            SpecStg_Loop10:
00000541 C60C 06C6 C6C6 0CC6 C606+  	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, $0C, nMaxPSG, nMaxPSG, $06, nMaxPSG, nMaxPSG
0000054D C60C C6                    	dc.b	nMaxPSG, $0C, nMaxPSG
00000550                            	smpsLoop            $00, $04, SpecStg_Loop10
00000550 F7                       M 	dc.b	$f7
00000551 0004                     M 	dc.b	index,loops
00000553 0000                     M 	dc.w	((specstg_loop10&$7fff)<<8)&$ff00+(specstg_loop10&$7fff)>>8
00000555                            	smpsJump            SpecStg_Loop0E
00000555 F6                       M 	dc.b	$f6
00000556 0000                     M 	dc.w	((specstg_loop0e&$7fff)<<8)&$ff00+(specstg_loop0e&$7fff)>>8
00000558                            
00000558                            SpecStg_Voices:
00000558                            ;	Voice $00
00000558                            ;	$3A
00000558                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $00
00000558                            ;	$00, $00, $00, $04, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00000558                            	smpsVcAlgorithm     $02
00000558 =00000002                M vcalgorithm	set	val
00000558                            	smpsVcFeedback      $07
00000558 =00000007                M vcfeedback	set	val
00000558                            	smpsVcUnusedBits    $00
00000558 =00000000                M vcunusedbits	set	val
00000558 =00000000                M vcd1r1unk	set	0
00000558 =00000000                M vcd1r2unk	set	0
00000558 =00000000                M vcd1r3unk	set	0
00000558 =00000000                M vcd1r4unk	set	0
00000558                            	smpsVcDetune        $00, $00, $00, $00
00000558 =00000000                M vcdt1	set	op1
00000558 =00000000                M vcdt2	set	op2
00000558 =00000000                M vcdt3	set	op3
00000558 =00000000                M vcdt4	set	op4
00000558                            	smpsVcCoarseFreq    $01, $01, $07, $01
00000558 =00000001                M vccf1	set	op1
00000558 =00000001                M vccf2	set	op2
00000558 =00000007                M vccf3	set	op3
00000558 =00000001                M vccf4	set	op4
00000558                            	smpsVcRateScale     $01, $02, $02, $02
00000558 =00000001                M vcrs1	set	op1
00000558 =00000002                M vcrs2	set	op2
00000558 =00000002                M vcrs3	set	op3
00000558 =00000002                M vcrs4	set	op4
00000558                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00000558 =00000013                M vcar1	set	op1
00000558 =0000000D                M vcar2	set	op2
00000558 =0000000E                M vcar3	set	op3
00000558 =0000000E                M vcar4	set	op4
00000558                            	smpsVcAmpMod        $00, $00, $00, $00
00000558 =00000000                M vcam1	set	op1<<7
00000558 =00000000                M vcam2	set	op2<<7
00000558 =00000000                M vcam3	set	op3<<7
00000558 =00000000                M vcam4	set	op4<<7
00000558                            	smpsVcDecayRate1    $00, $0E, $0E, $0E
00000558 =00000000                M vcd1r1	set	op1
00000558 =0000000E                M vcd1r2	set	op2
00000558 =0000000E                M vcd1r3	set	op3
00000558 =0000000E                M vcd1r4	set	op4
00000558                            	smpsVcDecayRate2    $04, $00, $00, $00
00000558 =00000004                M vcd2r1	set	op1
00000558 =00000000                M vcd2r2	set	op2
00000558 =00000000                M vcd2r3	set	op3
00000558 =00000000                M vcd2r4	set	op4
00000558                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000558 =00000000                M vcdl1	set	op1
00000558 =00000001                M vcdl2	set	op2
00000558 =0000000F                M vcdl3	set	op3
00000558 =00000001                M vcdl4	set	op4
00000558                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000558 =0000000F                M vcrr1	set	op1
00000558 =0000000F                M vcrr2	set	op2
00000558 =0000000F                M vcrr3	set	op3
00000558 =0000000F                M vcrr4	set	op4
00000558                            	smpsVcTotalLevel    $80, $27, $28, $18
00000558 =00000080                M vctl1	set	op1
00000558 =00000027                M vctl2	set	op2
00000558 =00000028                M vctl3	set	op3
00000558 =00000018                M vctl4	set	op4
00000558 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000559 =00000000                M vctlmask4	set	0
00000559 =00000000                M vctlmask3	set	0
00000559 =00000000                M vctlmask2	set	0
00000559 =00000000                M vctlmask1	set	0
00000559 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000055D 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000561 0E0E 0E00                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000565 0000 0004                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000569 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000056D 1827 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000571                            
00000571                            ;	Voice $01
00000571                            ;	$3A
00000571                            ;	$07, $06, $02, $01, 	$5F, $5F, $5F, $9F, 	$02, $02, $0A, $07
00000571                            ;	$02, $03, $03, $06, 	$52, $72, $A2, $B5, 	$1A, $1C, $23, $80
00000571                            	smpsVcAlgorithm     $02
00000571 =00000002                M vcalgorithm	set	val
00000571                            	smpsVcFeedback      $07
00000571 =00000007                M vcfeedback	set	val
00000571                            	smpsVcUnusedBits    $00
00000571 =00000000                M vcunusedbits	set	val
00000571 =00000000                M vcd1r1unk	set	0
00000571 =00000000                M vcd1r2unk	set	0
00000571 =00000000                M vcd1r3unk	set	0
00000571 =00000000                M vcd1r4unk	set	0
00000571                            	smpsVcDetune        $00, $00, $00, $00
00000571 =00000000                M vcdt1	set	op1
00000571 =00000000                M vcdt2	set	op2
00000571 =00000000                M vcdt3	set	op3
00000571 =00000000                M vcdt4	set	op4
00000571                            	smpsVcCoarseFreq    $01, $02, $06, $07
00000571 =00000001                M vccf1	set	op1
00000571 =00000002                M vccf2	set	op2
00000571 =00000006                M vccf3	set	op3
00000571 =00000007                M vccf4	set	op4
00000571                            	smpsVcRateScale     $02, $01, $01, $01
00000571 =00000002                M vcrs1	set	op1
00000571 =00000001                M vcrs2	set	op2
00000571 =00000001                M vcrs3	set	op3
00000571 =00000001                M vcrs4	set	op4
00000571                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000571 =0000001F                M vcar1	set	op1
00000571 =0000001F                M vcar2	set	op2
00000571 =0000001F                M vcar3	set	op3
00000571 =0000001F                M vcar4	set	op4
00000571                            	smpsVcAmpMod        $00, $00, $00, $00
00000571 =00000000                M vcam1	set	op1<<7
00000571 =00000000                M vcam2	set	op2<<7
00000571 =00000000                M vcam3	set	op3<<7
00000571 =00000000                M vcam4	set	op4<<7
00000571                            	smpsVcDecayRate1    $07, $0A, $02, $02
00000571 =00000007                M vcd1r1	set	op1
00000571 =0000000A                M vcd1r2	set	op2
00000571 =00000002                M vcd1r3	set	op3
00000571 =00000002                M vcd1r4	set	op4
00000571                            	smpsVcDecayRate2    $06, $03, $03, $02
00000571 =00000006                M vcd2r1	set	op1
00000571 =00000003                M vcd2r2	set	op2
00000571 =00000003                M vcd2r3	set	op3
00000571 =00000002                M vcd2r4	set	op4
00000571                            	smpsVcDecayLevel    $0B, $0A, $07, $05
00000571 =0000000B                M vcdl1	set	op1
00000571 =0000000A                M vcdl2	set	op2
00000571 =00000007                M vcdl3	set	op3
00000571 =00000005                M vcdl4	set	op4
00000571                            	smpsVcReleaseRate   $05, $02, $02, $02
00000571 =00000005                M vcrr1	set	op1
00000571 =00000002                M vcrr2	set	op2
00000571 =00000002                M vcrr3	set	op3
00000571 =00000002                M vcrr4	set	op4
00000571                            	smpsVcTotalLevel    $80, $23, $1C, $1A
00000571 =00000080                M vctl1	set	op1
00000571 =00000023                M vctl2	set	op2
00000571 =0000001C                M vctl3	set	op3
00000571 =0000001A                M vctl4	set	op4
00000571 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000572 =00000000                M vctlmask4	set	0
00000572 =00000000                M vctlmask3	set	0
00000572 =00000000                M vctlmask2	set	0
00000572 =00000000                M vctlmask1	set	0
00000572 0702 0601                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000576 5F5F 5F9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000057A 020A 0207                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000057E 0203 0306                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000582 52A2 72B5                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000586 1A23 1C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000058A                            
0000058A                            ;	Voice $02
0000058A                            ;	$3D
0000058A                            ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
0000058A                            ;	$00, $00, $00, $00, 	$2B, $2B, $2B, $1B, 	$19, $80, $80, $80
0000058A                            	smpsVcAlgorithm     $05
0000058A =00000005                M vcalgorithm	set	val
0000058A                            	smpsVcFeedback      $07
0000058A =00000007                M vcfeedback	set	val
0000058A                            	smpsVcUnusedBits    $00
0000058A =00000000                M vcunusedbits	set	val
0000058A =00000000                M vcd1r1unk	set	0
0000058A =00000000                M vcd1r2unk	set	0
0000058A =00000000                M vcd1r3unk	set	0
0000058A =00000000                M vcd1r4unk	set	0
0000058A                            	smpsVcDetune        $00, $05, $02, $00
0000058A =00000000                M vcdt1	set	op1
0000058A =00000005                M vcdt2	set	op2
0000058A =00000002                M vcdt3	set	op3
0000058A =00000000                M vcdt4	set	op4
0000058A                            	smpsVcCoarseFreq    $01, $01, $01, $01
0000058A =00000001                M vccf1	set	op1
0000058A =00000001                M vccf2	set	op2
0000058A =00000001                M vccf3	set	op3
0000058A =00000001                M vccf4	set	op4
0000058A                            	smpsVcRateScale     $00, $00, $00, $00
0000058A =00000000                M vcrs1	set	op1
0000058A =00000000                M vcrs2	set	op2
0000058A =00000000                M vcrs3	set	op3
0000058A =00000000                M vcrs4	set	op4
0000058A                            	smpsVcAttackRate    $0F, $14, $14, $12
0000058A =0000000F                M vcar1	set	op1
0000058A =00000014                M vcar2	set	op2
0000058A =00000014                M vcar3	set	op3
0000058A =00000012                M vcar4	set	op4
0000058A                            	smpsVcAmpMod        $00, $00, $00, $00
0000058A =00000000                M vcam1	set	op1<<7
0000058A =00000000                M vcam2	set	op2<<7
0000058A =00000000                M vcam3	set	op3<<7
0000058A =00000000                M vcam4	set	op4<<7
0000058A                            	smpsVcDecayRate1    $05, $05, $05, $0A
0000058A =00000005                M vcd1r1	set	op1
0000058A =00000005                M vcd1r2	set	op2
0000058A =00000005                M vcd1r3	set	op3
0000058A =0000000A                M vcd1r4	set	op4
0000058A                            	smpsVcDecayRate2    $00, $00, $00, $00
0000058A =00000000                M vcd2r1	set	op1
0000058A =00000000                M vcd2r2	set	op2
0000058A =00000000                M vcd2r3	set	op3
0000058A =00000000                M vcd2r4	set	op4
0000058A                            	smpsVcDecayLevel    $01, $02, $02, $02
0000058A =00000001                M vcdl1	set	op1
0000058A =00000002                M vcdl2	set	op2
0000058A =00000002                M vcdl3	set	op3
0000058A =00000002                M vcdl4	set	op4
0000058A                            	smpsVcReleaseRate   $0B, $0B, $0B, $0B
0000058A =0000000B                M vcrr1	set	op1
0000058A =0000000B                M vcrr2	set	op2
0000058A =0000000B                M vcrr3	set	op3
0000058A =0000000B                M vcrr4	set	op4
0000058A                            	smpsVcTotalLevel    $80, $80, $80, $19
0000058A =00000080                M vctl1	set	op1
0000058A =00000080                M vctl2	set	op2
0000058A =00000080                M vctl3	set	op3
0000058A =00000019                M vctl4	set	op4
0000058A 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000058B =00000000                M vctlmask4	set	0
0000058B =00000000                M vctlmask3	set	0
0000058B =00000000                M vctlmask2	set	0
0000058B =00000000                M vctlmask1	set	0
0000058B 0151 2101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000058F 1214 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000593 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000597 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000059B 2B2B 2B1B                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000059F 1980 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005A3                            
000005A3                            ;	Voice $03
000005A3                            ;	$38
000005A3                            ;	$3A, $30, $30, $30, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000005A3                            ;	$00, $04, $04, $03, 	$26, $26, $26, $26, 	$24, $2D, $12, $00
000005A3                            	smpsVcAlgorithm     $00
000005A3 =00000000                M vcalgorithm	set	val
000005A3                            	smpsVcFeedback      $07
000005A3 =00000007                M vcfeedback	set	val
000005A3                            	smpsVcUnusedBits    $00
000005A3 =00000000                M vcunusedbits	set	val
000005A3 =00000000                M vcd1r1unk	set	0
000005A3 =00000000                M vcd1r2unk	set	0
000005A3 =00000000                M vcd1r3unk	set	0
000005A3 =00000000                M vcd1r4unk	set	0
000005A3                            	smpsVcDetune        $03, $03, $03, $03
000005A3 =00000003                M vcdt1	set	op1
000005A3 =00000003                M vcdt2	set	op2
000005A3 =00000003                M vcdt3	set	op3
000005A3 =00000003                M vcdt4	set	op4
000005A3                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000005A3 =00000000                M vccf1	set	op1
000005A3 =00000000                M vccf2	set	op2
000005A3 =00000000                M vccf3	set	op3
000005A3 =0000000A                M vccf4	set	op4
000005A3                            	smpsVcRateScale     $01, $01, $00, $00
000005A3 =00000001                M vcrs1	set	op1
000005A3 =00000001                M vcrs2	set	op2
000005A3 =00000000                M vcrs3	set	op3
000005A3 =00000000                M vcrs4	set	op4
000005A3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000005A3 =0000001F                M vcar1	set	op1
000005A3 =0000001F                M vcar2	set	op2
000005A3 =0000001F                M vcar3	set	op3
000005A3 =0000001F                M vcar4	set	op4
000005A3                            	smpsVcAmpMod        $00, $00, $00, $00
000005A3 =00000000                M vcam1	set	op1<<7
000005A3 =00000000                M vcam2	set	op2<<7
000005A3 =00000000                M vcam3	set	op3<<7
000005A3 =00000000                M vcam4	set	op4<<7
000005A3                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000005A3 =0000000A                M vcd1r1	set	op1
000005A3 =0000000A                M vcd1r2	set	op2
000005A3 =0000000E                M vcd1r3	set	op3
000005A3 =00000012                M vcd1r4	set	op4
000005A3                            	smpsVcDecayRate2    $03, $04, $04, $00
000005A3 =00000003                M vcd2r1	set	op1
000005A3 =00000004                M vcd2r2	set	op2
000005A3 =00000004                M vcd2r3	set	op3
000005A3 =00000000                M vcd2r4	set	op4
000005A3                            	smpsVcDecayLevel    $02, $02, $02, $02
000005A3 =00000002                M vcdl1	set	op1
000005A3 =00000002                M vcdl2	set	op2
000005A3 =00000002                M vcdl3	set	op3
000005A3 =00000002                M vcdl4	set	op4
000005A3                            	smpsVcReleaseRate   $06, $06, $06, $06
000005A3 =00000006                M vcrr1	set	op1
000005A3 =00000006                M vcrr2	set	op2
000005A3 =00000006                M vcrr3	set	op3
000005A3 =00000006                M vcrr4	set	op4
000005A3                            	smpsVcTotalLevel    $00, $12, $2D, $24
000005A3 =00000000                M vctl1	set	op1
000005A3 =00000012                M vctl2	set	op2
000005A3 =0000002D                M vctl3	set	op3
000005A3 =00000024                M vctl4	set	op4
000005A3 38                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005A4 =00000000                M vctlmask4	set	0
000005A4 =00000000                M vctlmask3	set	0
000005A4 =00000000                M vctlmask2	set	0
000005A4 =00000000                M vctlmask1	set	0
000005A4 3A30 3030                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005A8 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005AC 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005B0 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005B4 2626 2626                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005B8 2412 2D00                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005BC                            
000005BC                            ;	Voice $04
000005BC                            ;	$3D
000005BC                            ;	$01, $21, $50, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
000005BC                            ;	$00, $00, $00, $00, 	$26, $28, $28, $18, 	$19, $80, $80, $80
000005BC                            	smpsVcAlgorithm     $05
000005BC =00000005                M vcalgorithm	set	val
000005BC                            	smpsVcFeedback      $07
000005BC =00000007                M vcfeedback	set	val
000005BC                            	smpsVcUnusedBits    $00
000005BC =00000000                M vcunusedbits	set	val
000005BC =00000000                M vcd1r1unk	set	0
000005BC =00000000                M vcd1r2unk	set	0
000005BC =00000000                M vcd1r3unk	set	0
000005BC =00000000                M vcd1r4unk	set	0
000005BC                            	smpsVcDetune        $00, $05, $02, $00
000005BC =00000000                M vcdt1	set	op1
000005BC =00000005                M vcdt2	set	op2
000005BC =00000002                M vcdt3	set	op3
000005BC =00000000                M vcdt4	set	op4
000005BC                            	smpsVcCoarseFreq    $01, $00, $01, $01
000005BC =00000001                M vccf1	set	op1
000005BC =00000000                M vccf2	set	op2
000005BC =00000001                M vccf3	set	op3
000005BC =00000001                M vccf4	set	op4
000005BC                            	smpsVcRateScale     $00, $00, $00, $00
000005BC =00000000                M vcrs1	set	op1
000005BC =00000000                M vcrs2	set	op2
000005BC =00000000                M vcrs3	set	op3
000005BC =00000000                M vcrs4	set	op4
000005BC                            	smpsVcAttackRate    $0F, $14, $14, $12
000005BC =0000000F                M vcar1	set	op1
000005BC =00000014                M vcar2	set	op2
000005BC =00000014                M vcar3	set	op3
000005BC =00000012                M vcar4	set	op4
000005BC                            	smpsVcAmpMod        $00, $00, $00, $00
000005BC =00000000                M vcam1	set	op1<<7
000005BC =00000000                M vcam2	set	op2<<7
000005BC =00000000                M vcam3	set	op3<<7
000005BC =00000000                M vcam4	set	op4<<7
000005BC                            	smpsVcDecayRate1    $05, $05, $05, $0A
000005BC =00000005                M vcd1r1	set	op1
000005BC =00000005                M vcd1r2	set	op2
000005BC =00000005                M vcd1r3	set	op3
000005BC =0000000A                M vcd1r4	set	op4
000005BC                            	smpsVcDecayRate2    $00, $00, $00, $00
000005BC =00000000                M vcd2r1	set	op1
000005BC =00000000                M vcd2r2	set	op2
000005BC =00000000                M vcd2r3	set	op3
000005BC =00000000                M vcd2r4	set	op4
000005BC                            	smpsVcDecayLevel    $01, $02, $02, $02
000005BC =00000001                M vcdl1	set	op1
000005BC =00000002                M vcdl2	set	op2
000005BC =00000002                M vcdl3	set	op3
000005BC =00000002                M vcdl4	set	op4
000005BC                            	smpsVcReleaseRate   $08, $08, $08, $06
000005BC =00000008                M vcrr1	set	op1
000005BC =00000008                M vcrr2	set	op2
000005BC =00000008                M vcrr3	set	op3
000005BC =00000006                M vcrr4	set	op4
000005BC                            	smpsVcTotalLevel    $80, $80, $80, $19
000005BC =00000080                M vctl1	set	op1
000005BC =00000080                M vctl2	set	op2
000005BC =00000080                M vctl3	set	op3
000005BC =00000019                M vctl4	set	op4
000005BC 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005BD =00000000                M vctlmask4	set	0
000005BD =00000000                M vctlmask3	set	0
000005BD =00000000                M vctlmask2	set	0
000005BD =00000000                M vctlmask1	set	0
000005BD 0150 2101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005C1 1214 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005C5 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005C9 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005CD 2628 2818                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005D1 1980 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005D5                            
000005D5                            ;	Voice $05
000005D5                            ;	$3A
000005D5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000005D5                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000005D5                            	smpsVcAlgorithm     $02
000005D5 =00000002                M vcalgorithm	set	val
000005D5                            	smpsVcFeedback      $07
000005D5 =00000007                M vcfeedback	set	val
000005D5                            	smpsVcUnusedBits    $00
000005D5 =00000000                M vcunusedbits	set	val
000005D5 =00000000                M vcd1r1unk	set	0
000005D5 =00000000                M vcd1r2unk	set	0
000005D5 =00000000                M vcd1r3unk	set	0
000005D5 =00000000                M vcd1r4unk	set	0
000005D5                            	smpsVcDetune        $00, $00, $00, $00
000005D5 =00000000                M vcdt1	set	op1
000005D5 =00000000                M vcdt2	set	op2
000005D5 =00000000                M vcdt3	set	op3
000005D5 =00000000                M vcdt4	set	op4
000005D5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000005D5 =00000001                M vccf1	set	op1
000005D5 =00000001                M vccf2	set	op2
000005D5 =00000007                M vccf3	set	op3
000005D5 =00000001                M vccf4	set	op4
000005D5                            	smpsVcRateScale     $01, $02, $02, $02
000005D5 =00000001                M vcrs1	set	op1
000005D5 =00000002                M vcrs2	set	op2
000005D5 =00000002                M vcrs3	set	op3
000005D5 =00000002                M vcrs4	set	op4
000005D5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000005D5 =00000013                M vcar1	set	op1
000005D5 =0000000D                M vcar2	set	op2
000005D5 =0000000E                M vcar3	set	op3
000005D5 =0000000E                M vcar4	set	op4
000005D5                            	smpsVcAmpMod        $00, $00, $00, $00
000005D5 =00000000                M vcam1	set	op1<<7
000005D5 =00000000                M vcam2	set	op2<<7
000005D5 =00000000                M vcam3	set	op3<<7
000005D5 =00000000                M vcam4	set	op4<<7
000005D5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000005D5 =00000003                M vcd1r1	set	op1
000005D5 =0000000E                M vcd1r2	set	op2
000005D5 =0000000E                M vcd1r3	set	op3
000005D5 =0000000E                M vcd1r4	set	op4
000005D5                            	smpsVcDecayRate2    $07, $00, $00, $00
000005D5 =00000007                M vcd2r1	set	op1
000005D5 =00000000                M vcd2r2	set	op2
000005D5 =00000000                M vcd2r3	set	op3
000005D5 =00000000                M vcd2r4	set	op4
000005D5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000005D5 =00000000                M vcdl1	set	op1
000005D5 =00000001                M vcdl2	set	op2
000005D5 =0000000F                M vcdl3	set	op3
000005D5 =00000001                M vcdl4	set	op4
000005D5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005D5 =0000000F                M vcrr1	set	op1
000005D5 =0000000F                M vcrr2	set	op2
000005D5 =0000000F                M vcrr3	set	op3
000005D5 =0000000F                M vcrr4	set	op4
000005D5                            	smpsVcTotalLevel    $80, $27, $28, $18
000005D5 =00000080                M vctl1	set	op1
000005D5 =00000027                M vctl2	set	op2
000005D5 =00000028                M vctl3	set	op3
000005D5 =00000018                M vctl4	set	op4
000005D5 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005D6 =00000000                M vctlmask4	set	0
000005D6 =00000000                M vctlmask3	set	0
000005D6 =00000000                M vctlmask2	set	0
000005D6 =00000000                M vctlmask1	set	0
000005D6 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005DA 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005DE 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005E2 0000 0007                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005E6 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005EA 1827 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005EE                            
000005EE                            ;	Voice $06
000005EE                            ;	$3A
000005EE                            ;	$31, $37, $31, $31, 	$8D, $8D, $8E, $53, 	$0E, $0E, $0E, $03
000005EE                            ;	$00, $00, $00, $00, 	$13, $FA, $13, $0A, 	$17, $28, $26, $00
000005EE                            	smpsVcAlgorithm     $02
000005EE =00000002                M vcalgorithm	set	val
000005EE                            	smpsVcFeedback      $07
000005EE =00000007                M vcfeedback	set	val
000005EE                            	smpsVcUnusedBits    $00
000005EE =00000000                M vcunusedbits	set	val
000005EE =00000000                M vcd1r1unk	set	0
000005EE =00000000                M vcd1r2unk	set	0
000005EE =00000000                M vcd1r3unk	set	0
000005EE =00000000                M vcd1r4unk	set	0
000005EE                            	smpsVcDetune        $03, $03, $03, $03
000005EE =00000003                M vcdt1	set	op1
000005EE =00000003                M vcdt2	set	op2
000005EE =00000003                M vcdt3	set	op3
000005EE =00000003                M vcdt4	set	op4
000005EE                            	smpsVcCoarseFreq    $01, $01, $07, $01
000005EE =00000001                M vccf1	set	op1
000005EE =00000001                M vccf2	set	op2
000005EE =00000007                M vccf3	set	op3
000005EE =00000001                M vccf4	set	op4
000005EE                            	smpsVcRateScale     $01, $02, $02, $02
000005EE =00000001                M vcrs1	set	op1
000005EE =00000002                M vcrs2	set	op2
000005EE =00000002                M vcrs3	set	op3
000005EE =00000002                M vcrs4	set	op4
000005EE                            	smpsVcAttackRate    $13, $0E, $0D, $0D
000005EE =00000013                M vcar1	set	op1
000005EE =0000000E                M vcar2	set	op2
000005EE =0000000D                M vcar3	set	op3
000005EE =0000000D                M vcar4	set	op4
000005EE                            	smpsVcAmpMod        $00, $00, $00, $00
000005EE =00000000                M vcam1	set	op1<<7
000005EE =00000000                M vcam2	set	op2<<7
000005EE =00000000                M vcam3	set	op3<<7
000005EE =00000000                M vcam4	set	op4<<7
000005EE                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000005EE =00000003                M vcd1r1	set	op1
000005EE =0000000E                M vcd1r2	set	op2
000005EE =0000000E                M vcd1r3	set	op3
000005EE =0000000E                M vcd1r4	set	op4
000005EE                            	smpsVcDecayRate2    $00, $00, $00, $00
000005EE =00000000                M vcd2r1	set	op1
000005EE =00000000                M vcd2r2	set	op2
000005EE =00000000                M vcd2r3	set	op3
000005EE =00000000                M vcd2r4	set	op4
000005EE                            	smpsVcDecayLevel    $00, $01, $0F, $01
000005EE =00000000                M vcdl1	set	op1
000005EE =00000001                M vcdl2	set	op2
000005EE =0000000F                M vcdl3	set	op3
000005EE =00000001                M vcdl4	set	op4
000005EE                            	smpsVcReleaseRate   $0A, $03, $0A, $03
000005EE =0000000A                M vcrr1	set	op1
000005EE =00000003                M vcrr2	set	op2
000005EE =0000000A                M vcrr3	set	op3
000005EE =00000003                M vcrr4	set	op4
000005EE                            	smpsVcTotalLevel    $00, $26, $28, $17
000005EE =00000000                M vctl1	set	op1
000005EE =00000026                M vctl2	set	op2
000005EE =00000028                M vctl3	set	op3
000005EE =00000017                M vctl4	set	op4
000005EE 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005EF =00000000                M vctlmask4	set	0
000005EF =00000000                M vctlmask3	set	0
000005EF =00000000                M vctlmask2	set	0
000005EF =00000000                M vctlmask1	set	0
000005EF 3131 3731                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005F3 8D8E 8D53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005F7 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005FB 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005FF 1313 FA0A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000603 1726 2800                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000607                            
00000607                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music14:	section	org($1380),file("sound/music/compressed/Options.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/Options.asm"	; include the actual music file for assembly
00000000                            		pops	
00000000                            		
00000000                            		pushs
00000000                            Music15:	section	org($1380),file("sound/music/compressed/Ending.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/Ending.asm"	; include the actual music file for assembly
00000000                            		pops	
00000000                            						
00000000                            
