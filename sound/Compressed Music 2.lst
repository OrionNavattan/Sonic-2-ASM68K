00000000                            		include "sound/Compressed Music Header.asm"
00000000                            		opt	l.					; . is the local label symbol
00000000                            		opt	ae-					; automatic evens disabled by default
00000000                            		opt an+					; allow -h suffix for hexadecimal (used in the Z80 code)		
00000000                            		opt	ws+					; allow statements to contain white-spaces
00000000                            		opt	w+					; print warnings
00000000                            ;		opt	m+					; do not expand macros - if enabled, this can break assembling
00000000                            
00000000                            Header: group word,org($1380)
00000000                            		section _Header,Header
00000000                            
00000000                            ifarg:		macros
00000000                            		if strlen("\1")>0
00000000                            		
00000000                            z80_ptr: macros	; make a z80 pointer for use with compressed music (that is, NOT relative to $8000, the starting address of a ROM bank)
00000000                            		dc.w ((\1&$7FFF)<<8)&$FF00+(\1&$7FFF)>>8		
00000000                            
00000000                            		include "sound/SMPS2ASM.asm"
00000000                            ; ===========================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; Ported to ASM68K by Brainulator with additional modifications by OrionNavattan
00000000                            ; ===========================================================================
00000000                            ; Permission to use, copy, modify, and/or distribute this software for any
00000000                            ; purpose with or without fee is hereby granted.
00000000                            ;
00000000                            ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
00000000                            ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
00000000                            ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
00000000                            ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
00000000                            ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
00000000                            ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
00000000                            ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
00000000                            ; ===========================================================================
00000000                            
00000000 =00000002                  SonicDriverVer			= 2
00000000 =00000001                  SMPS2ASMVer			= 1
00000000                            ; Set the following to non-zero to use all S2 DAC samples, or to zero otherwise.
00000000                            ; The S1 samples are a subset of this.
00000000 =00000001                  use_s2_samples			= 1
00000000                            ; Set the following to non-zero to use all S3D DAC samples, or to zero
00000000                            ; otherwise. Most of the S3D samples are also present in S3/S&K, but
00000000                            ; there are two samples specific to S3D.
00000000 =00000001                  use_s3d_samples			= 1
00000000                            ; Set the following to non-zero to use all S3 DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_s3_samples			= 1
00000000                            ; Set the following to non-zero to use all S&K DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_sk_samples			= 1
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000                            		rsset	$88
00000000 =00000088                  smpsPitch10lo		rs.b	$C
00000000 =00000094                  smpsPitch09lo		rs.b	$C
00000000 =000000A0                  smpsPitch08lo		rs.b	$C
00000000 =000000AC                  smpsPitch07lo		rs.b	$C
00000000 =000000B8                  smpsPitch06lo		rs.b	$C
00000000 =000000C4                  smpsPitch05lo		rs.b	$C
00000000 =000000D0                  smpsPitch04lo		rs.b	$C
00000000 =000000DC                  smpsPitch03lo		rs.b	$C
00000000 =000000E8                  smpsPitch02lo		rs.b	$C
00000000 =000000F4                  smpsPitch01lo		rs.b	$C
00000000                            	rsreset
00000000 =00000000                  smpsPitch00		rs.b	$C
00000000 =0000000C                  smpsPitch01hi		rs.b	$C
00000000 =00000018                  smpsPitch02hi		rs.b	$C
00000000 =00000024                  smpsPitch03hi		rs.b	$C
00000000 =00000030                  smpsPitch04hi		rs.b	$C
00000000 =0000003C                  smpsPitch05hi		rs.b	$C
00000000 =00000048                  smpsPitch06hi		rs.b	$C
00000000 =00000054                  smpsPitch07hi		rs.b	$C
00000000 =00000060                  smpsPitch08hi		rs.b	$C
00000000 =0000006C                  smpsPitch09hi		rs.b	$C
00000000 =00000078                  smpsPitch10hi		rs.b	$C
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Note Equates
00000000                            		rsset	$80
00000000 =00000080                  nRst		rs.b	1
00000000 =00000081                  nC0		rs.b	1
00000000 =00000082                  nCs0		rs.b	1
00000000 =00000083                  nD0		rs.b	1
00000000 =00000084                  nEb0		rs.b	1
00000000 =00000085                  nE0		rs.b	1
00000000 =00000086                  nF0		rs.b	1
00000000 =00000087                  nFs0		rs.b	1
00000000 =00000088                  nG0		rs.b	1
00000000 =00000089                  nAb0		rs.b	1
00000000 =0000008A                  nA0		rs.b	1
00000000 =0000008B                  nBb0		rs.b	1
00000000 =0000008C                  nB0		rs.b	1
00000000 =0000008D                  nC1		rs.b	1
00000000 =0000008E                  nCs1		rs.b	1
00000000 =0000008F                  nD1		rs.b	1
00000000 =00000090                  nEb1		rs.b	1
00000000 =00000091                  nE1		rs.b	1
00000000 =00000092                  nF1		rs.b	1
00000000 =00000093                  nFs1		rs.b	1
00000000 =00000094                  nG1		rs.b	1
00000000 =00000095                  nAb1		rs.b	1
00000000 =00000096                  nA1		rs.b	1
00000000 =00000097                  nBb1		rs.b	1
00000000 =00000098                  nB1		rs.b	1
00000000 =00000099                  nC2		rs.b	1
00000000 =0000009A                  nCs2		rs.b	1
00000000 =0000009B                  nD2		rs.b	1
00000000 =0000009C                  nEb2		rs.b	1
00000000 =0000009D                  nE2		rs.b	1
00000000 =0000009E                  nF2		rs.b	1
00000000 =0000009F                  nFs2		rs.b	1
00000000 =000000A0                  nG2		rs.b	1
00000000 =000000A1                  nAb2		rs.b	1
00000000 =000000A2                  nA2		rs.b	1
00000000 =000000A3                  nBb2		rs.b	1
00000000 =000000A4                  nB2		rs.b	1
00000000 =000000A5                  nC3		rs.b	1
00000000 =000000A6                  nCs3		rs.b	1
00000000 =000000A7                  nD3		rs.b	1
00000000 =000000A8                  nEb3		rs.b	1
00000000 =000000A9                  nE3		rs.b	1
00000000 =000000AA                  nF3		rs.b	1
00000000 =000000AB                  nFs3		rs.b	1
00000000 =000000AC                  nG3		rs.b	1
00000000 =000000AD                  nAb3		rs.b	1
00000000 =000000AE                  nA3		rs.b	1
00000000 =000000AF                  nBb3		rs.b	1
00000000 =000000B0                  nB3		rs.b	1
00000000 =000000B1                  nC4		rs.b	1
00000000 =000000B2                  nCs4		rs.b	1
00000000 =000000B3                  nD4		rs.b	1
00000000 =000000B4                  nEb4		rs.b	1
00000000 =000000B5                  nE4		rs.b	1
00000000 =000000B6                  nF4		rs.b	1
00000000 =000000B7                  nFs4		rs.b	1
00000000 =000000B8                  nG4		rs.b	1
00000000 =000000B9                  nAb4		rs.b	1
00000000 =000000BA                  nA4		rs.b	1
00000000 =000000BB                  nBb4		rs.b	1
00000000 =000000BC                  nB4		rs.b	1
00000000 =000000BD                  nC5		rs.b	1
00000000 =000000BE                  nCs5		rs.b	1
00000000 =000000BF                  nD5		rs.b	1
00000000 =000000C0                  nEb5		rs.b	1
00000000 =000000C1                  nE5		rs.b	1
00000000 =000000C2                  nF5		rs.b	1
00000000 =000000C3                  nFs5		rs.b	1
00000000 =000000C4                  nG5		rs.b	1
00000000 =000000C5                  nAb5		rs.b	1
00000000 =000000C6                  nA5		rs.b	1
00000000 =000000C7                  nBb5		rs.b	1
00000000 =000000C8                  nB5		rs.b	1
00000000 =000000C9                  nC6		rs.b	1
00000000 =000000CA                  nCs6		rs.b	1
00000000 =000000CB                  nD6		rs.b	1
00000000 =000000CC                  nEb6		rs.b	1
00000000 =000000CD                  nE6		rs.b	1
00000000 =000000CE                  nF6		rs.b	1
00000000 =000000CF                  nFs6		rs.b	1
00000000 =000000D0                  nG6		rs.b	1
00000000 =000000D1                  nAb6		rs.b	1
00000000 =000000D2                  nA6		rs.b	1
00000000 =000000D3                  nBb6		rs.b	1
00000000 =000000D4                  nB6		rs.b	1
00000000 =000000D5                  nC7		rs.b	1
00000000 =000000D6                  nCs7		rs.b	1
00000000 =000000D7                  nD7		rs.b	1
00000000 =000000D8                  nEb7		rs.b	1
00000000 =000000D9                  nE7		rs.b	1
00000000 =000000DA                  nF7		rs.b	1
00000000 =000000DB                  nFs7		rs.b	1
00000000 =000000DC                  nG7		rs.b	1
00000000 =000000DD                  nAb7		rs.b	1
00000000 =000000DE                  nA7		rs.b	1
00000000 =000000DF                  nBb7		rs.b	1
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; PSG volume envelope equates
00000000                            		rsset	1
00000000 =00000001                  fTone_01	rs.b	1
00000000 =00000002                  fTone_02	rs.b	1
00000000 =00000003                  fTone_03	rs.b	1
00000000 =00000004                  fTone_04	rs.b	1
00000000 =00000005                  fTone_05	rs.b	1
00000000 =00000006                  fTone_06	rs.b	1
00000000 =00000007                  fTone_07	rs.b	1
00000000 =00000008                  fTone_08	rs.b	1
00000000 =00000009                  fTone_09	rs.b	1
00000000 =0000000A                  fTone_0A	rs.b	1
00000000 =0000000B                  fTone_0B	rs.b	1
00000000 =0000000C                  fTone_0C	rs.b	1
00000000 =0000000D                  fTone_0D	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000                            		rsset	$81
00000000 =00000081                  dKick		rs.b	1
00000000 =00000082                  dSnare		rs.b	1
00000000 =00000083                  dClap		rs.b	1
00000000 =00000084                  dScratch	rs.b	1
00000000 =00000085                  dTimpani	rs.b	1
00000000 =00000086                  dHiTom		rs.b	1
00000000 =00000087                  dVLowClap	rs.b	1
00000000 =00000088                  dHiTimpani	rs.b	1
00000000 =00000089                  dMidTimpani	rs.b	1
00000000 =0000008A                  dLowTimpani	rs.b	1
00000000 =0000008B                  dVLowTimpani	rs.b	1
00000000 =0000008C                  dMidTom		rs.b	1
00000000 =0000008D                  dLowTom		rs.b	1
00000000 =0000008E                  dFloorTom	rs.b	1
00000000 =0000008F                  dHiClap		rs.b	1
00000000 =00000090                  dMidClap	rs.b	1
00000000 =00000091                  dLowClap	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            little_endian macros
00000000                            		dc.w	((\1<<8)&$FF00)|((\1>>8)&$FF)
00000000                            
00000000                            ;	if ~def(z80_ptr)
00000000                            ;z80_ptr macros
00000000                            ;		dc.w	((\1<<8)&$FF00)|((\1>>8)&$7F)|$80
00000000                            ;	endc
00000000                            
00000000                            ;conv0To256  function n,((n==0)<<8)|n
00000000                            ;s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
00000000                            ;s2TempotoS3 function n,($100-((n==0)|n))&$FF
00000000                            ;s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
00000000                            ;s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
00000000                            ;s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
00000000                            ;s3TempotoS2 function n,s2TempotoS3(n)
00000000                            
00000000                            s2TempotoS1 macro n
00000000                            	s21convval:	= (((768-n)>>1)/(256-n))&$FF
00000000                            	endm
00000000                            
00000000                            s2TempotoS3 macro n
00000000                            	s23convval:	= ($100-((n=0)|n))&$FF
00000000                            	s32convval:	= s23convval
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro n
00000000                            	if n=0
00000000                            		s12convval:	= ((((256-1)<<8)+(256>>1))/256)&$FF
00000000                            	else
00000000                            		s12convval:	= ((((n-1)<<8)+(n>>1))/n)&$FF
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            s1TempotoS3 macro n
00000000                            	s1TempotoS2	n
00000000                            	s2TempotoS3	s12convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS1 macro n
00000000                            	s2TempotoS3	n
00000000                            	s2TempotoS1	s23convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS2 macros
00000000                            	s2TempotoS3	\_
00000000                            
00000000                            convertMainTempoMod macro val
00000000                            	if ((SourceDriver>=3)&(SonicDriverVer>=3))|(SonicDriverVer=SourceDriver)
00000000                            		dc.b \val
00000000                            	elseif SourceDriver=1
00000000                            		if \val\=1
00000000                            			inform 3,"Invalid main tempo of 1 in song from Sonic 1"
00000000                            		endc
00000000                            		if SonicDriverVer=2
00000000                            			s1TempotoS2	\val
00000000                            			dc.b s12convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s1TempotoS3	\val
00000000                            			dc.b s13convval
00000000                            		endc
00000000                            	elseif SourceDriver=2
00000000                            		if \val\=0
00000000                            			inform 3,"Invalid main tempo of 0 in song from Sonic 2"
00000000                            		endc
00000000                            		if SonicDriverVer=1
00000000                            			s2TempotoS1	\val
00000000                            			dc.b s21convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s2TempotoS3	\val
00000000                            			dc.b s23convval
00000000                            		endc
00000000                            	else;if SourceDriver>=3
00000000                            		if \val\=0
00000000                            			inform 2,"Performing approximate conversion of Sonic 3 main tempo modifier of 0"
00000000                            		endc
00000000                            		if SonicDriverVer=1
00000000                            			s3TempotoS1	\val
00000000                            			dc.b s31convval
00000000                            		else;if SonicDriverVer=2
00000000                            			s3TempotoS2	\val
00000000                          M 	s2tempotos3	\val
00000000                            			dc.b s32convval
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            PSGPitchConvert macro val
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b (\val\+psgdelta)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b (\val\-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b \val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            CheckedChannelPointer macro location
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                          M 	dc.w	((\location\&$7fff)<<8)&$ff00+(\location\&$7fff)>>8
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Tracks for Sonic 1 songs must come after the start of the song"
00000000                            		else
00000000                            			dc.w \location\-songStart
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver,sourcesmps2asmver
00000000                            SourceDriver = ver
00000000                            	if (narg=2)
00000000                            SourceSMPS2ASM = sourcesmps2asmver
00000000                            	else
00000000                            SourceSMPS2ASM = 0
00000000                            	endc
00000000                            songStart = offset(*)
00000000                            	if SMPS2ASMVer<SourceSMPS2ASM
00000000                            		inform 1,"Song at 0x%h was made for a newer version of SMPS2ASM (this is version %d, but song wants at least version %d).",songStart,SMPS2ASMVer,SourceSMPS2ASM
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            		dc.w $0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro location
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                          M 	dc.w	((\location\&$7fff)<<8)&$ff00+(\location\&$7fff)>>8
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Voice banks for Sonic 1 songs must come after the song"
00000000                            		else
00000000                            			dc.w \location\-songStart
00000000                            		endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>offset(*)
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endc
00000000                            	if SonicDriverVer>=5
00000000                            		z80_ptr	z80_UniVoiceBank
00000000                          M 	dc.w	((z80_univoicebank&$7fff)<<8)&$ff00+(z80_univoicebank&$7fff)>>8
00000000                            	elseif SonicDriverVer>=3
00000000                            		little_endian	z80_UniVoiceBank
00000000                          M 	dc.w	((z80_univoicebank<<8)&$ff00)|((z80_univoicebank>>8)&$ff)
00000000                            	else
00000000                            		inform 3,"Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b \fm,\psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            	convertMainTempoMod \mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	if strlen("\pitch")>0
00000000                            		dc.b	pitch
00000000                            		if strlen("\vol")>0
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	dc.b \pitch,\vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro location,pitch,vol,mod,voice
00000000                            	CheckedChannelPointer \location
00000000                            	PSGPitchConvert \pitch
00000000                            	dc.b \vol
00000000                            	; Frequency envelope
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
00000000                            		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
00000000                            		; other drivers may try to process as valid data, so manually force it to 0 here.
00000000                            		dc.b	0
00000000                            	else
00000000                            		if (SonicDriverVer<3)&(SourceDriver>=3)&(\mod<>0)
00000000                            			inform 1,"This track header specifies a frequency envelope, but this driver does not support them."
00000000                            		endc
00000000                            		dc.b \mod
00000000                            	endc
00000000                            	; Volume envelope
00000000                            	dc.b \voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b \div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b \chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,location,pitch,vol
00000000                            	if (SonicDriverVer>=3)&(chanid=cNoise)
00000000                            		inform 3,"Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	elseif (SonicDriverVer<3)&(chanid=cFM6)
00000000                            		inform 3,"Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	CheckedChannelPointer \location\
00000000                            	if (chanid&$80)<>0
00000000                            		PSGPitchConvert \pitch
00000000                            	else
00000000                            		dc.b \pitch
00000000                            	endc
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000 =00000000                  panNone equ $00
00000000 =00000040                  panRight equ $40
00000000 =00000080                  panLeft equ $80
00000000 =000000C0                  panCentre equ $C0 ; silly Brits :U
00000000 =000000C0                  panCenter equ $C0
00000000                            
00000000                            ; E1xx - Set channel detune to val
00000000                            smpsDetune macro val
00000000                            	dc.b $E1,\val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	if SonicDriverVer<3
00000000                            		dc.b $E2,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $F9
00000000                            	else
00000000                            		dc.b $E3
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $E2
00000000                            		ifarg val
00000000                          M 	if	strlen("val")>0
00000000                            			dc.b \val
00000000                            		else
00000000                            			dc.b $FF
00000000                            		endc
00000000                            		if SourceDriver<3
00000000                            			smpsStop
00000000                            		endc
00000000                            	elseif (SourceDriver>=3)&(strlen("\val"))&(strcmp("\val","$FF"))
00000000                            		; This is one of those weird S3+ "fades" that we don't need
00000000                            	else
00000000                            		dc.b $E4
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	if SonicDriverVer>=5
00000000                            		; New flag unique to Flamewing's modified S&K driver
00000000                            		dc.b $FF,$08,\val
00000000                            	elseif SonicDriverVer=3
00000000                            		inform 3,"Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
00000000                            	else
00000000                            		dc.b $E5,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b $E6,\val
00000000                            	endm
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	if (SonicDriverVer>=5)&(SourceDriver<3)
00000000                            		; Unique to Flamewing's modified driver
00000000                            		dc.b $FF,$0A,\val
00000000                            	else
00000000                            		if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            			inform 1,"Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            			inform 1,"Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		endc
00000000                            		dc.b $E8,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsChangeTransposition macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FB,\val
00000000                            	else
00000000                            		dc.b $E9,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FF,$00
00000000                            	else
00000000                            		dc.b $EA
00000000                            	endc
00000000                            	convertMainTempoMod \val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FF,$04,val
00000000                            	else
00000000                            		dc.b $EB,\val
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $E4,\val
00000000                            	else
00000000                            		inform 3,"Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b $EC,\vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b $ED
00000000                            	else
00000000                            		inform 3,"Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b $EE
00000000                            	else
00000000                            		inform 2,"Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
00000000                            		smpsStop
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsFMvoice macro voice,songID
00000000                            	if (SonicDriverVer>=3)&(strlen("\songID")>0)
00000000                            		dc.b $EF,\voice|$80,\songID+$81
00000000                            	else
00000000                            		dc.b $EF,\voice
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b \wait+1,\speed,\change,((\step+1)*\speed)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b wait-1,\speed,\change
00000000                            		conv_step:	= ((step=0)<<8)|step
00000000                            		conv_speed:	= ((speed=0)<<8)|speed
00000000                            		dc.b (\conv_step/\conv_speed)-1
00000000                            	else
00000000                            		dc.b \wait,\speed,\change,\step
00000000                            	endc
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro type
00000000                            	if SonicDriverVer>=3
00000000                            		if strlen("\type")>0
00000000                            			dc.b $F4,\type
00000000                            		else
00000000                            			dc.b $F4,$80
00000000                            		endc
00000000                            	else
00000000                            		dc.b $F1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b $F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b $F3,\form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b $FA
00000000                            	else
00000000                            		dc.b $F4
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b $F5,\voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b $F6
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr \loc
00000000                          M 	dc.w	((\loc&$7fff)<<8)&$ff00+(\loc&$7fff)>>8
00000000                            	else
00000000                            		dc.w \loc-offset(*)-1
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if (SonicDriverVer>=3)&(strlen("\val2")>0)
00000000                            		dc.b $E5,\val1,\val2
00000000                            	else
00000000                            		dc.b $E6,\val1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsMaxRelRate macro
00000000                            	if SonicDriverVer>=3
00000000                            		; Emulate it in S3/S&K/S3D driver
00000000                            		smpsFMICommand $88,$0F
00000000                            		smpsFMICommand $8C,$0F
00000000                            	else
00000000                            		dc.b $F9
00000000                            	endc
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Backwards compatibility
00000000                            smpsAlterNote macro
00000000                            	smpsDetune	\_
00000000                            	endm
00000000                            
00000000                            smpsAlterPitch macro
00000000                            	smpsChangeTransposition	\_
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro
00000000                            	smpsFMVolEnv	\_
00000000                            	endm
00000000                            
00000000                            smpsWeirdD1LRR macro
00000000                            	smpsMaxRelRate \_
00000000                            	endm
00000000                            
00000000                            smpsSetvoice macro
00000000                            	smpsFMvoice \_
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback = val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm = val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
00000000                            vcUnusedBits = val
00000000                            	if (strlen("\d1r1")>0)&(strlen("\d1r2")>0)&(strlen("\d1r3")>0)&(strlen("\d1r4")>0)
00000000                            vcD1R1Unk = d1r1<<5
00000000                            vcD1R2Unk = d1r2<<5
00000000                            vcD1R3Unk = d1r3<<5
00000000                            vcD1R4Unk = d1r4<<5
00000000                            	else
00000000                            vcD1R1Unk = 0
00000000                            vcD1R2Unk = 0
00000000                            vcD1R3Unk = 0
00000000                            vcD1R4Unk = 0
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 = op1
00000000                            vcDT2 = op2
00000000                            vcDT3 = op3
00000000                            vcDT4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 = op1
00000000                            vcCF2 = op2
00000000                            vcCF3 = op3
00000000                            vcCF4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 = op1
00000000                            vcRS2 = op2
00000000                            vcRS3 = op3
00000000                            vcRS4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 = op1
00000000                            vcAR2 = op2
00000000                            vcAR3 = op3
00000000                            vcAR4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
00000000                            ; were the Amplitude Modulation.
00000000                            ; According to several docs, however, it's actually the high bit.
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            	if SourceSMPS2ASM=0
00000000                            vcAM1 = op1<<5
00000000                            vcAM2 = op2<<5
00000000                            vcAM3 = op3<<5
00000000                            vcAM4 = op4<<5
00000000                            	else
00000000                            vcAM1 = op1<<7
00000000                            vcAM2 = op2<<7
00000000                            vcAM3 = op3<<7
00000000                            vcAM4 = op4<<7
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 = op1
00000000                            vcD1R2 = op2
00000000                            vcD1R3 = op3
00000000                            vcD1R4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 = op1
00000000                            vcD2R2 = op2
00000000                            vcD2R3 = op3
00000000                            vcD2R4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 = op1
00000000                            vcDL2 = op2
00000000                            vcDL3 = op3
00000000                            vcDL4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 = op1
00000000                            vcRR2 = op2
00000000                            vcRR3 = op3
00000000                            vcRR4 = op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            ; The original SMPS2ASM decides TL high bits automatically,
00000000                            ; but later versions leave it up to the user.
00000000                            ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
00000000                            ; then we *want* the TL bits to match the algorithm, because SMPS 68k
00000000                            ; prefers the algorithm over the TL bits, ignoring the latter, while
00000000                            ; SMPS Z80 does the opposite.
00000000                            ; Unfortunately, there's nothing we can do if we're trying to convert
00000000                            ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
00000000                            ; what we do, so we just print a warning.
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 = op1
00000000                            vcTL2 = op2
00000000                            vcTL3 = op3
00000000                            vcTL4 = op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            	if SourceSMPS2ASM=0
00000000                            vcTLMask4 = ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 = ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 = ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 = $80
00000000                            	else
00000000                            vcTLMask4 = 0
00000000                            vcTLMask3 = 0
00000000                            vcTLMask2 = 0
00000000                            vcTLMask1 = 0
00000000                            	endc
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            vcTLMask4 = ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 = ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 = ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 = $80
00000000                            vcTL1 = vcTL1&$7F
00000000                            vcTL2 = vcTL2&$7F
00000000                            vcTL3 = vcTL3&$7F
00000000                            vcTL4 = vcTL4&$7F
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)&((((vcTL1|vcTLMask1)&$80)<>$80)|(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))|(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))|(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm=7)<<7)))
00000000                            		inform 1,"Voice at 0x%h has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers.",offset(*)
00000000                            	endc
00000000                            	if SonicDriverVer=2
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT2<<4)+vcCF2,       (vcDT3<<4)+vcCF3,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS2<<6)+vcAR2,       (vcRS3<<6)+vcAR3,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R2,                 vcD2R3,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL2<<4)+vcRR2,       (vcDL3<<4)+vcRR3,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL2|vcTLMask2,        vcTL3|vcTLMask3,        vcTL1|vcTLMask1
00000000                            	else
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT3<<4)+vcCF3,       (vcDT2<<4)+vcCF2,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS3<<6)+vcAR3,       (vcRS2<<6)+vcAR2,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R3,                 vcD2R2,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL3<<4)+vcRR3,       (vcDL2<<4)+vcRR2,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL3|vcTLMask3,        vcTL2|vcTLMask2,        vcTL1|vcTLMask1
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            		
00000000                            ; Generate an include for a music file and output the assembled bytecode to its own file.		
00000000                            inc_music:	macro songname
00000000                            		pushs
00000000                            Music\@:	section	org($1380),file("sound/music/compressed/\songname\.unc"),over(Header)	; output each music track to its own file
00000000                            		include "sound/music/\songname\.asm"	; include the actual music file for assembly
00000000                            		
00000000                            		if offset(*)>7C0h ; size of Z80 decompression buffer
00000000                            			inform 2,"\songname is too large for the Z80 decompression buffer! It should be uncompressed instead."
00000000                            		endc	
00000000                            		pops					
00000000                            		endm
00000000                            
00000000                            		inc_music	Options
00000000                          M 	pushs
00000000                          M music_13:	section	org($1380),file("sound/music/compressed/options.unc"),over(header)
00000000                          M 	include	"sound/music/options.asm"
00000000                            Options_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000001                M sourcesmps2asm	=	sourcesmps2asmver
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     Options_Voices
00000000 0000                     M 	dc.w	((options_voices&$7fff)<<8)&$ff00+(options_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $87
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$87
00000005 87                       M 	dc.b	$87
00000006                            
00000006                            	smpsHeaderDAC       Options_DAC
00000006                          M 	checkedchannelpointer	options_dac
00000006 0000                     M 	dc.w	((options_dac&$7fff)<<8)&$ff00+(options_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Options_FM1,	$F4, $05
0000000A                          M 	checkedchannelpointer	options_fm1
0000000A 0000                     M 	dc.w	((options_fm1&$7fff)<<8)&$ff00+(options_fm1&$7fff)>>8
0000000C F405                     M 	dc.b	$f4,$05
0000000E                            	smpsHeaderFM        Options_FM2,	$00, $07
0000000E                          M 	checkedchannelpointer	options_fm2
0000000E 0000                     M 	dc.w	((options_fm2&$7fff)<<8)&$ff00+(options_fm2&$7fff)>>8
00000010 0007                     M 	dc.b	$00,$07
00000012                            	smpsHeaderFM        Options_FM3,	$E8, $0E
00000012                          M 	checkedchannelpointer	options_fm3
00000012 0000                     M 	dc.w	((options_fm3&$7fff)<<8)&$ff00+(options_fm3&$7fff)>>8
00000014 E80E                     M 	dc.b	$e8,$0e
00000016                            	smpsHeaderFM        Options_FM4,	$00, $13
00000016                          M 	checkedchannelpointer	options_fm4
00000016 0000                     M 	dc.w	((options_fm4&$7fff)<<8)&$ff00+(options_fm4&$7fff)>>8
00000018 0013                     M 	dc.b	$00,$13
0000001A                            	smpsHeaderFM        Options_FM5,	$00, $07
0000001A                          M 	checkedchannelpointer	options_fm5
0000001A 0000                     M 	dc.w	((options_fm5&$7fff)<<8)&$ff00+(options_fm5&$7fff)>>8
0000001C 0007                     M 	dc.b	$00,$07
0000001E                            	smpsHeaderPSG       Options_PSG1,	$E8, $06, $00, fTone_03
0000001E                          M 	checkedchannelpointer	options_psg1
0000001E 0000                     M 	dc.w	((options_psg1&$7fff)<<8)&$ff00+(options_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$e8
00000020 E8                       M 	dc.b	$e8
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 03                       M 	dc.b	ftone_03
00000024                            	smpsHeaderPSG       Options_PSG2,	$DC, $05, $00, fTone_07
00000024                          M 	checkedchannelpointer	options_psg2
00000024 0000                     M 	dc.w	((options_psg2&$7fff)<<8)&$ff00+(options_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$dc
00000026 DC                       M 	dc.b	$dc
00000027 05                       M 	dc.b	$05
00000028 00                       M 	dc.b	$00
00000029 07                       M 	dc.b	ftone_07
0000002A                            	smpsHeaderPSG       Options_PSG3,	$DC, $06, $00, fTone_07
0000002A                          M 	checkedchannelpointer	options_psg3
0000002A 0000                     M 	dc.w	((options_psg3&$7fff)<<8)&$ff00+(options_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$dc
0000002C DC                       M 	dc.b	$dc
0000002D 06                       M 	dc.b	$06
0000002E 00                       M 	dc.b	$00
0000002F 07                       M 	dc.b	ftone_07
00000030                            
00000030                            ; FM4 Data
00000030                            Options_FM4:
00000030                            	smpsSetvoice        $03
00000030                          M 	smpsfmvoice	$03
00000030 EF03                     M 	dc.b	$ef,$03
00000032                            	smpsPan             panRight, $00
00000032 E040                     M 	dc.b	$e0,direction+amsfms
00000034                            	smpsNoteFill        $05
00000034 E805                     M 	dc.b	$e8,$05
00000036                            
00000036                            Options_Loop00:
00000036 BD06 BCBA B8               	dc.b	nC5, $06, nB4, nA4, nG4
0000003B                            	smpsLoop            $00, $04, Options_Loop00
0000003B F7                       M 	dc.b	$f7
0000003C 0004                     M 	dc.b	index,loops
0000003E 0000                     M 	dc.w	((options_loop00&$7fff)<<8)&$ff00+(options_loop00&$7fff)>>8
00000040 BDBB B9B8 BDBB B9B8 BFBD+  	dc.b	nC5, nBb4, nAb4, nG4, nC5, nBb4, nAb4, nG4, nD5, nC5, nBb4, nAb4
0000004C BFBD BBB9                  	dc.b	nD5, nC5, nBb4, nAb4
00000050                            	smpsJump            Options_Loop00
00000050 F6                       M 	dc.b	$f6
00000051 0000                     M 	dc.w	((options_loop00&$7fff)<<8)&$ff00+(options_loop00&$7fff)>>8
00000053                            
00000053                            ; FM3 Data
00000053                            Options_FM3:
00000053                            	smpsSetvoice        $04
00000053                          M 	smpsfmvoice	$04
00000053 EF04                     M 	dc.b	$ef,$04
00000055                            
00000055                            Options_Jump01:
00000055 800C B106 B5B8 0CB1 06B5+  	dc.b	nRst, $0C, nC4, $06, nE4, nG4, $0C, nC4, $06, nE4, nG4, $18
00000061 E718 800C AD06 B1B4 1880+  	dc.b	smpsNoAttack, $18, nRst, $0C, nAb3, $06, nC4, nEb4, $18, nRst, $0C, nBb3
0000006D 06B3 B618                  	dc.b	$06, nD4, nF4, $18
00000071                            	smpsJump            Options_Jump01
00000071 F6                       M 	dc.b	$f6
00000072 0000                     M 	dc.w	((options_jump01&$7fff)<<8)&$ff00+(options_jump01&$7fff)>>8
00000074                            
00000074                            ; FM5 Data
00000074                            Options_FM5:
00000074                            	smpsSetvoice        $01
00000074                          M 	smpsfmvoice	$01
00000074 EF01                     M 	dc.b	$ef,$01
00000076                            	smpsPan             panRight, $00
00000076 E040                     M 	dc.b	$e0,direction+amsfms
00000078                            	smpsModSet          $02, $01, $02, $04
00000078 F0                       M 	dc.b	$f0
00000079 0201 0204                M 	dc.b	$02,$01,$02,$04
0000007D 8002                       	dc.b	nRst, $02
0000007F                            	smpsJump            Options_Jump00
0000007F F6                       M 	dc.b	$f6
00000080 0000                     M 	dc.w	((options_jump00&$7fff)<<8)&$ff00+(options_jump00&$7fff)>>8
00000082                            
00000082                            ; FM2 Data
00000082                            Options_FM2:
00000082                            	smpsSetvoice        $01
00000082                          M 	smpsfmvoice	$01
00000082 EF01                     M 	dc.b	$ef,$01
00000084                            	smpsPan             panLeft, $00
00000084 E080                     M 	dc.b	$e0,direction+amsfms
00000086                            	smpsModSet          $12, $01, $02, $04
00000086 F0                       M 	dc.b	$f0
00000087 1201 0204                M 	dc.b	$12,$01,$02,$04
0000008B                            
0000008B                            Options_Jump00:
0000008B 800C BD03 80BD 80BD 0CBF+  	dc.b	nRst, $0C, nC5, $03, nRst, nC5, nRst, nC5, $0C, nD5, $03, nRst
00000097 C20C 8006 C180 BF80 BD80+  	dc.b	nF5, $0C, nRst, $06, nE5, nRst, nD5, nRst, nC5, nRst, nEb5, $0C
000000A3 C206 BD06 E718 E718 E718   	dc.b	nF5, $06, nC5, $06, smpsNoAttack, $18, smpsNoAttack, $18, smpsNoAttack, $18
000000AD                            	smpsJump            Options_Jump00
000000AD F6                       M 	dc.b	$f6
000000AE 0000                     M 	dc.w	((options_jump00&$7fff)<<8)&$ff00+(options_jump00&$7fff)>>8
000000B0                            
000000B0                            ; FM1 Data
000000B0                            Options_FM1:
000000B0                            	smpsSetvoice        $02
000000B0                          M 	smpsfmvoice	$02
000000B0 EF02                     M 	dc.b	$ef,$02
000000B2 A506 8012 A506 8012 A506+  	dc.b	nC3, $06, nRst, $12, nC3, $06, nRst, $12, nC3, $06, nRst, $12
000000BE A506 80A0 0CA1 0680 12A1+  	dc.b	nC3, $06, nRst, nG2, $0C, nAb2, $06, nRst, $12, nAb2, $06, nRst
000000CA 9E0C A306 8012 A306 80A0+  	dc.b	nF2, $0C, nBb2, $06, nRst, $12, nBb2, $06, nRst, nG2, $0C
000000D5                            	smpsJump            Options_FM1
000000D5 F6                       M 	dc.b	$f6
000000D6 0000                     M 	dc.w	((options_fm1&$7fff)<<8)&$ff00+(options_fm1&$7fff)>>8
000000D8                            
000000D8                            ; PSG2 Data
000000D8                            Options_PSG2:
000000D8 8002                       	dc.b	nRst, $02
000000DA                            	smpsJump            Options_Jump00
000000DA F6                       M 	dc.b	$f6
000000DB 0000                     M 	dc.w	((options_jump00&$7fff)<<8)&$ff00+(options_jump00&$7fff)>>8
000000DD                            
000000DD                            ; PSG3 Data
000000DD                            Options_PSG3:
000000DD                            	smpsAlterNote       $01
000000DD                          M 	smpsdetune	$01
000000DD E101                     M 	dc.b	$e1,$01
000000DF 8003                       	dc.b	nRst, $03
000000E1                            	smpsJump            Options_Jump00
000000E1 F6                       M 	dc.b	$f6
000000E2 0000                     M 	dc.w	((options_jump00&$7fff)<<8)&$ff00+(options_jump00&$7fff)>>8
000000E4                            
000000E4                            ; PSG1 Data
000000E4                            Options_PSG1:
000000E4                            	smpsAlterNote       $01
000000E4                          M 	smpsdetune	$01
000000E4 E101                     M 	dc.b	$e1,$01
000000E6                            	smpsJump            Options_Jump01
000000E6 F6                       M 	dc.b	$f6
000000E7 0000                     M 	dc.w	((options_jump01&$7fff)<<8)&$ff00+(options_jump01&$7fff)>>8
000000E9                            
000000E9                            ; DAC Data
000000E9                            Options_DAC:
000000E9 820C 0404 040C 0404 040C+  	dc.b	dSnare, $0C, $04, $04, $04, $0C, $04, $04, $04, $0C, $04, $04
000000F5 048C 068E 8C8E             	dc.b	$04, dMidTom, $06, dFloorTom, dMidTom, dFloorTom
000000FB                            	smpsJump            Options_DAC
000000FB F6                       M 	dc.b	$f6
000000FC 0000                     M 	dc.w	((options_dac&$7fff)<<8)&$ff00+(options_dac&$7fff)>>8
000000FE                            
000000FE                            Options_Voices:
000000FE                            ;	Voice $00
000000FE                            ;	$35
000000FE                            ;	$3F, $31, $58, $51, 	$1F, $9E, $1F, $9E, 	$0F, $11, $0E, $12
000000FE                            ;	$0E, $05, $08, $08, 	$5F, $0F, $6F, $0F, 	$25, $2D, $2F, $80
000000FE                            	smpsVcAlgorithm     $05
000000FE =00000005                M vcalgorithm	=	val
000000FE                            	smpsVcFeedback      $06
000000FE =00000006                M vcfeedback	=	val
000000FE                            	smpsVcUnusedBits    $00
000000FE =00000000                M vcunusedbits	=	val
000000FE =00000000                M vcd1r1unk	=	0
000000FE =00000000                M vcd1r2unk	=	0
000000FE =00000000                M vcd1r3unk	=	0
000000FE =00000000                M vcd1r4unk	=	0
000000FE                            	smpsVcDetune        $05, $05, $03, $03
000000FE =00000005                M vcdt1	=	op1
000000FE =00000005                M vcdt2	=	op2
000000FE =00000003                M vcdt3	=	op3
000000FE =00000003                M vcdt4	=	op4
000000FE                            	smpsVcCoarseFreq    $01, $08, $01, $0F
000000FE =00000001                M vccf1	=	op1
000000FE =00000008                M vccf2	=	op2
000000FE =00000001                M vccf3	=	op3
000000FE =0000000F                M vccf4	=	op4
000000FE                            	smpsVcRateScale     $02, $00, $02, $00
000000FE =00000002                M vcrs1	=	op1
000000FE =00000000                M vcrs2	=	op2
000000FE =00000002                M vcrs3	=	op3
000000FE =00000000                M vcrs4	=	op4
000000FE                            	smpsVcAttackRate    $1E, $1F, $1E, $1F
000000FE =0000001E                M vcar1	=	op1
000000FE =0000001F                M vcar2	=	op2
000000FE =0000001E                M vcar3	=	op3
000000FE =0000001F                M vcar4	=	op4
000000FE                            	smpsVcAmpMod        $00, $00, $00, $00
000000FE =00000000                M vcam1	=	op1<<7
000000FE =00000000                M vcam2	=	op2<<7
000000FE =00000000                M vcam3	=	op3<<7
000000FE =00000000                M vcam4	=	op4<<7
000000FE                            	smpsVcDecayRate1    $12, $0E, $11, $0F
000000FE =00000012                M vcd1r1	=	op1
000000FE =0000000E                M vcd1r2	=	op2
000000FE =00000011                M vcd1r3	=	op3
000000FE =0000000F                M vcd1r4	=	op4
000000FE                            	smpsVcDecayRate2    $08, $08, $05, $0E
000000FE =00000008                M vcd2r1	=	op1
000000FE =00000008                M vcd2r2	=	op2
000000FE =00000005                M vcd2r3	=	op3
000000FE =0000000E                M vcd2r4	=	op4
000000FE                            	smpsVcDecayLevel    $00, $06, $00, $05
000000FE =00000000                M vcdl1	=	op1
000000FE =00000006                M vcdl2	=	op2
000000FE =00000000                M vcdl3	=	op3
000000FE =00000005                M vcdl4	=	op4
000000FE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000FE =0000000F                M vcrr1	=	op1
000000FE =0000000F                M vcrr2	=	op2
000000FE =0000000F                M vcrr3	=	op3
000000FE =0000000F                M vcrr4	=	op4
000000FE                            	smpsVcTotalLevel    $80, $2F, $2D, $25
000000FE =00000080                M vctl1	=	op1
000000FE =0000002F                M vctl2	=	op2
000000FE =0000002D                M vctl3	=	op3
000000FE =00000025                M vctl4	=	op4
000000FE 35                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000FF =00000000                M vctlmask4	=	0
000000FF =00000000                M vctlmask3	=	0
000000FF =00000000                M vctlmask2	=	0
000000FF =00000000                M vctlmask1	=	0
000000FF 3F58 3151                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000103 1F1F 9E9E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000107 0F0E 1112                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000010B 0E08 0508                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000010F 5F6F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000113 252F 2D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000117                            
00000117                            ;	Voice $01
00000117                            ;	$3D
00000117                            ;	$01, $08, $01, $01, 	$90, $8D, $8F, $53, 	$0E, $0E, $0E, $05
00000117                            ;	$02, $03, $02, $04, 	$1F, $FF, $1F, $0F, 	$16, $28, $27, $80
00000117                            	smpsVcAlgorithm     $05
00000117 =00000005                M vcalgorithm	=	val
00000117                            	smpsVcFeedback      $07
00000117 =00000007                M vcfeedback	=	val
00000117                            	smpsVcUnusedBits    $00
00000117 =00000000                M vcunusedbits	=	val
00000117 =00000000                M vcd1r1unk	=	0
00000117 =00000000                M vcd1r2unk	=	0
00000117 =00000000                M vcd1r3unk	=	0
00000117 =00000000                M vcd1r4unk	=	0
00000117                            	smpsVcDetune        $00, $00, $00, $00
00000117 =00000000                M vcdt1	=	op1
00000117 =00000000                M vcdt2	=	op2
00000117 =00000000                M vcdt3	=	op3
00000117 =00000000                M vcdt4	=	op4
00000117                            	smpsVcCoarseFreq    $01, $01, $08, $01
00000117 =00000001                M vccf1	=	op1
00000117 =00000001                M vccf2	=	op2
00000117 =00000008                M vccf3	=	op3
00000117 =00000001                M vccf4	=	op4
00000117                            	smpsVcRateScale     $01, $02, $02, $02
00000117 =00000001                M vcrs1	=	op1
00000117 =00000002                M vcrs2	=	op2
00000117 =00000002                M vcrs3	=	op3
00000117 =00000002                M vcrs4	=	op4
00000117                            	smpsVcAttackRate    $13, $0F, $0D, $10
00000117 =00000013                M vcar1	=	op1
00000117 =0000000F                M vcar2	=	op2
00000117 =0000000D                M vcar3	=	op3
00000117 =00000010                M vcar4	=	op4
00000117                            	smpsVcAmpMod        $00, $00, $00, $00
00000117 =00000000                M vcam1	=	op1<<7
00000117 =00000000                M vcam2	=	op2<<7
00000117 =00000000                M vcam3	=	op3<<7
00000117 =00000000                M vcam4	=	op4<<7
00000117                            	smpsVcDecayRate1    $05, $0E, $0E, $0E
00000117 =00000005                M vcd1r1	=	op1
00000117 =0000000E                M vcd1r2	=	op2
00000117 =0000000E                M vcd1r3	=	op3
00000117 =0000000E                M vcd1r4	=	op4
00000117                            	smpsVcDecayRate2    $04, $02, $03, $02
00000117 =00000004                M vcd2r1	=	op1
00000117 =00000002                M vcd2r2	=	op2
00000117 =00000003                M vcd2r3	=	op3
00000117 =00000002                M vcd2r4	=	op4
00000117                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000117 =00000000                M vcdl1	=	op1
00000117 =00000001                M vcdl2	=	op2
00000117 =0000000F                M vcdl3	=	op3
00000117 =00000001                M vcdl4	=	op4
00000117                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000117 =0000000F                M vcrr1	=	op1
00000117 =0000000F                M vcrr2	=	op2
00000117 =0000000F                M vcrr3	=	op3
00000117 =0000000F                M vcrr4	=	op4
00000117                            	smpsVcTotalLevel    $80, $27, $28, $16
00000117 =00000080                M vctl1	=	op1
00000117 =00000027                M vctl2	=	op2
00000117 =00000028                M vctl3	=	op3
00000117 =00000016                M vctl4	=	op4
00000117 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000118 =00000000                M vctlmask4	=	0
00000118 =00000000                M vctlmask3	=	0
00000118 =00000000                M vctlmask2	=	0
00000118 =00000000                M vctlmask1	=	0
00000118 0101 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000011C 908F 8D53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000120 0E0E 0E05                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000124 0202 0304                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000128 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000012C 1627 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000130                            
00000130                            ;	Voice $02
00000130                            ;	$3A
00000130                            ;	$61, $3C, $13, $32, 	$98, $D8, $9D, $DA, 	$05, $09, $05, $06
00000130                            ;	$03, $01, $04, $04, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
00000130                            	smpsVcAlgorithm     $02
00000130 =00000002                M vcalgorithm	=	val
00000130                            	smpsVcFeedback      $07
00000130 =00000007                M vcfeedback	=	val
00000130                            	smpsVcUnusedBits    $00
00000130 =00000000                M vcunusedbits	=	val
00000130 =00000000                M vcd1r1unk	=	0
00000130 =00000000                M vcd1r2unk	=	0
00000130 =00000000                M vcd1r3unk	=	0
00000130 =00000000                M vcd1r4unk	=	0
00000130                            	smpsVcDetune        $03, $01, $03, $06
00000130 =00000003                M vcdt1	=	op1
00000130 =00000001                M vcdt2	=	op2
00000130 =00000003                M vcdt3	=	op3
00000130 =00000006                M vcdt4	=	op4
00000130                            	smpsVcCoarseFreq    $02, $03, $0C, $01
00000130 =00000002                M vccf1	=	op1
00000130 =00000003                M vccf2	=	op2
00000130 =0000000C                M vccf3	=	op3
00000130 =00000001                M vccf4	=	op4
00000130                            	smpsVcRateScale     $03, $02, $03, $02
00000130 =00000003                M vcrs1	=	op1
00000130 =00000002                M vcrs2	=	op2
00000130 =00000003                M vcrs3	=	op3
00000130 =00000002                M vcrs4	=	op4
00000130                            	smpsVcAttackRate    $1A, $1D, $18, $18
00000130 =0000001A                M vcar1	=	op1
00000130 =0000001D                M vcar2	=	op2
00000130 =00000018                M vcar3	=	op3
00000130 =00000018                M vcar4	=	op4
00000130                            	smpsVcAmpMod        $00, $00, $00, $00
00000130 =00000000                M vcam1	=	op1<<7
00000130 =00000000                M vcam2	=	op2<<7
00000130 =00000000                M vcam3	=	op3<<7
00000130 =00000000                M vcam4	=	op4<<7
00000130                            	smpsVcDecayRate1    $06, $05, $09, $05
00000130 =00000006                M vcd1r1	=	op1
00000130 =00000005                M vcd1r2	=	op2
00000130 =00000009                M vcd1r3	=	op3
00000130 =00000005                M vcd1r4	=	op4
00000130                            	smpsVcDecayRate2    $04, $04, $01, $03
00000130 =00000004                M vcd2r1	=	op1
00000130 =00000004                M vcd2r2	=	op2
00000130 =00000001                M vcd2r3	=	op3
00000130 =00000003                M vcd2r4	=	op4
00000130                            	smpsVcDecayLevel    $0A, $00, $00, $01
00000130 =0000000A                M vcdl1	=	op1
00000130 =00000000                M vcdl2	=	op2
00000130 =00000000                M vcdl3	=	op3
00000130 =00000001                M vcdl4	=	op4
00000130                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000130 =0000000F                M vcrr1	=	op1
00000130 =0000000F                M vcrr2	=	op2
00000130 =0000000F                M vcrr3	=	op3
00000130 =0000000F                M vcrr4	=	op4
00000130                            	smpsVcTotalLevel    $80, $31, $47, $21
00000130 =00000080                M vctl1	=	op1
00000130 =00000031                M vctl2	=	op2
00000130 =00000047                M vctl3	=	op3
00000130 =00000021                M vctl4	=	op4
00000130 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000131 =00000000                M vctlmask4	=	0
00000131 =00000000                M vctlmask3	=	0
00000131 =00000000                M vctlmask2	=	0
00000131 =00000000                M vctlmask1	=	0
00000131 6113 3C32                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000135 989D D8DA                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000139 0505 0906                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000013D 0304 0104                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000141 1F0F 0FAF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000145 2131 4780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000149                            
00000149                            ;	Voice $03
00000149                            ;	$3C
00000149                            ;	$01, $01, $00, $01, 	$CF, $0E, $CF, $0E, 	$00, $02, $00, $02
00000149                            ;	$00, $00, $00, $00, 	$02, $37, $02, $38, 	$1E, $80, $1F, $80
00000149                            	smpsVcAlgorithm     $04
00000149 =00000004                M vcalgorithm	=	val
00000149                            	smpsVcFeedback      $07
00000149 =00000007                M vcfeedback	=	val
00000149                            	smpsVcUnusedBits    $00
00000149 =00000000                M vcunusedbits	=	val
00000149 =00000000                M vcd1r1unk	=	0
00000149 =00000000                M vcd1r2unk	=	0
00000149 =00000000                M vcd1r3unk	=	0
00000149 =00000000                M vcd1r4unk	=	0
00000149                            	smpsVcDetune        $00, $00, $00, $00
00000149 =00000000                M vcdt1	=	op1
00000149 =00000000                M vcdt2	=	op2
00000149 =00000000                M vcdt3	=	op3
00000149 =00000000                M vcdt4	=	op4
00000149                            	smpsVcCoarseFreq    $01, $00, $01, $01
00000149 =00000001                M vccf1	=	op1
00000149 =00000000                M vccf2	=	op2
00000149 =00000001                M vccf3	=	op3
00000149 =00000001                M vccf4	=	op4
00000149                            	smpsVcRateScale     $00, $03, $00, $03
00000149 =00000000                M vcrs1	=	op1
00000149 =00000003                M vcrs2	=	op2
00000149 =00000000                M vcrs3	=	op3
00000149 =00000003                M vcrs4	=	op4
00000149                            	smpsVcAttackRate    $0E, $0F, $0E, $0F
00000149 =0000000E                M vcar1	=	op1
00000149 =0000000F                M vcar2	=	op2
00000149 =0000000E                M vcar3	=	op3
00000149 =0000000F                M vcar4	=	op4
00000149                            	smpsVcAmpMod        $00, $00, $00, $00
00000149 =00000000                M vcam1	=	op1<<7
00000149 =00000000                M vcam2	=	op2<<7
00000149 =00000000                M vcam3	=	op3<<7
00000149 =00000000                M vcam4	=	op4<<7
00000149                            	smpsVcDecayRate1    $02, $00, $02, $00
00000149 =00000002                M vcd1r1	=	op1
00000149 =00000000                M vcd1r2	=	op2
00000149 =00000002                M vcd1r3	=	op3
00000149 =00000000                M vcd1r4	=	op4
00000149                            	smpsVcDecayRate2    $00, $00, $00, $00
00000149 =00000000                M vcd2r1	=	op1
00000149 =00000000                M vcd2r2	=	op2
00000149 =00000000                M vcd2r3	=	op3
00000149 =00000000                M vcd2r4	=	op4
00000149                            	smpsVcDecayLevel    $03, $00, $03, $00
00000149 =00000003                M vcdl1	=	op1
00000149 =00000000                M vcdl2	=	op2
00000149 =00000003                M vcdl3	=	op3
00000149 =00000000                M vcdl4	=	op4
00000149                            	smpsVcReleaseRate   $08, $02, $07, $02
00000149 =00000008                M vcrr1	=	op1
00000149 =00000002                M vcrr2	=	op2
00000149 =00000007                M vcrr3	=	op3
00000149 =00000002                M vcrr4	=	op4
00000149                            	smpsVcTotalLevel    $80, $1F, $80, $1E
00000149 =00000080                M vctl1	=	op1
00000149 =0000001F                M vctl2	=	op2
00000149 =00000080                M vctl3	=	op3
00000149 =0000001E                M vctl4	=	op4
00000149 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000014A =00000000                M vctlmask4	=	0
0000014A =00000000                M vctlmask3	=	0
0000014A =00000000                M vctlmask2	=	0
0000014A =00000000                M vctlmask1	=	0
0000014A 0100 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000014E CFCF 0E0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000152 0000 0202                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000156 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000015A 0202 3738                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000015E 1E1F 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000162                            
00000162                            ;	Voice $04
00000162                            ;	$3A
00000162                            ;	$14, $03, $05, $14, 	$8C, $58, $4E, $4E, 	$0A, $0D, $06, $06
00000162                            ;	$00, $00, $00, $01, 	$1F, $FF, $0F, $5F, 	$1F, $2E, $3B, $80
00000162                            	smpsVcAlgorithm     $02
00000162 =00000002                M vcalgorithm	=	val
00000162                            	smpsVcFeedback      $07
00000162 =00000007                M vcfeedback	=	val
00000162                            	smpsVcUnusedBits    $00
00000162 =00000000                M vcunusedbits	=	val
00000162 =00000000                M vcd1r1unk	=	0
00000162 =00000000                M vcd1r2unk	=	0
00000162 =00000000                M vcd1r3unk	=	0
00000162 =00000000                M vcd1r4unk	=	0
00000162                            	smpsVcDetune        $01, $00, $00, $01
00000162 =00000001                M vcdt1	=	op1
00000162 =00000000                M vcdt2	=	op2
00000162 =00000000                M vcdt3	=	op3
00000162 =00000001                M vcdt4	=	op4
00000162                            	smpsVcCoarseFreq    $04, $05, $03, $04
00000162 =00000004                M vccf1	=	op1
00000162 =00000005                M vccf2	=	op2
00000162 =00000003                M vccf3	=	op3
00000162 =00000004                M vccf4	=	op4
00000162                            	smpsVcRateScale     $01, $01, $01, $02
00000162 =00000001                M vcrs1	=	op1
00000162 =00000001                M vcrs2	=	op2
00000162 =00000001                M vcrs3	=	op3
00000162 =00000002                M vcrs4	=	op4
00000162                            	smpsVcAttackRate    $0E, $0E, $18, $0C
00000162 =0000000E                M vcar1	=	op1
00000162 =0000000E                M vcar2	=	op2
00000162 =00000018                M vcar3	=	op3
00000162 =0000000C                M vcar4	=	op4
00000162                            	smpsVcAmpMod        $00, $00, $00, $00
00000162 =00000000                M vcam1	=	op1<<7
00000162 =00000000                M vcam2	=	op2<<7
00000162 =00000000                M vcam3	=	op3<<7
00000162 =00000000                M vcam4	=	op4<<7
00000162                            	smpsVcDecayRate1    $06, $06, $0D, $0A
00000162 =00000006                M vcd1r1	=	op1
00000162 =00000006                M vcd1r2	=	op2
00000162 =0000000D                M vcd1r3	=	op3
00000162 =0000000A                M vcd1r4	=	op4
00000162                            	smpsVcDecayRate2    $01, $00, $00, $00
00000162 =00000001                M vcd2r1	=	op1
00000162 =00000000                M vcd2r2	=	op2
00000162 =00000000                M vcd2r3	=	op3
00000162 =00000000                M vcd2r4	=	op4
00000162                            	smpsVcDecayLevel    $05, $00, $0F, $01
00000162 =00000005                M vcdl1	=	op1
00000162 =00000000                M vcdl2	=	op2
00000162 =0000000F                M vcdl3	=	op3
00000162 =00000001                M vcdl4	=	op4
00000162                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000162 =0000000F                M vcrr1	=	op1
00000162 =0000000F                M vcrr2	=	op2
00000162 =0000000F                M vcrr3	=	op3
00000162 =0000000F                M vcrr4	=	op4
00000162                            	smpsVcTotalLevel    $80, $3B, $2E, $1F
00000162 =00000080                M vctl1	=	op1
00000162 =0000003B                M vctl2	=	op2
00000162 =0000002E                M vctl3	=	op3
00000162 =0000001F                M vctl4	=	op4
00000162 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000163 =00000000                M vctlmask4	=	0
00000163 =00000000                M vctlmask3	=	0
00000163 =00000000                M vctlmask2	=	0
00000163 =00000000                M vctlmask1	=	0
00000163 1405 0314                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000167 8C4E 584E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000016B 0A06 0D06                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000016F 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000173 1F0F FF5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000177 1F3B 2E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000017B                            
0000017B                          M 	pops
00000000                            		inc_music	Ending
00000000                          M 	pushs
00000000                          M music_135:	section	org($1380),file("sound/music/compressed/ending.unc"),over(header)
00000000                          M 	include	"sound/music/ending.asm"
00000000                            Ending_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000001                M sourcesmps2asm	=	sourcesmps2asmver
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     Ending_Voices
00000000 0000                     M 	dc.w	((ending_voices&$7fff)<<8)&$ff00+(ending_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $02, $97
00000004 02                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$97
00000005 97                       M 	dc.b	$97
00000006                            
00000006                            	smpsHeaderDAC       Ending_DAC
00000006                          M 	checkedchannelpointer	ending_dac
00000006 0000                     M 	dc.w	((ending_dac&$7fff)<<8)&$ff00+(ending_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Ending_FM1,	$E8, $10
0000000A                          M 	checkedchannelpointer	ending_fm1
0000000A 0000                     M 	dc.w	((ending_fm1&$7fff)<<8)&$ff00+(ending_fm1&$7fff)>>8
0000000C E810                     M 	dc.b	$e8,$10
0000000E                            	smpsHeaderFM        Ending_FM2,	$F4, $09
0000000E                          M 	checkedchannelpointer	ending_fm2
0000000E 0000                     M 	dc.w	((ending_fm2&$7fff)<<8)&$ff00+(ending_fm2&$7fff)>>8
00000010 F409                     M 	dc.b	$f4,$09
00000012                            	smpsHeaderFM        Ending_FM3,	$F4, $08
00000012                          M 	checkedchannelpointer	ending_fm3
00000012 0000                     M 	dc.w	((ending_fm3&$7fff)<<8)&$ff00+(ending_fm3&$7fff)>>8
00000014 F408                     M 	dc.b	$f4,$08
00000016                            	smpsHeaderFM        Ending_FM4,	$F4, $0B
00000016                          M 	checkedchannelpointer	ending_fm4
00000016 0000                     M 	dc.w	((ending_fm4&$7fff)<<8)&$ff00+(ending_fm4&$7fff)>>8
00000018 F40B                     M 	dc.b	$f4,$0b
0000001A                            	smpsHeaderFM        Ending_FM5,	$F4, $0B
0000001A                          M 	checkedchannelpointer	ending_fm5
0000001A 0000                     M 	dc.w	((ending_fm5&$7fff)<<8)&$ff00+(ending_fm5&$7fff)>>8
0000001C F40B                     M 	dc.b	$f4,$0b
0000001E                            	smpsHeaderPSG       Ending_PSG1,	$D0, $06, $02, fTone_0C
0000001E                          M 	checkedchannelpointer	ending_psg1
0000001E 0000                     M 	dc.w	((ending_psg1&$7fff)<<8)&$ff00+(ending_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 06                       M 	dc.b	$06
00000022 02                       M 	dc.b	$02
00000023 0C                       M 	dc.b	ftone_0c
00000024                            	smpsHeaderPSG       Ending_PSG2,	$D0, $05, $00, fTone_05
00000024                          M 	checkedchannelpointer	ending_psg2
00000024 0000                     M 	dc.w	((ending_psg2&$7fff)<<8)&$ff00+(ending_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 05                       M 	dc.b	$05
00000028 00                       M 	dc.b	$00
00000029 05                       M 	dc.b	ftone_05
0000002A                            	smpsHeaderPSG       Ending_PSG3,	$DC, $05, $02, fTone_0C
0000002A                          M 	checkedchannelpointer	ending_psg3
0000002A 0000                     M 	dc.w	((ending_psg3&$7fff)<<8)&$ff00+(ending_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$dc
0000002C DC                       M 	dc.b	$dc
0000002D 05                       M 	dc.b	$05
0000002E 02                       M 	dc.b	$02
0000002F 0C                       M 	dc.b	ftone_0c
00000030                            
00000030                            ; FM1 Data
00000030                            Ending_FM1:
00000030                            	smpsSetvoice        $03
00000030                          M 	smpsfmvoice	$03
00000030 EF03                     M 	dc.b	$ef,$03
00000032                            	smpsModSet          $02, $01, $04, $02
00000032 F0                       M 	dc.b	$f0
00000033 0201 0402                M 	dc.b	$02,$01,$04,$02
00000037                            	smpsCall            Ending_Call04
00000037 F8                       M 	dc.b	$f8
00000038 0000                     M 	dc.w	((ending_call04&$7fff)<<8)&$ff00+(ending_call04&$7fff)>>8
0000003A                            	smpsAlterVol        $FC
0000003A E6FC                     M 	dc.b	$e6,$fc
0000003C                            	smpsCall            Ending_Call05
0000003C F8                       M 	dc.b	$f8
0000003D 0000                     M 	dc.w	((ending_call05&$7fff)<<8)&$ff00+(ending_call05&$7fff)>>8
0000003F                            	smpsAlterVol        $04
0000003F E604                     M 	dc.b	$e6,$04
00000041                            	smpsCall            Ending_Call06
00000041 F8                       M 	dc.b	$f8
00000042 0000                     M 	dc.w	((ending_call06&$7fff)<<8)&$ff00+(ending_call06&$7fff)>>8
00000044                            	smpsAlterVol        $10
00000044 E610                     M 	dc.b	$e6,$10
00000046 C403                       	dc.b	nG5, $03
00000048                            	smpsAlterVol        $FF
00000048 E6FF                     M 	dc.b	$e6,$ff
0000004A C6                         	dc.b	nA5
0000004B                            	smpsAlterVol        $FF
0000004B E6FF                     M 	dc.b	$e6,$ff
0000004D C8                         	dc.b	nB5
0000004E                            	smpsAlterVol        $FF
0000004E E6FF                     M 	dc.b	$e6,$ff
00000050 C9                         	dc.b	nC6
00000051                            	smpsAlterVol        $FF
00000051 E6FF                     M 	dc.b	$e6,$ff
00000053 C8                         	dc.b	nB5
00000054                            	smpsAlterVol        $FE
00000054 E6FE                     M 	dc.b	$e6,$fe
00000056 C9                         	dc.b	nC6
00000057                            	smpsAlterVol        $FE
00000057 E6FE                     M 	dc.b	$e6,$fe
00000059 CB                         	dc.b	nD6
0000005A                            	smpsAlterVol        $FE
0000005A E6FE                     M 	dc.b	$e6,$fe
0000005C CD                         	dc.b	nE6
0000005D                            	smpsAlterVol        $FE
0000005D E6FE                     M 	dc.b	$e6,$fe
0000005F CB                         	dc.b	nD6
00000060                            	smpsAlterVol        $FE
00000060 E6FE                     M 	dc.b	$e6,$fe
00000062 CD                         	dc.b	nE6
00000063                            	smpsAlterVol        $FE
00000063 E6FE                     M 	dc.b	$e6,$fe
00000065 CE                         	dc.b	nF6
00000066                            	smpsAlterVol        $FE
00000066 E6FE                     M 	dc.b	$e6,$fe
00000068 D0                         	dc.b	nG6
00000069                            	smpsAlterVol        $FE
00000069 E6FE                     M 	dc.b	$e6,$fe
0000006B CE                         	dc.b	nF6
0000006C                            	smpsAlterVol        $FE
0000006C E6FE                     M 	dc.b	$e6,$fe
0000006E D0                         	dc.b	nG6
0000006F                            	smpsAlterVol        $FE
0000006F E6FE                     M 	dc.b	$e6,$fe
00000071 D2                         	dc.b	nA6
00000072                            	smpsAlterVol        $FE
00000072 E6FE                     M 	dc.b	$e6,$fe
00000074 D4                         	dc.b	nB6
00000075                            	smpsAlterVol        $09
00000075 E609                     M 	dc.b	$e6,$09
00000077                            	smpsCall            Ending_Call07
00000077 F8                       M 	dc.b	$f8
00000078 0000                     M 	dc.w	((ending_call07&$7fff)<<8)&$ff00+(ending_call07&$7fff)>>8
0000007A D330                       	dc.b	nBb6, $30
0000007C                            	smpsStop
0000007C F2                       M 	dc.b	$f2
0000007D                            
0000007D                            Ending_Call05:
0000007D CD12 C906 CE12 C91E 8018+  	dc.b	nE6, $12, nC6, $06, nF6, $12, nC6, $1E, nRst, $18, nE6, $12
00000089 C906 CE12 C91E             	dc.b	nC6, $06, nF6, $12, nC6, $1E
0000008F                            	smpsReturn
0000008F E3                       M 	dc.b	$e3
00000090                            
00000090                            Ending_Call04:
00000090 B11E B806 B5B3 B130 AD18+  	dc.b	nC4, $1E, nG4, $06, nE4, nD4, nC4, $30, nAb3, $18, nBb3, $0C
0000009C B3B5 30B4 18B6 0CB3 B512+  	dc.b	nD4, nE4, $30, nEb4, $18, nF4, $0C, nD4, nE4, $12, nA3, $1E
000000A8 B312 B81E BA12 B81E 800C+  	dc.b	nD4, $12, nG4, $1E, nA4, $12, nG4, $1E, nRst, $0C, nB4, nG4
000000B4 06B3 B8B9 BA18             	dc.b	$06, nD4, nG4, nAb4, nA4, $18
000000BA                            	smpsReturn
000000BA E3                       M 	dc.b	$e3
000000BB                            
000000BB                            Ending_Call06:
000000BB 8018 CE0C 06CD CECD 0CCB+  	dc.b	nRst, $18, nF6, $0C, $06, nE6, nF6, nE6, $0C, nD6, nE6, $06
000000C7 CE0C CD30                  	dc.b	nF6, $0C, nE6, $30
000000CB                            	smpsReturn
000000CB E3                       M 	dc.b	$e3
000000CC                            
000000CC                            Ending_Call07:
000000CC D018 D30C CCD1 1580 03D5+  	dc.b	nG6, $18, nBb6, $0C, nEb6, nAb6, $15, nRst, $03, nC7, $06, nBb6
000000D8 D003 D109 D018 D30C CCD1+  	dc.b	nG6, $03, nAb6, $09, nG6, $18, nBb6, $0C, nEb6, nAb6, $15, nC7
000000E4 0306 D3D0 03D1 09D5 1503+  	dc.b	$03, $06, nBb6, nG6, $03, nAb6, $09, nC7, $15, $03, nB6, $06
000000F0 0603 06D3 1BD2 0606 0309+  	dc.b	$06, $03, $06, nBb6, $1B, nA6, $06, $06, $03, $09, nC7, $06
000000FC D3D0 D118 D003 03D5 06D3+  	dc.b	nBb6, nG6, nAb6, $18, nG6, $03, $03, nC7, $06, nBb6, nG6, nAb6
00000108 12D3 0CD6 03D5 D3D1 D6D5+  	dc.b	$12, nBb6, $0C, nCs7, $03, nC7, nBb6, nAb6, nCs7, nC7, nBb6, nAb6
00000114 D6D5 D3D1 D6D5 D3D1        	dc.b	nCs7, nC7, nBb6, nAb6, nCs7, nC7, nBb6, nAb6
0000011C                            	smpsReturn
0000011C E3                       M 	dc.b	$e3
0000011D                            
0000011D                            ; FM2 Data
0000011D                            Ending_FM2:
0000011D                            	smpsSetvoice        $01
0000011D                          M 	smpsfmvoice	$01
0000011D EF01                     M 	dc.b	$ef,$01
0000011F                            	smpsModSet          $01, $01, $02, $02
0000011F F0                       M 	dc.b	$f0
00000120 0101 0202                M 	dc.b	$01,$01,$02,$02
00000124 8006 C103 C2C1 24          	dc.b	nRst, $06, nE5, $03, nF5, nE5, $24
0000012B                            	smpsCall            Ending_Call01
0000012B F8                       M 	dc.b	$f8
0000012C 0000                     M 	dc.w	((ending_call01&$7fff)<<8)&$ff00+(ending_call01&$7fff)>>8
0000012E                            	smpsAlterVol        $02
0000012E E602                     M 	dc.b	$e6,$02
00000130 8030                       	dc.b	nRst, $30
00000132                            
00000132                            Ending_Loop0F:
00000132 8018 C402 8001 BD02 8001+  	dc.b	nRst, $18, nG5, $02, nRst, $01, nC5, $02, nRst, $01, nE5, $02
0000013E 8001 BD02 8001 C402 8001+  	dc.b	nRst, $01, nC5, $02, nRst, $01, nG5, $02, nRst, $01, nC5, $02
0000014A 8001 C102 8001 BD02 8001+  	dc.b	nRst, $01, nE5, $02, nRst, $01, nC5, $02, nRst, $01, nRst, $18
00000156 C602 8001 BF02 8001 C202+  	dc.b	nA5, $02, nRst, $01, nD5, $02, nRst, $01, nF5, $02, nRst, $01
00000162 BF02 8001 C602 8001 BF02+  	dc.b	nD5, $02, nRst, $01, nA5, $02, nRst, $01, nD5, $02, nRst, $01
0000016E C202 8001 BF02 8001        	dc.b	nF5, $02, nRst, $01, nD5, $02, nRst, $01
00000176                            	smpsLoop            $00, $02, Ending_Loop0F
00000176 F7                       M 	dc.b	$f7
00000177 0002                     M 	dc.b	index,loops
00000179 0000                     M 	dc.w	((ending_loop0f&$7fff)<<8)&$ff00+(ending_loop0f&$7fff)>>8
0000017B                            	smpsAlterVol        $FE
0000017B E6FE                     M 	dc.b	$e6,$fe
0000017D                            	smpsCall            Ending_Call02
0000017D F8                       M 	dc.b	$f8
0000017E 0000                     M 	dc.w	((ending_call02&$7fff)<<8)&$ff00+(ending_call02&$7fff)>>8
00000180 8006                       	dc.b	nRst, $06
00000182                            	smpsAlterVol        $0A
00000182 E60A                     M 	dc.b	$e6,$0a
00000184                            
00000184                            Ending_Loop10:
00000184 C906                       	dc.b	nC6, $06
00000186                            	smpsAlterVol        $FE
00000186 E6FE                     M 	dc.b	$e6,$fe
00000188                            	smpsLoop            $00, $07, Ending_Loop10
00000188 F7                       M 	dc.b	$f7
00000189 0007                     M 	dc.b	index,loops
0000018B 0000                     M 	dc.w	((ending_loop10&$7fff)<<8)&$ff00+(ending_loop10&$7fff)>>8
0000018D                            	smpsAlterVol        $03
0000018D E603                     M 	dc.b	$e6,$03
0000018F                            	smpsCall            Ending_Call03
0000018F F8                       M 	dc.b	$f8
00000190 0000                     M 	dc.w	((ending_call03&$7fff)<<8)&$ff00+(ending_call03&$7fff)>>8
00000192 CC30 E730                  	dc.b	nEb6, $30, smpsNoAttack, $30
00000196                            	smpsStop
00000196 F2                       M 	dc.b	$f2
00000197                            
00000197                            Ending_Call01:
00000197 8006 C902 8001 C902 8001+  	dc.b	nRst, $06, nC6, $02, nRst, $01, nC6, $02, nRst, $01, nC6, $06
000001A3 CB03 CE09 CD06 CBC9 CCCE+  	dc.b	nD6, $03, nF6, $09, nE6, $06, nD6, nC6, nEb6, nF6, $03, nC6
000001AF 2480 03                    	dc.b	$24, nRst, $03
000001B2                            	smpsLoop            $01, $02, Ending_Call01
000001B2 F7                       M 	dc.b	$f7
000001B3 0102                     M 	dc.b	index,loops
000001B5 0000                     M 	dc.w	((ending_call01&$7fff)<<8)&$ff00+(ending_call01&$7fff)>>8
000001B7 8018 CD06 C9CD 03C9 06CB+  	dc.b	nRst, $18, nE6, $06, nC6, nE6, $03, nC6, $06, nD6, $1B, nE6
000001C3 06C9 CD03 C906 CB33        	dc.b	$06, nC6, nE6, $03, nC6, $06, nD6, $33
000001CB                            	smpsReturn
000001CB E3                       M 	dc.b	$e3
000001CC                            
000001CC                            Ending_Call03:
000001CC 8006 CC03 CB09 CC03 C709+  	dc.b	nRst, $06, nEb6, $03, nD6, $09, nEb6, $03, nBb5, $09, nEb6, $03
000001D8 CB09 CC03 C915 8003 D103+  	dc.b	nD6, $09, nEb6, $03, nC6, $15, nRst, $03, nAb6, $03, $06, nG6
000001E4 CC03 CE09                  	dc.b	nEb6, $03, nF6, $09
000001E8                            	smpsLoop            $01, $02, Ending_Call03
000001E8 F7                       M 	dc.b	$f7
000001E9 0102                     M 	dc.b	index,loops
000001EB 0000                     M 	dc.w	((ending_call03&$7fff)<<8)&$ff00+(ending_call03&$7fff)>>8
000001ED D015 03CE 06D0 CC03 CE06+  	dc.b	nG6, $15, $03, nF6, $06, nG6, nEb6, $03, nF6, $06, nG6, $1B
000001F9 CE06 D0CC 0306 03D1 06D0+  	dc.b	nF6, $06, nG6, nEb6, $03, $06, $03, nAb6, $06, nG6, nEb6, nF6
00000205 18CC 0303 D106 D0CC CE12+  	dc.b	$18, nEb6, $03, $03, nAb6, $06, nG6, nEb6, nF6, $12, nEb6, $0C
00000211                            	smpsReturn
00000211 E3                       M 	dc.b	$e3
00000212                            
00000212                            Ending_Call02:
00000212 8006 CE03 D0D2 80CE 03D0+  	dc.b	nRst, $06, nF6, $03, nG6, nA6, nRst, nF6, $03, nG6, nA6, $18
0000021E 8006 D003 D2D4 80D0 03D2+  	dc.b	nRst, $06, nG6, $03, nA6, nB6, nRst, nG6, $03, nA6, nB6, $18
0000022A 8006 D203 D4D5 80D2 03D4+  	dc.b	nRst, $06, nA6, $03, nB6, nC7, nRst, nA6, $03, nB6, nC7, $18
00000236                            	smpsReturn
00000236 E3                       M 	dc.b	$e3
00000237                            
00000237                            ; FM3 Data
00000237                            Ending_FM3:
00000237                            	smpsSetvoice        $00
00000237                          M 	smpsfmvoice	$00
00000237 EF00                     M 	dc.b	$ef,$00
00000239 8024 AC0C                  	dc.b	nRst, $24, nG3, $0C
0000023D                            
0000023D                            Ending_Loop0C:
0000023D B115 AC03 B106 0C03 ACAD+  	dc.b	nC4, $15, nG3, $03, nC4, $06, $0C, $03, nG3, nAb3, $15, nEb3
00000249 03AF 060C 03B0             	dc.b	$03, nBb3, $06, $0C, $03, nB3
0000024F                            	smpsLoop            $00, $02, Ending_Loop0C
0000024F F7                       M 	dc.b	$f7
00000250 0002                     M 	dc.b	index,loops
00000252 0000                     M 	dc.w	((ending_loop0c&$7fff)<<8)&$ff00+(ending_loop0c&$7fff)>>8
00000254 AE15 A903 AE06 0603 B0B1+  	dc.b	nA3, $15, nE3, $03, nA3, $06, $06, $03, nB3, nC4, nCs4, nD4
00000260 15AE 03B3 060C 06AC 15A7+  	dc.b	$15, nA3, $03, nD4, $06, $0C, $06, nG3, $15, nD3, $03, nG3
0000026C 060C B306 AC15 A703 ACA7+  	dc.b	$06, $0C, nD4, $06, nG3, $15, nD3, $03, nG3, nD3, nG3, $0C
00000278 03AD AE15 A903 AE06 0C03+  	dc.b	$03, nAb3, nA3, $15, nE3, $03, nA3, $06, $0C, $03, nE3, nBb3
00000284 15AA 03AF 060C 03AA AE15+  	dc.b	$15, nF3, $03, nBb3, $06, $0C, $03, nF3, nA3, $15, nE3, $03
00000290 AE06 AEAE 03A9 AEA9 AF15+  	dc.b	nA3, $06, nA3, nA3, $03, nE3, nA3, nE3, nBb3, $15, nF3, $03
0000029C AF06 0C03 03AA 1503 060C+  	dc.b	nBb3, $06, $0C, $03, $03, nF3, $15, $03, $06, $0C, $03, nFs3
000002A8 AC15 A703 AC06 0C03 ADAE+  	dc.b	nG3, $15, nD3, $03, nG3, $06, $0C, $03, nAb3, nA3, $15, nE3
000002B4 03AE 060C 0303 8006        	dc.b	$03, nA3, $06, $0C, $03, $03, nRst, $06
000002BC                            	smpsAlterVol        $0A
000002BC E60A                     M 	dc.b	$e6,$0a
000002BE                            
000002BE                            Ending_Loop0D:
000002BE AC                         	dc.b	nG3
000002BF                            	smpsAlterVol        $FE
000002BF E6FE                     M 	dc.b	$e6,$fe
000002C1                            	smpsLoop            $00, $07, Ending_Loop0D
000002C1 F7                       M 	dc.b	$f7
000002C2 0007                     M 	dc.b	index,loops
000002C4 0000                     M 	dc.w	((ending_loop0d&$7fff)<<8)&$ff00+(ending_loop0d&$7fff)>>8
000002C6                            	smpsAlterVol        $03
000002C6 E603                     M 	dc.b	$e6,$03
000002C8                            
000002C8                            Ending_Loop0E:
000002C8 B415 03B3 060C 03AF AD15+  	dc.b	nEb4, $15, $03, nD4, $06, $0C, $03, nBb3, nAb3, $15, $03, nBb3
000002D4 060C B603 AF               	dc.b	$06, $0C, nF4, $03, nBb3
000002D9                            	smpsLoop            $00, $02, Ending_Loop0E
000002D9 F7                       M 	dc.b	$f7
000002DA 0002                     M 	dc.b	index,loops
000002DC 0000                     M 	dc.w	((ending_loop0e&$7fff)<<8)&$ff00+(ending_loop0e&$7fff)>>8
000002DE B115 03B0 0612 AF15 03AE+  	dc.b	nC4, $15, $03, nB3, $06, $12, nBb3, $15, $03, nA3, $06, $12
000002EA ADAF 18B6 06AD 12AF AF06+  	dc.b	nAb3, nBb3, $18, nF4, $06, nAb3, $12, nBb3, nBb3, $06, nC4, nCs4
000002F6 15AD 03B2 0612 A830        	dc.b	$15, nAb3, $03, nCs4, $06, $12, nEb3, $30
000002FE                            	smpsStop
000002FE F2                       M 	dc.b	$f2
000002FF                            
000002FF                            ; FM4 Data
000002FF                            Ending_FM4:
000002FF                            	smpsSetvoice        $02
000002FF                          M 	smpsfmvoice	$02
000002FF EF02                     M 	dc.b	$ef,$02
00000301                            	smpsPan             panRight, $00
00000301 E040                     M 	dc.b	$e0,direction+amsfms
00000303 8012 C403 C6C4 18          	dc.b	nRst, $12, nG5, $03, nA5, nG5, $18
0000030A                            
0000030A                            Ending_Loop08:
0000030A C430 C018 C20C C6          	dc.b	nG5, $30, nEb5, $18, nF5, $0C, nA5
00000311                            	smpsLoop            $00, $02, Ending_Loop08
00000311 F7                       M 	dc.b	$f7
00000312 0002                     M 	dc.b	index,loops
00000314 0000                     M 	dc.w	((ending_loop08&$7fff)<<8)&$ff00+(ending_loop08&$7fff)>>8
00000316 C112 C4C1 0CC1 12C4 C10C+  	dc.b	nE5, $12, nG5, nE5, $0C, nE5, $12, nG5, nE5, $0C, nF5, $12
00000322 C6C2 0CC9 12C6 C20C        	dc.b	nA5, nF5, $0C, nC6, $12, nA5, nF5, $0C
0000032A                            
0000032A                            Ending_Loop09:
0000032A C103 03BF 06C1 BF03 C11B+  	dc.b	nE5, $03, $03, nD5, $06, nE5, nD5, $03, nE5, $1B, nF5, $03
00000336 03C1 06C2 C103 C21B        	dc.b	$03, nE5, $06, nF5, nE5, $03, nF5, $1B
0000033E                            	smpsLoop            $00, $02, Ending_Loop09
0000033E F7                       M 	dc.b	$f7
0000033F 0002                     M 	dc.b	index,loops
00000341 0000                     M 	dc.w	((ending_loop09&$7fff)<<8)&$ff00+(ending_loop09&$7fff)>>8
00000343 BD12 BABD 0CBC 12BF BC0C+  	dc.b	nC5, $12, nA4, nC5, $0C, nB4, $12, nD5, nB4, $0C, nC5, $12
0000034F C1BD 0C80 06               	dc.b	nE5, nC5, $0C, nRst, $06
00000354                            	smpsAlterVol        $0A
00000354 E60A                     M 	dc.b	$e6,$0a
00000356                            
00000356                            Ending_Loop0A:
00000356 C2                         	dc.b	nF5
00000357                            	smpsAlterVol        $FE
00000357 E6FE                     M 	dc.b	$e6,$fe
00000359                            	smpsLoop            $00, $07, Ending_Loop0A
00000359 F7                       M 	dc.b	$f7
0000035A 0007                     M 	dc.b	index,loops
0000035C 0000                     M 	dc.w	((ending_loop0a&$7fff)<<8)&$ff00+(ending_loop0a&$7fff)>>8
0000035E                            	smpsAlterVol        $03
0000035E E603                     M 	dc.b	$e6,$03
00000360                            
00000360                            Ending_Loop0B:
00000360 C712 C403 C70F C40C C918+  	dc.b	nBb5, $12, nG5, $03, nBb5, $0F, nG5, $0C, nC6, $18, nAb5, $06
0000036C 0603 C909                  	dc.b	$06, $03, nC6, $09
00000370                            	smpsLoop            $00, $02, Ending_Loop0B
00000370 F7                       M 	dc.b	$f7
00000371 0002                     M 	dc.b	index,loops
00000373 0000                     M 	dc.w	((ending_loop0b&$7fff)<<8)&$ff00+(ending_loop0b&$7fff)>>8
00000375 C906 BD03 C0C4 06BD 03C0+  	dc.b	nC6, $06, nC5, $03, nEb5, nG5, $06, nC5, $03, nEb5, nB5, $18
00000381 C706 BD03 C0C4 06BD 03C0+  	dc.b	nBb5, $06, nC5, $03, nEb5, nG5, $06, nC5, $03, nEb5, nA5, $18
0000038D C012 C218 C403 C2C0 12C2+  	dc.b	nEb5, $12, nF5, $18, nG5, $03, nF5, nEb5, $12, nF5, nF5, $0C
00000399 BD06 C003 BD06 C003 C906+  	dc.b	nC5, $06, nEb5, $03, nC5, $06, nEb5, $03, nC6, $06, nG5, $03
000003A5 03C0 BD09 C403 C5C4 30     	dc.b	$03, nEb5, nC5, $09, nG5, $03, nAb5, nG5, $30
000003AE                            	smpsStop
000003AE F2                       M 	dc.b	$f2
000003AF                            
000003AF                            ; FM5 Data
000003AF                            Ending_FM5:
000003AF                            	smpsSetvoice        $02
000003AF                          M 	smpsfmvoice	$02
000003AF EF02                     M 	dc.b	$ef,$02
000003B1                            	smpsPan             panLeft, $00
000003B1 E080                     M 	dc.b	$e0,direction+amsfms
000003B3 8001 8012 C403 C6C4 17     	dc.b	nRst, $01, nRst, $12, nG5, $03, nA5, nG5, $17
000003BC                            
000003BC                            Ending_Loop04:
000003BC C130 BD18 BF0C C2          	dc.b	nE5, $30, nC5, $18, nD5, $0C, nF5
000003C3                            	smpsLoop            $00, $02, Ending_Loop04
000003C3 F7                       M 	dc.b	$f7
000003C4 0002                     M 	dc.b	index,loops
000003C6 0000                     M 	dc.w	((ending_loop04&$7fff)<<8)&$ff00+(ending_loop04&$7fff)>>8
000003C8 BD12 C1BD 0CBD 12C1 BD0C+  	dc.b	nC5, $12, nE5, nC5, $0C, nC5, $12, nE5, nC5, $0C, nD5, $12
000003D4 C2BF 0CC6 12C2 BF0C        	dc.b	nF5, nD5, $0C, nA5, $12, nF5, nD5, $0C
000003DC                            
000003DC                            Ending_Loop05:
000003DC BD03 03BC 06BD BC03 BD1B+  	dc.b	nC5, $03, $03, nB4, $06, nC5, nB4, $03, nC5, $1B, nD5, $03
000003E8 03BD 06BF BD03 BF1B        	dc.b	$03, nC5, $06, nD5, nC5, $03, nD5, $1B
000003F0                            	smpsLoop            $00, $02, Ending_Loop05
000003F0 F7                       M 	dc.b	$f7
000003F1 0002                     M 	dc.b	index,loops
000003F3 0000                     M 	dc.w	((ending_loop05&$7fff)<<8)&$ff00+(ending_loop05&$7fff)>>8
000003F5 BA12 B6BA 0CB8 12BC B80C+  	dc.b	nA4, $12, nF4, nA4, $0C, nG4, $12, nB4, nG4, $0C, nA4, $12
00000401 BDBA 0C80 06               	dc.b	nC5, nA4, $0C, nRst, $06
00000406                            	smpsAlterVol        $0A
00000406 E60A                     M 	dc.b	$e6,$0a
00000408                            
00000408                            Ending_Loop06:
00000408 BF06                       	dc.b	nD5, $06
0000040A                            	smpsAlterVol        $FE
0000040A E6FE                     M 	dc.b	$e6,$fe
0000040C                            	smpsLoop            $00, $07, Ending_Loop06
0000040C F7                       M 	dc.b	$f7
0000040D 0007                     M 	dc.b	index,loops
0000040F 0000                     M 	dc.w	((ending_loop06&$7fff)<<8)&$ff00+(ending_loop06&$7fff)>>8
00000411                            	smpsAlterVol        $03
00000411 E603                     M 	dc.b	$e6,$03
00000413                            
00000413                            Ending_Loop07:
00000413 C412 C003 C40F C00C C518+  	dc.b	nG5, $12, nEb5, $03, nG5, $0F, nEb5, $0C, nAb5, $18, nF5, $06
0000041F 0603 C509                  	dc.b	$06, $03, nAb5, $09
00000423                            	smpsLoop            $00, $02, Ending_Loop07
00000423 F7                       M 	dc.b	$f7
00000424 0002                     M 	dc.b	index,loops
00000426 0000                     M 	dc.w	((ending_loop07&$7fff)<<8)&$ff00+(ending_loop07&$7fff)>>8
00000428 8001 C906 BD03 C0C4 06BD+  	dc.b	nRst, $01, nC6, $06, nC5, $03, nEb5, nG5, $06, nC5, $03, nEb5
00000434 02C4 1880 01C7 06BD 03C0+  	dc.b	$02, nG5, $18, nRst, $01, nBb5, $06, nC5, $03, nEb5, nG5, $06
00000440 BD03 C002 C418 BD12 BF18+  	dc.b	nC5, $03, nEb5, $02, nG5, $18, nC5, $12, nD5, $18, nEb5, $03
0000044C BFBD 12BF BF0C B906 BD03+  	dc.b	nD5, nC5, $12, nD5, nD5, $0C, nAb4, $06, nC5, $03, nAb4, $06
00000458 BD03 C406 C003 03BD B909+  	dc.b	nC5, $03, nG5, $06, nEb5, $03, $03, nC5, nAb4, $09, nEb5, $03
00000464 C2C0 30                    	dc.b	nF5, nEb5, $30
00000467                            	smpsStop
00000467 F2                       M 	dc.b	$f2
00000468                            
00000468                            ; PSG1 Data
00000468                            Ending_PSG1:
00000468                            	smpsAlterNote       $01
00000468                          M 	smpsdetune	$01
00000468 E101                     M 	dc.b	$e1,$01
0000046A 8002                       	dc.b	nRst, $02
0000046C                            
0000046C                            ; PSG2 Data
0000046C                            Ending_PSG2:
0000046C 8001 8006 C103 C2C1 24     	dc.b	nRst, $01, nRst, $06, nE5, $03, nF5, nE5, $24
00000475                            	smpsCall            Ending_Call01
00000475 F8                       M 	dc.b	$f8
00000476 0000                     M 	dc.w	((ending_call01&$7fff)<<8)&$ff00+(ending_call01&$7fff)>>8
00000478 8030 8018                  	dc.b	nRst, $30, nRst, $18
0000047C                            	smpsPSGAlterVol     $02
0000047C EC02                     M 	dc.b	$ec,$02
0000047E                            	smpsCall            Ending_Call05
0000047E F8                       M 	dc.b	$f8
0000047F 0000                     M 	dc.w	((ending_call05&$7fff)<<8)&$ff00+(ending_call05&$7fff)>>8
00000481                            	smpsPSGAlterVol     $FE
00000481 ECFE                     M 	dc.b	$ec,$fe
00000483 8006 CE02 8001 D002 8001+  	dc.b	nRst, $06, nF6, $02, nRst, $01, nG6, $02, nRst, $01, nA6, $02
0000048F 8001 8003 CE02 8001 D002+  	dc.b	nRst, $01, nRst, $03, nF6, $02, nRst, $01, nG6, $02, nRst, $01
0000049B D214 8004 8006 D002 8001+  	dc.b	nA6, $14, nRst, $04, nRst, $06, nG6, $02, nRst, $01, nA6, $02
000004A7 8001 D402 8001 8003 D002+  	dc.b	nRst, $01, nB6, $02, nRst, $01, nRst, $03, nG6, $02, nRst, $01
000004B3 D202 8001 D414 8004 8006+  	dc.b	nA6, $02, nRst, $01, nB6, $14, nRst, $04, nRst, $06, nA6, $02
000004BF 8001 D402 8001 D502 8001+  	dc.b	nRst, $01, nB6, $02, nRst, $01, nC7, $02, nRst, $01, nRst, $03
000004CB D202 8001 D402 8001 D514+  	dc.b	nA6, $02, nRst, $01, nB6, $02, nRst, $01, nC7, $14, nRst, $04
000004D7                            	smpsCall            Ending_Call08
000004D7 F8                       M 	dc.b	$f8
000004D8 0000                     M 	dc.w	((ending_call08&$7fff)<<8)&$ff00+(ending_call08&$7fff)>>8
000004DA                            	smpsCall            Ending_Call03
000004DA F8                       M 	dc.b	$f8
000004DB 0000                     M 	dc.w	((ending_call03&$7fff)<<8)&$ff00+(ending_call03&$7fff)>>8
000004DD CC30 E718 8018             	dc.b	nEb6, $30, smpsNoAttack, $18, nRst, $18
000004E3                            	smpsStop
000004E3 F2                       M 	dc.b	$f2
000004E4                            
000004E4                            Ending_Call08:
000004E4                            	smpsPSGAlterVol     $07
000004E4 EC07                     M 	dc.b	$ec,$07
000004E6 C403 C6                    	dc.b	nG5, $03, nA5
000004E9                            	smpsPSGAlterVol     $FF
000004E9 ECFF                     M 	dc.b	$ec,$ff
000004EB C803 C9                    	dc.b	nB5, $03, nC6
000004EE                            	smpsPSGAlterVol     $FF
000004EE ECFF                     M 	dc.b	$ec,$ff
000004F0 C803 C9                    	dc.b	nB5, $03, nC6
000004F3                            	smpsPSGAlterVol     $FF
000004F3 ECFF                     M 	dc.b	$ec,$ff
000004F5 CB03 CD                    	dc.b	nD6, $03, nE6
000004F8                            	smpsPSGAlterVol     $FF
000004F8 ECFF                     M 	dc.b	$ec,$ff
000004FA CB03 CD                    	dc.b	nD6, $03, nE6
000004FD                            	smpsPSGAlterVol     $FF
000004FD ECFF                     M 	dc.b	$ec,$ff
000004FF CE03 D0                    	dc.b	nF6, $03, nG6
00000502                            	smpsPSGAlterVol     $FF
00000502 ECFF                     M 	dc.b	$ec,$ff
00000504 CE03 D0                    	dc.b	nF6, $03, nG6
00000507                            	smpsPSGAlterVol     $FF
00000507 ECFF                     M 	dc.b	$ec,$ff
00000509 D203 D4                    	dc.b	nA6, $03, nB6
0000050C                            	smpsReturn
0000050C E3                       M 	dc.b	$e3
0000050D                            
0000050D                            ; PSG3 Data
0000050D                            Ending_PSG3:
0000050D 8002                       	dc.b	nRst, $02
0000050F                            	smpsCall            Ending_Call04
0000050F F8                       M 	dc.b	$f8
00000510 0000                     M 	dc.w	((ending_call04&$7fff)<<8)&$ff00+(ending_call04&$7fff)>>8
00000512                            	smpsAlterPitch      $F4
00000512                          M 	smpschangetransposition	$f4
00000512 E9F4                     M 	dc.b	$e9,$f4
00000514                            	smpsCall            Ending_Call05
00000514 F8                       M 	dc.b	$f8
00000515 0000                     M 	dc.w	((ending_call05&$7fff)<<8)&$ff00+(ending_call05&$7fff)>>8
00000517                            	smpsCall            Ending_Call06
00000517 F8                       M 	dc.b	$f8
00000518 0000                     M 	dc.w	((ending_call06&$7fff)<<8)&$ff00+(ending_call06&$7fff)>>8
0000051A                            	smpsCall            Ending_Call08
0000051A F8                       M 	dc.b	$f8
0000051B 0000                     M 	dc.w	((ending_call08&$7fff)<<8)&$ff00+(ending_call08&$7fff)>>8
0000051D                            	smpsCall            Ending_Call07
0000051D F8                       M 	dc.b	$f8
0000051E 0000                     M 	dc.w	((ending_call07&$7fff)<<8)&$ff00+(ending_call07&$7fff)>>8
00000520 D318 8018                  	dc.b	nBb6, $18, nRst, $18
00000524                            	smpsStop
00000524 F2                       M 	dc.b	$f2
00000525                            
00000525                            ; DAC Data
00000525                            Ending_DAC:
00000525                            	smpsCall            Ending_Call00
00000525 F8                       M 	dc.b	$f8
00000526 0000                     M 	dc.w	((ending_call00&$7fff)<<8)&$ff00+(ending_call00&$7fff)>>8
00000528                            
00000528                            Ending_Loop00:
00000528 8115 8103 0606 820C        	dc.b	dKick, $15, dKick, $03, $06, $06, dSnare, $0C
00000530                            	smpsLoop            $00, $07, Ending_Loop00
00000530 F7                       M 	dc.b	$f7
00000531 0007                     M 	dc.b	index,loops
00000533 0000                     M 	dc.w	((ending_loop00&$7fff)<<8)&$ff00+(ending_loop00&$7fff)>>8
00000535                            	smpsCall            Ending_Call00
00000535 F8                       M 	dc.b	$f8
00000536 0000                     M 	dc.w	((ending_call00&$7fff)<<8)&$ff00+(ending_call00&$7fff)>>8
00000538                            
00000538                            Ending_Loop01:
00000538 810C 8209 8103 0606 820C   	dc.b	dKick, $0C, dSnare, $09, dKick, $03, $06, $06, dSnare, $0C
00000542                            	smpsLoop            $00, $07, Ending_Loop01
00000542 F7                       M 	dc.b	$f7
00000543 0007                     M 	dc.b	index,loops
00000545 0000                     M 	dc.w	((ending_loop01&$7fff)<<8)&$ff00+(ending_loop01&$7fff)>>8
00000547 8106 8282 8282 8282 8203+  	dc.b	dKick, $06, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, $03, dSnare
00000552                            
00000552                            Ending_Loop02:
00000552 810C 8209 8103 0606 820C+  	dc.b	dKick, $0C, dSnare, $09, dKick, $03, $06, $06, dSnare, $0C, dKick, $0C
0000055E 8209 8103 0606 8206 0303   	dc.b	dSnare, $09, dKick, $03, $06, $06, dSnare, $06, $03, $03
00000568                            	smpsLoop            $00, $03, Ending_Loop02
00000568 F7                       M 	dc.b	$f7
00000569 0003                     M 	dc.b	index,loops
0000056B 0000                     M 	dc.w	((ending_loop02&$7fff)<<8)&$ff00+(ending_loop02&$7fff)>>8
0000056D                            
0000056D                            Ending_Loop03:
0000056D 810C 8206 810C 8206 0603+  	dc.b	dKick, $0C, dSnare, $06, dKick, $0C, dSnare, $06, $06, $03, $03
00000578                            	smpsLoop            $00, $02, Ending_Loop03
00000578 F7                       M 	dc.b	$f7
00000579 0002                     M 	dc.b	index,loops
0000057B 0000                     M 	dc.w	((ending_loop03&$7fff)<<8)&$ff00+(ending_loop03&$7fff)>>8
0000057D 810C 8209 8103 0606 820C+  	dc.b	dKick, $0C, dSnare, $09, dKick, $03, $06, $06, dSnare, $0C, dKick, $30
00000589                            	smpsStop
00000589 F2                       M 	dc.b	$f2
0000058A                            
0000058A                            Ending_Call00:
0000058A 8115 8103 0606 8282 0303   	dc.b	dKick, $15, dKick, $03, $06, $06, dSnare, dSnare, $03, $03
00000594                            	smpsReturn
00000594 E3                       M 	dc.b	$e3
00000595                            
00000595                            Ending_Voices:
00000595                            ;	Voice $00
00000595                            ;	$08
00000595                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00000595                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $80
00000595                            	smpsVcAlgorithm     $00
00000595 =00000000                M vcalgorithm	=	val
00000595                            	smpsVcFeedback      $01
00000595 =00000001                M vcfeedback	=	val
00000595                            	smpsVcUnusedBits    $00
00000595 =00000000                M vcunusedbits	=	val
00000595 =00000000                M vcd1r1unk	=	0
00000595 =00000000                M vcd1r2unk	=	0
00000595 =00000000                M vcd1r3unk	=	0
00000595 =00000000                M vcd1r4unk	=	0
00000595                            	smpsVcDetune        $00, $03, $07, $00
00000595 =00000000                M vcdt1	=	op1
00000595 =00000003                M vcdt2	=	op2
00000595 =00000007                M vcdt3	=	op3
00000595 =00000000                M vcdt4	=	op4
00000595                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000595 =00000000                M vccf1	=	op1
00000595 =00000000                M vccf2	=	op2
00000595 =00000000                M vccf3	=	op3
00000595 =00000009                M vccf4	=	op4
00000595                            	smpsVcRateScale     $01, $01, $00, $00
00000595 =00000001                M vcrs1	=	op1
00000595 =00000001                M vcrs2	=	op2
00000595 =00000000                M vcrs3	=	op3
00000595 =00000000                M vcrs4	=	op4
00000595                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000595 =0000001F                M vcar1	=	op1
00000595 =0000001F                M vcar2	=	op2
00000595 =0000001F                M vcar3	=	op3
00000595 =0000001F                M vcar4	=	op4
00000595                            	smpsVcAmpMod        $00, $00, $00, $00
00000595 =00000000                M vcam1	=	op1<<7
00000595 =00000000                M vcam2	=	op2<<7
00000595 =00000000                M vcam3	=	op3<<7
00000595 =00000000                M vcam4	=	op4<<7
00000595                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00000595 =0000000A                M vcd1r1	=	op1
00000595 =0000000A                M vcd1r2	=	op2
00000595 =0000000E                M vcd1r3	=	op3
00000595 =00000012                M vcd1r4	=	op4
00000595                            	smpsVcDecayRate2    $03, $04, $04, $00
00000595 =00000003                M vcd2r1	=	op1
00000595 =00000004                M vcd2r2	=	op2
00000595 =00000004                M vcd2r3	=	op3
00000595 =00000000                M vcd2r4	=	op4
00000595                            	smpsVcDecayLevel    $02, $02, $02, $02
00000595 =00000002                M vcdl1	=	op1
00000595 =00000002                M vcdl2	=	op2
00000595 =00000002                M vcdl3	=	op3
00000595 =00000002                M vcdl4	=	op4
00000595                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000595 =0000000F                M vcrr1	=	op1
00000595 =0000000F                M vcrr2	=	op2
00000595 =0000000F                M vcrr3	=	op3
00000595 =0000000F                M vcrr4	=	op4
00000595                            	smpsVcTotalLevel    $80, $13, $30, $25
00000595 =00000080                M vctl1	=	op1
00000595 =00000013                M vctl2	=	op2
00000595 =00000030                M vctl3	=	op3
00000595 =00000025                M vctl4	=	op4
00000595 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000596 =00000000                M vctlmask4	=	0
00000596 =00000000                M vctlmask3	=	0
00000596 =00000000                M vctlmask2	=	0
00000596 =00000000                M vctlmask1	=	0
00000596 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000059A 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000059E 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005A2 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005A6 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005AA 2513 3080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005AE                            
000005AE                            ;	Voice $01
000005AE                            ;	$3D
000005AE                            ;	$01, $08, $01, $01, 	$90, $8D, $8F, $53, 	$0E, $0E, $0E, $05
000005AE                            ;	$02, $03, $02, $04, 	$1F, $FF, $1F, $0F, 	$16, $28, $27, $80
000005AE                            	smpsVcAlgorithm     $05
000005AE =00000005                M vcalgorithm	=	val
000005AE                            	smpsVcFeedback      $07
000005AE =00000007                M vcfeedback	=	val
000005AE                            	smpsVcUnusedBits    $00
000005AE =00000000                M vcunusedbits	=	val
000005AE =00000000                M vcd1r1unk	=	0
000005AE =00000000                M vcd1r2unk	=	0
000005AE =00000000                M vcd1r3unk	=	0
000005AE =00000000                M vcd1r4unk	=	0
000005AE                            	smpsVcDetune        $00, $00, $00, $00
000005AE =00000000                M vcdt1	=	op1
000005AE =00000000                M vcdt2	=	op2
000005AE =00000000                M vcdt3	=	op3
000005AE =00000000                M vcdt4	=	op4
000005AE                            	smpsVcCoarseFreq    $01, $01, $08, $01
000005AE =00000001                M vccf1	=	op1
000005AE =00000001                M vccf2	=	op2
000005AE =00000008                M vccf3	=	op3
000005AE =00000001                M vccf4	=	op4
000005AE                            	smpsVcRateScale     $01, $02, $02, $02
000005AE =00000001                M vcrs1	=	op1
000005AE =00000002                M vcrs2	=	op2
000005AE =00000002                M vcrs3	=	op3
000005AE =00000002                M vcrs4	=	op4
000005AE                            	smpsVcAttackRate    $13, $0F, $0D, $10
000005AE =00000013                M vcar1	=	op1
000005AE =0000000F                M vcar2	=	op2
000005AE =0000000D                M vcar3	=	op3
000005AE =00000010                M vcar4	=	op4
000005AE                            	smpsVcAmpMod        $00, $00, $00, $00
000005AE =00000000                M vcam1	=	op1<<7
000005AE =00000000                M vcam2	=	op2<<7
000005AE =00000000                M vcam3	=	op3<<7
000005AE =00000000                M vcam4	=	op4<<7
000005AE                            	smpsVcDecayRate1    $05, $0E, $0E, $0E
000005AE =00000005                M vcd1r1	=	op1
000005AE =0000000E                M vcd1r2	=	op2
000005AE =0000000E                M vcd1r3	=	op3
000005AE =0000000E                M vcd1r4	=	op4
000005AE                            	smpsVcDecayRate2    $04, $02, $03, $02
000005AE =00000004                M vcd2r1	=	op1
000005AE =00000002                M vcd2r2	=	op2
000005AE =00000003                M vcd2r3	=	op3
000005AE =00000002                M vcd2r4	=	op4
000005AE                            	smpsVcDecayLevel    $00, $01, $0F, $01
000005AE =00000000                M vcdl1	=	op1
000005AE =00000001                M vcdl2	=	op2
000005AE =0000000F                M vcdl3	=	op3
000005AE =00000001                M vcdl4	=	op4
000005AE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005AE =0000000F                M vcrr1	=	op1
000005AE =0000000F                M vcrr2	=	op2
000005AE =0000000F                M vcrr3	=	op3
000005AE =0000000F                M vcrr4	=	op4
000005AE                            	smpsVcTotalLevel    $80, $27, $28, $16
000005AE =00000080                M vctl1	=	op1
000005AE =00000027                M vctl2	=	op2
000005AE =00000028                M vctl3	=	op3
000005AE =00000016                M vctl4	=	op4
000005AE 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005AF =00000000                M vctlmask4	=	0
000005AF =00000000                M vctlmask3	=	0
000005AF =00000000                M vctlmask2	=	0
000005AF =00000000                M vctlmask1	=	0
000005AF 0101 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005B3 908F 8D53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005B7 0E0E 0E05                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005BB 0202 0304                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005BF 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005C3 1627 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005C7                            
000005C7                            ;	Voice $02
000005C7                            ;	$3A
000005C7                            ;	$11, $1A, $00, $11, 	$89, $59, $4F, $4F, 	$0A, $0D, $06, $09
000005C7                            ;	$00, $00, $00, $01, 	$1F, $FF, $0F, $5F, 	$20, $2E, $3B, $80
000005C7                            	smpsVcAlgorithm     $02
000005C7 =00000002                M vcalgorithm	=	val
000005C7                            	smpsVcFeedback      $07
000005C7 =00000007                M vcfeedback	=	val
000005C7                            	smpsVcUnusedBits    $00
000005C7 =00000000                M vcunusedbits	=	val
000005C7 =00000000                M vcd1r1unk	=	0
000005C7 =00000000                M vcd1r2unk	=	0
000005C7 =00000000                M vcd1r3unk	=	0
000005C7 =00000000                M vcd1r4unk	=	0
000005C7                            	smpsVcDetune        $01, $00, $01, $01
000005C7 =00000001                M vcdt1	=	op1
000005C7 =00000000                M vcdt2	=	op2
000005C7 =00000001                M vcdt3	=	op3
000005C7 =00000001                M vcdt4	=	op4
000005C7                            	smpsVcCoarseFreq    $01, $00, $0A, $01
000005C7 =00000001                M vccf1	=	op1
000005C7 =00000000                M vccf2	=	op2
000005C7 =0000000A                M vccf3	=	op3
000005C7 =00000001                M vccf4	=	op4
000005C7                            	smpsVcRateScale     $01, $01, $01, $02
000005C7 =00000001                M vcrs1	=	op1
000005C7 =00000001                M vcrs2	=	op2
000005C7 =00000001                M vcrs3	=	op3
000005C7 =00000002                M vcrs4	=	op4
000005C7                            	smpsVcAttackRate    $0F, $0F, $19, $09
000005C7 =0000000F                M vcar1	=	op1
000005C7 =0000000F                M vcar2	=	op2
000005C7 =00000019                M vcar3	=	op3
000005C7 =00000009                M vcar4	=	op4
000005C7                            	smpsVcAmpMod        $00, $00, $00, $00
000005C7 =00000000                M vcam1	=	op1<<7
000005C7 =00000000                M vcam2	=	op2<<7
000005C7 =00000000                M vcam3	=	op3<<7
000005C7 =00000000                M vcam4	=	op4<<7
000005C7                            	smpsVcDecayRate1    $09, $06, $0D, $0A
000005C7 =00000009                M vcd1r1	=	op1
000005C7 =00000006                M vcd1r2	=	op2
000005C7 =0000000D                M vcd1r3	=	op3
000005C7 =0000000A                M vcd1r4	=	op4
000005C7                            	smpsVcDecayRate2    $01, $00, $00, $00
000005C7 =00000001                M vcd2r1	=	op1
000005C7 =00000000                M vcd2r2	=	op2
000005C7 =00000000                M vcd2r3	=	op3
000005C7 =00000000                M vcd2r4	=	op4
000005C7                            	smpsVcDecayLevel    $05, $00, $0F, $01
000005C7 =00000005                M vcdl1	=	op1
000005C7 =00000000                M vcdl2	=	op2
000005C7 =0000000F                M vcdl3	=	op3
000005C7 =00000001                M vcdl4	=	op4
000005C7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005C7 =0000000F                M vcrr1	=	op1
000005C7 =0000000F                M vcrr2	=	op2
000005C7 =0000000F                M vcrr3	=	op3
000005C7 =0000000F                M vcrr4	=	op4
000005C7                            	smpsVcTotalLevel    $80, $3B, $2E, $20
000005C7 =00000080                M vctl1	=	op1
000005C7 =0000003B                M vctl2	=	op2
000005C7 =0000002E                M vctl3	=	op3
000005C7 =00000020                M vctl4	=	op4
000005C7 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005C8 =00000000                M vctlmask4	=	0
000005C8 =00000000                M vctlmask3	=	0
000005C8 =00000000                M vctlmask2	=	0
000005C8 =00000000                M vctlmask1	=	0
000005C8 1100 1A11                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005CC 894F 594F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005D0 0A06 0D09                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005D4 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005D8 1F0F FF5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005DC 203B 2E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005E0                            
000005E0                            ;	Voice $03
000005E0                            ;	$23
000005E0                            ;	$6E, $34, $26, $74, 	$0E, $0E, $0E, $0D, 	$08, $07, $05, $05
000005E0                            ;	$02, $02, $03, $12, 	$1F, $2F, $2F, $2F, 	$29, $9F, $24, $82
000005E0                            	smpsVcAlgorithm     $03
000005E0 =00000003                M vcalgorithm	=	val
000005E0                            	smpsVcFeedback      $04
000005E0 =00000004                M vcfeedback	=	val
000005E0                            	smpsVcUnusedBits    $00
000005E0 =00000000                M vcunusedbits	=	val
000005E0 =00000000                M vcd1r1unk	=	0
000005E0 =00000000                M vcd1r2unk	=	0
000005E0 =00000000                M vcd1r3unk	=	0
000005E0 =00000000                M vcd1r4unk	=	0
000005E0                            	smpsVcDetune        $07, $02, $03, $06
000005E0 =00000007                M vcdt1	=	op1
000005E0 =00000002                M vcdt2	=	op2
000005E0 =00000003                M vcdt3	=	op3
000005E0 =00000006                M vcdt4	=	op4
000005E0                            	smpsVcCoarseFreq    $04, $06, $04, $0E
000005E0 =00000004                M vccf1	=	op1
000005E0 =00000006                M vccf2	=	op2
000005E0 =00000004                M vccf3	=	op3
000005E0 =0000000E                M vccf4	=	op4
000005E0                            	smpsVcRateScale     $00, $00, $00, $00
000005E0 =00000000                M vcrs1	=	op1
000005E0 =00000000                M vcrs2	=	op2
000005E0 =00000000                M vcrs3	=	op3
000005E0 =00000000                M vcrs4	=	op4
000005E0                            	smpsVcAttackRate    $0D, $0E, $0E, $0E
000005E0 =0000000D                M vcar1	=	op1
000005E0 =0000000E                M vcar2	=	op2
000005E0 =0000000E                M vcar3	=	op3
000005E0 =0000000E                M vcar4	=	op4
000005E0                            	smpsVcAmpMod        $00, $00, $00, $00
000005E0 =00000000                M vcam1	=	op1<<7
000005E0 =00000000                M vcam2	=	op2<<7
000005E0 =00000000                M vcam3	=	op3<<7
000005E0 =00000000                M vcam4	=	op4<<7
000005E0                            	smpsVcDecayRate1    $05, $05, $07, $08
000005E0 =00000005                M vcd1r1	=	op1
000005E0 =00000005                M vcd1r2	=	op2
000005E0 =00000007                M vcd1r3	=	op3
000005E0 =00000008                M vcd1r4	=	op4
000005E0                            	smpsVcDecayRate2    $12, $03, $02, $02
000005E0 =00000012                M vcd2r1	=	op1
000005E0 =00000003                M vcd2r2	=	op2
000005E0 =00000002                M vcd2r3	=	op3
000005E0 =00000002                M vcd2r4	=	op4
000005E0                            	smpsVcDecayLevel    $02, $02, $02, $01
000005E0 =00000002                M vcdl1	=	op1
000005E0 =00000002                M vcdl2	=	op2
000005E0 =00000002                M vcdl3	=	op3
000005E0 =00000001                M vcdl4	=	op4
000005E0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005E0 =0000000F                M vcrr1	=	op1
000005E0 =0000000F                M vcrr2	=	op2
000005E0 =0000000F                M vcrr3	=	op3
000005E0 =0000000F                M vcrr4	=	op4
000005E0                            	smpsVcTotalLevel    $82, $24, $9F, $29
000005E0 =00000082                M vctl1	=	op1
000005E0 =00000024                M vctl2	=	op2
000005E0 =0000009F                M vctl3	=	op3
000005E0 =00000029                M vctl4	=	op4
000005E0 23                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005E1 =00000000                M vctlmask4	=	0
000005E1 =00000000                M vctlmask3	=	0
000005E1 =00000000                M vctlmask2	=	0
000005E1 =00000000                M vctlmask1	=	0
000005E1 6E26 3474                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005E5 0E0E 0E0D                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005E9 0805 0705                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005ED 0203 0212                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005F1 1F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005F5 2924 9F82                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005F9                            
000005F9                          M 	pops
00000000                            		inc_music	FinalBoss
00000000                          M 	pushs
00000000                          M music_329:	section	org($1380),file("sound/music/compressed/finalboss.unc"),over(header)
00000000                          M 	include	"sound/music/finalboss.asm"
00000000                            End_Boss_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000001                M sourcesmps2asm	=	sourcesmps2asmver
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     End_Boss_Voices
00000000 0000                     M 	dc.w	((end_boss_voices&$7fff)<<8)&$ff00+(end_boss_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $A9
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$a9
00000005 A9                       M 	dc.b	$a9
00000006                            
00000006                            	smpsHeaderDAC       End_Boss_DAC
00000006                          M 	checkedchannelpointer	end_boss_dac
00000006 0000                     M 	dc.w	((end_boss_dac&$7fff)<<8)&$ff00+(end_boss_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        End_Boss_FM1,	$F4, $0B
0000000A                          M 	checkedchannelpointer	end_boss_fm1
0000000A 0000                     M 	dc.w	((end_boss_fm1&$7fff)<<8)&$ff00+(end_boss_fm1&$7fff)>>8
0000000C F40B                     M 	dc.b	$f4,$0b
0000000E                            	smpsHeaderFM        End_Boss_FM2,	$F4, $0B
0000000E                          M 	checkedchannelpointer	end_boss_fm2
0000000E 0000                     M 	dc.w	((end_boss_fm2&$7fff)<<8)&$ff00+(end_boss_fm2&$7fff)>>8
00000010 F40B                     M 	dc.b	$f4,$0b
00000012                            	smpsHeaderFM        End_Boss_FM3,	$E8, $0E
00000012                          M 	checkedchannelpointer	end_boss_fm3
00000012 0000                     M 	dc.w	((end_boss_fm3&$7fff)<<8)&$ff00+(end_boss_fm3&$7fff)>>8
00000014 E80E                     M 	dc.b	$e8,$0e
00000016                            	smpsHeaderFM        End_Boss_FM4,	$F4, $14
00000016                          M 	checkedchannelpointer	end_boss_fm4
00000016 0000                     M 	dc.w	((end_boss_fm4&$7fff)<<8)&$ff00+(end_boss_fm4&$7fff)>>8
00000018 F414                     M 	dc.b	$f4,$14
0000001A                            	smpsHeaderFM        End_Boss_FM5,	$F4, $14
0000001A                          M 	checkedchannelpointer	end_boss_fm5
0000001A 0000                     M 	dc.w	((end_boss_fm5&$7fff)<<8)&$ff00+(end_boss_fm5&$7fff)>>8
0000001C F414                     M 	dc.b	$f4,$14
0000001E                            	smpsHeaderPSG       End_Boss_PSG1,	$D0, $06, $00, $00
0000001E                          M 	checkedchannelpointer	end_boss_psg1
0000001E 0000                     M 	dc.w	((end_boss_psg1&$7fff)<<8)&$ff00+(end_boss_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       End_Boss_PSG2,	$F4, $05, $00, $00
00000024                          M 	checkedchannelpointer	end_boss_psg2
00000024 0000                     M 	dc.w	((end_boss_psg2&$7fff)<<8)&$ff00+(end_boss_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$f4
00000026 F4                       M 	dc.b	$f4
00000027 05                       M 	dc.b	$05
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       End_Boss_PSG3,	$FE, $03, $00, fTone_04
0000002A                          M 	checkedchannelpointer	end_boss_psg3
0000002A 0000                     M 	dc.w	((end_boss_psg3&$7fff)<<8)&$ff00+(end_boss_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$fe
0000002C FE                       M 	dc.b	$fe
0000002D 03                       M 	dc.b	$03
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM1 Data
00000030                            End_Boss_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032                            
00000032                            End_Boss_Loop07:
00000032 C70C C2                    	dc.b	nBb5, $0C, nF5
00000035                            	smpsAlterVol        $05
00000035 E605                     M 	dc.b	$e6,$05
00000037                            	smpsLoop            $00, $04, End_Boss_Loop07
00000037 F7                       M 	dc.b	$f7
00000038 0004                     M 	dc.b	index,loops
0000003A 0000                     M 	dc.w	((end_boss_loop07&$7fff)<<8)&$ff00+(end_boss_loop07&$7fff)>>8
0000003C                            	smpsAlterVol        $EC
0000003C E6EC                     M 	dc.b	$e6,$ec
0000003E                            	smpsLoop            $01, $02, End_Boss_Loop07
0000003E F7                       M 	dc.b	$f7
0000003F 0102                     M 	dc.b	index,loops
00000041 0000                     M 	dc.w	((end_boss_loop07&$7fff)<<8)&$ff00+(end_boss_loop07&$7fff)>>8
00000043                            	smpsPan             panLeft, $00
00000043 E080                     M 	dc.b	$e0,direction+amsfms
00000045                            	smpsAlterVol        $FE
00000045 E6FE                     M 	dc.b	$e6,$fe
00000047                            
00000047                            End_Boss_Loop08:
00000047                            	smpsCall            End_Boss_Call08
00000047 F8                       M 	dc.b	$f8
00000048 0000                     M 	dc.w	((end_boss_call08&$7fff)<<8)&$ff00+(end_boss_call08&$7fff)>>8
0000004A                            	smpsLoop            $00, $02, End_Boss_Loop08
0000004A F7                       M 	dc.b	$f7
0000004B 0002                     M 	dc.b	index,loops
0000004D 0000                     M 	dc.w	((end_boss_loop08&$7fff)<<8)&$ff00+(end_boss_loop08&$7fff)>>8
0000004F                            	smpsAlterVol        $02
0000004F E602                     M 	dc.b	$e6,$02
00000051                            	smpsPan             panCenter, $00
00000051 E0C0                     M 	dc.b	$e0,direction+amsfms
00000053                            	smpsCall            End_Boss_Call09
00000053 F8                       M 	dc.b	$f8
00000054 0000                     M 	dc.w	((end_boss_call09&$7fff)<<8)&$ff00+(end_boss_call09&$7fff)>>8
00000056                            	smpsPan             panLeft, $00
00000056 E080                     M 	dc.b	$e0,direction+amsfms
00000058                            
00000058                            End_Boss_Loop09:
00000058                            	smpsCall            End_Boss_Call0A
00000058 F8                       M 	dc.b	$f8
00000059 0000                     M 	dc.w	((end_boss_call0a&$7fff)<<8)&$ff00+(end_boss_call0a&$7fff)>>8
0000005B                            	smpsLoop            $00, $02, End_Boss_Loop09
0000005B F7                       M 	dc.b	$f7
0000005C 0002                     M 	dc.b	index,loops
0000005E 0000                     M 	dc.w	((end_boss_loop09&$7fff)<<8)&$ff00+(end_boss_loop09&$7fff)>>8
00000060                            	smpsCall            End_Boss_Call0B
00000060 F8                       M 	dc.b	$f8
00000061 0000                     M 	dc.w	((end_boss_call0b&$7fff)<<8)&$ff00+(end_boss_call0b&$7fff)>>8
00000063                            	smpsLoop            $01, $02, End_Boss_Loop09
00000063 F7                       M 	dc.b	$f7
00000064 0102                     M 	dc.b	index,loops
00000066 0000                     M 	dc.w	((end_boss_loop09&$7fff)<<8)&$ff00+(end_boss_loop09&$7fff)>>8
00000068                            	smpsPan             panCenter, $00
00000068 E0C0                     M 	dc.b	$e0,direction+amsfms
0000006A                            	smpsJump            End_Boss_Loop07
0000006A F6                       M 	dc.b	$f6
0000006B 0000                     M 	dc.w	((end_boss_loop07&$7fff)<<8)&$ff00+(end_boss_loop07&$7fff)>>8
0000006D                            
0000006D                            End_Boss_Call08:
0000006D 8060 8080 0CD0 06D2 CD48+  	dc.b	nRst, $60, nRst, nRst, $0C, nG6, $06, nA6, nE6, $48, nRst, $0C
00000079 D006 D1CD 48               	dc.b	nG6, $06, nAb6, nE6, $48
0000007E                            	smpsReturn
0000007E E3                       M 	dc.b	$e3
0000007F                            
0000007F                            End_Boss_Call09:
0000007F C906 C8C9 80C9 C8C9 80CB+  	dc.b	nC6, $06, nB5, nC6, nRst, nC6, nB5, nC6, nRst, nD6, $12, $06
0000008B 8018 CB06 C9CB 80CB C9CB+  	dc.b	nRst, $18, nD6, $06, nC6, nD6, nRst, nD6, nC6, nD6, nRst, nE6
00000097 1206 8018 CD06 CBCD 80CD+  	dc.b	$12, $06, nRst, $18, nE6, $06, nD6, nE6, nRst, nE6, nD6, nE6
000000A3 80CD 1206 8018 D224 0380+  	dc.b	nRst, nE6, $12, $06, nRst, $18, nA6, $24, $03, nRst, nAb6, $36
000000AF 0680 D180 D180 D180 D180+  	dc.b	$06, nRst, nAb6, nRst, nAb6, nRst, nAb6, nRst, nAb6, nRst, $2A
000000BA                            	smpsReturn
000000BA E3                       M 	dc.b	$e3
000000BB                            
000000BB                            End_Boss_Call0A:
000000BB CD06 C980 CDC9 80CD C9CD+  	dc.b	nE6, $06, nC6, nRst, nE6, nC6, nRst, nE6, nC6, nE6, nC6, nRst
000000C7 CDC9 8012                  	dc.b	nE6, nC6, nRst, $12
000000CB                            	smpsReturn
000000CB E3                       M 	dc.b	$e3
000000CC                            
000000CC                            End_Boss_Call0B:
000000CC 800C C606 C8C9 4880 0CC8+  	dc.b	nRst, $0C, nA5, $06, nB5, nC6, $48, nRst, $0C, nB5, $06, nC6
000000D8 CB48                       	dc.b	nD6, $48
000000DA                            	smpsReturn
000000DA E3                       M 	dc.b	$e3
000000DB                            
000000DB                            ; FM2 Data
000000DB                            End_Boss_FM2:
000000DB                            	smpsSetvoice        $00
000000DB                          M 	smpsfmvoice	$00
000000DB EF00                     M 	dc.b	$ef,$00
000000DD                            
000000DD                            End_Boss_Loop04:
000000DD C60C C1                    	dc.b	nA5, $0C, nE5
000000E0                            	smpsAlterVol        $05
000000E0 E605                     M 	dc.b	$e6,$05
000000E2                            	smpsLoop            $00, $04, End_Boss_Loop04
000000E2 F7                       M 	dc.b	$f7
000000E3 0004                     M 	dc.b	index,loops
000000E5 0000                     M 	dc.w	((end_boss_loop04&$7fff)<<8)&$ff00+(end_boss_loop04&$7fff)>>8
000000E7                            	smpsAlterVol        $EC
000000E7 E6EC                     M 	dc.b	$e6,$ec
000000E9                            	smpsLoop            $01, $02, End_Boss_Loop04
000000E9 F7                       M 	dc.b	$f7
000000EA 0102                     M 	dc.b	index,loops
000000EC 0000                     M 	dc.w	((end_boss_loop04&$7fff)<<8)&$ff00+(end_boss_loop04&$7fff)>>8
000000EE                            	smpsSetvoice        $02
000000EE                          M 	smpsfmvoice	$02
000000EE EF02                     M 	dc.b	$ef,$02
000000F0                            	smpsPan             panLeft, $00
000000F0 E080                     M 	dc.b	$e0,direction+amsfms
000000F2                            	smpsAlterNote       $03
000000F2                          M 	smpsdetune	$03
000000F2 E103                     M 	dc.b	$e1,$03
000000F4                            	smpsAlterVol        $08
000000F4 E608                     M 	dc.b	$e6,$08
000000F6                            
000000F6                            End_Boss_Loop05:
000000F6                            	smpsCall            End_Boss_Call03
000000F6 F8                       M 	dc.b	$f8
000000F7 0000                     M 	dc.w	((end_boss_call03&$7fff)<<8)&$ff00+(end_boss_call03&$7fff)>>8
000000F9                            	smpsLoop            $00, $02, End_Boss_Loop05
000000F9 F7                       M 	dc.b	$f7
000000FA 0002                     M 	dc.b	index,loops
000000FC 0000                     M 	dc.w	((end_boss_loop05&$7fff)<<8)&$ff00+(end_boss_loop05&$7fff)>>8
000000FE                            	smpsSetvoice        $00
000000FE                          M 	smpsfmvoice	$00
000000FE EF00                     M 	dc.b	$ef,$00
00000100                            	smpsAlterNote       $00
00000100                          M 	smpsdetune	$00
00000100 E100                     M 	dc.b	$e1,$00
00000102                            	smpsAlterVol        $F8
00000102 E6F8                     M 	dc.b	$e6,$f8
00000104                            	smpsPan             panCenter, $00
00000104 E0C0                     M 	dc.b	$e0,direction+amsfms
00000106                            	smpsCall            End_Boss_Call05
00000106 F8                       M 	dc.b	$f8
00000107 0000                     M 	dc.w	((end_boss_call05&$7fff)<<8)&$ff00+(end_boss_call05&$7fff)>>8
00000109                            
00000109                            End_Boss_Loop06:
00000109                            	smpsCall            End_Boss_Call06
00000109 F8                       M 	dc.b	$f8
0000010A 0000                     M 	dc.w	((end_boss_call06&$7fff)<<8)&$ff00+(end_boss_call06&$7fff)>>8
0000010C                            	smpsLoop            $00, $02, End_Boss_Loop06
0000010C F7                       M 	dc.b	$f7
0000010D 0002                     M 	dc.b	index,loops
0000010F 0000                     M 	dc.w	((end_boss_loop06&$7fff)<<8)&$ff00+(end_boss_loop06&$7fff)>>8
00000111                            	smpsCall            End_Boss_Call07
00000111 F8                       M 	dc.b	$f8
00000112 0000                     M 	dc.w	((end_boss_call07&$7fff)<<8)&$ff00+(end_boss_call07&$7fff)>>8
00000114                            	smpsLoop            $01, $02, End_Boss_Loop06
00000114 F7                       M 	dc.b	$f7
00000115 0102                     M 	dc.b	index,loops
00000117 0000                     M 	dc.w	((end_boss_loop06&$7fff)<<8)&$ff00+(end_boss_loop06&$7fff)>>8
00000119                            	smpsJump            End_Boss_Loop04
00000119 F6                       M 	dc.b	$f6
0000011A 0000                     M 	dc.w	((end_boss_loop04&$7fff)<<8)&$ff00+(end_boss_loop04&$7fff)>>8
0000011C                            
0000011C                            End_Boss_Call06:
0000011C C906 C680 C9C6 80C9 C6C9+  	dc.b	nC6, $06, nA5, nRst, nC6, nA5, nRst, nC6, nA5, nC6, nA5, nRst
00000128 C9C6 8012                  	dc.b	nC6, nA5, nRst, $12
0000012C                            	smpsReturn
0000012C E3                       M 	dc.b	$e3
0000012D                            
0000012D                            End_Boss_Call07:
0000012D                            	smpsAlterPitch      $F4
0000012D                          M 	smpschangetransposition	$f4
0000012D E9F4                     M 	dc.b	$e9,$f4
0000012F                            	smpsAlterVol        $03
0000012F E603                     M 	dc.b	$e6,$03
00000131 800C C606 C8C9 4880 0CC8+  	dc.b	nRst, $0C, nA5, $06, nB5, nC6, $48, nRst, $0C, nB5, $06, nC6
0000013D CB48                       	dc.b	nD6, $48
0000013F                            	smpsAlterPitch      $0C
0000013F                          M 	smpschangetransposition	$0c
0000013F E90C                     M 	dc.b	$e9,$0c
00000141                            	smpsAlterVol        $FD
00000141 E6FD                     M 	dc.b	$e6,$fd
00000143                            	smpsReturn
00000143 E3                       M 	dc.b	$e3
00000144                            
00000144                            End_Boss_Call05:
00000144 C606 C4C6 80C6 C4C6 80C8+  	dc.b	nA5, $06, nG5, nA5, nRst, nA5, nG5, nA5, nRst, nB5, $12, $06
00000150 8018 C806 C6C8 80C8 C6C8+  	dc.b	nRst, $18, nB5, $06, nA5, nB5, nRst, nB5, nA5, nB5, nRst, nC6
0000015C 1206 8018 C906 C8C9 80C9+  	dc.b	$12, $06, nRst, $18, nC6, $06, nB5, nC6, nRst, nC6, nB5, nC6
00000168 80C9 1206 8018 CD24 0380+  	dc.b	nRst, nC6, $12, $06, nRst, $18, nE6, $24, $03, nRst, nE6, $36
00000174 0680 CD80 CD80 CD80 CD80+  	dc.b	$06, nRst, nE6, nRst, nE6, nRst, nE6, nRst, nE6, nRst, $2A
0000017F                            	smpsReturn
0000017F E3                       M 	dc.b	$e3
00000180                            
00000180                            ; FM3 Data
00000180                            End_Boss_FM3:
00000180                            	smpsSetvoice        $01
00000180                          M 	smpsfmvoice	$01
00000180 EF01                     M 	dc.b	$ef,$01
00000182                            	smpsModSet          $13, $01, $03, $05
00000182 F0                       M 	dc.b	$f0
00000183 1301 0305                M 	dc.b	$13,$01,$03,$05
00000187                            
00000187                            End_Boss_Jump01:
00000187 8060 80                    	dc.b	nRst, $60, nRst
0000018A                            
0000018A                            End_Boss_Loop03:
0000018A                            	smpsCall            End_Boss_Call00
0000018A F8                       M 	dc.b	$f8
0000018B 0000                     M 	dc.w	((end_boss_call00&$7fff)<<8)&$ff00+(end_boss_call00&$7fff)>>8
0000018D                            	smpsLoop            $00, $02, End_Boss_Loop03
0000018D F7                       M 	dc.b	$f7
0000018E 0002                     M 	dc.b	index,loops
00000190 0000                     M 	dc.w	((end_boss_loop03&$7fff)<<8)&$ff00+(end_boss_loop03&$7fff)>>8
00000192                            	smpsCall            End_Boss_Call01
00000192 F8                       M 	dc.b	$f8
00000193 0000                     M 	dc.w	((end_boss_call01&$7fff)<<8)&$ff00+(end_boss_call01&$7fff)>>8
00000195                            	smpsCall            End_Boss_Call04
00000195 F8                       M 	dc.b	$f8
00000196 0000                     M 	dc.w	((end_boss_call04&$7fff)<<8)&$ff00+(end_boss_call04&$7fff)>>8
00000198 B654 B806 BAB5 60          	dc.b	nF4, $54, nG4, $06, nA4, nE4, $60
0000019F                            	smpsCall            End_Boss_Call04
0000019F F8                       M 	dc.b	$f8
000001A0 0000                     M 	dc.w	((end_boss_call04&$7fff)<<8)&$ff00+(end_boss_call04&$7fff)>>8
000001A2 B660 B8                    	dc.b	nF4, $60, nG4
000001A5                            	smpsJump            End_Boss_Jump01
000001A5 F6                       M 	dc.b	$f6
000001A6 0000                     M 	dc.w	((end_boss_jump01&$7fff)<<8)&$ff00+(end_boss_jump01&$7fff)>>8
000001A8                            
000001A8                            End_Boss_Call04:
000001A8 BA18 B50C BAB9 18B5 B8BA+  	dc.b	nA4, $18, nE4, $0C, nA4, nAb4, $18, nE4, nG4, nA4, $0C, nG4
000001B4 B718 B3                    	dc.b	nFs4, $18, nD4
000001B7                            	smpsReturn
000001B7 E3                       M 	dc.b	$e3
000001B8                            
000001B8                            End_Boss_Call00:
000001B8 BA0C BDC1 BAB9 BDC1 B9B8+  	dc.b	nA4, $0C, nC5, nE5, nA4, nAb4, nC5, nE5, nAb4, nG4, nB4, nD5
000001C4 B8B7 BABD B7B6 BABD BAC1+  	dc.b	nG4, nFs4, nA4, nC5, nFs4, nF4, nA4, nC5, nA4, nE5, nA4, nC5
000001D0 B6B5 B9BC B9BF B9BC B5     	dc.b	nF4, nE4, nAb4, nB4, nAb4, nD5, nAb4, nB4, nE4
000001D9                            	smpsReturn
000001D9 E3                       M 	dc.b	$e3
000001DA                            
000001DA                            End_Boss_Call01:
000001DA B624 BD0C BC24 BA0C B824+  	dc.b	nF4, $24, nC5, $0C, nB4, $24, nA4, $0C, nG4, $24, nD5, $0C
000001E6 BD24 06BF C124 062A BD06+  	dc.b	nC5, $24, $06, nD5, nE5, $24, $06, $2A, nC5, $06, nD5, nE5
000001F2 24C2 06C1 36E7 3080        	dc.b	$24, nF5, $06, nE5, $36, smpsNoAttack, $30, nRst
000001FA                            	smpsReturn
000001FA E3                       M 	dc.b	$e3
000001FB                            
000001FB                            ; FM4 Data
000001FB                            End_Boss_FM4:
000001FB                            	smpsSetvoice        $02
000001FB                          M 	smpsfmvoice	$02
000001FB EF02                     M 	dc.b	$ef,$02
000001FD                            	smpsModSet          $12, $01, $05, $05
000001FD F0                       M 	dc.b	$f0
000001FE 1201 0505                M 	dc.b	$12,$01,$05,$05
00000202                            
00000202                            End_Boss_Jump00:
00000202 8060 80                    	dc.b	nRst, $60, nRst
00000205                            
00000205                            End_Boss_Loop01:
00000205                            	smpsCall            End_Boss_Call03
00000205 F8                       M 	dc.b	$f8
00000206 0000                     M 	dc.w	((end_boss_call03&$7fff)<<8)&$ff00+(end_boss_call03&$7fff)>>8
00000208                            	smpsLoop            $00, $02, End_Boss_Loop01
00000208 F7                       M 	dc.b	$f7
00000209 0002                     M 	dc.b	index,loops
0000020B 0000                     M 	dc.w	((end_boss_loop01&$7fff)<<8)&$ff00+(end_boss_loop01&$7fff)>>8
0000020D                            
0000020D                            End_Boss_Loop02:
0000020D 8060                       	dc.b	nRst, $60
0000020F                            	smpsLoop            $00, $05, End_Boss_Loop02
0000020F F7                       M 	dc.b	$f7
00000210 0005                     M 	dc.b	index,loops
00000212 0000                     M 	dc.w	((end_boss_loop02&$7fff)<<8)&$ff00+(end_boss_loop02&$7fff)>>8
00000214                            	smpsCall            End_Boss_Call02
00000214 F8                       M 	dc.b	$f8
00000215 0000                     M 	dc.w	((end_boss_call02&$7fff)<<8)&$ff00+(end_boss_call02&$7fff)>>8
00000217 C954 CB06 C9C8 60          	dc.b	nC6, $54, nD6, $06, nC6, nB5, $60
0000021E                            	smpsCall            End_Boss_Call02
0000021E F8                       M 	dc.b	$f8
0000021F 0000                     M 	dc.w	((end_boss_call02&$7fff)<<8)&$ff00+(end_boss_call02&$7fff)>>8
00000221 C960 CB                    	dc.b	nC6, $60, nD6
00000224                            	smpsJump            End_Boss_Jump00
00000224 F6                       M 	dc.b	$f6
00000225 0000                     M 	dc.w	((end_boss_jump00&$7fff)<<8)&$ff00+(end_boss_jump00&$7fff)>>8
00000227                            
00000227                            End_Boss_Call02:
00000227 C624 C506 C6C8 24C6 06C8+  	dc.b	nA5, $24, nAb5, $06, nA5, nB5, $24, nA5, $06, nB5, nC6, $24
00000233 C806 C9CB 24C9 06CB        	dc.b	nB5, $06, nC6, nD6, $24, nC6, $06, nD6
0000023B                            	smpsReturn
0000023B E3                       M 	dc.b	$e3
0000023C                            
0000023C                            End_Boss_Call03:
0000023C C618 C9CB 24C8 0CC9 24C6+  	dc.b	nA5, $18, nC6, nD6, $24, nB5, $0C, nC6, $24, nA5, $0C, nB5
00000248 18C4 C660 80               	dc.b	$18, nG5, nA5, $60, nRst
0000024D                            	smpsReturn
0000024D E3                       M 	dc.b	$e3
0000024E                            
0000024E                            ; FM5 Data
0000024E                            End_Boss_FM5:
0000024E                            	smpsSetvoice        $01
0000024E                          M 	smpsfmvoice	$01
0000024E EF01                     M 	dc.b	$ef,$01
00000250                            	smpsAlterNote       $01
00000250                          M 	smpsdetune	$01
00000250 E101                     M 	dc.b	$e1,$01
00000252                            	smpsPan             panRight, $00
00000252 E040                     M 	dc.b	$e0,direction+amsfms
00000254                            	smpsModSet          $13, $01, $03, $05
00000254 F0                       M 	dc.b	$f0
00000255 1301 0305                M 	dc.b	$13,$01,$03,$05
00000259 8060 80                    	dc.b	nRst, $60, nRst
0000025C                            
0000025C                            End_Boss_Loop00:
0000025C                            	smpsCall            End_Boss_Call00
0000025C F8                       M 	dc.b	$f8
0000025D 0000                     M 	dc.w	((end_boss_call00&$7fff)<<8)&$ff00+(end_boss_call00&$7fff)>>8
0000025F                            	smpsLoop            $00, $02, End_Boss_Loop00
0000025F F7                       M 	dc.b	$f7
00000260 0002                     M 	dc.b	index,loops
00000262 0000                     M 	dc.w	((end_boss_loop00&$7fff)<<8)&$ff00+(end_boss_loop00&$7fff)>>8
00000264                            	smpsCall            End_Boss_Call01
00000264 F8                       M 	dc.b	$f8
00000265 0000                     M 	dc.w	((end_boss_call01&$7fff)<<8)&$ff00+(end_boss_call01&$7fff)>>8
00000267                            	smpsPan             panLeft, $00
00000267 E080                     M 	dc.b	$e0,direction+amsfms
00000269                            	smpsSetvoice        $02
00000269                          M 	smpsfmvoice	$02
00000269 EF02                     M 	dc.b	$ef,$02
0000026B                            	smpsAlterNote       $03
0000026B                          M 	smpsdetune	$03
0000026B E103                     M 	dc.b	$e1,$03
0000026D                            	smpsCall            End_Boss_Call02
0000026D F8                       M 	dc.b	$f8
0000026E 0000                     M 	dc.w	((end_boss_call02&$7fff)<<8)&$ff00+(end_boss_call02&$7fff)>>8
00000270 C954 CB06 C9C8 60          	dc.b	nC6, $54, nD6, $06, nC6, nB5, $60
00000277                            	smpsCall            End_Boss_Call02
00000277 F8                       M 	dc.b	$f8
00000278 0000                     M 	dc.w	((end_boss_call02&$7fff)<<8)&$ff00+(end_boss_call02&$7fff)>>8
0000027A C960 CB                    	dc.b	nC6, $60, nD6
0000027D                            	smpsJump            End_Boss_FM5
0000027D F6                       M 	dc.b	$f6
0000027E 0000                     M 	dc.w	((end_boss_fm5&$7fff)<<8)&$ff00+(end_boss_fm5&$7fff)>>8
00000280                            
00000280                            ; PSG1 Data
00000280                            End_Boss_PSG1:
00000280                            	smpsAlterNote       $02
00000280                          M 	smpsdetune	$02
00000280 E102                     M 	dc.b	$e1,$02
00000282                            
00000282                            End_Boss_Jump04:
00000282 8060 8060                  	dc.b	nRst, $60, nRst, $60
00000286                            
00000286                            End_Boss_Loop0A:
00000286                            	smpsCall            End_Boss_Call08
00000286 F8                       M 	dc.b	$f8
00000287 0000                     M 	dc.w	((end_boss_call08&$7fff)<<8)&$ff00+(end_boss_call08&$7fff)>>8
00000289                            	smpsLoop            $00, $02, End_Boss_Loop0A
00000289 F7                       M 	dc.b	$f7
0000028A 0002                     M 	dc.b	index,loops
0000028C 0000                     M 	dc.w	((end_boss_loop0a&$7fff)<<8)&$ff00+(end_boss_loop0a&$7fff)>>8
0000028E                            
0000028E                            End_Boss_Loop0B:
0000028E 8060                       	dc.b	nRst, $60
00000290                            	smpsLoop            $00, $05, End_Boss_Loop0B
00000290 F7                       M 	dc.b	$f7
00000291 0005                     M 	dc.b	index,loops
00000293 0000                     M 	dc.w	((end_boss_loop0b&$7fff)<<8)&$ff00+(end_boss_loop0b&$7fff)>>8
00000295                            
00000295                            End_Boss_Loop0C:
00000295 8060 8080 0CC6 06C8 C948+  	dc.b	nRst, $60, nRst, nRst, $0C, nA5, $06, nB5, nC6, $48, nRst, $0C
000002A1 C806 C9CB 48               	dc.b	nB5, $06, nC6, nD6, $48
000002A6                            	smpsLoop            $00, $02, End_Boss_Loop0C
000002A6 F7                       M 	dc.b	$f7
000002A7 0002                     M 	dc.b	index,loops
000002A9 0000                     M 	dc.w	((end_boss_loop0c&$7fff)<<8)&$ff00+(end_boss_loop0c&$7fff)>>8
000002AB                            	smpsJump            End_Boss_Jump04
000002AB F6                       M 	dc.b	$f6
000002AC 0000                     M 	dc.w	((end_boss_jump04&$7fff)<<8)&$ff00+(end_boss_jump04&$7fff)>>8
000002AE                            
000002AE                            ; PSG2 Data
000002AE                            End_Boss_PSG2:
000002AE                            	smpsPSGvoice        fTone_08
000002AE F508                     M 	dc.b	$f5,ftone_08
000002B0                            	smpsModSet          $0C, $01, $02, $01
000002B0 F0                       M 	dc.b	$f0
000002B1 0C01 0201                M 	dc.b	$0c,$01,$02,$01
000002B5                            
000002B5                            End_Boss_Jump03:
000002B5 8060                       	dc.b	nRst, $60
000002B7                            	smpsLoop            $00, $0F, End_Boss_PSG2
000002B7 F7                       M 	dc.b	$f7
000002B8 000F                     M 	dc.b	index,loops
000002BA 0000                     M 	dc.w	((end_boss_psg2&$7fff)<<8)&$ff00+(end_boss_psg2&$7fff)>>8
000002BC                            	smpsCall            End_Boss_Call04
000002BC F8                       M 	dc.b	$f8
000002BD 0000                     M 	dc.w	((end_boss_call04&$7fff)<<8)&$ff00+(end_boss_call04&$7fff)>>8
000002BF B654 B806 BAB5 60          	dc.b	nF4, $54, nG4, $06, nA4, nE4, $60
000002C6                            	smpsCall            End_Boss_Call04
000002C6 F8                       M 	dc.b	$f8
000002C7 0000                     M 	dc.w	((end_boss_call04&$7fff)<<8)&$ff00+(end_boss_call04&$7fff)>>8
000002C9 B660 B8                    	dc.b	nF4, $60, nG4
000002CC                            	smpsJump            End_Boss_Jump03
000002CC F6                       M 	dc.b	$f6
000002CD 0000                     M 	dc.w	((end_boss_jump03&$7fff)<<8)&$ff00+(end_boss_jump03&$7fff)>>8
000002CF                            
000002CF                            ; PSG3 Data
000002CF                            End_Boss_PSG3:
000002CF                            	smpsPSGform         $E7
000002CF F3E7                     M 	dc.b	$f3,$e7
000002D1                            	smpsNoteFill        $06
000002D1 E806                     M 	dc.b	$e8,$06
000002D3                            
000002D3                            End_Boss_Jump02:
000002D3 C718 1818 0C0C             	dc.b	nBb5, $18, $18, $18, $0C, $0C
000002D9                            	smpsJump            End_Boss_Jump02
000002D9 F6                       M 	dc.b	$f6
000002DA 0000                     M 	dc.w	((end_boss_jump02&$7fff)<<8)&$ff00+(end_boss_jump02&$7fff)>>8
000002DC                            
000002DC                            ; DAC Data
000002DC                            End_Boss_DAC:
000002DC 8B0C 8204 8282             	dc.b	dVLowTimpani, $0C, dSnare, $04, dSnare, dSnare
000002E2                            	smpsLoop            $00, $03, End_Boss_DAC
000002E2 F7                       M 	dc.b	$f7
000002E3 0003                     M 	dc.b	index,loops
000002E5 0000                     M 	dc.w	((end_boss_dac&$7fff)<<8)&$ff00+(end_boss_dac&$7fff)>>8
000002E7 890C 8A                    	dc.b	dMidTimpani, $0C, dLowTimpani
000002EA                            	smpsJump            End_Boss_DAC
000002EA F6                       M 	dc.b	$f6
000002EB 0000                     M 	dc.w	((end_boss_dac&$7fff)<<8)&$ff00+(end_boss_dac&$7fff)>>8
000002ED                            
000002ED                            End_Boss_Voices:
000002ED                            ;	Voice $00
000002ED                            ;	$3A
000002ED                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000002ED                            ;	$00, $00, $00, $01, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
000002ED                            	smpsVcAlgorithm     $02
000002ED =00000002                M vcalgorithm	=	val
000002ED                            	smpsVcFeedback      $07
000002ED =00000007                M vcfeedback	=	val
000002ED                            	smpsVcUnusedBits    $00
000002ED =00000000                M vcunusedbits	=	val
000002ED =00000000                M vcd1r1unk	=	0
000002ED =00000000                M vcd1r2unk	=	0
000002ED =00000000                M vcd1r3unk	=	0
000002ED =00000000                M vcd1r4unk	=	0
000002ED                            	smpsVcDetune        $00, $00, $00, $00
000002ED =00000000                M vcdt1	=	op1
000002ED =00000000                M vcdt2	=	op2
000002ED =00000000                M vcdt3	=	op3
000002ED =00000000                M vcdt4	=	op4
000002ED                            	smpsVcCoarseFreq    $01, $01, $07, $01
000002ED =00000001                M vccf1	=	op1
000002ED =00000001                M vccf2	=	op2
000002ED =00000007                M vccf3	=	op3
000002ED =00000001                M vccf4	=	op4
000002ED                            	smpsVcRateScale     $01, $02, $02, $02
000002ED =00000001                M vcrs1	=	op1
000002ED =00000002                M vcrs2	=	op2
000002ED =00000002                M vcrs3	=	op3
000002ED =00000002                M vcrs4	=	op4
000002ED                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000002ED =00000013                M vcar1	=	op1
000002ED =0000000D                M vcar2	=	op2
000002ED =0000000E                M vcar3	=	op3
000002ED =0000000E                M vcar4	=	op4
000002ED                            	smpsVcAmpMod        $00, $00, $00, $00
000002ED =00000000                M vcam1	=	op1<<7
000002ED =00000000                M vcam2	=	op2<<7
000002ED =00000000                M vcam3	=	op3<<7
000002ED =00000000                M vcam4	=	op4<<7
000002ED                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000002ED =00000003                M vcd1r1	=	op1
000002ED =0000000E                M vcd1r2	=	op2
000002ED =0000000E                M vcd1r3	=	op3
000002ED =0000000E                M vcd1r4	=	op4
000002ED                            	smpsVcDecayRate2    $01, $00, $00, $00
000002ED =00000001                M vcd2r1	=	op1
000002ED =00000000                M vcd2r2	=	op2
000002ED =00000000                M vcd2r3	=	op3
000002ED =00000000                M vcd2r4	=	op4
000002ED                            	smpsVcDecayLevel    $00, $01, $0F, $01
000002ED =00000000                M vcdl1	=	op1
000002ED =00000001                M vcdl2	=	op2
000002ED =0000000F                M vcdl3	=	op3
000002ED =00000001                M vcdl4	=	op4
000002ED                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002ED =0000000F                M vcrr1	=	op1
000002ED =0000000F                M vcrr2	=	op2
000002ED =0000000F                M vcrr3	=	op3
000002ED =0000000F                M vcrr4	=	op4
000002ED                            	smpsVcTotalLevel    $80, $27, $28, $17
000002ED =00000080                M vctl1	=	op1
000002ED =00000027                M vctl2	=	op2
000002ED =00000028                M vctl3	=	op3
000002ED =00000017                M vctl4	=	op4
000002ED 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002EE =00000000                M vctlmask4	=	0
000002EE =00000000                M vctlmask3	=	0
000002EE =00000000                M vctlmask2	=	0
000002EE =00000000                M vctlmask1	=	0
000002EE 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002F2 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002F6 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000002FA 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002FE 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000302 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000306                            
00000306                            ;	Voice $01
00000306                            ;	$3D
00000306                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
00000306                            ;	$00, $03, $03, $03, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $60
00000306                            	smpsVcAlgorithm     $05
00000306 =00000005                M vcalgorithm	=	val
00000306                            	smpsVcFeedback      $07
00000306 =00000007                M vcfeedback	=	val
00000306                            	smpsVcUnusedBits    $00
00000306 =00000000                M vcunusedbits	=	val
00000306 =00000000                M vcd1r1unk	=	0
00000306 =00000000                M vcd1r2unk	=	0
00000306 =00000000                M vcd1r3unk	=	0
00000306 =00000000                M vcd1r4unk	=	0
00000306                            	smpsVcDetune        $00, $00, $00, $00
00000306 =00000000                M vcdt1	=	op1
00000306 =00000000                M vcdt2	=	op2
00000306 =00000000                M vcdt3	=	op3
00000306 =00000000                M vcdt4	=	op4
00000306                            	smpsVcCoarseFreq    $01, $01, $01, $01
00000306 =00000001                M vccf1	=	op1
00000306 =00000001                M vccf2	=	op2
00000306 =00000001                M vccf3	=	op3
00000306 =00000001                M vccf4	=	op4
00000306                            	smpsVcRateScale     $01, $00, $01, $02
00000306 =00000001                M vcrs1	=	op1
00000306 =00000000                M vcrs2	=	op2
00000306 =00000001                M vcrs3	=	op3
00000306 =00000002                M vcrs4	=	op4
00000306                            	smpsVcAttackRate    $0C, $14, $12, $0E
00000306 =0000000C                M vcar1	=	op1
00000306 =00000014                M vcar2	=	op2
00000306 =00000012                M vcar3	=	op3
00000306 =0000000E                M vcar4	=	op4
00000306                            	smpsVcAmpMod        $00, $00, $00, $00
00000306 =00000000                M vcam1	=	op1<<7
00000306 =00000000                M vcam2	=	op2<<7
00000306 =00000000                M vcam3	=	op3<<7
00000306 =00000000                M vcam4	=	op4<<7
00000306                            	smpsVcDecayRate1    $03, $0E, $08, $08
00000306 =00000003                M vcd1r1	=	op1
00000306 =0000000E                M vcd1r2	=	op2
00000306 =00000008                M vcd1r3	=	op3
00000306 =00000008                M vcd1r4	=	op4
00000306                            	smpsVcDecayRate2    $03, $03, $03, $00
00000306 =00000003                M vcd2r1	=	op1
00000306 =00000003                M vcd2r2	=	op2
00000306 =00000003                M vcd2r3	=	op3
00000306 =00000000                M vcd2r4	=	op4
00000306                            	smpsVcDecayLevel    $01, $01, $01, $01
00000306 =00000001                M vcdl1	=	op1
00000306 =00000001                M vcdl2	=	op2
00000306 =00000001                M vcdl3	=	op3
00000306 =00000001                M vcdl4	=	op4
00000306                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000306 =0000000F                M vcrr1	=	op1
00000306 =0000000F                M vcrr2	=	op2
00000306 =0000000F                M vcrr3	=	op3
00000306 =0000000F                M vcrr4	=	op4
00000306                            	smpsVcTotalLevel    $60, $80, $80, $1A
00000306 =00000060                M vctl1	=	op1
00000306 =00000080                M vctl2	=	op2
00000306 =00000080                M vctl3	=	op3
00000306 =0000001A                M vctl4	=	op4
00000306 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000307 =00000000                M vctlmask4	=	0
00000307 =00000000                M vctlmask3	=	0
00000307 =00000000                M vctlmask2	=	0
00000307 =00000000                M vctlmask1	=	0
00000307 0101 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000030B 8E14 524C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000030F 080E 0803                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000313 0003 0303                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000317 1F1F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000031B 1A80 8060                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000031F                            
0000031F                            ;	Voice $02
0000031F                            ;	$3D
0000031F                            ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$05, $05, $05, $05
0000031F                            ;	$00, $00, $00, $00, 	$2F, $2F, $2F, $1F, 	$1E, $80, $80, $80
0000031F                            	smpsVcAlgorithm     $05
0000031F =00000005                M vcalgorithm	=	val
0000031F                            	smpsVcFeedback      $07
0000031F =00000007                M vcfeedback	=	val
0000031F                            	smpsVcUnusedBits    $00
0000031F =00000000                M vcunusedbits	=	val
0000031F =00000000                M vcd1r1unk	=	0
0000031F =00000000                M vcd1r2unk	=	0
0000031F =00000000                M vcd1r3unk	=	0
0000031F =00000000                M vcd1r4unk	=	0
0000031F                            	smpsVcDetune        $00, $05, $02, $00
0000031F =00000000                M vcdt1	=	op1
0000031F =00000005                M vcdt2	=	op2
0000031F =00000002                M vcdt3	=	op3
0000031F =00000000                M vcdt4	=	op4
0000031F                            	smpsVcCoarseFreq    $01, $01, $01, $01
0000031F =00000001                M vccf1	=	op1
0000031F =00000001                M vccf2	=	op2
0000031F =00000001                M vccf3	=	op3
0000031F =00000001                M vccf4	=	op4
0000031F                            	smpsVcRateScale     $00, $00, $00, $00
0000031F =00000000                M vcrs1	=	op1
0000031F =00000000                M vcrs2	=	op2
0000031F =00000000                M vcrs3	=	op3
0000031F =00000000                M vcrs4	=	op4
0000031F                            	smpsVcAttackRate    $0F, $14, $14, $12
0000031F =0000000F                M vcar1	=	op1
0000031F =00000014                M vcar2	=	op2
0000031F =00000014                M vcar3	=	op3
0000031F =00000012                M vcar4	=	op4
0000031F                            	smpsVcAmpMod        $00, $00, $00, $00
0000031F =00000000                M vcam1	=	op1<<7
0000031F =00000000                M vcam2	=	op2<<7
0000031F =00000000                M vcam3	=	op3<<7
0000031F =00000000                M vcam4	=	op4<<7
0000031F                            	smpsVcDecayRate1    $05, $05, $05, $05
0000031F =00000005                M vcd1r1	=	op1
0000031F =00000005                M vcd1r2	=	op2
0000031F =00000005                M vcd1r3	=	op3
0000031F =00000005                M vcd1r4	=	op4
0000031F                            	smpsVcDecayRate2    $00, $00, $00, $00
0000031F =00000000                M vcd2r1	=	op1
0000031F =00000000                M vcd2r2	=	op2
0000031F =00000000                M vcd2r3	=	op3
0000031F =00000000                M vcd2r4	=	op4
0000031F                            	smpsVcDecayLevel    $01, $02, $02, $02
0000031F =00000001                M vcdl1	=	op1
0000031F =00000002                M vcdl2	=	op2
0000031F =00000002                M vcdl3	=	op3
0000031F =00000002                M vcdl4	=	op4
0000031F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000031F =0000000F                M vcrr1	=	op1
0000031F =0000000F                M vcrr2	=	op2
0000031F =0000000F                M vcrr3	=	op3
0000031F =0000000F                M vcrr4	=	op4
0000031F                            	smpsVcTotalLevel    $80, $80, $80, $1E
0000031F =00000080                M vctl1	=	op1
0000031F =00000080                M vctl2	=	op2
0000031F =00000080                M vctl3	=	op3
0000031F =0000001E                M vctl4	=	op4
0000031F 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000320 =00000000                M vctlmask4	=	0
00000320 =00000000                M vctlmask3	=	0
00000320 =00000000                M vctlmask2	=	0
00000320 =00000000                M vctlmask1	=	0
00000320 0151 2101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000324 1214 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000328 0505 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000032C 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000330 2F2F 2F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000334 1E80 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000338                            
00000338                          M 	pops
00000000                            		inc_music	CPZ
00000000                          M 	pushs
00000000                          M music_512:	section	org($1380),file("sound/music/compressed/cpz.unc"),over(header)
00000000                          M 	include	"sound/music/cpz.asm"
00000000                            CPZ_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     CPZ_Voices
00000000 0000                     M 	dc.w	((cpz_voices&$7fff)<<8)&$ff00+(cpz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $EE
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$ee
00000005 EE                       M 	dc.b	$ee
00000006                            
00000006                            	smpsHeaderDAC       CPZ_DAC
00000006                          M 	checkedchannelpointer	cpz_dac
00000006 0000                     M 	dc.w	((cpz_dac&$7fff)<<8)&$ff00+(cpz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        CPZ_FM1,	$00, $08
0000000A                          M 	checkedchannelpointer	cpz_fm1
0000000A 0000                     M 	dc.w	((cpz_fm1&$7fff)<<8)&$ff00+(cpz_fm1&$7fff)>>8
0000000C 0008                     M 	dc.b	$00,$08
0000000E                            	smpsHeaderFM        CPZ_FM2,	$00, $0C
0000000E                          M 	checkedchannelpointer	cpz_fm2
0000000E 0000                     M 	dc.w	((cpz_fm2&$7fff)<<8)&$ff00+(cpz_fm2&$7fff)>>8
00000010 000C                     M 	dc.b	$00,$0c
00000012                            	smpsHeaderFM        CPZ_FM3,	$00, $10
00000012                          M 	checkedchannelpointer	cpz_fm3
00000012 0000                     M 	dc.w	((cpz_fm3&$7fff)<<8)&$ff00+(cpz_fm3&$7fff)>>8
00000014 0010                     M 	dc.b	$00,$10
00000016                            	smpsHeaderFM        CPZ_FM4,	$00, $10
00000016                          M 	checkedchannelpointer	cpz_fm4
00000016 0000                     M 	dc.w	((cpz_fm4&$7fff)<<8)&$ff00+(cpz_fm4&$7fff)>>8
00000018 0010                     M 	dc.b	$00,$10
0000001A                            	smpsHeaderFM        CPZ_FM5,	$00, $10
0000001A                          M 	checkedchannelpointer	cpz_fm5
0000001A 0000                     M 	dc.w	((cpz_fm5&$7fff)<<8)&$ff00+(cpz_fm5&$7fff)>>8
0000001C 0010                     M 	dc.b	$00,$10
0000001E                            	smpsHeaderPSG       CPZ_PSG1,	$00, $07, $00, $00
0000001E                          M 	checkedchannelpointer	cpz_psg1
0000001E 0000                     M 	dc.w	((cpz_psg1&$7fff)<<8)&$ff00+(cpz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$00
00000020 00                       M 	dc.b	$00
00000021 07                       M 	dc.b	$07
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       CPZ_PSG2,	$00, $07, $00, $00
00000024                          M 	checkedchannelpointer	cpz_psg2
00000024 0000                     M 	dc.w	((cpz_psg2&$7fff)<<8)&$ff00+(cpz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$00
00000026 00                       M 	dc.b	$00
00000027 07                       M 	dc.b	$07
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       CPZ_PSG3,	$00, $00, $00, fTone_02
0000002A                          M 	checkedchannelpointer	cpz_psg3
0000002A 0000                     M 	dc.w	((cpz_psg3&$7fff)<<8)&$ff00+(cpz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 00                       M 	dc.b	$00
0000002E 00                       M 	dc.b	$00
0000002F 02                       M 	dc.b	ftone_02
00000030                            
00000030                            ; PSG1 Data
00000030                            CPZ_PSG1:
00000030                            	smpsStop
00000030 F2                       M 	dc.b	$f2
00000031                            
00000031                            ; PSG2 Data
00000031                            CPZ_PSG2:
00000031                            	smpsStop
00000031 F2                       M 	dc.b	$f2
00000032                            
00000032                            CPZ_Call0B:
00000032                            	smpsSetvoice        $01
00000032                          M 	smpsfmvoice	$01
00000032 EF01                     M 	dc.b	$ef,$01
00000034 B706 B2B5 B7               	dc.b	nFs4, $06, nCs4, nE4, nFs4
00000039                            	smpsReturn
00000039 E3                       M 	dc.b	$e3
0000003A                            
0000003A                            CPZ_Call06:
0000003A                            	smpsSetvoice        $01
0000003A                          M 	smpsfmvoice	$01
0000003A EF01                     M 	dc.b	$ef,$01
0000003C BE06 BEBA 0480 08BC 06BE   	dc.b	nCs5, $06, nCs5, nA4, $04, nRst, $08, nB4, $06, nCs5
00000046                            	smpsReturn
00000046 E3                       M 	dc.b	$e3
00000047                            
00000047                            CPZ_Call05:
00000047                            	smpsSetvoice        $05
00000047                          M 	smpsfmvoice	$05
00000047 EF05                     M 	dc.b	$ef,$05
00000049 C605 8013 C612 C605 800D   	dc.b	nA5, $05, nRst, $13, nA5, $12, nA5, $05, nRst, $0D
00000053                            	smpsCall            CPZ_Call0B
00000053 F8                       M 	dc.b	$f8
00000054 0000                     M 	dc.w	((cpz_call0b&$7fff)<<8)&$ff00+(cpz_call0b&$7fff)>>8
00000056                            	smpsSetvoice        $05
00000056                          M 	smpsfmvoice	$05
00000056 EF05                     M 	dc.b	$ef,$05
00000058 C6C6 800C C606 C605 800D+  	dc.b	nA5, nA5, nRst, $0C, nA5, $06, nA5, $05, nRst, $0D, nA5, $06
00000064 C830 E706 C605 8013 C612+  	dc.b	nB5, $30, smpsNoAttack, $06, nA5, $05, nRst, $13, nA5, $12, nA5, $05
00000070 800D                       	dc.b	nRst, $0D
00000072                            	smpsCall            CPZ_Call0B
00000072 F8                       M 	dc.b	$f8
00000073 0000                     M 	dc.w	((cpz_call0b&$7fff)<<8)&$ff00+(cpz_call0b&$7fff)>>8
00000075 800C                       	dc.b	nRst, $0C
00000077                            	smpsReturn
00000077 E3                       M 	dc.b	$e3
00000078                            
00000078                            CPZ_Call07:
00000078 BE0C BC06 BABC BA04 E708+  	dc.b	nCs5, $0C, nB4, $06, nA4, nB4, nA4, $04, smpsNoAttack, $08, nA4, $04
00000084 800E                       	dc.b	nRst, $0E
00000086                            	smpsCall            CPZ_Call0B
00000086 F8                       M 	dc.b	$f8
00000087 0000                     M 	dc.w	((cpz_call0b&$7fff)<<8)&$ff00+(cpz_call0b&$7fff)>>8
00000089                            	smpsSetvoice        $00
00000089                          M 	smpsfmvoice	$00
00000089 EF00                     M 	dc.b	$ef,$00
0000008B B7BA BE0C BC06 BABC BA0C+  	dc.b	nFs4, nA4, nCs5, $0C, nB4, $06, nA4, nB4, nA4, $0C, nB4, $04
00000097 8008 BA04 8008 BC04 8008+  	dc.b	nRst, $08, nA4, $04, nRst, $08, nB4, $04, nRst, $08, nCs5, $12
000000A3 BA06 B780 B780 24          	dc.b	nA4, $06, nFs4, nRst, nFs4, nRst, $24
000000AA                            	smpsCall            CPZ_Call0B
000000AA F8                       M 	dc.b	$f8
000000AB 0000                     M 	dc.w	((cpz_call0b&$7fff)<<8)&$ff00+(cpz_call0b&$7fff)>>8
000000AD 800C 8030                  	dc.b	nRst, $0C, nRst, $30
000000B1                            	smpsCall            CPZ_Call06
000000B1 F8                       M 	dc.b	$f8
000000B2 0000                     M 	dc.w	((cpz_call06&$7fff)<<8)&$ff00+(cpz_call06&$7fff)>>8
000000B4                            	smpsReturn
000000B4 E3                       M 	dc.b	$e3
000000B5                            
000000B5                            CPZ_Call08:
000000B5                            	smpsAlterVol        $04
000000B5 E604                     M 	dc.b	$e6,$04
000000B7                            	smpsSetvoice        $01
000000B7                          M 	smpsfmvoice	$01
000000B7 EF01                     M 	dc.b	$ef,$01
000000B9 B312 8006 B312 8006 B50C+  	dc.b	nD4, $12, nRst, $06, nD4, $12, nRst, $06, nE4, $0C, nRst, $12
000000C5                            	smpsAlterVol        $FC
000000C5 E6FC                     M 	dc.b	$e6,$fc
000000C7                            	smpsReturn
000000C7 E3                       M 	dc.b	$e3
000000C8                            
000000C8                            CPZ_Call09:
000000C8                            	smpsSetvoice        $00
000000C8                          M 	smpsfmvoice	$00
000000C8 EF00                     M 	dc.b	$ef,$00
000000CA B206 B5B7 B902 E7BA 0AB7+  	dc.b	nCs4, $06, nE4, nFs4, nAb4, $02, smpsNoAttack, nA4, $0A, nFs4, $06, nCs4
000000D6 B5B7 0480 08B9 02E7 BA10+  	dc.b	nE4, nFs4, $04, nRst, $08, nAb4, $02, smpsNoAttack, nA4, $10, nFs4, $06
000000E2 B2B5 B704 800E             	dc.b	nCs4, nE4, nFs4, $04, nRst, $0E
000000E8                            	smpsReturn
000000E8 E3                       M 	dc.b	$e3
000000E9                            
000000E9                            CPZ_Call02:
000000E9 C305 8013 C312 C305 8025+  	dc.b	nFs5, $05, nRst, $13, nFs5, $12, nFs5, $05, nRst, $25, nFs5, $06
000000F5 C380 0CC3 06C3 0580 0DC3+  	dc.b	nFs5, nRst, $0C, nFs5, $06, nFs5, $05, nRst, $0D, nFs5, $06, nAb5
00000101 30E7 06C3 0580 13C3 12C3+  	dc.b	$30, smpsNoAttack, $06, nFs5, $05, nRst, $13, nFs5, $12, nFs5, $05, nRst
0000010D 3080 0180 3080             	dc.b	$30, nRst, $01, nRst, $30, nRst
00000113                            	smpsReturn
00000113 E3                       M 	dc.b	$e3
00000114                            
00000114                            CPZ_Call04:
00000114 C605 8013 C612 C605 8025+  	dc.b	nA5, $05, nRst, $13, nA5, $12, nA5, $05, nRst, $25, nA5, $06
00000120 C680 0CC6 06C6 0580 0DC6+  	dc.b	nA5, nRst, $0C, nA5, $06, nA5, $05, nRst, $0D, nA5, $06, nB5
0000012C 30E7 06C6 0580 13C6 12C6+  	dc.b	$30, smpsNoAttack, $06, nA5, $05, nRst, $13, nA5, $12, nA5, $05, nRst
00000138 3080 0180 3080             	dc.b	$30, nRst, $01, nRst, $30, nRst
0000013E                            	smpsReturn
0000013E E3                       M 	dc.b	$e3
0000013F                            
0000013F                            CPZ_Call03:
0000013F 9F0C AB06 80A9 80AB 9F80+  	dc.b	nFs2, $0C, nFs3, $06, nRst, nE3, nRst, nFs3, nFs2, nRst, nFs2, nFs3
0000014B 80A9 80AB 0C               	dc.b	nRst, nE3, nRst, nFs3, $0C
00000150                            	smpsReturn
00000150 E3                       M 	dc.b	$e3
00000151                            
00000151                            CPZ_Call0A:
00000151                            	smpsAlterNote       $F8
00000151                          M 	smpsdetune	$f8
00000151 E1F8                     M 	dc.b	$e1,$f8
00000153 E703                       	dc.b	smpsNoAttack, $03
00000155                            	smpsAlterNote       $F0
00000155                          M 	smpsdetune	$f0
00000155 E1F0                     M 	dc.b	$e1,$f0
00000157 E703                       	dc.b	smpsNoAttack, $03
00000159                            	smpsAlterNote       $E8
00000159                          M 	smpsdetune	$e8
00000159 E1E8                     M 	dc.b	$e1,$e8
0000015B E703                       	dc.b	smpsNoAttack, $03
0000015D                            	smpsAlterNote       $E0
0000015D                          M 	smpsdetune	$e0
0000015D E1E0                     M 	dc.b	$e1,$e0
0000015F E703                       	dc.b	smpsNoAttack, $03
00000161                            	smpsAlterNote       $D8
00000161                          M 	smpsdetune	$d8
00000161 E1D8                     M 	dc.b	$e1,$d8
00000163 E703                       	dc.b	smpsNoAttack, $03
00000165                            	smpsAlterNote       $D0
00000165                          M 	smpsdetune	$d0
00000165 E1D0                     M 	dc.b	$e1,$d0
00000167 E703                       	dc.b	smpsNoAttack, $03
00000169                            	smpsAlterNote       $C8
00000169                          M 	smpsdetune	$c8
00000169 E1C8                     M 	dc.b	$e1,$c8
0000016B E703                       	dc.b	smpsNoAttack, $03
0000016D                            	smpsAlterNote       $C0
0000016D                          M 	smpsdetune	$c0
0000016D E1C0                     M 	dc.b	$e1,$c0
0000016F E703                       	dc.b	smpsNoAttack, $03
00000171                            	smpsAlterNote       $C8
00000171                          M 	smpsdetune	$c8
00000171 E1C8                     M 	dc.b	$e1,$c8
00000173 E703                       	dc.b	smpsNoAttack, $03
00000175                            	smpsAlterNote       $D0
00000175                          M 	smpsdetune	$d0
00000175 E1D0                     M 	dc.b	$e1,$d0
00000177 E703                       	dc.b	smpsNoAttack, $03
00000179                            	smpsAlterNote       $D8
00000179                          M 	smpsdetune	$d8
00000179 E1D8                     M 	dc.b	$e1,$d8
0000017B E703                       	dc.b	smpsNoAttack, $03
0000017D                            	smpsAlterNote       $E0
0000017D                          M 	smpsdetune	$e0
0000017D E1E0                     M 	dc.b	$e1,$e0
0000017F E703                       	dc.b	smpsNoAttack, $03
00000181                            	smpsAlterNote       $E8
00000181                          M 	smpsdetune	$e8
00000181 E1E8                     M 	dc.b	$e1,$e8
00000183 E703                       	dc.b	smpsNoAttack, $03
00000185                            	smpsAlterNote       $F0
00000185                          M 	smpsdetune	$f0
00000185 E1F0                     M 	dc.b	$e1,$f0
00000187 E703                       	dc.b	smpsNoAttack, $03
00000189                            	smpsAlterNote       $F8
00000189                          M 	smpsdetune	$f8
00000189 E1F8                     M 	dc.b	$e1,$f8
0000018B E703                       	dc.b	smpsNoAttack, $03
0000018D                            	smpsAlterNote       $00
0000018D                          M 	smpsdetune	$00
0000018D E100                     M 	dc.b	$e1,$00
0000018F E703                       	dc.b	smpsNoAttack, $03
00000191                            	smpsReturn
00000191 E3                       M 	dc.b	$e3
00000192                            
00000192                            CPZ_Call00:
00000192 8118 820C 8118 0C82 8181+  	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, dKick, dKick, $18, dSnare
0000019E 0C81 1281 8218 8182 0C81+  	dc.b	$0C, dKick, $12, dKick, dSnare, $18, dKick, dSnare, $0C, dKick, $18, $0C
000001AA 8281 8118 820C 8118 820C+  	dc.b	dSnare, dKick, dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000001B6 0682                       	dc.b	$06, dSnare
000001B8                            	smpsReturn
000001B8 E3                       M 	dc.b	$e3
000001B9                            
000001B9                            CPZ_Call01:
000001B9 8118 820C 8118 0C82 8181+  	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, dKick, dKick, $18, dSnare
000001C5 0C81 1281 8218 8182 0C81+  	dc.b	$0C, dKick, $12, dKick, dSnare, $18, dKick, dSnare, $0C, dKick, $18, $0C
000001D1 8281 8118 820C 8182 0682+  	dc.b	dSnare, dKick, dKick, $18, dSnare, $0C, dKick, dSnare, $06, dSnare, dSnare, dSnare
000001DD 8282 8282                  	dc.b	dSnare, dSnare, dSnare, dSnare
000001E1                            	smpsReturn
000001E1 E3                       M 	dc.b	$e3
000001E2                            
000001E2                            ; FM1 Data
000001E2                            CPZ_FM1:
000001E2                            	smpsModSet          $06, $01, $FA, $04
000001E2 F0                       M 	dc.b	$f0
000001E3 0601 FA04                M 	dc.b	$06,$01,$fa,$04
000001E7                            	smpsCall            CPZ_Call05
000001E7 F8                       M 	dc.b	$f8
000001E8 0000                     M 	dc.w	((cpz_call05&$7fff)<<8)&$ff00+(cpz_call05&$7fff)>>8
000001EA 8030 80                    	dc.b	nRst, $30, nRst
000001ED                            	smpsCall            CPZ_Call05
000001ED F8                       M 	dc.b	$f8
000001EE 0000                     M 	dc.w	((cpz_call05&$7fff)<<8)&$ff00+(cpz_call05&$7fff)>>8
000001F0 8030                       	dc.b	nRst, $30
000001F2                            	smpsCall            CPZ_Call06
000001F2 F8                       M 	dc.b	$f8
000001F3 0000                     M 	dc.w	((cpz_call06&$7fff)<<8)&$ff00+(cpz_call06&$7fff)>>8
000001F5                            	smpsSetvoice        $00
000001F5                          M 	smpsfmvoice	$00
000001F5 EF00                     M 	dc.b	$ef,$00
000001F7 B7BA                       	dc.b	nFs4, nA4
000001F9                            
000001F9                            CPZ_Jump01:
000001F9                            	smpsCall            CPZ_Call07
000001F9 F8                       M 	dc.b	$f8
000001FA 0000                     M 	dc.w	((cpz_call07&$7fff)<<8)&$ff00+(cpz_call07&$7fff)>>8
000001FC                            	smpsSetvoice        $00
000001FC                          M 	smpsfmvoice	$00
000001FC EF00                     M 	dc.b	$ef,$00
000001FE B706 BA                    	dc.b	nFs4, $06, nA4
00000201                            	smpsCall            CPZ_Call07
00000201 F8                       M 	dc.b	$f8
00000202 0000                     M 	dc.w	((cpz_call07&$7fff)<<8)&$ff00+(cpz_call07&$7fff)>>8
00000204 800C                       	dc.b	nRst, $0C
00000206                            
00000206                            CPZ_Loop10:
00000206 800C                       	dc.b	nRst, $0C
00000208                            	smpsSetvoice        $00
00000208                          M 	smpsfmvoice	$00
00000208 EF00                     M 	dc.b	$ef,$00
0000020A BC04 8008 BC0C BA06 BC80+  	dc.b	nB4, $04, nRst, $08, nB4, $0C, nA4, $06, nB4, nRst, nB4, nRst
00000216 BABC 0CBA BE06 BA80 B7     	dc.b	nA4, nB4, $0C, nA4, nCs5, $06, nA4, nRst, nFs4
0000021F                            	smpsSetvoice        $01
0000021F                          M 	smpsfmvoice	$01
0000021F EF01                     M 	dc.b	$ef,$01
00000221 BA04 8008 BA04 8008 BA04   	dc.b	nA4, $04, nRst, $08, nA4, $04, nRst, $08, nA4, $04
0000022B                            	smpsAlterVol        $FD
0000022B E6FD                     M 	dc.b	$e6,$fd
0000022D 8008 BA04 8008 BA06 BA12   	dc.b	nRst, $08, nA4, $04, nRst, $08, nA4, $06, nA4, $12
00000237                            	smpsAlterVol        $FD
00000237 E6FD                     M 	dc.b	$e6,$fd
00000239 B704 8008                  	dc.b	nFs4, $04, nRst, $08
0000023D                            	smpsAlterVol        $06
0000023D E606                     M 	dc.b	$e6,$06
0000023F                            	smpsSetvoice        $00
0000023F                          M 	smpsfmvoice	$00
0000023F EF00                     M 	dc.b	$ef,$00
00000241 BC04 8008 BC0C BA06 BC80+  	dc.b	nB4, $04, nRst, $08, nB4, $0C, nA4, $06, nB4, nRst, nB4, nRst
0000024D BABC 0CBA                  	dc.b	nA4, nB4, $0C, nA4
00000251                            	smpsAlterVol        $FD
00000251 E6FD                     M 	dc.b	$e6,$fd
00000253 BE06                       	dc.b	nCs5, $06
00000255                            	smpsAlterVol        $04
00000255 E604                     M 	dc.b	$e6,$04
00000257                            	smpsSetvoice        $01
00000257                          M 	smpsfmvoice	$01
00000257 EF01                     M 	dc.b	$ef,$01
00000259 B703 E7B8 E7B9 24B3 03E7+  	dc.b	nFs4, $03, smpsNoAttack, nG4, smpsNoAttack, nAb4, $24, nD4, $03, smpsNoAttack, nEb4, smpsNoAttack
00000265 B5E7 B6E7 B724             	dc.b	nE4, smpsNoAttack, nF4, smpsNoAttack, nFs4, $24
0000026B                            	smpsAlterVol        $FF
0000026B E6FF                     M 	dc.b	$e6,$ff
0000026D                            	smpsLoop            $00, $02, CPZ_Loop10
0000026D F7                       M 	dc.b	$f7
0000026E 0002                     M 	dc.b	index,loops
00000270 0000                     M 	dc.w	((cpz_loop10&$7fff)<<8)&$ff00+(cpz_loop10&$7fff)>>8
00000272                            	smpsCall            CPZ_Call08
00000272 F8                       M 	dc.b	$f8
00000273 0000                     M 	dc.w	((cpz_call08&$7fff)<<8)&$ff00+(cpz_call08&$7fff)>>8
00000275                            	smpsCall            CPZ_Call09
00000275 F8                       M 	dc.b	$f8
00000276 0000                     M 	dc.w	((cpz_call09&$7fff)<<8)&$ff00+(cpz_call09&$7fff)>>8
00000278                            	smpsCall            CPZ_Call08
00000278 F8                       M 	dc.b	$f8
00000279 0000                     M 	dc.w	((cpz_call08&$7fff)<<8)&$ff00+(cpz_call08&$7fff)>>8
0000027B                            	smpsSetvoice        $00
0000027B                          M 	smpsfmvoice	$00
0000027B EF00                     M 	dc.b	$ef,$00
0000027D B206 B5B7 B902 E7BA 0AB7+  	dc.b	nCs4, $06, nE4, nFs4, nAb4, $02, smpsNoAttack, nA4, $0A, nFs4, $06, nCs4
00000289 B5B7 0480 08BC 0CBA 06BC+  	dc.b	nE4, nFs4, $04, nRst, $08, nB4, $0C, nA4, $06, nB4, nCs5, $04
00000295 801A                       	dc.b	nRst, $1A
00000297                            	smpsCall            CPZ_Call08
00000297 F8                       M 	dc.b	$f8
00000298 0000                     M 	dc.w	((cpz_call08&$7fff)<<8)&$ff00+(cpz_call08&$7fff)>>8
0000029A                            	smpsCall            CPZ_Call09
0000029A F8                       M 	dc.b	$f8
0000029B 0000                     M 	dc.w	((cpz_call09&$7fff)<<8)&$ff00+(cpz_call09&$7fff)>>8
0000029D                            	smpsCall            CPZ_Call08
0000029D F8                       M 	dc.b	$f8
0000029E 0000                     M 	dc.w	((cpz_call08&$7fff)<<8)&$ff00+(cpz_call08&$7fff)>>8
000002A0                            	smpsSetvoice        $00
000002A0                          M 	smpsfmvoice	$00
000002A0 EF00                     M 	dc.b	$ef,$00
000002A2 B206 B5B7 BA04 8008 BC04+  	dc.b	nCs4, $06, nE4, nFs4, nA4, $04, nRst, $08, nB4, $04, nRst, $08
000002AE BE18 C1C3 E7C3 0C          	dc.b	nCs5, $18, nE5, nFs5, smpsNoAttack, nFs5, $0C
000002B5                            	smpsModSet          $18, $01, $05, $04
000002B5 F0                       M 	dc.b	$f0
000002B6 1801 0504                M 	dc.b	$18,$01,$05,$04
000002BA                            	smpsCall            CPZ_Call0A
000002BA F8                       M 	dc.b	$f8
000002BB 0000                     M 	dc.w	((cpz_call0a&$7fff)<<8)&$ff00+(cpz_call0a&$7fff)>>8
000002BD E7C3 30E7 0C80 18BE 06BE+  	dc.b	smpsNoAttack, nFs5, $30, smpsNoAttack, $0C, nRst, $18, nCs5, $06, nCs5, nA4, $04
000002C9 8008 B706 BA80 B7          	dc.b	nRst, $08, nFs4, $06, nA4, nRst, nFs4
000002D0                            	smpsCall            CPZ_Call0A
000002D0 F8                       M 	dc.b	$f8
000002D1 0000                     M 	dc.w	((cpz_call0a&$7fff)<<8)&$ff00+(cpz_call0a&$7fff)>>8
000002D3 E730 E730 E718 800C B706+  	dc.b	smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack, $18, nRst, $0C, nFs4, $06, nA4
000002DE                            	smpsModSet          $06, $01, $FA, $04
000002DE F0                       M 	dc.b	$f0
000002DF 0601 FA04                M 	dc.b	$06,$01,$fa,$04
000002E3                            	smpsJump            CPZ_Jump01
000002E3 F6                       M 	dc.b	$f6
000002E4 0000                     M 	dc.w	((cpz_jump01&$7fff)<<8)&$ff00+(cpz_jump01&$7fff)>>8
000002E6                            
000002E6                            ; FM4 Data
000002E6                            CPZ_FM4:
000002E6                            	smpsModSet          $0C, $01, $FB, $04
000002E6 F0                       M 	dc.b	$f0
000002E7 0C01 FB04                M 	dc.b	$0c,$01,$fb,$04
000002EB                            	smpsSetvoice        $02
000002EB                          M 	smpsfmvoice	$02
000002EB EF02                     M 	dc.b	$ef,$02
000002ED                            
000002ED                            CPZ_Loop0C:
000002ED                            	smpsCall            CPZ_Call02
000002ED F8                       M 	dc.b	$f8
000002EE 0000                     M 	dc.w	((cpz_call02&$7fff)<<8)&$ff00+(cpz_call02&$7fff)>>8
000002F0                            	smpsLoop            $00, $02, CPZ_Loop0C
000002F0 F7                       M 	dc.b	$f7
000002F1 0002                     M 	dc.b	index,loops
000002F3 0000                     M 	dc.w	((cpz_loop0c&$7fff)<<8)&$ff00+(cpz_loop0c&$7fff)>>8
000002F5                            
000002F5                            CPZ_Loop0D:
000002F5                            	smpsCall            CPZ_Call02
000002F5 F8                       M 	dc.b	$f8
000002F6 0000                     M 	dc.w	((cpz_call02&$7fff)<<8)&$ff00+(cpz_call02&$7fff)>>8
000002F8                            	smpsLoop            $00, $04, CPZ_Loop0D
000002F8 F7                       M 	dc.b	$f7
000002F9 0004                     M 	dc.b	index,loops
000002FB 0000                     M 	dc.w	((cpz_loop0d&$7fff)<<8)&$ff00+(cpz_loop0d&$7fff)>>8
000002FD                            	smpsModOff
000002FD F4                       M 	dc.b	$f4
000002FE                            
000002FE                            CPZ_Loop0E:
000002FE C512 8006 C512 8006 C60C+  	dc.b	nAb5, $12, nRst, $06, nAb5, $12, nRst, $06, nA5, $0C, nRst, $24
0000030A 8030 80                    	dc.b	nRst, $30, nRst
0000030D                            	smpsLoop            $00, $04, CPZ_Loop0E
0000030D F7                       M 	dc.b	$f7
0000030E 0004                     M 	dc.b	index,loops
00000310 0000                     M 	dc.w	((cpz_loop0e&$7fff)<<8)&$ff00+(cpz_loop0e&$7fff)>>8
00000312                            	smpsModSet          $0C, $01, $05, $04
00000312 F0                       M 	dc.b	$f0
00000313 0C01 0504                M 	dc.b	$0c,$01,$05,$04
00000317 8030 80                    	dc.b	nRst, $30, nRst
0000031A                            	smpsSetvoice        $05
0000031A                          M 	smpsfmvoice	$05
0000031A EF05                     M 	dc.b	$ef,$05
0000031C                            	smpsAlterVol        $F8
0000031C E6F8                     M 	dc.b	$e6,$f8
0000031E                            
0000031E                            CPZ_Loop0F:
0000031E BE04 8008 BC04 8008 BE0C+  	dc.b	nCs5, $04, nRst, $08, nB4, $04, nRst, $08, nCs5, $0C, nB4, $06
0000032A BE04 8008 BE06 BC04 8008+  	dc.b	nCs5, $04, nRst, $08, nCs5, $06, nB4, $04, nRst, $08, nCs5, $0C
00000336 BC04 8008                  	dc.b	nB4, $04, nRst, $08
0000033A                            	smpsLoop            $00, $02, CPZ_Loop0F
0000033A F7                       M 	dc.b	$f7
0000033B 0002                     M 	dc.b	index,loops
0000033D 0000                     M 	dc.w	((cpz_loop0f&$7fff)<<8)&$ff00+(cpz_loop0f&$7fff)>>8
0000033F C304 8008 C104 8008 C30C+  	dc.b	nFs5, $04, nRst, $08, nE5, $04, nRst, $08, nFs5, $0C, nE5, $06
0000034B C304 8008 C306 C104 8008+  	dc.b	nFs5, $04, nRst, $08, nFs5, $06, nE5, $04, nRst, $08, nFs5, $0C
00000357 C104 8008                  	dc.b	nE5, $04, nRst, $08
0000035B                            	smpsSetvoice        $02
0000035B                          M 	smpsfmvoice	$02
0000035B EF02                     M 	dc.b	$ef,$02
0000035D                            	smpsAlterVol        $08
0000035D E608                     M 	dc.b	$e6,$08
0000035F                            	smpsJump            CPZ_Loop0D
0000035F F6                       M 	dc.b	$f6
00000360 0000                     M 	dc.w	((cpz_loop0d&$7fff)<<8)&$ff00+(cpz_loop0d&$7fff)>>8
00000362                            
00000362                            ; FM5 Data
00000362                            CPZ_FM5:
00000362                            	smpsModSet          $0C, $01, $05, $04
00000362 F0                       M 	dc.b	$f0
00000363 0C01 0504                M 	dc.b	$0c,$01,$05,$04
00000367                            	smpsPan             panLeft, $00
00000367 E080                     M 	dc.b	$e0,direction+amsfms
00000369                            	smpsSetvoice        $02
00000369                          M 	smpsfmvoice	$02
00000369 EF02                     M 	dc.b	$ef,$02
0000036B                            
0000036B                            CPZ_Loop08:
0000036B                            	smpsCall            CPZ_Call04
0000036B F8                       M 	dc.b	$f8
0000036C 0000                     M 	dc.w	((cpz_call04&$7fff)<<8)&$ff00+(cpz_call04&$7fff)>>8
0000036E                            	smpsLoop            $00, $02, CPZ_Loop08
0000036E F7                       M 	dc.b	$f7
0000036F 0002                     M 	dc.b	index,loops
00000371 0000                     M 	dc.w	((cpz_loop08&$7fff)<<8)&$ff00+(cpz_loop08&$7fff)>>8
00000373                            
00000373                            CPZ_Loop09:
00000373                            	smpsCall            CPZ_Call04
00000373 F8                       M 	dc.b	$f8
00000374 0000                     M 	dc.w	((cpz_call04&$7fff)<<8)&$ff00+(cpz_call04&$7fff)>>8
00000376                            	smpsLoop            $00, $04, CPZ_Loop09
00000376 F7                       M 	dc.b	$f7
00000377 0004                     M 	dc.b	index,loops
00000379 0000                     M 	dc.w	((cpz_loop09&$7fff)<<8)&$ff00+(cpz_loop09&$7fff)>>8
0000037B                            	smpsModOff
0000037B F4                       M 	dc.b	$f4
0000037C                            
0000037C                            CPZ_Loop0A:
0000037C C812 8006 C812 8006 CA0C+  	dc.b	nB5, $12, nRst, $06, nB5, $12, nRst, $06, nCs6, $0C, nRst, $24
00000388 8030 80                    	dc.b	nRst, $30, nRst
0000038B                            	smpsLoop            $00, $04, CPZ_Loop0A
0000038B F7                       M 	dc.b	$f7
0000038C 0004                     M 	dc.b	index,loops
0000038E 0000                     M 	dc.w	((cpz_loop0a&$7fff)<<8)&$ff00+(cpz_loop0a&$7fff)>>8
00000390                            	smpsModSet          $0C, $01, $05, $04
00000390 F0                       M 	dc.b	$f0
00000391 0C01 0504                M 	dc.b	$0c,$01,$05,$04
00000395                            
00000395                            CPZ_Loop0B:
00000395 8030 80                    	dc.b	nRst, $30, nRst
00000398                            	smpsLoop            $00, $02, CPZ_Loop0B
00000398 F7                       M 	dc.b	$f7
00000399 0002                     M 	dc.b	index,loops
0000039B 0000                     M 	dc.w	((cpz_loop0b&$7fff)<<8)&$ff00+(cpz_loop0b&$7fff)>>8
0000039D                            	smpsSetvoice        $05
0000039D                          M 	smpsfmvoice	$05
0000039D EF05                     M 	dc.b	$ef,$05
0000039F                            	smpsAlterVol        $F8
0000039F E6F8                     M 	dc.b	$e6,$f8
000003A1 C304 8008 C104 8008 C30C+  	dc.b	nFs5, $04, nRst, $08, nE5, $04, nRst, $08, nFs5, $0C, nE5, $06
000003AD C304 8008 C306 C104 8008+  	dc.b	nFs5, $04, nRst, $08, nFs5, $06, nE5, $04, nRst, $08, nFs5, $0C
000003B9 C104 8008 CA04 8008 C804+  	dc.b	nE5, $04, nRst, $08, nCs6, $04, nRst, $08, nB5, $04, nRst, $08
000003C5 CA0C C806 CA04 8008 CA06+  	dc.b	nCs6, $0C, nB5, $06, nCs6, $04, nRst, $08, nCs6, $06, nB5, $04
000003D1 8008 CA0C C804 8008        	dc.b	nRst, $08, nCs6, $0C, nB5, $04, nRst, $08
000003D9                            	smpsSetvoice        $02
000003D9                          M 	smpsfmvoice	$02
000003D9 EF02                     M 	dc.b	$ef,$02
000003DB                            	smpsAlterVol        $08
000003DB E608                     M 	dc.b	$e6,$08
000003DD                            	smpsJump            CPZ_Loop09
000003DD F6                       M 	dc.b	$f6
000003DE 0000                     M 	dc.w	((cpz_loop09&$7fff)<<8)&$ff00+(cpz_loop09&$7fff)>>8
000003E0                            
000003E0                            ; FM3 Data
000003E0                            CPZ_FM3:
000003E0                            	smpsModSet          $06, $01, $05, $04
000003E0 F0                       M 	dc.b	$f0
000003E1 0601 0504                M 	dc.b	$06,$01,$05,$04
000003E5                            	smpsPan             panRight, $00
000003E5 E040                     M 	dc.b	$e0,direction+amsfms
000003E7                            	smpsSetvoice        $05
000003E7                          M 	smpsfmvoice	$05
000003E7 EF05                     M 	dc.b	$ef,$05
000003E9                            
000003E9                            CPZ_Loop04:
000003E9                            	smpsCall            CPZ_Call02
000003E9 F8                       M 	dc.b	$f8
000003EA 0000                     M 	dc.w	((cpz_call02&$7fff)<<8)&$ff00+(cpz_call02&$7fff)>>8
000003EC                            	smpsLoop            $00, $02, CPZ_Loop04
000003EC F7                       M 	dc.b	$f7
000003ED 0002                     M 	dc.b	index,loops
000003EF 0000                     M 	dc.w	((cpz_loop04&$7fff)<<8)&$ff00+(cpz_loop04&$7fff)>>8
000003F1                            
000003F1                            CPZ_Jump00:
000003F1                            	smpsSetvoice        $03
000003F1                          M 	smpsfmvoice	$03
000003F1 EF03                     M 	dc.b	$ef,$03
000003F3                            
000003F3                            CPZ_Loop05:
000003F3                            	smpsCall            CPZ_Call03
000003F3 F8                       M 	dc.b	$f8
000003F4 0000                     M 	dc.w	((cpz_call03&$7fff)<<8)&$ff00+(cpz_call03&$7fff)>>8
000003F6                            	smpsLoop            $00, $03, CPZ_Loop05
000003F6 F7                       M 	dc.b	$f7
000003F7 0003                     M 	dc.b	index,loops
000003F9 0000                     M 	dc.w	((cpz_loop05&$7fff)<<8)&$ff00+(cpz_loop05&$7fff)>>8
000003FB 9D0C A906 80A8 80A9 9C80+  	dc.b	nE2, $0C, nE3, $06, nRst, nEb3, nRst, nE3, nEb2, nRst, nEb2, nEb3
00000407 80A6 80A8 0C               	dc.b	nRst, nCs3, nRst, nEb3, $0C
0000040C                            	smpsLoop            $01, $04, CPZ_Loop05
0000040C F7                       M 	dc.b	$f7
0000040D 0104                     M 	dc.b	index,loops
0000040F 0000                     M 	dc.w	((cpz_loop05&$7fff)<<8)&$ff00+(cpz_loop05&$7fff)>>8
00000411 8030 80                    	dc.b	nRst, $30, nRst
00000414                            	smpsPan             panCenter, $00
00000414 E0C0                     M 	dc.b	$e0,direction+amsfms
00000416                            
00000416                            CPZ_Loop06:
00000416                            	smpsCall            CPZ_Call03
00000416 F8                       M 	dc.b	$f8
00000417 0000                     M 	dc.w	((cpz_call03&$7fff)<<8)&$ff00+(cpz_call03&$7fff)>>8
00000419 8030 80                    	dc.b	nRst, $30, nRst
0000041C                            	smpsLoop            $00, $03, CPZ_Loop06
0000041C F7                       M 	dc.b	$f7
0000041D 0003                     M 	dc.b	index,loops
0000041F 0000                     M 	dc.w	((cpz_loop06&$7fff)<<8)&$ff00+(cpz_loop06&$7fff)>>8
00000421                            	smpsPan             panRight, $00
00000421 E040                     M 	dc.b	$e0,direction+amsfms
00000423 8030 80                    	dc.b	nRst, $30, nRst
00000426                            	smpsSetvoice        $05
00000426                          M 	smpsfmvoice	$05
00000426 EF05                     M 	dc.b	$ef,$05
00000428                            	smpsAlterVol        $F8
00000428 E6F8                     M 	dc.b	$e6,$f8
0000042A                            
0000042A                            CPZ_Loop07:
0000042A BA04 8008 B904 8008 BA0C+  	dc.b	nA4, $04, nRst, $08, nAb4, $04, nRst, $08, nA4, $0C, nAb4, $06
00000436 BA04 8008 BA06 B904 8008+  	dc.b	nA4, $04, nRst, $08, nA4, $06, nAb4, $04, nRst, $08, nA4, $0C
00000442 B904 8008                  	dc.b	nAb4, $04, nRst, $08
00000446                            	smpsLoop            $00, $04, CPZ_Loop07
00000446 F7                       M 	dc.b	$f7
00000447 0004                     M 	dc.b	index,loops
00000449 0000                     M 	dc.w	((cpz_loop07&$7fff)<<8)&$ff00+(cpz_loop07&$7fff)>>8
0000044B                            	smpsAlterVol        $08
0000044B E608                     M 	dc.b	$e6,$08
0000044D                            	smpsJump            CPZ_Jump00
0000044D F6                       M 	dc.b	$f6
0000044E 0000                     M 	dc.w	((cpz_jump00&$7fff)<<8)&$ff00+(cpz_jump00&$7fff)>>8
00000450                            
00000450                            ; FM2 Data
00000450                            CPZ_FM2:
00000450                            	smpsSetvoice        $04
00000450                          M 	smpsfmvoice	$04
00000450 EF04                     M 	dc.b	$ef,$04
00000452                            
00000452                            CPZ_Loop02:
00000452 8030 80                    	dc.b	nRst, $30, nRst
00000455                            	smpsLoop            $00, $03, CPZ_Loop02
00000455 F7                       M 	dc.b	$f7
00000456 0003                     M 	dc.b	index,loops
00000458 0000                     M 	dc.w	((cpz_loop02&$7fff)<<8)&$ff00+(cpz_loop02&$7fff)>>8
0000045A 9F06 9C24 8006 9D04 8008+  	dc.b	nFs2, $06, nEb2, $24, nRst, $06, nE2, $04, nRst, $08, nE2, $0C
00000466 9E04 8008 9E0C 9F04 8008+  	dc.b	nF2, $04, nRst, $08, nF2, $0C, nFs2, $04, nRst, $08, nFs2, $0C
00000472 9F04 8008 9F0C 9F04 8008+  	dc.b	nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C
0000047E 06AB 9F0C 9F04 8008 9F0C+  	dc.b	$06, nFs3, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04
0000048A 8008 9F0C 069C 129D 0C9E+  	dc.b	nRst, $08, nFs2, $0C, $06, nEb2, $12, nE2, $0C, nF2, nFs2, $04
00000496 8008 9F0C 9F04 8008 9F0C+  	dc.b	nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04
000004A2 8008 9F0C 06AB 9F0C 9D04+  	dc.b	nRst, $08, nFs2, $0C, $06, nFs3, nFs2, $0C, nE2, $04, nRst, $08
000004AE 9D0C 9D04 8008 9D0C 9C04+  	dc.b	nE2, $0C, nE2, $04, nRst, $08, nE2, $0C, nEb2, $04, nRst, $08
000004BA 9C0C 9C04 8008 9C0C        	dc.b	nEb2, $0C, nEb2, $04, nRst, $08, nEb2, $0C
000004C2                            
000004C2                            CPZ_Loop03:
000004C2 9F04 8008 9F0C 9F04 8008+  	dc.b	nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C
000004CE 9F04 8008 9F0C 06AB 9F0C+  	dc.b	nFs2, $04, nRst, $08, nFs2, $0C, $06, nFs3, nFs2, $0C, nFs2, $04
000004DA 8008 9F0C 9F04 8008 9F0C+  	dc.b	nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, $06, nEb2
000004E6 129D 0C9E 9F04 8008 9F0C+  	dc.b	$12, nE2, $0C, nF2, nFs2, $04, nRst, $08, nFs2, $0C, nFs2, $04
000004F2 8008 9F0C 9F04 8008 9F0C+  	dc.b	nRst, $08, nFs2, $0C, nFs2, $04, nRst, $08, nFs2, $0C, $06, nFs3
000004FE 9F0C 9D04 8008 9D0C 9D04+  	dc.b	nFs2, $0C, nE2, $04, nRst, $08, nE2, $0C, nE2, $04, nRst, $08
0000050A 9D0C 9C04 8008 9C0C 9C04+  	dc.b	nE2, $0C, nEb2, $04, nRst, $08, nEb2, $0C, nEb2, $04, nRst, $08
00000516 9C0C                       	dc.b	nEb2, $0C
00000518                            	smpsLoop            $00, $04, CPZ_Loop03
00000518 F7                       M 	dc.b	$f7
00000519 0004                     M 	dc.b	index,loops
0000051B 0000                     M 	dc.w	((cpz_loop03&$7fff)<<8)&$ff00+(cpz_loop03&$7fff)>>8
0000051D 9D18 9E9F 0C80 2480 3080+  	dc.b	nE2, $18, nF2, nFs2, $0C, nRst, $24, nRst, $30, nRst, $24, nE3
00000529 06AB 9D18 9E9F 0C80 2480+  	dc.b	$06, nFs3, nE2, $18, nF2, nFs2, $0C, nRst, $24, nRst, $30, nRst
00000535 18A9 06B5 A8B4 9D18 9E9F+  	dc.b	$18, nE3, $06, nE4, nEb3, nEb4, nE2, $18, nF2, nFs2, $0C, nRst
00000541 2480 3080 18A9 0680 A9AB+  	dc.b	$24, nRst, $30, nRst, $18, nE3, $06, nRst, nE3, nFs3, nE2, $18
0000054D 9E9F 0C80 249F 0C9C 249D+  	dc.b	nF2, nFs2, $0C, nRst, $24, nFs2, $0C, nEb2, $24, nE2, $18, nF2
00000559 9F30 E730 8030 8080 8080+  	dc.b	nFs2, $30, smpsNoAttack, $30, nRst, $30, nRst, nRst, nRst, nRst, nA2, $06
00000565 AEA2 AEA1 ADA0 AC          	dc.b	nA3, nA2, nA3, nAb2, nAb3, nG2, nG3
0000056C                            	smpsJump            CPZ_Loop03
0000056C F6                       M 	dc.b	$f6
0000056D 0000                     M 	dc.w	((cpz_loop03&$7fff)<<8)&$ff00+(cpz_loop03&$7fff)>>8
0000056F                            
0000056F                            ; DAC Data
0000056F                            CPZ_DAC:
0000056F                            	smpsCall            CPZ_Call00
0000056F F8                       M 	dc.b	$f8
00000570 0000                     M 	dc.w	((cpz_call00&$7fff)<<8)&$ff00+(cpz_call00&$7fff)>>8
00000572                            	smpsLoop            $00, $02, CPZ_DAC
00000572 F7                       M 	dc.b	$f7
00000573 0002                     M 	dc.b	index,loops
00000575 0000                     M 	dc.w	((cpz_dac&$7fff)<<8)&$ff00+(cpz_dac&$7fff)>>8
00000577                            
00000577                            CPZ_Loop00:
00000577                            	smpsCall            CPZ_Call00
00000577 F8                       M 	dc.b	$f8
00000578 0000                     M 	dc.w	((cpz_call00&$7fff)<<8)&$ff00+(cpz_call00&$7fff)>>8
0000057A                            	smpsLoop            $00, $03, CPZ_Loop00
0000057A F7                       M 	dc.b	$f7
0000057B 0003                     M 	dc.b	index,loops
0000057D 0000                     M 	dc.w	((cpz_loop00&$7fff)<<8)&$ff00+(cpz_loop00&$7fff)>>8
0000057F                            	smpsCall            CPZ_Call01
0000057F F8                       M 	dc.b	$f8
00000580 0000                     M 	dc.w	((cpz_call01&$7fff)<<8)&$ff00+(cpz_call01&$7fff)>>8
00000582                            
00000582                            CPZ_Loop01:
00000582                            	smpsCall            CPZ_Call00
00000582 F8                       M 	dc.b	$f8
00000583 0000                     M 	dc.w	((cpz_call00&$7fff)<<8)&$ff00+(cpz_call00&$7fff)>>8
00000585                            	smpsLoop            $00, $02, CPZ_Loop01
00000585 F7                       M 	dc.b	$f7
00000586 0002                     M 	dc.b	index,loops
00000588 0000                     M 	dc.w	((cpz_loop01&$7fff)<<8)&$ff00+(cpz_loop01&$7fff)>>8
0000058A                            	smpsCall            CPZ_Call01
0000058A F8                       M 	dc.b	$f8
0000058B 0000                     M 	dc.w	((cpz_call01&$7fff)<<8)&$ff00+(cpz_call01&$7fff)>>8
0000058D                            	smpsJump            CPZ_Loop00
0000058D F6                       M 	dc.b	$f6
0000058E 0000                     M 	dc.w	((cpz_loop00&$7fff)<<8)&$ff00+(cpz_loop00&$7fff)>>8
00000590                            
00000590                            ; PSG3 Data
00000590                            CPZ_PSG3:
00000590                            	smpsPSGform         $E7
00000590 F3E7                     M 	dc.b	$f3,$e7
00000592                            
00000592                            CPZ_Jump02:
00000592 C60C 06C6 C60C 06C6 C60C+  	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG
0000059E C60C 06C6 C60C 06C6 C60C+  	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, $0C, $06, nMaxPSG
000005AA C60C 06C6 C6C6 C6C6        	dc.b	nMaxPSG, $0C, $06, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG, nMaxPSG
000005B2                            	smpsJump            CPZ_Jump02
000005B2 F6                       M 	dc.b	$f6
000005B3 0000                     M 	dc.w	((cpz_jump02&$7fff)<<8)&$ff00+(cpz_jump02&$7fff)>>8
000005B5                            
000005B5                            CPZ_Voices:
000005B5                            ;	Voice $00
000005B5                            ;	$3A
000005B5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000005B5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
000005B5                            	smpsVcAlgorithm     $02
000005B5 =00000002                M vcalgorithm	=	val
000005B5                            	smpsVcFeedback      $07
000005B5 =00000007                M vcfeedback	=	val
000005B5                            	smpsVcUnusedBits    $00
000005B5 =00000000                M vcunusedbits	=	val
000005B5 =00000000                M vcd1r1unk	=	0
000005B5 =00000000                M vcd1r2unk	=	0
000005B5 =00000000                M vcd1r3unk	=	0
000005B5 =00000000                M vcd1r4unk	=	0
000005B5                            	smpsVcDetune        $00, $00, $00, $00
000005B5 =00000000                M vcdt1	=	op1
000005B5 =00000000                M vcdt2	=	op2
000005B5 =00000000                M vcdt3	=	op3
000005B5 =00000000                M vcdt4	=	op4
000005B5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000005B5 =00000001                M vccf1	=	op1
000005B5 =00000001                M vccf2	=	op2
000005B5 =00000007                M vccf3	=	op3
000005B5 =00000001                M vccf4	=	op4
000005B5                            	smpsVcRateScale     $01, $02, $02, $02
000005B5 =00000001                M vcrs1	=	op1
000005B5 =00000002                M vcrs2	=	op2
000005B5 =00000002                M vcrs3	=	op3
000005B5 =00000002                M vcrs4	=	op4
000005B5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000005B5 =00000013                M vcar1	=	op1
000005B5 =0000000D                M vcar2	=	op2
000005B5 =0000000E                M vcar3	=	op3
000005B5 =0000000E                M vcar4	=	op4
000005B5                            	smpsVcAmpMod        $00, $00, $00, $00
000005B5 =00000000                M vcam1	=	op1<<5
000005B5 =00000000                M vcam2	=	op2<<5
000005B5 =00000000                M vcam3	=	op3<<5
000005B5 =00000000                M vcam4	=	op4<<5
000005B5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000005B5 =00000003                M vcd1r1	=	op1
000005B5 =0000000E                M vcd1r2	=	op2
000005B5 =0000000E                M vcd1r3	=	op3
000005B5 =0000000E                M vcd1r4	=	op4
000005B5                            	smpsVcDecayRate2    $00, $00, $00, $00
000005B5 =00000000                M vcd2r1	=	op1
000005B5 =00000000                M vcd2r2	=	op2
000005B5 =00000000                M vcd2r3	=	op3
000005B5 =00000000                M vcd2r4	=	op4
000005B5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000005B5 =00000000                M vcdl1	=	op1
000005B5 =00000001                M vcdl2	=	op2
000005B5 =0000000F                M vcdl3	=	op3
000005B5 =00000001                M vcdl4	=	op4
000005B5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005B5 =0000000F                M vcrr1	=	op1
000005B5 =0000000F                M vcrr2	=	op2
000005B5 =0000000F                M vcrr3	=	op3
000005B5 =0000000F                M vcrr4	=	op4
000005B5                            	smpsVcTotalLevel    $00, $27, $28, $17
000005B5 =00000000                M vctl1	=	op1
000005B5 =00000027                M vctl2	=	op2
000005B5 =00000028                M vctl3	=	op3
000005B5 =00000017                M vctl4	=	op4
000005B5 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005B6 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000005B6 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000005B6 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000005B6 =00000080                M vctlmask1	=	$80
000005B6 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005BA 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005BE 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005C2 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005C6 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005CA 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005CE                            
000005CE                            ;	Voice $01
000005CE                            ;	$3C
000005CE                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000005CE                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $88, $16, $88
000005CE                            	smpsVcAlgorithm     $04
000005CE =00000004                M vcalgorithm	=	val
000005CE                            	smpsVcFeedback      $07
000005CE =00000007                M vcfeedback	=	val
000005CE                            	smpsVcUnusedBits    $00
000005CE =00000000                M vcunusedbits	=	val
000005CE =00000000                M vcd1r1unk	=	0
000005CE =00000000                M vcd1r2unk	=	0
000005CE =00000000                M vcd1r3unk	=	0
000005CE =00000000                M vcd1r4unk	=	0
000005CE                            	smpsVcDetune        $03, $05, $05, $03
000005CE =00000003                M vcdt1	=	op1
000005CE =00000005                M vcdt2	=	op2
000005CE =00000005                M vcdt3	=	op3
000005CE =00000003                M vcdt4	=	op4
000005CE                            	smpsVcCoarseFreq    $00, $00, $02, $01
000005CE =00000000                M vccf1	=	op1
000005CE =00000000                M vccf2	=	op2
000005CE =00000002                M vccf3	=	op3
000005CE =00000001                M vccf4	=	op4
000005CE                            	smpsVcRateScale     $01, $01, $01, $01
000005CE =00000001                M vcrs1	=	op1
000005CE =00000001                M vcrs2	=	op2
000005CE =00000001                M vcrs3	=	op3
000005CE =00000001                M vcrs4	=	op4
000005CE                            	smpsVcAttackRate    $13, $12, $13, $12
000005CE =00000013                M vcar1	=	op1
000005CE =00000012                M vcar2	=	op2
000005CE =00000013                M vcar3	=	op3
000005CE =00000012                M vcar4	=	op4
000005CE                            	smpsVcAmpMod        $00, $00, $00, $00
000005CE =00000000                M vcam1	=	op1<<5
000005CE =00000000                M vcam2	=	op2<<5
000005CE =00000000                M vcam3	=	op3<<5
000005CE =00000000                M vcam4	=	op4<<5
000005CE                            	smpsVcDecayRate1    $00, $08, $00, $08
000005CE =00000000                M vcd1r1	=	op1
000005CE =00000008                M vcd1r2	=	op2
000005CE =00000000                M vcd1r3	=	op3
000005CE =00000008                M vcd1r4	=	op4
000005CE                            	smpsVcDecayRate2    $00, $04, $00, $04
000005CE =00000000                M vcd2r1	=	op1
000005CE =00000004                M vcd2r2	=	op2
000005CE =00000000                M vcd2r3	=	op3
000005CE =00000004                M vcd2r4	=	op4
000005CE                            	smpsVcDecayLevel    $00, $01, $00, $01
000005CE =00000000                M vcdl1	=	op1
000005CE =00000001                M vcdl2	=	op2
000005CE =00000000                M vcdl3	=	op3
000005CE =00000001                M vcdl4	=	op4
000005CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005CE =0000000F                M vcrr1	=	op1
000005CE =0000000F                M vcrr2	=	op2
000005CE =0000000F                M vcrr3	=	op3
000005CE =0000000F                M vcrr4	=	op4
000005CE                            	smpsVcTotalLevel    $08, $16, $08, $1A
000005CE =00000008                M vctl1	=	op1
000005CE =00000016                M vctl2	=	op2
000005CE =00000008                M vctl3	=	op3
000005CE =0000001A                M vctl4	=	op4
000005CE 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005CF =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000005CF =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000005CF =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000005CF =00000080                M vctlmask1	=	$80
000005CF 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005D3 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005D7 0808 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005DB 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005DF 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005E3 1A16 8888                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005E7                            
000005E7                            ;	Voice $02
000005E7                            ;	$3C
000005E7                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000005E7                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1C, $84, $14, $80
000005E7                            	smpsVcAlgorithm     $04
000005E7 =00000004                M vcalgorithm	=	val
000005E7                            	smpsVcFeedback      $07
000005E7 =00000007                M vcfeedback	=	val
000005E7                            	smpsVcUnusedBits    $00
000005E7 =00000000                M vcunusedbits	=	val
000005E7 =00000000                M vcd1r1unk	=	0
000005E7 =00000000                M vcd1r2unk	=	0
000005E7 =00000000                M vcd1r3unk	=	0
000005E7 =00000000                M vcd1r4unk	=	0
000005E7                            	smpsVcDetune        $03, $05, $05, $03
000005E7 =00000003                M vcdt1	=	op1
000005E7 =00000005                M vcdt2	=	op2
000005E7 =00000005                M vcdt3	=	op3
000005E7 =00000003                M vcdt4	=	op4
000005E7                            	smpsVcCoarseFreq    $00, $00, $02, $01
000005E7 =00000000                M vccf1	=	op1
000005E7 =00000000                M vccf2	=	op2
000005E7 =00000002                M vccf3	=	op3
000005E7 =00000001                M vccf4	=	op4
000005E7                            	smpsVcRateScale     $01, $01, $01, $01
000005E7 =00000001                M vcrs1	=	op1
000005E7 =00000001                M vcrs2	=	op2
000005E7 =00000001                M vcrs3	=	op3
000005E7 =00000001                M vcrs4	=	op4
000005E7                            	smpsVcAttackRate    $13, $12, $13, $12
000005E7 =00000013                M vcar1	=	op1
000005E7 =00000012                M vcar2	=	op2
000005E7 =00000013                M vcar3	=	op3
000005E7 =00000012                M vcar4	=	op4
000005E7                            	smpsVcAmpMod        $00, $00, $00, $00
000005E7 =00000000                M vcam1	=	op1<<5
000005E7 =00000000                M vcam2	=	op2<<5
000005E7 =00000000                M vcam3	=	op3<<5
000005E7 =00000000                M vcam4	=	op4<<5
000005E7                            	smpsVcDecayRate1    $00, $08, $00, $08
000005E7 =00000000                M vcd1r1	=	op1
000005E7 =00000008                M vcd1r2	=	op2
000005E7 =00000000                M vcd1r3	=	op3
000005E7 =00000008                M vcd1r4	=	op4
000005E7                            	smpsVcDecayRate2    $00, $04, $00, $04
000005E7 =00000000                M vcd2r1	=	op1
000005E7 =00000004                M vcd2r2	=	op2
000005E7 =00000000                M vcd2r3	=	op3
000005E7 =00000004                M vcd2r4	=	op4
000005E7                            	smpsVcDecayLevel    $00, $01, $00, $01
000005E7 =00000000                M vcdl1	=	op1
000005E7 =00000001                M vcdl2	=	op2
000005E7 =00000000                M vcdl3	=	op3
000005E7 =00000001                M vcdl4	=	op4
000005E7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005E7 =0000000F                M vcrr1	=	op1
000005E7 =0000000F                M vcrr2	=	op2
000005E7 =0000000F                M vcrr3	=	op3
000005E7 =0000000F                M vcrr4	=	op4
000005E7                            	smpsVcTotalLevel    $00, $14, $04, $1C
000005E7 =00000000                M vctl1	=	op1
000005E7 =00000014                M vctl2	=	op2
000005E7 =00000004                M vctl3	=	op3
000005E7 =0000001C                M vctl4	=	op4
000005E7 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005E8 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000005E8 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000005E8 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000005E8 =00000080                M vctlmask1	=	$80
000005E8 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005EC 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005F0 0808 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000005F4 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005F8 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005FC 1C14 8480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000600                            
00000600                            ;	Voice $03
00000600                            ;	$3B
00000600                            ;	$0F, $06, $01, $02, 	$DF, $1F, $1F, $DF, 	$0C, $00, $0A, $03
00000600                            ;	$0F, $00, $00, $01, 	$F3, $05, $55, $5C, 	$22, $20, $22, $80
00000600                            	smpsVcAlgorithm     $03
00000600 =00000003                M vcalgorithm	=	val
00000600                            	smpsVcFeedback      $07
00000600 =00000007                M vcfeedback	=	val
00000600                            	smpsVcUnusedBits    $00
00000600 =00000000                M vcunusedbits	=	val
00000600 =00000000                M vcd1r1unk	=	0
00000600 =00000000                M vcd1r2unk	=	0
00000600 =00000000                M vcd1r3unk	=	0
00000600 =00000000                M vcd1r4unk	=	0
00000600                            	smpsVcDetune        $00, $00, $00, $00
00000600 =00000000                M vcdt1	=	op1
00000600 =00000000                M vcdt2	=	op2
00000600 =00000000                M vcdt3	=	op3
00000600 =00000000                M vcdt4	=	op4
00000600                            	smpsVcCoarseFreq    $02, $01, $06, $0F
00000600 =00000002                M vccf1	=	op1
00000600 =00000001                M vccf2	=	op2
00000600 =00000006                M vccf3	=	op3
00000600 =0000000F                M vccf4	=	op4
00000600                            	smpsVcRateScale     $03, $00, $00, $03
00000600 =00000003                M vcrs1	=	op1
00000600 =00000000                M vcrs2	=	op2
00000600 =00000000                M vcrs3	=	op3
00000600 =00000003                M vcrs4	=	op4
00000600                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000600 =0000001F                M vcar1	=	op1
00000600 =0000001F                M vcar2	=	op2
00000600 =0000001F                M vcar3	=	op3
00000600 =0000001F                M vcar4	=	op4
00000600                            	smpsVcAmpMod        $00, $00, $00, $00
00000600 =00000000                M vcam1	=	op1<<5
00000600 =00000000                M vcam2	=	op2<<5
00000600 =00000000                M vcam3	=	op3<<5
00000600 =00000000                M vcam4	=	op4<<5
00000600                            	smpsVcDecayRate1    $03, $0A, $00, $0C
00000600 =00000003                M vcd1r1	=	op1
00000600 =0000000A                M vcd1r2	=	op2
00000600 =00000000                M vcd1r3	=	op3
00000600 =0000000C                M vcd1r4	=	op4
00000600                            	smpsVcDecayRate2    $01, $00, $00, $0F
00000600 =00000001                M vcd2r1	=	op1
00000600 =00000000                M vcd2r2	=	op2
00000600 =00000000                M vcd2r3	=	op3
00000600 =0000000F                M vcd2r4	=	op4
00000600                            	smpsVcDecayLevel    $05, $05, $00, $0F
00000600 =00000005                M vcdl1	=	op1
00000600 =00000005                M vcdl2	=	op2
00000600 =00000000                M vcdl3	=	op3
00000600 =0000000F                M vcdl4	=	op4
00000600                            	smpsVcReleaseRate   $0C, $05, $05, $03
00000600 =0000000C                M vcrr1	=	op1
00000600 =00000005                M vcrr2	=	op2
00000600 =00000005                M vcrr3	=	op3
00000600 =00000003                M vcrr4	=	op4
00000600                            	smpsVcTotalLevel    $00, $22, $20, $22
00000600 =00000000                M vctl1	=	op1
00000600 =00000022                M vctl2	=	op2
00000600 =00000020                M vctl3	=	op3
00000600 =00000022                M vctl4	=	op4
00000600 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000601 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000601 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000601 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000601 =00000080                M vctlmask1	=	$80
00000601 0F01 0602                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000605 DF1F 1FDF                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000609 0C0A 0003                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000060D 0F00 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000611 F355 055C                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000615 2222 2080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000619                            
00000619                            ;	Voice $04
00000619                            ;	$20
00000619                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
00000619                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$14, $37, $0F, $80
00000619                            	smpsVcAlgorithm     $00
00000619 =00000000                M vcalgorithm	=	val
00000619                            	smpsVcFeedback      $04
00000619 =00000004                M vcfeedback	=	val
00000619                            	smpsVcUnusedBits    $00
00000619 =00000000                M vcunusedbits	=	val
00000619 =00000000                M vcd1r1unk	=	0
00000619 =00000000                M vcd1r2unk	=	0
00000619 =00000000                M vcd1r3unk	=	0
00000619 =00000000                M vcd1r4unk	=	0
00000619                            	smpsVcDetune        $03, $03, $03, $03
00000619 =00000003                M vcdt1	=	op1
00000619 =00000003                M vcdt2	=	op2
00000619 =00000003                M vcdt3	=	op3
00000619 =00000003                M vcdt4	=	op4
00000619                            	smpsVcCoarseFreq    $01, $00, $05, $06
00000619 =00000001                M vccf1	=	op1
00000619 =00000000                M vccf2	=	op2
00000619 =00000005                M vccf3	=	op3
00000619 =00000006                M vccf4	=	op4
00000619                            	smpsVcRateScale     $02, $02, $03, $03
00000619 =00000002                M vcrs1	=	op1
00000619 =00000002                M vcrs2	=	op2
00000619 =00000003                M vcrs3	=	op3
00000619 =00000003                M vcrs4	=	op4
00000619                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000619 =0000001F                M vcar1	=	op1
00000619 =0000001F                M vcar2	=	op2
00000619 =0000001F                M vcar3	=	op3
00000619 =0000001F                M vcar4	=	op4
00000619                            	smpsVcAmpMod        $00, $00, $00, $00
00000619 =00000000                M vcam1	=	op1<<5
00000619 =00000000                M vcam2	=	op2<<5
00000619 =00000000                M vcam3	=	op3<<5
00000619 =00000000                M vcam4	=	op4<<5
00000619                            	smpsVcDecayRate1    $06, $09, $06, $07
00000619 =00000006                M vcd1r1	=	op1
00000619 =00000009                M vcd1r2	=	op2
00000619 =00000006                M vcd1r3	=	op3
00000619 =00000007                M vcd1r4	=	op4
00000619                            	smpsVcDecayRate2    $08, $06, $06, $07
00000619 =00000008                M vcd2r1	=	op1
00000619 =00000006                M vcd2r2	=	op2
00000619 =00000006                M vcd2r3	=	op3
00000619 =00000007                M vcd2r4	=	op4
00000619                            	smpsVcDecayLevel    $0F, $01, $01, $02
00000619 =0000000F                M vcdl1	=	op1
00000619 =00000001                M vcdl2	=	op2
00000619 =00000001                M vcdl3	=	op3
00000619 =00000002                M vcdl4	=	op4
00000619                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000619 =0000000F                M vcrr1	=	op1
00000619 =0000000F                M vcrr2	=	op2
00000619 =0000000F                M vcrr3	=	op3
00000619 =0000000F                M vcrr4	=	op4
00000619                            	smpsVcTotalLevel    $00, $0F, $37, $14
00000619 =00000000                M vctl1	=	op1
00000619 =0000000F                M vctl2	=	op2
00000619 =00000037                M vctl3	=	op3
00000619 =00000014                M vctl4	=	op4
00000619 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000061A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000061A =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000061A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000061A =00000080                M vctlmask1	=	$80
0000061A 3630 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000061E DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000622 0709 0606                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000626 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000062A 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000062E 140F 3780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000632                            
00000632                            ;	Voice $05
00000632                            ;	$3A
00000632                            ;	$00, $07, $00, $00, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00000632                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $32, $27, $80
00000632                            	smpsVcAlgorithm     $02
00000632 =00000002                M vcalgorithm	=	val
00000632                            	smpsVcFeedback      $07
00000632 =00000007                M vcfeedback	=	val
00000632                            	smpsVcUnusedBits    $00
00000632 =00000000                M vcunusedbits	=	val
00000632 =00000000                M vcd1r1unk	=	0
00000632 =00000000                M vcd1r2unk	=	0
00000632 =00000000                M vcd1r3unk	=	0
00000632 =00000000                M vcd1r4unk	=	0
00000632                            	smpsVcDetune        $00, $00, $00, $00
00000632 =00000000                M vcdt1	=	op1
00000632 =00000000                M vcdt2	=	op2
00000632 =00000000                M vcdt3	=	op3
00000632 =00000000                M vcdt4	=	op4
00000632                            	smpsVcCoarseFreq    $00, $00, $07, $00
00000632 =00000000                M vccf1	=	op1
00000632 =00000000                M vccf2	=	op2
00000632 =00000007                M vccf3	=	op3
00000632 =00000000                M vccf4	=	op4
00000632                            	smpsVcRateScale     $01, $02, $02, $02
00000632 =00000001                M vcrs1	=	op1
00000632 =00000002                M vcrs2	=	op2
00000632 =00000002                M vcrs3	=	op3
00000632 =00000002                M vcrs4	=	op4
00000632                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00000632 =00000013                M vcar1	=	op1
00000632 =0000000D                M vcar2	=	op2
00000632 =0000000E                M vcar3	=	op3
00000632 =0000000E                M vcar4	=	op4
00000632                            	smpsVcAmpMod        $00, $00, $00, $00
00000632 =00000000                M vcam1	=	op1<<5
00000632 =00000000                M vcam2	=	op2<<5
00000632 =00000000                M vcam3	=	op3<<5
00000632 =00000000                M vcam4	=	op4<<5
00000632                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00000632 =00000003                M vcd1r1	=	op1
00000632 =0000000E                M vcd1r2	=	op2
00000632 =0000000E                M vcd1r3	=	op3
00000632 =0000000E                M vcd1r4	=	op4
00000632                            	smpsVcDecayRate2    $00, $00, $00, $00
00000632 =00000000                M vcd2r1	=	op1
00000632 =00000000                M vcd2r2	=	op2
00000632 =00000000                M vcd2r3	=	op3
00000632 =00000000                M vcd2r4	=	op4
00000632                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000632 =00000000                M vcdl1	=	op1
00000632 =00000001                M vcdl2	=	op2
00000632 =0000000F                M vcdl3	=	op3
00000632 =00000001                M vcdl4	=	op4
00000632                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000632 =0000000F                M vcrr1	=	op1
00000632 =0000000F                M vcrr2	=	op2
00000632 =0000000F                M vcrr3	=	op3
00000632 =0000000F                M vcrr4	=	op4
00000632                            	smpsVcTotalLevel    $00, $27, $32, $18
00000632 =00000000                M vctl1	=	op1
00000632 =00000027                M vctl2	=	op2
00000632 =00000032                M vctl3	=	op3
00000632 =00000018                M vctl4	=	op4
00000632 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000633 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000633 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000633 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000633 =00000080                M vctlmask1	=	$80
00000633 0000 0700                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000637 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000063B 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000063F 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000643 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000647 1827 3280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000064B                            
0000064B                          M 	pops
00000000                            		inc_music	Boss
00000000                          M 	pushs
00000000                          M music_798:	section	org($1380),file("sound/music/compressed/boss.unc"),over(header)
00000000                          M 	include	"sound/music/boss.asm"
00000000                            Boss_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000001                M sourcesmps2asm	=	sourcesmps2asmver
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     Boss_Voices
00000000 0000                     M 	dc.w	((boss_voices&$7fff)<<8)&$ff00+(boss_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $E3
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$e3
00000005 E3                       M 	dc.b	$e3
00000006                            
00000006                            	smpsHeaderDAC       Boss_DAC
00000006                          M 	checkedchannelpointer	boss_dac
00000006 0000                     M 	dc.w	((boss_dac&$7fff)<<8)&$ff00+(boss_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Boss_FM1,	$0C, $0A
0000000A                          M 	checkedchannelpointer	boss_fm1
0000000A 0000                     M 	dc.w	((boss_fm1&$7fff)<<8)&$ff00+(boss_fm1&$7fff)>>8
0000000C 0C0A                     M 	dc.b	$0c,$0a
0000000E                            	smpsHeaderFM        Boss_FM2,	$0C, $06
0000000E                          M 	checkedchannelpointer	boss_fm2
0000000E 0000                     M 	dc.w	((boss_fm2&$7fff)<<8)&$ff00+(boss_fm2&$7fff)>>8
00000010 0C06                     M 	dc.b	$0c,$06
00000012                            	smpsHeaderFM        Boss_FM3,	$0C, $08
00000012                          M 	checkedchannelpointer	boss_fm3
00000012 0000                     M 	dc.w	((boss_fm3&$7fff)<<8)&$ff00+(boss_fm3&$7fff)>>8
00000014 0C08                     M 	dc.b	$0c,$08
00000016                            	smpsHeaderFM        Boss_FM4,	$00, $0F
00000016                          M 	checkedchannelpointer	boss_fm4
00000016 0000                     M 	dc.w	((boss_fm4&$7fff)<<8)&$ff00+(boss_fm4&$7fff)>>8
00000018 000F                     M 	dc.b	$00,$0f
0000001A                            	smpsHeaderFM        Boss_FM5,	$00, $0F
0000001A                          M 	checkedchannelpointer	boss_fm5
0000001A 0000                     M 	dc.w	((boss_fm5&$7fff)<<8)&$ff00+(boss_fm5&$7fff)>>8
0000001C 000F                     M 	dc.b	$00,$0f
0000001E                            	smpsHeaderPSG       Boss_PSG1,	$E8, $04, $00, fTone_0C
0000001E                          M 	checkedchannelpointer	boss_psg1
0000001E 0000                     M 	dc.w	((boss_psg1&$7fff)<<8)&$ff00+(boss_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$e8
00000020 E8                       M 	dc.b	$e8
00000021 04                       M 	dc.b	$04
00000022 00                       M 	dc.b	$00
00000023 0C                       M 	dc.b	ftone_0c
00000024                            	smpsHeaderPSG       Boss_PSG2,	$E8, $06, $00, fTone_0C
00000024                          M 	checkedchannelpointer	boss_psg2
00000024 0000                     M 	dc.w	((boss_psg2&$7fff)<<8)&$ff00+(boss_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$e8
00000026 E8                       M 	dc.b	$e8
00000027 06                       M 	dc.b	$06
00000028 00                       M 	dc.b	$00
00000029 0C                       M 	dc.b	ftone_0c
0000002A                            	smpsHeaderPSG       Boss_PSG3,	$FE, $03, $00, fTone_04
0000002A                          M 	checkedchannelpointer	boss_psg3
0000002A 0000                     M 	dc.w	((boss_psg3&$7fff)<<8)&$ff00+(boss_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$fe
0000002C FE                       M 	dc.b	$fe
0000002D 03                       M 	dc.b	$03
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM1 Data
00000030                            Boss_FM1:
00000030                            	smpsSetvoice        $00
00000030                          M 	smpsfmvoice	$00
00000030 EF00                     M 	dc.b	$ef,$00
00000032                            
00000032                            Boss_Jump01:
00000032                            	smpsNoteFill        $08
00000032 E808                     M 	dc.b	$e8,$08
00000034                            	smpsCall            Boss_Call02
00000034 F8                       M 	dc.b	$f8
00000035 0000                     M 	dc.w	((boss_call02&$7fff)<<8)&$ff00+(boss_call02&$7fff)>>8
00000037                            	smpsNoteFill        $0A
00000037 E80A                     M 	dc.b	$e8,$0a
00000039                            
00000039                            Boss_Loop0B:
00000039 910C 9D                    	dc.b	nE1, $0C, nE2
0000003C                            	smpsLoop            $00, $04, Boss_Loop0B
0000003C F7                       M 	dc.b	$f7
0000003D 0004                     M 	dc.b	index,loops
0000003F 0000                     M 	dc.w	((boss_loop0b&$7fff)<<8)&$ff00+(boss_loop0b&$7fff)>>8
00000041                            	smpsNoteFill        $08
00000041 E808                     M 	dc.b	$e8,$08
00000043                            	smpsCall            Boss_Call02
00000043 F8                       M 	dc.b	$f8
00000044 0000                     M 	dc.w	((boss_call02&$7fff)<<8)&$ff00+(boss_call02&$7fff)>>8
00000046                            	smpsNoteFill        $0A
00000046 E80A                     M 	dc.b	$e8,$0a
00000048 910C 9D93 9F94 A095 A1     	dc.b	nE1, $0C, nE2, nFs1, nFs2, nG1, nG2, nAb1, nAb2
00000051                            
00000051                            Boss_Loop0C:
00000051                            	smpsCall            Boss_Call03
00000051 F8                       M 	dc.b	$f8
00000052 0000                     M 	dc.w	((boss_call03&$7fff)<<8)&$ff00+(boss_call03&$7fff)>>8
00000054 940C A006 A094 0CA0 06A0   	dc.b	nG1, $0C, nG2, $06, nG2, nG1, $0C, nG2, $06, nG2
0000005E                            	smpsCall            Boss_Call03
0000005E F8                       M 	dc.b	$f8
0000005F 0000                     M 	dc.w	((boss_call03&$7fff)<<8)&$ff00+(boss_call03&$7fff)>>8
00000061 910C 9D06 9D91 0C9D 069D   	dc.b	nE1, $0C, nE2, $06, nE2, nE1, $0C, nE2, $06, nE2
0000006B                            	smpsLoop            $00, $04, Boss_Loop0C
0000006B F7                       M 	dc.b	$f7
0000006C 0004                     M 	dc.b	index,loops
0000006E 0000                     M 	dc.w	((boss_loop0c&$7fff)<<8)&$ff00+(boss_loop0c&$7fff)>>8
00000070                            	smpsJump            Boss_Jump01
00000070 F6                       M 	dc.b	$f6
00000071 0000                     M 	dc.w	((boss_jump01&$7fff)<<8)&$ff00+(boss_jump01&$7fff)>>8
00000073                            
00000073                            Boss_Call03:
00000073 960C A206 A296 0CA2 06A2+  	dc.b	nA1, $0C, nA2, $06, nA2, nA1, $0C, nA2, $06, nA2, nA1, $0C
0000007F A206 A296 0CA2 06A2 940C+  	dc.b	nA2, $06, nA2, nA1, $0C, nA2, $06, nA2, nG1, $0C, nG2, $06
0000008B A094 0CA0 06A0             	dc.b	nG2, nG1, $0C, nG2, $06, nG2
00000091                            	smpsReturn
00000091 E3                       M 	dc.b	$e3
00000092                            
00000092                            Boss_Call02:
00000092 960C A2A2 96A2 A296 A2     	dc.b	nA1, $0C, nA2, nA2, nA1, nA2, nA2, nA1, nA2
0000009B                            	smpsReturn
0000009B E3                       M 	dc.b	$e3
0000009C                            
0000009C                            ; PSG1 Data
0000009C                            Boss_PSG1:
0000009C                            ; PSG2 Data
0000009C                            Boss_PSG2:
0000009C                            	smpsStop
0000009C F2                       M 	dc.b	$f2
0000009D                            
0000009D                            ; FM2 Data
0000009D                            Boss_FM2:
0000009D                            	smpsSetvoice        $02
0000009D                          M 	smpsfmvoice	$02
0000009D EF02                     M 	dc.b	$ef,$02
0000009F                            
0000009F                            Boss_Loop09:
0000009F                            	smpsNoteFill        $08
0000009F E808                     M 	dc.b	$e8,$08
000000A1 AE0C A9A9 AEA9 A9AE A9     	dc.b	nA3, $0C, nE3, nE3, nA3, nE3, nE3, nA3, nE3
000000AA                            	smpsNoteFill        $17
000000AA E817                     M 	dc.b	$e8,$17
000000AC B018 B0B0 B0               	dc.b	nB3, $18, nB3, nB3, nB3
000000B1                            	smpsLoop            $00, $02, Boss_Loop09
000000B1 F7                       M 	dc.b	$f7
000000B2 0002                     M 	dc.b	index,loops
000000B4 0000                     M 	dc.w	((boss_loop09&$7fff)<<8)&$ff00+(boss_loop09&$7fff)>>8
000000B6                            	smpsAlterPitch      $F4
000000B6                          M 	smpschangetransposition	$f4
000000B6 E9F4                     M 	dc.b	$e9,$f4
000000B8                            	smpsSetvoice        $03
000000B8                          M 	smpsfmvoice	$03
000000B8 EF03                     M 	dc.b	$ef,$03
000000BA                            
000000BA                            Boss_Loop0A:
000000BA                            	smpsCall            Boss_Call01
000000BA F8                       M 	dc.b	$f8
000000BB 0000                     M 	dc.w	((boss_call01&$7fff)<<8)&$ff00+(boss_call01&$7fff)>>8
000000BD                            	smpsLoop            $00, $04, Boss_Loop0A
000000BD F7                       M 	dc.b	$f7
000000BE 0004                     M 	dc.b	index,loops
000000C0 0000                     M 	dc.w	((boss_loop0a&$7fff)<<8)&$ff00+(boss_loop0a&$7fff)>>8
000000C2                            	smpsAlterPitch      $0C
000000C2                          M 	smpschangetransposition	$0c
000000C2 E90C                     M 	dc.b	$e9,$0c
000000C4                            	smpsJump            Boss_FM2
000000C4 F6                       M 	dc.b	$f6
000000C5 0000                     M 	dc.w	((boss_fm2&$7fff)<<8)&$ff00+(boss_fm2&$7fff)>>8
000000C7                            
000000C7                            Boss_Call01:
000000C7 AE06 80B0 80B1 18B3 B1B0+  	dc.b	nA3, $06, nRst, nB3, nRst, nC4, $18, nD4, nC4, nB3, $06, nRst
000000D3 B180 B080 AC18 A906 80AC+  	dc.b	nC4, nRst, nB3, nRst, nG3, $18, nE3, $06, nRst, nG3, $18, nA3
000000DF 0680 B080 B118 B3B1 B006+  	dc.b	$06, nRst, nB3, nRst, nC4, $18, nD4, nC4, nB3, $06, nRst, nC4
000000EB 80B3 80B4 80B5 0C80 24     	dc.b	nRst, nD4, nRst, nEb4, nRst, nE4, $0C, nRst, $24
000000F4                            	smpsReturn
000000F4 E3                       M 	dc.b	$e3
000000F5                            
000000F5                            ; FM3 Data
000000F5                            Boss_FM3:
000000F5                            	smpsSetvoice        $02
000000F5                          M 	smpsfmvoice	$02
000000F5 EF02                     M 	dc.b	$ef,$02
000000F7                            
000000F7                            Boss_Loop06:
000000F7                            	smpsNoteFill        $08
000000F7 E808                     M 	dc.b	$e8,$08
000000F9 B10C AEAE B1AE AEB1 AE     	dc.b	nC4, $0C, nA3, nA3, nC4, nA3, nA3, nC4, nA3
00000102                            	smpsNoteFill        $17
00000102 E817                     M 	dc.b	$e8,$17
00000104 AD18 ADAD AD               	dc.b	nAb3, $18, nAb3, nAb3, nAb3
00000109                            	smpsLoop            $00, $02, Boss_Loop06
00000109 F7                       M 	dc.b	$f7
0000010A 0002                     M 	dc.b	index,loops
0000010C 0000                     M 	dc.w	((boss_loop06&$7fff)<<8)&$ff00+(boss_loop06&$7fff)>>8
0000010E                            
0000010E                            Boss_Loop07:
0000010E 8030                       	dc.b	nRst, $30
00000110                            	smpsLoop            $00, $10, Boss_Loop07
00000110 F7                       M 	dc.b	$f7
00000111 0010                     M 	dc.b	index,loops
00000113 0000                     M 	dc.w	((boss_loop07&$7fff)<<8)&$ff00+(boss_loop07&$7fff)>>8
00000115                            	smpsAlterNote       $03
00000115                          M 	smpsdetune	$03
00000115 E103                     M 	dc.b	$e1,$03
00000117                            	smpsAlterVol        $FC
00000117 E6FC                     M 	dc.b	$e6,$fc
00000119                            
00000119                            Boss_Loop08:
00000119                            	smpsCall            Boss_Call01
00000119 F8                       M 	dc.b	$f8
0000011A 0000                     M 	dc.w	((boss_call01&$7fff)<<8)&$ff00+(boss_call01&$7fff)>>8
0000011C                            	smpsLoop            $00, $02, Boss_Loop08
0000011C F7                       M 	dc.b	$f7
0000011D 0002                     M 	dc.b	index,loops
0000011F 0000                     M 	dc.w	((boss_loop08&$7fff)<<8)&$ff00+(boss_loop08&$7fff)>>8
00000121                            	smpsAlterNote       $00
00000121                          M 	smpsdetune	$00
00000121 E100                     M 	dc.b	$e1,$00
00000123                            	smpsAlterVol        $04
00000123 E604                     M 	dc.b	$e6,$04
00000125                            	smpsJump            Boss_FM3
00000125 F6                       M 	dc.b	$f6
00000126 0000                     M 	dc.w	((boss_fm3&$7fff)<<8)&$ff00+(boss_fm3&$7fff)>>8
00000128                            
00000128                            ; FM4 Data
00000128                            Boss_FM4:
00000128                            	smpsPan             panLeft, $00
00000128 E080                     M 	dc.b	$e0,direction+amsfms
0000012A                            	smpsAlterNote       $02
0000012A                          M 	smpsdetune	$02
0000012A E102                     M 	dc.b	$e1,$02
0000012C                            	smpsModSet          $0C, $01, $04, $04
0000012C F0                       M 	dc.b	$f0
0000012D 0C01 0404                M 	dc.b	$0c,$01,$04,$04
00000131                            	smpsJump            Boss_Jump00
00000131 F6                       M 	dc.b	$f6
00000132 0000                     M 	dc.w	((boss_jump00&$7fff)<<8)&$ff00+(boss_jump00&$7fff)>>8
00000134                            
00000134                            ; FM5 Data
00000134                            Boss_FM5:
00000134                            	smpsPan             panRight, $00
00000134 E040                     M 	dc.b	$e0,direction+amsfms
00000136                            	smpsModSet          $0C, $01, $FC, $04
00000136 F0                       M 	dc.b	$f0
00000137 0C01 FC04                M 	dc.b	$0c,$01,$fc,$04
0000013B                            
0000013B                            Boss_Jump00:
0000013B                            	smpsModOff
0000013B F4                       M 	dc.b	$f4
0000013C                            	smpsSetvoice        $01
0000013C                          M 	smpsfmvoice	$01
0000013C EF01                     M 	dc.b	$ef,$01
0000013E 8030 8024 BF06 C1C2 0CC2+  	dc.b	nRst, $30, nRst, $24, nD5, $06, nE5, nF5, $0C, nF5, nE5, nE5
0000014A BFBF C180 8030 8024 BF06+  	dc.b	nD5, nD5, nE5, nRst, nRst, $30, nRst, $24, nD5, $06, nE5, nF5
00000156 0CC1 C0C1 C518 C1          	dc.b	$0C, nE5, nEb5, nE5, nAb5, $18, nE5
0000015D                            
0000015D                            Boss_Loop05:
0000015D 8030 80                    	dc.b	nRst, $30, nRst
00000160                            	smpsLoop            $00, $04, Boss_Loop05
00000160 F7                       M 	dc.b	$f7
00000161 0004                     M 	dc.b	index,loops
00000163 0000                     M 	dc.w	((boss_loop05&$7fff)<<8)&$ff00+(boss_loop05&$7fff)>>8
00000165                            	smpsModOn
00000165 F1                       M 	dc.b	$f1
00000166                            	smpsAlterVol        $02
00000166 E602                     M 	dc.b	$e6,$02
00000168                            	smpsCall            Boss_Call00
00000168 F8                       M 	dc.b	$f8
00000169 0000                     M 	dc.w	((boss_call00&$7fff)<<8)&$ff00+(boss_call00&$7fff)>>8
0000016B AC                         	dc.b	nG3
0000016C                            	smpsCall            Boss_Call00
0000016C F8                       M 	dc.b	$f8
0000016D 0000                     M 	dc.w	((boss_call00&$7fff)<<8)&$ff00+(boss_call00&$7fff)>>8
0000016F ADBD E718 BF0C BDBC 30B8+  	dc.b	nAb3, nC5, smpsNoAttack, $18, nD5, $0C, nC5, nB4, $30, nG4, nC5, smpsNoAttack
0000017B 18BF 0CBD BC30 B9          	dc.b	$18, nD5, $0C, nC5, nB4, $30, nAb4
00000182                            	smpsAlterVol        $F5
00000182 E6F5                     M 	dc.b	$e6,$f5
00000184                            	smpsSetvoice        $02
00000184                          M 	smpsfmvoice	$02
00000184 EF02                     M 	dc.b	$ef,$02
00000186 BD06 80BF 80C1 18C2 C1BF+  	dc.b	nC5, $06, nRst, nD5, nRst, nE5, $18, nF5, nE5, nD5, $06, nRst
00000192 C180 BF80 BC18 B806 80BC+  	dc.b	nE5, nRst, nD5, nRst, nB4, $18, nG4, $06, nRst, nB4, $18, nC5
0000019E 0680 BF80 C118 C2C1 BF06+  	dc.b	$06, nRst, nD5, nRst, nE5, $18, nF5, nE5, nD5, $06, nRst, nE5
000001AA 80C2 80C3 80C5 0C80 24     	dc.b	nRst, nF5, nRst, nFs5, nRst, nAb5, $0C, nRst, $24
000001B3                            	smpsAlterVol        $09
000001B3 E609                     M 	dc.b	$e6,$09
000001B5                            	smpsJump            Boss_Jump00
000001B5 F6                       M 	dc.b	$f6
000001B6 0000                     M 	dc.w	((boss_jump00&$7fff)<<8)&$ff00+(boss_jump00&$7fff)>>8
000001B8                            
000001B8                            Boss_Call00:
000001B8 B130 E718 B30C B1B0 30     	dc.b	nC4, $30, smpsNoAttack, $18, nD4, $0C, nC4, nB3, $30
000001C1                            	smpsReturn
000001C1 E3                       M 	dc.b	$e3
000001C2                            
000001C2                            ; PSG3 Data
000001C2                            Boss_PSG3:
000001C2                            	smpsPSGform         $E7
000001C2 F3E7                     M 	dc.b	$f3,$e7
000001C4                            	smpsNoteFill        $05
000001C4 E805                     M 	dc.b	$e8,$05
000001C6                            
000001C6                            Boss_Loop0D:
000001C6 C624 2418 8030 80          	dc.b	nA5, $24, $24, $18, nRst, $30, nRst
000001CD                            	smpsLoop            $00, $02, Boss_Loop0D
000001CD F7                       M 	dc.b	$f7
000001CE 0002                     M 	dc.b	index,loops
000001D0 0000                     M 	dc.w	((boss_loop0d&$7fff)<<8)&$ff00+(boss_loop0d&$7fff)>>8
000001D2                            
000001D2                            Boss_Loop0E:
000001D2 C618                       	dc.b	nA5, $18
000001D4                            	smpsLoop            $00, $40, Boss_Loop0E
000001D4 F7                       M 	dc.b	$f7
000001D5 0040                     M 	dc.b	index,loops
000001D7 0000                     M 	dc.w	((boss_loop0e&$7fff)<<8)&$ff00+(boss_loop0e&$7fff)>>8
000001D9                            	smpsJump            Boss_Loop0D
000001D9 F6                       M 	dc.b	$f6
000001DA 0000                     M 	dc.w	((boss_loop0d&$7fff)<<8)&$ff00+(boss_loop0d&$7fff)>>8
000001DC                            
000001DC                            ; DAC Data
000001DC                            Boss_DAC:
000001DC 820C 8282 8282 8282 8289+  	dc.b	dSnare, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dMidTimpani, $0C, dVLowTimpani
000001E8 898B 898B 898B             	dc.b	dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani
000001EE                            	smpsLoop            $00, $02, Boss_DAC
000001EE F7                       M 	dc.b	$f7
000001EF 0002                     M 	dc.b	index,loops
000001F1 0000                     M 	dc.w	((boss_dac&$7fff)<<8)&$ff00+(boss_dac&$7fff)>>8
000001F3 810C 8206 82               	dc.b	dKick, $0C, dSnare, $06, dSnare
000001F8                            
000001F8                            Boss_Loop00:
000001F8 810C 8206 82               	dc.b	dKick, $0C, dSnare, $06, dSnare
000001FD                            	smpsLoop            $00, $06, Boss_Loop00
000001FD F7                       M 	dc.b	$f7
000001FE 0006                     M 	dc.b	index,loops
00000200 0000                     M 	dc.w	((boss_loop00&$7fff)<<8)&$ff00+(boss_loop00&$7fff)>>8
00000202 810C 8202 8904 8202 8904+  	dc.b	dKick, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C
0000020E 8206 82                    	dc.b	dSnare, $06, dSnare
00000211                            
00000211                            Boss_Loop01:
00000211 810C 8206 82               	dc.b	dKick, $0C, dSnare, $06, dSnare
00000216                            	smpsLoop            $00, $05, Boss_Loop01
00000216 F7                       M 	dc.b	$f7
00000217 0005                     M 	dc.b	index,loops
00000219 0000                     M 	dc.w	((boss_loop01&$7fff)<<8)&$ff00+(boss_loop01&$7fff)>>8
0000021B 810C 8202 8904 8202 8904+  	dc.b	dKick, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C
00000227 8202 8904 8202 8904 8B0C+  	dc.b	dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C, dSnare, $06
00000233 82                         	dc.b	dSnare
00000234                            	smpsLoop            $01, $03, Boss_Loop00
00000234 F7                       M 	dc.b	$f7
00000235 0103                     M 	dc.b	index,loops
00000237 0000                     M 	dc.w	((boss_loop00&$7fff)<<8)&$ff00+(boss_loop00&$7fff)>>8
00000239                            
00000239                            Boss_Loop02:
00000239 810C 8206 82               	dc.b	dKick, $0C, dSnare, $06, dSnare
0000023E                            	smpsLoop            $00, $06, Boss_Loop02
0000023E F7                       M 	dc.b	$f7
0000023F 0006                     M 	dc.b	index,loops
00000241 0000                     M 	dc.w	((boss_loop02&$7fff)<<8)&$ff00+(boss_loop02&$7fff)>>8
00000243 810C 8202 8904 8202 8904+  	dc.b	dKick, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04, dVLowTimpani, $0C
0000024F 8206 82                    	dc.b	dSnare, $06, dSnare
00000252                            
00000252                            Boss_Loop03:
00000252 810C 8206 82               	dc.b	dKick, $0C, dSnare, $06, dSnare
00000257                            	smpsLoop            $00, $03, Boss_Loop03
00000257 F7                       M 	dc.b	$f7
00000258 0003                     M 	dc.b	index,loops
0000025A 0000                     M 	dc.w	((boss_loop03&$7fff)<<8)&$ff00+(boss_loop03&$7fff)>>8
0000025C                            
0000025C                            Boss_Loop04:
0000025C 8B0C 8202 8904 8202 8904   	dc.b	dVLowTimpani, $0C, dSnare, $02, dMidTimpani, $04, dSnare, $02, dMidTimpani, $04
00000266                            	smpsLoop            $00, $04, Boss_Loop04
00000266 F7                       M 	dc.b	$f7
00000267 0004                     M 	dc.b	index,loops
00000269 0000                     M 	dc.w	((boss_loop04&$7fff)<<8)&$ff00+(boss_loop04&$7fff)>>8
0000026B                            	smpsJump            Boss_DAC
0000026B F6                       M 	dc.b	$f6
0000026C 0000                     M 	dc.w	((boss_dac&$7fff)<<8)&$ff00+(boss_dac&$7fff)>>8
0000026E                            
0000026E                            Boss_Voices:
0000026E                            ;	Voice $00
0000026E                            ;	$20
0000026E                            ;	$66, $65, $60, $61, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0000026E                            ;	$07, $06, $06, $08, 	$29, $19, $19, $F9, 	$1C, $3A, $16, $00
0000026E                            	smpsVcAlgorithm     $00
0000026E =00000000                M vcalgorithm	=	val
0000026E                            	smpsVcFeedback      $04
0000026E =00000004                M vcfeedback	=	val
0000026E                            	smpsVcUnusedBits    $00
0000026E =00000000                M vcunusedbits	=	val
0000026E =00000000                M vcd1r1unk	=	0
0000026E =00000000                M vcd1r2unk	=	0
0000026E =00000000                M vcd1r3unk	=	0
0000026E =00000000                M vcd1r4unk	=	0
0000026E                            	smpsVcDetune        $06, $06, $06, $06
0000026E =00000006                M vcdt1	=	op1
0000026E =00000006                M vcdt2	=	op2
0000026E =00000006                M vcdt3	=	op3
0000026E =00000006                M vcdt4	=	op4
0000026E                            	smpsVcCoarseFreq    $01, $00, $05, $06
0000026E =00000001                M vccf1	=	op1
0000026E =00000000                M vccf2	=	op2
0000026E =00000005                M vccf3	=	op3
0000026E =00000006                M vccf4	=	op4
0000026E                            	smpsVcRateScale     $02, $02, $03, $03
0000026E =00000002                M vcrs1	=	op1
0000026E =00000002                M vcrs2	=	op2
0000026E =00000003                M vcrs3	=	op3
0000026E =00000003                M vcrs4	=	op4
0000026E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000026E =0000001F                M vcar1	=	op1
0000026E =0000001F                M vcar2	=	op2
0000026E =0000001F                M vcar3	=	op3
0000026E =0000001F                M vcar4	=	op4
0000026E                            	smpsVcAmpMod        $00, $00, $00, $00
0000026E =00000000                M vcam1	=	op1<<7
0000026E =00000000                M vcam2	=	op2<<7
0000026E =00000000                M vcam3	=	op3<<7
0000026E =00000000                M vcam4	=	op4<<7
0000026E                            	smpsVcDecayRate1    $06, $09, $06, $07
0000026E =00000006                M vcd1r1	=	op1
0000026E =00000009                M vcd1r2	=	op2
0000026E =00000006                M vcd1r3	=	op3
0000026E =00000007                M vcd1r4	=	op4
0000026E                            	smpsVcDecayRate2    $08, $06, $06, $07
0000026E =00000008                M vcd2r1	=	op1
0000026E =00000006                M vcd2r2	=	op2
0000026E =00000006                M vcd2r3	=	op3
0000026E =00000007                M vcd2r4	=	op4
0000026E                            	smpsVcDecayLevel    $0F, $01, $01, $02
0000026E =0000000F                M vcdl1	=	op1
0000026E =00000001                M vcdl2	=	op2
0000026E =00000001                M vcdl3	=	op3
0000026E =00000002                M vcdl4	=	op4
0000026E                            	smpsVcReleaseRate   $09, $09, $09, $09
0000026E =00000009                M vcrr1	=	op1
0000026E =00000009                M vcrr2	=	op2
0000026E =00000009                M vcrr3	=	op3
0000026E =00000009                M vcrr4	=	op4
0000026E                            	smpsVcTotalLevel    $00, $16, $3A, $1C
0000026E =00000000                M vctl1	=	op1
0000026E =00000016                M vctl2	=	op2
0000026E =0000003A                M vctl3	=	op3
0000026E =0000001C                M vctl4	=	op4
0000026E 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000026F =00000000                M vctlmask4	=	0
0000026F =00000000                M vctlmask3	=	0
0000026F =00000000                M vctlmask2	=	0
0000026F =00000000                M vctlmask1	=	0
0000026F 6660 6561                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000273 DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000277 0709 0606                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000027B 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000027F 2919 19F9                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000283 1C16 3A00                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000287                            
00000287                            ;	Voice $01
00000287                            ;	$3A
00000287                            ;	$31, $01, $01, $71, 	$8F, $8F, $4F, $4D, 	$09, $09, $00, $03
00000287                            ;	$00, $00, $00, $00, 	$15, $F5, $05, $0A, 	$19, $1F, $19, $01
00000287                            	smpsVcAlgorithm     $02
00000287 =00000002                M vcalgorithm	=	val
00000287                            	smpsVcFeedback      $07
00000287 =00000007                M vcfeedback	=	val
00000287                            	smpsVcUnusedBits    $00
00000287 =00000000                M vcunusedbits	=	val
00000287 =00000000                M vcd1r1unk	=	0
00000287 =00000000                M vcd1r2unk	=	0
00000287 =00000000                M vcd1r3unk	=	0
00000287 =00000000                M vcd1r4unk	=	0
00000287                            	smpsVcDetune        $07, $00, $00, $03
00000287 =00000007                M vcdt1	=	op1
00000287 =00000000                M vcdt2	=	op2
00000287 =00000000                M vcdt3	=	op3
00000287 =00000003                M vcdt4	=	op4
00000287                            	smpsVcCoarseFreq    $01, $01, $01, $01
00000287 =00000001                M vccf1	=	op1
00000287 =00000001                M vccf2	=	op2
00000287 =00000001                M vccf3	=	op3
00000287 =00000001                M vccf4	=	op4
00000287                            	smpsVcRateScale     $01, $01, $02, $02
00000287 =00000001                M vcrs1	=	op1
00000287 =00000001                M vcrs2	=	op2
00000287 =00000002                M vcrs3	=	op3
00000287 =00000002                M vcrs4	=	op4
00000287                            	smpsVcAttackRate    $0D, $0F, $0F, $0F
00000287 =0000000D                M vcar1	=	op1
00000287 =0000000F                M vcar2	=	op2
00000287 =0000000F                M vcar3	=	op3
00000287 =0000000F                M vcar4	=	op4
00000287                            	smpsVcAmpMod        $00, $00, $00, $00
00000287 =00000000                M vcam1	=	op1<<7
00000287 =00000000                M vcam2	=	op2<<7
00000287 =00000000                M vcam3	=	op3<<7
00000287 =00000000                M vcam4	=	op4<<7
00000287                            	smpsVcDecayRate1    $03, $00, $09, $09
00000287 =00000003                M vcd1r1	=	op1
00000287 =00000000                M vcd1r2	=	op2
00000287 =00000009                M vcd1r3	=	op3
00000287 =00000009                M vcd1r4	=	op4
00000287                            	smpsVcDecayRate2    $00, $00, $00, $00
00000287 =00000000                M vcd2r1	=	op1
00000287 =00000000                M vcd2r2	=	op2
00000287 =00000000                M vcd2r3	=	op3
00000287 =00000000                M vcd2r4	=	op4
00000287                            	smpsVcDecayLevel    $00, $00, $0F, $01
00000287 =00000000                M vcdl1	=	op1
00000287 =00000000                M vcdl2	=	op2
00000287 =0000000F                M vcdl3	=	op3
00000287 =00000001                M vcdl4	=	op4
00000287                            	smpsVcReleaseRate   $0A, $05, $05, $05
00000287 =0000000A                M vcrr1	=	op1
00000287 =00000005                M vcrr2	=	op2
00000287 =00000005                M vcrr3	=	op3
00000287 =00000005                M vcrr4	=	op4
00000287                            	smpsVcTotalLevel    $01, $19, $1F, $19
00000287 =00000001                M vctl1	=	op1
00000287 =00000019                M vctl2	=	op2
00000287 =0000001F                M vctl3	=	op3
00000287 =00000019                M vctl4	=	op4
00000287 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000288 =00000000                M vctlmask4	=	0
00000288 =00000000                M vctlmask3	=	0
00000288 =00000000                M vctlmask2	=	0
00000288 =00000000                M vctlmask1	=	0
00000288 3101 0171                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000028C 8F4F 8F4D                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000290 0900 0903                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000294 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000298 1505 F50A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000029C 1919 1F01                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002A0                            
000002A0                            ;	Voice $02
000002A0                            ;	$3A
000002A0                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000002A0                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $86
000002A0                            	smpsVcAlgorithm     $02
000002A0 =00000002                M vcalgorithm	=	val
000002A0                            	smpsVcFeedback      $07
000002A0 =00000007                M vcfeedback	=	val
000002A0                            	smpsVcUnusedBits    $00
000002A0 =00000000                M vcunusedbits	=	val
000002A0 =00000000                M vcd1r1unk	=	0
000002A0 =00000000                M vcd1r2unk	=	0
000002A0 =00000000                M vcd1r3unk	=	0
000002A0 =00000000                M vcd1r4unk	=	0
000002A0                            	smpsVcDetune        $00, $00, $00, $00
000002A0 =00000000                M vcdt1	=	op1
000002A0 =00000000                M vcdt2	=	op2
000002A0 =00000000                M vcdt3	=	op3
000002A0 =00000000                M vcdt4	=	op4
000002A0                            	smpsVcCoarseFreq    $01, $01, $07, $01
000002A0 =00000001                M vccf1	=	op1
000002A0 =00000001                M vccf2	=	op2
000002A0 =00000007                M vccf3	=	op3
000002A0 =00000001                M vccf4	=	op4
000002A0                            	smpsVcRateScale     $01, $02, $02, $02
000002A0 =00000001                M vcrs1	=	op1
000002A0 =00000002                M vcrs2	=	op2
000002A0 =00000002                M vcrs3	=	op3
000002A0 =00000002                M vcrs4	=	op4
000002A0                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000002A0 =00000013                M vcar1	=	op1
000002A0 =0000000D                M vcar2	=	op2
000002A0 =0000000E                M vcar3	=	op3
000002A0 =0000000E                M vcar4	=	op4
000002A0                            	smpsVcAmpMod        $00, $00, $00, $00
000002A0 =00000000                M vcam1	=	op1<<7
000002A0 =00000000                M vcam2	=	op2<<7
000002A0 =00000000                M vcam3	=	op3<<7
000002A0 =00000000                M vcam4	=	op4<<7
000002A0                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000002A0 =00000003                M vcd1r1	=	op1
000002A0 =0000000E                M vcd1r2	=	op2
000002A0 =0000000E                M vcd1r3	=	op3
000002A0 =0000000E                M vcd1r4	=	op4
000002A0                            	smpsVcDecayRate2    $00, $00, $00, $00
000002A0 =00000000                M vcd2r1	=	op1
000002A0 =00000000                M vcd2r2	=	op2
000002A0 =00000000                M vcd2r3	=	op3
000002A0 =00000000                M vcd2r4	=	op4
000002A0                            	smpsVcDecayLevel    $00, $01, $0F, $01
000002A0 =00000000                M vcdl1	=	op1
000002A0 =00000001                M vcdl2	=	op2
000002A0 =0000000F                M vcdl3	=	op3
000002A0 =00000001                M vcdl4	=	op4
000002A0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002A0 =0000000F                M vcrr1	=	op1
000002A0 =0000000F                M vcrr2	=	op2
000002A0 =0000000F                M vcrr3	=	op3
000002A0 =0000000F                M vcrr4	=	op4
000002A0                            	smpsVcTotalLevel    $86, $27, $28, $17
000002A0 =00000086                M vctl1	=	op1
000002A0 =00000027                M vctl2	=	op2
000002A0 =00000028                M vctl3	=	op3
000002A0 =00000017                M vctl4	=	op4
000002A0 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002A1 =00000000                M vctlmask4	=	0
000002A1 =00000000                M vctlmask3	=	0
000002A1 =00000000                M vctlmask2	=	0
000002A1 =00000000                M vctlmask1	=	0
000002A1 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002A5 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002A9 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000002AD 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002B1 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002B5 1727 2886                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002B9                            
000002B9                            ;	Voice $03
000002B9                            ;	$3A
000002B9                            ;	$51, $07, $51, $02, 	$0F, $0B, $0F, $0F, 	$1F, $1F, $1F, $0F
000002B9                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$1C, $28, $22, $81
000002B9                            	smpsVcAlgorithm     $02
000002B9 =00000002                M vcalgorithm	=	val
000002B9                            	smpsVcFeedback      $07
000002B9 =00000007                M vcfeedback	=	val
000002B9                            	smpsVcUnusedBits    $00
000002B9 =00000000                M vcunusedbits	=	val
000002B9 =00000000                M vcd1r1unk	=	0
000002B9 =00000000                M vcd1r2unk	=	0
000002B9 =00000000                M vcd1r3unk	=	0
000002B9 =00000000                M vcd1r4unk	=	0
000002B9                            	smpsVcDetune        $00, $05, $00, $05
000002B9 =00000000                M vcdt1	=	op1
000002B9 =00000005                M vcdt2	=	op2
000002B9 =00000000                M vcdt3	=	op3
000002B9 =00000005                M vcdt4	=	op4
000002B9                            	smpsVcCoarseFreq    $02, $01, $07, $01
000002B9 =00000002                M vccf1	=	op1
000002B9 =00000001                M vccf2	=	op2
000002B9 =00000007                M vccf3	=	op3
000002B9 =00000001                M vccf4	=	op4
000002B9                            	smpsVcRateScale     $00, $00, $00, $00
000002B9 =00000000                M vcrs1	=	op1
000002B9 =00000000                M vcrs2	=	op2
000002B9 =00000000                M vcrs3	=	op3
000002B9 =00000000                M vcrs4	=	op4
000002B9                            	smpsVcAttackRate    $0F, $0F, $0B, $0F
000002B9 =0000000F                M vcar1	=	op1
000002B9 =0000000F                M vcar2	=	op2
000002B9 =0000000B                M vcar3	=	op3
000002B9 =0000000F                M vcar4	=	op4
000002B9                            	smpsVcAmpMod        $00, $00, $00, $00
000002B9 =00000000                M vcam1	=	op1<<7
000002B9 =00000000                M vcam2	=	op2<<7
000002B9 =00000000                M vcam3	=	op3<<7
000002B9 =00000000                M vcam4	=	op4<<7
000002B9                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000002B9 =0000000F                M vcd1r1	=	op1
000002B9 =0000001F                M vcd1r2	=	op2
000002B9 =0000001F                M vcd1r3	=	op3
000002B9 =0000001F                M vcd1r4	=	op4
000002B9                            	smpsVcDecayRate2    $02, $00, $00, $00
000002B9 =00000002                M vcd2r1	=	op1
000002B9 =00000000                M vcd2r2	=	op2
000002B9 =00000000                M vcd2r3	=	op3
000002B9 =00000000                M vcd2r4	=	op4
000002B9                            	smpsVcDecayLevel    $01, $00, $00, $00
000002B9 =00000001                M vcdl1	=	op1
000002B9 =00000000                M vcdl2	=	op2
000002B9 =00000000                M vcdl3	=	op3
000002B9 =00000000                M vcdl4	=	op4
000002B9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002B9 =0000000F                M vcrr1	=	op1
000002B9 =0000000F                M vcrr2	=	op2
000002B9 =0000000F                M vcrr3	=	op3
000002B9 =0000000F                M vcrr4	=	op4
000002B9                            	smpsVcTotalLevel    $81, $22, $28, $1C
000002B9 =00000081                M vctl1	=	op1
000002B9 =00000022                M vctl2	=	op2
000002B9 =00000028                M vctl3	=	op3
000002B9 =0000001C                M vctl4	=	op4
000002B9 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002BA =00000000                M vctlmask4	=	0
000002BA =00000000                M vctlmask3	=	0
000002BA =00000000                M vctlmask2	=	0
000002BA =00000000                M vctlmask1	=	0
000002BA 5151 0702                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002BE 0F0F 0B0F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002C2 1F1F 1F0F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000002C6 0000 0002                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002CA 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002CE 1C22 2881                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002D2                            
000002D2                          M 	pops
00000000                            		inc_music	SCZ
00000000                          M 	pushs
00000000                          M music_957:	section	org($1380),file("sound/music/compressed/scz.unc"),over(header)
00000000                          M 	include	"sound/music/scz.asm"
00000000                            SCZ_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     SCZ_Voices
00000000 0000                     M 	dc.w	((scz_voices&$7fff)<<8)&$ff00+(scz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $5B
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$5b
00000005 5B                       M 	dc.b	$5b
00000006                            
00000006                            	smpsHeaderDAC       SCZ_DAC
00000006                          M 	checkedchannelpointer	scz_dac
00000006 0000                     M 	dc.w	((scz_dac&$7fff)<<8)&$ff00+(scz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        SCZ_FM1,	$F4, $12
0000000A                          M 	checkedchannelpointer	scz_fm1
0000000A 0000                     M 	dc.w	((scz_fm1&$7fff)<<8)&$ff00+(scz_fm1&$7fff)>>8
0000000C F412                     M 	dc.b	$f4,$12
0000000E                            	smpsHeaderFM        SCZ_FM2,	$E8, $0E
0000000E                          M 	checkedchannelpointer	scz_fm2
0000000E 0000                     M 	dc.w	((scz_fm2&$7fff)<<8)&$ff00+(scz_fm2&$7fff)>>8
00000010 E80E                     M 	dc.b	$e8,$0e
00000012                            	smpsHeaderFM        SCZ_FM3,	$F4, $09
00000012                          M 	checkedchannelpointer	scz_fm3
00000012 0000                     M 	dc.w	((scz_fm3&$7fff)<<8)&$ff00+(scz_fm3&$7fff)>>8
00000014 F409                     M 	dc.b	$f4,$09
00000016                            	smpsHeaderFM        SCZ_FM4,	$F4, $10
00000016                          M 	checkedchannelpointer	scz_fm4
00000016 0000                     M 	dc.w	((scz_fm4&$7fff)<<8)&$ff00+(scz_fm4&$7fff)>>8
00000018 F410                     M 	dc.b	$f4,$10
0000001A                            	smpsHeaderFM        SCZ_FM5,	$DC, $24
0000001A                          M 	checkedchannelpointer	scz_fm5
0000001A 0000                     M 	dc.w	((scz_fm5&$7fff)<<8)&$ff00+(scz_fm5&$7fff)>>8
0000001C DC24                     M 	dc.b	$dc,$24
0000001E                            	smpsHeaderPSG       SCZ_PSG1,	$F4, $0C, $00, $00
0000001E                          M 	checkedchannelpointer	scz_psg1
0000001E 0000                     M 	dc.w	((scz_psg1&$7fff)<<8)&$ff00+(scz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$f4
00000020 F4                       M 	dc.b	$f4
00000021 0C                       M 	dc.b	$0c
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       SCZ_PSG2,	$F9, $09, $00, $00
00000024                          M 	checkedchannelpointer	scz_psg2
00000024 0000                     M 	dc.w	((scz_psg2&$7fff)<<8)&$ff00+(scz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$f9
00000026 F9                       M 	dc.b	$f9
00000027 09                       M 	dc.b	$09
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       SCZ_PSG3,	$00, $04, $00, fTone_04
0000002A                          M 	checkedchannelpointer	scz_psg3
0000002A 0000                     M 	dc.w	((scz_psg3&$7fff)<<8)&$ff00+(scz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 04                       M 	dc.b	$04
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM4 Data
00000030                            SCZ_FM4:
00000030                            	smpsSetvoice        $03
00000030                          M 	smpsfmvoice	$03
00000030 EF03                     M 	dc.b	$ef,$03
00000032                            
00000032                            SCZ_Loop03:
00000032                            	smpsCall            SCZ_Call07
00000032 F8                       M 	dc.b	$f8
00000033 0000                     M 	dc.w	((scz_call07&$7fff)<<8)&$ff00+(scz_call07&$7fff)>>8
00000035                            	smpsLoop            $00, $02, SCZ_Loop03
00000035 F7                       M 	dc.b	$f7
00000036 0002                     M 	dc.b	index,loops
00000038 0000                     M 	dc.w	((scz_loop03&$7fff)<<8)&$ff00+(scz_loop03&$7fff)>>8
0000003A                            
0000003A                            SCZ_Jump03:
0000003A                            	smpsPan             panRight, $00
0000003A E040                     M 	dc.b	$e0,direction+amsfms
0000003C                            	smpsAlterNote       $FE
0000003C                          M 	smpsdetune	$fe
0000003C E1FE                     M 	dc.b	$e1,$fe
0000003E                            	smpsAlterVol        $14
0000003E E614                     M 	dc.b	$e6,$14
00000040                            	smpsAlterPitch      $E8
00000040                          M 	smpschangetransposition	$e8
00000040 E9E8                     M 	dc.b	$e9,$e8
00000042                            	smpsSetvoice        $04
00000042                          M 	smpsfmvoice	$04
00000042 EF04                     M 	dc.b	$ef,$04
00000044                            	smpsCall            SCZ_Call05
00000044 F8                       M 	dc.b	$f8
00000045 0000                     M 	dc.w	((scz_call05&$7fff)<<8)&$ff00+(scz_call05&$7fff)>>8
00000047                            	smpsSetvoice        $03
00000047                          M 	smpsfmvoice	$03
00000047 EF03                     M 	dc.b	$ef,$03
00000049                            	smpsAlterPitch      $18
00000049                          M 	smpschangetransposition	$18
00000049 E918                     M 	dc.b	$e9,$18
0000004B                            	smpsAlterVol        $EC
0000004B E6EC                     M 	dc.b	$e6,$ec
0000004D                            	smpsAlterNote       $00
0000004D                          M 	smpsdetune	$00
0000004D E100                     M 	dc.b	$e1,$00
0000004F                            	smpsPan             panCenter, $00
0000004F E0C0                     M 	dc.b	$e0,direction+amsfms
00000051                            
00000051                            SCZ_Loop04:
00000051                            	smpsCall            SCZ_Call07
00000051 F8                       M 	dc.b	$f8
00000052 0000                     M 	dc.w	((scz_call07&$7fff)<<8)&$ff00+(scz_call07&$7fff)>>8
00000054                            	smpsLoop            $00, $08, SCZ_Loop04
00000054 F7                       M 	dc.b	$f7
00000055 0008                     M 	dc.b	index,loops
00000057 0000                     M 	dc.w	((scz_loop04&$7fff)<<8)&$ff00+(scz_loop04&$7fff)>>8
00000059                            	smpsJump            SCZ_Jump03
00000059 F6                       M 	dc.b	$f6
0000005A 0000                     M 	dc.w	((scz_jump03&$7fff)<<8)&$ff00+(scz_jump03&$7fff)>>8
0000005C                            
0000005C                            SCZ_Call07:
0000005C D406 D0D2 CBD4 D0D2 CB     	dc.b	nB6, $06, nG6, nA6, nD6, nB6, nG6, nA6, nD6
00000065                            	smpsReturn
00000065 E3                       M 	dc.b	$e3
00000066                            
00000066                            ; FM5 Data
00000066                            SCZ_FM5:
00000066                            	smpsSetvoice        $04
00000066                          M 	smpsfmvoice	$04
00000066 EF04                     M 	dc.b	$ef,$04
00000068 8060                       	dc.b	nRst, $60
0000006A                            
0000006A                            SCZ_Jump02:
0000006A                            	smpsPan             panLeft, $00
0000006A E080                     M 	dc.b	$e0,direction+amsfms
0000006C                            	smpsAlterNote       $02
0000006C                          M 	smpsdetune	$02
0000006C E102                     M 	dc.b	$e1,$02
0000006E                            	smpsCall            SCZ_Call05
0000006E F8                       M 	dc.b	$f8
0000006F 0000                     M 	dc.w	((scz_call05&$7fff)<<8)&$ff00+(scz_call05&$7fff)>>8
00000071                            	smpsAlterNote       $00
00000071                          M 	smpsdetune	$00
00000071 E100                     M 	dc.b	$e1,$00
00000073                            	smpsPan             panCenter, $00
00000073 E0C0                     M 	dc.b	$e0,direction+amsfms
00000075                            	smpsAlterVol        $FB
00000075 E6FB                     M 	dc.b	$e6,$fb
00000077                            	smpsCall            SCZ_Call06
00000077 F8                       M 	dc.b	$f8
00000078 0000                     M 	dc.w	((scz_call06&$7fff)<<8)&$ff00+(scz_call06&$7fff)>>8
0000007A CB03 0306 E7               	dc.b	nD6, $03, $03, $06, smpsNoAttack
0000007F                            	smpsAlterVol        $02
0000007F E602                     M 	dc.b	$e6,$02
00000081 02E7                       	dc.b	$02, smpsNoAttack
00000083                            	smpsAlterVol        $02
00000083 E602                     M 	dc.b	$e6,$02
00000085 02E7                       	dc.b	$02, smpsNoAttack
00000087                            	smpsAlterVol        $02
00000087 E602                     M 	dc.b	$e6,$02
00000089 0280 12C9 06CB             	dc.b	$02, nRst, $12, nC6, $06, nD6
0000008F                            	smpsAlterVol        $FA
0000008F E6FA                     M 	dc.b	$e6,$fa
00000091                            	smpsCall            SCZ_Call06
00000091 F8                       M 	dc.b	$f8
00000092 0000                     M 	dc.w	((scz_call06&$7fff)<<8)&$ff00+(scz_call06&$7fff)>>8
00000094 CB30                       	dc.b	nD6, $30
00000096                            	smpsAlterVol        $05
00000096 E605                     M 	dc.b	$e6,$05
00000098                            	smpsJump            SCZ_Jump02
00000098 F6                       M 	dc.b	$f6
00000099 0000                     M 	dc.w	((scz_jump02&$7fff)<<8)&$ff00+(scz_jump02&$7fff)>>8
0000009B                            
0000009B                            SCZ_Call05:
0000009B D030 CB                    	dc.b	nG6, $30, nD6
0000009E                            	smpsLoop            $00, $04, SCZ_Call05
0000009E F7                       M 	dc.b	$f7
0000009F 0004                     M 	dc.b	index,loops
000000A1 0000                     M 	dc.w	((scz_call05&$7fff)<<8)&$ff00+(scz_call05&$7fff)>>8
000000A3                            	smpsReturn
000000A3 E3                       M 	dc.b	$e3
000000A4                            
000000A4                            SCZ_Call06:
000000A4 D003 0306 E7               	dc.b	nG6, $03, $03, $06, smpsNoAttack
000000A9                            	smpsAlterVol        $02
000000A9 E602                     M 	dc.b	$e6,$02
000000AB 02E7                       	dc.b	$02, smpsNoAttack
000000AD                            	smpsAlterVol        $02
000000AD E602                     M 	dc.b	$e6,$02
000000AF 02E7                       	dc.b	$02, smpsNoAttack
000000B1                            	smpsAlterVol        $02
000000B1 E602                     M 	dc.b	$e6,$02
000000B3 0280 1E                    	dc.b	$02, nRst, $1E
000000B6                            	smpsAlterVol        $FA
000000B6 E6FA                     M 	dc.b	$e6,$fa
000000B8 CB03 0306 E7               	dc.b	nD6, $03, $03, $06, smpsNoAttack
000000BD                            	smpsAlterVol        $02
000000BD E602                     M 	dc.b	$e6,$02
000000BF 02E7                       	dc.b	$02, smpsNoAttack
000000C1                            	smpsAlterVol        $02
000000C1 E602                     M 	dc.b	$e6,$02
000000C3 02E7                       	dc.b	$02, smpsNoAttack
000000C5                            	smpsAlterVol        $02
000000C5 E602                     M 	dc.b	$e6,$02
000000C7 0280 1E                    	dc.b	$02, nRst, $1E
000000CA                            	smpsAlterVol        $FA
000000CA E6FA                     M 	dc.b	$e6,$fa
000000CC C903 0306 E7               	dc.b	nC6, $03, $03, $06, smpsNoAttack
000000D1                            	smpsAlterVol        $02
000000D1 E602                     M 	dc.b	$e6,$02
000000D3 02E7                       	dc.b	$02, smpsNoAttack
000000D5                            	smpsAlterVol        $02
000000D5 E602                     M 	dc.b	$e6,$02
000000D7 02E7                       	dc.b	$02, smpsNoAttack
000000D9                            	smpsAlterVol        $02
000000D9 E602                     M 	dc.b	$e6,$02
000000DB 0280 1E                    	dc.b	$02, nRst, $1E
000000DE                            	smpsAlterVol        $FA
000000DE E6FA                     M 	dc.b	$e6,$fa
000000E0                            	smpsReturn
000000E0 E3                       M 	dc.b	$e3
000000E1                            
000000E1                            ; FM1 Data
000000E1                            SCZ_FM1:
000000E1                            	smpsSetvoice        $06
000000E1                          M 	smpsfmvoice	$06
000000E1 EF06                     M 	dc.b	$ef,$06
000000E3 8006 B803 BAB8 0CBC 03BD+  	dc.b	nRst, $06, nG4, $03, nA4, nG4, $0C, nB4, $03, nC5, nB4, $0C
000000EF BF03 C1BF 30               	dc.b	nD5, $03, nE5, nD5, $30
000000F4                            
000000F4                            SCZ_Jump01:
000000F4 8012 CD03 CFD0 06CF CDCB+  	dc.b	nRst, $12, nE6, $03, nFs6, nG6, $06, nFs6, nE6, nD6, nB5, $30
00000100 8012 CD03 D0D2 06D0 CFCD+  	dc.b	nRst, $12, nE6, $03, nG6, nA6, $06, nG6, nFs6, nE6, nD6, $03
0000010C CDCB C827 8012 CD03 D0CF+  	dc.b	nE6, nD6, nB5, $27, nRst, $12, nE6, $03, nG6, nFs6, $06, nD6
00000118 C8CD CB30 8012 CD03 D0D2+  	dc.b	nB5, nE6, nD6, $30, nRst, $12, nE6, $03, nG6, nA6, $06, nG6
00000124 CFCD CB03 CDCB C827        	dc.b	nFs6, nE6, nD6, $03, nE6, nD6, nB5, $27
0000012C                            	smpsSetvoice        $00
0000012C                          M 	smpsfmvoice	$00
0000012C EF00                     M 	dc.b	$ef,$00
0000012E                            	smpsCall            SCZ_Call04
0000012E F8                       M 	dc.b	$f8
0000012F 0000                     M 	dc.w	((scz_call04&$7fff)<<8)&$ff00+(scz_call04&$7fff)>>8
00000131 BC0C B8BA B806 BA          	dc.b	nB4, $0C, nG4, nA4, nG4, $06, nA4
00000138                            	smpsCall            SCZ_Call04
00000138 F8                       M 	dc.b	$f8
00000139 0000                     M 	dc.w	((scz_call04&$7fff)<<8)&$ff00+(scz_call04&$7fff)>>8
0000013B BC30                       	dc.b	nB4, $30
0000013D                            	smpsJump            SCZ_Jump01
0000013D F6                       M 	dc.b	$f6
0000013E 0000                     M 	dc.w	((scz_jump01&$7fff)<<8)&$ff00+(scz_jump01&$7fff)>>8
00000140                            
00000140                            SCZ_Call04:
00000140 BC0C B8BA B3               	dc.b	nB4, $0C, nG4, nA4, nD4
00000145                            	smpsLoop            $00, $03, SCZ_Call04
00000145 F7                       M 	dc.b	$f7
00000146 0003                     M 	dc.b	index,loops
00000148 0000                     M 	dc.w	((scz_call04&$7fff)<<8)&$ff00+(scz_call04&$7fff)>>8
0000014A                            	smpsReturn
0000014A E3                       M 	dc.b	$e3
0000014B                            
0000014B                            ; FM3 Data
0000014B                            SCZ_FM3:
0000014B                            	smpsAlterNote       $02
0000014B                          M 	smpsdetune	$02
0000014B E102                     M 	dc.b	$e1,$02
0000014D                            	smpsSetvoice        $01
0000014D                          M 	smpsfmvoice	$01
0000014D EF01                     M 	dc.b	$ef,$01
0000014F 8006 BC03 BDBC 0CBF 03C1+  	dc.b	nRst, $06, nB4, $03, nC5, nB4, $0C, nD5, $03, nE5, nD5, $0C
0000015B C403 C6C4 30               	dc.b	nG5, $03, nA5, nG5, $30
00000160                            
00000160                            SCZ_Jump00:
00000160                            	smpsSetvoice        $05
00000160                          M 	smpsfmvoice	$05
00000160 EF05                     M 	dc.b	$ef,$05
00000162                            	smpsAlterVol        $12
00000162 E612                     M 	dc.b	$e6,$12
00000164 8012 CD03 CFD0 06CF CDCB+  	dc.b	nRst, $12, nE6, $03, nFs6, nG6, $06, nFs6, nE6, nD6, nB5, $18
00000170                            	smpsSetvoice        $01
00000170                          M 	smpsfmvoice	$01
00000170 EF01                     M 	dc.b	$ef,$01
00000172                            	smpsAlterVol        $EE
00000172 E6EE                     M 	dc.b	$e6,$ee
00000174                            	smpsNoteFill        $0B
00000174 E80B                     M 	dc.b	$e8,$0b
00000176 C406 BFC1 03C4 06          	dc.b	nG5, $06, nD5, nE5, $03, nG5, $06
0000017D                            	smpsNoteFill        $00
0000017D E800                     M 	dc.b	$e8,$00
0000017F 15                         	dc.b	$15
00000180                            	smpsSetvoice        $05
00000180                          M 	smpsfmvoice	$05
00000180 EF05                     M 	dc.b	$ef,$05
00000182                            	smpsAlterVol        $12
00000182 E612                     M 	dc.b	$e6,$12
00000184 CD03 D0D2 06D0 CFCD CB03+  	dc.b	nE6, $03, nG6, nA6, $06, nG6, nFs6, nE6, nD6, $03, nE6, nD6
00000190 C80F                       	dc.b	nB5, $0F
00000192                            	smpsSetvoice        $01
00000192                          M 	smpsfmvoice	$01
00000192 EF01                     M 	dc.b	$ef,$01
00000194                            	smpsAlterVol        $EE
00000194 E6EE                     M 	dc.b	$e6,$ee
00000196 C60C C8C4 12               	dc.b	nA5, $0C, nB5, nG5, $12
0000019B                            	smpsSetvoice        $05
0000019B                          M 	smpsfmvoice	$05
0000019B EF05                     M 	dc.b	$ef,$05
0000019D                            	smpsAlterVol        $12
0000019D E612                     M 	dc.b	$e6,$12
0000019F CD03 D0CF 06CB C8CD CB18   	dc.b	nE6, $03, nG6, nFs6, $06, nD6, nB5, nE6, nD6, $18
000001A9                            	smpsSetvoice        $01
000001A9                          M 	smpsfmvoice	$01
000001A9 EF01                     M 	dc.b	$ef,$01
000001AB                            	smpsAlterVol        $EE
000001AB E6EE                     M 	dc.b	$e6,$ee
000001AD                            	smpsNoteFill        $0B
000001AD E80B                     M 	dc.b	$e8,$0b
000001AF C406 BFC1 03C4 06          	dc.b	nG5, $06, nD5, nE5, $03, nG5, $06
000001B6                            	smpsNoteFill        $00
000001B6 E800                     M 	dc.b	$e8,$00
000001B8 15                         	dc.b	$15
000001B9                            	smpsSetvoice        $05
000001B9                          M 	smpsfmvoice	$05
000001B9 EF05                     M 	dc.b	$ef,$05
000001BB                            	smpsAlterVol        $12
000001BB E612                     M 	dc.b	$e6,$12
000001BD CD03 D0D2 06D0 CFCD CB03+  	dc.b	nE6, $03, nG6, nA6, $06, nG6, nFs6, nE6, nD6, $03, nE6
000001C8                            	smpsSetvoice        $01
000001C8                          M 	smpsfmvoice	$01
000001C8 EF01                     M 	dc.b	$ef,$01
000001CA                            	smpsAlterVol        $EE
000001CA E6EE                     M 	dc.b	$e6,$ee
000001CC BC03 BDBC 0CBF 03C1 BF0C+  	dc.b	nB4, $03, nC5, nB4, $0C, nD5, $03, nE5, nD5, $0C, nG5, $03
000001D8 C6                         	dc.b	nA5
000001D9                            	smpsAlterVol        $FC
000001D9 E6FC                     M 	dc.b	$e6,$fc
000001DB                            	smpsCall            SCZ_Call03
000001DB F8                       M 	dc.b	$f8
000001DC 0000                     M 	dc.w	((scz_call03&$7fff)<<8)&$ff00+(scz_call03&$7fff)>>8
000001DE C42A C603 C833             	dc.b	nG5, $2A, nA5, $03, nB5, $33
000001E4                            	smpsCall            SCZ_Call03
000001E4 F8                       M 	dc.b	$f8
000001E5 0000                     M 	dc.w	((scz_call03&$7fff)<<8)&$ff00+(scz_call03&$7fff)>>8
000001E7 C424 C60C C430             	dc.b	nG5, $24, nA5, $0C, nG5, $30
000001ED                            	smpsAlterVol        $04
000001ED E604                     M 	dc.b	$e6,$04
000001EF                            	smpsJump            SCZ_Jump00
000001EF F6                       M 	dc.b	$f6
000001F0 0000                     M 	dc.w	((scz_jump00&$7fff)<<8)&$ff00+(scz_jump00&$7fff)>>8
000001F2                            
000001F2                            SCZ_Call03:
000001F2 8012 C403 C6C8 0CC9 03C8+  	dc.b	nRst, $12, nG5, $03, nA5, nB5, $0C, nC6, $03, nB5, nC6, nD6
000001FE 27CD 0C                    	dc.b	$27, nE6, $0C
00000201                            	smpsReturn
00000201 E3                       M 	dc.b	$e3
00000202                            
00000202                            ; FM2 Data
00000202                            SCZ_FM2:
00000202                            	smpsSetvoice        $02
00000202                          M 	smpsfmvoice	$02
00000202 EF02                     M 	dc.b	$ef,$02
00000204 8051 AC03 AE06 B0          	dc.b	nRst, $51, nG3, $03, nA3, $06, nB3
0000020B                            
0000020B                            SCZ_Loop02:
0000020B B103 0F03 0CB8 03BA 06B8+  	dc.b	nC4, $03, $0F, $03, $0C, nG4, $03, nA4, $06, nG4, nG3, $03
00000217 0F0F B303 B506 B3          	dc.b	$0F, $0F, nD4, $03, nE4, $06, nD4
0000021E                            	smpsLoop            $00, $04, SCZ_Loop02
0000021E F7                       M 	dc.b	$f7
0000021F 0004                     M 	dc.b	index,loops
00000221 0000                     M 	dc.w	((scz_loop02&$7fff)<<8)&$ff00+(scz_loop02&$7fff)>>8
00000223                            	smpsCall            SCZ_Call02
00000223 F8                       M 	dc.b	$f8
00000224 0000                     M 	dc.w	((scz_call02&$7fff)<<8)&$ff00+(scz_call02&$7fff)>>8
00000226 AE03 0F0C 0909 AC03 0F0C+  	dc.b	nA3, $03, $0F, $0C, $09, $09, nG3, $03, $0F, $0C, $06, nA3
00000232 B0                         	dc.b	nB3
00000233                            	smpsCall            SCZ_Call02
00000233 F8                       M 	dc.b	$f8
00000234 0000                     M 	dc.w	((scz_call02&$7fff)<<8)&$ff00+(scz_call02&$7fff)>>8
00000236 AE03 0F0C 06B0 AEAC 30     	dc.b	nA3, $03, $0F, $0C, $06, nB3, nA3, nG3, $30
0000023F                            	smpsJump            SCZ_Loop02
0000023F F6                       M 	dc.b	$f6
00000240 0000                     M 	dc.w	((scz_loop02&$7fff)<<8)&$ff00+(scz_loop02&$7fff)>>8
00000242                            
00000242                            SCZ_Call02:
00000242 B103 0F0C 0909 B003 B00F+  	dc.b	nC4, $03, $0F, $0C, $09, $09, nB3, $03, nB3, $0F, $0C, $06
0000024E B1B0                       	dc.b	nC4, nB3
00000250                            	smpsReturn
00000250 E3                       M 	dc.b	$e3
00000251                            
00000251                            ; DAC Data
00000251                            SCZ_DAC:
00000251                            	smpsCall            SCZ_Call00
00000251 F8                       M 	dc.b	$f8
00000252 0000                     M 	dc.w	((scz_call00&$7fff)<<8)&$ff00+(scz_call00&$7fff)>>8
00000254                            	smpsLoop            $00, $02, SCZ_DAC
00000254 F7                       M 	dc.b	$f7
00000255 0002                     M 	dc.b	index,loops
00000257 0000                     M 	dc.w	((scz_dac&$7fff)<<8)&$ff00+(scz_dac&$7fff)>>8
00000259                            
00000259                            SCZ_Loop00:
00000259                            	smpsCall            SCZ_Call00
00000259 F8                       M 	dc.b	$f8
0000025A 0000                     M 	dc.w	((scz_call00&$7fff)<<8)&$ff00+(scz_call00&$7fff)>>8
0000025C                            	smpsLoop            $00, $03, SCZ_Loop00
0000025C F7                       M 	dc.b	$f7
0000025D 0003                     M 	dc.b	index,loops
0000025F 0000                     M 	dc.w	((scz_loop00&$7fff)<<8)&$ff00+(scz_loop00&$7fff)>>8
00000261                            	smpsCall            SCZ_Call01
00000261 F8                       M 	dc.b	$f8
00000262 0000                     M 	dc.w	((scz_call01&$7fff)<<8)&$ff00+(scz_call01&$7fff)>>8
00000264                            	smpsLoop            $01, $03, SCZ_Loop00
00000264 F7                       M 	dc.b	$f7
00000265 0103                     M 	dc.b	index,loops
00000267 0000                     M 	dc.w	((scz_loop00&$7fff)<<8)&$ff00+(scz_loop00&$7fff)>>8
00000269                            
00000269                            SCZ_Loop01:
00000269                            	smpsCall            SCZ_Call00
00000269 F8                       M 	dc.b	$f8
0000026A 0000                     M 	dc.w	((scz_call00&$7fff)<<8)&$ff00+(scz_call00&$7fff)>>8
0000026C                            	smpsLoop            $00, $03, SCZ_Loop01
0000026C F7                       M 	dc.b	$f7
0000026D 0003                     M 	dc.b	index,loops
0000026F 0000                     M 	dc.w	((scz_loop01&$7fff)<<8)&$ff00+(scz_loop01&$7fff)>>8
00000271 810C 8080 8206 8203 82     	dc.b	dKick, $0C, nRst, nRst, dSnare, $06, dSnare, $03, dSnare
0000027A                            	smpsJump            SCZ_Loop00
0000027A F6                       M 	dc.b	$f6
0000027B 0000                     M 	dc.w	((scz_loop00&$7fff)<<8)&$ff00+(scz_loop00&$7fff)>>8
0000027D                            
0000027D                            SCZ_Call00:
0000027D 8103 8180 0682 8180 8182+  	dc.b	dKick, $03, dKick, nRst, $06, dSnare, dKick, nRst, dKick, dSnare, $03, dKick
00000289 09                         	dc.b	$09
0000028A                            	smpsReturn
0000028A E3                       M 	dc.b	$e3
0000028B                            
0000028B                            SCZ_Call01:
0000028B 8103 8180 0682 8180 8182+  	dc.b	dKick, $03, dKick, nRst, $06, dSnare, dKick, nRst, dKick, dSnare, dSnare, $03
00000297 82                         	dc.b	dSnare
00000298                            	smpsReturn
00000298 E3                       M 	dc.b	$e3
00000299                            
00000299                            ; PSG1 Data
00000299                            SCZ_PSG1:
00000299 8060                       	dc.b	nRst, $60
0000029B                            
0000029B                            SCZ_Loop05:
0000029B B830 B7                    	dc.b	nG4, $30, nFs4
0000029E                            	smpsLoop            $00, $04, SCZ_Loop05
0000029E F7                       M 	dc.b	$f7
0000029F 0004                     M 	dc.b	index,loops
000002A1 0000                     M 	dc.w	((scz_loop05&$7fff)<<8)&$ff00+(scz_loop05&$7fff)>>8
000002A3                            	smpsAlterVol        $FE
000002A3 E6FE                     M 	dc.b	$e6,$fe
000002A5 B803 0306 8024 B703 0306+  	dc.b	nG4, $03, $03, $06, nRst, $24, nFs4, $03, $03, $06, nRst, $24
000002B1 B503 0306 8024 B303 0306+  	dc.b	nE4, $03, $03, $06, nRst, $24, nD4, $03, $03, $06, nRst, $18
000002BD B506 B7B8 0303 0680 24B7+  	dc.b	nE4, $06, nFs4, nG4, $03, $03, $06, nRst, $24, nFs4, $03, $03
000002C9 0680 24B5 0303 0680 24B7+  	dc.b	$06, nRst, $24, nE4, $03, $03, $06, nRst, $24, nFs4, $30
000002D4                            	smpsAlterVol        $02
000002D4 E602                     M 	dc.b	$e6,$02
000002D6                            	smpsJump            SCZ_Loop05
000002D6 F6                       M 	dc.b	$f6
000002D7 0000                     M 	dc.w	((scz_loop05&$7fff)<<8)&$ff00+(scz_loop05&$7fff)>>8
000002D9                            
000002D9                            ; PSG2 Data
000002D9                            SCZ_PSG2:
000002D9 8060                       	dc.b	nRst, $60
000002DB                            	smpsPSGvoice        fTone_08
000002DB F508                     M 	dc.b	$f5,ftone_08
000002DD                            
000002DD                            SCZ_Jump05:
000002DD 8012 CB03 CBCB 06CB CBCB+  	dc.b	nRst, $12, nD6, $03, nD6, nD6, $06, nD6, nD6, nD6, nD6, $30
000002E9 8012 CB03 CBCB 06CB CBCB+  	dc.b	nRst, $12, nD6, $03, nD6, nD6, $06, nD6, nD6, nD6, nD6, $03
000002F5 CBCB CB27 8012 CB03 CBCB+  	dc.b	nD6, nD6, nD6, $27, nRst, $12, nD6, $03, nD6, nD6, $06, nD6
00000301 CBCB CB30 8012 CB03 CBCB+  	dc.b	nD6, nD6, nD6, $30, nRst, $12, nD6, $03, nD6, nD6, $06, nD6
0000030D CBCB CB03 CBCB CB27        	dc.b	nD6, nD6, nD6, $03, nD6, nD6, nD6, $27
00000315                            	smpsAlterVol        $01
00000315 E601                     M 	dc.b	$e6,$01
00000317 BC03 0306 8024 BA03 0306+  	dc.b	nB4, $03, $03, $06, nRst, $24, nA4, $03, $03, $06, nRst, $24
00000323 B803 0306 8024 B703 0306+  	dc.b	nG4, $03, $03, $06, nRst, $24, nFs4, $03, $03, $06, nRst, $18
0000032F B806 BABC 0303 0680 24BA+  	dc.b	nG4, $06, nA4, nB4, $03, $03, $06, nRst, $24, nA4, $03, $03
0000033B 0680 24B8 0303 0680 24B3+  	dc.b	$06, nRst, $24, nG4, $03, $03, $06, nRst, $24, nD4, $30
00000346                            	smpsAlterVol        $FF
00000346 E6FF                     M 	dc.b	$e6,$ff
00000348                            	smpsJump            SCZ_Jump05
00000348 F6                       M 	dc.b	$f6
00000349 0000                     M 	dc.w	((scz_jump05&$7fff)<<8)&$ff00+(scz_jump05&$7fff)>>8
0000034B                            
0000034B                            ; PSG3 Data
0000034B                            SCZ_PSG3:
0000034B                            	smpsPSGform         $E7
0000034B F3E7                     M 	dc.b	$f3,$e7
0000034D                            	smpsNoteFill        $09
0000034D E809                     M 	dc.b	$e8,$09
0000034F                            
0000034F                            SCZ_Jump04:
0000034F C60C                       	dc.b	nMaxPSG, $0C
00000351                            	smpsJump            SCZ_Jump04
00000351 F6                       M 	dc.b	$f6
00000352 0000                     M 	dc.w	((scz_jump04&$7fff)<<8)&$ff00+(scz_jump04&$7fff)>>8
00000354                            
00000354                            SCZ_Voices:
00000354                            ;	Voice $00
00000354                            ;	$02
00000354                            ;	$62, $01, $34, $01, 	$59, $59, $59, $51, 	$04, $04, $04, $07
00000354                            ;	$01, $01, $01, $01, 	$12, $12, $12, $17, 	$1E, $19, $25, $80
00000354                            	smpsVcAlgorithm     $02
00000354 =00000002                M vcalgorithm	=	val
00000354                            	smpsVcFeedback      $00
00000354 =00000000                M vcfeedback	=	val
00000354                            	smpsVcUnusedBits    $00
00000354 =00000000                M vcunusedbits	=	val
00000354 =00000000                M vcd1r1unk	=	0
00000354 =00000000                M vcd1r2unk	=	0
00000354 =00000000                M vcd1r3unk	=	0
00000354 =00000000                M vcd1r4unk	=	0
00000354                            	smpsVcDetune        $00, $03, $00, $06
00000354 =00000000                M vcdt1	=	op1
00000354 =00000003                M vcdt2	=	op2
00000354 =00000000                M vcdt3	=	op3
00000354 =00000006                M vcdt4	=	op4
00000354                            	smpsVcCoarseFreq    $01, $04, $01, $02
00000354 =00000001                M vccf1	=	op1
00000354 =00000004                M vccf2	=	op2
00000354 =00000001                M vccf3	=	op3
00000354 =00000002                M vccf4	=	op4
00000354                            	smpsVcRateScale     $01, $01, $01, $01
00000354 =00000001                M vcrs1	=	op1
00000354 =00000001                M vcrs2	=	op2
00000354 =00000001                M vcrs3	=	op3
00000354 =00000001                M vcrs4	=	op4
00000354                            	smpsVcAttackRate    $11, $19, $19, $19
00000354 =00000011                M vcar1	=	op1
00000354 =00000019                M vcar2	=	op2
00000354 =00000019                M vcar3	=	op3
00000354 =00000019                M vcar4	=	op4
00000354                            	smpsVcAmpMod        $00, $00, $00, $00
00000354 =00000000                M vcam1	=	op1<<5
00000354 =00000000                M vcam2	=	op2<<5
00000354 =00000000                M vcam3	=	op3<<5
00000354 =00000000                M vcam4	=	op4<<5
00000354                            	smpsVcDecayRate1    $07, $04, $04, $04
00000354 =00000007                M vcd1r1	=	op1
00000354 =00000004                M vcd1r2	=	op2
00000354 =00000004                M vcd1r3	=	op3
00000354 =00000004                M vcd1r4	=	op4
00000354                            	smpsVcDecayRate2    $01, $01, $01, $01
00000354 =00000001                M vcd2r1	=	op1
00000354 =00000001                M vcd2r2	=	op2
00000354 =00000001                M vcd2r3	=	op3
00000354 =00000001                M vcd2r4	=	op4
00000354                            	smpsVcDecayLevel    $01, $01, $01, $01
00000354 =00000001                M vcdl1	=	op1
00000354 =00000001                M vcdl2	=	op2
00000354 =00000001                M vcdl3	=	op3
00000354 =00000001                M vcdl4	=	op4
00000354                            	smpsVcReleaseRate   $07, $02, $02, $02
00000354 =00000007                M vcrr1	=	op1
00000354 =00000002                M vcrr2	=	op2
00000354 =00000002                M vcrr3	=	op3
00000354 =00000002                M vcrr4	=	op4
00000354                            	smpsVcTotalLevel    $00, $25, $19, $1E
00000354 =00000000                M vctl1	=	op1
00000354 =00000025                M vctl2	=	op2
00000354 =00000019                M vctl3	=	op3
00000354 =0000001E                M vctl4	=	op4
00000354 02                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000355 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000355 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000355 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000355 =00000080                M vctlmask1	=	$80
00000355 6234 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000359 5959 5951                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000035D 0404 0407                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000361 0101 0101                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000365 1212 1217                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000369 1E25 1980                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000036D                            
0000036D                            ;	Voice $01
0000036D                            ;	$3A
0000036D                            ;	$11, $1A, $00, $11, 	$89, $59, $4F, $4F, 	$0A, $0D, $06, $09
0000036D                            ;	$00, $00, $00, $01, 	$1F, $FF, $0F, $5F, 	$20, $2E, $3B, $80
0000036D                            	smpsVcAlgorithm     $02
0000036D =00000002                M vcalgorithm	=	val
0000036D                            	smpsVcFeedback      $07
0000036D =00000007                M vcfeedback	=	val
0000036D                            	smpsVcUnusedBits    $00
0000036D =00000000                M vcunusedbits	=	val
0000036D =00000000                M vcd1r1unk	=	0
0000036D =00000000                M vcd1r2unk	=	0
0000036D =00000000                M vcd1r3unk	=	0
0000036D =00000000                M vcd1r4unk	=	0
0000036D                            	smpsVcDetune        $01, $00, $01, $01
0000036D =00000001                M vcdt1	=	op1
0000036D =00000000                M vcdt2	=	op2
0000036D =00000001                M vcdt3	=	op3
0000036D =00000001                M vcdt4	=	op4
0000036D                            	smpsVcCoarseFreq    $01, $00, $0A, $01
0000036D =00000001                M vccf1	=	op1
0000036D =00000000                M vccf2	=	op2
0000036D =0000000A                M vccf3	=	op3
0000036D =00000001                M vccf4	=	op4
0000036D                            	smpsVcRateScale     $01, $01, $01, $02
0000036D =00000001                M vcrs1	=	op1
0000036D =00000001                M vcrs2	=	op2
0000036D =00000001                M vcrs3	=	op3
0000036D =00000002                M vcrs4	=	op4
0000036D                            	smpsVcAttackRate    $0F, $0F, $19, $09
0000036D =0000000F                M vcar1	=	op1
0000036D =0000000F                M vcar2	=	op2
0000036D =00000019                M vcar3	=	op3
0000036D =00000009                M vcar4	=	op4
0000036D                            	smpsVcAmpMod        $00, $00, $00, $00
0000036D =00000000                M vcam1	=	op1<<5
0000036D =00000000                M vcam2	=	op2<<5
0000036D =00000000                M vcam3	=	op3<<5
0000036D =00000000                M vcam4	=	op4<<5
0000036D                            	smpsVcDecayRate1    $09, $06, $0D, $0A
0000036D =00000009                M vcd1r1	=	op1
0000036D =00000006                M vcd1r2	=	op2
0000036D =0000000D                M vcd1r3	=	op3
0000036D =0000000A                M vcd1r4	=	op4
0000036D                            	smpsVcDecayRate2    $01, $00, $00, $00
0000036D =00000001                M vcd2r1	=	op1
0000036D =00000000                M vcd2r2	=	op2
0000036D =00000000                M vcd2r3	=	op3
0000036D =00000000                M vcd2r4	=	op4
0000036D                            	smpsVcDecayLevel    $05, $00, $0F, $01
0000036D =00000005                M vcdl1	=	op1
0000036D =00000000                M vcdl2	=	op2
0000036D =0000000F                M vcdl3	=	op3
0000036D =00000001                M vcdl4	=	op4
0000036D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000036D =0000000F                M vcrr1	=	op1
0000036D =0000000F                M vcrr2	=	op2
0000036D =0000000F                M vcrr3	=	op3
0000036D =0000000F                M vcrr4	=	op4
0000036D                            	smpsVcTotalLevel    $00, $3B, $2E, $20
0000036D =00000000                M vctl1	=	op1
0000036D =0000003B                M vctl2	=	op2
0000036D =0000002E                M vctl3	=	op3
0000036D =00000020                M vctl4	=	op4
0000036D 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000036E =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000036E =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000036E =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000036E =00000080                M vctlmask1	=	$80
0000036E 1100 1A11                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000372 894F 594F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000376 0A06 0D09                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000037A 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000037E 1F0F FF5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000382 203B 2E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000386                            
00000386                            ;	Voice $02
00000386                            ;	$3D
00000386                            ;	$01, $42, $02, $22, 	$1F, $1F, $1F, $1F, 	$07, $00, $00, $00
00000386                            ;	$00, $0E, $0E, $0E, 	$24, $0F, $0F, $0F, 	$1C, $89, $89, $89
00000386                            	smpsVcAlgorithm     $05
00000386 =00000005                M vcalgorithm	=	val
00000386                            	smpsVcFeedback      $07
00000386 =00000007                M vcfeedback	=	val
00000386                            	smpsVcUnusedBits    $00
00000386 =00000000                M vcunusedbits	=	val
00000386 =00000000                M vcd1r1unk	=	0
00000386 =00000000                M vcd1r2unk	=	0
00000386 =00000000                M vcd1r3unk	=	0
00000386 =00000000                M vcd1r4unk	=	0
00000386                            	smpsVcDetune        $02, $00, $04, $00
00000386 =00000002                M vcdt1	=	op1
00000386 =00000000                M vcdt2	=	op2
00000386 =00000004                M vcdt3	=	op3
00000386 =00000000                M vcdt4	=	op4
00000386                            	smpsVcCoarseFreq    $02, $02, $02, $01
00000386 =00000002                M vccf1	=	op1
00000386 =00000002                M vccf2	=	op2
00000386 =00000002                M vccf3	=	op3
00000386 =00000001                M vccf4	=	op4
00000386                            	smpsVcRateScale     $00, $00, $00, $00
00000386 =00000000                M vcrs1	=	op1
00000386 =00000000                M vcrs2	=	op2
00000386 =00000000                M vcrs3	=	op3
00000386 =00000000                M vcrs4	=	op4
00000386                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000386 =0000001F                M vcar1	=	op1
00000386 =0000001F                M vcar2	=	op2
00000386 =0000001F                M vcar3	=	op3
00000386 =0000001F                M vcar4	=	op4
00000386                            	smpsVcAmpMod        $00, $00, $00, $00
00000386 =00000000                M vcam1	=	op1<<5
00000386 =00000000                M vcam2	=	op2<<5
00000386 =00000000                M vcam3	=	op3<<5
00000386 =00000000                M vcam4	=	op4<<5
00000386                            	smpsVcDecayRate1    $00, $00, $00, $07
00000386 =00000000                M vcd1r1	=	op1
00000386 =00000000                M vcd1r2	=	op2
00000386 =00000000                M vcd1r3	=	op3
00000386 =00000007                M vcd1r4	=	op4
00000386                            	smpsVcDecayRate2    $0E, $0E, $0E, $00
00000386 =0000000E                M vcd2r1	=	op1
00000386 =0000000E                M vcd2r2	=	op2
00000386 =0000000E                M vcd2r3	=	op3
00000386 =00000000                M vcd2r4	=	op4
00000386                            	smpsVcDecayLevel    $00, $00, $00, $02
00000386 =00000000                M vcdl1	=	op1
00000386 =00000000                M vcdl2	=	op2
00000386 =00000000                M vcdl3	=	op3
00000386 =00000002                M vcdl4	=	op4
00000386                            	smpsVcReleaseRate   $0F, $0F, $0F, $04
00000386 =0000000F                M vcrr1	=	op1
00000386 =0000000F                M vcrr2	=	op2
00000386 =0000000F                M vcrr3	=	op3
00000386 =00000004                M vcrr4	=	op4
00000386                            	smpsVcTotalLevel    $09, $09, $09, $1C
00000386 =00000009                M vctl1	=	op1
00000386 =00000009                M vctl2	=	op2
00000386 =00000009                M vctl3	=	op3
00000386 =0000001C                M vctl4	=	op4
00000386 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000387 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000387 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000387 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000387 =00000080                M vctlmask1	=	$80
00000387 0102 4222                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000038B 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000038F 0700 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000393 000E 0E0E                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000397 240F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000039B 1C89 8989                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000039F                            
0000039F                            ;	Voice $03
0000039F                            ;	$04
0000039F                            ;	$57, $07, $74, $54, 	$1F, $1B, $1F, $1F, 	$00, $00, $00, $00
0000039F                            ;	$06, $0A, $00, $0D, 	$00, $0F, $00, $0F, 	$1A, $98, $25, $8F
0000039F                            	smpsVcAlgorithm     $04
0000039F =00000004                M vcalgorithm	=	val
0000039F                            	smpsVcFeedback      $00
0000039F =00000000                M vcfeedback	=	val
0000039F                            	smpsVcUnusedBits    $00
0000039F =00000000                M vcunusedbits	=	val
0000039F =00000000                M vcd1r1unk	=	0
0000039F =00000000                M vcd1r2unk	=	0
0000039F =00000000                M vcd1r3unk	=	0
0000039F =00000000                M vcd1r4unk	=	0
0000039F                            	smpsVcDetune        $05, $07, $00, $05
0000039F =00000005                M vcdt1	=	op1
0000039F =00000007                M vcdt2	=	op2
0000039F =00000000                M vcdt3	=	op3
0000039F =00000005                M vcdt4	=	op4
0000039F                            	smpsVcCoarseFreq    $04, $04, $07, $07
0000039F =00000004                M vccf1	=	op1
0000039F =00000004                M vccf2	=	op2
0000039F =00000007                M vccf3	=	op3
0000039F =00000007                M vccf4	=	op4
0000039F                            	smpsVcRateScale     $00, $00, $00, $00
0000039F =00000000                M vcrs1	=	op1
0000039F =00000000                M vcrs2	=	op2
0000039F =00000000                M vcrs3	=	op3
0000039F =00000000                M vcrs4	=	op4
0000039F                            	smpsVcAttackRate    $1F, $1F, $1B, $1F
0000039F =0000001F                M vcar1	=	op1
0000039F =0000001F                M vcar2	=	op2
0000039F =0000001B                M vcar3	=	op3
0000039F =0000001F                M vcar4	=	op4
0000039F                            	smpsVcAmpMod        $00, $00, $00, $00
0000039F =00000000                M vcam1	=	op1<<5
0000039F =00000000                M vcam2	=	op2<<5
0000039F =00000000                M vcam3	=	op3<<5
0000039F =00000000                M vcam4	=	op4<<5
0000039F                            	smpsVcDecayRate1    $00, $00, $00, $00
0000039F =00000000                M vcd1r1	=	op1
0000039F =00000000                M vcd1r2	=	op2
0000039F =00000000                M vcd1r3	=	op3
0000039F =00000000                M vcd1r4	=	op4
0000039F                            	smpsVcDecayRate2    $0D, $00, $0A, $06
0000039F =0000000D                M vcd2r1	=	op1
0000039F =00000000                M vcd2r2	=	op2
0000039F =0000000A                M vcd2r3	=	op3
0000039F =00000006                M vcd2r4	=	op4
0000039F                            	smpsVcDecayLevel    $00, $00, $00, $00
0000039F =00000000                M vcdl1	=	op1
0000039F =00000000                M vcdl2	=	op2
0000039F =00000000                M vcdl3	=	op3
0000039F =00000000                M vcdl4	=	op4
0000039F                            	smpsVcReleaseRate   $0F, $00, $0F, $00
0000039F =0000000F                M vcrr1	=	op1
0000039F =00000000                M vcrr2	=	op2
0000039F =0000000F                M vcrr3	=	op3
0000039F =00000000                M vcrr4	=	op4
0000039F                            	smpsVcTotalLevel    $0F, $25, $18, $1A
0000039F =0000000F                M vctl1	=	op1
0000039F =00000025                M vctl2	=	op2
0000039F =00000018                M vctl3	=	op3
0000039F =0000001A                M vctl4	=	op4
0000039F 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003A0 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003A0 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003A0 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003A0 =00000080                M vctlmask1	=	$80
000003A0 5774 0754                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003A4 1F1F 1B1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003A8 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003AC 0600 0A0D                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003B0 0000 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003B4 1A25 988F                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003B8                            
000003B8                            ;	Voice $04
000003B8                            ;	$07
000003B8                            ;	$06, $7C, $75, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000003B8                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$80, $80, $80, $80
000003B8                            	smpsVcAlgorithm     $07
000003B8 =00000007                M vcalgorithm	=	val
000003B8                            	smpsVcFeedback      $00
000003B8 =00000000                M vcfeedback	=	val
000003B8                            	smpsVcUnusedBits    $00
000003B8 =00000000                M vcunusedbits	=	val
000003B8 =00000000                M vcd1r1unk	=	0
000003B8 =00000000                M vcd1r2unk	=	0
000003B8 =00000000                M vcd1r3unk	=	0
000003B8 =00000000                M vcd1r4unk	=	0
000003B8                            	smpsVcDetune        $00, $07, $07, $00
000003B8 =00000000                M vcdt1	=	op1
000003B8 =00000007                M vcdt2	=	op2
000003B8 =00000007                M vcdt3	=	op3
000003B8 =00000000                M vcdt4	=	op4
000003B8                            	smpsVcCoarseFreq    $0A, $05, $0C, $06
000003B8 =0000000A                M vccf1	=	op1
000003B8 =00000005                M vccf2	=	op2
000003B8 =0000000C                M vccf3	=	op3
000003B8 =00000006                M vccf4	=	op4
000003B8                            	smpsVcRateScale     $00, $00, $00, $00
000003B8 =00000000                M vcrs1	=	op1
000003B8 =00000000                M vcrs2	=	op2
000003B8 =00000000                M vcrs3	=	op3
000003B8 =00000000                M vcrs4	=	op4
000003B8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000003B8 =0000001F                M vcar1	=	op1
000003B8 =0000001F                M vcar2	=	op2
000003B8 =0000001F                M vcar3	=	op3
000003B8 =0000001F                M vcar4	=	op4
000003B8                            	smpsVcAmpMod        $00, $00, $00, $00
000003B8 =00000000                M vcam1	=	op1<<5
000003B8 =00000000                M vcam2	=	op2<<5
000003B8 =00000000                M vcam3	=	op3<<5
000003B8 =00000000                M vcam4	=	op4<<5
000003B8                            	smpsVcDecayRate1    $00, $00, $00, $00
000003B8 =00000000                M vcd1r1	=	op1
000003B8 =00000000                M vcd1r2	=	op2
000003B8 =00000000                M vcd1r3	=	op3
000003B8 =00000000                M vcd1r4	=	op4
000003B8                            	smpsVcDecayRate2    $00, $00, $00, $00
000003B8 =00000000                M vcd2r1	=	op1
000003B8 =00000000                M vcd2r2	=	op2
000003B8 =00000000                M vcd2r3	=	op3
000003B8 =00000000                M vcd2r4	=	op4
000003B8                            	smpsVcDecayLevel    $00, $00, $00, $00
000003B8 =00000000                M vcdl1	=	op1
000003B8 =00000000                M vcdl2	=	op2
000003B8 =00000000                M vcdl3	=	op3
000003B8 =00000000                M vcdl4	=	op4
000003B8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003B8 =0000000F                M vcrr1	=	op1
000003B8 =0000000F                M vcrr2	=	op2
000003B8 =0000000F                M vcrr3	=	op3
000003B8 =0000000F                M vcrr4	=	op4
000003B8                            	smpsVcTotalLevel    $00, $00, $00, $00
000003B8 =00000000                M vctl1	=	op1
000003B8 =00000000                M vctl2	=	op2
000003B8 =00000000                M vctl3	=	op3
000003B8 =00000000                M vctl4	=	op4
000003B8 07                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003B9 =FFFFFF80                M vctlmask4	=	((vcalgorithm=7)<<7)
000003B9 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003B9 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003B9 =00000080                M vctlmask1	=	$80
000003B9 0675 7C0A                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003BD 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003C1 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003C5 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003C9 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003CD 8080 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003D1                            
000003D1                            ;	Voice $05
000003D1                            ;	$01
000003D1                            ;	$05, $03, $05, $01, 	$0F, $0E, $CE, $10, 	$05, $02, $0B, $09
000003D1                            ;	$08, $03, $00, $0A, 	$FF, $3F, $0F, $FF, 	$23, $1A, $21, $83
000003D1                            	smpsVcAlgorithm     $01
000003D1 =00000001                M vcalgorithm	=	val
000003D1                            	smpsVcFeedback      $00
000003D1 =00000000                M vcfeedback	=	val
000003D1                            	smpsVcUnusedBits    $00
000003D1 =00000000                M vcunusedbits	=	val
000003D1 =00000000                M vcd1r1unk	=	0
000003D1 =00000000                M vcd1r2unk	=	0
000003D1 =00000000                M vcd1r3unk	=	0
000003D1 =00000000                M vcd1r4unk	=	0
000003D1                            	smpsVcDetune        $00, $00, $00, $00
000003D1 =00000000                M vcdt1	=	op1
000003D1 =00000000                M vcdt2	=	op2
000003D1 =00000000                M vcdt3	=	op3
000003D1 =00000000                M vcdt4	=	op4
000003D1                            	smpsVcCoarseFreq    $01, $05, $03, $05
000003D1 =00000001                M vccf1	=	op1
000003D1 =00000005                M vccf2	=	op2
000003D1 =00000003                M vccf3	=	op3
000003D1 =00000005                M vccf4	=	op4
000003D1                            	smpsVcRateScale     $00, $03, $00, $00
000003D1 =00000000                M vcrs1	=	op1
000003D1 =00000003                M vcrs2	=	op2
000003D1 =00000000                M vcrs3	=	op3
000003D1 =00000000                M vcrs4	=	op4
000003D1                            	smpsVcAttackRate    $10, $0E, $0E, $0F
000003D1 =00000010                M vcar1	=	op1
000003D1 =0000000E                M vcar2	=	op2
000003D1 =0000000E                M vcar3	=	op3
000003D1 =0000000F                M vcar4	=	op4
000003D1                            	smpsVcAmpMod        $00, $00, $00, $00
000003D1 =00000000                M vcam1	=	op1<<5
000003D1 =00000000                M vcam2	=	op2<<5
000003D1 =00000000                M vcam3	=	op3<<5
000003D1 =00000000                M vcam4	=	op4<<5
000003D1                            	smpsVcDecayRate1    $09, $0B, $02, $05
000003D1 =00000009                M vcd1r1	=	op1
000003D1 =0000000B                M vcd1r2	=	op2
000003D1 =00000002                M vcd1r3	=	op3
000003D1 =00000005                M vcd1r4	=	op4
000003D1                            	smpsVcDecayRate2    $0A, $00, $03, $08
000003D1 =0000000A                M vcd2r1	=	op1
000003D1 =00000000                M vcd2r2	=	op2
000003D1 =00000003                M vcd2r3	=	op3
000003D1 =00000008                M vcd2r4	=	op4
000003D1                            	smpsVcDecayLevel    $0F, $00, $03, $0F
000003D1 =0000000F                M vcdl1	=	op1
000003D1 =00000000                M vcdl2	=	op2
000003D1 =00000003                M vcdl3	=	op3
000003D1 =0000000F                M vcdl4	=	op4
000003D1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003D1 =0000000F                M vcrr1	=	op1
000003D1 =0000000F                M vcrr2	=	op2
000003D1 =0000000F                M vcrr3	=	op3
000003D1 =0000000F                M vcrr4	=	op4
000003D1                            	smpsVcTotalLevel    $03, $21, $1A, $23
000003D1 =00000003                M vctl1	=	op1
000003D1 =00000021                M vctl2	=	op2
000003D1 =0000001A                M vctl3	=	op3
000003D1 =00000023                M vctl4	=	op4
000003D1 01                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003D2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003D2 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003D2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003D2 =00000080                M vctlmask1	=	$80
000003D2 0505 0301                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003D6 0FCE 0E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003DA 050B 0209                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003DE 0800 030A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003E2 FF0F 3FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003E6 2321 1A83                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003EA                            
000003EA                            ;	Voice $06
000003EA                            ;	$3C
000003EA                            ;	$01, $02, $01, $02, 	$CF, $0D, $CF, $0C, 	$00, $08, $00, $08
000003EA                            ;	$00, $02, $00, $02, 	$02, $27, $02, $28, 	$1E, $80, $1F, $80
000003EA                            	smpsVcAlgorithm     $04
000003EA =00000004                M vcalgorithm	=	val
000003EA                            	smpsVcFeedback      $07
000003EA =00000007                M vcfeedback	=	val
000003EA                            	smpsVcUnusedBits    $00
000003EA =00000000                M vcunusedbits	=	val
000003EA =00000000                M vcd1r1unk	=	0
000003EA =00000000                M vcd1r2unk	=	0
000003EA =00000000                M vcd1r3unk	=	0
000003EA =00000000                M vcd1r4unk	=	0
000003EA                            	smpsVcDetune        $00, $00, $00, $00
000003EA =00000000                M vcdt1	=	op1
000003EA =00000000                M vcdt2	=	op2
000003EA =00000000                M vcdt3	=	op3
000003EA =00000000                M vcdt4	=	op4
000003EA                            	smpsVcCoarseFreq    $02, $01, $02, $01
000003EA =00000002                M vccf1	=	op1
000003EA =00000001                M vccf2	=	op2
000003EA =00000002                M vccf3	=	op3
000003EA =00000001                M vccf4	=	op4
000003EA                            	smpsVcRateScale     $00, $03, $00, $03
000003EA =00000000                M vcrs1	=	op1
000003EA =00000003                M vcrs2	=	op2
000003EA =00000000                M vcrs3	=	op3
000003EA =00000003                M vcrs4	=	op4
000003EA                            	smpsVcAttackRate    $0C, $0F, $0D, $0F
000003EA =0000000C                M vcar1	=	op1
000003EA =0000000F                M vcar2	=	op2
000003EA =0000000D                M vcar3	=	op3
000003EA =0000000F                M vcar4	=	op4
000003EA                            	smpsVcAmpMod        $00, $00, $00, $00
000003EA =00000000                M vcam1	=	op1<<5
000003EA =00000000                M vcam2	=	op2<<5
000003EA =00000000                M vcam3	=	op3<<5
000003EA =00000000                M vcam4	=	op4<<5
000003EA                            	smpsVcDecayRate1    $08, $00, $08, $00
000003EA =00000008                M vcd1r1	=	op1
000003EA =00000000                M vcd1r2	=	op2
000003EA =00000008                M vcd1r3	=	op3
000003EA =00000000                M vcd1r4	=	op4
000003EA                            	smpsVcDecayRate2    $02, $00, $02, $00
000003EA =00000002                M vcd2r1	=	op1
000003EA =00000000                M vcd2r2	=	op2
000003EA =00000002                M vcd2r3	=	op3
000003EA =00000000                M vcd2r4	=	op4
000003EA                            	smpsVcDecayLevel    $02, $00, $02, $00
000003EA =00000002                M vcdl1	=	op1
000003EA =00000000                M vcdl2	=	op2
000003EA =00000002                M vcdl3	=	op3
000003EA =00000000                M vcdl4	=	op4
000003EA                            	smpsVcReleaseRate   $08, $02, $07, $02
000003EA =00000008                M vcrr1	=	op1
000003EA =00000002                M vcrr2	=	op2
000003EA =00000007                M vcrr3	=	op3
000003EA =00000002                M vcrr4	=	op4
000003EA                            	smpsVcTotalLevel    $00, $1F, $00, $1E
000003EA =00000000                M vctl1	=	op1
000003EA =0000001F                M vctl2	=	op2
000003EA =00000000                M vctl3	=	op3
000003EA =0000001E                M vctl4	=	op4
000003EA 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003EB =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003EB =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003EB =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003EB =00000080                M vctlmask1	=	$80
000003EB 0101 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003EF CFCF 0D0C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003F3 0000 0808                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003F7 0000 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003FB 0202 2728                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003FF 1E1F 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000403                            
00000403                          M 	pops
00000000                            		inc_music	OOZ
00000000                          M 	pushs
00000000                          M music_1209:	section	org($1380),file("sound/music/compressed/ooz.unc"),over(header)
00000000                          M 	include	"sound/music/ooz.asm"
00000000                            OOZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000001                M sourcesmps2asm	=	sourcesmps2asmver
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     OOZ_Voices
00000000 0000                     M 	dc.w	((ooz_voices&$7fff)<<8)&$ff00+(ooz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $02, $D0
00000004 02                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$d0
00000005 D0                       M 	dc.b	$d0
00000006                            
00000006                            	smpsHeaderDAC       OOZ_DAC
00000006                          M 	checkedchannelpointer	ooz_dac
00000006 0000                     M 	dc.w	((ooz_dac&$7fff)<<8)&$ff00+(ooz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        OOZ_FM1,	$F4, $0C
0000000A                          M 	checkedchannelpointer	ooz_fm1
0000000A 0000                     M 	dc.w	((ooz_fm1&$7fff)<<8)&$ff00+(ooz_fm1&$7fff)>>8
0000000C F40C                     M 	dc.b	$f4,$0c
0000000E                            	smpsHeaderFM        OOZ_FM2,	$F4, $09
0000000E                          M 	checkedchannelpointer	ooz_fm2
0000000E 0000                     M 	dc.w	((ooz_fm2&$7fff)<<8)&$ff00+(ooz_fm2&$7fff)>>8
00000010 F409                     M 	dc.b	$f4,$09
00000012                            	smpsHeaderFM        OOZ_FM3,	$C4, $09
00000012                          M 	checkedchannelpointer	ooz_fm3
00000012 0000                     M 	dc.w	((ooz_fm3&$7fff)<<8)&$ff00+(ooz_fm3&$7fff)>>8
00000014 C409                     M 	dc.b	$c4,$09
00000016                            	smpsHeaderFM        OOZ_FM4,	$F4, $10
00000016                          M 	checkedchannelpointer	ooz_fm4
00000016 0000                     M 	dc.w	((ooz_fm4&$7fff)<<8)&$ff00+(ooz_fm4&$7fff)>>8
00000018 F410                     M 	dc.b	$f4,$10
0000001A                            	smpsHeaderFM        OOZ_FM5,	$F4, $10
0000001A                          M 	checkedchannelpointer	ooz_fm5
0000001A 0000                     M 	dc.w	((ooz_fm5&$7fff)<<8)&$ff00+(ooz_fm5&$7fff)>>8
0000001C F410                     M 	dc.b	$f4,$10
0000001E                            	smpsHeaderPSG       OOZ_PSG1,	$D0, $04, $04, $00
0000001E                          M 	checkedchannelpointer	ooz_psg1
0000001E 0000                     M 	dc.w	((ooz_psg1&$7fff)<<8)&$ff00+(ooz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 04                       M 	dc.b	$04
00000022 04                       M 	dc.b	$04
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       OOZ_PSG2,	$D0, $05, $04, $00
00000024                          M 	checkedchannelpointer	ooz_psg2
00000024 0000                     M 	dc.w	((ooz_psg2&$7fff)<<8)&$ff00+(ooz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 05                       M 	dc.b	$05
00000028 04                       M 	dc.b	$04
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       OOZ_PSG3,	$FE, $07, $00, fTone_01
0000002A                          M 	checkedchannelpointer	ooz_psg3
0000002A 0000                     M 	dc.w	((ooz_psg3&$7fff)<<8)&$ff00+(ooz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$fe
0000002C FE                       M 	dc.b	$fe
0000002D 07                       M 	dc.b	$07
0000002E 00                       M 	dc.b	$00
0000002F 01                       M 	dc.b	ftone_01
00000030                            
00000030                            ; FM1 Data
00000030                            OOZ_FM1:
00000030                            	smpsSetvoice        $04
00000030                          M 	smpsfmvoice	$04
00000030 EF04                     M 	dc.b	$ef,$04
00000032                            	smpsModSet          $02, $03, $01, $03
00000032 F0                       M 	dc.b	$f0
00000033 0203 0103                M 	dc.b	$02,$03,$01,$03
00000037                            	smpsCall            OOZ_Call02
00000037 F8                       M 	dc.b	$f8
00000038 0000                     M 	dc.w	((ooz_call02&$7fff)<<8)&$ff00+(ooz_call02&$7fff)>>8
0000003A                            
0000003A                            OOZ_Jump00:
0000003A                            	smpsSetvoice        $02
0000003A                          M 	smpsfmvoice	$02
0000003A EF02                     M 	dc.b	$ef,$02
0000003C                            	smpsAlterVol        $FB
0000003C E6FB                     M 	dc.b	$e6,$fb
0000003E                            	smpsAlterPitch      $DC
0000003E                          M 	smpschangetransposition	$dc
0000003E E9DC                     M 	dc.b	$e9,$dc
00000040                            	smpsCall            OOZ_Call03
00000040 F8                       M 	dc.b	$f8
00000041 0000                     M 	dc.w	((ooz_call03&$7fff)<<8)&$ff00+(ooz_call03&$7fff)>>8
00000043                            	smpsAlterVol        $05
00000043 E605                     M 	dc.b	$e6,$05
00000045                            	smpsAlterPitch      $24
00000045                          M 	smpschangetransposition	$24
00000045 E924                     M 	dc.b	$e9,$24
00000047                            	smpsSetvoice        $04
00000047                          M 	smpsfmvoice	$04
00000047 EF04                     M 	dc.b	$ef,$04
00000049                            	smpsCall            OOZ_Call04
00000049 F8                       M 	dc.b	$f8
0000004A 0000                     M 	dc.w	((ooz_call04&$7fff)<<8)&$ff00+(ooz_call04&$7fff)>>8
0000004C                            	smpsSetvoice        $02
0000004C                          M 	smpsfmvoice	$02
0000004C EF02                     M 	dc.b	$ef,$02
0000004E                            	smpsAlterVol        $FC
0000004E E6FC                     M 	dc.b	$e6,$fc
00000050                            	smpsAlterPitch      $DC
00000050                          M 	smpschangetransposition	$dc
00000050 E9DC                     M 	dc.b	$e9,$dc
00000052                            	smpsCall            OOZ_Call05
00000052 F8                       M 	dc.b	$f8
00000053 0000                     M 	dc.w	((ooz_call05&$7fff)<<8)&$ff00+(ooz_call05&$7fff)>>8
00000055                            	smpsAlterVol        $04
00000055 E604                     M 	dc.b	$e6,$04
00000057                            	smpsAlterPitch      $24
00000057                          M 	smpschangetransposition	$24
00000057 E924                     M 	dc.b	$e9,$24
00000059                            	smpsAlterPitch      $E8
00000059                          M 	smpschangetransposition	$e8
00000059 E9E8                     M 	dc.b	$e9,$e8
0000005B                            	smpsSetvoice        $05
0000005B                          M 	smpsfmvoice	$05
0000005B EF05                     M 	dc.b	$ef,$05
0000005D                            	smpsAlterVol        $07
0000005D E607                     M 	dc.b	$e6,$07
0000005F                            	smpsCall            OOZ_Call06
0000005F F8                       M 	dc.b	$f8
00000060 0000                     M 	dc.w	((ooz_call06&$7fff)<<8)&$ff00+(ooz_call06&$7fff)>>8
00000062                            	smpsAlterVol        $F9
00000062 E6F9                     M 	dc.b	$e6,$f9
00000064                            	smpsAlterPitch      $18
00000064                          M 	smpschangetransposition	$18
00000064 E918                     M 	dc.b	$e9,$18
00000066                            	smpsJump            OOZ_Jump00
00000066 F6                       M 	dc.b	$f6
00000067 0000                     M 	dc.w	((ooz_jump00&$7fff)<<8)&$ff00+(ooz_jump00&$7fff)>>8
00000069                            
00000069                            OOZ_Call02:
00000069 C403 0306 C5C8 C9CB 1203+  	dc.b	nG5, $03, $03, $06, nAb5, nB5, nC6, nD6, $12, $03, $03, $06
00000075 CCCE CCCB CCCB C9C8 03C9+  	dc.b	nEb6, nF6, nEb6, nD6, nEb6, nD6, nC6, nB5, $03, nC6, nB5, nAb5
00000081 C424                       	dc.b	nG5, $24
00000083                            	smpsReturn
00000083 E3                       M 	dc.b	$e3
00000084                            
00000084                            OOZ_Call03:
00000084 8018 8003 8001 C901 CB02+  	dc.b	nRst, $18, nRst, $03, nRst, $01, nC6, $01, nD6, $02, nEb6, $02
00000090 CF25                       	dc.b	nFs6, $25
00000092                            	smpsAlterVol        $02
00000092 E602                     M 	dc.b	$e6,$02
00000094 E702                       	dc.b	smpsNoAttack, $02
00000096                            	smpsAlterVol        $02
00000096 E602                     M 	dc.b	$e6,$02
00000098 E702                       	dc.b	smpsNoAttack, $02
0000009A                            	smpsAlterVol        $02
0000009A E602                     M 	dc.b	$e6,$02
0000009C E702                       	dc.b	smpsNoAttack, $02
0000009E                            	smpsAlterVol        $02
0000009E E602                     M 	dc.b	$e6,$02
000000A0 E702                       	dc.b	smpsNoAttack, $02
000000A2                            	smpsAlterVol        $F8
000000A2 E6F8                     M 	dc.b	$e6,$f8
000000A4 D101 D00B CC01 CB30 E72D   	dc.b	nAb6, $01, nG6, $0B, nEb6, $01, nD6, $30, smpsNoAttack, $2D
000000AE                            	smpsAlterVol        $02
000000AE E602                     M 	dc.b	$e6,$02
000000B0 E702                       	dc.b	smpsNoAttack, $02
000000B2                            	smpsAlterVol        $02
000000B2 E602                     M 	dc.b	$e6,$02
000000B4 E702                       	dc.b	smpsNoAttack, $02
000000B6                            	smpsAlterVol        $02
000000B6 E602                     M 	dc.b	$e6,$02
000000B8 E702                       	dc.b	smpsNoAttack, $02
000000BA                            	smpsAlterVol        $02
000000BA E602                     M 	dc.b	$e6,$02
000000BC E702                       	dc.b	smpsNoAttack, $02
000000BE                            	smpsAlterVol        $F8
000000BE E6F8                     M 	dc.b	$e6,$f8
000000C0                            	smpsReturn
000000C0 E3                       M 	dc.b	$e3
000000C1                            
000000C1                            OOZ_Call04:
000000C1                            	smpsCall            OOZ_Call08
000000C1 F8                       M 	dc.b	$f8
000000C2 0000                     M 	dc.w	((ooz_call08&$7fff)<<8)&$ff00+(ooz_call08&$7fff)>>8
000000C4 CB1E CC06 CBC9 C812 C906+  	dc.b	nD6, $1E, nEb6, $06, nD6, nC6, nB5, $12, nC6, $06, nB5, $0C
000000D0 C5                         	dc.b	nAb5
000000D1                            	smpsCall            OOZ_Call08
000000D1 F8                       M 	dc.b	$f8
000000D2 0000                     M 	dc.w	((ooz_call08&$7fff)<<8)&$ff00+(ooz_call08&$7fff)>>8
000000D4 CE0C D006 CECC CBCC CBC9+  	dc.b	nF6, $0C, nG6, $06, nF6, nEb6, nD6, nEb6, nD6, nC6, nB5, $0C
000000E0 C506 C418                  	dc.b	nAb5, $06, nG5, $18
000000E4                            
000000E4                            OOZ_Loop09:
000000E4 C403 C5C8 06C9 C8C5 C40C+  	dc.b	nG5, $03, nAb5, nB5, $06, nC6, nB5, nAb5, nG5, $0C, $03, nAb5
000000F0 C806 C9C8 C5C4 18          	dc.b	nB5, $06, nC6, nB5, nAb5, nG5, $18
000000F7                            	smpsLoop            $01, $02, OOZ_Loop09
000000F7 F7                       M 	dc.b	$f7
000000F8 0102                     M 	dc.b	index,loops
000000FA 0000                     M 	dc.w	((ooz_loop09&$7fff)<<8)&$ff00+(ooz_loop09&$7fff)>>8
000000FC                            	smpsReturn
000000FC E3                       M 	dc.b	$e3
000000FD                            
000000FD                            OOZ_Call05:
000000FD                            	smpsCall            OOZ_Call07
000000FD F8                       M 	dc.b	$f8
000000FE 0000                     M 	dc.w	((ooz_call07&$7fff)<<8)&$ff00+(ooz_call07&$7fff)>>8
00000100 D001 CF0B CC01 CB1D        	dc.b	nG6, $01, nFs6, $0B, nEb6, $01, nD6, $1D
00000108                            	smpsCall            OOZ_Call07
00000108 F8                       M 	dc.b	$f8
00000109 0000                     M 	dc.w	((ooz_call07&$7fff)<<8)&$ff00+(ooz_call07&$7fff)>>8
0000010B CF01 CE0B D301 D21D        	dc.b	nFs6, $01, nF6, $0B, nBb6, $01, nA6, $1D
00000113                            	smpsReturn
00000113 E3                       M 	dc.b	$e3
00000114                            
00000114                            OOZ_Call07:
00000114 800C CA01 C905 CC01 CB05+  	dc.b	nRst, $0C, nCs6, $01, nC6, $05, nEb6, $01, nD6, $05, nE6, $01
00000120 CC05 CA01 C905 D101 D00B+  	dc.b	nEb6, $05, nCs6, $01, nC6, $05, nAb6, $01, nG6, $0B, nAb6, $01
0000012C D005                       	dc.b	nG6, $05
0000012E                            	smpsReturn
0000012E E3                       M 	dc.b	$e3
0000012F                            
0000012F                            OOZ_Call06:
0000012F DE03 DCDB D8DB D8D7 D6D7+  	dc.b	nA7, $03, nG7, nFs7, nEb7, nFs7, nEb7, nD7, nCs7, nD7, $18
0000013A                            	smpsReturn
0000013A E3                       M 	dc.b	$e3
0000013B                            
0000013B                            OOZ_Call08:
0000013B C41E C506 C8C9 CB1E CC06+  	dc.b	nG5, $1E, nAb5, $06, nB5, nC6, nD6, $1E, nEb6, $06, nF6, nEb6
00000147                            	smpsReturn
00000147 E3                       M 	dc.b	$e3
00000148                            
00000148                            ; FM2 Data
00000148                            OOZ_FM2:
00000148                            	smpsSetvoice        $00
00000148                          M 	smpsfmvoice	$00
00000148 EF00                     M 	dc.b	$ef,$00
0000014A 8006 8030 8080 2AB6 03B8   	dc.b	nRst, $06, nRst, $30, nRst, nRst, $2A, nF4, $03, nG4
00000154                            
00000154                            OOZ_Loop07:
00000154                            	smpsCall            OOZ_Call01
00000154 F8                       M 	dc.b	$f8
00000155 0000                     M 	dc.w	((ooz_call01&$7fff)<<8)&$ff00+(ooz_call01&$7fff)>>8
00000157 8012                       	dc.b	nRst, $12
00000159                            	smpsCall            OOZ_Call01
00000159 F8                       M 	dc.b	$f8
0000015A 0000                     M 	dc.w	((ooz_call01&$7fff)<<8)&$ff00+(ooz_call01&$7fff)>>8
0000015C 8006 B603 80B6 B8          	dc.b	nRst, $06, nF4, $03, nRst, nF4, nG4
00000163                            	smpsLoop            $00, $04, OOZ_Loop07
00000163 F7                       M 	dc.b	$f7
00000164 0004                     M 	dc.b	index,loops
00000166 0000                     M 	dc.w	((ooz_loop07&$7fff)<<8)&$ff00+(ooz_loop07&$7fff)>>8
00000168 B102 8001 B103 AC06 AFAC+  	dc.b	nC4, $02, nRst, $01, nC4, $03, nG3, $06, nBb3, nG3, nC4, $02
00000174 8001 B103 AC06 AFB1 B302+  	dc.b	nRst, $01, nC4, $03, nG3, $06, nBb3, nC4, nD4, $02, nRst, $01
00000180 B303 AE06 B1AE B302 8001+  	dc.b	nD4, $03, nA3, $06, nC4, nA3, nD4, $02, nRst, $01, nD4, $03
0000018C AE06 B1B3 B402 8001 B403+  	dc.b	nA3, $06, nC4, nD4, nEb4, $02, nRst, $01, nEb4, $03, nBb3, $06
00000198 B1AF B402 8001 B403 AF06+  	dc.b	nC4, nBb3, nEb4, $02, nRst, $01, nEb4, $03, nBb3, $06, nC4, nEb4
000001A4 B603 80B6 80B6 80B6 80B7+  	dc.b	nF4, $03, nRst, nF4, nRst, nF4, nRst, nF4, nRst, nFs4, nRst, nFs4
000001B0 80B7 80B7 8080 0CB3 24     	dc.b	nRst, nFs4, nRst, nFs4, nRst, nRst, $0C, nD4, $24
000001B9                            	smpsJump            OOZ_Loop07
000001B9 F6                       M 	dc.b	$f6
000001BA 0000                     M 	dc.w	((ooz_loop07&$7fff)<<8)&$ff00+(ooz_loop07&$7fff)>>8
000001BC                            
000001BC                            OOZ_Call01:
000001BC AC03 ACA7 06AA ABAC 8012+  	dc.b	nG3, $03, nG3, nD3, $06, nF3, nFs3, nG3, nRst, $12, nG3, $03
000001C8 03AF 06AE ADAC             	dc.b	$03, nBb3, $06, nA3, nAb3, nG3
000001CE                            	smpsReturn
000001CE E3                       M 	dc.b	$e3
000001CF                            
000001CF                            ; FM4 Data
000001CF                            OOZ_FM4:
000001CF                            	smpsSetvoice        $02
000001CF                          M 	smpsfmvoice	$02
000001CF EF02                     M 	dc.b	$ef,$02
000001D1                            	smpsPan             panRight, $00
000001D1 E040                     M 	dc.b	$e0,direction+amsfms
000001D3                            	smpsAlterPitch      $DC
000001D3                          M 	smpschangetransposition	$dc
000001D3 E9DC                     M 	dc.b	$e9,$dc
000001D5                            	smpsAlterVol        $F9
000001D5 E6F9                     M 	dc.b	$e6,$f9
000001D7                            	smpsCall            OOZ_Call00
000001D7 F8                       M 	dc.b	$f8
000001D8 0000                     M 	dc.w	((ooz_call00&$7fff)<<8)&$ff00+(ooz_call00&$7fff)>>8
000001DA                            	smpsAlterVol        $07
000001DA E607                     M 	dc.b	$e6,$07
000001DC B830                       	dc.b	nG4, $30
000001DE                            	smpsAlterPitch      $24
000001DE                          M 	smpschangetransposition	$24
000001DE E924                     M 	dc.b	$e9,$24
000001E0                            	smpsSetvoice        $01
000001E0                          M 	smpsfmvoice	$01
000001E0 EF01                     M 	dc.b	$ef,$01
000001E2                            	smpsPan             panCenter, $00
000001E2 E0C0                     M 	dc.b	$e0,direction+amsfms
000001E4                            
000001E4                            OOZ_Loop04:
000001E4 8006 BF03 80BF 80BF 80BE+  	dc.b	nRst, $06, nD5, $03, nRst, nD5, nRst, nD5, nRst, nCs5, $09, nD5
000001F0 0380 0C80 30               	dc.b	$03, nRst, $0C, nRst, $30
000001F5                            	smpsLoop            $00, $08, OOZ_Loop04
000001F5 F7                       M 	dc.b	$f7
000001F6 0008                     M 	dc.b	index,loops
000001F8 0000                     M 	dc.w	((ooz_loop04&$7fff)<<8)&$ff00+(ooz_loop04&$7fff)>>8
000001FA                            
000001FA                            OOZ_Loop05:
000001FA 8006 C703 C780 C780 06C7+  	dc.b	nRst, $06, nBb5, $03, nBb5, nRst, nBb5, nRst, $06, nBb5, $09, nBb5
00000206 0380 0C                    	dc.b	$03, nRst, $0C
00000209                            	smpsAlterPitch      $02
00000209                          M 	smpschangetransposition	$02
00000209 E902                     M 	dc.b	$e9,$02
0000020B                            	smpsLoop            $00, $03, OOZ_Loop05
0000020B F7                       M 	dc.b	$f7
0000020C 0003                     M 	dc.b	index,loops
0000020E 0000                     M 	dc.w	((ooz_loop05&$7fff)<<8)&$ff00+(ooz_loop05&$7fff)>>8
00000210                            	smpsAlterPitch      $FA
00000210                          M 	smpschangetransposition	$fa
00000210 E9FA                     M 	dc.b	$e9,$fa
00000212                            
00000212                            OOZ_Loop06:
00000212 C603 80                    	dc.b	nA5, $03, nRst
00000215                            	smpsLoop            $00, $08, OOZ_Loop06
00000215 F7                       M 	dc.b	$f7
00000216 0008                     M 	dc.b	index,loops
00000218 0000                     M 	dc.w	((ooz_loop06&$7fff)<<8)&$ff00+(ooz_loop06&$7fff)>>8
0000021A 8030                       	dc.b	nRst, $30
0000021C                            	smpsJump            OOZ_Loop04
0000021C F6                       M 	dc.b	$f6
0000021D 0000                     M 	dc.w	((ooz_loop04&$7fff)<<8)&$ff00+(ooz_loop04&$7fff)>>8
0000021F                            
0000021F                            OOZ_Call00:
0000021F 8006 80BF BDBC BDBC B9B8+  	dc.b	nRst, $06, nRst, nD5, nC5, nB4, nC5, nB4, nAb4, nG4, $0C, nD5
0000022B 06BD BCB8 12B6 06          	dc.b	$06, nC5, nB4, nG4, $12, nF4, $06
00000232                            	smpsReturn
00000232 E3                       M 	dc.b	$e3
00000233                            
00000233                            ; FM5 Data
00000233                            OOZ_FM5:
00000233                            	smpsSetvoice        $02
00000233                          M 	smpsfmvoice	$02
00000233 EF02                     M 	dc.b	$ef,$02
00000235                            	smpsPan             panLeft, $00
00000235 E080                     M 	dc.b	$e0,direction+amsfms
00000237                            	smpsAlterPitch      $E8
00000237                          M 	smpschangetransposition	$e8
00000237 E9E8                     M 	dc.b	$e9,$e8
00000239 8001                       	dc.b	nRst, $01
0000023B                            	smpsAlterVol        $F9
0000023B E6F9                     M 	dc.b	$e6,$f9
0000023D                            	smpsCall            OOZ_Call00
0000023D F8                       M 	dc.b	$f8
0000023E 0000                     M 	dc.w	((ooz_call00&$7fff)<<8)&$ff00+(ooz_call00&$7fff)>>8
00000240                            	smpsAlterVol        $07
00000240 E607                     M 	dc.b	$e6,$07
00000242 B82F                       	dc.b	nG4, $2F
00000244                            	smpsAlterPitch      $18
00000244                          M 	smpschangetransposition	$18
00000244 E918                     M 	dc.b	$e9,$18
00000246                            	smpsSetvoice        $01
00000246                          M 	smpsfmvoice	$01
00000246 EF01                     M 	dc.b	$ef,$01
00000248                            	smpsPan             panCenter, $00
00000248 E0C0                     M 	dc.b	$e0,direction+amsfms
0000024A                            
0000024A                            OOZ_Loop02:
0000024A 8006 BB03 80BB 80BB 80BA+  	dc.b	nRst, $06, nBb4, $03, nRst, nBb4, nRst, nBb4, nRst, nA4, $09, nBb4
00000256 0380 0C80 30               	dc.b	$03, nRst, $0C, nRst, $30
0000025B                            	smpsLoop            $00, $08, OOZ_Loop02
0000025B F7                       M 	dc.b	$f7
0000025C 0008                     M 	dc.b	index,loops
0000025E 0000                     M 	dc.w	((ooz_loop02&$7fff)<<8)&$ff00+(ooz_loop02&$7fff)>>8
00000260                            
00000260                            OOZ_Loop03:
00000260 8006 C403 C480 C480 06C4+  	dc.b	nRst, $06, nG5, $03, nG5, nRst, nG5, nRst, $06, nG5, $09, nG5
0000026C 0380 0C                    	dc.b	$03, nRst, $0C
0000026F                            	smpsAlterPitch      $02
0000026F                          M 	smpschangetransposition	$02
0000026F E902                     M 	dc.b	$e9,$02
00000271                            	smpsLoop            $00, $02, OOZ_Loop03
00000271 F7                       M 	dc.b	$f7
00000272 0002                     M 	dc.b	index,loops
00000274 0000                     M 	dc.w	((ooz_loop03&$7fff)<<8)&$ff00+(ooz_loop03&$7fff)>>8
00000276                            	smpsAlterPitch      $FC
00000276                          M 	smpschangetransposition	$fc
00000276 E9FC                     M 	dc.b	$e9,$fc
00000278 8006 C703 C780 C780 06C7+  	dc.b	nRst, $06, nBb5, $03, nBb5, nRst, nBb5, nRst, $06, nBb5, $09, nBb5
00000284 0380 0CC2 0380 C280 C280+  	dc.b	$03, nRst, $0C, nF5, $03, nRst, nF5, nRst, nF5, nRst, nF5, nRst
00000290 C380 C380 C380 C380 8030   	dc.b	nFs5, nRst, nFs5, nRst, nFs5, nRst, nFs5, nRst, nRst, $30
0000029A                            	smpsJump            OOZ_Loop02
0000029A F6                       M 	dc.b	$f6
0000029B 0000                     M 	dc.w	((ooz_loop02&$7fff)<<8)&$ff00+(ooz_loop02&$7fff)>>8
0000029D                            
0000029D                            ; FM3 Data
0000029D                            OOZ_FM3:
0000029D                            	smpsSetvoice        $03
0000029D                          M 	smpsfmvoice	$03
0000029D EF03                     M 	dc.b	$ef,$03
0000029F D503 D5D5 06D7 D7D5 D703+  	dc.b	nC7, $03, nC7, nC7, $06, nD7, nD7, nC7, nD7, $03, $03, nC7
000002AB 0606 D703 03D5 0606 06D7+  	dc.b	$06, $06, nD7, $03, $03, nC7, $06, $06, $06, nD7, $03, $03
000002B7 0303 D506 06D7 D503 D7D7+  	dc.b	$03, $03, nC7, $06, $06, nD7, nC7, $03, nD7, nD7, nD7, nD7
000002C3 06D5 D5D7 0303 D50C        	dc.b	$06, nC7, nC7, nD7, $03, $03, nC7, $0C
000002CB                            
000002CB                            OOZ_Loop01:
000002CB 801E D703 03D5 06D7 801E+  	dc.b	nRst, $1E, nD7, $03, $03, nC7, $06, nD7, nRst, $1E, nC7, $03
000002D7 03D7 06D5                  	dc.b	$03, nD7, $06, nC7
000002DB                            	smpsLoop            $00, $09, OOZ_Loop01
000002DB F7                       M 	dc.b	$f7
000002DC 0009                     M 	dc.b	index,loops
000002DE 0000                     M 	dc.w	((ooz_loop01&$7fff)<<8)&$ff00+(ooz_loop01&$7fff)>>8
000002E0 801E D703 03D5 06D7 8030+  	dc.b	nRst, $1E, nD7, $03, $03, nC7, $06, nD7, nRst, $30, nC7, $03
000002EC D7D7 D5D7 D7D5 D7D7 D5D7+  	dc.b	nD7, nD7, nC7, nD7, nD7, nC7, nD7, nD7, nC7, nD7, nD7, nC7
000002F8 06D7                       	dc.b	$06, nD7
000002FA                            	smpsJump            OOZ_Loop01
000002FA F6                       M 	dc.b	$f6
000002FB 0000                     M 	dc.w	((ooz_loop01&$7fff)<<8)&$ff00+(ooz_loop01&$7fff)>>8
000002FD                            
000002FD                            ; PSG1 Data
000002FD                            OOZ_PSG1:
000002FD                            	smpsAlterNote       $01
000002FD                          M 	smpsdetune	$01
000002FD E101                     M 	dc.b	$e1,$01
000002FF 8002 8001                  	dc.b	nRst, $02, nRst, $01
00000303                            	smpsCall            OOZ_Call02
00000303 F8                       M 	dc.b	$f8
00000304 0000                     M 	dc.w	((ooz_call02&$7fff)<<8)&$ff00+(ooz_call02&$7fff)>>8
00000306                            
00000306                            OOZ_Jump02:
00000306                            	smpsPSGAlterVol     $03
00000306 EC03                     M 	dc.b	$ec,$03
00000308 8060 60                    	dc.b	nRst, $60, $60
0000030B                            	smpsPSGvoice        $00
0000030B F500                     M 	dc.b	$f5,$00
0000030D                            	smpsPSGAlterVol     $FD
0000030D ECFD                     M 	dc.b	$ec,$fd
0000030F                            	smpsCall            OOZ_Call04
0000030F F8                       M 	dc.b	$f8
00000310 0000                     M 	dc.w	((ooz_call04&$7fff)<<8)&$ff00+(ooz_call04&$7fff)>>8
00000312                            	smpsCall            OOZ_Call05
00000312 F8                       M 	dc.b	$f8
00000313 0000                     M 	dc.w	((ooz_call05&$7fff)<<8)&$ff00+(ooz_call05&$7fff)>>8
00000315                            	smpsAlterPitch      $F4
00000315                          M 	smpschangetransposition	$f4
00000315 E9F4                     M 	dc.b	$e9,$f4
00000317                            	smpsCall            OOZ_Call06
00000317 F8                       M 	dc.b	$f8
00000318 0000                     M 	dc.w	((ooz_call06&$7fff)<<8)&$ff00+(ooz_call06&$7fff)>>8
0000031A                            	smpsAlterPitch      $0C
0000031A                          M 	smpschangetransposition	$0c
0000031A E90C                     M 	dc.b	$e9,$0c
0000031C                            	smpsJump            OOZ_Jump02
0000031C F6                       M 	dc.b	$f6
0000031D 0000                     M 	dc.w	((ooz_jump02&$7fff)<<8)&$ff00+(ooz_jump02&$7fff)>>8
0000031F                            
0000031F                            ; PSG2 Data
0000031F                            OOZ_PSG2:
0000031F 8001                       	dc.b	nRst, $01
00000321                            	smpsCall            OOZ_Call02
00000321 F8                       M 	dc.b	$f8
00000322 0000                     M 	dc.w	((ooz_call02&$7fff)<<8)&$ff00+(ooz_call02&$7fff)>>8
00000324                            
00000324                            OOZ_Jump01:
00000324                            	smpsPSGAlterVol     $03
00000324 EC03                     M 	dc.b	$ec,$03
00000326 8018 8003 8001             	dc.b	nRst, $18, nRst, $03, nRst, $01
0000032C                            	smpsPSGvoice        fTone_0C
0000032C F50C                     M 	dc.b	$f5,ftone_0c
0000032E                            	smpsAlterVol        $FE
0000032E E6FE                     M 	dc.b	$e6,$fe
00000330 C901 CB02 CC02 CF2D D101+  	dc.b	nC6, $01, nD6, $02, nEb6, $02, nFs6, $2D, nAb6, $01, nG6, $0B
0000033C CC01 CB30 E730 E705        	dc.b	nEb6, $01, nD6, $30, smpsNoAttack, $30, smpsNoAttack, $05
00000344                            	smpsAlterVol        $02
00000344 E602                     M 	dc.b	$e6,$02
00000346                            	smpsPSGvoice        $00
00000346 F500                     M 	dc.b	$f5,$00
00000348                            	smpsPSGAlterVol     $FD
00000348 ECFD                     M 	dc.b	$ec,$fd
0000034A                            	smpsCall            OOZ_Call04
0000034A F8                       M 	dc.b	$f8
0000034B 0000                     M 	dc.w	((ooz_call04&$7fff)<<8)&$ff00+(ooz_call04&$7fff)>>8
0000034D                            	smpsCall            OOZ_Call05
0000034D F8                       M 	dc.b	$f8
0000034E 0000                     M 	dc.w	((ooz_call05&$7fff)<<8)&$ff00+(ooz_call05&$7fff)>>8
00000350                            	smpsAlterPitch      $F4
00000350                          M 	smpschangetransposition	$f4
00000350 E9F4                     M 	dc.b	$e9,$f4
00000352                            	smpsCall            OOZ_Call06
00000352 F8                       M 	dc.b	$f8
00000353 0000                     M 	dc.w	((ooz_call06&$7fff)<<8)&$ff00+(ooz_call06&$7fff)>>8
00000355                            	smpsAlterPitch      $0C
00000355                          M 	smpschangetransposition	$0c
00000355 E90C                     M 	dc.b	$e9,$0c
00000357                            	smpsJump            OOZ_Jump01
00000357 F6                       M 	dc.b	$f6
00000358 0000                     M 	dc.w	((ooz_jump01&$7fff)<<8)&$ff00+(ooz_jump01&$7fff)>>8
0000035A                            
0000035A                            ; PSG3 Data
0000035A                            OOZ_PSG3:
0000035A 8006 8030 C103 80C1 0380+  	dc.b	nRst, $06, nRst, $30, nE5, $03, nRst, nE5, $03, nRst, $0F, nE5
00000366 0380 09C1 0380 8006 C103+  	dc.b	$03, nRst, $09, nE5, $03, nRst, nRst, $06, nE5, $03, nRst, nE5
00000372 0380 0FC1 0380 C103 80C1+  	dc.b	$03, nRst, $0F, nE5, $03, nRst, nE5, $03, nRst, nE5, $03, $03
0000037E 8006 C103 80C1 0380 0380+  	dc.b	nRst, $06, nE5, $03, nRst, nE5, $03, nRst, $03, nRst, $18, nRst
0000038A 0C                         	dc.b	$0C
0000038B                            
0000038B                            OOZ_Loop08:
0000038B C103 C1C1 80C1 80C1 C1C1+  	dc.b	nE5, $03, nE5, nE5, nRst, nE5, nRst, nE5, nE5, nE5, nE5, nE5
00000397 80C1 80C1 80C1 C1C1 80C1+  	dc.b	nRst, nE5, nRst, nE5, nRst, nE5, nE5, nE5, nRst, nE5, nRst, nE5
000003A3 C1C1 C1C1 80C1 80C1 C1     	dc.b	nE5, nE5, nE5, nE5, nRst, nE5, nRst, nE5, nE5
000003AC                            	smpsLoop            $00, $0A, OOZ_Loop08
000003AC F7                       M 	dc.b	$f7
000003AD 000A                     M 	dc.b	index,loops
000003AF 0000                     M 	dc.w	((ooz_loop08&$7fff)<<8)&$ff00+(ooz_loop08&$7fff)>>8
000003B1 8030                       	dc.b	nRst, $30
000003B3                            	smpsJump            OOZ_Loop08
000003B3 F6                       M 	dc.b	$f6
000003B4 0000                     M 	dc.w	((ooz_loop08&$7fff)<<8)&$ff00+(ooz_loop08&$7fff)>>8
000003B6                            
000003B6                            ; DAC Data
000003B6                            OOZ_DAC:
000003B6 8006 8030 8080 2A82 06     	dc.b	nRst, $06, nRst, $30, nRst, nRst, $2A, dSnare, $06
000003BF                            
000003BF                            OOZ_Loop00:
000003BF 8103 8181 8082 0906 8103+  	dc.b	dKick, $03, dKick, dKick, nRst, dSnare, $09, $06, dKick, $03, dKick, nRst
000003CB 8206 8103 8081 8181 8082+  	dc.b	dSnare, $06, dKick, $03, nRst, dKick, dKick, dKick, nRst, dSnare, $09, $06
000003D7 8103 8180 8206 0303        	dc.b	dKick, $03, dKick, nRst, dSnare, $06, $03, $03
000003DF                            	smpsLoop            $00, $0A, OOZ_Loop00
000003DF F7                       M 	dc.b	$f7
000003E0 000A                     M 	dc.b	index,loops
000003E2 0000                     M 	dc.w	((ooz_loop00&$7fff)<<8)&$ff00+(ooz_loop00&$7fff)>>8
000003E4 8024 8203 0381 06          	dc.b	nRst, $24, dSnare, $03, $03, dKick, $06
000003EB                            	smpsJump            OOZ_Loop00
000003EB F6                       M 	dc.b	$f6
000003EC 0000                     M 	dc.w	((ooz_loop00&$7fff)<<8)&$ff00+(ooz_loop00&$7fff)>>8
000003EE                            
000003EE                            OOZ_Voices:
000003EE                            ;	Voice $00
000003EE                            ;	$39
000003EE                            ;	$06, $60, $30, $01, 	$3F, $3F, $5F, $5F, 	$11, $0F, $13, $09
000003EE                            ;	$05, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$23, $2C, $97, $80
000003EE                            	smpsVcAlgorithm     $01
000003EE =00000001                M vcalgorithm	=	val
000003EE                            	smpsVcFeedback      $07
000003EE =00000007                M vcfeedback	=	val
000003EE                            	smpsVcUnusedBits    $00
000003EE =00000000                M vcunusedbits	=	val
000003EE =00000000                M vcd1r1unk	=	0
000003EE =00000000                M vcd1r2unk	=	0
000003EE =00000000                M vcd1r3unk	=	0
000003EE =00000000                M vcd1r4unk	=	0
000003EE                            	smpsVcDetune        $00, $03, $06, $00
000003EE =00000000                M vcdt1	=	op1
000003EE =00000003                M vcdt2	=	op2
000003EE =00000006                M vcdt3	=	op3
000003EE =00000000                M vcdt4	=	op4
000003EE                            	smpsVcCoarseFreq    $01, $00, $00, $06
000003EE =00000001                M vccf1	=	op1
000003EE =00000000                M vccf2	=	op2
000003EE =00000000                M vccf3	=	op3
000003EE =00000006                M vccf4	=	op4
000003EE                            	smpsVcRateScale     $01, $01, $00, $00
000003EE =00000001                M vcrs1	=	op1
000003EE =00000001                M vcrs2	=	op2
000003EE =00000000                M vcrs3	=	op3
000003EE =00000000                M vcrs4	=	op4
000003EE                            	smpsVcAttackRate    $1F, $1F, $3F, $3F
000003EE =0000001F                M vcar1	=	op1
000003EE =0000001F                M vcar2	=	op2
000003EE =0000003F                M vcar3	=	op3
000003EE =0000003F                M vcar4	=	op4
000003EE                            	smpsVcAmpMod        $00, $00, $00, $00
000003EE =00000000                M vcam1	=	op1<<7
000003EE =00000000                M vcam2	=	op2<<7
000003EE =00000000                M vcam3	=	op3<<7
000003EE =00000000                M vcam4	=	op4<<7
000003EE                            	smpsVcDecayRate1    $09, $13, $0F, $11
000003EE =00000009                M vcd1r1	=	op1
000003EE =00000013                M vcd1r2	=	op2
000003EE =0000000F                M vcd1r3	=	op3
000003EE =00000011                M vcd1r4	=	op4
000003EE                            	smpsVcDecayRate2    $03, $04, $04, $05
000003EE =00000003                M vcd2r1	=	op1
000003EE =00000004                M vcd2r2	=	op2
000003EE =00000004                M vcd2r3	=	op3
000003EE =00000005                M vcd2r4	=	op4
000003EE                            	smpsVcDecayLevel    $02, $02, $02, $02
000003EE =00000002                M vcdl1	=	op1
000003EE =00000002                M vcdl2	=	op2
000003EE =00000002                M vcdl3	=	op3
000003EE =00000002                M vcdl4	=	op4
000003EE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003EE =0000000F                M vcrr1	=	op1
000003EE =0000000F                M vcrr2	=	op2
000003EE =0000000F                M vcrr3	=	op3
000003EE =0000000F                M vcrr4	=	op4
000003EE                            	smpsVcTotalLevel    $80, $97, $2C, $23
000003EE =00000080                M vctl1	=	op1
000003EE =00000097                M vctl2	=	op2
000003EE =0000002C                M vctl3	=	op3
000003EE =00000023                M vctl4	=	op4
000003EE 39                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003EF =00000000                M vctlmask4	=	0
000003EF =00000000                M vctlmask3	=	0
000003EF =00000000                M vctlmask2	=	0
000003EF =00000000                M vctlmask1	=	0
000003EF 0630 6001                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003F3 3F5F 3F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003F7 1113 0F09                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003FB 0504 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003FF 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000403 2397 2C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000407                            
00000407                            ;	Voice $01
00000407                            ;	$3A
00000407                            ;	$01, $07, $01, $01, 	$92, $91, $8F, $56, 	$0E, $0E, $0E, $03
00000407                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
00000407                            	smpsVcAlgorithm     $02
00000407 =00000002                M vcalgorithm	=	val
00000407                            	smpsVcFeedback      $07
00000407 =00000007                M vcfeedback	=	val
00000407                            	smpsVcUnusedBits    $00
00000407 =00000000                M vcunusedbits	=	val
00000407 =00000000                M vcd1r1unk	=	0
00000407 =00000000                M vcd1r2unk	=	0
00000407 =00000000                M vcd1r3unk	=	0
00000407 =00000000                M vcd1r4unk	=	0
00000407                            	smpsVcDetune        $00, $00, $00, $00
00000407 =00000000                M vcdt1	=	op1
00000407 =00000000                M vcdt2	=	op2
00000407 =00000000                M vcdt3	=	op3
00000407 =00000000                M vcdt4	=	op4
00000407                            	smpsVcCoarseFreq    $01, $01, $07, $01
00000407 =00000001                M vccf1	=	op1
00000407 =00000001                M vccf2	=	op2
00000407 =00000007                M vccf3	=	op3
00000407 =00000001                M vccf4	=	op4
00000407                            	smpsVcRateScale     $01, $02, $02, $02
00000407 =00000001                M vcrs1	=	op1
00000407 =00000002                M vcrs2	=	op2
00000407 =00000002                M vcrs3	=	op3
00000407 =00000002                M vcrs4	=	op4
00000407                            	smpsVcAttackRate    $16, $0F, $11, $12
00000407 =00000016                M vcar1	=	op1
00000407 =0000000F                M vcar2	=	op2
00000407 =00000011                M vcar3	=	op3
00000407 =00000012                M vcar4	=	op4
00000407                            	smpsVcAmpMod        $00, $00, $00, $00
00000407 =00000000                M vcam1	=	op1<<7
00000407 =00000000                M vcam2	=	op2<<7
00000407 =00000000                M vcam3	=	op3<<7
00000407 =00000000                M vcam4	=	op4<<7
00000407                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00000407 =00000003                M vcd1r1	=	op1
00000407 =0000000E                M vcd1r2	=	op2
00000407 =0000000E                M vcd1r3	=	op3
00000407 =0000000E                M vcd1r4	=	op4
00000407                            	smpsVcDecayRate2    $00, $00, $00, $00
00000407 =00000000                M vcd2r1	=	op1
00000407 =00000000                M vcd2r2	=	op2
00000407 =00000000                M vcd2r3	=	op3
00000407 =00000000                M vcd2r4	=	op4
00000407                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000407 =00000000                M vcdl1	=	op1
00000407 =00000001                M vcdl2	=	op2
00000407 =0000000F                M vcdl3	=	op3
00000407 =00000001                M vcdl4	=	op4
00000407                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000407 =0000000F                M vcrr1	=	op1
00000407 =0000000F                M vcrr2	=	op2
00000407 =0000000F                M vcrr3	=	op3
00000407 =0000000F                M vcrr4	=	op4
00000407                            	smpsVcTotalLevel    $80, $27, $28, $17
00000407 =00000080                M vctl1	=	op1
00000407 =00000027                M vctl2	=	op2
00000407 =00000028                M vctl3	=	op3
00000407 =00000017                M vctl4	=	op4
00000407 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000408 =00000000                M vctlmask4	=	0
00000408 =00000000                M vctlmask3	=	0
00000408 =00000000                M vctlmask2	=	0
00000408 =00000000                M vctlmask1	=	0
00000408 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000040C 928F 9156                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000410 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000414 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000418 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000041C 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000420                            
00000420                            ;	Voice $02
00000420                            ;	$3E
00000420                            ;	$56, $16, $34, $14, 	$4E, $55, $95, $58, 	$0E, $11, $14, $24
00000420                            ;	$23, $22, $06, $05, 	$3F, $4F, $2F, $0F, 	$19, $8E, $87, $87
00000420                            	smpsVcAlgorithm     $06
00000420 =00000006                M vcalgorithm	=	val
00000420                            	smpsVcFeedback      $07
00000420 =00000007                M vcfeedback	=	val
00000420                            	smpsVcUnusedBits    $00, $01, $00, $00, $00
00000420 =00000000                M vcunusedbits	=	val
00000420 =00000020                M vcd1r1unk	=	d1r1<<5
00000420 =00000000                M vcd1r2unk	=	d1r2<<5
00000420 =00000000                M vcd1r3unk	=	d1r3<<5
00000420 =00000000                M vcd1r4unk	=	d1r4<<5
00000420                            	smpsVcDetune        $01, $03, $01, $05
00000420 =00000001                M vcdt1	=	op1
00000420 =00000003                M vcdt2	=	op2
00000420 =00000001                M vcdt3	=	op3
00000420 =00000005                M vcdt4	=	op4
00000420                            	smpsVcCoarseFreq    $04, $04, $06, $06
00000420 =00000004                M vccf1	=	op1
00000420 =00000004                M vccf2	=	op2
00000420 =00000006                M vccf3	=	op3
00000420 =00000006                M vccf4	=	op4
00000420                            	smpsVcRateScale     $01, $02, $01, $01
00000420 =00000001                M vcrs1	=	op1
00000420 =00000002                M vcrs2	=	op2
00000420 =00000001                M vcrs3	=	op3
00000420 =00000001                M vcrs4	=	op4
00000420                            	smpsVcAttackRate    $18, $15, $15, $0E
00000420 =00000018                M vcar1	=	op1
00000420 =00000015                M vcar2	=	op2
00000420 =00000015                M vcar3	=	op3
00000420 =0000000E                M vcar4	=	op4
00000420                            	smpsVcAmpMod        $00, $00, $00, $00
00000420 =00000000                M vcam1	=	op1<<7
00000420 =00000000                M vcam2	=	op2<<7
00000420 =00000000                M vcam3	=	op3<<7
00000420 =00000000                M vcam4	=	op4<<7
00000420                            	smpsVcDecayRate1    $04, $14, $11, $0E
00000420 =00000004                M vcd1r1	=	op1
00000420 =00000014                M vcd1r2	=	op2
00000420 =00000011                M vcd1r3	=	op3
00000420 =0000000E                M vcd1r4	=	op4
00000420                            	smpsVcDecayRate2    $05, $06, $22, $23
00000420 =00000005                M vcd2r1	=	op1
00000420 =00000006                M vcd2r2	=	op2
00000420 =00000022                M vcd2r3	=	op3
00000420 =00000023                M vcd2r4	=	op4
00000420                            	smpsVcDecayLevel    $00, $02, $04, $03
00000420 =00000000                M vcdl1	=	op1
00000420 =00000002                M vcdl2	=	op2
00000420 =00000004                M vcdl3	=	op3
00000420 =00000003                M vcdl4	=	op4
00000420                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000420 =0000000F                M vcrr1	=	op1
00000420 =0000000F                M vcrr2	=	op2
00000420 =0000000F                M vcrr3	=	op3
00000420 =0000000F                M vcrr4	=	op4
00000420                            	smpsVcTotalLevel    $87, $87, $8E, $19
00000420 =00000087                M vctl1	=	op1
00000420 =00000087                M vctl2	=	op2
00000420 =0000008E                M vctl3	=	op3
00000420 =00000019                M vctl4	=	op4
00000420 3E                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000421 =00000000                M vctlmask4	=	0
00000421 =00000000                M vctlmask3	=	0
00000421 =00000000                M vctlmask2	=	0
00000421 =00000000                M vctlmask1	=	0
00000421 5634 1614                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000425 4E95 5558                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000429 0E14 1124                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000042D 2306 2205                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000431 3F2F 4F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000435 1987 8E87                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000439                            
00000439                            ;	Voice $03
00000439                            ;	$36
00000439                            ;	$01, $00, $72, $33, 	$9C, $9C, $17, $12, 	$0F, $14, $12, $12
00000439                            ;	$00, $00, $0A, $0A, 	$FF, $FF, $FF, $FF, 	$05, $80, $80, $80
00000439                            	smpsVcAlgorithm     $06
00000439 =00000006                M vcalgorithm	=	val
00000439                            	smpsVcFeedback      $06
00000439 =00000006                M vcfeedback	=	val
00000439                            	smpsVcUnusedBits    $00
00000439 =00000000                M vcunusedbits	=	val
00000439 =00000000                M vcd1r1unk	=	0
00000439 =00000000                M vcd1r2unk	=	0
00000439 =00000000                M vcd1r3unk	=	0
00000439 =00000000                M vcd1r4unk	=	0
00000439                            	smpsVcDetune        $03, $07, $00, $00
00000439 =00000003                M vcdt1	=	op1
00000439 =00000007                M vcdt2	=	op2
00000439 =00000000                M vcdt3	=	op3
00000439 =00000000                M vcdt4	=	op4
00000439                            	smpsVcCoarseFreq    $03, $02, $00, $01
00000439 =00000003                M vccf1	=	op1
00000439 =00000002                M vccf2	=	op2
00000439 =00000000                M vccf3	=	op3
00000439 =00000001                M vccf4	=	op4
00000439                            	smpsVcRateScale     $00, $00, $02, $02
00000439 =00000000                M vcrs1	=	op1
00000439 =00000000                M vcrs2	=	op2
00000439 =00000002                M vcrs3	=	op3
00000439 =00000002                M vcrs4	=	op4
00000439                            	smpsVcAttackRate    $12, $17, $1C, $1C
00000439 =00000012                M vcar1	=	op1
00000439 =00000017                M vcar2	=	op2
00000439 =0000001C                M vcar3	=	op3
00000439 =0000001C                M vcar4	=	op4
00000439                            	smpsVcAmpMod        $00, $00, $00, $00
00000439 =00000000                M vcam1	=	op1<<7
00000439 =00000000                M vcam2	=	op2<<7
00000439 =00000000                M vcam3	=	op3<<7
00000439 =00000000                M vcam4	=	op4<<7
00000439                            	smpsVcDecayRate1    $12, $12, $14, $0F
00000439 =00000012                M vcd1r1	=	op1
00000439 =00000012                M vcd1r2	=	op2
00000439 =00000014                M vcd1r3	=	op3
00000439 =0000000F                M vcd1r4	=	op4
00000439                            	smpsVcDecayRate2    $0A, $0A, $00, $00
00000439 =0000000A                M vcd2r1	=	op1
00000439 =0000000A                M vcd2r2	=	op2
00000439 =00000000                M vcd2r3	=	op3
00000439 =00000000                M vcd2r4	=	op4
00000439                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00000439 =0000000F                M vcdl1	=	op1
00000439 =0000000F                M vcdl2	=	op2
00000439 =0000000F                M vcdl3	=	op3
00000439 =0000000F                M vcdl4	=	op4
00000439                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000439 =0000000F                M vcrr1	=	op1
00000439 =0000000F                M vcrr2	=	op2
00000439 =0000000F                M vcrr3	=	op3
00000439 =0000000F                M vcrr4	=	op4
00000439                            	smpsVcTotalLevel    $80, $80, $80, $05
00000439 =00000080                M vctl1	=	op1
00000439 =00000080                M vctl2	=	op2
00000439 =00000080                M vctl3	=	op3
00000439 =00000005                M vctl4	=	op4
00000439 36                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000043A =00000000                M vctlmask4	=	0
0000043A =00000000                M vctlmask3	=	0
0000043A =00000000                M vctlmask2	=	0
0000043A =00000000                M vctlmask1	=	0
0000043A 0172 0033                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000043E 9C17 9C12                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000442 0F12 1412                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000446 000A 000A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000044A FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000044E 0580 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000452                            
00000452                            ;	Voice $04
00000452                            ;	$06
00000452                            ;	$62, $23, $13, $71, 	$0D, $0D, $6D, $0E, 	$09, $06, $06, $06
00000452                            ;	$00, $00, $00, $00, 	$1F, $2F, $2F, $2F, 	$10, $94, $97, $80
00000452                            	smpsVcAlgorithm     $06
00000452 =00000006                M vcalgorithm	=	val
00000452                            	smpsVcFeedback      $00
00000452 =00000000                M vcfeedback	=	val
00000452                            	smpsVcUnusedBits    $00
00000452 =00000000                M vcunusedbits	=	val
00000452 =00000000                M vcd1r1unk	=	0
00000452 =00000000                M vcd1r2unk	=	0
00000452 =00000000                M vcd1r3unk	=	0
00000452 =00000000                M vcd1r4unk	=	0
00000452                            	smpsVcDetune        $07, $01, $02, $06
00000452 =00000007                M vcdt1	=	op1
00000452 =00000001                M vcdt2	=	op2
00000452 =00000002                M vcdt3	=	op3
00000452 =00000006                M vcdt4	=	op4
00000452                            	smpsVcCoarseFreq    $01, $03, $03, $02
00000452 =00000001                M vccf1	=	op1
00000452 =00000003                M vccf2	=	op2
00000452 =00000003                M vccf3	=	op3
00000452 =00000002                M vccf4	=	op4
00000452                            	smpsVcRateScale     $00, $01, $00, $00
00000452 =00000000                M vcrs1	=	op1
00000452 =00000001                M vcrs2	=	op2
00000452 =00000000                M vcrs3	=	op3
00000452 =00000000                M vcrs4	=	op4
00000452                            	smpsVcAttackRate    $0E, $2D, $0D, $0D
00000452 =0000000E                M vcar1	=	op1
00000452 =0000002D                M vcar2	=	op2
00000452 =0000000D                M vcar3	=	op3
00000452 =0000000D                M vcar4	=	op4
00000452                            	smpsVcAmpMod        $00, $00, $00, $00
00000452 =00000000                M vcam1	=	op1<<7
00000452 =00000000                M vcam2	=	op2<<7
00000452 =00000000                M vcam3	=	op3<<7
00000452 =00000000                M vcam4	=	op4<<7
00000452                            	smpsVcDecayRate1    $06, $06, $06, $09
00000452 =00000006                M vcd1r1	=	op1
00000452 =00000006                M vcd1r2	=	op2
00000452 =00000006                M vcd1r3	=	op3
00000452 =00000009                M vcd1r4	=	op4
00000452                            	smpsVcDecayRate2    $00, $00, $00, $00
00000452 =00000000                M vcd2r1	=	op1
00000452 =00000000                M vcd2r2	=	op2
00000452 =00000000                M vcd2r3	=	op3
00000452 =00000000                M vcd2r4	=	op4
00000452                            	smpsVcDecayLevel    $02, $02, $02, $01
00000452 =00000002                M vcdl1	=	op1
00000452 =00000002                M vcdl2	=	op2
00000452 =00000002                M vcdl3	=	op3
00000452 =00000001                M vcdl4	=	op4
00000452                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000452 =0000000F                M vcrr1	=	op1
00000452 =0000000F                M vcrr2	=	op2
00000452 =0000000F                M vcrr3	=	op3
00000452 =0000000F                M vcrr4	=	op4
00000452                            	smpsVcTotalLevel    $80, $97, $94, $10
00000452 =00000080                M vctl1	=	op1
00000452 =00000097                M vctl2	=	op2
00000452 =00000094                M vctl3	=	op3
00000452 =00000010                M vctl4	=	op4
00000452 06                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000453 =00000000                M vctlmask4	=	0
00000453 =00000000                M vctlmask3	=	0
00000453 =00000000                M vctlmask2	=	0
00000453 =00000000                M vctlmask1	=	0
00000453 6213 2371                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000457 0D6D 0D0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000045B 0906 0606                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000045F 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000463 1F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000467 1097 9480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000046B                            
0000046B                            ;	Voice $05
0000046B                            ;	$14
0000046B                            ;	$58, $16, $38, $16, 	$51, $5E, $8E, $4F, 	$0E, $0A, $04, $04
0000046B                            ;	$03, $02, $00, $00, 	$3F, $4F, $2F, $0F, 	$0F, $90, $33, $80
0000046B                            	smpsVcAlgorithm     $04
0000046B =00000004                M vcalgorithm	=	val
0000046B                            	smpsVcFeedback      $02
0000046B =00000002                M vcfeedback	=	val
0000046B                            	smpsVcUnusedBits    $00
0000046B =00000000                M vcunusedbits	=	val
0000046B =00000000                M vcd1r1unk	=	0
0000046B =00000000                M vcd1r2unk	=	0
0000046B =00000000                M vcd1r3unk	=	0
0000046B =00000000                M vcd1r4unk	=	0
0000046B                            	smpsVcDetune        $01, $03, $01, $05
0000046B =00000001                M vcdt1	=	op1
0000046B =00000003                M vcdt2	=	op2
0000046B =00000001                M vcdt3	=	op3
0000046B =00000005                M vcdt4	=	op4
0000046B                            	smpsVcCoarseFreq    $06, $08, $06, $08
0000046B =00000006                M vccf1	=	op1
0000046B =00000008                M vccf2	=	op2
0000046B =00000006                M vccf3	=	op3
0000046B =00000008                M vccf4	=	op4
0000046B                            	smpsVcRateScale     $01, $02, $01, $01
0000046B =00000001                M vcrs1	=	op1
0000046B =00000002                M vcrs2	=	op2
0000046B =00000001                M vcrs3	=	op3
0000046B =00000001                M vcrs4	=	op4
0000046B                            	smpsVcAttackRate    $0F, $0E, $1E, $11
0000046B =0000000F                M vcar1	=	op1
0000046B =0000000E                M vcar2	=	op2
0000046B =0000001E                M vcar3	=	op3
0000046B =00000011                M vcar4	=	op4
0000046B                            	smpsVcAmpMod        $00, $00, $00, $00
0000046B =00000000                M vcam1	=	op1<<7
0000046B =00000000                M vcam2	=	op2<<7
0000046B =00000000                M vcam3	=	op3<<7
0000046B =00000000                M vcam4	=	op4<<7
0000046B                            	smpsVcDecayRate1    $04, $04, $0A, $0E
0000046B =00000004                M vcd1r1	=	op1
0000046B =00000004                M vcd1r2	=	op2
0000046B =0000000A                M vcd1r3	=	op3
0000046B =0000000E                M vcd1r4	=	op4
0000046B                            	smpsVcDecayRate2    $00, $00, $02, $03
0000046B =00000000                M vcd2r1	=	op1
0000046B =00000000                M vcd2r2	=	op2
0000046B =00000002                M vcd2r3	=	op3
0000046B =00000003                M vcd2r4	=	op4
0000046B                            	smpsVcDecayLevel    $00, $02, $04, $03
0000046B =00000000                M vcdl1	=	op1
0000046B =00000002                M vcdl2	=	op2
0000046B =00000004                M vcdl3	=	op3
0000046B =00000003                M vcdl4	=	op4
0000046B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000046B =0000000F                M vcrr1	=	op1
0000046B =0000000F                M vcrr2	=	op2
0000046B =0000000F                M vcrr3	=	op3
0000046B =0000000F                M vcrr4	=	op4
0000046B                            	smpsVcTotalLevel    $80, $33, $90, $0F
0000046B =00000080                M vctl1	=	op1
0000046B =00000033                M vctl2	=	op2
0000046B =00000090                M vctl3	=	op3
0000046B =0000000F                M vctl4	=	op4
0000046B 14                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000046C =00000000                M vctlmask4	=	0
0000046C =00000000                M vctlmask3	=	0
0000046C =00000000                M vctlmask2	=	0
0000046C =00000000                M vctlmask1	=	0
0000046C 5838 1616                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000470 518E 5E4F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000474 0E04 0A04                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000478 0300 0200                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000047C 3F2F 4F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000480 0F33 9080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000484                            
00000484                          M 	pops
00000000                            		inc_music	WFZ
00000000                          M 	pushs
00000000                          M music_1457:	section	org($1380),file("sound/music/compressed/wfz.unc"),over(header)
00000000                          M 	include	"sound/music/wfz.asm"
00000000                            WFZ_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     WFZ_Voices
00000000 0000                     M 	dc.w	((wfz_voices&$7fff)<<8)&$ff00+(wfz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $88
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$88
00000005 88                       M 	dc.b	$88
00000006                            
00000006                            	smpsHeaderDAC       WFZ_DAC
00000006                          M 	checkedchannelpointer	wfz_dac
00000006 0000                     M 	dc.w	((wfz_dac&$7fff)<<8)&$ff00+(wfz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        WFZ_FM1,	$00, $08
0000000A                          M 	checkedchannelpointer	wfz_fm1
0000000A 0000                     M 	dc.w	((wfz_fm1&$7fff)<<8)&$ff00+(wfz_fm1&$7fff)>>8
0000000C 0008                     M 	dc.b	$00,$08
0000000E                            	smpsHeaderFM        WFZ_FM2,	$00, $06
0000000E                          M 	checkedchannelpointer	wfz_fm2
0000000E 0000                     M 	dc.w	((wfz_fm2&$7fff)<<8)&$ff00+(wfz_fm2&$7fff)>>8
00000010 0006                     M 	dc.b	$00,$06
00000012                            	smpsHeaderFM        WFZ_FM3,	$0C, $06
00000012                          M 	checkedchannelpointer	wfz_fm3
00000012 0000                     M 	dc.w	((wfz_fm3&$7fff)<<8)&$ff00+(wfz_fm3&$7fff)>>8
00000014 0C06                     M 	dc.b	$0c,$06
00000016                            	smpsHeaderFM        WFZ_FM4,	$18, $08
00000016                          M 	checkedchannelpointer	wfz_fm4
00000016 0000                     M 	dc.w	((wfz_fm4&$7fff)<<8)&$ff00+(wfz_fm4&$7fff)>>8
00000018 1808                     M 	dc.b	$18,$08
0000001A                            	smpsHeaderFM        WFZ_FM5,	$00, $06
0000001A                          M 	checkedchannelpointer	wfz_fm5
0000001A 0000                     M 	dc.w	((wfz_fm5&$7fff)<<8)&$ff00+(wfz_fm5&$7fff)>>8
0000001C 0006                     M 	dc.b	$00,$06
0000001E                            	smpsHeaderPSG       WFZ_PSG1,	$00, $00, $00, $00
0000001E                          M 	checkedchannelpointer	wfz_psg1
0000001E 0000                     M 	dc.w	((wfz_psg1&$7fff)<<8)&$ff00+(wfz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$00
00000020 00                       M 	dc.b	$00
00000021 00                       M 	dc.b	$00
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       WFZ_PSG2,	$00, $00, $00, $00
00000024                          M 	checkedchannelpointer	wfz_psg2
00000024 0000                     M 	dc.w	((wfz_psg2&$7fff)<<8)&$ff00+(wfz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$00
00000026 00                       M 	dc.b	$00
00000027 00                       M 	dc.b	$00
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       WFZ_PSG3,	$00, $00, $00, $00
0000002A                          M 	checkedchannelpointer	wfz_psg3
0000002A 0000                     M 	dc.w	((wfz_psg3&$7fff)<<8)&$ff00+(wfz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 00                       M 	dc.b	$00
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; PSG1 Data
00000030                            WFZ_PSG1:
00000030                            ; PSG2 Data
00000030                            WFZ_PSG2:
00000030                            ; PSG3 Data
00000030                            WFZ_PSG3:
00000030                            	smpsStop
00000030 F2                       M 	dc.b	$f2
00000031                            
00000031                            ; FM5 Data
00000031                            WFZ_FM5:
00000031                            	smpsSetvoice        $00
00000031                          M 	smpsfmvoice	$00
00000031 EF00                     M 	dc.b	$ef,$00
00000033                            	smpsAlterNote       $01
00000033                          M 	smpsdetune	$01
00000033 E101                     M 	dc.b	$e1,$01
00000035 8012                       	dc.b	nRst, $12
00000037                            
00000037                            WFZ_Jump05:
00000037                            	smpsPan             panLeft, $00
00000037 E080                     M 	dc.b	$e0,direction+amsfms
00000039                            	smpsAlterVol        $06
00000039 E606                     M 	dc.b	$e6,$06
0000003B                            
0000003B                            WFZ_Loop04:
0000003B C103 C1BE BEBA BABE BEBA+  	dc.b	nE5, $03, nE5, nCs5, nCs5, nA4, nA4, nCs5, nCs5, nA4, nA4, nE4
00000047 B5                         	dc.b	nE4
00000048                            	smpsLoop            $00, $07, WFZ_Loop04
00000048 F7                       M 	dc.b	$f7
00000049 0007                     M 	dc.b	index,loops
0000004B 0000                     M 	dc.w	((wfz_loop04&$7fff)<<8)&$ff00+(wfz_loop04&$7fff)>>8
0000004D C1C1 BEBE BABA             	dc.b	nE5, nE5, nCs5, nCs5, nA4, nA4
00000053                            	smpsPan             panCenter, $00
00000053 E0C0                     M 	dc.b	$e0,direction+amsfms
00000055                            	smpsAlterVol        $FA
00000055 E6FA                     M 	dc.b	$e6,$fa
00000057                            	smpsAlterPitch      $F4
00000057                          M 	smpschangetransposition	$f4
00000057 E9F4                     M 	dc.b	$e9,$f4
00000059 B20C B306 B512 BA12 B912+  	dc.b	nCs4, $0C, nD4, $06, nE4, $12, nA4, $12, nAb4, $12, nFs4, $12
00000065 B512 B30C B206 B312 B30C+  	dc.b	nE4, $12, nD4, $0C, nCs4, $06, nD4, $12, nD4, $0C, nE4, $06
00000071 B712 BCBA B7B7 12B9 0CB7+  	dc.b	nFs4, $12, nB4, nA4, nFs4, nFs4, $12, nAb4, $0C, nFs4, $06, nE4
0000007D 24                         	dc.b	$24
0000007E                            	smpsAlterPitch      $0C
0000007E                          M 	smpschangetransposition	$0c
0000007E E90C                     M 	dc.b	$e9,$0c
00000080                            	smpsPan             panLeft, $00
00000080 E080                     M 	dc.b	$e0,direction+amsfms
00000082                            	smpsAlterVol        $06
00000082 E606                     M 	dc.b	$e6,$06
00000084                            
00000084                            WFZ_Loop05:
00000084 BB03 BA                    	dc.b	nBb4, $03, nA4
00000087                            	smpsLoop            $00, $30, WFZ_Loop05
00000087 F7                       M 	dc.b	$f7
00000088 0030                     M 	dc.b	index,loops
0000008A 0000                     M 	dc.w	((wfz_loop05&$7fff)<<8)&$ff00+(wfz_loop05&$7fff)>>8
0000008C                            	smpsAlterPitch      $F4
0000008C                          M 	smpschangetransposition	$f4
0000008C E9F4                     M 	dc.b	$e9,$f4
0000008E                            	smpsAlterVol        $FA
0000008E E6FA                     M 	dc.b	$e6,$fa
00000090                            	smpsPan             panCenter, $00
00000090 E0C0                     M 	dc.b	$e0,direction+amsfms
00000092 B012 B2B3 B5B7 B9BA BCB2+  	dc.b	nB3, $12, nCs4, nD4, nE4, nFs4, nAb4, nA4, nB4, nCs4, nD4, nE4
0000009E B7B9 BABC BEBF 48C0 C324+  	dc.b	nFs4, nAb4, nA4, nB4, nCs5, nD5, $48, nEb5, nFs5, $24, nE5, nA5
000000AA C524                       	dc.b	nAb5, $24
000000AC                            	smpsAlterPitch      $0C
000000AC                          M 	smpschangetransposition	$0c
000000AC E90C                     M 	dc.b	$e9,$0c
000000AE                            	smpsJump            WFZ_Jump05
000000AE F6                       M 	dc.b	$f6
000000AF 0000                     M 	dc.w	((wfz_jump05&$7fff)<<8)&$ff00+(wfz_jump05&$7fff)>>8
000000B1                            
000000B1                            ; FM1 Data
000000B1                            WFZ_FM1:
000000B1                            	smpsSetvoice        $00
000000B1                          M 	smpsfmvoice	$00
000000B1 EF00                     M 	dc.b	$ef,$00
000000B3                            	smpsAlterNote       $FF
000000B3                          M 	smpsdetune	$ff
000000B3 E1FF                     M 	dc.b	$e1,$ff
000000B5 8012                       	dc.b	nRst, $12
000000B7                            
000000B7                            WFZ_Jump04:
000000B7                            	smpsPan             panRight, $00
000000B7 E040                     M 	dc.b	$e0,direction+amsfms
000000B9                            	smpsAlterVol        $06
000000B9 E606                     M 	dc.b	$e6,$06
000000BB                            
000000BB                            WFZ_Loop02:
000000BB C103 C1BE BEBA BABE BEBA+  	dc.b	nE5, $03, nE5, nCs5, nCs5, nA4, nA4, nCs5, nCs5, nA4, nA4, nE4
000000C7 B5                         	dc.b	nE4
000000C8                            	smpsLoop            $00, $07, WFZ_Loop02
000000C8 F7                       M 	dc.b	$f7
000000C9 0007                     M 	dc.b	index,loops
000000CB 0000                     M 	dc.w	((wfz_loop02&$7fff)<<8)&$ff00+(wfz_loop02&$7fff)>>8
000000CD C1C1 BEBE BABA             	dc.b	nE5, nE5, nCs5, nCs5, nA4, nA4
000000D3                            	smpsPan             panCenter, $00
000000D3 E0C0                     M 	dc.b	$e0,direction+amsfms
000000D5                            	smpsAlterVol        $FA
000000D5 E6FA                     M 	dc.b	$e6,$fa
000000D7 B20C B306 B50C 8006 BA0C+  	dc.b	nCs4, $0C, nD4, $06, nE4, $0C, nRst, $06, nA4, $0C, nRst, $06
000000E3 B909 80B7 0C80 06B5 0C80+  	dc.b	nAb4, $09, nRst, nFs4, $0C, nRst, $06, nE4, $0C, nRst, $06, nD4
000000EF 0CB2 06B3 0C80 06B3 0CB5+  	dc.b	$0C, nCs4, $06, nD4, $0C, nRst, $06, nD4, $0C, nE4, $06, nFs4
000000FB 0980 BC80 BA80 B780 B712+  	dc.b	$09, nRst, nB4, nRst, nA4, nRst, nFs4, nRst, nFs4, $12, nAb4, $0C
00000107 B706 B524                  	dc.b	nFs4, $06, nE4, $24
0000010B                            	smpsPan             panRight, $00
0000010B E040                     M 	dc.b	$e0,direction+amsfms
0000010D                            	smpsAlterVol        $06
0000010D E606                     M 	dc.b	$e6,$06
0000010F                            
0000010F                            WFZ_Loop03:
0000010F BB03 BA                    	dc.b	nBb4, $03, nA4
00000112                            	smpsLoop            $00, $30, WFZ_Loop03
00000112 F7                       M 	dc.b	$f7
00000113 0030                     M 	dc.b	index,loops
00000115 0000                     M 	dc.w	((wfz_loop03&$7fff)<<8)&$ff00+(wfz_loop03&$7fff)>>8
00000117                            	smpsPan             panCenter, $00
00000117 E0C0                     M 	dc.b	$e0,direction+amsfms
00000119                            	smpsAlterVol        $FA
00000119 E6FA                     M 	dc.b	$e6,$fa
0000011B B012 B2B3 B5B7 B9BA BCB2+  	dc.b	nB3, $12, nCs4, nD4, nE4, nFs4, nAb4, nA4, nB4, nCs4, nD4, nE4
00000127 B7B9 BABC BEBF 48C0 C324+  	dc.b	nFs4, nAb4, nA4, nB4, nCs5, nD5, $48, nEb5, nFs5, $24, nE5, nA5
00000133 C524                       	dc.b	nAb5, $24
00000135                            	smpsJump            WFZ_Jump04
00000135 F6                       M 	dc.b	$f6
00000136 0000                     M 	dc.w	((wfz_jump04&$7fff)<<8)&$ff00+(wfz_jump04&$7fff)>>8
00000138                            
00000138                            ; FM2 Data
00000138                            WFZ_FM2:
00000138                            	smpsSetvoice        $01
00000138                          M 	smpsfmvoice	$01
00000138 EF01                     M 	dc.b	$ef,$01
0000013A 8012                       	dc.b	nRst, $12
0000013C                            
0000013C                            WFZ_Jump03:
0000013C 805A                       	dc.b	nRst, $5A
0000013E                            	smpsCall            WFZ_Call03
0000013E F8                       M 	dc.b	$f8
0000013F 0000                     M 	dc.w	((wfz_call03&$7fff)<<8)&$ff00+(wfz_call03&$7fff)>>8
00000141 805A                       	dc.b	nRst, $5A
00000143                            	smpsCall            WFZ_Call03
00000143 F8                       M 	dc.b	$f8
00000144 0000                     M 	dc.w	((wfz_call03&$7fff)<<8)&$ff00+(wfz_call03&$7fff)>>8
00000146 8012 A603 80A6 80A6 80A6+  	dc.b	nRst, $12, nCs3, $03, nRst, nCs3, nRst, nCs3, nRst, nCs3, $0C, nRst
00000152 06A6 0F80 15               	dc.b	$06, nCs3, $0F, nRst, $15
00000157                            	smpsCall            WFZ_Call04
00000157 F8                       M 	dc.b	$f8
00000158 0000                     M 	dc.w	((wfz_call04&$7fff)<<8)&$ff00+(wfz_call04&$7fff)>>8
0000015A 8012                       	dc.b	nRst, $12
0000015C                            	smpsCall            WFZ_Call04
0000015C F8                       M 	dc.b	$f8
0000015D 0000                     M 	dc.w	((wfz_call04&$7fff)<<8)&$ff00+(wfz_call04&$7fff)>>8
0000015F 8012                       	dc.b	nRst, $12
00000161                            	smpsCall            WFZ_Call04
00000161 F8                       M 	dc.b	$f8
00000162 0000                     M 	dc.w	((wfz_call04&$7fff)<<8)&$ff00+(wfz_call04&$7fff)>>8
00000164                            
00000164                            WFZ_Loop01:
00000164 B006 AC0C AF06 AA0C AD06+  	dc.b	nB3, $06, nG3, $0C, nBb3, $06, nF3, $0C, nAb3, $06, nE3, $66
00000170                            	smpsLoop            $00, $02, WFZ_Loop01
00000170 F7                       M 	dc.b	$f7
00000171 0002                     M 	dc.b	index,loops
00000173 0000                     M 	dc.w	((wfz_loop01&$7fff)<<8)&$ff00+(wfz_loop01&$7fff)>>8
00000175 8012 A703 80A7 80A7 80A7+  	dc.b	nRst, $12, nD3, $03, nRst, nD3, nRst, nD3, nRst, nD3, $24, nRst
00000181 12A7 0380 A480 A780 AB24+  	dc.b	$12, nD3, $03, nRst, nB2, nRst, nD3, nRst, nFs3, $24, nRst, $12
0000018D A903 80A9 80A9 80A9 2480+  	dc.b	nE3, $03, nRst, nE3, nRst, nE3, nRst, nE3, $24, nRst, $12, nE3
00000199 0380 A680 A980 AD24 8012+  	dc.b	$03, nRst, nCs3, nRst, nE3, nRst, nAb3, $24, nRst, $12, nFs3, $03
000001A5 80AB 80AB 80AB 2480 12AB+  	dc.b	nRst, nFs3, nRst, nFs3, nRst, nFs3, $24, nRst, $12, nFs3, $03, nRst
000001B1 AB80 AB80 AB24 8012 AE03+  	dc.b	nFs3, nRst, nFs3, nRst, nFs3, $24, nRst, $12, nA3, $03, nRst, nA3
000001BD 80AE 80AE 24B0 0C80 06B0+  	dc.b	nRst, nA3, nRst, nA3, $24, nB3, $0C, nRst, $06, nB3, $0C, nRst
000001C9 06B0 0C80 06B0 12          	dc.b	$06, nB3, $0C, nRst, $06, nB3, $12
000001D0                            	smpsJump            WFZ_Jump03
000001D0 F6                       M 	dc.b	$f6
000001D1 0000                     M 	dc.w	((wfz_jump03&$7fff)<<8)&$ff00+(wfz_jump03&$7fff)>>8
000001D3                            
000001D3                            WFZ_Call03:
000001D3 A403 80A6 80A7 80A6 24     	dc.b	nB2, $03, nRst, nCs3, nRst, nD3, nRst, nCs3, $24
000001DC                            	smpsReturn
000001DC E3                       M 	dc.b	$e3
000001DD                            
000001DD                            WFZ_Call04:
000001DD A703 80A7 80A7 80A7 0980+  	dc.b	nD3, $03, nRst, nD3, nRst, nD3, nRst, nD3, $09, nRst, nD3, $12
000001E9                            	smpsReturn
000001E9 E3                       M 	dc.b	$e3
000001EA                            
000001EA                            ; FM3 Data
000001EA                            WFZ_FM3:
000001EA                            	smpsSetvoice        $02
000001EA                          M 	smpsfmvoice	$02
000001EA EF02                     M 	dc.b	$ef,$02
000001EC 8012                       	dc.b	nRst, $12
000001EE                            
000001EE                            WFZ_Jump02:
000001EE                            	smpsAlterVol        $FC
000001EE E6FC                     M 	dc.b	$e6,$fc
000001F0                            
000001F0                            WFZ_Loop00:
000001F0 AE06 8003 AEAE 80AE 80A9+  	dc.b	nA3, $06, nRst, $03, nA3, nA3, nRst, nA3, nRst, nE3, nRst, nA3
000001FC 80B2 80B0 80AE 80B0 80B2+  	dc.b	nRst, nCs4, nRst, nB3, nRst, nA3, nRst, nB3, nRst, nCs4, nRst, nD4
00000208 80B2 48                    	dc.b	nRst, nCs4, $48
0000020B                            	smpsLoop            $00, $02, WFZ_Loop00
0000020B F7                       M 	dc.b	$f7
0000020C 0002                     M 	dc.b	index,loops
0000020E 0000                     M 	dc.w	((wfz_loop00&$7fff)<<8)&$ff00+(wfz_loop00&$7fff)>>8
00000210                            	smpsAlterVol        $04
00000210 E604                     M 	dc.b	$e6,$04
00000212 8012 A903 80A9 80A9 80A9+  	dc.b	nRst, $12, nE3, $03, nRst, nE3, nRst, nE3, nRst, nE3, $09, nRst
0000021E A90F 8015 AB03 80AB 80AB+  	dc.b	nE3, $0F, nRst, $15, nFs3, $03, nRst, nFs3, nRst, nFs3, nRst, nFs3
0000022A 0980 AB0F 8015 AB03 80AB+  	dc.b	$09, nRst, nFs3, $0F, nRst, $15, nFs3, $03, nRst, nFs3, nRst, nFs3
00000236 80AB 0980 AB0F 8015 AD03+  	dc.b	nRst, nFs3, $09, nRst, nFs3, $0F, nRst, $15, nAb3, $03, nRst, nAb3
00000242 80AD 80AD 0980 AD0C 8060+  	dc.b	nRst, nAb3, nRst, nAb3, $09, nRst, nAb3, $0C, nRst, $60, nRst, nRst
0000024E 8018 B003 80B0 80B0 80B0+  	dc.b	nRst, $18, nB3, $03, nRst, nB3, nRst, nB3, nRst, nB3, $24, nRst
0000025A 12B0 0380 AB80 B080 B324+  	dc.b	$12, nB3, $03, nRst, nFs3, nRst, nB3, nRst, nD4, $24, nRst, $12
00000266 B203 80B2 80B2 80B2 2480+  	dc.b	nCs4, $03, nRst, nCs4, nRst, nCs4, nRst, nCs4, $24, nRst, $12, nCs4
00000272 0380 AD80 B280 B524 8012+  	dc.b	$03, nRst, nAb3, nRst, nCs4, nRst, nE4, $24, nRst, $12, nD4, $03
0000027E 80B3 B3B3 80B3 80AE 80B0+  	dc.b	nRst, nD4, nD4, nD4, nRst, nD4, nRst, nA3, nRst, nB3, nRst, nD4
0000028A 1580 0FB4 0380 B4B4 B480+  	dc.b	$15, nRst, $0F, nEb4, $03, nRst, nEb4, nEb4, nEb4, nRst, nEb4, nRst
00000296 AE80 B080 B415 800F B503+  	dc.b	nA3, nRst, nB3, nRst, nEb4, $15, nRst, $0F, nE4, $03, nRst, nE4
000002A2 0980 03B5 80B5 80B5 80B5+  	dc.b	$09, nRst, $03, nE4, nRst, nE4, nRst, nE4, nRst, nE4, nRst, nE4
000002AE 80B5 80B5 12B5 0C80 06B5+  	dc.b	nRst, nE4, nRst, nE4, $12, nE4, $0C, nRst, $06, nE4, $0C, nRst
000002BA 06B5 12                    	dc.b	$06, nE4, $12
000002BD                            	smpsJump            WFZ_Jump02
000002BD F6                       M 	dc.b	$f6
000002BE 0000                     M 	dc.w	((wfz_jump02&$7fff)<<8)&$ff00+(wfz_jump02&$7fff)>>8
000002C0                            
000002C0                            ; DAC Data
000002C0                            WFZ_DAC:
000002C0 8B06 8B8B                  	dc.b	dVLowTimpani, $06, dVLowTimpani, dVLowTimpani
000002C4                            
000002C4                            WFZ_Jump00:
000002C4                            	smpsCall            WFZ_Call00
000002C4 F8                       M 	dc.b	$f8
000002C5 0000                     M 	dc.w	((wfz_call00&$7fff)<<8)&$ff00+(wfz_call00&$7fff)>>8
000002C7 8906                       	dc.b	dMidTimpani, $06
000002C9                            	smpsCall            WFZ_Call00
000002C9 F8                       M 	dc.b	$f8
000002CA 0000                     M 	dc.w	((wfz_call00&$7fff)<<8)&$ff00+(wfz_call00&$7fff)>>8
000002CC 8B06 8B36 8912 8B36 8912+  	dc.b	dVLowTimpani, $06, dVLowTimpani, $36, dMidTimpani, $12, dVLowTimpani, $36, dMidTimpani, $12, dVLowTimpani, $36
000002D8 8906 8989 8B36 8B06 8B8B+  	dc.b	dMidTimpani, $06, dMidTimpani, dMidTimpani, dVLowTimpani, $36, dVLowTimpani, $06, dVLowTimpani, dVLowTimpani, $60
000002E3                            	smpsCall            WFZ_Call01
000002E3 F8                       M 	dc.b	$f8
000002E4 0000                     M 	dc.w	((wfz_call01&$7fff)<<8)&$ff00+(wfz_call01&$7fff)>>8
000002E6 8B5A                       	dc.b	dVLowTimpani, $5A
000002E8                            	smpsCall            WFZ_Call01
000002E8 F8                       M 	dc.b	$f8
000002E9 0000                     M 	dc.w	((wfz_call01&$7fff)<<8)&$ff00+(wfz_call01&$7fff)>>8
000002EB 8B36 8B06 8B8B 8936 8912+  	dc.b	dVLowTimpani, $36, dVLowTimpani, $06, dVLowTimpani, dVLowTimpani, dMidTimpani, $36, dMidTimpani, $12, dVLowTimpani, $36
000002F7 8906 8989 8B36 8906 8B89+  	dc.b	dMidTimpani, $06, dMidTimpani, dMidTimpani, dVLowTimpani, $36, dMidTimpani, $06, dVLowTimpani, dMidTimpani, dVLowTimpani, $36
00000303 8B06 8B8B 8936 8906 8B0C+  	dc.b	dVLowTimpani, $06, dVLowTimpani, dVLowTimpani, dMidTimpani, $36, dMidTimpani, $06, dVLowTimpani, $0C, dMidTimpani, $12
0000030F 8B89 8B89 098B 898B 898B+  	dc.b	dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, $09, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani
0000031B 09                         	dc.b	$09
0000031C                            	smpsJump            WFZ_Jump00
0000031C F6                       M 	dc.b	$f6
0000031D 0000                     M 	dc.w	((wfz_jump00&$7fff)<<8)&$ff00+(wfz_jump00&$7fff)>>8
0000031F                            
0000031F                            WFZ_Call00:
0000031F 895A 8906 8B89 8B89 8B89+  	dc.b	dMidTimpani, $5A, dMidTimpani, $06, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani
0000032A                            	smpsReturn
0000032A E3                       M 	dc.b	$e3
0000032B                            
0000032B                            WFZ_Call01:
0000032B 8906 8B89 8B89 8B89 8B89   	dc.b	dMidTimpani, $06, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani, dVLowTimpani, dMidTimpani
00000335                            	smpsReturn
00000335 E3                       M 	dc.b	$e3
00000336                            
00000336                            ; FM4 Data
00000336                            WFZ_FM4:
00000336                            	smpsSetvoice        $03
00000336                          M 	smpsfmvoice	$03
00000336 EF03                     M 	dc.b	$ef,$03
00000338                            	smpsCall            WFZ_Call02
00000338 F8                       M 	dc.b	$f8
00000339 0000                     M 	dc.w	((wfz_call02&$7fff)<<8)&$ff00+(wfz_call02&$7fff)>>8
0000033B                            
0000033B                            WFZ_Jump01:
0000033B 9678 8006                  	dc.b	nA1, $78, nRst, $06
0000033F                            	smpsCall            WFZ_Call02
0000033F F8                       M 	dc.b	$f8
00000340 0000                     M 	dc.w	((wfz_call02&$7fff)<<8)&$ff00+(wfz_call02&$7fff)>>8
00000342 9678 8006                  	dc.b	nA1, $78, nRst, $06
00000346                            	smpsCall            WFZ_Call02
00000346 F8                       M 	dc.b	$f8
00000347 0000                     M 	dc.w	((wfz_call02&$7fff)<<8)&$ff00+(wfz_call02&$7fff)>>8
00000349 9636 9712 9836 9312 9836+  	dc.b	nA1, $36, nBb1, $12, nB1, $36, nFs1, $12, nB1, $36, nFs1, $12
00000355 913C 800C 9106 9294 9694+  	dc.b	nE1, $3C, nRst, $0C, nE1, $06, nF1, nG1, nA1, nG1, nF1, nE1
00000361 368F 0691 9291 1E80 0691+  	dc.b	$36, nD1, $06, nE1, nF1, nE1, $1E, nRst, $06, nE1, nF1, nG1
0000036D 9694 9291 3698 0695 9291+  	dc.b	nA1, nG1, nF1, nE1, $36, nB1, $06, nAb1, nF1, nE1, $0C, nRst
00000379 06                         	dc.b	$06
0000037A                            	smpsCall            WFZ_Call02
0000037A F8                       M 	dc.b	$f8
0000037B 0000                     M 	dc.w	((wfz_call02&$7fff)<<8)&$ff00+(wfz_call02&$7fff)>>8
0000037D 9836 9303 8093 8093 8098+  	dc.b	nB1, $36, nFs1, $03, nRst, nFs1, nRst, nFs1, nRst, nB1, $36, nB1
00000389 0380 9380 9880 9A36 9503+  	dc.b	$03, nRst, nFs1, nRst, nB1, nRst, nCs2, $36, nAb1, $03, nRst, nAb1
00000395 8095 809A 369A 0380 9580+  	dc.b	nRst, nAb1, nRst, nCs2, $36, nCs2, $03, nRst, nAb1, nRst, nCs2, nRst
000003A1 8F36 8F03 808F 808F 8090+  	dc.b	nD1, $36, nD1, $03, nRst, nD1, nRst, nD1, nRst, nEb1, $36, nEb1
000003AD 0380 8F80 9080 9136 9803+  	dc.b	$03, nRst, nD1, nRst, nEb1, nRst, nE1, $36, nB1, $03, nRst, nAb1
000003B9 8093 8091 36               	dc.b	nRst, nFs1, nRst, nE1, $36
000003BE                            	smpsCall            WFZ_Call02
000003BE F8                       M 	dc.b	$f8
000003BF 0000                     M 	dc.w	((wfz_call02&$7fff)<<8)&$ff00+(wfz_call02&$7fff)>>8
000003C1                            	smpsJump            WFZ_Jump01
000003C1 F6                       M 	dc.b	$f6
000003C2 0000                     M 	dc.w	((wfz_jump01&$7fff)<<8)&$ff00+(wfz_jump01&$7fff)>>8
000003C4                            
000003C4                            WFZ_Call02:
000003C4 9106 9191                  	dc.b	nE1, $06, nE1, nE1
000003C8                            	smpsReturn
000003C8 E3                       M 	dc.b	$e3
000003C9                            
000003C9                            WFZ_Voices:
000003C9                            ;	Voice $00
000003C9                            ;	$3A
000003C9                            ;	$01, $02, $01, $02, 	$8E, $8E, $8D, $89, 	$0E, $0E, $0E, $16
000003C9                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1E, $20, $26, $88
000003C9                            	smpsVcAlgorithm     $02
000003C9 =00000002                M vcalgorithm	=	val
000003C9                            	smpsVcFeedback      $07
000003C9 =00000007                M vcfeedback	=	val
000003C9                            	smpsVcUnusedBits    $00
000003C9 =00000000                M vcunusedbits	=	val
000003C9 =00000000                M vcd1r1unk	=	0
000003C9 =00000000                M vcd1r2unk	=	0
000003C9 =00000000                M vcd1r3unk	=	0
000003C9 =00000000                M vcd1r4unk	=	0
000003C9                            	smpsVcDetune        $00, $00, $00, $00
000003C9 =00000000                M vcdt1	=	op1
000003C9 =00000000                M vcdt2	=	op2
000003C9 =00000000                M vcdt3	=	op3
000003C9 =00000000                M vcdt4	=	op4
000003C9                            	smpsVcCoarseFreq    $02, $01, $02, $01
000003C9 =00000002                M vccf1	=	op1
000003C9 =00000001                M vccf2	=	op2
000003C9 =00000002                M vccf3	=	op3
000003C9 =00000001                M vccf4	=	op4
000003C9                            	smpsVcRateScale     $02, $02, $02, $02
000003C9 =00000002                M vcrs1	=	op1
000003C9 =00000002                M vcrs2	=	op2
000003C9 =00000002                M vcrs3	=	op3
000003C9 =00000002                M vcrs4	=	op4
000003C9                            	smpsVcAttackRate    $09, $0D, $0E, $0E
000003C9 =00000009                M vcar1	=	op1
000003C9 =0000000D                M vcar2	=	op2
000003C9 =0000000E                M vcar3	=	op3
000003C9 =0000000E                M vcar4	=	op4
000003C9                            	smpsVcAmpMod        $00, $00, $00, $00
000003C9 =00000000                M vcam1	=	op1<<5
000003C9 =00000000                M vcam2	=	op2<<5
000003C9 =00000000                M vcam3	=	op3<<5
000003C9 =00000000                M vcam4	=	op4<<5
000003C9                            	smpsVcDecayRate1    $16, $0E, $0E, $0E
000003C9 =00000016                M vcd1r1	=	op1
000003C9 =0000000E                M vcd1r2	=	op2
000003C9 =0000000E                M vcd1r3	=	op3
000003C9 =0000000E                M vcd1r4	=	op4
000003C9                            	smpsVcDecayRate2    $00, $00, $00, $00
000003C9 =00000000                M vcd2r1	=	op1
000003C9 =00000000                M vcd2r2	=	op2
000003C9 =00000000                M vcd2r3	=	op3
000003C9 =00000000                M vcd2r4	=	op4
000003C9                            	smpsVcDecayLevel    $00, $00, $00, $00
000003C9 =00000000                M vcdl1	=	op1
000003C9 =00000000                M vcdl2	=	op2
000003C9 =00000000                M vcdl3	=	op3
000003C9 =00000000                M vcdl4	=	op4
000003C9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003C9 =0000000F                M vcrr1	=	op1
000003C9 =0000000F                M vcrr2	=	op2
000003C9 =0000000F                M vcrr3	=	op3
000003C9 =0000000F                M vcrr4	=	op4
000003C9                            	smpsVcTotalLevel    $08, $26, $20, $1E
000003C9 =00000008                M vctl1	=	op1
000003C9 =00000026                M vctl2	=	op2
000003C9 =00000020                M vctl3	=	op3
000003C9 =0000001E                M vctl4	=	op4
000003C9 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003CA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003CA =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003CA =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003CA =00000080                M vctlmask1	=	$80
000003CA 0101 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003CE 8E8D 8E89                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003D2 0E0E 0E16                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003D6 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003DA 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003DE 1E26 2088                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003E2                            
000003E2                            ;	Voice $01
000003E2                            ;	$3D
000003E2                            ;	$01, $01, $02, $01, 	$4C, $0F, $50, $12, 	$0B, $05, $01, $02
000003E2                            ;	$01, $00, $00, $00, 	$20, $24, $24, $14, 	$1D, $84, $88, $8A
000003E2                            	smpsVcAlgorithm     $05
000003E2 =00000005                M vcalgorithm	=	val
000003E2                            	smpsVcFeedback      $07
000003E2 =00000007                M vcfeedback	=	val
000003E2                            	smpsVcUnusedBits    $00
000003E2 =00000000                M vcunusedbits	=	val
000003E2 =00000000                M vcd1r1unk	=	0
000003E2 =00000000                M vcd1r2unk	=	0
000003E2 =00000000                M vcd1r3unk	=	0
000003E2 =00000000                M vcd1r4unk	=	0
000003E2                            	smpsVcDetune        $00, $00, $00, $00
000003E2 =00000000                M vcdt1	=	op1
000003E2 =00000000                M vcdt2	=	op2
000003E2 =00000000                M vcdt3	=	op3
000003E2 =00000000                M vcdt4	=	op4
000003E2                            	smpsVcCoarseFreq    $01, $02, $01, $01
000003E2 =00000001                M vccf1	=	op1
000003E2 =00000002                M vccf2	=	op2
000003E2 =00000001                M vccf3	=	op3
000003E2 =00000001                M vccf4	=	op4
000003E2                            	smpsVcRateScale     $00, $01, $00, $01
000003E2 =00000000                M vcrs1	=	op1
000003E2 =00000001                M vcrs2	=	op2
000003E2 =00000000                M vcrs3	=	op3
000003E2 =00000001                M vcrs4	=	op4
000003E2                            	smpsVcAttackRate    $12, $10, $0F, $0C
000003E2 =00000012                M vcar1	=	op1
000003E2 =00000010                M vcar2	=	op2
000003E2 =0000000F                M vcar3	=	op3
000003E2 =0000000C                M vcar4	=	op4
000003E2                            	smpsVcAmpMod        $00, $00, $00, $00
000003E2 =00000000                M vcam1	=	op1<<5
000003E2 =00000000                M vcam2	=	op2<<5
000003E2 =00000000                M vcam3	=	op3<<5
000003E2 =00000000                M vcam4	=	op4<<5
000003E2                            	smpsVcDecayRate1    $02, $01, $05, $0B
000003E2 =00000002                M vcd1r1	=	op1
000003E2 =00000001                M vcd1r2	=	op2
000003E2 =00000005                M vcd1r3	=	op3
000003E2 =0000000B                M vcd1r4	=	op4
000003E2                            	smpsVcDecayRate2    $00, $00, $00, $01
000003E2 =00000000                M vcd2r1	=	op1
000003E2 =00000000                M vcd2r2	=	op2
000003E2 =00000000                M vcd2r3	=	op3
000003E2 =00000001                M vcd2r4	=	op4
000003E2                            	smpsVcDecayLevel    $01, $02, $02, $02
000003E2 =00000001                M vcdl1	=	op1
000003E2 =00000002                M vcdl2	=	op2
000003E2 =00000002                M vcdl3	=	op3
000003E2 =00000002                M vcdl4	=	op4
000003E2                            	smpsVcReleaseRate   $04, $04, $04, $00
000003E2 =00000004                M vcrr1	=	op1
000003E2 =00000004                M vcrr2	=	op2
000003E2 =00000004                M vcrr3	=	op3
000003E2 =00000000                M vcrr4	=	op4
000003E2                            	smpsVcTotalLevel    $0A, $08, $04, $1D
000003E2 =0000000A                M vctl1	=	op1
000003E2 =00000008                M vctl2	=	op2
000003E2 =00000004                M vctl3	=	op3
000003E2 =0000001D                M vctl4	=	op4
000003E2 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003E3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003E3 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003E3 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003E3 =00000080                M vctlmask1	=	$80
000003E3 0102 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003E7 4C50 0F12                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003EB 0B01 0502                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003EF 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003F3 2024 2414                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003F7 1D88 848A                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003FB                            
000003FB                            ;	Voice $02
000003FB                            ;	$3A
000003FB                            ;	$01, $01, $01, $01, 	$8E, $8E, $8D, $50, 	$0E, $0E, $0E, $00
000003FB                            ;	$0B, $00, $00, $00, 	$04, $04, $04, $04, 	$17, $28, $27, $8A
000003FB                            	smpsVcAlgorithm     $02
000003FB =00000002                M vcalgorithm	=	val
000003FB                            	smpsVcFeedback      $07
000003FB =00000007                M vcfeedback	=	val
000003FB                            	smpsVcUnusedBits    $00
000003FB =00000000                M vcunusedbits	=	val
000003FB =00000000                M vcd1r1unk	=	0
000003FB =00000000                M vcd1r2unk	=	0
000003FB =00000000                M vcd1r3unk	=	0
000003FB =00000000                M vcd1r4unk	=	0
000003FB                            	smpsVcDetune        $00, $00, $00, $00
000003FB =00000000                M vcdt1	=	op1
000003FB =00000000                M vcdt2	=	op2
000003FB =00000000                M vcdt3	=	op3
000003FB =00000000                M vcdt4	=	op4
000003FB                            	smpsVcCoarseFreq    $01, $01, $01, $01
000003FB =00000001                M vccf1	=	op1
000003FB =00000001                M vccf2	=	op2
000003FB =00000001                M vccf3	=	op3
000003FB =00000001                M vccf4	=	op4
000003FB                            	smpsVcRateScale     $01, $02, $02, $02
000003FB =00000001                M vcrs1	=	op1
000003FB =00000002                M vcrs2	=	op2
000003FB =00000002                M vcrs3	=	op3
000003FB =00000002                M vcrs4	=	op4
000003FB                            	smpsVcAttackRate    $10, $0D, $0E, $0E
000003FB =00000010                M vcar1	=	op1
000003FB =0000000D                M vcar2	=	op2
000003FB =0000000E                M vcar3	=	op3
000003FB =0000000E                M vcar4	=	op4
000003FB                            	smpsVcAmpMod        $00, $00, $00, $00
000003FB =00000000                M vcam1	=	op1<<5
000003FB =00000000                M vcam2	=	op2<<5
000003FB =00000000                M vcam3	=	op3<<5
000003FB =00000000                M vcam4	=	op4<<5
000003FB                            	smpsVcDecayRate1    $00, $0E, $0E, $0E
000003FB =00000000                M vcd1r1	=	op1
000003FB =0000000E                M vcd1r2	=	op2
000003FB =0000000E                M vcd1r3	=	op3
000003FB =0000000E                M vcd1r4	=	op4
000003FB                            	smpsVcDecayRate2    $00, $00, $00, $0B
000003FB =00000000                M vcd2r1	=	op1
000003FB =00000000                M vcd2r2	=	op2
000003FB =00000000                M vcd2r3	=	op3
000003FB =0000000B                M vcd2r4	=	op4
000003FB                            	smpsVcDecayLevel    $00, $00, $00, $00
000003FB =00000000                M vcdl1	=	op1
000003FB =00000000                M vcdl2	=	op2
000003FB =00000000                M vcdl3	=	op3
000003FB =00000000                M vcdl4	=	op4
000003FB                            	smpsVcReleaseRate   $04, $04, $04, $04
000003FB =00000004                M vcrr1	=	op1
000003FB =00000004                M vcrr2	=	op2
000003FB =00000004                M vcrr3	=	op3
000003FB =00000004                M vcrr4	=	op4
000003FB                            	smpsVcTotalLevel    $0A, $27, $28, $17
000003FB =0000000A                M vctl1	=	op1
000003FB =00000027                M vctl2	=	op2
000003FB =00000028                M vctl3	=	op3
000003FB =00000017                M vctl4	=	op4
000003FB 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003FC =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003FC =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003FC =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003FC =00000080                M vctlmask1	=	$80
000003FC 0101 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000400 8E8D 8E50                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000404 0E0E 0E00                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000408 0B00 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000040C 0404 0404                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000410 1727 288A                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000414                            
00000414                            ;	Voice $03
00000414                            ;	$3A
00000414                            ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
00000414                            ;	$05, $07, $0A, $08, 	$AF, $8F, $9F, $7F, 	$21, $25, $28, $82
00000414                            	smpsVcAlgorithm     $02
00000414 =00000002                M vcalgorithm	=	val
00000414                            	smpsVcFeedback      $07
00000414 =00000007                M vcfeedback	=	val
00000414                            	smpsVcUnusedBits    $00
00000414 =00000000                M vcunusedbits	=	val
00000414 =00000000                M vcd1r1unk	=	0
00000414 =00000000                M vcd1r2unk	=	0
00000414 =00000000                M vcd1r3unk	=	0
00000414 =00000000                M vcd1r4unk	=	0
00000414                            	smpsVcDetune        $00, $06, $02, $02
00000414 =00000000                M vcdt1	=	op1
00000414 =00000006                M vcdt2	=	op2
00000414 =00000002                M vcdt3	=	op3
00000414 =00000002                M vcdt4	=	op4
00000414                            	smpsVcCoarseFreq    $01, $00, $03, $00
00000414 =00000001                M vccf1	=	op1
00000414 =00000000                M vccf2	=	op2
00000414 =00000003                M vccf3	=	op3
00000414 =00000000                M vccf4	=	op4
00000414                            	smpsVcRateScale     $00, $00, $00, $00
00000414 =00000000                M vcrs1	=	op1
00000414 =00000000                M vcrs2	=	op2
00000414 =00000000                M vcrs3	=	op3
00000414 =00000000                M vcrs4	=	op4
00000414                            	smpsVcAttackRate    $1F, $1F, $1F, $1E
00000414 =0000001F                M vcar1	=	op1
00000414 =0000001F                M vcar2	=	op2
00000414 =0000001F                M vcar3	=	op3
00000414 =0000001E                M vcar4	=	op4
00000414                            	smpsVcAmpMod        $00, $00, $00, $00
00000414 =00000000                M vcam1	=	op1<<5
00000414 =00000000                M vcam2	=	op2<<5
00000414 =00000000                M vcam3	=	op3<<5
00000414 =00000000                M vcam4	=	op4<<5
00000414                            	smpsVcDecayRate1    $0A, $0B, $0A, $0A
00000414 =0000000A                M vcd1r1	=	op1
00000414 =0000000B                M vcd1r2	=	op2
00000414 =0000000A                M vcd1r3	=	op3
00000414 =0000000A                M vcd1r4	=	op4
00000414                            	smpsVcDecayRate2    $08, $0A, $07, $05
00000414 =00000008                M vcd2r1	=	op1
00000414 =0000000A                M vcd2r2	=	op2
00000414 =00000007                M vcd2r3	=	op3
00000414 =00000005                M vcd2r4	=	op4
00000414                            	smpsVcDecayLevel    $07, $09, $08, $0A
00000414 =00000007                M vcdl1	=	op1
00000414 =00000009                M vcdl2	=	op2
00000414 =00000008                M vcdl3	=	op3
00000414 =0000000A                M vcdl4	=	op4
00000414                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000414 =0000000F                M vcrr1	=	op1
00000414 =0000000F                M vcrr2	=	op2
00000414 =0000000F                M vcrr3	=	op3
00000414 =0000000F                M vcrr4	=	op4
00000414                            	smpsVcTotalLevel    $02, $28, $25, $21
00000414 =00000002                M vctl1	=	op1
00000414 =00000028                M vctl2	=	op2
00000414 =00000025                M vctl3	=	op3
00000414 =00000021                M vctl4	=	op4
00000414 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000415 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000415 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000415 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000415 =00000080                M vctlmask1	=	$80
00000415 2060 2301                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000419 1E1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000041D 0A0B 0A0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000421 050A 0708                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000425 AF9F 8F7F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000429 2128 2582                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000042D                            
0000042D                          M 	pops
00000000                            		inc_music	EHZ2P
00000000                          M 	pushs
00000000                          M music_1608:	section	org($1380),file("sound/music/compressed/ehz2p.unc"),over(header)
00000000                          M 	include	"sound/music/ehz2p.asm"
00000000                            EHZ_2p_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     EHZ_2p_Voices
00000000 0000                     M 	dc.w	((ehz_2p_voices&$7fff)<<8)&$ff00+(ehz_2p_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $5B
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$5b
00000005 5B                       M 	dc.b	$5b
00000006                            
00000006                            	smpsHeaderDAC       EHZ_2p_DAC
00000006                          M 	checkedchannelpointer	ehz_2p_dac
00000006 0000                     M 	dc.w	((ehz_2p_dac&$7fff)<<8)&$ff00+(ehz_2p_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        EHZ_2p_FM1,	$F4, $0A
0000000A                          M 	checkedchannelpointer	ehz_2p_fm1
0000000A 0000                     M 	dc.w	((ehz_2p_fm1&$7fff)<<8)&$ff00+(ehz_2p_fm1&$7fff)>>8
0000000C F40A                     M 	dc.b	$f4,$0a
0000000E                            	smpsHeaderFM        EHZ_2p_FM2,	$F4, $0F
0000000E                          M 	checkedchannelpointer	ehz_2p_fm2
0000000E 0000                     M 	dc.w	((ehz_2p_fm2&$7fff)<<8)&$ff00+(ehz_2p_fm2&$7fff)>>8
00000010 F40F                     M 	dc.b	$f4,$0f
00000012                            	smpsHeaderFM        EHZ_2p_FM3,	$F4, $0A
00000012                          M 	checkedchannelpointer	ehz_2p_fm3
00000012 0000                     M 	dc.w	((ehz_2p_fm3&$7fff)<<8)&$ff00+(ehz_2p_fm3&$7fff)>>8
00000014 F40A                     M 	dc.b	$f4,$0a
00000016                            	smpsHeaderFM        EHZ_2p_FM4,	$F4, $10
00000016                          M 	checkedchannelpointer	ehz_2p_fm4
00000016 0000                     M 	dc.w	((ehz_2p_fm4&$7fff)<<8)&$ff00+(ehz_2p_fm4&$7fff)>>8
00000018 F410                     M 	dc.b	$f4,$10
0000001A                            	smpsHeaderFM        EHZ_2p_FM5,	$E8, $10
0000001A                          M 	checkedchannelpointer	ehz_2p_fm5
0000001A 0000                     M 	dc.w	((ehz_2p_fm5&$7fff)<<8)&$ff00+(ehz_2p_fm5&$7fff)>>8
0000001C E810                     M 	dc.b	$e8,$10
0000001E                            	smpsHeaderPSG       EHZ_2p_PSG1,	$D0, $06, $00, $00
0000001E                          M 	checkedchannelpointer	ehz_2p_psg1
0000001E 0000                     M 	dc.w	((ehz_2p_psg1&$7fff)<<8)&$ff00+(ehz_2p_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       EHZ_2p_PSG2,	$D0, $06, $00, $00
00000024                          M 	checkedchannelpointer	ehz_2p_psg2
00000024 0000                     M 	dc.w	((ehz_2p_psg2&$7fff)<<8)&$ff00+(ehz_2p_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 06                       M 	dc.b	$06
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       EHZ_2p_PSG3,	$00, $05, $00, $00
0000002A                          M 	checkedchannelpointer	ehz_2p_psg3
0000002A 0000                     M 	dc.w	((ehz_2p_psg3&$7fff)<<8)&$ff00+(ehz_2p_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 05                       M 	dc.b	$05
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; FM1 Data
00000030                            EHZ_2p_FM1:
00000030                            	smpsSetvoice        $04
00000030                          M 	smpsfmvoice	$04
00000030 EF04                     M 	dc.b	$ef,$04
00000032                            	smpsAlterNote       $01
00000032                          M 	smpsdetune	$01
00000032 E101                     M 	dc.b	$e1,$01
00000034 D006 CDCE CBCD C9C9 C6     	dc.b	nG6, $06, nE6, nF6, nD6, nE6, nC6, nC6, nA5
0000003D                            
0000003D                            EHZ_2p_Jump01:
0000003D                            	smpsCall            EHZ_2p_Call02
0000003D F8                       M 	dc.b	$f8
0000003E 0000                     M 	dc.w	((ehz_2p_call02&$7fff)<<8)&$ff00+(ehz_2p_call02&$7fff)>>8
00000040                            	smpsSetvoice        $03
00000040                          M 	smpsfmvoice	$03
00000040 EF03                     M 	dc.b	$ef,$03
00000042                            	smpsAlterVol        $06
00000042 E606                     M 	dc.b	$e6,$06
00000044 B806                       	dc.b	nG4, $06
00000046                            	smpsNoteFill        $06
00000046 E806                     M 	dc.b	$e8,$06
00000048 BA03 BDBD BA               	dc.b	nA4, $03, nC5, nC5, nA4
0000004D                            	smpsSetvoice        $04
0000004D                          M 	smpsfmvoice	$04
0000004D EF04                     M 	dc.b	$ef,$04
0000004F                            	smpsAlterVol        $FA
0000004F E6FA                     M 	dc.b	$e6,$fa
00000051                            	smpsNoteFill        $00
00000051 E800                     M 	dc.b	$e8,$00
00000053                            	smpsCall            EHZ_2p_Call02
00000053 F8                       M 	dc.b	$f8
00000054 0000                     M 	dc.w	((ehz_2p_call02&$7fff)<<8)&$ff00+(ehz_2p_call02&$7fff)>>8
00000056 8012 C918 C60C C9C7 C906+  	dc.b	nRst, $12, nC6, $18, nA5, $0C, nC6, nBb5, nC6, $06, nD6, $0C
00000062 C906 C70C C918 C60C C9C7+  	dc.b	nC6, $06, nBb5, $0C, nC6, $18, nA5, $0C, nC6, nBb5, $06
0000006D                            	smpsSetvoice        $02
0000006D                          M 	smpsfmvoice	$02
0000006D EF02                     M 	dc.b	$ef,$02
0000006F                            	smpsAlterVol        $06
0000006F E606                     M 	dc.b	$e6,$06
00000071 C006 C2C0 80C0 C2C0        	dc.b	nEb5, $06, nF5, nEb5, nRst, nEb5, nF5, nEb5
00000079                            	smpsSetvoice        $04
00000079                          M 	smpsfmvoice	$04
00000079 EF04                     M 	dc.b	$ef,$04
0000007B                            	smpsAlterVol        $FA
0000007B E6FA                     M 	dc.b	$e6,$fa
0000007D C918 C60C C9C7 C906 CB0C+  	dc.b	nC6, $18, nA5, $0C, nC6, nBb5, nC6, $06, nD6, $0C, nC6, $06
00000089 C70C C618 C20C C6          	dc.b	nBb5, $0C, nA5, $18, nF5, $0C, nA5
00000090                            	smpsSetvoice        $02
00000090                          M 	smpsfmvoice	$02
00000090 EF02                     M 	dc.b	$ef,$02
00000092                            	smpsAlterVol        $06
00000092 E606                     M 	dc.b	$e6,$06
00000094 C403 80C4 06C6 03C4 C606+  	dc.b	nG5, $03, nRst, nG5, $06, nA5, $03, nG5, nA5, $06, nG5, $03
000000A0 8015                       	dc.b	nRst, $15
000000A2                            	smpsSetvoice        $04
000000A2                          M 	smpsfmvoice	$04
000000A2 EF04                     M 	dc.b	$ef,$04
000000A4                            	smpsAlterVol        $FA
000000A4 E6FA                     M 	dc.b	$e6,$fa
000000A6                            	smpsJump            EHZ_2p_Jump01
000000A6 F6                       M 	dc.b	$f6
000000A7 0000                     M 	dc.w	((ehz_2p_jump01&$7fff)<<8)&$ff00+(ehz_2p_jump01&$7fff)>>8
000000A9                            
000000A9                            EHZ_2p_Call02:
000000A9                            	smpsSetvoice        $03
000000A9                          M 	smpsfmvoice	$03
000000A9 EF03                     M 	dc.b	$ef,$03
000000AB                            	smpsAlterVol        $06
000000AB E606                     M 	dc.b	$e6,$06
000000AD C106                       	dc.b	nE5, $06
000000AF                            	smpsNoteFill        $06
000000AF E806                     M 	dc.b	$e8,$06
000000B1 BD03 BABD 0680 80          	dc.b	nC5, $03, nA4, nC5, $06, nRst, nRst
000000B8                            	smpsSetvoice        $04
000000B8                          M 	smpsfmvoice	$04
000000B8 EF04                     M 	dc.b	$ef,$04
000000BA                            	smpsAlterVol        $FA
000000BA E6FA                     M 	dc.b	$e6,$fa
000000BC                            	smpsNoteFill        $00
000000BC E800                     M 	dc.b	$e8,$00
000000BE BC06 0903                  	dc.b	nB4, $06, $09, $03
000000C2                            	smpsSetvoice        $03
000000C2                          M 	smpsfmvoice	$03
000000C2 EF03                     M 	dc.b	$ef,$03
000000C4                            	smpsAlterVol        $06
000000C4 E606                     M 	dc.b	$e6,$06
000000C6                            	smpsNoteFill        $06
000000C6 E806                     M 	dc.b	$e8,$06
000000C8 C203 C280 C280 C2          	dc.b	nF5, $03, nF5, nRst, nF5, nRst, nF5
000000CF                            	smpsNoteFill        $00
000000CF E800                     M 	dc.b	$e8,$00
000000D1 C306 C480                  	dc.b	nFs5, $06, nG5, nRst
000000D5                            	smpsNoteFill        $06
000000D5 E806                     M 	dc.b	$e8,$06
000000D7 C403 03C6 C4               	dc.b	nG5, $03, $03, nA5, nG5
000000DC                            	smpsNoteFill        $00
000000DC E800                     M 	dc.b	$e8,$00
000000DE C106                       	dc.b	nE5, $06
000000E0                            	smpsNoteFill        $06
000000E0 E806                     M 	dc.b	$e8,$06
000000E2 BD03 BABD 0680 80          	dc.b	nC5, $03, nA4, nC5, $06, nRst, nRst
000000E9                            	smpsNoteFill        $00
000000E9 E800                     M 	dc.b	$e8,$00
000000EB                            	smpsSetvoice        $04
000000EB                          M 	smpsfmvoice	$04
000000EB EF04                     M 	dc.b	$ef,$04
000000ED                            	smpsAlterVol        $FA
000000ED E6FA                     M 	dc.b	$e6,$fa
000000EF C1C4 C1                    	dc.b	nE5, nG5, nE5
000000F2                            	smpsSetvoice        $02
000000F2                          M 	smpsfmvoice	$02
000000F2 EF02                     M 	dc.b	$ef,$02
000000F4                            	smpsAlterVol        $06
000000F4 E606                     M 	dc.b	$e6,$06
000000F6                            	smpsNoteFill        $06
000000F6 E806                     M 	dc.b	$e8,$06
000000F8 C203 C280 C280 C2          	dc.b	nF5, $03, nF5, nRst, nF5, nRst, nF5
000000FF                            	smpsNoteFill        $00
000000FF E800                     M 	dc.b	$e8,$00
00000101 C306 C403 80               	dc.b	nFs5, $06, nG5, $03, nRst
00000106                            	smpsSetvoice        $04
00000106                          M 	smpsfmvoice	$04
00000106 EF04                     M 	dc.b	$ef,$04
00000108                            	smpsAlterVol        $FA
00000108 E6FA                     M 	dc.b	$e6,$fa
0000010A                            	smpsReturn
0000010A E3                       M 	dc.b	$e3
0000010B                            
0000010B                            ; FM4 Data
0000010B                            EHZ_2p_FM4:
0000010B                            	smpsSetvoice        $04
0000010B                          M 	smpsfmvoice	$04
0000010B EF04                     M 	dc.b	$ef,$04
0000010D                            	smpsAlterVol        $FA
0000010D E6FA                     M 	dc.b	$e6,$fa
0000010F 8003 CE06 CBCD C9CB C8C8+  	dc.b	nRst, $03, nF6, $06, nD6, nE6, nC6, nD6, nB5, nB5, nG5, $03
0000011B                            	smpsAlterVol        $06
0000011B E606                     M 	dc.b	$e6,$06
0000011D                            
0000011D                            EHZ_2p_Loop05:
0000011D                            	smpsSetvoice        $01
0000011D                          M 	smpsfmvoice	$01
0000011D EF01                     M 	dc.b	$ef,$01
0000011F                            	smpsPan             panRight, $00
0000011F E040                     M 	dc.b	$e0,direction+amsfms
00000121                            	smpsAlterPitch      $F4
00000121                          M 	smpschangetransposition	$f4
00000121 E9F4                     M 	dc.b	$e9,$f4
00000123                            	smpsNoteFill        $06
00000123 E806                     M 	dc.b	$e8,$06
00000125 8006 C103 090C C403 0906   	dc.b	nRst, $06, nE5, $03, $09, $0C, nG5, $03, $09, $06
0000012F                            	smpsSetvoice        $04
0000012F                          M 	smpsfmvoice	$04
0000012F EF04                     M 	dc.b	$ef,$04
00000131                            	smpsPan             panCenter, $00
00000131 E0C0                     M 	dc.b	$e0,direction+amsfms
00000133                            	smpsAlterVol        $FA
00000133 E6FA                     M 	dc.b	$e6,$fa
00000135                            	smpsNoteFill        $00
00000135 E800                     M 	dc.b	$e8,$00
00000137 C6                         	dc.b	nA5
00000138                            	smpsNoteFill        $06
00000138 E806                     M 	dc.b	$e8,$06
0000013A                            	smpsAlterVol        $06
0000013A E606                     M 	dc.b	$e6,$06
0000013C                            	smpsSetvoice        $01
0000013C                          M 	smpsfmvoice	$01
0000013C EF01                     M 	dc.b	$ef,$01
0000013E                            	smpsPan             panRight, $00
0000013E E040                     M 	dc.b	$e0,direction+amsfms
00000140 C203 090C C403 090C C103+  	dc.b	nF5, $03, $09, $0C, nG5, $03, $09, $0C, nE5, $03, $09, $0C
0000014C C403 0906                  	dc.b	nG5, $03, $09, $06
00000150                            	smpsSetvoice        $02
00000150                          M 	smpsfmvoice	$02
00000150 EF02                     M 	dc.b	$ef,$02
00000152                            	smpsPan             panCenter, $00
00000152 E0C0                     M 	dc.b	$e0,direction+amsfms
00000154                            	smpsAlterPitch      $0C
00000154                          M 	smpschangetransposition	$0c
00000154 E90C                     M 	dc.b	$e9,$0c
00000156 C603 C680 C680 C6          	dc.b	nA5, $03, nA5, nRst, nA5, nRst, nA5
0000015D                            	smpsNoteFill        $00
0000015D E800                     M 	dc.b	$e8,$00
0000015F C706 C803                  	dc.b	nBb5, $06, nB5, $03
00000163                            	smpsSetvoice        $01
00000163                          M 	smpsfmvoice	$01
00000163 EF01                     M 	dc.b	$ef,$01
00000165                            	smpsPan             panRight, $00
00000165 E040                     M 	dc.b	$e0,direction+amsfms
00000167                            	smpsAlterPitch      $F4
00000167                          M 	smpschangetransposition	$f4
00000167 E9F4                     M 	dc.b	$e9,$f4
00000169                            	smpsNoteFill        $06
00000169 E806                     M 	dc.b	$e8,$06
0000016B 80C4 0309 06               	dc.b	nRst, nG5, $03, $09, $06
00000170                            	smpsSetvoice        $02
00000170                          M 	smpsfmvoice	$02
00000170 EF02                     M 	dc.b	$ef,$02
00000172                            	smpsPan             panCenter, $00
00000172 E0C0                     M 	dc.b	$e0,direction+amsfms
00000174                            	smpsAlterPitch      $0C
00000174                          M 	smpschangetransposition	$0c
00000174 E90C                     M 	dc.b	$e9,$0c
00000176                            	smpsNoteFill        $00
00000176 E800                     M 	dc.b	$e8,$00
00000178                            	smpsLoop            $00, $02, EHZ_2p_Loop05
00000178 F7                       M 	dc.b	$f7
00000179 0002                     M 	dc.b	index,loops
0000017B 0000                     M 	dc.w	((ehz_2p_loop05&$7fff)<<8)&$ff00+(ehz_2p_loop05&$7fff)>>8
0000017D                            	smpsSetvoice        $01
0000017D                          M 	smpsfmvoice	$01
0000017D EF01                     M 	dc.b	$ef,$01
0000017F                            	smpsPan             panRight, $00
0000017F E040                     M 	dc.b	$e0,direction+amsfms
00000181                            	smpsAlterPitch      $F4
00000181                          M 	smpschangetransposition	$f4
00000181 E9F4                     M 	dc.b	$e9,$f4
00000183                            	smpsNoteFill        $06
00000183 E806                     M 	dc.b	$e8,$06
00000185 8006 C603 0903 0903 0903+  	dc.b	nRst, $06, nA5, $03, $09, $03, $09, $03, $09, $03, $03, nRst
00000191 06C4 0309 0309 0309 0303+  	dc.b	$06, nG5, $03, $09, $03, $09, $03, $09, $03, $03, nRst, $06
0000019D C603 0903 0903 0903 03     	dc.b	nA5, $03, $09, $03, $09, $03, $09, $03, $03
000001A6                            	smpsSetvoice        $02
000001A6                          M 	smpsfmvoice	$02
000001A6 EF02                     M 	dc.b	$ef,$02
000001A8                            	smpsPan             panCenter, $00
000001A8 E0C0                     M 	dc.b	$e0,direction+amsfms
000001AA                            	smpsAlterPitch      $0C
000001AA                          M 	smpschangetransposition	$0c
000001AA E90C                     M 	dc.b	$e9,$0c
000001AC                            	smpsNoteFill        $00
000001AC E800                     M 	dc.b	$e8,$00
000001AE 8006 C4C6 C480 C4C6 C4     	dc.b	nRst, $06, nG5, nA5, nG5, nRst, nG5, nA5, nG5
000001B7                            	smpsSetvoice        $01
000001B7                          M 	smpsfmvoice	$01
000001B7 EF01                     M 	dc.b	$ef,$01
000001B9                            	smpsPan             panRight, $00
000001B9 E040                     M 	dc.b	$e0,direction+amsfms
000001BB                            	smpsAlterPitch      $F4
000001BB                          M 	smpschangetransposition	$f4
000001BB E9F4                     M 	dc.b	$e9,$f4
000001BD                            	smpsNoteFill        $06
000001BD E806                     M 	dc.b	$e8,$06
000001BF 8006 C603 0903 0903 0903+  	dc.b	nRst, $06, nA5, $03, $09, $03, $09, $03, $09, $03, $03, nRst
000001CB 06C4 0309 0309 0309 0303+  	dc.b	$06, nG5, $03, $09, $03, $09, $03, $09, $03, $03, nRst, $06
000001D7 C203 0903 0903 0903 03     	dc.b	nF5, $03, $09, $03, $09, $03, $09, $03, $03
000001E0                            	smpsSetvoice        $02
000001E0                          M 	smpsfmvoice	$02
000001E0 EF02                     M 	dc.b	$ef,$02
000001E2                            	smpsPan             panCenter, $00
000001E2 E0C0                     M 	dc.b	$e0,direction+amsfms
000001E4                            	smpsAlterPitch      $0C
000001E4                          M 	smpschangetransposition	$0c
000001E4 E90C                     M 	dc.b	$e9,$0c
000001E6                            	smpsNoteFill        $00
000001E6 E800                     M 	dc.b	$e8,$00
000001E8 C803 80C8 06C9 03C8 C906+  	dc.b	nB5, $03, nRst, nB5, $06, nC6, $03, nB5, nC6, $06, nB5, $03
000001F4 8015                       	dc.b	nRst, $15
000001F6                            	smpsJump            EHZ_2p_Loop05
000001F6 F6                       M 	dc.b	$f6
000001F7 0000                     M 	dc.w	((ehz_2p_loop05&$7fff)<<8)&$ff00+(ehz_2p_loop05&$7fff)>>8
000001F9                            
000001F9                            ; FM3 Data
000001F9                            EHZ_2p_FM3:
000001F9                            	smpsSetvoice        $03
000001F9                          M 	smpsfmvoice	$03
000001F9 EF03                     M 	dc.b	$ef,$03
000001FB                            	smpsNoteFill        $06
000001FB E806                     M 	dc.b	$e8,$06
000001FD 801E C403 03C6 C9C9 C6     	dc.b	nRst, $1E, nG5, $03, $03, nA5, nC6, nC6, nA5
00000206                            
00000206                            EHZ_2p_Jump00:
00000206                            	smpsCall            EHZ_2p_Call00
00000206 F8                       M 	dc.b	$f8
00000207 0000                     M 	dc.w	((ehz_2p_call00&$7fff)<<8)&$ff00+(ehz_2p_call00&$7fff)>>8
00000209                            	smpsSetvoice        $01
00000209                          M 	smpsfmvoice	$01
00000209 EF01                     M 	dc.b	$ef,$01
0000020B                            	smpsPan             panRight, $00
0000020B E040                     M 	dc.b	$e0,direction+amsfms
0000020D                            	smpsAlterPitch      $F4
0000020D                          M 	smpschangetransposition	$f4
0000020D E9F4                     M 	dc.b	$e9,$f4
0000020F                            	smpsNoteFill        $06
0000020F E806                     M 	dc.b	$e8,$06
00000211                            	smpsAlterVol        $06
00000211 E606                     M 	dc.b	$e6,$06
00000213 8006 C203 0906             	dc.b	nRst, $06, nF5, $03, $09, $06
00000219                            	smpsSetvoice        $03
00000219                          M 	smpsfmvoice	$03
00000219 EF03                     M 	dc.b	$ef,$03
0000021B                            	smpsPan             panCenter, $00
0000021B E0C0                     M 	dc.b	$e0,direction+amsfms
0000021D                            	smpsAlterPitch      $0C
0000021D                          M 	smpschangetransposition	$0c
0000021D E90C                     M 	dc.b	$e9,$0c
0000021F                            	smpsNoteFill        $00
0000021F E800                     M 	dc.b	$e8,$00
00000221                            	smpsAlterVol        $FA
00000221 E6FA                     M 	dc.b	$e6,$fa
00000223 80C4                       	dc.b	nRst, nG5
00000225                            	smpsNoteFill        $06
00000225 E806                     M 	dc.b	$e8,$06
00000227 C603 C9C9 C6               	dc.b	nA5, $03, nC6, nC6, nA5
0000022C                            	smpsCall            EHZ_2p_Call00
0000022C F8                       M 	dc.b	$f8
0000022D 0000                     M 	dc.w	((ehz_2p_call00&$7fff)<<8)&$ff00+(ehz_2p_call00&$7fff)>>8
0000022F                            	smpsSetvoice        $01
0000022F                          M 	smpsfmvoice	$01
0000022F EF01                     M 	dc.b	$ef,$01
00000231                            	smpsPan             panRight, $00
00000231 E040                     M 	dc.b	$e0,direction+amsfms
00000233                            	smpsAlterPitch      $F4
00000233                          M 	smpschangetransposition	$f4
00000233 E9F4                     M 	dc.b	$e9,$f4
00000235                            	smpsNoteFill        $06
00000235 E806                     M 	dc.b	$e8,$06
00000237                            	smpsAlterVol        $06
00000237 E606                     M 	dc.b	$e6,$06
00000239 8006 C203 0906 80C4 0309+  	dc.b	nRst, $06, nF5, $03, $09, $06, nRst, nG5, $03, $09, $06
00000244                            	smpsSetvoice        $03
00000244                          M 	smpsfmvoice	$03
00000244 EF03                     M 	dc.b	$ef,$03
00000246                            	smpsPan             panCenter, $00
00000246 E0C0                     M 	dc.b	$e0,direction+amsfms
00000248                            	smpsAlterPitch      $0C
00000248                          M 	smpschangetransposition	$0c
00000248 E90C                     M 	dc.b	$e9,$0c
0000024A                            	smpsNoteFill        $00
0000024A E800                     M 	dc.b	$e8,$00
0000024C                            	smpsAlterVol        $FA
0000024C E6FA                     M 	dc.b	$e6,$fa
0000024E                            	smpsCall            EHZ_2p_Call01
0000024E F8                       M 	dc.b	$f8
0000024F 0000                     M 	dc.w	((ehz_2p_call01&$7fff)<<8)&$ff00+(ehz_2p_call01&$7fff)>>8
00000251 8030                       	dc.b	nRst, $30
00000253                            	smpsCall            EHZ_2p_Call01
00000253 F8                       M 	dc.b	$f8
00000254 0000                     M 	dc.w	((ehz_2p_call01&$7fff)<<8)&$ff00+(ehz_2p_call01&$7fff)>>8
00000256                            	smpsSetvoice        $01
00000256                          M 	smpsfmvoice	$01
00000256 EF01                     M 	dc.b	$ef,$01
00000258                            	smpsPan             panRight, $00
00000258 E040                     M 	dc.b	$e0,direction+amsfms
0000025A                            	smpsAlterPitch      $F4
0000025A                          M 	smpschangetransposition	$f4
0000025A E9F4                     M 	dc.b	$e9,$f4
0000025C                            	smpsNoteFill        $06
0000025C E806                     M 	dc.b	$e8,$06
0000025E                            	smpsAlterVol        $06
0000025E E606                     M 	dc.b	$e6,$06
00000260 8006 C403 0903 0903 0903+  	dc.b	nRst, $06, nG5, $03, $09, $03, $09, $03, $09, $03, $03
0000026B                            	smpsSetvoice        $03
0000026B                          M 	smpsfmvoice	$03
0000026B EF03                     M 	dc.b	$ef,$03
0000026D                            	smpsPan             panCenter, $00
0000026D E0C0                     M 	dc.b	$e0,direction+amsfms
0000026F                            	smpsAlterPitch      $0C
0000026F                          M 	smpschangetransposition	$0c
0000026F E90C                     M 	dc.b	$e9,$0c
00000271                            	smpsNoteFill        $00
00000271 E800                     M 	dc.b	$e8,$00
00000273                            	smpsAlterVol        $FA
00000273 E6FA                     M 	dc.b	$e6,$fa
00000275                            	smpsCall            EHZ_2p_Call01
00000275 F8                       M 	dc.b	$f8
00000276 0000                     M 	dc.w	((ehz_2p_call01&$7fff)<<8)&$ff00+(ehz_2p_call01&$7fff)>>8
00000278 8030 CB0C CDCE CFD0 06     	dc.b	nRst, $30, nD6, $0C, nE6, nF6, nFs6, nG6, $06
00000281                            	smpsSetvoice        $01
00000281                          M 	smpsfmvoice	$01
00000281 EF01                     M 	dc.b	$ef,$01
00000283                            	smpsPan             panRight, $00
00000283 E040                     M 	dc.b	$e0,direction+amsfms
00000285                            	smpsAlterPitch      $F4
00000285                          M 	smpschangetransposition	$f4
00000285 E9F4                     M 	dc.b	$e9,$f4
00000287                            	smpsNoteFill        $06
00000287 E806                     M 	dc.b	$e8,$06
00000289                            	smpsAlterVol        $06
00000289 E606                     M 	dc.b	$e6,$06
0000028B C803 0903 03               	dc.b	nB5, $03, $09, $03, $03
00000290                            	smpsSetvoice        $03
00000290                          M 	smpsfmvoice	$03
00000290 EF03                     M 	dc.b	$ef,$03
00000292                            	smpsPan             panCenter, $00
00000292 E0C0                     M 	dc.b	$e0,direction+amsfms
00000294                            	smpsAlterPitch      $0C
00000294                          M 	smpschangetransposition	$0c
00000294 E90C                     M 	dc.b	$e9,$0c
00000296                            	smpsNoteFill        $00
00000296 E800                     M 	dc.b	$e8,$00
00000298                            	smpsAlterVol        $FA
00000298 E6FA                     M 	dc.b	$e6,$fa
0000029A                            	smpsNoteFill        $00
0000029A E800                     M 	dc.b	$e8,$00
0000029C 8006 C4                    	dc.b	nRst, $06, nG5
0000029F                            	smpsNoteFill        $06
0000029F E806                     M 	dc.b	$e8,$06
000002A1 C603 C9C9 C6               	dc.b	nA5, $03, nC6, nC6, nA5
000002A6                            	smpsJump            EHZ_2p_Jump00
000002A6 F6                       M 	dc.b	$f6
000002A7 0000                     M 	dc.w	((ehz_2p_jump00&$7fff)<<8)&$ff00+(ehz_2p_jump00&$7fff)>>8
000002A9                            
000002A9                            EHZ_2p_Call01:
000002A9                            	smpsNoteFill        $06
000002A9 E806                     M 	dc.b	$e8,$06
000002AB 8006 C6C2 03BD 0603 C206+  	dc.b	nRst, $06, nA5, nF5, $03, nC5, $06, $03, nF5, $06, nA5, nBb5
000002B7 03                         	dc.b	$03
000002B8                            	smpsNoteFill        $00
000002B8 E800                     M 	dc.b	$e8,$00
000002BA C609                       	dc.b	nA5, $09
000002BC                            	smpsReturn
000002BC E3                       M 	dc.b	$e3
000002BD                            
000002BD                            EHZ_2p_Call00:
000002BD                            	smpsNoteFill        $00
000002BD E800                     M 	dc.b	$e8,$00
000002BF CD06                       	dc.b	nE6, $06
000002C1                            	smpsNoteFill        $06
000002C1 E806                     M 	dc.b	$e8,$06
000002C3 C903 C6C9 0680 8009        	dc.b	nC6, $03, nA5, nC6, $06, nRst, nRst, $09
000002CB                            	smpsSetvoice        $04
000002CB                          M 	smpsfmvoice	$04
000002CB EF04                     M 	dc.b	$ef,$04
000002CD                            	smpsNoteFill        $00
000002CD E800                     M 	dc.b	$e8,$00
000002CF BDBA 06                    	dc.b	nC5, nA4, $06
000002D2                            	smpsNoteFill        $06
000002D2 E806                     M 	dc.b	$e8,$06
000002D4                            	smpsSetvoice        $03
000002D4                          M 	smpsfmvoice	$03
000002D4 EF03                     M 	dc.b	$ef,$03
000002D6 CE03 CE80 CE80 CE          	dc.b	nF6, $03, nF6, nRst, nF6, nRst, nF6
000002DD                            	smpsNoteFill        $00
000002DD E800                     M 	dc.b	$e8,$00
000002DF CF06 D080                  	dc.b	nFs6, $06, nG6, nRst
000002E3                            	smpsNoteFill        $06
000002E3 E806                     M 	dc.b	$e8,$06
000002E5 D003 03D2 D0               	dc.b	nG6, $03, $03, nA6, nG6
000002EA                            	smpsNoteFill        $00
000002EA E800                     M 	dc.b	$e8,$00
000002EC CD06                       	dc.b	nE6, $06
000002EE                            	smpsNoteFill        $06
000002EE E806                     M 	dc.b	$e8,$06
000002F0 C903 C6C9 06               	dc.b	nC6, $03, nA5, nC6, $06
000002F5                            	smpsNoteFill        $00
000002F5 E800                     M 	dc.b	$e8,$00
000002F7                            	smpsSetvoice        $04
000002F7                          M 	smpsfmvoice	$04
000002F7 EF04                     M 	dc.b	$ef,$04
000002F9 800F C206 C2BD 03          	dc.b	nRst, $0F, nF5, $06, nF5, nC5, $03
00000300                            	smpsReturn
00000300 E3                       M 	dc.b	$e3
00000301                            
00000301                            ; FM5 Data
00000301                            EHZ_2p_FM5:
00000301                            	smpsPan             panLeft, $01
00000301 E081                     M 	dc.b	$e0,direction+amsfms
00000303                            	smpsSetvoice        $01
00000303                          M 	smpsfmvoice	$01
00000303 EF01                     M 	dc.b	$ef,$01
00000305 8030                       	dc.b	nRst, $30
00000307                            
00000307                            EHZ_2p_Loop03:
00000307                            	smpsNoteFill        $06
00000307 E806                     M 	dc.b	$e8,$06
00000309 8006 C403 090C C803 0906+  	dc.b	nRst, $06, nG5, $03, $09, $0C, nB5, $03, $09, $06, nRst, nA5
00000315 0309 0CC8 0309 06          	dc.b	$03, $09, $0C, nB5, $03, $09, $06
0000031C                            	smpsLoop            $00, $04, EHZ_2p_Loop03
0000031C F7                       M 	dc.b	$f7
0000031D 0004                     M 	dc.b	index,loops
0000031F 0000                     M 	dc.w	((ehz_2p_loop03&$7fff)<<8)&$ff00+(ehz_2p_loop03&$7fff)>>8
00000321                            
00000321                            EHZ_2p_Loop04:
00000321 8006 C903 0903 0903 0903+  	dc.b	nRst, $06, nC6, $03, $09, $03, $09, $03, $09, $03, $03, nRst
0000032D 06C7 0309 0309 0309 0303   	dc.b	$06, nBb5, $03, $09, $03, $09, $03, $09, $03, $03
00000337                            	smpsLoop            $00, $03, EHZ_2p_Loop04
00000337 F7                       M 	dc.b	$f7
00000338 0003                     M 	dc.b	index,loops
0000033A 0000                     M 	dc.w	((ehz_2p_loop04&$7fff)<<8)&$ff00+(ehz_2p_loop04&$7fff)>>8
0000033C 8006 C603 0903 0903 0903+  	dc.b	nRst, $06, nA5, $03, $09, $03, $09, $03, $09, $03, $03, nRst
00000348 06CB 0309 031B             	dc.b	$06, nD6, $03, $09, $03, $1B
0000034E                            	smpsJump            EHZ_2p_Loop03
0000034E F6                       M 	dc.b	$f6
0000034F 0000                     M 	dc.w	((ehz_2p_loop03&$7fff)<<8)&$ff00+(ehz_2p_loop03&$7fff)>>8
00000351                            
00000351                            ; FM2 Data
00000351                            EHZ_2p_FM2:
00000351                            	smpsSetvoice        $03
00000351                          M 	smpsfmvoice	$03
00000351 EF03                     M 	dc.b	$ef,$03
00000353                            	smpsNoteFill        $06
00000353 E806                     M 	dc.b	$e8,$06
00000355 801E B803 03BA BDBD BA     	dc.b	nRst, $1E, nG4, $03, $03, nA4, nC5, nC5, nA4
0000035E                            	smpsSetvoice        $00
0000035E                          M 	smpsfmvoice	$00
0000035E EF00                     M 	dc.b	$ef,$00
00000360                            	smpsAlterVol        $FA
00000360 E6FA                     M 	dc.b	$e6,$fa
00000362                            
00000362                            EHZ_2p_Loop01:
00000362                            	smpsNoteFill        $00
00000362 E800                     M 	dc.b	$e8,$00
00000364 8006 B1AE 0303 AC06 80B0+  	dc.b	nRst, $06, nC4, nA3, $03, $03, nG3, $06, nRst, nB3, nA3, $03
00000370 03AC 0680 AEAC 0303 AA06+  	dc.b	$03, nG3, $06, nRst, nA3, nG3, $03, $03, nF3, $06, nRst, nG3
0000037C 0603 03AE AC80 06B1 AE03+  	dc.b	$06, $03, $03, nA3, nG3, nRst, $06, nC4, nA3, $03, $03, nG3
00000388 0680 B0AE 0303 AC06        	dc.b	$06, nRst, nB3, nA3, $03, $03, nG3, $06
00000390                            	smpsSetvoice        $04
00000390                          M 	smpsfmvoice	$04
00000390 EF04                     M 	dc.b	$ef,$04
00000392 BD                         	dc.b	nC5
00000393                            	smpsSetvoice        $00
00000393                          M 	smpsfmvoice	$00
00000393 EF00                     M 	dc.b	$ef,$00
00000395 AEAC 0303 AA06 80AC 0603+  	dc.b	nA3, nG3, $03, $03, nF3, $06, nRst, nG3, $06, $03, $03, nA3
000003A1 AC                         	dc.b	nG3
000003A2                            	smpsLoop            $00, $02, EHZ_2p_Loop01
000003A2 F7                       M 	dc.b	$f7
000003A3 0002                     M 	dc.b	index,loops
000003A5 0000                     M 	dc.w	((ehz_2p_loop01&$7fff)<<8)&$ff00+(ehz_2p_loop01&$7fff)>>8
000003A7                            
000003A7                            EHZ_2p_Loop02:
000003A7 8006 B603 03B3 B3B1 B180+  	dc.b	nRst, $06, nF4, $03, $03, nD4, nD4, nC4, nC4, nRst, $06, nF4
000003B3 0303 B3B3 B1B1 8006 B403+  	dc.b	$03, $03, nD4, nD4, nC4, nC4, nRst, $06, nEb4, $03, $03, nC4
000003BF B1AF AF80 06B4 0303 B1B1+  	dc.b	nC4, nBb3, nBb3, nRst, $06, nEb4, $03, $03, nC4, nC4, nBb3, nBb3
000003CB                            	smpsLoop            $00, $03, EHZ_2p_Loop02
000003CB F7                       M 	dc.b	$f7
000003CC 0003                     M 	dc.b	index,loops
000003CE 0000                     M 	dc.w	((ehz_2p_loop02&$7fff)<<8)&$ff00+(ehz_2p_loop02&$7fff)>>8
000003D0 8006 B303 03B1 B1AE AE80+  	dc.b	nRst, $06, nD4, $03, $03, nC4, nC4, nA3, nA3, nRst, $06, nD4
000003DC 0303 B1B1 AEAE AC06 06AE+  	dc.b	$03, $03, nC4, nC4, nA3, nA3, nG3, $06, $06, nA3, $03, nG3
000003E8 AE06 AC18                  	dc.b	nA3, $06, nG3, $18
000003EC                            	smpsJump            EHZ_2p_Loop01
000003EC F6                       M 	dc.b	$f6
000003ED 0000                     M 	dc.w	((ehz_2p_loop01&$7fff)<<8)&$ff00+(ehz_2p_loop01&$7fff)>>8
000003EF                            
000003EF                            ; DAC Data
000003EF                            EHZ_2p_DAC:
000003EF 8C03 8C8C 068D 038D 8D06+  	dc.b	dMidTom, $03, dMidTom, dMidTom, $06, dLowTom, $03, dLowTom, dLowTom, $06, dFloorTom, $03
000003FB 8E8E 068D 8E               	dc.b	dFloorTom, dFloorTom, $06, dLowTom, dFloorTom
00000400                            
00000400                            EHZ_2p_Loop00:
00000400 8181 8E80 8181 8E80        	dc.b	dKick, dKick, dFloorTom, nRst, dKick, dKick, dFloorTom, nRst
00000408                            	smpsLoop            $00, $0F, EHZ_2p_Loop00
00000408 F7                       M 	dc.b	$f7
00000409 000F                     M 	dc.b	index,loops
0000040B 0000                     M 	dc.w	((ehz_2p_loop00&$7fff)<<8)&$ff00+(ehz_2p_loop00&$7fff)>>8
0000040D 8181 8E80 8C03 8C8C 068D+  	dc.b	dKick, dKick, dFloorTom, nRst, dMidTom, $03, dMidTom, dMidTom, $06, dLowTom, dFloorTom
00000418                            	smpsJump            EHZ_2p_Loop00
00000418 F6                       M 	dc.b	$f6
00000419 0000                     M 	dc.w	((ehz_2p_loop00&$7fff)<<8)&$ff00+(ehz_2p_loop00&$7fff)>>8
0000041B                            
0000041B                            ; PSG1 Data
0000041B                            EHZ_2p_PSG1:
0000041B 8002                       	dc.b	nRst, $02
0000041D                            	smpsPSGvoice        fTone_08
0000041D F508                     M 	dc.b	$f5,ftone_08
0000041F                            	smpsAlterVol        $04
0000041F E604                     M 	dc.b	$e6,$04
00000421 D003 CECD CBCE CDCB C9CD+  	dc.b	nG6, $03, nF6, nE6, nD6, nF6, nE6, nD6, nC6, nE6, nD6, nC6
0000042D C8C9 C8C6 C401             	dc.b	nB5, nC6, nB5, nA5, nG5, $01
00000433                            	smpsAlterVol        $FC
00000433 E6FC                     M 	dc.b	$e6,$fc
00000435                            	smpsAlterPitch      $04
00000435                          M 	smpschangetransposition	$04
00000435 E904                     M 	dc.b	$e9,$04
00000437                            	smpsJump            EHZ_2p_Loop06
00000437 F6                       M 	dc.b	$f6
00000438 0000                     M 	dc.w	((ehz_2p_loop06&$7fff)<<8)&$ff00+(ehz_2p_loop06&$7fff)>>8
0000043A                            
0000043A                            ; PSG2 Data
0000043A                            EHZ_2p_PSG2:
0000043A 8030                       	dc.b	nRst, $30
0000043C                            
0000043C                            EHZ_2p_Loop06:
0000043C                            	smpsNoteFill        $06
0000043C E806                     M 	dc.b	$e8,$06
0000043E 8006 BD03 090C C403 0906+  	dc.b	nRst, $06, nC5, $03, $09, $0C, nG5, $03, $09, $06, nRst, nF5
0000044A 0309 0CC4 0309 06          	dc.b	$03, $09, $0C, nG5, $03, $09, $06
00000451                            	smpsLoop            $00, $04, EHZ_2p_Loop06
00000451 F7                       M 	dc.b	$f7
00000452 0004                     M 	dc.b	index,loops
00000454 0000                     M 	dc.w	((ehz_2p_loop06&$7fff)<<8)&$ff00+(ehz_2p_loop06&$7fff)>>8
00000456                            	smpsNoteFill        $00
00000456 E800                     M 	dc.b	$e8,$00
00000458                            	smpsPSGvoice        fTone_0B
00000458 F50B                     M 	dc.b	$f5,ftone_0b
0000045A C218 C20C C2C0 C206 C00C+  	dc.b	nF5, $18, nF5, $0C, nF5, nEb5, nF5, $06, nEb5, $0C, nF5, $06
00000466 C00C C218 C20C C2C0 30C2+  	dc.b	nEb5, $0C, nF5, $18, nF5, $0C, nF5, nEb5, $30, nF5, $18, nF5
00000472 0CC2 C0C2 06C0 0CC2 06C0+  	dc.b	$0C, nF5, nEb5, nF5, $06, nEb5, $0C, nF5, $06, nEb5, $0C, nF5
0000047E 18C2 0CC2 C406 802A        	dc.b	$18, nF5, $0C, nF5, nG5, $06, nRst, $2A
00000486                            	smpsJump            EHZ_2p_Loop06
00000486 F6                       M 	dc.b	$f6
00000487 0000                     M 	dc.w	((ehz_2p_loop06&$7fff)<<8)&$ff00+(ehz_2p_loop06&$7fff)>>8
00000489                            
00000489                            ; PSG3 Data
00000489                            EHZ_2p_PSG3:
00000489 8030                       	dc.b	nRst, $30
0000048B                            
0000048B                            EHZ_2p_Jump02:
0000048B                            	smpsPSGvoice        fTone_04
0000048B F504                     M 	dc.b	$f5,ftone_04
0000048D                            	smpsPSGform         $E7
0000048D F3E7                     M 	dc.b	$f3,$e7
0000048F                            	smpsModSet          $00, $01, $01, $01
0000048F F0                       M 	dc.b	$f0
00000490 0001 0101                M 	dc.b	$00,$01,$01,$01
00000494 C603 C6C6 06               	dc.b	nMaxPSG, $03, nMaxPSG, nMaxPSG, $06
00000499                            	smpsJump            EHZ_2p_Jump02
00000499 F6                       M 	dc.b	$f6
0000049A 0000                     M 	dc.w	((ehz_2p_jump02&$7fff)<<8)&$ff00+(ehz_2p_jump02&$7fff)>>8
0000049C                            
0000049C                            EHZ_2p_Voices:
0000049C                            ;	Voice $00
0000049C                            ;	$20
0000049C                            ;	$66, $65, $60, $60, 	$DF, $DF, $9F, $1F, 	$00, $06, $09, $0C
0000049C                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$1C, $3A, $16, $80
0000049C                            	smpsVcAlgorithm     $00
0000049C =00000000                M vcalgorithm	=	val
0000049C                            	smpsVcFeedback      $04
0000049C =00000004                M vcfeedback	=	val
0000049C                            	smpsVcUnusedBits    $00
0000049C =00000000                M vcunusedbits	=	val
0000049C =00000000                M vcd1r1unk	=	0
0000049C =00000000                M vcd1r2unk	=	0
0000049C =00000000                M vcd1r3unk	=	0
0000049C =00000000                M vcd1r4unk	=	0
0000049C                            	smpsVcDetune        $06, $06, $06, $06
0000049C =00000006                M vcdt1	=	op1
0000049C =00000006                M vcdt2	=	op2
0000049C =00000006                M vcdt3	=	op3
0000049C =00000006                M vcdt4	=	op4
0000049C                            	smpsVcCoarseFreq    $00, $00, $05, $06
0000049C =00000000                M vccf1	=	op1
0000049C =00000000                M vccf2	=	op2
0000049C =00000005                M vccf3	=	op3
0000049C =00000006                M vccf4	=	op4
0000049C                            	smpsVcRateScale     $00, $02, $03, $03
0000049C =00000000                M vcrs1	=	op1
0000049C =00000002                M vcrs2	=	op2
0000049C =00000003                M vcrs3	=	op3
0000049C =00000003                M vcrs4	=	op4
0000049C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000049C =0000001F                M vcar1	=	op1
0000049C =0000001F                M vcar2	=	op2
0000049C =0000001F                M vcar3	=	op3
0000049C =0000001F                M vcar4	=	op4
0000049C                            	smpsVcAmpMod        $00, $00, $00, $00
0000049C =00000000                M vcam1	=	op1<<5
0000049C =00000000                M vcam2	=	op2<<5
0000049C =00000000                M vcam3	=	op3<<5
0000049C =00000000                M vcam4	=	op4<<5
0000049C                            	smpsVcDecayRate1    $0C, $09, $06, $00
0000049C =0000000C                M vcd1r1	=	op1
0000049C =00000009                M vcd1r2	=	op2
0000049C =00000006                M vcd1r3	=	op3
0000049C =00000000                M vcd1r4	=	op4
0000049C                            	smpsVcDecayRate2    $08, $06, $06, $07
0000049C =00000008                M vcd2r1	=	op1
0000049C =00000006                M vcd2r2	=	op2
0000049C =00000006                M vcd2r3	=	op3
0000049C =00000007                M vcd2r4	=	op4
0000049C                            	smpsVcDecayLevel    $0F, $01, $01, $02
0000049C =0000000F                M vcdl1	=	op1
0000049C =00000001                M vcdl2	=	op2
0000049C =00000001                M vcdl3	=	op3
0000049C =00000002                M vcdl4	=	op4
0000049C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000049C =0000000F                M vcrr1	=	op1
0000049C =0000000F                M vcrr2	=	op2
0000049C =0000000F                M vcrr3	=	op3
0000049C =0000000F                M vcrr4	=	op4
0000049C                            	smpsVcTotalLevel    $00, $16, $3A, $1C
0000049C =00000000                M vctl1	=	op1
0000049C =00000016                M vctl2	=	op2
0000049C =0000003A                M vctl3	=	op3
0000049C =0000001C                M vctl4	=	op4
0000049C 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000049D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000049D =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000049D =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000049D =00000080                M vctlmask1	=	$80
0000049D 6660 6560                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004A1 DF9F DF1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004A5 0009 060C                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004A9 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004AD 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004B1 1C16 3A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004B5                            
000004B5                            ;	Voice $01
000004B5                            ;	$0D
000004B5                            ;	$32, $08, $06, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
000004B5                            ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $80, $86, $8D
000004B5                            	smpsVcAlgorithm     $05
000004B5 =00000005                M vcalgorithm	=	val
000004B5                            	smpsVcFeedback      $01
000004B5 =00000001                M vcfeedback	=	val
000004B5                            	smpsVcUnusedBits    $00
000004B5 =00000000                M vcunusedbits	=	val
000004B5 =00000000                M vcd1r1unk	=	0
000004B5 =00000000                M vcd1r2unk	=	0
000004B5 =00000000                M vcd1r3unk	=	0
000004B5 =00000000                M vcd1r4unk	=	0
000004B5                            	smpsVcDetune        $00, $00, $00, $03
000004B5 =00000000                M vcdt1	=	op1
000004B5 =00000000                M vcdt2	=	op2
000004B5 =00000000                M vcdt3	=	op3
000004B5 =00000003                M vcdt4	=	op4
000004B5                            	smpsVcCoarseFreq    $01, $06, $08, $02
000004B5 =00000001                M vccf1	=	op1
000004B5 =00000006                M vccf2	=	op2
000004B5 =00000008                M vccf3	=	op3
000004B5 =00000002                M vccf4	=	op4
000004B5                            	smpsVcRateScale     $00, $00, $00, $00
000004B5 =00000000                M vcrs1	=	op1
000004B5 =00000000                M vcrs2	=	op2
000004B5 =00000000                M vcrs3	=	op3
000004B5 =00000000                M vcrs4	=	op4
000004B5                            	smpsVcAttackRate    $19, $19, $19, $1F
000004B5 =00000019                M vcar1	=	op1
000004B5 =00000019                M vcar2	=	op2
000004B5 =00000019                M vcar3	=	op3
000004B5 =0000001F                M vcar4	=	op4
000004B5                            	smpsVcAmpMod        $00, $00, $00, $00
000004B5 =00000000                M vcam1	=	op1<<5
000004B5 =00000000                M vcam2	=	op2<<5
000004B5 =00000000                M vcam3	=	op3<<5
000004B5 =00000000                M vcam4	=	op4<<5
000004B5                            	smpsVcDecayRate1    $05, $05, $05, $0A
000004B5 =00000005                M vcd1r1	=	op1
000004B5 =00000005                M vcd1r2	=	op2
000004B5 =00000005                M vcd1r3	=	op3
000004B5 =0000000A                M vcd1r4	=	op4
000004B5                            	smpsVcDecayRate2    $02, $02, $02, $00
000004B5 =00000002                M vcd2r1	=	op1
000004B5 =00000002                M vcd2r2	=	op2
000004B5 =00000002                M vcd2r3	=	op3
000004B5 =00000000                M vcd2r4	=	op4
000004B5                            	smpsVcDecayLevel    $02, $02, $02, $03
000004B5 =00000002                M vcdl1	=	op1
000004B5 =00000002                M vcdl2	=	op2
000004B5 =00000002                M vcdl3	=	op3
000004B5 =00000003                M vcdl4	=	op4
000004B5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004B5 =0000000F                M vcrr1	=	op1
000004B5 =0000000F                M vcrr2	=	op2
000004B5 =0000000F                M vcrr3	=	op3
000004B5 =0000000F                M vcrr4	=	op4
000004B5                            	smpsVcTotalLevel    $0D, $06, $00, $28
000004B5 =0000000D                M vctl1	=	op1
000004B5 =00000006                M vctl2	=	op2
000004B5 =00000000                M vctl3	=	op3
000004B5 =00000028                M vctl4	=	op4
000004B5 0D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004B6 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000004B6 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000004B6 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000004B6 =00000080                M vctlmask1	=	$80
000004B6 3206 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004BA 1F19 1919                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004BE 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004C2 0002 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004C6 3F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004CA 2886 808D                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004CE                            
000004CE                            ;	Voice $02
000004CE                            ;	$3A
000004CE                            ;	$61, $08, $51, $02, 	$5D, $5D, $5D, $50, 	$04, $0F, $1F, $1F
000004CE                            ;	$00, $00, $00, $00, 	$1F, $5F, $0F, $0F, 	$22, $1E, $22, $80
000004CE                            	smpsVcAlgorithm     $02
000004CE =00000002                M vcalgorithm	=	val
000004CE                            	smpsVcFeedback      $07
000004CE =00000007                M vcfeedback	=	val
000004CE                            	smpsVcUnusedBits    $00
000004CE =00000000                M vcunusedbits	=	val
000004CE =00000000                M vcd1r1unk	=	0
000004CE =00000000                M vcd1r2unk	=	0
000004CE =00000000                M vcd1r3unk	=	0
000004CE =00000000                M vcd1r4unk	=	0
000004CE                            	smpsVcDetune        $00, $05, $00, $06
000004CE =00000000                M vcdt1	=	op1
000004CE =00000005                M vcdt2	=	op2
000004CE =00000000                M vcdt3	=	op3
000004CE =00000006                M vcdt4	=	op4
000004CE                            	smpsVcCoarseFreq    $02, $01, $08, $01
000004CE =00000002                M vccf1	=	op1
000004CE =00000001                M vccf2	=	op2
000004CE =00000008                M vccf3	=	op3
000004CE =00000001                M vccf4	=	op4
000004CE                            	smpsVcRateScale     $01, $01, $01, $01
000004CE =00000001                M vcrs1	=	op1
000004CE =00000001                M vcrs2	=	op2
000004CE =00000001                M vcrs3	=	op3
000004CE =00000001                M vcrs4	=	op4
000004CE                            	smpsVcAttackRate    $10, $1D, $1D, $1D
000004CE =00000010                M vcar1	=	op1
000004CE =0000001D                M vcar2	=	op2
000004CE =0000001D                M vcar3	=	op3
000004CE =0000001D                M vcar4	=	op4
000004CE                            	smpsVcAmpMod        $00, $00, $00, $00
000004CE =00000000                M vcam1	=	op1<<5
000004CE =00000000                M vcam2	=	op2<<5
000004CE =00000000                M vcam3	=	op3<<5
000004CE =00000000                M vcam4	=	op4<<5
000004CE                            	smpsVcDecayRate1    $1F, $1F, $0F, $04
000004CE =0000001F                M vcd1r1	=	op1
000004CE =0000001F                M vcd1r2	=	op2
000004CE =0000000F                M vcd1r3	=	op3
000004CE =00000004                M vcd1r4	=	op4
000004CE                            	smpsVcDecayRate2    $00, $00, $00, $00
000004CE =00000000                M vcd2r1	=	op1
000004CE =00000000                M vcd2r2	=	op2
000004CE =00000000                M vcd2r3	=	op3
000004CE =00000000                M vcd2r4	=	op4
000004CE                            	smpsVcDecayLevel    $00, $00, $05, $01
000004CE =00000000                M vcdl1	=	op1
000004CE =00000000                M vcdl2	=	op2
000004CE =00000005                M vcdl3	=	op3
000004CE =00000001                M vcdl4	=	op4
000004CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004CE =0000000F                M vcrr1	=	op1
000004CE =0000000F                M vcrr2	=	op2
000004CE =0000000F                M vcrr3	=	op3
000004CE =0000000F                M vcrr4	=	op4
000004CE                            	smpsVcTotalLevel    $00, $22, $1E, $22
000004CE =00000000                M vctl1	=	op1
000004CE =00000022                M vctl2	=	op2
000004CE =0000001E                M vctl3	=	op3
000004CE =00000022                M vctl4	=	op4
000004CE 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004CF =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000004CF =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000004CF =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000004CF =00000080                M vctlmask1	=	$80
000004CF 6151 0802                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004D3 5D5D 5D50                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004D7 041F 0F1F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004DB 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004DF 1F0F 5F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004E3 2222 1E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004E7                            
000004E7                            ;	Voice $03
000004E7                            ;	$02
000004E7                            ;	$01, $55, $02, $04, 	$92, $8D, $8E, $54, 	$0D, $0C, $00, $03
000004E7                            ;	$00, $00, $00, $00, 	$FF, $2F, $0F, $5F, 	$16, $2A, $1D, $80
000004E7                            	smpsVcAlgorithm     $02
000004E7 =00000002                M vcalgorithm	=	val
000004E7                            	smpsVcFeedback      $00
000004E7 =00000000                M vcfeedback	=	val
000004E7                            	smpsVcUnusedBits    $00
000004E7 =00000000                M vcunusedbits	=	val
000004E7 =00000000                M vcd1r1unk	=	0
000004E7 =00000000                M vcd1r2unk	=	0
000004E7 =00000000                M vcd1r3unk	=	0
000004E7 =00000000                M vcd1r4unk	=	0
000004E7                            	smpsVcDetune        $00, $00, $05, $00
000004E7 =00000000                M vcdt1	=	op1
000004E7 =00000000                M vcdt2	=	op2
000004E7 =00000005                M vcdt3	=	op3
000004E7 =00000000                M vcdt4	=	op4
000004E7                            	smpsVcCoarseFreq    $04, $02, $05, $01
000004E7 =00000004                M vccf1	=	op1
000004E7 =00000002                M vccf2	=	op2
000004E7 =00000005                M vccf3	=	op3
000004E7 =00000001                M vccf4	=	op4
000004E7                            	smpsVcRateScale     $01, $02, $02, $02
000004E7 =00000001                M vcrs1	=	op1
000004E7 =00000002                M vcrs2	=	op2
000004E7 =00000002                M vcrs3	=	op3
000004E7 =00000002                M vcrs4	=	op4
000004E7                            	smpsVcAttackRate    $14, $0E, $0D, $12
000004E7 =00000014                M vcar1	=	op1
000004E7 =0000000E                M vcar2	=	op2
000004E7 =0000000D                M vcar3	=	op3
000004E7 =00000012                M vcar4	=	op4
000004E7                            	smpsVcAmpMod        $00, $00, $00, $00
000004E7 =00000000                M vcam1	=	op1<<5
000004E7 =00000000                M vcam2	=	op2<<5
000004E7 =00000000                M vcam3	=	op3<<5
000004E7 =00000000                M vcam4	=	op4<<5
000004E7                            	smpsVcDecayRate1    $03, $00, $0C, $0D
000004E7 =00000003                M vcd1r1	=	op1
000004E7 =00000000                M vcd1r2	=	op2
000004E7 =0000000C                M vcd1r3	=	op3
000004E7 =0000000D                M vcd1r4	=	op4
000004E7                            	smpsVcDecayRate2    $00, $00, $00, $00
000004E7 =00000000                M vcd2r1	=	op1
000004E7 =00000000                M vcd2r2	=	op2
000004E7 =00000000                M vcd2r3	=	op3
000004E7 =00000000                M vcd2r4	=	op4
000004E7                            	smpsVcDecayLevel    $05, $00, $02, $0F
000004E7 =00000005                M vcdl1	=	op1
000004E7 =00000000                M vcdl2	=	op2
000004E7 =00000002                M vcdl3	=	op3
000004E7 =0000000F                M vcdl4	=	op4
000004E7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004E7 =0000000F                M vcrr1	=	op1
000004E7 =0000000F                M vcrr2	=	op2
000004E7 =0000000F                M vcrr3	=	op3
000004E7 =0000000F                M vcrr4	=	op4
000004E7                            	smpsVcTotalLevel    $00, $1D, $2A, $16
000004E7 =00000000                M vctl1	=	op1
000004E7 =0000001D                M vctl2	=	op2
000004E7 =0000002A                M vctl3	=	op3
000004E7 =00000016                M vctl4	=	op4
000004E7 02                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004E8 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000004E8 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000004E8 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000004E8 =00000080                M vctlmask1	=	$80
000004E8 0102 5504                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004EC 928E 8D54                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004F0 0D00 0C03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000004F4 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004F8 FF0F 2F5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004FC 161D 2A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000500                            
00000500                            ;	Voice $04
00000500                            ;	$02
00000500                            ;	$75, $71, $73, $31, 	$1F, $58, $96, $9F, 	$01, $1B, $03, $08
00000500                            ;	$01, $04, $01, $05, 	$FF, $2F, $3F, $2F, 	$24, $29, $30, $80
00000500                            	smpsVcAlgorithm     $02
00000500 =00000002                M vcalgorithm	=	val
00000500                            	smpsVcFeedback      $00
00000500 =00000000                M vcfeedback	=	val
00000500                            	smpsVcUnusedBits    $00
00000500 =00000000                M vcunusedbits	=	val
00000500 =00000000                M vcd1r1unk	=	0
00000500 =00000000                M vcd1r2unk	=	0
00000500 =00000000                M vcd1r3unk	=	0
00000500 =00000000                M vcd1r4unk	=	0
00000500                            	smpsVcDetune        $03, $07, $07, $07
00000500 =00000003                M vcdt1	=	op1
00000500 =00000007                M vcdt2	=	op2
00000500 =00000007                M vcdt3	=	op3
00000500 =00000007                M vcdt4	=	op4
00000500                            	smpsVcCoarseFreq    $01, $03, $01, $05
00000500 =00000001                M vccf1	=	op1
00000500 =00000003                M vccf2	=	op2
00000500 =00000001                M vccf3	=	op3
00000500 =00000005                M vccf4	=	op4
00000500                            	smpsVcRateScale     $02, $02, $01, $00
00000500 =00000002                M vcrs1	=	op1
00000500 =00000002                M vcrs2	=	op2
00000500 =00000001                M vcrs3	=	op3
00000500 =00000000                M vcrs4	=	op4
00000500                            	smpsVcAttackRate    $1F, $16, $18, $1F
00000500 =0000001F                M vcar1	=	op1
00000500 =00000016                M vcar2	=	op2
00000500 =00000018                M vcar3	=	op3
00000500 =0000001F                M vcar4	=	op4
00000500                            	smpsVcAmpMod        $00, $00, $00, $00
00000500 =00000000                M vcam1	=	op1<<5
00000500 =00000000                M vcam2	=	op2<<5
00000500 =00000000                M vcam3	=	op3<<5
00000500 =00000000                M vcam4	=	op4<<5
00000500                            	smpsVcDecayRate1    $08, $03, $1B, $01
00000500 =00000008                M vcd1r1	=	op1
00000500 =00000003                M vcd1r2	=	op2
00000500 =0000001B                M vcd1r3	=	op3
00000500 =00000001                M vcd1r4	=	op4
00000500                            	smpsVcDecayRate2    $05, $01, $04, $01
00000500 =00000005                M vcd2r1	=	op1
00000500 =00000001                M vcd2r2	=	op2
00000500 =00000004                M vcd2r3	=	op3
00000500 =00000001                M vcd2r4	=	op4
00000500                            	smpsVcDecayLevel    $02, $03, $02, $0F
00000500 =00000002                M vcdl1	=	op1
00000500 =00000003                M vcdl2	=	op2
00000500 =00000002                M vcdl3	=	op3
00000500 =0000000F                M vcdl4	=	op4
00000500                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000500 =0000000F                M vcrr1	=	op1
00000500 =0000000F                M vcrr2	=	op2
00000500 =0000000F                M vcrr3	=	op3
00000500 =0000000F                M vcrr4	=	op4
00000500                            	smpsVcTotalLevel    $00, $30, $29, $24
00000500 =00000000                M vctl1	=	op1
00000500 =00000030                M vctl2	=	op2
00000500 =00000029                M vctl3	=	op3
00000500 =00000024                M vctl4	=	op4
00000500 02                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000501 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000501 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000501 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000501 =00000080                M vctlmask1	=	$80
00000501 7573 7131                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000505 1F96 589F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000509 0103 1B08                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000050D 0101 0405                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000511 FF3F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000515 2430 2980                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000519                            
00000519                          M 	pops
00000000                            		inc_music	TwoPlayerMenu
00000000                          M 	pushs
00000000                          M music_1945:	section	org($1380),file("sound/music/compressed/twoplayermenu.unc"),over(header)
00000000                          M 	include	"sound/music/twoplayermenu.asm"
00000000                            Results_screen_2p_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     Results_screen_2p_Voices
00000000 0000                     M 	dc.w	((results_screen_2p_voices&$7fff)<<8)&$ff00+(results_screen_2p_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $68
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$68
00000005 68                       M 	dc.b	$68
00000006                            
00000006                            	smpsHeaderDAC       Results_screen_2p_DAC
00000006                          M 	checkedchannelpointer	results_screen_2p_dac
00000006 0000                     M 	dc.w	((results_screen_2p_dac&$7fff)<<8)&$ff00+(results_screen_2p_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Results_screen_2p_FM1,	$F4, $10
0000000A                          M 	checkedchannelpointer	results_screen_2p_fm1
0000000A 0000                     M 	dc.w	((results_screen_2p_fm1&$7fff)<<8)&$ff00+(results_screen_2p_fm1&$7fff)>>8
0000000C F410                     M 	dc.b	$f4,$10
0000000E                            	smpsHeaderFM        Results_screen_2p_FM2,	$F4, $0C
0000000E                          M 	checkedchannelpointer	results_screen_2p_fm2
0000000E 0000                     M 	dc.w	((results_screen_2p_fm2&$7fff)<<8)&$ff00+(results_screen_2p_fm2&$7fff)>>8
00000010 F40C                     M 	dc.b	$f4,$0c
00000012                            	smpsHeaderFM        Results_screen_2p_FM3,	$F4, $19
00000012                          M 	checkedchannelpointer	results_screen_2p_fm3
00000012 0000                     M 	dc.w	((results_screen_2p_fm3&$7fff)<<8)&$ff00+(results_screen_2p_fm3&$7fff)>>8
00000014 F419                     M 	dc.b	$f4,$19
00000016                            	smpsHeaderFM        Results_screen_2p_FM4,	$F4, $10
00000016                          M 	checkedchannelpointer	results_screen_2p_fm4
00000016 0000                     M 	dc.w	((results_screen_2p_fm4&$7fff)<<8)&$ff00+(results_screen_2p_fm4&$7fff)>>8
00000018 F410                     M 	dc.b	$f4,$10
0000001A                            	smpsHeaderFM        Results_screen_2p_FM5,	$F4, $11
0000001A                          M 	checkedchannelpointer	results_screen_2p_fm5
0000001A 0000                     M 	dc.w	((results_screen_2p_fm5&$7fff)<<8)&$ff00+(results_screen_2p_fm5&$7fff)>>8
0000001C F411                     M 	dc.b	$f4,$11
0000001E                            	smpsHeaderPSG       Results_screen_2p_PSG1,	$D0, $01, $00, $00
0000001E                          M 	checkedchannelpointer	results_screen_2p_psg1
0000001E 0000                     M 	dc.w	((results_screen_2p_psg1&$7fff)<<8)&$ff00+(results_screen_2p_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 01                       M 	dc.b	$01
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       Results_screen_2p_PSG2,	$D0, $01, $00, $00
00000024                          M 	checkedchannelpointer	results_screen_2p_psg2
00000024 0000                     M 	dc.w	((results_screen_2p_psg2&$7fff)<<8)&$ff00+(results_screen_2p_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 01                       M 	dc.b	$01
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       Results_screen_2p_PSG3,	$D0, $01, $00, $00
0000002A                          M 	checkedchannelpointer	results_screen_2p_psg3
0000002A 0000                     M 	dc.w	((results_screen_2p_psg3&$7fff)<<8)&$ff00+(results_screen_2p_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$d0
0000002C D0                       M 	dc.b	$d0
0000002D 01                       M 	dc.b	$01
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; FM1 Data
00000030                            Results_screen_2p_FM1:
00000030                            	smpsSetvoice        $04
00000030                          M 	smpsfmvoice	$04
00000030 EF04                     M 	dc.b	$ef,$04
00000032                            	smpsModSet          $02, $01, $01, $01
00000032 F0                       M 	dc.b	$f0
00000033 0201 0101                M 	dc.b	$02,$01,$01,$01
00000037                            	smpsPan             panRight, $00
00000037 E040                     M 	dc.b	$e0,direction+amsfms
00000039                            	smpsAlterVol        $03
00000039 E603                     M 	dc.b	$e6,$03
0000003B 8002                       	dc.b	nRst, $02
0000003D                            	smpsCall            Results_screen_2p_Call03
0000003D F8                       M 	dc.b	$f8
0000003E 0000                     M 	dc.w	((results_screen_2p_call03&$7fff)<<8)&$ff00+(results_screen_2p_call03&$7fff)>>8
00000040 CB16                       	dc.b	nD6, $16
00000042                            	smpsAlterVol        $FD
00000042 E6FD                     M 	dc.b	$e6,$fd
00000044                            	smpsSetvoice        $05
00000044                          M 	smpsfmvoice	$05
00000044 EF05                     M 	dc.b	$ef,$05
00000046                            	smpsPan             panRight, $00
00000046 E040                     M 	dc.b	$e0,direction+amsfms
00000048                            	smpsAlterVol        $FB
00000048 E6FB                     M 	dc.b	$e6,$fb
0000004A                            	smpsCall            Results_screen_2p_Call01
0000004A F8                       M 	dc.b	$f8
0000004B 0000                     M 	dc.w	((results_screen_2p_call01&$7fff)<<8)&$ff00+(results_screen_2p_call01&$7fff)>>8
0000004D                            	smpsCall            Results_screen_2p_Call01
0000004D F8                       M 	dc.b	$f8
0000004E 0000                     M 	dc.w	((results_screen_2p_call01&$7fff)<<8)&$ff00+(results_screen_2p_call01&$7fff)>>8
00000050                            	smpsAlterVol        $05
00000050 E605                     M 	dc.b	$e6,$05
00000052                            	smpsPan             panCenter, $00
00000052 E0C0                     M 	dc.b	$e0,direction+amsfms
00000054                            	smpsSetvoice        $01
00000054                          M 	smpsfmvoice	$01
00000054 EF01                     M 	dc.b	$ef,$01
00000056                            	smpsCall            Results_screen_2p_Call05
00000056 F8                       M 	dc.b	$f8
00000057 0000                     M 	dc.w	((results_screen_2p_call05&$7fff)<<8)&$ff00+(results_screen_2p_call05&$7fff)>>8
00000059 8018 BF03 BC80 BF80 0C80+  	dc.b	nRst, $18, nD5, $03, nB4, nRst, nD5, nRst, $0C, nRst, $18, nCs5
00000065 03BE 80BE BA06 BE          	dc.b	$03, nCs5, nRst, nCs5, nA4, $06, nCs5
0000006C                            	smpsCall            Results_screen_2p_Call05
0000006C F8                       M 	dc.b	$f8
0000006D 0000                     M 	dc.w	((results_screen_2p_call05&$7fff)<<8)&$ff00+(results_screen_2p_call05&$7fff)>>8
0000006F 800C BC80 BE80 BF80 C180+  	dc.b	nRst, $0C, nB4, nRst, nCs5, nRst, nD5, nRst, nE5, nRst, $18, nD6
0000007B 0CCA                       	dc.b	$0C, nCs6
0000007D                            	smpsJump            Results_screen_2p_FM1
0000007D F6                       M 	dc.b	$f6
0000007E 0000                     M 	dc.w	((results_screen_2p_fm1&$7fff)<<8)&$ff00+(results_screen_2p_fm1&$7fff)>>8
00000080                            
00000080                            Results_screen_2p_Call03:
00000080                            	smpsCall            Results_screen_2p_Call0C
00000080 F8                       M 	dc.b	$f8
00000081 0000                     M 	dc.w	((results_screen_2p_call0c&$7fff)<<8)&$ff00+(results_screen_2p_call0c&$7fff)>>8
00000083 D206 D4D2 18               	dc.b	nA6, $06, nB6, nA6, $18
00000088                            	smpsCall            Results_screen_2p_Call0C
00000088 F8                       M 	dc.b	$f8
00000089 0000                     M 	dc.w	((results_screen_2p_call0c&$7fff)<<8)&$ff00+(results_screen_2p_call0c&$7fff)>>8
0000008B CF06 CD                    	dc.b	nFs6, $06, nE6
0000008E                            	smpsReturn
0000008E E3                       M 	dc.b	$e3
0000008F                            
0000008F                            Results_screen_2p_Call0C:
0000008F D40C D606 D7D2 0CCF 06CB+  	dc.b	nB6, $0C, nCs7, $06, nD7, nA6, $0C, nFs6, $06, nD6, nG6, $0C
0000009B                            	smpsReturn
0000009B E3                       M 	dc.b	$e3
0000009C                            
0000009C                            Results_screen_2p_Call01:
0000009C                            	smpsCall            Results_screen_2p_Call0B
0000009C F8                       M 	dc.b	$f8
0000009D 0000                     M 	dc.w	((results_screen_2p_call0b&$7fff)<<8)&$ff00+(results_screen_2p_call0b&$7fff)>>8
0000009F CD80 CD80 CFCF 80CB 8018   	dc.b	nE6, nRst, nE6, nRst, nFs6, nFs6, nRst, nD6, nRst, $18
000000A9                            	smpsCall            Results_screen_2p_Call0B
000000A9 F8                       M 	dc.b	$f8
000000AA 0000                     M 	dc.w	((results_screen_2p_call0b&$7fff)<<8)&$ff00+(results_screen_2p_call0b&$7fff)>>8
000000AC 8003 D080 CFCD 80CB CB80+  	dc.b	nRst, $03, nG6, nRst, nFs6, nE6, nRst, nD6, nD6, nRst, $18
000000B7                            	smpsReturn
000000B7 E3                       M 	dc.b	$e3
000000B8                            
000000B8                            Results_screen_2p_Call0B:
000000B8 CD03 80CD 80CF CF80 CB80+  	dc.b	nE6, $03, nRst, nE6, nRst, nFs6, nFs6, nRst, nD6, nRst, nD6, nRst
000000C4 C6C8 06CB 0380             	dc.b	nA5, nB5, $06, nD6, $03, nRst
000000CA                            	smpsReturn
000000CA E3                       M 	dc.b	$e3
000000CB                            
000000CB                            Results_screen_2p_Call05:
000000CB 8018 BF03 BC80 BF80 0C80+  	dc.b	nRst, $18, nD5, $03, nB4, nRst, nD5, nRst, $0C, nRst, $18, nCs5
000000D7 03BA 80BE 800C             	dc.b	$03, nA4, nRst, nCs5, nRst, $0C
000000DD                            	smpsReturn
000000DD E3                       M 	dc.b	$e3
000000DE                            
000000DE                            ; FM2 Data
000000DE                            Results_screen_2p_FM2:
000000DE                            	smpsSetvoice        $00
000000DE                          M 	smpsfmvoice	$00
000000DE EF00                     M 	dc.b	$ef,$00
000000E0                            
000000E0                            Results_screen_2p_Loop01:
000000E0 A706 B303 03A7 06B3        	dc.b	nD3, $06, nD4, $03, $03, nD3, $06, nD4
000000E8                            	smpsLoop            $00, $18, Results_screen_2p_Loop01
000000E8 F7                       M 	dc.b	$f7
000000E9 0018                     M 	dc.b	index,loops
000000EB 0000                     M 	dc.w	((results_screen_2p_loop01&$7fff)<<8)&$ff00+(results_screen_2p_loop01&$7fff)>>8
000000ED                            	smpsCall            Results_screen_2p_Call04
000000ED F8                       M 	dc.b	$f8
000000EE 0000                     M 	dc.w	((results_screen_2p_call04&$7fff)<<8)&$ff00+(results_screen_2p_call04&$7fff)>>8
000000F0                            
000000F0                            Results_screen_2p_Loop02:
000000F0 A9B5 0303 A906 B5          	dc.b	nE3, nE4, $03, $03, nE3, $06, nE4
000000F7                            	smpsLoop            $00, $02, Results_screen_2p_Loop02
000000F7 F7                       M 	dc.b	$f7
000000F8 0002                     M 	dc.b	index,loops
000000FA 0000                     M 	dc.w	((results_screen_2p_loop02&$7fff)<<8)&$ff00+(results_screen_2p_loop02&$7fff)>>8
000000FC                            
000000FC                            Results_screen_2p_Loop03:
000000FC ABB7 0303 AB06 B7          	dc.b	nFs3, nFs4, $03, $03, nFs3, $06, nFs4
00000103                            	smpsLoop            $00, $02, Results_screen_2p_Loop03
00000103 F7                       M 	dc.b	$f7
00000104 0002                     M 	dc.b	index,loops
00000106 0000                     M 	dc.w	((results_screen_2p_loop03&$7fff)<<8)&$ff00+(results_screen_2p_loop03&$7fff)>>8
00000108                            	smpsCall            Results_screen_2p_Call04
00000108 F8                       M 	dc.b	$f8
00000109 0000                     M 	dc.w	((results_screen_2p_call04&$7fff)<<8)&$ff00+(results_screen_2p_call04&$7fff)>>8
0000010B A9B5 0303 A906 B5AB B703+  	dc.b	nE3, nE4, $03, $03, nE3, $06, nE4, nFs3, nFs4, $03, $03, nFs3
00000117 06B7 ACB8 0303 AC06 B8AE+  	dc.b	$06, nFs4, nG3, nG4, $03, $03, nG3, $06, nG4, nA3, nA4, $03
00000123 03AE 06BA AEBA AEBA AE0C+  	dc.b	$03, nA3, $06, nA4, nA3, nA4, nA3, nA4, nA3, $0C, $0C
0000012E                            	smpsJump            Results_screen_2p_Loop01
0000012E F6                       M 	dc.b	$f6
0000012F 0000                     M 	dc.w	((results_screen_2p_loop01&$7fff)<<8)&$ff00+(results_screen_2p_loop01&$7fff)>>8
00000131                            
00000131                            Results_screen_2p_Call04:
00000131 ACB8 0303 AC06 B8          	dc.b	nG3, nG4, $03, $03, nG3, $06, nG4
00000138                            	smpsLoop            $01, $02, Results_screen_2p_Call04
00000138 F7                       M 	dc.b	$f7
00000139 0102                     M 	dc.b	index,loops
0000013B 0000                     M 	dc.w	((results_screen_2p_call04&$7fff)<<8)&$ff00+(results_screen_2p_call04&$7fff)>>8
0000013D                            
0000013D                            Results_screen_2p_Loop04:
0000013D ABB7 0303 AB06 B7          	dc.b	nFs3, nFs4, $03, $03, nFs3, $06, nFs4
00000144                            	smpsLoop            $01, $02, Results_screen_2p_Loop04
00000144 F7                       M 	dc.b	$f7
00000145 0102                     M 	dc.b	index,loops
00000147 0000                     M 	dc.w	((results_screen_2p_loop04&$7fff)<<8)&$ff00+(results_screen_2p_loop04&$7fff)>>8
00000149                            	smpsReturn
00000149 E3                       M 	dc.b	$e3
0000014A                            
0000014A                            ; FM3 Data
0000014A                            Results_screen_2p_FM3:
0000014A                            	smpsSetvoice        $02
0000014A                          M 	smpsfmvoice	$02
0000014A EF02                     M 	dc.b	$ef,$02
0000014C                            	smpsCall            Results_screen_2p_Call00
0000014C F8                       M 	dc.b	$f8
0000014D 0000                     M 	dc.w	((results_screen_2p_call00&$7fff)<<8)&$ff00+(results_screen_2p_call00&$7fff)>>8
0000014F                            	smpsAlterVol        $F9
0000014F E6F9                     M 	dc.b	$e6,$f9
00000151 801E BA03 BCBF 8009 801E+  	dc.b	nRst, $1E, nA4, $03, nB4, nD5, nRst, $09, nRst, $1E, nE5, $03
0000015D C3BF 8009 801E BA03 BCBF+  	dc.b	nFs5, nD5, nRst, $09, nRst, $1E, nA4, $03, nB4, nD5, nRst, $09
00000169 8018 C303 C380 C3C1 06BF+  	dc.b	nRst, $18, nFs5, $03, nFs5, nRst, nFs5, nE5, $06, nD5, nRst, $1E
00000175 BA03 BCBF 8009 801E C306+  	dc.b	nA4, $03, nB4, nD5, nRst, $09, nRst, $1E, nFs5, $06, nD5, $03
00000181 8009 801E BA03 BCBF 8009+  	dc.b	nRst, $09, nRst, $1E, nA4, $03, nB4, nD5, nRst, $09, nRst, $18
0000018D C403 C3C4 C5C6 80CB 80     	dc.b	nG5, $03, nFs5, nG5, nAb5, nA5, nRst, nD6, nRst
00000196                            	smpsAlterVol        $07
00000196 E607                     M 	dc.b	$e6,$07
00000198                            	smpsSetvoice        $01
00000198                          M 	smpsfmvoice	$01
00000198 EF01                     M 	dc.b	$ef,$01
0000019A                            	smpsAlterVol        $F2
0000019A E6F2                     M 	dc.b	$e6,$f2
0000019C                            	smpsPan             panRight, $00
0000019C E040                     M 	dc.b	$e0,direction+amsfms
0000019E                            	smpsCall            Results_screen_2p_Call02
0000019E F8                       M 	dc.b	$f8
0000019F 0000                     M 	dc.w	((results_screen_2p_call02&$7fff)<<8)&$ff00+(results_screen_2p_call02&$7fff)>>8
000001A1                            	smpsPan             panCenter, $00
000001A1 E0C0                     M 	dc.b	$e0,direction+amsfms
000001A3                            	smpsAlterVol        $0E
000001A3 E60E                     M 	dc.b	$e6,$0e
000001A5                            	smpsJump            Results_screen_2p_FM3
000001A5 F6                       M 	dc.b	$f6
000001A6 0000                     M 	dc.w	((results_screen_2p_fm3&$7fff)<<8)&$ff00+(results_screen_2p_fm3&$7fff)>>8
000001A8                            
000001A8                            Results_screen_2p_Call02:
000001A8 CB1E C803 CACB 06C8 0380+  	dc.b	nD6, $1E, nB5, $03, nCs6, nD6, $06, nB5, $03, nRst, nCs6, $1B
000001B4 C603 80C8 CA06 C6C8 1EC6+  	dc.b	nA5, $03, nRst, nB5, nCs6, $06, nA5, nB5, $1E, nA5, $03, nRst
000001C0 C806 C6CA 0CC8 06C6 12C8+  	dc.b	nB5, $06, nA5, nCs6, $0C, nB5, $06, nA5, $12, nB5, $06, nCs6
000001CC CB1E C803 CACB 80C8 06CA+  	dc.b	nD6, $1E, nB5, $03, nCs6, nD6, nRst, nB5, $06, nCs6, $1E, nA5
000001D8 03C8 CA80 C606 C812 C603+  	dc.b	$03, nB5, nCs6, nRst, nA5, $06, nB5, $12, nA5, $03, nB5, nCs6
000001E4 12C8 03CA CB12 CA03 CBCD+  	dc.b	$12, nB5, $03, nCs6, nD6, $12, nCs6, $03, nD6, nE6, $30, nFs6
000001F0 0CCD                       	dc.b	$0C, nE6
000001F2                            	smpsReturn
000001F2 E3                       M 	dc.b	$e3
000001F3                            
000001F3                            Results_screen_2p_Call00:
000001F3 801E BA03 BCBF 8009 801E+  	dc.b	nRst, $1E, nA4, $03, nB4, nD5, nRst, $09, nRst, $1E, nE5, $03
000001FF C3BF 8009 801E BA03 BCBF+  	dc.b	nFs5, nD5, nRst, $09, nRst, $1E, nA4, $03, nB4, nD5, nRst, $09
0000020B 8018 C403 C3C4 C5C6 BF80+  	dc.b	nRst, $18, nG5, $03, nFs5, nG5, nAb5, nA5, nD5, nRst, nD5, $03
00000217                            	smpsReturn
00000217 E3                       M 	dc.b	$e3
00000218                            
00000218                            ; FM5 Data
00000218                            Results_screen_2p_FM5:
00000218                            	smpsSetvoice        $03
00000218                          M 	smpsfmvoice	$03
00000218 EF03                     M 	dc.b	$ef,$03
0000021A                            	smpsModSet          $02, $01, $01, $01
0000021A F0                       M 	dc.b	$f0
0000021B 0201 0101                M 	dc.b	$02,$01,$01,$01
0000021F                            
0000021F                            Results_screen_2p_Jump00:
0000021F                            	smpsPan             panLeft, $00
0000021F E080                     M 	dc.b	$e0,direction+amsfms
00000221                            	smpsAlterVol        $02
00000221 E602                     M 	dc.b	$e6,$02
00000223                            	smpsCall            Results_screen_2p_Call03
00000223 F8                       M 	dc.b	$f8
00000224 0000                     M 	dc.w	((results_screen_2p_call03&$7fff)<<8)&$ff00+(results_screen_2p_call03&$7fff)>>8
00000226 CB18                       	dc.b	nD6, $18
00000228                            	smpsPan             panCenter, $00
00000228 E0C0                     M 	dc.b	$e0,direction+amsfms
0000022A                            	smpsAlterVol        $FE
0000022A E6FE                     M 	dc.b	$e6,$fe
0000022C 8030 8080 802A             	dc.b	nRst, $30, nRst, nRst, nRst, $2A
00000232                            	smpsAlterVol        $03
00000232 E603                     M 	dc.b	$e6,$03
00000234 C803 CACB 18CA C8C6 C4C3+  	dc.b	nB5, $03, nCs6, nD6, $18, nCs6, nB5, nA5, nG5, nFs5, nRst, $03
00000240 C803 80C6 C480 C3C3 8018   	dc.b	nB5, $03, nRst, nA5, nG5, nRst, nFs5, nFs5, nRst, $18
0000024A                            	smpsAlterVol        $FD
0000024A E6FD                     M 	dc.b	$e6,$fd
0000024C                            	smpsAlterVol        $03
0000024C E603                     M 	dc.b	$e6,$03
0000024E                            
0000024E                            Results_screen_2p_Loop00:
0000024E D203 D0CF CD               	dc.b	nA6, $03, nG6, nFs6, nE6
00000253                            	smpsLoop            $00, $18, Results_screen_2p_Loop00
00000253 F7                       M 	dc.b	$f7
00000254 0018                     M 	dc.b	index,loops
00000256 0000                     M 	dc.w	((results_screen_2p_loop00&$7fff)<<8)&$ff00+(results_screen_2p_loop00&$7fff)>>8
00000258                            	smpsAlterVol        $FD
00000258 E6FD                     M 	dc.b	$e6,$fd
0000025A 800C CB80 CD80 CF80 D018+  	dc.b	nRst, $0C, nD6, nRst, nE6, nRst, nFs6, nRst, nG6, $18, nRst, $24
00000266                            	smpsJump            Results_screen_2p_Jump00
00000266 F6                       M 	dc.b	$f6
00000267 0000                     M 	dc.w	((results_screen_2p_jump00&$7fff)<<8)&$ff00+(results_screen_2p_jump00&$7fff)>>8
00000269                            
00000269                            ; FM4 Data
00000269                            Results_screen_2p_FM4:
00000269                            	smpsSetvoice        $01
00000269                          M 	smpsfmvoice	$01
00000269 EF01                     M 	dc.b	$ef,$01
0000026B                            	smpsAlterVol        $FE
0000026B E6FE                     M 	dc.b	$e6,$fe
0000026D                            	smpsAlterNote       $02
0000026D                          M 	smpsdetune	$02
0000026D E102                     M 	dc.b	$e1,$02
0000026F                            	smpsCall            Results_screen_2p_Call00
0000026F F8                       M 	dc.b	$f8
00000270 0000                     M 	dc.w	((results_screen_2p_call00&$7fff)<<8)&$ff00+(results_screen_2p_call00&$7fff)>>8
00000272                            	smpsAlterVol        $02
00000272 E602                     M 	dc.b	$e6,$02
00000274                            	smpsSetvoice        $01
00000274                          M 	smpsfmvoice	$01
00000274 EF01                     M 	dc.b	$ef,$01
00000276                            	smpsPan             panLeft, $00
00000276 E080                     M 	dc.b	$e0,direction+amsfms
00000278                            	smpsAlterVol        $FB
00000278 E6FB                     M 	dc.b	$e6,$fb
0000027A                            	smpsCall            Results_screen_2p_Call01
0000027A F8                       M 	dc.b	$f8
0000027B 0000                     M 	dc.w	((results_screen_2p_call01&$7fff)<<8)&$ff00+(results_screen_2p_call01&$7fff)>>8
0000027D                            	smpsCall            Results_screen_2p_Call01
0000027D F8                       M 	dc.b	$f8
0000027E 0000                     M 	dc.w	((results_screen_2p_call01&$7fff)<<8)&$ff00+(results_screen_2p_call01&$7fff)>>8
00000280                            	smpsAlterVol        $05
00000280 E605                     M 	dc.b	$e6,$05
00000282                            	smpsAlterPitch      $F4
00000282                          M 	smpschangetransposition	$f4
00000282 E9F4                     M 	dc.b	$e9,$f4
00000284                            	smpsAlterVol        $FB
00000284 E6FB                     M 	dc.b	$e6,$fb
00000286                            	smpsCall            Results_screen_2p_Call02
00000286 F8                       M 	dc.b	$f8
00000287 0000                     M 	dc.w	((results_screen_2p_call02&$7fff)<<8)&$ff00+(results_screen_2p_call02&$7fff)>>8
00000289                            	smpsAlterPitch      $0C
00000289                          M 	smpschangetransposition	$0c
00000289 E90C                     M 	dc.b	$e9,$0c
0000028B                            	smpsAlterVol        $05
0000028B E605                     M 	dc.b	$e6,$05
0000028D                            	smpsPan             panCenter, $00
0000028D E0C0                     M 	dc.b	$e0,direction+amsfms
0000028F                            	smpsJump            Results_screen_2p_FM4
0000028F F6                       M 	dc.b	$f6
00000290 0000                     M 	dc.w	((results_screen_2p_fm4&$7fff)<<8)&$ff00+(results_screen_2p_fm4&$7fff)>>8
00000292                            
00000292                            ; PSG1 Data
00000292                            Results_screen_2p_PSG1:
00000292                            	smpsPSGvoice        fTone_04
00000292 F504                     M 	dc.b	$f5,ftone_04
00000294                            	smpsNoteFill        $0A
00000294 E80A                     M 	dc.b	$e8,$0a
00000296                            
00000296                            Results_screen_2p_Jump03:
00000296                            	smpsCall            Results_screen_2p_Call09
00000296 F8                       M 	dc.b	$f8
00000297 0000                     M 	dc.w	((results_screen_2p_call09&$7fff)<<8)&$ff00+(results_screen_2p_call09&$7fff)>>8
00000299                            	smpsPSGAlterVol     $01
00000299 EC01                     M 	dc.b	$ec,$01
0000029B                            	smpsCall            Results_screen_2p_Call09
0000029B F8                       M 	dc.b	$f8
0000029C 0000                     M 	dc.w	((results_screen_2p_call09&$7fff)<<8)&$ff00+(results_screen_2p_call09&$7fff)>>8
0000029E                            	smpsCall            Results_screen_2p_Call09
0000029E F8                       M 	dc.b	$f8
0000029F 0000                     M 	dc.w	((results_screen_2p_call09&$7fff)<<8)&$ff00+(results_screen_2p_call09&$7fff)>>8
000002A1                            	smpsCall            Results_screen_2p_Call0A
000002A1 F8                       M 	dc.b	$f8
000002A2 0000                     M 	dc.w	((results_screen_2p_call0a&$7fff)<<8)&$ff00+(results_screen_2p_call0a&$7fff)>>8
000002A4 8003 C806 0306 C409 C806+  	dc.b	nRst, $03, nB5, $06, $03, $06, nG5, $09, nB5, $06, $03, $06
000002B0 C480 03CA 0603 06C6 09CA+  	dc.b	nG5, nRst, $03, nCs6, $06, $03, $06, nA5, $09, nCs6, $06, $09
000002BC C606                       	dc.b	nA5, $06
000002BE                            	smpsCall            Results_screen_2p_Call0A
000002BE F8                       M 	dc.b	$f8
000002BF 0000                     M 	dc.w	((results_screen_2p_call0a&$7fff)<<8)&$ff00+(results_screen_2p_call0a&$7fff)>>8
000002C1                            	smpsCall            Results_screen_2p_Call08
000002C1 F8                       M 	dc.b	$f8
000002C2 0000                     M 	dc.w	((results_screen_2p_call08&$7fff)<<8)&$ff00+(results_screen_2p_call08&$7fff)>>8
000002C4 CA03 CD0C 24               	dc.b	nCs6, $03, nE6, $0C, $24
000002C9                            	smpsPSGAlterVol     $FF
000002C9 ECFF                     M 	dc.b	$ec,$ff
000002CB                            	smpsJump            Results_screen_2p_Jump03
000002CB F6                       M 	dc.b	$f6
000002CC 0000                     M 	dc.w	((results_screen_2p_jump03&$7fff)<<8)&$ff00+(results_screen_2p_jump03&$7fff)>>8
000002CE                            
000002CE                            Results_screen_2p_Call08:
000002CE C803 C4C8 C4C8 C4C8 C4CA+  	dc.b	nB5, $03, nG5, nB5, nG5, nB5, nG5, nB5, nG5, nCs6, nA5, nCs6
000002DA C6CA C6CA C6CB C8CB C8CB+  	dc.b	nA5, nCs6, nA5, nCs6, nA5, nD6, nB5, nD6, nB5, nD6, nB5, nD6
000002E6 C8CD CACD CACD CACD        	dc.b	nB5, nE6, nCs6, nE6, nCs6, nE6, nCs6, nE6
000002EE                            	smpsReturn
000002EE E3                       M 	dc.b	$e3
000002EF                            
000002EF                            Results_screen_2p_Call09:
000002EF C809 09C6 1EC4 0909 C61E+  	dc.b	nB5, $09, $09, nA5, $1E, nG5, $09, $09, nA5, $1E, nB5, $09
000002FB 09C6 1EC4 09C6 C31E        	dc.b	$09, nA5, $1E, nG5, $09, nA5, nFs5, $1E
00000303                            	smpsReturn
00000303 E3                       M 	dc.b	$e3
00000304                            
00000304                            Results_screen_2p_Call0A:
00000304 8003 CB06 0306 C809 CB06+  	dc.b	nRst, $03, nD6, $06, $03, $06, nB5, $09, nD6, $06, $03, $06
00000310 C880 03CA 0603 06C6 09CA+  	dc.b	nB5, nRst, $03, nCs6, $06, $03, $06, nA5, $09, nCs6, $06, $03
0000031C 06C6                       	dc.b	$06, nA5
0000031E                            	smpsReturn
0000031E E3                       M 	dc.b	$e3
0000031F                            
0000031F                            ; PSG2 Data
0000031F                            Results_screen_2p_PSG2:
0000031F                            	smpsPSGvoice        fTone_04
0000031F F504                     M 	dc.b	$f5,ftone_04
00000321                            	smpsNoteFill        $0A
00000321 E80A                     M 	dc.b	$e8,$0a
00000323                            
00000323                            Results_screen_2p_Jump02:
00000323                            	smpsCall            Results_screen_2p_Call06
00000323 F8                       M 	dc.b	$f8
00000324 0000                     M 	dc.w	((results_screen_2p_call06&$7fff)<<8)&$ff00+(results_screen_2p_call06&$7fff)>>8
00000326                            	smpsPSGAlterVol     $01
00000326 EC01                     M 	dc.b	$ec,$01
00000328                            	smpsCall            Results_screen_2p_Call06
00000328 F8                       M 	dc.b	$f8
00000329 0000                     M 	dc.w	((results_screen_2p_call06&$7fff)<<8)&$ff00+(results_screen_2p_call06&$7fff)>>8
0000032B                            	smpsCall            Results_screen_2p_Call06
0000032B F8                       M 	dc.b	$f8
0000032C 0000                     M 	dc.w	((results_screen_2p_call06&$7fff)<<8)&$ff00+(results_screen_2p_call06&$7fff)>>8
0000032E                            	smpsCall            Results_screen_2p_Call07
0000032E F8                       M 	dc.b	$f8
0000032F 0000                     M 	dc.w	((results_screen_2p_call07&$7fff)<<8)&$ff00+(results_screen_2p_call07&$7fff)>>8
00000331 8003 C406 0306 C109 C406+  	dc.b	nRst, $03, nG5, $06, $03, $06, nE5, $09, nG5, $06, $03, $06
0000033D C180 03C6 0603 06C3 09C6+  	dc.b	nE5, nRst, $03, nA5, $06, $03, $06, nFs5, $09, nA5, $06, $09
00000349 C306                       	dc.b	nFs5, $06
0000034B                            	smpsCall            Results_screen_2p_Call07
0000034B F8                       M 	dc.b	$f8
0000034C 0000                     M 	dc.w	((results_screen_2p_call07&$7fff)<<8)&$ff00+(results_screen_2p_call07&$7fff)>>8
0000034E 8001                       	dc.b	nRst, $01
00000350                            	smpsCall            Results_screen_2p_Call08
00000350 F8                       M 	dc.b	$f8
00000351 0000                     M 	dc.w	((results_screen_2p_call08&$7fff)<<8)&$ff00+(results_screen_2p_call08&$7fff)>>8
00000353 CA02 CA0C 24               	dc.b	nCs6, $02, nCs6, $0C, $24
00000358                            	smpsPSGAlterVol     $FF
00000358 ECFF                     M 	dc.b	$ec,$ff
0000035A                            	smpsJump            Results_screen_2p_Jump02
0000035A F6                       M 	dc.b	$f6
0000035B 0000                     M 	dc.w	((results_screen_2p_jump02&$7fff)<<8)&$ff00+(results_screen_2p_jump02&$7fff)>>8
0000035D                            
0000035D                            Results_screen_2p_Call06:
0000035D C409 09C3 1EC1 0909 C31E+  	dc.b	nG5, $09, $09, nFs5, $1E, nE5, $09, $09, nFs5, $1E, nG5, $09
00000369 09C3 1EC1 09C3 BF1E        	dc.b	$09, nFs5, $1E, nE5, $09, nFs5, nD5, $1E
00000371                            	smpsReturn
00000371 E3                       M 	dc.b	$e3
00000372                            
00000372                            Results_screen_2p_Call07:
00000372 8003 C806 0306 C409 C806+  	dc.b	nRst, $03, nB5, $06, $03, $06, nG5, $09, nB5, $06, $03, $06
0000037E C480 03C6 0603 06C3 09C6+  	dc.b	nG5, nRst, $03, nA5, $06, $03, $06, nFs5, $09, nA5, $06, $03
0000038A CA06 C3                    	dc.b	nCs6, $06, nFs5
0000038D                            	smpsReturn
0000038D E3                       M 	dc.b	$e3
0000038E                            
0000038E                            ; PSG3 Data
0000038E                            Results_screen_2p_PSG3:
0000038E                            	smpsPSGvoice        fTone_02
0000038E F502                     M 	dc.b	$f5,ftone_02
00000390                            	smpsNoteFill        $04
00000390 E804                     M 	dc.b	$e8,$04
00000392                            
00000392                            Results_screen_2p_Jump01:
00000392 CE06 CB03 03CE 80CB 80     	dc.b	nF6, $06, nD6, $03, $03, nF6, nRst, nD6, nRst
0000039B                            	smpsJump            Results_screen_2p_Jump01
0000039B F6                       M 	dc.b	$f6
0000039C 0000                     M 	dc.w	((results_screen_2p_jump01&$7fff)<<8)&$ff00+(results_screen_2p_jump01&$7fff)>>8
0000039E                            
0000039E                            ; DAC Data
0000039E                            Results_screen_2p_DAC:
0000039E 8106 8003 8181 068C 8106+  	dc.b	dKick, $06, nRst, $03, dKick, dKick, $06, dMidTom, dKick, $06, nRst, $03
000003AA 8181 068C 8106 8003 8181+  	dc.b	dKick, dKick, $06, dMidTom, dKick, $06, nRst, $03, dKick, dKick, $06, dMidTom
000003B6 8103 0603 068C 06          	dc.b	dKick, $03, $06, $03, $06, dMidTom, $06
000003BD                            	smpsLoop            $00, $0A, Results_screen_2p_DAC
000003BD F7                       M 	dc.b	$f7
000003BE 000A                     M 	dc.b	index,loops
000003C0 0000                     M 	dc.w	((results_screen_2p_dac&$7fff)<<8)&$ff00+(results_screen_2p_dac&$7fff)>>8
000003C2 8106 8C06 0606 0C0C        	dc.b	dKick, $06, dMidTom, $06, $06, $06, $0C, $0C
000003CA                            	smpsJump            Results_screen_2p_DAC
000003CA F6                       M 	dc.b	$f6
000003CB 0000                     M 	dc.w	((results_screen_2p_dac&$7fff)<<8)&$ff00+(results_screen_2p_dac&$7fff)>>8
000003CD                            
000003CD                            Results_screen_2p_Voices:
000003CD                            ;	Voice $00
000003CD                            ;	$08
000003CD                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000003CD                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $80
000003CD                            	smpsVcAlgorithm     $00
000003CD =00000000                M vcalgorithm	=	val
000003CD                            	smpsVcFeedback      $01
000003CD =00000001                M vcfeedback	=	val
000003CD                            	smpsVcUnusedBits    $00
000003CD =00000000                M vcunusedbits	=	val
000003CD =00000000                M vcd1r1unk	=	0
000003CD =00000000                M vcd1r2unk	=	0
000003CD =00000000                M vcd1r3unk	=	0
000003CD =00000000                M vcd1r4unk	=	0
000003CD                            	smpsVcDetune        $00, $03, $07, $00
000003CD =00000000                M vcdt1	=	op1
000003CD =00000003                M vcdt2	=	op2
000003CD =00000007                M vcdt3	=	op3
000003CD =00000000                M vcdt4	=	op4
000003CD                            	smpsVcCoarseFreq    $00, $00, $00, $09
000003CD =00000000                M vccf1	=	op1
000003CD =00000000                M vccf2	=	op2
000003CD =00000000                M vccf3	=	op3
000003CD =00000009                M vccf4	=	op4
000003CD                            	smpsVcRateScale     $01, $01, $00, $00
000003CD =00000001                M vcrs1	=	op1
000003CD =00000001                M vcrs2	=	op2
000003CD =00000000                M vcrs3	=	op3
000003CD =00000000                M vcrs4	=	op4
000003CD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000003CD =0000001F                M vcar1	=	op1
000003CD =0000001F                M vcar2	=	op2
000003CD =0000001F                M vcar3	=	op3
000003CD =0000001F                M vcar4	=	op4
000003CD                            	smpsVcAmpMod        $00, $00, $00, $00
000003CD =00000000                M vcam1	=	op1<<5
000003CD =00000000                M vcam2	=	op2<<5
000003CD =00000000                M vcam3	=	op3<<5
000003CD =00000000                M vcam4	=	op4<<5
000003CD                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000003CD =0000000A                M vcd1r1	=	op1
000003CD =0000000A                M vcd1r2	=	op2
000003CD =0000000E                M vcd1r3	=	op3
000003CD =00000012                M vcd1r4	=	op4
000003CD                            	smpsVcDecayRate2    $03, $04, $04, $00
000003CD =00000003                M vcd2r1	=	op1
000003CD =00000004                M vcd2r2	=	op2
000003CD =00000004                M vcd2r3	=	op3
000003CD =00000000                M vcd2r4	=	op4
000003CD                            	smpsVcDecayLevel    $02, $02, $02, $02
000003CD =00000002                M vcdl1	=	op1
000003CD =00000002                M vcdl2	=	op2
000003CD =00000002                M vcdl3	=	op3
000003CD =00000002                M vcdl4	=	op4
000003CD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003CD =0000000F                M vcrr1	=	op1
000003CD =0000000F                M vcrr2	=	op2
000003CD =0000000F                M vcrr3	=	op3
000003CD =0000000F                M vcrr4	=	op4
000003CD                            	smpsVcTotalLevel    $00, $13, $30, $25
000003CD =00000000                M vctl1	=	op1
000003CD =00000013                M vctl2	=	op2
000003CD =00000030                M vctl3	=	op3
000003CD =00000025                M vctl4	=	op4
000003CD 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003CE =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003CE =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003CE =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003CE =00000080                M vctlmask1	=	$80
000003CE 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003D2 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003D6 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003DA 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003DE 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003E2 2513 3080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003E6                            
000003E6                            ;	Voice $01
000003E6                            ;	$3A
000003E6                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000003E6                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
000003E6                            	smpsVcAlgorithm     $02
000003E6 =00000002                M vcalgorithm	=	val
000003E6                            	smpsVcFeedback      $07
000003E6 =00000007                M vcfeedback	=	val
000003E6                            	smpsVcUnusedBits    $00
000003E6 =00000000                M vcunusedbits	=	val
000003E6 =00000000                M vcd1r1unk	=	0
000003E6 =00000000                M vcd1r2unk	=	0
000003E6 =00000000                M vcd1r3unk	=	0
000003E6 =00000000                M vcd1r4unk	=	0
000003E6                            	smpsVcDetune        $00, $00, $00, $00
000003E6 =00000000                M vcdt1	=	op1
000003E6 =00000000                M vcdt2	=	op2
000003E6 =00000000                M vcdt3	=	op3
000003E6 =00000000                M vcdt4	=	op4
000003E6                            	smpsVcCoarseFreq    $01, $01, $07, $01
000003E6 =00000001                M vccf1	=	op1
000003E6 =00000001                M vccf2	=	op2
000003E6 =00000007                M vccf3	=	op3
000003E6 =00000001                M vccf4	=	op4
000003E6                            	smpsVcRateScale     $01, $02, $02, $02
000003E6 =00000001                M vcrs1	=	op1
000003E6 =00000002                M vcrs2	=	op2
000003E6 =00000002                M vcrs3	=	op3
000003E6 =00000002                M vcrs4	=	op4
000003E6                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000003E6 =00000013                M vcar1	=	op1
000003E6 =0000000D                M vcar2	=	op2
000003E6 =0000000E                M vcar3	=	op3
000003E6 =0000000E                M vcar4	=	op4
000003E6                            	smpsVcAmpMod        $00, $00, $00, $00
000003E6 =00000000                M vcam1	=	op1<<5
000003E6 =00000000                M vcam2	=	op2<<5
000003E6 =00000000                M vcam3	=	op3<<5
000003E6 =00000000                M vcam4	=	op4<<5
000003E6                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000003E6 =00000003                M vcd1r1	=	op1
000003E6 =0000000E                M vcd1r2	=	op2
000003E6 =0000000E                M vcd1r3	=	op3
000003E6 =0000000E                M vcd1r4	=	op4
000003E6                            	smpsVcDecayRate2    $00, $00, $00, $00
000003E6 =00000000                M vcd2r1	=	op1
000003E6 =00000000                M vcd2r2	=	op2
000003E6 =00000000                M vcd2r3	=	op3
000003E6 =00000000                M vcd2r4	=	op4
000003E6                            	smpsVcDecayLevel    $00, $01, $0F, $01
000003E6 =00000000                M vcdl1	=	op1
000003E6 =00000001                M vcdl2	=	op2
000003E6 =0000000F                M vcdl3	=	op3
000003E6 =00000001                M vcdl4	=	op4
000003E6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003E6 =0000000F                M vcrr1	=	op1
000003E6 =0000000F                M vcrr2	=	op2
000003E6 =0000000F                M vcrr3	=	op3
000003E6 =0000000F                M vcrr4	=	op4
000003E6                            	smpsVcTotalLevel    $00, $27, $28, $17
000003E6 =00000000                M vctl1	=	op1
000003E6 =00000027                M vctl2	=	op2
000003E6 =00000028                M vctl3	=	op3
000003E6 =00000017                M vctl4	=	op4
000003E6 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003E7 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003E7 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003E7 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003E7 =00000080                M vctlmask1	=	$80
000003E7 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003EB 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003EF 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000003F3 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003F7 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003FB 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003FF                            
000003FF                            ;	Voice $02
000003FF                            ;	$3A
000003FF                            ;	$03, $08, $03, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000003FF                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $20, $80
000003FF                            	smpsVcAlgorithm     $02
000003FF =00000002                M vcalgorithm	=	val
000003FF                            	smpsVcFeedback      $07
000003FF =00000007                M vcfeedback	=	val
000003FF                            	smpsVcUnusedBits    $00
000003FF =00000000                M vcunusedbits	=	val
000003FF =00000000                M vcd1r1unk	=	0
000003FF =00000000                M vcd1r2unk	=	0
000003FF =00000000                M vcd1r3unk	=	0
000003FF =00000000                M vcd1r4unk	=	0
000003FF                            	smpsVcDetune        $00, $00, $00, $00
000003FF =00000000                M vcdt1	=	op1
000003FF =00000000                M vcdt2	=	op2
000003FF =00000000                M vcdt3	=	op3
000003FF =00000000                M vcdt4	=	op4
000003FF                            	smpsVcCoarseFreq    $01, $03, $08, $03
000003FF =00000001                M vccf1	=	op1
000003FF =00000003                M vccf2	=	op2
000003FF =00000008                M vccf3	=	op3
000003FF =00000003                M vccf4	=	op4
000003FF                            	smpsVcRateScale     $01, $02, $02, $02
000003FF =00000001                M vcrs1	=	op1
000003FF =00000002                M vcrs2	=	op2
000003FF =00000002                M vcrs3	=	op3
000003FF =00000002                M vcrs4	=	op4
000003FF                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000003FF =00000013                M vcar1	=	op1
000003FF =0000000D                M vcar2	=	op2
000003FF =0000000E                M vcar3	=	op3
000003FF =0000000E                M vcar4	=	op4
000003FF                            	smpsVcAmpMod        $00, $00, $00, $00
000003FF =00000000                M vcam1	=	op1<<5
000003FF =00000000                M vcam2	=	op2<<5
000003FF =00000000                M vcam3	=	op3<<5
000003FF =00000000                M vcam4	=	op4<<5
000003FF                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000003FF =00000003                M vcd1r1	=	op1
000003FF =0000000E                M vcd1r2	=	op2
000003FF =0000000E                M vcd1r3	=	op3
000003FF =0000000E                M vcd1r4	=	op4
000003FF                            	smpsVcDecayRate2    $00, $00, $00, $00
000003FF =00000000                M vcd2r1	=	op1
000003FF =00000000                M vcd2r2	=	op2
000003FF =00000000                M vcd2r3	=	op3
000003FF =00000000                M vcd2r4	=	op4
000003FF                            	smpsVcDecayLevel    $00, $01, $0F, $01
000003FF =00000000                M vcdl1	=	op1
000003FF =00000001                M vcdl2	=	op2
000003FF =0000000F                M vcdl3	=	op3
000003FF =00000001                M vcdl4	=	op4
000003FF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003FF =0000000F                M vcrr1	=	op1
000003FF =0000000F                M vcrr2	=	op2
000003FF =0000000F                M vcrr3	=	op3
000003FF =0000000F                M vcrr4	=	op4
000003FF                            	smpsVcTotalLevel    $00, $20, $28, $17
000003FF =00000000                M vctl1	=	op1
000003FF =00000020                M vctl2	=	op2
000003FF =00000028                M vctl3	=	op3
000003FF =00000017                M vctl4	=	op4
000003FF 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000400 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000400 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000400 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000400 =00000080                M vctlmask1	=	$80
00000400 0303 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000404 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000408 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000040C 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000410 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000414 1720 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000418                            
00000418                            ;	Voice $03
00000418                            ;	$3D
00000418                            ;	$61, $34, $03, $72, 	$0E, $0C, $8D, $0D, 	$08, $05, $05, $05
00000418                            ;	$00, $00, $00, $00, 	$1F, $2F, $2F, $2F, 	$19, $99, $9E, $80
00000418                            	smpsVcAlgorithm     $05
00000418 =00000005                M vcalgorithm	=	val
00000418                            	smpsVcFeedback      $07
00000418 =00000007                M vcfeedback	=	val
00000418                            	smpsVcUnusedBits    $00
00000418 =00000000                M vcunusedbits	=	val
00000418 =00000000                M vcd1r1unk	=	0
00000418 =00000000                M vcd1r2unk	=	0
00000418 =00000000                M vcd1r3unk	=	0
00000418 =00000000                M vcd1r4unk	=	0
00000418                            	smpsVcDetune        $07, $00, $03, $06
00000418 =00000007                M vcdt1	=	op1
00000418 =00000000                M vcdt2	=	op2
00000418 =00000003                M vcdt3	=	op3
00000418 =00000006                M vcdt4	=	op4
00000418                            	smpsVcCoarseFreq    $02, $03, $04, $01
00000418 =00000002                M vccf1	=	op1
00000418 =00000003                M vccf2	=	op2
00000418 =00000004                M vccf3	=	op3
00000418 =00000001                M vccf4	=	op4
00000418                            	smpsVcRateScale     $00, $02, $00, $00
00000418 =00000000                M vcrs1	=	op1
00000418 =00000002                M vcrs2	=	op2
00000418 =00000000                M vcrs3	=	op3
00000418 =00000000                M vcrs4	=	op4
00000418                            	smpsVcAttackRate    $0D, $0D, $0C, $0E
00000418 =0000000D                M vcar1	=	op1
00000418 =0000000D                M vcar2	=	op2
00000418 =0000000C                M vcar3	=	op3
00000418 =0000000E                M vcar4	=	op4
00000418                            	smpsVcAmpMod        $00, $00, $00, $00
00000418 =00000000                M vcam1	=	op1<<5
00000418 =00000000                M vcam2	=	op2<<5
00000418 =00000000                M vcam3	=	op3<<5
00000418 =00000000                M vcam4	=	op4<<5
00000418                            	smpsVcDecayRate1    $05, $05, $05, $08
00000418 =00000005                M vcd1r1	=	op1
00000418 =00000005                M vcd1r2	=	op2
00000418 =00000005                M vcd1r3	=	op3
00000418 =00000008                M vcd1r4	=	op4
00000418                            	smpsVcDecayRate2    $00, $00, $00, $00
00000418 =00000000                M vcd2r1	=	op1
00000418 =00000000                M vcd2r2	=	op2
00000418 =00000000                M vcd2r3	=	op3
00000418 =00000000                M vcd2r4	=	op4
00000418                            	smpsVcDecayLevel    $02, $02, $02, $01
00000418 =00000002                M vcdl1	=	op1
00000418 =00000002                M vcdl2	=	op2
00000418 =00000002                M vcdl3	=	op3
00000418 =00000001                M vcdl4	=	op4
00000418                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000418 =0000000F                M vcrr1	=	op1
00000418 =0000000F                M vcrr2	=	op2
00000418 =0000000F                M vcrr3	=	op3
00000418 =0000000F                M vcrr4	=	op4
00000418                            	smpsVcTotalLevel    $00, $1E, $19, $19
00000418 =00000000                M vctl1	=	op1
00000418 =0000001E                M vctl2	=	op2
00000418 =00000019                M vctl3	=	op3
00000418 =00000019                M vctl4	=	op4
00000418 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000419 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000419 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000419 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000419 =00000080                M vctlmask1	=	$80
00000419 6103 3472                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000041D 0E8D 0C0D                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000421 0805 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000425 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000429 1F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000042D 199E 9980                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000431                            
00000431                            ;	Voice $04
00000431                            ;	$3C
00000431                            ;	$31, $02, $72, $03, 	$0F, $4D, $0F, $0D, 	$00, $02, $00, $02
00000431                            ;	$00, $00, $00, $00, 	$0F, $3F, $0F, $3F, 	$19, $80, $29, $8A
00000431                            	smpsVcAlgorithm     $04
00000431 =00000004                M vcalgorithm	=	val
00000431                            	smpsVcFeedback      $07
00000431 =00000007                M vcfeedback	=	val
00000431                            	smpsVcUnusedBits    $00
00000431 =00000000                M vcunusedbits	=	val
00000431 =00000000                M vcd1r1unk	=	0
00000431 =00000000                M vcd1r2unk	=	0
00000431 =00000000                M vcd1r3unk	=	0
00000431 =00000000                M vcd1r4unk	=	0
00000431                            	smpsVcDetune        $00, $07, $00, $03
00000431 =00000000                M vcdt1	=	op1
00000431 =00000007                M vcdt2	=	op2
00000431 =00000000                M vcdt3	=	op3
00000431 =00000003                M vcdt4	=	op4
00000431                            	smpsVcCoarseFreq    $03, $02, $02, $01
00000431 =00000003                M vccf1	=	op1
00000431 =00000002                M vccf2	=	op2
00000431 =00000002                M vccf3	=	op3
00000431 =00000001                M vccf4	=	op4
00000431                            	smpsVcRateScale     $00, $00, $01, $00
00000431 =00000000                M vcrs1	=	op1
00000431 =00000000                M vcrs2	=	op2
00000431 =00000001                M vcrs3	=	op3
00000431 =00000000                M vcrs4	=	op4
00000431                            	smpsVcAttackRate    $0D, $0F, $0D, $0F
00000431 =0000000D                M vcar1	=	op1
00000431 =0000000F                M vcar2	=	op2
00000431 =0000000D                M vcar3	=	op3
00000431 =0000000F                M vcar4	=	op4
00000431                            	smpsVcAmpMod        $00, $00, $00, $00
00000431 =00000000                M vcam1	=	op1<<5
00000431 =00000000                M vcam2	=	op2<<5
00000431 =00000000                M vcam3	=	op3<<5
00000431 =00000000                M vcam4	=	op4<<5
00000431                            	smpsVcDecayRate1    $02, $00, $02, $00
00000431 =00000002                M vcd1r1	=	op1
00000431 =00000000                M vcd1r2	=	op2
00000431 =00000002                M vcd1r3	=	op3
00000431 =00000000                M vcd1r4	=	op4
00000431                            	smpsVcDecayRate2    $00, $00, $00, $00
00000431 =00000000                M vcd2r1	=	op1
00000431 =00000000                M vcd2r2	=	op2
00000431 =00000000                M vcd2r3	=	op3
00000431 =00000000                M vcd2r4	=	op4
00000431                            	smpsVcDecayLevel    $03, $00, $03, $00
00000431 =00000003                M vcdl1	=	op1
00000431 =00000000                M vcdl2	=	op2
00000431 =00000003                M vcdl3	=	op3
00000431 =00000000                M vcdl4	=	op4
00000431                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000431 =0000000F                M vcrr1	=	op1
00000431 =0000000F                M vcrr2	=	op2
00000431 =0000000F                M vcrr3	=	op3
00000431 =0000000F                M vcrr4	=	op4
00000431                            	smpsVcTotalLevel    $0A, $29, $00, $19
00000431 =0000000A                M vctl1	=	op1
00000431 =00000029                M vctl2	=	op2
00000431 =00000000                M vctl3	=	op3
00000431 =00000019                M vctl4	=	op4
00000431 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000432 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000432 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000432 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000432 =00000080                M vctlmask1	=	$80
00000432 3172 0203                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000436 0F0F 4D0D                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000043A 0000 0202                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000043E 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000442 0F0F 3F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000446 1929 808A                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000044A                            
0000044A                            ;	Voice $05
0000044A                            ;	$3A
0000044A                            ;	$51, $05, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
0000044A                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
0000044A                            	smpsVcAlgorithm     $02
0000044A =00000002                M vcalgorithm	=	val
0000044A                            	smpsVcFeedback      $07
0000044A =00000007                M vcfeedback	=	val
0000044A                            	smpsVcUnusedBits    $00
0000044A =00000000                M vcunusedbits	=	val
0000044A =00000000                M vcd1r1unk	=	0
0000044A =00000000                M vcd1r2unk	=	0
0000044A =00000000                M vcd1r3unk	=	0
0000044A =00000000                M vcd1r4unk	=	0
0000044A                            	smpsVcDetune        $00, $05, $00, $05
0000044A =00000000                M vcdt1	=	op1
0000044A =00000005                M vcdt2	=	op2
0000044A =00000000                M vcdt3	=	op3
0000044A =00000005                M vcdt4	=	op4
0000044A                            	smpsVcCoarseFreq    $02, $01, $05, $01
0000044A =00000002                M vccf1	=	op1
0000044A =00000001                M vccf2	=	op2
0000044A =00000005                M vccf3	=	op3
0000044A =00000001                M vccf4	=	op4
0000044A                            	smpsVcRateScale     $00, $00, $00, $00
0000044A =00000000                M vcrs1	=	op1
0000044A =00000000                M vcrs2	=	op2
0000044A =00000000                M vcrs3	=	op3
0000044A =00000000                M vcrs4	=	op4
0000044A                            	smpsVcAttackRate    $10, $1E, $1E, $1E
0000044A =00000010                M vcar1	=	op1
0000044A =0000001E                M vcar2	=	op2
0000044A =0000001E                M vcar3	=	op3
0000044A =0000001E                M vcar4	=	op4
0000044A                            	smpsVcAmpMod        $00, $00, $00, $00
0000044A =00000000                M vcam1	=	op1<<5
0000044A =00000000                M vcam2	=	op2<<5
0000044A =00000000                M vcam3	=	op3<<5
0000044A =00000000                M vcam4	=	op4<<5
0000044A                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
0000044A =0000000F                M vcd1r1	=	op1
0000044A =0000001F                M vcd1r2	=	op2
0000044A =0000001F                M vcd1r3	=	op3
0000044A =0000001F                M vcd1r4	=	op4
0000044A                            	smpsVcDecayRate2    $02, $00, $00, $00
0000044A =00000002                M vcd2r1	=	op1
0000044A =00000000                M vcd2r2	=	op2
0000044A =00000000                M vcd2r3	=	op3
0000044A =00000000                M vcd2r4	=	op4
0000044A                            	smpsVcDecayLevel    $01, $00, $00, $00
0000044A =00000001                M vcdl1	=	op1
0000044A =00000000                M vcdl2	=	op2
0000044A =00000000                M vcdl3	=	op3
0000044A =00000000                M vcdl4	=	op4
0000044A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000044A =0000000F                M vcrr1	=	op1
0000044A =0000000F                M vcrr2	=	op2
0000044A =0000000F                M vcrr3	=	op3
0000044A =0000000F                M vcrr4	=	op4
0000044A                            	smpsVcTotalLevel    $01, $22, $24, $18
0000044A =00000001                M vctl1	=	op1
0000044A =00000022                M vctl2	=	op2
0000044A =00000024                M vctl3	=	op3
0000044A =00000018                M vctl4	=	op4
0000044A 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000044B =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000044B =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000044B =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000044B =00000080                M vctlmask1	=	$80
0000044B 5151 0502                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000044F 1E1E 1E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000453 1F1F 1F0F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000457 0000 0002                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000045B 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000045F 1822 2481                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000463                            
00000463                          M 	pops
00000000                            		inc_music	SuperSonic
00000000                          M 	pushs
00000000                          M music_2174:	section	org($1380),file("sound/music/compressed/supersonic.unc"),over(header)
00000000                          M 	include	"sound/music/supersonic.asm"
00000000                            Supersonic_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     Supersonic_Voices
00000000 0000                     M 	dc.w	((supersonic_voices&$7fff)<<8)&$ff00+(supersonic_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $FA
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$fa
00000005 FA                       M 	dc.b	$fa
00000006                            
00000006                            	smpsHeaderDAC       Supersonic_DAC
00000006                          M 	checkedchannelpointer	supersonic_dac
00000006 0000                     M 	dc.w	((supersonic_dac&$7fff)<<8)&$ff00+(supersonic_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Supersonic_FM1,	$F4, $13
0000000A                          M 	checkedchannelpointer	supersonic_fm1
0000000A 0000                     M 	dc.w	((supersonic_fm1&$7fff)<<8)&$ff00+(supersonic_fm1&$7fff)>>8
0000000C F413                     M 	dc.b	$f4,$13
0000000E                            	smpsHeaderFM        Supersonic_FM2,	$F4, $0A
0000000E                          M 	checkedchannelpointer	supersonic_fm2
0000000E 0000                     M 	dc.w	((supersonic_fm2&$7fff)<<8)&$ff00+(supersonic_fm2&$7fff)>>8
00000010 F40A                     M 	dc.b	$f4,$0a
00000012                            	smpsHeaderFM        Supersonic_FM3,	$F4, $13
00000012                          M 	checkedchannelpointer	supersonic_fm3
00000012 0000                     M 	dc.w	((supersonic_fm3&$7fff)<<8)&$ff00+(supersonic_fm3&$7fff)>>8
00000014 F413                     M 	dc.b	$f4,$13
00000016                            	smpsHeaderFM        Supersonic_FM4,	$F4, $13
00000016                          M 	checkedchannelpointer	supersonic_fm4
00000016 0000                     M 	dc.w	((supersonic_fm4&$7fff)<<8)&$ff00+(supersonic_fm4&$7fff)>>8
00000018 F413                     M 	dc.b	$f4,$13
0000001A                            	smpsHeaderFM        Supersonic_FM5,	$F4, $13
0000001A                          M 	checkedchannelpointer	supersonic_fm5
0000001A 0000                     M 	dc.w	((supersonic_fm5&$7fff)<<8)&$ff00+(supersonic_fm5&$7fff)>>8
0000001C F413                     M 	dc.b	$f4,$13
0000001E                            	smpsHeaderPSG       Supersonic_PSG1,	$D0, $01, $00, fTone_09
0000001E                          M 	checkedchannelpointer	supersonic_psg1
0000001E 0000                     M 	dc.w	((supersonic_psg1&$7fff)<<8)&$ff00+(supersonic_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$d0
00000020 D0                       M 	dc.b	$d0
00000021 01                       M 	dc.b	$01
00000022 00                       M 	dc.b	$00
00000023 09                       M 	dc.b	ftone_09
00000024                            	smpsHeaderPSG       Supersonic_PSG2,	$D0, $03, $00, $00
00000024                          M 	checkedchannelpointer	supersonic_psg2
00000024 0000                     M 	dc.w	((supersonic_psg2&$7fff)<<8)&$ff00+(supersonic_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$d0
00000026 D0                       M 	dc.b	$d0
00000027 03                       M 	dc.b	$03
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       Supersonic_PSG3,	$00, $03, $00, fTone_04
0000002A                          M 	checkedchannelpointer	supersonic_psg3
0000002A 0000                     M 	dc.w	((supersonic_psg3&$7fff)<<8)&$ff00+(supersonic_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 03                       M 	dc.b	$03
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM1 Data
00000030                            Supersonic_FM1:
00000030 8060 80                    	dc.b	nRst, $60, nRst
00000033                            	smpsSetvoice        $00
00000033                          M 	smpsfmvoice	$00
00000033 EF00                     M 	dc.b	$ef,$00
00000035                            
00000035                            Supersonic_Loop09:
00000035                            	smpsCall            Supersonic_Call05
00000035 F8                       M 	dc.b	$f8
00000036 0000                     M 	dc.w	((supersonic_call05&$7fff)<<8)&$ff00+(supersonic_call05&$7fff)>>8
00000038                            	smpsLoop            $00, $02, Supersonic_Loop09
00000038 F7                       M 	dc.b	$f7
00000039 0002                     M 	dc.b	index,loops
0000003B 0000                     M 	dc.w	((supersonic_loop09&$7fff)<<8)&$ff00+(supersonic_loop09&$7fff)>>8
0000003D                            
0000003D                            Supersonic_Loop0A:
0000003D                            	smpsCall            Supersonic_Call01
0000003D F8                       M 	dc.b	$f8
0000003E 0000                     M 	dc.w	((supersonic_call01&$7fff)<<8)&$ff00+(supersonic_call01&$7fff)>>8
00000040 80CE 80CD 80CE D012        	dc.b	nRst, nF6, nRst, nE6, nRst, nF6, nG6, $12
00000048                            	smpsCall            Supersonic_Call01
00000048 F8                       M 	dc.b	$f8
00000049 0000                     M 	dc.w	((supersonic_call01&$7fff)<<8)&$ff00+(supersonic_call01&$7fff)>>8
0000004B 80CE 0C80 24               	dc.b	nRst, nF6, $0C, nRst, $24
00000050                            	smpsLoop            $00, $02, Supersonic_Loop0A
00000050 F7                       M 	dc.b	$f7
00000051 0002                     M 	dc.b	index,loops
00000053 0000                     M 	dc.w	((supersonic_loop0a&$7fff)<<8)&$ff00+(supersonic_loop0a&$7fff)>>8
00000055                            	smpsCall            Supersonic_Call02
00000055 F8                       M 	dc.b	$f8
00000056 0000                     M 	dc.w	((supersonic_call02&$7fff)<<8)&$ff00+(supersonic_call02&$7fff)>>8
00000058                            	smpsJump            Supersonic_FM1
00000058 F6                       M 	dc.b	$f6
00000059 0000                     M 	dc.w	((supersonic_fm1&$7fff)<<8)&$ff00+(supersonic_fm1&$7fff)>>8
0000005B                            
0000005B                            Supersonic_Call05:
0000005B 800C C816 8002 C806 80C9+  	dc.b	nRst, $0C, nB5, $16, nRst, $02, nB5, $06, nRst, nC6, $12, nD6
00000067 CD0C CB06 80CB 80CB 80C8+  	dc.b	nE6, $0C, nD6, $06, nRst, nD6, nRst, nD6, nRst, nB5, nRst, nC6
00000073 12C6 1880 06               	dc.b	$12, nA5, $18, nRst, $06
00000078                            	smpsReturn
00000078 E3                       M 	dc.b	$e3
00000079                            
00000079                            Supersonic_Call01:
00000079 8009 D40F D006 80CB        	dc.b	nRst, $09, nB6, $0F, nG6, $06, nRst, nD6
00000081                            	smpsReturn
00000081 E3                       M 	dc.b	$e3
00000082                            
00000082                            Supersonic_Call02:
00000082 C924 C606 C9CD 24C9 06CD+  	dc.b	nC6, $24, nA5, $06, nC6, nE6, $24, nC6, $06, nE6, nG6, $3C
0000008E 8024                       	dc.b	nRst, $24
00000090                            	smpsReturn
00000090 E3                       M 	dc.b	$e3
00000091                            
00000091                            ; FM3 Data
00000091                            Supersonic_FM3:
00000091                            	smpsSetvoice        $00
00000091                          M 	smpsfmvoice	$00
00000091 EF00                     M 	dc.b	$ef,$00
00000093 C812 C9CA 0CC9 12CA CB0C+  	dc.b	nB5, $12, nC6, nCs6, $0C, nC6, $12, nCs6, nD6, $0C, nCs6, $12
0000009F CBCC 0CCB 12CC CD0C        	dc.b	nD6, nEb6, $0C, nD6, $12, nEb6, nE6, $0C
000000A7                            	smpsSetvoice        $02
000000A7                          M 	smpsfmvoice	$02
000000A7 EF02                     M 	dc.b	$ef,$02
000000A9                            	smpsAlterNote       $03
000000A9                          M 	smpsdetune	$03
000000A9 E103                     M 	dc.b	$e1,$03
000000AB                            
000000AB                            Supersonic_Loop07:
000000AB                            	smpsCall            Supersonic_Call05
000000AB F8                       M 	dc.b	$f8
000000AC 0000                     M 	dc.w	((supersonic_call05&$7fff)<<8)&$ff00+(supersonic_call05&$7fff)>>8
000000AE                            	smpsLoop            $00, $02, Supersonic_Loop07
000000AE F7                       M 	dc.b	$f7
000000AF 0002                     M 	dc.b	index,loops
000000B1 0000                     M 	dc.w	((supersonic_loop07&$7fff)<<8)&$ff00+(supersonic_loop07&$7fff)>>8
000000B3                            
000000B3                            Supersonic_Loop08:
000000B3                            	smpsSetvoice        $00
000000B3                          M 	smpsfmvoice	$00
000000B3 EF00                     M 	dc.b	$ef,$00
000000B5                            	smpsAlterNote       $00
000000B5                          M 	smpsdetune	$00
000000B5 E100                     M 	dc.b	$e1,$00
000000B7 C80C 80C8 80C6 80C6 80C8+  	dc.b	nB5, $0C, nRst, nB5, nRst, nA5, nRst, nA5, nRst, nB5, $06, nRst
000000C3 C880 C60C C806 8036        	dc.b	nB5, nRst, nA5, $0C, nB5, $06, nRst, $36
000000CB                            	smpsAlterPitch      $03
000000CB                          M 	smpschangetransposition	$03
000000CB E903                     M 	dc.b	$e9,$03
000000CD                            	smpsLoop            $00, $02, Supersonic_Loop08
000000CD F7                       M 	dc.b	$f7
000000CE 0002                     M 	dc.b	index,loops
000000D0 0000                     M 	dc.w	((supersonic_loop08&$7fff)<<8)&$ff00+(supersonic_loop08&$7fff)>>8
000000D2                            	smpsAlterPitch      $FA
000000D2                          M 	smpschangetransposition	$fa
000000D2 E9FA                     M 	dc.b	$e9,$fa
000000D4 C918 80CD 80D0 D0D0 D0     	dc.b	nC6, $18, nRst, nE6, nRst, nG6, nG6, nG6, nG6
000000DD                            	smpsJump            Supersonic_FM3
000000DD F6                       M 	dc.b	$f6
000000DE 0000                     M 	dc.w	((supersonic_fm3&$7fff)<<8)&$ff00+(supersonic_fm3&$7fff)>>8
000000E0                            
000000E0                            ; FM4 Data
000000E0                            Supersonic_FM4:
000000E0                            	smpsSetvoice        $00
000000E0                          M 	smpsfmvoice	$00
000000E0 EF00                     M 	dc.b	$ef,$00
000000E2                            
000000E2                            Supersonic_Jump01:
000000E2 C412 C5C6 0CC5 12C6 C70C+  	dc.b	nG5, $12, nAb5, nA5, $0C, nAb5, $12, nA5, nBb5, $0C, nA5, $12
000000EE C7C8 0CC7 12C8 C90C        	dc.b	nBb5, nB5, $0C, nBb5, $12, nB5, nC6, $0C
000000F6                            	smpsSetvoice        $03
000000F6                          M 	smpsfmvoice	$03
000000F6 EF03                     M 	dc.b	$ef,$03
000000F8                            
000000F8                            Supersonic_Loop05:
000000F8                            	smpsCall            Supersonic_Call04
000000F8 F8                       M 	dc.b	$f8
000000F9 0000                     M 	dc.w	((supersonic_call04&$7fff)<<8)&$ff00+(supersonic_call04&$7fff)>>8
000000FB C980 C980 C980 C980        	dc.b	nC6, nRst, nC6, nRst, nC6, nRst, nC6, nRst
00000103                            	smpsCall            Supersonic_Call04
00000103 F8                       M 	dc.b	$f8
00000104 0000                     M 	dc.w	((supersonic_call04&$7fff)<<8)&$ff00+(supersonic_call04&$7fff)>>8
00000106 C680 C680 C680 C680        	dc.b	nA5, nRst, nA5, nRst, nA5, nRst, nA5, nRst
0000010E                            	smpsLoop            $00, $02, Supersonic_Loop05
0000010E F7                       M 	dc.b	$f7
0000010F 0002                     M 	dc.b	index,loops
00000111 0000                     M 	dc.w	((supersonic_loop05&$7fff)<<8)&$ff00+(supersonic_loop05&$7fff)>>8
00000113                            	smpsSetvoice        $00
00000113                          M 	smpsfmvoice	$00
00000113 EF00                     M 	dc.b	$ef,$00
00000115                            
00000115                            Supersonic_Loop06:
00000115 C40C 80C4 80C2 80C2 80C4+  	dc.b	nG5, $0C, nRst, nG5, nRst, nF5, nRst, nF5, nRst, nG5, $06, nRst
00000121 C480 C20C C406 8036        	dc.b	nG5, nRst, nF5, $0C, nG5, $06, nRst, $36
00000129                            	smpsAlterPitch      $04
00000129                          M 	smpschangetransposition	$04
00000129 E904                     M 	dc.b	$e9,$04
0000012B                            	smpsLoop            $00, $02, Supersonic_Loop06
0000012B F7                       M 	dc.b	$f7
0000012C 0002                     M 	dc.b	index,loops
0000012E 0000                     M 	dc.w	((supersonic_loop06&$7fff)<<8)&$ff00+(supersonic_loop06&$7fff)>>8
00000130                            	smpsAlterPitch      $F8
00000130                          M 	smpschangetransposition	$f8
00000130 E9F8                     M 	dc.b	$e9,$f8
00000132 C618 80C9 80CD CDCD CD     	dc.b	nA5, $18, nRst, nC6, nRst, nE6, nE6, nE6, nE6
0000013B                            	smpsJump            Supersonic_Jump01
0000013B F6                       M 	dc.b	$f6
0000013C 0000                     M 	dc.w	((supersonic_jump01&$7fff)<<8)&$ff00+(supersonic_jump01&$7fff)>>8
0000013E                            
0000013E                            Supersonic_Call04:
0000013E C806 80C8 80C8 80C8 80     	dc.b	nB5, $06, nRst, nB5, nRst, nB5, nRst, nB5, nRst
00000147                            	smpsReturn
00000147 E3                       M 	dc.b	$e3
00000148                            
00000148                            ; FM2 Data
00000148                            Supersonic_FM2:
00000148                            	smpsSetvoice        $01
00000148                          M 	smpsfmvoice	$01
00000148 EF01                     M 	dc.b	$ef,$01
0000014A                            
0000014A                            Supersonic_Jump00:
0000014A A612 A7A8 0CA7 12A8 A90C+  	dc.b	nCs3, $12, nD3, nEb3, $0C, nD3, $12, nEb3, nE3, $0C, nEb3, $12
00000156 A9AA 0CA9 12AA AB0C        	dc.b	nE3, nF3, $0C, nE3, $12, nF3, nFs3, $0C
0000015E                            	smpsSetvoice        $04
0000015E                          M 	smpsfmvoice	$04
0000015E EF04                     M 	dc.b	$ef,$04
00000160                            
00000160                            Supersonic_Loop03:
00000160                            	smpsCall            Supersonic_Call03
00000160 F8                       M 	dc.b	$f8
00000161 0000                     M 	dc.w	((supersonic_call03&$7fff)<<8)&$ff00+(supersonic_call03&$7fff)>>8
00000163 8006 A90C                  	dc.b	nRst, $06, nE3, $0C
00000167                            	smpsCall            Supersonic_Call03
00000167 F8                       M 	dc.b	$f8
00000168 0000                     M 	dc.w	((supersonic_call03&$7fff)<<8)&$ff00+(supersonic_call03&$7fff)>>8
0000016A AA06 A90C                  	dc.b	nF3, $06, nE3, $0C
0000016E                            	smpsLoop            $00, $02, Supersonic_Loop03
0000016E F7                       M 	dc.b	$f7
0000016F 0002                     M 	dc.b	index,loops
00000171 0000                     M 	dc.w	((supersonic_loop03&$7fff)<<8)&$ff00+(supersonic_loop03&$7fff)>>8
00000173                            	smpsSetvoice        $01
00000173                          M 	smpsfmvoice	$01
00000173 EF01                     M 	dc.b	$ef,$01
00000175                            
00000175                            Supersonic_Loop04:
00000175 8060 803C AF06 B0AC 0CAB   	dc.b	nRst, $60, nRst, $3C, nBb3, $06, nB3, nG3, $0C, nFs3
0000017F                            	smpsLoop            $00, $02, Supersonic_Loop04
0000017F F7                       M 	dc.b	$f7
00000180 0002                     M 	dc.b	index,loops
00000182 0000                     M 	dc.w	((supersonic_loop04&$7fff)<<8)&$ff00+(supersonic_loop04&$7fff)>>8
00000184 B618 AAB6 AAB6 0CAA B6AA+  	dc.b	nF4, $18, nF3, nF4, nF3, nF4, $0C, nF3, nF4, nF3, nF4, nF3
00000190 B6AA                       	dc.b	nF4, nF3
00000192                            	smpsJump            Supersonic_Jump00
00000192 F6                       M 	dc.b	$f6
00000193 0000                     M 	dc.w	((supersonic_jump00&$7fff)<<8)&$ff00+(supersonic_jump00&$7fff)>>8
00000195                            
00000195                            Supersonic_Call03:
00000195 AC06 80AC 0CA7 0680 A70C+  	dc.b	nG3, $06, nRst, nG3, $0C, nD3, $06, nRst, nD3, $0C, nF3, $06
000001A1 80AA 0CA9 06               	dc.b	nRst, nF3, $0C, nE3, $06
000001A6                            	smpsReturn
000001A6 E3                       M 	dc.b	$e3
000001A7                            
000001A7                            ; FM5 Data
000001A7                            Supersonic_FM5:
000001A7                            	smpsSetvoice        $03
000001A7                          M 	smpsfmvoice	$03
000001A7 EF03                     M 	dc.b	$ef,$03
000001A9                            	smpsPan             panRight, $00
000001A9 E040                     M 	dc.b	$e0,direction+amsfms
000001AB 8060 80                    	dc.b	nRst, $60, nRst
000001AE                            
000001AE                            Supersonic_Loop01:
000001AE                            	smpsCall            Supersonic_Call00
000001AE F8                       M 	dc.b	$f8
000001AF 0000                     M 	dc.w	((supersonic_call00&$7fff)<<8)&$ff00+(supersonic_call00&$7fff)>>8
000001B1 CD80 CD80 CD80 CD80        	dc.b	nE6, nRst, nE6, nRst, nE6, nRst, nE6, nRst
000001B9                            	smpsCall            Supersonic_Call00
000001B9 F8                       M 	dc.b	$f8
000001BA 0000                     M 	dc.w	((supersonic_call00&$7fff)<<8)&$ff00+(supersonic_call00&$7fff)>>8
000001BC C980 C980 C980 C980        	dc.b	nC6, nRst, nC6, nRst, nC6, nRst, nC6, nRst
000001C4                            	smpsLoop            $00, $02, Supersonic_Loop01
000001C4 F7                       M 	dc.b	$f7
000001C5 0002                     M 	dc.b	index,loops
000001C7 0000                     M 	dc.w	((supersonic_loop01&$7fff)<<8)&$ff00+(supersonic_loop01&$7fff)>>8
000001C9                            
000001C9                            Supersonic_Loop02:
000001C9                            	smpsSetvoice        $02
000001C9                          M 	smpsfmvoice	$02
000001C9 EF02                     M 	dc.b	$ef,$02
000001CB                            	smpsAlterNote       $03
000001CB                          M 	smpsdetune	$03
000001CB E103                     M 	dc.b	$e1,$03
000001CD                            	smpsPan             panLeft, $00
000001CD E080                     M 	dc.b	$e0,direction+amsfms
000001CF                            	smpsCall            Supersonic_Call01
000001CF F8                       M 	dc.b	$f8
000001D0 0000                     M 	dc.w	((supersonic_call01&$7fff)<<8)&$ff00+(supersonic_call01&$7fff)>>8
000001D2 8006 CE80 CD80 CED0 12     	dc.b	nRst, $06, nF6, nRst, nE6, nRst, nF6, nG6, $12
000001DB                            	smpsCall            Supersonic_Call01
000001DB F8                       M 	dc.b	$f8
000001DC 0000                     M 	dc.w	((supersonic_call01&$7fff)<<8)&$ff00+(supersonic_call01&$7fff)>>8
000001DE 8006 CE0C                  	dc.b	nRst, $06, nF6, $0C
000001E2                            	smpsSetvoice        $03
000001E2                          M 	smpsfmvoice	$03
000001E2 EF03                     M 	dc.b	$ef,$03
000001E4                            	smpsAlterNote       $00
000001E4                          M 	smpsdetune	$00
000001E4 E100                     M 	dc.b	$e1,$00
000001E6                            	smpsPan             panCenter, $00
000001E6 E0C0                     M 	dc.b	$e0,direction+amsfms
000001E8 B206 B3B0 0CAC             	dc.b	nCs4, $06, nD4, nB3, $0C, nG3
000001EE                            	smpsLoop            $00, $02, Supersonic_Loop02
000001EE F7                       M 	dc.b	$f7
000001EF 0002                     M 	dc.b	index,loops
000001F1 0000                     M 	dc.w	((supersonic_loop02&$7fff)<<8)&$ff00+(supersonic_loop02&$7fff)>>8
000001F3                            	smpsSetvoice        $02
000001F3                          M 	smpsfmvoice	$02
000001F3 EF02                     M 	dc.b	$ef,$02
000001F5                            	smpsAlterNote       $02
000001F5                          M 	smpsdetune	$02
000001F5 E102                     M 	dc.b	$e1,$02
000001F7                            	smpsCall            Supersonic_Call02
000001F7 F8                       M 	dc.b	$f8
000001F8 0000                     M 	dc.w	((supersonic_call02&$7fff)<<8)&$ff00+(supersonic_call02&$7fff)>>8
000001FA                            	smpsAlterNote       $00
000001FA                          M 	smpsdetune	$00
000001FA E100                     M 	dc.b	$e1,$00
000001FC                            	smpsJump            Supersonic_FM5
000001FC F6                       M 	dc.b	$f6
000001FD 0000                     M 	dc.w	((supersonic_fm5&$7fff)<<8)&$ff00+(supersonic_fm5&$7fff)>>8
000001FF                            
000001FF                            Supersonic_Call00:
000001FF CB06 80CB 80CB 80CB 80     	dc.b	nD6, $06, nRst, nD6, nRst, nD6, nRst, nD6, nRst
00000208                            	smpsReturn
00000208 E3                       M 	dc.b	$e3
00000209                            
00000209                            ; PSG1 Data
00000209                            Supersonic_PSG1:
00000209 8060                       	dc.b	nRst, $60
0000020B                            	smpsLoop            $00, $0A, Supersonic_PSG1
0000020B F7                       M 	dc.b	$f7
0000020C 000A                     M 	dc.b	index,loops
0000020E 0000                     M 	dc.w	((supersonic_psg1&$7fff)<<8)&$ff00+(supersonic_psg1&$7fff)>>8
00000210 8018                       	dc.b	nRst, $18
00000212                            	smpsCall            Supersonic_Call06
00000212 F8                       M 	dc.b	$f8
00000213 0000                     M 	dc.w	((supersonic_call06&$7fff)<<8)&$ff00+(supersonic_call06&$7fff)>>8
00000215 CB80 15D5 03D4 D3D2 D1D0+  	dc.b	nD6, nRst, $15, nC7, $03, nB6, nBb6, nA6, nAb6, nG6, nFs6, nF6
00000221                            	smpsCall            Supersonic_Call06
00000221 F8                       M 	dc.b	$f8
00000222 0000                     M 	dc.w	((supersonic_call06&$7fff)<<8)&$ff00+(supersonic_call06&$7fff)>>8
00000224 CAD5 D4D2 D1D0 CFCE D9D8+  	dc.b	nCs6, nC7, nB6, nA6, nAb6, nG6, nFs6, nF6, nE7, nEb7, nD7, nCs7
00000230 D5D4 D3D2 D0CF CECD CCCB+  	dc.b	nC7, nB6, nBb6, nA6, nG6, nFs6, nF6, nE6, nEb6, nD6, nCs6, nB5
0000023C                            	smpsJump            Supersonic_PSG1
0000023C F6                       M 	dc.b	$f6
0000023D 0000                     M 	dc.w	((supersonic_psg1&$7fff)<<8)&$ff00+(supersonic_psg1&$7fff)>>8
0000023F                            
0000023F                            Supersonic_Call06:
0000023F D203 D1D0 CFCE CDCC CB     	dc.b	nA6, $03, nAb6, nG6, nFs6, nF6, nE6, nEb6, nD6
00000248                            	smpsReturn
00000248 E3                       M 	dc.b	$e3
00000249                            
00000249                            ; PSG2 Data
00000249                            Supersonic_PSG2:
00000249                            	smpsStop
00000249 F2                       M 	dc.b	$f2
0000024A                            
0000024A                            ; PSG3 Data
0000024A                            Supersonic_PSG3:
0000024A                            	smpsStop
0000024A F2                       M 	dc.b	$f2
0000024B                            
0000024B                            ; DAC Data
0000024B                            Supersonic_DAC:
0000024B 810C 8206 8112 820C        	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dSnare, $0C
00000253                            	smpsLoop            $00, $03, Supersonic_DAC
00000253 F7                       M 	dc.b	$f7
00000254 0003                     M 	dc.b	index,loops
00000256 0000                     M 	dc.w	((supersonic_dac&$7fff)<<8)&$ff00+(supersonic_dac&$7fff)>>8
00000258 810C 8206 810C 8206 0C     	dc.b	dKick, $0C, dSnare, $06, dKick, $0C, dSnare, $06, $0C
00000261                            
00000261                            Supersonic_Loop00:
00000261 810C 82                    	dc.b	dKick, $0C, dSnare
00000264                            	smpsLoop            $00, $07, Supersonic_Loop00
00000264 F7                       M 	dc.b	$f7
00000265 0007                     M 	dc.b	index,loops
00000267 0000                     M 	dc.w	((supersonic_loop00&$7fff)<<8)&$ff00+(supersonic_loop00&$7fff)>>8
00000269 8106 8282 0C               	dc.b	dKick, $06, dSnare, dSnare, $0C
0000026E                            	smpsLoop            $01, $05, Supersonic_Loop00
0000026E F7                       M 	dc.b	$f7
0000026F 0105                     M 	dc.b	index,loops
00000271 0000                     M 	dc.w	((supersonic_loop00&$7fff)<<8)&$ff00+(supersonic_loop00&$7fff)>>8
00000273                            	smpsJump            Supersonic_DAC
00000273 F6                       M 	dc.b	$f6
00000274 0000                     M 	dc.w	((supersonic_dac&$7fff)<<8)&$ff00+(supersonic_dac&$7fff)>>8
00000276                            
00000276                            Supersonic_Voices:
00000276                            ;	Voice $00
00000276                            ;	$3A
00000276                            ;	$02, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00000276                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$19, $4E, $15, $80
00000276                            	smpsVcAlgorithm     $02
00000276 =00000002                M vcalgorithm	=	val
00000276                            	smpsVcFeedback      $07
00000276 =00000007                M vcfeedback	=	val
00000276                            	smpsVcUnusedBits    $00
00000276 =00000000                M vcunusedbits	=	val
00000276 =00000000                M vcd1r1unk	=	0
00000276 =00000000                M vcd1r2unk	=	0
00000276 =00000000                M vcd1r3unk	=	0
00000276 =00000000                M vcd1r4unk	=	0
00000276                            	smpsVcDetune        $00, $00, $00, $00
00000276 =00000000                M vcdt1	=	op1
00000276 =00000000                M vcdt2	=	op2
00000276 =00000000                M vcdt3	=	op3
00000276 =00000000                M vcdt4	=	op4
00000276                            	smpsVcCoarseFreq    $01, $01, $07, $02
00000276 =00000001                M vccf1	=	op1
00000276 =00000001                M vccf2	=	op2
00000276 =00000007                M vccf3	=	op3
00000276 =00000002                M vccf4	=	op4
00000276                            	smpsVcRateScale     $01, $02, $02, $02
00000276 =00000001                M vcrs1	=	op1
00000276 =00000002                M vcrs2	=	op2
00000276 =00000002                M vcrs3	=	op3
00000276 =00000002                M vcrs4	=	op4
00000276                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00000276 =00000013                M vcar1	=	op1
00000276 =0000000D                M vcar2	=	op2
00000276 =0000000E                M vcar3	=	op3
00000276 =0000000E                M vcar4	=	op4
00000276                            	smpsVcAmpMod        $00, $00, $00, $00
00000276 =00000000                M vcam1	=	op1<<5
00000276 =00000000                M vcam2	=	op2<<5
00000276 =00000000                M vcam3	=	op3<<5
00000276 =00000000                M vcam4	=	op4<<5
00000276                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00000276 =00000003                M vcd1r1	=	op1
00000276 =0000000E                M vcd1r2	=	op2
00000276 =0000000E                M vcd1r3	=	op3
00000276 =0000000E                M vcd1r4	=	op4
00000276                            	smpsVcDecayRate2    $00, $00, $00, $00
00000276 =00000000                M vcd2r1	=	op1
00000276 =00000000                M vcd2r2	=	op2
00000276 =00000000                M vcd2r3	=	op3
00000276 =00000000                M vcd2r4	=	op4
00000276                            	smpsVcDecayLevel    $00, $01, $0F, $01
00000276 =00000000                M vcdl1	=	op1
00000276 =00000001                M vcdl2	=	op2
00000276 =0000000F                M vcdl3	=	op3
00000276 =00000001                M vcdl4	=	op4
00000276                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000276 =0000000F                M vcrr1	=	op1
00000276 =0000000F                M vcrr2	=	op2
00000276 =0000000F                M vcrr3	=	op3
00000276 =0000000F                M vcrr4	=	op4
00000276                            	smpsVcTotalLevel    $00, $15, $4E, $19
00000276 =00000000                M vctl1	=	op1
00000276 =00000015                M vctl2	=	op2
00000276 =0000004E                M vctl3	=	op3
00000276 =00000019                M vctl4	=	op4
00000276 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000277 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000277 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000277 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000277 =00000080                M vctlmask1	=	$80
00000277 0201 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000027B 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000027F 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000283 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000287 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000028B 1915 4E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000028F                            
0000028F                            ;	Voice $01
0000028F                            ;	$08
0000028F                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
0000028F                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$22, $2E, $13, $80
0000028F                            	smpsVcAlgorithm     $00
0000028F =00000000                M vcalgorithm	=	val
0000028F                            	smpsVcFeedback      $01
0000028F =00000001                M vcfeedback	=	val
0000028F                            	smpsVcUnusedBits    $00
0000028F =00000000                M vcunusedbits	=	val
0000028F =00000000                M vcd1r1unk	=	0
0000028F =00000000                M vcd1r2unk	=	0
0000028F =00000000                M vcd1r3unk	=	0
0000028F =00000000                M vcd1r4unk	=	0
0000028F                            	smpsVcDetune        $00, $03, $07, $00
0000028F =00000000                M vcdt1	=	op1
0000028F =00000003                M vcdt2	=	op2
0000028F =00000007                M vcdt3	=	op3
0000028F =00000000                M vcdt4	=	op4
0000028F                            	smpsVcCoarseFreq    $00, $00, $00, $0A
0000028F =00000000                M vccf1	=	op1
0000028F =00000000                M vccf2	=	op2
0000028F =00000000                M vccf3	=	op3
0000028F =0000000A                M vccf4	=	op4
0000028F                            	smpsVcRateScale     $01, $01, $00, $00
0000028F =00000001                M vcrs1	=	op1
0000028F =00000001                M vcrs2	=	op2
0000028F =00000000                M vcrs3	=	op3
0000028F =00000000                M vcrs4	=	op4
0000028F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000028F =0000001F                M vcar1	=	op1
0000028F =0000001F                M vcar2	=	op2
0000028F =0000001F                M vcar3	=	op3
0000028F =0000001F                M vcar4	=	op4
0000028F                            	smpsVcAmpMod        $00, $00, $00, $00
0000028F =00000000                M vcam1	=	op1<<5
0000028F =00000000                M vcam2	=	op2<<5
0000028F =00000000                M vcam3	=	op3<<5
0000028F =00000000                M vcam4	=	op4<<5
0000028F                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
0000028F =0000000A                M vcd1r1	=	op1
0000028F =0000000A                M vcd1r2	=	op2
0000028F =0000000E                M vcd1r3	=	op3
0000028F =00000012                M vcd1r4	=	op4
0000028F                            	smpsVcDecayRate2    $03, $04, $04, $00
0000028F =00000003                M vcd2r1	=	op1
0000028F =00000004                M vcd2r2	=	op2
0000028F =00000004                M vcd2r3	=	op3
0000028F =00000000                M vcd2r4	=	op4
0000028F                            	smpsVcDecayLevel    $02, $02, $02, $02
0000028F =00000002                M vcdl1	=	op1
0000028F =00000002                M vcdl2	=	op2
0000028F =00000002                M vcdl3	=	op3
0000028F =00000002                M vcdl4	=	op4
0000028F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000028F =0000000F                M vcrr1	=	op1
0000028F =0000000F                M vcrr2	=	op2
0000028F =0000000F                M vcrr3	=	op3
0000028F =0000000F                M vcrr4	=	op4
0000028F                            	smpsVcTotalLevel    $00, $13, $2E, $22
0000028F =00000000                M vctl1	=	op1
0000028F =00000013                M vctl2	=	op2
0000028F =0000002E                M vctl3	=	op3
0000028F =00000022                M vctl4	=	op4
0000028F 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000290 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000290 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000290 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000290 =00000080                M vctlmask1	=	$80
00000290 0A30 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000294 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000298 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000029C 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002A0 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002A4 2213 2E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002A8                            
000002A8                            ;	Voice $02
000002A8                            ;	$3A
000002A8                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000002A8                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
000002A8                            	smpsVcAlgorithm     $02
000002A8 =00000002                M vcalgorithm	=	val
000002A8                            	smpsVcFeedback      $07
000002A8 =00000007                M vcfeedback	=	val
000002A8                            	smpsVcUnusedBits    $00
000002A8 =00000000                M vcunusedbits	=	val
000002A8 =00000000                M vcd1r1unk	=	0
000002A8 =00000000                M vcd1r2unk	=	0
000002A8 =00000000                M vcd1r3unk	=	0
000002A8 =00000000                M vcd1r4unk	=	0
000002A8                            	smpsVcDetune        $00, $00, $00, $00
000002A8 =00000000                M vcdt1	=	op1
000002A8 =00000000                M vcdt2	=	op2
000002A8 =00000000                M vcdt3	=	op3
000002A8 =00000000                M vcdt4	=	op4
000002A8                            	smpsVcCoarseFreq    $01, $01, $07, $01
000002A8 =00000001                M vccf1	=	op1
000002A8 =00000001                M vccf2	=	op2
000002A8 =00000007                M vccf3	=	op3
000002A8 =00000001                M vccf4	=	op4
000002A8                            	smpsVcRateScale     $01, $02, $02, $02
000002A8 =00000001                M vcrs1	=	op1
000002A8 =00000002                M vcrs2	=	op2
000002A8 =00000002                M vcrs3	=	op3
000002A8 =00000002                M vcrs4	=	op4
000002A8                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000002A8 =00000013                M vcar1	=	op1
000002A8 =0000000D                M vcar2	=	op2
000002A8 =0000000E                M vcar3	=	op3
000002A8 =0000000E                M vcar4	=	op4
000002A8                            	smpsVcAmpMod        $00, $00, $00, $00
000002A8 =00000000                M vcam1	=	op1<<5
000002A8 =00000000                M vcam2	=	op2<<5
000002A8 =00000000                M vcam3	=	op3<<5
000002A8 =00000000                M vcam4	=	op4<<5
000002A8                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000002A8 =00000003                M vcd1r1	=	op1
000002A8 =0000000E                M vcd1r2	=	op2
000002A8 =0000000E                M vcd1r3	=	op3
000002A8 =0000000E                M vcd1r4	=	op4
000002A8                            	smpsVcDecayRate2    $00, $00, $00, $00
000002A8 =00000000                M vcd2r1	=	op1
000002A8 =00000000                M vcd2r2	=	op2
000002A8 =00000000                M vcd2r3	=	op3
000002A8 =00000000                M vcd2r4	=	op4
000002A8                            	smpsVcDecayLevel    $00, $01, $0F, $01
000002A8 =00000000                M vcdl1	=	op1
000002A8 =00000001                M vcdl2	=	op2
000002A8 =0000000F                M vcdl3	=	op3
000002A8 =00000001                M vcdl4	=	op4
000002A8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002A8 =0000000F                M vcrr1	=	op1
000002A8 =0000000F                M vcrr2	=	op2
000002A8 =0000000F                M vcrr3	=	op3
000002A8 =0000000F                M vcrr4	=	op4
000002A8                            	smpsVcTotalLevel    $00, $27, $28, $17
000002A8 =00000000                M vctl1	=	op1
000002A8 =00000027                M vctl2	=	op2
000002A8 =00000028                M vctl3	=	op3
000002A8 =00000017                M vctl4	=	op4
000002A8 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002A9 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002A9 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002A9 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002A9 =00000080                M vctlmask1	=	$80
000002A9 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002AD 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002B1 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000002B5 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002B9 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002BD 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002C1                            
000002C1                            ;	Voice $03
000002C1                            ;	$2C
000002C1                            ;	$71, $72, $33, $33, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000002C1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1E, $80, $23, $82
000002C1                            	smpsVcAlgorithm     $04
000002C1 =00000004                M vcalgorithm	=	val
000002C1                            	smpsVcFeedback      $05
000002C1 =00000005                M vcfeedback	=	val
000002C1                            	smpsVcUnusedBits    $00
000002C1 =00000000                M vcunusedbits	=	val
000002C1 =00000000                M vcd1r1unk	=	0
000002C1 =00000000                M vcd1r2unk	=	0
000002C1 =00000000                M vcd1r3unk	=	0
000002C1 =00000000                M vcd1r4unk	=	0
000002C1                            	smpsVcDetune        $03, $03, $07, $07
000002C1 =00000003                M vcdt1	=	op1
000002C1 =00000003                M vcdt2	=	op2
000002C1 =00000007                M vcdt3	=	op3
000002C1 =00000007                M vcdt4	=	op4
000002C1                            	smpsVcCoarseFreq    $03, $03, $02, $01
000002C1 =00000003                M vccf1	=	op1
000002C1 =00000003                M vccf2	=	op2
000002C1 =00000002                M vccf3	=	op3
000002C1 =00000001                M vccf4	=	op4
000002C1                            	smpsVcRateScale     $00, $00, $00, $00
000002C1 =00000000                M vcrs1	=	op1
000002C1 =00000000                M vcrs2	=	op2
000002C1 =00000000                M vcrs3	=	op3
000002C1 =00000000                M vcrs4	=	op4
000002C1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000002C1 =0000001F                M vcar1	=	op1
000002C1 =0000001F                M vcar2	=	op2
000002C1 =0000001F                M vcar3	=	op3
000002C1 =0000001F                M vcar4	=	op4
000002C1                            	smpsVcAmpMod        $00, $00, $00, $00
000002C1 =00000000                M vcam1	=	op1<<5
000002C1 =00000000                M vcam2	=	op2<<5
000002C1 =00000000                M vcam3	=	op3<<5
000002C1 =00000000                M vcam4	=	op4<<5
000002C1                            	smpsVcDecayRate1    $00, $00, $00, $00
000002C1 =00000000                M vcd1r1	=	op1
000002C1 =00000000                M vcd1r2	=	op2
000002C1 =00000000                M vcd1r3	=	op3
000002C1 =00000000                M vcd1r4	=	op4
000002C1                            	smpsVcDecayRate2    $00, $00, $00, $00
000002C1 =00000000                M vcd2r1	=	op1
000002C1 =00000000                M vcd2r2	=	op2
000002C1 =00000000                M vcd2r3	=	op3
000002C1 =00000000                M vcd2r4	=	op4
000002C1                            	smpsVcDecayLevel    $00, $00, $00, $00
000002C1 =00000000                M vcdl1	=	op1
000002C1 =00000000                M vcdl2	=	op2
000002C1 =00000000                M vcdl3	=	op3
000002C1 =00000000                M vcdl4	=	op4
000002C1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002C1 =0000000F                M vcrr1	=	op1
000002C1 =0000000F                M vcrr2	=	op2
000002C1 =0000000F                M vcrr3	=	op3
000002C1 =0000000F                M vcrr4	=	op4
000002C1                            	smpsVcTotalLevel    $02, $23, $00, $1E
000002C1 =00000002                M vctl1	=	op1
000002C1 =00000023                M vctl2	=	op2
000002C1 =00000000                M vctl3	=	op3
000002C1 =0000001E                M vctl4	=	op4
000002C1 2C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002C2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002C2 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002C2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002C2 =00000080                M vctlmask1	=	$80
000002C2 7133 7233                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002C6 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002CA 0000 0000                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000002CE 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002D2 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002D6 1E23 8082                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002DA                            
000002DA                            ;	Voice $04
000002DA                            ;	$3A
000002DA                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000002DA                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000002DA                            	smpsVcAlgorithm     $02
000002DA =00000002                M vcalgorithm	=	val
000002DA                            	smpsVcFeedback      $07
000002DA =00000007                M vcfeedback	=	val
000002DA                            	smpsVcUnusedBits    $00
000002DA =00000000                M vcunusedbits	=	val
000002DA =00000000                M vcd1r1unk	=	0
000002DA =00000000                M vcd1r2unk	=	0
000002DA =00000000                M vcd1r3unk	=	0
000002DA =00000000                M vcd1r4unk	=	0
000002DA                            	smpsVcDetune        $03, $01, $03, $06
000002DA =00000003                M vcdt1	=	op1
000002DA =00000001                M vcdt2	=	op2
000002DA =00000003                M vcdt3	=	op3
000002DA =00000006                M vcdt4	=	op4
000002DA                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000002DA =00000001                M vccf1	=	op1
000002DA =00000004                M vccf2	=	op2
000002DA =0000000C                M vccf3	=	op3
000002DA =00000001                M vccf4	=	op4
000002DA                            	smpsVcRateScale     $03, $02, $03, $02
000002DA =00000003                M vcrs1	=	op1
000002DA =00000002                M vcrs2	=	op2
000002DA =00000003                M vcrs3	=	op3
000002DA =00000002                M vcrs4	=	op4
000002DA                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000002DA =0000001A                M vcar1	=	op1
000002DA =0000001C                M vcar2	=	op2
000002DA =0000001B                M vcar3	=	op3
000002DA =0000001C                M vcar4	=	op4
000002DA                            	smpsVcAmpMod        $00, $00, $00, $00
000002DA =00000000                M vcam1	=	op1<<5
000002DA =00000000                M vcam2	=	op2<<5
000002DA =00000000                M vcam3	=	op3<<5
000002DA =00000000                M vcam4	=	op4<<5
000002DA                            	smpsVcDecayRate1    $03, $04, $09, $04
000002DA =00000003                M vcd1r1	=	op1
000002DA =00000004                M vcd1r2	=	op2
000002DA =00000009                M vcd1r3	=	op3
000002DA =00000004                M vcd1r4	=	op4
000002DA                            	smpsVcDecayRate2    $00, $03, $01, $03
000002DA =00000000                M vcd2r1	=	op1
000002DA =00000003                M vcd2r2	=	op2
000002DA =00000001                M vcd2r3	=	op3
000002DA =00000003                M vcd2r4	=	op4
000002DA                            	smpsVcDecayLevel    $0A, $00, $00, $01
000002DA =0000000A                M vcdl1	=	op1
000002DA =00000000                M vcdl2	=	op2
000002DA =00000000                M vcdl3	=	op3
000002DA =00000001                M vcdl4	=	op4
000002DA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002DA =0000000F                M vcrr1	=	op1
000002DA =0000000F                M vcrr2	=	op2
000002DA =0000000F                M vcrr3	=	op3
000002DA =0000000F                M vcrr4	=	op4
000002DA                            	smpsVcTotalLevel    $00, $31, $47, $21
000002DA =00000000                M vctl1	=	op1
000002DA =00000031                M vctl2	=	op2
000002DA =00000047                M vctl3	=	op3
000002DA =00000021                M vctl4	=	op4
000002DA 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002DB =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002DB =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002DB =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002DB =00000080                M vctlmask1	=	$80
000002DB 6114 3C31                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002DF 9C9C DBDA                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002E3 0404 0903                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000002E7 0303 0100                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002EB 1F0F 0FAF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002EF 2131 4780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002F3                            
000002F3                          M 	pops
00000000                            		inc_music	HTZ
00000000                          M 	pushs
00000000                          M music_2363:	section	org($1380),file("sound/music/compressed/htz.unc"),over(header)
00000000                          M 	include	"sound/music/htz.asm"
00000000                            HTZ_Header:
00000000                            	smpsHeaderStartSong 2, 1
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000001                M sourcesmps2asm	=	sourcesmps2asmver
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     HTZ_Voices
00000000 0000                     M 	dc.w	((htz_voices&$7fff)<<8)&$ff00+(htz_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $BE
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$be
00000005 BE                       M 	dc.b	$be
00000006                            
00000006                            	smpsHeaderDAC       HTZ_DAC
00000006                          M 	checkedchannelpointer	htz_dac
00000006 0000                     M 	dc.w	((htz_dac&$7fff)<<8)&$ff00+(htz_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        HTZ_FM1,	$0C, $07
0000000A                          M 	checkedchannelpointer	htz_fm1
0000000A 0000                     M 	dc.w	((htz_fm1&$7fff)<<8)&$ff00+(htz_fm1&$7fff)>>8
0000000C 0C07                     M 	dc.b	$0c,$07
0000000E                            	smpsHeaderFM        HTZ_FM2,	$0C, $07
0000000E                          M 	checkedchannelpointer	htz_fm2
0000000E 0000                     M 	dc.w	((htz_fm2&$7fff)<<8)&$ff00+(htz_fm2&$7fff)>>8
00000010 0C07                     M 	dc.b	$0c,$07
00000012                            	smpsHeaderFM        HTZ_FM3,	$0C, $07
00000012                          M 	checkedchannelpointer	htz_fm3
00000012 0000                     M 	dc.w	((htz_fm3&$7fff)<<8)&$ff00+(htz_fm3&$7fff)>>8
00000014 0C07                     M 	dc.b	$0c,$07
00000016                            	smpsHeaderFM        HTZ_FM4,	$00, $07
00000016                          M 	checkedchannelpointer	htz_fm4
00000016 0000                     M 	dc.w	((htz_fm4&$7fff)<<8)&$ff00+(htz_fm4&$7fff)>>8
00000018 0007                     M 	dc.b	$00,$07
0000001A                            	smpsHeaderFM        HTZ_FM5,	$00, $07
0000001A                          M 	checkedchannelpointer	htz_fm5
0000001A 0000                     M 	dc.w	((htz_fm5&$7fff)<<8)&$ff00+(htz_fm5&$7fff)>>8
0000001C 0007                     M 	dc.b	$00,$07
0000001E                            	smpsHeaderPSG       HTZ_PSG1,	$00, $06, $00, $00
0000001E                          M 	checkedchannelpointer	htz_psg1
0000001E 0000                     M 	dc.w	((htz_psg1&$7fff)<<8)&$ff00+(htz_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$00
00000020 00                       M 	dc.b	$00
00000021 06                       M 	dc.b	$06
00000022 00                       M 	dc.b	$00
00000023 00                       M 	dc.b	$00
00000024                            	smpsHeaderPSG       HTZ_PSG2,	$00, $05, $00, $00
00000024                          M 	checkedchannelpointer	htz_psg2
00000024 0000                     M 	dc.w	((htz_psg2&$7fff)<<8)&$ff00+(htz_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$00
00000026 00                       M 	dc.b	$00
00000027 05                       M 	dc.b	$05
00000028 00                       M 	dc.b	$00
00000029 00                       M 	dc.b	$00
0000002A                            	smpsHeaderPSG       HTZ_PSG3,	$00, $00, $00, $00
0000002A                          M 	checkedchannelpointer	htz_psg3
0000002A 0000                     M 	dc.w	((htz_psg3&$7fff)<<8)&$ff00+(htz_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 00                       M 	dc.b	$00
0000002E 00                       M 	dc.b	$00
0000002F 00                       M 	dc.b	$00
00000030                            
00000030                            ; PSG1 Data
00000030                            HTZ_PSG1:
00000030                            ; PSG2 Data
00000030                            HTZ_PSG2:
00000030                            ; PSG3 Data
00000030                            HTZ_PSG3:
00000030                            	smpsStop
00000030 F2                       M 	dc.b	$f2
00000031                            
00000031                            ; FM1 Data
00000031                            HTZ_FM1:
00000031                            	smpsSetvoice        $01
00000031                          M 	smpsfmvoice	$01
00000031 EF01                     M 	dc.b	$ef,$01
00000033                            	smpsAlterNote       $06
00000033                          M 	smpsdetune	$06
00000033 E106                     M 	dc.b	$e1,$06
00000035 8060                       	dc.b	nRst, $60
00000037                            	smpsModSet          $08, $01, $02, $40
00000037 F0                       M 	dc.b	$f0
00000038 0801 0240                M 	dc.b	$08,$01,$02,$40
0000003C B330                       	dc.b	nD4, $30
0000003E                            	smpsModSet          $08, $01, $03, $20
0000003E F0                       M 	dc.b	$f0
0000003F 0801 0320                M 	dc.b	$08,$01,$03,$20
00000043 E7B3 18                    	dc.b	smpsNoAttack, nD4, $18
00000046                            	smpsModSet          $08, $01, $03, $20
00000046 F0                       M 	dc.b	$f0
00000047 0801 0320                M 	dc.b	$08,$01,$03,$20
0000004B E7B3 18                    	dc.b	smpsNoAttack, nD4, $18
0000004E                            	smpsModOff
0000004E F4                       M 	dc.b	$f4
0000004F B10C 8054                  	dc.b	nC4, $0C, nRst, $54
00000053                            	smpsCall            HTZ_Call0C
00000053 F8                       M 	dc.b	$f8
00000054 0000                     M 	dc.w	((htz_call0c&$7fff)<<8)&$ff00+(htz_call0c&$7fff)>>8
00000056                            	smpsSetvoice        $01
00000056                          M 	smpsfmvoice	$01
00000056 EF01                     M 	dc.b	$ef,$01
00000058                            	smpsCall            HTZ_Call0D
00000058 F8                       M 	dc.b	$f8
00000059 0000                     M 	dc.w	((htz_call0d&$7fff)<<8)&$ff00+(htz_call0d&$7fff)>>8
0000005B                            	smpsAlterPitch      $F4
0000005B                          M 	smpschangetransposition	$f4
0000005B E9F4                     M 	dc.b	$e9,$f4
0000005D                            	smpsCall            HTZ_Call08
0000005D F8                       M 	dc.b	$f8
0000005E 0000                     M 	dc.w	((htz_call08&$7fff)<<8)&$ff00+(htz_call08&$7fff)>>8
00000060                            	smpsAlterPitch      $0C
00000060                          M 	smpschangetransposition	$0c
00000060 E90C                     M 	dc.b	$e9,$0c
00000062                            	smpsSetvoice        $01
00000062                          M 	smpsfmvoice	$01
00000062 EF01                     M 	dc.b	$ef,$01
00000064                            	smpsCall            HTZ_Call0E
00000064 F8                       M 	dc.b	$f8
00000065 0000                     M 	dc.w	((htz_call0e&$7fff)<<8)&$ff00+(htz_call0e&$7fff)>>8
00000067                            	smpsAlterPitch      $F4
00000067                          M 	smpschangetransposition	$f4
00000067 E9F4                     M 	dc.b	$e9,$f4
00000069                            	smpsCall            HTZ_Call09
00000069 F8                       M 	dc.b	$f8
0000006A 0000                     M 	dc.w	((htz_call09&$7fff)<<8)&$ff00+(htz_call09&$7fff)>>8
0000006C                            	smpsAlterPitch      $0C
0000006C                          M 	smpschangetransposition	$0c
0000006C E90C                     M 	dc.b	$e9,$0c
0000006E                            	smpsSetvoice        $01
0000006E                          M 	smpsfmvoice	$01
0000006E EF01                     M 	dc.b	$ef,$01
00000070                            	smpsCall            HTZ_Call0D
00000070 F8                       M 	dc.b	$f8
00000071 0000                     M 	dc.w	((htz_call0d&$7fff)<<8)&$ff00+(htz_call0d&$7fff)>>8
00000073                            	smpsAlterPitch      $F4
00000073                          M 	smpschangetransposition	$f4
00000073 E9F4                     M 	dc.b	$e9,$f4
00000075                            	smpsCall            HTZ_Call08
00000075 F8                       M 	dc.b	$f8
00000076 0000                     M 	dc.w	((htz_call08&$7fff)<<8)&$ff00+(htz_call08&$7fff)>>8
00000078                            	smpsAlterPitch      $0C
00000078                          M 	smpschangetransposition	$0c
00000078 E90C                     M 	dc.b	$e9,$0c
0000007A                            	smpsSetvoice        $01
0000007A                          M 	smpsfmvoice	$01
0000007A EF01                     M 	dc.b	$ef,$01
0000007C                            	smpsCall            HTZ_Call0E
0000007C F8                       M 	dc.b	$f8
0000007D 0000                     M 	dc.w	((htz_call0e&$7fff)<<8)&$ff00+(htz_call0e&$7fff)>>8
0000007F                            	smpsAlterPitch      $F4
0000007F                          M 	smpschangetransposition	$f4
0000007F E9F4                     M 	dc.b	$e9,$f4
00000081                            	smpsCall            HTZ_Call0A
00000081 F8                       M 	dc.b	$f8
00000082 0000                     M 	dc.w	((htz_call0a&$7fff)<<8)&$ff00+(htz_call0a&$7fff)>>8
00000084                            	smpsAlterPitch      $0C
00000084                          M 	smpschangetransposition	$0c
00000084 E90C                     M 	dc.b	$e9,$0c
00000086                            	smpsAlterNote       $FE
00000086                          M 	smpsdetune	$fe
00000086 E1FE                     M 	dc.b	$e1,$fe
00000088 800C                       	dc.b	nRst, $0C
0000008A                            	smpsSetvoice        $03
0000008A                          M 	smpsfmvoice	$03
0000008A EF03                     M 	dc.b	$ef,$03
0000008C A306 A2A3 A580 0CA3 06A2+  	dc.b	nBb2, $06, nA2, nBb2, nC3, nRst, $0C, nBb2, $06, nA2, nBb2, nC3
00000098 8024 A206 A0A2 A580 0C9E+  	dc.b	nRst, $24, nA2, $06, nG2, nA2, nC3, nRst, $0C, nF2, $06, nE2
000000A4 9EA0 8018                  	dc.b	nF2, nG2, nRst, $18
000000A8                            	smpsCall            HTZ_Call0F
000000A8 F8                       M 	dc.b	$f8
000000A9 0000                     M 	dc.w	((htz_call0f&$7fff)<<8)&$ff00+(htz_call0f&$7fff)>>8
000000AB A903 80A9 12AA 0380 09AA+  	dc.b	nE3, $03, nRst, nE3, $12, nF3, $03, nRst, $09, nF3, $0C, nFs3
000000B7 0380 09AB 0CAC 8018 A306+  	dc.b	$03, nRst, $09, nFs3, $0C, nG3, nRst, $18, nBb2, $06, nA2, nBb2
000000C3 A580 0CA3 06A2 A3A5 8024+  	dc.b	nC3, nRst, $0C, nBb2, $06, nA2, nBb2, nC3, nRst, $24, nA2, $06
000000CF A0A2 A580 0C9E 069D 9EA0+  	dc.b	nG2, nA2, nC3, nRst, $0C, nF2, $06, nE2, nF2, nG2, nRst, $18
000000DB                            	smpsCall            HTZ_Call0F
000000DB F8                       M 	dc.b	$f8
000000DC 0000                     M 	dc.w	((htz_call0f&$7fff)<<8)&$ff00+(htz_call0f&$7fff)>>8
000000DE A903 80A9 0680 54          	dc.b	nE3, $03, nRst, nE3, $06, nRst, $54
000000E5                            	smpsJump            HTZ_FM1
000000E5 F6                       M 	dc.b	$f6
000000E6 0000                     M 	dc.w	((htz_fm1&$7fff)<<8)&$ff00+(htz_fm1&$7fff)>>8
000000E8                            
000000E8                            HTZ_Call0F:
000000E8 A903 8009 A90C AA03 8009+  	dc.b	nE3, $03, nRst, $09, nE3, $0C, nF3, $03, nRst, $09, nF3, $0C
000000F4 AB03 8009 AB0C AC18        	dc.b	nFs3, $03, nRst, $09, nFs3, $0C, nG3, $18
000000FC                            	smpsReturn
000000FC E3                       M 	dc.b	$e3
000000FD                            
000000FD                            HTZ_Call0D:
000000FD 8006 AC06 AE80 B180 B380+  	dc.b	nRst, $06, nG3, $06, nA3, nRst, nC4, nRst, nD4, nRst, nEb4, nRst
00000109 B380 B1B3 80B1             	dc.b	nD4, nRst, nC4, nD4, nRst, nC4
0000010F                            	smpsReturn
0000010F E3                       M 	dc.b	$e3
00000110                            
00000110                            HTZ_Call0E:
00000110 8006 B812 B406 80B3 80B4+  	dc.b	nRst, $06, nG4, $12, nEb4, $06, nRst, nD4, nRst, nEb4, nRst, nD4
0000011C 80B1 AE80 B1               	dc.b	nRst, nC4, nA3, nRst, nC4
00000121                            	smpsReturn
00000121 E3                       M 	dc.b	$e3
00000122                            
00000122                            ; FM3 Data
00000122                            HTZ_FM3:
00000122                            	smpsSetvoice        $01
00000122                          M 	smpsfmvoice	$01
00000122 EF01                     M 	dc.b	$ef,$01
00000124 8060 8080 8080 60          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, $60
0000012B                            	smpsCall            HTZ_Call08
0000012B F8                       M 	dc.b	$f8
0000012C 0000                     M 	dc.w	((htz_call08&$7fff)<<8)&$ff00+(htz_call08&$7fff)>>8
0000012E 8060                       	dc.b	nRst, $60
00000130                            	smpsCall            HTZ_Call09
00000130 F8                       M 	dc.b	$f8
00000131 0000                     M 	dc.w	((htz_call09&$7fff)<<8)&$ff00+(htz_call09&$7fff)>>8
00000133 8060                       	dc.b	nRst, $60
00000135                            	smpsCall            HTZ_Call08
00000135 F8                       M 	dc.b	$f8
00000136 0000                     M 	dc.w	((htz_call08&$7fff)<<8)&$ff00+(htz_call08&$7fff)>>8
00000138 8060                       	dc.b	nRst, $60
0000013A                            	smpsCall            HTZ_Call0A
0000013A F8                       M 	dc.b	$f8
0000013B 0000                     M 	dc.w	((htz_call0a&$7fff)<<8)&$ff00+(htz_call0a&$7fff)>>8
0000013D                            	smpsSetvoice        $01
0000013D                          M 	smpsfmvoice	$01
0000013D EF01                     M 	dc.b	$ef,$01
0000013F                            	smpsCall            HTZ_Call0B
0000013F F8                       M 	dc.b	$f8
00000140 0000                     M 	dc.w	((htz_call0b&$7fff)<<8)&$ff00+(htz_call0b&$7fff)>>8
00000142 B130 E7B1 30E7 B10C 8060   	dc.b	nC4, $30, smpsNoAttack, nC4, $30, smpsNoAttack, nC4, $0C, nRst, $60
0000014C                            	smpsCall            HTZ_Call0B
0000014C F8                       M 	dc.b	$f8
0000014D 0000                     M 	dc.w	((htz_call0b&$7fff)<<8)&$ff00+(htz_call0b&$7fff)>>8
0000014F B130 E7B1 30E7 B10C B803+  	dc.b	nC4, $30, smpsNoAttack, nC4, $30, smpsNoAttack, nC4, $0C, nG4, $03, nRst, nG4
0000015B 0680 54                    	dc.b	$06, nRst, $54
0000015E                            	smpsJump            HTZ_FM3
0000015E F6                       M 	dc.b	$f6
0000015F 0000                     M 	dc.w	((htz_fm3&$7fff)<<8)&$ff00+(htz_fm3&$7fff)>>8
00000161                            
00000161                            HTZ_Call0B:
00000161 800C AF12 8006 B180 B312+  	dc.b	nRst, $0C, nBb3, $12, nRst, $06, nC4, nRst, nD4, $12, nRst, $06
0000016D B512 8006 B612 8006 B512+  	dc.b	nE4, $12, nRst, $06, nF4, $12, nRst, $06, nE4, $12, nRst, $06
00000179 B380 AF12 8006             	dc.b	nD4, nRst, nBb3, $12, nRst, $06
0000017F                            	smpsReturn
0000017F E3                       M 	dc.b	$e3
00000180                            
00000180                            HTZ_Call0C:
00000180 8006                       	dc.b	nRst, $06
00000182                            	smpsAlterVol        $17
00000182 E617                     M 	dc.b	$e6,$17
00000184 B405 E7B3 05               	dc.b	nEb4, $05, smpsNoAttack, nD4, $05
00000189                            	smpsAlterVol        $FE
00000189 E6FE                     M 	dc.b	$e6,$fe
0000018B B404 E7B3 04               	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
00000190                            	smpsAlterVol        $FE
00000190 E6FE                     M 	dc.b	$e6,$fe
00000192 B404 E7B3 04               	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
00000197                            	smpsAlterVol        $FE
00000197 E6FE                     M 	dc.b	$e6,$fe
00000199 B404 E7B3 04               	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
0000019E                            	smpsAlterVol        $FE
0000019E E6FE                     M 	dc.b	$e6,$fe
000001A0 B404 E7B3 04               	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
000001A5                            	smpsAlterVol        $FE
000001A5 E6FE                     M 	dc.b	$e6,$fe
000001A7 B404 E7B3 04               	dc.b	nEb4, $04, smpsNoAttack, nD4, $04
000001AC                            	smpsAlterVol        $FE
000001AC E6FE                     M 	dc.b	$e6,$fe
000001AE B403 E7B3 04               	dc.b	nEb4, $03, smpsNoAttack, nD4, $04
000001B3                            	smpsAlterVol        $FE
000001B3 E6FE                     M 	dc.b	$e6,$fe
000001B5 B403 E7B3 03               	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
000001BA                            	smpsAlterVol        $FE
000001BA E6FE                     M 	dc.b	$e6,$fe
000001BC B403 E7B3 03               	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
000001C1                            	smpsAlterVol        $FE
000001C1 E6FE                     M 	dc.b	$e6,$fe
000001C3 B403 E7B3 03               	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
000001C8                            	smpsAlterVol        $FE
000001C8 E6FE                     M 	dc.b	$e6,$fe
000001CA B403 E7B3 03               	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
000001CF                            	smpsAlterVol        $FE
000001CF E6FE                     M 	dc.b	$e6,$fe
000001D1 B403 E7B3 03               	dc.b	nEb4, $03, smpsNoAttack, nD4, $03
000001D6                            	smpsAlterVol        $FF
000001D6 E6FF                     M 	dc.b	$e6,$ff
000001D8 B403                       	dc.b	nEb4, $03
000001DA                            	smpsReturn
000001DA E3                       M 	dc.b	$e3
000001DB                            
000001DB                            HTZ_Call08:
000001DB 800C                       	dc.b	nRst, $0C
000001DD                            	smpsSetvoice        $03
000001DD                          M 	smpsfmvoice	$03
000001DD EF03                     M 	dc.b	$ef,$03
000001DF AC06 AEB1 8012 AC06 AEB1+  	dc.b	nG3, $06, nA3, nC4, nRst, $12, nG3, $06, nA3, nC4, nRst, nEb4
000001EB B180 B1                    	dc.b	nC4, nRst, nC4
000001EE                            	smpsReturn
000001EE E3                       M 	dc.b	$e3
000001EF                            
000001EF                            HTZ_Call09:
000001EF 8006                       	dc.b	nRst, $06
000001F1                            	smpsSetvoice        $03
000001F1                          M 	smpsfmvoice	$03
000001F1 EF03                     M 	dc.b	$ef,$03
000001F3 AF12 AE06 8012 AF06 80AE+  	dc.b	nBb3, $12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3, nRst, nBb3
000001FF B180 B1                    	dc.b	nC4, nRst, nC4
00000202                            	smpsReturn
00000202 E3                       M 	dc.b	$e3
00000203                            
00000203                            HTZ_Call0A:
00000203 8006                       	dc.b	nRst, $06
00000205                            	smpsSetvoice        $03
00000205                          M 	smpsfmvoice	$03
00000205 EF03                     M 	dc.b	$ef,$03
00000207 AF12 AE06 8012 AF06 80AE+  	dc.b	nBb3, $12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3, nRst, nBb3
00000213 0380 B112                  	dc.b	$03, nRst, nC4, $12
00000217                            	smpsReturn
00000217 E3                       M 	dc.b	$e3
00000218                            
00000218                            ; FM5 Data
00000218                            HTZ_FM5:
00000218                            	smpsSetvoice        $02
00000218                          M 	smpsfmvoice	$02
00000218 EF02                     M 	dc.b	$ef,$02
0000021A                            	smpsAlterNote       $04
0000021A                          M 	smpsdetune	$04
0000021A E104                     M 	dc.b	$e1,$04
0000021C                            
0000021C                            HTZ_Jump02:
0000021C 8060 8080 80               	dc.b	nRst, $60, nRst, nRst, nRst
00000221                            
00000221                            HTZ_Loop02:
00000221 B803 E7BA 5DB6 03E7 B85D+  	dc.b	nG4, $03, smpsNoAttack, nA4, $5D, nF4, $03, smpsNoAttack, nG4, $5D, nEb4, $03
0000022D E7B6 5DB6 03E7 B85D        	dc.b	smpsNoAttack, nF4, $5D, nF4, $03, smpsNoAttack, nG4, $5D
00000235                            	smpsLoop            $00, $02, HTZ_Loop02
00000235 F7                       M 	dc.b	$f7
00000236 0002                     M 	dc.b	index,loops
00000238 0000                     M 	dc.w	((htz_loop02&$7fff)<<8)&$ff00+(htz_loop02&$7fff)>>8
0000023A                            	smpsCall            HTZ_Call07
0000023A F8                       M 	dc.b	$f8
0000023B 0000                     M 	dc.w	((htz_call07&$7fff)<<8)&$ff00+(htz_call07&$7fff)>>8
0000023D                            	smpsCall            HTZ_Call07
0000023D F8                       M 	dc.b	$f8
0000023E 0000                     M 	dc.w	((htz_call07&$7fff)<<8)&$ff00+(htz_call07&$7fff)>>8
00000240 8060 80                    	dc.b	nRst, $60, nRst
00000243                            	smpsCall            HTZ_Call07
00000243 F8                       M 	dc.b	$f8
00000244 0000                     M 	dc.w	((htz_call07&$7fff)<<8)&$ff00+(htz_call07&$7fff)>>8
00000246                            	smpsCall            HTZ_Call07
00000246 F8                       M 	dc.b	$f8
00000247 0000                     M 	dc.w	((htz_call07&$7fff)<<8)&$ff00+(htz_call07&$7fff)>>8
00000249 8060                       	dc.b	nRst, $60
0000024B                            
0000024B                            HTZ_Loop03:
0000024B BD06                       	dc.b	nC5, $06
0000024D                            	smpsLoop            $00, $0F, HTZ_Loop03
0000024D F7                       M 	dc.b	$f7
0000024E 000F                     M 	dc.b	index,loops
00000250 0000                     M 	dc.w	((htz_loop03&$7fff)<<8)&$ff00+(htz_loop03&$7fff)>>8
00000252 8006                       	dc.b	nRst, $06
00000254                            	smpsJump            HTZ_Jump02
00000254 F6                       M 	dc.b	$f6
00000255 0000                     M 	dc.w	((htz_jump02&$7fff)<<8)&$ff00+(htz_jump02&$7fff)>>8
00000257                            
00000257                            HTZ_Call07:
00000257 BA06 80BA 80B8 8012 BA06+  	dc.b	nA4, $06, nRst, nA4, nRst, nG4, nRst, $12, nA4, $06, nRst, nA4
00000263 80B8 8012                  	dc.b	nRst, nG4, nRst, $12
00000267                            	smpsReturn
00000267 E3                       M 	dc.b	$e3
00000268                            
00000268                            ; FM4 Data
00000268                            HTZ_FM4:
00000268                            	smpsSetvoice        $02
00000268                          M 	smpsfmvoice	$02
00000268 EF02                     M 	dc.b	$ef,$02
0000026A                            
0000026A                            HTZ_Jump01:
0000026A 8060 8080 80               	dc.b	nRst, $60, nRst, nRst, nRst
0000026F                            
0000026F                            HTZ_Loop00:
0000026F B403 E7B6 5DB3 03E7 B55D+  	dc.b	nEb4, $03, smpsNoAttack, nF4, $5D, nD4, $03, smpsNoAttack, nE4, $5D, nC4, $03
0000027B E7B3 5DB3 03E7 B55D        	dc.b	smpsNoAttack, nD4, $5D, nD4, $03, smpsNoAttack, nE4, $5D
00000283                            	smpsLoop            $00, $02, HTZ_Loop00
00000283 F7                       M 	dc.b	$f7
00000284 0002                     M 	dc.b	index,loops
00000286 0000                     M 	dc.w	((htz_loop00&$7fff)<<8)&$ff00+(htz_loop00&$7fff)>>8
00000288                            	smpsCall            HTZ_Call06
00000288 F8                       M 	dc.b	$f8
00000289 0000                     M 	dc.w	((htz_call06&$7fff)<<8)&$ff00+(htz_call06&$7fff)>>8
0000028B                            	smpsCall            HTZ_Call06
0000028B F8                       M 	dc.b	$f8
0000028C 0000                     M 	dc.w	((htz_call06&$7fff)<<8)&$ff00+(htz_call06&$7fff)>>8
0000028E 8060 80                    	dc.b	nRst, $60, nRst
00000291                            	smpsCall            HTZ_Call06
00000291 F8                       M 	dc.b	$f8
00000292 0000                     M 	dc.w	((htz_call06&$7fff)<<8)&$ff00+(htz_call06&$7fff)>>8
00000294                            	smpsCall            HTZ_Call06
00000294 F8                       M 	dc.b	$f8
00000295 0000                     M 	dc.w	((htz_call06&$7fff)<<8)&$ff00+(htz_call06&$7fff)>>8
00000297 8060                       	dc.b	nRst, $60
00000299                            
00000299                            HTZ_Loop01:
00000299 BB06                       	dc.b	nBb4, $06
0000029B                            	smpsLoop            $00, $0F, HTZ_Loop01
0000029B F7                       M 	dc.b	$f7
0000029C 000F                     M 	dc.b	index,loops
0000029E 0000                     M 	dc.w	((htz_loop01&$7fff)<<8)&$ff00+(htz_loop01&$7fff)>>8
000002A0 8006                       	dc.b	nRst, $06
000002A2                            	smpsJump            HTZ_Jump01
000002A2 F6                       M 	dc.b	$f6
000002A3 0000                     M 	dc.w	((htz_jump01&$7fff)<<8)&$ff00+(htz_jump01&$7fff)>>8
000002A5                            
000002A5                            HTZ_Call06:
000002A5 B606 80B6 80B5 8012 B606+  	dc.b	nF4, $06, nRst, nF4, nRst, nE4, nRst, $12, nF4, $06, nRst, nF4
000002B1 80B5 8012                  	dc.b	nRst, nE4, nRst, $12
000002B5                            	smpsReturn
000002B5 E3                       M 	dc.b	$e3
000002B6                            
000002B6                            ; FM2 Data
000002B6                            HTZ_FM2:
000002B6                            	smpsSetvoice        $00
000002B6                          M 	smpsfmvoice	$00
000002B6 EF00                     M 	dc.b	$ef,$00
000002B8                            
000002B8                            HTZ_Jump00:
000002B8                            	smpsCall            HTZ_Call02
000002B8 F8                       M 	dc.b	$f8
000002B9 0000                     M 	dc.w	((htz_call02&$7fff)<<8)&$ff00+(htz_call02&$7fff)>>8
000002BB A806 A9A4 A580 1E96 0696+  	dc.b	nEb3, $06, nE3, nB2, nC3, nRst, $1E, nA1, $06, nA1, $0C, nBb1
000002C7 98                         	dc.b	nB1
000002C8                            	smpsCall            HTZ_Call02
000002C8 F8                       M 	dc.b	$f8
000002C9 0000                     M 	dc.w	((htz_call02&$7fff)<<8)&$ff00+(htz_call02&$7fff)>>8
000002CB A806 A980 54               	dc.b	nEb3, $06, nE3, nRst, $54
000002D0                            	smpsCall            HTZ_Call03
000002D0 F8                       M 	dc.b	$f8
000002D1 0000                     M 	dc.w	((htz_call03&$7fff)<<8)&$ff00+(htz_call03&$7fff)>>8
000002D3                            	smpsCall            HTZ_Call04
000002D3 F8                       M 	dc.b	$f8
000002D4 0000                     M 	dc.w	((htz_call04&$7fff)<<8)&$ff00+(htz_call04&$7fff)>>8
000002D6 980C A406 80               	dc.b	nB1, $0C, nB2, $06, nRst
000002DB                            	smpsCall            HTZ_Call03
000002DB F8                       M 	dc.b	$f8
000002DC 0000                     M 	dc.w	((htz_call03&$7fff)<<8)&$ff00+(htz_call03&$7fff)>>8
000002DE                            	smpsCall            HTZ_Call04
000002DE F8                       M 	dc.b	$f8
000002DF 0000                     M 	dc.w	((htz_call04&$7fff)<<8)&$ff00+(htz_call04&$7fff)>>8
000002E1 980C A406 80               	dc.b	nB1, $0C, nB2, $06, nRst
000002E6                            	smpsCall            HTZ_Call03
000002E6 F8                       M 	dc.b	$f8
000002E7 0000                     M 	dc.w	((htz_call03&$7fff)<<8)&$ff00+(htz_call03&$7fff)>>8
000002E9                            	smpsCall            HTZ_Call04
000002E9 F8                       M 	dc.b	$f8
000002EA 0000                     M 	dc.w	((htz_call04&$7fff)<<8)&$ff00+(htz_call04&$7fff)>>8
000002EC 980C A406 80               	dc.b	nB1, $0C, nB2, $06, nRst
000002F1                            	smpsCall            HTZ_Call03
000002F1 F8                       M 	dc.b	$f8
000002F2 0000                     M 	dc.w	((htz_call03&$7fff)<<8)&$ff00+(htz_call03&$7fff)>>8
000002F4                            	smpsCall            HTZ_Call04
000002F4 F8                       M 	dc.b	$f8
000002F5 0000                     M 	dc.w	((htz_call04&$7fff)<<8)&$ff00+(htz_call04&$7fff)>>8
000002F7 990C A506 80               	dc.b	nC2, $0C, nC3, $06, nRst
000002FC                            	smpsCall            HTZ_Call05
000002FC F8                       M 	dc.b	$f8
000002FD 0000                     M 	dc.w	((htz_call05&$7fff)<<8)&$ff00+(htz_call05&$7fff)>>8
000002FF 9906 9912 9B06 809B 0C9C+  	dc.b	nC2, $06, nC2, $12, nD2, $06, nRst, nD2, $0C, nEb2, $06, nRst
0000030B 9C0C 9D06 809D 0C          	dc.b	nEb2, $0C, nE2, $06, nRst, nE2, $0C
00000312                            	smpsCall            HTZ_Call05
00000312 F8                       M 	dc.b	$f8
00000313 0000                     M 	dc.w	((htz_call05&$7fff)<<8)&$ff00+(htz_call05&$7fff)>>8
00000315 9906 9980 54               	dc.b	nC2, $06, nC2, nRst, $54
0000031A                            	smpsJump            HTZ_Jump00
0000031A F6                       M 	dc.b	$f6
0000031B 0000                     M 	dc.w	((htz_jump00&$7fff)<<8)&$ff00+(htz_jump00&$7fff)>>8
0000031D                            
0000031D                            HTZ_Call02:
0000031D 9906 A0A2 80A5 80A5 80A5+  	dc.b	nC2, $06, nG2, nA2, nRst, nC3, nRst, nC3, nRst, nC3, nRst, nC3
00000329 80A7 A512                  	dc.b	nRst, nD3, nC3, $12
0000032D                            	smpsReturn
0000032D E3                       M 	dc.b	$e3
0000032E                            
0000032E                            HTZ_Call03:
0000032E 990C A506 8096 0CA2 0680+  	dc.b	nC2, $0C, nC3, $06, nRst, nA1, $0C, nA2, $06, nRst, nBb1, $0C
0000033A A306 8098 0CA8 06A7        	dc.b	nBb2, $06, nRst, nB1, $0C, nEb3, $06, nD3
00000342                            	smpsReturn
00000342 E3                       M 	dc.b	$e3
00000343                            
00000343                            HTZ_Call04:
00000343 9906 9912 960C A206 8097+  	dc.b	nC2, $06, nC2, $12, nA1, $0C, nA2, $06, nRst, nBb1, $0C, nBb2
0000034F 0680                       	dc.b	$06, nRst
00000351                            	smpsReturn
00000351 E3                       M 	dc.b	$e3
00000352                            
00000352                            HTZ_Call05:
00000352 970C A306 A397 0CA3 06A3+  	dc.b	nBb1, $0C, nBb2, $06, nBb2, nBb1, $0C, nBb2, $06, nBb2, nBb1, $0C
0000035E A306 A397 0CA3 06A3 9696+  	dc.b	nBb2, $06, nBb2, nBb1, $0C, nBb2, $06, nBb2, nA1, nA1, $12, nA1
0000036A 0CA2 06A2 940C A006 A094+  	dc.b	$0C, nA2, $06, nA2, nG1, $0C, nG2, $06, nG2, nG1, $0C, nG2
00000376 06A0 9980 990C 9B06 809B+  	dc.b	$06, nG2, nC2, nRst, nC2, $0C, nD2, $06, nRst, nD2, $0C, nEb2
00000382 0680 9C0C 9D94 0696        	dc.b	$06, nRst, nEb2, $0C, nE2, nG1, $06, nA1
0000038A                            	smpsReturn
0000038A E3                       M 	dc.b	$e3
0000038B                            
0000038B                            ; DAC Data
0000038B                            HTZ_DAC:
0000038B 8124 810C 8130 8106 811E+  	dc.b	dKick, $24, dKick, $0C, dKick, $30, dKick, $06, dKick, $1E, dKick, $0C
00000397 8118 8281 2481 0C81 3081+  	dc.b	dKick, $18, dSnare, dKick, $24, dKick, $0C, dKick, $30, dKick, $06, dKick
000003A3 1E81 0C81 1882 0C82 0682   	dc.b	$1E, dKick, $0C, dKick, $18, dSnare, $0C, dSnare, $06, dSnare
000003AD                            	smpsCall            HTZ_Call00
000003AD F8                       M 	dc.b	$f8
000003AE 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003B0                            	smpsCall            HTZ_Call01
000003B0 F8                       M 	dc.b	$f8
000003B1 0000                     M 	dc.w	((htz_call01&$7fff)<<8)&$ff00+(htz_call01&$7fff)>>8
000003B3 82                         	dc.b	dSnare
000003B4                            	smpsCall            HTZ_Call00
000003B4 F8                       M 	dc.b	$f8
000003B5 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003B7                            	smpsCall            HTZ_Call01
000003B7 F8                       M 	dc.b	$f8
000003B8 0000                     M 	dc.w	((htz_call01&$7fff)<<8)&$ff00+(htz_call01&$7fff)>>8
000003BA 820C 8206 82               	dc.b	dSnare, $0C, dSnare, $06, dSnare
000003BF                            	smpsCall            HTZ_Call00
000003BF F8                       M 	dc.b	$f8
000003C0 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003C2                            	smpsCall            HTZ_Call01
000003C2 F8                       M 	dc.b	$f8
000003C3 0000                     M 	dc.w	((htz_call01&$7fff)<<8)&$ff00+(htz_call01&$7fff)>>8
000003C5 820C 8206 82               	dc.b	dSnare, $0C, dSnare, $06, dSnare
000003CA                            	smpsCall            HTZ_Call00
000003CA F8                       M 	dc.b	$f8
000003CB 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003CD 8106 8112 820C 8181 8282+  	dc.b	dKick, $06, dKick, $12, dSnare, $0C, dKick, dKick, dSnare, dSnare, dSnare, $06
000003D9 82                         	dc.b	dSnare
000003DA                            	smpsCall            HTZ_Call00
000003DA F8                       M 	dc.b	$f8
000003DB 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003DD                            	smpsCall            HTZ_Call01
000003DD F8                       M 	dc.b	$f8
000003DE 0000                     M 	dc.w	((htz_call01&$7fff)<<8)&$ff00+(htz_call01&$7fff)>>8
000003E0 820C 8206 82               	dc.b	dSnare, $0C, dSnare, $06, dSnare
000003E5                            	smpsCall            HTZ_Call00
000003E5 F8                       M 	dc.b	$f8
000003E6 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003E8                            	smpsCall            HTZ_Call01
000003E8 F8                       M 	dc.b	$f8
000003E9 0000                     M 	dc.w	((htz_call01&$7fff)<<8)&$ff00+(htz_call01&$7fff)>>8
000003EB 82                         	dc.b	dSnare
000003EC                            	smpsCall            HTZ_Call00
000003EC F8                       M 	dc.b	$f8
000003ED 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003EF                            	smpsCall            HTZ_Call01
000003EF F8                       M 	dc.b	$f8
000003F0 0000                     M 	dc.w	((htz_call01&$7fff)<<8)&$ff00+(htz_call01&$7fff)>>8
000003F2 820C 8206 82               	dc.b	dSnare, $0C, dSnare, $06, dSnare
000003F7                            	smpsCall            HTZ_Call00
000003F7 F8                       M 	dc.b	$f8
000003F8 0000                     M 	dc.w	((htz_call00&$7fff)<<8)&$ff00+(htz_call00&$7fff)>>8
000003FA 8206 810C 8106 810C 8206+  	dc.b	dSnare, $06, dKick, $0C, dKick, $06, dKick, $0C, dSnare, $06, dSnare, $0C
00000406 8181 0681 0C82 0682        	dc.b	dKick, dKick, $06, dKick, $0C, dSnare, $06, dSnare
0000040E                            	smpsJump            HTZ_DAC
0000040E F6                       M 	dc.b	$f6
0000040F 0000                     M 	dc.w	((htz_dac&$7fff)<<8)&$ff00+(htz_dac&$7fff)>>8
00000411                            
00000411                            HTZ_Call00:
00000411 8118 820C 8181 1882        	dc.b	dKick, $18, dSnare, $0C, dKick, dKick, $18, dSnare
00000419                            	smpsReturn
00000419 E3                       M 	dc.b	$e3
0000041A                            
0000041A                            HTZ_Call01:
0000041A 8106 8112 820C 8181 18     	dc.b	dKick, $06, dKick, $12, dSnare, $0C, dKick, dKick, $18
00000423                            	smpsReturn
00000423 E3                       M 	dc.b	$e3
00000424                            
00000424                            HTZ_Voices:
00000424                            ;	Voice $00
00000424                            ;	$08
00000424                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00000424                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $13, $84
00000424                            	smpsVcAlgorithm     $00
00000424 =00000000                M vcalgorithm	=	val
00000424                            	smpsVcFeedback      $01
00000424 =00000001                M vcfeedback	=	val
00000424                            	smpsVcUnusedBits    $00
00000424 =00000000                M vcunusedbits	=	val
00000424 =00000000                M vcd1r1unk	=	0
00000424 =00000000                M vcd1r2unk	=	0
00000424 =00000000                M vcd1r3unk	=	0
00000424 =00000000                M vcd1r4unk	=	0
00000424                            	smpsVcDetune        $00, $03, $07, $00
00000424 =00000000                M vcdt1	=	op1
00000424 =00000003                M vcdt2	=	op2
00000424 =00000007                M vcdt3	=	op3
00000424 =00000000                M vcdt4	=	op4
00000424                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000424 =00000000                M vccf1	=	op1
00000424 =00000000                M vccf2	=	op2
00000424 =00000000                M vccf3	=	op3
00000424 =00000009                M vccf4	=	op4
00000424                            	smpsVcRateScale     $01, $01, $00, $00
00000424 =00000001                M vcrs1	=	op1
00000424 =00000001                M vcrs2	=	op2
00000424 =00000000                M vcrs3	=	op3
00000424 =00000000                M vcrs4	=	op4
00000424                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000424 =0000001F                M vcar1	=	op1
00000424 =0000001F                M vcar2	=	op2
00000424 =0000001F                M vcar3	=	op3
00000424 =0000001F                M vcar4	=	op4
00000424                            	smpsVcAmpMod        $00, $00, $00, $00
00000424 =00000000                M vcam1	=	op1<<7
00000424 =00000000                M vcam2	=	op2<<7
00000424 =00000000                M vcam3	=	op3<<7
00000424 =00000000                M vcam4	=	op4<<7
00000424                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00000424 =0000000A                M vcd1r1	=	op1
00000424 =0000000A                M vcd1r2	=	op2
00000424 =0000000E                M vcd1r3	=	op3
00000424 =00000012                M vcd1r4	=	op4
00000424                            	smpsVcDecayRate2    $03, $04, $04, $00
00000424 =00000003                M vcd2r1	=	op1
00000424 =00000004                M vcd2r2	=	op2
00000424 =00000004                M vcd2r3	=	op3
00000424 =00000000                M vcd2r4	=	op4
00000424                            	smpsVcDecayLevel    $02, $02, $02, $02
00000424 =00000002                M vcdl1	=	op1
00000424 =00000002                M vcdl2	=	op2
00000424 =00000002                M vcdl3	=	op3
00000424 =00000002                M vcdl4	=	op4
00000424                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000424 =0000000F                M vcrr1	=	op1
00000424 =0000000F                M vcrr2	=	op2
00000424 =0000000F                M vcrr3	=	op3
00000424 =0000000F                M vcrr4	=	op4
00000424                            	smpsVcTotalLevel    $84, $13, $30, $25
00000424 =00000084                M vctl1	=	op1
00000424 =00000013                M vctl2	=	op2
00000424 =00000030                M vctl3	=	op3
00000424 =00000025                M vctl4	=	op4
00000424 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000425 =00000000                M vctlmask4	=	0
00000425 =00000000                M vctlmask3	=	0
00000425 =00000000                M vctlmask2	=	0
00000425 =00000000                M vctlmask1	=	0
00000425 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000429 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000042D 120A 0E0A                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000431 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000435 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000439 2513 3084                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000043D                            
0000043D                            ;	Voice $01
0000043D                            ;	$38
0000043D                            ;	$3A, $0A, $11, $02, 	$D4, $14, $50, $0E, 	$05, $08, $02, $88
0000043D                            ;	$00, $00, $00, $00, 	$99, $09, $09, $1A, 	$2D, $2C, $19, $86
0000043D                            	smpsVcAlgorithm     $00
0000043D =00000000                M vcalgorithm	=	val
0000043D                            	smpsVcFeedback      $07
0000043D =00000007                M vcfeedback	=	val
0000043D                            	smpsVcUnusedBits    $00
0000043D =00000000                M vcunusedbits	=	val
0000043D =00000000                M vcd1r1unk	=	0
0000043D =00000000                M vcd1r2unk	=	0
0000043D =00000000                M vcd1r3unk	=	0
0000043D =00000000                M vcd1r4unk	=	0
0000043D                            	smpsVcDetune        $00, $01, $00, $03
0000043D =00000000                M vcdt1	=	op1
0000043D =00000001                M vcdt2	=	op2
0000043D =00000000                M vcdt3	=	op3
0000043D =00000003                M vcdt4	=	op4
0000043D                            	smpsVcCoarseFreq    $02, $01, $0A, $0A
0000043D =00000002                M vccf1	=	op1
0000043D =00000001                M vccf2	=	op2
0000043D =0000000A                M vccf3	=	op3
0000043D =0000000A                M vccf4	=	op4
0000043D                            	smpsVcRateScale     $00, $01, $00, $03
0000043D =00000000                M vcrs1	=	op1
0000043D =00000001                M vcrs2	=	op2
0000043D =00000000                M vcrs3	=	op3
0000043D =00000003                M vcrs4	=	op4
0000043D                            	smpsVcAttackRate    $0E, $10, $14, $14
0000043D =0000000E                M vcar1	=	op1
0000043D =00000010                M vcar2	=	op2
0000043D =00000014                M vcar3	=	op3
0000043D =00000014                M vcar4	=	op4
0000043D                            	smpsVcAmpMod        $01, $00, $00, $00
0000043D =00000080                M vcam1	=	op1<<7
0000043D =00000000                M vcam2	=	op2<<7
0000043D =00000000                M vcam3	=	op3<<7
0000043D =00000000                M vcam4	=	op4<<7
0000043D                            	smpsVcDecayRate1    $08, $02, $08, $05
0000043D =00000008                M vcd1r1	=	op1
0000043D =00000002                M vcd1r2	=	op2
0000043D =00000008                M vcd1r3	=	op3
0000043D =00000005                M vcd1r4	=	op4
0000043D                            	smpsVcDecayRate2    $00, $00, $00, $00
0000043D =00000000                M vcd2r1	=	op1
0000043D =00000000                M vcd2r2	=	op2
0000043D =00000000                M vcd2r3	=	op3
0000043D =00000000                M vcd2r4	=	op4
0000043D                            	smpsVcDecayLevel    $01, $00, $00, $09
0000043D =00000001                M vcdl1	=	op1
0000043D =00000000                M vcdl2	=	op2
0000043D =00000000                M vcdl3	=	op3
0000043D =00000009                M vcdl4	=	op4
0000043D                            	smpsVcReleaseRate   $0A, $09, $09, $09
0000043D =0000000A                M vcrr1	=	op1
0000043D =00000009                M vcrr2	=	op2
0000043D =00000009                M vcrr3	=	op3
0000043D =00000009                M vcrr4	=	op4
0000043D                            	smpsVcTotalLevel    $86, $19, $2C, $2D
0000043D =00000086                M vctl1	=	op1
0000043D =00000019                M vctl2	=	op2
0000043D =0000002C                M vctl3	=	op3
0000043D =0000002D                M vctl4	=	op4
0000043D 38                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000043E =00000000                M vctlmask4	=	0
0000043E =00000000                M vctlmask3	=	0
0000043E =00000000                M vctlmask2	=	0
0000043E =00000000                M vctlmask1	=	0
0000043E 3A11 0A02                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000442 D450 140E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000446 0502 0888                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000044A 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000044E 9909 091A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000452 2D19 2C86                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000456                            
00000456                            ;	Voice $02
00000456                            ;	$0D
00000456                            ;	$32, $04, $02, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
00000456                            ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $86, $8B, $93
00000456                            	smpsVcAlgorithm     $05
00000456 =00000005                M vcalgorithm	=	val
00000456                            	smpsVcFeedback      $01
00000456 =00000001                M vcfeedback	=	val
00000456                            	smpsVcUnusedBits    $00
00000456 =00000000                M vcunusedbits	=	val
00000456 =00000000                M vcd1r1unk	=	0
00000456 =00000000                M vcd1r2unk	=	0
00000456 =00000000                M vcd1r3unk	=	0
00000456 =00000000                M vcd1r4unk	=	0
00000456                            	smpsVcDetune        $00, $00, $00, $03
00000456 =00000000                M vcdt1	=	op1
00000456 =00000000                M vcdt2	=	op2
00000456 =00000000                M vcdt3	=	op3
00000456 =00000003                M vcdt4	=	op4
00000456                            	smpsVcCoarseFreq    $01, $02, $04, $02
00000456 =00000001                M vccf1	=	op1
00000456 =00000002                M vccf2	=	op2
00000456 =00000004                M vccf3	=	op3
00000456 =00000002                M vccf4	=	op4
00000456                            	smpsVcRateScale     $00, $00, $00, $00
00000456 =00000000                M vcrs1	=	op1
00000456 =00000000                M vcrs2	=	op2
00000456 =00000000                M vcrs3	=	op3
00000456 =00000000                M vcrs4	=	op4
00000456                            	smpsVcAttackRate    $19, $19, $19, $1F
00000456 =00000019                M vcar1	=	op1
00000456 =00000019                M vcar2	=	op2
00000456 =00000019                M vcar3	=	op3
00000456 =0000001F                M vcar4	=	op4
00000456                            	smpsVcAmpMod        $00, $00, $00, $00
00000456 =00000000                M vcam1	=	op1<<7
00000456 =00000000                M vcam2	=	op2<<7
00000456 =00000000                M vcam3	=	op3<<7
00000456 =00000000                M vcam4	=	op4<<7
00000456                            	smpsVcDecayRate1    $05, $05, $05, $0A
00000456 =00000005                M vcd1r1	=	op1
00000456 =00000005                M vcd1r2	=	op2
00000456 =00000005                M vcd1r3	=	op3
00000456 =0000000A                M vcd1r4	=	op4
00000456                            	smpsVcDecayRate2    $02, $02, $02, $00
00000456 =00000002                M vcd2r1	=	op1
00000456 =00000002                M vcd2r2	=	op2
00000456 =00000002                M vcd2r3	=	op3
00000456 =00000000                M vcd2r4	=	op4
00000456                            	smpsVcDecayLevel    $02, $02, $02, $03
00000456 =00000002                M vcdl1	=	op1
00000456 =00000002                M vcdl2	=	op2
00000456 =00000002                M vcdl3	=	op3
00000456 =00000003                M vcdl4	=	op4
00000456                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000456 =0000000F                M vcrr1	=	op1
00000456 =0000000F                M vcrr2	=	op2
00000456 =0000000F                M vcrr3	=	op3
00000456 =0000000F                M vcrr4	=	op4
00000456                            	smpsVcTotalLevel    $93, $8B, $86, $28
00000456 =00000093                M vctl1	=	op1
00000456 =0000008B                M vctl2	=	op2
00000456 =00000086                M vctl3	=	op3
00000456 =00000028                M vctl4	=	op4
00000456 0D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000457 =00000000                M vctlmask4	=	0
00000457 =00000000                M vctlmask3	=	0
00000457 =00000000                M vctlmask2	=	0
00000457 =00000000                M vctlmask1	=	0
00000457 3202 0401                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000045B 1F19 1919                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000045F 0A05 0505                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
00000463 0002 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000467 3F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000046B 288B 8693                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000046F                            
0000046F                            ;	Voice $03
0000046F                            ;	$3A
0000046F                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0000046F                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $86
0000046F                            	smpsVcAlgorithm     $02
0000046F =00000002                M vcalgorithm	=	val
0000046F                            	smpsVcFeedback      $07
0000046F =00000007                M vcfeedback	=	val
0000046F                            	smpsVcUnusedBits    $00
0000046F =00000000                M vcunusedbits	=	val
0000046F =00000000                M vcd1r1unk	=	0
0000046F =00000000                M vcd1r2unk	=	0
0000046F =00000000                M vcd1r3unk	=	0
0000046F =00000000                M vcd1r4unk	=	0
0000046F                            	smpsVcDetune        $00, $00, $00, $00
0000046F =00000000                M vcdt1	=	op1
0000046F =00000000                M vcdt2	=	op2
0000046F =00000000                M vcdt3	=	op3
0000046F =00000000                M vcdt4	=	op4
0000046F                            	smpsVcCoarseFreq    $01, $01, $07, $01
0000046F =00000001                M vccf1	=	op1
0000046F =00000001                M vccf2	=	op2
0000046F =00000007                M vccf3	=	op3
0000046F =00000001                M vccf4	=	op4
0000046F                            	smpsVcRateScale     $01, $02, $02, $02
0000046F =00000001                M vcrs1	=	op1
0000046F =00000002                M vcrs2	=	op2
0000046F =00000002                M vcrs3	=	op3
0000046F =00000002                M vcrs4	=	op4
0000046F                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0000046F =00000013                M vcar1	=	op1
0000046F =0000000D                M vcar2	=	op2
0000046F =0000000E                M vcar3	=	op3
0000046F =0000000E                M vcar4	=	op4
0000046F                            	smpsVcAmpMod        $00, $00, $00, $00
0000046F =00000000                M vcam1	=	op1<<7
0000046F =00000000                M vcam2	=	op2<<7
0000046F =00000000                M vcam3	=	op3<<7
0000046F =00000000                M vcam4	=	op4<<7
0000046F                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0000046F =00000003                M vcd1r1	=	op1
0000046F =0000000E                M vcd1r2	=	op2
0000046F =0000000E                M vcd1r3	=	op3
0000046F =0000000E                M vcd1r4	=	op4
0000046F                            	smpsVcDecayRate2    $00, $00, $00, $00
0000046F =00000000                M vcd2r1	=	op1
0000046F =00000000                M vcd2r2	=	op2
0000046F =00000000                M vcd2r3	=	op3
0000046F =00000000                M vcd2r4	=	op4
0000046F                            	smpsVcDecayLevel    $00, $01, $0F, $01
0000046F =00000000                M vcdl1	=	op1
0000046F =00000001                M vcdl2	=	op2
0000046F =0000000F                M vcdl3	=	op3
0000046F =00000001                M vcdl4	=	op4
0000046F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000046F =0000000F                M vcrr1	=	op1
0000046F =0000000F                M vcrr2	=	op2
0000046F =0000000F                M vcrr3	=	op3
0000046F =0000000F                M vcrr4	=	op4
0000046F                            	smpsVcTotalLevel    $86, $27, $28, $17
0000046F =00000086                M vctl1	=	op1
0000046F =00000027                M vctl2	=	op2
0000046F =00000028                M vctl3	=	op3
0000046F =00000017                M vctl4	=	op4
0000046F 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000470 =00000000                M vctlmask4	=	0
00000470 =00000000                M vctlmask3	=	0
00000470 =00000000                M vctlmask2	=	0
00000470 =00000000                M vctlmask1	=	0
00000470 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000474 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000478 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000047C 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000480 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000484 1727 2886                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000488                            
00000488                          M 	pops
00000000                            		inc_music	TitleScreen
00000000                          M 	pushs
00000000                          M music_2587:	section	org($1380),file("sound/music/compressed/titlescreen.unc"),over(header)
00000000                          M 	include	"sound/music/titlescreen.asm"
00000000                            Title_screen_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000002                M sourcedriver	=	ver
00000000 =00000000                M sourcesmps2asm	=	0
00000000 =00000000                M songstart	=	offset(*)
00000000                            	smpsHeaderVoice     Title_screen_Voices
00000000 0000                     M 	dc.w	((title_screen_voices&$7fff)<<8)&$ff00+(title_screen_voices&$7fff)>>8
00000002                            	smpsHeaderChan      $06, $03
00000002 0603                     M 	dc.b	$06,$03
00000004                            	smpsHeaderTempo     $01, $CD
00000004 01                       M 	dc.b	div
00000005                          M 	convertmaintempomod	$cd
00000005 CD                       M 	dc.b	$cd
00000006                            
00000006                            	smpsHeaderDAC       Title_screen_DAC
00000006                          M 	checkedchannelpointer	title_screen_dac
00000006 0000                     M 	dc.w	((title_screen_dac&$7fff)<<8)&$ff00+(title_screen_dac&$7fff)>>8
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        Title_screen_FM1,	$F4, $0C
0000000A                          M 	checkedchannelpointer	title_screen_fm1
0000000A 0000                     M 	dc.w	((title_screen_fm1&$7fff)<<8)&$ff00+(title_screen_fm1&$7fff)>>8
0000000C F40C                     M 	dc.b	$f4,$0c
0000000E                            	smpsHeaderFM        Title_screen_FM2,	$F4, $0C
0000000E                          M 	checkedchannelpointer	title_screen_fm2
0000000E 0000                     M 	dc.w	((title_screen_fm2&$7fff)<<8)&$ff00+(title_screen_fm2&$7fff)>>8
00000010 F40C                     M 	dc.b	$f4,$0c
00000012                            	smpsHeaderFM        Title_screen_FM3,	$F4, $0B
00000012                          M 	checkedchannelpointer	title_screen_fm3
00000012 0000                     M 	dc.w	((title_screen_fm3&$7fff)<<8)&$ff00+(title_screen_fm3&$7fff)>>8
00000014 F40B                     M 	dc.b	$f4,$0b
00000016                            	smpsHeaderFM        Title_screen_FM4,	$F4, $0B
00000016                          M 	checkedchannelpointer	title_screen_fm4
00000016 0000                     M 	dc.w	((title_screen_fm4&$7fff)<<8)&$ff00+(title_screen_fm4&$7fff)>>8
00000018 F40B                     M 	dc.b	$f4,$0b
0000001A                            	smpsHeaderFM        Title_screen_FM5,	$F4, $0E
0000001A                          M 	checkedchannelpointer	title_screen_fm5
0000001A 0000                     M 	dc.w	((title_screen_fm5&$7fff)<<8)&$ff00+(title_screen_fm5&$7fff)>>8
0000001C F40E                     M 	dc.b	$f4,$0e
0000001E                            	smpsHeaderPSG       Title_screen_PSG1,	$00, $00, $00, fTone_03
0000001E                          M 	checkedchannelpointer	title_screen_psg1
0000001E 0000                     M 	dc.w	((title_screen_psg1&$7fff)<<8)&$ff00+(title_screen_psg1&$7fff)>>8
00000020                          M 	psgpitchconvert	$00
00000020 00                       M 	dc.b	$00
00000021 00                       M 	dc.b	$00
00000022 00                       M 	dc.b	$00
00000023 03                       M 	dc.b	ftone_03
00000024                            	smpsHeaderPSG       Title_screen_PSG2,	$00, $02, $00, fTone_03
00000024                          M 	checkedchannelpointer	title_screen_psg2
00000024 0000                     M 	dc.w	((title_screen_psg2&$7fff)<<8)&$ff00+(title_screen_psg2&$7fff)>>8
00000026                          M 	psgpitchconvert	$00
00000026 00                       M 	dc.b	$00
00000027 02                       M 	dc.b	$02
00000028 00                       M 	dc.b	$00
00000029 03                       M 	dc.b	ftone_03
0000002A                            	smpsHeaderPSG       Title_screen_PSG3,	$00, $03, $00, fTone_04
0000002A                          M 	checkedchannelpointer	title_screen_psg3
0000002A 0000                     M 	dc.w	((title_screen_psg3&$7fff)<<8)&$ff00+(title_screen_psg3&$7fff)>>8
0000002C                          M 	psgpitchconvert	$00
0000002C 00                       M 	dc.b	$00
0000002D 03                       M 	dc.b	$03
0000002E 00                       M 	dc.b	$00
0000002F 04                       M 	dc.b	ftone_04
00000030                            
00000030                            ; FM5 Data
00000030                            Title_screen_FM5:
00000030                            	smpsAlterNote       $03
00000030                          M 	smpsdetune	$03
00000030 E103                     M 	dc.b	$e1,$03
00000032                            
00000032                            ; FM1 Data
00000032                            Title_screen_FM1:
00000032                            	smpsSetvoice        $00
00000032                          M 	smpsfmvoice	$00
00000032 EF00                     M 	dc.b	$ef,$00
00000034 803C CA15 8003 CA06 80CB+  	dc.b	nRst, $3C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
00000040 03C8 1880 06CA 80CA 80CA+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, nRst, nCs6, nRst, nCs6, nRst, nA5
0000004C 80C4 0F80 03C8 0C80 12C6+  	dc.b	nRst, nG5, $0F, nRst, $03, nB5, $0C, nRst, $12, nA5, $06, nRst
00000058 CA80 D280 CD0C 8006 D112+  	dc.b	nCs6, nRst, nA6, nRst, nE6, $0C, nRst, $06, nAb6, $12, nA6, $06
00000064 8072                       	dc.b	nRst, $72
00000066                            	smpsStop
00000066 F2                       M 	dc.b	$f2
00000067                            
00000067                            ; FM2 Data
00000067                            Title_screen_FM2:
00000067                            	smpsSetvoice        $03
00000067                          M 	smpsfmvoice	$03
00000067 EF03                     M 	dc.b	$ef,$03
00000069                            	smpsNop             $01
00000069 E201                     M 	dc.b	$e2,$01
0000006B 8030 AE06 80AE 80A9 80A9+  	dc.b	nRst, $30, nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3
00000077 12B0 B30C AE06 80AE 80A9+  	dc.b	$12, nB3, nD4, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3
00000083 80B3 12B2 B00C 80AE 80AE+  	dc.b	nRst, nD4, $12, nCs4, nB3, $0C, nRst, nA3, nRst, nA3, nRst, $06
0000008F AD12 AE06 80               	dc.b	nAb3, $12, nA3, $06, nRst
00000094                            	smpsSetvoice        $01
00000094                          M 	smpsfmvoice	$01
00000094 EF01                     M 	dc.b	$ef,$01
00000096                            	smpsAlterVol        $02
00000096 E602                     M 	dc.b	$e6,$02
00000098 A26C                       	dc.b	nA2, $6C
0000009A                            	smpsNop             $01
0000009A E201                     M 	dc.b	$e2,$01
0000009C                            	smpsStop
0000009C F2                       M 	dc.b	$f2
0000009D                            
0000009D                            ; FM3 Data
0000009D                            Title_screen_FM3:
0000009D                            	smpsSetvoice        $02
0000009D                          M 	smpsfmvoice	$02
0000009D EF02                     M 	dc.b	$ef,$02
0000009F 8030 CD06 80CD 80CA 80CA+  	dc.b	nRst, $30, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6
000000AB 0F80 03CB 1880 06CD 80CD+  	dc.b	$0F, nRst, $03, nD6, $18, nRst, $06, nE6, nRst, nE6, nRst, nCs6
000000B7 80CA 80D0 0F80 03D0 1880+  	dc.b	nRst, nCs6, nRst, nG6, $0F, nRst, $03, nG6, $18, nRst, $06, nE6
000000C3 0C80 CD80 8006 CC12 CD0C   	dc.b	$0C, nRst, nE6, nRst, nRst, $06, nEb6, $12, nE6, $0C
000000CD                            	smpsAlterVol        $FC
000000CD E6FC                     M 	dc.b	$e6,$fc
000000CF                            	smpsSetvoice        $01
000000CF                          M 	smpsfmvoice	$01
000000CF EF01                     M 	dc.b	$ef,$01
000000D1                            	smpsAlterNote       $03
000000D1                          M 	smpsdetune	$03
000000D1 E103                     M 	dc.b	$e1,$03
000000D3 A26C                       	dc.b	nA2, $6C
000000D5                            	smpsStop
000000D5 F2                       M 	dc.b	$f2
000000D6                            
000000D6                            ; FM4 Data
000000D6                            Title_screen_FM4:
000000D6                            	smpsSetvoice        $02
000000D6                          M 	smpsfmvoice	$02
000000D6 EF02                     M 	dc.b	$ef,$02
000000D8 8030 CA06 80CA 80C6 80C6+  	dc.b	nRst, $30, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5
000000E4 0F80 03C8 1880 06CA 80CA+  	dc.b	$0F, nRst, $03, nB5, $18, nRst, $06, nCs6, nRst, nCs6, nRst, nA5
000000F0 80C6 80CB 0F80 03CB 1880+  	dc.b	nRst, nA5, nRst, nD6, $0F, nRst, $03, nD6, $18, nRst, $06, nCs6
000000FC 0C80 CA80 8006 C912 CA0C   	dc.b	$0C, nRst, nCs6, nRst, nRst, $06, nC6, $12, nCs6, $0C
00000106                            	smpsAlterVol        $FD
00000106 E6FD                     M 	dc.b	$e6,$fd
00000108                            	smpsSetvoice        $01
00000108                          M 	smpsfmvoice	$01
00000108 EF01                     M 	dc.b	$ef,$01
0000010A                            	smpsModSet          $00, $01, $06, $04
0000010A F0                       M 	dc.b	$f0
0000010B 0001 0604                M 	dc.b	$00,$01,$06,$04
0000010F A26C                       	dc.b	nA2, $6C
00000111                            	smpsStop
00000111 F2                       M 	dc.b	$f2
00000112                            
00000112                            ; PSG3 Data
00000112                            Title_screen_PSG3:
00000112                            	smpsPSGform         $E7
00000112 F3E7                     M 	dc.b	$f3,$e7
00000114 8030                       	dc.b	nRst, $30
00000116                            
00000116                            Title_screen_Loop02:
00000116                            	smpsNoteFill        $03
00000116 E803                     M 	dc.b	$e8,$03
00000118 C60C                       	dc.b	nMaxPSG, $0C
0000011A                            	smpsNoteFill        $0C
0000011A E80C                     M 	dc.b	$e8,$0c
0000011C 0C                         	dc.b	$0C
0000011D                            	smpsNoteFill        $03
0000011D E803                     M 	dc.b	$e8,$03
0000011F 0C                         	dc.b	$0C
00000120                            	smpsNoteFill        $0C
00000120 E80C                     M 	dc.b	$e8,$0c
00000122 0C                         	dc.b	$0C
00000123                            	smpsLoop            $00, $05, Title_screen_Loop02
00000123 F7                       M 	dc.b	$f7
00000124 0005                     M 	dc.b	index,loops
00000126 0000                     M 	dc.w	((title_screen_loop02&$7fff)<<8)&$ff00+(title_screen_loop02&$7fff)>>8
00000128                            	smpsNoteFill        $03
00000128 E803                     M 	dc.b	$e8,$03
0000012A 06                         	dc.b	$06
0000012B                            	smpsNoteFill        $0E
0000012B E80E                     M 	dc.b	$e8,$0e
0000012D 12                         	dc.b	$12
0000012E                            	smpsNoteFill        $03
0000012E E803                     M 	dc.b	$e8,$03
00000130 0C                         	dc.b	$0C
00000131                            	smpsNoteFill        $0F
00000131 E80F                     M 	dc.b	$e8,$0f
00000133 0C                         	dc.b	$0C
00000134                            	smpsStop
00000134 F2                       M 	dc.b	$f2
00000135                            
00000135                            ; DAC Data
00000135                            Title_screen_DAC:
00000135 810C 8282 8208 8204 810C+  	dc.b	dKick, $0C, dSnare, dSnare, dSnare, $08, dSnare, $04, dKick, $0C, dSnare, dKick
00000141 8281 8281 8281 8281 8281+  	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
0000014D 0680 0282 8282 0982 0381+  	dc.b	$06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare, $03, dKick, $0C, dSnare
00000159 8204 8282 8280 8082 0682+  	dc.b	dSnare, $04, dSnare, dSnare, dSnare, nRst, nRst, dSnare, $06, dSnare, $12, dSnare
00000165 0C81                       	dc.b	$0C, dKick
00000167                            	smpsStop
00000167 F2                       M 	dc.b	$f2
00000168                            
00000168                            ; PSG2 Data
00000168                            Title_screen_PSG2:
00000168 8003                       	dc.b	nRst, $03
0000016A                            
0000016A                            ; PSG1 Data
0000016A                            Title_screen_PSG1:
0000016A 8030                       	dc.b	nRst, $30
0000016C                            	smpsLoop            $00, $06, Title_screen_PSG1
0000016C F7                       M 	dc.b	$f7
0000016D 0006                     M 	dc.b	index,loops
0000016F 0000                     M 	dc.w	((title_screen_psg1&$7fff)<<8)&$ff00+(title_screen_psg1&$7fff)>>8
00000171 8020                       	dc.b	nRst, $20
00000173                            
00000173                            Title_screen_Loop00:
00000173 BF03 C1C3                  	dc.b	nD5, $03, nE5, nFs5
00000177                            	smpsPSGAlterVol     $01
00000177 EC01                     M 	dc.b	$ec,$01
00000179                            	smpsAlterPitch      $FF
00000179                          M 	smpschangetransposition	$ff
00000179 E9FF                     M 	dc.b	$e9,$ff
0000017B                            	smpsLoop            $00, $05, Title_screen_Loop00
0000017B F7                       M 	dc.b	$f7
0000017C 0005                     M 	dc.b	index,loops
0000017E 0000                     M 	dc.w	((title_screen_loop00&$7fff)<<8)&$ff00+(title_screen_loop00&$7fff)>>8
00000180                            
00000180                            Title_screen_Loop01:
00000180 BF03 C1C3                  	dc.b	nD5, $03, nE5, nFs5
00000184                            	smpsPSGAlterVol     $01
00000184 EC01                     M 	dc.b	$ec,$01
00000186                            	smpsAlterPitch      $01
00000186                          M 	smpschangetransposition	$01
00000186 E901                     M 	dc.b	$e9,$01
00000188                            	smpsLoop            $00, $07, Title_screen_Loop01
00000188 F7                       M 	dc.b	$f7
00000189 0007                     M 	dc.b	index,loops
0000018B 0000                     M 	dc.w	((title_screen_loop01&$7fff)<<8)&$ff00+(title_screen_loop01&$7fff)>>8
0000018D                            	smpsStop
0000018D F2                       M 	dc.b	$f2
0000018E                            
0000018E                            Title_screen_Voices:
0000018E                            ;	Voice $00
0000018E                            ;	$3A
0000018E                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
0000018E                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
0000018E                            	smpsVcAlgorithm     $02
0000018E =00000002                M vcalgorithm	=	val
0000018E                            	smpsVcFeedback      $07
0000018E =00000007                M vcfeedback	=	val
0000018E                            	smpsVcUnusedBits    $00
0000018E =00000000                M vcunusedbits	=	val
0000018E =00000000                M vcd1r1unk	=	0
0000018E =00000000                M vcd1r2unk	=	0
0000018E =00000000                M vcd1r3unk	=	0
0000018E =00000000                M vcd1r4unk	=	0
0000018E                            	smpsVcDetune        $00, $05, $00, $05
0000018E =00000000                M vcdt1	=	op1
0000018E =00000005                M vcdt2	=	op2
0000018E =00000000                M vcdt3	=	op3
0000018E =00000005                M vcdt4	=	op4
0000018E                            	smpsVcCoarseFreq    $02, $01, $08, $01
0000018E =00000002                M vccf1	=	op1
0000018E =00000001                M vccf2	=	op2
0000018E =00000008                M vccf3	=	op3
0000018E =00000001                M vccf4	=	op4
0000018E                            	smpsVcRateScale     $00, $00, $00, $00
0000018E =00000000                M vcrs1	=	op1
0000018E =00000000                M vcrs2	=	op2
0000018E =00000000                M vcrs3	=	op3
0000018E =00000000                M vcrs4	=	op4
0000018E                            	smpsVcAttackRate    $10, $1E, $1E, $1E
0000018E =00000010                M vcar1	=	op1
0000018E =0000001E                M vcar2	=	op2
0000018E =0000001E                M vcar3	=	op3
0000018E =0000001E                M vcar4	=	op4
0000018E                            	smpsVcAmpMod        $00, $00, $00, $00
0000018E =00000000                M vcam1	=	op1<<5
0000018E =00000000                M vcam2	=	op2<<5
0000018E =00000000                M vcam3	=	op3<<5
0000018E =00000000                M vcam4	=	op4<<5
0000018E                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
0000018E =0000000F                M vcd1r1	=	op1
0000018E =0000001F                M vcd1r2	=	op2
0000018E =0000001F                M vcd1r3	=	op3
0000018E =0000001F                M vcd1r4	=	op4
0000018E                            	smpsVcDecayRate2    $02, $00, $00, $00
0000018E =00000002                M vcd2r1	=	op1
0000018E =00000000                M vcd2r2	=	op2
0000018E =00000000                M vcd2r3	=	op3
0000018E =00000000                M vcd2r4	=	op4
0000018E                            	smpsVcDecayLevel    $01, $00, $00, $00
0000018E =00000001                M vcdl1	=	op1
0000018E =00000000                M vcdl2	=	op2
0000018E =00000000                M vcdl3	=	op3
0000018E =00000000                M vcdl4	=	op4
0000018E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000018E =0000000F                M vcrr1	=	op1
0000018E =0000000F                M vcrr2	=	op2
0000018E =0000000F                M vcrr3	=	op3
0000018E =0000000F                M vcrr4	=	op4
0000018E                            	smpsVcTotalLevel    $01, $22, $24, $18
0000018E =00000001                M vctl1	=	op1
0000018E =00000022                M vctl2	=	op2
0000018E =00000024                M vctl3	=	op3
0000018E =00000018                M vctl4	=	op4
0000018E 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000018F =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000018F =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000018F =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000018F =00000080                M vctlmask1	=	$80
0000018F 5151 0802                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000193 1E1E 1E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000197 1F1F 1F0F                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
0000019B 0000 0002                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000019F 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001A3 1822 2481                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001A7                            
000001A7                            ;	Voice $01
000001A7                            ;	$20
000001A7                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000001A7                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000001A7                            	smpsVcAlgorithm     $00
000001A7 =00000000                M vcalgorithm	=	val
000001A7                            	smpsVcFeedback      $04
000001A7 =00000004                M vcfeedback	=	val
000001A7                            	smpsVcUnusedBits    $00
000001A7 =00000000                M vcunusedbits	=	val
000001A7 =00000000                M vcd1r1unk	=	0
000001A7 =00000000                M vcd1r2unk	=	0
000001A7 =00000000                M vcd1r3unk	=	0
000001A7 =00000000                M vcd1r4unk	=	0
000001A7                            	smpsVcDetune        $03, $03, $03, $03
000001A7 =00000003                M vcdt1	=	op1
000001A7 =00000003                M vcdt2	=	op2
000001A7 =00000003                M vcdt3	=	op3
000001A7 =00000003                M vcdt4	=	op4
000001A7                            	smpsVcCoarseFreq    $01, $00, $05, $06
000001A7 =00000001                M vccf1	=	op1
000001A7 =00000000                M vccf2	=	op2
000001A7 =00000005                M vccf3	=	op3
000001A7 =00000006                M vccf4	=	op4
000001A7                            	smpsVcRateScale     $02, $02, $03, $03
000001A7 =00000002                M vcrs1	=	op1
000001A7 =00000002                M vcrs2	=	op2
000001A7 =00000003                M vcrs3	=	op3
000001A7 =00000003                M vcrs4	=	op4
000001A7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000001A7 =0000001F                M vcar1	=	op1
000001A7 =0000001F                M vcar2	=	op2
000001A7 =0000001F                M vcar3	=	op3
000001A7 =0000001F                M vcar4	=	op4
000001A7                            	smpsVcAmpMod        $00, $00, $00, $00
000001A7 =00000000                M vcam1	=	op1<<5
000001A7 =00000000                M vcam2	=	op2<<5
000001A7 =00000000                M vcam3	=	op3<<5
000001A7 =00000000                M vcam4	=	op4<<5
000001A7                            	smpsVcDecayRate1    $06, $09, $06, $07
000001A7 =00000006                M vcd1r1	=	op1
000001A7 =00000009                M vcd1r2	=	op2
000001A7 =00000006                M vcd1r3	=	op3
000001A7 =00000007                M vcd1r4	=	op4
000001A7                            	smpsVcDecayRate2    $08, $06, $06, $07
000001A7 =00000008                M vcd2r1	=	op1
000001A7 =00000006                M vcd2r2	=	op2
000001A7 =00000006                M vcd2r3	=	op3
000001A7 =00000007                M vcd2r4	=	op4
000001A7                            	smpsVcDecayLevel    $0F, $01, $01, $02
000001A7 =0000000F                M vcdl1	=	op1
000001A7 =00000001                M vcdl2	=	op2
000001A7 =00000001                M vcdl3	=	op3
000001A7 =00000002                M vcdl4	=	op4
000001A7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001A7 =0000000F                M vcrr1	=	op1
000001A7 =0000000F                M vcrr2	=	op2
000001A7 =0000000F                M vcrr3	=	op3
000001A7 =0000000F                M vcrr4	=	op4
000001A7                            	smpsVcTotalLevel    $00, $13, $37, $19
000001A7 =00000000                M vctl1	=	op1
000001A7 =00000013                M vctl2	=	op2
000001A7 =00000037                M vctl3	=	op3
000001A7 =00000019                M vctl4	=	op4
000001A7 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001A8 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000001A8 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000001A8 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000001A8 =00000080                M vctlmask1	=	$80
000001A8 3630 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001AC DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001B0 0709 0606                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000001B4 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001B8 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001BC 1913 3780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001C0                            
000001C0                            ;	Voice $02
000001C0                            ;	$3A
000001C0                            ;	$01, $07, $01, $01, 	$7D, $7D, $7D, $33, 	$0E, $0E, $0E, $03
000001C0                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $1F, 	$18, $20, $2F, $80
000001C0                            	smpsVcAlgorithm     $02
000001C0 =00000002                M vcalgorithm	=	val
000001C0                            	smpsVcFeedback      $07
000001C0 =00000007                M vcfeedback	=	val
000001C0                            	smpsVcUnusedBits    $00
000001C0 =00000000                M vcunusedbits	=	val
000001C0 =00000000                M vcd1r1unk	=	0
000001C0 =00000000                M vcd1r2unk	=	0
000001C0 =00000000                M vcd1r3unk	=	0
000001C0 =00000000                M vcd1r4unk	=	0
000001C0                            	smpsVcDetune        $00, $00, $00, $00
000001C0 =00000000                M vcdt1	=	op1
000001C0 =00000000                M vcdt2	=	op2
000001C0 =00000000                M vcdt3	=	op3
000001C0 =00000000                M vcdt4	=	op4
000001C0                            	smpsVcCoarseFreq    $01, $01, $07, $01
000001C0 =00000001                M vccf1	=	op1
000001C0 =00000001                M vccf2	=	op2
000001C0 =00000007                M vccf3	=	op3
000001C0 =00000001                M vccf4	=	op4
000001C0                            	smpsVcRateScale     $00, $01, $01, $01
000001C0 =00000000                M vcrs1	=	op1
000001C0 =00000001                M vcrs2	=	op2
000001C0 =00000001                M vcrs3	=	op3
000001C0 =00000001                M vcrs4	=	op4
000001C0                            	smpsVcAttackRate    $33, $3D, $3D, $3D
000001C0 =00000033                M vcar1	=	op1
000001C0 =0000003D                M vcar2	=	op2
000001C0 =0000003D                M vcar3	=	op3
000001C0 =0000003D                M vcar4	=	op4
000001C0                            	smpsVcAmpMod        $00, $00, $00, $00
000001C0 =00000000                M vcam1	=	op1<<5
000001C0 =00000000                M vcam2	=	op2<<5
000001C0 =00000000                M vcam3	=	op3<<5
000001C0 =00000000                M vcam4	=	op4<<5
000001C0                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000001C0 =00000003                M vcd1r1	=	op1
000001C0 =0000000E                M vcd1r2	=	op2
000001C0 =0000000E                M vcd1r3	=	op3
000001C0 =0000000E                M vcd1r4	=	op4
000001C0                            	smpsVcDecayRate2    $00, $00, $00, $00
000001C0 =00000000                M vcd2r1	=	op1
000001C0 =00000000                M vcd2r2	=	op2
000001C0 =00000000                M vcd2r3	=	op3
000001C0 =00000000                M vcd2r4	=	op4
000001C0                            	smpsVcDecayLevel    $01, $01, $0F, $01
000001C0 =00000001                M vcdl1	=	op1
000001C0 =00000001                M vcdl2	=	op2
000001C0 =0000000F                M vcdl3	=	op3
000001C0 =00000001                M vcdl4	=	op4
000001C0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001C0 =0000000F                M vcrr1	=	op1
000001C0 =0000000F                M vcrr2	=	op2
000001C0 =0000000F                M vcrr3	=	op3
000001C0 =0000000F                M vcrr4	=	op4
000001C0                            	smpsVcTotalLevel    $00, $2F, $20, $18
000001C0 =00000000                M vctl1	=	op1
000001C0 =0000002F                M vctl2	=	op2
000001C0 =00000020                M vctl3	=	op3
000001C0 =00000018                M vctl4	=	op4
000001C0 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001C1 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000001C1 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000001C1 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000001C1 =00000080                M vctlmask1	=	$80
000001C1 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001C5 7D7D 7D33                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001C9 0E0E 0E03                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000001CD 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001D1 1F1F FF1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001D5 182F 2080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001D9                            
000001D9                            ;	Voice $03
000001D9                            ;	$39
000001D9                            ;	$06, $60, $30, $01, 	$3F, $3F, $5F, $5F, 	$11, $0F, $13, $09
000001D9                            ;	$05, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$27, $2C, $97, $80
000001D9                            	smpsVcAlgorithm     $01
000001D9 =00000001                M vcalgorithm	=	val
000001D9                            	smpsVcFeedback      $07
000001D9 =00000007                M vcfeedback	=	val
000001D9                            	smpsVcUnusedBits    $00
000001D9 =00000000                M vcunusedbits	=	val
000001D9 =00000000                M vcd1r1unk	=	0
000001D9 =00000000                M vcd1r2unk	=	0
000001D9 =00000000                M vcd1r3unk	=	0
000001D9 =00000000                M vcd1r4unk	=	0
000001D9                            	smpsVcDetune        $00, $03, $06, $00
000001D9 =00000000                M vcdt1	=	op1
000001D9 =00000003                M vcdt2	=	op2
000001D9 =00000006                M vcdt3	=	op3
000001D9 =00000000                M vcdt4	=	op4
000001D9                            	smpsVcCoarseFreq    $01, $00, $00, $06
000001D9 =00000001                M vccf1	=	op1
000001D9 =00000000                M vccf2	=	op2
000001D9 =00000000                M vccf3	=	op3
000001D9 =00000006                M vccf4	=	op4
000001D9                            	smpsVcRateScale     $01, $01, $00, $00
000001D9 =00000001                M vcrs1	=	op1
000001D9 =00000001                M vcrs2	=	op2
000001D9 =00000000                M vcrs3	=	op3
000001D9 =00000000                M vcrs4	=	op4
000001D9                            	smpsVcAttackRate    $1F, $1F, $3F, $3F
000001D9 =0000001F                M vcar1	=	op1
000001D9 =0000001F                M vcar2	=	op2
000001D9 =0000003F                M vcar3	=	op3
000001D9 =0000003F                M vcar4	=	op4
000001D9                            	smpsVcAmpMod        $00, $00, $00, $00
000001D9 =00000000                M vcam1	=	op1<<5
000001D9 =00000000                M vcam2	=	op2<<5
000001D9 =00000000                M vcam3	=	op3<<5
000001D9 =00000000                M vcam4	=	op4<<5
000001D9                            	smpsVcDecayRate1    $09, $13, $0F, $11
000001D9 =00000009                M vcd1r1	=	op1
000001D9 =00000013                M vcd1r2	=	op2
000001D9 =0000000F                M vcd1r3	=	op3
000001D9 =00000011                M vcd1r4	=	op4
000001D9                            	smpsVcDecayRate2    $03, $04, $04, $05
000001D9 =00000003                M vcd2r1	=	op1
000001D9 =00000004                M vcd2r2	=	op2
000001D9 =00000004                M vcd2r3	=	op3
000001D9 =00000005                M vcd2r4	=	op4
000001D9                            	smpsVcDecayLevel    $02, $02, $02, $02
000001D9 =00000002                M vcdl1	=	op1
000001D9 =00000002                M vcdl2	=	op2
000001D9 =00000002                M vcdl3	=	op3
000001D9 =00000002                M vcdl4	=	op4
000001D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001D9 =0000000F                M vcrr1	=	op1
000001D9 =0000000F                M vcrr2	=	op2
000001D9 =0000000F                M vcrr3	=	op3
000001D9 =0000000F                M vcrr4	=	op4
000001D9                            	smpsVcTotalLevel    $00, $97, $2C, $27
000001D9 =00000000                M vctl1	=	op1
000001D9 =00000097                M vctl2	=	op2
000001D9 =0000002C                M vctl3	=	op3
000001D9 =00000027                M vctl4	=	op4
000001D9 39                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001DA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000001DA =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000001DA =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000001DA =00000080                M vctlmask1	=	$80
000001DA 0630 6001                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001DE 3F5F 3F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001E2 1113 0F09                M 	dc.b	vcam4|vcd1r4|vcd1r4unk,vcam2|vcd1r2|vcd1r2unk,vcam3|vcd1r3|vcd1r3unk,vcam1|vcd1r1|vcd1r1unk
000001E6 0504 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001EA 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001EE 2797 2C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001F2                            
000001F2                          M 	pops
00000000                            
