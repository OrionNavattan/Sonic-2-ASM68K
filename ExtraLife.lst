00000000                            
00000000                            		opt	l.					; . is the local label symbol
00000000                            		opt	ae-					; automatic evens disabled by default
00000000                            		opt an+					; allow -h suffix for hexadecimal (used in the Z80 code)			
00000000                            		opt	ws+					; allow statements to contain white-spaces
00000000                            		opt	w+					; print warnings
00000000                            		
00000000                            Main:	group word,org(0)
00000000                            
00000000                            		section MainProgram,Main
00000000 =00000001                  Revision = 1
00000000                            ;	| If 0, a REV00 ROM is built
00000000                            ;	| If 1, a REV01 ROM is built, which contains some fixes
00000000                            ;	| If 2, a (probable) REV02 ROM is built, which contains even more fixes
00000000                            	
00000000 =00000000                  FixBugs = 0 ; If 1, enables a number of engine and gameplay bug-fixes, including some in the sound driver.
00000000                            
00000000 =00000000                  OptimizeSoundDriver = 0	; If 1, enables a number of optimizations in the sound driver
00000000                            
00000000 =00000000                  AllOptimizations = 0 ; If 1, enables all REV02 assembler optimizations, plus optimized leas from REV00 & REV01
00000000                            
00000000                            ; The zero-offset optimization setting (which changes instances of address register indirect 
00000000                            ; displacement addressing with displacement value of zero to simple address register indirect,
00000000                            ; e.g., 0(a1) becomes (a1)) in Sonic 2 Github is a workaround for AS'
00000000                            ; lack of a built-in ability to disable it. If you would like this optimization, add "opt oz+" 
00000000                            ; to the options list at the start of the file.
00000000                            
00000000 =00000000                  RemoveJmpTos = (0|Revision=2|AllOptimizations)
00000000                            ;	| If 1, many unnecessary JmpTos are removed, improving performance
00000000                            
00000000 =00000000                  AddSubOptimize = (0|Revision=2|AllOptimizations)
00000000                            ;	| If 1, some add/sub instructions are optimized to addq/subq
00000000                            
00000000 =FFFFFFFF                  RelativeLea = (0|Revision<>2|AllOptimizations)
00000000                            ;	| If 1, makes some lea instructions use pc-relative addressing, instead of absolute long
00000000                            
00000000                            				
00000000                            		include "Macros - More CPUs.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Change CPU
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            cpu:		macro
00000000                            		if strcmp("\1","z80")
00000000                            		pusho						; save previous options
00000000                            		cpu_mode:	= 1				; Z80
00000000                            		opt	an+					; 1234h style numbering
00000000                            		opt	ae-					; disable auto evens
00000000                            		else
00000000                            		if def(cpu_mode)
00000000                            		popo						; restore options
00000000                            		endc
00000000                            		cpu_mode:	= 0				; 68000 by default
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; AS compatibility
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            phase:		macros
00000000                            		obj \1
00000000                            
00000000                            dephase:	macros
00000000                            		objend
00000000                            
00000000                            listing:	macro
00000000                            		if strcmp("\1","on")
00000000                            		list
00000000                            		else
00000000                            		nolist
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            binclude:	macros
00000000                            		incbin	\_
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 instruction set
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            getzreg:	macro						; convert register to numerical value
00000000                            		if strcmp("\1","a")
00000000                            		zreg: = 7
00000000                            		elseif strcmp("\1","b")
00000000                            		zreg: = 0
00000000                            		elseif strcmp("\1","c")
00000000                            		zreg: = 1
00000000                            		elseif strcmp("\1","d")
00000000                            		zreg: = 2
00000000                            		elseif strcmp("\1","e")
00000000                            		zreg: = 3
00000000                            		elseif strcmp("\1","h")
00000000                            		zreg: = 4
00000000                            		elseif strcmp("\1","l")
00000000                            		zreg: = 5
00000000                            		elseif strcmp("\1","(hl)")
00000000                            		zreg: = 6
00000000                            		else
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            getindex:	macro						; convert index register to register offset and value
00000000                            		if instr("\1","(ix")
00000000                            		ireg: = $dd
00000000                            		elseif instr("\1","(iy")
00000000                            		ireg: = $fd
00000000                            		else
00000000                            			fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000 =00000000                  ix: =		0						; allows (ix+n) to be parsed as n
00000000 =00000000                  iy: =		0
00000000                            
00000000                            adc:		macro
00000000                            		local num
00000000                            		if strcmp("\1","hl")
00000000                            			if strcmp("\2","bc")
00000000                            			dc.w $ed4a
00000000                            			elseif strcmp("\2","de")
00000000                            			dc.w $ed5a
00000000                            			elseif strcmp("\2","hl")
00000000                            			dc.w $ed6a
00000000                            			elseif strcmp("\2","sp")
00000000                            			dc.w $ed7a
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            			mexit
00000000                            		endc
00000000                            		; "adc a, x" or "adc x"
00000000                            		if narg=2 & strcmp("\1","a")
00000000                            			shift					; ignore a
00000000                            		endc
00000000                            		if (narg=1) | (narg=2)
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\1
00000000                            			dc.b $88+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $dd8c
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $dd8d
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fd8c
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fd8d
00000000                            			elseif instr("\1","(i")			; adc (ix+n)
00000000                            				num: equ \1
00000000                            				getindex \1
00000000                            				dc.b ireg, $8e, num
00000000                            			else					; adc n
00000000                            			num: equ \1
00000000                            			dc.b $ce, num
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            bit:		macro
00000000                            		local num, num2
00000000                            		num: equ \1
00000000                            		if instr("a b c d e h l (hl) ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.b $cb, $40+(num*8)+zreg
00000000                            		elseif instr("\2","(i")				; bit n,(ix+n)
00000000                            			num2: equ \2
00000000                            			getindex \2
00000000                            			dc.b ireg, $cb, num2, $40+(num*8)
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            call:		macro
00000000                            		local num
00000000                            		if narg=1					; call n
00000000                            		num: equ \1
00000000                            		dc.b $cd
00000000                            		elseif narg=2					; call x, n
00000000                            			num: equ \2
00000000                            			if strcmp("\1","nz")
00000000                            			dc.b $c4
00000000                            			elseif strcmp("\1","z")
00000000                            			dc.b $cc
00000000                            			elseif strcmp("\1","nc")
00000000                            			dc.b $d4
00000000                            			elseif strcmp("\1","c")
00000000                            			dc.b $dc
00000000                            			elseif strcmp("\1","po")
00000000                            			dc.b $e4
00000000                            			elseif strcmp("\1","pe")
00000000                            			dc.b $ec
00000000                            			elseif strcmp("\1","p")
00000000                            			dc.b $f4
00000000                            			elseif strcmp("\1","m")
00000000                            			dc.b $fc
00000000                            			else
00000000                            				fail
00000000                            			endc
00000000                            			shift
00000000                            		else
00000000                            			fail
00000000                            		endc
00000000                            		dc.b num&$FF, num>>8
00000000                            		endm
00000000                            
00000000                            ccf:		macros
00000000                            		dc.b $3f
00000000                            
00000000                            
00000000                            cp:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $b8+zreg
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $ddbc
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $ddbd
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fdbc
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fdbd
00000000                            		elseif instr("\1","(i")				; cp (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $be, num
00000000                            		else						; cp n
00000000                            		num: equ \1
00000000                            		dc.b $fe, num
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            cpd:		macros
00000000                            		dc.w $eda9
00000000                            
00000000                            
00000000                            cpdr:		macros
00000000                            		dc.w $edb9
00000000                            
00000000                            
00000000                            cpi:		macros
00000000                            		dc.w $eda1
00000000                            
00000000                            
00000000                            cpir:		macros
00000000                            		dc.w $edb1
00000000                            
00000000                            
00000000                            cpl:		macros
00000000                            		dc.b $2f
00000000                            
00000000                            
00000000                            daa:		macros
00000000                            		dc.b $27
00000000                            
00000000                            
00000000                            dec:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $5+(zreg*8)
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $dd25
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $dd2d
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fd25
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fd2d
00000000                            		elseif strcmp("\1","bc")
00000000                            		dc.b $b
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $1b
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $2b
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dd2b
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fd2b
00000000                            		elseif strcmp("\1","sp")
00000000                            		dc.b $3b
00000000                            		elseif instr("\1","(i")				; dec (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $35, num
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            di:		macros
00000000                            		dc.b $f3
00000000                            
00000000                            
00000000                            djnz:		macro
00000000                            		local num
00000000                            		num: equ \1
00000000                            		dc.b $10, num-*-2
00000000                            		endm
00000000                            
00000000                            
00000000                            ei:		macros
00000000                            		dc.b $fb
00000000                            
00000000                            
00000000                            ex:		macro
00000000                            		if strcmp("\_","af,af")				; ex af,af'
00000000                            		dc.b 8
00000000                            		elseif strcmp("\_","(sp),hl")
00000000                            		dc.b $e3
00000000                            		elseif strcmp("\_","(sp),ix")
00000000                            		dc.w $dde3
00000000                            		elseif strcmp("\_","(sp),iy")
00000000                            		dc.w $fde3
00000000                            		elseif strcmp("\_","de,hl")
00000000                            		dc.b $eb
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            exx:		macros
00000000                            		dc.b $d9
00000000                            
00000000                            
00000000                            halt:		macros
00000000                            		dc.b $76
00000000                            
00000000                            
00000000                            im:		macro
00000000                            		if \1=0
00000000                            		dc.w $ed46
00000000                            		elseif \1=1
00000000                            		dc.w $ed56
00000000                            		elseif \1=2
00000000                            		dc.w $ed5e
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            in:		macro
00000000                            		local num
00000000                            		if strcmp("\1","a")
00000000                            			if strcmp("\2","(c)")
00000000                            			dc.w $ed78
00000000                            			else					; in a,n
00000000                            			num: equ \2
00000000                            			dc.b $db, num
00000000                            			endc
00000000                            		elseif instr("b c d e h l ","\1\ ")&strcmp("\2","(c)")
00000000                            		getzreg	\1
00000000                            		dc.w $ed40+(zreg*8)
00000000                            		elseif strcmp("\1","(c)")
00000000                            		dc.w $ed70
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            inc:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $4+(zreg*8)
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $dd24
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $dd2c
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fd24
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fd2c
00000000                            		elseif strcmp("\1","bc")
00000000                            		dc.b $3
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $13
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $23
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dd23
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fd23
00000000                            		elseif strcmp("\1","sp")
00000000                            		dc.b $33
00000000                            		elseif instr("\1","(i")				; inc (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $34, num
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ind:		macros
00000000                            		dc.w $edaa
00000000                            
00000000                            
00000000                            indr:		macros
00000000                            		dc.w $edba
00000000                            
00000000                            
00000000                            ini:		macros
00000000                            		dc.w $eda2
00000000                            
00000000                            
00000000                            inir:		macros
00000000                            		dc.w $edb2
00000000                            
00000000                            
00000000                            jp:		macro
00000000                            		local num
00000000                            		if strcmp("\1","(hl)")
00000000                            		dc.b $e9
00000000                            		elseif strcmp("\1","(ix)")
00000000                            		dc.w $dde9
00000000                            		elseif strcmp("\1","(iy)")
00000000                            		dc.w $fde9
00000000                            		else
00000000                            			if strcmp("\1","nz")
00000000                            			num: equ \2
00000000                            			dc.b $c2
00000000                            			elseif strcmp("\1","z")
00000000                            			num: equ \2
00000000                            			dc.b $ca
00000000                            			elseif strcmp("\1","nc")
00000000                            			num: equ \2
00000000                            			dc.b $d2
00000000                            			elseif strcmp("\1","c")
00000000                            			num: equ \2
00000000                            			dc.b $da
00000000                            			elseif strcmp("\1","po")
00000000                            			num: equ \2
00000000                            			dc.b $e2
00000000                            			elseif strcmp("\1","pe")
00000000                            			num: equ \2
00000000                            			dc.b $ea
00000000                            			elseif strcmp("\1","p")
00000000                            			num: equ \2
00000000                            			dc.b $f2
00000000                            			elseif strcmp("\1","m")
00000000                            			num: equ \2
00000000                            			dc.b $fa
00000000                            			else					; jp n
00000000                            			num: equ \1
00000000                            			dc.b $c3
00000000                            			endc
00000000                            			if narg=2
00000000                            			shift
00000000                            			endc
00000000                            			dc.b num&$FF, num>>8
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            jr:		macro
00000000                            		local num
00000000                            		if strcmp("\1","nz")
00000000                            		num: equ \2
00000000                            		dc.b $20
00000000                            		elseif strcmp("\1","z")
00000000                            		num: equ \2
00000000                            		dc.b $28
00000000                            		elseif strcmp("\1","nc")
00000000                            		num: equ \2
00000000                            		dc.b $30
00000000                            		elseif strcmp("\1","c")
00000000                            		num: equ \2
00000000                            		dc.b $38
00000000                            		else						; jr n
00000000                            		num: equ \1
00000000                            		dc.b $18
00000000                            		endc
00000000                            		if narg=2
00000000                            		shift
00000000                            		endc
00000000                            		dc.b num-*-1
00000000                            		;if ((num-*)>=-$80)&((num-*)<=$7f)
00000000                            		;fail
00000000                            		;endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ld:		macro
00000000                            		local num, num2
00000000                            		if strcmp("\1","a")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $78+zreg
00000000                            			elseif strcmp("\2","i")
00000000                            			dc.w $ed57
00000000                            			elseif strcmp("\2","r")
00000000                            			dc.w $ed5f
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd7c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd7d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd7c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd7d
00000000                            			elseif strcmp("\2","(bc)")
00000000                            			dc.b $0a
00000000                            			elseif strcmp("\2","(de)")
00000000                            			dc.b $1a
00000000                            			elseif instr("\2","(i")			; ld a,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $7e, num
00000000                            			else
00000000                            				num: equ \2
00000000                            				tmp_len: = strlen("\2")
00000000                            				tmp_fc:	substr	1,1,"\2"
00000000                            				tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            				if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld a,(n)
00000000                            				dc.b $3a, num&$ff, num>>8
00000000                            				else				; ld a,n
00000000                            				dc.b $3e, num
00000000                            				endc
00000000                            			endc
00000000                            		elseif strcmp("\1","b")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $40+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd44
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd45
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd44
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd45
00000000                            			elseif instr("\2","(i")			; ld b,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $46, num
00000000                            			else					; ld b,n
00000000                            			num: equ \2
00000000                            			dc.b $6, num
00000000                            			endc
00000000                            		elseif strcmp("\1","c")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $48+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd4c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd4d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd4c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd4d
00000000                            			elseif instr("\2","(i")			; ld c,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $4e, num
00000000                            			else					; ld c,n
00000000                            			num: equ \2
00000000                            			dc.b $e, num
00000000                            			endc
00000000                            		elseif strcmp("\1","d")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $50+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd54
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd55
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd54
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd55
00000000                            			elseif instr("\2","(i")			; ld d,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $56, num
00000000                            			else					; ld d,n
00000000                            			num: equ \2
00000000                            			dc.b $16, num
00000000                            			endc
00000000                            		elseif strcmp("\1","e")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $58+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd5c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd5d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd5c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd5d
00000000                            			elseif instr("\2","(i")			; ld e,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $5e, num
00000000                            			else					; ld e,n
00000000                            			num: equ \2
00000000                            			dc.b $1e, num
00000000                            			endc
00000000                            		elseif strcmp("\1","h")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $60+zreg
00000000                            			elseif instr("\2","(i")			; ld h,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $66, num
00000000                            			else					; ld h,n
00000000                            			num: equ \2
00000000                            			dc.b $26, num
00000000                            			endc
00000000                            		elseif strcmp("\1","l")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $68+zreg
00000000                            			elseif instr("\2","(i")			; ld l,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $6e, num
00000000                            			else					; ld l,n
00000000                            			num: equ \2
00000000                            			dc.b $2e, num
00000000                            			endc
00000000                            		elseif strcmp("\1","i")
00000000                            		dc.w $ed47
00000000                            		elseif strcmp("\1","r")
00000000                            		dc.w $ed4f
00000000                            		elseif strcmp("\1","ixh")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $dd60+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd64
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd65
00000000                            			else					; ld ixh,n
00000000                            			num: equ \2
00000000                            			dc.b $dd, $26, num
00000000                            			endc
00000000                            		elseif strcmp("\1","ixl")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $dd68+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd6c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd6d
00000000                            			else					; ld ixl,n
00000000                            			num: equ \2
00000000                            			dc.b $dd, $2e, num
00000000                            			endc
00000000                            		elseif strcmp("\1","iyh")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $fd60+zreg
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd64
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd65
00000000                            			else					; ld iyh,n
00000000                            			num: equ \2
00000000                            			dc.b $fd, $26, num
00000000                            			endc
00000000                            		elseif strcmp("\1","iyl")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $fd68+zreg
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd6c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd6d
00000000                            			else					; ld iyl,n
00000000                            			num: equ \2
00000000                            			dc.b $fd, $2e, num
00000000                            			endc
00000000                            		elseif strcmp("\1","bc")
00000000                            			num: equ \2
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld bc,(n)
00000000                            			dc.b $ed, $4b, num&$ff, num>>8
00000000                            			else					; ld bc,n
00000000                            			dc.b $1, num&$ff, num>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","de")
00000000                            			num: equ \2
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld de,(n)
00000000                            			dc.b $ed, $5b, num&$ff, num>>8
00000000                            			else					; ld de,n
00000000                            			dc.b $11, num&$ff, num>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","hl")
00000000                            			num: equ \2
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld hl,(n)
00000000                            			dc.b $ed, $6b, num&$ff, num>>8
00000000                            			else					; ld hl,n
00000000                            			dc.b $21, num&$ff, num>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","sp")
00000000                            			if strcmp("\2","hl")
00000000                            			dc.b $f9
00000000                            			elseif strcmp("\2","ix")
00000000                            			dc.w $ddf9
00000000                            			elseif strcmp("\2","iy")
00000000                            			dc.w $fdf9
00000000                            			else
00000000                            				num: equ \2
00000000                            				tmp_len: = strlen("\2")
00000000                            				tmp_fc:	substr	1,1,"\2"
00000000                            				tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            				if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld sp,(n)
00000000                            				dc.b $ed, $7b, num&$ff, num>>8
00000000                            				else				; ld sp,n
00000000                            				dc.b $31, num&$ff, num>>8
00000000                            				endc
00000000                            			endc
00000000                            		elseif strcmp("\1","ix")
00000000                            			num: equ \2
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld ix,(n)
00000000                            			dc.b $dd, $2a, num&$ff, num>>8
00000000                            			else					; ld ix,n
00000000                            			dc.b $dd, $21, num&$ff, num>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","iy")
00000000                            			num: equ \2
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld iy,(n)
00000000                            			dc.b $fd, $2a, num&$ff, num>>8
00000000                            			else					; ld iy,n
00000000                            			dc.b $fd, $21, num&$ff, num>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","(bc)")
00000000                            		dc.b 2
00000000                            		elseif strcmp("\1","(de)")
00000000                            		dc.b $12
00000000                            		elseif strcmp("\1","(hl)")
00000000                            			if instr("a b c d e h l ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $70+zreg
00000000                            			else					; ld (hl),n
00000000                            			num: equ \2
00000000                            			dc.b $36, num
00000000                            			endc
00000000                            		elseif instr("\1","(i")				; ld (ix+n),?
00000000                            			if instr("a b c d e h l ","\2\ ")
00000000                            				num: equ \1
00000000                            				getzreg	\2
00000000                            				getindex \1
00000000                            				dc.b ireg, $70|zreg, num
00000000                            			else					; ld (ix+n),n
00000000                            				num: equ \1
00000000                            				num2: equ \2
00000000                            				getindex \1
00000000                            				dc.b ireg, $36, num, num2
00000000                            			endc
00000000                            		else						; ld (n),?
00000000                            			num: equ \1
00000000                            			if strcmp("\2","a")
00000000                            			dc.b $32
00000000                            			elseif strcmp("\2","bc")
00000000                            			dc.w $ed43
00000000                            			elseif strcmp("\2","de")
00000000                            			dc.w $ed53
00000000                            			elseif strcmp("\2","hl")
00000000                            			dc.w $ed63
00000000                            			elseif strcmp("\2","sp")
00000000                            			dc.w $ed73
00000000                            			elseif strcmp("\2","ix")
00000000                            			dc.w $dd22
00000000                            			elseif strcmp("\2","iy")
00000000                            			dc.w $fd22
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            			dc.b num&$FF, num>>8
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ldd:		macros
00000000                            		dc.w $eda8
00000000                            
00000000                            
00000000                            lddr:		macros
00000000                            		dc.w $edb8
00000000                            
00000000                            
00000000                            ldi:		macros
00000000                            		dc.w $eda0
00000000                            
00000000                            
00000000                            ldir:		macros
00000000                            		dc.w $edb0
00000000                            
00000000                            
00000000                            otdr:		macros
00000000                            		dc.w $edbb
00000000                            
00000000                            
00000000                            otir:		macros
00000000                            		dc.w $edb3
00000000                            
00000000                            
00000000                            out:		macro
00000000                            		local num
00000000                            		if strcmp("\1","(c)")&instr("a b c d e h l ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.w $ed41+(zreg*8)
00000000                            		elseif strcmp("\_","(c),0")
00000000                            		dc.w $ed71
00000000                            		elseif strcmp("\2","a")				; out n,a
00000000                            		num: equ \1
00000000                            		dc.b $d3, num
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            outd:		macros
00000000                            		dc.w $edab
00000000                            
00000000                            
00000000                            outi:		macros
00000000                            		dc.w $eda3
00000000                            
00000000                            
00000000                            pop:		macro
00000000                            		if strcmp("\1","bc")
00000000                            		dc.b $c1
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $d1
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $e1
00000000                            		elseif strcmp("\1","af")
00000000                            		dc.b $f1
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dde1
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fde1
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            push:		macro
00000000                            		if strcmp("\1","bc")
00000000                            		dc.b $c5
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $d5
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $e5
00000000                            		elseif strcmp("\1","af")
00000000                            		dc.b $f5
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dde5
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fde5
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            res:		macro
00000000                            		local num, num2
00000000                            		num: equ \1
00000000                            		if instr("a b c d e h l (hl) ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.b $cb, $80+(num*8)+zreg
00000000                            		elseif instr("\2","(i")				; res n,(ix+n)
00000000                            			num2: equ \2
00000000                            			getindex \2
00000000                            			dc.b ireg, $cb, num2
00000000                            		dc.b $80+(num*8)
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ret:		macro
00000000                            		if strcmp("\1","nz")
00000000                            		dc.b $c0
00000000                            		elseif strcmp("\1","z")
00000000                            		dc.b $c8
00000000                            		elseif strcmp("\1","nc")
00000000                            		dc.b $d0
00000000                            		elseif strcmp("\1","c")
00000000                            		dc.b $d8
00000000                            		elseif strcmp("\1","po")
00000000                            		dc.b $e0
00000000                            		elseif strcmp("\1","pe")
00000000                            		dc.b $e8
00000000                            		elseif strcmp("\1","p")
00000000                            		dc.b $f0
00000000                            		elseif strcmp("\1","m")
00000000                            		dc.b $f8
00000000                            		elseif strlen("\1")=0				; ret
00000000                            		dc.b $c9
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            reti:		macros
00000000                            		dc.w $ed4d
00000000                            
00000000                            
00000000                            retn:		macros
00000000                            		dc.w $ed45
00000000                            
00000000                            
00000000                            rl:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $10+zreg
00000000                            		elseif instr("\1","(i")				; rl (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; rl (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $10+zreg
00000000                            			else
00000000                            			dc.b $16
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rla:		macros
00000000                            		dc.b $17
00000000                            
00000000                            
00000000                            rlc:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, zreg
00000000                            		elseif instr("\1","(i")				; rlc (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; rlc (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b zreg
00000000                            			else
00000000                            			dc.b $6
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rlca:		macros
00000000                            		dc.b $7
00000000                            
00000000                            
00000000                            rld:		macros
00000000                            		dc.w $ed6f
00000000                            
00000000                            
00000000                            rr:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $18+zreg
00000000                            		elseif instr("\1","(i")				; rr (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; rr (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $18+zreg
00000000                            			else
00000000                            			dc.b $1e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rra:		macros
00000000                            		dc.b $1f
00000000                            
00000000                            
00000000                            rrc:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $8+zreg
00000000                            		elseif instr("\1","(i")				; rrc (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; rrc (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $8+zreg
00000000                            			else
00000000                            			dc.b $e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rrca:		macros
00000000                            		dc.b $f
00000000                            
00000000                            
00000000                            rrd:		macros
00000000                            		dc.w $ed67
00000000                            
00000000                            
00000000                            rst:		macro
00000000                            		local num
00000000                            		num: equ \1
00000000                            		dc.b $c7+(num&$38)
00000000                            		endm
00000000                            
00000000                            
00000000                            sbc:		macro
00000000                            		local num
00000000                            		if strcmp("\1","a")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $98+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd9c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd9d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd9c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd9d
00000000                            			elseif instr("\2","(i")			; sbc a,(ix+n)
00000000                            				num: equ \2
00000000                            				getindex \2
00000000                            				dc.b ireg, $9e, num
00000000                            			else					; sbc a,n
00000000                            			num: equ \2
00000000                            			dc.b $de, num
00000000                            			endc
00000000                            		elseif strcmp("\1","hl")
00000000                            			if strcmp("\2","bc")
00000000                            			dc.w $ed42
00000000                            			elseif strcmp("\2","de")
00000000                            			dc.w $ed52
00000000                            			elseif strcmp("\2","hl")
00000000                            			dc.w $ed62
00000000                            			elseif strcmp("\2","sp")
00000000                            			dc.w $ed72
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            scf:		macros
00000000                            		dc.b $37
00000000                            
00000000                            
00000000                            set:		macro
00000000                            		local num, num2
00000000                            		num: equ \1
00000000                            		if instr("a b c d e h l (hl) ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.b $cb, $c0+(num*8)+zreg
00000000                            		elseif instr("\2","(i")				; set n,(ix+n)
00000000                            			num2: equ \2
00000000                            			getindex \2
00000000                            			dc.b ireg, $cb, num2, $c0+(num*8)
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sla:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $20+zreg
00000000                            		elseif instr("\1","(i")
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; sla (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $20+zreg
00000000                            			else					; sla (ix+n)
00000000                            			dc.b $26
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sll:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $30+zreg
00000000                            		elseif instr("\1","(i")
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; sll (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $30+zreg
00000000                            			else					; sll (ix+n)
00000000                            			dc.b $36
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sra:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $28+zreg
00000000                            		elseif instr("\1","(i")
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; sra (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $28+zreg
00000000                            			else					; sra (ix+n)
00000000                            			dc.b $2e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            srl:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $38+zreg
00000000                            		elseif instr("\1","(i")
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $cb, num
00000000                            			if narg=2				; srl (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $38+zreg
00000000                            			else					; srl (ix+n)
00000000                            			dc.b $3e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            xor:		macro
00000000                            		local num
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $a8+zreg
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $ddac
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $ddad
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fdac
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fdad
00000000                            		elseif instr("\1","(i")				; xor (ix+n)
00000000                            			num: equ \1
00000000                            			getindex \1
00000000                            			dc.b ireg, $ae, num
00000000                            		else						; xor n
00000000                            		num: equ \1
00000000                            		dc.b $ee, num
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            db:		macros
00000000                            		dc.b \_
00000000                            
00000000                            
00000000                            dw:		macro
00000000                            		local c
00000000                            		c: = 0
00000000                            		rept narg
00000000                            			local num\#c
00000000                            			num\#c\: equ \1
00000000                            			dc.b (num\#c\)&$FF, (num\#c\)>>8
00000000                            			shift
00000000                            			c: = c+1
00000000                            		endr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Mixed instruction set
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            add:		macro
00000000                            		local num
00000000                            		if cpu_mode=1					; Z80
00000000                            			if strcmp("\1","hl")
00000000                            				if strcmp("\2","bc")
00000000                            				dc.b $9
00000000                            				elseif strcmp("\2","de")
00000000                            				dc.b $19
00000000                            				elseif strcmp("\2","hl")
00000000                            				dc.b $29
00000000                            				elseif strcmp("\2","sp")
00000000                            				dc.b $39
00000000                            				else
00000000                            				fail
00000000                            				endc
00000000                            				mexit
00000000                            			elseif strcmp("\1","ix")
00000000                            				if strcmp("\2","bc")
00000000                            				dc.w $dd09
00000000                            				elseif strcmp("\2","de")
00000000                            				dc.w $dd19
00000000                            				elseif strcmp("\2","ix")
00000000                            				dc.w $dd29
00000000                            				elseif strcmp("\2","sp")
00000000                            				dc.w $dd39
00000000                            				else
00000000                            				fail
00000000                            				endc
00000000                            				mexit
00000000                            			elseif strcmp("\1","iy")
00000000                            				if strcmp("\2","bc")
00000000                            				dc.w $fd09
00000000                            				elseif strcmp("\2","de")
00000000                            				dc.w $fd19
00000000                            				elseif strcmp("\2","iy")
00000000                            				dc.w $fd29
00000000                            				elseif strcmp("\2","sp")
00000000                            				dc.w $fd39
00000000                            				else
00000000                            				fail
00000000                            				endc
00000000                            				mexit
00000000                            			endc
00000000                            								; "add a, x" or "add x"
00000000                            			if (narg=2) & strcmp("\1","a")
00000000                            				shift				; ignore a
00000000                            			endc
00000000                            			if (narg=1) | (narg=2)
00000000                            				if instr("a b c d e h l (hl) ","\1\ ")
00000000                            				getzreg	\1
00000000                            				dc.b $80+zreg
00000000                            				elseif strcmp("\1","ixh")
00000000                            				dc.w $dd84
00000000                            				elseif strcmp("\1","ixl")
00000000                            				dc.w $dd85
00000000                            				elseif strcmp("\1","iyh")
00000000                            				dc.w $fd84
00000000                            				elseif strcmp("\1","iyl")
00000000                            				dc.w $fd85
00000000                            				elseif instr("\1","(i")		; add (ix+n)
00000000                            					num: equ \1
00000000                            					getindex \1
00000000                            					dc.b ireg, $86, num
00000000                            				else				; add n
00000000                            				num: equ \1
00000000                            				dc.b $c6, num
00000000                            				endc
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            		else						; 68k
00000000                            		axd.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            and:		macro
00000000                            		local num
00000000                            		if cpu_mode=1					; Z80
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\1
00000000                            			dc.b $a0+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $dda4
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $dda5
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fda4
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fda5
00000000                            			elseif instr("\1","(i")			; and (ix+n)
00000000                            				num: equ \1
00000000                            				getindex \1
00000000                            				dc.b ireg, $a6, num
00000000                            			else					; and n
00000000                            			num: equ \1
00000000                            			dc.b $e6, num
00000000                            			endc
00000000                            		else						; 68k
00000000                            		anx.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            neg:		macro
00000000                            		if cpu_mode=1					; Z80
00000000                            		dc.w $ed44
00000000                            		else						; 68k
00000000                            		nxg.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            nop:		macro
00000000                            		if cpu_mode=1					; Z80
00000000                            		dc.b 0
00000000                            		else						; 68k
00000000                            		nxp
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            or:		macro
00000000                            		local num
00000000                            		if cpu_mode=1					; Z80
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\1
00000000                            			dc.b $b0+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $ddb4
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $ddb5
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fdb4
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fdb5
00000000                            			elseif instr("\1","(i")			; or (ix+n)
00000000                            				num: equ \1
00000000                            				getindex \1
00000000                            				dc.b ireg, $b6, num
00000000                            			else					; or n
00000000                            			num: equ \1
00000000                            			dc.b $f6, num
00000000                            			endc
00000000                            		else						; 68k
00000000                            		ox.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sub:		macro
00000000                            		local num
00000000                            		if cpu_mode=1					; Z80
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\1
00000000                            			dc.b $90+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $dd94
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $dd95
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fd94
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fd95
00000000                            			elseif instr("\1","(i")			; sub (ix+n)
00000000                            				um: equ \1
00000000                            				getindex \1
00000000                            				dc.b ireg, $96, num
00000000                            			else					; sub n
00000000                            			num: equ \1
00000000                            			dc.b $d6, num
00000000                            			endc
00000000                            		else						; 68k
00000000                            		sxb.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Restored ASM68k instruction set
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            adda:		macros
00000000                            		axda.\0	\_
00000000                            
00000000                            addi:		macros
00000000                            		axdi.\0	\_
00000000                            
00000000                            addq:		macros
00000000                            		axdq.\0	\_
00000000                            
00000000                            addx:		macros
00000000                            		axdx.\0	\_
00000000                            
00000000                            andi:		macros
00000000                            		anxi.\0	\_
00000000                            
00000000                            negx:		macros
00000000                            		nxgx.\0	\_
00000000                            
00000000                            ori:		macros
00000000                            		oxi.\0	\_
00000000                            
00000000                            suba:		macros
00000000                            		sxba.\0	\_
00000000                            
00000000                            subi:		macros
00000000                            		sxbi.\0	\_
00000000                            
00000000                            subq:		macros
00000000                            		sxbq.\0	\_
00000000                            
00000000                            subx:		macros
00000000                            		sxbx.\0	\_
00000000                            		cpu 68000
00000000 =00000000                M 	cpu_mode:	= 0
00000000                            		include "Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Test if argument is used
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ifarg		macros
00000000                            		if strlen("\1")>0
00000000                            
00000000                            ifnotarg	macros
00000000                            		if strlen("\1")=0
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad.
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:		macro loc,length,value
00000000                            		ifarg \value
00000000                          M 	if	strlen("\value")>0
00000000                            		dcb.b (\length-(loc%\length))%\length,\value
00000000                            		else
00000000                            		dcb.b (\length-(loc%\length))%\length,0
00000000                            		endc
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align Z80 ROM bank contents to end of bank (replicates negative cnops).
00000000                            ; input: current PC, offset, boundary, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ;align_Z80_bank:	macro loc,offset
00000000                            	
00000000                            ;	negoffset: equ -\offset
00000000                            ;	alignval: equ ((\offset+$8000-\loc)&($8000-1))
00000000                            ;	dcb.b alignval,0
00000000                            ;	endm	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Save and restore registers from the stack.
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            chkifreg:	macro
00000000                            		isreg: = 1					; assume string is register
00000000                            		isregm: = 0					; assume single register
00000000                            		regtmp: equs \1					; copy input
00000000                            		rept strlen(\1)
00000000                            		regchr:	substr ,1,"\regtmp"			; get first character
00000000                            		regtmp:	substr 2,,"\regtmp"			; remove first character
00000000                            		if instr("ad01234567/-","\regchr")
00000000                            		else
00000000                            		isreg: = 0					; string isn't register if it contains characters besides those listed
00000000                            		endc
00000000                            		if instr("/-","\regchr")
00000000                            		isregm: = 1					; string is multi-register
00000000                            		endc
00000000                            		endr
00000000                            		endm
00000000                            
00000000                            pushr:		macro
00000000                            		chkifreg "\1"
00000000                            		if (isreg=1)&(isregm=1)
00000000                            			ifarg \0				; check if size is specified
00000000                          M 	if	strlen("\0")>0
00000000                            			movem.\0	\1,-(sp)		; save multiple registers (b/w)
00000000                            			else
00000000                            			movem.l	\1,-(sp)			; save multiple registers
00000000                            			endc
00000000                            		else
00000000                            			ifarg \0				; check if size is specified
00000000                          M 	if	strlen("\0")>0
00000000                            			move.\0	\1,-(sp)			; save one register (b/w)
00000000                            			else
00000000                            			move.l	\1,-(sp)			; save one whole register
00000000                            			endc
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            popr:		macro
00000000                            		chkifreg "\1"
00000000                            		if (isreg=1)&(isregm=1)
00000000                            			ifarg \0				; check if size is specified
00000000                          M 	if	strlen("\0")>0
00000000                            			movem.\0	(sp)+,\1		; restore multiple registers (b/w)
00000000                            			else
00000000                            			movem.l	(sp)+,\1			; restore multiple whole registers
00000000                            			endc
00000000                            		else
00000000                            			ifarg \0				; check if size is specified
00000000                          M 	if	strlen("\0")>0
00000000                            			move.\0	(sp)+,\1			; restore one register (b/w)
00000000                            			else
00000000                            			move.l	(sp)+,\1			; restore one whole register
00000000                            			endc
00000000                            		endc
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Add/sub optimizations.
00000000                            ; Almost all possible add/sub optimizations were made in Revision 2.
00000000                            ; ---------------------------------------------------------------------------
00000000                            	
00000000                            
00000000                            	; ...otherwise, leave them unoptimized.
00000000                            addi_:		macro	src,dest
00000000                            		addi.\0	\src,\dest
00000000                          M 	axdi.\0	\src,\dest
00000000                            	endm
00000000                            subi_:		macro
00000000                            		subi.\0	\src,\dest
00000000                          M 	sxbi.\0	\src,\dest
00000000                            	endm
00000000                            adda_:		macro
00000000                            		adda.\0	\src,\dest
00000000                          M 	axda.\0	\src,\dest
00000000                            	endm
00000000                                
00000000                                
00000000                            ; ------------------------------------------------------------------------------
00000000                            ; Relative lea.
00000000                            ; Optimize various lea instructions to be PC relative instead of absolute long.
00000000                            ; These were deoptimized to absolute long in Revision 2.
00000000                            ; ------------------------------------------------------------------------------
00000000                            
00000000                            lea_: 		macro address,reg
00000000                            	if RelativeLea
00000000                            		lea \address(pc),\reg
00000000                            	else
00000000                            		lea (\address).l,\reg
00000000                            	endc
00000000                                endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Revision 2 even. Unnecessary even commands, most likely 
00000000                            ; automatically generated by the assembler after 'dc.b' opcodes.
00000000                            ; ---------------------------------------------------------------------------
00000000                            rev02even:	 macro
00000000                            	if Revision=2
00000000                            		even
00000000                            	endc
00000000                                endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Depending on if RemoveJmpTos is set or not, these macros will create a jump directly
00000000                            ; to the destination, or create a branch to a JmpTo
00000000                            ; ---------------------------------------------------------------------------
00000000                            jsrto:		 macro directaddr,indirectaddr
00000000                            	if RemoveJmpTos
00000000                            		jsr (\directaddr).l	; jump directly to address
00000000                            	else
00000000                            		bsr.w \indirectaddr	; otherwise, branch to an indirect JmpTo
00000000                            	endc
00000000                                endm
00000000                            
00000000                            jmpto:		 macro directaddr,indirectaddr
00000000                            	if RemoveJmpTos
00000000                            		jmp (\directaddr).l	; jump directly to address
00000000                            	else
00000000                            		bra.w \indirectaddr	; otherwise, branch to an indirect JmpTo
00000000                            	endc
00000000                                endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad RAM sections so that they are divisible by a longword,
00000000                            ; and organize ram into blocks for clear_ram macro
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            rsalign:	macro
00000000                            		rs.b (\1-(__rs%\1))%\1
00000000                            		endm
00000000                            
00000000                            rsblock:	macro
00000000                            		rsalign 2					; align to even address
00000000                            		\1\: equ __rs
00000000                            		endm
00000000                            
00000000                            rsblockend:	macro ; Adapted to Sonic 2's macro-based RAM clearing
00000000                            		\1\_end:	equ __rs
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Organise object RAM usage.
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            rsobj:		macro name,start
00000000                            		rsobj_name: equs "\name"			; remember name of current object
00000000                            		ifarg \start
00000000                          M 	if	strlen("\start")>0
00000000                            		rsset \start					; start at specified position
00000000                            		else
00000000                            		rsset ost_used					; start at end of regular OST usage
00000000                            		endc
00000000                            		pusho						; save options
00000000                            		opt	ae+					; enable auto evens
00000000                            		endm
00000000                            
00000000                            rsobjend:	macro
00000000                            		if __rs>sizeof_ost
00000000                            		inform	3,"OST for \rsobj_name exceeds maximum by $%h bytes.",__rs-sizeof_ost
00000000                            		else
00000000                            		;inform	0,"0-$%h bytes of OST for \rsobj_name used, leaving $%h bytes unused.",__rs-1,sizeof_ost-__rs
00000000                            		endc
00000000                            		popo
00000000                            		endm
00000000                            		
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Clear an area of RAM.
00000000                            ; input: start address, end address
00000000                            ; ---------------------------------------------------------------------------		
00000000                            		
00000000                            clear_ram:		 macro startaddr,endaddr
00000000                            	if startaddr>endaddr
00000000                            		inform 3,"Starting address of clearRAM $%h is after ending address $%h.",startaddr,endaddr
00000000                                elseif startaddr=endaddr
00000000                            		inform 1,"clearRAM is clearing zero bytes. Turning this into a nop instead."
00000000                            		mexit
00000000                                endc
00000000                                if ((startaddr)&$8000)=0
00000000                            		lea	(startaddr).l,a1
00000000                                else
00000000                            		lea	(startaddr).w,a1
00000000                               	endc
00000000                            		moveq	#0,d0
00000000                                if ((startaddr)&1)
00000000                            		move.b	d0,(a1)+
00000000                                endc
00000000                            		move.w	(endaddr-startaddr)/4)-1,d1
00000000                            	.loop\@:	
00000000                            		move.l	d0,(a1)+
00000000                            		dbf	d1,.loop\@
00000000                                if (((endaddr-startaddr)-((startaddr)&1))&2)
00000000                            		move.w	d0,(a1)+
00000000                                endc
00000000                                if (((endaddr-startaddr)-((startaddr)&1))&1)
00000000                            		move.b	d0,(a1)+
00000000                                endc
00000000                                	endm		
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Create a pointer index.
00000000                            ; input: start location (usually offset(*) or 0; leave blank to make pointers
00000000                            ; relative to themselves), id start (default 0), id increment (default 1)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            index:		macro start,idstart,idinc
00000000                            		nolist
00000000                            		pusho
00000000                            		opt	m-
00000000                            		ifarg \start					; check if start is defined
00000000                          M 	if	strlen("\start")>0
00000000                            		index_start: = \start
00000000                            		else
00000000                            		index_start: = -1
00000000                            		endc
00000000                            		ifarg \0					; check if width is defined (b, w, l)
00000000                          M 	if	strlen("\0")>0
00000000                            		index_width: equs "\0"
00000000                            		else
00000000                            		index_width: equs "w"				; use w by default
00000000                            		endc
00000000                            		
00000000                            		ifarg \idstart					; check if first pointer id is defined
00000000                          M 	if	strlen("\idstart")>0
00000000                            		ptr_id: = \idstart
00000000                            		else
00000000                            		ptr_id: = 0					; use 0 by default
00000000                            		endc
00000000                            		ifarg \idinc					; check if pointer id increment is defined
00000000                          M 	if	strlen("\idinc")>0
00000000                            		ptr_id_inc: = \idinc
00000000                            		else
00000000                            		ptr_id_inc: = 1					; use 1 by default
00000000                            		endc
00000000                            		
00000000                            		popo
00000000                            		list
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Item in a pointer index.
00000000                            ; input: pointer target, pointer label array (optional)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ptr:		macro
00000000                            		nolist
00000000                            		pusho
00000000                            		opt	m-
00000000                            		if index_start=-1
00000000                            		dc.\index_width \1-offset(*)
00000000                            		else
00000000                            		dc.\index_width \1-index_start
00000000                            		endc
00000000                            		
00000000                            		if ~def(prefix_id)
00000000                            		prefix_id: equs "id_"
00000000                            		endc
00000000                            		
00000000                            		if instr("\1",".")=1				; check if pointer is local
00000000                            		else
00000000                            			if ~def(\prefix_id\\1)
00000000                            			\prefix_id\\1: equ ptr_id		; create id for pointer
00000000                            			else
00000000                            			\prefix_id\\1_\$ptr_id: equ ptr_id	; if id already exists, append number
00000000                            			endc
00000000                            		endc
00000000                            		
00000000                            		ptr_id: = ptr_id+ptr_id_inc			; increment id
00000000                            		popo
00000000                            		list
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		ifarg \controlport
00000000                          M 	if	strlen("\controlport")>0
00000000                            		move.l	#($40000000+(((loc)&$3FFF)<<16)+(((loc)&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+(((loc)&$3FFF)<<16)+(((loc)&$C000)>>14)),\controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to VRAM/CRAM/VSRAM.
00000000                            ; input: source, length, destination ([vram address]|cram|vsram),
00000000                            ; cram/vsram destination (0 by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            dma:		macro
00000000                            		dma_type: = $4000
00000000                            		dma_type2: = $80
00000000                            		
00000000                            		if strcmp("\3","cram")
00000000                            		dma_type: = $C000
00000000                            			if strlen("\4")=0
00000000                            			dma_dest: = 0
00000000                            			else
00000000                            			dma_dest: = \4
00000000                            			endc
00000000                            		elseif strcmp("\3","vsram")
00000000                            		dma_type2: = $90
00000000                            			if strlen("\4")=0
00000000                            			dma_dest: = 0
00000000                            			else
00000000                            			dma_dest: = \4
00000000                            			endc
00000000                            		else
00000000                            		dma_dest: = \3
00000000                            		endc
00000000                            		
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#dma_type+(dma_dest&$3FFF),(a5)
00000000                            		move.w	#dma_type2+((dma_dest&$C000)>>14),(v_vdp_dma_buffer).w
00000000                            		move.w	(v_vdp_dma_buffer).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a byte value.
00000000                            ; input: value, length, destination
00000000                            ; uses d1, a5
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            dma_fill:	macro value,length,dest
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)				; set VDP increment to 1 byte
00000000                            		move.l	#$94000000+(((length)&$FF00)<<8)+$9300+((length)&$FF),(a5) ; set length of DMA
00000000                            		move.w	#$9780,(a5)				; set DMA mode to fill
00000000                            		move.l	#$40000080+(((dest)&$3FFF)<<16)+(((dest)&$C000)>>14),(a5) ; set target of DMA
00000000                            		move.w	#value<<8,(vdp_data_port).l		; set byte to fill with
00000000                            	.wait_for_dma\@:
00000000                            		move.w	(a5),d1					; get status register
00000000                            		btst	#1,d1					; is DMA in progress?
00000000                            		bne.s	.wait_for_dma\@				; if yes, branch
00000000                            		move.w	#$8F02,(a5)				; set VDP increment 2 bytes
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Disable display
00000000                            ; uses d0
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_display:	macro
00000000                            		move.w	(v_vdp_mode_buffer).w,d0		; $81xx
00000000                            		andi.b	#$BF,d0					; clear bit 6
00000000                          M 	anxi.b	#$bf,d0
00000000                            		move.w	d0,(vdp_control_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Enable display
00000000                            ; uses d0
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_display:	macro
00000000                            		move.w	(v_vdp_mode_buffer).w,d0		; $81xx
00000000                            		ori.b	#$40,d0					; set bit 6
00000000                          M 	oxi.b	#$40,d0
00000000                            		move.w	d0,(vdp_control_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	.end:
00000000                            		if (.end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(.end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copy_tilemap:	macro source,loc,x,y,width,height
00000000                            		lea	(source).l,a1
00000000                            		vram_loc: = (loc)+(sizeof_vram_row*(y))+((x)*2)
00000000                            		locVRAM	vram_loc,d0
00000000                            		moveq	#width-1,d1
00000000                            		moveq	#height-1,d2
00000000                            		bsr.w	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (ost_x_pos(a0) by default)
00000000                            ; uses d0, d1
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		ifarg \pos
00000000                          M 	if	strlen("\pos")>0
00000000                            		move.w	pos,d0					; get object position (if specified as not ost_x_pos)
00000000                            		else
00000000                            		move.w	ost_x_pos(a0),d0			; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0				; round down to nearest $80
00000000                          M 	anxi.w	#$ff80,d0
00000000                            		move.w	(v_camera_x_pos).w,d1			; get screen position
00000000                            		subi.w	#128,d1
00000000                          M 	sxbi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                          M 	anxi.w	#$ff80,d1
00000000                            		sub.w	d1,d0					; d0 = approx distance between object and screen (negative if object is left of screen)
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit					; branch if d0 is negative or higher than 640
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Sprite mappings header and footer
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ;spritemap:	macro
00000000                            ;		if ~def(current_sprite)
00000000                            ;		current_sprite: = 1
00000000                            ;		endc
00000000                            ;		sprite_start: = *+1
00000000                            ;		dc.b (sprite_\#current_sprite-sprite_start)/5
00000000                            ;		endm
00000000                            
00000000                            ;endsprite:	macro
00000000                            ;		sprite_\#current_sprite: equ *
00000000                            ;		current_sprite: = current_sprite+1
00000000                            ;		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Sprite mappings piece
00000000                            ; input: xpos, ypos, size, tile index
00000000                            ; optional: xflip, yflip, pal2|pal3|pal4, hi (any order)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ;piece:		macro
00000000                            ;		dc.b \2		; ypos
00000000                            ;		sprite_width:	substr	1,1,"\3"
00000000                            ;		sprite_height:	substr	3,3,"\3"
00000000                            ;		dc.b ((sprite_width-1)<<2)+sprite_height-1
00000000                            ;		sprite_xpos: = \1
00000000                            ;		if \4<0						; is tile index negative?
00000000                            ;			sprite_tile: = $10000+(\4)		; convert signed to unsigned
00000000                            ;		else
00000000                            ;			sprite_tile: = \4
00000000                            ;		endc
00000000                            ;		
00000000                            ;		sprite_xflip: = 0
00000000                            ;		sprite_yflip: = 0
00000000                            ;		sprite_hi: = 0
00000000                            ;		sprite_pal: = 0
00000000                            ;		rept narg-4
00000000                            ;			if strcmp("\5","xflip")
00000000                            ;			sprite_xflip: = $800
00000000                            ;			elseif strcmp("\5","yflip")
00000000                            ;			sprite_yflip: = $1000
00000000                            ;			elseif strcmp("\5","hi")
00000000                            ;			sprite_hi: = $8000
00000000                            ;			elseif strcmp("\5","pal2")
00000000                            ;			sprite_pal: = $2000
00000000                            ;			elseif strcmp("\5","pal3")
00000000                            ;			sprite_pal: = $4000
00000000                            ;			elseif strcmp("\5","pal4")
00000000                            ;			sprite_pal: = $6000
00000000                            ;			else
00000000                            ;			endc
00000000                            ;		shift
00000000                            ;		endr
00000000                            		
00000000                            ;		dc.w (sprite_tile+sprite_xflip+sprite_yflip+sprite_hi+sprite_pal)&$FFFF
00000000                            ;		dc.b sprite_xpos
00000000                            ;		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object placement
00000000                            ; input: xpos, ypos, object id, subtype
00000000                            ; optional: xflip, yflip, rem (any order)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            objpos:		macro
00000000                            		dc.w \1		; xpos
00000000                            		obj_ypos: = \2
00000000                            		if strcmp("\3","0")
00000000                            		obj_id: = 0
00000000                            		else
00000000                            		obj_id: = id_\3
00000000                            		endc
00000000                            		obj_sub\@: equ \4
00000000                            		obj_xflip: = 0
00000000                            		obj_yflip: = 0
00000000                            		obj_rem: = 0
00000000                            		rept narg-4
00000000                            			if strcmp("\5","xflip")
00000000                            			obj_xflip: = $4000
00000000                            			elseif strcmp("\5","yflip")
00000000                            			obj_yflip: = $8000
00000000                            			elseif strcmp("\5","rem")
00000000                            			obj_rem: = $80
00000000                            			else
00000000                            			endc
00000000                            		shift
00000000                            		endr
00000000                            		
00000000                            		dc.w obj_ypos+obj_xflip+obj_yflip
00000000                            		dc.b obj_id+obj_rem, obj_sub\@
00000000                            		endm
00000000                            
00000000                            endobj:		macro
00000000                            		objpos $FFFF,0,0,0
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Define a little-endian 16-bit pointer for the z80 sound driver
00000000                            ; input: address of pointer target
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            z80_ptr: macro addr
00000000                            		;dc.w ((((\addr&$7FFF)+$8000)<<8)&$FF00)+(((\addr&$7FFF)+$8000)>>8)	
00000000                            		dc.w (((\addr)<<8)&$FF00)|(((\addr)>>8)&$FF)|$80	
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Define and align the start of a sound bank
00000000                            ; ---------------------------------------------------------------------------
00000000                            start_bank macro *
00000000                            	align	$8000
00000000                            sound_bank_start = \*
00000000                            sound_bank_name = "\*"
00000000                                endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; End a sound bank and halt assembly if it is too large
00000000                            ; Can also print the amount of free space in a bank with DebugSoundbanks set
00000000                            ; ---------------------------------------------------------------------------
00000000 =00000000                  DebugSoundbanks = 0
00000000                            
00000000                            finish_bank macro *
00000000                            	if * > sound_bank_start+$8000
00000000                            		inform 3,"SoundBank %s must fit in $8000 bytes but was $%h. Try moving something to another bank.",sound_bank_name,*-sound_bank_start
00000000                            	elseif DebugSoundbanks<>0
00000000                            		inform 0,"SoundBank %s has $%h bytes free at end.",sound_bank_name,$8000+sound_bank_start-*
00000000                            	endif
00000000                                endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Define an external file
00000000                            ; input: label, file name (including folder), extension (actual),
00000000                            ;  extension (uncompressed)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            filedef:	macro lbl,file,ex1,ex2
00000000                            		filename: equs \file				; get file name without quotes
00000000                            		file_\lbl: equs "\filename\.\ex1"		; record file name
00000000                            		sizeof_\lbl: equ filesize("\filename\.\ex2")	; record file size of associated uncompressed file
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Incbins a file
00000000                            ; input: label (must have been declared by filedef)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            incfile:	macro lbl
00000000                            		filename: equs file_\lbl			; get file name
00000000                            	\lbl:	incbin	"\filename"				; write file to ROM
00000000                            		even
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Declares a blank object
00000000                            ; input: label
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            blankobj:	macro
00000000                            	\1:	rts
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jcond:		macro btype,jumpto
00000000                            		btype.s	.nojump\@
00000000                            		jmp	jumpto
00000000                            	.nojump\@:
00000000                            		endm
00000000                            
00000000                            jhi:		macro
00000000                            		jcond bls,\1
00000000                            		endm
00000000                            
00000000                            jcc:		macro
00000000                            		jcond bcs,\1
00000000                            		endm
00000000                            
00000000                            jhs:		macro
00000000                            		jcc	\1
00000000                            		endm
00000000                            
00000000                            jls:		macro
00000000                            		jcond bhi,\1
00000000                            		endm
00000000                            
00000000                            jcs:		macro
00000000                            		jcond bcc,\1
00000000                            		endm
00000000                            
00000000                            jlo:		macro
00000000                            		jcs	\1
00000000                            		endm
00000000                            
00000000                            jeq:		macro
00000000                            		jcond bne,\1
00000000                            		endm
00000000                            
00000000                            jne:		macro
00000000                            		jcond beq,\1
00000000                            		endm
00000000                            
00000000                            jgt:		macro
00000000                            		jcond ble,\1
00000000                            		endm
00000000                            
00000000                            jge:		macro
00000000                            		jcond blt,\1
00000000                            		endm
00000000                            
00000000                            jle:		macro
00000000                            		jcond bgt,\1
00000000                            		endm
00000000                            
00000000                            jlt:		macro
00000000                            		jcond bge,\1
00000000                            		endm
00000000                            
00000000                            jpl:		macro
00000000                            		jcond bmi,\1
00000000                            		endm
00000000                            
00000000                            jmi:		macro
00000000                            		jcond bpl,\1
00000000                            		endm
00000000                            		include "sound/SMPS2ASM 68K.asm"
00000000                            ; ===========================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; Converted to ASM68K by OrionNavattan, with bits from Natsumi
00000000                            ; ===========================================================================
00000000                            ; Permission to use, copy, modify, and/or distribute this software for any
00000000                            ; purpose with or without fee is hereby granted.
00000000                            ;
00000000                            ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
00000000                            ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
00000000                            ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
00000000                            ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSequENTIAL DAMAGES OR ANY DAMAGES
00000000                            ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
00000000                            ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
00000000                            ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros to emulate a subset of the behavior of the enum commands in AS
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ; Emulate the enum counter increment setting in AS
00000000                            ;enumconf: macro	
00000000                            ;incr:	equ \1
00000000                            ;		endm
00000000                            
00000000                            ; Emulate the enum and nextenum functions of AS
00000000                            enum:	macro	num,lable
00000000                            ; copy initial number for referencing later
00000000                            .num: =	num
00000000                            		rept narg-1
00000000                            \lable		set .num
00000000                            .num: =	.num+1
00000000                            		shift
00000000                            		endr
00000000                            		endm
00000000                                
00000000                                
00000000                            ;SMPS2ASMVer	= 1
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            ;psgdelta:	equ 12  
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000                            ;		enumconf $C
00000000                            ;		enum $88,						smpsPitch10lo,smpsPitch09lo,smpsPitch08lo,smpsPitch07lo,smpsPitch06lo
00000000                            ;		enum smpsPitch06lo+$C,	smpsPitch05lo,smpsPitch04lo,smpsPitch03lo,smpsPitch02lo,smpsPitch01lo
00000000                            ;		enum 0,							smpsPitch00,smpsPitch01hi,smpsPitch02hi,smpsPitch03hi,smpsPitch04hi
00000000                            ;		enum smpsPitch04hi+$C,			smpsPitch05hi,smpsPitch06hi,smpsPitch07hi,smpsPitch08hi,smpsPitch09hi
00000000                            ;		enum smpsPitch09hi+$C,			smpsPitch10hi
00000000                            	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Note Equates
00000000                            		;enumconf 1
00000000                            		enum $80,  nRst,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0
00000000 =00000080                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =00000080                M nrst	set	.num
00000000 =00000081                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000081                M nc0	set	.num
00000000 =00000082                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000082                M ncs0	set	.num
00000000 =00000083                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000083                M nd0	set	.num
00000000 =00000084                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000084                M neb0	set	.num
00000000 =00000085                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000085                M ne0	set	.num
00000000 =00000086                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000086                M nf0	set	.num
00000000 =00000087                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000087                M nfs0	set	.num
00000000 =00000088                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000088                M ng0	set	.num
00000000 =00000089                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000089                M nab0	set	.num
00000000 =0000008A                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008A                M na0	set	.num
00000000 =0000008B                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008B                M nbb0	set	.num
00000000 =0000008C                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008C                M nb0	set	.num
00000000 =0000008D                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB0+1,	nC1,nCs1,nD1,nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1
00000000 =0000008D                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =0000008D                M nc1	set	.num
00000000 =0000008E                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008E                M ncs1	set	.num
00000000 =0000008F                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008F                M nd1	set	.num
00000000 =00000090                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000090                M neb1	set	.num
00000000 =00000091                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000091                M ne1	set	.num
00000000 =00000092                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000092                M nf1	set	.num
00000000 =00000093                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000093                M nfs1	set	.num
00000000 =00000094                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000094                M ng1	set	.num
00000000 =00000095                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000095                M nab1	set	.num
00000000 =00000096                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000096                M na1	set	.num
00000000 =00000097                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000097                M nbb1	set	.num
00000000 =00000098                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000098                M nb1	set	.num
00000000 =00000099                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB1+1,	nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2,nG2,nAb2,nA2,nBb2,nB2
00000000 =00000099                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =00000099                M nc2	set	.num
00000000 =0000009A                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000009A                M ncs2	set	.num
00000000 =0000009B                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000009B                M nd2	set	.num
00000000 =0000009C                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000009C                M neb2	set	.num
00000000 =0000009D                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000009D                M ne2	set	.num
00000000 =0000009E                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000009E                M nf2	set	.num
00000000 =0000009F                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000009F                M nfs2	set	.num
00000000 =000000A0                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A0                M ng2	set	.num
00000000 =000000A1                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A1                M nab2	set	.num
00000000 =000000A2                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A2                M na2	set	.num
00000000 =000000A3                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A3                M nbb2	set	.num
00000000 =000000A4                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A4                M nb2	set	.num
00000000 =000000A5                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB2+1,	nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3,nB3
00000000 =000000A5                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =000000A5                M nc3	set	.num
00000000 =000000A6                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A6                M ncs3	set	.num
00000000 =000000A7                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A7                M nd3	set	.num
00000000 =000000A8                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A8                M neb3	set	.num
00000000 =000000A9                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000A9                M ne3	set	.num
00000000 =000000AA                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000AA                M nf3	set	.num
00000000 =000000AB                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000AB                M nfs3	set	.num
00000000 =000000AC                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000AC                M ng3	set	.num
00000000 =000000AD                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000AD                M nab3	set	.num
00000000 =000000AE                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000AE                M na3	set	.num
00000000 =000000AF                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000AF                M nbb3	set	.num
00000000 =000000B0                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B0                M nb3	set	.num
00000000 =000000B1                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB3+1,	nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4
00000000 =000000B1                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =000000B1                M nc4	set	.num
00000000 =000000B2                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B2                M ncs4	set	.num
00000000 =000000B3                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B3                M nd4	set	.num
00000000 =000000B4                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B4                M neb4	set	.num
00000000 =000000B5                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B5                M ne4	set	.num
00000000 =000000B6                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B6                M nf4	set	.num
00000000 =000000B7                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B7                M nfs4	set	.num
00000000 =000000B8                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B8                M ng4	set	.num
00000000 =000000B9                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000B9                M nab4	set	.num
00000000 =000000BA                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000BA                M na4	set	.num
00000000 =000000BB                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000BB                M nbb4	set	.num
00000000 =000000BC                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000BC                M nb4	set	.num
00000000 =000000BD                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB4+1,	nC5,nCs5,nD5,nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5
00000000 =000000BD                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =000000BD                M nc5	set	.num
00000000 =000000BE                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000BE                M ncs5	set	.num
00000000 =000000BF                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000BF                M nd5	set	.num
00000000 =000000C0                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C0                M neb5	set	.num
00000000 =000000C1                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C1                M ne5	set	.num
00000000 =000000C2                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C2                M nf5	set	.num
00000000 =000000C3                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C3                M nfs5	set	.num
00000000 =000000C4                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C4                M ng5	set	.num
00000000 =000000C5                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C5                M nab5	set	.num
00000000 =000000C6                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C6                M na5	set	.num
00000000 =000000C7                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C7                M nbb5	set	.num
00000000 =000000C8                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000C8                M nb5	set	.num
00000000 =000000C9                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB5+1,	nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6,nG6,nAb6,nA6,nBb6,nB6
00000000 =000000C9                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =000000C9                M nc6	set	.num
00000000 =000000CA                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000CA                M ncs6	set	.num
00000000 =000000CB                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000CB                M nd6	set	.num
00000000 =000000CC                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000CC                M neb6	set	.num
00000000 =000000CD                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000CD                M ne6	set	.num
00000000 =000000CE                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000CE                M nf6	set	.num
00000000 =000000CF                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000CF                M nfs6	set	.num
00000000 =000000D0                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D0                M ng6	set	.num
00000000 =000000D1                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D1                M nab6	set	.num
00000000 =000000D2                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D2                M na6	set	.num
00000000 =000000D3                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D3                M nbb6	set	.num
00000000 =000000D4                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D4                M nb6	set	.num
00000000 =000000D5                M .num:	=	.num+1
00000000                          M 	shift
00000000                            		enum nB6+1,	nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
00000000 =000000D5                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =000000D5                M nc7	set	.num
00000000 =000000D6                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D6                M ncs7	set	.num
00000000 =000000D7                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D7                M nd7	set	.num
00000000 =000000D8                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D8                M neb7	set	.num
00000000 =000000D9                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000D9                M ne7	set	.num
00000000 =000000DA                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000DA                M nf7	set	.num
00000000 =000000DB                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000DB                M nfs7	set	.num
00000000 =000000DC                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000DC                M ng7	set	.num
00000000 =000000DD                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000DD                M nab7	set	.num
00000000 =000000DE                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000DE                M na7	set	.num
00000000 =000000DF                M .num:	=	.num+1
00000000                          M 	shift
00000000 =000000DF                M nbb7	set	.num
00000000 =000000E0                M .num:	=	.num+1
00000000                          M 	shift
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000                            ;	if SonicDriverVer<=2	
00000000 =000000C6                  nMaxPSG				equ nA5
00000000                            ;nMaxPSG1			equ nA5+psgdelta
00000000                            ;nMaxPSG2			equ nA5+psgdelta
00000000                            ;	else
00000000                            ;nMaxPSG				equ nBb6-psgdelta
00000000                            ;nMaxPSG1			equ nBb6
00000000                            ;nMaxPSG2			equ nB6
00000000                            ;endc
00000000                            	
00000000                            ; ---------------------------------------------------------------------------	
00000000                            ; PSG volume envelope equates
00000000                            ;	case SonicDriverVer
00000000                            ;		=1
00000000                            			
00000000                            ;			enum 1,			fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
00000000                            ;			enum fTone_06+1,fTone_07,fTone_08,fTone_09
00000000                            
00000000                            ;		=2	
00000000                            			enum 1,			fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
00000000 =00000001                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =00000001                M ftone_01	set	.num
00000000 =00000002                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000002                M ftone_02	set	.num
00000000 =00000003                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000003                M ftone_03	set	.num
00000000 =00000004                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000004                M ftone_04	set	.num
00000000 =00000005                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000005                M ftone_05	set	.num
00000000 =00000006                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000006                M ftone_06	set	.num
00000000 =00000007                M .num:	=	.num+1
00000000                          M 	shift
00000000                            			enum fTone_06+1,fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
00000000 =00000007                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =00000007                M ftone_07	set	.num
00000000 =00000008                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000008                M ftone_08	set	.num
00000000 =00000009                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000009                M ftone_09	set	.num
00000000 =0000000A                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000000A                M ftone_0a	set	.num
00000000 =0000000B                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000000B                M ftone_0b	set	.num
00000000 =0000000C                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000000C                M ftone_0c	set	.num
00000000 =0000000D                M .num:	=	.num+1
00000000                          M 	shift
00000000                            			enum fTone_0C+1,fTone_0D
00000000 =0000000D                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =0000000D                M ftone_0d	set	.num
00000000 =0000000E                M .num:	=	.num+1
00000000                          M 	shift
00000000                            			
00000000                            ;		>=3
00000000                            			
00000000                            ;			enum 1,			sTone_01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
00000000                            ;			enum sTone_06+1,sTone_07,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
00000000                            ;			enum sTone_0C+1,sTone_0D,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
00000000                            ;			enum sTome_12+1,sTone_13,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
00000000                            ;			enum sTone_18+1,sTone_19,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
00000000                            ;			enum sTone_1E+1,sTone_1F,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
00000000                            ;			enum sTone_24+1,sTone_25,sTone_26,sTone_27
00000000                            ;			
00000000                            			; For conversions:
00000000                            ;			if SonicDriverVer>=5
00000000                            				;nextenum	fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
00000000                            				;nextenum	fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
00000000                            				;nextenum	fTone_0D
00000000                            ;				enum sTone_27+1,fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
00000000                            ;				enum fTone_06+1,fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
00000000                            ;				enum fTone_0C+1,fTone_0D
00000000                            ;			endc
00000000                            ;	endcase	
00000000                            	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000                            
00000000                            ;	case SonicDriverVer
00000000                            ;		=1
00000000                            ;			enum $81,		dKick,dSnare,dTimpani
00000000                            ;			enum $88,		dHiTimpani,dMidTimpani,dLowTimpani,dVLowTimpani
00000000                            ;		=2
00000000                            			enum $81,			dKick,dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
00000000 =00000081                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =00000081                M dkick	set	.num
00000000 =00000082                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000082                M dsnare	set	.num
00000000 =00000083                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000083                M dclap	set	.num
00000000 =00000084                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000084                M dscratch	set	.num
00000000 =00000085                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000085                M dtimpani	set	.num
00000000 =00000086                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000086                M dhitom	set	.num
00000000 =00000087                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000087                M dvlowclap	set	.num
00000000 =00000088                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000088                M dhitimpani	set	.num
00000000 =00000089                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000089                M dmidtimpani	set	.num
00000000 =0000008A                M .num:	=	.num+1
00000000                          M 	shift
00000000                            			enum dMidTimpani+1,	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
00000000 =0000008A                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =0000008A                M dlowtimpani	set	.num
00000000 =0000008B                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008B                M dvlowtimpani	set	.num
00000000 =0000008C                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008C                M dmidtom	set	.num
00000000 =0000008D                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008D                M dlowtom	set	.num
00000000 =0000008E                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008E                M dfloortom	set	.num
00000000 =0000008F                M .num:	=	.num+1
00000000                          M 	shift
00000000 =0000008F                M dhiclap	set	.num
00000000 =00000090                M .num:	=	.num+1
00000000                          M 	shift
00000000                            			enum dHiClap+1,		dMidClap,dLowClap
00000000 =00000090                M .num:	=	num
00000000                          M 	rept	narg-1
00000000 =00000090                M dmidclap	set	.num
00000000 =00000091                M .num:	=	.num+1
00000000                          M 	shift
00000000 =00000091                M dlowclap	set	.num
00000000 =00000092                M .num:	=	.num+1
00000000                          M 	shift
00000000                            
00000000                                
00000000                            ;		>=3;SonicDriverVer>=3
00000000                            ;			if (use_s3_samples<>0)|(use_sk_samples<>0)|(use_s3d_samples<>0)
00000000                            				
00000000                            ;				enum $81,				dSnareS3,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
00000000                            ;				enum dMuffledSnare+1,	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
00000000                            ;				enum dHighMetalHit+1,	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
00000000                            ;				enum dElectricHighTom+1,dElectricMidTom,dElectricLowTom,dElectricFloorTom
00000000                            ;				enum dElectricFloorTom+1,dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
00000000                            ;				enum dLooserSnare+1,	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
00000000                            ;				enum dQuickLooseSnare+1,dClick,dPowerKick,dQuickGlassCrash
00000000                            				
00000000                            ;			if (use_s3_samples<>0)|(use_sk_samples<>0)
00000000                            			
00000000                            				
00000000                            ;				enum dQuickGlassCrash+1,dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
00000000                            ;				enum dQuietGlassCrash+1,dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
00000000                            ;				enum dLooseKick+1,		dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
00000000                            ;				enum dLowWoodBlock+1,	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
00000000                            ;				enum dEchoedClapHit+1,	dLowerEchoedClapHit,dHipHopHitKick,dHipHopHitPowerKick
00000000                            ;				enum dHipHopHitPowerKick+1,dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
00000000                            ;				enum dHipHopHitKick3+1,	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
00000000                            ;				enum dPowerKick2+1,		dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
00000000                            ;				enum dPowerKickHit+1,	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
00000000                            ;			endc
00000000                            ;			endc
00000000                            ;			; For conversions:
00000000                            ;			if (use_s2_samples<>0)
00000000                            ;				if (use_s3_samples<>0)|(use_sk_samples<>0)|(use_s3d_samples<>0)
00000000                            ;					enum dLowestPowerKickHit+1,	dKick
00000000                            ;				else
00000000                            ;					enum $81, dKick
00000000                            ;				endc
00000000                            ;				enum dKick+1, dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
00000000                            ;				enum dMidTimpani+1,	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
00000000                            ;				enum dHiClap+1,		dMidClap,dLowClap
00000000                            
00000000                            ;			endc
00000000                            ;			if (use_s3d_samples<>0)
00000000                            ;				nextenum	dFinalFightMetalCrash,dIntroKick
00000000                            ;			endc
00000000                            ;			if (use_s3_samples<>0)
00000000                            ;				nextenum	dEchoedClapHit_S3,dLowerEchoedClapHit_S3
00000000                            ;			endc
00000000                            ;	endcase	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1:				equ $80
00000000 =000000A0                  cPSG2:				equ $A0
00000000 =000000C0                  cPSG3:				equ $C0
00000000 =000000E0                  cNoise:				equ $E0
00000000 =00000002                  cFM3:				equ $02
00000000 =00000004                  cFM4:				equ $04
00000000 =00000005                  cFM5:				equ $05
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            songStart\@ equ offset(*)
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            ;	if offset(songStart)<>offset(*)
00000000                            ;		inform 3,"smpsHeaderStartSong is missing."
00000000                            ;	endc
00000000                            		z80_ptr \loc
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            ;	if songStart<>*
00000000                            ;		fatal "Missing smpsHeaderStartSong"
00000000                            ;	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            	
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            		dc.b	\fm
00000000                            	ifarg /1
00000000                          M 	if	strlen("/1")>0
00000000                            		dc.b	\psg
00000000                            	endc	
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b \div,\mod
00000000                                endm
00000000                            
00000000                            	
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	z80_ptr \loc
00000000                            	if narg>=2
00000000                            		dc.b \pitch
00000000                            		if narg>=3
00000000                            			dc.b \vol
00000000                            		else
00000000                            			dc.b $00
00000000                            		endc
00000000                            	else
00000000                            		dc.w $00
00000000                            	endc
00000000                                endm
00000000                            
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM	macro loc,pitch,vol
00000000                            		z80_ptr \loc
00000000                            		dc.b \pitch,\vol
00000000                                endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            		z80_ptr \loc
00000000                            		dc.b \pitch,\vol,\mod,\voice
00000000                            	endm
00000000                            		
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            		dc.b	\div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            		dc.b	\chan
00000000                            	endm
00000000                            		
00000000                            ; Header - Set up FM Channel for SFX
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            		dc.b $80,\chanid
00000000                            		z80_ptr \loc
00000000                            		dc.b \pitch,\vol
00000000                            	endm		
00000000                            	
00000000                            ; ---------------------------------------------------------------------------	
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; Equates for different panning types
00000000 =00000000                  panNone =	$00
00000000 =00000040                  panRight =	$40
00000000 =00000080                  panLeft =	$80
00000000 =000000C0                  panCentre =	$C0  ; silly Brits :U
00000000 =000000C0                  panCenter =	$C0
00000000                            
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            
00000000                            smpsPan		macro dir,amsfms
00000000                            	if narg=2
00000000                            		dc.b $E0,\dir|\amsfms
00000000                            	else
00000000                            		dc.b $E0,\dir
00000000                            	endif
00000000                                endm
00000000                            
00000000                            ; E1xx - Set channel detune to val
00000000                            smpsAlterNote macro val
00000000                            		dc.b $E1,\val
00000000                            	endm
00000000                            	
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            		dc.b $E2,\val
00000000                            	endm	
00000000                            	
00000000                            ; E3 - Return (used after smpsCall)
00000000                            smpsReturn macro
00000000                            		dc.b $E3
00000000                            	endm
00000000                            
00000000                            ; E4 - Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro
00000000                            		dc.b $E4
00000000                            	endm	
00000000                            	
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            		dc.b	$E5,\val
00000000                            	endm	
00000000                            	
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            		dc.b $E6,\val
00000000                            	endm
00000000                            	
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack equ $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b $E8,\val
00000000                            	endm
00000000                            
00000000                            ; E9xx - Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            		dc.b $E9,\val
00000000                            	endm
00000000                            	
00000000                            ; EAxx - Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            		dc.b $EA,\mod
00000000                            	endm
00000000                            	
00000000                            ; EBxx - Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            		dc.b	$EB,\val
00000000                            	endm	
00000000                            	
00000000                            ; ECxx - Add xx to PSG channel volume
00000000                            smpsPSGAlterVol macro vol
00000000                            		dc.b $EC,\vol
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice
00000000                            		dc.b $EF,\voice
00000000                            	endm	
00000000                            	
00000000                            ; F0wwxxyyzz - Modulation
00000000                            ; ww: wait time
00000000                            ; xx: modulation speed
00000000                            ; yy: change per step
00000000                            ; zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step	
00000000                            		dc.b $F0,\wait,\speed,\change,\step
00000000                                endm
00000000                            
00000000                            ; F1 - Turn on Modulation
00000000                            smpsModOn	 macro
00000000                            		dc.b $F1
00000000                                endm
00000000                                
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            		dc.b $F2
00000000                            	endm  
00000000                            	
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            		dc.b $F3,\form
00000000                            	endm	
00000000                            	
00000000                            ; F4 - Turn off Modulation 
00000000                            smpsModOff	macro
00000000                            		dc.b $F4
00000000                                endm
00000000                                
00000000                             ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            		dc.b $F5,\voice
00000000                            	endm 
00000000                            	
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            		dc.b $F6
00000000                            		z80_ptr \loc
00000000                            	endm
00000000                            	
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            		dc.b $F7,\index,\loops
00000000                            		z80_ptr \loc
00000000                            	endm
00000000                            	
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            		dc.b $F8
00000000                            		z80_ptr \loc
00000000                            	endm
00000000                            	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback = \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm = \val
00000000                            	endm
00000000                            	
00000000                            smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
00000000                            vcUnusedBits = \val
00000000                            	if strlen("\2")>0; \d1r1
00000000                            vcD1R1Unk = \d1r1
00000000                            	else
00000000                            vcD1R1Unk = 0
00000000                            	endc
00000000                            	if strlen("\3")>0; \d1r2
00000000                            vcD1R2Unk = \d1r2
00000000                            	else
00000000                            vcD1R2Unk = 0
00000000                            	endc
00000000                            	
00000000                            	if strlen("\4")>0; \d1r3
00000000                            vcD1R3Unk = \d1r3
00000000                            	else
00000000                            vcD1R3Unk = 0
00000000                            	endc
00000000                            	if strlen("\5")>0; \d1r4
00000000                            vcD1R4Unk = \d1r4
00000000                            	else
00000000                            vcD1R4Unk = 0
00000000                            	endc
00000000                            	endm		
00000000                            	
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 = \op1
00000000                            vcDT2 = \op2		
00000000                            vcDT3 = \op3	
00000000                            vcDT4 = \op4	
00000000                            	endm
00000000                            	
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 = \op1
00000000                            vcCF2 = \op2
00000000                            vcCF3 = \op3
00000000                            vcCF4 = \op4
00000000                            	endm
00000000                            	
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 = \op1
00000000                            vcRS2 = \op2	
00000000                            vcRS3 = \op3	
00000000                            vcRS4 = \op4	
00000000                            	endm
00000000                            	
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 =	\op1
00000000                            vcAR2 =	\op2
00000000                            vcAR3 =	\op3
00000000                            vcAR4 =	\op4
00000000                                endm
00000000                                
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 =	\op1;<<5
00000000                            vcAM2 =	\op2;<<5
00000000                            vcAM3 =	\op3;<<5
00000000                            vcAM4 =	\op4;<<5
00000000                                endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 = \op1
00000000                            vcD1R2 = \op2	
00000000                            vcD1R3 = \op3	
00000000                            vcD1R4 = \op4	
00000000                            	endm
00000000                            	
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 = \op1
00000000                            vcD2R2 = \op2	
00000000                            vcD2R3 = \op3	
00000000                            vcD2R4 = \op4	
00000000                            	endm
00000000                            	
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 = \op1
00000000                            vcDL2 = \op2
00000000                            vcDL3 = \op3
00000000                            vcDL4 = \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 = \op1
00000000                            vcRR2 = \op2
00000000                            vcRR3 = \op3
00000000                            vcRR4 = \op4
00000000                            	endm
00000000                            	
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 = \op1
00000000                            vcTL2 = \op2	
00000000                            vcTL3 = \op3
00000000                            vcTL4 = \op4
00000000                            		dc.b (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 = ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 = ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 = ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 = $80	
00000000                            		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
00000000                            		dc.b	(vcAM4<<7)|vcD1R4|vcD1R4Unk,(vcAM2<<7)|vcD1R2|vcD1R2Unk,(vcAM3<<7)|vcD1R3|vcD1R3Unk,(vcAM1<<7)|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
00000000                            	endm	
00000000                            			
00000000                            		include	"sound/music/98 - Extra Life.asm"
00000000                            ExtraLife_Header:
00000000                            	smpsHeaderStartSong ;2
00000000 =00000000                M songstart_40	equ	offset(*)
00000000                            	smpsHeaderVoice     ExtraLife_Voices
00000000                          M 	z80_ptr	extralife_voices
00000000 0000                     M 	dc.w	(((extralife_voices)<<8)&$ff00)|(((extralife_voices)>>8)&$ff)|$80
00000002                            	smpsHeaderChan      $06, $03
00000002 06                       M 	dc.b	$06
00000003 03                       M 	dc.b	$03
00000004                            	smpsHeaderTempo     $02, $CD
00000004 02CD                     M 	dc.b	$02,$cd
00000006                            
00000006                            	smpsHeaderDAC       ExtraLife_DAC
00000006                          M 	z80_ptr	extralife_dac
00000006 0000                     M 	dc.w	(((extralife_dac)<<8)&$ff00)|(((extralife_dac)>>8)&$ff)|$80
00000008 0000                     M 	dc.w	$00
0000000A                            	smpsHeaderFM        ExtraLife_FM1,	$E8, $10
0000000A                          M 	z80_ptr	extralife_fm1
0000000A 0000                     M 	dc.w	(((extralife_fm1)<<8)&$ff00)|(((extralife_fm1)>>8)&$ff)|$80
0000000C E810                     M 	dc.b	$e8,$10
0000000E                            	smpsHeaderFM        ExtraLife_FM2,	$E8, $10
0000000E                          M 	z80_ptr	extralife_fm2
0000000E 0000                     M 	dc.w	(((extralife_fm2)<<8)&$ff00)|(((extralife_fm2)>>8)&$ff)|$80
00000010 E810                     M 	dc.b	$e8,$10
00000012                            	smpsHeaderFM        ExtraLife_FM3,	$E8, $10
00000012                          M 	z80_ptr	extralife_fm3
00000012 0000                     M 	dc.w	(((extralife_fm3)<<8)&$ff00)|(((extralife_fm3)>>8)&$ff)|$80
00000014 E810                     M 	dc.b	$e8,$10
00000016                            	smpsHeaderFM        ExtraLife_FM4,	$E8, $10
00000016                          M 	z80_ptr	extralife_fm4
00000016 0000                     M 	dc.w	(((extralife_fm4)<<8)&$ff00)|(((extralife_fm4)>>8)&$ff)|$80
00000018 E810                     M 	dc.b	$e8,$10
0000001A                            	smpsHeaderFM        ExtraLife_FM5,	$E8, $10
0000001A                          M 	z80_ptr	extralife_fm5
0000001A 0000                     M 	dc.w	(((extralife_fm5)<<8)&$ff00)|(((extralife_fm5)>>8)&$ff)|$80
0000001C E810                     M 	dc.b	$e8,$10
0000001E                            	smpsHeaderPSG       ExtraLife_PSG1,	$D0, $08, $00, fTone_05
0000001E                          M 	z80_ptr	extralife_psg1
0000001E 0000                     M 	dc.w	(((extralife_psg1)<<8)&$ff00)|(((extralife_psg1)>>8)&$ff)|$80
00000020 D008 0005                M 	dc.b	$d0,$08,$00,ftone_05
00000024                            	smpsHeaderPSG       ExtraLife_PSG2,	$DC, $08, $00, fTone_05
00000024                          M 	z80_ptr	extralife_psg2
00000024 0000                     M 	dc.w	(((extralife_psg2)<<8)&$ff00)|(((extralife_psg2)>>8)&$ff)|$80
00000026 DC08 0005                M 	dc.b	$dc,$08,$00,ftone_05
0000002A                            	smpsHeaderPSG       ExtraLife_PSG3,	$DC, $00, $00, fTone_04
0000002A                          M 	z80_ptr	extralife_psg3
0000002A 0000                     M 	dc.w	(((extralife_psg3)<<8)&$ff00)|(((extralife_psg3)>>8)&$ff)|$80
0000002C DC00 0004                M 	dc.b	$dc,$00,$00,ftone_04
00000030                            
00000030                            ; FM4 Data
00000030                            ExtraLife_FM4:
00000030                            	smpsAlterNote       $03
00000030 E103                     M 	dc.b	$e1,$03
00000032                            	smpsPan             panRight, $00
00000032 E040                     M 	dc.b	$e0,panright|$00
00000034                            	smpsJump            ExtraLife_Jump01
00000034 F6                       M 	dc.b	$f6
00000035                          M 	z80_ptr	extralife_jump01
00000035 0000                     M 	dc.w	(((extralife_jump01)<<8)&$ff00)|(((extralife_jump01)>>8)&$ff)|$80
00000037                            
00000037                            ; FM1 Data
00000037                            ExtraLife_FM1:
00000037                            	smpsPan             panLeft, $00
00000037 E080                     M 	dc.b	$e0,panleft|$00
00000039                            
00000039                            ExtraLife_Jump01:
00000039                            	smpsSetvoice        $00
00000039 EF00                     M 	dc.b	$ef,$00
0000003B                            	smpsNoteFill        $06
0000003B E806                     M 	dc.b	$e8,$06
0000003D D906 0303 0606             	dc.b	nE7, $06, $03, $03, $06, $06
00000043                            	smpsNoteFill        $00
00000043 E800                     M 	dc.b	$e8,$00
00000045 DB09 D7D6 06D9 18          	dc.b	nFs7, $09, nD7, nCs7, $06, nE7, $18
0000004C                            	smpsStop
0000004C F2                       M 	dc.b	$f2
0000004D                            
0000004D                            ; FM2 Data
0000004D                            ExtraLife_FM2:
0000004D                            	smpsSetvoice        $01
0000004D EF01                     M 	dc.b	$ef,$01
0000004F                            	smpsNoteFill        $06
0000004F E806                     M 	dc.b	$e8,$06
00000051                            	smpsNop             $01
00000051 E201                     M 	dc.b	$e2,$01
00000053 D606 0303 0606             	dc.b	nCs7, $06, $03, $03, $06, $06
00000059                            	smpsNoteFill        $00
00000059 E800                     M 	dc.b	$e8,$00
0000005B D709 D4D2 06D6 18          	dc.b	nD7, $09, nB6, nA6, $06, nCs7, $18
00000062                            	smpsNop             $01
00000062 E201                     M 	dc.b	$e2,$01
00000064                            	smpsStop
00000064 F2                       M 	dc.b	$f2
00000065                            
00000065                            ; FM5 Data
00000065                            ExtraLife_FM5:
00000065                            	smpsAlterNote       $03
00000065 E103                     M 	dc.b	$e1,$03
00000067                            	smpsPan             panRight, $00
00000067 E040                     M 	dc.b	$e0,panright|$00
00000069                            	smpsJump            ExtraLife_Jump00
00000069 F6                       M 	dc.b	$f6
0000006A                          M 	z80_ptr	extralife_jump00
0000006A 0000                     M 	dc.w	(((extralife_jump00)<<8)&$ff00)|(((extralife_jump00)>>8)&$ff)|$80
0000006C                            
0000006C                            ; FM3 Data
0000006C                            ExtraLife_FM3:
0000006C                            	smpsPan             panLeft, $00
0000006C E080                     M 	dc.b	$e0,panleft|$00
0000006E                            
0000006E                            ExtraLife_Jump00:
0000006E                            	smpsSetvoice        $02
0000006E EF02                     M 	dc.b	$ef,$02
00000070 BA0C 8006 BAB8 8003 B806+  	dc.b	nA4, $0C, nRst, $06, nA4, nG4, nRst, $03, nG4, $06, nRst, $03
0000007C B806 BA18                  	dc.b	nG4, $06, nA4, $18
00000080                            	smpsStop
00000080 F2                       M 	dc.b	$f2
00000081                            
00000081                            ; PSG1 Data
00000081                            ExtraLife_PSG1:
00000081                            	smpsNoteFill        $06
00000081 E806                     M 	dc.b	$e8,$06
00000083 D606 0303 0606             	dc.b	nCs7, $06, $03, $03, $06, $06
00000089                            	smpsNoteFill        $00
00000089 E800                     M 	dc.b	$e8,$00
0000008B D709 D4D2 06D6 18          	dc.b	nD7, $09, nB6, nA6, $06, nCs7, $18
00000092                            
00000092                            ; PSG2 Data
00000092                            ExtraLife_PSG2:
00000092                            ; PSG3 Data
00000092                            ExtraLife_PSG3:
00000092                            	smpsStop
00000092 F2                       M 	dc.b	$f2
00000093                            
00000093                            ; DAC Data
00000093                            ExtraLife_DAC:
00000093 8812 068B 0909 0688 068A+  	dc.b	dHiTimpani, $12, $06, dVLowTimpani, $09, $09, $06, dHiTimpani, $06, dLowTimpani, dHiTimpani, dLowTimpani
0000009F 880C                       	dc.b	dHiTimpani, $0C
000000A1                            	smpsFade
000000A1 E4                       M 	dc.b	$e4
000000A2                            
000000A2                            ExtraLife_Voices:
000000A2                            ;	Voice $00
000000A2                            ;	$3A
000000A2                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000000A2                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $4E, $16, $80
000000A2                            	smpsVcAlgorithm     $02
000000A2 =00000002                M vcalgorithm	=	$02
000000A2                            	smpsVcFeedback      $07
000000A2 =00000007                M vcfeedback	=	$07
000000A2                            	smpsVcUnusedBits    $00
000000A2 =00000000                M vcunusedbits	=	$00
000000A2 =00000000                M vcd1r1unk	=	0
000000A2 =00000000                M vcd1r2unk	=	0
000000A2 =00000000                M vcd1r3unk	=	0
000000A2 =00000000                M vcd1r4unk	=	0
000000A2                            	smpsVcDetune        $00, $00, $00, $00
000000A2 =00000000                M vcdt1	=	$00
000000A2 =00000000                M vcdt2	=	$00
000000A2 =00000000                M vcdt3	=	$00
000000A2 =00000000                M vcdt4	=	$00
000000A2                            	smpsVcCoarseFreq    $01, $01, $07, $01
000000A2 =00000001                M vccf1	=	$01
000000A2 =00000001                M vccf2	=	$01
000000A2 =00000007                M vccf3	=	$07
000000A2 =00000001                M vccf4	=	$01
000000A2                            	smpsVcRateScale     $01, $02, $02, $02
000000A2 =00000001                M vcrs1	=	$01
000000A2 =00000002                M vcrs2	=	$02
000000A2 =00000002                M vcrs3	=	$02
000000A2 =00000002                M vcrs4	=	$02
000000A2                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000000A2 =00000013                M vcar1	=	$13
000000A2 =0000000D                M vcar2	=	$0d
000000A2 =0000000E                M vcar3	=	$0e
000000A2 =0000000E                M vcar4	=	$0e
000000A2                            	smpsVcAmpMod        $00, $00, $00, $00
000000A2 =00000000                M vcam1	=	$00
000000A2 =00000000                M vcam2	=	$00
000000A2 =00000000                M vcam3	=	$00
000000A2 =00000000                M vcam4	=	$00
000000A2                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000000A2 =00000003                M vcd1r1	=	$03
000000A2 =0000000E                M vcd1r2	=	$0e
000000A2 =0000000E                M vcd1r3	=	$0e
000000A2 =0000000E                M vcd1r4	=	$0e
000000A2                            	smpsVcDecayRate2    $00, $00, $00, $00
000000A2 =00000000                M vcd2r1	=	$00
000000A2 =00000000                M vcd2r2	=	$00
000000A2 =00000000                M vcd2r3	=	$00
000000A2 =00000000                M vcd2r4	=	$00
000000A2                            	smpsVcDecayLevel    $00, $01, $0F, $01
000000A2 =00000000                M vcdl1	=	$00
000000A2 =00000001                M vcdl2	=	$01
000000A2 =0000000F                M vcdl3	=	$0f
000000A2 =00000001                M vcdl4	=	$01
000000A2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000A2 =0000000F                M vcrr1	=	$0f
000000A2 =0000000F                M vcrr2	=	$0f
000000A2 =0000000F                M vcrr3	=	$0f
000000A2 =0000000F                M vcrr4	=	$0f
000000A2                            	smpsVcTotalLevel    $00, $16, $4E, $18
000000A2 =00000000                M vctl1	=	$00
000000A2 =00000016                M vctl2	=	$16
000000A2 =0000004E                M vctl3	=	$4e
000000A2 =00000018                M vctl4	=	$18
000000A2 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000A3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000000A3 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000000A3 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000000A3 =00000080                M vctlmask1	=	$80
000000A3 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000A7 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000AB 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000000AF 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000B3 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000B7 1816 4E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000BB                            
000000BB                            ;	Voice $01
000000BB                            ;	$3A
000000BB                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000000BB                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000000BB                            	smpsVcAlgorithm     $02
000000BB =00000002                M vcalgorithm	=	$02
000000BB                            	smpsVcFeedback      $07
000000BB =00000007                M vcfeedback	=	$07
000000BB                            	smpsVcUnusedBits    $00
000000BB =00000000                M vcunusedbits	=	$00
000000BB =00000000                M vcd1r1unk	=	0
000000BB =00000000                M vcd1r2unk	=	0
000000BB =00000000                M vcd1r3unk	=	0
000000BB =00000000                M vcd1r4unk	=	0
000000BB                            	smpsVcDetune        $00, $00, $00, $00
000000BB =00000000                M vcdt1	=	$00
000000BB =00000000                M vcdt2	=	$00
000000BB =00000000                M vcdt3	=	$00
000000BB =00000000                M vcdt4	=	$00
000000BB                            	smpsVcCoarseFreq    $01, $01, $07, $01
000000BB =00000001                M vccf1	=	$01
000000BB =00000001                M vccf2	=	$01
000000BB =00000007                M vccf3	=	$07
000000BB =00000001                M vccf4	=	$01
000000BB                            	smpsVcRateScale     $01, $02, $02, $02
000000BB =00000001                M vcrs1	=	$01
000000BB =00000002                M vcrs2	=	$02
000000BB =00000002                M vcrs3	=	$02
000000BB =00000002                M vcrs4	=	$02
000000BB                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000000BB =00000013                M vcar1	=	$13
000000BB =0000000D                M vcar2	=	$0d
000000BB =0000000E                M vcar3	=	$0e
000000BB =0000000E                M vcar4	=	$0e
000000BB                            	smpsVcAmpMod        $00, $00, $00, $00
000000BB =00000000                M vcam1	=	$00
000000BB =00000000                M vcam2	=	$00
000000BB =00000000                M vcam3	=	$00
000000BB =00000000                M vcam4	=	$00
000000BB                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000000BB =00000003                M vcd1r1	=	$03
000000BB =0000000E                M vcd1r2	=	$0e
000000BB =0000000E                M vcd1r3	=	$0e
000000BB =0000000E                M vcd1r4	=	$0e
000000BB                            	smpsVcDecayRate2    $00, $00, $00, $00
000000BB =00000000                M vcd2r1	=	$00
000000BB =00000000                M vcd2r2	=	$00
000000BB =00000000                M vcd2r3	=	$00
000000BB =00000000                M vcd2r4	=	$00
000000BB                            	smpsVcDecayLevel    $00, $01, $0F, $01
000000BB =00000000                M vcdl1	=	$00
000000BB =00000001                M vcdl2	=	$01
000000BB =0000000F                M vcdl3	=	$0f
000000BB =00000001                M vcdl4	=	$01
000000BB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000BB =0000000F                M vcrr1	=	$0f
000000BB =0000000F                M vcrr2	=	$0f
000000BB =0000000F                M vcrr3	=	$0f
000000BB =0000000F                M vcrr4	=	$0f
000000BB                            	smpsVcTotalLevel    $00, $27, $28, $18
000000BB =00000000                M vctl1	=	$00
000000BB =00000027                M vctl2	=	$27
000000BB =00000028                M vctl3	=	$28
000000BB =00000018                M vctl4	=	$18
000000BB 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000BC =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000000BC =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000000BC =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000000BC =00000080                M vctlmask1	=	$80
000000BC 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000C0 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000C4 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000000C8 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000CC 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000D0 1827 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000D4                            
000000D4                            ;	Voice $02
000000D4                            ;	$3A
000000D4                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000000D4                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000000D4                            	smpsVcAlgorithm     $02
000000D4 =00000002                M vcalgorithm	=	$02
000000D4                            	smpsVcFeedback      $07
000000D4 =00000007                M vcfeedback	=	$07
000000D4                            	smpsVcUnusedBits    $00
000000D4 =00000000                M vcunusedbits	=	$00
000000D4 =00000000                M vcd1r1unk	=	0
000000D4 =00000000                M vcd1r2unk	=	0
000000D4 =00000000                M vcd1r3unk	=	0
000000D4 =00000000                M vcd1r4unk	=	0
000000D4                            	smpsVcDetune        $00, $00, $00, $00
000000D4 =00000000                M vcdt1	=	$00
000000D4 =00000000                M vcdt2	=	$00
000000D4 =00000000                M vcdt3	=	$00
000000D4 =00000000                M vcdt4	=	$00
000000D4                            	smpsVcCoarseFreq    $01, $01, $07, $01
000000D4 =00000001                M vccf1	=	$01
000000D4 =00000001                M vccf2	=	$01
000000D4 =00000007                M vccf3	=	$07
000000D4 =00000001                M vccf4	=	$01
000000D4                            	smpsVcRateScale     $01, $02, $02, $02
000000D4 =00000001                M vcrs1	=	$01
000000D4 =00000002                M vcrs2	=	$02
000000D4 =00000002                M vcrs3	=	$02
000000D4 =00000002                M vcrs4	=	$02
000000D4                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000000D4 =00000013                M vcar1	=	$13
000000D4 =0000000D                M vcar2	=	$0d
000000D4 =0000000E                M vcar3	=	$0e
000000D4 =0000000E                M vcar4	=	$0e
000000D4                            	smpsVcAmpMod        $00, $00, $00, $00
000000D4 =00000000                M vcam1	=	$00
000000D4 =00000000                M vcam2	=	$00
000000D4 =00000000                M vcam3	=	$00
000000D4 =00000000                M vcam4	=	$00
000000D4                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000000D4 =00000003                M vcd1r1	=	$03
000000D4 =0000000E                M vcd1r2	=	$0e
000000D4 =0000000E                M vcd1r3	=	$0e
000000D4 =0000000E                M vcd1r4	=	$0e
000000D4                            	smpsVcDecayRate2    $07, $00, $00, $00
000000D4 =00000007                M vcd2r1	=	$07
000000D4 =00000000                M vcd2r2	=	$00
000000D4 =00000000                M vcd2r3	=	$00
000000D4 =00000000                M vcd2r4	=	$00
000000D4                            	smpsVcDecayLevel    $00, $01, $0F, $01
000000D4 =00000000                M vcdl1	=	$00
000000D4 =00000001                M vcdl2	=	$01
000000D4 =0000000F                M vcdl3	=	$0f
000000D4 =00000001                M vcdl4	=	$01
000000D4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000D4 =0000000F                M vcrr1	=	$0f
000000D4 =0000000F                M vcrr2	=	$0f
000000D4 =0000000F                M vcrr3	=	$0f
000000D4 =0000000F                M vcrr4	=	$0f
000000D4                            	smpsVcTotalLevel    $00, $27, $28, $18
000000D4 =00000000                M vctl1	=	$00
000000D4 =00000027                M vctl2	=	$27
000000D4 =00000028                M vctl3	=	$28
000000D4 =00000018                M vctl4	=	$18
000000D4 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000D5 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000000D5 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000000D5 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000000D5 =00000080                M vctlmask1	=	$80
000000D5 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000D9 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000DD 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000000E1 0000 0007                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000E5 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000E9 1827 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000ED                            
000000ED                            		include	"sound/music/9B - Game Over.asm"
000000ED                            GOver_Header:
000000ED                            	smpsHeaderStartSong 2
000000ED =000000ED                M songstart_128	equ	offset(*)
000000ED                            	smpsHeaderVoice     GOver_Voices
000000ED                          M 	z80_ptr	gover_voices
000000ED 0000                     M 	dc.w	(((gover_voices)<<8)&$ff00)|(((gover_voices)>>8)&$ff)|$80
000000EF                            	smpsHeaderChan      $06, $03
000000EF 06                       M 	dc.b	$06
000000F0 03                       M 	dc.b	$03
000000F1                            	smpsHeaderTempo     $02, $F2
000000F1 02F2                     M 	dc.b	$02,$f2
000000F3                            
000000F3                            	smpsHeaderDAC       GOver_DAC
000000F3                          M 	z80_ptr	gover_dac
000000F3 0000                     M 	dc.w	(((gover_dac)<<8)&$ff00)|(((gover_dac)>>8)&$ff)|$80
000000F5 0000                     M 	dc.w	$00
000000F7                            	smpsHeaderFM        GOver_FM1,	$E8, $0A
000000F7                          M 	z80_ptr	gover_fm1
000000F7 0000                     M 	dc.w	(((gover_fm1)<<8)&$ff00)|(((gover_fm1)>>8)&$ff)|$80
000000F9 E80A                     M 	dc.b	$e8,$0a
000000FB                            	smpsHeaderFM        GOver_FM2,	$F4, $0F
000000FB                          M 	z80_ptr	gover_fm2
000000FB 0000                     M 	dc.w	(((gover_fm2)<<8)&$ff00)|(((gover_fm2)>>8)&$ff)|$80
000000FD F40F                     M 	dc.b	$f4,$0f
000000FF                            	smpsHeaderFM        GOver_FM3,	$F4, $0F
000000FF                          M 	z80_ptr	gover_fm3
000000FF 0000                     M 	dc.w	(((gover_fm3)<<8)&$ff00)|(((gover_fm3)>>8)&$ff)|$80
00000101 F40F                     M 	dc.b	$f4,$0f
00000103                            	smpsHeaderFM        GOver_FM4,	$F4, $0D
00000103                          M 	z80_ptr	gover_fm4
00000103 0000                     M 	dc.w	(((gover_fm4)<<8)&$ff00)|(((gover_fm4)>>8)&$ff)|$80
00000105 F40D                     M 	dc.b	$f4,$0d
00000107                            	smpsHeaderFM        GOver_FM5,	$DC, $16
00000107                          M 	z80_ptr	gover_fm5
00000107 0000                     M 	dc.w	(((gover_fm5)<<8)&$ff00)|(((gover_fm5)>>8)&$ff)|$80
00000109 DC16                     M 	dc.b	$dc,$16
0000010B                            	smpsHeaderPSG       GOver_PSG1,	$D0, $03, $00, fTone_05
0000010B                          M 	z80_ptr	gover_psg1
0000010B 0000                     M 	dc.w	(((gover_psg1)<<8)&$ff00)|(((gover_psg1)>>8)&$ff)|$80
0000010D D003 0005                M 	dc.b	$d0,$03,$00,ftone_05
00000111                            	smpsHeaderPSG       GOver_PSG2,	$DC, $06, $00, fTone_05
00000111                          M 	z80_ptr	gover_psg2
00000111 0000                     M 	dc.w	(((gover_psg2)<<8)&$ff00)|(((gover_psg2)>>8)&$ff)|$80
00000113 DC06 0005                M 	dc.b	$dc,$06,$00,ftone_05
00000117                            	smpsHeaderPSG       GOver_PSG3,	$DC, $00, $00, fTone_04
00000117                          M 	z80_ptr	gover_psg3
00000117 0000                     M 	dc.w	(((gover_psg3)<<8)&$ff00)|(((gover_psg3)>>8)&$ff)|$80
00000119 DC00 0004                M 	dc.b	$dc,$00,$00,ftone_04
0000011D                            
0000011D                            ; FM1 Data
0000011D                            GOver_FM1:
0000011D                            	smpsSetvoice        $00
0000011D EF00                     M 	dc.b	$ef,$00
0000011F                            	smpsModSet          $20, $01, $04, $05
0000011F F020 0104 05             M 	dc.b	$f0,$20,$01,$04,$05
00000124 800C CA12 8006 CA80 CB12+  	dc.b	nRst, $0C, nCs6, $12, nRst, $06, nCs6, nRst, nD6, $12, nB5, $1E
00000130 CA06 80CA 80CA 80C6 80C4+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nCs6, nRst, nA5, nRst, nG5, $12, nB5
0000013C 0C80 12C9 0480 C9C8 0680+  	dc.b	$0C, nRst, $12, nC6, $04, nRst, nC6, nB5, $06, nRst, nBb5, nRst
00000148 C680                       	dc.b	nA5, nRst
0000014A                            	smpsModSet          $28, $01, $18, $05
0000014A F028 0118 05             M 	dc.b	$f0,$28,$01,$18,$05
0000014F C560                       	dc.b	nAb5, $60
00000151                            	smpsStop
00000151 F2                       M 	dc.b	$f2
00000152                            
00000152                            ; FM2 Data
00000152                            GOver_FM2:
00000152                            	smpsSetvoice        $01
00000152 EF01                     M 	dc.b	$ef,$01
00000154 8001 D906 80D9 80D6 80D6+  	dc.b	nRst, $01, nE7, $06, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst, nD7
00000160 15D7 1BD9 0680 D980 D680+  	dc.b	$15, nD7, $1B, nE7, $06, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst
0000016C DC15 DC1B                  	dc.b	nG7, $15, nG7, $1B
00000170                            	smpsStop
00000170 F2                       M 	dc.b	$f2
00000171                            
00000171                            ; FM3 Data
00000171                            GOver_FM3:
00000171                            	smpsSetvoice        $01
00000171 EF01                     M 	dc.b	$ef,$01
00000173 D60C D6D2 D2D4 15D4 1BD6+  	dc.b	nCs7, $0C, nCs7, nA6, nA6, nB6, $15, nB6, $1B, nCs7, $0C, nCs7
0000017F D2D2 D715 D71B             	dc.b	nA6, nA6, nD7, $15, nD7, $1B
00000185                            	smpsStop
00000185 F2                       M 	dc.b	$f2
00000186                            
00000186                            ; FM4 Data
00000186                            GOver_FM4:
00000186                            	smpsSetvoice        $02
00000186 EF02                     M 	dc.b	$ef,$02
00000188                            	smpsNop             $01
00000188 E201                     M 	dc.b	$e2,$01
0000018A AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $15, nFs3
00000196 0CAC 03AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $03, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000001A2 A980 B315 B20C B303 B20C+  	dc.b	nE3, nRst, nD4, $15, nCs4, $0C, nD4, $03, nCs4, $0C, nA3, $04
000001AE 80AE AD06 80AC 80AB 80AB+  	dc.b	nRst, nA3, nAb3, $06, nRst, nG3, nRst, nFs3, nRst, nFs3, $60
000001B9                            	smpsNop             $01
000001B9 E201                     M 	dc.b	$e2,$01
000001BB                            	smpsStop
000001BB F2                       M 	dc.b	$f2
000001BC                            
000001BC                            ; FM5 Data
000001BC                            GOver_FM5:
000001BC                            	smpsSetvoice        $03
000001BC EF03                     M 	dc.b	$ef,$03
000001BE 8030 D712 8003 D71B 8030+  	dc.b	nRst, $30, nD7, $12, nRst, $03, nD7, $1B, nRst, $30, nG7, $12
000001CA 8003 DC1B                  	dc.b	nRst, $03, nG7, $1B
000001CE                            
000001CE                            ; PSG1 Data
000001CE                            GOver_PSG1:
000001CE                            ; PSG2 Data
000001CE                            GOver_PSG2:
000001CE                            ; PSG3 Data
000001CE                            GOver_PSG3:
000001CE                            	smpsStop
000001CE F2                       M 	dc.b	$f2
000001CF                            
000001CF                            ; DAC Data
000001CF                            GOver_DAC:
000001CF 8018 81                    	dc.b	nRst, $18, dKick
000001D2                            	smpsLoop            $00, $04, GOver_DAC
000001D2 F700 04                  M 	dc.b	$f7,$00,$04
000001D5                          M 	z80_ptr	gover_dac
000001D5 0000                     M 	dc.w	(((gover_dac)<<8)&$ff00)|(((gover_dac)>>8)&$ff)|$80
000001D7                            	smpsStop
000001D7 F2                       M 	dc.b	$f2
000001D8                            
000001D8                            GOver_Voices:
000001D8                            ;	Voice $00
000001D8                            ;	$3A
000001D8                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000001D8                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000001D8                            	smpsVcAlgorithm     $02
000001D8 =00000002                M vcalgorithm	=	$02
000001D8                            	smpsVcFeedback      $07
000001D8 =00000007                M vcfeedback	=	$07
000001D8                            	smpsVcUnusedBits    $00
000001D8 =00000000                M vcunusedbits	=	$00
000001D8 =00000000                M vcd1r1unk	=	0
000001D8 =00000000                M vcd1r2unk	=	0
000001D8 =00000000                M vcd1r3unk	=	0
000001D8 =00000000                M vcd1r4unk	=	0
000001D8                            	smpsVcDetune        $00, $05, $00, $05
000001D8 =00000000                M vcdt1	=	$00
000001D8 =00000005                M vcdt2	=	$05
000001D8 =00000000                M vcdt3	=	$00
000001D8 =00000005                M vcdt4	=	$05
000001D8                            	smpsVcCoarseFreq    $02, $01, $08, $01
000001D8 =00000002                M vccf1	=	$02
000001D8 =00000001                M vccf2	=	$01
000001D8 =00000008                M vccf3	=	$08
000001D8 =00000001                M vccf4	=	$01
000001D8                            	smpsVcRateScale     $00, $00, $00, $00
000001D8 =00000000                M vcrs1	=	$00
000001D8 =00000000                M vcrs2	=	$00
000001D8 =00000000                M vcrs3	=	$00
000001D8 =00000000                M vcrs4	=	$00
000001D8                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000001D8 =00000010                M vcar1	=	$10
000001D8 =0000001E                M vcar2	=	$1e
000001D8 =0000001E                M vcar3	=	$1e
000001D8 =0000001E                M vcar4	=	$1e
000001D8                            	smpsVcAmpMod        $00, $00, $00, $00
000001D8 =00000000                M vcam1	=	$00
000001D8 =00000000                M vcam2	=	$00
000001D8 =00000000                M vcam3	=	$00
000001D8 =00000000                M vcam4	=	$00
000001D8                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000001D8 =0000000F                M vcd1r1	=	$0f
000001D8 =0000001F                M vcd1r2	=	$1f
000001D8 =0000001F                M vcd1r3	=	$1f
000001D8 =0000001F                M vcd1r4	=	$1f
000001D8                            	smpsVcDecayRate2    $02, $00, $00, $00
000001D8 =00000002                M vcd2r1	=	$02
000001D8 =00000000                M vcd2r2	=	$00
000001D8 =00000000                M vcd2r3	=	$00
000001D8 =00000000                M vcd2r4	=	$00
000001D8                            	smpsVcDecayLevel    $01, $00, $00, $00
000001D8 =00000001                M vcdl1	=	$01
000001D8 =00000000                M vcdl2	=	$00
000001D8 =00000000                M vcdl3	=	$00
000001D8 =00000000                M vcdl4	=	$00
000001D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001D8 =0000000F                M vcrr1	=	$0f
000001D8 =0000000F                M vcrr2	=	$0f
000001D8 =0000000F                M vcrr3	=	$0f
000001D8 =0000000F                M vcrr4	=	$0f
000001D8                            	smpsVcTotalLevel    $01, $22, $24, $18
000001D8 =00000001                M vctl1	=	$01
000001D8 =00000022                M vctl2	=	$22
000001D8 =00000024                M vctl3	=	$24
000001D8 =00000018                M vctl4	=	$18
000001D8 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001D9 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000001D9 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000001D9 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000001D9 =00000080                M vctlmask1	=	$80
000001D9 5151 0802                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001DD 1E1E 1E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001E1 1F1F 1F0F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000001E5 0000 0002                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001E9 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001ED 1822 2481                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001F1                            
000001F1                            ;	Voice $01
000001F1                            ;	$3C
000001F1                            ;	$33, $30, $73, $70, 	$94, $9F, $96, $9F, 	$12, $00, $14, $0F
000001F1                            ;	$04, $0A, $04, $0D, 	$2F, $0F, $4F, $2F, 	$33, $80, $1A, $80
000001F1                            	smpsVcAlgorithm     $04
000001F1 =00000004                M vcalgorithm	=	$04
000001F1                            	smpsVcFeedback      $07
000001F1 =00000007                M vcfeedback	=	$07
000001F1                            	smpsVcUnusedBits    $00
000001F1 =00000000                M vcunusedbits	=	$00
000001F1 =00000000                M vcd1r1unk	=	0
000001F1 =00000000                M vcd1r2unk	=	0
000001F1 =00000000                M vcd1r3unk	=	0
000001F1 =00000000                M vcd1r4unk	=	0
000001F1                            	smpsVcDetune        $07, $07, $03, $03
000001F1 =00000007                M vcdt1	=	$07
000001F1 =00000007                M vcdt2	=	$07
000001F1 =00000003                M vcdt3	=	$03
000001F1 =00000003                M vcdt4	=	$03
000001F1                            	smpsVcCoarseFreq    $00, $03, $00, $03
000001F1 =00000000                M vccf1	=	$00
000001F1 =00000003                M vccf2	=	$03
000001F1 =00000000                M vccf3	=	$00
000001F1 =00000003                M vccf4	=	$03
000001F1                            	smpsVcRateScale     $02, $02, $02, $02
000001F1 =00000002                M vcrs1	=	$02
000001F1 =00000002                M vcrs2	=	$02
000001F1 =00000002                M vcrs3	=	$02
000001F1 =00000002                M vcrs4	=	$02
000001F1                            	smpsVcAttackRate    $1F, $16, $1F, $14
000001F1 =0000001F                M vcar1	=	$1f
000001F1 =00000016                M vcar2	=	$16
000001F1 =0000001F                M vcar3	=	$1f
000001F1 =00000014                M vcar4	=	$14
000001F1                            	smpsVcAmpMod        $00, $00, $00, $00
000001F1 =00000000                M vcam1	=	$00
000001F1 =00000000                M vcam2	=	$00
000001F1 =00000000                M vcam3	=	$00
000001F1 =00000000                M vcam4	=	$00
000001F1                            	smpsVcDecayRate1    $0F, $14, $00, $12
000001F1 =0000000F                M vcd1r1	=	$0f
000001F1 =00000014                M vcd1r2	=	$14
000001F1 =00000000                M vcd1r3	=	$00
000001F1 =00000012                M vcd1r4	=	$12
000001F1                            	smpsVcDecayRate2    $0D, $04, $0A, $04
000001F1 =0000000D                M vcd2r1	=	$0d
000001F1 =00000004                M vcd2r2	=	$04
000001F1 =0000000A                M vcd2r3	=	$0a
000001F1 =00000004                M vcd2r4	=	$04
000001F1                            	smpsVcDecayLevel    $02, $04, $00, $02
000001F1 =00000002                M vcdl1	=	$02
000001F1 =00000004                M vcdl2	=	$04
000001F1 =00000000                M vcdl3	=	$00
000001F1 =00000002                M vcdl4	=	$02
000001F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001F1 =0000000F                M vcrr1	=	$0f
000001F1 =0000000F                M vcrr2	=	$0f
000001F1 =0000000F                M vcrr3	=	$0f
000001F1 =0000000F                M vcrr4	=	$0f
000001F1                            	smpsVcTotalLevel    $00, $1A, $00, $33
000001F1 =00000000                M vctl1	=	$00
000001F1 =0000001A                M vctl2	=	$1a
000001F1 =00000000                M vctl3	=	$00
000001F1 =00000033                M vctl4	=	$33
000001F1 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001F2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000001F2 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000001F2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000001F2 =00000080                M vctlmask1	=	$80
000001F2 3373 3070                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001F6 9496 9F9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001FA 1214 000F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000001FE 0404 0A0D                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000202 2F4F 0F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000206 331A 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000020A                            
0000020A                            ;	Voice $02
0000020A                            ;	$3A
0000020A                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0000020A                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$1C, $28, $27, $80
0000020A                            	smpsVcAlgorithm     $02
0000020A =00000002                M vcalgorithm	=	$02
0000020A                            	smpsVcFeedback      $07
0000020A =00000007                M vcfeedback	=	$07
0000020A                            	smpsVcUnusedBits    $00
0000020A =00000000                M vcunusedbits	=	$00
0000020A =00000000                M vcd1r1unk	=	0
0000020A =00000000                M vcd1r2unk	=	0
0000020A =00000000                M vcd1r3unk	=	0
0000020A =00000000                M vcd1r4unk	=	0
0000020A                            	smpsVcDetune        $00, $00, $00, $00
0000020A =00000000                M vcdt1	=	$00
0000020A =00000000                M vcdt2	=	$00
0000020A =00000000                M vcdt3	=	$00
0000020A =00000000                M vcdt4	=	$00
0000020A                            	smpsVcCoarseFreq    $01, $01, $07, $01
0000020A =00000001                M vccf1	=	$01
0000020A =00000001                M vccf2	=	$01
0000020A =00000007                M vccf3	=	$07
0000020A =00000001                M vccf4	=	$01
0000020A                            	smpsVcRateScale     $01, $02, $02, $02
0000020A =00000001                M vcrs1	=	$01
0000020A =00000002                M vcrs2	=	$02
0000020A =00000002                M vcrs3	=	$02
0000020A =00000002                M vcrs4	=	$02
0000020A                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0000020A =00000013                M vcar1	=	$13
0000020A =0000000D                M vcar2	=	$0d
0000020A =0000000E                M vcar3	=	$0e
0000020A =0000000E                M vcar4	=	$0e
0000020A                            	smpsVcAmpMod        $00, $00, $00, $00
0000020A =00000000                M vcam1	=	$00
0000020A =00000000                M vcam2	=	$00
0000020A =00000000                M vcam3	=	$00
0000020A =00000000                M vcam4	=	$00
0000020A                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0000020A =00000003                M vcd1r1	=	$03
0000020A =0000000E                M vcd1r2	=	$0e
0000020A =0000000E                M vcd1r3	=	$0e
0000020A =0000000E                M vcd1r4	=	$0e
0000020A                            	smpsVcDecayRate2    $07, $00, $00, $00
0000020A =00000007                M vcd2r1	=	$07
0000020A =00000000                M vcd2r2	=	$00
0000020A =00000000                M vcd2r3	=	$00
0000020A =00000000                M vcd2r4	=	$00
0000020A                            	smpsVcDecayLevel    $00, $01, $0F, $01
0000020A =00000000                M vcdl1	=	$00
0000020A =00000001                M vcdl2	=	$01
0000020A =0000000F                M vcdl3	=	$0f
0000020A =00000001                M vcdl4	=	$01
0000020A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000020A =0000000F                M vcrr1	=	$0f
0000020A =0000000F                M vcrr2	=	$0f
0000020A =0000000F                M vcrr3	=	$0f
0000020A =0000000F                M vcrr4	=	$0f
0000020A                            	smpsVcTotalLevel    $00, $27, $28, $1C
0000020A =00000000                M vctl1	=	$00
0000020A =00000027                M vctl2	=	$27
0000020A =00000028                M vctl3	=	$28
0000020A =0000001C                M vctl4	=	$1c
0000020A 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000020B =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000020B =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000020B =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000020B =00000080                M vctlmask1	=	$80
0000020B 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000020F 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000213 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000217 0000 0007                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000021B 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000021F 1C27 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000223                            
00000223                            ;	Voice $03
00000223                            ;	$1F
00000223                            ;	$66, $31, $53, $22, 	$1C, $98, $1F, $1F, 	$12, $0F, $0F, $0F
00000223                            ;	$00, $00, $00, $00, 	$FF, $0F, $0F, $0F, 	$8C, $8D, $8A, $8B
00000223                            	smpsVcAlgorithm     $07
00000223 =00000007                M vcalgorithm	=	$07
00000223                            	smpsVcFeedback      $03
00000223 =00000003                M vcfeedback	=	$03
00000223                            	smpsVcUnusedBits    $00
00000223 =00000000                M vcunusedbits	=	$00
00000223 =00000000                M vcd1r1unk	=	0
00000223 =00000000                M vcd1r2unk	=	0
00000223 =00000000                M vcd1r3unk	=	0
00000223 =00000000                M vcd1r4unk	=	0
00000223                            	smpsVcDetune        $02, $05, $03, $06
00000223 =00000002                M vcdt1	=	$02
00000223 =00000005                M vcdt2	=	$05
00000223 =00000003                M vcdt3	=	$03
00000223 =00000006                M vcdt4	=	$06
00000223                            	smpsVcCoarseFreq    $02, $03, $01, $06
00000223 =00000002                M vccf1	=	$02
00000223 =00000003                M vccf2	=	$03
00000223 =00000001                M vccf3	=	$01
00000223 =00000006                M vccf4	=	$06
00000223                            	smpsVcRateScale     $00, $00, $02, $00
00000223 =00000000                M vcrs1	=	$00
00000223 =00000000                M vcrs2	=	$00
00000223 =00000002                M vcrs3	=	$02
00000223 =00000000                M vcrs4	=	$00
00000223                            	smpsVcAttackRate    $1F, $1F, $18, $1C
00000223 =0000001F                M vcar1	=	$1f
00000223 =0000001F                M vcar2	=	$1f
00000223 =00000018                M vcar3	=	$18
00000223 =0000001C                M vcar4	=	$1c
00000223                            	smpsVcAmpMod        $00, $00, $00, $00
00000223 =00000000                M vcam1	=	$00
00000223 =00000000                M vcam2	=	$00
00000223 =00000000                M vcam3	=	$00
00000223 =00000000                M vcam4	=	$00
00000223                            	smpsVcDecayRate1    $0F, $0F, $0F, $12
00000223 =0000000F                M vcd1r1	=	$0f
00000223 =0000000F                M vcd1r2	=	$0f
00000223 =0000000F                M vcd1r3	=	$0f
00000223 =00000012                M vcd1r4	=	$12
00000223                            	smpsVcDecayRate2    $00, $00, $00, $00
00000223 =00000000                M vcd2r1	=	$00
00000223 =00000000                M vcd2r2	=	$00
00000223 =00000000                M vcd2r3	=	$00
00000223 =00000000                M vcd2r4	=	$00
00000223                            	smpsVcDecayLevel    $00, $00, $00, $0F
00000223 =00000000                M vcdl1	=	$00
00000223 =00000000                M vcdl2	=	$00
00000223 =00000000                M vcdl3	=	$00
00000223 =0000000F                M vcdl4	=	$0f
00000223                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000223 =0000000F                M vcrr1	=	$0f
00000223 =0000000F                M vcrr2	=	$0f
00000223 =0000000F                M vcrr3	=	$0f
00000223 =0000000F                M vcrr4	=	$0f
00000223                            	smpsVcTotalLevel    $0B, $0A, $0D, $0C
00000223 =0000000B                M vctl1	=	$0b
00000223 =0000000A                M vctl2	=	$0a
00000223 =0000000D                M vctl3	=	$0d
00000223 =0000000C                M vctl4	=	$0c
00000223 1F                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000224 =FFFFFF80                M vctlmask4	=	((vcalgorithm=7)<<7)
00000224 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000224 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000224 =00000080                M vctlmask1	=	$80
00000224 6653 3122                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000228 1C1F 981F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000022C 120F 0F0F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000230 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000234 FF0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000238 8C8A 8D8B                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000023C                            
0000023C                            		include	"sound/music/9D - Got Emerald.asm"
0000023C                            Emerald_Header:
0000023C                            	smpsHeaderStartSong 2, 1
0000023C =0000023C                M songstart_220	equ	offset(*)
0000023C                            	smpsHeaderVoice     Emerald_Voices
0000023C                          M 	z80_ptr	emerald_voices
0000023C 0000                     M 	dc.w	(((emerald_voices)<<8)&$ff00)|(((emerald_voices)>>8)&$ff)|$80
0000023E                            	smpsHeaderChan      $07, $03
0000023E 07                       M 	dc.b	$07
0000023F 03                       M 	dc.b	$03
00000240                            	smpsHeaderTempo     $01, $D5
00000240 01D5                     M 	dc.b	$01,$d5
00000242                            
00000242                            	smpsHeaderDAC       Emerald_DAC
00000242                          M 	z80_ptr	emerald_dac
00000242 0000                     M 	dc.w	(((emerald_dac)<<8)&$ff00)|(((emerald_dac)>>8)&$ff)|$80
00000244 0000                     M 	dc.w	$00
00000246                            	smpsHeaderFM        Emerald_FM1,	$F4, $08
00000246                          M 	z80_ptr	emerald_fm1
00000246 0000                     M 	dc.w	(((emerald_fm1)<<8)&$ff00)|(((emerald_fm1)>>8)&$ff)|$80
00000248 F408                     M 	dc.b	$f4,$08
0000024A                            	smpsHeaderFM        Emerald_FM2,	$F4, $08
0000024A                          M 	z80_ptr	emerald_fm2
0000024A 0000                     M 	dc.w	(((emerald_fm2)<<8)&$ff00)|(((emerald_fm2)>>8)&$ff)|$80
0000024C F408                     M 	dc.b	$f4,$08
0000024E                            	smpsHeaderFM        Emerald_FM3,	$F4, $07
0000024E                          M 	z80_ptr	emerald_fm3
0000024E 0000                     M 	dc.w	(((emerald_fm3)<<8)&$ff00)|(((emerald_fm3)>>8)&$ff)|$80
00000250 F407                     M 	dc.b	$f4,$07
00000252                            	smpsHeaderFM        Emerald_FM4,	$F4, $16
00000252                          M 	z80_ptr	emerald_fm4
00000252 0000                     M 	dc.w	(((emerald_fm4)<<8)&$ff00)|(((emerald_fm4)>>8)&$ff)|$80
00000254 F416                     M 	dc.b	$f4,$16
00000256                            	smpsHeaderFM        Emerald_FM5,	$F4, $16
00000256                          M 	z80_ptr	emerald_fm5
00000256 0000                     M 	dc.w	(((emerald_fm5)<<8)&$ff00)|(((emerald_fm5)>>8)&$ff)|$80
00000258 F416                     M 	dc.b	$f4,$16
0000025A                            	smpsHeaderFM        Emerald_FM6,	$F4, $16
0000025A                          M 	z80_ptr	emerald_fm6
0000025A 0000                     M 	dc.w	(((emerald_fm6)<<8)&$ff00)|(((emerald_fm6)>>8)&$ff)|$80
0000025C F416                     M 	dc.b	$f4,$16
0000025E                            	smpsHeaderPSG       Emerald_PSG1,	$F4, $02, $00, fTone_04
0000025E                          M 	z80_ptr	emerald_psg1
0000025E 0000                     M 	dc.w	(((emerald_psg1)<<8)&$ff00)|(((emerald_psg1)>>8)&$ff)|$80
00000260 F402 0004                M 	dc.b	$f4,$02,$00,ftone_04
00000264                            	smpsHeaderPSG       Emerald_PSG2,	$F4, $02, $00, fTone_05
00000264                          M 	z80_ptr	emerald_psg2
00000264 0000                     M 	dc.w	(((emerald_psg2)<<8)&$ff00)|(((emerald_psg2)>>8)&$ff)|$80
00000266 F402 0005                M 	dc.b	$f4,$02,$00,ftone_05
0000026A                            	smpsHeaderPSG       Emerald_PSG3,	$F4, $00, $00, fTone_04
0000026A                          M 	z80_ptr	emerald_psg3
0000026A 0000                     M 	dc.w	(((emerald_psg3)<<8)&$ff00)|(((emerald_psg3)>>8)&$ff)|$80
0000026C F400 0004                M 	dc.b	$f4,$00,$00,ftone_04
00000270                            
00000270                            ; FM3 Data
00000270                            Emerald_FM3:
00000270                            	smpsAlterNote       $02
00000270 E102                     M 	dc.b	$e1,$02
00000272                            
00000272                            ; FM1 Data
00000272                            Emerald_FM1:
00000272                            	smpsSetvoice        $00
00000272 EF00                     M 	dc.b	$ef,$00
00000274 C106 C4C9 CD0C C9D0 2A     	dc.b	nE5, $06, nG5, nC6, nE6, $0C, nC6, nG6, $2A
0000027D                            	smpsStop
0000027D F2                       M 	dc.b	$f2
0000027E                            
0000027E                            ; FM2 Data
0000027E                            Emerald_FM2:
0000027E                            	smpsSetvoice        $00
0000027E EF00                     M 	dc.b	$ef,$00
00000280 BD06 C1C4 C90C C6CB 2A     	dc.b	nC5, $06, nE5, nG5, nC6, $0C, nA5, nD6, $2A
00000289                            	smpsStop
00000289 F2                       M 	dc.b	$f2
0000028A                            
0000028A                            ; FM4 Data
0000028A                            Emerald_FM4:
0000028A                            	smpsSetvoice        $01
0000028A EF01                     M 	dc.b	$ef,$01
0000028C C10C C106 C406 80C4 80C9+  	dc.b	nE5, $0C, nE5, $06, nG5, $06, nRst, nG5, nRst, nC6, $2A
00000297                            	smpsStop
00000297 F2                       M 	dc.b	$f2
00000298                            
00000298                            ; FM5 Data
00000298                            Emerald_FM5:
00000298                            	smpsSetvoice        $01
00000298 EF01                     M 	dc.b	$ef,$01
0000029A C90C C906 CD06 80CD 80D0+  	dc.b	nC6, $0C, nC6, $06, nE6, $06, nRst, nE6, nRst, nG6, $2A
000002A5                            	smpsStop
000002A5 F2                       M 	dc.b	$f2
000002A6                            
000002A6                            ; FM6 Data
000002A6                            Emerald_FM6:
000002A6                            	smpsSetvoice        $01
000002A6 EF01                     M 	dc.b	$ef,$01
000002A8 C40C C406 C906 80C9 80CD+  	dc.b	nG5, $0C, nG5, $06, nC6, $06, nRst, nC6, nRst, nE6, $2A
000002B3                            	smpsStop
000002B3 F2                       M 	dc.b	$f2
000002B4                            
000002B4                            ; PSG2 Data
000002B4                            Emerald_PSG2:
000002B4 802D                       	dc.b	nRst, $2D
000002B6                            
000002B6                            Emerald_Loop01:
000002B6 C406 C2C1 BF               	dc.b	nG5, $06, nF5, nE5, nD5
000002BB                            	smpsPSGAlterVol     $03
000002BB EC03                     M 	dc.b	$ec,$03
000002BD                            	smpsLoop            $00, $04, Emerald_Loop01
000002BD F700 04                  M 	dc.b	$f7,$00,$04
000002C0                          M 	z80_ptr	emerald_loop01
000002C0 0000                     M 	dc.w	(((emerald_loop01)<<8)&$ff00)|(((emerald_loop01)>>8)&$ff)|$80
000002C2                            	smpsStop
000002C2 F2                       M 	dc.b	$f2
000002C3                            
000002C3                            ; PSG1 Data
000002C3                            Emerald_PSG1:
000002C3                            	smpsNop             $01
000002C3 E201                     M 	dc.b	$e2,$01
000002C5 8002 802D                  	dc.b	nRst, $02, nRst, $2D
000002C9                            
000002C9                            Emerald_Loop00:
000002C9 C406 C2C1 BF               	dc.b	nG5, $06, nF5, nE5, nD5
000002CE                            	smpsPSGAlterVol     $03
000002CE EC03                     M 	dc.b	$ec,$03
000002D0                            	smpsLoop            $00, $04, Emerald_Loop00
000002D0 F700 04                  M 	dc.b	$f7,$00,$04
000002D3                          M 	z80_ptr	emerald_loop00
000002D3 0000                     M 	dc.w	(((emerald_loop00)<<8)&$ff00)|(((emerald_loop00)>>8)&$ff)|$80
000002D5                            
000002D5                            ; DAC Data
000002D5                            Emerald_DAC:
000002D5                            ; PSG3 Data
000002D5                            Emerald_PSG3:
000002D5                            	smpsNop             $01
000002D5 E201                     M 	dc.b	$e2,$01
000002D7                            	smpsStop
000002D7 F2                       M 	dc.b	$f2
000002D8                            
000002D8                            Emerald_Voices:
000002D8                            ;	Voice $00
000002D8                            ;	$04
000002D8                            ;	$35, $72, $54, $46, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000002D8                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $14, $1D, $80
000002D8                            	smpsVcAlgorithm     $04
000002D8 =00000004                M vcalgorithm	=	$04
000002D8                            	smpsVcFeedback      $00
000002D8 =00000000                M vcfeedback	=	$00
000002D8                            	smpsVcUnusedBits    $00
000002D8 =00000000                M vcunusedbits	=	$00
000002D8 =00000000                M vcd1r1unk	=	0
000002D8 =00000000                M vcd1r2unk	=	0
000002D8 =00000000                M vcd1r3unk	=	0
000002D8 =00000000                M vcd1r4unk	=	0
000002D8                            	smpsVcDetune        $04, $05, $07, $03
000002D8 =00000004                M vcdt1	=	$04
000002D8 =00000005                M vcdt2	=	$05
000002D8 =00000007                M vcdt3	=	$07
000002D8 =00000003                M vcdt4	=	$03
000002D8                            	smpsVcCoarseFreq    $06, $04, $02, $05
000002D8 =00000006                M vccf1	=	$06
000002D8 =00000004                M vccf2	=	$04
000002D8 =00000002                M vccf3	=	$02
000002D8 =00000005                M vccf4	=	$05
000002D8                            	smpsVcRateScale     $00, $00, $00, $00
000002D8 =00000000                M vcrs1	=	$00
000002D8 =00000000                M vcrs2	=	$00
000002D8 =00000000                M vcrs3	=	$00
000002D8 =00000000                M vcrs4	=	$00
000002D8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000002D8 =0000001F                M vcar1	=	$1f
000002D8 =0000001F                M vcar2	=	$1f
000002D8 =0000001F                M vcar3	=	$1f
000002D8 =0000001F                M vcar4	=	$1f
000002D8                            	smpsVcAmpMod        $00, $00, $00, $00
000002D8 =00000000                M vcam1	=	$00
000002D8 =00000000                M vcam2	=	$00
000002D8 =00000000                M vcam3	=	$00
000002D8 =00000000                M vcam4	=	$00
000002D8                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000002D8 =0000000D                M vcd1r1	=	$0d
000002D8 =00000007                M vcd1r2	=	$07
000002D8 =0000000A                M vcd1r3	=	$0a
000002D8 =00000007                M vcd1r4	=	$07
000002D8                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000002D8 =0000000B                M vcd2r1	=	$0b
000002D8 =00000000                M vcd2r2	=	$00
000002D8 =0000000B                M vcd2r3	=	$0b
000002D8 =00000000                M vcd2r4	=	$00
000002D8                            	smpsVcDecayLevel    $00, $01, $00, $01
000002D8 =00000000                M vcdl1	=	$00
000002D8 =00000001                M vcdl2	=	$01
000002D8 =00000000                M vcdl3	=	$00
000002D8 =00000001                M vcdl4	=	$01
000002D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002D8 =0000000F                M vcrr1	=	$0f
000002D8 =0000000F                M vcrr2	=	$0f
000002D8 =0000000F                M vcrr3	=	$0f
000002D8 =0000000F                M vcrr4	=	$0f
000002D8                            	smpsVcTotalLevel    $80, $1D, $14, $23
000002D8 =00000080                M vctl1	=	$80
000002D8 =0000001D                M vctl2	=	$1d
000002D8 =00000014                M vctl3	=	$14
000002D8 =00000023                M vctl4	=	$23
000002D8 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002D9 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002D9 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002D9 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002D9 =00000080                M vctlmask1	=	$80
000002D9 3554 7246                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002DD 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002E1 0707 0A0D                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000002E5 0000 0B0B                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002E9 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002ED 231D 9480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002F1                            
000002F1                            ;	Voice $01
000002F1                            ;	$3C
000002F1                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000002F1                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000002F1                            	smpsVcAlgorithm     $04
000002F1 =00000004                M vcalgorithm	=	$04
000002F1                            	smpsVcFeedback      $07
000002F1 =00000007                M vcfeedback	=	$07
000002F1                            	smpsVcUnusedBits    $00
000002F1 =00000000                M vcunusedbits	=	$00
000002F1 =00000000                M vcd1r1unk	=	0
000002F1 =00000000                M vcd1r2unk	=	0
000002F1 =00000000                M vcd1r3unk	=	0
000002F1 =00000000                M vcd1r4unk	=	0
000002F1                            	smpsVcDetune        $03, $05, $05, $03
000002F1 =00000003                M vcdt1	=	$03
000002F1 =00000005                M vcdt2	=	$05
000002F1 =00000005                M vcdt3	=	$05
000002F1 =00000003                M vcdt4	=	$03
000002F1                            	smpsVcCoarseFreq    $00, $00, $02, $01
000002F1 =00000000                M vccf1	=	$00
000002F1 =00000000                M vccf2	=	$00
000002F1 =00000002                M vccf3	=	$02
000002F1 =00000001                M vccf4	=	$01
000002F1                            	smpsVcRateScale     $01, $01, $01, $01
000002F1 =00000001                M vcrs1	=	$01
000002F1 =00000001                M vcrs2	=	$01
000002F1 =00000001                M vcrs3	=	$01
000002F1 =00000001                M vcrs4	=	$01
000002F1                            	smpsVcAttackRate    $13, $12, $13, $12
000002F1 =00000013                M vcar1	=	$13
000002F1 =00000012                M vcar2	=	$12
000002F1 =00000013                M vcar3	=	$13
000002F1 =00000012                M vcar4	=	$12
000002F1                            	smpsVcAmpMod        $00, $00, $00, $00
000002F1 =00000000                M vcam1	=	$00
000002F1 =00000000                M vcam2	=	$00
000002F1 =00000000                M vcam3	=	$00
000002F1 =00000000                M vcam4	=	$00
000002F1                            	smpsVcDecayRate1    $00, $08, $00, $08
000002F1 =00000000                M vcd1r1	=	$00
000002F1 =00000008                M vcd1r2	=	$08
000002F1 =00000000                M vcd1r3	=	$00
000002F1 =00000008                M vcd1r4	=	$08
000002F1                            	smpsVcDecayRate2    $00, $04, $00, $04
000002F1 =00000000                M vcd2r1	=	$00
000002F1 =00000004                M vcd2r2	=	$04
000002F1 =00000000                M vcd2r3	=	$00
000002F1 =00000004                M vcd2r4	=	$04
000002F1                            	smpsVcDecayLevel    $00, $01, $00, $01
000002F1 =00000000                M vcdl1	=	$00
000002F1 =00000001                M vcdl2	=	$01
000002F1 =00000000                M vcdl3	=	$00
000002F1 =00000001                M vcdl4	=	$01
000002F1                            	smpsVcReleaseRate   $07, $00, $07, $00
000002F1 =00000007                M vcrr1	=	$07
000002F1 =00000000                M vcrr2	=	$00
000002F1 =00000007                M vcrr3	=	$07
000002F1 =00000000                M vcrr4	=	$00
000002F1                            	smpsVcTotalLevel    $80, $16, $80, $1A
000002F1 =00000080                M vctl1	=	$80
000002F1 =00000016                M vctl2	=	$16
000002F1 =00000080                M vctl3	=	$80
000002F1 =0000001A                M vctl4	=	$1a
000002F1 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002F2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002F2 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002F2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002F2 =00000080                M vctlmask1	=	$80
000002F2 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002F6 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002FA 0808 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000002FE 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000302 1010 0707                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000306 1A16 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000030A                            
0000030A                            		include	"sound/music/9E - Credits.asm"
0000030A                            Credits_Header:
0000030A                            	smpsHeaderStartSong 2, 1
0000030A =0000030A                M songstart_292	equ	offset(*)
0000030A                            	smpsHeaderVoice     Credits_Voices
0000030A                          M 	z80_ptr	credits_voices
0000030A 0000                     M 	dc.w	(((credits_voices)<<8)&$ff00)|(((credits_voices)>>8)&$ff)|$80
0000030C                            	smpsHeaderChan      $06, $03
0000030C 06                       M 	dc.b	$06
0000030D 03                       M 	dc.b	$03
0000030E                            	smpsHeaderTempo     $01, $F0
0000030E 01F0                     M 	dc.b	$01,$f0
00000310                            
00000310                            	smpsHeaderDAC       Credits_DAC
00000310                          M 	z80_ptr	credits_dac
00000310 0000                     M 	dc.w	(((credits_dac)<<8)&$ff00)|(((credits_dac)>>8)&$ff)|$80
00000312 0000                     M 	dc.w	$00
00000314                            	smpsHeaderFM        Credits_FM1,	$00, $0E
00000314                          M 	z80_ptr	credits_fm1
00000314 0000                     M 	dc.w	(((credits_fm1)<<8)&$ff00)|(((credits_fm1)>>8)&$ff)|$80
00000316 000E                     M 	dc.b	$00,$0e
00000318                            	smpsHeaderFM        Credits_FM2,	$18, $0A
00000318                          M 	z80_ptr	credits_fm2
00000318 0000                     M 	dc.w	(((credits_fm2)<<8)&$ff00)|(((credits_fm2)>>8)&$ff)|$80
0000031A 180A                     M 	dc.b	$18,$0a
0000031C                            	smpsHeaderFM        Credits_FM3,	$00, $14
0000031C                          M 	z80_ptr	credits_fm3
0000031C 0000                     M 	dc.w	(((credits_fm3)<<8)&$ff00)|(((credits_fm3)>>8)&$ff)|$80
0000031E 0014                     M 	dc.b	$00,$14
00000320                            	smpsHeaderFM        Credits_FM4,	$00, $16
00000320                          M 	z80_ptr	credits_fm4
00000320 0000                     M 	dc.w	(((credits_fm4)<<8)&$ff00)|(((credits_fm4)>>8)&$ff)|$80
00000322 0016                     M 	dc.b	$00,$16
00000324                            	smpsHeaderFM        Credits_FM5,	$0C, $16
00000324                          M 	z80_ptr	credits_fm5
00000324 0000                     M 	dc.w	(((credits_fm5)<<8)&$ff00)|(((credits_fm5)>>8)&$ff)|$80
00000326 0C16                     M 	dc.b	$0c,$16
00000328                            	smpsHeaderPSG       Credits_PSG1,	$E8, $06, $00, fTone_0B
00000328                          M 	z80_ptr	credits_psg1
00000328 0000                     M 	dc.w	(((credits_psg1)<<8)&$ff00)|(((credits_psg1)>>8)&$ff)|$80
0000032A E806 000B                M 	dc.b	$e8,$06,$00,ftone_0b
0000032E                            	smpsHeaderPSG       Credits_PSG2,	$DC, $07, $00, fTone_0B
0000032E                          M 	z80_ptr	credits_psg2
0000032E 0000                     M 	dc.w	(((credits_psg2)<<8)&$ff00)|(((credits_psg2)>>8)&$ff)|$80
00000330 DC07 000B                M 	dc.b	$dc,$07,$00,ftone_0b
00000334                            	smpsHeaderPSG       Credits_PSG3,	$00, $02, $00, fTone_03
00000334                          M 	z80_ptr	credits_psg3
00000334 0000                     M 	dc.w	(((credits_psg3)<<8)&$ff00)|(((credits_psg3)>>8)&$ff)|$80
00000336 0002 0003                M 	dc.b	$00,$02,$00,ftone_03
0000033A                            
0000033A                            ; FM1 Data
0000033A                            Credits_FM1:
0000033A                            	smpsAlterPitch      $F4
0000033A E9F4                     M 	dc.b	$e9,$f4
0000033C                            	smpsAlterVol        $FE
0000033C E6FE                     M 	dc.b	$e6,$fe
0000033E                            	smpsCall            Credits_Call03
0000033E F8                       M 	dc.b	$f8
0000033F                          M 	z80_ptr	credits_call03
0000033F 0000                     M 	dc.w	(((credits_call03)<<8)&$ff00)|(((credits_call03)>>8)&$ff)|$80
00000341                            	smpsAlterPitch      $0C
00000341 E90C                     M 	dc.b	$e9,$0c
00000343                            	smpsAlterVol        $02
00000343 E602                     M 	dc.b	$e6,$02
00000345                            
00000345                            Credits_Loop24:
00000345 8030                       	dc.b	nRst, $30
00000347                            	smpsLoop            $00, $08, Credits_Loop24
00000347 F700 08                  M 	dc.b	$f7,$00,$08
0000034A                          M 	z80_ptr	credits_loop24
0000034A 0000                     M 	dc.w	(((credits_loop24)<<8)&$ff00)|(((credits_loop24)>>8)&$ff)|$80
0000034C                            	smpsSetvoice        $03
0000034C EF03                     M 	dc.b	$ef,$03
0000034E                            	smpsCall            Credits_Call21
0000034E F8                       M 	dc.b	$f8
0000034F                          M 	z80_ptr	credits_call21
0000034F 0000                     M 	dc.w	(((credits_call21)<<8)&$ff00)|(((credits_call21)>>8)&$ff)|$80
00000351 AE06 A2                    	dc.b	nA3, $06, nA2
00000354                            	smpsCall            Credits_Call21
00000354 F8                       M 	dc.b	$f8
00000355                          M 	z80_ptr	credits_call21
00000355 0000                     M 	dc.w	(((credits_call21)<<8)&$ff00)|(((credits_call21)>>8)&$ff)|$80
00000357                            	smpsAlterVol        $FD
00000357 E6FD                     M 	dc.b	$e6,$fd
00000359                            
00000359                            Credits_Loop25:
00000359                            	smpsSetvoice        $00
00000359 EF00                     M 	dc.b	$ef,$00
0000035B B706 BA                    	dc.b	nFs4, $06, nA4
0000035E                            	smpsCall            Credits_Call22
0000035E F8                       M 	dc.b	$f8
0000035F                          M 	z80_ptr	credits_call22
0000035F 0000                     M 	dc.w	(((credits_call22)<<8)&$ff00)|(((credits_call22)>>8)&$ff)|$80
00000361                            	smpsLoop            $00, $02, Credits_Loop25
00000361 F700 02                  M 	dc.b	$f7,$00,$02
00000364                          M 	z80_ptr	credits_loop25
00000364 0000                     M 	dc.w	(((credits_loop25)<<8)&$ff00)|(((credits_loop25)>>8)&$ff)|$80
00000366 8006 8080 3080             	dc.b	nRst, $06, nRst, nRst, $30, nRst
0000036C                            	smpsSetvoice        $0B
0000036C EF0B                     M 	dc.b	$ef,$0b
0000036E                            	smpsAlterPitch      $18
0000036E E918                     M 	dc.b	$e9,$18
00000370                            	smpsAlterVol        $02
00000370 E602                     M 	dc.b	$e6,$02
00000372                            
00000372                            Credits_Loop26:
00000372 940C 8F92 8F06 9405 9407+  	dc.b	nG1, $0C, nD1, nF1, nD1, $06, nG1, $05, nG1, $07, $06, nD1
0000037E 0C92 8F                    	dc.b	$0C, nF1, nD1
00000381                            	smpsLoop            $00, $05, Credits_Loop26
00000381 F700 05                  M 	dc.b	$f7,$00,$05
00000384                          M 	z80_ptr	credits_loop26
00000384 0000                     M 	dc.w	(((credits_loop26)<<8)&$ff00)|(((credits_loop26)>>8)&$ff)|$80
00000386 8030 80                    	dc.b	nRst, $30, nRst
00000389                            	smpsSetvoice        $0E
00000389 EF0E                     M 	dc.b	$ef,$0e
0000038B                            	smpsAlterVol        $FF
0000038B E6FF                     M 	dc.b	$e6,$ff
0000038D                            	smpsAlterPitch      $E8
0000038D E9E8                     M 	dc.b	$e9,$e8
0000038F                            	smpsCall            Credits_Call23
0000038F F8                       M 	dc.b	$f8
00000390                          M 	z80_ptr	credits_call23
00000390 0000                     M 	dc.w	(((credits_call23)<<8)&$ff00)|(((credits_call23)>>8)&$ff)|$80
00000392 8012 9194 0680 1896 129A+  	dc.b	nRst, $12, nE1, nG1, $06, nRst, $18, nA1, $12, nCs2, $06, nRst
0000039E 8012 8F93 0880 1696 0691+  	dc.b	nRst, $12, nD1, nFs1, $08, nRst, $16, nA1, $06, nE1, nF1, nG1
000003AA 96                         	dc.b	nA1
000003AB                            	smpsCall            Credits_Call23
000003AB F8                       M 	dc.b	$f8
000003AC                          M 	z80_ptr	credits_call23
000003AC 0000                     M 	dc.w	(((credits_call23)<<8)&$ff00)|(((credits_call23)>>8)&$ff)|$80
000003AE 8012 9D9A 0880 1696 129D+  	dc.b	nRst, $12, nE2, nCs2, $08, nRst, $16, nA1, $12, nE2, $08, nRst
000003BA 04                         	dc.b	$04
000003BB                            	smpsSetvoice        $12
000003BB EF12                     M 	dc.b	$ef,$12
000003BD                            	smpsModSet          $18, $01, $0A, $04
000003BD F018 010A 04             M 	dc.b	$f0,$18,$01,$0a,$04
000003C2 8030 80                    	dc.b	nRst, $30, nRst
000003C5                            	smpsCall            Credits_Call24
000003C5 F8                       M 	dc.b	$f8
000003C6                          M 	z80_ptr	credits_call24
000003C6 0000                     M 	dc.w	(((credits_call24)<<8)&$ff00)|(((credits_call24)>>8)&$ff)|$80
000003C8 E724 E7C5 01E7 C4E7 C3E7+  	dc.b	smpsNoAttack, $24, smpsNoAttack, nAb5, $01, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack
000003D4 C1E7 C0E7 BFE7 BEE7 BDE7+  	dc.b	nE5, smpsNoAttack, nEb5, smpsNoAttack, nD5, smpsNoAttack, nCs5, smpsNoAttack, nC5, smpsNoAttack, nB4, smpsNoAttack
000003E0 BBE7 BA80 60               	dc.b	nBb4, smpsNoAttack, nA4, nRst, $60
000003E5                            	smpsSetvoice        $01
000003E5 EF01                     M 	dc.b	$ef,$01
000003E7                            	smpsAlterPitch      $F4
000003E7 E9F4                     M 	dc.b	$e9,$f4
000003E9                            	smpsAlterVol        $FA
000003E9 E6FA                     M 	dc.b	$e6,$fa
000003EB                            	smpsModOff
000003EB F4                       M 	dc.b	$f4
000003EC                            	smpsCall            Credits_Call25
000003EC F8                       M 	dc.b	$f8
000003ED                          M 	z80_ptr	credits_call25
000003ED 0000                     M 	dc.w	(((credits_call25)<<8)&$ff00)|(((credits_call25)>>8)&$ff)|$80
000003EF B103                       	dc.b	nC4, $03
000003F1                            	smpsCall            Credits_Call25
000003F1 F8                       M 	dc.b	$f8
000003F2                          M 	z80_ptr	credits_call25
000003F2 0000                     M 	dc.w	(((credits_call25)<<8)&$ff00)|(((credits_call25)>>8)&$ff)|$80
000003F4 8003 8060                  	dc.b	nRst, $03, nRst, $60
000003F8                            	smpsAlterVol        $04
000003F8 E604                     M 	dc.b	$e6,$04
000003FA                            	smpsAlterNote       $01
000003FA E101                     M 	dc.b	$e1,$01
000003FC                            	smpsSetvoice        $1B
000003FC EF1B                     M 	dc.b	$ef,$1b
000003FE                            	smpsAlterVol        $06
000003FE E606                     M 	dc.b	$e6,$06
00000400 C10C                       	dc.b	nE5, $0C
00000402                            	smpsNoteFill        $06
00000402 E806                     M 	dc.b	$e8,$06
00000404 BD06 BABD 0C80 80          	dc.b	nC5, $06, nA4, nC5, $0C, nRst, nRst
0000040B                            	smpsSetvoice        $1C
0000040B EF1C                     M 	dc.b	$ef,$1c
0000040D                            	smpsAlterVol        $FA
0000040D E6FA                     M 	dc.b	$e6,$fa
0000040F                            	smpsNoteFill        $00
0000040F E800                     M 	dc.b	$e8,$00
00000411 BC0C 1206                  	dc.b	nB4, $0C, $12, $06
00000415                            	smpsSetvoice        $1B
00000415 EF1B                     M 	dc.b	$ef,$1b
00000417                            	smpsAlterVol        $06
00000417 E606                     M 	dc.b	$e6,$06
00000419                            	smpsNoteFill        $06
00000419 E806                     M 	dc.b	$e8,$06
0000041B C206 C280 C280 C2          	dc.b	nF5, $06, nF5, nRst, nF5, nRst, nF5
00000422                            	smpsNoteFill        $00
00000422 E800                     M 	dc.b	$e8,$00
00000424 C30C C480                  	dc.b	nFs5, $0C, nG5, nRst
00000428                            	smpsNoteFill        $06
00000428 E806                     M 	dc.b	$e8,$06
0000042A C406 06C6 C4               	dc.b	nG5, $06, $06, nA5, nG5
0000042F                            	smpsNoteFill        $00
0000042F E800                     M 	dc.b	$e8,$00
00000431 C10C                       	dc.b	nE5, $0C
00000433                            	smpsNoteFill        $06
00000433 E806                     M 	dc.b	$e8,$06
00000435 BD06 BABD 0C80 80          	dc.b	nC5, $06, nA4, nC5, $0C, nRst, nRst
0000043C                            	smpsNoteFill        $00
0000043C E800                     M 	dc.b	$e8,$00
0000043E                            	smpsSetvoice        $1C
0000043E EF1C                     M 	dc.b	$ef,$1c
00000440                            	smpsAlterVol        $FA
00000440 E6FA                     M 	dc.b	$e6,$fa
00000442 C1C4 C1                    	dc.b	nE5, nG5, nE5
00000445                            	smpsSetvoice        $1A
00000445 EF1A                     M 	dc.b	$ef,$1a
00000447                            	smpsAlterVol        $06
00000447 E606                     M 	dc.b	$e6,$06
00000449                            	smpsNoteFill        $06
00000449 E806                     M 	dc.b	$e8,$06
0000044B C206 C280 C280 C2          	dc.b	nF5, $06, nF5, nRst, nF5, nRst, nF5
00000452                            	smpsNoteFill        $00
00000452 E800                     M 	dc.b	$e8,$00
00000454 C30C C406 8080 2480 3080   	dc.b	nFs5, $0C, nG5, $06, nRst, nRst, $24, nRst, $30, nRst
0000045E                            	smpsSetvoice        $1F
0000045E EF1F                     M 	dc.b	$ef,$1f
00000460                            	smpsAlterPitch      $18
00000460 E918                     M 	dc.b	$e9,$18
00000462                            	smpsAlterVol        $F7
00000462 E6F7                     M 	dc.b	$e6,$f7
00000464                            	smpsAlterNote       $00
00000464 E100                     M 	dc.b	$e1,$00
00000466 8006 ACAE 80B1 80B3 80B4+  	dc.b	nRst, $06, nG3, nA3, nRst, nC4, nRst, nD4, nRst, nEb4, nRst, nD4
00000472 80B1 B380 B1               	dc.b	nRst, nC4, nD4, nRst, nC4
00000477                            	smpsAlterPitch      $F4
00000477 E9F4                     M 	dc.b	$e9,$f4
00000479                            	smpsSetvoice        $00
00000479 EF00                     M 	dc.b	$ef,$00
0000047B 800C AC06 AEB1 8012 AC06+  	dc.b	nRst, $0C, nG3, $06, nA3, nC4, nRst, $12, nG3, $06, nA3, nC4
00000487 80B4 B180 B1               	dc.b	nRst, nEb4, nC4, nRst, nC4
0000048C                            	smpsAlterPitch      $0C
0000048C E90C                     M 	dc.b	$e9,$0c
0000048E                            	smpsSetvoice        $1F
0000048E EF1F                     M 	dc.b	$ef,$1f
00000490 8006 B812 B406 80B3 80B4+  	dc.b	nRst, $06, nG4, $12, nEb4, $06, nRst, nD4, nRst, nEb4, nRst, nD4
0000049C 80B1 AE80 B1               	dc.b	nRst, nC4, nA3, nRst, nC4
000004A1                            	smpsAlterPitch      $F4
000004A1 E9F4                     M 	dc.b	$e9,$f4
000004A3                            	smpsSetvoice        $00
000004A3 EF00                     M 	dc.b	$ef,$00
000004A5 8006 AF12 AE06 8012 AF06+  	dc.b	nRst, $06, nBb3, $12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3
000004B1 80AF B180 B180 3080        	dc.b	nRst, nBb3, nC4, nRst, nC4, nRst, $30, nRst
000004B9                            	smpsSetvoice        $21
000004B9 EF21                     M 	dc.b	$ef,$21
000004BB                            	smpsAlterPitch      $0C
000004BB E90C                     M 	dc.b	$e9,$0c
000004BD 8030 8008 A004 9E0C 9D9B+  	dc.b	nRst, $30, nRst, $08, nG2, $04, nF2, $0C, nE2, nD2, nC2, $08
000004C9 0491 0C92 9394 9899 9B9D+  	dc.b	$04, nE1, $0C, nF1, nFs1, nG1, nB1, nC2, nD2, nE2, nB1, nAb1
000004D5 9391 989D 9196 9899 9896+  	dc.b	nFs1, nE1, nB1, nE2, nE1, nA1, nB1, nC2, nB1, nA1, nC2, nE2
000004E1 9695 9799 9795 9697 9899+  	dc.b	nA1, nAb1, nBb1, nC2, nBb1, nAb1, nA1, nBb1, nB1, nC2, nB1, nC2
000004ED 9B9D 0804 980C 9195 9698+  	dc.b	nD2, nE2, $08, $04, nB1, $0C, nE1, nAb1, nA1, nB1, nC2, nE2
000004F9 9E08 9610 970C 98          	dc.b	nF2, $08, nA1, $10, nBb1, $0C, nB1
00000500                            	smpsCall            Credits_Call26
00000500 F8                       M 	dc.b	$f8
00000501                          M 	z80_ptr	credits_call26
00000501 0000                     M 	dc.w	(((credits_call26)<<8)&$ff00)|(((credits_call26)>>8)&$ff)|$80
00000503 9E                         	dc.b	nF2
00000504                            	smpsAlterVol        $04
00000504 E604                     M 	dc.b	$e6,$04
00000506                            	smpsCall            Credits_Call26
00000506 F8                       M 	dc.b	$f8
00000507                          M 	z80_ptr	credits_call26
00000507 0000                     M 	dc.w	(((credits_call26)<<8)&$ff00)|(((credits_call26)>>8)&$ff)|$80
00000509 9E                         	dc.b	nF2
0000050A                            	smpsAlterVol        $FC
0000050A E6FC                     M 	dc.b	$e6,$fc
0000050C                            	smpsCall            Credits_Call26
0000050C F8                       M 	dc.b	$f8
0000050D                          M 	z80_ptr	credits_call26
0000050D 0000                     M 	dc.w	(((credits_call26)<<8)&$ff00)|(((credits_call26)>>8)&$ff)|$80
0000050F 9E08 9904                  	dc.b	nF2, $08, nC2, $04
00000513                            	smpsSetvoice        $23
00000513 EF23                     M 	dc.b	$ef,$23
00000515                            	smpsAlterPitch      $E8
00000515 E9E8                     M 	dc.b	$e9,$e8
00000517                            	smpsAlterVol        $07
00000517 E607                     M 	dc.b	$e6,$07
00000519 8060                       	dc.b	nRst, $60
0000051B                            	smpsCall            Credits_Call0A
0000051B F8                       M 	dc.b	$f8
0000051C                          M 	z80_ptr	credits_call0a
0000051C 0000                     M 	dc.w	(((credits_call0a)<<8)&$ff00)|(((credits_call0a)>>8)&$ff)|$80
0000051E 8060                       	dc.b	nRst, $60
00000520                            	smpsAlterVol        $FB
00000520 E6FB                     M 	dc.b	$e6,$fb
00000522 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
0000052E 80D4 CD06 8018             	dc.b	nRst, nB6, nE6, $06, nRst, $18
00000534                            	smpsAlterVol        $05
00000534 E605                     M 	dc.b	$e6,$05
00000536 800C AE80 AE80 24          	dc.b	nRst, $0C, nA3, nRst, nA3, nRst, $24
0000053D                            	smpsAlterNote       $02
0000053D E102                     M 	dc.b	$e1,$02
0000053F                            	smpsAlterVol        $08
0000053F E608                     M 	dc.b	$e6,$08
00000541 A26C                       	dc.b	nA2, $6C
00000543                            	smpsStop
00000543 F2                       M 	dc.b	$f2
00000544                            
00000544                            Credits_Call21:
00000544 A50C B106 80B1 0CAC B312+  	dc.b	nC3, $0C, nC4, $06, nRst, nC4, $0C, nG3, nD4, $12, nC4, $0C
00000550 AC06 AEB1 A70C B306 80B3+  	dc.b	nG3, $06, nA3, nC4, nD3, $0C, nD4, $06, nRst, nD4, $0C, nA3
0000055C B512 B306 80AE B0B3 A30C+  	dc.b	nE4, $12, nD4, $06, nRst, nA3, nB3, nD4, nBb2, $0C, nBb3, $06
00000568 80AF 0CAA B112 AF0C AA06+  	dc.b	nRst, nBb3, $0C, nF3, nC4, $12, nBb3, $0C, nF3, $06, nG3, nBb3
00000574 A20C AE06 A2A4 0CB0 06A4+  	dc.b	nA2, $0C, nA3, $06, nA2, nB2, $0C, nB3, $06, nB2, nC3, $0C
00000580 B106 A5A2 0C               	dc.b	nC4, $06, nC3, nA2, $0C
00000585                            	smpsReturn
00000585 E3                       M 	dc.b	$e3
00000586                            
00000586                            Credits_Call22:
00000586 BE0C BC06 BABC BA04 E708+  	dc.b	nCs5, $0C, nB4, $06, nA4, nB4, nA4, $04, smpsNoAttack, $08, nA4, $04
00000592 800E                       	dc.b	nRst, $0E
00000594                            	smpsSetvoice        $07
00000594 EF07                     M 	dc.b	$ef,$07
00000596 B706 B2B5 B7               	dc.b	nFs4, $06, nCs4, nE4, nFs4
0000059B                            	smpsSetvoice        $00
0000059B EF00                     M 	dc.b	$ef,$00
0000059D B7BA BE0C BC06 BABC BA0C+  	dc.b	nFs4, nA4, nCs5, $0C, nB4, $06, nA4, nB4, nA4, $0C, nB4, $04
000005A9 8008 BA04 8008 BC04 8008+  	dc.b	nRst, $08, nA4, $04, nRst, $08, nB4, $04, nRst, $08, nCs5, $12
000005B5 BA06 B780 B780 24          	dc.b	nA4, $06, nFs4, nRst, nFs4, nRst, $24
000005BC                            	smpsSetvoice        $07
000005BC EF07                     M 	dc.b	$ef,$07
000005BE B706 B2B5 B780 0C80 30BE+  	dc.b	nFs4, $06, nCs4, nE4, nFs4, nRst, $0C, nRst, $30, nCs5, $06, nCs5
000005CA BA04 8008 BC06 BE          	dc.b	nA4, $04, nRst, $08, nB4, $06, nCs5
000005D1                            	smpsReturn
000005D1 E3                       M 	dc.b	$e3
000005D2                            
000005D2                            Credits_Call24:
000005D2 C301 E7C4 E7C5 E7C6 2D     	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
000005DB                            	smpsAlterPitch      $02
000005DB E902                     M 	dc.b	$e9,$02
000005DD C301 E7C4 E7C5 E7C6 2D     	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
000005E6                            	smpsAlterPitch      $01
000005E6 E901                     M 	dc.b	$e9,$01
000005E8 C301 E7C4 E7C5 E7C6 2D     	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
000005F1                            	smpsAlterPitch      $FC
000005F1 E9FC                     M 	dc.b	$e9,$fc
000005F3 C301 E7C4 E7C5 E7C6 2D     	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D
000005FC                            	smpsAlterPitch      $01
000005FC E901                     M 	dc.b	$e9,$01
000005FE C301 E7C4 E7C5 E7C6 2DE7+  	dc.b	nFs5, $01, smpsNoAttack, nG5, smpsNoAttack, nAb5, smpsNoAttack, nA5, $2D, smpsNoAttack, $30, smpsNoAttack
0000060A 30                         	dc.b	$30
0000060B                            	smpsReturn
0000060B E3                       M 	dc.b	$e3
0000060C                            
0000060C                            Credits_Call25:
0000060C A70C B306 80B1 80B3 0CA7+  	dc.b	nD3, $0C, nD4, $06, nRst, nC4, nRst, nD4, $0C, nD3, $03, nRst
00000618 06A7 03B3 0CB1 B309 AE03+  	dc.b	$06, nD3, $03, nD4, $0C, nC4, nD4, $09, nA3, $03, nG3, $06
00000624 80AC 0CAE 0680 AE0C AF06+  	dc.b	nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C, nBb3, $06, nRst, $27
00000630                            	smpsReturn
00000630 E3                       M 	dc.b	$e3
00000631                            
00000631                            Credits_Call0A:
00000631 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
0000063D 03C8 1880 06CA 80CA 80CA+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, nRst, nCs6, nRst, nCs6, nRst, nA5
00000649 80C4 0F80 03C8 1880 06     	dc.b	nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
00000652                            	smpsLoop            $00, $02, Credits_Call0A
00000652 F700 02                  M 	dc.b	$f7,$00,$02
00000655                          M 	z80_ptr	credits_call0a
00000655 0000                     M 	dc.w	(((credits_call0a)<<8)&$ff00)|(((credits_call0a)>>8)&$ff)|$80
00000657                            	smpsReturn
00000657 E3                       M 	dc.b	$e3
00000658                            
00000658                            Credits_Call23:
00000658 8012 9497 0680 1899 1294+  	dc.b	nRst, $12, nG1, nBb1, $06, nRst, $18, nC2, $12, nG1, $06, nRst
00000664 8012 9296 0680 1897 1292+  	dc.b	nRst, $12, nF1, nA1, $06, nRst, $18, nBb1, $12, nF1, $06, nRst
00000670                            	smpsReturn
00000670 E3                       M 	dc.b	$e3
00000671                            
00000671                            Credits_Call26:
00000671 8099 8099 809E 80          	dc.b	nRst, nC2, nRst, nC2, nRst, nF2, nRst
00000678                            	smpsReturn
00000678 E3                       M 	dc.b	$e3
00000679                            
00000679                            Credits_Call03:
00000679                            	smpsSetvoice        $07
00000679 EF07                     M 	dc.b	$ef,$07
0000067B 8054 C704 C8C9 CA24 CDD2+  	dc.b	nRst, $54, nBb5, $04, nB5, nC6, nCs6, $24, nE6, nA6, $18, nG6
00000687 24CF CB18 CB0C CA80 CD60+  	dc.b	$24, nFs6, nD6, $18, nD6, $0C, nCs6, nRst, nE6, $60, smpsNoAttack, $3C
00000693 CA24 CDD2 18D4 24D0 D418+  	dc.b	nCs6, $24, nE6, nA6, $18, nB6, $24, nG6, nB6, $18, nB6, $24
0000069F D660 E73C                  	dc.b	nCs7, $60, smpsNoAttack, $3C
000006A3                            	smpsReturn
000006A3 E3                       M 	dc.b	$e3
000006A4                            
000006A4                            ; FM2 Data
000006A4                            Credits_FM2:
000006A4 8060                       	dc.b	nRst, $60
000006A6                            	smpsSetvoice        $01
000006A6 EF01                     M 	dc.b	$ef,$01
000006A8                            	smpsNoteFill        $06
000006A8 E806                     M 	dc.b	$e8,$06
000006AA                            	smpsCall            Credits_Call1A
000006AA F8                       M 	dc.b	$f8
000006AB                          M 	z80_ptr	credits_call1a
000006AB 0000                     M 	dc.w	(((credits_call1a)<<8)&$ff00)|(((credits_call1a)>>8)&$ff)|$80
000006AD                            	smpsCall            Credits_Call1A
000006AD F8                       M 	dc.b	$f8
000006AE                          M 	z80_ptr	credits_call1a
000006AE 0000                     M 	dc.w	(((credits_call1a)<<8)&$ff00)|(((credits_call1a)>>8)&$ff)|$80
000006B0                            
000006B0                            Credits_Loop17:
000006B0 850C                       	dc.b	nE0, $0C
000006B2                            	smpsLoop            $00, $0C, Credits_Loop17
000006B2 F700 0C                  M 	dc.b	$f7,$00,$0c
000006B5                          M 	z80_ptr	credits_loop17
000006B5 0000                     M 	dc.w	(((credits_loop17)<<8)&$ff00)|(((credits_loop17)>>8)&$ff)|$80
000006B7 8A87 8889                  	dc.b	nA0, nFs0, nG0, nAb0
000006BB                            	smpsCall            Credits_Call1A
000006BB F8                       M 	dc.b	$f8
000006BC                          M 	z80_ptr	credits_call1a
000006BC 0000                     M 	dc.w	(((credits_call1a)<<8)&$ff00)|(((credits_call1a)>>8)&$ff)|$80
000006BE                            
000006BE                            Credits_Loop18:
000006BE 88                         	dc.b	nG0
000006BF                            	smpsLoop            $00, $0B, Credits_Loop18
000006BF F700 0B                  M 	dc.b	$f7,$00,$0b
000006C2                          M 	z80_ptr	credits_loop18
000006C2 0000                     M 	dc.w	(((credits_loop18)<<8)&$ff00)|(((credits_loop18)>>8)&$ff)|$80
000006C4                            
000006C4                            Credits_Loop19:
000006C4 8A                         	dc.b	nA0
000006C5                            	smpsLoop            $00, $0A, Credits_Loop19
000006C5 F700 0A                  M 	dc.b	$f7,$00,$0a
000006C8                          M 	z80_ptr	credits_loop19
000006C8 0000                     M 	dc.w	(((credits_loop19)<<8)&$ff00)|(((credits_loop19)>>8)&$ff)|$80
000006CA                            	smpsNoteFill        $00
000006CA E800                     M 	dc.b	$e8,$00
000006CC                            	smpsAlterVol        $FC
000006CC E6FC                     M 	dc.b	$e6,$fc
000006CE 8A8B 8C                    	dc.b	nA0, nBb0, nB0
000006D1                            	smpsAlterVol        $04
000006D1 E604                     M 	dc.b	$e6,$04
000006D3                            	smpsNoteFill        $09
000006D3 E809                     M 	dc.b	$e8,$09
000006D5                            
000006D5                            Credits_Loop1A:
000006D5 8D0C                       	dc.b	nC1, $0C
000006D7                            	smpsLoop            $00, $0C, Credits_Loop1A
000006D7 F700 0C                  M 	dc.b	$f7,$00,$0c
000006DA                          M 	z80_ptr	credits_loop1a
000006DA 0000                     M 	dc.w	(((credits_loop1a)<<8)&$ff00)|(((credits_loop1a)>>8)&$ff)|$80
000006DC                            	smpsNoteFill        $00
000006DC E800                     M 	dc.b	$e8,$00
000006DE 8D8A 8B8C                  	dc.b	nC1, nA0, nBb0, nB0
000006E2                            	smpsNoteFill        $09
000006E2 E809                     M 	dc.b	$e8,$09
000006E4                            
000006E4                            Credits_Loop1B:
000006E4 8D0C                       	dc.b	nC1, $0C
000006E6                            	smpsLoop            $00, $0C, Credits_Loop1B
000006E6 F700 0C                  M 	dc.b	$f7,$00,$0c
000006E9                          M 	z80_ptr	credits_loop1b
000006E9 0000                     M 	dc.w	(((credits_loop1b)<<8)&$ff00)|(((credits_loop1b)>>8)&$ff)|$80
000006EB 8D06 99                    	dc.b	nC1, $06, nC2
000006EE                            	smpsNoteFill        $00
000006EE E800                     M 	dc.b	$e8,$00
000006F0 8A0C 8B8C                  	dc.b	nA0, $0C, nBb0, nB0
000006F4                            	smpsAlterPitch      $E8
000006F4 E9E8                     M 	dc.b	$e9,$e8
000006F6                            	smpsAlterVol        $0C
000006F6 E60C                     M 	dc.b	$e6,$0c
000006F8                            	smpsSetvoice        $04
000006F8 EF04                     M 	dc.b	$ef,$04
000006FA                            
000006FA                            Credits_Loop1C:
000006FA                            	smpsCall            Credits_Call14
000006FA F8                       M 	dc.b	$f8
000006FB                          M 	z80_ptr	credits_call14
000006FB 0000                     M 	dc.w	(((credits_call14)<<8)&$ff00)|(((credits_call14)>>8)&$ff)|$80
000006FD                            	smpsLoop            $00, $02, Credits_Loop1C
000006FD F700 02                  M 	dc.b	$f7,$00,$02
00000700                          M 	z80_ptr	credits_loop1c
00000700 0000                     M 	dc.w	(((credits_loop1c)<<8)&$ff00)|(((credits_loop1c)>>8)&$ff)|$80
00000702                            	smpsAlterVol        $F9
00000702 E6F9                     M 	dc.b	$e6,$f9
00000704                            	smpsSetvoice        $08
00000704 EF08                     M 	dc.b	$ef,$08
00000706                            
00000706                            Credits_Loop20:
00000706                            	smpsCall            Credits_Call1B
00000706 F8                       M 	dc.b	$f8
00000707                          M 	z80_ptr	credits_call1b
00000707 0000                     M 	dc.w	(((credits_call1b)<<8)&$ff00)|(((credits_call1b)>>8)&$ff)|$80
00000709                            
00000709                            Credits_Loop1D:
00000709 9F04 8008 9F0C             	dc.b	nFs2, $04, nRst, $08, nFs2, $0C
0000070F                            	smpsLoop            $00, $02, Credits_Loop1D
0000070F F700 02                  M 	dc.b	$f7,$00,$02
00000712                          M 	z80_ptr	credits_loop1d
00000712 0000                     M 	dc.w	(((credits_loop1d)<<8)&$ff00)|(((credits_loop1d)>>8)&$ff)|$80
00000714 069C 129D 0C9E             	dc.b	$06, nEb2, $12, nE2, $0C, nF2
0000071A                            	smpsCall            Credits_Call1B
0000071A F8                       M 	dc.b	$f8
0000071B                          M 	z80_ptr	credits_call1b
0000071B 0000                     M 	dc.w	(((credits_call1b)<<8)&$ff00)|(((credits_call1b)>>8)&$ff)|$80
0000071D                            
0000071D                            Credits_Loop1E:
0000071D 9D04 8008 9D0C             	dc.b	nE2, $04, nRst, $08, nE2, $0C
00000723                            	smpsLoop            $00, $02, Credits_Loop1E
00000723 F700 02                  M 	dc.b	$f7,$00,$02
00000726                          M 	z80_ptr	credits_loop1e
00000726 0000                     M 	dc.w	(((credits_loop1e)<<8)&$ff00)|(((credits_loop1e)>>8)&$ff)|$80
00000728                            
00000728                            Credits_Loop1F:
00000728 9C04 8008 9C0C             	dc.b	nEb2, $04, nRst, $08, nEb2, $0C
0000072E                            	smpsLoop            $00, $02, Credits_Loop1F
0000072E F700 02                  M 	dc.b	$f7,$00,$02
00000731                          M 	z80_ptr	credits_loop1f
00000731 0000                     M 	dc.w	(((credits_loop1f)<<8)&$ff00)|(((credits_loop1f)>>8)&$ff)|$80
00000733                            	smpsLoop            $01, $02, Credits_Loop20
00000733 F701 02                  M 	dc.b	$f7,$01,$02
00000736                          M 	z80_ptr	credits_loop20
00000736 0000                     M 	dc.w	(((credits_loop20)<<8)&$ff00)|(((credits_loop20)>>8)&$ff)|$80
00000738 8060 8048                  	dc.b	nRst, $60, nRst, $48
0000073C                            	smpsSetvoice        $0C
0000073C EF0C                     M 	dc.b	$ef,$0c
0000073E                            	smpsAlterVol        $13
0000073E E613                     M 	dc.b	$e6,$13
00000740                            	smpsCall            Credits_Call06
00000740 F8                       M 	dc.b	$f8
00000741                          M 	z80_ptr	credits_call06
00000741 0000                     M 	dc.w	(((credits_call06)<<8)&$ff00)|(((credits_call06)>>8)&$ff)|$80
00000743 2480 60                    	dc.b	$24, nRst, $60
00000746                            	smpsSetvoice        $0F
00000746 EF0F                     M 	dc.b	$ef,$0f
00000748                            	smpsAlterVol        $F3
00000748 E6F3                     M 	dc.b	$e6,$f3
0000074A                            	smpsModSet          $04, $02, $03, $02
0000074A F004 0203 02             M 	dc.b	$f0,$04,$02,$03,$02
0000074F                            	smpsCall            Credits_Call16
0000074F F8                       M 	dc.b	$f8
00000750                          M 	z80_ptr	credits_call16
00000750 0000                     M 	dc.w	(((credits_call16)<<8)&$ff00)|(((credits_call16)>>8)&$ff)|$80
00000752 C418 C330 E718 800C        	dc.b	nG5, $18, nFs5, $30, smpsNoAttack, $18, nRst, $0C
0000075A                            	smpsCall            Credits_Call16
0000075A F8                       M 	dc.b	$f8
0000075B                          M 	z80_ptr	credits_call16
0000075B 0000                     M 	dc.w	(((credits_call16)<<8)&$ff00)|(((credits_call16)>>8)&$ff)|$80
0000075D BE                         	dc.b	nCs5
0000075E                            	smpsSetvoice        $13
0000075E EF13                     M 	dc.b	$ef,$13
00000760                            	smpsAlterVol        $F5
00000760 E6F5                     M 	dc.b	$e6,$f5
00000762                            	smpsModOff
00000762 F4                       M 	dc.b	$f4
00000763 8060                       	dc.b	nRst, $60
00000765                            
00000765                            Credits_Loop21:
00000765                            	smpsCall            Credits_Call1C
00000765 F8                       M 	dc.b	$f8
00000766                          M 	z80_ptr	credits_call1c
00000766 0000                     M 	dc.w	(((credits_call1c)<<8)&$ff00)|(((credits_call1c)>>8)&$ff)|$80
00000768 A80C A908 A110             	dc.b	nEb3, $0C, nE3, $08, nAb2, $10
0000076E                            	smpsCall            Credits_Call1C
0000076E F8                       M 	dc.b	$f8
0000076F                          M 	z80_ptr	credits_call1c
0000076F 0000                     M 	dc.w	(((credits_call1c)<<8)&$ff00)|(((credits_call1c)>>8)&$ff)|$80
00000771 A808 A904 8018             	dc.b	nEb3, $08, nE3, $04, nRst, $18
00000777                            	smpsLoop            $00, $02, Credits_Loop21
00000777 F700 02                  M 	dc.b	$f7,$00,$02
0000077A                          M 	z80_ptr	credits_loop21
0000077A 0000                     M 	dc.w	(((credits_loop21)<<8)&$ff00)|(((credits_loop21)>>8)&$ff)|$80
0000077C 8060                       	dc.b	nRst, $60
0000077E                            	smpsSetvoice        $17
0000077E EF17                     M 	dc.b	$ef,$17
00000780                            	smpsAlterNote       $02
00000780 E102                     M 	dc.b	$e1,$02
00000782                            	smpsAlterPitch      $F4
00000782 E9F4                     M 	dc.b	$e9,$f4
00000784                            	smpsAlterVol        $0A
00000784 E60A                     M 	dc.b	$e6,$0a
00000786                            	smpsCall            Credits_Call10
00000786 F8                       M 	dc.b	$f8
00000787                          M 	z80_ptr	credits_call10
00000787 0000                     M 	dc.w	(((credits_call10)<<8)&$ff00)|(((credits_call10)>>8)&$ff)|$80
00000789 CE15 CD03 CB06 80C9 0CCD+  	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
00000795 C90C CB06 8012 8060        	dc.b	nC6, $0C, nD6, $06, nRst, $12, nRst, $60
0000079D                            	smpsSetvoice        $1B
0000079D EF1B                     M 	dc.b	$ef,$1b
0000079F                            	smpsAlterNote       $00
0000079F E100                     M 	dc.b	$e1,$00
000007A1                            	smpsNoteFill        $06
000007A1 E806                     M 	dc.b	$e8,$06
000007A3 803C B806 06BA BDBD BA     	dc.b	nRst, $3C, nG4, $06, $06, nA4, nC5, nC5, nA4
000007AC                            	smpsSetvoice        $1D
000007AC EF1D                     M 	dc.b	$ef,$1d
000007AE                            	smpsAlterVol        $FA
000007AE E6FA                     M 	dc.b	$e6,$fa
000007B0                            	smpsNoteFill        $00
000007B0 E800                     M 	dc.b	$e8,$00
000007B2                            	smpsCall            Credits_Call1D
000007B2 F8                       M 	dc.b	$f8
000007B3                          M 	z80_ptr	credits_call1d
000007B3 0000                     M 	dc.w	(((credits_call1d)<<8)&$ff00)|(((credits_call1d)>>8)&$ff)|$80
000007B5 80                         	dc.b	nRst
000007B6                            	smpsCall            Credits_Call1E
000007B6 F8                       M 	dc.b	$f8
000007B7                          M 	z80_ptr	credits_call1e
000007B7 0000                     M 	dc.w	(((credits_call1e)<<8)&$ff00)|(((credits_call1e)>>8)&$ff)|$80
000007B9                            	smpsCall            Credits_Call1D
000007B9 F8                       M 	dc.b	$f8
000007BA                          M 	z80_ptr	credits_call1d
000007BA 0000                     M 	dc.w	(((credits_call1d)<<8)&$ff00)|(((credits_call1d)>>8)&$ff)|$80
000007BC                            	smpsSetvoice        $1C
000007BC EF1C                     M 	dc.b	$ef,$1c
000007BE BD                         	dc.b	nC5
000007BF                            	smpsSetvoice        $1D
000007BF EF1D                     M 	dc.b	$ef,$1d
000007C1                            	smpsCall            Credits_Call1E
000007C1 F8                       M 	dc.b	$f8
000007C2                          M 	z80_ptr	credits_call1e
000007C2 0000                     M 	dc.w	(((credits_call1e)<<8)&$ff00)|(((credits_call1e)>>8)&$ff)|$80
000007C4 8030 80                    	dc.b	nRst, $30, nRst
000007C7                            	smpsSetvoice        $01
000007C7 EF01                     M 	dc.b	$ef,$01
000007C9                            	smpsAlterPitch      $18
000007C9 E918                     M 	dc.b	$e9,$18
000007CB                            	smpsAlterVol        $F9
000007CB E6F9                     M 	dc.b	$e6,$f9
000007CD                            
000007CD                            Credits_Loop22:
000007CD 990C A506 8096 0CA2 0680+  	dc.b	nC2, $0C, nC3, $06, nRst, nA1, $0C, nA2, $06, nRst, nBb1, $0C
000007D9 A306 8098 0CA8 06A7 9906+  	dc.b	nBb2, $06, nRst, nB1, $0C, nEb3, $06, nD3, nC2, $06, nC2, $12
000007E5 960C A206 8097 0CA3 0680+  	dc.b	nA1, $0C, nA2, $06, nRst, nBb1, $0C, nBb2, $06, nRst, nB1, $0C
000007F1 A406 80                    	dc.b	nB2, $06, nRst
000007F4                            	smpsLoop            $00, $02, Credits_Loop22
000007F4 F700 02                  M 	dc.b	$f7,$00,$02
000007F7                          M 	z80_ptr	credits_loop22
000007F7 0000                     M 	dc.w	(((credits_loop22)<<8)&$ff00)|(((credits_loop22)>>8)&$ff)|$80
000007F9 8060                       	dc.b	nRst, $60
000007FB                            	smpsSetvoice        $22
000007FB EF22                     M 	dc.b	$ef,$22
000007FD                            	smpsAlterPitch      $E8
000007FD E9E8                     M 	dc.b	$e9,$e8
000007FF                            	smpsAlterVol        $03
000007FF E603                     M 	dc.b	$e6,$03
00000801                            	smpsModSet          $1C, $01, $06, $04
00000801 F01C 0106 04             M 	dc.b	$f0,$1c,$01,$06,$04
00000806 8050 AC04 AE08 B104 B530+  	dc.b	nRst, $50, nG3, $04, nA3, $08, nC4, $04, nE4, $30, nRst, $0C
00000812 B508 8004 B608 B510 B908+  	dc.b	nE4, $08, nRst, $04, nF4, $08, nE4, $10, nAb4, $08, $04, nRst
0000081E 08B5 3480 0CB5 BA08 0480+  	dc.b	$08, nE4, $34, nRst, $0C, nE4, nA4, $08, $04, nRst, $08, nE4
0000082A 04B1 2480 0CB1 0880 04B3+  	dc.b	$04, nC4, $24, nRst, $0C, nC4, $08, nRst, $04, nD4, $08, nC4
00000836 04B4 0CB3 08B1 4C80 0CB5+  	dc.b	$04, nEb4, $0C, nD4, $08, nC4, $4C, nRst, $0C, nE4, $08, nRst
00000842 04B6 0880 04B5 0880 04B9+  	dc.b	$04, nF4, $08, nRst, $04, nE4, $08, nRst, $04, nAb4, $08, $04
0000084E 8008 B51C 800C BA18 BC08+  	dc.b	nRst, $08, nE4, $1C, nRst, $0C, nA4, $18, nB4, $08, nA4, $04
0000085A BD18 800C BA04 8008 B818+  	dc.b	nC5, $18, nRst, $0C, nA4, $04, nRst, $08, nG4, $18, nE4, nC4
00000866 B30C                       	dc.b	nD4, $0C
00000868                            	smpsAlterVol        $04
00000868 E604                     M 	dc.b	$e6,$04
0000086A                            	smpsCall            Credits_Call1F
0000086A F8                       M 	dc.b	$f8
0000086B                          M 	z80_ptr	credits_call1f
0000086B 0000                     M 	dc.w	(((credits_call1f)<<8)&$ff00)|(((credits_call1f)>>8)&$ff)|$80
0000086D B30C                       	dc.b	nD4, $0C
0000086F                            	smpsAlterVol        $FC
0000086F E6FC                     M 	dc.b	$e6,$fc
00000871                            	smpsCall            Credits_Call1F
00000871 F8                       M 	dc.b	$f8
00000872                          M 	z80_ptr	credits_call1f
00000872 0000                     M 	dc.w	(((credits_call1f)<<8)&$ff00)|(((credits_call1f)>>8)&$ff)|$80
00000874 B314 B104                  	dc.b	nD4, $14, nC4, $04
00000878                            	smpsAlterVol        $FF
00000878 E6FF                     M 	dc.b	$e6,$ff
0000087A                            	smpsSetvoice        $24
0000087A EF24                     M 	dc.b	$ef,$24
0000087C                            	smpsModOff
0000087C F4                       M 	dc.b	$f4
0000087D 8060                       	dc.b	nRst, $60
0000087F                            
0000087F                            Credits_Loop23:
0000087F                            	smpsCall            Credits_Call20
0000087F F8                       M 	dc.b	$f8
00000880                          M 	z80_ptr	credits_call20
00000880 0000                     M 	dc.w	(((credits_call20)<<8)&$ff00)|(((credits_call20)>>8)&$ff)|$80
00000882 AC12 AB0C AC06 AB0C        	dc.b	nG3, $12, nFs3, $0C, nG3, $06, nFs3, $0C
0000088A                            	smpsCall            Credits_Call20
0000088A F8                       M 	dc.b	$f8
0000088B                          M 	z80_ptr	credits_call20
0000088B 0000                     M 	dc.w	(((credits_call20)<<8)&$ff00)|(((credits_call20)>>8)&$ff)|$80
0000088D B312 B20C B306 B20C        	dc.b	nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
00000895                            	smpsLoop            $00, $02, Credits_Loop23
00000895 F700 02                  M 	dc.b	$f7,$00,$02
00000898                          M 	z80_ptr	credits_loop23
00000898 0000                     M 	dc.w	(((credits_loop23)<<8)&$ff00)|(((credits_loop23)>>8)&$ff)|$80
0000089A AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, nG3, nE3
000008A6 80AA 80AC 80A9 80A9 80AD+  	dc.b	nRst, nF3, nRst, nG3, nRst, nE3, nRst, nE3, nRst, nAb3, nRst, nAb3
000008B2 80B0 80B0 80B3 80B3 8080+  	dc.b	nRst, nB3, nRst, nB3, nRst, nD4, nRst, nD4, nRst, nRst, $0C, nA2
000008BE 1280 06A2 12AD AE06 80     	dc.b	$12, nRst, $06, nA2, $12, nAb3, nA3, $06, nRst
000008C7                            	smpsAlterVol        $FD
000008C7 E6FD                     M 	dc.b	$e6,$fd
000008C9 A26C                       	dc.b	nA2, $6C
000008CB                            	smpsStop
000008CB F2                       M 	dc.b	$f2
000008CC                            
000008CC                            Credits_Call14:
000008CC 800C C406 80C6 80C4 80C9+  	dc.b	nRst, $0C, nG5, $06, nRst, nA5, nRst, nG5, nRst, nC6, nRst, nC6
000008D8 80CB CD80 0C80 CB18 C606+  	dc.b	nRst, nD6, nE6, nRst, $0C, nRst, nD6, $18, nA5, $06, nRst, nC6
000008E4 C980 CB0C 8012 801E C706+  	dc.b	nC6, nRst, nD6, $0C, nRst, $12, nRst, $1E, nBb5, $06, nC6, nBb5
000008F0 CB80 C980 C7C9 80C6 E7C6+  	dc.b	nD6, nRst, nC6, nRst, nBb5, nC6, nRst, nA5, smpsNoAttack, nA5, $30, smpsNoAttack
000008FC 1880 18                    	dc.b	$18, nRst, $18
000008FF                            	smpsReturn
000008FF E3                       M 	dc.b	$e3
00000900                            
00000900                            Credits_Call1B:
00000900 9F04 8008 9F0C             	dc.b	nFs2, $04, nRst, $08, nFs2, $0C
00000906                            	smpsLoop            $00, $03, Credits_Call1B
00000906 F700 03                  M 	dc.b	$f7,$00,$03
00000909                          M 	z80_ptr	credits_call1b
00000909 0000                     M 	dc.w	(((credits_call1b)<<8)&$ff00)|(((credits_call1b)>>8)&$ff)|$80
0000090B 06AB 9F0C                  	dc.b	$06, nFs3, nFs2, $0C
0000090F                            	smpsReturn
0000090F E3                       M 	dc.b	$e3
00000910                            
00000910                            Credits_Call06:
00000910 B808 BABC B630 E730 E7B6+  	dc.b	nG4, $08, nA4, nB4, nF4, $30, smpsNoAttack, $30, smpsNoAttack, nF4, nRst, $18
0000091C B808 BABC B630 E730 E730+  	dc.b	nG4, $08, nA4, nB4, nF4, $30, smpsNoAttack, $30, smpsNoAttack, $30, smpsNoAttack
00000927                            	smpsReturn
00000927 E3                       M 	dc.b	$e3
00000928                            
00000928                            Credits_Call16:
00000928 BF06 BDBF 12C2 BF0C C180+  	dc.b	nD5, $06, nC5, nD5, $12, nF5, nD5, $0C, nE5, nRst, $06
00000933 12C4 0CC2 0680 C9C6 3C80+  	dc.b	$12, nG5, $0C, nF5, $06, nRst, nC6, nA5, $3C, nRst, $06
0000093E 0CC7 12C6 C406 C2C1 18     	dc.b	$0C, nBb5, $12, nA5, nG5, $06, nF5, nE5, $18
00000947                            	smpsReturn
00000947 E3                       M 	dc.b	$e3
00000948                            
00000948                            Credits_Call10:
00000948 CE15 CD03 CB06 80C9 0CCD+  	dc.b	nF6, $15, nE6, $03, nD6, $06, nRst, nC6, $0C, nE6, $06, nRst
00000954 C90C CB06 8012 8060        	dc.b	nC6, $0C, nD6, $06, nRst, $12, nRst, $60
0000095C                            	smpsReturn
0000095C E3                       M 	dc.b	$e3
0000095D                            
0000095D                            Credits_Call1C:
0000095D A20C AEAC 08AE 04AC 08A9+  	dc.b	nA2, $0C, nA3, nG3, $08, nA3, $04, nG3, $08, nE3, $04, nD3
00000969 0804                       	dc.b	$08, $04
0000096B                            	smpsReturn
0000096B E3                       M 	dc.b	$e3
0000096C                            
0000096C                            Credits_Call1D:
0000096C 800C B1AE 0606 AC0C 80B0+  	dc.b	nRst, $0C, nC4, nA3, $06, $06, nG3, $0C, nRst, nB3, nA3, $06
00000978 06AC 0C                    	dc.b	$06, nG3, $0C
0000097B                            	smpsReturn
0000097B E3                       M 	dc.b	$e3
0000097C                            
0000097C                            Credits_Call1E:
0000097C AEAC 0606 AA0C 80AC 0C06+  	dc.b	nA3, nG3, $06, $06, nF3, $0C, nRst, nG3, $0C, $06, $06, nA3
00000988 AC                         	dc.b	nG3
00000989                            	smpsReturn
00000989 E3                       M 	dc.b	$e3
0000098A                            
0000098A                            Credits_Call1F:
0000098A BA04 8008 B818 B5B1        	dc.b	nA4, $04, nRst, $08, nG4, $18, nE4, nC4
00000992                            	smpsReturn
00000992 E3                       M 	dc.b	$e3
00000993                            
00000993                            Credits_Call20:
00000993 AE06 80AE 80A9 80A9 80     	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst
0000099C                            	smpsReturn
0000099C E3                       M 	dc.b	$e3
0000099D                            
0000099D                            Credits_Call1A:
0000099D 8A0C                       	dc.b	nA0, $0C
0000099F                            	smpsLoop            $00, $08, Credits_Call1A
0000099F F700 08                  M 	dc.b	$f7,$00,$08
000009A2                          M 	z80_ptr	credits_call1a
000009A2 0000                     M 	dc.w	(((credits_call1a)<<8)&$ff00)|(((credits_call1a)>>8)&$ff)|$80
000009A4                            	smpsReturn
000009A4 E3                       M 	dc.b	$e3
000009A5                            
000009A5                            ; FM3 Data
000009A5                            Credits_FM3:
000009A5 8060                       	dc.b	nRst, $60
000009A7                            	smpsCall            Credits_Call0C
000009A7 F8                       M 	dc.b	$f8
000009A8                          M 	z80_ptr	credits_call0c
000009A8 0000                     M 	dc.w	(((credits_call0c)<<8)&$ff00)|(((credits_call0c)>>8)&$ff)|$80
000009AA                            	smpsAlterPitch      $18
000009AA E918                     M 	dc.b	$e9,$18
000009AC                            	smpsSetvoice        $02
000009AC EF02                     M 	dc.b	$ef,$02
000009AE                            	smpsCall            Credits_Call13
000009AE F8                       M 	dc.b	$f8
000009AF                          M 	z80_ptr	credits_call13
000009AF 0000                     M 	dc.w	(((credits_call13)<<8)&$ff00)|(((credits_call13)>>8)&$ff)|$80
000009B1 B83C                       	dc.b	nG4, $3C
000009B3                            	smpsCall            Credits_Call13
000009B3 F8                       M 	dc.b	$f8
000009B4                          M 	z80_ptr	credits_call13
000009B4 0000                     M 	dc.w	(((credits_call13)<<8)&$ff00)|(((credits_call13)>>8)&$ff)|$80
000009B6 BD3C                       	dc.b	nC5, $3C
000009B8                            	smpsAlterPitch      $E8
000009B8 E9E8                     M 	dc.b	$e9,$e8
000009BA                            	smpsAlterVol        $02
000009BA E602                     M 	dc.b	$e6,$02
000009BC                            	smpsAlterNote       $03
000009BC E103                     M 	dc.b	$e1,$03
000009BE                            	smpsSetvoice        $04
000009BE EF04                     M 	dc.b	$ef,$04
000009C0                            	smpsPan             panLeft, $00
000009C0 E080                     M 	dc.b	$e0,panleft|$00
000009C2                            
000009C2                            Credits_Loop12:
000009C2                            	smpsCall            Credits_Call14
000009C2 F8                       M 	dc.b	$f8
000009C3                          M 	z80_ptr	credits_call14
000009C3 0000                     M 	dc.w	(((credits_call14)<<8)&$ff00)|(((credits_call14)>>8)&$ff)|$80
000009C5                            	smpsLoop            $00, $02, Credits_Loop12
000009C5 F700 02                  M 	dc.b	$f7,$00,$02
000009C8                          M 	z80_ptr	credits_loop12
000009C8 0000                     M 	dc.w	(((credits_loop12)<<8)&$ff00)|(((credits_loop12)>>8)&$ff)|$80
000009CA                            	smpsSetvoice        $09
000009CA EF09                     M 	dc.b	$ef,$09
000009CC                            	smpsAlterPitch      $0C
000009CC E90C                     M 	dc.b	$e9,$0c
000009CE                            	smpsAlterVol        $FD
000009CE E6FD                     M 	dc.b	$e6,$fd
000009D0                            	smpsPan             panRight, $00
000009D0 E040                     M 	dc.b	$e0,panright|$00
000009D2                            	smpsModSet          $06, $01, $05, $04
000009D2 F006 0105 04             M 	dc.b	$f0,$06,$01,$05,$04
000009D7                            	smpsAlterNote       $00
000009D7 E100                     M 	dc.b	$e1,$00
000009D9                            
000009D9                            Credits_Loop13:
000009D9 9F0C AB06 80A9 80AB 9F80+  	dc.b	nFs2, $0C, nFs3, $06, nRst, nE3, nRst, nFs3, nFs2, nRst, nFs2, nFs3
000009E5 80A9 80AB 0C               	dc.b	nRst, nE3, nRst, nFs3, $0C
000009EA                            	smpsLoop            $00, $03, Credits_Loop13
000009EA F700 03                  M 	dc.b	$f7,$00,$03
000009ED                          M 	z80_ptr	credits_loop13
000009ED 0000                     M 	dc.w	(((credits_loop13)<<8)&$ff00)|(((credits_loop13)>>8)&$ff)|$80
000009EF 9D0C A906 80A8 80A9 9C80+  	dc.b	nE2, $0C, nE3, $06, nRst, nEb3, nRst, nE3, nEb2, nRst, nEb2, nEb3
000009FB 80A6 80A8 0C               	dc.b	nRst, nCs3, nRst, nEb3, $0C
00000A00                            	smpsLoop            $01, $02, Credits_Loop13
00000A00 F701 02                  M 	dc.b	$f7,$01,$02
00000A03                          M 	z80_ptr	credits_loop13
00000A03 0000                     M 	dc.w	(((credits_loop13)<<8)&$ff00)|(((credits_loop13)>>8)&$ff)|$80
00000A05 8060                       	dc.b	nRst, $60
00000A07                            	smpsSetvoice        $0D
00000A07 EF0D                     M 	dc.b	$ef,$0d
00000A09                            	smpsAlterVol        $FB
00000A09 E6FB                     M 	dc.b	$e6,$fb
00000A0B                            	smpsPan             panCenter, $00
00000A0B E0C0                     M 	dc.b	$e0,pancenter|$00
00000A0D                            	smpsModOff
00000A0D F4                       M 	dc.b	$f4
00000A0E 8060                       	dc.b	nRst, $60
00000A10                            
00000A10                            Credits_Loop14:
00000A10                            	smpsCall            Credits_Call15
00000A10 F8                       M 	dc.b	$f8
00000A11                          M 	z80_ptr	credits_call15
00000A11 0000                     M 	dc.w	(((credits_call15)<<8)&$ff00)|(((credits_call15)>>8)&$ff)|$80
00000A13                            	smpsLoop            $00, $02, Credits_Loop14
00000A13 F700 02                  M 	dc.b	$f7,$00,$02
00000A16                          M 	z80_ptr	credits_loop14
00000A16 0000                     M 	dc.w	(((credits_loop14)<<8)&$ff00)|(((credits_loop14)>>8)&$ff)|$80
00000A18 8060                       	dc.b	nRst, $60
00000A1A                            	smpsSetvoice        $0F
00000A1A EF0F                     M 	dc.b	$ef,$0f
00000A1C                            	smpsPan             panLeft, $00
00000A1C E080                     M 	dc.b	$e0,panleft|$00
00000A1E                            	smpsAlterVol        $0B
00000A1E E60B                     M 	dc.b	$e6,$0b
00000A20                            	smpsCall            Credits_Call16
00000A20 F8                       M 	dc.b	$f8
00000A21                          M 	z80_ptr	credits_call16
00000A21 0000                     M 	dc.w	(((credits_call16)<<8)&$ff00)|(((credits_call16)>>8)&$ff)|$80
00000A23 C418 C348 800C             	dc.b	nG5, $18, nFs5, $48, nRst, $0C
00000A29                            	smpsCall            Credits_Call16
00000A29 F8                       M 	dc.b	$f8
00000A2A                          M 	z80_ptr	credits_call16
00000A2A 0000                     M 	dc.w	(((credits_call16)<<8)&$ff00)|(((credits_call16)>>8)&$ff)|$80
00000A2C BE0C                       	dc.b	nCs5, $0C
00000A2E                            	smpsModSet          $18, $01, $03, $04
00000A2E F018 0103 04             M 	dc.b	$f0,$18,$01,$03,$04
00000A33                            	smpsAlterVol        $F3
00000A33 E6F3                     M 	dc.b	$e6,$f3
00000A35                            	smpsPan             panCenter, $00
00000A35 E0C0                     M 	dc.b	$e0,pancenter|$00
00000A37                            	smpsSetvoice        $14
00000A37 EF14                     M 	dc.b	$ef,$14
00000A39 A214 A404 A504 8008 A904+  	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
00000A45 A804 8008 A904 8008 AC08+  	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
00000A51                            
00000A51                            Credits_Loop15:
00000A51 8030                       	dc.b	nRst, $30
00000A53                            	smpsLoop            $00, $0A, Credits_Loop15
00000A53 F700 0A                  M 	dc.b	$f7,$00,$0a
00000A56                          M 	z80_ptr	credits_loop15
00000A56 0000                     M 	dc.w	(((credits_loop15)<<8)&$ff00)|(((credits_loop15)>>8)&$ff)|$80
00000A58                            	smpsSetvoice        $18
00000A58 EF18                     M 	dc.b	$ef,$18
00000A5A                            	smpsAlterPitch      $F4
00000A5A E9F4                     M 	dc.b	$e9,$f4
00000A5C                            	smpsAlterVol        $08
00000A5C E608                     M 	dc.b	$e6,$08
00000A5E                            	smpsModOff
00000A5E F4                       M 	dc.b	$f4
00000A5F                            	smpsPan             panRight, $00
00000A5F E040                     M 	dc.b	$e0,panright|$00
00000A61 8060 8030 C606 80C2 0CC4+  	dc.b	nRst, $60, nRst, $30, nA5, $06, nRst, nF5, $0C, nG5, $09, nF5
00000A6D 03BF 0C80 6080 3C80 60     	dc.b	$03, nD5, $0C, nRst, $60, nRst, $3C, nRst, $60
00000A76                            	smpsSetvoice        $1B
00000A76 EF1B                     M 	dc.b	$ef,$1b
00000A78                            	smpsAlterVol        $FB
00000A78 E6FB                     M 	dc.b	$e6,$fb
00000A7A                            	smpsPan             panCenter, $00
00000A7A E0C0                     M 	dc.b	$e0,pancenter|$00
00000A7C                            	smpsNoteFill        $06
00000A7C E806                     M 	dc.b	$e8,$06
00000A7E C406 06C6 C9C9 C6          	dc.b	nG5, $06, $06, nA5, nC6, nC6, nA5
00000A85                            	smpsNoteFill        $00
00000A85 E800                     M 	dc.b	$e8,$00
00000A87 CD0C                       	dc.b	nE6, $0C
00000A89                            	smpsNoteFill        $06
00000A89 E806                     M 	dc.b	$e8,$06
00000A8B C906 C6C9 0C80 8012        	dc.b	nC6, $06, nA5, nC6, $0C, nRst, nRst, $12
00000A93                            	smpsSetvoice        $1C
00000A93 EF1C                     M 	dc.b	$ef,$1c
00000A95                            	smpsNoteFill        $00
00000A95 E800                     M 	dc.b	$e8,$00
00000A97 BDBA 0C                    	dc.b	nC5, nA4, $0C
00000A9A                            	smpsNoteFill        $06
00000A9A E806                     M 	dc.b	$e8,$06
00000A9C                            	smpsSetvoice        $1B
00000A9C EF1B                     M 	dc.b	$ef,$1b
00000A9E CE06 CE80 CE80 CE          	dc.b	nF6, $06, nF6, nRst, nF6, nRst, nF6
00000AA5                            	smpsNoteFill        $00
00000AA5 E800                     M 	dc.b	$e8,$00
00000AA7 CF0C D080                  	dc.b	nFs6, $0C, nG6, nRst
00000AAB                            	smpsNoteFill        $06
00000AAB E806                     M 	dc.b	$e8,$06
00000AAD D006 06D2 D0               	dc.b	nG6, $06, $06, nA6, nG6
00000AB2                            	smpsNoteFill        $00
00000AB2 E800                     M 	dc.b	$e8,$00
00000AB4 CD0C                       	dc.b	nE6, $0C
00000AB6                            	smpsNoteFill        $06
00000AB6 E806                     M 	dc.b	$e8,$06
00000AB8 C906 C6C9 0C               	dc.b	nC6, $06, nA5, nC6, $0C
00000ABD                            	smpsNoteFill        $00
00000ABD E800                     M 	dc.b	$e8,$00
00000ABF                            	smpsSetvoice        $1C
00000ABF EF1C                     M 	dc.b	$ef,$1c
00000AC1 801E C20C C2BD 0680 6080+  	dc.b	nRst, $1E, nF5, $0C, nF5, nC5, $06, nRst, $60, nRst, $60
00000ACC                            	smpsSetvoice        $00
00000ACC EF00                     M 	dc.b	$ef,$00
00000ACE                            	smpsAlterPitch      $18
00000ACE E918                     M 	dc.b	$e9,$18
00000AD0 8060 800C AC06 AEB1 8012+  	dc.b	nRst, $60, nRst, $0C, nG3, $06, nA3, nC4, nRst, $12, nG3, $06
00000ADC AEB1 80B4 B180 B180 6080+  	dc.b	nA3, nC4, nRst, nEb4, nC4, nRst, nC4, nRst, $60, nRst, $06, nBb3
00000AE8 12AE 0680 12AF 0680 AE80+  	dc.b	$12, nA3, $06, nRst, $12, nBb3, $06, nRst, nA3, nRst, nBb3, nC4
00000AF4 80B1 8060                  	dc.b	nRst, nC4, nRst, $60
00000AF8                            	smpsSetvoice        $22
00000AF8 EF22                     M 	dc.b	$ef,$22
00000AFA                            	smpsAlterPitch      $DC
00000AFA E9DC                     M 	dc.b	$e9,$dc
00000AFC                            	smpsAlterVol        $FF
00000AFC E6FF                     M 	dc.b	$e6,$ff
00000AFE                            	smpsPan             panLeft, $00
00000AFE E080                     M 	dc.b	$e0,panleft|$00
00000B00 8060                       	dc.b	nRst, $60
00000B02                            	smpsCall            Credits_Call17
00000B02 F8                       M 	dc.b	$f8
00000B03                          M 	z80_ptr	credits_call17
00000B03 0000                     M 	dc.w	(((credits_call17)<<8)&$ff00)|(((credits_call17)>>8)&$ff)|$80
00000B05 CD30 CB18 CD0C CBC9 30CE   	dc.b	nE6, $30, nD6, $18, nE6, $0C, nD6, nC6, $30, nF6
00000B0F                            	smpsCall            Credits_Call18
00000B0F F8                       M 	dc.b	$f8
00000B10                          M 	z80_ptr	credits_call18
00000B10 0000                     M 	dc.w	(((credits_call18)<<8)&$ff00)|(((credits_call18)>>8)&$ff)|$80
00000B12                            	smpsAlterVol        $04
00000B12 E604                     M 	dc.b	$e6,$04
00000B14                            	smpsCall            Credits_Call18
00000B14 F8                       M 	dc.b	$f8
00000B15                          M 	z80_ptr	credits_call18
00000B15 0000                     M 	dc.w	(((credits_call18)<<8)&$ff00)|(((credits_call18)>>8)&$ff)|$80
00000B17                            	smpsAlterVol        $FC
00000B17 E6FC                     M 	dc.b	$e6,$fc
00000B19 80C4 80C4 80C6 1808 C404   	dc.b	nRst, nG5, nRst, nG5, nRst, nA5, $18, $08, nG5, $04
00000B23                            	smpsAlterPitch      $0C
00000B23 E90C                     M 	dc.b	$e9,$0c
00000B25                            	smpsAlterVol        $FF
00000B25 E6FF                     M 	dc.b	$e6,$ff
00000B27                            	smpsPan             panCenter, $00
00000B27 E0C0                     M 	dc.b	$e0,pancenter|$00
00000B29                            	smpsSetvoice        $00
00000B29 EF00                     M 	dc.b	$ef,$00
00000B2B 8060                       	dc.b	nRst, $60
00000B2D                            
00000B2D                            Credits_Loop16:
00000B2D                            	smpsCall            Credits_Call19
00000B2D F8                       M 	dc.b	$f8
00000B2E                          M 	z80_ptr	credits_call19
00000B2E 0000                     M 	dc.w	(((credits_call19)<<8)&$ff00)|(((credits_call19)>>8)&$ff)|$80
00000B30 CB12 CB1E                  	dc.b	nD6, $12, nD6, $1E
00000B34                            	smpsCall            Credits_Call19
00000B34 F8                       M 	dc.b	$f8
00000B35                          M 	z80_ptr	credits_call19
00000B35 0000                     M 	dc.w	(((credits_call19)<<8)&$ff00)|(((credits_call19)>>8)&$ff)|$80
00000B37 D012 D01E                  	dc.b	nG6, $12, nG6, $1E
00000B3B                            	smpsLoop            $00, $02, Credits_Loop16
00000B3B F700 02                  M 	dc.b	$f7,$00,$02
00000B3E                          M 	z80_ptr	credits_loop16
00000B3E 0000                     M 	dc.w	(((credits_loop16)<<8)&$ff00)|(((credits_loop16)>>8)&$ff)|$80
00000B40 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
00000B4C 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
00000B58 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
00000B5C                            	smpsAlterVol        $F8
00000B5C E6F8                     M 	dc.b	$e6,$f8
00000B5E                            	smpsSetvoice        $01
00000B5E EF01                     M 	dc.b	$ef,$01
00000B60                            	smpsAlterNote       $03
00000B60 E103                     M 	dc.b	$e1,$03
00000B62 A26C                       	dc.b	nA2, $6C
00000B64                            	smpsStop
00000B64 F2                       M 	dc.b	$f2
00000B65                            
00000B65                            Credits_Call15:
00000B65 8060 BC06 BDBC B8BA B60C+  	dc.b	nRst, $60, nB4, $06, nC5, nB4, nG4, nA4, nF4, $0C, nG4, nD4
00000B71 B306 B60C B8               	dc.b	nD4, $06, nF4, $0C, nG4
00000B76                            	smpsReturn
00000B76 E3                       M 	dc.b	$e3
00000B77                            
00000B77                            Credits_Call17:
00000B77 800C CD04 8010 CD04 800C+  	dc.b	nRst, $0C, nE6, $04, nRst, $10, nE6, $04, nRst, $0C, nE6, $0C
00000B83 CE08 CD04 8018 800C CB04+  	dc.b	nF6, $08, nE6, $04, nRst, $18, nRst, $0C, nD6, $04, nRst, $10
00000B8F CB04 800C CB0C CD08 CB04+  	dc.b	nD6, $04, nRst, $0C, nD6, $0C, nE6, $08, nD6, $04, nRst, $18
00000B9B                            
00000B9B                            Credits_Loop42:
00000B9B 800C C904 8010 C904 800C+  	dc.b	nRst, $0C, nC6, $04, nRst, $10, nC6, $04, nRst, $0C, nC6, $0C
00000BA7 CB08 C904 8018             	dc.b	nD6, $08, nC6, $04, nRst, $18
00000BAD                            	smpsLoop            $00, $02, Credits_Loop42
00000BAD F700 02                  M 	dc.b	$f7,$00,$02
00000BB0                          M 	z80_ptr	credits_loop42
00000BB0 0000                     M 	dc.w	(((credits_loop42)<<8)&$ff00)|(((credits_loop42)>>8)&$ff)|$80
00000BB2                            	smpsReturn
00000BB2 E3                       M 	dc.b	$e3
00000BB3                            
00000BB3                            Credits_Call13:
00000BB3 8018 B80B 800D BA0C 0B80+  	dc.b	nRst, $18, nG4, $0B, nRst, $0D, nA4, $0C, $0B, nRst, $19, nC5
00000BBF 0C0B 800D                  	dc.b	$0C, $0B, nRst, $0D
00000BC3                            	smpsReturn
00000BC3 E3                       M 	dc.b	$e3
00000BC4                            
00000BC4                            Credits_Call18:
00000BC4 800C C480 C480 C680 C6     	dc.b	nRst, $0C, nG5, nRst, nG5, nRst, nA5, nRst, nA5
00000BCD                            	smpsReturn
00000BCD E3                       M 	dc.b	$e3
00000BCE                            
00000BCE                            Credits_Call19:
00000BCE CD06 80CD 80CA 80CA 80     	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst
00000BD7                            	smpsReturn
00000BD7 E3                       M 	dc.b	$e3
00000BD8                            
00000BD8                            Credits_Call0C:
00000BD8                            	smpsSetvoice        $05
00000BD8 EF05                     M 	dc.b	$ef,$05
00000BDA                            	smpsAlterPitch      $F4
00000BDA E9F4                     M 	dc.b	$e9,$f4
00000BDC C660 CBCD E7CD C660 D0D0+  	dc.b	nA5, $60, nD6, nE6, smpsNoAttack, nE6, nA5, $60, nG6, nG6, $24, nA6
00000BE8 60E7 3C                    	dc.b	$60, smpsNoAttack, $3C
00000BEB                            	smpsReturn
00000BEB E3                       M 	dc.b	$e3
00000BEC                            
00000BEC                            ; FM4 Data
00000BEC                            Credits_FM4:
00000BEC 8060                       	dc.b	nRst, $60
00000BEE                            	smpsAlterPitch      $FB
00000BEE E9FB                     M 	dc.b	$e9,$fb
00000BF0                            	smpsAlterVol        $FE
00000BF0 E6FE                     M 	dc.b	$e6,$fe
00000BF2                            	smpsCall            Credits_Call0C
00000BF2 F8                       M 	dc.b	$f8
00000BF3                          M 	z80_ptr	credits_call0c
00000BF3 0000                     M 	dc.w	(((credits_call0c)<<8)&$ff00)|(((credits_call0c)>>8)&$ff)|$80
00000BF5                            	smpsAlterPitch      $1D
00000BF5 E91D                     M 	dc.b	$e9,$1d
00000BF7                            	smpsAlterVol        $02
00000BF7 E602                     M 	dc.b	$e6,$02
00000BF9                            	smpsSetvoice        $02
00000BF9 EF02                     M 	dc.b	$ef,$02
00000BFB                            	smpsCall            Credits_Call0D
00000BFB F8                       M 	dc.b	$f8
00000BFC                          M 	z80_ptr	credits_call0d
00000BFC 0000                     M 	dc.w	(((credits_call0d)<<8)&$ff00)|(((credits_call0d)>>8)&$ff)|$80
00000BFE B53C                       	dc.b	nE4, $3C
00000C00                            	smpsCall            Credits_Call0D
00000C00 F8                       M 	dc.b	$f8
00000C01                          M 	z80_ptr	credits_call0d
00000C01 0000                     M 	dc.w	(((credits_call0d)<<8)&$ff00)|(((credits_call0d)>>8)&$ff)|$80
00000C03 B83C                       	dc.b	nG4, $3C
00000C05                            	smpsAlterVol        $06
00000C05 E606                     M 	dc.b	$e6,$06
00000C07                            	smpsSetvoice        $05
00000C07 EF05                     M 	dc.b	$ef,$05
00000C09                            	smpsModSet          $02, $01, $FE, $04
00000C09 F002 01FE 04             M 	dc.b	$f0,$02,$01,$fe,$04
00000C0E                            
00000C0E                            Credits_Loop0D:
00000C0E C130 E730 C3E7 30BF E730+  	dc.b	nE5, $30, smpsNoAttack, $30, nFs5, smpsNoAttack, $30, nD5, smpsNoAttack, $30, nC5, smpsNoAttack
00000C1A 30                         	dc.b	$30
00000C1B                            	smpsLoop            $00, $02, Credits_Loop0D
00000C1B F700 02                  M 	dc.b	$f7,$00,$02
00000C1E                          M 	z80_ptr	credits_loop0d
00000C1E 0000                     M 	dc.w	(((credits_loop0d)<<8)&$ff00)|(((credits_loop0d)>>8)&$ff)|$80
00000C20                            	smpsSetvoice        $0A
00000C20 EF0A                     M 	dc.b	$ef,$0a
00000C22                            	smpsAlterPitch      $F4
00000C22 E9F4                     M 	dc.b	$e9,$f4
00000C24                            	smpsAlterVol        $F7
00000C24 E6F7                     M 	dc.b	$e6,$f7
00000C26                            	smpsModSet          $0C, $01, $FB, $04
00000C26 F00C 01FB 04             M 	dc.b	$f0,$0c,$01,$fb,$04
00000C2B                            
00000C2B                            Credits_Loop0E:
00000C2B                            	smpsCall            Credits_Call0E
00000C2B F8                       M 	dc.b	$f8
00000C2C                          M 	z80_ptr	credits_call0e
00000C2C 0000                     M 	dc.w	(((credits_call0e)<<8)&$ff00)|(((credits_call0e)>>8)&$ff)|$80
00000C2E 8025 C306 C380 0CC3 06C3+  	dc.b	nRst, $25, nFs5, $06, nFs5, nRst, $0C, nFs5, $06, nFs5, $05, nRst
00000C3A 0DC3 06C5 30E7 06          	dc.b	$0D, nFs5, $06, nAb5, $30, smpsNoAttack, $06
00000C41                            	smpsCall            Credits_Call0E
00000C41 F8                       M 	dc.b	$f8
00000C42                          M 	z80_ptr	credits_call0e
00000C42 0000                     M 	dc.w	(((credits_call0e)<<8)&$ff00)|(((credits_call0e)>>8)&$ff)|$80
00000C44 8031 8060                  	dc.b	nRst, $31, nRst, $60
00000C48                            	smpsLoop            $00, $02, Credits_Loop0E
00000C48 F700 02                  M 	dc.b	$f7,$00,$02
00000C4B                          M 	z80_ptr	credits_loop0e
00000C4B 0000                     M 	dc.w	(((credits_loop0e)<<8)&$ff00)|(((credits_loop0e)>>8)&$ff)|$80
00000C4D 8060 8048                  	dc.b	nRst, $60, nRst, $48
00000C51                            	smpsSetvoice        $0C
00000C51 EF0C                     M 	dc.b	$ef,$0c
00000C53                            	smpsAlterVol        $05
00000C53 E605                     M 	dc.b	$e6,$05
00000C55                            	smpsModOff
00000C55 F4                       M 	dc.b	$f4
00000C56                            	smpsAlterNote       $02
00000C56 E102                     M 	dc.b	$e1,$02
00000C58                            	smpsPan             panLeft, $00
00000C58 E080                     M 	dc.b	$e0,panleft|$00
00000C5A                            	smpsCall            Credits_Call06
00000C5A F8                       M 	dc.b	$f8
00000C5B                          M 	z80_ptr	credits_call06
00000C5B 0000                     M 	dc.w	(((credits_call06)<<8)&$ff00)|(((credits_call06)>>8)&$ff)|$80
00000C5D 2480 0C80 60               	dc.b	$24, nRst, $0C, nRst, $60
00000C62                            	smpsSetvoice        $10
00000C62 EF10                     M 	dc.b	$ef,$10
00000C64                            	smpsAlterVol        $F7
00000C64 E6F7                     M 	dc.b	$e6,$f7
00000C66                            	smpsAlterNote       $00
00000C66 E100                     M 	dc.b	$e1,$00
00000C68                            	smpsPan             panRight, $00
00000C68 E040                     M 	dc.b	$e0,panright|$00
00000C6A                            	smpsCall            Credits_Call0F
00000C6A F8                       M 	dc.b	$f8
00000C6B                          M 	z80_ptr	credits_call0f
00000C6B 0000                     M 	dc.w	(((credits_call0f)<<8)&$ff00)|(((credits_call0f)>>8)&$ff)|$80
00000C6D B3B7 06AE 0CB1 B3B7 0680+  	dc.b	nD4, nFs4, $06, nA3, $0C, nC4, nD4, nFs4, $06, nRst, nFs4, nA3
00000C79 0CB1                       	dc.b	$0C, nC4
00000C7B                            	smpsCall            Credits_Call0F
00000C7B F8                       M 	dc.b	$f8
00000C7C                          M 	z80_ptr	credits_call0f
00000C7C 0000                     M 	dc.w	(((credits_call0f)<<8)&$ff00)|(((credits_call0f)>>8)&$ff)|$80
00000C7E                            	smpsSetvoice        $15
00000C7E EF15                     M 	dc.b	$ef,$15
00000C80                            	smpsAlterVol        $01
00000C80 E601                     M 	dc.b	$e6,$01
00000C82                            	smpsCall            Credits_Call07
00000C82 F8                       M 	dc.b	$f8
00000C83                          M 	z80_ptr	credits_call07
00000C83 0000                     M 	dc.w	(((credits_call07)<<8)&$ff00)|(((credits_call07)>>8)&$ff)|$80
00000C85                            
00000C85                            Credits_Loop0F:
00000C85                            	smpsSetvoice        $14
00000C85 EF14                     M 	dc.b	$ef,$14
00000C87 804E                       	dc.b	nRst, $4E
00000C89                            	smpsPan             panRight, $00
00000C89 E040                     M 	dc.b	$e0,panright|$00
00000C8B A112 A206                  	dc.b	nAb2, $12, nA2, $06
00000C8F                            	smpsPan             panCenter, $00
00000C8F E0C0                     M 	dc.b	$e0,pancenter|$00
00000C91                            	smpsSetvoice        $16
00000C91 EF16                     M 	dc.b	$ef,$16
00000C93 8030 8006 BA08 B904 B808+  	dc.b	nRst, $30, nRst, $06, nA4, $08, nAb4, $04, nG4, $08, nFs4, $04
00000C9F B608 B504                  	dc.b	nF4, $08, nE4, $04
00000CA3                            	smpsLoop            $00, $02, Credits_Loop0F
00000CA3 F700 02                  M 	dc.b	$f7,$00,$02
00000CA6                          M 	z80_ptr	credits_loop0f
00000CA6 0000                     M 	dc.w	(((credits_loop0f)<<8)&$ff00)|(((credits_loop0f)>>8)&$ff)|$80
00000CA8 8060                       	dc.b	nRst, $60
00000CAA                            	smpsSetvoice        $17
00000CAA EF17                     M 	dc.b	$ef,$17
00000CAC                            	smpsAlterPitch      $F4
00000CAC E9F4                     M 	dc.b	$e9,$f4
00000CAE                            	smpsAlterVol        $02
00000CAE E602                     M 	dc.b	$e6,$02
00000CB0                            	smpsPan             panCenter, $00
00000CB0 E0C0                     M 	dc.b	$e0,pancenter|$00
00000CB2                            	smpsModSet          $01, $01, $03, $03
00000CB2 F001 0103 03             M 	dc.b	$f0,$01,$01,$03,$03
00000CB7                            
00000CB7                            Credits_Loop10:
00000CB7                            	smpsCall            Credits_Call10
00000CB7 F8                       M 	dc.b	$f8
00000CB8                          M 	z80_ptr	credits_call10
00000CB8 0000                     M 	dc.w	(((credits_call10)<<8)&$ff00)|(((credits_call10)>>8)&$ff)|$80
00000CBA                            	smpsLoop            $00, $02, Credits_Loop10
00000CBA F700 02                  M 	dc.b	$f7,$00,$02
00000CBD                          M 	z80_ptr	credits_loop10
00000CBD 0000                     M 	dc.w	(((credits_loop10)<<8)&$ff00)|(((credits_loop10)>>8)&$ff)|$80
00000CBF 8060                       	dc.b	nRst, $60
00000CC1                            	smpsSetvoice        $1E
00000CC1 EF1E                     M 	dc.b	$ef,$1e
00000CC3                            	smpsPan             panRight, $00
00000CC3 E040                     M 	dc.b	$e0,panright|$00
00000CC5                            	smpsAlterVol        $FE
00000CC5 E6FE                     M 	dc.b	$e6,$fe
00000CC7                            	smpsAlterPitch      $F4
00000CC7 E9F4                     M 	dc.b	$e9,$f4
00000CC9                            	smpsModOff
00000CC9 F4                       M 	dc.b	$f4
00000CCA                            	smpsNoteFill        $06
00000CCA E806                     M 	dc.b	$e8,$06
00000CCC 800C C106 1218 C406 120C   	dc.b	nRst, $0C, nE5, $06, $12, $18, nG5, $06, $12, $0C
00000CD6                            	smpsSetvoice        $1C
00000CD6 EF1C                     M 	dc.b	$ef,$1c
00000CD8                            	smpsPan             panCenter, $00
00000CD8 E0C0                     M 	dc.b	$e0,pancenter|$00
00000CDA                            	smpsAlterVol        $FA
00000CDA E6FA                     M 	dc.b	$e6,$fa
00000CDC                            	smpsNoteFill        $00
00000CDC E800                     M 	dc.b	$e8,$00
00000CDE C6                         	dc.b	nA5
00000CDF                            	smpsNoteFill        $06
00000CDF E806                     M 	dc.b	$e8,$06
00000CE1                            	smpsAlterVol        $06
00000CE1 E606                     M 	dc.b	$e6,$06
00000CE3                            	smpsSetvoice        $1E
00000CE3 EF1E                     M 	dc.b	$ef,$1e
00000CE5                            	smpsPan             panRight, $00
00000CE5 E040                     M 	dc.b	$e0,panright|$00
00000CE7 C206 1218 C406 1218 C106+  	dc.b	nF5, $06, $12, $18, nG5, $06, $12, $18, nE5, $06, $12, $18
00000CF3 C406 120C                  	dc.b	nG5, $06, $12, $0C
00000CF7                            	smpsSetvoice        $1A
00000CF7 EF1A                     M 	dc.b	$ef,$1a
00000CF9                            	smpsPan             panCenter, $00
00000CF9 E0C0                     M 	dc.b	$e0,pancenter|$00
00000CFB                            	smpsAlterPitch      $0C
00000CFB E90C                     M 	dc.b	$e9,$0c
00000CFD C606 C680 C680 C6          	dc.b	nA5, $06, nA5, nRst, nA5, nRst, nA5
00000D04                            	smpsNoteFill        $00
00000D04 E800                     M 	dc.b	$e8,$00
00000D06 C70C C806                  	dc.b	nBb5, $0C, nB5, $06
00000D0A                            	smpsSetvoice        $1E
00000D0A EF1E                     M 	dc.b	$ef,$1e
00000D0C                            	smpsPan             panRight, $00
00000D0C E040                     M 	dc.b	$e0,panright|$00
00000D0E                            	smpsAlterPitch      $F4
00000D0E E9F4                     M 	dc.b	$e9,$f4
00000D10                            	smpsNoteFill        $06
00000D10 E806                     M 	dc.b	$e8,$06
00000D12 80C4 0612 0C80 60          	dc.b	nRst, nG5, $06, $12, $0C, nRst, $60
00000D19                            	smpsSetvoice        $20
00000D19 EF20                     M 	dc.b	$ef,$20
00000D1B                            	smpsAlterPitch      $18
00000D1B E918                     M 	dc.b	$e9,$18
00000D1D                            	smpsAlterVol        $FA
00000D1D E6FA                     M 	dc.b	$e6,$fa
00000D1F                            	smpsPan             panCenter, $00
00000D1F E0C0                     M 	dc.b	$e0,pancenter|$00
00000D21                            	smpsNoteFill        $00
00000D21 E800                     M 	dc.b	$e8,$00
00000D23 B403 E7B6 5DB3 03E7 B55D+  	dc.b	nEb4, $03, smpsNoAttack, nF4, $5D, nD4, $03, smpsNoAttack, nE4, $5D, nC4, $03
00000D2F E7B3 5DB3 03E7 B55D 8060   	dc.b	smpsNoAttack, nD4, $5D, nD4, $03, smpsNoAttack, nE4, $5D, nRst, $60
00000D39                            	smpsSetvoice        $22
00000D39 EF22                     M 	dc.b	$ef,$22
00000D3B                            	smpsPan             panRight, $00
00000D3B E040                     M 	dc.b	$e0,panright|$00
00000D3D                            	smpsAlterPitch      $E8
00000D3D E9E8                     M 	dc.b	$e9,$e8
00000D3F                            	smpsAlterVol        $04
00000D3F E604                     M 	dc.b	$e6,$04
00000D41 8030 80                    	dc.b	nRst, $30, nRst
00000D44                            	smpsCall            Credits_Call11
00000D44 F8                       M 	dc.b	$f8
00000D45                          M 	z80_ptr	credits_call11
00000D45 0000                     M 	dc.w	(((credits_call11)<<8)&$ff00)|(((credits_call11)>>8)&$ff)|$80
00000D47 C930 C818 C90C C8C6 30C9+  	dc.b	nC6, $30, nB5, $18, nC6, $0C, nB5, nA5, $30, nC6, nRst, $0C
00000D53 C180 C180 C280 C2          	dc.b	nE5, nRst, nE5, nRst, nF5, nRst, nF5
00000D5A                            	smpsAlterVol        $04
00000D5A E604                     M 	dc.b	$e6,$04
00000D5C 80C1 80C1 80C2 80C2        	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, nRst, nF5
00000D64                            	smpsAlterVol        $FC
00000D64 E6FC                     M 	dc.b	$e6,$fc
00000D66 80C1 80C1 80C2 1808 C104   	dc.b	nRst, nE5, nRst, nE5, nRst, nF5, $18, $08, nE5, $04
00000D70                            	smpsAlterPitch      $0C
00000D70 E90C                     M 	dc.b	$e9,$0c
00000D72                            	smpsAlterVol        $FF
00000D72 E6FF                     M 	dc.b	$e6,$ff
00000D74                            	smpsPan             panCenter, $00
00000D74 E0C0                     M 	dc.b	$e0,pancenter|$00
00000D76                            	smpsSetvoice        $00
00000D76 EF00                     M 	dc.b	$ef,$00
00000D78 8060                       	dc.b	nRst, $60
00000D7A                            
00000D7A                            Credits_Loop11:
00000D7A                            	smpsCall            Credits_Call12
00000D7A F8                       M 	dc.b	$f8
00000D7B                          M 	z80_ptr	credits_call12
00000D7B 0000                     M 	dc.w	(((credits_call12)<<8)&$ff00)|(((credits_call12)>>8)&$ff)|$80
00000D7D C812 C81E                  	dc.b	nB5, $12, nB5, $1E
00000D81                            	smpsCall            Credits_Call12
00000D81 F8                       M 	dc.b	$f8
00000D82                          M 	z80_ptr	credits_call12
00000D82 0000                     M 	dc.w	(((credits_call12)<<8)&$ff00)|(((credits_call12)>>8)&$ff)|$80
00000D84 CB12 CB1E                  	dc.b	nD6, $12, nD6, $1E
00000D88                            	smpsLoop            $00, $02, Credits_Loop11
00000D88 F700 02                  M 	dc.b	$f7,$00,$02
00000D8B                          M 	z80_ptr	credits_loop11
00000D8B 0000                     M 	dc.w	(((credits_loop11)<<8)&$ff00)|(((credits_loop11)>>8)&$ff)|$80
00000D8D                            	smpsAlterNote       $03
00000D8D E103                     M 	dc.b	$e1,$03
00000D8F                            	smpsAlterVol        $08
00000D8F E608                     M 	dc.b	$e6,$08
00000D91                            	smpsCall            Credits_Call0B
00000D91 F8                       M 	dc.b	$f8
00000D92                          M 	z80_ptr	credits_call0b
00000D92 0000                     M 	dc.w	(((credits_call0b)<<8)&$ff00)|(((credits_call0b)>>8)&$ff)|$80
00000D94                            	smpsAlterVol        $F0
00000D94 E6F0                     M 	dc.b	$e6,$f0
00000D96                            	smpsSetvoice        $01
00000D96 EF01                     M 	dc.b	$ef,$01
00000D98                            	smpsModSet          $00, $01, $06, $04
00000D98 F000 0106 04             M 	dc.b	$f0,$00,$01,$06,$04
00000D9D A26C                       	dc.b	nA2, $6C
00000D9F                            	smpsStop
00000D9F F2                       M 	dc.b	$f2
00000DA0                            
00000DA0                            Credits_Call07:
00000DA0 A214 A404 A504 8008 A904+  	dc.b	nA2, $14, nB2, $04, nC3, $04, nRst, $08, nE3, $04, nRst, $08
00000DAC A804 8008 A904 8008 AC08+  	dc.b	nEb3, $04, nRst, $08, nE3, $04, nRst, $08, nG3, $08, nE3, $10
00000DB8                            	smpsReturn
00000DB8 E3                       M 	dc.b	$e3
00000DB9                            
00000DB9                            Credits_Call11:
00000DB9 800C C904 8010 C904 800C+  	dc.b	nRst, $0C, nC6, $04, nRst, $10, nC6, $04, nRst, $0C, nC6, $0C
00000DC5 CB08 C904 8018 800C C804+  	dc.b	nD6, $08, nC6, $04, nRst, $18, nRst, $0C, nB5, $04, nRst, $10
00000DD1 C804 800C C80C C908 C804+  	dc.b	nB5, $04, nRst, $0C, nB5, $0C, nC6, $08, nB5, $04, nRst, $18
00000DDD 800C C604 8010 C604 800C+  	dc.b	nRst, $0C, nA5, $04, nRst, $10, nA5, $04, nRst, $0C, nA5, $0C
00000DE9 C808 C604 8018 800C C504+  	dc.b	nB5, $08, nA5, $04, nRst, $18, nRst, $0C, nAb5, $04, nRst, $10
00000DF5 C504 800C C50C C708 C504+  	dc.b	nAb5, $04, nRst, $0C, nAb5, $0C, nBb5, $08, nAb5, $04, nRst, $18
00000E01                            	smpsReturn
00000E01 E3                       M 	dc.b	$e3
00000E02                            
00000E02                            Credits_Call0B:
00000E02                            	smpsSetvoice        $25
00000E02 EF25                     M 	dc.b	$ef,$25
00000E04 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
00000E10 06DB 0CDD 60DE 0C80 DE80+  	dc.b	$06, nFs7, $0C, nAb7, $60, nA7, $0C, nRst, nA7, nRst, nRst, $06
00000E1C DD12 DE0C                  	dc.b	nAb7, $12, nA7, $0C
00000E20                            	smpsReturn
00000E20 E3                       M 	dc.b	$e3
00000E21                            
00000E21                            Credits_Call0D:
00000E21 8018 B50B 800D B70C 0B80+  	dc.b	nRst, $18, nE4, $0B, nRst, $0D, nFs4, $0C, $0B, nRst, $19, nA4
00000E2D 0C0B 800D                  	dc.b	$0C, $0B, nRst, $0D
00000E31                            	smpsReturn
00000E31 E3                       M 	dc.b	$e3
00000E32                            
00000E32                            Credits_Call0E:
00000E32 C305 8013 C312 C305        	dc.b	nFs5, $05, nRst, $13, nFs5, $12, nFs5, $05
00000E3A                            	smpsReturn
00000E3A E3                       M 	dc.b	$e3
00000E3B                            
00000E3B                            Credits_Call12:
00000E3B CA06 80CA 80C6 80C6 80     	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst
00000E44                            	smpsReturn
00000E44 E3                       M 	dc.b	$e3
00000E45                            
00000E45                            Credits_Call0F:
00000E45 AF0C B306 B60C AFB1 0680+  	dc.b	nBb3, $0C, nD4, $06, nF4, $0C, nBb3, nC4, $06, nRst, nC4, $0C
00000E51 B506 B80C B106 80B6 0CBA+  	dc.b	nE4, $06, nG4, $0C, nC4, $06, nRst, nF4, $0C, nA4, $06, nC4
00000E5D 0CB5 B6BA 0680 BAAF 0CB3+  	dc.b	$0C, nE4, nF4, nA4, $06, nRst, nA4, nBb3, $0C, nD4, nE4, nG4
00000E69 06B2 0CB3 B5B8 0680 B8B2+  	dc.b	$06, nCs4, $0C, nD4, nE4, nG4, $06, nRst, nG4, nCs4, $0C, nE4
00000E75                            	smpsReturn
00000E75 E3                       M 	dc.b	$e3
00000E76                            
00000E76                            ; FM5 Data
00000E76                            Credits_FM5:
00000E76                            	smpsAlterPitch      $E8
00000E76 E9E8                     M 	dc.b	$e9,$e8
00000E78                            	smpsAlterVol        $F8
00000E78 E6F8                     M 	dc.b	$e6,$f8
00000E7A                            	smpsAlterNote       $05
00000E7A E105                     M 	dc.b	$e1,$05
00000E7C                            	smpsCall            Credits_Call03
00000E7C F8                       M 	dc.b	$f8
00000E7D                          M 	z80_ptr	credits_call03
00000E7D 0000                     M 	dc.w	(((credits_call03)<<8)&$ff00)|(((credits_call03)>>8)&$ff)|$80
00000E7F                            	smpsAlterPitch      $18
00000E7F E918                     M 	dc.b	$e9,$18
00000E81                            	smpsAlterVol        $08
00000E81 E608                     M 	dc.b	$e6,$08
00000E83                            	smpsAlterNote       $00
00000E83 E100                     M 	dc.b	$e1,$00
00000E85                            	smpsSetvoice        $02
00000E85 EF02                     M 	dc.b	$ef,$02
00000E87                            	smpsModSet          $0C, $01, $FC, $04
00000E87 F00C 01FC 04             M 	dc.b	$f0,$0c,$01,$fc,$04
00000E8C                            	smpsCall            Credits_Call04
00000E8C F8                       M 	dc.b	$f8
00000E8D                          M 	z80_ptr	credits_call04
00000E8D 0000                     M 	dc.w	(((credits_call04)<<8)&$ff00)|(((credits_call04)>>8)&$ff)|$80
00000E8F B13C                       	dc.b	nC4, $3C
00000E91                            	smpsCall            Credits_Call04
00000E91 F8                       M 	dc.b	$f8
00000E92                          M 	z80_ptr	credits_call04
00000E92 0000                     M 	dc.w	(((credits_call04)<<8)&$ff00)|(((credits_call04)>>8)&$ff)|$80
00000E94 B53C                       	dc.b	nE4, $3C
00000E96                            	smpsAlterPitch      $F4
00000E96 E9F4                     M 	dc.b	$e9,$f4
00000E98                            	smpsAlterVol        $07
00000E98 E607                     M 	dc.b	$e6,$07
00000E9A                            	smpsModSet          $30, $01, $04, $04
00000E9A F030 0104 04             M 	dc.b	$f0,$30,$01,$04,$04
00000E9F                            	smpsSetvoice        $06
00000E9F EF06                     M 	dc.b	$ef,$06
00000EA1                            
00000EA1                            Credits_Loop0A:
00000EA1 C430 E730 C6E7 30C2 E730+  	dc.b	nG5, $30, smpsNoAttack, $30, nA5, smpsNoAttack, $30, nF5, smpsNoAttack, $30, nE5, smpsNoAttack
00000EAD 30                         	dc.b	$30
00000EAE                            	smpsLoop            $00, $02, Credits_Loop0A
00000EAE F700 02                  M 	dc.b	$f7,$00,$02
00000EB1                          M 	z80_ptr	credits_loop0a
00000EB1 0000                     M 	dc.w	(((credits_loop0a)<<8)&$ff00)|(((credits_loop0a)>>8)&$ff)|$80
00000EB3                            	smpsSetvoice        $0A
00000EB3 EF0A                     M 	dc.b	$ef,$0a
00000EB5                            	smpsAlterVol        $F6
00000EB5 E6F6                     M 	dc.b	$e6,$f6
00000EB7                            	smpsModSet          $0C, $01, $05, $04
00000EB7 F00C 0105 04             M 	dc.b	$f0,$0c,$01,$05,$04
00000EBC                            	smpsPan             panLeft, $00
00000EBC E080                     M 	dc.b	$e0,panleft|$00
00000EBE                            
00000EBE                            Credits_Loop0B:
00000EBE                            	smpsCall            Credits_Call05
00000EBE F8                       M 	dc.b	$f8
00000EBF                          M 	z80_ptr	credits_call05
00000EBF 0000                     M 	dc.w	(((credits_call05)<<8)&$ff00)|(((credits_call05)>>8)&$ff)|$80
00000EC1 8025 C606 C680 0CC6 06C6+  	dc.b	nRst, $25, nA5, $06, nA5, nRst, $0C, nA5, $06, nA5, $05, nRst
00000ECD 0DC6 06C8 30E7 06          	dc.b	$0D, nA5, $06, nB5, $30, smpsNoAttack, $06
00000ED4                            	smpsCall            Credits_Call05
00000ED4 F8                       M 	dc.b	$f8
00000ED5                          M 	z80_ptr	credits_call05
00000ED5 0000                     M 	dc.w	(((credits_call05)<<8)&$ff00)|(((credits_call05)>>8)&$ff)|$80
00000ED7 8031 8060                  	dc.b	nRst, $31, nRst, $60
00000EDB                            	smpsLoop            $00, $02, Credits_Loop0B
00000EDB F700 02                  M 	dc.b	$f7,$00,$02
00000EDE                          M 	z80_ptr	credits_loop0b
00000EDE 0000                     M 	dc.w	(((credits_loop0b)<<8)&$ff00)|(((credits_loop0b)>>8)&$ff)|$80
00000EE0 8060 8048                  	dc.b	nRst, $60, nRst, $48
00000EE4                            	smpsAlterVol        $05
00000EE4 E605                     M 	dc.b	$e6,$05
00000EE6                            	smpsModOff
00000EE6 F4                       M 	dc.b	$f4
00000EE7 8001                       	dc.b	nRst, $01
00000EE9                            	smpsSetvoice        $0C
00000EE9 EF0C                     M 	dc.b	$ef,$0c
00000EEB                            	smpsAlterNote       $FE
00000EEB E1FE                     M 	dc.b	$e1,$fe
00000EED                            	smpsPan             panRight, $00
00000EED E040                     M 	dc.b	$e0,panright|$00
00000EEF                            	smpsCall            Credits_Call06
00000EEF F8                       M 	dc.b	$f8
00000EF0                          M 	z80_ptr	credits_call06
00000EF0 0000                     M 	dc.w	(((credits_call06)<<8)&$ff00)|(((credits_call06)>>8)&$ff)|$80
00000EF2 2380 0C80 60               	dc.b	$23, nRst, $0C, nRst, $60
00000EF7                            	smpsSetvoice        $11
00000EF7 EF11                     M 	dc.b	$ef,$11
00000EF9                            	smpsAlterPitch      $F4
00000EF9 E9F4                     M 	dc.b	$e9,$f4
00000EFB                            	smpsAlterVol        $F4
00000EFB E6F4                     M 	dc.b	$e6,$f4
00000EFD                            	smpsAlterNote       $00
00000EFD E100                     M 	dc.b	$e1,$00
00000EFF                            	smpsPan             panCenter, $00
00000EFF E0C0                     M 	dc.b	$e0,pancenter|$00
00000F01                            	smpsModSet          $06, $01, $06, $05
00000F01 F006 0106 05             M 	dc.b	$f0,$06,$01,$06,$05
00000F06 8060 8030 C206 C2C9 C61E+  	dc.b	nRst, $60, nRst, $30, nF5, $06, nF5, nC6, nA5, $1E, nRst, $60
00000F12 8006 CB80 CBC9 80C9 80C7+  	dc.b	nRst, $06, nD6, nRst, nD6, nC6, nRst, nC6, nRst, nBb5, nRst, nBb5
00000F1E 80C6 0380 C680 0980 0680+  	dc.b	nRst, nA5, $03, nRst, nA5, nRst, $09, nRst, $06, nRst, $60, nRst
00000F2A 30C2 06C2 C9C6 1E80 60     	dc.b	$30, nF5, $06, nF5, nC6, nA5, $1E, nRst, $60
00000F33                            	smpsSetvoice        $16
00000F33 EF16                     M 	dc.b	$ef,$16
00000F35                            	smpsAlterPitch      $0C
00000F35 E90C                     M 	dc.b	$e9,$0c
00000F37                            	smpsAlterVol        $04
00000F37 E604                     M 	dc.b	$e6,$04
00000F39                            	smpsModOff
00000F39 F4                       M 	dc.b	$f4
00000F3A                            	smpsPan             panLeft, $00
00000F3A E080                     M 	dc.b	$e0,panleft|$00
00000F3C 8001                       	dc.b	nRst, $01
00000F3E                            	smpsCall            Credits_Call07
00000F3E F8                       M 	dc.b	$f8
00000F3F                          M 	z80_ptr	credits_call07
00000F3F 0000                     M 	dc.w	(((credits_call07)<<8)&$ff00)|(((credits_call07)>>8)&$ff)|$80
00000F41 802F                       	dc.b	nRst, $2F
00000F43                            	smpsCall            Credits_Call08
00000F43 F8                       M 	dc.b	$f8
00000F44                          M 	z80_ptr	credits_call08
00000F44 0000                     M 	dc.w	(((credits_call08)<<8)&$ff00)|(((credits_call08)>>8)&$ff)|$80
00000F46 8030                       	dc.b	nRst, $30
00000F48                            	smpsCall            Credits_Call08
00000F48 F8                       M 	dc.b	$f8
00000F49                          M 	z80_ptr	credits_call08
00000F49 0000                     M 	dc.w	(((credits_call08)<<8)&$ff00)|(((credits_call08)>>8)&$ff)|$80
00000F4B 8060                       	dc.b	nRst, $60
00000F4D                            	smpsSetvoice        $19
00000F4D EF19                     M 	dc.b	$ef,$19
00000F4F                            	smpsAlterPitch      $F4
00000F4F E9F4                     M 	dc.b	$e9,$f4
00000F51                            	smpsPan             panCenter, $00
00000F51 E0C0                     M 	dc.b	$e0,pancenter|$00
00000F53                            	smpsCall            Credits_Call09
00000F53 F8                       M 	dc.b	$f8
00000F54                          M 	z80_ptr	credits_call09
00000F54 0000                     M 	dc.w	(((credits_call09)<<8)&$ff00)|(((credits_call09)>>8)&$ff)|$80
00000F56 8027 B103                  	dc.b	nRst, $27, nC4, $03
00000F5A                            	smpsCall            Credits_Call09
00000F5A F8                       M 	dc.b	$f8
00000F5B                          M 	z80_ptr	credits_call09
00000F5B 0000                     M 	dc.w	(((credits_call09)<<8)&$ff00)|(((credits_call09)>>8)&$ff)|$80
00000F5D 802A 8060                  	dc.b	nRst, $2A, nRst, $60
00000F61                            	smpsSetvoice        $1E
00000F61 EF1E                     M 	dc.b	$ef,$1e
00000F63                            	smpsAlterPitch      $F4
00000F63 E9F4                     M 	dc.b	$e9,$f4
00000F65                            	smpsNoteFill        $06
00000F65 E806                     M 	dc.b	$e8,$06
00000F67                            
00000F67                            Credits_Loop0C:
00000F67 800C C406 1218 C806 120C+  	dc.b	nRst, $0C, nG5, $06, $12, $18, nB5, $06, $12, $0C, nRst, nA5
00000F73 0612 18C8 0612 0C          	dc.b	$06, $12, $18, nB5, $06, $12, $0C
00000F7A                            	smpsLoop            $00, $02, Credits_Loop0C
00000F7A F700 02                  M 	dc.b	$f7,$00,$02
00000F7D                          M 	z80_ptr	credits_loop0c
00000F7D 0000                     M 	dc.w	(((credits_loop0c)<<8)&$ff00)|(((credits_loop0c)>>8)&$ff)|$80
00000F7F 8060                       	dc.b	nRst, $60
00000F81                            	smpsSetvoice        $20
00000F81 EF20                     M 	dc.b	$ef,$20
00000F83                            	smpsNoteFill        $00
00000F83 E800                     M 	dc.b	$e8,$00
00000F85                            	smpsAlterPitch      $18
00000F85 E918                     M 	dc.b	$e9,$18
00000F87                            	smpsAlterVol        $FA
00000F87 E6FA                     M 	dc.b	$e6,$fa
00000F89 B803 E7BA 5DB6 03E7 B85D+  	dc.b	nG4, $03, smpsNoAttack, nA4, $5D, nF4, $03, smpsNoAttack, nG4, $5D, nEb4, $03
00000F95 E7B6 5DB6 03E7 B85D 8060   	dc.b	smpsNoAttack, nF4, $5D, nF4, $03, smpsNoAttack, nG4, $5D, nRst, $60
00000F9F                            	smpsSetvoice        $22
00000F9F EF22                     M 	dc.b	$ef,$22
00000FA1                            	smpsAlterPitch      $F4
00000FA1 E9F4                     M 	dc.b	$e9,$f4
00000FA3                            	smpsAlterVol        $05
00000FA3 E605                     M 	dc.b	$e6,$05
00000FA5                            	smpsModSet          $1C, $01, $06, $04
00000FA5 F01C 0106 04             M 	dc.b	$f0,$1c,$01,$06,$04
00000FAA 8050 A704 A908 AC04 B130+  	dc.b	nRst, $50, nD3, $04, nE3, $08, nG3, $04, nC4, $30, nRst, $0C
00000FB6 B108 8004 B308 B110 B508+  	dc.b	nC4, $08, nRst, $04, nD4, $08, nC4, $10, nE4, $08, nE4, $04
00000FC2 8008 B034 800C B0B5 0804+  	dc.b	nRst, $08, nB3, $34, nRst, $0C, nB3, nE4, $08, $04, nRst, $08
00000FCE B104 AE24 800C AE08 8004+  	dc.b	nC4, $04, nA3, $24, nRst, $0C, nA3, $08, nRst, $04, nB3, $08
00000FDA AE04 B10C AF08 AD4C 800C+  	dc.b	nA3, $04, nC4, $0C, nBb3, $08, nAb3, $4C, nRst, $0C, nC4, $08
00000FE6 8004 B308 8004 B108 8004+  	dc.b	nRst, $04, nD4, $08, nRst, $04, nC4, $08, nRst, $04, nE4, $08
00000FF2 B504 8008 B01C 800C B518+  	dc.b	nE4, $04, nRst, $08, nB3, $1C, nRst, $0C, nE4, $18, nG4, $08
00000FFE B504 BA18 800C B604 8008+  	dc.b	nE4, $04, nA4, $18, nRst, $0C, nF4, $04, nRst, $08, nE4, $18
0000100A B1AE B00C                  	dc.b	nC4, nA3, nB3, $0C
0000100E                            	smpsAlterVol        $04
0000100E E604                     M 	dc.b	$e6,$04
00001010 B604 8008 B518 B1AE B00C   	dc.b	nF4, $04, nRst, $08, nE4, $18, nC4, nA3, nB3, $0C
0000101A                            	smpsAlterVol        $F8
0000101A E6F8                     M 	dc.b	$e6,$f8
0000101C B604 8008 B518 B1AE AA14+  	dc.b	nF4, $04, nRst, $08, nE4, $18, nC4, nA3, nF3, $14, nE3, $04
00001028                            	smpsAlterVol        $0C
00001028 E60C                     M 	dc.b	$e6,$0c
0000102A                            	smpsSetvoice        $23
0000102A EF23                     M 	dc.b	$ef,$23
0000102C                            	smpsAlterNote       $03
0000102C E103                     M 	dc.b	$e1,$03
0000102E                            	smpsAlterVol        $F7
0000102E E6F7                     M 	dc.b	$e6,$f7
00001030 8060                       	dc.b	nRst, $60
00001032                            	smpsCall            Credits_Call0A
00001032 F8                       M 	dc.b	$f8
00001033                          M 	z80_ptr	credits_call0a
00001033 0000                     M 	dc.w	(((credits_call0a)<<8)&$ff00)|(((credits_call0a)>>8)&$ff)|$80
00001035                            	smpsAlterVol        $09
00001035 E609                     M 	dc.b	$e6,$09
00001037                            	smpsModSet          $00, $01, $06, $04
00001037 F000 0106 04             M 	dc.b	$f0,$00,$01,$06,$04
0000103C                            	smpsCall            Credits_Call0B
0000103C F8                       M 	dc.b	$f8
0000103D                          M 	z80_ptr	credits_call0b
0000103D 0000                     M 	dc.w	(((credits_call0b)<<8)&$ff00)|(((credits_call0b)>>8)&$ff)|$80
0000103F                            	smpsStop
0000103F F2                       M 	dc.b	$f2
00001040                            
00001040                            Credits_Call08:
00001040 801E                       	dc.b	nRst, $1E
00001042                            	smpsSetvoice        $14
00001042 EF14                     M 	dc.b	$ef,$14
00001044 A412 A506                  	dc.b	nB2, $12, nC3, $06
00001048                            	smpsSetvoice        $16
00001048 EF16                     M 	dc.b	$ef,$16
0000104A 8030 8006 BD08 BC04 BB08+  	dc.b	nRst, $30, nRst, $06, nC5, $08, nB4, $04, nBb4, $08, nA4, $04
00001056 B908 B804                  	dc.b	nAb4, $08, nG4, $04
0000105A                            	smpsReturn
0000105A E3                       M 	dc.b	$e3
0000105B                            
0000105B                            Credits_Call04:
0000105B 8018 B10B 800D B30C 0B80+  	dc.b	nRst, $18, nC4, $0B, nRst, $0D, nD4, $0C, $0B, nRst, $19, nF4
00001067 0C0B 800D                  	dc.b	$0C, $0B, nRst, $0D
0000106B                            	smpsReturn
0000106B E3                       M 	dc.b	$e3
0000106C                            
0000106C                            Credits_Call05:
0000106C C605 8013 C612 C605        	dc.b	nA5, $05, nRst, $13, nA5, $12, nA5, $05
00001074                            	smpsReturn
00001074 E3                       M 	dc.b	$e3
00001075                            
00001075                            Credits_Call09:
00001075 8060 AC06 80AC 0CAE 0680+  	dc.b	nRst, $60, nG3, $06, nRst, nG3, $0C, nA3, $06, nRst, nA3, $0C
00001081 AF06                       	dc.b	nBb3, $06
00001083                            	smpsReturn
00001083 E3                       M 	dc.b	$e3
00001084                            
00001084                            ; PSG1 Data
00001084                            Credits_PSG1:
00001084 8030                       	dc.b	nRst, $30
00001086                            	smpsLoop            $00, $1A, Credits_PSG1
00001086 F700 1A                  M 	dc.b	$f7,$00,$1a
00001089                          M 	z80_ptr	credits_psg1
00001089 0000                     M 	dc.w	(((credits_psg1)<<8)&$ff00)|(((credits_psg1)>>8)&$ff)|$80
0000108B                            
0000108B                            Credits_Loop3C:
0000108B C430 E730 C6E7 30C2 E730+  	dc.b	nG5, $30, smpsNoAttack, $30, nA5, smpsNoAttack, $30, nF5, smpsNoAttack, $30, nE5, smpsNoAttack
00001097 30                         	dc.b	$30
00001098                            	smpsLoop            $00, $02, Credits_Loop3C
00001098 F700 02                  M 	dc.b	$f7,$00,$02
0000109B                          M 	z80_ptr	credits_loop3c
0000109B 0000                     M 	dc.w	(((credits_loop3c)<<8)&$ff00)|(((credits_loop3c)>>8)&$ff)|$80
0000109D                            
0000109D                            Credits_Loop3D:
0000109D 8030                       	dc.b	nRst, $30
0000109F                            	smpsLoop            $00, $10, Credits_Loop3D
0000109F F700 10                  M 	dc.b	$f7,$00,$10
000010A2                          M 	z80_ptr	credits_loop3d
000010A2 0000                     M 	dc.w	(((credits_loop3d)<<8)&$ff00)|(((credits_loop3d)>>8)&$ff)|$80
000010A4 8060                       	dc.b	nRst, $60
000010A6                            
000010A6                            Credits_Loop3E:
000010A6 8030                       	dc.b	nRst, $30
000010A8                            	smpsLoop            $00, $0A, Credits_Loop3E
000010A8 F700 0A                  M 	dc.b	$f7,$00,$0a
000010AB                          M 	z80_ptr	credits_loop3e
000010AB 0000                     M 	dc.w	(((credits_loop3e)<<8)&$ff00)|(((credits_loop3e)>>8)&$ff)|$80
000010AD 8060                       	dc.b	nRst, $60
000010AF                            	smpsAlterPitch      $F4
000010AF E9F4                     M 	dc.b	$e9,$f4
000010B1                            	smpsAlterVol        $FE
000010B1 E6FE                     M 	dc.b	$e6,$fe
000010B3                            	smpsPSGvoice        fTone_01
000010B3 F501                     M 	dc.b	$f5,ftone_01
000010B5                            	smpsCall            Credits_Call28
000010B5 F8                       M 	dc.b	$f8
000010B6                          M 	z80_ptr	credits_call28
000010B6 0000                     M 	dc.w	(((credits_call28)<<8)&$ff00)|(((credits_call28)>>8)&$ff)|$80
000010B8 AEB3 06AC 0CAE AEB3 0680+  	dc.b	nA3, nD4, $06, nG3, $0C, nA3, nA3, nD4, $06, nRst, nD4, nFs3
000010C4 0CAE                       	dc.b	$0C, nA3
000010C6                            	smpsCall            Credits_Call28
000010C6 F8                       M 	dc.b	$f8
000010C7                          M 	z80_ptr	credits_call28
000010C7 0000                     M 	dc.w	(((credits_call28)<<8)&$ff00)|(((credits_call28)>>8)&$ff)|$80
000010C9                            	smpsPSGvoice        fTone_0B
000010C9 F50B                     M 	dc.b	$f5,ftone_0b
000010CB 8004 8060                  	dc.b	nRst, $04, nRst, $60
000010CF                            	smpsCall            Credits_Call24
000010CF F8                       M 	dc.b	$f8
000010D0                          M 	z80_ptr	credits_call24
000010D0 0000                     M 	dc.w	(((credits_call24)<<8)&$ff00)|(((credits_call24)>>8)&$ff)|$80
000010D2 E720 E7C5 01E7 C4E7 C3E7+  	dc.b	smpsNoAttack, $20, smpsNoAttack, nAb5, $01, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack
000010DE C1E7 C0E7 BFE7 BEE7 BDE7+  	dc.b	nE5, smpsNoAttack, nEb5, smpsNoAttack, nD5, smpsNoAttack, nCs5, smpsNoAttack, nC5, smpsNoAttack, nB4, smpsNoAttack
000010EA BBE7 BA80 60               	dc.b	nBb4, smpsNoAttack, nA4, nRst, $60
000010EF                            	smpsPSGvoice        $00
000010EF F500                     M 	dc.b	$f5,$00
000010F1                            	smpsNoteFill        $06
000010F1 E806                     M 	dc.b	$e8,$06
000010F3                            	smpsAlterPitch      $F4
000010F3 E9F4                     M 	dc.b	$e9,$f4
000010F5                            	smpsCall            Credits_Call29
000010F5 F8                       M 	dc.b	$f8
000010F6                          M 	z80_ptr	credits_call29
000010F6 0000                     M 	dc.w	(((credits_call29)<<8)&$ff00)|(((credits_call29)>>8)&$ff)|$80
000010F8 C280 C2                    	dc.b	nF5, nRst, nF5
000010FB                            	smpsCall            Credits_Call29
000010FB F8                       M 	dc.b	$f8
000010FC                          M 	z80_ptr	credits_call29
000010FC 0000                     M 	dc.w	(((credits_call29)<<8)&$ff00)|(((credits_call29)>>8)&$ff)|$80
000010FE C204 80C2 800C C280 60     	dc.b	nF5, $04, nRst, nF5, nRst, $0C, nF5, nRst, $60
00001107                            	smpsPSGvoice        fTone_08
00001107 F508                     M 	dc.b	$f5,ftone_08
00001109                            	smpsAlterPitch      $04
00001109 E904                     M 	dc.b	$e9,$04
0000110B                            	smpsPSGAlterVol     $02
0000110B EC02                     M 	dc.b	$ec,$02
0000110D                            	smpsNoteFill        $06
0000110D E806                     M 	dc.b	$e8,$06
0000110F                            
0000110F                            Credits_Loop3F:
0000110F                            	smpsCall            Credits_Call27
0000110F F8                       M 	dc.b	$f8
00001110                          M 	z80_ptr	credits_call27
00001110 0000                     M 	dc.w	(((credits_call27)<<8)&$ff00)|(((credits_call27)>>8)&$ff)|$80
00001112                            	smpsLoop            $00, $02, Credits_Loop3F
00001112 F700 02                  M 	dc.b	$f7,$00,$02
00001115                          M 	z80_ptr	credits_loop3f
00001115 0000                     M 	dc.w	(((credits_loop3f)<<8)&$ff00)|(((credits_loop3f)>>8)&$ff)|$80
00001117                            
00001117                            Credits_Loop40:
00001117 8030                       	dc.b	nRst, $30
00001119                            	smpsLoop            $00, $0A, Credits_Loop40
00001119 F700 0A                  M 	dc.b	$f7,$00,$0a
0000111C                          M 	z80_ptr	credits_loop40
0000111C 0000                     M 	dc.w	(((credits_loop40)<<8)&$ff00)|(((credits_loop40)>>8)&$ff)|$80
0000111E 8060                       	dc.b	nRst, $60
00001120                            	smpsPSGvoice        $00
00001120 F500                     M 	dc.b	$f5,$00
00001122                            	smpsAlterPitch      $F0
00001122 E9F0                     M 	dc.b	$e9,$f0
00001124                            	smpsPSGAlterVol     $FF
00001124 ECFF                     M 	dc.b	$ec,$ff
00001126 8060                       	dc.b	nRst, $60
00001128                            	smpsCall            Credits_Call17
00001128 F8                       M 	dc.b	$f8
00001129                          M 	z80_ptr	credits_call17
00001129 0000                     M 	dc.w	(((credits_call17)<<8)&$ff00)|(((credits_call17)>>8)&$ff)|$80
0000112B                            	smpsAlterPitch      $18
0000112B E918                     M 	dc.b	$e9,$18
0000112D                            	smpsPSGAlterVol     $02
0000112D EC02                     M 	dc.b	$ec,$02
0000112F B530 B318 B50C B3B1 30B6   	dc.b	nE4, $30, nD4, $18, nE4, $0C, nD4, nC4, $30, nF4
00001139                            	smpsPSGAlterVol     $FE
00001139 ECFE                     M 	dc.b	$ec,$fe
0000113B 800C B880 B880 BA80 BA     	dc.b	nRst, $0C, nG4, nRst, nG4, nRst, nA4, nRst, nA4
00001144                            	smpsPSGAlterVol     $03
00001144 EC03                     M 	dc.b	$ec,$03
00001146 C418 C1BD BF0C 80          	dc.b	nG5, $18, nE5, nC5, nD5, $0C, nRst
0000114D                            	smpsPSGAlterVol     $FC
0000114D ECFC                     M 	dc.b	$ec,$fc
0000114F 80B8 80B8 80BA 1808 B804   	dc.b	nRst, nG4, nRst, nG4, nRst, nA4, $18, $08, nG4, $04
00001159                            	smpsAlterPitch      $F4
00001159 E9F4                     M 	dc.b	$e9,$f4
0000115B                            	smpsPSGAlterVol     $01
0000115B EC01                     M 	dc.b	$ec,$01
0000115D                            	smpsPSGvoice        fTone_05
0000115D F505                     M 	dc.b	$f5,ftone_05
0000115F                            
0000115F                            Credits_Loop41:
0000115F 8060                       	dc.b	nRst, $60
00001161                            	smpsLoop            $00, $05, Credits_Loop41
00001161 F700 05                  M 	dc.b	$f7,$00,$05
00001164                          M 	z80_ptr	credits_loop41
00001164 0000                     M 	dc.w	(((credits_loop41)<<8)&$ff00)|(((credits_loop41)>>8)&$ff)|$80
00001166 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
00001172 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
0000117E C9CA 0680 09               	dc.b	nC6, nCs6, $06, nRst, $09
00001183                            	smpsAlterPitch      $30
00001183 E930                     M 	dc.b	$e9,$30
00001185                            	smpsPSGAlterVol     $FC
00001185 ECFC                     M 	dc.b	$ec,$fc
00001187                            	smpsJump            Credits_Jump00
00001187 F6                       M 	dc.b	$f6
00001188                          M 	z80_ptr	credits_jump00
00001188 0000                     M 	dc.w	(((credits_jump00)<<8)&$ff00)|(((credits_jump00)>>8)&$ff)|$80
0000118A                            
0000118A                            	; Unreachable
0000118A                            	smpsStop
0000118A F2                       M 	dc.b	$f2
0000118B                            
0000118B                            Credits_Call27:
0000118B 800C BD06 1218 C406 120C+  	dc.b	nRst, $0C, nC5, $06, $12, $18, nG5, $06, $12, $0C, nRst, nF5
00001197 0612 18C4 0612 0C          	dc.b	$06, $12, $18, nG5, $06, $12, $0C
0000119E                            	smpsReturn
0000119E E3                       M 	dc.b	$e3
0000119F                            
0000119F                            Credits_Call29:
0000119F 8060 800C C280 C280        	dc.b	nRst, $60, nRst, $0C, nF5, nRst, nF5, nRst
000011A7                            	smpsReturn
000011A7 E3                       M 	dc.b	$e3
000011A8                            
000011A8                            Credits_Call28:
000011A8 AC0C AF06 B30C ACAC 0680+  	dc.b	nG3, $0C, nBb3, $06, nD4, $0C, nG3, nG3, $06, nRst, nG3, $0C
000011B4 AF06 B50C AC06 8006 B10C+  	dc.b	nBb3, $06, nE4, $0C, nG3, $06, nRst, $06, nC4, $0C, nF4, $06
000011C0 AE0C B1B3 B606 80B6 AA0C+  	dc.b	nA3, $0C, nC4, nD4, nF4, $06, nRst, nF4, nF3, $0C, nBb3, nBb3
000011CC B506 AC0C AFB2 B506 80B5+  	dc.b	nE4, $06, nG3, $0C, nBb3, nCs4, nE4, $06, nRst, nE4, nA3, $0C
000011D8 B2                         	dc.b	nCs4
000011D9                            	smpsReturn
000011D9 E3                       M 	dc.b	$e3
000011DA                            
000011DA                            ; PSG2 Data
000011DA                            Credits_PSG2:
000011DA 8030                       	dc.b	nRst, $30
000011DC                            	smpsLoop            $00, $1A, Credits_PSG2
000011DC F700 1A                  M 	dc.b	$f7,$00,$1a
000011DF                          M 	z80_ptr	credits_psg2
000011DF 0000                     M 	dc.w	(((credits_psg2)<<8)&$ff00)|(((credits_psg2)>>8)&$ff)|$80
000011E1                            
000011E1                            Credits_Loop34:
000011E1 C130 E730 C3E7 30BF E730+  	dc.b	nE5, $30, smpsNoAttack, $30, nFs5, smpsNoAttack, $30, nD5, smpsNoAttack, $30, nC5, smpsNoAttack
000011ED 30                         	dc.b	$30
000011EE                            	smpsLoop            $00, $02, Credits_Loop34
000011EE F700 02                  M 	dc.b	$f7,$00,$02
000011F1                          M 	z80_ptr	credits_loop34
000011F1 0000                     M 	dc.w	(((credits_loop34)<<8)&$ff00)|(((credits_loop34)>>8)&$ff)|$80
000011F3                            
000011F3                            Credits_Loop35:
000011F3 8030                       	dc.b	nRst, $30
000011F5                            	smpsLoop            $00, $10, Credits_Loop35
000011F5 F700 10                  M 	dc.b	$f7,$00,$10
000011F8                          M 	z80_ptr	credits_loop35
000011F8 0000                     M 	dc.w	(((credits_loop35)<<8)&$ff00)|(((credits_loop35)>>8)&$ff)|$80
000011FA 8060                       	dc.b	nRst, $60
000011FC                            	smpsAlterPitch      $0C
000011FC E90C                     M 	dc.b	$e9,$0c
000011FE                            	smpsPSGAlterVol     $FD
000011FE ECFD                     M 	dc.b	$ec,$fd
00001200                            	smpsPSGvoice        fTone_04
00001200 F504                     M 	dc.b	$f5,ftone_04
00001202 80                         	dc.b	nRst
00001203                            
00001203                            Credits_Loop36:
00001203                            	smpsCall            Credits_Call15
00001203 F8                       M 	dc.b	$f8
00001204                          M 	z80_ptr	credits_call15
00001204 0000                     M 	dc.w	(((credits_call15)<<8)&$ff00)|(((credits_call15)>>8)&$ff)|$80
00001206                            	smpsLoop            $00, $02, Credits_Loop36
00001206 F700 02                  M 	dc.b	$f7,$00,$02
00001209                          M 	z80_ptr	credits_loop36
00001209 0000                     M 	dc.w	(((credits_loop36)<<8)&$ff00)|(((credits_loop36)>>8)&$ff)|$80
0000120B 8060                       	dc.b	nRst, $60
0000120D                            	smpsModSet          $03, $02, $01, $05
0000120D F003 0201 05             M 	dc.b	$f0,$03,$02,$01,$05
00001212                            	smpsPSGvoice        fTone_0A
00001212 F50A                     M 	dc.b	$f5,ftone_0a
00001214                            	smpsAlterPitch      $E8
00001214 E9E8                     M 	dc.b	$e9,$e8
00001216                            	smpsPSGAlterVol     $02
00001216 EC02                     M 	dc.b	$ec,$02
00001218 8030 8080 BD06 BFC6 C21E+  	dc.b	nRst, $30, nRst, nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $60
00001224 8006 C680 C6C4 80C4 80C3+  	dc.b	nRst, $06, nA5, nRst, nA5, nG5, nRst, nG5, nRst, nFs5, nRst, nFs5
00001230 80BF 0380 BF80 0980 0680+  	dc.b	nRst, nD5, $03, nRst, nD5, nRst, $09, nRst, $06, nRst, $30, nRst
0000123C 80BD 06BF C6C2 1E80 60     	dc.b	nRst, nC5, $06, nD5, nA5, nF5, $1E, nRst, $60
00001245                            	smpsModOff
00001245 F4                       M 	dc.b	$f4
00001246                            
00001246                            Credits_Loop37:
00001246 8030                       	dc.b	nRst, $30
00001248                            	smpsLoop            $00, $0C, Credits_Loop37
00001248 F700 0C                  M 	dc.b	$f7,$00,$0c
0000124B                          M 	z80_ptr	credits_loop37
0000124B 0000                     M 	dc.w	(((credits_loop37)<<8)&$ff00)|(((credits_loop37)>>8)&$ff)|$80
0000124D                            	smpsPSGvoice        $00
0000124D F500                     M 	dc.b	$f5,$00
0000124F                            	smpsPSGAlterVol     $FE
0000124F ECFE                     M 	dc.b	$ec,$fe
00001251                            	smpsNoteFill        $06
00001251 E806                     M 	dc.b	$e8,$06
00001253 8060 800C BF80 BF80 BF80+  	dc.b	nRst, $60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, nRst, nD5, nRst
0000125F 6080 0CBF 80BF 80BF 0480+  	dc.b	$60, nRst, $0C, nD5, nRst, nD5, nRst, nD5, $04, nRst, nD5, nRst
0000126B 0CBF 8060                  	dc.b	$0C, nD5, nRst, $60
0000126F                            	smpsPSGAlterVol     $02
0000126F EC02                     M 	dc.b	$ec,$02
00001271                            
00001271                            Credits_Loop38:
00001271                            	smpsCall            Credits_Call27
00001271 F8                       M 	dc.b	$f8
00001272                          M 	z80_ptr	credits_call27
00001272 0000                     M 	dc.w	(((credits_call27)<<8)&$ff00)|(((credits_call27)>>8)&$ff)|$80
00001274                            	smpsLoop            $00, $02, Credits_Loop38
00001274 F700 02                  M 	dc.b	$f7,$00,$02
00001277                          M 	z80_ptr	credits_loop38
00001277 0000                     M 	dc.w	(((credits_loop38)<<8)&$ff00)|(((credits_loop38)>>8)&$ff)|$80
00001279                            
00001279                            Credits_Loop39:
00001279 8030                       	dc.b	nRst, $30
0000127B                            	smpsLoop            $00, $0A, Credits_Loop39
0000127B F700 0A                  M 	dc.b	$f7,$00,$0a
0000127E                          M 	z80_ptr	credits_loop39
0000127E 0000                     M 	dc.w	(((credits_loop39)<<8)&$ff00)|(((credits_loop39)>>8)&$ff)|$80
00001280 8060                       	dc.b	nRst, $60
00001282                            	smpsPSGvoice        $00
00001282 F500                     M 	dc.b	$f5,$00
00001284                            	; This is wrong: it should convert from EHZ 2P's PSG2 transpose ($D0)
00001284                            	; to CNZ's PSG2 transpose ($DC), but instead of adding $C, it subtracts
00001284                            	; $C, causing the note to be too low and underflow the sound driver's
00001284                            	; frequency table, producing invalid notes.
00001284                            	smpsAlterPitch      $F4
00001284 E9F4                     M 	dc.b	$e9,$f4
00001286                            	smpsPSGAlterVol     $FF
00001286 ECFF                     M 	dc.b	$ec,$ff
00001288                            	smpsAlterPitch      $E8
00001288 E9E8                     M 	dc.b	$e9,$e8
0000128A 8060                       	dc.b	nRst, $60
0000128C                            	smpsCall            Credits_Call11
0000128C F8                       M 	dc.b	$f8
0000128D                          M 	z80_ptr	credits_call11
0000128D 0000                     M 	dc.w	(((credits_call11)<<8)&$ff00)|(((credits_call11)>>8)&$ff)|$80
0000128F                            	smpsAlterPitch      $18
0000128F E918                     M 	dc.b	$e9,$18
00001291                            	smpsPSGAlterVol     $02
00001291 EC02                     M 	dc.b	$ec,$02
00001293 B130 B018 B10C B0AE 30B1   	dc.b	nC4, $30, nB3, $18, nC4, $0C, nB3, nA3, $30, nC4
0000129D                            	smpsPSGAlterVol     $FE
0000129D ECFE                     M 	dc.b	$ec,$fe
0000129F 800C B580 B580 B680 B6     	dc.b	nRst, $0C, nE4, nRst, nE4, nRst, nF4, nRst, nF4
000012A8                            	smpsPSGAlterVol     $03
000012A8 EC03                     M 	dc.b	$ec,$03
000012AA 80B1 80B1 80B1 80B1        	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, nRst, nC4
000012B2                            	smpsPSGAlterVol     $FC
000012B2 ECFC                     M 	dc.b	$ec,$fc
000012B4 80B1 80B1 80B1 1808 B104   	dc.b	nRst, nC4, nRst, nC4, nRst, nC4, $18, $08, nC4, $04
000012BE                            	smpsPSGAlterVol     $01
000012BE EC01                     M 	dc.b	$ec,$01
000012C0                            	; If the above bug is fixed, then this line needs removing (the track
000012C0                            	; will already be two octaves higher).
000012C0                            	smpsAlterPitch      $18
000012C0 E918                     M 	dc.b	$e9,$18
000012C2                            	smpsPSGvoice        fTone_05
000012C2 F505                     M 	dc.b	$f5,ftone_05
000012C4                            	smpsAlterNote       $01
000012C4 E101                     M 	dc.b	$e1,$01
000012C6 8060 8080 8080 8080 0CCD+  	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst, nRst, $0C, nE6, $06, nRst
000012D2 D4CD 800C CD06 80D4 CD80+  	dc.b	nB6, nE6, nRst, $0C, nE6, $06, nRst, nB6, nE6, nRst, $18, nRst
000012DE 54                         	dc.b	$54
000012DF                            	smpsAlterPitch      $24
000012DF E924                     M 	dc.b	$e9,$24
000012E1                            	smpsPSGAlterVol     $FD
000012E1 ECFD                     M 	dc.b	$ec,$fd
000012E3                            
000012E3                            Credits_Jump00:
000012E3                            	smpsPSGvoice        fTone_03
000012E3 F503                     M 	dc.b	$f5,ftone_03
000012E5 8006                       	dc.b	nRst, $06
000012E7                            
000012E7                            Credits_Loop3A:
000012E7 BF03 C1C3                  	dc.b	nD5, $03, nE5, nFs5
000012EB                            	smpsPSGAlterVol     $01
000012EB EC01                     M 	dc.b	$ec,$01
000012ED                            	smpsAlterPitch      $FF
000012ED E9FF                     M 	dc.b	$e9,$ff
000012EF                            	smpsLoop            $00, $05, Credits_Loop3A
000012EF F700 05                  M 	dc.b	$f7,$00,$05
000012F2                          M 	z80_ptr	credits_loop3a
000012F2 0000                     M 	dc.w	(((credits_loop3a)<<8)&$ff00)|(((credits_loop3a)>>8)&$ff)|$80
000012F4                            
000012F4                            Credits_Loop3B:
000012F4 BF03 C1C3                  	dc.b	nD5, $03, nE5, nFs5
000012F8                            	smpsPSGAlterVol     $01
000012F8 EC01                     M 	dc.b	$ec,$01
000012FA                            	smpsAlterPitch      $01
000012FA E901                     M 	dc.b	$e9,$01
000012FC                            	smpsLoop            $00, $07, Credits_Loop3B
000012FC F700 07                  M 	dc.b	$f7,$00,$07
000012FF                          M 	z80_ptr	credits_loop3b
000012FF 0000                     M 	dc.w	(((credits_loop3b)<<8)&$ff00)|(((credits_loop3b)>>8)&$ff)|$80
00001301                            	smpsStop
00001301 F2                       M 	dc.b	$f2
00001302                            
00001302                            ; PSG3 Data
00001302                            Credits_PSG3:
00001302                            	smpsPSGform         $E7
00001302 F3E7                     M 	dc.b	$f3,$e7
00001304 8060                       	dc.b	nRst, $60
00001306                            	smpsPSGvoice        fTone_02
00001306 F502                     M 	dc.b	$f5,ftone_02
00001308                            
00001308                            Credits_Loop27:
00001308 C60C 0C0C 0606 0C0C 0606+  	dc.b	nMaxPSG, $0C, $0C, $0C, $06, $06, $0C, $0C, $06, $06, $0C
00001313                            	smpsLoop            $00, $08, Credits_Loop27
00001313 F700 08                  M 	dc.b	$f7,$00,$08
00001316                          M 	z80_ptr	credits_loop27
00001316 0000                     M 	dc.w	(((credits_loop27)<<8)&$ff00)|(((credits_loop27)>>8)&$ff)|$80
00001318                            
00001318                            Credits_Loop28:
00001318 8030                       	dc.b	nRst, $30
0000131A                            	smpsLoop            $00, $08, Credits_Loop28
0000131A F700 08                  M 	dc.b	$f7,$00,$08
0000131D                          M 	z80_ptr	credits_loop28
0000131D 0000                     M 	dc.w	(((credits_loop28)<<8)&$ff00)|(((credits_loop28)>>8)&$ff)|$80
0000131F                            
0000131F                            Credits_Loop29:
0000131F C60C 0606                  	dc.b	nMaxPSG, $0C, $06, $06
00001323                            	smpsLoop            $00, $1F, Credits_Loop29
00001323 F700 1F                  M 	dc.b	$f7,$00,$1f
00001326                          M 	z80_ptr	credits_loop29
00001326 0000                     M 	dc.w	(((credits_loop29)<<8)&$ff00)|(((credits_loop29)>>8)&$ff)|$80
00001328 0C                         	dc.b	$0C
00001329                            	smpsPSGvoice        fTone_03
00001329 F503                     M 	dc.b	$f5,ftone_03
0000132B C6                         	dc.b	nMaxPSG
0000132C                            	smpsPSGvoice        fTone_02
0000132C F502                     M 	dc.b	$f5,ftone_02
0000132E                            
0000132E                            Credits_Loop2A:
0000132E C60C 0606                  	dc.b	nMaxPSG, $0C, $06, $06
00001332                            	smpsLoop            $00, $07, Credits_Loop2A
00001332 F700 07                  M 	dc.b	$f7,$00,$07
00001335                          M 	z80_ptr	credits_loop2a
00001335 0000                     M 	dc.w	(((credits_loop2a)<<8)&$ff00)|(((credits_loop2a)>>8)&$ff)|$80
00001337 0606 0606                  	dc.b	$06, $06, $06, $06
0000133B                            	smpsLoop            $01, $04, Credits_Loop2A
0000133B F701 04                  M 	dc.b	$f7,$01,$04
0000133E                          M 	z80_ptr	credits_loop2a
0000133E 0000                     M 	dc.w	(((credits_loop2a)<<8)&$ff00)|(((credits_loop2a)>>8)&$ff)|$80
00001340                            
00001340                            Credits_Loop2B:
00001340 8030                       	dc.b	nRst, $30
00001342                            	smpsLoop            $00, $0C, Credits_Loop2B
00001342 F700 0C                  M 	dc.b	$f7,$00,$0c
00001345                          M 	z80_ptr	credits_loop2b
00001345 0000                     M 	dc.w	(((credits_loop2b)<<8)&$ff00)|(((credits_loop2b)>>8)&$ff)|$80
00001347                            	smpsPSGvoice        fTone_04
00001347 F504                     M 	dc.b	$f5,ftone_04
00001349                            	smpsPSGAlterVol     $02
00001349 EC02                     M 	dc.b	$ec,$02
0000134B                            
0000134B                            Credits_Loop2C:
0000134B                            	smpsNoteFill        $03
0000134B E803                     M 	dc.b	$e8,$03
0000134D C606 06                    	dc.b	nMaxPSG, $06, $06
00001350                            	smpsNoteFill        $00
00001350 E800                     M 	dc.b	$e8,$00
00001352 0C                         	dc.b	$0C
00001353                            	smpsLoop            $00, $04, Credits_Loop2C
00001353 F700 04                  M 	dc.b	$f7,$00,$04
00001356                          M 	z80_ptr	credits_loop2c
00001356 0000                     M 	dc.w	(((credits_loop2c)<<8)&$ff00)|(((credits_loop2c)>>8)&$ff)|$80
00001358                            	smpsPSGvoice        fTone_02
00001358 F502                     M 	dc.b	$f5,ftone_02
0000135A                            	smpsPSGAlterVol     $FD
0000135A ECFD                     M 	dc.b	$ec,$fd
0000135C                            
0000135C                            Credits_Loop2D:
0000135C 800C C606 8007 C606 8011+  	dc.b	nRst, $0C, nMaxPSG, $06, nRst, $07, nMaxPSG, $06, nRst, $11, nMaxPSG, $0C
00001368 8006 C60C 8006 C680        	dc.b	nRst, $06, nMaxPSG, $0C, nRst, $06, nMaxPSG, nRst
00001370                            	smpsLoop            $00, $07, Credits_Loop2D
00001370 F700 07                  M 	dc.b	$f7,$00,$07
00001373                          M 	z80_ptr	credits_loop2d
00001373 0000                     M 	dc.w	(((credits_loop2d)<<8)&$ff00)|(((credits_loop2d)>>8)&$ff)|$80
00001375                            	smpsPSGAlterVol     $02
00001375 EC02                     M 	dc.b	$ec,$02
00001377                            
00001377                            Credits_Loop2E:
00001377 C60C 0804                  	dc.b	nMaxPSG, $0C, $08, $04
0000137B                            	smpsLoop            $00, $18, Credits_Loop2E
0000137B F700 18                  M 	dc.b	$f7,$00,$18
0000137E                          M 	z80_ptr	credits_loop2e
0000137E 0000                     M 	dc.w	(((credits_loop2e)<<8)&$ff00)|(((credits_loop2e)>>8)&$ff)|$80
00001380                            
00001380                            Credits_Loop2F:
00001380 C60C 0C0C 0804             	dc.b	nMaxPSG, $0C, $0C, $0C, $08, $04
00001386                            	smpsLoop            $00, $08, Credits_Loop2F
00001386 F700 08                  M 	dc.b	$f7,$00,$08
00001389                          M 	z80_ptr	credits_loop2f
00001389 0000                     M 	dc.w	(((credits_loop2f)<<8)&$ff00)|(((credits_loop2f)>>8)&$ff)|$80
0000138B 8060                       	dc.b	nRst, $60
0000138D                            	smpsPSGvoice        fTone_04
0000138D F504                     M 	dc.b	$f5,ftone_04
0000138F                            	smpsPSGAlterVol     $02
0000138F EC02                     M 	dc.b	$ec,$02
00001391                            
00001391                            Credits_Loop30:
00001391 C606 060C                  	dc.b	nMaxPSG, $06, $06, $0C
00001395                            	smpsLoop            $00, $10, Credits_Loop30
00001395 F700 10                  M 	dc.b	$f7,$00,$10
00001398                          M 	z80_ptr	credits_loop30
00001398 0000                     M 	dc.w	(((credits_loop30)<<8)&$ff00)|(((credits_loop30)>>8)&$ff)|$80
0000139A                            
0000139A                            Credits_Loop31:
0000139A 8030                       	dc.b	nRst, $30
0000139C                            	smpsLoop            $00, $0A, Credits_Loop31
0000139C F700 0A                  M 	dc.b	$f7,$00,$0a
0000139F                          M 	z80_ptr	credits_loop31
0000139F 0000                     M 	dc.w	(((credits_loop31)<<8)&$ff00)|(((credits_loop31)>>8)&$ff)|$80
000013A1 8060                       	dc.b	nRst, $60
000013A3                            	smpsPSGAlterVol     $FF
000013A3 ECFF                     M 	dc.b	$ec,$ff
000013A5                            
000013A5                            Credits_Loop32:
000013A5                            	smpsPSGvoice        fTone_01
000013A5 F501                     M 	dc.b	$f5,ftone_01
000013A7 C60C                       	dc.b	nMaxPSG, $0C
000013A9                            	smpsPSGvoice        fTone_02
000013A9 F502                     M 	dc.b	$f5,ftone_02
000013AB                            	smpsPSGAlterVol     $FF
000013AB ECFF                     M 	dc.b	$ec,$ff
000013AD 08                         	dc.b	$08
000013AE                            	smpsPSGvoice        fTone_01
000013AE F501                     M 	dc.b	$f5,ftone_01
000013B0                            	smpsPSGAlterVol     $01
000013B0 EC01                     M 	dc.b	$ec,$01
000013B2 04                         	dc.b	$04
000013B3                            	smpsLoop            $00, $27, Credits_Loop32
000013B3 F700 27                  M 	dc.b	$f7,$00,$27
000013B6                          M 	z80_ptr	credits_loop32
000013B6 0000                     M 	dc.w	(((credits_loop32)<<8)&$ff00)|(((credits_loop32)>>8)&$ff)|$80
000013B8                            	smpsPSGAlterVol     $FF
000013B8 ECFF                     M 	dc.b	$ec,$ff
000013BA                            	smpsPSGvoice        fTone_04
000013BA F504                     M 	dc.b	$f5,ftone_04
000013BC                            
000013BC                            Credits_Loop33:
000013BC                            	smpsNoteFill        $03
000013BC E803                     M 	dc.b	$e8,$03
000013BE C60C                       	dc.b	nMaxPSG, $0C
000013C0                            	smpsNoteFill        $0C
000013C0 E80C                     M 	dc.b	$e8,$0c
000013C2 0C                         	dc.b	$0C
000013C3                            	smpsLoop            $00, $1E, Credits_Loop33
000013C3 F700 1E                  M 	dc.b	$f7,$00,$1e
000013C6                          M 	z80_ptr	credits_loop33
000013C6 0000                     M 	dc.w	(((credits_loop33)<<8)&$ff00)|(((credits_loop33)>>8)&$ff)|$80
000013C8                            	smpsNoteFill        $03
000013C8 E803                     M 	dc.b	$e8,$03
000013CA C606                       	dc.b	nMaxPSG, $06
000013CC                            	smpsNoteFill        $0E
000013CC E80E                     M 	dc.b	$e8,$0e
000013CE 12                         	dc.b	$12
000013CF                            	smpsNoteFill        $03
000013CF E803                     M 	dc.b	$e8,$03
000013D1 0C                         	dc.b	$0C
000013D2                            	smpsNoteFill        $0F
000013D2 E80F                     M 	dc.b	$e8,$0f
000013D4 0C                         	dc.b	$0C
000013D5                            	smpsStop
000013D5 F2                       M 	dc.b	$f2
000013D6                            
000013D6                            ; DAC Data
000013D6                            Credits_DAC:
000013D6 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000013E2 0C                         	dc.b	$0C
000013E3                            
000013E3                            Credits_Loop00:
000013E3 8118 82                    	dc.b	dKick, $18, dSnare
000013E6                            	smpsLoop            $00, $0E, Credits_Loop00
000013E6 F700 0E                  M 	dc.b	$f7,$00,$0e
000013E9                          M 	z80_ptr	credits_loop00
000013E9 0000                     M 	dc.w	(((credits_loop00)<<8)&$ff00)|(((credits_loop00)>>8)&$ff)|$80
000013EB 810C                       	dc.b	dKick, $0C
000013ED                            
000013ED                            Credits_Loop01:
000013ED 82                         	dc.b	dSnare
000013EE                            	smpsLoop            $00, $07, Credits_Loop01
000013EE F700 07                  M 	dc.b	$f7,$00,$07
000013F1                          M 	z80_ptr	credits_loop01
000013F1 0000                     M 	dc.w	(((credits_loop01)<<8)&$ff00)|(((credits_loop01)>>8)&$ff)|$80
000013F3                            	smpsSetTempoMod     $EA
000013F3 EAEA                     M 	dc.b	$ea,$ea
000013F5                            	smpsCall            Credits_Call00
000013F5 F8                       M 	dc.b	$f8
000013F6                          M 	z80_ptr	credits_call00
000013F6 0000                     M 	dc.w	(((credits_call00)<<8)&$ff00)|(((credits_call00)>>8)&$ff)|$80
000013F8 810C 8D82 8181 8E82 8404+  	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
00001404 810C 8206 8282 8281 0C82+  	dc.b	dKick, $0C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dSnare, $06, dSnare
00001410 8181 8282 8282             	dc.b	dKick, dKick, dSnare, dSnare, dSnare, dSnare
00001416                            
00001416                            Credits_Loop02:
00001416 8118 8281 82               	dc.b	dKick, $18, dSnare, dKick, dSnare
0000141B                            	smpsLoop            $00, $07, Credits_Loop02
0000141B F700 07                  M 	dc.b	$f7,$00,$07
0000141E                          M 	z80_ptr	credits_loop02
0000141E 0000                     M 	dc.w	(((credits_loop02)<<8)&$ff00)|(((credits_loop02)>>8)&$ff)|$80
00001420 810C 8282 8282 0682 8C8C+  	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, $06, dSnare, dMidTom, dMidTom, dLowTom, dLowTom
0000142C 8E8E                       	dc.b	dFloorTom, dFloorTom
0000142E                            	smpsCall            Credits_Call01
0000142E F8                       M 	dc.b	$f8
0000142F                          M 	z80_ptr	credits_call01
0000142F 0000                     M 	dc.w	(((credits_call01)<<8)&$ff00)|(((credits_call01)>>8)&$ff)|$80
00001431 8118 820C 8118 820C 8282+  	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare, $06, dSnare
0000143D                            	smpsCall            Credits_Call01
0000143D F8                       M 	dc.b	$f8
0000143E                          M 	z80_ptr	credits_call01
0000143E 0000                     M 	dc.w	(((credits_call01)<<8)&$ff00)|(((credits_call01)>>8)&$ff)|$80
00001440 810C 8282 828D 068D 8E8E+  	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dLowTom, $06, dLowTom, dFloorTom, dFloorTom, dSnare, $06
0000144C 828D 0C82 0C82 0682 8082+  	dc.b	dSnare, dLowTom, $0C, dSnare, $0C, dSnare, $06, dSnare, nRst, dSnare, dSnare, $0C
00001458 820C 8282 0682 8D8D        	dc.b	dSnare, $0C, dSnare, dSnare, $06, dSnare, dLowTom, dLowTom
00001460                            
00001460                            Credits_Loop03:
00001460 810C 8F06 9082 0C90 0691+  	dc.b	dKick, $0C, dHiClap, $06, dMidClap, dSnare, $0C, dMidClap, $06, dLowClap, dKick, $0C
0000146C 8F06 9182 0C8F 0691        	dc.b	dHiClap, $06, dLowClap, dSnare, $0C, dHiClap, $06, dLowClap
00001474                            	smpsLoop            $00, $04, Credits_Loop03
00001474 F700 04                  M 	dc.b	$f7,$00,$04
00001477                          M 	z80_ptr	credits_loop03
00001477 0000                     M 	dc.w	(((credits_loop03)<<8)&$ff00)|(((credits_loop03)>>8)&$ff)|$80
00001479 810C 8F06 9182 0C8F 0691+  	dc.b	dKick, $0C, dHiClap, $06, dLowClap, dSnare, $0C, dHiClap, $06, dLowClap, dMidTom, $06
00001485 0303 8D06 8D8D 8E8E 8E81+  	dc.b	$03, $03, dLowTom, $06, dLowTom, dLowTom, dFloorTom, dFloorTom, dFloorTom, dKick, $06, $0C
00001491 8206 800C 8182 8E82 0682+  	dc.b	dSnare, $06, nRst, $0C, dKick, dSnare, dFloorTom, dSnare, $06, dSnare, dSnare, dSnare
0000149D                            
0000149D                            Credits_Loop04:
0000149D 810C 8206 8112 8106 8112+  	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dKick, $06, dKick, $12, dMidTom, $06
000014A9 820C 8306 8180             	dc.b	dSnare, $0C, dClap, $06, dKick, nRst
000014AF                            	smpsLoop            $00, $06, Credits_Loop04
000014AF F700 06                  M 	dc.b	$f7,$00,$06
000014B2                          M 	z80_ptr	credits_loop04
000014B2 0000                     M 	dc.w	(((credits_loop04)<<8)&$ff00)|(((credits_loop04)>>8)&$ff)|$80
000014B4 810C 8206 8112 8106 8106+  	dc.b	dKick, $0C, dSnare, $06, dKick, $12, dKick, $06, dKick, $06, dSnare, $06
000014C0 810C 0682 0C08 04          	dc.b	dKick, $0C, $06, dSnare, $0C, $08, $04
000014C7                            	smpsSetTempoMod     $CD
000014C7 EACD                     M 	dc.b	$ea,$cd
000014C9 8230 820C 8282 8208 04     	dc.b	dSnare, $30, dSnare, $0C, dSnare, dSnare, dSnare, $08, $04
000014D2                            	smpsCall            Credits_Call02
000014D2 F8                       M 	dc.b	$f8
000014D3                          M 	z80_ptr	credits_call02
000014D3 0000                     M 	dc.w	(((credits_call02)<<8)&$ff00)|(((credits_call02)>>8)&$ff)|$80
000014D5                            	smpsCall            Credits_Call02
000014D5 F8                       M 	dc.b	$f8
000014D6                          M 	z80_ptr	credits_call02
000014D6 0000                     M 	dc.w	(((credits_call02)<<8)&$ff00)|(((credits_call02)>>8)&$ff)|$80
000014D8 8108 0C04 820C 8108 0482+  	dc.b	dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $04, dSnare, $08, $04
000014E4 0804 0404 0408 04          	dc.b	$08, $04, $04, $04, $04, $08, $04
000014EB                            	smpsSetTempoMod     $C5
000014EB EAC5                     M 	dc.b	$ea,$c5
000014ED                            
000014ED                            Credits_Loop05:
000014ED 8109 8103 0C82 8181 1882   	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $18, dSnare
000014F7                            	smpsLoop            $00, $03, Credits_Loop05
000014F7 F700 03                  M 	dc.b	$f7,$00,$03
000014FA                          M 	z80_ptr	credits_loop05
000014FA 0000                     M 	dc.w	(((credits_loop05)<<8)&$ff00)|(((credits_loop05)>>8)&$ff)|$80
000014FC 8109 8103 0C82 8181 1882+  	dc.b	dKick, $09, dKick, $03, $0C, dSnare, dKick, dKick, $18, dSnare, $0C, $06
00001508 0681 0C82 0682 8282 8D0C+  	dc.b	$06, dKick, $0C, dSnare, $06, dSnare, dSnare, dSnare, dLowTom, $0C, dSnare, $0C
00001514 0C0C 0606                  	dc.b	$0C, $0C, $06, $06
00001518                            
00001518                            Credits_Loop06:
00001518 810C 8182 8081 8182 83     	dc.b	dKick, $0C, dKick, dSnare, nRst, dKick, dKick, dSnare, dClap
00001521                            	smpsLoop            $00, $03, Credits_Loop06
00001521 F700 03                  M 	dc.b	$f7,$00,$03
00001524                          M 	z80_ptr	credits_loop06
00001524 0000                     M 	dc.w	(((credits_loop06)<<8)&$ff00)|(((credits_loop06)>>8)&$ff)|$80
00001526 8182 8282 8206 0606 060C+  	dc.b	dKick, dSnare, dSnare, dSnare, dSnare, $06, $06, $06, $06, $0C, $06, $06
00001532 8106 8182 8281 8281 8182+  	dc.b	dKick, $06, dKick, dSnare, dSnare, dKick, dSnare, dKick, dKick, dSnare, $02, dSnare
0000153E 0481 0C06 820C 0606 8118+  	dc.b	$04, dKick, $0C, $06, dSnare, $0C, $06, $06, dKick, $18, dSnare, $0C
0000154A 8181 1882 8106 8112 820C+  	dc.b	dKick, dKick, $18, dSnare, dKick, $06, dKick, $12, dSnare, $0C, dKick, dKick
00001556 1882 8118 820C 8181 1882+  	dc.b	$18, dSnare, dKick, $18, dSnare, $0C, dKick, dKick, $18, dSnare, dKick, $06
00001562 8112 820C 0C06 0606 060C+  	dc.b	dKick, $12, dSnare, $0C, $0C, $06, $06, $06, $06, $0C, $06, $06
0000156E 8202 0481 0C06 0C82 0204+  	dc.b	dSnare, $02, $04, dKick, $0C, $06, $0C, dSnare, $02, $04, dKick, $0C
0000157A 060C 8206 8282 82          	dc.b	$06, $0C, dSnare, $06, dSnare, dSnare, dSnare
00001581                            	smpsSetTempoMod     $C0
00001581 EAC0                     M 	dc.b	$ea,$c0
00001583 810C 8281 8281 8281 0882+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, dSnare, dKick, $08, dSnare, $04, $0C
0000158F                            
0000158F                            Credits_Loop07:
0000158F 810C 82                    	dc.b	dKick, $0C, dSnare
00001592                            	smpsLoop            $00, $0F, Credits_Loop07
00001592 F700 0F                  M 	dc.b	$f7,$00,$0f
00001595                          M 	z80_ptr	credits_loop07
00001595 0000                     M 	dc.w	(((credits_loop07)<<8)&$ff00)|(((credits_loop07)>>8)&$ff)|$80
00001597 8108 8204 0C               	dc.b	dKick, $08, dSnare, $04, $0C
0000159C                            
0000159C                            Credits_Loop08:
0000159C 810C 82                    	dc.b	dKick, $0C, dSnare
0000159F                            	smpsLoop            $00, $13, Credits_Loop08
0000159F F700 13                  M 	dc.b	$f7,$00,$13
000015A2                          M 	z80_ptr	credits_loop08
000015A2 0000                     M 	dc.w	(((credits_loop08)<<8)&$ff00)|(((credits_loop08)>>8)&$ff)|$80
000015A4 8208 0C04 810C 8281 8281+  	dc.b	dSnare, $08, $0C, $04, dKick, $0C, dSnare, dKick, dSnare, dKick, $0C, dSnare
000015B0 8106 8002 8282 8209 8203   	dc.b	dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare, $03
000015BA                            
000015BA                            Credits_Loop09:
000015BA 810C 82                    	dc.b	dKick, $0C, dSnare
000015BD                            	smpsLoop            $00, $06, Credits_Loop09
000015BD F700 06                  M 	dc.b	$f7,$00,$06
000015C0                          M 	z80_ptr	credits_loop09
000015C0 0000                     M 	dc.w	(((credits_loop09)<<8)&$ff00)|(((credits_loop09)>>8)&$ff)|$80
000015C2 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000015CE 03                         	dc.b	$03
000015CF                            	smpsLoop            $01, $03, Credits_Loop09
000015CF F701 03                  M 	dc.b	$f7,$01,$03
000015D2                          M 	z80_ptr	credits_loop09
000015D2 0000                     M 	dc.w	(((credits_loop09)<<8)&$ff00)|(((credits_loop09)>>8)&$ff)|$80
000015D4 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000015E0                            	smpsStop
000015E0 F2                       M 	dc.b	$f2
000015E1                            
000015E1                            Credits_Call00:
000015E1 810C 8D82 8181 8E82 8404+  	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dScratch, $04, $06, $02
000015ED 810C 8D82 8181 8E82 83     	dc.b	dKick, $0C, dLowTom, dSnare, dKick, dKick, dFloorTom, dSnare, dClap
000015F6                            	smpsReturn
000015F6 E3                       M 	dc.b	$e3
000015F7                            
000015F7                            Credits_Call01:
000015F7 8118 820C 8118 0C82 8181+  	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, dKick, dKick, $18, dSnare
00001603 0C81 1281 8218 8182 0C81+  	dc.b	$0C, dKick, $12, dKick, dSnare, $18, dKick, dSnare, $0C, dKick, $18, $0C
0000160F 8281                       	dc.b	dSnare, dKick
00001611                            	smpsReturn
00001611 E3                       M 	dc.b	$e3
00001612                            
00001612                            Credits_Call02:
00001612 8108 0C04 820C 8108 0C82+  	dc.b	dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C, dSnare, $04, dKick
0000161E 0C82 8181 080C 0482 0C81+  	dc.b	$0C, dSnare, dKick, dKick, $08, $0C, $04, dSnare, $0C, dKick, $08, $0C
0000162A 8204 810C 8282 0804        	dc.b	dSnare, $04, dKick, $0C, dSnare, dSnare, $08, $04
00001632                            	smpsReturn
00001632 E3                       M 	dc.b	$e3
00001633                            
00001633                            ; Unused
00001633                            ;Credits_CallUnk:
00001633 8106 8003 8181 0682 8106+  	dc.b	dKick, $06, nRst, $03, dKick, dKick, $06, dSnare, dKick, $06, nRst, $03
0000163F 8181 0682 0382 8106 8003+  	dc.b	dKick, dKick, $06, dSnare, $03, dSnare, dKick, $06, nRst, $03, dKick, dKick
0000164B 0682                       	dc.b	$06, dSnare
0000164D                            	smpsReturn
0000164D E3                       M 	dc.b	$e3
0000164E                            
0000164E                            Credits_Voices:
0000164E                            ;	Voice $00
0000164E                            ;	$3A
0000164E                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0000164E                            ;	$00, $00, $00, $01, 	$1F, $FF, $1F, $0F, 	$17, $28, $27, $80
0000164E                            	smpsVcAlgorithm     $02
0000164E =00000002                M vcalgorithm	=	$02
0000164E                            	smpsVcFeedback      $07
0000164E =00000007                M vcfeedback	=	$07
0000164E                            	smpsVcUnusedBits    $00
0000164E =00000000                M vcunusedbits	=	$00
0000164E =00000000                M vcd1r1unk	=	0
0000164E =00000000                M vcd1r2unk	=	0
0000164E =00000000                M vcd1r3unk	=	0
0000164E =00000000                M vcd1r4unk	=	0
0000164E                            	smpsVcDetune        $00, $00, $00, $00
0000164E =00000000                M vcdt1	=	$00
0000164E =00000000                M vcdt2	=	$00
0000164E =00000000                M vcdt3	=	$00
0000164E =00000000                M vcdt4	=	$00
0000164E                            	smpsVcCoarseFreq    $01, $01, $07, $01
0000164E =00000001                M vccf1	=	$01
0000164E =00000001                M vccf2	=	$01
0000164E =00000007                M vccf3	=	$07
0000164E =00000001                M vccf4	=	$01
0000164E                            	smpsVcRateScale     $01, $02, $02, $02
0000164E =00000001                M vcrs1	=	$01
0000164E =00000002                M vcrs2	=	$02
0000164E =00000002                M vcrs3	=	$02
0000164E =00000002                M vcrs4	=	$02
0000164E                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0000164E =00000013                M vcar1	=	$13
0000164E =0000000D                M vcar2	=	$0d
0000164E =0000000E                M vcar3	=	$0e
0000164E =0000000E                M vcar4	=	$0e
0000164E                            	smpsVcAmpMod        $00, $00, $00, $00
0000164E =00000000                M vcam1	=	$00
0000164E =00000000                M vcam2	=	$00
0000164E =00000000                M vcam3	=	$00
0000164E =00000000                M vcam4	=	$00
0000164E                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0000164E =00000003                M vcd1r1	=	$03
0000164E =0000000E                M vcd1r2	=	$0e
0000164E =0000000E                M vcd1r3	=	$0e
0000164E =0000000E                M vcd1r4	=	$0e
0000164E                            	smpsVcDecayRate2    $01, $00, $00, $00
0000164E =00000001                M vcd2r1	=	$01
0000164E =00000000                M vcd2r2	=	$00
0000164E =00000000                M vcd2r3	=	$00
0000164E =00000000                M vcd2r4	=	$00
0000164E                            	smpsVcDecayLevel    $00, $01, $0F, $01
0000164E =00000000                M vcdl1	=	$00
0000164E =00000001                M vcdl2	=	$01
0000164E =0000000F                M vcdl3	=	$0f
0000164E =00000001                M vcdl4	=	$01
0000164E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000164E =0000000F                M vcrr1	=	$0f
0000164E =0000000F                M vcrr2	=	$0f
0000164E =0000000F                M vcrr3	=	$0f
0000164E =0000000F                M vcrr4	=	$0f
0000164E                            	smpsVcTotalLevel    $80, $27, $28, $17
0000164E =00000080                M vctl1	=	$80
0000164E =00000027                M vctl2	=	$27
0000164E =00000028                M vctl3	=	$28
0000164E =00000017                M vctl4	=	$17
0000164E 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000164F =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000164F =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000164F =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000164F =00000080                M vctlmask1	=	$80
0000164F 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001653 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001657 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000165B 0000 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000165F 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001663 1727 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001667                            
00001667                            ;	Voice $01
00001667                            ;	$08
00001667                            ;	$09, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00001667                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$25, $30, $0E, $84
00001667                            	smpsVcAlgorithm     $00
00001667 =00000000                M vcalgorithm	=	$00
00001667                            	smpsVcFeedback      $01
00001667 =00000001                M vcfeedback	=	$01
00001667                            	smpsVcUnusedBits    $00
00001667 =00000000                M vcunusedbits	=	$00
00001667 =00000000                M vcd1r1unk	=	0
00001667 =00000000                M vcd1r2unk	=	0
00001667 =00000000                M vcd1r3unk	=	0
00001667 =00000000                M vcd1r4unk	=	0
00001667                            	smpsVcDetune        $00, $03, $07, $00
00001667 =00000000                M vcdt1	=	$00
00001667 =00000003                M vcdt2	=	$03
00001667 =00000007                M vcdt3	=	$07
00001667 =00000000                M vcdt4	=	$00
00001667                            	smpsVcCoarseFreq    $00, $00, $00, $09
00001667 =00000000                M vccf1	=	$00
00001667 =00000000                M vccf2	=	$00
00001667 =00000000                M vccf3	=	$00
00001667 =00000009                M vccf4	=	$09
00001667                            	smpsVcRateScale     $01, $01, $00, $00
00001667 =00000001                M vcrs1	=	$01
00001667 =00000001                M vcrs2	=	$01
00001667 =00000000                M vcrs3	=	$00
00001667 =00000000                M vcrs4	=	$00
00001667                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00001667 =0000001F                M vcar1	=	$1f
00001667 =0000001F                M vcar2	=	$1f
00001667 =0000001F                M vcar3	=	$1f
00001667 =0000001F                M vcar4	=	$1f
00001667                            	smpsVcAmpMod        $00, $00, $00, $00
00001667 =00000000                M vcam1	=	$00
00001667 =00000000                M vcam2	=	$00
00001667 =00000000                M vcam3	=	$00
00001667 =00000000                M vcam4	=	$00
00001667                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00001667 =0000000A                M vcd1r1	=	$0a
00001667 =0000000A                M vcd1r2	=	$0a
00001667 =0000000E                M vcd1r3	=	$0e
00001667 =00000012                M vcd1r4	=	$12
00001667                            	smpsVcDecayRate2    $03, $04, $04, $00
00001667 =00000003                M vcd2r1	=	$03
00001667 =00000004                M vcd2r2	=	$04
00001667 =00000004                M vcd2r3	=	$04
00001667 =00000000                M vcd2r4	=	$00
00001667                            	smpsVcDecayLevel    $02, $02, $02, $02
00001667 =00000002                M vcdl1	=	$02
00001667 =00000002                M vcdl2	=	$02
00001667 =00000002                M vcdl3	=	$02
00001667 =00000002                M vcdl4	=	$02
00001667                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001667 =0000000F                M vcrr1	=	$0f
00001667 =0000000F                M vcrr2	=	$0f
00001667 =0000000F                M vcrr3	=	$0f
00001667 =0000000F                M vcrr4	=	$0f
00001667                            	smpsVcTotalLevel    $84, $0E, $30, $25
00001667 =00000084                M vctl1	=	$84
00001667 =0000000E                M vctl2	=	$0e
00001667 =00000030                M vctl3	=	$30
00001667 =00000025                M vctl4	=	$25
00001667 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001668 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001668 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001668 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001668 =00000080                M vctlmask1	=	$80
00001668 0930 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000166C 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001670 120A 0E0A                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001674 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001678 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000167C 250E 3084                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001680                            
00001680                            ;	Voice $02
00001680                            ;	$3C
00001680                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
00001680                            ;	$04, $00, $04, $00, 	$10, $0B, $10, $0D, 	$19, $80, $0B, $80
00001680                            	smpsVcAlgorithm     $04
00001680 =00000004                M vcalgorithm	=	$04
00001680                            	smpsVcFeedback      $07
00001680 =00000007                M vcfeedback	=	$07
00001680                            	smpsVcUnusedBits    $00
00001680 =00000000                M vcunusedbits	=	$00
00001680 =00000000                M vcd1r1unk	=	0
00001680 =00000000                M vcd1r2unk	=	0
00001680 =00000000                M vcd1r3unk	=	0
00001680 =00000000                M vcd1r4unk	=	0
00001680                            	smpsVcDetune        $03, $05, $05, $03
00001680 =00000003                M vcdt1	=	$03
00001680 =00000005                M vcdt2	=	$05
00001680 =00000005                M vcdt3	=	$05
00001680 =00000003                M vcdt4	=	$03
00001680                            	smpsVcCoarseFreq    $00, $00, $02, $01
00001680 =00000000                M vccf1	=	$00
00001680 =00000000                M vccf2	=	$00
00001680 =00000002                M vccf3	=	$02
00001680 =00000001                M vccf4	=	$01
00001680                            	smpsVcRateScale     $01, $01, $01, $01
00001680 =00000001                M vcrs1	=	$01
00001680 =00000001                M vcrs2	=	$01
00001680 =00000001                M vcrs3	=	$01
00001680 =00000001                M vcrs4	=	$01
00001680                            	smpsVcAttackRate    $13, $12, $13, $12
00001680 =00000013                M vcar1	=	$13
00001680 =00000012                M vcar2	=	$12
00001680 =00000013                M vcar3	=	$13
00001680 =00000012                M vcar4	=	$12
00001680                            	smpsVcAmpMod        $00, $00, $00, $00
00001680 =00000000                M vcam1	=	$00
00001680 =00000000                M vcam2	=	$00
00001680 =00000000                M vcam3	=	$00
00001680 =00000000                M vcam4	=	$00
00001680                            	smpsVcDecayRate1    $00, $08, $00, $08
00001680 =00000000                M vcd1r1	=	$00
00001680 =00000008                M vcd1r2	=	$08
00001680 =00000000                M vcd1r3	=	$00
00001680 =00000008                M vcd1r4	=	$08
00001680                            	smpsVcDecayRate2    $00, $04, $00, $04
00001680 =00000000                M vcd2r1	=	$00
00001680 =00000004                M vcd2r2	=	$04
00001680 =00000000                M vcd2r3	=	$00
00001680 =00000004                M vcd2r4	=	$04
00001680                            	smpsVcDecayLevel    $00, $01, $00, $01
00001680 =00000000                M vcdl1	=	$00
00001680 =00000001                M vcdl2	=	$01
00001680 =00000000                M vcdl3	=	$00
00001680 =00000001                M vcdl4	=	$01
00001680                            	smpsVcReleaseRate   $0D, $00, $0B, $00
00001680 =0000000D                M vcrr1	=	$0d
00001680 =00000000                M vcrr2	=	$00
00001680 =0000000B                M vcrr3	=	$0b
00001680 =00000000                M vcrr4	=	$00
00001680                            	smpsVcTotalLevel    $80, $0B, $80, $19
00001680 =00000080                M vctl1	=	$80
00001680 =0000000B                M vctl2	=	$0b
00001680 =00000080                M vctl3	=	$80
00001680 =00000019                M vctl4	=	$19
00001680 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001681 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001681 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001681 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001681 =00000080                M vctlmask1	=	$80
00001681 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001685 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001689 0808 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000168D 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001691 1010 0B0D                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001695 190B 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001699                            
00001699                            ;	Voice $03
00001699                            ;	$08
00001699                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00001699                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
00001699                            	smpsVcAlgorithm     $00
00001699 =00000000                M vcalgorithm	=	$00
00001699                            	smpsVcFeedback      $01
00001699 =00000001                M vcfeedback	=	$01
00001699                            	smpsVcUnusedBits    $00
00001699 =00000000                M vcunusedbits	=	$00
00001699 =00000000                M vcd1r1unk	=	0
00001699 =00000000                M vcd1r2unk	=	0
00001699 =00000000                M vcd1r3unk	=	0
00001699 =00000000                M vcd1r4unk	=	0
00001699                            	smpsVcDetune        $00, $03, $07, $00
00001699 =00000000                M vcdt1	=	$00
00001699 =00000003                M vcdt2	=	$03
00001699 =00000007                M vcdt3	=	$07
00001699 =00000000                M vcdt4	=	$00
00001699                            	smpsVcCoarseFreq    $00, $00, $00, $0A
00001699 =00000000                M vccf1	=	$00
00001699 =00000000                M vccf2	=	$00
00001699 =00000000                M vccf3	=	$00
00001699 =0000000A                M vccf4	=	$0a
00001699                            	smpsVcRateScale     $01, $01, $00, $00
00001699 =00000001                M vcrs1	=	$01
00001699 =00000001                M vcrs2	=	$01
00001699 =00000000                M vcrs3	=	$00
00001699 =00000000                M vcrs4	=	$00
00001699                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00001699 =0000001F                M vcar1	=	$1f
00001699 =0000001F                M vcar2	=	$1f
00001699 =0000001F                M vcar3	=	$1f
00001699 =0000001F                M vcar4	=	$1f
00001699                            	smpsVcAmpMod        $00, $00, $00, $00
00001699 =00000000                M vcam1	=	$00
00001699 =00000000                M vcam2	=	$00
00001699 =00000000                M vcam3	=	$00
00001699 =00000000                M vcam4	=	$00
00001699                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00001699 =0000000A                M vcd1r1	=	$0a
00001699 =0000000A                M vcd1r2	=	$0a
00001699 =0000000E                M vcd1r3	=	$0e
00001699 =00000012                M vcd1r4	=	$12
00001699                            	smpsVcDecayRate2    $03, $04, $04, $00
00001699 =00000003                M vcd2r1	=	$03
00001699 =00000004                M vcd2r2	=	$04
00001699 =00000004                M vcd2r3	=	$04
00001699 =00000000                M vcd2r4	=	$00
00001699                            	smpsVcDecayLevel    $02, $02, $02, $02
00001699 =00000002                M vcdl1	=	$02
00001699 =00000002                M vcdl2	=	$02
00001699 =00000002                M vcdl3	=	$02
00001699 =00000002                M vcdl4	=	$02
00001699                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001699 =0000000F                M vcrr1	=	$0f
00001699 =0000000F                M vcrr2	=	$0f
00001699 =0000000F                M vcrr3	=	$0f
00001699 =0000000F                M vcrr4	=	$0f
00001699                            	smpsVcTotalLevel    $80, $13, $2D, $24
00001699 =00000080                M vctl1	=	$80
00001699 =00000013                M vctl2	=	$13
00001699 =0000002D                M vctl3	=	$2d
00001699 =00000024                M vctl4	=	$24
00001699 08                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000169A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000169A =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000169A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000169A =00000080                M vctlmask1	=	$80
0000169A 0A30 7000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000169E 1F5F 1F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000016A2 120A 0E0A                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000016A6 0004 0403                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000016AA 2F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000016AE 2413 2D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000016B2                            
000016B2                            ;	Voice $04
000016B2                            ;	$3D
000016B2                            ;	$01, $21, $51, $01, 	$12, $14, $14, $0F, 	$0A, $05, $05, $05
000016B2                            ;	$00, $00, $00, $00, 	$2B, $2B, $2B, $1B, 	$19, $80, $80, $80
000016B2                            	smpsVcAlgorithm     $05
000016B2 =00000005                M vcalgorithm	=	$05
000016B2                            	smpsVcFeedback      $07
000016B2 =00000007                M vcfeedback	=	$07
000016B2                            	smpsVcUnusedBits    $00
000016B2 =00000000                M vcunusedbits	=	$00
000016B2 =00000000                M vcd1r1unk	=	0
000016B2 =00000000                M vcd1r2unk	=	0
000016B2 =00000000                M vcd1r3unk	=	0
000016B2 =00000000                M vcd1r4unk	=	0
000016B2                            	smpsVcDetune        $00, $05, $02, $00
000016B2 =00000000                M vcdt1	=	$00
000016B2 =00000005                M vcdt2	=	$05
000016B2 =00000002                M vcdt3	=	$02
000016B2 =00000000                M vcdt4	=	$00
000016B2                            	smpsVcCoarseFreq    $01, $01, $01, $01
000016B2 =00000001                M vccf1	=	$01
000016B2 =00000001                M vccf2	=	$01
000016B2 =00000001                M vccf3	=	$01
000016B2 =00000001                M vccf4	=	$01
000016B2                            	smpsVcRateScale     $00, $00, $00, $00
000016B2 =00000000                M vcrs1	=	$00
000016B2 =00000000                M vcrs2	=	$00
000016B2 =00000000                M vcrs3	=	$00
000016B2 =00000000                M vcrs4	=	$00
000016B2                            	smpsVcAttackRate    $0F, $14, $14, $12
000016B2 =0000000F                M vcar1	=	$0f
000016B2 =00000014                M vcar2	=	$14
000016B2 =00000014                M vcar3	=	$14
000016B2 =00000012                M vcar4	=	$12
000016B2                            	smpsVcAmpMod        $00, $00, $00, $00
000016B2 =00000000                M vcam1	=	$00
000016B2 =00000000                M vcam2	=	$00
000016B2 =00000000                M vcam3	=	$00
000016B2 =00000000                M vcam4	=	$00
000016B2                            	smpsVcDecayRate1    $05, $05, $05, $0A
000016B2 =00000005                M vcd1r1	=	$05
000016B2 =00000005                M vcd1r2	=	$05
000016B2 =00000005                M vcd1r3	=	$05
000016B2 =0000000A                M vcd1r4	=	$0a
000016B2                            	smpsVcDecayRate2    $00, $00, $00, $00
000016B2 =00000000                M vcd2r1	=	$00
000016B2 =00000000                M vcd2r2	=	$00
000016B2 =00000000                M vcd2r3	=	$00
000016B2 =00000000                M vcd2r4	=	$00
000016B2                            	smpsVcDecayLevel    $01, $02, $02, $02
000016B2 =00000001                M vcdl1	=	$01
000016B2 =00000002                M vcdl2	=	$02
000016B2 =00000002                M vcdl3	=	$02
000016B2 =00000002                M vcdl4	=	$02
000016B2                            	smpsVcReleaseRate   $0B, $0B, $0B, $0B
000016B2 =0000000B                M vcrr1	=	$0b
000016B2 =0000000B                M vcrr2	=	$0b
000016B2 =0000000B                M vcrr3	=	$0b
000016B2 =0000000B                M vcrr4	=	$0b
000016B2                            	smpsVcTotalLevel    $80, $80, $80, $19
000016B2 =00000080                M vctl1	=	$80
000016B2 =00000080                M vctl2	=	$80
000016B2 =00000080                M vctl3	=	$80
000016B2 =00000019                M vctl4	=	$19
000016B2 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000016B3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000016B3 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000016B3 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000016B3 =00000080                M vctlmask1	=	$80
000016B3 0151 2101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000016B7 1214 140F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000016BB 0A05 0505                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000016BF 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000016C3 2B2B 2B1B                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000016C7 1980 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000016CB                            
000016CB                            ;	Voice $05
000016CB                            ;	$04
000016CB                            ;	$57, $02, $70, $50, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000016CB                            ;	$06, $0A, $00, $0A, 	$00, $0F, $00, $0F, 	$1A, $80, $10, $80
000016CB                            	smpsVcAlgorithm     $04
000016CB =00000004                M vcalgorithm	=	$04
000016CB                            	smpsVcFeedback      $00
000016CB =00000000                M vcfeedback	=	$00
000016CB                            	smpsVcUnusedBits    $00
000016CB =00000000                M vcunusedbits	=	$00
000016CB =00000000                M vcd1r1unk	=	0
000016CB =00000000                M vcd1r2unk	=	0
000016CB =00000000                M vcd1r3unk	=	0
000016CB =00000000                M vcd1r4unk	=	0
000016CB                            	smpsVcDetune        $05, $07, $00, $05
000016CB =00000005                M vcdt1	=	$05
000016CB =00000007                M vcdt2	=	$07
000016CB =00000000                M vcdt3	=	$00
000016CB =00000005                M vcdt4	=	$05
000016CB                            	smpsVcCoarseFreq    $00, $00, $02, $07
000016CB =00000000                M vccf1	=	$00
000016CB =00000000                M vccf2	=	$00
000016CB =00000002                M vccf3	=	$02
000016CB =00000007                M vccf4	=	$07
000016CB                            	smpsVcRateScale     $00, $00, $00, $00
000016CB =00000000                M vcrs1	=	$00
000016CB =00000000                M vcrs2	=	$00
000016CB =00000000                M vcrs3	=	$00
000016CB =00000000                M vcrs4	=	$00
000016CB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000016CB =0000001F                M vcar1	=	$1f
000016CB =0000001F                M vcar2	=	$1f
000016CB =0000001F                M vcar3	=	$1f
000016CB =0000001F                M vcar4	=	$1f
000016CB                            	smpsVcAmpMod        $00, $00, $00, $00
000016CB =00000000                M vcam1	=	$00
000016CB =00000000                M vcam2	=	$00
000016CB =00000000                M vcam3	=	$00
000016CB =00000000                M vcam4	=	$00
000016CB                            	smpsVcDecayRate1    $00, $00, $00, $00
000016CB =00000000                M vcd1r1	=	$00
000016CB =00000000                M vcd1r2	=	$00
000016CB =00000000                M vcd1r3	=	$00
000016CB =00000000                M vcd1r4	=	$00
000016CB                            	smpsVcDecayRate2    $0A, $00, $0A, $06
000016CB =0000000A                M vcd2r1	=	$0a
000016CB =00000000                M vcd2r2	=	$00
000016CB =0000000A                M vcd2r3	=	$0a
000016CB =00000006                M vcd2r4	=	$06
000016CB                            	smpsVcDecayLevel    $00, $00, $00, $00
000016CB =00000000                M vcdl1	=	$00
000016CB =00000000                M vcdl2	=	$00
000016CB =00000000                M vcdl3	=	$00
000016CB =00000000                M vcdl4	=	$00
000016CB                            	smpsVcReleaseRate   $0F, $00, $0F, $00
000016CB =0000000F                M vcrr1	=	$0f
000016CB =00000000                M vcrr2	=	$00
000016CB =0000000F                M vcrr3	=	$0f
000016CB =00000000                M vcrr4	=	$00
000016CB                            	smpsVcTotalLevel    $80, $10, $80, $1A
000016CB =00000080                M vctl1	=	$80
000016CB =00000010                M vctl2	=	$10
000016CB =00000080                M vctl3	=	$80
000016CB =0000001A                M vctl4	=	$1a
000016CB 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000016CC =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000016CC =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000016CC =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000016CC =00000080                M vctlmask1	=	$80
000016CC 5770 0250                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000016D0 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000016D4 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000016D8 0600 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000016DC 0000 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000016E0 1A10 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000016E4                            
000016E4                            ;	Voice $06
000016E4                            ;	$35
000016E4                            ;	$01, $01, $13, $00, 	$1F, $1D, $18, $19, 	$00, $09, $06, $0D
000016E4                            ;	$00, $00, $02, $03, 	$00, $06, $15, $16, 	$1E, $80, $83, $80
000016E4                            	smpsVcAlgorithm     $05
000016E4 =00000005                M vcalgorithm	=	$05
000016E4                            	smpsVcFeedback      $06
000016E4 =00000006                M vcfeedback	=	$06
000016E4                            	smpsVcUnusedBits    $00
000016E4 =00000000                M vcunusedbits	=	$00
000016E4 =00000000                M vcd1r1unk	=	0
000016E4 =00000000                M vcd1r2unk	=	0
000016E4 =00000000                M vcd1r3unk	=	0
000016E4 =00000000                M vcd1r4unk	=	0
000016E4                            	smpsVcDetune        $00, $01, $00, $00
000016E4 =00000000                M vcdt1	=	$00
000016E4 =00000001                M vcdt2	=	$01
000016E4 =00000000                M vcdt3	=	$00
000016E4 =00000000                M vcdt4	=	$00
000016E4                            	smpsVcCoarseFreq    $00, $03, $01, $01
000016E4 =00000000                M vccf1	=	$00
000016E4 =00000003                M vccf2	=	$03
000016E4 =00000001                M vccf3	=	$01
000016E4 =00000001                M vccf4	=	$01
000016E4                            	smpsVcRateScale     $00, $00, $00, $00
000016E4 =00000000                M vcrs1	=	$00
000016E4 =00000000                M vcrs2	=	$00
000016E4 =00000000                M vcrs3	=	$00
000016E4 =00000000                M vcrs4	=	$00
000016E4                            	smpsVcAttackRate    $19, $18, $1D, $1F
000016E4 =00000019                M vcar1	=	$19
000016E4 =00000018                M vcar2	=	$18
000016E4 =0000001D                M vcar3	=	$1d
000016E4 =0000001F                M vcar4	=	$1f
000016E4                            	smpsVcAmpMod        $00, $00, $00, $00
000016E4 =00000000                M vcam1	=	$00
000016E4 =00000000                M vcam2	=	$00
000016E4 =00000000                M vcam3	=	$00
000016E4 =00000000                M vcam4	=	$00
000016E4                            	smpsVcDecayRate1    $0D, $06, $09, $00
000016E4 =0000000D                M vcd1r1	=	$0d
000016E4 =00000006                M vcd1r2	=	$06
000016E4 =00000009                M vcd1r3	=	$09
000016E4 =00000000                M vcd1r4	=	$00
000016E4                            	smpsVcDecayRate2    $03, $02, $00, $00
000016E4 =00000003                M vcd2r1	=	$03
000016E4 =00000002                M vcd2r2	=	$02
000016E4 =00000000                M vcd2r3	=	$00
000016E4 =00000000                M vcd2r4	=	$00
000016E4                            	smpsVcDecayLevel    $01, $01, $00, $00
000016E4 =00000001                M vcdl1	=	$01
000016E4 =00000001                M vcdl2	=	$01
000016E4 =00000000                M vcdl3	=	$00
000016E4 =00000000                M vcdl4	=	$00
000016E4                            	smpsVcReleaseRate   $06, $05, $06, $00
000016E4 =00000006                M vcrr1	=	$06
000016E4 =00000005                M vcrr2	=	$05
000016E4 =00000006                M vcrr3	=	$06
000016E4 =00000000                M vcrr4	=	$00
000016E4                            	smpsVcTotalLevel    $80, $83, $80, $1E
000016E4 =00000080                M vctl1	=	$80
000016E4 =00000083                M vctl2	=	$83
000016E4 =00000080                M vctl3	=	$80
000016E4 =0000001E                M vctl4	=	$1e
000016E4 35                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000016E5 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000016E5 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000016E5 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000016E5 =00000080                M vctlmask1	=	$80
000016E5 0113 0100                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000016E9 1F18 1D19                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000016ED 0006 090D                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000016F1 0002 0003                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000016F5 0015 0616                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000016F9 1E83 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000016FD                            
000016FD                            ;	Voice $07
000016FD                            ;	$3C
000016FD                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000016FD                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $88, $16, $88
000016FD                            	smpsVcAlgorithm     $04
000016FD =00000004                M vcalgorithm	=	$04
000016FD                            	smpsVcFeedback      $07
000016FD =00000007                M vcfeedback	=	$07
000016FD                            	smpsVcUnusedBits    $00
000016FD =00000000                M vcunusedbits	=	$00
000016FD =00000000                M vcd1r1unk	=	0
000016FD =00000000                M vcd1r2unk	=	0
000016FD =00000000                M vcd1r3unk	=	0
000016FD =00000000                M vcd1r4unk	=	0
000016FD                            	smpsVcDetune        $03, $05, $05, $03
000016FD =00000003                M vcdt1	=	$03
000016FD =00000005                M vcdt2	=	$05
000016FD =00000005                M vcdt3	=	$05
000016FD =00000003                M vcdt4	=	$03
000016FD                            	smpsVcCoarseFreq    $00, $00, $02, $01
000016FD =00000000                M vccf1	=	$00
000016FD =00000000                M vccf2	=	$00
000016FD =00000002                M vccf3	=	$02
000016FD =00000001                M vccf4	=	$01
000016FD                            	smpsVcRateScale     $01, $01, $01, $01
000016FD =00000001                M vcrs1	=	$01
000016FD =00000001                M vcrs2	=	$01
000016FD =00000001                M vcrs3	=	$01
000016FD =00000001                M vcrs4	=	$01
000016FD                            	smpsVcAttackRate    $13, $12, $13, $12
000016FD =00000013                M vcar1	=	$13
000016FD =00000012                M vcar2	=	$12
000016FD =00000013                M vcar3	=	$13
000016FD =00000012                M vcar4	=	$12
000016FD                            	smpsVcAmpMod        $00, $00, $00, $00
000016FD =00000000                M vcam1	=	$00
000016FD =00000000                M vcam2	=	$00
000016FD =00000000                M vcam3	=	$00
000016FD =00000000                M vcam4	=	$00
000016FD                            	smpsVcDecayRate1    $00, $08, $00, $08
000016FD =00000000                M vcd1r1	=	$00
000016FD =00000008                M vcd1r2	=	$08
000016FD =00000000                M vcd1r3	=	$00
000016FD =00000008                M vcd1r4	=	$08
000016FD                            	smpsVcDecayRate2    $00, $04, $00, $04
000016FD =00000000                M vcd2r1	=	$00
000016FD =00000004                M vcd2r2	=	$04
000016FD =00000000                M vcd2r3	=	$00
000016FD =00000004                M vcd2r4	=	$04
000016FD                            	smpsVcDecayLevel    $00, $01, $00, $01
000016FD =00000000                M vcdl1	=	$00
000016FD =00000001                M vcdl2	=	$01
000016FD =00000000                M vcdl3	=	$00
000016FD =00000001                M vcdl4	=	$01
000016FD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000016FD =0000000F                M vcrr1	=	$0f
000016FD =0000000F                M vcrr2	=	$0f
000016FD =0000000F                M vcrr3	=	$0f
000016FD =0000000F                M vcrr4	=	$0f
000016FD                            	smpsVcTotalLevel    $88, $16, $88, $1A
000016FD =00000088                M vctl1	=	$88
000016FD =00000016                M vctl2	=	$16
000016FD =00000088                M vctl3	=	$88
000016FD =0000001A                M vctl4	=	$1a
000016FD 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000016FE =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000016FE =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000016FE =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000016FE =00000080                M vctlmask1	=	$80
000016FE 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001702 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001706 0808 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000170A 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000170E 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001712 1A16 8888                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001716                            
00001716                            ;	Voice $08
00001716                            ;	$20
00001716                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
00001716                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$14, $37, $0F, $80
00001716                            	smpsVcAlgorithm     $00
00001716 =00000000                M vcalgorithm	=	$00
00001716                            	smpsVcFeedback      $04
00001716 =00000004                M vcfeedback	=	$04
00001716                            	smpsVcUnusedBits    $00
00001716 =00000000                M vcunusedbits	=	$00
00001716 =00000000                M vcd1r1unk	=	0
00001716 =00000000                M vcd1r2unk	=	0
00001716 =00000000                M vcd1r3unk	=	0
00001716 =00000000                M vcd1r4unk	=	0
00001716                            	smpsVcDetune        $03, $03, $03, $03
00001716 =00000003                M vcdt1	=	$03
00001716 =00000003                M vcdt2	=	$03
00001716 =00000003                M vcdt3	=	$03
00001716 =00000003                M vcdt4	=	$03
00001716                            	smpsVcCoarseFreq    $01, $00, $05, $06
00001716 =00000001                M vccf1	=	$01
00001716 =00000000                M vccf2	=	$00
00001716 =00000005                M vccf3	=	$05
00001716 =00000006                M vccf4	=	$06
00001716                            	smpsVcRateScale     $02, $02, $03, $03
00001716 =00000002                M vcrs1	=	$02
00001716 =00000002                M vcrs2	=	$02
00001716 =00000003                M vcrs3	=	$03
00001716 =00000003                M vcrs4	=	$03
00001716                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00001716 =0000001F                M vcar1	=	$1f
00001716 =0000001F                M vcar2	=	$1f
00001716 =0000001F                M vcar3	=	$1f
00001716 =0000001F                M vcar4	=	$1f
00001716                            	smpsVcAmpMod        $00, $00, $00, $00
00001716 =00000000                M vcam1	=	$00
00001716 =00000000                M vcam2	=	$00
00001716 =00000000                M vcam3	=	$00
00001716 =00000000                M vcam4	=	$00
00001716                            	smpsVcDecayRate1    $06, $09, $06, $07
00001716 =00000006                M vcd1r1	=	$06
00001716 =00000009                M vcd1r2	=	$09
00001716 =00000006                M vcd1r3	=	$06
00001716 =00000007                M vcd1r4	=	$07
00001716                            	smpsVcDecayRate2    $08, $06, $06, $07
00001716 =00000008                M vcd2r1	=	$08
00001716 =00000006                M vcd2r2	=	$06
00001716 =00000006                M vcd2r3	=	$06
00001716 =00000007                M vcd2r4	=	$07
00001716                            	smpsVcDecayLevel    $0F, $01, $01, $02
00001716 =0000000F                M vcdl1	=	$0f
00001716 =00000001                M vcdl2	=	$01
00001716 =00000001                M vcdl3	=	$01
00001716 =00000002                M vcdl4	=	$02
00001716                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001716 =0000000F                M vcrr1	=	$0f
00001716 =0000000F                M vcrr2	=	$0f
00001716 =0000000F                M vcrr3	=	$0f
00001716 =0000000F                M vcrr4	=	$0f
00001716                            	smpsVcTotalLevel    $80, $0F, $37, $14
00001716 =00000080                M vctl1	=	$80
00001716 =0000000F                M vctl2	=	$0f
00001716 =00000037                M vctl3	=	$37
00001716 =00000014                M vctl4	=	$14
00001716 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001717 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001717 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001717 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001717 =00000080                M vctlmask1	=	$80
00001717 3630 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000171B DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000171F 0709 0606                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001723 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001727 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000172B 140F 3780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000172F                            
0000172F                            ;	Voice $09
0000172F                            ;	$3B
0000172F                            ;	$0F, $06, $01, $02, 	$DF, $1F, $1F, $DF, 	$0C, $00, $0A, $03
0000172F                            ;	$0F, $00, $00, $01, 	$F3, $05, $55, $5C, 	$22, $20, $22, $80
0000172F                            	smpsVcAlgorithm     $03
0000172F =00000003                M vcalgorithm	=	$03
0000172F                            	smpsVcFeedback      $07
0000172F =00000007                M vcfeedback	=	$07
0000172F                            	smpsVcUnusedBits    $00
0000172F =00000000                M vcunusedbits	=	$00
0000172F =00000000                M vcd1r1unk	=	0
0000172F =00000000                M vcd1r2unk	=	0
0000172F =00000000                M vcd1r3unk	=	0
0000172F =00000000                M vcd1r4unk	=	0
0000172F                            	smpsVcDetune        $00, $00, $00, $00
0000172F =00000000                M vcdt1	=	$00
0000172F =00000000                M vcdt2	=	$00
0000172F =00000000                M vcdt3	=	$00
0000172F =00000000                M vcdt4	=	$00
0000172F                            	smpsVcCoarseFreq    $02, $01, $06, $0F
0000172F =00000002                M vccf1	=	$02
0000172F =00000001                M vccf2	=	$01
0000172F =00000006                M vccf3	=	$06
0000172F =0000000F                M vccf4	=	$0f
0000172F                            	smpsVcRateScale     $03, $00, $00, $03
0000172F =00000003                M vcrs1	=	$03
0000172F =00000000                M vcrs2	=	$00
0000172F =00000000                M vcrs3	=	$00
0000172F =00000003                M vcrs4	=	$03
0000172F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000172F =0000001F                M vcar1	=	$1f
0000172F =0000001F                M vcar2	=	$1f
0000172F =0000001F                M vcar3	=	$1f
0000172F =0000001F                M vcar4	=	$1f
0000172F                            	smpsVcAmpMod        $00, $00, $00, $00
0000172F =00000000                M vcam1	=	$00
0000172F =00000000                M vcam2	=	$00
0000172F =00000000                M vcam3	=	$00
0000172F =00000000                M vcam4	=	$00
0000172F                            	smpsVcDecayRate1    $03, $0A, $00, $0C
0000172F =00000003                M vcd1r1	=	$03
0000172F =0000000A                M vcd1r2	=	$0a
0000172F =00000000                M vcd1r3	=	$00
0000172F =0000000C                M vcd1r4	=	$0c
0000172F                            	smpsVcDecayRate2    $01, $00, $00, $0F
0000172F =00000001                M vcd2r1	=	$01
0000172F =00000000                M vcd2r2	=	$00
0000172F =00000000                M vcd2r3	=	$00
0000172F =0000000F                M vcd2r4	=	$0f
0000172F                            	smpsVcDecayLevel    $05, $05, $00, $0F
0000172F =00000005                M vcdl1	=	$05
0000172F =00000005                M vcdl2	=	$05
0000172F =00000000                M vcdl3	=	$00
0000172F =0000000F                M vcdl4	=	$0f
0000172F                            	smpsVcReleaseRate   $0C, $05, $05, $03
0000172F =0000000C                M vcrr1	=	$0c
0000172F =00000005                M vcrr2	=	$05
0000172F =00000005                M vcrr3	=	$05
0000172F =00000003                M vcrr4	=	$03
0000172F                            	smpsVcTotalLevel    $80, $22, $20, $22
0000172F =00000080                M vctl1	=	$80
0000172F =00000022                M vctl2	=	$22
0000172F =00000020                M vctl3	=	$20
0000172F =00000022                M vctl4	=	$22
0000172F 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001730 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001730 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001730 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001730 =00000080                M vctlmask1	=	$80
00001730 0F01 0602                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001734 DF1F 1FDF                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001738 0C0A 0003                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000173C 0F00 0001                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001740 F355 055C                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001744 2222 2080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001748                            
00001748                            ;	Voice $0A
00001748                            ;	$3C
00001748                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
00001748                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1C, $84, $14, $80
00001748                            	smpsVcAlgorithm     $04
00001748 =00000004                M vcalgorithm	=	$04
00001748                            	smpsVcFeedback      $07
00001748 =00000007                M vcfeedback	=	$07
00001748                            	smpsVcUnusedBits    $00
00001748 =00000000                M vcunusedbits	=	$00
00001748 =00000000                M vcd1r1unk	=	0
00001748 =00000000                M vcd1r2unk	=	0
00001748 =00000000                M vcd1r3unk	=	0
00001748 =00000000                M vcd1r4unk	=	0
00001748                            	smpsVcDetune        $03, $05, $05, $03
00001748 =00000003                M vcdt1	=	$03
00001748 =00000005                M vcdt2	=	$05
00001748 =00000005                M vcdt3	=	$05
00001748 =00000003                M vcdt4	=	$03
00001748                            	smpsVcCoarseFreq    $00, $00, $02, $01
00001748 =00000000                M vccf1	=	$00
00001748 =00000000                M vccf2	=	$00
00001748 =00000002                M vccf3	=	$02
00001748 =00000001                M vccf4	=	$01
00001748                            	smpsVcRateScale     $01, $01, $01, $01
00001748 =00000001                M vcrs1	=	$01
00001748 =00000001                M vcrs2	=	$01
00001748 =00000001                M vcrs3	=	$01
00001748 =00000001                M vcrs4	=	$01
00001748                            	smpsVcAttackRate    $13, $12, $13, $12
00001748 =00000013                M vcar1	=	$13
00001748 =00000012                M vcar2	=	$12
00001748 =00000013                M vcar3	=	$13
00001748 =00000012                M vcar4	=	$12
00001748                            	smpsVcAmpMod        $00, $00, $00, $00
00001748 =00000000                M vcam1	=	$00
00001748 =00000000                M vcam2	=	$00
00001748 =00000000                M vcam3	=	$00
00001748 =00000000                M vcam4	=	$00
00001748                            	smpsVcDecayRate1    $00, $08, $00, $08
00001748 =00000000                M vcd1r1	=	$00
00001748 =00000008                M vcd1r2	=	$08
00001748 =00000000                M vcd1r3	=	$00
00001748 =00000008                M vcd1r4	=	$08
00001748                            	smpsVcDecayRate2    $00, $04, $00, $04
00001748 =00000000                M vcd2r1	=	$00
00001748 =00000004                M vcd2r2	=	$04
00001748 =00000000                M vcd2r3	=	$00
00001748 =00000004                M vcd2r4	=	$04
00001748                            	smpsVcDecayLevel    $00, $01, $00, $01
00001748 =00000000                M vcdl1	=	$00
00001748 =00000001                M vcdl2	=	$01
00001748 =00000000                M vcdl3	=	$00
00001748 =00000001                M vcdl4	=	$01
00001748                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001748 =0000000F                M vcrr1	=	$0f
00001748 =0000000F                M vcrr2	=	$0f
00001748 =0000000F                M vcrr3	=	$0f
00001748 =0000000F                M vcrr4	=	$0f
00001748                            	smpsVcTotalLevel    $80, $14, $84, $1C
00001748 =00000080                M vctl1	=	$80
00001748 =00000014                M vctl2	=	$14
00001748 =00000084                M vctl3	=	$84
00001748 =0000001C                M vctl4	=	$1c
00001748 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001749 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001749 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001749 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001749 =00000080                M vctlmask1	=	$80
00001749 3150 5230                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000174D 5252 5353                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001751 0808 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001755 0404 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001759 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000175D 1C14 8480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001761                            
00001761                            ;	Voice $0B
00001761                            ;	$3A
00001761                            ;	$69, $70, $50, $60, 	$1C, $18, $1A, $18, 	$10, $0C, $02, $09
00001761                            ;	$08, $06, $06, $03, 	$F9, $56, $06, $06, 	$28, $15, $14, $00
00001761                            	smpsVcAlgorithm     $02
00001761 =00000002                M vcalgorithm	=	$02
00001761                            	smpsVcFeedback      $07
00001761 =00000007                M vcfeedback	=	$07
00001761                            	smpsVcUnusedBits    $00
00001761 =00000000                M vcunusedbits	=	$00
00001761 =00000000                M vcd1r1unk	=	0
00001761 =00000000                M vcd1r2unk	=	0
00001761 =00000000                M vcd1r3unk	=	0
00001761 =00000000                M vcd1r4unk	=	0
00001761                            	smpsVcDetune        $06, $05, $07, $06
00001761 =00000006                M vcdt1	=	$06
00001761 =00000005                M vcdt2	=	$05
00001761 =00000007                M vcdt3	=	$07
00001761 =00000006                M vcdt4	=	$06
00001761                            	smpsVcCoarseFreq    $00, $00, $00, $09
00001761 =00000000                M vccf1	=	$00
00001761 =00000000                M vccf2	=	$00
00001761 =00000000                M vccf3	=	$00
00001761 =00000009                M vccf4	=	$09
00001761                            	smpsVcRateScale     $00, $00, $00, $00
00001761 =00000000                M vcrs1	=	$00
00001761 =00000000                M vcrs2	=	$00
00001761 =00000000                M vcrs3	=	$00
00001761 =00000000                M vcrs4	=	$00
00001761                            	smpsVcAttackRate    $18, $1A, $18, $1C
00001761 =00000018                M vcar1	=	$18
00001761 =0000001A                M vcar2	=	$1a
00001761 =00000018                M vcar3	=	$18
00001761 =0000001C                M vcar4	=	$1c
00001761                            	smpsVcAmpMod        $00, $00, $00, $00
00001761 =00000000                M vcam1	=	$00
00001761 =00000000                M vcam2	=	$00
00001761 =00000000                M vcam3	=	$00
00001761 =00000000                M vcam4	=	$00
00001761                            	smpsVcDecayRate1    $09, $02, $0C, $10
00001761 =00000009                M vcd1r1	=	$09
00001761 =00000002                M vcd1r2	=	$02
00001761 =0000000C                M vcd1r3	=	$0c
00001761 =00000010                M vcd1r4	=	$10
00001761                            	smpsVcDecayRate2    $03, $06, $06, $08
00001761 =00000003                M vcd2r1	=	$03
00001761 =00000006                M vcd2r2	=	$06
00001761 =00000006                M vcd2r3	=	$06
00001761 =00000008                M vcd2r4	=	$08
00001761                            	smpsVcDecayLevel    $00, $00, $05, $0F
00001761 =00000000                M vcdl1	=	$00
00001761 =00000000                M vcdl2	=	$00
00001761 =00000005                M vcdl3	=	$05
00001761 =0000000F                M vcdl4	=	$0f
00001761                            	smpsVcReleaseRate   $06, $06, $06, $09
00001761 =00000006                M vcrr1	=	$06
00001761 =00000006                M vcrr2	=	$06
00001761 =00000006                M vcrr3	=	$06
00001761 =00000009                M vcrr4	=	$09
00001761                            	smpsVcTotalLevel    $00, $14, $15, $28
00001761 =00000000                M vctl1	=	$00
00001761 =00000014                M vctl2	=	$14
00001761 =00000015                M vctl3	=	$15
00001761 =00000028                M vctl4	=	$28
00001761 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001762 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001762 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001762 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001762 =00000080                M vctlmask1	=	$80
00001762 6950 7060                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001766 1C1A 1818                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000176A 1002 0C09                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000176E 0806 0603                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001772 F906 5606                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001776 2814 1580                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000177A                            
0000177A                            ;	Voice $0C
0000177A                            ;	$3D
0000177A                            ;	$00, $01, $02, $01, 	$4C, $0F, $50, $12, 	$0C, $02, $00, $05
0000177A                            ;	$01, $00, $00, $00, 	$28, $29, $2A, $19, 	$1A, $00, $06, $00
0000177A                            	smpsVcAlgorithm     $05
0000177A =00000005                M vcalgorithm	=	$05
0000177A                            	smpsVcFeedback      $07
0000177A =00000007                M vcfeedback	=	$07
0000177A                            	smpsVcUnusedBits    $00
0000177A =00000000                M vcunusedbits	=	$00
0000177A =00000000                M vcd1r1unk	=	0
0000177A =00000000                M vcd1r2unk	=	0
0000177A =00000000                M vcd1r3unk	=	0
0000177A =00000000                M vcd1r4unk	=	0
0000177A                            	smpsVcDetune        $00, $00, $00, $00
0000177A =00000000                M vcdt1	=	$00
0000177A =00000000                M vcdt2	=	$00
0000177A =00000000                M vcdt3	=	$00
0000177A =00000000                M vcdt4	=	$00
0000177A                            	smpsVcCoarseFreq    $01, $02, $01, $00
0000177A =00000001                M vccf1	=	$01
0000177A =00000002                M vccf2	=	$02
0000177A =00000001                M vccf3	=	$01
0000177A =00000000                M vccf4	=	$00
0000177A                            	smpsVcRateScale     $00, $01, $00, $01
0000177A =00000000                M vcrs1	=	$00
0000177A =00000001                M vcrs2	=	$01
0000177A =00000000                M vcrs3	=	$00
0000177A =00000001                M vcrs4	=	$01
0000177A                            	smpsVcAttackRate    $12, $10, $0F, $0C
0000177A =00000012                M vcar1	=	$12
0000177A =00000010                M vcar2	=	$10
0000177A =0000000F                M vcar3	=	$0f
0000177A =0000000C                M vcar4	=	$0c
0000177A                            	smpsVcAmpMod        $00, $00, $00, $00
0000177A =00000000                M vcam1	=	$00
0000177A =00000000                M vcam2	=	$00
0000177A =00000000                M vcam3	=	$00
0000177A =00000000                M vcam4	=	$00
0000177A                            	smpsVcDecayRate1    $05, $00, $02, $0C
0000177A =00000005                M vcd1r1	=	$05
0000177A =00000000                M vcd1r2	=	$00
0000177A =00000002                M vcd1r3	=	$02
0000177A =0000000C                M vcd1r4	=	$0c
0000177A                            	smpsVcDecayRate2    $00, $00, $00, $01
0000177A =00000000                M vcd2r1	=	$00
0000177A =00000000                M vcd2r2	=	$00
0000177A =00000000                M vcd2r3	=	$00
0000177A =00000001                M vcd2r4	=	$01
0000177A                            	smpsVcDecayLevel    $01, $02, $02, $02
0000177A =00000001                M vcdl1	=	$01
0000177A =00000002                M vcdl2	=	$02
0000177A =00000002                M vcdl3	=	$02
0000177A =00000002                M vcdl4	=	$02
0000177A                            	smpsVcReleaseRate   $09, $0A, $09, $08
0000177A =00000009                M vcrr1	=	$09
0000177A =0000000A                M vcrr2	=	$0a
0000177A =00000009                M vcrr3	=	$09
0000177A =00000008                M vcrr4	=	$08
0000177A                            	smpsVcTotalLevel    $00, $06, $00, $1A
0000177A =00000000                M vctl1	=	$00
0000177A =00000006                M vctl2	=	$06
0000177A =00000000                M vctl3	=	$00
0000177A =0000001A                M vctl4	=	$1a
0000177A 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000177B =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000177B =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000177B =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000177B =00000080                M vctlmask1	=	$80
0000177B 0002 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000177F 4C50 0F12                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001783 0C00 0205                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001787 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000178B 282A 2919                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000178F 1A86 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001793                            
00001793                            ;	Voice $0D
00001793                            ;	$2C
00001793                            ;	$71, $71, $31, $31, 	$1F, $16, $1F, $16, 	$00, $0F, $00, $0F
00001793                            ;	$00, $0F, $00, $0F, 	$00, $FA, $00, $FA, 	$15, $00, $14, $00
00001793                            	smpsVcAlgorithm     $04
00001793 =00000004                M vcalgorithm	=	$04
00001793                            	smpsVcFeedback      $05
00001793 =00000005                M vcfeedback	=	$05
00001793                            	smpsVcUnusedBits    $00
00001793 =00000000                M vcunusedbits	=	$00
00001793 =00000000                M vcd1r1unk	=	0
00001793 =00000000                M vcd1r2unk	=	0
00001793 =00000000                M vcd1r3unk	=	0
00001793 =00000000                M vcd1r4unk	=	0
00001793                            	smpsVcDetune        $03, $03, $07, $07
00001793 =00000003                M vcdt1	=	$03
00001793 =00000003                M vcdt2	=	$03
00001793 =00000007                M vcdt3	=	$07
00001793 =00000007                M vcdt4	=	$07
00001793                            	smpsVcCoarseFreq    $01, $01, $01, $01
00001793 =00000001                M vccf1	=	$01
00001793 =00000001                M vccf2	=	$01
00001793 =00000001                M vccf3	=	$01
00001793 =00000001                M vccf4	=	$01
00001793                            	smpsVcRateScale     $00, $00, $00, $00
00001793 =00000000                M vcrs1	=	$00
00001793 =00000000                M vcrs2	=	$00
00001793 =00000000                M vcrs3	=	$00
00001793 =00000000                M vcrs4	=	$00
00001793                            	smpsVcAttackRate    $16, $1F, $16, $1F
00001793 =00000016                M vcar1	=	$16
00001793 =0000001F                M vcar2	=	$1f
00001793 =00000016                M vcar3	=	$16
00001793 =0000001F                M vcar4	=	$1f
00001793                            	smpsVcAmpMod        $00, $00, $00, $00
00001793 =00000000                M vcam1	=	$00
00001793 =00000000                M vcam2	=	$00
00001793 =00000000                M vcam3	=	$00
00001793 =00000000                M vcam4	=	$00
00001793                            	smpsVcDecayRate1    $0F, $00, $0F, $00
00001793 =0000000F                M vcd1r1	=	$0f
00001793 =00000000                M vcd1r2	=	$00
00001793 =0000000F                M vcd1r3	=	$0f
00001793 =00000000                M vcd1r4	=	$00
00001793                            	smpsVcDecayRate2    $0F, $00, $0F, $00
00001793 =0000000F                M vcd2r1	=	$0f
00001793 =00000000                M vcd2r2	=	$00
00001793 =0000000F                M vcd2r3	=	$0f
00001793 =00000000                M vcd2r4	=	$00
00001793                            	smpsVcDecayLevel    $0F, $00, $0F, $00
00001793 =0000000F                M vcdl1	=	$0f
00001793 =00000000                M vcdl2	=	$00
00001793 =0000000F                M vcdl3	=	$0f
00001793 =00000000                M vcdl4	=	$00
00001793                            	smpsVcReleaseRate   $0A, $00, $0A, $00
00001793 =0000000A                M vcrr1	=	$0a
00001793 =00000000                M vcrr2	=	$00
00001793 =0000000A                M vcrr3	=	$0a
00001793 =00000000                M vcrr4	=	$00
00001793                            	smpsVcTotalLevel    $00, $14, $00, $15
00001793 =00000000                M vctl1	=	$00
00001793 =00000014                M vctl2	=	$14
00001793 =00000000                M vctl3	=	$00
00001793 =00000015                M vctl4	=	$15
00001793 2C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001794 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001794 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001794 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001794 =00000080                M vctlmask1	=	$80
00001794 7131 7131                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001798 1F1F 1616                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000179C 0000 0F0F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000017A0 0000 0F0F                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000017A4 0000 FAFA                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000017A8 1514 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000017AC                            
000017AC                            ;	Voice $0E
000017AC                            ;	$18
000017AC                            ;	$37, $32, $31, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000017AC                            ;	$08, $0A, $03, $05, 	$B6, $B6, $36, $28, 	$2C, $22, $14, $00
000017AC                            	smpsVcAlgorithm     $00
000017AC =00000000                M vcalgorithm	=	$00
000017AC                            	smpsVcFeedback      $03
000017AC =00000003                M vcfeedback	=	$03
000017AC                            	smpsVcUnusedBits    $00
000017AC =00000000                M vcunusedbits	=	$00
000017AC =00000000                M vcd1r1unk	=	0
000017AC =00000000                M vcd1r2unk	=	0
000017AC =00000000                M vcd1r3unk	=	0
000017AC =00000000                M vcd1r4unk	=	0
000017AC                            	smpsVcDetune        $03, $03, $03, $03
000017AC =00000003                M vcdt1	=	$03
000017AC =00000003                M vcdt2	=	$03
000017AC =00000003                M vcdt3	=	$03
000017AC =00000003                M vcdt4	=	$03
000017AC                            	smpsVcCoarseFreq    $01, $01, $02, $07
000017AC =00000001                M vccf1	=	$01
000017AC =00000001                M vccf2	=	$01
000017AC =00000002                M vccf3	=	$02
000017AC =00000007                M vccf4	=	$07
000017AC                            	smpsVcRateScale     $02, $00, $03, $02
000017AC =00000002                M vcrs1	=	$02
000017AC =00000000                M vcrs2	=	$00
000017AC =00000003                M vcrs3	=	$03
000017AC =00000002                M vcrs4	=	$02
000017AC                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000017AC =0000001C                M vcar1	=	$1c
000017AC =0000001C                M vcar2	=	$1c
000017AC =0000001C                M vcar3	=	$1c
000017AC =0000001E                M vcar4	=	$1e
000017AC                            	smpsVcAmpMod        $00, $00, $00, $00
000017AC =00000000                M vcam1	=	$00
000017AC =00000000                M vcam2	=	$00
000017AC =00000000                M vcam3	=	$00
000017AC =00000000                M vcam4	=	$00
000017AC                            	smpsVcDecayRate1    $01, $04, $06, $0D
000017AC =00000001                M vcd1r1	=	$01
000017AC =00000004                M vcd1r2	=	$04
000017AC =00000006                M vcd1r3	=	$06
000017AC =0000000D                M vcd1r4	=	$0d
000017AC                            	smpsVcDecayRate2    $05, $03, $0A, $08
000017AC =00000005                M vcd2r1	=	$05
000017AC =00000003                M vcd2r2	=	$03
000017AC =0000000A                M vcd2r3	=	$0a
000017AC =00000008                M vcd2r4	=	$08
000017AC                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000017AC =00000002                M vcdl1	=	$02
000017AC =00000003                M vcdl2	=	$03
000017AC =0000000B                M vcdl3	=	$0b
000017AC =0000000B                M vcdl4	=	$0b
000017AC                            	smpsVcReleaseRate   $08, $06, $06, $06
000017AC =00000008                M vcrr1	=	$08
000017AC =00000006                M vcrr2	=	$06
000017AC =00000006                M vcrr3	=	$06
000017AC =00000006                M vcrr4	=	$06
000017AC                            	smpsVcTotalLevel    $00, $14, $22, $2C
000017AC =00000000                M vctl1	=	$00
000017AC =00000014                M vctl2	=	$14
000017AC =00000022                M vctl3	=	$22
000017AC =0000002C                M vctl4	=	$2c
000017AC 18                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000017AD =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000017AD =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000017AD =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000017AD =00000080                M vctlmask1	=	$80
000017AD 3731 3231                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000017B1 9E1C DC9C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000017B5 0D04 0601                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000017B9 0803 0A05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000017BD B636 B628                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000017C1 2C14 2280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000017C5                            
000017C5                            ;	Voice $0F
000017C5                            ;	$3D
000017C5                            ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
000017C5                            ;	$01, $00, $00, $00, 	$24, $18, $18, $18, 	$1C, $82, $82, $82
000017C5                            	smpsVcAlgorithm     $05
000017C5 =00000005                M vcalgorithm	=	$05
000017C5                            	smpsVcFeedback      $07
000017C5 =00000007                M vcfeedback	=	$07
000017C5                            	smpsVcUnusedBits    $00
000017C5 =00000000                M vcunusedbits	=	$00
000017C5 =00000000                M vcd1r1unk	=	0
000017C5 =00000000                M vcd1r2unk	=	0
000017C5 =00000000                M vcd1r3unk	=	0
000017C5 =00000000                M vcd1r4unk	=	0
000017C5                            	smpsVcDetune        $00, $00, $00, $00
000017C5 =00000000                M vcdt1	=	$00
000017C5 =00000000                M vcdt2	=	$00
000017C5 =00000000                M vcdt3	=	$00
000017C5 =00000000                M vcdt4	=	$00
000017C5                            	smpsVcCoarseFreq    $02, $02, $02, $01
000017C5 =00000002                M vccf1	=	$02
000017C5 =00000002                M vccf2	=	$02
000017C5 =00000002                M vccf3	=	$02
000017C5 =00000001                M vccf4	=	$01
000017C5                            	smpsVcRateScale     $01, $01, $01, $00
000017C5 =00000001                M vcrs1	=	$01
000017C5 =00000001                M vcrs2	=	$01
000017C5 =00000001                M vcrs3	=	$01
000017C5 =00000000                M vcrs4	=	$00
000017C5                            	smpsVcAttackRate    $10, $10, $10, $10
000017C5 =00000010                M vcar1	=	$10
000017C5 =00000010                M vcar2	=	$10
000017C5 =00000010                M vcar3	=	$10
000017C5 =00000010                M vcar4	=	$10
000017C5                            	smpsVcAmpMod        $00, $00, $00, $00
000017C5 =00000000                M vcam1	=	$00
000017C5 =00000000                M vcam2	=	$00
000017C5 =00000000                M vcam3	=	$00
000017C5 =00000000                M vcam4	=	$00
000017C5                            	smpsVcDecayRate1    $08, $08, $08, $07
000017C5 =00000008                M vcd1r1	=	$08
000017C5 =00000008                M vcd1r2	=	$08
000017C5 =00000008                M vcd1r3	=	$08
000017C5 =00000007                M vcd1r4	=	$07
000017C5                            	smpsVcDecayRate2    $00, $00, $00, $01
000017C5 =00000000                M vcd2r1	=	$00
000017C5 =00000000                M vcd2r2	=	$00
000017C5 =00000000                M vcd2r3	=	$00
000017C5 =00000001                M vcd2r4	=	$01
000017C5                            	smpsVcDecayLevel    $01, $01, $01, $02
000017C5 =00000001                M vcdl1	=	$01
000017C5 =00000001                M vcdl2	=	$01
000017C5 =00000001                M vcdl3	=	$01
000017C5 =00000002                M vcdl4	=	$02
000017C5                            	smpsVcReleaseRate   $08, $08, $08, $04
000017C5 =00000008                M vcrr1	=	$08
000017C5 =00000008                M vcrr2	=	$08
000017C5 =00000008                M vcrr3	=	$08
000017C5 =00000004                M vcrr4	=	$04
000017C5                            	smpsVcTotalLevel    $82, $82, $82, $1C
000017C5 =00000082                M vctl1	=	$82
000017C5 =00000082                M vctl2	=	$82
000017C5 =00000082                M vctl3	=	$82
000017C5 =0000001C                M vctl4	=	$1c
000017C5 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000017C6 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000017C6 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000017C6 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000017C6 =00000080                M vctlmask1	=	$80
000017C6 0102 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000017CA 1050 5050                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000017CE 0708 0808                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000017D2 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000017D6 2418 1818                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000017DA 1C82 8282                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000017DE                            
000017DE                            ;	Voice $10
000017DE                            ;	$32
000017DE                            ;	$71, $0D, $33, $01, 	$5F, $99, $5F, $94, 	$05, $05, $05, $07
000017DE                            ;	$02, $02, $02, $02, 	$11, $11, $11, $72, 	$23, $2D, $26, $80
000017DE                            	smpsVcAlgorithm     $02
000017DE =00000002                M vcalgorithm	=	$02
000017DE                            	smpsVcFeedback      $06
000017DE =00000006                M vcfeedback	=	$06
000017DE                            	smpsVcUnusedBits    $00
000017DE =00000000                M vcunusedbits	=	$00
000017DE =00000000                M vcd1r1unk	=	0
000017DE =00000000                M vcd1r2unk	=	0
000017DE =00000000                M vcd1r3unk	=	0
000017DE =00000000                M vcd1r4unk	=	0
000017DE                            	smpsVcDetune        $00, $03, $00, $07
000017DE =00000000                M vcdt1	=	$00
000017DE =00000003                M vcdt2	=	$03
000017DE =00000000                M vcdt3	=	$00
000017DE =00000007                M vcdt4	=	$07
000017DE                            	smpsVcCoarseFreq    $01, $03, $0D, $01
000017DE =00000001                M vccf1	=	$01
000017DE =00000003                M vccf2	=	$03
000017DE =0000000D                M vccf3	=	$0d
000017DE =00000001                M vccf4	=	$01
000017DE                            	smpsVcRateScale     $02, $01, $02, $01
000017DE =00000002                M vcrs1	=	$02
000017DE =00000001                M vcrs2	=	$01
000017DE =00000002                M vcrs3	=	$02
000017DE =00000001                M vcrs4	=	$01
000017DE                            	smpsVcAttackRate    $14, $1F, $19, $1F
000017DE =00000014                M vcar1	=	$14
000017DE =0000001F                M vcar2	=	$1f
000017DE =00000019                M vcar3	=	$19
000017DE =0000001F                M vcar4	=	$1f
000017DE                            	smpsVcAmpMod        $00, $00, $00, $00
000017DE =00000000                M vcam1	=	$00
000017DE =00000000                M vcam2	=	$00
000017DE =00000000                M vcam3	=	$00
000017DE =00000000                M vcam4	=	$00
000017DE                            	smpsVcDecayRate1    $07, $05, $05, $05
000017DE =00000007                M vcd1r1	=	$07
000017DE =00000005                M vcd1r2	=	$05
000017DE =00000005                M vcd1r3	=	$05
000017DE =00000005                M vcd1r4	=	$05
000017DE                            	smpsVcDecayRate2    $02, $02, $02, $02
000017DE =00000002                M vcd2r1	=	$02
000017DE =00000002                M vcd2r2	=	$02
000017DE =00000002                M vcd2r3	=	$02
000017DE =00000002                M vcd2r4	=	$02
000017DE                            	smpsVcDecayLevel    $07, $01, $01, $01
000017DE =00000007                M vcdl1	=	$07
000017DE =00000001                M vcdl2	=	$01
000017DE =00000001                M vcdl3	=	$01
000017DE =00000001                M vcdl4	=	$01
000017DE                            	smpsVcReleaseRate   $02, $01, $01, $01
000017DE =00000002                M vcrr1	=	$02
000017DE =00000001                M vcrr2	=	$01
000017DE =00000001                M vcrr3	=	$01
000017DE =00000001                M vcrr4	=	$01
000017DE                            	smpsVcTotalLevel    $80, $26, $2D, $23
000017DE =00000080                M vctl1	=	$80
000017DE =00000026                M vctl2	=	$26
000017DE =0000002D                M vctl3	=	$2d
000017DE =00000023                M vctl4	=	$23
000017DE 32                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000017DF =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000017DF =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000017DF =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000017DF =00000080                M vctlmask1	=	$80
000017DF 7133 0D01                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000017E3 5F5F 9994                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000017E7 0505 0507                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000017EB 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000017EF 1111 1172                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000017F3 2326 2D80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000017F7                            
000017F7                            ;	Voice $11
000017F7                            ;	$3A
000017F7                            ;	$32, $01, $52, $31, 	$1F, $1F, $1F, $18, 	$01, $1F, $00, $00
000017F7                            ;	$00, $0F, $00, $00, 	$5A, $0F, $03, $1A, 	$3B, $30, $4F, $00
000017F7                            	smpsVcAlgorithm     $02
000017F7 =00000002                M vcalgorithm	=	$02
000017F7                            	smpsVcFeedback      $07
000017F7 =00000007                M vcfeedback	=	$07
000017F7                            	smpsVcUnusedBits    $00
000017F7 =00000000                M vcunusedbits	=	$00
000017F7 =00000000                M vcd1r1unk	=	0
000017F7 =00000000                M vcd1r2unk	=	0
000017F7 =00000000                M vcd1r3unk	=	0
000017F7 =00000000                M vcd1r4unk	=	0
000017F7                            	smpsVcDetune        $03, $05, $00, $03
000017F7 =00000003                M vcdt1	=	$03
000017F7 =00000005                M vcdt2	=	$05
000017F7 =00000000                M vcdt3	=	$00
000017F7 =00000003                M vcdt4	=	$03
000017F7                            	smpsVcCoarseFreq    $01, $02, $01, $02
000017F7 =00000001                M vccf1	=	$01
000017F7 =00000002                M vccf2	=	$02
000017F7 =00000001                M vccf3	=	$01
000017F7 =00000002                M vccf4	=	$02
000017F7                            	smpsVcRateScale     $00, $00, $00, $00
000017F7 =00000000                M vcrs1	=	$00
000017F7 =00000000                M vcrs2	=	$00
000017F7 =00000000                M vcrs3	=	$00
000017F7 =00000000                M vcrs4	=	$00
000017F7                            	smpsVcAttackRate    $18, $1F, $1F, $1F
000017F7 =00000018                M vcar1	=	$18
000017F7 =0000001F                M vcar2	=	$1f
000017F7 =0000001F                M vcar3	=	$1f
000017F7 =0000001F                M vcar4	=	$1f
000017F7                            	smpsVcAmpMod        $00, $00, $00, $00
000017F7 =00000000                M vcam1	=	$00
000017F7 =00000000                M vcam2	=	$00
000017F7 =00000000                M vcam3	=	$00
000017F7 =00000000                M vcam4	=	$00
000017F7                            	smpsVcDecayRate1    $00, $00, $1F, $01
000017F7 =00000000                M vcd1r1	=	$00
000017F7 =00000000                M vcd1r2	=	$00
000017F7 =0000001F                M vcd1r3	=	$1f
000017F7 =00000001                M vcd1r4	=	$01
000017F7                            	smpsVcDecayRate2    $00, $00, $0F, $00
000017F7 =00000000                M vcd2r1	=	$00
000017F7 =00000000                M vcd2r2	=	$00
000017F7 =0000000F                M vcd2r3	=	$0f
000017F7 =00000000                M vcd2r4	=	$00
000017F7                            	smpsVcDecayLevel    $01, $00, $00, $05
000017F7 =00000001                M vcdl1	=	$01
000017F7 =00000000                M vcdl2	=	$00
000017F7 =00000000                M vcdl3	=	$00
000017F7 =00000005                M vcdl4	=	$05
000017F7                            	smpsVcReleaseRate   $0A, $03, $0F, $0A
000017F7 =0000000A                M vcrr1	=	$0a
000017F7 =00000003                M vcrr2	=	$03
000017F7 =0000000F                M vcrr3	=	$0f
000017F7 =0000000A                M vcrr4	=	$0a
000017F7                            	smpsVcTotalLevel    $00, $4F, $30, $3B
000017F7 =00000000                M vctl1	=	$00
000017F7 =0000004F                M vctl2	=	$4f
000017F7 =00000030                M vctl3	=	$30
000017F7 =0000003B                M vctl4	=	$3b
000017F7 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000017F8 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000017F8 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000017F8 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000017F8 =00000080                M vctlmask1	=	$80
000017F8 3252 0131                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000017FC 1F1F 1F18                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001800 0100 1F00                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001804 0000 0F00                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001808 5A03 0F1A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000180C 3B4F 3080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001810                            
00001810                            ;	Voice $12
00001810                            ;	$3C
00001810                            ;	$42, $41, $32, $41, 	$12, $12, $12, $12, 	$00, $00, $00, $00
00001810                            ;	$00, $00, $00, $00, 	$06, $08, $06, $08, 	$24, $08, $24, $08
00001810                            	smpsVcAlgorithm     $04
00001810 =00000004                M vcalgorithm	=	$04
00001810                            	smpsVcFeedback      $07
00001810 =00000007                M vcfeedback	=	$07
00001810                            	smpsVcUnusedBits    $00
00001810 =00000000                M vcunusedbits	=	$00
00001810 =00000000                M vcd1r1unk	=	0
00001810 =00000000                M vcd1r2unk	=	0
00001810 =00000000                M vcd1r3unk	=	0
00001810 =00000000                M vcd1r4unk	=	0
00001810                            	smpsVcDetune        $04, $03, $04, $04
00001810 =00000004                M vcdt1	=	$04
00001810 =00000003                M vcdt2	=	$03
00001810 =00000004                M vcdt3	=	$04
00001810 =00000004                M vcdt4	=	$04
00001810                            	smpsVcCoarseFreq    $01, $02, $01, $02
00001810 =00000001                M vccf1	=	$01
00001810 =00000002                M vccf2	=	$02
00001810 =00000001                M vccf3	=	$01
00001810 =00000002                M vccf4	=	$02
00001810                            	smpsVcRateScale     $00, $00, $00, $00
00001810 =00000000                M vcrs1	=	$00
00001810 =00000000                M vcrs2	=	$00
00001810 =00000000                M vcrs3	=	$00
00001810 =00000000                M vcrs4	=	$00
00001810                            	smpsVcAttackRate    $12, $12, $12, $12
00001810 =00000012                M vcar1	=	$12
00001810 =00000012                M vcar2	=	$12
00001810 =00000012                M vcar3	=	$12
00001810 =00000012                M vcar4	=	$12
00001810                            	smpsVcAmpMod        $00, $00, $00, $00
00001810 =00000000                M vcam1	=	$00
00001810 =00000000                M vcam2	=	$00
00001810 =00000000                M vcam3	=	$00
00001810 =00000000                M vcam4	=	$00
00001810                            	smpsVcDecayRate1    $00, $00, $00, $00
00001810 =00000000                M vcd1r1	=	$00
00001810 =00000000                M vcd1r2	=	$00
00001810 =00000000                M vcd1r3	=	$00
00001810 =00000000                M vcd1r4	=	$00
00001810                            	smpsVcDecayRate2    $00, $00, $00, $00
00001810 =00000000                M vcd2r1	=	$00
00001810 =00000000                M vcd2r2	=	$00
00001810 =00000000                M vcd2r3	=	$00
00001810 =00000000                M vcd2r4	=	$00
00001810                            	smpsVcDecayLevel    $00, $00, $00, $00
00001810 =00000000                M vcdl1	=	$00
00001810 =00000000                M vcdl2	=	$00
00001810 =00000000                M vcdl3	=	$00
00001810 =00000000                M vcdl4	=	$00
00001810                            	smpsVcReleaseRate   $08, $06, $08, $06
00001810 =00000008                M vcrr1	=	$08
00001810 =00000006                M vcrr2	=	$06
00001810 =00000008                M vcrr3	=	$08
00001810 =00000006                M vcrr4	=	$06
00001810                            	smpsVcTotalLevel    $08, $24, $08, $24
00001810 =00000008                M vctl1	=	$08
00001810 =00000024                M vctl2	=	$24
00001810 =00000008                M vctl3	=	$08
00001810 =00000024                M vctl4	=	$24
00001810 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001811 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001811 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001811 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001811 =00000080                M vctlmask1	=	$80
00001811 4232 4141                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001815 1212 1212                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001819 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000181D 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001821 0606 0808                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001825 2424 8888                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001829                            
00001829                            ;	Voice $13
00001829                            ;	$31
00001829                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
00001829                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
00001829                            	smpsVcAlgorithm     $01
00001829 =00000001                M vcalgorithm	=	$01
00001829                            	smpsVcFeedback      $06
00001829 =00000006                M vcfeedback	=	$06
00001829                            	smpsVcUnusedBits    $00
00001829 =00000000                M vcunusedbits	=	$00
00001829 =00000000                M vcd1r1unk	=	0
00001829 =00000000                M vcd1r2unk	=	0
00001829 =00000000                M vcd1r3unk	=	0
00001829 =00000000                M vcd1r4unk	=	0
00001829                            	smpsVcDetune        $03, $03, $03, $03
00001829 =00000003                M vcdt1	=	$03
00001829 =00000003                M vcdt2	=	$03
00001829 =00000003                M vcdt3	=	$03
00001829 =00000003                M vcdt4	=	$03
00001829                            	smpsVcCoarseFreq    $01, $00, $05, $04
00001829 =00000001                M vccf1	=	$01
00001829 =00000000                M vccf2	=	$00
00001829 =00000005                M vccf3	=	$05
00001829 =00000004                M vccf4	=	$04
00001829                            	smpsVcRateScale     $02, $02, $03, $03
00001829 =00000002                M vcrs1	=	$02
00001829 =00000002                M vcrs2	=	$02
00001829 =00000003                M vcrs3	=	$03
00001829 =00000003                M vcrs4	=	$03
00001829                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00001829 =0000001F                M vcar1	=	$1f
00001829 =0000001F                M vcar2	=	$1f
00001829 =0000001F                M vcar3	=	$1f
00001829 =0000001F                M vcar4	=	$1f
00001829                            	smpsVcAmpMod        $00, $00, $00, $00
00001829 =00000000                M vcam1	=	$00
00001829 =00000000                M vcam2	=	$00
00001829 =00000000                M vcam3	=	$00
00001829 =00000000                M vcam4	=	$00
00001829                            	smpsVcDecayRate1    $09, $0C, $07, $0C
00001829 =00000009                M vcd1r1	=	$09
00001829 =0000000C                M vcd1r2	=	$0c
00001829 =00000007                M vcd1r3	=	$07
00001829 =0000000C                M vcd1r4	=	$0c
00001829                            	smpsVcDecayRate2    $08, $07, $07, $07
00001829 =00000008                M vcd2r1	=	$08
00001829 =00000007                M vcd2r2	=	$07
00001829 =00000007                M vcd2r3	=	$07
00001829 =00000007                M vcd2r4	=	$07
00001829                            	smpsVcDecayLevel    $02, $01, $01, $02
00001829 =00000002                M vcdl1	=	$02
00001829 =00000001                M vcdl2	=	$01
00001829 =00000001                M vcdl3	=	$01
00001829 =00000002                M vcdl4	=	$02
00001829                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001829 =0000000F                M vcrr1	=	$0f
00001829 =0000000F                M vcrr2	=	$0f
00001829 =0000000F                M vcrr3	=	$0f
00001829 =0000000F                M vcrr4	=	$0f
00001829                            	smpsVcTotalLevel    $80, $14, $32, $17
00001829 =00000080                M vctl1	=	$80
00001829 =00000014                M vctl2	=	$14
00001829 =00000032                M vctl3	=	$32
00001829 =00000017                M vctl4	=	$17
00001829 31                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000182A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000182A =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000182A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000182A =00000080                M vctlmask1	=	$80
0000182A 3430 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000182E DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001832 0C0C 0709                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001836 0707 0708                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000183A 2F1F 1F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000183E 1714 3280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001842                            
00001842                            ;	Voice $14
00001842                            ;	$3D
00001842                            ;	$01, $01, $01, $01, 	$10, $50, $50, $50, 	$07, $08, $08, $08
00001842                            ;	$01, $00, $00, $00, 	$20, $1A, $1A, $1A, 	$19, $84, $84, $84
00001842                            	smpsVcAlgorithm     $05
00001842 =00000005                M vcalgorithm	=	$05
00001842                            	smpsVcFeedback      $07
00001842 =00000007                M vcfeedback	=	$07
00001842                            	smpsVcUnusedBits    $00
00001842 =00000000                M vcunusedbits	=	$00
00001842 =00000000                M vcd1r1unk	=	0
00001842 =00000000                M vcd1r2unk	=	0
00001842 =00000000                M vcd1r3unk	=	0
00001842 =00000000                M vcd1r4unk	=	0
00001842                            	smpsVcDetune        $00, $00, $00, $00
00001842 =00000000                M vcdt1	=	$00
00001842 =00000000                M vcdt2	=	$00
00001842 =00000000                M vcdt3	=	$00
00001842 =00000000                M vcdt4	=	$00
00001842                            	smpsVcCoarseFreq    $01, $01, $01, $01
00001842 =00000001                M vccf1	=	$01
00001842 =00000001                M vccf2	=	$01
00001842 =00000001                M vccf3	=	$01
00001842 =00000001                M vccf4	=	$01
00001842                            	smpsVcRateScale     $01, $01, $01, $00
00001842 =00000001                M vcrs1	=	$01
00001842 =00000001                M vcrs2	=	$01
00001842 =00000001                M vcrs3	=	$01
00001842 =00000000                M vcrs4	=	$00
00001842                            	smpsVcAttackRate    $10, $10, $10, $10
00001842 =00000010                M vcar1	=	$10
00001842 =00000010                M vcar2	=	$10
00001842 =00000010                M vcar3	=	$10
00001842 =00000010                M vcar4	=	$10
00001842                            	smpsVcAmpMod        $00, $00, $00, $00
00001842 =00000000                M vcam1	=	$00
00001842 =00000000                M vcam2	=	$00
00001842 =00000000                M vcam3	=	$00
00001842 =00000000                M vcam4	=	$00
00001842                            	smpsVcDecayRate1    $08, $08, $08, $07
00001842 =00000008                M vcd1r1	=	$08
00001842 =00000008                M vcd1r2	=	$08
00001842 =00000008                M vcd1r3	=	$08
00001842 =00000007                M vcd1r4	=	$07
00001842                            	smpsVcDecayRate2    $00, $00, $00, $01
00001842 =00000000                M vcd2r1	=	$00
00001842 =00000000                M vcd2r2	=	$00
00001842 =00000000                M vcd2r3	=	$00
00001842 =00000001                M vcd2r4	=	$01
00001842                            	smpsVcDecayLevel    $01, $01, $01, $02
00001842 =00000001                M vcdl1	=	$01
00001842 =00000001                M vcdl2	=	$01
00001842 =00000001                M vcdl3	=	$01
00001842 =00000002                M vcdl4	=	$02
00001842                            	smpsVcReleaseRate   $0A, $0A, $0A, $00
00001842 =0000000A                M vcrr1	=	$0a
00001842 =0000000A                M vcrr2	=	$0a
00001842 =0000000A                M vcrr3	=	$0a
00001842 =00000000                M vcrr4	=	$00
00001842                            	smpsVcTotalLevel    $84, $84, $84, $19
00001842 =00000084                M vctl1	=	$84
00001842 =00000084                M vctl2	=	$84
00001842 =00000084                M vctl3	=	$84
00001842 =00000019                M vctl4	=	$19
00001842 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001843 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001843 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001843 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001843 =00000080                M vctlmask1	=	$80
00001843 0101 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001847 1050 5050                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000184B 0708 0808                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000184F 0100 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001853 201A 1A1A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001857 1984 8484                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000185B                            
0000185B                            ;	Voice $15
0000185B                            ;	$24
0000185B                            ;	$70, $74, $30, $38, 	$12, $1F, $1F, $1F, 	$05, $03, $05, $03
0000185B                            ;	$05, $03, $05, $03, 	$36, $2C, $26, $2C, 	$0A, $08, $06, $08
0000185B                            	smpsVcAlgorithm     $04
0000185B =00000004                M vcalgorithm	=	$04
0000185B                            	smpsVcFeedback      $04
0000185B =00000004                M vcfeedback	=	$04
0000185B                            	smpsVcUnusedBits    $00
0000185B =00000000                M vcunusedbits	=	$00
0000185B =00000000                M vcd1r1unk	=	0
0000185B =00000000                M vcd1r2unk	=	0
0000185B =00000000                M vcd1r3unk	=	0
0000185B =00000000                M vcd1r4unk	=	0
0000185B                            	smpsVcDetune        $03, $03, $07, $07
0000185B =00000003                M vcdt1	=	$03
0000185B =00000003                M vcdt2	=	$03
0000185B =00000007                M vcdt3	=	$07
0000185B =00000007                M vcdt4	=	$07
0000185B                            	smpsVcCoarseFreq    $08, $00, $04, $00
0000185B =00000008                M vccf1	=	$08
0000185B =00000000                M vccf2	=	$00
0000185B =00000004                M vccf3	=	$04
0000185B =00000000                M vccf4	=	$00
0000185B                            	smpsVcRateScale     $00, $00, $00, $00
0000185B =00000000                M vcrs1	=	$00
0000185B =00000000                M vcrs2	=	$00
0000185B =00000000                M vcrs3	=	$00
0000185B =00000000                M vcrs4	=	$00
0000185B                            	smpsVcAttackRate    $1F, $1F, $1F, $12
0000185B =0000001F                M vcar1	=	$1f
0000185B =0000001F                M vcar2	=	$1f
0000185B =0000001F                M vcar3	=	$1f
0000185B =00000012                M vcar4	=	$12
0000185B                            	smpsVcAmpMod        $00, $00, $00, $00
0000185B =00000000                M vcam1	=	$00
0000185B =00000000                M vcam2	=	$00
0000185B =00000000                M vcam3	=	$00
0000185B =00000000                M vcam4	=	$00
0000185B                            	smpsVcDecayRate1    $03, $05, $03, $05
0000185B =00000003                M vcd1r1	=	$03
0000185B =00000005                M vcd1r2	=	$05
0000185B =00000003                M vcd1r3	=	$03
0000185B =00000005                M vcd1r4	=	$05
0000185B                            	smpsVcDecayRate2    $03, $05, $03, $05
0000185B =00000003                M vcd2r1	=	$03
0000185B =00000005                M vcd2r2	=	$05
0000185B =00000003                M vcd2r3	=	$03
0000185B =00000005                M vcd2r4	=	$05
0000185B                            	smpsVcDecayLevel    $02, $02, $02, $03
0000185B =00000002                M vcdl1	=	$02
0000185B =00000002                M vcdl2	=	$02
0000185B =00000002                M vcdl3	=	$02
0000185B =00000003                M vcdl4	=	$03
0000185B                            	smpsVcReleaseRate   $0C, $06, $0C, $06
0000185B =0000000C                M vcrr1	=	$0c
0000185B =00000006                M vcrr2	=	$06
0000185B =0000000C                M vcrr3	=	$0c
0000185B =00000006                M vcrr4	=	$06
0000185B                            	smpsVcTotalLevel    $08, $06, $08, $0A
0000185B =00000008                M vctl1	=	$08
0000185B =00000006                M vctl2	=	$06
0000185B =00000008                M vctl3	=	$08
0000185B =0000000A                M vctl4	=	$0a
0000185B 24                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000185C =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000185C =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000185C =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000185C =00000080                M vctlmask1	=	$80
0000185C 7030 7438                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001860 121F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001864 0505 0303                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001868 0505 0303                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000186C 3626 2C2C                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001870 0A06 8888                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001874                            
00001874                            ;	Voice $16
00001874                            ;	$3A
00001874                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
00001874                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
00001874                            	smpsVcAlgorithm     $02
00001874 =00000002                M vcalgorithm	=	$02
00001874                            	smpsVcFeedback      $07
00001874 =00000007                M vcfeedback	=	$07
00001874                            	smpsVcUnusedBits    $00
00001874 =00000000                M vcunusedbits	=	$00
00001874 =00000000                M vcd1r1unk	=	0
00001874 =00000000                M vcd1r2unk	=	0
00001874 =00000000                M vcd1r3unk	=	0
00001874 =00000000                M vcd1r4unk	=	0
00001874                            	smpsVcDetune        $00, $00, $00, $00
00001874 =00000000                M vcdt1	=	$00
00001874 =00000000                M vcdt2	=	$00
00001874 =00000000                M vcdt3	=	$00
00001874 =00000000                M vcdt4	=	$00
00001874                            	smpsVcCoarseFreq    $02, $01, $01, $01
00001874 =00000002                M vccf1	=	$02
00001874 =00000001                M vccf2	=	$01
00001874 =00000001                M vccf3	=	$01
00001874 =00000001                M vccf4	=	$01
00001874                            	smpsVcRateScale     $01, $00, $00, $02
00001874 =00000001                M vcrs1	=	$01
00001874 =00000000                M vcrs2	=	$00
00001874 =00000000                M vcrs3	=	$00
00001874 =00000002                M vcrs4	=	$02
00001874                            	smpsVcAttackRate    $12, $07, $07, $0D
00001874 =00000012                M vcar1	=	$12
00001874 =00000007                M vcar2	=	$07
00001874 =00000007                M vcar3	=	$07
00001874 =0000000D                M vcar4	=	$0d
00001874                            	smpsVcAmpMod        $00, $00, $00, $00
00001874 =00000000                M vcam1	=	$00
00001874 =00000000                M vcam2	=	$00
00001874 =00000000                M vcam3	=	$00
00001874 =00000000                M vcam4	=	$00
00001874                            	smpsVcDecayRate1    $03, $00, $00, $09
00001874 =00000003                M vcd1r1	=	$03
00001874 =00000000                M vcd1r2	=	$00
00001874 =00000000                M vcd1r3	=	$00
00001874 =00000009                M vcd1r4	=	$09
00001874                            	smpsVcDecayRate2    $00, $02, $02, $01
00001874 =00000000                M vcd2r1	=	$00
00001874 =00000002                M vcd2r2	=	$02
00001874 =00000002                M vcd2r3	=	$02
00001874 =00000001                M vcd2r4	=	$01
00001874                            	smpsVcDecayLevel    $02, $00, $00, $05
00001874 =00000002                M vcdl1	=	$02
00001874 =00000000                M vcdl2	=	$00
00001874 =00000000                M vcdl3	=	$00
00001874 =00000005                M vcdl4	=	$05
00001874                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001874 =0000000F                M vcrr1	=	$0f
00001874 =0000000F                M vcrr2	=	$0f
00001874 =0000000F                M vcrr3	=	$0f
00001874 =0000000F                M vcrr4	=	$0f
00001874                            	smpsVcTotalLevel    $80, $18, $22, $18
00001874 =00000080                M vctl1	=	$80
00001874 =00000018                M vctl2	=	$18
00001874 =00000022                M vctl3	=	$22
00001874 =00000018                M vctl4	=	$18
00001874 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001875 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001875 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001875 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001875 =00000080                M vctlmask1	=	$80
00001875 0101 0102                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001879 8D07 0752                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000187D 0900 0003                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001881 0102 0200                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001885 5F0F 0F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001889 1818 2280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000188D                            
0000188D                            ;	Voice $17
0000188D                            ;	$3A
0000188D                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0000188D                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $4E, $16, $80
0000188D                            	smpsVcAlgorithm     $02
0000188D =00000002                M vcalgorithm	=	$02
0000188D                            	smpsVcFeedback      $07
0000188D =00000007                M vcfeedback	=	$07
0000188D                            	smpsVcUnusedBits    $00
0000188D =00000000                M vcunusedbits	=	$00
0000188D =00000000                M vcd1r1unk	=	0
0000188D =00000000                M vcd1r2unk	=	0
0000188D =00000000                M vcd1r3unk	=	0
0000188D =00000000                M vcd1r4unk	=	0
0000188D                            	smpsVcDetune        $00, $00, $00, $00
0000188D =00000000                M vcdt1	=	$00
0000188D =00000000                M vcdt2	=	$00
0000188D =00000000                M vcdt3	=	$00
0000188D =00000000                M vcdt4	=	$00
0000188D                            	smpsVcCoarseFreq    $01, $01, $07, $01
0000188D =00000001                M vccf1	=	$01
0000188D =00000001                M vccf2	=	$01
0000188D =00000007                M vccf3	=	$07
0000188D =00000001                M vccf4	=	$01
0000188D                            	smpsVcRateScale     $01, $02, $02, $02
0000188D =00000001                M vcrs1	=	$01
0000188D =00000002                M vcrs2	=	$02
0000188D =00000002                M vcrs3	=	$02
0000188D =00000002                M vcrs4	=	$02
0000188D                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0000188D =00000013                M vcar1	=	$13
0000188D =0000000D                M vcar2	=	$0d
0000188D =0000000E                M vcar3	=	$0e
0000188D =0000000E                M vcar4	=	$0e
0000188D                            	smpsVcAmpMod        $00, $00, $00, $00
0000188D =00000000                M vcam1	=	$00
0000188D =00000000                M vcam2	=	$00
0000188D =00000000                M vcam3	=	$00
0000188D =00000000                M vcam4	=	$00
0000188D                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0000188D =00000003                M vcd1r1	=	$03
0000188D =0000000E                M vcd1r2	=	$0e
0000188D =0000000E                M vcd1r3	=	$0e
0000188D =0000000E                M vcd1r4	=	$0e
0000188D                            	smpsVcDecayRate2    $00, $00, $00, $00
0000188D =00000000                M vcd2r1	=	$00
0000188D =00000000                M vcd2r2	=	$00
0000188D =00000000                M vcd2r3	=	$00
0000188D =00000000                M vcd2r4	=	$00
0000188D                            	smpsVcDecayLevel    $00, $01, $0F, $01
0000188D =00000000                M vcdl1	=	$00
0000188D =00000001                M vcdl2	=	$01
0000188D =0000000F                M vcdl3	=	$0f
0000188D =00000001                M vcdl4	=	$01
0000188D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000188D =0000000F                M vcrr1	=	$0f
0000188D =0000000F                M vcrr2	=	$0f
0000188D =0000000F                M vcrr3	=	$0f
0000188D =0000000F                M vcrr4	=	$0f
0000188D                            	smpsVcTotalLevel    $80, $16, $4E, $18
0000188D =00000080                M vctl1	=	$80
0000188D =00000016                M vctl2	=	$16
0000188D =0000004E                M vctl3	=	$4e
0000188D =00000018                M vctl4	=	$18
0000188D 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000188E =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000188E =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000188E =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000188E =00000080                M vctlmask1	=	$80
0000188E 0101 0701                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001892 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001896 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000189A 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000189E 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000018A2 1816 4E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000018A6                            
000018A6                            ;	Voice $18
000018A6                            ;	$3A
000018A6                            ;	$03, $08, $03, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000018A6                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $20, $80
000018A6                            	smpsVcAlgorithm     $02
000018A6 =00000002                M vcalgorithm	=	$02
000018A6                            	smpsVcFeedback      $07
000018A6 =00000007                M vcfeedback	=	$07
000018A6                            	smpsVcUnusedBits    $00
000018A6 =00000000                M vcunusedbits	=	$00
000018A6 =00000000                M vcd1r1unk	=	0
000018A6 =00000000                M vcd1r2unk	=	0
000018A6 =00000000                M vcd1r3unk	=	0
000018A6 =00000000                M vcd1r4unk	=	0
000018A6                            	smpsVcDetune        $00, $00, $00, $00
000018A6 =00000000                M vcdt1	=	$00
000018A6 =00000000                M vcdt2	=	$00
000018A6 =00000000                M vcdt3	=	$00
000018A6 =00000000                M vcdt4	=	$00
000018A6                            	smpsVcCoarseFreq    $01, $03, $08, $03
000018A6 =00000001                M vccf1	=	$01
000018A6 =00000003                M vccf2	=	$03
000018A6 =00000008                M vccf3	=	$08
000018A6 =00000003                M vccf4	=	$03
000018A6                            	smpsVcRateScale     $01, $02, $02, $02
000018A6 =00000001                M vcrs1	=	$01
000018A6 =00000002                M vcrs2	=	$02
000018A6 =00000002                M vcrs3	=	$02
000018A6 =00000002                M vcrs4	=	$02
000018A6                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000018A6 =00000013                M vcar1	=	$13
000018A6 =0000000D                M vcar2	=	$0d
000018A6 =0000000E                M vcar3	=	$0e
000018A6 =0000000E                M vcar4	=	$0e
000018A6                            	smpsVcAmpMod        $00, $00, $00, $00
000018A6 =00000000                M vcam1	=	$00
000018A6 =00000000                M vcam2	=	$00
000018A6 =00000000                M vcam3	=	$00
000018A6 =00000000                M vcam4	=	$00
000018A6                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000018A6 =00000003                M vcd1r1	=	$03
000018A6 =0000000E                M vcd1r2	=	$0e
000018A6 =0000000E                M vcd1r3	=	$0e
000018A6 =0000000E                M vcd1r4	=	$0e
000018A6                            	smpsVcDecayRate2    $00, $00, $00, $00
000018A6 =00000000                M vcd2r1	=	$00
000018A6 =00000000                M vcd2r2	=	$00
000018A6 =00000000                M vcd2r3	=	$00
000018A6 =00000000                M vcd2r4	=	$00
000018A6                            	smpsVcDecayLevel    $00, $01, $0F, $01
000018A6 =00000000                M vcdl1	=	$00
000018A6 =00000001                M vcdl2	=	$01
000018A6 =0000000F                M vcdl3	=	$0f
000018A6 =00000001                M vcdl4	=	$01
000018A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000018A6 =0000000F                M vcrr1	=	$0f
000018A6 =0000000F                M vcrr2	=	$0f
000018A6 =0000000F                M vcrr3	=	$0f
000018A6 =0000000F                M vcrr4	=	$0f
000018A6                            	smpsVcTotalLevel    $80, $20, $28, $17
000018A6 =00000080                M vctl1	=	$80
000018A6 =00000020                M vctl2	=	$20
000018A6 =00000028                M vctl3	=	$28
000018A6 =00000017                M vctl4	=	$17
000018A6 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000018A7 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000018A7 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000018A7 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000018A7 =00000080                M vctlmask1	=	$80
000018A7 0303 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000018AB 8E8D 8E53                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000018AF 0E0E 0E03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000018B3 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000018B7 1F1F FF0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000018BB 1720 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000018BF                            
000018BF                            ;	Voice $19
000018BF                            ;	$20
000018BF                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000018BF                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000018BF                            	smpsVcAlgorithm     $00
000018BF =00000000                M vcalgorithm	=	$00
000018BF                            	smpsVcFeedback      $04
000018BF =00000004                M vcfeedback	=	$04
000018BF                            	smpsVcUnusedBits    $00
000018BF =00000000                M vcunusedbits	=	$00
000018BF =00000000                M vcd1r1unk	=	0
000018BF =00000000                M vcd1r2unk	=	0
000018BF =00000000                M vcd1r3unk	=	0
000018BF =00000000                M vcd1r4unk	=	0
000018BF                            	smpsVcDetune        $00, $00, $03, $07
000018BF =00000000                M vcdt1	=	$00
000018BF =00000000                M vcdt2	=	$00
000018BF =00000003                M vcdt3	=	$03
000018BF =00000007                M vcdt4	=	$07
000018BF                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000018BF =00000000                M vccf1	=	$00
000018BF =00000000                M vccf2	=	$00
000018BF =00000001                M vccf3	=	$01
000018BF =0000000A                M vccf4	=	$0a
000018BF                            	smpsVcRateScale     $03, $03, $03, $02
000018BF =00000003                M vcrs1	=	$03
000018BF =00000003                M vcrs2	=	$03
000018BF =00000003                M vcrs3	=	$03
000018BF =00000002                M vcrs4	=	$02
000018BF                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000018BF =0000001F                M vcar1	=	$1f
000018BF =0000001C                M vcar2	=	$1c
000018BF =00000018                M vcar3	=	$18
000018BF =0000001F                M vcar4	=	$1f
000018BF                            	smpsVcAmpMod        $00, $00, $00, $00
000018BF =00000000                M vcam1	=	$00
000018BF =00000000                M vcam2	=	$00
000018BF =00000000                M vcam3	=	$00
000018BF =00000000                M vcam4	=	$00
000018BF                            	smpsVcDecayRate1    $04, $04, $0A, $10
000018BF =00000004                M vcd1r1	=	$04
000018BF =00000004                M vcd1r2	=	$04
000018BF =0000000A                M vcd1r3	=	$0a
000018BF =00000010                M vcd1r4	=	$10
000018BF                            	smpsVcDecayRate2    $08, $08, $08, $0F
000018BF =00000008                M vcd2r1	=	$08
000018BF =00000008                M vcd2r2	=	$08
000018BF =00000008                M vcd2r3	=	$08
000018BF =0000000F                M vcd2r4	=	$0f
000018BF                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000018BF =0000000B                M vcdl1	=	$0b
000018BF =0000000B                M vcdl2	=	$0b
000018BF =00000005                M vcdl3	=	$05
000018BF =00000005                M vcdl4	=	$05
000018BF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000018BF =0000000F                M vcrr1	=	$0f
000018BF =0000000F                M vcrr2	=	$0f
000018BF =0000000F                M vcrr3	=	$0f
000018BF =0000000F                M vcrr4	=	$0f
000018BF                            	smpsVcTotalLevel    $80, $17, $2B, $14
000018BF =00000080                M vctl1	=	$80
000018BF =00000017                M vctl2	=	$17
000018BF =0000002B                M vctl3	=	$2b
000018BF =00000014                M vctl4	=	$14
000018BF 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000018C0 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000018C0 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000018C0 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000018C0 =00000080                M vctlmask1	=	$80
000018C0 7A00 3100                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000018C4 9FDC D8DF                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000018C8 1004 0A04                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000018CC 0F08 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000018D0 5FBF 5FBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000018D4 1417 2B80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000018D8                            
000018D8                            ;	Voice $1A
000018D8                            ;	$3A
000018D8                            ;	$61, $08, $51, $02, 	$5D, $5D, $5D, $50, 	$04, $0F, $1F, $1F
000018D8                            ;	$00, $00, $00, $00, 	$1F, $5F, $0F, $0F, 	$22, $1E, $22, $80
000018D8                            	smpsVcAlgorithm     $02
000018D8 =00000002                M vcalgorithm	=	$02
000018D8                            	smpsVcFeedback      $07
000018D8 =00000007                M vcfeedback	=	$07
000018D8                            	smpsVcUnusedBits    $00
000018D8 =00000000                M vcunusedbits	=	$00
000018D8 =00000000                M vcd1r1unk	=	0
000018D8 =00000000                M vcd1r2unk	=	0
000018D8 =00000000                M vcd1r3unk	=	0
000018D8 =00000000                M vcd1r4unk	=	0
000018D8                            	smpsVcDetune        $00, $05, $00, $06
000018D8 =00000000                M vcdt1	=	$00
000018D8 =00000005                M vcdt2	=	$05
000018D8 =00000000                M vcdt3	=	$00
000018D8 =00000006                M vcdt4	=	$06
000018D8                            	smpsVcCoarseFreq    $02, $01, $08, $01
000018D8 =00000002                M vccf1	=	$02
000018D8 =00000001                M vccf2	=	$01
000018D8 =00000008                M vccf3	=	$08
000018D8 =00000001                M vccf4	=	$01
000018D8                            	smpsVcRateScale     $01, $01, $01, $01
000018D8 =00000001                M vcrs1	=	$01
000018D8 =00000001                M vcrs2	=	$01
000018D8 =00000001                M vcrs3	=	$01
000018D8 =00000001                M vcrs4	=	$01
000018D8                            	smpsVcAttackRate    $10, $1D, $1D, $1D
000018D8 =00000010                M vcar1	=	$10
000018D8 =0000001D                M vcar2	=	$1d
000018D8 =0000001D                M vcar3	=	$1d
000018D8 =0000001D                M vcar4	=	$1d
000018D8                            	smpsVcAmpMod        $00, $00, $00, $00
000018D8 =00000000                M vcam1	=	$00
000018D8 =00000000                M vcam2	=	$00
000018D8 =00000000                M vcam3	=	$00
000018D8 =00000000                M vcam4	=	$00
000018D8                            	smpsVcDecayRate1    $1F, $1F, $0F, $04
000018D8 =0000001F                M vcd1r1	=	$1f
000018D8 =0000001F                M vcd1r2	=	$1f
000018D8 =0000000F                M vcd1r3	=	$0f
000018D8 =00000004                M vcd1r4	=	$04
000018D8                            	smpsVcDecayRate2    $00, $00, $00, $00
000018D8 =00000000                M vcd2r1	=	$00
000018D8 =00000000                M vcd2r2	=	$00
000018D8 =00000000                M vcd2r3	=	$00
000018D8 =00000000                M vcd2r4	=	$00
000018D8                            	smpsVcDecayLevel    $00, $00, $05, $01
000018D8 =00000000                M vcdl1	=	$00
000018D8 =00000000                M vcdl2	=	$00
000018D8 =00000005                M vcdl3	=	$05
000018D8 =00000001                M vcdl4	=	$01
000018D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000018D8 =0000000F                M vcrr1	=	$0f
000018D8 =0000000F                M vcrr2	=	$0f
000018D8 =0000000F                M vcrr3	=	$0f
000018D8 =0000000F                M vcrr4	=	$0f
000018D8                            	smpsVcTotalLevel    $80, $22, $1E, $22
000018D8 =00000080                M vctl1	=	$80
000018D8 =00000022                M vctl2	=	$22
000018D8 =0000001E                M vctl3	=	$1e
000018D8 =00000022                M vctl4	=	$22
000018D8 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000018D9 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000018D9 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000018D9 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000018D9 =00000080                M vctlmask1	=	$80
000018D9 6151 0802                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000018DD 5D5D 5D50                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000018E1 041F 0F1F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000018E5 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000018E9 1F0F 5F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000018ED 2222 1E80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000018F1                            
000018F1                            ;	Voice $1B
000018F1                            ;	$02
000018F1                            ;	$01, $55, $02, $04, 	$92, $8D, $8E, $54, 	$0D, $0C, $00, $03
000018F1                            ;	$00, $00, $00, $00, 	$FF, $2F, $0F, $5F, 	$16, $2A, $1D, $80
000018F1                            	smpsVcAlgorithm     $02
000018F1 =00000002                M vcalgorithm	=	$02
000018F1                            	smpsVcFeedback      $00
000018F1 =00000000                M vcfeedback	=	$00
000018F1                            	smpsVcUnusedBits    $00
000018F1 =00000000                M vcunusedbits	=	$00
000018F1 =00000000                M vcd1r1unk	=	0
000018F1 =00000000                M vcd1r2unk	=	0
000018F1 =00000000                M vcd1r3unk	=	0
000018F1 =00000000                M vcd1r4unk	=	0
000018F1                            	smpsVcDetune        $00, $00, $05, $00
000018F1 =00000000                M vcdt1	=	$00
000018F1 =00000000                M vcdt2	=	$00
000018F1 =00000005                M vcdt3	=	$05
000018F1 =00000000                M vcdt4	=	$00
000018F1                            	smpsVcCoarseFreq    $04, $02, $05, $01
000018F1 =00000004                M vccf1	=	$04
000018F1 =00000002                M vccf2	=	$02
000018F1 =00000005                M vccf3	=	$05
000018F1 =00000001                M vccf4	=	$01
000018F1                            	smpsVcRateScale     $01, $02, $02, $02
000018F1 =00000001                M vcrs1	=	$01
000018F1 =00000002                M vcrs2	=	$02
000018F1 =00000002                M vcrs3	=	$02
000018F1 =00000002                M vcrs4	=	$02
000018F1                            	smpsVcAttackRate    $14, $0E, $0D, $12
000018F1 =00000014                M vcar1	=	$14
000018F1 =0000000E                M vcar2	=	$0e
000018F1 =0000000D                M vcar3	=	$0d
000018F1 =00000012                M vcar4	=	$12
000018F1                            	smpsVcAmpMod        $00, $00, $00, $00
000018F1 =00000000                M vcam1	=	$00
000018F1 =00000000                M vcam2	=	$00
000018F1 =00000000                M vcam3	=	$00
000018F1 =00000000                M vcam4	=	$00
000018F1                            	smpsVcDecayRate1    $03, $00, $0C, $0D
000018F1 =00000003                M vcd1r1	=	$03
000018F1 =00000000                M vcd1r2	=	$00
000018F1 =0000000C                M vcd1r3	=	$0c
000018F1 =0000000D                M vcd1r4	=	$0d
000018F1                            	smpsVcDecayRate2    $00, $00, $00, $00
000018F1 =00000000                M vcd2r1	=	$00
000018F1 =00000000                M vcd2r2	=	$00
000018F1 =00000000                M vcd2r3	=	$00
000018F1 =00000000                M vcd2r4	=	$00
000018F1                            	smpsVcDecayLevel    $05, $00, $02, $0F
000018F1 =00000005                M vcdl1	=	$05
000018F1 =00000000                M vcdl2	=	$00
000018F1 =00000002                M vcdl3	=	$02
000018F1 =0000000F                M vcdl4	=	$0f
000018F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000018F1 =0000000F                M vcrr1	=	$0f
000018F1 =0000000F                M vcrr2	=	$0f
000018F1 =0000000F                M vcrr3	=	$0f
000018F1 =0000000F                M vcrr4	=	$0f
000018F1                            	smpsVcTotalLevel    $80, $1D, $2A, $16
000018F1 =00000080                M vctl1	=	$80
000018F1 =0000001D                M vctl2	=	$1d
000018F1 =0000002A                M vctl3	=	$2a
000018F1 =00000016                M vctl4	=	$16
000018F1 02                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000018F2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000018F2 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000018F2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000018F2 =00000080                M vctlmask1	=	$80
000018F2 0102 5504                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000018F6 928E 8D54                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000018FA 0D00 0C03                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000018FE 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001902 FF0F 2F5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001906 161D 2A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000190A                            
0000190A                            ;	Voice $1C
0000190A                            ;	$02
0000190A                            ;	$75, $71, $73, $31, 	$1F, $58, $96, $9F, 	$01, $1B, $03, $08
0000190A                            ;	$01, $04, $01, $05, 	$FF, $2F, $3F, $2F, 	$24, $29, $30, $80
0000190A                            	smpsVcAlgorithm     $02
0000190A =00000002                M vcalgorithm	=	$02
0000190A                            	smpsVcFeedback      $00
0000190A =00000000                M vcfeedback	=	$00
0000190A                            	smpsVcUnusedBits    $00
0000190A =00000000                M vcunusedbits	=	$00
0000190A =00000000                M vcd1r1unk	=	0
0000190A =00000000                M vcd1r2unk	=	0
0000190A =00000000                M vcd1r3unk	=	0
0000190A =00000000                M vcd1r4unk	=	0
0000190A                            	smpsVcDetune        $03, $07, $07, $07
0000190A =00000003                M vcdt1	=	$03
0000190A =00000007                M vcdt2	=	$07
0000190A =00000007                M vcdt3	=	$07
0000190A =00000007                M vcdt4	=	$07
0000190A                            	smpsVcCoarseFreq    $01, $03, $01, $05
0000190A =00000001                M vccf1	=	$01
0000190A =00000003                M vccf2	=	$03
0000190A =00000001                M vccf3	=	$01
0000190A =00000005                M vccf4	=	$05
0000190A                            	smpsVcRateScale     $02, $02, $01, $00
0000190A =00000002                M vcrs1	=	$02
0000190A =00000002                M vcrs2	=	$02
0000190A =00000001                M vcrs3	=	$01
0000190A =00000000                M vcrs4	=	$00
0000190A                            	smpsVcAttackRate    $1F, $16, $18, $1F
0000190A =0000001F                M vcar1	=	$1f
0000190A =00000016                M vcar2	=	$16
0000190A =00000018                M vcar3	=	$18
0000190A =0000001F                M vcar4	=	$1f
0000190A                            	smpsVcAmpMod        $00, $00, $00, $00
0000190A =00000000                M vcam1	=	$00
0000190A =00000000                M vcam2	=	$00
0000190A =00000000                M vcam3	=	$00
0000190A =00000000                M vcam4	=	$00
0000190A                            	smpsVcDecayRate1    $08, $03, $1B, $01
0000190A =00000008                M vcd1r1	=	$08
0000190A =00000003                M vcd1r2	=	$03
0000190A =0000001B                M vcd1r3	=	$1b
0000190A =00000001                M vcd1r4	=	$01
0000190A                            	smpsVcDecayRate2    $05, $01, $04, $01
0000190A =00000005                M vcd2r1	=	$05
0000190A =00000001                M vcd2r2	=	$01
0000190A =00000004                M vcd2r3	=	$04
0000190A =00000001                M vcd2r4	=	$01
0000190A                            	smpsVcDecayLevel    $02, $03, $02, $0F
0000190A =00000002                M vcdl1	=	$02
0000190A =00000003                M vcdl2	=	$03
0000190A =00000002                M vcdl3	=	$02
0000190A =0000000F                M vcdl4	=	$0f
0000190A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000190A =0000000F                M vcrr1	=	$0f
0000190A =0000000F                M vcrr2	=	$0f
0000190A =0000000F                M vcrr3	=	$0f
0000190A =0000000F                M vcrr4	=	$0f
0000190A                            	smpsVcTotalLevel    $80, $30, $29, $24
0000190A =00000080                M vctl1	=	$80
0000190A =00000030                M vctl2	=	$30
0000190A =00000029                M vctl3	=	$29
0000190A =00000024                M vctl4	=	$24
0000190A 02                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000190B =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000190B =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000190B =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000190B =00000080                M vctlmask1	=	$80
0000190B 7573 7131                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000190F 1F96 589F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001913 0103 1B08                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001917 0101 0405                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000191B FF3F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000191F 2430 2980                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001923                            
00001923                            ;	Voice $1D
00001923                            ;	$20
00001923                            ;	$66, $65, $60, $60, 	$DF, $DF, $9F, $1F, 	$00, $06, $09, $0C
00001923                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$1C, $3A, $16, $80
00001923                            	smpsVcAlgorithm     $00
00001923 =00000000                M vcalgorithm	=	$00
00001923                            	smpsVcFeedback      $04
00001923 =00000004                M vcfeedback	=	$04
00001923                            	smpsVcUnusedBits    $00
00001923 =00000000                M vcunusedbits	=	$00
00001923 =00000000                M vcd1r1unk	=	0
00001923 =00000000                M vcd1r2unk	=	0
00001923 =00000000                M vcd1r3unk	=	0
00001923 =00000000                M vcd1r4unk	=	0
00001923                            	smpsVcDetune        $06, $06, $06, $06
00001923 =00000006                M vcdt1	=	$06
00001923 =00000006                M vcdt2	=	$06
00001923 =00000006                M vcdt3	=	$06
00001923 =00000006                M vcdt4	=	$06
00001923                            	smpsVcCoarseFreq    $00, $00, $05, $06
00001923 =00000000                M vccf1	=	$00
00001923 =00000000                M vccf2	=	$00
00001923 =00000005                M vccf3	=	$05
00001923 =00000006                M vccf4	=	$06
00001923                            	smpsVcRateScale     $00, $02, $03, $03
00001923 =00000000                M vcrs1	=	$00
00001923 =00000002                M vcrs2	=	$02
00001923 =00000003                M vcrs3	=	$03
00001923 =00000003                M vcrs4	=	$03
00001923                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00001923 =0000001F                M vcar1	=	$1f
00001923 =0000001F                M vcar2	=	$1f
00001923 =0000001F                M vcar3	=	$1f
00001923 =0000001F                M vcar4	=	$1f
00001923                            	smpsVcAmpMod        $00, $00, $00, $00
00001923 =00000000                M vcam1	=	$00
00001923 =00000000                M vcam2	=	$00
00001923 =00000000                M vcam3	=	$00
00001923 =00000000                M vcam4	=	$00
00001923                            	smpsVcDecayRate1    $0C, $09, $06, $00
00001923 =0000000C                M vcd1r1	=	$0c
00001923 =00000009                M vcd1r2	=	$09
00001923 =00000006                M vcd1r3	=	$06
00001923 =00000000                M vcd1r4	=	$00
00001923                            	smpsVcDecayRate2    $08, $06, $06, $07
00001923 =00000008                M vcd2r1	=	$08
00001923 =00000006                M vcd2r2	=	$06
00001923 =00000006                M vcd2r3	=	$06
00001923 =00000007                M vcd2r4	=	$07
00001923                            	smpsVcDecayLevel    $0F, $01, $01, $02
00001923 =0000000F                M vcdl1	=	$0f
00001923 =00000001                M vcdl2	=	$01
00001923 =00000001                M vcdl3	=	$01
00001923 =00000002                M vcdl4	=	$02
00001923                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001923 =0000000F                M vcrr1	=	$0f
00001923 =0000000F                M vcrr2	=	$0f
00001923 =0000000F                M vcrr3	=	$0f
00001923 =0000000F                M vcrr4	=	$0f
00001923                            	smpsVcTotalLevel    $80, $16, $3A, $1C
00001923 =00000080                M vctl1	=	$80
00001923 =00000016                M vctl2	=	$16
00001923 =0000003A                M vctl3	=	$3a
00001923 =0000001C                M vctl4	=	$1c
00001923 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001924 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001924 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001924 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001924 =00000080                M vctlmask1	=	$80
00001924 6660 6560                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001928 DF9F DF1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000192C 0009 060C                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001930 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001934 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001938 1C16 3A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000193C                            
0000193C                            ;	Voice $1E
0000193C                            ;	$0D
0000193C                            ;	$32, $08, $06, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
0000193C                            ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $80, $86, $8D
0000193C                            	smpsVcAlgorithm     $05
0000193C =00000005                M vcalgorithm	=	$05
0000193C                            	smpsVcFeedback      $01
0000193C =00000001                M vcfeedback	=	$01
0000193C                            	smpsVcUnusedBits    $00
0000193C =00000000                M vcunusedbits	=	$00
0000193C =00000000                M vcd1r1unk	=	0
0000193C =00000000                M vcd1r2unk	=	0
0000193C =00000000                M vcd1r3unk	=	0
0000193C =00000000                M vcd1r4unk	=	0
0000193C                            	smpsVcDetune        $00, $00, $00, $03
0000193C =00000000                M vcdt1	=	$00
0000193C =00000000                M vcdt2	=	$00
0000193C =00000000                M vcdt3	=	$00
0000193C =00000003                M vcdt4	=	$03
0000193C                            	smpsVcCoarseFreq    $01, $06, $08, $02
0000193C =00000001                M vccf1	=	$01
0000193C =00000006                M vccf2	=	$06
0000193C =00000008                M vccf3	=	$08
0000193C =00000002                M vccf4	=	$02
0000193C                            	smpsVcRateScale     $00, $00, $00, $00
0000193C =00000000                M vcrs1	=	$00
0000193C =00000000                M vcrs2	=	$00
0000193C =00000000                M vcrs3	=	$00
0000193C =00000000                M vcrs4	=	$00
0000193C                            	smpsVcAttackRate    $19, $19, $19, $1F
0000193C =00000019                M vcar1	=	$19
0000193C =00000019                M vcar2	=	$19
0000193C =00000019                M vcar3	=	$19
0000193C =0000001F                M vcar4	=	$1f
0000193C                            	smpsVcAmpMod        $00, $00, $00, $00
0000193C =00000000                M vcam1	=	$00
0000193C =00000000                M vcam2	=	$00
0000193C =00000000                M vcam3	=	$00
0000193C =00000000                M vcam4	=	$00
0000193C                            	smpsVcDecayRate1    $05, $05, $05, $0A
0000193C =00000005                M vcd1r1	=	$05
0000193C =00000005                M vcd1r2	=	$05
0000193C =00000005                M vcd1r3	=	$05
0000193C =0000000A                M vcd1r4	=	$0a
0000193C                            	smpsVcDecayRate2    $02, $02, $02, $00
0000193C =00000002                M vcd2r1	=	$02
0000193C =00000002                M vcd2r2	=	$02
0000193C =00000002                M vcd2r3	=	$02
0000193C =00000000                M vcd2r4	=	$00
0000193C                            	smpsVcDecayLevel    $02, $02, $02, $03
0000193C =00000002                M vcdl1	=	$02
0000193C =00000002                M vcdl2	=	$02
0000193C =00000002                M vcdl3	=	$02
0000193C =00000003                M vcdl4	=	$03
0000193C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000193C =0000000F                M vcrr1	=	$0f
0000193C =0000000F                M vcrr2	=	$0f
0000193C =0000000F                M vcrr3	=	$0f
0000193C =0000000F                M vcrr4	=	$0f
0000193C                            	smpsVcTotalLevel    $8D, $86, $80, $28
0000193C =0000008D                M vctl1	=	$8d
0000193C =00000086                M vctl2	=	$86
0000193C =00000080                M vctl3	=	$80
0000193C =00000028                M vctl4	=	$28
0000193C 0D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000193D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000193D =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000193D =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000193D =00000080                M vctlmask1	=	$80
0000193D 3206 0801                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001941 1F19 1919                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001945 0A05 0505                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001949 0002 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000194D 3F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001951 2886 808D                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001955                            
00001955                            ;	Voice $1F
00001955                            ;	$38
00001955                            ;	$3A, $0A, $11, $02, 	$D4, $14, $50, $0E, 	$05, $08, $02, $88
00001955                            ;	$00, $00, $00, $00, 	$99, $09, $09, $1A, 	$2D, $2C, $19, $86
00001955                            	smpsVcAlgorithm     $00
00001955 =00000000                M vcalgorithm	=	$00
00001955                            	smpsVcFeedback      $07
00001955 =00000007                M vcfeedback	=	$07
00001955                            	smpsVcUnusedBits    $00
00001955 =00000000                M vcunusedbits	=	$00
00001955 =00000000                M vcd1r1unk	=	0
00001955 =00000000                M vcd1r2unk	=	0
00001955 =00000000                M vcd1r3unk	=	0
00001955 =00000000                M vcd1r4unk	=	0
00001955                            	smpsVcDetune        $00, $01, $00, $03
00001955 =00000000                M vcdt1	=	$00
00001955 =00000001                M vcdt2	=	$01
00001955 =00000000                M vcdt3	=	$00
00001955 =00000003                M vcdt4	=	$03
00001955                            	smpsVcCoarseFreq    $02, $01, $0A, $0A
00001955 =00000002                M vccf1	=	$02
00001955 =00000001                M vccf2	=	$01
00001955 =0000000A                M vccf3	=	$0a
00001955 =0000000A                M vccf4	=	$0a
00001955                            	smpsVcRateScale     $00, $01, $00, $03
00001955 =00000000                M vcrs1	=	$00
00001955 =00000001                M vcrs2	=	$01
00001955 =00000000                M vcrs3	=	$00
00001955 =00000003                M vcrs4	=	$03
00001955                            	smpsVcAttackRate    $0E, $10, $14, $14
00001955 =0000000E                M vcar1	=	$0e
00001955 =00000010                M vcar2	=	$10
00001955 =00000014                M vcar3	=	$14
00001955 =00000014                M vcar4	=	$14
00001955                            	smpsVcAmpMod        $01, $00, $00, $00
00001955 =00000001                M vcam1	=	$01
00001955 =00000000                M vcam2	=	$00
00001955 =00000000                M vcam3	=	$00
00001955 =00000000                M vcam4	=	$00
00001955                            	smpsVcDecayRate1    $08, $02, $08, $05
00001955 =00000008                M vcd1r1	=	$08
00001955 =00000002                M vcd1r2	=	$02
00001955 =00000008                M vcd1r3	=	$08
00001955 =00000005                M vcd1r4	=	$05
00001955                            	smpsVcDecayRate2    $00, $00, $00, $00
00001955 =00000000                M vcd2r1	=	$00
00001955 =00000000                M vcd2r2	=	$00
00001955 =00000000                M vcd2r3	=	$00
00001955 =00000000                M vcd2r4	=	$00
00001955                            	smpsVcDecayLevel    $01, $00, $00, $09
00001955 =00000001                M vcdl1	=	$01
00001955 =00000000                M vcdl2	=	$00
00001955 =00000000                M vcdl3	=	$00
00001955 =00000009                M vcdl4	=	$09
00001955                            	smpsVcReleaseRate   $0A, $09, $09, $09
00001955 =0000000A                M vcrr1	=	$0a
00001955 =00000009                M vcrr2	=	$09
00001955 =00000009                M vcrr3	=	$09
00001955 =00000009                M vcrr4	=	$09
00001955                            	smpsVcTotalLevel    $86, $19, $2C, $2D
00001955 =00000086                M vctl1	=	$86
00001955 =00000019                M vctl2	=	$19
00001955 =0000002C                M vctl3	=	$2c
00001955 =0000002D                M vctl4	=	$2d
00001955 38                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001956 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001956 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001956 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001956 =00000080                M vctlmask1	=	$80
00001956 3A11 0A02                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000195A D450 140E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000195E 0502 0888                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001962 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001966 9909 091A                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000196A 2D19 2C86                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000196E                            
0000196E                            ;	Voice $20
0000196E                            ;	$0D
0000196E                            ;	$32, $04, $02, $01, 	$1F, $19, $19, $19, 	$0A, $05, $05, $05
0000196E                            ;	$00, $02, $02, $02, 	$3F, $2F, $2F, $2F, 	$28, $86, $8B, $93
0000196E                            	smpsVcAlgorithm     $05
0000196E =00000005                M vcalgorithm	=	$05
0000196E                            	smpsVcFeedback      $01
0000196E =00000001                M vcfeedback	=	$01
0000196E                            	smpsVcUnusedBits    $00
0000196E =00000000                M vcunusedbits	=	$00
0000196E =00000000                M vcd1r1unk	=	0
0000196E =00000000                M vcd1r2unk	=	0
0000196E =00000000                M vcd1r3unk	=	0
0000196E =00000000                M vcd1r4unk	=	0
0000196E                            	smpsVcDetune        $00, $00, $00, $03
0000196E =00000000                M vcdt1	=	$00
0000196E =00000000                M vcdt2	=	$00
0000196E =00000000                M vcdt3	=	$00
0000196E =00000003                M vcdt4	=	$03
0000196E                            	smpsVcCoarseFreq    $01, $02, $04, $02
0000196E =00000001                M vccf1	=	$01
0000196E =00000002                M vccf2	=	$02
0000196E =00000004                M vccf3	=	$04
0000196E =00000002                M vccf4	=	$02
0000196E                            	smpsVcRateScale     $00, $00, $00, $00
0000196E =00000000                M vcrs1	=	$00
0000196E =00000000                M vcrs2	=	$00
0000196E =00000000                M vcrs3	=	$00
0000196E =00000000                M vcrs4	=	$00
0000196E                            	smpsVcAttackRate    $19, $19, $19, $1F
0000196E =00000019                M vcar1	=	$19
0000196E =00000019                M vcar2	=	$19
0000196E =00000019                M vcar3	=	$19
0000196E =0000001F                M vcar4	=	$1f
0000196E                            	smpsVcAmpMod        $00, $00, $00, $00
0000196E =00000000                M vcam1	=	$00
0000196E =00000000                M vcam2	=	$00
0000196E =00000000                M vcam3	=	$00
0000196E =00000000                M vcam4	=	$00
0000196E                            	smpsVcDecayRate1    $05, $05, $05, $0A
0000196E =00000005                M vcd1r1	=	$05
0000196E =00000005                M vcd1r2	=	$05
0000196E =00000005                M vcd1r3	=	$05
0000196E =0000000A                M vcd1r4	=	$0a
0000196E                            	smpsVcDecayRate2    $02, $02, $02, $00
0000196E =00000002                M vcd2r1	=	$02
0000196E =00000002                M vcd2r2	=	$02
0000196E =00000002                M vcd2r3	=	$02
0000196E =00000000                M vcd2r4	=	$00
0000196E                            	smpsVcDecayLevel    $02, $02, $02, $03
0000196E =00000002                M vcdl1	=	$02
0000196E =00000002                M vcdl2	=	$02
0000196E =00000002                M vcdl3	=	$02
0000196E =00000003                M vcdl4	=	$03
0000196E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000196E =0000000F                M vcrr1	=	$0f
0000196E =0000000F                M vcrr2	=	$0f
0000196E =0000000F                M vcrr3	=	$0f
0000196E =0000000F                M vcrr4	=	$0f
0000196E                            	smpsVcTotalLevel    $93, $8B, $86, $28
0000196E =00000093                M vctl1	=	$93
0000196E =0000008B                M vctl2	=	$8b
0000196E =00000086                M vctl3	=	$86
0000196E =00000028                M vctl4	=	$28
0000196E 0D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000196F =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000196F =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000196F =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000196F =00000080                M vctlmask1	=	$80
0000196F 3202 0401                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00001973 1F19 1919                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001977 0A05 0505                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000197B 0002 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000197F 3F2F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001983 288B 8693                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001987                            
00001987                            ;	Voice $21
00001987                            ;	$3A
00001987                            ;	$20, $23, $60, $01, 	$1E, $1F, $1F, $1F, 	$0A, $0A, $0B, $0A
00001987                            ;	$05, $07, $0A, $08, 	$A4, $85, $96, $78, 	$21, $25, $28, $00
00001987                            	smpsVcAlgorithm     $02
00001987 =00000002                M vcalgorithm	=	$02
00001987                            	smpsVcFeedback      $07
00001987 =00000007                M vcfeedback	=	$07
00001987                            	smpsVcUnusedBits    $00
00001987 =00000000                M vcunusedbits	=	$00
00001987 =00000000                M vcd1r1unk	=	0
00001987 =00000000                M vcd1r2unk	=	0
00001987 =00000000                M vcd1r3unk	=	0
00001987 =00000000                M vcd1r4unk	=	0
00001987                            	smpsVcDetune        $00, $06, $02, $02
00001987 =00000000                M vcdt1	=	$00
00001987 =00000006                M vcdt2	=	$06
00001987 =00000002                M vcdt3	=	$02
00001987 =00000002                M vcdt4	=	$02
00001987                            	smpsVcCoarseFreq    $01, $00, $03, $00
00001987 =00000001                M vccf1	=	$01
00001987 =00000000                M vccf2	=	$00
00001987 =00000003                M vccf3	=	$03
00001987 =00000000                M vccf4	=	$00
00001987                            	smpsVcRateScale     $00, $00, $00, $00
00001987 =00000000                M vcrs1	=	$00
00001987 =00000000                M vcrs2	=	$00
00001987 =00000000                M vcrs3	=	$00
00001987 =00000000                M vcrs4	=	$00
00001987                            	smpsVcAttackRate    $1F, $1F, $1F, $1E
00001987 =0000001F                M vcar1	=	$1f
00001987 =0000001F                M vcar2	=	$1f
00001987 =0000001F                M vcar3	=	$1f
00001987 =0000001E                M vcar4	=	$1e
00001987                            	smpsVcAmpMod        $00, $00, $00, $00
00001987 =00000000                M vcam1	=	$00
00001987 =00000000                M vcam2	=	$00
00001987 =00000000                M vcam3	=	$00
00001987 =00000000                M vcam4	=	$00
00001987                            	smpsVcDecayRate1    $0A, $0B, $0A, $0A
00001987 =0000000A                M vcd1r1	=	$0a
00001987 =0000000B                M vcd1r2	=	$0b
00001987 =0000000A                M vcd1r3	=	$0a
00001987 =0000000A                M vcd1r4	=	$0a
00001987                            	smpsVcDecayRate2    $08, $0A, $07, $05
00001987 =00000008                M vcd2r1	=	$08
00001987 =0000000A                M vcd2r2	=	$0a
00001987 =00000007                M vcd2r3	=	$07
00001987 =00000005                M vcd2r4	=	$05
00001987                            	smpsVcDecayLevel    $07, $09, $08, $0A
00001987 =00000007                M vcdl1	=	$07
00001987 =00000009                M vcdl2	=	$09
00001987 =00000008                M vcdl3	=	$08
00001987 =0000000A                M vcdl4	=	$0a
00001987                            	smpsVcReleaseRate   $08, $06, $05, $04
00001987 =00000008                M vcrr1	=	$08
00001987 =00000006                M vcrr2	=	$06
00001987 =00000005                M vcrr3	=	$05
00001987 =00000004                M vcrr4	=	$04
00001987                            	smpsVcTotalLevel    $00, $28, $25, $21
00001987 =00000000                M vctl1	=	$00
00001987 =00000028                M vctl2	=	$28
00001987 =00000025                M vctl3	=	$25
00001987 =00000021                M vctl4	=	$21
00001987 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001988 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001988 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001988 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001988 =00000080                M vctlmask1	=	$80
00001988 2060 2301                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000198C 1E1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001990 0A0B 0A0A                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001994 050A 0708                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001998 A496 8578                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000199C 2128 2580                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000019A0                            
000019A0                            ;	Voice $22
000019A0                            ;	$3A
000019A0                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000019A0                            ;	$02, $00, $00, $00, 	$18, $18, $28, $28, 	$19, $20, $2A, $00
000019A0                            	smpsVcAlgorithm     $02
000019A0 =00000002                M vcalgorithm	=	$02
000019A0                            	smpsVcFeedback      $07
000019A0 =00000007                M vcfeedback	=	$07
000019A0                            	smpsVcUnusedBits    $00
000019A0 =00000000                M vcunusedbits	=	$00
000019A0 =00000000                M vcd1r1unk	=	0
000019A0 =00000000                M vcd1r2unk	=	0
000019A0 =00000000                M vcd1r3unk	=	0
000019A0 =00000000                M vcd1r4unk	=	0
000019A0                            	smpsVcDetune        $04, $03, $05, $03
000019A0 =00000004                M vcdt1	=	$04
000019A0 =00000003                M vcdt2	=	$03
000019A0 =00000005                M vcdt3	=	$05
000019A0 =00000003                M vcdt4	=	$03
000019A0                            	smpsVcCoarseFreq    $02, $02, $06, $02
000019A0 =00000002                M vccf1	=	$02
000019A0 =00000002                M vccf2	=	$02
000019A0 =00000006                M vccf3	=	$06
000019A0 =00000002                M vccf4	=	$02
000019A0                            	smpsVcRateScale     $01, $00, $01, $02
000019A0 =00000001                M vcrs1	=	$01
000019A0 =00000000                M vcrs2	=	$00
000019A0 =00000001                M vcrs3	=	$01
000019A0 =00000002                M vcrs4	=	$02
000019A0                            	smpsVcAttackRate    $12, $15, $0F, $0D
000019A0 =00000012                M vcar1	=	$12
000019A0 =00000015                M vcar2	=	$15
000019A0 =0000000F                M vcar3	=	$0f
000019A0 =0000000D                M vcar4	=	$0d
000019A0                            	smpsVcAmpMod        $00, $00, $00, $00
000019A0 =00000000                M vcam1	=	$00
000019A0 =00000000                M vcam2	=	$00
000019A0 =00000000                M vcam3	=	$00
000019A0 =00000000                M vcam4	=	$00
000019A0                            	smpsVcDecayRate1    $04, $07, $08, $06
000019A0 =00000004                M vcd1r1	=	$04
000019A0 =00000007                M vcd1r2	=	$07
000019A0 =00000008                M vcd1r3	=	$08
000019A0 =00000006                M vcd1r4	=	$06
000019A0                            	smpsVcDecayRate2    $00, $00, $00, $02
000019A0 =00000000                M vcd2r1	=	$00
000019A0 =00000000                M vcd2r2	=	$00
000019A0 =00000000                M vcd2r3	=	$00
000019A0 =00000002                M vcd2r4	=	$02
000019A0                            	smpsVcDecayLevel    $02, $02, $01, $01
000019A0 =00000002                M vcdl1	=	$02
000019A0 =00000002                M vcdl2	=	$02
000019A0 =00000001                M vcdl3	=	$01
000019A0 =00000001                M vcdl4	=	$01
000019A0                            	smpsVcReleaseRate   $08, $08, $08, $08
000019A0 =00000008                M vcrr1	=	$08
000019A0 =00000008                M vcrr2	=	$08
000019A0 =00000008                M vcrr3	=	$08
000019A0 =00000008                M vcrr4	=	$08
000019A0                            	smpsVcTotalLevel    $00, $2A, $20, $19
000019A0 =00000000                M vctl1	=	$00
000019A0 =0000002A                M vctl2	=	$2a
000019A0 =00000020                M vctl3	=	$20
000019A0 =00000019                M vctl4	=	$19
000019A0 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000019A1 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000019A1 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000019A1 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000019A1 =00000080                M vctlmask1	=	$80
000019A1 3232 5642                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000019A5 8D15 4F52                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000019A9 0607 0804                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000019AD 0200 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000019B1 1828 1828                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000019B5 192A 2080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000019B9                            
000019B9                            ;	Voice $23
000019B9                            ;	$3A
000019B9                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000019B9                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000019B9                            	smpsVcAlgorithm     $02
000019B9 =00000002                M vcalgorithm	=	$02
000019B9                            	smpsVcFeedback      $07
000019B9 =00000007                M vcfeedback	=	$07
000019B9                            	smpsVcUnusedBits    $00
000019B9 =00000000                M vcunusedbits	=	$00
000019B9 =00000000                M vcd1r1unk	=	0
000019B9 =00000000                M vcd1r2unk	=	0
000019B9 =00000000                M vcd1r3unk	=	0
000019B9 =00000000                M vcd1r4unk	=	0
000019B9                            	smpsVcDetune        $00, $05, $00, $05
000019B9 =00000000                M vcdt1	=	$00
000019B9 =00000005                M vcdt2	=	$05
000019B9 =00000000                M vcdt3	=	$00
000019B9 =00000005                M vcdt4	=	$05
000019B9                            	smpsVcCoarseFreq    $02, $01, $08, $01
000019B9 =00000002                M vccf1	=	$02
000019B9 =00000001                M vccf2	=	$01
000019B9 =00000008                M vccf3	=	$08
000019B9 =00000001                M vccf4	=	$01
000019B9                            	smpsVcRateScale     $00, $00, $00, $00
000019B9 =00000000                M vcrs1	=	$00
000019B9 =00000000                M vcrs2	=	$00
000019B9 =00000000                M vcrs3	=	$00
000019B9 =00000000                M vcrs4	=	$00
000019B9                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000019B9 =00000010                M vcar1	=	$10
000019B9 =0000001E                M vcar2	=	$1e
000019B9 =0000001E                M vcar3	=	$1e
000019B9 =0000001E                M vcar4	=	$1e
000019B9                            	smpsVcAmpMod        $00, $00, $00, $00
000019B9 =00000000                M vcam1	=	$00
000019B9 =00000000                M vcam2	=	$00
000019B9 =00000000                M vcam3	=	$00
000019B9 =00000000                M vcam4	=	$00
000019B9                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000019B9 =0000000F                M vcd1r1	=	$0f
000019B9 =0000001F                M vcd1r2	=	$1f
000019B9 =0000001F                M vcd1r3	=	$1f
000019B9 =0000001F                M vcd1r4	=	$1f
000019B9                            	smpsVcDecayRate2    $02, $00, $00, $00
000019B9 =00000002                M vcd2r1	=	$02
000019B9 =00000000                M vcd2r2	=	$00
000019B9 =00000000                M vcd2r3	=	$00
000019B9 =00000000                M vcd2r4	=	$00
000019B9                            	smpsVcDecayLevel    $01, $00, $00, $00
000019B9 =00000001                M vcdl1	=	$01
000019B9 =00000000                M vcdl2	=	$00
000019B9 =00000000                M vcdl3	=	$00
000019B9 =00000000                M vcdl4	=	$00
000019B9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000019B9 =0000000F                M vcrr1	=	$0f
000019B9 =0000000F                M vcrr2	=	$0f
000019B9 =0000000F                M vcrr3	=	$0f
000019B9 =0000000F                M vcrr4	=	$0f
000019B9                            	smpsVcTotalLevel    $81, $22, $24, $18
000019B9 =00000081                M vctl1	=	$81
000019B9 =00000022                M vctl2	=	$22
000019B9 =00000024                M vctl3	=	$24
000019B9 =00000018                M vctl4	=	$18
000019B9 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000019BA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000019BA =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000019BA =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000019BA =00000080                M vctlmask1	=	$80
000019BA 5151 0802                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000019BE 1E1E 1E10                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000019C2 1F1F 1F0F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000019C6 0000 0002                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000019CA 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000019CE 1822 2481                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000019D2                            
000019D2                            ;	Voice $24
000019D2                            ;	$20
000019D2                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000019D2                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000019D2                            	smpsVcAlgorithm     $00
000019D2 =00000000                M vcalgorithm	=	$00
000019D2                            	smpsVcFeedback      $04
000019D2 =00000004                M vcfeedback	=	$04
000019D2                            	smpsVcUnusedBits    $00
000019D2 =00000000                M vcunusedbits	=	$00
000019D2 =00000000                M vcd1r1unk	=	0
000019D2 =00000000                M vcd1r2unk	=	0
000019D2 =00000000                M vcd1r3unk	=	0
000019D2 =00000000                M vcd1r4unk	=	0
000019D2                            	smpsVcDetune        $03, $03, $03, $03
000019D2 =00000003                M vcdt1	=	$03
000019D2 =00000003                M vcdt2	=	$03
000019D2 =00000003                M vcdt3	=	$03
000019D2 =00000003                M vcdt4	=	$03
000019D2                            	smpsVcCoarseFreq    $01, $00, $05, $06
000019D2 =00000001                M vccf1	=	$01
000019D2 =00000000                M vccf2	=	$00
000019D2 =00000005                M vccf3	=	$05
000019D2 =00000006                M vccf4	=	$06
000019D2                            	smpsVcRateScale     $02, $02, $03, $03
000019D2 =00000002                M vcrs1	=	$02
000019D2 =00000002                M vcrs2	=	$02
000019D2 =00000003                M vcrs3	=	$03
000019D2 =00000003                M vcrs4	=	$03
000019D2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000019D2 =0000001F                M vcar1	=	$1f
000019D2 =0000001F                M vcar2	=	$1f
000019D2 =0000001F                M vcar3	=	$1f
000019D2 =0000001F                M vcar4	=	$1f
000019D2                            	smpsVcAmpMod        $00, $00, $00, $00
000019D2 =00000000                M vcam1	=	$00
000019D2 =00000000                M vcam2	=	$00
000019D2 =00000000                M vcam3	=	$00
000019D2 =00000000                M vcam4	=	$00
000019D2                            	smpsVcDecayRate1    $06, $09, $06, $07
000019D2 =00000006                M vcd1r1	=	$06
000019D2 =00000009                M vcd1r2	=	$09
000019D2 =00000006                M vcd1r3	=	$06
000019D2 =00000007                M vcd1r4	=	$07
000019D2                            	smpsVcDecayRate2    $08, $06, $06, $07
000019D2 =00000008                M vcd2r1	=	$08
000019D2 =00000006                M vcd2r2	=	$06
000019D2 =00000006                M vcd2r3	=	$06
000019D2 =00000007                M vcd2r4	=	$07
000019D2                            	smpsVcDecayLevel    $0F, $01, $01, $02
000019D2 =0000000F                M vcdl1	=	$0f
000019D2 =00000001                M vcdl2	=	$01
000019D2 =00000001                M vcdl3	=	$01
000019D2 =00000002                M vcdl4	=	$02
000019D2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000019D2 =0000000F                M vcrr1	=	$0f
000019D2 =0000000F                M vcrr2	=	$0f
000019D2 =0000000F                M vcrr3	=	$0f
000019D2 =0000000F                M vcrr4	=	$0f
000019D2                            	smpsVcTotalLevel    $80, $13, $37, $19
000019D2 =00000080                M vctl1	=	$80
000019D2 =00000013                M vctl2	=	$13
000019D2 =00000037                M vctl3	=	$37
000019D2 =00000019                M vctl4	=	$19
000019D2 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000019D3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000019D3 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000019D3 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000019D3 =00000080                M vctlmask1	=	$80
000019D3 3630 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000019D7 DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000019DB 0709 0606                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000019DF 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000019E3 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000019E7 1913 3780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000019EB                            
000019EB                            ;	Voice $25
000019EB                            ;	$3D
000019EB                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000019EB                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000019EB                            	smpsVcAlgorithm     $05
000019EB =00000005                M vcalgorithm	=	$05
000019EB                            	smpsVcFeedback      $07
000019EB =00000007                M vcfeedback	=	$07
000019EB                            	smpsVcUnusedBits    $00
000019EB =00000000                M vcunusedbits	=	$00
000019EB =00000000                M vcd1r1unk	=	0
000019EB =00000000                M vcd1r2unk	=	0
000019EB =00000000                M vcd1r3unk	=	0
000019EB =00000000                M vcd1r4unk	=	0
000019EB                            	smpsVcDetune        $00, $00, $00, $00
000019EB =00000000                M vcdt1	=	$00
000019EB =00000000                M vcdt2	=	$00
000019EB =00000000                M vcdt3	=	$00
000019EB =00000000                M vcdt4	=	$00
000019EB                            	smpsVcCoarseFreq    $02, $02, $02, $01
000019EB =00000002                M vccf1	=	$02
000019EB =00000002                M vccf2	=	$02
000019EB =00000002                M vccf3	=	$02
000019EB =00000001                M vccf4	=	$01
000019EB                            	smpsVcRateScale     $00, $02, $00, $00
000019EB =00000000                M vcrs1	=	$00
000019EB =00000002                M vcrs2	=	$02
000019EB =00000000                M vcrs3	=	$00
000019EB =00000000                M vcrs4	=	$00
000019EB                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000019EB =0000000E                M vcar1	=	$0e
000019EB =0000000C                M vcar2	=	$0c
000019EB =0000000E                M vcar3	=	$0e
000019EB =00000014                M vcar4	=	$14
000019EB                            	smpsVcAmpMod        $00, $00, $00, $00
000019EB =00000000                M vcam1	=	$00
000019EB =00000000                M vcam2	=	$00
000019EB =00000000                M vcam3	=	$00
000019EB =00000000                M vcam4	=	$00
000019EB                            	smpsVcDecayRate1    $05, $02, $05, $08
000019EB =00000005                M vcd1r1	=	$05
000019EB =00000002                M vcd1r2	=	$02
000019EB =00000005                M vcd1r3	=	$05
000019EB =00000008                M vcd1r4	=	$08
000019EB                            	smpsVcDecayRate2    $00, $00, $00, $00
000019EB =00000000                M vcd2r1	=	$00
000019EB =00000000                M vcd2r2	=	$00
000019EB =00000000                M vcd2r3	=	$00
000019EB =00000000                M vcd2r4	=	$00
000019EB                            	smpsVcDecayLevel    $01, $01, $01, $01
000019EB =00000001                M vcdl1	=	$01
000019EB =00000001                M vcdl2	=	$01
000019EB =00000001                M vcdl3	=	$01
000019EB =00000001                M vcdl4	=	$01
000019EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000019EB =0000000F                M vcrr1	=	$0f
000019EB =0000000F                M vcrr2	=	$0f
000019EB =0000000F                M vcrr3	=	$0f
000019EB =0000000F                M vcrr4	=	$0f
000019EB                            	smpsVcTotalLevel    $80, $80, $80, $1A
000019EB =00000080                M vctl1	=	$80
000019EB =00000080                M vctl2	=	$80
000019EB =00000080                M vctl3	=	$80
000019EB =0000001A                M vctl4	=	$1a
000019EB 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000019EC =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000019EC =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000019EC =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000019EC =00000080                M vctlmask1	=	$80
000019EC 0102 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000019F0 148C 0E0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000019F4 0802 0505                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000019F8 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000019FC 1F1F 1F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00001A00 1A80 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001A04                            
00001A04                            		
00001A04                            Second:	group word,org(0)
00001A04                            
00001A04                            		section SecondProgram,Second	
00000000                            Sound20:	include "sound/sfx/A0 - Jump.asm"
00000000                            Sound20_Jump_Header:
00000000                            	smpsHeaderStartSong 2
00000000 =00000000                M songstart_1584	equ	offset(*)
00000000                            	smpsHeaderVoiceNull
00000000 0000                     M 	dc.w	$0000
00000002                            	smpsHeaderTempoSFX  $01
00000002 01                       M 	dc.b	$01
00000003                            	smpsHeaderChanSFX   $01
00000003 01                       M 	dc.b	$01
00000004                            
00000004                            	smpsHeaderSFXChannel cPSG1, Sound20_Jump_PSG1,	$F4, $00
00000004 8080                     M 	dc.b	$80,cpsg1
00000006                          M 	z80_ptr	sound20_jump_psg1
00000006 0000                     M 	dc.w	(((sound20_jump_psg1)<<8)&$ff00)|(((sound20_jump_psg1)>>8)&$ff)|$80
00000008 F400                     M 	dc.b	$f4,$00
0000000A                            
0000000A                            ; PSG1 Data
0000000A                            Sound20_Jump_PSG1:
0000000A                            	smpsPSGvoice        $00
0000000A F500                     M 	dc.b	$f5,$00
0000000C 9E05                       	dc.b	nF2, $05
0000000E                            	smpsModSet          $02, $01, $F8, $65
0000000E F002 01F8 65             M 	dc.b	$f0,$02,$01,$f8,$65
00000013 A315                       	dc.b	nBb2, $15
00000015                            	smpsStop
00000015 F2                       M 	dc.b	$f2
00000016                            Sound21:	include "sound/sfx/A1 - Checkpoint.asm"
00000016                            Sound21_Checkpoint_Header:
00000016                            	smpsHeaderStartSong 2
00000016 =00000016                M songstart_1593	equ	offset(*)
00000016                            	smpsHeaderVoice     Sound21_Checkpoint_Voices
00000016                          M 	z80_ptr	sound21_checkpoint_voices
00000016 0000                     M 	dc.w	(((sound21_checkpoint_voices)<<8)&$ff00)|(((sound21_checkpoint_voices)>>8)&$ff)|$80
00000018                            	smpsHeaderTempoSFX  $01
00000018 01                       M 	dc.b	$01
00000019                            	smpsHeaderChanSFX   $01
00000019 01                       M 	dc.b	$01
0000001A                            
0000001A                            	smpsHeaderSFXChannel cFM5, Sound21_Checkpoint_FM5,	$00, $01
0000001A 8005                     M 	dc.b	$80,cfm5
0000001C                          M 	z80_ptr	sound21_checkpoint_fm5
0000001C 0000                     M 	dc.w	(((sound21_checkpoint_fm5)<<8)&$ff00)|(((sound21_checkpoint_fm5)>>8)&$ff)|$80
0000001E 0001                     M 	dc.b	$00,$01
00000020                            
00000020                            Sound21_Checkpoint_Voices:
00000020                            ;	Voice $00
00000020                            ;	$3C
00000020                            ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
00000020                            ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$17, $80, $20, $80
00000020                            	smpsVcAlgorithm     $04
00000020 =00000004                M vcalgorithm	=	$04
00000020                            	smpsVcFeedback      $07
00000020 =00000007                M vcfeedback	=	$07
00000020                            	smpsVcUnusedBits    $00
00000020 =00000000                M vcunusedbits	=	$00
00000020 =00000000                M vcd1r1unk	=	0
00000020 =00000000                M vcd1r2unk	=	0
00000020 =00000000                M vcd1r3unk	=	0
00000020 =00000000                M vcd1r4unk	=	0
00000020                            	smpsVcDetune        $00, $00, $00, $00
00000020 =00000000                M vcdt1	=	$00
00000020 =00000000                M vcdt2	=	$00
00000020 =00000000                M vcdt3	=	$00
00000020 =00000000                M vcdt4	=	$00
00000020                            	smpsVcCoarseFreq    $01, $0A, $01, $05
00000020 =00000001                M vccf1	=	$01
00000020 =0000000A                M vccf2	=	$0a
00000020 =00000001                M vccf3	=	$01
00000020 =00000005                M vccf4	=	$05
00000020                            	smpsVcRateScale     $01, $01, $01, $01
00000020 =00000001                M vcrs1	=	$01
00000020 =00000001                M vcrs2	=	$01
00000020 =00000001                M vcrs3	=	$01
00000020 =00000001                M vcrs4	=	$01
00000020                            	smpsVcAttackRate    $1C, $1C, $1C, $16
00000020 =0000001C                M vcar1	=	$1c
00000020 =0000001C                M vcar2	=	$1c
00000020 =0000001C                M vcar3	=	$1c
00000020 =00000016                M vcar4	=	$16
00000020                            	smpsVcAmpMod        $00, $00, $00, $00
00000020 =00000000                M vcam1	=	$00
00000020 =00000000                M vcam2	=	$00
00000020 =00000000                M vcam3	=	$00
00000020 =00000000                M vcam4	=	$00
00000020                            	smpsVcDecayRate1    $11, $11, $11, $0E
00000020 =00000011                M vcd1r1	=	$11
00000020 =00000011                M vcd1r2	=	$11
00000020 =00000011                M vcd1r3	=	$11
00000020 =0000000E                M vcd1r4	=	$0e
00000020                            	smpsVcDecayRate2    $0A, $06, $0A, $09
00000020 =0000000A                M vcd2r1	=	$0a
00000020 =00000006                M vcd2r2	=	$06
00000020 =0000000A                M vcd2r3	=	$0a
00000020 =00000009                M vcd2r4	=	$09
00000020                            	smpsVcDecayLevel    $03, $03, $03, $04
00000020 =00000003                M vcdl1	=	$03
00000020 =00000003                M vcdl2	=	$03
00000020 =00000003                M vcdl3	=	$03
00000020 =00000004                M vcdl4	=	$04
00000020                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000020 =0000000F                M vcrr1	=	$0f
00000020 =0000000F                M vcrr2	=	$0f
00000020 =0000000F                M vcrr3	=	$0f
00000020 =0000000F                M vcrr4	=	$0f
00000020                            	smpsVcTotalLevel    $00, $20, $00, $17
00000020 =00000000                M vctl1	=	$00
00000020 =00000020                M vctl2	=	$20
00000020 =00000000                M vctl3	=	$00
00000020 =00000017                M vctl4	=	$17
00000020 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000021 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000021 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000021 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000021 =00000080                M vctlmask1	=	$80
00000021 050A 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000025 565C 5C5C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000029 0E11 1111                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000002D 0906 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000031 4F3F 3F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000035 1720 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000039                            
00000039                            ; FM5 Data
00000039                            Sound21_Checkpoint_FM5:
00000039                            	smpsSetvoice        $00
00000039 EF00                     M 	dc.b	$ef,$00
0000003B BD06 BA16                  	dc.b	nC5, $06, nA4, $16
0000003F                            	smpsStop
0000003F F2                       M 	dc.b	$f2
00000040                            Sound22:	include "sound/sfx/A2 - Spike Switch.asm"
00000040                            Sound22_SpikeSwitch_Header:
00000040                            	smpsHeaderStartSong 2
00000040 =00000040                M songstart_1615	equ	offset(*)
00000040                            	smpsHeaderVoiceNull
00000040 0000                     M 	dc.w	$0000
00000042                            	smpsHeaderTempoSFX  $01
00000042 01                       M 	dc.b	$01
00000043                            	smpsHeaderChanSFX   $01
00000043 01                       M 	dc.b	$01
00000044                            
00000044                            	smpsHeaderSFXChannel cPSG3, Sound22_SpikeSwitch_PSG3,	$00, $00
00000044 80C0                     M 	dc.b	$80,cpsg3
00000046                          M 	z80_ptr	sound22_spikeswitch_psg3
00000046 0000                     M 	dc.w	(((sound22_spikeswitch_psg3)<<8)&$ff00)|(((sound22_spikeswitch_psg3)>>8)&$ff)|$80
00000048 0000                     M 	dc.b	$00,$00
0000004A                            
0000004A                            ; PSG3 Data
0000004A                            Sound22_SpikeSwitch_PSG3:
0000004A                            	smpsModSet          $01, $01, $F0, $08
0000004A F001 01F0 08             M 	dc.b	$f0,$01,$01,$f0,$08
0000004F                            	smpsPSGform         $E7
0000004F F3E7                     M 	dc.b	$f3,$e7
00000051 C004 CA04                  	dc.b	nEb5, $04, nCs6, $04
00000055                            
00000055                            Sound22_SpikeSwitch_Loop00:
00000055 C001                       	dc.b	nEb5, $01
00000057                            	smpsPSGAlterVol     $01
00000057 EC01                     M 	dc.b	$ec,$01
00000059                            	smpsLoop            $00, $06, Sound22_SpikeSwitch_Loop00
00000059 F700 06                  M 	dc.b	$f7,$00,$06
0000005C                          M 	z80_ptr	sound22_spikeswitch_loop00
0000005C 0000                     M 	dc.w	(((sound22_spikeswitch_loop00)<<8)&$ff00)|(((sound22_spikeswitch_loop00)>>8)&$ff)|$80
0000005E                            	smpsStop
0000005E F2                       M 	dc.b	$f2
0000005F                            Sound23:	include "sound/sfx/A3 - Hurt.asm"
0000005F                            Sound23_Hurt_Header:
0000005F                            	smpsHeaderStartSong 2
0000005F =0000005F                M songstart_1627	equ	offset(*)
0000005F                            	smpsHeaderVoice     Sound23_Hurt_Voices
0000005F                          M 	z80_ptr	sound23_hurt_voices
0000005F 0000                     M 	dc.w	(((sound23_hurt_voices)<<8)&$ff00)|(((sound23_hurt_voices)>>8)&$ff)|$80
00000061                            	smpsHeaderTempoSFX  $01
00000061 01                       M 	dc.b	$01
00000062                            	smpsHeaderChanSFX   $01
00000062 01                       M 	dc.b	$01
00000063                            
00000063                            	smpsHeaderSFXChannel cFM5, Sound23_Hurt_FM5,	$F4, $00
00000063 8005                     M 	dc.b	$80,cfm5
00000065                          M 	z80_ptr	sound23_hurt_fm5
00000065 0000                     M 	dc.w	(((sound23_hurt_fm5)<<8)&$ff00)|(((sound23_hurt_fm5)>>8)&$ff)|$80
00000067 F400                     M 	dc.b	$f4,$00
00000069                            
00000069                            ; FM5 Data
00000069                            Sound23_Hurt_FM5:
00000069                            	smpsSetvoice        $00
00000069 EF00                     M 	dc.b	$ef,$00
0000006B B007 E7AD                  	dc.b	nB3, $07, smpsNoAttack, nAb3
0000006F                            
0000006F                            Sound23_Hurt_Loop00:
0000006F 01                         	dc.b	$01
00000070                            	smpsAlterVol        $01
00000070 E601                     M 	dc.b	$e6,$01
00000072                            	smpsLoop            $00, $2F, Sound23_Hurt_Loop00
00000072 F700 2F                  M 	dc.b	$f7,$00,$2f
00000075                          M 	z80_ptr	sound23_hurt_loop00
00000075 0000                     M 	dc.w	(((sound23_hurt_loop00)<<8)&$ff00)|(((sound23_hurt_loop00)>>8)&$ff)|$80
00000077                            	smpsStop
00000077 F2                       M 	dc.b	$f2
00000078                            
00000078                            Sound23_Hurt_Voices:
00000078                            ;	Voice $00
00000078                            ;	$30
00000078                            ;	$30, $30, $30, $30, 	$9E, $D8, $DC, $DC, 	$0E, $0A, $04, $05
00000078                            ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$14, $3C, $14, $80
00000078                            	smpsVcAlgorithm     $00
00000078 =00000000                M vcalgorithm	=	$00
00000078                            	smpsVcFeedback      $06
00000078 =00000006                M vcfeedback	=	$06
00000078                            	smpsVcUnusedBits    $00
00000078 =00000000                M vcunusedbits	=	$00
00000078 =00000000                M vcd1r1unk	=	0
00000078 =00000000                M vcd1r2unk	=	0
00000078 =00000000                M vcd1r3unk	=	0
00000078 =00000000                M vcd1r4unk	=	0
00000078                            	smpsVcDetune        $03, $03, $03, $03
00000078 =00000003                M vcdt1	=	$03
00000078 =00000003                M vcdt2	=	$03
00000078 =00000003                M vcdt3	=	$03
00000078 =00000003                M vcdt4	=	$03
00000078                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000078 =00000000                M vccf1	=	$00
00000078 =00000000                M vccf2	=	$00
00000078 =00000000                M vccf3	=	$00
00000078 =00000000                M vccf4	=	$00
00000078                            	smpsVcRateScale     $03, $03, $03, $02
00000078 =00000003                M vcrs1	=	$03
00000078 =00000003                M vcrs2	=	$03
00000078 =00000003                M vcrs3	=	$03
00000078 =00000002                M vcrs4	=	$02
00000078                            	smpsVcAttackRate    $1C, $1C, $18, $1E
00000078 =0000001C                M vcar1	=	$1c
00000078 =0000001C                M vcar2	=	$1c
00000078 =00000018                M vcar3	=	$18
00000078 =0000001E                M vcar4	=	$1e
00000078                            	smpsVcAmpMod        $00, $00, $00, $00
00000078 =00000000                M vcam1	=	$00
00000078 =00000000                M vcam2	=	$00
00000078 =00000000                M vcam3	=	$00
00000078 =00000000                M vcam4	=	$00
00000078                            	smpsVcDecayRate1    $05, $04, $0A, $0E
00000078 =00000005                M vcd1r1	=	$05
00000078 =00000004                M vcd1r2	=	$04
00000078 =0000000A                M vcd1r3	=	$0a
00000078 =0000000E                M vcd1r4	=	$0e
00000078                            	smpsVcDecayRate2    $08, $08, $08, $08
00000078 =00000008                M vcd2r1	=	$08
00000078 =00000008                M vcd2r2	=	$08
00000078 =00000008                M vcd2r3	=	$08
00000078 =00000008                M vcd2r4	=	$08
00000078                            	smpsVcDecayLevel    $0B, $0B, $0B, $0B
00000078 =0000000B                M vcdl1	=	$0b
00000078 =0000000B                M vcdl2	=	$0b
00000078 =0000000B                M vcdl3	=	$0b
00000078 =0000000B                M vcdl4	=	$0b
00000078                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000078 =0000000F                M vcrr1	=	$0f
00000078 =0000000F                M vcrr2	=	$0f
00000078 =0000000F                M vcrr3	=	$0f
00000078 =0000000F                M vcrr4	=	$0f
00000078                            	smpsVcTotalLevel    $00, $14, $3C, $14
00000078 =00000000                M vctl1	=	$00
00000078 =00000014                M vctl2	=	$14
00000078 =0000003C                M vctl3	=	$3c
00000078 =00000014                M vctl4	=	$14
00000078 30                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000079 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000079 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000079 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000079 =00000080                M vctlmask1	=	$80
00000079 3030 3030                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000007D 9EDC D8DC                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000081 0E04 0A05                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000085 0808 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000089 BFBF BFBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000008D 1414 3C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000091                            
00000091                            Sound24:	include "sound/sfx/A4 - Skidding.asm"
00000091                            Sound24_Skidding_Header:
00000091                            	smpsHeaderStartSong 2
00000091 =00000091                M songstart_1652	equ	offset(*)
00000091                            	smpsHeaderVoiceNull
00000091 0000                     M 	dc.w	$0000
00000093                            	smpsHeaderTempoSFX  $01
00000093 01                       M 	dc.b	$01
00000094                            	smpsHeaderChanSFX   $02
00000094 02                       M 	dc.b	$02
00000095                            
00000095                            	smpsHeaderSFXChannel cPSG2, Sound24_Skidding_PSG2,	$F4, $00
00000095 80A0                     M 	dc.b	$80,cpsg2
00000097                          M 	z80_ptr	sound24_skidding_psg2
00000097 0000                     M 	dc.w	(((sound24_skidding_psg2)<<8)&$ff00)|(((sound24_skidding_psg2)>>8)&$ff)|$80
00000099 F400                     M 	dc.b	$f4,$00
0000009B                            	smpsHeaderSFXChannel cPSG3, Sound24_Skidding_PSG3,	$F4, $00
0000009B 80C0                     M 	dc.b	$80,cpsg3
0000009D                          M 	z80_ptr	sound24_skidding_psg3
0000009D 0000                     M 	dc.w	(((sound24_skidding_psg3)<<8)&$ff00)|(((sound24_skidding_psg3)>>8)&$ff)|$80
0000009F F400                     M 	dc.b	$f4,$00
000000A1                            
000000A1                            ; PSG2 Data
000000A1                            Sound24_Skidding_PSG2:
000000A1                            	smpsPSGvoice        $00
000000A1 F500                     M 	dc.b	$f5,$00
000000A3 AF01 80AF 8003             	dc.b	nBb3, $01, nRst, nBb3, nRst, $03
000000A9                            
000000A9                            Sound24_Skidding_Loop01:
000000A9 AF01 8001                  	dc.b	nBb3, $01, nRst, $01
000000AD                            	smpsLoop            $00, $0B, Sound24_Skidding_Loop01
000000AD F700 0B                  M 	dc.b	$f7,$00,$0b
000000B0                          M 	z80_ptr	sound24_skidding_loop01
000000B0 0000                     M 	dc.w	(((sound24_skidding_loop01)<<8)&$ff00)|(((sound24_skidding_loop01)>>8)&$ff)|$80
000000B2                            	smpsStop
000000B2 F2                       M 	dc.b	$f2
000000B3                            
000000B3                            ; PSG3 Data
000000B3                            Sound24_Skidding_PSG3:
000000B3                            	smpsPSGvoice        $00
000000B3 F500                     M 	dc.b	$f5,$00
000000B5 8001 AD80 AD80 03          	dc.b	nRst, $01, nAb3, nRst, nAb3, nRst, $03
000000BC                            
000000BC                            Sound24_Skidding_Loop00:
000000BC AD01 8001                  	dc.b	nAb3, $01, nRst, $01
000000C0                            	smpsLoop            $00, $0B, Sound24_Skidding_Loop00
000000C0 F700 0B                  M 	dc.b	$f7,$00,$0b
000000C3                          M 	z80_ptr	sound24_skidding_loop00
000000C3 0000                     M 	dc.w	(((sound24_skidding_loop00)<<8)&$ff00)|(((sound24_skidding_loop00)>>8)&$ff)|$80
000000C5                            	smpsStop
000000C5 F2                       M 	dc.b	$f2
000000C6                            Sound25:	include "sound/sfx/A5 - Block Push.asm"
000000C6                            Sound25_BlockPush_Header:
000000C6                            	smpsHeaderStartSong 2
000000C6 =000000C6                M songstart_1668	equ	offset(*)
000000C6                            	smpsHeaderVoice     Sound25_BlockPush_Voices
000000C6                          M 	z80_ptr	sound25_blockpush_voices
000000C6 0000                     M 	dc.w	(((sound25_blockpush_voices)<<8)&$ff00)|(((sound25_blockpush_voices)>>8)&$ff)|$80
000000C8                            	smpsHeaderTempoSFX  $01
000000C8 01                       M 	dc.b	$01
000000C9                            	smpsHeaderChanSFX   $01
000000C9 01                       M 	dc.b	$01
000000CA                            
000000CA                            	smpsHeaderSFXChannel cFM5, Sound25_BlockPush_FM5,	$00, $00
000000CA 8005                     M 	dc.b	$80,cfm5
000000CC                          M 	z80_ptr	sound25_blockpush_fm5
000000CC 0000                     M 	dc.w	(((sound25_blockpush_fm5)<<8)&$ff00)|(((sound25_blockpush_fm5)>>8)&$ff)|$80
000000CE 0000                     M 	dc.b	$00,$00
000000D0                            
000000D0                            ; FM5 Data
000000D0                            Sound25_BlockPush_FM5:
000000D0                            	smpsSetvoice        $00
000000D0 EF00                     M 	dc.b	$ef,$00
000000D2 8001 8B0A 8002             	dc.b	nRst, $01, nBb0, $0A, nRst, $02
000000D8                            	smpsStop
000000D8 F2                       M 	dc.b	$f2
000000D9                            
000000D9                            Sound25_BlockPush_Voices:
000000D9                            ;	Voice $00
000000D9                            ;	$FA
000000D9                            ;	$21, $30, $10, $32, 	$2F, $1F, $2F, $2F, 	$05, $08, $09, $02
000000D9                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$0F, $1A, $0E, $80
000000D9                            	smpsVcAlgorithm     $02
000000D9 =00000002                M vcalgorithm	=	$02
000000D9                            	smpsVcFeedback      $07
000000D9 =00000007                M vcfeedback	=	$07
000000D9                            	smpsVcUnusedBits    $03
000000D9 =00000003                M vcunusedbits	=	$03
000000D9 =00000000                M vcd1r1unk	=	0
000000D9 =00000000                M vcd1r2unk	=	0
000000D9 =00000000                M vcd1r3unk	=	0
000000D9 =00000000                M vcd1r4unk	=	0
000000D9                            	smpsVcDetune        $03, $01, $03, $02
000000D9 =00000003                M vcdt1	=	$03
000000D9 =00000001                M vcdt2	=	$01
000000D9 =00000003                M vcdt3	=	$03
000000D9 =00000002                M vcdt4	=	$02
000000D9                            	smpsVcCoarseFreq    $02, $00, $00, $01
000000D9 =00000002                M vccf1	=	$02
000000D9 =00000000                M vccf2	=	$00
000000D9 =00000000                M vccf3	=	$00
000000D9 =00000001                M vccf4	=	$01
000000D9                            	smpsVcRateScale     $00, $00, $00, $00
000000D9 =00000000                M vcrs1	=	$00
000000D9 =00000000                M vcrs2	=	$00
000000D9 =00000000                M vcrs3	=	$00
000000D9 =00000000                M vcrs4	=	$00
000000D9                            	smpsVcAttackRate    $2F, $2F, $1F, $2F
000000D9 =0000002F                M vcar1	=	$2f
000000D9 =0000002F                M vcar2	=	$2f
000000D9 =0000001F                M vcar3	=	$1f
000000D9 =0000002F                M vcar4	=	$2f
000000D9                            	smpsVcAmpMod        $00, $00, $00, $00
000000D9 =00000000                M vcam1	=	$00
000000D9 =00000000                M vcam2	=	$00
000000D9 =00000000                M vcam3	=	$00
000000D9 =00000000                M vcam4	=	$00
000000D9                            	smpsVcDecayRate1    $02, $09, $08, $05
000000D9 =00000002                M vcd1r1	=	$02
000000D9 =00000009                M vcd1r2	=	$09
000000D9 =00000008                M vcd1r3	=	$08
000000D9 =00000005                M vcd1r4	=	$05
000000D9                            	smpsVcDecayRate2    $02, $06, $0F, $06
000000D9 =00000002                M vcd2r1	=	$02
000000D9 =00000006                M vcd2r2	=	$06
000000D9 =0000000F                M vcd2r3	=	$0f
000000D9 =00000006                M vcd2r4	=	$06
000000D9                            	smpsVcDecayLevel    $02, $04, $02, $01
000000D9 =00000002                M vcdl1	=	$02
000000D9 =00000004                M vcdl2	=	$04
000000D9 =00000002                M vcdl3	=	$02
000000D9 =00000001                M vcdl4	=	$01
000000D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000000D9 =0000000F                M vcrr1	=	$0f
000000D9 =0000000F                M vcrr2	=	$0f
000000D9 =0000000F                M vcrr3	=	$0f
000000D9 =0000000F                M vcrr4	=	$0f
000000D9                            	smpsVcTotalLevel    $00, $0E, $1A, $0F
000000D9 =00000000                M vctl1	=	$00
000000D9 =0000000E                M vctl2	=	$0e
000000D9 =0000001A                M vctl3	=	$1a
000000D9 =0000000F                M vctl4	=	$0f
000000D9 FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000000DA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000000DA =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000000DA =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000000DA =00000080                M vctlmask1	=	$80
000000DA 2110 3032                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000000DE 2F2F 1F2F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000000E2 0509 0802                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000000E6 0606 0F02                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000000EA 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000000EE 0F0E 1A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000000F2                            
000000F2                            Sound26:	include "sound/sfx/A6 - Hurt by Spikes.asm"
000000F2                            Sound26_HurtBySpikes_Header:
000000F2                            	smpsHeaderStartSong 2
000000F2 =000000F2                M songstart_1690	equ	offset(*)
000000F2                            	smpsHeaderVoice     Sound26_HurtBySpikes_Voices
000000F2                          M 	z80_ptr	sound26_hurtbyspikes_voices
000000F2 0000                     M 	dc.w	(((sound26_hurtbyspikes_voices)<<8)&$ff00)|(((sound26_hurtbyspikes_voices)>>8)&$ff)|$80
000000F4                            	smpsHeaderTempoSFX  $01
000000F4 01                       M 	dc.b	$01
000000F5                            	smpsHeaderChanSFX   $01
000000F5 01                       M 	dc.b	$01
000000F6                            
000000F6                            	smpsHeaderSFXChannel cFM5, Sound26_HurtBySpikes_FM5,	$F2, $00
000000F6 8005                     M 	dc.b	$80,cfm5
000000F8                          M 	z80_ptr	sound26_hurtbyspikes_fm5
000000F8 0000                     M 	dc.w	(((sound26_hurtbyspikes_fm5)<<8)&$ff00)|(((sound26_hurtbyspikes_fm5)>>8)&$ff)|$80
000000FA F200                     M 	dc.b	$f2,$00
000000FC                            
000000FC                            ; FM5 Data
000000FC                            Sound26_HurtBySpikes_FM5:
000000FC                            	smpsSetvoice        $00
000000FC EF00                     M 	dc.b	$ef,$00
000000FE                            	smpsModSet          $01, $01, $10, $FF
000000FE F001 0110 FF             M 	dc.b	$f0,$01,$01,$10,$ff
00000103 CF05 D725                  	dc.b	nFs6, $05, nD7, $25
00000107                            	smpsStop
00000107 F2                       M 	dc.b	$f2
00000108                            
00000108                            Sound26_HurtBySpikes_Voices:
00000108                            ;	Voice $00
00000108                            ;	$3B
00000108                            ;	$3C, $39, $30, $31, 	$DF, $1F, $1F, $DF, 	$04, $05, $04, $01
00000108                            ;	$04, $04, $04, $02, 	$FF, $0F, $1F, $AF, 	$29, $20, $0F, $80
00000108                            	smpsVcAlgorithm     $03
00000108 =00000003                M vcalgorithm	=	$03
00000108                            	smpsVcFeedback      $07
00000108 =00000007                M vcfeedback	=	$07
00000108                            	smpsVcUnusedBits    $00
00000108 =00000000                M vcunusedbits	=	$00
00000108 =00000000                M vcd1r1unk	=	0
00000108 =00000000                M vcd1r2unk	=	0
00000108 =00000000                M vcd1r3unk	=	0
00000108 =00000000                M vcd1r4unk	=	0
00000108                            	smpsVcDetune        $03, $03, $03, $03
00000108 =00000003                M vcdt1	=	$03
00000108 =00000003                M vcdt2	=	$03
00000108 =00000003                M vcdt3	=	$03
00000108 =00000003                M vcdt4	=	$03
00000108                            	smpsVcCoarseFreq    $01, $00, $09, $0C
00000108 =00000001                M vccf1	=	$01
00000108 =00000000                M vccf2	=	$00
00000108 =00000009                M vccf3	=	$09
00000108 =0000000C                M vccf4	=	$0c
00000108                            	smpsVcRateScale     $03, $00, $00, $03
00000108 =00000003                M vcrs1	=	$03
00000108 =00000000                M vcrs2	=	$00
00000108 =00000000                M vcrs3	=	$00
00000108 =00000003                M vcrs4	=	$03
00000108                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000108 =0000001F                M vcar1	=	$1f
00000108 =0000001F                M vcar2	=	$1f
00000108 =0000001F                M vcar3	=	$1f
00000108 =0000001F                M vcar4	=	$1f
00000108                            	smpsVcAmpMod        $00, $00, $00, $00
00000108 =00000000                M vcam1	=	$00
00000108 =00000000                M vcam2	=	$00
00000108 =00000000                M vcam3	=	$00
00000108 =00000000                M vcam4	=	$00
00000108                            	smpsVcDecayRate1    $01, $04, $05, $04
00000108 =00000001                M vcd1r1	=	$01
00000108 =00000004                M vcd1r2	=	$04
00000108 =00000005                M vcd1r3	=	$05
00000108 =00000004                M vcd1r4	=	$04
00000108                            	smpsVcDecayRate2    $02, $04, $04, $04
00000108 =00000002                M vcd2r1	=	$02
00000108 =00000004                M vcd2r2	=	$04
00000108 =00000004                M vcd2r3	=	$04
00000108 =00000004                M vcd2r4	=	$04
00000108                            	smpsVcDecayLevel    $0A, $01, $00, $0F
00000108 =0000000A                M vcdl1	=	$0a
00000108 =00000001                M vcdl2	=	$01
00000108 =00000000                M vcdl3	=	$00
00000108 =0000000F                M vcdl4	=	$0f
00000108                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000108 =0000000F                M vcrr1	=	$0f
00000108 =0000000F                M vcrr2	=	$0f
00000108 =0000000F                M vcrr3	=	$0f
00000108 =0000000F                M vcrr4	=	$0f
00000108                            	smpsVcTotalLevel    $00, $0F, $20, $29
00000108 =00000000                M vctl1	=	$00
00000108 =0000000F                M vctl2	=	$0f
00000108 =00000020                M vctl3	=	$20
00000108 =00000029                M vctl4	=	$29
00000108 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000109 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000109 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000109 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000109 =00000080                M vctlmask1	=	$80
00000109 3C30 3931                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000010D DF1F 1FDF                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000111 0404 0501                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000115 0404 0402                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000119 FF1F 0FAF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000011D 290F 2080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000121                            
00000121                            Sound27:	include "sound/sfx/A7 - Sparkle.asm"
00000121                            Sound27_Sparkle_Header:
00000121                            	smpsHeaderStartSong 2, 1
00000121 =00000121                M songstart_1713	equ	offset(*)
00000121                            	smpsHeaderVoice     Sound27_Sparkle_Voices
00000121                          M 	z80_ptr	sound27_sparkle_voices
00000121 0000                     M 	dc.w	(((sound27_sparkle_voices)<<8)&$ff00)|(((sound27_sparkle_voices)>>8)&$ff)|$80
00000123                            	smpsHeaderTempoSFX  $01
00000123 01                       M 	dc.b	$01
00000124                            	smpsHeaderChanSFX   $01
00000124 01                       M 	dc.b	$01
00000125                            
00000125                            	smpsHeaderSFXChannel cFM4, Sound27_Sparkle_FM4,	$0C, $1C
00000125 8004                     M 	dc.b	$80,cfm4
00000127                          M 	z80_ptr	sound27_sparkle_fm4
00000127 0000                     M 	dc.w	(((sound27_sparkle_fm4)<<8)&$ff00)|(((sound27_sparkle_fm4)>>8)&$ff)|$80
00000129 0C1C                     M 	dc.b	$0c,$1c
0000012B                            
0000012B                            ; FM4 Data
0000012B                            Sound27_Sparkle_FM4:
0000012B                            	smpsSetvoice        $00
0000012B EF00                     M 	dc.b	$ef,$00
0000012D C105 C405 C92B             	dc.b	nE5, $05, nG5, $05, nC6, $2B
00000133                            	smpsStop
00000133 F2                       M 	dc.b	$f2
00000134                            
00000134                            Sound27_Sparkle_Voices:
00000134                            ;	Voice $00
00000134                            ;	$07
00000134                            ;	$73, $33, $33, $73, 	$0F, $14, $19, $1A, 	$0A, $0A, $0A, $0A
00000134                            ;	$0A, $0A, $0A, $0A, 	$57, $57, $57, $57, 	$00, $00, $00, $00
00000134                            	smpsVcAlgorithm     $07
00000134 =00000007                M vcalgorithm	=	$07
00000134                            	smpsVcFeedback      $00
00000134 =00000000                M vcfeedback	=	$00
00000134                            	smpsVcUnusedBits    $00
00000134 =00000000                M vcunusedbits	=	$00
00000134 =00000000                M vcd1r1unk	=	0
00000134 =00000000                M vcd1r2unk	=	0
00000134 =00000000                M vcd1r3unk	=	0
00000134 =00000000                M vcd1r4unk	=	0
00000134                            	smpsVcDetune        $07, $03, $03, $07
00000134 =00000007                M vcdt1	=	$07
00000134 =00000003                M vcdt2	=	$03
00000134 =00000003                M vcdt3	=	$03
00000134 =00000007                M vcdt4	=	$07
00000134                            	smpsVcCoarseFreq    $03, $03, $03, $03
00000134 =00000003                M vccf1	=	$03
00000134 =00000003                M vccf2	=	$03
00000134 =00000003                M vccf3	=	$03
00000134 =00000003                M vccf4	=	$03
00000134                            	smpsVcRateScale     $00, $00, $00, $00
00000134 =00000000                M vcrs1	=	$00
00000134 =00000000                M vcrs2	=	$00
00000134 =00000000                M vcrs3	=	$00
00000134 =00000000                M vcrs4	=	$00
00000134                            	smpsVcAttackRate    $1A, $19, $14, $0F
00000134 =0000001A                M vcar1	=	$1a
00000134 =00000019                M vcar2	=	$19
00000134 =00000014                M vcar3	=	$14
00000134 =0000000F                M vcar4	=	$0f
00000134                            	smpsVcAmpMod        $00, $00, $00, $00
00000134 =00000000                M vcam1	=	$00
00000134 =00000000                M vcam2	=	$00
00000134 =00000000                M vcam3	=	$00
00000134 =00000000                M vcam4	=	$00
00000134                            	smpsVcDecayRate1    $0A, $0A, $0A, $0A
00000134 =0000000A                M vcd1r1	=	$0a
00000134 =0000000A                M vcd1r2	=	$0a
00000134 =0000000A                M vcd1r3	=	$0a
00000134 =0000000A                M vcd1r4	=	$0a
00000134                            	smpsVcDecayRate2    $0A, $0A, $0A, $0A
00000134 =0000000A                M vcd2r1	=	$0a
00000134 =0000000A                M vcd2r2	=	$0a
00000134 =0000000A                M vcd2r3	=	$0a
00000134 =0000000A                M vcd2r4	=	$0a
00000134                            	smpsVcDecayLevel    $05, $05, $05, $05
00000134 =00000005                M vcdl1	=	$05
00000134 =00000005                M vcdl2	=	$05
00000134 =00000005                M vcdl3	=	$05
00000134 =00000005                M vcdl4	=	$05
00000134                            	smpsVcReleaseRate   $07, $07, $07, $07
00000134 =00000007                M vcrr1	=	$07
00000134 =00000007                M vcrr2	=	$07
00000134 =00000007                M vcrr3	=	$07
00000134 =00000007                M vcrr4	=	$07
00000134                            	smpsVcTotalLevel    $00, $00, $00, $00
00000134 =00000000                M vctl1	=	$00
00000134 =00000000                M vctl2	=	$00
00000134 =00000000                M vctl3	=	$00
00000134 =00000000                M vctl4	=	$00
00000134 07                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000135 =FFFFFF80                M vctlmask4	=	((vcalgorithm=7)<<7)
00000135 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000135 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000135 =00000080                M vctlmask1	=	$80
00000135 7333 3373                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000139 0F19 141A                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000013D 0A0A 0A0A                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000141 0A0A 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000145 5757 5757                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000149 8080 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000014D                            
0000014D                            Sound28:	include "sound/sfx/A8 - Beep.asm"
0000014D                            Sound28_Beep_Header:
0000014D                            	smpsHeaderStartSong 2
0000014D =0000014D                M songstart_1735	equ	offset(*)
0000014D                            	smpsHeaderVoiceNull
0000014D 0000                     M 	dc.w	$0000
0000014F                            	smpsHeaderTempoSFX  $01
0000014F 01                       M 	dc.b	$01
00000150                            	smpsHeaderChanSFX   $01
00000150 01                       M 	dc.b	$01
00000151                            
00000151                            	smpsHeaderSFXChannel cPSG1, Sound28_Beep_PSG1,	$E8, $03
00000151 8080                     M 	dc.b	$80,cpsg1
00000153                          M 	z80_ptr	sound28_beep_psg1
00000153 0000                     M 	dc.w	(((sound28_beep_psg1)<<8)&$ff00)|(((sound28_beep_psg1)>>8)&$ff)|$80
00000155 E803                     M 	dc.b	$e8,$03
00000157                            
00000157                            ; PSG1 Data
00000157                            Sound28_Beep_PSG1:
00000157                            	smpsPSGvoice        fTone_04
00000157 F504                     M 	dc.b	$f5,ftone_04
00000159 CB04                       	dc.b	nD6, $04
0000015B                            	smpsStop
0000015B F2                       M 	dc.b	$f2
0000015C                            Sound29:	include "sound/sfx/A9 - Special Stage Item (Unused).asm"
0000015C                            Sound29_Bwoop_Header:
0000015C                            	smpsHeaderStartSong 2
0000015C =0000015C                M songstart_1743	equ	offset(*)
0000015C                            	smpsHeaderVoiceNull
0000015C 0000                     M 	dc.w	$0000
0000015E                            	smpsHeaderTempoSFX  $01
0000015E 01                       M 	dc.b	$01
0000015F                            	smpsHeaderChanSFX   $01
0000015F 01                       M 	dc.b	$01
00000160                            
00000160                            	smpsHeaderSFXChannel cPSG2, Sound29_Bwoop_PSG2,	$00, $00
00000160 80A0                     M 	dc.b	$80,cpsg2
00000162                          M 	z80_ptr	sound29_bwoop_psg2
00000162 0000                     M 	dc.w	(((sound29_bwoop_psg2)<<8)&$ff00)|(((sound29_bwoop_psg2)>>8)&$ff)|$80
00000164 0000                     M 	dc.b	$00,$00
00000166                            
00000166                            ; PSG2 Data
00000166                            Sound29_Bwoop_PSG2:
00000166                            	smpsModSet          $01, $01, $E6, $35
00000166 F001 01E6 35             M 	dc.b	$f0,$01,$01,$e6,$35
0000016B 8E06                       	dc.b	nCs1, $06
0000016D                            	smpsStop
0000016D F2                       M 	dc.b	$f2
0000016E                            Sound2A:	include "sound/sfx/AA - Splash.asm"
0000016E                            Sound2A_Splash_Header:
0000016E                            	smpsHeaderStartSong 2
0000016E =0000016E                M songstart_1751	equ	offset(*)
0000016E                            	smpsHeaderVoice     Sound2A_Splash_Voices
0000016E                          M 	z80_ptr	sound2a_splash_voices
0000016E 0000                     M 	dc.w	(((sound2a_splash_voices)<<8)&$ff00)|(((sound2a_splash_voices)>>8)&$ff)|$80
00000170                            	smpsHeaderTempoSFX  $01
00000170 01                       M 	dc.b	$01
00000171                            	smpsHeaderChanSFX   $02
00000171 02                       M 	dc.b	$02
00000172                            
00000172                            	smpsHeaderSFXChannel cPSG3, Sound2A_Splash_PSG3,	$00, $00
00000172 80C0                     M 	dc.b	$80,cpsg3
00000174                          M 	z80_ptr	sound2a_splash_psg3
00000174 0000                     M 	dc.w	(((sound2a_splash_psg3)<<8)&$ff00)|(((sound2a_splash_psg3)>>8)&$ff)|$80
00000176 0000                     M 	dc.b	$00,$00
00000178                            	smpsHeaderSFXChannel cFM5, Sound2A_Splash_FM5,	$00, $03
00000178 8005                     M 	dc.b	$80,cfm5
0000017A                          M 	z80_ptr	sound2a_splash_fm5
0000017A 0000                     M 	dc.w	(((sound2a_splash_fm5)<<8)&$ff00)|(((sound2a_splash_fm5)>>8)&$ff)|$80
0000017C 0003                     M 	dc.b	$00,$03
0000017E                            
0000017E                            ; PSG3 Data
0000017E                            Sound2A_Splash_PSG3:
0000017E                            	smpsPSGvoice        $00
0000017E F500                     M 	dc.b	$f5,$00
00000180                            	smpsPSGform         $E7
00000180 F3E7                     M 	dc.b	$f3,$e7
00000182 C205 C605 E7               	dc.b	nF5, $05, nMaxPSG, $05, smpsNoAttack
00000187                            
00000187                            Sound2A_Splash_Loop00:
00000187 07                         	dc.b	$07
00000188                            	smpsPSGAlterVol     $01
00000188 EC01                     M 	dc.b	$ec,$01
0000018A E7                         	dc.b	smpsNoAttack
0000018B                            	smpsLoop            $00, $0F, Sound2A_Splash_Loop00
0000018B F700 0F                  M 	dc.b	$f7,$00,$0f
0000018E                          M 	z80_ptr	sound2a_splash_loop00
0000018E 0000                     M 	dc.w	(((sound2a_splash_loop00)<<8)&$ff00)|(((sound2a_splash_loop00)>>8)&$ff)|$80
00000190                            	smpsStop
00000190 F2                       M 	dc.b	$f2
00000191                            
00000191                            ; FM5 Data
00000191                            Sound2A_Splash_FM5:
00000191                            	smpsSetvoice        $00
00000191 EF00                     M 	dc.b	$ef,$00
00000193 A614                       	dc.b	nCs3, $14
00000195                            	smpsStop
00000195 F2                       M 	dc.b	$f2
00000196                            
00000196                            Sound2A_Splash_Voices:
00000196                            ;	Voice $00
00000196                            ;	$00
00000196                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
00000196                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
00000196                            	smpsVcAlgorithm     $00
00000196 =00000000                M vcalgorithm	=	$00
00000196                            	smpsVcFeedback      $00
00000196 =00000000                M vcfeedback	=	$00
00000196                            	smpsVcUnusedBits    $00
00000196 =00000000                M vcunusedbits	=	$00
00000196 =00000000                M vcd1r1unk	=	0
00000196 =00000000                M vcd1r2unk	=	0
00000196 =00000000                M vcd1r3unk	=	0
00000196 =00000000                M vcd1r4unk	=	0
00000196                            	smpsVcDetune        $00, $00, $00, $00
00000196 =00000000                M vcdt1	=	$00
00000196 =00000000                M vcdt2	=	$00
00000196 =00000000                M vcdt3	=	$00
00000196 =00000000                M vcdt4	=	$00
00000196                            	smpsVcCoarseFreq    $00, $02, $03, $00
00000196 =00000000                M vccf1	=	$00
00000196 =00000002                M vccf2	=	$02
00000196 =00000003                M vccf3	=	$03
00000196 =00000000                M vccf4	=	$00
00000196                            	smpsVcRateScale     $00, $00, $03, $03
00000196 =00000000                M vcrs1	=	$00
00000196 =00000000                M vcrs2	=	$00
00000196 =00000003                M vcrs3	=	$03
00000196 =00000003                M vcrs4	=	$03
00000196                            	smpsVcAttackRate    $1F, $1F, $1F, $19
00000196 =0000001F                M vcar1	=	$1f
00000196 =0000001F                M vcar2	=	$1f
00000196 =0000001F                M vcar3	=	$1f
00000196 =00000019                M vcar4	=	$19
00000196                            	smpsVcAmpMod        $00, $00, $00, $00
00000196 =00000000                M vcam1	=	$00
00000196 =00000000                M vcam2	=	$00
00000196 =00000000                M vcam3	=	$00
00000196 =00000000                M vcam4	=	$00
00000196                            	smpsVcDecayRate1    $0F, $14, $11, $12
00000196 =0000000F                M vcd1r1	=	$0f
00000196 =00000014                M vcd1r2	=	$14
00000196 =00000011                M vcd1r3	=	$11
00000196 =00000012                M vcd1r4	=	$12
00000196                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
00000196 =0000000D                M vcd2r1	=	$0d
00000196 =0000000A                M vcd2r2	=	$0a
00000196 =00000000                M vcd2r3	=	$00
00000196 =0000000A                M vcd2r4	=	$0a
00000196                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00000196 =0000000F                M vcdl1	=	$0f
00000196 =0000000F                M vcdl2	=	$0f
00000196 =0000000F                M vcdl3	=	$0f
00000196 =0000000F                M vcdl4	=	$0f
00000196                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000196 =0000000F                M vcrr1	=	$0f
00000196 =0000000F                M vcrr2	=	$0f
00000196 =0000000F                M vcrr3	=	$0f
00000196 =0000000F                M vcrr4	=	$0f
00000196                            	smpsVcTotalLevel    $00, $27, $07, $22
00000196 =00000000                M vctl1	=	$00
00000196 =00000027                M vctl2	=	$27
00000196 =00000007                M vctl3	=	$07
00000196 =00000022                M vctl4	=	$22
00000196 00                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000197 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000197 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000197 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000197 =00000080                M vctlmask1	=	$80
00000197 0002 0300                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000019B D91F DF1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000019F 1214 110F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000001A3 0A0A 000D                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001A7 FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001AB 2227 0780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000001AF                            
000001AF                            Sound2B:	include "sound/sfx/AB - Swish.asm"
000001AF                            Sound2B_Swish_Header:
000001AF                            	smpsHeaderStartSong 2
000001AF =000001AF                M songstart_1781	equ	offset(*)
000001AF                            	smpsHeaderVoiceNull
000001AF 0000                     M 	dc.w	$0000
000001B1                            	smpsHeaderTempoSFX  $01
000001B1 01                       M 	dc.b	$01
000001B2                            	smpsHeaderChanSFX   $01
000001B2 01                       M 	dc.b	$01
000001B3                            
000001B3                            	smpsHeaderSFXChannel cPSG3, Sound2B_Swish_PSG3,	$00, $00
000001B3 80C0                     M 	dc.b	$80,cpsg3
000001B5                          M 	z80_ptr	sound2b_swish_psg3
000001B5 0000                     M 	dc.w	(((sound2b_swish_psg3)<<8)&$ff00)|(((sound2b_swish_psg3)>>8)&$ff)|$80
000001B7 0000                     M 	dc.b	$00,$00
000001B9                            
000001B9                            ; PSG3 Data
000001B9                            Sound2B_Swish_PSG3:
000001B9                            	smpsPSGvoice        $00
000001B9 F500                     M 	dc.b	$f5,$00
000001BB                            	smpsPSGform         $E7
000001BB F3E7                     M 	dc.b	$f3,$e7
000001BD C603 8003 C601 E7          	dc.b	nMaxPSG, $03, nRst, $03, nMaxPSG, $01, smpsNoAttack
000001C4                            
000001C4                            Sound2B_Swish_Loop00:
000001C4 01                         	dc.b	$01
000001C5                            	smpsPSGAlterVol     $01
000001C5 EC01                     M 	dc.b	$ec,$01
000001C7 E7                         	dc.b	smpsNoAttack
000001C8                            	smpsLoop            $00, $15, Sound2B_Swish_Loop00
000001C8 F700 15                  M 	dc.b	$f7,$00,$15
000001CB                          M 	z80_ptr	sound2b_swish_loop00
000001CB 0000                     M 	dc.w	(((sound2b_swish_loop00)<<8)&$ff00)|(((sound2b_swish_loop00)>>8)&$ff)|$80
000001CD                            	smpsStop
000001CD F2                       M 	dc.b	$f2
000001CE                            Sound2C:	include "sound/sfx/AC - Boss Hit.asm"
000001CE                            Sound2C_BossHit_Header:
000001CE                            	smpsHeaderStartSong 2
000001CE =000001CE                M songstart_1793	equ	offset(*)
000001CE                            	smpsHeaderVoice     Sound2C_39_4B_Voices
000001CE                          M 	z80_ptr	sound2c_39_4b_voices
000001CE 0000                     M 	dc.w	(((sound2c_39_4b_voices)<<8)&$ff00)|(((sound2c_39_4b_voices)>>8)&$ff)|$80
000001D0                            	smpsHeaderTempoSFX  $01
000001D0 01                       M 	dc.b	$01
000001D1                            	smpsHeaderChanSFX   $01
000001D1 01                       M 	dc.b	$01
000001D2                            
000001D2                            	smpsHeaderSFXChannel cFM5, Sound2C_BossHit_FM5,	$00, $00
000001D2 8005                     M 	dc.b	$80,cfm5
000001D4                          M 	z80_ptr	sound2c_bosshit_fm5
000001D4 0000                     M 	dc.w	(((sound2c_bosshit_fm5)<<8)&$ff00)|(((sound2c_bosshit_fm5)>>8)&$ff)|$80
000001D6 0000                     M 	dc.b	$00,$00
000001D8                            
000001D8                            ; FM5 Data
000001D8                            Sound2C_BossHit_FM5:
000001D8                            	smpsSetvoice        $00
000001D8 EF00                     M 	dc.b	$ef,$00
000001DA                            	smpsModSet          $01, $01, $0C, $01
000001DA F001 010C 01             M 	dc.b	$f0,$01,$01,$0c,$01
000001DF                            
000001DF                            Sound2C_BossHit_Loop00:
000001DF 810A                       	dc.b	nC0, $0A
000001E1                            	smpsAlterVol        $10
000001E1 E610                     M 	dc.b	$e6,$10
000001E3                            	smpsLoop            $00, $04, Sound2C_BossHit_Loop00
000001E3 F700 04                  M 	dc.b	$f7,$00,$04
000001E6                          M 	z80_ptr	sound2c_bosshit_loop00
000001E6 0000                     M 	dc.w	(((sound2c_bosshit_loop00)<<8)&$ff00)|(((sound2c_bosshit_loop00)>>8)&$ff)|$80
000001E8                            	smpsStop
000001E8 F2                       M 	dc.b	$f2
000001E9                            
000001E9                            Sound2C_39_4B_Voices:
000001E9                            ;	Voice $00
000001E9                            ;	$F9
000001E9                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000001E9                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000001E9                            	smpsVcAlgorithm     $01
000001E9 =00000001                M vcalgorithm	=	$01
000001E9                            	smpsVcFeedback      $07
000001E9 =00000007                M vcfeedback	=	$07
000001E9                            	smpsVcUnusedBits    $03
000001E9 =00000003                M vcunusedbits	=	$03
000001E9 =00000000                M vcd1r1unk	=	0
000001E9 =00000000                M vcd1r2unk	=	0
000001E9 =00000000                M vcd1r3unk	=	0
000001E9 =00000000                M vcd1r4unk	=	0
000001E9                            	smpsVcDetune        $03, $01, $03, $02
000001E9 =00000003                M vcdt1	=	$03
000001E9 =00000001                M vcdt2	=	$01
000001E9 =00000003                M vcdt3	=	$03
000001E9 =00000002                M vcdt4	=	$02
000001E9                            	smpsVcCoarseFreq    $02, $00, $00, $01
000001E9 =00000002                M vccf1	=	$02
000001E9 =00000000                M vccf2	=	$00
000001E9 =00000000                M vccf3	=	$00
000001E9 =00000001                M vccf4	=	$01
000001E9                            	smpsVcRateScale     $00, $00, $00, $00
000001E9 =00000000                M vcrs1	=	$00
000001E9 =00000000                M vcrs2	=	$00
000001E9 =00000000                M vcrs3	=	$00
000001E9 =00000000                M vcrs4	=	$00
000001E9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000001E9 =0000001F                M vcar1	=	$1f
000001E9 =0000001F                M vcar2	=	$1f
000001E9 =0000001F                M vcar3	=	$1f
000001E9 =0000001F                M vcar4	=	$1f
000001E9                            	smpsVcAmpMod        $00, $00, $00, $00
000001E9 =00000000                M vcam1	=	$00
000001E9 =00000000                M vcam2	=	$00
000001E9 =00000000                M vcam3	=	$00
000001E9 =00000000                M vcam4	=	$00
000001E9                            	smpsVcDecayRate1    $02, $09, $18, $05
000001E9 =00000002                M vcd1r1	=	$02
000001E9 =00000009                M vcd1r2	=	$09
000001E9 =00000018                M vcd1r3	=	$18
000001E9 =00000005                M vcd1r4	=	$05
000001E9                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000001E9 =00000005                M vcd2r1	=	$05
000001E9 =00000010                M vcd2r2	=	$10
000001E9 =0000001F                M vcd2r3	=	$1f
000001E9 =0000000B                M vcd2r4	=	$0b
000001E9                            	smpsVcDecayLevel    $02, $04, $02, $01
000001E9 =00000002                M vcdl1	=	$02
000001E9 =00000004                M vcdl2	=	$04
000001E9 =00000002                M vcdl3	=	$02
000001E9 =00000001                M vcdl4	=	$01
000001E9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000001E9 =0000000F                M vcrr1	=	$0f
000001E9 =0000000F                M vcrr2	=	$0f
000001E9 =0000000F                M vcrr3	=	$0f
000001E9 =0000000F                M vcrr4	=	$0f
000001E9                            	smpsVcTotalLevel    $00, $04, $07, $0E
000001E9 =00000000                M vctl1	=	$00
000001E9 =00000004                M vctl2	=	$04
000001E9 =00000007                M vctl3	=	$07
000001E9 =0000000E                M vctl4	=	$0e
000001E9 F9                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000001EA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000001EA =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000001EA =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000001EA =00000080                M vctlmask1	=	$80
000001EA 2110 3032                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000001EE 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000001F2 0509 1802                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000001F6 0B10 1F05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000001FA 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000001FE 0E04 0780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000202                            
00000202                            Sound2D:	include "sound/sfx/AD - Inhaling Bubble.asm"
00000202                            Sound2D_InhalingBubble_Header:
00000202                            	smpsHeaderStartSong 2, 1
00000202 =00000202                M songstart_1819	equ	offset(*)
00000202                            	smpsHeaderVoice     Sound2D_InhalingBubble_Voices
00000202                          M 	z80_ptr	sound2d_inhalingbubble_voices
00000202 0000                     M 	dc.w	(((sound2d_inhalingbubble_voices)<<8)&$ff00)|(((sound2d_inhalingbubble_voices)>>8)&$ff)|$80
00000204                            	smpsHeaderTempoSFX  $01
00000204 01                       M 	dc.b	$01
00000205                            	smpsHeaderChanSFX   $01
00000205 01                       M 	dc.b	$01
00000206                            
00000206                            	smpsHeaderSFXChannel cFM5, Sound2D_InhalingBubble_FM5,	$0E, $00
00000206 8005                     M 	dc.b	$80,cfm5
00000208                          M 	z80_ptr	sound2d_inhalingbubble_fm5
00000208 0000                     M 	dc.w	(((sound2d_inhalingbubble_fm5)<<8)&$ff00)|(((sound2d_inhalingbubble_fm5)>>8)&$ff)|$80
0000020A 0E00                     M 	dc.b	$0e,$00
0000020C                            
0000020C                            ; FM5 Data
0000020C                            Sound2D_InhalingBubble_FM5:
0000020C                            	smpsSetvoice        $00
0000020C EF00                     M 	dc.b	$ef,$00
0000020E                            	smpsModSet          $01, $01, $21, $6E
0000020E F001 0121 6E             M 	dc.b	$f0,$01,$01,$21,$6e
00000213 A607 8006                  	dc.b	nCs3, $07, nRst, $06
00000217                            	smpsModSet          $01, $01, $44, $1E
00000217 F001 0144 1E             M 	dc.b	$f0,$01,$01,$44,$1e
0000021C AD08                       	dc.b	nAb3, $08
0000021E                            	smpsStop
0000021E F2                       M 	dc.b	$f2
0000021F                            
0000021F                            Sound2D_InhalingBubble_Voices:
0000021F                            ;	Voice $00
0000021F                            ;	$35
0000021F                            ;	$05, $09, $08, $07, 	$1E, $0D, $0D, $0E, 	$0C, $15, $03, $06
0000021F                            ;	$16, $0E, $09, $10, 	$2F, $2F, $1F, $1F, 	$15, $12, $12, $80
0000021F                            	smpsVcAlgorithm     $05
0000021F =00000005                M vcalgorithm	=	$05
0000021F                            	smpsVcFeedback      $06
0000021F =00000006                M vcfeedback	=	$06
0000021F                            	smpsVcUnusedBits    $00
0000021F =00000000                M vcunusedbits	=	$00
0000021F =00000000                M vcd1r1unk	=	0
0000021F =00000000                M vcd1r2unk	=	0
0000021F =00000000                M vcd1r3unk	=	0
0000021F =00000000                M vcd1r4unk	=	0
0000021F                            	smpsVcDetune        $00, $00, $00, $00
0000021F =00000000                M vcdt1	=	$00
0000021F =00000000                M vcdt2	=	$00
0000021F =00000000                M vcdt3	=	$00
0000021F =00000000                M vcdt4	=	$00
0000021F                            	smpsVcCoarseFreq    $07, $08, $09, $05
0000021F =00000007                M vccf1	=	$07
0000021F =00000008                M vccf2	=	$08
0000021F =00000009                M vccf3	=	$09
0000021F =00000005                M vccf4	=	$05
0000021F                            	smpsVcRateScale     $00, $00, $00, $00
0000021F =00000000                M vcrs1	=	$00
0000021F =00000000                M vcrs2	=	$00
0000021F =00000000                M vcrs3	=	$00
0000021F =00000000                M vcrs4	=	$00
0000021F                            	smpsVcAttackRate    $0E, $0D, $0D, $1E
0000021F =0000000E                M vcar1	=	$0e
0000021F =0000000D                M vcar2	=	$0d
0000021F =0000000D                M vcar3	=	$0d
0000021F =0000001E                M vcar4	=	$1e
0000021F                            	smpsVcAmpMod        $00, $00, $00, $00
0000021F =00000000                M vcam1	=	$00
0000021F =00000000                M vcam2	=	$00
0000021F =00000000                M vcam3	=	$00
0000021F =00000000                M vcam4	=	$00
0000021F                            	smpsVcDecayRate1    $06, $03, $15, $0C
0000021F =00000006                M vcd1r1	=	$06
0000021F =00000003                M vcd1r2	=	$03
0000021F =00000015                M vcd1r3	=	$15
0000021F =0000000C                M vcd1r4	=	$0c
0000021F                            	smpsVcDecayRate2    $10, $09, $0E, $16
0000021F =00000010                M vcd2r1	=	$10
0000021F =00000009                M vcd2r2	=	$09
0000021F =0000000E                M vcd2r3	=	$0e
0000021F =00000016                M vcd2r4	=	$16
0000021F                            	smpsVcDecayLevel    $01, $01, $02, $02
0000021F =00000001                M vcdl1	=	$01
0000021F =00000001                M vcdl2	=	$01
0000021F =00000002                M vcdl3	=	$02
0000021F =00000002                M vcdl4	=	$02
0000021F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000021F =0000000F                M vcrr1	=	$0f
0000021F =0000000F                M vcrr2	=	$0f
0000021F =0000000F                M vcrr3	=	$0f
0000021F =0000000F                M vcrr4	=	$0f
0000021F                            	smpsVcTotalLevel    $80, $12, $12, $15
0000021F =00000080                M vctl1	=	$80
0000021F =00000012                M vctl2	=	$12
0000021F =00000012                M vctl3	=	$12
0000021F =00000015                M vctl4	=	$15
0000021F 35                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000220 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000220 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000220 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000220 =00000080                M vctlmask1	=	$80
00000220 0508 0907                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000224 1E0D 0D0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000228 0C03 1506                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000022C 1609 0E10                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000230 2F1F 2F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000234 1592 9280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000238                            
00000238                            Sound2E:	include "sound/sfx/AE - Lava Ball.asm"
00000238                            Sound2E_LavaBall_Header:
00000238                            	smpsHeaderStartSong 2
00000238 =00000238                M songstart_1843	equ	offset(*)
00000238                            	smpsHeaderVoice     Sound2E_33_Voices
00000238                          M 	z80_ptr	sound2e_33_voices
00000238 0000                     M 	dc.w	(((sound2e_33_voices)<<8)&$ff00)|(((sound2e_33_voices)>>8)&$ff)|$80
0000023A                            	smpsHeaderTempoSFX  $01
0000023A 01                       M 	dc.b	$01
0000023B                            	smpsHeaderChanSFX   $02
0000023B 02                       M 	dc.b	$02
0000023C                            
0000023C                            	smpsHeaderSFXChannel cFM5, Sound2E_LavaBall_FM5,	$00, $00
0000023C 8005                     M 	dc.b	$80,cfm5
0000023E                          M 	z80_ptr	sound2e_lavaball_fm5
0000023E 0000                     M 	dc.w	(((sound2e_lavaball_fm5)<<8)&$ff00)|(((sound2e_lavaball_fm5)>>8)&$ff)|$80
00000240 0000                     M 	dc.b	$00,$00
00000242                            	smpsHeaderSFXChannel cPSG3, Sound2E_LavaBall_PSG3,	$00, $00
00000242 80C0                     M 	dc.b	$80,cpsg3
00000244                          M 	z80_ptr	sound2e_lavaball_psg3
00000244 0000                     M 	dc.w	(((sound2e_lavaball_psg3)<<8)&$ff00)|(((sound2e_lavaball_psg3)>>8)&$ff)|$80
00000246 0000                     M 	dc.b	$00,$00
00000248                            
00000248                            ; FM5 Data
00000248                            Sound2E_LavaBall_FM5:
00000248                            	smpsSetvoice        $00
00000248 EF00                     M 	dc.b	$ef,$00
0000024A 8001                       	dc.b	nRst, $01
0000024C                            	smpsModSet          $01, $01, $40, $48
0000024C F001 0140 48             M 	dc.b	$f0,$01,$01,$40,$48
00000251 8306 8502                  	dc.b	nD0, $06, nE0, $02
00000255                            	smpsStop
00000255 F2                       M 	dc.b	$f2
00000256                            
00000256                            ; PSG3 Data
00000256                            Sound2E_LavaBall_PSG3:
00000256                            	smpsPSGvoice        $00
00000256 F500                     M 	dc.b	$f5,$00
00000258 800B                       	dc.b	nRst, $0B
0000025A                            	smpsPSGform         $E7
0000025A F3E7                     M 	dc.b	$f3,$e7
0000025C C601 E7                    	dc.b	nMaxPSG, $01, smpsNoAttack
0000025F                            
0000025F                            Sound2E_LavaBall_Loop00:
0000025F 02                         	dc.b	$02
00000260                            	smpsPSGAlterVol     $01
00000260 EC01                     M 	dc.b	$ec,$01
00000262 E7                         	dc.b	smpsNoAttack
00000263                            	smpsLoop            $00, $10, Sound2E_LavaBall_Loop00
00000263 F700 10                  M 	dc.b	$f7,$00,$10
00000266                          M 	z80_ptr	sound2e_lavaball_loop00
00000266 0000                     M 	dc.w	(((sound2e_lavaball_loop00)<<8)&$ff00)|(((sound2e_lavaball_loop00)>>8)&$ff)|$80
00000268                            	smpsStop
00000268 F2                       M 	dc.b	$f2
00000269                            
00000269                            Sound2E_33_Voices:
00000269                            ;	Voice $00
00000269                            ;	$FA
00000269                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
00000269                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
00000269                            	smpsVcAlgorithm     $02
00000269 =00000002                M vcalgorithm	=	$02
00000269                            	smpsVcFeedback      $07
00000269 =00000007                M vcfeedback	=	$07
00000269                            	smpsVcUnusedBits    $03
00000269 =00000003                M vcunusedbits	=	$03
00000269 =00000000                M vcd1r1unk	=	0
00000269 =00000000                M vcd1r2unk	=	0
00000269 =00000000                M vcd1r3unk	=	0
00000269 =00000000                M vcd1r4unk	=	0
00000269                            	smpsVcDetune        $00, $00, $00, $00
00000269 =00000000                M vcdt1	=	$00
00000269 =00000000                M vcdt2	=	$00
00000269 =00000000                M vcdt3	=	$00
00000269 =00000000                M vcdt4	=	$00
00000269                            	smpsVcCoarseFreq    $05, $00, $03, $02
00000269 =00000005                M vccf1	=	$05
00000269 =00000000                M vccf2	=	$00
00000269 =00000003                M vccf3	=	$03
00000269 =00000002                M vccf4	=	$02
00000269                            	smpsVcRateScale     $00, $00, $00, $00
00000269 =00000000                M vcrs1	=	$00
00000269 =00000000                M vcrs2	=	$00
00000269 =00000000                M vcrs3	=	$00
00000269 =00000000                M vcrs4	=	$00
00000269                            	smpsVcAttackRate    $13, $0F, $11, $12
00000269 =00000013                M vcar1	=	$13
00000269 =0000000F                M vcar2	=	$0f
00000269 =00000011                M vcar3	=	$11
00000269 =00000012                M vcar4	=	$12
00000269                            	smpsVcAmpMod        $00, $00, $00, $00
00000269 =00000000                M vcam1	=	$00
00000269 =00000000                M vcam2	=	$00
00000269 =00000000                M vcam3	=	$00
00000269 =00000000                M vcam4	=	$00
00000269                            	smpsVcDecayRate1    $02, $09, $18, $05
00000269 =00000002                M vcd1r1	=	$02
00000269 =00000009                M vcd1r2	=	$09
00000269 =00000018                M vcd1r3	=	$18
00000269 =00000005                M vcd1r4	=	$05
00000269                            	smpsVcDecayRate2    $02, $06, $0F, $06
00000269 =00000002                M vcd2r1	=	$02
00000269 =00000006                M vcd2r2	=	$06
00000269 =0000000F                M vcd2r3	=	$0f
00000269 =00000006                M vcd2r4	=	$06
00000269                            	smpsVcDecayLevel    $02, $04, $02, $01
00000269 =00000002                M vcdl1	=	$02
00000269 =00000004                M vcdl2	=	$04
00000269 =00000002                M vcdl3	=	$02
00000269 =00000001                M vcdl4	=	$01
00000269                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000269 =0000000F                M vcrr1	=	$0f
00000269 =0000000F                M vcrr2	=	$0f
00000269 =0000000F                M vcrr3	=	$0f
00000269 =0000000F                M vcrr4	=	$0f
00000269                            	smpsVcTotalLevel    $00, $0E, $1A, $2F
00000269 =00000000                M vctl1	=	$00
00000269 =0000000E                M vctl2	=	$0e
00000269 =0000001A                M vctl3	=	$1a
00000269 =0000002F                M vctl4	=	$2f
00000269 FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000026A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000026A =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000026A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000026A =00000080                M vctlmask1	=	$80
0000026A 0200 0305                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000026E 120F 1113                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000272 0509 1802                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000276 0606 0F02                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000027A 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000027E 2F0E 1A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000282                            
00000282                            Sound2F:	include "sound/sfx/AF - Shield.asm"
00000282                            Sound2F_Shield_Header:
00000282                            	smpsHeaderStartSong 2
00000282 =00000282                M songstart_1874	equ	offset(*)
00000282                            	smpsHeaderVoice     Sound2F_Shield_Voices
00000282                          M 	z80_ptr	sound2f_shield_voices
00000282 0000                     M 	dc.w	(((sound2f_shield_voices)<<8)&$ff00)|(((sound2f_shield_voices)>>8)&$ff)|$80
00000284                            	smpsHeaderTempoSFX  $01
00000284 01                       M 	dc.b	$01
00000285                            	smpsHeaderChanSFX   $01
00000285 01                       M 	dc.b	$01
00000286                            
00000286                            	smpsHeaderSFXChannel cFM5, Sound2F_Shield_FM5,	$0C, $00
00000286 8005                     M 	dc.b	$80,cfm5
00000288                          M 	z80_ptr	sound2f_shield_fm5
00000288 0000                     M 	dc.w	(((sound2f_shield_fm5)<<8)&$ff00)|(((sound2f_shield_fm5)>>8)&$ff)|$80
0000028A 0C00                     M 	dc.b	$0c,$00
0000028C                            
0000028C                            ; FM5 Data
0000028C                            Sound2F_Shield_FM5:
0000028C                            	smpsSetvoice        $00
0000028C EF00                     M 	dc.b	$ef,$00
0000028E 8001 A305 E7A4 26          	dc.b	nRst, $01, nBb2, $05, smpsNoAttack, nB2, $26
00000295                            	smpsStop
00000295 F2                       M 	dc.b	$f2
00000296                            
00000296                            Sound2F_Shield_Voices:
00000296                            ;	Voice $00
00000296                            ;	$30
00000296                            ;	$30, $30, $30, $30, 	$9E, $A8, $AC, $DC, 	$0E, $0A, $04, $05
00000296                            ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$04, $2C, $14, $80
00000296                            	smpsVcAlgorithm     $00
00000296 =00000000                M vcalgorithm	=	$00
00000296                            	smpsVcFeedback      $06
00000296 =00000006                M vcfeedback	=	$06
00000296                            	smpsVcUnusedBits    $00
00000296 =00000000                M vcunusedbits	=	$00
00000296 =00000000                M vcd1r1unk	=	0
00000296 =00000000                M vcd1r2unk	=	0
00000296 =00000000                M vcd1r3unk	=	0
00000296 =00000000                M vcd1r4unk	=	0
00000296                            	smpsVcDetune        $03, $03, $03, $03
00000296 =00000003                M vcdt1	=	$03
00000296 =00000003                M vcdt2	=	$03
00000296 =00000003                M vcdt3	=	$03
00000296 =00000003                M vcdt4	=	$03
00000296                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000296 =00000000                M vccf1	=	$00
00000296 =00000000                M vccf2	=	$00
00000296 =00000000                M vccf3	=	$00
00000296 =00000000                M vccf4	=	$00
00000296                            	smpsVcRateScale     $03, $02, $02, $02
00000296 =00000003                M vcrs1	=	$03
00000296 =00000002                M vcrs2	=	$02
00000296 =00000002                M vcrs3	=	$02
00000296 =00000002                M vcrs4	=	$02
00000296                            	smpsVcAttackRate    $1C, $2C, $28, $1E
00000296 =0000001C                M vcar1	=	$1c
00000296 =0000002C                M vcar2	=	$2c
00000296 =00000028                M vcar3	=	$28
00000296 =0000001E                M vcar4	=	$1e
00000296                            	smpsVcAmpMod        $00, $00, $00, $00
00000296 =00000000                M vcam1	=	$00
00000296 =00000000                M vcam2	=	$00
00000296 =00000000                M vcam3	=	$00
00000296 =00000000                M vcam4	=	$00
00000296                            	smpsVcDecayRate1    $05, $04, $0A, $0E
00000296 =00000005                M vcd1r1	=	$05
00000296 =00000004                M vcd1r2	=	$04
00000296 =0000000A                M vcd1r3	=	$0a
00000296 =0000000E                M vcd1r4	=	$0e
00000296                            	smpsVcDecayRate2    $08, $08, $08, $08
00000296 =00000008                M vcd2r1	=	$08
00000296 =00000008                M vcd2r2	=	$08
00000296 =00000008                M vcd2r3	=	$08
00000296 =00000008                M vcd2r4	=	$08
00000296                            	smpsVcDecayLevel    $0B, $0B, $0B, $0B
00000296 =0000000B                M vcdl1	=	$0b
00000296 =0000000B                M vcdl2	=	$0b
00000296 =0000000B                M vcdl3	=	$0b
00000296 =0000000B                M vcdl4	=	$0b
00000296                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000296 =0000000F                M vcrr1	=	$0f
00000296 =0000000F                M vcrr2	=	$0f
00000296 =0000000F                M vcrr3	=	$0f
00000296 =0000000F                M vcrr4	=	$0f
00000296                            	smpsVcTotalLevel    $00, $14, $2C, $04
00000296 =00000000                M vctl1	=	$00
00000296 =00000014                M vctl2	=	$14
00000296 =0000002C                M vctl3	=	$2c
00000296 =00000004                M vctl4	=	$04
00000296 30                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000297 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000297 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000297 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000297 =00000080                M vctlmask1	=	$80
00000297 3030 3030                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000029B 9EAC A8DC                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000029F 0E04 0A05                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000002A3 0808 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002A7 BFBF BFBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002AB 0414 2C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002AF                            
000002AF                            Sound30:	include "sound/sfx/B0 - Laser Beam.asm"
000002AF                            Sound30_LaserBeam_Header:
000002AF                            	smpsHeaderStartSong 2
000002AF =000002AF                M songstart_1896	equ	offset(*)
000002AF                            	smpsHeaderVoice     Sound30_LaserBeam_Voices
000002AF                          M 	z80_ptr	sound30_laserbeam_voices
000002AF 0000                     M 	dc.w	(((sound30_laserbeam_voices)<<8)&$ff00)|(((sound30_laserbeam_voices)>>8)&$ff)|$80
000002B1                            	smpsHeaderTempoSFX  $01
000002B1 01                       M 	dc.b	$01
000002B2                            	smpsHeaderChanSFX   $01
000002B2 01                       M 	dc.b	$01
000002B3                            
000002B3                            	smpsHeaderSFXChannel cFM5, Sound30_LaserBeam_FM5,	$FB, $05
000002B3 8005                     M 	dc.b	$80,cfm5
000002B5                          M 	z80_ptr	sound30_laserbeam_fm5
000002B5 0000                     M 	dc.w	(((sound30_laserbeam_fm5)<<8)&$ff00)|(((sound30_laserbeam_fm5)>>8)&$ff)|$80
000002B7 FB05                     M 	dc.b	$fb,$05
000002B9                            
000002B9                            ; FM5 Data
000002B9                            Sound30_LaserBeam_FM5:
000002B9                            	smpsSetvoice        $00
000002B9 EF00                     M 	dc.b	$ef,$00
000002BB DF7F                       	dc.b	nBb7, $7F
000002BD                            
000002BD                            Sound30_LaserBeam_Loop00:
000002BD DF02                       	dc.b	nBb7, $02
000002BF                            	smpsAlterVol        $01
000002BF E601                     M 	dc.b	$e6,$01
000002C1                            	smpsLoop            $00, $1B, Sound30_LaserBeam_Loop00
000002C1 F700 1B                  M 	dc.b	$f7,$00,$1b
000002C4                          M 	z80_ptr	sound30_laserbeam_loop00
000002C4 0000                     M 	dc.w	(((sound30_laserbeam_loop00)<<8)&$ff00)|(((sound30_laserbeam_loop00)>>8)&$ff)|$80
000002C6                            	smpsStop
000002C6 F2                       M 	dc.b	$f2
000002C7                            
000002C7                            Sound30_LaserBeam_Voices:
000002C7                            ;	Voice $00
000002C7                            ;	$83
000002C7                            ;	$1F, $15, $1F, $1F, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000002C7                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$0B, $16, $01, $82
000002C7                            	smpsVcAlgorithm     $03
000002C7 =00000003                M vcalgorithm	=	$03
000002C7                            	smpsVcFeedback      $00
000002C7 =00000000                M vcfeedback	=	$00
000002C7                            	smpsVcUnusedBits    $02
000002C7 =00000002                M vcunusedbits	=	$02
000002C7 =00000000                M vcd1r1unk	=	0
000002C7 =00000000                M vcd1r2unk	=	0
000002C7 =00000000                M vcd1r3unk	=	0
000002C7 =00000000                M vcd1r4unk	=	0
000002C7                            	smpsVcDetune        $01, $01, $01, $01
000002C7 =00000001                M vcdt1	=	$01
000002C7 =00000001                M vcdt2	=	$01
000002C7 =00000001                M vcdt3	=	$01
000002C7 =00000001                M vcdt4	=	$01
000002C7                            	smpsVcCoarseFreq    $0F, $0F, $05, $0F
000002C7 =0000000F                M vccf1	=	$0f
000002C7 =0000000F                M vccf2	=	$0f
000002C7 =00000005                M vccf3	=	$05
000002C7 =0000000F                M vccf4	=	$0f
000002C7                            	smpsVcRateScale     $00, $00, $00, $00
000002C7 =00000000                M vcrs1	=	$00
000002C7 =00000000                M vcrs2	=	$00
000002C7 =00000000                M vcrs3	=	$00
000002C7 =00000000                M vcrs4	=	$00
000002C7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000002C7 =0000001F                M vcar1	=	$1f
000002C7 =0000001F                M vcar2	=	$1f
000002C7 =0000001F                M vcar3	=	$1f
000002C7 =0000001F                M vcar4	=	$1f
000002C7                            	smpsVcAmpMod        $00, $00, $00, $00
000002C7 =00000000                M vcam1	=	$00
000002C7 =00000000                M vcam2	=	$00
000002C7 =00000000                M vcam3	=	$00
000002C7 =00000000                M vcam4	=	$00
000002C7                            	smpsVcDecayRate1    $00, $00, $00, $00
000002C7 =00000000                M vcd1r1	=	$00
000002C7 =00000000                M vcd1r2	=	$00
000002C7 =00000000                M vcd1r3	=	$00
000002C7 =00000000                M vcd1r4	=	$00
000002C7                            	smpsVcDecayRate2    $02, $02, $02, $02
000002C7 =00000002                M vcd2r1	=	$02
000002C7 =00000002                M vcd2r2	=	$02
000002C7 =00000002                M vcd2r3	=	$02
000002C7 =00000002                M vcd2r4	=	$02
000002C7                            	smpsVcDecayLevel    $03, $0F, $02, $02
000002C7 =00000003                M vcdl1	=	$03
000002C7 =0000000F                M vcdl2	=	$0f
000002C7 =00000002                M vcdl3	=	$02
000002C7 =00000002                M vcdl4	=	$02
000002C7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002C7 =0000000F                M vcrr1	=	$0f
000002C7 =0000000F                M vcrr2	=	$0f
000002C7 =0000000F                M vcrr3	=	$0f
000002C7 =0000000F                M vcrr4	=	$0f
000002C7                            	smpsVcTotalLevel    $02, $01, $16, $0B
000002C7 =00000002                M vctl1	=	$02
000002C7 =00000001                M vctl2	=	$01
000002C7 =00000016                M vctl3	=	$16
000002C7 =0000000B                M vctl4	=	$0b
000002C7 83                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002C8 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002C8 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002C8 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002C8 =00000080                M vctlmask1	=	$80
000002C8 1F1F 151F                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002CC 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002D0 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000002D4 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000002D8 2FFF 2F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000002DC 0B01 1682                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000002E0                            
000002E0                            Sound31:	include "sound/sfx/B1 - Electricity (Unused).asm"
000002E0                            Sound31_Zap_Header:
000002E0                            	smpsHeaderStartSong 2
000002E0 =000002E0                M songstart_1921	equ	offset(*)
000002E0                            	smpsHeaderVoice     Sound31_Zap_Voices
000002E0                          M 	z80_ptr	sound31_zap_voices
000002E0 0000                     M 	dc.w	(((sound31_zap_voices)<<8)&$ff00)|(((sound31_zap_voices)>>8)&$ff)|$80
000002E2                            	smpsHeaderTempoSFX  $01
000002E2 01                       M 	dc.b	$01
000002E3                            	smpsHeaderChanSFX   $01
000002E3 01                       M 	dc.b	$01
000002E4                            
000002E4                            	smpsHeaderSFXChannel cFM5, Sound31_Zap_FM5,	$FB, $02
000002E4 8005                     M 	dc.b	$80,cfm5
000002E6                          M 	z80_ptr	sound31_zap_fm5
000002E6 0000                     M 	dc.w	(((sound31_zap_fm5)<<8)&$ff00)|(((sound31_zap_fm5)>>8)&$ff)|$80
000002E8 FB02                     M 	dc.b	$fb,$02
000002EA                            
000002EA                            ; FM5 Data
000002EA                            Sound31_Zap_FM5:
000002EA                            	smpsSetvoice        $00
000002EA EF00                     M 	dc.b	$ef,$00
000002EC B305 8001 B309             	dc.b	nD4, $05, nRst, $01, nD4, $09
000002F2                            	smpsStop
000002F2 F2                       M 	dc.b	$f2
000002F3                            
000002F3                            Sound31_Zap_Voices:
000002F3                            ;	Voice $00
000002F3                            ;	$83
000002F3                            ;	$12, $10, $13, $1E, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000002F3                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$05, $10, $34, $87
000002F3                            	smpsVcAlgorithm     $03
000002F3 =00000003                M vcalgorithm	=	$03
000002F3                            	smpsVcFeedback      $00
000002F3 =00000000                M vcfeedback	=	$00
000002F3                            	smpsVcUnusedBits    $02
000002F3 =00000002                M vcunusedbits	=	$02
000002F3 =00000000                M vcd1r1unk	=	0
000002F3 =00000000                M vcd1r2unk	=	0
000002F3 =00000000                M vcd1r3unk	=	0
000002F3 =00000000                M vcd1r4unk	=	0
000002F3                            	smpsVcDetune        $01, $01, $01, $01
000002F3 =00000001                M vcdt1	=	$01
000002F3 =00000001                M vcdt2	=	$01
000002F3 =00000001                M vcdt3	=	$01
000002F3 =00000001                M vcdt4	=	$01
000002F3                            	smpsVcCoarseFreq    $0E, $03, $00, $02
000002F3 =0000000E                M vccf1	=	$0e
000002F3 =00000003                M vccf2	=	$03
000002F3 =00000000                M vccf3	=	$00
000002F3 =00000002                M vccf4	=	$02
000002F3                            	smpsVcRateScale     $00, $00, $00, $00
000002F3 =00000000                M vcrs1	=	$00
000002F3 =00000000                M vcrs2	=	$00
000002F3 =00000000                M vcrs3	=	$00
000002F3 =00000000                M vcrs4	=	$00
000002F3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000002F3 =0000001F                M vcar1	=	$1f
000002F3 =0000001F                M vcar2	=	$1f
000002F3 =0000001F                M vcar3	=	$1f
000002F3 =0000001F                M vcar4	=	$1f
000002F3                            	smpsVcAmpMod        $00, $00, $00, $00
000002F3 =00000000                M vcam1	=	$00
000002F3 =00000000                M vcam2	=	$00
000002F3 =00000000                M vcam3	=	$00
000002F3 =00000000                M vcam4	=	$00
000002F3                            	smpsVcDecayRate1    $00, $00, $00, $00
000002F3 =00000000                M vcd1r1	=	$00
000002F3 =00000000                M vcd1r2	=	$00
000002F3 =00000000                M vcd1r3	=	$00
000002F3 =00000000                M vcd1r4	=	$00
000002F3                            	smpsVcDecayRate2    $02, $02, $02, $02
000002F3 =00000002                M vcd2r1	=	$02
000002F3 =00000002                M vcd2r2	=	$02
000002F3 =00000002                M vcd2r3	=	$02
000002F3 =00000002                M vcd2r4	=	$02
000002F3                            	smpsVcDecayLevel    $03, $0F, $02, $02
000002F3 =00000003                M vcdl1	=	$03
000002F3 =0000000F                M vcdl2	=	$0f
000002F3 =00000002                M vcdl3	=	$02
000002F3 =00000002                M vcdl4	=	$02
000002F3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000002F3 =0000000F                M vcrr1	=	$0f
000002F3 =0000000F                M vcrr2	=	$0f
000002F3 =0000000F                M vcrr3	=	$0f
000002F3 =0000000F                M vcrr4	=	$0f
000002F3                            	smpsVcTotalLevel    $07, $34, $10, $05
000002F3 =00000007                M vctl1	=	$07
000002F3 =00000034                M vctl2	=	$34
000002F3 =00000010                M vctl3	=	$10
000002F3 =00000005                M vctl4	=	$05
000002F3 83                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000002F4 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000002F4 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000002F4 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000002F4 =00000080                M vctlmask1	=	$80
000002F4 1213 101E                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000002F8 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000002FC 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000300 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000304 2FFF 2F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000308 0534 1087                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000030C                            
0000030C                            Sound32:	include "sound/sfx/B2 - Drown.asm"
0000030C                            Sound32_Drown_Header:
0000030C                            	smpsHeaderStartSong 2, 1
0000030C =0000030C                M songstart_1943	equ	offset(*)
0000030C                            	smpsHeaderVoice     Sound32_Drown_Voices
0000030C                          M 	z80_ptr	sound32_drown_voices
0000030C 0000                     M 	dc.w	(((sound32_drown_voices)<<8)&$ff00)|(((sound32_drown_voices)>>8)&$ff)|$80
0000030E                            	smpsHeaderTempoSFX  $01
0000030E 01                       M 	dc.b	$01
0000030F                            	smpsHeaderChanSFX   $02
0000030F 02                       M 	dc.b	$02
00000310                            
00000310                            	smpsHeaderSFXChannel cFM4, Sound32_Drown_FM4,	$0C, $04
00000310 8004                     M 	dc.b	$80,cfm4
00000312                          M 	z80_ptr	sound32_drown_fm4
00000312 0000                     M 	dc.w	(((sound32_drown_fm4)<<8)&$ff00)|(((sound32_drown_fm4)>>8)&$ff)|$80
00000314 0C04                     M 	dc.b	$0c,$04
00000316                            	smpsHeaderSFXChannel cFM5, Sound32_Drown_FM5,	$0E, $02
00000316 8005                     M 	dc.b	$80,cfm5
00000318                          M 	z80_ptr	sound32_drown_fm5
00000318 0000                     M 	dc.w	(((sound32_drown_fm5)<<8)&$ff00)|(((sound32_drown_fm5)>>8)&$ff)|$80
0000031A 0E02                     M 	dc.b	$0e,$02
0000031C                            
0000031C                            ; FM5 Data
0000031C                            Sound32_Drown_FM5:
0000031C                            	smpsSetvoice        $00
0000031C EF00                     M 	dc.b	$ef,$00
0000031E                            	smpsModSet          $01, $01, $83, $0C
0000031E F001 0183 0C             M 	dc.b	$f0,$01,$01,$83,$0c
00000323                            
00000323                            Sound32_Drown_Loop01:
00000323 8A05 05                    	dc.b	nA0, $05, $05
00000326                            	smpsAlterVol        $03
00000326 E603                     M 	dc.b	$e6,$03
00000328                            	smpsLoop            $00, $0A, Sound32_Drown_Loop01
00000328 F700 0A                  M 	dc.b	$f7,$00,$0a
0000032B                          M 	z80_ptr	sound32_drown_loop01
0000032B 0000                     M 	dc.w	(((sound32_drown_loop01)<<8)&$ff00)|(((sound32_drown_loop01)>>8)&$ff)|$80
0000032D                            	smpsStop
0000032D F2                       M 	dc.b	$f2
0000032E                            
0000032E                            ; FM4 Data
0000032E                            Sound32_Drown_FM4:
0000032E 8006                       	dc.b	nRst, $06
00000330                            	smpsSetvoice        $00
00000330 EF00                     M 	dc.b	$ef,$00
00000332                            	smpsModSet          $01, $01, $6F, $0E
00000332 F001 016F 0E             M 	dc.b	$f0,$01,$01,$6f,$0e
00000337                            
00000337                            Sound32_Drown_Loop00:
00000337 8D04 05                    	dc.b	nC1, $04, $05
0000033A                            	smpsAlterVol        $03
0000033A E603                     M 	dc.b	$e6,$03
0000033C                            	smpsLoop            $00, $0A, Sound32_Drown_Loop00
0000033C F700 0A                  M 	dc.b	$f7,$00,$0a
0000033F                          M 	z80_ptr	sound32_drown_loop00
0000033F 0000                     M 	dc.w	(((sound32_drown_loop00)<<8)&$ff00)|(((sound32_drown_loop00)>>8)&$ff)|$80
00000341                            	smpsStop
00000341 F2                       M 	dc.b	$f2
00000342                            
00000342                            Sound32_Drown_Voices:
00000342                            ;	Voice $00
00000342                            ;	$35
00000342                            ;	$14, $1A, $04, $09, 	$0E, $10, $11, $0E, 	$0C, $15, $03, $06
00000342                            ;	$16, $0E, $09, $10, 	$2F, $2F, $4F, $4F, 	$2F, $12, $12, $80
00000342                            	smpsVcAlgorithm     $05
00000342 =00000005                M vcalgorithm	=	$05
00000342                            	smpsVcFeedback      $06
00000342 =00000006                M vcfeedback	=	$06
00000342                            	smpsVcUnusedBits    $00
00000342 =00000000                M vcunusedbits	=	$00
00000342 =00000000                M vcd1r1unk	=	0
00000342 =00000000                M vcd1r2unk	=	0
00000342 =00000000                M vcd1r3unk	=	0
00000342 =00000000                M vcd1r4unk	=	0
00000342                            	smpsVcDetune        $00, $00, $01, $01
00000342 =00000000                M vcdt1	=	$00
00000342 =00000000                M vcdt2	=	$00
00000342 =00000001                M vcdt3	=	$01
00000342 =00000001                M vcdt4	=	$01
00000342                            	smpsVcCoarseFreq    $09, $04, $0A, $04
00000342 =00000009                M vccf1	=	$09
00000342 =00000004                M vccf2	=	$04
00000342 =0000000A                M vccf3	=	$0a
00000342 =00000004                M vccf4	=	$04
00000342                            	smpsVcRateScale     $00, $00, $00, $00
00000342 =00000000                M vcrs1	=	$00
00000342 =00000000                M vcrs2	=	$00
00000342 =00000000                M vcrs3	=	$00
00000342 =00000000                M vcrs4	=	$00
00000342                            	smpsVcAttackRate    $0E, $11, $10, $0E
00000342 =0000000E                M vcar1	=	$0e
00000342 =00000011                M vcar2	=	$11
00000342 =00000010                M vcar3	=	$10
00000342 =0000000E                M vcar4	=	$0e
00000342                            	smpsVcAmpMod        $00, $00, $00, $00
00000342 =00000000                M vcam1	=	$00
00000342 =00000000                M vcam2	=	$00
00000342 =00000000                M vcam3	=	$00
00000342 =00000000                M vcam4	=	$00
00000342                            	smpsVcDecayRate1    $06, $03, $15, $0C
00000342 =00000006                M vcd1r1	=	$06
00000342 =00000003                M vcd1r2	=	$03
00000342 =00000015                M vcd1r3	=	$15
00000342 =0000000C                M vcd1r4	=	$0c
00000342                            	smpsVcDecayRate2    $10, $09, $0E, $16
00000342 =00000010                M vcd2r1	=	$10
00000342 =00000009                M vcd2r2	=	$09
00000342 =0000000E                M vcd2r3	=	$0e
00000342 =00000016                M vcd2r4	=	$16
00000342                            	smpsVcDecayLevel    $04, $04, $02, $02
00000342 =00000004                M vcdl1	=	$04
00000342 =00000004                M vcdl2	=	$04
00000342 =00000002                M vcdl3	=	$02
00000342 =00000002                M vcdl4	=	$02
00000342                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000342 =0000000F                M vcrr1	=	$0f
00000342 =0000000F                M vcrr2	=	$0f
00000342 =0000000F                M vcrr3	=	$0f
00000342 =0000000F                M vcrr4	=	$0f
00000342                            	smpsVcTotalLevel    $80, $12, $12, $2F
00000342 =00000080                M vctl1	=	$80
00000342 =00000012                M vctl2	=	$12
00000342 =00000012                M vctl3	=	$12
00000342 =0000002F                M vctl4	=	$2f
00000342 35                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000343 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000343 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000343 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000343 =00000080                M vctlmask1	=	$80
00000343 1404 1A09                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000347 0E11 100E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000034B 0C03 1506                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000034F 1609 0E10                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000353 2F4F 2F4F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000357 2F92 9280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000035B                            
0000035B                            Sound33:	include "sound/sfx/B3 - Fire Burn.asm"
0000035B                            Sound33_FireBurn_Header:
0000035B                            	smpsHeaderStartSong 2
0000035B =0000035B                M songstart_1977	equ	offset(*)
0000035B                            	smpsHeaderVoice     Sound2E_33_Voices
0000035B                          M 	z80_ptr	sound2e_33_voices
0000035B 0000                     M 	dc.w	(((sound2e_33_voices)<<8)&$ff00)|(((sound2e_33_voices)>>8)&$ff)|$80
0000035D                            	smpsHeaderTempoSFX  $01
0000035D 01                       M 	dc.b	$01
0000035E                            	smpsHeaderChanSFX   $02
0000035E 02                       M 	dc.b	$02
0000035F                            
0000035F                            	smpsHeaderSFXChannel cFM5, Sound33_FireBurn_FM5,	$00, $00
0000035F 8005                     M 	dc.b	$80,cfm5
00000361                          M 	z80_ptr	sound33_fireburn_fm5
00000361 0000                     M 	dc.w	(((sound33_fireburn_fm5)<<8)&$ff00)|(((sound33_fireburn_fm5)>>8)&$ff)|$80
00000363 0000                     M 	dc.b	$00,$00
00000365                            	smpsHeaderSFXChannel cPSG3, Sound33_FireBurn_PSG3,	$00, $00
00000365 80C0                     M 	dc.b	$80,cpsg3
00000367                          M 	z80_ptr	sound33_fireburn_psg3
00000367 0000                     M 	dc.w	(((sound33_fireburn_psg3)<<8)&$ff00)|(((sound33_fireburn_psg3)>>8)&$ff)|$80
00000369 0000                     M 	dc.b	$00,$00
0000036B                            
0000036B                            ; FM5 Data
0000036B                            Sound33_FireBurn_FM5:
0000036B                            	smpsSetvoice        $00
0000036B EF00                     M 	dc.b	$ef,$00
0000036D 8001                       	dc.b	nRst, $01
0000036F                            	smpsModSet          $01, $01, $40, $48
0000036F F001 0140 48             M 	dc.b	$f0,$01,$01,$40,$48
00000374 8306 8502                  	dc.b	nD0, $06, nE0, $02
00000378                            	smpsStop
00000378 F2                       M 	dc.b	$f2
00000379                            
00000379                            ; PSG3 Data
00000379                            Sound33_FireBurn_PSG3:
00000379                            	smpsPSGvoice        $00
00000379 F500                     M 	dc.b	$f5,$00
0000037B 800B                       	dc.b	nRst, $0B
0000037D                            	smpsPSGform         $E7
0000037D F3E7                     M 	dc.b	$f3,$e7
0000037F A725 E7                    	dc.b	nD3, $25, smpsNoAttack
00000382                            
00000382                            Sound33_FireBurn_Loop00:
00000382 02                         	dc.b	$02
00000383                            	smpsPSGAlterVol     $01
00000383 EC01                     M 	dc.b	$ec,$01
00000385 E7                         	dc.b	smpsNoAttack
00000386                            	smpsLoop            $00, $10, Sound33_FireBurn_Loop00
00000386 F700 10                  M 	dc.b	$f7,$00,$10
00000389                          M 	z80_ptr	sound33_fireburn_loop00
00000389 0000                     M 	dc.w	(((sound33_fireburn_loop00)<<8)&$ff00)|(((sound33_fireburn_loop00)>>8)&$ff)|$80
0000038B                            	smpsStop
0000038B F2                       M 	dc.b	$f2
0000038C                            Sound34:	include "sound/sfx/B4 - Bumper.asm"
0000038C                            Sound34_Bumper_Header:
0000038C                            	smpsHeaderStartSong 2
0000038C =0000038C                M songstart_1995	equ	offset(*)
0000038C                            	smpsHeaderVoice     Sound34_Bumper_Voices
0000038C                          M 	z80_ptr	sound34_bumper_voices
0000038C 0000                     M 	dc.w	(((sound34_bumper_voices)<<8)&$ff00)|(((sound34_bumper_voices)>>8)&$ff)|$80
0000038E                            	smpsHeaderTempoSFX  $01
0000038E 01                       M 	dc.b	$01
0000038F                            	smpsHeaderChanSFX   $03
0000038F 03                       M 	dc.b	$03
00000390                            
00000390                            	smpsHeaderSFXChannel cFM5, Sound34_Bumper_FM5,	$00, $00
00000390 8005                     M 	dc.b	$80,cfm5
00000392                          M 	z80_ptr	sound34_bumper_fm5
00000392 0000                     M 	dc.w	(((sound34_bumper_fm5)<<8)&$ff00)|(((sound34_bumper_fm5)>>8)&$ff)|$80
00000394 0000                     M 	dc.b	$00,$00
00000396                            	smpsHeaderSFXChannel cFM4, Sound34_Bumper_FM4,	$00, $00
00000396 8004                     M 	dc.b	$80,cfm4
00000398                          M 	z80_ptr	sound34_bumper_fm4
00000398 0000                     M 	dc.w	(((sound34_bumper_fm4)<<8)&$ff00)|(((sound34_bumper_fm4)>>8)&$ff)|$80
0000039A 0000                     M 	dc.b	$00,$00
0000039C                            	smpsHeaderSFXChannel cFM3, Sound34_Bumper_FM3,	$00, $02
0000039C 8002                     M 	dc.b	$80,cfm3
0000039E                          M 	z80_ptr	sound34_bumper_fm3
0000039E 0000                     M 	dc.w	(((sound34_bumper_fm3)<<8)&$ff00)|(((sound34_bumper_fm3)>>8)&$ff)|$80
000003A0 0002                     M 	dc.b	$00,$02
000003A2                            
000003A2                            ; FM5 Data
000003A2                            Sound34_Bumper_FM5:
000003A2                            	smpsSetvoice        $00
000003A2 EF00                     M 	dc.b	$ef,$00
000003A4                            	smpsJump            Sound34_Bumper_Jump00
000003A4 F6                       M 	dc.b	$f6
000003A5                          M 	z80_ptr	sound34_bumper_jump00
000003A5 0000                     M 	dc.w	(((sound34_bumper_jump00)<<8)&$ff00)|(((sound34_bumper_jump00)>>8)&$ff)|$80
000003A7                            
000003A7                            ; FM4 Data
000003A7                            Sound34_Bumper_FM4:
000003A7                            	smpsSetvoice        $00
000003A7 EF00                     M 	dc.b	$ef,$00
000003A9                            	smpsAlterNote       $07
000003A9 E107                     M 	dc.b	$e1,$07
000003AB 8001                       	dc.b	nRst, $01
000003AD                            
000003AD                            Sound34_Bumper_Jump00:
000003AD BA20                       	dc.b	nA4, $20
000003AF                            	smpsStop
000003AF F2                       M 	dc.b	$f2
000003B0                            
000003B0                            ; FM3 Data
000003B0                            Sound34_Bumper_FM3:
000003B0                            	smpsSetvoice        $01
000003B0 EF01                     M 	dc.b	$ef,$01
000003B2 9A03                       	dc.b	nCs2, $03
000003B4                            	smpsStop
000003B4 F2                       M 	dc.b	$f2
000003B5                            
000003B5                            Sound34_Bumper_Voices:
000003B5                            ;	Voice $00
000003B5                            ;	$3C
000003B5                            ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
000003B5                            ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$1F, $80, $2B, $80
000003B5                            	smpsVcAlgorithm     $04
000003B5 =00000004                M vcalgorithm	=	$04
000003B5                            	smpsVcFeedback      $07
000003B5 =00000007                M vcfeedback	=	$07
000003B5                            	smpsVcUnusedBits    $00
000003B5 =00000000                M vcunusedbits	=	$00
000003B5 =00000000                M vcd1r1unk	=	0
000003B5 =00000000                M vcd1r2unk	=	0
000003B5 =00000000                M vcd1r3unk	=	0
000003B5 =00000000                M vcd1r4unk	=	0
000003B5                            	smpsVcDetune        $00, $00, $00, $00
000003B5 =00000000                M vcdt1	=	$00
000003B5 =00000000                M vcdt2	=	$00
000003B5 =00000000                M vcdt3	=	$00
000003B5 =00000000                M vcdt4	=	$00
000003B5                            	smpsVcCoarseFreq    $01, $0A, $01, $05
000003B5 =00000001                M vccf1	=	$01
000003B5 =0000000A                M vccf2	=	$0a
000003B5 =00000001                M vccf3	=	$01
000003B5 =00000005                M vccf4	=	$05
000003B5                            	smpsVcRateScale     $01, $01, $01, $01
000003B5 =00000001                M vcrs1	=	$01
000003B5 =00000001                M vcrs2	=	$01
000003B5 =00000001                M vcrs3	=	$01
000003B5 =00000001                M vcrs4	=	$01
000003B5                            	smpsVcAttackRate    $1C, $1C, $1C, $16
000003B5 =0000001C                M vcar1	=	$1c
000003B5 =0000001C                M vcar2	=	$1c
000003B5 =0000001C                M vcar3	=	$1c
000003B5 =00000016                M vcar4	=	$16
000003B5                            	smpsVcAmpMod        $00, $00, $00, $00
000003B5 =00000000                M vcam1	=	$00
000003B5 =00000000                M vcam2	=	$00
000003B5 =00000000                M vcam3	=	$00
000003B5 =00000000                M vcam4	=	$00
000003B5                            	smpsVcDecayRate1    $11, $11, $11, $0E
000003B5 =00000011                M vcd1r1	=	$11
000003B5 =00000011                M vcd1r2	=	$11
000003B5 =00000011                M vcd1r3	=	$11
000003B5 =0000000E                M vcd1r4	=	$0e
000003B5                            	smpsVcDecayRate2    $0A, $06, $0A, $09
000003B5 =0000000A                M vcd2r1	=	$0a
000003B5 =00000006                M vcd2r2	=	$06
000003B5 =0000000A                M vcd2r3	=	$0a
000003B5 =00000009                M vcd2r4	=	$09
000003B5                            	smpsVcDecayLevel    $03, $03, $03, $04
000003B5 =00000003                M vcdl1	=	$03
000003B5 =00000003                M vcdl2	=	$03
000003B5 =00000003                M vcdl3	=	$03
000003B5 =00000004                M vcdl4	=	$04
000003B5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003B5 =0000000F                M vcrr1	=	$0f
000003B5 =0000000F                M vcrr2	=	$0f
000003B5 =0000000F                M vcrr3	=	$0f
000003B5 =0000000F                M vcrr4	=	$0f
000003B5                            	smpsVcTotalLevel    $00, $2B, $00, $1F
000003B5 =00000000                M vctl1	=	$00
000003B5 =0000002B                M vctl2	=	$2b
000003B5 =00000000                M vctl3	=	$00
000003B5 =0000001F                M vctl4	=	$1f
000003B5 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003B6 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003B6 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003B6 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003B6 =00000080                M vctlmask1	=	$80
000003B6 050A 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003BA 565C 5C5C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003BE 0E11 1111                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000003C2 0906 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003C6 4F3F 3F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003CA 1F2B 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003CE                            
000003CE                            ;	Voice $01
000003CE                            ;	$05
000003CE                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$12, $0C, $0C, $0C
000003CE                            ;	$12, $08, $08, $08, 	$1F, $5F, $5F, $5F, 	$07, $80, $80, $80
000003CE                            	smpsVcAlgorithm     $05
000003CE =00000005                M vcalgorithm	=	$05
000003CE                            	smpsVcFeedback      $00
000003CE =00000000                M vcfeedback	=	$00
000003CE                            	smpsVcUnusedBits    $00
000003CE =00000000                M vcunusedbits	=	$00
000003CE =00000000                M vcd1r1unk	=	0
000003CE =00000000                M vcd1r2unk	=	0
000003CE =00000000                M vcd1r3unk	=	0
000003CE =00000000                M vcd1r4unk	=	0
000003CE                            	smpsVcDetune        $00, $00, $00, $00
000003CE =00000000                M vcdt1	=	$00
000003CE =00000000                M vcdt2	=	$00
000003CE =00000000                M vcdt3	=	$00
000003CE =00000000                M vcdt4	=	$00
000003CE                            	smpsVcCoarseFreq    $00, $00, $00, $00
000003CE =00000000                M vccf1	=	$00
000003CE =00000000                M vccf2	=	$00
000003CE =00000000                M vccf3	=	$00
000003CE =00000000                M vccf4	=	$00
000003CE                            	smpsVcRateScale     $00, $00, $00, $00
000003CE =00000000                M vcrs1	=	$00
000003CE =00000000                M vcrs2	=	$00
000003CE =00000000                M vcrs3	=	$00
000003CE =00000000                M vcrs4	=	$00
000003CE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000003CE =0000001F                M vcar1	=	$1f
000003CE =0000001F                M vcar2	=	$1f
000003CE =0000001F                M vcar3	=	$1f
000003CE =0000001F                M vcar4	=	$1f
000003CE                            	smpsVcAmpMod        $00, $00, $00, $00
000003CE =00000000                M vcam1	=	$00
000003CE =00000000                M vcam2	=	$00
000003CE =00000000                M vcam3	=	$00
000003CE =00000000                M vcam4	=	$00
000003CE                            	smpsVcDecayRate1    $0C, $0C, $0C, $12
000003CE =0000000C                M vcd1r1	=	$0c
000003CE =0000000C                M vcd1r2	=	$0c
000003CE =0000000C                M vcd1r3	=	$0c
000003CE =00000012                M vcd1r4	=	$12
000003CE                            	smpsVcDecayRate2    $08, $08, $08, $12
000003CE =00000008                M vcd2r1	=	$08
000003CE =00000008                M vcd2r2	=	$08
000003CE =00000008                M vcd2r3	=	$08
000003CE =00000012                M vcd2r4	=	$12
000003CE                            	smpsVcDecayLevel    $05, $05, $05, $01
000003CE =00000005                M vcdl1	=	$05
000003CE =00000005                M vcdl2	=	$05
000003CE =00000005                M vcdl3	=	$05
000003CE =00000001                M vcdl4	=	$01
000003CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000003CE =0000000F                M vcrr1	=	$0f
000003CE =0000000F                M vcrr2	=	$0f
000003CE =0000000F                M vcrr3	=	$0f
000003CE =0000000F                M vcrr4	=	$0f
000003CE                            	smpsVcTotalLevel    $00, $00, $00, $07
000003CE =00000000                M vctl1	=	$00
000003CE =00000000                M vctl2	=	$00
000003CE =00000000                M vctl3	=	$00
000003CE =00000007                M vctl4	=	$07
000003CE 05                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000003CF =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000003CF =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000003CF =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
000003CF =00000080                M vctlmask1	=	$80
000003CF 0000 0000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000003D3 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000003D7 120C 0C0C                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000003DB 1208 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000003DF 1F5F 5F5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000003E3 0780 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000003E7                            
000003E7                            Sound35:	include "sound/sfx/B5 - Ring.asm"
000003E7                            Sound35_RingRight_Header:
000003E7                            	smpsHeaderStartSong 2
000003E7 =000003E7                M songstart_2040	equ	offset(*)
000003E7                            	smpsHeaderVoice     Sound_Ring_Voices
000003E7                          M 	z80_ptr	sound_ring_voices
000003E7 0000                     M 	dc.w	(((sound_ring_voices)<<8)&$ff00)|(((sound_ring_voices)>>8)&$ff)|$80
000003E9                            	smpsHeaderTempoSFX  $01
000003E9 01                       M 	dc.b	$01
000003EA                            	smpsHeaderChanSFX   $01
000003EA 01                       M 	dc.b	$01
000003EB                            
000003EB                            	smpsHeaderSFXChannel cFM5, Sound35_RingRight_FM5,	$00, $05
000003EB 8005                     M 	dc.b	$80,cfm5
000003ED                          M 	z80_ptr	sound35_ringright_fm5
000003ED 0000                     M 	dc.w	(((sound35_ringright_fm5)<<8)&$ff00)|(((sound35_ringright_fm5)>>8)&$ff)|$80
000003EF 0005                     M 	dc.b	$00,$05
000003F1                            
000003F1                            ; FM5 Data
000003F1                            Sound35_RingRight_FM5:
000003F1                            	smpsSetvoice        $00
000003F1 EF00                     M 	dc.b	$ef,$00
000003F3                            	smpsPan             panRight, $00
000003F3 E040                     M 	dc.b	$e0,panright|$00
000003F5 C105 C405 C91B             	dc.b	nE5, $05, nG5, $05, nC6, $1B
000003FB                            	smpsStop
000003FB F2                       M 	dc.b	$f2
000003FC                            
000003FC                            Sound36:	include "sound/sfx/B6 - Spikes Move.asm"
000003FC                            Sound36_SpikesMove_Header:
000003FC                            	smpsHeaderStartSong 2
000003FC =000003FC                M songstart_2050	equ	offset(*)
000003FC                            	smpsHeaderVoiceNull
000003FC 0000                     M 	dc.w	$0000
000003FE                            	smpsHeaderTempoSFX  $01
000003FE 01                       M 	dc.b	$01
000003FF                            	smpsHeaderChanSFX   $01
000003FF 01                       M 	dc.b	$01
00000400                            
00000400                            	smpsHeaderSFXChannel cPSG3, Sound36_SpikesMove_PSG3,	$00, $00
00000400 80C0                     M 	dc.b	$80,cpsg3
00000402                          M 	z80_ptr	sound36_spikesmove_psg3
00000402 0000                     M 	dc.w	(((sound36_spikesmove_psg3)<<8)&$ff00)|(((sound36_spikesmove_psg3)>>8)&$ff)|$80
00000404 0000                     M 	dc.b	$00,$00
00000406                            
00000406                            ; PSG3 Data
00000406                            Sound36_SpikesMove_PSG3:
00000406                            	smpsModSet          $01, $01, $F0, $08
00000406 F001 01F0 08             M 	dc.b	$f0,$01,$01,$f0,$08
0000040B                            	smpsPSGform         $E7
0000040B F3E7                     M 	dc.b	$f3,$e7
0000040D C107                       	dc.b	nE5, $07
0000040F                            
0000040F                            Sound36_SpikesMove_Loop00:
0000040F D001                       	dc.b	nG6, $01
00000411                            	smpsPSGAlterVol     $01
00000411 EC01                     M 	dc.b	$ec,$01
00000413                            	smpsLoop            $00, $0C, Sound36_SpikesMove_Loop00
00000413 F700 0C                  M 	dc.b	$f7,$00,$0c
00000416                          M 	z80_ptr	sound36_spikesmove_loop00
00000416 0000                     M 	dc.w	(((sound36_spikesmove_loop00)<<8)&$ff00)|(((sound36_spikesmove_loop00)>>8)&$ff)|$80
00000418                            	smpsStop
00000418 F2                       M 	dc.b	$f2
00000419                            Sound37:	include "sound/sfx/B7 - Rumbling.asm"
00000419                            Sound37_Rumbling_Header:
00000419                            	smpsHeaderStartSong 2
00000419 =00000419                M songstart_2062	equ	offset(*)
00000419                            	smpsHeaderVoice     Sound37_Rumbling_Voices
00000419                          M 	z80_ptr	sound37_rumbling_voices
00000419 0000                     M 	dc.w	(((sound37_rumbling_voices)<<8)&$ff00)|(((sound37_rumbling_voices)>>8)&$ff)|$80
0000041B                            	smpsHeaderTempoSFX  $01
0000041B 01                       M 	dc.b	$01
0000041C                            	smpsHeaderChanSFX   $01
0000041C 01                       M 	dc.b	$01
0000041D                            
0000041D                            	smpsHeaderSFXChannel cFM5, Sound37_Rumbling_FM5,	$00, $00
0000041D 8005                     M 	dc.b	$80,cfm5
0000041F                          M 	z80_ptr	sound37_rumbling_fm5
0000041F 0000                     M 	dc.w	(((sound37_rumbling_fm5)<<8)&$ff00)|(((sound37_rumbling_fm5)>>8)&$ff)|$80
00000421 0000                     M 	dc.b	$00,$00
00000423                            
00000423                            ; FM5 Data
00000423                            Sound37_Rumbling_FM5:
00000423                            	smpsSetvoice        $00
00000423 EF00                     M 	dc.b	$ef,$00
00000425                            	smpsModSet          $01, $01, $20, $08
00000425 F001 0120 08             M 	dc.b	$f0,$01,$01,$20,$08
0000042A                            
0000042A                            Sound37_Rumbling_Loop00:
0000042A 8B0A                       	dc.b	nBb0, $0A
0000042C                            	smpsLoop            $00, $08, Sound37_Rumbling_Loop00
0000042C F700 08                  M 	dc.b	$f7,$00,$08
0000042F                          M 	z80_ptr	sound37_rumbling_loop00
0000042F 0000                     M 	dc.w	(((sound37_rumbling_loop00)<<8)&$ff00)|(((sound37_rumbling_loop00)>>8)&$ff)|$80
00000431                            
00000431                            Sound37_Rumbling_Loop01:
00000431 8B10                       	dc.b	nBb0, $10
00000433                            	smpsAlterVol        $03
00000433 E603                     M 	dc.b	$e6,$03
00000435                            	smpsLoop            $00, $09, Sound37_Rumbling_Loop01
00000435 F700 09                  M 	dc.b	$f7,$00,$09
00000438                          M 	z80_ptr	sound37_rumbling_loop01
00000438 0000                     M 	dc.w	(((sound37_rumbling_loop01)<<8)&$ff00)|(((sound37_rumbling_loop01)>>8)&$ff)|$80
0000043A                            	smpsStop
0000043A F2                       M 	dc.b	$f2
0000043B                            
0000043B                            Sound37_Rumbling_Voices:
0000043B                            ;	Voice $00
0000043B                            ;	$FA
0000043B                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0000043B                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$0F, $1A, $0E, $80
0000043B                            	smpsVcAlgorithm     $02
0000043B =00000002                M vcalgorithm	=	$02
0000043B                            	smpsVcFeedback      $07
0000043B =00000007                M vcfeedback	=	$07
0000043B                            	smpsVcUnusedBits    $03
0000043B =00000003                M vcunusedbits	=	$03
0000043B =00000000                M vcd1r1unk	=	0
0000043B =00000000                M vcd1r2unk	=	0
0000043B =00000000                M vcd1r3unk	=	0
0000043B =00000000                M vcd1r4unk	=	0
0000043B                            	smpsVcDetune        $03, $01, $03, $02
0000043B =00000003                M vcdt1	=	$03
0000043B =00000001                M vcdt2	=	$01
0000043B =00000003                M vcdt3	=	$03
0000043B =00000002                M vcdt4	=	$02
0000043B                            	smpsVcCoarseFreq    $02, $00, $00, $01
0000043B =00000002                M vccf1	=	$02
0000043B =00000000                M vccf2	=	$00
0000043B =00000000                M vccf3	=	$00
0000043B =00000001                M vccf4	=	$01
0000043B                            	smpsVcRateScale     $00, $00, $00, $00
0000043B =00000000                M vcrs1	=	$00
0000043B =00000000                M vcrs2	=	$00
0000043B =00000000                M vcrs3	=	$00
0000043B =00000000                M vcrs4	=	$00
0000043B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000043B =0000001F                M vcar1	=	$1f
0000043B =0000001F                M vcar2	=	$1f
0000043B =0000001F                M vcar3	=	$1f
0000043B =0000001F                M vcar4	=	$1f
0000043B                            	smpsVcAmpMod        $00, $00, $00, $00
0000043B =00000000                M vcam1	=	$00
0000043B =00000000                M vcam2	=	$00
0000043B =00000000                M vcam3	=	$00
0000043B =00000000                M vcam4	=	$00
0000043B                            	smpsVcDecayRate1    $02, $09, $18, $05
0000043B =00000002                M vcd1r1	=	$02
0000043B =00000009                M vcd1r2	=	$09
0000043B =00000018                M vcd1r3	=	$18
0000043B =00000005                M vcd1r4	=	$05
0000043B                            	smpsVcDecayRate2    $02, $06, $0F, $06
0000043B =00000002                M vcd2r1	=	$02
0000043B =00000006                M vcd2r2	=	$06
0000043B =0000000F                M vcd2r3	=	$0f
0000043B =00000006                M vcd2r4	=	$06
0000043B                            	smpsVcDecayLevel    $02, $04, $02, $01
0000043B =00000002                M vcdl1	=	$02
0000043B =00000004                M vcdl2	=	$04
0000043B =00000002                M vcdl3	=	$02
0000043B =00000001                M vcdl4	=	$01
0000043B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000043B =0000000F                M vcrr1	=	$0f
0000043B =0000000F                M vcrr2	=	$0f
0000043B =0000000F                M vcrr3	=	$0f
0000043B =0000000F                M vcrr4	=	$0f
0000043B                            	smpsVcTotalLevel    $00, $0E, $1A, $0F
0000043B =00000000                M vctl1	=	$00
0000043B =0000000E                M vctl2	=	$0e
0000043B =0000001A                M vctl3	=	$1a
0000043B =0000000F                M vctl4	=	$0f
0000043B FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000043C =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000043C =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000043C =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000043C =00000080                M vctlmask1	=	$80
0000043C 2110 3032                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000440 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000444 0509 1802                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000448 0606 0F02                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000044C 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000450 0F0E 1A80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000454                            
00000454                            Sound38:	include "sound/sfx/B8 - Unknown (Unused).asm"
00000454                            Sound38_Header:
00000454                            	smpsHeaderStartSong 2
00000454 =00000454                M songstart_2090	equ	offset(*)
00000454                            	smpsHeaderVoiceNull
00000454 0000                     M 	dc.w	$0000
00000456                            	smpsHeaderTempoSFX  $01
00000456 01                       M 	dc.b	$01
00000457                            	smpsHeaderChanSFX   $01
00000457 01                       M 	dc.b	$01
00000458                            
00000458                            	smpsHeaderSFXChannel cPSG3, Sound38_PSG3,	$00, $00
00000458 80C0                     M 	dc.b	$80,cpsg3
0000045A                          M 	z80_ptr	sound38_psg3
0000045A 0000                     M 	dc.w	(((sound38_psg3)<<8)&$ff00)|(((sound38_psg3)>>8)&$ff)|$80
0000045C 0000                     M 	dc.b	$00,$00
0000045E                            
0000045E                            ; PSG3 Data
0000045E                            Sound38_PSG3:
0000045E                            	smpsModSet          $01, $01, $F0, $08
0000045E F001 01F0 08             M 	dc.b	$f0,$01,$01,$f0,$08
00000463                            	smpsPSGform         $E7
00000463 F3E7                     M 	dc.b	$f3,$e7
00000465 B408                       	dc.b	nEb4, $08
00000467                            
00000467                            Sound38_Loop00:
00000467 B002                       	dc.b	nB3, $02
00000469                            	smpsPSGAlterVol     $01
00000469 EC01                     M 	dc.b	$ec,$01
0000046B                            	smpsLoop            $00, $03, Sound38_Loop00
0000046B F700 03                  M 	dc.b	$f7,$00,$03
0000046E                          M 	z80_ptr	sound38_loop00
0000046E 0000                     M 	dc.w	(((sound38_loop00)<<8)&$ff00)|(((sound38_loop00)>>8)&$ff)|$80
00000470                            	smpsStop
00000470 F2                       M 	dc.b	$f2
00000471                            Sound39:	include "sound/sfx/B9 - Smash.asm"
00000471                            Sound39_Smash_Header:
00000471                            	smpsHeaderStartSong 2
00000471 =00000471                M songstart_2102	equ	offset(*)
00000471                            	smpsHeaderVoice     Sound2C_39_4B_Voices
00000471                          M 	z80_ptr	sound2c_39_4b_voices
00000471 0000                     M 	dc.w	(((sound2c_39_4b_voices)<<8)&$ff00)|(((sound2c_39_4b_voices)>>8)&$ff)|$80
00000473                            	smpsHeaderTempoSFX  $01
00000473 01                       M 	dc.b	$01
00000474                            	smpsHeaderChanSFX   $04
00000474 04                       M 	dc.b	$04
00000475                            
00000475                            	smpsHeaderSFXChannel cFM3, Sound39_Smash_FM3,	$10, $00
00000475 8002                     M 	dc.b	$80,cfm3
00000477                          M 	z80_ptr	sound39_smash_fm3
00000477 0000                     M 	dc.w	(((sound39_smash_fm3)<<8)&$ff00)|(((sound39_smash_fm3)>>8)&$ff)|$80
00000479 1000                     M 	dc.b	$10,$00
0000047B                            	smpsHeaderSFXChannel cFM4, Sound39_Smash_FM4,	$00, $00
0000047B 8004                     M 	dc.b	$80,cfm4
0000047D                          M 	z80_ptr	sound39_smash_fm4
0000047D 0000                     M 	dc.w	(((sound39_smash_fm4)<<8)&$ff00)|(((sound39_smash_fm4)>>8)&$ff)|$80
0000047F 0000                     M 	dc.b	$00,$00
00000481                            	smpsHeaderSFXChannel cFM5, Sound39_Smash_FM5,	$10, $00
00000481 8005                     M 	dc.b	$80,cfm5
00000483                          M 	z80_ptr	sound39_smash_fm5
00000483 0000                     M 	dc.w	(((sound39_smash_fm5)<<8)&$ff00)|(((sound39_smash_fm5)>>8)&$ff)|$80
00000485 1000                     M 	dc.b	$10,$00
00000487                            	smpsHeaderSFXChannel cPSG3, Sound39_Smash_PSG3,	$00, $00
00000487 80C0                     M 	dc.b	$80,cpsg3
00000489                          M 	z80_ptr	sound39_smash_psg3
00000489 0000                     M 	dc.w	(((sound39_smash_psg3)<<8)&$ff00)|(((sound39_smash_psg3)>>8)&$ff)|$80
0000048B 0000                     M 	dc.b	$00,$00
0000048D                            
0000048D                            ; FM3 Data
0000048D                            Sound39_Smash_FM3:
0000048D                            	smpsPan             panRight, $00
0000048D E040                     M 	dc.b	$e0,panright|$00
0000048F 8002                       	dc.b	nRst, $02
00000491                            	smpsJump            Sound39_Smash_FM4
00000491 F6                       M 	dc.b	$f6
00000492                          M 	z80_ptr	sound39_smash_fm4
00000492 0000                     M 	dc.w	(((sound39_smash_fm4)<<8)&$ff00)|(((sound39_smash_fm4)>>8)&$ff)|$80
00000494                            
00000494                            ; FM5 Data
00000494                            Sound39_Smash_FM5:
00000494                            	smpsPan             panLeft, $00
00000494 E080                     M 	dc.b	$e0,panleft|$00
00000496 8001                       	dc.b	nRst, $01
00000498                            
00000498                            ; FM4 Data
00000498                            Sound39_Smash_FM4:
00000498                            	smpsSetvoice        $00
00000498 EF00                     M 	dc.b	$ef,$00
0000049A                            	smpsModSet          $03, $01, $20, $04
0000049A F003 0120 04             M 	dc.b	$f0,$03,$01,$20,$04
0000049F                            
0000049F                            Sound39_Smash_Loop00:
0000049F 8118                       	dc.b	nC0, $18
000004A1                            	smpsAlterVol        $0A
000004A1 E60A                     M 	dc.b	$e6,$0a
000004A3                            	smpsLoop            $00, $06, Sound39_Smash_Loop00
000004A3 F700 06                  M 	dc.b	$f7,$00,$06
000004A6                          M 	z80_ptr	sound39_smash_loop00
000004A6 0000                     M 	dc.w	(((sound39_smash_loop00)<<8)&$ff00)|(((sound39_smash_loop00)>>8)&$ff)|$80
000004A8                            	smpsStop
000004A8 F2                       M 	dc.b	$f2
000004A9                            
000004A9                            ; PSG3 Data
000004A9                            Sound39_Smash_PSG3:
000004A9                            	smpsModSet          $01, $01, $0F, $05
000004A9 F001 010F 05             M 	dc.b	$f0,$01,$01,$0f,$05
000004AE                            	smpsPSGform         $E7
000004AE F3E7                     M 	dc.b	$f3,$e7
000004B0                            
000004B0                            Sound39_Smash_Loop01:
000004B0 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000004B3                            	smpsPSGAlterVol     $03
000004B3 EC03                     M 	dc.b	$ec,$03
000004B5                            	smpsLoop            $00, $05, Sound39_Smash_Loop01
000004B5 F700 05                  M 	dc.b	$f7,$00,$05
000004B8                          M 	z80_ptr	sound39_smash_loop01
000004B8 0000                     M 	dc.w	(((sound39_smash_loop01)<<8)&$ff00)|(((sound39_smash_loop01)>>8)&$ff)|$80
000004BA                            	smpsStop
000004BA F2                       M 	dc.b	$f2
000004BB                            Sound3A:	include "sound/sfx/BA - Special Stage Glass (Unused).asm"
000004BB                            Sound3A_Header:
000004BB                            	smpsHeaderStartSong 2
000004BB =000004BB                M songstart_2131	equ	offset(*)
000004BB                            	smpsHeaderVoice     Sound3A_Voices
000004BB                          M 	z80_ptr	sound3a_voices
000004BB 0000                     M 	dc.w	(((sound3a_voices)<<8)&$ff00)|(((sound3a_voices)>>8)&$ff)|$80
000004BD                            	smpsHeaderTempoSFX  $01
000004BD 01                       M 	dc.b	$01
000004BE                            	smpsHeaderChanSFX   $01
000004BE 01                       M 	dc.b	$01
000004BF                            
000004BF                            	smpsHeaderSFXChannel cFM5, Sound3A_FM5,	$00, $07
000004BF 8005                     M 	dc.b	$80,cfm5
000004C1                          M 	z80_ptr	sound3a_fm5
000004C1 0000                     M 	dc.w	(((sound3a_fm5)<<8)&$ff00)|(((sound3a_fm5)>>8)&$ff)|$80
000004C3 0007                     M 	dc.b	$00,$07
000004C5                            
000004C5                            ; FM5 Data
000004C5                            Sound3A_FM5:
000004C5                            	smpsSetvoice        $00
000004C5 EF00                     M 	dc.b	$ef,$00
000004C7 AE08                       	dc.b	nA3, $08
000004C9                            	smpsStop
000004C9 F2                       M 	dc.b	$f2
000004CA                            
000004CA                            Sound3A_Voices:
000004CA                            ;	Voice $00
000004CA                            ;	$1C
000004CA                            ;	$2E, $02, $0F, $02, 	$1F, $1F, $1F, $1F, 	$18, $0F, $14, $0E
000004CA                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$20, $80, $1B, $80
000004CA                            	smpsVcAlgorithm     $04
000004CA =00000004                M vcalgorithm	=	$04
000004CA                            	smpsVcFeedback      $03
000004CA =00000003                M vcfeedback	=	$03
000004CA                            	smpsVcUnusedBits    $00
000004CA =00000000                M vcunusedbits	=	$00
000004CA =00000000                M vcd1r1unk	=	0
000004CA =00000000                M vcd1r2unk	=	0
000004CA =00000000                M vcd1r3unk	=	0
000004CA =00000000                M vcd1r4unk	=	0
000004CA                            	smpsVcDetune        $00, $00, $00, $02
000004CA =00000000                M vcdt1	=	$00
000004CA =00000000                M vcdt2	=	$00
000004CA =00000000                M vcdt3	=	$00
000004CA =00000002                M vcdt4	=	$02
000004CA                            	smpsVcCoarseFreq    $02, $0F, $02, $0E
000004CA =00000002                M vccf1	=	$02
000004CA =0000000F                M vccf2	=	$0f
000004CA =00000002                M vccf3	=	$02
000004CA =0000000E                M vccf4	=	$0e
000004CA                            	smpsVcRateScale     $00, $00, $00, $00
000004CA =00000000                M vcrs1	=	$00
000004CA =00000000                M vcrs2	=	$00
000004CA =00000000                M vcrs3	=	$00
000004CA =00000000                M vcrs4	=	$00
000004CA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000004CA =0000001F                M vcar1	=	$1f
000004CA =0000001F                M vcar2	=	$1f
000004CA =0000001F                M vcar3	=	$1f
000004CA =0000001F                M vcar4	=	$1f
000004CA                            	smpsVcAmpMod        $00, $00, $00, $00
000004CA =00000000                M vcam1	=	$00
000004CA =00000000                M vcam2	=	$00
000004CA =00000000                M vcam3	=	$00
000004CA =00000000                M vcam4	=	$00
000004CA                            	smpsVcDecayRate1    $0E, $14, $0F, $18
000004CA =0000000E                M vcd1r1	=	$0e
000004CA =00000014                M vcd1r2	=	$14
000004CA =0000000F                M vcd1r3	=	$0f
000004CA =00000018                M vcd1r4	=	$18
000004CA                            	smpsVcDecayRate2    $00, $00, $00, $00
000004CA =00000000                M vcd2r1	=	$00
000004CA =00000000                M vcd2r2	=	$00
000004CA =00000000                M vcd2r3	=	$00
000004CA =00000000                M vcd2r4	=	$00
000004CA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000004CA =0000000F                M vcdl1	=	$0f
000004CA =0000000F                M vcdl2	=	$0f
000004CA =0000000F                M vcdl3	=	$0f
000004CA =0000000F                M vcdl4	=	$0f
000004CA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004CA =0000000F                M vcrr1	=	$0f
000004CA =0000000F                M vcrr2	=	$0f
000004CA =0000000F                M vcrr3	=	$0f
000004CA =0000000F                M vcrr4	=	$0f
000004CA                            	smpsVcTotalLevel    $00, $1B, $00, $20
000004CA =00000000                M vctl1	=	$00
000004CA =0000001B                M vctl2	=	$1b
000004CA =00000000                M vctl3	=	$00
000004CA =00000020                M vctl4	=	$20
000004CA 1C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004CB =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000004CB =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000004CB =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000004CB =00000080                M vctlmask1	=	$80
000004CB 2E0F 0202                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004CF 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004D3 1814 0F0E                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000004D7 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000004DB FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000004DF 201B 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000004E3                            
000004E3                            Sound3B:	include "sound/sfx/BB - Door Slam.asm"
000004E3                            Sound3B_DoorSlam_Header:
000004E3                            	smpsHeaderStartSong 2
000004E3 =000004E3                M songstart_2153	equ	offset(*)
000004E3                            	smpsHeaderVoice     Sound3B_DoorSlam_Voices
000004E3                          M 	z80_ptr	sound3b_doorslam_voices
000004E3 0000                     M 	dc.w	(((sound3b_doorslam_voices)<<8)&$ff00)|(((sound3b_doorslam_voices)>>8)&$ff)|$80
000004E5                            	smpsHeaderTempoSFX  $01
000004E5 01                       M 	dc.b	$01
000004E6                            	smpsHeaderChanSFX   $01
000004E6 01                       M 	dc.b	$01
000004E7                            
000004E7                            	smpsHeaderSFXChannel cFM5, Sound3B_DoorSlam_FM5,	$F4, $00
000004E7 8005                     M 	dc.b	$80,cfm5
000004E9                          M 	z80_ptr	sound3b_doorslam_fm5
000004E9 0000                     M 	dc.w	(((sound3b_doorslam_fm5)<<8)&$ff00)|(((sound3b_doorslam_fm5)>>8)&$ff)|$80
000004EB F400                     M 	dc.b	$f4,$00
000004ED                            
000004ED                            ; FM5 Data
000004ED                            Sound3B_DoorSlam_FM5:
000004ED                            	smpsSetvoice        $00
000004ED EF00                     M 	dc.b	$ef,$00
000004EF 9B04 80A0 06               	dc.b	nD2, $04, nRst, nG2, $06
000004F4                            	smpsStop
000004F4 F2                       M 	dc.b	$f2
000004F5                            
000004F5                            Sound3B_DoorSlam_Voices:
000004F5                            ;	Voice $00
000004F5                            ;	$3C
000004F5                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $16, $0F, $0F
000004F5                            ;	$00, $00, $00, $00, 	$0F, $AF, $FF, $FF, 	$00, $80, $0A, $80
000004F5                            	smpsVcAlgorithm     $04
000004F5 =00000004                M vcalgorithm	=	$04
000004F5                            	smpsVcFeedback      $07
000004F5 =00000007                M vcfeedback	=	$07
000004F5                            	smpsVcUnusedBits    $00
000004F5 =00000000                M vcunusedbits	=	$00
000004F5 =00000000                M vcd1r1unk	=	0
000004F5 =00000000                M vcd1r2unk	=	0
000004F5 =00000000                M vcd1r3unk	=	0
000004F5 =00000000                M vcd1r4unk	=	0
000004F5                            	smpsVcDetune        $00, $00, $00, $00
000004F5 =00000000                M vcdt1	=	$00
000004F5 =00000000                M vcdt2	=	$00
000004F5 =00000000                M vcdt3	=	$00
000004F5 =00000000                M vcdt4	=	$00
000004F5                            	smpsVcCoarseFreq    $00, $00, $00, $00
000004F5 =00000000                M vccf1	=	$00
000004F5 =00000000                M vccf2	=	$00
000004F5 =00000000                M vccf3	=	$00
000004F5 =00000000                M vccf4	=	$00
000004F5                            	smpsVcRateScale     $00, $00, $00, $00
000004F5 =00000000                M vcrs1	=	$00
000004F5 =00000000                M vcrs2	=	$00
000004F5 =00000000                M vcrs3	=	$00
000004F5 =00000000                M vcrs4	=	$00
000004F5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000004F5 =0000001F                M vcar1	=	$1f
000004F5 =0000001F                M vcar2	=	$1f
000004F5 =0000001F                M vcar3	=	$1f
000004F5 =0000001F                M vcar4	=	$1f
000004F5                            	smpsVcAmpMod        $00, $00, $00, $00
000004F5 =00000000                M vcam1	=	$00
000004F5 =00000000                M vcam2	=	$00
000004F5 =00000000                M vcam3	=	$00
000004F5 =00000000                M vcam4	=	$00
000004F5                            	smpsVcDecayRate1    $0F, $0F, $16, $00
000004F5 =0000000F                M vcd1r1	=	$0f
000004F5 =0000000F                M vcd1r2	=	$0f
000004F5 =00000016                M vcd1r3	=	$16
000004F5 =00000000                M vcd1r4	=	$00
000004F5                            	smpsVcDecayRate2    $00, $00, $00, $00
000004F5 =00000000                M vcd2r1	=	$00
000004F5 =00000000                M vcd2r2	=	$00
000004F5 =00000000                M vcd2r3	=	$00
000004F5 =00000000                M vcd2r4	=	$00
000004F5                            	smpsVcDecayLevel    $0F, $0F, $0A, $00
000004F5 =0000000F                M vcdl1	=	$0f
000004F5 =0000000F                M vcdl2	=	$0f
000004F5 =0000000A                M vcdl3	=	$0a
000004F5 =00000000                M vcdl4	=	$00
000004F5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000004F5 =0000000F                M vcrr1	=	$0f
000004F5 =0000000F                M vcrr2	=	$0f
000004F5 =0000000F                M vcrr3	=	$0f
000004F5 =0000000F                M vcrr4	=	$0f
000004F5                            	smpsVcTotalLevel    $00, $0A, $00, $00
000004F5 =00000000                M vctl1	=	$00
000004F5 =0000000A                M vctl2	=	$0a
000004F5 =00000000                M vctl3	=	$00
000004F5 =00000000                M vctl4	=	$00
000004F5 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000004F6 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000004F6 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000004F6 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000004F6 =00000080                M vctlmask1	=	$80
000004F6 0000 0000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000004FA 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000004FE 000F 160F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000502 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000506 0FFF AFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000050A 000A 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000050E                            
0000050E                            Sound3C:	include "sound/sfx/BC - Spin Dash Release.asm"
0000050E                            Sound3C_SpindashRelease_Header:
0000050E                            	smpsHeaderStartSong 2
0000050E =0000050E                M songstart_2175	equ	offset(*)
0000050E                            	smpsHeaderVoice     Sound3C_SpindashRelease_Voices
0000050E                          M 	z80_ptr	sound3c_spindashrelease_voices
0000050E 0000                     M 	dc.w	(((sound3c_spindashrelease_voices)<<8)&$ff00)|(((sound3c_spindashrelease_voices)>>8)&$ff)|$80
00000510                            	smpsHeaderTempoSFX  $01
00000510 01                       M 	dc.b	$01
00000511                            	smpsHeaderChanSFX   $02
00000511 02                       M 	dc.b	$02
00000512                            
00000512                            	smpsHeaderSFXChannel cFM5, Sound3C_SpindashRelease_FM5,	$90, $00
00000512 8005                     M 	dc.b	$80,cfm5
00000514                          M 	z80_ptr	sound3c_spindashrelease_fm5
00000514 0000                     M 	dc.w	(((sound3c_spindashrelease_fm5)<<8)&$ff00)|(((sound3c_spindashrelease_fm5)>>8)&$ff)|$80
00000516 9000                     M 	dc.b	$90,$00
00000518                            	smpsHeaderSFXChannel cPSG3, Sound3C_SpindashRelease_PSG3,	$00, $00
00000518 80C0                     M 	dc.b	$80,cpsg3
0000051A                          M 	z80_ptr	sound3c_spindashrelease_psg3
0000051A 0000                     M 	dc.w	(((sound3c_spindashrelease_psg3)<<8)&$ff00)|(((sound3c_spindashrelease_psg3)>>8)&$ff)|$80
0000051C 0000                     M 	dc.b	$00,$00
0000051E                            
0000051E                            ; FM5 Data
0000051E                            Sound3C_SpindashRelease_FM5:
0000051E                            	smpsSetvoice        $00
0000051E EF00                     M 	dc.b	$ef,$00
00000520                            	smpsModSet          $01, $01, $C5, $1A
00000520 F001 01C5 1A             M 	dc.b	$f0,$01,$01,$c5,$1a
00000525 CD07                       	dc.b	nE6, $07
00000527                            	smpsStop
00000527 F2                       M 	dc.b	$f2
00000528                            
00000528                            ; PSG3 Data
00000528                            Sound3C_SpindashRelease_PSG3:
00000528                            	smpsPSGvoice        fTone_07
00000528 F507                     M 	dc.b	$f5,ftone_07
0000052A 8007                       	dc.b	nRst, $07
0000052C                            	smpsModSet          $01, $02, $05, $FF
0000052C F001 0205 FF             M 	dc.b	$f0,$01,$02,$05,$ff
00000531                            	smpsPSGform         $E7
00000531 F3E7                     M 	dc.b	$f3,$e7
00000533 BB4F                       	dc.b	nBb4, $4F
00000535                            	smpsStop
00000535 F2                       M 	dc.b	$f2
00000536                            
00000536                            Sound3C_SpindashRelease_Voices:
00000536                            ;	Voice $00
00000536                            ;	$FD
00000536                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
00000536                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
00000536                            	smpsVcAlgorithm     $05
00000536 =00000005                M vcalgorithm	=	$05
00000536                            	smpsVcFeedback      $07
00000536 =00000007                M vcfeedback	=	$07
00000536                            	smpsVcUnusedBits    $03
00000536 =00000003                M vcunusedbits	=	$03
00000536 =00000000                M vcd1r1unk	=	0
00000536 =00000000                M vcd1r2unk	=	0
00000536 =00000000                M vcd1r3unk	=	0
00000536 =00000000                M vcd1r4unk	=	0
00000536                            	smpsVcDetune        $00, $00, $00, $00
00000536 =00000000                M vcdt1	=	$00
00000536 =00000000                M vcdt2	=	$00
00000536 =00000000                M vcdt3	=	$00
00000536 =00000000                M vcdt4	=	$00
00000536                            	smpsVcCoarseFreq    $00, $00, $03, $09
00000536 =00000000                M vccf1	=	$00
00000536 =00000000                M vccf2	=	$00
00000536 =00000003                M vccf3	=	$03
00000536 =00000009                M vccf4	=	$09
00000536                            	smpsVcRateScale     $00, $00, $00, $00
00000536 =00000000                M vcrs1	=	$00
00000536 =00000000                M vcrs2	=	$00
00000536 =00000000                M vcrs3	=	$00
00000536 =00000000                M vcrs4	=	$00
00000536                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000536 =0000001F                M vcar1	=	$1f
00000536 =0000001F                M vcar2	=	$1f
00000536 =0000001F                M vcar3	=	$1f
00000536 =0000001F                M vcar4	=	$1f
00000536                            	smpsVcAmpMod        $00, $00, $00, $00
00000536 =00000000                M vcam1	=	$00
00000536 =00000000                M vcam2	=	$00
00000536 =00000000                M vcam3	=	$00
00000536 =00000000                M vcam4	=	$00
00000536                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
00000536 =0000000C                M vcd1r1	=	$0c
00000536 =0000000C                M vcd1r2	=	$0c
00000536 =0000000C                M vcd1r3	=	$0c
00000536 =00000010                M vcd1r4	=	$10
00000536                            	smpsVcDecayRate2    $05, $10, $1F, $0B
00000536 =00000005                M vcd2r1	=	$05
00000536 =00000010                M vcd2r2	=	$10
00000536 =0000001F                M vcd2r3	=	$1f
00000536 =0000000B                M vcd2r4	=	$0b
00000536                            	smpsVcDecayLevel    $02, $04, $02, $01
00000536 =00000002                M vcdl1	=	$02
00000536 =00000004                M vcdl2	=	$04
00000536 =00000002                M vcdl3	=	$02
00000536 =00000001                M vcdl4	=	$01
00000536                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000536 =0000000F                M vcrr1	=	$0f
00000536 =0000000F                M vcrr2	=	$0f
00000536 =0000000F                M vcrr3	=	$0f
00000536 =0000000F                M vcrr4	=	$0f
00000536                            	smpsVcTotalLevel    $0E, $12, $04, $09
00000536 =0000000E                M vctl1	=	$0e
00000536 =00000012                M vctl2	=	$12
00000536 =00000004                M vctl3	=	$04
00000536 =00000009                M vctl4	=	$09
00000536 FD                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000537 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000537 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000537 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000537 =00000080                M vctlmask1	=	$80
00000537 0900 0300                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000053B 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000053F 100C 0C0C                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000543 0B10 1F05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000547 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000054B 0992 848E                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000054F                            
0000054F                            Sound3D:	include "sound/sfx/BD - Hammer.asm"
0000054F                            Sound3D_Hammer_Header:
0000054F                            	smpsHeaderStartSong 2
0000054F =0000054F                M songstart_2204	equ	offset(*)
0000054F                            	smpsHeaderVoice     Sound3D_Hammer_Voices
0000054F                          M 	z80_ptr	sound3d_hammer_voices
0000054F 0000                     M 	dc.w	(((sound3d_hammer_voices)<<8)&$ff00)|(((sound3d_hammer_voices)>>8)&$ff)|$80
00000551                            	smpsHeaderTempoSFX  $01
00000551 01                       M 	dc.b	$01
00000552                            	smpsHeaderChanSFX   $02
00000552 02                       M 	dc.b	$02
00000553                            
00000553                            	smpsHeaderSFXChannel cFM5, Sound3D_Hammer_FM5,	$10, $0A
00000553 8005                     M 	dc.b	$80,cfm5
00000555                          M 	z80_ptr	sound3d_hammer_fm5
00000555 0000                     M 	dc.w	(((sound3d_hammer_fm5)<<8)&$ff00)|(((sound3d_hammer_fm5)>>8)&$ff)|$80
00000557 100A                     M 	dc.b	$10,$0a
00000559                            	smpsHeaderSFXChannel cFM4, Sound3D_Hammer_FM4,	$00, $00
00000559 8004                     M 	dc.b	$80,cfm4
0000055B                          M 	z80_ptr	sound3d_hammer_fm4
0000055B 0000                     M 	dc.w	(((sound3d_hammer_fm4)<<8)&$ff00)|(((sound3d_hammer_fm4)>>8)&$ff)|$80
0000055D 0000                     M 	dc.b	$00,$00
0000055F                            
0000055F                            ; FM5 Data
0000055F                            Sound3D_Hammer_FM5:
0000055F                            	smpsSetvoice        $00
0000055F EF00                     M 	dc.b	$ef,$00
00000561                            	smpsModSet          $01, $01, $60, $01
00000561 F001 0160 01             M 	dc.b	$f0,$01,$01,$60,$01
00000566 A708                       	dc.b	nD3, $08
00000568                            	smpsStop
00000568 F2                       M 	dc.b	$f2
00000569                            
00000569                            ; FM4 Data
00000569                            Sound3D_Hammer_FM4:
00000569 8008                       	dc.b	nRst, $08
0000056B                            	smpsSetvoice        $01
0000056B EF01                     M 	dc.b	$ef,$01
0000056D 8422                       	dc.b	nEb0, $22
0000056F                            	smpsStop
0000056F F2                       M 	dc.b	$f2
00000570                            
00000570                            Sound3D_Hammer_Voices:
00000570                            ;	Voice $00
00000570                            ;	$FA
00000570                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
00000570                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
00000570                            	smpsVcAlgorithm     $02
00000570 =00000002                M vcalgorithm	=	$02
00000570                            	smpsVcFeedback      $07
00000570 =00000007                M vcfeedback	=	$07
00000570                            	smpsVcUnusedBits    $03
00000570 =00000003                M vcunusedbits	=	$03
00000570 =00000000                M vcd1r1unk	=	0
00000570 =00000000                M vcd1r2unk	=	0
00000570 =00000000                M vcd1r3unk	=	0
00000570 =00000000                M vcd1r4unk	=	0
00000570                            	smpsVcDetune        $03, $01, $03, $02
00000570 =00000003                M vcdt1	=	$03
00000570 =00000001                M vcdt2	=	$01
00000570 =00000003                M vcdt3	=	$03
00000570 =00000002                M vcdt4	=	$02
00000570                            	smpsVcCoarseFreq    $00, $09, $0A, $01
00000570 =00000000                M vccf1	=	$00
00000570 =00000009                M vccf2	=	$09
00000570 =0000000A                M vccf3	=	$0a
00000570 =00000001                M vccf4	=	$01
00000570                            	smpsVcRateScale     $00, $00, $00, $00
00000570 =00000000                M vcrs1	=	$00
00000570 =00000000                M vcrs2	=	$00
00000570 =00000000                M vcrs3	=	$00
00000570 =00000000                M vcrs4	=	$00
00000570                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000570 =0000001F                M vcar1	=	$1f
00000570 =0000001F                M vcar2	=	$1f
00000570 =0000001F                M vcar3	=	$1f
00000570 =0000001F                M vcar4	=	$1f
00000570                            	smpsVcAmpMod        $00, $00, $00, $00
00000570 =00000000                M vcam1	=	$00
00000570 =00000000                M vcam2	=	$00
00000570 =00000000                M vcam3	=	$00
00000570 =00000000                M vcam4	=	$00
00000570                            	smpsVcDecayRate1    $02, $09, $18, $05
00000570 =00000002                M vcd1r1	=	$02
00000570 =00000009                M vcd1r2	=	$09
00000570 =00000018                M vcd1r3	=	$18
00000570 =00000005                M vcd1r4	=	$05
00000570                            	smpsVcDecayRate2    $05, $10, $1F, $0B
00000570 =00000005                M vcd2r1	=	$05
00000570 =00000010                M vcd2r2	=	$10
00000570 =0000001F                M vcd2r3	=	$1f
00000570 =0000000B                M vcd2r4	=	$0b
00000570                            	smpsVcDecayLevel    $02, $04, $02, $01
00000570 =00000002                M vcdl1	=	$02
00000570 =00000004                M vcdl2	=	$04
00000570 =00000002                M vcdl3	=	$02
00000570 =00000001                M vcdl4	=	$01
00000570                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000570 =0000000F                M vcrr1	=	$0f
00000570 =0000000F                M vcrr2	=	$0f
00000570 =0000000F                M vcrr3	=	$0f
00000570 =0000000F                M vcrr4	=	$0f
00000570                            	smpsVcTotalLevel    $00, $04, $07, $0E
00000570 =00000000                M vctl1	=	$00
00000570 =00000004                M vctl2	=	$04
00000570 =00000007                M vctl3	=	$07
00000570 =0000000E                M vctl4	=	$0e
00000570 FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000571 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000571 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000571 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000571 =00000080                M vctlmask1	=	$80
00000571 2119 3A30                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000575 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000579 0509 1802                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
0000057D 0B10 1F05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000581 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000585 0E04 0780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000589                            
00000589                            ;	Voice $01
00000589                            ;	$FA
00000589                            ;	$31, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $05, $10
00000589                            ;	$0B, $1F, $10, $10, 	$1F, $2F, $1F, $2F, 	$0D, $00, $01, $80
00000589                            	smpsVcAlgorithm     $02
00000589 =00000002                M vcalgorithm	=	$02
00000589                            	smpsVcFeedback      $07
00000589 =00000007                M vcfeedback	=	$07
00000589                            	smpsVcUnusedBits    $03
00000589 =00000003                M vcunusedbits	=	$03
00000589 =00000000                M vcd1r1unk	=	0
00000589 =00000000                M vcd1r2unk	=	0
00000589 =00000000                M vcd1r3unk	=	0
00000589 =00000000                M vcd1r4unk	=	0
00000589                            	smpsVcDetune        $03, $01, $03, $03
00000589 =00000003                M vcdt1	=	$03
00000589 =00000001                M vcdt2	=	$01
00000589 =00000003                M vcdt3	=	$03
00000589 =00000003                M vcdt4	=	$03
00000589                            	smpsVcCoarseFreq    $02, $00, $00, $01
00000589 =00000002                M vccf1	=	$02
00000589 =00000000                M vccf2	=	$00
00000589 =00000000                M vccf3	=	$00
00000589 =00000001                M vccf4	=	$01
00000589                            	smpsVcRateScale     $00, $00, $00, $00
00000589 =00000000                M vcrs1	=	$00
00000589 =00000000                M vcrs2	=	$00
00000589 =00000000                M vcrs3	=	$00
00000589 =00000000                M vcrs4	=	$00
00000589                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000589 =0000001F                M vcar1	=	$1f
00000589 =0000001F                M vcar2	=	$1f
00000589 =0000001F                M vcar3	=	$1f
00000589 =0000001F                M vcar4	=	$1f
00000589                            	smpsVcAmpMod        $00, $00, $00, $00
00000589 =00000000                M vcam1	=	$00
00000589 =00000000                M vcam2	=	$00
00000589 =00000000                M vcam3	=	$00
00000589 =00000000                M vcam4	=	$00
00000589                            	smpsVcDecayRate1    $10, $05, $18, $05
00000589 =00000010                M vcd1r1	=	$10
00000589 =00000005                M vcd1r2	=	$05
00000589 =00000018                M vcd1r3	=	$18
00000589 =00000005                M vcd1r4	=	$05
00000589                            	smpsVcDecayRate2    $10, $10, $1F, $0B
00000589 =00000010                M vcd2r1	=	$10
00000589 =00000010                M vcd2r2	=	$10
00000589 =0000001F                M vcd2r3	=	$1f
00000589 =0000000B                M vcd2r4	=	$0b
00000589                            	smpsVcDecayLevel    $02, $01, $02, $01
00000589 =00000002                M vcdl1	=	$02
00000589 =00000001                M vcdl2	=	$01
00000589 =00000002                M vcdl3	=	$02
00000589 =00000001                M vcdl4	=	$01
00000589                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000589 =0000000F                M vcrr1	=	$0f
00000589 =0000000F                M vcrr2	=	$0f
00000589 =0000000F                M vcrr3	=	$0f
00000589 =0000000F                M vcrr4	=	$0f
00000589                            	smpsVcTotalLevel    $00, $01, $00, $0D
00000589 =00000000                M vctl1	=	$00
00000589 =00000001                M vctl2	=	$01
00000589 =00000000                M vctl3	=	$00
00000589 =0000000D                M vctl4	=	$0d
00000589 FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000058A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000058A =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000058A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000058A =00000080                M vctlmask1	=	$80
0000058A 3110 3032                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000058E 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000592 0505 1810                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000596 0B10 1F10                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000059A 1F1F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000059E 0D01 0080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005A2                            
000005A2                            Sound3E:	include "sound/sfx/BE - Roll.asm"
000005A2                            Sound3E_Roll_Header:
000005A2                            	smpsHeaderStartSong 2, 1
000005A2 =000005A2                M songstart_2244	equ	offset(*)
000005A2                            	smpsHeaderVoice     Sound3E_Roll_Voices
000005A2                          M 	z80_ptr	sound3e_roll_voices
000005A2 0000                     M 	dc.w	(((sound3e_roll_voices)<<8)&$ff00)|(((sound3e_roll_voices)>>8)&$ff)|$80
000005A4                            	smpsHeaderTempoSFX  $01
000005A4 01                       M 	dc.b	$01
000005A5                            	smpsHeaderChanSFX   $01
000005A5 01                       M 	dc.b	$01
000005A6                            
000005A6                            	smpsHeaderSFXChannel cFM4, Sound3E_Roll_FM4,	$0C, $05
000005A6 8004                     M 	dc.b	$80,cfm4
000005A8                          M 	z80_ptr	sound3e_roll_fm4
000005A8 0000                     M 	dc.w	(((sound3e_roll_fm4)<<8)&$ff00)|(((sound3e_roll_fm4)>>8)&$ff)|$80
000005AA 0C05                     M 	dc.b	$0c,$05
000005AC                            
000005AC                            ; FM4 Data
000005AC                            Sound3E_Roll_FM4:
000005AC                            	smpsSetvoice        $00
000005AC EF00                     M 	dc.b	$ef,$00
000005AE 8001                       	dc.b	nRst, $01
000005B0                            	smpsModSet          $03, $01, $09, $FF
000005B0 F003 0109 FF             M 	dc.b	$f0,$03,$01,$09,$ff
000005B5 CA25                       	dc.b	nCs6, $25
000005B7                            	smpsModOff
000005B7 F4                       M 	dc.b	$f4
000005B8                            
000005B8                            Sound3E_Roll_Loop00:
000005B8 E7                         	dc.b	smpsNoAttack
000005B9                            	smpsAlterVol        $01
000005B9 E601                     M 	dc.b	$e6,$01
000005BB D002                       	dc.b	nG6, $02
000005BD                            	smpsLoop            $00, $2A, Sound3E_Roll_Loop00
000005BD F700 2A                  M 	dc.b	$f7,$00,$2a
000005C0                          M 	z80_ptr	sound3e_roll_loop00
000005C0 0000                     M 	dc.w	(((sound3e_roll_loop00)<<8)&$ff00)|(((sound3e_roll_loop00)>>8)&$ff)|$80
000005C2                            	smpsStop
000005C2 F2                       M 	dc.b	$f2
000005C3                            
000005C3                            Sound3E_Roll_Voices:
000005C3                            ;	Voice $00
000005C3                            ;	$3C
000005C3                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000005C3                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $00, $28, $00
000005C3                            	smpsVcAlgorithm     $04
000005C3 =00000004                M vcalgorithm	=	$04
000005C3                            	smpsVcFeedback      $07
000005C3 =00000007                M vcfeedback	=	$07
000005C3                            	smpsVcUnusedBits    $00
000005C3 =00000000                M vcunusedbits	=	$00
000005C3 =00000000                M vcd1r1unk	=	0
000005C3 =00000000                M vcd1r2unk	=	0
000005C3 =00000000                M vcd1r3unk	=	0
000005C3 =00000000                M vcd1r4unk	=	0
000005C3                            	smpsVcDetune        $00, $00, $04, $00
000005C3 =00000000                M vcdt1	=	$00
000005C3 =00000000                M vcdt2	=	$00
000005C3 =00000004                M vcdt3	=	$04
000005C3 =00000000                M vcdt4	=	$00
000005C3                            	smpsVcCoarseFreq    $02, $02, $04, $00
000005C3 =00000002                M vccf1	=	$02
000005C3 =00000002                M vccf2	=	$02
000005C3 =00000004                M vccf3	=	$04
000005C3 =00000000                M vccf4	=	$00
000005C3                            	smpsVcRateScale     $00, $00, $00, $00
000005C3 =00000000                M vcrs1	=	$00
000005C3 =00000000                M vcrs2	=	$00
000005C3 =00000000                M vcrs3	=	$00
000005C3 =00000000                M vcrs4	=	$00
000005C3                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000005C3 =00000015                M vcar1	=	$15
000005C3 =0000001F                M vcar2	=	$1f
000005C3 =0000001F                M vcar3	=	$1f
000005C3 =0000001F                M vcar4	=	$1f
000005C3                            	smpsVcAmpMod        $00, $00, $00, $00
000005C3 =00000000                M vcam1	=	$00
000005C3 =00000000                M vcam2	=	$00
000005C3 =00000000                M vcam3	=	$00
000005C3 =00000000                M vcam4	=	$00
000005C3                            	smpsVcDecayRate1    $00, $00, $1F, $00
000005C3 =00000000                M vcd1r1	=	$00
000005C3 =00000000                M vcd1r2	=	$00
000005C3 =0000001F                M vcd1r3	=	$1f
000005C3 =00000000                M vcd1r4	=	$00
000005C3                            	smpsVcDecayRate2    $00, $00, $00, $00
000005C3 =00000000                M vcd2r1	=	$00
000005C3 =00000000                M vcd2r2	=	$00
000005C3 =00000000                M vcd2r3	=	$00
000005C3 =00000000                M vcd2r4	=	$00
000005C3                            	smpsVcDecayLevel    $00, $00, $00, $00
000005C3 =00000000                M vcdl1	=	$00
000005C3 =00000000                M vcdl2	=	$00
000005C3 =00000000                M vcdl3	=	$00
000005C3 =00000000                M vcdl4	=	$00
000005C3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000005C3 =0000000F                M vcrr1	=	$0f
000005C3 =0000000F                M vcrr2	=	$0f
000005C3 =0000000F                M vcrr3	=	$0f
000005C3 =0000000F                M vcrr4	=	$0f
000005C3                            	smpsVcTotalLevel    $00, $28, $00, $0D
000005C3 =00000000                M vctl1	=	$00
000005C3 =00000028                M vctl2	=	$28
000005C3 =00000000                M vctl3	=	$00
000005C3 =0000000D                M vctl4	=	$0d
000005C3 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000005C4 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000005C4 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000005C4 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000005C4 =00000080                M vctlmask1	=	$80
000005C4 0002 4402                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000005C8 1F1F 1F15                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000005CC 0000 1F00                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000005D0 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000005D4 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000005D8 0D28 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000005DC                            
000005DC                            Sound3F:	include "sound/sfx/BF - Continue Jingle.asm"
000005DC                            Sound3F_ContinueJingle_Header:
000005DC                            	smpsHeaderStartSong 2, 1
000005DC =000005DC                M songstart_2271	equ	offset(*)
000005DC                            	smpsHeaderVoice     Sound3F_40_42_Voices
000005DC                          M 	z80_ptr	sound3f_40_42_voices
000005DC 0000                     M 	dc.w	(((sound3f_40_42_voices)<<8)&$ff00)|(((sound3f_40_42_voices)>>8)&$ff)|$80
000005DE                            	smpsHeaderTempoSFX  $01
000005DE 01                       M 	dc.b	$01
000005DF                            	smpsHeaderChanSFX   $03
000005DF 03                       M 	dc.b	$03
000005E0                            
000005E0                            	smpsHeaderSFXChannel cFM3, Sound3F_ContinueJingle_FM3,	$F4, $06
000005E0 8002                     M 	dc.b	$80,cfm3
000005E2                          M 	z80_ptr	sound3f_continuejingle_fm3
000005E2 0000                     M 	dc.w	(((sound3f_continuejingle_fm3)<<8)&$ff00)|(((sound3f_continuejingle_fm3)>>8)&$ff)|$80
000005E4 F406                     M 	dc.b	$f4,$06
000005E6                            	smpsHeaderSFXChannel cFM4, Sound3F_ContinueJingle_FM4,	$F4, $06
000005E6 8004                     M 	dc.b	$80,cfm4
000005E8                          M 	z80_ptr	sound3f_continuejingle_fm4
000005E8 0000                     M 	dc.w	(((sound3f_continuejingle_fm4)<<8)&$ff00)|(((sound3f_continuejingle_fm4)>>8)&$ff)|$80
000005EA F406                     M 	dc.b	$f4,$06
000005EC                            	smpsHeaderSFXChannel cFM5, Sound3F_ContinueJingle_FM5,	$F4, $06
000005EC 8005                     M 	dc.b	$80,cfm5
000005EE                          M 	z80_ptr	sound3f_continuejingle_fm5
000005EE 0000                     M 	dc.w	(((sound3f_continuejingle_fm5)<<8)&$ff00)|(((sound3f_continuejingle_fm5)>>8)&$ff)|$80
000005F0 F406                     M 	dc.b	$f4,$06
000005F2                            
000005F2                            ; FM3 Data
000005F2                            Sound3F_ContinueJingle_FM3:
000005F2                            	smpsSetvoice        $00
000005F2 EF00                     M 	dc.b	$ef,$00
000005F4 C907 CDD0 CBCE D2CD D0D4+  	dc.b	nC6, $07, nE6, nG6, nD6, nF6, nA6, nE6, nG6, nB6, nF6, nA6
00000600 D5                         	dc.b	nC7
00000601                            
00000601                            Sound3F_ContinueJingle_Loop02:
00000601 D007 D4D7                  	dc.b	nG6, $07, nB6, nD7
00000605                            	smpsAlterVol        $05
00000605 E605                     M 	dc.b	$e6,$05
00000607                            	smpsLoop            $00, $08, Sound3F_ContinueJingle_Loop02
00000607 F700 08                  M 	dc.b	$f7,$00,$08
0000060A                          M 	z80_ptr	sound3f_continuejingle_loop02
0000060A 0000                     M 	dc.w	(((sound3f_continuejingle_loop02)<<8)&$ff00)|(((sound3f_continuejingle_loop02)>>8)&$ff)|$80
0000060C                            	smpsStop
0000060C F2                       M 	dc.b	$f2
0000060D                            
0000060D                            ; FM4 Data
0000060D                            Sound3F_ContinueJingle_FM4:
0000060D                            	smpsSetvoice        $00
0000060D EF00                     M 	dc.b	$ef,$00
0000060F                            	smpsAlterNote       $01
0000060F E101                     M 	dc.b	$e1,$01
00000611 8007 CD15 CED0 D2          	dc.b	nRst, $07, nE6, $15, nF6, nG6, nA6
00000618                            
00000618                            Sound3F_ContinueJingle_Loop01:
00000618 D415                       	dc.b	nB6, $15
0000061A                            	smpsAlterVol        $05
0000061A E605                     M 	dc.b	$e6,$05
0000061C                            	smpsLoop            $00, $08, Sound3F_ContinueJingle_Loop01
0000061C F700 08                  M 	dc.b	$f7,$00,$08
0000061F                          M 	z80_ptr	sound3f_continuejingle_loop01
0000061F 0000                     M 	dc.w	(((sound3f_continuejingle_loop01)<<8)&$ff00)|(((sound3f_continuejingle_loop01)>>8)&$ff)|$80
00000621                            	smpsStop
00000621 F2                       M 	dc.b	$f2
00000622                            
00000622                            ; FM5 Data
00000622                            Sound3F_ContinueJingle_FM5:
00000622                            	smpsSetvoice        $00
00000622 EF00                     M 	dc.b	$ef,$00
00000624                            	smpsAlterNote       $01
00000624 E101                     M 	dc.b	$e1,$01
00000626 C915 CBCD CE               	dc.b	nC6, $15, nD6, nE6, nF6
0000062B                            
0000062B                            Sound3F_ContinueJingle_Loop00:
0000062B D015                       	dc.b	nG6, $15
0000062D                            	smpsAlterVol        $05
0000062D E605                     M 	dc.b	$e6,$05
0000062F                            	smpsLoop            $00, $08, Sound3F_ContinueJingle_Loop00
0000062F F700 08                  M 	dc.b	$f7,$00,$08
00000632                          M 	z80_ptr	sound3f_continuejingle_loop00
00000632 0000                     M 	dc.w	(((sound3f_continuejingle_loop00)<<8)&$ff00)|(((sound3f_continuejingle_loop00)>>8)&$ff)|$80
00000634                            	smpsStop
00000634 F2                       M 	dc.b	$f2
00000635                            
00000635                            Sound3F_40_42_Voices:
00000635                            ;	Voice $00
00000635                            ;	$14
00000635                            ;	$25, $33, $36, $11, 	$1F, $1F, $1F, $1F, 	$15, $18, $1C, $13
00000635                            ;	$0B, $08, $0D, $09, 	$0F, $9F, $8F, $0F, 	$24, $05, $0A, $80
00000635                            	smpsVcAlgorithm     $04
00000635 =00000004                M vcalgorithm	=	$04
00000635                            	smpsVcFeedback      $02
00000635 =00000002                M vcfeedback	=	$02
00000635                            	smpsVcUnusedBits    $00
00000635 =00000000                M vcunusedbits	=	$00
00000635 =00000000                M vcd1r1unk	=	0
00000635 =00000000                M vcd1r2unk	=	0
00000635 =00000000                M vcd1r3unk	=	0
00000635 =00000000                M vcd1r4unk	=	0
00000635                            	smpsVcDetune        $01, $03, $03, $02
00000635 =00000001                M vcdt1	=	$01
00000635 =00000003                M vcdt2	=	$03
00000635 =00000003                M vcdt3	=	$03
00000635 =00000002                M vcdt4	=	$02
00000635                            	smpsVcCoarseFreq    $01, $06, $03, $05
00000635 =00000001                M vccf1	=	$01
00000635 =00000006                M vccf2	=	$06
00000635 =00000003                M vccf3	=	$03
00000635 =00000005                M vccf4	=	$05
00000635                            	smpsVcRateScale     $00, $00, $00, $00
00000635 =00000000                M vcrs1	=	$00
00000635 =00000000                M vcrs2	=	$00
00000635 =00000000                M vcrs3	=	$00
00000635 =00000000                M vcrs4	=	$00
00000635                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000635 =0000001F                M vcar1	=	$1f
00000635 =0000001F                M vcar2	=	$1f
00000635 =0000001F                M vcar3	=	$1f
00000635 =0000001F                M vcar4	=	$1f
00000635                            	smpsVcAmpMod        $00, $00, $00, $00
00000635 =00000000                M vcam1	=	$00
00000635 =00000000                M vcam2	=	$00
00000635 =00000000                M vcam3	=	$00
00000635 =00000000                M vcam4	=	$00
00000635                            	smpsVcDecayRate1    $13, $1C, $18, $15
00000635 =00000013                M vcd1r1	=	$13
00000635 =0000001C                M vcd1r2	=	$1c
00000635 =00000018                M vcd1r3	=	$18
00000635 =00000015                M vcd1r4	=	$15
00000635                            	smpsVcDecayRate2    $09, $0D, $08, $0B
00000635 =00000009                M vcd2r1	=	$09
00000635 =0000000D                M vcd2r2	=	$0d
00000635 =00000008                M vcd2r3	=	$08
00000635 =0000000B                M vcd2r4	=	$0b
00000635                            	smpsVcDecayLevel    $00, $08, $09, $00
00000635 =00000000                M vcdl1	=	$00
00000635 =00000008                M vcdl2	=	$08
00000635 =00000009                M vcdl3	=	$09
00000635 =00000000                M vcdl4	=	$00
00000635                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000635 =0000000F                M vcrr1	=	$0f
00000635 =0000000F                M vcrr2	=	$0f
00000635 =0000000F                M vcrr3	=	$0f
00000635 =0000000F                M vcrr4	=	$0f
00000635                            	smpsVcTotalLevel    $80, $0A, $05, $24
00000635 =00000080                M vctl1	=	$80
00000635 =0000000A                M vctl2	=	$0a
00000635 =00000005                M vctl3	=	$05
00000635 =00000024                M vctl4	=	$24
00000635 14                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000636 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000636 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000636 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000636 =00000080                M vctlmask1	=	$80
00000636 2536 3311                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000063A 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000063E 151C 1813                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000642 0B0D 0809                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000646 0F8F 9F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000064A 240A 8580                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000064E                            
0000064E                            Sound40:	include "sound/sfx/C0 - Casino Bonus.asm"
0000064E                            Sound40_CasinoBonus_Header:
0000064E                            	smpsHeaderStartSong 2
0000064E =0000064E                M songstart_2312	equ	offset(*)
0000064E                            	smpsHeaderVoice     Sound3F_40_42_Voices
0000064E                          M 	z80_ptr	sound3f_40_42_voices
0000064E 0000                     M 	dc.w	(((sound3f_40_42_voices)<<8)&$ff00)|(((sound3f_40_42_voices)>>8)&$ff)|$80
00000650                            	smpsHeaderTempoSFX  $01
00000650 01                       M 	dc.b	$01
00000651                            	smpsHeaderChanSFX   $02
00000651 02                       M 	dc.b	$02
00000652                            
00000652                            	smpsHeaderSFXChannel cFM5, Sound40_CasinoBonus_FM5,	$00, $08
00000652 8005                     M 	dc.b	$80,cfm5
00000654                          M 	z80_ptr	sound40_casinobonus_fm5
00000654 0000                     M 	dc.w	(((sound40_casinobonus_fm5)<<8)&$ff00)|(((sound40_casinobonus_fm5)>>8)&$ff)|$80
00000656 0008                     M 	dc.b	$00,$08
00000658                            	smpsHeaderSFXChannel cFM4, Sound40_CasinoBonus_FM4,	$00, $08
00000658 8004                     M 	dc.b	$80,cfm4
0000065A                          M 	z80_ptr	sound40_casinobonus_fm4
0000065A 0000                     M 	dc.w	(((sound40_casinobonus_fm4)<<8)&$ff00)|(((sound40_casinobonus_fm4)>>8)&$ff)|$80
0000065C 0008                     M 	dc.b	$00,$08
0000065E                            
0000065E                            ; FM4 Data
0000065E                            Sound40_CasinoBonus_FM4:
0000065E                            	smpsAlterNote       $03
0000065E E103                     M 	dc.b	$e1,$03
00000660 8002                       	dc.b	nRst, $02
00000662                            
00000662                            ; FM5 Data
00000662                            Sound40_CasinoBonus_FM5:
00000662                            	smpsSetvoice        $00
00000662 EF00                     M 	dc.b	$ef,$00
00000664 C416                       	dc.b	nG5, $16
00000666                            	smpsStop
00000666 F2                       M 	dc.b	$f2
00000667                            Sound41:	include "sound/sfx/C1 - Explosion.asm"
00000667                            Sound41_Explosion_Header:
00000667                            	smpsHeaderStartSong 2
00000667 =00000667                M songstart_2324	equ	offset(*)
00000667                            	smpsHeaderVoice     Sound41_Explosion_Voices
00000667                          M 	z80_ptr	sound41_explosion_voices
00000667 0000                     M 	dc.w	(((sound41_explosion_voices)<<8)&$ff00)|(((sound41_explosion_voices)>>8)&$ff)|$80
00000669                            	smpsHeaderTempoSFX  $01
00000669 01                       M 	dc.b	$01
0000066A                            	smpsHeaderChanSFX   $02
0000066A 02                       M 	dc.b	$02
0000066B                            
0000066B                            	smpsHeaderSFXChannel cFM5, Sound41_Explosion_FM5,	$00, $00
0000066B 8005                     M 	dc.b	$80,cfm5
0000066D                          M 	z80_ptr	sound41_explosion_fm5
0000066D 0000                     M 	dc.w	(((sound41_explosion_fm5)<<8)&$ff00)|(((sound41_explosion_fm5)>>8)&$ff)|$80
0000066F 0000                     M 	dc.b	$00,$00
00000671                            	smpsHeaderSFXChannel cPSG3, Sound41_Explosion_PSG3,	$00, $02
00000671 80C0                     M 	dc.b	$80,cpsg3
00000673                          M 	z80_ptr	sound41_explosion_psg3
00000673 0000                     M 	dc.w	(((sound41_explosion_psg3)<<8)&$ff00)|(((sound41_explosion_psg3)>>8)&$ff)|$80
00000675 0002                     M 	dc.b	$00,$02
00000677                            
00000677                            ; FM5 Data
00000677                            Sound41_Explosion_FM5:
00000677                            	smpsModSet          $03, $01, $72, $0B
00000677 F003 0172 0B             M 	dc.b	$f0,$03,$01,$72,$0b
0000067C                            	smpsSetvoice        $00
0000067C EF00                     M 	dc.b	$ef,$00
0000067E BA16                       	dc.b	nA4, $16
00000680                            	smpsStop
00000680 F2                       M 	dc.b	$f2
00000681                            
00000681                            ; PSG3 Data
00000681                            Sound41_Explosion_PSG3:
00000681                            	smpsPSGvoice        fTone_01
00000681 F501                     M 	dc.b	$f5,ftone_01
00000683                            	smpsPSGform         $E7
00000683 F3E7                     M 	dc.b	$f3,$e7
00000685 B01B                       	dc.b	nB3, $1B
00000687                            	smpsStop
00000687 F2                       M 	dc.b	$f2
00000688                            
00000688                            Sound41_Explosion_Voices:
00000688                            ;	Voice $00
00000688                            ;	$3C
00000688                            ;	$0F, $01, $03, $01, 	$1F, $1F, $1F, $1F, 	$19, $12, $19, $0E
00000688                            ;	$05, $12, $00, $0F, 	$0F, $7F, $FF, $FF, 	$00, $80, $00, $80
00000688                            	smpsVcAlgorithm     $04
00000688 =00000004                M vcalgorithm	=	$04
00000688                            	smpsVcFeedback      $07
00000688 =00000007                M vcfeedback	=	$07
00000688                            	smpsVcUnusedBits    $00
00000688 =00000000                M vcunusedbits	=	$00
00000688 =00000000                M vcd1r1unk	=	0
00000688 =00000000                M vcd1r2unk	=	0
00000688 =00000000                M vcd1r3unk	=	0
00000688 =00000000                M vcd1r4unk	=	0
00000688                            	smpsVcDetune        $00, $00, $00, $00
00000688 =00000000                M vcdt1	=	$00
00000688 =00000000                M vcdt2	=	$00
00000688 =00000000                M vcdt3	=	$00
00000688 =00000000                M vcdt4	=	$00
00000688                            	smpsVcCoarseFreq    $01, $03, $01, $0F
00000688 =00000001                M vccf1	=	$01
00000688 =00000003                M vccf2	=	$03
00000688 =00000001                M vccf3	=	$01
00000688 =0000000F                M vccf4	=	$0f
00000688                            	smpsVcRateScale     $00, $00, $00, $00
00000688 =00000000                M vcrs1	=	$00
00000688 =00000000                M vcrs2	=	$00
00000688 =00000000                M vcrs3	=	$00
00000688 =00000000                M vcrs4	=	$00
00000688                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000688 =0000001F                M vcar1	=	$1f
00000688 =0000001F                M vcar2	=	$1f
00000688 =0000001F                M vcar3	=	$1f
00000688 =0000001F                M vcar4	=	$1f
00000688                            	smpsVcAmpMod        $00, $00, $00, $00
00000688 =00000000                M vcam1	=	$00
00000688 =00000000                M vcam2	=	$00
00000688 =00000000                M vcam3	=	$00
00000688 =00000000                M vcam4	=	$00
00000688                            	smpsVcDecayRate1    $0E, $19, $12, $19
00000688 =0000000E                M vcd1r1	=	$0e
00000688 =00000019                M vcd1r2	=	$19
00000688 =00000012                M vcd1r3	=	$12
00000688 =00000019                M vcd1r4	=	$19
00000688                            	smpsVcDecayRate2    $0F, $00, $12, $05
00000688 =0000000F                M vcd2r1	=	$0f
00000688 =00000000                M vcd2r2	=	$00
00000688 =00000012                M vcd2r3	=	$12
00000688 =00000005                M vcd2r4	=	$05
00000688                            	smpsVcDecayLevel    $0F, $0F, $07, $00
00000688 =0000000F                M vcdl1	=	$0f
00000688 =0000000F                M vcdl2	=	$0f
00000688 =00000007                M vcdl3	=	$07
00000688 =00000000                M vcdl4	=	$00
00000688                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000688 =0000000F                M vcrr1	=	$0f
00000688 =0000000F                M vcrr2	=	$0f
00000688 =0000000F                M vcrr3	=	$0f
00000688 =0000000F                M vcrr4	=	$0f
00000688                            	smpsVcTotalLevel    $00, $00, $00, $00
00000688 =00000000                M vctl1	=	$00
00000688 =00000000                M vctl2	=	$00
00000688 =00000000                M vctl3	=	$00
00000688 =00000000                M vctl4	=	$00
00000688 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000689 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000689 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000689 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000689 =00000080                M vctlmask1	=	$80
00000689 0F03 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000068D 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000691 1919 120E                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000695 0500 120F                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000699 0FFF 7FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000069D 0000 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006A1                            
000006A1                            Sound42:	include "sound/sfx/C2 - Water Warning.asm"
000006A1                            Sound42_WaterWarning_Header:
000006A1                            	smpsHeaderStartSong 2
000006A1 =000006A1                M songstart_2352	equ	offset(*)
000006A1                            	smpsHeaderVoice     Sound3F_40_42_Voices
000006A1                          M 	z80_ptr	sound3f_40_42_voices
000006A1 0000                     M 	dc.w	(((sound3f_40_42_voices)<<8)&$ff00)|(((sound3f_40_42_voices)>>8)&$ff)|$80
000006A3                            	smpsHeaderTempoSFX  $01
000006A3 01                       M 	dc.b	$01
000006A4                            	smpsHeaderChanSFX   $01
000006A4 01                       M 	dc.b	$01
000006A5                            
000006A5                            	smpsHeaderSFXChannel cFM5, Sound42_WaterWarning_FM5,	$0C, $08
000006A5 8005                     M 	dc.b	$80,cfm5
000006A7                          M 	z80_ptr	sound42_waterwarning_fm5
000006A7 0000                     M 	dc.w	(((sound42_waterwarning_fm5)<<8)&$ff00)|(((sound42_waterwarning_fm5)>>8)&$ff)|$80
000006A9 0C08                     M 	dc.b	$0c,$08
000006AB                            
000006AB                            ; FM5 Data
000006AB                            Sound42_WaterWarning_FM5:
000006AB                            	smpsSetvoice        $00
000006AB EF00                     M 	dc.b	$ef,$00
000006AD BA08 BA25                  	dc.b	nA4, $08, nA4, $25
000006B1                            	smpsStop
000006B1 F2                       M 	dc.b	$f2
000006B2                            Sound43:	include "sound/sfx/C3 - Enter Giant Ring (Unused).asm"
000006B2                            Sound43_EnterGiantRing_Header:
000006B2                            	smpsHeaderStartSong 2
000006B2 =000006B2                M songstart_2361	equ	offset(*)
000006B2                            	smpsHeaderVoice     Sound43_EnterGiantRing_Voices
000006B2                          M 	z80_ptr	sound43_entergiantring_voices
000006B2 0000                     M 	dc.w	(((sound43_entergiantring_voices)<<8)&$ff00)|(((sound43_entergiantring_voices)>>8)&$ff)|$80
000006B4                            	smpsHeaderTempoSFX  $01
000006B4 01                       M 	dc.b	$01
000006B5                            	smpsHeaderChanSFX   $02
000006B5 02                       M 	dc.b	$02
000006B6                            
000006B6                            	smpsHeaderSFXChannel cFM4, Sound43_EnterGiantRing_FM4,	$0C, $00
000006B6 8004                     M 	dc.b	$80,cfm4
000006B8                          M 	z80_ptr	sound43_entergiantring_fm4
000006B8 0000                     M 	dc.w	(((sound43_entergiantring_fm4)<<8)&$ff00)|(((sound43_entergiantring_fm4)>>8)&$ff)|$80
000006BA 0C00                     M 	dc.b	$0c,$00
000006BC                            	smpsHeaderSFXChannel cFM5, Sound43_EnterGiantRing_FM5,	$00, $13
000006BC 8005                     M 	dc.b	$80,cfm5
000006BE                          M 	z80_ptr	sound43_entergiantring_fm5
000006BE 0000                     M 	dc.w	(((sound43_entergiantring_fm5)<<8)&$ff00)|(((sound43_entergiantring_fm5)>>8)&$ff)|$80
000006C0 0013                     M 	dc.b	$00,$13
000006C2                            
000006C2                            ; FM4 Data
000006C2                            Sound43_EnterGiantRing_FM4:
000006C2                            	smpsSetvoice        $01
000006C2 EF01                     M 	dc.b	$ef,$01
000006C4 8001 A208                  	dc.b	nRst, $01, nA2, $08
000006C8                            	smpsSetvoice        $00
000006C8 EF00                     M 	dc.b	$ef,$00
000006CA E7AD 26                    	dc.b	smpsNoAttack, nAb3, $26
000006CD                            	smpsStop
000006CD F2                       M 	dc.b	$f2
000006CE                            
000006CE                            ; FM5 Data
000006CE                            Sound43_EnterGiantRing_FM5:
000006CE                            	smpsSetvoice        $02
000006CE EF02                     M 	dc.b	$ef,$02
000006D0                            	smpsModSet          $06, $01, $03, $FF
000006D0 F006 0103 FF             M 	dc.b	$f0,$06,$01,$03,$ff
000006D5 800A                       	dc.b	nRst, $0A
000006D7                            
000006D7                            Sound43_EnterGiantRing_Loop00:
000006D7 C306                       	dc.b	nFs5, $06
000006D9                            	smpsLoop            $00, $05, Sound43_EnterGiantRing_Loop00
000006D9 F700 05                  M 	dc.b	$f7,$00,$05
000006DC                          M 	z80_ptr	sound43_entergiantring_loop00
000006DC 0000                     M 	dc.w	(((sound43_entergiantring_loop00)<<8)&$ff00)|(((sound43_entergiantring_loop00)>>8)&$ff)|$80
000006DE C317                       	dc.b	nFs5, $17
000006E0                            	smpsStop
000006E0 F2                       M 	dc.b	$f2
000006E1                            
000006E1                            Sound43_EnterGiantRing_Voices:
000006E1                            ;	Voice $00
000006E1                            ;	$30
000006E1                            ;	$30, $5C, $34, $30, 	$9E, $A8, $AC, $DC, 	$0E, $0A, $04, $05
000006E1                            ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$24, $1C, $04, $80
000006E1                            	smpsVcAlgorithm     $00
000006E1 =00000000                M vcalgorithm	=	$00
000006E1                            	smpsVcFeedback      $06
000006E1 =00000006                M vcfeedback	=	$06
000006E1                            	smpsVcUnusedBits    $00
000006E1 =00000000                M vcunusedbits	=	$00
000006E1 =00000000                M vcd1r1unk	=	0
000006E1 =00000000                M vcd1r2unk	=	0
000006E1 =00000000                M vcd1r3unk	=	0
000006E1 =00000000                M vcd1r4unk	=	0
000006E1                            	smpsVcDetune        $03, $03, $05, $03
000006E1 =00000003                M vcdt1	=	$03
000006E1 =00000003                M vcdt2	=	$03
000006E1 =00000005                M vcdt3	=	$05
000006E1 =00000003                M vcdt4	=	$03
000006E1                            	smpsVcCoarseFreq    $00, $04, $0C, $00
000006E1 =00000000                M vccf1	=	$00
000006E1 =00000004                M vccf2	=	$04
000006E1 =0000000C                M vccf3	=	$0c
000006E1 =00000000                M vccf4	=	$00
000006E1                            	smpsVcRateScale     $03, $02, $02, $02
000006E1 =00000003                M vcrs1	=	$03
000006E1 =00000002                M vcrs2	=	$02
000006E1 =00000002                M vcrs3	=	$02
000006E1 =00000002                M vcrs4	=	$02
000006E1                            	smpsVcAttackRate    $1C, $2C, $28, $1E
000006E1 =0000001C                M vcar1	=	$1c
000006E1 =0000002C                M vcar2	=	$2c
000006E1 =00000028                M vcar3	=	$28
000006E1 =0000001E                M vcar4	=	$1e
000006E1                            	smpsVcAmpMod        $00, $00, $00, $00
000006E1 =00000000                M vcam1	=	$00
000006E1 =00000000                M vcam2	=	$00
000006E1 =00000000                M vcam3	=	$00
000006E1 =00000000                M vcam4	=	$00
000006E1                            	smpsVcDecayRate1    $05, $04, $0A, $0E
000006E1 =00000005                M vcd1r1	=	$05
000006E1 =00000004                M vcd1r2	=	$04
000006E1 =0000000A                M vcd1r3	=	$0a
000006E1 =0000000E                M vcd1r4	=	$0e
000006E1                            	smpsVcDecayRate2    $08, $08, $08, $08
000006E1 =00000008                M vcd2r1	=	$08
000006E1 =00000008                M vcd2r2	=	$08
000006E1 =00000008                M vcd2r3	=	$08
000006E1 =00000008                M vcd2r4	=	$08
000006E1                            	smpsVcDecayLevel    $0B, $0B, $0B, $0B
000006E1 =0000000B                M vcdl1	=	$0b
000006E1 =0000000B                M vcdl2	=	$0b
000006E1 =0000000B                M vcdl3	=	$0b
000006E1 =0000000B                M vcdl4	=	$0b
000006E1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000006E1 =0000000F                M vcrr1	=	$0f
000006E1 =0000000F                M vcrr2	=	$0f
000006E1 =0000000F                M vcrr3	=	$0f
000006E1 =0000000F                M vcrr4	=	$0f
000006E1                            	smpsVcTotalLevel    $00, $04, $1C, $24
000006E1 =00000000                M vctl1	=	$00
000006E1 =00000004                M vctl2	=	$04
000006E1 =0000001C                M vctl3	=	$1c
000006E1 =00000024                M vctl4	=	$24
000006E1 30                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006E2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000006E2 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000006E2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000006E2 =00000080                M vctlmask1	=	$80
000006E2 3034 5C30                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006E6 9EAC A8DC                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000006EA 0E04 0A05                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000006EE 0808 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000006F2 BFBF BFBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000006F6 2404 1C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000006FA                            
000006FA                            ;	Voice $01
000006FA                            ;	$30
000006FA                            ;	$30, $5C, $34, $30, 	$9E, $A8, $AC, $DC, 	$0E, $0A, $04, $05
000006FA                            ;	$08, $08, $08, $08, 	$BF, $BF, $BF, $BF, 	$24, $2C, $04, $80
000006FA                            	smpsVcAlgorithm     $00
000006FA =00000000                M vcalgorithm	=	$00
000006FA                            	smpsVcFeedback      $06
000006FA =00000006                M vcfeedback	=	$06
000006FA                            	smpsVcUnusedBits    $00
000006FA =00000000                M vcunusedbits	=	$00
000006FA =00000000                M vcd1r1unk	=	0
000006FA =00000000                M vcd1r2unk	=	0
000006FA =00000000                M vcd1r3unk	=	0
000006FA =00000000                M vcd1r4unk	=	0
000006FA                            	smpsVcDetune        $03, $03, $05, $03
000006FA =00000003                M vcdt1	=	$03
000006FA =00000003                M vcdt2	=	$03
000006FA =00000005                M vcdt3	=	$05
000006FA =00000003                M vcdt4	=	$03
000006FA                            	smpsVcCoarseFreq    $00, $04, $0C, $00
000006FA =00000000                M vccf1	=	$00
000006FA =00000004                M vccf2	=	$04
000006FA =0000000C                M vccf3	=	$0c
000006FA =00000000                M vccf4	=	$00
000006FA                            	smpsVcRateScale     $03, $02, $02, $02
000006FA =00000003                M vcrs1	=	$03
000006FA =00000002                M vcrs2	=	$02
000006FA =00000002                M vcrs3	=	$02
000006FA =00000002                M vcrs4	=	$02
000006FA                            	smpsVcAttackRate    $1C, $2C, $28, $1E
000006FA =0000001C                M vcar1	=	$1c
000006FA =0000002C                M vcar2	=	$2c
000006FA =00000028                M vcar3	=	$28
000006FA =0000001E                M vcar4	=	$1e
000006FA                            	smpsVcAmpMod        $00, $00, $00, $00
000006FA =00000000                M vcam1	=	$00
000006FA =00000000                M vcam2	=	$00
000006FA =00000000                M vcam3	=	$00
000006FA =00000000                M vcam4	=	$00
000006FA                            	smpsVcDecayRate1    $05, $04, $0A, $0E
000006FA =00000005                M vcd1r1	=	$05
000006FA =00000004                M vcd1r2	=	$04
000006FA =0000000A                M vcd1r3	=	$0a
000006FA =0000000E                M vcd1r4	=	$0e
000006FA                            	smpsVcDecayRate2    $08, $08, $08, $08
000006FA =00000008                M vcd2r1	=	$08
000006FA =00000008                M vcd2r2	=	$08
000006FA =00000008                M vcd2r3	=	$08
000006FA =00000008                M vcd2r4	=	$08
000006FA                            	smpsVcDecayLevel    $0B, $0B, $0B, $0B
000006FA =0000000B                M vcdl1	=	$0b
000006FA =0000000B                M vcdl2	=	$0b
000006FA =0000000B                M vcdl3	=	$0b
000006FA =0000000B                M vcdl4	=	$0b
000006FA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000006FA =0000000F                M vcrr1	=	$0f
000006FA =0000000F                M vcrr2	=	$0f
000006FA =0000000F                M vcrr3	=	$0f
000006FA =0000000F                M vcrr4	=	$0f
000006FA                            	smpsVcTotalLevel    $00, $04, $2C, $24
000006FA =00000000                M vctl1	=	$00
000006FA =00000004                M vctl2	=	$04
000006FA =0000002C                M vctl3	=	$2c
000006FA =00000024                M vctl4	=	$24
000006FA 30                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000006FB =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000006FB =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000006FB =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000006FB =00000080                M vctlmask1	=	$80
000006FB 3034 5C30                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000006FF 9EAC A8DC                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000703 0E04 0A05                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000707 0808 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000070B BFBF BFBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000070F 2404 2C80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000713                            
00000713                            ;	Voice $02
00000713                            ;	$04
00000713                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
00000713                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$13, $81, $13, $88
00000713                            	smpsVcAlgorithm     $04
00000713 =00000004                M vcalgorithm	=	$04
00000713                            	smpsVcFeedback      $00
00000713 =00000000                M vcfeedback	=	$00
00000713                            	smpsVcUnusedBits    $00
00000713 =00000000                M vcunusedbits	=	$00
00000713 =00000000                M vcd1r1unk	=	0
00000713 =00000000                M vcd1r2unk	=	0
00000713 =00000000                M vcd1r3unk	=	0
00000713 =00000000                M vcd1r4unk	=	0
00000713                            	smpsVcDetune        $04, $07, $07, $03
00000713 =00000004                M vcdt1	=	$04
00000713 =00000007                M vcdt2	=	$07
00000713 =00000007                M vcdt3	=	$07
00000713 =00000003                M vcdt4	=	$03
00000713                            	smpsVcCoarseFreq    $09, $07, $02, $07
00000713 =00000009                M vccf1	=	$09
00000713 =00000007                M vccf2	=	$07
00000713 =00000002                M vccf3	=	$02
00000713 =00000007                M vccf4	=	$07
00000713                            	smpsVcRateScale     $00, $00, $00, $00
00000713 =00000000                M vcrs1	=	$00
00000713 =00000000                M vcrs2	=	$00
00000713 =00000000                M vcrs3	=	$00
00000713 =00000000                M vcrs4	=	$00
00000713                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000713 =0000001F                M vcar1	=	$1f
00000713 =0000001F                M vcar2	=	$1f
00000713 =0000001F                M vcar3	=	$1f
00000713 =0000001F                M vcar4	=	$1f
00000713                            	smpsVcAmpMod        $00, $00, $00, $00
00000713 =00000000                M vcam1	=	$00
00000713 =00000000                M vcam2	=	$00
00000713 =00000000                M vcam3	=	$00
00000713 =00000000                M vcam4	=	$00
00000713                            	smpsVcDecayRate1    $0D, $07, $0A, $07
00000713 =0000000D                M vcd1r1	=	$0d
00000713 =00000007                M vcd1r2	=	$07
00000713 =0000000A                M vcd1r3	=	$0a
00000713 =00000007                M vcd1r4	=	$07
00000713                            	smpsVcDecayRate2    $0B, $00, $0B, $00
00000713 =0000000B                M vcd2r1	=	$0b
00000713 =00000000                M vcd2r2	=	$00
00000713 =0000000B                M vcd2r3	=	$0b
00000713 =00000000                M vcd2r4	=	$00
00000713                            	smpsVcDecayLevel    $00, $01, $00, $01
00000713 =00000000                M vcdl1	=	$00
00000713 =00000001                M vcdl2	=	$01
00000713 =00000000                M vcdl3	=	$00
00000713 =00000001                M vcdl4	=	$01
00000713                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000713 =0000000F                M vcrr1	=	$0f
00000713 =0000000F                M vcrr2	=	$0f
00000713 =0000000F                M vcrr3	=	$0f
00000713 =0000000F                M vcrr4	=	$0f
00000713                            	smpsVcTotalLevel    $08, $13, $01, $13
00000713 =00000008                M vctl1	=	$08
00000713 =00000013                M vctl2	=	$13
00000713 =00000001                M vctl3	=	$01
00000713 =00000013                M vctl4	=	$13
00000713 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000714 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000714 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000714 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000714 =00000080                M vctlmask1	=	$80
00000714 3777 7249                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000718 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000071C 0707 0A0D                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000720 0000 0B0B                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000724 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000728 1313 8188                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000072C                            
0000072C                            Sound44:	include "sound/sfx/C4 - Boss Explosion.asm"
0000072C                            Sound44_BossExplosion_Header:
0000072C                            	smpsHeaderStartSong 2
0000072C =0000072C                M songstart_2417	equ	offset(*)
0000072C                            	smpsHeaderVoice     Sound44_BossExplosion_Voices
0000072C                          M 	z80_ptr	sound44_bossexplosion_voices
0000072C 0000                     M 	dc.w	(((sound44_bossexplosion_voices)<<8)&$ff00)|(((sound44_bossexplosion_voices)>>8)&$ff)|$80
0000072E                            	smpsHeaderTempoSFX  $01
0000072E 01                       M 	dc.b	$01
0000072F                            	smpsHeaderChanSFX   $01
0000072F 01                       M 	dc.b	$01
00000730                            
00000730                            	smpsHeaderSFXChannel cFM5, Sound44_BossExplosion_FM5,	$00, $00
00000730 8005                     M 	dc.b	$80,cfm5
00000732                          M 	z80_ptr	sound44_bossexplosion_fm5
00000732 0000                     M 	dc.w	(((sound44_bossexplosion_fm5)<<8)&$ff00)|(((sound44_bossexplosion_fm5)>>8)&$ff)|$80
00000734 0000                     M 	dc.b	$00,$00
00000736                            
00000736                            ; FM5 Data
00000736                            Sound44_BossExplosion_FM5:
00000736                            	smpsSetvoice        $00
00000736 EF00                     M 	dc.b	$ef,$00
00000738 8A22                       	dc.b	nA0, $22
0000073A                            	smpsStop
0000073A F2                       M 	dc.b	$f2
0000073B                            
0000073B                            Sound44_BossExplosion_Voices:
0000073B                            ;	Voice $00
0000073B                            ;	$FA
0000073B                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $05, $10
0000073B                            ;	$0B, $1F, $10, $10, 	$1F, $2F, $4F, $2F, 	$0D, $07, $04, $80
0000073B                            	smpsVcAlgorithm     $02
0000073B =00000002                M vcalgorithm	=	$02
0000073B                            	smpsVcFeedback      $07
0000073B =00000007                M vcfeedback	=	$07
0000073B                            	smpsVcUnusedBits    $03
0000073B =00000003                M vcunusedbits	=	$03
0000073B =00000000                M vcd1r1unk	=	0
0000073B =00000000                M vcd1r2unk	=	0
0000073B =00000000                M vcd1r3unk	=	0
0000073B =00000000                M vcd1r4unk	=	0
0000073B                            	smpsVcDetune        $03, $01, $03, $02
0000073B =00000003                M vcdt1	=	$03
0000073B =00000001                M vcdt2	=	$01
0000073B =00000003                M vcdt3	=	$03
0000073B =00000002                M vcdt4	=	$02
0000073B                            	smpsVcCoarseFreq    $02, $00, $00, $01
0000073B =00000002                M vccf1	=	$02
0000073B =00000000                M vccf2	=	$00
0000073B =00000000                M vccf3	=	$00
0000073B =00000001                M vccf4	=	$01
0000073B                            	smpsVcRateScale     $00, $00, $00, $00
0000073B =00000000                M vcrs1	=	$00
0000073B =00000000                M vcrs2	=	$00
0000073B =00000000                M vcrs3	=	$00
0000073B =00000000                M vcrs4	=	$00
0000073B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000073B =0000001F                M vcar1	=	$1f
0000073B =0000001F                M vcar2	=	$1f
0000073B =0000001F                M vcar3	=	$1f
0000073B =0000001F                M vcar4	=	$1f
0000073B                            	smpsVcAmpMod        $00, $00, $00, $00
0000073B =00000000                M vcam1	=	$00
0000073B =00000000                M vcam2	=	$00
0000073B =00000000                M vcam3	=	$00
0000073B =00000000                M vcam4	=	$00
0000073B                            	smpsVcDecayRate1    $10, $05, $18, $05
0000073B =00000010                M vcd1r1	=	$10
0000073B =00000005                M vcd1r2	=	$05
0000073B =00000018                M vcd1r3	=	$18
0000073B =00000005                M vcd1r4	=	$05
0000073B                            	smpsVcDecayRate2    $10, $10, $1F, $0B
0000073B =00000010                M vcd2r1	=	$10
0000073B =00000010                M vcd2r2	=	$10
0000073B =0000001F                M vcd2r3	=	$1f
0000073B =0000000B                M vcd2r4	=	$0b
0000073B                            	smpsVcDecayLevel    $02, $04, $02, $01
0000073B =00000002                M vcdl1	=	$02
0000073B =00000004                M vcdl2	=	$04
0000073B =00000002                M vcdl3	=	$02
0000073B =00000001                M vcdl4	=	$01
0000073B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000073B =0000000F                M vcrr1	=	$0f
0000073B =0000000F                M vcrr2	=	$0f
0000073B =0000000F                M vcrr3	=	$0f
0000073B =0000000F                M vcrr4	=	$0f
0000073B                            	smpsVcTotalLevel    $00, $04, $07, $0D
0000073B =00000000                M vctl1	=	$00
0000073B =00000004                M vctl2	=	$04
0000073B =00000007                M vctl3	=	$07
0000073B =0000000D                M vctl4	=	$0d
0000073B FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000073C =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000073C =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000073C =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000073C =00000080                M vctlmask1	=	$80
0000073C 2110 3032                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000740 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000744 0505 1810                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000748 0B10 1F10                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000074C 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000750 0D04 0780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000754                            
00000754                            Sound45:	include "sound/sfx/C5 - Tally End.asm"
00000754                            Sound45_TallyEnd_Header:
00000754                            	smpsHeaderStartSong 2
00000754 =00000754                M songstart_2439	equ	offset(*)
00000754                            	smpsHeaderVoice     Sound45_TallyEnd_Voices
00000754                          M 	z80_ptr	sound45_tallyend_voices
00000754 0000                     M 	dc.w	(((sound45_tallyend_voices)<<8)&$ff00)|(((sound45_tallyend_voices)>>8)&$ff)|$80
00000756                            	smpsHeaderTempoSFX  $01
00000756 01                       M 	dc.b	$01
00000757                            	smpsHeaderChanSFX   $03
00000757 03                       M 	dc.b	$03
00000758                            
00000758                            	smpsHeaderSFXChannel cFM5, Sound45_TallyEnd_FM5,	$00, $00
00000758 8005                     M 	dc.b	$80,cfm5
0000075A                          M 	z80_ptr	sound45_tallyend_fm5
0000075A 0000                     M 	dc.w	(((sound45_tallyend_fm5)<<8)&$ff00)|(((sound45_tallyend_fm5)>>8)&$ff)|$80
0000075C 0000                     M 	dc.b	$00,$00
0000075E                            	smpsHeaderSFXChannel cFM4, Sound45_TallyEnd_FM4,	$00, $00
0000075E 8004                     M 	dc.b	$80,cfm4
00000760                          M 	z80_ptr	sound45_tallyend_fm4
00000760 0000                     M 	dc.w	(((sound45_tallyend_fm4)<<8)&$ff00)|(((sound45_tallyend_fm4)>>8)&$ff)|$80
00000762 0000                     M 	dc.b	$00,$00
00000764                            	smpsHeaderSFXChannel cPSG3, Sound45_TallyEnd_PSG3,	$00, $00
00000764 80C0                     M 	dc.b	$80,cpsg3
00000766                          M 	z80_ptr	sound45_tallyend_psg3
00000766 0000                     M 	dc.w	(((sound45_tallyend_psg3)<<8)&$ff00)|(((sound45_tallyend_psg3)>>8)&$ff)|$80
00000768 0000                     M 	dc.b	$00,$00
0000076A                            
0000076A                            ; FM5 Data
0000076A                            Sound45_TallyEnd_FM5:
0000076A                            	smpsSetvoice        $00
0000076A EF00                     M 	dc.b	$ef,$00
0000076C 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
00000772                            	smpsStop
00000772 F2                       M 	dc.b	$f2
00000773                            
00000773                            ; FM4 Data
00000773                            Sound45_TallyEnd_FM4:
00000773                            	smpsSetvoice        $01
00000773 EF01                     M 	dc.b	$ef,$01
00000775 8012 C655                  	dc.b	nRst, $12, nA5, $55
00000779                            	smpsStop
00000779 F2                       M 	dc.b	$f2
0000077A                            
0000077A                            ; PSG3 Data
0000077A                            Sound45_TallyEnd_PSG3:
0000077A                            	smpsPSGvoice        fTone_02
0000077A F502                     M 	dc.b	$f5,ftone_02
0000077C                            	smpsPSGform         $E7
0000077C F3E7                     M 	dc.b	$f3,$e7
0000077E 8002 C205 C404 C205 C404   	dc.b	nRst, $02, nF5, $05, nG5, $04, nF5, $05, nG5, $04
00000788                            	smpsStop
00000788 F2                       M 	dc.b	$f2
00000789                            
00000789                            Sound45_TallyEnd_Voices:
00000789                            ;	Voice $00
00000789                            ;	$3B
00000789                            ;	$03, $02, $02, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
00000789                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
00000789                            	smpsVcAlgorithm     $03
00000789 =00000003                M vcalgorithm	=	$03
00000789                            	smpsVcFeedback      $07
00000789 =00000007                M vcfeedback	=	$07
00000789                            	smpsVcUnusedBits    $00
00000789 =00000000                M vcunusedbits	=	$00
00000789 =00000000                M vcd1r1unk	=	0
00000789 =00000000                M vcd1r2unk	=	0
00000789 =00000000                M vcd1r3unk	=	0
00000789 =00000000                M vcd1r4unk	=	0
00000789                            	smpsVcDetune        $00, $00, $00, $00
00000789 =00000000                M vcdt1	=	$00
00000789 =00000000                M vcdt2	=	$00
00000789 =00000000                M vcdt3	=	$00
00000789 =00000000                M vcdt4	=	$00
00000789                            	smpsVcCoarseFreq    $06, $02, $02, $03
00000789 =00000006                M vccf1	=	$06
00000789 =00000002                M vccf2	=	$02
00000789 =00000002                M vccf3	=	$02
00000789 =00000003                M vccf4	=	$03
00000789                            	smpsVcRateScale     $02, $00, $00, $00
00000789 =00000002                M vcrs1	=	$02
00000789 =00000000                M vcrs2	=	$00
00000789 =00000000                M vcrs3	=	$00
00000789 =00000000                M vcrs4	=	$00
00000789                            	smpsVcAttackRate    $16, $1A, $1A, $18
00000789 =00000016                M vcar1	=	$16
00000789 =0000001A                M vcar2	=	$1a
00000789 =0000001A                M vcar3	=	$1a
00000789 =00000018                M vcar4	=	$18
00000789                            	smpsVcAmpMod        $00, $00, $00, $00
00000789 =00000000                M vcam1	=	$00
00000789 =00000000                M vcam2	=	$00
00000789 =00000000                M vcam3	=	$00
00000789 =00000000                M vcam4	=	$00
00000789                            	smpsVcDecayRate1    $10, $0A, $0E, $17
00000789 =00000010                M vcd1r1	=	$10
00000789 =0000000A                M vcd1r2	=	$0a
00000789 =0000000E                M vcd1r3	=	$0e
00000789 =00000017                M vcd1r4	=	$17
00000789                            	smpsVcDecayRate2    $00, $00, $00, $00
00000789 =00000000                M vcd2r1	=	$00
00000789 =00000000                M vcd2r2	=	$00
00000789 =00000000                M vcd2r3	=	$00
00000789 =00000000                M vcd2r4	=	$00
00000789                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00000789 =0000000F                M vcdl1	=	$0f
00000789 =0000000F                M vcdl2	=	$0f
00000789 =0000000F                M vcdl3	=	$0f
00000789 =0000000F                M vcdl4	=	$0f
00000789                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000789 =0000000F                M vcrr1	=	$0f
00000789 =0000000F                M vcrr2	=	$0f
00000789 =0000000F                M vcrr3	=	$0f
00000789 =0000000F                M vcrr4	=	$0f
00000789                            	smpsVcTotalLevel    $00, $39, $28, $00
00000789 =00000000                M vctl1	=	$00
00000789 =00000039                M vctl2	=	$39
00000789 =00000028                M vctl3	=	$28
00000789 =00000000                M vctl4	=	$00
00000789 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000078A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000078A =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000078A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000078A =00000080                M vctlmask1	=	$80
0000078A 0302 0206                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000078E 181A 1A96                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000792 170A 0E10                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000796 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000079A FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000079E 0039 2880                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000007A2                            
000007A2                            Sound_Ring_Voices:
000007A2                            ;	Voice $01
000007A2                            ;	$04
000007A2                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000007A2                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000007A2                            	smpsVcAlgorithm     $04
000007A2 =00000004                M vcalgorithm	=	$04
000007A2                            	smpsVcFeedback      $00
000007A2 =00000000                M vcfeedback	=	$00
000007A2                            	smpsVcUnusedBits    $00
000007A2 =00000000                M vcunusedbits	=	$00
000007A2 =00000000                M vcd1r1unk	=	0
000007A2 =00000000                M vcd1r2unk	=	0
000007A2 =00000000                M vcd1r3unk	=	0
000007A2 =00000000                M vcd1r4unk	=	0
000007A2                            	smpsVcDetune        $04, $07, $07, $03
000007A2 =00000004                M vcdt1	=	$04
000007A2 =00000007                M vcdt2	=	$07
000007A2 =00000007                M vcdt3	=	$07
000007A2 =00000003                M vcdt4	=	$03
000007A2                            	smpsVcCoarseFreq    $09, $07, $02, $07
000007A2 =00000009                M vccf1	=	$09
000007A2 =00000007                M vccf2	=	$07
000007A2 =00000002                M vccf3	=	$02
000007A2 =00000007                M vccf4	=	$07
000007A2                            	smpsVcRateScale     $00, $00, $00, $00
000007A2 =00000000                M vcrs1	=	$00
000007A2 =00000000                M vcrs2	=	$00
000007A2 =00000000                M vcrs3	=	$00
000007A2 =00000000                M vcrs4	=	$00
000007A2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000007A2 =0000001F                M vcar1	=	$1f
000007A2 =0000001F                M vcar2	=	$1f
000007A2 =0000001F                M vcar3	=	$1f
000007A2 =0000001F                M vcar4	=	$1f
000007A2                            	smpsVcAmpMod        $00, $00, $00, $00
000007A2 =00000000                M vcam1	=	$00
000007A2 =00000000                M vcam2	=	$00
000007A2 =00000000                M vcam3	=	$00
000007A2 =00000000                M vcam4	=	$00
000007A2                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000007A2 =0000000D                M vcd1r1	=	$0d
000007A2 =00000007                M vcd1r2	=	$07
000007A2 =0000000A                M vcd1r3	=	$0a
000007A2 =00000007                M vcd1r4	=	$07
000007A2                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000007A2 =0000000B                M vcd2r1	=	$0b
000007A2 =00000000                M vcd2r2	=	$00
000007A2 =0000000B                M vcd2r3	=	$0b
000007A2 =00000000                M vcd2r4	=	$00
000007A2                            	smpsVcDecayLevel    $00, $01, $00, $01
000007A2 =00000000                M vcdl1	=	$00
000007A2 =00000001                M vcdl2	=	$01
000007A2 =00000000                M vcdl3	=	$00
000007A2 =00000001                M vcdl4	=	$01
000007A2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000007A2 =0000000F                M vcrr1	=	$0f
000007A2 =0000000F                M vcrr2	=	$0f
000007A2 =0000000F                M vcrr3	=	$0f
000007A2 =0000000F                M vcrr4	=	$0f
000007A2                            	smpsVcTotalLevel    $00, $23, $00, $23
000007A2 =00000000                M vctl1	=	$00
000007A2 =00000023                M vctl2	=	$23
000007A2 =00000000                M vctl3	=	$00
000007A2 =00000023                M vctl4	=	$23
000007A2 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000007A3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000007A3 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
000007A3 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000007A3 =00000080                M vctlmask1	=	$80
000007A3 3777 7249                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000007A7 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000007AB 0707 0A0D                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000007AF 0000 0B0B                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000007B3 1F1F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000007B7 2323 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000007BB                            
000007BB                            Sound46:	include "sound/sfx/C6 - Ring Spill.asm"
000007BB                            Sound46_RingSpill_Header:
000007BB                            	smpsHeaderStartSong 2
000007BB =000007BB                M songstart_2483	equ	offset(*)
000007BB                            	smpsHeaderVoice     Sound_Ring_Voices
000007BB                          M 	z80_ptr	sound_ring_voices
000007BB 0000                     M 	dc.w	(((sound_ring_voices)<<8)&$ff00)|(((sound_ring_voices)>>8)&$ff)|$80
000007BD                            	smpsHeaderTempoSFX  $01
000007BD 01                       M 	dc.b	$01
000007BE                            	smpsHeaderChanSFX   $02
000007BE 02                       M 	dc.b	$02
000007BF                            
000007BF                            	smpsHeaderSFXChannel cFM4, Sound46_RingSpill_FM4,	$00, $05
000007BF 8004                     M 	dc.b	$80,cfm4
000007C1                          M 	z80_ptr	sound46_ringspill_fm4
000007C1 0000                     M 	dc.w	(((sound46_ringspill_fm4)<<8)&$ff00)|(((sound46_ringspill_fm4)>>8)&$ff)|$80
000007C3 0005                     M 	dc.b	$00,$05
000007C5                            	smpsHeaderSFXChannel cFM5, Sound46_RingSpill_FM5,	$00, $08
000007C5 8005                     M 	dc.b	$80,cfm5
000007C7                          M 	z80_ptr	sound46_ringspill_fm5
000007C7 0000                     M 	dc.w	(((sound46_ringspill_fm5)<<8)&$ff00)|(((sound46_ringspill_fm5)>>8)&$ff)|$80
000007C9 0008                     M 	dc.b	$00,$08
000007CB                            
000007CB                            ; FM4 Data
000007CB                            Sound46_RingSpill_FM4:
000007CB                            	smpsSetvoice        $00
000007CB EF00                     M 	dc.b	$ef,$00
000007CD C602 0505 0505 0505 3A     	dc.b	nA5, $02, $05, $05, $05, $05, $05, $05, $3A
000007D6                            	smpsStop
000007D6 F2                       M 	dc.b	$f2
000007D7                            
000007D7                            ; FM5 Data
000007D7                            Sound46_RingSpill_FM5:
000007D7                            	smpsSetvoice        $00
000007D7 EF00                     M 	dc.b	$ef,$00
000007D9 8002 C402 0515 0205 32     	dc.b	nRst, $02, nG5, $02, $05, $15, $02, $05, $32
000007E2                            	smpsStop
000007E2 F2                       M 	dc.b	$f2
000007E3                            Sound47:	include "sound/sfx/C7 - Chain Rise (Unused).asm"
000007E3                            Sound47_Header:
000007E3                            	smpsHeaderStartSong 2
000007E3 =000007E3                M songstart_2496	equ	offset(*)
000007E3                            	smpsHeaderVoice     Sound47_Voices
000007E3                          M 	z80_ptr	sound47_voices
000007E3 0000                     M 	dc.w	(((sound47_voices)<<8)&$ff00)|(((sound47_voices)>>8)&$ff)|$80
000007E5                            	smpsHeaderTempoSFX  $01
000007E5 01                       M 	dc.b	$01
000007E6                            	smpsHeaderChanSFX   $01
000007E6 01                       M 	dc.b	$01
000007E7                            
000007E7                            	smpsHeaderSFXChannel cFM5, Sound47_FM5,	$00, $00
000007E7 8005                     M 	dc.b	$80,cfm5
000007E9                          M 	z80_ptr	sound47_fm5
000007E9 0000                     M 	dc.w	(((sound47_fm5)<<8)&$ff00)|(((sound47_fm5)>>8)&$ff)|$80
000007EB 0000                     M 	dc.b	$00,$00
000007ED                            
000007ED                            ; FM5 Data
000007ED                            Sound47_FM5:
000007ED                            	smpsSetvoice        $00
000007ED EF00                     M 	dc.b	$ef,$00
000007EF BE05 8004 BE04 8004        	dc.b	nCs5, $05, nRst, $04, nCs5, $04, nRst, $04
000007F7                            	smpsStop
000007F7 F2                       M 	dc.b	$f2
000007F8                            
000007F8                            Sound47_Voices:
000007F8                            ;	Voice $00
000007F8                            ;	$28
000007F8                            ;	$2F, $5F, $37, $2B, 	$1F, $1F, $1F, $1F, 	$15, $15, $15, $13
000007F8                            ;	$13, $0C, $0D, $10, 	$2F, $2F, $3F, $2F, 	$00, $10, $1F, $80
000007F8                            	smpsVcAlgorithm     $00
000007F8 =00000000                M vcalgorithm	=	$00
000007F8                            	smpsVcFeedback      $05
000007F8 =00000005                M vcfeedback	=	$05
000007F8                            	smpsVcUnusedBits    $00
000007F8 =00000000                M vcunusedbits	=	$00
000007F8 =00000000                M vcd1r1unk	=	0
000007F8 =00000000                M vcd1r2unk	=	0
000007F8 =00000000                M vcd1r3unk	=	0
000007F8 =00000000                M vcd1r4unk	=	0
000007F8                            	smpsVcDetune        $02, $03, $05, $02
000007F8 =00000002                M vcdt1	=	$02
000007F8 =00000003                M vcdt2	=	$03
000007F8 =00000005                M vcdt3	=	$05
000007F8 =00000002                M vcdt4	=	$02
000007F8                            	smpsVcCoarseFreq    $0B, $07, $0F, $0F
000007F8 =0000000B                M vccf1	=	$0b
000007F8 =00000007                M vccf2	=	$07
000007F8 =0000000F                M vccf3	=	$0f
000007F8 =0000000F                M vccf4	=	$0f
000007F8                            	smpsVcRateScale     $00, $00, $00, $00
000007F8 =00000000                M vcrs1	=	$00
000007F8 =00000000                M vcrs2	=	$00
000007F8 =00000000                M vcrs3	=	$00
000007F8 =00000000                M vcrs4	=	$00
000007F8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000007F8 =0000001F                M vcar1	=	$1f
000007F8 =0000001F                M vcar2	=	$1f
000007F8 =0000001F                M vcar3	=	$1f
000007F8 =0000001F                M vcar4	=	$1f
000007F8                            	smpsVcAmpMod        $00, $00, $00, $00
000007F8 =00000000                M vcam1	=	$00
000007F8 =00000000                M vcam2	=	$00
000007F8 =00000000                M vcam3	=	$00
000007F8 =00000000                M vcam4	=	$00
000007F8                            	smpsVcDecayRate1    $13, $15, $15, $15
000007F8 =00000013                M vcd1r1	=	$13
000007F8 =00000015                M vcd1r2	=	$15
000007F8 =00000015                M vcd1r3	=	$15
000007F8 =00000015                M vcd1r4	=	$15
000007F8                            	smpsVcDecayRate2    $10, $0D, $0C, $13
000007F8 =00000010                M vcd2r1	=	$10
000007F8 =0000000D                M vcd2r2	=	$0d
000007F8 =0000000C                M vcd2r3	=	$0c
000007F8 =00000013                M vcd2r4	=	$13
000007F8                            	smpsVcDecayLevel    $02, $03, $02, $02
000007F8 =00000002                M vcdl1	=	$02
000007F8 =00000003                M vcdl2	=	$03
000007F8 =00000002                M vcdl3	=	$02
000007F8 =00000002                M vcdl4	=	$02
000007F8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000007F8 =0000000F                M vcrr1	=	$0f
000007F8 =0000000F                M vcrr2	=	$0f
000007F8 =0000000F                M vcrr3	=	$0f
000007F8 =0000000F                M vcrr4	=	$0f
000007F8                            	smpsVcTotalLevel    $00, $1F, $10, $00
000007F8 =00000000                M vctl1	=	$00
000007F8 =0000001F                M vctl2	=	$1f
000007F8 =00000010                M vctl3	=	$10
000007F8 =00000000                M vctl4	=	$00
000007F8 28                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000007F9 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000007F9 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000007F9 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000007F9 =00000080                M vctlmask1	=	$80
000007F9 2F37 5F2B                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000007FD 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000801 1515 1513                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000805 130D 0C10                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000809 2F3F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000080D 001F 1080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000811                            
00000811                            Sound48:	include "sound/sfx/C8 - Flamethrower.asm"
00000811                            Sound48_Flamethrower_Header:
00000811                            	smpsHeaderStartSong 2
00000811 =00000811                M songstart_2518	equ	offset(*)
00000811                            	smpsHeaderVoiceNull
00000811 0000                     M 	dc.w	$0000
00000813                            	smpsHeaderTempoSFX  $01
00000813 01                       M 	dc.b	$01
00000814                            	smpsHeaderChanSFX   $01
00000814 01                       M 	dc.b	$01
00000815                            
00000815                            	smpsHeaderSFXChannel cPSG3, Sound48_Flamethrower_PSG3,	$00, $00
00000815 80C0                     M 	dc.b	$80,cpsg3
00000817                          M 	z80_ptr	sound48_flamethrower_psg3
00000817 0000                     M 	dc.w	(((sound48_flamethrower_psg3)<<8)&$ff00)|(((sound48_flamethrower_psg3)>>8)&$ff)|$80
00000819 0000                     M 	dc.b	$00,$00
0000081B                            
0000081B                            ; PSG3 Data
0000081B                            Sound48_Flamethrower_PSG3:
0000081B                            	smpsPSGvoice        $00
0000081B F500                     M 	dc.b	$f5,$00
0000081D                            	smpsPSGform         $E7
0000081D F3E7                     M 	dc.b	$f3,$e7
0000081F A725                       	dc.b	nD3, $25
00000821                            	smpsStop
00000821 F2                       M 	dc.b	$f2
00000822                            Sound49:	include "sound/sfx/C9 - Hidden Bonus (Unused).asm"
00000822                            Sound49_Bonus_Header:
00000822                            	smpsHeaderStartSong 2
00000822 =00000822                M songstart_2527	equ	offset(*)
00000822                            	smpsHeaderVoice     Sound49_Bonus_Voices
00000822                          M 	z80_ptr	sound49_bonus_voices
00000822 0000                     M 	dc.w	(((sound49_bonus_voices)<<8)&$ff00)|(((sound49_bonus_voices)>>8)&$ff)|$80
00000824                            	smpsHeaderTempoSFX  $01
00000824 01                       M 	dc.b	$01
00000825                            	smpsHeaderChanSFX   $01
00000825 01                       M 	dc.b	$01
00000826                            
00000826                            	smpsHeaderSFXChannel cFM5, Sound49_Bonus_FM5,	$0E, $00
00000826 8005                     M 	dc.b	$80,cfm5
00000828                          M 	z80_ptr	sound49_bonus_fm5
00000828 0000                     M 	dc.w	(((sound49_bonus_fm5)<<8)&$ff00)|(((sound49_bonus_fm5)>>8)&$ff)|$80
0000082A 0E00                     M 	dc.b	$0e,$00
0000082C                            
0000082C                            ; FM5 Data
0000082C                            Sound49_Bonus_FM5:
0000082C                            	smpsSetvoice        $00
0000082C EF00                     M 	dc.b	$ef,$00
0000082E                            	smpsModSet          $01, $01, $33, $18
0000082E F001 0133 18             M 	dc.b	$f0,$01,$01,$33,$18
00000833 B91A                       	dc.b	nAb4, $1A
00000835                            	smpsStop
00000835 F2                       M 	dc.b	$f2
00000836                            
00000836                            Sound49_Bonus_Voices:
00000836                            ;	Voice $00
00000836                            ;	$3B
00000836                            ;	$0A, $31, $05, $02, 	$5F, $5F, $5F, $5F, 	$04, $14, $16, $0C
00000836                            ;	$00, $04, $00, $00, 	$1F, $6F, $D8, $FF, 	$03, $25, $00, $80
00000836                            	smpsVcAlgorithm     $03
00000836 =00000003                M vcalgorithm	=	$03
00000836                            	smpsVcFeedback      $07
00000836 =00000007                M vcfeedback	=	$07
00000836                            	smpsVcUnusedBits    $00
00000836 =00000000                M vcunusedbits	=	$00
00000836 =00000000                M vcd1r1unk	=	0
00000836 =00000000                M vcd1r2unk	=	0
00000836 =00000000                M vcd1r3unk	=	0
00000836 =00000000                M vcd1r4unk	=	0
00000836                            	smpsVcDetune        $00, $00, $03, $00
00000836 =00000000                M vcdt1	=	$00
00000836 =00000000                M vcdt2	=	$00
00000836 =00000003                M vcdt3	=	$03
00000836 =00000000                M vcdt4	=	$00
00000836                            	smpsVcCoarseFreq    $02, $05, $01, $0A
00000836 =00000002                M vccf1	=	$02
00000836 =00000005                M vccf2	=	$05
00000836 =00000001                M vccf3	=	$01
00000836 =0000000A                M vccf4	=	$0a
00000836                            	smpsVcRateScale     $01, $01, $01, $01
00000836 =00000001                M vcrs1	=	$01
00000836 =00000001                M vcrs2	=	$01
00000836 =00000001                M vcrs3	=	$01
00000836 =00000001                M vcrs4	=	$01
00000836                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000836 =0000001F                M vcar1	=	$1f
00000836 =0000001F                M vcar2	=	$1f
00000836 =0000001F                M vcar3	=	$1f
00000836 =0000001F                M vcar4	=	$1f
00000836                            	smpsVcAmpMod        $00, $00, $00, $00
00000836 =00000000                M vcam1	=	$00
00000836 =00000000                M vcam2	=	$00
00000836 =00000000                M vcam3	=	$00
00000836 =00000000                M vcam4	=	$00
00000836                            	smpsVcDecayRate1    $0C, $16, $14, $04
00000836 =0000000C                M vcd1r1	=	$0c
00000836 =00000016                M vcd1r2	=	$16
00000836 =00000014                M vcd1r3	=	$14
00000836 =00000004                M vcd1r4	=	$04
00000836                            	smpsVcDecayRate2    $00, $00, $04, $00
00000836 =00000000                M vcd2r1	=	$00
00000836 =00000000                M vcd2r2	=	$00
00000836 =00000004                M vcd2r3	=	$04
00000836 =00000000                M vcd2r4	=	$00
00000836                            	smpsVcDecayLevel    $0F, $0D, $06, $01
00000836 =0000000F                M vcdl1	=	$0f
00000836 =0000000D                M vcdl2	=	$0d
00000836 =00000006                M vcdl3	=	$06
00000836 =00000001                M vcdl4	=	$01
00000836                            	smpsVcReleaseRate   $0F, $08, $0F, $0F
00000836 =0000000F                M vcrr1	=	$0f
00000836 =00000008                M vcrr2	=	$08
00000836 =0000000F                M vcrr3	=	$0f
00000836 =0000000F                M vcrr4	=	$0f
00000836                            	smpsVcTotalLevel    $00, $00, $25, $03
00000836 =00000000                M vctl1	=	$00
00000836 =00000000                M vctl2	=	$00
00000836 =00000025                M vctl3	=	$25
00000836 =00000003                M vctl4	=	$03
00000836 3B                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000837 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000837 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000837 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000837 =00000080                M vctlmask1	=	$80
00000837 0A05 3102                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000083B 5F5F 5F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000083F 0416 140C                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000843 0000 0400                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000847 1FD8 6FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000084B 0300 2580                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000084F                            
0000084F                            Sound4A:	include "sound/sfx/CA - Special Stage Entry.asm"
0000084F                            Sound4A_SpecStageEntry_Header:
0000084F                            	smpsHeaderStartSong 2
0000084F =0000084F                M songstart_2550	equ	offset(*)
0000084F                            	smpsHeaderVoice     Sound4A_SpecStageEntry_Voices
0000084F                          M 	z80_ptr	sound4a_specstageentry_voices
0000084F 0000                     M 	dc.w	(((sound4a_specstageentry_voices)<<8)&$ff00)|(((sound4a_specstageentry_voices)>>8)&$ff)|$80
00000851                            	smpsHeaderTempoSFX  $01
00000851 01                       M 	dc.b	$01
00000852                            	smpsHeaderChanSFX   $01
00000852 01                       M 	dc.b	$01
00000853                            
00000853                            	smpsHeaderSFXChannel cFM5, Sound4A_SpecStageEntry_FM5,	$00, $02
00000853 8005                     M 	dc.b	$80,cfm5
00000855                          M 	z80_ptr	sound4a_specstageentry_fm5
00000855 0000                     M 	dc.w	(((sound4a_specstageentry_fm5)<<8)&$ff00)|(((sound4a_specstageentry_fm5)>>8)&$ff)|$80
00000857 0002                     M 	dc.b	$00,$02
00000859                            
00000859                            ; FM5 Data
00000859                            Sound4A_SpecStageEntry_FM5:
00000859                            	smpsSetvoice        $00
00000859 EF00                     M 	dc.b	$ef,$00
0000085B                            	smpsModSet          $01, $01, $5B, $02
0000085B F001 015B 02             M 	dc.b	$f0,$01,$01,$5b,$02
00000860 CC65                       	dc.b	nEb6, $65
00000862                            	smpsStop
00000862 F2                       M 	dc.b	$f2
00000863                            
00000863                            Sound4A_SpecStageEntry_Voices:
00000863                            ;	Voice $00
00000863                            ;	$20
00000863                            ;	$36, $35, $30, $31, 	$41, $49, $3B, $4B, 	$09, $06, $09, $08
00000863                            ;	$01, $03, $02, $A9, 	$0F, $0F, $0F, $0F, 	$29, $27, $23, $80
00000863                            	smpsVcAlgorithm     $00
00000863 =00000000                M vcalgorithm	=	$00
00000863                            	smpsVcFeedback      $04
00000863 =00000004                M vcfeedback	=	$04
00000863                            	smpsVcUnusedBits    $00
00000863 =00000000                M vcunusedbits	=	$00
00000863 =00000000                M vcd1r1unk	=	0
00000863 =00000000                M vcd1r2unk	=	0
00000863 =00000000                M vcd1r3unk	=	0
00000863 =00000000                M vcd1r4unk	=	0
00000863                            	smpsVcDetune        $03, $03, $03, $03
00000863 =00000003                M vcdt1	=	$03
00000863 =00000003                M vcdt2	=	$03
00000863 =00000003                M vcdt3	=	$03
00000863 =00000003                M vcdt4	=	$03
00000863                            	smpsVcCoarseFreq    $01, $00, $05, $06
00000863 =00000001                M vccf1	=	$01
00000863 =00000000                M vccf2	=	$00
00000863 =00000005                M vccf3	=	$05
00000863 =00000006                M vccf4	=	$06
00000863                            	smpsVcRateScale     $01, $00, $01, $01
00000863 =00000001                M vcrs1	=	$01
00000863 =00000000                M vcrs2	=	$00
00000863 =00000001                M vcrs3	=	$01
00000863 =00000001                M vcrs4	=	$01
00000863                            	smpsVcAttackRate    $0B, $3B, $09, $01
00000863 =0000000B                M vcar1	=	$0b
00000863 =0000003B                M vcar2	=	$3b
00000863 =00000009                M vcar3	=	$09
00000863 =00000001                M vcar4	=	$01
00000863                            	smpsVcAmpMod        $00, $00, $00, $00
00000863 =00000000                M vcam1	=	$00
00000863 =00000000                M vcam2	=	$00
00000863 =00000000                M vcam3	=	$00
00000863 =00000000                M vcam4	=	$00
00000863                            	smpsVcDecayRate1    $08, $09, $06, $09
00000863 =00000008                M vcd1r1	=	$08
00000863 =00000009                M vcd1r2	=	$09
00000863 =00000006                M vcd1r3	=	$06
00000863 =00000009                M vcd1r4	=	$09
00000863                            	smpsVcDecayRate2    $A9, $02, $03, $01
00000863 =000000A9                M vcd2r1	=	$a9
00000863 =00000002                M vcd2r2	=	$02
00000863 =00000003                M vcd2r3	=	$03
00000863 =00000001                M vcd2r4	=	$01
00000863                            	smpsVcDecayLevel    $00, $00, $00, $00
00000863 =00000000                M vcdl1	=	$00
00000863 =00000000                M vcdl2	=	$00
00000863 =00000000                M vcdl3	=	$00
00000863 =00000000                M vcdl4	=	$00
00000863                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000863 =0000000F                M vcrr1	=	$0f
00000863 =0000000F                M vcrr2	=	$0f
00000863 =0000000F                M vcrr3	=	$0f
00000863 =0000000F                M vcrr4	=	$0f
00000863                            	smpsVcTotalLevel    $00, $23, $27, $29
00000863 =00000000                M vctl1	=	$00
00000863 =00000023                M vctl2	=	$23
00000863 =00000027                M vctl3	=	$27
00000863 =00000029                M vctl4	=	$29
00000863 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000864 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000864 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000864 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000864 =00000080                M vctlmask1	=	$80
00000864 3630 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000868 413B 494B                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000086C 0909 0608                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000870 0102 03A9                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000874 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000878 2923 2780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000087C                            
0000087C                            Sound4B:	include "sound/sfx/CB - Slow Smash.asm"
0000087C                            Sound4B_SlowSmash_Header:
0000087C                            	smpsHeaderStartSong 2
0000087C =0000087C                M songstart_2573	equ	offset(*)
0000087C                            	smpsHeaderVoice     Sound2C_39_4B_Voices
0000087C                          M 	z80_ptr	sound2c_39_4b_voices
0000087C 0000                     M 	dc.w	(((sound2c_39_4b_voices)<<8)&$ff00)|(((sound2c_39_4b_voices)>>8)&$ff)|$80
0000087E                            	smpsHeaderTempoSFX  $01
0000087E 01                       M 	dc.b	$01
0000087F                            	smpsHeaderChanSFX   $02
0000087F 02                       M 	dc.b	$02
00000880                            
00000880                            	smpsHeaderSFXChannel cFM5, Sound4B_SlowSmash_FM5,	$00, $00
00000880 8005                     M 	dc.b	$80,cfm5
00000882                          M 	z80_ptr	sound4b_slowsmash_fm5
00000882 0000                     M 	dc.w	(((sound4b_slowsmash_fm5)<<8)&$ff00)|(((sound4b_slowsmash_fm5)>>8)&$ff)|$80
00000884 0000                     M 	dc.b	$00,$00
00000886                            	smpsHeaderSFXChannel cPSG3, Sound4B_SlowSmash_PSG3,	$00, $00
00000886 80C0                     M 	dc.b	$80,cpsg3
00000888                          M 	z80_ptr	sound4b_slowsmash_psg3
00000888 0000                     M 	dc.w	(((sound4b_slowsmash_psg3)<<8)&$ff00)|(((sound4b_slowsmash_psg3)>>8)&$ff)|$80
0000088A 0000                     M 	dc.b	$00,$00
0000088C                            
0000088C                            ; FM5 Data
0000088C                            Sound4B_SlowSmash_FM5:
0000088C                            	smpsSetvoice        $00
0000088C EF00                     M 	dc.b	$ef,$00
0000088E                            	smpsModSet          $03, $01, $20, $04
0000088E F003 0120 04             M 	dc.b	$f0,$03,$01,$20,$04
00000893                            
00000893                            Sound4B_SlowSmash_Loop00:
00000893 8118                       	dc.b	nC0, $18
00000895                            	smpsAlterVol        $0A
00000895 E60A                     M 	dc.b	$e6,$0a
00000897                            	smpsLoop            $00, $06, Sound4B_SlowSmash_Loop00
00000897 F700 06                  M 	dc.b	$f7,$00,$06
0000089A                          M 	z80_ptr	sound4b_slowsmash_loop00
0000089A 0000                     M 	dc.w	(((sound4b_slowsmash_loop00)<<8)&$ff00)|(((sound4b_slowsmash_loop00)>>8)&$ff)|$80
0000089C                            	smpsStop
0000089C F2                       M 	dc.b	$f2
0000089D                            
0000089D                            ; PSG3 Data
0000089D                            Sound4B_SlowSmash_PSG3:
0000089D                            	smpsModSet          $01, $01, $0F, $05
0000089D F001 010F 05             M 	dc.b	$f0,$01,$01,$0f,$05
000008A2                            	smpsPSGform         $E7
000008A2 F3E7                     M 	dc.b	$f3,$e7
000008A4                            
000008A4                            Sound4B_SlowSmash_Loop01:
000008A4 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000008A7                            	smpsPSGAlterVol     $03
000008A7 EC03                     M 	dc.b	$ec,$03
000008A9                            	smpsLoop            $00, $05, Sound4B_SlowSmash_Loop01
000008A9 F700 05                  M 	dc.b	$f7,$00,$05
000008AC                          M 	z80_ptr	sound4b_slowsmash_loop01
000008AC 0000                     M 	dc.w	(((sound4b_slowsmash_loop01)<<8)&$ff00)|(((sound4b_slowsmash_loop01)>>8)&$ff)|$80
000008AE                            	smpsStop
000008AE F2                       M 	dc.b	$f2
000008AF                            Sound4C:	include "sound/sfx/CC - Spring.asm"
000008AF                            Sound4C_Spring_Header:
000008AF                            	smpsHeaderStartSong 2
000008AF =000008AF                M songstart_2594	equ	offset(*)
000008AF                            	smpsHeaderVoice     Sound4C_Spring_Voices
000008AF                          M 	z80_ptr	sound4c_spring_voices
000008AF 0000                     M 	dc.w	(((sound4c_spring_voices)<<8)&$ff00)|(((sound4c_spring_voices)>>8)&$ff)|$80
000008B1                            	smpsHeaderTempoSFX  $01
000008B1 01                       M 	dc.b	$01
000008B2                            	smpsHeaderChanSFX   $01
000008B2 01                       M 	dc.b	$01
000008B3                            
000008B3                            	smpsHeaderSFXChannel cFM4, Sound4C_Spring_FM4,	$00, $02
000008B3 8004                     M 	dc.b	$80,cfm4
000008B5                          M 	z80_ptr	sound4c_spring_fm4
000008B5 0000                     M 	dc.w	(((sound4c_spring_fm4)<<8)&$ff00)|(((sound4c_spring_fm4)>>8)&$ff)|$80
000008B7 0002                     M 	dc.b	$00,$02
000008B9                            
000008B9                            ; FM4 Data
000008B9                            Sound4C_Spring_FM4:
000008B9                            	smpsSetvoice        $00
000008B9 EF00                     M 	dc.b	$ef,$00
000008BB 8001                       	dc.b	nRst, $01
000008BD                            	smpsModSet          $03, $01, $5D, $0F
000008BD F003 015D 0F             M 	dc.b	$f0,$03,$01,$5d,$0f
000008C2 B00C                       	dc.b	nB3, $0C
000008C4                            	smpsModOff
000008C4 F4                       M 	dc.b	$f4
000008C5                            
000008C5                            Sound4C_Spring_Loop00:
000008C5 E7                         	dc.b	smpsNoAttack
000008C6                            	smpsAlterVol        $02
000008C6 E602                     M 	dc.b	$e6,$02
000008C8 BD02                       	dc.b	nC5, $02
000008CA                            	smpsLoop            $00, $19, Sound4C_Spring_Loop00
000008CA F700 19                  M 	dc.b	$f7,$00,$19
000008CD                          M 	z80_ptr	sound4c_spring_loop00
000008CD 0000                     M 	dc.w	(((sound4c_spring_loop00)<<8)&$ff00)|(((sound4c_spring_loop00)>>8)&$ff)|$80
000008CF                            	smpsStop
000008CF F2                       M 	dc.b	$f2
000008D0                            
000008D0                            Sound4C_Spring_Voices:
000008D0                            ;	Voice $00
000008D0                            ;	$20
000008D0                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000008D0                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000008D0                            	smpsVcAlgorithm     $00
000008D0 =00000000                M vcalgorithm	=	$00
000008D0                            	smpsVcFeedback      $04
000008D0 =00000004                M vcfeedback	=	$04
000008D0                            	smpsVcUnusedBits    $00
000008D0 =00000000                M vcunusedbits	=	$00
000008D0 =00000000                M vcd1r1unk	=	0
000008D0 =00000000                M vcd1r2unk	=	0
000008D0 =00000000                M vcd1r3unk	=	0
000008D0 =00000000                M vcd1r4unk	=	0
000008D0                            	smpsVcDetune        $03, $03, $03, $03
000008D0 =00000003                M vcdt1	=	$03
000008D0 =00000003                M vcdt2	=	$03
000008D0 =00000003                M vcdt3	=	$03
000008D0 =00000003                M vcdt4	=	$03
000008D0                            	smpsVcCoarseFreq    $01, $00, $05, $06
000008D0 =00000001                M vccf1	=	$01
000008D0 =00000000                M vccf2	=	$00
000008D0 =00000005                M vccf3	=	$05
000008D0 =00000006                M vccf4	=	$06
000008D0                            	smpsVcRateScale     $02, $02, $03, $03
000008D0 =00000002                M vcrs1	=	$02
000008D0 =00000002                M vcrs2	=	$02
000008D0 =00000003                M vcrs3	=	$03
000008D0 =00000003                M vcrs4	=	$03
000008D0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000008D0 =0000001F                M vcar1	=	$1f
000008D0 =0000001F                M vcar2	=	$1f
000008D0 =0000001F                M vcar3	=	$1f
000008D0 =0000001F                M vcar4	=	$1f
000008D0                            	smpsVcAmpMod        $00, $00, $00, $00
000008D0 =00000000                M vcam1	=	$00
000008D0 =00000000                M vcam2	=	$00
000008D0 =00000000                M vcam3	=	$00
000008D0 =00000000                M vcam4	=	$00
000008D0                            	smpsVcDecayRate1    $06, $09, $06, $07
000008D0 =00000006                M vcd1r1	=	$06
000008D0 =00000009                M vcd1r2	=	$09
000008D0 =00000006                M vcd1r3	=	$06
000008D0 =00000007                M vcd1r4	=	$07
000008D0                            	smpsVcDecayRate2    $08, $06, $06, $07
000008D0 =00000008                M vcd2r1	=	$08
000008D0 =00000006                M vcd2r2	=	$06
000008D0 =00000006                M vcd2r3	=	$06
000008D0 =00000007                M vcd2r4	=	$07
000008D0                            	smpsVcDecayLevel    $0F, $01, $01, $02
000008D0 =0000000F                M vcdl1	=	$0f
000008D0 =00000001                M vcdl2	=	$01
000008D0 =00000001                M vcdl3	=	$01
000008D0 =00000002                M vcdl4	=	$02
000008D0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000008D0 =0000000F                M vcrr1	=	$0f
000008D0 =0000000F                M vcrr2	=	$0f
000008D0 =0000000F                M vcrr3	=	$0f
000008D0 =0000000F                M vcrr4	=	$0f
000008D0                            	smpsVcTotalLevel    $00, $13, $30, $16
000008D0 =00000000                M vctl1	=	$00
000008D0 =00000013                M vctl2	=	$13
000008D0 =00000030                M vctl3	=	$30
000008D0 =00000016                M vctl4	=	$16
000008D0 20                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000008D1 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000008D1 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000008D1 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000008D1 =00000080                M vctlmask1	=	$80
000008D1 3630 3531                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000008D5 DF9F DF9F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000008D9 0709 0606                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000008DD 0706 0608                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000008E1 2F1F 1FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000008E5 1613 3080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000008E9                            
000008E9                            Sound4D:	include "sound/sfx/CD - Switch.asm"
000008E9                            Sound4D_Blip_Header:
000008E9                            	smpsHeaderStartSong 2
000008E9 =000008E9                M songstart_2621	equ	offset(*)
000008E9                            	smpsHeaderVoiceNull
000008E9 0000                     M 	dc.w	$0000
000008EB                            	smpsHeaderTempoSFX  $01
000008EB 01                       M 	dc.b	$01
000008EC                            	smpsHeaderChanSFX   $01
000008EC 01                       M 	dc.b	$01
000008ED                            
000008ED                            	smpsHeaderSFXChannel cPSG3, Sound4D_Blip_PSG3,	$00, $00
000008ED 80C0                     M 	dc.b	$80,cpsg3
000008EF                          M 	z80_ptr	sound4d_blip_psg3
000008EF 0000                     M 	dc.w	(((sound4d_blip_psg3)<<8)&$ff00)|(((sound4d_blip_psg3)>>8)&$ff)|$80
000008F1 0000                     M 	dc.b	$00,$00
000008F3                            
000008F3                            ; PSG3 Data
000008F3                            Sound4D_Blip_PSG3:
000008F3 BB02                       	dc.b	nBb4, $02
000008F5                            	smpsStop
000008F5 F2                       M 	dc.b	$f2
000008F6                            Sound4E:	include "sound/sfx/CE - Ring Left Speaker.asm"
000008F6                            Sound4E_RingLeft_Header:
000008F6                            	smpsHeaderStartSong 2
000008F6 =000008F6                M songstart_2628	equ	offset(*)
000008F6                            	smpsHeaderVoice     Sound_Ring_Voices
000008F6                          M 	z80_ptr	sound_ring_voices
000008F6 0000                     M 	dc.w	(((sound_ring_voices)<<8)&$ff00)|(((sound_ring_voices)>>8)&$ff)|$80
000008F8                            	smpsHeaderTempoSFX  $01
000008F8 01                       M 	dc.b	$01
000008F9                            	smpsHeaderChanSFX   $01
000008F9 01                       M 	dc.b	$01
000008FA                            
000008FA                            	smpsHeaderSFXChannel cFM4, Sound4E_RingLeft_FM4,	$00, $05
000008FA 8004                     M 	dc.b	$80,cfm4
000008FC                          M 	z80_ptr	sound4e_ringleft_fm4
000008FC 0000                     M 	dc.w	(((sound4e_ringleft_fm4)<<8)&$ff00)|(((sound4e_ringleft_fm4)>>8)&$ff)|$80
000008FE 0005                     M 	dc.b	$00,$05
00000900                            
00000900                            ; FM4 Data
00000900                            Sound4E_RingLeft_FM4:
00000900                            	smpsSetvoice        $00
00000900 EF00                     M 	dc.b	$ef,$00
00000902                            	smpsPan             panLeft, $00
00000902 E080                     M 	dc.b	$e0,panleft|$00
00000904 C104 C405 C91B             	dc.b	nE5, $04, nG5, $05, nC6, $1B
0000090A                            	smpsStop
0000090A F2                       M 	dc.b	$f2
0000090B                            Sound4F:	include "sound/sfx/CF - Signpost.asm"
0000090B                            Sound4F_Signpost_Header:
0000090B                            	smpsHeaderStartSong 2
0000090B =0000090B                M songstart_2638	equ	offset(*)
0000090B                            	smpsHeaderVoice     Sound4F_Signpost_Voices
0000090B                          M 	z80_ptr	sound4f_signpost_voices
0000090B 0000                     M 	dc.w	(((sound4f_signpost_voices)<<8)&$ff00)|(((sound4f_signpost_voices)>>8)&$ff)|$80
0000090D                            	smpsHeaderTempoSFX  $01
0000090D 01                       M 	dc.b	$01
0000090E                            	smpsHeaderChanSFX   $02
0000090E 02                       M 	dc.b	$02
0000090F                            
0000090F                            	smpsHeaderSFXChannel cFM4, Sound4F_Signpost_FM4,	$27, $03
0000090F 8004                     M 	dc.b	$80,cfm4
00000911                          M 	z80_ptr	sound4f_signpost_fm4
00000911 0000                     M 	dc.w	(((sound4f_signpost_fm4)<<8)&$ff00)|(((sound4f_signpost_fm4)>>8)&$ff)|$80
00000913 2703                     M 	dc.b	$27,$03
00000915                            	smpsHeaderSFXChannel cFM5, Sound4F_Signpost_FM5,	$27, $00
00000915 8005                     M 	dc.b	$80,cfm5
00000917                          M 	z80_ptr	sound4f_signpost_fm5
00000917 0000                     M 	dc.w	(((sound4f_signpost_fm5)<<8)&$ff00)|(((sound4f_signpost_fm5)>>8)&$ff)|$80
00000919 2700                     M 	dc.b	$27,$00
0000091B                            
0000091B                            ; FM4 Data
0000091B                            Sound4F_Signpost_FM4:
0000091B 8004                       	dc.b	nRst, $04
0000091D                            
0000091D                            ; FM5 Data
0000091D                            Sound4F_Signpost_FM5:
0000091D                            	smpsSetvoice        $00
0000091D EF00                     M 	dc.b	$ef,$00
0000091F                            
0000091F                            Sound4F_Signpost_Loop00:
0000091F B405                       	dc.b	nEb4, $05
00000921                            	smpsAlterVol        $02
00000921 E602                     M 	dc.b	$e6,$02
00000923                            	smpsLoop            $00, $15, Sound4F_Signpost_Loop00
00000923 F700 15                  M 	dc.b	$f7,$00,$15
00000926                          M 	z80_ptr	sound4f_signpost_loop00
00000926 0000                     M 	dc.w	(((sound4f_signpost_loop00)<<8)&$ff00)|(((sound4f_signpost_loop00)>>8)&$ff)|$80
00000928                            	smpsStop
00000928 F2                       M 	dc.b	$f2
00000929                            
00000929                            Sound4F_Signpost_Voices:
00000929                            ;	Voice $00
00000929                            ;	$F4
00000929                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
00000929                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $8B, $03, $80
00000929                            	smpsVcAlgorithm     $04
00000929 =00000004                M vcalgorithm	=	$04
00000929                            	smpsVcFeedback      $06
00000929 =00000006                M vcfeedback	=	$06
00000929                            	smpsVcUnusedBits    $03
00000929 =00000003                M vcunusedbits	=	$03
00000929 =00000000                M vcd1r1unk	=	0
00000929 =00000000                M vcd1r2unk	=	0
00000929 =00000000                M vcd1r3unk	=	0
00000929 =00000000                M vcd1r4unk	=	0
00000929                            	smpsVcDetune        $00, $00, $00, $00
00000929 =00000000                M vcdt1	=	$00
00000929 =00000000                M vcdt2	=	$00
00000929 =00000000                M vcdt3	=	$00
00000929 =00000000                M vcdt4	=	$00
00000929                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
00000929 =0000000E                M vccf1	=	$0e
00000929 =0000000F                M vccf2	=	$0f
00000929 =00000004                M vccf3	=	$04
00000929 =00000006                M vccf4	=	$06
00000929                            	smpsVcRateScale     $00, $00, $00, $00
00000929 =00000000                M vcrs1	=	$00
00000929 =00000000                M vcrs2	=	$00
00000929 =00000000                M vcrs3	=	$00
00000929 =00000000                M vcrs4	=	$00
00000929                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000929 =0000001F                M vcar1	=	$1f
00000929 =0000001F                M vcar2	=	$1f
00000929 =0000001F                M vcar3	=	$1f
00000929 =0000001F                M vcar4	=	$1f
00000929                            	smpsVcAmpMod        $00, $00, $00, $00
00000929 =00000000                M vcam1	=	$00
00000929 =00000000                M vcam2	=	$00
00000929 =00000000                M vcam3	=	$00
00000929 =00000000                M vcam4	=	$00
00000929                            	smpsVcDecayRate1    $0B, $0B, $00, $00
00000929 =0000000B                M vcd1r1	=	$0b
00000929 =0000000B                M vcd1r2	=	$0b
00000929 =00000000                M vcd1r3	=	$00
00000929 =00000000                M vcd1r4	=	$00
00000929                            	smpsVcDecayRate2    $08, $05, $00, $00
00000929 =00000008                M vcd2r1	=	$08
00000929 =00000005                M vcd2r2	=	$05
00000929 =00000000                M vcd2r3	=	$00
00000929 =00000000                M vcd2r4	=	$00
00000929                            	smpsVcDecayLevel    $0F, $0F, $00, $00
00000929 =0000000F                M vcdl1	=	$0f
00000929 =0000000F                M vcdl2	=	$0f
00000929 =00000000                M vcdl3	=	$00
00000929 =00000000                M vcdl4	=	$00
00000929                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000929 =0000000F                M vcrr1	=	$0f
00000929 =0000000F                M vcrr2	=	$0f
00000929 =0000000F                M vcrr3	=	$0f
00000929 =0000000F                M vcrr4	=	$0f
00000929                            	smpsVcTotalLevel    $00, $03, $0B, $0C
00000929 =00000000                M vctl1	=	$00
00000929 =00000003                M vctl2	=	$03
00000929 =0000000B                M vctl3	=	$0b
00000929 =0000000C                M vctl4	=	$0c
00000929 F4                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000092A =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000092A =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000092A =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000092A =00000080                M vctlmask1	=	$80
0000092A 060F 040E                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000092E 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000932 000B 000B                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000936 0005 0008                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000093A 0FFF 0FFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000093E 0C03 8B80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000942                            
00000942                            Sound50:	include "sound/sfx/D0 - CNZ Boss Zap.asm"
00000942                            Sound50_CNZBossZap_Header:
00000942                            	smpsHeaderStartSong 2
00000942 =00000942                M songstart_2665	equ	offset(*)
00000942                            	smpsHeaderVoice     Sound50_CNZBossZap_Voices
00000942                          M 	z80_ptr	sound50_cnzbosszap_voices
00000942 0000                     M 	dc.w	(((sound50_cnzbosszap_voices)<<8)&$ff00)|(((sound50_cnzbosszap_voices)>>8)&$ff)|$80
00000944                            	smpsHeaderTempoSFX  $01
00000944 01                       M 	dc.b	$01
00000945                            	smpsHeaderChanSFX   $01
00000945 01                       M 	dc.b	$01
00000946                            
00000946                            	smpsHeaderSFXChannel cFM5, Sound50_CNZBossZap_FM5,	$F4, $00
00000946 8005                     M 	dc.b	$80,cfm5
00000948                          M 	z80_ptr	sound50_cnzbosszap_fm5
00000948 0000                     M 	dc.w	(((sound50_cnzbosszap_fm5)<<8)&$ff00)|(((sound50_cnzbosszap_fm5)>>8)&$ff)|$80
0000094A F400                     M 	dc.b	$f4,$00
0000094C                            
0000094C                            ; FM5 Data
0000094C                            Sound50_CNZBossZap_FM5:
0000094C                            	smpsSetvoice        $00
0000094C EF00                     M 	dc.b	$ef,$00
0000094E B304 8001                  	dc.b	nD4, $04, nRst, $01
00000952                            
00000952                            Sound50_CNZBossZap_Loop00:
00000952 B404 8001                  	dc.b	nEb4, $04, nRst, $01
00000956                            	smpsLoop            $00, $04, Sound50_CNZBossZap_Loop00
00000956 F700 04                  M 	dc.b	$f7,$00,$04
00000959                          M 	z80_ptr	sound50_cnzbosszap_loop00
00000959 0000                     M 	dc.w	(((sound50_cnzbosszap_loop00)<<8)&$ff00)|(((sound50_cnzbosszap_loop00)>>8)&$ff)|$80
0000095B                            	smpsStop
0000095B F2                       M 	dc.b	$f2
0000095C                            
0000095C                            Sound50_CNZBossZap_Voices:
0000095C                            ;	Voice $00
0000095C                            ;	$83
0000095C                            ;	$12, $10, $13, $1E, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0000095C                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$06, $10, $34, $87
0000095C                            	smpsVcAlgorithm     $03
0000095C =00000003                M vcalgorithm	=	$03
0000095C                            	smpsVcFeedback      $00
0000095C =00000000                M vcfeedback	=	$00
0000095C                            	smpsVcUnusedBits    $02
0000095C =00000002                M vcunusedbits	=	$02
0000095C =00000000                M vcd1r1unk	=	0
0000095C =00000000                M vcd1r2unk	=	0
0000095C =00000000                M vcd1r3unk	=	0
0000095C =00000000                M vcd1r4unk	=	0
0000095C                            	smpsVcDetune        $01, $01, $01, $01
0000095C =00000001                M vcdt1	=	$01
0000095C =00000001                M vcdt2	=	$01
0000095C =00000001                M vcdt3	=	$01
0000095C =00000001                M vcdt4	=	$01
0000095C                            	smpsVcCoarseFreq    $0E, $03, $00, $02
0000095C =0000000E                M vccf1	=	$0e
0000095C =00000003                M vccf2	=	$03
0000095C =00000000                M vccf3	=	$00
0000095C =00000002                M vccf4	=	$02
0000095C                            	smpsVcRateScale     $00, $00, $00, $00
0000095C =00000000                M vcrs1	=	$00
0000095C =00000000                M vcrs2	=	$00
0000095C =00000000                M vcrs3	=	$00
0000095C =00000000                M vcrs4	=	$00
0000095C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0000095C =0000001F                M vcar1	=	$1f
0000095C =0000001F                M vcar2	=	$1f
0000095C =0000001F                M vcar3	=	$1f
0000095C =0000001F                M vcar4	=	$1f
0000095C                            	smpsVcAmpMod        $00, $00, $00, $00
0000095C =00000000                M vcam1	=	$00
0000095C =00000000                M vcam2	=	$00
0000095C =00000000                M vcam3	=	$00
0000095C =00000000                M vcam4	=	$00
0000095C                            	smpsVcDecayRate1    $00, $00, $00, $00
0000095C =00000000                M vcd1r1	=	$00
0000095C =00000000                M vcd1r2	=	$00
0000095C =00000000                M vcd1r3	=	$00
0000095C =00000000                M vcd1r4	=	$00
0000095C                            	smpsVcDecayRate2    $02, $02, $02, $02
0000095C =00000002                M vcd2r1	=	$02
0000095C =00000002                M vcd2r2	=	$02
0000095C =00000002                M vcd2r3	=	$02
0000095C =00000002                M vcd2r4	=	$02
0000095C                            	smpsVcDecayLevel    $03, $0F, $02, $02
0000095C =00000003                M vcdl1	=	$03
0000095C =0000000F                M vcdl2	=	$0f
0000095C =00000002                M vcdl3	=	$02
0000095C =00000002                M vcdl4	=	$02
0000095C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0000095C =0000000F                M vcrr1	=	$0f
0000095C =0000000F                M vcrr2	=	$0f
0000095C =0000000F                M vcrr3	=	$0f
0000095C =0000000F                M vcrr4	=	$0f
0000095C                            	smpsVcTotalLevel    $07, $34, $10, $06
0000095C =00000007                M vctl1	=	$07
0000095C =00000034                M vctl2	=	$34
0000095C =00000010                M vctl3	=	$10
0000095C =00000006                M vctl4	=	$06
0000095C 83                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
0000095D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
0000095D =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
0000095D =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
0000095D =00000080                M vctlmask1	=	$80
0000095D 1213 101E                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000961 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000965 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000969 0202 0202                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
0000096D 2FFF 2F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000971 0634 1087                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000975                            
00000975                            Sound51:	include "sound/sfx/D1 - Unknown (Unused).asm"
00000975                            Sound51_Header:
00000975                            	smpsHeaderStartSong 2
00000975 =00000975                M songstart_2689	equ	offset(*)
00000975                            	smpsHeaderVoice     Sound51_Voices
00000975                          M 	z80_ptr	sound51_voices
00000975 0000                     M 	dc.w	(((sound51_voices)<<8)&$ff00)|(((sound51_voices)>>8)&$ff)|$80
00000977                            	smpsHeaderTempoSFX  $01
00000977 01                       M 	dc.b	$01
00000978                            	smpsHeaderChanSFX   $02
00000978 02                       M 	dc.b	$02
00000979                            
00000979                            	smpsHeaderSFXChannel cPSG3, Sound51_PSG3,	$00, $01
00000979 80C0                     M 	dc.b	$80,cpsg3
0000097B                          M 	z80_ptr	sound51_psg3
0000097B 0000                     M 	dc.w	(((sound51_psg3)<<8)&$ff00)|(((sound51_psg3)>>8)&$ff)|$80
0000097D 0001                     M 	dc.b	$00,$01
0000097F                            	smpsHeaderSFXChannel cFM5, Sound51_FM5,	$00, $0B
0000097F 8005                     M 	dc.b	$80,cfm5
00000981                          M 	z80_ptr	sound51_fm5
00000981 0000                     M 	dc.w	(((sound51_fm5)<<8)&$ff00)|(((sound51_fm5)>>8)&$ff)|$80
00000983 000B                     M 	dc.b	$00,$0b
00000985                            
00000985                            ; PSG3 Data
00000985                            Sound51_PSG3:
00000985                            	smpsPSGvoice        fTone_02
00000985 F502                     M 	dc.b	$f5,ftone_02
00000987                            	smpsPSGform         $E4
00000987 F3E4                     M 	dc.b	$f3,$e4
00000989 B004 8502                  	dc.b	nB3, $04, nE0, $02
0000098D                            	smpsStop
0000098D F2                       M 	dc.b	$f2
0000098E                            
0000098E                            ; FM5 Data
0000098E                            Sound51_FM5:
0000098E                            	smpsSetvoice        $00
0000098E EF00                     M 	dc.b	$ef,$00
00000990                            	smpsNoteFill        $04
00000990 E804                     M 	dc.b	$e8,$04
00000992 A506                       	dc.b	nC3, $06
00000994                            	smpsStop
00000994 F2                       M 	dc.b	$f2
00000995                            
00000995                            Sound51_Voices:
00000995                            ;	Voice $00
00000995                            ;	$3C
00000995                            ;	$02, $00, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $0E, $19, $10
00000995                            ;	$00, $0C, $00, $0F, 	$0F, $EF, $FF, $FF, 	$05, $80, $00, $80
00000995                            	smpsVcAlgorithm     $04
00000995 =00000004                M vcalgorithm	=	$04
00000995                            	smpsVcFeedback      $07
00000995 =00000007                M vcfeedback	=	$07
00000995                            	smpsVcUnusedBits    $00
00000995 =00000000                M vcunusedbits	=	$00
00000995 =00000000                M vcd1r1unk	=	0
00000995 =00000000                M vcd1r2unk	=	0
00000995 =00000000                M vcd1r3unk	=	0
00000995 =00000000                M vcd1r4unk	=	0
00000995                            	smpsVcDetune        $00, $00, $00, $00
00000995 =00000000                M vcdt1	=	$00
00000995 =00000000                M vcdt2	=	$00
00000995 =00000000                M vcdt3	=	$00
00000995 =00000000                M vcdt4	=	$00
00000995                            	smpsVcCoarseFreq    $01, $01, $00, $02
00000995 =00000001                M vccf1	=	$01
00000995 =00000001                M vccf2	=	$01
00000995 =00000000                M vccf3	=	$00
00000995 =00000002                M vccf4	=	$02
00000995                            	smpsVcRateScale     $00, $00, $00, $00
00000995 =00000000                M vcrs1	=	$00
00000995 =00000000                M vcrs2	=	$00
00000995 =00000000                M vcrs3	=	$00
00000995 =00000000                M vcrs4	=	$00
00000995                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000995 =0000001F                M vcar1	=	$1f
00000995 =0000001F                M vcar2	=	$1f
00000995 =0000001F                M vcar3	=	$1f
00000995 =0000001F                M vcar4	=	$1f
00000995                            	smpsVcAmpMod        $00, $00, $00, $00
00000995 =00000000                M vcam1	=	$00
00000995 =00000000                M vcam2	=	$00
00000995 =00000000                M vcam3	=	$00
00000995 =00000000                M vcam4	=	$00
00000995                            	smpsVcDecayRate1    $10, $19, $0E, $00
00000995 =00000010                M vcd1r1	=	$10
00000995 =00000019                M vcd1r2	=	$19
00000995 =0000000E                M vcd1r3	=	$0e
00000995 =00000000                M vcd1r4	=	$00
00000995                            	smpsVcDecayRate2    $0F, $00, $0C, $00
00000995 =0000000F                M vcd2r1	=	$0f
00000995 =00000000                M vcd2r2	=	$00
00000995 =0000000C                M vcd2r3	=	$0c
00000995 =00000000                M vcd2r4	=	$00
00000995                            	smpsVcDecayLevel    $0F, $0F, $0E, $00
00000995 =0000000F                M vcdl1	=	$0f
00000995 =0000000F                M vcdl2	=	$0f
00000995 =0000000E                M vcdl3	=	$0e
00000995 =00000000                M vcdl4	=	$00
00000995                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000995 =0000000F                M vcrr1	=	$0f
00000995 =0000000F                M vcrr2	=	$0f
00000995 =0000000F                M vcrr3	=	$0f
00000995 =0000000F                M vcrr4	=	$0f
00000995                            	smpsVcTotalLevel    $00, $00, $00, $05
00000995 =00000000                M vctl1	=	$00
00000995 =00000000                M vctl2	=	$00
00000995 =00000000                M vctl3	=	$00
00000995 =00000005                M vctl4	=	$05
00000995 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000996 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000996 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000996 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000996 =00000080                M vctlmask1	=	$80
00000996 0201 0001                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000099A 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000099E 0019 0E10                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000009A2 0000 0C0F                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000009A6 0FFF EFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000009AA 0500 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000009AE                            
000009AE                            Sound52:	include "sound/sfx/D2 - Unknown (Unused).asm"
000009AE                            Sound52_Header:
000009AE                            	smpsHeaderStartSong 2
000009AE =000009AE                M songstart_2717	equ	offset(*)
000009AE                            	smpsHeaderVoice     Sound52_Voices
000009AE                          M 	z80_ptr	sound52_voices
000009AE 0000                     M 	dc.w	(((sound52_voices)<<8)&$ff00)|(((sound52_voices)>>8)&$ff)|$80
000009B0                            	smpsHeaderTempoSFX  $01
000009B0 01                       M 	dc.b	$01
000009B1                            	smpsHeaderChanSFX   $01
000009B1 01                       M 	dc.b	$01
000009B2                            
000009B2                            	smpsHeaderSFXChannel cFM5, Sound52_FM5,	$00, $02
000009B2 8005                     M 	dc.b	$80,cfm5
000009B4                          M 	z80_ptr	sound52_fm5
000009B4 0000                     M 	dc.w	(((sound52_fm5)<<8)&$ff00)|(((sound52_fm5)>>8)&$ff)|$80
000009B6 0002                     M 	dc.b	$00,$02
000009B8                            
000009B8                            ; FM5 Data
000009B8                            Sound52_FM5:
000009B8                            	smpsModSet          $01, $01, $2A, $07
000009B8 F001 012A 07             M 	dc.b	$f0,$01,$01,$2a,$07
000009BD                            	smpsSetvoice        $00
000009BD EF00                     M 	dc.b	$ef,$00
000009BF                            
000009BF                            Sound52_Loop00:
000009BF A503 E7                    	dc.b	nC3, $03, smpsNoAttack
000009C2                            	smpsLoop            $00, $13, Sound52_Loop00
000009C2 F700 13                  M 	dc.b	$f7,$00,$13
000009C5                          M 	z80_ptr	sound52_loop00
000009C5 0000                     M 	dc.w	(((sound52_loop00)<<8)&$ff00)|(((sound52_loop00)>>8)&$ff)|$80
000009C7                            
000009C7                            Sound52_Loop01:
000009C7 A503 E7                    	dc.b	nC3, $03, smpsNoAttack
000009CA                            	smpsAlterVol        $02
000009CA E602                     M 	dc.b	$e6,$02
000009CC                            	smpsLoop            $00, $13, Sound52_Loop01
000009CC F700 13                  M 	dc.b	$f7,$00,$13
000009CF                          M 	z80_ptr	sound52_loop01
000009CF 0000                     M 	dc.w	(((sound52_loop01)<<8)&$ff00)|(((sound52_loop01)>>8)&$ff)|$80
000009D1                            	smpsStop
000009D1 F2                       M 	dc.b	$f2
000009D2                            
000009D2                            Sound52_Voices:
000009D2                            ;	Voice $00
000009D2                            ;	$28
000009D2                            ;	$21, $21, $21, $30, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000009D2                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$29, $29, $20, $80
000009D2                            	smpsVcAlgorithm     $00
000009D2 =00000000                M vcalgorithm	=	$00
000009D2                            	smpsVcFeedback      $05
000009D2 =00000005                M vcfeedback	=	$05
000009D2                            	smpsVcUnusedBits    $00
000009D2 =00000000                M vcunusedbits	=	$00
000009D2 =00000000                M vcd1r1unk	=	0
000009D2 =00000000                M vcd1r2unk	=	0
000009D2 =00000000                M vcd1r3unk	=	0
000009D2 =00000000                M vcd1r4unk	=	0
000009D2                            	smpsVcDetune        $03, $02, $02, $02
000009D2 =00000003                M vcdt1	=	$03
000009D2 =00000002                M vcdt2	=	$02
000009D2 =00000002                M vcdt3	=	$02
000009D2 =00000002                M vcdt4	=	$02
000009D2                            	smpsVcCoarseFreq    $00, $01, $01, $01
000009D2 =00000000                M vccf1	=	$00
000009D2 =00000001                M vccf2	=	$01
000009D2 =00000001                M vccf3	=	$01
000009D2 =00000001                M vccf4	=	$01
000009D2                            	smpsVcRateScale     $00, $00, $00, $00
000009D2 =00000000                M vcrs1	=	$00
000009D2 =00000000                M vcrs2	=	$00
000009D2 =00000000                M vcrs3	=	$00
000009D2 =00000000                M vcrs4	=	$00
000009D2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000009D2 =0000001F                M vcar1	=	$1f
000009D2 =0000001F                M vcar2	=	$1f
000009D2 =0000001F                M vcar3	=	$1f
000009D2 =0000001F                M vcar4	=	$1f
000009D2                            	smpsVcAmpMod        $00, $00, $00, $00
000009D2 =00000000                M vcam1	=	$00
000009D2 =00000000                M vcam2	=	$00
000009D2 =00000000                M vcam3	=	$00
000009D2 =00000000                M vcam4	=	$00
000009D2                            	smpsVcDecayRate1    $00, $00, $00, $00
000009D2 =00000000                M vcd1r1	=	$00
000009D2 =00000000                M vcd1r2	=	$00
000009D2 =00000000                M vcd1r3	=	$00
000009D2 =00000000                M vcd1r4	=	$00
000009D2                            	smpsVcDecayRate2    $00, $00, $00, $00
000009D2 =00000000                M vcd2r1	=	$00
000009D2 =00000000                M vcd2r2	=	$00
000009D2 =00000000                M vcd2r3	=	$00
000009D2 =00000000                M vcd2r4	=	$00
000009D2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000009D2 =0000000F                M vcdl1	=	$0f
000009D2 =0000000F                M vcdl2	=	$0f
000009D2 =0000000F                M vcdl3	=	$0f
000009D2 =0000000F                M vcdl4	=	$0f
000009D2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000009D2 =0000000F                M vcrr1	=	$0f
000009D2 =0000000F                M vcrr2	=	$0f
000009D2 =0000000F                M vcrr3	=	$0f
000009D2 =0000000F                M vcrr4	=	$0f
000009D2                            	smpsVcTotalLevel    $00, $20, $29, $29
000009D2 =00000000                M vctl1	=	$00
000009D2 =00000020                M vctl2	=	$20
000009D2 =00000029                M vctl3	=	$29
000009D2 =00000029                M vctl4	=	$29
000009D2 28                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
000009D3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
000009D3 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
000009D3 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
000009D3 =00000080                M vctlmask1	=	$80
000009D3 2121 2130                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
000009D7 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
000009DB 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
000009DF 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
000009E3 FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
000009E7 2920 2980                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
000009EB                            
000009EB                            Sound53:	include "sound/sfx/D3 - Signpost 2P.asm"
000009EB                            Sound53_Signpost2P_Header:
000009EB                            	smpsHeaderStartSong 2, 1
000009EB =000009EB                M songstart_2745	equ	offset(*)
000009EB                            	smpsHeaderVoice     Sound53_Signpost2P_Voices
000009EB                          M 	z80_ptr	sound53_signpost2p_voices
000009EB 0000                     M 	dc.w	(((sound53_signpost2p_voices)<<8)&$ff00)|(((sound53_signpost2p_voices)>>8)&$ff)|$80
000009ED                            	smpsHeaderTempoSFX  $01
000009ED 01                       M 	dc.b	$01
000009EE                            	smpsHeaderChanSFX   $01
000009EE 01                       M 	dc.b	$01
000009EF                            
000009EF                            	smpsHeaderSFXChannel cFM5, Sound53_Signpost2P_FM5,	$F5, $03
000009EF 8005                     M 	dc.b	$80,cfm5
000009F1                          M 	z80_ptr	sound53_signpost2p_fm5
000009F1 0000                     M 	dc.w	(((sound53_signpost2p_fm5)<<8)&$ff00)|(((sound53_signpost2p_fm5)>>8)&$ff)|$80
000009F3 F503                     M 	dc.b	$f5,$03
000009F5                            
000009F5                            ; FM5 Data
000009F5                            Sound53_Signpost2P_FM5:
000009F5                            	smpsSetvoice        $00
000009F5 EF00                     M 	dc.b	$ef,$00
000009F7                            	smpsModSet          $01, $01, $46, $09
000009F7 F001 0146 09             M 	dc.b	$f0,$01,$01,$46,$09
000009FC A714 E714 E7               	dc.b	nD3, $14, smpsNoAttack, $14, smpsNoAttack
00000A01                            	smpsAlterVol        $04
00000A01 E604                     M 	dc.b	$e6,$04
00000A03 14E7                       	dc.b	$14, smpsNoAttack
00000A05                            	smpsAlterVol        $04
00000A05 E604                     M 	dc.b	$e6,$04
00000A07 14E7                       	dc.b	$14, smpsNoAttack
00000A09                            	smpsAlterVol        $04
00000A09 E604                     M 	dc.b	$e6,$04
00000A0B 0AE7                       	dc.b	$0A, smpsNoAttack
00000A0D                            	smpsAlterVol        $04
00000A0D E604                     M 	dc.b	$e6,$04
00000A0F 0A                         	dc.b	$0A
00000A10                            	smpsStop
00000A10 F2                       M 	dc.b	$f2
00000A11                            
00000A11                            Sound53_Signpost2P_Voices:
00000A11                            ;	Voice $00
00000A11                            ;	$07
00000A11                            ;	$0A, $0C, $0C, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
00000A11                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$2A, $0F, $0F, $80
00000A11                            	smpsVcAlgorithm     $07
00000A11 =00000007                M vcalgorithm	=	$07
00000A11                            	smpsVcFeedback      $00
00000A11 =00000000                M vcfeedback	=	$00
00000A11                            	smpsVcUnusedBits    $00
00000A11 =00000000                M vcunusedbits	=	$00
00000A11 =00000000                M vcd1r1unk	=	0
00000A11 =00000000                M vcd1r2unk	=	0
00000A11 =00000000                M vcd1r3unk	=	0
00000A11 =00000000                M vcd1r4unk	=	0
00000A11                            	smpsVcDetune        $00, $00, $00, $00
00000A11 =00000000                M vcdt1	=	$00
00000A11 =00000000                M vcdt2	=	$00
00000A11 =00000000                M vcdt3	=	$00
00000A11 =00000000                M vcdt4	=	$00
00000A11                            	smpsVcCoarseFreq    $0C, $0C, $0C, $0A
00000A11 =0000000C                M vccf1	=	$0c
00000A11 =0000000C                M vccf2	=	$0c
00000A11 =0000000C                M vccf3	=	$0c
00000A11 =0000000A                M vccf4	=	$0a
00000A11                            	smpsVcRateScale     $00, $00, $00, $00
00000A11 =00000000                M vcrs1	=	$00
00000A11 =00000000                M vcrs2	=	$00
00000A11 =00000000                M vcrs3	=	$00
00000A11 =00000000                M vcrs4	=	$00
00000A11                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000A11 =0000001F                M vcar1	=	$1f
00000A11 =0000001F                M vcar2	=	$1f
00000A11 =0000001F                M vcar3	=	$1f
00000A11 =0000001F                M vcar4	=	$1f
00000A11                            	smpsVcAmpMod        $00, $00, $00, $00
00000A11 =00000000                M vcam1	=	$00
00000A11 =00000000                M vcam2	=	$00
00000A11 =00000000                M vcam3	=	$00
00000A11 =00000000                M vcam4	=	$00
00000A11                            	smpsVcDecayRate1    $00, $00, $00, $00
00000A11 =00000000                M vcd1r1	=	$00
00000A11 =00000000                M vcd1r2	=	$00
00000A11 =00000000                M vcd1r3	=	$00
00000A11 =00000000                M vcd1r4	=	$00
00000A11                            	smpsVcDecayRate2    $00, $00, $00, $00
00000A11 =00000000                M vcd2r1	=	$00
00000A11 =00000000                M vcd2r2	=	$00
00000A11 =00000000                M vcd2r3	=	$00
00000A11 =00000000                M vcd2r4	=	$00
00000A11                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00000A11 =0000000F                M vcdl1	=	$0f
00000A11 =0000000F                M vcdl2	=	$0f
00000A11 =0000000F                M vcdl3	=	$0f
00000A11 =0000000F                M vcdl4	=	$0f
00000A11                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000A11 =0000000F                M vcrr1	=	$0f
00000A11 =0000000F                M vcrr2	=	$0f
00000A11 =0000000F                M vcrr3	=	$0f
00000A11 =0000000F                M vcrr4	=	$0f
00000A11                            	smpsVcTotalLevel    $80, $0F, $0F, $2A
00000A11 =00000080                M vctl1	=	$80
00000A11 =0000000F                M vctl2	=	$0f
00000A11 =0000000F                M vctl3	=	$0f
00000A11 =0000002A                M vctl4	=	$2a
00000A11 07                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000A12 =FFFFFF80                M vctlmask4	=	((vcalgorithm=7)<<7)
00000A12 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000A12 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000A12 =00000080                M vctlmask1	=	$80
00000A12 0A0C 0C0C                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000A16 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000A1A 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000A1E 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000A22 FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000A26 AA8F 8F80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000A2A                            
00000A2A                            Sound54:	include "sound/sfx/D4 - OOZ Lid Pop.asm"
00000A2A                            Sound54_OOZLidPop_Header:
00000A2A                            	smpsHeaderStartSong 2, 1
00000A2A =00000A2A                M songstart_2772	equ	offset(*)
00000A2A                            	smpsHeaderVoice     Sound54_OOZLidPop_Voices
00000A2A                          M 	z80_ptr	sound54_oozlidpop_voices
00000A2A 0000                     M 	dc.w	(((sound54_oozlidpop_voices)<<8)&$ff00)|(((sound54_oozlidpop_voices)>>8)&$ff)|$80
00000A2C                            	smpsHeaderTempoSFX  $01
00000A2C 01                       M 	dc.b	$01
00000A2D                            	smpsHeaderChanSFX   $02
00000A2D 02                       M 	dc.b	$02
00000A2E                            
00000A2E                            	smpsHeaderSFXChannel cFM5, Sound54_OOZLidPop_FM5,	$00, $00
00000A2E 8005                     M 	dc.b	$80,cfm5
00000A30                          M 	z80_ptr	sound54_oozlidpop_fm5
00000A30 0000                     M 	dc.w	(((sound54_oozlidpop_fm5)<<8)&$ff00)|(((sound54_oozlidpop_fm5)>>8)&$ff)|$80
00000A32 0000                     M 	dc.b	$00,$00
00000A34                            	smpsHeaderSFXChannel cPSG3, Sound54_OOZLidPop_PSG3,	$00, $06
00000A34 80C0                     M 	dc.b	$80,cpsg3
00000A36                          M 	z80_ptr	sound54_oozlidpop_psg3
00000A36 0000                     M 	dc.w	(((sound54_oozlidpop_psg3)<<8)&$ff00)|(((sound54_oozlidpop_psg3)>>8)&$ff)|$80
00000A38 0006                     M 	dc.b	$00,$06
00000A3A                            
00000A3A                            ; FM5 Data
00000A3A                            Sound54_OOZLidPop_FM5:
00000A3A                            	smpsSetvoice        $00
00000A3A EF00                     M 	dc.b	$ef,$00
00000A3C B615                       	dc.b	nF4, $15
00000A3E                            	smpsStop
00000A3E F2                       M 	dc.b	$f2
00000A3F                            
00000A3F                            ; PSG3 Data
00000A3F                            Sound54_OOZLidPop_PSG3:
00000A3F                            	smpsPSGform         $E7
00000A3F F3E7                     M 	dc.b	$f3,$e7
00000A41                            	smpsPSGvoice        fTone_04
00000A41 F504                     M 	dc.b	$f5,ftone_04
00000A43 C603 E7C5 E7C4 E7C3 E7C2+  	dc.b	nMaxPSG, $03, smpsNoAttack, nAb5, smpsNoAttack, nG5, smpsNoAttack, nFs5, smpsNoAttack, nF5, smpsNoAttack, nE5
00000A4F E7C0                       	dc.b	smpsNoAttack, nEb5
00000A51                            	smpsStop
00000A51 F2                       M 	dc.b	$f2
00000A52                            
00000A52                            Sound54_OOZLidPop_Voices:
00000A52                            ;	Voice $00
00000A52                            ;	$07
00000A52                            ;	$03, $03, $02, $00, 	$FF, $6F, $6F, $3F, 	$12, $11, $14, $0E
00000A52                            ;	$1A, $03, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$03, $07, $07, $80
00000A52                            	smpsVcAlgorithm     $07
00000A52 =00000007                M vcalgorithm	=	$07
00000A52                            	smpsVcFeedback      $00
00000A52 =00000000                M vcfeedback	=	$00
00000A52                            	smpsVcUnusedBits    $00
00000A52 =00000000                M vcunusedbits	=	$00
00000A52 =00000000                M vcd1r1unk	=	0
00000A52 =00000000                M vcd1r2unk	=	0
00000A52 =00000000                M vcd1r3unk	=	0
00000A52 =00000000                M vcd1r4unk	=	0
00000A52                            	smpsVcDetune        $00, $00, $00, $00
00000A52 =00000000                M vcdt1	=	$00
00000A52 =00000000                M vcdt2	=	$00
00000A52 =00000000                M vcdt3	=	$00
00000A52 =00000000                M vcdt4	=	$00
00000A52                            	smpsVcCoarseFreq    $00, $02, $03, $03
00000A52 =00000000                M vccf1	=	$00
00000A52 =00000002                M vccf2	=	$02
00000A52 =00000003                M vccf3	=	$03
00000A52 =00000003                M vccf4	=	$03
00000A52                            	smpsVcRateScale     $00, $01, $01, $03
00000A52 =00000000                M vcrs1	=	$00
00000A52 =00000001                M vcrs2	=	$01
00000A52 =00000001                M vcrs3	=	$01
00000A52 =00000003                M vcrs4	=	$03
00000A52                            	smpsVcAttackRate    $3F, $2F, $2F, $3F
00000A52 =0000003F                M vcar1	=	$3f
00000A52 =0000002F                M vcar2	=	$2f
00000A52 =0000002F                M vcar3	=	$2f
00000A52 =0000003F                M vcar4	=	$3f
00000A52                            	smpsVcAmpMod        $00, $00, $00, $00
00000A52 =00000000                M vcam1	=	$00
00000A52 =00000000                M vcam2	=	$00
00000A52 =00000000                M vcam3	=	$00
00000A52 =00000000                M vcam4	=	$00
00000A52                            	smpsVcDecayRate1    $0E, $14, $11, $12
00000A52 =0000000E                M vcd1r1	=	$0e
00000A52 =00000014                M vcd1r2	=	$14
00000A52 =00000011                M vcd1r3	=	$11
00000A52 =00000012                M vcd1r4	=	$12
00000A52                            	smpsVcDecayRate2    $0D, $0A, $03, $1A
00000A52 =0000000D                M vcd2r1	=	$0d
00000A52 =0000000A                M vcd2r2	=	$0a
00000A52 =00000003                M vcd2r3	=	$03
00000A52 =0000001A                M vcd2r4	=	$1a
00000A52                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00000A52 =0000000F                M vcdl1	=	$0f
00000A52 =0000000F                M vcdl2	=	$0f
00000A52 =0000000F                M vcdl3	=	$0f
00000A52 =0000000F                M vcdl4	=	$0f
00000A52                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000A52 =0000000F                M vcrr1	=	$0f
00000A52 =0000000F                M vcrr2	=	$0f
00000A52 =0000000F                M vcrr3	=	$0f
00000A52 =0000000F                M vcrr4	=	$0f
00000A52                            	smpsVcTotalLevel    $80, $07, $07, $03
00000A52 =00000080                M vctl1	=	$80
00000A52 =00000007                M vctl2	=	$07
00000A52 =00000007                M vctl3	=	$07
00000A52 =00000003                M vctl4	=	$03
00000A52 07                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000A53 =FFFFFF80                M vctlmask4	=	((vcalgorithm=7)<<7)
00000A53 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000A53 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000A53 =00000080                M vctlmask1	=	$80
00000A53 0302 0300                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000A57 FF6F 6F3F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000A5B 1214 110E                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000A5F 1A0A 030D                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000A63 FFFF FFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000A67 8387 8780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000A6B                            
00000A6B                            Sound55:	include "sound/sfx/D5 - Sliding Spike.asm"
00000A6B                            Sound55_SlidingSpike_Header:
00000A6B                            	smpsHeaderStartSong 2
00000A6B =00000A6B                M songstart_2799	equ	offset(*)
00000A6B                            	smpsHeaderVoice     Sound55_SlidingSpike_Voices
00000A6B                          M 	z80_ptr	sound55_slidingspike_voices
00000A6B 0000                     M 	dc.w	(((sound55_slidingspike_voices)<<8)&$ff00)|(((sound55_slidingspike_voices)>>8)&$ff)|$80
00000A6D                            	smpsHeaderTempoSFX  $01
00000A6D 01                       M 	dc.b	$01
00000A6E                            	smpsHeaderChanSFX   $01
00000A6E 01                       M 	dc.b	$01
00000A6F                            
00000A6F                            	smpsHeaderSFXChannel cFM5, Sound55_SlidingSpike_FM5,	$00, $00
00000A6F 8005                     M 	dc.b	$80,cfm5
00000A71                          M 	z80_ptr	sound55_slidingspike_fm5
00000A71 0000                     M 	dc.w	(((sound55_slidingspike_fm5)<<8)&$ff00)|(((sound55_slidingspike_fm5)>>8)&$ff)|$80
00000A73 0000                     M 	dc.b	$00,$00
00000A75                            
00000A75                            ; FM5 Data
00000A75                            Sound55_SlidingSpike_FM5:
00000A75                            	smpsSetvoice        $00
00000A75 EF00                     M 	dc.b	$ef,$00
00000A77 AA07 B615                  	dc.b	nF3, $07, nF4, $15
00000A7B                            	smpsStop
00000A7B F2                       M 	dc.b	$f2
00000A7C                            
00000A7C                            Sound55_SlidingSpike_Voices:
00000A7C                            ;	Voice $00
00000A7C                            ;	$42
00000A7C                            ;	$20, $0F, $0E, $0F, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00000A7C                            ;	$0F, $0F, $0E, $0E, 	$0F, $0F, $0F, $0F, 	$2E, $20, $80, $80
00000A7C                            	smpsVcAlgorithm     $02
00000A7C =00000002                M vcalgorithm	=	$02
00000A7C                            	smpsVcFeedback      $00
00000A7C =00000000                M vcfeedback	=	$00
00000A7C                            	smpsVcUnusedBits    $01
00000A7C =00000001                M vcunusedbits	=	$01
00000A7C =00000000                M vcd1r1unk	=	0
00000A7C =00000000                M vcd1r2unk	=	0
00000A7C =00000000                M vcd1r3unk	=	0
00000A7C =00000000                M vcd1r4unk	=	0
00000A7C                            	smpsVcDetune        $00, $00, $00, $02
00000A7C =00000000                M vcdt1	=	$00
00000A7C =00000000                M vcdt2	=	$00
00000A7C =00000000                M vcdt3	=	$00
00000A7C =00000002                M vcdt4	=	$02
00000A7C                            	smpsVcCoarseFreq    $0F, $0E, $0F, $00
00000A7C =0000000F                M vccf1	=	$0f
00000A7C =0000000E                M vccf2	=	$0e
00000A7C =0000000F                M vccf3	=	$0f
00000A7C =00000000                M vccf4	=	$00
00000A7C                            	smpsVcRateScale     $00, $00, $00, $00
00000A7C =00000000                M vcrs1	=	$00
00000A7C =00000000                M vcrs2	=	$00
00000A7C =00000000                M vcrs3	=	$00
00000A7C =00000000                M vcrs4	=	$00
00000A7C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000A7C =0000001F                M vcar1	=	$1f
00000A7C =0000001F                M vcar2	=	$1f
00000A7C =0000001F                M vcar3	=	$1f
00000A7C =0000001F                M vcar4	=	$1f
00000A7C                            	smpsVcAmpMod        $00, $00, $00, $00
00000A7C =00000000                M vcam1	=	$00
00000A7C =00000000                M vcam2	=	$00
00000A7C =00000000                M vcam3	=	$00
00000A7C =00000000                M vcam4	=	$00
00000A7C                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00000A7C =0000001F                M vcd1r1	=	$1f
00000A7C =0000001F                M vcd1r2	=	$1f
00000A7C =0000001F                M vcd1r3	=	$1f
00000A7C =0000001F                M vcd1r4	=	$1f
00000A7C                            	smpsVcDecayRate2    $0E, $0E, $0F, $0F
00000A7C =0000000E                M vcd2r1	=	$0e
00000A7C =0000000E                M vcd2r2	=	$0e
00000A7C =0000000F                M vcd2r3	=	$0f
00000A7C =0000000F                M vcd2r4	=	$0f
00000A7C                            	smpsVcDecayLevel    $00, $00, $00, $00
00000A7C =00000000                M vcdl1	=	$00
00000A7C =00000000                M vcdl2	=	$00
00000A7C =00000000                M vcdl3	=	$00
00000A7C =00000000                M vcdl4	=	$00
00000A7C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000A7C =0000000F                M vcrr1	=	$0f
00000A7C =0000000F                M vcrr2	=	$0f
00000A7C =0000000F                M vcrr3	=	$0f
00000A7C =0000000F                M vcrr4	=	$0f
00000A7C                            	smpsVcTotalLevel    $00, $80, $20, $2E
00000A7C =00000000                M vctl1	=	$00
00000A7C =00000080                M vctl2	=	$80
00000A7C =00000020                M vctl3	=	$20
00000A7C =0000002E                M vctl4	=	$2e
00000A7C 42                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000A7D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000A7D =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000A7D =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000A7D =00000080                M vctlmask1	=	$80
00000A7D 200E 0F0F                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000A81 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000A85 1F1F 1F1F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000A89 0F0E 0F0E                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000A8D 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000A91 2E80 2080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000A95                            
00000A95                            Sound56:	include "sound/sfx/D6 - CNZ Elevator.asm"
00000A95                            Sound56_CNZElevator_Header:
00000A95                            	smpsHeaderStartSong 2
00000A95 =00000A95                M songstart_2821	equ	offset(*)
00000A95                            	smpsHeaderVoice     Sound56_CNZElevator_Voices
00000A95                          M 	z80_ptr	sound56_cnzelevator_voices
00000A95 0000                     M 	dc.w	(((sound56_cnzelevator_voices)<<8)&$ff00)|(((sound56_cnzelevator_voices)>>8)&$ff)|$80
00000A97                            	smpsHeaderTempoSFX  $01
00000A97 01                       M 	dc.b	$01
00000A98                            	smpsHeaderChanSFX   $01
00000A98 01                       M 	dc.b	$01
00000A99                            
00000A99                            	smpsHeaderSFXChannel cFM5, Sound56_CNZElevator_FM5,	$10, $0E
00000A99 8005                     M 	dc.b	$80,cfm5
00000A9B                          M 	z80_ptr	sound56_cnzelevator_fm5
00000A9B 0000                     M 	dc.w	(((sound56_cnzelevator_fm5)<<8)&$ff00)|(((sound56_cnzelevator_fm5)>>8)&$ff)|$80
00000A9D 100E                     M 	dc.b	$10,$0e
00000A9F                            
00000A9F                            ; FM5 Data
00000A9F                            Sound56_CNZElevator_FM5:
00000A9F                            	smpsSetvoice        $00
00000A9F EF00                     M 	dc.b	$ef,$00
00000AA1                            	smpsModSet          $01, $01, $1E, $FF
00000AA1 F001 011E FF             M 	dc.b	$f0,$01,$01,$1e,$ff
00000AA6 8F1C                       	dc.b	nD1, $1C
00000AA8                            	smpsModOff
00000AA8 F4                       M 	dc.b	$f4
00000AA9                            
00000AA9                            Sound56_CNZElevator_Loop00:
00000AA9 E79A 05                    	dc.b	smpsNoAttack, nCs2, $05
00000AAC                            	smpsLoop            $00, $09, Sound56_CNZElevator_Loop00
00000AAC F700 09                  M 	dc.b	$f7,$00,$09
00000AAF                          M 	z80_ptr	sound56_cnzelevator_loop00
00000AAF 0000                     M 	dc.w	(((sound56_cnzelevator_loop00)<<8)&$ff00)|(((sound56_cnzelevator_loop00)>>8)&$ff)|$80
00000AB1                            
00000AB1                            Sound56_CNZElevator_Loop01:
00000AB1 E79A 04                    	dc.b	smpsNoAttack, nCs2, $04
00000AB4                            	smpsAlterVol        $02
00000AB4 E602                     M 	dc.b	$e6,$02
00000AB6 E79A 04                    	dc.b	smpsNoAttack, nCs2, $04
00000AB9                            	smpsAlterVol        $02
00000AB9 E602                     M 	dc.b	$e6,$02
00000ABB                            	smpsLoop            $00, $08, Sound56_CNZElevator_Loop01
00000ABB F700 08                  M 	dc.b	$f7,$00,$08
00000ABE                          M 	z80_ptr	sound56_cnzelevator_loop01
00000ABE 0000                     M 	dc.w	(((sound56_cnzelevator_loop01)<<8)&$ff00)|(((sound56_cnzelevator_loop01)>>8)&$ff)|$80
00000AC0                            	smpsStop
00000AC0 F2                       M 	dc.b	$f2
00000AC1                            
00000AC1                            Sound56_CNZElevator_Voices:
00000AC1                            ;	Voice $00
00000AC1                            ;	$0D
00000AC1                            ;	$06, $00, $00, $E5, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
00000AC1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$27, $80, $80, $80
00000AC1                            	smpsVcAlgorithm     $05
00000AC1 =00000005                M vcalgorithm	=	$05
00000AC1                            	smpsVcFeedback      $01
00000AC1 =00000001                M vcfeedback	=	$01
00000AC1                            	smpsVcUnusedBits    $00
00000AC1 =00000000                M vcunusedbits	=	$00
00000AC1 =00000000                M vcd1r1unk	=	0
00000AC1 =00000000                M vcd1r2unk	=	0
00000AC1 =00000000                M vcd1r3unk	=	0
00000AC1 =00000000                M vcd1r4unk	=	0
00000AC1                            	smpsVcDetune        $0E, $00, $00, $00
00000AC1 =0000000E                M vcdt1	=	$0e
00000AC1 =00000000                M vcdt2	=	$00
00000AC1 =00000000                M vcdt3	=	$00
00000AC1 =00000000                M vcdt4	=	$00
00000AC1                            	smpsVcCoarseFreq    $05, $00, $00, $06
00000AC1 =00000005                M vccf1	=	$05
00000AC1 =00000000                M vccf2	=	$00
00000AC1 =00000000                M vccf3	=	$00
00000AC1 =00000006                M vccf4	=	$06
00000AC1                            	smpsVcRateScale     $00, $00, $00, $00
00000AC1 =00000000                M vcrs1	=	$00
00000AC1 =00000000                M vcrs2	=	$00
00000AC1 =00000000                M vcrs3	=	$00
00000AC1 =00000000                M vcrs4	=	$00
00000AC1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000AC1 =0000001F                M vcar1	=	$1f
00000AC1 =0000001F                M vcar2	=	$1f
00000AC1 =0000001F                M vcar3	=	$1f
00000AC1 =0000001F                M vcar4	=	$1f
00000AC1                            	smpsVcAmpMod        $00, $00, $00, $00
00000AC1 =00000000                M vcam1	=	$00
00000AC1 =00000000                M vcam2	=	$00
00000AC1 =00000000                M vcam3	=	$00
00000AC1 =00000000                M vcam4	=	$00
00000AC1                            	smpsVcDecayRate1    $00, $00, $00, $00
00000AC1 =00000000                M vcd1r1	=	$00
00000AC1 =00000000                M vcd1r2	=	$00
00000AC1 =00000000                M vcd1r3	=	$00
00000AC1 =00000000                M vcd1r4	=	$00
00000AC1                            	smpsVcDecayRate2    $00, $00, $00, $00
00000AC1 =00000000                M vcd2r1	=	$00
00000AC1 =00000000                M vcd2r2	=	$00
00000AC1 =00000000                M vcd2r3	=	$00
00000AC1 =00000000                M vcd2r4	=	$00
00000AC1                            	smpsVcDecayLevel    $00, $00, $00, $00
00000AC1 =00000000                M vcdl1	=	$00
00000AC1 =00000000                M vcdl2	=	$00
00000AC1 =00000000                M vcdl3	=	$00
00000AC1 =00000000                M vcdl4	=	$00
00000AC1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000AC1 =0000000F                M vcrr1	=	$0f
00000AC1 =0000000F                M vcrr2	=	$0f
00000AC1 =0000000F                M vcrr3	=	$0f
00000AC1 =0000000F                M vcrr4	=	$0f
00000AC1                            	smpsVcTotalLevel    $00, $00, $00, $27
00000AC1 =00000000                M vctl1	=	$00
00000AC1 =00000000                M vctl2	=	$00
00000AC1 =00000000                M vctl3	=	$00
00000AC1 =00000027                M vctl4	=	$27
00000AC1 0D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000AC2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000AC2 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000AC2 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000AC2 =00000080                M vctlmask1	=	$80
00000AC2 0600 00E5                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000AC6 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000ACA 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000ACE 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000AD2 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000AD6 2780 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000ADA                            
00000ADA                            Sound57:	include "sound/sfx/D7 - Platform Knock.asm"
00000ADA                            Sound57_PlatformKnock_Header:
00000ADA                            	smpsHeaderStartSong 2, 1
00000ADA =00000ADA                M songstart_2851	equ	offset(*)
00000ADA                            	smpsHeaderVoice     Sound57_PlatformKnock_Voices
00000ADA                          M 	z80_ptr	sound57_platformknock_voices
00000ADA 0000                     M 	dc.w	(((sound57_platformknock_voices)<<8)&$ff00)|(((sound57_platformknock_voices)>>8)&$ff)|$80
00000ADC                            	smpsHeaderTempoSFX  $01
00000ADC 01                       M 	dc.b	$01
00000ADD                            	smpsHeaderChanSFX   $01
00000ADD 01                       M 	dc.b	$01
00000ADE                            
00000ADE                            	smpsHeaderSFXChannel cFM5, Sound57_PlatformKnock_FM5,	$00, $00
00000ADE 8005                     M 	dc.b	$80,cfm5
00000AE0                          M 	z80_ptr	sound57_platformknock_fm5
00000AE0 0000                     M 	dc.w	(((sound57_platformknock_fm5)<<8)&$ff00)|(((sound57_platformknock_fm5)>>8)&$ff)|$80
00000AE2 0000                     M 	dc.b	$00,$00
00000AE4                            
00000AE4                            ; FM5 Data
00000AE4                            Sound57_PlatformKnock_FM5:
00000AE4                            	smpsSetvoice        $00
00000AE4 EF00                     M 	dc.b	$ef,$00
00000AE6 CA15                       	dc.b	nCs6, $15
00000AE8                            	smpsStop
00000AE8 F2                       M 	dc.b	$f2
00000AE9                            
00000AE9                            Sound57_PlatformKnock_Voices:
00000AE9                            ;	Voice $00
00000AE9                            ;	$04
00000AE9                            ;	$09, $00, $70, $30, 	$1C, $DF, $1F, $1F, 	$15, $0B, $12, $0F
00000AE9                            ;	$0C, $00, $0D, $0D, 	$07, $FA, $2F, $FA, 	$00, $00, $29, $00
00000AE9                            	smpsVcAlgorithm     $04
00000AE9 =00000004                M vcalgorithm	=	$04
00000AE9                            	smpsVcFeedback      $00
00000AE9 =00000000                M vcfeedback	=	$00
00000AE9                            	smpsVcUnusedBits    $00
00000AE9 =00000000                M vcunusedbits	=	$00
00000AE9 =00000000                M vcd1r1unk	=	0
00000AE9 =00000000                M vcd1r2unk	=	0
00000AE9 =00000000                M vcd1r3unk	=	0
00000AE9 =00000000                M vcd1r4unk	=	0
00000AE9                            	smpsVcDetune        $03, $07, $00, $00
00000AE9 =00000003                M vcdt1	=	$03
00000AE9 =00000007                M vcdt2	=	$07
00000AE9 =00000000                M vcdt3	=	$00
00000AE9 =00000000                M vcdt4	=	$00
00000AE9                            	smpsVcCoarseFreq    $00, $00, $00, $09
00000AE9 =00000000                M vccf1	=	$00
00000AE9 =00000000                M vccf2	=	$00
00000AE9 =00000000                M vccf3	=	$00
00000AE9 =00000009                M vccf4	=	$09
00000AE9                            	smpsVcRateScale     $00, $00, $03, $00
00000AE9 =00000000                M vcrs1	=	$00
00000AE9 =00000000                M vcrs2	=	$00
00000AE9 =00000003                M vcrs3	=	$03
00000AE9 =00000000                M vcrs4	=	$00
00000AE9                            	smpsVcAttackRate    $1F, $1F, $1F, $1C
00000AE9 =0000001F                M vcar1	=	$1f
00000AE9 =0000001F                M vcar2	=	$1f
00000AE9 =0000001F                M vcar3	=	$1f
00000AE9 =0000001C                M vcar4	=	$1c
00000AE9                            	smpsVcAmpMod        $00, $00, $00, $00
00000AE9 =00000000                M vcam1	=	$00
00000AE9 =00000000                M vcam2	=	$00
00000AE9 =00000000                M vcam3	=	$00
00000AE9 =00000000                M vcam4	=	$00
00000AE9                            	smpsVcDecayRate1    $0F, $12, $0B, $15
00000AE9 =0000000F                M vcd1r1	=	$0f
00000AE9 =00000012                M vcd1r2	=	$12
00000AE9 =0000000B                M vcd1r3	=	$0b
00000AE9 =00000015                M vcd1r4	=	$15
00000AE9                            	smpsVcDecayRate2    $0D, $0D, $00, $0C
00000AE9 =0000000D                M vcd2r1	=	$0d
00000AE9 =0000000D                M vcd2r2	=	$0d
00000AE9 =00000000                M vcd2r3	=	$00
00000AE9 =0000000C                M vcd2r4	=	$0c
00000AE9                            	smpsVcDecayLevel    $0F, $02, $0F, $00
00000AE9 =0000000F                M vcdl1	=	$0f
00000AE9 =00000002                M vcdl2	=	$02
00000AE9 =0000000F                M vcdl3	=	$0f
00000AE9 =00000000                M vcdl4	=	$00
00000AE9                            	smpsVcReleaseRate   $0A, $0F, $0A, $07
00000AE9 =0000000A                M vcrr1	=	$0a
00000AE9 =0000000F                M vcrr2	=	$0f
00000AE9 =0000000A                M vcrr3	=	$0a
00000AE9 =00000007                M vcrr4	=	$07
00000AE9                            	smpsVcTotalLevel    $00, $29, $00, $00
00000AE9 =00000000                M vctl1	=	$00
00000AE9 =00000029                M vctl2	=	$29
00000AE9 =00000000                M vctl3	=	$00
00000AE9 =00000000                M vctl4	=	$00
00000AE9 04                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000AEA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000AEA =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000AEA =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000AEA =00000080                M vctlmask1	=	$80
00000AEA 0970 0030                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000AEE 1C1F DF1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000AF2 1512 0B0F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000AF6 0C0D 000D                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000AFA 072F FAFA                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000AFE 0029 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000B02                            
00000B02                            Sound58:	include "sound/sfx/D8 - Bonus Bumper.asm"
00000B02                            Sound58_BonusBumper_Header:
00000B02                            	smpsHeaderStartSong 2
00000B02 =00000B02                M songstart_2873	equ	offset(*)
00000B02                            	smpsHeaderVoice     Sound58_BonusBumper_Voices
00000B02                          M 	z80_ptr	sound58_bonusbumper_voices
00000B02 0000                     M 	dc.w	(((sound58_bonusbumper_voices)<<8)&$ff00)|(((sound58_bonusbumper_voices)>>8)&$ff)|$80
00000B04                            	smpsHeaderTempoSFX  $01
00000B04 01                       M 	dc.b	$01
00000B05                            	smpsHeaderChanSFX   $01
00000B05 01                       M 	dc.b	$01
00000B06                            
00000B06                            	smpsHeaderSFXChannel cFM5, Sound58_BonusBumper_FM5,	$00, $07
00000B06 8005                     M 	dc.b	$80,cfm5
00000B08                          M 	z80_ptr	sound58_bonusbumper_fm5
00000B08 0000                     M 	dc.w	(((sound58_bonusbumper_fm5)<<8)&$ff00)|(((sound58_bonusbumper_fm5)>>8)&$ff)|$80
00000B0A 0007                     M 	dc.b	$00,$07
00000B0C                            
00000B0C                            ; FM5 Data
00000B0C                            Sound58_BonusBumper_FM5:
00000B0C                            	smpsSetvoice        $00
00000B0C EF00                     M 	dc.b	$ef,$00
00000B0E B306 B315                  	dc.b	nD4, $06, nD4, $15
00000B12                            	smpsStop
00000B12 F2                       M 	dc.b	$f2
00000B13                            
00000B13                            Sound58_BonusBumper_Voices:
00000B13                            ;	Voice $00
00000B13                            ;	$3C
00000B13                            ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
00000B13                            ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$17, $80, $20, $80
00000B13                            	smpsVcAlgorithm     $04
00000B13 =00000004                M vcalgorithm	=	$04
00000B13                            	smpsVcFeedback      $07
00000B13 =00000007                M vcfeedback	=	$07
00000B13                            	smpsVcUnusedBits    $00
00000B13 =00000000                M vcunusedbits	=	$00
00000B13 =00000000                M vcd1r1unk	=	0
00000B13 =00000000                M vcd1r2unk	=	0
00000B13 =00000000                M vcd1r3unk	=	0
00000B13 =00000000                M vcd1r4unk	=	0
00000B13                            	smpsVcDetune        $00, $00, $00, $00
00000B13 =00000000                M vcdt1	=	$00
00000B13 =00000000                M vcdt2	=	$00
00000B13 =00000000                M vcdt3	=	$00
00000B13 =00000000                M vcdt4	=	$00
00000B13                            	smpsVcCoarseFreq    $01, $0A, $01, $05
00000B13 =00000001                M vccf1	=	$01
00000B13 =0000000A                M vccf2	=	$0a
00000B13 =00000001                M vccf3	=	$01
00000B13 =00000005                M vccf4	=	$05
00000B13                            	smpsVcRateScale     $01, $01, $01, $01
00000B13 =00000001                M vcrs1	=	$01
00000B13 =00000001                M vcrs2	=	$01
00000B13 =00000001                M vcrs3	=	$01
00000B13 =00000001                M vcrs4	=	$01
00000B13                            	smpsVcAttackRate    $1C, $1C, $1C, $16
00000B13 =0000001C                M vcar1	=	$1c
00000B13 =0000001C                M vcar2	=	$1c
00000B13 =0000001C                M vcar3	=	$1c
00000B13 =00000016                M vcar4	=	$16
00000B13                            	smpsVcAmpMod        $00, $00, $00, $00
00000B13 =00000000                M vcam1	=	$00
00000B13 =00000000                M vcam2	=	$00
00000B13 =00000000                M vcam3	=	$00
00000B13 =00000000                M vcam4	=	$00
00000B13                            	smpsVcDecayRate1    $11, $11, $11, $0E
00000B13 =00000011                M vcd1r1	=	$11
00000B13 =00000011                M vcd1r2	=	$11
00000B13 =00000011                M vcd1r3	=	$11
00000B13 =0000000E                M vcd1r4	=	$0e
00000B13                            	smpsVcDecayRate2    $0A, $06, $0A, $09
00000B13 =0000000A                M vcd2r1	=	$0a
00000B13 =00000006                M vcd2r2	=	$06
00000B13 =0000000A                M vcd2r3	=	$0a
00000B13 =00000009                M vcd2r4	=	$09
00000B13                            	smpsVcDecayLevel    $03, $03, $03, $04
00000B13 =00000003                M vcdl1	=	$03
00000B13 =00000003                M vcdl2	=	$03
00000B13 =00000003                M vcdl3	=	$03
00000B13 =00000004                M vcdl4	=	$04
00000B13                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000B13 =0000000F                M vcrr1	=	$0f
00000B13 =0000000F                M vcrr2	=	$0f
00000B13 =0000000F                M vcrr3	=	$0f
00000B13 =0000000F                M vcrr4	=	$0f
00000B13                            	smpsVcTotalLevel    $00, $20, $00, $17
00000B13 =00000000                M vctl1	=	$00
00000B13 =00000020                M vctl2	=	$20
00000B13 =00000000                M vctl3	=	$00
00000B13 =00000017                M vctl4	=	$17
00000B13 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000B14 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000B14 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000B14 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000B14 =00000080                M vctlmask1	=	$80
00000B14 050A 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000B18 565C 5C5C                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000B1C 0E11 1111                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000B20 0906 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000B24 4F3F 3F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000B28 1720 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000B2C                            
00000B2C                            Sound59:	include "sound/sfx/D9 - Large Bumper.asm"
00000B2C                            Sound59_LargeBumper_Header:
00000B2C                            	smpsHeaderStartSong 2, 1
00000B2C =00000B2C                M songstart_2895	equ	offset(*)
00000B2C                            	smpsHeaderVoice     Sound59_LargeBumper_Voices
00000B2C                          M 	z80_ptr	sound59_largebumper_voices
00000B2C 0000                     M 	dc.w	(((sound59_largebumper_voices)<<8)&$ff00)|(((sound59_largebumper_voices)>>8)&$ff)|$80
00000B2E                            	smpsHeaderTempoSFX  $01
00000B2E 01                       M 	dc.b	$01
00000B2F                            	smpsHeaderChanSFX   $03
00000B2F 03                       M 	dc.b	$03
00000B30                            
00000B30                            	smpsHeaderSFXChannel cFM4, Sound59_LargeBumper_FM4,	$00, $00
00000B30 8004                     M 	dc.b	$80,cfm4
00000B32                          M 	z80_ptr	sound59_largebumper_fm4
00000B32 0000                     M 	dc.w	(((sound59_largebumper_fm4)<<8)&$ff00)|(((sound59_largebumper_fm4)>>8)&$ff)|$80
00000B34 0000                     M 	dc.b	$00,$00
00000B36                            	smpsHeaderSFXChannel cFM3, Sound59_LargeBumper_FM3,	$00, $02
00000B36 8002                     M 	dc.b	$80,cfm3
00000B38                          M 	z80_ptr	sound59_largebumper_fm3
00000B38 0000                     M 	dc.w	(((sound59_largebumper_fm3)<<8)&$ff00)|(((sound59_largebumper_fm3)>>8)&$ff)|$80
00000B3A 0002                     M 	dc.b	$00,$02
00000B3C                            	smpsHeaderSFXChannel cFM5, Sound59_LargeBumper_FM5,	$00, $00
00000B3C 8005                     M 	dc.b	$80,cfm5
00000B3E                          M 	z80_ptr	sound59_largebumper_fm5
00000B3E 0000                     M 	dc.w	(((sound59_largebumper_fm5)<<8)&$ff00)|(((sound59_largebumper_fm5)>>8)&$ff)|$80
00000B40 0000                     M 	dc.b	$00,$00
00000B42                            
00000B42                            ; FM4 Data
00000B42                            Sound59_LargeBumper_FM4:
00000B42                            	smpsSetvoice        $00
00000B42 EF00                     M 	dc.b	$ef,$00
00000B44                            	smpsAlterNote       $0C
00000B44 E10C                     M 	dc.b	$e1,$0c
00000B46 B514                       	dc.b	nE4, $14
00000B48                            	smpsStop
00000B48 F2                       M 	dc.b	$f2
00000B49                            
00000B49                            ; FM3 Data
00000B49                            Sound59_LargeBumper_FM3:
00000B49                            	smpsSetvoice        $01
00000B49 EF01                     M 	dc.b	$ef,$01
00000B4B 9A03                       	dc.b	nCs2, $03
00000B4D                            	smpsStop
00000B4D F2                       M 	dc.b	$f2
00000B4E                            
00000B4E                            ; FM5 Data
00000B4E                            Sound59_LargeBumper_FM5:
00000B4E                            	smpsSetvoice        $00
00000B4E EF00                     M 	dc.b	$ef,$00
00000B50 B614                       	dc.b	nF4, $14
00000B52                            	smpsStop
00000B52 F2                       M 	dc.b	$f2
00000B53                            
00000B53                            Sound59_LargeBumper_Voices:
00000B53                            ;	Voice $00
00000B53                            ;	$32
00000B53                            ;	$30, $40, $30, $70, 	$1F, $1F, $1F, $1F, 	$12, $01, $0A, $0D
00000B53                            ;	$00, $01, $01, $0C, 	$00, $C3, $23, $F6, 	$08, $1C, $07, $03
00000B53                            	smpsVcAlgorithm     $02
00000B53 =00000002                M vcalgorithm	=	$02
00000B53                            	smpsVcFeedback      $06
00000B53 =00000006                M vcfeedback	=	$06
00000B53                            	smpsVcUnusedBits    $00
00000B53 =00000000                M vcunusedbits	=	$00
00000B53 =00000000                M vcd1r1unk	=	0
00000B53 =00000000                M vcd1r2unk	=	0
00000B53 =00000000                M vcd1r3unk	=	0
00000B53 =00000000                M vcd1r4unk	=	0
00000B53                            	smpsVcDetune        $07, $03, $04, $03
00000B53 =00000007                M vcdt1	=	$07
00000B53 =00000003                M vcdt2	=	$03
00000B53 =00000004                M vcdt3	=	$04
00000B53 =00000003                M vcdt4	=	$03
00000B53                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000B53 =00000000                M vccf1	=	$00
00000B53 =00000000                M vccf2	=	$00
00000B53 =00000000                M vccf3	=	$00
00000B53 =00000000                M vccf4	=	$00
00000B53                            	smpsVcRateScale     $00, $00, $00, $00
00000B53 =00000000                M vcrs1	=	$00
00000B53 =00000000                M vcrs2	=	$00
00000B53 =00000000                M vcrs3	=	$00
00000B53 =00000000                M vcrs4	=	$00
00000B53                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000B53 =0000001F                M vcar1	=	$1f
00000B53 =0000001F                M vcar2	=	$1f
00000B53 =0000001F                M vcar3	=	$1f
00000B53 =0000001F                M vcar4	=	$1f
00000B53                            	smpsVcAmpMod        $00, $00, $00, $00
00000B53 =00000000                M vcam1	=	$00
00000B53 =00000000                M vcam2	=	$00
00000B53 =00000000                M vcam3	=	$00
00000B53 =00000000                M vcam4	=	$00
00000B53                            	smpsVcDecayRate1    $0D, $0A, $01, $12
00000B53 =0000000D                M vcd1r1	=	$0d
00000B53 =0000000A                M vcd1r2	=	$0a
00000B53 =00000001                M vcd1r3	=	$01
00000B53 =00000012                M vcd1r4	=	$12
00000B53                            	smpsVcDecayRate2    $0C, $01, $01, $00
00000B53 =0000000C                M vcd2r1	=	$0c
00000B53 =00000001                M vcd2r2	=	$01
00000B53 =00000001                M vcd2r3	=	$01
00000B53 =00000000                M vcd2r4	=	$00
00000B53                            	smpsVcDecayLevel    $0F, $02, $0C, $00
00000B53 =0000000F                M vcdl1	=	$0f
00000B53 =00000002                M vcdl2	=	$02
00000B53 =0000000C                M vcdl3	=	$0c
00000B53 =00000000                M vcdl4	=	$00
00000B53                            	smpsVcReleaseRate   $06, $03, $03, $00
00000B53 =00000006                M vcrr1	=	$06
00000B53 =00000003                M vcrr2	=	$03
00000B53 =00000003                M vcrr3	=	$03
00000B53 =00000000                M vcrr4	=	$00
00000B53                            	smpsVcTotalLevel    $03, $07, $1C, $08
00000B53 =00000003                M vctl1	=	$03
00000B53 =00000007                M vctl2	=	$07
00000B53 =0000001C                M vctl3	=	$1c
00000B53 =00000008                M vctl4	=	$08
00000B53 32                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000B54 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000B54 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000B54 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000B54 =00000080                M vctlmask1	=	$80
00000B54 3030 4070                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000B58 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000B5C 120A 010D                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000B60 0001 010C                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000B64 0023 C3F6                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000B68 0807 1C83                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000B6C                            
00000B6C                            ;	Voice $01
00000B6C                            ;	$05
00000B6C                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$12, $0C, $0C, $0C
00000B6C                            ;	$12, $08, $08, $08, 	$1F, $5F, $5F, $5F, 	$07, $80, $80, $80
00000B6C                            	smpsVcAlgorithm     $05
00000B6C =00000005                M vcalgorithm	=	$05
00000B6C                            	smpsVcFeedback      $00
00000B6C =00000000                M vcfeedback	=	$00
00000B6C                            	smpsVcUnusedBits    $00
00000B6C =00000000                M vcunusedbits	=	$00
00000B6C =00000000                M vcd1r1unk	=	0
00000B6C =00000000                M vcd1r2unk	=	0
00000B6C =00000000                M vcd1r3unk	=	0
00000B6C =00000000                M vcd1r4unk	=	0
00000B6C                            	smpsVcDetune        $00, $00, $00, $00
00000B6C =00000000                M vcdt1	=	$00
00000B6C =00000000                M vcdt2	=	$00
00000B6C =00000000                M vcdt3	=	$00
00000B6C =00000000                M vcdt4	=	$00
00000B6C                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000B6C =00000000                M vccf1	=	$00
00000B6C =00000000                M vccf2	=	$00
00000B6C =00000000                M vccf3	=	$00
00000B6C =00000000                M vccf4	=	$00
00000B6C                            	smpsVcRateScale     $00, $00, $00, $00
00000B6C =00000000                M vcrs1	=	$00
00000B6C =00000000                M vcrs2	=	$00
00000B6C =00000000                M vcrs3	=	$00
00000B6C =00000000                M vcrs4	=	$00
00000B6C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000B6C =0000001F                M vcar1	=	$1f
00000B6C =0000001F                M vcar2	=	$1f
00000B6C =0000001F                M vcar3	=	$1f
00000B6C =0000001F                M vcar4	=	$1f
00000B6C                            	smpsVcAmpMod        $00, $00, $00, $00
00000B6C =00000000                M vcam1	=	$00
00000B6C =00000000                M vcam2	=	$00
00000B6C =00000000                M vcam3	=	$00
00000B6C =00000000                M vcam4	=	$00
00000B6C                            	smpsVcDecayRate1    $0C, $0C, $0C, $12
00000B6C =0000000C                M vcd1r1	=	$0c
00000B6C =0000000C                M vcd1r2	=	$0c
00000B6C =0000000C                M vcd1r3	=	$0c
00000B6C =00000012                M vcd1r4	=	$12
00000B6C                            	smpsVcDecayRate2    $08, $08, $08, $12
00000B6C =00000008                M vcd2r1	=	$08
00000B6C =00000008                M vcd2r2	=	$08
00000B6C =00000008                M vcd2r3	=	$08
00000B6C =00000012                M vcd2r4	=	$12
00000B6C                            	smpsVcDecayLevel    $05, $05, $05, $01
00000B6C =00000005                M vcdl1	=	$05
00000B6C =00000005                M vcdl2	=	$05
00000B6C =00000005                M vcdl3	=	$05
00000B6C =00000001                M vcdl4	=	$01
00000B6C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000B6C =0000000F                M vcrr1	=	$0f
00000B6C =0000000F                M vcrr2	=	$0f
00000B6C =0000000F                M vcrr3	=	$0f
00000B6C =0000000F                M vcrr4	=	$0f
00000B6C                            	smpsVcTotalLevel    $80, $80, $80, $07
00000B6C =00000080                M vctl1	=	$80
00000B6C =00000080                M vctl2	=	$80
00000B6C =00000080                M vctl3	=	$80
00000B6C =00000007                M vctl4	=	$07
00000B6C 05                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000B6D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000B6D =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000B6D =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000B6D =00000080                M vctlmask1	=	$80
00000B6D 0000 0000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000B71 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000B75 120C 0C0C                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000B79 1208 0808                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000B7D 1F5F 5F5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000B81 0780 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000B85                            
00000B85                            Sound5A:	include "sound/sfx/DA - Gloop.asm"
00000B85                            Sound5A_Gloop_Header:
00000B85                            	smpsHeaderStartSong 2, 1
00000B85 =00000B85                M songstart_2939	equ	offset(*)
00000B85                            	smpsHeaderVoice     Sound5A_Gloop_Voices
00000B85                          M 	z80_ptr	sound5a_gloop_voices
00000B85 0000                     M 	dc.w	(((sound5a_gloop_voices)<<8)&$ff00)|(((sound5a_gloop_voices)>>8)&$ff)|$80
00000B87                            	smpsHeaderTempoSFX  $01
00000B87 01                       M 	dc.b	$01
00000B88                            	smpsHeaderChanSFX   $01
00000B88 01                       M 	dc.b	$01
00000B89                            
00000B89                            	smpsHeaderSFXChannel cFM5, Sound5A_Gloop_FM5,	$00, $00
00000B89 8005                     M 	dc.b	$80,cfm5
00000B8B                          M 	z80_ptr	sound5a_gloop_fm5
00000B8B 0000                     M 	dc.w	(((sound5a_gloop_fm5)<<8)&$ff00)|(((sound5a_gloop_fm5)>>8)&$ff)|$80
00000B8D 0000                     M 	dc.b	$00,$00
00000B8F                            
00000B8F                            ; FM5 Data
00000B8F                            Sound5A_Gloop_FM5:
00000B8F                            	smpsSetvoice        $00
00000B8F EF00                     M 	dc.b	$ef,$00
00000B91                            	smpsModSet          $01, $01, $7F, $F1
00000B91 F001 017F F1             M 	dc.b	$f0,$01,$01,$7f,$f1
00000B96 AA0A                       	dc.b	nF3, $0A
00000B98                            	smpsStop
00000B98 F2                       M 	dc.b	$f2
00000B99                            
00000B99                            Sound5A_Gloop_Voices:
00000B99                            ;	Voice $00
00000B99                            ;	$47
00000B99                            ;	$03, $02, $02, $04, 	$5F, $5F, $5F, $5F, 	$0E, $11, $1A, $0A
00000B99                            ;	$09, $0A, $0A, $0A, 	$4F, $3F, $3F, $3F, 	$7F, $80, $80, $A3
00000B99                            	smpsVcAlgorithm     $07
00000B99 =00000007                M vcalgorithm	=	$07
00000B99                            	smpsVcFeedback      $00
00000B99 =00000000                M vcfeedback	=	$00
00000B99                            	smpsVcUnusedBits    $01
00000B99 =00000001                M vcunusedbits	=	$01
00000B99 =00000000                M vcd1r1unk	=	0
00000B99 =00000000                M vcd1r2unk	=	0
00000B99 =00000000                M vcd1r3unk	=	0
00000B99 =00000000                M vcd1r4unk	=	0
00000B99                            	smpsVcDetune        $00, $00, $00, $00
00000B99 =00000000                M vcdt1	=	$00
00000B99 =00000000                M vcdt2	=	$00
00000B99 =00000000                M vcdt3	=	$00
00000B99 =00000000                M vcdt4	=	$00
00000B99                            	smpsVcCoarseFreq    $04, $02, $02, $03
00000B99 =00000004                M vccf1	=	$04
00000B99 =00000002                M vccf2	=	$02
00000B99 =00000002                M vccf3	=	$02
00000B99 =00000003                M vccf4	=	$03
00000B99                            	smpsVcRateScale     $01, $01, $01, $01
00000B99 =00000001                M vcrs1	=	$01
00000B99 =00000001                M vcrs2	=	$01
00000B99 =00000001                M vcrs3	=	$01
00000B99 =00000001                M vcrs4	=	$01
00000B99                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000B99 =0000001F                M vcar1	=	$1f
00000B99 =0000001F                M vcar2	=	$1f
00000B99 =0000001F                M vcar3	=	$1f
00000B99 =0000001F                M vcar4	=	$1f
00000B99                            	smpsVcAmpMod        $00, $00, $00, $00
00000B99 =00000000                M vcam1	=	$00
00000B99 =00000000                M vcam2	=	$00
00000B99 =00000000                M vcam3	=	$00
00000B99 =00000000                M vcam4	=	$00
00000B99                            	smpsVcDecayRate1    $0A, $1A, $11, $0E
00000B99 =0000000A                M vcd1r1	=	$0a
00000B99 =0000001A                M vcd1r2	=	$1a
00000B99 =00000011                M vcd1r3	=	$11
00000B99 =0000000E                M vcd1r4	=	$0e
00000B99                            	smpsVcDecayRate2    $0A, $0A, $0A, $09
00000B99 =0000000A                M vcd2r1	=	$0a
00000B99 =0000000A                M vcd2r2	=	$0a
00000B99 =0000000A                M vcd2r3	=	$0a
00000B99 =00000009                M vcd2r4	=	$09
00000B99                            	smpsVcDecayLevel    $03, $03, $03, $04
00000B99 =00000003                M vcdl1	=	$03
00000B99 =00000003                M vcdl2	=	$03
00000B99 =00000003                M vcdl3	=	$03
00000B99 =00000004                M vcdl4	=	$04
00000B99                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000B99 =0000000F                M vcrr1	=	$0f
00000B99 =0000000F                M vcrr2	=	$0f
00000B99 =0000000F                M vcrr3	=	$0f
00000B99 =0000000F                M vcrr4	=	$0f
00000B99                            	smpsVcTotalLevel    $A3, $80, $80, $7F
00000B99 =000000A3                M vctl1	=	$a3
00000B99 =00000080                M vctl2	=	$80
00000B99 =00000080                M vctl3	=	$80
00000B99 =0000007F                M vctl4	=	$7f
00000B99 47                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000B9A =FFFFFF80                M vctlmask4	=	((vcalgorithm=7)<<7)
00000B9A =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000B9A =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000B9A =00000080                M vctlmask1	=	$80
00000B9A 0302 0204                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000B9E 5F5F 5F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000BA2 0E1A 110A                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000BA6 090A 0A0A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000BAA 4F3F 3F3F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000BAE FF80 80A3                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000BB2                            
00000BB2                            Sound5B:	include "sound/sfx/DB - Pre-Arrow Firing.asm"
00000BB2                            Sound5B_PreArrowFiring_Header:
00000BB2                            	smpsHeaderStartSong 2
00000BB2 =00000BB2                M songstart_2962	equ	offset(*)
00000BB2                            	smpsHeaderVoice     Sound5B_PreArrowFiring_Voices
00000BB2                          M 	z80_ptr	sound5b_prearrowfiring_voices
00000BB2 0000                     M 	dc.w	(((sound5b_prearrowfiring_voices)<<8)&$ff00)|(((sound5b_prearrowfiring_voices)>>8)&$ff)|$80
00000BB4                            	smpsHeaderTempoSFX  $01
00000BB4 01                       M 	dc.b	$01
00000BB5                            	smpsHeaderChanSFX   $01
00000BB5 01                       M 	dc.b	$01
00000BB6                            
00000BB6                            	smpsHeaderSFXChannel cFM5, Sound5B_PreArrowFiring_FM5,	$00, $00
00000BB6 8005                     M 	dc.b	$80,cfm5
00000BB8                          M 	z80_ptr	sound5b_prearrowfiring_fm5
00000BB8 0000                     M 	dc.w	(((sound5b_prearrowfiring_fm5)<<8)&$ff00)|(((sound5b_prearrowfiring_fm5)>>8)&$ff)|$80
00000BBA 0000                     M 	dc.b	$00,$00
00000BBC                            
00000BBC                            ; FM5 Data
00000BBC                            Sound5B_PreArrowFiring_FM5:
00000BBC                            	smpsSetvoice        $00
00000BBC EF00                     M 	dc.b	$ef,$00
00000BBE 8002 A501 E7               	dc.b	nRst, $02, nC3, $01, smpsNoAttack
00000BC3                            
00000BC3                            Sound5B_PreArrowFiring_Loop00:
00000BC3 01E7                       	dc.b	$01, smpsNoAttack
00000BC5                            	smpsAlterVol        $02
00000BC5 E602                     M 	dc.b	$e6,$02
00000BC7                            	smpsLoop            $00, $05, Sound5B_PreArrowFiring_Loop00
00000BC7 F700 05                  M 	dc.b	$f7,$00,$05
00000BCA                          M 	z80_ptr	sound5b_prearrowfiring_loop00
00000BCA 0000                     M 	dc.w	(((sound5b_prearrowfiring_loop00)<<8)&$ff00)|(((sound5b_prearrowfiring_loop00)>>8)&$ff)|$80
00000BCC                            	smpsStop
00000BCC F2                       M 	dc.b	$f2
00000BCD                            
00000BCD                            Sound5B_PreArrowFiring_Voices:
00000BCD                            ;	Voice $00
00000BCD                            ;	$38
00000BCD                            ;	$0F, $0F, $0F, $0F, 	$1F, $1F, $1F, $0E, 	$00, $00, $00, $00
00000BCD                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $1F, 	$00, $00, $00, $80
00000BCD                            	smpsVcAlgorithm     $00
00000BCD =00000000                M vcalgorithm	=	$00
00000BCD                            	smpsVcFeedback      $07
00000BCD =00000007                M vcfeedback	=	$07
00000BCD                            	smpsVcUnusedBits    $00
00000BCD =00000000                M vcunusedbits	=	$00
00000BCD =00000000                M vcd1r1unk	=	0
00000BCD =00000000                M vcd1r2unk	=	0
00000BCD =00000000                M vcd1r3unk	=	0
00000BCD =00000000                M vcd1r4unk	=	0
00000BCD                            	smpsVcDetune        $00, $00, $00, $00
00000BCD =00000000                M vcdt1	=	$00
00000BCD =00000000                M vcdt2	=	$00
00000BCD =00000000                M vcdt3	=	$00
00000BCD =00000000                M vcdt4	=	$00
00000BCD                            	smpsVcCoarseFreq    $0F, $0F, $0F, $0F
00000BCD =0000000F                M vccf1	=	$0f
00000BCD =0000000F                M vccf2	=	$0f
00000BCD =0000000F                M vccf3	=	$0f
00000BCD =0000000F                M vccf4	=	$0f
00000BCD                            	smpsVcRateScale     $00, $00, $00, $00
00000BCD =00000000                M vcrs1	=	$00
00000BCD =00000000                M vcrs2	=	$00
00000BCD =00000000                M vcrs3	=	$00
00000BCD =00000000                M vcrs4	=	$00
00000BCD                            	smpsVcAttackRate    $0E, $1F, $1F, $1F
00000BCD =0000000E                M vcar1	=	$0e
00000BCD =0000001F                M vcar2	=	$1f
00000BCD =0000001F                M vcar3	=	$1f
00000BCD =0000001F                M vcar4	=	$1f
00000BCD                            	smpsVcAmpMod        $00, $00, $00, $00
00000BCD =00000000                M vcam1	=	$00
00000BCD =00000000                M vcam2	=	$00
00000BCD =00000000                M vcam3	=	$00
00000BCD =00000000                M vcam4	=	$00
00000BCD                            	smpsVcDecayRate1    $00, $00, $00, $00
00000BCD =00000000                M vcd1r1	=	$00
00000BCD =00000000                M vcd1r2	=	$00
00000BCD =00000000                M vcd1r3	=	$00
00000BCD =00000000                M vcd1r4	=	$00
00000BCD                            	smpsVcDecayRate2    $00, $00, $00, $00
00000BCD =00000000                M vcd2r1	=	$00
00000BCD =00000000                M vcd2r2	=	$00
00000BCD =00000000                M vcd2r3	=	$00
00000BCD =00000000                M vcd2r4	=	$00
00000BCD                            	smpsVcDecayLevel    $01, $00, $00, $00
00000BCD =00000001                M vcdl1	=	$01
00000BCD =00000000                M vcdl2	=	$00
00000BCD =00000000                M vcdl3	=	$00
00000BCD =00000000                M vcdl4	=	$00
00000BCD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000BCD =0000000F                M vcrr1	=	$0f
00000BCD =0000000F                M vcrr2	=	$0f
00000BCD =0000000F                M vcrr3	=	$0f
00000BCD =0000000F                M vcrr4	=	$0f
00000BCD                            	smpsVcTotalLevel    $00, $00, $00, $00
00000BCD =00000000                M vctl1	=	$00
00000BCD =00000000                M vctl2	=	$00
00000BCD =00000000                M vctl3	=	$00
00000BCD =00000000                M vctl4	=	$00
00000BCD 38                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000BCE =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000BCE =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000BCE =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000BCE =00000080                M vctlmask1	=	$80
00000BCE 0F0F 0F0F                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000BD2 1F1F 1F0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000BD6 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000BDA 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000BDE 0F0F 0F1F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000BE2 0000 0080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000BE6                            
00000BE6                            Sound5C:	include "sound/sfx/DC - Fire.asm"
00000BE6                            Sound5C_Fire_Header:
00000BE6                            	smpsHeaderStartSong 2
00000BE6 =00000BE6                M songstart_2987	equ	offset(*)
00000BE6                            	smpsHeaderVoice     Sound5C_Fire_Voices
00000BE6                          M 	z80_ptr	sound5c_fire_voices
00000BE6 0000                     M 	dc.w	(((sound5c_fire_voices)<<8)&$ff00)|(((sound5c_fire_voices)>>8)&$ff)|$80
00000BE8                            	smpsHeaderTempoSFX  $01
00000BE8 01                       M 	dc.b	$01
00000BE9                            	smpsHeaderChanSFX   $02
00000BE9 02                       M 	dc.b	$02
00000BEA                            
00000BEA                            	smpsHeaderSFXChannel cFM4, Sound5C_Fire_FM4,	$00, $0E
00000BEA 8004                     M 	dc.b	$80,cfm4
00000BEC                          M 	z80_ptr	sound5c_fire_fm4
00000BEC 0000                     M 	dc.w	(((sound5c_fire_fm4)<<8)&$ff00)|(((sound5c_fire_fm4)>>8)&$ff)|$80
00000BEE 000E                     M 	dc.b	$00,$0e
00000BF0                            	smpsHeaderSFXChannel cPSG3, Sound5C_Fire_PSG3,	$00, $00
00000BF0 80C0                     M 	dc.b	$80,cpsg3
00000BF2                          M 	z80_ptr	sound5c_fire_psg3
00000BF2 0000                     M 	dc.w	(((sound5c_fire_psg3)<<8)&$ff00)|(((sound5c_fire_psg3)>>8)&$ff)|$80
00000BF4 0000                     M 	dc.b	$00,$00
00000BF6                            
00000BF6                            ; FM4 Data
00000BF6                            Sound5C_Fire_FM4:
00000BF6                            	smpsSetvoice        $00
00000BF6 EF00                     M 	dc.b	$ef,$00
00000BF8 8540                       	dc.b	nE0, $40
00000BFA                            
00000BFA                            Sound5C_Fire_Loop00:
00000BFA E704                       	dc.b	smpsNoAttack, $04
00000BFC                            	smpsAlterVol        $04
00000BFC E604                     M 	dc.b	$e6,$04
00000BFE                            	smpsLoop            $00, $0A, Sound5C_Fire_Loop00
00000BFE F700 0A                  M 	dc.b	$f7,$00,$0a
00000C01                          M 	z80_ptr	sound5c_fire_loop00
00000C01 0000                     M 	dc.w	(((sound5c_fire_loop00)<<8)&$ff00)|(((sound5c_fire_loop00)>>8)&$ff)|$80
00000C03                            	smpsStop
00000C03 F2                       M 	dc.b	$f2
00000C04                            
00000C04                            ; PSG3 Data
00000C04                            Sound5C_Fire_PSG3:
00000C04                            	smpsPSGvoice        $00
00000C04 F500                     M 	dc.b	$f5,$00
00000C06                            	smpsPSGform         $E7
00000C06 F3E7                     M 	dc.b	$f3,$e7
00000C08 A740                       	dc.b	nD3, $40
00000C0A                            
00000C0A                            Sound5C_Fire_Loop01:
00000C0A E708                       	dc.b	smpsNoAttack, $08
00000C0C                            	smpsAlterVol        $01
00000C0C E601                     M 	dc.b	$e6,$01
00000C0E                            	smpsLoop            $00, $05, Sound5C_Fire_Loop01
00000C0E F700 05                  M 	dc.b	$f7,$00,$05
00000C11                          M 	z80_ptr	sound5c_fire_loop01
00000C11 0000                     M 	dc.w	(((sound5c_fire_loop01)<<8)&$ff00)|(((sound5c_fire_loop01)>>8)&$ff)|$80
00000C13                            	smpsStop
00000C13 F2                       M 	dc.b	$f2
00000C14                            
00000C14                            Sound5C_Fire_Voices:
00000C14                            ;	Voice $00
00000C14                            ;	$FA
00000C14                            ;	$12, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
00000C14                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$81, $14, $8E, $80
00000C14                            	smpsVcAlgorithm     $02
00000C14 =00000002                M vcalgorithm	=	$02
00000C14                            	smpsVcFeedback      $07
00000C14 =00000007                M vcfeedback	=	$07
00000C14                            	smpsVcUnusedBits    $03
00000C14 =00000003                M vcunusedbits	=	$03
00000C14 =00000000                M vcd1r1unk	=	0
00000C14 =00000000                M vcd1r2unk	=	0
00000C14 =00000000                M vcd1r3unk	=	0
00000C14 =00000000                M vcd1r4unk	=	0
00000C14                            	smpsVcDetune        $00, $00, $00, $01
00000C14 =00000000                M vcdt1	=	$00
00000C14 =00000000                M vcdt2	=	$00
00000C14 =00000000                M vcdt3	=	$00
00000C14 =00000001                M vcdt4	=	$01
00000C14                            	smpsVcCoarseFreq    $01, $01, $01, $02
00000C14 =00000001                M vccf1	=	$01
00000C14 =00000001                M vccf2	=	$01
00000C14 =00000001                M vccf3	=	$01
00000C14 =00000002                M vccf4	=	$02
00000C14                            	smpsVcRateScale     $00, $00, $00, $00
00000C14 =00000000                M vcrs1	=	$00
00000C14 =00000000                M vcrs2	=	$00
00000C14 =00000000                M vcrs3	=	$00
00000C14 =00000000                M vcrs4	=	$00
00000C14                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000C14 =0000001F                M vcar1	=	$1f
00000C14 =0000001F                M vcar2	=	$1f
00000C14 =0000001F                M vcar3	=	$1f
00000C14 =0000001F                M vcar4	=	$1f
00000C14                            	smpsVcAmpMod        $00, $00, $00, $00
00000C14 =00000000                M vcam1	=	$00
00000C14 =00000000                M vcam2	=	$00
00000C14 =00000000                M vcam3	=	$00
00000C14 =00000000                M vcam4	=	$00
00000C14                            	smpsVcDecayRate1    $00, $00, $00, $00
00000C14 =00000000                M vcd1r1	=	$00
00000C14 =00000000                M vcd1r2	=	$00
00000C14 =00000000                M vcd1r3	=	$00
00000C14 =00000000                M vcd1r4	=	$00
00000C14                            	smpsVcDecayRate2    $00, $00, $00, $00
00000C14 =00000000                M vcd2r1	=	$00
00000C14 =00000000                M vcd2r2	=	$00
00000C14 =00000000                M vcd2r3	=	$00
00000C14 =00000000                M vcd2r4	=	$00
00000C14                            	smpsVcDecayLevel    $00, $00, $00, $00
00000C14 =00000000                M vcdl1	=	$00
00000C14 =00000000                M vcdl2	=	$00
00000C14 =00000000                M vcdl3	=	$00
00000C14 =00000000                M vcdl4	=	$00
00000C14                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000C14 =0000000F                M vcrr1	=	$0f
00000C14 =0000000F                M vcrr2	=	$0f
00000C14 =0000000F                M vcrr3	=	$0f
00000C14 =0000000F                M vcrr4	=	$0f
00000C14                            	smpsVcTotalLevel    $00, $8E, $14, $81
00000C14 =00000000                M vctl1	=	$00
00000C14 =0000008E                M vctl2	=	$8e
00000C14 =00000014                M vctl3	=	$14
00000C14 =00000081                M vctl4	=	$81
00000C14 FA                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000C15 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000C15 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000C15 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000C15 =00000080                M vctlmask1	=	$80
00000C15 1201 0101                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000C19 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000C1D 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000C21 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000C25 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000C29 818E 1480                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000C2D                            
00000C2D                            Sound5D:	include "sound/sfx/DD - Arrow Stick.asm"
00000C2D                            Sound5D_ArrowStick_Header:
00000C2D                            	smpsHeaderStartSong 2
00000C2D =00000C2D                M songstart_3020	equ	offset(*)
00000C2D                            	smpsHeaderVoice     Sound5D_ArrowStick_Voices
00000C2D                          M 	z80_ptr	sound5d_arrowstick_voices
00000C2D 0000                     M 	dc.w	(((sound5d_arrowstick_voices)<<8)&$ff00)|(((sound5d_arrowstick_voices)>>8)&$ff)|$80
00000C2F                            	smpsHeaderTempoSFX  $01
00000C2F 01                       M 	dc.b	$01
00000C30                            	smpsHeaderChanSFX   $01
00000C30 01                       M 	dc.b	$01
00000C31                            
00000C31                            	smpsHeaderSFXChannel cFM5, Sound5D_ArrowStick_FM5,	$00, $00
00000C31 8005                     M 	dc.b	$80,cfm5
00000C33                          M 	z80_ptr	sound5d_arrowstick_fm5
00000C33 0000                     M 	dc.w	(((sound5d_arrowstick_fm5)<<8)&$ff00)|(((sound5d_arrowstick_fm5)>>8)&$ff)|$80
00000C35 0000                     M 	dc.b	$00,$00
00000C37                            
00000C37                            ; FM5 Data
00000C37                            Sound5D_ArrowStick_FM5:
00000C37                            	smpsSetvoice        $00
00000C37 EF00                     M 	dc.b	$ef,$00
00000C39 C004                       	dc.b	nEb5, $04
00000C3B                            	smpsStop
00000C3B F2                       M 	dc.b	$f2
00000C3C                            
00000C3C                            Sound5D_ArrowStick_Voices:
00000C3C                            ;	Voice $00
00000C3C                            ;	$28
00000C3C                            ;	$2F, $5F, $37, $2B, 	$1F, $1F, $1F, $1F, 	$15, $15, $15, $13
00000C3C                            ;	$13, $0C, $0D, $10, 	$2F, $2F, $3F, $2F, 	$00, $10, $1F, $80
00000C3C                            	smpsVcAlgorithm     $00
00000C3C =00000000                M vcalgorithm	=	$00
00000C3C                            	smpsVcFeedback      $05
00000C3C =00000005                M vcfeedback	=	$05
00000C3C                            	smpsVcUnusedBits    $00
00000C3C =00000000                M vcunusedbits	=	$00
00000C3C =00000000                M vcd1r1unk	=	0
00000C3C =00000000                M vcd1r2unk	=	0
00000C3C =00000000                M vcd1r3unk	=	0
00000C3C =00000000                M vcd1r4unk	=	0
00000C3C                            	smpsVcDetune        $02, $03, $05, $02
00000C3C =00000002                M vcdt1	=	$02
00000C3C =00000003                M vcdt2	=	$03
00000C3C =00000005                M vcdt3	=	$05
00000C3C =00000002                M vcdt4	=	$02
00000C3C                            	smpsVcCoarseFreq    $0B, $07, $0F, $0F
00000C3C =0000000B                M vccf1	=	$0b
00000C3C =00000007                M vccf2	=	$07
00000C3C =0000000F                M vccf3	=	$0f
00000C3C =0000000F                M vccf4	=	$0f
00000C3C                            	smpsVcRateScale     $00, $00, $00, $00
00000C3C =00000000                M vcrs1	=	$00
00000C3C =00000000                M vcrs2	=	$00
00000C3C =00000000                M vcrs3	=	$00
00000C3C =00000000                M vcrs4	=	$00
00000C3C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000C3C =0000001F                M vcar1	=	$1f
00000C3C =0000001F                M vcar2	=	$1f
00000C3C =0000001F                M vcar3	=	$1f
00000C3C =0000001F                M vcar4	=	$1f
00000C3C                            	smpsVcAmpMod        $00, $00, $00, $00
00000C3C =00000000                M vcam1	=	$00
00000C3C =00000000                M vcam2	=	$00
00000C3C =00000000                M vcam3	=	$00
00000C3C =00000000                M vcam4	=	$00
00000C3C                            	smpsVcDecayRate1    $13, $15, $15, $15
00000C3C =00000013                M vcd1r1	=	$13
00000C3C =00000015                M vcd1r2	=	$15
00000C3C =00000015                M vcd1r3	=	$15
00000C3C =00000015                M vcd1r4	=	$15
00000C3C                            	smpsVcDecayRate2    $10, $0D, $0C, $13
00000C3C =00000010                M vcd2r1	=	$10
00000C3C =0000000D                M vcd2r2	=	$0d
00000C3C =0000000C                M vcd2r3	=	$0c
00000C3C =00000013                M vcd2r4	=	$13
00000C3C                            	smpsVcDecayLevel    $02, $03, $02, $02
00000C3C =00000002                M vcdl1	=	$02
00000C3C =00000003                M vcdl2	=	$03
00000C3C =00000002                M vcdl3	=	$02
00000C3C =00000002                M vcdl4	=	$02
00000C3C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000C3C =0000000F                M vcrr1	=	$0f
00000C3C =0000000F                M vcrr2	=	$0f
00000C3C =0000000F                M vcrr3	=	$0f
00000C3C =0000000F                M vcrr4	=	$0f
00000C3C                            	smpsVcTotalLevel    $00, $1F, $10, $00
00000C3C =00000000                M vctl1	=	$00
00000C3C =0000001F                M vctl2	=	$1f
00000C3C =00000010                M vctl3	=	$10
00000C3C =00000000                M vctl4	=	$00
00000C3C 28                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000C3D =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000C3D =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000C3D =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000C3D =00000080                M vctlmask1	=	$80
00000C3D 2F37 5F2B                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000C41 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000C45 1515 1513                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000C49 130D 0C10                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000C4D 2F3F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000C51 001F 1080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000C55                            
00000C55                            Sound5E:	include "sound/sfx/DE - Helicopter.asm"
00000C55                            Sound5E_WingFortress_Header:
00000C55                            	smpsHeaderStartSong 2
00000C55 =00000C55                M songstart_3042	equ	offset(*)
00000C55                            	smpsHeaderVoice     Sound5E_WingFortress_Voices
00000C55                          M 	z80_ptr	sound5e_wingfortress_voices
00000C55 0000                     M 	dc.w	(((sound5e_wingfortress_voices)<<8)&$ff00)|(((sound5e_wingfortress_voices)>>8)&$ff)|$80
00000C57                            	smpsHeaderTempoSFX  $01
00000C57 01                       M 	dc.b	$01
00000C58                            	smpsHeaderChanSFX   $01
00000C58 01                       M 	dc.b	$01
00000C59                            
00000C59                            	smpsHeaderSFXChannel cFM3, Sound5E_WingFortress_FM3,	$14, $05
00000C59 8002                     M 	dc.b	$80,cfm3
00000C5B                          M 	z80_ptr	sound5e_wingfortress_fm3
00000C5B 0000                     M 	dc.w	(((sound5e_wingfortress_fm3)<<8)&$ff00)|(((sound5e_wingfortress_fm3)>>8)&$ff)|$80
00000C5D 1405                     M 	dc.b	$14,$05
00000C5F                            
00000C5F                            ; FM3 Data
00000C5F                            Sound5E_WingFortress_FM3:
00000C5F                            	smpsSetvoice        $00
00000C5F EF00                     M 	dc.b	$ef,$00
00000C61                            
00000C61                            Sound5E_WingFortress_Loop00:
00000C61 9502 9501                  	dc.b	nAb1, $02, nAb1, $01
00000C65                            	smpsLoop            $00, $13, Sound5E_WingFortress_Loop00
00000C65 F700 13                  M 	dc.b	$f7,$00,$13
00000C68                          M 	z80_ptr	sound5e_wingfortress_loop00
00000C68 0000                     M 	dc.w	(((sound5e_wingfortress_loop00)<<8)&$ff00)|(((sound5e_wingfortress_loop00)>>8)&$ff)|$80
00000C6A                            
00000C6A                            Sound5E_WingFortress_Loop01:
00000C6A 9502 9501                  	dc.b	nAb1, $02, nAb1, $01
00000C6E                            	smpsAlterVol        $01
00000C6E E601                     M 	dc.b	$e6,$01
00000C70                            	smpsLoop            $00, $1B, Sound5E_WingFortress_Loop01
00000C70 F700 1B                  M 	dc.b	$f7,$00,$1b
00000C73                          M 	z80_ptr	sound5e_wingfortress_loop01
00000C73 0000                     M 	dc.w	(((sound5e_wingfortress_loop01)<<8)&$ff00)|(((sound5e_wingfortress_loop01)>>8)&$ff)|$80
00000C75                            	smpsStop
00000C75 F2                       M 	dc.b	$f2
00000C76                            
00000C76                            Sound5E_WingFortress_Voices:
00000C76                            ;	Voice $00
00000C76                            ;	$35
00000C76                            ;	$30, $40, $44, $51, 	$1F, $1F, $1F, $1F, 	$10, $13, $00, $15
00000C76                            ;	$1F, $1F, $00, $1A, 	$7F, $7F, $0F, $5F, 	$02, $80, $A8, $80
00000C76                            	smpsVcAlgorithm     $05
00000C76 =00000005                M vcalgorithm	=	$05
00000C76                            	smpsVcFeedback      $06
00000C76 =00000006                M vcfeedback	=	$06
00000C76                            	smpsVcUnusedBits    $00
00000C76 =00000000                M vcunusedbits	=	$00
00000C76 =00000000                M vcd1r1unk	=	0
00000C76 =00000000                M vcd1r2unk	=	0
00000C76 =00000000                M vcd1r3unk	=	0
00000C76 =00000000                M vcd1r4unk	=	0
00000C76                            	smpsVcDetune        $05, $04, $04, $03
00000C76 =00000005                M vcdt1	=	$05
00000C76 =00000004                M vcdt2	=	$04
00000C76 =00000004                M vcdt3	=	$04
00000C76 =00000003                M vcdt4	=	$03
00000C76                            	smpsVcCoarseFreq    $01, $04, $00, $00
00000C76 =00000001                M vccf1	=	$01
00000C76 =00000004                M vccf2	=	$04
00000C76 =00000000                M vccf3	=	$00
00000C76 =00000000                M vccf4	=	$00
00000C76                            	smpsVcRateScale     $00, $00, $00, $00
00000C76 =00000000                M vcrs1	=	$00
00000C76 =00000000                M vcrs2	=	$00
00000C76 =00000000                M vcrs3	=	$00
00000C76 =00000000                M vcrs4	=	$00
00000C76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000C76 =0000001F                M vcar1	=	$1f
00000C76 =0000001F                M vcar2	=	$1f
00000C76 =0000001F                M vcar3	=	$1f
00000C76 =0000001F                M vcar4	=	$1f
00000C76                            	smpsVcAmpMod        $00, $00, $00, $00
00000C76 =00000000                M vcam1	=	$00
00000C76 =00000000                M vcam2	=	$00
00000C76 =00000000                M vcam3	=	$00
00000C76 =00000000                M vcam4	=	$00
00000C76                            	smpsVcDecayRate1    $15, $00, $13, $10
00000C76 =00000015                M vcd1r1	=	$15
00000C76 =00000000                M vcd1r2	=	$00
00000C76 =00000013                M vcd1r3	=	$13
00000C76 =00000010                M vcd1r4	=	$10
00000C76                            	smpsVcDecayRate2    $1A, $00, $1F, $1F
00000C76 =0000001A                M vcd2r1	=	$1a
00000C76 =00000000                M vcd2r2	=	$00
00000C76 =0000001F                M vcd2r3	=	$1f
00000C76 =0000001F                M vcd2r4	=	$1f
00000C76                            	smpsVcDecayLevel    $05, $00, $07, $07
00000C76 =00000005                M vcdl1	=	$05
00000C76 =00000000                M vcdl2	=	$00
00000C76 =00000007                M vcdl3	=	$07
00000C76 =00000007                M vcdl4	=	$07
00000C76                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000C76 =0000000F                M vcrr1	=	$0f
00000C76 =0000000F                M vcrr2	=	$0f
00000C76 =0000000F                M vcrr3	=	$0f
00000C76 =0000000F                M vcrr4	=	$0f
00000C76                            	smpsVcTotalLevel    $00, $28, $00, $02
00000C76 =00000000                M vctl1	=	$00
00000C76 =00000028                M vctl2	=	$28
00000C76 =00000000                M vctl3	=	$00
00000C76 =00000002                M vctl4	=	$02
00000C76 35                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000C77 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000C77 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000C77 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000C77 =00000080                M vctlmask1	=	$80
00000C77 3044 4051                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000C7B 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000C7F 1000 1315                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000C83 1F00 1F1A                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000C87 7F0F 7F5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000C8B 02A8 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000C8F                            
00000C8F                            Sound5F:	include "sound/sfx/DF - Super Transform.asm"
00000C8F                            Sound5F_SuperTransform_Header:
00000C8F                            	smpsHeaderStartSong 2
00000C8F =00000C8F                M songstart_3069	equ	offset(*)
00000C8F                            	smpsHeaderVoice     Sound5F_SuperTransform_Voices
00000C8F                          M 	z80_ptr	sound5f_supertransform_voices
00000C8F 0000                     M 	dc.w	(((sound5f_supertransform_voices)<<8)&$ff00)|(((sound5f_supertransform_voices)>>8)&$ff)|$80
00000C91                            	smpsHeaderTempoSFX  $01
00000C91 01                       M 	dc.b	$01
00000C92                            	smpsHeaderChanSFX   $03
00000C92 03                       M 	dc.b	$03
00000C93                            
00000C93                            	smpsHeaderSFXChannel cFM5, Sound5F_SuperTransform_FM5,	$00, $00
00000C93 8005                     M 	dc.b	$80,cfm5
00000C95                          M 	z80_ptr	sound5f_supertransform_fm5
00000C95 0000                     M 	dc.w	(((sound5f_supertransform_fm5)<<8)&$ff00)|(((sound5f_supertransform_fm5)>>8)&$ff)|$80
00000C97 0000                     M 	dc.b	$00,$00
00000C99                            	smpsHeaderSFXChannel cPSG3, Sound5F_6C_PSG3,	$00, $00
00000C99 80C0                     M 	dc.b	$80,cpsg3
00000C9B                          M 	z80_ptr	sound5f_6c_psg3
00000C9B 0000                     M 	dc.w	(((sound5f_6c_psg3)<<8)&$ff00)|(((sound5f_6c_psg3)>>8)&$ff)|$80
00000C9D 0000                     M 	dc.b	$00,$00
00000C9F                            	smpsHeaderSFXChannel cPSG2, Sound5F_6C_PSG2,	$00, $00
00000C9F 80A0                     M 	dc.b	$80,cpsg2
00000CA1                          M 	z80_ptr	sound5f_6c_psg2
00000CA1 0000                     M 	dc.w	(((sound5f_6c_psg2)<<8)&$ff00)|(((sound5f_6c_psg2)>>8)&$ff)|$80
00000CA3 0000                     M 	dc.b	$00,$00
00000CA5                            
00000CA5                            ; FM5 Data
00000CA5                            Sound5F_SuperTransform_FM5:
00000CA5                            	smpsSetvoice        $00
00000CA5 EF00                     M 	dc.b	$ef,$00
00000CA7                            	smpsModSet          $01, $01, $C5, $1A
00000CA7 F001 01C5 1A             M 	dc.b	$f0,$01,$01,$c5,$1a
00000CAC CD07                       	dc.b	nE6, $07
00000CAE                            	smpsAlterVol        $0A
00000CAE E60A                     M 	dc.b	$e6,$0a
00000CB0 8006                       	dc.b	nRst, $06
00000CB2                            	smpsSetvoice        $01
00000CB2 EF01                     M 	dc.b	$ef,$01
00000CB4                            	smpsModSet          $01, $01, $11, $FF
00000CB4 F001 0111 FF             M 	dc.b	$f0,$01,$01,$11,$ff
00000CB9 A228                       	dc.b	nA2, $28
00000CBB                            
00000CBB                            Sound5F_SuperTransform_Loop00:
00000CBB E703                       	dc.b	smpsNoAttack, $03
00000CBD                            	smpsAlterVol        $03
00000CBD E603                     M 	dc.b	$e6,$03
00000CBF                            	smpsLoop            $00, $05, Sound5F_SuperTransform_Loop00
00000CBF F700 05                  M 	dc.b	$f7,$00,$05
00000CC2                          M 	z80_ptr	sound5f_supertransform_loop00
00000CC2 0000                     M 	dc.w	(((sound5f_supertransform_loop00)<<8)&$ff00)|(((sound5f_supertransform_loop00)>>8)&$ff)|$80
00000CC4                            	smpsStop
00000CC4 F2                       M 	dc.b	$f2
00000CC5                            
00000CC5                            ; PSG3 Data
00000CC5                            Sound5F_6C_PSG3:
00000CC5 8007                       	dc.b	nRst, $07
00000CC7                            	smpsModSet          $01, $02, $05, $FF
00000CC7 F001 0205 FF             M 	dc.b	$f0,$01,$02,$05,$ff
00000CCC                            	smpsPSGform         $E7
00000CCC F3E7                     M 	dc.b	$f3,$e7
00000CCE BB1D                       	dc.b	nBb4, $1D
00000CD0                            
00000CD0                            Sound5F_SuperTransform_Loop03:
00000CD0 E707                       	dc.b	smpsNoAttack, $07
00000CD2                            	smpsPSGAlterVol     $01
00000CD2 EC01                     M 	dc.b	$ec,$01
00000CD4                            	smpsLoop            $00, $10, Sound5F_SuperTransform_Loop03
00000CD4 F700 10                  M 	dc.b	$f7,$00,$10
00000CD7                          M 	z80_ptr	sound5f_supertransform_loop03
00000CD7 0000                     M 	dc.w	(((sound5f_supertransform_loop03)<<8)&$ff00)|(((sound5f_supertransform_loop03)>>8)&$ff)|$80
00000CD9                            	smpsStop
00000CD9 F2                       M 	dc.b	$f2
00000CDA                            
00000CDA                            ; PSG2 Data
00000CDA                            Sound5F_6C_PSG2:
00000CDA 8016                       	dc.b	nRst, $16
00000CDC                            	smpsPSGvoice        fTone_03
00000CDC F503                     M 	dc.b	$f5,ftone_03
00000CDE                            
00000CDE                            Sound5F_SuperTransform_Loop01:
00000CDE BF04 C1C3                  	dc.b	nD5, $04, nE5, nFs5
00000CE2                            	smpsPSGAlterVol     $01
00000CE2 EC01                     M 	dc.b	$ec,$01
00000CE4                            	smpsAlterPitch      $FF
00000CE4 E9FF                     M 	dc.b	$e9,$ff
00000CE6                            	smpsLoop            $00, $05, Sound5F_SuperTransform_Loop01
00000CE6 F700 05                  M 	dc.b	$f7,$00,$05
00000CE9                          M 	z80_ptr	sound5f_supertransform_loop01
00000CE9 0000                     M 	dc.w	(((sound5f_supertransform_loop01)<<8)&$ff00)|(((sound5f_supertransform_loop01)>>8)&$ff)|$80
00000CEB                            
00000CEB                            Sound5F_SuperTransform_Loop02:
00000CEB BF04 C1C3                  	dc.b	nD5, $04, nE5, nFs5
00000CEF                            	smpsPSGAlterVol     $01
00000CEF EC01                     M 	dc.b	$ec,$01
00000CF1                            	smpsAlterPitch      $01
00000CF1 E901                     M 	dc.b	$e9,$01
00000CF3                            	smpsLoop            $00, $07, Sound5F_SuperTransform_Loop02
00000CF3 F700 07                  M 	dc.b	$f7,$00,$07
00000CF6                          M 	z80_ptr	sound5f_supertransform_loop02
00000CF6 0000                     M 	dc.w	(((sound5f_supertransform_loop02)<<8)&$ff00)|(((sound5f_supertransform_loop02)>>8)&$ff)|$80
00000CF8                            	smpsStop
00000CF8 F2                       M 	dc.b	$f2
00000CF9                            
00000CF9                            Sound5F_SuperTransform_Voices:
00000CF9                            ;	Voice $00
00000CF9                            ;	$FD
00000CF9                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
00000CF9                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
00000CF9                            	smpsVcAlgorithm     $05
00000CF9 =00000005                M vcalgorithm	=	$05
00000CF9                            	smpsVcFeedback      $07
00000CF9 =00000007                M vcfeedback	=	$07
00000CF9                            	smpsVcUnusedBits    $03
00000CF9 =00000003                M vcunusedbits	=	$03
00000CF9 =00000000                M vcd1r1unk	=	0
00000CF9 =00000000                M vcd1r2unk	=	0
00000CF9 =00000000                M vcd1r3unk	=	0
00000CF9 =00000000                M vcd1r4unk	=	0
00000CF9                            	smpsVcDetune        $00, $00, $00, $00
00000CF9 =00000000                M vcdt1	=	$00
00000CF9 =00000000                M vcdt2	=	$00
00000CF9 =00000000                M vcdt3	=	$00
00000CF9 =00000000                M vcdt4	=	$00
00000CF9                            	smpsVcCoarseFreq    $00, $00, $03, $09
00000CF9 =00000000                M vccf1	=	$00
00000CF9 =00000000                M vccf2	=	$00
00000CF9 =00000003                M vccf3	=	$03
00000CF9 =00000009                M vccf4	=	$09
00000CF9                            	smpsVcRateScale     $00, $00, $00, $00
00000CF9 =00000000                M vcrs1	=	$00
00000CF9 =00000000                M vcrs2	=	$00
00000CF9 =00000000                M vcrs3	=	$00
00000CF9 =00000000                M vcrs4	=	$00
00000CF9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000CF9 =0000001F                M vcar1	=	$1f
00000CF9 =0000001F                M vcar2	=	$1f
00000CF9 =0000001F                M vcar3	=	$1f
00000CF9 =0000001F                M vcar4	=	$1f
00000CF9                            	smpsVcAmpMod        $00, $00, $00, $00
00000CF9 =00000000                M vcam1	=	$00
00000CF9 =00000000                M vcam2	=	$00
00000CF9 =00000000                M vcam3	=	$00
00000CF9 =00000000                M vcam4	=	$00
00000CF9                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
00000CF9 =0000000C                M vcd1r1	=	$0c
00000CF9 =0000000C                M vcd1r2	=	$0c
00000CF9 =0000000C                M vcd1r3	=	$0c
00000CF9 =00000010                M vcd1r4	=	$10
00000CF9                            	smpsVcDecayRate2    $05, $10, $1F, $0B
00000CF9 =00000005                M vcd2r1	=	$05
00000CF9 =00000010                M vcd2r2	=	$10
00000CF9 =0000001F                M vcd2r3	=	$1f
00000CF9 =0000000B                M vcd2r4	=	$0b
00000CF9                            	smpsVcDecayLevel    $02, $04, $02, $01
00000CF9 =00000002                M vcdl1	=	$02
00000CF9 =00000004                M vcdl2	=	$04
00000CF9 =00000002                M vcdl3	=	$02
00000CF9 =00000001                M vcdl4	=	$01
00000CF9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000CF9 =0000000F                M vcrr1	=	$0f
00000CF9 =0000000F                M vcrr2	=	$0f
00000CF9 =0000000F                M vcrr3	=	$0f
00000CF9 =0000000F                M vcrr4	=	$0f
00000CF9                            	smpsVcTotalLevel    $0E, $12, $04, $09
00000CF9 =0000000E                M vctl1	=	$0e
00000CF9 =00000012                M vctl2	=	$12
00000CF9 =00000004                M vctl3	=	$04
00000CF9 =00000009                M vctl4	=	$09
00000CF9 FD                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000CFA =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000CFA =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000CFA =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000CFA =00000080                M vctlmask1	=	$80
00000CFA 0900 0300                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000CFE 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000D02 100C 0C0C                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000D06 0B10 1F05                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000D0A 1F4F 2F2F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000D0E 0992 848E                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000D12                            
00000D12                            ;	Voice $01
00000D12                            ;	$3A
00000D12                            ;	$70, $04, $30, $01, 	$0F, $19, $14, $16, 	$08, $0B, $0A, $05
00000D12                            ;	$03, $03, $03, $05, 	$1F, $8F, $6F, $5F, 	$1F, $1F, $22, $80
00000D12                            	smpsVcAlgorithm     $02
00000D12 =00000002                M vcalgorithm	=	$02
00000D12                            	smpsVcFeedback      $07
00000D12 =00000007                M vcfeedback	=	$07
00000D12                            	smpsVcUnusedBits    $00
00000D12 =00000000                M vcunusedbits	=	$00
00000D12 =00000000                M vcd1r1unk	=	0
00000D12 =00000000                M vcd1r2unk	=	0
00000D12 =00000000                M vcd1r3unk	=	0
00000D12 =00000000                M vcd1r4unk	=	0
00000D12                            	smpsVcDetune        $00, $03, $00, $07
00000D12 =00000000                M vcdt1	=	$00
00000D12 =00000003                M vcdt2	=	$03
00000D12 =00000000                M vcdt3	=	$00
00000D12 =00000007                M vcdt4	=	$07
00000D12                            	smpsVcCoarseFreq    $01, $00, $04, $00
00000D12 =00000001                M vccf1	=	$01
00000D12 =00000000                M vccf2	=	$00
00000D12 =00000004                M vccf3	=	$04
00000D12 =00000000                M vccf4	=	$00
00000D12                            	smpsVcRateScale     $00, $00, $00, $00
00000D12 =00000000                M vcrs1	=	$00
00000D12 =00000000                M vcrs2	=	$00
00000D12 =00000000                M vcrs3	=	$00
00000D12 =00000000                M vcrs4	=	$00
00000D12                            	smpsVcAttackRate    $16, $14, $19, $0F
00000D12 =00000016                M vcar1	=	$16
00000D12 =00000014                M vcar2	=	$14
00000D12 =00000019                M vcar3	=	$19
00000D12 =0000000F                M vcar4	=	$0f
00000D12                            	smpsVcAmpMod        $00, $00, $00, $00
00000D12 =00000000                M vcam1	=	$00
00000D12 =00000000                M vcam2	=	$00
00000D12 =00000000                M vcam3	=	$00
00000D12 =00000000                M vcam4	=	$00
00000D12                            	smpsVcDecayRate1    $05, $0A, $0B, $08
00000D12 =00000005                M vcd1r1	=	$05
00000D12 =0000000A                M vcd1r2	=	$0a
00000D12 =0000000B                M vcd1r3	=	$0b
00000D12 =00000008                M vcd1r4	=	$08
00000D12                            	smpsVcDecayRate2    $05, $03, $03, $03
00000D12 =00000005                M vcd2r1	=	$05
00000D12 =00000003                M vcd2r2	=	$03
00000D12 =00000003                M vcd2r3	=	$03
00000D12 =00000003                M vcd2r4	=	$03
00000D12                            	smpsVcDecayLevel    $05, $06, $08, $01
00000D12 =00000005                M vcdl1	=	$05
00000D12 =00000006                M vcdl2	=	$06
00000D12 =00000008                M vcdl3	=	$08
00000D12 =00000001                M vcdl4	=	$01
00000D12                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000D12 =0000000F                M vcrr1	=	$0f
00000D12 =0000000F                M vcrr2	=	$0f
00000D12 =0000000F                M vcrr3	=	$0f
00000D12 =0000000F                M vcrr4	=	$0f
00000D12                            	smpsVcTotalLevel    $00, $22, $1F, $1F
00000D12 =00000000                M vctl1	=	$00
00000D12 =00000022                M vctl2	=	$22
00000D12 =0000001F                M vctl3	=	$1f
00000D12 =0000001F                M vctl4	=	$1f
00000D12 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000D13 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000D13 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000D13 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000D13 =00000080                M vctlmask1	=	$80
00000D13 7030 0401                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000D17 0F14 1916                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000D1B 080A 0B05                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000D1F 0303 0305                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000D23 1F6F 8F5F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000D27 1F22 1F80                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000D2B                            
00000D2B                            Sound60:	include "sound/sfx/E0 - Spin Dash Rev.asm"
00000D2B                            Sound60_SpindashRev_Header:
00000D2B                            	smpsHeaderStartSong 2, 1
00000D2B =00000D2B                M songstart_3131	equ	offset(*)
00000D2B                            	smpsHeaderVoice     Sound60_SpindashRev_Voices
00000D2B                          M 	z80_ptr	sound60_spindashrev_voices
00000D2B 0000                     M 	dc.w	(((sound60_spindashrev_voices)<<8)&$ff00)|(((sound60_spindashrev_voices)>>8)&$ff)|$80
00000D2D                            	smpsHeaderTempoSFX  $01
00000D2D 01                       M 	dc.b	$01
00000D2E                            	smpsHeaderChanSFX   $01
00000D2E 01                       M 	dc.b	$01
00000D2F                            
00000D2F                            	smpsHeaderSFXChannel cFM5, Sound60_SpindashRev_FM5,	$FE, $00
00000D2F 8005                     M 	dc.b	$80,cfm5
00000D31                          M 	z80_ptr	sound60_spindashrev_fm5
00000D31 0000                     M 	dc.w	(((sound60_spindashrev_fm5)<<8)&$ff00)|(((sound60_spindashrev_fm5)>>8)&$ff)|$80
00000D33 FE00                     M 	dc.b	$fe,$00
00000D35                            
00000D35                            ; FM5 Data
00000D35                            Sound60_SpindashRev_FM5:
00000D35                            	smpsSetvoice        $00
00000D35 EF00                     M 	dc.b	$ef,$00
00000D37                            	smpsModSet          $00, $01, $20, $F6
00000D37 F000 0120 F6             M 	dc.b	$f0,$00,$01,$20,$f6
00000D3C C416 E7                    	dc.b	nG5, $16, smpsNoAttack
00000D3F                            	smpsModOff
00000D3F F4                       M 	dc.b	$f4
00000D40 D018 E7                    	dc.b	nG6, $18, smpsNoAttack
00000D43                            
00000D43                            Sound60_SpindashRev_Loop00:
00000D43 04E7                       	dc.b	$04, smpsNoAttack
00000D45                            	smpsAlterVol        $03
00000D45 E603                     M 	dc.b	$e6,$03
00000D47                            	smpsLoop            $00, $10, Sound60_SpindashRev_Loop00
00000D47 F700 10                  M 	dc.b	$f7,$00,$10
00000D4A                          M 	z80_ptr	sound60_spindashrev_loop00
00000D4A 0000                     M 	dc.w	(((sound60_spindashrev_loop00)<<8)&$ff00)|(((sound60_spindashrev_loop00)>>8)&$ff)|$80
00000D4C                            	smpsStop
00000D4C F2                       M 	dc.b	$f2
00000D4D                            
00000D4D                            Sound60_SpindashRev_Voices:
00000D4D                            ;	Voice $00
00000D4D                            ;	$34
00000D4D                            ;	$00, $0C, $03, $09, 	$9F, $8F, $8C, $95, 	$00, $00, $00, $00
00000D4D                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $00, $1D, $00
00000D4D                            	smpsVcAlgorithm     $04
00000D4D =00000004                M vcalgorithm	=	$04
00000D4D                            	smpsVcFeedback      $06
00000D4D =00000006                M vcfeedback	=	$06
00000D4D                            	smpsVcUnusedBits    $00
00000D4D =00000000                M vcunusedbits	=	$00
00000D4D =00000000                M vcd1r1unk	=	0
00000D4D =00000000                M vcd1r2unk	=	0
00000D4D =00000000                M vcd1r3unk	=	0
00000D4D =00000000                M vcd1r4unk	=	0
00000D4D                            	smpsVcDetune        $00, $00, $00, $00
00000D4D =00000000                M vcdt1	=	$00
00000D4D =00000000                M vcdt2	=	$00
00000D4D =00000000                M vcdt3	=	$00
00000D4D =00000000                M vcdt4	=	$00
00000D4D                            	smpsVcCoarseFreq    $09, $03, $0C, $00
00000D4D =00000009                M vccf1	=	$09
00000D4D =00000003                M vccf2	=	$03
00000D4D =0000000C                M vccf3	=	$0c
00000D4D =00000000                M vccf4	=	$00
00000D4D                            	smpsVcRateScale     $02, $02, $02, $02
00000D4D =00000002                M vcrs1	=	$02
00000D4D =00000002                M vcrs2	=	$02
00000D4D =00000002                M vcrs3	=	$02
00000D4D =00000002                M vcrs4	=	$02
00000D4D                            	smpsVcAttackRate    $15, $0C, $0F, $1F
00000D4D =00000015                M vcar1	=	$15
00000D4D =0000000C                M vcar2	=	$0c
00000D4D =0000000F                M vcar3	=	$0f
00000D4D =0000001F                M vcar4	=	$1f
00000D4D                            	smpsVcAmpMod        $00, $00, $00, $00
00000D4D =00000000                M vcam1	=	$00
00000D4D =00000000                M vcam2	=	$00
00000D4D =00000000                M vcam3	=	$00
00000D4D =00000000                M vcam4	=	$00
00000D4D                            	smpsVcDecayRate1    $00, $00, $00, $00
00000D4D =00000000                M vcd1r1	=	$00
00000D4D =00000000                M vcd1r2	=	$00
00000D4D =00000000                M vcd1r3	=	$00
00000D4D =00000000                M vcd1r4	=	$00
00000D4D                            	smpsVcDecayRate2    $00, $00, $00, $00
00000D4D =00000000                M vcd2r1	=	$00
00000D4D =00000000                M vcd2r2	=	$00
00000D4D =00000000                M vcd2r3	=	$00
00000D4D =00000000                M vcd2r4	=	$00
00000D4D                            	smpsVcDecayLevel    $00, $00, $00, $00
00000D4D =00000000                M vcdl1	=	$00
00000D4D =00000000                M vcdl2	=	$00
00000D4D =00000000                M vcdl3	=	$00
00000D4D =00000000                M vcdl4	=	$00
00000D4D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000D4D =0000000F                M vcrr1	=	$0f
00000D4D =0000000F                M vcrr2	=	$0f
00000D4D =0000000F                M vcrr3	=	$0f
00000D4D =0000000F                M vcrr4	=	$0f
00000D4D                            	smpsVcTotalLevel    $00, $1D, $00, $00
00000D4D =00000000                M vctl1	=	$00
00000D4D =0000001D                M vctl2	=	$1d
00000D4D =00000000                M vctl3	=	$00
00000D4D =00000000                M vctl4	=	$00
00000D4D 34                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000D4E =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000D4E =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000D4E =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000D4E =00000080                M vctlmask1	=	$80
00000D4E 0003 0C09                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000D52 9F8C 8F95                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000D56 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000D5A 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000D5E 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000D62 001D 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000D66                            
00000D66                            Sound61:	include "sound/sfx/E1 - Rumbling 2.asm"
00000D66                            Sound61_Rumbling2_Header:
00000D66                            	smpsHeaderStartSong 2, 1
00000D66 =00000D66                M songstart_3158	equ	offset(*)
00000D66                            	smpsHeaderVoice     Sound61_Rumbling2_Voices
00000D66                          M 	z80_ptr	sound61_rumbling2_voices
00000D66 0000                     M 	dc.w	(((sound61_rumbling2_voices)<<8)&$ff00)|(((sound61_rumbling2_voices)>>8)&$ff)|$80
00000D68                            	smpsHeaderTempoSFX  $01
00000D68 01                       M 	dc.b	$01
00000D69                            	smpsHeaderChanSFX   $01
00000D69 01                       M 	dc.b	$01
00000D6A                            
00000D6A                            	smpsHeaderSFXChannel cFM4, Sound61_Rumbling2_FM4,	$00, $04
00000D6A 8004                     M 	dc.b	$80,cfm4
00000D6C                          M 	z80_ptr	sound61_rumbling2_fm4
00000D6C 0000                     M 	dc.w	(((sound61_rumbling2_fm4)<<8)&$ff00)|(((sound61_rumbling2_fm4)>>8)&$ff)|$80
00000D6E 0004                     M 	dc.b	$00,$04
00000D70                            
00000D70                            ; FM4 Data
00000D70                            Sound61_Rumbling2_FM4:
00000D70 8001                       	dc.b	nRst, $01
00000D72                            	smpsSetvoice        $00
00000D72 EF00                     M 	dc.b	$ef,$00
00000D74                            	smpsModSet          $00, $01, $70, $06
00000D74 F000 0170 06             M 	dc.b	$f0,$00,$01,$70,$06
00000D79 8206 8508 8301 8205 8606+  	dc.b	nCs0, $06, nE0, $08, nD0, $01, nCs0, $05, nF0, $06, nAb0, $03
00000D85 8208 8804 8206             	dc.b	nCs0, $08, nG0, $04, nCs0, $06
00000D8B                            	smpsAlterVol        $02
00000D8B E602                     M 	dc.b	$e6,$02
00000D8D 8508                       	dc.b	nE0, $08
00000D8F                            	smpsAlterVol        $02
00000D8F E602                     M 	dc.b	$e6,$02
00000D91 8301                       	dc.b	nD0, $01
00000D93                            	smpsAlterVol        $02
00000D93 E602                     M 	dc.b	$e6,$02
00000D95 8205                       	dc.b	nCs0, $05
00000D97                            	smpsAlterVol        $02
00000D97 E602                     M 	dc.b	$e6,$02
00000D99 8606                       	dc.b	nF0, $06
00000D9B                            	smpsAlterVol        $02
00000D9B E602                     M 	dc.b	$e6,$02
00000D9D 8903                       	dc.b	nAb0, $03
00000D9F                            	smpsAlterVol        $02
00000D9F E602                     M 	dc.b	$e6,$02
00000DA1 8208                       	dc.b	nCs0, $08
00000DA3                            	smpsAlterVol        $02
00000DA3 E602                     M 	dc.b	$e6,$02
00000DA5 8804                       	dc.b	nG0, $04
00000DA7                            	smpsAlterVol        $02
00000DA7 E602                     M 	dc.b	$e6,$02
00000DA9                            	smpsStop
00000DA9 F2                       M 	dc.b	$f2
00000DAA                            
00000DAA                            Sound61_Rumbling2_Voices:
00000DAA                            ;	Voice $00
00000DAA                            ;	$32
00000DAA                            ;	$30, $50, $30, $30, 	$1F, $19, $0E, $0E, 	$07, $15, $12, $09
00000DAA                            ;	$0A, $1D, $09, $06, 	$E8, $0A, $03, $17, 	$07, $00, $00, $00
00000DAA                            	smpsVcAlgorithm     $02
00000DAA =00000002                M vcalgorithm	=	$02
00000DAA                            	smpsVcFeedback      $06
00000DAA =00000006                M vcfeedback	=	$06
00000DAA                            	smpsVcUnusedBits    $00
00000DAA =00000000                M vcunusedbits	=	$00
00000DAA =00000000                M vcd1r1unk	=	0
00000DAA =00000000                M vcd1r2unk	=	0
00000DAA =00000000                M vcd1r3unk	=	0
00000DAA =00000000                M vcd1r4unk	=	0
00000DAA                            	smpsVcDetune        $03, $03, $05, $03
00000DAA =00000003                M vcdt1	=	$03
00000DAA =00000003                M vcdt2	=	$03
00000DAA =00000005                M vcdt3	=	$05
00000DAA =00000003                M vcdt4	=	$03
00000DAA                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000DAA =00000000                M vccf1	=	$00
00000DAA =00000000                M vccf2	=	$00
00000DAA =00000000                M vccf3	=	$00
00000DAA =00000000                M vccf4	=	$00
00000DAA                            	smpsVcRateScale     $00, $00, $00, $00
00000DAA =00000000                M vcrs1	=	$00
00000DAA =00000000                M vcrs2	=	$00
00000DAA =00000000                M vcrs3	=	$00
00000DAA =00000000                M vcrs4	=	$00
00000DAA                            	smpsVcAttackRate    $0E, $0E, $19, $1F
00000DAA =0000000E                M vcar1	=	$0e
00000DAA =0000000E                M vcar2	=	$0e
00000DAA =00000019                M vcar3	=	$19
00000DAA =0000001F                M vcar4	=	$1f
00000DAA                            	smpsVcAmpMod        $00, $00, $00, $00
00000DAA =00000000                M vcam1	=	$00
00000DAA =00000000                M vcam2	=	$00
00000DAA =00000000                M vcam3	=	$00
00000DAA =00000000                M vcam4	=	$00
00000DAA                            	smpsVcDecayRate1    $09, $12, $15, $07
00000DAA =00000009                M vcd1r1	=	$09
00000DAA =00000012                M vcd1r2	=	$12
00000DAA =00000015                M vcd1r3	=	$15
00000DAA =00000007                M vcd1r4	=	$07
00000DAA                            	smpsVcDecayRate2    $06, $09, $1D, $0A
00000DAA =00000006                M vcd2r1	=	$06
00000DAA =00000009                M vcd2r2	=	$09
00000DAA =0000001D                M vcd2r3	=	$1d
00000DAA =0000000A                M vcd2r4	=	$0a
00000DAA                            	smpsVcDecayLevel    $01, $00, $00, $0E
00000DAA =00000001                M vcdl1	=	$01
00000DAA =00000000                M vcdl2	=	$00
00000DAA =00000000                M vcdl3	=	$00
00000DAA =0000000E                M vcdl4	=	$0e
00000DAA                            	smpsVcReleaseRate   $07, $03, $0A, $08
00000DAA =00000007                M vcrr1	=	$07
00000DAA =00000003                M vcrr2	=	$03
00000DAA =0000000A                M vcrr3	=	$0a
00000DAA =00000008                M vcrr4	=	$08
00000DAA                            	smpsVcTotalLevel    $00, $00, $00, $07
00000DAA =00000000                M vctl1	=	$00
00000DAA =00000000                M vctl2	=	$00
00000DAA =00000000                M vctl3	=	$00
00000DAA =00000007                M vctl4	=	$07
00000DAA 32                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000DAB =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000DAB =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000DAB =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000DAB =00000080                M vctlmask1	=	$80
00000DAB 3030 5030                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000DAF 1F0E 190E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000DB3 0712 1509                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000DB7 0A09 1D06                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000DBB E803 0A17                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000DBF 0700 0080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000DC3                            
00000DC3                            Sound62:	include "sound/sfx/E2 - CNZ Launch.asm"
00000DC3                            Sound62_CNZLaunch_Header:
00000DC3                            	smpsHeaderStartSong 2
00000DC3 =00000DC3                M songstart_3189	equ	offset(*)
00000DC3                            	smpsHeaderVoice     Sound62_CNZLaunch_Voices
00000DC3                          M 	z80_ptr	sound62_cnzlaunch_voices
00000DC3 0000                     M 	dc.w	(((sound62_cnzlaunch_voices)<<8)&$ff00)|(((sound62_cnzlaunch_voices)>>8)&$ff)|$80
00000DC5                            	smpsHeaderTempoSFX  $01
00000DC5 01                       M 	dc.b	$01
00000DC6                            	smpsHeaderChanSFX   $01
00000DC6 01                       M 	dc.b	$01
00000DC7                            
00000DC7                            	smpsHeaderSFXChannel cFM5, Sound62_CNZLaunch_FM5,	$FF, $00
00000DC7 8005                     M 	dc.b	$80,cfm5
00000DC9                          M 	z80_ptr	sound62_cnzlaunch_fm5
00000DC9 0000                     M 	dc.w	(((sound62_cnzlaunch_fm5)<<8)&$ff00)|(((sound62_cnzlaunch_fm5)>>8)&$ff)|$80
00000DCB FF00                     M 	dc.b	$ff,$00
00000DCD                            
00000DCD                            ; FM5 Data
00000DCD                            Sound62_CNZLaunch_FM5:
00000DCD                            	smpsSetvoice        $00
00000DCD EF00                     M 	dc.b	$ef,$00
00000DCF A605                       	dc.b	nCs3, $05
00000DD1                            	smpsModSet          $01, $01, $E7, $40
00000DD1 F001 01E7 40             M 	dc.b	$f0,$01,$01,$e7,$40
00000DD6                            
00000DD6                            Sound62_CNZLaunch_Loop00:
00000DD6 C402 E7                    	dc.b	nG5, $02, smpsNoAttack
00000DD9                            	smpsAlterVol        $01
00000DD9 E601                     M 	dc.b	$e6,$01
00000DDB                            	smpsLoop            $00, $12, Sound62_CNZLaunch_Loop00
00000DDB F700 12                  M 	dc.b	$f7,$00,$12
00000DDE                          M 	z80_ptr	sound62_cnzlaunch_loop00
00000DDE 0000                     M 	dc.w	(((sound62_cnzlaunch_loop00)<<8)&$ff00)|(((sound62_cnzlaunch_loop00)>>8)&$ff)|$80
00000DE0                            	smpsStop
00000DE0 F2                       M 	dc.b	$f2
00000DE1                            
00000DE1                            Sound62_CNZLaunch_Voices:
00000DE1                            ;	Voice $00
00000DE1                            ;	$34
00000DE1                            ;	$0C, $73, $10, $0C, 	$AF, $FF, $AC, $D5, 	$06, $02, $00, $01
00000DE1                            ;	$02, $04, $0A, $08, 	$BF, $BF, $BF, $BF, 	$00, $80, $08, $80
00000DE1                            	smpsVcAlgorithm     $04
00000DE1 =00000004                M vcalgorithm	=	$04
00000DE1                            	smpsVcFeedback      $06
00000DE1 =00000006                M vcfeedback	=	$06
00000DE1                            	smpsVcUnusedBits    $00
00000DE1 =00000000                M vcunusedbits	=	$00
00000DE1 =00000000                M vcd1r1unk	=	0
00000DE1 =00000000                M vcd1r2unk	=	0
00000DE1 =00000000                M vcd1r3unk	=	0
00000DE1 =00000000                M vcd1r4unk	=	0
00000DE1                            	smpsVcDetune        $00, $01, $07, $00
00000DE1 =00000000                M vcdt1	=	$00
00000DE1 =00000001                M vcdt2	=	$01
00000DE1 =00000007                M vcdt3	=	$07
00000DE1 =00000000                M vcdt4	=	$00
00000DE1                            	smpsVcCoarseFreq    $0C, $00, $03, $0C
00000DE1 =0000000C                M vccf1	=	$0c
00000DE1 =00000000                M vccf2	=	$00
00000DE1 =00000003                M vccf3	=	$03
00000DE1 =0000000C                M vccf4	=	$0c
00000DE1                            	smpsVcRateScale     $03, $02, $03, $02
00000DE1 =00000003                M vcrs1	=	$03
00000DE1 =00000002                M vcrs2	=	$02
00000DE1 =00000003                M vcrs3	=	$03
00000DE1 =00000002                M vcrs4	=	$02
00000DE1                            	smpsVcAttackRate    $15, $2C, $3F, $2F
00000DE1 =00000015                M vcar1	=	$15
00000DE1 =0000002C                M vcar2	=	$2c
00000DE1 =0000003F                M vcar3	=	$3f
00000DE1 =0000002F                M vcar4	=	$2f
00000DE1                            	smpsVcAmpMod        $00, $00, $00, $00
00000DE1 =00000000                M vcam1	=	$00
00000DE1 =00000000                M vcam2	=	$00
00000DE1 =00000000                M vcam3	=	$00
00000DE1 =00000000                M vcam4	=	$00
00000DE1                            	smpsVcDecayRate1    $01, $00, $02, $06
00000DE1 =00000001                M vcd1r1	=	$01
00000DE1 =00000000                M vcd1r2	=	$00
00000DE1 =00000002                M vcd1r3	=	$02
00000DE1 =00000006                M vcd1r4	=	$06
00000DE1                            	smpsVcDecayRate2    $08, $0A, $04, $02
00000DE1 =00000008                M vcd2r1	=	$08
00000DE1 =0000000A                M vcd2r2	=	$0a
00000DE1 =00000004                M vcd2r3	=	$04
00000DE1 =00000002                M vcd2r4	=	$02
00000DE1                            	smpsVcDecayLevel    $0B, $0B, $0B, $0B
00000DE1 =0000000B                M vcdl1	=	$0b
00000DE1 =0000000B                M vcdl2	=	$0b
00000DE1 =0000000B                M vcdl3	=	$0b
00000DE1 =0000000B                M vcdl4	=	$0b
00000DE1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000DE1 =0000000F                M vcrr1	=	$0f
00000DE1 =0000000F                M vcrr2	=	$0f
00000DE1 =0000000F                M vcrr3	=	$0f
00000DE1 =0000000F                M vcrr4	=	$0f
00000DE1                            	smpsVcTotalLevel    $00, $08, $00, $00
00000DE1 =00000000                M vctl1	=	$00
00000DE1 =00000008                M vctl2	=	$08
00000DE1 =00000000                M vctl3	=	$00
00000DE1 =00000000                M vctl4	=	$00
00000DE1 34                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000DE2 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000DE2 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000DE2 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000DE2 =00000080                M vctlmask1	=	$80
00000DE2 0C10 730C                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000DE6 AFAC FFD5                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000DEA 0600 0201                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000DEE 020A 0408                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000DF2 BFBF BFBF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000DF6 0008 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000DFA                            
00000DFA                            Sound63:	include "sound/sfx/E3 - Flipper.asm"
00000DFA                            Sound63_Flipper_Header:
00000DFA                            	smpsHeaderStartSong 2
00000DFA =00000DFA                M songstart_3215	equ	offset(*)
00000DFA                            	smpsHeaderVoice     Sound63_Flipper_Voices
00000DFA                          M 	z80_ptr	sound63_flipper_voices
00000DFA 0000                     M 	dc.w	(((sound63_flipper_voices)<<8)&$ff00)|(((sound63_flipper_voices)>>8)&$ff)|$80
00000DFC                            	smpsHeaderTempoSFX  $01
00000DFC 01                       M 	dc.b	$01
00000DFD                            	smpsHeaderChanSFX   $01
00000DFD 01                       M 	dc.b	$01
00000DFE                            
00000DFE                            	smpsHeaderSFXChannel cFM5, Sound63_Flipper_FM5,	$09, $07
00000DFE 8005                     M 	dc.b	$80,cfm5
00000E00                          M 	z80_ptr	sound63_flipper_fm5
00000E00 0000                     M 	dc.w	(((sound63_flipper_fm5)<<8)&$ff00)|(((sound63_flipper_fm5)>>8)&$ff)|$80
00000E02 0907                     M 	dc.b	$09,$07
00000E04                            
00000E04                            ; FM5 Data
00000E04                            Sound63_Flipper_FM5:
00000E04                            	smpsSetvoice        $00
00000E04 EF00                     M 	dc.b	$ef,$00
00000E06                            	smpsModSet          $01, $01, $04, $56
00000E06 F001 0104 56             M 	dc.b	$f0,$01,$01,$04,$56
00000E0B 9203 9A25                  	dc.b	nF1, $03, nCs2, $25
00000E0F                            	smpsStop
00000E0F F2                       M 	dc.b	$f2
00000E10                            
00000E10                            Sound63_Flipper_Voices:
00000E10                            ;	Voice $00
00000E10                            ;	$3D
00000E10                            ;	$12, $77, $10, $30, 	$5F, $5F, $5F, $5F, 	$0F, $00, $0A, $01
00000E10                            ;	$0A, $0D, $0A, $0D, 	$4F, $0F, $0F, $0F, 	$13, $80, $80, $80
00000E10                            	smpsVcAlgorithm     $05
00000E10 =00000005                M vcalgorithm	=	$05
00000E10                            	smpsVcFeedback      $07
00000E10 =00000007                M vcfeedback	=	$07
00000E10                            	smpsVcUnusedBits    $00
00000E10 =00000000                M vcunusedbits	=	$00
00000E10 =00000000                M vcd1r1unk	=	0
00000E10 =00000000                M vcd1r2unk	=	0
00000E10 =00000000                M vcd1r3unk	=	0
00000E10 =00000000                M vcd1r4unk	=	0
00000E10                            	smpsVcDetune        $03, $01, $07, $01
00000E10 =00000003                M vcdt1	=	$03
00000E10 =00000001                M vcdt2	=	$01
00000E10 =00000007                M vcdt3	=	$07
00000E10 =00000001                M vcdt4	=	$01
00000E10                            	smpsVcCoarseFreq    $00, $00, $07, $02
00000E10 =00000000                M vccf1	=	$00
00000E10 =00000000                M vccf2	=	$00
00000E10 =00000007                M vccf3	=	$07
00000E10 =00000002                M vccf4	=	$02
00000E10                            	smpsVcRateScale     $01, $01, $01, $01
00000E10 =00000001                M vcrs1	=	$01
00000E10 =00000001                M vcrs2	=	$01
00000E10 =00000001                M vcrs3	=	$01
00000E10 =00000001                M vcrs4	=	$01
00000E10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000E10 =0000001F                M vcar1	=	$1f
00000E10 =0000001F                M vcar2	=	$1f
00000E10 =0000001F                M vcar3	=	$1f
00000E10 =0000001F                M vcar4	=	$1f
00000E10                            	smpsVcAmpMod        $00, $00, $00, $00
00000E10 =00000000                M vcam1	=	$00
00000E10 =00000000                M vcam2	=	$00
00000E10 =00000000                M vcam3	=	$00
00000E10 =00000000                M vcam4	=	$00
00000E10                            	smpsVcDecayRate1    $01, $0A, $00, $0F
00000E10 =00000001                M vcd1r1	=	$01
00000E10 =0000000A                M vcd1r2	=	$0a
00000E10 =00000000                M vcd1r3	=	$00
00000E10 =0000000F                M vcd1r4	=	$0f
00000E10                            	smpsVcDecayRate2    $0D, $0A, $0D, $0A
00000E10 =0000000D                M vcd2r1	=	$0d
00000E10 =0000000A                M vcd2r2	=	$0a
00000E10 =0000000D                M vcd2r3	=	$0d
00000E10 =0000000A                M vcd2r4	=	$0a
00000E10                            	smpsVcDecayLevel    $00, $00, $00, $04
00000E10 =00000000                M vcdl1	=	$00
00000E10 =00000000                M vcdl2	=	$00
00000E10 =00000000                M vcdl3	=	$00
00000E10 =00000004                M vcdl4	=	$04
00000E10                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000E10 =0000000F                M vcrr1	=	$0f
00000E10 =0000000F                M vcrr2	=	$0f
00000E10 =0000000F                M vcrr3	=	$0f
00000E10 =0000000F                M vcrr4	=	$0f
00000E10                            	smpsVcTotalLevel    $00, $00, $00, $13
00000E10 =00000000                M vctl1	=	$00
00000E10 =00000000                M vctl2	=	$00
00000E10 =00000000                M vctl3	=	$00
00000E10 =00000013                M vctl4	=	$13
00000E10 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000E11 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000E11 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000E11 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000E11 =00000080                M vctlmask1	=	$80
00000E11 1210 7730                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000E15 5F5F 5F5F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000E19 0F0A 0001                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000E1D 0A0A 0D0D                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000E21 4F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000E25 1380 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000E29                            
00000E29                            Sound64:	include "sound/sfx/E4 - HTZ Lift Click.asm"
00000E29                            Sound64_HTZLiftClick_Header:
00000E29                            	smpsHeaderStartSong 2
00000E29 =00000E29                M songstart_3238	equ	offset(*)
00000E29                            	smpsHeaderVoice     Sound64_HTZLiftClick_Voices
00000E29                          M 	z80_ptr	sound64_htzliftclick_voices
00000E29 0000                     M 	dc.w	(((sound64_htzliftclick_voices)<<8)&$ff00)|(((sound64_htzliftclick_voices)>>8)&$ff)|$80
00000E2B                            	smpsHeaderTempoSFX  $01
00000E2B 01                       M 	dc.b	$01
00000E2C                            	smpsHeaderChanSFX   $01
00000E2C 01                       M 	dc.b	$01
00000E2D                            
00000E2D                            	smpsHeaderSFXChannel cFM5, Sound64_HTZLiftClick_FM5,	$11, $00
00000E2D 8005                     M 	dc.b	$80,cfm5
00000E2F                          M 	z80_ptr	sound64_htzliftclick_fm5
00000E2F 0000                     M 	dc.w	(((sound64_htzliftclick_fm5)<<8)&$ff00)|(((sound64_htzliftclick_fm5)>>8)&$ff)|$80
00000E31 1100                     M 	dc.b	$11,$00
00000E33                            
00000E33                            ; FM5 Data
00000E33                            Sound64_HTZLiftClick_FM5:
00000E33                            	smpsSetvoice        $00
00000E33 EF00                     M 	dc.b	$ef,$00
00000E35 C702                       	dc.b	nBb5, $02
00000E37                            	smpsStop
00000E37 F2                       M 	dc.b	$f2
00000E38                            
00000E38                            Sound64_HTZLiftClick_Voices:
00000E38                            ;	Voice $00
00000E38                            ;	$24
00000E38                            ;	$2A, $05, $02, $01, 	$1A, $10, $1F, $1F, 	$0F, $1F, $1F, $1F
00000E38                            ;	$0C, $11, $0D, $11, 	$0C, $09, $09, $0F, 	$0E, $80, $04, $80
00000E38                            	smpsVcAlgorithm     $04
00000E38 =00000004                M vcalgorithm	=	$04
00000E38                            	smpsVcFeedback      $04
00000E38 =00000004                M vcfeedback	=	$04
00000E38                            	smpsVcUnusedBits    $00
00000E38 =00000000                M vcunusedbits	=	$00
00000E38 =00000000                M vcd1r1unk	=	0
00000E38 =00000000                M vcd1r2unk	=	0
00000E38 =00000000                M vcd1r3unk	=	0
00000E38 =00000000                M vcd1r4unk	=	0
00000E38                            	smpsVcDetune        $00, $00, $00, $02
00000E38 =00000000                M vcdt1	=	$00
00000E38 =00000000                M vcdt2	=	$00
00000E38 =00000000                M vcdt3	=	$00
00000E38 =00000002                M vcdt4	=	$02
00000E38                            	smpsVcCoarseFreq    $01, $02, $05, $0A
00000E38 =00000001                M vccf1	=	$01
00000E38 =00000002                M vccf2	=	$02
00000E38 =00000005                M vccf3	=	$05
00000E38 =0000000A                M vccf4	=	$0a
00000E38                            	smpsVcRateScale     $00, $00, $00, $00
00000E38 =00000000                M vcrs1	=	$00
00000E38 =00000000                M vcrs2	=	$00
00000E38 =00000000                M vcrs3	=	$00
00000E38 =00000000                M vcrs4	=	$00
00000E38                            	smpsVcAttackRate    $1F, $1F, $10, $1A
00000E38 =0000001F                M vcar1	=	$1f
00000E38 =0000001F                M vcar2	=	$1f
00000E38 =00000010                M vcar3	=	$10
00000E38 =0000001A                M vcar4	=	$1a
00000E38                            	smpsVcAmpMod        $00, $00, $00, $00
00000E38 =00000000                M vcam1	=	$00
00000E38 =00000000                M vcam2	=	$00
00000E38 =00000000                M vcam3	=	$00
00000E38 =00000000                M vcam4	=	$00
00000E38                            	smpsVcDecayRate1    $1F, $1F, $1F, $0F
00000E38 =0000001F                M vcd1r1	=	$1f
00000E38 =0000001F                M vcd1r2	=	$1f
00000E38 =0000001F                M vcd1r3	=	$1f
00000E38 =0000000F                M vcd1r4	=	$0f
00000E38                            	smpsVcDecayRate2    $11, $0D, $11, $0C
00000E38 =00000011                M vcd2r1	=	$11
00000E38 =0000000D                M vcd2r2	=	$0d
00000E38 =00000011                M vcd2r3	=	$11
00000E38 =0000000C                M vcd2r4	=	$0c
00000E38                            	smpsVcDecayLevel    $00, $00, $00, $00
00000E38 =00000000                M vcdl1	=	$00
00000E38 =00000000                M vcdl2	=	$00
00000E38 =00000000                M vcdl3	=	$00
00000E38 =00000000                M vcdl4	=	$00
00000E38                            	smpsVcReleaseRate   $0F, $09, $09, $0C
00000E38 =0000000F                M vcrr1	=	$0f
00000E38 =00000009                M vcrr2	=	$09
00000E38 =00000009                M vcrr3	=	$09
00000E38 =0000000C                M vcrr4	=	$0c
00000E38                            	smpsVcTotalLevel    $00, $04, $00, $0E
00000E38 =00000000                M vctl1	=	$00
00000E38 =00000004                M vctl2	=	$04
00000E38 =00000000                M vctl3	=	$00
00000E38 =0000000E                M vctl4	=	$0e
00000E38 24                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000E39 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000E39 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000E39 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000E39 =00000080                M vctlmask1	=	$80
00000E39 2A02 0501                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000E3D 1A1F 101F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000E41 0F1F 1F1F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000E45 0C0D 1111                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000E49 0C09 090F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000E4D 0E04 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000E51                            
00000E51                            Sound65:	include "sound/sfx/E5 - Leaves.asm"
00000E51                            Sound65_Leaves_Header:
00000E51                            	smpsHeaderStartSong 2
00000E51 =00000E51                M songstart_3260	equ	offset(*)
00000E51                            	smpsHeaderVoice     Sound65_Leaves_Voices
00000E51                          M 	z80_ptr	sound65_leaves_voices
00000E51 0000                     M 	dc.w	(((sound65_leaves_voices)<<8)&$ff00)|(((sound65_leaves_voices)>>8)&$ff)|$80
00000E53                            	smpsHeaderTempoSFX  $01
00000E53 01                       M 	dc.b	$01
00000E54                            	smpsHeaderChanSFX   $01
00000E54 01                       M 	dc.b	$01
00000E55                            
00000E55                            	smpsHeaderSFXChannel cPSG3, Sound65_Leaves_PSG3,	$F8, $00
00000E55 80C0                     M 	dc.b	$80,cpsg3
00000E57                          M 	z80_ptr	sound65_leaves_psg3
00000E57 0000                     M 	dc.w	(((sound65_leaves_psg3)<<8)&$ff00)|(((sound65_leaves_psg3)>>8)&$ff)|$80
00000E59 F800                     M 	dc.b	$f8,$00
00000E5B                            
00000E5B                            ; PSG3 Data
00000E5B                            Sound65_Leaves_PSG3:
00000E5B                            	smpsPSGvoice        fTone_03
00000E5B F503                     M 	dc.b	$f5,ftone_03
00000E5D                            	smpsPSGform         $E7
00000E5D F3E7                     M 	dc.b	$f3,$e7
00000E5F CE03                       	dc.b	(nMaxPSG-$F8)&$FF, $03
00000E61                            	smpsPSGvoice        fTone_06
00000E61 F506                     M 	dc.b	$f5,ftone_06
00000E63 CE04                       	dc.b	(nMaxPSG-$F8)&$FF, $04
00000E65                            	smpsPSGAlterVol     $02
00000E65 EC02                     M 	dc.b	$ec,$02
00000E67 CE02                       	dc.b	(nMaxPSG-$F8)&$FF, $02
00000E69                            	smpsPSGvoice        fTone_03
00000E69 F503                     M 	dc.b	$f5,ftone_03
00000E6B                            	smpsPSGAlterVol     $FE
00000E6B ECFE                     M 	dc.b	$ec,$fe
00000E6D CE08 CE18                  	dc.b	(nMaxPSG-$F8)&$FF, $08, (nMaxPSG-$F8)&$FF, $18
00000E71                            	smpsStop
00000E71 F2                       M 	dc.b	$f2
00000E72                            
00000E72                            ; Song seems to not use any FM voices
00000E72                            Sound65_Leaves_Voices:
00000E72                            Sound66:	include "sound/sfx/E6 - Mega Mack Drop.asm"
00000E72                            Sound66_MegaMackDrop_Header:
00000E72                            	smpsHeaderStartSong 2
00000E72 =00000E72                M songstart_3274	equ	offset(*)
00000E72                            	smpsHeaderVoice     Sound66_MegaMackDrop_Voices
00000E72                          M 	z80_ptr	sound66_megamackdrop_voices
00000E72 0000                     M 	dc.w	(((sound66_megamackdrop_voices)<<8)&$ff00)|(((sound66_megamackdrop_voices)>>8)&$ff)|$80
00000E74                            	smpsHeaderTempoSFX  $01
00000E74 01                       M 	dc.b	$01
00000E75                            	smpsHeaderChanSFX   $02
00000E75 02                       M 	dc.b	$02
00000E76                            
00000E76                            	smpsHeaderSFXChannel cFM5, Sound66_MegaMackDrop_FM5,	$EE, $08
00000E76 8005                     M 	dc.b	$80,cfm5
00000E78                          M 	z80_ptr	sound66_megamackdrop_fm5
00000E78 0000                     M 	dc.w	(((sound66_megamackdrop_fm5)<<8)&$ff00)|(((sound66_megamackdrop_fm5)>>8)&$ff)|$80
00000E7A EE08                     M 	dc.b	$ee,$08
00000E7C                            	smpsHeaderSFXChannel cPSG3, Sound66_MegaMackDrop_PSG3,	$00, $00
00000E7C 80C0                     M 	dc.b	$80,cpsg3
00000E7E                          M 	z80_ptr	sound66_megamackdrop_psg3
00000E7E 0000                     M 	dc.w	(((sound66_megamackdrop_psg3)<<8)&$ff00)|(((sound66_megamackdrop_psg3)>>8)&$ff)|$80
00000E80 0000                     M 	dc.b	$00,$00
00000E82                            
00000E82                            ; PSG3 Data
00000E82                            Sound66_MegaMackDrop_PSG3:
00000E82                            	smpsPSGform         $E7
00000E82 F3E7                     M 	dc.b	$f3,$e7
00000E84                            	smpsPSGvoice        fTone_09
00000E84 F509                     M 	dc.b	$f5,ftone_09
00000E86 C636                       	dc.b	nMaxPSG, $36
00000E88                            	smpsStop
00000E88 F2                       M 	dc.b	$f2
00000E89                            
00000E89                            ; FM5 Data
00000E89                            Sound66_MegaMackDrop_FM5:
00000E89                            	smpsSetvoice        $00
00000E89 EF00                     M 	dc.b	$ef,$00
00000E8B 8001 9202 0202 30          	dc.b	nRst, $01, nF1, $02, $02, $02, $30
00000E92                            	smpsStop
00000E92 F2                       M 	dc.b	$f2
00000E93                            
00000E93                            Sound66_MegaMackDrop_Voices:
00000E93                            ;	Voice $00
00000E93                            ;	$32
00000E93                            ;	$33, $34, $17, $13, 	$0F, $1B, $0D, $17, 	$00, $02, $04, $0B
00000E93                            ;	$08, $08, $00, $09, 	$6F, $4F, $5F, $6F, 	$05, $00, $00, $80
00000E93                            	smpsVcAlgorithm     $02
00000E93 =00000002                M vcalgorithm	=	$02
00000E93                            	smpsVcFeedback      $06
00000E93 =00000006                M vcfeedback	=	$06
00000E93                            	smpsVcUnusedBits    $00
00000E93 =00000000                M vcunusedbits	=	$00
00000E93 =00000000                M vcd1r1unk	=	0
00000E93 =00000000                M vcd1r2unk	=	0
00000E93 =00000000                M vcd1r3unk	=	0
00000E93 =00000000                M vcd1r4unk	=	0
00000E93                            	smpsVcDetune        $01, $01, $03, $03
00000E93 =00000001                M vcdt1	=	$01
00000E93 =00000001                M vcdt2	=	$01
00000E93 =00000003                M vcdt3	=	$03
00000E93 =00000003                M vcdt4	=	$03
00000E93                            	smpsVcCoarseFreq    $03, $07, $04, $03
00000E93 =00000003                M vccf1	=	$03
00000E93 =00000007                M vccf2	=	$07
00000E93 =00000004                M vccf3	=	$04
00000E93 =00000003                M vccf4	=	$03
00000E93                            	smpsVcRateScale     $00, $00, $00, $00
00000E93 =00000000                M vcrs1	=	$00
00000E93 =00000000                M vcrs2	=	$00
00000E93 =00000000                M vcrs3	=	$00
00000E93 =00000000                M vcrs4	=	$00
00000E93                            	smpsVcAttackRate    $17, $0D, $1B, $0F
00000E93 =00000017                M vcar1	=	$17
00000E93 =0000000D                M vcar2	=	$0d
00000E93 =0000001B                M vcar3	=	$1b
00000E93 =0000000F                M vcar4	=	$0f
00000E93                            	smpsVcAmpMod        $00, $00, $00, $00
00000E93 =00000000                M vcam1	=	$00
00000E93 =00000000                M vcam2	=	$00
00000E93 =00000000                M vcam3	=	$00
00000E93 =00000000                M vcam4	=	$00
00000E93                            	smpsVcDecayRate1    $0B, $04, $02, $00
00000E93 =0000000B                M vcd1r1	=	$0b
00000E93 =00000004                M vcd1r2	=	$04
00000E93 =00000002                M vcd1r3	=	$02
00000E93 =00000000                M vcd1r4	=	$00
00000E93                            	smpsVcDecayRate2    $09, $00, $08, $08
00000E93 =00000009                M vcd2r1	=	$09
00000E93 =00000000                M vcd2r2	=	$00
00000E93 =00000008                M vcd2r3	=	$08
00000E93 =00000008                M vcd2r4	=	$08
00000E93                            	smpsVcDecayLevel    $06, $05, $04, $06
00000E93 =00000006                M vcdl1	=	$06
00000E93 =00000005                M vcdl2	=	$05
00000E93 =00000004                M vcdl3	=	$04
00000E93 =00000006                M vcdl4	=	$06
00000E93                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000E93 =0000000F                M vcrr1	=	$0f
00000E93 =0000000F                M vcrr2	=	$0f
00000E93 =0000000F                M vcrr3	=	$0f
00000E93 =0000000F                M vcrr4	=	$0f
00000E93                            	smpsVcTotalLevel    $00, $00, $00, $05
00000E93 =00000000                M vctl1	=	$00
00000E93 =00000000                M vctl2	=	$00
00000E93 =00000000                M vctl3	=	$00
00000E93 =00000005                M vctl4	=	$05
00000E93 32                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000E94 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000E94 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000E94 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000E94 =00000080                M vctlmask1	=	$80
00000E94 3317 3413                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000E98 0F0D 1B17                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000E9C 0004 020B                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000EA0 0800 0809                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000EA4 6F5F 4F6F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000EA8 0500 0080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000EAC                            
00000EAC                            Sound67:	include "sound/sfx/E7 - Drawbridge Move.asm"
00000EAC                            Sound67_DrawbridgeMove_Header:
00000EAC                            	smpsHeaderStartSong 2
00000EAC =00000EAC                M songstart_3301	equ	offset(*)
00000EAC                            	smpsHeaderVoice     Sound67_DrawbridgeMove_Voices
00000EAC                          M 	z80_ptr	sound67_drawbridgemove_voices
00000EAC 0000                     M 	dc.w	(((sound67_drawbridgemove_voices)<<8)&$ff00)|(((sound67_drawbridgemove_voices)>>8)&$ff)|$80
00000EAE                            	smpsHeaderTempoSFX  $01
00000EAE 01                       M 	dc.b	$01
00000EAF                            	smpsHeaderChanSFX   $01
00000EAF 01                       M 	dc.b	$01
00000EB0                            
00000EB0                            	smpsHeaderSFXChannel cPSG3, Sound67_DrawbridgeMove_PSG3,	$00, $00
00000EB0 80C0                     M 	dc.b	$80,cpsg3
00000EB2                          M 	z80_ptr	sound67_drawbridgemove_psg3
00000EB2 0000                     M 	dc.w	(((sound67_drawbridgemove_psg3)<<8)&$ff00)|(((sound67_drawbridgemove_psg3)>>8)&$ff)|$80
00000EB4 0000                     M 	dc.b	$00,$00
00000EB6                            
00000EB6                            ; PSG3 Data
00000EB6                            Sound67_DrawbridgeMove_PSG3:
00000EB6                            	smpsPSGvoice        fTone_06
00000EB6 F506                     M 	dc.b	$f5,ftone_06
00000EB8                            	smpsPSGform         $E7
00000EB8 F3E7                     M 	dc.b	$f3,$e7
00000EBA 900A 940A 980A 9C0A A00A+  	dc.b	nEb1, $0A, nG1, $0A, nB1, $0A, nEb2, $0A, nG2, $0A, nB2, $08
00000EC6 A808 AC08 B008             	dc.b	nEb3, $08, nG3, $08, nB3, $08
00000ECC                            	smpsStop
00000ECC F2                       M 	dc.b	$f2
00000ECD                            
00000ECD                            ; Song seems to not use any FM voices
00000ECD                            Sound67_DrawbridgeMove_Voices:
00000ECD                            Sound68:	include "sound/sfx/E8 - Quick Door Slam.asm"
00000ECD                            Sound68_QuickDoorSlam_Header:
00000ECD                            	smpsHeaderStartSong 2
00000ECD =00000ECD                M songstart_3311	equ	offset(*)
00000ECD                            	smpsHeaderVoice     Sound68_QuickDoorSlam_Voices
00000ECD                          M 	z80_ptr	sound68_quickdoorslam_voices
00000ECD 0000                     M 	dc.w	(((sound68_quickdoorslam_voices)<<8)&$ff00)|(((sound68_quickdoorslam_voices)>>8)&$ff)|$80
00000ECF                            	smpsHeaderTempoSFX  $01
00000ECF 01                       M 	dc.b	$01
00000ED0                            	smpsHeaderChanSFX   $01
00000ED0 01                       M 	dc.b	$01
00000ED1                            
00000ED1                            	smpsHeaderSFXChannel cFM5, Sound68_QuickDoorSlam_FM5,	$F4, $00
00000ED1 8005                     M 	dc.b	$80,cfm5
00000ED3                          M 	z80_ptr	sound68_quickdoorslam_fm5
00000ED3 0000                     M 	dc.w	(((sound68_quickdoorslam_fm5)<<8)&$ff00)|(((sound68_quickdoorslam_fm5)>>8)&$ff)|$80
00000ED5 F400                     M 	dc.b	$f4,$00
00000ED7                            
00000ED7                            ; FM5 Data
00000ED7                            Sound68_QuickDoorSlam_FM5:
00000ED7                            	smpsSetvoice        $00
00000ED7 EF00                     M 	dc.b	$ef,$00
00000ED9 9B04 A506                  	dc.b	nD2, $04, nC3, $06
00000EDD                            	smpsStop
00000EDD F2                       M 	dc.b	$f2
00000EDE                            
00000EDE                            Sound68_QuickDoorSlam_Voices:
00000EDE                            ;	Voice $00
00000EDE                            ;	$3C
00000EDE                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $16, $0F, $0F
00000EDE                            ;	$00, $00, $00, $00, 	$0F, $AF, $FF, $FF, 	$00, $80, $0A, $80
00000EDE                            	smpsVcAlgorithm     $04
00000EDE =00000004                M vcalgorithm	=	$04
00000EDE                            	smpsVcFeedback      $07
00000EDE =00000007                M vcfeedback	=	$07
00000EDE                            	smpsVcUnusedBits    $00
00000EDE =00000000                M vcunusedbits	=	$00
00000EDE =00000000                M vcd1r1unk	=	0
00000EDE =00000000                M vcd1r2unk	=	0
00000EDE =00000000                M vcd1r3unk	=	0
00000EDE =00000000                M vcd1r4unk	=	0
00000EDE                            	smpsVcDetune        $00, $00, $00, $00
00000EDE =00000000                M vcdt1	=	$00
00000EDE =00000000                M vcdt2	=	$00
00000EDE =00000000                M vcdt3	=	$00
00000EDE =00000000                M vcdt4	=	$00
00000EDE                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000EDE =00000000                M vccf1	=	$00
00000EDE =00000000                M vccf2	=	$00
00000EDE =00000000                M vccf3	=	$00
00000EDE =00000000                M vccf4	=	$00
00000EDE                            	smpsVcRateScale     $00, $00, $00, $00
00000EDE =00000000                M vcrs1	=	$00
00000EDE =00000000                M vcrs2	=	$00
00000EDE =00000000                M vcrs3	=	$00
00000EDE =00000000                M vcrs4	=	$00
00000EDE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000EDE =0000001F                M vcar1	=	$1f
00000EDE =0000001F                M vcar2	=	$1f
00000EDE =0000001F                M vcar3	=	$1f
00000EDE =0000001F                M vcar4	=	$1f
00000EDE                            	smpsVcAmpMod        $00, $00, $00, $00
00000EDE =00000000                M vcam1	=	$00
00000EDE =00000000                M vcam2	=	$00
00000EDE =00000000                M vcam3	=	$00
00000EDE =00000000                M vcam4	=	$00
00000EDE                            	smpsVcDecayRate1    $0F, $0F, $16, $00
00000EDE =0000000F                M vcd1r1	=	$0f
00000EDE =0000000F                M vcd1r2	=	$0f
00000EDE =00000016                M vcd1r3	=	$16
00000EDE =00000000                M vcd1r4	=	$00
00000EDE                            	smpsVcDecayRate2    $00, $00, $00, $00
00000EDE =00000000                M vcd2r1	=	$00
00000EDE =00000000                M vcd2r2	=	$00
00000EDE =00000000                M vcd2r3	=	$00
00000EDE =00000000                M vcd2r4	=	$00
00000EDE                            	smpsVcDecayLevel    $0F, $0F, $0A, $00
00000EDE =0000000F                M vcdl1	=	$0f
00000EDE =0000000F                M vcdl2	=	$0f
00000EDE =0000000A                M vcdl3	=	$0a
00000EDE =00000000                M vcdl4	=	$00
00000EDE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000EDE =0000000F                M vcrr1	=	$0f
00000EDE =0000000F                M vcrr2	=	$0f
00000EDE =0000000F                M vcrr3	=	$0f
00000EDE =0000000F                M vcrr4	=	$0f
00000EDE                            	smpsVcTotalLevel    $00, $0A, $00, $00
00000EDE =00000000                M vctl1	=	$00
00000EDE =0000000A                M vctl2	=	$0a
00000EDE =00000000                M vctl3	=	$00
00000EDE =00000000                M vctl4	=	$00
00000EDE 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000EDF =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000EDF =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000EDF =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000EDF =00000080                M vctlmask1	=	$80
00000EDF 0000 0000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000EE3 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000EE7 000F 160F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000EEB 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000EEF 0FFF AFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000EF3 000A 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000EF7                            
00000EF7                            Sound69:	include "sound/sfx/E9 - Drawbridge Down.asm"
00000EF7                            Sound69_DrawbridgeDown_Header:
00000EF7                            	smpsHeaderStartSong 2
00000EF7 =00000EF7                M songstart_3333	equ	offset(*)
00000EF7                            	smpsHeaderVoice     Sound69_DrawbridgeDown_Voices
00000EF7                          M 	z80_ptr	sound69_drawbridgedown_voices
00000EF7 0000                     M 	dc.w	(((sound69_drawbridgedown_voices)<<8)&$ff00)|(((sound69_drawbridgedown_voices)>>8)&$ff)|$80
00000EF9                            	smpsHeaderTempoSFX  $01
00000EF9 01                       M 	dc.b	$01
00000EFA                            	smpsHeaderChanSFX   $02
00000EFA 02                       M 	dc.b	$02
00000EFB                            
00000EFB                            	smpsHeaderSFXChannel cFM5, Sound69_DrawbridgeDown_FM5,	$F4, $00
00000EFB 8005                     M 	dc.b	$80,cfm5
00000EFD                          M 	z80_ptr	sound69_drawbridgedown_fm5
00000EFD 0000                     M 	dc.w	(((sound69_drawbridgedown_fm5)<<8)&$ff00)|(((sound69_drawbridgedown_fm5)>>8)&$ff)|$80
00000EFF F400                     M 	dc.b	$f4,$00
00000F01                            	smpsHeaderSFXChannel cPSG3, Sound69_DrawbridgeDown_PSG3,	$00, $00
00000F01 80C0                     M 	dc.b	$80,cpsg3
00000F03                          M 	z80_ptr	sound69_drawbridgedown_psg3
00000F03 0000                     M 	dc.w	(((sound69_drawbridgedown_psg3)<<8)&$ff00)|(((sound69_drawbridgedown_psg3)>>8)&$ff)|$80
00000F05 0000                     M 	dc.b	$00,$00
00000F07                            
00000F07                            ; FM5 Data
00000F07                            Sound69_DrawbridgeDown_FM5:
00000F07                            	smpsSetvoice        $00
00000F07 EF00                     M 	dc.b	$ef,$00
00000F09 9B03 A806 9E08             	dc.b	nD2, $03, nEb3, $06, nF2, $08
00000F0F                            	smpsStop
00000F0F F2                       M 	dc.b	$f2
00000F10                            
00000F10                            ; PSG3 Data
00000F10                            Sound69_DrawbridgeDown_PSG3:
00000F10                            	smpsPSGvoice        fTone_04
00000F10 F504                     M 	dc.b	$f5,ftone_04
00000F12                            	smpsPSGform         $E7
00000F12 F3E7                     M 	dc.b	$f3,$e7
00000F14 C603 C606 C608             	dc.b	nMaxPSG, $03, nMaxPSG, $06, nMaxPSG, $08
00000F1A                            	smpsStop
00000F1A F2                       M 	dc.b	$f2
00000F1B                            
00000F1B                            Sound69_DrawbridgeDown_Voices:
00000F1B                            ;	Voice $00
00000F1B                            ;	$3C
00000F1B                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $16, $0F, $0F
00000F1B                            ;	$00, $00, $00, $00, 	$0F, $AF, $FF, $FF, 	$00, $80, $0A, $80
00000F1B                            	smpsVcAlgorithm     $04
00000F1B =00000004                M vcalgorithm	=	$04
00000F1B                            	smpsVcFeedback      $07
00000F1B =00000007                M vcfeedback	=	$07
00000F1B                            	smpsVcUnusedBits    $00
00000F1B =00000000                M vcunusedbits	=	$00
00000F1B =00000000                M vcd1r1unk	=	0
00000F1B =00000000                M vcd1r2unk	=	0
00000F1B =00000000                M vcd1r3unk	=	0
00000F1B =00000000                M vcd1r4unk	=	0
00000F1B                            	smpsVcDetune        $00, $00, $00, $00
00000F1B =00000000                M vcdt1	=	$00
00000F1B =00000000                M vcdt2	=	$00
00000F1B =00000000                M vcdt3	=	$00
00000F1B =00000000                M vcdt4	=	$00
00000F1B                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000F1B =00000000                M vccf1	=	$00
00000F1B =00000000                M vccf2	=	$00
00000F1B =00000000                M vccf3	=	$00
00000F1B =00000000                M vccf4	=	$00
00000F1B                            	smpsVcRateScale     $00, $00, $00, $00
00000F1B =00000000                M vcrs1	=	$00
00000F1B =00000000                M vcrs2	=	$00
00000F1B =00000000                M vcrs3	=	$00
00000F1B =00000000                M vcrs4	=	$00
00000F1B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000F1B =0000001F                M vcar1	=	$1f
00000F1B =0000001F                M vcar2	=	$1f
00000F1B =0000001F                M vcar3	=	$1f
00000F1B =0000001F                M vcar4	=	$1f
00000F1B                            	smpsVcAmpMod        $00, $00, $00, $00
00000F1B =00000000                M vcam1	=	$00
00000F1B =00000000                M vcam2	=	$00
00000F1B =00000000                M vcam3	=	$00
00000F1B =00000000                M vcam4	=	$00
00000F1B                            	smpsVcDecayRate1    $0F, $0F, $16, $00
00000F1B =0000000F                M vcd1r1	=	$0f
00000F1B =0000000F                M vcd1r2	=	$0f
00000F1B =00000016                M vcd1r3	=	$16
00000F1B =00000000                M vcd1r4	=	$00
00000F1B                            	smpsVcDecayRate2    $00, $00, $00, $00
00000F1B =00000000                M vcd2r1	=	$00
00000F1B =00000000                M vcd2r2	=	$00
00000F1B =00000000                M vcd2r3	=	$00
00000F1B =00000000                M vcd2r4	=	$00
00000F1B                            	smpsVcDecayLevel    $0F, $0F, $0A, $00
00000F1B =0000000F                M vcdl1	=	$0f
00000F1B =0000000F                M vcdl2	=	$0f
00000F1B =0000000A                M vcdl3	=	$0a
00000F1B =00000000                M vcdl4	=	$00
00000F1B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000F1B =0000000F                M vcrr1	=	$0f
00000F1B =0000000F                M vcrr2	=	$0f
00000F1B =0000000F                M vcrr3	=	$0f
00000F1B =0000000F                M vcrr4	=	$0f
00000F1B                            	smpsVcTotalLevel    $00, $0A, $00, $00
00000F1B =00000000                M vctl1	=	$00
00000F1B =0000000A                M vctl2	=	$0a
00000F1B =00000000                M vctl3	=	$00
00000F1B =00000000                M vctl4	=	$00
00000F1B 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000F1C =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000F1C =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000F1C =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000F1C =00000080                M vctlmask1	=	$80
00000F1C 0000 0000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000F20 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000F24 000F 160F                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000F28 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000F2C 0FFF AFFF                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000F30 000A 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000F34                            
00000F34                            Sound6A:	include "sound/sfx/EA - Laser Burst.asm"
00000F34                            Sound6A_LaserBurst_Header:
00000F34                            	smpsHeaderStartSong 2, 1
00000F34 =00000F34                M songstart_3360	equ	offset(*)
00000F34                            	smpsHeaderVoice     Sound6A_6F_Laser_Voices
00000F34                          M 	z80_ptr	sound6a_6f_laser_voices
00000F34 0000                     M 	dc.w	(((sound6a_6f_laser_voices)<<8)&$ff00)|(((sound6a_6f_laser_voices)>>8)&$ff)|$80
00000F36                            	smpsHeaderTempoSFX  $01
00000F36 01                       M 	dc.b	$01
00000F37                            	smpsHeaderChanSFX   $01
00000F37 01                       M 	dc.b	$01
00000F38                            
00000F38                            	smpsHeaderSFXChannel cFM5, Sound6A_LaserBurst_FM5,	$00, $04
00000F38 8005                     M 	dc.b	$80,cfm5
00000F3A                          M 	z80_ptr	sound6a_laserburst_fm5
00000F3A 0000                     M 	dc.w	(((sound6a_laserburst_fm5)<<8)&$ff00)|(((sound6a_laserburst_fm5)>>8)&$ff)|$80
00000F3C 0004                     M 	dc.b	$00,$04
00000F3E                            
00000F3E                            ; FM5 Data
00000F3E                            Sound6A_LaserBurst_FM5:
00000F3E                            	smpsSetvoice        $00
00000F3E EF00                     M 	dc.b	$ef,$00
00000F40 DF14                       	dc.b	nBb7, $14
00000F42                            	smpsAlterVol        $18
00000F42 E618                     M 	dc.b	$e6,$18
00000F44 06                         	dc.b	$06
00000F45                            	smpsStop
00000F45 F2                       M 	dc.b	$f2
00000F46                            
00000F46                            Sound6A_6F_Laser_Voices:
00000F46                            ;	Voice $00
00000F46                            ;	$3D
00000F46                            ;	$09, $34, $34, $28, 	$1F, $16, $16, $16, 	$00, $00, $00, $04
00000F46                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$15, $02, $02, $00
00000F46                            	smpsVcAlgorithm     $05
00000F46 =00000005                M vcalgorithm	=	$05
00000F46                            	smpsVcFeedback      $07
00000F46 =00000007                M vcfeedback	=	$07
00000F46                            	smpsVcUnusedBits    $00
00000F46 =00000000                M vcunusedbits	=	$00
00000F46 =00000000                M vcd1r1unk	=	0
00000F46 =00000000                M vcd1r2unk	=	0
00000F46 =00000000                M vcd1r3unk	=	0
00000F46 =00000000                M vcd1r4unk	=	0
00000F46                            	smpsVcDetune        $02, $03, $03, $00
00000F46 =00000002                M vcdt1	=	$02
00000F46 =00000003                M vcdt2	=	$03
00000F46 =00000003                M vcdt3	=	$03
00000F46 =00000000                M vcdt4	=	$00
00000F46                            	smpsVcCoarseFreq    $08, $04, $04, $09
00000F46 =00000008                M vccf1	=	$08
00000F46 =00000004                M vccf2	=	$04
00000F46 =00000004                M vccf3	=	$04
00000F46 =00000009                M vccf4	=	$09
00000F46                            	smpsVcRateScale     $00, $00, $00, $00
00000F46 =00000000                M vcrs1	=	$00
00000F46 =00000000                M vcrs2	=	$00
00000F46 =00000000                M vcrs3	=	$00
00000F46 =00000000                M vcrs4	=	$00
00000F46                            	smpsVcAttackRate    $16, $16, $16, $1F
00000F46 =00000016                M vcar1	=	$16
00000F46 =00000016                M vcar2	=	$16
00000F46 =00000016                M vcar3	=	$16
00000F46 =0000001F                M vcar4	=	$1f
00000F46                            	smpsVcAmpMod        $00, $00, $00, $00
00000F46 =00000000                M vcam1	=	$00
00000F46 =00000000                M vcam2	=	$00
00000F46 =00000000                M vcam3	=	$00
00000F46 =00000000                M vcam4	=	$00
00000F46                            	smpsVcDecayRate1    $04, $00, $00, $00
00000F46 =00000004                M vcd1r1	=	$04
00000F46 =00000000                M vcd1r2	=	$00
00000F46 =00000000                M vcd1r3	=	$00
00000F46 =00000000                M vcd1r4	=	$00
00000F46                            	smpsVcDecayRate2    $00, $00, $00, $00
00000F46 =00000000                M vcd2r1	=	$00
00000F46 =00000000                M vcd2r2	=	$00
00000F46 =00000000                M vcd2r3	=	$00
00000F46 =00000000                M vcd2r4	=	$00
00000F46                            	smpsVcDecayLevel    $00, $00, $00, $00
00000F46 =00000000                M vcdl1	=	$00
00000F46 =00000000                M vcdl2	=	$00
00000F46 =00000000                M vcdl3	=	$00
00000F46 =00000000                M vcdl4	=	$00
00000F46                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00000F46 =0000000F                M vcrr1	=	$0f
00000F46 =0000000F                M vcrr2	=	$0f
00000F46 =0000000F                M vcrr3	=	$0f
00000F46 =0000000F                M vcrr4	=	$0f
00000F46                            	smpsVcTotalLevel    $00, $02, $02, $15
00000F46 =00000000                M vctl1	=	$00
00000F46 =00000002                M vctl2	=	$02
00000F46 =00000002                M vctl3	=	$02
00000F46 =00000015                M vctl4	=	$15
00000F46 3D                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000F47 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000F47 =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000F47 =FFFFFF80                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000F47 =00000080                M vctlmask1	=	$80
00000F47 0934 3428                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000F4B 1F16 1616                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000F4F 0000 0004                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000F53 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000F57 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000F5B 1582 8280                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000F5F                            
00000F5F                            Sound6B:	include "sound/sfx/EB - Scatter.asm"
00000F5F                            Sound6B_LaserFloor_Header:
00000F5F                            	smpsHeaderStartSong 2, 1
00000F5F =00000F5F                M songstart_3383	equ	offset(*)
00000F5F                            	smpsHeaderVoice     Sound6B_LaserFloor_Voices
00000F5F                          M 	z80_ptr	sound6b_laserfloor_voices
00000F5F 0000                     M 	dc.w	(((sound6b_laserfloor_voices)<<8)&$ff00)|(((sound6b_laserfloor_voices)>>8)&$ff)|$80
00000F61                            	smpsHeaderTempoSFX  $01
00000F61 01                       M 	dc.b	$01
00000F62                            	smpsHeaderChanSFX   $01
00000F62 01                       M 	dc.b	$01
00000F63                            
00000F63                            	smpsHeaderSFXChannel cFM4, Sound6B_LaserFloor_FM4,	$00, $02
00000F63 8004                     M 	dc.b	$80,cfm4
00000F65                          M 	z80_ptr	sound6b_laserfloor_fm4
00000F65 0000                     M 	dc.w	(((sound6b_laserfloor_fm4)<<8)&$ff00)|(((sound6b_laserfloor_fm4)>>8)&$ff)|$80
00000F67 0002                     M 	dc.b	$00,$02
00000F69                            
00000F69                            ; FM4 Data
00000F69                            Sound6B_LaserFloor_FM4:
00000F69                            	smpsSetvoice        $00
00000F69 EF00                     M 	dc.b	$ef,$00
00000F6B 8104 800C                  	dc.b	nC0, $04, nRst, $0C
00000F6F                            	smpsStop
00000F6F F2                       M 	dc.b	$f2
00000F70                            
00000F70                            Sound6B_LaserFloor_Voices:
00000F70                            ;	Voice $00
00000F70                            ;	$3A
00000F70                            ;	$30, $40, $30, $70, 	$1F, $1F, $1F, $1F, 	$12, $01, $0A, $07
00000F70                            ;	$00, $01, $01, $03, 	$00, $C3, $23, $46, 	$08, $1C, $07, $03
00000F70                            	smpsVcAlgorithm     $02
00000F70 =00000002                M vcalgorithm	=	$02
00000F70                            	smpsVcFeedback      $07
00000F70 =00000007                M vcfeedback	=	$07
00000F70                            	smpsVcUnusedBits    $00
00000F70 =00000000                M vcunusedbits	=	$00
00000F70 =00000000                M vcd1r1unk	=	0
00000F70 =00000000                M vcd1r2unk	=	0
00000F70 =00000000                M vcd1r3unk	=	0
00000F70 =00000000                M vcd1r4unk	=	0
00000F70                            	smpsVcDetune        $07, $03, $04, $03
00000F70 =00000007                M vcdt1	=	$07
00000F70 =00000003                M vcdt2	=	$03
00000F70 =00000004                M vcdt3	=	$04
00000F70 =00000003                M vcdt4	=	$03
00000F70                            	smpsVcCoarseFreq    $00, $00, $00, $00
00000F70 =00000000                M vccf1	=	$00
00000F70 =00000000                M vccf2	=	$00
00000F70 =00000000                M vccf3	=	$00
00000F70 =00000000                M vccf4	=	$00
00000F70                            	smpsVcRateScale     $00, $00, $00, $00
00000F70 =00000000                M vcrs1	=	$00
00000F70 =00000000                M vcrs2	=	$00
00000F70 =00000000                M vcrs3	=	$00
00000F70 =00000000                M vcrs4	=	$00
00000F70                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000F70 =0000001F                M vcar1	=	$1f
00000F70 =0000001F                M vcar2	=	$1f
00000F70 =0000001F                M vcar3	=	$1f
00000F70 =0000001F                M vcar4	=	$1f
00000F70                            	smpsVcAmpMod        $00, $00, $00, $00
00000F70 =00000000                M vcam1	=	$00
00000F70 =00000000                M vcam2	=	$00
00000F70 =00000000                M vcam3	=	$00
00000F70 =00000000                M vcam4	=	$00
00000F70                            	smpsVcDecayRate1    $07, $0A, $01, $12
00000F70 =00000007                M vcd1r1	=	$07
00000F70 =0000000A                M vcd1r2	=	$0a
00000F70 =00000001                M vcd1r3	=	$01
00000F70 =00000012                M vcd1r4	=	$12
00000F70                            	smpsVcDecayRate2    $03, $01, $01, $00
00000F70 =00000003                M vcd2r1	=	$03
00000F70 =00000001                M vcd2r2	=	$01
00000F70 =00000001                M vcd2r3	=	$01
00000F70 =00000000                M vcd2r4	=	$00
00000F70                            	smpsVcDecayLevel    $04, $02, $0C, $00
00000F70 =00000004                M vcdl1	=	$04
00000F70 =00000002                M vcdl2	=	$02
00000F70 =0000000C                M vcdl3	=	$0c
00000F70 =00000000                M vcdl4	=	$00
00000F70                            	smpsVcReleaseRate   $06, $03, $03, $00
00000F70 =00000006                M vcrr1	=	$06
00000F70 =00000003                M vcrr2	=	$03
00000F70 =00000003                M vcrr3	=	$03
00000F70 =00000000                M vcrr4	=	$00
00000F70                            	smpsVcTotalLevel    $03, $07, $1C, $08
00000F70 =00000003                M vctl1	=	$03
00000F70 =00000007                M vctl2	=	$07
00000F70 =0000001C                M vctl3	=	$1c
00000F70 =00000008                M vctl4	=	$08
00000F70 3A                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000F71 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000F71 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000F71 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000F71 =00000080                M vctlmask1	=	$80
00000F71 3030 4070                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000F75 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000F79 120A 0107                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000F7D 0001 0103                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000F81 0023 C346                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000F85 0807 1C83                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000F89                            
00000F89                            Sound6C:	include "sound/sfx/EC - Teleport.asm"
00000F89                            Sound6C_Teleport_Header:
00000F89                            	smpsHeaderStartSong 2, 1
00000F89 =00000F89                M songstart_3405	equ	offset(*)
00000F89                            	smpsHeaderVoice     Sound6C_Teleport_Voices
00000F89                          M 	z80_ptr	sound6c_teleport_voices
00000F89 0000                     M 	dc.w	(((sound6c_teleport_voices)<<8)&$ff00)|(((sound6c_teleport_voices)>>8)&$ff)|$80
00000F8B                            	smpsHeaderTempoSFX  $01
00000F8B 01                       M 	dc.b	$01
00000F8C                            	smpsHeaderChanSFX   $04
00000F8C 04                       M 	dc.b	$04
00000F8D                            
00000F8D                            	smpsHeaderSFXChannel cFM5, Sound6C_Teleport_FM5,	$00, $10
00000F8D 8005                     M 	dc.b	$80,cfm5
00000F8F                          M 	z80_ptr	sound6c_teleport_fm5
00000F8F 0000                     M 	dc.w	(((sound6c_teleport_fm5)<<8)&$ff00)|(((sound6c_teleport_fm5)>>8)&$ff)|$80
00000F91 0010                     M 	dc.b	$00,$10
00000F93                            	smpsHeaderSFXChannel cFM4, Sound6C_Teleport_FM4,	$00, $10
00000F93 8004                     M 	dc.b	$80,cfm4
00000F95                          M 	z80_ptr	sound6c_teleport_fm4
00000F95 0000                     M 	dc.w	(((sound6c_teleport_fm4)<<8)&$ff00)|(((sound6c_teleport_fm4)>>8)&$ff)|$80
00000F97 0010                     M 	dc.b	$00,$10
00000F99                            	smpsHeaderSFXChannel cPSG3, Sound5F_6C_PSG3,	$00, $00
00000F99 80C0                     M 	dc.b	$80,cpsg3
00000F9B                          M 	z80_ptr	sound5f_6c_psg3
00000F9B 0000                     M 	dc.w	(((sound5f_6c_psg3)<<8)&$ff00)|(((sound5f_6c_psg3)>>8)&$ff)|$80
00000F9D 0000                     M 	dc.b	$00,$00
00000F9F                            	smpsHeaderSFXChannel cPSG2, Sound5F_6C_PSG2,	$00, $00
00000F9F 80A0                     M 	dc.b	$80,cpsg2
00000FA1                          M 	z80_ptr	sound5f_6c_psg2
00000FA1 0000                     M 	dc.w	(((sound5f_6c_psg2)<<8)&$ff00)|(((sound5f_6c_psg2)>>8)&$ff)|$80
00000FA3 0000                     M 	dc.b	$00,$00
00000FA5                            
00000FA5                            ; FM4 Data
00000FA5                            Sound6C_Teleport_FM4:
00000FA5                            	smpsAlterNote       $10
00000FA5 E110                     M 	dc.b	$e1,$10
00000FA7                            
00000FA7                            ; FM5 Data
00000FA7                            Sound6C_Teleport_FM5:
00000FA7                            	smpsSetvoice        $01
00000FA7 EF01                     M 	dc.b	$ef,$01
00000FA9                            	smpsModSet          $01, $01, $EC, $56
00000FA9 F001 01EC 56             M 	dc.b	$f0,$01,$01,$ec,$56
00000FAE C024                       	dc.b	nEb5, $24
00000FB0                            	smpsModOff
00000FB0 F4                       M 	dc.b	$f4
00000FB1                            	smpsSetvoice        $00
00000FB1 EF00                     M 	dc.b	$ef,$00
00000FB3                            	smpsAlterVol        $F0
00000FB3 E6F0                     M 	dc.b	$e6,$f0
00000FB5                            
00000FB5                            Sound6C_Teleport_Loop00:
00000FB5 BB02 E7                    	dc.b	nBb4, $02, smpsNoAttack
00000FB8                            	smpsAlterVol        $02
00000FB8 E602                     M 	dc.b	$e6,$02
00000FBA                            	smpsAlterPitch      $01
00000FBA E901                     M 	dc.b	$e9,$01
00000FBC                            	smpsLoop            $00, $20, Sound6C_Teleport_Loop00
00000FBC F700 20                  M 	dc.b	$f7,$00,$20
00000FBF                          M 	z80_ptr	sound6c_teleport_loop00
00000FBF 0000                     M 	dc.w	(((sound6c_teleport_loop00)<<8)&$ff00)|(((sound6c_teleport_loop00)>>8)&$ff)|$80
00000FC1                            	smpsStop
00000FC1 F2                       M 	dc.b	$f2
00000FC2                            
00000FC2                            Sound6C_Teleport_Voices:
00000FC2                            ;	Voice $00
00000FC2                            ;	$00
00000FC2                            ;	$53, $03, $30, $30, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
00000FC2                            ;	$00, $00, $00, $00, 	$00, $00, $00, $0F, 	$0F, $23, $06, $80
00000FC2                            	smpsVcAlgorithm     $00
00000FC2 =00000000                M vcalgorithm	=	$00
00000FC2                            	smpsVcFeedback      $00
00000FC2 =00000000                M vcfeedback	=	$00
00000FC2                            	smpsVcUnusedBits    $00
00000FC2 =00000000                M vcunusedbits	=	$00
00000FC2 =00000000                M vcd1r1unk	=	0
00000FC2 =00000000                M vcd1r2unk	=	0
00000FC2 =00000000                M vcd1r3unk	=	0
00000FC2 =00000000                M vcd1r4unk	=	0
00000FC2                            	smpsVcDetune        $03, $03, $00, $05
00000FC2 =00000003                M vcdt1	=	$03
00000FC2 =00000003                M vcdt2	=	$03
00000FC2 =00000000                M vcdt3	=	$00
00000FC2 =00000005                M vcdt4	=	$05
00000FC2                            	smpsVcCoarseFreq    $00, $00, $03, $03
00000FC2 =00000000                M vccf1	=	$00
00000FC2 =00000000                M vccf2	=	$00
00000FC2 =00000003                M vccf3	=	$03
00000FC2 =00000003                M vccf4	=	$03
00000FC2                            	smpsVcRateScale     $00, $00, $00, $00
00000FC2 =00000000                M vcrs1	=	$00
00000FC2 =00000000                M vcrs2	=	$00
00000FC2 =00000000                M vcrs3	=	$00
00000FC2 =00000000                M vcrs4	=	$00
00000FC2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00000FC2 =0000001F                M vcar1	=	$1f
00000FC2 =0000001F                M vcar2	=	$1f
00000FC2 =0000001F                M vcar3	=	$1f
00000FC2 =0000001F                M vcar4	=	$1f
00000FC2                            	smpsVcAmpMod        $00, $00, $00, $00
00000FC2 =00000000                M vcam1	=	$00
00000FC2 =00000000                M vcam2	=	$00
00000FC2 =00000000                M vcam3	=	$00
00000FC2 =00000000                M vcam4	=	$00
00000FC2                            	smpsVcDecayRate1    $00, $00, $00, $00
00000FC2 =00000000                M vcd1r1	=	$00
00000FC2 =00000000                M vcd1r2	=	$00
00000FC2 =00000000                M vcd1r3	=	$00
00000FC2 =00000000                M vcd1r4	=	$00
00000FC2                            	smpsVcDecayRate2    $00, $00, $00, $00
00000FC2 =00000000                M vcd2r1	=	$00
00000FC2 =00000000                M vcd2r2	=	$00
00000FC2 =00000000                M vcd2r3	=	$00
00000FC2 =00000000                M vcd2r4	=	$00
00000FC2                            	smpsVcDecayLevel    $00, $00, $00, $00
00000FC2 =00000000                M vcdl1	=	$00
00000FC2 =00000000                M vcdl2	=	$00
00000FC2 =00000000                M vcdl3	=	$00
00000FC2 =00000000                M vcdl4	=	$00
00000FC2                            	smpsVcReleaseRate   $0F, $00, $00, $00
00000FC2 =0000000F                M vcrr1	=	$0f
00000FC2 =00000000                M vcrr2	=	$00
00000FC2 =00000000                M vcrr3	=	$00
00000FC2 =00000000                M vcrr4	=	$00
00000FC2                            	smpsVcTotalLevel    $80, $06, $23, $0F
00000FC2 =00000080                M vctl1	=	$80
00000FC2 =00000006                M vctl2	=	$06
00000FC2 =00000023                M vctl3	=	$23
00000FC2 =0000000F                M vctl4	=	$0f
00000FC2 00                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000FC3 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000FC3 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000FC3 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000FC3 =00000080                M vctlmask1	=	$80
00000FC3 5330 0330                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000FC7 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000FCB 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000FCF 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000FD3 0000 000F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000FD7 0F06 2380                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000FDB                            
00000FDB                            ;	Voice $01
00000FDB                            ;	$3C
00000FDB                            ;	$72, $32, $32, $72, 	$14, $0F, $14, $0F, 	$00, $00, $00, $00
00000FDB                            ;	$00, $00, $00, $00, 	$02, $08, $02, $08, 	$35, $00, $14, $00
00000FDB                            	smpsVcAlgorithm     $04
00000FDB =00000004                M vcalgorithm	=	$04
00000FDB                            	smpsVcFeedback      $07
00000FDB =00000007                M vcfeedback	=	$07
00000FDB                            	smpsVcUnusedBits    $00
00000FDB =00000000                M vcunusedbits	=	$00
00000FDB =00000000                M vcd1r1unk	=	0
00000FDB =00000000                M vcd1r2unk	=	0
00000FDB =00000000                M vcd1r3unk	=	0
00000FDB =00000000                M vcd1r4unk	=	0
00000FDB                            	smpsVcDetune        $07, $03, $03, $07
00000FDB =00000007                M vcdt1	=	$07
00000FDB =00000003                M vcdt2	=	$03
00000FDB =00000003                M vcdt3	=	$03
00000FDB =00000007                M vcdt4	=	$07
00000FDB                            	smpsVcCoarseFreq    $02, $02, $02, $02
00000FDB =00000002                M vccf1	=	$02
00000FDB =00000002                M vccf2	=	$02
00000FDB =00000002                M vccf3	=	$02
00000FDB =00000002                M vccf4	=	$02
00000FDB                            	smpsVcRateScale     $00, $00, $00, $00
00000FDB =00000000                M vcrs1	=	$00
00000FDB =00000000                M vcrs2	=	$00
00000FDB =00000000                M vcrs3	=	$00
00000FDB =00000000                M vcrs4	=	$00
00000FDB                            	smpsVcAttackRate    $0F, $14, $0F, $14
00000FDB =0000000F                M vcar1	=	$0f
00000FDB =00000014                M vcar2	=	$14
00000FDB =0000000F                M vcar3	=	$0f
00000FDB =00000014                M vcar4	=	$14
00000FDB                            	smpsVcAmpMod        $00, $00, $00, $00
00000FDB =00000000                M vcam1	=	$00
00000FDB =00000000                M vcam2	=	$00
00000FDB =00000000                M vcam3	=	$00
00000FDB =00000000                M vcam4	=	$00
00000FDB                            	smpsVcDecayRate1    $00, $00, $00, $00
00000FDB =00000000                M vcd1r1	=	$00
00000FDB =00000000                M vcd1r2	=	$00
00000FDB =00000000                M vcd1r3	=	$00
00000FDB =00000000                M vcd1r4	=	$00
00000FDB                            	smpsVcDecayRate2    $00, $00, $00, $00
00000FDB =00000000                M vcd2r1	=	$00
00000FDB =00000000                M vcd2r2	=	$00
00000FDB =00000000                M vcd2r3	=	$00
00000FDB =00000000                M vcd2r4	=	$00
00000FDB                            	smpsVcDecayLevel    $00, $00, $00, $00
00000FDB =00000000                M vcdl1	=	$00
00000FDB =00000000                M vcdl2	=	$00
00000FDB =00000000                M vcdl3	=	$00
00000FDB =00000000                M vcdl4	=	$00
00000FDB                            	smpsVcReleaseRate   $08, $02, $08, $02
00000FDB =00000008                M vcrr1	=	$08
00000FDB =00000002                M vcrr2	=	$02
00000FDB =00000008                M vcrr3	=	$08
00000FDB =00000002                M vcrr4	=	$02
00000FDB                            	smpsVcTotalLevel    $00, $14, $00, $35
00000FDB =00000000                M vctl1	=	$00
00000FDB =00000014                M vctl2	=	$14
00000FDB =00000000                M vctl3	=	$00
00000FDB =00000035                M vctl4	=	$35
00000FDB 3C                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00000FDC =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00000FDC =FFFFFF80                M vctlmask3	=	((vcalgorithm>=4)<<7)
00000FDC =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00000FDC =00000080                M vctlmask1	=	$80
00000FDC 7232 3272                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
00000FE0 1414 0F0F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00000FE4 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00000FE8 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00000FEC 0202 0808                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
00000FF0 3514 8080                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00000FF4                            
00000FF4                            Sound6D:	include "sound/sfx/ED - Error.asm"
00000FF4                            Sound6D_Error_Header:
00000FF4                            	smpsHeaderStartSong 2, 1
00000FF4 =00000FF4                M songstart_3455	equ	offset(*)
00000FF4                            	smpsHeaderVoice     Sound6D_Error_Voices
00000FF4                          M 	z80_ptr	sound6d_error_voices
00000FF4 0000                     M 	dc.w	(((sound6d_error_voices)<<8)&$ff00)|(((sound6d_error_voices)>>8)&$ff)|$80
00000FF6                            	smpsHeaderTempoSFX  $01
00000FF6 01                       M 	dc.b	$01
00000FF7                            	smpsHeaderChanSFX   $01
00000FF7 01                       M 	dc.b	$01
00000FF8                            
00000FF8                            	smpsHeaderSFXChannel cFM5, Sound6D_Error_FM5,	$00, $04
00000FF8 8005                     M 	dc.b	$80,cfm5
00000FFA                          M 	z80_ptr	sound6d_error_fm5
00000FFA 0000                     M 	dc.w	(((sound6d_error_fm5)<<8)&$ff00)|(((sound6d_error_fm5)>>8)&$ff)|$80
00000FFC 0004                     M 	dc.b	$00,$04
00000FFE                            
00000FFE                            ; FM5 Data
00000FFE                            Sound6D_Error_FM5:
00000FFE                            	smpsSetvoice        $00
00000FFE EF00                     M 	dc.b	$ef,$00
00001000 B006 8006 B018             	dc.b	nB3, $06, nRst, $06, nB3, $18
00001006                            	smpsStop
00001006 F2                       M 	dc.b	$f2
00001007                            
00001007                            Sound6D_Error_Voices:
00001007                            ;	Voice $00
00001007                            ;	$38
00001007                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
00001007                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1F, $17, $0C, $00
00001007                            	smpsVcAlgorithm     $00
00001007 =00000000                M vcalgorithm	=	$00
00001007                            	smpsVcFeedback      $07
00001007 =00000007                M vcfeedback	=	$07
00001007                            	smpsVcUnusedBits    $00
00001007 =00000000                M vcunusedbits	=	$00
00001007 =00000000                M vcd1r1unk	=	0
00001007 =00000000                M vcd1r2unk	=	0
00001007 =00000000                M vcd1r3unk	=	0
00001007 =00000000                M vcd1r4unk	=	0
00001007                            	smpsVcDetune        $00, $00, $00, $00
00001007 =00000000                M vcdt1	=	$00
00001007 =00000000                M vcdt2	=	$00
00001007 =00000000                M vcdt3	=	$00
00001007 =00000000                M vcdt4	=	$00
00001007                            	smpsVcCoarseFreq    $00, $00, $00, $00
00001007 =00000000                M vccf1	=	$00
00001007 =00000000                M vccf2	=	$00
00001007 =00000000                M vccf3	=	$00
00001007 =00000000                M vccf4	=	$00
00001007                            	smpsVcRateScale     $00, $00, $00, $00
00001007 =00000000                M vcrs1	=	$00
00001007 =00000000                M vcrs2	=	$00
00001007 =00000000                M vcrs3	=	$00
00001007 =00000000                M vcrs4	=	$00
00001007                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00001007 =0000001F                M vcar1	=	$1f
00001007 =0000001F                M vcar2	=	$1f
00001007 =0000001F                M vcar3	=	$1f
00001007 =0000001F                M vcar4	=	$1f
00001007                            	smpsVcAmpMod        $00, $00, $00, $00
00001007 =00000000                M vcam1	=	$00
00001007 =00000000                M vcam2	=	$00
00001007 =00000000                M vcam3	=	$00
00001007 =00000000                M vcam4	=	$00
00001007                            	smpsVcDecayRate1    $00, $00, $00, $00
00001007 =00000000                M vcd1r1	=	$00
00001007 =00000000                M vcd1r2	=	$00
00001007 =00000000                M vcd1r3	=	$00
00001007 =00000000                M vcd1r4	=	$00
00001007                            	smpsVcDecayRate2    $00, $00, $00, $00
00001007 =00000000                M vcd2r1	=	$00
00001007 =00000000                M vcd2r2	=	$00
00001007 =00000000                M vcd2r3	=	$00
00001007 =00000000                M vcd2r4	=	$00
00001007                            	smpsVcDecayLevel    $00, $00, $00, $00
00001007 =00000000                M vcdl1	=	$00
00001007 =00000000                M vcdl2	=	$00
00001007 =00000000                M vcdl3	=	$00
00001007 =00000000                M vcdl4	=	$00
00001007                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001007 =0000000F                M vcrr1	=	$0f
00001007 =0000000F                M vcrr2	=	$0f
00001007 =0000000F                M vcrr3	=	$0f
00001007 =0000000F                M vcrr4	=	$0f
00001007                            	smpsVcTotalLevel    $00, $0C, $17, $1F
00001007 =00000000                M vctl1	=	$00
00001007 =0000000C                M vctl2	=	$0c
00001007 =00000017                M vctl3	=	$17
00001007 =0000001F                M vctl4	=	$1f
00001007 38                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001008 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001008 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001008 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001008 =00000080                M vctlmask1	=	$80
00001008 0000 0000                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000100C 1F1F 1F1F                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
00001010 0000 0000                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001014 0000 0000                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001018 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000101C 1F0C 1780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
00001020                            
00001020                            Sound6E:	include "sound/sfx/EE - Mecha Sonic Buzz.asm"
00001020                            Sound6E_MechaSonicBuzz_Header:
00001020                            	smpsHeaderStartSong 2
00001020 =00001020                M songstart_3477	equ	offset(*)
00001020                            	smpsHeaderVoice     Sound6E_MechaSonicBuzz_Voices
00001020                          M 	z80_ptr	sound6e_mechasonicbuzz_voices
00001020 0000                     M 	dc.w	(((sound6e_mechasonicbuzz_voices)<<8)&$ff00)|(((sound6e_mechasonicbuzz_voices)>>8)&$ff)|$80
00001022                            	smpsHeaderTempoSFX  $01
00001022 01                       M 	dc.b	$01
00001023                            	smpsHeaderChanSFX   $02
00001023 02                       M 	dc.b	$02
00001024                            
00001024                            	smpsHeaderSFXChannel cFM5, Sound6E_MechaSonicBuzz_FM5,	$00, $00
00001024 8005                     M 	dc.b	$80,cfm5
00001026                          M 	z80_ptr	sound6e_mechasonicbuzz_fm5
00001026 0000                     M 	dc.w	(((sound6e_mechasonicbuzz_fm5)<<8)&$ff00)|(((sound6e_mechasonicbuzz_fm5)>>8)&$ff)|$80
00001028 0000                     M 	dc.b	$00,$00
0000102A                            	smpsHeaderSFXChannel cPSG3, Sound6E_MechaSonicBuzz_PSG3,	$00, $00
0000102A 80C0                     M 	dc.b	$80,cpsg3
0000102C                          M 	z80_ptr	sound6e_mechasonicbuzz_psg3
0000102C 0000                     M 	dc.w	(((sound6e_mechasonicbuzz_psg3)<<8)&$ff00)|(((sound6e_mechasonicbuzz_psg3)>>8)&$ff)|$80
0000102E 0000                     M 	dc.b	$00,$00
00001030                            
00001030                            ; FM5 Data
00001030                            Sound6E_MechaSonicBuzz_FM5:
00001030                            	smpsSetvoice        $00
00001030 EF00                     M 	dc.b	$ef,$00
00001032 C624 E7                    	dc.b	nA5, $24, smpsNoAttack
00001035                            
00001035                            Sound6E_MechaSonicBuzz_Loop00:
00001035 C604 E7                    	dc.b	nA5, $04, smpsNoAttack
00001038                            	smpsAlterVol        $04
00001038 E604                     M 	dc.b	$e6,$04
0000103A                            	smpsLoop            $00, $08, Sound6E_MechaSonicBuzz_Loop00
0000103A F700 08                  M 	dc.b	$f7,$00,$08
0000103D                          M 	z80_ptr	sound6e_mechasonicbuzz_loop00
0000103D 0000                     M 	dc.w	(((sound6e_mechasonicbuzz_loop00)<<8)&$ff00)|(((sound6e_mechasonicbuzz_loop00)>>8)&$ff)|$80
0000103F                            	smpsStop
0000103F F2                       M 	dc.b	$f2
00001040                            
00001040                            ; PSG3 Data
00001040                            Sound6E_MechaSonicBuzz_PSG3:
00001040                            	smpsPSGform         $E7
00001040 F3E7                     M 	dc.b	$f3,$e7
00001042 C744                       	dc.b	nBb5, $44
00001044                            	smpsStop
00001044 F2                       M 	dc.b	$f2
00001045                            
00001045                            Sound6E_MechaSonicBuzz_Voices:
00001045                            ;	Voice $00
00001045                            ;	$33
00001045                            ;	$00, $00, $10, $31, 	$1F, $1E, $1D, $0E, 	$00, $1D, $0C, $00
00001045                            ;	$00, $01, $00, $00, 	$0F, $0F, $0F, $0F, 	$08, $07, $06, $80
00001045                            	smpsVcAlgorithm     $03
00001045 =00000003                M vcalgorithm	=	$03
00001045                            	smpsVcFeedback      $06
00001045 =00000006                M vcfeedback	=	$06
00001045                            	smpsVcUnusedBits    $00
00001045 =00000000                M vcunusedbits	=	$00
00001045 =00000000                M vcd1r1unk	=	0
00001045 =00000000                M vcd1r2unk	=	0
00001045 =00000000                M vcd1r3unk	=	0
00001045 =00000000                M vcd1r4unk	=	0
00001045                            	smpsVcDetune        $03, $01, $00, $00
00001045 =00000003                M vcdt1	=	$03
00001045 =00000001                M vcdt2	=	$01
00001045 =00000000                M vcdt3	=	$00
00001045 =00000000                M vcdt4	=	$00
00001045                            	smpsVcCoarseFreq    $01, $00, $00, $00
00001045 =00000001                M vccf1	=	$01
00001045 =00000000                M vccf2	=	$00
00001045 =00000000                M vccf3	=	$00
00001045 =00000000                M vccf4	=	$00
00001045                            	smpsVcRateScale     $00, $00, $00, $00
00001045 =00000000                M vcrs1	=	$00
00001045 =00000000                M vcrs2	=	$00
00001045 =00000000                M vcrs3	=	$00
00001045 =00000000                M vcrs4	=	$00
00001045                            	smpsVcAttackRate    $0E, $1D, $1E, $1F
00001045 =0000000E                M vcar1	=	$0e
00001045 =0000001D                M vcar2	=	$1d
00001045 =0000001E                M vcar3	=	$1e
00001045 =0000001F                M vcar4	=	$1f
00001045                            	smpsVcAmpMod        $00, $00, $00, $00
00001045 =00000000                M vcam1	=	$00
00001045 =00000000                M vcam2	=	$00
00001045 =00000000                M vcam3	=	$00
00001045 =00000000                M vcam4	=	$00
00001045                            	smpsVcDecayRate1    $00, $0C, $1D, $00
00001045 =00000000                M vcd1r1	=	$00
00001045 =0000000C                M vcd1r2	=	$0c
00001045 =0000001D                M vcd1r3	=	$1d
00001045 =00000000                M vcd1r4	=	$00
00001045                            	smpsVcDecayRate2    $00, $00, $01, $00
00001045 =00000000                M vcd2r1	=	$00
00001045 =00000000                M vcd2r2	=	$00
00001045 =00000001                M vcd2r3	=	$01
00001045 =00000000                M vcd2r4	=	$00
00001045                            	smpsVcDecayLevel    $00, $00, $00, $00
00001045 =00000000                M vcdl1	=	$00
00001045 =00000000                M vcdl2	=	$00
00001045 =00000000                M vcdl3	=	$00
00001045 =00000000                M vcdl4	=	$00
00001045                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00001045 =0000000F                M vcrr1	=	$0f
00001045 =0000000F                M vcrr2	=	$0f
00001045 =0000000F                M vcrr3	=	$0f
00001045 =0000000F                M vcrr4	=	$0f
00001045                            	smpsVcTotalLevel    $00, $06, $07, $08
00001045 =00000000                M vctl1	=	$00
00001045 =00000006                M vctl2	=	$06
00001045 =00000007                M vctl3	=	$07
00001045 =00000008                M vctl4	=	$08
00001045 33                       M 	dc.b	(vcunusedbits<<6)+(vcfeedback<<3)+vcalgorithm
00001046 =00000000                M vctlmask4	=	((vcalgorithm=7)<<7)
00001046 =00000000                M vctlmask3	=	((vcalgorithm>=4)<<7)
00001046 =00000000                M vctlmask2	=	((vcalgorithm>=5)<<7)
00001046 =00000080                M vctlmask1	=	$80
00001046 0010 0031                M 	dc.b	(vcdt4<<4)+vccf4,(vcdt2<<4)+vccf2,(vcdt3<<4)+vccf3,(vcdt1<<4)+vccf1
0000104A 1F1D 1E0E                M 	dc.b	(vcrs4<<6)+vcar4,(vcrs2<<6)+vcar2,(vcrs3<<6)+vcar3,(vcrs1<<6)+vcar1
0000104E 000C 1D00                M 	dc.b	(vcam4<<7)|vcd1r4|vcd1r4unk,(vcam2<<7)|vcd1r2|vcd1r2unk,(vcam3<<7)|vcd1r3|vcd1r3unk,(vcam1<<7)|vcd1r1|vcd1r1unk
00001052 0000 0100                M 	dc.b	vcd2r4,vcd2r2,vcd2r3,vcd2r1
00001056 0F0F 0F0F                M 	dc.b	(vcdl4<<4)+vcrr4,(vcdl2<<4)+vcrr2,(vcdl3<<4)+vcrr3,(vcdl1<<4)+vcrr1
0000105A 0806 0780                M 	dc.b	vctl4|vctlmask4,vctl2|vctlmask2,vctl3|vctlmask3,vctl1|vctlmask1
0000105E                            
0000105E                            Sound6F:	include "sound/sfx/EF - Large Laser.asm"
0000105E                            Sound6F_LargeLaser_Header:
0000105E                            	smpsHeaderStartSong 2
0000105E =0000105E                M songstart_3506	equ	offset(*)
0000105E                            	smpsHeaderVoice     Sound6A_6F_Laser_Voices
0000105E                          M 	z80_ptr	sound6a_6f_laser_voices
0000105E 0000                     M 	dc.w	(((sound6a_6f_laser_voices)<<8)&$ff00)|(((sound6a_6f_laser_voices)>>8)&$ff)|$80
00001060                            	smpsHeaderTempoSFX  $01
00001060 01                       M 	dc.b	$01
00001061                            	smpsHeaderChanSFX   $03
00001061 03                       M 	dc.b	$03
00001062                            
00001062                            	smpsHeaderSFXChannel cFM5, Sound6F_LargeLaser_FM5,	$00, $0B
00001062 8005                     M 	dc.b	$80,cfm5
00001064                          M 	z80_ptr	sound6f_largelaser_fm5
00001064 0000                     M 	dc.w	(((sound6f_largelaser_fm5)<<8)&$ff00)|(((sound6f_largelaser_fm5)>>8)&$ff)|$80
00001066 000B                     M 	dc.b	$00,$0b
00001068                            	smpsHeaderSFXChannel cFM4, Sound6F_LargeLaser_FM4,	$00, $12
00001068 8004                     M 	dc.b	$80,cfm4
0000106A                          M 	z80_ptr	sound6f_largelaser_fm4
0000106A 0000                     M 	dc.w	(((sound6f_largelaser_fm4)<<8)&$ff00)|(((sound6f_largelaser_fm4)>>8)&$ff)|$80
0000106C 0012                     M 	dc.b	$00,$12
0000106E                            	smpsHeaderSFXChannel cPSG3, Sound6F_LargeLaser_PSG3,	$00, $00
0000106E 80C0                     M 	dc.b	$80,cpsg3
00001070                          M 	z80_ptr	sound6f_largelaser_psg3
00001070 0000                     M 	dc.w	(((sound6f_largelaser_psg3)<<8)&$ff00)|(((sound6f_largelaser_psg3)>>8)&$ff)|$80
00001072 0000                     M 	dc.b	$00,$00
00001074                            
00001074                            ; FM4 Data
00001074                            Sound6F_LargeLaser_FM4:
00001074                            	smpsAlterNote       $02
00001074 E102                     M 	dc.b	$e1,$02
00001076 8002                       	dc.b	nRst, $02
00001078                            
00001078                            ; FM5 Data
00001078                            Sound6F_LargeLaser_FM5:
00001078                            	smpsSetvoice        $00
00001078 EF00                     M 	dc.b	$ef,$00
0000107A                            	smpsAlterVol        $0C
0000107A E60C                     M 	dc.b	$e6,$0c
0000107C DF06 E7                    	dc.b	nBb7, $06, smpsNoAttack
0000107F                            	smpsAlterVol        $F4
0000107F E6F4                     M 	dc.b	$e6,$f4
00001081 06E7                       	dc.b	$06, smpsNoAttack
00001083                            	smpsAlterVol        $F4
00001083 E6F4                     M 	dc.b	$e6,$f4
00001085 12E7                       	dc.b	$12, smpsNoAttack
00001087                            	smpsAlterVol        $0C
00001087 E60C                     M 	dc.b	$e6,$0c
00001089 06E7                       	dc.b	$06, smpsNoAttack
0000108B                            	smpsAlterVol        $0C
0000108B E60C                     M 	dc.b	$e6,$0c
0000108D 06                         	dc.b	$06
0000108E                            	smpsStop
0000108E F2                       M 	dc.b	$f2
0000108F                            
0000108F                            ; PSG3 Data
0000108F                            Sound6F_LargeLaser_PSG3:
0000108F                            	smpsPSGform         $E7
0000108F F3E7                     M 	dc.b	$f3,$e7
00001091 C604 C0BA B4AE             	dc.b	nMaxPSG, $04, nEb5, nA4, nEb4, nA3
00001097                            	smpsAlterVol        $01
00001097 E601                     M 	dc.b	$e6,$01
00001099 AE                         	dc.b	nA3
0000109A                            	smpsAlterVol        $01
0000109A E601                     M 	dc.b	$e6,$01
0000109C AE                         	dc.b	nA3
0000109D                            	smpsAlterVol        $01
0000109D E601                     M 	dc.b	$e6,$01
0000109F AE                         	dc.b	nA3
000010A0                            	smpsStop
000010A0 F2                       M 	dc.b	$f2
000010A1                            Sound70:	include "sound/sfx/F0 - Oil Slide.asm"
000010A1                            Sound70_OilSlide_Header:
000010A1                            	smpsHeaderStartSong 2
000010A1 =000010A1                M songstart_3530	equ	offset(*)
000010A1                            	smpsHeaderVoiceNull
000010A1 0000                     M 	dc.w	$0000
000010A3                            	smpsHeaderTempoSFX  $01
000010A3 01                       M 	dc.b	$01
000010A4                            	smpsHeaderChanSFX   $01
000010A4 01                       M 	dc.b	$01
000010A5                            
000010A5                            	smpsHeaderSFXChannel cPSG3, Sound70_OilSlide_PSG3,	$00, $00
000010A5 80C0                     M 	dc.b	$80,cpsg3
000010A7                          M 	z80_ptr	sound70_oilslide_psg3
000010A7 0000                     M 	dc.w	(((sound70_oilslide_psg3)<<8)&$ff00)|(((sound70_oilslide_psg3)>>8)&$ff)|$80
000010A9 0000                     M 	dc.b	$00,$00
000010AB                            
000010AB                            ; PSG3 Data
000010AB                            Sound70_OilSlide_PSG3:
000010AB                            	smpsPSGform         $E7
000010AB F3E7                     M 	dc.b	$f3,$e7
000010AD C618                       	dc.b	nMaxPSG, $18
000010AF                            
000010AF                            Sound70_OilSlide_Loop00:
000010AF E703                       	dc.b	smpsNoAttack, $03
000010B1                            	smpsAlterVol        $01
000010B1 E601                     M 	dc.b	$e6,$01
000010B3                            	smpsLoop            $00, $08, Sound70_OilSlide_Loop00
000010B3 F700 08                  M 	dc.b	$f7,$00,$08
000010B6                          M 	z80_ptr	sound70_oilslide_loop00
000010B6 0000                     M 	dc.w	(((sound70_oilslide_loop00)<<8)&$ff00)|(((sound70_oilslide_loop00)>>8)&$ff)|$80
000010B8                            	smpsStop
000010B8 F2                       M 	dc.b	$f2
